
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20029328 	.word	0x20029328
    c004:	00014a19 	.word	0x00014a19
    c008:	0002cbfd 	.word	0x0002cbfd
    c00c:	00014a49 	.word	0x00014a49
    c010:	00014a49 	.word	0x00014a49
    c014:	00014a49 	.word	0x00014a49
    c018:	00014a49 	.word	0x00014a49
    c01c:	00014a49 	.word	0x00014a49
	...
    c02c:	000146ed 	.word	0x000146ed
    c030:	00014a49 	.word	0x00014a49
    c034:	00000000 	.word	0x00000000
    c038:	0001463d 	.word	0x0001463d
    c03c:	00014329 	.word	0x00014329

0000c040 <_irq_vector_table>:
    c040:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c050:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c060:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c070:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c080:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c090:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c0a0:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c0b0:	00016a79 0002db15 000149d9 000149d9     yj.......I...I..
    c0c0:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c0d0:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c0e0:	000149d9 000149d9 0002db33 000149d9     .I...I..3....I..
    c0f0:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c100:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c110:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c120:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c130:	000149d9 000149d9 000149d9 000149d9     .I...I...I...I..
    c140:	000149d9                                .I..

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00027ae8 00000001 0000c000 0000c000     .z..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__gedf2>:
    c5b8:	f04f 3cff 	mov.w	ip, #4294967295
    c5bc:	e006      	b.n	c5cc <__cmpdf2+0x4>
    c5be:	bf00      	nop

0000c5c0 <__ledf2>:
    c5c0:	f04f 0c01 	mov.w	ip, #1
    c5c4:	e002      	b.n	c5cc <__cmpdf2+0x4>
    c5c6:	bf00      	nop

0000c5c8 <__cmpdf2>:
    c5c8:	f04f 0c01 	mov.w	ip, #1
    c5cc:	f84d cd04 	str.w	ip, [sp, #-4]!
    c5d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c5d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c5d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c5dc:	bf18      	it	ne
    c5de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c5e2:	d01b      	beq.n	c61c <__cmpdf2+0x54>
    c5e4:	b001      	add	sp, #4
    c5e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c5ea:	bf0c      	ite	eq
    c5ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c5f0:	ea91 0f03 	teqne	r1, r3
    c5f4:	bf02      	ittt	eq
    c5f6:	ea90 0f02 	teqeq	r0, r2
    c5fa:	2000      	moveq	r0, #0
    c5fc:	4770      	bxeq	lr
    c5fe:	f110 0f00 	cmn.w	r0, #0
    c602:	ea91 0f03 	teq	r1, r3
    c606:	bf58      	it	pl
    c608:	4299      	cmppl	r1, r3
    c60a:	bf08      	it	eq
    c60c:	4290      	cmpeq	r0, r2
    c60e:	bf2c      	ite	cs
    c610:	17d8      	asrcs	r0, r3, #31
    c612:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c616:	f040 0001 	orr.w	r0, r0, #1
    c61a:	4770      	bx	lr
    c61c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c624:	d102      	bne.n	c62c <__cmpdf2+0x64>
    c626:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c62a:	d107      	bne.n	c63c <__cmpdf2+0x74>
    c62c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c634:	d1d6      	bne.n	c5e4 <__cmpdf2+0x1c>
    c636:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c63a:	d0d3      	beq.n	c5e4 <__cmpdf2+0x1c>
    c63c:	f85d 0b04 	ldr.w	r0, [sp], #4
    c640:	4770      	bx	lr
    c642:	bf00      	nop

0000c644 <__aeabi_cdrcmple>:
    c644:	4684      	mov	ip, r0
    c646:	4610      	mov	r0, r2
    c648:	4662      	mov	r2, ip
    c64a:	468c      	mov	ip, r1
    c64c:	4619      	mov	r1, r3
    c64e:	4663      	mov	r3, ip
    c650:	e000      	b.n	c654 <__aeabi_cdcmpeq>
    c652:	bf00      	nop

0000c654 <__aeabi_cdcmpeq>:
    c654:	b501      	push	{r0, lr}
    c656:	f7ff ffb7 	bl	c5c8 <__cmpdf2>
    c65a:	2800      	cmp	r0, #0
    c65c:	bf48      	it	mi
    c65e:	f110 0f00 	cmnmi.w	r0, #0
    c662:	bd01      	pop	{r0, pc}

0000c664 <__aeabi_dcmpeq>:
    c664:	f84d ed08 	str.w	lr, [sp, #-8]!
    c668:	f7ff fff4 	bl	c654 <__aeabi_cdcmpeq>
    c66c:	bf0c      	ite	eq
    c66e:	2001      	moveq	r0, #1
    c670:	2000      	movne	r0, #0
    c672:	f85d fb08 	ldr.w	pc, [sp], #8
    c676:	bf00      	nop

0000c678 <__aeabi_dcmplt>:
    c678:	f84d ed08 	str.w	lr, [sp, #-8]!
    c67c:	f7ff ffea 	bl	c654 <__aeabi_cdcmpeq>
    c680:	bf34      	ite	cc
    c682:	2001      	movcc	r0, #1
    c684:	2000      	movcs	r0, #0
    c686:	f85d fb08 	ldr.w	pc, [sp], #8
    c68a:	bf00      	nop

0000c68c <__aeabi_dcmple>:
    c68c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c690:	f7ff ffe0 	bl	c654 <__aeabi_cdcmpeq>
    c694:	bf94      	ite	ls
    c696:	2001      	movls	r0, #1
    c698:	2000      	movhi	r0, #0
    c69a:	f85d fb08 	ldr.w	pc, [sp], #8
    c69e:	bf00      	nop

0000c6a0 <__aeabi_dcmpge>:
    c6a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6a4:	f7ff ffce 	bl	c644 <__aeabi_cdrcmple>
    c6a8:	bf94      	ite	ls
    c6aa:	2001      	movls	r0, #1
    c6ac:	2000      	movhi	r0, #0
    c6ae:	f85d fb08 	ldr.w	pc, [sp], #8
    c6b2:	bf00      	nop

0000c6b4 <__aeabi_dcmpgt>:
    c6b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6b8:	f7ff ffc4 	bl	c644 <__aeabi_cdrcmple>
    c6bc:	bf34      	ite	cc
    c6be:	2001      	movcc	r0, #1
    c6c0:	2000      	movcs	r0, #0
    c6c2:	f85d fb08 	ldr.w	pc, [sp], #8
    c6c6:	bf00      	nop

0000c6c8 <__aeabi_d2iz>:
    c6c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c6cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c6d0:	d215      	bcs.n	c6fe <__aeabi_d2iz+0x36>
    c6d2:	d511      	bpl.n	c6f8 <__aeabi_d2iz+0x30>
    c6d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c6d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c6dc:	d912      	bls.n	c704 <__aeabi_d2iz+0x3c>
    c6de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c6e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c6e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c6ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c6ee:	fa23 f002 	lsr.w	r0, r3, r2
    c6f2:	bf18      	it	ne
    c6f4:	4240      	negne	r0, r0
    c6f6:	4770      	bx	lr
    c6f8:	f04f 0000 	mov.w	r0, #0
    c6fc:	4770      	bx	lr
    c6fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c702:	d105      	bne.n	c710 <__aeabi_d2iz+0x48>
    c704:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c708:	bf08      	it	eq
    c70a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c70e:	4770      	bx	lr
    c710:	f04f 0000 	mov.w	r0, #0
    c714:	4770      	bx	lr
    c716:	bf00      	nop

0000c718 <__aeabi_d2f>:
    c718:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c71c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c720:	bf24      	itt	cs
    c722:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c726:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c72a:	d90d      	bls.n	c748 <__aeabi_d2f+0x30>
    c72c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c730:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c734:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c738:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c73c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c740:	bf08      	it	eq
    c742:	f020 0001 	biceq.w	r0, r0, #1
    c746:	4770      	bx	lr
    c748:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c74c:	d121      	bne.n	c792 <__aeabi_d2f+0x7a>
    c74e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c752:	bfbc      	itt	lt
    c754:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c758:	4770      	bxlt	lr
    c75a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c75e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c762:	f1c2 0218 	rsb	r2, r2, #24
    c766:	f1c2 0c20 	rsb	ip, r2, #32
    c76a:	fa10 f30c 	lsls.w	r3, r0, ip
    c76e:	fa20 f002 	lsr.w	r0, r0, r2
    c772:	bf18      	it	ne
    c774:	f040 0001 	orrne.w	r0, r0, #1
    c778:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c77c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c780:	fa03 fc0c 	lsl.w	ip, r3, ip
    c784:	ea40 000c 	orr.w	r0, r0, ip
    c788:	fa23 f302 	lsr.w	r3, r3, r2
    c78c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c790:	e7cc      	b.n	c72c <__aeabi_d2f+0x14>
    c792:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c796:	d107      	bne.n	c7a8 <__aeabi_d2f+0x90>
    c798:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c79c:	bf1e      	ittt	ne
    c79e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c7a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c7a6:	4770      	bxne	lr
    c7a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c7ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c7b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop

0000c7b8 <__aeabi_ldivmod>:
    c7b8:	b97b      	cbnz	r3, c7da <__aeabi_ldivmod+0x22>
    c7ba:	b972      	cbnz	r2, c7da <__aeabi_ldivmod+0x22>
    c7bc:	2900      	cmp	r1, #0
    c7be:	bfbe      	ittt	lt
    c7c0:	2000      	movlt	r0, #0
    c7c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c7c6:	e006      	blt.n	c7d6 <__aeabi_ldivmod+0x1e>
    c7c8:	bf08      	it	eq
    c7ca:	2800      	cmpeq	r0, #0
    c7cc:	bf1c      	itt	ne
    c7ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c7d2:	f04f 30ff 	movne.w	r0, #4294967295
    c7d6:	f000 b9b7 	b.w	cb48 <__aeabi_idiv0>
    c7da:	f1ad 0c08 	sub.w	ip, sp, #8
    c7de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c7e2:	2900      	cmp	r1, #0
    c7e4:	db09      	blt.n	c7fa <__aeabi_ldivmod+0x42>
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	db1a      	blt.n	c820 <__aeabi_ldivmod+0x68>
    c7ea:	f000 f84d 	bl	c888 <__udivmoddi4>
    c7ee:	f8dd e004 	ldr.w	lr, [sp, #4]
    c7f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7f6:	b004      	add	sp, #16
    c7f8:	4770      	bx	lr
    c7fa:	4240      	negs	r0, r0
    c7fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c800:	2b00      	cmp	r3, #0
    c802:	db1b      	blt.n	c83c <__aeabi_ldivmod+0x84>
    c804:	f000 f840 	bl	c888 <__udivmoddi4>
    c808:	f8dd e004 	ldr.w	lr, [sp, #4]
    c80c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c810:	b004      	add	sp, #16
    c812:	4240      	negs	r0, r0
    c814:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c818:	4252      	negs	r2, r2
    c81a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c81e:	4770      	bx	lr
    c820:	4252      	negs	r2, r2
    c822:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c826:	f000 f82f 	bl	c888 <__udivmoddi4>
    c82a:	f8dd e004 	ldr.w	lr, [sp, #4]
    c82e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c832:	b004      	add	sp, #16
    c834:	4240      	negs	r0, r0
    c836:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c83a:	4770      	bx	lr
    c83c:	4252      	negs	r2, r2
    c83e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c842:	f000 f821 	bl	c888 <__udivmoddi4>
    c846:	f8dd e004 	ldr.w	lr, [sp, #4]
    c84a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c84e:	b004      	add	sp, #16
    c850:	4252      	negs	r2, r2
    c852:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c856:	4770      	bx	lr

0000c858 <__aeabi_uldivmod>:
    c858:	b953      	cbnz	r3, c870 <__aeabi_uldivmod+0x18>
    c85a:	b94a      	cbnz	r2, c870 <__aeabi_uldivmod+0x18>
    c85c:	2900      	cmp	r1, #0
    c85e:	bf08      	it	eq
    c860:	2800      	cmpeq	r0, #0
    c862:	bf1c      	itt	ne
    c864:	f04f 31ff 	movne.w	r1, #4294967295
    c868:	f04f 30ff 	movne.w	r0, #4294967295
    c86c:	f000 b96c 	b.w	cb48 <__aeabi_idiv0>
    c870:	f1ad 0c08 	sub.w	ip, sp, #8
    c874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c878:	f000 f806 	bl	c888 <__udivmoddi4>
    c87c:	f8dd e004 	ldr.w	lr, [sp, #4]
    c880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c884:	b004      	add	sp, #16
    c886:	4770      	bx	lr

0000c888 <__udivmoddi4>:
    c888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c88c:	9d08      	ldr	r5, [sp, #32]
    c88e:	4604      	mov	r4, r0
    c890:	4688      	mov	r8, r1
    c892:	2b00      	cmp	r3, #0
    c894:	d17d      	bne.n	c992 <__udivmoddi4+0x10a>
    c896:	428a      	cmp	r2, r1
    c898:	4617      	mov	r7, r2
    c89a:	d93f      	bls.n	c91c <__udivmoddi4+0x94>
    c89c:	fab2 f282 	clz	r2, r2
    c8a0:	b142      	cbz	r2, c8b4 <__udivmoddi4+0x2c>
    c8a2:	f1c2 0020 	rsb	r0, r2, #32
    c8a6:	4091      	lsls	r1, r2
    c8a8:	4097      	lsls	r7, r2
    c8aa:	fa24 f000 	lsr.w	r0, r4, r0
    c8ae:	4094      	lsls	r4, r2
    c8b0:	ea40 0801 	orr.w	r8, r0, r1
    c8b4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c8b8:	0c23      	lsrs	r3, r4, #16
    c8ba:	fa1f fe87 	uxth.w	lr, r7
    c8be:	fbb8 f6fc 	udiv	r6, r8, ip
    c8c2:	fb0c 8116 	mls	r1, ip, r6, r8
    c8c6:	fb06 f00e 	mul.w	r0, r6, lr
    c8ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c8ce:	4298      	cmp	r0, r3
    c8d0:	d905      	bls.n	c8de <__udivmoddi4+0x56>
    c8d2:	18fb      	adds	r3, r7, r3
    c8d4:	d202      	bcs.n	c8dc <__udivmoddi4+0x54>
    c8d6:	4298      	cmp	r0, r3
    c8d8:	f200 8124 	bhi.w	cb24 <__udivmoddi4+0x29c>
    c8dc:	3e01      	subs	r6, #1
    c8de:	1a19      	subs	r1, r3, r0
    c8e0:	b2a3      	uxth	r3, r4
    c8e2:	fbb1 f0fc 	udiv	r0, r1, ip
    c8e6:	fb0c 1110 	mls	r1, ip, r0, r1
    c8ea:	fb00 fe0e 	mul.w	lr, r0, lr
    c8ee:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c8f2:	45a6      	cmp	lr, r4
    c8f4:	d905      	bls.n	c902 <__udivmoddi4+0x7a>
    c8f6:	193c      	adds	r4, r7, r4
    c8f8:	d202      	bcs.n	c900 <__udivmoddi4+0x78>
    c8fa:	45a6      	cmp	lr, r4
    c8fc:	f200 810f 	bhi.w	cb1e <__udivmoddi4+0x296>
    c900:	3801      	subs	r0, #1
    c902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c906:	eba4 040e 	sub.w	r4, r4, lr
    c90a:	2600      	movs	r6, #0
    c90c:	b11d      	cbz	r5, c916 <__udivmoddi4+0x8e>
    c90e:	40d4      	lsrs	r4, r2
    c910:	2300      	movs	r3, #0
    c912:	e9c5 4300 	strd	r4, r3, [r5]
    c916:	4631      	mov	r1, r6
    c918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c91c:	b902      	cbnz	r2, c920 <__udivmoddi4+0x98>
    c91e:	deff      	udf	#255	; 0xff
    c920:	fab2 f282 	clz	r2, r2
    c924:	2a00      	cmp	r2, #0
    c926:	d150      	bne.n	c9ca <__udivmoddi4+0x142>
    c928:	1bcb      	subs	r3, r1, r7
    c92a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c92e:	fa1f f887 	uxth.w	r8, r7
    c932:	2601      	movs	r6, #1
    c934:	0c21      	lsrs	r1, r4, #16
    c936:	fbb3 fcfe 	udiv	ip, r3, lr
    c93a:	fb0e 301c 	mls	r0, lr, ip, r3
    c93e:	460b      	mov	r3, r1
    c940:	fb08 f90c 	mul.w	r9, r8, ip
    c944:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c948:	4589      	cmp	r9, r1
    c94a:	d90a      	bls.n	c962 <__udivmoddi4+0xda>
    c94c:	1879      	adds	r1, r7, r1
    c94e:	bf2c      	ite	cs
    c950:	2301      	movcs	r3, #1
    c952:	2300      	movcc	r3, #0
    c954:	4589      	cmp	r9, r1
    c956:	d902      	bls.n	c95e <__udivmoddi4+0xd6>
    c958:	2b00      	cmp	r3, #0
    c95a:	f000 80d9 	beq.w	cb10 <__udivmoddi4+0x288>
    c95e:	f10c 3cff 	add.w	ip, ip, #4294967295
    c962:	eba1 0109 	sub.w	r1, r1, r9
    c966:	b2a3      	uxth	r3, r4
    c968:	fbb1 f0fe 	udiv	r0, r1, lr
    c96c:	fb0e 1110 	mls	r1, lr, r0, r1
    c970:	fb08 f800 	mul.w	r8, r8, r0
    c974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c978:	45a0      	cmp	r8, r4
    c97a:	d905      	bls.n	c988 <__udivmoddi4+0x100>
    c97c:	193c      	adds	r4, r7, r4
    c97e:	d202      	bcs.n	c986 <__udivmoddi4+0xfe>
    c980:	45a0      	cmp	r8, r4
    c982:	f200 80c9 	bhi.w	cb18 <__udivmoddi4+0x290>
    c986:	3801      	subs	r0, #1
    c988:	eba4 0408 	sub.w	r4, r4, r8
    c98c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c990:	e7bc      	b.n	c90c <__udivmoddi4+0x84>
    c992:	428b      	cmp	r3, r1
    c994:	d909      	bls.n	c9aa <__udivmoddi4+0x122>
    c996:	2d00      	cmp	r5, #0
    c998:	f000 80b1 	beq.w	cafe <__udivmoddi4+0x276>
    c99c:	2600      	movs	r6, #0
    c99e:	e9c5 0100 	strd	r0, r1, [r5]
    c9a2:	4630      	mov	r0, r6
    c9a4:	4631      	mov	r1, r6
    c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9aa:	fab3 f683 	clz	r6, r3
    c9ae:	2e00      	cmp	r6, #0
    c9b0:	d146      	bne.n	ca40 <__udivmoddi4+0x1b8>
    c9b2:	428b      	cmp	r3, r1
    c9b4:	f0c0 80a6 	bcc.w	cb04 <__udivmoddi4+0x27c>
    c9b8:	4282      	cmp	r2, r0
    c9ba:	f240 80a3 	bls.w	cb04 <__udivmoddi4+0x27c>
    c9be:	4630      	mov	r0, r6
    c9c0:	2d00      	cmp	r5, #0
    c9c2:	d0a8      	beq.n	c916 <__udivmoddi4+0x8e>
    c9c4:	e9c5 4800 	strd	r4, r8, [r5]
    c9c8:	e7a5      	b.n	c916 <__udivmoddi4+0x8e>
    c9ca:	4097      	lsls	r7, r2
    c9cc:	f1c2 0320 	rsb	r3, r2, #32
    c9d0:	fa01 f002 	lsl.w	r0, r1, r2
    c9d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c9d8:	40d9      	lsrs	r1, r3
    c9da:	fa24 f303 	lsr.w	r3, r4, r3
    c9de:	fa1f f887 	uxth.w	r8, r7
    c9e2:	4094      	lsls	r4, r2
    c9e4:	4303      	orrs	r3, r0
    c9e6:	fbb1 f0fe 	udiv	r0, r1, lr
    c9ea:	0c1e      	lsrs	r6, r3, #16
    c9ec:	fb0e 1110 	mls	r1, lr, r0, r1
    c9f0:	fb00 fc08 	mul.w	ip, r0, r8
    c9f4:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    c9f8:	458c      	cmp	ip, r1
    c9fa:	d909      	bls.n	ca10 <__udivmoddi4+0x188>
    c9fc:	1879      	adds	r1, r7, r1
    c9fe:	bf2c      	ite	cs
    ca00:	2601      	movcs	r6, #1
    ca02:	2600      	movcc	r6, #0
    ca04:	458c      	cmp	ip, r1
    ca06:	d902      	bls.n	ca0e <__udivmoddi4+0x186>
    ca08:	2e00      	cmp	r6, #0
    ca0a:	f000 8093 	beq.w	cb34 <__udivmoddi4+0x2ac>
    ca0e:	3801      	subs	r0, #1
    ca10:	eba1 010c 	sub.w	r1, r1, ip
    ca14:	b29b      	uxth	r3, r3
    ca16:	fbb1 f6fe 	udiv	r6, r1, lr
    ca1a:	fb0e 1116 	mls	r1, lr, r6, r1
    ca1e:	fb06 fc08 	mul.w	ip, r6, r8
    ca22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    ca26:	458c      	cmp	ip, r1
    ca28:	d905      	bls.n	ca36 <__udivmoddi4+0x1ae>
    ca2a:	1879      	adds	r1, r7, r1
    ca2c:	d202      	bcs.n	ca34 <__udivmoddi4+0x1ac>
    ca2e:	458c      	cmp	ip, r1
    ca30:	f200 8087 	bhi.w	cb42 <__udivmoddi4+0x2ba>
    ca34:	3e01      	subs	r6, #1
    ca36:	eba1 030c 	sub.w	r3, r1, ip
    ca3a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    ca3e:	e779      	b.n	c934 <__udivmoddi4+0xac>
    ca40:	f1c6 0720 	rsb	r7, r6, #32
    ca44:	fa03 f406 	lsl.w	r4, r3, r6
    ca48:	fa02 fc06 	lsl.w	ip, r2, r6
    ca4c:	fa01 fe06 	lsl.w	lr, r1, r6
    ca50:	40fa      	lsrs	r2, r7
    ca52:	fa20 f807 	lsr.w	r8, r0, r7
    ca56:	40f9      	lsrs	r1, r7
    ca58:	fa00 f306 	lsl.w	r3, r0, r6
    ca5c:	4322      	orrs	r2, r4
    ca5e:	ea48 040e 	orr.w	r4, r8, lr
    ca62:	ea4f 4812 	mov.w	r8, r2, lsr #16
    ca66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    ca6a:	fa1f f982 	uxth.w	r9, r2
    ca6e:	fbb1 faf8 	udiv	sl, r1, r8
    ca72:	fb08 111a 	mls	r1, r8, sl, r1
    ca76:	fb0a f009 	mul.w	r0, sl, r9
    ca7a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    ca7e:	4570      	cmp	r0, lr
    ca80:	d90a      	bls.n	ca98 <__udivmoddi4+0x210>
    ca82:	eb12 0e0e 	adds.w	lr, r2, lr
    ca86:	bf2c      	ite	cs
    ca88:	2101      	movcs	r1, #1
    ca8a:	2100      	movcc	r1, #0
    ca8c:	4570      	cmp	r0, lr
    ca8e:	d901      	bls.n	ca94 <__udivmoddi4+0x20c>
    ca90:	2900      	cmp	r1, #0
    ca92:	d052      	beq.n	cb3a <__udivmoddi4+0x2b2>
    ca94:	f10a 3aff 	add.w	sl, sl, #4294967295
    ca98:	ebae 0e00 	sub.w	lr, lr, r0
    ca9c:	b2a4      	uxth	r4, r4
    ca9e:	fbbe f0f8 	udiv	r0, lr, r8
    caa2:	fb08 ee10 	mls	lr, r8, r0, lr
    caa6:	fb00 f909 	mul.w	r9, r0, r9
    caaa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    caae:	45f1      	cmp	r9, lr
    cab0:	d905      	bls.n	cabe <__udivmoddi4+0x236>
    cab2:	eb12 0e0e 	adds.w	lr, r2, lr
    cab6:	d201      	bcs.n	cabc <__udivmoddi4+0x234>
    cab8:	45f1      	cmp	r9, lr
    caba:	d838      	bhi.n	cb2e <__udivmoddi4+0x2a6>
    cabc:	3801      	subs	r0, #1
    cabe:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    cac2:	ebae 0e09 	sub.w	lr, lr, r9
    cac6:	fba0 890c 	umull	r8, r9, r0, ip
    caca:	45ce      	cmp	lr, r9
    cacc:	4641      	mov	r1, r8
    cace:	464c      	mov	r4, r9
    cad0:	d302      	bcc.n	cad8 <__udivmoddi4+0x250>
    cad2:	d106      	bne.n	cae2 <__udivmoddi4+0x25a>
    cad4:	4543      	cmp	r3, r8
    cad6:	d204      	bcs.n	cae2 <__udivmoddi4+0x25a>
    cad8:	3801      	subs	r0, #1
    cada:	ebb8 010c 	subs.w	r1, r8, ip
    cade:	eb69 0402 	sbc.w	r4, r9, r2
    cae2:	b315      	cbz	r5, cb2a <__udivmoddi4+0x2a2>
    cae4:	1a5a      	subs	r2, r3, r1
    cae6:	eb6e 0e04 	sbc.w	lr, lr, r4
    caea:	40f2      	lsrs	r2, r6
    caec:	fa0e f707 	lsl.w	r7, lr, r7
    caf0:	fa2e f306 	lsr.w	r3, lr, r6
    caf4:	2600      	movs	r6, #0
    caf6:	4317      	orrs	r7, r2
    caf8:	e9c5 7300 	strd	r7, r3, [r5]
    cafc:	e70b      	b.n	c916 <__udivmoddi4+0x8e>
    cafe:	462e      	mov	r6, r5
    cb00:	4628      	mov	r0, r5
    cb02:	e708      	b.n	c916 <__udivmoddi4+0x8e>
    cb04:	1a84      	subs	r4, r0, r2
    cb06:	eb61 0103 	sbc.w	r1, r1, r3
    cb0a:	2001      	movs	r0, #1
    cb0c:	4688      	mov	r8, r1
    cb0e:	e757      	b.n	c9c0 <__udivmoddi4+0x138>
    cb10:	f1ac 0c02 	sub.w	ip, ip, #2
    cb14:	4439      	add	r1, r7
    cb16:	e724      	b.n	c962 <__udivmoddi4+0xda>
    cb18:	3802      	subs	r0, #2
    cb1a:	443c      	add	r4, r7
    cb1c:	e734      	b.n	c988 <__udivmoddi4+0x100>
    cb1e:	3802      	subs	r0, #2
    cb20:	443c      	add	r4, r7
    cb22:	e6ee      	b.n	c902 <__udivmoddi4+0x7a>
    cb24:	3e02      	subs	r6, #2
    cb26:	443b      	add	r3, r7
    cb28:	e6d9      	b.n	c8de <__udivmoddi4+0x56>
    cb2a:	462e      	mov	r6, r5
    cb2c:	e6f3      	b.n	c916 <__udivmoddi4+0x8e>
    cb2e:	3802      	subs	r0, #2
    cb30:	4496      	add	lr, r2
    cb32:	e7c4      	b.n	cabe <__udivmoddi4+0x236>
    cb34:	3802      	subs	r0, #2
    cb36:	4439      	add	r1, r7
    cb38:	e76a      	b.n	ca10 <__udivmoddi4+0x188>
    cb3a:	f1aa 0a02 	sub.w	sl, sl, #2
    cb3e:	4496      	add	lr, r2
    cb40:	e7aa      	b.n	ca98 <__udivmoddi4+0x210>
    cb42:	3e02      	subs	r6, #2
    cb44:	4439      	add	r1, r7
    cb46:	e776      	b.n	ca36 <__udivmoddi4+0x1ae>

0000cb48 <__aeabi_idiv0>:
    cb48:	4770      	bx	lr
    cb4a:	bf00      	nop

0000cb4c <memcpy>:
    cb4c:	4684      	mov	ip, r0
    cb4e:	ea41 0300 	orr.w	r3, r1, r0
    cb52:	f013 0303 	ands.w	r3, r3, #3
    cb56:	d149      	bne.n	cbec <memcpy+0xa0>
    cb58:	3a40      	subs	r2, #64	; 0x40
    cb5a:	d323      	bcc.n	cba4 <memcpy+0x58>
    cb5c:	680b      	ldr	r3, [r1, #0]
    cb5e:	6003      	str	r3, [r0, #0]
    cb60:	684b      	ldr	r3, [r1, #4]
    cb62:	6043      	str	r3, [r0, #4]
    cb64:	688b      	ldr	r3, [r1, #8]
    cb66:	6083      	str	r3, [r0, #8]
    cb68:	68cb      	ldr	r3, [r1, #12]
    cb6a:	60c3      	str	r3, [r0, #12]
    cb6c:	690b      	ldr	r3, [r1, #16]
    cb6e:	6103      	str	r3, [r0, #16]
    cb70:	694b      	ldr	r3, [r1, #20]
    cb72:	6143      	str	r3, [r0, #20]
    cb74:	698b      	ldr	r3, [r1, #24]
    cb76:	6183      	str	r3, [r0, #24]
    cb78:	69cb      	ldr	r3, [r1, #28]
    cb7a:	61c3      	str	r3, [r0, #28]
    cb7c:	6a0b      	ldr	r3, [r1, #32]
    cb7e:	6203      	str	r3, [r0, #32]
    cb80:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    cb82:	6243      	str	r3, [r0, #36]	; 0x24
    cb84:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    cb86:	6283      	str	r3, [r0, #40]	; 0x28
    cb88:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    cb8a:	62c3      	str	r3, [r0, #44]	; 0x2c
    cb8c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    cb8e:	6303      	str	r3, [r0, #48]	; 0x30
    cb90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    cb92:	6343      	str	r3, [r0, #52]	; 0x34
    cb94:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    cb96:	6383      	str	r3, [r0, #56]	; 0x38
    cb98:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    cb9a:	63c3      	str	r3, [r0, #60]	; 0x3c
    cb9c:	3040      	adds	r0, #64	; 0x40
    cb9e:	3140      	adds	r1, #64	; 0x40
    cba0:	3a40      	subs	r2, #64	; 0x40
    cba2:	d2db      	bcs.n	cb5c <memcpy+0x10>
    cba4:	3230      	adds	r2, #48	; 0x30
    cba6:	d30b      	bcc.n	cbc0 <memcpy+0x74>
    cba8:	680b      	ldr	r3, [r1, #0]
    cbaa:	6003      	str	r3, [r0, #0]
    cbac:	684b      	ldr	r3, [r1, #4]
    cbae:	6043      	str	r3, [r0, #4]
    cbb0:	688b      	ldr	r3, [r1, #8]
    cbb2:	6083      	str	r3, [r0, #8]
    cbb4:	68cb      	ldr	r3, [r1, #12]
    cbb6:	60c3      	str	r3, [r0, #12]
    cbb8:	3010      	adds	r0, #16
    cbba:	3110      	adds	r1, #16
    cbbc:	3a10      	subs	r2, #16
    cbbe:	d2f3      	bcs.n	cba8 <memcpy+0x5c>
    cbc0:	320c      	adds	r2, #12
    cbc2:	d305      	bcc.n	cbd0 <memcpy+0x84>
    cbc4:	f851 3b04 	ldr.w	r3, [r1], #4
    cbc8:	f840 3b04 	str.w	r3, [r0], #4
    cbcc:	3a04      	subs	r2, #4
    cbce:	d2f9      	bcs.n	cbc4 <memcpy+0x78>
    cbd0:	3204      	adds	r2, #4
    cbd2:	d008      	beq.n	cbe6 <memcpy+0x9a>
    cbd4:	07d2      	lsls	r2, r2, #31
    cbd6:	bf1c      	itt	ne
    cbd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cbdc:	f800 3b01 	strbne.w	r3, [r0], #1
    cbe0:	d301      	bcc.n	cbe6 <memcpy+0x9a>
    cbe2:	880b      	ldrh	r3, [r1, #0]
    cbe4:	8003      	strh	r3, [r0, #0]
    cbe6:	4660      	mov	r0, ip
    cbe8:	4770      	bx	lr
    cbea:	bf00      	nop
    cbec:	2a08      	cmp	r2, #8
    cbee:	d313      	bcc.n	cc18 <memcpy+0xcc>
    cbf0:	078b      	lsls	r3, r1, #30
    cbf2:	d0b1      	beq.n	cb58 <memcpy+0xc>
    cbf4:	f010 0303 	ands.w	r3, r0, #3
    cbf8:	d0ae      	beq.n	cb58 <memcpy+0xc>
    cbfa:	f1c3 0304 	rsb	r3, r3, #4
    cbfe:	1ad2      	subs	r2, r2, r3
    cc00:	07db      	lsls	r3, r3, #31
    cc02:	bf1c      	itt	ne
    cc04:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cc08:	f800 3b01 	strbne.w	r3, [r0], #1
    cc0c:	d3a4      	bcc.n	cb58 <memcpy+0xc>
    cc0e:	f831 3b02 	ldrh.w	r3, [r1], #2
    cc12:	f820 3b02 	strh.w	r3, [r0], #2
    cc16:	e79f      	b.n	cb58 <memcpy+0xc>
    cc18:	3a04      	subs	r2, #4
    cc1a:	d3d9      	bcc.n	cbd0 <memcpy+0x84>
    cc1c:	3a01      	subs	r2, #1
    cc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
    cc22:	f800 3b01 	strb.w	r3, [r0], #1
    cc26:	d2f9      	bcs.n	cc1c <memcpy+0xd0>
    cc28:	780b      	ldrb	r3, [r1, #0]
    cc2a:	7003      	strb	r3, [r0, #0]
    cc2c:	784b      	ldrb	r3, [r1, #1]
    cc2e:	7043      	strb	r3, [r0, #1]
    cc30:	788b      	ldrb	r3, [r1, #2]
    cc32:	7083      	strb	r3, [r0, #2]
    cc34:	4660      	mov	r0, ip
    cc36:	4770      	bx	lr

0000cc38 <strcmp>:
    cc38:	ea80 0c01 	eor.w	ip, r0, r1
    cc3c:	f01c 0f03 	tst.w	ip, #3
    cc40:	d137      	bne.n	ccb2 <strcmp+0x7a>
    cc42:	f010 0c03 	ands.w	ip, r0, #3
    cc46:	f020 0003 	bic.w	r0, r0, #3
    cc4a:	f021 0103 	bic.w	r1, r1, #3
    cc4e:	f850 2b04 	ldr.w	r2, [r0], #4
    cc52:	bf08      	it	eq
    cc54:	f851 3b04 	ldreq.w	r3, [r1], #4
    cc58:	d00e      	beq.n	cc78 <strcmp+0x40>
    cc5a:	f08c 0c03 	eor.w	ip, ip, #3
    cc5e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    cc62:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    cc66:	fa23 fc0c 	lsr.w	ip, r3, ip
    cc6a:	f851 3b04 	ldr.w	r3, [r1], #4
    cc6e:	ea42 020c 	orr.w	r2, r2, ip
    cc72:	ea43 030c 	orr.w	r3, r3, ip
    cc76:	bf00      	nop
    cc78:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cc7c:	429a      	cmp	r2, r3
    cc7e:	bf01      	itttt	eq
    cc80:	ea2c 0c02 	biceq.w	ip, ip, r2
    cc84:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
    cc88:	f850 2b04 	ldreq.w	r2, [r0], #4
    cc8c:	f851 3b04 	ldreq.w	r3, [r1], #4
    cc90:	d0f2      	beq.n	cc78 <strcmp+0x40>
    cc92:	ea4f 6002 	mov.w	r0, r2, lsl #24
    cc96:	ea4f 2212 	mov.w	r2, r2, lsr #8
    cc9a:	2801      	cmp	r0, #1
    cc9c:	bf28      	it	cs
    cc9e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
    cca2:	bf08      	it	eq
    cca4:	0a1b      	lsreq	r3, r3, #8
    cca6:	d0f4      	beq.n	cc92 <strcmp+0x5a>
    cca8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ccac:	0e00      	lsrs	r0, r0, #24
    ccae:	1ac0      	subs	r0, r0, r3
    ccb0:	4770      	bx	lr
    ccb2:	f010 0f03 	tst.w	r0, #3
    ccb6:	d00a      	beq.n	ccce <strcmp+0x96>
    ccb8:	f810 2b01 	ldrb.w	r2, [r0], #1
    ccbc:	f811 3b01 	ldrb.w	r3, [r1], #1
    ccc0:	2a01      	cmp	r2, #1
    ccc2:	bf28      	it	cs
    ccc4:	429a      	cmpcs	r2, r3
    ccc6:	d0f4      	beq.n	ccb2 <strcmp+0x7a>
    ccc8:	eba2 0003 	sub.w	r0, r2, r3
    cccc:	4770      	bx	lr
    ccce:	f84d 5d04 	str.w	r5, [sp, #-4]!
    ccd2:	f850 2b04 	ldr.w	r2, [r0], #4
    ccd6:	f001 0503 	and.w	r5, r1, #3
    ccda:	f021 0103 	bic.w	r1, r1, #3
    ccde:	f851 3b04 	ldr.w	r3, [r1], #4
    cce2:	2d02      	cmp	r5, #2
    cce4:	d026      	beq.n	cd34 <strcmp+0xfc>
    cce6:	d84d      	bhi.n	cd84 <strcmp+0x14c>
    cce8:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
    ccec:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
    ccf0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    ccf4:	ea2c 0c02 	bic.w	ip, ip, r2
    ccf8:	d10d      	bne.n	cd16 <strcmp+0xde>
    ccfa:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    ccfe:	bf08      	it	eq
    cd00:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd04:	d10a      	bne.n	cd1c <strcmp+0xe4>
    cd06:	ea85 0502 	eor.w	r5, r5, r2
    cd0a:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
    cd0e:	d10c      	bne.n	cd2a <strcmp+0xf2>
    cd10:	f850 2b04 	ldr.w	r2, [r0], #4
    cd14:	e7e8      	b.n	cce8 <strcmp+0xb0>
    cd16:	ea4f 2313 	mov.w	r3, r3, lsr #8
    cd1a:	e05b      	b.n	cdd4 <strcmp+0x19c>
    cd1c:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
    cd20:	d154      	bne.n	cdcc <strcmp+0x194>
    cd22:	780b      	ldrb	r3, [r1, #0]
    cd24:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd28:	e054      	b.n	cdd4 <strcmp+0x19c>
    cd2a:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd2e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    cd32:	e04f      	b.n	cdd4 <strcmp+0x19c>
    cd34:	ea4f 4502 	mov.w	r5, r2, lsl #16
    cd38:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd3c:	ea4f 4515 	mov.w	r5, r5, lsr #16
    cd40:	ea2c 0c02 	bic.w	ip, ip, r2
    cd44:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
    cd48:	d118      	bne.n	cd7c <strcmp+0x144>
    cd4a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd4e:	bf08      	it	eq
    cd50:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd54:	d107      	bne.n	cd66 <strcmp+0x12e>
    cd56:	ea85 0502 	eor.w	r5, r5, r2
    cd5a:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
    cd5e:	d109      	bne.n	cd74 <strcmp+0x13c>
    cd60:	f850 2b04 	ldr.w	r2, [r0], #4
    cd64:	e7e6      	b.n	cd34 <strcmp+0xfc>
    cd66:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
    cd6a:	d12f      	bne.n	cdcc <strcmp+0x194>
    cd6c:	880b      	ldrh	r3, [r1, #0]
    cd6e:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cd72:	e02f      	b.n	cdd4 <strcmp+0x19c>
    cd74:	ea4f 4303 	mov.w	r3, r3, lsl #16
    cd78:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cd7c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    cd80:	e028      	b.n	cdd4 <strcmp+0x19c>
    cd82:	bf00      	nop
    cd84:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    cd88:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
    cd8c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd90:	ea2c 0c02 	bic.w	ip, ip, r2
    cd94:	d10d      	bne.n	cdb2 <strcmp+0x17a>
    cd96:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd9a:	bf08      	it	eq
    cd9c:	f851 3b04 	ldreq.w	r3, [r1], #4
    cda0:	d10a      	bne.n	cdb8 <strcmp+0x180>
    cda2:	ea85 0502 	eor.w	r5, r5, r2
    cda6:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
    cdaa:	d10a      	bne.n	cdc2 <strcmp+0x18a>
    cdac:	f850 2b04 	ldr.w	r2, [r0], #4
    cdb0:	e7e8      	b.n	cd84 <strcmp+0x14c>
    cdb2:	ea4f 6313 	mov.w	r3, r3, lsr #24
    cdb6:	e00d      	b.n	cdd4 <strcmp+0x19c>
    cdb8:	f012 0fff 	tst.w	r2, #255	; 0xff
    cdbc:	d006      	beq.n	cdcc <strcmp+0x194>
    cdbe:	f851 3b04 	ldr.w	r3, [r1], #4
    cdc2:	ea4f 2512 	mov.w	r5, r2, lsr #8
    cdc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdca:	e003      	b.n	cdd4 <strcmp+0x19c>
    cdcc:	f04f 0000 	mov.w	r0, #0
    cdd0:	bc20      	pop	{r5}
    cdd2:	4770      	bx	lr
    cdd4:	f005 02ff 	and.w	r2, r5, #255	; 0xff
    cdd8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cddc:	2801      	cmp	r0, #1
    cdde:	bf28      	it	cs
    cde0:	4290      	cmpcs	r0, r2
    cde2:	bf04      	itt	eq
    cde4:	0a2d      	lsreq	r5, r5, #8
    cde6:	0a1b      	lsreq	r3, r3, #8
    cde8:	d0f4      	beq.n	cdd4 <strcmp+0x19c>
    cdea:	eba2 0000 	sub.w	r0, r2, r0
    cdee:	bc20      	pop	{r5}
    cdf0:	4770      	bx	lr
    cdf2:	bf00      	nop

0000cdf4 <__aeabi_dmul>:
    cdf4:	b570      	push	{r4, r5, r6, lr}
    cdf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cdfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cdfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ce02:	bf1d      	ittte	ne
    ce04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ce08:	ea94 0f0c 	teqne	r4, ip
    ce0c:	ea95 0f0c 	teqne	r5, ip
    ce10:	f000 f8de 	bleq	cfd0 <__aeabi_dmul+0x1dc>
    ce14:	442c      	add	r4, r5
    ce16:	ea81 0603 	eor.w	r6, r1, r3
    ce1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    ce1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    ce22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    ce26:	bf18      	it	ne
    ce28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    ce2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ce30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ce34:	d038      	beq.n	cea8 <__aeabi_dmul+0xb4>
    ce36:	fba0 ce02 	umull	ip, lr, r0, r2
    ce3a:	f04f 0500 	mov.w	r5, #0
    ce3e:	fbe1 e502 	umlal	lr, r5, r1, r2
    ce42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    ce46:	fbe0 e503 	umlal	lr, r5, r0, r3
    ce4a:	f04f 0600 	mov.w	r6, #0
    ce4e:	fbe1 5603 	umlal	r5, r6, r1, r3
    ce52:	f09c 0f00 	teq	ip, #0
    ce56:	bf18      	it	ne
    ce58:	f04e 0e01 	orrne.w	lr, lr, #1
    ce5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    ce60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    ce64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    ce68:	d204      	bcs.n	ce74 <__aeabi_dmul+0x80>
    ce6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    ce6e:	416d      	adcs	r5, r5
    ce70:	eb46 0606 	adc.w	r6, r6, r6
    ce74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    ce78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    ce7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    ce80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    ce84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    ce88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ce8c:	bf88      	it	hi
    ce8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ce92:	d81e      	bhi.n	ced2 <__aeabi_dmul+0xde>
    ce94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    ce98:	bf08      	it	eq
    ce9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    ce9e:	f150 0000 	adcs.w	r0, r0, #0
    cea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cea6:	bd70      	pop	{r4, r5, r6, pc}
    cea8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    ceac:	ea46 0101 	orr.w	r1, r6, r1
    ceb0:	ea40 0002 	orr.w	r0, r0, r2
    ceb4:	ea81 0103 	eor.w	r1, r1, r3
    ceb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    cebc:	bfc2      	ittt	gt
    cebe:	ebd4 050c 	rsbsgt	r5, r4, ip
    cec2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cec6:	bd70      	popgt	{r4, r5, r6, pc}
    cec8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cecc:	f04f 0e00 	mov.w	lr, #0
    ced0:	3c01      	subs	r4, #1
    ced2:	f300 80ab 	bgt.w	d02c <__aeabi_dmul+0x238>
    ced6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    ceda:	bfde      	ittt	le
    cedc:	2000      	movle	r0, #0
    cede:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cee2:	bd70      	pople	{r4, r5, r6, pc}
    cee4:	f1c4 0400 	rsb	r4, r4, #0
    cee8:	3c20      	subs	r4, #32
    ceea:	da35      	bge.n	cf58 <__aeabi_dmul+0x164>
    ceec:	340c      	adds	r4, #12
    ceee:	dc1b      	bgt.n	cf28 <__aeabi_dmul+0x134>
    cef0:	f104 0414 	add.w	r4, r4, #20
    cef4:	f1c4 0520 	rsb	r5, r4, #32
    cef8:	fa00 f305 	lsl.w	r3, r0, r5
    cefc:	fa20 f004 	lsr.w	r0, r0, r4
    cf00:	fa01 f205 	lsl.w	r2, r1, r5
    cf04:	ea40 0002 	orr.w	r0, r0, r2
    cf08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cf0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cf10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf14:	fa21 f604 	lsr.w	r6, r1, r4
    cf18:	eb42 0106 	adc.w	r1, r2, r6
    cf1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf20:	bf08      	it	eq
    cf22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf26:	bd70      	pop	{r4, r5, r6, pc}
    cf28:	f1c4 040c 	rsb	r4, r4, #12
    cf2c:	f1c4 0520 	rsb	r5, r4, #32
    cf30:	fa00 f304 	lsl.w	r3, r0, r4
    cf34:	fa20 f005 	lsr.w	r0, r0, r5
    cf38:	fa01 f204 	lsl.w	r2, r1, r4
    cf3c:	ea40 0002 	orr.w	r0, r0, r2
    cf40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cf44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf48:	f141 0100 	adc.w	r1, r1, #0
    cf4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf50:	bf08      	it	eq
    cf52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf56:	bd70      	pop	{r4, r5, r6, pc}
    cf58:	f1c4 0520 	rsb	r5, r4, #32
    cf5c:	fa00 f205 	lsl.w	r2, r0, r5
    cf60:	ea4e 0e02 	orr.w	lr, lr, r2
    cf64:	fa20 f304 	lsr.w	r3, r0, r4
    cf68:	fa01 f205 	lsl.w	r2, r1, r5
    cf6c:	ea43 0302 	orr.w	r3, r3, r2
    cf70:	fa21 f004 	lsr.w	r0, r1, r4
    cf74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cf78:	fa21 f204 	lsr.w	r2, r1, r4
    cf7c:	ea20 0002 	bic.w	r0, r0, r2
    cf80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cf84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf88:	bf08      	it	eq
    cf8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf8e:	bd70      	pop	{r4, r5, r6, pc}
    cf90:	f094 0f00 	teq	r4, #0
    cf94:	d10f      	bne.n	cfb6 <__aeabi_dmul+0x1c2>
    cf96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    cf9a:	0040      	lsls	r0, r0, #1
    cf9c:	eb41 0101 	adc.w	r1, r1, r1
    cfa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cfa4:	bf08      	it	eq
    cfa6:	3c01      	subeq	r4, #1
    cfa8:	d0f7      	beq.n	cf9a <__aeabi_dmul+0x1a6>
    cfaa:	ea41 0106 	orr.w	r1, r1, r6
    cfae:	f095 0f00 	teq	r5, #0
    cfb2:	bf18      	it	ne
    cfb4:	4770      	bxne	lr
    cfb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cfba:	0052      	lsls	r2, r2, #1
    cfbc:	eb43 0303 	adc.w	r3, r3, r3
    cfc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cfc4:	bf08      	it	eq
    cfc6:	3d01      	subeq	r5, #1
    cfc8:	d0f7      	beq.n	cfba <__aeabi_dmul+0x1c6>
    cfca:	ea43 0306 	orr.w	r3, r3, r6
    cfce:	4770      	bx	lr
    cfd0:	ea94 0f0c 	teq	r4, ip
    cfd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cfd8:	bf18      	it	ne
    cfda:	ea95 0f0c 	teqne	r5, ip
    cfde:	d00c      	beq.n	cffa <__aeabi_dmul+0x206>
    cfe0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cfe4:	bf18      	it	ne
    cfe6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cfea:	d1d1      	bne.n	cf90 <__aeabi_dmul+0x19c>
    cfec:	ea81 0103 	eor.w	r1, r1, r3
    cff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cff4:	f04f 0000 	mov.w	r0, #0
    cff8:	bd70      	pop	{r4, r5, r6, pc}
    cffa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cffe:	bf06      	itte	eq
    d000:	4610      	moveq	r0, r2
    d002:	4619      	moveq	r1, r3
    d004:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d008:	d019      	beq.n	d03e <__aeabi_dmul+0x24a>
    d00a:	ea94 0f0c 	teq	r4, ip
    d00e:	d102      	bne.n	d016 <__aeabi_dmul+0x222>
    d010:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d014:	d113      	bne.n	d03e <__aeabi_dmul+0x24a>
    d016:	ea95 0f0c 	teq	r5, ip
    d01a:	d105      	bne.n	d028 <__aeabi_dmul+0x234>
    d01c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d020:	bf1c      	itt	ne
    d022:	4610      	movne	r0, r2
    d024:	4619      	movne	r1, r3
    d026:	d10a      	bne.n	d03e <__aeabi_dmul+0x24a>
    d028:	ea81 0103 	eor.w	r1, r1, r3
    d02c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d030:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d034:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d038:	f04f 0000 	mov.w	r0, #0
    d03c:	bd70      	pop	{r4, r5, r6, pc}
    d03e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d042:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d046:	bd70      	pop	{r4, r5, r6, pc}

0000d048 <__aeabi_ddiv>:
    d048:	b570      	push	{r4, r5, r6, lr}
    d04a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d04e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d052:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d056:	bf1d      	ittte	ne
    d058:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d05c:	ea94 0f0c 	teqne	r4, ip
    d060:	ea95 0f0c 	teqne	r5, ip
    d064:	f000 f8a7 	bleq	d1b6 <__aeabi_ddiv+0x16e>
    d068:	eba4 0405 	sub.w	r4, r4, r5
    d06c:	ea81 0e03 	eor.w	lr, r1, r3
    d070:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d074:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d078:	f000 8088 	beq.w	d18c <__aeabi_ddiv+0x144>
    d07c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d080:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d084:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d088:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d08c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d090:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d094:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d098:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d09c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d0a0:	429d      	cmp	r5, r3
    d0a2:	bf08      	it	eq
    d0a4:	4296      	cmpeq	r6, r2
    d0a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d0aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d0ae:	d202      	bcs.n	d0b6 <__aeabi_ddiv+0x6e>
    d0b0:	085b      	lsrs	r3, r3, #1
    d0b2:	ea4f 0232 	mov.w	r2, r2, rrx
    d0b6:	1ab6      	subs	r6, r6, r2
    d0b8:	eb65 0503 	sbc.w	r5, r5, r3
    d0bc:	085b      	lsrs	r3, r3, #1
    d0be:	ea4f 0232 	mov.w	r2, r2, rrx
    d0c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d0c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d0ca:	ebb6 0e02 	subs.w	lr, r6, r2
    d0ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    d0d2:	bf22      	ittt	cs
    d0d4:	1ab6      	subcs	r6, r6, r2
    d0d6:	4675      	movcs	r5, lr
    d0d8:	ea40 000c 	orrcs.w	r0, r0, ip
    d0dc:	085b      	lsrs	r3, r3, #1
    d0de:	ea4f 0232 	mov.w	r2, r2, rrx
    d0e2:	ebb6 0e02 	subs.w	lr, r6, r2
    d0e6:	eb75 0e03 	sbcs.w	lr, r5, r3
    d0ea:	bf22      	ittt	cs
    d0ec:	1ab6      	subcs	r6, r6, r2
    d0ee:	4675      	movcs	r5, lr
    d0f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d0f4:	085b      	lsrs	r3, r3, #1
    d0f6:	ea4f 0232 	mov.w	r2, r2, rrx
    d0fa:	ebb6 0e02 	subs.w	lr, r6, r2
    d0fe:	eb75 0e03 	sbcs.w	lr, r5, r3
    d102:	bf22      	ittt	cs
    d104:	1ab6      	subcs	r6, r6, r2
    d106:	4675      	movcs	r5, lr
    d108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d10c:	085b      	lsrs	r3, r3, #1
    d10e:	ea4f 0232 	mov.w	r2, r2, rrx
    d112:	ebb6 0e02 	subs.w	lr, r6, r2
    d116:	eb75 0e03 	sbcs.w	lr, r5, r3
    d11a:	bf22      	ittt	cs
    d11c:	1ab6      	subcs	r6, r6, r2
    d11e:	4675      	movcs	r5, lr
    d120:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d124:	ea55 0e06 	orrs.w	lr, r5, r6
    d128:	d018      	beq.n	d15c <__aeabi_ddiv+0x114>
    d12a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d12e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d132:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d136:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d13a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d13e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d142:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d146:	d1c0      	bne.n	d0ca <__aeabi_ddiv+0x82>
    d148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d14c:	d10b      	bne.n	d166 <__aeabi_ddiv+0x11e>
    d14e:	ea41 0100 	orr.w	r1, r1, r0
    d152:	f04f 0000 	mov.w	r0, #0
    d156:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d15a:	e7b6      	b.n	d0ca <__aeabi_ddiv+0x82>
    d15c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d160:	bf04      	itt	eq
    d162:	4301      	orreq	r1, r0
    d164:	2000      	moveq	r0, #0
    d166:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d16a:	bf88      	it	hi
    d16c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d170:	f63f aeaf 	bhi.w	ced2 <__aeabi_dmul+0xde>
    d174:	ebb5 0c03 	subs.w	ip, r5, r3
    d178:	bf04      	itt	eq
    d17a:	ebb6 0c02 	subseq.w	ip, r6, r2
    d17e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d182:	f150 0000 	adcs.w	r0, r0, #0
    d186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d18a:	bd70      	pop	{r4, r5, r6, pc}
    d18c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d190:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d194:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d198:	bfc2      	ittt	gt
    d19a:	ebd4 050c 	rsbsgt	r5, r4, ip
    d19e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d1a2:	bd70      	popgt	{r4, r5, r6, pc}
    d1a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d1a8:	f04f 0e00 	mov.w	lr, #0
    d1ac:	3c01      	subs	r4, #1
    d1ae:	e690      	b.n	ced2 <__aeabi_dmul+0xde>
    d1b0:	ea45 0e06 	orr.w	lr, r5, r6
    d1b4:	e68d      	b.n	ced2 <__aeabi_dmul+0xde>
    d1b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d1ba:	ea94 0f0c 	teq	r4, ip
    d1be:	bf08      	it	eq
    d1c0:	ea95 0f0c 	teqeq	r5, ip
    d1c4:	f43f af3b 	beq.w	d03e <__aeabi_dmul+0x24a>
    d1c8:	ea94 0f0c 	teq	r4, ip
    d1cc:	d10a      	bne.n	d1e4 <__aeabi_ddiv+0x19c>
    d1ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d1d2:	f47f af34 	bne.w	d03e <__aeabi_dmul+0x24a>
    d1d6:	ea95 0f0c 	teq	r5, ip
    d1da:	f47f af25 	bne.w	d028 <__aeabi_dmul+0x234>
    d1de:	4610      	mov	r0, r2
    d1e0:	4619      	mov	r1, r3
    d1e2:	e72c      	b.n	d03e <__aeabi_dmul+0x24a>
    d1e4:	ea95 0f0c 	teq	r5, ip
    d1e8:	d106      	bne.n	d1f8 <__aeabi_ddiv+0x1b0>
    d1ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d1ee:	f43f aefd 	beq.w	cfec <__aeabi_dmul+0x1f8>
    d1f2:	4610      	mov	r0, r2
    d1f4:	4619      	mov	r1, r3
    d1f6:	e722      	b.n	d03e <__aeabi_dmul+0x24a>
    d1f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d1fc:	bf18      	it	ne
    d1fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d202:	f47f aec5 	bne.w	cf90 <__aeabi_dmul+0x19c>
    d206:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d20a:	f47f af0d 	bne.w	d028 <__aeabi_dmul+0x234>
    d20e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d212:	f47f aeeb 	bne.w	cfec <__aeabi_dmul+0x1f8>
    d216:	e712      	b.n	d03e <__aeabi_dmul+0x24a>

0000d218 <__aeabi_dcmpun>:
    d218:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d21c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d220:	d102      	bne.n	d228 <__aeabi_dcmpun+0x10>
    d222:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d226:	d10a      	bne.n	d23e <__aeabi_dcmpun+0x26>
    d228:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d22c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d230:	d102      	bne.n	d238 <__aeabi_dcmpun+0x20>
    d232:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d236:	d102      	bne.n	d23e <__aeabi_dcmpun+0x26>
    d238:	f04f 0000 	mov.w	r0, #0
    d23c:	4770      	bx	lr
    d23e:	f04f 0001 	mov.w	r0, #1
    d242:	4770      	bx	lr

0000d244 <__aeabi_d2uiz>:
    d244:	004a      	lsls	r2, r1, #1
    d246:	d211      	bcs.n	d26c <__aeabi_d2uiz+0x28>
    d248:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d24c:	d211      	bcs.n	d272 <__aeabi_d2uiz+0x2e>
    d24e:	d50d      	bpl.n	d26c <__aeabi_d2uiz+0x28>
    d250:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d254:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d258:	d40e      	bmi.n	d278 <__aeabi_d2uiz+0x34>
    d25a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d25e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d262:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d266:	fa23 f002 	lsr.w	r0, r3, r2
    d26a:	4770      	bx	lr
    d26c:	f04f 0000 	mov.w	r0, #0
    d270:	4770      	bx	lr
    d272:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d276:	d102      	bne.n	d27e <__aeabi_d2uiz+0x3a>
    d278:	f04f 30ff 	mov.w	r0, #4294967295
    d27c:	4770      	bx	lr
    d27e:	f04f 0000 	mov.w	r0, #0
    d282:	4770      	bx	lr

0000d284 <__aeabi_d2lz>:
    d284:	b538      	push	{r3, r4, r5, lr}
    d286:	2200      	movs	r2, #0
    d288:	2300      	movs	r3, #0
    d28a:	4604      	mov	r4, r0
    d28c:	460d      	mov	r5, r1
    d28e:	f7ff f9f3 	bl	c678 <__aeabi_dcmplt>
    d292:	b928      	cbnz	r0, d2a0 <__aeabi_d2lz+0x1c>
    d294:	4620      	mov	r0, r4
    d296:	4629      	mov	r1, r5
    d298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d29c:	f000 b80a 	b.w	d2b4 <__aeabi_d2ulz>
    d2a0:	4620      	mov	r0, r4
    d2a2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    d2a6:	f000 f805 	bl	d2b4 <__aeabi_d2ulz>
    d2aa:	4240      	negs	r0, r0
    d2ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d2b0:	bd38      	pop	{r3, r4, r5, pc}
    d2b2:	bf00      	nop

0000d2b4 <__aeabi_d2ulz>:
    d2b4:	b5d0      	push	{r4, r6, r7, lr}
    d2b6:	2200      	movs	r2, #0
    d2b8:	4b0b      	ldr	r3, [pc, #44]	; (d2e8 <__aeabi_d2ulz+0x34>)
    d2ba:	4606      	mov	r6, r0
    d2bc:	460f      	mov	r7, r1
    d2be:	f7ff fd99 	bl	cdf4 <__aeabi_dmul>
    d2c2:	f7ff ffbf 	bl	d244 <__aeabi_d2uiz>
    d2c6:	4604      	mov	r4, r0
    d2c8:	f7ff f8fc 	bl	c4c4 <__aeabi_ui2d>
    d2cc:	2200      	movs	r2, #0
    d2ce:	4b07      	ldr	r3, [pc, #28]	; (d2ec <__aeabi_d2ulz+0x38>)
    d2d0:	f7ff fd90 	bl	cdf4 <__aeabi_dmul>
    d2d4:	4602      	mov	r2, r0
    d2d6:	460b      	mov	r3, r1
    d2d8:	4630      	mov	r0, r6
    d2da:	4639      	mov	r1, r7
    d2dc:	f7fe ffb4 	bl	c248 <__aeabi_dsub>
    d2e0:	f7ff ffb0 	bl	d244 <__aeabi_d2uiz>
    d2e4:	4621      	mov	r1, r4
    d2e6:	bdd0      	pop	{r4, r6, r7, pc}
    d2e8:	3df00000 	.word	0x3df00000
    d2ec:	41f00000 	.word	0x41f00000

0000d2f0 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
    d2f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    d2f4:	4604      	mov	r4, r0
    d2f6:	b09a      	sub	sp, #104	; 0x68
    d2f8:	460f      	mov	r7, r1
    d2fa:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
    d2fc:	2100      	movs	r1, #0
    d2fe:	2230      	movs	r2, #48	; 0x30
    d300:	a802      	add	r0, sp, #8
    d302:	f018 fe5f 	bl	25fc4 <memset>
	int ret = 0;

	if (!ctx || !time) {
    d306:	2c00      	cmp	r4, #0
    d308:	f000 8087 	beq.w	d41a <sntp_query+0x12a>
    d30c:	2e00      	cmp	r6, #0
    d30e:	f000 8084 	beq.w	d41a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
    d312:	231b      	movs	r3, #27
    d314:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    d318:	f021 fa0a 	bl	2e730 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d31c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d320:	2500      	movs	r5, #0
    d322:	fba0 bc03 	umull	fp, ip, r0, r3
    d326:	fb03 cc01 	mla	ip, r3, r1, ip
    d32a:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
    d32e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d332:	2300      	movs	r3, #0
    d334:	4629      	mov	r1, r5
    d336:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
    d33a:	f7ff fa8d 	bl	c858 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d33e:	4a3c      	ldr	r2, [pc, #240]	; (d430 <sntp_query+0x140>)
    d340:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d342:	0a13      	lsrs	r3, r2, #8
    d344:	0211      	lsls	r1, r2, #8
    d346:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    d34a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d34e:	430b      	orrs	r3, r1
    d350:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    d354:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
    d358:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d35a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d35c:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    d35e:	2230      	movs	r2, #48	; 0x30
    d360:	462b      	mov	r3, r5
    d362:	e9cd 5500 	strd	r5, r5, [sp]
    d366:	a902      	add	r1, sp, #8
    d368:	f01f fb83 	bl	2ca72 <z_impl_zsock_sendto>
	if (ret < 0) {
    d36c:	2800      	cmp	r0, #0
    d36e:	db0f      	blt.n	d390 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
    d370:	4629      	mov	r1, r5
    d372:	2230      	movs	r2, #48	; 0x30
    d374:	a80e      	add	r0, sp, #56	; 0x38
    d376:	f018 fe25 	bl	25fc4 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
    d37a:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    d37c:	463a      	mov	r2, r7
    d37e:	4620      	mov	r0, r4
    d380:	f006 fc06 	bl	13b90 <z_impl_zsock_poll>
	if (status < 0) {
    d384:	42a8      	cmp	r0, r5
    d386:	da06      	bge.n	d396 <sntp_query+0xa6>
		return -errno;
    d388:	f01f fc87 	bl	2cc9a <__errno>
    d38c:	6800      	ldr	r0, [r0, #0]
    d38e:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
    d390:	b01a      	add	sp, #104	; 0x68
    d392:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
    d396:	d037      	beq.n	d408 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
    d398:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    d39a:	2230      	movs	r2, #48	; 0x30
    d39c:	462b      	mov	r3, r5
    d39e:	e9cd 5500 	strd	r5, r5, [sp]
    d3a2:	a90e      	add	r1, sp, #56	; 0x38
    d3a4:	f01f fb98 	bl	2cad8 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
    d3a8:	2800      	cmp	r0, #0
    d3aa:	dbed      	blt.n	d388 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
    d3ac:	2830      	cmp	r0, #48	; 0x30
    d3ae:	d12e      	bne.n	d40e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
    d3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d3b2:	6922      	ldr	r2, [r4, #16]
    d3b4:	ba1b      	rev	r3, r3
    d3b6:	429a      	cmp	r2, r3
    d3b8:	d002      	beq.n	d3c0 <sntp_query+0xd0>
		return -EINVAL;
    d3ba:	f06f 0015 	mvn.w	r0, #21
    d3be:	e7e7      	b.n	d390 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
    d3c0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    d3c4:	f003 0307 	and.w	r3, r3, #7
    d3c8:	2b04      	cmp	r3, #4
    d3ca:	d1f6      	bne.n	d3ba <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
    d3cc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    d3d0:	b303      	cbz	r3, d414 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
    d3d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d3d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d3d6:	ba1b      	rev	r3, r3
    d3d8:	ba12      	rev	r2, r2
    d3da:	ea53 0102 	orrs.w	r1, r3, r2
    d3de:	d0ec      	beq.n	d3ba <sntp_query+0xca>
	if (ts & 0x80000000) {
    d3e0:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
    d3e2:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
    d3e4:	da0c      	bge.n	d400 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
    d3e6:	4a13      	ldr	r2, [pc, #76]	; (d434 <sntp_query+0x144>)
    d3e8:	4293      	cmp	r3, r2
    d3ea:	d9e6      	bls.n	d3ba <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
    d3ec:	a10c      	add	r1, pc, #48	; (adr r1, d420 <sntp_query+0x130>)
    d3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d3f2:	18c0      	adds	r0, r0, r3
    d3f4:	f141 0100 	adc.w	r1, r1, #0
    d3f8:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
    d3fc:	2000      	movs	r0, #0
    d3fe:	e7c7      	b.n	d390 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d400:	a109      	add	r1, pc, #36	; (adr r1, d428 <sntp_query+0x138>)
    d402:	e9d1 0100 	ldrd	r0, r1, [r1]
    d406:	e7f4      	b.n	d3f2 <sntp_query+0x102>
		return -ETIMEDOUT;
    d408:	f06f 0073 	mvn.w	r0, #115	; 0x73
    d40c:	e7c0      	b.n	d390 <sntp_query+0xa0>
		return -EMSGSIZE;
    d40e:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d412:	e7bd      	b.n	d390 <sntp_query+0xa0>
		return -EBUSY;
    d414:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
    d418:	e7ba      	b.n	d390 <sntp_query+0xa0>
		return -EFAULT;
    d41a:	f06f 000d 	mvn.w	r0, #13
    d41e:	e7b7      	b.n	d390 <sntp_query+0xa0>
    d420:	7c558180 	.word	0x7c558180
    d424:	ffffffff 	.word	0xffffffff
    d428:	7c558180 	.word	0x7c558180
    d42c:	00000000 	.word	0x00000000
    d430:	83aa7e80 	.word	0x83aa7e80
    d434:	83aa7e7f 	.word	0x83aa7e7f

0000d438 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d43c:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    d440:	460e      	mov	r6, r1
{
    d442:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
    d444:	b971      	cbnz	r1, d464 <at_handler+0x2c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    d446:	49b2      	ldr	r1, [pc, #712]	; (d710 <at_handler+0x2d8>)
    d448:	4bb2      	ldr	r3, [pc, #712]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Response buffer is NULL-pointer");
    d44a:	48b3      	ldr	r0, [pc, #716]	; (d718 <at_handler+0x2e0>)
    d44c:	1ac9      	subs	r1, r1, r3
    d44e:	08c9      	lsrs	r1, r1, #3
    d450:	0189      	lsls	r1, r1, #6
    d452:	f041 0101 	orr.w	r1, r1, #1
    d456:	f01f f81f 	bl	2c498 <log_0>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    d45a:	b00c      	add	sp, #48	; 0x30
    d45c:	ecbd 8b02 	vpop	{d8}
    d460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d464:	2700      	movs	r7, #0
    d466:	4cad      	ldr	r4, [pc, #692]	; (d71c <at_handler+0x2e4>)
		if (strncmp(at_notifs[i], notif,
    d468:	f854 5b04 	ldr.w	r5, [r4], #4
    d46c:	4628      	mov	r0, r5
    d46e:	f019 f9b9 	bl	267e4 <strlen>
    d472:	4631      	mov	r1, r6
    d474:	4602      	mov	r2, r0
    d476:	4628      	mov	r0, r5
    d478:	f019 f9e2 	bl	26840 <strncmp>
    d47c:	4605      	mov	r5, r0
    d47e:	bb60      	cbnz	r0, d4da <at_handler+0xa2>
	switch (notif_type) {
    d480:	2f01      	cmp	r7, #1
			*type = i;
    d482:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
    d484:	f000 8107 	beq.w	d696 <at_handler+0x25e>
    d488:	2b02      	cmp	r3, #2
    d48a:	f000 818d 	beq.w	d7a8 <at_handler+0x370>
	size_t len = sizeof(str_buf) - 1;
    d48e:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d492:	210a      	movs	r1, #10
    d494:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    d496:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d49a:	f020 feca 	bl	2e232 <at_params_list_init>
	if (err) {
    d49e:	4604      	mov	r4, r0
    d4a0:	b1f8      	cbz	r0, d4e2 <at_handler+0xaa>
    d4a2:	4a9b      	ldr	r2, [pc, #620]	; (d710 <at_handler+0x2d8>)
    d4a4:	4b9b      	ldr	r3, [pc, #620]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d4a6:	4601      	mov	r1, r0
    d4a8:	1ad2      	subs	r2, r2, r3
    d4aa:	08d2      	lsrs	r2, r2, #3
    d4ac:	0192      	lsls	r2, r2, #6
    d4ae:	489c      	ldr	r0, [pc, #624]	; (d720 <at_handler+0x2e8>)
    d4b0:	f042 0201 	orr.w	r2, r2, #1
    d4b4:	f01e ffff 	bl	2c4b6 <log_1>
    d4b8:	4b96      	ldr	r3, [pc, #600]	; (d714 <at_handler+0x2dc>)
    d4ba:	4d95      	ldr	r5, [pc, #596]	; (d710 <at_handler+0x2d8>)
			LOG_ERR("Failed to parse notification (error %d): %s",
    d4bc:	4630      	mov	r0, r6
    d4be:	1aed      	subs	r5, r5, r3
    d4c0:	f005 fde4 	bl	1308c <log_strdup>
    d4c4:	08ed      	lsrs	r5, r5, #3
    d4c6:	01ad      	lsls	r5, r5, #6
    d4c8:	f045 0501 	orr.w	r5, r5, #1
    d4cc:	4602      	mov	r2, r0
    d4ce:	462b      	mov	r3, r5
    d4d0:	4621      	mov	r1, r4
    d4d2:	4894      	ldr	r0, [pc, #592]	; (d724 <at_handler+0x2ec>)
    d4d4:	f01f f806 	bl	2c4e4 <log_2>
			return;
    d4d8:	e7bf      	b.n	d45a <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d4da:	3701      	adds	r7, #1
    d4dc:	2f03      	cmp	r7, #3
    d4de:	d1c3      	bne.n	d468 <at_handler+0x30>
    d4e0:	e7bb      	b.n	d45a <at_handler+0x22>
	err = at_parser_params_from_str(notification,
    d4e2:	4601      	mov	r1, r0
    d4e4:	aa07      	add	r2, sp, #28
    d4e6:	4630      	mov	r0, r6
    d4e8:	f020 fea0 	bl	2e22c <at_parser_params_from_str>
	if (err) {
    d4ec:	4604      	mov	r4, r0
    d4ee:	2800      	cmp	r0, #0
    d4f0:	d05c      	beq.n	d5ac <at_handler+0x174>
    d4f2:	4a87      	ldr	r2, [pc, #540]	; (d710 <at_handler+0x2d8>)
    d4f4:	4b87      	ldr	r3, [pc, #540]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
    d4f6:	4601      	mov	r1, r0
    d4f8:	1ad2      	subs	r2, r2, r3
    d4fa:	08d2      	lsrs	r2, r2, #3
    d4fc:	0192      	lsls	r2, r2, #6
    d4fe:	488a      	ldr	r0, [pc, #552]	; (d728 <at_handler+0x2f0>)
    d500:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get registration status, error: %d", err);
    d504:	f01e ffd7 	bl	2c4b6 <log_1>
	at_params_list_free(&resp_list);
    d508:	a807      	add	r0, sp, #28
    d50a:	f020 fea5 	bl	2e258 <at_params_list_free>
		if (err) {
    d50e:	2c00      	cmp	r4, #0
    d510:	d1d2      	bne.n	d4b8 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d512:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d516:	2b01      	cmp	r3, #1
    d518:	d102      	bne.n	d520 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d51a:	4884      	ldr	r0, [pc, #528]	; (d72c <at_handler+0x2f4>)
    d51c:	f016 ffb8 	bl	24490 <z_impl_k_sem_give>
		if (!evt_handler) {
    d520:	4c83      	ldr	r4, [pc, #524]	; (d730 <at_handler+0x2f8>)
    d522:	6823      	ldr	r3, [r4, #0]
    d524:	2b00      	cmp	r3, #0
    d526:	d098      	beq.n	d45a <at_handler+0x22>
		if (reg_status != prev_reg_status) {
    d528:	4a82      	ldr	r2, [pc, #520]	; (d734 <at_handler+0x2fc>)
    d52a:	7811      	ldrb	r1, [r2, #0]
    d52c:	42a9      	cmp	r1, r5
    d52e:	d007      	beq.n	d540 <at_handler+0x108>
			prev_reg_status = reg_status;
    d530:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d532:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    d534:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d538:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    d53c:	a809      	add	r0, sp, #36	; 0x24
    d53e:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    d540:	4e7d      	ldr	r6, [pc, #500]	; (d738 <at_handler+0x300>)
    d542:	ad03      	add	r5, sp, #12
    d544:	2208      	movs	r2, #8
    d546:	4631      	mov	r1, r6
    d548:	4628      	mov	r0, r5
    d54a:	f018 fd0d 	bl	25f68 <memcmp>
    d54e:	b160      	cbz	r0, d56a <at_handler+0x132>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d550:	e895 0003 	ldmia.w	r5, {r0, r1}
    d554:	2304      	movs	r3, #4
    d556:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d55a:	ab0c      	add	r3, sp, #48	; 0x30
    d55c:	e903 0003 	stmdb	r3, {r0, r1}
    d560:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d564:	6823      	ldr	r3, [r4, #0]
    d566:	a809      	add	r0, sp, #36	; 0x24
    d568:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    d56a:	4e74      	ldr	r6, [pc, #464]	; (d73c <at_handler+0x304>)
    d56c:	ad05      	add	r5, sp, #20
    d56e:	2208      	movs	r2, #8
    d570:	4631      	mov	r1, r6
    d572:	4628      	mov	r0, r5
    d574:	f018 fcf8 	bl	25f68 <memcmp>
    d578:	b160      	cbz	r0, d594 <at_handler+0x15c>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    d57a:	e895 0003 	ldmia.w	r5, {r0, r1}
    d57e:	2301      	movs	r3, #1
    d580:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
    d584:	ab0c      	add	r3, sp, #48	; 0x30
    d586:	e903 0003 	stmdb	r3, {r0, r1}
    d58a:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d58e:	6823      	ldr	r3, [r4, #0]
    d590:	a809      	add	r0, sp, #36	; 0x24
    d592:	4798      	blx	r3
	bool notify = false;
    d594:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    d596:	4a66      	ldr	r2, [pc, #408]	; (d730 <at_handler+0x2f8>)
    d598:	6812      	ldr	r2, [r2, #0]
    d59a:	2a00      	cmp	r2, #0
    d59c:	f43f af5d 	beq.w	d45a <at_handler+0x22>
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	f43f af5a 	beq.w	d45a <at_handler+0x22>
		evt_handler(&evt);
    d5a6:	a809      	add	r0, sp, #36	; 0x24
    d5a8:	4790      	blx	r2
    d5aa:	e756      	b.n	d45a <at_handler+0x22>
	err = at_params_int_get(&resp_list,
    d5ac:	2101      	movs	r1, #1
    d5ae:	aa01      	add	r2, sp, #4
    d5b0:	a807      	add	r0, sp, #28
    d5b2:	f020 feff 	bl	2e3b4 <at_params_int_get>
	if (err) {
    d5b6:	4604      	mov	r4, r0
    d5b8:	b148      	cbz	r0, d5ce <at_handler+0x196>
    d5ba:	4a55      	ldr	r2, [pc, #340]	; (d710 <at_handler+0x2d8>)
    d5bc:	4b55      	ldr	r3, [pc, #340]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not get registration status, error: %d", err);
    d5be:	4601      	mov	r1, r0
    d5c0:	1ad2      	subs	r2, r2, r3
    d5c2:	08d2      	lsrs	r2, r2, #3
    d5c4:	0192      	lsls	r2, r2, #6
    d5c6:	485e      	ldr	r0, [pc, #376]	; (d740 <at_handler+0x308>)
    d5c8:	f042 0201 	orr.w	r2, r2, #1
    d5cc:	e79a      	b.n	d504 <at_handler+0xcc>
	*reg_status = status;
    d5ce:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
    d5d2:	2d5a      	cmp	r5, #90	; 0x5a
    d5d4:	d047      	beq.n	d666 <at_handler+0x22e>
		err = at_params_string_get(&resp_list,
    d5d6:	2102      	movs	r1, #2
    d5d8:	ab02      	add	r3, sp, #8
    d5da:	aa09      	add	r2, sp, #36	; 0x24
    d5dc:	a807      	add	r0, sp, #28
    d5de:	f020 ff00 	bl	2e3e2 <at_params_string_get>
		if (err) {
    d5e2:	4607      	mov	r7, r0
    d5e4:	b160      	cbz	r0, d600 <at_handler+0x1c8>
    d5e6:	4a4a      	ldr	r2, [pc, #296]	; (d710 <at_handler+0x2d8>)
    d5e8:	4b4a      	ldr	r3, [pc, #296]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
    d5ea:	4601      	mov	r1, r0
    d5ec:	1ad2      	subs	r2, r2, r3
    d5ee:	08d2      	lsrs	r2, r2, #3
    d5f0:	0192      	lsls	r2, r2, #6
    d5f2:	4854      	ldr	r0, [pc, #336]	; (d744 <at_handler+0x30c>)
    d5f4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
    d5f8:	f01e ff5d 	bl	2c4b6 <log_1>
			goto clean_exit;
    d5fc:	463c      	mov	r4, r7
    d5fe:	e783      	b.n	d508 <at_handler+0xd0>
		str_buf[len] = '\0';
    d600:	9b02      	ldr	r3, [sp, #8]
    d602:	aa0c      	add	r2, sp, #48	; 0x30
    d604:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
    d606:	4621      	mov	r1, r4
    d608:	2210      	movs	r2, #16
    d60a:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d60c:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    d610:	f019 fcd4 	bl	26fbc <strtoul>
		err = at_params_string_get(&resp_list,
    d614:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
    d616:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
    d618:	ab02      	add	r3, sp, #8
    d61a:	aa09      	add	r2, sp, #36	; 0x24
    d61c:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
    d61e:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
    d622:	f020 fede 	bl	2e3e2 <at_params_string_get>
		if (err) {
    d626:	4607      	mov	r7, r0
    d628:	b148      	cbz	r0, d63e <at_handler+0x206>
    d62a:	4a39      	ldr	r2, [pc, #228]	; (d710 <at_handler+0x2d8>)
    d62c:	4b39      	ldr	r3, [pc, #228]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Could not get cell ID, error: %d", err);
    d62e:	4601      	mov	r1, r0
    d630:	1ad2      	subs	r2, r2, r3
    d632:	08d2      	lsrs	r2, r2, #3
    d634:	0192      	lsls	r2, r2, #6
    d636:	4844      	ldr	r0, [pc, #272]	; (d748 <at_handler+0x310>)
    d638:	f042 0201 	orr.w	r2, r2, #1
    d63c:	e7dc      	b.n	d5f8 <at_handler+0x1c0>
		str_buf[len] = '\0';
    d63e:	9b02      	ldr	r3, [sp, #8]
    d640:	aa0c      	add	r2, sp, #48	; 0x30
    d642:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
    d644:	4621      	mov	r1, r4
    d646:	2210      	movs	r2, #16
    d648:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d64a:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    d64e:	f019 fcb5 	bl	26fbc <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d652:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d656:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
    d658:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d65a:	d009      	beq.n	d670 <at_handler+0x238>
		psm_cfg->tau = -1;
    d65c:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
    d660:	e9cd 3305 	strd	r3, r3, [sp, #20]
    d664:	e750      	b.n	d508 <at_handler+0xd0>
		cell->tac = UINT32_MAX;
    d666:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
    d66a:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d66e:	e7f5      	b.n	d65c <at_handler+0x224>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d670:	2101      	movs	r1, #1
    d672:	aa05      	add	r2, sp, #20
    d674:	a807      	add	r0, sp, #28
    d676:	f00b fb15 	bl	18ca4 <parse_psm_cfg>
		if (err) {
    d67a:	4604      	mov	r4, r0
    d67c:	2800      	cmp	r0, #0
    d67e:	f43f af43 	beq.w	d508 <at_handler+0xd0>
    d682:	4a23      	ldr	r2, [pc, #140]	; (d710 <at_handler+0x2d8>)
    d684:	4b23      	ldr	r3, [pc, #140]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
    d686:	4601      	mov	r1, r0
    d688:	1ad2      	subs	r2, r2, r3
    d68a:	08d2      	lsrs	r2, r2, #3
    d68c:	0192      	lsls	r2, r2, #6
    d68e:	482f      	ldr	r0, [pc, #188]	; (d74c <at_handler+0x314>)
    d690:	f042 0201 	orr.w	r2, r2, #1
    d694:	e736      	b.n	d504 <at_handler+0xcc>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
    d696:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d69a:	2104      	movs	r1, #4
    d69c:	a807      	add	r0, sp, #28
    d69e:	f020 fdc8 	bl	2e232 <at_params_list_init>
	if (err) {
    d6a2:	4604      	mov	r4, r0
    d6a4:	b1b0      	cbz	r0, d6d4 <at_handler+0x29c>
    d6a6:	4a1a      	ldr	r2, [pc, #104]	; (d710 <at_handler+0x2d8>)
    d6a8:	4b1a      	ldr	r3, [pc, #104]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d6aa:	4601      	mov	r1, r0
    d6ac:	1ad2      	subs	r2, r2, r3
    d6ae:	08d2      	lsrs	r2, r2, #3
    d6b0:	0192      	lsls	r2, r2, #6
    d6b2:	481b      	ldr	r0, [pc, #108]	; (d720 <at_handler+0x2e8>)
    d6b4:	f042 0201 	orr.w	r2, r2, #1
    d6b8:	f01e fefd 	bl	2c4b6 <log_1>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
    d6bc:	4621      	mov	r1, r4
    d6be:	4a14      	ldr	r2, [pc, #80]	; (d710 <at_handler+0x2d8>)
    d6c0:	4b14      	ldr	r3, [pc, #80]	; (d714 <at_handler+0x2dc>)
    d6c2:	4823      	ldr	r0, [pc, #140]	; (d750 <at_handler+0x318>)
    d6c4:	1ad2      	subs	r2, r2, r3
    d6c6:	08d2      	lsrs	r2, r2, #3
    d6c8:	0192      	lsls	r2, r2, #6
    d6ca:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d6ce:	f01e fef2 	bl	2c4b6 <log_1>
			return;
    d6d2:	e6c2      	b.n	d45a <at_handler+0x22>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d6d4:	4601      	mov	r1, r0
    d6d6:	aa07      	add	r2, sp, #28
    d6d8:	4630      	mov	r0, r6
    d6da:	f020 fda7 	bl	2e22c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d6de:	4604      	mov	r4, r0
    d6e0:	2800      	cmp	r0, #0
    d6e2:	d039      	beq.n	d758 <at_handler+0x320>
    d6e4:	4a0a      	ldr	r2, [pc, #40]	; (d710 <at_handler+0x2d8>)
    d6e6:	4b0b      	ldr	r3, [pc, #44]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
    d6e8:	4601      	mov	r1, r0
    d6ea:	1ad2      	subs	r2, r2, r3
    d6ec:	08d2      	lsrs	r2, r2, #3
    d6ee:	0192      	lsls	r2, r2, #6
    d6f0:	4818      	ldr	r0, [pc, #96]	; (d754 <at_handler+0x31c>)
    d6f2:	f042 0201 	orr.w	r2, r2, #1
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d6f6:	f01e fede 	bl	2c4b6 <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    d6fa:	a807      	add	r0, sp, #28
    d6fc:	f020 fdac 	bl	2e258 <at_params_list_free>
		if (err) {
    d700:	2c00      	cmp	r4, #0
    d702:	d1db      	bne.n	d6bc <at_handler+0x284>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    d704:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d706:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    d70a:	2301      	movs	r3, #1
		break;
    d70c:	e743      	b.n	d596 <at_handler+0x15e>
    d70e:	bf00      	nop
    d710:	0002ec0c 	.word	0x0002ec0c
    d714:	0002ebc4 	.word	0x0002ebc4
    d718:	00031b2b 	.word	0x00031b2b
    d71c:	0002efd8 	.word	0x0002efd8
    d720:	00031b4b 	.word	0x00031b4b
    d724:	00031c48 	.word	0x00031c48
    d728:	00031b74 	.word	0x00031b74
    d72c:	20021758 	.word	0x20021758
    d730:	20021754 	.word	0x20021754
    d734:	20026284 	.word	0x20026284
    d738:	20021770 	.word	0x20021770
    d73c:	20021778 	.word	0x20021778
    d740:	00031ba1 	.word	0x00031ba1
    d744:	00031bce 	.word	0x00031bce
    d748:	00031bfa 	.word	0x00031bfa
    d74c:	00031c1b 	.word	0x00031c1b
    d750:	00031ce4 	.word	0x00031ce4
    d754:	00031c74 	.word	0x00031c74
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    d758:	4639      	mov	r1, r7
    d75a:	aa05      	add	r2, sp, #20
    d75c:	a807      	add	r0, sp, #28
    d75e:	f020 fe29 	bl	2e3b4 <at_params_int_get>
	if (err) {
    d762:	4604      	mov	r4, r0
    d764:	b148      	cbz	r0, d77a <at_handler+0x342>
    d766:	4a82      	ldr	r2, [pc, #520]	; (d970 <at_handler+0x538>)
    d768:	4b82      	ldr	r3, [pc, #520]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d76a:	4601      	mov	r1, r0
    d76c:	1ad2      	subs	r2, r2, r3
    d76e:	08d2      	lsrs	r2, r2, #3
    d770:	0192      	lsls	r2, r2, #6
    d772:	4881      	ldr	r0, [pc, #516]	; (d978 <at_handler+0x540>)
    d774:	f042 0201 	orr.w	r2, r2, #1
    d778:	e7bd      	b.n	d6f6 <at_handler+0x2be>
	if (temp_mode == 0) {
    d77a:	9905      	ldr	r1, [sp, #20]
    d77c:	b911      	cbnz	r1, d784 <at_handler+0x34c>
		*mode = LTE_LC_RRC_MODE_IDLE;
    d77e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    d782:	e7ba      	b.n	d6fa <at_handler+0x2c2>
	} else if (temp_mode == 1) {
    d784:	2901      	cmp	r1, #1
    d786:	d102      	bne.n	d78e <at_handler+0x356>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    d788:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
    d78c:	e7b5      	b.n	d6fa <at_handler+0x2c2>
    d78e:	4b79      	ldr	r3, [pc, #484]	; (d974 <at_handler+0x53c>)
    d790:	4a77      	ldr	r2, [pc, #476]	; (d970 <at_handler+0x538>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
    d792:	487a      	ldr	r0, [pc, #488]	; (d97c <at_handler+0x544>)
    d794:	1ad2      	subs	r2, r2, r3
    d796:	08d2      	lsrs	r2, r2, #3
    d798:	0192      	lsls	r2, r2, #6
    d79a:	f042 0201 	orr.w	r2, r2, #1
    d79e:	f01e fe8a 	bl	2c4b6 <log_1>
		err = -EINVAL;
    d7a2:	f06f 0415 	mvn.w	r4, #21
    d7a6:	e7a8      	b.n	d6fa <at_handler+0x2c2>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    d7a8:	2304      	movs	r3, #4
	switch (sys_mode_current) {
    d7aa:	4d75      	ldr	r5, [pc, #468]	; (d980 <at_handler+0x548>)
	size_t len = sizeof(tmp_buf) - 1;
    d7ac:	9303      	str	r3, [sp, #12]
    d7ae:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
    d7b0:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
    d7b4:	3b01      	subs	r3, #1
    d7b6:	2b04      	cmp	r3, #4
    d7b8:	d804      	bhi.n	d7c4 <at_handler+0x38c>
    d7ba:	e8df f003 	tbb	[pc, r3]
    d7be:	2d19      	.short	0x2d19
    d7c0:	1903      	.short	0x1903
    d7c2:	2d          	.byte	0x2d
    d7c3:	00          	.byte	0x00
    d7c4:	4b6b      	ldr	r3, [pc, #428]	; (d974 <at_handler+0x53c>)
    d7c6:	496a      	ldr	r1, [pc, #424]	; (d970 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d7c8:	486e      	ldr	r0, [pc, #440]	; (d984 <at_handler+0x54c>)
    d7ca:	1ac9      	subs	r1, r1, r3
    d7cc:	08c9      	lsrs	r1, r1, #3
    d7ce:	0189      	lsls	r1, r1, #6
    d7d0:	f041 0101 	orr.w	r1, r1, #1
    d7d4:	f01e fe60 	bl	2c498 <log_0>
		return -ENOTCONN;
    d7d8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d7dc:	4a64      	ldr	r2, [pc, #400]	; (d970 <at_handler+0x538>)
    d7de:	4b65      	ldr	r3, [pc, #404]	; (d974 <at_handler+0x53c>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d7e0:	4621      	mov	r1, r4
    d7e2:	1ad2      	subs	r2, r2, r3
    d7e4:	08d2      	lsrs	r2, r2, #3
    d7e6:	0192      	lsls	r2, r2, #6
    d7e8:	4867      	ldr	r0, [pc, #412]	; (d988 <at_handler+0x550>)
    d7ea:	f042 0201 	orr.w	r2, r2, #1
    d7ee:	e76e      	b.n	d6ce <at_handler+0x296>
	switch (sys_mode_current) {
    d7f0:	ed9f 8a66 	vldr	s16, [pc, #408]	; d98c <at_handler+0x554>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    d7f4:	2105      	movs	r1, #5
    d7f6:	a807      	add	r0, sp, #28
    d7f8:	f020 fd1b 	bl	2e232 <at_params_list_init>
	if (err) {
    d7fc:	4604      	mov	r4, r0
    d7fe:	b170      	cbz	r0, d81e <at_handler+0x3e6>
    d800:	4b5c      	ldr	r3, [pc, #368]	; (d974 <at_handler+0x53c>)
    d802:	4a5b      	ldr	r2, [pc, #364]	; (d970 <at_handler+0x538>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d804:	4601      	mov	r1, r0
    d806:	1ad2      	subs	r2, r2, r3
    d808:	08d2      	lsrs	r2, r2, #3
    d80a:	0192      	lsls	r2, r2, #6
    d80c:	4860      	ldr	r0, [pc, #384]	; (d990 <at_handler+0x558>)
    d80e:	f042 0201 	orr.w	r2, r2, #1
    d812:	f01e fe50 	bl	2c4b6 <log_1>
		return err;
    d816:	e7e1      	b.n	d7dc <at_handler+0x3a4>
		*ptw_multiplier = 2.56;
    d818:	ed9f 8a5e 	vldr	s16, [pc, #376]	; d994 <at_handler+0x55c>
    d81c:	e7ea      	b.n	d7f4 <at_handler+0x3bc>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d81e:	4601      	mov	r1, r0
    d820:	aa07      	add	r2, sp, #28
    d822:	4630      	mov	r0, r6
    d824:	f020 fd02 	bl	2e22c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d828:	4604      	mov	r4, r0
    d82a:	b188      	cbz	r0, d850 <at_handler+0x418>
    d82c:	4a50      	ldr	r2, [pc, #320]	; (d970 <at_handler+0x538>)
    d82e:	4b51      	ldr	r3, [pc, #324]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    d830:	4601      	mov	r1, r0
    d832:	1ad2      	subs	r2, r2, r3
    d834:	08d2      	lsrs	r2, r2, #3
    d836:	0192      	lsls	r2, r2, #6
    d838:	4857      	ldr	r0, [pc, #348]	; (d998 <at_handler+0x560>)
    d83a:	f042 0201 	orr.w	r2, r2, #1
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d83e:	f01e fe3a 	bl	2c4b6 <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    d842:	a807      	add	r0, sp, #28
    d844:	f020 fd08 	bl	2e258 <at_params_list_free>
		if (err) {
    d848:	2c00      	cmp	r4, #0
    d84a:	d1c7      	bne.n	d7dc <at_handler+0x3a4>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d84c:	2302      	movs	r3, #2
    d84e:	e75a      	b.n	d706 <at_handler+0x2ce>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    d850:	2103      	movs	r1, #3
    d852:	ab03      	add	r3, sp, #12
    d854:	aa05      	add	r2, sp, #20
    d856:	a807      	add	r0, sp, #28
    d858:	f020 fdc3 	bl	2e3e2 <at_params_string_get>
	if (err) {
    d85c:	4604      	mov	r4, r0
    d85e:	b148      	cbz	r0, d874 <at_handler+0x43c>
    d860:	4a43      	ldr	r2, [pc, #268]	; (d970 <at_handler+0x538>)
    d862:	4b44      	ldr	r3, [pc, #272]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d864:	4601      	mov	r1, r0
    d866:	1ad2      	subs	r2, r2, r3
    d868:	08d2      	lsrs	r2, r2, #3
    d86a:	0192      	lsls	r2, r2, #6
    d86c:	484b      	ldr	r0, [pc, #300]	; (d99c <at_handler+0x564>)
    d86e:	f042 0201 	orr.w	r2, r2, #1
    d872:	e7e4      	b.n	d83e <at_handler+0x406>
	tmp_buf[len] = '\0';
    d874:	9b03      	ldr	r3, [sp, #12]
    d876:	aa0c      	add	r2, sp, #48	; 0x30
    d878:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d87a:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d87c:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d880:	2202      	movs	r2, #2
    d882:	a805      	add	r0, sp, #20
    d884:	f019 fb9a 	bl	26fbc <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d888:	b2c0      	uxtb	r0, r0
    d88a:	280f      	cmp	r0, #15
    d88c:	d844      	bhi.n	d918 <at_handler+0x4e0>
	switch (sys_mode_current) {
    d88e:	782b      	ldrb	r3, [r5, #0]
    d890:	3b01      	subs	r3, #1
    d892:	2b04      	cmp	r3, #4
    d894:	d828      	bhi.n	d8e8 <at_handler+0x4b0>
    d896:	e8df f003 	tbb	[pc, r3]
    d89a:	2503      	.short	0x2503
    d89c:	0327      	.short	0x0327
    d89e:	25          	.byte	0x25
    d89f:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
    d8a0:	4b3f      	ldr	r3, [pc, #252]	; (d9a0 <at_handler+0x568>)
		multiplier = edrx_lookup_nbiot[idx];
    d8a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8a6:	2800      	cmp	r0, #0
    d8a8:	d034      	beq.n	d914 <at_handler+0x4dc>
    d8aa:	f7fe fe1b 	bl	c4e4 <__aeabi_i2d>
    d8ae:	a32e      	add	r3, pc, #184	; (adr r3, d968 <at_handler+0x530>)
    d8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d8b4:	f7ff fa9e 	bl	cdf4 <__aeabi_dmul>
    d8b8:	f7fe ff2e 	bl	c718 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d8bc:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8be:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8c0:	ab03      	add	r3, sp, #12
    d8c2:	aa05      	add	r2, sp, #20
    d8c4:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d8c6:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8c8:	f020 fd8b 	bl	2e3e2 <at_params_string_get>
	if (err) {
    d8cc:	4604      	mov	r4, r0
    d8ce:	b330      	cbz	r0, d91e <at_handler+0x4e6>
    d8d0:	4a27      	ldr	r2, [pc, #156]	; (d970 <at_handler+0x538>)
    d8d2:	4b28      	ldr	r3, [pc, #160]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    d8d4:	4601      	mov	r1, r0
    d8d6:	1ad2      	subs	r2, r2, r3
    d8d8:	08d2      	lsrs	r2, r2, #3
    d8da:	0192      	lsls	r2, r2, #6
    d8dc:	4831      	ldr	r0, [pc, #196]	; (d9a4 <at_handler+0x56c>)
    d8de:	f042 0201 	orr.w	r2, r2, #1
    d8e2:	e7ac      	b.n	d83e <at_handler+0x406>
		multiplier = edrx_lookup_nbiot[idx];
    d8e4:	4b30      	ldr	r3, [pc, #192]	; (d9a8 <at_handler+0x570>)
    d8e6:	e7dc      	b.n	d8a2 <at_handler+0x46a>
    d8e8:	4b22      	ldr	r3, [pc, #136]	; (d974 <at_handler+0x53c>)
    d8ea:	4921      	ldr	r1, [pc, #132]	; (d970 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d8ec:	4825      	ldr	r0, [pc, #148]	; (d984 <at_handler+0x54c>)
    d8ee:	1ac9      	subs	r1, r1, r3
    d8f0:	08c9      	lsrs	r1, r1, #3
    d8f2:	0189      	lsls	r1, r1, #6
    d8f4:	f041 0101 	orr.w	r1, r1, #1
    d8f8:	f01e fdce 	bl	2c498 <log_0>
		return -ENOTCONN;
    d8fc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d900:	4a1b      	ldr	r2, [pc, #108]	; (d970 <at_handler+0x538>)
    d902:	4b1c      	ldr	r3, [pc, #112]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    d904:	4621      	mov	r1, r4
    d906:	1ad2      	subs	r2, r2, r3
    d908:	08d2      	lsrs	r2, r2, #3
    d90a:	0192      	lsls	r2, r2, #6
    d90c:	4827      	ldr	r0, [pc, #156]	; (d9ac <at_handler+0x574>)
    d90e:	f042 0201 	orr.w	r2, r2, #1
    d912:	e794      	b.n	d83e <at_handler+0x406>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d914:	4826      	ldr	r0, [pc, #152]	; (d9b0 <at_handler+0x578>)
    d916:	e7d1      	b.n	d8bc <at_handler+0x484>
		return -EINVAL;
    d918:	f06f 0415 	mvn.w	r4, #21
    d91c:	e7f0      	b.n	d900 <at_handler+0x4c8>
	tmp_buf[len] = '\0';
    d91e:	9b03      	ldr	r3, [sp, #12]
    d920:	aa0c      	add	r2, sp, #48	; 0x30
    d922:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d924:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d926:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d92a:	2202      	movs	r2, #2
    d92c:	a805      	add	r0, sp, #20
    d92e:	f019 fb45 	bl	26fbc <strtoul>
	if (idx > 15) {
    d932:	b2c1      	uxtb	r1, r0
    d934:	290f      	cmp	r1, #15
    d936:	d90c      	bls.n	d952 <at_handler+0x51a>
    d938:	4b0e      	ldr	r3, [pc, #56]	; (d974 <at_handler+0x53c>)
    d93a:	4a0d      	ldr	r2, [pc, #52]	; (d970 <at_handler+0x538>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    d93c:	481d      	ldr	r0, [pc, #116]	; (d9b4 <at_handler+0x57c>)
    d93e:	1ad2      	subs	r2, r2, r3
    d940:	08d2      	lsrs	r2, r2, #3
    d942:	0192      	lsls	r2, r2, #6
    d944:	f042 0201 	orr.w	r2, r2, #1
    d948:	f01e fdb5 	bl	2c4b6 <log_1>
		err = -EINVAL;
    d94c:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
    d950:	e777      	b.n	d842 <at_handler+0x40a>
	idx += 1;
    d952:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d954:	b2c0      	uxtb	r0, r0
    d956:	ee07 0a90 	vmov	s15, r0
    d95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d95e:	ee67 7a88 	vmul.f32	s15, s15, s16
    d962:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d966:	e76c      	b.n	d842 <at_handler+0x40a>
    d968:	47ae147b 	.word	0x47ae147b
    d96c:	40247ae1 	.word	0x40247ae1
    d970:	0002ec0c 	.word	0x0002ec0c
    d974:	0002ebc4 	.word	0x0002ebc4
    d978:	00031c9f 	.word	0x00031c9f
    d97c:	00031cc8 	.word	0x00031cc8
    d980:	20026285 	.word	0x20026285
    d984:	00031d0b 	.word	0x00031d0b
    d988:	00031dff 	.word	0x00031dff
    d98c:	3fa3d70a 	.word	0x3fa3d70a
    d990:	00031b4b 	.word	0x00031b4b
    d994:	4023d70a 	.word	0x4023d70a
    d998:	00031d3b 	.word	0x00031d3b
    d99c:	00031d67 	.word	0x00031d67
    d9a0:	0002f6ec 	.word	0x0002f6ec
    d9a4:	00031db7 	.word	0x00031db7
    d9a8:	0002f70c 	.word	0x0002f70c
    d9ac:	00031d93 	.word	0x00031d93
    d9b0:	40a3d70a 	.word	0x40a3d70a
    d9b4:	00031de2 	.word	0x00031de2

0000d9b8 <_strtod_l>:
    d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9bc:	4c25      	ldr	r4, [pc, #148]	; (da54 <_strtod_l+0x9c>)
    d9be:	460f      	mov	r7, r1
    d9c0:	2500      	movs	r5, #0
    d9c2:	4683      	mov	fp, r0
    d9c4:	6824      	ldr	r4, [r4, #0]
    d9c6:	ed2d 8b02 	vpush	{d8}
    d9ca:	b0a3      	sub	sp, #140	; 0x8c
    d9cc:	4620      	mov	r0, r4
    d9ce:	9408      	str	r4, [sp, #32]
    d9d0:	461c      	mov	r4, r3
    d9d2:	9207      	str	r2, [sp, #28]
    d9d4:	951e      	str	r5, [sp, #120]	; 0x78
    d9d6:	f018 ff05 	bl	267e4 <strlen>
    d9da:	2100      	movs	r1, #0
    d9dc:	2200      	movs	r2, #0
    d9de:	463b      	mov	r3, r7
    d9e0:	4680      	mov	r8, r0
    d9e2:	971d      	str	r7, [sp, #116]	; 0x74
    d9e4:	e9cd 1204 	strd	r1, r2, [sp, #16]
    d9e8:	469a      	mov	sl, r3
    d9ea:	f813 6b01 	ldrb.w	r6, [r3], #1
    d9ee:	2e2d      	cmp	r6, #45	; 0x2d
    d9f0:	d832      	bhi.n	da58 <_strtod_l+0xa0>
    d9f2:	e8df f016 	tbh	[pc, r6, lsl #1]
    d9f6:	01e4      	.short	0x01e4
    d9f8:	00310031 	.word	0x00310031
    d9fc:	00310031 	.word	0x00310031
    da00:	00310031 	.word	0x00310031
    da04:	00310031 	.word	0x00310031
    da08:	01f201f2 	.word	0x01f201f2
    da0c:	01f201f2 	.word	0x01f201f2
    da10:	003101f2 	.word	0x003101f2
    da14:	00310031 	.word	0x00310031
    da18:	00310031 	.word	0x00310031
    da1c:	00310031 	.word	0x00310031
    da20:	00310031 	.word	0x00310031
    da24:	00310031 	.word	0x00310031
    da28:	00310031 	.word	0x00310031
    da2c:	00310031 	.word	0x00310031
    da30:	00310031 	.word	0x00310031
    da34:	01f20031 	.word	0x01f20031
    da38:	00310031 	.word	0x00310031
    da3c:	00310031 	.word	0x00310031
    da40:	00310031 	.word	0x00310031
    da44:	00310031 	.word	0x00310031
    da48:	00310031 	.word	0x00310031
    da4c:	00310423 	.word	0x00310423
    da50:	0417      	.short	0x0417
    da52:	bf00      	nop
    da54:	0002f6c8 	.word	0x0002f6c8
    da58:	2300      	movs	r3, #0
    da5a:	930a      	str	r3, [sp, #40]	; 0x28
    da5c:	2e30      	cmp	r6, #48	; 0x30
    da5e:	f000 81d9 	beq.w	de14 <_strtod_l+0x45c>
    da62:	2300      	movs	r3, #0
    da64:	930b      	str	r3, [sp, #44]	; 0x2c
    da66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    da6a:	2b09      	cmp	r3, #9
    da6c:	f200 8460 	bhi.w	e330 <_strtod_l+0x978>
    da70:	2500      	movs	r5, #0
    da72:	4650      	mov	r0, sl
    da74:	46a9      	mov	r9, r5
    da76:	462c      	mov	r4, r5
    da78:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    da7c:	3001      	adds	r0, #1
    da7e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
    da82:	2c08      	cmp	r4, #8
    da84:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    da88:	901d      	str	r0, [sp, #116]	; 0x74
    da8a:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    da8e:	7806      	ldrb	r6, [r0, #0]
    da90:	bfc8      	it	gt
    da92:	f1a3 0530 	subgt.w	r5, r3, #48	; 0x30
    da96:	f104 0401 	add.w	r4, r4, #1
    da9a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    da9e:	bfd8      	it	le
    daa0:	f1a2 0930 	suble.w	r9, r2, #48	; 0x30
    daa4:	2b09      	cmp	r3, #9
    daa6:	d9e7      	bls.n	da78 <_strtod_l+0xc0>
    daa8:	9908      	ldr	r1, [sp, #32]
    daaa:	4642      	mov	r2, r8
    daac:	f018 fec8 	bl	26840 <strncmp>
    dab0:	2800      	cmp	r0, #0
    dab2:	f000 82a8 	beq.w	e006 <_strtod_l+0x64e>
    dab6:	f026 0620 	bic.w	r6, r6, #32
    daba:	2e45      	cmp	r6, #69	; 0x45
    dabc:	f000 81be 	beq.w	de3c <_strtod_l+0x484>
    dac0:	2300      	movs	r3, #0
    dac2:	46a0      	mov	r8, r4
    dac4:	930c      	str	r3, [sp, #48]	; 0x30
    dac6:	9308      	str	r3, [sp, #32]
    dac8:	4648      	mov	r0, r9
    daca:	4646      	mov	r6, r8
    dacc:	f7fe fcfa 	bl	c4c4 <__aeabi_ui2d>
    dad0:	4602      	mov	r2, r0
    dad2:	460b      	mov	r3, r1
    dad4:	2c00      	cmp	r4, #0
    dad6:	bf08      	it	eq
    dad8:	4644      	moveq	r4, r8
    dada:	2e10      	cmp	r6, #16
    dadc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dae2:	bfa8      	it	ge
    dae4:	2610      	movge	r6, #16
    dae6:	9a08      	ldr	r2, [sp, #32]
    dae8:	f1b8 0f09 	cmp.w	r8, #9
    daec:	eba3 0302 	sub.w	r3, r3, r2
    daf0:	930e      	str	r3, [sp, #56]	; 0x38
    daf2:	dd13      	ble.n	db1c <_strtod_l+0x164>
    daf4:	4bc2      	ldr	r3, [pc, #776]	; (de00 <_strtod_l+0x448>)
    daf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    dafa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    dafe:	f7ff f979 	bl	cdf4 <__aeabi_dmul>
    db02:	ec41 0b18 	vmov	d8, r0, r1
    db06:	4628      	mov	r0, r5
    db08:	f7fe fcdc 	bl	c4c4 <__aeabi_ui2d>
    db0c:	4602      	mov	r2, r0
    db0e:	460b      	mov	r3, r1
    db10:	ec51 0b18 	vmov	r0, r1, d8
    db14:	f7fe fb9a 	bl	c24c <__adddf3>
    db18:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db1c:	f1b8 0f0f 	cmp.w	r8, #15
    db20:	f300 8200 	bgt.w	df24 <_strtod_l+0x56c>
    db24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db26:	2b00      	cmp	r3, #0
    db28:	f000 8449 	beq.w	e3be <_strtod_l+0xa06>
    db2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db2e:	f340 83c6 	ble.w	e2be <_strtod_l+0x906>
    db32:	2b16      	cmp	r3, #22
    db34:	f340 8567 	ble.w	e606 <_strtod_l+0xc4e>
    db38:	f1c8 0325 	rsb	r3, r8, #37	; 0x25
    db3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db3e:	4293      	cmp	r3, r2
    db40:	f280 85b5 	bge.w	e6ae <_strtod_l+0xcf6>
    db44:	eba8 0306 	sub.w	r3, r8, r6
    db48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db4a:	189d      	adds	r5, r3, r2
    db4c:	f015 030f 	ands.w	r3, r5, #15
    db50:	d00a      	beq.n	db68 <_strtod_l+0x1b0>
    db52:	49ab      	ldr	r1, [pc, #684]	; (de00 <_strtod_l+0x448>)
    db54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    db58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    db5c:	e9d1 0100 	ldrd	r0, r1, [r1]
    db60:	f7ff f948 	bl	cdf4 <__aeabi_dmul>
    db64:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db68:	f035 030f 	bics.w	r3, r5, #15
    db6c:	f040 8380 	bne.w	e270 <_strtod_l+0x8b8>
    db70:	2300      	movs	r3, #0
    db72:	930b      	str	r3, [sp, #44]	; 0x2c
    db74:	4643      	mov	r3, r8
    db76:	4622      	mov	r2, r4
    db78:	4651      	mov	r1, sl
    db7a:	4658      	mov	r0, fp
    db7c:	f8cd 9000 	str.w	r9, [sp]
    db80:	f01d f8a2 	bl	2acc8 <__s2b>
    db84:	9014      	str	r0, [sp, #80]	; 0x50
    db86:	2800      	cmp	r0, #0
    db88:	f000 84ff 	beq.w	e58a <_strtod_l+0xbd2>
    db8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db8e:	2600      	movs	r6, #0
    db90:	9b08      	ldr	r3, [sp, #32]
    db92:	4637      	mov	r7, r6
    db94:	46b2      	mov	sl, r6
    db96:	1a9b      	subs	r3, r3, r2
    db98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db9a:	2a00      	cmp	r2, #0
    db9c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dba0:	bfa8      	it	ge
    dba2:	4633      	movge	r3, r6
    dba4:	9211      	str	r2, [sp, #68]	; 0x44
    dba6:	930f      	str	r3, [sp, #60]	; 0x3c
    dba8:	9c14      	ldr	r4, [sp, #80]	; 0x50
    dbaa:	4658      	mov	r0, fp
    dbac:	6861      	ldr	r1, [r4, #4]
    dbae:	f01d f817 	bl	2abe0 <_Balloc>
    dbb2:	4681      	mov	r9, r0
    dbb4:	2800      	cmp	r0, #0
    dbb6:	f000 8288 	beq.w	e0ca <_strtod_l+0x712>
    dbba:	6922      	ldr	r2, [r4, #16]
    dbbc:	f104 010c 	add.w	r1, r4, #12
    dbc0:	300c      	adds	r0, #12
    dbc2:	3202      	adds	r2, #2
    dbc4:	ed9d 7b04 	vldr	d7, [sp, #16]
    dbc8:	0092      	lsls	r2, r2, #2
    dbca:	ed8d 7b08 	vstr	d7, [sp, #32]
    dbce:	f7fe ffbd 	bl	cb4c <memcpy>
    dbd2:	aa20      	add	r2, sp, #128	; 0x80
    dbd4:	a91f      	add	r1, sp, #124	; 0x7c
    dbd6:	4658      	mov	r0, fp
    dbd8:	ed9d 0b08 	vldr	d0, [sp, #32]
    dbdc:	f01d fbca 	bl	2b374 <__d2b>
    dbe0:	901e      	str	r0, [sp, #120]	; 0x78
    dbe2:	2800      	cmp	r0, #0
    dbe4:	f000 8261 	beq.w	e0aa <_strtod_l+0x6f2>
    dbe8:	2101      	movs	r1, #1
    dbea:	4658      	mov	r0, fp
    dbec:	f01d f90c 	bl	2ae08 <__i2b>
    dbf0:	4607      	mov	r7, r0
    dbf2:	2800      	cmp	r0, #0
    dbf4:	f000 8269 	beq.w	e0ca <_strtod_l+0x712>
    dbf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	f2c0 8258 	blt.w	e0b0 <_strtod_l+0x6f8>
    dc00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dc02:	9d11      	ldr	r5, [sp, #68]	; 0x44
    dc04:	189e      	adds	r6, r3, r2
    dc06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dc08:	9c20      	ldr	r4, [sp, #128]	; 0x80
    dc0a:	1a9b      	subs	r3, r3, r2
    dc0c:	4a7d      	ldr	r2, [pc, #500]	; (de04 <_strtod_l+0x44c>)
    dc0e:	4423      	add	r3, r4
    dc10:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
    dc14:	3b01      	subs	r3, #1
    dc16:	4293      	cmp	r3, r2
    dc18:	f280 820c 	bge.w	e034 <_strtod_l+0x67c>
    dc1c:	1ad2      	subs	r2, r2, r3
    dc1e:	2a1f      	cmp	r2, #31
    dc20:	eba4 0402 	sub.w	r4, r4, r2
    dc24:	f300 827c 	bgt.w	e120 <_strtod_l+0x768>
    dc28:	2301      	movs	r3, #1
    dc2a:	2100      	movs	r1, #0
    dc2c:	4093      	lsls	r3, r2
    dc2e:	9115      	str	r1, [sp, #84]	; 0x54
    dc30:	930c      	str	r3, [sp, #48]	; 0x30
    dc32:	4425      	add	r5, r4
    dc34:	4434      	add	r4, r6
    dc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc38:	42a6      	cmp	r6, r4
    dc3a:	441d      	add	r5, r3
    dc3c:	4633      	mov	r3, r6
    dc3e:	bfa8      	it	ge
    dc40:	4623      	movge	r3, r4
    dc42:	42ab      	cmp	r3, r5
    dc44:	bfa8      	it	ge
    dc46:	462b      	movge	r3, r5
    dc48:	2b00      	cmp	r3, #0
    dc4a:	dd02      	ble.n	dc52 <_strtod_l+0x29a>
    dc4c:	1ae4      	subs	r4, r4, r3
    dc4e:	1aed      	subs	r5, r5, r3
    dc50:	1af6      	subs	r6, r6, r3
    dc52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dc54:	2b00      	cmp	r3, #0
    dc56:	f300 8208 	bgt.w	e06a <_strtod_l+0x6b2>
    dc5a:	2c00      	cmp	r4, #0
    dc5c:	f300 821c 	bgt.w	e098 <_strtod_l+0x6e0>
    dc60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc62:	2b00      	cmp	r3, #0
    dc64:	f300 8228 	bgt.w	e0b8 <_strtod_l+0x700>
    dc68:	2d00      	cmp	r5, #0
    dc6a:	f300 824f 	bgt.w	e10c <_strtod_l+0x754>
    dc6e:	2e00      	cmp	r6, #0
    dc70:	dd08      	ble.n	dc84 <_strtod_l+0x2cc>
    dc72:	4639      	mov	r1, r7
    dc74:	4632      	mov	r2, r6
    dc76:	4658      	mov	r0, fp
    dc78:	f01d f9c2 	bl	2b000 <__lshift>
    dc7c:	4607      	mov	r7, r0
    dc7e:	2800      	cmp	r0, #0
    dc80:	f000 8223 	beq.w	e0ca <_strtod_l+0x712>
    dc84:	464a      	mov	r2, r9
    dc86:	991e      	ldr	r1, [sp, #120]	; 0x78
    dc88:	4658      	mov	r0, fp
    dc8a:	f01d fa3f 	bl	2b10c <__mdiff>
    dc8e:	4682      	mov	sl, r0
    dc90:	2800      	cmp	r0, #0
    dc92:	f000 821a 	beq.w	e0ca <_strtod_l+0x712>
    dc96:	2300      	movs	r3, #0
    dc98:	68c2      	ldr	r2, [r0, #12]
    dc9a:	4639      	mov	r1, r7
    dc9c:	60c3      	str	r3, [r0, #12]
    dc9e:	9210      	str	r2, [sp, #64]	; 0x40
    dca0:	f01d fa16 	bl	2b0d0 <__mcmp>
    dca4:	2800      	cmp	r0, #0
    dca6:	f2c0 853c 	blt.w	e722 <_strtod_l+0xd6a>
    dcaa:	f000 84bf 	beq.w	e62c <_strtod_l+0xc74>
    dcae:	4639      	mov	r1, r7
    dcb0:	4650      	mov	r0, sl
    dcb2:	f01d fbbb 	bl	2b42c <__ratio>
    dcb6:	2200      	movs	r2, #0
    dcb8:	ee10 0a10 	vmov	r0, s0
    dcbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dcc0:	ec55 4b10 	vmov	r4, r5, d0
    dcc4:	4629      	mov	r1, r5
    dcc6:	f7fe fce1 	bl	c68c <__aeabi_dcmple>
    dcca:	2800      	cmp	r0, #0
    dccc:	f000 81b7 	beq.w	e03e <_strtod_l+0x686>
    dcd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	f000 822f 	beq.w	e136 <_strtod_l+0x77e>
    dcd8:	2300      	movs	r3, #0
    dcda:	4c4b      	ldr	r4, [pc, #300]	; (de08 <_strtod_l+0x450>)
    dcdc:	4d4a      	ldr	r5, [pc, #296]	; (de08 <_strtod_l+0x450>)
    dcde:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    dce2:	9b05      	ldr	r3, [sp, #20]
    dce4:	2400      	movs	r4, #0
    dce6:	4698      	mov	r8, r3
    dce8:	4e48      	ldr	r6, [pc, #288]	; (de0c <_strtod_l+0x454>)
    dcea:	4b49      	ldr	r3, [pc, #292]	; (de10 <_strtod_l+0x458>)
    dcec:	ea08 0606 	and.w	r6, r8, r6
    dcf0:	429e      	cmp	r6, r3
    dcf2:	f000 825f 	beq.w	e1b4 <_strtod_l+0x7fc>
    dcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dcf8:	b323      	cbz	r3, dd44 <_strtod_l+0x38c>
    dcfa:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
    dcfe:	d821      	bhi.n	dd44 <_strtod_l+0x38c>
    dd00:	4620      	mov	r0, r4
    dd02:	4629      	mov	r1, r5
    dd04:	a33c      	add	r3, pc, #240	; (adr r3, ddf8 <_strtod_l+0x440>)
    dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd0a:	f7fe fcbf 	bl	c68c <__aeabi_dcmple>
    dd0e:	b1a0      	cbz	r0, dd3a <_strtod_l+0x382>
    dd10:	4629      	mov	r1, r5
    dd12:	4620      	mov	r0, r4
    dd14:	f7ff fa96 	bl	d244 <__aeabi_d2uiz>
    dd18:	2801      	cmp	r0, #1
    dd1a:	bf38      	it	cc
    dd1c:	2001      	movcc	r0, #1
    dd1e:	f7fe fbd1 	bl	c4c4 <__aeabi_ui2d>
    dd22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dd24:	4604      	mov	r4, r0
    dd26:	460d      	mov	r5, r1
    dd28:	2b00      	cmp	r3, #0
    dd2a:	f000 829c 	beq.w	e266 <_strtod_l+0x8ae>
    dd2e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    dd32:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    dd36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    dd3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
    dd40:	1b9b      	subs	r3, r3, r6
    dd42:	930d      	str	r3, [sp, #52]	; 0x34
    dd44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    dd48:	ed9d 0b08 	vldr	d0, [sp, #32]
    dd4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dd50:	f01d fa7c 	bl	2b24c <__ulp>
    dd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dd58:	ec53 2b10 	vmov	r2, r3, d0
    dd5c:	f7ff f84a 	bl	cdf4 <__aeabi_dmul>
    dd60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    dd64:	f7fe fa72 	bl	c24c <__adddf3>
    dd68:	4602      	mov	r2, r0
    dd6a:	460b      	mov	r3, r1
    dd6c:	4688      	mov	r8, r1
    dd6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dd72:	4b26      	ldr	r3, [pc, #152]	; (de0c <_strtod_l+0x454>)
    dd74:	ea08 0303 	and.w	r3, r8, r3
    dd78:	42b3      	cmp	r3, r6
    dd7a:	d103      	bne.n	dd84 <_strtod_l+0x3cc>
    dd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd7e:	2b00      	cmp	r3, #0
    dd80:	f000 82af 	beq.w	e2e2 <_strtod_l+0x92a>
    dd84:	991e      	ldr	r1, [sp, #120]	; 0x78
    dd86:	4658      	mov	r0, fp
    dd88:	f01c ff50 	bl	2ac2c <_Bfree>
    dd8c:	4649      	mov	r1, r9
    dd8e:	4658      	mov	r0, fp
    dd90:	f01c ff4c 	bl	2ac2c <_Bfree>
    dd94:	4639      	mov	r1, r7
    dd96:	4658      	mov	r0, fp
    dd98:	f01c ff48 	bl	2ac2c <_Bfree>
    dd9c:	4651      	mov	r1, sl
    dd9e:	4658      	mov	r0, fp
    dda0:	f01c ff44 	bl	2ac2c <_Bfree>
    dda4:	e700      	b.n	dba8 <_strtod_l+0x1f0>
    dda6:	f04f 0c01 	mov.w	ip, #1
    ddaa:	f026 0320 	bic.w	r3, r6, #32
    ddae:	2b45      	cmp	r3, #69	; 0x45
    ddb0:	f040 80b2 	bne.w	df18 <_strtod_l+0x560>
    ddb4:	ea44 0300 	orr.w	r3, r4, r0
    ddb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ddba:	4313      	orrs	r3, r2
    ddbc:	d142      	bne.n	de44 <_strtod_l+0x48c>
    ddbe:	9b07      	ldr	r3, [sp, #28]
    ddc0:	b16b      	cbz	r3, ddde <_strtod_l+0x426>
    ddc2:	f04f 0800 	mov.w	r8, #0
    ddc6:	f04f 0900 	mov.w	r9, #0
    ddca:	601f      	str	r7, [r3, #0]
    ddcc:	ec49 8b10 	vmov	d0, r8, r9
    ddd0:	b023      	add	sp, #140	; 0x8c
    ddd2:	ecbd 8b02 	vpop	{d8}
    ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddda:	931d      	str	r3, [sp, #116]	; 0x74
    dddc:	e604      	b.n	d9e8 <_strtod_l+0x30>
    ddde:	f04f 0800 	mov.w	r8, #0
    dde2:	f04f 0900 	mov.w	r9, #0
    dde6:	ec49 8b10 	vmov	d0, r8, r9
    ddea:	b023      	add	sp, #140	; 0x8c
    ddec:	ecbd 8b02 	vpop	{d8}
    ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddf4:	f3af 8000 	nop.w
    ddf8:	ffc00000 	.word	0xffc00000
    ddfc:	41dfffff 	.word	0x41dfffff
    de00:	0002ed28 	.word	0x0002ed28
    de04:	fffffc02 	.word	0xfffffc02
    de08:	3ff00000 	.word	0x3ff00000
    de0c:	7ff00000 	.word	0x7ff00000
    de10:	7fe00000 	.word	0x7fe00000
    de14:	f89a 3001 	ldrb.w	r3, [sl, #1]
    de18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    de1c:	2b58      	cmp	r3, #88	; 0x58
    de1e:	f000 82e3 	beq.w	e3e8 <_strtod_l+0xa30>
    de22:	4653      	mov	r3, sl
    de24:	3301      	adds	r3, #1
    de26:	931d      	str	r3, [sp, #116]	; 0x74
    de28:	781e      	ldrb	r6, [r3, #0]
    de2a:	2e30      	cmp	r6, #48	; 0x30
    de2c:	d0fa      	beq.n	de24 <_strtod_l+0x46c>
    de2e:	469a      	mov	sl, r3
    de30:	2e00      	cmp	r6, #0
    de32:	f000 80d2 	beq.w	dfda <_strtod_l+0x622>
    de36:	2301      	movs	r3, #1
    de38:	930b      	str	r3, [sp, #44]	; 0x2c
    de3a:	e614      	b.n	da66 <_strtod_l+0xae>
    de3c:	2000      	movs	r0, #0
    de3e:	46a6      	mov	lr, r4
    de40:	4684      	mov	ip, r0
    de42:	9008      	str	r0, [sp, #32]
    de44:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    de46:	1c7b      	adds	r3, r7, #1
    de48:	931d      	str	r3, [sp, #116]	; 0x74
    de4a:	787e      	ldrb	r6, [r7, #1]
    de4c:	2e2b      	cmp	r6, #43	; 0x2b
    de4e:	f000 826c 	beq.w	e32a <_strtod_l+0x972>
    de52:	2e2d      	cmp	r6, #45	; 0x2d
    de54:	f000 8194 	beq.w	e180 <_strtod_l+0x7c8>
    de58:	f04f 0800 	mov.w	r8, #0
    de5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    de60:	2b09      	cmp	r3, #9
    de62:	f200 8193 	bhi.w	e18c <_strtod_l+0x7d4>
    de66:	2e30      	cmp	r6, #48	; 0x30
    de68:	d105      	bne.n	de76 <_strtod_l+0x4be>
    de6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    de6c:	3301      	adds	r3, #1
    de6e:	931d      	str	r3, [sp, #116]	; 0x74
    de70:	781e      	ldrb	r6, [r3, #0]
    de72:	2e30      	cmp	r6, #48	; 0x30
    de74:	d0fa      	beq.n	de6c <_strtod_l+0x4b4>
    de76:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    de7a:	2b08      	cmp	r3, #8
    de7c:	d84c      	bhi.n	df18 <_strtod_l+0x560>
    de7e:	991d      	ldr	r1, [sp, #116]	; 0x74
    de80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    de84:	1c4a      	adds	r2, r1, #1
    de86:	910c      	str	r1, [sp, #48]	; 0x30
    de88:	921d      	str	r2, [sp, #116]	; 0x74
    de8a:	784e      	ldrb	r6, [r1, #1]
    de8c:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    de90:	2909      	cmp	r1, #9
    de92:	f200 8307 	bhi.w	e4a4 <_strtod_l+0xaec>
    de96:	3201      	adds	r2, #1
    de98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    de9c:	921d      	str	r2, [sp, #116]	; 0x74
    de9e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    dea2:	7816      	ldrb	r6, [r2, #0]
    dea4:	3b30      	subs	r3, #48	; 0x30
    dea6:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    deaa:	2909      	cmp	r1, #9
    deac:	d9f3      	bls.n	de96 <_strtod_l+0x4de>
    deae:	990c      	ldr	r1, [sp, #48]	; 0x30
    deb0:	1a52      	subs	r2, r2, r1
    deb2:	2a08      	cmp	r2, #8
    deb4:	f340 82f6 	ble.w	e4a4 <_strtod_l+0xaec>
    deb8:	f644 631f 	movw	r3, #19999	; 0x4e1f
    debc:	930c      	str	r3, [sp, #48]	; 0x30
    debe:	f1b8 0f00 	cmp.w	r8, #0
    dec2:	d002      	beq.n	deca <_strtod_l+0x512>
    dec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dec6:	425b      	negs	r3, r3
    dec8:	930c      	str	r3, [sp, #48]	; 0x30
    deca:	2c00      	cmp	r4, #0
    decc:	f040 82d5 	bne.w	e47a <_strtod_l+0xac2>
    ded0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ded2:	4303      	orrs	r3, r0
    ded4:	f040 8081 	bne.w	dfda <_strtod_l+0x622>
    ded8:	f1bc 0f00 	cmp.w	ip, #0
    dedc:	f47f af6f 	bne.w	ddbe <_strtod_l+0x406>
    dee0:	2e69      	cmp	r6, #105	; 0x69
    dee2:	f000 81d3 	beq.w	e28c <_strtod_l+0x8d4>
    dee6:	dc1a      	bgt.n	df1e <_strtod_l+0x566>
    dee8:	2e49      	cmp	r6, #73	; 0x49
    deea:	f000 81cf 	beq.w	e28c <_strtod_l+0x8d4>
    deee:	2e4e      	cmp	r6, #78	; 0x4e
    def0:	f47f af65 	bne.w	ddbe <_strtod_l+0x406>
    def4:	49a7      	ldr	r1, [pc, #668]	; (e194 <_strtod_l+0x7dc>)
    def6:	a81d      	add	r0, sp, #116	; 0x74
    def8:	f01c fc32 	bl	2a760 <__match>
    defc:	2800      	cmp	r0, #0
    defe:	f43f af5e 	beq.w	ddbe <_strtod_l+0x406>
    df02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	2b28      	cmp	r3, #40	; 0x28
    df08:	f000 83f8 	beq.w	e6fc <_strtod_l+0xd44>
    df0c:	48a2      	ldr	r0, [pc, #648]	; (e198 <_strtod_l+0x7e0>)
    df0e:	f003 fa2f 	bl	11370 <nan>
    df12:	ec59 8b10 	vmov	r8, r9, d0
    df16:	e064      	b.n	dfe2 <_strtod_l+0x62a>
    df18:	2300      	movs	r3, #0
    df1a:	930c      	str	r3, [sp, #48]	; 0x30
    df1c:	e7d5      	b.n	deca <_strtod_l+0x512>
    df1e:	2e6e      	cmp	r6, #110	; 0x6e
    df20:	d0e8      	beq.n	def4 <_strtod_l+0x53c>
    df22:	e74c      	b.n	ddbe <_strtod_l+0x406>
    df24:	eba8 0306 	sub.w	r3, r8, r6
    df28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    df2a:	189d      	adds	r5, r3, r2
    df2c:	2d00      	cmp	r5, #0
    df2e:	f73f ae0d 	bgt.w	db4c <_strtod_l+0x194>
    df32:	f43f ae1d 	beq.w	db70 <_strtod_l+0x1b8>
    df36:	426d      	negs	r5, r5
    df38:	f015 020f 	ands.w	r2, r5, #15
    df3c:	d00a      	beq.n	df54 <_strtod_l+0x59c>
    df3e:	4b97      	ldr	r3, [pc, #604]	; (e19c <_strtod_l+0x7e4>)
    df40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    df44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    df48:	e9d3 2300 	ldrd	r2, r3, [r3]
    df4c:	f7ff f87c 	bl	d048 <__aeabi_ddiv>
    df50:	e9cd 0104 	strd	r0, r1, [sp, #16]
    df54:	112d      	asrs	r5, r5, #4
    df56:	f43f ae0b 	beq.w	db70 <_strtod_l+0x1b8>
    df5a:	2d1f      	cmp	r5, #31
    df5c:	dc3a      	bgt.n	dfd4 <_strtod_l+0x61c>
    df5e:	f015 0310 	ands.w	r3, r5, #16
    df62:	4e8f      	ldr	r6, [pc, #572]	; (e1a0 <_strtod_l+0x7e8>)
    df64:	f04f 0700 	mov.w	r7, #0
    df68:	bf18      	it	ne
    df6a:	236a      	movne	r3, #106	; 0x6a
    df6c:	930b      	str	r3, [sp, #44]	; 0x2c
    df6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    df72:	f015 0f01 	tst.w	r5, #1
    df76:	4610      	mov	r0, r2
    df78:	4619      	mov	r1, r3
    df7a:	d006      	beq.n	df8a <_strtod_l+0x5d2>
    df7c:	2701      	movs	r7, #1
    df7e:	e9d6 2300 	ldrd	r2, r3, [r6]
    df82:	f7fe ff37 	bl	cdf4 <__aeabi_dmul>
    df86:	4602      	mov	r2, r0
    df88:	460b      	mov	r3, r1
    df8a:	106d      	asrs	r5, r5, #1
    df8c:	f106 0608 	add.w	r6, r6, #8
    df90:	d1ef      	bne.n	df72 <_strtod_l+0x5ba>
    df92:	b10f      	cbz	r7, df98 <_strtod_l+0x5e0>
    df94:	e9cd 2304 	strd	r2, r3, [sp, #16]
    df98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df9a:	b193      	cbz	r3, dfc2 <_strtod_l+0x60a>
    df9c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    dfa0:	f3c2 530a 	ubfx	r3, r2, #20, #11
    dfa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	dd0a      	ble.n	dfc2 <_strtod_l+0x60a>
    dfac:	2b1f      	cmp	r3, #31
    dfae:	f340 8450 	ble.w	e852 <_strtod_l+0xe9a>
    dfb2:	2100      	movs	r1, #0
    dfb4:	2b34      	cmp	r3, #52	; 0x34
    dfb6:	9104      	str	r1, [sp, #16]
    dfb8:	f340 8457 	ble.w	e86a <_strtod_l+0xeb2>
    dfbc:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    dfc0:	9305      	str	r3, [sp, #20]
    dfc2:	2200      	movs	r2, #0
    dfc4:	2300      	movs	r3, #0
    dfc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dfca:	f7fe fb4b 	bl	c664 <__aeabi_dcmpeq>
    dfce:	2800      	cmp	r0, #0
    dfd0:	f43f add0 	beq.w	db74 <_strtod_l+0x1bc>
    dfd4:	2322      	movs	r3, #34	; 0x22
    dfd6:	f8cb 3000 	str.w	r3, [fp]
    dfda:	f04f 0800 	mov.w	r8, #0
    dfde:	f04f 0900 	mov.w	r9, #0
    dfe2:	9a07      	ldr	r2, [sp, #28]
    dfe4:	b10a      	cbz	r2, dfea <_strtod_l+0x632>
    dfe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    dfe8:	6013      	str	r3, [r2, #0]
    dfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dfec:	2b00      	cmp	r3, #0
    dfee:	f43f aeed 	beq.w	ddcc <_strtod_l+0x414>
    dff2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    dff6:	4699      	mov	r9, r3
    dff8:	ec49 8b10 	vmov	d0, r8, r9
    dffc:	b023      	add	sp, #140	; 0x8c
    dffe:	ecbd 8b02 	vpop	{d8}
    e002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e008:	46a6      	mov	lr, r4
    e00a:	9008      	str	r0, [sp, #32]
    e00c:	eb03 0208 	add.w	r2, r3, r8
    e010:	921d      	str	r2, [sp, #116]	; 0x74
    e012:	f813 6008 	ldrb.w	r6, [r3, r8]
    e016:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
    e01a:	2a09      	cmp	r2, #9
    e01c:	f63f aec3 	bhi.w	dda6 <_strtod_l+0x3ee>
    e020:	3001      	adds	r0, #1
    e022:	4690      	mov	r8, r2
    e024:	2a00      	cmp	r2, #0
    e026:	f040 81fe 	bne.w	e426 <_strtod_l+0xa6e>
    e02a:	991d      	ldr	r1, [sp, #116]	; 0x74
    e02c:	1c4b      	adds	r3, r1, #1
    e02e:	931d      	str	r3, [sp, #116]	; 0x74
    e030:	784e      	ldrb	r6, [r1, #1]
    e032:	e7f0      	b.n	e016 <_strtod_l+0x65e>
    e034:	2300      	movs	r3, #0
    e036:	9315      	str	r3, [sp, #84]	; 0x54
    e038:	2301      	movs	r3, #1
    e03a:	930c      	str	r3, [sp, #48]	; 0x30
    e03c:	e5f9      	b.n	dc32 <_strtod_l+0x27a>
    e03e:	4620      	mov	r0, r4
    e040:	4629      	mov	r1, r5
    e042:	4b58      	ldr	r3, [pc, #352]	; (e1a4 <_strtod_l+0x7ec>)
    e044:	2200      	movs	r2, #0
    e046:	f7fe fed5 	bl	cdf4 <__aeabi_dmul>
    e04a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e04c:	4604      	mov	r4, r0
    e04e:	460d      	mov	r5, r1
    e050:	2b00      	cmp	r3, #0
    e052:	d16d      	bne.n	e130 <_strtod_l+0x778>
    e054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e058:	9012      	str	r0, [sp, #72]	; 0x48
    e05a:	9313      	str	r3, [sp, #76]	; 0x4c
    e05c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e060:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e064:	9b05      	ldr	r3, [sp, #20]
    e066:	4698      	mov	r8, r3
    e068:	e63e      	b.n	dce8 <_strtod_l+0x330>
    e06a:	4639      	mov	r1, r7
    e06c:	461a      	mov	r2, r3
    e06e:	4658      	mov	r0, fp
    e070:	f01c ff76 	bl	2af60 <__pow5mult>
    e074:	4607      	mov	r7, r0
    e076:	b340      	cbz	r0, e0ca <_strtod_l+0x712>
    e078:	4601      	mov	r1, r0
    e07a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e07c:	4658      	mov	r0, fp
    e07e:	f01c fecd 	bl	2ae1c <__multiply>
    e082:	b310      	cbz	r0, e0ca <_strtod_l+0x712>
    e084:	9010      	str	r0, [sp, #64]	; 0x40
    e086:	4658      	mov	r0, fp
    e088:	991e      	ldr	r1, [sp, #120]	; 0x78
    e08a:	f01c fdcf 	bl	2ac2c <_Bfree>
    e08e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e090:	2c00      	cmp	r4, #0
    e092:	931e      	str	r3, [sp, #120]	; 0x78
    e094:	f77f ade4 	ble.w	dc60 <_strtod_l+0x2a8>
    e098:	4622      	mov	r2, r4
    e09a:	991e      	ldr	r1, [sp, #120]	; 0x78
    e09c:	4658      	mov	r0, fp
    e09e:	f01c ffaf 	bl	2b000 <__lshift>
    e0a2:	901e      	str	r0, [sp, #120]	; 0x78
    e0a4:	2800      	cmp	r0, #0
    e0a6:	f47f addb 	bne.w	dc60 <_strtod_l+0x2a8>
    e0aa:	4656      	mov	r6, sl
    e0ac:	46ca      	mov	sl, r9
    e0ae:	e00f      	b.n	e0d0 <_strtod_l+0x718>
    e0b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0b2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    e0b4:	1ad5      	subs	r5, r2, r3
    e0b6:	e5a6      	b.n	dc06 <_strtod_l+0x24e>
    e0b8:	4649      	mov	r1, r9
    e0ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0bc:	4658      	mov	r0, fp
    e0be:	f01c ff4f 	bl	2af60 <__pow5mult>
    e0c2:	4681      	mov	r9, r0
    e0c4:	2800      	cmp	r0, #0
    e0c6:	f47f adcf 	bne.w	dc68 <_strtod_l+0x2b0>
    e0ca:	4656      	mov	r6, sl
    e0cc:	46ca      	mov	sl, r9
    e0ce:	981e      	ldr	r0, [sp, #120]	; 0x78
    e0d0:	4b35      	ldr	r3, [pc, #212]	; (e1a8 <_strtod_l+0x7f0>)
    e0d2:	2200      	movs	r2, #0
    e0d4:	9305      	str	r3, [sp, #20]
    e0d6:	2322      	movs	r3, #34	; 0x22
    e0d8:	9204      	str	r2, [sp, #16]
    e0da:	f8cb 3000 	str.w	r3, [fp]
    e0de:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e0e2:	4601      	mov	r1, r0
    e0e4:	4658      	mov	r0, fp
    e0e6:	f01c fda1 	bl	2ac2c <_Bfree>
    e0ea:	4651      	mov	r1, sl
    e0ec:	4658      	mov	r0, fp
    e0ee:	f01c fd9d 	bl	2ac2c <_Bfree>
    e0f2:	4639      	mov	r1, r7
    e0f4:	4658      	mov	r0, fp
    e0f6:	f01c fd99 	bl	2ac2c <_Bfree>
    e0fa:	9914      	ldr	r1, [sp, #80]	; 0x50
    e0fc:	4658      	mov	r0, fp
    e0fe:	f01c fd95 	bl	2ac2c <_Bfree>
    e102:	4631      	mov	r1, r6
    e104:	4658      	mov	r0, fp
    e106:	f01c fd91 	bl	2ac2c <_Bfree>
    e10a:	e76a      	b.n	dfe2 <_strtod_l+0x62a>
    e10c:	4649      	mov	r1, r9
    e10e:	462a      	mov	r2, r5
    e110:	4658      	mov	r0, fp
    e112:	f01c ff75 	bl	2b000 <__lshift>
    e116:	4681      	mov	r9, r0
    e118:	2800      	cmp	r0, #0
    e11a:	f47f ada8 	bne.w	dc6e <_strtod_l+0x2b6>
    e11e:	e7d4      	b.n	e0ca <_strtod_l+0x712>
    e120:	4922      	ldr	r1, [pc, #136]	; (e1ac <_strtod_l+0x7f4>)
    e122:	2201      	movs	r2, #1
    e124:	1acb      	subs	r3, r1, r3
    e126:	920c      	str	r2, [sp, #48]	; 0x30
    e128:	fa02 f303 	lsl.w	r3, r2, r3
    e12c:	9315      	str	r3, [sp, #84]	; 0x54
    e12e:	e580      	b.n	dc32 <_strtod_l+0x27a>
    e130:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    e134:	e792      	b.n	e05c <_strtod_l+0x6a4>
    e136:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e13a:	2900      	cmp	r1, #0
    e13c:	f040 8081 	bne.w	e242 <_strtod_l+0x88a>
    e140:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e144:	4690      	mov	r8, r2
    e146:	2b00      	cmp	r3, #0
    e148:	f040 8081 	bne.w	e24e <_strtod_l+0x896>
    e14c:	2200      	movs	r2, #0
    e14e:	4b18      	ldr	r3, [pc, #96]	; (e1b0 <_strtod_l+0x7f8>)
    e150:	4620      	mov	r0, r4
    e152:	4629      	mov	r1, r5
    e154:	f7fe fa90 	bl	c678 <__aeabi_dcmplt>
    e158:	2800      	cmp	r0, #0
    e15a:	f040 8260 	bne.w	e61e <_strtod_l+0xc66>
    e15e:	4620      	mov	r0, r4
    e160:	4629      	mov	r1, r5
    e162:	4b10      	ldr	r3, [pc, #64]	; (e1a4 <_strtod_l+0x7ec>)
    e164:	2200      	movs	r2, #0
    e166:	f7fe fe45 	bl	cdf4 <__aeabi_dmul>
    e16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e16e:	4604      	mov	r4, r0
    e170:	460d      	mov	r5, r1
    e172:	901a      	str	r0, [sp, #104]	; 0x68
    e174:	931b      	str	r3, [sp, #108]	; 0x6c
    e176:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    e17a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e17e:	e5b3      	b.n	dce8 <_strtod_l+0x330>
    e180:	f04f 0801 	mov.w	r8, #1
    e184:	1cbb      	adds	r3, r7, #2
    e186:	931d      	str	r3, [sp, #116]	; 0x74
    e188:	78be      	ldrb	r6, [r7, #2]
    e18a:	e667      	b.n	de5c <_strtod_l+0x4a4>
    e18c:	2300      	movs	r3, #0
    e18e:	971d      	str	r7, [sp, #116]	; 0x74
    e190:	930c      	str	r3, [sp, #48]	; 0x30
    e192:	e69a      	b.n	deca <_strtod_l+0x512>
    e194:	0002f4d8 	.word	0x0002f4d8
    e198:	0002f394 	.word	0x0002f394
    e19c:	0002ed28 	.word	0x0002ed28
    e1a0:	0002ecd8 	.word	0x0002ecd8
    e1a4:	3fe00000 	.word	0x3fe00000
    e1a8:	7ff00000 	.word	0x7ff00000
    e1ac:	fffffbe2 	.word	0xfffffbe2
    e1b0:	3ff00000 	.word	0x3ff00000
    e1b4:	f1a8 7354 	sub.w	r3, r8, #55574528	; 0x3500000
    e1b8:	9305      	str	r3, [sp, #20]
    e1ba:	ed9d 7b04 	vldr	d7, [sp, #16]
    e1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e1c2:	eeb0 8a47 	vmov.f32	s16, s14
    e1c6:	eef0 8a67 	vmov.f32	s17, s15
    e1ca:	eeb0 0a47 	vmov.f32	s0, s14
    e1ce:	eef0 0a67 	vmov.f32	s1, s15
    e1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e1d6:	f01d f839 	bl	2b24c <__ulp>
    e1da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e1de:	ec53 2b10 	vmov	r2, r3, d0
    e1e2:	f7fe fe07 	bl	cdf4 <__aeabi_dmul>
    e1e6:	ec53 2b18 	vmov	r2, r3, d8
    e1ea:	f7fe f82f 	bl	c24c <__adddf3>
    e1ee:	460a      	mov	r2, r1
    e1f0:	4bb7      	ldr	r3, [pc, #732]	; (e4d0 <_strtod_l+0xb18>)
    e1f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e1f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e1fa:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    e1fe:	49b5      	ldr	r1, [pc, #724]	; (e4d4 <_strtod_l+0xb1c>)
    e200:	4011      	ands	r1, r2
    e202:	4299      	cmp	r1, r3
    e204:	d92a      	bls.n	e25c <_strtod_l+0x8a4>
    e206:	4ab4      	ldr	r2, [pc, #720]	; (e4d8 <_strtod_l+0xb20>)
    e208:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e20c:	4291      	cmp	r1, r2
    e20e:	d103      	bne.n	e218 <_strtod_l+0x860>
    e210:	f1b0 3fff 	cmp.w	r0, #4294967295
    e214:	f43f af59 	beq.w	e0ca <_strtod_l+0x712>
    e218:	f04f 33ff 	mov.w	r3, #4294967295
    e21c:	49ae      	ldr	r1, [pc, #696]	; (e4d8 <_strtod_l+0xb20>)
    e21e:	e9cd 3104 	strd	r3, r1, [sp, #16]
    e222:	e5af      	b.n	dd84 <_strtod_l+0x3cc>
    e224:	2301      	movs	r3, #1
    e226:	930a      	str	r3, [sp, #40]	; 0x28
    e228:	f10a 0301 	add.w	r3, sl, #1
    e22c:	931d      	str	r3, [sp, #116]	; 0x74
    e22e:	f89a 6001 	ldrb.w	r6, [sl, #1]
    e232:	2e00      	cmp	r6, #0
    e234:	f43f adc3 	beq.w	ddbe <_strtod_l+0x406>
    e238:	469a      	mov	sl, r3
    e23a:	e40f      	b.n	da5c <_strtod_l+0xa4>
    e23c:	2300      	movs	r3, #0
    e23e:	930a      	str	r3, [sp, #40]	; 0x28
    e240:	e7f2      	b.n	e228 <_strtod_l+0x870>
    e242:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e246:	2901      	cmp	r1, #1
    e248:	f000 811b 	beq.w	e482 <_strtod_l+0xaca>
    e24c:	4690      	mov	r8, r2
    e24e:	4ca3      	ldr	r4, [pc, #652]	; (e4dc <_strtod_l+0xb24>)
    e250:	2300      	movs	r3, #0
    e252:	4da3      	ldr	r5, [pc, #652]	; (e4e0 <_strtod_l+0xb28>)
    e254:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    e258:	2400      	movs	r4, #0
    e25a:	e545      	b.n	dce8 <_strtod_l+0x330>
    e25c:	f102 7854 	add.w	r8, r2, #55574528	; 0x3500000
    e260:	f8cd 8014 	str.w	r8, [sp, #20]
    e264:	e585      	b.n	dd72 <_strtod_l+0x3ba>
    e266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e26a:	9016      	str	r0, [sp, #88]	; 0x58
    e26c:	9317      	str	r3, [sp, #92]	; 0x5c
    e26e:	e560      	b.n	dd32 <_strtod_l+0x37a>
    e270:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
    e274:	f340 813e 	ble.w	e4f4 <_strtod_l+0xb3c>
    e278:	4b96      	ldr	r3, [pc, #600]	; (e4d4 <_strtod_l+0xb1c>)
    e27a:	2200      	movs	r2, #0
    e27c:	9305      	str	r3, [sp, #20]
    e27e:	2322      	movs	r3, #34	; 0x22
    e280:	9204      	str	r2, [sp, #16]
    e282:	f8cb 3000 	str.w	r3, [fp]
    e286:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e28a:	e6aa      	b.n	dfe2 <_strtod_l+0x62a>
    e28c:	4995      	ldr	r1, [pc, #596]	; (e4e4 <_strtod_l+0xb2c>)
    e28e:	a81d      	add	r0, sp, #116	; 0x74
    e290:	f01c fa66 	bl	2a760 <__match>
    e294:	2800      	cmp	r0, #0
    e296:	f43f ad92 	beq.w	ddbe <_strtod_l+0x406>
    e29a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e29c:	a81d      	add	r0, sp, #116	; 0x74
    e29e:	4992      	ldr	r1, [pc, #584]	; (e4e8 <_strtod_l+0xb30>)
    e2a0:	3b01      	subs	r3, #1
    e2a2:	931d      	str	r3, [sp, #116]	; 0x74
    e2a4:	f01c fa5c 	bl	2a760 <__match>
    e2a8:	b910      	cbnz	r0, e2b0 <_strtod_l+0x8f8>
    e2aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e2ac:	3301      	adds	r3, #1
    e2ae:	931d      	str	r3, [sp, #116]	; 0x74
    e2b0:	2300      	movs	r3, #0
    e2b2:	4888      	ldr	r0, [pc, #544]	; (e4d4 <_strtod_l+0xb1c>)
    e2b4:	e9cd 3004 	strd	r3, r0, [sp, #16]
    e2b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e2bc:	e691      	b.n	dfe2 <_strtod_l+0x62a>
    e2be:	3316      	adds	r3, #22
    e2c0:	f6ff ae30 	blt.w	df24 <_strtod_l+0x56c>
    e2c4:	9b08      	ldr	r3, [sp, #32]
    e2c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e2c8:	1a9a      	subs	r2, r3, r2
    e2ca:	4b88      	ldr	r3, [pc, #544]	; (e4ec <_strtod_l+0xb34>)
    e2cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    e2d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e2d8:	f7fe feb6 	bl	d048 <__aeabi_ddiv>
    e2dc:	4680      	mov	r8, r0
    e2de:	4689      	mov	r9, r1
    e2e0:	e67f      	b.n	dfe2 <_strtod_l+0x62a>
    e2e2:	4620      	mov	r0, r4
    e2e4:	4629      	mov	r1, r5
    e2e6:	f7fe ffcd 	bl	d284 <__aeabi_d2lz>
    e2ea:	f7fe f937 	bl	c55c <__aeabi_l2d>
    e2ee:	460b      	mov	r3, r1
    e2f0:	4602      	mov	r2, r0
    e2f2:	4629      	mov	r1, r5
    e2f4:	4620      	mov	r0, r4
    e2f6:	f7fd ffa7 	bl	c248 <__aeabi_dsub>
    e2fa:	9c04      	ldr	r4, [sp, #16]
    e2fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e2fe:	f3c8 0c13 	ubfx	ip, r8, #0, #20
    e302:	460d      	mov	r5, r1
    e304:	4326      	orrs	r6, r4
    e306:	4604      	mov	r4, r0
    e308:	ea56 030c 	orrs.w	r3, r6, ip
    e30c:	d15a      	bne.n	e3c4 <_strtod_l+0xa0c>
    e30e:	a36a      	add	r3, pc, #424	; (adr r3, e4b8 <_strtod_l+0xb00>)
    e310:	e9d3 2300 	ldrd	r2, r3, [r3]
    e314:	f7fe f9b0 	bl	c678 <__aeabi_dcmplt>
    e318:	2800      	cmp	r0, #0
    e31a:	f43f ad33 	beq.w	dd84 <_strtod_l+0x3cc>
    e31e:	4656      	mov	r6, sl
    e320:	981e      	ldr	r0, [sp, #120]	; 0x78
    e322:	46ca      	mov	sl, r9
    e324:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e328:	e6db      	b.n	e0e2 <_strtod_l+0x72a>
    e32a:	f04f 0800 	mov.w	r8, #0
    e32e:	e729      	b.n	e184 <_strtod_l+0x7cc>
    e330:	9908      	ldr	r1, [sp, #32]
    e332:	4642      	mov	r2, r8
    e334:	4650      	mov	r0, sl
    e336:	f018 fa83 	bl	26840 <strncmp>
    e33a:	4686      	mov	lr, r0
    e33c:	2800      	cmp	r0, #0
    e33e:	f040 82ab 	bne.w	e898 <_strtod_l+0xee0>
    e342:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e344:	eb02 0308 	add.w	r3, r2, r8
    e348:	931d      	str	r3, [sp, #116]	; 0x74
    e34a:	f812 6008 	ldrb.w	r6, [r2, r8]
    e34e:	2e30      	cmp	r6, #48	; 0x30
    e350:	f040 8157 	bne.w	e602 <_strtod_l+0xc4a>
    e354:	f1c3 0201 	rsb	r2, r3, #1
    e358:	1898      	adds	r0, r3, r2
    e35a:	3301      	adds	r3, #1
    e35c:	931d      	str	r3, [sp, #116]	; 0x74
    e35e:	781e      	ldrb	r6, [r3, #0]
    e360:	2e30      	cmp	r6, #48	; 0x30
    e362:	d0f9      	beq.n	e358 <_strtod_l+0x9a0>
    e364:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    e368:	2b08      	cmp	r3, #8
    e36a:	d80f      	bhi.n	e38c <_strtod_l+0x9d4>
    e36c:	991d      	ldr	r1, [sp, #116]	; 0x74
    e36e:	f04f 0900 	mov.w	r9, #0
    e372:	1c43      	adds	r3, r0, #1
    e374:	f1a6 0830 	sub.w	r8, r6, #48	; 0x30
    e378:	468a      	mov	sl, r1
    e37a:	464d      	mov	r5, r9
    e37c:	2401      	movs	r4, #1
    e37e:	9308      	str	r3, [sp, #32]
    e380:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    e384:	2000      	movs	r0, #0
    e386:	eb08 0949 	add.w	r9, r8, r9, lsl #1
    e38a:	e64f      	b.n	e02c <_strtod_l+0x674>
    e38c:	2300      	movs	r3, #0
    e38e:	f04f 0c01 	mov.w	ip, #1
    e392:	461c      	mov	r4, r3
    e394:	4699      	mov	r9, r3
    e396:	461d      	mov	r5, r3
    e398:	9308      	str	r3, [sp, #32]
    e39a:	e506      	b.n	ddaa <_strtod_l+0x3f2>
    e39c:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
    e3a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    e3a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    e3a6:	9104      	str	r1, [sp, #16]
    e3a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
    e3ac:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    e3b0:	9305      	str	r3, [sp, #20]
    e3b2:	0724      	lsls	r4, r4, #28
    e3b4:	d503      	bpl.n	e3be <_strtod_l+0xa06>
    e3b6:	9b05      	ldr	r3, [sp, #20]
    e3b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e3bc:	9305      	str	r3, [sp, #20]
    e3be:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e3c2:	e60e      	b.n	dfe2 <_strtod_l+0x62a>
    e3c4:	a33e      	add	r3, pc, #248	; (adr r3, e4c0 <_strtod_l+0xb08>)
    e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3ca:	f7fe f955 	bl	c678 <__aeabi_dcmplt>
    e3ce:	2800      	cmp	r0, #0
    e3d0:	d1a5      	bne.n	e31e <_strtod_l+0x966>
    e3d2:	4620      	mov	r0, r4
    e3d4:	4629      	mov	r1, r5
    e3d6:	a33c      	add	r3, pc, #240	; (adr r3, e4c8 <_strtod_l+0xb10>)
    e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3dc:	f7fe f96a 	bl	c6b4 <__aeabi_dcmpgt>
    e3e0:	2800      	cmp	r0, #0
    e3e2:	f43f accf 	beq.w	dd84 <_strtod_l+0x3cc>
    e3e6:	e79a      	b.n	e31e <_strtod_l+0x966>
    e3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e3ea:	aa1e      	add	r2, sp, #120	; 0x78
    e3ec:	9402      	str	r4, [sp, #8]
    e3ee:	a91d      	add	r1, sp, #116	; 0x74
    e3f0:	9301      	str	r3, [sp, #4]
    e3f2:	4658      	mov	r0, fp
    e3f4:	9200      	str	r2, [sp, #0]
    e3f6:	ab1f      	add	r3, sp, #124	; 0x7c
    e3f8:	4a3d      	ldr	r2, [pc, #244]	; (e4f0 <_strtod_l+0xb38>)
    e3fa:	f01b ff07 	bl	2a20c <__gethex>
    e3fe:	f010 0507 	ands.w	r5, r0, #7
    e402:	4604      	mov	r4, r0
    e404:	f43f ade9 	beq.w	dfda <_strtod_l+0x622>
    e408:	2d06      	cmp	r5, #6
    e40a:	f040 80c8 	bne.w	e59e <_strtod_l+0xbe6>
    e40e:	9a07      	ldr	r2, [sp, #28]
    e410:	f10a 0301 	add.w	r3, sl, #1
    e414:	2a00      	cmp	r2, #0
    e416:	f43f ace2 	beq.w	ddde <_strtod_l+0x426>
    e41a:	f04f 0800 	mov.w	r8, #0
    e41e:	f04f 0900 	mov.w	r9, #0
    e422:	6013      	str	r3, [r2, #0]
    e424:	e4d2      	b.n	ddcc <_strtod_l+0x414>
    e426:	9b08      	ldr	r3, [sp, #32]
    e428:	2801      	cmp	r0, #1
    e42a:	991d      	ldr	r1, [sp, #116]	; 0x74
    e42c:	f104 0601 	add.w	r6, r4, #1
    e430:	4403      	add	r3, r0
    e432:	9308      	str	r3, [sp, #32]
    e434:	f000 822d 	beq.w	e892 <_strtod_l+0xeda>
    e438:	4420      	add	r0, r4
    e43a:	f100 3cff 	add.w	ip, r0, #4294967295
    e43e:	e004      	b.n	e44a <_strtod_l+0xa92>
    e440:	ea4f 0946 	mov.w	r9, r6, lsl #1
    e444:	4563      	cmp	r3, ip
    e446:	461c      	mov	r4, r3
    e448:	d00b      	beq.n	e462 <_strtod_l+0xaaa>
    e44a:	2c08      	cmp	r4, #8
    e44c:	f104 0301 	add.w	r3, r4, #1
    e450:	eb09 0689 	add.w	r6, r9, r9, lsl #2
    e454:	ddf4      	ble.n	e440 <_strtod_l+0xa88>
    e456:	eb05 0485 	add.w	r4, r5, r5, lsl #2
    e45a:	2b10      	cmp	r3, #16
    e45c:	bfd8      	it	le
    e45e:	0065      	lslle	r5, r4, #1
    e460:	e7f0      	b.n	e444 <_strtod_l+0xa8c>
    e462:	4604      	mov	r4, r0
    e464:	2b08      	cmp	r3, #8
    e466:	dd8b      	ble.n	e380 <_strtod_l+0x9c8>
    e468:	2c10      	cmp	r4, #16
    e46a:	f300 8137 	bgt.w	e6dc <_strtod_l+0xd24>
    e46e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    e472:	2000      	movs	r0, #0
    e474:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    e478:	e5d8      	b.n	e02c <_strtod_l+0x674>
    e47a:	46a0      	mov	r8, r4
    e47c:	4674      	mov	r4, lr
    e47e:	f7ff bb23 	b.w	dac8 <_strtod_l+0x110>
    e482:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e486:	4690      	mov	r8, r2
    e488:	2a00      	cmp	r2, #0
    e48a:	f47f aee0 	bne.w	e24e <_strtod_l+0x896>
    e48e:	4656      	mov	r6, sl
    e490:	46ca      	mov	sl, r9
    e492:	2322      	movs	r3, #34	; 0x22
    e494:	981e      	ldr	r0, [sp, #120]	; 0x78
    e496:	f04f 0800 	mov.w	r8, #0
    e49a:	f04f 0900 	mov.w	r9, #0
    e49e:	f8cb 3000 	str.w	r3, [fp]
    e4a2:	e61e      	b.n	e0e2 <_strtod_l+0x72a>
    e4a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
    e4a8:	4293      	cmp	r3, r2
    e4aa:	bfa8      	it	ge
    e4ac:	4613      	movge	r3, r2
    e4ae:	930c      	str	r3, [sp, #48]	; 0x30
    e4b0:	e505      	b.n	debe <_strtod_l+0x506>
    e4b2:	bf00      	nop
    e4b4:	f3af 8000 	nop.w
    e4b8:	94a03595 	.word	0x94a03595
    e4bc:	3fcfffff 	.word	0x3fcfffff
    e4c0:	94a03595 	.word	0x94a03595
    e4c4:	3fdfffff 	.word	0x3fdfffff
    e4c8:	35afe535 	.word	0x35afe535
    e4cc:	3fe00000 	.word	0x3fe00000
    e4d0:	7c9fffff 	.word	0x7c9fffff
    e4d4:	7ff00000 	.word	0x7ff00000
    e4d8:	7fefffff 	.word	0x7fefffff
    e4dc:	bff00000 	.word	0xbff00000
    e4e0:	3ff00000 	.word	0x3ff00000
    e4e4:	0002f4cc 	.word	0x0002f4cc
    e4e8:	0002f4d0 	.word	0x0002f4d0
    e4ec:	0002ed28 	.word	0x0002ed28
    e4f0:	0002f4dc 	.word	0x0002f4dc
    e4f4:	2b10      	cmp	r3, #16
    e4f6:	ea4f 1523 	mov.w	r5, r3, asr #4
    e4fa:	f340 8159 	ble.w	e7b0 <_strtod_l+0xdf8>
    e4fe:	4bb0      	ldr	r3, [pc, #704]	; (e7c0 <_strtod_l+0xe08>)
    e500:	f04f 0c00 	mov.w	ip, #0
    e504:	461e      	mov	r6, r3
    e506:	930b      	str	r3, [sp, #44]	; 0x2c
    e508:	4667      	mov	r7, ip
    e50a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e50e:	f015 0f01 	tst.w	r5, #1
    e512:	4610      	mov	r0, r2
    e514:	4619      	mov	r1, r3
    e516:	ea4f 0565 	mov.w	r5, r5, asr #1
    e51a:	f107 0701 	add.w	r7, r7, #1
    e51e:	d007      	beq.n	e530 <_strtod_l+0xb78>
    e520:	e9d6 2300 	ldrd	r2, r3, [r6]
    e524:	f7fe fc66 	bl	cdf4 <__aeabi_dmul>
    e528:	f04f 0c01 	mov.w	ip, #1
    e52c:	4602      	mov	r2, r0
    e52e:	460b      	mov	r3, r1
    e530:	2d01      	cmp	r5, #1
    e532:	f106 0608 	add.w	r6, r6, #8
    e536:	d1ea      	bne.n	e50e <_strtod_l+0xb56>
    e538:	f1bc 0f00 	cmp.w	ip, #0
    e53c:	d001      	beq.n	e542 <_strtod_l+0xb8a>
    e53e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    e542:	9b05      	ldr	r3, [sp, #20]
    e544:	4d9f      	ldr	r5, [pc, #636]	; (e7c4 <_strtod_l+0xe0c>)
    e546:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    e54a:	4e9f      	ldr	r6, [pc, #636]	; (e7c8 <_strtod_l+0xe10>)
    e54c:	9305      	str	r3, [sp, #20]
    e54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e550:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    e554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e558:	e9d7 0100 	ldrd	r0, r1, [r7]
    e55c:	f7fe fc4a 	bl	cdf4 <__aeabi_dmul>
    e560:	ea01 0305 	and.w	r3, r1, r5
    e564:	460a      	mov	r2, r1
    e566:	42b3      	cmp	r3, r6
    e568:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e56c:	f200 80bf 	bhi.w	e6ee <_strtod_l+0xd36>
    e570:	4996      	ldr	r1, [pc, #600]	; (e7cc <_strtod_l+0xe14>)
    e572:	428b      	cmp	r3, r1
    e574:	f240 80b4 	bls.w	e6e0 <_strtod_l+0xd28>
    e578:	4b95      	ldr	r3, [pc, #596]	; (e7d0 <_strtod_l+0xe18>)
    e57a:	9305      	str	r3, [sp, #20]
    e57c:	2300      	movs	r3, #0
    e57e:	930b      	str	r3, [sp, #44]	; 0x2c
    e580:	f04f 33ff 	mov.w	r3, #4294967295
    e584:	9304      	str	r3, [sp, #16]
    e586:	f7ff baf5 	b.w	db74 <_strtod_l+0x1bc>
    e58a:	4b8e      	ldr	r3, [pc, #568]	; (e7c4 <_strtod_l+0xe0c>)
    e58c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e58e:	9305      	str	r3, [sp, #20]
    e590:	2322      	movs	r3, #34	; 0x22
    e592:	9204      	str	r2, [sp, #16]
    e594:	f8cb 3000 	str.w	r3, [fp]
    e598:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e59c:	e521      	b.n	dfe2 <_strtod_l+0x62a>
    e59e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e5a0:	b13a      	cbz	r2, e5b2 <_strtod_l+0xbfa>
    e5a2:	2135      	movs	r1, #53	; 0x35
    e5a4:	a820      	add	r0, sp, #128	; 0x80
    e5a6:	f01c ff71 	bl	2b48c <__copybits>
    e5aa:	4658      	mov	r0, fp
    e5ac:	991e      	ldr	r1, [sp, #120]	; 0x78
    e5ae:	f01c fb3d 	bl	2ac2c <_Bfree>
    e5b2:	3d01      	subs	r5, #1
    e5b4:	2d05      	cmp	r5, #5
    e5b6:	f63f aefc 	bhi.w	e3b2 <_strtod_l+0x9fa>
    e5ba:	a301      	add	r3, pc, #4	; (adr r3, e5c0 <_strtod_l+0xc08>)
    e5bc:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    e5c0:	0000e39d 	.word	0x0000e39d
    e5c4:	0000e5f9 	.word	0x0000e5f9
    e5c8:	0000e5ef 	.word	0x0000e5ef
    e5cc:	0000e5e1 	.word	0x0000e5e1
    e5d0:	0000e39d 	.word	0x0000e39d
    e5d4:	0000e5d9 	.word	0x0000e5d9
    e5d8:	2300      	movs	r3, #0
    e5da:	e9cd 3304 	strd	r3, r3, [sp, #16]
    e5de:	e6e8      	b.n	e3b2 <_strtod_l+0x9fa>
    e5e0:	f04f 33ff 	mov.w	r3, #4294967295
    e5e4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    e5e8:	e9cd 3504 	strd	r3, r5, [sp, #16]
    e5ec:	e6e1      	b.n	e3b2 <_strtod_l+0x9fa>
    e5ee:	2300      	movs	r3, #0
    e5f0:	4e74      	ldr	r6, [pc, #464]	; (e7c4 <_strtod_l+0xe0c>)
    e5f2:	e9cd 3604 	strd	r3, r6, [sp, #16]
    e5f6:	e6dc      	b.n	e3b2 <_strtod_l+0x9fa>
    e5f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e5fa:	9304      	str	r3, [sp, #16]
    e5fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e5fe:	9305      	str	r3, [sp, #20]
    e600:	e6d7      	b.n	e3b2 <_strtod_l+0x9fa>
    e602:	4670      	mov	r0, lr
    e604:	e6ae      	b.n	e364 <_strtod_l+0x9ac>
    e606:	4973      	ldr	r1, [pc, #460]	; (e7d4 <_strtod_l+0xe1c>)
    e608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    e60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e610:	e9d1 0100 	ldrd	r0, r1, [r1]
    e614:	f7fe fbee 	bl	cdf4 <__aeabi_dmul>
    e618:	4680      	mov	r8, r0
    e61a:	4689      	mov	r9, r1
    e61c:	e4e1      	b.n	dfe2 <_strtod_l+0x62a>
    e61e:	ed9f 7b66 	vldr	d7, [pc, #408]	; e7b8 <_strtod_l+0xe00>
    e622:	2400      	movs	r4, #0
    e624:	4d6c      	ldr	r5, [pc, #432]	; (e7d8 <_strtod_l+0xe20>)
    e626:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
    e62a:	e5a4      	b.n	e176 <_strtod_l+0x7be>
    e62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e62e:	4656      	mov	r6, sl
    e630:	46ca      	mov	sl, r9
    e632:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e636:	2b00      	cmp	r3, #0
    e638:	f000 80ab 	beq.w	e792 <_strtod_l+0xdda>
    e63c:	4b67      	ldr	r3, [pc, #412]	; (e7dc <_strtod_l+0xe24>)
    e63e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    e642:	f3c5 0113 	ubfx	r1, r5, #0, #20
    e646:	462a      	mov	r2, r5
    e648:	4299      	cmp	r1, r3
    e64a:	f000 80cd 	beq.w	e7e8 <_strtod_l+0xe30>
    e64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e650:	2b00      	cmp	r3, #0
    e652:	f000 80a7 	beq.w	e7a4 <_strtod_l+0xdec>
    e656:	9a05      	ldr	r2, [sp, #20]
    e658:	4213      	tst	r3, r2
    e65a:	d010      	beq.n	e67e <_strtod_l+0xcc6>
    e65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e65e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e664:	2b00      	cmp	r3, #0
    e666:	f000 80e2 	beq.w	e82e <_strtod_l+0xe76>
    e66a:	f018 fb71 	bl	26d50 <sulp>
    e66e:	4602      	mov	r2, r0
    e670:	460b      	mov	r3, r1
    e672:	4640      	mov	r0, r8
    e674:	4649      	mov	r1, r9
    e676:	f7fd fde9 	bl	c24c <__adddf3>
    e67a:	4680      	mov	r8, r0
    e67c:	4689      	mov	r9, r1
    e67e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e680:	b19b      	cbz	r3, e6aa <_strtod_l+0xcf2>
    e682:	2300      	movs	r3, #0
    e684:	4a56      	ldr	r2, [pc, #344]	; (e7e0 <_strtod_l+0xe28>)
    e686:	4640      	mov	r0, r8
    e688:	4649      	mov	r1, r9
    e68a:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
    e68e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    e692:	f7fe fbaf 	bl	cdf4 <__aeabi_dmul>
    e696:	4603      	mov	r3, r0
    e698:	4680      	mov	r8, r0
    e69a:	4689      	mov	r9, r1
    e69c:	430b      	orrs	r3, r1
    e69e:	d104      	bne.n	e6aa <_strtod_l+0xcf2>
    e6a0:	2322      	movs	r3, #34	; 0x22
    e6a2:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6a4:	f8cb 3000 	str.w	r3, [fp]
    e6a8:	e51b      	b.n	e0e2 <_strtod_l+0x72a>
    e6aa:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6ac:	e519      	b.n	e0e2 <_strtod_l+0x72a>
    e6ae:	f1c8 080f 	rsb	r8, r8, #15
    e6b2:	4c48      	ldr	r4, [pc, #288]	; (e7d4 <_strtod_l+0xe1c>)
    e6b4:	eb04 01c8 	add.w	r1, r4, r8, lsl #3
    e6b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
    e6c0:	f7fe fb98 	bl	cdf4 <__aeabi_dmul>
    e6c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6c6:	eba3 0808 	sub.w	r8, r3, r8
    e6ca:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
    e6ce:	e9d4 2300 	ldrd	r2, r3, [r4]
    e6d2:	f7fe fb8f 	bl	cdf4 <__aeabi_dmul>
    e6d6:	4680      	mov	r8, r0
    e6d8:	4689      	mov	r9, r1
    e6da:	e482      	b.n	dfe2 <_strtod_l+0x62a>
    e6dc:	2000      	movs	r0, #0
    e6de:	e4a5      	b.n	e02c <_strtod_l+0x674>
    e6e0:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    e6e4:	9305      	str	r3, [sp, #20]
    e6e6:	2300      	movs	r3, #0
    e6e8:	930b      	str	r3, [sp, #44]	; 0x2c
    e6ea:	f7ff ba43 	b.w	db74 <_strtod_l+0x1bc>
    e6ee:	2322      	movs	r3, #34	; 0x22
    e6f0:	2200      	movs	r2, #0
    e6f2:	9505      	str	r5, [sp, #20]
    e6f4:	9204      	str	r2, [sp, #16]
    e6f6:	f8cb 3000 	str.w	r3, [fp]
    e6fa:	e660      	b.n	e3be <_strtod_l+0xa06>
    e6fc:	a81d      	add	r0, sp, #116	; 0x74
    e6fe:	aa20      	add	r2, sp, #128	; 0x80
    e700:	4938      	ldr	r1, [pc, #224]	; (e7e4 <_strtod_l+0xe2c>)
    e702:	f01c f847 	bl	2a794 <__hexnan>
    e706:	2805      	cmp	r0, #5
    e708:	f47f ac00 	bne.w	df0c <_strtod_l+0x554>
    e70c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e70e:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    e712:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    e716:	9305      	str	r3, [sp, #20]
    e718:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e71a:	9304      	str	r3, [sp, #16]
    e71c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e720:	e45f      	b.n	dfe2 <_strtod_l+0x62a>
    e722:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e724:	4656      	mov	r6, sl
    e726:	46ca      	mov	sl, r9
    e728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e72c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e730:	4303      	orrs	r3, r0
    e732:	d1a4      	bne.n	e67e <_strtod_l+0xcc6>
    e734:	f3c1 0313 	ubfx	r3, r1, #0, #20
    e738:	460c      	mov	r4, r1
    e73a:	2b00      	cmp	r3, #0
    e73c:	d19f      	bne.n	e67e <_strtod_l+0xcc6>
    e73e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    e742:	0d1b      	lsrs	r3, r3, #20
    e744:	051b      	lsls	r3, r3, #20
    e746:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e74a:	d998      	bls.n	e67e <_strtod_l+0xcc6>
    e74c:	6973      	ldr	r3, [r6, #20]
    e74e:	b913      	cbnz	r3, e756 <_strtod_l+0xd9e>
    e750:	6933      	ldr	r3, [r6, #16]
    e752:	2b01      	cmp	r3, #1
    e754:	dd93      	ble.n	e67e <_strtod_l+0xcc6>
    e756:	4631      	mov	r1, r6
    e758:	2201      	movs	r2, #1
    e75a:	4658      	mov	r0, fp
    e75c:	f01c fc50 	bl	2b000 <__lshift>
    e760:	4639      	mov	r1, r7
    e762:	4606      	mov	r6, r0
    e764:	f01c fcb4 	bl	2b0d0 <__mcmp>
    e768:	2800      	cmp	r0, #0
    e76a:	dd88      	ble.n	e67e <_strtod_l+0xcc6>
    e76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e76e:	2b00      	cmp	r3, #0
    e770:	f040 8084 	bne.w	e87c <_strtod_l+0xec4>
    e774:	4b13      	ldr	r3, [pc, #76]	; (e7c4 <_strtod_l+0xe0c>)
    e776:	4023      	ands	r3, r4
    e778:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    e77c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    e780:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    e784:	9305      	str	r3, [sp, #20]
    e786:	f04f 33ff 	mov.w	r3, #4294967295
    e78a:	9304      	str	r3, [sp, #16]
    e78c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e790:	e775      	b.n	e67e <_strtod_l+0xcc6>
    e792:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e796:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e79a:	4614      	mov	r4, r2
    e79c:	430b      	orrs	r3, r1
    e79e:	f47f af56 	bne.w	e64e <_strtod_l+0xc96>
    e7a2:	e7e3      	b.n	e76c <_strtod_l+0xdb4>
    e7a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7a6:	9a04      	ldr	r2, [sp, #16]
    e7a8:	4213      	tst	r3, r2
    e7aa:	f43f af68 	beq.w	e67e <_strtod_l+0xcc6>
    e7ae:	e755      	b.n	e65c <_strtod_l+0xca4>
    e7b0:	4b03      	ldr	r3, [pc, #12]	; (e7c0 <_strtod_l+0xe08>)
    e7b2:	2700      	movs	r7, #0
    e7b4:	930b      	str	r3, [sp, #44]	; 0x2c
    e7b6:	e6c4      	b.n	e542 <_strtod_l+0xb8a>
    e7b8:	00000000 	.word	0x00000000
    e7bc:	bfe00000 	.word	0xbfe00000
    e7c0:	0002ed00 	.word	0x0002ed00
    e7c4:	7ff00000 	.word	0x7ff00000
    e7c8:	7ca00000 	.word	0x7ca00000
    e7cc:	7c900000 	.word	0x7c900000
    e7d0:	7fefffff 	.word	0x7fefffff
    e7d4:	0002ed28 	.word	0x0002ed28
    e7d8:	3fe00000 	.word	0x3fe00000
    e7dc:	000fffff 	.word	0x000fffff
    e7e0:	39500000 	.word	0x39500000
    e7e4:	0002f4f0 	.word	0x0002f4f0
    e7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e7ea:	9904      	ldr	r1, [sp, #16]
    e7ec:	2b00      	cmp	r3, #0
    e7ee:	d039      	beq.n	e864 <_strtod_l+0xeac>
    e7f0:	4b2f      	ldr	r3, [pc, #188]	; (e8b0 <_strtod_l+0xef8>)
    e7f2:	402b      	ands	r3, r5
    e7f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    e7f8:	d834      	bhi.n	e864 <_strtod_l+0xeac>
    e7fa:	0d1b      	lsrs	r3, r3, #20
    e7fc:	f04f 30ff 	mov.w	r0, #4294967295
    e800:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    e804:	fa00 f303 	lsl.w	r3, r0, r3
    e808:	4299      	cmp	r1, r3
    e80a:	f47f af20 	bne.w	e64e <_strtod_l+0xc96>
    e80e:	4b29      	ldr	r3, [pc, #164]	; (e8b4 <_strtod_l+0xefc>)
    e810:	429a      	cmp	r2, r3
    e812:	d102      	bne.n	e81a <_strtod_l+0xe62>
    e814:	3101      	adds	r1, #1
    e816:	f43f ac5a 	beq.w	e0ce <_strtod_l+0x716>
    e81a:	4b25      	ldr	r3, [pc, #148]	; (e8b0 <_strtod_l+0xef8>)
    e81c:	4013      	ands	r3, r2
    e81e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    e822:	9305      	str	r3, [sp, #20]
    e824:	2300      	movs	r3, #0
    e826:	9304      	str	r3, [sp, #16]
    e828:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e82c:	e727      	b.n	e67e <_strtod_l+0xcc6>
    e82e:	f018 fa8f 	bl	26d50 <sulp>
    e832:	4602      	mov	r2, r0
    e834:	460b      	mov	r3, r1
    e836:	4640      	mov	r0, r8
    e838:	4649      	mov	r1, r9
    e83a:	f7fd fd05 	bl	c248 <__aeabi_dsub>
    e83e:	2200      	movs	r2, #0
    e840:	2300      	movs	r3, #0
    e842:	4680      	mov	r8, r0
    e844:	4689      	mov	r9, r1
    e846:	f7fd ff0d 	bl	c664 <__aeabi_dcmpeq>
    e84a:	2800      	cmp	r0, #0
    e84c:	f43f af17 	beq.w	e67e <_strtod_l+0xcc6>
    e850:	e61f      	b.n	e492 <_strtod_l+0xada>
    e852:	f04f 32ff 	mov.w	r2, #4294967295
    e856:	fa02 f303 	lsl.w	r3, r2, r3
    e85a:	9a04      	ldr	r2, [sp, #16]
    e85c:	401a      	ands	r2, r3
    e85e:	9204      	str	r2, [sp, #16]
    e860:	f7ff bbaf 	b.w	dfc2 <_strtod_l+0x60a>
    e864:	f04f 33ff 	mov.w	r3, #4294967295
    e868:	e7ce      	b.n	e808 <_strtod_l+0xe50>
    e86a:	3b20      	subs	r3, #32
    e86c:	f04f 31ff 	mov.w	r1, #4294967295
    e870:	fa01 f303 	lsl.w	r3, r1, r3
    e874:	4013      	ands	r3, r2
    e876:	9305      	str	r3, [sp, #20]
    e878:	f7ff bba3 	b.w	dfc2 <_strtod_l+0x60a>
    e87c:	4b0c      	ldr	r3, [pc, #48]	; (e8b0 <_strtod_l+0xef8>)
    e87e:	4023      	ands	r3, r4
    e880:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e884:	f73f af78 	bgt.w	e778 <_strtod_l+0xdc0>
    e888:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    e88c:	f73f aef9 	bgt.w	e682 <_strtod_l+0xcca>
    e890:	e5ff      	b.n	e492 <_strtod_l+0xada>
    e892:	4623      	mov	r3, r4
    e894:	4634      	mov	r4, r6
    e896:	e5e5      	b.n	e464 <_strtod_l+0xaac>
    e898:	f04f 0e00 	mov.w	lr, #0
    e89c:	4675      	mov	r5, lr
    e89e:	46f1      	mov	r9, lr
    e8a0:	4670      	mov	r0, lr
    e8a2:	4674      	mov	r4, lr
    e8a4:	46f4      	mov	ip, lr
    e8a6:	f8cd e020 	str.w	lr, [sp, #32]
    e8aa:	f7ff ba7e 	b.w	ddaa <_strtod_l+0x3f2>
    e8ae:	bf00      	nop
    e8b0:	7ff00000 	.word	0x7ff00000
    e8b4:	7fefffff 	.word	0x7fefffff

0000e8b8 <_svfprintf_r>:
    e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8bc:	ed2d 8b08 	vpush	{d8-d11}
    e8c0:	b0d1      	sub	sp, #324	; 0x144
    e8c2:	468b      	mov	fp, r1
    e8c4:	4617      	mov	r7, r2
    e8c6:	4681      	mov	r9, r0
    e8c8:	9309      	str	r3, [sp, #36]	; 0x24
    e8ca:	f01c f849 	bl	2a960 <_localeconv_r>
    e8ce:	6803      	ldr	r3, [r0, #0]
    e8d0:	4618      	mov	r0, r3
    e8d2:	9311      	str	r3, [sp, #68]	; 0x44
    e8d4:	f017 ff86 	bl	267e4 <strlen>
    e8d8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    e8dc:	9010      	str	r0, [sp, #64]	; 0x40
    e8de:	061c      	lsls	r4, r3, #24
    e8e0:	d504      	bpl.n	e8ec <_svfprintf_r+0x34>
    e8e2:	f8db 3010 	ldr.w	r3, [fp, #16]
    e8e6:	2b00      	cmp	r3, #0
    e8e8:	f000 87f2 	beq.w	f8d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe70>
    e8ec:	2300      	movs	r3, #0
    e8ee:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    e8f2:	ee09 9a10 	vmov	s18, r9
    e8f6:	ee09 ba90 	vmov	s19, fp
    e8fa:	930c      	str	r3, [sp, #48]	; 0x30
    e8fc:	9326      	str	r3, [sp, #152]	; 0x98
    e8fe:	9312      	str	r3, [sp, #72]	; 0x48
    e900:	9314      	str	r3, [sp, #80]	; 0x50
    e902:	9317      	str	r3, [sp, #92]	; 0x5c
    e904:	9305      	str	r3, [sp, #20]
    e906:	9325      	str	r3, [sp, #148]	; 0x94
    e908:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    e90c:	ed9f 7b9c 	vldr	d7, [pc, #624]	; eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    e910:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    e914:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    e918:	783b      	ldrb	r3, [r7, #0]
    e91a:	463c      	mov	r4, r7
    e91c:	b1e3      	cbz	r3, e958 <_svfprintf_r+0xa0>
    e91e:	2b25      	cmp	r3, #37	; 0x25
    e920:	d01a      	beq.n	e958 <_svfprintf_r+0xa0>
    e922:	4625      	mov	r5, r4
    e924:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e928:	b10b      	cbz	r3, e92e <_svfprintf_r+0x76>
    e92a:	2b25      	cmp	r3, #37	; 0x25
    e92c:	d1f9      	bne.n	e922 <_svfprintf_r+0x6a>
    e92e:	1be6      	subs	r6, r4, r7
    e930:	d012      	beq.n	e958 <_svfprintf_r+0xa0>
    e932:	f8c8 7000 	str.w	r7, [r8]
    e936:	f8c8 6004 	str.w	r6, [r8, #4]
    e93a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e93e:	3301      	adds	r3, #1
    e940:	4432      	add	r2, r6
    e942:	2b07      	cmp	r3, #7
    e944:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e948:	f300 810b 	bgt.w	eb62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x102>
    e94c:	f108 0808 	add.w	r8, r8, #8
    e950:	9b05      	ldr	r3, [sp, #20]
    e952:	4433      	add	r3, r6
    e954:	9305      	str	r3, [sp, #20]
    e956:	786b      	ldrb	r3, [r5, #1]
    e958:	2b00      	cmp	r3, #0
    e95a:	f001 819e 	beq.w	fc9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x123a>
    e95e:	2300      	movs	r3, #0
    e960:	1c67      	adds	r7, r4, #1
    e962:	f894 9001 	ldrb.w	r9, [r4, #1]
    e966:	f04f 3aff 	mov.w	sl, #4294967295
    e96a:	242b      	movs	r4, #43	; 0x2b
    e96c:	9306      	str	r3, [sp, #24]
    e96e:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    e972:	9303      	str	r3, [sp, #12]
    e974:	3701      	adds	r7, #1
    e976:	f1a9 0320 	sub.w	r3, r9, #32
    e97a:	2b5a      	cmp	r3, #90	; 0x5a
    e97c:	f200 8104 	bhi.w	eb88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x128>
    e980:	e8df f013 	tbh	[pc, r3, lsl #1]
    e984:	0102006a 	.word	0x0102006a
    e988:	02820102 	.word	0x02820102
    e98c:	01020102 	.word	0x01020102
    e990:	025e0102 	.word	0x025e0102
    e994:	01020102 	.word	0x01020102
    e998:	02380226 	.word	0x02380226
    e99c:	02310102 	.word	0x02310102
    e9a0:	01020244 	.word	0x01020244
    e9a4:	005b023d 	.word	0x005b023d
    e9a8:	005b005b 	.word	0x005b005b
    e9ac:	005b005b 	.word	0x005b005b
    e9b0:	005b005b 	.word	0x005b005b
    e9b4:	005b005b 	.word	0x005b005b
    e9b8:	01020102 	.word	0x01020102
    e9bc:	01020102 	.word	0x01020102
    e9c0:	01020102 	.word	0x01020102
    e9c4:	01890102 	.word	0x01890102
    e9c8:	01f10102 	.word	0x01f10102
    e9cc:	01890079 	.word	0x01890079
    e9d0:	01890189 	.word	0x01890189
    e9d4:	01020102 	.word	0x01020102
    e9d8:	01020102 	.word	0x01020102
    e9dc:	01020299 	.word	0x01020299
    e9e0:	00a70102 	.word	0x00a70102
    e9e4:	01020102 	.word	0x01020102
    e9e8:	02010102 	.word	0x02010102
    e9ec:	02890102 	.word	0x02890102
    e9f0:	01020102 	.word	0x01020102
    e9f4:	01020784 	.word	0x01020784
    e9f8:	01020102 	.word	0x01020102
    e9fc:	01020102 	.word	0x01020102
    ea00:	01020102 	.word	0x01020102
    ea04:	01890102 	.word	0x01890102
    ea08:	01f10102 	.word	0x01f10102
    ea0c:	0189007d 	.word	0x0189007d
    ea10:	01890189 	.word	0x01890189
    ea14:	007d02d4 	.word	0x007d02d4
    ea18:	01020072 	.word	0x01020072
    ea1c:	010202c9 	.word	0x010202c9
    ea20:	00ab02b2 	.word	0x00ab02b2
    ea24:	007202a0 	.word	0x007202a0
    ea28:	02010102 	.word	0x02010102
    ea2c:	0780006f 	.word	0x0780006f
    ea30:	01020102 	.word	0x01020102
    ea34:	0102075f 	.word	0x0102075f
    ea38:	006f      	.short	0x006f
    ea3a:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea3e:	2200      	movs	r2, #0
    ea40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ea44:	f817 9b01 	ldrb.w	r9, [r7], #1
    ea48:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    ea4c:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea50:	2b09      	cmp	r3, #9
    ea52:	d9f5      	bls.n	ea40 <_svfprintf_r+0x188>
    ea54:	9206      	str	r2, [sp, #24]
    ea56:	e78e      	b.n	e976 <_svfprintf_r+0xbe>
    ea58:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
    ea5c:	2b00      	cmp	r3, #0
    ea5e:	f000 862b 	beq.w	f6b8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc58>
    ea62:	f897 9000 	ldrb.w	r9, [r7]
    ea66:	e785      	b.n	e974 <_svfprintf_r+0xbc>
    ea68:	9b03      	ldr	r3, [sp, #12]
    ea6a:	f897 9000 	ldrb.w	r9, [r7]
    ea6e:	f043 0320 	orr.w	r3, r3, #32
    ea72:	9303      	str	r3, [sp, #12]
    ea74:	e77e      	b.n	e974 <_svfprintf_r+0xbc>
    ea76:	9b03      	ldr	r3, [sp, #12]
    ea78:	f043 0310 	orr.w	r3, r3, #16
    ea7c:	9303      	str	r3, [sp, #12]
    ea7e:	9b03      	ldr	r3, [sp, #12]
    ea80:	0698      	lsls	r0, r3, #26
    ea82:	f140 815f 	bpl.w	ed44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e4>
    ea86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea88:	3307      	adds	r3, #7
    ea8a:	f023 0307 	bic.w	r3, r3, #7
    ea8e:	4619      	mov	r1, r3
    ea90:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    ea94:	4614      	mov	r4, r2
    ea96:	461d      	mov	r5, r3
    ea98:	9109      	str	r1, [sp, #36]	; 0x24
    ea9a:	2a00      	cmp	r2, #0
    ea9c:	f173 0300 	sbcs.w	r3, r3, #0
    eaa0:	f2c0 85c9 	blt.w	f636 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd6>
    eaa4:	f1ba 3fff 	cmp.w	sl, #4294967295
    eaa8:	f000 8496 	beq.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eaac:	9b03      	ldr	r3, [sp, #12]
    eaae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    eab2:	9303      	str	r3, [sp, #12]
    eab4:	f1ba 0f00 	cmp.w	sl, #0
    eab8:	f040 848e 	bne.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eabc:	ea54 0305 	orrs.w	r3, r4, r5
    eac0:	bf14      	ite	ne
    eac2:	2301      	movne	r3, #1
    eac4:	2300      	moveq	r3, #0
    eac6:	f040 8487 	bne.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eaca:	469a      	mov	sl, r3
    eacc:	ae50      	add	r6, sp, #320	; 0x140
    eace:	9307      	str	r3, [sp, #28]
    ead0:	e036      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    ead2:	9b03      	ldr	r3, [sp, #12]
    ead4:	f043 0310 	orr.w	r3, r3, #16
    ead8:	9303      	str	r3, [sp, #12]
    eada:	9b03      	ldr	r3, [sp, #12]
    eadc:	069d      	lsls	r5, r3, #26
    eade:	f140 8122 	bpl.w	ed26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c6>
    eae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eae4:	3307      	adds	r3, #7
    eae6:	f023 0307 	bic.w	r3, r3, #7
    eaea:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    eaee:	9309      	str	r3, [sp, #36]	; 0x24
    eaf0:	9b03      	ldr	r3, [sp, #12]
    eaf2:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    eaf6:	2300      	movs	r3, #0
    eaf8:	2200      	movs	r2, #0
    eafa:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    eafe:	f1ba 3fff 	cmp.w	sl, #4294967295
    eb02:	f000 8319 	beq.w	f138 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d8>
    eb06:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
    eb0a:	9203      	str	r2, [sp, #12]
    eb0c:	ea54 0205 	orrs.w	r2, r4, r5
    eb10:	f040 8310 	bne.w	f134 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d4>
    eb14:	f1ba 0200 	subs.w	r2, sl, #0
    eb18:	bf18      	it	ne
    eb1a:	2201      	movne	r2, #1
    eb1c:	f1ba 0f00 	cmp.w	sl, #0
    eb20:	f040 8308 	bne.w	f134 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d4>
    eb24:	2b00      	cmp	r3, #0
    eb26:	f040 8452 	bne.w	f3ce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x96e>
    eb2a:	f01b 0201 	ands.w	r2, fp, #1
    eb2e:	9207      	str	r2, [sp, #28]
    eb30:	f000 8504 	beq.w	f53c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xadc>
    eb34:	2230      	movs	r2, #48	; 0x30
    eb36:	469a      	mov	sl, r3
    eb38:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    eb3c:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    eb40:	9907      	ldr	r1, [sp, #28]
    eb42:	2300      	movs	r3, #0
    eb44:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    eb48:	4551      	cmp	r1, sl
    eb4a:	9308      	str	r3, [sp, #32]
    eb4c:	930d      	str	r3, [sp, #52]	; 0x34
    eb4e:	bfb8      	it	lt
    eb50:	4651      	movlt	r1, sl
    eb52:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    eb56:	9104      	str	r1, [sp, #16]
    eb58:	b352      	cbz	r2, ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    eb5a:	9b04      	ldr	r3, [sp, #16]
    eb5c:	3301      	adds	r3, #1
    eb5e:	9304      	str	r3, [sp, #16]
    eb60:	e026      	b.n	ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    eb62:	aa24      	add	r2, sp, #144	; 0x90
    eb64:	ee19 1a90 	vmov	r1, s19
    eb68:	ee19 0a10 	vmov	r0, s18
    eb6c:	f01c ff7c 	bl	2ba68 <__ssprint_r>
    eb70:	2800      	cmp	r0, #0
    eb72:	f041 83eb 	bne.w	1034c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x34c>
    eb76:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    eb7a:	e6e9      	b.n	e950 <_svfprintf_r+0x98>
    eb7c:	f3af 8000 	nop.w
	...
    eb88:	f1b9 0f00 	cmp.w	r9, #0
    eb8c:	f001 8085 	beq.w	fc9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x123a>
    eb90:	2201      	movs	r2, #1
    eb92:	2300      	movs	r3, #0
    eb94:	ae37      	add	r6, sp, #220	; 0xdc
    eb96:	f88d 90dc 	strb.w	r9, [sp, #220]	; 0xdc
    eb9a:	4611      	mov	r1, r2
    eb9c:	9204      	str	r2, [sp, #16]
    eb9e:	461a      	mov	r2, r3
    eba0:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    eba4:	9107      	str	r1, [sp, #28]
    eba6:	4692      	mov	sl, r2
    eba8:	9208      	str	r2, [sp, #32]
    ebaa:	920d      	str	r2, [sp, #52]	; 0x34
    ebac:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    ebb0:	9b03      	ldr	r3, [sp, #12]
    ebb2:	f013 0302 	ands.w	r3, r3, #2
    ebb6:	d002      	beq.n	ebbe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15e>
    ebb8:	9904      	ldr	r1, [sp, #16]
    ebba:	3102      	adds	r1, #2
    ebbc:	9104      	str	r1, [sp, #16]
    ebbe:	9903      	ldr	r1, [sp, #12]
    ebc0:	f011 0b84 	ands.w	fp, r1, #132	; 0x84
    ebc4:	d105      	bne.n	ebd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x172>
    ebc6:	9906      	ldr	r1, [sp, #24]
    ebc8:	9804      	ldr	r0, [sp, #16]
    ebca:	1a0d      	subs	r5, r1, r0
    ebcc:	2d00      	cmp	r5, #0
    ebce:	f300 8356 	bgt.w	f27e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x81e>
    ebd2:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ebd4:	b182      	cbz	r2, ebf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x198>
    ebd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
    ebd8:	2101      	movs	r1, #1
    ebda:	3401      	adds	r4, #1
    ebdc:	f10d 0073 	add.w	r0, sp, #115	; 0x73
    ebe0:	440a      	add	r2, r1
    ebe2:	f8c8 1004 	str.w	r1, [r8, #4]
    ebe6:	9426      	str	r4, [sp, #152]	; 0x98
    ebe8:	2a07      	cmp	r2, #7
    ebea:	f8c8 0000 	str.w	r0, [r8]
    ebee:	9225      	str	r2, [sp, #148]	; 0x94
    ebf0:	f300 838f 	bgt.w	f312 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8b2>
    ebf4:	f108 0808 	add.w	r8, r8, #8
    ebf8:	b17b      	cbz	r3, ec1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ba>
    ebfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ebfc:	3402      	adds	r4, #2
    ebfe:	a91d      	add	r1, sp, #116	; 0x74
    ec00:	2202      	movs	r2, #2
    ec02:	3301      	adds	r3, #1
    ec04:	9426      	str	r4, [sp, #152]	; 0x98
    ec06:	f8c8 1000 	str.w	r1, [r8]
    ec0a:	2b07      	cmp	r3, #7
    ec0c:	9325      	str	r3, [sp, #148]	; 0x94
    ec0e:	f8c8 2004 	str.w	r2, [r8, #4]
    ec12:	f300 838e 	bgt.w	f332 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8d2>
    ec16:	f108 0808 	add.w	r8, r8, #8
    ec1a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
    ec1e:	f000 81f9 	beq.w	f014 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5b4>
    ec22:	9b07      	ldr	r3, [sp, #28]
    ec24:	ebaa 0a03 	sub.w	sl, sl, r3
    ec28:	f1ba 0f00 	cmp.w	sl, #0
    ec2c:	f300 8241 	bgt.w	f0b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x652>
    ec30:	9b03      	ldr	r3, [sp, #12]
    ec32:	05d8      	lsls	r0, r3, #23
    ec34:	f100 818e 	bmi.w	ef54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4f4>
    ec38:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec3a:	9a07      	ldr	r2, [sp, #28]
    ec3c:	3301      	adds	r3, #1
    ec3e:	f8c8 6000 	str.w	r6, [r8]
    ec42:	4414      	add	r4, r2
    ec44:	f8c8 2004 	str.w	r2, [r8, #4]
    ec48:	2b07      	cmp	r3, #7
    ec4a:	9325      	str	r3, [sp, #148]	; 0x94
    ec4c:	9426      	str	r4, [sp, #152]	; 0x98
    ec4e:	f300 8309 	bgt.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    ec52:	f108 0808 	add.w	r8, r8, #8
    ec56:	9b03      	ldr	r3, [sp, #12]
    ec58:	0759      	lsls	r1, r3, #29
    ec5a:	d505      	bpl.n	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    ec5c:	9b06      	ldr	r3, [sp, #24]
    ec5e:	9a04      	ldr	r2, [sp, #16]
    ec60:	1a9d      	subs	r5, r3, r2
    ec62:	2d00      	cmp	r5, #0
    ec64:	f300 8373 	bgt.w	f34e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8ee>
    ec68:	9904      	ldr	r1, [sp, #16]
    ec6a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    ec6e:	428a      	cmp	r2, r1
    ec70:	bfac      	ite	ge
    ec72:	189b      	addge	r3, r3, r2
    ec74:	185b      	addlt	r3, r3, r1
    ec76:	9305      	str	r3, [sp, #20]
    ec78:	2c00      	cmp	r4, #0
    ec7a:	f040 8297 	bne.w	f1ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74c>
    ec7e:	2300      	movs	r3, #0
    ec80:	9325      	str	r3, [sp, #148]	; 0x94
    ec82:	9b08      	ldr	r3, [sp, #32]
    ec84:	b123      	cbz	r3, ec90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x230>
    ec86:	9908      	ldr	r1, [sp, #32]
    ec88:	ee19 0a10 	vmov	r0, s18
    ec8c:	f01a ffca 	bl	29c24 <_free_r>
    ec90:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ec94:	e640      	b.n	e918 <_svfprintf_r+0x60>
    ec96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec98:	f04f 32ff 	mov.w	r2, #4294967295
    ec9c:	3307      	adds	r3, #7
    ec9e:	f023 0307 	bic.w	r3, r3, #7
    eca2:	ecb3 7b02 	vldmia	r3!, {d7}
    eca6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    ecaa:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    ecae:	9309      	str	r3, [sp, #36]	; 0x24
    ecb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    ecb4:	ee0a 4a10 	vmov	s20, r4
    ecb8:	ee0a 3a90 	vmov	s21, r3
    ecbc:	4ba1      	ldr	r3, [pc, #644]	; (ef44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e4>)
    ecbe:	eeb0 8a4a 	vmov.f32	s16, s20
    ecc2:	eef0 8a6a 	vmov.f32	s17, s21
    ecc6:	ec51 0b18 	vmov	r0, r1, d8
    ecca:	f7fe faa5 	bl	d218 <__aeabi_dcmpun>
    ecce:	2800      	cmp	r0, #0
    ecd0:	f040 8509 	bne.w	f6e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc86>
    ecd4:	f04f 32ff 	mov.w	r2, #4294967295
    ecd8:	4b9a      	ldr	r3, [pc, #616]	; (ef44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e4>)
    ecda:	ec51 0b18 	vmov	r0, r1, d8
    ecde:	f7fd fcd5 	bl	c68c <__aeabi_dcmple>
    ece2:	2800      	cmp	r0, #0
    ece4:	f040 84ff 	bne.w	f6e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc86>
    ece8:	2200      	movs	r2, #0
    ecea:	2300      	movs	r3, #0
    ecec:	4620      	mov	r0, r4
    ecee:	4629      	mov	r1, r5
    ecf0:	f7fd fcc2 	bl	c678 <__aeabi_dcmplt>
    ecf4:	2800      	cmp	r0, #0
    ecf6:	f041 80de 	bne.w	feb6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1456>
    ecfa:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    ecfe:	2103      	movs	r1, #3
    ed00:	4e91      	ldr	r6, [pc, #580]	; (ef48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e8>)
    ed02:	4b92      	ldr	r3, [pc, #584]	; (ef4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4ec>)
    ed04:	9104      	str	r1, [sp, #16]
    ed06:	9c03      	ldr	r4, [sp, #12]
    ed08:	2000      	movs	r0, #0
    ed0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    ed0e:	bfc8      	it	gt
    ed10:	461e      	movgt	r6, r3
    ed12:	9107      	str	r1, [sp, #28]
    ed14:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    ed18:	4682      	mov	sl, r0
    ed1a:	9008      	str	r0, [sp, #32]
    ed1c:	9403      	str	r4, [sp, #12]
    ed1e:	900d      	str	r0, [sp, #52]	; 0x34
    ed20:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    ed24:	e718      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    ed26:	9b03      	ldr	r3, [sp, #12]
    ed28:	06dc      	lsls	r4, r3, #27
    ed2a:	f100 84d5 	bmi.w	f6d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc78>
    ed2e:	9b03      	ldr	r3, [sp, #12]
    ed30:	0658      	lsls	r0, r3, #25
    ed32:	f140 87ef 	bpl.w	fd14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12b4>
    ed36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed38:	2500      	movs	r5, #0
    ed3a:	f853 4b04 	ldr.w	r4, [r3], #4
    ed3e:	b2a4      	uxth	r4, r4
    ed40:	9309      	str	r3, [sp, #36]	; 0x24
    ed42:	e6d5      	b.n	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    ed44:	9b03      	ldr	r3, [sp, #12]
    ed46:	06d9      	lsls	r1, r3, #27
    ed48:	f100 84bd 	bmi.w	f6c6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc66>
    ed4c:	9b03      	ldr	r3, [sp, #12]
    ed4e:	065a      	lsls	r2, r3, #25
    ed50:	f140 87d2 	bpl.w	fcf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1298>
    ed54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed56:	f853 4b04 	ldr.w	r4, [r3], #4
    ed5a:	b224      	sxth	r4, r4
    ed5c:	9309      	str	r3, [sp, #36]	; 0x24
    ed5e:	17e5      	asrs	r5, r4, #31
    ed60:	4622      	mov	r2, r4
    ed62:	462b      	mov	r3, r5
    ed64:	e699      	b.n	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ed66:	2201      	movs	r2, #1
    ed68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed6a:	2100      	movs	r1, #0
    ed6c:	ae37      	add	r6, sp, #220	; 0xdc
    ed6e:	4614      	mov	r4, r2
    ed70:	f853 0b04 	ldr.w	r0, [r3], #4
    ed74:	9204      	str	r2, [sp, #16]
    ed76:	460a      	mov	r2, r1
    ed78:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
    ed7c:	9407      	str	r4, [sp, #28]
    ed7e:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
    ed82:	9309      	str	r3, [sp, #36]	; 0x24
    ed84:	e70f      	b.n	eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    ed86:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ed88:	2500      	movs	r5, #0
    ed8a:	f854 6b04 	ldr.w	r6, [r4], #4
    ed8e:	f88d 5073 	strb.w	r5, [sp, #115]	; 0x73
    ed92:	2e00      	cmp	r6, #0
    ed94:	f000 8791 	beq.w	fcba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x125a>
    ed98:	f1ba 3fff 	cmp.w	sl, #4294967295
    ed9c:	f000 85a8 	beq.w	f8f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe90>
    eda0:	4652      	mov	r2, sl
    eda2:	4629      	mov	r1, r5
    eda4:	4630      	mov	r0, r6
    eda6:	f017 f8a1 	bl	25eec <memchr>
    edaa:	9008      	str	r0, [sp, #32]
    edac:	2800      	cmp	r0, #0
    edae:	f001 81eb 	beq.w	10188 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x188>
    edb2:	9b08      	ldr	r3, [sp, #32]
    edb4:	46aa      	mov	sl, r5
    edb6:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    edba:	1b9b      	subs	r3, r3, r6
    edbc:	9409      	str	r4, [sp, #36]	; 0x24
    edbe:	9508      	str	r5, [sp, #32]
    edc0:	9307      	str	r3, [sp, #28]
    edc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    edc6:	950d      	str	r5, [sp, #52]	; 0x34
    edc8:	9304      	str	r3, [sp, #16]
    edca:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    edce:	e6c3      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    edd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edd2:	f853 2b04 	ldr.w	r2, [r3], #4
    edd6:	2a00      	cmp	r2, #0
    edd8:	9206      	str	r2, [sp, #24]
    edda:	f280 845c 	bge.w	f696 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc36>
    edde:	9a06      	ldr	r2, [sp, #24]
    ede0:	9309      	str	r3, [sp, #36]	; 0x24
    ede2:	4252      	negs	r2, r2
    ede4:	9206      	str	r2, [sp, #24]
    ede6:	9b03      	ldr	r3, [sp, #12]
    ede8:	f897 9000 	ldrb.w	r9, [r7]
    edec:	f043 0304 	orr.w	r3, r3, #4
    edf0:	9303      	str	r3, [sp, #12]
    edf2:	e5bf      	b.n	e974 <_svfprintf_r+0xbc>
    edf4:	f897 9000 	ldrb.w	r9, [r7]
    edf8:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
    edfc:	e5ba      	b.n	e974 <_svfprintf_r+0xbc>
    edfe:	9b03      	ldr	r3, [sp, #12]
    ee00:	f897 9000 	ldrb.w	r9, [r7]
    ee04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ee08:	9303      	str	r3, [sp, #12]
    ee0a:	e5b3      	b.n	e974 <_svfprintf_r+0xbc>
    ee0c:	463a      	mov	r2, r7
    ee0e:	f812 9b01 	ldrb.w	r9, [r2], #1
    ee12:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    ee16:	f001 82d3 	beq.w	103c0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3c0>
    ee1a:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee1e:	4617      	mov	r7, r2
    ee20:	f04f 0a00 	mov.w	sl, #0
    ee24:	2b09      	cmp	r3, #9
    ee26:	f63f ada6 	bhi.w	e976 <_svfprintf_r+0xbe>
    ee2a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    ee2e:	f817 9b01 	ldrb.w	r9, [r7], #1
    ee32:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
    ee36:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee3a:	2b09      	cmp	r3, #9
    ee3c:	d9f5      	bls.n	ee2a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ca>
    ee3e:	e59a      	b.n	e976 <_svfprintf_r+0xbe>
    ee40:	ee19 0a10 	vmov	r0, s18
    ee44:	f01b fd8c 	bl	2a960 <_localeconv_r>
    ee48:	6843      	ldr	r3, [r0, #4]
    ee4a:	4618      	mov	r0, r3
    ee4c:	9316      	str	r3, [sp, #88]	; 0x58
    ee4e:	f017 fcc9 	bl	267e4 <strlen>
    ee52:	4603      	mov	r3, r0
    ee54:	ee19 0a10 	vmov	r0, s18
    ee58:	461d      	mov	r5, r3
    ee5a:	9315      	str	r3, [sp, #84]	; 0x54
    ee5c:	f01b fd80 	bl	2a960 <_localeconv_r>
    ee60:	6882      	ldr	r2, [r0, #8]
    ee62:	9217      	str	r2, [sp, #92]	; 0x5c
    ee64:	2d00      	cmp	r5, #0
    ee66:	f43f adfc 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee6a:	2a00      	cmp	r2, #0
    ee6c:	f43f adf9 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ee72:	781b      	ldrb	r3, [r3, #0]
    ee74:	2b00      	cmp	r3, #0
    ee76:	f43f adf4 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee7a:	9b03      	ldr	r3, [sp, #12]
    ee7c:	f897 9000 	ldrb.w	r9, [r7]
    ee80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ee84:	9303      	str	r3, [sp, #12]
    ee86:	e575      	b.n	e974 <_svfprintf_r+0xbc>
    ee88:	9b03      	ldr	r3, [sp, #12]
    ee8a:	f897 9000 	ldrb.w	r9, [r7]
    ee8e:	f043 0301 	orr.w	r3, r3, #1
    ee92:	9303      	str	r3, [sp, #12]
    ee94:	e56e      	b.n	e974 <_svfprintf_r+0xbc>
    ee96:	9b03      	ldr	r3, [sp, #12]
    ee98:	f043 0b10 	orr.w	fp, r3, #16
    ee9c:	f01b 0f20 	tst.w	fp, #32
    eea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eea2:	f000 83b2 	beq.w	f60a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbaa>
    eea6:	3207      	adds	r2, #7
    eea8:	2301      	movs	r3, #1
    eeaa:	f022 0207 	bic.w	r2, r2, #7
    eeae:	e8f2 4502 	ldrd	r4, r5, [r2], #8
    eeb2:	9209      	str	r2, [sp, #36]	; 0x24
    eeb4:	e620      	b.n	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    eeb6:	9b03      	ldr	r3, [sp, #12]
    eeb8:	f897 9000 	ldrb.w	r9, [r7]
    eebc:	f043 0308 	orr.w	r3, r3, #8
    eec0:	9303      	str	r3, [sp, #12]
    eec2:	e557      	b.n	e974 <_svfprintf_r+0xbc>
    eec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eec6:	f647 0130 	movw	r1, #30768	; 0x7830
    eeca:	9b03      	ldr	r3, [sp, #12]
    eecc:	f04f 0978 	mov.w	r9, #120	; 0x78
    eed0:	f852 4b04 	ldr.w	r4, [r2], #4
    eed4:	2500      	movs	r5, #0
    eed6:	f043 0b02 	orr.w	fp, r3, #2
    eeda:	4b1d      	ldr	r3, [pc, #116]	; (ef50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4f0>)
    eedc:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    eee0:	9312      	str	r3, [sp, #72]	; 0x48
    eee2:	2302      	movs	r3, #2
    eee4:	9209      	str	r2, [sp, #36]	; 0x24
    eee6:	e607      	b.n	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    eee8:	9b03      	ldr	r3, [sp, #12]
    eeea:	0699      	lsls	r1, r3, #26
    eeec:	f100 83d8 	bmi.w	f6a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc40>
    eef0:	9b03      	ldr	r3, [sp, #12]
    eef2:	06da      	lsls	r2, r3, #27
    eef4:	f100 86c9 	bmi.w	fc8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122a>
    eef8:	9b03      	ldr	r3, [sp, #12]
    eefa:	065b      	lsls	r3, r3, #25
    eefc:	f101 8009 	bmi.w	ff12 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14b2>
    ef00:	9b03      	ldr	r3, [sp, #12]
    ef02:	059e      	lsls	r6, r3, #22
    ef04:	f140 86c1 	bpl.w	fc8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122a>
    ef08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef0a:	9905      	ldr	r1, [sp, #20]
    ef0c:	f853 2b04 	ldr.w	r2, [r3], #4
    ef10:	7011      	strb	r1, [r2, #0]
    ef12:	9309      	str	r3, [sp, #36]	; 0x24
    ef14:	e500      	b.n	e918 <_svfprintf_r+0x60>
    ef16:	f897 9000 	ldrb.w	r9, [r7]
    ef1a:	9b03      	ldr	r3, [sp, #12]
    ef1c:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    ef20:	f000 84b7 	beq.w	f892 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe32>
    ef24:	f043 0310 	orr.w	r3, r3, #16
    ef28:	9303      	str	r3, [sp, #12]
    ef2a:	e523      	b.n	e974 <_svfprintf_r+0xbc>
    ef2c:	f897 9000 	ldrb.w	r9, [r7]
    ef30:	9b03      	ldr	r3, [sp, #12]
    ef32:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    ef36:	f000 84b4 	beq.w	f8a2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe42>
    ef3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef3e:	9303      	str	r3, [sp, #12]
    ef40:	e518      	b.n	e974 <_svfprintf_r+0xbc>
    ef42:	bf00      	nop
    ef44:	7fefffff 	.word	0x7fefffff
    ef48:	0002f504 	.word	0x0002f504
    ef4c:	0002f508 	.word	0x0002f508
    ef50:	0002f514 	.word	0x0002f514
    ef54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    ef58:	f340 8137 	ble.w	f1ca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76a>
    ef5c:	2200      	movs	r2, #0
    ef5e:	2300      	movs	r3, #0
    ef60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ef64:	f7fd fb7e 	bl	c664 <__aeabi_dcmpeq>
    ef68:	2800      	cmp	r0, #0
    ef6a:	f000 8247 	beq.w	f3fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x99c>
    ef6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef70:	2201      	movs	r2, #1
    ef72:	3401      	adds	r4, #1
    ef74:	49ca      	ldr	r1, [pc, #808]	; (f2a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x840>)
    ef76:	4413      	add	r3, r2
    ef78:	f8c8 2004 	str.w	r2, [r8, #4]
    ef7c:	9426      	str	r4, [sp, #152]	; 0x98
    ef7e:	2b07      	cmp	r3, #7
    ef80:	f8c8 1000 	str.w	r1, [r8]
    ef84:	9325      	str	r3, [sp, #148]	; 0x94
    ef86:	f300 85fe 	bgt.w	fb86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1126>
    ef8a:	f108 0808 	add.w	r8, r8, #8
    ef8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ef90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ef92:	4293      	cmp	r3, r2
    ef94:	f280 837a 	bge.w	f68c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc2c>
    ef98:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ef9c:	3301      	adds	r3, #1
    ef9e:	9911      	ldr	r1, [sp, #68]	; 0x44
    efa0:	4414      	add	r4, r2
    efa2:	f8c8 2004 	str.w	r2, [r8, #4]
    efa6:	2b07      	cmp	r3, #7
    efa8:	f8c8 1000 	str.w	r1, [r8]
    efac:	9426      	str	r4, [sp, #152]	; 0x98
    efae:	9325      	str	r3, [sp, #148]	; 0x94
    efb0:	f300 847f 	bgt.w	f8b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe52>
    efb4:	f108 0808 	add.w	r8, r8, #8
    efb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    efba:	1e5e      	subs	r6, r3, #1
    efbc:	2e00      	cmp	r6, #0
    efbe:	f77f ae4a 	ble.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    efc2:	2e10      	cmp	r6, #16
    efc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    efc6:	f340 85ef 	ble.w	fba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1148>
    efca:	f04f 0910 	mov.w	r9, #16
    efce:	4db5      	ldr	r5, [pc, #724]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    efd0:	ee19 aa10 	vmov	sl, s18
    efd4:	ee19 ba90 	vmov	fp, s19
    efd8:	e003      	b.n	efe2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x582>
    efda:	3e10      	subs	r6, #16
    efdc:	2e10      	cmp	r6, #16
    efde:	f340 85e4 	ble.w	fbaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114a>
    efe2:	3301      	adds	r3, #1
    efe4:	3410      	adds	r4, #16
    efe6:	f8c8 5000 	str.w	r5, [r8]
    efea:	f108 0808 	add.w	r8, r8, #8
    efee:	2b07      	cmp	r3, #7
    eff0:	f848 9c04 	str.w	r9, [r8, #-4]
    eff4:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    eff8:	ddef      	ble.n	efda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x57a>
    effa:	aa24      	add	r2, sp, #144	; 0x90
    effc:	4659      	mov	r1, fp
    effe:	4650      	mov	r0, sl
    f000:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f004:	f01c fd30 	bl	2ba68 <__ssprint_r>
    f008:	2800      	cmp	r0, #0
    f00a:	f041 804e 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
    f00e:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f012:	e7e2      	b.n	efda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x57a>
    f014:	9b06      	ldr	r3, [sp, #24]
    f016:	9a04      	ldr	r2, [sp, #16]
    f018:	eba3 0b02 	sub.w	fp, r3, r2
    f01c:	f1bb 0f00 	cmp.w	fp, #0
    f020:	f77f adff 	ble.w	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
    f024:	f1bb 0f10 	cmp.w	fp, #16
    f028:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f02a:	f341 8118 	ble.w	1025e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x25e>
    f02e:	4620      	mov	r0, r4
    f030:	9613      	str	r6, [sp, #76]	; 0x4c
    f032:	2310      	movs	r3, #16
    f034:	4d9b      	ldr	r5, [pc, #620]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    f036:	ee19 4a10 	vmov	r4, s18
    f03a:	ee19 6a90 	vmov	r6, s19
    f03e:	e004      	b.n	f04a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5ea>
    f040:	f1ab 0b10 	sub.w	fp, fp, #16
    f044:	f1bb 0f10 	cmp.w	fp, #16
    f048:	dd1d      	ble.n	f086 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x626>
    f04a:	3201      	adds	r2, #1
    f04c:	3010      	adds	r0, #16
    f04e:	f8c8 5000 	str.w	r5, [r8]
    f052:	f108 0808 	add.w	r8, r8, #8
    f056:	2a07      	cmp	r2, #7
    f058:	f848 3c04 	str.w	r3, [r8, #-4]
    f05c:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f060:	ddee      	ble.n	f040 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5e0>
    f062:	aa24      	add	r2, sp, #144	; 0x90
    f064:	4631      	mov	r1, r6
    f066:	4620      	mov	r0, r4
    f068:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f06c:	f01c fcfc 	bl	2ba68 <__ssprint_r>
    f070:	2800      	cmp	r0, #0
    f072:	f040 824c 	bne.w	f50e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaae>
    f076:	f1ab 0b10 	sub.w	fp, fp, #16
    f07a:	2310      	movs	r3, #16
    f07c:	f1bb 0f10 	cmp.w	fp, #16
    f080:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f084:	dce1      	bgt.n	f04a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5ea>
    f086:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f088:	4604      	mov	r4, r0
    f08a:	3201      	adds	r2, #1
    f08c:	445c      	add	r4, fp
    f08e:	f8c8 5000 	str.w	r5, [r8]
    f092:	2a07      	cmp	r2, #7
    f094:	f8c8 b004 	str.w	fp, [r8, #4]
    f098:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f09c:	f300 85d8 	bgt.w	fc50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11f0>
    f0a0:	9b07      	ldr	r3, [sp, #28]
    f0a2:	f108 0808 	add.w	r8, r8, #8
    f0a6:	ebaa 0a03 	sub.w	sl, sl, r3
    f0aa:	f1ba 0f00 	cmp.w	sl, #0
    f0ae:	f77f adbf 	ble.w	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f0b2:	f1ba 0f10 	cmp.w	sl, #16
    f0b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f0b8:	f340 8643 	ble.w	fd42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e2>
    f0bc:	4622      	mov	r2, r4
    f0be:	9613      	str	r6, [sp, #76]	; 0x4c
    f0c0:	f04f 0b10 	mov.w	fp, #16
    f0c4:	4d77      	ldr	r5, [pc, #476]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    f0c6:	ee19 4a10 	vmov	r4, s18
    f0ca:	ee19 6a90 	vmov	r6, s19
    f0ce:	e004      	b.n	f0da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67a>
    f0d0:	f1aa 0a10 	sub.w	sl, sl, #16
    f0d4:	f1ba 0f10 	cmp.w	sl, #16
    f0d8:	dd1c      	ble.n	f114 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6b4>
    f0da:	3301      	adds	r3, #1
    f0dc:	3210      	adds	r2, #16
    f0de:	f8c8 5000 	str.w	r5, [r8]
    f0e2:	f108 0808 	add.w	r8, r8, #8
    f0e6:	2b07      	cmp	r3, #7
    f0e8:	f848 bc04 	str.w	fp, [r8, #-4]
    f0ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f0f0:	ddee      	ble.n	f0d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x670>
    f0f2:	aa24      	add	r2, sp, #144	; 0x90
    f0f4:	4631      	mov	r1, r6
    f0f6:	4620      	mov	r0, r4
    f0f8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f0fc:	f01c fcb4 	bl	2ba68 <__ssprint_r>
    f100:	2800      	cmp	r0, #0
    f102:	f040 8204 	bne.w	f50e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaae>
    f106:	f1aa 0a10 	sub.w	sl, sl, #16
    f10a:	f1ba 0f10 	cmp.w	sl, #16
    f10e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f112:	dce2      	bgt.n	f0da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67a>
    f114:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f116:	4614      	mov	r4, r2
    f118:	3301      	adds	r3, #1
    f11a:	4454      	add	r4, sl
    f11c:	f8c8 5000 	str.w	r5, [r8]
    f120:	2b07      	cmp	r3, #7
    f122:	f8c8 a004 	str.w	sl, [r8, #4]
    f126:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f12a:	f300 825f 	bgt.w	f5ec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8c>
    f12e:	f108 0808 	add.w	r8, r8, #8
    f132:	e57d      	b.n	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f134:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f138:	2b01      	cmp	r3, #1
    f13a:	f000 814f 	beq.w	f3dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x97c>
    f13e:	2b02      	cmp	r3, #2
    f140:	ae50      	add	r6, sp, #320	; 0x140
    f142:	d114      	bne.n	f16e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70e>
    f144:	9812      	ldr	r0, [sp, #72]	; 0x48
    f146:	0923      	lsrs	r3, r4, #4
    f148:	f004 010f 	and.w	r1, r4, #15
    f14c:	092a      	lsrs	r2, r5, #4
    f14e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    f152:	4615      	mov	r5, r2
    f154:	461c      	mov	r4, r3
    f156:	5c43      	ldrb	r3, [r0, r1]
    f158:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f15c:	ea54 0305 	orrs.w	r3, r4, r5
    f160:	d1f1      	bne.n	f146 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6e6>
    f162:	ab50      	add	r3, sp, #320	; 0x140
    f164:	f8cd b00c 	str.w	fp, [sp, #12]
    f168:	1b9b      	subs	r3, r3, r6
    f16a:	9307      	str	r3, [sp, #28]
    f16c:	e4e8      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f16e:	08e2      	lsrs	r2, r4, #3
    f170:	f004 0307 	and.w	r3, r4, #7
    f174:	08e9      	lsrs	r1, r5, #3
    f176:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    f17a:	3330      	adds	r3, #48	; 0x30
    f17c:	460d      	mov	r5, r1
    f17e:	4614      	mov	r4, r2
    f180:	4632      	mov	r2, r6
    f182:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f186:	ea54 0105 	orrs.w	r1, r4, r5
    f18a:	d1f0      	bne.n	f16e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70e>
    f18c:	2b30      	cmp	r3, #48	; 0x30
    f18e:	d0e8      	beq.n	f162 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x702>
    f190:	f01b 0f01 	tst.w	fp, #1
    f194:	d0e5      	beq.n	f162 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x702>
    f196:	2330      	movs	r3, #48	; 0x30
    f198:	3a02      	subs	r2, #2
    f19a:	f8cd b00c 	str.w	fp, [sp, #12]
    f19e:	f806 3c01 	strb.w	r3, [r6, #-1]
    f1a2:	ab50      	add	r3, sp, #320	; 0x140
    f1a4:	4616      	mov	r6, r2
    f1a6:	1a9b      	subs	r3, r3, r2
    f1a8:	9307      	str	r3, [sp, #28]
    f1aa:	e4c9      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f1ac:	aa24      	add	r2, sp, #144	; 0x90
    f1ae:	ee19 1a90 	vmov	r1, s19
    f1b2:	ee19 0a10 	vmov	r0, s18
    f1b6:	f01c fc57 	bl	2ba68 <__ssprint_r>
    f1ba:	2800      	cmp	r0, #0
    f1bc:	f43f ad5f 	beq.w	ec7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21e>
    f1c0:	ee19 9a10 	vmov	r9, s18
    f1c4:	ee19 ba90 	vmov	fp, s19
    f1c8:	e1a3      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    f1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1cc:	2b01      	cmp	r3, #1
    f1ce:	f340 81b9 	ble.w	f544 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xae4>
    f1d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f1d4:	2201      	movs	r2, #1
    f1d6:	3401      	adds	r4, #1
    f1d8:	f8c8 6000 	str.w	r6, [r8]
    f1dc:	4413      	add	r3, r2
    f1de:	f8c8 2004 	str.w	r2, [r8, #4]
    f1e2:	9426      	str	r4, [sp, #152]	; 0x98
    f1e4:	2b07      	cmp	r3, #7
    f1e6:	9325      	str	r3, [sp, #148]	; 0x94
    f1e8:	f300 8241 	bgt.w	f66e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0e>
    f1ec:	f108 0808 	add.w	r8, r8, #8
    f1f0:	f103 0901 	add.w	r9, r3, #1
    f1f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f1f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f1f8:	4414      	add	r4, r2
    f1fa:	f1b9 0f07 	cmp.w	r9, #7
    f1fe:	f8c8 3000 	str.w	r3, [r8]
    f202:	f8c8 2004 	str.w	r2, [r8, #4]
    f206:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f20a:	f300 8220 	bgt.w	f64e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbee>
    f20e:	f108 0808 	add.w	r8, r8, #8
    f212:	2300      	movs	r3, #0
    f214:	2200      	movs	r2, #0
    f216:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f21a:	f7fd fa23 	bl	c664 <__aeabi_dcmpeq>
    f21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f220:	2800      	cmp	r0, #0
    f222:	f040 81b3 	bne.w	f58c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb2c>
    f226:	3b01      	subs	r3, #1
    f228:	f109 0901 	add.w	r9, r9, #1
    f22c:	3601      	adds	r6, #1
    f22e:	441c      	add	r4, r3
    f230:	f1b9 0f07 	cmp.w	r9, #7
    f234:	f8c8 6000 	str.w	r6, [r8]
    f238:	f8c8 3004 	str.w	r3, [r8, #4]
    f23c:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f240:	f300 8194 	bgt.w	f56c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0c>
    f244:	f108 0808 	add.w	r8, r8, #8
    f248:	9914      	ldr	r1, [sp, #80]	; 0x50
    f24a:	f109 0301 	add.w	r3, r9, #1
    f24e:	aa20      	add	r2, sp, #128	; 0x80
    f250:	440c      	add	r4, r1
    f252:	2b07      	cmp	r3, #7
    f254:	f8c8 1004 	str.w	r1, [r8, #4]
    f258:	f8c8 2000 	str.w	r2, [r8]
    f25c:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f260:	f77f acf7 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    f264:	aa24      	add	r2, sp, #144	; 0x90
    f266:	ee19 1a90 	vmov	r1, s19
    f26a:	ee19 0a10 	vmov	r0, s18
    f26e:	f01c fbfb 	bl	2ba68 <__ssprint_r>
    f272:	2800      	cmp	r0, #0
    f274:	d1a4      	bne.n	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f276:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f278:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f27c:	e4eb      	b.n	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f27e:	2d10      	cmp	r5, #16
    f280:	9926      	ldr	r1, [sp, #152]	; 0x98
    f282:	f340 87a0 	ble.w	101c6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1c6>
    f286:	9618      	str	r6, [sp, #96]	; 0x60
    f288:	2410      	movs	r4, #16
    f28a:	462e      	mov	r6, r5
    f28c:	9719      	str	r7, [sp, #100]	; 0x64
    f28e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f290:	4608      	mov	r0, r1
    f292:	ee19 5a10 	vmov	r5, s18
    f296:	ee19 7a90 	vmov	r7, s19
    f29a:	9313      	str	r3, [sp, #76]	; 0x4c
    f29c:	e007      	b.n	f2ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84e>
    f29e:	bf00      	nop
    f2a0:	0002f544 	.word	0x0002f544
    f2a4:	0002f558 	.word	0x0002f558
    f2a8:	3e10      	subs	r6, #16
    f2aa:	2e10      	cmp	r6, #16
    f2ac:	dd1b      	ble.n	f2e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x886>
    f2ae:	3201      	adds	r2, #1
    f2b0:	3010      	adds	r0, #16
    f2b2:	4bbe      	ldr	r3, [pc, #760]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f2b4:	f108 0808 	add.w	r8, r8, #8
    f2b8:	2a07      	cmp	r2, #7
    f2ba:	f848 4c04 	str.w	r4, [r8, #-4]
    f2be:	f848 3c08 	str.w	r3, [r8, #-8]
    f2c2:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f2c6:	ddef      	ble.n	f2a8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x848>
    f2c8:	aa24      	add	r2, sp, #144	; 0x90
    f2ca:	4639      	mov	r1, r7
    f2cc:	4628      	mov	r0, r5
    f2ce:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f2d2:	f01c fbc9 	bl	2ba68 <__ssprint_r>
    f2d6:	2800      	cmp	r0, #0
    f2d8:	f040 8447 	bne.w	fb6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110a>
    f2dc:	3e10      	subs	r6, #16
    f2de:	2e10      	cmp	r6, #16
    f2e0:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f2e4:	dce3      	bgt.n	f2ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84e>
    f2e6:	4635      	mov	r5, r6
    f2e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f2ea:	9e18      	ldr	r6, [sp, #96]	; 0x60
    f2ec:	4601      	mov	r1, r0
    f2ee:	9f19      	ldr	r7, [sp, #100]	; 0x64
    f2f0:	3201      	adds	r2, #1
    f2f2:	186c      	adds	r4, r5, r1
    f2f4:	49ad      	ldr	r1, [pc, #692]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f2f6:	2a07      	cmp	r2, #7
    f2f8:	f8c8 5004 	str.w	r5, [r8, #4]
    f2fc:	f8c8 1000 	str.w	r1, [r8]
    f300:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f304:	f300 841e 	bgt.w	fb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10e4>
    f308:	f108 0808 	add.w	r8, r8, #8
    f30c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f310:	e460      	b.n	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    f312:	aa24      	add	r2, sp, #144	; 0x90
    f314:	ee19 1a90 	vmov	r1, s19
    f318:	ee19 0a10 	vmov	r0, s18
    f31c:	9313      	str	r3, [sp, #76]	; 0x4c
    f31e:	f01c fba3 	bl	2ba68 <__ssprint_r>
    f322:	2800      	cmp	r0, #0
    f324:	f47f af4c 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f328:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f32a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f32e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f330:	e462      	b.n	ebf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x198>
    f332:	aa24      	add	r2, sp, #144	; 0x90
    f334:	ee19 1a90 	vmov	r1, s19
    f338:	ee19 0a10 	vmov	r0, s18
    f33c:	f01c fb94 	bl	2ba68 <__ssprint_r>
    f340:	2800      	cmp	r0, #0
    f342:	f47f af3d 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f346:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f348:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f34c:	e465      	b.n	ec1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ba>
    f34e:	2d10      	cmp	r5, #16
    f350:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f352:	dd24      	ble.n	f39e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x93e>
    f354:	2610      	movs	r6, #16
    f356:	ee19 9a10 	vmov	r9, s18
    f35a:	ee19 aa90 	vmov	sl, s19
    f35e:	e002      	b.n	f366 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x906>
    f360:	3d10      	subs	r5, #16
    f362:	2d10      	cmp	r5, #16
    f364:	dd1b      	ble.n	f39e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x93e>
    f366:	3301      	adds	r3, #1
    f368:	3410      	adds	r4, #16
    f36a:	4a90      	ldr	r2, [pc, #576]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f36c:	f108 0808 	add.w	r8, r8, #8
    f370:	2b07      	cmp	r3, #7
    f372:	f848 6c04 	str.w	r6, [r8, #-4]
    f376:	f848 2c08 	str.w	r2, [r8, #-8]
    f37a:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f37e:	ddef      	ble.n	f360 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x900>
    f380:	aa24      	add	r2, sp, #144	; 0x90
    f382:	4651      	mov	r1, sl
    f384:	4648      	mov	r0, r9
    f386:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f38a:	f01c fb6d 	bl	2ba68 <__ssprint_r>
    f38e:	2800      	cmp	r0, #0
    f390:	f040 8408 	bne.w	fba4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1144>
    f394:	3d10      	subs	r5, #16
    f396:	2d10      	cmp	r5, #16
    f398:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f39c:	dce3      	bgt.n	f366 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x906>
    f39e:	3301      	adds	r3, #1
    f3a0:	442c      	add	r4, r5
    f3a2:	4a82      	ldr	r2, [pc, #520]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f3a4:	2b07      	cmp	r3, #7
    f3a6:	f8c8 5004 	str.w	r5, [r8, #4]
    f3aa:	f8c8 2000 	str.w	r2, [r8]
    f3ae:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f3b2:	f77f ac59 	ble.w	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    f3b6:	aa24      	add	r2, sp, #144	; 0x90
    f3b8:	ee19 1a90 	vmov	r1, s19
    f3bc:	ee19 0a10 	vmov	r0, s18
    f3c0:	f01c fb52 	bl	2ba68 <__ssprint_r>
    f3c4:	2800      	cmp	r0, #0
    f3c6:	f47f aefb 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f3ca:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f3cc:	e44c      	b.n	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    f3ce:	4692      	mov	sl, r2
    f3d0:	ae50      	add	r6, sp, #320	; 0x140
    f3d2:	9207      	str	r2, [sp, #28]
    f3d4:	f7ff bbb4 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f3d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f3dc:	2d00      	cmp	r5, #0
    f3de:	bf08      	it	eq
    f3e0:	2c0a      	cmpeq	r4, #10
    f3e2:	f080 83ef 	bcs.w	fbc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1164>
    f3e6:	3430      	adds	r4, #48	; 0x30
    f3e8:	2301      	movs	r3, #1
    f3ea:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    f3ee:	f8cd b00c 	str.w	fp, [sp, #12]
    f3f2:	9307      	str	r3, [sp, #28]
    f3f4:	f88d 413f 	strb.w	r4, [sp, #319]	; 0x13f
    f3f8:	f7ff bba2 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f3fc:	991e      	ldr	r1, [sp, #120]	; 0x78
    f3fe:	2900      	cmp	r1, #0
    f400:	f340 836b 	ble.w	fada <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x107a>
    f404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f408:	4293      	cmp	r3, r2
    f40a:	bfa8      	it	ge
    f40c:	4613      	movge	r3, r2
    f40e:	2b00      	cmp	r3, #0
    f410:	461d      	mov	r5, r3
    f412:	dd0d      	ble.n	f430 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9d0>
    f414:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f416:	442c      	add	r4, r5
    f418:	f8c8 6000 	str.w	r6, [r8]
    f41c:	3301      	adds	r3, #1
    f41e:	9426      	str	r4, [sp, #152]	; 0x98
    f420:	f8c8 5004 	str.w	r5, [r8, #4]
    f424:	2b07      	cmp	r3, #7
    f426:	9325      	str	r3, [sp, #148]	; 0x94
    f428:	f300 8630 	bgt.w	1008c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x8c>
    f42c:	f108 0808 	add.w	r8, r8, #8
    f430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f432:	2d00      	cmp	r5, #0
    f434:	bfa8      	it	ge
    f436:	1b5b      	subge	r3, r3, r5
    f438:	2b00      	cmp	r3, #0
    f43a:	4699      	mov	r9, r3
    f43c:	f300 8269 	bgt.w	f912 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeb2>
    f440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f442:	4433      	add	r3, r6
    f444:	469b      	mov	fp, r3
    f446:	9b03      	ldr	r3, [sp, #12]
    f448:	055b      	lsls	r3, r3, #21
    f44a:	f100 828f 	bmi.w	f96c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0c>
    f44e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f452:	4293      	cmp	r3, r2
    f454:	db03      	blt.n	f45e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9fe>
    f456:	9a03      	ldr	r2, [sp, #12]
    f458:	07d5      	lsls	r5, r2, #31
    f45a:	f140 8550 	bpl.w	fefe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x149e>
    f45e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f460:	9910      	ldr	r1, [sp, #64]	; 0x40
    f462:	3201      	adds	r2, #1
    f464:	9811      	ldr	r0, [sp, #68]	; 0x44
    f466:	440c      	add	r4, r1
    f468:	f8c8 1004 	str.w	r1, [r8, #4]
    f46c:	2a07      	cmp	r2, #7
    f46e:	f8c8 0000 	str.w	r0, [r8]
    f472:	9426      	str	r4, [sp, #152]	; 0x98
    f474:	9225      	str	r2, [sp, #148]	; 0x94
    f476:	f300 861e 	bgt.w	100b6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb6>
    f47a:	f108 0808 	add.w	r8, r8, #8
    f47e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f480:	4416      	add	r6, r2
    f482:	1ad3      	subs	r3, r2, r3
    f484:	eba6 060b 	sub.w	r6, r6, fp
    f488:	429e      	cmp	r6, r3
    f48a:	bfa8      	it	ge
    f48c:	461e      	movge	r6, r3
    f48e:	2e00      	cmp	r6, #0
    f490:	dd0d      	ble.n	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
    f492:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f494:	4434      	add	r4, r6
    f496:	f8c8 b000 	str.w	fp, [r8]
    f49a:	3201      	adds	r2, #1
    f49c:	9426      	str	r4, [sp, #152]	; 0x98
    f49e:	f8c8 6004 	str.w	r6, [r8, #4]
    f4a2:	2a07      	cmp	r2, #7
    f4a4:	9225      	str	r2, [sp, #148]	; 0x94
    f4a6:	f300 867c 	bgt.w	101a2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1a2>
    f4aa:	f108 0808 	add.w	r8, r8, #8
    f4ae:	2e00      	cmp	r6, #0
    f4b0:	bfac      	ite	ge
    f4b2:	1b9e      	subge	r6, r3, r6
    f4b4:	461e      	movlt	r6, r3
    f4b6:	2e00      	cmp	r6, #0
    f4b8:	f77f abcd 	ble.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f4bc:	2e10      	cmp	r6, #16
    f4be:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4c0:	f340 8372 	ble.w	fba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1148>
    f4c4:	f04f 0910 	mov.w	r9, #16
    f4c8:	4d39      	ldr	r5, [pc, #228]	; (f5b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb50>)
    f4ca:	ee19 aa10 	vmov	sl, s18
    f4ce:	ee19 ba90 	vmov	fp, s19
    f4d2:	e003      	b.n	f4dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa7c>
    f4d4:	3e10      	subs	r6, #16
    f4d6:	2e10      	cmp	r6, #16
    f4d8:	f340 8367 	ble.w	fbaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114a>
    f4dc:	3301      	adds	r3, #1
    f4de:	3410      	adds	r4, #16
    f4e0:	f8c8 5000 	str.w	r5, [r8]
    f4e4:	f108 0808 	add.w	r8, r8, #8
    f4e8:	2b07      	cmp	r3, #7
    f4ea:	f848 9c04 	str.w	r9, [r8, #-4]
    f4ee:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f4f2:	ddef      	ble.n	f4d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa74>
    f4f4:	aa24      	add	r2, sp, #144	; 0x90
    f4f6:	4659      	mov	r1, fp
    f4f8:	4650      	mov	r0, sl
    f4fa:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f4fe:	f01c fab3 	bl	2ba68 <__ssprint_r>
    f502:	2800      	cmp	r0, #0
    f504:	f040 85d1 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
    f508:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f50c:	e7e2      	b.n	f4d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa74>
    f50e:	46a1      	mov	r9, r4
    f510:	46b3      	mov	fp, r6
    f512:	9b08      	ldr	r3, [sp, #32]
    f514:	b11b      	cbz	r3, f51e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xabe>
    f516:	9908      	ldr	r1, [sp, #32]
    f518:	4648      	mov	r0, r9
    f51a:	f01a fb83 	bl	29c24 <_free_r>
    f51e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f522:	f013 0f40 	tst.w	r3, #64	; 0x40
    f526:	9b05      	ldr	r3, [sp, #20]
    f528:	bf18      	it	ne
    f52a:	f04f 33ff 	movne.w	r3, #4294967295
    f52e:	9305      	str	r3, [sp, #20]
    f530:	9805      	ldr	r0, [sp, #20]
    f532:	b051      	add	sp, #324	; 0x144
    f534:	ecbd 8b08 	vpop	{d8-d11}
    f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f53c:	469a      	mov	sl, r3
    f53e:	ae50      	add	r6, sp, #320	; 0x140
    f540:	f7ff bafe 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f544:	9b03      	ldr	r3, [sp, #12]
    f546:	07d8      	lsls	r0, r3, #31
    f548:	f53f ae43 	bmi.w	f1d2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x772>
    f54c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f54e:	2301      	movs	r3, #1
    f550:	3401      	adds	r4, #1
    f552:	f8c8 6000 	str.w	r6, [r8]
    f556:	eb02 0903 	add.w	r9, r2, r3
    f55a:	f8c8 3004 	str.w	r3, [r8, #4]
    f55e:	9426      	str	r4, [sp, #152]	; 0x98
    f560:	f1b9 0f07 	cmp.w	r9, #7
    f564:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
    f568:	f77f ae6c 	ble.w	f244 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e4>
    f56c:	aa24      	add	r2, sp, #144	; 0x90
    f56e:	ee19 1a90 	vmov	r1, s19
    f572:	ee19 0a10 	vmov	r0, s18
    f576:	f01c fa77 	bl	2ba68 <__ssprint_r>
    f57a:	2800      	cmp	r0, #0
    f57c:	f47f ae20 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f580:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f582:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f586:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f58a:	e65d      	b.n	f248 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e8>
    f58c:	1e5e      	subs	r6, r3, #1
    f58e:	2e00      	cmp	r6, #0
    f590:	f77f ae5a 	ble.w	f248 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e8>
    f594:	2e10      	cmp	r6, #16
    f596:	4d06      	ldr	r5, [pc, #24]	; (f5b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb50>)
    f598:	f340 83a0 	ble.w	fcdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x127c>
    f59c:	464b      	mov	r3, r9
    f59e:	f04f 0a10 	mov.w	sl, #16
    f5a2:	ee19 9a10 	vmov	r9, s18
    f5a6:	ee19 ba90 	vmov	fp, s19
    f5aa:	e007      	b.n	f5bc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb5c>
    f5ac:	0002f548 	.word	0x0002f548
    f5b0:	0002f558 	.word	0x0002f558
    f5b4:	3e10      	subs	r6, #16
    f5b6:	2e10      	cmp	r6, #16
    f5b8:	f340 838f 	ble.w	fcda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x127a>
    f5bc:	3301      	adds	r3, #1
    f5be:	3410      	adds	r4, #16
    f5c0:	f8c8 5000 	str.w	r5, [r8]
    f5c4:	f108 0808 	add.w	r8, r8, #8
    f5c8:	2b07      	cmp	r3, #7
    f5ca:	f848 ac04 	str.w	sl, [r8, #-4]
    f5ce:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f5d2:	ddef      	ble.n	f5b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb54>
    f5d4:	aa24      	add	r2, sp, #144	; 0x90
    f5d6:	4659      	mov	r1, fp
    f5d8:	4648      	mov	r0, r9
    f5da:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f5de:	f01c fa43 	bl	2ba68 <__ssprint_r>
    f5e2:	2800      	cmp	r0, #0
    f5e4:	d195      	bne.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    f5e6:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f5ea:	e7e3      	b.n	f5b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb54>
    f5ec:	aa24      	add	r2, sp, #144	; 0x90
    f5ee:	ee19 1a90 	vmov	r1, s19
    f5f2:	ee19 0a10 	vmov	r0, s18
    f5f6:	f01c fa37 	bl	2ba68 <__ssprint_r>
    f5fa:	2800      	cmp	r0, #0
    f5fc:	f47f ade0 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f600:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f602:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f606:	f7ff bb13 	b.w	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f60a:	f852 4b04 	ldr.w	r4, [r2], #4
    f60e:	f01b 0f10 	tst.w	fp, #16
    f612:	f04f 0301 	mov.w	r3, #1
    f616:	9209      	str	r2, [sp, #36]	; 0x24
    f618:	d10a      	bne.n	f630 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd0>
    f61a:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f61e:	d003      	beq.n	f628 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbc8>
    f620:	b2a4      	uxth	r4, r4
    f622:	2500      	movs	r5, #0
    f624:	f7ff ba68 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f628:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f62c:	bf18      	it	ne
    f62e:	b2e4      	uxtbne	r4, r4
    f630:	2500      	movs	r5, #0
    f632:	f7ff ba61 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f636:	222d      	movs	r2, #45	; 0x2d
    f638:	4264      	negs	r4, r4
    f63a:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f63e:	f04f 0301 	mov.w	r3, #1
    f642:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    f646:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    f64a:	f7ff ba58 	b.w	eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>
    f64e:	aa24      	add	r2, sp, #144	; 0x90
    f650:	ee19 1a90 	vmov	r1, s19
    f654:	ee19 0a10 	vmov	r0, s18
    f658:	f01c fa06 	bl	2ba68 <__ssprint_r>
    f65c:	2800      	cmp	r0, #0
    f65e:	f47f adaf 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f662:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f664:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f668:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f66c:	e5d1      	b.n	f212 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7b2>
    f66e:	aa24      	add	r2, sp, #144	; 0x90
    f670:	ee19 1a90 	vmov	r1, s19
    f674:	ee19 0a10 	vmov	r0, s18
    f678:	f01c f9f6 	bl	2ba68 <__ssprint_r>
    f67c:	2800      	cmp	r0, #0
    f67e:	f47f ad9f 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f682:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f684:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f688:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f68a:	e5b1      	b.n	f1f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x790>
    f68c:	9b03      	ldr	r3, [sp, #12]
    f68e:	07d9      	lsls	r1, r3, #31
    f690:	f57f aae1 	bpl.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f694:	e480      	b.n	ef98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x538>
    f696:	f897 9000 	ldrb.w	r9, [r7]
    f69a:	9309      	str	r3, [sp, #36]	; 0x24
    f69c:	f7ff b96a 	b.w	e974 <_svfprintf_r+0xbc>
    f6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6a2:	f853 1b04 	ldr.w	r1, [r3], #4
    f6a6:	9309      	str	r3, [sp, #36]	; 0x24
    f6a8:	9b05      	ldr	r3, [sp, #20]
    f6aa:	17dd      	asrs	r5, r3, #31
    f6ac:	461a      	mov	r2, r3
    f6ae:	462b      	mov	r3, r5
    f6b0:	e9c1 2300 	strd	r2, r3, [r1]
    f6b4:	f7ff b930 	b.w	e918 <_svfprintf_r+0x60>
    f6b8:	2320      	movs	r3, #32
    f6ba:	f897 9000 	ldrb.w	r9, [r7]
    f6be:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    f6c2:	f7ff b957 	b.w	e974 <_svfprintf_r+0xbc>
    f6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6c8:	f853 4b04 	ldr.w	r4, [r3], #4
    f6cc:	17e5      	asrs	r5, r4, #31
    f6ce:	9309      	str	r3, [sp, #36]	; 0x24
    f6d0:	4622      	mov	r2, r4
    f6d2:	462b      	mov	r3, r5
    f6d4:	f7ff b9e1 	b.w	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    f6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6da:	2500      	movs	r5, #0
    f6dc:	f853 4b04 	ldr.w	r4, [r3], #4
    f6e0:	9309      	str	r3, [sp, #36]	; 0x24
    f6e2:	f7ff ba05 	b.w	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    f6e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f6ea:	4602      	mov	r2, r0
    f6ec:	460b      	mov	r3, r1
    f6ee:	f7fd fd93 	bl	d218 <__aeabi_dcmpun>
    f6f2:	2800      	cmp	r0, #0
    f6f4:	f040 85e5 	bne.w	102c2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2c2>
    f6f8:	f029 0320 	bic.w	r3, r9, #32
    f6fc:	2b41      	cmp	r3, #65	; 0x41
    f6fe:	9304      	str	r3, [sp, #16]
    f700:	f040 8328 	bne.w	fd54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12f4>
    f704:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f708:	f04f 0230 	mov.w	r2, #48	; 0x30
    f70c:	bf0c      	ite	eq
    f70e:	2378      	moveq	r3, #120	; 0x78
    f710:	2358      	movne	r3, #88	; 0x58
    f712:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
    f716:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
    f71a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    f71e:	f300 8400 	bgt.w	ff22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c2>
    f722:	ae37      	add	r6, sp, #220	; 0xdc
    f724:	9008      	str	r0, [sp, #32]
    f726:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f72a:	2a00      	cmp	r2, #0
    f72c:	f280 8577 	bge.w	1021e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x21e>
    f730:	232d      	movs	r3, #45	; 0x2d
    f732:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f736:	9313      	str	r3, [sp, #76]	; 0x4c
    f738:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    f73c:	911a      	str	r1, [sp, #104]	; 0x68
    f73e:	931b      	str	r3, [sp, #108]	; 0x6c
    f740:	a81e      	add	r0, sp, #120	; 0x78
    f742:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
    f746:	f01b ff0d 	bl	2b564 <frexp>
    f74a:	2200      	movs	r2, #0
    f74c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f750:	ec51 0b10 	vmov	r0, r1, d0
    f754:	f7fd fb4e 	bl	cdf4 <__aeabi_dmul>
    f758:	2200      	movs	r2, #0
    f75a:	2300      	movs	r3, #0
    f75c:	4604      	mov	r4, r0
    f75e:	460d      	mov	r5, r1
    f760:	f7fc ff80 	bl	c664 <__aeabi_dcmpeq>
    f764:	b108      	cbz	r0, f76a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0a>
    f766:	2301      	movs	r3, #1
    f768:	931e      	str	r3, [sp, #120]	; 0x78
    f76a:	4ab9      	ldr	r2, [pc, #740]	; (fa50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff0>)
    f76c:	f10a 3aff 	add.w	sl, sl, #4294967295
    f770:	4bb8      	ldr	r3, [pc, #736]	; (fa54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff4>)
    f772:	46b3      	mov	fp, r6
    f774:	9714      	str	r7, [sp, #80]	; 0x50
    f776:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f77a:	bf18      	it	ne
    f77c:	461a      	movne	r2, r3
    f77e:	f8cd 801c 	str.w	r8, [sp, #28]
    f782:	4617      	mov	r7, r2
    f784:	920a      	str	r2, [sp, #40]	; 0x28
    f786:	e9cd 960c 	strd	r9, r6, [sp, #48]	; 0x30
    f78a:	e002      	b.n	f792 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd32>
    f78c:	f7fc ff6a 	bl	c664 <__aeabi_dcmpeq>
    f790:	bb18      	cbnz	r0, f7da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd7a>
    f792:	2200      	movs	r2, #0
    f794:	4bb0      	ldr	r3, [pc, #704]	; (fa58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff8>)
    f796:	4620      	mov	r0, r4
    f798:	4629      	mov	r1, r5
    f79a:	f7fd fb2b 	bl	cdf4 <__aeabi_dmul>
    f79e:	460d      	mov	r5, r1
    f7a0:	4604      	mov	r4, r0
    f7a2:	f7fc ff91 	bl	c6c8 <__aeabi_d2iz>
    f7a6:	4606      	mov	r6, r0
    f7a8:	f7fc fe9c 	bl	c4e4 <__aeabi_i2d>
    f7ac:	4602      	mov	r2, r0
    f7ae:	460b      	mov	r3, r1
    f7b0:	4620      	mov	r0, r4
    f7b2:	4629      	mov	r1, r5
    f7b4:	f7fc fd48 	bl	c248 <__aeabi_dsub>
    f7b8:	f817 c006 	ldrb.w	ip, [r7, r6]
    f7bc:	f1ba 3fff 	cmp.w	sl, #4294967295
    f7c0:	46d8      	mov	r8, fp
    f7c2:	46d1      	mov	r9, sl
    f7c4:	4604      	mov	r4, r0
    f7c6:	460d      	mov	r5, r1
    f7c8:	f04f 0200 	mov.w	r2, #0
    f7cc:	f04f 0300 	mov.w	r3, #0
    f7d0:	f10a 3aff 	add.w	sl, sl, #4294967295
    f7d4:	f80b cb01 	strb.w	ip, [fp], #1
    f7d8:	d1d8      	bne.n	f78c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd2c>
    f7da:	2200      	movs	r2, #0
    f7dc:	4b9f      	ldr	r3, [pc, #636]	; (fa5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffc>)
    f7de:	4620      	mov	r0, r4
    f7e0:	4629      	mov	r1, r5
    f7e2:	46b2      	mov	sl, r6
    f7e4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    f7e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    f7ea:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f7ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
    f7f0:	f8cd 901c 	str.w	r9, [sp, #28]
    f7f4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    f7f8:	f7fc ff5c 	bl	c6b4 <__aeabi_dcmpgt>
    f7fc:	2800      	cmp	r0, #0
    f7fe:	f040 858a 	bne.w	10316 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x316>
    f802:	4620      	mov	r0, r4
    f804:	4629      	mov	r1, r5
    f806:	2200      	movs	r2, #0
    f808:	4b94      	ldr	r3, [pc, #592]	; (fa5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffc>)
    f80a:	f7fc ff2b 	bl	c664 <__aeabi_dcmpeq>
    f80e:	b118      	cbz	r0, f818 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdb8>
    f810:	4653      	mov	r3, sl
    f812:	07db      	lsls	r3, r3, #31
    f814:	f100 857f 	bmi.w	10316 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x316>
    f818:	9b07      	ldr	r3, [sp, #28]
    f81a:	2b00      	cmp	r3, #0
    f81c:	db07      	blt.n	f82e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdce>
    f81e:	9b07      	ldr	r3, [sp, #28]
    f820:	2230      	movs	r2, #48	; 0x30
    f822:	3301      	adds	r3, #1
    f824:	445b      	add	r3, fp
    f826:	f80b 2b01 	strb.w	r2, [fp], #1
    f82a:	455b      	cmp	r3, fp
    f82c:	d1fb      	bne.n	f826 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc6>
    f82e:	9b03      	ldr	r3, [sp, #12]
    f830:	f043 0302 	orr.w	r3, r3, #2
    f834:	9303      	str	r3, [sp, #12]
    f836:	ebab 0306 	sub.w	r3, fp, r6
    f83a:	930c      	str	r3, [sp, #48]	; 0x30
    f83c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f83e:	930a      	str	r3, [sp, #40]	; 0x28
    f840:	e2d0      	b.n	fde4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1384>
    f842:	4b83      	ldr	r3, [pc, #524]	; (fa50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff0>)
    f844:	9312      	str	r3, [sp, #72]	; 0x48
    f846:	9b03      	ldr	r3, [sp, #12]
    f848:	0699      	lsls	r1, r3, #26
    f84a:	f140 80ea 	bpl.w	fa22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc2>
    f84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f850:	3307      	adds	r3, #7
    f852:	f023 0307 	bic.w	r3, r3, #7
    f856:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    f85a:	9309      	str	r3, [sp, #36]	; 0x24
    f85c:	ea54 0305 	orrs.w	r3, r4, r5
    f860:	d00a      	beq.n	f878 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe18>
    f862:	9b03      	ldr	r3, [sp, #12]
    f864:	07de      	lsls	r6, r3, #31
    f866:	d507      	bpl.n	f878 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe18>
    f868:	f043 0302 	orr.w	r3, r3, #2
    f86c:	f88d 9075 	strb.w	r9, [sp, #117]	; 0x75
    f870:	9303      	str	r3, [sp, #12]
    f872:	2330      	movs	r3, #48	; 0x30
    f874:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    f878:	9b03      	ldr	r3, [sp, #12]
    f87a:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    f87e:	2302      	movs	r3, #2
    f880:	f7ff b93a 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f884:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f888:	f7ff bb08 	b.w	ee9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43c>
    f88c:	4b71      	ldr	r3, [pc, #452]	; (fa54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff4>)
    f88e:	9312      	str	r3, [sp, #72]	; 0x48
    f890:	e7d9      	b.n	f846 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xde6>
    f892:	f043 0320 	orr.w	r3, r3, #32
    f896:	f897 9001 	ldrb.w	r9, [r7, #1]
    f89a:	3701      	adds	r7, #1
    f89c:	9303      	str	r3, [sp, #12]
    f89e:	f7ff b869 	b.w	e974 <_svfprintf_r+0xbc>
    f8a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f8a6:	f897 9001 	ldrb.w	r9, [r7, #1]
    f8aa:	3701      	adds	r7, #1
    f8ac:	9303      	str	r3, [sp, #12]
    f8ae:	f7ff b861 	b.w	e974 <_svfprintf_r+0xbc>
    f8b2:	aa24      	add	r2, sp, #144	; 0x90
    f8b4:	ee19 1a90 	vmov	r1, s19
    f8b8:	ee19 0a10 	vmov	r0, s18
    f8bc:	f01c f8d4 	bl	2ba68 <__ssprint_r>
    f8c0:	2800      	cmp	r0, #0
    f8c2:	f47f ac7d 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f8c6:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f8c8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f8cc:	f7ff bb74 	b.w	efb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x558>
    f8d0:	2140      	movs	r1, #64	; 0x40
    f8d2:	4648      	mov	r0, r9
    f8d4:	f016 f83c 	bl	25950 <_malloc_r>
    f8d8:	f8cb 0000 	str.w	r0, [fp]
    f8dc:	f8cb 0010 	str.w	r0, [fp, #16]
    f8e0:	2800      	cmp	r0, #0
    f8e2:	f000 858d 	beq.w	10400 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x400>
    f8e6:	2340      	movs	r3, #64	; 0x40
    f8e8:	f8cb 3014 	str.w	r3, [fp, #20]
    f8ec:	f7fe bffe 	b.w	e8ec <_svfprintf_r+0x34>
    f8f0:	4630      	mov	r0, r6
    f8f2:	46aa      	mov	sl, r5
    f8f4:	f016 ff76 	bl	267e4 <strlen>
    f8f8:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    f8fc:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f900:	9007      	str	r0, [sp, #28]
    f902:	950d      	str	r5, [sp, #52]	; 0x34
    f904:	9304      	str	r3, [sp, #16]
    f906:	e9cd 5408 	strd	r5, r4, [sp, #32]
    f90a:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    f90e:	f7ff b923 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    f912:	f1b9 0f10 	cmp.w	r9, #16
    f916:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f918:	f340 8564 	ble.w	103e4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3e4>
    f91c:	4622      	mov	r2, r4
    f91e:	f04f 0a10 	mov.w	sl, #16
    f922:	4d4f      	ldr	r5, [pc, #316]	; (fa60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1000>)
    f924:	ee19 ba10 	vmov	fp, s18
    f928:	ee19 4a90 	vmov	r4, s19
    f92c:	e005      	b.n	f93a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeda>
    f92e:	f1a9 0910 	sub.w	r9, r9, #16
    f932:	f1b9 0f10 	cmp.w	r9, #16
    f936:	f340 82c4 	ble.w	fec2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1462>
    f93a:	3301      	adds	r3, #1
    f93c:	3210      	adds	r2, #16
    f93e:	f8c8 5000 	str.w	r5, [r8]
    f942:	f108 0808 	add.w	r8, r8, #8
    f946:	2b07      	cmp	r3, #7
    f948:	f848 ac04 	str.w	sl, [r8, #-4]
    f94c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f950:	dded      	ble.n	f92e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xece>
    f952:	aa24      	add	r2, sp, #144	; 0x90
    f954:	4621      	mov	r1, r4
    f956:	4658      	mov	r0, fp
    f958:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f95c:	f01c f884 	bl	2ba68 <__ssprint_r>
    f960:	2800      	cmp	r0, #0
    f962:	f040 847f 	bne.w	10264 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x264>
    f966:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f96a:	e7e0      	b.n	f92e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xece>
    f96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f96e:	2b00      	cmp	r3, #0
    f970:	dc0a      	bgt.n	f988 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf28>
    f972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f974:	2b00      	cmp	r3, #0
    f976:	dc07      	bgt.n	f988 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf28>
    f978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f97a:	18f3      	adds	r3, r6, r3
    f97c:	9307      	str	r3, [sp, #28]
    f97e:	9b07      	ldr	r3, [sp, #28]
    f980:	459b      	cmp	fp, r3
    f982:	bf28      	it	cs
    f984:	469b      	movcs	fp, r3
    f986:	e562      	b.n	f44e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9ee>
    f988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f98a:	4622      	mov	r2, r4
    f98c:	9613      	str	r6, [sp, #76]	; 0x4c
    f98e:	ee19 9a10 	vmov	r9, s18
    f992:	18f3      	adds	r3, r6, r3
    f994:	9718      	str	r7, [sp, #96]	; 0x60
    f996:	465e      	mov	r6, fp
    f998:	f8df a0c4 	ldr.w	sl, [pc, #196]	; fa60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1000>
    f99c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    f9a0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    f9a2:	930a      	str	r3, [sp, #40]	; 0x28
    f9a4:	f1bb 0f00 	cmp.w	fp, #0
    f9a8:	d045      	beq.n	fa36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfd6>
    f9aa:	f10b 3bff 	add.w	fp, fp, #4294967295
    f9ae:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f9b2:	3001      	adds	r0, #1
    f9b4:	9916      	ldr	r1, [sp, #88]	; 0x58
    f9b6:	441a      	add	r2, r3
    f9b8:	f8c8 3004 	str.w	r3, [r8, #4]
    f9bc:	2807      	cmp	r0, #7
    f9be:	f8c8 1000 	str.w	r1, [r8]
    f9c2:	9226      	str	r2, [sp, #152]	; 0x98
    f9c4:	9025      	str	r0, [sp, #148]	; 0x94
    f9c6:	dc7b      	bgt.n	fac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1060>
    f9c8:	f108 0808 	add.w	r8, r8, #8
    f9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9ce:	7838      	ldrb	r0, [r7, #0]
    f9d0:	1b9d      	subs	r5, r3, r6
    f9d2:	9307      	str	r3, [sp, #28]
    f9d4:	4285      	cmp	r5, r0
    f9d6:	bfa8      	it	ge
    f9d8:	4605      	movge	r5, r0
    f9da:	2d00      	cmp	r5, #0
    f9dc:	dd0e      	ble.n	f9fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf9c>
    f9de:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9e0:	442a      	add	r2, r5
    f9e2:	f8c8 6000 	str.w	r6, [r8]
    f9e6:	3001      	adds	r0, #1
    f9e8:	9226      	str	r2, [sp, #152]	; 0x98
    f9ea:	f8c8 5004 	str.w	r5, [r8, #4]
    f9ee:	2807      	cmp	r0, #7
    f9f0:	9025      	str	r0, [sp, #148]	; 0x94
    f9f2:	f300 813c 	bgt.w	fc6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120e>
    f9f6:	f108 0808 	add.w	r8, r8, #8
    f9fa:	7838      	ldrb	r0, [r7, #0]
    f9fc:	2d00      	cmp	r5, #0
    f9fe:	bfac      	ite	ge
    fa00:	1b45      	subge	r5, r0, r5
    fa02:	4605      	movlt	r5, r0
    fa04:	2d00      	cmp	r5, #0
    fa06:	dc1b      	bgt.n	fa40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfe0>
    fa08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa0a:	4406      	add	r6, r0
    fa0c:	2b00      	cmp	r3, #0
    fa0e:	dcc9      	bgt.n	f9a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf44>
    fa10:	f1bb 0f00 	cmp.w	fp, #0
    fa14:	dcc6      	bgt.n	f9a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf44>
    fa16:	46b3      	mov	fp, r6
    fa18:	9717      	str	r7, [sp, #92]	; 0x5c
    fa1a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    fa1c:	4614      	mov	r4, r2
    fa1e:	9f18      	ldr	r7, [sp, #96]	; 0x60
    fa20:	e7ad      	b.n	f97e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf1e>
    fa22:	9b03      	ldr	r3, [sp, #12]
    fa24:	06da      	lsls	r2, r3, #27
    fa26:	f140 80a3 	bpl.w	fb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1110>
    fa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa2c:	2500      	movs	r5, #0
    fa2e:	f853 4b04 	ldr.w	r4, [r3], #4
    fa32:	9309      	str	r3, [sp, #36]	; 0x24
    fa34:	e712      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fa36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa38:	3f01      	subs	r7, #1
    fa3a:	3b01      	subs	r3, #1
    fa3c:	930b      	str	r3, [sp, #44]	; 0x2c
    fa3e:	e7b6      	b.n	f9ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf4e>
    fa40:	2d10      	cmp	r5, #16
    fa42:	9825      	ldr	r0, [sp, #148]	; 0x94
    fa44:	dd2d      	ble.n	faa2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1042>
    fa46:	960d      	str	r6, [sp, #52]	; 0x34
    fa48:	2410      	movs	r4, #16
    fa4a:	ee19 6a90 	vmov	r6, s19
    fa4e:	e00c      	b.n	fa6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100a>
    fa50:	0002f514 	.word	0x0002f514
    fa54:	0002f528 	.word	0x0002f528
    fa58:	40300000 	.word	0x40300000
    fa5c:	3fe00000 	.word	0x3fe00000
    fa60:	0002f558 	.word	0x0002f558
    fa64:	3d10      	subs	r5, #16
    fa66:	2d10      	cmp	r5, #16
    fa68:	dd1a      	ble.n	faa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1040>
    fa6a:	3001      	adds	r0, #1
    fa6c:	3210      	adds	r2, #16
    fa6e:	f8c8 a000 	str.w	sl, [r8]
    fa72:	f108 0808 	add.w	r8, r8, #8
    fa76:	2807      	cmp	r0, #7
    fa78:	f848 4c04 	str.w	r4, [r8, #-4]
    fa7c:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fa80:	ddf0      	ble.n	fa64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1004>
    fa82:	aa24      	add	r2, sp, #144	; 0x90
    fa84:	4631      	mov	r1, r6
    fa86:	4648      	mov	r0, r9
    fa88:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fa8c:	f01b ffec 	bl	2ba68 <__ssprint_r>
    fa90:	2800      	cmp	r0, #0
    fa92:	f040 830d 	bne.w	100b0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb0>
    fa96:	3d10      	subs	r5, #16
    fa98:	2d10      	cmp	r5, #16
    fa9a:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    fa9e:	dce4      	bgt.n	fa6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100a>
    faa0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    faa2:	3001      	adds	r0, #1
    faa4:	442a      	add	r2, r5
    faa6:	f8c8 a000 	str.w	sl, [r8]
    faaa:	2807      	cmp	r0, #7
    faac:	f8c8 5004 	str.w	r5, [r8, #4]
    fab0:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fab4:	f300 8323 	bgt.w	100fe <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xfe>
    fab8:	f108 0808 	add.w	r8, r8, #8
    fabc:	7838      	ldrb	r0, [r7, #0]
    fabe:	e7a3      	b.n	fa08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa8>
    fac0:	aa24      	add	r2, sp, #144	; 0x90
    fac2:	ee19 1a90 	vmov	r1, s19
    fac6:	4648      	mov	r0, r9
    fac8:	f01b ffce 	bl	2ba68 <__ssprint_r>
    facc:	2800      	cmp	r0, #0
    face:	f47f ab79 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
    fad2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fad4:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fad8:	e778      	b.n	f9cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf6c>
    fada:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fadc:	2201      	movs	r2, #1
    fade:	3401      	adds	r4, #1
    fae0:	4899      	ldr	r0, [pc, #612]	; (fd48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e8>)
    fae2:	4413      	add	r3, r2
    fae4:	f8c8 2004 	str.w	r2, [r8, #4]
    fae8:	9426      	str	r4, [sp, #152]	; 0x98
    faea:	2b07      	cmp	r3, #7
    faec:	f8c8 0000 	str.w	r0, [r8]
    faf0:	9325      	str	r3, [sp, #148]	; 0x94
    faf2:	f300 81f5 	bgt.w	fee0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1480>
    faf6:	f108 0808 	add.w	r8, r8, #8
    fafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fafc:	430b      	orrs	r3, r1
    fafe:	f000 82ea 	beq.w	100d6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xd6>
    fb02:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb04:	9810      	ldr	r0, [sp, #64]	; 0x40
    fb06:	3301      	adds	r3, #1
    fb08:	1902      	adds	r2, r0, r4
    fb0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    fb0c:	2b07      	cmp	r3, #7
    fb0e:	f8c8 0004 	str.w	r0, [r8, #4]
    fb12:	f8c8 4000 	str.w	r4, [r8]
    fb16:	9226      	str	r2, [sp, #152]	; 0x98
    fb18:	9325      	str	r3, [sp, #148]	; 0x94
    fb1a:	f300 82a7 	bgt.w	1006c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6c>
    fb1e:	f108 0808 	add.w	r8, r8, #8
    fb22:	2900      	cmp	r1, #0
    fb24:	f2c0 8352 	blt.w	101cc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1cc>
    fb28:	990c      	ldr	r1, [sp, #48]	; 0x30
    fb2a:	3301      	adds	r3, #1
    fb2c:	f8c8 6000 	str.w	r6, [r8]
    fb30:	188c      	adds	r4, r1, r2
    fb32:	2b07      	cmp	r3, #7
    fb34:	f8c8 1004 	str.w	r1, [r8, #4]
    fb38:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fb3c:	f77f a889 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    fb40:	f7ff bb90 	b.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    fb44:	aa24      	add	r2, sp, #144	; 0x90
    fb46:	ee19 1a90 	vmov	r1, s19
    fb4a:	ee19 0a10 	vmov	r0, s18
    fb4e:	9313      	str	r3, [sp, #76]	; 0x4c
    fb50:	f01b ff8a 	bl	2ba68 <__ssprint_r>
    fb54:	2800      	cmp	r0, #0
    fb56:	f47f ab33 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fb5a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    fb5e:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fb62:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fb64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fb66:	f7ff b835 	b.w	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    fb6a:	46a9      	mov	r9, r5
    fb6c:	46bb      	mov	fp, r7
    fb6e:	e4d0      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    fb70:	9b03      	ldr	r3, [sp, #12]
    fb72:	065b      	lsls	r3, r3, #25
    fb74:	f140 80da 	bpl.w	fd2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12cc>
    fb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb7a:	2500      	movs	r5, #0
    fb7c:	f853 4b04 	ldr.w	r4, [r3], #4
    fb80:	b2a4      	uxth	r4, r4
    fb82:	9309      	str	r3, [sp, #36]	; 0x24
    fb84:	e66a      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fb86:	aa24      	add	r2, sp, #144	; 0x90
    fb88:	ee19 1a90 	vmov	r1, s19
    fb8c:	ee19 0a10 	vmov	r0, s18
    fb90:	f01b ff6a 	bl	2ba68 <__ssprint_r>
    fb94:	2800      	cmp	r0, #0
    fb96:	f47f ab13 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fb9a:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fb9c:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fba0:	f7ff b9f5 	b.w	ef8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52e>
    fba4:	46d3      	mov	fp, sl
    fba6:	e4b4      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    fba8:	4d68      	ldr	r5, [pc, #416]	; (fd4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12ec>)
    fbaa:	3301      	adds	r3, #1
    fbac:	4434      	add	r4, r6
    fbae:	f8c8 5000 	str.w	r5, [r8]
    fbb2:	2b07      	cmp	r3, #7
    fbb4:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fbb8:	f8c8 6004 	str.w	r6, [r8, #4]
    fbbc:	f77f a849 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    fbc0:	f7ff bb50 	b.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    fbc4:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
    fbc8:	2200      	movs	r2, #0
    fbca:	f8cd 900c 	str.w	r9, [sp, #12]
    fbce:	ae50      	add	r6, sp, #320	; 0x140
    fbd0:	f8cd 8010 	str.w	r8, [sp, #16]
    fbd4:	4691      	mov	r9, r2
    fbd6:	9707      	str	r7, [sp, #28]
    fbd8:	461f      	mov	r7, r3
    fbda:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    fbde:	e007      	b.n	fbf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1190>
    fbe0:	f7fc fe3a 	bl	c858 <__aeabi_uldivmod>
    fbe4:	2d00      	cmp	r5, #0
    fbe6:	bf08      	it	eq
    fbe8:	2c0a      	cmpeq	r4, #10
    fbea:	d321      	bcc.n	fc30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11d0>
    fbec:	4604      	mov	r4, r0
    fbee:	460d      	mov	r5, r1
    fbf0:	220a      	movs	r2, #10
    fbf2:	2300      	movs	r3, #0
    fbf4:	4620      	mov	r0, r4
    fbf6:	4629      	mov	r1, r5
    fbf8:	f7fc fe2e 	bl	c858 <__aeabi_uldivmod>
    fbfc:	4694      	mov	ip, r2
    fbfe:	4620      	mov	r0, r4
    fc00:	4629      	mov	r1, r5
    fc02:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    fc06:	220a      	movs	r2, #10
    fc08:	2300      	movs	r3, #0
    fc0a:	f109 0901 	add.w	r9, r9, #1
    fc0e:	f806 cc01 	strb.w	ip, [r6, #-1]
    fc12:	3e01      	subs	r6, #1
    fc14:	2f00      	cmp	r7, #0
    fc16:	d0e3      	beq.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc18:	f898 c000 	ldrb.w	ip, [r8]
    fc1c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fc20:	d0de      	beq.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc22:	45cc      	cmp	ip, r9
    fc24:	d1dc      	bne.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc26:	429d      	cmp	r5, r3
    fc28:	bf08      	it	eq
    fc2a:	4294      	cmpeq	r4, r2
    fc2c:	f080 8275 	bcs.w	1011a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x11a>
    fc30:	ab50      	add	r3, sp, #320	; 0x140
    fc32:	9f07      	ldr	r7, [sp, #28]
    fc34:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    fc38:	1b9b      	subs	r3, r3, r6
    fc3a:	f8dd 900c 	ldr.w	r9, [sp, #12]
    fc3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    fc42:	f8cd b00c 	str.w	fp, [sp, #12]
    fc46:	f8dd 8010 	ldr.w	r8, [sp, #16]
    fc4a:	9307      	str	r3, [sp, #28]
    fc4c:	f7fe bf78 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    fc50:	aa24      	add	r2, sp, #144	; 0x90
    fc52:	ee19 1a90 	vmov	r1, s19
    fc56:	ee19 0a10 	vmov	r0, s18
    fc5a:	f01b ff05 	bl	2ba68 <__ssprint_r>
    fc5e:	2800      	cmp	r0, #0
    fc60:	f47f aaae 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fc64:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fc66:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fc6a:	f7fe bfda 	b.w	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
    fc6e:	aa24      	add	r2, sp, #144	; 0x90
    fc70:	ee19 1a90 	vmov	r1, s19
    fc74:	4648      	mov	r0, r9
    fc76:	f01b fef7 	bl	2ba68 <__ssprint_r>
    fc7a:	2800      	cmp	r0, #0
    fc7c:	f47f aaa2 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
    fc80:	7838      	ldrb	r0, [r7, #0]
    fc82:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fc86:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fc88:	e6b8      	b.n	f9fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf9c>
    fc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc8c:	9905      	ldr	r1, [sp, #20]
    fc8e:	f853 2b04 	ldr.w	r2, [r3], #4
    fc92:	6011      	str	r1, [r2, #0]
    fc94:	9309      	str	r3, [sp, #36]	; 0x24
    fc96:	f7fe be3f 	b.w	e918 <_svfprintf_r+0x60>
    fc9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fc9c:	ee19 ba90 	vmov	fp, s19
    fca0:	2b00      	cmp	r3, #0
    fca2:	f43f ac3c 	beq.w	f51e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xabe>
    fca6:	ee19 0a10 	vmov	r0, s18
    fcaa:	aa24      	add	r2, sp, #144	; 0x90
    fcac:	ee19 1a90 	vmov	r1, s19
    fcb0:	f01b feda 	bl	2ba68 <__ssprint_r>
    fcb4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    fcb8:	e433      	b.n	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
    fcba:	4653      	mov	r3, sl
    fcbc:	4632      	mov	r2, r6
    fcbe:	46b2      	mov	sl, r6
    fcc0:	960d      	str	r6, [sp, #52]	; 0x34
    fcc2:	2b06      	cmp	r3, #6
    fcc4:	bf28      	it	cs
    fcc6:	2306      	movcs	r3, #6
    fcc8:	e9cd 6408 	strd	r6, r4, [sp, #32]
    fccc:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
    fcd0:	9304      	str	r3, [sp, #16]
    fcd2:	4e1f      	ldr	r6, [pc, #124]	; (fd50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12f0>)
    fcd4:	9307      	str	r3, [sp, #28]
    fcd6:	f7fe bf3f 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    fcda:	4699      	mov	r9, r3
    fcdc:	f109 0901 	add.w	r9, r9, #1
    fce0:	4434      	add	r4, r6
    fce2:	f8c8 5000 	str.w	r5, [r8]
    fce6:	f1b9 0f07 	cmp.w	r9, #7
    fcea:	f8c8 6004 	str.w	r6, [r8, #4]
    fcee:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    fcf2:	f77f aaa7 	ble.w	f244 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e4>
    fcf6:	e439      	b.n	f56c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0c>
    fcf8:	9b03      	ldr	r3, [sp, #12]
    fcfa:	f413 7f00 	tst.w	r3, #512	; 0x200
    fcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd00:	f853 4b04 	ldr.w	r4, [r3], #4
    fd04:	bf18      	it	ne
    fd06:	b264      	sxtbne	r4, r4
    fd08:	9309      	str	r3, [sp, #36]	; 0x24
    fd0a:	17e5      	asrs	r5, r4, #31
    fd0c:	4622      	mov	r2, r4
    fd0e:	462b      	mov	r3, r5
    fd10:	f7fe bec3 	b.w	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    fd14:	9b03      	ldr	r3, [sp, #12]
    fd16:	2500      	movs	r5, #0
    fd18:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd1e:	f853 4b04 	ldr.w	r4, [r3], #4
    fd22:	bf18      	it	ne
    fd24:	b2e4      	uxtbne	r4, r4
    fd26:	9309      	str	r3, [sp, #36]	; 0x24
    fd28:	f7fe bee2 	b.w	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    fd2c:	9b03      	ldr	r3, [sp, #12]
    fd2e:	2500      	movs	r5, #0
    fd30:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd36:	f853 4b04 	ldr.w	r4, [r3], #4
    fd3a:	bf18      	it	ne
    fd3c:	b2e4      	uxtbne	r4, r4
    fd3e:	9309      	str	r3, [sp, #36]	; 0x24
    fd40:	e58c      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fd42:	4d02      	ldr	r5, [pc, #8]	; (fd4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12ec>)
    fd44:	f7ff b9e8 	b.w	f118 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6b8>
    fd48:	0002f544 	.word	0x0002f544
    fd4c:	0002f558 	.word	0x0002f558
    fd50:	0002f53c 	.word	0x0002f53c
    fd54:	f1ba 3fff 	cmp.w	sl, #4294967295
    fd58:	f000 80f0 	beq.w	ff3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14dc>
    fd5c:	f1ba 0f00 	cmp.w	sl, #0
    fd60:	f040 80ee 	bne.w	ff40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e0>
    fd64:	9b04      	ldr	r3, [sp, #16]
    fd66:	2b47      	cmp	r3, #71	; 0x47
    fd68:	f040 80ea 	bne.w	ff40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e0>
    fd6c:	9a03      	ldr	r2, [sp, #12]
    fd6e:	f04f 0a01 	mov.w	sl, #1
    fd72:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
    fd76:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    fd7a:	4663      	mov	r3, ip
    fd7c:	2b00      	cmp	r3, #0
    fd7e:	f2c0 82b5 	blt.w	102ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ec>
    fd82:	4654      	mov	r4, sl
    fd84:	9013      	str	r0, [sp, #76]	; 0x4c
    fd86:	ec4c bb1b 	vmov	d11, fp, ip
    fd8a:	a922      	add	r1, sp, #136	; 0x88
    fd8c:	a81f      	add	r0, sp, #124	; 0x7c
    fd8e:	ab1e      	add	r3, sp, #120	; 0x78
    fd90:	eeb0 0a4b 	vmov.f32	s0, s22
    fd94:	eef0 0a6b 	vmov.f32	s1, s23
    fd98:	9101      	str	r1, [sp, #4]
    fd9a:	4622      	mov	r2, r4
    fd9c:	9000      	str	r0, [sp, #0]
    fd9e:	2102      	movs	r1, #2
    fda0:	ee19 0a10 	vmov	r0, s18
    fda4:	f000 fb4c 	bl	10440 <_dtoa_r>
    fda8:	9b04      	ldr	r3, [sp, #16]
    fdaa:	4606      	mov	r6, r0
    fdac:	2b47      	cmp	r3, #71	; 0x47
    fdae:	f040 81de 	bne.w	1016e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x16e>
    fdb2:	9b03      	ldr	r3, [sp, #12]
    fdb4:	07db      	lsls	r3, r3, #31
    fdb6:	f100 81da 	bmi.w	1016e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x16e>
    fdba:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fdbc:	1b9b      	subs	r3, r3, r6
    fdbe:	930c      	str	r3, [sp, #48]	; 0x30
    fdc0:	9b04      	ldr	r3, [sp, #16]
    fdc2:	2b47      	cmp	r3, #71	; 0x47
    fdc4:	f040 810f 	bne.w	ffe6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1586>
    fdc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fdca:	4553      	cmp	r3, sl
    fdcc:	930a      	str	r3, [sp, #40]	; 0x28
    fdce:	dc02      	bgt.n	fdd6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1376>
    fdd0:	3303      	adds	r3, #3
    fdd2:	f280 812a 	bge.w	1002a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2a>
    fdd6:	2300      	movs	r3, #0
    fdd8:	f1a9 0902 	sub.w	r9, r9, #2
    fddc:	9308      	str	r3, [sp, #32]
    fdde:	f029 0320 	bic.w	r3, r9, #32
    fde2:	9304      	str	r3, [sp, #16]
    fde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fde6:	9a04      	ldr	r2, [sp, #16]
    fde8:	3b01      	subs	r3, #1
    fdea:	2a41      	cmp	r2, #65	; 0x41
    fdec:	931e      	str	r3, [sp, #120]	; 0x78
    fdee:	f040 8273 	bne.w	102d8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2d8>
    fdf2:	f109 020f 	add.w	r2, r9, #15
    fdf6:	b2d2      	uxtb	r2, r2
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
    fdfe:	f2c0 82c2 	blt.w	10386 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x386>
    fe02:	222b      	movs	r2, #43	; 0x2b
    fe04:	2b09      	cmp	r3, #9
    fe06:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
    fe0a:	f340 82a8 	ble.w	1035e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x35e>
    fe0e:	f10d 0e8f 	add.w	lr, sp, #143	; 0x8f
    fe12:	f8df c624 	ldr.w	ip, [pc, #1572]	; 10438 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x438>
    fe16:	4670      	mov	r0, lr
    fe18:	fb8c 1203 	smull	r1, r2, ip, r3
    fe1c:	17d9      	asrs	r1, r3, #31
    fe1e:	461d      	mov	r5, r3
    fe20:	4604      	mov	r4, r0
    fe22:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
    fe26:	3801      	subs	r0, #1
    fe28:	2d63      	cmp	r5, #99	; 0x63
    fe2a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    fe2e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    fe32:	460b      	mov	r3, r1
    fe34:	f102 0230 	add.w	r2, r2, #48	; 0x30
    fe38:	f804 2c01 	strb.w	r2, [r4, #-1]
    fe3c:	dcec      	bgt.n	fe18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13b8>
    fe3e:	3330      	adds	r3, #48	; 0x30
    fe40:	1ea2      	subs	r2, r4, #2
    fe42:	b2db      	uxtb	r3, r3
    fe44:	4596      	cmp	lr, r2
    fe46:	f800 3c01 	strb.w	r3, [r0, #-1]
    fe4a:	f240 82d6 	bls.w	103fa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3fa>
    fe4e:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    fe52:	e001      	b.n	fe58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13f8>
    fe54:	f810 3b01 	ldrb.w	r3, [r0], #1
    fe58:	4586      	cmp	lr, r0
    fe5a:	f802 3b01 	strb.w	r3, [r2], #1
    fe5e:	d1f9      	bne.n	fe54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13f4>
    fe60:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    fe64:	f10d 0182 	add.w	r1, sp, #130	; 0x82
    fe68:	aa20      	add	r2, sp, #128	; 0x80
    fe6a:	1b1b      	subs	r3, r3, r4
    fe6c:	440b      	add	r3, r1
    fe6e:	1a9b      	subs	r3, r3, r2
    fe70:	9314      	str	r3, [sp, #80]	; 0x50
    fe72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe74:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fe76:	2b01      	cmp	r3, #1
    fe78:	441a      	add	r2, r3
    fe7a:	9207      	str	r2, [sp, #28]
    fe7c:	f340 827e 	ble.w	1037c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x37c>
    fe80:	9b07      	ldr	r3, [sp, #28]
    fe82:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fe84:	4413      	add	r3, r2
    fe86:	9307      	str	r3, [sp, #28]
    fe88:	9b03      	ldr	r3, [sp, #12]
    fe8a:	2200      	movs	r2, #0
    fe8c:	9907      	ldr	r1, [sp, #28]
    fe8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    fe92:	920d      	str	r2, [sp, #52]	; 0x34
    fe94:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    fe98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fe9c:	9104      	str	r1, [sp, #16]
    fe9e:	9303      	str	r3, [sp, #12]
    fea0:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    fea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fea6:	2b00      	cmp	r3, #0
    fea8:	f040 80d9 	bne.w	1005e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x5e>
    feac:	469a      	mov	sl, r3
    feae:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    feb2:	f7fe be51 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    feb6:	232d      	movs	r3, #45	; 0x2d
    feb8:	461a      	mov	r2, r3
    feba:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    febe:	f7fe bf1e 	b.w	ecfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x29e>
    fec2:	4614      	mov	r4, r2
    fec4:	3301      	adds	r3, #1
    fec6:	444c      	add	r4, r9
    fec8:	f8c8 5000 	str.w	r5, [r8]
    fecc:	2b07      	cmp	r3, #7
    fece:	f8c8 9004 	str.w	r9, [r8, #4]
    fed2:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fed6:	dc6b      	bgt.n	ffb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1550>
    fed8:	f108 0808 	add.w	r8, r8, #8
    fedc:	f7ff bab0 	b.w	f440 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e0>
    fee0:	aa24      	add	r2, sp, #144	; 0x90
    fee2:	ee19 1a90 	vmov	r1, s19
    fee6:	ee19 0a10 	vmov	r0, s18
    feea:	f01b fdbd 	bl	2ba68 <__ssprint_r>
    feee:	2800      	cmp	r0, #0
    fef0:	f47f a966 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fef4:	991e      	ldr	r1, [sp, #120]	; 0x78
    fef6:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fefa:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fefc:	e5fd      	b.n	fafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x109a>
    fefe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ff00:	4416      	add	r6, r2
    ff02:	1ad3      	subs	r3, r2, r3
    ff04:	eba6 060b 	sub.w	r6, r6, fp
    ff08:	429e      	cmp	r6, r3
    ff0a:	bfa8      	it	ge
    ff0c:	461e      	movge	r6, r3
    ff0e:	f7ff bace 	b.w	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
    ff12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ff14:	9905      	ldr	r1, [sp, #20]
    ff16:	f853 2b04 	ldr.w	r2, [r3], #4
    ff1a:	8011      	strh	r1, [r2, #0]
    ff1c:	9309      	str	r3, [sp, #36]	; 0x24
    ff1e:	f7fe bcfb 	b.w	e918 <_svfprintf_r+0x60>
    ff22:	f10a 0101 	add.w	r1, sl, #1
    ff26:	ee19 0a10 	vmov	r0, s18
    ff2a:	f015 fd11 	bl	25950 <_malloc_r>
    ff2e:	4606      	mov	r6, r0
    ff30:	2800      	cmp	r0, #0
    ff32:	f000 8271 	beq.w	10418 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x418>
    ff36:	9008      	str	r0, [sp, #32]
    ff38:	f7ff bbf5 	b.w	f726 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcc6>
    ff3c:	f04f 0a06 	mov.w	sl, #6
    ff40:	9a03      	ldr	r2, [sp, #12]
    ff42:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ff46:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    ff4a:	2900      	cmp	r1, #0
    ff4c:	f2c0 81ce 	blt.w	102ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ec>
    ff50:	2300      	movs	r3, #0
    ff52:	ec41 0b1b 	vmov	d11, r0, r1
    ff56:	9313      	str	r3, [sp, #76]	; 0x4c
    ff58:	9b04      	ldr	r3, [sp, #16]
    ff5a:	2b46      	cmp	r3, #70	; 0x46
    ff5c:	f040 80f2 	bne.w	10144 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x144>
    ff60:	a922      	add	r1, sp, #136	; 0x88
    ff62:	a81f      	add	r0, sp, #124	; 0x7c
    ff64:	ab1e      	add	r3, sp, #120	; 0x78
    ff66:	eeb0 0a4b 	vmov.f32	s0, s22
    ff6a:	eef0 0a6b 	vmov.f32	s1, s23
    ff6e:	9101      	str	r1, [sp, #4]
    ff70:	4652      	mov	r2, sl
    ff72:	9000      	str	r0, [sp, #0]
    ff74:	2103      	movs	r1, #3
    ff76:	ee19 0a10 	vmov	r0, s18
    ff7a:	f000 fa61 	bl	10440 <_dtoa_r>
    ff7e:	7803      	ldrb	r3, [r0, #0]
    ff80:	4606      	mov	r6, r0
    ff82:	2b30      	cmp	r3, #48	; 0x30
    ff84:	d108      	bne.n	ff98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1538>
    ff86:	2200      	movs	r2, #0
    ff88:	2300      	movs	r3, #0
    ff8a:	ec51 0b1b 	vmov	r0, r1, d11
    ff8e:	f7fc fb69 	bl	c664 <__aeabi_dcmpeq>
    ff92:	2800      	cmp	r0, #0
    ff94:	f000 821f 	beq.w	103d6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3d6>
    ff98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ff9a:	4453      	add	r3, sl
    ff9c:	18f4      	adds	r4, r6, r3
    ff9e:	2200      	movs	r2, #0
    ffa0:	2300      	movs	r3, #0
    ffa2:	ec51 0b1b 	vmov	r0, r1, d11
    ffa6:	f7fc fb5d 	bl	c664 <__aeabi_dcmpeq>
    ffaa:	b180      	cbz	r0, ffce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x156e>
    ffac:	4623      	mov	r3, r4
    ffae:	e705      	b.n	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffb0:	aa24      	add	r2, sp, #144	; 0x90
    ffb2:	ee19 1a90 	vmov	r1, s19
    ffb6:	ee19 0a10 	vmov	r0, s18
    ffba:	f01b fd55 	bl	2ba68 <__ssprint_r>
    ffbe:	2800      	cmp	r0, #0
    ffc0:	f47f a8fe 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    ffc4:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ffc6:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ffca:	f7ff ba39 	b.w	f440 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e0>
    ffce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffd0:	42a3      	cmp	r3, r4
    ffd2:	f4bf aef3 	bcs.w	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffd6:	2130      	movs	r1, #48	; 0x30
    ffd8:	1c5a      	adds	r2, r3, #1
    ffda:	9222      	str	r2, [sp, #136]	; 0x88
    ffdc:	7019      	strb	r1, [r3, #0]
    ffde:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffe0:	429c      	cmp	r4, r3
    ffe2:	d8f9      	bhi.n	ffd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1578>
    ffe4:	e6ea      	b.n	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffe6:	9b04      	ldr	r3, [sp, #16]
    ffe8:	2b46      	cmp	r3, #70	; 0x46
    ffea:	f040 8200 	bne.w	103ee <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3ee>
    ffee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    fff0:	9b03      	ldr	r3, [sp, #12]
    fff2:	2a00      	cmp	r2, #0
    fff4:	920a      	str	r2, [sp, #40]	; 0x28
    fff6:	f003 0301 	and.w	r3, r3, #1
    fffa:	f340 81ce 	ble.w	1039a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x39a>
    fffe:	ea53 030a 	orrs.w	r3, r3, sl
   10002:	f040 816c 	bne.w	102de <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2de>
   10006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10008:	f04f 0966 	mov.w	r9, #102	; 0x66
   1000c:	9307      	str	r3, [sp, #28]
   1000e:	9b03      	ldr	r3, [sp, #12]
   10010:	055a      	lsls	r2, r3, #21
   10012:	f100 812d 	bmi.w	10270 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x270>
   10016:	9b07      	ldr	r3, [sp, #28]
   10018:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1001c:	9304      	str	r3, [sp, #16]
   1001e:	2300      	movs	r3, #0
   10020:	9503      	str	r5, [sp, #12]
   10022:	9308      	str	r3, [sp, #32]
   10024:	930d      	str	r3, [sp, #52]	; 0x34
   10026:	930b      	str	r3, [sp, #44]	; 0x2c
   10028:	e73c      	b.n	fea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1444>
   1002a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1002c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1002e:	428b      	cmp	r3, r1
   10030:	f2c0 809f 	blt.w	10172 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x172>
   10034:	9a03      	ldr	r2, [sp, #12]
   10036:	07d4      	lsls	r4, r2, #31
   10038:	f140 818e 	bpl.w	10358 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x358>
   1003c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1003e:	4413      	add	r3, r2
   10040:	9307      	str	r3, [sp, #28]
   10042:	9b03      	ldr	r3, [sp, #12]
   10044:	0558      	lsls	r0, r3, #21
   10046:	d503      	bpl.n	10050 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x50>
   10048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1004a:	2b00      	cmp	r3, #0
   1004c:	f300 810e 	bgt.w	1026c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x26c>
   10050:	9b07      	ldr	r3, [sp, #28]
   10052:	f04f 0967 	mov.w	r9, #103	; 0x67
   10056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1005a:	9304      	str	r3, [sp, #16]
   1005c:	e7df      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   1005e:	222d      	movs	r2, #45	; 0x2d
   10060:	f04f 0a00 	mov.w	sl, #0
   10064:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
   10068:	f7fe bd77 	b.w	eb5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa>
   1006c:	aa24      	add	r2, sp, #144	; 0x90
   1006e:	ee19 1a90 	vmov	r1, s19
   10072:	ee19 0a10 	vmov	r0, s18
   10076:	f01b fcf7 	bl	2ba68 <__ssprint_r>
   1007a:	2800      	cmp	r0, #0
   1007c:	f47f a8a0 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   10080:	991e      	ldr	r1, [sp, #120]	; 0x78
   10082:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10086:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1008a:	e54a      	b.n	fb22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c2>
   1008c:	aa24      	add	r2, sp, #144	; 0x90
   1008e:	ee19 1a90 	vmov	r1, s19
   10092:	ee19 0a10 	vmov	r0, s18
   10096:	f01b fce7 	bl	2ba68 <__ssprint_r>
   1009a:	2800      	cmp	r0, #0
   1009c:	f47f a890 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   100a0:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100a2:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100a6:	f7ff b9c3 	b.w	f430 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9d0>
   100aa:	46d1      	mov	r9, sl
   100ac:	f7ff ba31 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   100b0:	46b3      	mov	fp, r6
   100b2:	f7ff ba2e 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   100b6:	aa24      	add	r2, sp, #144	; 0x90
   100b8:	ee19 1a90 	vmov	r1, s19
   100bc:	ee19 0a10 	vmov	r0, s18
   100c0:	f01b fcd2 	bl	2ba68 <__ssprint_r>
   100c4:	2800      	cmp	r0, #0
   100c6:	f47f a87b 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   100ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   100cc:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100d0:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100d2:	f7ff b9d4 	b.w	f47e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa1e>
   100d6:	9b03      	ldr	r3, [sp, #12]
   100d8:	07da      	lsls	r2, r3, #31
   100da:	f57e adbc 	bpl.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
   100de:	9b25      	ldr	r3, [sp, #148]	; 0x94
   100e0:	9910      	ldr	r1, [sp, #64]	; 0x40
   100e2:	3301      	adds	r3, #1
   100e4:	9811      	ldr	r0, [sp, #68]	; 0x44
   100e6:	190a      	adds	r2, r1, r4
   100e8:	f8c8 1004 	str.w	r1, [r8, #4]
   100ec:	2b07      	cmp	r3, #7
   100ee:	f8c8 0000 	str.w	r0, [r8]
   100f2:	9226      	str	r2, [sp, #152]	; 0x98
   100f4:	9325      	str	r3, [sp, #148]	; 0x94
   100f6:	dcb9      	bgt.n	1006c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6c>
   100f8:	f108 0808 	add.w	r8, r8, #8
   100fc:	e514      	b.n	fb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c8>
   100fe:	aa24      	add	r2, sp, #144	; 0x90
   10100:	ee19 1a90 	vmov	r1, s19
   10104:	4648      	mov	r0, r9
   10106:	f01b fcaf 	bl	2ba68 <__ssprint_r>
   1010a:	2800      	cmp	r0, #0
   1010c:	f47f a85a 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
   10110:	7838      	ldrb	r0, [r7, #0]
   10112:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10116:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10118:	e476      	b.n	fa08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa8>
   1011a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1011c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1011e:	1af6      	subs	r6, r6, r3
   10120:	461a      	mov	r2, r3
   10122:	4630      	mov	r0, r6
   10124:	f016 fbc6 	bl	268b4 <strncpy>
   10128:	f898 3001 	ldrb.w	r3, [r8, #1]
   1012c:	b10b      	cbz	r3, 10132 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x132>
   1012e:	f108 0801 	add.w	r8, r8, #1
   10132:	4620      	mov	r0, r4
   10134:	4629      	mov	r1, r5
   10136:	220a      	movs	r2, #10
   10138:	2300      	movs	r3, #0
   1013a:	f04f 0900 	mov.w	r9, #0
   1013e:	f7fc fb8b 	bl	c858 <__aeabi_uldivmod>
   10142:	e553      	b.n	fbec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118c>
   10144:	2b45      	cmp	r3, #69	; 0x45
   10146:	f040 8156 	bne.w	103f6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3f6>
   1014a:	a822      	add	r0, sp, #136	; 0x88
   1014c:	a91f      	add	r1, sp, #124	; 0x7c
   1014e:	f10a 0401 	add.w	r4, sl, #1
   10152:	eeb0 0a4b 	vmov.f32	s0, s22
   10156:	eef0 0a6b 	vmov.f32	s1, s23
   1015a:	ab1e      	add	r3, sp, #120	; 0x78
   1015c:	4622      	mov	r2, r4
   1015e:	e9cd 1000 	strd	r1, r0, [sp]
   10162:	2102      	movs	r1, #2
   10164:	ee19 0a10 	vmov	r0, s18
   10168:	f000 f96a 	bl	10440 <_dtoa_r>
   1016c:	4606      	mov	r6, r0
   1016e:	4434      	add	r4, r6
   10170:	e715      	b.n	ff9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x153e>
   10172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10174:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10176:	189a      	adds	r2, r3, r2
   10178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1017a:	2b00      	cmp	r3, #0
   1017c:	9207      	str	r2, [sp, #28]
   1017e:	f340 80c0 	ble.w	10302 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x302>
   10182:	f04f 0967 	mov.w	r9, #103	; 0x67
   10186:	e742      	b.n	1000e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xe>
   10188:	f8cd a010 	str.w	sl, [sp, #16]
   1018c:	f8cd a01c 	str.w	sl, [sp, #28]
   10190:	4682      	mov	sl, r0
   10192:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   10196:	9409      	str	r4, [sp, #36]	; 0x24
   10198:	900d      	str	r0, [sp, #52]	; 0x34
   1019a:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
   1019e:	f7fe bcdb 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
   101a2:	aa24      	add	r2, sp, #144	; 0x90
   101a4:	ee19 1a90 	vmov	r1, s19
   101a8:	ee19 0a10 	vmov	r0, s18
   101ac:	f01b fc5c 	bl	2ba68 <__ssprint_r>
   101b0:	2800      	cmp	r0, #0
   101b2:	f47f a805 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   101b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   101b8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   101bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   101be:	9c26      	ldr	r4, [sp, #152]	; 0x98
   101c0:	1ad3      	subs	r3, r2, r3
   101c2:	f7ff b974 	b.w	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
   101c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   101c8:	f7ff b892 	b.w	f2f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x890>
   101cc:	f1c1 0900 	rsb	r9, r1, #0
   101d0:	3110      	adds	r1, #16
   101d2:	4d96      	ldr	r5, [pc, #600]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   101d4:	da29      	bge.n	1022a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x22a>
   101d6:	2410      	movs	r4, #16
   101d8:	ee19 aa10 	vmov	sl, s18
   101dc:	ee19 ba90 	vmov	fp, s19
   101e0:	e004      	b.n	101ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1ec>
   101e2:	f1a9 0910 	sub.w	r9, r9, #16
   101e6:	f1b9 0f10 	cmp.w	r9, #16
   101ea:	dd1e      	ble.n	1022a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x22a>
   101ec:	3301      	adds	r3, #1
   101ee:	3210      	adds	r2, #16
   101f0:	f8c8 5000 	str.w	r5, [r8]
   101f4:	f108 0808 	add.w	r8, r8, #8
   101f8:	2b07      	cmp	r3, #7
   101fa:	f848 4c04 	str.w	r4, [r8, #-4]
   101fe:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10202:	ddee      	ble.n	101e2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e2>
   10204:	aa24      	add	r2, sp, #144	; 0x90
   10206:	4659      	mov	r1, fp
   10208:	4650      	mov	r0, sl
   1020a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   1020e:	f01b fc2b 	bl	2ba68 <__ssprint_r>
   10212:	2800      	cmp	r0, #0
   10214:	f47f af49 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
   10218:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1021c:	e7e1      	b.n	101e2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e2>
   1021e:	2300      	movs	r3, #0
   10220:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
   10224:	9313      	str	r3, [sp, #76]	; 0x4c
   10226:	f7ff ba8b 	b.w	f740 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xce0>
   1022a:	3301      	adds	r3, #1
   1022c:	444a      	add	r2, r9
   1022e:	f8c8 5000 	str.w	r5, [r8]
   10232:	2b07      	cmp	r3, #7
   10234:	f8c8 9004 	str.w	r9, [r8, #4]
   10238:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1023c:	f77f af5c 	ble.w	100f8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xf8>
   10240:	aa24      	add	r2, sp, #144	; 0x90
   10242:	ee19 1a90 	vmov	r1, s19
   10246:	ee19 0a10 	vmov	r0, s18
   1024a:	f01b fc0d 	bl	2ba68 <__ssprint_r>
   1024e:	2800      	cmp	r0, #0
   10250:	f47e afb6 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   10254:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10256:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   1025a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1025c:	e464      	b.n	fb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c8>
   1025e:	4d73      	ldr	r5, [pc, #460]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   10260:	f7fe bf13 	b.w	f08a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x62a>
   10264:	46d9      	mov	r9, fp
   10266:	46a3      	mov	fp, r4
   10268:	f7ff b953 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   1026c:	f04f 0967 	mov.w	r9, #103	; 0x67
   10270:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10272:	780b      	ldrb	r3, [r1, #0]
   10274:	2bff      	cmp	r3, #255	; 0xff
   10276:	f000 80cb 	beq.w	10410 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x410>
   1027a:	2400      	movs	r4, #0
   1027c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1027e:	4620      	mov	r0, r4
   10280:	e003      	b.n	1028a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x28a>
   10282:	3001      	adds	r0, #1
   10284:	3101      	adds	r1, #1
   10286:	2bff      	cmp	r3, #255	; 0xff
   10288:	d008      	beq.n	1029c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x29c>
   1028a:	4293      	cmp	r3, r2
   1028c:	da06      	bge.n	1029c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x29c>
   1028e:	1ad2      	subs	r2, r2, r3
   10290:	784b      	ldrb	r3, [r1, #1]
   10292:	2b00      	cmp	r3, #0
   10294:	d1f5      	bne.n	10282 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x282>
   10296:	3401      	adds	r4, #1
   10298:	780b      	ldrb	r3, [r1, #0]
   1029a:	e7f4      	b.n	10286 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x286>
   1029c:	920a      	str	r2, [sp, #40]	; 0x28
   1029e:	9117      	str	r1, [sp, #92]	; 0x5c
   102a0:	900b      	str	r0, [sp, #44]	; 0x2c
   102a2:	940d      	str	r4, [sp, #52]	; 0x34
   102a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   102a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102a8:	9907      	ldr	r1, [sp, #28]
   102aa:	4413      	add	r3, r2
   102ac:	2200      	movs	r2, #0
   102ae:	9503      	str	r5, [sp, #12]
   102b0:	9208      	str	r2, [sp, #32]
   102b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   102b4:	fb02 1303 	mla	r3, r2, r3, r1
   102b8:	9307      	str	r3, [sp, #28]
   102ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   102be:	9304      	str	r3, [sp, #16]
   102c0:	e5f0      	b.n	fea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1444>
   102c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   102c4:	2b00      	cmp	r3, #0
   102c6:	db63      	blt.n	10390 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x390>
   102c8:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   102cc:	2103      	movs	r1, #3
   102ce:	4e58      	ldr	r6, [pc, #352]	; (10430 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x430>)
   102d0:	4b58      	ldr	r3, [pc, #352]	; (10434 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x434>)
   102d2:	9104      	str	r1, [sp, #16]
   102d4:	f7fe bd17 	b.w	ed06 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a6>
   102d8:	fa5f f289 	uxtb.w	r2, r9
   102dc:	e58c      	b.n	fdf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1398>
   102de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   102e0:	f04f 0966 	mov.w	r9, #102	; 0x66
   102e4:	18d3      	adds	r3, r2, r3
   102e6:	4453      	add	r3, sl
   102e8:	9307      	str	r3, [sp, #28]
   102ea:	e690      	b.n	1000e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xe>
   102ec:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
   102f0:	232d      	movs	r3, #45	; 0x2d
   102f2:	ee0b 1a10 	vmov	s22, r1
   102f6:	9313      	str	r3, [sp, #76]	; 0x4c
   102f8:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   102fc:	ee0b 3a90 	vmov	s23, r3
   10300:	e62a      	b.n	ff58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14f8>
   10302:	f1c3 0301 	rsb	r3, r3, #1
   10306:	f04f 0967 	mov.w	r9, #103	; 0x67
   1030a:	441a      	add	r2, r3
   1030c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10310:	9207      	str	r2, [sp, #28]
   10312:	9304      	str	r3, [sp, #16]
   10314:	e683      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   10316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10318:	9322      	str	r3, [sp, #136]	; 0x88
   1031a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1031c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   10320:	7bd9      	ldrb	r1, [r3, #15]
   10322:	465b      	mov	r3, fp
   10324:	428a      	cmp	r2, r1
   10326:	d109      	bne.n	1033c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x33c>
   10328:	2030      	movs	r0, #48	; 0x30
   1032a:	f803 0c01 	strb.w	r0, [r3, #-1]
   1032e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10330:	1e5a      	subs	r2, r3, #1
   10332:	9222      	str	r2, [sp, #136]	; 0x88
   10334:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   10338:	4291      	cmp	r1, r2
   1033a:	d0f6      	beq.n	1032a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x32a>
   1033c:	2a39      	cmp	r2, #57	; 0x39
   1033e:	d053      	beq.n	103e8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3e8>
   10340:	3201      	adds	r2, #1
   10342:	b2d2      	uxtb	r2, r2
   10344:	f803 2c01 	strb.w	r2, [r3, #-1]
   10348:	f7ff ba71 	b.w	f82e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdce>
   1034c:	ee19 ba90 	vmov	fp, s19
   10350:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10354:	f7ff b8e5 	b.w	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
   10358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1035a:	9307      	str	r3, [sp, #28]
   1035c:	e671      	b.n	10042 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42>
   1035e:	9a04      	ldr	r2, [sp, #16]
   10360:	2a41      	cmp	r2, #65	; 0x41
   10362:	d03c      	beq.n	103de <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3de>
   10364:	2130      	movs	r1, #48	; 0x30
   10366:	f10d 0283 	add.w	r2, sp, #131	; 0x83
   1036a:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
   1036e:	3330      	adds	r3, #48	; 0x30
   10370:	a920      	add	r1, sp, #128	; 0x80
   10372:	f802 3b01 	strb.w	r3, [r2], #1
   10376:	1a53      	subs	r3, r2, r1
   10378:	9314      	str	r3, [sp, #80]	; 0x50
   1037a:	e57a      	b.n	fe72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1412>
   1037c:	9b03      	ldr	r3, [sp, #12]
   1037e:	07dd      	lsls	r5, r3, #31
   10380:	f57f ad82 	bpl.w	fe88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1428>
   10384:	e57c      	b.n	fe80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1420>
   10386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10388:	222d      	movs	r2, #45	; 0x2d
   1038a:	f1c3 0301 	rsb	r3, r3, #1
   1038e:	e539      	b.n	fe04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13a4>
   10390:	232d      	movs	r3, #45	; 0x2d
   10392:	461a      	mov	r2, r3
   10394:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
   10398:	e798      	b.n	102cc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2cc>
   1039a:	ea53 030a 	orrs.w	r3, r3, sl
   1039e:	d105      	bne.n	103ac <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3ac>
   103a0:	2301      	movs	r3, #1
   103a2:	f04f 0966 	mov.w	r9, #102	; 0x66
   103a6:	9304      	str	r3, [sp, #16]
   103a8:	9307      	str	r3, [sp, #28]
   103aa:	e638      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   103ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   103ae:	f04f 0966 	mov.w	r9, #102	; 0x66
   103b2:	3301      	adds	r3, #1
   103b4:	4453      	add	r3, sl
   103b6:	9307      	str	r3, [sp, #28]
   103b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103bc:	9304      	str	r3, [sp, #16]
   103be:	e62e      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   103c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103c2:	f897 9001 	ldrb.w	r9, [r7, #1]
   103c6:	4617      	mov	r7, r2
   103c8:	f853 2b04 	ldr.w	r2, [r3], #4
   103cc:	ea42 7ae2 	orr.w	sl, r2, r2, asr #31
   103d0:	9309      	str	r3, [sp, #36]	; 0x24
   103d2:	f7fe bacf 	b.w	e974 <_svfprintf_r+0xbc>
   103d6:	f1ca 0301 	rsb	r3, sl, #1
   103da:	931e      	str	r3, [sp, #120]	; 0x78
   103dc:	e5dd      	b.n	ff9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x153a>
   103de:	f10d 0282 	add.w	r2, sp, #130	; 0x82
   103e2:	e7c4      	b.n	1036e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x36e>
   103e4:	4d11      	ldr	r5, [pc, #68]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   103e6:	e56d      	b.n	fec4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1464>
   103e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103ea:	7a92      	ldrb	r2, [r2, #10]
   103ec:	e7aa      	b.n	10344 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x344>
   103ee:	2300      	movs	r3, #0
   103f0:	9308      	str	r3, [sp, #32]
   103f2:	f7ff ba23 	b.w	f83c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xddc>
   103f6:	4654      	mov	r4, sl
   103f8:	e4c7      	b.n	fd8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x132a>
   103fa:	2302      	movs	r3, #2
   103fc:	9314      	str	r3, [sp, #80]	; 0x50
   103fe:	e538      	b.n	fe72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1412>
   10400:	230c      	movs	r3, #12
   10402:	f04f 32ff 	mov.w	r2, #4294967295
   10406:	f8c9 3000 	str.w	r3, [r9]
   1040a:	9205      	str	r2, [sp, #20]
   1040c:	f7ff b890 	b.w	f530 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xad0>
   10410:	2300      	movs	r3, #0
   10412:	930d      	str	r3, [sp, #52]	; 0x34
   10414:	930b      	str	r3, [sp, #44]	; 0x2c
   10416:	e745      	b.n	102a4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2a4>
   10418:	ee19 ba90 	vmov	fp, s19
   1041c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10424:	f8ab 300c 	strh.w	r3, [fp, #12]
   10428:	f7ff b87b 	b.w	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
   1042c:	0002f558 	.word	0x0002f558
   10430:	0002f50c 	.word	0x0002f50c
   10434:	0002f510 	.word	0x0002f510
   10438:	66666667 	.word	0x66666667
   1043c:	00000000 	.word	0x00000000

00010440 <_dtoa_r>:
   10440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10444:	ed2d 8b04 	vpush	{d8-d9}
   10448:	b099      	sub	sp, #100	; 0x64
   1044a:	4604      	mov	r4, r0
   1044c:	9101      	str	r1, [sp, #4]
   1044e:	6c01      	ldr	r1, [r0, #64]	; 0x40
   10450:	9d26      	ldr	r5, [sp, #152]	; 0x98
   10452:	920b      	str	r2, [sp, #44]	; 0x2c
   10454:	9307      	str	r3, [sp, #28]
   10456:	ec57 6b10 	vmov	r6, r7, d0
   1045a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1045e:	b141      	cbz	r1, 10472 <_dtoa_r+0x32>
   10460:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10462:	2301      	movs	r3, #1
   10464:	4093      	lsls	r3, r2
   10466:	e9c1 2301 	strd	r2, r3, [r1, #4]
   1046a:	f01a fbdf 	bl	2ac2c <_Bfree>
   1046e:	2300      	movs	r3, #0
   10470:	6423      	str	r3, [r4, #64]	; 0x40
   10472:	f1b7 0900 	subs.w	r9, r7, #0
   10476:	f2c0 80b4 	blt.w	105e2 <_dtoa_r+0x1a2>
   1047a:	2300      	movs	r3, #0
   1047c:	602b      	str	r3, [r5, #0]
   1047e:	4b7e      	ldr	r3, [pc, #504]	; (10678 <_dtoa_r+0x238>)
   10480:	ea33 0309 	bics.w	r3, r3, r9
   10484:	f000 80b8 	beq.w	105f8 <_dtoa_r+0x1b8>
   10488:	2200      	movs	r2, #0
   1048a:	2300      	movs	r3, #0
   1048c:	ed9d 7b04 	vldr	d7, [sp, #16]
   10490:	ec51 0b17 	vmov	r0, r1, d7
   10494:	ed8d 7b02 	vstr	d7, [sp, #8]
   10498:	f7fc f8e4 	bl	c664 <__aeabi_dcmpeq>
   1049c:	4680      	mov	r8, r0
   1049e:	b188      	cbz	r0, 104c4 <_dtoa_r+0x84>
   104a0:	2301      	movs	r3, #1
   104a2:	9a07      	ldr	r2, [sp, #28]
   104a4:	6013      	str	r3, [r2, #0]
   104a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   104a8:	2b00      	cmp	r3, #0
   104aa:	f000 8251 	beq.w	10950 <_dtoa_r+0x510>
   104ae:	4b73      	ldr	r3, [pc, #460]	; (1067c <_dtoa_r+0x23c>)
   104b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   104b2:	f103 39ff 	add.w	r9, r3, #4294967295
   104b6:	6013      	str	r3, [r2, #0]
   104b8:	4648      	mov	r0, r9
   104ba:	b019      	add	sp, #100	; 0x64
   104bc:	ecbd 8b04 	vpop	{d8-d9}
   104c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104c4:	ed9d 0b02 	vldr	d0, [sp, #8]
   104c8:	aa16      	add	r2, sp, #88	; 0x58
   104ca:	a917      	add	r1, sp, #92	; 0x5c
   104cc:	4620      	mov	r0, r4
   104ce:	f01a ff51 	bl	2b374 <__d2b>
   104d2:	4682      	mov	sl, r0
   104d4:	ea5f 5519 	movs.w	r5, r9, lsr #20
   104d8:	f040 80a7 	bne.w	1062a <_dtoa_r+0x1ea>
   104dc:	e9dd 8516 	ldrd	r8, r5, [sp, #88]	; 0x58
   104e0:	4445      	add	r5, r8
   104e2:	f205 4032 	addw	r0, r5, #1074	; 0x432
   104e6:	2820      	cmp	r0, #32
   104e8:	f340 823a 	ble.w	10960 <_dtoa_r+0x520>
   104ec:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   104f0:	f205 4012 	addw	r0, r5, #1042	; 0x412
   104f4:	fa09 f903 	lsl.w	r9, r9, r3
   104f8:	fa26 f000 	lsr.w	r0, r6, r0
   104fc:	ea49 0000 	orr.w	r0, r9, r0
   10500:	f7fb ffe0 	bl	c4c4 <__aeabi_ui2d>
   10504:	3d01      	subs	r5, #1
   10506:	2201      	movs	r2, #1
   10508:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   1050c:	9210      	str	r2, [sp, #64]	; 0x40
   1050e:	2200      	movs	r2, #0
   10510:	4b5b      	ldr	r3, [pc, #364]	; (10680 <_dtoa_r+0x240>)
   10512:	f7fb fe99 	bl	c248 <__aeabi_dsub>
   10516:	a352      	add	r3, pc, #328	; (adr r3, 10660 <_dtoa_r+0x220>)
   10518:	e9d3 2300 	ldrd	r2, r3, [r3]
   1051c:	f7fc fc6a 	bl	cdf4 <__aeabi_dmul>
   10520:	a351      	add	r3, pc, #324	; (adr r3, 10668 <_dtoa_r+0x228>)
   10522:	e9d3 2300 	ldrd	r2, r3, [r3]
   10526:	f7fb fe91 	bl	c24c <__adddf3>
   1052a:	4606      	mov	r6, r0
   1052c:	460f      	mov	r7, r1
   1052e:	4628      	mov	r0, r5
   10530:	f7fb ffd8 	bl	c4e4 <__aeabi_i2d>
   10534:	a34e      	add	r3, pc, #312	; (adr r3, 10670 <_dtoa_r+0x230>)
   10536:	e9d3 2300 	ldrd	r2, r3, [r3]
   1053a:	f7fc fc5b 	bl	cdf4 <__aeabi_dmul>
   1053e:	4602      	mov	r2, r0
   10540:	460b      	mov	r3, r1
   10542:	4630      	mov	r0, r6
   10544:	4639      	mov	r1, r7
   10546:	f7fb fe81 	bl	c24c <__adddf3>
   1054a:	4606      	mov	r6, r0
   1054c:	460f      	mov	r7, r1
   1054e:	f7fc f8bb 	bl	c6c8 <__aeabi_d2iz>
   10552:	2200      	movs	r2, #0
   10554:	4683      	mov	fp, r0
   10556:	2300      	movs	r3, #0
   10558:	4630      	mov	r0, r6
   1055a:	4639      	mov	r1, r7
   1055c:	f7fc f88c 	bl	c678 <__aeabi_dcmplt>
   10560:	2800      	cmp	r0, #0
   10562:	f040 81e8 	bne.w	10936 <_dtoa_r+0x4f6>
   10566:	f1bb 0f16 	cmp.w	fp, #22
   1056a:	f200 81d6 	bhi.w	1091a <_dtoa_r+0x4da>
   1056e:	4b45      	ldr	r3, [pc, #276]	; (10684 <_dtoa_r+0x244>)
   10570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   10574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10578:	e9d3 2300 	ldrd	r2, r3, [r3]
   1057c:	f7fc f87c 	bl	c678 <__aeabi_dcmplt>
   10580:	2800      	cmp	r0, #0
   10582:	f000 8085 	beq.w	10690 <_dtoa_r+0x250>
   10586:	2300      	movs	r3, #0
   10588:	eba8 0505 	sub.w	r5, r8, r5
   1058c:	f10b 3bff 	add.w	fp, fp, #4294967295
   10590:	930f      	str	r3, [sp, #60]	; 0x3c
   10592:	1e6b      	subs	r3, r5, #1
   10594:	9308      	str	r3, [sp, #32]
   10596:	f100 81c8 	bmi.w	1092a <_dtoa_r+0x4ea>
   1059a:	2300      	movs	r3, #0
   1059c:	930c      	str	r3, [sp, #48]	; 0x30
   1059e:	f1bb 0f00 	cmp.w	fp, #0
   105a2:	da7d      	bge.n	106a0 <_dtoa_r+0x260>
   105a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   105a6:	f8cd b018 	str.w	fp, [sp, #24]
   105aa:	eba3 030b 	sub.w	r3, r3, fp
   105ae:	930c      	str	r3, [sp, #48]	; 0x30
   105b0:	f1cb 0300 	rsb	r3, fp, #0
   105b4:	f04f 0b00 	mov.w	fp, #0
   105b8:	930e      	str	r3, [sp, #56]	; 0x38
   105ba:	9b01      	ldr	r3, [sp, #4]
   105bc:	2b09      	cmp	r3, #9
   105be:	d879      	bhi.n	106b4 <_dtoa_r+0x274>
   105c0:	2b05      	cmp	r3, #5
   105c2:	f340 81d2 	ble.w	1096a <_dtoa_r+0x52a>
   105c6:	3b04      	subs	r3, #4
   105c8:	2500      	movs	r5, #0
   105ca:	9301      	str	r3, [sp, #4]
   105cc:	9b01      	ldr	r3, [sp, #4]
   105ce:	3b02      	subs	r3, #2
   105d0:	2b03      	cmp	r3, #3
   105d2:	f200 8563 	bhi.w	1109c <_dtoa_r+0xc5c>
   105d6:	e8df f013 	tbh	[pc, r3, lsl #1]
   105da:	03f3      	.short	0x03f3
   105dc:	03e703f0 	.word	0x03e703f0
   105e0:	03c5      	.short	0x03c5
   105e2:	2301      	movs	r3, #1
   105e4:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
   105e8:	602b      	str	r3, [r5, #0]
   105ea:	4b23      	ldr	r3, [pc, #140]	; (10678 <_dtoa_r+0x238>)
   105ec:	f8cd 9014 	str.w	r9, [sp, #20]
   105f0:	ea33 0309 	bics.w	r3, r3, r9
   105f4:	f47f af48 	bne.w	10488 <_dtoa_r+0x48>
   105f8:	f242 730f 	movw	r3, #9999	; 0x270f
   105fc:	f3c9 0913 	ubfx	r9, r9, #0, #20
   10600:	9a07      	ldr	r2, [sp, #28]
   10602:	6013      	str	r3, [r2, #0]
   10604:	ea59 0306 	orrs.w	r3, r9, r6
   10608:	d01f      	beq.n	1064a <_dtoa_r+0x20a>
   1060a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1060c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 10688 <_dtoa_r+0x248>
   10610:	2b00      	cmp	r3, #0
   10612:	f43f af51 	beq.w	104b8 <_dtoa_r+0x78>
   10616:	f109 0303 	add.w	r3, r9, #3
   1061a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1061c:	4648      	mov	r0, r9
   1061e:	6013      	str	r3, [r2, #0]
   10620:	b019      	add	sp, #100	; 0x64
   10622:	ecbd 8b04 	vpop	{d8-d9}
   10626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1062a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1062e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   10632:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   10636:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1063a:	4608      	mov	r0, r1
   1063c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   10640:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10644:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   10648:	e761      	b.n	1050e <_dtoa_r+0xce>
   1064a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1064c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1068c <_dtoa_r+0x24c>
   10650:	2b00      	cmp	r3, #0
   10652:	f43f af31 	beq.w	104b8 <_dtoa_r+0x78>
   10656:	f109 0308 	add.w	r3, r9, #8
   1065a:	e7de      	b.n	1061a <_dtoa_r+0x1da>
   1065c:	f3af 8000 	nop.w
   10660:	636f4361 	.word	0x636f4361
   10664:	3fd287a7 	.word	0x3fd287a7
   10668:	8b60c8b3 	.word	0x8b60c8b3
   1066c:	3fc68a28 	.word	0x3fc68a28
   10670:	509f79fb 	.word	0x509f79fb
   10674:	3fd34413 	.word	0x3fd34413
   10678:	7ff00000 	.word	0x7ff00000
   1067c:	0002f545 	.word	0x0002f545
   10680:	3ff80000 	.word	0x3ff80000
   10684:	0002ed28 	.word	0x0002ed28
   10688:	0002f5b4 	.word	0x0002f5b4
   1068c:	0002f5b8 	.word	0x0002f5b8
   10690:	eba8 0505 	sub.w	r5, r8, r5
   10694:	1e6b      	subs	r3, r5, #1
   10696:	9308      	str	r3, [sp, #32]
   10698:	f100 84ee 	bmi.w	11078 <_dtoa_r+0xc38>
   1069c:	900f      	str	r0, [sp, #60]	; 0x3c
   1069e:	900c      	str	r0, [sp, #48]	; 0x30
   106a0:	9b08      	ldr	r3, [sp, #32]
   106a2:	f8cd b018 	str.w	fp, [sp, #24]
   106a6:	445b      	add	r3, fp
   106a8:	9308      	str	r3, [sp, #32]
   106aa:	2300      	movs	r3, #0
   106ac:	930e      	str	r3, [sp, #56]	; 0x38
   106ae:	9b01      	ldr	r3, [sp, #4]
   106b0:	2b09      	cmp	r3, #9
   106b2:	d985      	bls.n	105c0 <_dtoa_r+0x180>
   106b4:	2300      	movs	r3, #0
   106b6:	2201      	movs	r2, #1
   106b8:	461d      	mov	r5, r3
   106ba:	920d      	str	r2, [sp, #52]	; 0x34
   106bc:	f04f 32ff 	mov.w	r2, #4294967295
   106c0:	9301      	str	r3, [sp, #4]
   106c2:	930b      	str	r3, [sp, #44]	; 0x2c
   106c4:	920a      	str	r2, [sp, #40]	; 0x28
   106c6:	2100      	movs	r1, #0
   106c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   106ca:	6461      	str	r1, [r4, #68]	; 0x44
   106cc:	9314      	str	r3, [sp, #80]	; 0x50
   106ce:	4620      	mov	r0, r4
   106d0:	f01a fa86 	bl	2abe0 <_Balloc>
   106d4:	9009      	str	r0, [sp, #36]	; 0x24
   106d6:	6420      	str	r0, [r4, #64]	; 0x40
   106d8:	2d00      	cmp	r5, #0
   106da:	f000 80f2 	beq.w	108c2 <_dtoa_r+0x482>
   106de:	9906      	ldr	r1, [sp, #24]
   106e0:	2900      	cmp	r1, #0
   106e2:	f340 829e 	ble.w	10c22 <_dtoa_r+0x7e2>
   106e6:	4ac8      	ldr	r2, [pc, #800]	; (10a08 <_dtoa_r+0x5c8>)
   106e8:	f001 030f 	and.w	r3, r1, #15
   106ec:	110d      	asrs	r5, r1, #4
   106ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   106f2:	05ca      	lsls	r2, r1, #23
   106f4:	e9d3 6700 	ldrd	r6, r7, [r3]
   106f8:	f140 832b 	bpl.w	10d52 <_dtoa_r+0x912>
   106fc:	4bc3      	ldr	r3, [pc, #780]	; (10a0c <_dtoa_r+0x5cc>)
   106fe:	f005 050f 	and.w	r5, r5, #15
   10702:	f04f 0803 	mov.w	r8, #3
   10706:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1070a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1070e:	f7fc fc9b 	bl	d048 <__aeabi_ddiv>
   10712:	ec41 0b18 	vmov	d8, r0, r1
   10716:	b18d      	cbz	r5, 1073c <_dtoa_r+0x2fc>
   10718:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 10a0c <_dtoa_r+0x5cc>
   1071c:	07eb      	lsls	r3, r5, #31
   1071e:	4630      	mov	r0, r6
   10720:	4639      	mov	r1, r7
   10722:	d507      	bpl.n	10734 <_dtoa_r+0x2f4>
   10724:	f108 0801 	add.w	r8, r8, #1
   10728:	e9d9 2300 	ldrd	r2, r3, [r9]
   1072c:	f7fc fb62 	bl	cdf4 <__aeabi_dmul>
   10730:	4606      	mov	r6, r0
   10732:	460f      	mov	r7, r1
   10734:	106d      	asrs	r5, r5, #1
   10736:	f109 0908 	add.w	r9, r9, #8
   1073a:	d1ef      	bne.n	1071c <_dtoa_r+0x2dc>
   1073c:	4632      	mov	r2, r6
   1073e:	463b      	mov	r3, r7
   10740:	ec51 0b18 	vmov	r0, r1, d8
   10744:	f7fc fc80 	bl	d048 <__aeabi_ddiv>
   10748:	4606      	mov	r6, r0
   1074a:	460f      	mov	r7, r1
   1074c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1074e:	b143      	cbz	r3, 10762 <_dtoa_r+0x322>
   10750:	2200      	movs	r2, #0
   10752:	4baf      	ldr	r3, [pc, #700]	; (10a10 <_dtoa_r+0x5d0>)
   10754:	4630      	mov	r0, r6
   10756:	4639      	mov	r1, r7
   10758:	f7fb ff8e 	bl	c678 <__aeabi_dcmplt>
   1075c:	2800      	cmp	r0, #0
   1075e:	f040 8466 	bne.w	1102e <_dtoa_r+0xbee>
   10762:	4640      	mov	r0, r8
   10764:	f7fb febe 	bl	c4e4 <__aeabi_i2d>
   10768:	4632      	mov	r2, r6
   1076a:	463b      	mov	r3, r7
   1076c:	f7fc fb42 	bl	cdf4 <__aeabi_dmul>
   10770:	4ba8      	ldr	r3, [pc, #672]	; (10a14 <_dtoa_r+0x5d4>)
   10772:	2200      	movs	r2, #0
   10774:	f7fb fd6a 	bl	c24c <__adddf3>
   10778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1077a:	4680      	mov	r8, r0
   1077c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   10780:	2b00      	cmp	r3, #0
   10782:	f000 8102 	beq.w	1098a <_dtoa_r+0x54a>
   10786:	9b06      	ldr	r3, [sp, #24]
   10788:	9312      	str	r3, [sp, #72]	; 0x48
   1078a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1078c:	9311      	str	r3, [sp, #68]	; 0x44
   1078e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10790:	2b00      	cmp	r3, #0
   10792:	f000 8318 	beq.w	10dc6 <_dtoa_r+0x986>
   10796:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10798:	2000      	movs	r0, #0
   1079a:	4b9b      	ldr	r3, [pc, #620]	; (10a08 <_dtoa_r+0x5c8>)
   1079c:	499e      	ldr	r1, [pc, #632]	; (10a18 <_dtoa_r+0x5d8>)
   1079e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   107a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   107a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   107a8:	f7fc fc4e 	bl	d048 <__aeabi_ddiv>
   107ac:	4642      	mov	r2, r8
   107ae:	464b      	mov	r3, r9
   107b0:	f7fb fd4a 	bl	c248 <__aeabi_dsub>
   107b4:	4680      	mov	r8, r0
   107b6:	4689      	mov	r9, r1
   107b8:	4630      	mov	r0, r6
   107ba:	4639      	mov	r1, r7
   107bc:	f7fb ff84 	bl	c6c8 <__aeabi_d2iz>
   107c0:	ec49 8b18 	vmov	d8, r8, r9
   107c4:	4680      	mov	r8, r0
   107c6:	f7fb fe8d 	bl	c4e4 <__aeabi_i2d>
   107ca:	4602      	mov	r2, r0
   107cc:	460b      	mov	r3, r1
   107ce:	f108 0830 	add.w	r8, r8, #48	; 0x30
   107d2:	4630      	mov	r0, r6
   107d4:	4639      	mov	r1, r7
   107d6:	f7fb fd37 	bl	c248 <__aeabi_dsub>
   107da:	f805 8b01 	strb.w	r8, [r5], #1
   107de:	4606      	mov	r6, r0
   107e0:	460f      	mov	r7, r1
   107e2:	4602      	mov	r2, r0
   107e4:	460b      	mov	r3, r1
   107e6:	ec51 0b18 	vmov	r0, r1, d8
   107ea:	f7fb ff63 	bl	c6b4 <__aeabi_dcmpgt>
   107ee:	2800      	cmp	r0, #0
   107f0:	f040 851a 	bne.w	11228 <_dtoa_r+0xde8>
   107f4:	f04f 0900 	mov.w	r9, #0
   107f8:	ee09 aa10 	vmov	s18, sl
   107fc:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   10800:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10804:	46cb      	mov	fp, r9
   10806:	ec59 8b18 	vmov	r8, r9, d8
   1080a:	ee08 4a10 	vmov	s16, r4
   1080e:	462c      	mov	r4, r5
   10810:	e024      	b.n	1085c <_dtoa_r+0x41c>
   10812:	45d3      	cmp	fp, sl
   10814:	da4f      	bge.n	108b6 <_dtoa_r+0x476>
   10816:	f7fc faed 	bl	cdf4 <__aeabi_dmul>
   1081a:	2200      	movs	r2, #0
   1081c:	4b7f      	ldr	r3, [pc, #508]	; (10a1c <_dtoa_r+0x5dc>)
   1081e:	4680      	mov	r8, r0
   10820:	4689      	mov	r9, r1
   10822:	4630      	mov	r0, r6
   10824:	4639      	mov	r1, r7
   10826:	f7fc fae5 	bl	cdf4 <__aeabi_dmul>
   1082a:	460f      	mov	r7, r1
   1082c:	4606      	mov	r6, r0
   1082e:	f7fb ff4b 	bl	c6c8 <__aeabi_d2iz>
   10832:	4605      	mov	r5, r0
   10834:	f7fb fe56 	bl	c4e4 <__aeabi_i2d>
   10838:	4602      	mov	r2, r0
   1083a:	460b      	mov	r3, r1
   1083c:	3530      	adds	r5, #48	; 0x30
   1083e:	4630      	mov	r0, r6
   10840:	4639      	mov	r1, r7
   10842:	f7fb fd01 	bl	c248 <__aeabi_dsub>
   10846:	4642      	mov	r2, r8
   10848:	464b      	mov	r3, r9
   1084a:	f804 5b01 	strb.w	r5, [r4], #1
   1084e:	4606      	mov	r6, r0
   10850:	460f      	mov	r7, r1
   10852:	f7fb ff11 	bl	c678 <__aeabi_dcmplt>
   10856:	2800      	cmp	r0, #0
   10858:	f040 84e1 	bne.w	1121e <_dtoa_r+0xdde>
   1085c:	4632      	mov	r2, r6
   1085e:	463b      	mov	r3, r7
   10860:	2000      	movs	r0, #0
   10862:	496b      	ldr	r1, [pc, #428]	; (10a10 <_dtoa_r+0x5d0>)
   10864:	f7fb fcf0 	bl	c248 <__aeabi_dsub>
   10868:	4642      	mov	r2, r8
   1086a:	464b      	mov	r3, r9
   1086c:	f10b 0b01 	add.w	fp, fp, #1
   10870:	f7fb ff02 	bl	c678 <__aeabi_dcmplt>
   10874:	4605      	mov	r5, r0
   10876:	2200      	movs	r2, #0
   10878:	4b68      	ldr	r3, [pc, #416]	; (10a1c <_dtoa_r+0x5dc>)
   1087a:	4640      	mov	r0, r8
   1087c:	4649      	mov	r1, r9
   1087e:	2d00      	cmp	r5, #0
   10880:	d0c7      	beq.n	10812 <_dtoa_r+0x3d2>
   10882:	4625      	mov	r5, r4
   10884:	9909      	ldr	r1, [sp, #36]	; 0x24
   10886:	ee19 aa10 	vmov	sl, s18
   1088a:	ee18 4a10 	vmov	r4, s16
   1088e:	e002      	b.n	10896 <_dtoa_r+0x456>
   10890:	428d      	cmp	r5, r1
   10892:	f000 849c 	beq.w	111ce <_dtoa_r+0xd8e>
   10896:	462a      	mov	r2, r5
   10898:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   1089c:	2b39      	cmp	r3, #57	; 0x39
   1089e:	d0f7      	beq.n	10890 <_dtoa_r+0x450>
   108a0:	3301      	adds	r3, #1
   108a2:	9109      	str	r1, [sp, #36]	; 0x24
   108a4:	b2db      	uxtb	r3, r3
   108a6:	702b      	strb	r3, [r5, #0]
   108a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   108aa:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   108ae:	3301      	adds	r3, #1
   108b0:	9209      	str	r2, [sp, #36]	; 0x24
   108b2:	9306      	str	r3, [sp, #24]
   108b4:	e092      	b.n	109dc <_dtoa_r+0x59c>
   108b6:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   108ba:	ee19 aa10 	vmov	sl, s18
   108be:	ee18 4a10 	vmov	r4, s16
   108c2:	9a06      	ldr	r2, [sp, #24]
   108c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   108c6:	2a0e      	cmp	r2, #14
   108c8:	dc02      	bgt.n	108d0 <_dtoa_r+0x490>
   108ca:	2b00      	cmp	r3, #0
   108cc:	f280 81e4 	bge.w	10c98 <_dtoa_r+0x858>
   108d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   108d2:	2a00      	cmp	r2, #0
   108d4:	f000 80a8 	beq.w	10a28 <_dtoa_r+0x5e8>
   108d8:	9a01      	ldr	r2, [sp, #4]
   108da:	2a01      	cmp	r2, #1
   108dc:	f340 83ce 	ble.w	1107c <_dtoa_r+0xc3c>
   108e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108e2:	1e5f      	subs	r7, r3, #1
   108e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108e6:	42bb      	cmp	r3, r7
   108e8:	f280 837a 	bge.w	10fe0 <_dtoa_r+0xba0>
   108ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108ee:	970e      	str	r7, [sp, #56]	; 0x38
   108f0:	1afb      	subs	r3, r7, r3
   108f2:	2700      	movs	r7, #0
   108f4:	449b      	add	fp, r3
   108f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108f8:	2b00      	cmp	r3, #0
   108fa:	f2c0 8463 	blt.w	111c4 <_dtoa_r+0xd84>
   108fe:	9a08      	ldr	r2, [sp, #32]
   10900:	4611      	mov	r1, r2
   10902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10904:	4419      	add	r1, r3
   10906:	4616      	mov	r6, r2
   10908:	441a      	add	r2, r3
   1090a:	9108      	str	r1, [sp, #32]
   1090c:	920c      	str	r2, [sp, #48]	; 0x30
   1090e:	2101      	movs	r1, #1
   10910:	4620      	mov	r0, r4
   10912:	f01a fa79 	bl	2ae08 <__i2b>
   10916:	4605      	mov	r5, r0
   10918:	e089      	b.n	10a2e <_dtoa_r+0x5ee>
   1091a:	2301      	movs	r3, #1
   1091c:	eba8 0505 	sub.w	r5, r8, r5
   10920:	930f      	str	r3, [sp, #60]	; 0x3c
   10922:	1e6b      	subs	r3, r5, #1
   10924:	9308      	str	r3, [sp, #32]
   10926:	f57f ae38 	bpl.w	1059a <_dtoa_r+0x15a>
   1092a:	f1c5 0301 	rsb	r3, r5, #1
   1092e:	930c      	str	r3, [sp, #48]	; 0x30
   10930:	2300      	movs	r3, #0
   10932:	9308      	str	r3, [sp, #32]
   10934:	e633      	b.n	1059e <_dtoa_r+0x15e>
   10936:	4658      	mov	r0, fp
   10938:	f7fb fdd4 	bl	c4e4 <__aeabi_i2d>
   1093c:	4632      	mov	r2, r6
   1093e:	463b      	mov	r3, r7
   10940:	f7fb fe90 	bl	c664 <__aeabi_dcmpeq>
   10944:	2800      	cmp	r0, #0
   10946:	f47f ae0e 	bne.w	10566 <_dtoa_r+0x126>
   1094a:	f10b 3bff 	add.w	fp, fp, #4294967295
   1094e:	e60a      	b.n	10566 <_dtoa_r+0x126>
   10950:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 10a24 <_dtoa_r+0x5e4>
   10954:	4648      	mov	r0, r9
   10956:	b019      	add	sp, #100	; 0x64
   10958:	ecbd 8b04 	vpop	{d8-d9}
   1095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10960:	f1c0 0020 	rsb	r0, r0, #32
   10964:	fa06 f000 	lsl.w	r0, r6, r0
   10968:	e5ca      	b.n	10500 <_dtoa_r+0xc0>
   1096a:	2501      	movs	r5, #1
   1096c:	e62e      	b.n	105cc <_dtoa_r+0x18c>
   1096e:	4640      	mov	r0, r8
   10970:	f7fb fdb8 	bl	c4e4 <__aeabi_i2d>
   10974:	4632      	mov	r2, r6
   10976:	463b      	mov	r3, r7
   10978:	f7fc fa3c 	bl	cdf4 <__aeabi_dmul>
   1097c:	2200      	movs	r2, #0
   1097e:	4b25      	ldr	r3, [pc, #148]	; (10a14 <_dtoa_r+0x5d4>)
   10980:	f7fb fc64 	bl	c24c <__adddf3>
   10984:	4680      	mov	r8, r0
   10986:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   1098a:	4630      	mov	r0, r6
   1098c:	4639      	mov	r1, r7
   1098e:	2200      	movs	r2, #0
   10990:	4b23      	ldr	r3, [pc, #140]	; (10a20 <_dtoa_r+0x5e0>)
   10992:	f7fb fc59 	bl	c248 <__aeabi_dsub>
   10996:	4642      	mov	r2, r8
   10998:	464b      	mov	r3, r9
   1099a:	4606      	mov	r6, r0
   1099c:	460f      	mov	r7, r1
   1099e:	f7fb fe89 	bl	c6b4 <__aeabi_dcmpgt>
   109a2:	2800      	cmp	r0, #0
   109a4:	f040 8335 	bne.w	11012 <_dtoa_r+0xbd2>
   109a8:	4630      	mov	r0, r6
   109aa:	4639      	mov	r1, r7
   109ac:	4642      	mov	r2, r8
   109ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   109b2:	f7fb fe61 	bl	c678 <__aeabi_dcmplt>
   109b6:	2800      	cmp	r0, #0
   109b8:	d083      	beq.n	108c2 <_dtoa_r+0x482>
   109ba:	2700      	movs	r7, #0
   109bc:	463d      	mov	r5, r7
   109be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   109c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   109c4:	43de      	mvns	r6, r3
   109c6:	4639      	mov	r1, r7
   109c8:	4620      	mov	r0, r4
   109ca:	f01a f92f 	bl	2ac2c <_Bfree>
   109ce:	1c73      	adds	r3, r6, #1
   109d0:	9306      	str	r3, [sp, #24]
   109d2:	b11d      	cbz	r5, 109dc <_dtoa_r+0x59c>
   109d4:	4629      	mov	r1, r5
   109d6:	4620      	mov	r0, r4
   109d8:	f01a f928 	bl	2ac2c <_Bfree>
   109dc:	4651      	mov	r1, sl
   109de:	4620      	mov	r0, r4
   109e0:	f01a f924 	bl	2ac2c <_Bfree>
   109e4:	2300      	movs	r3, #0
   109e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   109e8:	7013      	strb	r3, [r2, #0]
   109ea:	9b07      	ldr	r3, [sp, #28]
   109ec:	4619      	mov	r1, r3
   109ee:	9b06      	ldr	r3, [sp, #24]
   109f0:	600b      	str	r3, [r1, #0]
   109f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   109f4:	2b00      	cmp	r3, #0
   109f6:	f43f ad5f 	beq.w	104b8 <_dtoa_r+0x78>
   109fa:	4648      	mov	r0, r9
   109fc:	601a      	str	r2, [r3, #0]
   109fe:	b019      	add	sp, #100	; 0x64
   10a00:	ecbd 8b04 	vpop	{d8-d9}
   10a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a08:	0002ed28 	.word	0x0002ed28
   10a0c:	0002ed00 	.word	0x0002ed00
   10a10:	3ff00000 	.word	0x3ff00000
   10a14:	401c0000 	.word	0x401c0000
   10a18:	3fe00000 	.word	0x3fe00000
   10a1c:	40240000 	.word	0x40240000
   10a20:	40140000 	.word	0x40140000
   10a24:	0002f544 	.word	0x0002f544
   10a28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10a2a:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
   10a2e:	2e00      	cmp	r6, #0
   10a30:	dd0c      	ble.n	10a4c <_dtoa_r+0x60c>
   10a32:	9a08      	ldr	r2, [sp, #32]
   10a34:	2a00      	cmp	r2, #0
   10a36:	dd09      	ble.n	10a4c <_dtoa_r+0x60c>
   10a38:	42b2      	cmp	r2, r6
   10a3a:	4613      	mov	r3, r2
   10a3c:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a3e:	bfa8      	it	ge
   10a40:	4633      	movge	r3, r6
   10a42:	1ac9      	subs	r1, r1, r3
   10a44:	1af6      	subs	r6, r6, r3
   10a46:	1ad3      	subs	r3, r2, r3
   10a48:	910c      	str	r1, [sp, #48]	; 0x30
   10a4a:	9308      	str	r3, [sp, #32]
   10a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a4e:	b143      	cbz	r3, 10a62 <_dtoa_r+0x622>
   10a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a52:	2b00      	cmp	r3, #0
   10a54:	d061      	beq.n	10b1a <_dtoa_r+0x6da>
   10a56:	2f00      	cmp	r7, #0
   10a58:	f300 82b0 	bgt.w	10fbc <_dtoa_r+0xb7c>
   10a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a5e:	1bda      	subs	r2, r3, r7
   10a60:	d15c      	bne.n	10b1c <_dtoa_r+0x6dc>
   10a62:	2101      	movs	r1, #1
   10a64:	4620      	mov	r0, r4
   10a66:	f01a f9cf 	bl	2ae08 <__i2b>
   10a6a:	f1bb 0f00 	cmp.w	fp, #0
   10a6e:	4607      	mov	r7, r0
   10a70:	f300 8138 	bgt.w	10ce4 <_dtoa_r+0x8a4>
   10a74:	9b01      	ldr	r3, [sp, #4]
   10a76:	2b01      	cmp	r3, #1
   10a78:	f340 82ce 	ble.w	11018 <_dtoa_r+0xbd8>
   10a7c:	f04f 0800 	mov.w	r8, #0
   10a80:	f1bb 0f00 	cmp.w	fp, #0
   10a84:	f040 813a 	bne.w	10cfc <_dtoa_r+0x8bc>
   10a88:	2301      	movs	r3, #1
   10a8a:	9908      	ldr	r1, [sp, #32]
   10a8c:	440b      	add	r3, r1
   10a8e:	f013 031f 	ands.w	r3, r3, #31
   10a92:	d049      	beq.n	10b28 <_dtoa_r+0x6e8>
   10a94:	f1c3 0220 	rsb	r2, r3, #32
   10a98:	2a04      	cmp	r2, #4
   10a9a:	f340 8458 	ble.w	1134e <_dtoa_r+0xf0e>
   10a9e:	f1c3 031c 	rsb	r3, r3, #28
   10aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10aa4:	4419      	add	r1, r3
   10aa6:	441a      	add	r2, r3
   10aa8:	441e      	add	r6, r3
   10aaa:	920c      	str	r2, [sp, #48]	; 0x30
   10aac:	9108      	str	r1, [sp, #32]
   10aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	dd05      	ble.n	10ac0 <_dtoa_r+0x680>
   10ab4:	4651      	mov	r1, sl
   10ab6:	461a      	mov	r2, r3
   10ab8:	4620      	mov	r0, r4
   10aba:	f01a faa1 	bl	2b000 <__lshift>
   10abe:	4682      	mov	sl, r0
   10ac0:	9b08      	ldr	r3, [sp, #32]
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	dd05      	ble.n	10ad2 <_dtoa_r+0x692>
   10ac6:	4639      	mov	r1, r7
   10ac8:	461a      	mov	r2, r3
   10aca:	4620      	mov	r0, r4
   10acc:	f01a fa98 	bl	2b000 <__lshift>
   10ad0:	4607      	mov	r7, r0
   10ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	f040 811a 	bne.w	10d0e <_dtoa_r+0x8ce>
   10ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10adc:	2b00      	cmp	r3, #0
   10ade:	dc2c      	bgt.n	10b3a <_dtoa_r+0x6fa>
   10ae0:	9b01      	ldr	r3, [sp, #4]
   10ae2:	2b02      	cmp	r3, #2
   10ae4:	dd29      	ble.n	10b3a <_dtoa_r+0x6fa>
   10ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ae8:	2b00      	cmp	r3, #0
   10aea:	f47f af68 	bne.w	109be <_dtoa_r+0x57e>
   10aee:	4639      	mov	r1, r7
   10af0:	2205      	movs	r2, #5
   10af2:	4620      	mov	r0, r4
   10af4:	f01a f8a4 	bl	2ac40 <__multadd>
   10af8:	4607      	mov	r7, r0
   10afa:	4650      	mov	r0, sl
   10afc:	4639      	mov	r1, r7
   10afe:	f01a fae7 	bl	2b0d0 <__mcmp>
   10b02:	2800      	cmp	r0, #0
   10b04:	f77f af5b 	ble.w	109be <_dtoa_r+0x57e>
   10b08:	9809      	ldr	r0, [sp, #36]	; 0x24
   10b0a:	2331      	movs	r3, #49	; 0x31
   10b0c:	9e06      	ldr	r6, [sp, #24]
   10b0e:	4681      	mov	r9, r0
   10b10:	f800 3b01 	strb.w	r3, [r0], #1
   10b14:	3601      	adds	r6, #1
   10b16:	9009      	str	r0, [sp, #36]	; 0x24
   10b18:	e755      	b.n	109c6 <_dtoa_r+0x586>
   10b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10b1c:	4651      	mov	r1, sl
   10b1e:	4620      	mov	r0, r4
   10b20:	f01a fa1e 	bl	2af60 <__pow5mult>
   10b24:	4682      	mov	sl, r0
   10b26:	e79c      	b.n	10a62 <_dtoa_r+0x622>
   10b28:	231c      	movs	r3, #28
   10b2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10b2c:	441e      	add	r6, r3
   10b2e:	441a      	add	r2, r3
   10b30:	920c      	str	r2, [sp, #48]	; 0x30
   10b32:	9a08      	ldr	r2, [sp, #32]
   10b34:	441a      	add	r2, r3
   10b36:	9208      	str	r2, [sp, #32]
   10b38:	e7b9      	b.n	10aae <_dtoa_r+0x66e>
   10b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10b3c:	2b00      	cmp	r3, #0
   10b3e:	f000 81b8 	beq.w	10eb2 <_dtoa_r+0xa72>
   10b42:	9b06      	ldr	r3, [sp, #24]
   10b44:	3301      	adds	r3, #1
   10b46:	9306      	str	r3, [sp, #24]
   10b48:	2e00      	cmp	r6, #0
   10b4a:	f300 824b 	bgt.w	10fe4 <_dtoa_r+0xba4>
   10b4e:	f1b8 0f00 	cmp.w	r8, #0
   10b52:	f040 8374 	bne.w	1123e <_dtoa_r+0xdfe>
   10b56:	46a9      	mov	r9, r5
   10b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b5a:	9904      	ldr	r1, [sp, #16]
   10b5c:	1e53      	subs	r3, r2, #1
   10b5e:	4690      	mov	r8, r2
   10b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10b62:	f001 0101 	and.w	r1, r1, #1
   10b66:	441a      	add	r2, r3
   10b68:	9104      	str	r1, [sp, #16]
   10b6a:	920a      	str	r2, [sp, #40]	; 0x28
   10b6c:	4639      	mov	r1, r7
   10b6e:	4650      	mov	r0, sl
   10b70:	f018 fdae 	bl	296d0 <quorem>
   10b74:	4629      	mov	r1, r5
   10b76:	4683      	mov	fp, r0
   10b78:	4650      	mov	r0, sl
   10b7a:	f01a faa9 	bl	2b0d0 <__mcmp>
   10b7e:	4639      	mov	r1, r7
   10b80:	4606      	mov	r6, r0
   10b82:	464a      	mov	r2, r9
   10b84:	4620      	mov	r0, r4
   10b86:	f01a fac1 	bl	2b10c <__mdiff>
   10b8a:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   10b8e:	4601      	mov	r1, r0
   10b90:	9302      	str	r3, [sp, #8]
   10b92:	68c3      	ldr	r3, [r0, #12]
   10b94:	2b00      	cmp	r3, #0
   10b96:	f040 822c 	bne.w	10ff2 <_dtoa_r+0xbb2>
   10b9a:	9008      	str	r0, [sp, #32]
   10b9c:	4650      	mov	r0, sl
   10b9e:	f01a fa97 	bl	2b0d0 <__mcmp>
   10ba2:	4603      	mov	r3, r0
   10ba4:	9908      	ldr	r1, [sp, #32]
   10ba6:	4620      	mov	r0, r4
   10ba8:	9308      	str	r3, [sp, #32]
   10baa:	f01a f83f 	bl	2ac2c <_Bfree>
   10bae:	9b01      	ldr	r3, [sp, #4]
   10bb0:	9904      	ldr	r1, [sp, #16]
   10bb2:	461a      	mov	r2, r3
   10bb4:	9b08      	ldr	r3, [sp, #32]
   10bb6:	431a      	orrs	r2, r3
   10bb8:	430a      	orrs	r2, r1
   10bba:	f000 8396 	beq.w	112ea <_dtoa_r+0xeaa>
   10bbe:	2e00      	cmp	r6, #0
   10bc0:	f2c0 8313 	blt.w	111ea <_dtoa_r+0xdaa>
   10bc4:	9a01      	ldr	r2, [sp, #4]
   10bc6:	4316      	orrs	r6, r2
   10bc8:	9a04      	ldr	r2, [sp, #16]
   10bca:	4332      	orrs	r2, r6
   10bcc:	f000 830d 	beq.w	111ea <_dtoa_r+0xdaa>
   10bd0:	2b00      	cmp	r3, #0
   10bd2:	f300 836a 	bgt.w	112aa <_dtoa_r+0xe6a>
   10bd6:	9b02      	ldr	r3, [sp, #8]
   10bd8:	f108 0601 	add.w	r6, r8, #1
   10bdc:	f888 3000 	strb.w	r3, [r8]
   10be0:	46b3      	mov	fp, r6
   10be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10be4:	4543      	cmp	r3, r8
   10be6:	f000 836a 	beq.w	112be <_dtoa_r+0xe7e>
   10bea:	4651      	mov	r1, sl
   10bec:	2300      	movs	r3, #0
   10bee:	220a      	movs	r2, #10
   10bf0:	4620      	mov	r0, r4
   10bf2:	f01a f825 	bl	2ac40 <__multadd>
   10bf6:	454d      	cmp	r5, r9
   10bf8:	4682      	mov	sl, r0
   10bfa:	4629      	mov	r1, r5
   10bfc:	f04f 0300 	mov.w	r3, #0
   10c00:	f04f 020a 	mov.w	r2, #10
   10c04:	4620      	mov	r0, r4
   10c06:	f000 81f9 	beq.w	10ffc <_dtoa_r+0xbbc>
   10c0a:	f01a f819 	bl	2ac40 <__multadd>
   10c0e:	4649      	mov	r1, r9
   10c10:	4605      	mov	r5, r0
   10c12:	2300      	movs	r3, #0
   10c14:	220a      	movs	r2, #10
   10c16:	4620      	mov	r0, r4
   10c18:	f01a f812 	bl	2ac40 <__multadd>
   10c1c:	46b0      	mov	r8, r6
   10c1e:	4681      	mov	r9, r0
   10c20:	e7a4      	b.n	10b6c <_dtoa_r+0x72c>
   10c22:	f000 81ad 	beq.w	10f80 <_dtoa_r+0xb40>
   10c26:	9b06      	ldr	r3, [sp, #24]
   10c28:	f1c3 0900 	rsb	r9, r3, #0
   10c2c:	4bbe      	ldr	r3, [pc, #760]	; (10f28 <_dtoa_r+0xae8>)
   10c2e:	f009 020f 	and.w	r2, r9, #15
   10c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c3e:	f7fc f8d9 	bl	cdf4 <__aeabi_dmul>
   10c42:	ea5f 1929 	movs.w	r9, r9, asr #4
   10c46:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   10c4a:	f000 836f 	beq.w	1132c <_dtoa_r+0xeec>
   10c4e:	4ab7      	ldr	r2, [pc, #732]	; (10f2c <_dtoa_r+0xaec>)
   10c50:	2300      	movs	r3, #0
   10c52:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   10c56:	f04f 0802 	mov.w	r8, #2
   10c5a:	46ab      	mov	fp, r5
   10c5c:	4606      	mov	r6, r0
   10c5e:	460f      	mov	r7, r1
   10c60:	4615      	mov	r5, r2
   10c62:	f019 0f01 	tst.w	r9, #1
   10c66:	4630      	mov	r0, r6
   10c68:	4639      	mov	r1, r7
   10c6a:	d008      	beq.n	10c7e <_dtoa_r+0x83e>
   10c6c:	f108 0801 	add.w	r8, r8, #1
   10c70:	e9d5 2300 	ldrd	r2, r3, [r5]
   10c74:	f7fc f8be 	bl	cdf4 <__aeabi_dmul>
   10c78:	465b      	mov	r3, fp
   10c7a:	4606      	mov	r6, r0
   10c7c:	460f      	mov	r7, r1
   10c7e:	ea5f 0969 	movs.w	r9, r9, asr #1
   10c82:	f105 0508 	add.w	r5, r5, #8
   10c86:	d1ec      	bne.n	10c62 <_dtoa_r+0x822>
   10c88:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   10c8c:	2b00      	cmp	r3, #0
   10c8e:	f47f ad5d 	bne.w	1074c <_dtoa_r+0x30c>
   10c92:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
   10c96:	e559      	b.n	1074c <_dtoa_r+0x30c>
   10c98:	4ba3      	ldr	r3, [pc, #652]	; (10f28 <_dtoa_r+0xae8>)
   10c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c9e:	ed93 7b00 	vldr	d7, [r3]
   10ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	eeb0 8a47 	vmov.f32	s16, s14
   10caa:	eef0 8a67 	vmov.f32	s17, s15
   10cae:	f280 8211 	bge.w	110d4 <_dtoa_r+0xc94>
   10cb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10cb4:	2f00      	cmp	r7, #0
   10cb6:	f300 820d 	bgt.w	110d4 <_dtoa_r+0xc94>
   10cba:	2f00      	cmp	r7, #0
   10cbc:	f47f ae7d 	bne.w	109ba <_dtoa_r+0x57a>
   10cc0:	2200      	movs	r2, #0
   10cc2:	4b9b      	ldr	r3, [pc, #620]	; (10f30 <_dtoa_r+0xaf0>)
   10cc4:	ec51 0b17 	vmov	r0, r1, d7
   10cc8:	f7fc f894 	bl	cdf4 <__aeabi_dmul>
   10ccc:	4602      	mov	r2, r0
   10cce:	460b      	mov	r3, r1
   10cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10cd4:	f7fb fcda 	bl	c68c <__aeabi_dcmple>
   10cd8:	2800      	cmp	r0, #0
   10cda:	f000 819b 	beq.w	11014 <_dtoa_r+0xbd4>
   10cde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10ce0:	463d      	mov	r5, r7
   10ce2:	e66c      	b.n	109be <_dtoa_r+0x57e>
   10ce4:	4601      	mov	r1, r0
   10ce6:	465a      	mov	r2, fp
   10ce8:	4620      	mov	r0, r4
   10cea:	f01a f939 	bl	2af60 <__pow5mult>
   10cee:	9b01      	ldr	r3, [sp, #4]
   10cf0:	4607      	mov	r7, r0
   10cf2:	2b01      	cmp	r3, #1
   10cf4:	f340 814a 	ble.w	10f8c <_dtoa_r+0xb4c>
   10cf8:	f04f 0800 	mov.w	r8, #0
   10cfc:	693b      	ldr	r3, [r7, #16]
   10cfe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   10d02:	6918      	ldr	r0, [r3, #16]
   10d04:	f01a f82e 	bl	2ad64 <__hi0bits>
   10d08:	f1c0 0320 	rsb	r3, r0, #32
   10d0c:	e6bd      	b.n	10a8a <_dtoa_r+0x64a>
   10d0e:	4639      	mov	r1, r7
   10d10:	4650      	mov	r0, sl
   10d12:	f01a f9dd 	bl	2b0d0 <__mcmp>
   10d16:	2800      	cmp	r0, #0
   10d18:	f6bf aedf 	bge.w	10ada <_dtoa_r+0x69a>
   10d1c:	4651      	mov	r1, sl
   10d1e:	2300      	movs	r3, #0
   10d20:	220a      	movs	r2, #10
   10d22:	4620      	mov	r0, r4
   10d24:	f019 ff8c 	bl	2ac40 <__multadd>
   10d28:	9b06      	ldr	r3, [sp, #24]
   10d2a:	4682      	mov	sl, r0
   10d2c:	f103 39ff 	add.w	r9, r3, #4294967295
   10d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d32:	2b00      	cmp	r3, #0
   10d34:	f040 82e2 	bne.w	112fc <_dtoa_r+0xebc>
   10d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	f300 82db 	bgt.w	112f6 <_dtoa_r+0xeb6>
   10d40:	9b01      	ldr	r3, [sp, #4]
   10d42:	2b02      	cmp	r3, #2
   10d44:	f340 82d7 	ble.w	112f6 <_dtoa_r+0xeb6>
   10d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d4a:	f8cd 9018 	str.w	r9, [sp, #24]
   10d4e:	930a      	str	r3, [sp, #40]	; 0x28
   10d50:	e6c9      	b.n	10ae6 <_dtoa_r+0x6a6>
   10d52:	ed9d 7b02 	vldr	d7, [sp, #8]
   10d56:	f04f 0802 	mov.w	r8, #2
   10d5a:	eeb0 8a47 	vmov.f32	s16, s14
   10d5e:	eef0 8a67 	vmov.f32	s17, s15
   10d62:	e4d8      	b.n	10716 <_dtoa_r+0x2d6>
   10d64:	2301      	movs	r3, #1
   10d66:	930d      	str	r3, [sp, #52]	; 0x34
   10d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d6a:	9a06      	ldr	r2, [sp, #24]
   10d6c:	4413      	add	r3, r2
   10d6e:	9314      	str	r3, [sp, #80]	; 0x50
   10d70:	3301      	adds	r3, #1
   10d72:	2b01      	cmp	r3, #1
   10d74:	461e      	mov	r6, r3
   10d76:	930a      	str	r3, [sp, #40]	; 0x28
   10d78:	bfb8      	it	lt
   10d7a:	2601      	movlt	r6, #1
   10d7c:	2100      	movs	r1, #0
   10d7e:	2e17      	cmp	r6, #23
   10d80:	6461      	str	r1, [r4, #68]	; 0x44
   10d82:	f340 82d6 	ble.w	11332 <_dtoa_r+0xef2>
   10d86:	2201      	movs	r2, #1
   10d88:	2304      	movs	r3, #4
   10d8a:	005b      	lsls	r3, r3, #1
   10d8c:	4611      	mov	r1, r2
   10d8e:	3201      	adds	r2, #1
   10d90:	f103 0014 	add.w	r0, r3, #20
   10d94:	42b0      	cmp	r0, r6
   10d96:	d9f8      	bls.n	10d8a <_dtoa_r+0x94a>
   10d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d9a:	6461      	str	r1, [r4, #68]	; 0x44
   10d9c:	2b0e      	cmp	r3, #14
   10d9e:	bf8c      	ite	hi
   10da0:	2500      	movhi	r5, #0
   10da2:	f005 0501 	andls.w	r5, r5, #1
   10da6:	e492      	b.n	106ce <_dtoa_r+0x28e>
   10da8:	2301      	movs	r3, #1
   10daa:	930d      	str	r3, [sp, #52]	; 0x34
   10dac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10dae:	2e00      	cmp	r6, #0
   10db0:	f340 812a 	ble.w	11008 <_dtoa_r+0xbc8>
   10db4:	9614      	str	r6, [sp, #80]	; 0x50
   10db6:	960a      	str	r6, [sp, #40]	; 0x28
   10db8:	e7e0      	b.n	10d7c <_dtoa_r+0x93c>
   10dba:	2300      	movs	r3, #0
   10dbc:	930d      	str	r3, [sp, #52]	; 0x34
   10dbe:	e7d3      	b.n	10d68 <_dtoa_r+0x928>
   10dc0:	2300      	movs	r3, #0
   10dc2:	930d      	str	r3, [sp, #52]	; 0x34
   10dc4:	e7f2      	b.n	10dac <_dtoa_r+0x96c>
   10dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10dc8:	4642      	mov	r2, r8
   10dca:	4957      	ldr	r1, [pc, #348]	; (10f28 <_dtoa_r+0xae8>)
   10dcc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10dce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   10dd2:	464b      	mov	r3, r9
   10dd4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   10dd8:	f7fc f80c 	bl	cdf4 <__aeabi_dmul>
   10ddc:	4602      	mov	r2, r0
   10dde:	460b      	mov	r3, r1
   10de0:	4630      	mov	r0, r6
   10de2:	4639      	mov	r1, r7
   10de4:	ec43 2b18 	vmov	d8, r2, r3
   10de8:	f7fb fc6e 	bl	c6c8 <__aeabi_d2iz>
   10dec:	4680      	mov	r8, r0
   10dee:	f7fb fb79 	bl	c4e4 <__aeabi_i2d>
   10df2:	460b      	mov	r3, r1
   10df4:	4602      	mov	r2, r0
   10df6:	4639      	mov	r1, r7
   10df8:	4630      	mov	r0, r6
   10dfa:	f108 0830 	add.w	r8, r8, #48	; 0x30
   10dfe:	f7fb fa23 	bl	c248 <__aeabi_dsub>
   10e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e04:	4606      	mov	r6, r0
   10e06:	460f      	mov	r7, r1
   10e08:	2b01      	cmp	r3, #1
   10e0a:	f805 8b01 	strb.w	r8, [r5], #1
   10e0e:	d022      	beq.n	10e56 <_dtoa_r+0xa16>
   10e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   10e18:	4413      	add	r3, r2
   10e1a:	469b      	mov	fp, r3
   10e1c:	2200      	movs	r2, #0
   10e1e:	4b45      	ldr	r3, [pc, #276]	; (10f34 <_dtoa_r+0xaf4>)
   10e20:	4630      	mov	r0, r6
   10e22:	4639      	mov	r1, r7
   10e24:	f7fb ffe6 	bl	cdf4 <__aeabi_dmul>
   10e28:	4689      	mov	r9, r1
   10e2a:	4680      	mov	r8, r0
   10e2c:	f7fb fc4c 	bl	c6c8 <__aeabi_d2iz>
   10e30:	4607      	mov	r7, r0
   10e32:	f7fb fb57 	bl	c4e4 <__aeabi_i2d>
   10e36:	460b      	mov	r3, r1
   10e38:	4602      	mov	r2, r0
   10e3a:	4649      	mov	r1, r9
   10e3c:	4640      	mov	r0, r8
   10e3e:	f7fb fa03 	bl	c248 <__aeabi_dsub>
   10e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
   10e46:	4606      	mov	r6, r0
   10e48:	460f      	mov	r7, r1
   10e4a:	f805 3b01 	strb.w	r3, [r5], #1
   10e4e:	455d      	cmp	r5, fp
   10e50:	d1e4      	bne.n	10e1c <_dtoa_r+0x9dc>
   10e52:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   10e56:	2200      	movs	r2, #0
   10e58:	4b37      	ldr	r3, [pc, #220]	; (10f38 <_dtoa_r+0xaf8>)
   10e5a:	ee18 0a10 	vmov	r0, s16
   10e5e:	ec59 8b18 	vmov	r8, r9, d8
   10e62:	4649      	mov	r1, r9
   10e64:	f7fb f9f2 	bl	c24c <__adddf3>
   10e68:	4602      	mov	r2, r0
   10e6a:	460b      	mov	r3, r1
   10e6c:	4630      	mov	r0, r6
   10e6e:	4639      	mov	r1, r7
   10e70:	f7fb fc20 	bl	c6b4 <__aeabi_dcmpgt>
   10e74:	2800      	cmp	r0, #0
   10e76:	f040 81df 	bne.w	11238 <_dtoa_r+0xdf8>
   10e7a:	ee18 2a10 	vmov	r2, s16
   10e7e:	464b      	mov	r3, r9
   10e80:	2000      	movs	r0, #0
   10e82:	492d      	ldr	r1, [pc, #180]	; (10f38 <_dtoa_r+0xaf8>)
   10e84:	f7fb f9e0 	bl	c248 <__aeabi_dsub>
   10e88:	4602      	mov	r2, r0
   10e8a:	460b      	mov	r3, r1
   10e8c:	4630      	mov	r0, r6
   10e8e:	4639      	mov	r1, r7
   10e90:	f7fb fbf2 	bl	c678 <__aeabi_dcmplt>
   10e94:	2800      	cmp	r0, #0
   10e96:	f43f ad14 	beq.w	108c2 <_dtoa_r+0x482>
   10e9a:	462a      	mov	r2, r5
   10e9c:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   10ea0:	2b30      	cmp	r3, #48	; 0x30
   10ea2:	d0fa      	beq.n	10e9a <_dtoa_r+0xa5a>
   10ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10ea6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10eaa:	3301      	adds	r3, #1
   10eac:	9209      	str	r2, [sp, #36]	; 0x24
   10eae:	9306      	str	r3, [sp, #24]
   10eb0:	e594      	b.n	109dc <_dtoa_r+0x59c>
   10eb2:	9b06      	ldr	r3, [sp, #24]
   10eb4:	3301      	adds	r3, #1
   10eb6:	9306      	str	r3, [sp, #24]
   10eb8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   10ebc:	2601      	movs	r6, #1
   10ebe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   10ec2:	e002      	b.n	10eca <_dtoa_r+0xa8a>
   10ec4:	f019 febc 	bl	2ac40 <__multadd>
   10ec8:	4682      	mov	sl, r0
   10eca:	4639      	mov	r1, r7
   10ecc:	4650      	mov	r0, sl
   10ece:	f018 fbff 	bl	296d0 <quorem>
   10ed2:	454e      	cmp	r6, r9
   10ed4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   10ed8:	4651      	mov	r1, sl
   10eda:	f04f 0300 	mov.w	r3, #0
   10ede:	f04f 020a 	mov.w	r2, #10
   10ee2:	4620      	mov	r0, r4
   10ee4:	f106 0601 	add.w	r6, r6, #1
   10ee8:	f808 cb01 	strb.w	ip, [r8], #1
   10eec:	dbea      	blt.n	10ec4 <_dtoa_r+0xa84>
   10eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ef0:	2600      	movs	r6, #0
   10ef2:	f8cd c008 	str.w	ip, [sp, #8]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	bfcc      	ite	gt
   10efa:	469b      	movgt	fp, r3
   10efc:	f04f 0b01 	movle.w	fp, #1
   10f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f02:	449b      	add	fp, r3
   10f04:	4651      	mov	r1, sl
   10f06:	2201      	movs	r2, #1
   10f08:	4620      	mov	r0, r4
   10f0a:	f01a f879 	bl	2b000 <__lshift>
   10f0e:	4639      	mov	r1, r7
   10f10:	4682      	mov	sl, r0
   10f12:	f01a f8dd 	bl	2b0d0 <__mcmp>
   10f16:	2800      	cmp	r0, #0
   10f18:	f340 813d 	ble.w	11196 <_dtoa_r+0xd56>
   10f1c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   10f20:	f10b 3bff 	add.w	fp, fp, #4294967295
   10f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10f26:	e00e      	b.n	10f46 <_dtoa_r+0xb06>
   10f28:	0002ed28 	.word	0x0002ed28
   10f2c:	0002ed00 	.word	0x0002ed00
   10f30:	40140000 	.word	0x40140000
   10f34:	40240000 	.word	0x40240000
   10f38:	3fe00000 	.word	0x3fe00000
   10f3c:	455a      	cmp	r2, fp
   10f3e:	f000 8135 	beq.w	111ac <_dtoa_r+0xd6c>
   10f42:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   10f46:	2b39      	cmp	r3, #57	; 0x39
   10f48:	f10b 0801 	add.w	r8, fp, #1
   10f4c:	d0f6      	beq.n	10f3c <_dtoa_r+0xafc>
   10f4e:	3301      	adds	r3, #1
   10f50:	f88b 3000 	strb.w	r3, [fp]
   10f54:	4639      	mov	r1, r7
   10f56:	4620      	mov	r0, r4
   10f58:	f019 fe68 	bl	2ac2c <_Bfree>
   10f5c:	2d00      	cmp	r5, #0
   10f5e:	f000 812c 	beq.w	111ba <_dtoa_r+0xd7a>
   10f62:	2e00      	cmp	r6, #0
   10f64:	f000 81ed 	beq.w	11342 <_dtoa_r+0xf02>
   10f68:	42ae      	cmp	r6, r5
   10f6a:	f000 81ea 	beq.w	11342 <_dtoa_r+0xf02>
   10f6e:	4631      	mov	r1, r6
   10f70:	4620      	mov	r0, r4
   10f72:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10f76:	f019 fe59 	bl	2ac2c <_Bfree>
   10f7a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   10f7e:	e529      	b.n	109d4 <_dtoa_r+0x594>
   10f80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   10f84:	f04f 0802 	mov.w	r8, #2
   10f88:	f7ff bbe0 	b.w	1074c <_dtoa_r+0x30c>
   10f8c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10f90:	2900      	cmp	r1, #0
   10f92:	f47f aeb1 	bne.w	10cf8 <_dtoa_r+0x8b8>
   10f96:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	f47f aeac 	bne.w	10cf8 <_dtoa_r+0x8b8>
   10fa0:	4bca      	ldr	r3, [pc, #808]	; (112cc <_dtoa_r+0xe8c>)
   10fa2:	4013      	ands	r3, r2
   10fa4:	2b00      	cmp	r3, #0
   10fa6:	f000 818d 	beq.w	112c4 <_dtoa_r+0xe84>
   10faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10fac:	f04f 0801 	mov.w	r8, #1
   10fb0:	3301      	adds	r3, #1
   10fb2:	930c      	str	r3, [sp, #48]	; 0x30
   10fb4:	9b08      	ldr	r3, [sp, #32]
   10fb6:	3301      	adds	r3, #1
   10fb8:	9308      	str	r3, [sp, #32]
   10fba:	e561      	b.n	10a80 <_dtoa_r+0x640>
   10fbc:	4629      	mov	r1, r5
   10fbe:	463a      	mov	r2, r7
   10fc0:	4620      	mov	r0, r4
   10fc2:	f019 ffcd 	bl	2af60 <__pow5mult>
   10fc6:	4605      	mov	r5, r0
   10fc8:	4652      	mov	r2, sl
   10fca:	4620      	mov	r0, r4
   10fcc:	4629      	mov	r1, r5
   10fce:	f019 ff25 	bl	2ae1c <__multiply>
   10fd2:	4680      	mov	r8, r0
   10fd4:	4651      	mov	r1, sl
   10fd6:	4620      	mov	r0, r4
   10fd8:	46c2      	mov	sl, r8
   10fda:	f019 fe27 	bl	2ac2c <_Bfree>
   10fde:	e53d      	b.n	10a5c <_dtoa_r+0x61c>
   10fe0:	1bdf      	subs	r7, r3, r7
   10fe2:	e488      	b.n	108f6 <_dtoa_r+0x4b6>
   10fe4:	4629      	mov	r1, r5
   10fe6:	4632      	mov	r2, r6
   10fe8:	4620      	mov	r0, r4
   10fea:	f01a f809 	bl	2b000 <__lshift>
   10fee:	4605      	mov	r5, r0
   10ff0:	e5ad      	b.n	10b4e <_dtoa_r+0x70e>
   10ff2:	4620      	mov	r0, r4
   10ff4:	f019 fe1a 	bl	2ac2c <_Bfree>
   10ff8:	2301      	movs	r3, #1
   10ffa:	e5e0      	b.n	10bbe <_dtoa_r+0x77e>
   10ffc:	f019 fe20 	bl	2ac40 <__multadd>
   11000:	46b0      	mov	r8, r6
   11002:	4605      	mov	r5, r0
   11004:	4681      	mov	r9, r0
   11006:	e5b1      	b.n	10b6c <_dtoa_r+0x72c>
   11008:	2301      	movs	r3, #1
   1100a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1100e:	f7ff bb5a 	b.w	106c6 <_dtoa_r+0x286>
   11012:	2700      	movs	r7, #0
   11014:	463d      	mov	r5, r7
   11016:	e577      	b.n	10b08 <_dtoa_r+0x6c8>
   11018:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1101c:	2900      	cmp	r1, #0
   1101e:	f47f ad2d 	bne.w	10a7c <_dtoa_r+0x63c>
   11022:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11026:	2b00      	cmp	r3, #0
   11028:	f47f ad28 	bne.w	10a7c <_dtoa_r+0x63c>
   1102c:	e7b8      	b.n	10fa0 <_dtoa_r+0xb60>
   1102e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11030:	2b00      	cmp	r3, #0
   11032:	f43f ac9c 	beq.w	1096e <_dtoa_r+0x52e>
   11036:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11038:	2d00      	cmp	r5, #0
   1103a:	f77f ac42 	ble.w	108c2 <_dtoa_r+0x482>
   1103e:	9b06      	ldr	r3, [sp, #24]
   11040:	2200      	movs	r2, #0
   11042:	4630      	mov	r0, r6
   11044:	4639      	mov	r1, r7
   11046:	3b01      	subs	r3, #1
   11048:	9312      	str	r3, [sp, #72]	; 0x48
   1104a:	4ba1      	ldr	r3, [pc, #644]	; (112d0 <_dtoa_r+0xe90>)
   1104c:	f7fb fed2 	bl	cdf4 <__aeabi_dmul>
   11050:	4606      	mov	r6, r0
   11052:	460f      	mov	r7, r1
   11054:	f108 0001 	add.w	r0, r8, #1
   11058:	f7fb fa44 	bl	c4e4 <__aeabi_i2d>
   1105c:	4632      	mov	r2, r6
   1105e:	463b      	mov	r3, r7
   11060:	f7fb fec8 	bl	cdf4 <__aeabi_dmul>
   11064:	2200      	movs	r2, #0
   11066:	4b9b      	ldr	r3, [pc, #620]	; (112d4 <_dtoa_r+0xe94>)
   11068:	f7fb f8f0 	bl	c24c <__adddf3>
   1106c:	9511      	str	r5, [sp, #68]	; 0x44
   1106e:	4680      	mov	r8, r0
   11070:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   11074:	f7ff bb8b 	b.w	1078e <_dtoa_r+0x34e>
   11078:	900f      	str	r0, [sp, #60]	; 0x3c
   1107a:	e456      	b.n	1092a <_dtoa_r+0x4ea>
   1107c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1107e:	2a00      	cmp	r2, #0
   11080:	f000 80ac 	beq.w	111dc <_dtoa_r+0xd9c>
   11084:	990c      	ldr	r1, [sp, #48]	; 0x30
   11086:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1108a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1108c:	460e      	mov	r6, r1
   1108e:	9a08      	ldr	r2, [sp, #32]
   11090:	441a      	add	r2, r3
   11092:	9208      	str	r2, [sp, #32]
   11094:	460a      	mov	r2, r1
   11096:	441a      	add	r2, r3
   11098:	920c      	str	r2, [sp, #48]	; 0x30
   1109a:	e438      	b.n	1090e <_dtoa_r+0x4ce>
   1109c:	2100      	movs	r1, #0
   1109e:	4620      	mov	r0, r4
   110a0:	6461      	str	r1, [r4, #68]	; 0x44
   110a2:	f019 fd9d 	bl	2abe0 <_Balloc>
   110a6:	9a06      	ldr	r2, [sp, #24]
   110a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   110aa:	2a0e      	cmp	r2, #14
   110ac:	9009      	str	r0, [sp, #36]	; 0x24
   110ae:	6420      	str	r0, [r4, #64]	; 0x40
   110b0:	f300 8153 	bgt.w	1135a <_dtoa_r+0xf1a>
   110b4:	2b00      	cmp	r3, #0
   110b6:	f2c0 8150 	blt.w	1135a <_dtoa_r+0xf1a>
   110ba:	f04f 32ff 	mov.w	r2, #4294967295
   110be:	4b86      	ldr	r3, [pc, #536]	; (112d8 <_dtoa_r+0xe98>)
   110c0:	920a      	str	r2, [sp, #40]	; 0x28
   110c2:	9a06      	ldr	r2, [sp, #24]
   110c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   110c8:	ed93 7b00 	vldr	d7, [r3]
   110cc:	eeb0 8a47 	vmov.f32	s16, s14
   110d0:	eef0 8a67 	vmov.f32	s17, s15
   110d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   110d8:	ec53 2b18 	vmov	r2, r3, d8
   110dc:	4630      	mov	r0, r6
   110de:	4639      	mov	r1, r7
   110e0:	f7fb ffb2 	bl	d048 <__aeabi_ddiv>
   110e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   110e6:	f7fb faef 	bl	c6c8 <__aeabi_d2iz>
   110ea:	4681      	mov	r9, r0
   110ec:	f7fb f9fa 	bl	c4e4 <__aeabi_i2d>
   110f0:	ec53 2b18 	vmov	r2, r3, d8
   110f4:	f7fb fe7e 	bl	cdf4 <__aeabi_dmul>
   110f8:	460b      	mov	r3, r1
   110fa:	4602      	mov	r2, r0
   110fc:	4639      	mov	r1, r7
   110fe:	4630      	mov	r0, r6
   11100:	f7fb f8a2 	bl	c248 <__aeabi_dsub>
   11104:	f109 0330 	add.w	r3, r9, #48	; 0x30
   11108:	f805 3b01 	strb.w	r3, [r5], #1
   1110c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1110e:	2b01      	cmp	r3, #1
   11110:	f000 80ae 	beq.w	11270 <_dtoa_r+0xe30>
   11114:	ee09 aa10 	vmov	s18, sl
   11118:	f04f 0801 	mov.w	r8, #1
   1111c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   11120:	ee09 4a90 	vmov	s19, r4
   11124:	ec5a 9b18 	vmov	r9, sl, d8
   11128:	e017      	b.n	1115a <_dtoa_r+0xd1a>
   1112a:	f7fb ff8d 	bl	d048 <__aeabi_ddiv>
   1112e:	f7fb facb 	bl	c6c8 <__aeabi_d2iz>
   11132:	4604      	mov	r4, r0
   11134:	f7fb f9d6 	bl	c4e4 <__aeabi_i2d>
   11138:	464a      	mov	r2, r9
   1113a:	4653      	mov	r3, sl
   1113c:	f7fb fe5a 	bl	cdf4 <__aeabi_dmul>
   11140:	460b      	mov	r3, r1
   11142:	4602      	mov	r2, r0
   11144:	4639      	mov	r1, r7
   11146:	4630      	mov	r0, r6
   11148:	f7fb f87e 	bl	c248 <__aeabi_dsub>
   1114c:	f104 0330 	add.w	r3, r4, #48	; 0x30
   11150:	45d8      	cmp	r8, fp
   11152:	f805 3b01 	strb.w	r3, [r5], #1
   11156:	f000 8086 	beq.w	11266 <_dtoa_r+0xe26>
   1115a:	2200      	movs	r2, #0
   1115c:	4b5c      	ldr	r3, [pc, #368]	; (112d0 <_dtoa_r+0xe90>)
   1115e:	f7fb fe49 	bl	cdf4 <__aeabi_dmul>
   11162:	2200      	movs	r2, #0
   11164:	2300      	movs	r3, #0
   11166:	4606      	mov	r6, r0
   11168:	460f      	mov	r7, r1
   1116a:	f7fb fa7b 	bl	c664 <__aeabi_dcmpeq>
   1116e:	4604      	mov	r4, r0
   11170:	f108 0801 	add.w	r8, r8, #1
   11174:	464a      	mov	r2, r9
   11176:	4653      	mov	r3, sl
   11178:	4630      	mov	r0, r6
   1117a:	4639      	mov	r1, r7
   1117c:	2c00      	cmp	r4, #0
   1117e:	d0d4      	beq.n	1112a <_dtoa_r+0xcea>
   11180:	ee19 aa10 	vmov	sl, s18
   11184:	ee19 4a90 	vmov	r4, s19
   11188:	9b06      	ldr	r3, [sp, #24]
   1118a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1118e:	3301      	adds	r3, #1
   11190:	9509      	str	r5, [sp, #36]	; 0x24
   11192:	9306      	str	r3, [sp, #24]
   11194:	e422      	b.n	109dc <_dtoa_r+0x59c>
   11196:	d103      	bne.n	111a0 <_dtoa_r+0xd60>
   11198:	9b02      	ldr	r3, [sp, #8]
   1119a:	07d8      	lsls	r0, r3, #31
   1119c:	f53f aebe 	bmi.w	10f1c <_dtoa_r+0xadc>
   111a0:	46d8      	mov	r8, fp
   111a2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   111a6:	2b30      	cmp	r3, #48	; 0x30
   111a8:	d0fa      	beq.n	111a0 <_dtoa_r+0xd60>
   111aa:	e6d3      	b.n	10f54 <_dtoa_r+0xb14>
   111ac:	9a06      	ldr	r2, [sp, #24]
   111ae:	2331      	movs	r3, #49	; 0x31
   111b0:	3201      	adds	r2, #1
   111b2:	9206      	str	r2, [sp, #24]
   111b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111b6:	7013      	strb	r3, [r2, #0]
   111b8:	e6cc      	b.n	10f54 <_dtoa_r+0xb14>
   111ba:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   111be:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   111c2:	e40b      	b.n	109dc <_dtoa_r+0x59c>
   111c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   111c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   111c8:	1a9e      	subs	r6, r3, r2
   111ca:	f7ff bba0 	b.w	1090e <_dtoa_r+0x4ce>
   111ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111d0:	9109      	str	r1, [sp, #36]	; 0x24
   111d2:	3301      	adds	r3, #1
   111d4:	9312      	str	r3, [sp, #72]	; 0x48
   111d6:	2331      	movs	r3, #49	; 0x31
   111d8:	f7ff bb65 	b.w	108a6 <_dtoa_r+0x466>
   111dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   111de:	990c      	ldr	r1, [sp, #48]	; 0x30
   111e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   111e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   111e6:	460e      	mov	r6, r1
   111e8:	e751      	b.n	1108e <_dtoa_r+0xc4e>
   111ea:	2b00      	cmp	r3, #0
   111ec:	dd11      	ble.n	11212 <_dtoa_r+0xdd2>
   111ee:	4651      	mov	r1, sl
   111f0:	2201      	movs	r2, #1
   111f2:	4620      	mov	r0, r4
   111f4:	f019 ff04 	bl	2b000 <__lshift>
   111f8:	4639      	mov	r1, r7
   111fa:	4682      	mov	sl, r0
   111fc:	f019 ff68 	bl	2b0d0 <__mcmp>
   11200:	2800      	cmp	r0, #0
   11202:	f340 808c 	ble.w	1131e <_dtoa_r+0xede>
   11206:	9b02      	ldr	r3, [sp, #8]
   11208:	2b39      	cmp	r3, #57	; 0x39
   1120a:	d067      	beq.n	112dc <_dtoa_r+0xe9c>
   1120c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11210:	9302      	str	r3, [sp, #8]
   11212:	9b02      	ldr	r3, [sp, #8]
   11214:	462e      	mov	r6, r5
   11216:	464d      	mov	r5, r9
   11218:	f808 3b01 	strb.w	r3, [r8], #1
   1121c:	e69a      	b.n	10f54 <_dtoa_r+0xb14>
   1121e:	4625      	mov	r5, r4
   11220:	ee19 aa10 	vmov	sl, s18
   11224:	ee18 4a10 	vmov	r4, s16
   11228:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1122a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1122e:	3301      	adds	r3, #1
   11230:	9509      	str	r5, [sp, #36]	; 0x24
   11232:	9306      	str	r3, [sp, #24]
   11234:	f7ff bbd2 	b.w	109dc <_dtoa_r+0x59c>
   11238:	9909      	ldr	r1, [sp, #36]	; 0x24
   1123a:	f7ff bb2c 	b.w	10896 <_dtoa_r+0x456>
   1123e:	6869      	ldr	r1, [r5, #4]
   11240:	4620      	mov	r0, r4
   11242:	f019 fccd 	bl	2abe0 <_Balloc>
   11246:	692b      	ldr	r3, [r5, #16]
   11248:	4606      	mov	r6, r0
   1124a:	f105 010c 	add.w	r1, r5, #12
   1124e:	3302      	adds	r3, #2
   11250:	300c      	adds	r0, #12
   11252:	009a      	lsls	r2, r3, #2
   11254:	f7fb fc7a 	bl	cb4c <memcpy>
   11258:	4631      	mov	r1, r6
   1125a:	2201      	movs	r2, #1
   1125c:	4620      	mov	r0, r4
   1125e:	f019 fecf 	bl	2b000 <__lshift>
   11262:	4681      	mov	r9, r0
   11264:	e478      	b.n	10b58 <_dtoa_r+0x718>
   11266:	46a1      	mov	r9, r4
   11268:	ee19 aa10 	vmov	sl, s18
   1126c:	ee19 4a90 	vmov	r4, s19
   11270:	4602      	mov	r2, r0
   11272:	460b      	mov	r3, r1
   11274:	f7fa ffea 	bl	c24c <__adddf3>
   11278:	4606      	mov	r6, r0
   1127a:	460f      	mov	r7, r1
   1127c:	ec53 2b18 	vmov	r2, r3, d8
   11280:	f7fb fa18 	bl	c6b4 <__aeabi_dcmpgt>
   11284:	b960      	cbnz	r0, 112a0 <_dtoa_r+0xe60>
   11286:	4630      	mov	r0, r6
   11288:	4639      	mov	r1, r7
   1128a:	ec53 2b18 	vmov	r2, r3, d8
   1128e:	f7fb f9e9 	bl	c664 <__aeabi_dcmpeq>
   11292:	2800      	cmp	r0, #0
   11294:	f43f af78 	beq.w	11188 <_dtoa_r+0xd48>
   11298:	f019 0f01 	tst.w	r9, #1
   1129c:	f43f af74 	beq.w	11188 <_dtoa_r+0xd48>
   112a0:	9b06      	ldr	r3, [sp, #24]
   112a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   112a4:	9312      	str	r3, [sp, #72]	; 0x48
   112a6:	f7ff baf6 	b.w	10896 <_dtoa_r+0x456>
   112aa:	9b02      	ldr	r3, [sp, #8]
   112ac:	2b39      	cmp	r3, #57	; 0x39
   112ae:	d015      	beq.n	112dc <_dtoa_r+0xe9c>
   112b0:	9b02      	ldr	r3, [sp, #8]
   112b2:	462e      	mov	r6, r5
   112b4:	464d      	mov	r5, r9
   112b6:	3301      	adds	r3, #1
   112b8:	f808 3b01 	strb.w	r3, [r8], #1
   112bc:	e64a      	b.n	10f54 <_dtoa_r+0xb14>
   112be:	462e      	mov	r6, r5
   112c0:	464d      	mov	r5, r9
   112c2:	e61f      	b.n	10f04 <_dtoa_r+0xac4>
   112c4:	4698      	mov	r8, r3
   112c6:	f7ff bbdb 	b.w	10a80 <_dtoa_r+0x640>
   112ca:	bf00      	nop
   112cc:	7ff00000 	.word	0x7ff00000
   112d0:	40240000 	.word	0x40240000
   112d4:	401c0000 	.word	0x401c0000
   112d8:	0002ed28 	.word	0x0002ed28
   112dc:	46c3      	mov	fp, r8
   112de:	2339      	movs	r3, #57	; 0x39
   112e0:	462e      	mov	r6, r5
   112e2:	464d      	mov	r5, r9
   112e4:	f80b 3b01 	strb.w	r3, [fp], #1
   112e8:	e61a      	b.n	10f20 <_dtoa_r+0xae0>
   112ea:	9b02      	ldr	r3, [sp, #8]
   112ec:	2b39      	cmp	r3, #57	; 0x39
   112ee:	d0f5      	beq.n	112dc <_dtoa_r+0xe9c>
   112f0:	2e00      	cmp	r6, #0
   112f2:	dc8b      	bgt.n	1120c <_dtoa_r+0xdcc>
   112f4:	e78d      	b.n	11212 <_dtoa_r+0xdd2>
   112f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   112f8:	930a      	str	r3, [sp, #40]	; 0x28
   112fa:	e5dd      	b.n	10eb8 <_dtoa_r+0xa78>
   112fc:	4629      	mov	r1, r5
   112fe:	2300      	movs	r3, #0
   11300:	220a      	movs	r2, #10
   11302:	4620      	mov	r0, r4
   11304:	f019 fc9c 	bl	2ac40 <__multadd>
   11308:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1130a:	4605      	mov	r5, r0
   1130c:	2b00      	cmp	r3, #0
   1130e:	dc03      	bgt.n	11318 <_dtoa_r+0xed8>
   11310:	9b01      	ldr	r3, [sp, #4]
   11312:	2b02      	cmp	r3, #2
   11314:	f73f ad18 	bgt.w	10d48 <_dtoa_r+0x908>
   11318:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1131a:	930a      	str	r3, [sp, #40]	; 0x28
   1131c:	e414      	b.n	10b48 <_dtoa_r+0x708>
   1131e:	f47f af78 	bne.w	11212 <_dtoa_r+0xdd2>
   11322:	9b02      	ldr	r3, [sp, #8]
   11324:	07de      	lsls	r6, r3, #31
   11326:	f57f af74 	bpl.w	11212 <_dtoa_r+0xdd2>
   1132a:	e76c      	b.n	11206 <_dtoa_r+0xdc6>
   1132c:	f04f 0802 	mov.w	r8, #2
   11330:	e4af      	b.n	10c92 <_dtoa_r+0x852>
   11332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11334:	2b0e      	cmp	r3, #14
   11336:	bf8c      	ite	hi
   11338:	2500      	movhi	r5, #0
   1133a:	f005 0501 	andls.w	r5, r5, #1
   1133e:	f7ff b9c6 	b.w	106ce <_dtoa_r+0x28e>
   11342:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   11346:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   1134a:	f7ff bb43 	b.w	109d4 <_dtoa_r+0x594>
   1134e:	f43f abae 	beq.w	10aae <_dtoa_r+0x66e>
   11352:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   11356:	f7ff bbe8 	b.w	10b2a <_dtoa_r+0x6ea>
   1135a:	f04f 32ff 	mov.w	r2, #4294967295
   1135e:	2100      	movs	r1, #0
   11360:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
   11364:	2101      	movs	r1, #1
   11366:	9214      	str	r2, [sp, #80]	; 0x50
   11368:	910d      	str	r1, [sp, #52]	; 0x34
   1136a:	f7ff bab5 	b.w	108d8 <_dtoa_r+0x498>
   1136e:	bf00      	nop

00011370 <nan>:
   11370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 11378 <nan+0x8>
   11374:	4770      	bx	lr
   11376:	bf00      	nop
   11378:	00000000 	.word	0x00000000
   1137c:	7ff80000 	.word	0x7ff80000

00011380 <data_publish.constprop.0>:
	uint8_t *data, size_t len)
{
	
	struct mqtt_publish_param param;

	param.message.topic.qos = qos;
   11380:	2301      	movs	r3, #1
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   11382:	b5f0      	push	{r4, r5, r6, r7, lr}
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11384:	4d1e      	ldr	r5, [pc, #120]	; (11400 <data_publish.constprop.0+0x80>)
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   11386:	b08b      	sub	sp, #44	; 0x2c
   11388:	4606      	mov	r6, r0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   1138a:	4628      	mov	r0, r5
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   1138c:	460c      	mov	r4, r1
	param.message.topic.qos = qos;
   1138e:	f88d 3018 	strb.w	r3, [sp, #24]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11392:	9504      	str	r5, [sp, #16]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   11394:	f015 fa26 	bl	267e4 <strlen>
	param.message.payload.data = data;
	param.message.payload.len = len;
   11398:	e9cd 6407 	strd	r6, r4, [sp, #28]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   1139c:	9005      	str	r0, [sp, #20]
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1139e:	f003 f8e1 	bl	14564 <z_timer_cycle_get_32>
	param.message_id = k_cycle_get_32();
	param.dup_flag = 0;
   113a2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   113a6:	4c17      	ldr	r4, [pc, #92]	; (11404 <data_publish.constprop.0+0x84>)
   113a8:	f023 0303 	bic.w	r3, r3, #3
   113ac:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   113b0:	4b15      	ldr	r3, [pc, #84]	; (11408 <data_publish.constprop.0+0x88>)
	param.message_id = k_cycle_get_32();
   113b2:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
	param.retain_flag = 0;

	//("Publishing: %s", data, len);
	LOG_INF("Publishing: %s", log_strdup(data));
   113b6:	4630      	mov	r0, r6
   113b8:	1ae4      	subs	r4, r4, r3
   113ba:	f001 fe67 	bl	1308c <log_strdup>
   113be:	08e4      	lsrs	r4, r4, #3
   113c0:	01a4      	lsls	r4, r4, #6
   113c2:	f044 0703 	orr.w	r7, r4, #3
   113c6:	4601      	mov	r1, r0
   113c8:	463a      	mov	r2, r7
   113ca:	4810      	ldr	r0, [pc, #64]	; (1140c <data_publish.constprop.0+0x8c>)
   113cc:	f01b f873 	bl	2c4b6 <log_1>
	LOG_DBG("to topic: %s len: %u",
   113d0:	4628      	mov	r0, r5
   113d2:	f001 fe5b 	bl	1308c <log_strdup>
   113d6:	9003      	str	r0, [sp, #12]
   113d8:	4628      	mov	r0, r5
   113da:	f015 fa03 	bl	267e4 <strlen>
   113de:	f044 0404 	orr.w	r4, r4, #4
   113e2:	4603      	mov	r3, r0
   113e4:	9a03      	ldr	r2, [sp, #12]
   113e6:	490a      	ldr	r1, [pc, #40]	; (11410 <data_publish.constprop.0+0x90>)
   113e8:	480a      	ldr	r0, [pc, #40]	; (11414 <data_publish.constprop.0+0x94>)
   113ea:	f8ad 4000 	strh.w	r4, [sp]
   113ee:	f01b f892 	bl	2c516 <log_3>
		log_strdup(CONFIG_MQTT_PUB_TOPIC),
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));

	return mqtt_publish(c, &param);
   113f2:	a904      	add	r1, sp, #16
   113f4:	4808      	ldr	r0, [pc, #32]	; (11418 <data_publish.constprop.0+0x98>)
   113f6:	f01c f831 	bl	2d45c <mqtt_publish>
}
   113fa:	b00b      	add	sp, #44	; 0x2c
   113fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113fe:	bf00      	nop
   11400:	0002f72c 	.word	0x0002f72c
   11404:	0002ec34 	.word	0x0002ec34
   11408:	0002ebc4 	.word	0x0002ebc4
   1140c:	0002f747 	.word	0x0002f747
   11410:	0002fe73 	.word	0x0002fe73
   11414:	0002f756 	.word	0x0002f756
   11418:	20021454 	.word	0x20021454

0001141c <k_work_submit_to_queue.constprop.0>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   1141c:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1141e:	f100 0308 	add.w	r3, r0, #8
   11422:	e8d3 2fef 	ldaex	r2, [r3]
   11426:	f042 0001 	orr.w	r0, r2, #1
   1142a:	e8c3 0fec 	stlex	ip, r0, [r3]
   1142e:	f1bc 0f00 	cmp.w	ip, #0
   11432:	d1f6      	bne.n	11422 <k_work_submit_to_queue.constprop.0+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11434:	07d3      	lsls	r3, r2, #31
   11436:	d402      	bmi.n	1143e <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
   11438:	4801      	ldr	r0, [pc, #4]	; (11440 <k_work_submit_to_queue.constprop.0+0x24>)
   1143a:	f01d b8a7 	b.w	2e58c <k_queue_append>
	}
}
   1143e:	4770      	bx	lr
   11440:	20020ce8 	.word	0x20020ce8

00011444 <button_handler>:
*  Can be used to simulate alarm events.
*/

static void button_handler(uint32_t button_states, uint32_t has_changed)
{
	if (has_changed & button_states & DK_BTN1_MSK) {
   11444:	4008      	ands	r0, r1
{
   11446:	b508      	push	{r3, lr}
	if (has_changed & button_states & DK_BTN1_MSK) {
   11448:	07c3      	lsls	r3, r0, #31
   1144a:	d50f      	bpl.n	1146c <button_handler+0x28>
   1144c:	4b08      	ldr	r3, [pc, #32]	; (11470 <button_handler+0x2c>)
   1144e:	4a09      	ldr	r2, [pc, #36]	; (11474 <button_handler+0x30>)
		LOG_DBG("DEV_DBG: button 1 pressed");
   11450:	4809      	ldr	r0, [pc, #36]	; (11478 <button_handler+0x34>)
   11452:	1ad2      	subs	r2, r2, r3
   11454:	08d2      	lsrs	r2, r2, #3
   11456:	0192      	lsls	r2, r2, #6
   11458:	4908      	ldr	r1, [pc, #32]	; (1147c <button_handler+0x38>)
   1145a:	f042 0204 	orr.w	r2, r2, #4
   1145e:	f01b f82a 	bl	2c4b6 <log_1>
	else if (has_changed & button_states & DK_BTN2_MSK) {
	
	}

	return;
}
   11462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit_to_queue(&app_work_q, &alarm_work);
   11466:	4806      	ldr	r0, [pc, #24]	; (11480 <button_handler+0x3c>)
   11468:	f7ff bfd8 	b.w	1141c <k_work_submit_to_queue.constprop.0>
}
   1146c:	bd08      	pop	{r3, pc}
   1146e:	bf00      	nop
   11470:	0002ebc4 	.word	0x0002ebc4
   11474:	0002ec34 	.word	0x0002ec34
   11478:	0002f76f 	.word	0x0002f76f
   1147c:	0002fe91 	.word	0x0002fe91
   11480:	20021448 	.word	0x20021448

00011484 <app_timer_handler>:
	}
}

/* @brief triggers every minute. Publish work if one period has passed */ 
void app_timer_handler(struct k_timer *dummy)
{
   11484:	b510      	push	{r4, lr}
	static uint32_t minutes;

	minutes++;
   11486:	4c0a      	ldr	r4, [pc, #40]	; (114b0 <app_timer_handler+0x2c>)
   11488:	490a      	ldr	r1, [pc, #40]	; (114b4 <app_timer_handler+0x30>)
   1148a:	6822      	ldr	r2, [r4, #0]
   1148c:	3201      	adds	r2, #1
   1148e:	6022      	str	r2, [r4, #0]
   11490:	434a      	muls	r2, r1
	/* This shall match the PSM interval*/
	if (minutes % TRANSMISSION_INTERVAL == 0) {
   11492:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   11496:	d805      	bhi.n	114a4 <app_timer_handler+0x20>
		printk("Timer: fired sample interval\n");
   11498:	4807      	ldr	r0, [pc, #28]	; (114b8 <app_timer_handler+0x34>)
   1149a:	f01a fdb0 	bl	2bffe <printk>
		k_work_submit_to_queue(&app_work_q, &periodic_work);
   1149e:	4807      	ldr	r0, [pc, #28]	; (114bc <app_timer_handler+0x38>)
   114a0:	f7ff ffbc 	bl	1141c <k_work_submit_to_queue.constprop.0>
	}
	printk("Elapsed time: %d\n", minutes);
   114a4:	6821      	ldr	r1, [r4, #0]
   114a6:	4806      	ldr	r0, [pc, #24]	; (114c0 <app_timer_handler+0x3c>)
}
   114a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Elapsed time: %d\n", minutes);
   114ac:	f01a bda7 	b.w	2bffe <printk>
   114b0:	200214c4 	.word	0x200214c4
   114b4:	cccccccd 	.word	0xcccccccd
   114b8:	0002f78d 	.word	0x0002f78d
   114bc:	200214c8 	.word	0x200214c8
   114c0:	0002f7ab 	.word	0x0002f7ab

000114c4 <rsrp_cb>:
	strcpy(destination->data, cJSON_Print(message));

	cJSON_Delete(message);
}

void rsrp_cb(char rsrp_val) {
   114c4:	b538      	push	{r3, r4, r5, lr}
   114c6:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   114c8:	4d0d      	ldr	r5, [pc, #52]	; (11500 <rsrp_cb+0x3c>)
   114ca:	f04f 32ff 	mov.w	r2, #4294967295
   114ce:	f04f 33ff 	mov.w	r3, #4294967295
   114d2:	4628      	mov	r0, r5
   114d4:	f011 fb62 	bl	22b9c <z_impl_k_mutex_lock>
	
	k_mutex_lock(&rsrp_mutex, K_FOREVER);
    current_rsrp = rsrp_val;
   114d8:	4b0a      	ldr	r3, [pc, #40]	; (11504 <rsrp_cb+0x40>)
   114da:	4a0b      	ldr	r2, [pc, #44]	; (11508 <rsrp_cb+0x44>)
   114dc:	601c      	str	r4, [r3, #0]
   114de:	4b0b      	ldr	r3, [pc, #44]	; (1150c <rsrp_cb+0x48>)
    LOG_DBG("RSRP callback: %d", rsrp_val);
   114e0:	490b      	ldr	r1, [pc, #44]	; (11510 <rsrp_cb+0x4c>)
   114e2:	1a9b      	subs	r3, r3, r2
   114e4:	08db      	lsrs	r3, r3, #3
   114e6:	019b      	lsls	r3, r3, #6
   114e8:	4622      	mov	r2, r4
   114ea:	480a      	ldr	r0, [pc, #40]	; (11514 <rsrp_cb+0x50>)
   114ec:	f043 0304 	orr.w	r3, r3, #4
   114f0:	f01a fff8 	bl	2c4e4 <log_2>
	return z_impl_k_mutex_unlock(mutex);
   114f4:	4628      	mov	r0, r5
	k_mutex_unlock(&rsrp_mutex);

}
   114f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   114fa:	f011 bc49 	b.w	22d90 <z_impl_k_mutex_unlock>
   114fe:	bf00      	nop
   11500:	20020bb8 	.word	0x20020bb8
   11504:	200214b8 	.word	0x200214b8
   11508:	0002ebc4 	.word	0x0002ebc4
   1150c:	0002ec34 	.word	0x0002ec34
   11510:	0002fee2 	.word	0x0002fee2
   11514:	0002f7bd 	.word	0x0002f7bd

00011518 <date_time_handler>:
void date_time_handler(const struct date_time_evt *evt) {
   11518:	b508      	push	{r3, lr}
   1151a:	7803      	ldrb	r3, [r0, #0]
   1151c:	2b03      	cmp	r3, #3
   1151e:	d831      	bhi.n	11584 <date_time_handler+0x6c>
   11520:	e8df f003 	tbb	[pc, r3]
   11524:	261c1202 	.word	0x261c1202
   11528:	4a17      	ldr	r2, [pc, #92]	; (11588 <date_time_handler+0x70>)
   1152a:	4b18      	ldr	r3, [pc, #96]	; (1158c <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from modem.\n");
   1152c:	4918      	ldr	r1, [pc, #96]	; (11590 <date_time_handler+0x78>)
   1152e:	1ad2      	subs	r2, r2, r3
   11530:	08d2      	lsrs	r2, r2, #3
   11532:	0192      	lsls	r2, r2, #6
   11534:	4817      	ldr	r0, [pc, #92]	; (11594 <date_time_handler+0x7c>)
   11536:	f042 0204 	orr.w	r2, r2, #4
		LOG_DBG("DATE_TIME: failed to get time.\n");
   1153a:	f01a ffbc 	bl	2c4b6 <log_1>
}
   1153e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   11542:	4815      	ldr	r0, [pc, #84]	; (11598 <date_time_handler+0x80>)
   11544:	f012 bfa4 	b.w	24490 <z_impl_k_sem_give>
   11548:	4a0f      	ldr	r2, [pc, #60]	; (11588 <date_time_handler+0x70>)
   1154a:	4b10      	ldr	r3, [pc, #64]	; (1158c <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from NTP.\n");
   1154c:	4910      	ldr	r1, [pc, #64]	; (11590 <date_time_handler+0x78>)
   1154e:	1ad2      	subs	r2, r2, r3
   11550:	08d2      	lsrs	r2, r2, #3
   11552:	0192      	lsls	r2, r2, #6
   11554:	4811      	ldr	r0, [pc, #68]	; (1159c <date_time_handler+0x84>)
   11556:	f042 0204 	orr.w	r2, r2, #4
   1155a:	e7ee      	b.n	1153a <date_time_handler+0x22>
   1155c:	4a0a      	ldr	r2, [pc, #40]	; (11588 <date_time_handler+0x70>)
   1155e:	4b0b      	ldr	r3, [pc, #44]	; (1158c <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from external.\n");
   11560:	490b      	ldr	r1, [pc, #44]	; (11590 <date_time_handler+0x78>)
   11562:	1ad2      	subs	r2, r2, r3
   11564:	08d2      	lsrs	r2, r2, #3
   11566:	0192      	lsls	r2, r2, #6
   11568:	480d      	ldr	r0, [pc, #52]	; (115a0 <date_time_handler+0x88>)
   1156a:	f042 0204 	orr.w	r2, r2, #4
   1156e:	e7e4      	b.n	1153a <date_time_handler+0x22>
   11570:	4a05      	ldr	r2, [pc, #20]	; (11588 <date_time_handler+0x70>)
   11572:	4b06      	ldr	r3, [pc, #24]	; (1158c <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: failed to get time.\n");
   11574:	4906      	ldr	r1, [pc, #24]	; (11590 <date_time_handler+0x78>)
   11576:	1ad2      	subs	r2, r2, r3
   11578:	08d2      	lsrs	r2, r2, #3
   1157a:	0192      	lsls	r2, r2, #6
   1157c:	4809      	ldr	r0, [pc, #36]	; (115a4 <date_time_handler+0x8c>)
   1157e:	f042 0204 	orr.w	r2, r2, #4
   11582:	e7da      	b.n	1153a <date_time_handler+0x22>
}
   11584:	bd08      	pop	{r3, pc}
   11586:	bf00      	nop
   11588:	0002ec34 	.word	0x0002ec34
   1158c:	0002ebc4 	.word	0x0002ebc4
   11590:	0002fed0 	.word	0x0002fed0
   11594:	0002f7d3 	.word	0x0002f7d3
   11598:	20020c38 	.word	0x20020c38
   1159c:	0002f7f8 	.word	0x0002f7f8
   115a0:	0002f81b 	.word	0x0002f81b
   115a4:	0002f843 	.word	0x0002f843

000115a8 <mqtt_evt_handler>:
{
   115a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115ac:	b089      	sub	sp, #36	; 0x24
   115ae:	4b76      	ldr	r3, [pc, #472]	; (11788 <mqtt_evt_handler+0x1e0>)
   115b0:	4c76      	ldr	r4, [pc, #472]	; (1178c <mqtt_evt_handler+0x1e4>)
   115b2:	4606      	mov	r6, r0
   115b4:	1ae4      	subs	r4, r4, r3
   115b6:	780b      	ldrb	r3, [r1, #0]
   115b8:	08e4      	lsrs	r4, r4, #3
   115ba:	460d      	mov	r5, r1
   115bc:	af02      	add	r7, sp, #8
   115be:	01a4      	lsls	r4, r4, #6
   115c0:	2b07      	cmp	r3, #7
   115c2:	f200 80d3 	bhi.w	1176c <mqtt_evt_handler+0x1c4>
   115c6:	e8df f003 	tbb	[pc, r3]
   115ca:	1f04      	.short	0x1f04
   115cc:	d1d1a82e 	.word	0xd1d1a82e
   115d0:	bed1      	.short	0xbed1
		if (evt->result != 0) {
   115d2:	69c9      	ldr	r1, [r1, #28]
   115d4:	b129      	cbz	r1, 115e2 <mqtt_evt_handler+0x3a>
			LOG_ERR("MQTT connect failed %d", evt->result);
   115d6:	486e      	ldr	r0, [pc, #440]	; (11790 <mqtt_evt_handler+0x1e8>)
   115d8:	f044 0201 	orr.w	r2, r4, #1
				LOG_ERR("Could not app_disconnect: %d", err);
   115dc:	f01a ff6b 	bl	2c4b6 <log_1>
   115e0:	e00e      	b.n	11600 <mqtt_evt_handler+0x58>
   115e2:	486c      	ldr	r0, [pc, #432]	; (11794 <mqtt_evt_handler+0x1ec>)
   115e4:	f012 ff54 	bl	24490 <z_impl_k_sem_give>
		LOG_INF("[%s:%d] MQTT client connected!", log_strdup(__func__), __LINE__);
   115e8:	486b      	ldr	r0, [pc, #428]	; (11798 <mqtt_evt_handler+0x1f0>)
   115ea:	f001 fd4f 	bl	1308c <log_strdup>
   115ee:	f044 0403 	orr.w	r4, r4, #3
   115f2:	4601      	mov	r1, r0
   115f4:	4623      	mov	r3, r4
   115f6:	f240 1209 	movw	r2, #265	; 0x109
   115fa:	4868      	ldr	r0, [pc, #416]	; (1179c <mqtt_evt_handler+0x1f4>)
   115fc:	f01a ff72 	bl	2c4e4 <log_2>
}
   11600:	371c      	adds	r7, #28
   11602:	46bd      	mov	sp, r7
   11604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("[%s:%d] MQTT client disconnected %d", log_strdup(__func__),
   11608:	4863      	ldr	r0, [pc, #396]	; (11798 <mqtt_evt_handler+0x1f0>)
   1160a:	f001 fd3f 	bl	1308c <log_strdup>
   1160e:	f240 120f 	movw	r2, #271	; 0x10f
   11612:	f044 0403 	orr.w	r4, r4, #3
   11616:	f8ad 4000 	strh.w	r4, [sp]
   1161a:	4601      	mov	r1, r0
   1161c:	69eb      	ldr	r3, [r5, #28]
   1161e:	4860      	ldr	r0, [pc, #384]	; (117a0 <mqtt_evt_handler+0x1f8>)
		LOG_INF("[%s:%d] default: %d", log_strdup(__func__), __LINE__,
   11620:	f01a ff79 	bl	2c516 <log_3>
}
   11624:	e7ec      	b.n	11600 <mqtt_evt_handler+0x58>
		LOG_INF("[%s:%d] MQTT PUBLISH result=%d len=%d", log_strdup(__func__),
   11626:	485c      	ldr	r0, [pc, #368]	; (11798 <mqtt_evt_handler+0x1f0>)
   11628:	f001 fd30 	bl	1308c <log_strdup>
   1162c:	f240 1317 	movw	r3, #279	; 0x117
   11630:	60fb      	str	r3, [r7, #12]
   11632:	69eb      	ldr	r3, [r5, #28]
   11634:	f044 0803 	orr.w	r8, r4, #3
   11638:	613b      	str	r3, [r7, #16]
   1163a:	696b      	ldr	r3, [r5, #20]
   1163c:	2204      	movs	r2, #4
   1163e:	60b8      	str	r0, [r7, #8]
   11640:	617b      	str	r3, [r7, #20]
   11642:	4858      	ldr	r0, [pc, #352]	; (117a4 <mqtt_evt_handler+0x1fc>)
   11644:	4643      	mov	r3, r8
   11646:	f107 0108 	add.w	r1, r7, #8
   1164a:	f01a ff83 	bl	2c554 <log_n>
		err = publish_get_payload(c, p->message.payload.len);
   1164e:	696a      	ldr	r2, [r5, #20]
	uint8_t *end = buf + length;
   11650:	4b55      	ldr	r3, [pc, #340]	; (117a8 <mqtt_evt_handler+0x200>)
	if (length > sizeof(payload_buf)) {
   11652:	2a80      	cmp	r2, #128	; 0x80
	uint8_t *end = buf + length;
   11654:	eb03 0802 	add.w	r8, r3, r2
	if (length > sizeof(payload_buf)) {
   11658:	d85c      	bhi.n	11714 <mqtt_evt_handler+0x16c>
	uint8_t *buf = payload_buf;
   1165a:	469a      	mov	sl, r3
			LOG_ERR("mqtt_read_publish_payload: EAGAIN");
   1165c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 117dc <mqtt_evt_handler+0x234>
	return z_impl_zsock_poll(fds, nfds, timeout);
   11660:	f8df b17c 	ldr.w	fp, [pc, #380]	; 117e0 <mqtt_evt_handler+0x238>
	while (buf < end) {
   11664:	45d0      	cmp	r8, sl
   11666:	d820      	bhi.n	116aa <mqtt_evt_handler+0x102>
			data_print("Received: ", payload_buf,
   11668:	696e      	ldr	r6, [r5, #20]
{
   1166a:	46e8      	mov	r8, sp
	char buf[len + 1];
   1166c:	f106 0308 	add.w	r3, r6, #8
   11670:	f023 0307 	bic.w	r3, r3, #7
   11674:	ebad 0d03 	sub.w	sp, sp, r3
   11678:	ad02      	add	r5, sp, #8
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1167a:	4632      	mov	r2, r6
   1167c:	494a      	ldr	r1, [pc, #296]	; (117a8 <mqtt_evt_handler+0x200>)
   1167e:	4628      	mov	r0, r5
   11680:	f7fb fa64 	bl	cb4c <memcpy>
	buf[len] = 0;
   11684:	2300      	movs	r3, #0
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   11686:	4849      	ldr	r0, [pc, #292]	; (117ac <mqtt_evt_handler+0x204>)
	buf[len] = 0;
   11688:	55ab      	strb	r3, [r5, r6]
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   1168a:	f001 fcff 	bl	1308c <log_strdup>
   1168e:	6078      	str	r0, [r7, #4]
   11690:	4628      	mov	r0, r5
   11692:	f001 fcfb 	bl	1308c <log_strdup>
   11696:	f044 0403 	orr.w	r4, r4, #3
   1169a:	4602      	mov	r2, r0
   1169c:	4623      	mov	r3, r4
   1169e:	6879      	ldr	r1, [r7, #4]
   116a0:	4843      	ldr	r0, [pc, #268]	; (117b0 <mqtt_evt_handler+0x208>)
   116a2:	f01a ff1f 	bl	2c4e4 <log_2>
   116a6:	46c5      	mov	sp, r8
}
   116a8:	e7aa      	b.n	11600 <mqtt_evt_handler+0x58>
		int ret = mqtt_read_publish_payload(c, buf, end - buf);
   116aa:	4651      	mov	r1, sl
   116ac:	4630      	mov	r0, r6
   116ae:	eba8 020a 	sub.w	r2, r8, sl
   116b2:	f01b ffdf 	bl	2d674 <mqtt_read_publish_payload>
		if (ret < 0) {
   116b6:	1e01      	subs	r1, r0, #0
   116b8:	da29      	bge.n	1170e <mqtt_evt_handler+0x166>
			if (ret != -EAGAIN) {
   116ba:	f111 0f0b 	cmn.w	r1, #11
   116be:	d10d      	bne.n	116dc <mqtt_evt_handler+0x134>
			LOG_ERR("mqtt_read_publish_payload: EAGAIN");
   116c0:	4648      	mov	r0, r9
   116c2:	f044 0101 	orr.w	r1, r4, #1
   116c6:	f01a fee7 	bl	2c498 <log_0>
   116ca:	2101      	movs	r1, #1
   116cc:	465a      	mov	r2, fp
   116ce:	4839      	ldr	r0, [pc, #228]	; (117b4 <mqtt_evt_handler+0x20c>)
   116d0:	f002 fa5e 	bl	13b90 <z_impl_zsock_poll>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   116d4:	2800      	cmp	r0, #0
   116d6:	dc15      	bgt.n	11704 <mqtt_evt_handler+0x15c>
				return -EIO;
   116d8:	f06f 0104 	mvn.w	r1, #4
			LOG_ERR("mqtt_read_publish_payload: Failed! %d", err);
   116dc:	f044 0501 	orr.w	r5, r4, #1
   116e0:	462a      	mov	r2, r5
   116e2:	4835      	ldr	r0, [pc, #212]	; (117b8 <mqtt_evt_handler+0x210>)
   116e4:	f01a fee7 	bl	2c4b6 <log_1>
			LOG_INF("Disconnecting MQTT client...");
   116e8:	f044 0103 	orr.w	r1, r4, #3
   116ec:	4833      	ldr	r0, [pc, #204]	; (117bc <mqtt_evt_handler+0x214>)
   116ee:	f01a fed3 	bl	2c498 <log_0>
			err = mqtt_disconnect(c);
   116f2:	4630      	mov	r0, r6
   116f4:	f01b fef7 	bl	2d4e6 <mqtt_disconnect>
			if (err) {
   116f8:	4601      	mov	r1, r0
   116fa:	2800      	cmp	r0, #0
   116fc:	d080      	beq.n	11600 <mqtt_evt_handler+0x58>
				LOG_ERR("Could not app_disconnect: %d", err);
   116fe:	462a      	mov	r2, r5
   11700:	482f      	ldr	r0, [pc, #188]	; (117c0 <mqtt_evt_handler+0x218>)
   11702:	e76b      	b.n	115dc <mqtt_evt_handler+0x34>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   11704:	4b2b      	ldr	r3, [pc, #172]	; (117b4 <mqtt_evt_handler+0x20c>)
   11706:	88da      	ldrh	r2, [r3, #6]
   11708:	07d3      	lsls	r3, r2, #31
   1170a:	d4ab      	bmi.n	11664 <mqtt_evt_handler+0xbc>
   1170c:	e7e4      	b.n	116d8 <mqtt_evt_handler+0x130>
		if (ret == 0) {
   1170e:	d0e3      	beq.n	116d8 <mqtt_evt_handler+0x130>
		buf += ret;
   11710:	448a      	add	sl, r1
   11712:	e7a7      	b.n	11664 <mqtt_evt_handler+0xbc>
		return -EMSGSIZE;
   11714:	f06f 0179 	mvn.w	r1, #121	; 0x79
   11718:	e7e0      	b.n	116dc <mqtt_evt_handler+0x134>
		if (evt->result != 0) {
   1171a:	69c9      	ldr	r1, [r1, #28]
   1171c:	b119      	cbz	r1, 11726 <mqtt_evt_handler+0x17e>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   1171e:	4829      	ldr	r0, [pc, #164]	; (117c4 <mqtt_evt_handler+0x21c>)
   11720:	f044 0201 	orr.w	r2, r4, #1
   11724:	e75a      	b.n	115dc <mqtt_evt_handler+0x34>
   11726:	4828      	ldr	r0, [pc, #160]	; (117c8 <mqtt_evt_handler+0x220>)
   11728:	f012 feb2 	bl	24490 <z_impl_k_sem_give>
		LOG_INF("[%s:%d] PUBACK packet id: %u", log_strdup(__func__), __LINE__,
   1172c:	481a      	ldr	r0, [pc, #104]	; (11798 <mqtt_evt_handler+0x1f0>)
   1172e:	f001 fcad 	bl	1308c <log_strdup>
   11732:	f044 0403 	orr.w	r4, r4, #3
   11736:	4601      	mov	r1, r0
   11738:	88ab      	ldrh	r3, [r5, #4]
   1173a:	f240 122f 	movw	r2, #303	; 0x12f
   1173e:	4823      	ldr	r0, [pc, #140]	; (117cc <mqtt_evt_handler+0x224>)
   11740:	f8ad 4000 	strh.w	r4, [sp]
   11744:	e76c      	b.n	11620 <mqtt_evt_handler+0x78>
		if (evt->result != 0) {
   11746:	69c9      	ldr	r1, [r1, #28]
   11748:	b119      	cbz	r1, 11752 <mqtt_evt_handler+0x1aa>
			LOG_ERR("MQTT SUBACK error %d", evt->result);
   1174a:	4821      	ldr	r0, [pc, #132]	; (117d0 <mqtt_evt_handler+0x228>)
   1174c:	f044 0201 	orr.w	r2, r4, #1
   11750:	e744      	b.n	115dc <mqtt_evt_handler+0x34>
		LOG_INF("[%s:%d] SUBACK packet id: %u", log_strdup(__func__), __LINE__,
   11752:	4811      	ldr	r0, [pc, #68]	; (11798 <mqtt_evt_handler+0x1f0>)
   11754:	f001 fc9a 	bl	1308c <log_strdup>
   11758:	f044 0403 	orr.w	r4, r4, #3
   1175c:	4601      	mov	r1, r0
   1175e:	88ab      	ldrh	r3, [r5, #4]
   11760:	f240 1239 	movw	r2, #313	; 0x139
   11764:	481b      	ldr	r0, [pc, #108]	; (117d4 <mqtt_evt_handler+0x22c>)
   11766:	f8ad 4000 	strh.w	r4, [sp]
   1176a:	e759      	b.n	11620 <mqtt_evt_handler+0x78>
		LOG_INF("[%s:%d] default: %d", log_strdup(__func__), __LINE__,
   1176c:	480a      	ldr	r0, [pc, #40]	; (11798 <mqtt_evt_handler+0x1f0>)
   1176e:	f001 fc8d 	bl	1308c <log_strdup>
   11772:	f044 0403 	orr.w	r4, r4, #3
   11776:	4601      	mov	r1, r0
   11778:	782b      	ldrb	r3, [r5, #0]
   1177a:	f44f 729f 	mov.w	r2, #318	; 0x13e
   1177e:	4816      	ldr	r0, [pc, #88]	; (117d8 <mqtt_evt_handler+0x230>)
   11780:	f8ad 4000 	strh.w	r4, [sp]
   11784:	e74c      	b.n	11620 <mqtt_evt_handler+0x78>
   11786:	bf00      	nop
   11788:	0002ebc4 	.word	0x0002ebc4
   1178c:	0002ec34 	.word	0x0002ec34
   11790:	0002f867 	.word	0x0002f867
   11794:	20020c80 	.word	0x20020c80
   11798:	0002fe80 	.word	0x0002fe80
   1179c:	0002f87e 	.word	0x0002f87e
   117a0:	0002f89d 	.word	0x0002f89d
   117a4:	0002f8c1 	.word	0x0002f8c1
   117a8:	200242c3 	.word	0x200242c3
   117ac:	0002f9e1 	.word	0x0002f9e1
   117b0:	0002f9ec 	.word	0x0002f9ec
   117b4:	200214bc 	.word	0x200214bc
   117b8:	0002f909 	.word	0x0002f909
   117bc:	0002f92f 	.word	0x0002f92f
   117c0:	0002f94c 	.word	0x0002f94c
   117c4:	0002f969 	.word	0x0002f969
   117c8:	20020c98 	.word	0x20020c98
   117cc:	0002f97e 	.word	0x0002f97e
   117d0:	0002f99b 	.word	0x0002f99b
   117d4:	0002f9b0 	.word	0x0002f9b0
   117d8:	0002f9cd 	.word	0x0002f9cd
   117dc:	0002f8e7 	.word	0x0002f8e7
   117e0:	006ddd00 	.word	0x006ddd00

000117e4 <bsd_recoverable_error_handler>:
   117e4:	4a05      	ldr	r2, [pc, #20]	; (117fc <bsd_recoverable_error_handler+0x18>)
   117e6:	4b06      	ldr	r3, [pc, #24]	; (11800 <bsd_recoverable_error_handler+0x1c>)
{
   117e8:	4601      	mov	r1, r0
   117ea:	1ad2      	subs	r2, r2, r3
   117ec:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("bsdlib recoverable error: %u", (unsigned int)err);
   117ee:	0192      	lsls	r2, r2, #6
   117f0:	4804      	ldr	r0, [pc, #16]	; (11804 <bsd_recoverable_error_handler+0x20>)
   117f2:	f042 0201 	orr.w	r2, r2, #1
   117f6:	f01a be5e 	b.w	2c4b6 <log_1>
   117fa:	bf00      	nop
   117fc:	0002ec34 	.word	0x0002ec34
   11800:	0002ebc4 	.word	0x0002ebc4
   11804:	0002f9f1 	.word	0x0002f9f1

00011808 <modem_trace_enable>:
    port->PIN_CNF[CS_PIN_CFG_TRACE_CLK] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   11808:	f240 3202 	movw	r2, #770	; 0x302
   1180c:	4b07      	ldr	r3, [pc, #28]	; (1182c <modem_trace_enable+0x24>)
   1180e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
    port->PIN_CNF[CS_PIN_CFG_TRACE_DATA0] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   11812:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
    port->PIN_CNF[CS_PIN_CFG_TRACE_DATA1] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   11816:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
    port->PIN_CNF[CS_PIN_CFG_TRACE_DATA2] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   1181a:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
    port->PIN_CNF[CS_PIN_CFG_TRACE_DATA3] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   1181e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    port->DIR = 0xFFFFFFFF;
   11822:	f04f 32ff 	mov.w	r2, #4294967295
   11826:	615a      	str	r2, [r3, #20]
}
   11828:	4770      	bx	lr
   1182a:	bf00      	nop
   1182c:	40842500 	.word	0x40842500

00011830 <timer_init>:
{
   11830:	b507      	push	{r0, r1, r2, lr}
   11832:	2300      	movs	r3, #0
	compiler_barrier();
   11834:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	z_impl_k_timer_start(timer, duration, period);
   11838:	4803      	ldr	r0, [pc, #12]	; (11848 <timer_init+0x18>)
   1183a:	e9cd 2300 	strd	r2, r3, [sp]
   1183e:	f013 fc65 	bl	2510c <z_impl_k_timer_start>
}
   11842:	b003      	add	sp, #12
   11844:	f85d fb04 	ldr.w	pc, [sp], #4
   11848:	20020b18 	.word	0x20020b18

0001184c <app_connect>:
int app_connect(void) {
   1184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11850:	4b36      	ldr	r3, [pc, #216]	; (1192c <app_connect+0xe0>)
   11852:	4c37      	ldr	r4, [pc, #220]	; (11930 <app_connect+0xe4>)
	LOG_INF("Connecting");
   11854:	4837      	ldr	r0, [pc, #220]	; (11934 <app_connect+0xe8>)
   11856:	1ae4      	subs	r4, r4, r3
   11858:	08e4      	lsrs	r4, r4, #3
   1185a:	01a4      	lsls	r4, r4, #6
   1185c:	f044 0103 	orr.w	r1, r4, #3
   11860:	f01a fe1a 	bl	2c498 <log_0>
		LOG_WRN("Failed to establish LTE connection.");
   11864:	4e34      	ldr	r6, [pc, #208]	; (11938 <app_connect+0xec>)
		LOG_WRN("Will retry in %d seconds.",
   11866:	4f35      	ldr	r7, [pc, #212]	; (1193c <app_connect+0xf0>)
		LOG_WRN("Failed to establish LTE connection.");
   11868:	f044 0502 	orr.w	r5, r4, #2
	while(lte_lc_connect() != 0) {
   1186c:	f01c fe0c 	bl	2e488 <lte_lc_connect>
   11870:	b9a0      	cbnz	r0, 1189c <app_connect+0x50>
	err = mqtt_connect(&client);
   11872:	4e33      	ldr	r6, [pc, #204]	; (11940 <app_connect+0xf4>)
	LOG_INF("LTE: Link connected");
   11874:	f044 0703 	orr.w	r7, r4, #3
   11878:	4639      	mov	r1, r7
   1187a:	4832      	ldr	r0, [pc, #200]	; (11944 <app_connect+0xf8>)
   1187c:	f01a fe0c 	bl	2c498 <log_0>
	err = mqtt_connect(&client);
   11880:	4630      	mov	r0, r6
   11882:	f01b fda8 	bl	2d3d6 <mqtt_connect>
	if (err != 0) {
   11886:	4605      	mov	r5, r0
   11888:	b1b8      	cbz	r0, 118ba <app_connect+0x6e>
		LOG_ERR("mqtt_connect %d", err);
   1188a:	4601      	mov	r1, r0
   1188c:	f044 0201 	orr.w	r2, r4, #1
   11890:	482d      	ldr	r0, [pc, #180]	; (11948 <app_connect+0xfc>)
   11892:	f01a fe10 	bl	2c4b6 <log_1>
}
   11896:	4628      	mov	r0, r5
   11898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Failed to establish LTE connection.");
   1189c:	4629      	mov	r1, r5
   1189e:	4630      	mov	r0, r6
   118a0:	f01a fdfa 	bl	2c498 <log_0>
		LOG_WRN("Will retry in %d seconds.",
   118a4:	462a      	mov	r2, r5
   118a6:	210a      	movs	r1, #10
   118a8:	4638      	mov	r0, r7
   118aa:	f01a fe04 	bl	2c4b6 <log_1>
	return z_impl_k_sleep(timeout);
   118ae:	2100      	movs	r1, #0
   118b0:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   118b4:	f012 fdb0 	bl	24418 <z_impl_k_sleep>
   118b8:	e7d8      	b.n	1186c <app_connect+0x20>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   118ba:	f896 8024 	ldrb.w	r8, [r6, #36]	; 0x24
   118be:	f1b8 0f00 	cmp.w	r8, #0
   118c2:	d009      	beq.n	118d8 <app_connect+0x8c>
		LOG_ERR("fds_init %d", err);
   118c4:	f06f 0185 	mvn.w	r1, #133	; 0x85
   118c8:	4820      	ldr	r0, [pc, #128]	; (1194c <app_connect+0x100>)
   118ca:	f044 0201 	orr.w	r2, r4, #1
   118ce:	f01a fdf2 	bl	2c4b6 <log_1>
		return -ENOTSUP;
   118d2:	f06f 0585 	mvn.w	r5, #133	; 0x85
		return err;
   118d6:	e7de      	b.n	11896 <app_connect+0x4a>
		fds.fd = c->transport.tcp.sock;
   118d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   118da:	4a1d      	ldr	r2, [pc, #116]	; (11950 <app_connect+0x104>)
	app_connected = true;
   118dc:	4e1d      	ldr	r6, [pc, #116]	; (11954 <app_connect+0x108>)
		fds.fd = c->transport.tcp.sock;
   118de:	6013      	str	r3, [r2, #0]
	fds.events = POLLIN;
   118e0:	2301      	movs	r3, #1
   118e2:	8093      	strh	r3, [r2, #4]
	app_connected = true;
   118e4:	7033      	strb	r3, [r6, #0]
	return z_impl_k_sem_take(sem, timeout);
   118e6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   118ea:	2300      	movs	r3, #0
   118ec:	481a      	ldr	r0, [pc, #104]	; (11958 <app_connect+0x10c>)
   118ee:	f012 fe13 	bl	24518 <z_impl_k_sem_take>
	if(err) {
   118f2:	4605      	mov	r5, r0
   118f4:	b148      	cbz	r0, 1190a <app_connect+0xbe>
		LOG_ERR("MQTT connection timed out\n");
   118f6:	4819      	ldr	r0, [pc, #100]	; (1195c <app_connect+0x110>)
   118f8:	f044 0101 	orr.w	r1, r4, #1
   118fc:	f01a fdcc 	bl	2c498 <log_0>
		return -ENOTCONN;
   11900:	f06f 057f 	mvn.w	r5, #127	; 0x7f
		app_connected = false;
   11904:	f886 8000 	strb.w	r8, [r6]
		return -ENOTCONN;
   11908:	e7c5      	b.n	11896 <app_connect+0x4a>
	return z_impl_k_mutex_lock(mutex, timeout);
   1190a:	f04f 32ff 	mov.w	r2, #4294967295
   1190e:	f04f 33ff 	mov.w	r3, #4294967295
   11912:	4813      	ldr	r0, [pc, #76]	; (11960 <app_connect+0x114>)
   11914:	f011 f942 	bl	22b9c <z_impl_k_mutex_lock>
	LOG_INF("RSRP: %d", current_rsrp);
   11918:	4b12      	ldr	r3, [pc, #72]	; (11964 <app_connect+0x118>)
   1191a:	463a      	mov	r2, r7
   1191c:	6819      	ldr	r1, [r3, #0]
   1191e:	4812      	ldr	r0, [pc, #72]	; (11968 <app_connect+0x11c>)
   11920:	f01a fdc9 	bl	2c4b6 <log_1>
	return z_impl_k_mutex_unlock(mutex);
   11924:	480e      	ldr	r0, [pc, #56]	; (11960 <app_connect+0x114>)
   11926:	f011 fa33 	bl	22d90 <z_impl_k_mutex_unlock>
   1192a:	e7b4      	b.n	11896 <app_connect+0x4a>
   1192c:	0002ebc4 	.word	0x0002ebc4
   11930:	0002ec34 	.word	0x0002ec34
   11934:	0002fa0e 	.word	0x0002fa0e
   11938:	0002fa19 	.word	0x0002fa19
   1193c:	0002fa3d 	.word	0x0002fa3d
   11940:	20021454 	.word	0x20021454
   11944:	0002fa57 	.word	0x0002fa57
   11948:	0002fa6b 	.word	0x0002fa6b
   1194c:	0002fa7b 	.word	0x0002fa7b
   11950:	200214bc 	.word	0x200214bc
   11954:	200242c2 	.word	0x200242c2
   11958:	20020c80 	.word	0x20020c80
   1195c:	0002fa87 	.word	0x0002fa87
   11960:	20020bb8 	.word	0x20020bb8
   11964:	200214b8 	.word	0x200214b8
   11968:	0002faa2 	.word	0x0002faa2

0001196c <app_disconnect>:
void app_disconnect(void) {
   1196c:	b538      	push	{r3, r4, r5, lr}
   1196e:	4b1e      	ldr	r3, [pc, #120]	; (119e8 <app_disconnect+0x7c>)
   11970:	4c1e      	ldr	r4, [pc, #120]	; (119ec <app_disconnect+0x80>)
	LOG_INF("Disconnecting");
   11972:	481f      	ldr	r0, [pc, #124]	; (119f0 <app_disconnect+0x84>)
   11974:	1ae4      	subs	r4, r4, r3
   11976:	08e4      	lsrs	r4, r4, #3
   11978:	01a4      	lsls	r4, r4, #6
   1197a:	f044 0503 	orr.w	r5, r4, #3
   1197e:	4629      	mov	r1, r5
   11980:	f01a fd8a 	bl	2c498 <log_0>
	if(!app_connected) {
   11984:	4b1b      	ldr	r3, [pc, #108]	; (119f4 <app_disconnect+0x88>)
   11986:	781a      	ldrb	r2, [r3, #0]
   11988:	b9fa      	cbnz	r2, 119ca <app_disconnect+0x5e>
		LOG_INF("Aborting mqtt connection");
   1198a:	481b      	ldr	r0, [pc, #108]	; (119f8 <app_disconnect+0x8c>)
   1198c:	4629      	mov	r1, r5
   1198e:	f01a fd83 	bl	2c498 <log_0>
		mqtt_abort(&client);
   11992:	481a      	ldr	r0, [pc, #104]	; (119fc <app_disconnect+0x90>)
   11994:	f01b fdfb 	bl	2d58e <mqtt_abort>
	LOG_INF("MQTT: disconnected");
   11998:	4819      	ldr	r0, [pc, #100]	; (11a00 <app_disconnect+0x94>)
   1199a:	f044 0103 	orr.w	r1, r4, #3
   1199e:	f01a fd7b 	bl	2c498 <log_0>
	return z_impl_k_sleep(timeout);
   119a2:	2100      	movs	r1, #0
   119a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   119a8:	f012 fd36 	bl	24418 <z_impl_k_sleep>
	err = lte_lc_offline();
   119ac:	f007 fa0a 	bl	18dc4 <lte_lc_offline>
	if(err) {
   119b0:	b120      	cbz	r0, 119bc <app_disconnect+0x50>
		LOG_ERR("LTE: Offline mode failed\n");
   119b2:	4814      	ldr	r0, [pc, #80]	; (11a04 <app_disconnect+0x98>)
   119b4:	f044 0101 	orr.w	r1, r4, #1
   119b8:	f01a fd6e 	bl	2c498 <log_0>
	LOG_INF("LTE: offline");
   119bc:	f044 0103 	orr.w	r1, r4, #3
   119c0:	4811      	ldr	r0, [pc, #68]	; (11a08 <app_disconnect+0x9c>)
}
   119c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("LTE: offline");
   119c6:	f01a bd67 	b.w	2c498 <log_0>
		app_connected = 0;
   119ca:	2200      	movs	r2, #0
		err = mqtt_disconnect(&client);
   119cc:	480b      	ldr	r0, [pc, #44]	; (119fc <app_disconnect+0x90>)
		app_connected = 0;
   119ce:	701a      	strb	r2, [r3, #0]
		err = mqtt_disconnect(&client);
   119d0:	f01b fd89 	bl	2d4e6 <mqtt_disconnect>
		if (err != 0) {
   119d4:	4601      	mov	r1, r0
   119d6:	2800      	cmp	r0, #0
   119d8:	d0de      	beq.n	11998 <app_disconnect+0x2c>
			LOG_ERR("mqtt_disconnect %d", err);
   119da:	f044 0201 	orr.w	r2, r4, #1
   119de:	480b      	ldr	r0, [pc, #44]	; (11a0c <app_disconnect+0xa0>)
}
   119e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_ERR("mqtt_disconnect %d", err);
   119e4:	f01a bd67 	b.w	2c4b6 <log_1>
   119e8:	0002ebc4 	.word	0x0002ebc4
   119ec:	0002ec34 	.word	0x0002ec34
   119f0:	0002faab 	.word	0x0002faab
   119f4:	200242c2 	.word	0x200242c2
   119f8:	0002fab9 	.word	0x0002fab9
   119fc:	20021454 	.word	0x20021454
   11a00:	0002fae5 	.word	0x0002fae5
   11a04:	0002faf8 	.word	0x0002faf8
   11a08:	0002fb12 	.word	0x0002fb12
   11a0c:	0002fad2 	.word	0x0002fad2

00011a10 <init_work>:
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   11a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
void init_work(void) {
   11a14:	b508      	push	{r3, lr}
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   11a16:	4908      	ldr	r1, [pc, #32]	; (11a38 <init_work+0x28>)
   11a18:	2305      	movs	r3, #5
   11a1a:	4808      	ldr	r0, [pc, #32]	; (11a3c <init_work+0x2c>)
   11a1c:	f012 ff7e 	bl	2491c <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11a20:	2300      	movs	r3, #0
   11a22:	4a07      	ldr	r2, [pc, #28]	; (11a40 <init_work+0x30>)
   11a24:	4907      	ldr	r1, [pc, #28]	; (11a44 <init_work+0x34>)
   11a26:	6013      	str	r3, [r2, #0]
   11a28:	e9c2 1301 	strd	r1, r3, [r2, #4]
   11a2c:	4a06      	ldr	r2, [pc, #24]	; (11a48 <init_work+0x38>)
   11a2e:	4907      	ldr	r1, [pc, #28]	; (11a4c <init_work+0x3c>)
   11a30:	6013      	str	r3, [r2, #0]
   11a32:	e9c2 1301 	strd	r1, r3, [r2, #4]
}
   11a36:	bd08      	pop	{r3, pc}
   11a38:	20026428 	.word	0x20026428
   11a3c:	20020ce8 	.word	0x20020ce8
   11a40:	20021448 	.word	0x20021448
   11a44:	00011c41 	.word	0x00011c41
   11a48:	200214c8 	.word	0x200214c8
   11a4c:	00011b7d 	.word	0x00011b7d

00011a50 <create_message>:
void create_message(struct app_message* destination, enum app_msg_type type, uint8_t *data, size_t len, int64_t *timestamp) {
   11a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11a54:	b087      	sub	sp, #28
   11a56:	af02      	add	r7, sp, #8
   11a58:	4605      	mov	r5, r0
   11a5a:	4689      	mov	r9, r1
   11a5c:	4616      	mov	r6, r2
   11a5e:	4698      	mov	r8, r3
	message = cJSON_CreateObject();
   11a60:	f004 ff50 	bl	16904 <cJSON_CreateObject>
   11a64:	4604      	mov	r4, r0
	if(type == SENSOR_ALARM) {
   11a66:	f1b9 0f00 	cmp.w	r9, #0
   11a6a:	d138      	bne.n	11ade <create_message+0x8e>
		cJSON_AddStringToObject(message, "type", "alarm");
   11a6c:	4a1d      	ldr	r2, [pc, #116]	; (11ae4 <create_message+0x94>)
		cJSON_AddStringToObject(message, "type", "periodic sample");
   11a6e:	491e      	ldr	r1, [pc, #120]	; (11ae8 <create_message+0x98>)
   11a70:	f01c f83a 	bl	2dae8 <cJSON_AddStringToObject>
	snprintf(time_str, 16, "%lld", *timestamp);
   11a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11a76:	2110      	movs	r1, #16
   11a78:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a7c:	4638      	mov	r0, r7
   11a7e:	e9cd 2300 	strd	r2, r3, [sp]
   11a82:	4a1a      	ldr	r2, [pc, #104]	; (11aec <create_message+0x9c>)
   11a84:	f014 fd0e 	bl	264a4 <snprintf>
	char data_str[len];
   11a88:	f108 0307 	add.w	r3, r8, #7
   11a8c:	f023 0307 	bic.w	r3, r3, #7
   11a90:	ebad 0d03 	sub.w	sp, sp, r3
	snprintf(data_str, len, "%s", data);
   11a94:	4641      	mov	r1, r8
   11a96:	4633      	mov	r3, r6
   11a98:	4a15      	ldr	r2, [pc, #84]	; (11af0 <create_message+0xa0>)
   11a9a:	a802      	add	r0, sp, #8
   11a9c:	f014 fd02 	bl	264a4 <snprintf>
	cJSON_AddStringToObject(message, "timestamp", time_str);
   11aa0:	463a      	mov	r2, r7
   11aa2:	4620      	mov	r0, r4
   11aa4:	4913      	ldr	r1, [pc, #76]	; (11af4 <create_message+0xa4>)
   11aa6:	f01c f81f 	bl	2dae8 <cJSON_AddStringToObject>
	cJSON_AddStringToObject(message, "data", data);
   11aaa:	4632      	mov	r2, r6
   11aac:	4912      	ldr	r1, [pc, #72]	; (11af8 <create_message+0xa8>)
   11aae:	4620      	mov	r0, r4
   11ab0:	f01c f81a 	bl	2dae8 <cJSON_AddStringToObject>
	destination->len = strlen(cJSON_Print(message));
   11ab4:	4620      	mov	r0, r4
   11ab6:	f01c f814 	bl	2dae2 <cJSON_Print>
   11aba:	f014 fe93 	bl	267e4 <strlen>
   11abe:	f8c5 01f4 	str.w	r0, [r5, #500]	; 0x1f4
	strcpy(destination->data, cJSON_Print(message));
   11ac2:	4620      	mov	r0, r4
   11ac4:	f01c f80d 	bl	2dae2 <cJSON_Print>
   11ac8:	4601      	mov	r1, r0
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   11aca:	4628      	mov	r0, r5
   11acc:	f014 fe2c 	bl	26728 <strcpy>
	cJSON_Delete(message);
   11ad0:	4620      	mov	r0, r4
   11ad2:	f004 fedb 	bl	1688c <cJSON_Delete>
}
   11ad6:	3714      	adds	r7, #20
   11ad8:	46bd      	mov	sp, r7
   11ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_AddStringToObject(message, "type", "periodic sample");
   11ade:	4a07      	ldr	r2, [pc, #28]	; (11afc <create_message+0xac>)
   11ae0:	e7c5      	b.n	11a6e <create_message+0x1e>
   11ae2:	bf00      	nop
   11ae4:	0002fb96 	.word	0x0002fb96
   11ae8:	0002fb1f 	.word	0x0002fb1f
   11aec:	0002fb34 	.word	0x0002fb34
   11af0:	00031c71 	.word	0x00031c71
   11af4:	0002fb39 	.word	0x0002fb39
   11af8:	0002fb43 	.word	0x0002fb43
   11afc:	0002fb24 	.word	0x0002fb24

00011b00 <publish_samples.part.0>:
void publish_samples(struct k_work *item) {
   11b00:	b510      	push	{r4, lr}
   11b02:	4b18      	ldr	r3, [pc, #96]	; (11b64 <publish_samples.part.0+0x64>)
   11b04:	4a18      	ldr	r2, [pc, #96]	; (11b68 <publish_samples.part.0+0x68>)
   11b06:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   11b0a:	1ad2      	subs	r2, r2, r3
   11b0c:	08d2      	lsrs	r2, r2, #3
	LOG_DBG("Publish Samples");
   11b0e:	0192      	lsls	r2, r2, #6
   11b10:	f042 0204 	orr.w	r2, r2, #4
   11b14:	4915      	ldr	r1, [pc, #84]	; (11b6c <publish_samples.part.0+0x6c>)
   11b16:	4816      	ldr	r0, [pc, #88]	; (11b70 <publish_samples.part.0+0x70>)
   11b18:	f01a fccd 	bl	2c4b6 <log_1>
	date_time_now(&curr_time);
   11b1c:	ac02      	add	r4, sp, #8
	dk_set_led(DK_LED2, 0);
   11b1e:	2100      	movs	r1, #0
   11b20:	2001      	movs	r0, #1
   11b22:	f006 f875 	bl	17c10 <dk_set_led>
	date_time_now(&curr_time);
   11b26:	4620      	mov	r0, r4
   11b28:	f007 fdbe 	bl	196a8 <date_time_now>
	create_message(&message, SENSOR_SAMPLE, testData, sizeof(testData), &curr_time);
   11b2c:	4a11      	ldr	r2, [pc, #68]	; (11b74 <publish_samples.part.0+0x74>)
   11b2e:	9400      	str	r4, [sp, #0]
   11b30:	2304      	movs	r3, #4
   11b32:	6812      	ldr	r2, [r2, #0]
   11b34:	a804      	add	r0, sp, #16
   11b36:	2101      	movs	r1, #1
   11b38:	f7ff ff8a 	bl	11a50 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message.data, message.len);
   11b3c:	9981      	ldr	r1, [sp, #516]	; 0x204
   11b3e:	a804      	add	r0, sp, #16
   11b40:	f7ff fc1e 	bl	11380 <data_publish.constprop.0>
	return z_impl_k_sem_take(sem, timeout);
   11b44:	f04f 32ff 	mov.w	r2, #4294967295
   11b48:	f04f 33ff 	mov.w	r3, #4294967295
   11b4c:	480a      	ldr	r0, [pc, #40]	; (11b78 <publish_samples.part.0+0x78>)
   11b4e:	f012 fce3 	bl	24518 <z_impl_k_sem_take>
	dk_set_led(DK_LED2, 1);
   11b52:	2101      	movs	r1, #1
   11b54:	4608      	mov	r0, r1
   11b56:	f006 f85b 	bl	17c10 <dk_set_led>
	app_disconnect();
   11b5a:	f7ff ff07 	bl	1196c <app_disconnect>
}
   11b5e:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   11b62:	bd10      	pop	{r4, pc}
   11b64:	0002ebc4 	.word	0x0002ebc4
   11b68:	0002ec34 	.word	0x0002ec34
   11b6c:	0002feb2 	.word	0x0002feb2
   11b70:	0002fb48 	.word	0x0002fb48
   11b74:	20020428 	.word	0x20020428
   11b78:	20020c98 	.word	0x20020c98

00011b7c <publish_samples>:
void publish_samples(struct k_work *item) {
   11b7c:	b508      	push	{r3, lr}
	err = app_connect();
   11b7e:	f7ff fe65 	bl	1184c <app_connect>
	if(err) {
   11b82:	4601      	mov	r1, r0
   11b84:	b168      	cbz	r0, 11ba2 <publish_samples+0x26>
   11b86:	4b09      	ldr	r3, [pc, #36]	; (11bac <publish_samples+0x30>)
   11b88:	4a09      	ldr	r2, [pc, #36]	; (11bb0 <publish_samples+0x34>)
		LOG_ERR("PUBLISH_SAMPLES: connect failed with error %d", err);
   11b8a:	480a      	ldr	r0, [pc, #40]	; (11bb4 <publish_samples+0x38>)
   11b8c:	1ad2      	subs	r2, r2, r3
   11b8e:	08d2      	lsrs	r2, r2, #3
   11b90:	0192      	lsls	r2, r2, #6
   11b92:	f042 0201 	orr.w	r2, r2, #1
   11b96:	f01a fc8e 	bl	2c4b6 <log_1>
}
   11b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_disconnect();
   11b9e:	f7ff bee5 	b.w	1196c <app_disconnect>
}
   11ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11ba6:	f7ff bfab 	b.w	11b00 <publish_samples.part.0>
   11baa:	bf00      	nop
   11bac:	0002ebc4 	.word	0x0002ebc4
   11bb0:	0002ec34 	.word	0x0002ec34
   11bb4:	0002fb5c 	.word	0x0002fb5c

00011bb8 <publish_alarm.part.0>:
void publish_alarm(struct k_work *item) {	
   11bb8:	b530      	push	{r4, r5, lr}
   11bba:	4b1a      	ldr	r3, [pc, #104]	; (11c24 <publish_alarm.part.0+0x6c>)
   11bbc:	4c1a      	ldr	r4, [pc, #104]	; (11c28 <publish_alarm.part.0+0x70>)
   11bbe:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
   11bc2:	1ae4      	subs	r4, r4, r3
   11bc4:	08e4      	lsrs	r4, r4, #3
	LOG_DBG("Publish alarm");
   11bc6:	01a4      	lsls	r4, r4, #6
   11bc8:	f044 0204 	orr.w	r2, r4, #4
   11bcc:	4917      	ldr	r1, [pc, #92]	; (11c2c <publish_alarm.part.0+0x74>)
   11bce:	4818      	ldr	r0, [pc, #96]	; (11c30 <publish_alarm.part.0+0x78>)
   11bd0:	f01a fc71 	bl	2c4b6 <log_1>
	date_time_now(&curr_time);
   11bd4:	ad02      	add	r5, sp, #8
	dk_set_led(DK_LED2, 0);
   11bd6:	2100      	movs	r1, #0
   11bd8:	2001      	movs	r0, #1
   11bda:	f006 f819 	bl	17c10 <dk_set_led>
	date_time_now(&curr_time);
   11bde:	4628      	mov	r0, r5
   11be0:	f007 fd62 	bl	196a8 <date_time_now>
	create_message(&message, SENSOR_ALARM, curr_sample, 1, &curr_time);
   11be4:	2301      	movs	r3, #1
   11be6:	4a13      	ldr	r2, [pc, #76]	; (11c34 <publish_alarm.part.0+0x7c>)
   11be8:	a804      	add	r0, sp, #16
   11bea:	2100      	movs	r1, #0
   11bec:	9500      	str	r5, [sp, #0]
   11bee:	f7ff ff2f 	bl	11a50 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message.data, message.len);
   11bf2:	9981      	ldr	r1, [sp, #516]	; 0x204
   11bf4:	a804      	add	r0, sp, #16
   11bf6:	f7ff fbc3 	bl	11380 <data_publish.constprop.0>
   11bfa:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   11bfe:	2300      	movs	r3, #0
   11c00:	480d      	ldr	r0, [pc, #52]	; (11c38 <publish_alarm.part.0+0x80>)
   11c02:	f012 fc89 	bl	24518 <z_impl_k_sem_take>
	if(err) {
   11c06:	b120      	cbz	r0, 11c12 <publish_alarm.part.0+0x5a>
		LOG_ERR("MQTT publish acknowledgement timed out\n");
   11c08:	480c      	ldr	r0, [pc, #48]	; (11c3c <publish_alarm.part.0+0x84>)
   11c0a:	f044 0101 	orr.w	r1, r4, #1
   11c0e:	f01a fc43 	bl	2c498 <log_0>
	dk_set_led(DK_LED2, 1);
   11c12:	2101      	movs	r1, #1
   11c14:	4608      	mov	r0, r1
   11c16:	f005 fffb 	bl	17c10 <dk_set_led>
	app_disconnect();
   11c1a:	f7ff fea7 	bl	1196c <app_disconnect>
}
   11c1e:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
   11c22:	bd30      	pop	{r4, r5, pc}
   11c24:	0002ebc4 	.word	0x0002ebc4
   11c28:	0002ec34 	.word	0x0002ec34
   11c2c:	0002fec2 	.word	0x0002fec2
   11c30:	0002fb8a 	.word	0x0002fb8a
   11c34:	00030b41 	.word	0x00030b41
   11c38:	20020c98 	.word	0x20020c98
   11c3c:	0002fb9c 	.word	0x0002fb9c

00011c40 <publish_alarm>:
void publish_alarm(struct k_work *item) {	
   11c40:	b508      	push	{r3, lr}
	err = app_connect();
   11c42:	f7ff fe03 	bl	1184c <app_connect>
	if(err) {
   11c46:	4601      	mov	r1, r0
   11c48:	b168      	cbz	r0, 11c66 <publish_alarm+0x26>
   11c4a:	4b09      	ldr	r3, [pc, #36]	; (11c70 <publish_alarm+0x30>)
   11c4c:	4a09      	ldr	r2, [pc, #36]	; (11c74 <publish_alarm+0x34>)
		LOG_ERR("PUBLISH_ALARM: connect failed with error %d", err);
   11c4e:	480a      	ldr	r0, [pc, #40]	; (11c78 <publish_alarm+0x38>)
   11c50:	1ad2      	subs	r2, r2, r3
   11c52:	08d2      	lsrs	r2, r2, #3
   11c54:	0192      	lsls	r2, r2, #6
   11c56:	f042 0201 	orr.w	r2, r2, #1
   11c5a:	f01a fc2c 	bl	2c4b6 <log_1>
}
   11c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_disconnect();
   11c62:	f7ff be83 	b.w	1196c <app_disconnect>
}
   11c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11c6a:	f7ff bfa5 	b.w	11bb8 <publish_alarm.part.0>
   11c6e:	bf00      	nop
   11c70:	0002ebc4 	.word	0x0002ebc4
   11c74:	0002ec34 	.word	0x0002ec34
   11c78:	0002fbc4 	.word	0x0002fbc4

00011c7c <main>:

/**** Application code - End ****/

void main(void)
{
   11c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c80:	4b9a      	ldr	r3, [pc, #616]	; (11eec <main+0x270>)
   11c82:	4c9b      	ldr	r4, [pc, #620]	; (11ef0 <main+0x274>)
	int err;

    LOG_INF("MQTT sensor application example started");
   11c84:	489b      	ldr	r0, [pc, #620]	; (11ef4 <main+0x278>)
   11c86:	1ae4      	subs	r4, r4, r3
   11c88:	08e4      	lsrs	r4, r4, #3
   11c8a:	01a4      	lsls	r4, r4, #6
{
   11c8c:	b09c      	sub	sp, #112	; 0x70
    LOG_INF("MQTT sensor application example started");
   11c8e:	f044 0103 	orr.w	r1, r4, #3
   11c92:	f01a fc01 	bl	2c498 <log_0>

	modem_trace_enable();
   11c96:	f7ff fdb7 	bl	11808 <modem_trace_enable>
		LOG_INF("LTE Link Connecting ...");
   11c9a:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 11f78 <main+0x2fc>
			LOG_ERR("LTE link could not be established.");
   11c9e:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 11f7c <main+0x300>

	while(modem_configure() != 0) {
		LOG_WRN("Failed to establish LTE connection.");
   11ca2:	4e95      	ldr	r6, [pc, #596]	; (11ef8 <main+0x27c>)
		LOG_INF("LTE Link Connecting ...");
   11ca4:	f044 0903 	orr.w	r9, r4, #3
   11ca8:	4649      	mov	r1, r9
   11caa:	4650      	mov	r0, sl
   11cac:	f01a fbf4 	bl	2c498 <log_0>
		err = lte_lc_init_and_connect();
   11cb0:	f01c fbed 	bl	2e48e <lte_lc_init_and_connect>
		LOG_INF("LTE Link Connecting ...");
   11cb4:	4627      	mov	r7, r4
		if(err) {
   11cb6:	4605      	mov	r5, r0
   11cb8:	b1a8      	cbz	r0, 11ce6 <main+0x6a>
			LOG_ERR("LTE link could not be established.");
   11cba:	4640      	mov	r0, r8
   11cbc:	f044 0101 	orr.w	r1, r4, #1
		LOG_WRN("Failed to establish LTE connection.");
   11cc0:	f044 0502 	orr.w	r5, r4, #2
			LOG_ERR("LTE link could not be established.");
   11cc4:	f01a fbe8 	bl	2c498 <log_0>
		LOG_WRN("Failed to establish LTE connection.");
   11cc8:	4629      	mov	r1, r5
   11cca:	4630      	mov	r0, r6
   11ccc:	f01a fbe4 	bl	2c498 <log_0>
		LOG_WRN("Will retry in %d seconds.",
   11cd0:	462a      	mov	r2, r5
   11cd2:	210a      	movs	r1, #10
   11cd4:	4889      	ldr	r0, [pc, #548]	; (11efc <main+0x280>)
   11cd6:	f01a fbee 	bl	2c4b6 <log_1>
	return z_impl_k_sleep(timeout);
   11cda:	2100      	movs	r1, #0
   11cdc:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   11ce0:	f012 fb9a 	bl	24418 <z_impl_k_sleep>
   11ce4:	e7de      	b.n	11ca4 <main+0x28>
		LOG_INF("LTE Link Connected!");
   11ce6:	4649      	mov	r1, r9
   11ce8:	4885      	ldr	r0, [pc, #532]	; (11f00 <main+0x284>)
   11cea:	f01a fbd5 	bl	2c498 <log_0>
		k_sleep(K_SECONDS(CONFIG_APP_CONNECT_RETRY_DELAY));
	}
	

	
	date_time_update_async(date_time_handler);
   11cee:	4885      	ldr	r0, [pc, #532]	; (11f04 <main+0x288>)
   11cf0:	f007 fcfc 	bl	196ec <date_time_update_async>
	struct addrinfo hints = {
   11cf4:	f04f 0801 	mov.w	r8, #1
	return z_impl_k_sem_take(sem, timeout);
   11cf8:	f04f 33ff 	mov.w	r3, #4294967295
   11cfc:	f04f 32ff 	mov.w	r2, #4294967295
   11d00:	4881      	ldr	r0, [pc, #516]	; (11f08 <main+0x28c>)
   11d02:	f012 fc09 	bl	24518 <z_impl_k_sem_take>
	mqtt_client_init(client);
   11d06:	4881      	ldr	r0, [pc, #516]	; (11f0c <main+0x290>)
   11d08:	f01b fb4b 	bl	2d3a2 <mqtt_client_init>
	struct addrinfo hints = {
   11d0c:	2250      	movs	r2, #80	; 0x50
   11d0e:	4629      	mov	r1, r5
   11d10:	a808      	add	r0, sp, #32
   11d12:	f014 f957 	bl	25fc4 <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   11d16:	4629      	mov	r1, r5
   11d18:	487d      	ldr	r0, [pc, #500]	; (11f10 <main+0x294>)
   11d1a:	ab03      	add	r3, sp, #12
   11d1c:	aa08      	add	r2, sp, #32
   11d1e:	e9cd 880a 	strd	r8, r8, [sp, #40]	; 0x28
   11d22:	f01a fe66 	bl	2c9f2 <zsock_getaddrinfo>
	if (err) {
   11d26:	4e7b      	ldr	r6, [pc, #492]	; (11f14 <main+0x298>)
   11d28:	4601      	mov	r1, r0
   11d2a:	2800      	cmp	r0, #0
   11d2c:	d07d      	beq.n	11e2a <main+0x1ae>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
   11d2e:	487a      	ldr	r0, [pc, #488]	; (11f18 <main+0x29c>)
   11d30:	ea47 0208 	orr.w	r2, r7, r8
   11d34:	f01a fbbf 	bl	2c4b6 <log_1>
	client->broker = &broker;
   11d38:	4d74      	ldr	r5, [pc, #464]	; (11f0c <main+0x290>)
	client->evt_cb = mqtt_evt_handler;
   11d3a:	4b78      	ldr	r3, [pc, #480]	; (11f1c <main+0x2a0>)
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   11d3c:	4878      	ldr	r0, [pc, #480]	; (11f20 <main+0x2a4>)
	client->evt_cb = mqtt_evt_handler;
   11d3e:	64ab      	str	r3, [r5, #72]	; 0x48
	client->broker = &broker;
   11d40:	636e      	str	r6, [r5, #52]	; 0x34
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   11d42:	62e8      	str	r0, [r5, #44]	; 0x2c
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   11d44:	f014 fd4e 	bl	267e4 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
   11d48:	2204      	movs	r2, #4
   11d4a:	f885 205e 	strb.w	r2, [r5, #94]	; 0x5e
	client->rx_buf = rx_buffer;
   11d4e:	4a75      	ldr	r2, [pc, #468]	; (11f24 <main+0x2a8>)
	client->password = NULL;
   11d50:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
   11d52:	64ea      	str	r2, [r5, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
   11d54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	client->tx_buf = tx_buffer;
   11d58:	4973      	ldr	r1, [pc, #460]	; (11f28 <main+0x2ac>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   11d5a:	6328      	str	r0, [r5, #48]	; 0x30
	client->tx_buf_size = sizeof(tx_buffer);
   11d5c:	e9c5 1215 	strd	r1, r2, [r5, #84]	; 0x54
	LOG_DBG("Initalizing buttons and leds.");
   11d60:	4872      	ldr	r0, [pc, #456]	; (11f2c <main+0x2b0>)
   11d62:	4973      	ldr	r1, [pc, #460]	; (11f30 <main+0x2b4>)
	client->rx_buf_size = sizeof(rx_buffer);
   11d64:	652a      	str	r2, [r5, #80]	; 0x50
	LOG_DBG("Initalizing buttons and leds.");
   11d66:	f044 0204 	orr.w	r2, r4, #4
	client->user_name = NULL;
   11d6a:	e9c5 330e 	strd	r3, r3, [r5, #56]	; 0x38
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
   11d6e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	LOG_DBG("Initalizing buttons and leds.");
   11d72:	f01a fba0 	bl	2c4b6 <log_1>
	err = dk_buttons_init(button_handler);
   11d76:	486f      	ldr	r0, [pc, #444]	; (11f34 <main+0x2b8>)
   11d78:	f005 fe94 	bl	17aa4 <dk_buttons_init>
	if (err) {
   11d7c:	4601      	mov	r1, r0
   11d7e:	b120      	cbz	r0, 11d8a <main+0x10e>
		LOG_ERR("Could not initialize buttons, err code: %d", err);
   11d80:	486d      	ldr	r0, [pc, #436]	; (11f38 <main+0x2bc>)
   11d82:	f044 0201 	orr.w	r2, r4, #1
   11d86:	f01a fb96 	bl	2c4b6 <log_1>
	err = dk_leds_init();
   11d8a:	f005 fe3b 	bl	17a04 <dk_leds_init>
	if (err) {
   11d8e:	4601      	mov	r1, r0
   11d90:	b120      	cbz	r0, 11d9c <main+0x120>
		LOG_ERR("Could not initialize leds, err code: %d", err);
   11d92:	486a      	ldr	r0, [pc, #424]	; (11f3c <main+0x2c0>)
   11d94:	f044 0201 	orr.w	r2, r4, #1
   11d98:	f01a fb8d 	bl	2c4b6 <log_1>
	err = dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   11d9c:	2100      	movs	r1, #0
   11d9e:	200f      	movs	r0, #15
   11da0:	f01c fa1b 	bl	2e1da <dk_set_leds_state>
	if (err) {
   11da4:	4601      	mov	r1, r0
   11da6:	b120      	cbz	r0, 11db2 <main+0x136>
		LOG_ERR("Could not set leds state, err code: %d", err);
   11da8:	4865      	ldr	r0, [pc, #404]	; (11f40 <main+0x2c4>)
   11daa:	f044 0201 	orr.w	r2, r4, #1
   11dae:	f01a fb82 	bl	2c4b6 <log_1>
	k_sem_take(&date_time_ok,K_FOREVER);

	client_init(&client);

	buttons_leds_init(); /* Button for "alarm simulation" and leds for control */
	timer_init(); /* Periodic sample timer */
   11db2:	f7ff fd3d 	bl	11830 <timer_init>
	init_work();  /* Work queue and items for sampling and alarm */
   11db6:	f7ff fe2b 	bl	11a10 <init_work>
	
	modem_info_init();
   11dba:	f007 fad9 	bl	19370 <modem_info_init>
  	modem_info_rsrp_register(rsrp_cb);
   11dbe:	4861      	ldr	r0, [pc, #388]	; (11f44 <main+0x2c8>)
   11dc0:	f007 faa8 	bl	19314 <modem_info_rsrp_register>

	err = lte_lc_offline();
   11dc4:	f006 fffe 	bl	18dc4 <lte_lc_offline>
	if(err) {
   11dc8:	b120      	cbz	r0, 11dd4 <main+0x158>
		LOG_ERR("LTE: Offline mode failed");
   11dca:	485f      	ldr	r0, [pc, #380]	; (11f48 <main+0x2cc>)
   11dcc:	f044 0101 	orr.w	r1, r4, #1
   11dd0:	f01a fb62 	bl	2c498 <log_0>
	}


	//Lighting LED1 to indicate that the application entering main loop.
	dk_set_led(DK_LED1, 0);
   11dd4:	2100      	movs	r1, #0
   11dd6:	4608      	mov	r0, r1
   11dd8:	f005 ff1a 	bl	17c10 <dk_set_led>

	while (1) {
		if(app_connected) {
   11ddc:	4e5b      	ldr	r6, [pc, #364]	; (11f4c <main+0x2d0>)
   11dde:	4d5c      	ldr	r5, [pc, #368]	; (11f50 <main+0x2d4>)
   11de0:	7833      	ldrb	r3, [r6, #0]
   11de2:	2b00      	cmp	r3, #0
   11de4:	d07b      	beq.n	11ede <main+0x262>
			err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   11de6:	4849      	ldr	r0, [pc, #292]	; (11f0c <main+0x290>)
   11de8:	f01b fc0c 	bl	2d604 <mqtt_keepalive_time_left>
   11dec:	4602      	mov	r2, r0
   11dee:	2101      	movs	r1, #1
   11df0:	4628      	mov	r0, r5
   11df2:	f001 fecd 	bl	13b90 <z_impl_zsock_poll>
			if (err < 0) {
   11df6:	2800      	cmp	r0, #0
   11df8:	da41      	bge.n	11e7e <main+0x202>
				printk("ERROR: poll %d\n", errno);
   11dfa:	f01a ff4e 	bl	2cc9a <__errno>
   11dfe:	6801      	ldr	r1, [r0, #0]
   11e00:	4854      	ldr	r0, [pc, #336]	; (11f54 <main+0x2d8>)
   11e02:	f01a f8fc 	bl	2bffe <printk>
		{
			k_sleep(K_SECONDS(SAMPLE_INTERVAL));
		}
	}

	LOG_INF("Disconnecting MQTT client...");
   11e06:	f044 0103 	orr.w	r1, r4, #3
   11e0a:	4853      	ldr	r0, [pc, #332]	; (11f58 <main+0x2dc>)
   11e0c:	f01a fb44 	bl	2c498 <log_0>

	err = mqtt_disconnect(&client);
   11e10:	483e      	ldr	r0, [pc, #248]	; (11f0c <main+0x290>)
   11e12:	f01b fb68 	bl	2d4e6 <mqtt_disconnect>
	if (err) {
   11e16:	4601      	mov	r1, r0
   11e18:	b120      	cbz	r0, 11e24 <main+0x1a8>
		LOG_ERR("Could not disconnect MQTT client. Error: %d", err);
   11e1a:	4850      	ldr	r0, [pc, #320]	; (11f5c <main+0x2e0>)
   11e1c:	f044 0201 	orr.w	r2, r4, #1
   11e20:	f01a fb49 	bl	2c4b6 <log_1>
	}
}
   11e24:	b01c      	add	sp, #112	; 0x70
   11e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	addr = result;
   11e2a:	9b03      	ldr	r3, [sp, #12]
	while (addr != NULL) {
   11e2c:	b1cb      	cbz	r3, 11e62 <main+0x1e6>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   11e2e:	6959      	ldr	r1, [r3, #20]
   11e30:	2908      	cmp	r1, #8
   11e32:	d11a      	bne.n	11e6a <main+0x1ee>
				->sin_addr.s_addr;
   11e34:	699b      	ldr	r3, [r3, #24]
			broker4->sin_family = AF_INET;
   11e36:	f8a6 8000 	strh.w	r8, [r6]
				->sin_addr.s_addr;
   11e3a:	685b      	ldr	r3, [r3, #4]
			broker4->sin_addr.s_addr =
   11e3c:	6073      	str	r3, [r6, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   11e3e:	f645 3307 	movw	r3, #23303	; 0x5b07
   11e42:	8073      	strh	r3, [r6, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   11e44:	2310      	movs	r3, #16
   11e46:	1d31      	adds	r1, r6, #4
   11e48:	eb0d 0203 	add.w	r2, sp, r3
   11e4c:	4640      	mov	r0, r8
   11e4e:	f003 fc15 	bl	1567c <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s", log_strdup(ipv4_addr));
   11e52:	a804      	add	r0, sp, #16
   11e54:	f001 f91a 	bl	1308c <log_strdup>
   11e58:	464a      	mov	r2, r9
   11e5a:	4601      	mov	r1, r0
   11e5c:	4840      	ldr	r0, [pc, #256]	; (11f60 <main+0x2e4>)
   11e5e:	f01a fb2a 	bl	2c4b6 <log_1>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   11e62:	9803      	ldr	r0, [sp, #12]
   11e64:	f01a fdc7 	bl	2c9f6 <zsock_freeaddrinfo>
   11e68:	e766      	b.n	11d38 <main+0xbc>
			LOG_WRN("ai_addrlen = %u should be %u or %u",
   11e6a:	f047 0702 	orr.w	r7, r7, #2
   11e6e:	2318      	movs	r3, #24
   11e70:	2208      	movs	r2, #8
   11e72:	483c      	ldr	r0, [pc, #240]	; (11f64 <main+0x2e8>)
   11e74:	f8ad 7000 	strh.w	r7, [sp]
   11e78:	f01a fb4d 	bl	2c516 <log_3>
		break;
   11e7c:	e7f1      	b.n	11e62 <main+0x1e6>
			if(app_connected) { 
   11e7e:	7833      	ldrb	r3, [r6, #0]
   11e80:	2b00      	cmp	r3, #0
   11e82:	d0ad      	beq.n	11de0 <main+0x164>
				err = mqtt_live(&client);
   11e84:	4821      	ldr	r0, [pc, #132]	; (11f0c <main+0x290>)
   11e86:	f01b fb96 	bl	2d5b6 <mqtt_live>
				if ((err != 0) && (err != -EAGAIN)) {
   11e8a:	4601      	mov	r1, r0
   11e8c:	b140      	cbz	r0, 11ea0 <main+0x224>
   11e8e:	f110 0f0b 	cmn.w	r0, #11
   11e92:	d005      	beq.n	11ea0 <main+0x224>
					LOG_ERR("ERROR: mqtt_live %d", err);
   11e94:	4834      	ldr	r0, [pc, #208]	; (11f68 <main+0x2ec>)
   11e96:	f044 0201 	orr.w	r2, r4, #1
   11e9a:	f01a fb0c 	bl	2c4b6 <log_1>
   11e9e:	e7b2      	b.n	11e06 <main+0x18a>
				if ((fds.revents & POLLIN) == POLLIN) {
   11ea0:	88eb      	ldrh	r3, [r5, #6]
   11ea2:	07d9      	lsls	r1, r3, #31
   11ea4:	d50a      	bpl.n	11ebc <main+0x240>
					err = mqtt_input(&client);
   11ea6:	4819      	ldr	r0, [pc, #100]	; (11f0c <main+0x290>)
   11ea8:	f01b fbc3 	bl	2d632 <mqtt_input>
					if (err != 0) {
   11eac:	4601      	mov	r1, r0
   11eae:	b128      	cbz	r0, 11ebc <main+0x240>
						LOG_ERR("ERROR: mqtt_input %d", err);
   11eb0:	482e      	ldr	r0, [pc, #184]	; (11f6c <main+0x2f0>)
   11eb2:	f044 0201 	orr.w	r2, r4, #1
   11eb6:	f01a fafe 	bl	2c4b6 <log_1>
						continue;
   11eba:	e791      	b.n	11de0 <main+0x164>
				if ((fds.revents & POLLERR) == POLLERR) {
   11ebc:	88eb      	ldrh	r3, [r5, #6]
   11ebe:	071a      	lsls	r2, r3, #28
   11ec0:	d505      	bpl.n	11ece <main+0x252>
					LOG_ERR("POLLERR");
   11ec2:	482b      	ldr	r0, [pc, #172]	; (11f70 <main+0x2f4>)
   11ec4:	f044 0101 	orr.w	r1, r4, #1
   11ec8:	f01a fae6 	bl	2c498 <log_0>
   11ecc:	e79b      	b.n	11e06 <main+0x18a>
				if ((fds.revents & POLLNVAL) == POLLNVAL) {
   11ece:	069b      	lsls	r3, r3, #26
   11ed0:	d586      	bpl.n	11de0 <main+0x164>
					LOG_ERR("POLLNVAL");
   11ed2:	4828      	ldr	r0, [pc, #160]	; (11f74 <main+0x2f8>)
   11ed4:	f044 0101 	orr.w	r1, r4, #1
   11ed8:	f01a fade 	bl	2c498 <log_0>
					continue;
   11edc:	e780      	b.n	11de0 <main+0x164>
	return z_impl_k_sleep(timeout);
   11ede:	2100      	movs	r1, #0
   11ee0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11ee4:	f012 fa98 	bl	24418 <z_impl_k_sleep>
   11ee8:	e77a      	b.n	11de0 <main+0x164>
   11eea:	bf00      	nop
   11eec:	0002ebc4 	.word	0x0002ebc4
   11ef0:	0002ec34 	.word	0x0002ec34
   11ef4:	0002fbf0 	.word	0x0002fbf0
   11ef8:	0002fa19 	.word	0x0002fa19
   11efc:	0002fa3d 	.word	0x0002fa3d
   11f00:	0002fc53 	.word	0x0002fc53
   11f04:	00011519 	.word	0x00011519
   11f08:	20020c38 	.word	0x20020c38
   11f0c:	20021454 	.word	0x20021454
   11f10:	0002fc67 	.word	0x0002fc67
   11f14:	200242a0 	.word	0x200242a0
   11f18:	0002fc78 	.word	0x0002fc78
   11f1c:	000115a9 	.word	0x000115a9
   11f20:	0002fcce 	.word	0x0002fcce
   11f24:	20024343 	.word	0x20024343
   11f28:	20024537 	.word	0x20024537
   11f2c:	0002fcda 	.word	0x0002fcda
   11f30:	0002fea0 	.word	0x0002fea0
   11f34:	00011445 	.word	0x00011445
   11f38:	0002fcfc 	.word	0x0002fcfc
   11f3c:	0002fd27 	.word	0x0002fd27
   11f40:	0002fd4f 	.word	0x0002fd4f
   11f44:	000114c5 	.word	0x000114c5
   11f48:	0002fd76 	.word	0x0002fd76
   11f4c:	200242c2 	.word	0x200242c2
   11f50:	200214bc 	.word	0x200214bc
   11f54:	0002fd8f 	.word	0x0002fd8f
   11f58:	0002f92f 	.word	0x0002f92f
   11f5c:	0002fdd9 	.word	0x0002fdd9
   11f60:	0002fc95 	.word	0x0002fc95
   11f64:	0002fcab 	.word	0x0002fcab
   11f68:	0002fd9f 	.word	0x0002fd9f
   11f6c:	0002fdb3 	.word	0x0002fdb3
   11f70:	0002fdc8 	.word	0x0002fdc8
   11f74:	0002fdd0 	.word	0x0002fdd0
   11f78:	0002fc18 	.word	0x0002fc18
   11f7c:	0002fc30 	.word	0x0002fc30

00011f80 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11f80:	2803      	cmp	r0, #3
{
   11f82:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11f84:	d906      	bls.n	11f94 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   11f86:	f01a fe88 	bl	2cc9a <__errno>
   11f8a:	2309      	movs	r3, #9
   11f8c:	6003      	str	r3, [r0, #0]
   11f8e:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   11f92:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11f94:	220c      	movs	r2, #12
   11f96:	4b05      	ldr	r3, [pc, #20]	; (11fac <_check_fd+0x2c>)
   11f98:	fb02 3000 	mla	r0, r2, r0, r3
   11f9c:	3008      	adds	r0, #8
   11f9e:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   11fa2:	2b00      	cmp	r3, #0
   11fa4:	d0ef      	beq.n	11f86 <_check_fd+0x6>
	return 0;
   11fa6:	2000      	movs	r0, #0
   11fa8:	e7f3      	b.n	11f92 <_check_fd+0x12>
   11faa:	bf00      	nop
   11fac:	200214d4 	.word	0x200214d4

00011fb0 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   11fb0:	b570      	push	{r4, r5, r6, lr}
   11fb2:	4604      	mov	r4, r0
   11fb4:	460d      	mov	r5, r1
   11fb6:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11fb8:	f7ff ffe2 	bl	11f80 <_check_fd>
   11fbc:	2800      	cmp	r0, #0
   11fbe:	db0a      	blt.n	11fd6 <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   11fc0:	4a08      	ldr	r2, [pc, #32]	; (11fe4 <z_get_fd_obj+0x34>)
   11fc2:	b155      	cbz	r5, 11fda <z_get_fd_obj+0x2a>
   11fc4:	230c      	movs	r3, #12
   11fc6:	fb03 2304 	mla	r3, r3, r4, r2
   11fca:	685b      	ldr	r3, [r3, #4]
   11fcc:	42ab      	cmp	r3, r5
   11fce:	d004      	beq.n	11fda <z_get_fd_obj+0x2a>
		errno = err;
   11fd0:	f01a fe63 	bl	2cc9a <__errno>
   11fd4:	6006      	str	r6, [r0, #0]
		return NULL;
   11fd6:	2000      	movs	r0, #0
   11fd8:	e002      	b.n	11fe0 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   11fda:	200c      	movs	r0, #12
   11fdc:	4344      	muls	r4, r0
   11fde:	5910      	ldr	r0, [r2, r4]
}
   11fe0:	bd70      	pop	{r4, r5, r6, pc}
   11fe2:	bf00      	nop
   11fe4:	200214d4 	.word	0x200214d4

00011fe8 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   11fe8:	b538      	push	{r3, r4, r5, lr}
   11fea:	4605      	mov	r5, r0
   11fec:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11fee:	f7ff ffc7 	bl	11f80 <_check_fd>
   11ff2:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   11ff4:	bfa3      	ittte	ge
   11ff6:	230c      	movge	r3, #12
   11ff8:	fb03 f005 	mulge.w	r0, r3, r5
   11ffc:	4a03      	ldrge	r2, [pc, #12]	; (1200c <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   11ffe:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   12000:	bfa1      	itttt	ge
   12002:	1813      	addge	r3, r2, r0
   12004:	685b      	ldrge	r3, [r3, #4]
   12006:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   12008:	5810      	ldrge	r0, [r2, r0]
}
   1200a:	bd38      	pop	{r3, r4, r5, pc}
   1200c:	200214d4 	.word	0x200214d4

00012010 <z_reserve_fd>:

int z_reserve_fd(void)
{
   12010:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   12012:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   12014:	f04f 33ff 	mov.w	r3, #4294967295
   12018:	f04f 32ff 	mov.w	r2, #4294967295
   1201c:	4812      	ldr	r0, [pc, #72]	; (12068 <z_reserve_fd+0x58>)
   1201e:	f010 fdbd 	bl	22b9c <z_impl_k_mutex_lock>
   12022:	4b12      	ldr	r3, [pc, #72]	; (1206c <z_reserve_fd+0x5c>)
   12024:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   12028:	b17a      	cbz	r2, 1204a <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1202a:	3401      	adds	r4, #1
   1202c:	2c04      	cmp	r4, #4
   1202e:	f103 030c 	add.w	r3, r3, #12
   12032:	d1f7      	bne.n	12024 <z_reserve_fd+0x14>
	errno = ENFILE;
   12034:	f01a fe31 	bl	2cc9a <__errno>
   12038:	2317      	movs	r3, #23
	return -1;
   1203a:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   1203e:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12040:	4809      	ldr	r0, [pc, #36]	; (12068 <z_reserve_fd+0x58>)
   12042:	f010 fea5 	bl	22d90 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   12046:	4620      	mov	r0, r4
   12048:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1204a:	e8d3 1fef 	ldaex	r1, [r3]
   1204e:	3101      	adds	r1, #1
   12050:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12054:	2800      	cmp	r0, #0
   12056:	d1f8      	bne.n	1204a <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   12058:	230c      	movs	r3, #12
   1205a:	4363      	muls	r3, r4
   1205c:	4904      	ldr	r1, [pc, #16]	; (12070 <z_reserve_fd+0x60>)
   1205e:	18c8      	adds	r0, r1, r3
   12060:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   12062:	6042      	str	r2, [r0, #4]
   12064:	e7ec      	b.n	12040 <z_reserve_fd+0x30>
   12066:	bf00      	nop
   12068:	20020b7c 	.word	0x20020b7c
   1206c:	200214dc 	.word	0x200214dc
   12070:	200214d4 	.word	0x200214d4

00012074 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   12074:	230c      	movs	r3, #12
{
   12076:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   12078:	4358      	muls	r0, r3
   1207a:	4c02      	ldr	r4, [pc, #8]	; (12084 <z_finalize_fd+0x10>)
   1207c:	1823      	adds	r3, r4, r0
   1207e:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   12080:	605a      	str	r2, [r3, #4]
}
   12082:	bd10      	pop	{r4, pc}
   12084:	200214d4 	.word	0x200214d4

00012088 <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   12088:	230c      	movs	r3, #12
   1208a:	4a0e      	ldr	r2, [pc, #56]	; (120c4 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   1208c:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   1208e:	fb03 2300 	mla	r3, r3, r0, r2
   12092:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12094:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   12098:	b191      	cbz	r1, 120c0 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   1209a:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1209c:	e8d3 5fef 	ldaex	r5, [r3]
   120a0:	428d      	cmp	r5, r1
   120a2:	d104      	bne.n	120ae <z_free_fd+0x26>
   120a4:	e8c3 4fec 	stlex	ip, r4, [r3]
   120a8:	f1bc 0f00 	cmp.w	ip, #0
   120ac:	d1f6      	bne.n	1209c <z_free_fd+0x14>
   120ae:	d1f1      	bne.n	12094 <z_free_fd+0xc>
	if (old_rc != 1) {
   120b0:	2901      	cmp	r1, #1
   120b2:	d105      	bne.n	120c0 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   120b4:	230c      	movs	r3, #12
   120b6:	4358      	muls	r0, r3
   120b8:	2300      	movs	r3, #0
   120ba:	1811      	adds	r1, r2, r0
   120bc:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   120be:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   120c0:	bd30      	pop	{r4, r5, pc}
   120c2:	bf00      	nop
   120c4:	200214d4 	.word	0x200214d4

000120c8 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   120c8:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   120ca:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   120cc:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   120d0:	2b02      	cmp	r3, #2
{
   120d2:	4604      	mov	r4, r0
   120d4:	460e      	mov	r6, r1
	notify->result = res;
   120d6:	6081      	str	r1, [r0, #8]
	switch (method) {
   120d8:	d010      	beq.n	120fc <sys_notify_finalize+0x34>
   120da:	2b03      	cmp	r3, #3
   120dc:	d004      	beq.n	120e8 <sys_notify_finalize+0x20>
   120de:	2b01      	cmp	r3, #1
   120e0:	d10f      	bne.n	12102 <sys_notify_finalize+0x3a>
   120e2:	2500      	movs	r5, #0
   120e4:	4628      	mov	r0, r5
   120e6:	e001      	b.n	120ec <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   120e8:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   120ea:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   120ec:	2300      	movs	r3, #0
   120ee:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   120f0:	b110      	cbz	r0, 120f8 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   120f2:	4631      	mov	r1, r6
   120f4:	f013 fb6a 	bl	257cc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   120f8:	4628      	mov	r0, r5
   120fa:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
   120fc:	2500      	movs	r5, #0
		sig = notify->method.signal;
   120fe:	6800      	ldr	r0, [r0, #0]
		break;
   12100:	e7f4      	b.n	120ec <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   12102:	2345      	movs	r3, #69	; 0x45
   12104:	4a05      	ldr	r2, [pc, #20]	; (1211c <sys_notify_finalize+0x54>)
   12106:	4906      	ldr	r1, [pc, #24]	; (12120 <sys_notify_finalize+0x58>)
   12108:	4806      	ldr	r0, [pc, #24]	; (12124 <sys_notify_finalize+0x5c>)
   1210a:	f019 ff78 	bl	2bffe <printk>
   1210e:	2145      	movs	r1, #69	; 0x45
   12110:	4802      	ldr	r0, [pc, #8]	; (1211c <sys_notify_finalize+0x54>)
   12112:	f01a f991 	bl	2c438 <assert_post_action>
	sys_notify_generic_callback rv = 0;
   12116:	2500      	movs	r5, #0
   12118:	e7e7      	b.n	120ea <sys_notify_finalize+0x22>
   1211a:	bf00      	nop
   1211c:	0002feea 	.word	0x0002feea
   12120:	00032a36 	.word	0x00032a36
   12124:	0002ff0d 	.word	0x0002ff0d

00012128 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
   12128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1212c:	b087      	sub	sp, #28
   1212e:	460f      	mov	r7, r1
   12130:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
   12132:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
   12134:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   12136:	2514      	movs	r5, #20
{
   12138:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   1213a:	4698      	mov	r8, r3
{
   1213c:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   12140:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   12144:	4c1e      	ldr	r4, [pc, #120]	; (121c0 <print_digits+0x98>)
   12146:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   1214a:	ea50 0301 	orrs.w	r3, r0, r1
   1214e:	d11a      	bne.n	12186 <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
   12150:	2d14      	cmp	r5, #20
		buf[i] = '0';
   12152:	bf08      	it	eq
   12154:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   12156:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   12158:	bf18      	it	ne
   1215a:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   1215c:	442c      	add	r4, r5
		buf[i] = '0';
   1215e:	bf08      	it	eq
   12160:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   12164:	2c15      	cmp	r4, #21
   12166:	d01b      	beq.n	121a0 <print_digits+0x78>
   12168:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
   1216a:	2c00      	cmp	r4, #0
   1216c:	dc1a      	bgt.n	121a4 <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
   1216e:	f81d 0005 	ldrb.w	r0, [sp, r5]
   12172:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   12174:	3501      	adds	r5, #1
		out(buf[i], ctx);
   12176:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   12178:	2d15      	cmp	r5, #21
   1217a:	d1f8      	bne.n	1216e <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
   1217c:	2c00      	cmp	r4, #0
   1217e:	dc19      	bgt.n	121b4 <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
   12180:	b007      	add	sp, #28
   12182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   12186:	4642      	mov	r2, r8
   12188:	464b      	mov	r3, r9
   1218a:	f7fa fb65 	bl	c858 <__aeabi_uldivmod>
   1218e:	4684      	mov	ip, r0
   12190:	460b      	mov	r3, r1
   12192:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
   12194:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
   12196:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
   1219a:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   1219c:	3d01      	subs	r5, #1
   1219e:	e7d4      	b.n	1214a <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   121a0:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
   121a2:	e7e4      	b.n	1216e <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   121a4:	f1bb 0f00 	cmp.w	fp, #0
   121a8:	d0e1      	beq.n	1216e <print_digits+0x46>
		out(pad_char, ctx);
   121aa:	4639      	mov	r1, r7
   121ac:	4650      	mov	r0, sl
   121ae:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   121b0:	3c01      	subs	r4, #1
   121b2:	e7da      	b.n	1216a <print_digits+0x42>
		out(pad_char, ctx);
   121b4:	4639      	mov	r1, r7
   121b6:	4650      	mov	r0, sl
   121b8:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   121ba:	3c01      	subs	r4, #1
   121bc:	e7de      	b.n	1217c <print_digits+0x54>
   121be:	bf00      	nop
   121c0:	0002ff2a 	.word	0x0002ff2a

000121c4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   121c4:	680b      	ldr	r3, [r1, #0]
   121c6:	3301      	adds	r3, #1
   121c8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   121ca:	4b01      	ldr	r3, [pc, #4]	; (121d0 <char_out+0xc>)
   121cc:	681b      	ldr	r3, [r3, #0]
   121ce:	4718      	bx	r3
   121d0:	2002042c 	.word	0x2002042c

000121d4 <__printk_hook_install>:
	_char_out = fn;
   121d4:	4b01      	ldr	r3, [pc, #4]	; (121dc <__printk_hook_install+0x8>)
   121d6:	6018      	str	r0, [r3, #0]
}
   121d8:	4770      	bx	lr
   121da:	bf00      	nop
   121dc:	2002042c 	.word	0x2002042c

000121e0 <z_vprintk>:
{
   121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   121e4:	2600      	movs	r6, #0
{
   121e6:	4605      	mov	r5, r0
   121e8:	468b      	mov	fp, r1
   121ea:	461c      	mov	r4, r3
	int min_width = -1;
   121ec:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
   121f0:	4637      	mov	r7, r6
{
   121f2:	b087      	sub	sp, #28
   121f4:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
   121f8:	f04f 0900 	mov.w	r9, #0
					break;
   121fc:	e007      	b.n	1220e <z_vprintk+0x2e>
		if (!might_format) {
   121fe:	f1b9 0f00 	cmp.w	r9, #0
   12202:	d10b      	bne.n	1221c <z_vprintk+0x3c>
			if (*fmt != '%') {
   12204:	2825      	cmp	r0, #37	; 0x25
   12206:	f000 810a 	beq.w	1241e <z_vprintk+0x23e>
				out((int)*fmt, ctx);
   1220a:	4659      	mov	r1, fp
   1220c:	47a8      	blx	r5
	while (*fmt) {
   1220e:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   12212:	2800      	cmp	r0, #0
   12214:	d1f3      	bne.n	121fe <z_vprintk+0x1e>
}
   12216:	b007      	add	sp, #28
   12218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1221c:	287a      	cmp	r0, #122	; 0x7a
   1221e:	d80a      	bhi.n	12236 <z_vprintk+0x56>
   12220:	2862      	cmp	r0, #98	; 0x62
   12222:	d810      	bhi.n	12246 <z_vprintk+0x66>
   12224:	2830      	cmp	r0, #48	; 0x30
   12226:	d051      	beq.n	122cc <z_vprintk+0xec>
   12228:	d844      	bhi.n	122b4 <z_vprintk+0xd4>
   1222a:	2825      	cmp	r0, #37	; 0x25
   1222c:	f000 80f5 	beq.w	1241a <z_vprintk+0x23a>
   12230:	282d      	cmp	r0, #45	; 0x2d
   12232:	f000 80fb 	beq.w	1242c <z_vprintk+0x24c>
					out((int)'%', ctx);
   12236:	4659      	mov	r1, fp
   12238:	2025      	movs	r0, #37	; 0x25
   1223a:	47a8      	blx	r5
					out((int)*fmt, ctx);
   1223c:	4659      	mov	r1, fp
   1223e:	f89a 0000 	ldrb.w	r0, [sl]
   12242:	47a8      	blx	r5
   12244:	e7d8      	b.n	121f8 <z_vprintk+0x18>
   12246:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   1224a:	2b17      	cmp	r3, #23
   1224c:	d8f3      	bhi.n	12236 <z_vprintk+0x56>
   1224e:	a201      	add	r2, pc, #4	; (adr r2, 12254 <z_vprintk+0x74>)
   12250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12254:	00012413 	.word	0x00012413
   12258:	00012315 	.word	0x00012315
   1225c:	00012237 	.word	0x00012237
   12260:	00012237 	.word	0x00012237
   12264:	00012237 	.word	0x00012237
   12268:	000122f7 	.word	0x000122f7
   1226c:	00012315 	.word	0x00012315
   12270:	00012237 	.word	0x00012237
   12274:	00012237 	.word	0x00012237
   12278:	000122f7 	.word	0x000122f7
   1227c:	00012237 	.word	0x00012237
   12280:	00012237 	.word	0x00012237
   12284:	00012237 	.word	0x00012237
   12288:	0001238f 	.word	0x0001238f
   1228c:	00012237 	.word	0x00012237
   12290:	00012237 	.word	0x00012237
   12294:	000123db 	.word	0x000123db
   12298:	00012237 	.word	0x00012237
   1229c:	00012315 	.word	0x00012315
   122a0:	00012237 	.word	0x00012237
   122a4:	00012237 	.word	0x00012237
   122a8:	000122bd 	.word	0x000122bd
   122ac:	00012237 	.word	0x00012237
   122b0:	000122f7 	.word	0x000122f7
			switch (*fmt) {
   122b4:	2839      	cmp	r0, #57	; 0x39
   122b6:	d915      	bls.n	122e4 <z_vprintk+0x104>
   122b8:	2858      	cmp	r0, #88	; 0x58
   122ba:	d1bc      	bne.n	12236 <z_vprintk+0x56>
				if (*fmt == 'p') {
   122bc:	f89a 3000 	ldrb.w	r3, [sl]
   122c0:	2b70      	cmp	r3, #112	; 0x70
   122c2:	d16e      	bne.n	123a2 <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
   122c4:	2300      	movs	r3, #0
   122c6:	f854 2b04 	ldr.w	r2, [r4], #4
   122ca:	e075      	b.n	123b8 <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
   122cc:	f1b8 0f00 	cmp.w	r8, #0
   122d0:	da0b      	bge.n	122ea <z_vprintk+0x10a>
   122d2:	2f00      	cmp	r7, #0
   122d4:	f000 80ac 	beq.w	12430 <z_vprintk+0x250>
					min_width = *fmt - '0';
   122d8:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   122dc:	2f00      	cmp	r7, #0
   122de:	bf08      	it	eq
   122e0:	2702      	moveq	r7, #2
   122e2:	e794      	b.n	1220e <z_vprintk+0x2e>
				if (min_width < 0) {
   122e4:	f1b8 0f00 	cmp.w	r8, #0
   122e8:	dbf6      	blt.n	122d8 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   122ea:	230a      	movs	r3, #10
   122ec:	fb03 0808 	mla	r8, r3, r8, r0
   122f0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   122f4:	e7f2      	b.n	122dc <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
   122f6:	2868      	cmp	r0, #104	; 0x68
   122f8:	d103      	bne.n	12302 <z_vprintk+0x122>
   122fa:	2e68      	cmp	r6, #104	; 0x68
   122fc:	d106      	bne.n	1230c <z_vprintk+0x12c>
					length_mod = 'H';
   122fe:	2648      	movs	r6, #72	; 0x48
   12300:	e785      	b.n	1220e <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   12302:	286c      	cmp	r0, #108	; 0x6c
   12304:	d102      	bne.n	1230c <z_vprintk+0x12c>
   12306:	2e6c      	cmp	r6, #108	; 0x6c
   12308:	f000 8094 	beq.w	12434 <z_vprintk+0x254>
				} else if (length_mod == 0) {
   1230c:	2e00      	cmp	r6, #0
   1230e:	d192      	bne.n	12236 <z_vprintk+0x56>
   12310:	4606      	mov	r6, r0
   12312:	e77c      	b.n	1220e <z_vprintk+0x2e>
				if (length_mod == 'z') {
   12314:	2e7a      	cmp	r6, #122	; 0x7a
   12316:	d106      	bne.n	12326 <z_vprintk+0x146>
					d = va_arg(ap, long);
   12318:	46a1      	mov	r9, r4
   1231a:	f859 2b04 	ldr.w	r2, [r9], #4
   1231e:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   12320:	2875      	cmp	r0, #117	; 0x75
   12322:	d123      	bne.n	1236c <z_vprintk+0x18c>
   12324:	e00f      	b.n	12346 <z_vprintk+0x166>
				} else if (length_mod == 'l') {
   12326:	2e6c      	cmp	r6, #108	; 0x6c
   12328:	d0f6      	beq.n	12318 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
   1232a:	2e4c      	cmp	r6, #76	; 0x4c
   1232c:	d105      	bne.n	1233a <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
   1232e:	3407      	adds	r4, #7
   12330:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
   12334:	e8f9 2302 	ldrd	r2, r3, [r9], #8
   12338:	e7f2      	b.n	12320 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
   1233a:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
   1233c:	6822      	ldr	r2, [r4, #0]
   1233e:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
   12342:	d112      	bne.n	1236a <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
   12344:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   12346:	1ef8      	subs	r0, r7, #3
   12348:	bf18      	it	ne
   1234a:	2001      	movne	r0, #1
   1234c:	2f01      	cmp	r7, #1
   1234e:	bf0c      	ite	eq
   12350:	2430      	moveq	r4, #48	; 0x30
   12352:	2420      	movne	r4, #32
   12354:	9001      	str	r0, [sp, #4]
   12356:	200a      	movs	r0, #10
   12358:	e9cd 4802 	strd	r4, r8, [sp, #8]
   1235c:	9000      	str	r0, [sp, #0]
   1235e:	4659      	mov	r1, fp
   12360:	4628      	mov	r0, r5
   12362:	f7ff fee1 	bl	12128 <print_digits>
}
   12366:	464c      	mov	r4, r9
   12368:	e746      	b.n	121f8 <z_vprintk+0x18>
					d = va_arg(ap, int);
   1236a:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   1236c:	2a00      	cmp	r2, #0
   1236e:	f173 0100 	sbcs.w	r1, r3, #0
   12372:	dae8      	bge.n	12346 <z_vprintk+0x166>
					out((int)'-', ctx);
   12374:	4659      	mov	r1, fp
   12376:	202d      	movs	r0, #45	; 0x2d
   12378:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1237c:	47a8      	blx	r5
					d = -d;
   1237e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   12382:	4252      	negs	r2, r2
   12384:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   12388:	f108 38ff 	add.w	r8, r8, #4294967295
   1238c:	e7db      	b.n	12346 <z_vprintk+0x166>
				out('0', ctx);
   1238e:	4659      	mov	r1, fp
   12390:	2030      	movs	r0, #48	; 0x30
   12392:	47a8      	blx	r5
				out('x', ctx);
   12394:	4659      	mov	r1, fp
   12396:	2078      	movs	r0, #120	; 0x78
   12398:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
   1239a:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
   1239e:	2701      	movs	r7, #1
   123a0:	e78c      	b.n	122bc <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   123a2:	2e6c      	cmp	r6, #108	; 0x6c
   123a4:	d08e      	beq.n	122c4 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
   123a6:	2e4c      	cmp	r6, #76	; 0x4c
   123a8:	d18c      	bne.n	122c4 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
   123aa:	1de3      	adds	r3, r4, #7
   123ac:	f023 0307 	bic.w	r3, r3, #7
   123b0:	461c      	mov	r4, r3
   123b2:	685b      	ldr	r3, [r3, #4]
   123b4:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   123b8:	1ef8      	subs	r0, r7, #3
   123ba:	bf18      	it	ne
   123bc:	2001      	movne	r0, #1
   123be:	2f01      	cmp	r7, #1
   123c0:	bf0c      	ite	eq
   123c2:	2130      	moveq	r1, #48	; 0x30
   123c4:	2120      	movne	r1, #32
   123c6:	e9cd 1802 	strd	r1, r8, [sp, #8]
   123ca:	2110      	movs	r1, #16
   123cc:	9001      	str	r0, [sp, #4]
   123ce:	9100      	str	r1, [sp, #0]
   123d0:	4628      	mov	r0, r5
   123d2:	4659      	mov	r1, fp
   123d4:	f7ff fea8 	bl	12128 <print_digits>
   123d8:	e70e      	b.n	121f8 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
   123da:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   123de:	4699      	mov	r9, r3
   123e0:	464a      	mov	r2, r9
   123e2:	f819 0b01 	ldrb.w	r0, [r9], #1
   123e6:	b978      	cbnz	r0, 12408 <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
   123e8:	2f03      	cmp	r7, #3
   123ea:	d125      	bne.n	12438 <z_vprintk+0x258>
					int remaining = min_width - (s - start);
   123ec:	eba2 0903 	sub.w	r9, r2, r3
   123f0:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
   123f4:	f1b9 0f00 	cmp.w	r9, #0
   123f8:	f77f aefe 	ble.w	121f8 <z_vprintk+0x18>
						out(' ', ctx);
   123fc:	4659      	mov	r1, fp
   123fe:	2020      	movs	r0, #32
   12400:	47a8      	blx	r5
   12402:	f109 39ff 	add.w	r9, r9, #4294967295
   12406:	e7f5      	b.n	123f4 <z_vprintk+0x214>
					out((int)(*s++), ctx);
   12408:	4659      	mov	r1, fp
   1240a:	9304      	str	r3, [sp, #16]
   1240c:	47a8      	blx	r5
   1240e:	9b04      	ldr	r3, [sp, #16]
   12410:	e7e6      	b.n	123e0 <z_vprintk+0x200>
				out(c, ctx);
   12412:	4659      	mov	r1, fp
   12414:	f854 0b04 	ldr.w	r0, [r4], #4
   12418:	e713      	b.n	12242 <z_vprintk+0x62>
				out((int)'%', ctx);
   1241a:	4659      	mov	r1, fp
   1241c:	e711      	b.n	12242 <z_vprintk+0x62>
				length_mod = 0;
   1241e:	464e      	mov	r6, r9
				padding = PAD_NONE;
   12420:	464f      	mov	r7, r9
				min_width = -1;
   12422:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
   12426:	f04f 0901 	mov.w	r9, #1
   1242a:	e6f0      	b.n	1220e <z_vprintk+0x2e>
			switch (*fmt) {
   1242c:	2703      	movs	r7, #3
   1242e:	e6ee      	b.n	1220e <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   12430:	2701      	movs	r7, #1
   12432:	e6ec      	b.n	1220e <z_vprintk+0x2e>
					length_mod = 'L';
   12434:	264c      	movs	r6, #76	; 0x4c
   12436:	e6ea      	b.n	1220e <z_vprintk+0x2e>
			might_format = 0;
   12438:	4681      	mov	r9, r0
   1243a:	e6e8      	b.n	1220e <z_vprintk+0x2e>

0001243c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1243c:	b507      	push	{r0, r1, r2, lr}
   1243e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12440:	2100      	movs	r1, #0
{
   12442:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   12444:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   12446:	4803      	ldr	r0, [pc, #12]	; (12454 <vprintk+0x18>)
   12448:	a901      	add	r1, sp, #4
   1244a:	f7ff fec9 	bl	121e0 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1244e:	b003      	add	sp, #12
   12450:	f85d fb04 	ldr.w	pc, [sp], #4
   12454:	000121c5 	.word	0x000121c5

00012458 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12458:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   1245a:	2500      	movs	r5, #0
{
   1245c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   1245e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   12462:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   12464:	a901      	add	r1, sp, #4
   12466:	4805      	ldr	r0, [pc, #20]	; (1247c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   12468:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   1246a:	f7ff feb9 	bl	121e0 <z_vprintk>

	if (ctx.count < ctx.max) {
   1246e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   12472:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12474:	bfb8      	it	lt
   12476:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12478:	b005      	add	sp, #20
   1247a:	bd30      	pop	{r4, r5, pc}
   1247c:	0002bfd9 	.word	0x0002bfd9

00012480 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12484:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12488:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   1248c:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1248e:	f019 0f08 	tst.w	r9, #8
{
   12492:	4604      	mov	r4, r0
   12494:	9201      	str	r2, [sp, #4]
	if (processing) {
   12496:	d024      	beq.n	124e2 <process_event+0x62>
		if (evt == EVT_COMPLETE) {
   12498:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1249a:	bf0c      	ite	eq
   1249c:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   124a0:	f049 0920 	orrne.w	r9, r9, #32
   124a4:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   124a8:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   124aa:	4620      	mov	r0, r4
   124ac:	f012 fa1e 	bl	248ec <z_spin_unlock_valid>
   124b0:	b968      	cbnz	r0, 124ce <process_event+0x4e>
   124b2:	2384      	movs	r3, #132	; 0x84
   124b4:	4aa2      	ldr	r2, [pc, #648]	; (12740 <process_event+0x2c0>)
   124b6:	49a3      	ldr	r1, [pc, #652]	; (12744 <process_event+0x2c4>)
   124b8:	48a3      	ldr	r0, [pc, #652]	; (12748 <process_event+0x2c8>)
   124ba:	f019 fda0 	bl	2bffe <printk>
   124be:	4621      	mov	r1, r4
   124c0:	48a2      	ldr	r0, [pc, #648]	; (1274c <process_event+0x2cc>)
   124c2:	f019 fd9c 	bl	2bffe <printk>
   124c6:	2184      	movs	r1, #132	; 0x84
   124c8:	489d      	ldr	r0, [pc, #628]	; (12740 <process_event+0x2c0>)
   124ca:	f019 ffb5 	bl	2c438 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   124ce:	9b01      	ldr	r3, [sp, #4]
   124d0:	f383 8811 	msr	BASEPRI, r3
   124d4:	f3bf 8f6f 	isb	sy
}
   124d8:	b003      	add	sp, #12
   124da:	ecbd 8b02 	vpop	{d8}
   124de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   124e2:	4f9b      	ldr	r7, [pc, #620]	; (12750 <process_event+0x2d0>)
   124e4:	f8df 8260 	ldr.w	r8, [pc, #608]	; 12748 <process_event+0x2c8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   124e8:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   124ec:	2902      	cmp	r1, #2
   124ee:	d106      	bne.n	124fe <process_event+0x7e>
			evt = process_recheck(mgr);
   124f0:	4620      	mov	r0, r4
   124f2:	f019 fd9e 	bl	2c032 <process_recheck>
		if (evt == EVT_NOP) {
   124f6:	2800      	cmp	r0, #0
   124f8:	d0d6      	beq.n	124a8 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   124fa:	2801      	cmp	r0, #1
   124fc:	d16a      	bne.n	125d4 <process_event+0x154>
			res = mgr->last_res;
   124fe:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12502:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   12504:	f1bb 0f00 	cmp.w	fp, #0
   12508:	da1c      	bge.n	12544 <process_event+0xc4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1250a:	2600      	movs	r6, #0
		*clients = mgr->clients;
   1250c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1250e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   12512:	e9c4 6600 	strd	r6, r6, [r4]
   12516:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1251a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   1251c:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1251e:	8ba3      	ldrh	r3, [r4, #28]
   12520:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12524:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12526:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   1252a:	d003      	beq.n	12534 <process_event+0xb4>
		if (do_monitors
   1252c:	68a2      	ldr	r2, [r4, #8]
   1252e:	2a00      	cmp	r2, #0
   12530:	f040 811e 	bne.w	12770 <process_event+0x2f0>
		    || !sys_slist_is_empty(&clients)
   12534:	b91d      	cbnz	r5, 1253e <process_event+0xbe>
		    || (transit != NULL)) {
   12536:	9a00      	ldr	r2, [sp, #0]
   12538:	2a00      	cmp	r2, #0
   1253a:	f000 8164 	beq.w	12806 <process_event+0x386>
   1253e:	f04f 0900 	mov.w	r9, #0
   12542:	e117      	b.n	12774 <process_event+0x2f4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12544:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12548:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1254a:	2901      	cmp	r1, #1
   1254c:	d823      	bhi.n	12596 <process_event+0x116>
	list->head = NULL;
   1254e:	2100      	movs	r1, #0
   12550:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   12554:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   12556:	6825      	ldr	r5, [r4, #0]
   12558:	b29b      	uxth	r3, r3
	list->tail = NULL;
   1255a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1255e:	d10c      	bne.n	1257a <process_event+0xfa>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12560:	428d      	cmp	r5, r1
   12562:	462a      	mov	r2, r5
   12564:	bf38      	it	cc
   12566:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12568:	b12a      	cbz	r2, 12576 <process_event+0xf6>
				mgr->refs += 1U;
   1256a:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1256c:	6812      	ldr	r2, [r2, #0]
   1256e:	3101      	adds	r1, #1
   12570:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12572:	2a00      	cmp	r2, #0
   12574:	d1f8      	bne.n	12568 <process_event+0xe8>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12576:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   1257a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1257c:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1257e:	f019 fd58 	bl	2c032 <process_recheck>
   12582:	2800      	cmp	r0, #0
   12584:	f000 80d7 	beq.w	12736 <process_event+0x2b6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12588:	8ba3      	ldrh	r3, [r4, #28]
   1258a:	f043 0320 	orr.w	r3, r3, #32
   1258e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   12590:	2300      	movs	r3, #0
   12592:	9300      	str	r3, [sp, #0]
   12594:	e7c3      	b.n	1251e <process_event+0x9e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12596:	2a04      	cmp	r2, #4
   12598:	d10f      	bne.n	125ba <process_event+0x13a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1259a:	f023 0307 	bic.w	r3, r3, #7
   1259e:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   125a0:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   125a2:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   125a4:	f019 fd45 	bl	2c032 <process_recheck>
   125a8:	2800      	cmp	r0, #0
   125aa:	f000 80c6 	beq.w	1273a <process_event+0x2ba>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   125ae:	f042 0220 	orr.w	r2, r2, #32
   125b2:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   125b4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   125b6:	9500      	str	r5, [sp, #0]
   125b8:	e7b1      	b.n	1251e <process_event+0x9e>
		__ASSERT_NO_MSG(false);
   125ba:	4640      	mov	r0, r8
   125bc:	f240 1319 	movw	r3, #281	; 0x119
   125c0:	463a      	mov	r2, r7
   125c2:	4964      	ldr	r1, [pc, #400]	; (12754 <process_event+0x2d4>)
   125c4:	f019 fd1b 	bl	2bffe <printk>
   125c8:	f240 1119 	movw	r1, #281	; 0x119
   125cc:	4638      	mov	r0, r7
   125ce:	f019 ff33 	bl	2c438 <assert_post_action>
   125d2:	e7ef      	b.n	125b4 <process_event+0x134>
		} else if (evt == EVT_START) {
   125d4:	2803      	cmp	r0, #3
   125d6:	d135      	bne.n	12644 <process_event+0x1c4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   125d8:	f1b9 0f00 	cmp.w	r9, #0
   125dc:	d00b      	beq.n	125f6 <process_event+0x176>
   125de:	4640      	mov	r0, r8
   125e0:	495d      	ldr	r1, [pc, #372]	; (12758 <process_event+0x2d8>)
   125e2:	f44f 73aa 	mov.w	r3, #340	; 0x154
   125e6:	463a      	mov	r2, r7
   125e8:	f019 fd09 	bl	2bffe <printk>
   125ec:	f44f 71aa 	mov.w	r1, #340	; 0x154
   125f0:	4638      	mov	r0, r7
   125f2:	f019 ff21 	bl	2c438 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   125f6:	6823      	ldr	r3, [r4, #0]
   125f8:	b95b      	cbnz	r3, 12612 <process_event+0x192>
   125fa:	4640      	mov	r0, r8
   125fc:	4957      	ldr	r1, [pc, #348]	; (1275c <process_event+0x2dc>)
   125fe:	f240 1355 	movw	r3, #341	; 0x155
   12602:	463a      	mov	r2, r7
   12604:	f019 fcfb 	bl	2bffe <printk>
   12608:	f240 1155 	movw	r1, #341	; 0x155
   1260c:	4638      	mov	r0, r7
   1260e:	f019 ff13 	bl	2c438 <assert_post_action>
			transit = mgr->transitions->start;
   12612:	6923      	ldr	r3, [r4, #16]
   12614:	681b      	ldr	r3, [r3, #0]
   12616:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12618:	b95b      	cbnz	r3, 12632 <process_event+0x1b2>
   1261a:	4640      	mov	r0, r8
   1261c:	4950      	ldr	r1, [pc, #320]	; (12760 <process_event+0x2e0>)
   1261e:	f44f 73ac 	mov.w	r3, #344	; 0x158
   12622:	463a      	mov	r2, r7
   12624:	f019 fceb 	bl	2bffe <printk>
   12628:	f44f 71ac 	mov.w	r1, #344	; 0x158
   1262c:	4638      	mov	r0, r7
   1262e:	f019 ff03 	bl	2c438 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12632:	8ba3      	ldrh	r3, [r4, #28]
   12634:	f023 0307 	bic.w	r3, r3, #7
   12638:	f043 0306 	orr.w	r3, r3, #6
}
   1263c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   1263e:	83a3      	strh	r3, [r4, #28]
		res = 0;
   12640:	46ab      	mov	fp, r5
}
   12642:	e76c      	b.n	1251e <process_event+0x9e>
		} else if (evt == EVT_STOP) {
   12644:	2804      	cmp	r0, #4
   12646:	d132      	bne.n	126ae <process_event+0x22e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12648:	f1b9 0f02 	cmp.w	r9, #2
   1264c:	d00b      	beq.n	12666 <process_event+0x1e6>
   1264e:	4640      	mov	r0, r8
   12650:	4944      	ldr	r1, [pc, #272]	; (12764 <process_event+0x2e4>)
   12652:	f240 135b 	movw	r3, #347	; 0x15b
   12656:	463a      	mov	r2, r7
   12658:	f019 fcd1 	bl	2bffe <printk>
   1265c:	f240 115b 	movw	r1, #347	; 0x15b
   12660:	4638      	mov	r0, r7
   12662:	f019 fee9 	bl	2c438 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   12666:	8be3      	ldrh	r3, [r4, #30]
   12668:	b15b      	cbz	r3, 12682 <process_event+0x202>
   1266a:	4640      	mov	r0, r8
   1266c:	493e      	ldr	r1, [pc, #248]	; (12768 <process_event+0x2e8>)
   1266e:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   12672:	463a      	mov	r2, r7
   12674:	f019 fcc3 	bl	2bffe <printk>
   12678:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   1267c:	4638      	mov	r0, r7
   1267e:	f019 fedb 	bl	2c438 <assert_post_action>
			transit = mgr->transitions->stop;
   12682:	6923      	ldr	r3, [r4, #16]
   12684:	685b      	ldr	r3, [r3, #4]
   12686:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12688:	b95b      	cbnz	r3, 126a2 <process_event+0x222>
   1268a:	4640      	mov	r0, r8
   1268c:	4934      	ldr	r1, [pc, #208]	; (12760 <process_event+0x2e0>)
   1268e:	f240 135f 	movw	r3, #351	; 0x15f
   12692:	463a      	mov	r2, r7
   12694:	f019 fcb3 	bl	2bffe <printk>
   12698:	f240 115f 	movw	r1, #351	; 0x15f
   1269c:	4638      	mov	r0, r7
   1269e:	f019 fecb 	bl	2c438 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126a2:	8ba3      	ldrh	r3, [r4, #28]
   126a4:	f023 0307 	bic.w	r3, r3, #7
   126a8:	f043 0304 	orr.w	r3, r3, #4
   126ac:	e7c6      	b.n	1263c <process_event+0x1bc>
		} else if (evt == EVT_RESET) {
   126ae:	2805      	cmp	r0, #5
   126b0:	d132      	bne.n	12718 <process_event+0x298>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   126b2:	f1b9 0f01 	cmp.w	r9, #1
   126b6:	d00b      	beq.n	126d0 <process_event+0x250>
   126b8:	4640      	mov	r0, r8
   126ba:	492c      	ldr	r1, [pc, #176]	; (1276c <process_event+0x2ec>)
   126bc:	f44f 73b1 	mov.w	r3, #354	; 0x162
   126c0:	463a      	mov	r2, r7
   126c2:	f019 fc9c 	bl	2bffe <printk>
   126c6:	f44f 71b1 	mov.w	r1, #354	; 0x162
   126ca:	4638      	mov	r0, r7
   126cc:	f019 feb4 	bl	2c438 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   126d0:	6823      	ldr	r3, [r4, #0]
   126d2:	b95b      	cbnz	r3, 126ec <process_event+0x26c>
   126d4:	4640      	mov	r0, r8
   126d6:	4921      	ldr	r1, [pc, #132]	; (1275c <process_event+0x2dc>)
   126d8:	f240 1363 	movw	r3, #355	; 0x163
   126dc:	463a      	mov	r2, r7
   126de:	f019 fc8e 	bl	2bffe <printk>
   126e2:	f240 1163 	movw	r1, #355	; 0x163
   126e6:	4638      	mov	r0, r7
   126e8:	f019 fea6 	bl	2c438 <assert_post_action>
			transit = mgr->transitions->reset;
   126ec:	6923      	ldr	r3, [r4, #16]
   126ee:	689b      	ldr	r3, [r3, #8]
   126f0:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   126f2:	b95b      	cbnz	r3, 1270c <process_event+0x28c>
   126f4:	4640      	mov	r0, r8
   126f6:	491a      	ldr	r1, [pc, #104]	; (12760 <process_event+0x2e0>)
   126f8:	f44f 73b3 	mov.w	r3, #358	; 0x166
   126fc:	463a      	mov	r2, r7
   126fe:	f019 fc7e 	bl	2bffe <printk>
   12702:	f44f 71b3 	mov.w	r1, #358	; 0x166
   12706:	4638      	mov	r0, r7
   12708:	f019 fe96 	bl	2c438 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1270c:	8ba3      	ldrh	r3, [r4, #28]
   1270e:	f023 0307 	bic.w	r3, r3, #7
   12712:	f043 0305 	orr.w	r3, r3, #5
   12716:	e791      	b.n	1263c <process_event+0x1bc>
			__ASSERT_NO_MSG(false);
   12718:	2500      	movs	r5, #0
   1271a:	f240 1369 	movw	r3, #361	; 0x169
   1271e:	463a      	mov	r2, r7
   12720:	4640      	mov	r0, r8
   12722:	490c      	ldr	r1, [pc, #48]	; (12754 <process_event+0x2d4>)
   12724:	f019 fc6b 	bl	2bffe <printk>
   12728:	f240 1169 	movw	r1, #361	; 0x169
   1272c:	4638      	mov	r0, r7
   1272e:	f019 fe83 	bl	2c438 <assert_post_action>
		onoff_transition_fn transit = NULL;
   12732:	9500      	str	r5, [sp, #0]
   12734:	e784      	b.n	12640 <process_event+0x1c0>
   12736:	9000      	str	r0, [sp, #0]
   12738:	e6f1      	b.n	1251e <process_event+0x9e>
   1273a:	4605      	mov	r5, r0
   1273c:	e73b      	b.n	125b6 <process_event+0x136>
   1273e:	bf00      	nop
   12740:	0002ffdd 	.word	0x0002ffdd
   12744:	00030003 	.word	0x00030003
   12748:	0002ff0d 	.word	0x0002ff0d
   1274c:	0003001a 	.word	0x0003001a
   12750:	0002ff3b 	.word	0x0002ff3b
   12754:	00032a36 	.word	0x00032a36
   12758:	0002ff5d 	.word	0x0002ff5d
   1275c:	0002ff68 	.word	0x0002ff68
   12760:	0002ff8b 	.word	0x0002ff8b
   12764:	0002ffa2 	.word	0x0002ffa2
   12768:	0002ffb8 	.word	0x0002ffb8
   1276c:	0002ffc7 	.word	0x0002ffc7
				   && !sys_slist_is_empty(&mgr->monitors);
   12770:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12774:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   12778:	f104 0a14 	add.w	sl, r4, #20
   1277c:	4650      	mov	r0, sl
			mgr->flags = flags;
   1277e:	83a3      	strh	r3, [r4, #28]
   12780:	f012 f8b4 	bl	248ec <z_spin_unlock_valid>
   12784:	b968      	cbnz	r0, 127a2 <process_event+0x322>
   12786:	2384      	movs	r3, #132	; 0x84
   12788:	4640      	mov	r0, r8
   1278a:	4a3a      	ldr	r2, [pc, #232]	; (12874 <process_event+0x3f4>)
   1278c:	493a      	ldr	r1, [pc, #232]	; (12878 <process_event+0x3f8>)
   1278e:	f019 fc36 	bl	2bffe <printk>
   12792:	4651      	mov	r1, sl
   12794:	4839      	ldr	r0, [pc, #228]	; (1287c <process_event+0x3fc>)
   12796:	f019 fc32 	bl	2bffe <printk>
   1279a:	2184      	movs	r1, #132	; 0x84
   1279c:	4835      	ldr	r0, [pc, #212]	; (12874 <process_event+0x3f4>)
   1279e:	f019 fe4b 	bl	2c438 <assert_post_action>
   127a2:	9b01      	ldr	r3, [sp, #4]
   127a4:	f383 8811 	msr	BASEPRI, r3
   127a8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   127ac:	f1b9 0f00 	cmp.w	r9, #0
   127b0:	d138      	bne.n	12824 <process_event+0x3a4>
	while (!sys_slist_is_empty(list)) {
   127b2:	2d00      	cmp	r5, #0
   127b4:	d14c      	bne.n	12850 <process_event+0x3d0>
			if (transit != NULL) {
   127b6:	9b00      	ldr	r3, [sp, #0]
   127b8:	b113      	cbz	r3, 127c0 <process_event+0x340>
				transit(mgr, transition_complete);
   127ba:	4620      	mov	r0, r4
   127bc:	4930      	ldr	r1, [pc, #192]	; (12880 <process_event+0x400>)
   127be:	4798      	blx	r3
	__asm__ volatile(
   127c0:	f04f 0320 	mov.w	r3, #32
   127c4:	f3ef 8b11 	mrs	fp, BASEPRI
   127c8:	f383 8811 	msr	BASEPRI, r3
   127cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   127d0:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   127d2:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   127d6:	f012 f87b 	bl	248d0 <z_spin_lock_valid>
   127da:	b968      	cbnz	r0, 127f8 <process_event+0x378>
   127dc:	235c      	movs	r3, #92	; 0x5c
   127de:	4640      	mov	r0, r8
   127e0:	4a24      	ldr	r2, [pc, #144]	; (12874 <process_event+0x3f4>)
   127e2:	4928      	ldr	r1, [pc, #160]	; (12884 <process_event+0x404>)
   127e4:	f019 fc0b 	bl	2bffe <printk>
   127e8:	4651      	mov	r1, sl
   127ea:	4827      	ldr	r0, [pc, #156]	; (12888 <process_event+0x408>)
   127ec:	f019 fc07 	bl	2bffe <printk>
   127f0:	215c      	movs	r1, #92	; 0x5c
   127f2:	4820      	ldr	r0, [pc, #128]	; (12874 <process_event+0x3f4>)
   127f4:	f019 fe20 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   127f8:	4650      	mov	r0, sl
   127fa:	f012 f887 	bl	2490c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   127fe:	8ba3      	ldrh	r3, [r4, #28]
   12800:	f023 0308 	bic.w	r3, r3, #8
   12804:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12806:	8ba3      	ldrh	r3, [r4, #28]
   12808:	06da      	lsls	r2, r3, #27
   1280a:	d52a      	bpl.n	12862 <process_event+0x3e2>
			evt = EVT_COMPLETE;
   1280c:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1280e:	f023 0310 	bic.w	r3, r3, #16
   12812:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   12814:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   12818:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1281c:	2900      	cmp	r1, #0
   1281e:	f47f ae65 	bne.w	124ec <process_event+0x6c>
out:
   12822:	e641      	b.n	124a8 <process_event+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12824:	68a1      	ldr	r1, [r4, #8]
   12826:	2900      	cmp	r1, #0
   12828:	d0c3      	beq.n	127b2 <process_event+0x332>
	return node->next;
   1282a:	680b      	ldr	r3, [r1, #0]
   1282c:	2b00      	cmp	r3, #0
   1282e:	bf38      	it	cc
   12830:	2300      	movcc	r3, #0
   12832:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   12834:	684b      	ldr	r3, [r1, #4]
   12836:	ee18 2a10 	vmov	r2, s16
   1283a:	461e      	mov	r6, r3
   1283c:	4620      	mov	r0, r4
   1283e:	465b      	mov	r3, fp
   12840:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12842:	f1b9 0f00 	cmp.w	r9, #0
   12846:	d0b4      	beq.n	127b2 <process_event+0x332>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12848:	4649      	mov	r1, r9
   1284a:	f8d9 3000 	ldr.w	r3, [r9]
   1284e:	e7ed      	b.n	1282c <process_event+0x3ac>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12850:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   12852:	465b      	mov	r3, fp
   12854:	ee18 2a10 	vmov	r2, s16
   12858:	4620      	mov	r0, r4
   1285a:	682d      	ldr	r5, [r5, #0]
   1285c:	f019 fc05 	bl	2c06a <notify_one>
   12860:	e7a7      	b.n	127b2 <process_event+0x332>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12862:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12866:	bf1e      	ittt	ne
   12868:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1286c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1286e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   12870:	e7d0      	b.n	12814 <process_event+0x394>
   12872:	bf00      	nop
   12874:	0002ffdd 	.word	0x0002ffdd
   12878:	00030003 	.word	0x00030003
   1287c:	0003001a 	.word	0x0003001a
   12880:	0001288d 	.word	0x0001288d
   12884:	0003002f 	.word	0x0003002f
   12888:	00030044 	.word	0x00030044

0001288c <transition_complete>:
{
   1288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1288e:	4604      	mov	r4, r0
   12890:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12892:	f100 0614 	add.w	r6, r0, #20
   12896:	f04f 0320 	mov.w	r3, #32
   1289a:	f3ef 8711 	mrs	r7, BASEPRI
   1289e:	f383 8811 	msr	BASEPRI, r3
   128a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   128a6:	4630      	mov	r0, r6
   128a8:	f012 f812 	bl	248d0 <z_spin_lock_valid>
   128ac:	b968      	cbnz	r0, 128ca <transition_complete+0x3e>
   128ae:	235c      	movs	r3, #92	; 0x5c
   128b0:	4a0b      	ldr	r2, [pc, #44]	; (128e0 <transition_complete+0x54>)
   128b2:	490c      	ldr	r1, [pc, #48]	; (128e4 <transition_complete+0x58>)
   128b4:	480c      	ldr	r0, [pc, #48]	; (128e8 <transition_complete+0x5c>)
   128b6:	f019 fba2 	bl	2bffe <printk>
   128ba:	4631      	mov	r1, r6
   128bc:	480b      	ldr	r0, [pc, #44]	; (128ec <transition_complete+0x60>)
   128be:	f019 fb9e 	bl	2bffe <printk>
   128c2:	215c      	movs	r1, #92	; 0x5c
   128c4:	4806      	ldr	r0, [pc, #24]	; (128e0 <transition_complete+0x54>)
   128c6:	f019 fdb7 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   128ca:	4630      	mov	r0, r6
   128cc:	f012 f81e 	bl	2490c <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   128d0:	463a      	mov	r2, r7
   128d2:	4620      	mov	r0, r4
	mgr->last_res = res;
   128d4:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   128d6:	2101      	movs	r1, #1
}
   128d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   128dc:	f7ff bdd0 	b.w	12480 <process_event>
   128e0:	0002ffdd 	.word	0x0002ffdd
   128e4:	0003002f 	.word	0x0003002f
   128e8:	0002ff0d 	.word	0x0002ff0d
   128ec:	00030044 	.word	0x00030044

000128f0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   128f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   128f4:	4604      	mov	r4, r0
   128f6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   128f8:	f019 fbcd 	bl	2c096 <validate_args>

	if (rv < 0) {
   128fc:	1e05      	subs	r5, r0, #0
   128fe:	db5e      	blt.n	129be <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12900:	f104 0914 	add.w	r9, r4, #20
   12904:	f04f 0320 	mov.w	r3, #32
   12908:	f3ef 8a11 	mrs	sl, BASEPRI
   1290c:	f383 8811 	msr	BASEPRI, r3
   12910:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12914:	4648      	mov	r0, r9
   12916:	f011 ffdb 	bl	248d0 <z_spin_lock_valid>
   1291a:	b968      	cbnz	r0, 12938 <onoff_request+0x48>
   1291c:	235c      	movs	r3, #92	; 0x5c
   1291e:	4a38      	ldr	r2, [pc, #224]	; (12a00 <onoff_request+0x110>)
   12920:	4938      	ldr	r1, [pc, #224]	; (12a04 <onoff_request+0x114>)
   12922:	4839      	ldr	r0, [pc, #228]	; (12a08 <onoff_request+0x118>)
   12924:	f019 fb6b 	bl	2bffe <printk>
   12928:	4649      	mov	r1, r9
   1292a:	4838      	ldr	r0, [pc, #224]	; (12a0c <onoff_request+0x11c>)
   1292c:	f019 fb67 	bl	2bffe <printk>
   12930:	215c      	movs	r1, #92	; 0x5c
   12932:	4833      	ldr	r0, [pc, #204]	; (12a00 <onoff_request+0x110>)
   12934:	f019 fd80 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   12938:	4648      	mov	r0, r9
   1293a:	f011 ffe7 	bl	2490c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1293e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12942:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12944:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   12946:	428b      	cmp	r3, r1
   12948:	f002 0607 	and.w	r6, r2, #7
   1294c:	d050      	beq.n	129f0 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1294e:	2e02      	cmp	r6, #2
   12950:	d124      	bne.n	1299c <onoff_request+0xac>
	rv = state;
   12952:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   12954:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   12958:	3301      	adds	r3, #1
   1295a:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1295c:	4648      	mov	r0, r9
   1295e:	f011 ffc5 	bl	248ec <z_spin_unlock_valid>
   12962:	b968      	cbnz	r0, 12980 <onoff_request+0x90>
   12964:	2384      	movs	r3, #132	; 0x84
   12966:	4a26      	ldr	r2, [pc, #152]	; (12a00 <onoff_request+0x110>)
   12968:	4929      	ldr	r1, [pc, #164]	; (12a10 <onoff_request+0x120>)
   1296a:	4827      	ldr	r0, [pc, #156]	; (12a08 <onoff_request+0x118>)
   1296c:	f019 fb47 	bl	2bffe <printk>
   12970:	4649      	mov	r1, r9
   12972:	4828      	ldr	r0, [pc, #160]	; (12a14 <onoff_request+0x124>)
   12974:	f019 fb43 	bl	2bffe <printk>
   12978:	2184      	movs	r1, #132	; 0x84
   1297a:	4821      	ldr	r0, [pc, #132]	; (12a00 <onoff_request+0x110>)
   1297c:	f019 fd5c 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   12980:	f38a 8811 	msr	BASEPRI, sl
   12984:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   12988:	f1b8 0f00 	cmp.w	r8, #0
   1298c:	d017      	beq.n	129be <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   1298e:	2300      	movs	r3, #0
   12990:	4632      	mov	r2, r6
   12992:	4639      	mov	r1, r7
   12994:	4620      	mov	r0, r4
   12996:	f019 fb68 	bl	2c06a <notify_one>
   1299a:	e010      	b.n	129be <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   1299c:	0793      	lsls	r3, r2, #30
   1299e:	d001      	beq.n	129a4 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   129a0:	2e06      	cmp	r6, #6
   129a2:	d10f      	bne.n	129c4 <onoff_request+0xd4>
	parent->next = child;
   129a4:	2300      	movs	r3, #0
   129a6:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   129a8:	6863      	ldr	r3, [r4, #4]
   129aa:	b9f3      	cbnz	r3, 129ea <onoff_request+0xfa>
	list->head = node;
   129ac:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   129b0:	4635      	mov	r5, r6
   129b2:	b9fe      	cbnz	r6, 129f4 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   129b4:	4652      	mov	r2, sl
   129b6:	2102      	movs	r1, #2
   129b8:	4620      	mov	r0, r4
   129ba:	f7ff fd61 	bl	12480 <process_event>
		}
	}

	return rv;
}
   129be:	4628      	mov	r0, r5
   129c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   129c4:	2e05      	cmp	r6, #5
   129c6:	d018      	beq.n	129fa <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   129c8:	2e01      	cmp	r6, #1
   129ca:	d00b      	beq.n	129e4 <onoff_request+0xf4>
   129cc:	4912      	ldr	r1, [pc, #72]	; (12a18 <onoff_request+0x128>)
   129ce:	480e      	ldr	r0, [pc, #56]	; (12a08 <onoff_request+0x118>)
   129d0:	f240 13c5 	movw	r3, #453	; 0x1c5
   129d4:	4a11      	ldr	r2, [pc, #68]	; (12a1c <onoff_request+0x12c>)
   129d6:	f019 fb12 	bl	2bffe <printk>
   129da:	f240 11c5 	movw	r1, #453	; 0x1c5
   129de:	480f      	ldr	r0, [pc, #60]	; (12a1c <onoff_request+0x12c>)
   129e0:	f019 fd2a 	bl	2c438 <assert_post_action>
		rv = -EIO;
   129e4:	f06f 0504 	mvn.w	r5, #4
   129e8:	e004      	b.n	129f4 <onoff_request+0x104>
	parent->next = child;
   129ea:	601f      	str	r7, [r3, #0]
	list->tail = node;
   129ec:	6067      	str	r7, [r4, #4]
}
   129ee:	e7df      	b.n	129b0 <onoff_request+0xc0>
		rv = -EAGAIN;
   129f0:	f06f 050a 	mvn.w	r5, #10
   129f4:	f04f 0800 	mov.w	r8, #0
   129f8:	e7b0      	b.n	1295c <onoff_request+0x6c>
		rv = -ENOTSUP;
   129fa:	f06f 0585 	mvn.w	r5, #133	; 0x85
   129fe:	e7f9      	b.n	129f4 <onoff_request+0x104>
   12a00:	0002ffdd 	.word	0x0002ffdd
   12a04:	0003002f 	.word	0x0003002f
   12a08:	0002ff0d 	.word	0x0002ff0d
   12a0c:	00030044 	.word	0x00030044
   12a10:	00030003 	.word	0x00030003
   12a14:	0003001a 	.word	0x0003001a
   12a18:	0002ffc7 	.word	0x0002ffc7
   12a1c:	0002ff3b 	.word	0x0002ff3b

00012a20 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   12a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
   12a24:	f240 746c 	movw	r4, #1900	; 0x76c
   12a28:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
   12a2a:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   12a2c:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   12a2e:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   12a32:	1e53      	subs	r3, r2, #1
   12a34:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   12a36:	6943      	ldr	r3, [r0, #20]
{
   12a38:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   12a3a:	18e4      	adds	r4, r4, r3
   12a3c:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   12a40:	f1b9 0f02 	cmp.w	r9, #2
   12a44:	bf8c      	ite	hi
   12a46:	2300      	movhi	r3, #0
   12a48:	2301      	movls	r3, #1
   12a4a:	1ae4      	subs	r4, r4, r3
   12a4c:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   12a50:	2c00      	cmp	r4, #0
   12a52:	f175 0300 	sbcs.w	r3, r5, #0
   12a56:	da54      	bge.n	12b02 <timeutil_timegm64+0xe2>
   12a58:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   12a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   12a60:	2300      	movs	r3, #0
   12a62:	1820      	adds	r0, r4, r0
   12a64:	f145 31ff 	adc.w	r1, r5, #4294967295
   12a68:	f7f9 fea6 	bl	c7b8 <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12a6c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   12a70:	4a27      	ldr	r2, [pc, #156]	; (12b10 <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   12a72:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
   12a74:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12a78:	e9d8 0400 	ldrd	r0, r4, [r8]
   12a7c:	f8d8 8008 	ldr.w	r8, [r8, #8]
   12a80:	17e5      	asrs	r5, r4, #31
   12a82:	fbcc 4508 	smlal	r4, r5, ip, r8
   12a86:	fba4 ab0c 	umull	sl, fp, r4, ip
   12a8a:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12a8e:	f1b9 0f02 	cmp.w	r9, #2
   12a92:	bf8c      	ite	hi
   12a94:	f06f 0e02 	mvnhi.w	lr, #2
   12a98:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12a9c:	eb1a 0a00 	adds.w	sl, sl, r0
   12aa0:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12aa4:	f240 106d 	movw	r0, #365	; 0x16d
   12aa8:	0894      	lsrs	r4, r2, #2
   12aaa:	fb00 4002 	mla	r0, r0, r2, r4
   12aae:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12ab0:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12ab2:	4420      	add	r0, r4
   12ab4:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12ab6:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12aba:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12abe:	2205      	movs	r2, #5
   12ac0:	fb0e fe09 	mul.w	lr, lr, r9
   12ac4:	f10e 0e02 	add.w	lr, lr, #2
   12ac8:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12acc:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
   12ace:	4811      	ldr	r0, [pc, #68]	; (12b14 <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12ad0:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   12ad2:	fba3 2300 	umull	r2, r3, r3, r0
   12ad6:	fb00 3301 	mla	r3, r0, r1, r3
   12ada:	490f      	ldr	r1, [pc, #60]	; (12b18 <timeutil_timegm64+0xf8>)
   12adc:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
   12ade:	490f      	ldr	r1, [pc, #60]	; (12b1c <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   12ae0:	f143 37ff 	adc.w	r7, r3, #4294967295
   12ae4:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   12ae8:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   12aec:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   12af0:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
   12af4:	eb12 000a 	adds.w	r0, r2, sl
   12af8:	eb43 010b 	adc.w	r1, r3, fp
   12afc:	b003      	add	sp, #12
   12afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   12b02:	f44f 72c8 	mov.w	r2, #400	; 0x190
   12b06:	2300      	movs	r3, #0
   12b08:	4620      	mov	r0, r4
   12b0a:	4629      	mov	r1, r5
   12b0c:	e7ac      	b.n	12a68 <timeutil_timegm64+0x48>
   12b0e:	bf00      	nop
   12b10:	fffffe70 	.word	0xfffffe70
   12b14:	00023ab1 	.word	0x00023ab1
   12b18:	fff50594 	.word	0xfff50594
   12b1c:	00015180 	.word	0x00015180

00012b20 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   12b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12b24:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
   12b26:	4e17      	ldr	r6, [pc, #92]	; (12b84 <z_work_q_main+0x64>)
   12b28:	f8df 8060 	ldr.w	r8, [pc, #96]	; 12b8c <z_work_q_main+0x6c>
   12b2c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 12b90 <z_work_q_main+0x70>
	return z_impl_k_queue_get(queue, timeout);
   12b30:	f04f 32ff 	mov.w	r2, #4294967295
   12b34:	f04f 33ff 	mov.w	r3, #4294967295
   12b38:	4628      	mov	r0, r5
   12b3a:	f010 fa89 	bl	23050 <z_impl_k_queue_get>
		if (work == NULL) {
   12b3e:	4604      	mov	r4, r0
   12b40:	2800      	cmp	r0, #0
   12b42:	d0f5      	beq.n	12b30 <z_work_q_main+0x10>
		handler = work->handler;
   12b44:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
   12b46:	b967      	cbnz	r7, 12b62 <z_work_q_main+0x42>
   12b48:	4641      	mov	r1, r8
   12b4a:	231c      	movs	r3, #28
   12b4c:	4632      	mov	r2, r6
   12b4e:	4648      	mov	r0, r9
   12b50:	f019 fa55 	bl	2bffe <printk>
   12b54:	480c      	ldr	r0, [pc, #48]	; (12b88 <z_work_q_main+0x68>)
   12b56:	f019 fa52 	bl	2bffe <printk>
   12b5a:	211c      	movs	r1, #28
   12b5c:	4630      	mov	r0, r6
   12b5e:	f019 fc6b 	bl	2c438 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12b62:	f104 0308 	add.w	r3, r4, #8
   12b66:	e8d3 2fef 	ldaex	r2, [r3]
   12b6a:	f022 0101 	bic.w	r1, r2, #1
   12b6e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12b72:	2800      	cmp	r0, #0
   12b74:	d1f7      	bne.n	12b66 <z_work_q_main+0x46>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   12b76:	07d3      	lsls	r3, r2, #31
   12b78:	d501      	bpl.n	12b7e <z_work_q_main+0x5e>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   12b7a:	4620      	mov	r0, r4
   12b7c:	47b8      	blx	r7
	z_impl_k_yield();
   12b7e:	f011 fb03 	bl	24188 <z_impl_k_yield>
   12b82:	e7d5      	b.n	12b30 <z_work_q_main+0x10>
   12b84:	0003005c 	.word	0x0003005c
   12b88:	00030096 	.word	0x00030096
   12b8c:	0003007f 	.word	0x0003007f
   12b90:	0002ff0d 	.word	0x0002ff0d

00012b94 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   12b96:	460e      	mov	r6, r1
   12b98:	2900      	cmp	r1, #0
   12b9a:	f000 8083 	beq.w	12ca4 <sys_heap_free+0x110>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   12b9e:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12ba0:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   12ba2:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12ba4:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   12ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12baa:	bf2c      	ite	cs
   12bac:	2408      	movcs	r4, #8
   12bae:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12bb0:	1b0c      	subs	r4, r1, r4
   12bb2:	1b64      	subs	r4, r4, r5
   12bb4:	bf48      	it	mi
   12bb6:	3407      	addmi	r4, #7
   12bb8:	10e4      	asrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12bba:	4621      	mov	r1, r4
   12bbc:	f019 faab 	bl	2c116 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   12bc0:	07c3      	lsls	r3, r0, #31
   12bc2:	d40d      	bmi.n	12be0 <sys_heap_free+0x4c>
   12bc4:	2399      	movs	r3, #153	; 0x99
   12bc6:	4a38      	ldr	r2, [pc, #224]	; (12ca8 <sys_heap_free+0x114>)
   12bc8:	4938      	ldr	r1, [pc, #224]	; (12cac <sys_heap_free+0x118>)
   12bca:	4839      	ldr	r0, [pc, #228]	; (12cb0 <sys_heap_free+0x11c>)
   12bcc:	f019 fa17 	bl	2bffe <printk>
   12bd0:	4631      	mov	r1, r6
   12bd2:	4838      	ldr	r0, [pc, #224]	; (12cb4 <sys_heap_free+0x120>)
   12bd4:	f019 fa13 	bl	2bffe <printk>
   12bd8:	2199      	movs	r1, #153	; 0x99
   12bda:	4833      	ldr	r0, [pc, #204]	; (12ca8 <sys_heap_free+0x114>)
   12bdc:	f019 fc2c 	bl	2c438 <assert_post_action>
	return c + chunk_size(h, c);
   12be0:	4621      	mov	r1, r4
   12be2:	4628      	mov	r0, r5
   12be4:	f019 faad 	bl	2c142 <chunk_size>
   12be8:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   12bea:	2200      	movs	r2, #0
   12bec:	4639      	mov	r1, r7
   12bee:	4628      	mov	r0, r5
   12bf0:	f019 fa91 	bl	2c116 <chunk_field>
   12bf4:	1a38      	subs	r0, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12bf6:	4284      	cmp	r4, r0
   12bf8:	d00d      	beq.n	12c16 <sys_heap_free+0x82>
   12bfa:	23a1      	movs	r3, #161	; 0xa1
   12bfc:	4a2a      	ldr	r2, [pc, #168]	; (12ca8 <sys_heap_free+0x114>)
   12bfe:	492e      	ldr	r1, [pc, #184]	; (12cb8 <sys_heap_free+0x124>)
   12c00:	482b      	ldr	r0, [pc, #172]	; (12cb0 <sys_heap_free+0x11c>)
   12c02:	f019 f9fc 	bl	2bffe <printk>
   12c06:	4631      	mov	r1, r6
   12c08:	482c      	ldr	r0, [pc, #176]	; (12cbc <sys_heap_free+0x128>)
   12c0a:	f019 f9f8 	bl	2bffe <printk>
   12c0e:	21a1      	movs	r1, #161	; 0xa1
   12c10:	4825      	ldr	r0, [pc, #148]	; (12ca8 <sys_heap_free+0x114>)
   12c12:	f019 fc11 	bl	2c438 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   12c16:	2200      	movs	r2, #0
   12c18:	4621      	mov	r1, r4
   12c1a:	4628      	mov	r0, r5
   12c1c:	f019 fa97 	bl	2c14e <set_chunk_used>
	return c + chunk_size(h, c);
   12c20:	4621      	mov	r1, r4
   12c22:	f019 fa8e 	bl	2c142 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12c26:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   12c28:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12c2a:	4628      	mov	r0, r5
   12c2c:	9101      	str	r1, [sp, #4]
   12c2e:	f019 fa72 	bl	2c116 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   12c32:	f010 0f01 	tst.w	r0, #1
   12c36:	9901      	ldr	r1, [sp, #4]
   12c38:	d10b      	bne.n	12c52 <sys_heap_free+0xbe>
		free_list_remove(h, right_chunk(h, c));
   12c3a:	4628      	mov	r0, r5
   12c3c:	f019 fb2e 	bl	2c29c <free_list_remove>
	return c + chunk_size(h, c);
   12c40:	4621      	mov	r1, r4
   12c42:	4628      	mov	r0, r5
   12c44:	f019 fa7d 	bl	2c142 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   12c48:	4621      	mov	r1, r4
   12c4a:	1822      	adds	r2, r4, r0
   12c4c:	4628      	mov	r0, r5
   12c4e:	f019 fab0 	bl	2c1b2 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   12c52:	2200      	movs	r2, #0
   12c54:	4621      	mov	r1, r4
   12c56:	4628      	mov	r0, r5
   12c58:	f019 fa5d 	bl	2c116 <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12c5c:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   12c5e:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12c60:	4628      	mov	r0, r5
   12c62:	9101      	str	r1, [sp, #4]
   12c64:	f019 fa57 	bl	2c116 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   12c68:	f010 0601 	ands.w	r6, r0, #1
   12c6c:	9901      	ldr	r1, [sp, #4]
   12c6e:	d112      	bne.n	12c96 <sys_heap_free+0x102>
		free_list_remove(h, left_chunk(h, c));
   12c70:	4628      	mov	r0, r5
   12c72:	f019 fb13 	bl	2c29c <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   12c76:	4621      	mov	r1, r4
   12c78:	4632      	mov	r2, r6
   12c7a:	4628      	mov	r0, r5
   12c7c:	f019 fa4b 	bl	2c116 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   12c80:	4622      	mov	r2, r4
   12c82:	1a21      	subs	r1, r4, r0
   12c84:	4628      	mov	r0, r5
   12c86:	f019 fa94 	bl	2c1b2 <merge_chunks>
   12c8a:	4621      	mov	r1, r4
   12c8c:	4632      	mov	r2, r6
   12c8e:	4628      	mov	r0, r5
   12c90:	f019 fa41 	bl	2c116 <chunk_field>
   12c94:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   12c96:	4621      	mov	r1, r4
   12c98:	4628      	mov	r0, r5
	free_chunk(h, c);
}
   12c9a:	b003      	add	sp, #12
   12c9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	free_list_add(h, c);
   12ca0:	f019 bb56 	b.w	2c350 <free_list_add>
}
   12ca4:	b003      	add	sp, #12
   12ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ca8:	000300b1 	.word	0x000300b1
   12cac:	000300d2 	.word	0x000300d2
   12cb0:	0002ff0d 	.word	0x0002ff0d
   12cb4:	000300e3 	.word	0x000300e3
   12cb8:	0003011b 	.word	0x0003011b
   12cbc:	00030141 	.word	0x00030141

00012cc0 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   12cc0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   12cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cc6:	4607      	mov	r7, r0
   12cc8:	460d      	mov	r5, r1
   12cca:	4616      	mov	r6, r2
   12ccc:	d212      	bcs.n	12cf4 <sys_heap_init+0x34>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12cce:	2a04      	cmp	r2, #4
   12cd0:	d80e      	bhi.n	12cf0 <sys_heap_init+0x30>
   12cd2:	4943      	ldr	r1, [pc, #268]	; (12de0 <sys_heap_init+0x120>)
   12cd4:	f44f 7397 	mov.w	r3, #302	; 0x12e
   12cd8:	4a42      	ldr	r2, [pc, #264]	; (12de4 <sys_heap_init+0x124>)
   12cda:	4843      	ldr	r0, [pc, #268]	; (12de8 <sys_heap_init+0x128>)
   12cdc:	f019 f98f 	bl	2bffe <printk>
   12ce0:	4842      	ldr	r0, [pc, #264]	; (12dec <sys_heap_init+0x12c>)
   12ce2:	f019 f98c 	bl	2bffe <printk>
   12ce6:	f44f 7197 	mov.w	r1, #302	; 0x12e
   12cea:	483e      	ldr	r0, [pc, #248]	; (12de4 <sys_heap_init+0x124>)
   12cec:	f019 fba4 	bl	2c438 <assert_post_action>
   12cf0:	2204      	movs	r2, #4
   12cf2:	e000      	b.n	12cf6 <sys_heap_init+0x36>
   12cf4:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   12cf6:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12cf8:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12cfa:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12cfc:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12d00:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   12d04:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12d06:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   12d08:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12d0c:	d80e      	bhi.n	12d2c <sys_heap_init+0x6c>
   12d0e:	4938      	ldr	r1, [pc, #224]	; (12df0 <sys_heap_init+0x130>)
   12d10:	f240 1337 	movw	r3, #311	; 0x137
   12d14:	4a33      	ldr	r2, [pc, #204]	; (12de4 <sys_heap_init+0x124>)
   12d16:	4834      	ldr	r0, [pc, #208]	; (12de8 <sys_heap_init+0x128>)
   12d18:	f019 f971 	bl	2bffe <printk>
   12d1c:	4833      	ldr	r0, [pc, #204]	; (12dec <sys_heap_init+0x12c>)
   12d1e:	f019 f96e 	bl	2bffe <printk>
   12d22:	f240 1137 	movw	r1, #311	; 0x137
   12d26:	482f      	ldr	r0, [pc, #188]	; (12de4 <sys_heap_init+0x124>)
   12d28:	f019 fb86 	bl	2c438 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   12d2c:	2200      	movs	r2, #0
   12d2e:	2300      	movs	r3, #0
	heap->heap = h;
   12d30:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
   12d32:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   12d36:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12d38:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   12d3a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12d3c:	4620      	mov	r0, r4
	h->len = buf_sz;
   12d3e:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12d40:	f019 fa2b 	bl	2c19a <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   12d44:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12d46:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12d48:	1c47      	adds	r7, r0, #1
   12d4a:	4620      	mov	r0, r4
   12d4c:	f019 fa1b 	bl	2c186 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12d50:	351b      	adds	r5, #27
   12d52:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
   12d54:	4428      	add	r0, r5
   12d56:	42b0      	cmp	r0, r6
   12d58:	d30e      	bcc.n	12d78 <sys_heap_init+0xb8>
   12d5a:	4926      	ldr	r1, [pc, #152]	; (12df4 <sys_heap_init+0x134>)
   12d5c:	f240 1343 	movw	r3, #323	; 0x143
   12d60:	4a20      	ldr	r2, [pc, #128]	; (12de4 <sys_heap_init+0x124>)
   12d62:	4821      	ldr	r0, [pc, #132]	; (12de8 <sys_heap_init+0x128>)
   12d64:	f019 f94b 	bl	2bffe <printk>
   12d68:	4820      	ldr	r0, [pc, #128]	; (12dec <sys_heap_init+0x12c>)
   12d6a:	f019 f948 	bl	2bffe <printk>
   12d6e:	f240 1143 	movw	r1, #323	; 0x143
   12d72:	481c      	ldr	r0, [pc, #112]	; (12de4 <sys_heap_init+0x124>)
   12d74:	f019 fb60 	bl	2c438 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   12d78:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   12d7a:	4619      	mov	r1, r3
   12d7c:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   12d80:	42bb      	cmp	r3, r7
   12d82:	db29      	blt.n	12dd8 <sys_heap_init+0x118>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   12d84:	462a      	mov	r2, r5
   12d86:	4620      	mov	r0, r4
   12d88:	2100      	movs	r1, #0
   12d8a:	f019 f9f8 	bl	2c17e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   12d8e:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   12d90:	4620      	mov	r0, r4
   12d92:	2201      	movs	r2, #1
   12d94:	2100      	movs	r1, #0
   12d96:	f019 f9da 	bl	2c14e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   12d9a:	463a      	mov	r2, r7
   12d9c:	4629      	mov	r1, r5
   12d9e:	f019 f9ee 	bl	2c17e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   12da2:	462b      	mov	r3, r5
   12da4:	4629      	mov	r1, r5
   12da6:	4620      	mov	r0, r4
   12da8:	2200      	movs	r2, #0
   12daa:	f019 f9bf 	bl	2c12c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   12dae:	4631      	mov	r1, r6
   12db0:	4620      	mov	r0, r4
   12db2:	2200      	movs	r2, #0
   12db4:	f019 f9e3 	bl	2c17e <set_chunk_size>
   12db8:	463b      	mov	r3, r7
   12dba:	4631      	mov	r1, r6
   12dbc:	4620      	mov	r0, r4
   12dbe:	2200      	movs	r2, #0
   12dc0:	f019 f9b4 	bl	2c12c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   12dc4:	4631      	mov	r1, r6
   12dc6:	4620      	mov	r0, r4
   12dc8:	2201      	movs	r2, #1
   12dca:	f019 f9c0 	bl	2c14e <set_chunk_used>

	free_list_add(h, chunk0_size);
   12dce:	4629      	mov	r1, r5
}
   12dd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   12dd4:	f019 babc 	b.w	2c350 <free_list_add>
		h->buckets[i].next = 0;
   12dd8:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   12ddc:	3301      	adds	r3, #1
   12dde:	e7cf      	b.n	12d80 <sys_heap_init+0xc0>
   12de0:	0003017d 	.word	0x0003017d
   12de4:	000300b1 	.word	0x000300b1
   12de8:	0002ff0d 	.word	0x0002ff0d
   12dec:	0003019e 	.word	0x0003019e
   12df0:	000301b7 	.word	0x000301b7
   12df4:	000301df 	.word	0x000301df

00012df8 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   12df8:	f04f 0220 	mov.w	r2, #32
   12dfc:	f3ef 8311 	mrs	r3, BASEPRI
   12e00:	f382 8811 	msr	BASEPRI, r2
   12e04:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12e08:	2101      	movs	r1, #1
   12e0a:	4a04      	ldr	r2, [pc, #16]	; (12e1c <nordicsemi_nrf91_init+0x24>)
   12e0c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   12e10:	f383 8811 	msr	BASEPRI, r3
   12e14:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12e18:	2000      	movs	r0, #0
   12e1a:	4770      	bx	lr
   12e1c:	40039000 	.word	0x40039000

00012e20 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12e20:	b120      	cbz	r0, 12e2c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12e22:	4b03      	ldr	r3, [pc, #12]	; (12e30 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12e24:	0180      	lsls	r0, r0, #6
   12e26:	f043 0301 	orr.w	r3, r3, #1
   12e2a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12e2c:	4770      	bx	lr
   12e2e:	bf00      	nop
   12e30:	0002ecd0 	.word	0x0002ecd0

00012e34 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12e34:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12e36:	2200      	movs	r2, #0
{
   12e38:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12e3a:	490f      	ldr	r1, [pc, #60]	; (12e78 <enable_logger+0x44>)
   12e3c:	480f      	ldr	r0, [pc, #60]	; (12e7c <enable_logger+0x48>)
   12e3e:	f01b fca2 	bl	2e786 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12e42:	2200      	movs	r2, #0
   12e44:	2300      	movs	r3, #0
   12e46:	2400      	movs	r4, #0
   12e48:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12e4c:	230e      	movs	r3, #14
   12e4e:	4d0c      	ldr	r5, [pc, #48]	; (12e80 <enable_logger+0x4c>)
   12e50:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12e54:	f44f 7240 	mov.w	r2, #768	; 0x300
   12e58:	4628      	mov	r0, r5
   12e5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12e5e:	4b09      	ldr	r3, [pc, #36]	; (12e84 <enable_logger+0x50>)
   12e60:	4909      	ldr	r1, [pc, #36]	; (12e88 <enable_logger+0x54>)
   12e62:	9400      	str	r4, [sp, #0]
   12e64:	f011 fc56 	bl	24714 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   12e68:	4908      	ldr	r1, [pc, #32]	; (12e8c <enable_logger+0x58>)
   12e6a:	4628      	mov	r0, r5
   12e6c:	f01b fbf3 	bl	2e656 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12e70:	4620      	mov	r0, r4
   12e72:	b009      	add	sp, #36	; 0x24
   12e74:	bd30      	pop	{r4, r5, pc}
   12e76:	bf00      	nop
   12e78:	00012e91 	.word	0x00012e91
   12e7c:	20020dd0 	.word	0x20020dd0
   12e80:	20020e08 	.word	0x20020e08
   12e84:	00013345 	.word	0x00013345
   12e88:	20027428 	.word	0x20027428
   12e8c:	0003020c 	.word	0x0003020c

00012e90 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   12e90:	4801      	ldr	r0, [pc, #4]	; (12e98 <log_process_thread_timer_expiry_fn+0x8>)
   12e92:	f011 bafd 	b.w	24490 <z_impl_k_sem_give>
   12e96:	bf00      	nop
   12e98:	20020c68 	.word	0x20020c68

00012e9c <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12e9c:	2920      	cmp	r1, #32
{
   12e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ea0:	4605      	mov	r5, r0
   12ea2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12ea4:	d909      	bls.n	12eba <z_log_get_s_mask+0x1e>
   12ea6:	4914      	ldr	r1, [pc, #80]	; (12ef8 <z_log_get_s_mask+0x5c>)
   12ea8:	4814      	ldr	r0, [pc, #80]	; (12efc <z_log_get_s_mask+0x60>)
   12eaa:	235b      	movs	r3, #91	; 0x5b
   12eac:	4a14      	ldr	r2, [pc, #80]	; (12f00 <z_log_get_s_mask+0x64>)
   12eae:	f019 f8a6 	bl	2bffe <printk>
   12eb2:	215b      	movs	r1, #91	; 0x5b
   12eb4:	4812      	ldr	r0, [pc, #72]	; (12f00 <z_log_get_s_mask+0x64>)
   12eb6:	f019 fabf 	bl	2c438 <assert_post_action>
			arm = false;
   12eba:	2000      	movs	r0, #0
				mask |= BIT(arg);
   12ebc:	2701      	movs	r7, #1
			arm = false;
   12ebe:	4603      	mov	r3, r0
   12ec0:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   12ec2:	4e10      	ldr	r6, [pc, #64]	; (12f04 <z_log_get_s_mask+0x68>)
	while ((curr = *str++) && arg < nargs) {
   12ec4:	f815 1b01 	ldrb.w	r1, [r5], #1
   12ec8:	b109      	cbz	r1, 12ece <z_log_get_s_mask+0x32>
   12eca:	42a3      	cmp	r3, r4
   12ecc:	d300      	bcc.n	12ed0 <z_log_get_s_mask+0x34>
}
   12ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   12ed0:	2925      	cmp	r1, #37	; 0x25
   12ed2:	d102      	bne.n	12eda <z_log_get_s_mask+0x3e>
			arm = !arm;
   12ed4:	f082 0201 	eor.w	r2, r2, #1
   12ed8:	e7f4      	b.n	12ec4 <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
   12eda:	2a00      	cmp	r2, #0
   12edc:	d0f2      	beq.n	12ec4 <z_log_get_s_mask+0x28>
   12ede:	f811 c006 	ldrb.w	ip, [r1, r6]
   12ee2:	f01c 0f03 	tst.w	ip, #3
   12ee6:	d0ed      	beq.n	12ec4 <z_log_get_s_mask+0x28>
			if (curr == 's') {
   12ee8:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   12eea:	bf04      	itt	eq
   12eec:	fa07 f203 	lsleq.w	r2, r7, r3
   12ef0:	4310      	orreq	r0, r2
			arg++;
   12ef2:	3301      	adds	r3, #1
			arm = false;
   12ef4:	2200      	movs	r2, #0
   12ef6:	e7e5      	b.n	12ec4 <z_log_get_s_mask+0x28>
   12ef8:	00030241 	.word	0x00030241
   12efc:	0002ff0d 	.word	0x0002ff0d
   12f00:	00030214 	.word	0x00030214
   12f04:	0002f3c9 	.word	0x0002f3c9

00012f08 <log_core_init>:
{
   12f08:	b508      	push	{r3, lr}
		log_msg_pool_init();
   12f0a:	f000 fa95 	bl	13438 <log_msg_pool_init>
		log_list_init(&list);
   12f0e:	4809      	ldr	r0, [pc, #36]	; (12f34 <log_core_init+0x2c>)
   12f10:	f019 fa9c 	bl	2c44c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12f14:	2304      	movs	r3, #4
   12f16:	f44f 7284 	mov.w	r2, #264	; 0x108
   12f1a:	4907      	ldr	r1, [pc, #28]	; (12f38 <log_core_init+0x30>)
   12f1c:	4807      	ldr	r0, [pc, #28]	; (12f3c <log_core_init+0x34>)
   12f1e:	f01b fafa 	bl	2e516 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   12f22:	4b07      	ldr	r3, [pc, #28]	; (12f40 <log_core_init+0x38>)
   12f24:	4a07      	ldr	r2, [pc, #28]	; (12f44 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   12f26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   12f2a:	601a      	str	r2, [r3, #0]
}
   12f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   12f30:	f000 bd78 	b.w	13a24 <log_output_timestamp_freq_set>
   12f34:	20021510 	.word	0x20021510
   12f38:	2002a068 	.word	0x2002a068
   12f3c:	20021518 	.word	0x20021518
   12f40:	20020430 	.word	0x20020430
   12f44:	0002c491 	.word	0x0002c491

00012f48 <dropped_notify>:
{
   12f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12f4a:	2500      	movs	r5, #0
   12f4c:	4b0d      	ldr	r3, [pc, #52]	; (12f84 <dropped_notify+0x3c>)
   12f4e:	e8d3 7fef 	ldaex	r7, [r3]
   12f52:	e8c3 5fe2 	stlex	r2, r5, [r3]
   12f56:	2a00      	cmp	r2, #0
   12f58:	d1f9      	bne.n	12f4e <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   12f5a:	4c0b      	ldr	r4, [pc, #44]	; (12f88 <dropped_notify+0x40>)
   12f5c:	4e0b      	ldr	r6, [pc, #44]	; (12f8c <dropped_notify+0x44>)
   12f5e:	1b36      	subs	r6, r6, r4
   12f60:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12f62:	42b5      	cmp	r5, r6
   12f64:	db00      	blt.n	12f68 <dropped_notify+0x20>
}
   12f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   12f68:	4620      	mov	r0, r4
   12f6a:	f019 fa85 	bl	2c478 <log_backend_is_active>
   12f6e:	b128      	cbz	r0, 12f7c <dropped_notify+0x34>
	if (backend->api->dropped != NULL) {
   12f70:	6823      	ldr	r3, [r4, #0]
   12f72:	68db      	ldr	r3, [r3, #12]
   12f74:	b113      	cbz	r3, 12f7c <dropped_notify+0x34>
		backend->api->dropped(backend, cnt);
   12f76:	4639      	mov	r1, r7
   12f78:	4620      	mov	r0, r4
   12f7a:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12f7c:	3501      	adds	r5, #1
   12f7e:	3410      	adds	r4, #16
   12f80:	e7ef      	b.n	12f62 <dropped_notify+0x1a>
   12f82:	bf00      	nop
   12f84:	20021508 	.word	0x20021508
   12f88:	0002ec64 	.word	0x0002ec64
   12f8c:	0002ec74 	.word	0x0002ec74

00012f90 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12f90:	4b04      	ldr	r3, [pc, #16]	; (12fa4 <log_dropped+0x14>)
   12f92:	e8d3 2fef 	ldaex	r2, [r3]
   12f96:	3201      	adds	r2, #1
   12f98:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12f9c:	2900      	cmp	r1, #0
   12f9e:	d1f8      	bne.n	12f92 <log_dropped+0x2>
}
   12fa0:	4770      	bx	lr
   12fa2:	bf00      	nop
   12fa4:	20021508 	.word	0x20021508

00012fa8 <log_source_name_get>:
   12fa8:	4a04      	ldr	r2, [pc, #16]	; (12fbc <log_source_name_get+0x14>)
   12faa:	4b05      	ldr	r3, [pc, #20]	; (12fc0 <log_source_name_get+0x18>)
   12fac:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12fae:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   12fb2:	bf34      	ite	cc
   12fb4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   12fb8:	2000      	movcs	r0, #0
}
   12fba:	4770      	bx	lr
   12fbc:	0002ebc4 	.word	0x0002ebc4
   12fc0:	0002ec64 	.word	0x0002ec64

00012fc4 <log_backend_enable>:
{
   12fc4:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   12fc6:	4c10      	ldr	r4, [pc, #64]	; (13008 <log_backend_enable+0x44>)
{
   12fc8:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   12fca:	1b04      	subs	r4, r0, r4
   12fcc:	1124      	asrs	r4, r4, #4
   12fce:	3401      	adds	r4, #1
{
   12fd0:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
   12fd2:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   12fd4:	b948      	cbnz	r0, 12fea <log_backend_enable+0x26>
   12fd6:	490d      	ldr	r1, [pc, #52]	; (1300c <log_backend_enable+0x48>)
   12fd8:	480d      	ldr	r0, [pc, #52]	; (13010 <log_backend_enable+0x4c>)
   12fda:	23c0      	movs	r3, #192	; 0xc0
   12fdc:	4a0d      	ldr	r2, [pc, #52]	; (13014 <log_backend_enable+0x50>)
   12fde:	f019 f80e 	bl	2bffe <printk>
   12fe2:	21c0      	movs	r1, #192	; 0xc0
   12fe4:	480b      	ldr	r0, [pc, #44]	; (13014 <log_backend_enable+0x50>)
   12fe6:	f019 fa27 	bl	2c438 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   12fea:	2201      	movs	r2, #1
	backend->cb->id = id;
   12fec:	686b      	ldr	r3, [r5, #4]
   12fee:	711c      	strb	r4, [r3, #4]
	if (!backend_attached) {
   12ff0:	4c09      	ldr	r4, [pc, #36]	; (13018 <log_backend_enable+0x54>)
	backend->cb->active = true;
   12ff2:	715a      	strb	r2, [r3, #5]
   12ff4:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   12ff6:	601e      	str	r6, [r3, #0]
   12ff8:	b912      	cbnz	r2, 13000 <log_backend_enable+0x3c>
   12ffa:	4808      	ldr	r0, [pc, #32]	; (1301c <log_backend_enable+0x58>)
   12ffc:	f011 fa48 	bl	24490 <z_impl_k_sem_give>
	backend_attached = true;
   13000:	2301      	movs	r3, #1
   13002:	7023      	strb	r3, [r4, #0]
}
   13004:	bd70      	pop	{r4, r5, r6, pc}
   13006:	bf00      	nop
   13008:	0002ec64 	.word	0x0002ec64
   1300c:	0003028a 	.word	0x0003028a
   13010:	0002ff0d 	.word	0x0002ff0d
   13014:	00030259 	.word	0x00030259
   13018:	2002472b 	.word	0x2002472b
   1301c:	20020c68 	.word	0x20020c68

00013020 <log_init>:
{
   13020:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   13022:	4b14      	ldr	r3, [pc, #80]	; (13074 <log_init+0x54>)
   13024:	4c14      	ldr	r4, [pc, #80]	; (13078 <log_init+0x58>)
   13026:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13028:	2b9f      	cmp	r3, #159	; 0x9f
   1302a:	ea4f 1623 	mov.w	r6, r3, asr #4
   1302e:	d906      	bls.n	1303e <log_init+0x1e>
   13030:	f240 210b 	movw	r1, #523	; 0x20b
   13034:	4b11      	ldr	r3, [pc, #68]	; (1307c <log_init+0x5c>)
   13036:	4a12      	ldr	r2, [pc, #72]	; (13080 <log_init+0x60>)
   13038:	4812      	ldr	r0, [pc, #72]	; (13084 <log_init+0x64>)
   1303a:	f012 fc43 	bl	258c4 <__assert_func>
   1303e:	4b12      	ldr	r3, [pc, #72]	; (13088 <log_init+0x68>)
   13040:	e8d3 5fef 	ldaex	r5, [r3]
   13044:	1c6a      	adds	r2, r5, #1
   13046:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1304a:	2900      	cmp	r1, #0
   1304c:	d1f8      	bne.n	13040 <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
   1304e:	b90d      	cbnz	r5, 13054 <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
   13050:	42b5      	cmp	r5, r6
   13052:	d100      	bne.n	13056 <log_init+0x36>
}
   13054:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   13056:	7b23      	ldrb	r3, [r4, #12]
   13058:	b143      	cbz	r3, 1306c <log_init+0x4c>
			if (backend->api->init != NULL) {
   1305a:	6823      	ldr	r3, [r4, #0]
   1305c:	695b      	ldr	r3, [r3, #20]
   1305e:	b103      	cbz	r3, 13062 <log_init+0x42>
				backend->api->init();
   13060:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   13062:	2204      	movs	r2, #4
   13064:	2100      	movs	r1, #0
   13066:	4620      	mov	r0, r4
   13068:	f7ff ffac 	bl	12fc4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1306c:	3501      	adds	r5, #1
   1306e:	3410      	adds	r4, #16
   13070:	e7ee      	b.n	13050 <log_init+0x30>
   13072:	bf00      	nop
   13074:	0002ec74 	.word	0x0002ec74
   13078:	0002ec64 	.word	0x0002ec64
   1307c:	000302a1 	.word	0x000302a1
   13080:	0003034f 	.word	0x0003034f
   13084:	00030214 	.word	0x00030214
   13088:	2002150c 	.word	0x2002150c

0001308c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   1308c:	4b15      	ldr	r3, [pc, #84]	; (130e4 <log_strdup+0x58>)
{
   1308e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   13090:	4298      	cmp	r0, r3
{
   13092:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   13094:	d302      	bcc.n	1309c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   13096:	4b14      	ldr	r3, [pc, #80]	; (130e8 <log_strdup+0x5c>)
   13098:	4298      	cmp	r0, r3
   1309a:	d31d      	bcc.n	130d8 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   1309c:	2200      	movs	r2, #0
   1309e:	2300      	movs	r3, #0
   130a0:	4812      	ldr	r0, [pc, #72]	; (130ec <log_strdup+0x60>)
   130a2:	a901      	add	r1, sp, #4
   130a4:	f00f fb60 	bl	22768 <k_mem_slab_alloc>
	if (err != 0) {
   130a8:	4605      	mov	r5, r0
   130aa:	b9c0      	cbnz	r0, 130de <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   130ac:	2201      	movs	r2, #1
   130ae:	9b01      	ldr	r3, [sp, #4]
   130b0:	e8d3 1fef 	ldaex	r1, [r3]
   130b4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   130b8:	2800      	cmp	r0, #0
   130ba:	d1f9      	bne.n	130b0 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   130bc:	9e01      	ldr	r6, [sp, #4]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   130be:	22ff      	movs	r2, #255	; 0xff
   130c0:	1d33      	adds	r3, r6, #4
   130c2:	4618      	mov	r0, r3
   130c4:	4621      	mov	r1, r4
   130c6:	f013 fbf5 	bl	268b4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   130ca:	227e      	movs	r2, #126	; 0x7e
   130cc:	4603      	mov	r3, r0
   130ce:	f886 2103 	strb.w	r2, [r6, #259]	; 0x103
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   130d2:	f886 5104 	strb.w	r5, [r6, #260]	; 0x104
	return dup->buf;
   130d6:	461c      	mov	r4, r3
}
   130d8:	4620      	mov	r0, r4
   130da:	b002      	add	sp, #8
   130dc:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   130de:	4b04      	ldr	r3, [pc, #16]	; (130f0 <log_strdup+0x64>)
   130e0:	e7f9      	b.n	130d6 <log_strdup+0x4a>
   130e2:	bf00      	nop
   130e4:	0002e908 	.word	0x0002e908
   130e8:	00032e00 	.word	0x00032e00
   130ec:	20021518 	.word	0x20021518
   130f0:	000302d4 	.word	0x000302d4

000130f4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   130f4:	b150      	cbz	r0, 1310c <log_is_strdup+0x18>
   130f6:	4b06      	ldr	r3, [pc, #24]	; (13110 <log_is_strdup+0x1c>)
   130f8:	4298      	cmp	r0, r3
   130fa:	d306      	bcc.n	1310a <log_is_strdup+0x16>
   130fc:	f503 6384 	add.w	r3, r3, #1056	; 0x420
   13100:	4298      	cmp	r0, r3
   13102:	bf2c      	ite	cs
   13104:	2000      	movcs	r0, #0
   13106:	2001      	movcc	r0, #1
   13108:	4770      	bx	lr
   1310a:	2000      	movs	r0, #0
}
   1310c:	4770      	bx	lr
   1310e:	bf00      	nop
   13110:	2002a068 	.word	0x2002a068

00013114 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   13114:	4b4c      	ldr	r3, [pc, #304]	; (13248 <z_impl_log_process+0x134>)
{
   13116:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   1311a:	781b      	ldrb	r3, [r3, #0]
{
   1311c:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   1311e:	b903      	cbnz	r3, 13122 <z_impl_log_process+0xe>
   13120:	b340      	cbz	r0, 13174 <z_impl_log_process+0x60>
	__asm__ volatile(
   13122:	f04f 0320 	mov.w	r3, #32
   13126:	f3ef 8611 	mrs	r6, BASEPRI
   1312a:	f383 8811 	msr	BASEPRI, r3
   1312e:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   13132:	4846      	ldr	r0, [pc, #280]	; (1324c <z_impl_log_process+0x138>)
   13134:	f019 f99a 	bl	2c46c <log_list_head_get>
   13138:	4605      	mov	r5, r0
	__asm__ volatile(
   1313a:	f386 8811 	msr	BASEPRI, r6
   1313e:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   13142:	b158      	cbz	r0, 1315c <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13144:	4b42      	ldr	r3, [pc, #264]	; (13250 <z_impl_log_process+0x13c>)
   13146:	e8d3 2fef 	ldaex	r2, [r3]
   1314a:	3a01      	subs	r2, #1
   1314c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13150:	2900      	cmp	r1, #0
   13152:	d1f8      	bne.n	13146 <z_impl_log_process+0x32>
	if (!bypass) {
   13154:	b194      	cbz	r4, 1317c <z_impl_log_process+0x68>
	log_msg_put(msg);
   13156:	4628      	mov	r0, r5
   13158:	f019 fa88 	bl	2c66c <log_msg_put>
	if (!bypass && dropped_cnt) {
   1315c:	b924      	cbnz	r4, 13168 <z_impl_log_process+0x54>
   1315e:	4b3d      	ldr	r3, [pc, #244]	; (13254 <z_impl_log_process+0x140>)
   13160:	681b      	ldr	r3, [r3, #0]
   13162:	b10b      	cbz	r3, 13168 <z_impl_log_process+0x54>
		dropped_notify();
   13164:	f7ff fef0 	bl	12f48 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   13168:	4838      	ldr	r0, [pc, #224]	; (1324c <z_impl_log_process+0x138>)
   1316a:	f019 f97d 	bl	2c468 <log_list_head_peek>
   1316e:	1e04      	subs	r4, r0, #0
   13170:	bf18      	it	ne
   13172:	2401      	movne	r4, #1
}
   13174:	4620      	mov	r0, r4
   13176:	b003      	add	sp, #12
   13178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   1317c:	4b36      	ldr	r3, [pc, #216]	; (13258 <z_impl_log_process+0x144>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   1317e:	781b      	ldrb	r3, [r3, #0]
   13180:	b9b3      	cbnz	r3, 131b0 <z_impl_log_process+0x9c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13182:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   13184:	07db      	lsls	r3, r3, #31
   13186:	d413      	bmi.n	131b0 <z_impl_log_process+0x9c>
	msg_str = log_msg_str_get(msg);
   13188:	f019 fa7f 	bl	2c68a <log_msg_str_get>
   1318c:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1318e:	4628      	mov	r0, r5
   13190:	f019 fa4a 	bl	2c628 <log_msg_nargs_get>
   13194:	4601      	mov	r1, r0
   13196:	4648      	mov	r0, r9
   13198:	f7ff fe80 	bl	12e9c <z_log_get_s_mask>
   1319c:	4607      	mov	r7, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1319e:	4a2f      	ldr	r2, [pc, #188]	; (1325c <z_impl_log_process+0x148>)
   131a0:	4b2f      	ldr	r3, [pc, #188]	; (13260 <z_impl_log_process+0x14c>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   131a2:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 13284 <z_impl_log_process+0x170>
   131a6:	1a9b      	subs	r3, r3, r2
   131a8:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
   131ac:	9201      	str	r2, [sp, #4]
	while (mask) {
   131ae:	b937      	cbnz	r7, 131be <z_impl_log_process+0xaa>
   131b0:	4e2c      	ldr	r6, [pc, #176]	; (13264 <z_impl_log_process+0x150>)
   131b2:	4f2d      	ldr	r7, [pc, #180]	; (13268 <z_impl_log_process+0x154>)
   131b4:	f04f 0800 	mov.w	r8, #0
   131b8:	1bbf      	subs	r7, r7, r6
   131ba:	113f      	asrs	r7, r7, #4
   131bc:	e041      	b.n	13242 <z_impl_log_process+0x12e>
		idx = 31 - __builtin_clz(mask);
   131be:	fab7 f887 	clz	r8, r7
   131c2:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   131c6:	4641      	mov	r1, r8
   131c8:	4628      	mov	r0, r5
   131ca:	f019 fa30 	bl	2c62e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   131ce:	4b27      	ldr	r3, [pc, #156]	; (1326c <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   131d0:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   131d2:	4298      	cmp	r0, r3
   131d4:	d302      	bcc.n	131dc <z_impl_log_process+0xc8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   131d6:	4b26      	ldr	r3, [pc, #152]	; (13270 <z_impl_log_process+0x15c>)
   131d8:	4298      	cmp	r0, r3
   131da:	d320      	bcc.n	1321e <z_impl_log_process+0x10a>
   131dc:	4610      	mov	r0, r2
   131de:	f7ff ff89 	bl	130f4 <log_is_strdup>
   131e2:	b9e0      	cbnz	r0, 1321e <z_impl_log_process+0x10a>
   131e4:	4b23      	ldr	r3, [pc, #140]	; (13274 <z_impl_log_process+0x160>)
   131e6:	429a      	cmp	r2, r3
   131e8:	d019      	beq.n	1321e <z_impl_log_process+0x10a>
	return msg->hdr.ids.source_id;
   131ea:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   131ec:	4922      	ldr	r1, [pc, #136]	; (13278 <z_impl_log_process+0x164>)
   131ee:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   131f2:	455b      	cmp	r3, fp
   131f4:	bf2c      	ite	cs
   131f6:	4606      	movcs	r6, r0
	return __log_const_start[source_id].name;
   131f8:	9a01      	ldrcc	r2, [sp, #4]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   131fa:	4820      	ldr	r0, [pc, #128]	; (1327c <z_impl_log_process+0x168>)
   131fc:	bf38      	it	cc
   131fe:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
   13202:	23ad      	movs	r3, #173	; 0xad
   13204:	4652      	mov	r2, sl
   13206:	f018 fefa 	bl	2bffe <printk>
   1320a:	4641      	mov	r1, r8
   1320c:	481c      	ldr	r0, [pc, #112]	; (13280 <z_impl_log_process+0x16c>)
   1320e:	464b      	mov	r3, r9
   13210:	4632      	mov	r2, r6
   13212:	f018 fef4 	bl	2bffe <printk>
   13216:	21ad      	movs	r1, #173	; 0xad
   13218:	4650      	mov	r0, sl
   1321a:	f019 f90d 	bl	2c438 <assert_post_action>
		mask &= ~BIT(idx);
   1321e:	2301      	movs	r3, #1
   13220:	fa03 f808 	lsl.w	r8, r3, r8
   13224:	ea27 0708 	bic.w	r7, r7, r8
   13228:	e7c1      	b.n	131ae <z_impl_log_process+0x9a>
			if (log_backend_is_active(backend) &&
   1322a:	4630      	mov	r0, r6
   1322c:	f019 f924 	bl	2c478 <log_backend_is_active>
   13230:	b120      	cbz	r0, 1323c <z_impl_log_process+0x128>
	backend->api->put(backend, msg);
   13232:	6833      	ldr	r3, [r6, #0]
   13234:	4629      	mov	r1, r5
   13236:	4630      	mov	r0, r6
   13238:	681b      	ldr	r3, [r3, #0]
   1323a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   1323c:	f108 0801 	add.w	r8, r8, #1
   13240:	3610      	adds	r6, #16
   13242:	45b8      	cmp	r8, r7
   13244:	dbf1      	blt.n	1322a <z_impl_log_process+0x116>
   13246:	e786      	b.n	13156 <z_impl_log_process+0x42>
   13248:	2002472b 	.word	0x2002472b
   1324c:	20021510 	.word	0x20021510
   13250:	20021504 	.word	0x20021504
   13254:	20021508 	.word	0x20021508
   13258:	2002472c 	.word	0x2002472c
   1325c:	0002ebc4 	.word	0x0002ebc4
   13260:	0002ec64 	.word	0x0002ec64
   13264:	0002ec64 	.word	0x0002ec64
   13268:	0002ec74 	.word	0x0002ec74
   1326c:	0002e908 	.word	0x0002e908
   13270:	00032e00 	.word	0x00032e00
   13274:	000302d4 	.word	0x000302d4
   13278:	00032a36 	.word	0x00032a36
   1327c:	0002ff0d 	.word	0x0002ff0d
   13280:	000302ee 	.word	0x000302ee
   13284:	00030214 	.word	0x00030214

00013288 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   13288:	4b27      	ldr	r3, [pc, #156]	; (13328 <msg_finalize+0xa0>)
{
   1328a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   1328c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   1328e:	8141      	strh	r1, [r0, #10]
{
   13290:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13292:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13294:	4d25      	ldr	r5, [pc, #148]	; (1332c <msg_finalize+0xa4>)
   13296:	60e0      	str	r0, [r4, #12]
   13298:	e8d5 3fef 	ldaex	r3, [r5]
   1329c:	3301      	adds	r3, #1
   1329e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   132a2:	2a00      	cmp	r2, #0
   132a4:	d1f8      	bne.n	13298 <msg_finalize+0x10>
	__asm__ volatile(
   132a6:	f04f 0320 	mov.w	r3, #32
   132aa:	f3ef 8611 	mrs	r6, BASEPRI
   132ae:	f383 8811 	msr	BASEPRI, r3
   132b2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   132b6:	481e      	ldr	r0, [pc, #120]	; (13330 <msg_finalize+0xa8>)
   132b8:	4621      	mov	r1, r4
   132ba:	f019 f8cb 	bl	2c454 <log_list_add_tail>
	__asm__ volatile(
   132be:	f386 8811 	msr	BASEPRI, r6
   132c2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   132c6:	4b1b      	ldr	r3, [pc, #108]	; (13334 <msg_finalize+0xac>)
   132c8:	781b      	ldrb	r3, [r3, #0]
   132ca:	b183      	cbz	r3, 132ee <msg_finalize+0x66>
	__asm__ volatile(
   132cc:	f04f 0320 	mov.w	r3, #32
   132d0:	f3ef 8411 	mrs	r4, BASEPRI
   132d4:	f383 8811 	msr	BASEPRI, r3
   132d8:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   132dc:	2000      	movs	r0, #0
   132de:	f7ff ff19 	bl	13114 <z_impl_log_process>
	__asm__ volatile(
   132e2:	f384 8811 	msr	BASEPRI, r4
   132e6:	f3bf 8f6f 	isb	sy
}
   132ea:	b002      	add	sp, #8
   132ec:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   132ee:	4a12      	ldr	r2, [pc, #72]	; (13338 <msg_finalize+0xb0>)
   132f0:	682b      	ldr	r3, [r5, #0]
   132f2:	6812      	ldr	r2, [r2, #0]
   132f4:	2a00      	cmp	r2, #0
   132f6:	d0f8      	beq.n	132ea <msg_finalize+0x62>
   132f8:	2b01      	cmp	r3, #1
   132fa:	d10a      	bne.n	13312 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   132fc:	2200      	movs	r2, #0
   132fe:	2300      	movs	r3, #0
   13300:	480e      	ldr	r0, [pc, #56]	; (1333c <msg_finalize+0xb4>)
   13302:	e9cd 2300 	strd	r2, r3, [sp]
   13306:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1330a:	2300      	movs	r3, #0
   1330c:	f011 fefe 	bl	2510c <z_impl_k_timer_start>
   13310:	e7eb      	b.n	132ea <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   13312:	2b0a      	cmp	r3, #10
   13314:	d1e9      	bne.n	132ea <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   13316:	4809      	ldr	r0, [pc, #36]	; (1333c <msg_finalize+0xb4>)
   13318:	f01b fa41 	bl	2e79e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1331c:	4808      	ldr	r0, [pc, #32]	; (13340 <msg_finalize+0xb8>)
}
   1331e:	b002      	add	sp, #8
   13320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13324:	f011 b8b4 	b.w	24490 <z_impl_k_sem_give>
   13328:	20020430 	.word	0x20020430
   1332c:	20021504 	.word	0x20021504
   13330:	20021510 	.word	0x20021510
   13334:	2002472c 	.word	0x2002472c
   13338:	20021534 	.word	0x20021534
   1333c:	20020dd0 	.word	0x20020dd0
   13340:	20020c68 	.word	0x20020c68

00013344 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   13344:	4b16      	ldr	r3, [pc, #88]	; (133a0 <log_process_thread_func+0x5c>)
   13346:	4a17      	ldr	r2, [pc, #92]	; (133a4 <log_process_thread_func+0x60>)
{
   13348:	b510      	push	{r4, lr}
   1334a:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   1334c:	2b00      	cmp	r3, #0
   1334e:	dc0b      	bgt.n	13368 <log_process_thread_func+0x24>
   13350:	4915      	ldr	r1, [pc, #84]	; (133a8 <log_process_thread_func+0x64>)
   13352:	4816      	ldr	r0, [pc, #88]	; (133ac <log_process_thread_func+0x68>)
   13354:	f240 4399 	movw	r3, #1177	; 0x499
   13358:	4a15      	ldr	r2, [pc, #84]	; (133b0 <log_process_thread_func+0x6c>)
   1335a:	f018 fe50 	bl	2bffe <printk>
   1335e:	f240 4199 	movw	r1, #1177	; 0x499
   13362:	4813      	ldr	r0, [pc, #76]	; (133b0 <log_process_thread_func+0x6c>)
   13364:	f019 f868 	bl	2c438 <assert_post_action>
	log_init();
   13368:	f7ff fe5a 	bl	13020 <log_init>
	return z_impl_k_current_get();
   1336c:	f011 f88a 	bl	24484 <z_impl_k_current_get>
	proc_tid = process_tid;
   13370:	4b10      	ldr	r3, [pc, #64]	; (133b4 <log_process_thread_func+0x70>)
   13372:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13374:	b130      	cbz	r0, 13384 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13376:	4b10      	ldr	r3, [pc, #64]	; (133b8 <log_process_thread_func+0x74>)
	    process_tid &&
   13378:	681b      	ldr	r3, [r3, #0]
   1337a:	2b09      	cmp	r3, #9
   1337c:	dd02      	ble.n	13384 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   1337e:	480f      	ldr	r0, [pc, #60]	; (133bc <log_process_thread_func+0x78>)
   13380:	f011 f886 	bl	24490 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   13384:	4c0d      	ldr	r4, [pc, #52]	; (133bc <log_process_thread_func+0x78>)
   13386:	2000      	movs	r0, #0
   13388:	f7ff fec4 	bl	13114 <z_impl_log_process>
		if (log_process(false) == false) {
   1338c:	2800      	cmp	r0, #0
   1338e:	d1fa      	bne.n	13386 <log_process_thread_func+0x42>
   13390:	f04f 32ff 	mov.w	r2, #4294967295
   13394:	f04f 33ff 	mov.w	r3, #4294967295
   13398:	4620      	mov	r0, r4
   1339a:	f011 f8bd 	bl	24518 <z_impl_k_sem_take>
   1339e:	e7f2      	b.n	13386 <log_process_thread_func+0x42>
   133a0:	0002ec74 	.word	0x0002ec74
   133a4:	0002ec64 	.word	0x0002ec64
   133a8:	0003032f 	.word	0x0003032f
   133ac:	0002ff0d 	.word	0x0002ff0d
   133b0:	00030214 	.word	0x00030214
   133b4:	20021534 	.word	0x20021534
   133b8:	20021504 	.word	0x20021504
   133bc:	20020c68 	.word	0x20020c68

000133c0 <z_impl_log_panic>:
{
   133c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   133c2:	4f0f      	ldr	r7, [pc, #60]	; (13400 <z_impl_log_panic+0x40>)
   133c4:	783d      	ldrb	r5, [r7, #0]
   133c6:	b975      	cbnz	r5, 133e6 <z_impl_log_panic+0x26>
	log_init();
   133c8:	f7ff fe2a 	bl	13020 <log_init>
   133cc:	4c0d      	ldr	r4, [pc, #52]	; (13404 <z_impl_log_panic+0x44>)
   133ce:	4e0e      	ldr	r6, [pc, #56]	; (13408 <z_impl_log_panic+0x48>)
   133d0:	1b36      	subs	r6, r6, r4
   133d2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   133d4:	42b5      	cmp	r5, r6
   133d6:	db07      	blt.n	133e8 <z_impl_log_panic+0x28>
   133d8:	2000      	movs	r0, #0
   133da:	f7ff fe9b 	bl	13114 <z_impl_log_process>
		while (log_process(false) == true) {
   133de:	2800      	cmp	r0, #0
   133e0:	d1fa      	bne.n	133d8 <z_impl_log_panic+0x18>
	panic_mode = true;
   133e2:	2301      	movs	r3, #1
   133e4:	703b      	strb	r3, [r7, #0]
}
   133e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   133e8:	4620      	mov	r0, r4
   133ea:	f019 f845 	bl	2c478 <log_backend_is_active>
   133ee:	b118      	cbz	r0, 133f8 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   133f0:	6823      	ldr	r3, [r4, #0]
   133f2:	4620      	mov	r0, r4
   133f4:	691b      	ldr	r3, [r3, #16]
   133f6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   133f8:	3501      	adds	r5, #1
   133fa:	3410      	adds	r4, #16
   133fc:	e7ea      	b.n	133d4 <z_impl_log_panic+0x14>
   133fe:	bf00      	nop
   13400:	2002472c 	.word	0x2002472c
   13404:	0002ec64 	.word	0x0002ec64
   13408:	0002ec74 	.word	0x0002ec74

0001340c <log_free>:
{
   1340c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   1340e:	3804      	subs	r0, #4
   13410:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13412:	e8d0 3fef 	ldaex	r3, [r0]
   13416:	1e5a      	subs	r2, r3, #1
   13418:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1341c:	2900      	cmp	r1, #0
   1341e:	d1f8      	bne.n	13412 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   13420:	2b01      	cmp	r3, #1
   13422:	d103      	bne.n	1342c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   13424:	4803      	ldr	r0, [pc, #12]	; (13434 <log_free+0x28>)
   13426:	a901      	add	r1, sp, #4
   13428:	f00f fa0a 	bl	22840 <k_mem_slab_free>
}
   1342c:	b003      	add	sp, #12
   1342e:	f85d fb04 	ldr.w	pc, [sp], #4
   13432:	bf00      	nop
   13434:	20021518 	.word	0x20021518

00013438 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   13438:	2320      	movs	r3, #32
   1343a:	4902      	ldr	r1, [pc, #8]	; (13444 <log_msg_pool_init+0xc>)
   1343c:	461a      	mov	r2, r3
   1343e:	4802      	ldr	r0, [pc, #8]	; (13448 <log_msg_pool_init+0x10>)
   13440:	f01b b869 	b.w	2e516 <k_mem_slab_init>
   13444:	2002a488 	.word	0x2002a488
   13448:	20021538 	.word	0x20021538

0001344c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   1344c:	2300      	movs	r3, #0
{
   1344e:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   13450:	4d09      	ldr	r5, [pc, #36]	; (13478 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   13452:	9301      	str	r3, [sp, #4]
   13454:	2001      	movs	r0, #1
   13456:	f7ff fe5d 	bl	13114 <z_impl_log_process>
   1345a:	4604      	mov	r4, r0
			log_dropped();
   1345c:	f7ff fd98 	bl	12f90 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   13460:	2200      	movs	r2, #0
   13462:	2300      	movs	r3, #0
   13464:	4628      	mov	r0, r5
   13466:	a901      	add	r1, sp, #4
   13468:	f00f f97e 	bl	22768 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   1346c:	b108      	cbz	r0, 13472 <log_msg_no_space_handle+0x26>
   1346e:	2c00      	cmp	r4, #0
   13470:	d1f0      	bne.n	13454 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   13472:	9801      	ldr	r0, [sp, #4]
   13474:	b003      	add	sp, #12
   13476:	bd30      	pop	{r4, r5, pc}
   13478:	20021538 	.word	0x20021538

0001347c <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   1347c:	2300      	movs	r3, #0
{
   1347e:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   13480:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   13482:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   13484:	4806      	ldr	r0, [pc, #24]	; (134a0 <log_msg_chunk_alloc+0x24>)
   13486:	2300      	movs	r3, #0
   13488:	a901      	add	r1, sp, #4
   1348a:	f00f f96d 	bl	22768 <k_mem_slab_alloc>
	if (err != 0) {
   1348e:	b110      	cbz	r0, 13496 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   13490:	f7ff ffdc 	bl	1344c <log_msg_no_space_handle>
   13494:	9001      	str	r0, [sp, #4]
}
   13496:	9801      	ldr	r0, [sp, #4]
   13498:	b003      	add	sp, #12
   1349a:	f85d fb04 	ldr.w	pc, [sp], #4
   1349e:	bf00      	nop
   134a0:	20021538 	.word	0x20021538

000134a4 <msg_free>:
{
   134a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   134a6:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   134a8:	7a45      	ldrb	r5, [r0, #9]
{
   134aa:	b085      	sub	sp, #20
   134ac:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   134ae:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   134b0:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   134b4:	d41c      	bmi.n	134f0 <msg_free+0x4c>
   134b6:	b1dd      	cbz	r5, 134f0 <msg_free+0x4c>
		uint32_t smask = 0;
   134b8:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   134ba:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   134bc:	4631      	mov	r1, r6
   134be:	9801      	ldr	r0, [sp, #4]
   134c0:	f019 f8b5 	bl	2c62e <log_msg_arg_get>
   134c4:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   134c6:	f7ff fe15 	bl	130f4 <log_is_strdup>
   134ca:	b170      	cbz	r0, 134ea <msg_free+0x46>
				if (smask == 0) {
   134cc:	b934      	cbnz	r4, 134dc <msg_free+0x38>
					smask = z_log_get_s_mask(
   134ce:	9b01      	ldr	r3, [sp, #4]
   134d0:	4629      	mov	r1, r5
   134d2:	6918      	ldr	r0, [r3, #16]
   134d4:	f7ff fce2 	bl	12e9c <z_log_get_s_mask>
					if (smask == 0) {
   134d8:	4604      	mov	r4, r0
   134da:	b148      	cbz	r0, 134f0 <msg_free+0x4c>
				if (smask & BIT(i)) {
   134dc:	fa24 f306 	lsr.w	r3, r4, r6
   134e0:	07d9      	lsls	r1, r3, #31
   134e2:	d502      	bpl.n	134ea <msg_free+0x46>
					log_free(buf);
   134e4:	4638      	mov	r0, r7
   134e6:	f7ff ff91 	bl	1340c <log_free>
		for (i = 0; i < nargs; i++) {
   134ea:	3601      	adds	r6, #1
   134ec:	42ae      	cmp	r6, r5
   134ee:	d3e5      	bcc.n	134bc <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   134f0:	9b01      	ldr	r3, [sp, #4]
   134f2:	7a1a      	ldrb	r2, [r3, #8]
   134f4:	0792      	lsls	r2, r2, #30
   134f6:	d504      	bpl.n	13502 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   134f8:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   134fa:	4c08      	ldr	r4, [pc, #32]	; (1351c <msg_free+0x78>)
   134fc:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   134fe:	9b03      	ldr	r3, [sp, #12]
   13500:	b92b      	cbnz	r3, 1350e <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   13502:	4806      	ldr	r0, [pc, #24]	; (1351c <msg_free+0x78>)
   13504:	a901      	add	r1, sp, #4
   13506:	f00f f99b 	bl	22840 <k_mem_slab_free>
}
   1350a:	b005      	add	sp, #20
   1350c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   1350e:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13510:	4620      	mov	r0, r4
   13512:	a903      	add	r1, sp, #12
   13514:	f00f f994 	bl	22840 <k_mem_slab_free>
		cont = next;
   13518:	9503      	str	r5, [sp, #12]
   1351a:	e7f0      	b.n	134fe <msg_free+0x5a>
   1351c:	20021538 	.word	0x20021538

00013520 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   13520:	2a0e      	cmp	r2, #14
{
   13522:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13526:	4681      	mov	r9, r0
   13528:	4688      	mov	r8, r1
   1352a:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   1352c:	d90b      	bls.n	13546 <log_msg_create_n+0x26>
   1352e:	492d      	ldr	r1, [pc, #180]	; (135e4 <log_msg_create_n+0xc4>)
   13530:	482d      	ldr	r0, [pc, #180]	; (135e8 <log_msg_create_n+0xc8>)
   13532:	f44f 739b 	mov.w	r3, #310	; 0x136
   13536:	4a2d      	ldr	r2, [pc, #180]	; (135ec <log_msg_create_n+0xcc>)
   13538:	f018 fd61 	bl	2bffe <printk>
   1353c:	f44f 719b 	mov.w	r1, #310	; 0x136
   13540:	482a      	ldr	r0, [pc, #168]	; (135ec <log_msg_create_n+0xcc>)
   13542:	f018 ff79 	bl	2c438 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   13546:	f7ff ff99 	bl	1347c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1354a:	4604      	mov	r4, r0
   1354c:	b330      	cbz	r0, 1359c <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1354e:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   13550:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   13552:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   13554:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   13556:	8107      	strh	r7, [r0, #8]
   13558:	d909      	bls.n	1356e <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   1355a:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1355c:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   13560:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   13562:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   13566:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   13568:	f1ba 0f00 	cmp.w	sl, #0
   1356c:	dc0e      	bgt.n	1358c <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   1356e:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   13570:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   13572:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   13576:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1357a:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1357c:	d818      	bhi.n	135b0 <log_msg_create_n+0x90>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1357e:	4641      	mov	r1, r8
   13580:	00aa      	lsls	r2, r5, #2
   13582:	f104 0014 	add.w	r0, r4, #20
   13586:	f7f9 fae1 	bl	cb4c <memcpy>
	while (nargs != 0U) {
   1358a:	e007      	b.n	1359c <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1358c:	f7ff ff76 	bl	1347c <log_msg_chunk_alloc>
		if (cont == NULL) {
   13590:	4606      	mov	r6, r0
   13592:	b930      	cbnz	r0, 135a2 <log_msg_create_n+0x82>
			msg_free(msg);
   13594:	4620      	mov	r0, r4
   13596:	f7ff ff85 	bl	134a4 <msg_free>
			return NULL;
   1359a:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   1359c:	4620      	mov	r0, r4
   1359e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   135a2:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   135a6:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   135aa:	4683      	mov	fp, r0
		cont->next = NULL;
   135ac:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   135ae:	e7db      	b.n	13568 <log_msg_create_n+0x48>
   135b0:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   135b4:	6967      	ldr	r7, [r4, #20]
   135b6:	61a3      	str	r3, [r4, #24]
   135b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   135bc:	3d02      	subs	r5, #2
   135be:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   135c0:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   135c4:	2d07      	cmp	r5, #7
   135c6:	462e      	mov	r6, r5
   135c8:	bf28      	it	cs
   135ca:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   135cc:	ea4f 0986 	mov.w	r9, r6, lsl #2
   135d0:	4641      	mov	r1, r8
   135d2:	1d38      	adds	r0, r7, #4
   135d4:	464a      	mov	r2, r9
   135d6:	f7f9 fab9 	bl	cb4c <memcpy>
	while (nargs != 0U) {
   135da:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   135dc:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   135de:	44c8      	add	r8, r9
	while (nargs != 0U) {
   135e0:	d1f0      	bne.n	135c4 <log_msg_create_n+0xa4>
   135e2:	e7db      	b.n	1359c <log_msg_create_n+0x7c>
   135e4:	00030384 	.word	0x00030384
   135e8:	0002ff0d 	.word	0x0002ff0d
   135ec:	00030358 	.word	0x00030358

000135f0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   135f0:	b40e      	push	{r1, r2, r3}
   135f2:	b503      	push	{r0, r1, lr}
   135f4:	ab03      	add	r3, sp, #12
   135f6:	f853 2b04 	ldr.w	r2, [r3], #4
   135fa:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   135fc:	4804      	ldr	r0, [pc, #16]	; (13610 <print_formatted+0x20>)
	va_start(args, fmt);
   135fe:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   13600:	f7fe fdee 	bl	121e0 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   13604:	2000      	movs	r0, #0
   13606:	b002      	add	sp, #8
   13608:	f85d eb04 	ldr.w	lr, [sp], #4
   1360c:	b003      	add	sp, #12
   1360e:	4770      	bx	lr
   13610:	00013851 	.word	0x00013851

00013614 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   13614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   13618:	f011 0402 	ands.w	r4, r1, #2
{
   1361c:	b085      	sub	sp, #20
   1361e:	4606      	mov	r6, r0
   13620:	4690      	mov	r8, r2
   13622:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   13626:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1362a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1362e:	d007      	beq.n	13640 <prefix_print+0x2c>
	if (!format) {
   13630:	f011 0f44 	tst.w	r1, #68	; 0x44
   13634:	d137      	bne.n	136a6 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   13636:	461a      	mov	r2, r3
   13638:	4932      	ldr	r1, [pc, #200]	; (13704 <prefix_print+0xf0>)
   1363a:	f7ff ffd9 	bl	135f0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   1363e:	4604      	mov	r4, r0
	if (color) {
   13640:	f1b9 0f00 	cmp.w	r9, #0
   13644:	d00a      	beq.n	1365c <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   13646:	4b30      	ldr	r3, [pc, #192]	; (13708 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   13648:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   1364a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   1364e:	4b2f      	ldr	r3, [pc, #188]	; (1370c <prefix_print+0xf8>)
   13650:	492f      	ldr	r1, [pc, #188]	; (13710 <prefix_print+0xfc>)
   13652:	2a00      	cmp	r2, #0
   13654:	bf08      	it	eq
   13656:	461a      	moveq	r2, r3
   13658:	f7ff ffca 	bl	135f0 <print_formatted>
	if (level_on) {
   1365c:	b13d      	cbz	r5, 1366e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   1365e:	4b2d      	ldr	r3, [pc, #180]	; (13714 <prefix_print+0x100>)
   13660:	4630      	mov	r0, r6
   13662:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   13666:	492c      	ldr	r1, [pc, #176]	; (13718 <prefix_print+0x104>)
   13668:	f7ff ffc2 	bl	135f0 <print_formatted>
   1366c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   1366e:	f1b8 0f00 	cmp.w	r8, #0
   13672:	d044      	beq.n	136fe <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   13674:	2301      	movs	r3, #1
   13676:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   1367a:	4b28      	ldr	r3, [pc, #160]	; (1371c <prefix_print+0x108>)
   1367c:	f017 0f10 	tst.w	r7, #16
   13680:	4f27      	ldr	r7, [pc, #156]	; (13720 <prefix_print+0x10c>)
   13682:	bf18      	it	ne
   13684:	461f      	movne	r7, r3
   13686:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1368a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1368e:	f7ff fc8b 	bl	12fa8 <log_source_name_get>
   13692:	4639      	mov	r1, r7
   13694:	4602      	mov	r2, r0
   13696:	4630      	mov	r0, r6
   13698:	f7ff ffaa 	bl	135f0 <print_formatted>
   1369c:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   1369e:	4420      	add	r0, r4
   136a0:	b005      	add	sp, #20
   136a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   136a6:	4a1f      	ldr	r2, [pc, #124]	; (13724 <prefix_print+0x110>)
   136a8:	6811      	ldr	r1, [r2, #0]
   136aa:	b331      	cbz	r1, 136fa <prefix_print+0xe6>
		timestamp /= timestamp_div;
   136ac:	4a1e      	ldr	r2, [pc, #120]	; (13728 <prefix_print+0x114>)
   136ae:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   136b2:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   136b4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   136b8:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   136bc:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   136c0:	fbb4 f2fe 	udiv	r2, r4, lr
   136c4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   136c8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   136cc:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   136d0:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   136d4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   136d8:	fb01 441b 	mls	r4, r1, fp, r4
   136dc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   136e0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   136e4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   136e8:	e9cd b101 	strd	fp, r1, [sp, #4]
   136ec:	fb0a e113 	mls	r1, sl, r3, lr
   136f0:	9100      	str	r1, [sp, #0]
   136f2:	490e      	ldr	r1, [pc, #56]	; (1372c <prefix_print+0x118>)
   136f4:	f7ff ff7c 	bl	135f0 <print_formatted>
   136f8:	e7a1      	b.n	1363e <prefix_print+0x2a>
		length = 0;
   136fa:	4608      	mov	r0, r1
   136fc:	e79f      	b.n	1363e <prefix_print+0x2a>
	total += print_formatted(log_output,
   136fe:	4f08      	ldr	r7, [pc, #32]	; (13720 <prefix_print+0x10c>)
   13700:	e7c1      	b.n	13686 <prefix_print+0x72>
   13702:	bf00      	nop
   13704:	0003039d 	.word	0x0003039d
   13708:	0002edf0 	.word	0x0002edf0
   1370c:	0003038f 	.word	0x0003038f
   13710:	00031c71 	.word	0x00031c71
   13714:	0002ee04 	.word	0x0002ee04
   13718:	000303c2 	.word	0x000303c2
   1371c:	00030399 	.word	0x00030399
   13720:	00030394 	.word	0x00030394
   13724:	20021554 	.word	0x20021554
   13728:	20021558 	.word	0x20021558
   1372c:	000303a6 	.word	0x000303a6

00013730 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   13730:	b538      	push	{r3, r4, r5, lr}
   13732:	460c      	mov	r4, r1
	if (color) {
   13734:	07e1      	lsls	r1, r4, #31
{
   13736:	4605      	mov	r5, r0
	if (color) {
   13738:	d503      	bpl.n	13742 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   1373a:	4a08      	ldr	r2, [pc, #32]	; (1375c <postfix_print+0x2c>)
   1373c:	4908      	ldr	r1, [pc, #32]	; (13760 <postfix_print+0x30>)
   1373e:	f7ff ff57 	bl	135f0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13742:	06e2      	lsls	r2, r4, #27
   13744:	d408      	bmi.n	13758 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13746:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   13748:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1374a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1374e:	bf4c      	ite	mi
   13750:	4904      	ldrmi	r1, [pc, #16]	; (13764 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   13752:	4905      	ldrpl	r1, [pc, #20]	; (13768 <postfix_print+0x38>)
   13754:	f7ff bf4c 	b.w	135f0 <print_formatted>
}
   13758:	bd38      	pop	{r3, r4, r5, pc}
   1375a:	bf00      	nop
   1375c:	0003038f 	.word	0x0003038f
   13760:	00031c71 	.word	0x00031c71
   13764:	0003053b 	.word	0x0003053b
   13768:	000325f2 	.word	0x000325f2

0001376c <hexdump_line_print>:
{
   1376c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13770:	461d      	mov	r5, r3
   13772:	9b08      	ldr	r3, [sp, #32]
   13774:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13776:	06da      	lsls	r2, r3, #27
{
   13778:	4604      	mov	r4, r0
   1377a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1377c:	d405      	bmi.n	1378a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1377e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   13780:	bf4c      	ite	mi
   13782:	492b      	ldrmi	r1, [pc, #172]	; (13830 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   13784:	492b      	ldrpl	r1, [pc, #172]	; (13834 <hexdump_line_print+0xc8>)
   13786:	f7ff ff33 	bl	135f0 <print_formatted>
{
   1378a:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   1378e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1383c <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   13792:	45a8      	cmp	r8, r5
   13794:	db2d      	blt.n	137f2 <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13796:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   13798:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 13840 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   1379c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 13844 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   137a0:	f8df a098 	ldr.w	sl, [pc, #152]	; 1383c <hexdump_line_print+0xd0>
		if (i < length) {
   137a4:	42bd      	cmp	r5, r7
   137a6:	d232      	bcs.n	1380e <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   137a8:	4649      	mov	r1, r9
   137aa:	4620      	mov	r0, r4
   137ac:	5d72      	ldrb	r2, [r6, r5]
   137ae:	f7ff ff1f 	bl	135f0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   137b2:	3501      	adds	r5, #1
   137b4:	2d10      	cmp	r5, #16
   137b6:	d123      	bne.n	13800 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   137b8:	4620      	mov	r0, r4
   137ba:	491f      	ldr	r1, [pc, #124]	; (13838 <hexdump_line_print+0xcc>)
   137bc:	f7ff ff18 	bl	135f0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   137c0:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   137c2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1383c <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   137c6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 13848 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   137ca:	f8df a080 	ldr.w	sl, [pc, #128]	; 1384c <hexdump_line_print+0xe0>
		if (i < length) {
   137ce:	42af      	cmp	r7, r5
   137d0:	d929      	bls.n	13826 <hexdump_line_print+0xba>
			char c = (char)data[i];
   137d2:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   137d4:	4651      	mov	r1, sl
   137d6:	f812 3009 	ldrb.w	r3, [r2, r9]
   137da:	4620      	mov	r0, r4
   137dc:	f013 0f97 	tst.w	r3, #151	; 0x97
   137e0:	bf08      	it	eq
   137e2:	222e      	moveq	r2, #46	; 0x2e
   137e4:	f7ff ff04 	bl	135f0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   137e8:	3501      	adds	r5, #1
   137ea:	2d10      	cmp	r5, #16
   137ec:	d114      	bne.n	13818 <hexdump_line_print+0xac>
}
   137ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   137f2:	4649      	mov	r1, r9
   137f4:	4620      	mov	r0, r4
   137f6:	f7ff fefb 	bl	135f0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   137fa:	f108 0801 	add.w	r8, r8, #1
   137fe:	e7c8      	b.n	13792 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   13800:	076a      	lsls	r2, r5, #29
   13802:	d1cf      	bne.n	137a4 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   13804:	4651      	mov	r1, sl
   13806:	4620      	mov	r0, r4
   13808:	f7ff fef2 	bl	135f0 <print_formatted>
   1380c:	e7ca      	b.n	137a4 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   1380e:	4641      	mov	r1, r8
   13810:	4620      	mov	r0, r4
   13812:	f7ff feed 	bl	135f0 <print_formatted>
   13816:	e7cc      	b.n	137b2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   13818:	076b      	lsls	r3, r5, #29
   1381a:	d1d8      	bne.n	137ce <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   1381c:	4641      	mov	r1, r8
   1381e:	4620      	mov	r0, r4
   13820:	f7ff fee6 	bl	135f0 <print_formatted>
   13824:	e7d3      	b.n	137ce <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   13826:	4641      	mov	r1, r8
   13828:	4620      	mov	r0, r4
   1382a:	f7ff fee1 	bl	135f0 <print_formatted>
   1382e:	e7db      	b.n	137e8 <hexdump_line_print+0x7c>
   13830:	0003053b 	.word	0x0003053b
   13834:	000325f2 	.word	0x000325f2
   13838:	000303d2 	.word	0x000303d2
   1383c:	000303d0 	.word	0x000303d0
   13840:	000303ce 	.word	0x000303ce
   13844:	000303c8 	.word	0x000303c8
   13848:	0002f3c9 	.word	0x0002f3c9
   1384c:	000303d4 	.word	0x000303d4

00013850 <out_func>:
{
   13850:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   13852:	684b      	ldr	r3, [r1, #4]
{
   13854:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   13856:	681a      	ldr	r2, [r3, #0]
   13858:	68cb      	ldr	r3, [r1, #12]
{
   1385a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1385c:	429a      	cmp	r2, r3
   1385e:	d102      	bne.n	13866 <out_func+0x16>
		log_output_flush(out_ctx);
   13860:	4608      	mov	r0, r1
   13862:	f019 f885 	bl	2c970 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13866:	6863      	ldr	r3, [r4, #4]
   13868:	e8d3 2fef 	ldaex	r2, [r3]
   1386c:	1c51      	adds	r1, r2, #1
   1386e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13872:	2800      	cmp	r0, #0
   13874:	d1f8      	bne.n	13868 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   13876:	68a3      	ldr	r3, [r4, #8]
   13878:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1387a:	6863      	ldr	r3, [r4, #4]
   1387c:	681a      	ldr	r2, [r3, #0]
   1387e:	68e3      	ldr	r3, [r4, #12]
   13880:	429a      	cmp	r2, r3
   13882:	d909      	bls.n	13898 <out_func+0x48>
   13884:	4905      	ldr	r1, [pc, #20]	; (1389c <out_func+0x4c>)
   13886:	4806      	ldr	r0, [pc, #24]	; (138a0 <out_func+0x50>)
   13888:	2378      	movs	r3, #120	; 0x78
   1388a:	4a06      	ldr	r2, [pc, #24]	; (138a4 <out_func+0x54>)
   1388c:	f018 fbb7 	bl	2bffe <printk>
   13890:	2178      	movs	r1, #120	; 0x78
   13892:	4804      	ldr	r0, [pc, #16]	; (138a4 <out_func+0x54>)
   13894:	f018 fdd0 	bl	2c438 <assert_post_action>
}
   13898:	2000      	movs	r0, #0
   1389a:	bd38      	pop	{r3, r4, r5, pc}
   1389c:	00030406 	.word	0x00030406
   138a0:	0002ff0d 	.word	0x0002ff0d
   138a4:	000303d7 	.word	0x000303d7

000138a8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   138a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   138ac:	7a8b      	ldrb	r3, [r1, #10]
   138ae:	4616      	mov	r6, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   138b0:	f013 0707 	ands.w	r7, r3, #7
{
   138b4:	4604      	mov	r4, r0
   138b6:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   138b8:	7a0a      	ldrb	r2, [r1, #8]
   138ba:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   138bc:	d020      	beq.n	13900 <log_output_msg_process+0x58>
   138be:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   138c0:	8949      	ldrh	r1, [r1, #10]
   138c2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   138c6:	f3c1 1189 	ubfx	r1, r1, #6, #10
   138ca:	e9cd 7300 	strd	r7, r3, [sp]
   138ce:	9102      	str	r1, [sp, #8]
   138d0:	68eb      	ldr	r3, [r5, #12]
   138d2:	4631      	mov	r1, r6
   138d4:	f002 0201 	and.w	r2, r2, #1
   138d8:	f7ff fe9c 	bl	13614 <prefix_print>
   138dc:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   138de:	7a2b      	ldrb	r3, [r5, #8]
   138e0:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   138e2:	f013 0801 	ands.w	r8, r3, #1
   138e6:	d00d      	beq.n	13904 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
   138e8:	4621      	mov	r1, r4
   138ea:	4628      	mov	r0, r5
   138ec:	f018 fee3 	bl	2c6b6 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   138f0:	2f00      	cmp	r7, #0
   138f2:	d03c      	beq.n	1396e <log_output_msg_process+0xc6>
		postfix_print(log_output, flags, level);
   138f4:	463a      	mov	r2, r7
   138f6:	4631      	mov	r1, r6
   138f8:	4620      	mov	r0, r4
   138fa:	f7ff ff19 	bl	13730 <postfix_print>
   138fe:	e036      	b.n	1396e <log_output_msg_process+0xc6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13900:	46b9      	mov	r9, r7
   13902:	e7ec      	b.n	138de <log_output_msg_process+0x36>
	} else if (raw_string) {
   13904:	2f00      	cmp	r7, #0
   13906:	d138      	bne.n	1397a <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(log_output->size);
   13908:	68e3      	ldr	r3, [r4, #12]
   1390a:	b95b      	cbnz	r3, 13924 <log_output_msg_process+0x7c>
   1390c:	492a      	ldr	r1, [pc, #168]	; (139b8 <log_output_msg_process+0x110>)
   1390e:	482b      	ldr	r0, [pc, #172]	; (139bc <log_output_msg_process+0x114>)
   13910:	f240 13bb 	movw	r3, #443	; 0x1bb
   13914:	4a2a      	ldr	r2, [pc, #168]	; (139c0 <log_output_msg_process+0x118>)
   13916:	f018 fb72 	bl	2bffe <printk>
   1391a:	f240 11bb 	movw	r1, #443	; 0x1bb
   1391e:	4828      	ldr	r0, [pc, #160]	; (139c0 <log_output_msg_process+0x118>)
   13920:	f018 fd8a 	bl	2c438 <assert_post_action>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13924:	2600      	movs	r6, #0
		length = log_output->size;
   13926:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   13928:	aa06      	add	r2, sp, #24
		length = log_output->size;
   1392a:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   1392c:	4628      	mov	r0, r5
   1392e:	4633      	mov	r3, r6
   13930:	68a1      	ldr	r1, [r4, #8]
   13932:	f018 feac 	bl	2c68e <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   13936:	9a06      	ldr	r2, [sp, #24]
   13938:	6863      	ldr	r3, [r4, #4]
   1393a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   1393c:	b14a      	cbz	r2, 13952 <log_output_msg_process+0xaa>
			eol = (log_output->buf[length - 1] == '\n');
   1393e:	68a3      	ldr	r3, [r4, #8]
   13940:	4413      	add	r3, r2
   13942:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   13946:	f1a8 030a 	sub.w	r3, r8, #10
   1394a:	f1d3 0800 	rsbs	r8, r3, #0
   1394e:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(log_output);
   13952:	4620      	mov	r0, r4
   13954:	f019 f80c 	bl	2c970 <log_output_flush>
		offset += length;
   13958:	9b06      	ldr	r3, [sp, #24]
   1395a:	441e      	add	r6, r3
	} while (length > 0);
   1395c:	2b00      	cmp	r3, #0
   1395e:	d1e2      	bne.n	13926 <log_output_msg_process+0x7e>
	if (eol) {
   13960:	f1b8 0f00 	cmp.w	r8, #0
   13964:	d003      	beq.n	1396e <log_output_msg_process+0xc6>
		print_formatted(log_output, "\r");
   13966:	4620      	mov	r0, r4
   13968:	4916      	ldr	r1, [pc, #88]	; (139c4 <log_output_msg_process+0x11c>)
   1396a:	f7ff fe41 	bl	135f0 <print_formatted>
	}

	log_output_flush(log_output);
   1396e:	4620      	mov	r0, r4
   13970:	f018 fffe 	bl	2c970 <log_output_flush>
}
   13974:	b00a      	add	sp, #40	; 0x28
   13976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   1397a:	4628      	mov	r0, r5
   1397c:	f018 fe85 	bl	2c68a <log_msg_str_get>
   13980:	4911      	ldr	r1, [pc, #68]	; (139c8 <log_output_msg_process+0x120>)
   13982:	4602      	mov	r2, r0
   13984:	4620      	mov	r0, r4
   13986:	f7ff fe33 	bl	135f0 <print_formatted>
		length = sizeof(buf);
   1398a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1398e:	aa05      	add	r2, sp, #20
   13990:	4643      	mov	r3, r8
   13992:	4628      	mov	r0, r5
   13994:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   13996:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1399a:	f018 fe78 	bl	2c68e <log_msg_hexdump_data_get>
		if (length) {
   1399e:	9a05      	ldr	r2, [sp, #20]
   139a0:	2a00      	cmp	r2, #0
   139a2:	d0a7      	beq.n	138f4 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
   139a4:	464b      	mov	r3, r9
   139a6:	4620      	mov	r0, r4
   139a8:	9600      	str	r6, [sp, #0]
   139aa:	a906      	add	r1, sp, #24
   139ac:	f7ff fede 	bl	1376c <hexdump_line_print>
			offset += length;
   139b0:	9b05      	ldr	r3, [sp, #20]
   139b2:	4498      	add	r8, r3
		length = sizeof(buf);
   139b4:	e7eb      	b.n	1398e <log_output_msg_process+0xe6>
   139b6:	bf00      	nop
   139b8:	00030436 	.word	0x00030436
   139bc:	0002ff0d 	.word	0x0002ff0d
   139c0:	000303d7 	.word	0x000303d7
   139c4:	00030447 	.word	0x00030447
   139c8:	00031c71 	.word	0x00031c71

000139cc <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   139cc:	f242 730f 	movw	r3, #9999	; 0x270f
{
   139d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   139d2:	428b      	cmp	r3, r1
   139d4:	bf28      	it	cs
   139d6:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   139d8:	6805      	ldr	r5, [r0, #0]
{
   139da:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   139dc:	2105      	movs	r1, #5
   139de:	4668      	mov	r0, sp
   139e0:	4a0d      	ldr	r2, [pc, #52]	; (13a18 <log_output_dropped_process+0x4c>)
   139e2:	f018 fb19 	bl	2c018 <snprintk>
   139e6:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   139e8:	6863      	ldr	r3, [r4, #4]
   139ea:	4628      	mov	r0, r5
   139ec:	220b      	movs	r2, #11
   139ee:	685b      	ldr	r3, [r3, #4]
   139f0:	490a      	ldr	r1, [pc, #40]	; (13a1c <log_output_dropped_process+0x50>)
   139f2:	f018 fe53 	bl	2c69c <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   139f6:	6863      	ldr	r3, [r4, #4]
   139f8:	4632      	mov	r2, r6
   139fa:	4669      	mov	r1, sp
   139fc:	4628      	mov	r0, r5
   139fe:	685b      	ldr	r3, [r3, #4]
   13a00:	f018 fe4c 	bl	2c69c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13a04:	6863      	ldr	r3, [r4, #4]
   13a06:	221b      	movs	r2, #27
   13a08:	4628      	mov	r0, r5
   13a0a:	685b      	ldr	r3, [r3, #4]
   13a0c:	4904      	ldr	r1, [pc, #16]	; (13a20 <log_output_dropped_process+0x54>)
   13a0e:	f018 fe45 	bl	2c69c <buffer_write>
		     log_output->control_block->ctx);
}
   13a12:	b002      	add	sp, #8
   13a14:	bd70      	pop	{r4, r5, r6, pc}
   13a16:	bf00      	nop
   13a18:	0002f92c 	.word	0x0002f92c
   13a1c:	00030485 	.word	0x00030485
   13a20:	00030469 	.word	0x00030469

00013a24 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   13a24:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   13a26:	2100      	movs	r1, #0
	timestamp_div = 1U;
   13a28:	4a07      	ldr	r2, [pc, #28]	; (13a48 <log_output_timestamp_freq_set+0x24>)
{
   13a2a:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   13a2c:	4c07      	ldr	r4, [pc, #28]	; (13a4c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   13a2e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   13a30:	42a0      	cmp	r0, r4
   13a32:	d804      	bhi.n	13a3e <log_output_timestamp_freq_set+0x1a>
   13a34:	b101      	cbz	r1, 13a38 <log_output_timestamp_freq_set+0x14>
   13a36:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   13a38:	4b05      	ldr	r3, [pc, #20]	; (13a50 <log_output_timestamp_freq_set+0x2c>)
   13a3a:	6018      	str	r0, [r3, #0]
}
   13a3c:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   13a3e:	2101      	movs	r1, #1
		frequency /= 2U;
   13a40:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13a42:	005b      	lsls	r3, r3, #1
   13a44:	e7f4      	b.n	13a30 <log_output_timestamp_freq_set+0xc>
   13a46:	bf00      	nop
   13a48:	20021558 	.word	0x20021558
   13a4c:	000f4240 	.word	0x000f4240
   13a50:	20021554 	.word	0x20021554

00013a54 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   13a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a56:	460d      	mov	r5, r1
   13a58:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   13a5a:	4f06      	ldr	r7, [pc, #24]	; (13a74 <char_out+0x20>)
   13a5c:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   13a5e:	42b4      	cmp	r4, r6
   13a60:	d101      	bne.n	13a66 <char_out+0x12>
	}

	return length;
}
   13a62:	4628      	mov	r0, r5
   13a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   13a66:	6838      	ldr	r0, [r7, #0]
   13a68:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   13a6c:	6883      	ldr	r3, [r0, #8]
   13a6e:	685b      	ldr	r3, [r3, #4]
   13a70:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   13a72:	e7f4      	b.n	13a5e <char_out+0xa>
   13a74:	20021570 	.word	0x20021570

00013a78 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   13a78:	4801      	ldr	r0, [pc, #4]	; (13a80 <panic+0x8>)
   13a7a:	f018 bf79 	b.w	2c970 <log_output_flush>
   13a7e:	bf00      	nop
   13a80:	0002ee30 	.word	0x0002ee30

00013a84 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   13a84:	4801      	ldr	r0, [pc, #4]	; (13a8c <dropped+0x8>)
   13a86:	f7ff bfa1 	b.w	139cc <log_output_dropped_process>
   13a8a:	bf00      	nop
   13a8c:	0002ee30 	.word	0x0002ee30

00013a90 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   13a90:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   13a92:	4806      	ldr	r0, [pc, #24]	; (13aac <log_backend_uart_init+0x1c>)
   13a94:	f00e fb70 	bl	22178 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13a98:	4b05      	ldr	r3, [pc, #20]	; (13ab0 <log_backend_uart_init+0x20>)
   13a9a:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
   13a9c:	b928      	cbnz	r0, 13aaa <log_backend_uart_init+0x1a>
   13a9e:	212d      	movs	r1, #45	; 0x2d
   13aa0:	4b04      	ldr	r3, [pc, #16]	; (13ab4 <log_backend_uart_init+0x24>)
   13aa2:	4a05      	ldr	r2, [pc, #20]	; (13ab8 <log_backend_uart_init+0x28>)
   13aa4:	4805      	ldr	r0, [pc, #20]	; (13abc <log_backend_uart_init+0x2c>)
   13aa6:	f011 ff0d 	bl	258c4 <__assert_func>
}
   13aaa:	bd08      	pop	{r3, pc}
   13aac:	00030491 	.word	0x00030491
   13ab0:	20021570 	.word	0x20021570
   13ab4:	00030498 	.word	0x00030498
   13ab8:	000304ef 	.word	0x000304ef
   13abc:	000304a9 	.word	0x000304a9

00013ac0 <put>:
{
   13ac0:	b510      	push	{r4, lr}
   13ac2:	460c      	mov	r4, r1
	log_msg_get(msg);
   13ac4:	4608      	mov	r0, r1
   13ac6:	f018 fda6 	bl	2c616 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   13aca:	4621      	mov	r1, r4
   13acc:	4804      	ldr	r0, [pc, #16]	; (13ae0 <put+0x20>)
   13ace:	220f      	movs	r2, #15
   13ad0:	f7ff feea 	bl	138a8 <log_output_msg_process>
	log_msg_put(msg);
   13ad4:	4620      	mov	r0, r4
}
   13ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ada:	f018 bdc7 	b.w	2c66c <log_msg_put>
   13ade:	bf00      	nop
   13ae0:	0002ee30 	.word	0x0002ee30

00013ae4 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   13ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13ae8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 13b88 <z_impl_zsock_socket+0xa4>
{
   13aec:	4605      	mov	r5, r0
   13aee:	460e      	mov	r6, r1
   13af0:	4617      	mov	r7, r2
   13af2:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13af4:	4c1e      	ldr	r4, [pc, #120]	; (13b70 <z_impl_zsock_socket+0x8c>)
   13af6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13b8c <z_impl_zsock_socket+0xa8>
   13afa:	454c      	cmp	r4, r9
   13afc:	d90c      	bls.n	13b18 <z_impl_zsock_socket+0x34>
   13afe:	491d      	ldr	r1, [pc, #116]	; (13b74 <z_impl_zsock_socket+0x90>)
   13b00:	23c0      	movs	r3, #192	; 0xc0
   13b02:	4642      	mov	r2, r8
   13b04:	481c      	ldr	r0, [pc, #112]	; (13b78 <z_impl_zsock_socket+0x94>)
   13b06:	f018 fa7a 	bl	2bffe <printk>
   13b0a:	481c      	ldr	r0, [pc, #112]	; (13b7c <z_impl_zsock_socket+0x98>)
   13b0c:	f018 fa77 	bl	2bffe <printk>
   13b10:	21c0      	movs	r1, #192	; 0xc0
   13b12:	4640      	mov	r0, r8
   13b14:	f018 fc90 	bl	2c438 <assert_post_action>
   13b18:	4554      	cmp	r4, sl
   13b1a:	d307      	bcc.n	13b2c <z_impl_zsock_socket+0x48>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   13b1c:	f019 f8bd 	bl	2cc9a <__errno>
   13b20:	236a      	movs	r3, #106	; 0x6a
   13b22:	6003      	str	r3, [r0, #0]
	return -1;
}
   13b24:	f04f 30ff 	mov.w	r0, #4294967295
   13b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   13b2c:	6823      	ldr	r3, [r4, #0]
   13b2e:	42ab      	cmp	r3, r5
   13b30:	d000      	beq.n	13b34 <z_impl_zsock_socket+0x50>
   13b32:	b9db      	cbnz	r3, 13b6c <z_impl_zsock_socket+0x88>
		NET_ASSERT(sock_family->is_supported);
   13b34:	6863      	ldr	r3, [r4, #4]
   13b36:	b963      	cbnz	r3, 13b52 <z_impl_zsock_socket+0x6e>
   13b38:	4911      	ldr	r1, [pc, #68]	; (13b80 <z_impl_zsock_socket+0x9c>)
   13b3a:	23c6      	movs	r3, #198	; 0xc6
   13b3c:	4642      	mov	r2, r8
   13b3e:	480e      	ldr	r0, [pc, #56]	; (13b78 <z_impl_zsock_socket+0x94>)
   13b40:	f018 fa5d 	bl	2bffe <printk>
   13b44:	480f      	ldr	r0, [pc, #60]	; (13b84 <z_impl_zsock_socket+0xa0>)
   13b46:	f018 fa5a 	bl	2bffe <printk>
   13b4a:	21c6      	movs	r1, #198	; 0xc6
   13b4c:	4640      	mov	r0, r8
   13b4e:	f018 fc73 	bl	2c438 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   13b52:	463a      	mov	r2, r7
   13b54:	4631      	mov	r1, r6
   13b56:	4628      	mov	r0, r5
   13b58:	6863      	ldr	r3, [r4, #4]
   13b5a:	4798      	blx	r3
   13b5c:	b130      	cbz	r0, 13b6c <z_impl_zsock_socket+0x88>
		return sock_family->handler(family, type, proto);
   13b5e:	463a      	mov	r2, r7
   13b60:	4631      	mov	r1, r6
   13b62:	4628      	mov	r0, r5
   13b64:	68a3      	ldr	r3, [r4, #8]
}
   13b66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   13b6a:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13b6c:	340c      	adds	r4, #12
   13b6e:	e7c4      	b.n	13afa <z_impl_zsock_socket+0x16>
   13b70:	0002ebb8 	.word	0x0002ebb8
   13b74:	0003058b 	.word	0x0003058b
   13b78:	0002ff0d 	.word	0x0002ff0d
   13b7c:	000305b8 	.word	0x000305b8
   13b80:	00030571 	.word	0x00030571
   13b84:	0003053a 	.word	0x0003053a
   13b88:	0002ebc4 	.word	0x0002ebc4
   13b8c:	0003053d 	.word	0x0003053d

00013b90 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   13b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   13b94:	1e14      	subs	r4, r2, #0
{
   13b96:	b09b      	sub	sp, #108	; 0x6c
   13b98:	4606      	mov	r6, r0
   13b9a:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   13b9c:	db30      	blt.n	13c00 <z_impl_zsock_poll+0x70>
   13b9e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   13ba2:	f240 30e7 	movw	r0, #999	; 0x3e7
   13ba6:	2100      	movs	r1, #0
   13ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13bac:	2300      	movs	r3, #0
   13bae:	fbc5 0104 	smlal	r0, r1, r5, r4
   13bb2:	f7f8 fe51 	bl	c858 <__aeabi_uldivmod>
   13bb6:	4682      	mov	sl, r0
   13bb8:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   13bba:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   13bbc:	4650      	mov	r0, sl
   13bbe:	4659      	mov	r1, fp
   13bc0:	f01a fdb8 	bl	2e734 <z_timeout_end_calc>

	pev = poll_events;
   13bc4:	ab0b      	add	r3, sp, #44	; 0x2c
   13bc6:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   13bc8:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   13bca:	4633      	mov	r3, r6
	bool offload = false;
   13bcc:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   13bce:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   13bd2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   13bd6:	f1b9 0f00 	cmp.w	r9, #0
   13bda:	d118      	bne.n	13c0e <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   13bdc:	f1b8 0f00 	cmp.w	r8, #0
   13be0:	d049      	beq.n	13c76 <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   13be2:	9b03      	ldr	r3, [sp, #12]
   13be4:	9401      	str	r4, [sp, #4]
   13be6:	9300      	str	r3, [sp, #0]
   13be8:	f44f 7282 	mov.w	r2, #260	; 0x104
   13bec:	4633      	mov	r3, r6
   13bee:	4629      	mov	r1, r5
   13bf0:	4638      	mov	r0, r7
   13bf2:	f018 ff02 	bl	2c9fa <z_fdtable_call_ioctl>
   13bf6:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   13bf8:	4620      	mov	r0, r4
   13bfa:	b01b      	add	sp, #108	; 0x6c
   13bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   13c00:	f04f 3aff 	mov.w	sl, #4294967295
   13c04:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   13c08:	f04f 34ff 	mov.w	r4, #4294967295
   13c0c:	e7d5      	b.n	13bba <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   13c0e:	6818      	ldr	r0, [r3, #0]
   13c10:	2800      	cmp	r0, #0
   13c12:	db2c      	blt.n	13c6e <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   13c14:	a90a      	add	r1, sp, #40	; 0x28
   13c16:	9306      	str	r3, [sp, #24]
   13c18:	f7fe f9e6 	bl	11fe8 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   13c1c:	9b06      	ldr	r3, [sp, #24]
   13c1e:	4601      	mov	r1, r0
   13c20:	b328      	cbz	r0, 13c6e <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   13c22:	aa1a      	add	r2, sp, #104	; 0x68
   13c24:	9201      	str	r2, [sp, #4]
   13c26:	aa09      	add	r2, sp, #36	; 0x24
   13c28:	9200      	str	r2, [sp, #0]
   13c2a:	9006      	str	r0, [sp, #24]
   13c2c:	f44f 7281 	mov.w	r2, #258	; 0x102
   13c30:	980a      	ldr	r0, [sp, #40]	; 0x28
   13c32:	9307      	str	r3, [sp, #28]
   13c34:	f018 fee1 	bl	2c9fa <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   13c38:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   13c3c:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   13c3e:	9b07      	ldr	r3, [sp, #28]
   13c40:	d011      	beq.n	13c66 <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   13c42:	f110 0f12 	cmn.w	r0, #18
   13c46:	9906      	ldr	r1, [sp, #24]
   13c48:	d105      	bne.n	13c56 <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   13c4a:	b90f      	cbnz	r7, 13c50 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   13c4c:	460d      	mov	r5, r1
   13c4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   13c50:	f04f 0801 	mov.w	r8, #1
   13c54:	e00b      	b.n	13c6e <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   13c56:	b150      	cbz	r0, 13c6e <z_impl_zsock_poll+0xde>
   13c58:	9203      	str	r2, [sp, #12]
				errno = -result;
   13c5a:	f019 f81e 	bl	2cc9a <__errno>
   13c5e:	9a03      	ldr	r2, [sp, #12]
   13c60:	4252      	negs	r2, r2
   13c62:	6002      	str	r2, [r0, #0]
				return -1;
   13c64:	e03e      	b.n	13ce4 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   13c66:	f04f 0a00 	mov.w	sl, #0
   13c6a:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   13c6e:	3308      	adds	r3, #8
   13c70:	f109 39ff 	add.w	r9, r9, #4294967295
   13c74:	e7af      	b.n	13bd6 <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13c76:	ea5a 030b 	orrs.w	r3, sl, fp
   13c7a:	d016      	beq.n	13caa <z_impl_zsock_poll+0x11a>
   13c7c:	f1bb 3fff 	cmp.w	fp, #4294967295
   13c80:	bf08      	it	eq
   13c82:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13c86:	d010      	beq.n	13caa <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   13c88:	f011 f9ca 	bl	25020 <z_tick_get>
   13c8c:	9b04      	ldr	r3, [sp, #16]
   13c8e:	ebb3 0a00 	subs.w	sl, r3, r0
   13c92:	9b05      	ldr	r3, [sp, #20]
   13c94:	eb63 0b01 	sbc.w	fp, r3, r1
   13c98:	f1ba 0f00 	cmp.w	sl, #0
   13c9c:	f17b 0300 	sbcs.w	r3, fp, #0
   13ca0:	bfbc      	itt	lt
   13ca2:	f04f 0a00 	movlt.w	sl, #0
   13ca6:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   13caa:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   13cae:	9909      	ldr	r1, [sp, #36]	; 0x24
   13cb0:	ac0b      	add	r4, sp, #44	; 0x2c
   13cb2:	4b34      	ldr	r3, [pc, #208]	; (13d84 <z_impl_zsock_poll+0x1f4>)
   13cb4:	1b09      	subs	r1, r1, r4
   13cb6:	1089      	asrs	r1, r1, #2
   13cb8:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   13cba:	465b      	mov	r3, fp
   13cbc:	4652      	mov	r2, sl
   13cbe:	4620      	mov	r0, r4
   13cc0:	f011 fc76 	bl	255b0 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   13cc4:	f100 030b 	add.w	r3, r0, #11
   13cc8:	2b0b      	cmp	r3, #11
   13cca:	4607      	mov	r7, r0
   13ccc:	d806      	bhi.n	13cdc <z_impl_zsock_poll+0x14c>
   13cce:	f640 0581 	movw	r5, #2177	; 0x881
   13cd2:	40dd      	lsrs	r5, r3
   13cd4:	43ed      	mvns	r5, r5
   13cd6:	f015 0501 	ands.w	r5, r5, #1
   13cda:	d006      	beq.n	13cea <z_impl_zsock_poll+0x15a>
			errno = -ret;
   13cdc:	f018 ffdd 	bl	2cc9a <__errno>
   13ce0:	427f      	negs	r7, r7
   13ce2:	6007      	str	r7, [r0, #0]
			return -1;
   13ce4:	f04f 34ff 	mov.w	r4, #4294967295
   13ce8:	e786      	b.n	13bf8 <z_impl_zsock_poll+0x68>
		pev = poll_events;
   13cea:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   13cec:	46b0      	mov	r8, r6
		ret = 0;
   13cee:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   13cf0:	9f03      	ldr	r7, [sp, #12]
   13cf2:	b9ef      	cbnz	r7, 13d30 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   13cf4:	2d00      	cmp	r5, #0
   13cf6:	f43f af7f 	beq.w	13bf8 <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   13cfa:	2c00      	cmp	r4, #0
   13cfc:	f73f af7c 	bgt.w	13bf8 <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13d00:	ea5a 030b 	orrs.w	r3, sl, fp
   13d04:	f43f af78 	beq.w	13bf8 <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13d08:	f1bb 3fff 	cmp.w	fp, #4294967295
   13d0c:	bf08      	it	eq
   13d0e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13d12:	d0cc      	beq.n	13cae <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   13d14:	f011 f984 	bl	25020 <z_tick_get>
   13d18:	9b04      	ldr	r3, [sp, #16]
   13d1a:	ebb3 0a00 	subs.w	sl, r3, r0
   13d1e:	9b05      	ldr	r3, [sp, #20]
   13d20:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   13d24:	f1ba 0f01 	cmp.w	sl, #1
   13d28:	f17b 0300 	sbcs.w	r3, fp, #0
   13d2c:	dabf      	bge.n	13cae <z_impl_zsock_poll+0x11e>
   13d2e:	e763      	b.n	13bf8 <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   13d30:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   13d34:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   13d38:	2800      	cmp	r0, #0
   13d3a:	db1c      	blt.n	13d76 <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   13d3c:	a90a      	add	r1, sp, #40	; 0x28
   13d3e:	f7fe f953 	bl	11fe8 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   13d42:	4601      	mov	r1, r0
   13d44:	b920      	cbnz	r0, 13d50 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   13d46:	2220      	movs	r2, #32
   13d48:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   13d4c:	3401      	adds	r4, #1
   13d4e:	e012      	b.n	13d76 <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   13d50:	ab09      	add	r3, sp, #36	; 0x24
   13d52:	f240 1203 	movw	r2, #259	; 0x103
   13d56:	9300      	str	r3, [sp, #0]
   13d58:	980a      	ldr	r0, [sp, #40]	; 0x28
   13d5a:	4643      	mov	r3, r8
   13d5c:	f018 fe4d 	bl	2c9fa <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   13d60:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   13d64:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   13d66:	d00a      	beq.n	13d7e <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   13d68:	2800      	cmp	r0, #0
   13d6a:	f47f af75 	bne.w	13c58 <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   13d6e:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   13d72:	2a00      	cmp	r2, #0
   13d74:	d1ea      	bne.n	13d4c <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   13d76:	f108 0808 	add.w	r8, r8, #8
   13d7a:	3f01      	subs	r7, #1
   13d7c:	e7b9      	b.n	13cf2 <z_impl_zsock_poll+0x162>
				retry = true;
   13d7e:	2501      	movs	r5, #1
   13d80:	e7f9      	b.n	13d76 <z_impl_zsock_poll+0x1e6>
   13d82:	bf00      	nop
   13d84:	cccccccd 	.word	0xcccccccd

00013d88 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   13d88:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   13d8a:	4605      	mov	r5, r0
   13d8c:	b948      	cbnz	r0, 13da2 <socket_offload_dns_register+0x1a>
   13d8e:	490c      	ldr	r1, [pc, #48]	; (13dc0 <socket_offload_dns_register+0x38>)
   13d90:	480c      	ldr	r0, [pc, #48]	; (13dc4 <socket_offload_dns_register+0x3c>)
   13d92:	2313      	movs	r3, #19
   13d94:	4a0c      	ldr	r2, [pc, #48]	; (13dc8 <socket_offload_dns_register+0x40>)
   13d96:	f018 f932 	bl	2bffe <printk>
   13d9a:	2113      	movs	r1, #19
   13d9c:	480a      	ldr	r0, [pc, #40]	; (13dc8 <socket_offload_dns_register+0x40>)
   13d9e:	f018 fb4b 	bl	2c438 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   13da2:	4c0a      	ldr	r4, [pc, #40]	; (13dcc <socket_offload_dns_register+0x44>)
   13da4:	6822      	ldr	r2, [r4, #0]
   13da6:	b14a      	cbz	r2, 13dbc <socket_offload_dns_register+0x34>
   13da8:	4909      	ldr	r1, [pc, #36]	; (13dd0 <socket_offload_dns_register+0x48>)
   13daa:	4806      	ldr	r0, [pc, #24]	; (13dc4 <socket_offload_dns_register+0x3c>)
   13dac:	2314      	movs	r3, #20
   13dae:	4a06      	ldr	r2, [pc, #24]	; (13dc8 <socket_offload_dns_register+0x40>)
   13db0:	f018 f925 	bl	2bffe <printk>
   13db4:	2114      	movs	r1, #20
   13db6:	4804      	ldr	r0, [pc, #16]	; (13dc8 <socket_offload_dns_register+0x40>)
   13db8:	f018 fb3e 	bl	2c438 <assert_post_action>

	dns_offload = ops;
   13dbc:	6025      	str	r5, [r4, #0]
}
   13dbe:	bd38      	pop	{r3, r4, r5, pc}
   13dc0:	000327b6 	.word	0x000327b6
   13dc4:	0002ff0d 	.word	0x0002ff0d
   13dc8:	000305d7 	.word	0x000305d7
   13dcc:	20021574 	.word	0x20021574
   13dd0:	00030612 	.word	0x00030612

00013dd4 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   13dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   13dd8:	4c13      	ldr	r4, [pc, #76]	; (13e28 <socket_offload_getaddrinfo+0x54>)
{
   13dda:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   13ddc:	6823      	ldr	r3, [r4, #0]
{
   13dde:	4605      	mov	r5, r0
   13de0:	460e      	mov	r6, r1
   13de2:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   13de4:	b94b      	cbnz	r3, 13dfa <socket_offload_getaddrinfo+0x26>
   13de6:	4911      	ldr	r1, [pc, #68]	; (13e2c <socket_offload_getaddrinfo+0x58>)
   13de8:	4811      	ldr	r0, [pc, #68]	; (13e30 <socket_offload_getaddrinfo+0x5c>)
   13dea:	231d      	movs	r3, #29
   13dec:	4a11      	ldr	r2, [pc, #68]	; (13e34 <socket_offload_getaddrinfo+0x60>)
   13dee:	f018 f906 	bl	2bffe <printk>
   13df2:	211d      	movs	r1, #29
   13df4:	480f      	ldr	r0, [pc, #60]	; (13e34 <socket_offload_getaddrinfo+0x60>)
   13df6:	f018 fb1f 	bl	2c438 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   13dfa:	6823      	ldr	r3, [r4, #0]
   13dfc:	681b      	ldr	r3, [r3, #0]
   13dfe:	b94b      	cbnz	r3, 13e14 <socket_offload_getaddrinfo+0x40>
   13e00:	490d      	ldr	r1, [pc, #52]	; (13e38 <socket_offload_getaddrinfo+0x64>)
   13e02:	480b      	ldr	r0, [pc, #44]	; (13e30 <socket_offload_getaddrinfo+0x5c>)
   13e04:	231e      	movs	r3, #30
   13e06:	4a0b      	ldr	r2, [pc, #44]	; (13e34 <socket_offload_getaddrinfo+0x60>)
   13e08:	f018 f8f9 	bl	2bffe <printk>
   13e0c:	211e      	movs	r1, #30
   13e0e:	4809      	ldr	r0, [pc, #36]	; (13e34 <socket_offload_getaddrinfo+0x60>)
   13e10:	f018 fb12 	bl	2c438 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   13e14:	6823      	ldr	r3, [r4, #0]
   13e16:	463a      	mov	r2, r7
   13e18:	681c      	ldr	r4, [r3, #0]
   13e1a:	4631      	mov	r1, r6
   13e1c:	4643      	mov	r3, r8
   13e1e:	4628      	mov	r0, r5
   13e20:	46a4      	mov	ip, r4
}
   13e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   13e26:	4760      	bx	ip
   13e28:	20021574 	.word	0x20021574
   13e2c:	0003062d 	.word	0x0003062d
   13e30:	0002ff0d 	.word	0x0002ff0d
   13e34:	000305d7 	.word	0x000305d7
   13e38:	00030639 	.word	0x00030639

00013e3c <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   13e3c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   13e3e:	4c10      	ldr	r4, [pc, #64]	; (13e80 <socket_offload_freeaddrinfo+0x44>)
{
   13e40:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   13e42:	6823      	ldr	r3, [r4, #0]
   13e44:	b94b      	cbnz	r3, 13e5a <socket_offload_freeaddrinfo+0x1e>
   13e46:	490f      	ldr	r1, [pc, #60]	; (13e84 <socket_offload_freeaddrinfo+0x48>)
   13e48:	480f      	ldr	r0, [pc, #60]	; (13e88 <socket_offload_freeaddrinfo+0x4c>)
   13e4a:	2325      	movs	r3, #37	; 0x25
   13e4c:	4a0f      	ldr	r2, [pc, #60]	; (13e8c <socket_offload_freeaddrinfo+0x50>)
   13e4e:	f018 f8d6 	bl	2bffe <printk>
   13e52:	2125      	movs	r1, #37	; 0x25
   13e54:	480d      	ldr	r0, [pc, #52]	; (13e8c <socket_offload_freeaddrinfo+0x50>)
   13e56:	f018 faef 	bl	2c438 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   13e5a:	6823      	ldr	r3, [r4, #0]
   13e5c:	685b      	ldr	r3, [r3, #4]
   13e5e:	b94b      	cbnz	r3, 13e74 <socket_offload_freeaddrinfo+0x38>
   13e60:	490b      	ldr	r1, [pc, #44]	; (13e90 <socket_offload_freeaddrinfo+0x54>)
   13e62:	4809      	ldr	r0, [pc, #36]	; (13e88 <socket_offload_freeaddrinfo+0x4c>)
   13e64:	2326      	movs	r3, #38	; 0x26
   13e66:	4a09      	ldr	r2, [pc, #36]	; (13e8c <socket_offload_freeaddrinfo+0x50>)
   13e68:	f018 f8c9 	bl	2bffe <printk>
   13e6c:	2126      	movs	r1, #38	; 0x26
   13e6e:	4807      	ldr	r0, [pc, #28]	; (13e8c <socket_offload_freeaddrinfo+0x50>)
   13e70:	f018 fae2 	bl	2c438 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   13e74:	6823      	ldr	r3, [r4, #0]
   13e76:	4628      	mov	r0, r5
}
   13e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   13e7c:	685b      	ldr	r3, [r3, #4]
   13e7e:	4718      	bx	r3
   13e80:	20021574 	.word	0x20021574
   13e84:	0003062d 	.word	0x0003062d
   13e88:	0002ff0d 	.word	0x0002ff0d
   13e8c:	000305d7 	.word	0x000305d7
   13e90:	00030652 	.word	0x00030652

00013e94 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13e94:	b508      	push	{r3, lr}
   13e96:	4806      	ldr	r0, [pc, #24]	; (13eb0 <uart_console_init+0x1c>)
   13e98:	f00e f96e 	bl	22178 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13e9c:	4b05      	ldr	r3, [pc, #20]	; (13eb4 <uart_console_init+0x20>)
   13e9e:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   13ea0:	4805      	ldr	r0, [pc, #20]	; (13eb8 <uart_console_init+0x24>)
   13ea2:	f001 fa97 	bl	153d4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   13ea6:	4804      	ldr	r0, [pc, #16]	; (13eb8 <uart_console_init+0x24>)
   13ea8:	f7fe f994 	bl	121d4 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   13eac:	2000      	movs	r0, #0
   13eae:	bd08      	pop	{r3, pc}
   13eb0:	00030491 	.word	0x00030491
   13eb4:	20021578 	.word	0x20021578
   13eb8:	00013ebd 	.word	0x00013ebd

00013ebc <console_out>:
	if ('\n' == c) {
   13ebc:	280a      	cmp	r0, #10
{
   13ebe:	b538      	push	{r3, r4, r5, lr}
   13ec0:	4604      	mov	r4, r0
   13ec2:	4d07      	ldr	r5, [pc, #28]	; (13ee0 <console_out+0x24>)
	if ('\n' == c) {
   13ec4:	d104      	bne.n	13ed0 <console_out+0x14>
   13ec6:	6828      	ldr	r0, [r5, #0]
   13ec8:	6883      	ldr	r3, [r0, #8]
   13eca:	210d      	movs	r1, #13
   13ecc:	685b      	ldr	r3, [r3, #4]
   13ece:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   13ed0:	6828      	ldr	r0, [r5, #0]
   13ed2:	6883      	ldr	r3, [r0, #8]
   13ed4:	b2e1      	uxtb	r1, r4
   13ed6:	685b      	ldr	r3, [r3, #4]
   13ed8:	4798      	blx	r3
}
   13eda:	4620      	mov	r0, r4
   13edc:	bd38      	pop	{r3, r4, r5, pc}
   13ede:	bf00      	nop
   13ee0:	20021578 	.word	0x20021578

00013ee4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13ee8:	4c0e      	ldr	r4, [pc, #56]	; (13f24 <onoff_start+0x40>)
{
   13eea:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13eec:	1b05      	subs	r5, r0, r4
   13eee:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   13ef2:	250c      	movs	r5, #12
   13ef4:	435d      	muls	r5, r3
   13ef6:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   13efa:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   13efc:	4420      	add	r0, r4
   13efe:	2140      	movs	r1, #64	; 0x40
   13f00:	f018 fe07 	bl	2cb12 <set_starting_state>
	if (err < 0) {
   13f04:	1e01      	subs	r1, r0, #0
   13f06:	db08      	blt.n	13f1a <onoff_start+0x36>
	subdata->cb = data->cb;
   13f08:	4b07      	ldr	r3, [pc, #28]	; (13f28 <onoff_start+0x44>)
   13f0a:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
   13f0c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   13f10:	4b06      	ldr	r3, [pc, #24]	; (13f2c <onoff_start+0x48>)
   13f12:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   13f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   13f18:	4718      	bx	r3
		notify(mgr, err);
   13f1a:	4638      	mov	r0, r7
   13f1c:	4633      	mov	r3, r6
}
   13f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   13f22:	4718      	bx	r3
   13f24:	2002158c 	.word	0x2002158c
   13f28:	0002cb75 	.word	0x0002cb75
   13f2c:	0002ee54 	.word	0x0002ee54

00013f30 <get_status>:
{
   13f30:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13f32:	b2cc      	uxtb	r4, r1
   13f34:	2c01      	cmp	r4, #1
{
   13f36:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13f38:	d909      	bls.n	13f4e <get_status+0x1e>
   13f3a:	4909      	ldr	r1, [pc, #36]	; (13f60 <get_status+0x30>)
   13f3c:	4809      	ldr	r0, [pc, #36]	; (13f64 <get_status+0x34>)
   13f3e:	237d      	movs	r3, #125	; 0x7d
   13f40:	4a09      	ldr	r2, [pc, #36]	; (13f68 <get_status+0x38>)
   13f42:	f018 f85c 	bl	2bffe <printk>
   13f46:	217d      	movs	r1, #125	; 0x7d
   13f48:	4807      	ldr	r0, [pc, #28]	; (13f68 <get_status+0x38>)
   13f4a:	f018 fa75 	bl	2c438 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   13f4e:	210c      	movs	r1, #12
   13f50:	68eb      	ldr	r3, [r5, #12]
   13f52:	fb04 3401 	mla	r4, r4, r1, r3
   13f56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   13f58:	f000 0007 	and.w	r0, r0, #7
   13f5c:	bd38      	pop	{r3, r4, r5, pc}
   13f5e:	bf00      	nop
   13f60:	000306af 	.word	0x000306af
   13f64:	0002ff0d 	.word	0x0002ff0d
   13f68:	00030672 	.word	0x00030672

00013f6c <stop>:
{
   13f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f6e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13f70:	2c01      	cmp	r4, #1
{
   13f72:	4605      	mov	r5, r0
   13f74:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13f76:	68c7      	ldr	r7, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13f78:	d90b      	bls.n	13f92 <stop+0x26>
   13f7a:	4919      	ldr	r1, [pc, #100]	; (13fe0 <stop+0x74>)
   13f7c:	4819      	ldr	r0, [pc, #100]	; (13fe4 <stop+0x78>)
   13f7e:	f240 1345 	movw	r3, #325	; 0x145
   13f82:	4a19      	ldr	r2, [pc, #100]	; (13fe8 <stop+0x7c>)
   13f84:	f018 f83b 	bl	2bffe <printk>
   13f88:	f240 1145 	movw	r1, #325	; 0x145
   13f8c:	4816      	ldr	r0, [pc, #88]	; (13fe8 <stop+0x7c>)
   13f8e:	f018 fa53 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   13f92:	f04f 0320 	mov.w	r3, #32
   13f96:	f3ef 8211 	mrs	r2, BASEPRI
   13f9a:	f383 8811 	msr	BASEPRI, r3
   13f9e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13fa2:	230c      	movs	r3, #12
   13fa4:	fb03 7104 	mla	r1, r3, r4, r7
   13fa8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   13faa:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   13fae:	d001      	beq.n	13fb4 <stop+0x48>
   13fb0:	428e      	cmp	r6, r1
   13fb2:	d111      	bne.n	13fd8 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13fb4:	2101      	movs	r1, #1
	int err = 0;
   13fb6:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13fb8:	fb03 7304 	mla	r3, r3, r4, r7
   13fbc:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   13fbe:	f382 8811 	msr	BASEPRI, r2
   13fc2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   13fc6:	b930      	cbnz	r0, 13fd6 <stop+0x6a>
	get_sub_config(dev, type)->stop();
   13fc8:	230c      	movs	r3, #12
   13fca:	6869      	ldr	r1, [r5, #4]
   13fcc:	fb03 1404 	mla	r4, r3, r4, r1
   13fd0:	6863      	ldr	r3, [r4, #4]
   13fd2:	4798      	blx	r3
	return 0;
   13fd4:	2000      	movs	r0, #0
}
   13fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   13fd8:	f04f 30ff 	mov.w	r0, #4294967295
   13fdc:	e7ef      	b.n	13fbe <stop+0x52>
   13fde:	bf00      	nop
   13fe0:	000306af 	.word	0x000306af
   13fe4:	0002ff0d 	.word	0x0002ff0d
   13fe8:	00030672 	.word	0x00030672

00013fec <onoff_stop>:
{
   13fec:	b570      	push	{r4, r5, r6, lr}
   13fee:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13ff0:	4906      	ldr	r1, [pc, #24]	; (1400c <onoff_stop+0x20>)
{
   13ff2:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13ff4:	1a41      	subs	r1, r0, r1
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   13ff6:	1149      	asrs	r1, r1, #5
   13ff8:	2240      	movs	r2, #64	; 0x40
   13ffa:	4805      	ldr	r0, [pc, #20]	; (14010 <onoff_stop+0x24>)
   13ffc:	f7ff ffb6 	bl	13f6c <stop>
	notify(mgr, res);
   14000:	462b      	mov	r3, r5
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   14002:	4601      	mov	r1, r0
	notify(mgr, res);
   14004:	4620      	mov	r0, r4
}
   14006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1400a:	4718      	bx	r3
   1400c:	2002158c 	.word	0x2002158c
   14010:	20020a60 	.word	0x20020a60

00014014 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   14014:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14016:	2200      	movs	r2, #0
   14018:	2101      	movs	r1, #1
{
   1401a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1401c:	2005      	movs	r0, #5
   1401e:	f000 fb93 	bl	14748 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   14022:	2005      	movs	r0, #5
   14024:	f000 fb72 	bl	1470c <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   14028:	480f      	ldr	r0, [pc, #60]	; (14068 <clk_init+0x54>)
   1402a:	f00d ff2d 	bl	21e88 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1402e:	4b0f      	ldr	r3, [pc, #60]	; (1406c <clk_init+0x58>)
   14030:	4298      	cmp	r0, r3
   14032:	d115      	bne.n	14060 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   14034:	f00d ff4c 	bl	21ed0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   14038:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1403a:	490d      	ldr	r1, [pc, #52]	; (14070 <clk_init+0x5c>)
   1403c:	4630      	mov	r0, r6
   1403e:	f018 f839 	bl	2c0b4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   14042:	2800      	cmp	r0, #0
   14044:	db0b      	blt.n	1405e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14046:	2501      	movs	r5, #1
   14048:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   1404a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1404c:	4908      	ldr	r1, [pc, #32]	; (14070 <clk_init+0x5c>)
   1404e:	f104 0020 	add.w	r0, r4, #32
   14052:	f018 f82f 	bl	2c0b4 <onoff_manager_init>
		if (err < 0) {
   14056:	2800      	cmp	r0, #0
   14058:	db01      	blt.n	1405e <clk_init+0x4a>
	}

	return 0;
   1405a:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1405c:	6565      	str	r5, [r4, #84]	; 0x54
}
   1405e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   14060:	f06f 0004 	mvn.w	r0, #4
   14064:	e7fb      	b.n	1405e <clk_init+0x4a>
   14066:	bf00      	nop
   14068:	000140b1 	.word	0x000140b1
   1406c:	0bad0000 	.word	0x0bad0000
   14070:	0002ee6c 	.word	0x0002ee6c

00014074 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   14074:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   14076:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   14078:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   1407a:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   1407c:	434b      	muls	r3, r1
   1407e:	480a      	ldr	r0, [pc, #40]	; (140a8 <clkstarted_handle.constprop.0+0x34>)
   14080:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   14082:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   14084:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   14088:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1408a:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   1408c:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   1408e:	f018 fd5e 	bl	2cb4e <set_on_state>
	if (callback) {
   14092:	b135      	cbz	r5, 140a2 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14094:	462b      	mov	r3, r5
   14096:	9a01      	ldr	r2, [sp, #4]
   14098:	4804      	ldr	r0, [pc, #16]	; (140ac <clkstarted_handle.constprop.0+0x38>)
}
   1409a:	b002      	add	sp, #8
   1409c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   140a0:	4718      	bx	r3
}
   140a2:	b002      	add	sp, #8
   140a4:	bd70      	pop	{r4, r5, r6, pc}
   140a6:	bf00      	nop
   140a8:	2002158c 	.word	0x2002158c
   140ac:	20020a60 	.word	0x20020a60

000140b0 <clock_event_handler>:
	switch (event) {
   140b0:	2801      	cmp	r0, #1
{
   140b2:	b508      	push	{r3, lr}
	switch (event) {
   140b4:	d006      	beq.n	140c4 <clock_event_handler+0x14>
   140b6:	2803      	cmp	r0, #3
   140b8:	d008      	beq.n	140cc <clock_event_handler+0x1c>
   140ba:	b9a8      	cbnz	r0, 140e8 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   140bc:	4b10      	ldr	r3, [pc, #64]	; (14100 <clock_event_handler+0x50>)
   140be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   140c0:	075b      	lsls	r3, r3, #29
   140c2:	d11b      	bne.n	140fc <clock_event_handler+0x4c>
}
   140c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   140c8:	f7ff bfd4 	b.w	14074 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   140cc:	490d      	ldr	r1, [pc, #52]	; (14104 <clock_event_handler+0x54>)
   140ce:	f240 2356 	movw	r3, #598	; 0x256
   140d2:	4a0d      	ldr	r2, [pc, #52]	; (14108 <clock_event_handler+0x58>)
   140d4:	480d      	ldr	r0, [pc, #52]	; (1410c <clock_event_handler+0x5c>)
   140d6:	f017 ff92 	bl	2bffe <printk>
   140da:	f240 2156 	movw	r1, #598	; 0x256
}
   140de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   140e2:	4809      	ldr	r0, [pc, #36]	; (14108 <clock_event_handler+0x58>)
   140e4:	f018 b9a8 	b.w	2c438 <assert_post_action>
   140e8:	4906      	ldr	r1, [pc, #24]	; (14104 <clock_event_handler+0x54>)
   140ea:	f240 235a 	movw	r3, #602	; 0x25a
   140ee:	4a06      	ldr	r2, [pc, #24]	; (14108 <clock_event_handler+0x58>)
   140f0:	4806      	ldr	r0, [pc, #24]	; (1410c <clock_event_handler+0x5c>)
   140f2:	f017 ff84 	bl	2bffe <printk>
   140f6:	f240 215a 	movw	r1, #602	; 0x25a
   140fa:	e7f0      	b.n	140de <clock_event_handler+0x2e>
}
   140fc:	bd08      	pop	{r3, pc}
   140fe:	bf00      	nop
   14100:	2002158c 	.word	0x2002158c
   14104:	00032a36 	.word	0x00032a36
   14108:	00030672 	.word	0x00030672
   1410c:	0002ff0d 	.word	0x0002ff0d

00014110 <generic_hfclk_start>:
{
   14110:	b508      	push	{r3, lr}
	__asm__ volatile(
   14112:	f04f 0320 	mov.w	r3, #32
   14116:	f3ef 8111 	mrs	r1, BASEPRI
   1411a:	f383 8811 	msr	BASEPRI, r3
   1411e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   14122:	4a11      	ldr	r2, [pc, #68]	; (14168 <generic_hfclk_start+0x58>)
   14124:	6813      	ldr	r3, [r2, #0]
   14126:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1412a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1412e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   14130:	d00b      	beq.n	1414a <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14132:	4a0e      	ldr	r2, [pc, #56]	; (1416c <generic_hfclk_start+0x5c>)
   14134:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14138:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1413c:	f013 0301 	ands.w	r3, r3, #1
   14140:	d003      	beq.n	1414a <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   14142:	480b      	ldr	r0, [pc, #44]	; (14170 <generic_hfclk_start+0x60>)
   14144:	f018 fd03 	bl	2cb4e <set_on_state>
			already_started = true;
   14148:	2301      	movs	r3, #1
	__asm__ volatile(
   1414a:	f381 8811 	msr	BASEPRI, r1
   1414e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   14152:	b123      	cbz	r3, 1415e <generic_hfclk_start+0x4e>
}
   14154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   14158:	2000      	movs	r0, #0
   1415a:	f7ff bf8b 	b.w	14074 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1415e:	2001      	movs	r0, #1
}
   14160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14164:	f00d bed4 	b.w	21f10 <nrfx_clock_start>
   14168:	200215e4 	.word	0x200215e4
   1416c:	40005000 	.word	0x40005000
   14170:	200215d4 	.word	0x200215d4

00014174 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14174:	4b07      	ldr	r3, [pc, #28]	; (14194 <generic_hfclk_stop+0x20>)
   14176:	e8d3 2fef 	ldaex	r2, [r3]
   1417a:	f022 0102 	bic.w	r1, r2, #2
   1417e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   14182:	2800      	cmp	r0, #0
   14184:	d1f7      	bne.n	14176 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   14186:	07d3      	lsls	r3, r2, #31
   14188:	d402      	bmi.n	14190 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1418a:	2001      	movs	r0, #1
   1418c:	f00d bf16 	b.w	21fbc <nrfx_clock_stop>
}
   14190:	4770      	bx	lr
   14192:	bf00      	nop
   14194:	200215e4 	.word	0x200215e4

00014198 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14198:	2300      	movs	r3, #0
   1419a:	2201      	movs	r2, #1
{
   1419c:	b510      	push	{r4, lr}
   1419e:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   141a0:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   141a4:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   141a6:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
   141a8:	4b0a      	ldr	r3, [pc, #40]	; (141d4 <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   141aa:	e9cd 2208 	strd	r2, r2, [sp, #32]
   141ae:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
   141b0:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   141b2:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   141b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   141ba:	f018 fced 	bl	2cb98 <api_start>
	if (err < 0) {
   141be:	2800      	cmp	r0, #0
   141c0:	db05      	blt.n	141ce <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
   141c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   141c6:	2300      	movs	r3, #0
   141c8:	4620      	mov	r0, r4
   141ca:	f010 f9a5 	bl	24518 <z_impl_k_sem_take>
}
   141ce:	b00a      	add	sp, #40	; 0x28
   141d0:	bd10      	pop	{r4, pc}
   141d2:	bf00      	nop
   141d4:	0002cb87 	.word	0x0002cb87

000141d8 <z_nrf_clock_control_lf_on>:
{
   141d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   141dc:	2201      	movs	r2, #1
   141de:	4606      	mov	r6, r0
   141e0:	4945      	ldr	r1, [pc, #276]	; (142f8 <z_nrf_clock_control_lf_on+0x120>)
   141e2:	e8d1 3fef 	ldaex	r3, [r1]
   141e6:	e8c1 2fe0 	stlex	r0, r2, [r1]
   141ea:	2800      	cmp	r0, #0
   141ec:	d1f9      	bne.n	141e2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   141ee:	b9a3      	cbnz	r3, 1421a <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   141f0:	4942      	ldr	r1, [pc, #264]	; (142fc <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   141f2:	4843      	ldr	r0, [pc, #268]	; (14300 <z_nrf_clock_control_lf_on+0x128>)
   141f4:	604b      	str	r3, [r1, #4]
   141f6:	60cb      	str	r3, [r1, #12]
   141f8:	608a      	str	r2, [r1, #8]
   141fa:	f7fe fb79 	bl	128f0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   141fe:	2800      	cmp	r0, #0
   14200:	da0b      	bge.n	1421a <z_nrf_clock_control_lf_on+0x42>
   14202:	4940      	ldr	r1, [pc, #256]	; (14304 <z_nrf_clock_control_lf_on+0x12c>)
   14204:	4840      	ldr	r0, [pc, #256]	; (14308 <z_nrf_clock_control_lf_on+0x130>)
   14206:	f240 2321 	movw	r3, #545	; 0x221
   1420a:	4a40      	ldr	r2, [pc, #256]	; (1430c <z_nrf_clock_control_lf_on+0x134>)
   1420c:	f017 fef7 	bl	2bffe <printk>
   14210:	f240 2121 	movw	r1, #545	; 0x221
   14214:	483d      	ldr	r0, [pc, #244]	; (1430c <z_nrf_clock_control_lf_on+0x134>)
   14216:	f018 f90f 	bl	2c438 <assert_post_action>
	switch (start_mode) {
   1421a:	b38e      	cbz	r6, 14280 <z_nrf_clock_control_lf_on+0xa8>
   1421c:	1e73      	subs	r3, r6, #1
   1421e:	2b01      	cmp	r3, #1
   14220:	d855      	bhi.n	142ce <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   14222:	2e01      	cmp	r6, #1
   14224:	d106      	bne.n	14234 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14226:	4b3a      	ldr	r3, [pc, #232]	; (14310 <z_nrf_clock_control_lf_on+0x138>)
   14228:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1422c:	f003 0303 	and.w	r3, r3, #3
   14230:	2b02      	cmp	r3, #2
   14232:	d025      	beq.n	14280 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14234:	f01a fa07 	bl	2e646 <k_is_in_isr>
   14238:	4604      	mov	r4, r0
   1423a:	b918      	cbnz	r0, 14244 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   1423c:	4b35      	ldr	r3, [pc, #212]	; (14314 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   1423e:	781b      	ldrb	r3, [r3, #0]
   14240:	2b00      	cmp	r3, #0
   14242:	d152      	bne.n	142ea <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   14244:	f04f 0320 	mov.w	r3, #32
   14248:	f3ef 8711 	mrs	r7, BASEPRI
   1424c:	f383 8811 	msr	BASEPRI, r3
   14250:	f3bf 8f6f 	isb	sy
   14254:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14256:	4d2e      	ldr	r5, [pc, #184]	; (14310 <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14258:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 14324 <z_nrf_clock_control_lf_on+0x14c>
   1425c:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1425e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14262:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   14266:	03d2      	lsls	r2, r2, #15
   14268:	d50c      	bpl.n	14284 <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1426a:	f003 0303 	and.w	r3, r3, #3
   1426e:	2b02      	cmp	r3, #2
   14270:	d001      	beq.n	14276 <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14272:	2e01      	cmp	r6, #1
   14274:	d106      	bne.n	14284 <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   14276:	b334      	cbz	r4, 142c6 <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   14278:	f387 8811 	msr	BASEPRI, r7
   1427c:	f3bf 8f6f 	isb	sy
}
   14280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   14284:	b1d4      	cbz	r4, 142bc <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   14286:	4638      	mov	r0, r7
   14288:	f000 faf6 	bl	14878 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1428c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14290:	b2db      	uxtb	r3, r3
   14292:	2b01      	cmp	r3, #1
   14294:	d1e3      	bne.n	1425e <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14296:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   1429a:	2a00      	cmp	r2, #0
   1429c:	d0df      	beq.n	1425e <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1429e:	2200      	movs	r2, #0
   142a0:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   142a4:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   142a8:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   142aa:	2120      	movs	r1, #32
   142ac:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   142b0:	4a19      	ldr	r2, [pc, #100]	; (14318 <z_nrf_clock_control_lf_on+0x140>)
   142b2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   142b6:	4a19      	ldr	r2, [pc, #100]	; (1431c <z_nrf_clock_control_lf_on+0x144>)
   142b8:	6013      	str	r3, [r2, #0]
}
   142ba:	e7d0      	b.n	1425e <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   142bc:	2100      	movs	r1, #0
   142be:	2021      	movs	r0, #33	; 0x21
   142c0:	f010 f8aa 	bl	24418 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   142c4:	e7e2      	b.n	1428c <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   142c6:	2302      	movs	r3, #2
   142c8:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   142cc:	e7d8      	b.n	14280 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   142ce:	f240 2333 	movw	r3, #563	; 0x233
   142d2:	4913      	ldr	r1, [pc, #76]	; (14320 <z_nrf_clock_control_lf_on+0x148>)
   142d4:	480c      	ldr	r0, [pc, #48]	; (14308 <z_nrf_clock_control_lf_on+0x130>)
   142d6:	4a0d      	ldr	r2, [pc, #52]	; (1430c <z_nrf_clock_control_lf_on+0x134>)
   142d8:	f017 fe91 	bl	2bffe <printk>
}
   142dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   142e0:	f240 2133 	movw	r1, #563	; 0x233
   142e4:	4809      	ldr	r0, [pc, #36]	; (1430c <z_nrf_clock_control_lf_on+0x134>)
   142e6:	f018 b8a7 	b.w	2c438 <assert_post_action>
    p_reg->INTENCLR = mask;
   142ea:	2202      	movs	r2, #2
   142ec:	4b08      	ldr	r3, [pc, #32]	; (14310 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   142ee:	4607      	mov	r7, r0
   142f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   142f4:	e7af      	b.n	14256 <z_nrf_clock_control_lf_on+0x7e>
   142f6:	bf00      	nop
   142f8:	200215e8 	.word	0x200215e8
   142fc:	2002157c 	.word	0x2002157c
   14300:	200215ac 	.word	0x200215ac
   14304:	000306d3 	.word	0x000306d3
   14308:	0002ff0d 	.word	0x0002ff0d
   1430c:	00030672 	.word	0x00030672
   14310:	40005000 	.word	0x40005000
   14314:	20026295 	.word	0x20026295
   14318:	e000e100 	.word	0xe000e100
   1431c:	40005008 	.word	0x40005008
   14320:	00032a36 	.word	0x00032a36
   14324:	40005104 	.word	0x40005104

00014328 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   14328:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1432a:	4c06      	ldr	r4, [pc, #24]	; (14344 <z_clock_isr+0x1c>)
   1432c:	4906      	ldr	r1, [pc, #24]	; (14348 <z_clock_isr+0x20>)
   1432e:	4622      	mov	r2, r4
   14330:	4806      	ldr	r0, [pc, #24]	; (1434c <z_clock_isr+0x24>)
   14332:	2317      	movs	r3, #23
   14334:	f017 fe63 	bl	2bffe <printk>
   14338:	4620      	mov	r0, r4
}
   1433a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   1433e:	2117      	movs	r1, #23
   14340:	f018 b87a 	b.w	2c438 <assert_post_action>
   14344:	000306fc 	.word	0x000306fc
   14348:	00032a36 	.word	0x00032a36
   1434c:	0002ff0d 	.word	0x0002ff0d

00014350 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   14350:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   14352:	4b08      	ldr	r3, [pc, #32]	; (14374 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14354:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   14358:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1435c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   14360:	4290      	cmp	r0, r2
   14362:	d100      	bne.n	14366 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   14364:	4770      	bx	lr
   14366:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   1436a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1436c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   14370:	e7f2      	b.n	14358 <handle_next_cycle_case+0x8>
   14372:	bf00      	nop
   14374:	40015000 	.word	0x40015000

00014378 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14378:	2200      	movs	r2, #0
   1437a:	4b07      	ldr	r3, [pc, #28]	; (14398 <rtc_nrf_isr+0x20>)
   1437c:	601a      	str	r2, [r3, #0]
   1437e:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   14380:	4a06      	ldr	r2, [pc, #24]	; (1439c <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   14382:	4b07      	ldr	r3, [pc, #28]	; (143a0 <rtc_nrf_isr+0x28>)
   14384:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   14388:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1438a:	1ac0      	subs	r0, r0, r3
   1438c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   14390:	4403      	add	r3, r0
   14392:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   14394:	f010 bd7a 	b.w	24e8c <z_clock_announce>
   14398:	40015140 	.word	0x40015140
   1439c:	200215ec 	.word	0x200215ec
   143a0:	40015000 	.word	0x40015000

000143a4 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   143a4:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   143a6:	2400      	movs	r4, #0
   143a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   143ac:	4d0e      	ldr	r5, [pc, #56]	; (143e8 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   143ae:	4b0f      	ldr	r3, [pc, #60]	; (143ec <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   143b0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   143b4:	601c      	str	r4, [r3, #0]
   143b6:	681b      	ldr	r3, [r3, #0]
   143b8:	4b0d      	ldr	r3, [pc, #52]	; (143f0 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   143ba:	2101      	movs	r1, #1
   143bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   143c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   143c4:	4622      	mov	r2, r4
   143c6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   143ca:	2015      	movs	r0, #21
   143cc:	f000 f9bc 	bl	14748 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   143d0:	2015      	movs	r0, #21
   143d2:	f000 f99b 	bl	1470c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   143d6:	2301      	movs	r3, #1
   143d8:	4a06      	ldr	r2, [pc, #24]	; (143f4 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   143da:	2002      	movs	r0, #2
   143dc:	6013      	str	r3, [r2, #0]
   143de:	602b      	str	r3, [r5, #0]
   143e0:	f7ff fefa 	bl	141d8 <z_nrf_clock_control_lf_on>

	return 0;
}
   143e4:	4620      	mov	r0, r4
   143e6:	bd38      	pop	{r3, r4, r5, pc}
   143e8:	40015000 	.word	0x40015000
   143ec:	40015140 	.word	0x40015140
   143f0:	e000e100 	.word	0xe000e100
   143f4:	40015008 	.word	0x40015008

000143f8 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   143f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   143fa:	4b2d      	ldr	r3, [pc, #180]	; (144b0 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   143fc:	4c2d      	ldr	r4, [pc, #180]	; (144b4 <z_clock_set_timeout+0xbc>)
   143fe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   14402:	4b2d      	ldr	r3, [pc, #180]	; (144b8 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   14404:	f1b0 3fff 	cmp.w	r0, #4294967295
   14408:	bf08      	it	eq
   1440a:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   1440c:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1440e:	1a52      	subs	r2, r2, r1
   14410:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   14414:	0212      	lsls	r2, r2, #8
   14416:	d438      	bmi.n	1448a <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   14418:	3801      	subs	r0, #1
   1441a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1441e:	42a0      	cmp	r0, r4
   14420:	bfa8      	it	ge
   14422:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   14424:	3301      	adds	r3, #1
   14426:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   14428:	42a0      	cmp	r0, r4
   1442a:	bf94      	ite	ls
   1442c:	180c      	addls	r4, r1, r0
   1442e:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   14430:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14434:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   14436:	4a1e      	ldr	r2, [pc, #120]	; (144b0 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14438:	4d20      	ldr	r5, [pc, #128]	; (144bc <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   1443a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   1443e:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   14442:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14446:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   14448:	1a5b      	subs	r3, r3, r1
   1444a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1444e:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   14450:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14452:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   14456:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1445a:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   1445e:	d104      	bne.n	1446a <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   14460:	200f      	movs	r0, #15
   14462:	f01a f8f6 	bl	2e652 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14466:	602e      	str	r6, [r5, #0]
   14468:	682b      	ldr	r3, [r5, #0]
   1446a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1446e:	4b14      	ldr	r3, [pc, #80]	; (144c0 <z_clock_set_timeout+0xc8>)
   14470:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   14474:	4b0e      	ldr	r3, [pc, #56]	; (144b0 <z_clock_set_timeout+0xb8>)
   14476:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1447a:	1a22      	subs	r2, r4, r0
   1447c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   14480:	2a01      	cmp	r2, #1
   14482:	d104      	bne.n	1448e <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   14484:	f7ff ff64 	bl	14350 <handle_next_cycle_case>
   14488:	e00b      	b.n	144a2 <z_clock_set_timeout+0xaa>
		ticks = 0;
   1448a:	2000      	movs	r0, #0
   1448c:	e7ca      	b.n	14424 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1448e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   14492:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   14496:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1449a:	1a24      	subs	r4, r4, r0
   1449c:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   1449e:	0223      	lsls	r3, r4, #8
   144a0:	d4f0      	bmi.n	14484 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   144a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   144a6:	4b02      	ldr	r3, [pc, #8]	; (144b0 <z_clock_set_timeout+0xb8>)
   144a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   144ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144ae:	bf00      	nop
   144b0:	40015000 	.word	0x40015000
   144b4:	007fffff 	.word	0x007fffff
   144b8:	200215ec 	.word	0x200215ec
   144bc:	40015140 	.word	0x40015140
   144c0:	e000e100 	.word	0xe000e100

000144c4 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
   144c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   144c6:	f04f 0320 	mov.w	r3, #32
   144ca:	f3ef 8511 	mrs	r5, BASEPRI
   144ce:	f383 8811 	msr	BASEPRI, r3
   144d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   144d6:	481a      	ldr	r0, [pc, #104]	; (14540 <z_clock_elapsed+0x7c>)
   144d8:	f010 f9fa 	bl	248d0 <z_spin_lock_valid>
   144dc:	b968      	cbnz	r0, 144fa <z_clock_elapsed+0x36>
   144de:	235c      	movs	r3, #92	; 0x5c
   144e0:	4a18      	ldr	r2, [pc, #96]	; (14544 <z_clock_elapsed+0x80>)
   144e2:	4919      	ldr	r1, [pc, #100]	; (14548 <z_clock_elapsed+0x84>)
   144e4:	4819      	ldr	r0, [pc, #100]	; (1454c <z_clock_elapsed+0x88>)
   144e6:	f017 fd8a 	bl	2bffe <printk>
   144ea:	4915      	ldr	r1, [pc, #84]	; (14540 <z_clock_elapsed+0x7c>)
   144ec:	4818      	ldr	r0, [pc, #96]	; (14550 <z_clock_elapsed+0x8c>)
   144ee:	f017 fd86 	bl	2bffe <printk>
   144f2:	215c      	movs	r1, #92	; 0x5c
   144f4:	4813      	ldr	r0, [pc, #76]	; (14544 <z_clock_elapsed+0x80>)
   144f6:	f017 ff9f 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   144fa:	4811      	ldr	r0, [pc, #68]	; (14540 <z_clock_elapsed+0x7c>)
   144fc:	f010 fa06 	bl	2490c <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   14500:	4b14      	ldr	r3, [pc, #80]	; (14554 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14502:	480f      	ldr	r0, [pc, #60]	; (14540 <z_clock_elapsed+0x7c>)
   14504:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   14508:	4b13      	ldr	r3, [pc, #76]	; (14558 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   1450a:	681b      	ldr	r3, [r3, #0]
   1450c:	1ae4      	subs	r4, r4, r3
   1450e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   14512:	f010 f9eb 	bl	248ec <z_spin_unlock_valid>
   14516:	b968      	cbnz	r0, 14534 <z_clock_elapsed+0x70>
   14518:	2384      	movs	r3, #132	; 0x84
   1451a:	4a0a      	ldr	r2, [pc, #40]	; (14544 <z_clock_elapsed+0x80>)
   1451c:	490f      	ldr	r1, [pc, #60]	; (1455c <z_clock_elapsed+0x98>)
   1451e:	480b      	ldr	r0, [pc, #44]	; (1454c <z_clock_elapsed+0x88>)
   14520:	f017 fd6d 	bl	2bffe <printk>
   14524:	4906      	ldr	r1, [pc, #24]	; (14540 <z_clock_elapsed+0x7c>)
   14526:	480e      	ldr	r0, [pc, #56]	; (14560 <z_clock_elapsed+0x9c>)
   14528:	f017 fd69 	bl	2bffe <printk>
   1452c:	2184      	movs	r1, #132	; 0x84
   1452e:	4805      	ldr	r0, [pc, #20]	; (14544 <z_clock_elapsed+0x80>)
   14530:	f017 ff82 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   14534:	f385 8811 	msr	BASEPRI, r5
   14538:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1453c:	4620      	mov	r0, r4
   1453e:	bd38      	pop	{r3, r4, r5, pc}
   14540:	200215f0 	.word	0x200215f0
   14544:	0002ffdd 	.word	0x0002ffdd
   14548:	0003002f 	.word	0x0003002f
   1454c:	0002ff0d 	.word	0x0002ff0d
   14550:	00030044 	.word	0x00030044
   14554:	40015000 	.word	0x40015000
   14558:	200215ec 	.word	0x200215ec
   1455c:	00030003 	.word	0x00030003
   14560:	0003001a 	.word	0x0003001a

00014564 <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
   14564:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14566:	f04f 0320 	mov.w	r3, #32
   1456a:	f3ef 8511 	mrs	r5, BASEPRI
   1456e:	f383 8811 	msr	BASEPRI, r3
   14572:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14576:	481b      	ldr	r0, [pc, #108]	; (145e4 <z_timer_cycle_get_32+0x80>)
   14578:	f010 f9aa 	bl	248d0 <z_spin_lock_valid>
   1457c:	b968      	cbnz	r0, 1459a <z_timer_cycle_get_32+0x36>
   1457e:	235c      	movs	r3, #92	; 0x5c
   14580:	4a19      	ldr	r2, [pc, #100]	; (145e8 <z_timer_cycle_get_32+0x84>)
   14582:	491a      	ldr	r1, [pc, #104]	; (145ec <z_timer_cycle_get_32+0x88>)
   14584:	481a      	ldr	r0, [pc, #104]	; (145f0 <z_timer_cycle_get_32+0x8c>)
   14586:	f017 fd3a 	bl	2bffe <printk>
   1458a:	4916      	ldr	r1, [pc, #88]	; (145e4 <z_timer_cycle_get_32+0x80>)
   1458c:	4819      	ldr	r0, [pc, #100]	; (145f4 <z_timer_cycle_get_32+0x90>)
   1458e:	f017 fd36 	bl	2bffe <printk>
   14592:	215c      	movs	r1, #92	; 0x5c
   14594:	4814      	ldr	r0, [pc, #80]	; (145e8 <z_timer_cycle_get_32+0x84>)
   14596:	f017 ff4f 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   1459a:	4812      	ldr	r0, [pc, #72]	; (145e4 <z_timer_cycle_get_32+0x80>)
   1459c:	f010 f9b6 	bl	2490c <z_spin_lock_set_owner>
   145a0:	4b15      	ldr	r3, [pc, #84]	; (145f8 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   145a2:	4810      	ldr	r0, [pc, #64]	; (145e4 <z_timer_cycle_get_32+0x80>)
   145a4:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   145a8:	4b14      	ldr	r3, [pc, #80]	; (145fc <z_timer_cycle_get_32+0x98>)
   145aa:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   145ac:	1ae4      	subs	r4, r4, r3
   145ae:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   145b2:	441c      	add	r4, r3
   145b4:	f010 f99a 	bl	248ec <z_spin_unlock_valid>
   145b8:	b968      	cbnz	r0, 145d6 <z_timer_cycle_get_32+0x72>
   145ba:	2384      	movs	r3, #132	; 0x84
   145bc:	4a0a      	ldr	r2, [pc, #40]	; (145e8 <z_timer_cycle_get_32+0x84>)
   145be:	4910      	ldr	r1, [pc, #64]	; (14600 <z_timer_cycle_get_32+0x9c>)
   145c0:	480b      	ldr	r0, [pc, #44]	; (145f0 <z_timer_cycle_get_32+0x8c>)
   145c2:	f017 fd1c 	bl	2bffe <printk>
   145c6:	4907      	ldr	r1, [pc, #28]	; (145e4 <z_timer_cycle_get_32+0x80>)
   145c8:	480e      	ldr	r0, [pc, #56]	; (14604 <z_timer_cycle_get_32+0xa0>)
   145ca:	f017 fd18 	bl	2bffe <printk>
   145ce:	2184      	movs	r1, #132	; 0x84
   145d0:	4805      	ldr	r0, [pc, #20]	; (145e8 <z_timer_cycle_get_32+0x84>)
   145d2:	f017 ff31 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   145d6:	f385 8811 	msr	BASEPRI, r5
   145da:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   145de:	4620      	mov	r0, r4
   145e0:	bd38      	pop	{r3, r4, r5, pc}
   145e2:	bf00      	nop
   145e4:	200215f0 	.word	0x200215f0
   145e8:	0002ffdd 	.word	0x0002ffdd
   145ec:	0003002f 	.word	0x0003002f
   145f0:	0002ff0d 	.word	0x0002ff0d
   145f4:	00030044 	.word	0x00030044
   145f8:	40015000 	.word	0x40015000
   145fc:	200215ec 	.word	0x200215ec
   14600:	00030003 	.word	0x00030003
   14604:	0003001a 	.word	0x0003001a

00014608 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14608:	4a09      	ldr	r2, [pc, #36]	; (14630 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1460a:	490a      	ldr	r1, [pc, #40]	; (14634 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1460c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1460e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   14610:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   14612:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14614:	4908      	ldr	r1, [pc, #32]	; (14638 <arch_swap+0x30>)
   14616:	684b      	ldr	r3, [r1, #4]
   14618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1461c:	604b      	str	r3, [r1, #4]
   1461e:	2300      	movs	r3, #0
   14620:	f383 8811 	msr	BASEPRI, r3
   14624:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14628:	6893      	ldr	r3, [r2, #8]
}
   1462a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1462c:	4770      	bx	lr
   1462e:	bf00      	nop
   14630:	20021dd4 	.word	0x20021dd4
   14634:	0002f370 	.word	0x0002f370
   14638:	e000ed00 	.word	0xe000ed00

0001463c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1463c:	4929      	ldr	r1, [pc, #164]	; (146e4 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1463e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14640:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   14644:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14646:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1464a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   1464e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   14652:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   14656:	d004      	beq.n	14662 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   14658:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   1465c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   14660:	e007      	b.n	14672 <out_fp_endif>

00014662 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   14662:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   14666:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   1466a:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   1466e:	f050 0004 	orrs.w	r0, r0, #4

00014672 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   14672:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14676:	2020      	movs	r0, #32
    msr BASEPRI, r0
   14678:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1467c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14680:	4f19      	ldr	r7, [pc, #100]	; (146e8 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14682:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14686:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   14688:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1468a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1468c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1468e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14690:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14692:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   14696:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   1469a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   1469e:	d105      	bne.n	146ac <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   146a0:	2300      	movs	r3, #0
    vmsr fpscr, r3
   146a2:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   146a6:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   146aa:	e005      	b.n	146b8 <in_fp_endif>

000146ac <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   146ac:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   146b0:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   146b4:	ec90 8a10 	vldmia	r0, {s16-s31}

000146b8 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   146b8:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   146bc:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   146c0:	f383 8814 	msr	CONTROL, r3
    isb
   146c4:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   146c8:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   146cc:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   146d0:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   146d4:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   146d8:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   146da:	f018 fa87 	bl	2cbec <configure_builtin_stack_guard>
    pop {r2, lr}
   146de:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   146e2:	4770      	bx	lr
    ldr r1, =_kernel
   146e4:	20021dd4 	.word	0x20021dd4
    ldr v4, =_SCS_ICSR
   146e8:	e000ed04 	.word	0xe000ed04

000146ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   146ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   146f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   146f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   146f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   146fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   146fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14700:	2902      	cmp	r1, #2
    beq _oops
   14702:	d0ff      	beq.n	14704 <_oops>

00014704 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14704:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   14706:	f018 fa75 	bl	2cbf4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1470a:	bd01      	pop	{r0, pc}

0001470c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1470c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1470e:	2b00      	cmp	r3, #0
   14710:	db08      	blt.n	14724 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14712:	2201      	movs	r2, #1
   14714:	f000 001f 	and.w	r0, r0, #31
   14718:	fa02 f000 	lsl.w	r0, r2, r0
   1471c:	4a02      	ldr	r2, [pc, #8]	; (14728 <arch_irq_enable+0x1c>)
   1471e:	095b      	lsrs	r3, r3, #5
   14720:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   14724:	4770      	bx	lr
   14726:	bf00      	nop
   14728:	e000e100 	.word	0xe000e100

0001472c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1472c:	4b05      	ldr	r3, [pc, #20]	; (14744 <arch_irq_is_enabled+0x18>)
   1472e:	0942      	lsrs	r2, r0, #5
   14730:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14734:	2301      	movs	r3, #1
   14736:	f000 001f 	and.w	r0, r0, #31
   1473a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1473e:	4010      	ands	r0, r2
   14740:	4770      	bx	lr
   14742:	bf00      	nop
   14744:	e000e100 	.word	0xe000e100

00014748 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   14748:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   1474a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1474c:	2c07      	cmp	r4, #7
{
   1474e:	4605      	mov	r5, r0
   14750:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14752:	d90e      	bls.n	14772 <z_arm_irq_priority_set+0x2a>
   14754:	235b      	movs	r3, #91	; 0x5b
   14756:	4a10      	ldr	r2, [pc, #64]	; (14798 <z_arm_irq_priority_set+0x50>)
   14758:	4910      	ldr	r1, [pc, #64]	; (1479c <z_arm_irq_priority_set+0x54>)
   1475a:	4811      	ldr	r0, [pc, #68]	; (147a0 <z_arm_irq_priority_set+0x58>)
   1475c:	f017 fc4f 	bl	2bffe <printk>
   14760:	4631      	mov	r1, r6
   14762:	4810      	ldr	r0, [pc, #64]	; (147a4 <z_arm_irq_priority_set+0x5c>)
   14764:	2207      	movs	r2, #7
   14766:	f017 fc4a 	bl	2bffe <printk>
   1476a:	215b      	movs	r1, #91	; 0x5b
   1476c:	480a      	ldr	r0, [pc, #40]	; (14798 <z_arm_irq_priority_set+0x50>)
   1476e:	f017 fe63 	bl	2c438 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14772:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14774:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14776:	bfac      	ite	ge
   14778:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1477c:	4b0a      	ldrlt	r3, [pc, #40]	; (147a8 <z_arm_irq_priority_set+0x60>)
   1477e:	ea4f 1444 	mov.w	r4, r4, lsl #5
   14782:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14784:	bfab      	itete	ge
   14786:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1478a:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1478e:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14792:	555c      	strblt	r4, [r3, r5]
}
   14794:	bd70      	pop	{r4, r5, r6, pc}
   14796:	bf00      	nop
   14798:	00030738 	.word	0x00030738
   1479c:	0003076e 	.word	0x0003076e
   147a0:	0002ff0d 	.word	0x0002ff0d
   147a4:	00030789 	.word	0x00030789
   147a8:	e000ed14 	.word	0xe000ed14

000147ac <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   147ac:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   147ae:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   147b0:	4b04      	ldr	r3, [pc, #16]	; (147c4 <_arch_isr_direct_pm+0x18>)
   147b2:	6a18      	ldr	r0, [r3, #32]
   147b4:	b118      	cbz	r0, 147be <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   147b6:	2200      	movs	r2, #0
   147b8:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   147ba:	f019 fe84 	bl	2e4c6 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   147be:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   147c0:	bd08      	pop	{r3, pc}
   147c2:	bf00      	nop
   147c4:	20021dd4 	.word	0x20021dd4

000147c8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   147c8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   147cc:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   147ce:	490c      	ldr	r1, [pc, #48]	; (14800 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   147d0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   147d4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   147d6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   147da:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   147de:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   147e0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   147e4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   147e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   147ec:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   147f0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   147f2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   147f4:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   147f6:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   147f8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   147fc:	4770      	bx	lr
   147fe:	bf00      	nop
   14800:	0002c103 	.word	0x0002c103

00014804 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14804:	b508      	push	{r3, lr}
   14806:	4604      	mov	r4, r0
   14808:	460e      	mov	r6, r1
   1480a:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1480c:	2300      	movs	r3, #0
   1480e:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   14812:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   14816:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1481a:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   1481e:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   14822:	f000 fbc3 	bl	14fac <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14826:	4b09      	ldr	r3, [pc, #36]	; (1484c <arch_switch_to_main_thread+0x48>)
   14828:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1482a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1482c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14830:	4628      	mov	r0, r5
   14832:	f386 8809 	msr	PSP, r6
   14836:	2100      	movs	r1, #0
   14838:	b663      	cpsie	if
   1483a:	f381 8811 	msr	BASEPRI, r1
   1483e:	f3bf 8f6f 	isb	sy
   14842:	2200      	movs	r2, #0
   14844:	2300      	movs	r3, #0
   14846:	f017 fc5c 	bl	2c102 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1484a:	bf00      	nop
   1484c:	20021dd4 	.word	0x20021dd4

00014850 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14850:	4901      	ldr	r1, [pc, #4]	; (14858 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14852:	2210      	movs	r2, #16
	str	r2, [r1]
   14854:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14856:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14858:	e000ed10 	.word	0xe000ed10

0001485c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1485c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1485e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14860:	f380 8811 	msr	BASEPRI, r0
	isb
   14864:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   14868:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1486c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1486e:	b662      	cpsie	i
	isb
   14870:	f3bf 8f6f 	isb	sy

	bx	lr
   14874:	4770      	bx	lr
   14876:	bf00      	nop

00014878 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14878:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1487a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1487c:	f381 8811 	msr	BASEPRI, r1

	wfe
   14880:	bf20      	wfe

	msr	BASEPRI, r0
   14882:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14886:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14888:	4770      	bx	lr
   1488a:	bf00      	nop

0001488c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1488c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14890:	4606      	mov	r6, r0

	if (esf != NULL) {
   14892:	460d      	mov	r5, r1
{
   14894:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   14896:	2900      	cmp	r1, #0
   14898:	d054      	beq.n	14944 <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1489a:	4b2e      	ldr	r3, [pc, #184]	; (14954 <z_arm_fatal_error+0xc8>)
   1489c:	4c2e      	ldr	r4, [pc, #184]	; (14958 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1489e:	482f      	ldr	r0, [pc, #188]	; (1495c <z_arm_fatal_error+0xd0>)
   148a0:	1ae4      	subs	r4, r4, r3
   148a2:	08e4      	lsrs	r4, r4, #3
   148a4:	01a4      	lsls	r4, r4, #6
   148a6:	f044 0401 	orr.w	r4, r4, #1
   148aa:	f8ad 4000 	strh.w	r4, [sp]
   148ae:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   148b2:	6809      	ldr	r1, [r1, #0]
   148b4:	f017 fe2f 	bl	2c516 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   148b8:	f8ad 4000 	strh.w	r4, [sp]
   148bc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   148c0:	68e9      	ldr	r1, [r5, #12]
   148c2:	4827      	ldr	r0, [pc, #156]	; (14960 <z_arm_fatal_error+0xd4>)
   148c4:	f017 fe27 	bl	2c516 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   148c8:	4622      	mov	r2, r4
   148ca:	69e9      	ldr	r1, [r5, #28]
   148cc:	4825      	ldr	r0, [pc, #148]	; (14964 <z_arm_fatal_error+0xd8>)
   148ce:	f017 fdf2 	bl	2c4b6 <log_1>
	for (int i = 0; i < 16; i += 4) {
   148d2:	46a8      	mov	r8, r5
   148d4:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   148d6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 14970 <z_arm_fatal_error+0xe4>
   148da:	edd8 7a08 	vldr	s15, [r8, #32]
   148de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   148e2:	edcd 7a03 	vstr	s15, [sp, #12]
   148e6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   148ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   148ee:	edcd 7a05 	vstr	s15, [sp, #20]
   148f2:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   148f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   148fa:	edcd 7a07 	vstr	s15, [sp, #28]
   148fe:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   14902:	2208      	movs	r2, #8
   14904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14908:	1c7b      	adds	r3, r7, #1
   1490a:	9304      	str	r3, [sp, #16]
   1490c:	1cbb      	adds	r3, r7, #2
   1490e:	9306      	str	r3, [sp, #24]
   14910:	1cfb      	adds	r3, r7, #3
   14912:	9702      	str	r7, [sp, #8]
   14914:	9308      	str	r3, [sp, #32]
   14916:	4648      	mov	r0, r9
   14918:	4623      	mov	r3, r4
   1491a:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   1491e:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   14920:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   14924:	f017 fe16 	bl	2c554 <log_n>
	for (int i = 0; i < 16; i += 4) {
   14928:	2f10      	cmp	r7, #16
   1492a:	f108 0810 	add.w	r8, r8, #16
   1492e:	d1d4      	bne.n	148da <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   14930:	4622      	mov	r2, r4
   14932:	6e29      	ldr	r1, [r5, #96]	; 0x60
   14934:	480c      	ldr	r0, [pc, #48]	; (14968 <z_arm_fatal_error+0xdc>)
   14936:	f017 fdbe 	bl	2c4b6 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1493a:	4622      	mov	r2, r4
   1493c:	69a9      	ldr	r1, [r5, #24]
   1493e:	480b      	ldr	r0, [pc, #44]	; (1496c <z_arm_fatal_error+0xe0>)
   14940:	f017 fdb9 	bl	2c4b6 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14944:	4629      	mov	r1, r5
   14946:	4630      	mov	r0, r6
   14948:	f00d fc44 	bl	221d4 <z_fatal_error>
}
   1494c:	b00b      	add	sp, #44	; 0x2c
   1494e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14952:	bf00      	nop
   14954:	0002ebc4 	.word	0x0002ebc4
   14958:	0002ec44 	.word	0x0002ec44
   1495c:	000307be 	.word	0x000307be
   14960:	000307ed 	.word	0x000307ed
   14964:	0003081c 	.word	0x0003081c
   14968:	0003086e 	.word	0x0003086e
   1496c:	0003087d 	.word	0x0003087d
   14970:	0003082b 	.word	0x0003082b

00014974 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14974:	bf30      	wfi
    b z_SysNmiOnReset
   14976:	f7ff bffd 	b.w	14974 <z_SysNmiOnReset>
   1497a:	bf00      	nop

0001497c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1497c:	4a14      	ldr	r2, [pc, #80]	; (149d0 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1497e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14980:	4b14      	ldr	r3, [pc, #80]	; (149d4 <z_arm_prep_c+0x58>)
   14982:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14986:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14988:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1498c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14990:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14994:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   1499c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   149a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   149a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   149a8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   149ac:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   149b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   149b4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   149b8:	2300      	movs	r3, #0
   149ba:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   149be:	f00d fc9f 	bl	22300 <z_bss_zero>
	z_data_copy();
   149c2:	f00d fca7 	bl	22314 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   149c6:	f000 fab9 	bl	14f3c <z_arm_interrupt_init>
	z_cstart();
   149ca:	f00d fce1 	bl	22390 <z_cstart>
   149ce:	bf00      	nop
   149d0:	0000c000 	.word	0x0000c000
   149d4:	e000ed00 	.word	0xe000ed00

000149d8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   149d8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   149da:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   149dc:	4a0b      	ldr	r2, [pc, #44]	; (14a0c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   149de:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   149e0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   149e2:	bf1e      	ittt	ne
	movne	r1, #0
   149e4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   149e6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   149e8:	f019 fd6d 	blne	2e4c6 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   149ec:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   149ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   149f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   149f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   149fa:	4905      	ldr	r1, [pc, #20]	; (14a10 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   149fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   149fe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14a00:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14a02:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14a06:	4903      	ldr	r1, [pc, #12]	; (14a14 <_isr_wrapper+0x3c>)
	bx r1
   14a08:	4708      	bx	r1
   14a0a:	0000      	.short	0x0000
	ldr r2, =_kernel
   14a0c:	20021dd4 	.word	0x20021dd4
	ldr r1, =_sw_isr_table
   14a10:	0002e9b0 	.word	0x0002e9b0
	ldr r1, =z_arm_int_exit
   14a14:	00014efd 	.word	0x00014efd

00014a18 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   14a18:	f017 fd16 	bl	2c448 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14a1c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   14a1e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14a22:	4808      	ldr	r0, [pc, #32]	; (14a44 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   14a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   14a28:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14a2a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14a2e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14a32:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   14a34:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14a36:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14a3a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14a3e:	f7ff ff9d 	bl	1497c <z_arm_prep_c>
   14a42:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   14a44:	20029468 	.word	0x20029468

00014a48 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14a48:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14a4c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14a50:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14a52:	4672      	mov	r2, lr
	bl z_arm_fault
   14a54:	f000 f958 	bl	14d08 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   14a58:	bd01      	pop	{r0, pc}
   14a5a:	bf00      	nop

00014a5c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14a5c:	b570      	push	{r4, r5, r6, lr}
   14a5e:	4b28      	ldr	r3, [pc, #160]	; (14b00 <usage_fault.isra.0+0xa4>)
   14a60:	4c28      	ldr	r4, [pc, #160]	; (14b04 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14a62:	4d29      	ldr	r5, [pc, #164]	; (14b08 <usage_fault.isra.0+0xac>)
   14a64:	1ae4      	subs	r4, r4, r3
   14a66:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   14a68:	01a4      	lsls	r4, r4, #6
   14a6a:	f044 0601 	orr.w	r6, r4, #1
   14a6e:	4631      	mov	r1, r6
   14a70:	4826      	ldr	r0, [pc, #152]	; (14b0c <usage_fault.isra.0+0xb0>)
   14a72:	f017 fd11 	bl	2c498 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14a76:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a78:	0193      	lsls	r3, r2, #6
   14a7a:	d503      	bpl.n	14a84 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   14a7c:	4631      	mov	r1, r6
   14a7e:	4824      	ldr	r0, [pc, #144]	; (14b10 <usage_fault.isra.0+0xb4>)
   14a80:	f017 fd0a 	bl	2c498 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14a84:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a86:	01dd      	lsls	r5, r3, #7
   14a88:	d504      	bpl.n	14a94 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   14a8a:	4822      	ldr	r0, [pc, #136]	; (14b14 <usage_fault.isra.0+0xb8>)
   14a8c:	f044 0101 	orr.w	r1, r4, #1
   14a90:	f017 fd02 	bl	2c498 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   14a94:	4d1c      	ldr	r5, [pc, #112]	; (14b08 <usage_fault.isra.0+0xac>)
   14a96:	6aae      	ldr	r6, [r5, #40]	; 0x28
   14a98:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   14a9c:	d005      	beq.n	14aaa <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   14a9e:	481e      	ldr	r0, [pc, #120]	; (14b18 <usage_fault.isra.0+0xbc>)
   14aa0:	f044 0101 	orr.w	r1, r4, #1
   14aa4:	f017 fcf8 	bl	2c498 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   14aa8:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14aaa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14aac:	0318      	lsls	r0, r3, #12
   14aae:	d504      	bpl.n	14aba <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   14ab0:	481a      	ldr	r0, [pc, #104]	; (14b1c <usage_fault.isra.0+0xc0>)
   14ab2:	f044 0101 	orr.w	r1, r4, #1
   14ab6:	f017 fcef 	bl	2c498 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14aba:	4d13      	ldr	r5, [pc, #76]	; (14b08 <usage_fault.isra.0+0xac>)
   14abc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14abe:	0351      	lsls	r1, r2, #13
   14ac0:	d504      	bpl.n	14acc <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14ac2:	4817      	ldr	r0, [pc, #92]	; (14b20 <usage_fault.isra.0+0xc4>)
   14ac4:	f044 0101 	orr.w	r1, r4, #1
   14ac8:	f017 fce6 	bl	2c498 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14acc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14ace:	039a      	lsls	r2, r3, #14
   14ad0:	d504      	bpl.n	14adc <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14ad2:	4814      	ldr	r0, [pc, #80]	; (14b24 <usage_fault.isra.0+0xc8>)
   14ad4:	f044 0101 	orr.w	r1, r4, #1
   14ad8:	f017 fcde 	bl	2c498 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14adc:	4d0a      	ldr	r5, [pc, #40]	; (14b08 <usage_fault.isra.0+0xac>)
   14ade:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14ae0:	03db      	lsls	r3, r3, #15
   14ae2:	d504      	bpl.n	14aee <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14ae4:	4810      	ldr	r0, [pc, #64]	; (14b28 <usage_fault.isra.0+0xcc>)
   14ae6:	f044 0101 	orr.w	r1, r4, #1
   14aea:	f017 fcd5 	bl	2c498 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14aee:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   14af0:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14af2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14af6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   14afa:	62ab      	str	r3, [r5, #40]	; 0x28
}
   14afc:	bd70      	pop	{r4, r5, r6, pc}
   14afe:	bf00      	nop
   14b00:	0002ebc4 	.word	0x0002ebc4
   14b04:	0002ec44 	.word	0x0002ec44
   14b08:	e000ed00 	.word	0xe000ed00
   14b0c:	000308ab 	.word	0x000308ab
   14b10:	000308c3 	.word	0x000308c3
   14b14:	000308d6 	.word	0x000308d6
   14b18:	000308f0 	.word	0x000308f0
   14b1c:	0003091a 	.word	0x0003091a
   14b20:	00030938 	.word	0x00030938
   14b24:	0003095d 	.word	0x0003095d
   14b28:	00030977 	.word	0x00030977

00014b2c <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b30:	4b30      	ldr	r3, [pc, #192]	; (14bf4 <mem_manage_fault.isra.0+0xc8>)
   14b32:	4c31      	ldr	r4, [pc, #196]	; (14bf8 <mem_manage_fault.isra.0+0xcc>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14b34:	4d31      	ldr	r5, [pc, #196]	; (14bfc <mem_manage_fault.isra.0+0xd0>)
   14b36:	1ae4      	subs	r4, r4, r3
   14b38:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   14b3a:	01a4      	lsls	r4, r4, #6
   14b3c:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14b40:	4607      	mov	r7, r0
   14b42:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14b44:	482e      	ldr	r0, [pc, #184]	; (14c00 <mem_manage_fault.isra.0+0xd4>)
   14b46:	4641      	mov	r1, r8
   14b48:	f017 fca6 	bl	2c498 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14b4c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14b4e:	06d1      	lsls	r1, r2, #27
   14b50:	d503      	bpl.n	14b5a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14b52:	4641      	mov	r1, r8
   14b54:	482b      	ldr	r0, [pc, #172]	; (14c04 <mem_manage_fault.isra.0+0xd8>)
   14b56:	f017 fc9f 	bl	2c498 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14b5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b5c:	071a      	lsls	r2, r3, #28
   14b5e:	d504      	bpl.n	14b6a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14b60:	4829      	ldr	r0, [pc, #164]	; (14c08 <mem_manage_fault.isra.0+0xdc>)
   14b62:	f044 0101 	orr.w	r1, r4, #1
   14b66:	f017 fc97 	bl	2c498 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14b6a:	4d24      	ldr	r5, [pc, #144]	; (14bfc <mem_manage_fault.isra.0+0xd0>)
   14b6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b6e:	079b      	lsls	r3, r3, #30
   14b70:	d512      	bpl.n	14b98 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   14b72:	f044 0801 	orr.w	r8, r4, #1
   14b76:	4641      	mov	r1, r8
   14b78:	4824      	ldr	r0, [pc, #144]	; (14c0c <mem_manage_fault.isra.0+0xe0>)
   14b7a:	f017 fc8d 	bl	2c498 <log_0>
		mmfar = SCB->MMFAR;
   14b7e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14b80:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b82:	0618      	lsls	r0, r3, #24
   14b84:	d508      	bpl.n	14b98 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14b86:	4642      	mov	r2, r8
   14b88:	4821      	ldr	r0, [pc, #132]	; (14c10 <mem_manage_fault.isra.0+0xe4>)
   14b8a:	f017 fc94 	bl	2c4b6 <log_1>
			if (from_hard_fault) {
   14b8e:	b11f      	cbz	r7, 14b98 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14b90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14b96:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14b98:	4d18      	ldr	r5, [pc, #96]	; (14bfc <mem_manage_fault.isra.0+0xd0>)
   14b9a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14b9c:	07d1      	lsls	r1, r2, #31
   14b9e:	d504      	bpl.n	14baa <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   14ba0:	481c      	ldr	r0, [pc, #112]	; (14c14 <mem_manage_fault.isra.0+0xe8>)
   14ba2:	f044 0101 	orr.w	r1, r4, #1
   14ba6:	f017 fc77 	bl	2c498 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14baa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14bac:	069a      	lsls	r2, r3, #26
   14bae:	d504      	bpl.n	14bba <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   14bb0:	4819      	ldr	r0, [pc, #100]	; (14c18 <mem_manage_fault.isra.0+0xec>)
   14bb2:	f044 0101 	orr.w	r1, r4, #1
   14bb6:	f017 fc6f 	bl	2c498 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   14bba:	4b10      	ldr	r3, [pc, #64]	; (14bfc <mem_manage_fault.isra.0+0xd0>)
   14bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14bbe:	06db      	lsls	r3, r3, #27
   14bc0:	d50e      	bpl.n	14be0 <mem_manage_fault.isra.0+0xb4>
	__ASSERT(0,
   14bc2:	4916      	ldr	r1, [pc, #88]	; (14c1c <mem_manage_fault.isra.0+0xf0>)
   14bc4:	f44f 739f 	mov.w	r3, #318	; 0x13e
   14bc8:	4a15      	ldr	r2, [pc, #84]	; (14c20 <mem_manage_fault.isra.0+0xf4>)
   14bca:	4816      	ldr	r0, [pc, #88]	; (14c24 <mem_manage_fault.isra.0+0xf8>)
   14bcc:	f017 fa17 	bl	2bffe <printk>
   14bd0:	4815      	ldr	r0, [pc, #84]	; (14c28 <mem_manage_fault.isra.0+0xfc>)
   14bd2:	f017 fa14 	bl	2bffe <printk>
   14bd6:	f44f 719f 	mov.w	r1, #318	; 0x13e
   14bda:	4811      	ldr	r0, [pc, #68]	; (14c20 <mem_manage_fault.isra.0+0xf4>)
   14bdc:	f017 fc2c 	bl	2c438 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   14be0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14be2:	4a06      	ldr	r2, [pc, #24]	; (14bfc <mem_manage_fault.isra.0+0xd0>)
   14be4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14be6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14bea:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14bec:	7030      	strb	r0, [r6, #0]
}
   14bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14bf2:	bf00      	nop
   14bf4:	0002ebc4 	.word	0x0002ebc4
   14bf8:	0002ec44 	.word	0x0002ec44
   14bfc:	e000ed00 	.word	0xe000ed00
   14c00:	000309a2 	.word	0x000309a2
   14c04:	000309b8 	.word	0x000309b8
   14c08:	000309eb 	.word	0x000309eb
   14c0c:	000309fe 	.word	0x000309fe
   14c10:	00030a16 	.word	0x00030a16
   14c14:	00030a2c 	.word	0x00030a2c
   14c18:	00030a4b 	.word	0x00030a4b
   14c1c:	00032a36 	.word	0x00032a36
   14c20:	00030a7a 	.word	0x00030a7a
   14c24:	0002ff0d 	.word	0x0002ff0d
   14c28:	00030ab4 	.word	0x00030ab4

00014c2c <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c30:	4b2a      	ldr	r3, [pc, #168]	; (14cdc <bus_fault.isra.0+0xb0>)
   14c32:	4c2b      	ldr	r4, [pc, #172]	; (14ce0 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14c34:	4d2b      	ldr	r5, [pc, #172]	; (14ce4 <bus_fault.isra.0+0xb8>)
   14c36:	1ae4      	subs	r4, r4, r3
   14c38:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   14c3a:	01a4      	lsls	r4, r4, #6
   14c3c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14c40:	4607      	mov	r7, r0
   14c42:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14c44:	4828      	ldr	r0, [pc, #160]	; (14ce8 <bus_fault.isra.0+0xbc>)
   14c46:	4641      	mov	r1, r8
   14c48:	f017 fc26 	bl	2c498 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14c4c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14c4e:	04d1      	lsls	r1, r2, #19
   14c50:	d503      	bpl.n	14c5a <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   14c52:	4641      	mov	r1, r8
   14c54:	4825      	ldr	r0, [pc, #148]	; (14cec <bus_fault.isra.0+0xc0>)
   14c56:	f017 fc1f 	bl	2c498 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14c5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c5c:	051a      	lsls	r2, r3, #20
   14c5e:	d504      	bpl.n	14c6a <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14c60:	4823      	ldr	r0, [pc, #140]	; (14cf0 <bus_fault.isra.0+0xc4>)
   14c62:	f044 0101 	orr.w	r1, r4, #1
   14c66:	f017 fc17 	bl	2c498 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14c6a:	4d1e      	ldr	r5, [pc, #120]	; (14ce4 <bus_fault.isra.0+0xb8>)
   14c6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c6e:	059b      	lsls	r3, r3, #22
   14c70:	d512      	bpl.n	14c98 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   14c72:	f044 0801 	orr.w	r8, r4, #1
   14c76:	4641      	mov	r1, r8
   14c78:	481e      	ldr	r0, [pc, #120]	; (14cf4 <bus_fault.isra.0+0xc8>)
   14c7a:	f017 fc0d 	bl	2c498 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   14c7e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14c80:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c82:	0418      	lsls	r0, r3, #16
   14c84:	d508      	bpl.n	14c98 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14c86:	4642      	mov	r2, r8
   14c88:	481b      	ldr	r0, [pc, #108]	; (14cf8 <bus_fault.isra.0+0xcc>)
   14c8a:	f017 fc14 	bl	2c4b6 <log_1>
			if (from_hard_fault) {
   14c8e:	b11f      	cbz	r7, 14c98 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14c90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14c96:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14c98:	4d12      	ldr	r5, [pc, #72]	; (14ce4 <bus_fault.isra.0+0xb8>)
   14c9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c9c:	0559      	lsls	r1, r3, #21
   14c9e:	d504      	bpl.n	14caa <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   14ca0:	4816      	ldr	r0, [pc, #88]	; (14cfc <bus_fault.isra.0+0xd0>)
   14ca2:	f044 0101 	orr.w	r1, r4, #1
   14ca6:	f017 fbf7 	bl	2c498 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14caa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14cac:	05da      	lsls	r2, r3, #23
   14cae:	d50d      	bpl.n	14ccc <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   14cb0:	4813      	ldr	r0, [pc, #76]	; (14d00 <bus_fault.isra.0+0xd4>)
   14cb2:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14cb6:	f017 fbef 	bl	2c498 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   14cba:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14cbc:	4a09      	ldr	r2, [pc, #36]	; (14ce4 <bus_fault.isra.0+0xb8>)
   14cbe:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14cc0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14cc4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14cc6:	7030      	strb	r0, [r6, #0]
}
   14cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14ccc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14cce:	049b      	lsls	r3, r3, #18
   14cd0:	d5f3      	bpl.n	14cba <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14cd2:	480c      	ldr	r0, [pc, #48]	; (14d04 <bus_fault.isra.0+0xd8>)
   14cd4:	f044 0101 	orr.w	r1, r4, #1
   14cd8:	e7ed      	b.n	14cb6 <bus_fault.isra.0+0x8a>
   14cda:	bf00      	nop
   14cdc:	0002ebc4 	.word	0x0002ebc4
   14ce0:	0002ec44 	.word	0x0002ec44
   14ce4:	e000ed00 	.word	0xe000ed00
   14ce8:	00030aee 	.word	0x00030aee
   14cec:	00030b04 	.word	0x00030b04
   14cf0:	000309eb 	.word	0x000309eb
   14cf4:	00030b15 	.word	0x00030b15
   14cf8:	00030b2e 	.word	0x00030b2e
   14cfc:	00030b43 	.word	0x00030b43
   14d00:	00030b5e 	.word	0x00030b5e
   14d04:	00030a4b 	.word	0x00030a4b

00014d08 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14d0c:	4b63      	ldr	r3, [pc, #396]	; (14e9c <z_arm_fault+0x194>)
{
   14d0e:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14d10:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   14d14:	460e      	mov	r6, r1
   14d16:	4614      	mov	r4, r2
   14d18:	2700      	movs	r7, #0
   14d1a:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14d1c:	f3c8 0508 	ubfx	r5, r8, #0, #9
   14d20:	f387 8811 	msr	BASEPRI, r7
   14d24:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14d28:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14d2c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14d30:	d117      	bne.n	14d62 <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   14d32:	07d0      	lsls	r0, r2, #31
   14d34:	d415      	bmi.n	14d62 <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   14d36:	0651      	lsls	r1, r2, #25
   14d38:	d404      	bmi.n	14d44 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14d3a:	0722      	lsls	r2, r4, #28
   14d3c:	d40f      	bmi.n	14d5e <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)msp;
   14d3e:	464e      	mov	r6, r9
			*nested_exc = true;
   14d40:	2701      	movs	r7, #1
   14d42:	e00d      	b.n	14d60 <z_arm_fault+0x58>
   14d44:	4956      	ldr	r1, [pc, #344]	; (14ea0 <z_arm_fault+0x198>)
   14d46:	4b57      	ldr	r3, [pc, #348]	; (14ea4 <z_arm_fault+0x19c>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   14d48:	4857      	ldr	r0, [pc, #348]	; (14ea8 <z_arm_fault+0x1a0>)
   14d4a:	1a5b      	subs	r3, r3, r1
   14d4c:	08db      	lsrs	r3, r3, #3
   14d4e:	019b      	lsls	r3, r3, #6
   14d50:	f043 0101 	orr.w	r1, r3, #1
   14d54:	f017 fba0 	bl	2c498 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   14d58:	f014 0704 	ands.w	r7, r4, #4
   14d5c:	d01e      	beq.n	14d9c <z_arm_fault+0x94>
	*nested_exc = false;
   14d5e:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   14d60:	b97e      	cbnz	r6, 14d82 <z_arm_fault+0x7a>
   14d62:	f240 33bb 	movw	r3, #955	; 0x3bb
   14d66:	4a51      	ldr	r2, [pc, #324]	; (14eac <z_arm_fault+0x1a4>)
   14d68:	4951      	ldr	r1, [pc, #324]	; (14eb0 <z_arm_fault+0x1a8>)
   14d6a:	4852      	ldr	r0, [pc, #328]	; (14eb4 <z_arm_fault+0x1ac>)
   14d6c:	f017 f947 	bl	2bffe <printk>
   14d70:	4851      	ldr	r0, [pc, #324]	; (14eb8 <z_arm_fault+0x1b0>)
   14d72:	f017 f944 	bl	2bffe <printk>
   14d76:	f240 31bb 	movw	r1, #955	; 0x3bb
   14d7a:	484c      	ldr	r0, [pc, #304]	; (14eac <z_arm_fault+0x1a4>)
   14d7c:	f017 fb5c 	bl	2c438 <assert_post_action>
   14d80:	2600      	movs	r6, #0
	*recoverable = false;
   14d82:	2300      	movs	r3, #0
   14d84:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   14d88:	1eeb      	subs	r3, r5, #3
   14d8a:	2b09      	cmp	r3, #9
   14d8c:	d86c      	bhi.n	14e68 <z_arm_fault+0x160>
   14d8e:	e8df f003 	tbb	[pc, r3]
   14d92:	5a07      	.short	0x5a07
   14d94:	6b6b3e5e 	.word	0x6b6b3e5e
   14d98:	626b6b6b 	.word	0x626b6b6b
			ptr_esf = (z_arch_esf_t *)msp;
   14d9c:	464e      	mov	r6, r9
	if (!alternative_state_exc) {
   14d9e:	e7df      	b.n	14d60 <z_arm_fault+0x58>
	*recoverable = false;
   14da0:	f04f 0800 	mov.w	r8, #0
   14da4:	4b3e      	ldr	r3, [pc, #248]	; (14ea0 <z_arm_fault+0x198>)
   14da6:	4d3f      	ldr	r5, [pc, #252]	; (14ea4 <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   14da8:	4844      	ldr	r0, [pc, #272]	; (14ebc <z_arm_fault+0x1b4>)
   14daa:	1aed      	subs	r5, r5, r3
   14dac:	08ed      	lsrs	r5, r5, #3
   14dae:	01ad      	lsls	r5, r5, #6
   14db0:	f045 0501 	orr.w	r5, r5, #1
   14db4:	4629      	mov	r1, r5
   14db6:	f017 fb6f 	bl	2c498 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14dba:	4b38      	ldr	r3, [pc, #224]	; (14e9c <z_arm_fault+0x194>)
	*recoverable = false;
   14dbc:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14dc0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   14dc2:	f014 0402 	ands.w	r4, r4, #2
   14dc6:	d005      	beq.n	14dd4 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   14dc8:	4629      	mov	r1, r5
   14dca:	483d      	ldr	r0, [pc, #244]	; (14ec0 <z_arm_fault+0x1b8>)
	PR_FAULT_INFO(
   14dcc:	f017 fb64 	bl	2c498 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14dd0:	2400      	movs	r4, #0
}
   14dd2:	e01f      	b.n	14e14 <z_arm_fault+0x10c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14dd6:	005b      	lsls	r3, r3, #1
   14dd8:	d51c      	bpl.n	14e14 <z_arm_fault+0x10c>
		PR_EXC("  Fault escalation (see below)");
   14dda:	4629      	mov	r1, r5
   14ddc:	4839      	ldr	r0, [pc, #228]	; (14ec4 <z_arm_fault+0x1bc>)
   14dde:	f017 fb5b 	bl	2c498 <log_0>
		if (SCB_MMFSR != 0) {
   14de2:	4b39      	ldr	r3, [pc, #228]	; (14ec8 <z_arm_fault+0x1c0>)
   14de4:	781b      	ldrb	r3, [r3, #0]
   14de6:	b12b      	cbz	r3, 14df4 <z_arm_fault+0xec>
			reason = mem_manage_fault(esf, 1, recoverable);
   14de8:	2001      	movs	r0, #1
   14dea:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   14dee:	f7ff fe9d 	bl	14b2c <mem_manage_fault.isra.0>
   14df2:	e00e      	b.n	14e12 <z_arm_fault+0x10a>
		} else if (SCB_BFSR != 0) {
   14df4:	4b35      	ldr	r3, [pc, #212]	; (14ecc <z_arm_fault+0x1c4>)
   14df6:	781b      	ldrb	r3, [r3, #0]
   14df8:	b12b      	cbz	r3, 14e06 <z_arm_fault+0xfe>
			reason = bus_fault(esf, 1, recoverable);
   14dfa:	2001      	movs	r0, #1
   14dfc:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   14e00:	f7ff ff14 	bl	14c2c <bus_fault.isra.0>
   14e04:	e005      	b.n	14e12 <z_arm_fault+0x10a>
		} else if (SCB_UFSR != 0) {
   14e06:	4b32      	ldr	r3, [pc, #200]	; (14ed0 <z_arm_fault+0x1c8>)
   14e08:	881b      	ldrh	r3, [r3, #0]
   14e0a:	b29b      	uxth	r3, r3
   14e0c:	b113      	cbz	r3, 14e14 <z_arm_fault+0x10c>
			reason = usage_fault(esf);
   14e0e:	f7ff fe25 	bl	14a5c <usage_fault.isra.0>
   14e12:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14e14:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14e18:	b993      	cbnz	r3, 14e40 <z_arm_fault+0x138>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14e1a:	2268      	movs	r2, #104	; 0x68
   14e1c:	4631      	mov	r1, r6
   14e1e:	a802      	add	r0, sp, #8
   14e20:	f7f7 fe94 	bl	cb4c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14e26:	b39f      	cbz	r7, 14e90 <z_arm_fault+0x188>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14e2c:	b922      	cbnz	r2, 14e38 <z_arm_fault+0x130>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14e2e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14e32:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14e36:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14e38:	4620      	mov	r0, r4
   14e3a:	a902      	add	r1, sp, #8
   14e3c:	f7ff fd26 	bl	1488c <z_arm_fatal_error>
}
   14e40:	b01d      	add	sp, #116	; 0x74
   14e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   14e46:	2000      	movs	r0, #0
   14e48:	f10d 0107 	add.w	r1, sp, #7
   14e4c:	e7cf      	b.n	14dee <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
   14e4e:	2000      	movs	r0, #0
   14e50:	f10d 0107 	add.w	r1, sp, #7
   14e54:	e7d4      	b.n	14e00 <z_arm_fault+0xf8>
   14e56:	4913      	ldr	r1, [pc, #76]	; (14ea4 <z_arm_fault+0x19c>)
   14e58:	4b11      	ldr	r3, [pc, #68]	; (14ea0 <z_arm_fault+0x198>)
	PR_FAULT_INFO(
   14e5a:	481e      	ldr	r0, [pc, #120]	; (14ed4 <z_arm_fault+0x1cc>)
   14e5c:	1ac9      	subs	r1, r1, r3
   14e5e:	08c9      	lsrs	r1, r1, #3
   14e60:	0189      	lsls	r1, r1, #6
   14e62:	f041 0101 	orr.w	r1, r1, #1
   14e66:	e7b1      	b.n	14dcc <z_arm_fault+0xc4>
   14e68:	4a0d      	ldr	r2, [pc, #52]	; (14ea0 <z_arm_fault+0x198>)
   14e6a:	4b0e      	ldr	r3, [pc, #56]	; (14ea4 <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** %s %d) *****",
   14e6c:	481a      	ldr	r0, [pc, #104]	; (14ed8 <z_arm_fault+0x1d0>)
   14e6e:	1a9b      	subs	r3, r3, r2
   14e70:	08db      	lsrs	r3, r3, #3
   14e72:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   14e76:	ea4f 1383 	mov.w	r3, r3, lsl #6
   14e7a:	4918      	ldr	r1, [pc, #96]	; (14edc <z_arm_fault+0x1d4>)
   14e7c:	f043 0301 	orr.w	r3, r3, #1
   14e80:	bf18      	it	ne
   14e82:	4601      	movne	r1, r0
   14e84:	f1a5 0210 	sub.w	r2, r5, #16
   14e88:	4815      	ldr	r0, [pc, #84]	; (14ee0 <z_arm_fault+0x1d8>)
   14e8a:	f017 fb2b 	bl	2c4e4 <log_2>
   14e8e:	e79f      	b.n	14dd0 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14e90:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14e94:	f023 0301 	bic.w	r3, r3, #1
   14e98:	e7cd      	b.n	14e36 <z_arm_fault+0x12e>
   14e9a:	bf00      	nop
   14e9c:	e000ed00 	.word	0xe000ed00
   14ea0:	0002ebc4 	.word	0x0002ebc4
   14ea4:	0002ec44 	.word	0x0002ec44
   14ea8:	00030b76 	.word	0x00030b76
   14eac:	00030a7a 	.word	0x00030a7a
   14eb0:	00030b99 	.word	0x00030b99
   14eb4:	0002ff0d 	.word	0x0002ff0d
   14eb8:	00030bac 	.word	0x00030bac
   14ebc:	00030bea 	.word	0x00030bea
   14ec0:	00030c01 	.word	0x00030c01
   14ec4:	00030c22 	.word	0x00030c22
   14ec8:	e000ed28 	.word	0xe000ed28
   14ecc:	e000ed29 	.word	0xe000ed29
   14ed0:	e000ed2a 	.word	0xe000ed2a
   14ed4:	00030c41 	.word	0x00030c41
   14ed8:	00030c8c 	.word	0x00030c8c
   14edc:	00030c77 	.word	0x00030c77
   14ee0:	00030ca5 	.word	0x00030ca5

00014ee4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14ee4:	4b04      	ldr	r3, [pc, #16]	; (14ef8 <z_arm_fault_init+0x14>)
   14ee6:	695a      	ldr	r2, [r3, #20]
   14ee8:	f042 0210 	orr.w	r2, r2, #16
   14eec:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   14eee:	695a      	ldr	r2, [r3, #20]
   14ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   14ef4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   14ef6:	4770      	bx	lr
   14ef8:	e000ed00 	.word	0xe000ed00

00014efc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14efc:	4b04      	ldr	r3, [pc, #16]	; (14f10 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14efe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14f00:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   14f02:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14f04:	d003      	beq.n	14f0e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14f06:	4903      	ldr	r1, [pc, #12]	; (14f14 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14f0c:	600a      	str	r2, [r1, #0]

00014f0e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14f0e:	4770      	bx	lr
	ldr r3, =_kernel
   14f10:	20021dd4 	.word	0x20021dd4
	ldr r1, =_SCS_ICSR
   14f14:	e000ed04 	.word	0xe000ed04

00014f18 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   14f18:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14f1c:	4905      	ldr	r1, [pc, #20]	; (14f34 <sys_arch_reboot+0x1c>)
   14f1e:	4b06      	ldr	r3, [pc, #24]	; (14f38 <sys_arch_reboot+0x20>)
   14f20:	68ca      	ldr	r2, [r1, #12]
   14f22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14f26:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14f28:	60cb      	str	r3, [r1, #12]
   14f2a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14f2e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14f30:	e7fd      	b.n	14f2e <sys_arch_reboot+0x16>
   14f32:	bf00      	nop
   14f34:	e000ed00 	.word	0xe000ed00
   14f38:	05fa0004 	.word	0x05fa0004

00014f3c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14f3c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14f3e:	2120      	movs	r1, #32
   14f40:	4803      	ldr	r0, [pc, #12]	; (14f50 <z_arm_interrupt_init+0x14>)
   14f42:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14f44:	3301      	adds	r3, #1
   14f46:	2b41      	cmp	r3, #65	; 0x41
   14f48:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14f4c:	d1f9      	bne.n	14f42 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14f4e:	4770      	bx	lr
   14f50:	e000e100 	.word	0xe000e100

00014f54 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   14f54:	b510      	push	{r4, lr}
   14f56:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   14f58:	f00e fe52 	bl	23c00 <z_thread_single_abort>

	if (_current == thread) {
   14f5c:	4b11      	ldr	r3, [pc, #68]	; (14fa4 <z_impl_k_thread_abort+0x50>)
   14f5e:	689b      	ldr	r3, [r3, #8]
   14f60:	42a3      	cmp	r3, r4
   14f62:	d107      	bne.n	14f74 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14f64:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14f68:	b183      	cbz	r3, 14f8c <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14f6a:	4a0f      	ldr	r2, [pc, #60]	; (14fa8 <z_impl_k_thread_abort+0x54>)
   14f6c:	6853      	ldr	r3, [r2, #4]
   14f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14f72:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   14f74:	f04f 0320 	mov.w	r3, #32
   14f78:	f3ef 8011 	mrs	r0, BASEPRI
   14f7c:	f383 8811 	msr	BASEPRI, r3
   14f80:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   14f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   14f88:	f019 bb0e 	b.w	2e5a8 <z_reschedule_irqlock>
   14f8c:	f04f 0320 	mov.w	r3, #32
   14f90:	f3ef 8011 	mrs	r0, BASEPRI
   14f94:	f383 8811 	msr	BASEPRI, r3
   14f98:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   14f9c:	f7ff fb34 	bl	14608 <arch_swap>
	return ret;
   14fa0:	e7e8      	b.n	14f74 <z_impl_k_thread_abort+0x20>
   14fa2:	bf00      	nop
   14fa4:	20021dd4 	.word	0x20021dd4
   14fa8:	e000ed00 	.word	0xe000ed00

00014fac <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   14fac:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   14fae:	4b0e      	ldr	r3, [pc, #56]	; (14fe8 <z_arm_configure_static_mpu_regions+0x3c>)
{
   14fb0:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   14fb2:	9302      	str	r3, [sp, #8]
   14fb4:	4b0d      	ldr	r3, [pc, #52]	; (14fec <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14fb6:	4c0e      	ldr	r4, [pc, #56]	; (14ff0 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   14fb8:	9303      	str	r3, [sp, #12]
   14fba:	4b0e      	ldr	r3, [pc, #56]	; (14ff4 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14fbc:	4a0e      	ldr	r2, [pc, #56]	; (14ff8 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   14fbe:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   14fc0:	ab02      	add	r3, sp, #8
   14fc2:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14fc4:	a801      	add	r0, sp, #4
   14fc6:	4623      	mov	r3, r4
   14fc8:	2101      	movs	r1, #1
   14fca:	f000 f96d 	bl	152a8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   14fce:	2300      	movs	r3, #0
   14fd0:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   14fd2:	4b0a      	ldr	r3, [pc, #40]	; (14ffc <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14fd4:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   14fd6:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14fd8:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   14fda:	9305      	str	r3, [sp, #20]
   14fdc:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14fde:	f000 f989 	bl	152f4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   14fe2:	b008      	add	sp, #32
   14fe4:	bd10      	pop	{r4, pc}
   14fe6:	bf00      	nop
   14fe8:	20020000 	.word	0x20020000
   14fec:	00000000 	.word	0x00000000
   14ff0:	20040000 	.word	0x20040000
   14ff4:	00010006 	.word	0x00010006
   14ff8:	20020000 	.word	0x20020000
   14ffc:	20020ce8 	.word	0x20020ce8

00015000 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   15000:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   15002:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   15004:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   15006:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1500a:	f004 031f 	and.w	r3, r4, #31
   1500e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   15010:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   15012:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   15014:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   15018:	4904      	ldr	r1, [pc, #16]	; (1502c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1501a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1501e:	f043 0301 	orr.w	r3, r3, #1
   15022:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   15024:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   15026:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   15028:	bd10      	pop	{r4, pc}
   1502a:	bf00      	nop
   1502c:	e000ed90 	.word	0xe000ed90

00015030 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   15030:	b508      	push	{r3, lr}
   15032:	4a07      	ldr	r2, [pc, #28]	; (15050 <region_allocate_and_init.part.0+0x20>)
   15034:	4b07      	ldr	r3, [pc, #28]	; (15054 <region_allocate_and_init.part.0+0x24>)
   15036:	4601      	mov	r1, r0
   15038:	1ad2      	subs	r2, r2, r3
   1503a:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1503c:	0192      	lsls	r2, r2, #6
   1503e:	4806      	ldr	r0, [pc, #24]	; (15058 <region_allocate_and_init.part.0+0x28>)
   15040:	f042 0201 	orr.w	r2, r2, #1
   15044:	f017 fa37 	bl	2c4b6 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   15048:	f06f 0015 	mvn.w	r0, #21
   1504c:	bd08      	pop	{r3, pc}
   1504e:	bf00      	nop
   15050:	0002ec2c 	.word	0x0002ec2c
   15054:	0002ebc4 	.word	0x0002ebc4
   15058:	00030cbc 	.word	0x00030cbc

0001505c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15060:	4607      	mov	r7, r0
   15062:	4688      	mov	r8, r1
   15064:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   15066:	2600      	movs	r6, #0
	MPU->RNR = index;
   15068:	4d56      	ldr	r5, [pc, #344]	; (151c4 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1506a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1506c:	4546      	cmp	r6, r8
   1506e:	da35      	bge.n	150dc <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   15070:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   15074:	f8d3 9004 	ldr.w	r9, [r3, #4]
   15078:	f1b9 0f00 	cmp.w	r9, #0
   1507c:	d051      	beq.n	15122 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   1507e:	f1b9 0f1f 	cmp.w	r9, #31
   15082:	d91e      	bls.n	150c2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   15084:	f019 0f1f 	tst.w	r9, #31
   15088:	d11b      	bne.n	150c2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   1508a:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1508e:	f01a 0f1f 	tst.w	sl, #31
   15092:	d116      	bne.n	150c2 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   15094:	4650      	mov	r0, sl
   15096:	f017 fdd9 	bl	2cc4c <arm_cmse_mpu_region_get>
   1509a:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1509c:	eb09 000a 	add.w	r0, r9, sl
   150a0:	3801      	subs	r0, #1
   150a2:	f017 fdd3 	bl	2cc4c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   150a6:	4583      	cmp	fp, r0
   150a8:	d01c      	beq.n	150e4 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   150aa:	f06f 0b15 	mvn.w	fp, #21
   150ae:	4a46      	ldr	r2, [pc, #280]	; (151c8 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   150b0:	4b46      	ldr	r3, [pc, #280]	; (151cc <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   150b2:	4659      	mov	r1, fp
   150b4:	1ad2      	subs	r2, r2, r3
   150b6:	08d2      	lsrs	r2, r2, #3
   150b8:	0192      	lsls	r2, r2, #6
   150ba:	4845      	ldr	r0, [pc, #276]	; (151d0 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   150bc:	f042 0201 	orr.w	r2, r2, #1
   150c0:	e008      	b.n	150d4 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   150c2:	4631      	mov	r1, r6
   150c4:	4a40      	ldr	r2, [pc, #256]	; (151c8 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   150c6:	4b41      	ldr	r3, [pc, #260]	; (151cc <mpu_configure_regions_and_partition.constprop.0+0x170>)
   150c8:	4842      	ldr	r0, [pc, #264]	; (151d4 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   150ca:	1ad2      	subs	r2, r2, r3
   150cc:	08d2      	lsrs	r2, r2, #3
   150ce:	0192      	lsls	r2, r2, #6
   150d0:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   150d4:	f017 f9ef 	bl	2c4b6 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   150d8:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   150dc:	4620      	mov	r0, r4
   150de:	b005      	add	sp, #20
   150e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   150e4:	f11b 0f16 	cmn.w	fp, #22
   150e8:	d0e1      	beq.n	150ae <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   150ea:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   150ec:	455b      	cmp	r3, fp
   150ee:	dbde      	blt.n	150ae <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   150f0:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   150f4:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   150f6:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   150fa:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   150fc:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   15100:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   15104:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   15108:	e9d1 3200 	ldrd	r3, r2, [r1]
   1510c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1510e:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   15110:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   15114:	d118      	bne.n	15148 <mpu_configure_regions_and_partition.constprop.0+0xec>
   15116:	45ca      	cmp	sl, r9
   15118:	d105      	bne.n	15126 <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   1511a:	fa5f f08b 	uxtb.w	r0, fp
   1511e:	f017 fd74 	bl	2cc0a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   15122:	3601      	adds	r6, #1
   15124:	e7a2      	b.n	1506c <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   15126:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1512a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1512c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   15130:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   15134:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   15136:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   15138:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1513a:	f017 fd66 	bl	2cc0a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1513e:	f110 0f16 	cmn.w	r0, #22
   15142:	d0c9      	beq.n	150d8 <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   15144:	1c44      	adds	r4, r0, #1
   15146:	e7ec      	b.n	15122 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   15148:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1514c:	692a      	ldr	r2, [r5, #16]
   1514e:	3b01      	subs	r3, #1
   15150:	f023 031f 	bic.w	r3, r3, #31
   15154:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   15158:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1515a:	45ca      	cmp	sl, r9
   1515c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1515e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   15160:	d0eb      	beq.n	1513a <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   15162:	f017 fd52 	bl	2cc0a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   15166:	f110 0f16 	cmn.w	r0, #22
   1516a:	d0b5      	beq.n	150d8 <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   1516c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   15170:	68ea      	ldr	r2, [r5, #12]
   15172:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   15176:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   1517a:	f362 0304 	bfi	r3, r2, #0, #5
   1517e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   15182:	692b      	ldr	r3, [r5, #16]
   15184:	f89d 2008 	ldrb.w	r2, [sp, #8]
   15188:	085b      	lsrs	r3, r3, #1
   1518a:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   1518e:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   15192:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   15196:	e9d3 1300 	ldrd	r1, r3, [r3]
   1519a:	440b      	add	r3, r1
   1519c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1519e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   151a2:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   151a4:	4453      	add	r3, sl
   151a6:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   151aa:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   151ac:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   151b0:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   151b2:	9303      	str	r3, [sp, #12]
   151b4:	d902      	bls.n	151bc <mpu_configure_regions_and_partition.constprop.0+0x160>
   151b6:	f7ff ff3b 	bl	15030 <region_allocate_and_init.part.0>
   151ba:	e7c0      	b.n	1513e <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   151bc:	4669      	mov	r1, sp
   151be:	f7ff ff1f 	bl	15000 <region_init>
			if (reg_index == -EINVAL) {
   151c2:	e7bf      	b.n	15144 <mpu_configure_regions_and_partition.constprop.0+0xe8>
   151c4:	e000ed90 	.word	0xe000ed90
   151c8:	0002ec2c 	.word	0x0002ec2c
   151cc:	0002ebc4 	.word	0x0002ebc4
   151d0:	00030d05 	.word	0x00030d05
   151d4:	00030ce2 	.word	0x00030ce2

000151d8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   151d8:	2205      	movs	r2, #5
   151da:	4b03      	ldr	r3, [pc, #12]	; (151e8 <arm_core_mpu_enable+0x10>)
   151dc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   151de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   151e2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   151e6:	4770      	bx	lr
   151e8:	e000ed90 	.word	0xe000ed90

000151ec <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   151ec:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   151f0:	2200      	movs	r2, #0
   151f2:	4b01      	ldr	r3, [pc, #4]	; (151f8 <arm_core_mpu_disable+0xc>)
   151f4:	605a      	str	r2, [r3, #4]
}
   151f6:	4770      	bx	lr
   151f8:	e000ed90 	.word	0xe000ed90

000151fc <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   151fc:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   151fe:	4e20      	ldr	r6, [pc, #128]	; (15280 <arm_mpu_init+0x84>)
   15200:	6835      	ldr	r5, [r6, #0]
   15202:	2d10      	cmp	r5, #16
   15204:	d913      	bls.n	1522e <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   15206:	f44f 739d 	mov.w	r3, #314	; 0x13a
   1520a:	4a1e      	ldr	r2, [pc, #120]	; (15284 <arm_mpu_init+0x88>)
   1520c:	491e      	ldr	r1, [pc, #120]	; (15288 <arm_mpu_init+0x8c>)
   1520e:	481f      	ldr	r0, [pc, #124]	; (1528c <arm_mpu_init+0x90>)
   15210:	f016 fef5 	bl	2bffe <printk>
   15214:	2210      	movs	r2, #16
   15216:	4629      	mov	r1, r5
   15218:	481d      	ldr	r0, [pc, #116]	; (15290 <arm_mpu_init+0x94>)
   1521a:	f016 fef0 	bl	2bffe <printk>
   1521e:	4819      	ldr	r0, [pc, #100]	; (15284 <arm_mpu_init+0x88>)
   15220:	f44f 719d 	mov.w	r1, #314	; 0x13a
   15224:	f017 f908 	bl	2c438 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   15228:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   1522c:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   1522e:	f7ff ffdd 	bl	151ec <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15232:	2000      	movs	r0, #0
	MPU->MAIR0 =
   15234:	4c17      	ldr	r4, [pc, #92]	; (15294 <arm_mpu_init+0x98>)
   15236:	4a18      	ldr	r2, [pc, #96]	; (15298 <arm_mpu_init+0x9c>)
   15238:	6322      	str	r2, [r4, #48]	; 0x30
   1523a:	4285      	cmp	r5, r0
   1523c:	d119      	bne.n	15272 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   1523e:	4b17      	ldr	r3, [pc, #92]	; (1529c <arm_mpu_init+0xa0>)
   15240:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   15242:	f7ff ffc9 	bl	151d8 <arm_core_mpu_enable>
	__ASSERT(
   15246:	6823      	ldr	r3, [r4, #0]
   15248:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1524c:	2b10      	cmp	r3, #16
   1524e:	d00e      	beq.n	1526e <arm_mpu_init+0x72>
   15250:	4913      	ldr	r1, [pc, #76]	; (152a0 <arm_mpu_init+0xa4>)
   15252:	f44f 73b0 	mov.w	r3, #352	; 0x160
   15256:	4a0b      	ldr	r2, [pc, #44]	; (15284 <arm_mpu_init+0x88>)
   15258:	480c      	ldr	r0, [pc, #48]	; (1528c <arm_mpu_init+0x90>)
   1525a:	f016 fed0 	bl	2bffe <printk>
   1525e:	4811      	ldr	r0, [pc, #68]	; (152a4 <arm_mpu_init+0xa8>)
   15260:	f016 fecd 	bl	2bffe <printk>
   15264:	f44f 71b0 	mov.w	r1, #352	; 0x160
   15268:	4806      	ldr	r0, [pc, #24]	; (15284 <arm_mpu_init+0x88>)
   1526a:	f017 f8e5 	bl	2c438 <assert_post_action>
	return 0;
   1526e:	2000      	movs	r0, #0
   15270:	e7dc      	b.n	1522c <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   15272:	6871      	ldr	r1, [r6, #4]
   15274:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   15278:	f7ff fec2 	bl	15000 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1527c:	3001      	adds	r0, #1
   1527e:	e7dc      	b.n	1523a <arm_mpu_init+0x3e>
   15280:	0002ee78 	.word	0x0002ee78
   15284:	00030d28 	.word	0x00030d28
   15288:	00032a36 	.word	0x00032a36
   1528c:	0002ff0d 	.word	0x0002ff0d
   15290:	00030d68 	.word	0x00030d68
   15294:	e000ed90 	.word	0xe000ed90
   15298:	0044ffaa 	.word	0x0044ffaa
   1529c:	2002472e 	.word	0x2002472e
   152a0:	00030d9c 	.word	0x00030d9c
   152a4:	00030ded 	.word	0x00030ded

000152a8 <arm_core_mpu_configure_static_mpu_regions>:
{
   152a8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   152aa:	4d0d      	ldr	r5, [pc, #52]	; (152e0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   152ac:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   152ae:	782a      	ldrb	r2, [r5, #0]
   152b0:	f7ff fed4 	bl	1505c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   152b4:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   152b6:	3016      	adds	r0, #22
   152b8:	d111      	bne.n	152de <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   152ba:	f240 1303 	movw	r3, #259	; 0x103
   152be:	4a09      	ldr	r2, [pc, #36]	; (152e4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   152c0:	4909      	ldr	r1, [pc, #36]	; (152e8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   152c2:	480a      	ldr	r0, [pc, #40]	; (152ec <arm_core_mpu_configure_static_mpu_regions+0x44>)
   152c4:	f016 fe9b 	bl	2bffe <printk>
   152c8:	4621      	mov	r1, r4
   152ca:	4809      	ldr	r0, [pc, #36]	; (152f0 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   152cc:	f016 fe97 	bl	2bffe <printk>
}
   152d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   152d4:	f240 1103 	movw	r1, #259	; 0x103
   152d8:	4802      	ldr	r0, [pc, #8]	; (152e4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   152da:	f017 b8ad 	b.w	2c438 <assert_post_action>
}
   152de:	bd38      	pop	{r3, r4, r5, pc}
   152e0:	2002472e 	.word	0x2002472e
   152e4:	00030d28 	.word	0x00030d28
   152e8:	00032a36 	.word	0x00032a36
   152ec:	0002ff0d 	.word	0x0002ff0d
   152f0:	00030e0e 	.word	0x00030e0e

000152f4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   152f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152f8:	4e2f      	ldr	r6, [pc, #188]	; (153b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   152fa:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   152fc:	4605      	mov	r5, r0
   152fe:	f04f 0800 	mov.w	r8, #0
   15302:	46b3      	mov	fp, r6
	MPU->RNR = index;
   15304:	4f2d      	ldr	r7, [pc, #180]	; (153bc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   15306:	45c8      	cmp	r8, r9
   15308:	db02      	blt.n	15310 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
   1530a:	b003      	add	sp, #12
   1530c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   15310:	f8d5 a004 	ldr.w	sl, [r5, #4]
   15314:	f1ba 0f00 	cmp.w	sl, #0
   15318:	d049      	beq.n	153ae <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1531a:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1531c:	4608      	mov	r0, r1
   1531e:	9101      	str	r1, [sp, #4]
   15320:	f017 fc94 	bl	2cc4c <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   15324:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   15326:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   15328:	eb0a 0001 	add.w	r0, sl, r1
   1532c:	3801      	subs	r0, #1
   1532e:	f017 fc8d 	bl	2cc4c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   15332:	4284      	cmp	r4, r0
   15334:	f04f 0214 	mov.w	r2, #20
   15338:	4b21      	ldr	r3, [pc, #132]	; (153c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1533a:	d018      	beq.n	1536e <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   1533c:	f06f 0315 	mvn.w	r3, #21
   15340:	fb02 f808 	mul.w	r8, r2, r8
   15344:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   15348:	f240 1313 	movw	r3, #275	; 0x113
   1534c:	4a1d      	ldr	r2, [pc, #116]	; (153c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   1534e:	491e      	ldr	r1, [pc, #120]	; (153c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   15350:	481e      	ldr	r0, [pc, #120]	; (153cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   15352:	f016 fe54 	bl	2bffe <printk>
   15356:	4649      	mov	r1, r9
   15358:	481d      	ldr	r0, [pc, #116]	; (153d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   1535a:	f016 fe50 	bl	2bffe <printk>
   1535e:	f240 1113 	movw	r1, #275	; 0x113
   15362:	4818      	ldr	r0, [pc, #96]	; (153c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   15364:	b003      	add	sp, #12
   15366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1536a:	f017 b865 	b.w	2c438 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1536e:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   15372:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   15374:	d0e8      	beq.n	15348 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   15376:	7819      	ldrb	r1, [r3, #0]
   15378:	42a1      	cmp	r1, r4
   1537a:	dde5      	ble.n	15348 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   1537c:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   15380:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   15382:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   15384:	68fc      	ldr	r4, [r7, #12]
   15386:	f100 0108 	add.w	r1, r0, #8
   1538a:	7b00      	ldrb	r0, [r0, #12]
   1538c:	f364 0004 	bfi	r0, r4, #0, #5
   15390:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   15392:	6938      	ldr	r0, [r7, #16]
   15394:	790c      	ldrb	r4, [r1, #4]
   15396:	0840      	lsrs	r0, r0, #1
   15398:	f360 1447 	bfi	r4, r0, #5, #3
   1539c:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1539e:	68f9      	ldr	r1, [r7, #12]
   153a0:	f021 011f 	bic.w	r1, r1, #31
   153a4:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   153a6:	6939      	ldr	r1, [r7, #16]
   153a8:	f021 011f 	bic.w	r1, r1, #31
   153ac:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   153ae:	f108 0801 	add.w	r8, r8, #1
   153b2:	3614      	adds	r6, #20
   153b4:	350c      	adds	r5, #12
   153b6:	e7a6      	b.n	15306 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   153b8:	200215f4 	.word	0x200215f4
   153bc:	e000ed90 	.word	0xe000ed90
   153c0:	2002472e 	.word	0x2002472e
   153c4:	00030d28 	.word	0x00030d28
   153c8:	00032a36 	.word	0x00032a36
   153cc:	0002ff0d 	.word	0x0002ff0d
   153d0:	00030e3a 	.word	0x00030e3a

000153d4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   153d4:	4b01      	ldr	r3, [pc, #4]	; (153dc <__stdout_hook_install+0x8>)
   153d6:	6018      	str	r0, [r3, #0]
}
   153d8:	4770      	bx	lr
   153da:	bf00      	nop
   153dc:	20020438 	.word	0x20020438

000153e0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   153e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   153e2:	4606      	mov	r6, r0
   153e4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   153e6:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   153e8:	4f06      	ldr	r7, [pc, #24]	; (15404 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   153ea:	42ac      	cmp	r4, r5
   153ec:	da08      	bge.n	15400 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   153ee:	683b      	ldr	r3, [r7, #0]
   153f0:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   153f2:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   153f4:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   153f6:	f104 0401 	add.w	r4, r4, #1
   153fa:	d001      	beq.n	15400 <z_impl_zephyr_read_stdin+0x20>
   153fc:	280d      	cmp	r0, #13
   153fe:	d1f4      	bne.n	153ea <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   15400:	4620      	mov	r0, r4
   15402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15404:	20020434 	.word	0x20020434

00015408 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   15408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1540a:	460d      	mov	r5, r1
   1540c:	4f09      	ldr	r7, [pc, #36]	; (15434 <z_impl_zephyr_write_stdout+0x2c>)
   1540e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   15410:	f1c0 0401 	rsb	r4, r0, #1
   15414:	19a3      	adds	r3, r4, r6
   15416:	429d      	cmp	r5, r3
   15418:	dc01      	bgt.n	1541e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1541a:	4628      	mov	r0, r5
   1541c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1541e:	7873      	ldrb	r3, [r6, #1]
   15420:	2b0a      	cmp	r3, #10
   15422:	d102      	bne.n	1542a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   15424:	200d      	movs	r0, #13
   15426:	683b      	ldr	r3, [r7, #0]
   15428:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1542a:	683b      	ldr	r3, [r7, #0]
   1542c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   15430:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   15432:	e7ef      	b.n	15414 <z_impl_zephyr_write_stdout+0xc>
   15434:	20020438 	.word	0x20020438

00015438 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   15438:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1543a:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1543c:	4801      	ldr	r0, [pc, #4]	; (15444 <_exit+0xc>)
   1543e:	f7ff ffe3 	bl	15408 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   15442:	e7fe      	b.n	15442 <_exit+0xa>
   15444:	00030e69 	.word	0x00030e69

00015448 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   15448:	b510      	push	{r4, lr}
   1544a:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   1544c:	f04f 32ff 	mov.w	r2, #4294967295
   15450:	f04f 33ff 	mov.w	r3, #4294967295
   15454:	480a      	ldr	r0, [pc, #40]	; (15480 <_sbrk+0x38>)
   15456:	f016 fe45 	bl	2c0e4 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1545a:	490a      	ldr	r1, [pc, #40]	; (15484 <_sbrk+0x3c>)
   1545c:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1545e:	18e0      	adds	r0, r4, r3
   15460:	4c09      	ldr	r4, [pc, #36]	; (15488 <_sbrk+0x40>)
   15462:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   15466:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1546a:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   1546c:	bf2e      	itee	cs
   1546e:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   15472:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   15474:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   15476:	4802      	ldr	r0, [pc, #8]	; (15480 <_sbrk+0x38>)
   15478:	f016 fe2f 	bl	2c0da <sys_sem_give>

	return ret;
}
   1547c:	4620      	mov	r0, r4
   1547e:	bd10      	pop	{r4, pc}
   15480:	20020c50 	.word	0x20020c50
   15484:	20021608 	.word	0x20021608
   15488:	2002a9d0 	.word	0x2002a9d0

0001548c <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1548c:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   1548e:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15490:	4804      	ldr	r0, [pc, #16]	; (154a4 <__chk_fail+0x18>)
   15492:	f7ff ffb9 	bl	15408 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   15496:	4040      	eors	r0, r0
   15498:	f380 8811 	msr	BASEPRI, r0
   1549c:	f04f 0003 	mov.w	r0, #3
   154a0:	df02      	svc	2
	CODE_UNREACHABLE;
   154a2:	bf00      	nop
   154a4:	00030e6f 	.word	0x00030e6f

000154a8 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   154a8:	b538      	push	{r3, r4, r5, lr}
   154aa:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   154ac:	4604      	mov	r4, r0
   154ae:	b970      	cbnz	r0, 154ce <net_if_flag_is_set+0x26>
   154b0:	490b      	ldr	r1, [pc, #44]	; (154e0 <net_if_flag_is_set+0x38>)
   154b2:	f240 2312 	movw	r3, #530	; 0x212
   154b6:	4a0b      	ldr	r2, [pc, #44]	; (154e4 <net_if_flag_is_set+0x3c>)
   154b8:	480b      	ldr	r0, [pc, #44]	; (154e8 <net_if_flag_is_set+0x40>)
   154ba:	f016 fda0 	bl	2bffe <printk>
   154be:	480b      	ldr	r0, [pc, #44]	; (154ec <net_if_flag_is_set+0x44>)
   154c0:	f016 fd9d 	bl	2bffe <printk>
   154c4:	f240 2112 	movw	r1, #530	; 0x212
   154c8:	4806      	ldr	r0, [pc, #24]	; (154e4 <net_if_flag_is_set+0x3c>)
   154ca:	f016 ffb5 	bl	2c438 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   154ce:	6823      	ldr	r3, [r4, #0]
   154d0:	330c      	adds	r3, #12
   154d2:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   154d6:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   154d8:	f000 0001 	and.w	r0, r0, #1
   154dc:	bd38      	pop	{r3, r4, r5, pc}
   154de:	bf00      	nop
   154e0:	00030ecc 	.word	0x00030ecc
   154e4:	00030ea4 	.word	0x00030ea4
   154e8:	0002ff0d 	.word	0x0002ff0d
   154ec:	0003053a 	.word	0x0003053a

000154f0 <net_if_flag_set.constprop.0>:
static inline void net_if_flag_set(struct net_if *iface,
   154f0:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   154f2:	4604      	mov	r4, r0
   154f4:	b970      	cbnz	r0, 15514 <net_if_flag_set.constprop.0+0x24>
   154f6:	490d      	ldr	r1, [pc, #52]	; (1552c <net_if_flag_set.constprop.0+0x3c>)
   154f8:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   154fc:	4a0c      	ldr	r2, [pc, #48]	; (15530 <net_if_flag_set.constprop.0+0x40>)
   154fe:	480d      	ldr	r0, [pc, #52]	; (15534 <net_if_flag_set.constprop.0+0x44>)
   15500:	f016 fd7d 	bl	2bffe <printk>
   15504:	480c      	ldr	r0, [pc, #48]	; (15538 <net_if_flag_set.constprop.0+0x48>)
   15506:	f016 fd7a 	bl	2bffe <printk>
   1550a:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   1550e:	4808      	ldr	r0, [pc, #32]	; (15530 <net_if_flag_set.constprop.0+0x40>)
   15510:	f016 ff92 	bl	2c438 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15514:	6823      	ldr	r3, [r4, #0]
   15516:	330c      	adds	r3, #12
   15518:	e8d3 2fef 	ldaex	r2, [r3]
   1551c:	f042 0201 	orr.w	r2, r2, #1
   15520:	e8c3 2fe1 	stlex	r1, r2, [r3]
   15524:	2900      	cmp	r1, #0
   15526:	d1f7      	bne.n	15518 <net_if_flag_set.constprop.0+0x28>
}
   15528:	bd10      	pop	{r4, pc}
   1552a:	bf00      	nop
   1552c:	00030ecc 	.word	0x00030ecc
   15530:	00030ea4 	.word	0x00030ea4
   15534:	0002ff0d 	.word	0x0002ff0d
   15538:	0003053a 	.word	0x0003053a

0001553c <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1553c:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1553e:	2100      	movs	r1, #0
{
   15540:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   15542:	f7ff ffb1 	bl	154a8 <net_if_flag_is_set>
   15546:	b928      	cbnz	r0, 15554 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   15548:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   1554a:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1554c:	7e9b      	ldrb	r3, [r3, #26]
   1554e:	b11b      	cbz	r3, 15558 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   15550:	f7ff ffce 	bl	154f0 <net_if_flag_set.constprop.0>
		return 0;
   15554:	2000      	movs	r0, #0
   15556:	e023      	b.n	155a0 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   15558:	f017 fba8 	bl	2ccac <net_if_l2>
   1555c:	b9c0      	cbnz	r0, 15590 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   1555e:	682b      	ldr	r3, [r5, #0]
   15560:	691b      	ldr	r3, [r3, #16]
   15562:	b973      	cbnz	r3, 15582 <net_if_up+0x46>
   15564:	490f      	ldr	r1, [pc, #60]	; (155a4 <net_if_up+0x68>)
   15566:	f640 53fd 	movw	r3, #3581	; 0xdfd
   1556a:	4a0f      	ldr	r2, [pc, #60]	; (155a8 <net_if_up+0x6c>)
   1556c:	480f      	ldr	r0, [pc, #60]	; (155ac <net_if_up+0x70>)
   1556e:	f016 fd46 	bl	2bffe <printk>
   15572:	480f      	ldr	r0, [pc, #60]	; (155b0 <net_if_up+0x74>)
   15574:	f016 fd43 	bl	2bffe <printk>
   15578:	f640 51fd 	movw	r1, #3581	; 0xdfd
   1557c:	480a      	ldr	r0, [pc, #40]	; (155a8 <net_if_up+0x6c>)
   1557e:	f016 ff5b 	bl	2c438 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   15582:	4628      	mov	r0, r5
   15584:	f7ff ffb4 	bl	154f0 <net_if_flag_set.constprop.0>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   15588:	4628      	mov	r0, r5
   1558a:	f017 fb94 	bl	2ccb6 <l2_flags_get>
   1558e:	e7e1      	b.n	15554 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   15590:	6883      	ldr	r3, [r0, #8]
   15592:	2b00      	cmp	r3, #0
   15594:	d0e3      	beq.n	1555e <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   15596:	2101      	movs	r1, #1
   15598:	4628      	mov	r0, r5
   1559a:	4798      	blx	r3
	if (status < 0) {
   1559c:	2800      	cmp	r0, #0
   1559e:	dade      	bge.n	1555e <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   155a0:	bd38      	pop	{r3, r4, r5, pc}
   155a2:	bf00      	nop
   155a4:	00030f16 	.word	0x00030f16
   155a8:	00030ed2 	.word	0x00030ed2
   155ac:	0002ff0d 	.word	0x0002ff0d
   155b0:	0003053a 	.word	0x0003053a

000155b4 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   155b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   155b8:	4e12      	ldr	r6, [pc, #72]	; (15604 <net_if_init+0x50>)
   155ba:	4c13      	ldr	r4, [pc, #76]	; (15608 <net_if_init+0x54>)
   155bc:	46b0      	mov	r8, r6
   155be:	4f13      	ldr	r7, [pc, #76]	; (1560c <net_if_init+0x58>)
   155c0:	42b4      	cmp	r4, r6
   155c2:	4625      	mov	r5, r4
   155c4:	d90e      	bls.n	155e4 <net_if_init+0x30>
   155c6:	4912      	ldr	r1, [pc, #72]	; (15610 <net_if_init+0x5c>)
   155c8:	f640 63dc 	movw	r3, #3804	; 0xedc
   155cc:	463a      	mov	r2, r7
   155ce:	4811      	ldr	r0, [pc, #68]	; (15614 <net_if_init+0x60>)
   155d0:	f016 fd15 	bl	2bffe <printk>
   155d4:	4810      	ldr	r0, [pc, #64]	; (15618 <net_if_init+0x64>)
   155d6:	f016 fd12 	bl	2bffe <printk>
   155da:	f640 61dc 	movw	r1, #3804	; 0xedc
   155de:	4638      	mov	r0, r7
   155e0:	f016 ff2a 	bl	2c438 <assert_post_action>
   155e4:	4544      	cmp	r4, r8
   155e6:	d301      	bcc.n	155ec <net_if_init+0x38>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   155e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return iface->if_dev->dev;
   155ec:	682b      	ldr	r3, [r5, #0]
   155ee:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   155f0:	681b      	ldr	r3, [r3, #0]
   155f2:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   155f4:	2b00      	cmp	r3, #0
   155f6:	d0e3      	beq.n	155c0 <net_if_init+0xc>
   155f8:	681b      	ldr	r3, [r3, #0]
   155fa:	2b00      	cmp	r3, #0
   155fc:	d0e0      	beq.n	155c0 <net_if_init+0xc>
	api->init(iface);
   155fe:	4628      	mov	r0, r5
   15600:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   15602:	e7dd      	b.n	155c0 <net_if_init+0xc>
   15604:	20020ccc 	.word	0x20020ccc
   15608:	20020cc8 	.word	0x20020cc8
   1560c:	00030ed2 	.word	0x00030ed2
   15610:	00030efc 	.word	0x00030efc
   15614:	0002ff0d 	.word	0x0002ff0d
   15618:	000305b8 	.word	0x000305b8

0001561c <net_if_post_init>:

void net_if_post_init(void)
{
   1561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1561e:	4d11      	ldr	r5, [pc, #68]	; (15664 <net_if_post_init+0x48>)
   15620:	4c11      	ldr	r4, [pc, #68]	; (15668 <net_if_post_init+0x4c>)
   15622:	462f      	mov	r7, r5
   15624:	4e11      	ldr	r6, [pc, #68]	; (1566c <net_if_post_init+0x50>)
   15626:	42ac      	cmp	r4, r5
   15628:	d90e      	bls.n	15648 <net_if_post_init+0x2c>
   1562a:	4911      	ldr	r1, [pc, #68]	; (15670 <net_if_post_init+0x54>)
   1562c:	f640 730b 	movw	r3, #3851	; 0xf0b
   15630:	4632      	mov	r2, r6
   15632:	4810      	ldr	r0, [pc, #64]	; (15674 <net_if_post_init+0x58>)
   15634:	f016 fce3 	bl	2bffe <printk>
   15638:	480f      	ldr	r0, [pc, #60]	; (15678 <net_if_post_init+0x5c>)
   1563a:	f016 fce0 	bl	2bffe <printk>
   1563e:	f640 710b 	movw	r1, #3851	; 0xf0b
   15642:	4630      	mov	r0, r6
   15644:	f016 fef8 	bl	2c438 <assert_post_action>
   15648:	42bc      	cmp	r4, r7
   1564a:	d300      	bcc.n	1564e <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1564e:	2103      	movs	r1, #3
   15650:	4620      	mov	r0, r4
   15652:	f7ff ff29 	bl	154a8 <net_if_flag_is_set>
   15656:	b910      	cbnz	r0, 1565e <net_if_post_init+0x42>
			net_if_up(iface);
   15658:	4620      	mov	r0, r4
   1565a:	f7ff ff6f 	bl	1553c <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1565e:	3404      	adds	r4, #4
   15660:	e7e1      	b.n	15626 <net_if_post_init+0xa>
   15662:	bf00      	nop
   15664:	20020ccc 	.word	0x20020ccc
   15668:	20020cc8 	.word	0x20020cc8
   1566c:	00030ed2 	.word	0x00030ed2
   15670:	00030efc 	.word	0x00030efc
   15674:	0002ff0d 	.word	0x0002ff0d
   15678:	000305b8 	.word	0x000305b8

0001567c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   1567c:	2300      	movs	r3, #0
{
   1567e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   15682:	2802      	cmp	r0, #2
{
   15684:	b089      	sub	sp, #36	; 0x24
   15686:	4607      	mov	r7, r0
   15688:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   1568a:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   1568e:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   15690:	d13e      	bne.n	15710 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   15692:	a806      	add	r0, sp, #24
   15694:	9105      	str	r1, [sp, #20]
   15696:	4601      	mov	r1, r0
{
   15698:	461a      	mov	r2, r3
   1569a:	e006      	b.n	156aa <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   1569c:	780c      	ldrb	r4, [r1, #0]
   1569e:	3201      	adds	r2, #1
   156a0:	3401      	adds	r4, #1
   156a2:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   156a4:	b2d4      	uxtb	r4, r2
   156a6:	2c07      	cmp	r4, #7
   156a8:	d804      	bhi.n	156b4 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   156aa:	9c04      	ldr	r4, [sp, #16]
   156ac:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   156b0:	2c00      	cmp	r4, #0
   156b2:	d0f3      	beq.n	1569c <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   156b4:	3301      	adds	r3, #1
   156b6:	2b08      	cmp	r3, #8
   156b8:	f101 0101 	add.w	r1, r1, #1
   156bc:	d1ec      	bne.n	15698 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   156be:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   156c2:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   156c6:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   156c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   156cc:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   156ce:	bf88      	it	hi
   156d0:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   156d4:	f103 0301 	add.w	r3, r3, #1
   156d8:	b2db      	uxtb	r3, r3
				pos = i;
   156da:	bf88      	it	hi
   156dc:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   156de:	2b08      	cmp	r3, #8
   156e0:	d1f2      	bne.n	156c8 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   156e2:	469b      	mov	fp, r3
   156e4:	f1b9 0f01 	cmp.w	r9, #1
   156e8:	f04f 033a 	mov.w	r3, #58	; 0x3a
   156ec:	bf08      	it	eq
   156ee:	f04f 38ff 	moveq.w	r8, #4294967295
   156f2:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   156f4:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   156f6:	4634      	mov	r4, r6
   156f8:	460d      	mov	r5, r1
   156fa:	455d      	cmp	r5, fp
   156fc:	db17      	blt.n	1572e <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   156fe:	42b4      	cmp	r4, r6
   15700:	d008      	beq.n	15714 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   15702:	2300      	movs	r3, #0
   15704:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   15706:	bf0c      	ite	eq
   15708:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   1570c:	7023      	strbne	r3, [r4, #0]
   1570e:	e002      	b.n	15716 <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   15710:	2801      	cmp	r0, #1
   15712:	d004      	beq.n	1571e <z_impl_net_addr_ntop+0xa2>
		return NULL;
   15714:	2600      	movs	r6, #0
	}

	return dst;
}
   15716:	4630      	mov	r0, r6
   15718:	b009      	add	sp, #36	; 0x24
   1571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   1571e:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   15720:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   15724:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   15728:	4681      	mov	r9, r0
		delim = '.';
   1572a:	9303      	str	r3, [sp, #12]
   1572c:	e7e2      	b.n	156f4 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   1572e:	f1bb 0f04 	cmp.w	fp, #4
   15732:	d13b      	bne.n	157ac <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   15734:	9b04      	ldr	r3, [sp, #16]
   15736:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   15738:	b94a      	cbnz	r2, 1574e <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   1573a:	2330      	movs	r3, #48	; 0x30
   1573c:	4620      	mov	r0, r4
   1573e:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   15742:	9b03      	ldr	r3, [sp, #12]
   15744:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   15746:	3501      	adds	r5, #1
   15748:	4604      	mov	r4, r0
   1574a:	b2ed      	uxtb	r5, r5
   1574c:	e7d5      	b.n	156fa <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   1574e:	f04f 0e09 	mov.w	lr, #9
   15752:	f04f 0a00 	mov.w	sl, #0
   15756:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1575a:	483a      	ldr	r0, [pc, #232]	; (15844 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   1575c:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   15760:	45f2      	cmp	sl, lr
		value = value % divisor;
   15762:	fbbc f2f0 	udiv	r2, ip, r0
   15766:	fb00 c212 	mls	r2, r0, r2, ip
   1576a:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   1576c:	dc01      	bgt.n	15772 <z_impl_net_addr_ntop+0xf6>
   1576e:	4584      	cmp	ip, r0
   15770:	d308      	bcc.n	15784 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   15772:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   15776:	46f2      	mov	sl, lr
   15778:	9b02      	ldr	r3, [sp, #8]
   1577a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   1577e:	f803 cb01 	strb.w	ip, [r3], #1
   15782:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   15784:	220a      	movs	r2, #10
   15786:	f10e 3eff 	add.w	lr, lr, #4294967295
   1578a:	f1be 3fff 	cmp.w	lr, #4294967295
   1578e:	fbb0 f0f2 	udiv	r0, r0, r2
   15792:	d1e3      	bne.n	1575c <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   15794:	f04f 0200 	mov.w	r2, #0
   15798:	9b02      	ldr	r3, [sp, #8]
   1579a:	701a      	strb	r2, [r3, #0]
	return buf - start;
   1579c:	1b1b      	subs	r3, r3, r4
			ptr += l;
   1579e:	b2da      	uxtb	r2, r3
   157a0:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   157a4:	1c58      	adds	r0, r3, #1
   157a6:	9b03      	ldr	r3, [sp, #12]
   157a8:	54a3      	strb	r3, [r4, r2]
			continue;
   157aa:	e7cc      	b.n	15746 <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   157ac:	45a8      	cmp	r8, r5
   157ae:	d110      	bne.n	157d2 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   157b0:	b911      	cbnz	r1, 157b8 <z_impl_net_addr_ntop+0x13c>
   157b2:	f1b8 0f00 	cmp.w	r8, #0
   157b6:	d102      	bne.n	157be <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   157b8:	233a      	movs	r3, #58	; 0x3a
   157ba:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   157be:	233a      	movs	r3, #58	; 0x3a
   157c0:	4620      	mov	r0, r4
   157c2:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   157c6:	f109 33ff 	add.w	r3, r9, #4294967295
   157ca:	441d      	add	r5, r3
			needcolon = false;
   157cc:	2100      	movs	r1, #0
			i += longest - 1U;
   157ce:	b2ed      	uxtb	r5, r5
			continue;
   157d0:	e7b9      	b.n	15746 <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   157d2:	b111      	cbz	r1, 157da <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   157d4:	233a      	movs	r3, #58	; 0x3a
   157d6:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   157da:	9b05      	ldr	r3, [sp, #20]
   157dc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   157e0:	0219      	lsls	r1, r3, #8
   157e2:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   157e6:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   157ea:	b20a      	sxth	r2, r1
		bh = value >> 8;
   157ec:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   157f0:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   157f4:	d016      	beq.n	15824 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   157f6:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   157f8:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   157fa:	d90b      	bls.n	15814 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   157fc:	2300      	movs	r3, #0
   157fe:	2261      	movs	r2, #97	; 0x61
   15800:	4620      	mov	r0, r4
   15802:	f017 fa65 	bl	2ccd0 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   15806:	2301      	movs	r3, #1
   15808:	2261      	movs	r2, #97	; 0x61
   1580a:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1580c:	f017 fa60 	bl	2ccd0 <net_byte_to_hex>
		needcolon = true;
   15810:	2101      	movs	r1, #1
   15812:	e798      	b.n	15746 <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   15814:	b25b      	sxtb	r3, r3
   15816:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   15818:	bf94      	ite	ls
   1581a:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   1581c:	3357      	addhi	r3, #87	; 0x57
   1581e:	1c60      	adds	r0, r4, #1
   15820:	7023      	strb	r3, [r4, #0]
   15822:	e7f0      	b.n	15806 <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   15824:	f1ba 0f0f 	cmp.w	sl, #15
   15828:	d903      	bls.n	15832 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1582a:	2261      	movs	r2, #97	; 0x61
   1582c:	4651      	mov	r1, sl
   1582e:	4620      	mov	r0, r4
   15830:	e7ec      	b.n	1580c <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   15832:	b253      	sxtb	r3, r2
   15834:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   15838:	bf94      	ite	ls
   1583a:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   1583c:	3357      	addhi	r3, #87	; 0x57
   1583e:	1c60      	adds	r0, r4, #1
   15840:	7023      	strb	r3, [r4, #0]
   15842:	e7e5      	b.n	15810 <z_impl_net_addr_ntop+0x194>
   15844:	3b9aca00 	.word	0x3b9aca00

00015848 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   15848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1584c:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   1584e:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   15852:	4b3b      	ldr	r3, [pc, #236]	; (15940 <connect_request_encode+0xf8>)
   15854:	4a3b      	ldr	r2, [pc, #236]	; (15944 <connect_request_encode+0xfc>)
{
   15856:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   15858:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1585c:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1585e:	2804      	cmp	r0, #4
   15860:	bf0c      	ite	eq
   15862:	4610      	moveq	r0, r2
   15864:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   15866:	600d      	str	r5, [r1, #0]
{
   15868:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1586a:	f017 fb18 	bl	2ce9e <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   1586e:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   15872:	4603      	mov	r3, r0
   15874:	b938      	cbnz	r0, 15886 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   15876:	e9d8 2000 	ldrd	r2, r0, [r8]
   1587a:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   1587c:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   15880:	d104      	bne.n	1588c <connect_request_encode+0x44>
		return -ENOMEM;
   15882:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   15886:	4618      	mov	r0, r3
   15888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   1588c:	1c50      	adds	r0, r2, #1
   1588e:	f8c8 0000 	str.w	r0, [r8]
   15892:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   15894:	e9d8 6200 	ldrd	r6, r2, [r8]
   15898:	4296      	cmp	r6, r2
   1589a:	d0f2      	beq.n	15882 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1589c:	1c72      	adds	r2, r6, #1
   1589e:	f8c8 2000 	str.w	r2, [r8]
   158a2:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   158a4:	4641      	mov	r1, r8
   158a6:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
   158aa:	f017 fae6 	bl	2ce7a <pack_uint16>
	if (err_code != 0) {
   158ae:	4603      	mov	r3, r0
   158b0:	2800      	cmp	r0, #0
   158b2:	d1e8      	bne.n	15886 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   158b4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   158b8:	f017 faf1 	bl	2ce9e <pack_utf8_str>
	if (err_code != 0) {
   158bc:	4603      	mov	r3, r0
   158be:	2800      	cmp	r0, #0
   158c0:	d1e1      	bne.n	15886 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   158c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   158c4:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   158c6:	b1d8      	cbz	r0, 15900 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   158c8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   158cc:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   158d0:	f003 0301 	and.w	r3, r3, #1
   158d4:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   158d8:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   158da:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   158dc:	00db      	lsls	r3, r3, #3
   158de:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   158e2:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   158e4:	f017 fadb 	bl	2ce9e <pack_utf8_str>
		if (err_code != 0) {
   158e8:	4603      	mov	r3, r0
   158ea:	2800      	cmp	r0, #0
   158ec:	d1cb      	bne.n	15886 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   158ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   158f0:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   158f2:	b30b      	cbz	r3, 15938 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   158f4:	4618      	mov	r0, r3
   158f6:	f017 fad2 	bl	2ce9e <pack_utf8_str>
			if (err_code != 0) {
   158fa:	4603      	mov	r3, r0
   158fc:	2800      	cmp	r0, #0
   158fe:	d1c2      	bne.n	15886 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   15900:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   15902:	b138      	cbz	r0, 15914 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   15904:	4641      	mov	r1, r8
   15906:	f017 faca 	bl	2ce9e <pack_utf8_str>
		if (err_code != 0) {
   1590a:	4603      	mov	r3, r0
   1590c:	2800      	cmp	r0, #0
   1590e:	d1ba      	bne.n	15886 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   15910:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   15914:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   15916:	b138      	cbz	r0, 15928 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   15918:	4641      	mov	r1, r8
   1591a:	f017 fac0 	bl	2ce9e <pack_utf8_str>
		if (err_code != 0) {
   1591e:	4603      	mov	r3, r0
   15920:	2800      	cmp	r0, #0
   15922:	d1b0      	bne.n	15886 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   15924:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   15928:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1592a:	4642      	mov	r2, r8
   1592c:	4629      	mov	r1, r5
}
   1592e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   15932:	2010      	movs	r0, #16
   15934:	f017 bace 	b.w	2ced4 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   15938:	f017 fa9f 	bl	2ce7a <pack_uint16>
   1593c:	e7dd      	b.n	158fa <connect_request_encode+0xb2>
   1593e:	bf00      	nop
   15940:	0002eea0 	.word	0x0002eea0
   15944:	0002eea8 	.word	0x0002eea8

00015948 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   15948:	e9d0 2300 	ldrd	r2, r3, [r0]
   1594c:	1a9b      	subs	r3, r3, r2
   1594e:	2b01      	cmp	r3, #1
   15950:	bf81      	itttt	hi
   15952:	4b05      	ldrhi	r3, [pc, #20]	; (15968 <disconnect_encode+0x20>)
   15954:	881b      	ldrhhi	r3, [r3, #0]
   15956:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   15958:	6803      	ldrhi	r3, [r0, #0]
   1595a:	bf83      	ittte	hi
   1595c:	3302      	addhi	r3, #2
   1595e:	6043      	strhi	r3, [r0, #4]

	return 0;
   15960:	2000      	movhi	r0, #0
		return -ENOMEM;
   15962:	f06f 000b 	mvnls.w	r0, #11
}
   15966:	4770      	bx	lr
   15968:	00030f47 	.word	0x00030f47

0001596c <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   1596c:	e9d0 2300 	ldrd	r2, r3, [r0]
   15970:	1a9b      	subs	r3, r3, r2
   15972:	2b01      	cmp	r3, #1
   15974:	bf81      	itttt	hi
   15976:	4b05      	ldrhi	r3, [pc, #20]	; (1598c <ping_request_encode+0x20>)
   15978:	881b      	ldrhhi	r3, [r3, #0]
   1597a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   1597c:	6803      	ldrhi	r3, [r0, #0]
   1597e:	bf83      	ittte	hi
   15980:	3302      	addhi	r3, #2
   15982:	6043      	strhi	r3, [r0, #4]

	return 0;
   15984:	2000      	movhi	r0, #0
		return -ENOMEM;
   15986:	f06f 000b 	mvnls.w	r0, #11
}
   1598a:	4770      	bx	lr
   1598c:	00030f49 	.word	0x00030f49

00015990 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   15990:	2314      	movs	r3, #20
   15992:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   15996:	4353      	muls	r3, r2
   15998:	4a01      	ldr	r2, [pc, #4]	; (159a0 <mqtt_transport_connect+0x10>)
   1599a:	58d3      	ldr	r3, [r2, r3]
   1599c:	4718      	bx	r3
   1599e:	bf00      	nop
   159a0:	0002eeb0 	.word	0x0002eeb0

000159a4 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   159a4:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   159a6:	2514      	movs	r5, #20
   159a8:	4c03      	ldr	r4, [pc, #12]	; (159b8 <mqtt_transport_write+0x14>)
   159aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   159ae:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   159b2:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   159b4:	685b      	ldr	r3, [r3, #4]
   159b6:	4718      	bx	r3
   159b8:	0002eeb0 	.word	0x0002eeb0

000159bc <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   159bc:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   159be:	2414      	movs	r4, #20
   159c0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   159c4:	4a03      	ldr	r2, [pc, #12]	; (159d4 <mqtt_transport_write_msg+0x18>)
   159c6:	fb04 2303 	mla	r3, r4, r3, r2
}
   159ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   159ce:	689b      	ldr	r3, [r3, #8]
   159d0:	4718      	bx	r3
   159d2:	bf00      	nop
   159d4:	0002eeb0 	.word	0x0002eeb0

000159d8 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   159d8:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   159da:	2614      	movs	r6, #20
   159dc:	4d04      	ldr	r5, [pc, #16]	; (159f0 <mqtt_transport_read+0x18>)
   159de:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   159e2:	fb06 5404 	mla	r4, r6, r4, r5
   159e6:	68e4      	ldr	r4, [r4, #12]
   159e8:	46a4      	mov	ip, r4
							 shall_block);
}
   159ea:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   159ec:	4760      	bx	ip
   159ee:	bf00      	nop
   159f0:	0002eeb0 	.word	0x0002eeb0

000159f4 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   159f4:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   159f6:	b510      	push	{r4, lr}
   159f8:	b142      	cbz	r2, 15a0c <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   159fa:	4b0f      	ldr	r3, [pc, #60]	; (15a38 <mqtt_mutex_unlock+0x44>)
   159fc:	6882      	ldr	r2, [r0, #8]
   159fe:	689b      	ldr	r3, [r3, #8]
   15a00:	429a      	cmp	r2, r3
   15a02:	d115      	bne.n	15a30 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   15a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   15a08:	f00d b9c2 	b.w	22d90 <z_impl_k_mutex_unlock>
		return -EINVAL;
   15a0c:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   15a10:	2343      	movs	r3, #67	; 0x43
   15a12:	4a0a      	ldr	r2, [pc, #40]	; (15a3c <mqtt_mutex_unlock+0x48>)
   15a14:	490a      	ldr	r1, [pc, #40]	; (15a40 <mqtt_mutex_unlock+0x4c>)
   15a16:	480b      	ldr	r0, [pc, #44]	; (15a44 <mqtt_mutex_unlock+0x50>)
   15a18:	f016 faf1 	bl	2bffe <printk>
   15a1c:	4621      	mov	r1, r4
   15a1e:	480a      	ldr	r0, [pc, #40]	; (15a48 <mqtt_mutex_unlock+0x54>)
   15a20:	f016 faed 	bl	2bffe <printk>
}
   15a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   15a28:	2143      	movs	r1, #67	; 0x43
   15a2a:	4804      	ldr	r0, [pc, #16]	; (15a3c <mqtt_mutex_unlock+0x48>)
   15a2c:	f016 bd04 	b.w	2c438 <assert_post_action>
		return -EPERM;
   15a30:	f04f 34ff 	mov.w	r4, #4294967295
   15a34:	e7ec      	b.n	15a10 <mqtt_mutex_unlock+0x1c>
   15a36:	bf00      	nop
   15a38:	20021dd4 	.word	0x20021dd4
   15a3c:	00030f57 	.word	0x00030f57
   15a40:	00030f88 	.word	0x00030f88
   15a44:	0002ff0d 	.word	0x0002ff0d
   15a48:	00030f91 	.word	0x00030f91

00015a4c <mqtt_mutex_lock>:
{
   15a4c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   15a4e:	f04f 32ff 	mov.w	r2, #4294967295
   15a52:	f04f 33ff 	mov.w	r3, #4294967295
   15a56:	f00d f8a1 	bl	22b9c <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   15a5a:	4604      	mov	r4, r0
   15a5c:	b178      	cbz	r0, 15a7e <mqtt_mutex_lock+0x32>
   15a5e:	2339      	movs	r3, #57	; 0x39
   15a60:	4a07      	ldr	r2, [pc, #28]	; (15a80 <mqtt_mutex_lock+0x34>)
   15a62:	4908      	ldr	r1, [pc, #32]	; (15a84 <mqtt_mutex_lock+0x38>)
   15a64:	4808      	ldr	r0, [pc, #32]	; (15a88 <mqtt_mutex_lock+0x3c>)
   15a66:	f016 faca 	bl	2bffe <printk>
   15a6a:	4621      	mov	r1, r4
   15a6c:	4807      	ldr	r0, [pc, #28]	; (15a8c <mqtt_mutex_lock+0x40>)
   15a6e:	f016 fac6 	bl	2bffe <printk>
}
   15a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   15a76:	2139      	movs	r1, #57	; 0x39
   15a78:	4801      	ldr	r0, [pc, #4]	; (15a80 <mqtt_mutex_lock+0x34>)
   15a7a:	f016 bcdd 	b.w	2c438 <assert_post_action>
}
   15a7e:	bd10      	pop	{r4, pc}
   15a80:	00030f57 	.word	0x00030f57
   15a84:	00030f88 	.word	0x00030f88
   15a88:	0002ff0d 	.word	0x0002ff0d
   15a8c:	00030fb3 	.word	0x00030fb3

00015a90 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   15a90:	b570      	push	{r4, r5, r6, lr}
   15a92:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   15a94:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15a96:	68c5      	ldr	r5, [r0, #12]
   15a98:	b961      	cbnz	r1, 15ab4 <gpio_nrfx_manage_callback+0x24>
   15a9a:	4922      	ldr	r1, [pc, #136]	; (15b24 <gpio_nrfx_manage_callback+0x94>)
   15a9c:	2324      	movs	r3, #36	; 0x24
   15a9e:	4a22      	ldr	r2, [pc, #136]	; (15b28 <gpio_nrfx_manage_callback+0x98>)
   15aa0:	4822      	ldr	r0, [pc, #136]	; (15b2c <gpio_nrfx_manage_callback+0x9c>)
   15aa2:	f016 faac 	bl	2bffe <printk>
   15aa6:	4822      	ldr	r0, [pc, #136]	; (15b30 <gpio_nrfx_manage_callback+0xa0>)
   15aa8:	f016 faa9 	bl	2bffe <printk>
   15aac:	2124      	movs	r1, #36	; 0x24
   15aae:	481e      	ldr	r0, [pc, #120]	; (15b28 <gpio_nrfx_manage_callback+0x98>)
   15ab0:	f016 fcc2 	bl	2c438 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   15ab4:	6863      	ldr	r3, [r4, #4]
   15ab6:	b963      	cbnz	r3, 15ad2 <gpio_nrfx_manage_callback+0x42>
   15ab8:	491e      	ldr	r1, [pc, #120]	; (15b34 <gpio_nrfx_manage_callback+0xa4>)
   15aba:	2325      	movs	r3, #37	; 0x25
   15abc:	4a1a      	ldr	r2, [pc, #104]	; (15b28 <gpio_nrfx_manage_callback+0x98>)
   15abe:	481b      	ldr	r0, [pc, #108]	; (15b2c <gpio_nrfx_manage_callback+0x9c>)
   15ac0:	f016 fa9d 	bl	2bffe <printk>
   15ac4:	481c      	ldr	r0, [pc, #112]	; (15b38 <gpio_nrfx_manage_callback+0xa8>)
   15ac6:	f016 fa9a 	bl	2bffe <printk>
   15aca:	2125      	movs	r1, #37	; 0x25
   15acc:	4816      	ldr	r0, [pc, #88]	; (15b28 <gpio_nrfx_manage_callback+0x98>)
   15ace:	f016 fcb3 	bl	2c438 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   15ad2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   15ad4:	b15b      	cbz	r3, 15aee <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15ad6:	2200      	movs	r2, #0
   15ad8:	429c      	cmp	r4, r3
   15ada:	d113      	bne.n	15b04 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   15adc:	6823      	ldr	r3, [r4, #0]
   15ade:	b95a      	cbnz	r2, 15af8 <gpio_nrfx_manage_callback+0x68>
   15ae0:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   15ae2:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   15ae4:	4294      	cmp	r4, r2
   15ae6:	d100      	bne.n	15aea <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   15ae8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   15aea:	2300      	movs	r3, #0
   15aec:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   15aee:	b976      	cbnz	r6, 15b0e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   15af0:	2000      	movs	r0, #0
				     callback, set);
}
   15af2:	bd70      	pop	{r4, r5, r6, pc}
   15af4:	460b      	mov	r3, r1
   15af6:	e7ef      	b.n	15ad8 <gpio_nrfx_manage_callback+0x48>
   15af8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   15afa:	68ab      	ldr	r3, [r5, #8]
   15afc:	429c      	cmp	r4, r3
	list->tail = node;
   15afe:	bf08      	it	eq
   15b00:	60aa      	streq	r2, [r5, #8]
}
   15b02:	e7f2      	b.n	15aea <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15b04:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15b06:	461a      	mov	r2, r3
   15b08:	2900      	cmp	r1, #0
   15b0a:	d1f3      	bne.n	15af4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   15b0c:	b13e      	cbz	r6, 15b1e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   15b0e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   15b10:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   15b12:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   15b14:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15b16:	2800      	cmp	r0, #0
   15b18:	d1ea      	bne.n	15af0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   15b1a:	60ac      	str	r4, [r5, #8]
}
   15b1c:	e7e9      	b.n	15af2 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   15b1e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15b22:	e7e6      	b.n	15af2 <gpio_nrfx_manage_callback+0x62>
   15b24:	0003159a 	.word	0x0003159a
   15b28:	00030fd3 	.word	0x00030fd3
   15b2c:	0002ff0d 	.word	0x0002ff0d
   15b30:	00031000 	.word	0x00031000
   15b34:	0003100f 	.word	0x0003100f
   15b38:	00031021 	.word	0x00031021

00015b3c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15b3c:	6803      	ldr	r3, [r0, #0]
{
   15b3e:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15b40:	095a      	lsrs	r2, r3, #5
   15b42:	bf0c      	ite	eq
   15b44:	f04f 32ff 	moveq.w	r2, #4294967295
   15b48:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15b4a:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   15b4e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15b52:	07db      	lsls	r3, r3, #31
{
   15b54:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15b56:	d40b      	bmi.n	15b70 <nrf_gpio_pin_port_decode+0x34>
   15b58:	490f      	ldr	r1, [pc, #60]	; (15b98 <nrf_gpio_pin_port_decode+0x5c>)
   15b5a:	4810      	ldr	r0, [pc, #64]	; (15b9c <nrf_gpio_pin_port_decode+0x60>)
   15b5c:	f240 231a 	movw	r3, #538	; 0x21a
   15b60:	4a0f      	ldr	r2, [pc, #60]	; (15ba0 <nrf_gpio_pin_port_decode+0x64>)
   15b62:	f016 fa4c 	bl	2bffe <printk>
   15b66:	f240 211a 	movw	r1, #538	; 0x21a
   15b6a:	480d      	ldr	r0, [pc, #52]	; (15ba0 <nrf_gpio_pin_port_decode+0x64>)
   15b6c:	f016 fc64 	bl	2c438 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   15b70:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15b72:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15b76:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15b78:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15b7a:	d00b      	beq.n	15b94 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   15b7c:	4909      	ldr	r1, [pc, #36]	; (15ba4 <nrf_gpio_pin_port_decode+0x68>)
   15b7e:	4807      	ldr	r0, [pc, #28]	; (15b9c <nrf_gpio_pin_port_decode+0x60>)
   15b80:	f240 231f 	movw	r3, #543	; 0x21f
   15b84:	4a06      	ldr	r2, [pc, #24]	; (15ba0 <nrf_gpio_pin_port_decode+0x64>)
   15b86:	f016 fa3a 	bl	2bffe <printk>
   15b8a:	f240 211f 	movw	r1, #543	; 0x21f
   15b8e:	4804      	ldr	r0, [pc, #16]	; (15ba0 <nrf_gpio_pin_port_decode+0x64>)
   15b90:	f016 fc52 	bl	2c438 <assert_post_action>
}
   15b94:	4804      	ldr	r0, [pc, #16]	; (15ba8 <nrf_gpio_pin_port_decode+0x6c>)
   15b96:	bd10      	pop	{r4, pc}
   15b98:	0003106b 	.word	0x0003106b
   15b9c:	0002ff0d 	.word	0x0002ff0d
   15ba0:	00031038 	.word	0x00031038
   15ba4:	00032a36 	.word	0x00032a36
   15ba8:	40842500 	.word	0x40842500

00015bac <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15bac:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15bae:	4b09      	ldr	r3, [pc, #36]	; (15bd4 <gpio_nrfx_init+0x28>)
   15bb0:	781a      	ldrb	r2, [r3, #0]
   15bb2:	b96a      	cbnz	r2, 15bd0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15bb4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15bb6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   15bb8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15bba:	2105      	movs	r1, #5
   15bbc:	f7fe fdc4 	bl	14748 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15bc0:	2031      	movs	r0, #49	; 0x31
   15bc2:	f7fe fda3 	bl	1470c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15bc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15bca:	4b03      	ldr	r3, [pc, #12]	; (15bd8 <gpio_nrfx_init+0x2c>)
   15bcc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15bd0:	2000      	movs	r0, #0
   15bd2:	bd08      	pop	{r3, pc}
   15bd4:	2002472f 	.word	0x2002472f
   15bd8:	40031000 	.word	0x40031000

00015bdc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15bdc:	4b2e      	ldr	r3, [pc, #184]	; (15c98 <gpio_nrfx_config+0xbc>)
{
   15bde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15be0:	4c2e      	ldr	r4, [pc, #184]	; (15c9c <gpio_nrfx_config+0xc0>)
   15be2:	4013      	ands	r3, r2
   15be4:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15be6:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15be8:	d044      	beq.n	15c74 <gpio_nrfx_config+0x98>
   15bea:	d80e      	bhi.n	15c0a <gpio_nrfx_config+0x2e>
   15bec:	2b06      	cmp	r3, #6
   15bee:	d043      	beq.n	15c78 <gpio_nrfx_config+0x9c>
   15bf0:	d806      	bhi.n	15c00 <gpio_nrfx_config+0x24>
   15bf2:	2b00      	cmp	r3, #0
   15bf4:	d040      	beq.n	15c78 <gpio_nrfx_config+0x9c>
   15bf6:	2b02      	cmp	r3, #2
   15bf8:	d040      	beq.n	15c7c <gpio_nrfx_config+0xa0>
   15bfa:	f06f 0015 	mvn.w	r0, #21
   15bfe:	e037      	b.n	15c70 <gpio_nrfx_config+0x94>
   15c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15c04:	d1f9      	bne.n	15bfa <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   15c06:	2401      	movs	r4, #1
   15c08:	e009      	b.n	15c1e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15c0a:	4c25      	ldr	r4, [pc, #148]	; (15ca0 <gpio_nrfx_config+0xc4>)
   15c0c:	42a3      	cmp	r3, r4
   15c0e:	d037      	beq.n	15c80 <gpio_nrfx_config+0xa4>
   15c10:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15c14:	d036      	beq.n	15c84 <gpio_nrfx_config+0xa8>
   15c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15c1a:	d1ee      	bne.n	15bfa <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   15c1c:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15c1e:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15c20:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   15c24:	bf4c      	ite	mi
   15c26:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   15c28:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15c2c:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15c30:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   15c32:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15c36:	d507      	bpl.n	15c48 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15c38:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15c3a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15c3e:	d523      	bpl.n	15c88 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15c40:	2301      	movs	r3, #1
   15c42:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15c44:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15c48:	7a03      	ldrb	r3, [r0, #8]
   15c4a:	f001 011f 	and.w	r1, r1, #31
   15c4e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c52:	a801      	add	r0, sp, #4
   15c54:	9101      	str	r1, [sp, #4]
   15c56:	f7ff ff71 	bl	15b3c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15c5a:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15c5c:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15c60:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15c64:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15c68:	3280      	adds	r2, #128	; 0x80
   15c6a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15c6e:	2000      	movs	r0, #0
}
   15c70:	b003      	add	sp, #12
   15c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15c74:	2407      	movs	r4, #7
   15c76:	e7d2      	b.n	15c1e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15c78:	461c      	mov	r4, r3
   15c7a:	e7d0      	b.n	15c1e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15c7c:	2404      	movs	r4, #4
   15c7e:	e7ce      	b.n	15c1e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15c80:	2405      	movs	r4, #5
   15c82:	e7cc      	b.n	15c1e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15c84:	2403      	movs	r4, #3
   15c86:	e7ca      	b.n	15c1e <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15c88:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15c8a:	bf42      	ittt	mi
   15c8c:	2301      	movmi	r3, #1
   15c8e:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15c90:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15c94:	e7d8      	b.n	15c48 <gpio_nrfx_config+0x6c>
   15c96:	bf00      	nop
   15c98:	00f00006 	.word	0x00f00006
   15c9c:	00100006 	.word	0x00100006
   15ca0:	00400002 	.word	0x00400002

00015ca4 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15ca4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15cac:	4606      	mov	r6, r0
   15cae:	460d      	mov	r5, r1
   15cb0:	4690      	mov	r8, r2
   15cb2:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   15cb4:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   15cb6:	f001 071f 	and.w	r7, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15cba:	f040 80bc 	bne.w	15e36 <gpio_nrfx_pin_interrupt_configure+0x192>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15cbe:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15cc0:	a801      	add	r0, sp, #4
   15cc2:	7a1b      	ldrb	r3, [r3, #8]
   15cc4:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
   15cc8:	9301      	str	r3, [sp, #4]
   15cca:	f7ff ff37 	bl	15b3c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15cce:	9b01      	ldr	r3, [sp, #4]
   15cd0:	3380      	adds	r3, #128	; 0x80
   15cd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15cd6:	07d8      	lsls	r0, r3, #31
   15cd8:	f100 80d2 	bmi.w	15e80 <gpio_nrfx_pin_interrupt_configure+0x1dc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15cdc:	2101      	movs	r1, #1
   15cde:	68e3      	ldr	r3, [r4, #12]
   15ce0:	40a9      	lsls	r1, r5
   15ce2:	4319      	orrs	r1, r3
   15ce4:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15ce6:	2101      	movs	r1, #1
   15ce8:	6963      	ldr	r3, [r4, #20]
   15cea:	40a9      	lsls	r1, r5
   15cec:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   15cf0:	bf0c      	ite	eq
   15cf2:	430b      	orreq	r3, r1
   15cf4:	438b      	bicne	r3, r1
   15cf6:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15cf8:	69a3      	ldr	r3, [r4, #24]
   15cfa:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15cfe:	bf0c      	ite	eq
   15d00:	430b      	orreq	r3, r1
   15d02:	438b      	bicne	r3, r1
   15d04:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15d06:	6923      	ldr	r3, [r4, #16]
   15d08:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15d0c:	bf0c      	ite	eq
   15d0e:	4319      	orreq	r1, r3
   15d10:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15d14:	6873      	ldr	r3, [r6, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15d16:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15d18:	7a18      	ldrb	r0, [r3, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15d1a:	2300      	movs	r3, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   15d1c:	f8d6 800c 	ldr.w	r8, [r6, #12]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15d20:	4e59      	ldr	r6, [pc, #356]	; (15e88 <gpio_nrfx_pin_interrupt_configure+0x1e4>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15d22:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   15d26:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   15d2a:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15d2c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   15d30:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   15d34:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15d38:	428f      	cmp	r7, r1
   15d3a:	f040 8087 	bne.w	15e4c <gpio_nrfx_pin_interrupt_configure+0x1a8>
		    && (intenset & BIT(i))) {
   15d3e:	fa22 f103 	lsr.w	r1, r2, r3
   15d42:	07c9      	lsls	r1, r1, #31
   15d44:	f140 8082 	bpl.w	15e4c <gpio_nrfx_pin_interrupt_configure+0x1a8>
			(void)atomic_and(mask, ~BIT(i));
   15d48:	2201      	movs	r2, #1
   15d4a:	409a      	lsls	r2, r3
   15d4c:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15d4e:	494f      	ldr	r1, [pc, #316]	; (15e8c <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   15d50:	e8d1 4fef 	ldaex	r4, [r1]
   15d54:	4004      	ands	r4, r0
   15d56:	e8c1 4fec 	stlex	ip, r4, [r1]
   15d5a:	f1bc 0f00 	cmp.w	ip, #0
   15d5e:	d1f7      	bne.n	15d50 <gpio_nrfx_pin_interrupt_configure+0xac>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15d60:	009b      	lsls	r3, r3, #2
   15d62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15d66:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   15d6a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15d6e:	f021 0101 	bic.w	r1, r1, #1
   15d72:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   15d76:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15d7a:	2100      	movs	r1, #0
   15d7c:	4638      	mov	r0, r7
   15d7e:	f017 fc9c 	bl	2d6ba <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   15d82:	f8d8 300c 	ldr.w	r3, [r8, #12]
   15d86:	40eb      	lsrs	r3, r5
   15d88:	f013 0301 	ands.w	r3, r3, #1
   15d8c:	d051      	beq.n	15e32 <gpio_nrfx_pin_interrupt_configure+0x18e>
		if (data->trig_edge & BIT(pin)) {
   15d8e:	f8d8 3014 	ldr.w	r3, [r8, #20]
   15d92:	40eb      	lsrs	r3, r5
   15d94:	f013 0401 	ands.w	r4, r3, #1
   15d98:	d065      	beq.n	15e66 <gpio_nrfx_pin_interrupt_configure+0x1c2>
			if (data->double_edge & BIT(pin)) {
   15d9a:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15d9e:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   15da0:	40eb      	lsrs	r3, r5
   15da2:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15da4:	bf48      	it	mi
   15da6:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   15da8:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15dac:	bf5f      	itttt	pl
   15dae:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   15db2:	fa21 f505 	lsrpl.w	r5, r1, r5
   15db6:	f005 0501 	andpl.w	r5, r5, #1
   15dba:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15dbe:	4933      	ldr	r1, [pc, #204]	; (15e8c <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   15dc0:	bf58      	it	pl
   15dc2:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   15dc4:	fa0c f402 	lsl.w	r4, ip, r2
   15dc8:	e8d1 0fef 	ldaex	r0, [r1]
   15dcc:	ea40 0304 	orr.w	r3, r0, r4
   15dd0:	e8c1 3fee 	stlex	lr, r3, [r1]
   15dd4:	f1be 0f00 	cmp.w	lr, #0
   15dd8:	d1f6      	bne.n	15dc8 <gpio_nrfx_pin_interrupt_configure+0x124>
		if ((prev & BIT(channel)) == 0) {
   15dda:	40d0      	lsrs	r0, r2
   15ddc:	f010 0301 	ands.w	r3, r0, #1
   15de0:	d139      	bne.n	15e56 <gpio_nrfx_pin_interrupt_configure+0x1b2>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15de2:	0091      	lsls	r1, r2, #2
   15de4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   15de8:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   15dec:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   15df0:	3240      	adds	r2, #64	; 0x40
   15df2:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   15df6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   15dfa:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15dfe:	023f      	lsls	r7, r7, #8
   15e00:	0092      	lsls	r2, r2, #2
   15e02:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   15e06:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   15e0a:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15e0c:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   15e10:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15e14:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15e18:	4307      	orrs	r7, r0
   15e1a:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e1e:	6013      	str	r3, [r2, #0]
   15e20:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15e22:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   15e26:	f042 0201 	orr.w	r2, r2, #1
   15e2a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   15e2e:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   15e32:	4618      	mov	r0, r3
   15e34:	e014      	b.n	15e60 <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15e36:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15e3a:	f47f af4f 	bne.w	15cdc <gpio_nrfx_pin_interrupt_configure+0x38>
   15e3e:	2101      	movs	r1, #1
   15e40:	fa01 f305 	lsl.w	r3, r1, r5
   15e44:	68e1      	ldr	r1, [r4, #12]
   15e46:	ea21 0103 	bic.w	r1, r1, r3
   15e4a:	e74b      	b.n	15ce4 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15e4c:	3301      	adds	r3, #1
   15e4e:	2b08      	cmp	r3, #8
   15e50:	f47f af6c 	bne.w	15d2c <gpio_nrfx_pin_interrupt_configure+0x88>
   15e54:	e791      	b.n	15d7a <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   15e56:	3201      	adds	r2, #1
   15e58:	2a08      	cmp	r2, #8
   15e5a:	d1b3      	bne.n	15dc4 <gpio_nrfx_pin_interrupt_configure+0x120>
	return -ENODEV;
   15e5c:	f06f 0012 	mvn.w	r0, #18
}
   15e60:	b003      	add	sp, #12
   15e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15e66:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15e6a:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15e6c:	40e9      	lsrs	r1, r5
   15e6e:	f001 0101 	and.w	r1, r1, #1
   15e72:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15e76:	b2c9      	uxtb	r1, r1
   15e78:	f017 fc1f 	bl	2d6ba <nrf_gpio_cfg_sense_set>
	int res = 0;
   15e7c:	4620      	mov	r0, r4
   15e7e:	e7ef      	b.n	15e60 <gpio_nrfx_pin_interrupt_configure+0x1bc>
		return -ENOTSUP;
   15e80:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15e84:	e7ec      	b.n	15e60 <gpio_nrfx_pin_interrupt_configure+0x1bc>
   15e86:	bf00      	nop
   15e88:	40031000 	.word	0x40031000
   15e8c:	20021628 	.word	0x20021628

00015e90 <gpiote_event_handler>:
{
   15e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e94:	4e4b      	ldr	r6, [pc, #300]	; (15fc4 <gpiote_event_handler+0x134>)
   15e96:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   15e98:	2f00      	cmp	r7, #0
   15e9a:	d050      	beq.n	15f3e <gpiote_event_handler+0xae>
	uint32_t bit = 1U << pin;
   15e9c:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   15ea0:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   15ea4:	4b48      	ldr	r3, [pc, #288]	; (15fc8 <gpiote_event_handler+0x138>)
   15ea6:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15ea8:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   15eac:	430a      	orrs	r2, r1
   15eae:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   15eb2:	4a46      	ldr	r2, [pc, #280]	; (15fcc <gpiote_event_handler+0x13c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   15eb4:	691b      	ldr	r3, [r3, #16]
   15eb6:	6914      	ldr	r4, [r2, #16]
   15eb8:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   15eba:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   15ebe:	bb7d      	cbnz	r5, 15f20 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15ec0:	6035      	str	r5, [r6, #0]
   15ec2:	6833      	ldr	r3, [r6, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15ec4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15ec6:	2501      	movs	r5, #1
   15ec8:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   15eca:	4841      	ldr	r0, [pc, #260]	; (15fd0 <gpiote_event_handler+0x140>)
   15ecc:	4941      	ldr	r1, [pc, #260]	; (15fd4 <gpiote_event_handler+0x144>)
   15ece:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   15ed2:	fa05 fc03 	lsl.w	ip, r5, r3
   15ed6:	ea1c 0f02 	tst.w	ip, r2
   15eda:	d00f      	beq.n	15efc <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15edc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   15ee0:	b162      	cbz	r2, 15efc <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15ee2:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   15ee6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15eea:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15eee:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15ef2:	fa05 f202 	lsl.w	r2, r5, r2
   15ef6:	4314      	orrs	r4, r2
   15ef8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15efc:	3301      	adds	r3, #1
   15efe:	2b08      	cmp	r3, #8
   15f00:	d1e5      	bne.n	15ece <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   15f02:	b9f4      	cbnz	r4, 15f42 <gpiote_event_handler+0xb2>
	if (port_event) {
   15f04:	b157      	cbz	r7, 15f1c <gpiote_event_handler+0x8c>
	uint32_t bit = 1U << pin;
   15f06:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   15f08:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   15f0a:	4d2f      	ldr	r5, [pc, #188]	; (15fc8 <gpiote_event_handler+0x138>)
   15f0c:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15f0e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   15f12:	430a      	orrs	r2, r1
   15f14:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   15f18:	2c00      	cmp	r4, #0
   15f1a:	d141      	bne.n	15fa0 <gpiote_event_handler+0x110>
}
   15f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   15f20:	ea15 0f08 	tst.w	r5, r8
   15f24:	d006      	beq.n	15f34 <gpiote_event_handler+0xa4>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15f26:	2100      	movs	r1, #0
   15f28:	f009 001f 	and.w	r0, r9, #31
   15f2c:	f017 fbc5 	bl	2d6ba <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15f30:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   15f34:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   15f38:	ea4f 0848 	mov.w	r8, r8, lsl #1
   15f3c:	e7bf      	b.n	15ebe <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15f3e:	463c      	mov	r4, r7
   15f40:	e7c0      	b.n	15ec4 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15f42:	4b21      	ldr	r3, [pc, #132]	; (15fc8 <gpiote_event_handler+0x138>)
   15f44:	685d      	ldr	r5, [r3, #4]
   15f46:	2d00      	cmp	r5, #0
   15f48:	d0dc      	beq.n	15f04 <gpiote_event_handler+0x74>
	return node->next;
   15f4a:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15f4c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 15fe0 <gpiote_event_handler+0x150>
   15f50:	2e00      	cmp	r6, #0
   15f52:	bf38      	it	cc
   15f54:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   15f56:	f8df 808c 	ldr.w	r8, [pc, #140]	; 15fe4 <gpiote_event_handler+0x154>
   15f5a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 15fe8 <gpiote_event_handler+0x158>
		if (cb->pin_mask & pins) {
   15f5e:	68ab      	ldr	r3, [r5, #8]
   15f60:	421c      	tst	r4, r3
   15f62:	d014      	beq.n	15f8e <gpiote_event_handler+0xfe>
			__ASSERT(cb->handler, "No callback handler!");
   15f64:	686b      	ldr	r3, [r5, #4]
   15f66:	b963      	cbnz	r3, 15f82 <gpiote_event_handler+0xf2>
   15f68:	4651      	mov	r1, sl
   15f6a:	2345      	movs	r3, #69	; 0x45
   15f6c:	4642      	mov	r2, r8
   15f6e:	481a      	ldr	r0, [pc, #104]	; (15fd8 <gpiote_event_handler+0x148>)
   15f70:	f016 f845 	bl	2bffe <printk>
   15f74:	4819      	ldr	r0, [pc, #100]	; (15fdc <gpiote_event_handler+0x14c>)
   15f76:	f016 f842 	bl	2bffe <printk>
   15f7a:	2145      	movs	r1, #69	; 0x45
   15f7c:	4640      	mov	r0, r8
   15f7e:	f016 fa5b 	bl	2c438 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   15f82:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   15f86:	4629      	mov	r1, r5
   15f88:	4648      	mov	r0, r9
   15f8a:	4022      	ands	r2, r4
   15f8c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15f8e:	2e00      	cmp	r6, #0
   15f90:	d0b8      	beq.n	15f04 <gpiote_event_handler+0x74>
   15f92:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15f94:	4635      	mov	r5, r6
   15f96:	2b00      	cmp	r3, #0
   15f98:	bf38      	it	cc
   15f9a:	2300      	movcc	r3, #0
   15f9c:	461e      	mov	r6, r3
   15f9e:	e7de      	b.n	15f5e <gpiote_event_handler+0xce>
		if (level_pins & bit) {
   15fa0:	4226      	tst	r6, r4
   15fa2:	d00c      	beq.n	15fbe <gpiote_event_handler+0x12e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15fa4:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15fa6:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15faa:	40f9      	lsrs	r1, r7
   15fac:	f001 0101 	and.w	r1, r1, #1
   15fb0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15fb4:	b2c9      	uxtb	r1, r1
   15fb6:	f017 fb80 	bl	2d6ba <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15fba:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   15fbe:	3701      	adds	r7, #1
		bit <<= 1;
   15fc0:	0076      	lsls	r6, r6, #1
   15fc2:	e7a9      	b.n	15f18 <gpiote_event_handler+0x88>
   15fc4:	4003117c 	.word	0x4003117c
   15fc8:	2002160c 	.word	0x2002160c
   15fcc:	40842500 	.word	0x40842500
   15fd0:	40031000 	.word	0x40031000
   15fd4:	40031100 	.word	0x40031100
   15fd8:	0002ff0d 	.word	0x0002ff0d
   15fdc:	00031021 	.word	0x00031021
   15fe0:	20020ab0 	.word	0x20020ab0
   15fe4:	00030fd3 	.word	0x00030fd3
   15fe8:	0003108e 	.word	0x0003108e

00015fec <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15fec:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   15fee:	794b      	ldrb	r3, [r1, #5]
   15ff0:	2b01      	cmp	r3, #1
   15ff2:	d029      	beq.n	16048 <uarte_nrfx_configure+0x5c>
   15ff4:	2b03      	cmp	r3, #3
   15ff6:	d124      	bne.n	16042 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15ff8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15ffa:	798b      	ldrb	r3, [r1, #6]
   15ffc:	2b03      	cmp	r3, #3
   15ffe:	d120      	bne.n	16042 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16000:	79cc      	ldrb	r4, [r1, #7]
   16002:	b124      	cbz	r4, 1600e <uarte_nrfx_configure+0x22>
   16004:	2c01      	cmp	r4, #1
   16006:	d11c      	bne.n	16042 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   16008:	6843      	ldr	r3, [r0, #4]
   1600a:	791b      	ldrb	r3, [r3, #4]
   1600c:	b1cb      	cbz	r3, 16042 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1600e:	790a      	ldrb	r2, [r1, #4]
   16010:	b112      	cbz	r2, 16018 <uarte_nrfx_configure+0x2c>
   16012:	2a02      	cmp	r2, #2
   16014:	d115      	bne.n	16042 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   16016:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16018:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1601a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1601c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   16020:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   16022:	d065      	beq.n	160f0 <uarte_nrfx_configure+0x104>
   16024:	d82d      	bhi.n	16082 <uarte_nrfx_configure+0x96>
   16026:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1602a:	d064      	beq.n	160f6 <uarte_nrfx_configure+0x10a>
   1602c:	d816      	bhi.n	1605c <uarte_nrfx_configure+0x70>
   1602e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16032:	d062      	beq.n	160fa <uarte_nrfx_configure+0x10e>
   16034:	d80a      	bhi.n	1604c <uarte_nrfx_configure+0x60>
   16036:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1603a:	d061      	beq.n	16100 <uarte_nrfx_configure+0x114>
   1603c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16040:	d061      	beq.n	16106 <uarte_nrfx_configure+0x11a>
   16042:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16046:	e052      	b.n	160ee <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   16048:	2600      	movs	r6, #0
   1604a:	e7d6      	b.n	15ffa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1604c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   16050:	d05c      	beq.n	1610c <uarte_nrfx_configure+0x120>
   16052:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16056:	d1f4      	bne.n	16042 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16058:	4b37      	ldr	r3, [pc, #220]	; (16138 <uarte_nrfx_configure+0x14c>)
   1605a:	e03c      	b.n	160d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1605c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16060:	d057      	beq.n	16112 <uarte_nrfx_configure+0x126>
   16062:	d807      	bhi.n	16074 <uarte_nrfx_configure+0x88>
   16064:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16068:	d055      	beq.n	16116 <uarte_nrfx_configure+0x12a>
   1606a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1606e:	d1e8      	bne.n	16042 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   16070:	4b32      	ldr	r3, [pc, #200]	; (1613c <uarte_nrfx_configure+0x150>)
   16072:	e030      	b.n	160d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   16074:	f647 2712 	movw	r7, #31250	; 0x7a12
   16078:	42bb      	cmp	r3, r7
   1607a:	d1e2      	bne.n	16042 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1607c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16080:	e029      	b.n	160d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   16082:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16086:	d048      	beq.n	1611a <uarte_nrfx_configure+0x12e>
   16088:	d813      	bhi.n	160b2 <uarte_nrfx_configure+0xc6>
   1608a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1608e:	d047      	beq.n	16120 <uarte_nrfx_configure+0x134>
   16090:	d809      	bhi.n	160a6 <uarte_nrfx_configure+0xba>
   16092:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   16096:	42bb      	cmp	r3, r7
   16098:	d044      	beq.n	16124 <uarte_nrfx_configure+0x138>
   1609a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1609e:	d1d0      	bne.n	16042 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   160a0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   160a4:	e017      	b.n	160d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   160a6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   160aa:	d1ca      	bne.n	16042 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   160ac:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   160b0:	e011      	b.n	160d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   160b2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   160b6:	d038      	beq.n	1612a <uarte_nrfx_configure+0x13e>
   160b8:	d808      	bhi.n	160cc <uarte_nrfx_configure+0xe0>
   160ba:	4f21      	ldr	r7, [pc, #132]	; (16140 <uarte_nrfx_configure+0x154>)
   160bc:	42bb      	cmp	r3, r7
   160be:	d037      	beq.n	16130 <uarte_nrfx_configure+0x144>
   160c0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   160c4:	d1bd      	bne.n	16042 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   160c6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   160ca:	e004      	b.n	160d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   160cc:	4f1d      	ldr	r7, [pc, #116]	; (16144 <uarte_nrfx_configure+0x158>)
   160ce:	42bb      	cmp	r3, r7
   160d0:	d1b7      	bne.n	16042 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   160d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   160d6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   160da:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   160dc:	4334      	orrs	r4, r6
   160de:	4322      	orrs	r2, r4
   160e0:	3304      	adds	r3, #4
   160e2:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   160e4:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   160e8:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   160ec:	2000      	movs	r0, #0
}
   160ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   160f0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   160f4:	e7ef      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   160f6:	4b14      	ldr	r3, [pc, #80]	; (16148 <uarte_nrfx_configure+0x15c>)
   160f8:	e7ed      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   160fa:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   160fe:	e7ea      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   16100:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16104:	e7e7      	b.n	160d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   16106:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1610a:	e7e4      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1610c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16110:	e7e1      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16112:	4b0e      	ldr	r3, [pc, #56]	; (1614c <uarte_nrfx_configure+0x160>)
   16114:	e7df      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16116:	4b0e      	ldr	r3, [pc, #56]	; (16150 <uarte_nrfx_configure+0x164>)
   16118:	e7dd      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1611a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1611e:	e7da      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16120:	4b0c      	ldr	r3, [pc, #48]	; (16154 <uarte_nrfx_configure+0x168>)
   16122:	e7d8      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16124:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16128:	e7d5      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1612a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1612e:	e7d2      	b.n	160d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16130:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16134:	e7cf      	b.n	160d6 <uarte_nrfx_configure+0xea>
   16136:	bf00      	nop
   16138:	0013b000 	.word	0x0013b000
   1613c:	004ea000 	.word	0x004ea000
   16140:	0003d090 	.word	0x0003d090
   16144:	000f4240 	.word	0x000f4240
   16148:	00275000 	.word	0x00275000
   1614c:	0075c000 	.word	0x0075c000
   16150:	003af000 	.word	0x003af000
   16154:	013a9000 	.word	0x013a9000

00016158 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16158:	6803      	ldr	r3, [r0, #0]
{
   1615a:	b510      	push	{r4, lr}
    switch (port)
   1615c:	095a      	lsrs	r2, r3, #5
   1615e:	bf0c      	ite	eq
   16160:	f04f 32ff 	moveq.w	r2, #4294967295
   16164:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   16166:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1616a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1616e:	07db      	lsls	r3, r3, #31
{
   16170:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16172:	d40b      	bmi.n	1618c <nrf_gpio_pin_port_decode+0x34>
   16174:	490f      	ldr	r1, [pc, #60]	; (161b4 <nrf_gpio_pin_port_decode+0x5c>)
   16176:	4810      	ldr	r0, [pc, #64]	; (161b8 <nrf_gpio_pin_port_decode+0x60>)
   16178:	f240 231a 	movw	r3, #538	; 0x21a
   1617c:	4a0f      	ldr	r2, [pc, #60]	; (161bc <nrf_gpio_pin_port_decode+0x64>)
   1617e:	f015 ff3e 	bl	2bffe <printk>
   16182:	f240 211a 	movw	r1, #538	; 0x21a
   16186:	480d      	ldr	r0, [pc, #52]	; (161bc <nrf_gpio_pin_port_decode+0x64>)
   16188:	f016 f956 	bl	2c438 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1618c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1618e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16192:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   16194:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16196:	d00b      	beq.n	161b0 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   16198:	4909      	ldr	r1, [pc, #36]	; (161c0 <nrf_gpio_pin_port_decode+0x68>)
   1619a:	4807      	ldr	r0, [pc, #28]	; (161b8 <nrf_gpio_pin_port_decode+0x60>)
   1619c:	f240 231f 	movw	r3, #543	; 0x21f
   161a0:	4a06      	ldr	r2, [pc, #24]	; (161bc <nrf_gpio_pin_port_decode+0x64>)
   161a2:	f015 ff2c 	bl	2bffe <printk>
   161a6:	f240 211f 	movw	r1, #543	; 0x21f
   161aa:	4804      	ldr	r0, [pc, #16]	; (161bc <nrf_gpio_pin_port_decode+0x64>)
   161ac:	f016 f944 	bl	2c438 <assert_post_action>
}
   161b0:	4804      	ldr	r0, [pc, #16]	; (161c4 <nrf_gpio_pin_port_decode+0x6c>)
   161b2:	bd10      	pop	{r4, pc}
   161b4:	0003106b 	.word	0x0003106b
   161b8:	0002ff0d 	.word	0x0002ff0d
   161bc:	00031038 	.word	0x00031038
   161c0:	00032a36 	.word	0x00032a36
   161c4:	40842500 	.word	0x40842500

000161c8 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   161c8:	b530      	push	{r4, r5, lr}
   161ca:	b085      	sub	sp, #20
   161cc:	466c      	mov	r4, sp
   161ce:	4605      	mov	r5, r0
   161d0:	4b08      	ldr	r3, [pc, #32]	; (161f4 <uarte_1_init+0x2c>)
   161d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   161d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   161d8:	2200      	movs	r2, #0
   161da:	2101      	movs	r1, #1
   161dc:	2009      	movs	r0, #9
   161de:	f7fe fab3 	bl	14748 <z_arm_irq_priority_set>
   161e2:	2009      	movs	r0, #9
   161e4:	f7fe fa92 	bl	1470c <arch_irq_enable>
   161e8:	4621      	mov	r1, r4
   161ea:	4628      	mov	r0, r5
   161ec:	f017 fb91 	bl	2d912 <uarte_instance_init.constprop.0>
   161f0:	b005      	add	sp, #20
   161f2:	bd30      	pop	{r4, r5, pc}
   161f4:	0002ec80 	.word	0x0002ec80

000161f8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   161f8:	b530      	push	{r4, r5, lr}
   161fa:	b085      	sub	sp, #20
   161fc:	466c      	mov	r4, sp
   161fe:	4605      	mov	r5, r0
   16200:	4b08      	ldr	r3, [pc, #32]	; (16224 <uarte_0_init+0x2c>)
   16202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   16204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   16208:	2200      	movs	r2, #0
   1620a:	2101      	movs	r1, #1
   1620c:	2008      	movs	r0, #8
   1620e:	f7fe fa9b 	bl	14748 <z_arm_irq_priority_set>
   16212:	2008      	movs	r0, #8
   16214:	f7fe fa7a 	bl	1470c <arch_irq_enable>
   16218:	4621      	mov	r1, r4
   1621a:	4628      	mov	r0, r5
   1621c:	f017 fb79 	bl	2d912 <uarte_instance_init.constprop.0>
   16220:	b005      	add	sp, #20
   16222:	bd30      	pop	{r4, r5, pc}
   16224:	0002ec90 	.word	0x0002ec90

00016228 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   16228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1622c:	460e      	mov	r6, r1
   1622e:	4614      	mov	r4, r2
   16230:	b0a6      	sub	sp, #152	; 0x98
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   16232:	b948      	cbnz	r0, 16248 <entropy_cc3xx_rng_get_entropy+0x20>
   16234:	491c      	ldr	r1, [pc, #112]	; (162a8 <entropy_cc3xx_rng_get_entropy+0x80>)
   16236:	481d      	ldr	r0, [pc, #116]	; (162ac <entropy_cc3xx_rng_get_entropy+0x84>)
   16238:	231f      	movs	r3, #31
   1623a:	4a1d      	ldr	r2, [pc, #116]	; (162b0 <entropy_cc3xx_rng_get_entropy+0x88>)
   1623c:	f015 fedf 	bl	2bffe <printk>
   16240:	211f      	movs	r1, #31
   16242:	481b      	ldr	r0, [pc, #108]	; (162b0 <entropy_cc3xx_rng_get_entropy+0x88>)
   16244:	f016 f8f8 	bl	2c438 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   16248:	b94e      	cbnz	r6, 1625e <entropy_cc3xx_rng_get_entropy+0x36>
   1624a:	491a      	ldr	r1, [pc, #104]	; (162b4 <entropy_cc3xx_rng_get_entropy+0x8c>)
   1624c:	4817      	ldr	r0, [pc, #92]	; (162ac <entropy_cc3xx_rng_get_entropy+0x84>)
   1624e:	2320      	movs	r3, #32
   16250:	4a17      	ldr	r2, [pc, #92]	; (162b0 <entropy_cc3xx_rng_get_entropy+0x88>)
   16252:	f015 fed4 	bl	2bffe <printk>
   16256:	2120      	movs	r1, #32
   16258:	4815      	ldr	r0, [pc, #84]	; (162b0 <entropy_cc3xx_rng_get_entropy+0x88>)
   1625a:	f016 f8ed 	bl	2c438 <assert_post_action>
{
   1625e:	2700      	movs	r7, #0
   16260:	f06f 0515 	mvn.w	r5, #21
			       */

	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	while (length > 0) {
   16264:	b91c      	cbnz	r4, 1626e <entropy_cc3xx_rng_get_entropy+0x46>
		return -EINVAL;
	}
#endif

	return res;
}
   16266:	4628      	mov	r0, r5
   16268:	b026      	add	sp, #152	; 0x98
   1626a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   1626e:	2190      	movs	r1, #144	; 0x90
   16270:	aa01      	add	r2, sp, #4
   16272:	a802      	add	r0, sp, #8
   16274:	f016 fcaa 	bl	2cbcc <spm_request_random_number>
		if (res < 0) {
   16278:	1e05      	subs	r5, r0, #0
   1627a:	dbf4      	blt.n	16266 <entropy_cc3xx_rng_get_entropy+0x3e>
		if (olen != sizeof(spm_buf)) {
   1627c:	9b01      	ldr	r3, [sp, #4]
   1627e:	2b90      	cmp	r3, #144	; 0x90
   16280:	d10e      	bne.n	162a0 <entropy_cc3xx_rng_get_entropy+0x78>
		to_copy = MIN(length, sizeof(spm_buf));
   16282:	2c90      	cmp	r4, #144	; 0x90
   16284:	46a0      	mov	r8, r4
   16286:	bf28      	it	cs
   16288:	f04f 0890 	movcs.w	r8, #144	; 0x90
   1628c:	19f0      	adds	r0, r6, r7
   1628e:	4642      	mov	r2, r8
   16290:	a902      	add	r1, sp, #8
		length -= to_copy;
   16292:	eba4 0408 	sub.w	r4, r4, r8
   16296:	f7f6 fc59 	bl	cb4c <memcpy>
   1629a:	b2a4      	uxth	r4, r4
		offset += to_copy;
   1629c:	4447      	add	r7, r8
   1629e:	e7e1      	b.n	16264 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   162a0:	f06f 0515 	mvn.w	r5, #21
   162a4:	e7df      	b.n	16266 <entropy_cc3xx_rng_get_entropy+0x3e>
   162a6:	bf00      	nop
   162a8:	000310e8 	.word	0x000310e8
   162ac:	0002ff0d 	.word	0x0002ff0d
   162b0:	000310b8 	.word	0x000310b8
   162b4:	000310fb 	.word	0x000310fb

000162b8 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
   162b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162bc:	4605      	mov	r5, r0
    unsigned char *output_pointer = NULL;
    size_t output_length = 0;
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;

    if (output_buffer == NULL)
   162be:	460f      	mov	r7, r1
{
   162c0:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   162c2:	b919      	cbnz	r1, 162cc <print_string_ptr+0x14>
    {
        return false;
   162c4:	2000      	movs	r0, #0
    }
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
}
   162c6:	b005      	add	sp, #20
   162c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   162cc:	4b4e      	ldr	r3, [pc, #312]	; (16408 <print_string_ptr+0x150>)
   162ce:	881a      	ldrh	r2, [r3, #0]
   162d0:	789b      	ldrb	r3, [r3, #2]
   162d2:	f8ad 200c 	strh.w	r2, [sp, #12]
   162d6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   162da:	b340      	cbz	r0, 1632e <print_string_ptr+0x76>
   162dc:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   162de:	f04f 0b00 	mov.w	fp, #0
   162e2:	2001      	movs	r0, #1
   162e4:	4c49      	ldr	r4, [pc, #292]	; (1640c <print_string_ptr+0x154>)
   162e6:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   162e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   162ec:	bb6b      	cbnz	r3, 1634a <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   162ee:	ebaa 0a05 	sub.w	sl, sl, r5
   162f2:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   162f4:	4638      	mov	r0, r7
   162f6:	f10a 0103 	add.w	r1, sl, #3
   162fa:	f017 fbb1 	bl	2da60 <ensure>
    if (output == NULL)
   162fe:	4606      	mov	r6, r0
   16300:	2800      	cmp	r0, #0
   16302:	d0df      	beq.n	162c4 <print_string_ptr+0xc>
    if (escape_characters == 0)
   16304:	2322      	movs	r3, #34	; 0x22
   16306:	1c44      	adds	r4, r0, #1
   16308:	f10a 0901 	add.w	r9, sl, #1
   1630c:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   16310:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   16312:	f1bb 0f00 	cmp.w	fp, #0
   16316:	d12e      	bne.n	16376 <print_string_ptr+0xbe>
   16318:	4652      	mov	r2, sl
   1631a:	4629      	mov	r1, r5
   1631c:	4620      	mov	r0, r4
   1631e:	f7f6 fc15 	bl	cb4c <memcpy>
        output[output_length + 1] = '\"';
   16322:	2322      	movs	r3, #34	; 0x22
   16324:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   16328:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   1632c:	e00b      	b.n	16346 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   1632e:	2103      	movs	r1, #3
   16330:	4638      	mov	r0, r7
   16332:	f017 fb95 	bl	2da60 <ensure>
        if (output == NULL)
   16336:	2800      	cmp	r0, #0
   16338:	d0c4      	beq.n	162c4 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   1633a:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1633e:	a903      	add	r1, sp, #12
   16340:	1ad2      	subs	r2, r2, r3
   16342:	f010 fab7 	bl	268b4 <strncpy>
    return true;
   16346:	2001      	movs	r0, #1
   16348:	e7bd      	b.n	162c6 <print_string_ptr+0xe>
        switch (*input_pointer)
   1634a:	2b22      	cmp	r3, #34	; 0x22
   1634c:	d80b      	bhi.n	16366 <print_string_ptr+0xae>
   1634e:	2b07      	cmp	r3, #7
   16350:	d90c      	bls.n	1636c <print_string_ptr+0xb4>
   16352:	f1a3 0208 	sub.w	r2, r3, #8
   16356:	b2d2      	uxtb	r2, r2
   16358:	fa00 f202 	lsl.w	r2, r0, r2
   1635c:	4222      	tst	r2, r4
   1635e:	d005      	beq.n	1636c <print_string_ptr+0xb4>
                escape_characters++;
   16360:	f10b 0b01 	add.w	fp, fp, #1
                break;
   16364:	e7bf      	b.n	162e6 <print_string_ptr+0x2e>
        switch (*input_pointer)
   16366:	2b5c      	cmp	r3, #92	; 0x5c
   16368:	d1bd      	bne.n	162e6 <print_string_ptr+0x2e>
   1636a:	e7f9      	b.n	16360 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   1636c:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   1636e:	bf98      	it	ls
   16370:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   16374:	e7b7      	b.n	162e6 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   16376:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   1637a:	f04f 0b74 	mov.w	fp, #116	; 0x74
   1637e:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   16380:	4a23      	ldr	r2, [pc, #140]	; (16410 <print_string_ptr+0x158>)
   16382:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   16384:	9901      	ldr	r1, [sp, #4]
   16386:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1638a:	9101      	str	r1, [sp, #4]
   1638c:	b92b      	cbnz	r3, 1639a <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   1638e:	2222      	movs	r2, #34	; 0x22
   16390:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   16394:	f806 3008 	strb.w	r3, [r6, r8]
   16398:	e7d5      	b.n	16346 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   1639a:	2b1f      	cmp	r3, #31
   1639c:	d907      	bls.n	163ae <print_string_ptr+0xf6>
   1639e:	2b22      	cmp	r3, #34	; 0x22
   163a0:	d005      	beq.n	163ae <print_string_ptr+0xf6>
   163a2:	2b5c      	cmp	r3, #92	; 0x5c
   163a4:	d003      	beq.n	163ae <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   163a6:	4620      	mov	r0, r4
   163a8:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   163aa:	1c44      	adds	r4, r0, #1
   163ac:	e7ea      	b.n	16384 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   163ae:	4620      	mov	r0, r4
            switch (*input_pointer)
   163b0:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   163b2:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   163b6:	781b      	ldrb	r3, [r3, #0]
   163b8:	2b0d      	cmp	r3, #13
   163ba:	d80a      	bhi.n	163d2 <print_string_ptr+0x11a>
   163bc:	2b07      	cmp	r3, #7
   163be:	d919      	bls.n	163f4 <print_string_ptr+0x13c>
   163c0:	f1a3 0108 	sub.w	r1, r3, #8
   163c4:	2905      	cmp	r1, #5
   163c6:	d815      	bhi.n	163f4 <print_string_ptr+0x13c>
   163c8:	e8df f001 	tbb	[pc, r1]
   163cc:	140d1109 	.word	0x140d1109
   163d0:	0f0b      	.short	0x0f0b
   163d2:	2b22      	cmp	r3, #34	; 0x22
   163d4:	d001      	beq.n	163da <print_string_ptr+0x122>
   163d6:	2b5c      	cmp	r3, #92	; 0x5c
   163d8:	d10c      	bne.n	163f4 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   163da:	7063      	strb	r3, [r4, #1]
                    break;
   163dc:	e7e5      	b.n	163aa <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   163de:	2362      	movs	r3, #98	; 0x62
   163e0:	e7fb      	b.n	163da <print_string_ptr+0x122>
                    *output_pointer = 'f';
   163e2:	2366      	movs	r3, #102	; 0x66
   163e4:	e7f9      	b.n	163da <print_string_ptr+0x122>
                    *output_pointer = 'n';
   163e6:	236e      	movs	r3, #110	; 0x6e
   163e8:	e7f7      	b.n	163da <print_string_ptr+0x122>
                    *output_pointer = 'r';
   163ea:	2372      	movs	r3, #114	; 0x72
   163ec:	e7f5      	b.n	163da <print_string_ptr+0x122>
                    *output_pointer = 't';
   163ee:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   163f2:	e7da      	b.n	163aa <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   163f4:	6839      	ldr	r1, [r7, #0]
   163f6:	687d      	ldr	r5, [r7, #4]
   163f8:	1a41      	subs	r1, r0, r1
   163fa:	1a69      	subs	r1, r5, r1
   163fc:	f010 f852 	bl	264a4 <snprintf>
                    output_pointer += 4;
   16400:	4a03      	ldr	r2, [pc, #12]	; (16410 <print_string_ptr+0x158>)
   16402:	1d60      	adds	r0, r4, #5
                    break;
   16404:	e7d1      	b.n	163aa <print_string_ptr+0xf2>
   16406:	bf00      	nop
   16408:	00031125 	.word	0x00031125
   1640c:	04000037 	.word	0x04000037
   16410:	0003111f 	.word	0x0003111f

00016414 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
   16414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16418:	460c      	mov	r4, r1
    unsigned char *output = NULL;

    if ((item == NULL) || (output_buffer == NULL))
   1641a:	4606      	mov	r6, r0
{
   1641c:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   1641e:	b908      	cbnz	r0, 16424 <print_value+0x10>
    {
        return false;
    }

    switch ((item->type) & 0xFF)
   16420:	2500      	movs	r5, #0
   16422:	e06f      	b.n	16504 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   16424:	2900      	cmp	r1, #0
   16426:	d0fb      	beq.n	16420 <print_value+0xc>
    switch ((item->type) & 0xFF)
   16428:	7b05      	ldrb	r5, [r0, #12]
   1642a:	2d10      	cmp	r5, #16
   1642c:	f000 80cc 	beq.w	165c8 <print_value+0x1b4>
   16430:	dc18      	bgt.n	16464 <print_value+0x50>
   16432:	1e6b      	subs	r3, r5, #1
   16434:	2b07      	cmp	r3, #7
   16436:	d8f3      	bhi.n	16420 <print_value+0xc>
   16438:	2b07      	cmp	r3, #7
   1643a:	d8f1      	bhi.n	16420 <print_value+0xc>
   1643c:	a201      	add	r2, pc, #4	; (adr r2, 16444 <print_value+0x30>)
   1643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16442:	bf00      	nop
   16444:	000164e1 	.word	0x000164e1
   16448:	0001650d 	.word	0x0001650d
   1644c:	00016421 	.word	0x00016421
   16450:	000164b9 	.word	0x000164b9
   16454:	00016421 	.word	0x00016421
   16458:	00016421 	.word	0x00016421
   1645c:	00016421 	.word	0x00016421
   16460:	00016511 	.word	0x00016511
   16464:	2d40      	cmp	r5, #64	; 0x40
   16466:	f000 80dd 	beq.w	16624 <print_value+0x210>
   1646a:	2d80      	cmp	r5, #128	; 0x80
   1646c:	f000 8098 	beq.w	165a0 <print_value+0x18c>
   16470:	2d20      	cmp	r5, #32
   16472:	d1d5      	bne.n	16420 <print_value+0xc>

        case cJSON_String:
            return print_string(item, output_buffer);

        case cJSON_Array:
            return print_array(item, output_buffer);
   16474:	6886      	ldr	r6, [r0, #8]
        return false;
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
   16476:	2101      	movs	r1, #1
   16478:	4620      	mov	r0, r4
   1647a:	f017 faf1 	bl	2da60 <ensure>
    if (output_pointer == NULL)
   1647e:	2800      	cmp	r0, #0
   16480:	d0ce      	beq.n	16420 <print_value+0xc>
    {
        return false;
    }

    *output_pointer = '[';
   16482:	235b      	movs	r3, #91	; 0x5b
            output_pointer = ensure(output_buffer, length + 1);
            if (output_pointer == NULL)
            {
                return false;
            }
            *output_pointer++ = ',';
   16484:	272c      	movs	r7, #44	; 0x2c
            if(output_buffer->format)
            {
                *output_pointer++ = ' ';
            }
            *output_pointer = '\0';
   16486:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   1648a:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   1648c:	68a3      	ldr	r3, [r4, #8]
   1648e:	3301      	adds	r3, #1
   16490:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   16492:	68e3      	ldr	r3, [r4, #12]
   16494:	3301      	adds	r3, #1
   16496:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   16498:	2e00      	cmp	r6, #0
   1649a:	f040 809a 	bne.w	165d2 <print_value+0x1be>
            output_buffer->offset += length;
        }
        current_element = current_element->next;
    }

    output_pointer = ensure(output_buffer, 2);
   1649e:	2102      	movs	r1, #2
   164a0:	4620      	mov	r0, r4
   164a2:	f017 fadd 	bl	2da60 <ensure>
    if (output_pointer == NULL)
   164a6:	2800      	cmp	r0, #0
   164a8:	d0ba      	beq.n	16420 <print_value+0xc>
    {
        return false;
    }
    *output_pointer++ = ']';
   164aa:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   164ac:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   164ae:	7003      	strb	r3, [r0, #0]
            *output_pointer++ = '\t';
        }
    }
    *output_pointer++ = '}';
    *output_pointer = '\0';
    output_buffer->depth--;
   164b0:	68e3      	ldr	r3, [r4, #12]
   164b2:	3b01      	subs	r3, #1
   164b4:	60e3      	str	r3, [r4, #12]
   164b6:	e011      	b.n	164dc <print_value+0xc8>
            const char buff[] = "null";
   164b8:	4ba8      	ldr	r3, [pc, #672]	; (1675c <print_value+0x348>)
            const char buff[] = "true";
   164ba:	6818      	ldr	r0, [r3, #0]
   164bc:	791b      	ldrb	r3, [r3, #4]
   164be:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   164c0:	2105      	movs	r1, #5
   164c2:	4620      	mov	r0, r4
            const char buff[] = "true";
   164c4:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   164c8:	f017 faca 	bl	2da60 <ensure>
            if (output == NULL)
   164cc:	4605      	mov	r5, r0
   164ce:	b1c8      	cbz	r0, 16504 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   164d0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   164d4:	a907      	add	r1, sp, #28
   164d6:	1ad2      	subs	r2, r2, r3
   164d8:	f010 f9ec 	bl	268b4 <strncpy>

    return true;
   164dc:	2501      	movs	r5, #1
   164de:	e011      	b.n	16504 <print_value+0xf0>
            const char buff[] = "false";
   164e0:	4b9f      	ldr	r3, [pc, #636]	; (16760 <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   164e2:	2106      	movs	r1, #6
            const char buff[] = "false";
   164e4:	6818      	ldr	r0, [r3, #0]
   164e6:	889b      	ldrh	r3, [r3, #4]
   164e8:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   164ea:	4620      	mov	r0, r4
            const char buff[] = "false";
   164ec:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   164f0:	f017 fab6 	bl	2da60 <ensure>
            if (output == NULL)
   164f4:	2800      	cmp	r0, #0
   164f6:	d093      	beq.n	16420 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   164f8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   164fc:	a907      	add	r1, sp, #28
   164fe:	1ad2      	subs	r2, r2, r3
   16500:	f010 f9d8 	bl	268b4 <strncpy>
}
   16504:	4628      	mov	r0, r5
   16506:	b00f      	add	sp, #60	; 0x3c
   16508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   1650c:	4b95      	ldr	r3, [pc, #596]	; (16764 <print_value+0x350>)
   1650e:	e7d4      	b.n	164ba <print_value+0xa6>
    if ((d * 0) != 0)
   16510:	2200      	movs	r2, #0
    double d = item->valuedouble;
   16512:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   16516:	2300      	movs	r3, #0
   16518:	4640      	mov	r0, r8
   1651a:	4649      	mov	r1, r9
   1651c:	f7f6 fc6a 	bl	cdf4 <__aeabi_dmul>
   16520:	2200      	movs	r2, #0
   16522:	2300      	movs	r3, #0
   16524:	f7f6 f89e 	bl	c664 <__aeabi_dcmpeq>
   16528:	ae07      	add	r6, sp, #28
   1652a:	b9b8      	cbnz	r0, 1655c <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   1652c:	4630      	mov	r0, r6
   1652e:	498b      	ldr	r1, [pc, #556]	; (1675c <print_value+0x348>)
   16530:	f010 f8fa 	bl	26728 <strcpy>
   16534:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   16536:	4620      	mov	r0, r4
   16538:	1c69      	adds	r1, r5, #1
   1653a:	f017 fa91 	bl	2da60 <ensure>
    if (output_pointer == NULL)
   1653e:	2800      	cmp	r0, #0
   16540:	f43f af6e 	beq.w	16420 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   16544:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   16546:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   16548:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   1654a:	3301      	adds	r3, #1
   1654c:	429d      	cmp	r5, r3
   1654e:	d1fa      	bne.n	16546 <print_value+0x132>
    output_pointer[i] = '\0';
   16550:	2300      	movs	r3, #0
   16552:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   16554:	68a0      	ldr	r0, [r4, #8]
   16556:	4428      	add	r0, r5
   16558:	60a0      	str	r0, [r4, #8]
    return true;
   1655a:	e7bf      	b.n	164dc <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   1655c:	211a      	movs	r1, #26
   1655e:	4a82      	ldr	r2, [pc, #520]	; (16768 <print_value+0x354>)
   16560:	4630      	mov	r0, r6
   16562:	e9cd 8900 	strd	r8, r9, [sp]
   16566:	f00f ff9d 	bl	264a4 <snprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   1656a:	4980      	ldr	r1, [pc, #512]	; (1676c <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   1656c:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   1656e:	aa04      	add	r2, sp, #16
   16570:	4630      	mov	r0, r6
   16572:	f00f fffb 	bl	2656c <sscanf>
   16576:	2801      	cmp	r0, #1
   16578:	d106      	bne.n	16588 <print_value+0x174>
   1657a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1657e:	4640      	mov	r0, r8
   16580:	4649      	mov	r1, r9
   16582:	f7f6 f86f 	bl	c664 <__aeabi_dcmpeq>
   16586:	b938      	cbnz	r0, 16598 <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   16588:	211a      	movs	r1, #26
   1658a:	4630      	mov	r0, r6
   1658c:	e9cd 8900 	strd	r8, r9, [sp]
   16590:	4a77      	ldr	r2, [pc, #476]	; (16770 <print_value+0x35c>)
   16592:	f00f ff87 	bl	264a4 <snprintf>
   16596:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   16598:	2d19      	cmp	r5, #25
   1659a:	f73f af41 	bgt.w	16420 <print_value+0xc>
   1659e:	e7ca      	b.n	16536 <print_value+0x122>
            if (item->valuestring == NULL)
   165a0:	6900      	ldr	r0, [r0, #16]
   165a2:	2800      	cmp	r0, #0
   165a4:	f43f af3c 	beq.w	16420 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   165a8:	f010 f91c 	bl	267e4 <strlen>
   165ac:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   165ae:	4611      	mov	r1, r2
   165b0:	4620      	mov	r0, r4
   165b2:	9203      	str	r2, [sp, #12]
   165b4:	f017 fa54 	bl	2da60 <ensure>
            if (output == NULL)
   165b8:	2800      	cmp	r0, #0
   165ba:	f43f af31 	beq.w	16420 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   165be:	9a03      	ldr	r2, [sp, #12]
   165c0:	6931      	ldr	r1, [r6, #16]
   165c2:	f7f6 fac3 	bl	cb4c <memcpy>
   165c6:	e789      	b.n	164dc <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   165c8:	6900      	ldr	r0, [r0, #16]
   165ca:	f7ff fe75 	bl	162b8 <print_string_ptr>
   165ce:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   165d0:	e798      	b.n	16504 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   165d2:	4621      	mov	r1, r4
   165d4:	4630      	mov	r0, r6
   165d6:	f7ff ff1d 	bl	16414 <print_value>
   165da:	2800      	cmp	r0, #0
   165dc:	f43f af20 	beq.w	16420 <print_value+0xc>
        update_offset(output_buffer);
   165e0:	4620      	mov	r0, r4
   165e2:	f017 fa14 	bl	2da0e <update_offset>
        if (current_element->next)
   165e6:	6833      	ldr	r3, [r6, #0]
   165e8:	b1bb      	cbz	r3, 1661a <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   165ea:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   165ec:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   165ee:	2b00      	cmp	r3, #0
   165f0:	bf14      	ite	ne
   165f2:	f04f 0902 	movne.w	r9, #2
   165f6:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   165fa:	f109 0101 	add.w	r1, r9, #1
   165fe:	f017 fa2f 	bl	2da60 <ensure>
            if (output_pointer == NULL)
   16602:	2800      	cmp	r0, #0
   16604:	f43f af0c 	beq.w	16420 <print_value+0xc>
            *output_pointer++ = ',';
   16608:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   1660a:	6963      	ldr	r3, [r4, #20]
   1660c:	b93b      	cbnz	r3, 1661e <print_value+0x20a>
            *output_pointer++ = ',';
   1660e:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   16610:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   16614:	68a3      	ldr	r3, [r4, #8]
   16616:	444b      	add	r3, r9
   16618:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   1661a:	6836      	ldr	r6, [r6, #0]
   1661c:	e73c      	b.n	16498 <print_value+0x84>
                *output_pointer++ = ' ';
   1661e:	1c83      	adds	r3, r0, #2
   16620:	7045      	strb	r5, [r0, #1]
   16622:	e7f5      	b.n	16610 <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   16624:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   16626:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   16628:	2b00      	cmp	r3, #0
   1662a:	bf14      	ite	ne
   1662c:	2702      	movne	r7, #2
   1662e:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   16630:	4620      	mov	r0, r4
   16632:	1c79      	adds	r1, r7, #1
   16634:	f017 fa14 	bl	2da60 <ensure>
    if (output_pointer == NULL)
   16638:	2800      	cmp	r0, #0
   1663a:	f43f aef1 	beq.w	16420 <print_value+0xc>
    *output_pointer++ = '{';
   1663e:	237b      	movs	r3, #123	; 0x7b
   16640:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   16642:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   16644:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   16646:	3201      	adds	r2, #1
   16648:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   1664a:	b10b      	cbz	r3, 16650 <print_value+0x23c>
        *output_pointer++ = '\n';
   1664c:	230a      	movs	r3, #10
   1664e:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   16650:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   16652:	2609      	movs	r6, #9
    output_buffer->offset += length;
   16654:	443b      	add	r3, r7
        *output_pointer++ = ':';
   16656:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   16658:	60a3      	str	r3, [r4, #8]
    while (current_item)
   1665a:	6963      	ldr	r3, [r4, #20]
   1665c:	b995      	cbnz	r5, 16684 <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   1665e:	2b00      	cmp	r3, #0
   16660:	d06f      	beq.n	16742 <print_value+0x32e>
   16662:	68e1      	ldr	r1, [r4, #12]
   16664:	3101      	adds	r1, #1
   16666:	4620      	mov	r0, r4
   16668:	f017 f9fa 	bl	2da60 <ensure>
    if (output_pointer == NULL)
   1666c:	2800      	cmp	r0, #0
   1666e:	f43f aed7 	beq.w	16420 <print_value+0xc>
    if (output_buffer->format)
   16672:	6963      	ldr	r3, [r4, #20]
   16674:	2b00      	cmp	r3, #0
   16676:	d16e      	bne.n	16756 <print_value+0x342>
   16678:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   1667a:	227d      	movs	r2, #125	; 0x7d
   1667c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   1667e:	2200      	movs	r2, #0
   16680:	705a      	strb	r2, [r3, #1]
   16682:	e715      	b.n	164b0 <print_value+0x9c>
        if (output_buffer->format)
   16684:	b173      	cbz	r3, 166a4 <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   16686:	4620      	mov	r0, r4
   16688:	68e1      	ldr	r1, [r4, #12]
   1668a:	f017 f9e9 	bl	2da60 <ensure>
            if (output_pointer == NULL)
   1668e:	2800      	cmp	r0, #0
   16690:	f43f aec6 	beq.w	16420 <print_value+0xc>
   16694:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   16696:	68e1      	ldr	r1, [r4, #12]
   16698:	1a13      	subs	r3, r2, r0
   1669a:	428b      	cmp	r3, r1
   1669c:	d34e      	bcc.n	1673c <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   1669e:	68a3      	ldr	r3, [r4, #8]
   166a0:	440b      	add	r3, r1
   166a2:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   166a4:	4621      	mov	r1, r4
   166a6:	6a28      	ldr	r0, [r5, #32]
   166a8:	f7ff fe06 	bl	162b8 <print_string_ptr>
   166ac:	2800      	cmp	r0, #0
   166ae:	f43f aeb7 	beq.w	16420 <print_value+0xc>
        update_offset(output_buffer);
   166b2:	4620      	mov	r0, r4
   166b4:	f017 f9ab 	bl	2da0e <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   166b8:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   166ba:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   166bc:	2b00      	cmp	r3, #0
   166be:	bf14      	ite	ne
   166c0:	f04f 0802 	movne.w	r8, #2
   166c4:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   166c8:	4641      	mov	r1, r8
   166ca:	f017 f9c9 	bl	2da60 <ensure>
        if (output_pointer == NULL)
   166ce:	2800      	cmp	r0, #0
   166d0:	f43f aea6 	beq.w	16420 <print_value+0xc>
        *output_pointer++ = ':';
   166d4:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   166d6:	6963      	ldr	r3, [r4, #20]
   166d8:	b103      	cbz	r3, 166dc <print_value+0x2c8>
            *output_pointer++ = '\t';
   166da:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   166dc:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   166de:	4621      	mov	r1, r4
        output_buffer->offset += length;
   166e0:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   166e2:	4628      	mov	r0, r5
        output_buffer->offset += length;
   166e4:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   166e6:	f7ff fe95 	bl	16414 <print_value>
   166ea:	2800      	cmp	r0, #0
   166ec:	f43f ae98 	beq.w	16420 <print_value+0xc>
        update_offset(output_buffer);
   166f0:	4620      	mov	r0, r4
   166f2:	f017 f98c 	bl	2da0e <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   166f6:	682b      	ldr	r3, [r5, #0]
   166f8:	6962      	ldr	r2, [r4, #20]
   166fa:	3b00      	subs	r3, #0
   166fc:	bf18      	it	ne
   166fe:	2301      	movne	r3, #1
   16700:	2a00      	cmp	r2, #0
   16702:	bf0c      	ite	eq
   16704:	4698      	moveq	r8, r3
   16706:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   1670a:	4620      	mov	r0, r4
   1670c:	f108 0101 	add.w	r1, r8, #1
   16710:	f017 f9a6 	bl	2da60 <ensure>
        if (output_pointer == NULL)
   16714:	2800      	cmp	r0, #0
   16716:	f43f ae83 	beq.w	16420 <print_value+0xc>
        if (current_item->next)
   1671a:	682b      	ldr	r3, [r5, #0]
   1671c:	b113      	cbz	r3, 16724 <print_value+0x310>
            *output_pointer++ = ',';
   1671e:	232c      	movs	r3, #44	; 0x2c
   16720:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   16724:	6963      	ldr	r3, [r4, #20]
   16726:	b113      	cbz	r3, 1672e <print_value+0x31a>
            *output_pointer++ = '\n';
   16728:	230a      	movs	r3, #10
   1672a:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   1672e:	2300      	movs	r3, #0
   16730:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   16732:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   16734:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   16736:	4443      	add	r3, r8
   16738:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   1673a:	e78e      	b.n	1665a <print_value+0x246>
                *output_pointer++ = '\t';
   1673c:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   16740:	e7a9      	b.n	16696 <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   16742:	2102      	movs	r1, #2
   16744:	e78f      	b.n	16666 <print_value+0x252>
            *output_pointer++ = '\t';
   16746:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   1674a:	68e2      	ldr	r2, [r4, #12]
   1674c:	1a19      	subs	r1, r3, r0
   1674e:	3a01      	subs	r2, #1
   16750:	4291      	cmp	r1, r2
   16752:	d3f8      	bcc.n	16746 <print_value+0x332>
   16754:	e791      	b.n	1667a <print_value+0x266>
   16756:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   16758:	2509      	movs	r5, #9
   1675a:	e7f6      	b.n	1674a <print_value+0x336>
   1675c:	00031128 	.word	0x00031128
   16760:	0003113f 	.word	0x0003113f
   16764:	00031145 	.word	0x00031145
   16768:	0003112d 	.word	0x0003112d
   1676c:	00031134 	.word	0x00031134
   16770:	00031138 	.word	0x00031138

00016774 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   16774:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   16776:	4605      	mov	r5, r0
   16778:	b180      	cbz	r0, 1679c <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   1677a:	f010 f833 	bl	267e4 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   1677e:	4b08      	ldr	r3, [pc, #32]	; (167a0 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   16780:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   16782:	4610      	mov	r0, r2
   16784:	681b      	ldr	r3, [r3, #0]
   16786:	9201      	str	r2, [sp, #4]
   16788:	4798      	blx	r3
    if (copy == NULL)
   1678a:	4604      	mov	r4, r0
   1678c:	b118      	cbz	r0, 16796 <cJSON_strdup.isra.0.constprop.0+0x22>
   1678e:	4629      	mov	r1, r5
   16790:	9a01      	ldr	r2, [sp, #4]
   16792:	f7f6 f9db 	bl	cb4c <memcpy>
}
   16796:	4620      	mov	r0, r4
   16798:	b003      	add	sp, #12
   1679a:	bd30      	pop	{r4, r5, pc}
        return NULL;
   1679c:	4604      	mov	r4, r0
   1679e:	e7fa      	b.n	16796 <cJSON_strdup.isra.0.constprop.0+0x22>
   167a0:	2002048c 	.word	0x2002048c

000167a4 <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   167a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167a6:	460d      	mov	r5, r1
   167a8:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   167aa:	4607      	mov	r7, r0
   167ac:	b1f0      	cbz	r0, 167ec <add_item_to_object.constprop.0+0x48>
   167ae:	b1e9      	cbz	r1, 167ec <add_item_to_object.constprop.0+0x48>
   167b0:	b1e2      	cbz	r2, 167ec <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   167b2:	b193      	cbz	r3, 167da <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   167b4:	68d6      	ldr	r6, [r2, #12]
   167b6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   167ba:	68e3      	ldr	r3, [r4, #12]
   167bc:	059b      	lsls	r3, r3, #22
   167be:	d404      	bmi.n	167ca <add_item_to_object.constprop.0+0x26>
   167c0:	6a20      	ldr	r0, [r4, #32]
   167c2:	b110      	cbz	r0, 167ca <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   167c4:	4b0a      	ldr	r3, [pc, #40]	; (167f0 <add_item_to_object.constprop.0+0x4c>)
   167c6:	685b      	ldr	r3, [r3, #4]
   167c8:	4798      	blx	r3
    }

    item->string = new_key;
    item->type = new_type;

    return add_item_to_array(object, item);
   167ca:	4621      	mov	r1, r4
   167cc:	4638      	mov	r0, r7
    item->string = new_key;
   167ce:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   167d0:	60e6      	str	r6, [r4, #12]
}
   167d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   167d6:	f017 b927 	b.w	2da28 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   167da:	4608      	mov	r0, r1
   167dc:	f7ff ffca 	bl	16774 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   167e0:	4605      	mov	r5, r0
   167e2:	b118      	cbz	r0, 167ec <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   167e4:	68e6      	ldr	r6, [r4, #12]
   167e6:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   167ea:	e7e6      	b.n	167ba <add_item_to_object.constprop.0+0x16>
}
   167ec:	2000      	movs	r0, #0
   167ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   167f0:	2002048c 	.word	0x2002048c

000167f4 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   167f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   167f6:	4d24      	ldr	r5, [pc, #144]	; (16888 <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   167f8:	b08b      	sub	sp, #44	; 0x2c
   167fa:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   167fc:	2224      	movs	r2, #36	; 0x24
   167fe:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   16800:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   16802:	a801      	add	r0, sp, #4
   16804:	f00f fbde 	bl	25fc4 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   16808:	682b      	ldr	r3, [r5, #0]
   1680a:	f44f 7080 	mov.w	r0, #256	; 0x100
   1680e:	4798      	blx	r3
    buffer->length = default_buffer_size;
   16810:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   16814:	4603      	mov	r3, r0
    buffer->format = format;
   16816:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   16818:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1681a:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   1681c:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   1681e:	462f      	mov	r7, r5
   16820:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   16824:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   16828:	b17b      	cbz	r3, 1684a <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   1682a:	4620      	mov	r0, r4
   1682c:	a901      	add	r1, sp, #4
   1682e:	f7ff fdf1 	bl	16414 <print_value>
   16832:	b150      	cbz	r0, 1684a <print.constprop.0+0x56>
    update_offset(buffer);
   16834:	a801      	add	r0, sp, #4
   16836:	f017 f8ea 	bl	2da0e <update_offset>
    if (hooks->reallocate != NULL)
   1683a:	68ae      	ldr	r6, [r5, #8]
   1683c:	9903      	ldr	r1, [sp, #12]
   1683e:	b15e      	cbz	r6, 16858 <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   16840:	9801      	ldr	r0, [sp, #4]
   16842:	3101      	adds	r1, #1
   16844:	47b0      	blx	r6
        if (printed == NULL) {
   16846:	4604      	mov	r4, r0
   16848:	b9d0      	cbnz	r0, 16880 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   1684a:	9c01      	ldr	r4, [sp, #4]
   1684c:	b1c4      	cbz	r4, 16880 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   1684e:	4620      	mov	r0, r4
   16850:	687b      	ldr	r3, [r7, #4]
   16852:	4798      	blx	r3
    return NULL;
   16854:	2400      	movs	r4, #0
   16856:	e013      	b.n	16880 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   16858:	682b      	ldr	r3, [r5, #0]
   1685a:	1c48      	adds	r0, r1, #1
   1685c:	4798      	blx	r3
        if (printed == NULL)
   1685e:	4604      	mov	r4, r0
   16860:	2800      	cmp	r0, #0
   16862:	d0f2      	beq.n	1684a <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   16864:	9a03      	ldr	r2, [sp, #12]
   16866:	9b02      	ldr	r3, [sp, #8]
   16868:	3201      	adds	r2, #1
   1686a:	429a      	cmp	r2, r3
   1686c:	bf28      	it	cs
   1686e:	461a      	movcs	r2, r3
   16870:	9901      	ldr	r1, [sp, #4]
   16872:	f7f6 f96b 	bl	cb4c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   16876:	9b03      	ldr	r3, [sp, #12]
   16878:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   1687a:	686b      	ldr	r3, [r5, #4]
   1687c:	9801      	ldr	r0, [sp, #4]
   1687e:	4798      	blx	r3
}
   16880:	4620      	mov	r0, r4
   16882:	b00b      	add	sp, #44	; 0x2c
   16884:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16886:	bf00      	nop
   16888:	2002048c 	.word	0x2002048c

0001688c <cJSON_Delete>:
{
   1688c:	b570      	push	{r4, r5, r6, lr}
   1688e:	4604      	mov	r4, r0
   16890:	4d0f      	ldr	r5, [pc, #60]	; (168d0 <cJSON_Delete+0x44>)
    while (item != NULL)
   16892:	b904      	cbnz	r4, 16896 <cJSON_Delete+0xa>
}
   16894:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   16896:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   16898:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   1689a:	05d9      	lsls	r1, r3, #23
   1689c:	d403      	bmi.n	168a6 <cJSON_Delete+0x1a>
   1689e:	68a0      	ldr	r0, [r4, #8]
   168a0:	b968      	cbnz	r0, 168be <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   168a2:	6920      	ldr	r0, [r4, #16]
   168a4:	b988      	cbnz	r0, 168ca <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   168a6:	68e3      	ldr	r3, [r4, #12]
   168a8:	059b      	lsls	r3, r3, #22
   168aa:	d403      	bmi.n	168b4 <cJSON_Delete+0x28>
   168ac:	6a20      	ldr	r0, [r4, #32]
   168ae:	b108      	cbz	r0, 168b4 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   168b0:	686b      	ldr	r3, [r5, #4]
   168b2:	4798      	blx	r3
        global_hooks.deallocate(item);
   168b4:	4620      	mov	r0, r4
   168b6:	686b      	ldr	r3, [r5, #4]
   168b8:	4798      	blx	r3
        item = next;
   168ba:	4634      	mov	r4, r6
   168bc:	e7e9      	b.n	16892 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   168be:	f7ff ffe5 	bl	1688c <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   168c2:	68e3      	ldr	r3, [r4, #12]
   168c4:	05da      	lsls	r2, r3, #23
   168c6:	d5ec      	bpl.n	168a2 <cJSON_Delete+0x16>
   168c8:	e7ed      	b.n	168a6 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   168ca:	686b      	ldr	r3, [r5, #4]
   168cc:	4798      	blx	r3
   168ce:	e7ea      	b.n	168a6 <cJSON_Delete+0x1a>
   168d0:	2002048c 	.word	0x2002048c

000168d4 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   168d4:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   168d6:	4b0a      	ldr	r3, [pc, #40]	; (16900 <cJSON_CreateString+0x2c>)
{
   168d8:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   168da:	6818      	ldr	r0, [r3, #0]
   168dc:	f017 f8b4 	bl	2da48 <cJSON_New_Item.isra.0>
    if(item)
   168e0:	4604      	mov	r4, r0
   168e2:	b158      	cbz	r0, 168fc <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   168e4:	2310      	movs	r3, #16
   168e6:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   168e8:	4628      	mov	r0, r5
   168ea:	f7ff ff43 	bl	16774 <cJSON_strdup.isra.0.constprop.0>
   168ee:	4605      	mov	r5, r0
   168f0:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   168f2:	b918      	cbnz	r0, 168fc <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   168f4:	4620      	mov	r0, r4
   168f6:	f7ff ffc9 	bl	1688c <cJSON_Delete>
            return NULL;
   168fa:	462c      	mov	r4, r5
        }
    }

    return item;
}
   168fc:	4620      	mov	r0, r4
   168fe:	bd38      	pop	{r3, r4, r5, pc}
   16900:	2002048c 	.word	0x2002048c

00016904 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   16904:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   16906:	4b04      	ldr	r3, [pc, #16]	; (16918 <cJSON_CreateObject+0x14>)
   16908:	6818      	ldr	r0, [r3, #0]
   1690a:	f017 f89d 	bl	2da48 <cJSON_New_Item.isra.0>
    if (item)
   1690e:	b108      	cbz	r0, 16914 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   16910:	2340      	movs	r3, #64	; 0x40
   16912:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   16914:	bd08      	pop	{r3, pc}
   16916:	bf00      	nop
   16918:	2002048c 	.word	0x2002048c

0001691c <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   1691c:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   1691e:	4d1c      	ldr	r5, [pc, #112]	; (16990 <_bsdlib_init+0x74>)
   16920:	4c1c      	ldr	r4, [pc, #112]	; (16994 <_bsdlib_init+0x78>)
   16922:	782b      	ldrb	r3, [r5, #0]
{
   16924:	b085      	sub	sp, #20
	if (!first_time_init) {
   16926:	b933      	cbnz	r3, 16936 <_bsdlib_init+0x1a>
	list->tail = NULL;
   16928:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1692c:	481a      	ldr	r0, [pc, #104]	; (16998 <_bsdlib_init+0x7c>)
   1692e:	f017 fe0d 	bl	2e54c <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   16932:	2301      	movs	r3, #1
   16934:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   16936:	2200      	movs	r2, #0
   16938:	202a      	movs	r0, #42	; 0x2a
   1693a:	4611      	mov	r1, r2
   1693c:	f7fd ff04 	bl	14748 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   16940:	4a16      	ldr	r2, [pc, #88]	; (1699c <_bsdlib_init+0x80>)
   16942:	ab01      	add	r3, sp, #4
   16944:	ca07      	ldmia	r2, {r0, r1, r2}
   16946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   1694a:	4618      	mov	r0, r3
   1694c:	f009 f9c4 	bl	1fcd8 <bsd_init>
   16950:	4b13      	ldr	r3, [pc, #76]	; (169a0 <_bsdlib_init+0x84>)
   16952:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   16954:	f04f 32ff 	mov.w	r2, #4294967295
   16958:	f04f 33ff 	mov.w	r3, #4294967295
   1695c:	480e      	ldr	r0, [pc, #56]	; (16998 <_bsdlib_init+0x7c>)
   1695e:	f00c f91d 	bl	22b9c <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   16962:	6820      	ldr	r0, [r4, #0]
   16964:	b170      	cbz	r0, 16984 <_bsdlib_init+0x68>
	return node->next;
   16966:	6804      	ldr	r4, [r0, #0]
   16968:	2c00      	cmp	r4, #0
   1696a:	bf38      	it	cc
   1696c:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   1696e:	3004      	adds	r0, #4
   16970:	f00d fd8e 	bl	24490 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   16974:	b134      	cbz	r4, 16984 <_bsdlib_init+0x68>
   16976:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16978:	4620      	mov	r0, r4
   1697a:	2b00      	cmp	r3, #0
   1697c:	bf38      	it	cc
   1697e:	2300      	movcc	r3, #0
   16980:	461c      	mov	r4, r3
   16982:	e7f4      	b.n	1696e <_bsdlib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   16984:	4804      	ldr	r0, [pc, #16]	; (16998 <_bsdlib_init+0x7c>)
   16986:	f00c fa03 	bl	22d90 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   1698a:	2000      	movs	r0, #0
   1698c:	b005      	add	sp, #20
   1698e:	bd30      	pop	{r4, r5, pc}
   16990:	20024770 	.word	0x20024770
   16994:	20021630 	.word	0x20021630
   16998:	20021638 	.word	0x20021638
   1699c:	0002eca0 	.word	0x0002eca0
   169a0:	2002162c 	.word	0x2002162c

000169a4 <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   169a4:	b530      	push	{r4, r5, lr}
   169a6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   169a8:	2201      	movs	r2, #1
   169aa:	2100      	movs	r1, #0
   169ac:	a802      	add	r0, sp, #8
   169ae:	f017 fe3a 	bl	2e626 <z_impl_k_sem_init>
   169b2:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   169b4:	f04f 33ff 	mov.w	r3, #4294967295
   169b8:	f04f 32ff 	mov.w	r2, #4294967295
   169bc:	481c      	ldr	r0, [pc, #112]	; (16a30 <bsdlib_shutdown_wait+0x8c>)
   169be:	f00c f8ed 	bl	22b9c <z_impl_k_mutex_lock>
	parent->next = child;
   169c2:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   169c4:	4c1b      	ldr	r4, [pc, #108]	; (16a34 <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   169c6:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   169c8:	6863      	ldr	r3, [r4, #4]
   169ca:	bb2b      	cbnz	r3, 16a18 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   169cc:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   169d0:	4817      	ldr	r0, [pc, #92]	; (16a30 <bsdlib_shutdown_wait+0x8c>)
   169d2:	f00c f9dd 	bl	22d90 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   169d6:	f04f 32ff 	mov.w	r2, #4294967295
   169da:	f04f 33ff 	mov.w	r3, #4294967295
   169de:	a802      	add	r0, sp, #8
   169e0:	f00d fd9a 	bl	24518 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   169e4:	f04f 32ff 	mov.w	r2, #4294967295
   169e8:	f04f 33ff 	mov.w	r3, #4294967295
   169ec:	4810      	ldr	r0, [pc, #64]	; (16a30 <bsdlib_shutdown_wait+0x8c>)
   169ee:	f00c f8d5 	bl	22b9c <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   169f2:	2200      	movs	r2, #0
   169f4:	6823      	ldr	r3, [r4, #0]
   169f6:	b153      	cbz	r3, 16a0e <bsdlib_shutdown_wait+0x6a>
   169f8:	42ab      	cmp	r3, r5
   169fa:	d116      	bne.n	16a2a <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   169fc:	9901      	ldr	r1, [sp, #4]
   169fe:	b972      	cbnz	r2, 16a1e <bsdlib_shutdown_wait+0x7a>
   16a00:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   16a02:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   16a04:	429a      	cmp	r2, r3
   16a06:	d100      	bne.n	16a0a <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   16a08:	6061      	str	r1, [r4, #4]
	parent->next = child;
   16a0a:	2300      	movs	r3, #0
   16a0c:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   16a0e:	4808      	ldr	r0, [pc, #32]	; (16a30 <bsdlib_shutdown_wait+0x8c>)
   16a10:	f00c f9be 	bl	22d90 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   16a14:	b009      	add	sp, #36	; 0x24
   16a16:	bd30      	pop	{r4, r5, pc}
   16a18:	601d      	str	r5, [r3, #0]
	list->tail = node;
   16a1a:	6065      	str	r5, [r4, #4]
}
   16a1c:	e7d8      	b.n	169d0 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   16a1e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   16a20:	6861      	ldr	r1, [r4, #4]
   16a22:	4299      	cmp	r1, r3
	list->tail = node;
   16a24:	bf08      	it	eq
   16a26:	6062      	streq	r2, [r4, #4]
}
   16a28:	e7ef      	b.n	16a0a <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16a2a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16a2c:	681b      	ldr	r3, [r3, #0]
   16a2e:	e7e2      	b.n	169f6 <bsdlib_shutdown_wait+0x52>
   16a30:	20021638 	.word	0x20021638
   16a34:	20021630 	.word	0x20021630

00016a38 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   16a38:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   16a3a:	4c0d      	ldr	r4, [pc, #52]	; (16a70 <thread_monitor_entry_get+0x38>)
{
   16a3c:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   16a3e:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   16a40:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   16a42:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   16a44:	4b0b      	ldr	r3, [pc, #44]	; (16a74 <thread_monitor_entry_get+0x3c>)
   16a46:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   16a48:	6801      	ldr	r1, [r0, #0]
   16a4a:	4291      	cmp	r1, r2
   16a4c:	d00e      	beq.n	16a6c <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   16a4e:	b151      	cbz	r1, 16a66 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   16a50:	6841      	ldr	r1, [r0, #4]
   16a52:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   16a54:	42b1      	cmp	r1, r6
   16a56:	bfc4      	itt	gt
   16a58:	4604      	movgt	r4, r0
   16a5a:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   16a5c:	3d01      	subs	r5, #1
   16a5e:	f100 0008 	add.w	r0, r0, #8
   16a62:	d1f1      	bne.n	16a48 <thread_monitor_entry_get+0x10>
   16a64:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   16a66:	3b01      	subs	r3, #1
	new_entry->id = id;
   16a68:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   16a6a:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   16a6c:	bd70      	pop	{r4, r5, r6, pc}
   16a6e:	bf00      	nop
   16a70:	20021658 	.word	0x20021658
   16a74:	2002164c 	.word	0x2002164c

00016a78 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   16a78:	4668      	mov	r0, sp
   16a7a:	f020 0107 	bic.w	r1, r0, #7
   16a7e:	468d      	mov	sp, r1
   16a80:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   16a82:	4b0f      	ldr	r3, [pc, #60]	; (16ac0 <rpc_proxy_irq_handler+0x48>)
   16a84:	e8d3 2fef 	ldaex	r2, [r3]
   16a88:	3201      	adds	r2, #1
   16a8a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   16a8e:	2900      	cmp	r1, #0
   16a90:	d1f8      	bne.n	16a84 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   16a92:	f003 fd83 	bl	1a59c <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   16a96:	4b0b      	ldr	r3, [pc, #44]	; (16ac4 <rpc_proxy_irq_handler+0x4c>)
   16a98:	681c      	ldr	r4, [r3, #0]
   16a9a:	2c00      	cmp	r4, #0
   16a9c:	bf38      	it	cc
   16a9e:	2400      	movcc	r4, #0
   16aa0:	b12c      	cbz	r4, 16aae <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   16aa2:	1d20      	adds	r0, r4, #4
   16aa4:	f00d fcf4 	bl	24490 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16aa8:	6824      	ldr	r4, [r4, #0]
   16aaa:	2c00      	cmp	r4, #0
   16aac:	d1f8      	bne.n	16aa0 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   16aae:	f7fd fe7d 	bl	147ac <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   16ab2:	f7fe fa23 	bl	14efc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   16ab6:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   16aba:	4685      	mov	sp, r0
   16abc:	4770      	bx	lr
   16abe:	bf00      	nop
   16ac0:	2002164c 	.word	0x2002164c
   16ac4:	20021650 	.word	0x20021650

00016ac8 <bsd_os_timedwait>:
{
   16ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16acc:	460c      	mov	r4, r1
   16ace:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   16ad0:	f017 fe2e 	bl	2e730 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   16ad4:	6823      	ldr	r3, [r4, #0]
   16ad6:	4680      	mov	r8, r0
   16ad8:	2b00      	cmp	r3, #0
   16ada:	468a      	mov	sl, r1
   16adc:	d103      	bne.n	16ae6 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   16ade:	f00d fb53 	bl	24188 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   16ae2:	203c      	movs	r0, #60	; 0x3c
   16ae4:	e091      	b.n	16c0a <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   16ae6:	bfbc      	itt	lt
   16ae8:	f04f 33ff 	movlt.w	r3, #4294967295
   16aec:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16aee:	2201      	movs	r2, #1
   16af0:	2100      	movs	r1, #0
   16af2:	a802      	add	r0, sp, #8
   16af4:	f017 fd97 	bl	2e626 <z_impl_k_sem_init>
   16af8:	ad01      	add	r5, sp, #4
   16afa:	f04f 0320 	mov.w	r3, #32
   16afe:	f3ef 8b11 	mrs	fp, BASEPRI
   16b02:	f383 8811 	msr	BASEPRI, r3
   16b06:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   16b0a:	f00d fcbb 	bl	24484 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   16b0e:	f7ff ff93 	bl	16a38 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   16b12:	4947      	ldr	r1, [pc, #284]	; (16c30 <bsd_os_timedwait+0x168>)
   16b14:	6843      	ldr	r3, [r0, #4]
   16b16:	680a      	ldr	r2, [r1, #0]
   16b18:	4689      	mov	r9, r1
   16b1a:	4293      	cmp	r3, r2
   16b1c:	f04f 0300 	mov.w	r3, #0
   16b20:	d108      	bne.n	16b34 <bsd_os_timedwait+0x6c>
	parent->next = child;
   16b22:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   16b24:	4b43      	ldr	r3, [pc, #268]	; (16c34 <bsd_os_timedwait+0x16c>)
   16b26:	685a      	ldr	r2, [r3, #4]
   16b28:	2a00      	cmp	r2, #0
   16b2a:	d171      	bne.n	16c10 <bsd_os_timedwait+0x148>
	list->head = node;
   16b2c:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   16b30:	2301      	movs	r3, #1
}
   16b32:	e000      	b.n	16b36 <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   16b34:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   16b36:	f38b 8811 	msr	BASEPRI, fp
   16b3a:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   16b3e:	2b00      	cmp	r3, #0
   16b40:	d062      	beq.n	16c08 <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   16b42:	6823      	ldr	r3, [r4, #0]
   16b44:	1c5a      	adds	r2, r3, #1
   16b46:	d066      	beq.n	16c16 <bsd_os_timedwait+0x14e>
   16b48:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   16b4c:	f240 30e7 	movw	r0, #999	; 0x3e7
   16b50:	2100      	movs	r1, #0
   16b52:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   16b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16b5a:	2300      	movs	r3, #0
   16b5c:	fbce 010c 	smlal	r0, r1, lr, ip
   16b60:	f7f5 fe7a 	bl	c858 <__aeabi_uldivmod>
   16b64:	4602      	mov	r2, r0
   16b66:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   16b68:	a802      	add	r0, sp, #8
   16b6a:	f00d fcd5 	bl	24518 <z_impl_k_sem_take>
	__asm__ volatile(
   16b6e:	f04f 0320 	mov.w	r3, #32
   16b72:	f3ef 8b11 	mrs	fp, BASEPRI
   16b76:	f383 8811 	msr	BASEPRI, r3
   16b7a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16b7e:	2000      	movs	r0, #0
   16b80:	4b2c      	ldr	r3, [pc, #176]	; (16c34 <bsd_os_timedwait+0x16c>)
   16b82:	681a      	ldr	r2, [r3, #0]
   16b84:	b15a      	cbz	r2, 16b9e <bsd_os_timedwait+0xd6>
   16b86:	42aa      	cmp	r2, r5
   16b88:	d14f      	bne.n	16c2a <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   16b8a:	9d01      	ldr	r5, [sp, #4]
   16b8c:	2800      	cmp	r0, #0
   16b8e:	d146      	bne.n	16c1e <bsd_os_timedwait+0x156>
   16b90:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   16b92:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   16b94:	4291      	cmp	r1, r2
   16b96:	d100      	bne.n	16b9a <bsd_os_timedwait+0xd2>
	list->tail = node;
   16b98:	605d      	str	r5, [r3, #4]
	parent->next = child;
   16b9a:	2300      	movs	r3, #0
   16b9c:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   16b9e:	f00d fc71 	bl	24484 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   16ba2:	f7ff ff49 	bl	16a38 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   16ba6:	f8d9 3000 	ldr.w	r3, [r9]
   16baa:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   16bac:	f38b 8811 	msr	BASEPRI, fp
   16bb0:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   16bb4:	6825      	ldr	r5, [r4, #0]
   16bb6:	1c6b      	adds	r3, r5, #1
   16bb8:	d026      	beq.n	16c08 <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   16bba:	f017 fdb9 	bl	2e730 <z_impl_k_uptime_ticks>
   16bbe:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   16bc2:	468e      	mov	lr, r1
   16bc4:	fba8 890c 	umull	r8, r9, r8, ip
   16bc8:	fba0 010c 	umull	r0, r1, r0, ip
   16bcc:	fb0c 990a 	mla	r9, ip, sl, r9
   16bd0:	fb0c 110e 	mla	r1, ip, lr, r1
   16bd4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   16bd8:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   16bdc:	1952      	adds	r2, r2, r5
   16bde:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   16be2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   16be6:	0bc5      	lsrs	r5, r0, #15
   16be8:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   16bec:	1b56      	subs	r6, r2, r5
   16bee:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   16bf2:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   16bf6:	2e00      	cmp	r6, #0
   16bf8:	f177 0300 	sbcs.w	r3, r7, #0
   16bfc:	bfb8      	it	lt
   16bfe:	2600      	movlt	r6, #0
   16c00:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   16c02:	2e00      	cmp	r6, #0
   16c04:	f43f af6d 	beq.w	16ae2 <bsd_os_timedwait+0x1a>
	return 0;
   16c08:	2000      	movs	r0, #0
}
   16c0a:	b009      	add	sp, #36	; 0x24
   16c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c10:	6015      	str	r5, [r2, #0]
	list->tail = node;
   16c12:	605d      	str	r5, [r3, #4]
   16c14:	e78c      	b.n	16b30 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   16c16:	f04f 32ff 	mov.w	r2, #4294967295
   16c1a:	4613      	mov	r3, r2
   16c1c:	e7a4      	b.n	16b68 <bsd_os_timedwait+0xa0>
	parent->next = child;
   16c1e:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   16c20:	6859      	ldr	r1, [r3, #4]
   16c22:	4291      	cmp	r1, r2
	list->tail = node;
   16c24:	bf08      	it	eq
   16c26:	6058      	streq	r0, [r3, #4]
}
   16c28:	e7b7      	b.n	16b9a <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16c2a:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16c2c:	6812      	ldr	r2, [r2, #0]
   16c2e:	e7a9      	b.n	16b84 <bsd_os_timedwait+0xbc>
   16c30:	2002164c 	.word	0x2002164c
   16c34:	20021650 	.word	0x20021650

00016c38 <bsd_os_errno_set>:
	switch (err_code) {
   16c38:	283c      	cmp	r0, #60	; 0x3c
{
   16c3a:	b510      	push	{r4, lr}
   16c3c:	4604      	mov	r4, r0
	switch (err_code) {
   16c3e:	f300 809f 	bgt.w	16d80 <bsd_os_errno_set+0x148>
   16c42:	2800      	cmp	r0, #0
   16c44:	dc1e      	bgt.n	16c84 <bsd_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   16c46:	f240 134d 	movw	r3, #333	; 0x14d
   16c4a:	4ab9      	ldr	r2, [pc, #740]	; (16f30 <bsd_os_errno_set+0x2f8>)
   16c4c:	49b9      	ldr	r1, [pc, #740]	; (16f34 <bsd_os_errno_set+0x2fc>)
   16c4e:	48ba      	ldr	r0, [pc, #744]	; (16f38 <bsd_os_errno_set+0x300>)
   16c50:	f015 f9d5 	bl	2bffe <printk>
   16c54:	4621      	mov	r1, r4
   16c56:	48b9      	ldr	r0, [pc, #740]	; (16f3c <bsd_os_errno_set+0x304>)
   16c58:	f015 f9d1 	bl	2bffe <printk>
   16c5c:	f240 114d 	movw	r1, #333	; 0x14d
   16c60:	48b3      	ldr	r0, [pc, #716]	; (16f30 <bsd_os_errno_set+0x2f8>)
   16c62:	f015 fbe9 	bl	2c438 <assert_post_action>
   16c66:	4bb6      	ldr	r3, [pc, #728]	; (16f40 <bsd_os_errno_set+0x308>)
   16c68:	4ab6      	ldr	r2, [pc, #728]	; (16f44 <bsd_os_errno_set+0x30c>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   16c6a:	4621      	mov	r1, r4
   16c6c:	1ad2      	subs	r2, r2, r3
   16c6e:	08d2      	lsrs	r2, r2, #3
   16c70:	0192      	lsls	r2, r2, #6
   16c72:	48b5      	ldr	r0, [pc, #724]	; (16f48 <bsd_os_errno_set+0x310>)
   16c74:	f042 0201 	orr.w	r2, r2, #1
   16c78:	f015 fc1d 	bl	2c4b6 <log_1>
		errno = 0xBAADBAAD;
   16c7c:	f016 f80d 	bl	2cc9a <__errno>
   16c80:	4bb2      	ldr	r3, [pc, #712]	; (16f4c <bsd_os_errno_set+0x314>)
   16c82:	e0be      	b.n	16e02 <bsd_os_errno_set+0x1ca>
   16c84:	1e43      	subs	r3, r0, #1
   16c86:	2b3b      	cmp	r3, #59	; 0x3b
   16c88:	d8dd      	bhi.n	16c46 <bsd_os_errno_set+0xe>
   16c8a:	a201      	add	r2, pc, #4	; (adr r2, 16c90 <bsd_os_errno_set+0x58>)
   16c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16c90:	00016dfd 	.word	0x00016dfd
   16c94:	00016e07 	.word	0x00016e07
   16c98:	00016c47 	.word	0x00016c47
   16c9c:	00016c47 	.word	0x00016c47
   16ca0:	00016e0f 	.word	0x00016e0f
   16ca4:	00016c47 	.word	0x00016c47
   16ca8:	00016c47 	.word	0x00016c47
   16cac:	00016e17 	.word	0x00016e17
   16cb0:	00016e1f 	.word	0x00016e1f
   16cb4:	00016c47 	.word	0x00016c47
   16cb8:	00016c47 	.word	0x00016c47
   16cbc:	00016e27 	.word	0x00016e27
   16cc0:	00016e2f 	.word	0x00016e2f
   16cc4:	00016e37 	.word	0x00016e37
   16cc8:	00016c47 	.word	0x00016c47
   16ccc:	00016c47 	.word	0x00016c47
   16cd0:	00016c47 	.word	0x00016c47
   16cd4:	00016c47 	.word	0x00016c47
   16cd8:	00016c47 	.word	0x00016c47
   16cdc:	00016c47 	.word	0x00016c47
   16ce0:	00016c47 	.word	0x00016c47
   16ce4:	00016e3f 	.word	0x00016e3f
   16ce8:	00016c47 	.word	0x00016c47
   16cec:	00016e47 	.word	0x00016e47
   16cf0:	00016c47 	.word	0x00016c47
   16cf4:	00016c47 	.word	0x00016c47
   16cf8:	00016c47 	.word	0x00016c47
   16cfc:	00016c47 	.word	0x00016c47
   16d00:	00016c47 	.word	0x00016c47
   16d04:	00016c47 	.word	0x00016c47
   16d08:	00016c47 	.word	0x00016c47
   16d0c:	00016c47 	.word	0x00016c47
   16d10:	00016c47 	.word	0x00016c47
   16d14:	00016c47 	.word	0x00016c47
   16d18:	00016e4f 	.word	0x00016e4f
   16d1c:	00016c47 	.word	0x00016c47
   16d20:	00016e57 	.word	0x00016e57
   16d24:	00016c47 	.word	0x00016c47
   16d28:	00016c47 	.word	0x00016c47
   16d2c:	00016f1f 	.word	0x00016f1f
   16d30:	00016e5f 	.word	0x00016e5f
   16d34:	00016e67 	.word	0x00016e67
   16d38:	00016e6f 	.word	0x00016e6f
   16d3c:	00016e77 	.word	0x00016e77
   16d40:	00016e7f 	.word	0x00016e7f
   16d44:	00016c47 	.word	0x00016c47
   16d48:	00016e87 	.word	0x00016e87
   16d4c:	00016e8f 	.word	0x00016e8f
   16d50:	00016c47 	.word	0x00016c47
   16d54:	00016e97 	.word	0x00016e97
   16d58:	00016e9f 	.word	0x00016e9f
   16d5c:	00016ea7 	.word	0x00016ea7
   16d60:	00016f27 	.word	0x00016f27
   16d64:	00016eaf 	.word	0x00016eaf
   16d68:	00016c47 	.word	0x00016c47
   16d6c:	00016eb7 	.word	0x00016eb7
   16d70:	00016ebf 	.word	0x00016ebf
   16d74:	00016c47 	.word	0x00016c47
   16d78:	00016c47 	.word	0x00016c47
   16d7c:	00016ec7 	.word	0x00016ec7
	switch (err_code) {
   16d80:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   16d84:	2b18      	cmp	r3, #24
   16d86:	f63f af5e 	bhi.w	16c46 <bsd_os_errno_set+0xe>
   16d8a:	2b18      	cmp	r3, #24
   16d8c:	f63f af5b 	bhi.w	16c46 <bsd_os_errno_set+0xe>
   16d90:	a201      	add	r2, pc, #4	; (adr r2, 16d98 <bsd_os_errno_set+0x160>)
   16d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16d96:	bf00      	nop
   16d98:	00016ecf 	.word	0x00016ecf
   16d9c:	00016c47 	.word	0x00016c47
   16da0:	00016c47 	.word	0x00016c47
   16da4:	00016c47 	.word	0x00016c47
   16da8:	00016c47 	.word	0x00016c47
   16dac:	00016c47 	.word	0x00016c47
   16db0:	00016c47 	.word	0x00016c47
   16db4:	00016ed7 	.word	0x00016ed7
   16db8:	00016c47 	.word	0x00016c47
   16dbc:	00016ee7 	.word	0x00016ee7
   16dc0:	00016edf 	.word	0x00016edf
   16dc4:	00016c47 	.word	0x00016c47
   16dc8:	00016c47 	.word	0x00016c47
   16dcc:	00016c47 	.word	0x00016c47
   16dd0:	00016c47 	.word	0x00016c47
   16dd4:	00016c47 	.word	0x00016c47
   16dd8:	00016c47 	.word	0x00016c47
   16ddc:	00016c47 	.word	0x00016c47
   16de0:	00016c47 	.word	0x00016c47
   16de4:	00016c47 	.word	0x00016c47
   16de8:	00016eef 	.word	0x00016eef
   16dec:	00016ef7 	.word	0x00016ef7
   16df0:	00016f01 	.word	0x00016f01
   16df4:	00016f0b 	.word	0x00016f0b
   16df8:	00016f15 	.word	0x00016f15
		errno = EPERM;
   16dfc:	f015 ff4d 	bl	2cc9a <__errno>
   16e00:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   16e02:	6003      	str	r3, [r0, #0]
}
   16e04:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   16e06:	f015 ff48 	bl	2cc9a <__errno>
   16e0a:	2302      	movs	r3, #2
   16e0c:	e7f9      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EIO;
   16e0e:	f015 ff44 	bl	2cc9a <__errno>
   16e12:	2305      	movs	r3, #5
   16e14:	e7f5      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ENOEXEC;
   16e16:	f015 ff40 	bl	2cc9a <__errno>
   16e1a:	2308      	movs	r3, #8
   16e1c:	e7f1      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EBADF;
   16e1e:	f015 ff3c 	bl	2cc9a <__errno>
   16e22:	2309      	movs	r3, #9
   16e24:	e7ed      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ENOMEM;
   16e26:	f015 ff38 	bl	2cc9a <__errno>
   16e2a:	230c      	movs	r3, #12
   16e2c:	e7e9      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EACCES;
   16e2e:	f015 ff34 	bl	2cc9a <__errno>
   16e32:	230d      	movs	r3, #13
   16e34:	e7e5      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EFAULT;
   16e36:	f015 ff30 	bl	2cc9a <__errno>
   16e3a:	230e      	movs	r3, #14
   16e3c:	e7e1      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EINVAL;
   16e3e:	f015 ff2c 	bl	2cc9a <__errno>
   16e42:	2316      	movs	r3, #22
   16e44:	e7dd      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EMFILE;
   16e46:	f015 ff28 	bl	2cc9a <__errno>
   16e4a:	2318      	movs	r3, #24
   16e4c:	e7d9      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EAGAIN;
   16e4e:	f015 ff24 	bl	2cc9a <__errno>
   16e52:	230b      	movs	r3, #11
   16e54:	e7d5      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EDOM;
   16e56:	f015 ff20 	bl	2cc9a <__errno>
   16e5a:	2321      	movs	r3, #33	; 0x21
   16e5c:	e7d1      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EPROTOTYPE;
   16e5e:	f015 ff1c 	bl	2cc9a <__errno>
   16e62:	236b      	movs	r3, #107	; 0x6b
   16e64:	e7cd      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ENOPROTOOPT;
   16e66:	f015 ff18 	bl	2cc9a <__errno>
   16e6a:	236d      	movs	r3, #109	; 0x6d
   16e6c:	e7c9      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EPROTONOSUPPORT;
   16e6e:	f015 ff14 	bl	2cc9a <__errno>
   16e72:	237b      	movs	r3, #123	; 0x7b
   16e74:	e7c5      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ESOCKTNOSUPPORT;
   16e76:	f015 ff10 	bl	2cc9a <__errno>
   16e7a:	237c      	movs	r3, #124	; 0x7c
   16e7c:	e7c1      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EOPNOTSUPP;
   16e7e:	f015 ff0c 	bl	2cc9a <__errno>
   16e82:	235f      	movs	r3, #95	; 0x5f
   16e84:	e7bd      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EAFNOSUPPORT;
   16e86:	f015 ff08 	bl	2cc9a <__errno>
   16e8a:	236a      	movs	r3, #106	; 0x6a
   16e8c:	e7b9      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EADDRINUSE;
   16e8e:	f015 ff04 	bl	2cc9a <__errno>
   16e92:	2370      	movs	r3, #112	; 0x70
   16e94:	e7b5      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ENETDOWN;
   16e96:	f015 ff00 	bl	2cc9a <__errno>
   16e9a:	2373      	movs	r3, #115	; 0x73
   16e9c:	e7b1      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ENETUNREACH;
   16e9e:	f015 fefc 	bl	2cc9a <__errno>
   16ea2:	2372      	movs	r3, #114	; 0x72
   16ea4:	e7ad      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ENETRESET;
   16ea6:	f015 fef8 	bl	2cc9a <__errno>
   16eaa:	237e      	movs	r3, #126	; 0x7e
   16eac:	e7a9      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ECONNRESET;
   16eae:	f015 fef4 	bl	2cc9a <__errno>
   16eb2:	2368      	movs	r3, #104	; 0x68
   16eb4:	e7a5      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EISCONN;
   16eb6:	f015 fef0 	bl	2cc9a <__errno>
   16eba:	237f      	movs	r3, #127	; 0x7f
   16ebc:	e7a1      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ENOTCONN;
   16ebe:	f015 feec 	bl	2cc9a <__errno>
   16ec2:	2380      	movs	r3, #128	; 0x80
   16ec4:	e79d      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ETIMEDOUT;
   16ec6:	f015 fee8 	bl	2cc9a <__errno>
   16eca:	2374      	movs	r3, #116	; 0x74
   16ecc:	e799      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ENOBUFS;
   16ece:	f015 fee4 	bl	2cc9a <__errno>
   16ed2:	2369      	movs	r3, #105	; 0x69
   16ed4:	e795      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EHOSTDOWN;
   16ed6:	f015 fee0 	bl	2cc9a <__errno>
   16eda:	2375      	movs	r3, #117	; 0x75
   16edc:	e791      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EINPROGRESS;
   16ede:	f015 fedc 	bl	2cc9a <__errno>
   16ee2:	2377      	movs	r3, #119	; 0x77
   16ee4:	e78d      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EALREADY;
   16ee6:	f015 fed8 	bl	2cc9a <__errno>
   16eea:	2378      	movs	r3, #120	; 0x78
   16eec:	e789      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ECANCELED;
   16eee:	f015 fed4 	bl	2cc9a <__errno>
   16ef2:	238c      	movs	r3, #140	; 0x8c
   16ef4:	e785      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ENOKEY;
   16ef6:	f015 fed0 	bl	2cc9a <__errno>
   16efa:	f240 73d1 	movw	r3, #2001	; 0x7d1
   16efe:	e780      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EKEYEXPIRED;
   16f00:	f015 fecb 	bl	2cc9a <__errno>
   16f04:	f240 73d2 	movw	r3, #2002	; 0x7d2
   16f08:	e77b      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EKEYREVOKED;
   16f0a:	f015 fec6 	bl	2cc9a <__errno>
   16f0e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   16f12:	e776      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EKEYREJECTED;
   16f14:	f015 fec1 	bl	2cc9a <__errno>
   16f18:	f240 73d4 	movw	r3, #2004	; 0x7d4
   16f1c:	e771      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = EMSGSIZE;
   16f1e:	f015 febc 	bl	2cc9a <__errno>
   16f22:	237a      	movs	r3, #122	; 0x7a
   16f24:	e76d      	b.n	16e02 <bsd_os_errno_set+0x1ca>
		errno = ECONNABORTED;
   16f26:	f015 feb8 	bl	2cc9a <__errno>
   16f2a:	2371      	movs	r3, #113	; 0x71
   16f2c:	e769      	b.n	16e02 <bsd_os_errno_set+0x1ca>
   16f2e:	bf00      	nop
   16f30:	0003114a 	.word	0x0003114a
   16f34:	00032a36 	.word	0x00032a36
   16f38:	0002ff0d 	.word	0x0002ff0d
   16f3c:	0003116e 	.word	0x0003116e
   16f40:	0002ebc4 	.word	0x0002ebc4
   16f44:	0002ebdc 	.word	0x0002ebdc
   16f48:	00031195 	.word	0x00031195
   16f4c:	baadbaad 	.word	0xbaadbaad

00016f50 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16f54:	4b01      	ldr	r3, [pc, #4]	; (16f5c <bsd_os_application_irq_set+0xc>)
   16f56:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   16f5a:	4770      	bx	lr
   16f5c:	e000e100 	.word	0xe000e100

00016f60 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16f64:	4b01      	ldr	r3, [pc, #4]	; (16f6c <bsd_os_application_irq_clear+0xc>)
   16f66:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   16f6a:	4770      	bx	lr
   16f6c:	e000e100 	.word	0xe000e100

00016f70 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16f70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   16f74:	4b01      	ldr	r3, [pc, #4]	; (16f7c <bsd_os_trace_irq_set+0xc>)
   16f76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   16f7a:	4770      	bx	lr
   16f7c:	e000e100 	.word	0xe000e100

00016f80 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16f80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   16f84:	4b01      	ldr	r3, [pc, #4]	; (16f8c <bsd_os_trace_irq_clear+0xc>)
   16f86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   16f8a:	4770      	bx	lr
   16f8c:	e000e100 	.word	0xe000e100

00016f90 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   16f90:	b508      	push	{r3, lr}
	list->head = NULL;
   16f92:	2300      	movs	r3, #0
   16f94:	4a07      	ldr	r2, [pc, #28]	; (16fb4 <bsd_os_init+0x24>)
	list->tail = NULL;
   16f96:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16f9a:	4a07      	ldr	r2, [pc, #28]	; (16fb8 <bsd_os_init+0x28>)
   16f9c:	e8d2 1fef 	ldaex	r1, [r2]
   16fa0:	e8c2 3fe0 	stlex	r0, r3, [r2]
   16fa4:	2800      	cmp	r0, #0
   16fa6:	d1f9      	bne.n	16f9c <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   16fa8:	f016 fddd 	bl	2db66 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   16fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   16fb0:	f016 bdce 	b.w	2db50 <trace_task_create>
   16fb4:	20021650 	.word	0x20021650
   16fb8:	2002164c 	.word	0x2002164c

00016fbc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   16fbc:	f240 2302 	movw	r3, #514	; 0x202
   16fc0:	4298      	cmp	r0, r3
   16fc2:	f000 8087 	beq.w	170d4 <z_to_nrf_optname+0x118>
   16fc6:	dc07      	bgt.n	16fd8 <z_to_nrf_optname+0x1c>
   16fc8:	2801      	cmp	r0, #1
   16fca:	d040      	beq.n	1704e <z_to_nrf_optname+0x92>
   16fcc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   16fd0:	d034      	beq.n	1703c <z_to_nrf_optname+0x80>
   16fd2:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   16fd6:	4770      	bx	lr
	switch (z_in_level) {
   16fd8:	f240 2303 	movw	r3, #515	; 0x203
   16fdc:	4298      	cmp	r0, r3
   16fde:	d1f8      	bne.n	16fd2 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   16fe0:	3901      	subs	r1, #1
   16fe2:	2913      	cmp	r1, #19
   16fe4:	d8f5      	bhi.n	16fd2 <z_to_nrf_optname+0x16>
   16fe6:	a301      	add	r3, pc, #4	; (adr r3, 16fec <z_to_nrf_optname+0x30>)
   16fe8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   16fec:	000170e3 	.word	0x000170e3
   16ff0:	000170bd 	.word	0x000170bd
   16ff4:	000170c1 	.word	0x000170c1
   16ff8:	0001705f 	.word	0x0001705f
   16ffc:	000170c5 	.word	0x000170c5
   17000:	000170c9 	.word	0x000170c9
   17004:	000170cd 	.word	0x000170cd
   17008:	00016fd3 	.word	0x00016fd3
   1700c:	00016fd3 	.word	0x00016fd3
   17010:	00016fd3 	.word	0x00016fd3
   17014:	00016fd3 	.word	0x00016fd3
   17018:	00016fd3 	.word	0x00016fd3
   1701c:	00016fd3 	.word	0x00016fd3
   17020:	00016fd3 	.word	0x00016fd3
   17024:	00016fd3 	.word	0x00016fd3
   17028:	00016fd3 	.word	0x00016fd3
   1702c:	00016fd3 	.word	0x00016fd3
   17030:	00016fd3 	.word	0x00016fd3
   17034:	00016fd3 	.word	0x00016fd3
   17038:	000170d1 	.word	0x000170d1
		switch (z_in_optname) {
   1703c:	3901      	subs	r1, #1
   1703e:	2906      	cmp	r1, #6
   17040:	d8c7      	bhi.n	16fd2 <z_to_nrf_optname+0x16>
   17042:	e8df f001 	tbb	[pc, r1]
   17046:	3f3b      	.short	0x3f3b
   17048:	4e0c4341 	.word	0x4e0c4341
   1704c:	3d          	.byte	0x3d
   1704d:	00          	.byte	0x00
		switch (z_in_optname) {
   1704e:	2920      	cmp	r1, #32
   17050:	dcbf      	bgt.n	16fd2 <z_to_nrf_optname+0x16>
   17052:	2913      	cmp	r1, #19
   17054:	dc05      	bgt.n	17062 <z_to_nrf_optname+0xa6>
   17056:	2902      	cmp	r1, #2
   17058:	d028      	beq.n	170ac <z_to_nrf_optname+0xf0>
   1705a:	2904      	cmp	r1, #4
   1705c:	d1b9      	bne.n	16fd2 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   1705e:	2304      	movs	r3, #4
   17060:	e040      	b.n	170e4 <z_to_nrf_optname+0x128>
   17062:	3914      	subs	r1, #20
   17064:	290c      	cmp	r1, #12
   17066:	d8b4      	bhi.n	16fd2 <z_to_nrf_optname+0x16>
   17068:	a301      	add	r3, pc, #4	; (adr r3, 17070 <z_to_nrf_optname+0xb4>)
   1706a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1706e:	bf00      	nop
   17070:	000170d1 	.word	0x000170d1
   17074:	000170a5 	.word	0x000170a5
   17078:	00016fd3 	.word	0x00016fd3
   1707c:	00016fd3 	.word	0x00016fd3
   17080:	00016fd3 	.word	0x00016fd3
   17084:	000170a9 	.word	0x000170a9
   17088:	00016fd3 	.word	0x00016fd3
   1708c:	00016fd3 	.word	0x00016fd3
   17090:	00016fd3 	.word	0x00016fd3
   17094:	00016fd3 	.word	0x00016fd3
   17098:	000170b1 	.word	0x000170b1
   1709c:	000170b5 	.word	0x000170b5
   170a0:	000170b9 	.word	0x000170b9
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   170a4:	2315      	movs	r3, #21
   170a6:	e01d      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   170a8:	2319      	movs	r3, #25
   170aa:	e01b      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   170ac:	2328      	movs	r3, #40	; 0x28
   170ae:	e019      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   170b0:	231e      	movs	r3, #30
   170b2:	e017      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   170b4:	231f      	movs	r3, #31
   170b6:	e015      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   170b8:	2320      	movs	r3, #32
   170ba:	e013      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   170bc:	2302      	movs	r3, #2
   170be:	e011      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   170c0:	2303      	movs	r3, #3
   170c2:	e00f      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   170c4:	2305      	movs	r3, #5
   170c6:	e00d      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   170c8:	2306      	movs	r3, #6
   170ca:	e00b      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   170cc:	2307      	movs	r3, #7
   170ce:	e009      	b.n	170e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   170d0:	2314      	movs	r3, #20
   170d2:	e007      	b.n	170e4 <z_to_nrf_optname+0x128>
		switch (z_in_optname) {
   170d4:	2902      	cmp	r1, #2
   170d6:	d0f1      	beq.n	170bc <z_to_nrf_optname+0x100>
   170d8:	2903      	cmp	r1, #3
   170da:	d0f1      	beq.n	170c0 <z_to_nrf_optname+0x104>
   170dc:	2901      	cmp	r1, #1
   170de:	f47f af78 	bne.w	16fd2 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   170e2:	2301      	movs	r3, #1
	int retval = 0;
   170e4:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   170e6:	6013      	str	r3, [r2, #0]
			break;
   170e8:	4770      	bx	lr
   170ea:	bf00      	nop

000170ec <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   170ec:	f240 1303 	movw	r3, #259	; 0x103
{
   170f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   170f4:	4299      	cmp	r1, r3
{
   170f6:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   170f8:	f000 8097 	beq.w	1722a <nrf91_socket_offload_ioctl+0x13e>
   170fc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   17100:	d005      	beq.n	1710e <nrf91_socket_offload_ioctl+0x22>
   17102:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   17106:	d171      	bne.n	171ec <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   17108:	f06f 0411 	mvn.w	r4, #17
   1710c:	e01d      	b.n	1714a <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   1710e:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   17112:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   17116:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   17118:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1711c:	4668      	mov	r0, sp
   1711e:	2240      	movs	r2, #64	; 0x40
   17120:	f00e ff50 	bl	25fc4 <memset>
	for (int i = 0; i < nfds; i++) {
   17124:	466e      	mov	r6, sp
   17126:	4655      	mov	r5, sl
   17128:	4657      	mov	r7, sl
	int retval = 0;
   1712a:	4644      	mov	r4, r8
		tmp[i].events = 0;
   1712c:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   1712e:	4940      	ldr	r1, [pc, #256]	; (17230 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   17130:	45c1      	cmp	r9, r8
   17132:	dc0e      	bgt.n	17152 <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   17134:	2c00      	cmp	r4, #0
   17136:	dc08      	bgt.n	1714a <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   17138:	465a      	mov	r2, fp
   1713a:	4649      	mov	r1, r9
   1713c:	4668      	mov	r0, sp
   1713e:	f009 f8bf 	bl	202c0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   17142:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   17144:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   17146:	4599      	cmp	r9, r3
   17148:	dc28      	bgt.n	1719c <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   1714a:	4620      	mov	r0, r4
   1714c:	b011      	add	sp, #68	; 0x44
   1714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   17152:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   17154:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   17156:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   17158:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   1715a:	da05      	bge.n	17168 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   1715c:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1715e:	f108 0801 	add.w	r8, r8, #1
   17162:	3608      	adds	r6, #8
   17164:	3708      	adds	r7, #8
   17166:	e7e3      	b.n	17130 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   17168:	2286      	movs	r2, #134	; 0x86
   1716a:	f7fa ff21 	bl	11fb0 <z_get_fd_obj>
			if (obj != NULL) {
   1716e:	2300      	movs	r3, #0
   17170:	492f      	ldr	r1, [pc, #188]	; (17230 <nrf91_socket_offload_ioctl+0x144>)
   17172:	b178      	cbz	r0, 17194 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   17174:	3801      	subs	r0, #1
   17176:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   17178:	88b8      	ldrh	r0, [r7, #4]
   1717a:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   1717c:	bf42      	ittt	mi
   1717e:	88b2      	ldrhmi	r2, [r6, #4]
   17180:	f042 0201 	orrmi.w	r2, r2, #1
   17184:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   17186:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   17188:	bf42      	ittt	mi
   1718a:	88b2      	ldrhmi	r2, [r6, #4]
   1718c:	f042 0202 	orrmi.w	r2, r2, #2
   17190:	80b2      	strhmi	r2, [r6, #4]
   17192:	e7e4      	b.n	1715e <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   17194:	2220      	movs	r2, #32
				retval++;
   17196:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   17198:	80fa      	strh	r2, [r7, #6]
				retval++;
   1719a:	e7ed      	b.n	17178 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   1719c:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   171a0:	2a00      	cmp	r2, #0
   171a2:	db20      	blt.n	171e6 <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   171a4:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   171a8:	88d2      	ldrh	r2, [r2, #6]
   171aa:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   171ac:	bf42      	ittt	mi
   171ae:	88e9      	ldrhmi	r1, [r5, #6]
   171b0:	f041 0101 	orrmi.w	r1, r1, #1
   171b4:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   171b6:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   171b8:	bf42      	ittt	mi
   171ba:	88e9      	ldrhmi	r1, [r5, #6]
   171bc:	f041 0104 	orrmi.w	r1, r1, #4
   171c0:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   171c2:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   171c4:	bf42      	ittt	mi
   171c6:	88e9      	ldrhmi	r1, [r5, #6]
   171c8:	f041 0108 	orrmi.w	r1, r1, #8
   171cc:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   171ce:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   171d0:	bf42      	ittt	mi
   171d2:	88e9      	ldrhmi	r1, [r5, #6]
   171d4:	f041 0120 	orrmi.w	r1, r1, #32
   171d8:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   171da:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   171dc:	bf42      	ittt	mi
   171de:	88ea      	ldrhmi	r2, [r5, #6]
   171e0:	f042 0210 	orrmi.w	r2, r2, #16
   171e4:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   171e6:	3301      	adds	r3, #1
   171e8:	3508      	adds	r5, #8
   171ea:	e7ac      	b.n	17146 <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   171ec:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   171ee:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   171f2:	d00b      	beq.n	1720c <nrf91_socket_offload_ioctl+0x120>
   171f4:	2904      	cmp	r1, #4
   171f6:	d111      	bne.n	1721c <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   171f8:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   171fa:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   171fe:	d10d      	bne.n	1721c <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   17200:	2101      	movs	r1, #1
   17202:	1392      	asrs	r2, r2, #14
   17204:	f009 f85e 	bl	202c4 <nrf_fcntl>
   17208:	4604      	mov	r4, r0
		break;
   1720a:	e79e      	b.n	1714a <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1720c:	2200      	movs	r2, #0
   1720e:	2102      	movs	r1, #2
   17210:	f009 f858 	bl	202c4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   17214:	0380      	lsls	r0, r0, #14
   17216:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   1721a:	e796      	b.n	1714a <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   1721c:	f015 fd3d 	bl	2cc9a <__errno>
   17220:	2316      	movs	r3, #22
	return retval;
   17222:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   17226:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   17228:	e78f      	b.n	1714a <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   1722a:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1722e:	e78c      	b.n	1714a <nrf91_socket_offload_ioctl+0x5e>
   17230:	0002ef60 	.word	0x0002ef60

00017234 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   17234:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   17236:	4b03      	ldr	r3, [pc, #12]	; (17244 <nrf91_socket_iface_init+0x10>)
   17238:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1723a:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1723c:	4802      	ldr	r0, [pc, #8]	; (17248 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1723e:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   17240:	f7fc bda2 	b.w	13d88 <socket_offload_dns_register>
   17244:	200216a8 	.word	0x200216a8
   17248:	0002ef58 	.word	0x0002ef58

0001724c <nrf91_socket_offload_accept>:
{
   1724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17250:	b08a      	sub	sp, #40	; 0x28
   17252:	4607      	mov	r7, r0
   17254:	460c      	mov	r4, r1
   17256:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   17258:	f7fa feda 	bl	12010 <z_reserve_fd>
   1725c:	4606      	mov	r6, r0
	if (fd < 0) {
   1725e:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   17260:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   17264:	da05      	bge.n	17272 <nrf91_socket_offload_accept+0x26>
	return -1;
   17266:	f04f 36ff 	mov.w	r6, #4294967295
}
   1726a:	4630      	mov	r0, r6
   1726c:	b00a      	add	sp, #40	; 0x28
   1726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   17272:	b31c      	cbz	r4, 172bc <nrf91_socket_offload_accept+0x70>
   17274:	b32d      	cbz	r5, 172c2 <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   17276:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   17278:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1727a:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1727c:	bf0c      	ite	eq
   1727e:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   17280:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   17282:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   17284:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   17286:	4639      	mov	r1, r7
   17288:	f008 ffb6 	bl	201f8 <nrf_accept>
	if (new_sd < 0) {
   1728c:	f1b0 0800 	subs.w	r8, r0, #0
   17290:	dbe9      	blt.n	17266 <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   17292:	b164      	cbz	r4, 172ae <nrf91_socket_offload_accept+0x62>
   17294:	b15d      	cbz	r5, 172ae <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   17296:	687b      	ldr	r3, [r7, #4]
   17298:	2b02      	cmp	r3, #2
   1729a:	d115      	bne.n	172c8 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   1729c:	2308      	movs	r3, #8
   1729e:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   172a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   172a4:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   172a6:	2301      	movs	r3, #1
   172a8:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   172aa:	9b04      	ldr	r3, [sp, #16]
   172ac:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   172ae:	4630      	mov	r0, r6
   172b0:	4a0c      	ldr	r2, [pc, #48]	; (172e4 <nrf91_socket_offload_accept+0x98>)
   172b2:	f108 0101 	add.w	r1, r8, #1
   172b6:	f7fa fedd 	bl	12074 <z_finalize_fd>
	return fd;
   172ba:	e7d6      	b.n	1726a <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   172bc:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   172be:	4627      	mov	r7, r4
   172c0:	e7e1      	b.n	17286 <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   172c2:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   172c4:	462f      	mov	r7, r5
   172c6:	e7de      	b.n	17286 <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   172c8:	2b0a      	cmp	r3, #10
   172ca:	d106      	bne.n	172da <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   172cc:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   172ce:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   172d0:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   172d2:	a901      	add	r1, sp, #4
   172d4:	f016 fd45 	bl	2dd62 <nrf_to_z_ipv6>
   172d8:	e7e9      	b.n	172ae <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   172da:	4630      	mov	r0, r6
   172dc:	f7fa fed4 	bl	12088 <z_free_fd>
   172e0:	e7c1      	b.n	17266 <nrf91_socket_offload_accept+0x1a>
   172e2:	bf00      	nop
   172e4:	0002ef60 	.word	0x0002ef60

000172e8 <nrf91_socket_offload_sendmsg>:
{
   172e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   172ec:	4607      	mov	r7, r0
   172ee:	4690      	mov	r8, r2
	if (msg == NULL) {
   172f0:	460c      	mov	r4, r1
   172f2:	b319      	cbz	r1, 1733c <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   172f4:	2300      	movs	r3, #0
	ssize_t len = 0;
   172f6:	461a      	mov	r2, r3
   172f8:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   172fa:	4283      	cmp	r3, r0
   172fc:	d128      	bne.n	17350 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   172fe:	2a80      	cmp	r2, #128	; 0x80
   17300:	d857      	bhi.n	173b2 <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   17302:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   17304:	f04f 32ff 	mov.w	r2, #4294967295
   17308:	f04f 33ff 	mov.w	r3, #4294967295
   1730c:	482a      	ldr	r0, [pc, #168]	; (173b8 <nrf91_socket_offload_sendmsg+0xd0>)
   1730e:	f00b fc45 	bl	22b9c <z_impl_k_mutex_lock>
		len = 0;
   17312:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   17314:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 173bc <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   17318:	68e3      	ldr	r3, [r4, #12]
   1731a:	42ab      	cmp	r3, r5
   1731c:	d81f      	bhi.n	1735e <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   1731e:	6863      	ldr	r3, [r4, #4]
   17320:	4632      	mov	r2, r6
   17322:	9301      	str	r3, [sp, #4]
   17324:	6823      	ldr	r3, [r4, #0]
   17326:	4638      	mov	r0, r7
   17328:	9300      	str	r3, [sp, #0]
   1732a:	4924      	ldr	r1, [pc, #144]	; (173bc <nrf91_socket_offload_sendmsg+0xd4>)
   1732c:	4643      	mov	r3, r8
   1732e:	f016 fe74 	bl	2e01a <nrf91_socket_offload_sendto>
   17332:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   17334:	4820      	ldr	r0, [pc, #128]	; (173b8 <nrf91_socket_offload_sendmsg+0xd0>)
   17336:	f00b fd2b 	bl	22d90 <z_impl_k_mutex_unlock>
		return ret;
   1733a:	e005      	b.n	17348 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   1733c:	f015 fcad 	bl	2cc9a <__errno>
   17340:	2316      	movs	r3, #22
		return -1;
   17342:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   17346:	6003      	str	r3, [r0, #0]
}
   17348:	4628      	mov	r0, r5
   1734a:	b002      	add	sp, #8
   1734c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   17350:	68a1      	ldr	r1, [r4, #8]
   17352:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   17356:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   17358:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1735a:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1735c:	e7cd      	b.n	172fa <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1735e:	68a1      	ldr	r1, [r4, #8]
   17360:	eb09 0006 	add.w	r0, r9, r6
   17364:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   17368:	685a      	ldr	r2, [r3, #4]
   1736a:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   1736e:	f7f5 fbed 	bl	cb4c <memcpy>
			len += msg->msg_iov[i].iov_len;
   17372:	68a3      	ldr	r3, [r4, #8]
   17374:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   17378:	4453      	add	r3, sl
   1737a:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1737c:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1737e:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   17380:	e7ca      	b.n	17318 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   17382:	68a1      	ldr	r1, [r4, #8]
   17384:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   17388:	685a      	ldr	r2, [r3, #4]
   1738a:	b162      	cbz	r2, 173a6 <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   1738c:	6863      	ldr	r3, [r4, #4]
   1738e:	4638      	mov	r0, r7
   17390:	9301      	str	r3, [sp, #4]
   17392:	6823      	ldr	r3, [r4, #0]
   17394:	9300      	str	r3, [sp, #0]
   17396:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   1739a:	4643      	mov	r3, r8
   1739c:	f016 fe3d 	bl	2e01a <nrf91_socket_offload_sendto>
		if (ret < 0) {
   173a0:	1e05      	subs	r5, r0, #0
   173a2:	dbd1      	blt.n	17348 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   173a4:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   173a6:	3601      	adds	r6, #1
   173a8:	68e3      	ldr	r3, [r4, #12]
   173aa:	42b3      	cmp	r3, r6
   173ac:	d8e9      	bhi.n	17382 <nrf91_socket_offload_sendmsg+0x9a>
   173ae:	464d      	mov	r5, r9
   173b0:	e7ca      	b.n	17348 <nrf91_socket_offload_sendmsg+0x60>
   173b2:	2600      	movs	r6, #0
	len = 0;
   173b4:	46b1      	mov	r9, r6
   173b6:	e7f7      	b.n	173a8 <nrf91_socket_offload_sendmsg+0xc0>
   173b8:	20020bcc 	.word	0x20020bcc
   173bc:	20024771 	.word	0x20024771

000173c0 <nrf91_socket_create>:
{
   173c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173c2:	4606      	mov	r6, r0
   173c4:	460d      	mov	r5, r1
   173c6:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   173c8:	f7fa fe22 	bl	12010 <z_reserve_fd>
	if (fd < 0) {
   173cc:	1e04      	subs	r4, r0, #0
   173ce:	db0d      	blt.n	173ec <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   173d0:	b2b0      	uxth	r0, r6
   173d2:	f016 fbe3 	bl	2db9c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   173d6:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   173da:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   173dc:	d109      	bne.n	173f2 <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   173de:	f015 fc5c 	bl	2cc9a <__errno>
   173e2:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   173e4:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   173e6:	4620      	mov	r0, r4
   173e8:	f7fa fe4e 	bl	12088 <z_free_fd>
		return -1;
   173ec:	f04f 34ff 	mov.w	r4, #4294967295
   173f0:	e01b      	b.n	1742a <nrf91_socket_create+0x6a>
	switch (socktype) {
   173f2:	2d03      	cmp	r5, #3
   173f4:	d003      	beq.n	173fe <nrf91_socket_create+0x3e>
   173f6:	2d04      	cmp	r5, #4
   173f8:	bf08      	it	eq
   173fa:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   173fe:	4638      	mov	r0, r7
   17400:	f016 fbe8 	bl	2dbd4 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   17404:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   17408:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1740a:	d103      	bne.n	17414 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   1740c:	f015 fc45 	bl	2cc9a <__errno>
   17410:	237b      	movs	r3, #123	; 0x7b
   17412:	e7e7      	b.n	173e4 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   17414:	4629      	mov	r1, r5
   17416:	4630      	mov	r0, r6
   17418:	f008 fe74 	bl	20104 <nrf_socket>
	if (sd < 0) {
   1741c:	1e01      	subs	r1, r0, #0
   1741e:	dbe2      	blt.n	173e6 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   17420:	4620      	mov	r0, r4
   17422:	4a03      	ldr	r2, [pc, #12]	; (17430 <nrf91_socket_create+0x70>)
   17424:	3101      	adds	r1, #1
   17426:	f7fa fe25 	bl	12074 <z_finalize_fd>
}
   1742a:	4620      	mov	r0, r4
   1742c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1742e:	bf00      	nop
   17430:	0002ef60 	.word	0x0002ef60

00017434 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   17434:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   17438:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   1743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   17440:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   17444:	4605      	mov	r5, r0
   17446:	460e      	mov	r6, r1
   17448:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   1744a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1744e:	d15f      	bne.n	17510 <z_impl_gpio_pin_interrupt_configure+0xdc>
   17450:	4937      	ldr	r1, [pc, #220]	; (17530 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   17452:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   17456:	4a37      	ldr	r2, [pc, #220]	; (17534 <z_impl_gpio_pin_interrupt_configure+0x100>)
   17458:	4837      	ldr	r0, [pc, #220]	; (17538 <z_impl_gpio_pin_interrupt_configure+0x104>)
   1745a:	f014 fdd0 	bl	2bffe <printk>
   1745e:	4837      	ldr	r0, [pc, #220]	; (1753c <z_impl_gpio_pin_interrupt_configure+0x108>)
   17460:	f014 fdcd 	bl	2bffe <printk>
   17464:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   17468:	4832      	ldr	r0, [pc, #200]	; (17534 <z_impl_gpio_pin_interrupt_configure+0x100>)
   1746a:	f014 ffe5 	bl	2c438 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1746e:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   17472:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   17476:	d10e      	bne.n	17496 <z_impl_gpio_pin_interrupt_configure+0x62>
   17478:	4931      	ldr	r1, [pc, #196]	; (17540 <z_impl_gpio_pin_interrupt_configure+0x10c>)
   1747a:	f240 13f1 	movw	r3, #497	; 0x1f1
   1747e:	4a2d      	ldr	r2, [pc, #180]	; (17534 <z_impl_gpio_pin_interrupt_configure+0x100>)
   17480:	482d      	ldr	r0, [pc, #180]	; (17538 <z_impl_gpio_pin_interrupt_configure+0x104>)
   17482:	f014 fdbc 	bl	2bffe <printk>
   17486:	482f      	ldr	r0, [pc, #188]	; (17544 <z_impl_gpio_pin_interrupt_configure+0x110>)
   17488:	f014 fdb9 	bl	2bffe <printk>
   1748c:	f240 11f1 	movw	r1, #497	; 0x1f1
   17490:	4828      	ldr	r0, [pc, #160]	; (17534 <z_impl_gpio_pin_interrupt_configure+0x100>)
   17492:	f014 ffd1 	bl	2c438 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   17496:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   1749a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1749e:	d10e      	bne.n	174be <z_impl_gpio_pin_interrupt_configure+0x8a>
   174a0:	4929      	ldr	r1, [pc, #164]	; (17548 <z_impl_gpio_pin_interrupt_configure+0x114>)
   174a2:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   174a6:	4a23      	ldr	r2, [pc, #140]	; (17534 <z_impl_gpio_pin_interrupt_configure+0x100>)
   174a8:	4823      	ldr	r0, [pc, #140]	; (17538 <z_impl_gpio_pin_interrupt_configure+0x104>)
   174aa:	f014 fda8 	bl	2bffe <printk>
   174ae:	4827      	ldr	r0, [pc, #156]	; (1754c <z_impl_gpio_pin_interrupt_configure+0x118>)
   174b0:	f014 fda5 	bl	2bffe <printk>
   174b4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   174b8:	481e      	ldr	r0, [pc, #120]	; (17534 <z_impl_gpio_pin_interrupt_configure+0x100>)
   174ba:	f014 ffbd 	bl	2c438 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   174be:	2701      	movs	r7, #1
   174c0:	f8da 3000 	ldr.w	r3, [sl]
   174c4:	40b7      	lsls	r7, r6
   174c6:	421f      	tst	r7, r3
   174c8:	d10e      	bne.n	174e8 <z_impl_gpio_pin_interrupt_configure+0xb4>
   174ca:	4921      	ldr	r1, [pc, #132]	; (17550 <z_impl_gpio_pin_interrupt_configure+0x11c>)
   174cc:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   174d0:	4a18      	ldr	r2, [pc, #96]	; (17534 <z_impl_gpio_pin_interrupt_configure+0x100>)
   174d2:	4819      	ldr	r0, [pc, #100]	; (17538 <z_impl_gpio_pin_interrupt_configure+0x104>)
   174d4:	f014 fd93 	bl	2bffe <printk>
   174d8:	481e      	ldr	r0, [pc, #120]	; (17554 <z_impl_gpio_pin_interrupt_configure+0x120>)
   174da:	f014 fd90 	bl	2bffe <printk>
   174de:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   174e2:	4814      	ldr	r0, [pc, #80]	; (17534 <z_impl_gpio_pin_interrupt_configure+0x100>)
   174e4:	f014 ffa8 	bl	2c438 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   174e8:	0423      	lsls	r3, r4, #16
   174ea:	d505      	bpl.n	174f8 <z_impl_gpio_pin_interrupt_configure+0xc4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   174ec:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   174f0:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   174f2:	bf18      	it	ne
   174f4:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   174f8:	f8d8 7018 	ldr.w	r7, [r8, #24]
   174fc:	4631      	mov	r1, r6
   174fe:	4628      	mov	r0, r5
   17500:	46bc      	mov	ip, r7
   17502:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   17506:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   1750a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1750e:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   17510:	2b00      	cmp	r3, #0
   17512:	d1ac      	bne.n	1746e <z_impl_gpio_pin_interrupt_configure+0x3a>
   17514:	4910      	ldr	r1, [pc, #64]	; (17558 <z_impl_gpio_pin_interrupt_configure+0x124>)
   17516:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   1751a:	4a06      	ldr	r2, [pc, #24]	; (17534 <z_impl_gpio_pin_interrupt_configure+0x100>)
   1751c:	4806      	ldr	r0, [pc, #24]	; (17538 <z_impl_gpio_pin_interrupt_configure+0x104>)
   1751e:	f014 fd6e 	bl	2bffe <printk>
   17522:	480e      	ldr	r0, [pc, #56]	; (1755c <z_impl_gpio_pin_interrupt_configure+0x128>)
   17524:	f014 fd6b 	bl	2bffe <printk>
   17528:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   1752c:	e79c      	b.n	17468 <z_impl_gpio_pin_interrupt_configure+0x34>
   1752e:	bf00      	nop
   17530:	000311f8 	.word	0x000311f8
   17534:	000311ce 	.word	0x000311ce
   17538:	0002ff0d 	.word	0x0002ff0d
   1753c:	00031239 	.word	0x00031239
   17540:	000312ba 	.word	0x000312ba
   17544:	0003133b 	.word	0x0003133b
   17548:	0003138f 	.word	0x0003138f
   1754c:	000313d9 	.word	0x000313d9
   17550:	0003141e 	.word	0x0003141e
   17554:	0003145c 	.word	0x0003145c
   17558:	00031265 	.word	0x00031265
   1755c:	0003128f 	.word	0x0003128f

00017560 <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
   17560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17564:	2501      	movs	r5, #1
   17566:	6843      	ldr	r3, [r0, #4]
   17568:	408d      	lsls	r5, r1
   1756a:	681b      	ldr	r3, [r3, #0]
{
   1756c:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1756e:	421d      	tst	r5, r3
{
   17570:	460e      	mov	r6, r1
   17572:	4690      	mov	r8, r2
	struct gpio_driver_data *data =
   17574:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17576:	d10e      	bne.n	17596 <gpio_pin_configure+0x36>
   17578:	490d      	ldr	r1, [pc, #52]	; (175b0 <gpio_pin_configure+0x50>)
   1757a:	f44f 7311 	mov.w	r3, #580	; 0x244
   1757e:	4a0d      	ldr	r2, [pc, #52]	; (175b4 <gpio_pin_configure+0x54>)
   17580:	480d      	ldr	r0, [pc, #52]	; (175b8 <gpio_pin_configure+0x58>)
   17582:	f014 fd3c 	bl	2bffe <printk>
   17586:	480d      	ldr	r0, [pc, #52]	; (175bc <gpio_pin_configure+0x5c>)
   17588:	f014 fd39 	bl	2bffe <printk>
   1758c:	f44f 7111 	mov.w	r1, #580	; 0x244
   17590:	4808      	ldr	r0, [pc, #32]	; (175b4 <gpio_pin_configure+0x54>)
   17592:	f014 ff51 	bl	2c438 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   17596:	68a3      	ldr	r3, [r4, #8]
   17598:	4642      	mov	r2, r8
   1759a:	4631      	mov	r1, r6
   1759c:	4620      	mov	r0, r4
   1759e:	681b      	ldr	r3, [r3, #0]
   175a0:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   175a2:	b918      	cbnz	r0, 175ac <gpio_pin_configure+0x4c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   175a4:	683b      	ldr	r3, [r7, #0]
   175a6:	ea23 0505 	bic.w	r5, r3, r5
   175aa:	603d      	str	r5, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
   175ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   175b0:	0003141e 	.word	0x0003141e
   175b4:	000311ce 	.word	0x000311ce
   175b8:	0002ff0d 	.word	0x0002ff0d
   175bc:	0003145c 	.word	0x0003145c

000175c0 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   175c0:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   175c2:	2501      	movs	r5, #1
   175c4:	6843      	ldr	r3, [r0, #4]
   175c6:	408d      	lsls	r5, r1
   175c8:	681b      	ldr	r3, [r3, #0]
{
   175ca:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   175cc:	421d      	tst	r5, r3
{
   175ce:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   175d0:	d10e      	bne.n	175f0 <gpio_pin_set_raw+0x30>
   175d2:	490d      	ldr	r1, [pc, #52]	; (17608 <gpio_pin_set_raw+0x48>)
   175d4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
   175d8:	4a0c      	ldr	r2, [pc, #48]	; (1760c <gpio_pin_set_raw+0x4c>)
   175da:	480d      	ldr	r0, [pc, #52]	; (17610 <gpio_pin_set_raw+0x50>)
   175dc:	f014 fd0f 	bl	2bffe <printk>
   175e0:	480c      	ldr	r0, [pc, #48]	; (17614 <gpio_pin_set_raw+0x54>)
   175e2:	f014 fd0c 	bl	2bffe <printk>
   175e6:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   175ea:	4808      	ldr	r0, [pc, #32]	; (1760c <gpio_pin_set_raw+0x4c>)
   175ec:	f014 ff24 	bl	2c438 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   175f0:	b136      	cbz	r6, 17600 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   175f2:	68a3      	ldr	r3, [r4, #8]
   175f4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   175f6:	4629      	mov	r1, r5
   175f8:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   175fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   175fe:	4718      	bx	r3
   17600:	68a3      	ldr	r3, [r4, #8]
   17602:	691b      	ldr	r3, [r3, #16]
   17604:	e7f7      	b.n	175f6 <gpio_pin_set_raw+0x36>
   17606:	bf00      	nop
   17608:	0003141e 	.word	0x0003141e
   1760c:	000311ce 	.word	0x000311ce
   17610:	0002ff0d 	.word	0x0002ff0d
   17614:	0003145c 	.word	0x0003145c

00017618 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   17618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1761c:	4606      	mov	r6, r0
   1761e:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   17620:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   17622:	f8df 805c 	ldr.w	r8, [pc, #92]	; 17680 <dk_set_leds_state.part.0+0x68>
   17626:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17684 <dk_set_leds_state.part.0+0x6c>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1762a:	fa26 f204 	lsr.w	r2, r6, r4
   1762e:	fa27 f304 	lsr.w	r3, r7, r4
   17632:	4313      	orrs	r3, r2
   17634:	07db      	lsls	r3, r3, #31
   17636:	d518      	bpl.n	1766a <dk_set_leds_state.part.0+0x52>
			int err = gpio_pin_set_raw(led_devs[i],
   17638:	43d2      	mvns	r2, r2
   1763a:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1763e:	7919      	ldrb	r1, [r3, #4]
   17640:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   17644:	f002 0201 	and.w	r2, r2, #1
   17648:	f7ff ffba 	bl	175c0 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   1764c:	4605      	mov	r5, r0
   1764e:	b160      	cbz	r0, 1766a <dk_set_leds_state.part.0+0x52>
   17650:	4908      	ldr	r1, [pc, #32]	; (17674 <dk_set_leds_state.part.0+0x5c>)
   17652:	4b09      	ldr	r3, [pc, #36]	; (17678 <dk_set_leds_state.part.0+0x60>)
				LOG_ERR("Cannot write LED gpio");
   17654:	4809      	ldr	r0, [pc, #36]	; (1767c <dk_set_leds_state.part.0+0x64>)
   17656:	1ac9      	subs	r1, r1, r3
   17658:	08c9      	lsrs	r1, r1, #3
   1765a:	0189      	lsls	r1, r1, #6
   1765c:	f041 0101 	orr.w	r1, r1, #1
   17660:	f014 ff1a 	bl	2c498 <log_0>
			}
		}
	}

	return 0;
}
   17664:	4628      	mov	r0, r5
   17666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1766a:	3401      	adds	r4, #1
   1766c:	2c04      	cmp	r4, #4
   1766e:	d1dc      	bne.n	1762a <dk_set_leds_state.part.0+0x12>
	return 0;
   17670:	2500      	movs	r5, #0
   17672:	e7f7      	b.n	17664 <dk_set_leds_state.part.0+0x4c>
   17674:	0002ebf4 	.word	0x0002ebf4
   17678:	0002ebc4 	.word	0x0002ebc4
   1767c:	0003146e 	.word	0x0003146e
   17680:	0002efb8 	.word	0x0002efb8
   17684:	200216f0 	.word	0x200216f0

00017688 <button_pressed>:
{
   17688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1768a:	f04f 0320 	mov.w	r3, #32
   1768e:	f3ef 8511 	mrs	r5, BASEPRI
   17692:	f383 8811 	msr	BASEPRI, r3
   17696:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1769a:	4830      	ldr	r0, [pc, #192]	; (1775c <button_pressed+0xd4>)
   1769c:	f00d f918 	bl	248d0 <z_spin_lock_valid>
   176a0:	b968      	cbnz	r0, 176be <button_pressed+0x36>
   176a2:	235c      	movs	r3, #92	; 0x5c
   176a4:	4a2e      	ldr	r2, [pc, #184]	; (17760 <button_pressed+0xd8>)
   176a6:	492f      	ldr	r1, [pc, #188]	; (17764 <button_pressed+0xdc>)
   176a8:	482f      	ldr	r0, [pc, #188]	; (17768 <button_pressed+0xe0>)
   176aa:	f014 fca8 	bl	2bffe <printk>
   176ae:	492b      	ldr	r1, [pc, #172]	; (1775c <button_pressed+0xd4>)
   176b0:	482e      	ldr	r0, [pc, #184]	; (1776c <button_pressed+0xe4>)
   176b2:	f014 fca4 	bl	2bffe <printk>
   176b6:	215c      	movs	r1, #92	; 0x5c
   176b8:	4829      	ldr	r0, [pc, #164]	; (17760 <button_pressed+0xd8>)
   176ba:	f014 febd 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   176be:	4827      	ldr	r0, [pc, #156]	; (1775c <button_pressed+0xd4>)
   176c0:	f00d f924 	bl	2490c <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   176c4:	2400      	movs	r4, #0
   176c6:	4e2a      	ldr	r6, [pc, #168]	; (17770 <button_pressed+0xe8>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   176c8:	4f2a      	ldr	r7, [pc, #168]	; (17774 <button_pressed+0xec>)
   176ca:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   176ce:	f856 0b04 	ldr.w	r0, [r6], #4
   176d2:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   176d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   176d8:	3401      	adds	r4, #1
   176da:	f7ff feab 	bl	17434 <z_impl_gpio_pin_interrupt_configure>
   176de:	2c04      	cmp	r4, #4
   176e0:	d00c      	beq.n	176fc <button_pressed+0x74>
   176e2:	2800      	cmp	r0, #0
   176e4:	d0f1      	beq.n	176ca <button_pressed+0x42>
   176e6:	4b24      	ldr	r3, [pc, #144]	; (17778 <button_pressed+0xf0>)
   176e8:	4924      	ldr	r1, [pc, #144]	; (1777c <button_pressed+0xf4>)
		LOG_ERR("Cannot disable callbacks");
   176ea:	4825      	ldr	r0, [pc, #148]	; (17780 <button_pressed+0xf8>)
   176ec:	1ac9      	subs	r1, r1, r3
   176ee:	08c9      	lsrs	r1, r1, #3
   176f0:	0189      	lsls	r1, r1, #6
   176f2:	f041 0101 	orr.w	r1, r1, #1
   176f6:	f014 fecf 	bl	2c498 <log_0>
   176fa:	e001      	b.n	17700 <button_pressed+0x78>
	if (err) {
   176fc:	2800      	cmp	r0, #0
   176fe:	d1f2      	bne.n	176e6 <button_pressed+0x5e>
	switch (state) {
   17700:	4b20      	ldr	r3, [pc, #128]	; (17784 <button_pressed+0xfc>)
   17702:	781a      	ldrb	r2, [r3, #0]
   17704:	b9f2      	cbnz	r2, 17744 <button_pressed+0xbc>
		state = STATE_SCANNING;
   17706:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17708:	491f      	ldr	r1, [pc, #124]	; (17788 <button_pressed+0x100>)
   1770a:	701a      	strb	r2, [r3, #0]
   1770c:	481f      	ldr	r0, [pc, #124]	; (1778c <button_pressed+0x104>)
   1770e:	2221      	movs	r2, #33	; 0x21
   17710:	2300      	movs	r3, #0
   17712:	f00d f92b 	bl	2496c <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17716:	4811      	ldr	r0, [pc, #68]	; (1775c <button_pressed+0xd4>)
   17718:	f00d f8e8 	bl	248ec <z_spin_unlock_valid>
   1771c:	b968      	cbnz	r0, 1773a <button_pressed+0xb2>
   1771e:	2384      	movs	r3, #132	; 0x84
   17720:	4a0f      	ldr	r2, [pc, #60]	; (17760 <button_pressed+0xd8>)
   17722:	491b      	ldr	r1, [pc, #108]	; (17790 <button_pressed+0x108>)
   17724:	4810      	ldr	r0, [pc, #64]	; (17768 <button_pressed+0xe0>)
   17726:	f014 fc6a 	bl	2bffe <printk>
   1772a:	490c      	ldr	r1, [pc, #48]	; (1775c <button_pressed+0xd4>)
   1772c:	4819      	ldr	r0, [pc, #100]	; (17794 <button_pressed+0x10c>)
   1772e:	f014 fc66 	bl	2bffe <printk>
   17732:	2184      	movs	r1, #132	; 0x84
   17734:	480a      	ldr	r0, [pc, #40]	; (17760 <button_pressed+0xd8>)
   17736:	f014 fe7f 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   1773a:	f385 8811 	msr	BASEPRI, r5
   1773e:	f3bf 8f6f 	isb	sy
}
   17742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   17744:	23eb      	movs	r3, #235	; 0xeb
   17746:	4a14      	ldr	r2, [pc, #80]	; (17798 <button_pressed+0x110>)
   17748:	4914      	ldr	r1, [pc, #80]	; (1779c <button_pressed+0x114>)
   1774a:	4807      	ldr	r0, [pc, #28]	; (17768 <button_pressed+0xe0>)
   1774c:	f014 fc57 	bl	2bffe <printk>
   17750:	21eb      	movs	r1, #235	; 0xeb
   17752:	4811      	ldr	r0, [pc, #68]	; (17798 <button_pressed+0x110>)
   17754:	f014 fe70 	bl	2c438 <assert_post_action>
		break;
   17758:	e7dd      	b.n	17716 <button_pressed+0x8e>
   1775a:	bf00      	nop
   1775c:	20021700 	.word	0x20021700
   17760:	0002ffdd 	.word	0x0002ffdd
   17764:	0003002f 	.word	0x0003002f
   17768:	0002ff0d 	.word	0x0002ff0d
   1776c:	00030044 	.word	0x00030044
   17770:	200216ac 	.word	0x200216ac
   17774:	0002ef98 	.word	0x0002ef98
   17778:	0002ebc4 	.word	0x0002ebc4
   1777c:	0002ebf4 	.word	0x0002ebf4
   17780:	00031484 	.word	0x00031484
   17784:	200247f1 	.word	0x200247f1
   17788:	20020ed0 	.word	0x20020ed0
   1778c:	20021358 	.word	0x20021358
   17790:	00030003 	.word	0x00030003
   17794:	0003001a 	.word	0x0003001a
   17798:	0003149d 	.word	0x0003149d
   1779c:	00032a36 	.word	0x00032a36

000177a0 <buttons_scan_fn>:
{
   177a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   177a4:	2400      	movs	r4, #0
   177a6:	4e7b      	ldr	r6, [pc, #492]	; (17994 <buttons_scan_fn+0x1f4>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   177a8:	4625      	mov	r5, r4
{
   177aa:	46b2      	mov	sl, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   177ac:	f8df b20c 	ldr.w	fp, [pc, #524]	; 179bc <buttons_scan_fn+0x21c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   177b0:	4f79      	ldr	r7, [pc, #484]	; (17998 <buttons_scan_fn+0x1f8>)
   177b2:	f04f 0801 	mov.w	r8, #1
   177b6:	eb0b 03c5 	add.w	r3, fp, r5, lsl #3
   177ba:	791b      	ldrb	r3, [r3, #4]
   177bc:	f85a 9b04 	ldr.w	r9, [sl], #4
   177c0:	fa08 f803 	lsl.w	r8, r8, r3
   177c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   177c8:	681b      	ldr	r3, [r3, #0]
   177ca:	ea18 0f03 	tst.w	r8, r3
   177ce:	d10e      	bne.n	177ee <buttons_scan_fn+0x4e>
   177d0:	4972      	ldr	r1, [pc, #456]	; (1799c <buttons_scan_fn+0x1fc>)
   177d2:	f44f 735e 	mov.w	r3, #888	; 0x378
   177d6:	463a      	mov	r2, r7
   177d8:	4871      	ldr	r0, [pc, #452]	; (179a0 <buttons_scan_fn+0x200>)
   177da:	f014 fc10 	bl	2bffe <printk>
   177de:	4871      	ldr	r0, [pc, #452]	; (179a4 <buttons_scan_fn+0x204>)
   177e0:	f014 fc0d 	bl	2bffe <printk>
   177e4:	f44f 715e 	mov.w	r1, #888	; 0x378
   177e8:	4638      	mov	r0, r7
   177ea:	f014 fe25 	bl	2c438 <assert_post_action>
	return api->port_get_raw(port, value);
   177ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
   177f2:	4648      	mov	r0, r9
   177f4:	685b      	ldr	r3, [r3, #4]
   177f6:	a901      	add	r1, sp, #4
   177f8:	4798      	blx	r3
	if (ret == 0) {
   177fa:	2800      	cmp	r0, #0
   177fc:	d17e      	bne.n	178fc <buttons_scan_fn+0x15c>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   177fe:	9b01      	ldr	r3, [sp, #4]
   17800:	ea18 0f03 	tst.w	r8, r3
   17804:	d003      	beq.n	1780e <buttons_scan_fn+0x6e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17806:	3501      	adds	r5, #1
   17808:	2d04      	cmp	r5, #4
   1780a:	d1d2      	bne.n	177b2 <buttons_scan_fn+0x12>
   1780c:	e082      	b.n	17914 <buttons_scan_fn+0x174>
			ret |= 1U << i;
   1780e:	2301      	movs	r3, #1
   17810:	40ab      	lsls	r3, r5
   17812:	431c      	orrs	r4, r3
   17814:	e7f7      	b.n	17806 <buttons_scan_fn+0x66>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   17816:	3d04      	subs	r5, #4
   17818:	2d00      	cmp	r5, #0
   1781a:	f000 809e 	beq.w	1795a <buttons_scan_fn+0x1ba>
			handler->cb(button_state, has_changed);
   1781e:	46aa      	mov	sl, r5
   17820:	f85a 3b04 	ldr.w	r3, [sl], #4
   17824:	4641      	mov	r1, r8
   17826:	4620      	mov	r0, r4
   17828:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1782a:	f1ba 0f00 	cmp.w	sl, #0
   1782e:	f000 8094 	beq.w	1795a <buttons_scan_fn+0x1ba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17832:	686d      	ldr	r5, [r5, #4]
	return node->next;
   17834:	e08e      	b.n	17954 <buttons_scan_fn+0x1b4>
		initial_run = false;
   17836:	2200      	movs	r2, #0
   17838:	701a      	strb	r2, [r3, #0]
   1783a:	e091      	b.n	17960 <buttons_scan_fn+0x1c0>
	__asm__ volatile(
   1783c:	f04f 0320 	mov.w	r3, #32
   17840:	f3ef 8811 	mrs	r8, BASEPRI
   17844:	f383 8811 	msr	BASEPRI, r3
   17848:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1784c:	4856      	ldr	r0, [pc, #344]	; (179a8 <buttons_scan_fn+0x208>)
   1784e:	f00d f83f 	bl	248d0 <z_spin_lock_valid>
   17852:	b968      	cbnz	r0, 17870 <buttons_scan_fn+0xd0>
   17854:	235c      	movs	r3, #92	; 0x5c
   17856:	4a55      	ldr	r2, [pc, #340]	; (179ac <buttons_scan_fn+0x20c>)
   17858:	4955      	ldr	r1, [pc, #340]	; (179b0 <buttons_scan_fn+0x210>)
   1785a:	4851      	ldr	r0, [pc, #324]	; (179a0 <buttons_scan_fn+0x200>)
   1785c:	f014 fbcf 	bl	2bffe <printk>
   17860:	4951      	ldr	r1, [pc, #324]	; (179a8 <buttons_scan_fn+0x208>)
   17862:	4854      	ldr	r0, [pc, #336]	; (179b4 <buttons_scan_fn+0x214>)
   17864:	f014 fbcb 	bl	2bffe <printk>
   17868:	215c      	movs	r1, #92	; 0x5c
   1786a:	4850      	ldr	r0, [pc, #320]	; (179ac <buttons_scan_fn+0x20c>)
   1786c:	f014 fde4 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   17870:	484d      	ldr	r0, [pc, #308]	; (179a8 <buttons_scan_fn+0x208>)
   17872:	f00d f84b 	bl	2490c <z_spin_lock_set_owner>
		switch (state) {
   17876:	4b50      	ldr	r3, [pc, #320]	; (179b8 <buttons_scan_fn+0x218>)
   17878:	781a      	ldrb	r2, [r3, #0]
   1787a:	2a01      	cmp	r2, #1
   1787c:	d132      	bne.n	178e4 <buttons_scan_fn+0x144>
			state = STATE_WAITING;
   1787e:	2200      	movs	r2, #0
   17880:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   17882:	4b4e      	ldr	r3, [pc, #312]	; (179bc <buttons_scan_fn+0x21c>)
   17884:	f856 0b04 	ldr.w	r0, [r6], #4
   17888:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1788c:	7919      	ldrb	r1, [r3, #4]
   1788e:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   17892:	f7ff fdcf 	bl	17434 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   17896:	3401      	adds	r4, #1
   17898:	2c04      	cmp	r4, #4
   1789a:	4605      	mov	r5, r0
   1789c:	d001      	beq.n	178a2 <buttons_scan_fn+0x102>
   1789e:	2800      	cmp	r0, #0
   178a0:	d0ef      	beq.n	17882 <buttons_scan_fn+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   178a2:	4841      	ldr	r0, [pc, #260]	; (179a8 <buttons_scan_fn+0x208>)
   178a4:	f00d f822 	bl	248ec <z_spin_unlock_valid>
   178a8:	b968      	cbnz	r0, 178c6 <buttons_scan_fn+0x126>
   178aa:	2384      	movs	r3, #132	; 0x84
   178ac:	4a3f      	ldr	r2, [pc, #252]	; (179ac <buttons_scan_fn+0x20c>)
   178ae:	4944      	ldr	r1, [pc, #272]	; (179c0 <buttons_scan_fn+0x220>)
   178b0:	483b      	ldr	r0, [pc, #236]	; (179a0 <buttons_scan_fn+0x200>)
   178b2:	f014 fba4 	bl	2bffe <printk>
   178b6:	493c      	ldr	r1, [pc, #240]	; (179a8 <buttons_scan_fn+0x208>)
   178b8:	4842      	ldr	r0, [pc, #264]	; (179c4 <buttons_scan_fn+0x224>)
   178ba:	f014 fba0 	bl	2bffe <printk>
   178be:	2184      	movs	r1, #132	; 0x84
   178c0:	483a      	ldr	r0, [pc, #232]	; (179ac <buttons_scan_fn+0x20c>)
   178c2:	f014 fdb9 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   178c6:	f388 8811 	msr	BASEPRI, r8
   178ca:	f3bf 8f6f 	isb	sy
		if (err) {
   178ce:	2d00      	cmp	r5, #0
   178d0:	d05c      	beq.n	1798c <buttons_scan_fn+0x1ec>
   178d2:	493d      	ldr	r1, [pc, #244]	; (179c8 <buttons_scan_fn+0x228>)
   178d4:	4b3d      	ldr	r3, [pc, #244]	; (179cc <buttons_scan_fn+0x22c>)
			LOG_ERR("Cannot enable callbacks");
   178d6:	483e      	ldr	r0, [pc, #248]	; (179d0 <buttons_scan_fn+0x230>)
   178d8:	1ac9      	subs	r1, r1, r3
   178da:	08c9      	lsrs	r1, r1, #3
   178dc:	0189      	lsls	r1, r1, #6
   178de:	f041 0101 	orr.w	r1, r1, #1
   178e2:	e051      	b.n	17988 <buttons_scan_fn+0x1e8>
			__ASSERT_NO_MSG(false);
   178e4:	23b4      	movs	r3, #180	; 0xb4
   178e6:	4a3b      	ldr	r2, [pc, #236]	; (179d4 <buttons_scan_fn+0x234>)
   178e8:	493b      	ldr	r1, [pc, #236]	; (179d8 <buttons_scan_fn+0x238>)
   178ea:	482d      	ldr	r0, [pc, #180]	; (179a0 <buttons_scan_fn+0x200>)
   178ec:	f014 fb87 	bl	2bffe <printk>
   178f0:	21b4      	movs	r1, #180	; 0xb4
   178f2:	4838      	ldr	r0, [pc, #224]	; (179d4 <buttons_scan_fn+0x234>)
   178f4:	f014 fda0 	bl	2c438 <assert_post_action>
		int err = 0;
   178f8:	2500      	movs	r5, #0
			break;
   178fa:	e7d2      	b.n	178a2 <buttons_scan_fn+0x102>
		if (val < 0) {
   178fc:	da83      	bge.n	17806 <buttons_scan_fn+0x66>
   178fe:	4b33      	ldr	r3, [pc, #204]	; (179cc <buttons_scan_fn+0x22c>)
   17900:	4931      	ldr	r1, [pc, #196]	; (179c8 <buttons_scan_fn+0x228>)
			LOG_ERR("Cannot read gpio pin");
   17902:	4836      	ldr	r0, [pc, #216]	; (179dc <buttons_scan_fn+0x23c>)
   17904:	1ac9      	subs	r1, r1, r3
   17906:	08c9      	lsrs	r1, r1, #3
   17908:	0189      	lsls	r1, r1, #6
   1790a:	f041 0101 	orr.w	r1, r1, #1
   1790e:	f014 fdc3 	bl	2c498 <log_0>
			return 0;
   17912:	2400      	movs	r4, #0
   17914:	4b32      	ldr	r3, [pc, #200]	; (179e0 <buttons_scan_fn+0x240>)
   17916:	e8d3 2fef 	ldaex	r2, [r3]
   1791a:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1791e:	2900      	cmp	r1, #0
   17920:	d1f9      	bne.n	17916 <buttons_scan_fn+0x176>
	if (!initial_run) {
   17922:	4b30      	ldr	r3, [pc, #192]	; (179e4 <buttons_scan_fn+0x244>)
   17924:	4f30      	ldr	r7, [pc, #192]	; (179e8 <buttons_scan_fn+0x248>)
   17926:	781a      	ldrb	r2, [r3, #0]
   17928:	2a00      	cmp	r2, #0
   1792a:	d184      	bne.n	17836 <buttons_scan_fn+0x96>
		if (button_scan != last_button_scan) {
   1792c:	6839      	ldr	r1, [r7, #0]
   1792e:	42a1      	cmp	r1, r4
   17930:	d016      	beq.n	17960 <buttons_scan_fn+0x1c0>
	if (button_handler_cb != NULL) {
   17932:	4b2e      	ldr	r3, [pc, #184]	; (179ec <buttons_scan_fn+0x24c>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   17934:	ea81 0804 	eor.w	r8, r1, r4
	if (button_handler_cb != NULL) {
   17938:	681b      	ldr	r3, [r3, #0]
   1793a:	b113      	cbz	r3, 17942 <buttons_scan_fn+0x1a2>
		button_handler_cb(button_state, has_changed);
   1793c:	4641      	mov	r1, r8
   1793e:	4620      	mov	r0, r4
   17940:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   17942:	f04f 33ff 	mov.w	r3, #4294967295
   17946:	f04f 32ff 	mov.w	r2, #4294967295
   1794a:	4829      	ldr	r0, [pc, #164]	; (179f0 <buttons_scan_fn+0x250>)
   1794c:	f00b f926 	bl	22b9c <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   17950:	4b28      	ldr	r3, [pc, #160]	; (179f4 <buttons_scan_fn+0x254>)
   17952:	681d      	ldr	r5, [r3, #0]
   17954:	2d00      	cmp	r5, #0
   17956:	f47f af5e 	bne.w	17816 <buttons_scan_fn+0x76>
	return z_impl_k_mutex_unlock(mutex);
   1795a:	4825      	ldr	r0, [pc, #148]	; (179f0 <buttons_scan_fn+0x250>)
   1795c:	f00b fa18 	bl	22d90 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   17960:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   17962:	2c00      	cmp	r4, #0
   17964:	f43f af6a 	beq.w	1783c <buttons_scan_fn+0x9c>
   17968:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1796c:	2300      	movs	r3, #0
   1796e:	4922      	ldr	r1, [pc, #136]	; (179f8 <buttons_scan_fn+0x258>)
   17970:	4822      	ldr	r0, [pc, #136]	; (179fc <buttons_scan_fn+0x25c>)
   17972:	f00c fffb 	bl	2496c <k_delayed_work_submit_to_queue>
		if (err) {
   17976:	b148      	cbz	r0, 1798c <buttons_scan_fn+0x1ec>
   17978:	4913      	ldr	r1, [pc, #76]	; (179c8 <buttons_scan_fn+0x228>)
   1797a:	4b14      	ldr	r3, [pc, #80]	; (179cc <buttons_scan_fn+0x22c>)
			LOG_ERR("Cannot add work to workqueue");
   1797c:	4820      	ldr	r0, [pc, #128]	; (17a00 <buttons_scan_fn+0x260>)
   1797e:	1ac9      	subs	r1, r1, r3
   17980:	08c9      	lsrs	r1, r1, #3
   17982:	0189      	lsls	r1, r1, #6
   17984:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Cannot enable callbacks");
   17988:	f014 fd86 	bl	2c498 <log_0>
}
   1798c:	b003      	add	sp, #12
   1798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17992:	bf00      	nop
   17994:	200216ac 	.word	0x200216ac
   17998:	000311ce 	.word	0x000311ce
   1799c:	0003141e 	.word	0x0003141e
   179a0:	0002ff0d 	.word	0x0002ff0d
   179a4:	0003145c 	.word	0x0003145c
   179a8:	20021700 	.word	0x20021700
   179ac:	0002ffdd 	.word	0x0002ffdd
   179b0:	0003002f 	.word	0x0003002f
   179b4:	00030044 	.word	0x00030044
   179b8:	200247f1 	.word	0x200247f1
   179bc:	0002ef98 	.word	0x0002ef98
   179c0:	00030003 	.word	0x00030003
   179c4:	0003001a 	.word	0x0003001a
   179c8:	0002ebf4 	.word	0x0002ebf4
   179cc:	0002ebc4 	.word	0x0002ebc4
   179d0:	0003150d 	.word	0x0003150d
   179d4:	0003149d 	.word	0x0003149d
   179d8:	00032a36 	.word	0x00032a36
   179dc:	000314db 	.word	0x000314db
   179e0:	20021704 	.word	0x20021704
   179e4:	20020a5c 	.word	0x20020a5c
   179e8:	200216e8 	.word	0x200216e8
   179ec:	200216bc 	.word	0x200216bc
   179f0:	200216c0 	.word	0x200216c0
   179f4:	200216d4 	.word	0x200216d4
   179f8:	20020ed0 	.word	0x20020ed0
   179fc:	20021358 	.word	0x20021358
   17a00:	000314f0 	.word	0x000314f0

00017a04 <dk_leds_init>:
{
   17a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   17a06:	2600      	movs	r6, #0
   17a08:	4d18      	ldr	r5, [pc, #96]	; (17a6c <dk_leds_init+0x68>)
   17a0a:	4f19      	ldr	r7, [pc, #100]	; (17a70 <dk_leds_init+0x6c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   17a0c:	6828      	ldr	r0, [r5, #0]
   17a0e:	f00a fbb3 	bl	22178 <z_impl_device_get_binding>
   17a12:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   17a16:	b968      	cbnz	r0, 17a34 <dk_leds_init+0x30>
   17a18:	4b16      	ldr	r3, [pc, #88]	; (17a74 <dk_leds_init+0x70>)
   17a1a:	4917      	ldr	r1, [pc, #92]	; (17a78 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   17a1c:	4817      	ldr	r0, [pc, #92]	; (17a7c <dk_leds_init+0x78>)
   17a1e:	1ac9      	subs	r1, r1, r3
   17a20:	08c9      	lsrs	r1, r1, #3
   17a22:	0189      	lsls	r1, r1, #6
   17a24:	f041 0101 	orr.w	r1, r1, #1
   17a28:	f014 fd36 	bl	2c498 <log_0>
			return -ENODEV;
   17a2c:	f06f 0412 	mvn.w	r4, #18
}
   17a30:	4620      	mov	r0, r4
   17a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   17a34:	f44f 7200 	mov.w	r2, #512	; 0x200
   17a38:	7929      	ldrb	r1, [r5, #4]
   17a3a:	f7ff fd91 	bl	17560 <gpio_pin_configure>
		if (err) {
   17a3e:	4604      	mov	r4, r0
   17a40:	b150      	cbz	r0, 17a58 <dk_leds_init+0x54>
   17a42:	4b0c      	ldr	r3, [pc, #48]	; (17a74 <dk_leds_init+0x70>)
   17a44:	490c      	ldr	r1, [pc, #48]	; (17a78 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   17a46:	480e      	ldr	r0, [pc, #56]	; (17a80 <dk_leds_init+0x7c>)
   17a48:	1ac9      	subs	r1, r1, r3
   17a4a:	08c9      	lsrs	r1, r1, #3
   17a4c:	0189      	lsls	r1, r1, #6
   17a4e:	f041 0101 	orr.w	r1, r1, #1
   17a52:	f014 fd21 	bl	2c498 <log_0>
			return err;
   17a56:	e7eb      	b.n	17a30 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   17a58:	3601      	adds	r6, #1
   17a5a:	2e04      	cmp	r6, #4
   17a5c:	f105 0508 	add.w	r5, r5, #8
   17a60:	d1d4      	bne.n	17a0c <dk_leds_init+0x8>
}
   17a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   17a66:	210f      	movs	r1, #15
   17a68:	f7ff bdd6 	b.w	17618 <dk_set_leds_state.part.0>
   17a6c:	0002efb8 	.word	0x0002efb8
   17a70:	200216f0 	.word	0x200216f0
   17a74:	0002ebc4 	.word	0x0002ebc4
   17a78:	0002ebf4 	.word	0x0002ebf4
   17a7c:	00031525 	.word	0x00031525
   17a80:	0003153d 	.word	0x0003153d

00017a84 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17a84:	4b05      	ldr	r3, [pc, #20]	; (17a9c <dk_read_buttons+0x18>)
   17a86:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   17a8a:	b100      	cbz	r0, 17a8e <dk_read_buttons+0xa>
		*button_state = current_state;
   17a8c:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   17a8e:	4804      	ldr	r0, [pc, #16]	; (17aa0 <dk_read_buttons+0x1c>)
   17a90:	b111      	cbz	r1, 17a98 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   17a92:	6802      	ldr	r2, [r0, #0]
   17a94:	405a      	eors	r2, r3
   17a96:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   17a98:	6003      	str	r3, [r0, #0]
}
   17a9a:	4770      	bx	lr
   17a9c:	20021704 	.word	0x20021704
   17aa0:	200216ec 	.word	0x200216ec

00017aa4 <dk_buttons_init>:
{
   17aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   17aa8:	4b48      	ldr	r3, [pc, #288]	; (17bcc <dk_buttons_init+0x128>)
   17aaa:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   17aac:	4d48      	ldr	r5, [pc, #288]	; (17bd0 <dk_buttons_init+0x12c>)
   17aae:	4f49      	ldr	r7, [pc, #292]	; (17bd4 <dk_buttons_init+0x130>)
   17ab0:	4849      	ldr	r0, [pc, #292]	; (17bd8 <dk_buttons_init+0x134>)
   17ab2:	f016 fd4b 	bl	2e54c <z_impl_k_mutex_init>
   17ab6:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17ab8:	2600      	movs	r6, #0
   17aba:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   17abc:	6828      	ldr	r0, [r5, #0]
   17abe:	f00a fb5b 	bl	22178 <z_impl_device_get_binding>
   17ac2:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   17ac6:	b970      	cbnz	r0, 17ae6 <dk_buttons_init+0x42>
   17ac8:	4b44      	ldr	r3, [pc, #272]	; (17bdc <dk_buttons_init+0x138>)
   17aca:	4945      	ldr	r1, [pc, #276]	; (17be0 <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot bind gpio device");
   17acc:	4845      	ldr	r0, [pc, #276]	; (17be4 <dk_buttons_init+0x140>)
   17ace:	1ac9      	subs	r1, r1, r3
   17ad0:	08c9      	lsrs	r1, r1, #3
   17ad2:	0189      	lsls	r1, r1, #6
   17ad4:	f041 0101 	orr.w	r1, r1, #1
   17ad8:	f014 fcde 	bl	2c498 <log_0>
			return -ENODEV;
   17adc:	f06f 0412 	mvn.w	r4, #18
}
   17ae0:	4620      	mov	r0, r4
   17ae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   17ae6:	f44f 7288 	mov.w	r2, #272	; 0x110
   17aea:	7929      	ldrb	r1, [r5, #4]
   17aec:	f7ff fd38 	bl	17560 <gpio_pin_configure>
		if (err) {
   17af0:	4604      	mov	r4, r0
   17af2:	b150      	cbz	r0, 17b0a <dk_buttons_init+0x66>
   17af4:	493a      	ldr	r1, [pc, #232]	; (17be0 <dk_buttons_init+0x13c>)
   17af6:	4b39      	ldr	r3, [pc, #228]	; (17bdc <dk_buttons_init+0x138>)
			LOG_ERR("Cannot configure button gpio");
   17af8:	483b      	ldr	r0, [pc, #236]	; (17be8 <dk_buttons_init+0x144>)
   17afa:	1ac9      	subs	r1, r1, r3
   17afc:	08c9      	lsrs	r1, r1, #3
   17afe:	0189      	lsls	r1, r1, #6
   17b00:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Cannot add work to workqueue");
   17b04:	f014 fcc8 	bl	2c498 <log_0>
		return err;
   17b08:	e7ea      	b.n	17ae0 <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b0a:	3601      	adds	r6, #1
   17b0c:	2e04      	cmp	r6, #4
   17b0e:	f105 0508 	add.w	r5, r5, #8
   17b12:	d1d3      	bne.n	17abc <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b14:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   17b16:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   17b18:	f04f 0b01 	mov.w	fp, #1
   17b1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 17bd4 <dk_buttons_init+0x130>
		err = gpio_pin_interrupt_configure(button_devs[i],
   17b20:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   17b24:	f85a 0b04 	ldr.w	r0, [sl], #4
   17b28:	791e      	ldrb	r6, [r3, #4]
   17b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17b2e:	4631      	mov	r1, r6
   17b30:	f7ff fc80 	bl	17434 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   17b34:	4604      	mov	r4, r0
   17b36:	b140      	cbz	r0, 17b4a <dk_buttons_init+0xa6>
   17b38:	4929      	ldr	r1, [pc, #164]	; (17be0 <dk_buttons_init+0x13c>)
   17b3a:	4b28      	ldr	r3, [pc, #160]	; (17bdc <dk_buttons_init+0x138>)
			LOG_ERR("Cannot disable callbacks()");
   17b3c:	482b      	ldr	r0, [pc, #172]	; (17bec <dk_buttons_init+0x148>)
   17b3e:	1ac9      	subs	r1, r1, r3
   17b40:	08c9      	lsrs	r1, r1, #3
   17b42:	0189      	lsls	r1, r1, #6
   17b44:	f041 0101 	orr.w	r1, r1, #1
   17b48:	e7dc      	b.n	17b04 <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b4a:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   17b4c:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b50:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   17b52:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b56:	d1e3      	bne.n	17b20 <dk_buttons_init+0x7c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b58:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   17b5a:	4e25      	ldr	r6, [pc, #148]	; (17bf0 <dk_buttons_init+0x14c>)
   17b5c:	4b25      	ldr	r3, [pc, #148]	; (17bf4 <dk_buttons_init+0x150>)
	callback->pin_mask = pin_mask;
   17b5e:	e9c6 3901 	strd	r3, r9, [r6, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   17b62:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   17b66:	6883      	ldr	r3, [r0, #8]
   17b68:	69db      	ldr	r3, [r3, #28]
   17b6a:	b16b      	cbz	r3, 17b88 <dk_buttons_init+0xe4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   17b6c:	2201      	movs	r2, #1
   17b6e:	4631      	mov	r1, r6
   17b70:	4798      	blx	r3
		if (err) {
   17b72:	4604      	mov	r4, r0
   17b74:	b158      	cbz	r0, 17b8e <dk_buttons_init+0xea>
   17b76:	491a      	ldr	r1, [pc, #104]	; (17be0 <dk_buttons_init+0x13c>)
   17b78:	4b18      	ldr	r3, [pc, #96]	; (17bdc <dk_buttons_init+0x138>)
			LOG_ERR("Cannot add callback");
   17b7a:	481f      	ldr	r0, [pc, #124]	; (17bf8 <dk_buttons_init+0x154>)
   17b7c:	1ac9      	subs	r1, r1, r3
   17b7e:	08c9      	lsrs	r1, r1, #3
   17b80:	0189      	lsls	r1, r1, #6
   17b82:	f041 0101 	orr.w	r1, r1, #1
   17b86:	e7bd      	b.n	17b04 <dk_buttons_init+0x60>
		return -ENOTSUP;
   17b88:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17b8c:	e7f3      	b.n	17b76 <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b8e:	3501      	adds	r5, #1
   17b90:	2d04      	cmp	r5, #4
   17b92:	d1e6      	bne.n	17b62 <dk_buttons_init+0xbe>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   17b94:	4919      	ldr	r1, [pc, #100]	; (17bfc <dk_buttons_init+0x158>)
   17b96:	481a      	ldr	r0, [pc, #104]	; (17c00 <dk_buttons_init+0x15c>)
   17b98:	f016 fdbe 	bl	2e718 <k_delayed_work_init>
	state = STATE_SCANNING;
   17b9c:	2201      	movs	r2, #1
   17b9e:	4b19      	ldr	r3, [pc, #100]	; (17c04 <dk_buttons_init+0x160>)
   17ba0:	4917      	ldr	r1, [pc, #92]	; (17c00 <dk_buttons_init+0x15c>)
   17ba2:	701a      	strb	r2, [r3, #0]
   17ba4:	4818      	ldr	r0, [pc, #96]	; (17c08 <dk_buttons_init+0x164>)
   17ba6:	2200      	movs	r2, #0
   17ba8:	2300      	movs	r3, #0
   17baa:	f00c fedf 	bl	2496c <k_delayed_work_submit_to_queue>
	if (err) {
   17bae:	4604      	mov	r4, r0
   17bb0:	b140      	cbz	r0, 17bc4 <dk_buttons_init+0x120>
   17bb2:	490b      	ldr	r1, [pc, #44]	; (17be0 <dk_buttons_init+0x13c>)
   17bb4:	4b09      	ldr	r3, [pc, #36]	; (17bdc <dk_buttons_init+0x138>)
		LOG_ERR("Cannot add work to workqueue");
   17bb6:	4815      	ldr	r0, [pc, #84]	; (17c0c <dk_buttons_init+0x168>)
   17bb8:	1ac9      	subs	r1, r1, r3
   17bba:	08c9      	lsrs	r1, r1, #3
   17bbc:	0189      	lsls	r1, r1, #6
   17bbe:	f041 0101 	orr.w	r1, r1, #1
   17bc2:	e79f      	b.n	17b04 <dk_buttons_init+0x60>
	dk_read_buttons(NULL, NULL);
   17bc4:	4601      	mov	r1, r0
   17bc6:	f7ff ff5d 	bl	17a84 <dk_read_buttons>
	return 0;
   17bca:	e789      	b.n	17ae0 <dk_buttons_init+0x3c>
   17bcc:	200216bc 	.word	0x200216bc
   17bd0:	0002ef98 	.word	0x0002ef98
   17bd4:	200216ac 	.word	0x200216ac
   17bd8:	200216c0 	.word	0x200216c0
   17bdc:	0002ebc4 	.word	0x0002ebc4
   17be0:	0002ebf4 	.word	0x0002ebf4
   17be4:	00031525 	.word	0x00031525
   17be8:	00031557 	.word	0x00031557
   17bec:	00031574 	.word	0x00031574
   17bf0:	200216dc 	.word	0x200216dc
   17bf4:	00017689 	.word	0x00017689
   17bf8:	0003158f 	.word	0x0003158f
   17bfc:	000177a1 	.word	0x000177a1
   17c00:	20020ed0 	.word	0x20020ed0
   17c04:	200247f1 	.word	0x200247f1
   17c08:	20021358 	.word	0x20021358
   17c0c:	000314f0 	.word	0x000314f0

00017c10 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   17c10:	2804      	cmp	r0, #4
{
   17c12:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   17c14:	d90d      	bls.n	17c32 <dk_set_led+0x22>
   17c16:	4b14      	ldr	r3, [pc, #80]	; (17c68 <dk_set_led+0x58>)
   17c18:	4914      	ldr	r1, [pc, #80]	; (17c6c <dk_set_led+0x5c>)
		LOG_ERR("LED index out of the range");
   17c1a:	4815      	ldr	r0, [pc, #84]	; (17c70 <dk_set_led+0x60>)
   17c1c:	1ac9      	subs	r1, r1, r3
   17c1e:	08c9      	lsrs	r1, r1, #3
   17c20:	0189      	lsls	r1, r1, #6
   17c22:	f041 0101 	orr.w	r1, r1, #1
   17c26:	f014 fc37 	bl	2c498 <log_0>
		return -EINVAL;
   17c2a:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   17c2e:	4620      	mov	r0, r4
   17c30:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   17c32:	fab1 f281 	clz	r2, r1
   17c36:	4b0f      	ldr	r3, [pc, #60]	; (17c74 <dk_set_led+0x64>)
   17c38:	0952      	lsrs	r2, r2, #5
   17c3a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   17c3e:	7919      	ldrb	r1, [r3, #4]
   17c40:	4b0d      	ldr	r3, [pc, #52]	; (17c78 <dk_set_led+0x68>)
   17c42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17c46:	f7ff fcbb 	bl	175c0 <gpio_pin_set_raw>
	if (err) {
   17c4a:	4604      	mov	r4, r0
   17c4c:	2800      	cmp	r0, #0
   17c4e:	d0ee      	beq.n	17c2e <dk_set_led+0x1e>
   17c50:	4b05      	ldr	r3, [pc, #20]	; (17c68 <dk_set_led+0x58>)
   17c52:	4906      	ldr	r1, [pc, #24]	; (17c6c <dk_set_led+0x5c>)
		LOG_ERR("Cannot write LED gpio");
   17c54:	4809      	ldr	r0, [pc, #36]	; (17c7c <dk_set_led+0x6c>)
   17c56:	1ac9      	subs	r1, r1, r3
   17c58:	08c9      	lsrs	r1, r1, #3
   17c5a:	0189      	lsls	r1, r1, #6
   17c5c:	f041 0101 	orr.w	r1, r1, #1
   17c60:	f014 fc1a 	bl	2c498 <log_0>
   17c64:	e7e3      	b.n	17c2e <dk_set_led+0x1e>
   17c66:	bf00      	nop
   17c68:	0002ebc4 	.word	0x0002ebc4
   17c6c:	0002ebf4 	.word	0x0002ebf4
   17c70:	000315a3 	.word	0x000315a3
   17c74:	0002efb8 	.word	0x0002efb8
   17c78:	200216f0 	.word	0x200216f0
   17c7c:	0003146e 	.word	0x0003146e

00017c80 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   17c80:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   17c82:	f240 2201 	movw	r2, #513	; 0x201
   17c86:	2102      	movs	r1, #2
   17c88:	2066      	movs	r0, #102	; 0x66
   17c8a:	f7fb ff2b 	bl	13ae4 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   17c8e:	4b05      	ldr	r3, [pc, #20]	; (17ca4 <open_socket+0x24>)
   17c90:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   17c92:	3001      	adds	r0, #1
   17c94:	d104      	bne.n	17ca0 <open_socket+0x20>
		return -errno;
   17c96:	f015 f800 	bl	2cc9a <__errno>
   17c9a:	6800      	ldr	r0, [r0, #0]
   17c9c:	4240      	negs	r0, r0
	}

	return 0;
}
   17c9e:	bd08      	pop	{r3, pc}
	return 0;
   17ca0:	2000      	movs	r0, #0
   17ca2:	e7fc      	b.n	17c9e <open_socket+0x1e>
   17ca4:	2002170c 	.word	0x2002170c

00017ca8 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   17ca8:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   17caa:	4d18      	ldr	r5, [pc, #96]	; (17d0c <at_cmd_driver_init+0x64>)
{
   17cac:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   17cae:	782b      	ldrb	r3, [r5, #0]
   17cb0:	bb53      	cbnz	r3, 17d08 <at_cmd_driver_init+0x60>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   17cb2:	f7ff ffe5 	bl	17c80 <open_socket>
	if (err) {
   17cb6:	4604      	mov	r4, r0
   17cb8:	b168      	cbz	r0, 17cd6 <at_cmd_driver_init+0x2e>
   17cba:	4a15      	ldr	r2, [pc, #84]	; (17d10 <at_cmd_driver_init+0x68>)
   17cbc:	4b15      	ldr	r3, [pc, #84]	; (17d14 <at_cmd_driver_init+0x6c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   17cbe:	4601      	mov	r1, r0
   17cc0:	1ad2      	subs	r2, r2, r3
   17cc2:	08d2      	lsrs	r2, r2, #3
   17cc4:	0192      	lsls	r2, r2, #6
   17cc6:	4814      	ldr	r0, [pc, #80]	; (17d18 <at_cmd_driver_init+0x70>)
   17cc8:	f042 0201 	orr.w	r2, r2, #1
   17ccc:	f014 fbf3 	bl	2c4b6 <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   17cd0:	4620      	mov	r0, r4
   17cd2:	b009      	add	sp, #36	; 0x24
   17cd4:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17cd6:	2200      	movs	r2, #0
   17cd8:	2300      	movs	r3, #0
   17cda:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17cde:	230a      	movs	r3, #10
   17ce0:	e9cd 0000 	strd	r0, r0, [sp]
   17ce4:	e9cd 0302 	strd	r0, r3, [sp, #8]
   17ce8:	9004      	str	r0, [sp, #16]
   17cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17cee:	4b0b      	ldr	r3, [pc, #44]	; (17d1c <at_cmd_driver_init+0x74>)
   17cf0:	490b      	ldr	r1, [pc, #44]	; (17d20 <at_cmd_driver_init+0x78>)
   17cf2:	480c      	ldr	r0, [pc, #48]	; (17d24 <at_cmd_driver_init+0x7c>)
   17cf4:	f00c fd0e 	bl	24714 <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   17cf8:	4b0b      	ldr	r3, [pc, #44]	; (17d28 <at_cmd_driver_init+0x80>)
   17cfa:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread_id, value);
   17cfc:	490b      	ldr	r1, [pc, #44]	; (17d2c <at_cmd_driver_init+0x84>)
   17cfe:	f016 fcaa 	bl	2e656 <z_impl_k_thread_name_set>
	initialized = true;
   17d02:	2301      	movs	r3, #1
   17d04:	702b      	strb	r3, [r5, #0]
	return 0;
   17d06:	e7e3      	b.n	17cd0 <at_cmd_driver_init+0x28>
		return 0;
   17d08:	2400      	movs	r4, #0
   17d0a:	e7e1      	b.n	17cd0 <at_cmd_driver_init+0x28>
   17d0c:	2002527e 	.word	0x2002527e
   17d10:	0002ebc4 	.word	0x0002ebc4
   17d14:	0002ebc4 	.word	0x0002ebc4
   17d18:	000315d2 	.word	0x000315d2
   17d1c:	00017e51 	.word	0x00017e51
   17d20:	20027728 	.word	0x20027728
   17d24:	20020f00 	.word	0x20020f00
   17d28:	20021734 	.word	0x20021734
   17d2c:	000315f4 	.word	0x000315f4

00017d30 <complete_cmd>:
{
   17d30:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   17d32:	4c08      	ldr	r4, [pc, #32]	; (17d54 <complete_cmd+0x24>)
   17d34:	f04f 32ff 	mov.w	r2, #4294967295
   17d38:	f04f 33ff 	mov.w	r3, #4294967295
   17d3c:	4620      	mov	r0, r4
   17d3e:	f00a ff2d 	bl	22b9c <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   17d42:	2200      	movs	r2, #0
   17d44:	4b04      	ldr	r3, [pc, #16]	; (17d58 <complete_cmd+0x28>)
   17d46:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   17d48:	4620      	mov	r0, r4
}
   17d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17d4e:	f00b b81f 	b.w	22d90 <z_impl_k_mutex_unlock>
   17d52:	bf00      	nop
   17d54:	20020b68 	.word	0x20020b68
   17d58:	20021710 	.word	0x20021710

00017d5c <load_cmd_and_write>:
{
   17d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d60:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   17d62:	4e32      	ldr	r6, [pc, #200]	; (17e2c <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   17d64:	f04f 33ff 	mov.w	r3, #4294967295
   17d68:	4637      	mov	r7, r6
   17d6a:	f04f 32ff 	mov.w	r2, #4294967295
   17d6e:	4830      	ldr	r0, [pc, #192]	; (17e30 <load_cmd_and_write+0xd4>)
   17d70:	f00a ff14 	bl	22b9c <z_impl_k_mutex_lock>
   17d74:	4d2f      	ldr	r5, [pc, #188]	; (17e34 <load_cmd_and_write+0xd8>)
   17d76:	4b30      	ldr	r3, [pc, #192]	; (17e38 <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   17d78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 17e4c <load_cmd_and_write+0xf0>
   17d7c:	1aed      	subs	r5, r5, r3
   17d7e:	08ed      	lsrs	r5, r5, #3
   17d80:	6833      	ldr	r3, [r6, #0]
   17d82:	2b00      	cmp	r3, #0
   17d84:	d14b      	bne.n	17e1e <load_cmd_and_write+0xc2>
   17d86:	2200      	movs	r2, #0
   17d88:	2300      	movs	r3, #0
   17d8a:	4631      	mov	r1, r6
   17d8c:	4640      	mov	r0, r8
   17d8e:	f00a fe57 	bl	22a40 <z_impl_k_msgq_get>
   17d92:	4604      	mov	r4, r0
   17d94:	2800      	cmp	r0, #0
   17d96:	d142      	bne.n	17e1e <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   17d98:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   17d9a:	4608      	mov	r0, r1
   17d9c:	9103      	str	r1, [sp, #12]
   17d9e:	f00e fd21 	bl	267e4 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   17da2:	4b26      	ldr	r3, [pc, #152]	; (17e3c <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   17da4:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   17da6:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   17da8:	9903      	ldr	r1, [sp, #12]
   17daa:	4623      	mov	r3, r4
   17dac:	e9cd 4400 	strd	r4, r4, [sp]
   17db0:	9202      	str	r2, [sp, #8]
   17db2:	f014 fe5e 	bl	2ca72 <z_impl_zsock_sendto>
   17db6:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   17db8:	1c48      	adds	r0, r1, #1
   17dba:	9a02      	ldr	r2, [sp, #8]
   17dbc:	d126      	bne.n	17e0c <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   17dbe:	f014 ff6c 	bl	2cc9a <__errno>
   17dc2:	01ac      	lsls	r4, r5, #6
   17dc4:	f044 0401 	orr.w	r4, r4, #1
   17dc8:	4622      	mov	r2, r4
   17dca:	6801      	ldr	r1, [r0, #0]
   17dcc:	481c      	ldr	r0, [pc, #112]	; (17e40 <load_cmd_and_write+0xe4>)
   17dce:	f014 fb72 	bl	2c4b6 <log_1>
		return -errno;
   17dd2:	f014 ff62 	bl	2cc9a <__errno>
   17dd6:	6804      	ldr	r4, [r0, #0]
   17dd8:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   17dda:	7c3b      	ldrb	r3, [r7, #16]
   17ddc:	07da      	lsls	r2, r3, #31
   17dde:	d502      	bpl.n	17de6 <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   17de0:	6838      	ldr	r0, [r7, #0]
   17de2:	f016 fd70 	bl	2e8c6 <k_free>
		if (ret != 0) {
   17de6:	b1d4      	cbz	r4, 17e1e <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   17de8:	2305      	movs	r3, #5
   17dea:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   17dee:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   17df0:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   17df2:	079b      	lsls	r3, r3, #30
   17df4:	d507      	bpl.n	17e06 <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   17df6:	f04f 32ff 	mov.w	r2, #4294967295
   17dfa:	f04f 33ff 	mov.w	r3, #4294967295
   17dfe:	4811      	ldr	r0, [pc, #68]	; (17e44 <load_cmd_and_write+0xe8>)
   17e00:	a904      	add	r1, sp, #16
   17e02:	f00a fd7b 	bl	228fc <z_impl_k_msgq_put>
			complete_cmd();
   17e06:	f7ff ff93 	bl	17d30 <complete_cmd>
	} while (ret != 0);
   17e0a:	e7b9      	b.n	17d80 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   17e0c:	428a      	cmp	r2, r1
   17e0e:	d0e4      	beq.n	17dda <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   17e10:	01ab      	lsls	r3, r5, #6
   17e12:	480d      	ldr	r0, [pc, #52]	; (17e48 <load_cmd_and_write+0xec>)
   17e14:	f043 0302 	orr.w	r3, r3, #2
   17e18:	f014 fb64 	bl	2c4e4 <log_2>
   17e1c:	e7dd      	b.n	17dda <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   17e1e:	4804      	ldr	r0, [pc, #16]	; (17e30 <load_cmd_and_write+0xd4>)
   17e20:	f00a ffb6 	bl	22d90 <z_impl_k_mutex_unlock>
}
   17e24:	b006      	add	sp, #24
   17e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e2a:	bf00      	nop
   17e2c:	20021710 	.word	0x20021710
   17e30:	20020b68 	.word	0x20020b68
   17e34:	0002ebc4 	.word	0x0002ebc4
   17e38:	0002ebc4 	.word	0x0002ebc4
   17e3c:	2002170c 	.word	0x2002170c
   17e40:	00031609 	.word	0x00031609
   17e44:	20020c0c 	.word	0x20020c0c
   17e48:	0003162c 	.word	0x0003162c
   17e4c:	20020be0 	.word	0x20020be0

00017e50 <socket_thread_fn>:
{
   17e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e54:	f8df 9260 	ldr.w	r9, [pc, #608]	; 180b8 <socket_thread_fn+0x268>
   17e58:	4f83      	ldr	r7, [pc, #524]	; (18068 <socket_thread_fn+0x218>)
   17e5a:	46ca      	mov	sl, r9
   17e5c:	4b83      	ldr	r3, [pc, #524]	; (1806c <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   17e5e:	4e84      	ldr	r6, [pc, #528]	; (18070 <socket_thread_fn+0x220>)
   17e60:	1aff      	subs	r7, r7, r3
   17e62:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   17e64:	f7ff ff7a 	bl	17d5c <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e68:	f8d9 0000 	ldr.w	r0, [r9]
   17e6c:	2500      	movs	r5, #0
   17e6e:	f640 228c 	movw	r2, #2700	; 0xa8c
   17e72:	462b      	mov	r3, r5
   17e74:	e9cd 5500 	strd	r5, r5, [sp]
   17e78:	497d      	ldr	r1, [pc, #500]	; (18070 <socket_thread_fn+0x220>)
   17e7a:	f014 fe2d 	bl	2cad8 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   17e7e:	4c7d      	ldr	r4, [pc, #500]	; (18074 <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e80:	f8df b238 	ldr.w	fp, [pc, #568]	; 180bc <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   17e84:	42a8      	cmp	r0, r5
   17e86:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e88:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   17e8c:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   17e8e:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   17e90:	da6a      	bge.n	17f68 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   17e92:	f014 ff02 	bl	2cc9a <__errno>
   17e96:	6803      	ldr	r3, [r0, #0]
   17e98:	2b75      	cmp	r3, #117	; 0x75
   17e9a:	d122      	bne.n	17ee2 <socket_thread_fn+0x92>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17e9c:	2301      	movs	r3, #1
   17e9e:	4c76      	ldr	r4, [pc, #472]	; (18078 <socket_thread_fn+0x228>)
   17ea0:	e8d4 2fef 	ldaex	r2, [r4]
   17ea4:	e8c4 3fe1 	stlex	r1, r3, [r4]
   17ea8:	2900      	cmp	r1, #0
   17eaa:	d1f9      	bne.n	17ea0 <socket_thread_fn+0x50>
				close(common_socket_fd);
   17eac:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   17eb0:	f014 fdb2 	bl	2ca18 <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   17eb4:	f7fe fd76 	bl	169a4 <bsdlib_shutdown_wait>
   17eb8:	e8d4 3fef 	ldaex	r3, [r4]
   17ebc:	e8c4 5fe2 	stlex	r2, r5, [r4]
   17ec0:	2a00      	cmp	r2, #0
   17ec2:	d1f9      	bne.n	17eb8 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   17ec4:	f7ff fedc 	bl	17c80 <open_socket>
   17ec8:	2800      	cmp	r0, #0
   17eca:	d0cb      	beq.n	17e64 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   17ecc:	f014 fee5 	bl	2cc9a <__errno>
   17ed0:	01bc      	lsls	r4, r7, #6
   17ed2:	f044 0401 	orr.w	r4, r4, #1
   17ed6:	6801      	ldr	r1, [r0, #0]
   17ed8:	4622      	mov	r2, r4
   17eda:	4868      	ldr	r0, [pc, #416]	; (1807c <socket_thread_fn+0x22c>)
   17edc:	f014 faeb 	bl	2c4b6 <log_1>
   17ee0:	e7c0      	b.n	17e64 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   17ee2:	01bd      	lsls	r5, r7, #6
   17ee4:	f8db 1000 	ldr.w	r1, [fp]
   17ee8:	4865      	ldr	r0, [pc, #404]	; (18080 <socket_thread_fn+0x230>)
   17eea:	f045 0201 	orr.w	r2, r5, #1
   17eee:	f014 fae2 	bl	2c4b6 <log_1>
			if ((close(common_socket_fd) == 0) &&
   17ef2:	f8d9 0000 	ldr.w	r0, [r9]
   17ef6:	f014 fd8f 	bl	2ca18 <z_impl_zsock_close>
   17efa:	bb28      	cbnz	r0, 17f48 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   17efc:	f7ff fec0 	bl	17c80 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   17f00:	bb10      	cbnz	r0, 17f48 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   17f02:	4860      	ldr	r0, [pc, #384]	; (18084 <socket_thread_fn+0x234>)
   17f04:	f045 0103 	orr.w	r1, r5, #3
   17f08:	f014 fac6 	bl	2c498 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   17f0c:	2306      	movs	r3, #6
   17f0e:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   17f10:	f014 fec3 	bl	2cc9a <__errno>
   17f14:	6803      	ldr	r3, [r0, #0]
   17f16:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   17f18:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   17f1a:	4b5b      	ldr	r3, [pc, #364]	; (18088 <socket_thread_fn+0x238>)
   17f1c:	681a      	ldr	r2, [r3, #0]
   17f1e:	b16a      	cbz	r2, 17f3c <socket_thread_fn+0xec>
   17f20:	7c1b      	ldrb	r3, [r3, #16]
   17f22:	079b      	lsls	r3, r3, #30
   17f24:	d50a      	bpl.n	17f3c <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   17f26:	7923      	ldrb	r3, [r4, #4]
   17f28:	2b07      	cmp	r3, #7
   17f2a:	d09b      	beq.n	17e64 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   17f2c:	f04f 32ff 	mov.w	r2, #4294967295
   17f30:	f04f 33ff 	mov.w	r3, #4294967295
   17f34:	494f      	ldr	r1, [pc, #316]	; (18074 <socket_thread_fn+0x224>)
   17f36:	4855      	ldr	r0, [pc, #340]	; (1808c <socket_thread_fn+0x23c>)
   17f38:	f00a fce0 	bl	228fc <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   17f3c:	7923      	ldrb	r3, [r4, #4]
   17f3e:	2b07      	cmp	r3, #7
   17f40:	d090      	beq.n	17e64 <socket_thread_fn+0x14>
			complete_cmd();
   17f42:	f7ff fef5 	bl	17d30 <complete_cmd>
   17f46:	e78d      	b.n	17e64 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   17f48:	f014 fea7 	bl	2cc9a <__errno>
   17f4c:	f045 0501 	orr.w	r5, r5, #1
   17f50:	6801      	ldr	r1, [r0, #0]
   17f52:	462a      	mov	r2, r5
   17f54:	484e      	ldr	r0, [pc, #312]	; (18090 <socket_thread_fn+0x240>)
   17f56:	f014 faae 	bl	2c4b6 <log_1>
			close(common_socket_fd);
   17f5a:	f8da 0000 	ldr.w	r0, [sl]
}
   17f5e:	b003      	add	sp, #12
   17f60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f64:	f014 bd58 	b.w	2ca18 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   17f68:	d10a      	bne.n	17f80 <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   17f6a:	01b9      	lsls	r1, r7, #6
   17f6c:	4849      	ldr	r0, [pc, #292]	; (18094 <socket_thread_fn+0x244>)
   17f6e:	f041 0101 	orr.w	r1, r1, #1
   17f72:	f014 fa91 	bl	2c498 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   17f76:	2306      	movs	r3, #6
   17f78:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   17f7a:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   17f7e:	e7cb      	b.n	17f18 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   17f80:	1833      	adds	r3, r6, r0
   17f82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   17f86:	b153      	cbz	r3, 17f9e <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   17f88:	01b9      	lsls	r1, r7, #6
   17f8a:	4843      	ldr	r0, [pc, #268]	; (18098 <socket_thread_fn+0x248>)
   17f8c:	f041 0101 	orr.w	r1, r1, #1
   17f90:	f014 fa82 	bl	2c498 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   17f94:	2306      	movs	r3, #6
   17f96:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   17f98:	f06f 0368 	mvn.w	r3, #104	; 0x68
   17f9c:	e7bc      	b.n	17f18 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   17f9e:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   17fa0:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17fa2:	483e      	ldr	r0, [pc, #248]	; (1809c <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   17fa4:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17fa6:	f00e fc1d 	bl	267e4 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   17faa:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17fac:	4602      	mov	r2, r0
   17fae:	493b      	ldr	r1, [pc, #236]	; (1809c <socket_thread_fn+0x24c>)
   17fb0:	4628      	mov	r0, r5
   17fb2:	f00e fc45 	bl	26840 <strncmp>
		if (match) {
   17fb6:	b9c0      	cbnz	r0, 17fea <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   17fb8:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17fba:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   17fbc:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   17fbe:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   17fc0:	3201      	adds	r2, #1
   17fc2:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   17fc4:	4d30      	ldr	r5, [pc, #192]	; (18088 <socket_thread_fn+0x238>)
   17fc6:	682b      	ldr	r3, [r5, #0]
   17fc8:	2b00      	cmp	r3, #0
   17fca:	d043      	beq.n	18054 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   17fcc:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   17fce:	2800      	cmp	r0, #0
   17fd0:	d040      	beq.n	18054 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   17fd2:	7923      	ldrb	r3, [r4, #4]
   17fd4:	2b07      	cmp	r3, #7
   17fd6:	d12e      	bne.n	18036 <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   17fd8:	4b31      	ldr	r3, [pc, #196]	; (180a0 <socket_thread_fn+0x250>)
   17fda:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   17fdc:	b913      	cbnz	r3, 17fe4 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   17fde:	68ab      	ldr	r3, [r5, #8]
   17fe0:	2b00      	cmp	r3, #0
   17fe2:	d09a      	beq.n	17f1a <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   17fe4:	4630      	mov	r0, r6
   17fe6:	4798      	blx	r3
   17fe8:	e797      	b.n	17f1a <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   17fea:	4630      	mov	r0, r6
   17fec:	492d      	ldr	r1, [pc, #180]	; (180a4 <socket_thread_fn+0x254>)
   17fee:	f00e fdf3 	bl	26bd8 <strstr>
		if (tmpstr) {
   17ff2:	4605      	mov	r5, r0
   17ff4:	b128      	cbz	r0, 18002 <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   17ff6:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17ff8:	482b      	ldr	r0, [pc, #172]	; (180a8 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   17ffa:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17ffc:	f00d fc80 	bl	25900 <atoi>
   18000:	e7db      	b.n	17fba <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   18002:	4630      	mov	r0, r6
   18004:	4929      	ldr	r1, [pc, #164]	; (180ac <socket_thread_fn+0x25c>)
   18006:	f00e fde7 	bl	26bd8 <strstr>
		if (tmpstr) {
   1800a:	4605      	mov	r5, r0
   1800c:	b108      	cbz	r0, 18012 <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   1800e:	2303      	movs	r3, #3
   18010:	e7f2      	b.n	17ff8 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   18012:	4827      	ldr	r0, [pc, #156]	; (180b0 <socket_thread_fn+0x260>)
   18014:	f00e fbe6 	bl	267e4 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   18018:	f1a8 0508 	sub.w	r5, r8, #8
   1801c:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   1801e:	4602      	mov	r2, r0
   18020:	4923      	ldr	r1, [pc, #140]	; (180b0 <socket_thread_fn+0x260>)
   18022:	4628      	mov	r0, r5
   18024:	f00e fc0c 	bl	26840 <strncmp>
		if (match) {
   18028:	b9c0      	cbnz	r0, 1805c <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   1802a:	2301      	movs	r3, #1
   1802c:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   1802e:	f06f 0307 	mvn.w	r3, #7
   18032:	6023      	str	r3, [r4, #0]
			break;
   18034:	e7c2      	b.n	17fbc <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   18036:	68eb      	ldr	r3, [r5, #12]
   18038:	429a      	cmp	r2, r3
   1803a:	d908      	bls.n	1804e <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   1803c:	01b9      	lsls	r1, r7, #6
   1803e:	481d      	ldr	r0, [pc, #116]	; (180b4 <socket_thread_fn+0x264>)
   18040:	f041 0101 	orr.w	r1, r1, #1
   18044:	f014 fa28 	bl	2c498 <log_0>
				ret.code  = -EMSGSIZE;
   18048:	f06f 0379 	mvn.w	r3, #121	; 0x79
   1804c:	e764      	b.n	17f18 <socket_thread_fn+0xc8>
   1804e:	4631      	mov	r1, r6
   18050:	f7f4 fd7c 	bl	cb4c <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   18054:	7923      	ldrb	r3, [r4, #4]
   18056:	2b07      	cmp	r3, #7
   18058:	d1c1      	bne.n	17fde <socket_thread_fn+0x18e>
   1805a:	e7bd      	b.n	17fd8 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   1805c:	4630      	mov	r0, r6
   1805e:	f00e fbc1 	bl	267e4 <strlen>
   18062:	1c42      	adds	r2, r0, #1
   18064:	e7ae      	b.n	17fc4 <socket_thread_fn+0x174>
   18066:	bf00      	nop
   18068:	0002ebc4 	.word	0x0002ebc4
   1806c:	0002ebc4 	.word	0x0002ebc4
   18070:	200247f2 	.word	0x200247f2
   18074:	20021728 	.word	0x20021728
   18078:	20021730 	.word	0x20021730
   1807c:	0003165e 	.word	0x0003165e
   18080:	00031692 	.word	0x00031692
   18084:	000316b4 	.word	0x000316b4
   18088:	20021710 	.word	0x20021710
   1808c:	20020c0c 	.word	0x20020c0c
   18090:	000316c8 	.word	0x000316c8
   18094:	000316ff 	.word	0x000316ff
   18098:	00031710 	.word	0x00031710
   1809c:	0003175b 	.word	0x0003175b
   180a0:	20021724 	.word	0x20021724
   180a4:	00031760 	.word	0x00031760
   180a8:	200247fd 	.word	0x200247fd
   180ac:	0003176c 	.word	0x0003176c
   180b0:	00031778 	.word	0x00031778
   180b4:	00031780 	.word	0x00031780
   180b8:	2002170c 	.word	0x2002170c
   180bc:	20021708 	.word	0x20021708

000180c0 <at_cmd_write>:
{
   180c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   180c2:	4605      	mov	r5, r0
   180c4:	460f      	mov	r7, r1
   180c6:	4616      	mov	r6, r2
   180c8:	461c      	mov	r4, r3
   180ca:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   180cc:	4b3c      	ldr	r3, [pc, #240]	; (181c0 <at_cmd_write+0x100>)
   180ce:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   180d2:	2b01      	cmp	r3, #1
   180d4:	d071      	beq.n	181ba <at_cmd_write+0xfa>
	return z_impl_k_current_get();
   180d6:	f00c f9d5 	bl	24484 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   180da:	4b3a      	ldr	r3, [pc, #232]	; (181c4 <at_cmd_write+0x104>)
   180dc:	681b      	ldr	r3, [r3, #0]
   180de:	4283      	cmp	r3, r0
   180e0:	d10e      	bne.n	18100 <at_cmd_write+0x40>
   180e2:	4939      	ldr	r1, [pc, #228]	; (181c8 <at_cmd_write+0x108>)
   180e4:	f44f 73c1 	mov.w	r3, #386	; 0x182
   180e8:	4a38      	ldr	r2, [pc, #224]	; (181cc <at_cmd_write+0x10c>)
   180ea:	4839      	ldr	r0, [pc, #228]	; (181d0 <at_cmd_write+0x110>)
   180ec:	f013 ff87 	bl	2bffe <printk>
   180f0:	4838      	ldr	r0, [pc, #224]	; (181d4 <at_cmd_write+0x114>)
   180f2:	f013 ff84 	bl	2bffe <printk>
   180f6:	f44f 71c1 	mov.w	r1, #386	; 0x182
   180fa:	4834      	ldr	r0, [pc, #208]	; (181cc <at_cmd_write+0x10c>)
   180fc:	f014 f99c 	bl	2c438 <assert_post_action>
	if (cmd == NULL) {
   18100:	b165      	cbz	r5, 1811c <at_cmd_write+0x5c>
   18102:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   18104:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   18108:	b9d3      	cbnz	r3, 18140 <at_cmd_write+0x80>
   1810a:	4933      	ldr	r1, [pc, #204]	; (181d8 <at_cmd_write+0x118>)
   1810c:	4b33      	ldr	r3, [pc, #204]	; (181dc <at_cmd_write+0x11c>)
		LOG_ERR("Invalid command");
   1810e:	4834      	ldr	r0, [pc, #208]	; (181e0 <at_cmd_write+0x120>)
   18110:	1ac9      	subs	r1, r1, r3
   18112:	08c9      	lsrs	r1, r1, #3
   18114:	0189      	lsls	r1, r1, #6
   18116:	f041 0101 	orr.w	r1, r1, #1
   1811a:	e007      	b.n	1812c <at_cmd_write+0x6c>
   1811c:	492e      	ldr	r1, [pc, #184]	; (181d8 <at_cmd_write+0x118>)
   1811e:	4b2f      	ldr	r3, [pc, #188]	; (181dc <at_cmd_write+0x11c>)
		LOG_ERR("cmd is NULL");
   18120:	4830      	ldr	r0, [pc, #192]	; (181e4 <at_cmd_write+0x124>)
   18122:	1ac9      	subs	r1, r1, r3
   18124:	08c9      	lsrs	r1, r1, #3
   18126:	0189      	lsls	r1, r1, #6
   18128:	f041 0101 	orr.w	r1, r1, #1
   1812c:	f014 f9b4 	bl	2c498 <log_0>
		if (state) {
   18130:	b91c      	cbnz	r4, 1813a <at_cmd_write+0x7a>
		return -EINVAL;
   18132:	f06f 0015 	mvn.w	r0, #21
}
   18136:	b009      	add	sp, #36	; 0x24
   18138:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   1813a:	2304      	movs	r3, #4
   1813c:	7023      	strb	r3, [r4, #0]
   1813e:	e7f8      	b.n	18132 <at_cmd_write+0x72>
		if (*c > ' ') {
   18140:	2b20      	cmp	r3, #32
   18142:	d9df      	bls.n	18104 <at_cmd_write+0x44>
	command.callback = NULL;
   18144:	2300      	movs	r3, #0
   18146:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   18148:	2302      	movs	r3, #2
	command.resp = buf;
   1814a:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   1814e:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   18150:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   18154:	f04f 32ff 	mov.w	r2, #4294967295
   18158:	f04f 33ff 	mov.w	r3, #4294967295
   1815c:	4822      	ldr	r0, [pc, #136]	; (181e8 <at_cmd_write+0x128>)
   1815e:	f00a fd1d 	bl	22b9c <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   18162:	f04f 32ff 	mov.w	r2, #4294967295
   18166:	a903      	add	r1, sp, #12
   18168:	f04f 33ff 	mov.w	r3, #4294967295
   1816c:	481f      	ldr	r0, [pc, #124]	; (181ec <at_cmd_write+0x12c>)
   1816e:	f00a fbc5 	bl	228fc <z_impl_k_msgq_put>
   18172:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   18174:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   18176:	b170      	cbz	r0, 18196 <at_cmd_write+0xd6>
   18178:	4a17      	ldr	r2, [pc, #92]	; (181d8 <at_cmd_write+0x118>)
   1817a:	4b18      	ldr	r3, [pc, #96]	; (181dc <at_cmd_write+0x11c>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   1817c:	481c      	ldr	r0, [pc, #112]	; (181f0 <at_cmd_write+0x130>)
   1817e:	1ad2      	subs	r2, r2, r3
   18180:	08d2      	lsrs	r2, r2, #3
   18182:	0192      	lsls	r2, r2, #6
   18184:	f042 0201 	orr.w	r2, r2, #1
   18188:	f014 f995 	bl	2c4b6 <log_1>
		if (state) {
   1818c:	b10c      	cbz	r4, 18192 <at_cmd_write+0xd2>
			*state = AT_CMD_ERROR_QUEUE;
   1818e:	2304      	movs	r3, #4
		*state = ret.state;
   18190:	7023      	strb	r3, [r4, #0]
	return ret.code;
   18192:	9801      	ldr	r0, [sp, #4]
   18194:	e7cf      	b.n	18136 <at_cmd_write+0x76>
	load_cmd_and_write();
   18196:	f7ff fde1 	bl	17d5c <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   1819a:	f04f 32ff 	mov.w	r2, #4294967295
   1819e:	f04f 33ff 	mov.w	r3, #4294967295
   181a2:	a901      	add	r1, sp, #4
   181a4:	4813      	ldr	r0, [pc, #76]	; (181f4 <at_cmd_write+0x134>)
   181a6:	f00a fc4b 	bl	22a40 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   181aa:	480f      	ldr	r0, [pc, #60]	; (181e8 <at_cmd_write+0x128>)
   181ac:	f00a fdf0 	bl	22d90 <z_impl_k_mutex_unlock>
	if (state) {
   181b0:	2c00      	cmp	r4, #0
   181b2:	d0ee      	beq.n	18192 <at_cmd_write+0xd2>
		*state = ret.state;
   181b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   181b8:	e7ea      	b.n	18190 <at_cmd_write+0xd0>
		return -EHOSTDOWN;
   181ba:	f06f 0074 	mvn.w	r0, #116	; 0x74
   181be:	e7ba      	b.n	18136 <at_cmd_write+0x76>
   181c0:	20021730 	.word	0x20021730
   181c4:	20021734 	.word	0x20021734
   181c8:	000317e1 	.word	0x000317e1
   181cc:	000317bd 	.word	0x000317bd
   181d0:	0002ff0d 	.word	0x0002ff0d
   181d4:	000317ff 	.word	0x000317ff
   181d8:	0002ebc4 	.word	0x0002ebc4
   181dc:	0002ebc4 	.word	0x0002ebc4
   181e0:	000317ad 	.word	0x000317ad
   181e4:	000317a1 	.word	0x000317a1
   181e8:	20020ba4 	.word	0x20020ba4
   181ec:	20020be0 	.word	0x20020be0
   181f0:	0003182f 	.word	0x0003182f
   181f4:	20020c0c 	.word	0x20020c0c

000181f8 <at_cmd_set_notification_handler>:
{
   181f8:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   181fa:	4c09      	ldr	r4, [pc, #36]	; (18220 <at_cmd_set_notification_handler+0x28>)
{
   181fc:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   181fe:	6821      	ldr	r1, [r4, #0]
   18200:	b159      	cbz	r1, 1821a <at_cmd_set_notification_handler+0x22>
   18202:	4281      	cmp	r1, r0
   18204:	d009      	beq.n	1821a <at_cmd_set_notification_handler+0x22>
   18206:	4a07      	ldr	r2, [pc, #28]	; (18224 <at_cmd_set_notification_handler+0x2c>)
   18208:	4b07      	ldr	r3, [pc, #28]	; (18228 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   1820a:	4808      	ldr	r0, [pc, #32]	; (1822c <at_cmd_set_notification_handler+0x34>)
   1820c:	1ad2      	subs	r2, r2, r3
   1820e:	08d2      	lsrs	r2, r2, #3
   18210:	0192      	lsls	r2, r2, #6
   18212:	f042 0202 	orr.w	r2, r2, #2
   18216:	f014 f94e 	bl	2c4b6 <log_1>
	notification_handler = handler;
   1821a:	6025      	str	r5, [r4, #0]
}
   1821c:	bd38      	pop	{r3, r4, r5, pc}
   1821e:	bf00      	nop
   18220:	20021724 	.word	0x20021724
   18224:	0002ebc4 	.word	0x0002ebc4
   18228:	0002ebc4 	.word	0x0002ebc4
   1822c:	0003184f 	.word	0x0003184f

00018230 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   18230:	4b0f      	ldr	r3, [pc, #60]	; (18270 <find_node+0x40>)
{
   18232:	b570      	push	{r4, r5, r6, lr}
   18234:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   18236:	6818      	ldr	r0, [r3, #0]
   18238:	b170      	cbz	r0, 18258 <find_node+0x28>
   1823a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1823c:	4603      	mov	r3, r0
   1823e:	2d00      	cmp	r5, #0
   18240:	4628      	mov	r0, r5
   18242:	bf38      	it	cc
   18244:	2000      	movcc	r0, #0
   18246:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   18248:	685e      	ldr	r6, [r3, #4]
   1824a:	428e      	cmp	r6, r1
   1824c:	d105      	bne.n	1825a <find_node+0x2a>
   1824e:	689e      	ldr	r6, [r3, #8]
   18250:	4296      	cmp	r6, r2
   18252:	d102      	bne.n	1825a <find_node+0x2a>
			*prev_out = prev;
			return curr;
   18254:	4618      	mov	r0, r3
			*prev_out = prev;
   18256:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   18258:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1825a:	2800      	cmp	r0, #0
   1825c:	d0fc      	beq.n	18258 <find_node+0x28>
	return node->next;
   1825e:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18260:	461d      	mov	r5, r3
   18262:	2e00      	cmp	r6, #0
   18264:	4603      	mov	r3, r0
   18266:	4630      	mov	r0, r6
   18268:	bf38      	it	cc
   1826a:	2000      	movcc	r0, #0
   1826c:	e7ec      	b.n	18248 <find_node+0x18>
   1826e:	bf00      	nop
   18270:	20021738 	.word	0x20021738

00018274 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   18274:	4a0c      	ldr	r2, [pc, #48]	; (182a8 <module_init+0x34>)
{
   18276:	b508      	push	{r3, lr}
	if (initialized) {
   18278:	7813      	ldrb	r3, [r2, #0]
   1827a:	b15b      	cbz	r3, 18294 <module_init+0x20>
   1827c:	490b      	ldr	r1, [pc, #44]	; (182ac <module_init+0x38>)
   1827e:	4b0c      	ldr	r3, [pc, #48]	; (182b0 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   18280:	480c      	ldr	r0, [pc, #48]	; (182b4 <module_init+0x40>)
   18282:	1ac9      	subs	r1, r1, r3
   18284:	08c9      	lsrs	r1, r1, #3
   18286:	0189      	lsls	r1, r1, #6
   18288:	f041 0102 	orr.w	r1, r1, #2
   1828c:	f014 f904 	bl	2c498 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   18290:	2000      	movs	r0, #0
   18292:	bd08      	pop	{r3, pc}
	initialized = true;
   18294:	2101      	movs	r1, #1
   18296:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   18298:	4a07      	ldr	r2, [pc, #28]	; (182b8 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   1829a:	4808      	ldr	r0, [pc, #32]	; (182bc <module_init+0x48>)
	list->tail = NULL;
   1829c:	e9c2 3300 	strd	r3, r3, [r2]
   182a0:	f7ff ffaa 	bl	181f8 <at_cmd_set_notification_handler>
	return 0;
   182a4:	e7f4      	b.n	18290 <module_init+0x1c>
   182a6:	bf00      	nop
   182a8:	2002527f 	.word	0x2002527f
   182ac:	0002ebd4 	.word	0x0002ebd4
   182b0:	0002ebc4 	.word	0x0002ebc4
   182b4:	0003187f 	.word	0x0003187f
   182b8:	20021738 	.word	0x20021738
   182bc:	000182cd 	.word	0x000182cd

000182c0 <k_mutex_unlock.constprop.0>:
   182c0:	4801      	ldr	r0, [pc, #4]	; (182c8 <k_mutex_unlock.constprop.0+0x8>)
   182c2:	f00a bd65 	b.w	22d90 <z_impl_k_mutex_unlock>
   182c6:	bf00      	nop
   182c8:	20020b90 	.word	0x20020b90

000182cc <notif_dispatch>:
{
   182cc:	b538      	push	{r3, r4, r5, lr}
   182ce:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   182d0:	f04f 33ff 	mov.w	r3, #4294967295
   182d4:	f04f 32ff 	mov.w	r2, #4294967295
   182d8:	480d      	ldr	r0, [pc, #52]	; (18310 <notif_dispatch+0x44>)
   182da:	f00a fc5f 	bl	22b9c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   182de:	4b0d      	ldr	r3, [pc, #52]	; (18314 <notif_dispatch+0x48>)
   182e0:	681b      	ldr	r3, [r3, #0]
   182e2:	b91b      	cbnz	r3, 182ec <notif_dispatch+0x20>
}
   182e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   182e8:	f7ff bfea 	b.w	182c0 <k_mutex_unlock.constprop.0>
	return node->next;
   182ec:	681c      	ldr	r4, [r3, #0]
   182ee:	2c00      	cmp	r4, #0
   182f0:	bf38      	it	cc
   182f2:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   182f4:	4629      	mov	r1, r5
   182f6:	689a      	ldr	r2, [r3, #8]
   182f8:	6858      	ldr	r0, [r3, #4]
   182fa:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   182fc:	2c00      	cmp	r4, #0
   182fe:	d0f1      	beq.n	182e4 <notif_dispatch+0x18>
   18300:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18302:	4623      	mov	r3, r4
   18304:	2a00      	cmp	r2, #0
   18306:	bf38      	it	cc
   18308:	2200      	movcc	r2, #0
   1830a:	4614      	mov	r4, r2
   1830c:	e7f2      	b.n	182f4 <notif_dispatch+0x28>
   1830e:	bf00      	nop
   18310:	20020b90 	.word	0x20020b90
   18314:	20021738 	.word	0x20021738

00018318 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   18318:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1831a:	4606      	mov	r6, r0
	if (handler == NULL) {
   1831c:	460d      	mov	r5, r1
   1831e:	b979      	cbnz	r1, 18340 <at_notif_register_handler+0x28>
   18320:	4a1d      	ldr	r2, [pc, #116]	; (18398 <at_notif_register_handler+0x80>)
   18322:	4b1e      	ldr	r3, [pc, #120]	; (1839c <at_notif_register_handler+0x84>)
   18324:	1a9b      	subs	r3, r3, r2
   18326:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   18328:	019b      	lsls	r3, r3, #6
   1832a:	460a      	mov	r2, r1
   1832c:	f043 0301 	orr.w	r3, r3, #1
   18330:	4601      	mov	r1, r0
   18332:	481b      	ldr	r0, [pc, #108]	; (183a0 <at_notif_register_handler+0x88>)
   18334:	f014 f8d6 	bl	2c4e4 <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   18338:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   1833c:	b002      	add	sp, #8
   1833e:	bd70      	pop	{r4, r5, r6, pc}
   18340:	f04f 32ff 	mov.w	r2, #4294967295
   18344:	f04f 33ff 	mov.w	r3, #4294967295
   18348:	4816      	ldr	r0, [pc, #88]	; (183a4 <at_notif_register_handler+0x8c>)
   1834a:	f00a fc27 	bl	22b9c <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1834e:	462a      	mov	r2, r5
   18350:	4631      	mov	r1, r6
   18352:	a801      	add	r0, sp, #4
   18354:	f7ff ff6c 	bl	18230 <find_node>
   18358:	4604      	mov	r4, r0
   1835a:	b118      	cbz	r0, 18364 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   1835c:	f7ff ffb0 	bl	182c0 <k_mutex_unlock.constprop.0>
		return 0;
   18360:	2000      	movs	r0, #0
   18362:	e7eb      	b.n	1833c <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   18364:	200c      	movs	r0, #12
   18366:	f00d fa8d 	bl	25884 <k_malloc>
   1836a:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   1836c:	b920      	cbnz	r0, 18378 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   1836e:	f7ff ffa7 	bl	182c0 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   18372:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18376:	e7e1      	b.n	1833c <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   18378:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   1837a:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1837c:	4a0a      	ldr	r2, [pc, #40]	; (183a8 <at_notif_register_handler+0x90>)
   1837e:	6044      	str	r4, [r0, #4]
   18380:	6084      	str	r4, [r0, #8]
	parent->next = child;
   18382:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   18384:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   18386:	e9c3 6501 	strd	r6, r5, [r3, #4]
   1838a:	b911      	cbnz	r1, 18392 <at_notif_register_handler+0x7a>
	list->head = node;
   1838c:	e9c2 3300 	strd	r3, r3, [r2]
}
   18390:	e7e4      	b.n	1835c <at_notif_register_handler+0x44>
	parent->next = child;
   18392:	600b      	str	r3, [r1, #0]
	list->tail = node;
   18394:	6053      	str	r3, [r2, #4]
}
   18396:	e7e1      	b.n	1835c <at_notif_register_handler+0x44>
   18398:	0002ebc4 	.word	0x0002ebc4
   1839c:	0002ebd4 	.word	0x0002ebd4
   183a0:	000318a2 	.word	0x000318a2
   183a4:	20020b90 	.word	0x20020b90
   183a8:	20021738 	.word	0x20021738

000183ac <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   183ac:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   183ae:	4d05      	ldr	r5, [pc, #20]	; (183c4 <write_uart_string+0x18>)
   183b0:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   183b2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   183b6:	b901      	cbnz	r1, 183ba <write_uart_string+0xe>
	}
}
   183b8:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   183ba:	6828      	ldr	r0, [r5, #0]
   183bc:	6883      	ldr	r3, [r0, #8]
   183be:	685b      	ldr	r3, [r3, #4]
   183c0:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   183c2:	e7f6      	b.n	183b2 <write_uart_string+0x6>
   183c4:	20021750 	.word	0x20021750

000183c8 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   183c8:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   183ca:	4921      	ldr	r1, [pc, #132]	; (18450 <cmd_send+0x88>)
{
   183cc:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   183ce:	4608      	mov	r0, r1
   183d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   183d4:	f10d 030b 	add.w	r3, sp, #11
   183d8:	f7ff fe72 	bl	180c0 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   183dc:	1e01      	subs	r1, r0, #0
   183de:	da0e      	bge.n	183fe <cmd_send+0x36>
   183e0:	4b1c      	ldr	r3, [pc, #112]	; (18454 <cmd_send+0x8c>)
   183e2:	4a1d      	ldr	r2, [pc, #116]	; (18458 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   183e4:	481d      	ldr	r0, [pc, #116]	; (1845c <cmd_send+0x94>)
   183e6:	1ad2      	subs	r2, r2, r3
   183e8:	08d2      	lsrs	r2, r2, #3
   183ea:	0192      	lsls	r2, r2, #6
   183ec:	f042 0201 	orr.w	r2, r2, #1
   183f0:	f014 f861 	bl	2c4b6 <log_1>
		state = AT_CMD_ERROR;
   183f4:	2301      	movs	r3, #1
   183f6:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   183fa:	4819      	ldr	r0, [pc, #100]	; (18460 <cmd_send+0x98>)
   183fc:	e012      	b.n	18424 <cmd_send+0x5c>
	switch (state) {
   183fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
   18402:	2b03      	cmp	r3, #3
   18404:	d810      	bhi.n	18428 <cmd_send+0x60>
   18406:	a201      	add	r2, pc, #4	; (adr r2, 1840c <cmd_send+0x44>)
   18408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1840c:	0001841d 	.word	0x0001841d
   18410:	000183fb 	.word	0x000183fb
   18414:	00018437 	.word	0x00018437
   18418:	00018449 	.word	0x00018449
		write_uart_string(at_buf);
   1841c:	480c      	ldr	r0, [pc, #48]	; (18450 <cmd_send+0x88>)
   1841e:	f7ff ffc5 	bl	183ac <write_uart_string>
		write_uart_string(OK_STR);
   18422:	4810      	ldr	r0, [pc, #64]	; (18464 <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   18424:	f7ff ffc2 	bl	183ac <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   18428:	4b0f      	ldr	r3, [pc, #60]	; (18468 <cmd_send+0xa0>)
   1842a:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   1842c:	f015 fedf 	bl	2e1ee <z_impl_uart_irq_rx_enable>
}
   18430:	b00b      	add	sp, #44	; 0x2c
   18432:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   18436:	4b0d      	ldr	r3, [pc, #52]	; (1846c <cmd_send+0xa4>)
   18438:	9100      	str	r1, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   1843a:	2219      	movs	r2, #25
   1843c:	2100      	movs	r1, #0
   1843e:	a803      	add	r0, sp, #12
   18440:	f00e f874 	bl	2652c <__sprintf_chk>
		write_uart_string(str);
   18444:	a803      	add	r0, sp, #12
   18446:	e7ed      	b.n	18424 <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   18448:	4b09      	ldr	r3, [pc, #36]	; (18470 <cmd_send+0xa8>)
   1844a:	9100      	str	r1, [sp, #0]
   1844c:	e7f5      	b.n	1843a <cmd_send+0x72>
   1844e:	bf00      	nop
   18450:	20025280 	.word	0x20025280
   18454:	0002ebc4 	.word	0x0002ebc4
   18458:	0002ebcc 	.word	0x0002ebcc
   1845c:	000318dc 	.word	0x000318dc
   18460:	00031778 	.word	0x00031778
   18464:	0003175b 	.word	0x0003175b
   18468:	20021750 	.word	0x20021750
   1846c:	00031902 	.word	0x00031902
   18470:	00031913 	.word	0x00031913

00018474 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   18474:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18478:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   1847a:	6883      	ldr	r3, [r0, #8]
   1847c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1847e:	b103      	cbz	r3, 18482 <isr+0xe>
		return api->irq_update(dev);
   18480:	4798      	blx	r3
	if (api->irq_rx_ready) {
   18482:	68a3      	ldr	r3, [r4, #8]
   18484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18486:	b1bb      	cbz	r3, 184b8 <isr+0x44>
		return api->irq_rx_ready(dev);
   18488:	4620      	mov	r0, r4
   1848a:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   1848c:	b1a0      	cbz	r0, 184b8 <isr+0x44>
   1848e:	f8df 8140 	ldr.w	r8, [pc, #320]	; 185d0 <isr+0x15c>
   18492:	4e44      	ldr	r6, [pc, #272]	; (185a4 <isr+0x130>)
   18494:	4647      	mov	r7, r8
   18496:	4b44      	ldr	r3, [pc, #272]	; (185a8 <isr+0x134>)
		if (at_cmd_len > 0) {
   18498:	4d44      	ldr	r5, [pc, #272]	; (185ac <isr+0x138>)
   1849a:	1af6      	subs	r6, r6, r3
   1849c:	08f6      	lsrs	r6, r6, #3
   1849e:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   184a2:	07db      	lsls	r3, r3, #31
   184a4:	d408      	bmi.n	184b8 <isr+0x44>
	if (api->fifo_read) {
   184a6:	68a3      	ldr	r3, [r4, #8]
   184a8:	699b      	ldr	r3, [r3, #24]
   184aa:	b12b      	cbz	r3, 184b8 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   184ac:	2201      	movs	r2, #1
   184ae:	4620      	mov	r0, r4
   184b0:	f10d 0107 	add.w	r1, sp, #7
   184b4:	4798      	blx	r3
   184b6:	b910      	cbnz	r0, 184be <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   184b8:	b002      	add	sp, #8
   184ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   184be:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   184c2:	2908      	cmp	r1, #8
   184c4:	d001      	beq.n	184ca <isr+0x56>
   184c6:	297f      	cmp	r1, #127	; 0x7f
   184c8:	d105      	bne.n	184d6 <isr+0x62>
		if (at_cmd_len > 0) {
   184ca:	682b      	ldr	r3, [r5, #0]
   184cc:	2b00      	cmp	r3, #0
   184ce:	d0e6      	beq.n	1849e <isr+0x2a>
			at_cmd_len--;
   184d0:	3b01      	subs	r3, #1
   184d2:	602b      	str	r3, [r5, #0]
   184d4:	e7e3      	b.n	1849e <isr+0x2a>
	if (!inside_quotes) {
   184d6:	4836      	ldr	r0, [pc, #216]	; (185b0 <isr+0x13c>)
   184d8:	7803      	ldrb	r3, [r0, #0]
   184da:	b993      	cbnz	r3, 18502 <isr+0x8e>
		switch (character) {
   184dc:	290a      	cmp	r1, #10
   184de:	d01e      	beq.n	1851e <isr+0xaa>
   184e0:	290d      	cmp	r1, #13
   184e2:	d00a      	beq.n	184fa <isr+0x86>
   184e4:	b969      	cbnz	r1, 18502 <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   184e6:	4b33      	ldr	r3, [pc, #204]	; (185b4 <isr+0x140>)
   184e8:	781b      	ldrb	r3, [r3, #0]
   184ea:	b3a3      	cbz	r3, 18556 <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   184ec:	01b1      	lsls	r1, r6, #6
   184ee:	4832      	ldr	r0, [pc, #200]	; (185b8 <isr+0x144>)
   184f0:	f041 0102 	orr.w	r1, r1, #2
   184f4:	f013 ffd0 	bl	2c498 <log_0>
			return;
   184f8:	e7d1      	b.n	1849e <isr+0x2a>
			if (term_mode == MODE_CR) {
   184fa:	4a2e      	ldr	r2, [pc, #184]	; (185b4 <isr+0x140>)
   184fc:	7812      	ldrb	r2, [r2, #0]
   184fe:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   18500:	d029      	beq.n	18556 <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   18502:	f8d5 c000 	ldr.w	ip, [r5]
   18506:	f10c 0201 	add.w	r2, ip, #1
   1850a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1850e:	d317      	bcc.n	18540 <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   18510:	01b2      	lsls	r2, r6, #6
   18512:	482a      	ldr	r0, [pc, #168]	; (185bc <isr+0x148>)
   18514:	f042 0201 	orr.w	r2, r2, #1
   18518:	f013 ffcd 	bl	2c4b6 <log_1>
		return;
   1851c:	e7bf      	b.n	1849e <isr+0x2a>
			if (term_mode == MODE_LF) {
   1851e:	4a25      	ldr	r2, [pc, #148]	; (185b4 <isr+0x140>)
   18520:	7812      	ldrb	r2, [r2, #0]
   18522:	2a02      	cmp	r2, #2
   18524:	d017      	beq.n	18556 <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   18526:	2a03      	cmp	r2, #3
   18528:	d1eb      	bne.n	18502 <isr+0x8e>
   1852a:	f8d5 c000 	ldr.w	ip, [r5]
   1852e:	f1bc 0f00 	cmp.w	ip, #0
   18532:	d0e6      	beq.n	18502 <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   18534:	4a22      	ldr	r2, [pc, #136]	; (185c0 <isr+0x14c>)
   18536:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   18538:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1853c:	2a0d      	cmp	r2, #13
   1853e:	e7df      	b.n	18500 <isr+0x8c>
	at_buf[at_cmd_len] = character;
   18540:	f8df e07c 	ldr.w	lr, [pc, #124]	; 185c0 <isr+0x14c>
	if (character == '"') {
   18544:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   18546:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   1854a:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   1854c:	d1a7      	bne.n	1849e <isr+0x2a>
	if (!inside_quotes) {
   1854e:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   18552:	7003      	strb	r3, [r0, #0]
   18554:	e7a3      	b.n	1849e <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   18556:	2200      	movs	r2, #0
   18558:	6829      	ldr	r1, [r5, #0]
   1855a:	4b19      	ldr	r3, [pc, #100]	; (185c0 <isr+0x14c>)
	inside_quotes = false;
   1855c:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1855e:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   18560:	4619      	mov	r1, r3
   18562:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   18564:	f813 2b01 	ldrb.w	r2, [r3], #1
   18568:	2a20      	cmp	r2, #32
   1856a:	d802      	bhi.n	18572 <isr+0xfe>
		} else if (*c == '\0') {
   1856c:	2a00      	cmp	r2, #0
   1856e:	d1f9      	bne.n	18564 <isr+0xf0>
   18570:	e795      	b.n	1849e <isr+0x2a>
	if (at_buf[0]) {
   18572:	780b      	ldrb	r3, [r1, #0]
   18574:	2b00      	cmp	r3, #0
   18576:	d092      	beq.n	1849e <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   18578:	4b12      	ldr	r3, [pc, #72]	; (185c4 <isr+0x150>)
   1857a:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   1857c:	6883      	ldr	r3, [r0, #8]
   1857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18580:	b103      	cbz	r3, 18584 <isr+0x110>
		api->irq_rx_disable(dev);
   18582:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18584:	e8d7 3fef 	ldaex	r3, [r7]
   18588:	f043 0201 	orr.w	r2, r3, #1
   1858c:	e8c7 2fe1 	stlex	r1, r2, [r7]
   18590:	2900      	cmp	r1, #0
   18592:	d1f7      	bne.n	18584 <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   18594:	07da      	lsls	r2, r3, #31
   18596:	d482      	bmi.n	1849e <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   18598:	490b      	ldr	r1, [pc, #44]	; (185c8 <isr+0x154>)
   1859a:	480c      	ldr	r0, [pc, #48]	; (185cc <isr+0x158>)
   1859c:	f015 fff6 	bl	2e58c <k_queue_append>
   185a0:	e77d      	b.n	1849e <isr+0x2a>
   185a2:	bf00      	nop
   185a4:	0002ebcc 	.word	0x0002ebcc
   185a8:	0002ebc4 	.word	0x0002ebc4
   185ac:	20021740 	.word	0x20021740
   185b0:	20026280 	.word	0x20026280
   185b4:	20026281 	.word	0x20026281
   185b8:	00031924 	.word	0x00031924
   185bc:	00031950 	.word	0x00031950
   185c0:	20025280 	.word	0x20025280
   185c4:	20021750 	.word	0x20021750
   185c8:	20021744 	.word	0x20021744
   185cc:	20020fc8 	.word	0x20020fc8
   185d0:	2002174c 	.word	0x2002174c

000185d4 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   185d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   185d8:	2201      	movs	r2, #1
   185da:	4b49      	ldr	r3, [pc, #292]	; (18700 <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   185dc:	2000      	movs	r0, #0
   185de:	4949      	ldr	r1, [pc, #292]	; (18704 <at_host_init+0x130>)
		term_mode = mode;
   185e0:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   185e2:	f7ff fe99 	bl	18318 <at_notif_register_handler>
	if (err != 0) {
   185e6:	4c48      	ldr	r4, [pc, #288]	; (18708 <at_host_init+0x134>)
   185e8:	4a48      	ldr	r2, [pc, #288]	; (1870c <at_host_init+0x138>)
   185ea:	4606      	mov	r6, r0
   185ec:	1aa4      	subs	r4, r4, r2
   185ee:	08e4      	lsrs	r4, r4, #3
   185f0:	b150      	cbz	r0, 18608 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   185f2:	01a2      	lsls	r2, r4, #6
   185f4:	4601      	mov	r1, r0
   185f6:	f042 0201 	orr.w	r2, r2, #1
   185fa:	4845      	ldr	r0, [pc, #276]	; (18710 <at_host_init+0x13c>)
   185fc:	f013 ff5b 	bl	2c4b6 <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   18600:	4630      	mov	r0, r6
   18602:	b003      	add	sp, #12
   18604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18608:	4842      	ldr	r0, [pc, #264]	; (18714 <at_host_init+0x140>)
   1860a:	f009 fdb5 	bl	22178 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   1860e:	4d42      	ldr	r5, [pc, #264]	; (18718 <at_host_init+0x144>)
   18610:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   18612:	b988      	cbnz	r0, 18638 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   18614:	01a2      	lsls	r2, r4, #6
   18616:	493f      	ldr	r1, [pc, #252]	; (18714 <at_host_init+0x140>)
   18618:	4840      	ldr	r0, [pc, #256]	; (1871c <at_host_init+0x148>)
   1861a:	f042 0201 	orr.w	r2, r2, #1
   1861e:	f013 ff4a 	bl	2c4b6 <log_1>
		return -EINVAL;
   18622:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   18626:	01a2      	lsls	r2, r4, #6
   18628:	483d      	ldr	r0, [pc, #244]	; (18720 <at_host_init+0x14c>)
   1862a:	f042 0201 	orr.w	r2, r2, #1
   1862e:	f013 ff42 	bl	2c4b6 <log_1>
		return -EFAULT;
   18632:	f06f 060d 	mvn.w	r6, #13
   18636:	e7e3      	b.n	18600 <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   18638:	f016 f87a 	bl	2e730 <z_impl_k_uptime_ticks>
   1863c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18640:	460a      	mov	r2, r1
   18642:	fba0 0103 	umull	r0, r1, r0, r3
   18646:	fb03 1102 	mla	r1, r3, r2, r1
   1864a:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   1864e:	ea4f 1984 	mov.w	r9, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   18652:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 1873c <at_host_init+0x168>
   18656:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   1865a:	f049 0a03 	orr.w	sl, r9, #3
		err = uart_err_check(uart_dev);
   1865e:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   18660:	6883      	ldr	r3, [r0, #8]
   18662:	689b      	ldr	r3, [r3, #8]
   18664:	b393      	cbz	r3, 186cc <at_host_init+0xf8>
		return api->err_check(dev);
   18666:	4798      	blx	r3
		if (err) {
   18668:	4607      	mov	r7, r0
   1866a:	b378      	cbz	r0, 186cc <at_host_init+0xf8>
   1866c:	f016 f860 	bl	2e730 <z_impl_k_uptime_ticks>
   18670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18674:	460a      	mov	r2, r1
   18676:	fba0 0103 	umull	r0, r1, r0, r3
   1867a:	fb03 1102 	mla	r1, r3, r2, r1
   1867e:	0bc3      	lsrs	r3, r0, #15
   18680:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   18684:	eba3 0308 	sub.w	r3, r3, r8
   18688:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1868c:	d908      	bls.n	186a0 <at_host_init+0xcc>
				LOG_ERR("UART check failed: %d. "
   1868e:	4639      	mov	r1, r7
   18690:	4824      	ldr	r0, [pc, #144]	; (18724 <at_host_init+0x150>)
   18692:	f049 0201 	orr.w	r2, r9, #1
   18696:	f013 ff0e 	bl	2c4b6 <log_1>
				return -EIO;
   1869a:	f06f 0104 	mvn.w	r1, #4
   1869e:	e7c2      	b.n	18626 <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   186a0:	4652      	mov	r2, sl
   186a2:	4639      	mov	r1, r7
   186a4:	4658      	mov	r0, fp
   186a6:	f013 ff06 	bl	2c4b6 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   186aa:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   186ac:	6883      	ldr	r3, [r0, #8]
   186ae:	699b      	ldr	r3, [r3, #24]
   186b0:	b92b      	cbnz	r3, 186be <at_host_init+0xea>
	return z_impl_k_sleep(timeout);
   186b2:	2100      	movs	r1, #0
   186b4:	f44f 70a4 	mov.w	r0, #328	; 0x148
   186b8:	f00b feae 	bl	24418 <z_impl_k_sleep>
	} while (err);
   186bc:	e7cf      	b.n	1865e <at_host_init+0x8a>
		return api->fifo_read(dev, rx_data, size);
   186be:	2201      	movs	r2, #1
   186c0:	f10d 0107 	add.w	r1, sp, #7
   186c4:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   186c6:	2800      	cmp	r0, #0
   186c8:	d1ef      	bne.n	186aa <at_host_init+0xd6>
   186ca:	e7f2      	b.n	186b2 <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   186cc:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   186ce:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   186d0:	b123      	cbz	r3, 186dc <at_host_init+0x108>
   186d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   186d4:	b113      	cbz	r3, 186dc <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   186d6:	2200      	movs	r2, #0
   186d8:	4913      	ldr	r1, [pc, #76]	; (18728 <at_host_init+0x154>)
   186da:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   186dc:	2200      	movs	r2, #0
   186de:	4b13      	ldr	r3, [pc, #76]	; (1872c <at_host_init+0x158>)
   186e0:	4913      	ldr	r1, [pc, #76]	; (18730 <at_host_init+0x15c>)
   186e2:	601a      	str	r2, [r3, #0]
   186e4:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   186e8:	4812      	ldr	r0, [pc, #72]	; (18734 <at_host_init+0x160>)
   186ea:	230a      	movs	r3, #10
   186ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   186f0:	4911      	ldr	r1, [pc, #68]	; (18738 <at_host_init+0x164>)
   186f2:	f00c f913 	bl	2491c <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   186f6:	6828      	ldr	r0, [r5, #0]
   186f8:	f015 fd79 	bl	2e1ee <z_impl_uart_irq_rx_enable>
	return err;
   186fc:	e780      	b.n	18600 <at_host_init+0x2c>
   186fe:	bf00      	nop
   18700:	20026281 	.word	0x20026281
   18704:	0002e1f9 	.word	0x0002e1f9
   18708:	0002ebcc 	.word	0x0002ebcc
   1870c:	0002ebc4 	.word	0x0002ebc4
   18710:	00031970 	.word	0x00031970
   18714:	00030491 	.word	0x00030491
   18718:	20021750 	.word	0x20021750
   1871c:	0003198e 	.word	0x0003198e
   18720:	00031a09 	.word	0x00031a09
   18724:	0003199e 	.word	0x0003199e
   18728:	00018475 	.word	0x00018475
   1872c:	20021744 	.word	0x20021744
   18730:	000183c9 	.word	0x000183c9
   18734:	20020fc8 	.word	0x20020fc8
   18738:	20027b28 	.word	0x20027b28
   1873c:	000319d4 	.word	0x000319d4

00018740 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   18740:	4b06      	ldr	r3, [pc, #24]	; (1875c <is_valid_notification_char+0x1c>)
   18742:	5cc3      	ldrb	r3, [r0, r3]
   18744:	f003 0303 	and.w	r3, r3, #3
   18748:	2b02      	cmp	r3, #2
   1874a:	bf08      	it	eq
   1874c:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   1874e:	3841      	subs	r0, #65	; 0x41
   18750:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   18752:	2819      	cmp	r0, #25
   18754:	bf8c      	ite	hi
   18756:	2000      	movhi	r0, #0
   18758:	2001      	movls	r0, #1
   1875a:	4770      	bx	lr
   1875c:	0002f3c9 	.word	0x0002f3c9

00018760 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   18760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   18764:	6805      	ldr	r5, [r0, #0]
{
   18766:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   18768:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1876a:	782b      	ldrb	r3, [r5, #0]
{
   1876c:	4680      	mov	r8, r0
   1876e:	460f      	mov	r7, r1
   18770:	4616      	mov	r6, r2
   18772:	2b00      	cmp	r3, #0
   18774:	f000 80c8 	beq.w	18908 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   18778:	4b65      	ldr	r3, [pc, #404]	; (18910 <at_parse_process_element+0x1b0>)
   1877a:	781c      	ldrb	r4, [r3, #0]
   1877c:	2c06      	cmp	r4, #6
   1877e:	d110      	bne.n	187a2 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   18780:	1c6b      	adds	r3, r5, #1
   18782:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   18784:	9a00      	ldr	r2, [sp, #0]
   18786:	7810      	ldrb	r0, [r2, #0]
   18788:	f7ff ffda 	bl	18740 <is_valid_notification_char>
   1878c:	b930      	cbnz	r0, 1879c <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1878e:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   18790:	462a      	mov	r2, r5
   18792:	4639      	mov	r1, r7
   18794:	4630      	mov	r0, r6
   18796:	f015 fdab 	bl	2e2f0 <at_params_string_put>
   1879a:	e01b      	b.n	187d4 <at_parse_process_element+0x74>
			tmpstr++;
   1879c:	3201      	adds	r2, #1
   1879e:	9200      	str	r2, [sp, #0]
   187a0:	e7f0      	b.n	18784 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   187a2:	2c07      	cmp	r4, #7
   187a4:	d124      	bne.n	187f0 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   187a6:	4668      	mov	r0, sp
   187a8:	f015 fd32 	bl	2e210 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   187ac:	9a00      	ldr	r2, [sp, #0]
   187ae:	7810      	ldrb	r0, [r2, #0]
   187b0:	f7ff ffc6 	bl	18740 <is_valid_notification_char>
   187b4:	b9a8      	cbnz	r0, 187e2 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   187b6:	1b53      	subs	r3, r2, r5
   187b8:	4639      	mov	r1, r7
   187ba:	462a      	mov	r2, r5
   187bc:	4630      	mov	r0, r6
   187be:	f015 fd97 	bl	2e2f0 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   187c2:	9b00      	ldr	r3, [sp, #0]
   187c4:	781a      	ldrb	r2, [r3, #0]
   187c6:	2a3d      	cmp	r2, #61	; 0x3d
   187c8:	d10e      	bne.n	187e8 <at_parse_process_element+0x88>
   187ca:	785a      	ldrb	r2, [r3, #1]
   187cc:	2a3f      	cmp	r2, #63	; 0x3f
   187ce:	d101      	bne.n	187d4 <at_parse_process_element+0x74>
			tmpstr += 2;
   187d0:	3302      	adds	r3, #2
			tmpstr++;
   187d2:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   187d4:	2000      	movs	r0, #0
	*str = tmpstr;
   187d6:	9b00      	ldr	r3, [sp, #0]
   187d8:	f8c8 3000 	str.w	r3, [r8]
}
   187dc:	b023      	add	sp, #140	; 0x8c
   187de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   187e2:	3201      	adds	r2, #1
   187e4:	9200      	str	r2, [sp, #0]
   187e6:	e7e1      	b.n	187ac <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   187e8:	2a3f      	cmp	r2, #63	; 0x3f
   187ea:	d1f3      	bne.n	187d4 <at_parse_process_element+0x74>
			tmpstr++;
   187ec:	3301      	adds	r3, #1
   187ee:	e7f0      	b.n	187d2 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   187f0:	2c08      	cmp	r4, #8
   187f2:	d103      	bne.n	187fc <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   187f4:	4610      	mov	r0, r2
   187f6:	f015 fd52 	bl	2e29e <at_params_empty_put>
   187fa:	e7eb      	b.n	187d4 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   187fc:	2c02      	cmp	r4, #2
   187fe:	d111      	bne.n	18824 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   18800:	9a00      	ldr	r2, [sp, #0]
   18802:	7811      	ldrb	r1, [r2, #0]
   18804:	4608      	mov	r0, r1
   18806:	f015 fcfa 	bl	2e1fe <is_lfcr>
   1880a:	b918      	cbnz	r0, 18814 <at_parse_process_element+0xb4>
   1880c:	b111      	cbz	r1, 18814 <at_parse_process_element+0xb4>
			tmpstr++;
   1880e:	3201      	adds	r2, #1
   18810:	9200      	str	r2, [sp, #0]
   18812:	e7f5      	b.n	18800 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   18814:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   18816:	462a      	mov	r2, r5
   18818:	4639      	mov	r1, r7
   1881a:	4630      	mov	r0, r6
   1881c:	f015 fd68 	bl	2e2f0 <at_params_string_put>
		tmpstr++;
   18820:	9b00      	ldr	r3, [sp, #0]
   18822:	e7e3      	b.n	187ec <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   18824:	2c03      	cmp	r4, #3
   18826:	d109      	bne.n	1883c <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   18828:	9b00      	ldr	r3, [sp, #0]
   1882a:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1882c:	2a22      	cmp	r2, #34	; 0x22
   1882e:	d003      	beq.n	18838 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18830:	b112      	cbz	r2, 18838 <at_parse_process_element+0xd8>
			tmpstr++;
   18832:	3301      	adds	r3, #1
   18834:	9300      	str	r3, [sp, #0]
   18836:	e7f7      	b.n	18828 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   18838:	1b5b      	subs	r3, r3, r5
   1883a:	e7ec      	b.n	18816 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   1883c:	2c01      	cmp	r4, #1
   1883e:	d13c      	bne.n	188ba <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   18840:	4628      	mov	r0, r5
   18842:	220a      	movs	r2, #10
   18844:	a901      	add	r1, sp, #4
   18846:	f00e fbb9 	bl	26fbc <strtoul>
		tmpstr = next;
   1884a:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1884c:	4d31      	ldr	r5, [pc, #196]	; (18914 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1884e:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   18850:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   18852:	9800      	ldr	r0, [sp, #0]
   18854:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   18856:	2b29      	cmp	r3, #41	; 0x29
   18858:	d028      	beq.n	188ac <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1885a:	b33b      	cbz	r3, 188ac <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1885c:	3b2c      	subs	r3, #44	; 0x2c
   1885e:	b2db      	uxtb	r3, r3
   18860:	3001      	adds	r0, #1
   18862:	2b11      	cmp	r3, #17
				tmparray[i++] =
   18864:	9000      	str	r0, [sp, #0]
   18866:	d803      	bhi.n	18870 <at_parse_process_element+0x110>
   18868:	fa25 f303 	lsr.w	r3, r5, r3
   1886c:	07db      	lsls	r3, r3, #31
   1886e:	d408      	bmi.n	18882 <at_parse_process_element+0x122>
				tmpstr++;
   18870:	46a1      	mov	r9, r4
   18872:	e004      	b.n	1887e <at_parse_process_element+0x11e>
					tmpstr = next;
   18874:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   18876:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   1887a:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1887c:	d015      	beq.n	188aa <at_parse_process_element+0x14a>
				tmpstr++;
   1887e:	464c      	mov	r4, r9
   18880:	e7e7      	b.n	18852 <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   18882:	220a      	movs	r2, #10
   18884:	a901      	add	r1, sp, #4
   18886:	f00e fb99 	bl	26fbc <strtoul>
				tmparray[i++] =
   1888a:	ab22      	add	r3, sp, #136	; 0x88
   1888c:	f104 0901 	add.w	r9, r4, #1
   18890:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   18894:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   18898:	9800      	ldr	r0, [sp, #0]
   1889a:	f00d ffa3 	bl	267e4 <strlen>
   1889e:	4604      	mov	r4, r0
   188a0:	9801      	ldr	r0, [sp, #4]
   188a2:	f00d ff9f 	bl	267e4 <strlen>
   188a6:	4284      	cmp	r4, r0
   188a8:	d1e4      	bne.n	18874 <at_parse_process_element+0x114>
   188aa:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   188ac:	4639      	mov	r1, r7
   188ae:	4630      	mov	r0, r6
   188b0:	00a3      	lsls	r3, r4, #2
   188b2:	aa02      	add	r2, sp, #8
   188b4:	f015 fd42 	bl	2e33c <at_params_array_put>
   188b8:	e7b2      	b.n	18820 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   188ba:	2c04      	cmp	r4, #4
   188bc:	d115      	bne.n	188ea <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   188be:	220a      	movs	r2, #10
   188c0:	4628      	mov	r0, r5
   188c2:	a902      	add	r1, sp, #8
   188c4:	f00e fb7a 	bl	26fbc <strtoul>
		tmpstr = next;
   188c8:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   188ca:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   188ce:	4602      	mov	r2, r0
		tmpstr = next;
   188d0:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   188d2:	da05      	bge.n	188e0 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   188d4:	b282      	uxth	r2, r0
   188d6:	4639      	mov	r1, r7
   188d8:	4630      	mov	r0, r6
   188da:	f015 fccb 	bl	2e274 <at_params_short_put>
   188de:	e779      	b.n	187d4 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   188e0:	4639      	mov	r1, r7
   188e2:	4630      	mov	r0, r6
   188e4:	f015 fcef 	bl	2e2c6 <at_params_int_put>
   188e8:	e774      	b.n	187d4 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   188ea:	2c05      	cmp	r4, #5
   188ec:	f47f af72 	bne.w	187d4 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   188f0:	4909      	ldr	r1, [pc, #36]	; (18918 <at_parse_process_element+0x1b8>)
   188f2:	9b00      	ldr	r3, [sp, #0]
   188f4:	781a      	ldrb	r2, [r3, #0]
   188f6:	5c52      	ldrb	r2, [r2, r1]
   188f8:	f012 0f44 	tst.w	r2, #68	; 0x44
   188fc:	d101      	bne.n	18902 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   188fe:	1b5b      	subs	r3, r3, r5
   18900:	e746      	b.n	18790 <at_parse_process_element+0x30>
			tmpstr++;
   18902:	3301      	adds	r3, #1
   18904:	9300      	str	r3, [sp, #0]
   18906:	e7f4      	b.n	188f2 <at_parse_process_element+0x192>
		return -1;
   18908:	f04f 30ff 	mov.w	r0, #4294967295
   1890c:	e766      	b.n	187dc <at_parse_process_element+0x7c>
   1890e:	bf00      	nop
   18910:	20026282 	.word	0x20026282
   18914:	00024001 	.word	0x00024001
   18918:	0002f3c9 	.word	0x0002f3c9

0001891c <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1891c:	b510      	push	{r4, lr}
   1891e:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   18920:	f00d ff60 	bl	267e4 <strlen>
   18924:	2801      	cmp	r0, #1
   18926:	d922      	bls.n	1896e <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   18928:	7821      	ldrb	r1, [r4, #0]
   1892a:	4b13      	ldr	r3, [pc, #76]	; (18978 <is_command+0x5c>)
   1892c:	5cca      	ldrb	r2, [r1, r3]
   1892e:	f002 0203 	and.w	r2, r2, #3
   18932:	2a02      	cmp	r2, #2
   18934:	bf08      	it	eq
   18936:	3920      	subeq	r1, #32
   18938:	2941      	cmp	r1, #65	; 0x41
   1893a:	461a      	mov	r2, r3
   1893c:	d117      	bne.n	1896e <is_command+0x52>
   1893e:	7863      	ldrb	r3, [r4, #1]
   18940:	5cd2      	ldrb	r2, [r2, r3]
   18942:	f002 0203 	and.w	r2, r2, #3
   18946:	2a02      	cmp	r2, #2
   18948:	bf08      	it	eq
   1894a:	3b20      	subeq	r3, #32
   1894c:	2b54      	cmp	r3, #84	; 0x54
   1894e:	d10e      	bne.n	1896e <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18950:	78a2      	ldrb	r2, [r4, #2]
   18952:	2a25      	cmp	r2, #37	; 0x25
   18954:	d00d      	beq.n	18972 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   18956:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1895a:	2b23      	cmp	r3, #35	; 0x23
   1895c:	d009      	beq.n	18972 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1895e:	4610      	mov	r0, r2
   18960:	f015 fc4d 	bl	2e1fe <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   18964:	b910      	cbnz	r0, 1896c <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18966:	fab2 f082 	clz	r0, r2
   1896a:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1896c:	bd10      	pop	{r4, pc}
		return false;
   1896e:	2000      	movs	r0, #0
   18970:	e7fc      	b.n	1896c <is_command+0x50>
		return true;
   18972:	2001      	movs	r0, #1
   18974:	e7fa      	b.n	1896c <is_command+0x50>
   18976:	bf00      	nop
   18978:	0002f3c9 	.word	0x0002f3c9

0001897c <at_parse_detect_type>:
{
   1897c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1897e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   18980:	2900      	cmp	r1, #0
{
   18982:	4605      	mov	r5, r0
   18984:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   18986:	d141      	bne.n	18a0c <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18988:	2a2b      	cmp	r2, #43	; 0x2b
   1898a:	4e29      	ldr	r6, [pc, #164]	; (18a30 <at_parse_detect_type+0xb4>)
   1898c:	d001      	beq.n	18992 <at_parse_detect_type+0x16>
   1898e:	2a25      	cmp	r2, #37	; 0x25
   18990:	d104      	bne.n	1899c <at_parse_detect_type+0x20>
	state = new_state;
   18992:	2306      	movs	r3, #6
   18994:	7033      	strb	r3, [r6, #0]
	return 0;
   18996:	2000      	movs	r0, #0
	*str = tmpstr;
   18998:	602c      	str	r4, [r5, #0]
}
   1899a:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   1899c:	4620      	mov	r0, r4
   1899e:	f7ff ffbd 	bl	1891c <is_command>
   189a2:	b388      	cbz	r0, 18a08 <at_parse_detect_type+0x8c>
	state = new_state;
   189a4:	2307      	movs	r3, #7
   189a6:	e7f5      	b.n	18994 <at_parse_detect_type+0x18>
	if (chr == '"') {
   189a8:	2a22      	cmp	r2, #34	; 0x22
   189aa:	d006      	beq.n	189ba <at_parse_detect_type+0x3e>
	if (chr == '(') {
   189ac:	2a28      	cmp	r2, #40	; 0x28
   189ae:	d109      	bne.n	189c4 <at_parse_detect_type+0x48>
   189b0:	2201      	movs	r2, #1
   189b2:	4b1f      	ldr	r3, [pc, #124]	; (18a30 <at_parse_detect_type+0xb4>)
		tmpstr++;
   189b4:	4414      	add	r4, r2
	state = new_state;
   189b6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   189b8:	e7ed      	b.n	18996 <at_parse_detect_type+0x1a>
	state = new_state;
   189ba:	2203      	movs	r2, #3
   189bc:	4b1c      	ldr	r3, [pc, #112]	; (18a30 <at_parse_detect_type+0xb4>)
		tmpstr++;
   189be:	3401      	adds	r4, #1
	state = new_state;
   189c0:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   189c2:	e7e8      	b.n	18996 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   189c4:	4610      	mov	r0, r2
   189c6:	f015 fc1a 	bl	2e1fe <is_lfcr>
   189ca:	b170      	cbz	r0, 189ea <at_parse_detect_type+0x6e>
   189cc:	4918      	ldr	r1, [pc, #96]	; (18a30 <at_parse_detect_type+0xb4>)
   189ce:	7808      	ldrb	r0, [r1, #0]
   189d0:	2804      	cmp	r0, #4
   189d2:	d108      	bne.n	189e6 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   189d4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   189d8:	f015 fc11 	bl	2e1fe <is_lfcr>
   189dc:	2800      	cmp	r0, #0
   189de:	d1f9      	bne.n	189d4 <at_parse_detect_type+0x58>
	state = new_state;
   189e0:	2305      	movs	r3, #5
   189e2:	700b      	strb	r3, [r1, #0]
}
   189e4:	e7d7      	b.n	18996 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   189e6:	2808      	cmp	r0, #8
   189e8:	d0d5      	beq.n	18996 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   189ea:	3a2c      	subs	r2, #44	; 0x2c
   189ec:	b2d2      	uxtb	r2, r2
   189ee:	2a11      	cmp	r2, #17
   189f0:	d807      	bhi.n	18a02 <at_parse_detect_type+0x86>
   189f2:	4b10      	ldr	r3, [pc, #64]	; (18a34 <at_parse_detect_type+0xb8>)
   189f4:	fa23 f202 	lsr.w	r2, r3, r2
   189f8:	07d3      	lsls	r3, r2, #31
   189fa:	d502      	bpl.n	18a02 <at_parse_detect_type+0x86>
	state = new_state;
   189fc:	2208      	movs	r2, #8
   189fe:	4b0c      	ldr	r3, [pc, #48]	; (18a30 <at_parse_detect_type+0xb4>)
   18a00:	e013      	b.n	18a2a <at_parse_detect_type+0xae>
		return -1;
   18a02:	f04f 30ff 	mov.w	r0, #4294967295
   18a06:	e7c8      	b.n	1899a <at_parse_detect_type+0x1e>
	state = new_state;
   18a08:	2302      	movs	r3, #2
   18a0a:	e7c3      	b.n	18994 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   18a0c:	dd03      	ble.n	18a16 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18a0e:	2a2b      	cmp	r2, #43	; 0x2b
   18a10:	d0f7      	beq.n	18a02 <at_parse_detect_type+0x86>
   18a12:	2a25      	cmp	r2, #37	; 0x25
   18a14:	d0f5      	beq.n	18a02 <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   18a16:	4b08      	ldr	r3, [pc, #32]	; (18a38 <at_parse_detect_type+0xbc>)
   18a18:	5cd3      	ldrb	r3, [r2, r3]
   18a1a:	0759      	lsls	r1, r3, #29
   18a1c:	d403      	bmi.n	18a26 <at_parse_detect_type+0xaa>
   18a1e:	2a2d      	cmp	r2, #45	; 0x2d
   18a20:	d001      	beq.n	18a26 <at_parse_detect_type+0xaa>
   18a22:	2a2b      	cmp	r2, #43	; 0x2b
   18a24:	d1c0      	bne.n	189a8 <at_parse_detect_type+0x2c>
	state = new_state;
   18a26:	2204      	movs	r2, #4
   18a28:	4b01      	ldr	r3, [pc, #4]	; (18a30 <at_parse_detect_type+0xb4>)
   18a2a:	701a      	strb	r2, [r3, #0]
}
   18a2c:	e7b3      	b.n	18996 <at_parse_detect_type+0x1a>
   18a2e:	bf00      	nop
   18a30:	20026282 	.word	0x20026282
   18a34:	00024001 	.word	0x00024001
   18a38:	0002f3c9 	.word	0x0002f3c9

00018a3c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   18a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a40:	4688      	mov	r8, r1
   18a42:	4616      	mov	r6, r2
   18a44:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   18a46:	4604      	mov	r4, r0
   18a48:	2800      	cmp	r0, #0
   18a4a:	d07e      	beq.n	18b4a <at_parser_max_params_from_str+0x10e>
   18a4c:	2a00      	cmp	r2, #0
   18a4e:	d07c      	beq.n	18b4a <at_parser_max_params_from_str+0x10e>
   18a50:	6853      	ldr	r3, [r2, #4]
   18a52:	2b00      	cmp	r3, #0
   18a54:	d079      	beq.n	18b4a <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   18a56:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   18a58:	4610      	mov	r0, r2
   18a5a:	f000 f8eb 	bl	18c34 <at_params_list_clear>
	const char *str = *at_params_str;
   18a5e:	9401      	str	r4, [sp, #4]
	int index = 0;
   18a60:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   18a62:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   18a64:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 18b54 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   18a68:	429f      	cmp	r7, r3
   18a6a:	bf28      	it	cs
   18a6c:	461f      	movcs	r7, r3
	state = IDLE;
   18a6e:	4b38      	ldr	r3, [pc, #224]	; (18b50 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18a70:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 18b58 <at_parser_max_params_from_str+0x11c>
   18a74:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   18a76:	9b01      	ldr	r3, [sp, #4]
   18a78:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18a7a:	2a00      	cmp	r2, #0
   18a7c:	d04b      	beq.n	18b16 <at_parser_max_params_from_str+0xda>
   18a7e:	42a7      	cmp	r7, r4
   18a80:	d949      	bls.n	18b16 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   18a82:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   18a86:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   18a88:	0711      	lsls	r1, r2, #28
			str++;
   18a8a:	bf48      	it	mi
   18a8c:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   18a8e:	4621      	mov	r1, r4
			str++;
   18a90:	bf48      	it	mi
   18a92:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   18a94:	f7ff ff72 	bl	1897c <at_parse_detect_type>
   18a98:	1c42      	adds	r2, r0, #1
   18a9a:	d03c      	beq.n	18b16 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   18a9c:	4632      	mov	r2, r6
   18a9e:	4621      	mov	r1, r4
   18aa0:	a801      	add	r0, sp, #4
   18aa2:	f7ff fe5d 	bl	18760 <at_parse_process_element>
   18aa6:	1c43      	adds	r3, r0, #1
   18aa8:	d035      	beq.n	18b16 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   18aaa:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18aac:	781a      	ldrb	r2, [r3, #0]
   18aae:	3a2c      	subs	r2, #44	; 0x2c
   18ab0:	b2d2      	uxtb	r2, r2
   18ab2:	2a11      	cmp	r2, #17
   18ab4:	d81a      	bhi.n	18aec <at_parser_max_params_from_str+0xb0>
   18ab6:	fa2a f202 	lsr.w	r2, sl, r2
   18aba:	07d1      	lsls	r1, r2, #31
   18abc:	d516      	bpl.n	18aec <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   18abe:	7858      	ldrb	r0, [r3, #1]
   18ac0:	f015 fb9d 	bl	2e1fe <is_lfcr>
   18ac4:	b178      	cbz	r0, 18ae6 <at_parser_max_params_from_str+0xaa>
				index++;
   18ac6:	3401      	adds	r4, #1
				if (index == max_params) {
   18ac8:	42bc      	cmp	r4, r7
   18aca:	d039      	beq.n	18b40 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   18acc:	4621      	mov	r1, r4
   18ace:	a801      	add	r0, sp, #4
   18ad0:	f7ff ff54 	bl	1897c <at_parse_detect_type>
   18ad4:	1c42      	adds	r2, r0, #1
   18ad6:	d01e      	beq.n	18b16 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   18ad8:	4632      	mov	r2, r6
   18ada:	4621      	mov	r1, r4
   18adc:	a801      	add	r0, sp, #4
   18ade:	f7ff fe3f 	bl	18760 <at_parse_process_element>
   18ae2:	1c43      	adds	r3, r0, #1
   18ae4:	d017      	beq.n	18b16 <at_parser_max_params_from_str+0xda>
			str++;
   18ae6:	9b01      	ldr	r3, [sp, #4]
   18ae8:	3301      	adds	r3, #1
   18aea:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   18aec:	9a01      	ldr	r2, [sp, #4]
   18aee:	7810      	ldrb	r0, [r2, #0]
   18af0:	f015 fb85 	bl	2e1fe <is_lfcr>
   18af4:	b1f8      	cbz	r0, 18b36 <at_parser_max_params_from_str+0xfa>
   18af6:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   18af8:	7811      	ldrb	r1, [r2, #0]
   18afa:	4693      	mov	fp, r2
   18afc:	4608      	mov	r0, r1
   18afe:	3201      	adds	r2, #1
   18b00:	f015 fb7d 	bl	2e1fe <is_lfcr>
   18b04:	2800      	cmp	r0, #0
   18b06:	d1f7      	bne.n	18af8 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18b08:	b119      	cbz	r1, 18b12 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18b0a:	292b      	cmp	r1, #43	; 0x2b
   18b0c:	d001      	beq.n	18b12 <at_parser_max_params_from_str+0xd6>
   18b0e:	2925      	cmp	r1, #37	; 0x25
   18b10:	d111      	bne.n	18b36 <at_parser_max_params_from_str+0xfa>
				str += i;
   18b12:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   18b16:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   18b18:	b9a5      	cbnz	r5, 18b44 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18b1a:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   18b1c:	2a00      	cmp	r2, #0
   18b1e:	bf0c      	ite	eq
   18b20:	2000      	moveq	r0, #0
   18b22:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   18b26:	f1b8 0f00 	cmp.w	r8, #0
   18b2a:	d001      	beq.n	18b30 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   18b2c:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   18b30:	b003      	add	sp, #12
   18b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   18b36:	3401      	adds	r4, #1
			oversized = true;
   18b38:	42bc      	cmp	r4, r7
   18b3a:	bf08      	it	eq
   18b3c:	2501      	moveq	r5, #1
   18b3e:	e79a      	b.n	18a76 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   18b40:	4605      	mov	r5, r0
   18b42:	e7e8      	b.n	18b16 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   18b44:	f06f 0006 	mvn.w	r0, #6
   18b48:	e7ed      	b.n	18b26 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   18b4a:	f06f 0015 	mvn.w	r0, #21
   18b4e:	e7ef      	b.n	18b30 <at_parser_max_params_from_str+0xf4>
   18b50:	20026282 	.word	0x20026282
   18b54:	0002f3c9 	.word	0x0002f3c9
   18b58:	00024001 	.word	0x00024001

00018b5c <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   18b5c:	b538      	push	{r3, r4, r5, lr}
   18b5e:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   18b60:	4605      	mov	r5, r0
   18b62:	b960      	cbnz	r0, 18b7e <at_params_get+0x22>
   18b64:	490a      	ldr	r1, [pc, #40]	; (18b90 <at_params_get+0x34>)
   18b66:	232b      	movs	r3, #43	; 0x2b
   18b68:	4a0a      	ldr	r2, [pc, #40]	; (18b94 <at_params_get+0x38>)
   18b6a:	480b      	ldr	r0, [pc, #44]	; (18b98 <at_params_get+0x3c>)
   18b6c:	f013 fa47 	bl	2bffe <printk>
   18b70:	480a      	ldr	r0, [pc, #40]	; (18b9c <at_params_get+0x40>)
   18b72:	f013 fa44 	bl	2bffe <printk>
   18b76:	212b      	movs	r1, #43	; 0x2b
   18b78:	4806      	ldr	r0, [pc, #24]	; (18b94 <at_params_get+0x38>)
   18b7a:	f013 fc5d 	bl	2c438 <assert_post_action>

	if (index >= list->param_count) {
   18b7e:	682b      	ldr	r3, [r5, #0]
   18b80:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   18b82:	bf85      	ittet	hi
   18b84:	210c      	movhi	r1, #12
   18b86:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   18b88:	2000      	movls	r0, #0
	return &param[index];
   18b8a:	fb01 0004 	mlahi	r0, r1, r4, r0
}
   18b8e:	bd38      	pop	{r3, r4, r5, pc}
   18b90:	00031a61 	.word	0x00031a61
   18b94:	00031a33 	.word	0x00031a33
   18b98:	0002ff0d 	.word	0x0002ff0d
   18b9c:	00031a75 	.word	0x00031a75

00018ba0 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   18ba0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18ba2:	4604      	mov	r4, r0
   18ba4:	b960      	cbnz	r0, 18bc0 <at_param_size+0x20>
   18ba6:	490e      	ldr	r1, [pc, #56]	; (18be0 <at_param_size+0x40>)
   18ba8:	2339      	movs	r3, #57	; 0x39
   18baa:	4a0e      	ldr	r2, [pc, #56]	; (18be4 <at_param_size+0x44>)
   18bac:	480e      	ldr	r0, [pc, #56]	; (18be8 <at_param_size+0x48>)
   18bae:	f013 fa26 	bl	2bffe <printk>
   18bb2:	480e      	ldr	r0, [pc, #56]	; (18bec <at_param_size+0x4c>)
   18bb4:	f013 fa23 	bl	2bffe <printk>
   18bb8:	2139      	movs	r1, #57	; 0x39
   18bba:	480a      	ldr	r0, [pc, #40]	; (18be4 <at_param_size+0x44>)
   18bbc:	f013 fc3c 	bl	2c438 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   18bc0:	7823      	ldrb	r3, [r4, #0]
   18bc2:	2b01      	cmp	r3, #1
   18bc4:	d006      	beq.n	18bd4 <at_param_size+0x34>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   18bc6:	2b02      	cmp	r3, #2
   18bc8:	d006      	beq.n	18bd8 <at_param_size+0x38>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   18bca:	3b03      	subs	r3, #3
   18bcc:	2b01      	cmp	r3, #1
   18bce:	d805      	bhi.n	18bdc <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   18bd0:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   18bd2:	bd10      	pop	{r4, pc}
		return sizeof(uint16_t);
   18bd4:	2002      	movs	r0, #2
   18bd6:	e7fc      	b.n	18bd2 <at_param_size+0x32>
		return sizeof(uint32_t);
   18bd8:	2004      	movs	r0, #4
   18bda:	e7fa      	b.n	18bd2 <at_param_size+0x32>
	return 0;
   18bdc:	2000      	movs	r0, #0
   18bde:	e7f8      	b.n	18bd2 <at_param_size+0x32>
   18be0:	00031a96 	.word	0x00031a96
   18be4:	00031a33 	.word	0x00031a33
   18be8:	0002ff0d 	.word	0x0002ff0d
   18bec:	00031aab 	.word	0x00031aab

00018bf0 <at_param_clear>:
{
   18bf0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18bf2:	4604      	mov	r4, r0
   18bf4:	b960      	cbnz	r0, 18c10 <at_param_clear+0x20>
   18bf6:	490b      	ldr	r1, [pc, #44]	; (18c24 <at_param_clear+0x34>)
   18bf8:	231d      	movs	r3, #29
   18bfa:	4a0b      	ldr	r2, [pc, #44]	; (18c28 <at_param_clear+0x38>)
   18bfc:	480b      	ldr	r0, [pc, #44]	; (18c2c <at_param_clear+0x3c>)
   18bfe:	f013 f9fe 	bl	2bffe <printk>
   18c02:	480b      	ldr	r0, [pc, #44]	; (18c30 <at_param_clear+0x40>)
   18c04:	f013 f9fb 	bl	2bffe <printk>
   18c08:	211d      	movs	r1, #29
   18c0a:	4807      	ldr	r0, [pc, #28]	; (18c28 <at_param_clear+0x38>)
   18c0c:	f013 fc14 	bl	2c438 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   18c10:	7823      	ldrb	r3, [r4, #0]
   18c12:	3b03      	subs	r3, #3
   18c14:	2b01      	cmp	r3, #1
   18c16:	d802      	bhi.n	18c1e <at_param_clear+0x2e>
		k_free(param->value.str_val);
   18c18:	68a0      	ldr	r0, [r4, #8]
   18c1a:	f015 fe54 	bl	2e8c6 <k_free>
	param->value.int_val = 0;
   18c1e:	2300      	movs	r3, #0
   18c20:	60a3      	str	r3, [r4, #8]
}
   18c22:	bd10      	pop	{r4, pc}
   18c24:	00031a96 	.word	0x00031a96
   18c28:	00031a33 	.word	0x00031a33
   18c2c:	0002ff0d 	.word	0x0002ff0d
   18c30:	00031aab 	.word	0x00031aab

00018c34 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   18c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   18c38:	4604      	mov	r4, r0
   18c3a:	b158      	cbz	r0, 18c54 <at_params_list_clear+0x20>
   18c3c:	6843      	ldr	r3, [r0, #4]
   18c3e:	b14b      	cbz	r3, 18c54 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   18c40:	2500      	movs	r5, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18c42:	f8df b054 	ldr.w	fp, [pc, #84]	; 18c98 <at_params_list_clear+0x64>
   18c46:	f8df 9054 	ldr.w	r9, [pc, #84]	; 18c9c <at_params_list_clear+0x68>
   18c4a:	f8df a054 	ldr.w	sl, [pc, #84]	; 18ca0 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   18c4e:	6823      	ldr	r3, [r4, #0]
   18c50:	429d      	cmp	r5, r3
   18c52:	d301      	bcc.n	18c58 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   18c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   18c58:	270c      	movs	r7, #12
   18c5a:	436f      	muls	r7, r5
   18c5c:	f8d4 8004 	ldr.w	r8, [r4, #4]
   18c60:	eb08 0607 	add.w	r6, r8, r7
   18c64:	4630      	mov	r0, r6
   18c66:	f7ff ffc3 	bl	18bf0 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18c6a:	b966      	cbnz	r6, 18c86 <at_params_list_clear+0x52>
   18c6c:	4649      	mov	r1, r9
   18c6e:	2314      	movs	r3, #20
   18c70:	465a      	mov	r2, fp
   18c72:	4650      	mov	r0, sl
   18c74:	f013 f9c3 	bl	2bffe <printk>
   18c78:	4806      	ldr	r0, [pc, #24]	; (18c94 <at_params_list_clear+0x60>)
   18c7a:	f013 f9c0 	bl	2bffe <printk>
   18c7e:	2114      	movs	r1, #20
   18c80:	4658      	mov	r0, fp
   18c82:	f013 fbd9 	bl	2c438 <assert_post_action>
   18c86:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   18c88:	3501      	adds	r5, #1
   18c8a:	f848 3007 	str.w	r3, [r8, r7]
   18c8e:	6073      	str	r3, [r6, #4]
   18c90:	60b3      	str	r3, [r6, #8]
   18c92:	e7dc      	b.n	18c4e <at_params_list_clear+0x1a>
   18c94:	00031aab 	.word	0x00031aab
   18c98:	00031a33 	.word	0x00031a33
   18c9c:	00031a96 	.word	0x00031a96
   18ca0:	0002ff0d 	.word	0x0002ff0d

00018ca4 <parse_psm_cfg>:
	char timer_str[9] = {0};
   18ca4:	2300      	movs	r3, #0
{
   18ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ca8:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   18caa:	e9cd 3305 	strd	r3, r3, [sp, #20]
   18cae:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   18cb2:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   18cb4:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   18cb6:	2900      	cmp	r1, #0
	err = at_params_string_get(at_params,
   18cb8:	bf14      	ite	ne
   18cba:	2108      	movne	r1, #8
   18cbc:	2109      	moveq	r1, #9
	size_t timer_str_len = sizeof(timer_str) - 1;
   18cbe:	9304      	str	r3, [sp, #16]
{
   18cc0:	4615      	mov	r5, r2
	err = at_params_string_get(at_params,
   18cc2:	ab04      	add	r3, sp, #16
   18cc4:	aa05      	add	r2, sp, #20
{
   18cc6:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   18cc8:	bf14      	ite	ne
   18cca:	2707      	movne	r7, #7
   18ccc:	2708      	moveq	r7, #8
	err = at_params_string_get(at_params,
   18cce:	f015 fb88 	bl	2e3e2 <at_params_string_get>
	if (err) {
   18cd2:	4601      	mov	r1, r0
   18cd4:	b170      	cbz	r0, 18cf4 <parse_psm_cfg+0x50>
   18cd6:	4b34      	ldr	r3, [pc, #208]	; (18da8 <parse_psm_cfg+0x104>)
   18cd8:	4a34      	ldr	r2, [pc, #208]	; (18dac <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   18cda:	4835      	ldr	r0, [pc, #212]	; (18db0 <parse_psm_cfg+0x10c>)
   18cdc:	1ad2      	subs	r2, r2, r3
   18cde:	08d2      	lsrs	r2, r2, #3
   18ce0:	0192      	lsls	r2, r2, #6
   18ce2:	f042 0201 	orr.w	r2, r2, #1
   18ce6:	9101      	str	r1, [sp, #4]
   18ce8:	f013 fbe5 	bl	2c4b6 <log_1>
		return err;
   18cec:	9901      	ldr	r1, [sp, #4]
}
   18cee:	4608      	mov	r0, r1
   18cf0:	b009      	add	sp, #36	; 0x24
   18cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   18cf4:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   18cf6:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   18cf8:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   18cfc:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   18cfe:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   18d00:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   18d02:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   18d06:	f00e f959 	bl	26fbc <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   18d0a:	2807      	cmp	r0, #7
   18d0c:	9901      	ldr	r1, [sp, #4]
   18d0e:	d90c      	bls.n	18d2a <parse_psm_cfg+0x86>
   18d10:	4926      	ldr	r1, [pc, #152]	; (18dac <parse_psm_cfg+0x108>)
   18d12:	4b25      	ldr	r3, [pc, #148]	; (18da8 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse periodic TAU string");
   18d14:	4827      	ldr	r0, [pc, #156]	; (18db4 <parse_psm_cfg+0x110>)
   18d16:	1ac9      	subs	r1, r1, r3
   18d18:	08c9      	lsrs	r1, r1, #3
   18d1a:	0189      	lsls	r1, r1, #6
   18d1c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   18d20:	f013 fbba 	bl	2c498 <log_0>
		return err;
   18d24:	f06f 0115 	mvn.w	r1, #21
   18d28:	e7e1      	b.n	18cee <parse_psm_cfg+0x4a>
	timer_unit = t3412_lookup[lut_idx];
   18d2a:	4b23      	ldr	r3, [pc, #140]	; (18db8 <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18d2c:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   18d2e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18d32:	f10d 0017 	add.w	r0, sp, #23
   18d36:	f00e f941 	bl	26fbc <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18d3a:	b30c      	cbz	r4, 18d80 <parse_psm_cfg+0xdc>
   18d3c:	4344      	muls	r4, r0
	err = at_params_string_get(at_params,
   18d3e:	4639      	mov	r1, r7
   18d40:	4630      	mov	r0, r6
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18d42:	602c      	str	r4, [r5, #0]
	err = at_params_string_get(at_params,
   18d44:	ab04      	add	r3, sp, #16
   18d46:	aa05      	add	r2, sp, #20
   18d48:	f015 fb4b 	bl	2e3e2 <at_params_string_get>
	if (err) {
   18d4c:	4601      	mov	r1, r0
   18d4e:	2800      	cmp	r0, #0
   18d50:	d1c1      	bne.n	18cd6 <parse_psm_cfg+0x32>
	memcpy(unit_str, timer_str, unit_str_len);
   18d52:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   18d54:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   18d56:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   18d5a:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   18d5c:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   18d5e:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   18d60:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   18d64:	f00e f92a 	bl	26fbc <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   18d68:	2807      	cmp	r0, #7
   18d6a:	9901      	ldr	r1, [sp, #4]
   18d6c:	d90b      	bls.n	18d86 <parse_psm_cfg+0xe2>
   18d6e:	490f      	ldr	r1, [pc, #60]	; (18dac <parse_psm_cfg+0x108>)
   18d70:	4b0d      	ldr	r3, [pc, #52]	; (18da8 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse active time string");
   18d72:	4812      	ldr	r0, [pc, #72]	; (18dbc <parse_psm_cfg+0x118>)
   18d74:	1ac9      	subs	r1, r1, r3
   18d76:	08c9      	lsrs	r1, r1, #3
   18d78:	0189      	lsls	r1, r1, #6
   18d7a:	f041 0101 	orr.w	r1, r1, #1
   18d7e:	e7cf      	b.n	18d20 <parse_psm_cfg+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18d80:	f04f 34ff 	mov.w	r4, #4294967295
   18d84:	e7db      	b.n	18d3e <parse_psm_cfg+0x9a>
	timer_unit = t3324_lookup[lut_idx];
   18d86:	4b0e      	ldr	r3, [pc, #56]	; (18dc0 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18d88:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   18d8a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18d8e:	f10d 0017 	add.w	r0, sp, #23
   18d92:	9101      	str	r1, [sp, #4]
   18d94:	f00e f912 	bl	26fbc <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   18d98:	9901      	ldr	r1, [sp, #4]
   18d9a:	b114      	cbz	r4, 18da2 <parse_psm_cfg+0xfe>
   18d9c:	4360      	muls	r0, r4
   18d9e:	6068      	str	r0, [r5, #4]
	return 0;
   18da0:	e7a5      	b.n	18cee <parse_psm_cfg+0x4a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   18da2:	f04f 30ff 	mov.w	r0, #4294967295
   18da6:	e7fa      	b.n	18d9e <parse_psm_cfg+0xfa>
   18da8:	0002ebc4 	.word	0x0002ebc4
   18dac:	0002ec0c 	.word	0x0002ec0c
   18db0:	00031ac7 	.word	0x00031ac7
   18db4:	00031ae4 	.word	0x00031ae4
   18db8:	0002f01c 	.word	0x0002f01c
   18dbc:	00031b08 	.word	0x00031b08
   18dc0:	0002effc 	.word	0x0002effc

00018dc4 <lte_lc_offline>:
{
   18dc4:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   18dc6:	2300      	movs	r3, #0
   18dc8:	4804      	ldr	r0, [pc, #16]	; (18ddc <lte_lc_offline+0x18>)
   18dca:	461a      	mov	r2, r3
   18dcc:	4619      	mov	r1, r3
   18dce:	f7ff f977 	bl	180c0 <at_cmd_write>
   18dd2:	2800      	cmp	r0, #0
}
   18dd4:	bf18      	it	ne
   18dd6:	f06f 0004 	mvnne.w	r0, #4
   18dda:	bd08      	pop	{r3, pc}
   18ddc:	00032202 	.word	0x00032202

00018de0 <lte_lc_normal>:
{
   18de0:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   18de2:	2300      	movs	r3, #0
   18de4:	4804      	ldr	r0, [pc, #16]	; (18df8 <lte_lc_normal+0x18>)
   18de6:	461a      	mov	r2, r3
   18de8:	4619      	mov	r1, r3
   18dea:	f7ff f969 	bl	180c0 <at_cmd_write>
   18dee:	2800      	cmp	r0, #0
}
   18df0:	bf18      	it	ne
   18df2:	f06f 0004 	mvnne.w	r0, #4
   18df6:	bd08      	pop	{r3, pc}
   18df8:	000321f8 	.word	0x000321f8

00018dfc <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   18dfc:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   18dfe:	4605      	mov	r5, r0
{
   18e00:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   18e02:	2800      	cmp	r0, #0
   18e04:	d040      	beq.n	18e88 <lte_lc_system_mode_set+0x8c>
   18e06:	1e43      	subs	r3, r0, #1
   18e08:	2b04      	cmp	r3, #4
   18e0a:	d90e      	bls.n	18e2a <lte_lc_system_mode_set+0x2e>
   18e0c:	4b1f      	ldr	r3, [pc, #124]	; (18e8c <lte_lc_system_mode_set+0x90>)
   18e0e:	4920      	ldr	r1, [pc, #128]	; (18e90 <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   18e10:	4820      	ldr	r0, [pc, #128]	; (18e94 <lte_lc_system_mode_set+0x98>)
   18e12:	1ac9      	subs	r1, r1, r3
   18e14:	08c9      	lsrs	r1, r1, #3
   18e16:	0189      	lsls	r1, r1, #6
   18e18:	f041 0101 	orr.w	r1, r1, #1
   18e1c:	f013 fb3c 	bl	2c498 <log_0>
		return -EINVAL;
   18e20:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   18e24:	4620      	mov	r0, r4
   18e26:	b00f      	add	sp, #60	; 0x3c
   18e28:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   18e2a:	4b1b      	ldr	r3, [pc, #108]	; (18e98 <lte_lc_system_mode_set+0x9c>)
   18e2c:	2132      	movs	r1, #50	; 0x32
   18e2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18e32:	4a1a      	ldr	r2, [pc, #104]	; (18e9c <lte_lc_system_mode_set+0xa0>)
   18e34:	a801      	add	r0, sp, #4
   18e36:	f013 f8ef 	bl	2c018 <snprintk>
	if (len < 0) {
   18e3a:	2800      	cmp	r0, #0
   18e3c:	da0c      	bge.n	18e58 <lte_lc_system_mode_set+0x5c>
   18e3e:	4b13      	ldr	r3, [pc, #76]	; (18e8c <lte_lc_system_mode_set+0x90>)
   18e40:	4913      	ldr	r1, [pc, #76]	; (18e90 <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   18e42:	4817      	ldr	r0, [pc, #92]	; (18ea0 <lte_lc_system_mode_set+0xa4>)
   18e44:	1ac9      	subs	r1, r1, r3
   18e46:	08c9      	lsrs	r1, r1, #3
   18e48:	0189      	lsls	r1, r1, #6
   18e4a:	f041 0101 	orr.w	r1, r1, #1
   18e4e:	f013 fb23 	bl	2c498 <log_0>
		return -EFAULT;
   18e52:	f06f 040d 	mvn.w	r4, #13
   18e56:	e7e5      	b.n	18e24 <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   18e58:	2300      	movs	r3, #0
   18e5a:	a801      	add	r0, sp, #4
   18e5c:	461a      	mov	r2, r3
   18e5e:	4619      	mov	r1, r3
   18e60:	f7ff f92e 	bl	180c0 <at_cmd_write>
	if (err) {
   18e64:	4604      	mov	r4, r0
   18e66:	b150      	cbz	r0, 18e7e <lte_lc_system_mode_set+0x82>
   18e68:	4a09      	ldr	r2, [pc, #36]	; (18e90 <lte_lc_system_mode_set+0x94>)
   18e6a:	4b08      	ldr	r3, [pc, #32]	; (18e8c <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   18e6c:	4601      	mov	r1, r0
   18e6e:	1ad2      	subs	r2, r2, r3
   18e70:	08d2      	lsrs	r2, r2, #3
   18e72:	0192      	lsls	r2, r2, #6
   18e74:	480b      	ldr	r0, [pc, #44]	; (18ea4 <lte_lc_system_mode_set+0xa8>)
   18e76:	f042 0201 	orr.w	r2, r2, #1
   18e7a:	f013 fb1c 	bl	2c4b6 <log_1>
	sys_mode_current = mode;
   18e7e:	4b0a      	ldr	r3, [pc, #40]	; (18ea8 <lte_lc_system_mode_set+0xac>)
   18e80:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   18e82:	4b0a      	ldr	r3, [pc, #40]	; (18eac <lte_lc_system_mode_set+0xb0>)
   18e84:	701d      	strb	r5, [r3, #0]
	return err;
   18e86:	e7cd      	b.n	18e24 <lte_lc_system_mode_set+0x28>
	switch (mode) {
   18e88:	4604      	mov	r4, r0
   18e8a:	e7cb      	b.n	18e24 <lte_lc_system_mode_set+0x28>
   18e8c:	0002ebc4 	.word	0x0002ebc4
   18e90:	0002ec0c 	.word	0x0002ec0c
   18e94:	00031ec7 	.word	0x00031ec7
   18e98:	0002efe4 	.word	0x0002efe4
   18e9c:	00031ee5 	.word	0x00031ee5
   18ea0:	00031ef8 	.word	0x00031ef8
   18ea4:	00031f20 	.word	0x00031f20
   18ea8:	20026285 	.word	0x20026285
   18eac:	20020a5d 	.word	0x20020a5d

00018eb0 <w_lte_lc_connect>:
{
   18eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   18eb4:	4b23      	ldr	r3, [pc, #140]	; (18f44 <w_lte_lc_connect+0x94>)
   18eb6:	4c24      	ldr	r4, [pc, #144]	; (18f48 <w_lte_lc_connect+0x98>)
   18eb8:	4924      	ldr	r1, [pc, #144]	; (18f4c <w_lte_lc_connect+0x9c>)
   18eba:	781b      	ldrb	r3, [r3, #0]
   18ebc:	1a64      	subs	r4, r4, r1
{
   18ebe:	4605      	mov	r5, r0
   18ec0:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   18ec2:	b94b      	cbnz	r3, 18ed8 <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   18ec4:	01a1      	lsls	r1, r4, #6
   18ec6:	4822      	ldr	r0, [pc, #136]	; (18f50 <w_lte_lc_connect+0xa0>)
   18ec8:	f041 0101 	orr.w	r1, r1, #1
   18ecc:	f013 fae4 	bl	2c498 <log_0>
		return -EPERM;
   18ed0:	f04f 30ff 	mov.w	r0, #4294967295
}
   18ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18ed8:	2201      	movs	r2, #1
   18eda:	2100      	movs	r1, #0
   18edc:	481d      	ldr	r0, [pc, #116]	; (18f54 <w_lte_lc_connect+0xa4>)
   18ede:	f015 fba2 	bl	2e626 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   18ee2:	4e1d      	ldr	r6, [pc, #116]	; (18f58 <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   18ee4:	4f1b      	ldr	r7, [pc, #108]	; (18f54 <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   18ee6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 18f60 <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   18eea:	7830      	ldrb	r0, [r6, #0]
   18eec:	f7ff ff86 	bl	18dfc <lte_lc_system_mode_set>
		if (err) {
   18ef0:	2800      	cmp	r0, #0
   18ef2:	d1ef      	bne.n	18ed4 <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   18ef4:	f7ff ff74 	bl	18de0 <lte_lc_normal>
		if (err || !blocking) {
   18ef8:	2800      	cmp	r0, #0
   18efa:	d1eb      	bne.n	18ed4 <w_lte_lc_connect+0x24>
   18efc:	2d00      	cmp	r5, #0
   18efe:	d0e9      	beq.n	18ed4 <w_lte_lc_connect+0x24>
   18f00:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   18f04:	2300      	movs	r3, #0
   18f06:	4638      	mov	r0, r7
   18f08:	f00b fb06 	bl	24518 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   18f0c:	f110 0f0b 	cmn.w	r0, #11
   18f10:	d1e0      	bne.n	18ed4 <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   18f12:	ea4f 1984 	mov.w	r9, r4, lsl #6
   18f16:	f049 0903 	orr.w	r9, r9, #3
   18f1a:	4649      	mov	r1, r9
   18f1c:	4640      	mov	r0, r8
   18f1e:	f013 fabb 	bl	2c498 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   18f22:	7833      	ldrb	r3, [r6, #0]
   18f24:	2b01      	cmp	r3, #1
   18f26:	d10a      	bne.n	18f3e <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   18f28:	2302      	movs	r3, #2
   18f2a:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   18f2c:	f7ff ff4a 	bl	18dc4 <lte_lc_offline>
				if (err) {
   18f30:	2800      	cmp	r0, #0
   18f32:	d1cf      	bne.n	18ed4 <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   18f34:	4649      	mov	r1, r9
   18f36:	4809      	ldr	r0, [pc, #36]	; (18f5c <w_lte_lc_connect+0xac>)
   18f38:	f013 faae 	bl	2c498 <log_0>
	} while (retry);
   18f3c:	e7d5      	b.n	18eea <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   18f3e:	f06f 0073 	mvn.w	r0, #115	; 0x73
   18f42:	e7c7      	b.n	18ed4 <w_lte_lc_connect+0x24>
   18f44:	20026283 	.word	0x20026283
   18f48:	0002ec0c 	.word	0x0002ec0c
   18f4c:	0002ebc4 	.word	0x0002ebc4
   18f50:	00031f45 	.word	0x00031f45
   18f54:	20021758 	.word	0x20021758
   18f58:	20020a5d 	.word	0x20020a5d
   18f5c:	00031f95 	.word	0x00031f95
   18f60:	00031f70 	.word	0x00031f70

00018f64 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   18f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   18f68:	2400      	movs	r4, #0
{
   18f6a:	b090      	sub	sp, #64	; 0x40
   18f6c:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   18f6e:	221a      	movs	r2, #26
   18f70:	4621      	mov	r1, r4
   18f72:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   18f74:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   18f78:	9408      	str	r4, [sp, #32]
   18f7a:	f00d f823 	bl	25fc4 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   18f7e:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   18f80:	e9cd 4404 	strd	r4, r4, [sp, #16]
   18f84:	9406      	str	r4, [sp, #24]
   18f86:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   18f8a:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   18f8c:	2d00      	cmp	r5, #0
   18f8e:	f000 80ad 	beq.w	190ec <lte_lc_system_mode_get+0x188>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   18f92:	4623      	mov	r3, r4
   18f94:	221e      	movs	r2, #30
   18f96:	4857      	ldr	r0, [pc, #348]	; (190f4 <lte_lc_system_mode_get+0x190>)
   18f98:	a908      	add	r1, sp, #32
   18f9a:	f7ff f891 	bl	180c0 <at_cmd_write>
			   NULL);
	if (err) {
   18f9e:	4604      	mov	r4, r0
   18fa0:	b168      	cbz	r0, 18fbe <lte_lc_system_mode_get+0x5a>
   18fa2:	4955      	ldr	r1, [pc, #340]	; (190f8 <lte_lc_system_mode_get+0x194>)
   18fa4:	4b55      	ldr	r3, [pc, #340]	; (190fc <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not send AT command");
   18fa6:	4856      	ldr	r0, [pc, #344]	; (19100 <lte_lc_system_mode_get+0x19c>)
   18fa8:	1ac9      	subs	r1, r1, r3
   18faa:	08c9      	lsrs	r1, r1, #3
   18fac:	0189      	lsls	r1, r1, #6
   18fae:	f041 0101 	orr.w	r1, r1, #1
   18fb2:	f013 fa71 	bl	2c498 <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   18fb6:	4620      	mov	r0, r4
   18fb8:	b010      	add	sp, #64	; 0x40
   18fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   18fbe:	2105      	movs	r1, #5
   18fc0:	a802      	add	r0, sp, #8
   18fc2:	f015 f936 	bl	2e232 <at_params_list_init>
	if (err) {
   18fc6:	4604      	mov	r4, r0
   18fc8:	b158      	cbz	r0, 18fe2 <lte_lc_system_mode_get+0x7e>
   18fca:	4b4c      	ldr	r3, [pc, #304]	; (190fc <lte_lc_system_mode_get+0x198>)
   18fcc:	4a4a      	ldr	r2, [pc, #296]	; (190f8 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could init AT params list, error: %d", err);
   18fce:	4601      	mov	r1, r0
   18fd0:	1ad2      	subs	r2, r2, r3
   18fd2:	08d2      	lsrs	r2, r2, #3
   18fd4:	0192      	lsls	r2, r2, #6
   18fd6:	484b      	ldr	r0, [pc, #300]	; (19104 <lte_lc_system_mode_get+0x1a0>)
   18fd8:	f042 0201 	orr.w	r2, r2, #1
   18fdc:	f013 fa6b 	bl	2c4b6 <log_1>
		return err;
   18fe0:	e7e9      	b.n	18fb6 <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   18fe2:	4601      	mov	r1, r0
   18fe4:	2305      	movs	r3, #5
   18fe6:	aa02      	add	r2, sp, #8
   18fe8:	a808      	add	r0, sp, #32
   18fea:	f7ff fd27 	bl	18a3c <at_parser_max_params_from_str>
	if (err) {
   18fee:	4604      	mov	r4, r0
   18ff0:	b158      	cbz	r0, 1900a <lte_lc_system_mode_get+0xa6>
   18ff2:	4a41      	ldr	r2, [pc, #260]	; (190f8 <lte_lc_system_mode_get+0x194>)
   18ff4:	4b41      	ldr	r3, [pc, #260]	; (190fc <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   18ff6:	4601      	mov	r1, r0
   18ff8:	1ad2      	subs	r2, r2, r3
   18ffa:	08d2      	lsrs	r2, r2, #3
   18ffc:	0192      	lsls	r2, r2, #6
   18ffe:	4842      	ldr	r0, [pc, #264]	; (19108 <lte_lc_system_mode_get+0x1a4>)
   19000:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   19004:	f013 fa57 	bl	2c4b6 <log_1>
			goto clean_exit;
   19008:	e013      	b.n	19032 <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   1900a:	4601      	mov	r1, r0
   1900c:	466b      	mov	r3, sp
   1900e:	aa04      	add	r2, sp, #16
   19010:	a802      	add	r0, sp, #8
   19012:	f015 f9e6 	bl	2e3e2 <at_params_string_get>
	if (err) {
   19016:	4606      	mov	r6, r0
   19018:	b178      	cbz	r0, 1903a <lte_lc_system_mode_get+0xd6>
   1901a:	4b38      	ldr	r3, [pc, #224]	; (190fc <lte_lc_system_mode_get+0x198>)
   1901c:	4a36      	ldr	r2, [pc, #216]	; (190f8 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1901e:	4601      	mov	r1, r0
   19020:	1ad2      	subs	r2, r2, r3
   19022:	08d2      	lsrs	r2, r2, #3
   19024:	0192      	lsls	r2, r2, #6
   19026:	4839      	ldr	r0, [pc, #228]	; (1910c <lte_lc_system_mode_get+0x1a8>)
   19028:	f042 0201 	orr.w	r2, r2, #1
   1902c:	f013 fa43 	bl	2c4b6 <log_1>
		goto clean_exit;
   19030:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   19032:	a802      	add	r0, sp, #8
   19034:	f015 f910 	bl	2e258 <at_params_list_free>
	return err;
   19038:	e7bd      	b.n	18fb6 <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1903a:	4a35      	ldr	r2, [pc, #212]	; (19110 <lte_lc_system_mode_get+0x1ac>)
   1903c:	9900      	ldr	r1, [sp, #0]
   1903e:	a804      	add	r0, sp, #16
   19040:	f015 fa0d 	bl	2e45e <response_is_valid>
   19044:	b960      	cbnz	r0, 19060 <lte_lc_system_mode_get+0xfc>
   19046:	4b2d      	ldr	r3, [pc, #180]	; (190fc <lte_lc_system_mode_get+0x198>)
   19048:	492b      	ldr	r1, [pc, #172]	; (190f8 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   1904a:	4832      	ldr	r0, [pc, #200]	; (19114 <lte_lc_system_mode_get+0x1b0>)
   1904c:	1ac9      	subs	r1, r1, r3
   1904e:	08c9      	lsrs	r1, r1, #3
   19050:	0189      	lsls	r1, r1, #6
   19052:	f041 0101 	orr.w	r1, r1, #1
   19056:	f013 fa1f 	bl	2c498 <log_0>
		err = -EIO;
   1905a:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   1905e:	e7e8      	b.n	19032 <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   19060:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   19062:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   19064:	4639      	mov	r1, r7
   19066:	aa01      	add	r2, sp, #4
   19068:	a802      	add	r0, sp, #8
   1906a:	f015 f9a3 	bl	2e3b4 <at_params_int_get>
		if (err) {
   1906e:	4604      	mov	r4, r0
   19070:	b148      	cbz	r0, 19086 <lte_lc_system_mode_get+0x122>
   19072:	4a21      	ldr	r2, [pc, #132]	; (190f8 <lte_lc_system_mode_get+0x194>)
   19074:	4b21      	ldr	r3, [pc, #132]	; (190fc <lte_lc_system_mode_get+0x198>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   19076:	4601      	mov	r1, r0
   19078:	1ad2      	subs	r2, r2, r3
   1907a:	08d2      	lsrs	r2, r2, #3
   1907c:	0192      	lsls	r2, r2, #6
   1907e:	4826      	ldr	r0, [pc, #152]	; (19118 <lte_lc_system_mode_get+0x1b4>)
   19080:	f042 0201 	orr.w	r2, r2, #1
   19084:	e7be      	b.n	19004 <lte_lc_system_mode_get+0xa0>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   19086:	9b01      	ldr	r3, [sp, #4]
   19088:	b113      	cbz	r3, 19090 <lte_lc_system_mode_get+0x12c>
   1908a:	fa08 f307 	lsl.w	r3, r8, r7
   1908e:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   19090:	3701      	adds	r7, #1
   19092:	2f05      	cmp	r7, #5
   19094:	d1e6      	bne.n	19064 <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   19096:	2e0c      	cmp	r6, #12
   19098:	d81b      	bhi.n	190d2 <lte_lc_system_mode_get+0x16e>
   1909a:	e8df f006 	tbb	[pc, r6]
   1909e:	1a07      	.short	0x1a07
   190a0:	1a121a10 	.word	0x1a121a10
   190a4:	1a141a1a 	.word	0x1a141a1a
   190a8:	1a16      	.short	0x1a16
   190aa:	18          	.byte	0x18
   190ab:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   190ac:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   190ae:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   190b0:	4b1a      	ldr	r3, [pc, #104]	; (1911c <lte_lc_system_mode_get+0x1b8>)
   190b2:	782a      	ldrb	r2, [r5, #0]
   190b4:	7819      	ldrb	r1, [r3, #0]
   190b6:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   190b8:	bf18      	it	ne
   190ba:	701a      	strbne	r2, [r3, #0]
   190bc:	e7b9      	b.n	19032 <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   190be:	2301      	movs	r3, #1
   190c0:	e7f5      	b.n	190ae <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   190c2:	2302      	movs	r3, #2
   190c4:	e7f3      	b.n	190ae <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   190c6:	2303      	movs	r3, #3
   190c8:	e7f1      	b.n	190ae <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   190ca:	2304      	movs	r3, #4
   190cc:	e7ef      	b.n	190ae <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   190ce:	2305      	movs	r3, #5
   190d0:	e7ed      	b.n	190ae <lte_lc_system_mode_get+0x14a>
   190d2:	4b0a      	ldr	r3, [pc, #40]	; (190fc <lte_lc_system_mode_get+0x198>)
   190d4:	4908      	ldr	r1, [pc, #32]	; (190f8 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   190d6:	4812      	ldr	r0, [pc, #72]	; (19120 <lte_lc_system_mode_get+0x1bc>)
   190d8:	1ac9      	subs	r1, r1, r3
   190da:	08c9      	lsrs	r1, r1, #3
   190dc:	0189      	lsls	r1, r1, #6
   190de:	f041 0101 	orr.w	r1, r1, #1
   190e2:	f013 f9d9 	bl	2c498 <log_0>
		err = -EFAULT;
   190e6:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   190ea:	e7a2      	b.n	19032 <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   190ec:	f06f 0415 	mvn.w	r4, #21
   190f0:	e761      	b.n	18fb6 <lte_lc_system_mode_get+0x52>
   190f2:	bf00      	nop
   190f4:	00031fb1 	.word	0x00031fb1
   190f8:	0002ec0c 	.word	0x0002ec0c
   190fc:	0002ebc4 	.word	0x0002ebc4
   19100:	00031fc1 	.word	0x00031fc1
   19104:	00031fdb 	.word	0x00031fdb
   19108:	00032000 	.word	0x00032000
   1910c:	00031e42 	.word	0x00031e42
   19110:	00032027 	.word	0x00032027
   19114:	00032034 	.word	0x00032034
   19118:	00032051 	.word	0x00032051
   1911c:	20026285 	.word	0x20026285
   19120:	00032079 	.word	0x00032079

00019124 <w_lte_lc_init>:
{
   19124:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   19126:	4e3a      	ldr	r6, [pc, #232]	; (19210 <w_lte_lc_init+0xec>)
{
   19128:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   1912a:	7833      	ldrb	r3, [r6, #0]
   1912c:	2b00      	cmp	r3, #0
   1912e:	d168      	bne.n	19202 <w_lte_lc_init+0xde>
	err = lte_lc_system_mode_get(&sys_mode_current);
   19130:	4d38      	ldr	r5, [pc, #224]	; (19214 <w_lte_lc_init+0xf0>)
   19132:	4628      	mov	r0, r5
   19134:	f7ff ff16 	bl	18f64 <lte_lc_system_mode_get>
	if (err) {
   19138:	4604      	mov	r4, r0
   1913a:	b168      	cbz	r0, 19158 <w_lte_lc_init+0x34>
   1913c:	4a36      	ldr	r2, [pc, #216]	; (19218 <w_lte_lc_init+0xf4>)
   1913e:	4b37      	ldr	r3, [pc, #220]	; (1921c <w_lte_lc_init+0xf8>)
		LOG_ERR("Could not get current system mode, error: %d", err);
   19140:	4601      	mov	r1, r0
   19142:	1ad2      	subs	r2, r2, r3
   19144:	08d2      	lsrs	r2, r2, #3
   19146:	0192      	lsls	r2, r2, #6
   19148:	4835      	ldr	r0, [pc, #212]	; (19220 <w_lte_lc_init+0xfc>)
   1914a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   1914e:	f013 f9b2 	bl	2c4b6 <log_1>
}
   19152:	4620      	mov	r0, r4
   19154:	b00e      	add	sp, #56	; 0x38
   19156:	bd70      	pop	{r4, r5, r6, pc}
	err = at_notif_register_handler(NULL, at_handler);
   19158:	4932      	ldr	r1, [pc, #200]	; (19224 <w_lte_lc_init+0x100>)
   1915a:	f7ff f8dd 	bl	18318 <at_notif_register_handler>
	if (err) {
   1915e:	4604      	mov	r4, r0
   19160:	b148      	cbz	r0, 19176 <w_lte_lc_init+0x52>
   19162:	4a2d      	ldr	r2, [pc, #180]	; (19218 <w_lte_lc_init+0xf4>)
   19164:	4b2d      	ldr	r3, [pc, #180]	; (1921c <w_lte_lc_init+0xf8>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   19166:	4601      	mov	r1, r0
   19168:	1ad2      	subs	r2, r2, r3
   1916a:	08d2      	lsrs	r2, r2, #3
   1916c:	0192      	lsls	r2, r2, #6
   1916e:	482e      	ldr	r0, [pc, #184]	; (19228 <w_lte_lc_init+0x104>)
   19170:	f042 0201 	orr.w	r2, r2, #1
   19174:	e7eb      	b.n	1914e <w_lte_lc_init+0x2a>
	if (sys_mode_current != sys_mode_target) {
   19176:	4b2d      	ldr	r3, [pc, #180]	; (1922c <w_lte_lc_init+0x108>)
   19178:	7818      	ldrb	r0, [r3, #0]
   1917a:	782b      	ldrb	r3, [r5, #0]
   1917c:	4283      	cmp	r3, r0
   1917e:	d00d      	beq.n	1919c <w_lte_lc_init+0x78>
		err = lte_lc_system_mode_set(sys_mode_target);
   19180:	f7ff fe3c 	bl	18dfc <lte_lc_system_mode_set>
		if (err) {
   19184:	4604      	mov	r4, r0
   19186:	b148      	cbz	r0, 1919c <w_lte_lc_init+0x78>
   19188:	4a23      	ldr	r2, [pc, #140]	; (19218 <w_lte_lc_init+0xf4>)
   1918a:	4b24      	ldr	r3, [pc, #144]	; (1921c <w_lte_lc_init+0xf8>)
			LOG_ERR("Could not set system mode, error: %d", err);
   1918c:	4601      	mov	r1, r0
   1918e:	1ad2      	subs	r2, r2, r3
   19190:	08d2      	lsrs	r2, r2, #3
   19192:	0192      	lsls	r2, r2, #6
   19194:	4826      	ldr	r0, [pc, #152]	; (19230 <w_lte_lc_init+0x10c>)
   19196:	f042 0201 	orr.w	r2, r2, #1
   1919a:	e7d8      	b.n	1914e <w_lte_lc_init+0x2a>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   1919c:	2300      	movs	r3, #0
   1919e:	4825      	ldr	r0, [pc, #148]	; (19234 <w_lte_lc_init+0x110>)
   191a0:	461a      	mov	r2, r3
   191a2:	4619      	mov	r1, r3
   191a4:	f7fe ff8c 	bl	180c0 <at_cmd_write>
   191a8:	4604      	mov	r4, r0
   191aa:	bb68      	cbnz	r0, 19208 <w_lte_lc_init+0xe4>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   191ac:	4602      	mov	r2, r0
   191ae:	4603      	mov	r3, r0
   191b0:	4601      	mov	r1, r0
   191b2:	4821      	ldr	r0, [pc, #132]	; (19238 <w_lte_lc_init+0x114>)
   191b4:	f7fe ff84 	bl	180c0 <at_cmd_write>
	if (err) {
   191b8:	4602      	mov	r2, r0
   191ba:	b1f8      	cbz	r0, 191fc <w_lte_lc_init+0xd8>
   191bc:	4b17      	ldr	r3, [pc, #92]	; (1921c <w_lte_lc_init+0xf8>)
   191be:	4d16      	ldr	r5, [pc, #88]	; (19218 <w_lte_lc_init+0xf4>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   191c0:	491d      	ldr	r1, [pc, #116]	; (19238 <w_lte_lc_init+0x114>)
   191c2:	1aed      	subs	r5, r5, r3
   191c4:	08ed      	lsrs	r5, r5, #3
   191c6:	01ad      	lsls	r5, r5, #6
   191c8:	f045 0502 	orr.w	r5, r5, #2
   191cc:	462b      	mov	r3, r5
   191ce:	481b      	ldr	r0, [pc, #108]	; (1923c <w_lte_lc_init+0x118>)
   191d0:	f013 f988 	bl	2c4e4 <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   191d4:	462a      	mov	r2, r5
   191d6:	4918      	ldr	r1, [pc, #96]	; (19238 <w_lte_lc_init+0x114>)
   191d8:	4819      	ldr	r0, [pc, #100]	; (19240 <w_lte_lc_init+0x11c>)
   191da:	f013 f96c 	bl	2c4b6 <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   191de:	4623      	mov	r3, r4
   191e0:	2232      	movs	r2, #50	; 0x32
   191e2:	4818      	ldr	r0, [pc, #96]	; (19244 <w_lte_lc_init+0x120>)
   191e4:	a901      	add	r1, sp, #4
   191e6:	f7fe ff6b 	bl	180c0 <at_cmd_write>
		if (err == 0) {
   191ea:	b938      	cbnz	r0, 191fc <w_lte_lc_init+0xd8>
			LOG_WRN("Current modem firmware version: %s",
   191ec:	a801      	add	r0, sp, #4
   191ee:	f7f9 ff4d 	bl	1308c <log_strdup>
   191f2:	462a      	mov	r2, r5
   191f4:	4601      	mov	r1, r0
   191f6:	4814      	ldr	r0, [pc, #80]	; (19248 <w_lte_lc_init+0x124>)
   191f8:	f013 f95d 	bl	2c4b6 <log_1>
	is_initialized = true;
   191fc:	2301      	movs	r3, #1
   191fe:	7033      	strb	r3, [r6, #0]
	return 0;
   19200:	e7a7      	b.n	19152 <w_lte_lc_init+0x2e>
		return -EALREADY;
   19202:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19206:	e7a4      	b.n	19152 <w_lte_lc_init+0x2e>
		return -EIO;
   19208:	f06f 0404 	mvn.w	r4, #4
   1920c:	e7a1      	b.n	19152 <w_lte_lc_init+0x2e>
   1920e:	bf00      	nop
   19210:	20026283 	.word	0x20026283
   19214:	20026285 	.word	0x20026285
   19218:	0002ec0c 	.word	0x0002ec0c
   1921c:	0002ebc4 	.word	0x0002ebc4
   19220:	000320a5 	.word	0x000320a5
   19224:	0000d439 	.word	0x0000d439
   19228:	000320d2 	.word	0x000320d2
   1922c:	20020a5d 	.word	0x20020a5d
   19230:	000320f7 	.word	0x000320f7
   19234:	000321e2 	.word	0x000321e2
   19238:	000321ed 	.word	0x000321ed
   1923c:	0003211c 	.word	0x0003211c
   19240:	0003214e 	.word	0x0003214e
   19244:	00032179 	.word	0x00032179
   19248:	00032181 	.word	0x00032181

0001924c <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   1924c:	b510      	push	{r4, lr}
   1924e:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   19250:	4a09      	ldr	r2, [pc, #36]	; (19278 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   19252:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   19254:	7823      	ldrb	r3, [r4, #0]
   19256:	2100      	movs	r1, #0
   19258:	f7ff fbf0 	bl	18a3c <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   1925c:	f110 0f0b 	cmn.w	r0, #11
   19260:	d000      	beq.n	19264 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   19262:	b940      	cbnz	r0, 19276 <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   19264:	4804      	ldr	r0, [pc, #16]	; (19278 <modem_info_parse.isra.0+0x2c>)
   19266:	f015 f8e3 	bl	2e430 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   1926a:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   1926c:	4298      	cmp	r0, r3
   1926e:	bf94      	ite	ls
   19270:	2000      	movls	r0, #0
   19272:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   19276:	bd10      	pop	{r4, pc}
   19278:	20021780 	.word	0x20021780

0001927c <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   1927c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1927e:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	uint16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   19280:	4608      	mov	r0, r1
   19282:	f00d faaf 	bl	267e4 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   19286:	4620      	mov	r0, r4
   19288:	491a      	ldr	r1, [pc, #104]	; (192f4 <modem_info_rsrp_subscribe_handler+0x78>)
   1928a:	f00d fca5 	bl	26bd8 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   1928e:	b1b0      	cbz	r0, 192be <modem_info_rsrp_subscribe_handler+0x42>
		return;
	}

	const struct modem_info_data rsrp_notify_data = {
   19290:	4b19      	ldr	r3, [pc, #100]	; (192f8 <modem_info_rsrp_subscribe_handler+0x7c>)
   19292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   19296:	ab04      	add	r3, sp, #16
   19298:	e903 0007 	stmdb	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_SHORT,
	};

	err = modem_info_parse(&rsrp_notify_data, response);
   1929c:	4621      	mov	r1, r4
   1929e:	f10d 000d 	add.w	r0, sp, #13
   192a2:	f7ff ffd3 	bl	1924c <modem_info_parse.isra.0>
	if (err != 0) {
   192a6:	4601      	mov	r1, r0
   192a8:	b158      	cbz	r0, 192c2 <modem_info_rsrp_subscribe_handler+0x46>
   192aa:	4a14      	ldr	r2, [pc, #80]	; (192fc <modem_info_rsrp_subscribe_handler+0x80>)
   192ac:	4b14      	ldr	r3, [pc, #80]	; (19300 <modem_info_rsrp_subscribe_handler+0x84>)
		LOG_ERR("modem_info_parse failed to parse "
   192ae:	4815      	ldr	r0, [pc, #84]	; (19304 <modem_info_rsrp_subscribe_handler+0x88>)
   192b0:	1ad2      	subs	r2, r2, r3
   192b2:	08d2      	lsrs	r2, r2, #3
   192b4:	0192      	lsls	r2, r2, #6
   192b6:	f042 0201 	orr.w	r2, r2, #1

	err = at_params_short_get(&m_param_list,
				  rsrp_notify_data.param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   192ba:	f013 f8fc 	bl	2c4b6 <log_1>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   192be:	b004      	add	sp, #16
   192c0:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   192c2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   192c6:	4810      	ldr	r0, [pc, #64]	; (19308 <modem_info_rsrp_subscribe_handler+0x8c>)
   192c8:	f10d 0202 	add.w	r2, sp, #2
   192cc:	f015 f85c 	bl	2e388 <at_params_short_get>
	if (err != 0) {
   192d0:	4601      	mov	r1, r0
   192d2:	b140      	cbz	r0, 192e6 <modem_info_rsrp_subscribe_handler+0x6a>
   192d4:	4a09      	ldr	r2, [pc, #36]	; (192fc <modem_info_rsrp_subscribe_handler+0x80>)
   192d6:	4b0a      	ldr	r3, [pc, #40]	; (19300 <modem_info_rsrp_subscribe_handler+0x84>)
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   192d8:	480c      	ldr	r0, [pc, #48]	; (1930c <modem_info_rsrp_subscribe_handler+0x90>)
   192da:	1ad2      	subs	r2, r2, r3
   192dc:	08d2      	lsrs	r2, r2, #3
   192de:	0192      	lsls	r2, r2, #6
   192e0:	f042 0201 	orr.w	r2, r2, #1
   192e4:	e7e9      	b.n	192ba <modem_info_rsrp_subscribe_handler+0x3e>
	modem_info_rsrp_cb(param_value);
   192e6:	4b0a      	ldr	r3, [pc, #40]	; (19310 <modem_info_rsrp_subscribe_handler+0x94>)
   192e8:	f89d 0002 	ldrb.w	r0, [sp, #2]
   192ec:	681b      	ldr	r3, [r3, #0]
   192ee:	4798      	blx	r3
   192f0:	e7e5      	b.n	192be <modem_info_rsrp_subscribe_handler+0x42>
   192f2:	bf00      	nop
   192f4:	00032362 	.word	0x00032362
   192f8:	0002ecac 	.word	0x0002ecac
   192fc:	0002ec14 	.word	0x0002ec14
   19300:	0002ebc4 	.word	0x0002ebc4
   19304:	00032368 	.word	0x00032368
   19308:	20021780 	.word	0x20021780
   1930c:	0003239f 	.word	0x0003239f
   19310:	20021788 	.word	0x20021788

00019314 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   19314:	4b10      	ldr	r3, [pc, #64]	; (19358 <modem_info_rsrp_register+0x44>)
{
   19316:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   19318:	4910      	ldr	r1, [pc, #64]	; (1935c <modem_info_rsrp_register+0x48>)
	modem_info_rsrp_cb = cb;
   1931a:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   1931c:	2000      	movs	r0, #0
   1931e:	f7fe fffb 	bl	18318 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   19322:	4604      	mov	r4, r0
   19324:	b160      	cbz	r0, 19340 <modem_info_rsrp_register+0x2c>
   19326:	4a0e      	ldr	r2, [pc, #56]	; (19360 <modem_info_rsrp_register+0x4c>)
   19328:	4b0e      	ldr	r3, [pc, #56]	; (19364 <modem_info_rsrp_register+0x50>)
		LOG_ERR("Can't register handler rc=%d", rc);
   1932a:	4601      	mov	r1, r0
   1932c:	1ad2      	subs	r2, r2, r3
   1932e:	08d2      	lsrs	r2, r2, #3
   19330:	0192      	lsls	r2, r2, #6
   19332:	480d      	ldr	r0, [pc, #52]	; (19368 <modem_info_rsrp_register+0x54>)
   19334:	f042 0201 	orr.w	r2, r2, #1
   19338:	f013 f8bd 	bl	2c4b6 <log_1>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   1933c:	4620      	mov	r0, r4
   1933e:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   19340:	4603      	mov	r3, r0
   19342:	4602      	mov	r2, r0
   19344:	4601      	mov	r1, r0
   19346:	4809      	ldr	r0, [pc, #36]	; (1936c <modem_info_rsrp_register+0x58>)
   19348:	f7fe feba 	bl	180c0 <at_cmd_write>
   1934c:	1e04      	subs	r4, r0, #0
		return -EIO;
   1934e:	bf18      	it	ne
   19350:	f06f 0404 	mvnne.w	r4, #4
   19354:	e7f2      	b.n	1933c <modem_info_rsrp_register+0x28>
   19356:	bf00      	nop
   19358:	20021788 	.word	0x20021788
   1935c:	0001927d 	.word	0x0001927d
   19360:	0002ec14 	.word	0x0002ec14
   19364:	0002ebc4 	.word	0x0002ebc4
   19368:	000323bf 	.word	0x000323bf
   1936c:	000323dc 	.word	0x000323dc

00019370 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   19370:	210a      	movs	r1, #10
   19372:	4801      	ldr	r0, [pc, #4]	; (19378 <modem_info_init+0x8>)
   19374:	f014 bf5d 	b.w	2e232 <at_params_list_init>
   19378:	20021780 	.word	0x20021780

0001937c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1937c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1937e:	f7fa f81f 	bl	133c0 <z_impl_log_panic>
   19382:	4b06      	ldr	r3, [pc, #24]	; (1939c <k_sys_fatal_error_handler+0x20>)
   19384:	4906      	ldr	r1, [pc, #24]	; (193a0 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   19386:	4807      	ldr	r0, [pc, #28]	; (193a4 <k_sys_fatal_error_handler+0x28>)
   19388:	1ac9      	subs	r1, r1, r3
   1938a:	08c9      	lsrs	r1, r1, #3
   1938c:	0189      	lsls	r1, r1, #6
   1938e:	f041 0101 	orr.w	r1, r1, #1
   19392:	f013 f881 	bl	2c498 <log_0>
	sys_arch_reboot(0);
   19396:	2000      	movs	r0, #0
   19398:	f7fb fdbe 	bl	14f18 <sys_arch_reboot>

	CODE_UNREACHABLE;
   1939c:	0002ebc4 	.word	0x0002ebc4
   193a0:	0002ebfc 	.word	0x0002ebfc
   193a4:	00032408 	.word	0x00032408

000193a8 <date_time_notify_event.constprop.0>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   193a8:	4b02      	ldr	r3, [pc, #8]	; (193b4 <date_time_notify_event.constprop.0+0xc>)
   193aa:	681b      	ldr	r3, [r3, #0]
   193ac:	b10b      	cbz	r3, 193b2 <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   193ae:	4802      	ldr	r0, [pc, #8]	; (193b8 <date_time_notify_event.constprop.0+0x10>)
   193b0:	4718      	bx	r3
	}
}
   193b2:	4770      	bx	lr
   193b4:	2002178c 	.word	0x2002178c
   193b8:	20026286 	.word	0x20026286

000193bc <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   193bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   193c0:	4e72      	ldr	r6, [pc, #456]	; (1958c <new_date_time_get+0x1d0>)
   193c2:	4c73      	ldr	r4, [pc, #460]	; (19590 <new_date_time_get+0x1d4>)
   193c4:	4637      	mov	r7, r6
   193c6:	4b73      	ldr	r3, [pc, #460]	; (19594 <new_date_time_get+0x1d8>)
{
   193c8:	b095      	sub	sp, #84	; 0x54
   193ca:	1ae4      	subs	r4, r4, r3
   193cc:	08e4      	lsrs	r4, r4, #3
   193ce:	f04f 33ff 	mov.w	r3, #4294967295
   193d2:	f04f 32ff 	mov.w	r2, #4294967295
   193d6:	4870      	ldr	r0, [pc, #448]	; (19598 <new_date_time_get+0x1dc>)
   193d8:	f00b f89e 	bl	24518 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   193dc:	68b3      	ldr	r3, [r6, #8]
   193de:	b18b      	cbz	r3, 19404 <new_date_time_get+0x48>
   193e0:	e9d6 2300 	ldrd	r2, r3, [r6]
   193e4:	4313      	orrs	r3, r2
   193e6:	d00d      	beq.n	19404 <new_date_time_get+0x48>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   193e8:	f015 f85c 	bl	2e4a4 <k_uptime_get>
   193ec:	68b3      	ldr	r3, [r6, #8]
   193ee:	1ac0      	subs	r0, r0, r3
   193f0:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   193f4:	2801      	cmp	r0, #1
   193f6:	f171 0300 	sbcs.w	r3, r1, #0
   193fa:	da03      	bge.n	19404 <new_date_time_get+0x48>
		LOG_DBG("Updating date time UTC...");

		err = current_time_check();
		if (err == 0) {
			LOG_DBG("Time successfully obtained");
			initial_valid_time = true;
   193fc:	2201      	movs	r2, #1
   193fe:	4b67      	ldr	r3, [pc, #412]	; (1959c <new_date_time_get+0x1e0>)

		LOG_DBG("Not getting time from NTP server");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   19400:	701a      	strb	r2, [r3, #0]
   19402:	e05a      	b.n	194ba <new_date_time_get+0xfe>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   19404:	2300      	movs	r3, #0
   19406:	2221      	movs	r2, #33	; 0x21
   19408:	4865      	ldr	r0, [pc, #404]	; (195a0 <new_date_time_get+0x1e4>)
   1940a:	a902      	add	r1, sp, #8
   1940c:	f7fe fe58 	bl	180c0 <at_cmd_write>
	if (err) {
   19410:	2800      	cmp	r0, #0
   19412:	d155      	bne.n	194c0 <new_date_time_get+0x104>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   19414:	2520      	movs	r5, #32
   19416:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   1941a:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   1941e:	4628      	mov	r0, r5
   19420:	aa02      	add	r2, sp, #8
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   19422:	f812 3b01 	ldrb.w	r3, [r2], #1
   19426:	3b2c      	subs	r3, #44	; 0x2c
   19428:	b2db      	uxtb	r3, r3
   1942a:	2b0e      	cmp	r3, #14
   1942c:	d805      	bhi.n	1943a <new_date_time_get+0x7e>
   1942e:	fa21 f303 	lsr.w	r3, r1, r3
   19432:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   19434:	bf48      	it	mi
   19436:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   1943a:	3d01      	subs	r5, #1
   1943c:	d1f1      	bne.n	19422 <new_date_time_get+0x66>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1943e:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   19440:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   19442:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   19444:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   19446:	f00d fd21 	bl	26e8c <strtol>
   1944a:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   1944c:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1944e:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   19450:	a901      	add	r1, sp, #4
   19452:	9801      	ldr	r0, [sp, #4]
   19454:	f00d fd1a 	bl	26e8c <strtol>
   19458:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1945a:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   1945c:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1945e:	a901      	add	r1, sp, #4
   19460:	9801      	ldr	r0, [sp, #4]
   19462:	f00d fd13 	bl	26e8c <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   19466:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   19468:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1946a:	a901      	add	r1, sp, #4
   1946c:	9801      	ldr	r0, [sp, #4]
   1946e:	f00d fd0d 	bl	26e8c <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   19472:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   19474:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   19476:	a901      	add	r1, sp, #4
   19478:	9801      	ldr	r0, [sp, #4]
   1947a:	f00d fd07 	bl	26e8c <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1947e:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   19480:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   19482:	a901      	add	r1, sp, #4
   19484:	9801      	ldr	r0, [sp, #4]
   19486:	f00d fd01 	bl	26e8c <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1948a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1948c:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1948e:	2b73      	cmp	r3, #115	; 0x73
   19490:	d016      	beq.n	194c0 <new_date_time_get+0x104>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   19492:	a80b      	add	r0, sp, #44	; 0x2c
   19494:	f7f9 fac4 	bl	12a20 <timeutil_timegm64>
   19498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1949c:	460a      	mov	r2, r1
   1949e:	fba0 0103 	umull	r0, r1, r0, r3
   194a2:	fb03 1102 	mla	r1, r3, r2, r1
   194a6:	e9c7 0100 	strd	r0, r1, [r7]
	time_aux.last_date_time_update = k_uptime_get();
   194aa:	f014 fffb 	bl	2e4a4 <k_uptime_get>
			initial_valid_time = true;
   194ae:	2201      	movs	r2, #1
   194b0:	4b3a      	ldr	r3, [pc, #232]	; (1959c <new_date_time_get+0x1e0>)
	time_aux.last_date_time_update = k_uptime_get();
   194b2:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   194b4:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   194b6:	4b3b      	ldr	r3, [pc, #236]	; (195a4 <new_date_time_get+0x1e8>)
   194b8:	701d      	strb	r5, [r3, #0]
		date_time_notify_event(&evt);
   194ba:	f7ff ff75 	bl	193a8 <date_time_notify_event.constprop.0>
   194be:	e786      	b.n	193ce <new_date_time_get+0x12>
		if (err == 0) {
   194c0:	f04f 0900 	mov.w	r9, #0
   194c4:	4d38      	ldr	r5, [pc, #224]	; (195a8 <new_date_time_get+0x1ec>)
	hints.ai_family = AF_INET;
   194c6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 195c4 <new_date_time_get+0x208>
	err = sntp_query(&sntp_ctx, timeout, time);
   194ca:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 195bc <new_date_time_get+0x200>
	hints.ai_socktype = SOCK_DGRAM;
   194ce:	2302      	movs	r3, #2
   194d0:	2201      	movs	r2, #1
   194d2:	e9c8 2302 	strd	r2, r3, [r8, #8]
	hints.ai_protocol = 0;
   194d6:	2300      	movs	r3, #0
   194d8:	f8c8 3010 	str.w	r3, [r8, #16]
	if (server->addr == NULL) {
   194dc:	686b      	ldr	r3, [r5, #4]
   194de:	b9eb      	cbnz	r3, 1951c <new_date_time_get+0x160>
	return zsock_getaddrinfo(host, service, hints, res);
   194e0:	4932      	ldr	r1, [pc, #200]	; (195ac <new_date_time_get+0x1f0>)
   194e2:	4642      	mov	r2, r8
   194e4:	6828      	ldr	r0, [r5, #0]
   194e6:	1d2b      	adds	r3, r5, #4
   194e8:	f013 fa83 	bl	2c9f2 <zsock_getaddrinfo>
		if (err) {
   194ec:	4601      	mov	r1, r0
   194ee:	b1a8      	cbz	r0, 1951c <new_date_time_get+0x160>
			LOG_WRN("getaddrinfo, error: %d", err);
   194f0:	01a2      	lsls	r2, r4, #6
   194f2:	482f      	ldr	r0, [pc, #188]	; (195b0 <new_date_time_get+0x1f4>)
   194f4:	f042 0202 	orr.w	r2, r2, #2
   194f8:	f012 ffdd 	bl	2c4b6 <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   194fc:	f109 0901 	add.w	r9, r9, #1
   19500:	f1b9 0f05 	cmp.w	r9, #5
   19504:	f105 0508 	add.w	r5, r5, #8
   19508:	d1e1      	bne.n	194ce <new_date_time_get+0x112>
	LOG_WRN("Not getting time from any NTP server");
   1950a:	01a1      	lsls	r1, r4, #6
   1950c:	4829      	ldr	r0, [pc, #164]	; (195b4 <new_date_time_get+0x1f8>)
   1950e:	f041 0102 	orr.w	r1, r1, #2
   19512:	f012 ffc1 	bl	2c498 <log_0>
		evt.type = DATE_TIME_NOT_OBTAINED;
   19516:	2203      	movs	r2, #3
   19518:	4b22      	ldr	r3, [pc, #136]	; (195a4 <new_date_time_get+0x1e8>)
   1951a:	e771      	b.n	19400 <new_date_time_get+0x44>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   1951c:	686b      	ldr	r3, [r5, #4]
   1951e:	a80b      	add	r0, sp, #44	; 0x2c
   19520:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   19524:	f013 fa31 	bl	2c98a <sntp_init>
	if (err) {
   19528:	4682      	mov	sl, r0
   1952a:	b300      	cbz	r0, 1956e <new_date_time_get+0x1b2>
		LOG_WRN("sntp_init, error: %d", err);
   1952c:	4601      	mov	r1, r0
   1952e:	01a2      	lsls	r2, r4, #6
   19530:	4821      	ldr	r0, [pc, #132]	; (195b8 <new_date_time_get+0x1fc>)
   19532:	f042 0202 	orr.w	r2, r2, #2
		LOG_WRN("sntp_query, error: %d", err);
   19536:	f012 ffbe 	bl	2c4b6 <log_1>
	sntp_close(&sntp_ctx);
   1953a:	a80b      	add	r0, sp, #44	; 0x2c
   1953c:	f013 fa54 	bl	2c9e8 <sntp_close>
		if (err) {
   19540:	f1ba 0f00 	cmp.w	sl, #0
   19544:	d1da      	bne.n	194fc <new_date_time_get+0x140>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   19546:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1954a:	4b1c      	ldr	r3, [pc, #112]	; (195bc <new_date_time_get+0x200>)
   1954c:	681a      	ldr	r2, [r3, #0]
   1954e:	6858      	ldr	r0, [r3, #4]
   19550:	fba2 2301 	umull	r2, r3, r2, r1
   19554:	fb01 3300 	mla	r3, r1, r0, r3
   19558:	e9c7 2300 	strd	r2, r3, [r7]
		time_aux.last_date_time_update = k_uptime_get();
   1955c:	f014 ffa2 	bl	2e4a4 <k_uptime_get>
			initial_valid_time = true;
   19560:	2301      	movs	r3, #1
   19562:	4a0e      	ldr	r2, [pc, #56]	; (1959c <new_date_time_get+0x1e0>)
		time_aux.last_date_time_update = k_uptime_get();
   19564:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   19566:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   19568:	4a0e      	ldr	r2, [pc, #56]	; (195a4 <new_date_time_get+0x1e8>)
   1956a:	7013      	strb	r3, [r2, #0]
			date_time_notify_event(&evt);
   1956c:	e7a5      	b.n	194ba <new_date_time_get+0xfe>
	err = sntp_query(&sntp_ctx, timeout, time);
   1956e:	465a      	mov	r2, fp
   19570:	f241 3188 	movw	r1, #5000	; 0x1388
   19574:	a80b      	add	r0, sp, #44	; 0x2c
   19576:	f7f3 febb 	bl	d2f0 <sntp_query>
	if (err) {
   1957a:	4682      	mov	sl, r0
   1957c:	2800      	cmp	r0, #0
   1957e:	d0dc      	beq.n	1953a <new_date_time_get+0x17e>
		LOG_WRN("sntp_query, error: %d", err);
   19580:	01a2      	lsls	r2, r4, #6
   19582:	4601      	mov	r1, r0
   19584:	f042 0202 	orr.w	r2, r2, #2
   19588:	480d      	ldr	r0, [pc, #52]	; (195c0 <new_date_time_get+0x204>)
   1958a:	e7d4      	b.n	19536 <new_date_time_get+0x17a>
   1958c:	20021188 	.word	0x20021188
   19590:	0002ebec 	.word	0x0002ebec
   19594:	0002ebc4 	.word	0x0002ebc4
   19598:	20020cb0 	.word	0x20020cb0
   1959c:	20026287 	.word	0x20026287
   195a0:	00032229 	.word	0x00032229
   195a4:	20026286 	.word	0x20026286
   195a8:	2002049c 	.word	0x2002049c
   195ac:	00032425 	.word	0x00032425
   195b0:	00032429 	.word	0x00032429
   195b4:	0003246b 	.word	0x0003246b
   195b8:	00032440 	.word	0x00032440
   195bc:	20021178 	.word	0x20021178
   195c0:	00032455 	.word	0x00032455
   195c4:	20021790 	.word	0x20021790

000195c8 <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   195c8:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   195ca:	4c06      	ldr	r4, [pc, #24]	; (195e4 <date_time_init+0x1c>)
   195cc:	4906      	ldr	r1, [pc, #24]	; (195e8 <date_time_init+0x20>)
   195ce:	4620      	mov	r0, r4
   195d0:	f015 f8a2 	bl	2e718 <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   195d4:	2200      	movs	r2, #0
   195d6:	2300      	movs	r3, #0
   195d8:	4621      	mov	r1, r4
   195da:	4804      	ldr	r0, [pc, #16]	; (195ec <date_time_init+0x24>)
   195dc:	f00b f9c6 	bl	2496c <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   195e0:	2000      	movs	r0, #0
   195e2:	bd10      	pop	{r4, pc}
   195e4:	20021198 	.word	0x20021198
   195e8:	0002e4a3 	.word	0x0002e4a3
   195ec:	20021358 	.word	0x20021358

000195f0 <date_time_uptime_to_unix_time_ms>:

	return 0;
}

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   195f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   195f4:	6803      	ldr	r3, [r0, #0]
{
   195f6:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   195f8:	9300      	str	r3, [sp, #0]
   195fa:	6843      	ldr	r3, [r0, #4]
   195fc:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   195fe:	4b23      	ldr	r3, [pc, #140]	; (1968c <date_time_uptime_to_unix_time_ms+0x9c>)
   19600:	781b      	ldrb	r3, [r3, #0]
   19602:	b973      	cbnz	r3, 19622 <date_time_uptime_to_unix_time_ms+0x32>
   19604:	4b22      	ldr	r3, [pc, #136]	; (19690 <date_time_uptime_to_unix_time_ms+0xa0>)
   19606:	4923      	ldr	r1, [pc, #140]	; (19694 <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Valid time not currently available");
   19608:	4823      	ldr	r0, [pc, #140]	; (19698 <date_time_uptime_to_unix_time_ms+0xa8>)
   1960a:	1ac9      	subs	r1, r1, r3
   1960c:	08c9      	lsrs	r1, r1, #3
   1960e:	0189      	lsls	r1, r1, #6
   19610:	f041 0102 	orr.w	r1, r1, #2
   19614:	f012 ff40 	bl	2c498 <log_0>
		return -ENODATA;
   19618:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   1961c:	b003      	add	sp, #12
   1961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   19622:	4d1e      	ldr	r5, [pc, #120]	; (1969c <date_time_uptime_to_unix_time_ms+0xac>)
   19624:	68a9      	ldr	r1, [r5, #8]
   19626:	e9d5 6700 	ldrd	r6, r7, [r5]
   1962a:	1a72      	subs	r2, r6, r1
   1962c:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   19630:	9900      	ldr	r1, [sp, #0]
   19632:	eb12 0801 	adds.w	r8, r2, r1
   19636:	9901      	ldr	r1, [sp, #4]
   19638:	eb43 0901 	adc.w	r9, r3, r1
   1963c:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   19640:	f014 ff30 	bl	2e4a4 <k_uptime_get>
   19644:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   19646:	1af6      	subs	r6, r6, r3
   19648:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   1964c:	eb16 0a00 	adds.w	sl, r6, r0
   19650:	eb47 0b01 	adc.w	fp, r7, r1
   19654:	45c2      	cmp	sl, r8
   19656:	eb7b 0309 	sbcs.w	r3, fp, r9
   1965a:	da15      	bge.n	19688 <date_time_uptime_to_unix_time_ms+0x98>
   1965c:	4b0c      	ldr	r3, [pc, #48]	; (19690 <date_time_uptime_to_unix_time_ms+0xa0>)
   1965e:	4d0d      	ldr	r5, [pc, #52]	; (19694 <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Uptime to large or previously converted");
   19660:	480f      	ldr	r0, [pc, #60]	; (196a0 <date_time_uptime_to_unix_time_ms+0xb0>)
   19662:	1aed      	subs	r5, r5, r3
   19664:	08ed      	lsrs	r5, r5, #3
   19666:	01ad      	lsls	r5, r5, #6
   19668:	f045 0502 	orr.w	r5, r5, #2
   1966c:	4629      	mov	r1, r5
   1966e:	f012 ff13 	bl	2c498 <log_0>
		LOG_WRN("Clear variable or set a new uptime");
   19672:	480c      	ldr	r0, [pc, #48]	; (196a4 <date_time_uptime_to_unix_time_ms+0xb4>)
   19674:	4629      	mov	r1, r5
   19676:	f012 ff0f 	bl	2c498 <log_0>
		*uptime = uptime_prev;
   1967a:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   1967c:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   19680:	6023      	str	r3, [r4, #0]
   19682:	9b01      	ldr	r3, [sp, #4]
   19684:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   19686:	e7c9      	b.n	1961c <date_time_uptime_to_unix_time_ms+0x2c>
	return 0;
   19688:	2000      	movs	r0, #0
   1968a:	e7c7      	b.n	1961c <date_time_uptime_to_unix_time_ms+0x2c>
   1968c:	20026287 	.word	0x20026287
   19690:	0002ebc4 	.word	0x0002ebc4
   19694:	0002ebec 	.word	0x0002ebec
   19698:	00032490 	.word	0x00032490
   1969c:	20021188 	.word	0x20021188
   196a0:	000324b3 	.word	0x000324b3
   196a4:	000324db 	.word	0x000324db

000196a8 <date_time_now>:

int date_time_now(int64_t *unix_time_ms)
{
   196a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;
	int64_t unix_time_ms_prev = *unix_time_ms;
   196aa:	e9d0 4500 	ldrd	r4, r5, [r0]
{
   196ae:	4606      	mov	r6, r0

	*unix_time_ms = k_uptime_get();
   196b0:	f014 fef8 	bl	2e4a4 <k_uptime_get>
   196b4:	e9c6 0100 	strd	r0, r1, [r6]

	err = date_time_uptime_to_unix_time_ms(unix_time_ms);
   196b8:	4630      	mov	r0, r6
   196ba:	f7ff ff99 	bl	195f0 <date_time_uptime_to_unix_time_ms>
	if (err) {
   196be:	4607      	mov	r7, r0
   196c0:	b160      	cbz	r0, 196dc <date_time_now+0x34>
   196c2:	4b07      	ldr	r3, [pc, #28]	; (196e0 <date_time_now+0x38>)
   196c4:	4a07      	ldr	r2, [pc, #28]	; (196e4 <date_time_now+0x3c>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
   196c6:	4601      	mov	r1, r0
   196c8:	1ad2      	subs	r2, r2, r3
   196ca:	08d2      	lsrs	r2, r2, #3
   196cc:	0192      	lsls	r2, r2, #6
   196ce:	4806      	ldr	r0, [pc, #24]	; (196e8 <date_time_now+0x40>)
   196d0:	f042 0202 	orr.w	r2, r2, #2
   196d4:	f012 feef 	bl	2c4b6 <log_1>
		*unix_time_ms = unix_time_ms_prev;
   196d8:	e9c6 4500 	strd	r4, r5, [r6]
	}

	return err;
}
   196dc:	4638      	mov	r0, r7
   196de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196e0:	0002ebc4 	.word	0x0002ebc4
   196e4:	0002ebec 	.word	0x0002ebec
   196e8:	000324fe 	.word	0x000324fe

000196ec <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   196ec:	b508      	push	{r3, lr}
	if (evt_handler) {
   196ee:	b108      	cbz	r0, 196f4 <date_time_update_async+0x8>
		app_evt_handler = evt_handler;
   196f0:	4b03      	ldr	r3, [pc, #12]	; (19700 <date_time_update_async+0x14>)
   196f2:	6018      	str	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   196f4:	4803      	ldr	r0, [pc, #12]	; (19704 <date_time_update_async+0x18>)
   196f6:	f00a fecb 	bl	24490 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   196fa:	2000      	movs	r0, #0
   196fc:	bd08      	pop	{r3, pc}
   196fe:	bf00      	nop
   19700:	2002178c 	.word	0x2002178c
   19704:	20020cb0 	.word	0x20020cb0

00019708 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   19708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1970c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1970e:	4c21      	ldr	r4, [pc, #132]	; (19794 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   19710:	4e21      	ldr	r6, [pc, #132]	; (19798 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19712:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   19716:	f8df 9088 	ldr.w	r9, [pc, #136]	; 197a0 <check_ext_api_requests+0x98>
{
   1971a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1971c:	45a8      	cmp	r8, r5
   1971e:	d803      	bhi.n	19728 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   19720:	2000      	movs	r0, #0
   19722:	b005      	add	sp, #20
   19724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   19728:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1972a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1972e:	681f      	ldr	r7, [r3, #0]
   19730:	ab01      	add	r3, sp, #4
   19732:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   19736:	220c      	movs	r2, #12
   19738:	4619      	mov	r1, r3
   1973a:	4638      	mov	r0, r7
   1973c:	f00c fc14 	bl	25f68 <memcmp>
   19740:	b990      	cbnz	r0, 19768 <check_ext_api_requests+0x60>
   19742:	b18f      	cbz	r7, 19768 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19744:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   19746:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19748:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1974a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1974c:	4291      	cmp	r1, r2
   1974e:	d10b      	bne.n	19768 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   19750:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   19752:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   19754:	4291      	cmp	r1, r2
   19756:	d807      	bhi.n	19768 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   19758:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1975a:	4291      	cmp	r1, r2
   1975c:	d904      	bls.n	19768 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1975e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   19760:	695b      	ldr	r3, [r3, #20]
   19762:	ea32 0303 	bics.w	r3, r2, r3
   19766:	d00a      	beq.n	1977e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   19768:	6a27      	ldr	r7, [r4, #32]
   1976a:	b167      	cbz	r7, 19786 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1976c:	480b      	ldr	r0, [pc, #44]	; (1979c <check_ext_api_requests+0x94>)
   1976e:	f012 fc46 	bl	2bffe <printk>
			k_panic();
   19772:	4040      	eors	r0, r0
   19774:	f380 8811 	msr	BASEPRI, r0
   19778:	f04f 0004 	mov.w	r0, #4
   1977c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1977e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19780:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   19782:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19784:	e7ca      	b.n	1971c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   19786:	4648      	mov	r0, r9
   19788:	f012 fc39 	bl	2bffe <printk>
			*ext_api_req->ext_api = NULL;
   1978c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1978e:	601f      	str	r7, [r3, #0]
   19790:	e7f5      	b.n	1977e <check_ext_api_requests+0x76>
   19792:	bf00      	nop
   19794:	0000c23c 	.word	0x0000c23c
   19798:	0002ecb8 	.word	0x0002ecb8
   1979c:	00032599 	.word	0x00032599
   197a0:	000325c2 	.word	0x000325c2

000197a4 <packet_free_cb>:
   197a4:	b510      	push	{r4, lr}
   197a6:	4604      	mov	r4, r0
   197a8:	6800      	ldr	r0, [r0, #0]
   197aa:	f004 fef7 	bl	1e59c <rpc_logobj_client_data_free>
   197ae:	68a0      	ldr	r0, [r4, #8]
   197b0:	b118      	cbz	r0, 197ba <packet_free_cb+0x16>
   197b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   197b6:	f007 bced 	b.w	21194 <nrf_free>
   197ba:	bd10      	pop	{r4, pc}

000197bc <logobj_event_handler>:
   197bc:	b530      	push	{r4, r5, lr}
   197be:	4b3b      	ldr	r3, [pc, #236]	; (198ac <logobj_event_handler+0xf0>)
   197c0:	b085      	sub	sp, #20
   197c2:	681d      	ldr	r5, [r3, #0]
   197c4:	2d00      	cmp	r5, #0
   197c6:	d04c      	beq.n	19862 <logobj_event_handler+0xa6>
   197c8:	f248 0302 	movw	r3, #32770	; 0x8002
   197cc:	4299      	cmp	r1, r3
   197ce:	d053      	beq.n	19878 <logobj_event_handler+0xbc>
   197d0:	d91c      	bls.n	1980c <logobj_event_handler+0x50>
   197d2:	f248 0303 	movw	r3, #32771	; 0x8003
   197d6:	4299      	cmp	r1, r3
   197d8:	d05a      	beq.n	19890 <logobj_event_handler+0xd4>
   197da:	f249 0301 	movw	r3, #36865	; 0x9001
   197de:	4299      	cmp	r1, r3
   197e0:	d147      	bne.n	19872 <logobj_event_handler+0xb6>
   197e2:	2400      	movs	r4, #0
   197e4:	6843      	ldr	r3, [r0, #4]
   197e6:	6802      	ldr	r2, [r0, #0]
   197e8:	e9cd 4402 	strd	r4, r4, [sp, #8]
   197ec:	e9cd 2300 	strd	r2, r3, [sp]
   197f0:	69e8      	ldr	r0, [r5, #28]
   197f2:	4669      	mov	r1, sp
   197f4:	6803      	ldr	r3, [r0, #0]
   197f6:	685b      	ldr	r3, [r3, #4]
   197f8:	4798      	blx	r3
   197fa:	3001      	adds	r0, #1
   197fc:	d04e      	beq.n	1989c <logobj_event_handler+0xe0>
   197fe:	4620      	mov	r0, r4
   19800:	682b      	ldr	r3, [r5, #0]
   19802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19806:	602b      	str	r3, [r5, #0]
   19808:	b005      	add	sp, #20
   1980a:	bd30      	pop	{r4, r5, pc}
   1980c:	f248 0301 	movw	r3, #32769	; 0x8001
   19810:	4299      	cmp	r1, r3
   19812:	d12e      	bne.n	19872 <logobj_event_handler+0xb6>
   19814:	68c3      	ldr	r3, [r0, #12]
   19816:	2b00      	cmp	r3, #0
   19818:	d135      	bne.n	19886 <logobj_event_handler+0xca>
   1981a:	6828      	ldr	r0, [r5, #0]
   1981c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   19820:	d03e      	beq.n	198a0 <logobj_event_handler+0xe4>
   19822:	682b      	ldr	r3, [r5, #0]
   19824:	b29b      	uxth	r3, r3
   19826:	2b01      	cmp	r3, #1
   19828:	d105      	bne.n	19836 <logobj_event_handler+0x7a>
   1982a:	682b      	ldr	r3, [r5, #0]
   1982c:	0c1b      	lsrs	r3, r3, #16
   1982e:	041b      	lsls	r3, r3, #16
   19830:	f043 0302 	orr.w	r3, r3, #2
   19834:	602b      	str	r3, [r5, #0]
   19836:	4b1e      	ldr	r3, [pc, #120]	; (198b0 <logobj_event_handler+0xf4>)
   19838:	781a      	ldrb	r2, [r3, #0]
   1983a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1983e:	2a00      	cmp	r2, #0
   19840:	d031      	beq.n	198a6 <logobj_event_handler+0xea>
   19842:	4a1c      	ldr	r2, [pc, #112]	; (198b4 <logobj_event_handler+0xf8>)
   19844:	7811      	ldrb	r1, [r2, #0]
   19846:	b909      	cbnz	r1, 1984c <logobj_event_handler+0x90>
   19848:	2101      	movs	r1, #1
   1984a:	7011      	strb	r1, [r2, #0]
   1984c:	2000      	movs	r0, #0
   1984e:	7018      	strb	r0, [r3, #0]
   19850:	682b      	ldr	r3, [r5, #0]
   19852:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19856:	602b      	str	r3, [r5, #0]
   19858:	682b      	ldr	r3, [r5, #0]
   1985a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1985e:	602b      	str	r3, [r5, #0]
   19860:	e7d2      	b.n	19808 <logobj_event_handler+0x4c>
   19862:	6800      	ldr	r0, [r0, #0]
   19864:	2800      	cmp	r0, #0
   19866:	d0cf      	beq.n	19808 <logobj_event_handler+0x4c>
   19868:	f004 fe98 	bl	1e59c <rpc_logobj_client_data_free>
   1986c:	4628      	mov	r0, r5
   1986e:	b005      	add	sp, #20
   19870:	bd30      	pop	{r4, r5, pc}
   19872:	2000      	movs	r0, #0
   19874:	b005      	add	sp, #20
   19876:	bd30      	pop	{r4, r5, pc}
   19878:	682b      	ldr	r3, [r5, #0]
   1987a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   1987e:	d00b      	beq.n	19898 <logobj_event_handler+0xdc>
   19880:	68c0      	ldr	r0, [r0, #12]
   19882:	2800      	cmp	r0, #0
   19884:	d0e4      	beq.n	19850 <logobj_event_handler+0x94>
   19886:	230e      	movs	r3, #14
   19888:	2000      	movs	r0, #0
   1988a:	606b      	str	r3, [r5, #4]
   1988c:	b005      	add	sp, #20
   1988e:	bd30      	pop	{r4, r5, pc}
   19890:	68c3      	ldr	r3, [r0, #12]
   19892:	2b01      	cmp	r3, #1
   19894:	d1a5      	bne.n	197e2 <logobj_event_handler+0x26>
   19896:	e7f6      	b.n	19886 <logobj_event_handler+0xca>
   19898:	4618      	mov	r0, r3
   1989a:	e7b5      	b.n	19808 <logobj_event_handler+0x4c>
   1989c:	2002      	movs	r0, #2
   1989e:	e7b3      	b.n	19808 <logobj_event_handler+0x4c>
   198a0:	230e      	movs	r3, #14
   198a2:	606b      	str	r3, [r5, #4]
   198a4:	e7b0      	b.n	19808 <logobj_event_handler+0x4c>
   198a6:	4a03      	ldr	r2, [pc, #12]	; (198b4 <logobj_event_handler+0xf8>)
   198a8:	7011      	strb	r1, [r2, #0]
   198aa:	e7cf      	b.n	1984c <logobj_event_handler+0x90>
   198ac:	200217e4 	.word	0x200217e4
   198b0:	20026288 	.word	0x20026288
   198b4:	20026289 	.word	0x20026289

000198b8 <logobj_interface_init>:
   198b8:	2300      	movs	r3, #0
   198ba:	b510      	push	{r4, lr}
   198bc:	4808      	ldr	r0, [pc, #32]	; (198e0 <logobj_interface_init+0x28>)
   198be:	4c09      	ldr	r4, [pc, #36]	; (198e4 <logobj_interface_init+0x2c>)
   198c0:	4909      	ldr	r1, [pc, #36]	; (198e8 <logobj_interface_init+0x30>)
   198c2:	4a0a      	ldr	r2, [pc, #40]	; (198ec <logobj_interface_init+0x34>)
   198c4:	7023      	strb	r3, [r4, #0]
   198c6:	6003      	str	r3, [r0, #0]
   198c8:	700b      	strb	r3, [r1, #0]
   198ca:	6013      	str	r3, [r2, #0]
   198cc:	f004 fe2a 	bl	1e524 <rpc_logobj_client_init>
   198d0:	b918      	cbnz	r0, 198da <logobj_interface_init+0x22>
   198d2:	2201      	movs	r2, #1
   198d4:	4b06      	ldr	r3, [pc, #24]	; (198f0 <logobj_interface_init+0x38>)
   198d6:	701a      	strb	r2, [r3, #0]
   198d8:	bd10      	pop	{r4, pc}
   198da:	f04f 30ff 	mov.w	r0, #4294967295
   198de:	bd10      	pop	{r4, pc}
   198e0:	200217e4 	.word	0x200217e4
   198e4:	20026289 	.word	0x20026289
   198e8:	20026288 	.word	0x20026288
   198ec:	200217e0 	.word	0x200217e0
   198f0:	2002628a 	.word	0x2002628a

000198f4 <logobj_interface_open>:
   198f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   198f8:	2400      	movs	r4, #0
   198fa:	4b5b      	ldr	r3, [pc, #364]	; (19a68 <logobj_interface_open+0x174>)
   198fc:	b084      	sub	sp, #16
   198fe:	781b      	ldrb	r3, [r3, #0]
   19900:	9401      	str	r4, [sp, #4]
   19902:	2b00      	cmp	r3, #0
   19904:	f000 809f 	beq.w	19a46 <logobj_interface_open+0x152>
   19908:	2866      	cmp	r0, #102	; 0x66
   1990a:	4680      	mov	r8, r0
   1990c:	f040 808f 	bne.w	19a2e <logobj_interface_open+0x13a>
   19910:	2902      	cmp	r1, #2
   19912:	4689      	mov	r9, r1
   19914:	f040 808b 	bne.w	19a2e <logobj_interface_open+0x13a>
   19918:	f240 2305 	movw	r3, #517	; 0x205
   1991c:	429a      	cmp	r2, r3
   1991e:	4692      	mov	sl, r2
   19920:	f040 8085 	bne.w	19a2e <logobj_interface_open+0x13a>
   19924:	4f51      	ldr	r7, [pc, #324]	; (19a6c <logobj_interface_open+0x178>)
   19926:	683d      	ldr	r5, [r7, #0]
   19928:	2d00      	cmp	r5, #0
   1992a:	f040 8086 	bne.w	19a3a <logobj_interface_open+0x146>
   1992e:	4a50      	ldr	r2, [pc, #320]	; (19a70 <logobj_interface_open+0x17c>)
   19930:	a801      	add	r0, sp, #4
   19932:	f008 f807 	bl	21944 <interface_socket_allocate>
   19936:	9b01      	ldr	r3, [sp, #4]
   19938:	4606      	mov	r6, r0
   1993a:	2b00      	cmp	r3, #0
   1993c:	f000 808d 	beq.w	19a5a <logobj_interface_open+0x166>
   19940:	4629      	mov	r1, r5
   19942:	2204      	movs	r2, #4
   19944:	484b      	ldr	r0, [pc, #300]	; (19a74 <logobj_interface_open+0x180>)
   19946:	603b      	str	r3, [r7, #0]
   19948:	f00c fb3c 	bl	25fc4 <memset>
   1994c:	9c01      	ldr	r4, [sp, #4]
   1994e:	4629      	mov	r1, r5
   19950:	e9c4 8903 	strd	r8, r9, [r4, #12]
   19954:	f8c4 a014 	str.w	sl, [r4, #20]
   19958:	a802      	add	r0, sp, #8
   1995a:	f004 fde9 	bl	1e530 <rpc_logobj_client_request_alloc>
   1995e:	2800      	cmp	r0, #0
   19960:	d142      	bne.n	199e8 <logobj_interface_open+0xf4>
   19962:	2201      	movs	r2, #1
   19964:	2104      	movs	r1, #4
   19966:	9b02      	ldr	r3, [sp, #8]
   19968:	4d43      	ldr	r5, [pc, #268]	; (19a78 <logobj_interface_open+0x184>)
   1996a:	7358      	strb	r0, [r3, #13]
   1996c:	7398      	strb	r0, [r3, #14]
   1996e:	73d8      	strb	r0, [r3, #15]
   19970:	7258      	strb	r0, [r3, #9]
   19972:	7298      	strb	r0, [r3, #10]
   19974:	72d8      	strb	r0, [r3, #11]
   19976:	7219      	strb	r1, [r3, #8]
   19978:	702a      	strb	r2, [r5, #0]
   1997a:	731a      	strb	r2, [r3, #12]
   1997c:	6822      	ldr	r2, [r4, #0]
   1997e:	4618      	mov	r0, r3
   19980:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   19984:	6022      	str	r2, [r4, #0]
   19986:	f247 0101 	movw	r1, #28673	; 0x7001
   1998a:	f004 fde9 	bl	1e560 <rpc_logobj_client_request_send>
   1998e:	bb68      	cbnz	r0, 199ec <logobj_interface_open+0xf8>
   19990:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19992:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19996:	2900      	cmp	r1, #0
   19998:	bf08      	it	eq
   1999a:	f04f 31ff 	moveq.w	r1, #4294967295
   1999e:	ab04      	add	r3, sp, #16
   199a0:	f843 1d04 	str.w	r1, [r3, #-4]!
   199a4:	4630      	mov	r0, r6
   199a6:	4611      	mov	r1, r2
   199a8:	f008 f87e 	bl	21aa8 <interface_socket_wait>
   199ac:	4604      	mov	r4, r0
   199ae:	b310      	cbz	r0, 199f6 <logobj_interface_open+0x102>
   199b0:	9a01      	ldr	r2, [sp, #4]
   199b2:	2e00      	cmp	r6, #0
   199b4:	6813      	ldr	r3, [r2, #0]
   199b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   199ba:	6013      	str	r3, [r2, #0]
   199bc:	9a01      	ldr	r2, [sp, #4]
   199be:	6813      	ldr	r3, [r2, #0]
   199c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   199c4:	6013      	str	r3, [r2, #0]
   199c6:	9a01      	ldr	r2, [sp, #4]
   199c8:	6813      	ldr	r3, [r2, #0]
   199ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   199ce:	6013      	str	r3, [r2, #0]
   199d0:	da3f      	bge.n	19a52 <logobj_interface_open+0x15e>
   199d2:	2300      	movs	r3, #0
   199d4:	4620      	mov	r0, r4
   199d6:	603b      	str	r3, [r7, #0]
   199d8:	f04f 36ff 	mov.w	r6, #4294967295
   199dc:	f7fd f92c 	bl	16c38 <bsd_os_errno_set>
   199e0:	4630      	mov	r0, r6
   199e2:	b004      	add	sp, #16
   199e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   199e8:	240c      	movs	r4, #12
   199ea:	e7e1      	b.n	199b0 <logobj_interface_open+0xbc>
   199ec:	9802      	ldr	r0, [sp, #8]
   199ee:	f004 fdcd 	bl	1e58c <rpc_logobj_client_message_free>
   199f2:	2405      	movs	r4, #5
   199f4:	e7dc      	b.n	199b0 <logobj_interface_open+0xbc>
   199f6:	4630      	mov	r0, r6
   199f8:	f008 f8ca 	bl	21b90 <interface_socket_from_handle_get>
   199fc:	b120      	cbz	r0, 19a08 <logobj_interface_open+0x114>
   199fe:	6844      	ldr	r4, [r0, #4]
   19a00:	b114      	cbz	r4, 19a08 <logobj_interface_open+0x114>
   19a02:	2300      	movs	r3, #0
   19a04:	6043      	str	r3, [r0, #4]
   19a06:	e7d3      	b.n	199b0 <logobj_interface_open+0xbc>
   19a08:	4630      	mov	r0, r6
   19a0a:	9a01      	ldr	r2, [sp, #4]
   19a0c:	6813      	ldr	r3, [r2, #0]
   19a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19a12:	6013      	str	r3, [r2, #0]
   19a14:	9a01      	ldr	r2, [sp, #4]
   19a16:	6813      	ldr	r3, [r2, #0]
   19a18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19a1c:	6013      	str	r3, [r2, #0]
   19a1e:	9a01      	ldr	r2, [sp, #4]
   19a20:	6813      	ldr	r3, [r2, #0]
   19a22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19a26:	6013      	str	r3, [r2, #0]
   19a28:	b004      	add	sp, #16
   19a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19a2e:	2016      	movs	r0, #22
   19a30:	f7fd f902 	bl	16c38 <bsd_os_errno_set>
   19a34:	f04f 36ff 	mov.w	r6, #4294967295
   19a38:	e7d2      	b.n	199e0 <logobj_interface_open+0xec>
   19a3a:	2001      	movs	r0, #1
   19a3c:	f7fd f8fc 	bl	16c38 <bsd_os_errno_set>
   19a40:	f04f 36ff 	mov.w	r6, #4294967295
   19a44:	e7cc      	b.n	199e0 <logobj_interface_open+0xec>
   19a46:	2070      	movs	r0, #112	; 0x70
   19a48:	f7fd f8f6 	bl	16c38 <bsd_os_errno_set>
   19a4c:	f04f 36ff 	mov.w	r6, #4294967295
   19a50:	e7c6      	b.n	199e0 <logobj_interface_open+0xec>
   19a52:	4630      	mov	r0, r6
   19a54:	f007 ffda 	bl	21a0c <interface_socket_free>
   19a58:	e7bb      	b.n	199d2 <logobj_interface_open+0xde>
   19a5a:	2018      	movs	r0, #24
   19a5c:	f7fd f8ec 	bl	16c38 <bsd_os_errno_set>
   19a60:	f04f 36ff 	mov.w	r6, #4294967295
   19a64:	e7bc      	b.n	199e0 <logobj_interface_open+0xec>
   19a66:	bf00      	nop
   19a68:	2002628a 	.word	0x2002628a
   19a6c:	200217e4 	.word	0x200217e4
   19a70:	000197a5 	.word	0x000197a5
   19a74:	200217e0 	.word	0x200217e0
   19a78:	20026288 	.word	0x20026288

00019a7c <logobj_interface_read>:
   19a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a80:	b087      	sub	sp, #28
   19a82:	2900      	cmp	r1, #0
   19a84:	d06b      	beq.n	19b5e <logobj_interface_read+0xe2>
   19a86:	2a00      	cmp	r2, #0
   19a88:	4617      	mov	r7, r2
   19a8a:	dd68      	ble.n	19b5e <logobj_interface_read+0xe2>
   19a8c:	461d      	mov	r5, r3
   19a8e:	4680      	mov	r8, r0
   19a90:	460e      	mov	r6, r1
   19a92:	f008 f87d 	bl	21b90 <interface_socket_from_handle_get>
   19a96:	4604      	mov	r4, r0
   19a98:	2800      	cmp	r0, #0
   19a9a:	d066      	beq.n	19b6a <logobj_interface_read+0xee>
   19a9c:	bb4d      	cbnz	r5, 19af2 <logobj_interface_read+0x76>
   19a9e:	69e0      	ldr	r0, [r4, #28]
   19aa0:	07aa      	lsls	r2, r5, #30
   19aa2:	6803      	ldr	r3, [r0, #0]
   19aa4:	68db      	ldr	r3, [r3, #12]
   19aa6:	d52d      	bpl.n	19b04 <logobj_interface_read+0x88>
   19aa8:	4798      	blx	r3
   19aaa:	3001      	adds	r0, #1
   19aac:	d047      	beq.n	19b3e <logobj_interface_read+0xc2>
   19aae:	6823      	ldr	r3, [r4, #0]
   19ab0:	69e0      	ldr	r0, [r4, #28]
   19ab2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   19ab6:	d044      	beq.n	19b42 <logobj_interface_read+0xc6>
   19ab8:	2100      	movs	r1, #0
   19aba:	6823      	ldr	r3, [r4, #0]
   19abc:	462a      	mov	r2, r5
   19abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19ac2:	6023      	str	r3, [r4, #0]
   19ac4:	e9cd 1104 	strd	r1, r1, [sp, #16]
   19ac8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   19acc:	6803      	ldr	r3, [r0, #0]
   19ace:	a902      	add	r1, sp, #8
   19ad0:	689b      	ldr	r3, [r3, #8]
   19ad2:	4798      	blx	r3
   19ad4:	4605      	mov	r5, r0
   19ad6:	69e0      	ldr	r0, [r4, #28]
   19ad8:	6803      	ldr	r3, [r0, #0]
   19ada:	68db      	ldr	r3, [r3, #12]
   19adc:	4798      	blx	r3
   19ade:	3001      	adds	r0, #1
   19ae0:	d003      	beq.n	19aea <logobj_interface_read+0x6e>
   19ae2:	6823      	ldr	r3, [r4, #0]
   19ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19ae8:	6023      	str	r3, [r4, #0]
   19aea:	4628      	mov	r0, r5
   19aec:	b007      	add	sp, #28
   19aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19af2:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   19af6:	d1d2      	bne.n	19a9e <logobj_interface_read+0x22>
   19af8:	202d      	movs	r0, #45	; 0x2d
   19afa:	f7fd f89d 	bl	16c38 <bsd_os_errno_set>
   19afe:	f04f 35ff 	mov.w	r5, #4294967295
   19b02:	e7f2      	b.n	19aea <logobj_interface_read+0x6e>
   19b04:	6822      	ldr	r2, [r4, #0]
   19b06:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   19b0a:	d1cd      	bne.n	19aa8 <logobj_interface_read+0x2c>
   19b0c:	4798      	blx	r3
   19b0e:	1c43      	adds	r3, r0, #1
   19b10:	d1cd      	bne.n	19aae <logobj_interface_read+0x32>
   19b12:	6a22      	ldr	r2, [r4, #32]
   19b14:	ab06      	add	r3, sp, #24
   19b16:	2a00      	cmp	r2, #0
   19b18:	bf18      	it	ne
   19b1a:	4610      	movne	r0, r2
   19b1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19b20:	f843 0d14 	str.w	r0, [r3, #-20]!
   19b24:	4611      	mov	r1, r2
   19b26:	4640      	mov	r0, r8
   19b28:	f007 ffbe 	bl	21aa8 <interface_socket_wait>
   19b2c:	b158      	cbz	r0, 19b46 <logobj_interface_read+0xca>
   19b2e:	f04f 35ff 	mov.w	r5, #4294967295
   19b32:	f7fd f881 	bl	16c38 <bsd_os_errno_set>
   19b36:	4628      	mov	r0, r5
   19b38:	b007      	add	sp, #28
   19b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19b3e:	2023      	movs	r0, #35	; 0x23
   19b40:	e7f5      	b.n	19b2e <logobj_interface_read+0xb2>
   19b42:	461d      	mov	r5, r3
   19b44:	e7c8      	b.n	19ad8 <logobj_interface_read+0x5c>
   19b46:	4640      	mov	r0, r8
   19b48:	f008 f822 	bl	21b90 <interface_socket_from_handle_get>
   19b4c:	4603      	mov	r3, r0
   19b4e:	2800      	cmp	r0, #0
   19b50:	d0ad      	beq.n	19aae <logobj_interface_read+0x32>
   19b52:	6840      	ldr	r0, [r0, #4]
   19b54:	2800      	cmp	r0, #0
   19b56:	d0aa      	beq.n	19aae <logobj_interface_read+0x32>
   19b58:	f8c3 9004 	str.w	r9, [r3, #4]
   19b5c:	e7e7      	b.n	19b2e <logobj_interface_read+0xb2>
   19b5e:	2016      	movs	r0, #22
   19b60:	f7fd f86a 	bl	16c38 <bsd_os_errno_set>
   19b64:	f04f 35ff 	mov.w	r5, #4294967295
   19b68:	e7bf      	b.n	19aea <logobj_interface_read+0x6e>
   19b6a:	2009      	movs	r0, #9
   19b6c:	f7fd f864 	bl	16c38 <bsd_os_errno_set>
   19b70:	f04f 35ff 	mov.w	r5, #4294967295
   19b74:	e7b9      	b.n	19aea <logobj_interface_read+0x6e>
   19b76:	bf00      	nop

00019b78 <logobj_interface_write>:
   19b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b7c:	b082      	sub	sp, #8
   19b7e:	2900      	cmp	r1, #0
   19b80:	d06b      	beq.n	19c5a <logobj_interface_write+0xe2>
   19b82:	2a04      	cmp	r2, #4
   19b84:	d169      	bne.n	19c5a <logobj_interface_write+0xe2>
   19b86:	461f      	mov	r7, r3
   19b88:	4606      	mov	r6, r0
   19b8a:	460d      	mov	r5, r1
   19b8c:	f008 f800 	bl	21b90 <interface_socket_from_handle_get>
   19b90:	4604      	mov	r4, r0
   19b92:	2800      	cmp	r0, #0
   19b94:	d074      	beq.n	19c80 <logobj_interface_write+0x108>
   19b96:	b1e7      	cbz	r7, 19bd2 <logobj_interface_write+0x5a>
   19b98:	07b8      	lsls	r0, r7, #30
   19b9a:	d56b      	bpl.n	19c74 <logobj_interface_write+0xfc>
   19b9c:	6823      	ldr	r3, [r4, #0]
   19b9e:	039b      	lsls	r3, r3, #14
   19ba0:	d564      	bpl.n	19c6c <logobj_interface_write+0xf4>
   19ba2:	2700      	movs	r7, #0
   19ba4:	6823      	ldr	r3, [r4, #0]
   19ba6:	2100      	movs	r1, #0
   19ba8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19bac:	6023      	str	r3, [r4, #0]
   19bae:	4668      	mov	r0, sp
   19bb0:	f8d5 8000 	ldr.w	r8, [r5]
   19bb4:	f004 fcbc 	bl	1e530 <rpc_logobj_client_request_alloc>
   19bb8:	b198      	cbz	r0, 19be2 <logobj_interface_write+0x6a>
   19bba:	200c      	movs	r0, #12
   19bbc:	6823      	ldr	r3, [r4, #0]
   19bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19bc2:	6023      	str	r3, [r4, #0]
   19bc4:	f7fd f838 	bl	16c38 <bsd_os_errno_set>
   19bc8:	f04f 30ff 	mov.w	r0, #4294967295
   19bcc:	b002      	add	sp, #8
   19bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19bd2:	6803      	ldr	r3, [r0, #0]
   19bd4:	00d9      	lsls	r1, r3, #3
   19bd6:	d4e1      	bmi.n	19b9c <logobj_interface_write+0x24>
   19bd8:	6803      	ldr	r3, [r0, #0]
   19bda:	039a      	lsls	r2, r3, #14
   19bdc:	d548      	bpl.n	19c70 <logobj_interface_write+0xf8>
   19bde:	2701      	movs	r7, #1
   19be0:	e7e0      	b.n	19ba4 <logobj_interface_write+0x2c>
   19be2:	2504      	movs	r5, #4
   19be4:	9b00      	ldr	r3, [sp, #0]
   19be6:	f247 0103 	movw	r1, #28675	; 0x7003
   19bea:	f8c3 800c 	str.w	r8, [r3, #12]
   19bee:	7258      	strb	r0, [r3, #9]
   19bf0:	7298      	strb	r0, [r3, #10]
   19bf2:	72d8      	strb	r0, [r3, #11]
   19bf4:	721d      	strb	r5, [r3, #8]
   19bf6:	4618      	mov	r0, r3
   19bf8:	f004 fcb2 	bl	1e560 <rpc_logobj_client_request_send>
   19bfc:	4680      	mov	r8, r0
   19bfe:	bb18      	cbnz	r0, 19c48 <logobj_interface_write+0xd0>
   19c00:	b1d7      	cbz	r7, 19c38 <logobj_interface_write+0xc0>
   19c02:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19c04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19c08:	2900      	cmp	r1, #0
   19c0a:	bf08      	it	eq
   19c0c:	f04f 31ff 	moveq.w	r1, #4294967295
   19c10:	ab02      	add	r3, sp, #8
   19c12:	f843 1d04 	str.w	r1, [r3, #-4]!
   19c16:	4630      	mov	r0, r6
   19c18:	4611      	mov	r1, r2
   19c1a:	f007 ff45 	bl	21aa8 <interface_socket_wait>
   19c1e:	b120      	cbz	r0, 19c2a <logobj_interface_write+0xb2>
   19c20:	6823      	ldr	r3, [r4, #0]
   19c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19c26:	6023      	str	r3, [r4, #0]
   19c28:	e7cc      	b.n	19bc4 <logobj_interface_write+0x4c>
   19c2a:	4630      	mov	r0, r6
   19c2c:	f007 ffb0 	bl	21b90 <interface_socket_from_handle_get>
   19c30:	4603      	mov	r3, r0
   19c32:	b108      	cbz	r0, 19c38 <logobj_interface_write+0xc0>
   19c34:	6840      	ldr	r0, [r0, #4]
   19c36:	b9b0      	cbnz	r0, 19c66 <logobj_interface_write+0xee>
   19c38:	4628      	mov	r0, r5
   19c3a:	6823      	ldr	r3, [r4, #0]
   19c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19c40:	6023      	str	r3, [r4, #0]
   19c42:	b002      	add	sp, #8
   19c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c48:	9800      	ldr	r0, [sp, #0]
   19c4a:	f004 fc9f 	bl	1e58c <rpc_logobj_client_message_free>
   19c4e:	6823      	ldr	r3, [r4, #0]
   19c50:	2005      	movs	r0, #5
   19c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19c56:	6023      	str	r3, [r4, #0]
   19c58:	e7b4      	b.n	19bc4 <logobj_interface_write+0x4c>
   19c5a:	2016      	movs	r0, #22
   19c5c:	f7fc ffec 	bl	16c38 <bsd_os_errno_set>
   19c60:	f04f 30ff 	mov.w	r0, #4294967295
   19c64:	e7b2      	b.n	19bcc <logobj_interface_write+0x54>
   19c66:	f8c3 8004 	str.w	r8, [r3, #4]
   19c6a:	e7d9      	b.n	19c20 <logobj_interface_write+0xa8>
   19c6c:	2073      	movs	r0, #115	; 0x73
   19c6e:	e7a9      	b.n	19bc4 <logobj_interface_write+0x4c>
   19c70:	2009      	movs	r0, #9
   19c72:	e7a7      	b.n	19bc4 <logobj_interface_write+0x4c>
   19c74:	202d      	movs	r0, #45	; 0x2d
   19c76:	f7fc ffdf 	bl	16c38 <bsd_os_errno_set>
   19c7a:	f04f 30ff 	mov.w	r0, #4294967295
   19c7e:	e7a5      	b.n	19bcc <logobj_interface_write+0x54>
   19c80:	2009      	movs	r0, #9
   19c82:	f7fc ffd9 	bl	16c38 <bsd_os_errno_set>
   19c86:	f04f 30ff 	mov.w	r0, #4294967295
   19c8a:	e79f      	b.n	19bcc <logobj_interface_write+0x54>

00019c8c <logobj_interface_setopt>:
   19c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c8e:	2901      	cmp	r1, #1
   19c90:	b085      	sub	sp, #20
   19c92:	d06d      	beq.n	19d70 <logobj_interface_setopt+0xe4>
   19c94:	461e      	mov	r6, r3
   19c96:	f240 2305 	movw	r3, #517	; 0x205
   19c9a:	4299      	cmp	r1, r3
   19c9c:	f040 80a0 	bne.w	19de0 <logobj_interface_setopt+0x154>
   19ca0:	4607      	mov	r7, r0
   19ca2:	4615      	mov	r5, r2
   19ca4:	f007 ff74 	bl	21b90 <interface_socket_from_handle_get>
   19ca8:	4604      	mov	r4, r0
   19caa:	2800      	cmp	r0, #0
   19cac:	f000 80c3 	beq.w	19e36 <logobj_interface_setopt+0x1aa>
   19cb0:	2d01      	cmp	r5, #1
   19cb2:	d019      	beq.n	19ce8 <logobj_interface_setopt+0x5c>
   19cb4:	2d02      	cmp	r5, #2
   19cb6:	d010      	beq.n	19cda <logobj_interface_setopt+0x4e>
   19cb8:	252a      	movs	r5, #42	; 0x2a
   19cba:	6803      	ldr	r3, [r0, #0]
   19cbc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19cc0:	6023      	str	r3, [r4, #0]
   19cc2:	6823      	ldr	r3, [r4, #0]
   19cc4:	4628      	mov	r0, r5
   19cc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19cca:	6023      	str	r3, [r4, #0]
   19ccc:	f7fc ffb4 	bl	16c38 <bsd_os_errno_set>
   19cd0:	f04f 35ff 	mov.w	r5, #4294967295
   19cd4:	4628      	mov	r0, r5
   19cd6:	b005      	add	sp, #20
   19cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19cda:	b116      	cbz	r6, 19ce2 <logobj_interface_setopt+0x56>
   19cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19cde:	2b01      	cmp	r3, #1
   19ce0:	d04e      	beq.n	19d80 <logobj_interface_setopt+0xf4>
   19ce2:	6823      	ldr	r3, [r4, #0]
   19ce4:	2516      	movs	r5, #22
   19ce6:	e7e9      	b.n	19cbc <logobj_interface_setopt+0x30>
   19ce8:	2e00      	cmp	r6, #0
   19cea:	d0fa      	beq.n	19ce2 <logobj_interface_setopt+0x56>
   19cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19cee:	2b04      	cmp	r3, #4
   19cf0:	d1f7      	bne.n	19ce2 <logobj_interface_setopt+0x56>
   19cf2:	2100      	movs	r1, #0
   19cf4:	a803      	add	r0, sp, #12
   19cf6:	f004 fc1b 	bl	1e530 <rpc_logobj_client_request_alloc>
   19cfa:	4605      	mov	r5, r0
   19cfc:	2800      	cmp	r0, #0
   19cfe:	d175      	bne.n	19dec <logobj_interface_setopt+0x160>
   19d00:	9803      	ldr	r0, [sp, #12]
   19d02:	2208      	movs	r2, #8
   19d04:	4629      	mov	r1, r5
   19d06:	300c      	adds	r0, #12
   19d08:	f00c f95c 	bl	25fc4 <memset>
   19d0c:	9803      	ldr	r0, [sp, #12]
   19d0e:	4631      	mov	r1, r6
   19d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19d12:	300c      	adds	r0, #12
   19d14:	f7f2 ff1a 	bl	cb4c <memcpy>
   19d18:	2308      	movs	r3, #8
   19d1a:	9803      	ldr	r0, [sp, #12]
   19d1c:	f247 0102 	movw	r1, #28674	; 0x7002
   19d20:	7203      	strb	r3, [r0, #8]
   19d22:	7245      	strb	r5, [r0, #9]
   19d24:	7285      	strb	r5, [r0, #10]
   19d26:	72c5      	strb	r5, [r0, #11]
   19d28:	6823      	ldr	r3, [r4, #0]
   19d2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19d2e:	6023      	str	r3, [r4, #0]
   19d30:	f004 fc16 	bl	1e560 <rpc_logobj_client_request_send>
   19d34:	2800      	cmp	r0, #0
   19d36:	d178      	bne.n	19e2a <logobj_interface_setopt+0x19e>
   19d38:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19d3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19d3e:	2900      	cmp	r1, #0
   19d40:	bf08      	it	eq
   19d42:	f04f 31ff 	moveq.w	r1, #4294967295
   19d46:	ab04      	add	r3, sp, #16
   19d48:	f843 1d08 	str.w	r1, [r3, #-8]!
   19d4c:	4638      	mov	r0, r7
   19d4e:	4611      	mov	r1, r2
   19d50:	f007 feaa 	bl	21aa8 <interface_socket_wait>
   19d54:	4605      	mov	r5, r0
   19d56:	2800      	cmp	r0, #0
   19d58:	d140      	bne.n	19ddc <logobj_interface_setopt+0x150>
   19d5a:	4638      	mov	r0, r7
   19d5c:	f007 ff18 	bl	21b90 <interface_socket_from_handle_get>
   19d60:	2800      	cmp	r0, #0
   19d62:	d04e      	beq.n	19e02 <logobj_interface_setopt+0x176>
   19d64:	6843      	ldr	r3, [r0, #4]
   19d66:	2b00      	cmp	r3, #0
   19d68:	d04b      	beq.n	19e02 <logobj_interface_setopt+0x176>
   19d6a:	6045      	str	r5, [r0, #4]
   19d6c:	461d      	mov	r5, r3
   19d6e:	e035      	b.n	19ddc <logobj_interface_setopt+0x150>
   19d70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   19d72:	9400      	str	r4, [sp, #0]
   19d74:	f007 ff34 	bl	21be0 <interface_socket_setopt>
   19d78:	4605      	mov	r5, r0
   19d7a:	4628      	mov	r0, r5
   19d7c:	b005      	add	sp, #20
   19d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19d80:	2100      	movs	r1, #0
   19d82:	a802      	add	r0, sp, #8
   19d84:	7835      	ldrb	r5, [r6, #0]
   19d86:	f004 fbd3 	bl	1e530 <rpc_logobj_client_request_alloc>
   19d8a:	bb78      	cbnz	r0, 19dec <logobj_interface_setopt+0x160>
   19d8c:	2d01      	cmp	r5, #1
   19d8e:	bf08      	it	eq
   19d90:	4b2c      	ldreq	r3, [pc, #176]	; (19e44 <logobj_interface_setopt+0x1b8>)
   19d92:	f04f 0204 	mov.w	r2, #4
   19d96:	bf08      	it	eq
   19d98:	701d      	strbeq	r5, [r3, #0]
   19d9a:	2300      	movs	r3, #0
   19d9c:	9802      	ldr	r0, [sp, #8]
   19d9e:	f247 0101 	movw	r1, #28673	; 0x7001
   19da2:	7243      	strb	r3, [r0, #9]
   19da4:	60c5      	str	r5, [r0, #12]
   19da6:	7283      	strb	r3, [r0, #10]
   19da8:	72c3      	strb	r3, [r0, #11]
   19daa:	7202      	strb	r2, [r0, #8]
   19dac:	6823      	ldr	r3, [r4, #0]
   19dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19db2:	6023      	str	r3, [r4, #0]
   19db4:	f004 fbd4 	bl	1e560 <rpc_logobj_client_request_send>
   19db8:	4606      	mov	r6, r0
   19dba:	bb80      	cbnz	r0, 19e1e <logobj_interface_setopt+0x192>
   19dbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19dbe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19dc2:	2900      	cmp	r1, #0
   19dc4:	bf08      	it	eq
   19dc6:	f04f 31ff 	moveq.w	r1, #4294967295
   19dca:	ab04      	add	r3, sp, #16
   19dcc:	f843 1d04 	str.w	r1, [r3, #-4]!
   19dd0:	4638      	mov	r0, r7
   19dd2:	4611      	mov	r1, r2
   19dd4:	f007 fe68 	bl	21aa8 <interface_socket_wait>
   19dd8:	4605      	mov	r5, r0
   19dda:	b150      	cbz	r0, 19df2 <logobj_interface_setopt+0x166>
   19ddc:	6823      	ldr	r3, [r4, #0]
   19dde:	e76d      	b.n	19cbc <logobj_interface_setopt+0x30>
   19de0:	202a      	movs	r0, #42	; 0x2a
   19de2:	f7fc ff29 	bl	16c38 <bsd_os_errno_set>
   19de6:	f04f 35ff 	mov.w	r5, #4294967295
   19dea:	e773      	b.n	19cd4 <logobj_interface_setopt+0x48>
   19dec:	6823      	ldr	r3, [r4, #0]
   19dee:	250c      	movs	r5, #12
   19df0:	e764      	b.n	19cbc <logobj_interface_setopt+0x30>
   19df2:	4638      	mov	r0, r7
   19df4:	f007 fecc 	bl	21b90 <interface_socket_from_handle_get>
   19df8:	b140      	cbz	r0, 19e0c <logobj_interface_setopt+0x180>
   19dfa:	6845      	ldr	r5, [r0, #4]
   19dfc:	b135      	cbz	r5, 19e0c <logobj_interface_setopt+0x180>
   19dfe:	6046      	str	r6, [r0, #4]
   19e00:	e7ec      	b.n	19ddc <logobj_interface_setopt+0x150>
   19e02:	4631      	mov	r1, r6
   19e04:	2204      	movs	r2, #4
   19e06:	4810      	ldr	r0, [pc, #64]	; (19e48 <logobj_interface_setopt+0x1bc>)
   19e08:	f7f2 fea0 	bl	cb4c <memcpy>
   19e0c:	6823      	ldr	r3, [r4, #0]
   19e0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19e12:	6023      	str	r3, [r4, #0]
   19e14:	6823      	ldr	r3, [r4, #0]
   19e16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19e1a:	6023      	str	r3, [r4, #0]
   19e1c:	e75a      	b.n	19cd4 <logobj_interface_setopt+0x48>
   19e1e:	9802      	ldr	r0, [sp, #8]
   19e20:	f004 fbb4 	bl	1e58c <rpc_logobj_client_message_free>
   19e24:	2505      	movs	r5, #5
   19e26:	6823      	ldr	r3, [r4, #0]
   19e28:	e748      	b.n	19cbc <logobj_interface_setopt+0x30>
   19e2a:	9803      	ldr	r0, [sp, #12]
   19e2c:	f004 fbae 	bl	1e58c <rpc_logobj_client_message_free>
   19e30:	2505      	movs	r5, #5
   19e32:	6823      	ldr	r3, [r4, #0]
   19e34:	e742      	b.n	19cbc <logobj_interface_setopt+0x30>
   19e36:	2009      	movs	r0, #9
   19e38:	f7fc fefe 	bl	16c38 <bsd_os_errno_set>
   19e3c:	f04f 35ff 	mov.w	r5, #4294967295
   19e40:	e748      	b.n	19cd4 <logobj_interface_setopt+0x48>
   19e42:	bf00      	nop
   19e44:	20026288 	.word	0x20026288
   19e48:	200217e0 	.word	0x200217e0

00019e4c <logobj_interface_getopt>:
   19e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e4e:	2901      	cmp	r1, #1
   19e50:	b083      	sub	sp, #12
   19e52:	9e08      	ldr	r6, [sp, #32]
   19e54:	d030      	beq.n	19eb8 <logobj_interface_getopt+0x6c>
   19e56:	461f      	mov	r7, r3
   19e58:	f240 2305 	movw	r3, #517	; 0x205
   19e5c:	4299      	cmp	r1, r3
   19e5e:	d134      	bne.n	19eca <logobj_interface_getopt+0x7e>
   19e60:	4615      	mov	r5, r2
   19e62:	f007 fe95 	bl	21b90 <interface_socket_from_handle_get>
   19e66:	2800      	cmp	r0, #0
   19e68:	d037      	beq.n	19eda <logobj_interface_getopt+0x8e>
   19e6a:	2d01      	cmp	r5, #1
   19e6c:	d015      	beq.n	19e9a <logobj_interface_getopt+0x4e>
   19e6e:	2d02      	cmp	r5, #2
   19e70:	d10b      	bne.n	19e8a <logobj_interface_getopt+0x3e>
   19e72:	b387      	cbz	r7, 19ed6 <logobj_interface_getopt+0x8a>
   19e74:	6833      	ldr	r3, [r6, #0]
   19e76:	b373      	cbz	r3, 19ed6 <logobj_interface_getopt+0x8a>
   19e78:	2300      	movs	r3, #0
   19e7a:	2201      	movs	r2, #1
   19e7c:	4618      	mov	r0, r3
   19e7e:	491a      	ldr	r1, [pc, #104]	; (19ee8 <logobj_interface_getopt+0x9c>)
   19e80:	7809      	ldrb	r1, [r1, #0]
   19e82:	7039      	strb	r1, [r7, #0]
   19e84:	6032      	str	r2, [r6, #0]
   19e86:	b003      	add	sp, #12
   19e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e8a:	2009      	movs	r0, #9
   19e8c:	f7fc fed4 	bl	16c38 <bsd_os_errno_set>
   19e90:	f04f 33ff 	mov.w	r3, #4294967295
   19e94:	4618      	mov	r0, r3
   19e96:	b003      	add	sp, #12
   19e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e9a:	b1e7      	cbz	r7, 19ed6 <logobj_interface_getopt+0x8a>
   19e9c:	6833      	ldr	r3, [r6, #0]
   19e9e:	2b03      	cmp	r3, #3
   19ea0:	d919      	bls.n	19ed6 <logobj_interface_getopt+0x8a>
   19ea2:	4638      	mov	r0, r7
   19ea4:	2204      	movs	r2, #4
   19ea6:	4911      	ldr	r1, [pc, #68]	; (19eec <logobj_interface_getopt+0xa0>)
   19ea8:	f7f2 fe50 	bl	cb4c <memcpy>
   19eac:	2300      	movs	r3, #0
   19eae:	2204      	movs	r2, #4
   19eb0:	4618      	mov	r0, r3
   19eb2:	6032      	str	r2, [r6, #0]
   19eb4:	b003      	add	sp, #12
   19eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19eb8:	9600      	str	r6, [sp, #0]
   19eba:	f007 fed7 	bl	21c6c <interface_socket_getopt>
   19ebe:	4603      	mov	r3, r0
   19ec0:	2800      	cmp	r0, #0
   19ec2:	d1e3      	bne.n	19e8c <logobj_interface_getopt+0x40>
   19ec4:	4618      	mov	r0, r3
   19ec6:	b003      	add	sp, #12
   19ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19eca:	202a      	movs	r0, #42	; 0x2a
   19ecc:	f7fc feb4 	bl	16c38 <bsd_os_errno_set>
   19ed0:	f04f 33ff 	mov.w	r3, #4294967295
   19ed4:	e7de      	b.n	19e94 <logobj_interface_getopt+0x48>
   19ed6:	2016      	movs	r0, #22
   19ed8:	e7d8      	b.n	19e8c <logobj_interface_getopt+0x40>
   19eda:	2009      	movs	r0, #9
   19edc:	f7fc feac 	bl	16c38 <bsd_os_errno_set>
   19ee0:	f04f 33ff 	mov.w	r3, #4294967295
   19ee4:	e7d6      	b.n	19e94 <logobj_interface_getopt+0x48>
   19ee6:	bf00      	nop
   19ee8:	20026289 	.word	0x20026289
   19eec:	200217e0 	.word	0x200217e0

00019ef0 <logobj_interface_close>:
   19ef0:	b510      	push	{r4, lr}
   19ef2:	4604      	mov	r4, r0
   19ef4:	f007 fe4c 	bl	21b90 <interface_socket_from_handle_get>
   19ef8:	b138      	cbz	r0, 19f0a <logobj_interface_close+0x1a>
   19efa:	4620      	mov	r0, r4
   19efc:	f007 fd86 	bl	21a0c <interface_socket_free>
   19f00:	2300      	movs	r3, #0
   19f02:	4a05      	ldr	r2, [pc, #20]	; (19f18 <logobj_interface_close+0x28>)
   19f04:	4618      	mov	r0, r3
   19f06:	6013      	str	r3, [r2, #0]
   19f08:	bd10      	pop	{r4, pc}
   19f0a:	2009      	movs	r0, #9
   19f0c:	f7fc fe94 	bl	16c38 <bsd_os_errno_set>
   19f10:	f04f 30ff 	mov.w	r0, #4294967295
   19f14:	bd10      	pop	{r4, pc}
   19f16:	bf00      	nop
   19f18:	200217e4 	.word	0x200217e4

00019f1c <rpc_transport_send>:
   19f1c:	f000 bed8 	b.w	1acd0 <rpc_transport_ipc_send>

00019f20 <rpc_transport_rpc_alloc>:
   19f20:	f000 bf58 	b.w	1add4 <rpc_transport_ipc_tx_rpc_data_alloc>

00019f24 <rpc_transport_data_alloc>:
   19f24:	f000 bfbe 	b.w	1aea4 <rpc_transport_ipc_tx_data_alloc>

00019f28 <rpc_transport_rpc_free>:
   19f28:	f000 bdb6 	b.w	1aa98 <rpc_transport_ipc_msg_free>

00019f2c <rpc_transport_data_free>:
   19f2c:	f000 ba64 	b.w	1a3f8 <rpc_transport_ipc_data_free>

00019f30 <ipc_trace_init>:
   19f30:	4b01      	ldr	r3, [pc, #4]	; (19f38 <ipc_trace_init+0x8>)
   19f32:	6018      	str	r0, [r3, #0]
   19f34:	4770      	bx	lr
   19f36:	bf00      	nop
   19f38:	200217f4 	.word	0x200217f4

00019f3c <bsd_os_trace_irq_handler>:
   19f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f3e:	4b6e      	ldr	r3, [pc, #440]	; (1a0f8 <bsd_os_trace_irq_handler+0x1bc>)
   19f40:	b083      	sub	sp, #12
   19f42:	781b      	ldrb	r3, [r3, #0]
   19f44:	2b00      	cmp	r3, #0
   19f46:	f000 80d3 	beq.w	1a0f0 <bsd_os_trace_irq_handler+0x1b4>
   19f4a:	4b6c      	ldr	r3, [pc, #432]	; (1a0fc <bsd_os_trace_irq_handler+0x1c0>)
   19f4c:	681c      	ldr	r4, [r3, #0]
   19f4e:	b124      	cbz	r4, 19f5a <bsd_os_trace_irq_handler+0x1e>
   19f50:	68a3      	ldr	r3, [r4, #8]
   19f52:	6862      	ldr	r2, [r4, #4]
   19f54:	4293      	cmp	r3, r2
   19f56:	f040 808c 	bne.w	1a072 <bsd_os_trace_irq_handler+0x136>
   19f5a:	4b69      	ldr	r3, [pc, #420]	; (1a100 <bsd_os_trace_irq_handler+0x1c4>)
   19f5c:	681c      	ldr	r4, [r3, #0]
   19f5e:	b11c      	cbz	r4, 19f68 <bsd_os_trace_irq_handler+0x2c>
   19f60:	68a3      	ldr	r3, [r4, #8]
   19f62:	6862      	ldr	r2, [r4, #4]
   19f64:	4293      	cmp	r3, r2
   19f66:	d146      	bne.n	19ff6 <bsd_os_trace_irq_handler+0xba>
   19f68:	4b66      	ldr	r3, [pc, #408]	; (1a104 <bsd_os_trace_irq_handler+0x1c8>)
   19f6a:	681c      	ldr	r4, [r3, #0]
   19f6c:	b11c      	cbz	r4, 19f76 <bsd_os_trace_irq_handler+0x3a>
   19f6e:	68a3      	ldr	r3, [r4, #8]
   19f70:	6862      	ldr	r2, [r4, #4]
   19f72:	4293      	cmp	r3, r2
   19f74:	d101      	bne.n	19f7a <bsd_os_trace_irq_handler+0x3e>
   19f76:	b003      	add	sp, #12
   19f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f7a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   19f7e:	f8ad 2000 	strh.w	r2, [sp]
   19f82:	7822      	ldrb	r2, [r4, #0]
   19f84:	466e      	mov	r6, sp
   19f86:	f88d 2004 	strb.w	r2, [sp, #4]
   19f8a:	6862      	ldr	r2, [r4, #4]
   19f8c:	2105      	movs	r1, #5
   19f8e:	4293      	cmp	r3, r2
   19f90:	bf2a      	itet	cs
   19f92:	6927      	ldrcs	r7, [r4, #16]
   19f94:	1ad7      	subcc	r7, r2, r3
   19f96:	1aff      	subcs	r7, r7, r3
   19f98:	4293      	cmp	r3, r2
   19f9a:	bf94      	ite	ls
   19f9c:	2500      	movls	r5, #0
   19f9e:	68e5      	ldrhi	r5, [r4, #12]
   19fa0:	b2bf      	uxth	r7, r7
   19fa2:	bf88      	it	hi
   19fa4:	1b52      	subhi	r2, r2, r5
   19fa6:	4630      	mov	r0, r6
   19fa8:	bf88      	it	hi
   19faa:	b295      	uxthhi	r5, r2
   19fac:	f8ad 7002 	strh.w	r7, [sp, #2]
   19fb0:	f013 fde4 	bl	2db7c <bsd_os_trace_put>
   19fb4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   19fb8:	68a0      	ldr	r0, [r4, #8]
   19fba:	f013 fddf 	bl	2db7c <bsd_os_trace_put>
   19fbe:	68a3      	ldr	r3, [r4, #8]
   19fc0:	6922      	ldr	r2, [r4, #16]
   19fc2:	441f      	add	r7, r3
   19fc4:	4297      	cmp	r7, r2
   19fc6:	bf08      	it	eq
   19fc8:	68e3      	ldreq	r3, [r4, #12]
   19fca:	60a7      	str	r7, [r4, #8]
   19fcc:	bf08      	it	eq
   19fce:	60a3      	streq	r3, [r4, #8]
   19fd0:	2d00      	cmp	r5, #0
   19fd2:	d0d0      	beq.n	19f76 <bsd_os_trace_irq_handler+0x3a>
   19fd4:	2105      	movs	r1, #5
   19fd6:	4630      	mov	r0, r6
   19fd8:	f8ad 5002 	strh.w	r5, [sp, #2]
   19fdc:	f013 fdce 	bl	2db7c <bsd_os_trace_put>
   19fe0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   19fe4:	68e0      	ldr	r0, [r4, #12]
   19fe6:	f013 fdc9 	bl	2db7c <bsd_os_trace_put>
   19fea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   19fee:	68e3      	ldr	r3, [r4, #12]
   19ff0:	4413      	add	r3, r2
   19ff2:	60a3      	str	r3, [r4, #8]
   19ff4:	e7bf      	b.n	19f76 <bsd_os_trace_irq_handler+0x3a>
   19ff6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   19ffa:	f8ad 2000 	strh.w	r2, [sp]
   19ffe:	7822      	ldrb	r2, [r4, #0]
   1a000:	466e      	mov	r6, sp
   1a002:	f88d 2004 	strb.w	r2, [sp, #4]
   1a006:	6862      	ldr	r2, [r4, #4]
   1a008:	2105      	movs	r1, #5
   1a00a:	4293      	cmp	r3, r2
   1a00c:	bf2a      	itet	cs
   1a00e:	6927      	ldrcs	r7, [r4, #16]
   1a010:	1ad7      	subcc	r7, r2, r3
   1a012:	1aff      	subcs	r7, r7, r3
   1a014:	4293      	cmp	r3, r2
   1a016:	bf94      	ite	ls
   1a018:	2500      	movls	r5, #0
   1a01a:	68e5      	ldrhi	r5, [r4, #12]
   1a01c:	b2bf      	uxth	r7, r7
   1a01e:	bf88      	it	hi
   1a020:	1b52      	subhi	r2, r2, r5
   1a022:	4630      	mov	r0, r6
   1a024:	bf88      	it	hi
   1a026:	b295      	uxthhi	r5, r2
   1a028:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a02c:	f013 fda6 	bl	2db7c <bsd_os_trace_put>
   1a030:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a034:	68a0      	ldr	r0, [r4, #8]
   1a036:	f013 fda1 	bl	2db7c <bsd_os_trace_put>
   1a03a:	68a3      	ldr	r3, [r4, #8]
   1a03c:	6922      	ldr	r2, [r4, #16]
   1a03e:	441f      	add	r7, r3
   1a040:	4297      	cmp	r7, r2
   1a042:	bf08      	it	eq
   1a044:	68e3      	ldreq	r3, [r4, #12]
   1a046:	60a7      	str	r7, [r4, #8]
   1a048:	bf08      	it	eq
   1a04a:	60a3      	streq	r3, [r4, #8]
   1a04c:	2d00      	cmp	r5, #0
   1a04e:	d08b      	beq.n	19f68 <bsd_os_trace_irq_handler+0x2c>
   1a050:	2105      	movs	r1, #5
   1a052:	4630      	mov	r0, r6
   1a054:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a058:	f013 fd90 	bl	2db7c <bsd_os_trace_put>
   1a05c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a060:	68e0      	ldr	r0, [r4, #12]
   1a062:	f013 fd8b 	bl	2db7c <bsd_os_trace_put>
   1a066:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a06a:	68e3      	ldr	r3, [r4, #12]
   1a06c:	4413      	add	r3, r2
   1a06e:	60a3      	str	r3, [r4, #8]
   1a070:	e77a      	b.n	19f68 <bsd_os_trace_irq_handler+0x2c>
   1a072:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a076:	f8ad 2000 	strh.w	r2, [sp]
   1a07a:	7822      	ldrb	r2, [r4, #0]
   1a07c:	466e      	mov	r6, sp
   1a07e:	f88d 2004 	strb.w	r2, [sp, #4]
   1a082:	6862      	ldr	r2, [r4, #4]
   1a084:	2105      	movs	r1, #5
   1a086:	4293      	cmp	r3, r2
   1a088:	bf2a      	itet	cs
   1a08a:	6927      	ldrcs	r7, [r4, #16]
   1a08c:	1ad7      	subcc	r7, r2, r3
   1a08e:	1aff      	subcs	r7, r7, r3
   1a090:	4293      	cmp	r3, r2
   1a092:	bf94      	ite	ls
   1a094:	2500      	movls	r5, #0
   1a096:	68e5      	ldrhi	r5, [r4, #12]
   1a098:	b2bf      	uxth	r7, r7
   1a09a:	bf88      	it	hi
   1a09c:	1b52      	subhi	r2, r2, r5
   1a09e:	4630      	mov	r0, r6
   1a0a0:	bf88      	it	hi
   1a0a2:	b295      	uxthhi	r5, r2
   1a0a4:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a0a8:	f013 fd68 	bl	2db7c <bsd_os_trace_put>
   1a0ac:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a0b0:	68a0      	ldr	r0, [r4, #8]
   1a0b2:	f013 fd63 	bl	2db7c <bsd_os_trace_put>
   1a0b6:	68a3      	ldr	r3, [r4, #8]
   1a0b8:	6922      	ldr	r2, [r4, #16]
   1a0ba:	441f      	add	r7, r3
   1a0bc:	4297      	cmp	r7, r2
   1a0be:	bf08      	it	eq
   1a0c0:	68e3      	ldreq	r3, [r4, #12]
   1a0c2:	60a7      	str	r7, [r4, #8]
   1a0c4:	bf08      	it	eq
   1a0c6:	60a3      	streq	r3, [r4, #8]
   1a0c8:	2d00      	cmp	r5, #0
   1a0ca:	f43f af46 	beq.w	19f5a <bsd_os_trace_irq_handler+0x1e>
   1a0ce:	2105      	movs	r1, #5
   1a0d0:	4630      	mov	r0, r6
   1a0d2:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a0d6:	f013 fd51 	bl	2db7c <bsd_os_trace_put>
   1a0da:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a0de:	68e0      	ldr	r0, [r4, #12]
   1a0e0:	f013 fd4c 	bl	2db7c <bsd_os_trace_put>
   1a0e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a0e8:	68e3      	ldr	r3, [r4, #12]
   1a0ea:	4413      	add	r3, r2
   1a0ec:	60a3      	str	r3, [r4, #8]
   1a0ee:	e734      	b.n	19f5a <bsd_os_trace_irq_handler+0x1e>
   1a0f0:	f7fc ff46 	bl	16f80 <bsd_os_trace_irq_clear>
   1a0f4:	e729      	b.n	19f4a <bsd_os_trace_irq_handler+0xe>
   1a0f6:	bf00      	nop
   1a0f8:	2002628b 	.word	0x2002628b
   1a0fc:	200217f0 	.word	0x200217f0
   1a100:	200217e8 	.word	0x200217e8
   1a104:	200217ec 	.word	0x200217ec

0001a108 <ipc_trace_handle>:
   1a108:	2200      	movs	r2, #0
   1a10a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a10e:	4bb2      	ldr	r3, [pc, #712]	; (1a3d8 <ipc_trace_handle+0x2d0>)
   1a110:	b083      	sub	sp, #12
   1a112:	681b      	ldr	r3, [r3, #0]
   1a114:	6919      	ldr	r1, [r3, #16]
   1a116:	695c      	ldr	r4, [r3, #20]
   1a118:	7c18      	ldrb	r0, [r3, #16]
   1a11a:	741a      	strb	r2, [r3, #16]
   1a11c:	7c58      	ldrb	r0, [r3, #17]
   1a11e:	745a      	strb	r2, [r3, #17]
   1a120:	7c98      	ldrb	r0, [r3, #18]
   1a122:	749a      	strb	r2, [r3, #18]
   1a124:	7cd8      	ldrb	r0, [r3, #19]
   1a126:	74da      	strb	r2, [r3, #19]
   1a128:	7d18      	ldrb	r0, [r3, #20]
   1a12a:	751a      	strb	r2, [r3, #20]
   1a12c:	7d58      	ldrb	r0, [r3, #21]
   1a12e:	755a      	strb	r2, [r3, #21]
   1a130:	7d98      	ldrb	r0, [r3, #22]
   1a132:	759a      	strb	r2, [r3, #22]
   1a134:	7dd8      	ldrb	r0, [r3, #23]
   1a136:	75da      	strb	r2, [r3, #23]
   1a138:	b1a9      	cbz	r1, 1a166 <ipc_trace_handle+0x5e>
   1a13a:	3901      	subs	r1, #1
   1a13c:	2903      	cmp	r1, #3
   1a13e:	d812      	bhi.n	1a166 <ipc_trace_handle+0x5e>
   1a140:	e8df f001 	tbb	[pc, r1]
   1a144:	1402a97c 	.word	0x1402a97c
   1a148:	2501      	movs	r5, #1
   1a14a:	2003      	movs	r0, #3
   1a14c:	2200      	movs	r2, #0
   1a14e:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1a152:	4ca2      	ldr	r4, [pc, #648]	; (1a3dc <ipc_trace_handle+0x2d4>)
   1a154:	7025      	strb	r5, [r4, #0]
   1a156:	7a1c      	ldrb	r4, [r3, #8]
   1a158:	7218      	strb	r0, [r3, #8]
   1a15a:	7a58      	ldrb	r0, [r3, #9]
   1a15c:	725a      	strb	r2, [r3, #9]
   1a15e:	7a98      	ldrb	r0, [r3, #10]
   1a160:	729a      	strb	r2, [r3, #10]
   1a162:	7ada      	ldrb	r2, [r3, #11]
   1a164:	72d9      	strb	r1, [r3, #11]
   1a166:	b003      	add	sp, #12
   1a168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a16c:	2104      	movs	r1, #4
   1a16e:	2200      	movs	r2, #0
   1a170:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1a174:	7a1c      	ldrb	r4, [r3, #8]
   1a176:	7219      	strb	r1, [r3, #8]
   1a178:	7a59      	ldrb	r1, [r3, #9]
   1a17a:	725a      	strb	r2, [r3, #9]
   1a17c:	4997      	ldr	r1, [pc, #604]	; (1a3dc <ipc_trace_handle+0x2d4>)
   1a17e:	7a9c      	ldrb	r4, [r3, #10]
   1a180:	729a      	strb	r2, [r3, #10]
   1a182:	7adc      	ldrb	r4, [r3, #11]
   1a184:	72d8      	strb	r0, [r3, #11]
   1a186:	700a      	strb	r2, [r1, #0]
   1a188:	780b      	ldrb	r3, [r1, #0]
   1a18a:	2b00      	cmp	r3, #0
   1a18c:	f000 809f 	beq.w	1a2ce <ipc_trace_handle+0x1c6>
   1a190:	4b93      	ldr	r3, [pc, #588]	; (1a3e0 <ipc_trace_handle+0x2d8>)
   1a192:	681c      	ldr	r4, [r3, #0]
   1a194:	b124      	cbz	r4, 1a1a0 <ipc_trace_handle+0x98>
   1a196:	68a3      	ldr	r3, [r4, #8]
   1a198:	6862      	ldr	r2, [r4, #4]
   1a19a:	4293      	cmp	r3, r2
   1a19c:	f040 80d9 	bne.w	1a352 <ipc_trace_handle+0x24a>
   1a1a0:	4b90      	ldr	r3, [pc, #576]	; (1a3e4 <ipc_trace_handle+0x2dc>)
   1a1a2:	681c      	ldr	r4, [r3, #0]
   1a1a4:	b124      	cbz	r4, 1a1b0 <ipc_trace_handle+0xa8>
   1a1a6:	68a3      	ldr	r3, [r4, #8]
   1a1a8:	6862      	ldr	r2, [r4, #4]
   1a1aa:	4293      	cmp	r3, r2
   1a1ac:	f040 8092 	bne.w	1a2d4 <ipc_trace_handle+0x1cc>
   1a1b0:	4b8d      	ldr	r3, [pc, #564]	; (1a3e8 <ipc_trace_handle+0x2e0>)
   1a1b2:	681c      	ldr	r4, [r3, #0]
   1a1b4:	2c00      	cmp	r4, #0
   1a1b6:	d0d6      	beq.n	1a166 <ipc_trace_handle+0x5e>
   1a1b8:	68a3      	ldr	r3, [r4, #8]
   1a1ba:	6862      	ldr	r2, [r4, #4]
   1a1bc:	4293      	cmp	r3, r2
   1a1be:	d0d2      	beq.n	1a166 <ipc_trace_handle+0x5e>
   1a1c0:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a1c4:	f8ad 2000 	strh.w	r2, [sp]
   1a1c8:	7822      	ldrb	r2, [r4, #0]
   1a1ca:	466e      	mov	r6, sp
   1a1cc:	f88d 2004 	strb.w	r2, [sp, #4]
   1a1d0:	6862      	ldr	r2, [r4, #4]
   1a1d2:	2105      	movs	r1, #5
   1a1d4:	4293      	cmp	r3, r2
   1a1d6:	bf2a      	itet	cs
   1a1d8:	6927      	ldrcs	r7, [r4, #16]
   1a1da:	1ad7      	subcc	r7, r2, r3
   1a1dc:	1aff      	subcs	r7, r7, r3
   1a1de:	4293      	cmp	r3, r2
   1a1e0:	bf94      	ite	ls
   1a1e2:	2500      	movls	r5, #0
   1a1e4:	68e5      	ldrhi	r5, [r4, #12]
   1a1e6:	b2bf      	uxth	r7, r7
   1a1e8:	bf88      	it	hi
   1a1ea:	1b52      	subhi	r2, r2, r5
   1a1ec:	4630      	mov	r0, r6
   1a1ee:	bf88      	it	hi
   1a1f0:	b295      	uxthhi	r5, r2
   1a1f2:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a1f6:	f013 fcc1 	bl	2db7c <bsd_os_trace_put>
   1a1fa:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a1fe:	68a0      	ldr	r0, [r4, #8]
   1a200:	f013 fcbc 	bl	2db7c <bsd_os_trace_put>
   1a204:	68a3      	ldr	r3, [r4, #8]
   1a206:	6922      	ldr	r2, [r4, #16]
   1a208:	441f      	add	r7, r3
   1a20a:	4297      	cmp	r7, r2
   1a20c:	bf08      	it	eq
   1a20e:	68e3      	ldreq	r3, [r4, #12]
   1a210:	60a7      	str	r7, [r4, #8]
   1a212:	bf08      	it	eq
   1a214:	60a3      	streq	r3, [r4, #8]
   1a216:	2d00      	cmp	r5, #0
   1a218:	d0a5      	beq.n	1a166 <ipc_trace_handle+0x5e>
   1a21a:	2105      	movs	r1, #5
   1a21c:	4630      	mov	r0, r6
   1a21e:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a222:	f013 fcab 	bl	2db7c <bsd_os_trace_put>
   1a226:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a22a:	68e0      	ldr	r0, [r4, #12]
   1a22c:	f013 fca6 	bl	2db7c <bsd_os_trace_put>
   1a230:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a234:	68e3      	ldr	r3, [r4, #12]
   1a236:	4413      	add	r3, r2
   1a238:	60a3      	str	r3, [r4, #8]
   1a23a:	e794      	b.n	1a166 <ipc_trace_handle+0x5e>
   1a23c:	4a67      	ldr	r2, [pc, #412]	; (1a3dc <ipc_trace_handle+0x2d4>)
   1a23e:	7811      	ldrb	r1, [r2, #0]
   1a240:	b109      	cbz	r1, 1a246 <ipc_trace_handle+0x13e>
   1a242:	2100      	movs	r1, #0
   1a244:	7011      	strb	r1, [r2, #0]
   1a246:	68a5      	ldr	r5, [r4, #8]
   1a248:	2d00      	cmp	r5, #0
   1a24a:	d03b      	beq.n	1a2c4 <ipc_trace_handle+0x1bc>
   1a24c:	f04f 0c00 	mov.w	ip, #0
   1a250:	f8df a190 	ldr.w	sl, [pc, #400]	; 1a3e4 <ipc_trace_handle+0x2dc>
   1a254:	f8df b188 	ldr.w	fp, [pc, #392]	; 1a3e0 <ipc_trace_handle+0x2d8>
   1a258:	4963      	ldr	r1, [pc, #396]	; (1a3e8 <ipc_trace_handle+0x2e0>)
   1a25a:	46e1      	mov	r9, ip
   1a25c:	4666      	mov	r6, ip
   1a25e:	4662      	mov	r2, ip
   1a260:	f8d1 e000 	ldr.w	lr, [r1]
   1a264:	f8da 8000 	ldr.w	r8, [sl]
   1a268:	f8db 7000 	ldr.w	r7, [fp]
   1a26c:	e008      	b.n	1a280 <ipc_trace_handle+0x178>
   1a26e:	2963      	cmp	r1, #99	; 0x63
   1a270:	d016      	beq.n	1a2a0 <ipc_trace_handle+0x198>
   1a272:	2961      	cmp	r1, #97	; 0x61
   1a274:	bf04      	itt	eq
   1a276:	4607      	moveq	r7, r0
   1a278:	2601      	moveq	r6, #1
   1a27a:	3201      	adds	r2, #1
   1a27c:	42aa      	cmp	r2, r5
   1a27e:	d013      	beq.n	1a2a8 <ipc_trace_handle+0x1a0>
   1a280:	1c91      	adds	r1, r2, #2
   1a282:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1a286:	6848      	ldr	r0, [r1, #4]
   1a288:	7801      	ldrb	r1, [r0, #0]
   1a28a:	2962      	cmp	r1, #98	; 0x62
   1a28c:	d1ef      	bne.n	1a26e <ipc_trace_handle+0x166>
   1a28e:	4680      	mov	r8, r0
   1a290:	f04f 0901 	mov.w	r9, #1
   1a294:	e7f1      	b.n	1a27a <ipc_trace_handle+0x172>
   1a296:	f7fc fe6b 	bl	16f70 <bsd_os_trace_irq_set>
   1a29a:	b003      	add	sp, #12
   1a29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2a0:	4686      	mov	lr, r0
   1a2a2:	f04f 0c01 	mov.w	ip, #1
   1a2a6:	e7e8      	b.n	1a27a <ipc_trace_handle+0x172>
   1a2a8:	2e00      	cmp	r6, #0
   1a2aa:	f040 8091 	bne.w	1a3d0 <ipc_trace_handle+0x2c8>
   1a2ae:	f1b9 0f00 	cmp.w	r9, #0
   1a2b2:	d001      	beq.n	1a2b8 <ipc_trace_handle+0x1b0>
   1a2b4:	f8ca 8000 	str.w	r8, [sl]
   1a2b8:	f1bc 0f00 	cmp.w	ip, #0
   1a2bc:	d002      	beq.n	1a2c4 <ipc_trace_handle+0x1bc>
   1a2be:	4a4a      	ldr	r2, [pc, #296]	; (1a3e8 <ipc_trace_handle+0x2e0>)
   1a2c0:	f8c2 e000 	str.w	lr, [r2]
   1a2c4:	2001      	movs	r0, #1
   1a2c6:	2200      	movs	r2, #0
   1a2c8:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1a2cc:	e743      	b.n	1a156 <ipc_trace_handle+0x4e>
   1a2ce:	f7fc fe57 	bl	16f80 <bsd_os_trace_irq_clear>
   1a2d2:	e75d      	b.n	1a190 <ipc_trace_handle+0x88>
   1a2d4:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a2d8:	f8ad 2000 	strh.w	r2, [sp]
   1a2dc:	7822      	ldrb	r2, [r4, #0]
   1a2de:	466e      	mov	r6, sp
   1a2e0:	f88d 2004 	strb.w	r2, [sp, #4]
   1a2e4:	6862      	ldr	r2, [r4, #4]
   1a2e6:	2105      	movs	r1, #5
   1a2e8:	4293      	cmp	r3, r2
   1a2ea:	bf2a      	itet	cs
   1a2ec:	6927      	ldrcs	r7, [r4, #16]
   1a2ee:	1ad7      	subcc	r7, r2, r3
   1a2f0:	1aff      	subcs	r7, r7, r3
   1a2f2:	4293      	cmp	r3, r2
   1a2f4:	bf94      	ite	ls
   1a2f6:	2500      	movls	r5, #0
   1a2f8:	68e5      	ldrhi	r5, [r4, #12]
   1a2fa:	b2bf      	uxth	r7, r7
   1a2fc:	bf88      	it	hi
   1a2fe:	1b52      	subhi	r2, r2, r5
   1a300:	4630      	mov	r0, r6
   1a302:	bf88      	it	hi
   1a304:	b295      	uxthhi	r5, r2
   1a306:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a30a:	f013 fc37 	bl	2db7c <bsd_os_trace_put>
   1a30e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a312:	68a0      	ldr	r0, [r4, #8]
   1a314:	f013 fc32 	bl	2db7c <bsd_os_trace_put>
   1a318:	68a3      	ldr	r3, [r4, #8]
   1a31a:	6922      	ldr	r2, [r4, #16]
   1a31c:	441f      	add	r7, r3
   1a31e:	4297      	cmp	r7, r2
   1a320:	bf08      	it	eq
   1a322:	68e3      	ldreq	r3, [r4, #12]
   1a324:	60a7      	str	r7, [r4, #8]
   1a326:	bf08      	it	eq
   1a328:	60a3      	streq	r3, [r4, #8]
   1a32a:	2d00      	cmp	r5, #0
   1a32c:	f43f af40 	beq.w	1a1b0 <ipc_trace_handle+0xa8>
   1a330:	2105      	movs	r1, #5
   1a332:	4630      	mov	r0, r6
   1a334:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a338:	f013 fc20 	bl	2db7c <bsd_os_trace_put>
   1a33c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a340:	68e0      	ldr	r0, [r4, #12]
   1a342:	f013 fc1b 	bl	2db7c <bsd_os_trace_put>
   1a346:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a34a:	68e3      	ldr	r3, [r4, #12]
   1a34c:	4413      	add	r3, r2
   1a34e:	60a3      	str	r3, [r4, #8]
   1a350:	e72e      	b.n	1a1b0 <ipc_trace_handle+0xa8>
   1a352:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a356:	f8ad 2000 	strh.w	r2, [sp]
   1a35a:	7822      	ldrb	r2, [r4, #0]
   1a35c:	466e      	mov	r6, sp
   1a35e:	f88d 2004 	strb.w	r2, [sp, #4]
   1a362:	6862      	ldr	r2, [r4, #4]
   1a364:	2105      	movs	r1, #5
   1a366:	4293      	cmp	r3, r2
   1a368:	bf2a      	itet	cs
   1a36a:	6927      	ldrcs	r7, [r4, #16]
   1a36c:	1ad7      	subcc	r7, r2, r3
   1a36e:	1aff      	subcs	r7, r7, r3
   1a370:	4293      	cmp	r3, r2
   1a372:	bf94      	ite	ls
   1a374:	2500      	movls	r5, #0
   1a376:	68e5      	ldrhi	r5, [r4, #12]
   1a378:	b2bf      	uxth	r7, r7
   1a37a:	bf88      	it	hi
   1a37c:	1b52      	subhi	r2, r2, r5
   1a37e:	4630      	mov	r0, r6
   1a380:	bf88      	it	hi
   1a382:	b295      	uxthhi	r5, r2
   1a384:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a388:	f013 fbf8 	bl	2db7c <bsd_os_trace_put>
   1a38c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a390:	68a0      	ldr	r0, [r4, #8]
   1a392:	f013 fbf3 	bl	2db7c <bsd_os_trace_put>
   1a396:	68a3      	ldr	r3, [r4, #8]
   1a398:	6922      	ldr	r2, [r4, #16]
   1a39a:	441f      	add	r7, r3
   1a39c:	4297      	cmp	r7, r2
   1a39e:	bf08      	it	eq
   1a3a0:	68e3      	ldreq	r3, [r4, #12]
   1a3a2:	60a7      	str	r7, [r4, #8]
   1a3a4:	bf08      	it	eq
   1a3a6:	60a3      	streq	r3, [r4, #8]
   1a3a8:	2d00      	cmp	r5, #0
   1a3aa:	f43f aef9 	beq.w	1a1a0 <ipc_trace_handle+0x98>
   1a3ae:	2105      	movs	r1, #5
   1a3b0:	4630      	mov	r0, r6
   1a3b2:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a3b6:	f013 fbe1 	bl	2db7c <bsd_os_trace_put>
   1a3ba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a3be:	68e0      	ldr	r0, [r4, #12]
   1a3c0:	f013 fbdc 	bl	2db7c <bsd_os_trace_put>
   1a3c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a3c8:	68e3      	ldr	r3, [r4, #12]
   1a3ca:	4413      	add	r3, r2
   1a3cc:	60a3      	str	r3, [r4, #8]
   1a3ce:	e6e7      	b.n	1a1a0 <ipc_trace_handle+0x98>
   1a3d0:	f8cb 7000 	str.w	r7, [fp]
   1a3d4:	e76b      	b.n	1a2ae <ipc_trace_handle+0x1a6>
   1a3d6:	bf00      	nop
   1a3d8:	200217f4 	.word	0x200217f4
   1a3dc:	2002628b 	.word	0x2002628b
   1a3e0:	200217f0 	.word	0x200217f0
   1a3e4:	200217e8 	.word	0x200217e8
   1a3e8:	200217ec 	.word	0x200217ec

0001a3ec <rpc_trace_coredump_in_progress>:
   1a3ec:	4b01      	ldr	r3, [pc, #4]	; (1a3f4 <rpc_trace_coredump_in_progress+0x8>)
   1a3ee:	7818      	ldrb	r0, [r3, #0]
   1a3f0:	4770      	bx	lr
   1a3f2:	bf00      	nop
   1a3f4:	2002628b 	.word	0x2002628b

0001a3f8 <rpc_transport_ipc_data_free>:
   1a3f8:	b510      	push	{r4, lr}
   1a3fa:	4b0e      	ldr	r3, [pc, #56]	; (1a434 <rpc_transport_ipc_data_free+0x3c>)
   1a3fc:	4604      	mov	r4, r0
   1a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a402:	4413      	add	r3, r2
   1a404:	4298      	cmp	r0, r3
   1a406:	d20d      	bcs.n	1a424 <rpc_transport_ipc_data_free+0x2c>
   1a408:	4282      	cmp	r2, r0
   1a40a:	d80b      	bhi.n	1a424 <rpc_transport_ipc_data_free+0x2c>
   1a40c:	f000 fd1a 	bl	1ae44 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1a410:	b158      	cbz	r0, 1a42a <rpc_transport_ipc_data_free+0x32>
   1a412:	4a09      	ldr	r2, [pc, #36]	; (1a438 <rpc_transport_ipc_data_free+0x40>)
   1a414:	6084      	str	r4, [r0, #8]
   1a416:	6002      	str	r2, [r0, #0]
   1a418:	f7ff fd80 	bl	19f1c <rpc_transport_send>
   1a41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a420:	f7fc bd96 	b.w	16f50 <bsd_os_application_irq_set>
   1a424:	4620      	mov	r0, r4
   1a426:	f006 ff7b 	bl	21320 <nrf_shared_free>
   1a42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a42e:	f7fc bd8f 	b.w	16f50 <bsd_os_application_irq_set>
   1a432:	bf00      	nop
   1a434:	200217f8 	.word	0x200217f8
   1a438:	00020001 	.word	0x00020001

0001a43c <rpc_transport_ipc_init>:
   1a43c:	b188      	cbz	r0, 1a462 <rpc_transport_ipc_init+0x26>
   1a43e:	b510      	push	{r4, lr}
   1a440:	b082      	sub	sp, #8
   1a442:	aa01      	add	r2, sp, #4
   1a444:	4669      	mov	r1, sp
   1a446:	4604      	mov	r4, r0
   1a448:	f000 fb58 	bl	1aafc <rpc_transport_ipc_tx_init>
   1a44c:	4602      	mov	r2, r0
   1a44e:	b148      	cbz	r0, 1a464 <rpc_transport_ipc_init+0x28>
   1a450:	4b12      	ldr	r3, [pc, #72]	; (1a49c <rpc_transport_ipc_init+0x60>)
   1a452:	3428      	adds	r4, #40	; 0x28
   1a454:	e894 0003 	ldmia.w	r4, {r0, r1}
   1a458:	e883 0003 	stmia.w	r3, {r0, r1}
   1a45c:	4610      	mov	r0, r2
   1a45e:	b002      	add	sp, #8
   1a460:	bd10      	pop	{r4, pc}
   1a462:	e7fe      	b.n	1a462 <rpc_transport_ipc_init+0x26>
   1a464:	e9dd 1200 	ldrd	r1, r2, [sp]
   1a468:	4620      	mov	r0, r4
   1a46a:	f000 f9ef 	bl	1a84c <rpc_transport_ipc_rx_init>
   1a46e:	4602      	mov	r2, r0
   1a470:	4b0a      	ldr	r3, [pc, #40]	; (1a49c <rpc_transport_ipc_init+0x60>)
   1a472:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1a476:	c903      	ldmia	r1, {r0, r1}
   1a478:	e883 0003 	stmia.w	r3, {r0, r1}
   1a47c:	2a00      	cmp	r2, #0
   1a47e:	d1ed      	bne.n	1a45c <rpc_transport_ipc_init+0x20>
   1a480:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1a484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a486:	4906      	ldr	r1, [pc, #24]	; (1a4a0 <rpc_transport_ipc_init+0x64>)
   1a488:	015b      	lsls	r3, r3, #5
   1a48a:	b2db      	uxtb	r3, r3
   1a48c:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   1a490:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   1a494:	6048      	str	r0, [r1, #4]
   1a496:	4610      	mov	r0, r2
   1a498:	b002      	add	sp, #8
   1a49a:	bd10      	pop	{r4, pc}
   1a49c:	200217f8 	.word	0x200217f8
   1a4a0:	e000e100 	.word	0xe000e100

0001a4a4 <rpc_transport_ipc_shutdown>:
   1a4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a4a8:	b08c      	sub	sp, #48	; 0x30
   1a4aa:	f000 fd05 	bl	1aeb8 <rpc_transport_ipc_tx_suspend>
   1a4ae:	2200      	movs	r2, #0
   1a4b0:	2010      	movs	r0, #16
   1a4b2:	4b31      	ldr	r3, [pc, #196]	; (1a578 <rpc_transport_ipc_shutdown+0xd4>)
   1a4b4:	f04f 0c01 	mov.w	ip, #1
   1a4b8:	4c30      	ldr	r4, [pc, #192]	; (1a57c <rpc_transport_ipc_shutdown+0xd8>)
   1a4ba:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1a4be:	6821      	ldr	r1, [r4, #0]
   1a4c0:	2704      	movs	r7, #4
   1a4c2:	910a      	str	r1, [sp, #40]	; 0x28
   1a4c4:	492e      	ldr	r1, [pc, #184]	; (1a580 <rpc_transport_ipc_shutdown+0xdc>)
   1a4c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a4c8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1a4cc:	680d      	ldr	r5, [r1, #0]
   1a4ce:	950b      	str	r5, [sp, #44]	; 0x2c
   1a4d0:	4d2c      	ldr	r5, [pc, #176]	; (1a584 <rpc_transport_ipc_shutdown+0xe0>)
   1a4d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a4d4:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1a4d8:	682d      	ldr	r5, [r5, #0]
   1a4da:	2640      	movs	r6, #64	; 0x40
   1a4dc:	9509      	str	r5, [sp, #36]	; 0x24
   1a4de:	4d2a      	ldr	r5, [pc, #168]	; (1a588 <rpc_transport_ipc_shutdown+0xe4>)
   1a4e0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1a4e4:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   1a4e8:	f8d5 e000 	ldr.w	lr, [r5]
   1a4ec:	2580      	movs	r5, #128	; 0x80
   1a4ee:	f8cd e020 	str.w	lr, [sp, #32]
   1a4f2:	f8dd e020 	ldr.w	lr, [sp, #32]
   1a4f6:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1a4fa:	f8d4 e000 	ldr.w	lr, [r4]
   1a4fe:	2405      	movs	r4, #5
   1a500:	f8cd e01c 	str.w	lr, [sp, #28]
   1a504:	f8df e08c 	ldr.w	lr, [pc, #140]	; 1a594 <rpc_transport_ipc_shutdown+0xf0>
   1a508:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1a50c:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   1a510:	f8de e000 	ldr.w	lr, [lr]
   1a514:	f8cd e018 	str.w	lr, [sp, #24]
   1a518:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1a598 <rpc_transport_ipc_shutdown+0xf4>
   1a51c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a520:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   1a524:	f8de e000 	ldr.w	lr, [lr]
   1a528:	f8cd e014 	str.w	lr, [sp, #20]
   1a52c:	f8dd e014 	ldr.w	lr, [sp, #20]
   1a530:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   1a534:	f8d1 c000 	ldr.w	ip, [r1]
   1a538:	f8cd c010 	str.w	ip, [sp, #16]
   1a53c:	f8dd c010 	ldr.w	ip, [sp, #16]
   1a540:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   1a544:	680f      	ldr	r7, [r1, #0]
   1a546:	9703      	str	r7, [sp, #12]
   1a548:	9f03      	ldr	r7, [sp, #12]
   1a54a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1a54e:	6808      	ldr	r0, [r1, #0]
   1a550:	9002      	str	r0, [sp, #8]
   1a552:	9802      	ldr	r0, [sp, #8]
   1a554:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   1a558:	680e      	ldr	r6, [r1, #0]
   1a55a:	480c      	ldr	r0, [pc, #48]	; (1a58c <rpc_transport_ipc_shutdown+0xe8>)
   1a55c:	9601      	str	r6, [sp, #4]
   1a55e:	9e01      	ldr	r6, [sp, #4]
   1a560:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   1a564:	6809      	ldr	r1, [r1, #0]
   1a566:	4b0a      	ldr	r3, [pc, #40]	; (1a590 <rpc_transport_ipc_shutdown+0xec>)
   1a568:	9100      	str	r1, [sp, #0]
   1a56a:	9900      	ldr	r1, [sp, #0]
   1a56c:	8002      	strh	r2, [r0, #0]
   1a56e:	601c      	str	r4, [r3, #0]
   1a570:	b00c      	add	sp, #48	; 0x30
   1a572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a576:	bf00      	nop
   1a578:	4002a000 	.word	0x4002a000
   1a57c:	4002a5a0 	.word	0x4002a5a0
   1a580:	4002a308 	.word	0x4002a308
   1a584:	4002a590 	.word	0x4002a590
   1a588:	4002a598 	.word	0x4002a598
   1a58c:	200242b8 	.word	0x200242b8
   1a590:	20021810 	.word	0x20021810
   1a594:	4002a5a8 	.word	0x4002a5a8
   1a598:	4002a5ac 	.word	0x4002a5ac

0001a59c <bsd_os_application_irq_handler>:
   1a59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5a0:	f7fc fcde 	bl	16f60 <bsd_os_application_irq_clear>
   1a5a4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1a67c <bsd_os_application_irq_handler+0xe0>
   1a5a8:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1a680 <bsd_os_application_irq_handler+0xe4>
   1a5ac:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1a684 <bsd_os_application_irq_handler+0xe8>
   1a5b0:	f108 0908 	add.w	r9, r8, #8
   1a5b4:	f858 7b04 	ldr.w	r7, [r8], #4
   1a5b8:	6839      	ldr	r1, [r7, #0]
   1a5ba:	b361      	cbz	r1, 1a616 <bsd_os_application_irq_handler+0x7a>
   1a5bc:	2400      	movs	r4, #0
   1a5be:	e002      	b.n	1a5c6 <bsd_os_application_irq_handler+0x2a>
   1a5c0:	3401      	adds	r4, #1
   1a5c2:	428c      	cmp	r4, r1
   1a5c4:	d227      	bcs.n	1a616 <bsd_os_application_irq_handler+0x7a>
   1a5c6:	00e6      	lsls	r6, r4, #3
   1a5c8:	19bd      	adds	r5, r7, r6
   1a5ca:	68aa      	ldr	r2, [r5, #8]
   1a5cc:	2a00      	cmp	r2, #0
   1a5ce:	d0f7      	beq.n	1a5c0 <bsd_os_application_irq_handler+0x24>
   1a5d0:	686a      	ldr	r2, [r5, #4]
   1a5d2:	b2d2      	uxtb	r2, r2
   1a5d4:	2a01      	cmp	r2, #1
   1a5d6:	d1f3      	bne.n	1a5c0 <bsd_os_application_irq_handler+0x24>
   1a5d8:	6868      	ldr	r0, [r5, #4]
   1a5da:	f8bb 2000 	ldrh.w	r2, [fp]
   1a5de:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   1a5e2:	d1ed      	bne.n	1a5c0 <bsd_os_application_irq_handler+0x24>
   1a5e4:	68a8      	ldr	r0, [r5, #8]
   1a5e6:	6841      	ldr	r1, [r0, #4]
   1a5e8:	b2c9      	uxtb	r1, r1
   1a5ea:	2902      	cmp	r1, #2
   1a5ec:	d02c      	beq.n	1a648 <bsd_os_application_irq_handler+0xac>
   1a5ee:	2901      	cmp	r1, #1
   1a5f0:	d015      	beq.n	1a61e <bsd_os_application_irq_handler+0x82>
   1a5f2:	3604      	adds	r6, #4
   1a5f4:	59b9      	ldr	r1, [r7, r6]
   1a5f6:	3201      	adds	r2, #1
   1a5f8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1a5fc:	f041 0103 	orr.w	r1, r1, #3
   1a600:	51b9      	str	r1, [r7, r6]
   1a602:	f8ab 2000 	strh.w	r2, [fp]
   1a606:	f7fc fca3 	bl	16f50 <bsd_os_application_irq_set>
   1a60a:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a60e:	3401      	adds	r4, #1
   1a610:	6839      	ldr	r1, [r7, #0]
   1a612:	428c      	cmp	r4, r1
   1a614:	d3d7      	bcc.n	1a5c6 <bsd_os_application_irq_handler+0x2a>
   1a616:	45c1      	cmp	r9, r8
   1a618:	d1cc      	bne.n	1a5b4 <bsd_os_application_irq_handler+0x18>
   1a61a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a61e:	6801      	ldr	r1, [r0, #0]
   1a620:	0c09      	lsrs	r1, r1, #16
   1a622:	f002 ff45 	bl	1d4b0 <rpc_handle_ctrl_message>
   1a626:	2801      	cmp	r0, #1
   1a628:	d014      	beq.n	1a654 <bsd_os_application_irq_handler+0xb8>
   1a62a:	d310      	bcc.n	1a64e <bsd_os_application_irq_handler+0xb2>
   1a62c:	2802      	cmp	r0, #2
   1a62e:	d007      	beq.n	1a640 <bsd_os_application_irq_handler+0xa4>
   1a630:	2203      	movs	r2, #3
   1a632:	4b11      	ldr	r3, [pc, #68]	; (1a678 <bsd_os_application_irq_handler+0xdc>)
   1a634:	4610      	mov	r0, r2
   1a636:	f8ca 2000 	str.w	r2, [sl]
   1a63a:	601a      	str	r2, [r3, #0]
   1a63c:	f005 fb6c 	bl	1fd18 <rpc_transport_ipc_fault_handler>
   1a640:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a644:	6839      	ldr	r1, [r7, #0]
   1a646:	e7bb      	b.n	1a5c0 <bsd_os_application_irq_handler+0x24>
   1a648:	f002 ff4a 	bl	1d4e0 <rpc_handle_data_message>
   1a64c:	e7eb      	b.n	1a626 <bsd_os_application_irq_handler+0x8a>
   1a64e:	f8bb 2000 	ldrh.w	r2, [fp]
   1a652:	e7ce      	b.n	1a5f2 <bsd_os_application_irq_handler+0x56>
   1a654:	686a      	ldr	r2, [r5, #4]
   1a656:	f8bb 1000 	ldrh.w	r1, [fp]
   1a65a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1a65e:	f042 0202 	orr.w	r2, r2, #2
   1a662:	606a      	str	r2, [r5, #4]
   1a664:	1c4a      	adds	r2, r1, #1
   1a666:	f8ab 2000 	strh.w	r2, [fp]
   1a66a:	f7fc fc71 	bl	16f50 <bsd_os_application_irq_set>
   1a66e:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a672:	6839      	ldr	r1, [r7, #0]
   1a674:	e7a4      	b.n	1a5c0 <bsd_os_application_irq_handler+0x24>
   1a676:	bf00      	nop
   1a678:	20021800 	.word	0x20021800
   1a67c:	20021808 	.word	0x20021808
   1a680:	200242b8 	.word	0x200242b8
   1a684:	20021810 	.word	0x20021810

0001a688 <IPC_IRQHandler>:
   1a688:	b570      	push	{r4, r5, r6, lr}
   1a68a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1a68e:	4d62      	ldr	r5, [pc, #392]	; (1a818 <IPC_IRQHandler+0x190>)
   1a690:	4c62      	ldr	r4, [pc, #392]	; (1a81c <IPC_IRQHandler+0x194>)
   1a692:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   1a696:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1a69a:	b086      	sub	sp, #24
   1a69c:	061b      	lsls	r3, r3, #24
   1a69e:	d50b      	bpl.n	1a6b8 <IPC_IRQHandler+0x30>
   1a6a0:	f7ff fd32 	bl	1a108 <ipc_trace_handle>
   1a6a4:	f7ff fea2 	bl	1a3ec <rpc_trace_coredump_in_progress>
   1a6a8:	2800      	cmp	r0, #0
   1a6aa:	d151      	bne.n	1a750 <IPC_IRQHandler+0xc8>
   1a6ac:	4b5c      	ldr	r3, [pc, #368]	; (1a820 <IPC_IRQHandler+0x198>)
   1a6ae:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1a6b2:	681b      	ldr	r3, [r3, #0]
   1a6b4:	9301      	str	r3, [sp, #4]
   1a6b6:	9b01      	ldr	r3, [sp, #4]
   1a6b8:	4b58      	ldr	r3, [pc, #352]	; (1a81c <IPC_IRQHandler+0x194>)
   1a6ba:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a6be:	f012 0201 	ands.w	r2, r2, #1
   1a6c2:	d11c      	bne.n	1a6fe <IPC_IRQHandler+0x76>
   1a6c4:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   1a6c8:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   1a6cc:	d145      	bne.n	1a75a <IPC_IRQHandler+0xd2>
   1a6ce:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a6d2:	0750      	lsls	r0, r2, #29
   1a6d4:	d50c      	bpl.n	1a6f0 <IPC_IRQHandler+0x68>
   1a6d6:	4a53      	ldr	r2, [pc, #332]	; (1a824 <IPC_IRQHandler+0x19c>)
   1a6d8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1a6dc:	6812      	ldr	r2, [r2, #0]
   1a6de:	4b52      	ldr	r3, [pc, #328]	; (1a828 <IPC_IRQHandler+0x1a0>)
   1a6e0:	9204      	str	r2, [sp, #16]
   1a6e2:	9a04      	ldr	r2, [sp, #16]
   1a6e4:	681a      	ldr	r2, [r3, #0]
   1a6e6:	2a02      	cmp	r2, #2
   1a6e8:	d079      	beq.n	1a7de <IPC_IRQHandler+0x156>
   1a6ea:	681a      	ldr	r2, [r3, #0]
   1a6ec:	2a01      	cmp	r2, #1
   1a6ee:	d05b      	beq.n	1a7a8 <IPC_IRQHandler+0x120>
   1a6f0:	4b4a      	ldr	r3, [pc, #296]	; (1a81c <IPC_IRQHandler+0x194>)
   1a6f2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a6f6:	06d2      	lsls	r2, r2, #27
   1a6f8:	d41e      	bmi.n	1a738 <IPC_IRQHandler+0xb0>
   1a6fa:	b006      	add	sp, #24
   1a6fc:	bd70      	pop	{r4, r5, r6, pc}
   1a6fe:	2000      	movs	r0, #0
   1a700:	f248 0202 	movw	r2, #32770	; 0x8002
   1a704:	4949      	ldr	r1, [pc, #292]	; (1a82c <IPC_IRQHandler+0x1a4>)
   1a706:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1a70a:	6809      	ldr	r1, [r1, #0]
   1a70c:	9102      	str	r1, [sp, #8]
   1a70e:	9902      	ldr	r1, [sp, #8]
   1a710:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1a714:	4293      	cmp	r3, r2
   1a716:	d06b      	beq.n	1a7f0 <IPC_IRQHandler+0x168>
   1a718:	d82a      	bhi.n	1a770 <IPC_IRQHandler+0xe8>
   1a71a:	2b00      	cmp	r3, #0
   1a71c:	d062      	beq.n	1a7e4 <IPC_IRQHandler+0x15c>
   1a71e:	2b02      	cmp	r3, #2
   1a720:	d937      	bls.n	1a792 <IPC_IRQHandler+0x10a>
   1a722:	f248 0201 	movw	r2, #32769	; 0x8001
   1a726:	4293      	cmp	r3, r2
   1a728:	d15c      	bne.n	1a7e4 <IPC_IRQHandler+0x15c>
   1a72a:	2003      	movs	r0, #3
   1a72c:	2207      	movs	r2, #7
   1a72e:	493e      	ldr	r1, [pc, #248]	; (1a828 <IPC_IRQHandler+0x1a0>)
   1a730:	4b3f      	ldr	r3, [pc, #252]	; (1a830 <IPC_IRQHandler+0x1a8>)
   1a732:	6008      	str	r0, [r1, #0]
   1a734:	601a      	str	r2, [r3, #0]
   1a736:	e7e0      	b.n	1a6fa <IPC_IRQHandler+0x72>
   1a738:	2100      	movs	r1, #0
   1a73a:	4a3e      	ldr	r2, [pc, #248]	; (1a834 <IPC_IRQHandler+0x1ac>)
   1a73c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   1a740:	6813      	ldr	r3, [r2, #0]
   1a742:	9305      	str	r3, [sp, #20]
   1a744:	9b05      	ldr	r3, [sp, #20]
   1a746:	b006      	add	sp, #24
   1a748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a74c:	f7fc bc00 	b.w	16f50 <bsd_os_application_irq_set>
   1a750:	23e0      	movs	r3, #224	; 0xe0
   1a752:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1a756:	606e      	str	r6, [r5, #4]
   1a758:	e7cf      	b.n	1a6fa <IPC_IRQHandler+0x72>
   1a75a:	4937      	ldr	r1, [pc, #220]	; (1a838 <IPC_IRQHandler+0x1b0>)
   1a75c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1a760:	680b      	ldr	r3, [r1, #0]
   1a762:	9303      	str	r3, [sp, #12]
   1a764:	9b03      	ldr	r3, [sp, #12]
   1a766:	b006      	add	sp, #24
   1a768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a76c:	f7ff be9a 	b.w	1a4a4 <rpc_transport_ipc_shutdown>
   1a770:	4a32      	ldr	r2, [pc, #200]	; (1a83c <IPC_IRQHandler+0x1b4>)
   1a772:	4293      	cmp	r3, r2
   1a774:	d82a      	bhi.n	1a7cc <IPC_IRQHandler+0x144>
   1a776:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1a77a:	d82a      	bhi.n	1a7d2 <IPC_IRQHandler+0x14a>
   1a77c:	f248 0203 	movw	r2, #32771	; 0x8003
   1a780:	4293      	cmp	r3, r2
   1a782:	d12f      	bne.n	1a7e4 <IPC_IRQHandler+0x15c>
   1a784:	2003      	movs	r0, #3
   1a786:	2204      	movs	r2, #4
   1a788:	4927      	ldr	r1, [pc, #156]	; (1a828 <IPC_IRQHandler+0x1a0>)
   1a78a:	4b29      	ldr	r3, [pc, #164]	; (1a830 <IPC_IRQHandler+0x1a8>)
   1a78c:	6008      	str	r0, [r1, #0]
   1a78e:	601a      	str	r2, [r3, #0]
   1a790:	e7b3      	b.n	1a6fa <IPC_IRQHandler+0x72>
   1a792:	2303      	movs	r3, #3
   1a794:	4618      	mov	r0, r3
   1a796:	4924      	ldr	r1, [pc, #144]	; (1a828 <IPC_IRQHandler+0x1a0>)
   1a798:	4a25      	ldr	r2, [pc, #148]	; (1a830 <IPC_IRQHandler+0x1a8>)
   1a79a:	600b      	str	r3, [r1, #0]
   1a79c:	6013      	str	r3, [r2, #0]
   1a79e:	b006      	add	sp, #24
   1a7a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a7a4:	f005 bab8 	b.w	1fd18 <rpc_transport_ipc_fault_handler>
   1a7a8:	4a25      	ldr	r2, [pc, #148]	; (1a840 <IPC_IRQHandler+0x1b8>)
   1a7aa:	4826      	ldr	r0, [pc, #152]	; (1a844 <IPC_IRQHandler+0x1bc>)
   1a7ac:	6811      	ldr	r1, [r2, #0]
   1a7ae:	688a      	ldr	r2, [r1, #8]
   1a7b0:	6002      	str	r2, [r0, #0]
   1a7b2:	6849      	ldr	r1, [r1, #4]
   1a7b4:	6041      	str	r1, [r0, #4]
   1a7b6:	b312      	cbz	r2, 1a7fe <IPC_IRQHandler+0x176>
   1a7b8:	b309      	cbz	r1, 1a7fe <IPC_IRQHandler+0x176>
   1a7ba:	6812      	ldr	r2, [r2, #0]
   1a7bc:	2a10      	cmp	r2, #16
   1a7be:	d824      	bhi.n	1a80a <IPC_IRQHandler+0x182>
   1a7c0:	680a      	ldr	r2, [r1, #0]
   1a7c2:	2a10      	cmp	r2, #16
   1a7c4:	d821      	bhi.n	1a80a <IPC_IRQHandler+0x182>
   1a7c6:	2202      	movs	r2, #2
   1a7c8:	601a      	str	r2, [r3, #0]
   1a7ca:	e791      	b.n	1a6f0 <IPC_IRQHandler+0x68>
   1a7cc:	4a1e      	ldr	r2, [pc, #120]	; (1a848 <IPC_IRQHandler+0x1c0>)
   1a7ce:	4293      	cmp	r3, r2
   1a7d0:	d108      	bne.n	1a7e4 <IPC_IRQHandler+0x15c>
   1a7d2:	2003      	movs	r0, #3
   1a7d4:	4914      	ldr	r1, [pc, #80]	; (1a828 <IPC_IRQHandler+0x1a0>)
   1a7d6:	4a16      	ldr	r2, [pc, #88]	; (1a830 <IPC_IRQHandler+0x1a8>)
   1a7d8:	6008      	str	r0, [r1, #0]
   1a7da:	6013      	str	r3, [r2, #0]
   1a7dc:	e78d      	b.n	1a6fa <IPC_IRQHandler+0x72>
   1a7de:	f7fc fbb7 	bl	16f50 <bsd_os_application_irq_set>
   1a7e2:	e785      	b.n	1a6f0 <IPC_IRQHandler+0x68>
   1a7e4:	2303      	movs	r3, #3
   1a7e6:	4910      	ldr	r1, [pc, #64]	; (1a828 <IPC_IRQHandler+0x1a0>)
   1a7e8:	4a11      	ldr	r2, [pc, #68]	; (1a830 <IPC_IRQHandler+0x1a8>)
   1a7ea:	600b      	str	r3, [r1, #0]
   1a7ec:	6013      	str	r3, [r2, #0]
   1a7ee:	e784      	b.n	1a6fa <IPC_IRQHandler+0x72>
   1a7f0:	2003      	movs	r0, #3
   1a7f2:	2206      	movs	r2, #6
   1a7f4:	490c      	ldr	r1, [pc, #48]	; (1a828 <IPC_IRQHandler+0x1a0>)
   1a7f6:	4b0e      	ldr	r3, [pc, #56]	; (1a830 <IPC_IRQHandler+0x1a8>)
   1a7f8:	6008      	str	r0, [r1, #0]
   1a7fa:	601a      	str	r2, [r3, #0]
   1a7fc:	e77d      	b.n	1a6fa <IPC_IRQHandler+0x72>
   1a7fe:	2003      	movs	r0, #3
   1a800:	2110      	movs	r1, #16
   1a802:	4a0b      	ldr	r2, [pc, #44]	; (1a830 <IPC_IRQHandler+0x1a8>)
   1a804:	6018      	str	r0, [r3, #0]
   1a806:	6011      	str	r1, [r2, #0]
   1a808:	e772      	b.n	1a6f0 <IPC_IRQHandler+0x68>
   1a80a:	2003      	movs	r0, #3
   1a80c:	f24c 0106 	movw	r1, #49158	; 0xc006
   1a810:	4a07      	ldr	r2, [pc, #28]	; (1a830 <IPC_IRQHandler+0x1a8>)
   1a812:	6018      	str	r0, [r3, #0]
   1a814:	6011      	str	r1, [r2, #0]
   1a816:	e76b      	b.n	1a6f0 <IPC_IRQHandler+0x68>
   1a818:	e000e100 	.word	0xe000e100
   1a81c:	4002a000 	.word	0x4002a000
   1a820:	4002a11c 	.word	0x4002a11c
   1a824:	4002a108 	.word	0x4002a108
   1a828:	20021810 	.word	0x20021810
   1a82c:	4002a100 	.word	0x4002a100
   1a830:	20021800 	.word	0x20021800
   1a834:	4002a110 	.word	0x4002a110
   1a838:	4002a118 	.word	0x4002a118
   1a83c:	04400004 	.word	0x04400004
   1a840:	20021814 	.word	0x20021814
   1a844:	20021808 	.word	0x20021808
   1a848:	05500001 	.word	0x05500001

0001a84c <rpc_transport_ipc_rx_init>:
   1a84c:	2800      	cmp	r0, #0
   1a84e:	f000 8109 	beq.w	1aa64 <rpc_transport_ipc_rx_init+0x218>
   1a852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a856:	6805      	ldr	r5, [r0, #0]
   1a858:	b097      	sub	sp, #92	; 0x5c
   1a85a:	2d00      	cmp	r5, #0
   1a85c:	f000 80f8 	beq.w	1aa50 <rpc_transport_ipc_rx_init+0x204>
   1a860:	6883      	ldr	r3, [r0, #8]
   1a862:	2b00      	cmp	r3, #0
   1a864:	f000 80f4 	beq.w	1aa50 <rpc_transport_ipc_rx_init+0x204>
   1a868:	6906      	ldr	r6, [r0, #16]
   1a86a:	2e00      	cmp	r6, #0
   1a86c:	f000 80f0 	beq.w	1aa50 <rpc_transport_ipc_rx_init+0x204>
   1a870:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1a872:	2c00      	cmp	r4, #0
   1a874:	f000 80ec 	beq.w	1aa50 <rpc_transport_ipc_rx_init+0x204>
   1a878:	6844      	ldr	r4, [r0, #4]
   1a87a:	2c1b      	cmp	r4, #27
   1a87c:	f240 80ed 	bls.w	1aa5a <rpc_transport_ipc_rx_init+0x20e>
   1a880:	68c4      	ldr	r4, [r0, #12]
   1a882:	2c0b      	cmp	r4, #11
   1a884:	f240 80e9 	bls.w	1aa5a <rpc_transport_ipc_rx_init+0x20e>
   1a888:	f8d0 e014 	ldr.w	lr, [r0, #20]
   1a88c:	f1be 0f17 	cmp.w	lr, #23
   1a890:	f240 80e3 	bls.w	1aa5a <rpc_transport_ipc_rx_init+0x20e>
   1a894:	4604      	mov	r4, r0
   1a896:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 1aa8c <rpc_transport_ipc_rx_init+0x240>
   1a89a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   1a89c:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 1aa90 <rpc_transport_ipc_rx_init+0x244>
   1a8a0:	4690      	mov	r8, r2
   1a8a2:	9101      	str	r1, [sp, #4]
   1a8a4:	4672      	mov	r2, lr
   1a8a6:	2100      	movs	r1, #0
   1a8a8:	4630      	mov	r0, r6
   1a8aa:	f8ca 7000 	str.w	r7, [sl]
   1a8ae:	f8cb 3000 	str.w	r3, [fp]
   1a8b2:	f00b fb87 	bl	25fc4 <memset>
   1a8b6:	69e3      	ldr	r3, [r4, #28]
   1a8b8:	4630      	mov	r0, r6
   1a8ba:	6033      	str	r3, [r6, #0]
   1a8bc:	69a3      	ldr	r3, [r4, #24]
   1a8be:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 1aa94 <rpc_transport_ipc_rx_init+0x248>
   1a8c2:	6073      	str	r3, [r6, #4]
   1a8c4:	f7ff fb34 	bl	19f30 <ipc_trace_init>
   1a8c8:	2200      	movs	r2, #0
   1a8ca:	2001      	movs	r0, #1
   1a8cc:	4b67      	ldr	r3, [pc, #412]	; (1aa6c <rpc_transport_ipc_rx_init+0x220>)
   1a8ce:	4968      	ldr	r1, [pc, #416]	; (1aa70 <rpc_transport_ipc_rx_init+0x224>)
   1a8d0:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   1a8d4:	6809      	ldr	r1, [r1, #0]
   1a8d6:	f04f 0c80 	mov.w	ip, #128	; 0x80
   1a8da:	9106      	str	r1, [sp, #24]
   1a8dc:	4965      	ldr	r1, [pc, #404]	; (1aa74 <rpc_transport_ipc_rx_init+0x228>)
   1a8de:	f8dd e018 	ldr.w	lr, [sp, #24]
   1a8e2:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   1a8e6:	6809      	ldr	r1, [r1, #0]
   1a8e8:	702a      	strb	r2, [r5, #0]
   1a8ea:	9105      	str	r1, [sp, #20]
   1a8ec:	706a      	strb	r2, [r5, #1]
   1a8ee:	70ea      	strb	r2, [r5, #3]
   1a8f0:	70a8      	strb	r0, [r5, #2]
   1a8f2:	9905      	ldr	r1, [sp, #20]
   1a8f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1a8f6:	f8db e000 	ldr.w	lr, [fp]
   1a8fa:	6069      	str	r1, [r5, #4]
   1a8fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1a8fe:	61ae      	str	r6, [r5, #24]
   1a900:	60a9      	str	r1, [r5, #8]
   1a902:	9901      	ldr	r1, [sp, #4]
   1a904:	f8c5 e014 	str.w	lr, [r5, #20]
   1a908:	6129      	str	r1, [r5, #16]
   1a90a:	495b      	ldr	r1, [pc, #364]	; (1aa78 <rpc_transport_ipc_rx_init+0x22c>)
   1a90c:	f8c5 800c 	str.w	r8, [r5, #12]
   1a910:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   1a914:	680c      	ldr	r4, [r1, #0]
   1a916:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1a91a:	9407      	str	r4, [sp, #28]
   1a91c:	9c07      	ldr	r4, [sp, #28]
   1a91e:	2404      	movs	r4, #4
   1a920:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   1a924:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   1a928:	4f54      	ldr	r7, [pc, #336]	; (1aa7c <rpc_transport_ipc_rx_init+0x230>)
   1a92a:	9408      	str	r4, [sp, #32]
   1a92c:	9c08      	ldr	r4, [sp, #32]
   1a92e:	2410      	movs	r4, #16
   1a930:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1a934:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1a938:	9409      	str	r4, [sp, #36]	; 0x24
   1a93a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1a93c:	2440      	movs	r4, #64	; 0x40
   1a93e:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1a942:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1a946:	940a      	str	r4, [sp, #40]	; 0x28
   1a948:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a94a:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   1a94e:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   1a952:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   1a956:	940b      	str	r4, [sp, #44]	; 0x2c
   1a958:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1a95a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1a95e:	680c      	ldr	r4, [r1, #0]
   1a960:	940c      	str	r4, [sp, #48]	; 0x30
   1a962:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1a964:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1a968:	688c      	ldr	r4, [r1, #8]
   1a96a:	940d      	str	r4, [sp, #52]	; 0x34
   1a96c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1a96e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1a972:	690c      	ldr	r4, [r1, #16]
   1a974:	940e      	str	r4, [sp, #56]	; 0x38
   1a976:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1a978:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1a97c:	698c      	ldr	r4, [r1, #24]
   1a97e:	940f      	str	r4, [sp, #60]	; 0x3c
   1a980:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1a982:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1a986:	69cc      	ldr	r4, [r1, #28]
   1a988:	f501 7101 	add.w	r1, r1, #516	; 0x204
   1a98c:	9410      	str	r4, [sp, #64]	; 0x40
   1a98e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1a990:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1a994:	4304      	orrs	r4, r0
   1a996:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1a99a:	680d      	ldr	r5, [r1, #0]
   1a99c:	4c38      	ldr	r4, [pc, #224]	; (1aa80 <rpc_transport_ipc_rx_init+0x234>)
   1a99e:	9511      	str	r5, [sp, #68]	; 0x44
   1a9a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1a9a2:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1a9a6:	4d37      	ldr	r5, [pc, #220]	; (1aa84 <rpc_transport_ipc_rx_init+0x238>)
   1a9a8:	f046 0604 	orr.w	r6, r6, #4
   1a9ac:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1a9b0:	680e      	ldr	r6, [r1, #0]
   1a9b2:	9612      	str	r6, [sp, #72]	; 0x48
   1a9b4:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1a9b6:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1a9ba:	f046 0610 	orr.w	r6, r6, #16
   1a9be:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1a9c2:	680e      	ldr	r6, [r1, #0]
   1a9c4:	9613      	str	r6, [sp, #76]	; 0x4c
   1a9c6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1a9c8:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1a9cc:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   1a9d0:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1a9d4:	680e      	ldr	r6, [r1, #0]
   1a9d6:	9614      	str	r6, [sp, #80]	; 0x50
   1a9d8:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1a9da:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1a9de:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   1a9e2:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1a9e6:	f8da 3000 	ldr.w	r3, [sl]
   1a9ea:	6809      	ldr	r1, [r1, #0]
   1a9ec:	015b      	lsls	r3, r3, #5
   1a9ee:	9115      	str	r1, [sp, #84]	; 0x54
   1a9f0:	b2db      	uxtb	r3, r3
   1a9f2:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a9f4:	6022      	str	r2, [r4, #0]
   1a9f6:	f8c9 0000 	str.w	r0, [r9]
   1a9fa:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1a9fe:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   1aa02:	f8c5 c004 	str.w	ip, [r5, #4]
   1aa06:	9204      	str	r2, [sp, #16]
   1aa08:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   1aa0c:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   1aa10:	9304      	str	r3, [sp, #16]
   1aa12:	9b04      	ldr	r3, [sp, #16]
   1aa14:	f8d9 3000 	ldr.w	r3, [r9]
   1aa18:	4283      	cmp	r3, r0
   1aa1a:	d10f      	bne.n	1aa3c <rpc_transport_ipc_rx_init+0x1f0>
   1aa1c:	2614      	movs	r6, #20
   1aa1e:	4d1a      	ldr	r5, [pc, #104]	; (1aa88 <rpc_transport_ipc_rx_init+0x23c>)
   1aa20:	e000      	b.n	1aa24 <rpc_transport_ipc_rx_init+0x1d8>
   1aa22:	b15d      	cbz	r5, 1aa3c <rpc_transport_ipc_rx_init+0x1f0>
   1aa24:	a903      	add	r1, sp, #12
   1aa26:	2000      	movs	r0, #0
   1aa28:	9603      	str	r6, [sp, #12]
   1aa2a:	f7fc f84d 	bl	16ac8 <bsd_os_timedwait>
   1aa2e:	9b03      	ldr	r3, [sp, #12]
   1aa30:	f8d9 2000 	ldr.w	r2, [r9]
   1aa34:	3b14      	subs	r3, #20
   1aa36:	2a01      	cmp	r2, #1
   1aa38:	441d      	add	r5, r3
   1aa3a:	d0f2      	beq.n	1aa22 <rpc_transport_ipc_rx_init+0x1d6>
   1aa3c:	f8d9 3000 	ldr.w	r3, [r9]
   1aa40:	2b01      	cmp	r3, #1
   1aa42:	bf0a      	itet	eq
   1aa44:	200d      	moveq	r0, #13
   1aa46:	6820      	ldrne	r0, [r4, #0]
   1aa48:	6020      	streq	r0, [r4, #0]
   1aa4a:	b017      	add	sp, #92	; 0x5c
   1aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa50:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1aa54:	b017      	add	sp, #92	; 0x5c
   1aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa5a:	f24c 0009 	movw	r0, #49161	; 0xc009
   1aa5e:	b017      	add	sp, #92	; 0x5c
   1aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa64:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1aa68:	4770      	bx	lr
   1aa6a:	bf00      	nop
   1aa6c:	4002a000 	.word	0x4002a000
   1aa70:	4002a610 	.word	0x4002a610
   1aa74:	4002a614 	.word	0x4002a614
   1aa78:	4002a590 	.word	0x4002a590
   1aa7c:	40005000 	.word	0x40005000
   1aa80:	20021800 	.word	0x20021800
   1aa84:	e000e100 	.word	0xe000e100
   1aa88:	000249f0 	.word	0x000249f0
   1aa8c:	20021804 	.word	0x20021804
   1aa90:	20021814 	.word	0x20021814
   1aa94:	20021810 	.word	0x20021810

0001aa98 <rpc_transport_ipc_msg_free>:
   1aa98:	b470      	push	{r4, r5, r6}
   1aa9a:	4e17      	ldr	r6, [pc, #92]	; (1aaf8 <rpc_transport_ipc_msg_free+0x60>)
   1aa9c:	6831      	ldr	r1, [r6, #0]
   1aa9e:	680d      	ldr	r5, [r1, #0]
   1aaa0:	b1ad      	cbz	r5, 1aace <rpc_transport_ipc_msg_free+0x36>
   1aaa2:	688b      	ldr	r3, [r1, #8]
   1aaa4:	4283      	cmp	r3, r0
   1aaa6:	d024      	beq.n	1aaf2 <rpc_transport_ipc_msg_free+0x5a>
   1aaa8:	2300      	movs	r3, #0
   1aaaa:	3301      	adds	r3, #1
   1aaac:	00da      	lsls	r2, r3, #3
   1aaae:	429d      	cmp	r5, r3
   1aab0:	eb01 0402 	add.w	r4, r1, r2
   1aab4:	d00b      	beq.n	1aace <rpc_transport_ipc_msg_free+0x36>
   1aab6:	68a4      	ldr	r4, [r4, #8]
   1aab8:	42a0      	cmp	r0, r4
   1aaba:	d1f6      	bne.n	1aaaa <rpc_transport_ipc_msg_free+0x12>
   1aabc:	3204      	adds	r2, #4
   1aabe:	588b      	ldr	r3, [r1, r2]
   1aac0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1aac4:	f043 0303 	orr.w	r3, r3, #3
   1aac8:	508b      	str	r3, [r1, r2]
   1aaca:	bc70      	pop	{r4, r5, r6}
   1aacc:	4770      	bx	lr
   1aace:	6871      	ldr	r1, [r6, #4]
   1aad0:	680d      	ldr	r5, [r1, #0]
   1aad2:	2d00      	cmp	r5, #0
   1aad4:	d0f9      	beq.n	1aaca <rpc_transport_ipc_msg_free+0x32>
   1aad6:	688b      	ldr	r3, [r1, #8]
   1aad8:	4283      	cmp	r3, r0
   1aada:	d00a      	beq.n	1aaf2 <rpc_transport_ipc_msg_free+0x5a>
   1aadc:	2300      	movs	r3, #0
   1aade:	3301      	adds	r3, #1
   1aae0:	00da      	lsls	r2, r3, #3
   1aae2:	429d      	cmp	r5, r3
   1aae4:	eb01 0402 	add.w	r4, r1, r2
   1aae8:	d0ef      	beq.n	1aaca <rpc_transport_ipc_msg_free+0x32>
   1aaea:	68a4      	ldr	r4, [r4, #8]
   1aaec:	42a0      	cmp	r0, r4
   1aaee:	d1f6      	bne.n	1aade <rpc_transport_ipc_msg_free+0x46>
   1aaf0:	e7e4      	b.n	1aabc <rpc_transport_ipc_msg_free+0x24>
   1aaf2:	2204      	movs	r2, #4
   1aaf4:	e7e3      	b.n	1aabe <rpc_transport_ipc_msg_free+0x26>
   1aaf6:	bf00      	nop
   1aaf8:	20021808 	.word	0x20021808

0001aafc <rpc_transport_ipc_tx_init>:
   1aafc:	2800      	cmp	r0, #0
   1aafe:	f000 80b8 	beq.w	1ac72 <rpc_transport_ipc_tx_init+0x176>
   1ab02:	2900      	cmp	r1, #0
   1ab04:	f000 80b5 	beq.w	1ac72 <rpc_transport_ipc_tx_init+0x176>
   1ab08:	2a00      	cmp	r2, #0
   1ab0a:	f000 80b2 	beq.w	1ac72 <rpc_transport_ipc_tx_init+0x176>
   1ab0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab12:	6a04      	ldr	r4, [r0, #32]
   1ab14:	b085      	sub	sp, #20
   1ab16:	2c00      	cmp	r4, #0
   1ab18:	f000 80a6 	beq.w	1ac68 <rpc_transport_ipc_tx_init+0x16c>
   1ab1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1ab1e:	2800      	cmp	r0, #0
   1ab20:	f000 80a2 	beq.w	1ac68 <rpc_transport_ipc_tx_init+0x16c>
   1ab24:	f642 4587 	movw	r5, #11399	; 0x2c87
   1ab28:	f04f 0a00 	mov.w	sl, #0
   1ab2c:	4e55      	ldr	r6, [pc, #340]	; (1ac84 <rpc_transport_ipc_tx_init+0x188>)
   1ab2e:	42a8      	cmp	r0, r5
   1ab30:	f886 a000 	strb.w	sl, [r6]
   1ab34:	f240 80a0 	bls.w	1ac78 <rpc_transport_ipc_tx_init+0x17c>
   1ab38:	2708      	movs	r7, #8
   1ab3a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1acbc <rpc_transport_ipc_tx_init+0x1c0>
   1ab3e:	4620      	mov	r0, r4
   1ab40:	4616      	mov	r6, r2
   1ab42:	460d      	mov	r5, r1
   1ab44:	2244      	movs	r2, #68	; 0x44
   1ab46:	4651      	mov	r1, sl
   1ab48:	f8c9 4000 	str.w	r4, [r9]
   1ab4c:	f00b fa3a 	bl	25fc4 <memset>
   1ab50:	f8d9 2000 	ldr.w	r2, [r9]
   1ab54:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1ab58:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1acc0 <rpc_transport_ipc_tx_init+0x1c4>
   1ab5c:	f882 a001 	strb.w	sl, [r2, #1]
   1ab60:	f882 a002 	strb.w	sl, [r2, #2]
   1ab64:	f882 a003 	strb.w	sl, [r2, #3]
   1ab68:	7017      	strb	r7, [r2, #0]
   1ab6a:	4618      	mov	r0, r3
   1ab6c:	2244      	movs	r2, #68	; 0x44
   1ab6e:	4651      	mov	r1, sl
   1ab70:	f8c8 3000 	str.w	r3, [r8]
   1ab74:	f00b fa26 	bl	25fc4 <memset>
   1ab78:	f8d8 2000 	ldr.w	r2, [r8]
   1ab7c:	f104 0388 	add.w	r3, r4, #136	; 0x88
   1ab80:	f8df b140 	ldr.w	fp, [pc, #320]	; 1acc4 <rpc_transport_ipc_tx_init+0x1c8>
   1ab84:	7017      	strb	r7, [r2, #0]
   1ab86:	f882 a001 	strb.w	sl, [r2, #1]
   1ab8a:	f882 a002 	strb.w	sl, [r2, #2]
   1ab8e:	f882 a003 	strb.w	sl, [r2, #3]
   1ab92:	4618      	mov	r0, r3
   1ab94:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ab98:	4651      	mov	r1, sl
   1ab9a:	f8cb 3000 	str.w	r3, [fp]
   1ab9e:	f00b fa11 	bl	25fc4 <memset>
   1aba2:	4b39      	ldr	r3, [pc, #228]	; (1ac88 <rpc_transport_ipc_tx_init+0x18c>)
   1aba4:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   1aba8:	f8c3 c000 	str.w	ip, [r3]
   1abac:	4651      	mov	r1, sl
   1abae:	4660      	mov	r0, ip
   1abb0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1abb4:	f00b fa06 	bl	25fc4 <memset>
   1abb8:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   1abbc:	2106      	movs	r1, #6
   1abbe:	f04f 0e01 	mov.w	lr, #1
   1abc2:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   1abc6:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   1abca:	4b30      	ldr	r3, [pc, #192]	; (1ac8c <rpc_transport_ipc_tx_init+0x190>)
   1abcc:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   1abd0:	605c      	str	r4, [r3, #4]
   1abd2:	4c2f      	ldr	r4, [pc, #188]	; (1ac90 <rpc_transport_ipc_tx_init+0x194>)
   1abd4:	f8c3 c008 	str.w	ip, [r3, #8]
   1abd8:	8199      	strh	r1, [r3, #12]
   1abda:	f8a3 e000 	strh.w	lr, [r3]
   1abde:	4619      	mov	r1, r3
   1abe0:	611c      	str	r4, [r3, #16]
   1abe2:	4b2c      	ldr	r3, [pc, #176]	; (1ac94 <rpc_transport_ipc_tx_init+0x198>)
   1abe4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 1acc8 <rpc_transport_ipc_tx_init+0x1cc>
   1abe8:	6120      	str	r0, [r4, #16]
   1abea:	482b      	ldr	r0, [pc, #172]	; (1ac98 <rpc_transport_ipc_tx_init+0x19c>)
   1abec:	6063      	str	r3, [r4, #4]
   1abee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1abf2:	60a0      	str	r0, [r4, #8]
   1abf4:	f8c4 c000 	str.w	ip, [r4]
   1abf8:	4828      	ldr	r0, [pc, #160]	; (1ac9c <rpc_transport_ipc_tx_init+0x1a0>)
   1abfa:	60e3      	str	r3, [r4, #12]
   1abfc:	6162      	str	r2, [r4, #20]
   1abfe:	f006 f9a5 	bl	20f4c <nrf_mem_register>
   1ac02:	2800      	cmp	r0, #0
   1ac04:	d132      	bne.n	1ac6c <rpc_transport_ipc_tx_init+0x170>
   1ac06:	f04f 0c02 	mov.w	ip, #2
   1ac0a:	2420      	movs	r4, #32
   1ac0c:	f8d9 1000 	ldr.w	r1, [r9]
   1ac10:	f8db 2000 	ldr.w	r2, [fp]
   1ac14:	6029      	str	r1, [r5, #0]
   1ac16:	4b1c      	ldr	r3, [pc, #112]	; (1ac88 <rpc_transport_ipc_tx_init+0x18c>)
   1ac18:	f8d8 1000 	ldr.w	r1, [r8]
   1ac1c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 1accc <rpc_transport_ipc_tx_init+0x1d0>
   1ac20:	4d1f      	ldr	r5, [pc, #124]	; (1aca0 <rpc_transport_ipc_tx_init+0x1a4>)
   1ac22:	6031      	str	r1, [r6, #0]
   1ac24:	f8ce 2000 	str.w	r2, [lr]
   1ac28:	681b      	ldr	r3, [r3, #0]
   1ac2a:	491e      	ldr	r1, [pc, #120]	; (1aca4 <rpc_transport_ipc_tx_init+0x1a8>)
   1ac2c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   1ac30:	602a      	str	r2, [r5, #0]
   1ac32:	4e1d      	ldr	r6, [pc, #116]	; (1aca8 <rpc_transport_ipc_tx_init+0x1ac>)
   1ac34:	4a1d      	ldr	r2, [pc, #116]	; (1acac <rpc_transport_ipc_tx_init+0x1b0>)
   1ac36:	4d1e      	ldr	r5, [pc, #120]	; (1acb0 <rpc_transport_ipc_tx_init+0x1b4>)
   1ac38:	600b      	str	r3, [r1, #0]
   1ac3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1ac3e:	491d      	ldr	r1, [pc, #116]	; (1acb4 <rpc_transport_ipc_tx_init+0x1b8>)
   1ac40:	6033      	str	r3, [r6, #0]
   1ac42:	8028      	strh	r0, [r5, #0]
   1ac44:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1ac48:	6809      	ldr	r1, [r1, #0]
   1ac4a:	4b1b      	ldr	r3, [pc, #108]	; (1acb8 <rpc_transport_ipc_tx_init+0x1bc>)
   1ac4c:	9103      	str	r1, [sp, #12]
   1ac4e:	9903      	ldr	r1, [sp, #12]
   1ac50:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   1ac54:	6819      	ldr	r1, [r3, #0]
   1ac56:	443b      	add	r3, r7
   1ac58:	9102      	str	r1, [sp, #8]
   1ac5a:	9902      	ldr	r1, [sp, #8]
   1ac5c:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   1ac60:	681b      	ldr	r3, [r3, #0]
   1ac62:	9301      	str	r3, [sp, #4]
   1ac64:	9b01      	ldr	r3, [sp, #4]
   1ac66:	e001      	b.n	1ac6c <rpc_transport_ipc_tx_init+0x170>
   1ac68:	f24c 0007 	movw	r0, #49159	; 0xc007
   1ac6c:	b005      	add	sp, #20
   1ac6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac72:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ac76:	4770      	bx	lr
   1ac78:	f24c 0004 	movw	r0, #49156	; 0xc004
   1ac7c:	b005      	add	sp, #20
   1ac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac82:	bf00      	nop
   1ac84:	2002628c 	.word	0x2002628c
   1ac88:	20021840 	.word	0x20021840
   1ac8c:	2002182c 	.word	0x2002182c
   1ac90:	20021850 	.word	0x20021850
   1ac94:	00040080 	.word	0x00040080
   1ac98:	00040100 	.word	0x00040100
   1ac9c:	20021818 	.word	0x20021818
   1aca0:	20021824 	.word	0x20021824
   1aca4:	20021820 	.word	0x20021820
   1aca8:	2002181c 	.word	0x2002181c
   1acac:	4002a000 	.word	0x4002a000
   1acb0:	200242ba 	.word	0x200242ba
   1acb4:	4002a514 	.word	0x4002a514
   1acb8:	4002a51c 	.word	0x4002a51c
   1acbc:	2002184c 	.word	0x2002184c
   1acc0:	20021844 	.word	0x20021844
   1acc4:	20021848 	.word	0x20021848
   1acc8:	00080040 	.word	0x00080040
   1accc:	20021828 	.word	0x20021828

0001acd0 <rpc_transport_ipc_send>:
   1acd0:	2800      	cmp	r0, #0
   1acd2:	d061      	beq.n	1ad98 <rpc_transport_ipc_send+0xc8>
   1acd4:	b4f0      	push	{r4, r5, r6, r7}
   1acd6:	4b34      	ldr	r3, [pc, #208]	; (1ada8 <rpc_transport_ipc_send+0xd8>)
   1acd8:	b082      	sub	sp, #8
   1acda:	681a      	ldr	r2, [r3, #0]
   1acdc:	4b33      	ldr	r3, [pc, #204]	; (1adac <rpc_transport_ipc_send+0xdc>)
   1acde:	4282      	cmp	r2, r0
   1ace0:	d81e      	bhi.n	1ad20 <rpc_transport_ipc_send+0x50>
   1ace2:	681b      	ldr	r3, [r3, #0]
   1ace4:	4932      	ldr	r1, [pc, #200]	; (1adb0 <rpc_transport_ipc_send+0xe0>)
   1ace6:	4283      	cmp	r3, r0
   1ace8:	6809      	ldr	r1, [r1, #0]
   1acea:	d803      	bhi.n	1acf4 <rpc_transport_ipc_send+0x24>
   1acec:	4c31      	ldr	r4, [pc, #196]	; (1adb4 <rpc_transport_ipc_send+0xe4>)
   1acee:	6824      	ldr	r4, [r4, #0]
   1acf0:	4284      	cmp	r4, r0
   1acf2:	d849      	bhi.n	1ad88 <rpc_transport_ipc_send+0xb8>
   1acf4:	4281      	cmp	r1, r0
   1acf6:	d90e      	bls.n	1ad16 <rpc_transport_ipc_send+0x46>
   1acf8:	4b2f      	ldr	r3, [pc, #188]	; (1adb8 <rpc_transport_ipc_send+0xe8>)
   1acfa:	781b      	ldrb	r3, [r3, #0]
   1acfc:	2b00      	cmp	r3, #0
   1acfe:	d14e      	bne.n	1ad9e <rpc_transport_ipc_send+0xce>
   1ad00:	1a83      	subs	r3, r0, r2
   1ad02:	492e      	ldr	r1, [pc, #184]	; (1adbc <rpc_transport_ipc_send+0xec>)
   1ad04:	099f      	lsrs	r7, r3, #6
   1ad06:	069b      	lsls	r3, r3, #26
   1ad08:	680a      	ldr	r2, [r1, #0]
   1ad0a:	4d2d      	ldr	r5, [pc, #180]	; (1adc0 <rpc_transport_ipc_send+0xf0>)
   1ad0c:	f04f 0403 	mov.w	r4, #3
   1ad10:	f04f 0602 	mov.w	r6, #2
   1ad14:	d014      	beq.n	1ad40 <rpc_transport_ipc_send+0x70>
   1ad16:	f24c 0010 	movw	r0, #49168	; 0xc010
   1ad1a:	b002      	add	sp, #8
   1ad1c:	bcf0      	pop	{r4, r5, r6, r7}
   1ad1e:	4770      	bx	lr
   1ad20:	681b      	ldr	r3, [r3, #0]
   1ad22:	4298      	cmp	r0, r3
   1ad24:	d3f7      	bcc.n	1ad16 <rpc_transport_ipc_send+0x46>
   1ad26:	4a23      	ldr	r2, [pc, #140]	; (1adb4 <rpc_transport_ipc_send+0xe4>)
   1ad28:	6812      	ldr	r2, [r2, #0]
   1ad2a:	4290      	cmp	r0, r2
   1ad2c:	d2f3      	bcs.n	1ad16 <rpc_transport_ipc_send+0x46>
   1ad2e:	2401      	movs	r4, #1
   1ad30:	1ac3      	subs	r3, r0, r3
   1ad32:	4a24      	ldr	r2, [pc, #144]	; (1adc4 <rpc_transport_ipc_send+0xf4>)
   1ad34:	099f      	lsrs	r7, r3, #6
   1ad36:	069b      	lsls	r3, r3, #26
   1ad38:	4626      	mov	r6, r4
   1ad3a:	6812      	ldr	r2, [r2, #0]
   1ad3c:	4d22      	ldr	r5, [pc, #136]	; (1adc8 <rpc_transport_ipc_send+0xf8>)
   1ad3e:	d1ea      	bne.n	1ad16 <rpc_transport_ipc_send+0x46>
   1ad40:	6841      	ldr	r1, [r0, #4]
   1ad42:	b2c9      	uxtb	r1, r1
   1ad44:	428e      	cmp	r6, r1
   1ad46:	d122      	bne.n	1ad8e <rpc_transport_ipc_send+0xbe>
   1ad48:	2020      	movs	r0, #32
   1ad4a:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   1ad4e:	491f      	ldr	r1, [pc, #124]	; (1adcc <rpc_transport_ipc_send+0xfc>)
   1ad50:	685a      	ldr	r2, [r3, #4]
   1ad52:	880e      	ldrh	r6, [r1, #0]
   1ad54:	b292      	uxth	r2, r2
   1ad56:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   1ad5a:	605a      	str	r2, [r3, #4]
   1ad5c:	685a      	ldr	r2, [r3, #4]
   1ad5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1ad62:	f042 0201 	orr.w	r2, r2, #1
   1ad66:	605a      	str	r2, [r3, #4]
   1ad68:	bf00      	nop
   1ad6a:	3801      	subs	r0, #1
   1ad6c:	d1fc      	bne.n	1ad68 <rpc_transport_ipc_send+0x98>
   1ad6e:	2201      	movs	r2, #1
   1ad70:	4b17      	ldr	r3, [pc, #92]	; (1add0 <rpc_transport_ipc_send+0x100>)
   1ad72:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1ad76:	682a      	ldr	r2, [r5, #0]
   1ad78:	880b      	ldrh	r3, [r1, #0]
   1ad7a:	9201      	str	r2, [sp, #4]
   1ad7c:	9a01      	ldr	r2, [sp, #4]
   1ad7e:	3301      	adds	r3, #1
   1ad80:	800b      	strh	r3, [r1, #0]
   1ad82:	b002      	add	sp, #8
   1ad84:	bcf0      	pop	{r4, r5, r6, r7}
   1ad86:	4770      	bx	lr
   1ad88:	4281      	cmp	r1, r0
   1ad8a:	d9d0      	bls.n	1ad2e <rpc_transport_ipc_send+0x5e>
   1ad8c:	e7b4      	b.n	1acf8 <rpc_transport_ipc_send+0x28>
   1ad8e:	f24c 0007 	movw	r0, #49159	; 0xc007
   1ad92:	b002      	add	sp, #8
   1ad94:	bcf0      	pop	{r4, r5, r6, r7}
   1ad96:	4770      	bx	lr
   1ad98:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ad9c:	4770      	bx	lr
   1ad9e:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1ada2:	b002      	add	sp, #8
   1ada4:	bcf0      	pop	{r4, r5, r6, r7}
   1ada6:	4770      	bx	lr
   1ada8:	20021828 	.word	0x20021828
   1adac:	20021820 	.word	0x20021820
   1adb0:	20021824 	.word	0x20021824
   1adb4:	2002181c 	.word	0x2002181c
   1adb8:	2002628c 	.word	0x2002628c
   1adbc:	2002184c 	.word	0x2002184c
   1adc0:	4002a00c 	.word	0x4002a00c
   1adc4:	20021844 	.word	0x20021844
   1adc8:	4002a004 	.word	0x4002a004
   1adcc:	200242ba 	.word	0x200242ba
   1add0:	4002a000 	.word	0x4002a000

0001add4 <rpc_transport_ipc_tx_rpc_data_alloc>:
   1add4:	4b18      	ldr	r3, [pc, #96]	; (1ae38 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1add6:	781b      	ldrb	r3, [r3, #0]
   1add8:	bb63      	cbnz	r3, 1ae34 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1adda:	b4f0      	push	{r4, r5, r6, r7}
   1addc:	4a17      	ldr	r2, [pc, #92]	; (1ae3c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   1adde:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1ade2:	6814      	ldr	r4, [r2, #0]
   1ade4:	4b16      	ldr	r3, [pc, #88]	; (1ae40 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1ade6:	6825      	ldr	r5, [r4, #0]
   1ade8:	681e      	ldr	r6, [r3, #0]
   1adea:	b1a5      	cbz	r5, 1ae16 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   1adec:	4607      	mov	r7, r0
   1adee:	00c1      	lsls	r1, r0, #3
   1adf0:	1863      	adds	r3, r4, r1
   1adf2:	685a      	ldr	r2, [r3, #4]
   1adf4:	b2d2      	uxtb	r2, r2
   1adf6:	2a03      	cmp	r2, #3
   1adf8:	d104      	bne.n	1ae04 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1adfa:	609f      	str	r7, [r3, #8]
   1adfc:	685a      	ldr	r2, [r3, #4]
   1adfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1ae02:	605a      	str	r2, [r3, #4]
   1ae04:	685a      	ldr	r2, [r3, #4]
   1ae06:	f012 0fff 	tst.w	r2, #255	; 0xff
   1ae0a:	d101      	bne.n	1ae10 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   1ae0c:	689b      	ldr	r3, [r3, #8]
   1ae0e:	b12b      	cbz	r3, 1ae1c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   1ae10:	3001      	adds	r0, #1
   1ae12:	42a8      	cmp	r0, r5
   1ae14:	d1eb      	bne.n	1adee <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1ae16:	2000      	movs	r0, #0
   1ae18:	bcf0      	pop	{r4, r5, r6, r7}
   1ae1a:	4770      	bx	lr
   1ae1c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1ae20:	4421      	add	r1, r4
   1ae22:	6088      	str	r0, [r1, #8]
   1ae24:	6843      	ldr	r3, [r0, #4]
   1ae26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ae2a:	f043 0302 	orr.w	r3, r3, #2
   1ae2e:	6043      	str	r3, [r0, #4]
   1ae30:	bcf0      	pop	{r4, r5, r6, r7}
   1ae32:	4770      	bx	lr
   1ae34:	2000      	movs	r0, #0
   1ae36:	4770      	bx	lr
   1ae38:	2002628c 	.word	0x2002628c
   1ae3c:	2002184c 	.word	0x2002184c
   1ae40:	20021848 	.word	0x20021848

0001ae44 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1ae44:	b4f0      	push	{r4, r5, r6, r7}
   1ae46:	4a15      	ldr	r2, [pc, #84]	; (1ae9c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   1ae48:	4b15      	ldr	r3, [pc, #84]	; (1aea0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   1ae4a:	6814      	ldr	r4, [r2, #0]
   1ae4c:	681e      	ldr	r6, [r3, #0]
   1ae4e:	6825      	ldr	r5, [r4, #0]
   1ae50:	b1ad      	cbz	r5, 1ae7e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   1ae52:	2000      	movs	r0, #0
   1ae54:	4607      	mov	r7, r0
   1ae56:	00c1      	lsls	r1, r0, #3
   1ae58:	1863      	adds	r3, r4, r1
   1ae5a:	685a      	ldr	r2, [r3, #4]
   1ae5c:	b2d2      	uxtb	r2, r2
   1ae5e:	2a03      	cmp	r2, #3
   1ae60:	d104      	bne.n	1ae6c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   1ae62:	609f      	str	r7, [r3, #8]
   1ae64:	685a      	ldr	r2, [r3, #4]
   1ae66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1ae6a:	605a      	str	r2, [r3, #4]
   1ae6c:	685a      	ldr	r2, [r3, #4]
   1ae6e:	f012 0fff 	tst.w	r2, #255	; 0xff
   1ae72:	d101      	bne.n	1ae78 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   1ae74:	689b      	ldr	r3, [r3, #8]
   1ae76:	b12b      	cbz	r3, 1ae84 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   1ae78:	3001      	adds	r0, #1
   1ae7a:	4285      	cmp	r5, r0
   1ae7c:	d1eb      	bne.n	1ae56 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   1ae7e:	2000      	movs	r0, #0
   1ae80:	bcf0      	pop	{r4, r5, r6, r7}
   1ae82:	4770      	bx	lr
   1ae84:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1ae88:	4421      	add	r1, r4
   1ae8a:	6088      	str	r0, [r1, #8]
   1ae8c:	6843      	ldr	r3, [r0, #4]
   1ae8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ae92:	f043 0301 	orr.w	r3, r3, #1
   1ae96:	6043      	str	r3, [r0, #4]
   1ae98:	bcf0      	pop	{r4, r5, r6, r7}
   1ae9a:	4770      	bx	lr
   1ae9c:	20021844 	.word	0x20021844
   1aea0:	20021840 	.word	0x20021840

0001aea4 <rpc_transport_ipc_tx_data_alloc>:
   1aea4:	4b03      	ldr	r3, [pc, #12]	; (1aeb4 <rpc_transport_ipc_tx_data_alloc+0x10>)
   1aea6:	781b      	ldrb	r3, [r3, #0]
   1aea8:	b90b      	cbnz	r3, 1aeae <rpc_transport_ipc_tx_data_alloc+0xa>
   1aeaa:	f006 ba2f 	b.w	2130c <nrf_shared_malloc>
   1aeae:	2000      	movs	r0, #0
   1aeb0:	4770      	bx	lr
   1aeb2:	bf00      	nop
   1aeb4:	2002628c 	.word	0x2002628c

0001aeb8 <rpc_transport_ipc_tx_suspend>:
   1aeb8:	2201      	movs	r2, #1
   1aeba:	4b01      	ldr	r3, [pc, #4]	; (1aec0 <rpc_transport_ipc_tx_suspend+0x8>)
   1aebc:	701a      	strb	r2, [r3, #0]
   1aebe:	4770      	bx	lr
   1aec0:	2002628c 	.word	0x2002628c

0001aec4 <secure_client_socket>:
   1aec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aec8:	f04f 3cff 	mov.w	ip, #4294967295
   1aecc:	460c      	mov	r4, r1
   1aece:	680b      	ldr	r3, [r1, #0]
   1aed0:	4f45      	ldr	r7, [pc, #276]	; (1afe8 <secure_client_socket+0x124>)
   1aed2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1aed6:	600b      	str	r3, [r1, #0]
   1aed8:	680b      	ldr	r3, [r1, #0]
   1aeda:	00c6      	lsls	r6, r0, #3
   1aedc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1aee0:	600b      	str	r3, [r1, #0]
   1aee2:	eb07 0a06 	add.w	sl, r7, r6
   1aee6:	b084      	sub	sp, #16
   1aee8:	f8da 3004 	ldr.w	r3, [sl, #4]
   1aeec:	6989      	ldr	r1, [r1, #24]
   1aeee:	f247 0281 	movw	r2, #28801	; 0x7081
   1aef2:	4605      	mov	r5, r0
   1aef4:	f8d4 8000 	ldr.w	r8, [r4]
   1aef8:	e9cd cc02 	strd	ip, ip, [sp, #8]
   1aefc:	f000 fd76 	bl	1b9ec <ip_interface_request_create>
   1af00:	2800      	cmp	r0, #0
   1af02:	d06c      	beq.n	1afde <secure_client_socket+0x11a>
   1af04:	f8da 2004 	ldr.w	r2, [sl, #4]
   1af08:	4681      	mov	r9, r0
   1af0a:	2a00      	cmp	r2, #0
   1af0c:	d15c      	bne.n	1afc8 <secure_client_socket+0x104>
   1af0e:	4b37      	ldr	r3, [pc, #220]	; (1afec <secure_client_socket+0x128>)
   1af10:	1971      	adds	r1, r6, r5
   1af12:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1af16:	2224      	movs	r2, #36	; 0x24
   1af18:	f109 0014 	add.w	r0, r9, #20
   1af1c:	f7f1 fe16 	bl	cb4c <memcpy>
   1af20:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1af24:	4649      	mov	r1, r9
   1af26:	3324      	adds	r3, #36	; 0x24
   1af28:	f8c9 3008 	str.w	r3, [r9, #8]
   1af2c:	6822      	ldr	r2, [r4, #0]
   1af2e:	4643      	mov	r3, r8
   1af30:	0c12      	lsrs	r2, r2, #16
   1af32:	0412      	lsls	r2, r2, #16
   1af34:	f042 020a 	orr.w	r2, r2, #10
   1af38:	6022      	str	r2, [r4, #0]
   1af3a:	4620      	mov	r0, r4
   1af3c:	f247 0281 	movw	r2, #28801	; 0x7081
   1af40:	f000 fd74 	bl	1ba2c <ip_interface_request_send>
   1af44:	4603      	mov	r3, r0
   1af46:	b968      	cbnz	r0, 1af64 <secure_client_socket+0xa0>
   1af48:	6823      	ldr	r3, [r4, #0]
   1af4a:	00db      	lsls	r3, r3, #3
   1af4c:	d40e      	bmi.n	1af6c <secure_client_socket+0xa8>
   1af4e:	ab03      	add	r3, sp, #12
   1af50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1af54:	210b      	movs	r1, #11
   1af56:	4628      	mov	r0, r5
   1af58:	f000 fd7c 	bl	1ba54 <ip_interface_wait>
   1af5c:	4603      	mov	r3, r0
   1af5e:	b150      	cbz	r0, 1af76 <secure_client_socket+0xb2>
   1af60:	f8c4 8000 	str.w	r8, [r4]
   1af64:	4618      	mov	r0, r3
   1af66:	b004      	add	sp, #16
   1af68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1af6c:	2373      	movs	r3, #115	; 0x73
   1af6e:	4618      	mov	r0, r3
   1af70:	b004      	add	sp, #16
   1af72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1af76:	220c      	movs	r2, #12
   1af78:	ab02      	add	r3, sp, #8
   1af7a:	4611      	mov	r1, r2
   1af7c:	4628      	mov	r0, r5
   1af7e:	f000 fd69 	bl	1ba54 <ip_interface_wait>
   1af82:	4603      	mov	r3, r0
   1af84:	bb30      	cbnz	r0, 1afd4 <secure_client_socket+0x110>
   1af86:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   1af8a:	b138      	cbz	r0, 1af9c <secure_client_socket+0xd8>
   1af8c:	9301      	str	r3, [sp, #4]
   1af8e:	f006 f901 	bl	21194 <nrf_free>
   1af92:	9b01      	ldr	r3, [sp, #4]
   1af94:	443e      	add	r6, r7
   1af96:	6073      	str	r3, [r6, #4]
   1af98:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   1af9c:	4618      	mov	r0, r3
   1af9e:	6822      	ldr	r2, [r4, #0]
   1afa0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   1afa4:	6022      	str	r2, [r4, #0]
   1afa6:	6822      	ldr	r2, [r4, #0]
   1afa8:	0c12      	lsrs	r2, r2, #16
   1afaa:	0412      	lsls	r2, r2, #16
   1afac:	f042 020c 	orr.w	r2, r2, #12
   1afb0:	6022      	str	r2, [r4, #0]
   1afb2:	6822      	ldr	r2, [r4, #0]
   1afb4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1afb8:	6022      	str	r2, [r4, #0]
   1afba:	6822      	ldr	r2, [r4, #0]
   1afbc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1afc0:	6022      	str	r2, [r4, #0]
   1afc2:	b004      	add	sp, #16
   1afc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1afc8:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   1afcc:	6800      	ldr	r0, [r0, #0]
   1afce:	f7f1 fdbd 	bl	cb4c <memcpy>
   1afd2:	e79c      	b.n	1af0e <secure_client_socket+0x4a>
   1afd4:	2b73      	cmp	r3, #115	; 0x73
   1afd6:	d0c5      	beq.n	1af64 <secure_client_socket+0xa0>
   1afd8:	f8c4 8000 	str.w	r8, [r4]
   1afdc:	e7c2      	b.n	1af64 <secure_client_socket+0xa0>
   1afde:	230c      	movs	r3, #12
   1afe0:	4618      	mov	r0, r3
   1afe2:	b004      	add	sp, #16
   1afe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1afe8:	200219ac 	.word	0x200219ac
   1afec:	20021868 	.word	0x20021868

0001aff0 <tls_interface_init>:
   1aff0:	2201      	movs	r2, #1
   1aff2:	4b02      	ldr	r3, [pc, #8]	; (1affc <tls_interface_init+0xc>)
   1aff4:	2000      	movs	r0, #0
   1aff6:	701a      	strb	r2, [r3, #0]
   1aff8:	4770      	bx	lr
   1affa:	bf00      	nop
   1affc:	2002628d 	.word	0x2002628d

0001b000 <tls_interface_open>:
   1b000:	b538      	push	{r3, r4, r5, lr}
   1b002:	4b23      	ldr	r3, [pc, #140]	; (1b090 <tls_interface_open+0x90>)
   1b004:	781b      	ldrb	r3, [r3, #0]
   1b006:	2b00      	cmp	r3, #0
   1b008:	d03c      	beq.n	1b084 <tls_interface_open+0x84>
   1b00a:	1e4b      	subs	r3, r1, #1
   1b00c:	2b01      	cmp	r3, #1
   1b00e:	d808      	bhi.n	1b022 <tls_interface_open+0x22>
   1b010:	4614      	mov	r4, r2
   1b012:	b162      	cbz	r2, 1b02e <tls_interface_open+0x2e>
   1b014:	2901      	cmp	r1, #1
   1b016:	d02d      	beq.n	1b074 <tls_interface_open+0x74>
   1b018:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1b01c:	bf08      	it	eq
   1b01e:	2202      	moveq	r2, #2
   1b020:	d00d      	beq.n	1b03e <tls_interface_open+0x3e>
   1b022:	2029      	movs	r0, #41	; 0x29
   1b024:	f7fb fe08 	bl	16c38 <bsd_os_errno_set>
   1b028:	f04f 35ff 	mov.w	r5, #4294967295
   1b02c:	e020      	b.n	1b070 <tls_interface_open+0x70>
   1b02e:	2901      	cmp	r1, #1
   1b030:	bf0b      	itete	eq
   1b032:	2201      	moveq	r2, #1
   1b034:	2202      	movne	r2, #2
   1b036:	f44f 7482 	moveq.w	r4, #260	; 0x104
   1b03a:	f44f 7487 	movne.w	r4, #270	; 0x10e
   1b03e:	f000 fd3b 	bl	1bab8 <ip_interface_open>
   1b042:	1e05      	subs	r5, r0, #0
   1b044:	db1b      	blt.n	1b07e <tls_interface_open+0x7e>
   1b046:	4b13      	ldr	r3, [pc, #76]	; (1b094 <tls_interface_open+0x94>)
   1b048:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   1b04c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1b050:	2224      	movs	r2, #36	; 0x24
   1b052:	4911      	ldr	r1, [pc, #68]	; (1b098 <tls_interface_open+0x98>)
   1b054:	f7f1 fd7a 	bl	cb4c <memcpy>
   1b058:	4628      	mov	r0, r5
   1b05a:	f006 fd99 	bl	21b90 <interface_socket_from_handle_get>
   1b05e:	6803      	ldr	r3, [r0, #0]
   1b060:	6144      	str	r4, [r0, #20]
   1b062:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b066:	6003      	str	r3, [r0, #0]
   1b068:	6803      	ldr	r3, [r0, #0]
   1b06a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b06e:	6003      	str	r3, [r0, #0]
   1b070:	4628      	mov	r0, r5
   1b072:	bd38      	pop	{r3, r4, r5, pc}
   1b074:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1b078:	d1d3      	bne.n	1b022 <tls_interface_open+0x22>
   1b07a:	460a      	mov	r2, r1
   1b07c:	e7df      	b.n	1b03e <tls_interface_open+0x3e>
   1b07e:	f04f 35ff 	mov.w	r5, #4294967295
   1b082:	e7f5      	b.n	1b070 <tls_interface_open+0x70>
   1b084:	2070      	movs	r0, #112	; 0x70
   1b086:	f7fb fdd7 	bl	16c38 <bsd_os_errno_set>
   1b08a:	f04f 35ff 	mov.w	r5, #4294967295
   1b08e:	e7ef      	b.n	1b070 <tls_interface_open+0x70>
   1b090:	2002628d 	.word	0x2002628d
   1b094:	20021868 	.word	0x20021868
   1b098:	0002f03c 	.word	0x0002f03c

0001b09c <tls_interface_close>:
   1b09c:	b538      	push	{r3, r4, r5, lr}
   1b09e:	4604      	mov	r4, r0
   1b0a0:	f006 fd76 	bl	21b90 <interface_socket_from_handle_get>
   1b0a4:	b180      	cbz	r0, 1b0c8 <tls_interface_close+0x2c>
   1b0a6:	4d0b      	ldr	r5, [pc, #44]	; (1b0d4 <tls_interface_close+0x38>)
   1b0a8:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   1b0ac:	b138      	cbz	r0, 1b0be <tls_interface_close+0x22>
   1b0ae:	f006 f871 	bl	21194 <nrf_free>
   1b0b2:	2300      	movs	r3, #0
   1b0b4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b0b8:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   1b0bc:	6053      	str	r3, [r2, #4]
   1b0be:	4620      	mov	r0, r4
   1b0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b0c4:	f000 bdbe 	b.w	1bc44 <ip_interface_close>
   1b0c8:	2009      	movs	r0, #9
   1b0ca:	f7fb fdb5 	bl	16c38 <bsd_os_errno_set>
   1b0ce:	f04f 30ff 	mov.w	r0, #4294967295
   1b0d2:	bd38      	pop	{r3, r4, r5, pc}
   1b0d4:	200219ac 	.word	0x200219ac

0001b0d8 <tls_interface_sendto>:
   1b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0dc:	b087      	sub	sp, #28
   1b0de:	9103      	str	r1, [sp, #12]
   1b0e0:	4616      	mov	r6, r2
   1b0e2:	469b      	mov	fp, r3
   1b0e4:	4682      	mov	sl, r0
   1b0e6:	f006 fd53 	bl	21b90 <interface_socket_from_handle_get>
   1b0ea:	2800      	cmp	r0, #0
   1b0ec:	f000 8082 	beq.w	1b1f4 <tls_interface_sendto+0x11c>
   1b0f0:	2400      	movs	r4, #0
   1b0f2:	f01b 0f02 	tst.w	fp, #2
   1b0f6:	bf08      	it	eq
   1b0f8:	6807      	ldreq	r7, [r0, #0]
   1b0fa:	4a40      	ldr	r2, [pc, #256]	; (1b1fc <tls_interface_sendto+0x124>)
   1b0fc:	bf08      	it	eq
   1b0fe:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   1b102:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   1b106:	4605      	mov	r5, r0
   1b108:	bf0c      	ite	eq
   1b10a:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   1b10e:	2700      	movne	r7, #0
   1b110:	46a0      	mov	r8, r4
   1b112:	f04f 33ff 	mov.w	r3, #4294967295
   1b116:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   1b11a:	e00f      	b.n	1b13c <tls_interface_sendto+0x64>
   1b11c:	f899 2000 	ldrb.w	r2, [r9]
   1b120:	2a02      	cmp	r2, #2
   1b122:	d061      	beq.n	1b1e8 <tls_interface_sendto+0x110>
   1b124:	692a      	ldr	r2, [r5, #16]
   1b126:	2a01      	cmp	r2, #1
   1b128:	d061      	beq.n	1b1ee <tls_interface_sendto+0x116>
   1b12a:	2b00      	cmp	r3, #0
   1b12c:	db30      	blt.n	1b190 <tls_interface_sendto+0xb8>
   1b12e:	f1b8 0f00 	cmp.w	r8, #0
   1b132:	dc18      	bgt.n	1b166 <tls_interface_sendto+0x8e>
   1b134:	441c      	add	r4, r3
   1b136:	b1df      	cbz	r7, 1b170 <tls_interface_sendto+0x98>
   1b138:	42a6      	cmp	r6, r4
   1b13a:	dd19      	ble.n	1b170 <tls_interface_sendto+0x98>
   1b13c:	6829      	ldr	r1, [r5, #0]
   1b13e:	1b32      	subs	r2, r6, r4
   1b140:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1b144:	b289      	uxth	r1, r1
   1b146:	bfa8      	it	ge
   1b148:	f44f 6200 	movge.w	r2, #2048	; 0x800
   1b14c:	290c      	cmp	r1, #12
   1b14e:	d013      	beq.n	1b178 <tls_interface_sendto+0xa0>
   1b150:	6829      	ldr	r1, [r5, #0]
   1b152:	b289      	uxth	r1, r1
   1b154:	290b      	cmp	r1, #11
   1b156:	d0e1      	beq.n	1b11c <tls_interface_sendto+0x44>
   1b158:	6929      	ldr	r1, [r5, #16]
   1b15a:	2901      	cmp	r1, #1
   1b15c:	d024      	beq.n	1b1a8 <tls_interface_sendto+0xd0>
   1b15e:	2902      	cmp	r1, #2
   1b160:	d01a      	beq.n	1b198 <tls_interface_sendto+0xc0>
   1b162:	f04f 0839 	mov.w	r8, #57	; 0x39
   1b166:	4640      	mov	r0, r8
   1b168:	f7fb fd66 	bl	16c38 <bsd_os_errno_set>
   1b16c:	f04f 34ff 	mov.w	r4, #4294967295
   1b170:	4620      	mov	r0, r4
   1b172:	b007      	add	sp, #28
   1b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b178:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b17a:	9903      	ldr	r1, [sp, #12]
   1b17c:	9301      	str	r3, [sp, #4]
   1b17e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b180:	4421      	add	r1, r4
   1b182:	9300      	str	r3, [sp, #0]
   1b184:	4650      	mov	r0, sl
   1b186:	465b      	mov	r3, fp
   1b188:	f000 fdce 	bl	1bd28 <ip_interface_sendto>
   1b18c:	1e03      	subs	r3, r0, #0
   1b18e:	dad1      	bge.n	1b134 <tls_interface_sendto+0x5c>
   1b190:	f1b8 0f00 	cmp.w	r8, #0
   1b194:	ddea      	ble.n	1b16c <tls_interface_sendto+0x94>
   1b196:	e7e6      	b.n	1b166 <tls_interface_sendto+0x8e>
   1b198:	6829      	ldr	r1, [r5, #0]
   1b19a:	b289      	uxth	r1, r1
   1b19c:	2902      	cmp	r1, #2
   1b19e:	d007      	beq.n	1b1b0 <tls_interface_sendto+0xd8>
   1b1a0:	6829      	ldr	r1, [r5, #0]
   1b1a2:	b289      	uxth	r1, r1
   1b1a4:	2904      	cmp	r1, #4
   1b1a6:	d003      	beq.n	1b1b0 <tls_interface_sendto+0xd8>
   1b1a8:	6829      	ldr	r1, [r5, #0]
   1b1aa:	b289      	uxth	r1, r1
   1b1ac:	2905      	cmp	r1, #5
   1b1ae:	d1d8      	bne.n	1b162 <tls_interface_sendto+0x8a>
   1b1b0:	f899 1000 	ldrb.w	r1, [r9]
   1b1b4:	2902      	cmp	r1, #2
   1b1b6:	d1b8      	bne.n	1b12a <tls_interface_sendto+0x52>
   1b1b8:	4629      	mov	r1, r5
   1b1ba:	4650      	mov	r0, sl
   1b1bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b1c0:	f7ff fe80 	bl	1aec4 <secure_client_socket>
   1b1c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b1c8:	4680      	mov	r8, r0
   1b1ca:	2800      	cmp	r0, #0
   1b1cc:	d1ad      	bne.n	1b12a <tls_interface_sendto+0x52>
   1b1ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b1d0:	9903      	ldr	r1, [sp, #12]
   1b1d2:	9301      	str	r3, [sp, #4]
   1b1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b1d6:	4421      	add	r1, r4
   1b1d8:	9300      	str	r3, [sp, #0]
   1b1da:	4650      	mov	r0, sl
   1b1dc:	465b      	mov	r3, fp
   1b1de:	f000 fda3 	bl	1bd28 <ip_interface_sendto>
   1b1e2:	1e03      	subs	r3, r0, #0
   1b1e4:	daa6      	bge.n	1b134 <tls_interface_sendto+0x5c>
   1b1e6:	e7c1      	b.n	1b16c <tls_interface_sendto+0x94>
   1b1e8:	f04f 0823 	mov.w	r8, #35	; 0x23
   1b1ec:	e7bb      	b.n	1b166 <tls_interface_sendto+0x8e>
   1b1ee:	f04f 082a 	mov.w	r8, #42	; 0x2a
   1b1f2:	e7b8      	b.n	1b166 <tls_interface_sendto+0x8e>
   1b1f4:	f04f 0809 	mov.w	r8, #9
   1b1f8:	e7b5      	b.n	1b166 <tls_interface_sendto+0x8e>
   1b1fa:	bf00      	nop
   1b1fc:	20021868 	.word	0x20021868

0001b200 <tls_interface_recvfrom>:
   1b200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b204:	460d      	mov	r5, r1
   1b206:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1b20a:	4616      	mov	r6, r2
   1b20c:	461f      	mov	r7, r3
   1b20e:	4604      	mov	r4, r0
   1b210:	f006 fcbe 	bl	21b90 <interface_socket_from_handle_get>
   1b214:	2800      	cmp	r0, #0
   1b216:	d038      	beq.n	1b28a <tls_interface_recvfrom+0x8a>
   1b218:	6803      	ldr	r3, [r0, #0]
   1b21a:	b29b      	uxth	r3, r3
   1b21c:	2b0c      	cmp	r3, #12
   1b21e:	d00f      	beq.n	1b240 <tls_interface_recvfrom+0x40>
   1b220:	6803      	ldr	r3, [r0, #0]
   1b222:	b29b      	uxth	r3, r3
   1b224:	2b0d      	cmp	r3, #13
   1b226:	d00b      	beq.n	1b240 <tls_interface_recvfrom+0x40>
   1b228:	6903      	ldr	r3, [r0, #16]
   1b22a:	2b01      	cmp	r3, #1
   1b22c:	d01a      	beq.n	1b264 <tls_interface_recvfrom+0x64>
   1b22e:	2b02      	cmp	r3, #2
   1b230:	d010      	beq.n	1b254 <tls_interface_recvfrom+0x54>
   1b232:	2023      	movs	r0, #35	; 0x23
   1b234:	f7fb fd00 	bl	16c38 <bsd_os_errno_set>
   1b238:	f04f 30ff 	mov.w	r0, #4294967295
   1b23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b240:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1b244:	463b      	mov	r3, r7
   1b246:	4632      	mov	r2, r6
   1b248:	4629      	mov	r1, r5
   1b24a:	4620      	mov	r0, r4
   1b24c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b250:	f000 bee6 	b.w	1c020 <ip_interface_recvfrom>
   1b254:	6803      	ldr	r3, [r0, #0]
   1b256:	b29b      	uxth	r3, r3
   1b258:	2b02      	cmp	r3, #2
   1b25a:	d007      	beq.n	1b26c <tls_interface_recvfrom+0x6c>
   1b25c:	6803      	ldr	r3, [r0, #0]
   1b25e:	b29b      	uxth	r3, r3
   1b260:	2b04      	cmp	r3, #4
   1b262:	d003      	beq.n	1b26c <tls_interface_recvfrom+0x6c>
   1b264:	6803      	ldr	r3, [r0, #0]
   1b266:	b29b      	uxth	r3, r3
   1b268:	2b05      	cmp	r3, #5
   1b26a:	d1e2      	bne.n	1b232 <tls_interface_recvfrom+0x32>
   1b26c:	4b08      	ldr	r3, [pc, #32]	; (1b290 <tls_interface_recvfrom+0x90>)
   1b26e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1b272:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b276:	2b02      	cmp	r3, #2
   1b278:	d1db      	bne.n	1b232 <tls_interface_recvfrom+0x32>
   1b27a:	4601      	mov	r1, r0
   1b27c:	4620      	mov	r0, r4
   1b27e:	f7ff fe21 	bl	1aec4 <secure_client_socket>
   1b282:	2800      	cmp	r0, #0
   1b284:	d0dc      	beq.n	1b240 <tls_interface_recvfrom+0x40>
   1b286:	dcd5      	bgt.n	1b234 <tls_interface_recvfrom+0x34>
   1b288:	e7d6      	b.n	1b238 <tls_interface_recvfrom+0x38>
   1b28a:	2009      	movs	r0, #9
   1b28c:	e7d2      	b.n	1b234 <tls_interface_recvfrom+0x34>
   1b28e:	bf00      	nop
   1b290:	20021868 	.word	0x20021868

0001b294 <tls_interface_bind>:
   1b294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b298:	b082      	sub	sp, #8
   1b29a:	460e      	mov	r6, r1
   1b29c:	4617      	mov	r7, r2
   1b29e:	4605      	mov	r5, r0
   1b2a0:	f006 fc76 	bl	21b90 <interface_socket_from_handle_get>
   1b2a4:	2800      	cmp	r0, #0
   1b2a6:	d069      	beq.n	1b37c <tls_interface_bind+0xe8>
   1b2a8:	6803      	ldr	r3, [r0, #0]
   1b2aa:	4604      	mov	r4, r0
   1b2ac:	b29b      	uxth	r3, r3
   1b2ae:	2b02      	cmp	r3, #2
   1b2b0:	d158      	bne.n	1b364 <tls_interface_bind+0xd0>
   1b2b2:	463a      	mov	r2, r7
   1b2b4:	4631      	mov	r1, r6
   1b2b6:	4628      	mov	r0, r5
   1b2b8:	f001 f9c2 	bl	1c640 <ip_interface_bind>
   1b2bc:	2800      	cmp	r0, #0
   1b2be:	d148      	bne.n	1b352 <tls_interface_bind+0xbe>
   1b2c0:	00ee      	lsls	r6, r5, #3
   1b2c2:	4f2f      	ldr	r7, [pc, #188]	; (1b380 <tls_interface_bind+0xec>)
   1b2c4:	1973      	adds	r3, r6, r5
   1b2c6:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1b2ca:	2b01      	cmp	r3, #1
   1b2cc:	d002      	beq.n	1b2d4 <tls_interface_bind+0x40>
   1b2ce:	b002      	add	sp, #8
   1b2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b2d4:	f04f 3cff 	mov.w	ip, #4294967295
   1b2d8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1b384 <tls_interface_bind+0xf0>
   1b2dc:	f247 0281 	movw	r2, #28801	; 0x7081
   1b2e0:	eb0a 0906 	add.w	r9, sl, r6
   1b2e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b2e8:	69a1      	ldr	r1, [r4, #24]
   1b2ea:	4628      	mov	r0, r5
   1b2ec:	f8cd c004 	str.w	ip, [sp, #4]
   1b2f0:	f000 fb7c 	bl	1b9ec <ip_interface_request_create>
   1b2f4:	4680      	mov	r8, r0
   1b2f6:	2800      	cmp	r0, #0
   1b2f8:	d03e      	beq.n	1b378 <tls_interface_bind+0xe4>
   1b2fa:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1b2fe:	bbaa      	cbnz	r2, 1b36c <tls_interface_bind+0xd8>
   1b300:	1971      	adds	r1, r6, r5
   1b302:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1b306:	2224      	movs	r2, #36	; 0x24
   1b308:	f108 0014 	add.w	r0, r8, #20
   1b30c:	f7f1 fc1e 	bl	cb4c <memcpy>
   1b310:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b314:	4641      	mov	r1, r8
   1b316:	3324      	adds	r3, #36	; 0x24
   1b318:	f8c8 3008 	str.w	r3, [r8, #8]
   1b31c:	6822      	ldr	r2, [r4, #0]
   1b31e:	2304      	movs	r3, #4
   1b320:	0c12      	lsrs	r2, r2, #16
   1b322:	0412      	lsls	r2, r2, #16
   1b324:	f042 020a 	orr.w	r2, r2, #10
   1b328:	6022      	str	r2, [r4, #0]
   1b32a:	4620      	mov	r0, r4
   1b32c:	f247 0281 	movw	r2, #28801	; 0x7081
   1b330:	f000 fb7c 	bl	1ba2c <ip_interface_request_send>
   1b334:	b968      	cbnz	r0, 1b352 <tls_interface_bind+0xbe>
   1b336:	6823      	ldr	r3, [r4, #0]
   1b338:	00db      	lsls	r3, r3, #3
   1b33a:	d415      	bmi.n	1b368 <tls_interface_bind+0xd4>
   1b33c:	4628      	mov	r0, r5
   1b33e:	ab01      	add	r3, sp, #4
   1b340:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b344:	210b      	movs	r1, #11
   1b346:	f000 fb85 	bl	1ba54 <ip_interface_wait>
   1b34a:	2800      	cmp	r0, #0
   1b34c:	d0bf      	beq.n	1b2ce <tls_interface_bind+0x3a>
   1b34e:	2304      	movs	r3, #4
   1b350:	6023      	str	r3, [r4, #0]
   1b352:	2800      	cmp	r0, #0
   1b354:	ddbb      	ble.n	1b2ce <tls_interface_bind+0x3a>
   1b356:	f7fb fc6f 	bl	16c38 <bsd_os_errno_set>
   1b35a:	f04f 30ff 	mov.w	r0, #4294967295
   1b35e:	b002      	add	sp, #8
   1b360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b364:	202d      	movs	r0, #45	; 0x2d
   1b366:	e7f6      	b.n	1b356 <tls_interface_bind+0xc2>
   1b368:	2073      	movs	r0, #115	; 0x73
   1b36a:	e7f4      	b.n	1b356 <tls_interface_bind+0xc2>
   1b36c:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   1b370:	6800      	ldr	r0, [r0, #0]
   1b372:	f7f1 fbeb 	bl	cb4c <memcpy>
   1b376:	e7c3      	b.n	1b300 <tls_interface_bind+0x6c>
   1b378:	200c      	movs	r0, #12
   1b37a:	e7ec      	b.n	1b356 <tls_interface_bind+0xc2>
   1b37c:	2009      	movs	r0, #9
   1b37e:	e7ea      	b.n	1b356 <tls_interface_bind+0xc2>
   1b380:	20021868 	.word	0x20021868
   1b384:	200219ac 	.word	0x200219ac

0001b388 <tls_interface_connect>:
   1b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b38a:	460e      	mov	r6, r1
   1b38c:	4617      	mov	r7, r2
   1b38e:	4604      	mov	r4, r0
   1b390:	f006 fbfe 	bl	21b90 <interface_socket_from_handle_get>
   1b394:	b1e8      	cbz	r0, 1b3d2 <tls_interface_connect+0x4a>
   1b396:	4b13      	ldr	r3, [pc, #76]	; (1b3e4 <tls_interface_connect+0x5c>)
   1b398:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1b39c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b3a0:	2b02      	cmp	r3, #2
   1b3a2:	d11c      	bne.n	1b3de <tls_interface_connect+0x56>
   1b3a4:	6803      	ldr	r3, [r0, #0]
   1b3a6:	4605      	mov	r5, r0
   1b3a8:	b29b      	uxth	r3, r3
   1b3aa:	2b02      	cmp	r3, #2
   1b3ac:	d003      	beq.n	1b3b6 <tls_interface_connect+0x2e>
   1b3ae:	6803      	ldr	r3, [r0, #0]
   1b3b0:	b29b      	uxth	r3, r3
   1b3b2:	2b04      	cmp	r3, #4
   1b3b4:	d113      	bne.n	1b3de <tls_interface_connect+0x56>
   1b3b6:	463a      	mov	r2, r7
   1b3b8:	4631      	mov	r1, r6
   1b3ba:	4620      	mov	r0, r4
   1b3bc:	f000 ff58 	bl	1c270 <ip_interface_connect>
   1b3c0:	b110      	cbz	r0, 1b3c8 <tls_interface_connect+0x40>
   1b3c2:	2800      	cmp	r0, #0
   1b3c4:	dc06      	bgt.n	1b3d4 <tls_interface_connect+0x4c>
   1b3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b3c8:	4629      	mov	r1, r5
   1b3ca:	4620      	mov	r0, r4
   1b3cc:	f7ff fd7a 	bl	1aec4 <secure_client_socket>
   1b3d0:	e7f7      	b.n	1b3c2 <tls_interface_connect+0x3a>
   1b3d2:	2009      	movs	r0, #9
   1b3d4:	f7fb fc30 	bl	16c38 <bsd_os_errno_set>
   1b3d8:	f04f 30ff 	mov.w	r0, #4294967295
   1b3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b3de:	202d      	movs	r0, #45	; 0x2d
   1b3e0:	e7f8      	b.n	1b3d4 <tls_interface_connect+0x4c>
   1b3e2:	bf00      	nop
   1b3e4:	20021868 	.word	0x20021868

0001b3e8 <tls_interface_listen>:
   1b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3ec:	b085      	sub	sp, #20
   1b3ee:	4689      	mov	r9, r1
   1b3f0:	4605      	mov	r5, r0
   1b3f2:	f006 fbcd 	bl	21b90 <interface_socket_from_handle_get>
   1b3f6:	2800      	cmp	r0, #0
   1b3f8:	f000 8084 	beq.w	1b504 <tls_interface_listen+0x11c>
   1b3fc:	6803      	ldr	r3, [r0, #0]
   1b3fe:	4604      	mov	r4, r0
   1b400:	00da      	lsls	r2, r3, #3
   1b402:	d47d      	bmi.n	1b500 <tls_interface_listen+0x118>
   1b404:	6903      	ldr	r3, [r0, #16]
   1b406:	2b01      	cmp	r3, #1
   1b408:	d17a      	bne.n	1b500 <tls_interface_listen+0x118>
   1b40a:	6803      	ldr	r3, [r0, #0]
   1b40c:	b29b      	uxth	r3, r3
   1b40e:	2b04      	cmp	r3, #4
   1b410:	d05d      	beq.n	1b4ce <tls_interface_listen+0xe6>
   1b412:	6823      	ldr	r3, [r4, #0]
   1b414:	b29b      	uxth	r3, r3
   1b416:	2b0b      	cmp	r3, #11
   1b418:	d172      	bne.n	1b500 <tls_interface_listen+0x118>
   1b41a:	4a3b      	ldr	r2, [pc, #236]	; (1b508 <tls_interface_listen+0x120>)
   1b41c:	00ee      	lsls	r6, r5, #3
   1b41e:	1973      	adds	r3, r6, r5
   1b420:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1b424:	9201      	str	r2, [sp, #4]
   1b426:	2b01      	cmp	r3, #1
   1b428:	d16a      	bne.n	1b500 <tls_interface_listen+0x118>
   1b42a:	2201      	movs	r2, #1
   1b42c:	9901      	ldr	r1, [sp, #4]
   1b42e:	1973      	adds	r3, r6, r5
   1b430:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   1b434:	6823      	ldr	r3, [r4, #0]
   1b436:	2b0b      	cmp	r3, #11
   1b438:	d040      	beq.n	1b4bc <tls_interface_listen+0xd4>
   1b43a:	f04f 3cff 	mov.w	ip, #4294967295
   1b43e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 1b50c <tls_interface_listen+0x124>
   1b442:	f247 0281 	movw	r2, #28801	; 0x7081
   1b446:	eb0a 0806 	add.w	r8, sl, r6
   1b44a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b44e:	69a1      	ldr	r1, [r4, #24]
   1b450:	4628      	mov	r0, r5
   1b452:	6827      	ldr	r7, [r4, #0]
   1b454:	f8cd c00c 	str.w	ip, [sp, #12]
   1b458:	f000 fac8 	bl	1b9ec <ip_interface_request_create>
   1b45c:	4683      	mov	fp, r0
   1b45e:	2800      	cmp	r0, #0
   1b460:	d046      	beq.n	1b4f0 <tls_interface_listen+0x108>
   1b462:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1b466:	2a00      	cmp	r2, #0
   1b468:	d144      	bne.n	1b4f4 <tls_interface_listen+0x10c>
   1b46a:	9b01      	ldr	r3, [sp, #4]
   1b46c:	1971      	adds	r1, r6, r5
   1b46e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b472:	2224      	movs	r2, #36	; 0x24
   1b474:	f10b 0014 	add.w	r0, fp, #20
   1b478:	f7f1 fb68 	bl	cb4c <memcpy>
   1b47c:	f8db 2008 	ldr.w	r2, [fp, #8]
   1b480:	4659      	mov	r1, fp
   1b482:	3224      	adds	r2, #36	; 0x24
   1b484:	f8cb 2008 	str.w	r2, [fp, #8]
   1b488:	6822      	ldr	r2, [r4, #0]
   1b48a:	463b      	mov	r3, r7
   1b48c:	0c12      	lsrs	r2, r2, #16
   1b48e:	0412      	lsls	r2, r2, #16
   1b490:	f042 020a 	orr.w	r2, r2, #10
   1b494:	6022      	str	r2, [r4, #0]
   1b496:	4620      	mov	r0, r4
   1b498:	f247 0281 	movw	r2, #28801	; 0x7081
   1b49c:	f000 fac6 	bl	1ba2c <ip_interface_request_send>
   1b4a0:	b980      	cbnz	r0, 1b4c4 <tls_interface_listen+0xdc>
   1b4a2:	6823      	ldr	r3, [r4, #0]
   1b4a4:	00db      	lsls	r3, r3, #3
   1b4a6:	d41b      	bmi.n	1b4e0 <tls_interface_listen+0xf8>
   1b4a8:	ab03      	add	r3, sp, #12
   1b4aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b4ae:	210b      	movs	r1, #11
   1b4b0:	4628      	mov	r0, r5
   1b4b2:	f000 facf 	bl	1ba54 <ip_interface_wait>
   1b4b6:	b108      	cbz	r0, 1b4bc <tls_interface_listen+0xd4>
   1b4b8:	6027      	str	r7, [r4, #0]
   1b4ba:	e003      	b.n	1b4c4 <tls_interface_listen+0xdc>
   1b4bc:	4649      	mov	r1, r9
   1b4be:	4628      	mov	r0, r5
   1b4c0:	f001 f960 	bl	1c784 <ip_interface_listen>
   1b4c4:	2800      	cmp	r0, #0
   1b4c6:	dc0c      	bgt.n	1b4e2 <tls_interface_listen+0xfa>
   1b4c8:	b005      	add	sp, #20
   1b4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4ce:	4a0e      	ldr	r2, [pc, #56]	; (1b508 <tls_interface_listen+0x120>)
   1b4d0:	00ee      	lsls	r6, r5, #3
   1b4d2:	1973      	adds	r3, r6, r5
   1b4d4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1b4d8:	9201      	str	r2, [sp, #4]
   1b4da:	2b02      	cmp	r3, #2
   1b4dc:	d199      	bne.n	1b412 <tls_interface_listen+0x2a>
   1b4de:	e7a4      	b.n	1b42a <tls_interface_listen+0x42>
   1b4e0:	2073      	movs	r0, #115	; 0x73
   1b4e2:	f7fb fba9 	bl	16c38 <bsd_os_errno_set>
   1b4e6:	f04f 30ff 	mov.w	r0, #4294967295
   1b4ea:	b005      	add	sp, #20
   1b4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4f0:	200c      	movs	r0, #12
   1b4f2:	e7f6      	b.n	1b4e2 <tls_interface_listen+0xfa>
   1b4f4:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   1b4f8:	6800      	ldr	r0, [r0, #0]
   1b4fa:	f7f1 fb27 	bl	cb4c <memcpy>
   1b4fe:	e7b4      	b.n	1b46a <tls_interface_listen+0x82>
   1b500:	202d      	movs	r0, #45	; 0x2d
   1b502:	e7ee      	b.n	1b4e2 <tls_interface_listen+0xfa>
   1b504:	2009      	movs	r0, #9
   1b506:	e7ec      	b.n	1b4e2 <tls_interface_listen+0xfa>
   1b508:	20021868 	.word	0x20021868
   1b50c:	200219ac 	.word	0x200219ac

0001b510 <tls_interface_accept>:
   1b510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b514:	b083      	sub	sp, #12
   1b516:	460f      	mov	r7, r1
   1b518:	4690      	mov	r8, r2
   1b51a:	4699      	mov	r9, r3
   1b51c:	4606      	mov	r6, r0
   1b51e:	f04f 34ff 	mov.w	r4, #4294967295
   1b522:	f006 fb35 	bl	21b90 <interface_socket_from_handle_get>
   1b526:	9401      	str	r4, [sp, #4]
   1b528:	2800      	cmp	r0, #0
   1b52a:	d048      	beq.n	1b5be <tls_interface_accept+0xae>
   1b52c:	6805      	ldr	r5, [r0, #0]
   1b52e:	b2ad      	uxth	r5, r5
   1b530:	2d07      	cmp	r5, #7
   1b532:	d144      	bne.n	1b5be <tls_interface_accept+0xae>
   1b534:	6803      	ldr	r3, [r0, #0]
   1b536:	00db      	lsls	r3, r3, #3
   1b538:	d443      	bmi.n	1b5c2 <tls_interface_accept+0xb2>
   1b53a:	464b      	mov	r3, r9
   1b53c:	4642      	mov	r2, r8
   1b53e:	4639      	mov	r1, r7
   1b540:	4630      	mov	r0, r6
   1b542:	f001 f99b 	bl	1c87c <ip_interface_accept>
   1b546:	1e04      	subs	r4, r0, #0
   1b548:	da08      	bge.n	1b55c <tls_interface_accept+0x4c>
   1b54a:	4620      	mov	r0, r4
   1b54c:	f7fb fb74 	bl	16c38 <bsd_os_errno_set>
   1b550:	f04f 34ff 	mov.w	r4, #4294967295
   1b554:	4620      	mov	r0, r4
   1b556:	b003      	add	sp, #12
   1b558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b55c:	f006 fb18 	bl	21b90 <interface_socket_from_handle_get>
   1b560:	6803      	ldr	r3, [r0, #0]
   1b562:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1b5cc <tls_interface_accept+0xbc>
   1b566:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b56a:	6003      	str	r3, [r0, #0]
   1b56c:	6803      	ldr	r3, [r0, #0]
   1b56e:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   1b572:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b576:	00bf      	lsls	r7, r7, #2
   1b578:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b57c:	4605      	mov	r5, r0
   1b57e:	6003      	str	r3, [r0, #0]
   1b580:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   1b584:	2224      	movs	r2, #36	; 0x24
   1b586:	eb08 0007 	add.w	r0, r8, r7
   1b58a:	f7f1 fadf 	bl	cb4c <memcpy>
   1b58e:	2302      	movs	r3, #2
   1b590:	f808 3007 	strb.w	r3, [r8, r7]
   1b594:	682a      	ldr	r2, [r5, #0]
   1b596:	ab01      	add	r3, sp, #4
   1b598:	0c12      	lsrs	r2, r2, #16
   1b59a:	0412      	lsls	r2, r2, #16
   1b59c:	f042 020b 	orr.w	r2, r2, #11
   1b5a0:	602a      	str	r2, [r5, #0]
   1b5a2:	210c      	movs	r1, #12
   1b5a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b5a8:	4620      	mov	r0, r4
   1b5aa:	f000 fa53 	bl	1ba54 <ip_interface_wait>
   1b5ae:	4605      	mov	r5, r0
   1b5b0:	2800      	cmp	r0, #0
   1b5b2:	d0cf      	beq.n	1b554 <tls_interface_accept+0x44>
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	f000 fb45 	bl	1bc44 <ip_interface_close>
   1b5ba:	462c      	mov	r4, r5
   1b5bc:	e7c5      	b.n	1b54a <tls_interface_accept+0x3a>
   1b5be:	2409      	movs	r4, #9
   1b5c0:	e7c3      	b.n	1b54a <tls_interface_accept+0x3a>
   1b5c2:	202d      	movs	r0, #45	; 0x2d
   1b5c4:	f7fb fb38 	bl	16c38 <bsd_os_errno_set>
   1b5c8:	e7c4      	b.n	1b554 <tls_interface_accept+0x44>
   1b5ca:	bf00      	nop
   1b5cc:	20021868 	.word	0x20021868

0001b5d0 <tls_interface_setopt>:
   1b5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5d4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b5d8:	b082      	sub	sp, #8
   1b5da:	9e08      	ldr	r6, [sp, #32]
   1b5dc:	d120      	bne.n	1b620 <tls_interface_setopt+0x50>
   1b5de:	4698      	mov	r8, r3
   1b5e0:	4617      	mov	r7, r2
   1b5e2:	4605      	mov	r5, r0
   1b5e4:	2b00      	cmp	r3, #0
   1b5e6:	f000 80a0 	beq.w	1b72a <tls_interface_setopt+0x15a>
   1b5ea:	f006 fad1 	bl	21b90 <interface_socket_from_handle_get>
   1b5ee:	2800      	cmp	r0, #0
   1b5f0:	f000 8097 	beq.w	1b722 <tls_interface_setopt+0x152>
   1b5f4:	6804      	ldr	r4, [r0, #0]
   1b5f6:	b2a4      	uxth	r4, r4
   1b5f8:	2c02      	cmp	r4, #2
   1b5fa:	d008      	beq.n	1b60e <tls_interface_setopt+0x3e>
   1b5fc:	6803      	ldr	r3, [r0, #0]
   1b5fe:	b29b      	uxth	r3, r3
   1b600:	2b04      	cmp	r3, #4
   1b602:	d004      	beq.n	1b60e <tls_interface_setopt+0x3e>
   1b604:	6803      	ldr	r3, [r0, #0]
   1b606:	b29b      	uxth	r3, r3
   1b608:	2b05      	cmp	r3, #5
   1b60a:	f040 808a 	bne.w	1b722 <tls_interface_setopt+0x152>
   1b60e:	1e7a      	subs	r2, r7, #1
   1b610:	2a05      	cmp	r2, #5
   1b612:	f200 8090 	bhi.w	1b736 <tls_interface_setopt+0x166>
   1b616:	e8df f002 	tbb	[pc, r2]
   1b61a:	2718      	.short	0x2718
   1b61c:	08594b3c 	.word	0x08594b3c
   1b620:	b002      	add	sp, #8
   1b622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b626:	f001 ba6b 	b.w	1cb00 <ip_interface_setopt>
   1b62a:	4601      	mov	r1, r0
   1b62c:	e9cd 8600 	strd	r8, r6, [sp]
   1b630:	4628      	mov	r0, r5
   1b632:	f247 0301 	movw	r3, #28673	; 0x7001
   1b636:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b63a:	f000 ff8b 	bl	1c554 <ip_interface_socketoption_send>
   1b63e:	2800      	cmp	r0, #0
   1b640:	d161      	bne.n	1b706 <tls_interface_setopt+0x136>
   1b642:	2000      	movs	r0, #0
   1b644:	b002      	add	sp, #8
   1b646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b64a:	2e04      	cmp	r6, #4
   1b64c:	d15a      	bne.n	1b704 <tls_interface_setopt+0x134>
   1b64e:	f8d8 0000 	ldr.w	r0, [r8]
   1b652:	2800      	cmp	r0, #0
   1b654:	d05e      	beq.n	1b714 <tls_interface_setopt+0x144>
   1b656:	2801      	cmp	r0, #1
   1b658:	d154      	bne.n	1b704 <tls_interface_setopt+0x134>
   1b65a:	4b38      	ldr	r3, [pc, #224]	; (1b73c <tls_interface_setopt+0x16c>)
   1b65c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b660:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   1b664:	2000      	movs	r0, #0
   1b666:	e7ed      	b.n	1b644 <tls_interface_setopt+0x74>
   1b668:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   1b66c:	d04a      	beq.n	1b704 <tls_interface_setopt+0x134>
   1b66e:	f016 0703 	ands.w	r7, r6, #3
   1b672:	d147      	bne.n	1b704 <tls_interface_setopt+0x134>
   1b674:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b678:	00a4      	lsls	r4, r4, #2
   1b67a:	4b30      	ldr	r3, [pc, #192]	; (1b73c <tls_interface_setopt+0x16c>)
   1b67c:	1d20      	adds	r0, r4, #4
   1b67e:	4418      	add	r0, r3
   1b680:	4423      	add	r3, r4
   1b682:	4632      	mov	r2, r6
   1b684:	4641      	mov	r1, r8
   1b686:	f883 c003 	strb.w	ip, [r3, #3]
   1b68a:	f7f1 fa5f 	bl	cb4c <memcpy>
   1b68e:	4638      	mov	r0, r7
   1b690:	e7d8      	b.n	1b644 <tls_interface_setopt+0x74>
   1b692:	2e01      	cmp	r6, #1
   1b694:	d136      	bne.n	1b704 <tls_interface_setopt+0x134>
   1b696:	f898 2000 	ldrb.w	r2, [r8]
   1b69a:	4b28      	ldr	r3, [pc, #160]	; (1b73c <tls_interface_setopt+0x16c>)
   1b69c:	3200      	adds	r2, #0
   1b69e:	bf18      	it	ne
   1b6a0:	2201      	movne	r2, #1
   1b6a2:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b6a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1b6aa:	7062      	strb	r2, [r4, #1]
   1b6ac:	2000      	movs	r0, #0
   1b6ae:	e7c9      	b.n	1b644 <tls_interface_setopt+0x74>
   1b6b0:	2e04      	cmp	r6, #4
   1b6b2:	d127      	bne.n	1b704 <tls_interface_setopt+0x134>
   1b6b4:	f8d8 2000 	ldr.w	r2, [r8]
   1b6b8:	2a02      	cmp	r2, #2
   1b6ba:	d823      	bhi.n	1b704 <tls_interface_setopt+0x134>
   1b6bc:	4b1f      	ldr	r3, [pc, #124]	; (1b73c <tls_interface_setopt+0x16c>)
   1b6be:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b6c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1b6c6:	70a2      	strb	r2, [r4, #2]
   1b6c8:	2000      	movs	r0, #0
   1b6ca:	e7bb      	b.n	1b644 <tls_interface_setopt+0x74>
   1b6cc:	4c1c      	ldr	r4, [pc, #112]	; (1b740 <tls_interface_setopt+0x170>)
   1b6ce:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   1b6d2:	b138      	cbz	r0, 1b6e4 <tls_interface_setopt+0x114>
   1b6d4:	f005 fd5e 	bl	21194 <nrf_free>
   1b6d8:	2200      	movs	r2, #0
   1b6da:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1b6de:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   1b6e2:	605a      	str	r2, [r3, #4]
   1b6e4:	2e00      	cmp	r6, #0
   1b6e6:	d0ac      	beq.n	1b642 <tls_interface_setopt+0x72>
   1b6e8:	4630      	mov	r0, r6
   1b6ea:	f005 fd49 	bl	21180 <nrf_malloc>
   1b6ee:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   1b6f2:	b1c0      	cbz	r0, 1b726 <tls_interface_setopt+0x156>
   1b6f4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1b6f8:	4632      	mov	r2, r6
   1b6fa:	4641      	mov	r1, r8
   1b6fc:	6066      	str	r6, [r4, #4]
   1b6fe:	f7f1 fa25 	bl	cb4c <memcpy>
   1b702:	e79e      	b.n	1b642 <tls_interface_setopt+0x72>
   1b704:	2016      	movs	r0, #22
   1b706:	f7fb fa97 	bl	16c38 <bsd_os_errno_set>
   1b70a:	f04f 30ff 	mov.w	r0, #4294967295
   1b70e:	b002      	add	sp, #8
   1b710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b714:	2202      	movs	r2, #2
   1b716:	4b09      	ldr	r3, [pc, #36]	; (1b73c <tls_interface_setopt+0x16c>)
   1b718:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b71c:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   1b720:	e790      	b.n	1b644 <tls_interface_setopt+0x74>
   1b722:	2009      	movs	r0, #9
   1b724:	e7ef      	b.n	1b706 <tls_interface_setopt+0x136>
   1b726:	200c      	movs	r0, #12
   1b728:	e7ed      	b.n	1b706 <tls_interface_setopt+0x136>
   1b72a:	200e      	movs	r0, #14
   1b72c:	f7fb fa84 	bl	16c38 <bsd_os_errno_set>
   1b730:	f04f 30ff 	mov.w	r0, #4294967295
   1b734:	e786      	b.n	1b644 <tls_interface_setopt+0x74>
   1b736:	202a      	movs	r0, #42	; 0x2a
   1b738:	e7e5      	b.n	1b706 <tls_interface_setopt+0x136>
   1b73a:	bf00      	nop
   1b73c:	20021868 	.word	0x20021868
   1b740:	200219ac 	.word	0x200219ac

0001b744 <tls_interface_getopt>:
   1b744:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b746:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b74a:	b083      	sub	sp, #12
   1b74c:	9f08      	ldr	r7, [sp, #32]
   1b74e:	d112      	bne.n	1b776 <tls_interface_getopt+0x32>
   1b750:	461d      	mov	r5, r3
   1b752:	b16b      	cbz	r3, 1b770 <tls_interface_getopt+0x2c>
   1b754:	b167      	cbz	r7, 1b770 <tls_interface_getopt+0x2c>
   1b756:	4606      	mov	r6, r0
   1b758:	4614      	mov	r4, r2
   1b75a:	f006 fa19 	bl	21b90 <interface_socket_from_handle_get>
   1b75e:	b178      	cbz	r0, 1b780 <tls_interface_getopt+0x3c>
   1b760:	3c01      	subs	r4, #1
   1b762:	2c05      	cmp	r4, #5
   1b764:	d859      	bhi.n	1b81a <tls_interface_getopt+0xd6>
   1b766:	e8df f004 	tbb	[pc, r4]
   1b76a:	2818      	.short	0x2818
   1b76c:	0d584c40 	.word	0x0d584c40
   1b770:	200e      	movs	r0, #14
   1b772:	b003      	add	sp, #12
   1b774:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b776:	b003      	add	sp, #12
   1b778:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b77c:	f001 ba62 	b.w	1cc44 <ip_interface_getopt>
   1b780:	2009      	movs	r0, #9
   1b782:	e7f6      	b.n	1b772 <tls_interface_getopt+0x2e>
   1b784:	4601      	mov	r1, r0
   1b786:	e9cd 5700 	strd	r5, r7, [sp]
   1b78a:	4630      	mov	r0, r6
   1b78c:	f247 0301 	movw	r3, #28673	; 0x7001
   1b790:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b794:	f000 fe2e 	bl	1c3f4 <ip_interface_socketoption_get>
   1b798:	e7eb      	b.n	1b772 <tls_interface_getopt+0x2e>
   1b79a:	683b      	ldr	r3, [r7, #0]
   1b79c:	2b04      	cmp	r3, #4
   1b79e:	d13e      	bne.n	1b81e <tls_interface_getopt+0xda>
   1b7a0:	4b22      	ldr	r3, [pc, #136]	; (1b82c <tls_interface_getopt+0xe8>)
   1b7a2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b7a6:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   1b7aa:	2000      	movs	r0, #0
   1b7ac:	f1a3 0301 	sub.w	r3, r3, #1
   1b7b0:	fab3 f383 	clz	r3, r3
   1b7b4:	095b      	lsrs	r3, r3, #5
   1b7b6:	602b      	str	r3, [r5, #0]
   1b7b8:	e7db      	b.n	1b772 <tls_interface_getopt+0x2e>
   1b7ba:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b7be:	491b      	ldr	r1, [pc, #108]	; (1b82c <tls_interface_getopt+0xe8>)
   1b7c0:	683b      	ldr	r3, [r7, #0]
   1b7c2:	00b6      	lsls	r6, r6, #2
   1b7c4:	198a      	adds	r2, r1, r6
   1b7c6:	f013 0403 	ands.w	r4, r3, #3
   1b7ca:	78d0      	ldrb	r0, [r2, #3]
   1b7cc:	d129      	bne.n	1b822 <tls_interface_getopt+0xde>
   1b7ce:	089b      	lsrs	r3, r3, #2
   1b7d0:	4283      	cmp	r3, r0
   1b7d2:	bf28      	it	cs
   1b7d4:	4603      	movcs	r3, r0
   1b7d6:	009a      	lsls	r2, r3, #2
   1b7d8:	b31b      	cbz	r3, 1b822 <tls_interface_getopt+0xde>
   1b7da:	3604      	adds	r6, #4
   1b7dc:	4431      	add	r1, r6
   1b7de:	603a      	str	r2, [r7, #0]
   1b7e0:	4628      	mov	r0, r5
   1b7e2:	f7f1 f9b3 	bl	cb4c <memcpy>
   1b7e6:	4620      	mov	r0, r4
   1b7e8:	e7c3      	b.n	1b772 <tls_interface_getopt+0x2e>
   1b7ea:	683b      	ldr	r3, [r7, #0]
   1b7ec:	2b01      	cmp	r3, #1
   1b7ee:	d116      	bne.n	1b81e <tls_interface_getopt+0xda>
   1b7f0:	4b0e      	ldr	r3, [pc, #56]	; (1b82c <tls_interface_getopt+0xe8>)
   1b7f2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b7f6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1b7fa:	7873      	ldrb	r3, [r6, #1]
   1b7fc:	2000      	movs	r0, #0
   1b7fe:	702b      	strb	r3, [r5, #0]
   1b800:	e7b7      	b.n	1b772 <tls_interface_getopt+0x2e>
   1b802:	683b      	ldr	r3, [r7, #0]
   1b804:	2b04      	cmp	r3, #4
   1b806:	d10a      	bne.n	1b81e <tls_interface_getopt+0xda>
   1b808:	4b08      	ldr	r3, [pc, #32]	; (1b82c <tls_interface_getopt+0xe8>)
   1b80a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b80e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1b812:	78b3      	ldrb	r3, [r6, #2]
   1b814:	2000      	movs	r0, #0
   1b816:	602b      	str	r3, [r5, #0]
   1b818:	e7ab      	b.n	1b772 <tls_interface_getopt+0x2e>
   1b81a:	202a      	movs	r0, #42	; 0x2a
   1b81c:	e7a9      	b.n	1b772 <tls_interface_getopt+0x2e>
   1b81e:	2016      	movs	r0, #22
   1b820:	e7a7      	b.n	1b772 <tls_interface_getopt+0x2e>
   1b822:	2800      	cmp	r0, #0
   1b824:	d1fb      	bne.n	1b81e <tls_interface_getopt+0xda>
   1b826:	6038      	str	r0, [r7, #0]
   1b828:	e7a3      	b.n	1b772 <tls_interface_getopt+0x2e>
   1b82a:	bf00      	nop
   1b82c:	20021868 	.word	0x20021868

0001b830 <tls_rpc_ip_event_handler>:
   1b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b832:	f248 0581 	movw	r5, #32897	; 0x8081
   1b836:	42ab      	cmp	r3, r5
   1b838:	460c      	mov	r4, r1
   1b83a:	d044      	beq.n	1b8c6 <tls_rpc_ip_event_handler+0x96>
   1b83c:	f249 0182 	movw	r1, #36994	; 0x9082
   1b840:	428b      	cmp	r3, r1
   1b842:	4606      	mov	r6, r0
   1b844:	d02d      	beq.n	1b8a2 <tls_rpc_ip_event_handler+0x72>
   1b846:	f248 0102 	movw	r1, #32770	; 0x8002
   1b84a:	428b      	cmp	r3, r1
   1b84c:	d001      	beq.n	1b852 <tls_rpc_ip_event_handler+0x22>
   1b84e:	2001      	movs	r0, #1
   1b850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b852:	2c00      	cmp	r4, #0
   1b854:	d0fb      	beq.n	1b84e <tls_rpc_ip_event_handler+0x1e>
   1b856:	6963      	ldr	r3, [r4, #20]
   1b858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1b85c:	d002      	beq.n	1b864 <tls_rpc_ip_event_handler+0x34>
   1b85e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1b862:	d1f4      	bne.n	1b84e <tls_rpc_ip_event_handler+0x1e>
   1b864:	6823      	ldr	r3, [r4, #0]
   1b866:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b86a:	6023      	str	r3, [r4, #0]
   1b86c:	6955      	ldr	r5, [r2, #20]
   1b86e:	bb05      	cbnz	r5, 1b8b2 <tls_rpc_ip_event_handler+0x82>
   1b870:	6823      	ldr	r3, [r4, #0]
   1b872:	0c1b      	lsrs	r3, r3, #16
   1b874:	041b      	lsls	r3, r3, #16
   1b876:	f043 0305 	orr.w	r3, r3, #5
   1b87a:	6023      	str	r3, [r4, #0]
   1b87c:	6823      	ldr	r3, [r4, #0]
   1b87e:	00db      	lsls	r3, r3, #3
   1b880:	d50d      	bpl.n	1b89e <tls_rpc_ip_event_handler+0x6e>
   1b882:	4b2a      	ldr	r3, [pc, #168]	; (1b92c <tls_rpc_ip_event_handler+0xfc>)
   1b884:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   1b888:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b88c:	2b02      	cmp	r3, #2
   1b88e:	d106      	bne.n	1b89e <tls_rpc_ip_event_handler+0x6e>
   1b890:	4630      	mov	r0, r6
   1b892:	4621      	mov	r1, r4
   1b894:	f7ff fb16 	bl	1aec4 <secure_client_socket>
   1b898:	b108      	cbz	r0, 1b89e <tls_rpc_ip_event_handler+0x6e>
   1b89a:	2873      	cmp	r0, #115	; 0x73
   1b89c:	d10c      	bne.n	1b8b8 <tls_rpc_ip_event_handler+0x88>
   1b89e:	2000      	movs	r0, #0
   1b8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8a2:	2c00      	cmp	r4, #0
   1b8a4:	d0fb      	beq.n	1b89e <tls_rpc_ip_event_handler+0x6e>
   1b8a6:	6823      	ldr	r3, [r4, #0]
   1b8a8:	b29b      	uxth	r3, r3
   1b8aa:	2b0b      	cmp	r3, #11
   1b8ac:	d1f7      	bne.n	1b89e <tls_rpc_ip_event_handler+0x6e>
   1b8ae:	6915      	ldr	r5, [r2, #16]
   1b8b0:	b1cd      	cbz	r5, 1b8e6 <tls_rpc_ip_event_handler+0xb6>
   1b8b2:	4628      	mov	r0, r5
   1b8b4:	f000 f890 	bl	1b9d8 <rpc_error_to_nrf_bsd_error>
   1b8b8:	6060      	str	r0, [r4, #4]
   1b8ba:	6823      	ldr	r3, [r4, #0]
   1b8bc:	2000      	movs	r0, #0
   1b8be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b8c2:	6023      	str	r3, [r4, #0]
   1b8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8c6:	2900      	cmp	r1, #0
   1b8c8:	d0e9      	beq.n	1b89e <tls_rpc_ip_event_handler+0x6e>
   1b8ca:	680b      	ldr	r3, [r1, #0]
   1b8cc:	b29b      	uxth	r3, r3
   1b8ce:	2b0a      	cmp	r3, #10
   1b8d0:	d1e5      	bne.n	1b89e <tls_rpc_ip_event_handler+0x6e>
   1b8d2:	6950      	ldr	r0, [r2, #20]
   1b8d4:	2800      	cmp	r0, #0
   1b8d6:	d1ed      	bne.n	1b8b4 <tls_rpc_ip_event_handler+0x84>
   1b8d8:	680b      	ldr	r3, [r1, #0]
   1b8da:	0c1b      	lsrs	r3, r3, #16
   1b8dc:	041b      	lsls	r3, r3, #16
   1b8de:	f043 030b 	orr.w	r3, r3, #11
   1b8e2:	600b      	str	r3, [r1, #0]
   1b8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8e6:	6823      	ldr	r3, [r4, #0]
   1b8e8:	4f11      	ldr	r7, [pc, #68]	; (1b930 <tls_rpc_ip_event_handler+0x100>)
   1b8ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1b8ee:	6023      	str	r3, [r4, #0]
   1b8f0:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   1b8f4:	b130      	cbz	r0, 1b904 <tls_rpc_ip_event_handler+0xd4>
   1b8f6:	f005 fc4d 	bl	21194 <nrf_free>
   1b8fa:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1b8fe:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   1b902:	605d      	str	r5, [r3, #4]
   1b904:	6823      	ldr	r3, [r4, #0]
   1b906:	2000      	movs	r0, #0
   1b908:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1b90c:	6023      	str	r3, [r4, #0]
   1b90e:	6823      	ldr	r3, [r4, #0]
   1b910:	0c1b      	lsrs	r3, r3, #16
   1b912:	041b      	lsls	r3, r3, #16
   1b914:	f043 030c 	orr.w	r3, r3, #12
   1b918:	6023      	str	r3, [r4, #0]
   1b91a:	6823      	ldr	r3, [r4, #0]
   1b91c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b920:	6023      	str	r3, [r4, #0]
   1b922:	6823      	ldr	r3, [r4, #0]
   1b924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b928:	6023      	str	r3, [r4, #0]
   1b92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b92c:	20021868 	.word	0x20021868
   1b930:	200219ac 	.word	0x200219ac

0001b934 <ip_client_event_handler>:
   1b934:	f850 1b08 	ldr.w	r1, [r0], #8
   1b938:	0c09      	lsrs	r1, r1, #16
   1b93a:	f001 bb23 	b.w	1cf84 <rpc_ip_event_handler>
   1b93e:	bf00      	nop

0001b940 <rpc_ip_client_init>:
   1b940:	4801      	ldr	r0, [pc, #4]	; (1b948 <rpc_ip_client_init+0x8>)
   1b942:	f001 be21 	b.w	1d588 <rpc_client_register>
   1b946:	bf00      	nop
   1b948:	0002f060 	.word	0x0002f060

0001b94c <rpc_ip_client_request_alloc>:
   1b94c:	2300      	movs	r3, #0
   1b94e:	b510      	push	{r4, lr}
   1b950:	b082      	sub	sp, #8
   1b952:	9301      	str	r3, [sp, #4]
   1b954:	b158      	cbz	r0, 1b96e <rpc_ip_client_request_alloc+0x22>
   1b956:	4604      	mov	r4, r0
   1b958:	aa01      	add	r2, sp, #4
   1b95a:	2004      	movs	r0, #4
   1b95c:	f001 fe8e 	bl	1d67c <rpc_message_alloc>
   1b960:	b918      	cbnz	r0, 1b96a <rpc_ip_client_request_alloc+0x1e>
   1b962:	9b01      	ldr	r3, [sp, #4]
   1b964:	b10b      	cbz	r3, 1b96a <rpc_ip_client_request_alloc+0x1e>
   1b966:	3308      	adds	r3, #8
   1b968:	6023      	str	r3, [r4, #0]
   1b96a:	b002      	add	sp, #8
   1b96c:	bd10      	pop	{r4, pc}
   1b96e:	2007      	movs	r0, #7
   1b970:	b002      	add	sp, #8
   1b972:	bd10      	pop	{r4, pc}

0001b974 <rpc_ip_client_request_send>:
   1b974:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1b978:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1b97c:	d10b      	bne.n	1b996 <rpc_ip_client_request_send+0x22>
   1b97e:	b160      	cbz	r0, 1b99a <rpc_ip_client_request_send+0x26>
   1b980:	4603      	mov	r3, r0
   1b982:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1b986:	2004      	movs	r0, #4
   1b988:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1b98c:	f843 1d08 	str.w	r1, [r3, #-8]!
   1b990:	4619      	mov	r1, r3
   1b992:	f001 be63 	b.w	1d65c <rpc_message_send>
   1b996:	200f      	movs	r0, #15
   1b998:	4770      	bx	lr
   1b99a:	2007      	movs	r0, #7
   1b99c:	4770      	bx	lr
   1b99e:	bf00      	nop

0001b9a0 <rpc_ip_client_message_free>:
   1b9a0:	b120      	cbz	r0, 1b9ac <rpc_ip_client_message_free+0xc>
   1b9a2:	f1a0 0108 	sub.w	r1, r0, #8
   1b9a6:	2004      	movs	r0, #4
   1b9a8:	f001 be94 	b.w	1d6d4 <rpc_message_free>
   1b9ac:	2007      	movs	r0, #7
   1b9ae:	4770      	bx	lr

0001b9b0 <rpc_ip_client_data_free>:
   1b9b0:	b118      	cbz	r0, 1b9ba <rpc_ip_client_data_free+0xa>
   1b9b2:	4601      	mov	r1, r0
   1b9b4:	2004      	movs	r0, #4
   1b9b6:	f001 be99 	b.w	1d6ec <rpc_message_data_free>
   1b9ba:	2007      	movs	r0, #7
   1b9bc:	4770      	bx	lr
   1b9be:	bf00      	nop

0001b9c0 <ip_recvd_packet_free_cb>:
   1b9c0:	b510      	push	{r4, lr}
   1b9c2:	4604      	mov	r4, r0
   1b9c4:	6800      	ldr	r0, [r0, #0]
   1b9c6:	f7ff fff3 	bl	1b9b0 <rpc_ip_client_data_free>
   1b9ca:	68a0      	ldr	r0, [r4, #8]
   1b9cc:	b118      	cbz	r0, 1b9d6 <ip_recvd_packet_free_cb+0x16>
   1b9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b9d2:	f005 bbdf 	b.w	21194 <nrf_free>
   1b9d6:	bd10      	pop	{r4, pc}

0001b9d8 <rpc_error_to_nrf_bsd_error>:
   1b9d8:	2810      	cmp	r0, #16
   1b9da:	bf9a      	itte	ls
   1b9dc:	4b02      	ldrls	r3, [pc, #8]	; (1b9e8 <rpc_error_to_nrf_bsd_error+0x10>)
   1b9de:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1b9e2:	202d      	movhi	r0, #45	; 0x2d
   1b9e4:	4770      	bx	lr
   1b9e6:	bf00      	nop
   1b9e8:	0002f070 	.word	0x0002f070

0001b9ec <ip_interface_request_create>:
   1b9ec:	b570      	push	{r4, r5, r6, lr}
   1b9ee:	2500      	movs	r5, #0
   1b9f0:	b082      	sub	sp, #8
   1b9f2:	ac02      	add	r4, sp, #8
   1b9f4:	f844 5d04 	str.w	r5, [r4, #-4]!
   1b9f8:	4606      	mov	r6, r0
   1b9fa:	460d      	mov	r5, r1
   1b9fc:	4620      	mov	r0, r4
   1b9fe:	4619      	mov	r1, r3
   1ba00:	4614      	mov	r4, r2
   1ba02:	f7ff ffa3 	bl	1b94c <rpc_ip_client_request_alloc>
   1ba06:	b960      	cbnz	r0, 1ba22 <ip_interface_request_create+0x36>
   1ba08:	9b01      	ldr	r3, [sp, #4]
   1ba0a:	2208      	movs	r2, #8
   1ba0c:	7258      	strb	r0, [r3, #9]
   1ba0e:	7298      	strb	r0, [r3, #10]
   1ba10:	72d8      	strb	r0, [r3, #11]
   1ba12:	4618      	mov	r0, r3
   1ba14:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1ba18:	60dc      	str	r4, [r3, #12]
   1ba1a:	611d      	str	r5, [r3, #16]
   1ba1c:	721a      	strb	r2, [r3, #8]
   1ba1e:	b002      	add	sp, #8
   1ba20:	bd70      	pop	{r4, r5, r6, pc}
   1ba22:	9b01      	ldr	r3, [sp, #4]
   1ba24:	4618      	mov	r0, r3
   1ba26:	b002      	add	sp, #8
   1ba28:	bd70      	pop	{r4, r5, r6, pc}
   1ba2a:	bf00      	nop

0001ba2c <ip_interface_request_send>:
   1ba2c:	b570      	push	{r4, r5, r6, lr}
   1ba2e:	460c      	mov	r4, r1
   1ba30:	4605      	mov	r5, r0
   1ba32:	4611      	mov	r1, r2
   1ba34:	4620      	mov	r0, r4
   1ba36:	461e      	mov	r6, r3
   1ba38:	f7ff ff9c 	bl	1b974 <rpc_ip_client_request_send>
   1ba3c:	b900      	cbnz	r0, 1ba40 <ip_interface_request_send+0x14>
   1ba3e:	bd70      	pop	{r4, r5, r6, pc}
   1ba40:	6820      	ldr	r0, [r4, #0]
   1ba42:	b108      	cbz	r0, 1ba48 <ip_interface_request_send+0x1c>
   1ba44:	f7ff ffb4 	bl	1b9b0 <rpc_ip_client_data_free>
   1ba48:	4620      	mov	r0, r4
   1ba4a:	f7ff ffa9 	bl	1b9a0 <rpc_ip_client_message_free>
   1ba4e:	602e      	str	r6, [r5, #0]
   1ba50:	2023      	movs	r0, #35	; 0x23
   1ba52:	bd70      	pop	{r4, r5, r6, pc}

0001ba54 <ip_interface_wait>:
   1ba54:	b538      	push	{r3, r4, r5, lr}
   1ba56:	4605      	mov	r5, r0
   1ba58:	f006 f826 	bl	21aa8 <interface_socket_wait>
   1ba5c:	4604      	mov	r4, r0
   1ba5e:	b108      	cbz	r0, 1ba64 <ip_interface_wait+0x10>
   1ba60:	4620      	mov	r0, r4
   1ba62:	bd38      	pop	{r3, r4, r5, pc}
   1ba64:	4628      	mov	r0, r5
   1ba66:	f006 f893 	bl	21b90 <interface_socket_from_handle_get>
   1ba6a:	2800      	cmp	r0, #0
   1ba6c:	d0f8      	beq.n	1ba60 <ip_interface_wait+0xc>
   1ba6e:	6844      	ldr	r4, [r0, #4]
   1ba70:	2c00      	cmp	r4, #0
   1ba72:	d0f5      	beq.n	1ba60 <ip_interface_wait+0xc>
   1ba74:	2300      	movs	r3, #0
   1ba76:	6043      	str	r3, [r0, #4]
   1ba78:	4620      	mov	r0, r4
   1ba7a:	bd38      	pop	{r3, r4, r5, pc}

0001ba7c <ip_interface_init>:
   1ba7c:	b538      	push	{r3, r4, r5, lr}
   1ba7e:	2300      	movs	r3, #0
   1ba80:	4d09      	ldr	r5, [pc, #36]	; (1baa8 <ip_interface_init+0x2c>)
   1ba82:	4c0a      	ldr	r4, [pc, #40]	; (1baac <ip_interface_init+0x30>)
   1ba84:	4619      	mov	r1, r3
   1ba86:	2224      	movs	r2, #36	; 0x24
   1ba88:	4809      	ldr	r0, [pc, #36]	; (1bab0 <ip_interface_init+0x34>)
   1ba8a:	602b      	str	r3, [r5, #0]
   1ba8c:	6023      	str	r3, [r4, #0]
   1ba8e:	f00a fa99 	bl	25fc4 <memset>
   1ba92:	f7ff ff55 	bl	1b940 <rpc_ip_client_init>
   1ba96:	b918      	cbnz	r0, 1baa0 <ip_interface_init+0x24>
   1ba98:	2201      	movs	r2, #1
   1ba9a:	4b06      	ldr	r3, [pc, #24]	; (1bab4 <ip_interface_init+0x38>)
   1ba9c:	701a      	strb	r2, [r3, #0]
   1ba9e:	bd38      	pop	{r3, r4, r5, pc}
   1baa0:	f04f 30ff 	mov.w	r0, #4294967295
   1baa4:	bd38      	pop	{r3, r4, r5, pc}
   1baa6:	bf00      	nop
   1baa8:	200219fc 	.word	0x200219fc
   1baac:	200219f8 	.word	0x200219f8
   1bab0:	20021a00 	.word	0x20021a00
   1bab4:	2002628e 	.word	0x2002628e

0001bab8 <ip_interface_open>:
   1bab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1babc:	2500      	movs	r5, #0
   1babe:	f04f 37ff 	mov.w	r7, #4294967295
   1bac2:	4c5e      	ldr	r4, [pc, #376]	; (1bc3c <ip_interface_open+0x184>)
   1bac4:	4606      	mov	r6, r0
   1bac6:	7820      	ldrb	r0, [r4, #0]
   1bac8:	b084      	sub	sp, #16
   1baca:	e9cd 5701 	strd	r5, r7, [sp, #4]
   1bace:	2800      	cmp	r0, #0
   1bad0:	f000 80b0 	beq.w	1bc34 <ip_interface_open+0x17c>
   1bad4:	4690      	mov	r8, r2
   1bad6:	f026 0208 	bic.w	r2, r6, #8
   1bada:	2a02      	cmp	r2, #2
   1badc:	460c      	mov	r4, r1
   1bade:	d002      	beq.n	1bae6 <ip_interface_open+0x2e>
   1bae0:	2e05      	cmp	r6, #5
   1bae2:	f040 808d 	bne.w	1bc00 <ip_interface_open+0x148>
   1bae6:	1e63      	subs	r3, r4, #1
   1bae8:	2b02      	cmp	r3, #2
   1baea:	f200 809d 	bhi.w	1bc28 <ip_interface_open+0x170>
   1baee:	f1b8 0f00 	cmp.w	r8, #0
   1baf2:	d159      	bne.n	1bba8 <ip_interface_open+0xf0>
   1baf4:	2c01      	cmp	r4, #1
   1baf6:	d06f      	beq.n	1bbd8 <ip_interface_open+0x120>
   1baf8:	2c03      	cmp	r4, #3
   1bafa:	bf18      	it	ne
   1bafc:	f04f 0802 	movne.w	r8, #2
   1bb00:	4a4f      	ldr	r2, [pc, #316]	; (1bc40 <ip_interface_open+0x188>)
   1bb02:	4621      	mov	r1, r4
   1bb04:	a801      	add	r0, sp, #4
   1bb06:	f005 ff1d 	bl	21944 <interface_socket_allocate>
   1bb0a:	9b01      	ldr	r3, [sp, #4]
   1bb0c:	4607      	mov	r7, r0
   1bb0e:	2b00      	cmp	r3, #0
   1bb10:	d060      	beq.n	1bbd4 <ip_interface_open+0x11c>
   1bb12:	2100      	movs	r1, #0
   1bb14:	a804      	add	r0, sp, #16
   1bb16:	f840 1d04 	str.w	r1, [r0, #-4]!
   1bb1a:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1bb1e:	f8c3 8014 	str.w	r8, [r3, #20]
   1bb22:	f7ff ff13 	bl	1b94c <rpc_ip_client_request_alloc>
   1bb26:	2800      	cmp	r0, #0
   1bb28:	d151      	bne.n	1bbce <ip_interface_open+0x116>
   1bb2a:	f247 0201 	movw	r2, #28673	; 0x7001
   1bb2e:	f04f 33ff 	mov.w	r3, #4294967295
   1bb32:	2108      	movs	r1, #8
   1bb34:	9d03      	ldr	r5, [sp, #12]
   1bb36:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1bb3a:	60ea      	str	r2, [r5, #12]
   1bb3c:	7268      	strb	r0, [r5, #9]
   1bb3e:	72a8      	strb	r0, [r5, #10]
   1bb40:	72e8      	strb	r0, [r5, #11]
   1bb42:	7229      	strb	r1, [r5, #8]
   1bb44:	742b      	strb	r3, [r5, #16]
   1bb46:	746b      	strb	r3, [r5, #17]
   1bb48:	74ab      	strb	r3, [r5, #18]
   1bb4a:	74eb      	strb	r3, [r5, #19]
   1bb4c:	68ab      	ldr	r3, [r5, #8]
   1bb4e:	2e05      	cmp	r6, #5
   1bb50:	f103 030c 	add.w	r3, r3, #12
   1bb54:	60ab      	str	r3, [r5, #8]
   1bb56:	d003      	beq.n	1bb60 <ip_interface_open+0xa8>
   1bb58:	2e0a      	cmp	r6, #10
   1bb5a:	bf14      	ite	ne
   1bb5c:	2601      	movne	r6, #1
   1bb5e:	2602      	moveq	r6, #2
   1bb60:	616e      	str	r6, [r5, #20]
   1bb62:	f8c5 801c 	str.w	r8, [r5, #28]
   1bb66:	61ac      	str	r4, [r5, #24]
   1bb68:	f247 0101 	movw	r1, #28673	; 0x7001
   1bb6c:	4628      	mov	r0, r5
   1bb6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1bb72:	f7ff feff 	bl	1b974 <rpc_ip_client_request_send>
   1bb76:	4606      	mov	r6, r0
   1bb78:	b380      	cbz	r0, 1bbdc <ip_interface_open+0x124>
   1bb7a:	6828      	ldr	r0, [r5, #0]
   1bb7c:	b108      	cbz	r0, 1bb82 <ip_interface_open+0xca>
   1bb7e:	f7ff ff17 	bl	1b9b0 <rpc_ip_client_data_free>
   1bb82:	4628      	mov	r0, r5
   1bb84:	f7ff ff0c 	bl	1b9a0 <rpc_ip_client_message_free>
   1bb88:	2301      	movs	r3, #1
   1bb8a:	2523      	movs	r5, #35	; 0x23
   1bb8c:	f8c8 3000 	str.w	r3, [r8]
   1bb90:	4638      	mov	r0, r7
   1bb92:	f005 ff3b 	bl	21a0c <interface_socket_free>
   1bb96:	4628      	mov	r0, r5
   1bb98:	f7fb f84e 	bl	16c38 <bsd_os_errno_set>
   1bb9c:	f04f 37ff 	mov.w	r7, #4294967295
   1bba0:	4638      	mov	r0, r7
   1bba2:	b004      	add	sp, #16
   1bba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bba8:	2c01      	cmp	r4, #1
   1bbaa:	d00a      	beq.n	1bbc2 <ip_interface_open+0x10a>
   1bbac:	2c02      	cmp	r4, #2
   1bbae:	d10b      	bne.n	1bbc8 <ip_interface_open+0x110>
   1bbb0:	f1b8 0f02 	cmp.w	r8, #2
   1bbb4:	d0a4      	beq.n	1bb00 <ip_interface_open+0x48>
   1bbb6:	2029      	movs	r0, #41	; 0x29
   1bbb8:	f7fb f83e 	bl	16c38 <bsd_os_errno_set>
   1bbbc:	f04f 37ff 	mov.w	r7, #4294967295
   1bbc0:	e7ee      	b.n	1bba0 <ip_interface_open+0xe8>
   1bbc2:	f1b8 0f01 	cmp.w	r8, #1
   1bbc6:	d1f6      	bne.n	1bbb6 <ip_interface_open+0xfe>
   1bbc8:	f04f 0802 	mov.w	r8, #2
   1bbcc:	e798      	b.n	1bb00 <ip_interface_open+0x48>
   1bbce:	9d03      	ldr	r5, [sp, #12]
   1bbd0:	2d00      	cmp	r5, #0
   1bbd2:	d1bb      	bne.n	1bb4c <ip_interface_open+0x94>
   1bbd4:	2569      	movs	r5, #105	; 0x69
   1bbd6:	e7db      	b.n	1bb90 <ip_interface_open+0xd8>
   1bbd8:	46a0      	mov	r8, r4
   1bbda:	e791      	b.n	1bb00 <ip_interface_open+0x48>
   1bbdc:	ab02      	add	r3, sp, #8
   1bbde:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bbe2:	2102      	movs	r1, #2
   1bbe4:	4638      	mov	r0, r7
   1bbe6:	f005 ff5f 	bl	21aa8 <interface_socket_wait>
   1bbea:	4605      	mov	r5, r0
   1bbec:	2800      	cmp	r0, #0
   1bbee:	d1cf      	bne.n	1bb90 <ip_interface_open+0xd8>
   1bbf0:	4638      	mov	r0, r7
   1bbf2:	f005 ffcd 	bl	21b90 <interface_socket_from_handle_get>
   1bbf6:	b138      	cbz	r0, 1bc08 <ip_interface_open+0x150>
   1bbf8:	6845      	ldr	r5, [r0, #4]
   1bbfa:	b12d      	cbz	r5, 1bc08 <ip_interface_open+0x150>
   1bbfc:	6046      	str	r6, [r0, #4]
   1bbfe:	e7c7      	b.n	1bb90 <ip_interface_open+0xd8>
   1bc00:	202f      	movs	r0, #47	; 0x2f
   1bc02:	f7fb f819 	bl	16c38 <bsd_os_errno_set>
   1bc06:	e7cb      	b.n	1bba0 <ip_interface_open+0xe8>
   1bc08:	3c02      	subs	r4, #2
   1bc0a:	2c01      	cmp	r4, #1
   1bc0c:	d8c8      	bhi.n	1bba0 <ip_interface_open+0xe8>
   1bc0e:	4638      	mov	r0, r7
   1bc10:	9b01      	ldr	r3, [sp, #4]
   1bc12:	681a      	ldr	r2, [r3, #0]
   1bc14:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1bc18:	601a      	str	r2, [r3, #0]
   1bc1a:	681a      	ldr	r2, [r3, #0]
   1bc1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1bc20:	601a      	str	r2, [r3, #0]
   1bc22:	b004      	add	sp, #16
   1bc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc28:	2016      	movs	r0, #22
   1bc2a:	f7fb f805 	bl	16c38 <bsd_os_errno_set>
   1bc2e:	f04f 37ff 	mov.w	r7, #4294967295
   1bc32:	e7b5      	b.n	1bba0 <ip_interface_open+0xe8>
   1bc34:	2070      	movs	r0, #112	; 0x70
   1bc36:	f7fa ffff 	bl	16c38 <bsd_os_errno_set>
   1bc3a:	e7b1      	b.n	1bba0 <ip_interface_open+0xe8>
   1bc3c:	2002628e 	.word	0x2002628e
   1bc40:	0001b9c1 	.word	0x0001b9c1

0001bc44 <ip_interface_close>:
   1bc44:	f04f 33ff 	mov.w	r3, #4294967295
   1bc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc4c:	b082      	sub	sp, #8
   1bc4e:	4606      	mov	r6, r0
   1bc50:	9300      	str	r3, [sp, #0]
   1bc52:	f005 ff9d 	bl	21b90 <interface_socket_from_handle_get>
   1bc56:	2800      	cmp	r0, #0
   1bc58:	d062      	beq.n	1bd20 <ip_interface_close+0xdc>
   1bc5a:	4604      	mov	r4, r0
   1bc5c:	2100      	movs	r1, #0
   1bc5e:	a802      	add	r0, sp, #8
   1bc60:	6827      	ldr	r7, [r4, #0]
   1bc62:	f840 1d04 	str.w	r1, [r0, #-4]!
   1bc66:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1bc6a:	f7ff fe6f 	bl	1b94c <rpc_ip_client_request_alloc>
   1bc6e:	2800      	cmp	r0, #0
   1bc70:	d139      	bne.n	1bce6 <ip_interface_close+0xa2>
   1bc72:	f247 0309 	movw	r3, #28681	; 0x7009
   1bc76:	2208      	movs	r2, #8
   1bc78:	9d01      	ldr	r5, [sp, #4]
   1bc7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1bc7e:	60eb      	str	r3, [r5, #12]
   1bc80:	f8c5 8010 	str.w	r8, [r5, #16]
   1bc84:	7268      	strb	r0, [r5, #9]
   1bc86:	72a8      	strb	r0, [r5, #10]
   1bc88:	72e8      	strb	r0, [r5, #11]
   1bc8a:	722a      	strb	r2, [r5, #8]
   1bc8c:	6823      	ldr	r3, [r4, #0]
   1bc8e:	f247 0109 	movw	r1, #28681	; 0x7009
   1bc92:	0c1b      	lsrs	r3, r3, #16
   1bc94:	041b      	lsls	r3, r3, #16
   1bc96:	f043 030d 	orr.w	r3, r3, #13
   1bc9a:	6023      	str	r3, [r4, #0]
   1bc9c:	6823      	ldr	r3, [r4, #0]
   1bc9e:	4628      	mov	r0, r5
   1bca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bca4:	6023      	str	r3, [r4, #0]
   1bca6:	6823      	ldr	r3, [r4, #0]
   1bca8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1bcac:	6023      	str	r3, [r4, #0]
   1bcae:	f7ff fe61 	bl	1b974 <rpc_ip_client_request_send>
   1bcb2:	bb38      	cbnz	r0, 1bd04 <ip_interface_close+0xc0>
   1bcb4:	466b      	mov	r3, sp
   1bcb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bcba:	210e      	movs	r1, #14
   1bcbc:	4630      	mov	r0, r6
   1bcbe:	f005 fef3 	bl	21aa8 <interface_socket_wait>
   1bcc2:	4604      	mov	r4, r0
   1bcc4:	b1a0      	cbz	r0, 1bcf0 <ip_interface_close+0xac>
   1bcc6:	4c17      	ldr	r4, [pc, #92]	; (1bd24 <ip_interface_close+0xe0>)
   1bcc8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   1bccc:	b120      	cbz	r0, 1bcd8 <ip_interface_close+0x94>
   1bcce:	f7ff fe67 	bl	1b9a0 <rpc_ip_client_message_free>
   1bcd2:	2300      	movs	r3, #0
   1bcd4:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1bcd8:	4630      	mov	r0, r6
   1bcda:	f005 fe97 	bl	21a0c <interface_socket_free>
   1bcde:	2000      	movs	r0, #0
   1bce0:	b002      	add	sp, #8
   1bce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bce6:	9d01      	ldr	r5, [sp, #4]
   1bce8:	200c      	movs	r0, #12
   1bcea:	2d00      	cmp	r5, #0
   1bcec:	d1ce      	bne.n	1bc8c <ip_interface_close+0x48>
   1bcee:	e012      	b.n	1bd16 <ip_interface_close+0xd2>
   1bcf0:	4630      	mov	r0, r6
   1bcf2:	f005 ff4d 	bl	21b90 <interface_socket_from_handle_get>
   1bcf6:	2800      	cmp	r0, #0
   1bcf8:	d0e5      	beq.n	1bcc6 <ip_interface_close+0x82>
   1bcfa:	6843      	ldr	r3, [r0, #4]
   1bcfc:	2b00      	cmp	r3, #0
   1bcfe:	d0e2      	beq.n	1bcc6 <ip_interface_close+0x82>
   1bd00:	6044      	str	r4, [r0, #4]
   1bd02:	e7e0      	b.n	1bcc6 <ip_interface_close+0x82>
   1bd04:	6828      	ldr	r0, [r5, #0]
   1bd06:	b108      	cbz	r0, 1bd0c <ip_interface_close+0xc8>
   1bd08:	f7ff fe52 	bl	1b9b0 <rpc_ip_client_data_free>
   1bd0c:	4628      	mov	r0, r5
   1bd0e:	f7ff fe47 	bl	1b9a0 <rpc_ip_client_message_free>
   1bd12:	2023      	movs	r0, #35	; 0x23
   1bd14:	6027      	str	r7, [r4, #0]
   1bd16:	f7fa ff8f 	bl	16c38 <bsd_os_errno_set>
   1bd1a:	f04f 30ff 	mov.w	r0, #4294967295
   1bd1e:	e7df      	b.n	1bce0 <ip_interface_close+0x9c>
   1bd20:	2009      	movs	r0, #9
   1bd22:	e7f8      	b.n	1bd16 <ip_interface_close+0xd2>
   1bd24:	20021a00 	.word	0x20021a00

0001bd28 <ip_interface_sendto>:
   1bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd2c:	2400      	movs	r4, #0
   1bd2e:	b08b      	sub	sp, #44	; 0x2c
   1bd30:	9102      	str	r1, [sp, #8]
   1bd32:	4615      	mov	r5, r2
   1bd34:	4699      	mov	r9, r3
   1bd36:	9407      	str	r4, [sp, #28]
   1bd38:	4607      	mov	r7, r0
   1bd3a:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1bd3c:	f005 ff28 	bl	21b90 <interface_socket_from_handle_get>
   1bd40:	2800      	cmp	r0, #0
   1bd42:	f000 8163 	beq.w	1c00c <ip_interface_sendto+0x2e4>
   1bd46:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1bd4a:	f300 8150 	bgt.w	1bfee <ip_interface_sendto+0x2c6>
   1bd4e:	6903      	ldr	r3, [r0, #16]
   1bd50:	4604      	mov	r4, r0
   1bd52:	2b01      	cmp	r3, #1
   1bd54:	f000 8109 	beq.w	1bf6a <ip_interface_sendto+0x242>
   1bd58:	6822      	ldr	r2, [r4, #0]
   1bd5a:	0391      	lsls	r1, r2, #14
   1bd5c:	d569      	bpl.n	1be32 <ip_interface_sendto+0x10a>
   1bd5e:	f1b9 0f00 	cmp.w	r9, #0
   1bd62:	f000 8112 	beq.w	1bf8a <ip_interface_sendto+0x262>
   1bd66:	f019 0f02 	tst.w	r9, #2
   1bd6a:	f000 814a 	beq.w	1c002 <ip_interface_sendto+0x2da>
   1bd6e:	2300      	movs	r3, #0
   1bd70:	9303      	str	r3, [sp, #12]
   1bd72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bd74:	f247 0806 	movw	r8, #28678	; 0x7006
   1bd78:	2b00      	cmp	r3, #0
   1bd7a:	bf08      	it	eq
   1bd7c:	f04f 33ff 	moveq.w	r3, #4294967295
   1bd80:	f04f 0b0c 	mov.w	fp, #12
   1bd84:	4aa5      	ldr	r2, [pc, #660]	; (1c01c <ip_interface_sendto+0x2f4>)
   1bd86:	9308      	str	r3, [sp, #32]
   1bd88:	043b      	lsls	r3, r7, #16
   1bd8a:	9200      	str	r2, [sp, #0]
   1bd8c:	9304      	str	r3, [sp, #16]
   1bd8e:	4629      	mov	r1, r5
   1bd90:	a807      	add	r0, sp, #28
   1bd92:	f7ff fddb 	bl	1b94c <rpc_ip_client_request_alloc>
   1bd96:	2804      	cmp	r0, #4
   1bd98:	d05e      	beq.n	1be58 <ip_interface_sendto+0x130>
   1bd9a:	2800      	cmp	r0, #0
   1bd9c:	f040 813b 	bne.w	1c016 <ip_interface_sendto+0x2ee>
   1bda0:	9b07      	ldr	r3, [sp, #28]
   1bda2:	f883 b008 	strb.w	fp, [r3, #8]
   1bda6:	7258      	strb	r0, [r3, #9]
   1bda8:	7298      	strb	r0, [r3, #10]
   1bdaa:	72d8      	strb	r0, [r3, #11]
   1bdac:	2e00      	cmp	r6, #0
   1bdae:	d06b      	beq.n	1be88 <ip_interface_sendto+0x160>
   1bdb0:	68e2      	ldr	r2, [r4, #12]
   1bdb2:	6871      	ldr	r1, [r6, #4]
   1bdb4:	428a      	cmp	r2, r1
   1bdb6:	f040 80a8 	bne.w	1bf0a <ip_interface_sendto+0x1e2>
   1bdba:	7831      	ldrb	r1, [r6, #0]
   1bdbc:	9815      	ldr	r0, [sp, #84]	; 0x54
   1bdbe:	4288      	cmp	r0, r1
   1bdc0:	d10a      	bne.n	1bdd8 <ip_interface_sendto+0xb0>
   1bdc2:	2a02      	cmp	r2, #2
   1bdc4:	f103 001c 	add.w	r0, r3, #28
   1bdc8:	f000 80ff 	beq.w	1bfca <ip_interface_sendto+0x2a2>
   1bdcc:	2a0a      	cmp	r2, #10
   1bdce:	d103      	bne.n	1bdd8 <ip_interface_sendto+0xb0>
   1bdd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1bdd2:	2a24      	cmp	r2, #36	; 0x24
   1bdd4:	f000 80e6 	beq.w	1bfa4 <ip_interface_sendto+0x27c>
   1bdd8:	f04f 0a16 	mov.w	sl, #22
   1bddc:	6818      	ldr	r0, [r3, #0]
   1bdde:	b110      	cbz	r0, 1bde6 <ip_interface_sendto+0xbe>
   1bde0:	f7ff fde6 	bl	1b9b0 <rpc_ip_client_data_free>
   1bde4:	9b07      	ldr	r3, [sp, #28]
   1bde6:	4618      	mov	r0, r3
   1bde8:	f7ff fdda 	bl	1b9a0 <rpc_ip_client_message_free>
   1bdec:	6823      	ldr	r3, [r4, #0]
   1bdee:	0318      	lsls	r0, r3, #12
   1bdf0:	d40b      	bmi.n	1be0a <ip_interface_sendto+0xe2>
   1bdf2:	6823      	ldr	r3, [r4, #0]
   1bdf4:	b29b      	uxth	r3, r3
   1bdf6:	2b0d      	cmp	r3, #13
   1bdf8:	d007      	beq.n	1be0a <ip_interface_sendto+0xe2>
   1bdfa:	6823      	ldr	r3, [r4, #0]
   1bdfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1be00:	6023      	str	r3, [r4, #0]
   1be02:	6823      	ldr	r3, [r4, #0]
   1be04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1be08:	6023      	str	r3, [r4, #0]
   1be0a:	f1ba 0f00 	cmp.w	sl, #0
   1be0e:	f040 80b3 	bne.w	1bf78 <ip_interface_sendto+0x250>
   1be12:	6823      	ldr	r3, [r4, #0]
   1be14:	0119      	lsls	r1, r3, #4
   1be16:	d57b      	bpl.n	1bf10 <ip_interface_sendto+0x1e8>
   1be18:	6823      	ldr	r3, [r4, #0]
   1be1a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1be1e:	6023      	str	r3, [r4, #0]
   1be20:	9b00      	ldr	r3, [sp, #0]
   1be22:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1be26:	2800      	cmp	r0, #0
   1be28:	d176      	bne.n	1bf18 <ip_interface_sendto+0x1f0>
   1be2a:	4628      	mov	r0, r5
   1be2c:	b00b      	add	sp, #44	; 0x2c
   1be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be32:	6822      	ldr	r2, [r4, #0]
   1be34:	0092      	lsls	r2, r2, #2
   1be36:	d406      	bmi.n	1be46 <ip_interface_sendto+0x11e>
   1be38:	2b01      	cmp	r3, #1
   1be3a:	f000 80ad 	beq.w	1bf98 <ip_interface_sendto+0x270>
   1be3e:	6823      	ldr	r3, [r4, #0]
   1be40:	031b      	lsls	r3, r3, #12
   1be42:	f140 80cf 	bpl.w	1bfe4 <ip_interface_sendto+0x2bc>
   1be46:	6823      	ldr	r3, [r4, #0]
   1be48:	031e      	lsls	r6, r3, #12
   1be4a:	f140 80d5 	bpl.w	1bff8 <ip_interface_sendto+0x2d0>
   1be4e:	4b73      	ldr	r3, [pc, #460]	; (1c01c <ip_interface_sendto+0x2f4>)
   1be50:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1be54:	9300      	str	r3, [sp, #0]
   1be56:	e7d8      	b.n	1be0a <ip_interface_sendto+0xe2>
   1be58:	9b03      	ldr	r3, [sp, #12]
   1be5a:	2b00      	cmp	r3, #0
   1be5c:	d052      	beq.n	1bf04 <ip_interface_sendto+0x1dc>
   1be5e:	9b08      	ldr	r3, [sp, #32]
   1be60:	3301      	adds	r3, #1
   1be62:	d094      	beq.n	1bd8e <ip_interface_sendto+0x66>
   1be64:	230a      	movs	r3, #10
   1be66:	a90a      	add	r1, sp, #40	; 0x28
   1be68:	f841 3d04 	str.w	r3, [r1, #-4]!
   1be6c:	2000      	movs	r0, #0
   1be6e:	f7fa fe2b 	bl	16ac8 <bsd_os_timedwait>
   1be72:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   1be76:	f1c2 020a 	rsb	r2, r2, #10
   1be7a:	1a9b      	subs	r3, r3, r2
   1be7c:	2b00      	cmp	r3, #0
   1be7e:	9308      	str	r3, [sp, #32]
   1be80:	dc85      	bgt.n	1bd8e <ip_interface_sendto+0x66>
   1be82:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   1be86:	e7b1      	b.n	1bdec <ip_interface_sendto+0xc4>
   1be88:	4642      	mov	r2, r8
   1be8a:	f8c3 9014 	str.w	r9, [r3, #20]
   1be8e:	69a1      	ldr	r1, [r4, #24]
   1be90:	9804      	ldr	r0, [sp, #16]
   1be92:	6119      	str	r1, [r3, #16]
   1be94:	9902      	ldr	r1, [sp, #8]
   1be96:	4302      	orrs	r2, r0
   1be98:	60da      	str	r2, [r3, #12]
   1be9a:	605d      	str	r5, [r3, #4]
   1be9c:	b119      	cbz	r1, 1bea6 <ip_interface_sendto+0x17e>
   1be9e:	6818      	ldr	r0, [r3, #0]
   1bea0:	462a      	mov	r2, r5
   1bea2:	f7f0 fe53 	bl	cb4c <memcpy>
   1bea6:	6823      	ldr	r3, [r4, #0]
   1bea8:	4641      	mov	r1, r8
   1beaa:	9305      	str	r3, [sp, #20]
   1beac:	6823      	ldr	r3, [r4, #0]
   1beae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1beb2:	6023      	str	r3, [r4, #0]
   1beb4:	6823      	ldr	r3, [r4, #0]
   1beb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1beba:	6023      	str	r3, [r4, #0]
   1bebc:	9b07      	ldr	r3, [sp, #28]
   1bebe:	4618      	mov	r0, r3
   1bec0:	9301      	str	r3, [sp, #4]
   1bec2:	f7ff fd57 	bl	1b974 <rpc_ip_client_request_send>
   1bec6:	9b01      	ldr	r3, [sp, #4]
   1bec8:	4682      	mov	sl, r0
   1beca:	bb78      	cbnz	r0, 1bf2c <ip_interface_sendto+0x204>
   1becc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1bed0:	ab08      	add	r3, sp, #32
   1bed2:	4611      	mov	r1, r2
   1bed4:	4638      	mov	r0, r7
   1bed6:	f005 fde7 	bl	21aa8 <interface_socket_wait>
   1beda:	4603      	mov	r3, r0
   1bedc:	b398      	cbz	r0, 1bf46 <ip_interface_sendto+0x21e>
   1bede:	6822      	ldr	r2, [r4, #0]
   1bee0:	0312      	lsls	r2, r2, #12
   1bee2:	d43f      	bmi.n	1bf64 <ip_interface_sendto+0x23c>
   1bee4:	2b3c      	cmp	r3, #60	; 0x3c
   1bee6:	d001      	beq.n	1beec <ip_interface_sendto+0x1c4>
   1bee8:	2b0c      	cmp	r3, #12
   1beea:	d001      	beq.n	1bef0 <ip_interface_sendto+0x1c8>
   1beec:	469a      	mov	sl, r3
   1beee:	e77d      	b.n	1bdec <ip_interface_sendto+0xc4>
   1bef0:	9b00      	ldr	r3, [sp, #0]
   1bef2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bef6:	b108      	cbz	r0, 1befc <ip_interface_sendto+0x1d4>
   1bef8:	f7ff fd52 	bl	1b9a0 <rpc_ip_client_message_free>
   1befc:	9b03      	ldr	r3, [sp, #12]
   1befe:	2b00      	cmp	r3, #0
   1bf00:	f47f af45 	bne.w	1bd8e <ip_interface_sendto+0x66>
   1bf04:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1bf08:	e770      	b.n	1bdec <ip_interface_sendto+0xc4>
   1bf0a:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   1bf0e:	e765      	b.n	1bddc <ip_interface_sendto+0xb4>
   1bf10:	9b00      	ldr	r3, [sp, #0]
   1bf12:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bf16:	6985      	ldr	r5, [r0, #24]
   1bf18:	f7ff fd42 	bl	1b9a0 <rpc_ip_client_message_free>
   1bf1c:	2300      	movs	r3, #0
   1bf1e:	4628      	mov	r0, r5
   1bf20:	9a00      	ldr	r2, [sp, #0]
   1bf22:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   1bf26:	b00b      	add	sp, #44	; 0x2c
   1bf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf2c:	6818      	ldr	r0, [r3, #0]
   1bf2e:	469a      	mov	sl, r3
   1bf30:	b108      	cbz	r0, 1bf36 <ip_interface_sendto+0x20e>
   1bf32:	f7ff fd3d 	bl	1b9b0 <rpc_ip_client_data_free>
   1bf36:	4650      	mov	r0, sl
   1bf38:	f7ff fd32 	bl	1b9a0 <rpc_ip_client_message_free>
   1bf3c:	9b05      	ldr	r3, [sp, #20]
   1bf3e:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1bf42:	6023      	str	r3, [r4, #0]
   1bf44:	e752      	b.n	1bdec <ip_interface_sendto+0xc4>
   1bf46:	9001      	str	r0, [sp, #4]
   1bf48:	4638      	mov	r0, r7
   1bf4a:	f005 fe21 	bl	21b90 <interface_socket_from_handle_get>
   1bf4e:	9b01      	ldr	r3, [sp, #4]
   1bf50:	2800      	cmp	r0, #0
   1bf52:	d0cb      	beq.n	1beec <ip_interface_sendto+0x1c4>
   1bf54:	6843      	ldr	r3, [r0, #4]
   1bf56:	2b00      	cmp	r3, #0
   1bf58:	d0c8      	beq.n	1beec <ip_interface_sendto+0x1c4>
   1bf5a:	f8c0 a004 	str.w	sl, [r0, #4]
   1bf5e:	6822      	ldr	r2, [r4, #0]
   1bf60:	0312      	lsls	r2, r2, #12
   1bf62:	d5bf      	bpl.n	1bee4 <ip_interface_sendto+0x1bc>
   1bf64:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1bf68:	e740      	b.n	1bdec <ip_interface_sendto+0xc4>
   1bf6a:	2e00      	cmp	r6, #0
   1bf6c:	f43f aef4 	beq.w	1bd58 <ip_interface_sendto+0x30>
   1bf70:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1bf74:	4b29      	ldr	r3, [pc, #164]	; (1c01c <ip_interface_sendto+0x2f4>)
   1bf76:	9300      	str	r3, [sp, #0]
   1bf78:	4650      	mov	r0, sl
   1bf7a:	f7fa fe5d 	bl	16c38 <bsd_os_errno_set>
   1bf7e:	9b00      	ldr	r3, [sp, #0]
   1bf80:	f04f 35ff 	mov.w	r5, #4294967295
   1bf84:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bf88:	e74d      	b.n	1be26 <ip_interface_sendto+0xfe>
   1bf8a:	6823      	ldr	r3, [r4, #0]
   1bf8c:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   1bf90:	f3c3 7300 	ubfx	r3, r3, #28, #1
   1bf94:	9303      	str	r3, [sp, #12]
   1bf96:	e6ec      	b.n	1bd72 <ip_interface_sendto+0x4a>
   1bf98:	6823      	ldr	r3, [r4, #0]
   1bf9a:	b29b      	uxth	r3, r3
   1bf9c:	2b05      	cmp	r3, #5
   1bf9e:	f47f af52 	bne.w	1be46 <ip_interface_sendto+0x11e>
   1bfa2:	e74c      	b.n	1be3e <ip_interface_sendto+0x116>
   1bfa4:	2210      	movs	r2, #16
   1bfa6:	8931      	ldrh	r1, [r6, #8]
   1bfa8:	835a      	strh	r2, [r3, #26]
   1bfaa:	8319      	strh	r1, [r3, #24]
   1bfac:	18b1      	adds	r1, r6, r2
   1bfae:	f7f0 fdcd 	bl	cb4c <memcpy>
   1bfb2:	f247 0207 	movw	r2, #28679	; 0x7007
   1bfb6:	9b07      	ldr	r3, [sp, #28]
   1bfb8:	4690      	mov	r8, r2
   1bfba:	6899      	ldr	r1, [r3, #8]
   1bfbc:	8b58      	ldrh	r0, [r3, #26]
   1bfbe:	3104      	adds	r1, #4
   1bfc0:	4401      	add	r1, r0
   1bfc2:	f8c3 9014 	str.w	r9, [r3, #20]
   1bfc6:	6099      	str	r1, [r3, #8]
   1bfc8:	e761      	b.n	1be8e <ip_interface_sendto+0x166>
   1bfca:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1bfcc:	2a10      	cmp	r2, #16
   1bfce:	f47f af03 	bne.w	1bdd8 <ip_interface_sendto+0xb0>
   1bfd2:	2204      	movs	r2, #4
   1bfd4:	8931      	ldrh	r1, [r6, #8]
   1bfd6:	835a      	strh	r2, [r3, #26]
   1bfd8:	8319      	strh	r1, [r3, #24]
   1bfda:	f106 010c 	add.w	r1, r6, #12
   1bfde:	f7f0 fdb5 	bl	cb4c <memcpy>
   1bfe2:	e7e6      	b.n	1bfb2 <ip_interface_sendto+0x28a>
   1bfe4:	4b0d      	ldr	r3, [pc, #52]	; (1c01c <ip_interface_sendto+0x2f4>)
   1bfe6:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1bfea:	9300      	str	r3, [sp, #0]
   1bfec:	e7c4      	b.n	1bf78 <ip_interface_sendto+0x250>
   1bfee:	4b0b      	ldr	r3, [pc, #44]	; (1c01c <ip_interface_sendto+0x2f4>)
   1bff0:	f04f 0a28 	mov.w	sl, #40	; 0x28
   1bff4:	9300      	str	r3, [sp, #0]
   1bff6:	e7bf      	b.n	1bf78 <ip_interface_sendto+0x250>
   1bff8:	4b08      	ldr	r3, [pc, #32]	; (1c01c <ip_interface_sendto+0x2f4>)
   1bffa:	f04f 0a39 	mov.w	sl, #57	; 0x39
   1bffe:	9300      	str	r3, [sp, #0]
   1c000:	e7ba      	b.n	1bf78 <ip_interface_sendto+0x250>
   1c002:	4b06      	ldr	r3, [pc, #24]	; (1c01c <ip_interface_sendto+0x2f4>)
   1c004:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1c008:	9300      	str	r3, [sp, #0]
   1c00a:	e7b5      	b.n	1bf78 <ip_interface_sendto+0x250>
   1c00c:	4b03      	ldr	r3, [pc, #12]	; (1c01c <ip_interface_sendto+0x2f4>)
   1c00e:	f04f 0a09 	mov.w	sl, #9
   1c012:	9300      	str	r3, [sp, #0]
   1c014:	e7b0      	b.n	1bf78 <ip_interface_sendto+0x250>
   1c016:	f04f 0a0c 	mov.w	sl, #12
   1c01a:	e6e7      	b.n	1bdec <ip_interface_sendto+0xc4>
   1c01c:	20021a00 	.word	0x20021a00

0001c020 <ip_interface_recvfrom>:
   1c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c024:	b087      	sub	sp, #28
   1c026:	2a00      	cmp	r2, #0
   1c028:	f000 8112 	beq.w	1c250 <ip_interface_recvfrom+0x230>
   1c02c:	4680      	mov	r8, r0
   1c02e:	468b      	mov	fp, r1
   1c030:	469a      	mov	sl, r3
   1c032:	4691      	mov	r9, r2
   1c034:	b11b      	cbz	r3, 1c03e <ip_interface_recvfrom+0x1e>
   1c036:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   1c03a:	f000 8107 	beq.w	1c24c <ip_interface_recvfrom+0x22c>
   1c03e:	4640      	mov	r0, r8
   1c040:	f005 fda6 	bl	21b90 <interface_socket_from_handle_get>
   1c044:	4604      	mov	r4, r0
   1c046:	2800      	cmp	r0, #0
   1c048:	f000 8104 	beq.w	1c254 <ip_interface_recvfrom+0x234>
   1c04c:	6803      	ldr	r3, [r0, #0]
   1c04e:	02db      	lsls	r3, r3, #11
   1c050:	d562      	bpl.n	1c118 <ip_interface_recvfrom+0xf8>
   1c052:	f01a 0f02 	tst.w	sl, #2
   1c056:	bf18      	it	ne
   1c058:	2600      	movne	r6, #0
   1c05a:	f04f 35ff 	mov.w	r5, #4294967295
   1c05e:	bf08      	it	eq
   1c060:	6806      	ldreq	r6, [r0, #0]
   1c062:	f00a 0310 	and.w	r3, sl, #16
   1c066:	bf04      	itt	eq
   1c068:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   1c06c:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   1c070:	9301      	str	r3, [sp, #4]
   1c072:	6823      	ldr	r3, [r4, #0]
   1c074:	03df      	lsls	r7, r3, #15
   1c076:	d567      	bpl.n	1c148 <ip_interface_recvfrom+0x128>
   1c078:	6823      	ldr	r3, [r4, #0]
   1c07a:	69e0      	ldr	r0, [r4, #28]
   1c07c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1c080:	6023      	str	r3, [r4, #0]
   1c082:	6803      	ldr	r3, [r0, #0]
   1c084:	68db      	ldr	r3, [r3, #12]
   1c086:	4798      	blx	r3
   1c088:	4605      	mov	r5, r0
   1c08a:	3001      	adds	r0, #1
   1c08c:	d07d      	beq.n	1c18a <ip_interface_recvfrom+0x16a>
   1c08e:	45a9      	cmp	r9, r5
   1c090:	dd03      	ble.n	1c09a <ip_interface_recvfrom+0x7a>
   1c092:	6923      	ldr	r3, [r4, #16]
   1c094:	2b01      	cmp	r3, #1
   1c096:	f000 80a3 	beq.w	1c1e0 <ip_interface_recvfrom+0x1c0>
   1c09a:	f04f 0800 	mov.w	r8, #0
   1c09e:	af02      	add	r7, sp, #8
   1c0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c0a2:	b103      	cbz	r3, 1c0a6 <ip_interface_recvfrom+0x86>
   1c0a4:	681b      	ldr	r3, [r3, #0]
   1c0a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c0a8:	e9cd b902 	strd	fp, r9, [sp, #8]
   1c0ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c0b0:	69e0      	ldr	r0, [r4, #28]
   1c0b2:	4639      	mov	r1, r7
   1c0b4:	6803      	ldr	r3, [r0, #0]
   1c0b6:	4652      	mov	r2, sl
   1c0b8:	689b      	ldr	r3, [r3, #8]
   1c0ba:	4798      	blx	r3
   1c0bc:	4605      	mov	r5, r0
   1c0be:	69e0      	ldr	r0, [r4, #28]
   1c0c0:	1c6b      	adds	r3, r5, #1
   1c0c2:	6803      	ldr	r3, [r0, #0]
   1c0c4:	bf18      	it	ne
   1c0c6:	2701      	movne	r7, #1
   1c0c8:	68db      	ldr	r3, [r3, #12]
   1c0ca:	bf0a      	itet	eq
   1c0cc:	2700      	moveq	r7, #0
   1c0ce:	2600      	movne	r6, #0
   1c0d0:	2623      	moveq	r6, #35	; 0x23
   1c0d2:	4798      	blx	r3
   1c0d4:	3001      	adds	r0, #1
   1c0d6:	d132      	bne.n	1c13e <ip_interface_recvfrom+0x11e>
   1c0d8:	f1b8 0f00 	cmp.w	r8, #0
   1c0dc:	f000 80b0 	beq.w	1c240 <ip_interface_recvfrom+0x220>
   1c0e0:	2f00      	cmp	r7, #0
   1c0e2:	f000 80a1 	beq.w	1c228 <ip_interface_recvfrom+0x208>
   1c0e6:	6823      	ldr	r3, [r4, #0]
   1c0e8:	0318      	lsls	r0, r3, #12
   1c0ea:	d506      	bpl.n	1c0fa <ip_interface_recvfrom+0xda>
   1c0ec:	6823      	ldr	r3, [r4, #0]
   1c0ee:	b29b      	uxth	r3, r3
   1c0f0:	2b0d      	cmp	r3, #13
   1c0f2:	d002      	beq.n	1c0fa <ip_interface_recvfrom+0xda>
   1c0f4:	6923      	ldr	r3, [r4, #16]
   1c0f6:	2b01      	cmp	r3, #1
   1c0f8:	d021      	beq.n	1c13e <ip_interface_recvfrom+0x11e>
   1c0fa:	6823      	ldr	r3, [r4, #0]
   1c0fc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1c100:	6823      	ldr	r3, [r4, #0]
   1c102:	f040 80a9 	bne.w	1c258 <ip_interface_recvfrom+0x238>
   1c106:	0319      	lsls	r1, r3, #12
   1c108:	d473      	bmi.n	1c1f2 <ip_interface_recvfrom+0x1d2>
   1c10a:	2e00      	cmp	r6, #0
   1c10c:	f040 8086 	bne.w	1c21c <ip_interface_recvfrom+0x1fc>
   1c110:	4628      	mov	r0, r5
   1c112:	b007      	add	sp, #28
   1c114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c118:	6803      	ldr	r3, [r0, #0]
   1c11a:	b29b      	uxth	r3, r3
   1c11c:	2b06      	cmp	r3, #6
   1c11e:	d071      	beq.n	1c204 <ip_interface_recvfrom+0x1e4>
   1c120:	6803      	ldr	r3, [r0, #0]
   1c122:	b29b      	uxth	r3, r3
   1c124:	2b07      	cmp	r3, #7
   1c126:	bf0c      	ite	eq
   1c128:	2609      	moveq	r6, #9
   1c12a:	2639      	movne	r6, #57	; 0x39
   1c12c:	69e0      	ldr	r0, [r4, #28]
   1c12e:	6803      	ldr	r3, [r0, #0]
   1c130:	68db      	ldr	r3, [r3, #12]
   1c132:	4798      	blx	r3
   1c134:	1c43      	adds	r3, r0, #1
   1c136:	4605      	mov	r5, r0
   1c138:	d0df      	beq.n	1c0fa <ip_interface_recvfrom+0xda>
   1c13a:	f04f 35ff 	mov.w	r5, #4294967295
   1c13e:	6823      	ldr	r3, [r4, #0]
   1c140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c144:	6023      	str	r3, [r4, #0]
   1c146:	e7e0      	b.n	1c10a <ip_interface_recvfrom+0xea>
   1c148:	2e00      	cmp	r6, #0
   1c14a:	d07d      	beq.n	1c248 <ip_interface_recvfrom+0x228>
   1c14c:	6a26      	ldr	r6, [r4, #32]
   1c14e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c152:	2e00      	cmp	r6, #0
   1c154:	bf08      	it	eq
   1c156:	f04f 36ff 	moveq.w	r6, #4294967295
   1c15a:	af02      	add	r7, sp, #8
   1c15c:	463b      	mov	r3, r7
   1c15e:	4611      	mov	r1, r2
   1c160:	4640      	mov	r0, r8
   1c162:	9602      	str	r6, [sp, #8]
   1c164:	f005 fca0 	bl	21aa8 <interface_socket_wait>
   1c168:	4606      	mov	r6, r0
   1c16a:	b350      	cbz	r0, 1c1c2 <ip_interface_recvfrom+0x1a2>
   1c16c:	6823      	ldr	r3, [r4, #0]
   1c16e:	031a      	lsls	r2, r3, #12
   1c170:	d532      	bpl.n	1c1d8 <ip_interface_recvfrom+0x1b8>
   1c172:	6823      	ldr	r3, [r4, #0]
   1c174:	b29b      	uxth	r3, r3
   1c176:	2b0d      	cmp	r3, #13
   1c178:	d02e      	beq.n	1c1d8 <ip_interface_recvfrom+0x1b8>
   1c17a:	6923      	ldr	r3, [r4, #16]
   1c17c:	f1a3 0801 	sub.w	r8, r3, #1
   1c180:	fab8 f888 	clz	r8, r8
   1c184:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1c188:	e78a      	b.n	1c0a0 <ip_interface_recvfrom+0x80>
   1c18a:	6823      	ldr	r3, [r4, #0]
   1c18c:	031a      	lsls	r2, r3, #12
   1c18e:	d5db      	bpl.n	1c148 <ip_interface_recvfrom+0x128>
   1c190:	6823      	ldr	r3, [r4, #0]
   1c192:	b29b      	uxth	r3, r3
   1c194:	2b0d      	cmp	r3, #13
   1c196:	d0d7      	beq.n	1c148 <ip_interface_recvfrom+0x128>
   1c198:	6923      	ldr	r3, [r4, #16]
   1c19a:	69e0      	ldr	r0, [r4, #28]
   1c19c:	2b01      	cmp	r3, #1
   1c19e:	d033      	beq.n	1c208 <ip_interface_recvfrom+0x1e8>
   1c1a0:	2639      	movs	r6, #57	; 0x39
   1c1a2:	6823      	ldr	r3, [r4, #0]
   1c1a4:	0c1b      	lsrs	r3, r3, #16
   1c1a6:	041b      	lsls	r3, r3, #16
   1c1a8:	f043 030d 	orr.w	r3, r3, #13
   1c1ac:	6023      	str	r3, [r4, #0]
   1c1ae:	6823      	ldr	r3, [r4, #0]
   1c1b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1c1b4:	6023      	str	r3, [r4, #0]
   1c1b6:	6803      	ldr	r3, [r0, #0]
   1c1b8:	68db      	ldr	r3, [r3, #12]
   1c1ba:	4798      	blx	r3
   1c1bc:	3001      	adds	r0, #1
   1c1be:	d1be      	bne.n	1c13e <ip_interface_recvfrom+0x11e>
   1c1c0:	e79b      	b.n	1c0fa <ip_interface_recvfrom+0xda>
   1c1c2:	4640      	mov	r0, r8
   1c1c4:	f005 fce4 	bl	21b90 <interface_socket_from_handle_get>
   1c1c8:	b140      	cbz	r0, 1c1dc <ip_interface_recvfrom+0x1bc>
   1c1ca:	6846      	ldr	r6, [r0, #4]
   1c1cc:	b136      	cbz	r6, 1c1dc <ip_interface_recvfrom+0x1bc>
   1c1ce:	2300      	movs	r3, #0
   1c1d0:	6043      	str	r3, [r0, #4]
   1c1d2:	6823      	ldr	r3, [r4, #0]
   1c1d4:	031a      	lsls	r2, r3, #12
   1c1d6:	d4cc      	bmi.n	1c172 <ip_interface_recvfrom+0x152>
   1c1d8:	69e0      	ldr	r0, [r4, #28]
   1c1da:	e7ec      	b.n	1c1b6 <ip_interface_recvfrom+0x196>
   1c1dc:	2601      	movs	r6, #1
   1c1de:	e748      	b.n	1c072 <ip_interface_recvfrom+0x52>
   1c1e0:	9b01      	ldr	r3, [sp, #4]
   1c1e2:	b11b      	cbz	r3, 1c1ec <ip_interface_recvfrom+0x1cc>
   1c1e4:	6823      	ldr	r3, [r4, #0]
   1c1e6:	00d9      	lsls	r1, r3, #3
   1c1e8:	d5b0      	bpl.n	1c14c <ip_interface_recvfrom+0x12c>
   1c1ea:	e756      	b.n	1c09a <ip_interface_recvfrom+0x7a>
   1c1ec:	4698      	mov	r8, r3
   1c1ee:	af02      	add	r7, sp, #8
   1c1f0:	e756      	b.n	1c0a0 <ip_interface_recvfrom+0x80>
   1c1f2:	6823      	ldr	r3, [r4, #0]
   1c1f4:	b29b      	uxth	r3, r3
   1c1f6:	2b0d      	cmp	r3, #13
   1c1f8:	d187      	bne.n	1c10a <ip_interface_recvfrom+0xea>
   1c1fa:	68a3      	ldr	r3, [r4, #8]
   1c1fc:	2b00      	cmp	r3, #0
   1c1fe:	d084      	beq.n	1c10a <ip_interface_recvfrom+0xea>
   1c200:	68a6      	ldr	r6, [r4, #8]
   1c202:	e782      	b.n	1c10a <ip_interface_recvfrom+0xea>
   1c204:	2609      	movs	r6, #9
   1c206:	e791      	b.n	1c12c <ip_interface_recvfrom+0x10c>
   1c208:	6803      	ldr	r3, [r0, #0]
   1c20a:	68db      	ldr	r3, [r3, #12]
   1c20c:	4798      	blx	r3
   1c20e:	3001      	adds	r0, #1
   1c210:	d00a      	beq.n	1c228 <ip_interface_recvfrom+0x208>
   1c212:	2623      	movs	r6, #35	; 0x23
   1c214:	6823      	ldr	r3, [r4, #0]
   1c216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c21a:	6023      	str	r3, [r4, #0]
   1c21c:	4630      	mov	r0, r6
   1c21e:	f7fa fd0b 	bl	16c38 <bsd_os_errno_set>
   1c222:	f04f 35ff 	mov.w	r5, #4294967295
   1c226:	e773      	b.n	1c110 <ip_interface_recvfrom+0xf0>
   1c228:	6823      	ldr	r3, [r4, #0]
   1c22a:	2500      	movs	r5, #0
   1c22c:	0c1b      	lsrs	r3, r3, #16
   1c22e:	041b      	lsls	r3, r3, #16
   1c230:	f043 030d 	orr.w	r3, r3, #13
   1c234:	6023      	str	r3, [r4, #0]
   1c236:	6823      	ldr	r3, [r4, #0]
   1c238:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1c23c:	6023      	str	r3, [r4, #0]
   1c23e:	e767      	b.n	1c110 <ip_interface_recvfrom+0xf0>
   1c240:	2f00      	cmp	r7, #0
   1c242:	f47f af50 	bne.w	1c0e6 <ip_interface_recvfrom+0xc6>
   1c246:	e758      	b.n	1c0fa <ip_interface_recvfrom+0xda>
   1c248:	2623      	movs	r6, #35	; 0x23
   1c24a:	e7c5      	b.n	1c1d8 <ip_interface_recvfrom+0x1b8>
   1c24c:	262d      	movs	r6, #45	; 0x2d
   1c24e:	e7e5      	b.n	1c21c <ip_interface_recvfrom+0x1fc>
   1c250:	2616      	movs	r6, #22
   1c252:	e7e3      	b.n	1c21c <ip_interface_recvfrom+0x1fc>
   1c254:	2609      	movs	r6, #9
   1c256:	e7e1      	b.n	1c21c <ip_interface_recvfrom+0x1fc>
   1c258:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1c25c:	6023      	str	r3, [r4, #0]
   1c25e:	6823      	ldr	r3, [r4, #0]
   1c260:	2669      	movs	r6, #105	; 0x69
   1c262:	0c1b      	lsrs	r3, r3, #16
   1c264:	041b      	lsls	r3, r3, #16
   1c266:	f043 030d 	orr.w	r3, r3, #13
   1c26a:	6023      	str	r3, [r4, #0]
   1c26c:	e7d6      	b.n	1c21c <ip_interface_recvfrom+0x1fc>
   1c26e:	bf00      	nop

0001c270 <ip_interface_connect>:
   1c270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c274:	b082      	sub	sp, #8
   1c276:	2900      	cmp	r1, #0
   1c278:	d04b      	beq.n	1c312 <ip_interface_connect+0xa2>
   1c27a:	4617      	mov	r7, r2
   1c27c:	2a00      	cmp	r2, #0
   1c27e:	d048      	beq.n	1c312 <ip_interface_connect+0xa2>
   1c280:	4680      	mov	r8, r0
   1c282:	4689      	mov	r9, r1
   1c284:	f005 fc84 	bl	21b90 <interface_socket_from_handle_get>
   1c288:	4605      	mov	r5, r0
   1c28a:	2800      	cmp	r0, #0
   1c28c:	f000 80af 	beq.w	1c3ee <ip_interface_connect+0x17e>
   1c290:	6803      	ldr	r3, [r0, #0]
   1c292:	b29b      	uxth	r3, r3
   1c294:	2b02      	cmp	r3, #2
   1c296:	d004      	beq.n	1c2a2 <ip_interface_connect+0x32>
   1c298:	6803      	ldr	r3, [r0, #0]
   1c29a:	b29b      	uxth	r3, r3
   1c29c:	2b04      	cmp	r3, #4
   1c29e:	f040 809d 	bne.w	1c3dc <ip_interface_connect+0x16c>
   1c2a2:	6829      	ldr	r1, [r5, #0]
   1c2a4:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1c2a8:	f040 8089 	bne.w	1c3be <ip_interface_connect+0x14e>
   1c2ac:	ae02      	add	r6, sp, #8
   1c2ae:	f8d5 a018 	ldr.w	sl, [r5, #24]
   1c2b2:	f846 1d04 	str.w	r1, [r6, #-4]!
   1c2b6:	4630      	mov	r0, r6
   1c2b8:	f7ff fb48 	bl	1b94c <rpc_ip_client_request_alloc>
   1c2bc:	bb98      	cbnz	r0, 1c326 <ip_interface_connect+0xb6>
   1c2be:	2108      	movs	r1, #8
   1c2c0:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1c2c4:	9c01      	ldr	r4, [sp, #4]
   1c2c6:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1c2ca:	f043 0302 	orr.w	r3, r3, #2
   1c2ce:	60e3      	str	r3, [r4, #12]
   1c2d0:	f8c4 a010 	str.w	sl, [r4, #16]
   1c2d4:	7260      	strb	r0, [r4, #9]
   1c2d6:	72a0      	strb	r0, [r4, #10]
   1c2d8:	72e0      	strb	r0, [r4, #11]
   1c2da:	7221      	strb	r1, [r4, #8]
   1c2dc:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   1c2e0:	f042 0202 	orr.w	r2, r2, #2
   1c2e4:	60e2      	str	r2, [r4, #12]
   1c2e6:	68a3      	ldr	r3, [r4, #8]
   1c2e8:	69aa      	ldr	r2, [r5, #24]
   1c2ea:	3304      	adds	r3, #4
   1c2ec:	6122      	str	r2, [r4, #16]
   1c2ee:	60a3      	str	r3, [r4, #8]
   1c2f0:	68eb      	ldr	r3, [r5, #12]
   1c2f2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1c2f6:	4293      	cmp	r3, r2
   1c2f8:	d11b      	bne.n	1c332 <ip_interface_connect+0xc2>
   1c2fa:	f899 2000 	ldrb.w	r2, [r9]
   1c2fe:	4297      	cmp	r7, r2
   1c300:	d107      	bne.n	1c312 <ip_interface_connect+0xa2>
   1c302:	2b02      	cmp	r3, #2
   1c304:	f104 0018 	add.w	r0, r4, #24
   1c308:	d015      	beq.n	1c336 <ip_interface_connect+0xc6>
   1c30a:	2b0a      	cmp	r3, #10
   1c30c:	d101      	bne.n	1c312 <ip_interface_connect+0xa2>
   1c30e:	2f24      	cmp	r7, #36	; 0x24
   1c310:	d01d      	beq.n	1c34e <ip_interface_connect+0xde>
   1c312:	2416      	movs	r4, #22
   1c314:	4620      	mov	r0, r4
   1c316:	f7fa fc8f 	bl	16c38 <bsd_os_errno_set>
   1c31a:	f04f 34ff 	mov.w	r4, #4294967295
   1c31e:	4620      	mov	r0, r4
   1c320:	b002      	add	sp, #8
   1c322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c326:	9c01      	ldr	r4, [sp, #4]
   1c328:	2c00      	cmp	r4, #0
   1c32a:	d05e      	beq.n	1c3ea <ip_interface_connect+0x17a>
   1c32c:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1c330:	e7d4      	b.n	1c2dc <ip_interface_connect+0x6c>
   1c332:	242f      	movs	r4, #47	; 0x2f
   1c334:	e7ee      	b.n	1c314 <ip_interface_connect+0xa4>
   1c336:	2f10      	cmp	r7, #16
   1c338:	d1eb      	bne.n	1c312 <ip_interface_connect+0xa2>
   1c33a:	2204      	movs	r2, #4
   1c33c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1c340:	f109 010c 	add.w	r1, r9, #12
   1c344:	82e2      	strh	r2, [r4, #22]
   1c346:	82a3      	strh	r3, [r4, #20]
   1c348:	f7f0 fc00 	bl	cb4c <memcpy>
   1c34c:	e008      	b.n	1c360 <ip_interface_connect+0xf0>
   1c34e:	2210      	movs	r2, #16
   1c350:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1c354:	eb09 0102 	add.w	r1, r9, r2
   1c358:	82e2      	strh	r2, [r4, #22]
   1c35a:	82a3      	strh	r3, [r4, #20]
   1c35c:	f7f0 fbf6 	bl	cb4c <memcpy>
   1c360:	68a3      	ldr	r3, [r4, #8]
   1c362:	8ae2      	ldrh	r2, [r4, #22]
   1c364:	f247 0102 	movw	r1, #28674	; 0x7002
   1c368:	4413      	add	r3, r2
   1c36a:	60a3      	str	r3, [r4, #8]
   1c36c:	682f      	ldr	r7, [r5, #0]
   1c36e:	682b      	ldr	r3, [r5, #0]
   1c370:	4620      	mov	r0, r4
   1c372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1c376:	602b      	str	r3, [r5, #0]
   1c378:	f7ff fafc 	bl	1b974 <rpc_ip_client_request_send>
   1c37c:	b9a8      	cbnz	r0, 1c3aa <ip_interface_connect+0x13a>
   1c37e:	682b      	ldr	r3, [r5, #0]
   1c380:	00db      	lsls	r3, r3, #3
   1c382:	d429      	bmi.n	1c3d8 <ip_interface_connect+0x168>
   1c384:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1c386:	4633      	mov	r3, r6
   1c388:	2c00      	cmp	r4, #0
   1c38a:	bf08      	it	eq
   1c38c:	f04f 34ff 	moveq.w	r4, #4294967295
   1c390:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c394:	2105      	movs	r1, #5
   1c396:	4640      	mov	r0, r8
   1c398:	9401      	str	r4, [sp, #4]
   1c39a:	f005 fb85 	bl	21aa8 <interface_socket_wait>
   1c39e:	4604      	mov	r4, r0
   1c3a0:	b178      	cbz	r0, 1c3c2 <ip_interface_connect+0x152>
   1c3a2:	2c73      	cmp	r4, #115	; 0x73
   1c3a4:	d0b6      	beq.n	1c314 <ip_interface_connect+0xa4>
   1c3a6:	602f      	str	r7, [r5, #0]
   1c3a8:	e7b4      	b.n	1c314 <ip_interface_connect+0xa4>
   1c3aa:	6820      	ldr	r0, [r4, #0]
   1c3ac:	b108      	cbz	r0, 1c3b2 <ip_interface_connect+0x142>
   1c3ae:	f7ff faff 	bl	1b9b0 <rpc_ip_client_data_free>
   1c3b2:	4620      	mov	r0, r4
   1c3b4:	f7ff faf4 	bl	1b9a0 <rpc_ip_client_message_free>
   1c3b8:	2423      	movs	r4, #35	; 0x23
   1c3ba:	602f      	str	r7, [r5, #0]
   1c3bc:	e7aa      	b.n	1c314 <ip_interface_connect+0xa4>
   1c3be:	2472      	movs	r4, #114	; 0x72
   1c3c0:	e7a8      	b.n	1c314 <ip_interface_connect+0xa4>
   1c3c2:	4640      	mov	r0, r8
   1c3c4:	f005 fbe4 	bl	21b90 <interface_socket_from_handle_get>
   1c3c8:	2800      	cmp	r0, #0
   1c3ca:	d0a8      	beq.n	1c31e <ip_interface_connect+0xae>
   1c3cc:	6843      	ldr	r3, [r0, #4]
   1c3ce:	2b00      	cmp	r3, #0
   1c3d0:	d0a5      	beq.n	1c31e <ip_interface_connect+0xae>
   1c3d2:	6044      	str	r4, [r0, #4]
   1c3d4:	461c      	mov	r4, r3
   1c3d6:	e7e4      	b.n	1c3a2 <ip_interface_connect+0x132>
   1c3d8:	2473      	movs	r4, #115	; 0x73
   1c3da:	e79b      	b.n	1c314 <ip_interface_connect+0xa4>
   1c3dc:	6803      	ldr	r3, [r0, #0]
   1c3de:	b29b      	uxth	r3, r3
   1c3e0:	2b05      	cmp	r3, #5
   1c3e2:	bf14      	ite	ne
   1c3e4:	2409      	movne	r4, #9
   1c3e6:	2438      	moveq	r4, #56	; 0x38
   1c3e8:	e794      	b.n	1c314 <ip_interface_connect+0xa4>
   1c3ea:	240c      	movs	r4, #12
   1c3ec:	e792      	b.n	1c314 <ip_interface_connect+0xa4>
   1c3ee:	2409      	movs	r4, #9
   1c3f0:	e790      	b.n	1c314 <ip_interface_connect+0xa4>
   1c3f2:	bf00      	nop

0001c3f4 <ip_interface_socketoption_get>:
   1c3f4:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1c3f8:	f04f 34ff 	mov.w	r4, #4294967295
   1c3fc:	b082      	sub	sp, #8
   1c3fe:	9400      	str	r4, [sp, #0]
   1c400:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c402:	2c00      	cmp	r4, #0
   1c404:	d05b      	beq.n	1c4be <ip_interface_socketoption_get+0xca>
   1c406:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1c408:	6824      	ldr	r4, [r4, #0]
   1c40a:	2c00      	cmp	r4, #0
   1c40c:	d057      	beq.n	1c4be <ip_interface_socketoption_get+0xca>
   1c40e:	680c      	ldr	r4, [r1, #0]
   1c410:	0266      	lsls	r6, r4, #9
   1c412:	d44f      	bmi.n	1c4b4 <ip_interface_socketoption_get+0xc0>
   1c414:	680c      	ldr	r4, [r1, #0]
   1c416:	0225      	lsls	r5, r4, #8
   1c418:	d44c      	bmi.n	1c4b4 <ip_interface_socketoption_get+0xc0>
   1c41a:	680c      	ldr	r4, [r1, #0]
   1c41c:	01e4      	lsls	r4, r4, #7
   1c41e:	d449      	bmi.n	1c4b4 <ip_interface_socketoption_get+0xc0>
   1c420:	680c      	ldr	r4, [r1, #0]
   1c422:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   1c426:	d145      	bne.n	1c4b4 <ip_interface_socketoption_get+0xc0>
   1c428:	460c      	mov	r4, r1
   1c42a:	680e      	ldr	r6, [r1, #0]
   1c42c:	461f      	mov	r7, r3
   1c42e:	680b      	ldr	r3, [r1, #0]
   1c430:	4681      	mov	r9, r0
   1c432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c436:	600b      	str	r3, [r1, #0]
   1c438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c43a:	a802      	add	r0, sp, #8
   1c43c:	f840 cd04 	str.w	ip, [r0, #-4]!
   1c440:	6819      	ldr	r1, [r3, #0]
   1c442:	4615      	mov	r5, r2
   1c444:	f8d4 b018 	ldr.w	fp, [r4, #24]
   1c448:	f7ff fa80 	bl	1b94c <rpc_ip_client_request_alloc>
   1c44c:	2800      	cmp	r0, #0
   1c44e:	d146      	bne.n	1c4de <ip_interface_socketoption_get+0xea>
   1c450:	f247 0304 	movw	r3, #28676	; 0x7004
   1c454:	2208      	movs	r2, #8
   1c456:	f8dd a004 	ldr.w	sl, [sp, #4]
   1c45a:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1c45e:	f8ca 300c 	str.w	r3, [sl, #12]
   1c462:	f8ca b010 	str.w	fp, [sl, #16]
   1c466:	f88a 0009 	strb.w	r0, [sl, #9]
   1c46a:	f88a 000a 	strb.w	r0, [sl, #10]
   1c46e:	f88a 000b 	strb.w	r0, [sl, #11]
   1c472:	f88a 2008 	strb.w	r2, [sl, #8]
   1c476:	f8da 3008 	ldr.w	r3, [sl, #8]
   1c47a:	f8ca 7018 	str.w	r7, [sl, #24]
   1c47e:	3308      	adds	r3, #8
   1c480:	f8ca 5014 	str.w	r5, [sl, #20]
   1c484:	f8ca 3008 	str.w	r3, [sl, #8]
   1c488:	f247 0104 	movw	r1, #28676	; 0x7004
   1c48c:	4650      	mov	r0, sl
   1c48e:	f8da 7000 	ldr.w	r7, [sl]
   1c492:	f7ff fa6f 	bl	1b974 <rpc_ip_client_request_send>
   1c496:	b9b8      	cbnz	r0, 1c4c8 <ip_interface_socketoption_get+0xd4>
   1c498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1c49c:	466b      	mov	r3, sp
   1c49e:	4611      	mov	r1, r2
   1c4a0:	4648      	mov	r0, r9
   1c4a2:	f005 fb01 	bl	21aa8 <interface_socket_wait>
   1c4a6:	4605      	mov	r5, r0
   1c4a8:	b300      	cbz	r0, 1c4ec <ip_interface_socketoption_get+0xf8>
   1c4aa:	4638      	mov	r0, r7
   1c4ac:	f7ff fa80 	bl	1b9b0 <rpc_ip_client_data_free>
   1c4b0:	6026      	str	r6, [r4, #0]
   1c4b2:	e000      	b.n	1c4b6 <ip_interface_socketoption_get+0xc2>
   1c4b4:	2523      	movs	r5, #35	; 0x23
   1c4b6:	4628      	mov	r0, r5
   1c4b8:	b002      	add	sp, #8
   1c4ba:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1c4be:	2516      	movs	r5, #22
   1c4c0:	4628      	mov	r0, r5
   1c4c2:	b002      	add	sp, #8
   1c4c4:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1c4c8:	f8da 0000 	ldr.w	r0, [sl]
   1c4cc:	b108      	cbz	r0, 1c4d2 <ip_interface_socketoption_get+0xde>
   1c4ce:	f7ff fa6f 	bl	1b9b0 <rpc_ip_client_data_free>
   1c4d2:	4650      	mov	r0, sl
   1c4d4:	f7ff fa64 	bl	1b9a0 <rpc_ip_client_message_free>
   1c4d8:	2523      	movs	r5, #35	; 0x23
   1c4da:	6026      	str	r6, [r4, #0]
   1c4dc:	e7e5      	b.n	1c4aa <ip_interface_socketoption_get+0xb6>
   1c4de:	f8dd a004 	ldr.w	sl, [sp, #4]
   1c4e2:	f1ba 0f00 	cmp.w	sl, #0
   1c4e6:	d1c6      	bne.n	1c476 <ip_interface_socketoption_get+0x82>
   1c4e8:	250c      	movs	r5, #12
   1c4ea:	e7e1      	b.n	1c4b0 <ip_interface_socketoption_get+0xbc>
   1c4ec:	4648      	mov	r0, r9
   1c4ee:	f005 fb4f 	bl	21b90 <interface_socket_from_handle_get>
   1c4f2:	b120      	cbz	r0, 1c4fe <ip_interface_socketoption_get+0x10a>
   1c4f4:	6843      	ldr	r3, [r0, #4]
   1c4f6:	b113      	cbz	r3, 1c4fe <ip_interface_socketoption_get+0x10a>
   1c4f8:	6045      	str	r5, [r0, #4]
   1c4fa:	461d      	mov	r5, r3
   1c4fc:	e7d5      	b.n	1c4aa <ip_interface_socketoption_get+0xb6>
   1c4fe:	f8df b050 	ldr.w	fp, [pc, #80]	; 1c550 <ip_interface_socketoption_get+0x15c>
   1c502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c504:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1c508:	681b      	ldr	r3, [r3, #0]
   1c50a:	b1b0      	cbz	r0, 1c53a <ip_interface_socketoption_get+0x146>
   1c50c:	6842      	ldr	r2, [r0, #4]
   1c50e:	429a      	cmp	r2, r3
   1c510:	d811      	bhi.n	1c536 <ip_interface_socketoption_get+0x142>
   1c512:	6801      	ldr	r1, [r0, #0]
   1c514:	b179      	cbz	r1, 1c536 <ip_interface_socketoption_get+0x142>
   1c516:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c518:	f7f0 fb18 	bl	cb4c <memcpy>
   1c51c:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   1c520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c522:	685b      	ldr	r3, [r3, #4]
   1c524:	6013      	str	r3, [r2, #0]
   1c526:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1c52a:	f7ff fa39 	bl	1b9a0 <rpc_ip_client_message_free>
   1c52e:	2300      	movs	r3, #0
   1c530:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   1c534:	e7b9      	b.n	1c4aa <ip_interface_socketoption_get+0xb6>
   1c536:	2516      	movs	r5, #22
   1c538:	e7f7      	b.n	1c52a <ip_interface_socketoption_get+0x136>
   1c53a:	461a      	mov	r2, r3
   1c53c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c53e:	4639      	mov	r1, r7
   1c540:	f7f0 fb04 	bl	cb4c <memcpy>
   1c544:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c54a:	6013      	str	r3, [r2, #0]
   1c54c:	e7ad      	b.n	1c4aa <ip_interface_socketoption_get+0xb6>
   1c54e:	bf00      	nop
   1c550:	20021a00 	.word	0x20021a00

0001c554 <ip_interface_socketoption_send>:
   1c554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c558:	f04f 35ff 	mov.w	r5, #4294967295
   1c55c:	680c      	ldr	r4, [r1, #0]
   1c55e:	b082      	sub	sp, #8
   1c560:	0266      	lsls	r6, r4, #9
   1c562:	9500      	str	r5, [sp, #0]
   1c564:	d44d      	bmi.n	1c602 <ip_interface_socketoption_send+0xae>
   1c566:	680c      	ldr	r4, [r1, #0]
   1c568:	0225      	lsls	r5, r4, #8
   1c56a:	d44a      	bmi.n	1c602 <ip_interface_socketoption_send+0xae>
   1c56c:	680c      	ldr	r4, [r1, #0]
   1c56e:	01e4      	lsls	r4, r4, #7
   1c570:	d447      	bmi.n	1c602 <ip_interface_socketoption_send+0xae>
   1c572:	680c      	ldr	r4, [r1, #0]
   1c574:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   1c578:	d143      	bne.n	1c602 <ip_interface_socketoption_send+0xae>
   1c57a:	4688      	mov	r8, r1
   1c57c:	f8d1 9000 	ldr.w	r9, [r1]
   1c580:	461f      	mov	r7, r3
   1c582:	680b      	ldr	r3, [r1, #0]
   1c584:	4605      	mov	r5, r0
   1c586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1c58a:	a802      	add	r0, sp, #8
   1c58c:	600b      	str	r3, [r1, #0]
   1c58e:	f840 4d04 	str.w	r4, [r0, #-4]!
   1c592:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c594:	4616      	mov	r6, r2
   1c596:	f8d8 a018 	ldr.w	sl, [r8, #24]
   1c59a:	f7ff f9d7 	bl	1b94c <rpc_ip_client_request_alloc>
   1c59e:	bba8      	cbnz	r0, 1c60c <ip_interface_socketoption_send+0xb8>
   1c5a0:	f247 0303 	movw	r3, #28675	; 0x7003
   1c5a4:	2208      	movs	r2, #8
   1c5a6:	9c01      	ldr	r4, [sp, #4]
   1c5a8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1c5ac:	60e3      	str	r3, [r4, #12]
   1c5ae:	f8c4 a010 	str.w	sl, [r4, #16]
   1c5b2:	7260      	strb	r0, [r4, #9]
   1c5b4:	72a0      	strb	r0, [r4, #10]
   1c5b6:	72e0      	strb	r0, [r4, #11]
   1c5b8:	7222      	strb	r2, [r4, #8]
   1c5ba:	68a3      	ldr	r3, [r4, #8]
   1c5bc:	6166      	str	r6, [r4, #20]
   1c5be:	3308      	adds	r3, #8
   1c5c0:	60a3      	str	r3, [r4, #8]
   1c5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c5c4:	61a7      	str	r7, [r4, #24]
   1c5c6:	b133      	cbz	r3, 1c5d6 <ip_interface_socketoption_send+0x82>
   1c5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c5ca:	b123      	cbz	r3, 1c5d6 <ip_interface_socketoption_send+0x82>
   1c5cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c5ce:	4619      	mov	r1, r3
   1c5d0:	6820      	ldr	r0, [r4, #0]
   1c5d2:	f7f0 fabb 	bl	cb4c <memcpy>
   1c5d6:	f247 0103 	movw	r1, #28675	; 0x7003
   1c5da:	4620      	mov	r0, r4
   1c5dc:	f7ff f9ca 	bl	1b974 <rpc_ip_client_request_send>
   1c5e0:	4606      	mov	r6, r0
   1c5e2:	b9c0      	cbnz	r0, 1c616 <ip_interface_socketoption_send+0xc2>
   1c5e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1c5e8:	466b      	mov	r3, sp
   1c5ea:	4611      	mov	r1, r2
   1c5ec:	4628      	mov	r0, r5
   1c5ee:	f005 fa5b 	bl	21aa8 <interface_socket_wait>
   1c5f2:	4604      	mov	r4, r0
   1c5f4:	b1d0      	cbz	r0, 1c62c <ip_interface_socketoption_send+0xd8>
   1c5f6:	4620      	mov	r0, r4
   1c5f8:	f8c8 9000 	str.w	r9, [r8]
   1c5fc:	b002      	add	sp, #8
   1c5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c602:	2423      	movs	r4, #35	; 0x23
   1c604:	4620      	mov	r0, r4
   1c606:	b002      	add	sp, #8
   1c608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c60c:	9c01      	ldr	r4, [sp, #4]
   1c60e:	2c00      	cmp	r4, #0
   1c610:	d1d3      	bne.n	1c5ba <ip_interface_socketoption_send+0x66>
   1c612:	240c      	movs	r4, #12
   1c614:	e7ef      	b.n	1c5f6 <ip_interface_socketoption_send+0xa2>
   1c616:	6820      	ldr	r0, [r4, #0]
   1c618:	b108      	cbz	r0, 1c61e <ip_interface_socketoption_send+0xca>
   1c61a:	f7ff f9c9 	bl	1b9b0 <rpc_ip_client_data_free>
   1c61e:	4620      	mov	r0, r4
   1c620:	f7ff f9be 	bl	1b9a0 <rpc_ip_client_message_free>
   1c624:	2423      	movs	r4, #35	; 0x23
   1c626:	f8c8 9000 	str.w	r9, [r8]
   1c62a:	e7e4      	b.n	1c5f6 <ip_interface_socketoption_send+0xa2>
   1c62c:	4628      	mov	r0, r5
   1c62e:	f005 faaf 	bl	21b90 <interface_socket_from_handle_get>
   1c632:	2800      	cmp	r0, #0
   1c634:	d0df      	beq.n	1c5f6 <ip_interface_socketoption_send+0xa2>
   1c636:	6844      	ldr	r4, [r0, #4]
   1c638:	2c00      	cmp	r4, #0
   1c63a:	d0dc      	beq.n	1c5f6 <ip_interface_socketoption_send+0xa2>
   1c63c:	6046      	str	r6, [r0, #4]
   1c63e:	e7da      	b.n	1c5f6 <ip_interface_socketoption_send+0xa2>

0001c640 <ip_interface_bind>:
   1c640:	f04f 33ff 	mov.w	r3, #4294967295
   1c644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c648:	b083      	sub	sp, #12
   1c64a:	9300      	str	r3, [sp, #0]
   1c64c:	b3b1      	cbz	r1, 1c6bc <ip_interface_bind+0x7c>
   1c64e:	4616      	mov	r6, r2
   1c650:	b3a2      	cbz	r2, 1c6bc <ip_interface_bind+0x7c>
   1c652:	4607      	mov	r7, r0
   1c654:	4688      	mov	r8, r1
   1c656:	f005 fa9b 	bl	21b90 <interface_socket_from_handle_get>
   1c65a:	4605      	mov	r5, r0
   1c65c:	2800      	cmp	r0, #0
   1c65e:	d04a      	beq.n	1c6f6 <ip_interface_bind+0xb6>
   1c660:	6803      	ldr	r3, [r0, #0]
   1c662:	b29b      	uxth	r3, r3
   1c664:	2b02      	cmp	r3, #2
   1c666:	d146      	bne.n	1c6f6 <ip_interface_bind+0xb6>
   1c668:	2100      	movs	r1, #0
   1c66a:	a802      	add	r0, sp, #8
   1c66c:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c670:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1c674:	f7ff f96a 	bl	1b94c <rpc_ip_client_request_alloc>
   1c678:	bb50      	cbnz	r0, 1c6d0 <ip_interface_bind+0x90>
   1c67a:	f247 0305 	movw	r3, #28677	; 0x7005
   1c67e:	2208      	movs	r2, #8
   1c680:	9c01      	ldr	r4, [sp, #4]
   1c682:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1c686:	60e3      	str	r3, [r4, #12]
   1c688:	f8c4 9010 	str.w	r9, [r4, #16]
   1c68c:	7260      	strb	r0, [r4, #9]
   1c68e:	72a0      	strb	r0, [r4, #10]
   1c690:	72e0      	strb	r0, [r4, #11]
   1c692:	7222      	strb	r2, [r4, #8]
   1c694:	68a3      	ldr	r3, [r4, #8]
   1c696:	3304      	adds	r3, #4
   1c698:	60a3      	str	r3, [r4, #8]
   1c69a:	68eb      	ldr	r3, [r5, #12]
   1c69c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c6a0:	4293      	cmp	r3, r2
   1c6a2:	d11a      	bne.n	1c6da <ip_interface_bind+0x9a>
   1c6a4:	f898 2000 	ldrb.w	r2, [r8]
   1c6a8:	4296      	cmp	r6, r2
   1c6aa:	d107      	bne.n	1c6bc <ip_interface_bind+0x7c>
   1c6ac:	2b02      	cmp	r3, #2
   1c6ae:	f104 0018 	add.w	r0, r4, #24
   1c6b2:	d014      	beq.n	1c6de <ip_interface_bind+0x9e>
   1c6b4:	2b0a      	cmp	r3, #10
   1c6b6:	d101      	bne.n	1c6bc <ip_interface_bind+0x7c>
   1c6b8:	2e24      	cmp	r6, #36	; 0x24
   1c6ba:	d01e      	beq.n	1c6fa <ip_interface_bind+0xba>
   1c6bc:	2416      	movs	r4, #22
   1c6be:	4620      	mov	r0, r4
   1c6c0:	f7fa faba 	bl	16c38 <bsd_os_errno_set>
   1c6c4:	f04f 34ff 	mov.w	r4, #4294967295
   1c6c8:	4620      	mov	r0, r4
   1c6ca:	b003      	add	sp, #12
   1c6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c6d0:	9c01      	ldr	r4, [sp, #4]
   1c6d2:	2c00      	cmp	r4, #0
   1c6d4:	d1de      	bne.n	1c694 <ip_interface_bind+0x54>
   1c6d6:	240c      	movs	r4, #12
   1c6d8:	e7f1      	b.n	1c6be <ip_interface_bind+0x7e>
   1c6da:	242f      	movs	r4, #47	; 0x2f
   1c6dc:	e7ef      	b.n	1c6be <ip_interface_bind+0x7e>
   1c6de:	2e10      	cmp	r6, #16
   1c6e0:	d1ec      	bne.n	1c6bc <ip_interface_bind+0x7c>
   1c6e2:	2204      	movs	r2, #4
   1c6e4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1c6e8:	f108 010c 	add.w	r1, r8, #12
   1c6ec:	82e2      	strh	r2, [r4, #22]
   1c6ee:	82a3      	strh	r3, [r4, #20]
   1c6f0:	f7f0 fa2c 	bl	cb4c <memcpy>
   1c6f4:	e00a      	b.n	1c70c <ip_interface_bind+0xcc>
   1c6f6:	2409      	movs	r4, #9
   1c6f8:	e7e1      	b.n	1c6be <ip_interface_bind+0x7e>
   1c6fa:	2210      	movs	r2, #16
   1c6fc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1c700:	eb08 0102 	add.w	r1, r8, r2
   1c704:	82e2      	strh	r2, [r4, #22]
   1c706:	82a3      	strh	r3, [r4, #20]
   1c708:	f7f0 fa20 	bl	cb4c <memcpy>
   1c70c:	68a3      	ldr	r3, [r4, #8]
   1c70e:	8ae2      	ldrh	r2, [r4, #22]
   1c710:	f247 0105 	movw	r1, #28677	; 0x7005
   1c714:	4413      	add	r3, r2
   1c716:	60a3      	str	r3, [r4, #8]
   1c718:	682b      	ldr	r3, [r5, #0]
   1c71a:	4620      	mov	r0, r4
   1c71c:	0c1b      	lsrs	r3, r3, #16
   1c71e:	041b      	lsls	r3, r3, #16
   1c720:	f043 0303 	orr.w	r3, r3, #3
   1c724:	602b      	str	r3, [r5, #0]
   1c726:	682e      	ldr	r6, [r5, #0]
   1c728:	f7ff f924 	bl	1b974 <rpc_ip_client_request_send>
   1c72c:	4680      	mov	r8, r0
   1c72e:	b978      	cbnz	r0, 1c750 <ip_interface_bind+0x110>
   1c730:	466b      	mov	r3, sp
   1c732:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c736:	2104      	movs	r1, #4
   1c738:	4638      	mov	r0, r7
   1c73a:	f005 f9b5 	bl	21aa8 <interface_socket_wait>
   1c73e:	4604      	mov	r4, r0
   1c740:	b1a0      	cbz	r0, 1c76c <ip_interface_bind+0x12c>
   1c742:	682b      	ldr	r3, [r5, #0]
   1c744:	0c1b      	lsrs	r3, r3, #16
   1c746:	041b      	lsls	r3, r3, #16
   1c748:	f043 0302 	orr.w	r3, r3, #2
   1c74c:	602b      	str	r3, [r5, #0]
   1c74e:	e7b6      	b.n	1c6be <ip_interface_bind+0x7e>
   1c750:	6820      	ldr	r0, [r4, #0]
   1c752:	b108      	cbz	r0, 1c758 <ip_interface_bind+0x118>
   1c754:	f7ff f92c 	bl	1b9b0 <rpc_ip_client_data_free>
   1c758:	0c36      	lsrs	r6, r6, #16
   1c75a:	0436      	lsls	r6, r6, #16
   1c75c:	4620      	mov	r0, r4
   1c75e:	f046 0602 	orr.w	r6, r6, #2
   1c762:	f7ff f91d 	bl	1b9a0 <rpc_ip_client_message_free>
   1c766:	2423      	movs	r4, #35	; 0x23
   1c768:	602e      	str	r6, [r5, #0]
   1c76a:	e7a8      	b.n	1c6be <ip_interface_bind+0x7e>
   1c76c:	4638      	mov	r0, r7
   1c76e:	f005 fa0f 	bl	21b90 <interface_socket_from_handle_get>
   1c772:	2800      	cmp	r0, #0
   1c774:	d0a8      	beq.n	1c6c8 <ip_interface_bind+0x88>
   1c776:	6844      	ldr	r4, [r0, #4]
   1c778:	2c00      	cmp	r4, #0
   1c77a:	d0a5      	beq.n	1c6c8 <ip_interface_bind+0x88>
   1c77c:	f8c0 8004 	str.w	r8, [r0, #4]
   1c780:	e7df      	b.n	1c742 <ip_interface_bind+0x102>
   1c782:	bf00      	nop

0001c784 <ip_interface_listen>:
   1c784:	f04f 33ff 	mov.w	r3, #4294967295
   1c788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c78c:	b082      	sub	sp, #8
   1c78e:	4606      	mov	r6, r0
   1c790:	9300      	str	r3, [sp, #0]
   1c792:	f005 f9fd 	bl	21b90 <interface_socket_from_handle_get>
   1c796:	2800      	cmp	r0, #0
   1c798:	d06c      	beq.n	1c874 <ip_interface_listen+0xf0>
   1c79a:	6803      	ldr	r3, [r0, #0]
   1c79c:	4604      	mov	r4, r0
   1c79e:	b29b      	uxth	r3, r3
   1c7a0:	2b04      	cmp	r3, #4
   1c7a2:	d003      	beq.n	1c7ac <ip_interface_listen+0x28>
   1c7a4:	6803      	ldr	r3, [r0, #0]
   1c7a6:	b29b      	uxth	r3, r3
   1c7a8:	2b0b      	cmp	r3, #11
   1c7aa:	d163      	bne.n	1c874 <ip_interface_listen+0xf0>
   1c7ac:	2100      	movs	r1, #0
   1c7ae:	4a32      	ldr	r2, [pc, #200]	; (1c878 <ip_interface_listen+0xf4>)
   1c7b0:	4630      	mov	r0, r6
   1c7b2:	f005 f941 	bl	21a38 <interface_socket_packet_handler_update>
   1c7b6:	4601      	mov	r1, r0
   1c7b8:	2800      	cmp	r0, #0
   1c7ba:	d159      	bne.n	1c870 <ip_interface_listen+0xec>
   1c7bc:	a802      	add	r0, sp, #8
   1c7be:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c7c2:	69a7      	ldr	r7, [r4, #24]
   1c7c4:	f7ff f8c2 	bl	1b94c <rpc_ip_client_request_alloc>
   1c7c8:	bba0      	cbnz	r0, 1c834 <ip_interface_listen+0xb0>
   1c7ca:	f247 0308 	movw	r3, #28680	; 0x7008
   1c7ce:	2208      	movs	r2, #8
   1c7d0:	9d01      	ldr	r5, [sp, #4]
   1c7d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1c7d6:	60eb      	str	r3, [r5, #12]
   1c7d8:	612f      	str	r7, [r5, #16]
   1c7da:	7268      	strb	r0, [r5, #9]
   1c7dc:	72a8      	strb	r0, [r5, #10]
   1c7de:	72e8      	strb	r0, [r5, #11]
   1c7e0:	722a      	strb	r2, [r5, #8]
   1c7e2:	68ab      	ldr	r3, [r5, #8]
   1c7e4:	f247 0108 	movw	r1, #28680	; 0x7008
   1c7e8:	3304      	adds	r3, #4
   1c7ea:	60ab      	str	r3, [r5, #8]
   1c7ec:	6823      	ldr	r3, [r4, #0]
   1c7ee:	4628      	mov	r0, r5
   1c7f0:	0c1b      	lsrs	r3, r3, #16
   1c7f2:	041b      	lsls	r3, r3, #16
   1c7f4:	f043 0306 	orr.w	r3, r3, #6
   1c7f8:	6023      	str	r3, [r4, #0]
   1c7fa:	6827      	ldr	r7, [r4, #0]
   1c7fc:	f7ff f8ba 	bl	1b974 <rpc_ip_client_request_send>
   1c800:	4680      	mov	r8, r0
   1c802:	b9e0      	cbnz	r0, 1c83e <ip_interface_listen+0xba>
   1c804:	466b      	mov	r3, sp
   1c806:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c80a:	2107      	movs	r1, #7
   1c80c:	4630      	mov	r0, r6
   1c80e:	f005 f94b 	bl	21aa8 <interface_socket_wait>
   1c812:	4605      	mov	r5, r0
   1c814:	b308      	cbz	r0, 1c85a <ip_interface_listen+0xd6>
   1c816:	6823      	ldr	r3, [r4, #0]
   1c818:	0c1b      	lsrs	r3, r3, #16
   1c81a:	041b      	lsls	r3, r3, #16
   1c81c:	f043 0304 	orr.w	r3, r3, #4
   1c820:	6023      	str	r3, [r4, #0]
   1c822:	4628      	mov	r0, r5
   1c824:	f7fa fa08 	bl	16c38 <bsd_os_errno_set>
   1c828:	f04f 35ff 	mov.w	r5, #4294967295
   1c82c:	4628      	mov	r0, r5
   1c82e:	b002      	add	sp, #8
   1c830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c834:	9d01      	ldr	r5, [sp, #4]
   1c836:	2d00      	cmp	r5, #0
   1c838:	d1d3      	bne.n	1c7e2 <ip_interface_listen+0x5e>
   1c83a:	250c      	movs	r5, #12
   1c83c:	e7f1      	b.n	1c822 <ip_interface_listen+0x9e>
   1c83e:	6828      	ldr	r0, [r5, #0]
   1c840:	b108      	cbz	r0, 1c846 <ip_interface_listen+0xc2>
   1c842:	f7ff f8b5 	bl	1b9b0 <rpc_ip_client_data_free>
   1c846:	0c3f      	lsrs	r7, r7, #16
   1c848:	043f      	lsls	r7, r7, #16
   1c84a:	4628      	mov	r0, r5
   1c84c:	f047 0704 	orr.w	r7, r7, #4
   1c850:	f7ff f8a6 	bl	1b9a0 <rpc_ip_client_message_free>
   1c854:	2523      	movs	r5, #35	; 0x23
   1c856:	6027      	str	r7, [r4, #0]
   1c858:	e7e3      	b.n	1c822 <ip_interface_listen+0x9e>
   1c85a:	4630      	mov	r0, r6
   1c85c:	f005 f998 	bl	21b90 <interface_socket_from_handle_get>
   1c860:	2800      	cmp	r0, #0
   1c862:	d0e3      	beq.n	1c82c <ip_interface_listen+0xa8>
   1c864:	6845      	ldr	r5, [r0, #4]
   1c866:	2d00      	cmp	r5, #0
   1c868:	d0e0      	beq.n	1c82c <ip_interface_listen+0xa8>
   1c86a:	f8c0 8004 	str.w	r8, [r0, #4]
   1c86e:	e7d2      	b.n	1c816 <ip_interface_listen+0x92>
   1c870:	2523      	movs	r5, #35	; 0x23
   1c872:	e7d6      	b.n	1c822 <ip_interface_listen+0x9e>
   1c874:	2509      	movs	r5, #9
   1c876:	e7d4      	b.n	1c822 <ip_interface_listen+0x9e>
   1c878:	0001b9c1 	.word	0x0001b9c1

0001c87c <ip_interface_accept>:
   1c87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c880:	f04f 33ff 	mov.w	r3, #4294967295
   1c884:	2500      	movs	r5, #0
   1c886:	b087      	sub	sp, #28
   1c888:	460f      	mov	r7, r1
   1c88a:	4690      	mov	r8, r2
   1c88c:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1c890:	4606      	mov	r6, r0
   1c892:	f005 f97d 	bl	21b90 <interface_socket_from_handle_get>
   1c896:	4604      	mov	r4, r0
   1c898:	2800      	cmp	r0, #0
   1c89a:	f000 8123 	beq.w	1cae4 <ip_interface_accept+0x268>
   1c89e:	6803      	ldr	r3, [r0, #0]
   1c8a0:	b29b      	uxth	r3, r3
   1c8a2:	2b07      	cmp	r3, #7
   1c8a4:	d10a      	bne.n	1c8bc <ip_interface_accept+0x40>
   1c8a6:	6803      	ldr	r3, [r0, #0]
   1c8a8:	6805      	ldr	r5, [r0, #0]
   1c8aa:	00db      	lsls	r3, r3, #3
   1c8ac:	d416      	bmi.n	1c8dc <ip_interface_accept+0x60>
   1c8ae:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c8b2:	d019      	beq.n	1c8e8 <ip_interface_accept+0x6c>
   1c8b4:	6805      	ldr	r5, [r0, #0]
   1c8b6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c8ba:	d124      	bne.n	1c906 <ip_interface_accept+0x8a>
   1c8bc:	f04f 0909 	mov.w	r9, #9
   1c8c0:	9b03      	ldr	r3, [sp, #12]
   1c8c2:	b113      	cbz	r3, 1c8ca <ip_interface_accept+0x4e>
   1c8c4:	4628      	mov	r0, r5
   1c8c6:	f005 f8a1 	bl	21a0c <interface_socket_free>
   1c8ca:	4648      	mov	r0, r9
   1c8cc:	f04f 39ff 	mov.w	r9, #4294967295
   1c8d0:	f7fa f9b2 	bl	16c38 <bsd_os_errno_set>
   1c8d4:	4648      	mov	r0, r9
   1c8d6:	b007      	add	sp, #28
   1c8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8dc:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c8e0:	d170      	bne.n	1c9c4 <ip_interface_accept+0x148>
   1c8e2:	f04f 0923 	mov.w	r9, #35	; 0x23
   1c8e6:	e7eb      	b.n	1c8c0 <ip_interface_accept+0x44>
   1c8e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c8ec:	ab04      	add	r3, sp, #16
   1c8ee:	4611      	mov	r1, r2
   1c8f0:	4630      	mov	r0, r6
   1c8f2:	f005 f8d9 	bl	21aa8 <interface_socket_wait>
   1c8f6:	4681      	mov	r9, r0
   1c8f8:	2800      	cmp	r0, #0
   1c8fa:	f000 8082 	beq.w	1ca02 <ip_interface_accept+0x186>
   1c8fe:	6825      	ldr	r5, [r4, #0]
   1c900:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c904:	d0dc      	beq.n	1c8c0 <ip_interface_accept+0x44>
   1c906:	f04f 30ff 	mov.w	r0, #4294967295
   1c90a:	2300      	movs	r3, #0
   1c90c:	e9cd 0300 	strd	r0, r3, [sp]
   1c910:	4a78      	ldr	r2, [pc, #480]	; (1caf4 <ip_interface_accept+0x278>)
   1c912:	6921      	ldr	r1, [r4, #16]
   1c914:	a803      	add	r0, sp, #12
   1c916:	f005 f815 	bl	21944 <interface_socket_allocate>
   1c91a:	9b03      	ldr	r3, [sp, #12]
   1c91c:	4605      	mov	r5, r0
   1c91e:	2b00      	cmp	r3, #0
   1c920:	f000 80e4 	beq.w	1caec <ip_interface_accept+0x270>
   1c924:	2100      	movs	r1, #0
   1c926:	6962      	ldr	r2, [r4, #20]
   1c928:	a806      	add	r0, sp, #24
   1c92a:	615a      	str	r2, [r3, #20]
   1c92c:	68e2      	ldr	r2, [r4, #12]
   1c92e:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c932:	60da      	str	r2, [r3, #12]
   1c934:	6922      	ldr	r2, [r4, #16]
   1c936:	611a      	str	r2, [r3, #16]
   1c938:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1c93c:	f7ff f806 	bl	1b94c <rpc_ip_client_request_alloc>
   1c940:	2800      	cmp	r0, #0
   1c942:	d146      	bne.n	1c9d2 <ip_interface_accept+0x156>
   1c944:	f247 030c 	movw	r3, #28684	; 0x700c
   1c948:	2108      	movs	r1, #8
   1c94a:	f8dd b014 	ldr.w	fp, [sp, #20]
   1c94e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1c952:	f8cb 300c 	str.w	r3, [fp, #12]
   1c956:	f8cb 9010 	str.w	r9, [fp, #16]
   1c95a:	f88b 0009 	strb.w	r0, [fp, #9]
   1c95e:	f88b 000a 	strb.w	r0, [fp, #10]
   1c962:	f88b 000b 	strb.w	r0, [fp, #11]
   1c966:	f88b 1008 	strb.w	r1, [fp, #8]
   1c96a:	6823      	ldr	r3, [r4, #0]
   1c96c:	f247 010c 	movw	r1, #28684	; 0x700c
   1c970:	0c1b      	lsrs	r3, r3, #16
   1c972:	041b      	lsls	r3, r3, #16
   1c974:	f043 0308 	orr.w	r3, r3, #8
   1c978:	6023      	str	r3, [r4, #0]
   1c97a:	4658      	mov	r0, fp
   1c97c:	f8d4 9000 	ldr.w	r9, [r4]
   1c980:	f7fe fff8 	bl	1b974 <rpc_ip_client_request_send>
   1c984:	4682      	mov	sl, r0
   1c986:	bb60      	cbnz	r0, 1c9e2 <ip_interface_accept+0x166>
   1c988:	6822      	ldr	r2, [r4, #0]
   1c98a:	9900      	ldr	r1, [sp, #0]
   1c98c:	ab04      	add	r3, sp, #16
   1c98e:	400a      	ands	r2, r1
   1c990:	6022      	str	r2, [r4, #0]
   1c992:	2109      	movs	r1, #9
   1c994:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c998:	4630      	mov	r0, r6
   1c99a:	f005 f885 	bl	21aa8 <interface_socket_wait>
   1c99e:	4681      	mov	r9, r0
   1c9a0:	2800      	cmp	r0, #0
   1c9a2:	f000 808d 	beq.w	1cac0 <ip_interface_accept+0x244>
   1c9a6:	6823      	ldr	r3, [r4, #0]
   1c9a8:	9a01      	ldr	r2, [sp, #4]
   1c9aa:	431a      	orrs	r2, r3
   1c9ac:	6022      	str	r2, [r4, #0]
   1c9ae:	6823      	ldr	r3, [r4, #0]
   1c9b0:	0c1b      	lsrs	r3, r3, #16
   1c9b2:	041b      	lsls	r3, r3, #16
   1c9b4:	f043 0307 	orr.w	r3, r3, #7
   1c9b8:	6023      	str	r3, [r4, #0]
   1c9ba:	6823      	ldr	r3, [r4, #0]
   1c9bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1c9c0:	6023      	str	r3, [r4, #0]
   1c9c2:	e77d      	b.n	1c8c0 <ip_interface_accept+0x44>
   1c9c4:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1c9c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c9cc:	e9cd 2300 	strd	r2, r3, [sp]
   1c9d0:	e79e      	b.n	1c910 <ip_interface_accept+0x94>
   1c9d2:	f8dd b014 	ldr.w	fp, [sp, #20]
   1c9d6:	f04f 090c 	mov.w	r9, #12
   1c9da:	f1bb 0f00 	cmp.w	fp, #0
   1c9de:	d1c4      	bne.n	1c96a <ip_interface_accept+0xee>
   1c9e0:	e76e      	b.n	1c8c0 <ip_interface_accept+0x44>
   1c9e2:	f8db 0000 	ldr.w	r0, [fp]
   1c9e6:	b108      	cbz	r0, 1c9ec <ip_interface_accept+0x170>
   1c9e8:	f7fe ffe2 	bl	1b9b0 <rpc_ip_client_data_free>
   1c9ec:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1c9f0:	4658      	mov	r0, fp
   1c9f2:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1c9f6:	f7fe ffd3 	bl	1b9a0 <rpc_ip_client_message_free>
   1c9fa:	f049 0307 	orr.w	r3, r9, #7
   1c9fe:	6023      	str	r3, [r4, #0]
   1ca00:	e76f      	b.n	1c8e2 <ip_interface_accept+0x66>
   1ca02:	4630      	mov	r0, r6
   1ca04:	f005 f8c4 	bl	21b90 <interface_socket_from_handle_get>
   1ca08:	b130      	cbz	r0, 1ca18 <ip_interface_accept+0x19c>
   1ca0a:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1ca0e:	f1b9 0f00 	cmp.w	r9, #0
   1ca12:	d001      	beq.n	1ca18 <ip_interface_accept+0x19c>
   1ca14:	6045      	str	r5, [r0, #4]
   1ca16:	e772      	b.n	1c8fe <ip_interface_accept+0x82>
   1ca18:	6823      	ldr	r3, [r4, #0]
   1ca1a:	03d9      	lsls	r1, r3, #15
   1ca1c:	f53f af73 	bmi.w	1c906 <ip_interface_accept+0x8a>
   1ca20:	4d35      	ldr	r5, [pc, #212]	; (1caf8 <ip_interface_accept+0x27c>)
   1ca22:	9903      	ldr	r1, [sp, #12]
   1ca24:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1ca28:	699b      	ldr	r3, [r3, #24]
   1ca2a:	618b      	str	r3, [r1, #24]
   1ca2c:	b147      	cbz	r7, 1ca40 <ip_interface_accept+0x1c4>
   1ca2e:	68cb      	ldr	r3, [r1, #12]
   1ca30:	2b0a      	cmp	r3, #10
   1ca32:	d028      	beq.n	1ca86 <ip_interface_accept+0x20a>
   1ca34:	2b02      	cmp	r3, #2
   1ca36:	d103      	bne.n	1ca40 <ip_interface_accept+0x1c4>
   1ca38:	f8d8 2000 	ldr.w	r2, [r8]
   1ca3c:	2a10      	cmp	r2, #16
   1ca3e:	d036      	beq.n	1caae <ip_interface_accept+0x232>
   1ca40:	680a      	ldr	r2, [r1, #0]
   1ca42:	482e      	ldr	r0, [pc, #184]	; (1cafc <ip_interface_accept+0x280>)
   1ca44:	4002      	ands	r2, r0
   1ca46:	f042 0205 	orr.w	r2, r2, #5
   1ca4a:	600a      	str	r2, [r1, #0]
   1ca4c:	9a03      	ldr	r2, [sp, #12]
   1ca4e:	6811      	ldr	r1, [r2, #0]
   1ca50:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   1ca54:	6011      	str	r1, [r2, #0]
   1ca56:	6811      	ldr	r1, [r2, #0]
   1ca58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ca5c:	6011      	str	r1, [r2, #0]
   1ca5e:	6823      	ldr	r3, [r4, #0]
   1ca60:	4003      	ands	r3, r0
   1ca62:	f043 0307 	orr.w	r3, r3, #7
   1ca66:	6023      	str	r3, [r4, #0]
   1ca68:	6823      	ldr	r3, [r4, #0]
   1ca6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ca6e:	6023      	str	r3, [r4, #0]
   1ca70:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1ca74:	f7fe ff94 	bl	1b9a0 <rpc_ip_client_message_free>
   1ca78:	2300      	movs	r3, #0
   1ca7a:	4648      	mov	r0, r9
   1ca7c:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   1ca80:	b007      	add	sp, #28
   1ca82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca86:	f8d8 2000 	ldr.w	r2, [r8]
   1ca8a:	2a24      	cmp	r2, #36	; 0x24
   1ca8c:	d1d8      	bne.n	1ca40 <ip_interface_accept+0x1c4>
   1ca8e:	703a      	strb	r2, [r7, #0]
   1ca90:	2210      	movs	r2, #16
   1ca92:	607b      	str	r3, [r7, #4]
   1ca94:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1ca98:	f107 0010 	add.w	r0, r7, #16
   1ca9c:	8b9b      	ldrh	r3, [r3, #28]
   1ca9e:	813b      	strh	r3, [r7, #8]
   1caa0:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1caa4:	3120      	adds	r1, #32
   1caa6:	f7f0 f851 	bl	cb4c <memcpy>
   1caaa:	9903      	ldr	r1, [sp, #12]
   1caac:	e7c8      	b.n	1ca40 <ip_interface_accept+0x1c4>
   1caae:	703a      	strb	r2, [r7, #0]
   1cab0:	607b      	str	r3, [r7, #4]
   1cab2:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cab6:	f107 000c 	add.w	r0, r7, #12
   1caba:	8b9b      	ldrh	r3, [r3, #28]
   1cabc:	2204      	movs	r2, #4
   1cabe:	e7ee      	b.n	1ca9e <ip_interface_accept+0x222>
   1cac0:	4630      	mov	r0, r6
   1cac2:	f005 f865 	bl	21b90 <interface_socket_from_handle_get>
   1cac6:	b138      	cbz	r0, 1cad8 <ip_interface_accept+0x25c>
   1cac8:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1cacc:	f1b9 0f00 	cmp.w	r9, #0
   1cad0:	d002      	beq.n	1cad8 <ip_interface_accept+0x25c>
   1cad2:	f8c0 a004 	str.w	sl, [r0, #4]
   1cad6:	e766      	b.n	1c9a6 <ip_interface_accept+0x12a>
   1cad8:	6823      	ldr	r3, [r4, #0]
   1cada:	9a01      	ldr	r2, [sp, #4]
   1cadc:	46a9      	mov	r9, r5
   1cade:	4313      	orrs	r3, r2
   1cae0:	6023      	str	r3, [r4, #0]
   1cae2:	e79d      	b.n	1ca20 <ip_interface_accept+0x1a4>
   1cae4:	4605      	mov	r5, r0
   1cae6:	f04f 0909 	mov.w	r9, #9
   1caea:	e6e9      	b.n	1c8c0 <ip_interface_accept+0x44>
   1caec:	f04f 090c 	mov.w	r9, #12
   1caf0:	e6eb      	b.n	1c8ca <ip_interface_accept+0x4e>
   1caf2:	bf00      	nop
   1caf4:	0001b9c1 	.word	0x0001b9c1
   1caf8:	20021a00 	.word	0x20021a00
   1cafc:	ffff0000 	.word	0xffff0000

0001cb00 <ip_interface_setopt>:
   1cb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb04:	2901      	cmp	r1, #1
   1cb06:	b084      	sub	sp, #16
   1cb08:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1cb0a:	f040 808a 	bne.w	1cc22 <ip_interface_setopt+0x122>
   1cb0e:	4617      	mov	r7, r2
   1cb10:	461d      	mov	r5, r3
   1cb12:	4680      	mov	r8, r0
   1cb14:	f005 f83c 	bl	21b90 <interface_socket_from_handle_get>
   1cb18:	4604      	mov	r4, r0
   1cb1a:	2800      	cmp	r0, #0
   1cb1c:	f000 808d 	beq.w	1cc3a <ip_interface_setopt+0x13a>
   1cb20:	f1a7 0119 	sub.w	r1, r7, #25
   1cb24:	290f      	cmp	r1, #15
   1cb26:	d872      	bhi.n	1cc0e <ip_interface_setopt+0x10e>
   1cb28:	e8df f001 	tbb	[pc, r1]
   1cb2c:	7171711a 	.word	0x7171711a
   1cb30:	61514071 	.word	0x61514071
   1cb34:	71717171 	.word	0x71717171
   1cb38:	08717171 	.word	0x08717171
   1cb3c:	2e04      	cmp	r6, #4
   1cb3e:	d176      	bne.n	1cc2e <ip_interface_setopt+0x12e>
   1cb40:	2d00      	cmp	r5, #0
   1cb42:	d074      	beq.n	1cc2e <ip_interface_setopt+0x12e>
   1cb44:	4601      	mov	r1, r0
   1cb46:	e9cd 5600 	strd	r5, r6, [sp]
   1cb4a:	4640      	mov	r0, r8
   1cb4c:	f241 0304 	movw	r3, #4100	; 0x1004
   1cb50:	2208      	movs	r2, #8
   1cb52:	f7ff fcff 	bl	1c554 <ip_interface_socketoption_send>
   1cb56:	bb20      	cbnz	r0, 1cba2 <ip_interface_setopt+0xa2>
   1cb58:	2000      	movs	r0, #0
   1cb5a:	b004      	add	sp, #16
   1cb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cb60:	2d00      	cmp	r5, #0
   1cb62:	d06c      	beq.n	1cc3e <ip_interface_setopt+0x13e>
   1cb64:	4628      	mov	r0, r5
   1cb66:	f009 fe3d 	bl	267e4 <strlen>
   1cb6a:	42b0      	cmp	r0, r6
   1cb6c:	d167      	bne.n	1cc3e <ip_interface_setopt+0x13e>
   1cb6e:	6823      	ldr	r3, [r4, #0]
   1cb70:	b29b      	uxth	r3, r3
   1cb72:	2b02      	cmp	r3, #2
   1cb74:	d161      	bne.n	1cc3a <ip_interface_setopt+0x13a>
   1cb76:	4629      	mov	r1, r5
   1cb78:	68e0      	ldr	r0, [r4, #12]
   1cb7a:	f002 fdc1 	bl	1f700 <pdn_interface_pdn_id_get>
   1cb7e:	9003      	str	r0, [sp, #12]
   1cb80:	3001      	adds	r0, #1
   1cb82:	bf08      	it	eq
   1cb84:	2016      	moveq	r0, #22
   1cb86:	d00c      	beq.n	1cba2 <ip_interface_setopt+0xa2>
   1cb88:	2204      	movs	r2, #4
   1cb8a:	ab03      	add	r3, sp, #12
   1cb8c:	e9cd 3200 	strd	r3, r2, [sp]
   1cb90:	4621      	mov	r1, r4
   1cb92:	4640      	mov	r0, r8
   1cb94:	f243 0310 	movw	r3, #12304	; 0x3010
   1cb98:	2208      	movs	r2, #8
   1cb9a:	f7ff fcdb 	bl	1c554 <ip_interface_socketoption_send>
   1cb9e:	2800      	cmp	r0, #0
   1cba0:	d0da      	beq.n	1cb58 <ip_interface_setopt+0x58>
   1cba2:	f7fa f849 	bl	16c38 <bsd_os_errno_set>
   1cba6:	f04f 30ff 	mov.w	r0, #4294967295
   1cbaa:	e7d6      	b.n	1cb5a <ip_interface_setopt+0x5a>
   1cbac:	2e04      	cmp	r6, #4
   1cbae:	d13e      	bne.n	1cc2e <ip_interface_setopt+0x12e>
   1cbb0:	2d00      	cmp	r5, #0
   1cbb2:	d03c      	beq.n	1cc2e <ip_interface_setopt+0x12e>
   1cbb4:	4601      	mov	r1, r0
   1cbb6:	e9cd 5600 	strd	r5, r6, [sp]
   1cbba:	4640      	mov	r0, r8
   1cbbc:	f248 0301 	movw	r3, #32769	; 0x8001
   1cbc0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cbc4:	f7ff fcc6 	bl	1c554 <ip_interface_socketoption_send>
   1cbc8:	2800      	cmp	r0, #0
   1cbca:	d0c5      	beq.n	1cb58 <ip_interface_setopt+0x58>
   1cbcc:	e7e9      	b.n	1cba2 <ip_interface_setopt+0xa2>
   1cbce:	2e04      	cmp	r6, #4
   1cbd0:	d12d      	bne.n	1cc2e <ip_interface_setopt+0x12e>
   1cbd2:	b365      	cbz	r5, 1cc2e <ip_interface_setopt+0x12e>
   1cbd4:	4601      	mov	r1, r0
   1cbd6:	e9cd 5600 	strd	r5, r6, [sp]
   1cbda:	4640      	mov	r0, r8
   1cbdc:	f244 0310 	movw	r3, #16400	; 0x4010
   1cbe0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cbe4:	f7ff fcb6 	bl	1c554 <ip_interface_socketoption_send>
   1cbe8:	2800      	cmp	r0, #0
   1cbea:	d0b5      	beq.n	1cb58 <ip_interface_setopt+0x58>
   1cbec:	e7d9      	b.n	1cba2 <ip_interface_setopt+0xa2>
   1cbee:	2e04      	cmp	r6, #4
   1cbf0:	d11d      	bne.n	1cc2e <ip_interface_setopt+0x12e>
   1cbf2:	b1e5      	cbz	r5, 1cc2e <ip_interface_setopt+0x12e>
   1cbf4:	4601      	mov	r1, r0
   1cbf6:	e9cd 5600 	strd	r5, r6, [sp]
   1cbfa:	4640      	mov	r0, r8
   1cbfc:	f246 0310 	movw	r3, #24592	; 0x6010
   1cc00:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cc04:	f7ff fca6 	bl	1c554 <ip_interface_socketoption_send>
   1cc08:	2800      	cmp	r0, #0
   1cc0a:	d0a5      	beq.n	1cb58 <ip_interface_setopt+0x58>
   1cc0c:	e7c9      	b.n	1cba2 <ip_interface_setopt+0xa2>
   1cc0e:	9600      	str	r6, [sp, #0]
   1cc10:	462b      	mov	r3, r5
   1cc12:	463a      	mov	r2, r7
   1cc14:	4640      	mov	r0, r8
   1cc16:	2101      	movs	r1, #1
   1cc18:	f004 ffe2 	bl	21be0 <interface_socket_setopt>
   1cc1c:	b004      	add	sp, #16
   1cc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc22:	202a      	movs	r0, #42	; 0x2a
   1cc24:	f7fa f808 	bl	16c38 <bsd_os_errno_set>
   1cc28:	f04f 30ff 	mov.w	r0, #4294967295
   1cc2c:	e795      	b.n	1cb5a <ip_interface_setopt+0x5a>
   1cc2e:	2016      	movs	r0, #22
   1cc30:	f7fa f802 	bl	16c38 <bsd_os_errno_set>
   1cc34:	f04f 30ff 	mov.w	r0, #4294967295
   1cc38:	e78f      	b.n	1cb5a <ip_interface_setopt+0x5a>
   1cc3a:	2009      	movs	r0, #9
   1cc3c:	e7b1      	b.n	1cba2 <ip_interface_setopt+0xa2>
   1cc3e:	200e      	movs	r0, #14
   1cc40:	e7af      	b.n	1cba2 <ip_interface_setopt+0xa2>
   1cc42:	bf00      	nop

0001cc44 <ip_interface_getopt>:
   1cc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc48:	2901      	cmp	r1, #1
   1cc4a:	b082      	sub	sp, #8
   1cc4c:	9c08      	ldr	r4, [sp, #32]
   1cc4e:	d173      	bne.n	1cd38 <ip_interface_getopt+0xf4>
   1cc50:	4617      	mov	r7, r2
   1cc52:	461e      	mov	r6, r3
   1cc54:	4680      	mov	r8, r0
   1cc56:	f004 ff9b 	bl	21b90 <interface_socket_from_handle_get>
   1cc5a:	2800      	cmp	r0, #0
   1cc5c:	d072      	beq.n	1cd44 <ip_interface_getopt+0x100>
   1cc5e:	f1a7 051e 	sub.w	r5, r7, #30
   1cc62:	2d0a      	cmp	r5, #10
   1cc64:	d858      	bhi.n	1cd18 <ip_interface_getopt+0xd4>
   1cc66:	e8df f005 	tbb	[pc, r5]
   1cc6a:	331b      	.short	0x331b
   1cc6c:	57575745 	.word	0x57575745
   1cc70:	57575757 	.word	0x57575757
   1cc74:	06          	.byte	0x06
   1cc75:	00          	.byte	0x00
   1cc76:	2c00      	cmp	r4, #0
   1cc78:	d058      	beq.n	1cd2c <ip_interface_getopt+0xe8>
   1cc7a:	6823      	ldr	r3, [r4, #0]
   1cc7c:	2b04      	cmp	r3, #4
   1cc7e:	d155      	bne.n	1cd2c <ip_interface_getopt+0xe8>
   1cc80:	2e00      	cmp	r6, #0
   1cc82:	d053      	beq.n	1cd2c <ip_interface_getopt+0xe8>
   1cc84:	4601      	mov	r1, r0
   1cc86:	e9cd 6400 	strd	r6, r4, [sp]
   1cc8a:	4640      	mov	r0, r8
   1cc8c:	f241 0304 	movw	r3, #4100	; 0x1004
   1cc90:	2208      	movs	r2, #8
   1cc92:	f7ff fbaf 	bl	1c3f4 <ip_interface_socketoption_get>
   1cc96:	b9b0      	cbnz	r0, 1ccc6 <ip_interface_getopt+0x82>
   1cc98:	2000      	movs	r0, #0
   1cc9a:	b002      	add	sp, #8
   1cc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cca0:	2c00      	cmp	r4, #0
   1cca2:	d043      	beq.n	1cd2c <ip_interface_getopt+0xe8>
   1cca4:	6823      	ldr	r3, [r4, #0]
   1cca6:	2b04      	cmp	r3, #4
   1cca8:	d140      	bne.n	1cd2c <ip_interface_getopt+0xe8>
   1ccaa:	2e00      	cmp	r6, #0
   1ccac:	d03e      	beq.n	1cd2c <ip_interface_getopt+0xe8>
   1ccae:	4601      	mov	r1, r0
   1ccb0:	e9cd 6400 	strd	r6, r4, [sp]
   1ccb4:	4640      	mov	r0, r8
   1ccb6:	f248 0301 	movw	r3, #32769	; 0x8001
   1ccba:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ccbe:	f7ff fb99 	bl	1c3f4 <ip_interface_socketoption_get>
   1ccc2:	2800      	cmp	r0, #0
   1ccc4:	d0e8      	beq.n	1cc98 <ip_interface_getopt+0x54>
   1ccc6:	f7f9 ffb7 	bl	16c38 <bsd_os_errno_set>
   1ccca:	f04f 30ff 	mov.w	r0, #4294967295
   1ccce:	e7e4      	b.n	1cc9a <ip_interface_getopt+0x56>
   1ccd0:	b364      	cbz	r4, 1cd2c <ip_interface_getopt+0xe8>
   1ccd2:	6823      	ldr	r3, [r4, #0]
   1ccd4:	2b04      	cmp	r3, #4
   1ccd6:	d129      	bne.n	1cd2c <ip_interface_getopt+0xe8>
   1ccd8:	b346      	cbz	r6, 1cd2c <ip_interface_getopt+0xe8>
   1ccda:	4601      	mov	r1, r0
   1ccdc:	e9cd 6400 	strd	r6, r4, [sp]
   1cce0:	4640      	mov	r0, r8
   1cce2:	f244 0310 	movw	r3, #16400	; 0x4010
   1cce6:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ccea:	f7ff fb83 	bl	1c3f4 <ip_interface_socketoption_get>
   1ccee:	2800      	cmp	r0, #0
   1ccf0:	d0d2      	beq.n	1cc98 <ip_interface_getopt+0x54>
   1ccf2:	e7e8      	b.n	1ccc6 <ip_interface_getopt+0x82>
   1ccf4:	b1d4      	cbz	r4, 1cd2c <ip_interface_getopt+0xe8>
   1ccf6:	6823      	ldr	r3, [r4, #0]
   1ccf8:	2b04      	cmp	r3, #4
   1ccfa:	d117      	bne.n	1cd2c <ip_interface_getopt+0xe8>
   1ccfc:	b1b6      	cbz	r6, 1cd2c <ip_interface_getopt+0xe8>
   1ccfe:	4601      	mov	r1, r0
   1cd00:	e9cd 6400 	strd	r6, r4, [sp]
   1cd04:	4640      	mov	r0, r8
   1cd06:	f246 0310 	movw	r3, #24592	; 0x6010
   1cd0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cd0e:	f7ff fb71 	bl	1c3f4 <ip_interface_socketoption_get>
   1cd12:	2800      	cmp	r0, #0
   1cd14:	d0c0      	beq.n	1cc98 <ip_interface_getopt+0x54>
   1cd16:	e7d6      	b.n	1ccc6 <ip_interface_getopt+0x82>
   1cd18:	4633      	mov	r3, r6
   1cd1a:	463a      	mov	r2, r7
   1cd1c:	4640      	mov	r0, r8
   1cd1e:	2101      	movs	r1, #1
   1cd20:	9408      	str	r4, [sp, #32]
   1cd22:	b002      	add	sp, #8
   1cd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cd28:	f004 bfa0 	b.w	21c6c <interface_socket_getopt>
   1cd2c:	2016      	movs	r0, #22
   1cd2e:	f7f9 ff83 	bl	16c38 <bsd_os_errno_set>
   1cd32:	f04f 30ff 	mov.w	r0, #4294967295
   1cd36:	e7b0      	b.n	1cc9a <ip_interface_getopt+0x56>
   1cd38:	202a      	movs	r0, #42	; 0x2a
   1cd3a:	f7f9 ff7d 	bl	16c38 <bsd_os_errno_set>
   1cd3e:	f04f 30ff 	mov.w	r0, #4294967295
   1cd42:	e7aa      	b.n	1cc9a <ip_interface_getopt+0x56>
   1cd44:	2009      	movs	r0, #9
   1cd46:	f7f9 ff77 	bl	16c38 <bsd_os_errno_set>
   1cd4a:	f04f 30ff 	mov.w	r0, #4294967295
   1cd4e:	e7a4      	b.n	1cc9a <ip_interface_getopt+0x56>

0001cd50 <ip_interface_getaddrinfo>:
   1cd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd54:	f04f 0c00 	mov.w	ip, #0
   1cd58:	2401      	movs	r4, #1
   1cd5a:	4e75      	ldr	r6, [pc, #468]	; (1cf30 <ip_interface_getaddrinfo+0x1e0>)
   1cd5c:	4d75      	ldr	r5, [pc, #468]	; (1cf34 <ip_interface_getaddrinfo+0x1e4>)
   1cd5e:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 1cf44 <ip_interface_getaddrinfo+0x1f4>
   1cd62:	4f75      	ldr	r7, [pc, #468]	; (1cf38 <ip_interface_getaddrinfo+0x1e8>)
   1cd64:	7836      	ldrb	r6, [r6, #0]
   1cd66:	b085      	sub	sp, #20
   1cd68:	f8a5 c000 	strh.w	ip, [r5]
   1cd6c:	f8c8 4000 	str.w	r4, [r8]
   1cd70:	603c      	str	r4, [r7, #0]
   1cd72:	2e00      	cmp	r6, #0
   1cd74:	d05b      	beq.n	1ce2e <ip_interface_getaddrinfo+0xde>
   1cd76:	9301      	str	r3, [sp, #4]
   1cd78:	4614      	mov	r4, r2
   1cd7a:	460b      	mov	r3, r1
   1cd7c:	4606      	mov	r6, r0
   1cd7e:	b171      	cbz	r1, 1cd9e <ip_interface_getaddrinfo+0x4e>
   1cd80:	4618      	mov	r0, r3
   1cd82:	220a      	movs	r2, #10
   1cd84:	4661      	mov	r1, ip
   1cd86:	f00a f881 	bl	26e8c <strtol>
   1cd8a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1cd8e:	1e42      	subs	r2, r0, #1
   1cd90:	429a      	cmp	r2, r3
   1cd92:	f200 8097 	bhi.w	1cec4 <ip_interface_getaddrinfo+0x174>
   1cd96:	0203      	lsls	r3, r0, #8
   1cd98:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1cd9c:	8028      	strh	r0, [r5, #0]
   1cd9e:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 1cf48 <ip_interface_getaddrinfo+0x1f8>
   1cda2:	f8da 3000 	ldr.w	r3, [sl]
   1cda6:	2b00      	cmp	r3, #0
   1cda8:	d145      	bne.n	1ce36 <ip_interface_getaddrinfo+0xe6>
   1cdaa:	4a64      	ldr	r2, [pc, #400]	; (1cf3c <ip_interface_getaddrinfo+0x1ec>)
   1cdac:	6013      	str	r3, [r2, #0]
   1cdae:	4a64      	ldr	r2, [pc, #400]	; (1cf40 <ip_interface_getaddrinfo+0x1f0>)
   1cdb0:	6013      	str	r3, [r2, #0]
   1cdb2:	2e00      	cmp	r6, #0
   1cdb4:	d07a      	beq.n	1ceac <ip_interface_getaddrinfo+0x15c>
   1cdb6:	4630      	mov	r0, r6
   1cdb8:	f009 fd14 	bl	267e4 <strlen>
   1cdbc:	4683      	mov	fp, r0
   1cdbe:	b144      	cbz	r4, 1cdd2 <ip_interface_getaddrinfo+0x82>
   1cdc0:	69e2      	ldr	r2, [r4, #28]
   1cdc2:	b132      	cbz	r2, 1cdd2 <ip_interface_getaddrinfo+0x82>
   1cdc4:	6851      	ldr	r1, [r2, #4]
   1cdc6:	2966      	cmp	r1, #102	; 0x66
   1cdc8:	d103      	bne.n	1cdd2 <ip_interface_getaddrinfo+0x82>
   1cdca:	6891      	ldr	r1, [r2, #8]
   1cdcc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1cdd0:	d07e      	beq.n	1ced0 <ip_interface_getaddrinfo+0x180>
   1cdd2:	f04f 32ff 	mov.w	r2, #4294967295
   1cdd6:	2100      	movs	r1, #0
   1cdd8:	f10d 0910 	add.w	r9, sp, #16
   1cddc:	f849 1d04 	str.w	r1, [r9, #-4]!
   1cde0:	4648      	mov	r0, r9
   1cde2:	4659      	mov	r1, fp
   1cde4:	9200      	str	r2, [sp, #0]
   1cde6:	f7fe fdb1 	bl	1b94c <rpc_ip_client_request_alloc>
   1cdea:	9a00      	ldr	r2, [sp, #0]
   1cdec:	2800      	cmp	r0, #0
   1cdee:	d15f      	bne.n	1ceb0 <ip_interface_getaddrinfo+0x160>
   1cdf0:	f247 010d 	movw	r1, #28685	; 0x700d
   1cdf4:	f04f 0c08 	mov.w	ip, #8
   1cdf8:	9d03      	ldr	r5, [sp, #12]
   1cdfa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1cdfe:	60e9      	str	r1, [r5, #12]
   1ce00:	612a      	str	r2, [r5, #16]
   1ce02:	7268      	strb	r0, [r5, #9]
   1ce04:	72a8      	strb	r0, [r5, #10]
   1ce06:	72e8      	strb	r0, [r5, #11]
   1ce08:	f885 c008 	strb.w	ip, [r5, #8]
   1ce0c:	2c00      	cmp	r4, #0
   1ce0e:	d076      	beq.n	1cefe <ip_interface_getaddrinfo+0x1ae>
   1ce10:	6862      	ldr	r2, [r4, #4]
   1ce12:	f022 0108 	bic.w	r1, r2, #8
   1ce16:	2902      	cmp	r1, #2
   1ce18:	d011      	beq.n	1ce3e <ip_interface_getaddrinfo+0xee>
   1ce1a:	2a05      	cmp	r2, #5
   1ce1c:	d176      	bne.n	1cf0c <ip_interface_getaddrinfo+0x1bc>
   1ce1e:	68a1      	ldr	r1, [r4, #8]
   1ce20:	2902      	cmp	r1, #2
   1ce22:	6039      	str	r1, [r7, #0]
   1ce24:	d115      	bne.n	1ce52 <ip_interface_getaddrinfo+0x102>
   1ce26:	2102      	movs	r1, #2
   1ce28:	f8c8 1000 	str.w	r1, [r8]
   1ce2c:	e00b      	b.n	1ce46 <ip_interface_getaddrinfo+0xf6>
   1ce2e:	2070      	movs	r0, #112	; 0x70
   1ce30:	b005      	add	sp, #20
   1ce32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce36:	2073      	movs	r0, #115	; 0x73
   1ce38:	b005      	add	sp, #20
   1ce3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce3e:	68a1      	ldr	r1, [r4, #8]
   1ce40:	2902      	cmp	r1, #2
   1ce42:	6039      	str	r1, [r7, #0]
   1ce44:	d0ef      	beq.n	1ce26 <ip_interface_getaddrinfo+0xd6>
   1ce46:	2a05      	cmp	r2, #5
   1ce48:	d003      	beq.n	1ce52 <ip_interface_getaddrinfo+0x102>
   1ce4a:	2a0a      	cmp	r2, #10
   1ce4c:	bf14      	ite	ne
   1ce4e:	2201      	movne	r2, #1
   1ce50:	2202      	moveq	r2, #2
   1ce52:	61aa      	str	r2, [r5, #24]
   1ce54:	68e2      	ldr	r2, [r4, #12]
   1ce56:	622a      	str	r2, [r5, #32]
   1ce58:	68a2      	ldr	r2, [r4, #8]
   1ce5a:	61ea      	str	r2, [r5, #28]
   1ce5c:	6822      	ldr	r2, [r4, #0]
   1ce5e:	616a      	str	r2, [r5, #20]
   1ce60:	68aa      	ldr	r2, [r5, #8]
   1ce62:	3210      	adds	r2, #16
   1ce64:	60aa      	str	r2, [r5, #8]
   1ce66:	b12e      	cbz	r6, 1ce74 <ip_interface_getaddrinfo+0x124>
   1ce68:	6828      	ldr	r0, [r5, #0]
   1ce6a:	b118      	cbz	r0, 1ce74 <ip_interface_getaddrinfo+0x124>
   1ce6c:	465a      	mov	r2, fp
   1ce6e:	4631      	mov	r1, r6
   1ce70:	f7ef fe6c 	bl	cb4c <memcpy>
   1ce74:	2301      	movs	r3, #1
   1ce76:	f247 010d 	movw	r1, #28685	; 0x700d
   1ce7a:	4628      	mov	r0, r5
   1ce7c:	f8ca 3000 	str.w	r3, [sl]
   1ce80:	f7fe fd78 	bl	1b974 <rpc_ip_client_request_send>
   1ce84:	bb10      	cbnz	r0, 1cecc <ip_interface_getaddrinfo+0x17c>
   1ce86:	f04f 33ff 	mov.w	r3, #4294967295
   1ce8a:	9303      	str	r3, [sp, #12]
   1ce8c:	4649      	mov	r1, r9
   1ce8e:	4628      	mov	r0, r5
   1ce90:	f7f9 fe1a 	bl	16ac8 <bsd_os_timedwait>
   1ce94:	f8da 3000 	ldr.w	r3, [sl]
   1ce98:	2b01      	cmp	r3, #1
   1ce9a:	d0f7      	beq.n	1ce8c <ip_interface_getaddrinfo+0x13c>
   1ce9c:	4b28      	ldr	r3, [pc, #160]	; (1cf40 <ip_interface_getaddrinfo+0x1f0>)
   1ce9e:	6818      	ldr	r0, [r3, #0]
   1cea0:	bb40      	cbnz	r0, 1cef4 <ip_interface_getaddrinfo+0x1a4>
   1cea2:	4b26      	ldr	r3, [pc, #152]	; (1cf3c <ip_interface_getaddrinfo+0x1ec>)
   1cea4:	9a01      	ldr	r2, [sp, #4]
   1cea6:	681b      	ldr	r3, [r3, #0]
   1cea8:	6013      	str	r3, [r2, #0]
   1ceaa:	e7c1      	b.n	1ce30 <ip_interface_getaddrinfo+0xe0>
   1ceac:	46b3      	mov	fp, r6
   1ceae:	e786      	b.n	1cdbe <ip_interface_getaddrinfo+0x6e>
   1ceb0:	9d03      	ldr	r5, [sp, #12]
   1ceb2:	2d00      	cmp	r5, #0
   1ceb4:	d1aa      	bne.n	1ce0c <ip_interface_getaddrinfo+0xbc>
   1ceb6:	200c      	movs	r0, #12
   1ceb8:	2300      	movs	r3, #0
   1ceba:	f8ca 3000 	str.w	r3, [sl]
   1cebe:	b005      	add	sp, #20
   1cec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cec4:	2016      	movs	r0, #22
   1cec6:	b005      	add	sp, #20
   1cec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cecc:	2023      	movs	r0, #35	; 0x23
   1cece:	e7f3      	b.n	1ceb8 <ip_interface_getaddrinfo+0x168>
   1ced0:	f240 2002 	movw	r0, #514	; 0x202
   1ced4:	68d1      	ldr	r1, [r2, #12]
   1ced6:	4281      	cmp	r1, r0
   1ced8:	f47f af7b 	bne.w	1cdd2 <ip_interface_getaddrinfo+0x82>
   1cedc:	6991      	ldr	r1, [r2, #24]
   1cede:	2900      	cmp	r1, #0
   1cee0:	f43f af77 	beq.w	1cdd2 <ip_interface_getaddrinfo+0x82>
   1cee4:	6860      	ldr	r0, [r4, #4]
   1cee6:	f002 fc0b 	bl	1f700 <pdn_interface_pdn_id_get>
   1ceea:	1c43      	adds	r3, r0, #1
   1ceec:	f43f af71 	beq.w	1cdd2 <ip_interface_getaddrinfo+0x82>
   1cef0:	4602      	mov	r2, r0
   1cef2:	e770      	b.n	1cdd6 <ip_interface_getaddrinfo+0x86>
   1cef4:	4b12      	ldr	r3, [pc, #72]	; (1cf40 <ip_interface_getaddrinfo+0x1f0>)
   1cef6:	6818      	ldr	r0, [r3, #0]
   1cef8:	2800      	cmp	r0, #0
   1cefa:	d099      	beq.n	1ce30 <ip_interface_getaddrinfo+0xe0>
   1cefc:	e7dc      	b.n	1ceb8 <ip_interface_getaddrinfo+0x168>
   1cefe:	4621      	mov	r1, r4
   1cf00:	2210      	movs	r2, #16
   1cf02:	f105 0014 	add.w	r0, r5, #20
   1cf06:	f009 f85d 	bl	25fc4 <memset>
   1cf0a:	e7a9      	b.n	1ce60 <ip_interface_getaddrinfo+0x110>
   1cf0c:	202f      	movs	r0, #47	; 0x2f
   1cf0e:	f7f9 fe93 	bl	16c38 <bsd_os_errno_set>
   1cf12:	68aa      	ldr	r2, [r5, #8]
   1cf14:	3210      	adds	r2, #16
   1cf16:	60aa      	str	r2, [r5, #8]
   1cf18:	b916      	cbnz	r6, 1cf20 <ip_interface_getaddrinfo+0x1d0>
   1cf1a:	f04f 30ff 	mov.w	r0, #4294967295
   1cf1e:	e7cb      	b.n	1ceb8 <ip_interface_getaddrinfo+0x168>
   1cf20:	6828      	ldr	r0, [r5, #0]
   1cf22:	2800      	cmp	r0, #0
   1cf24:	d0f9      	beq.n	1cf1a <ip_interface_getaddrinfo+0x1ca>
   1cf26:	465a      	mov	r2, fp
   1cf28:	4631      	mov	r1, r6
   1cf2a:	f7ef fe0f 	bl	cb4c <memcpy>
   1cf2e:	e7f4      	b.n	1cf1a <ip_interface_getaddrinfo+0x1ca>
   1cf30:	2002628e 	.word	0x2002628e
   1cf34:	200242bc 	.word	0x200242bc
   1cf38:	200219f0 	.word	0x200219f0
   1cf3c:	200219fc 	.word	0x200219fc
   1cf40:	200219f4 	.word	0x200219f4
   1cf44:	200219ec 	.word	0x200219ec
   1cf48:	200219f8 	.word	0x200219f8

0001cf4c <ip_interface_freeaddrinfo>:
   1cf4c:	b538      	push	{r3, r4, r5, lr}
   1cf4e:	4d0b      	ldr	r5, [pc, #44]	; (1cf7c <ip_interface_freeaddrinfo+0x30>)
   1cf50:	682b      	ldr	r3, [r5, #0]
   1cf52:	2b02      	cmp	r3, #2
   1cf54:	d000      	beq.n	1cf58 <ip_interface_freeaddrinfo+0xc>
   1cf56:	bd38      	pop	{r3, r4, r5, pc}
   1cf58:	b150      	cbz	r0, 1cf70 <ip_interface_freeaddrinfo+0x24>
   1cf5a:	4604      	mov	r4, r0
   1cf5c:	6940      	ldr	r0, [r0, #20]
   1cf5e:	f004 f919 	bl	21194 <nrf_free>
   1cf62:	69a0      	ldr	r0, [r4, #24]
   1cf64:	b108      	cbz	r0, 1cf6a <ip_interface_freeaddrinfo+0x1e>
   1cf66:	f004 f915 	bl	21194 <nrf_free>
   1cf6a:	4620      	mov	r0, r4
   1cf6c:	f004 f912 	bl	21194 <nrf_free>
   1cf70:	2300      	movs	r3, #0
   1cf72:	4a03      	ldr	r2, [pc, #12]	; (1cf80 <ip_interface_freeaddrinfo+0x34>)
   1cf74:	602b      	str	r3, [r5, #0]
   1cf76:	6013      	str	r3, [r2, #0]
   1cf78:	bd38      	pop	{r3, r4, r5, pc}
   1cf7a:	bf00      	nop
   1cf7c:	200219f8 	.word	0x200219f8
   1cf80:	200219f4 	.word	0x200219f4

0001cf84 <rpc_ip_event_handler>:
   1cf84:	f248 030d 	movw	r3, #32781	; 0x800d
   1cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf8c:	4299      	cmp	r1, r3
   1cf8e:	b089      	sub	sp, #36	; 0x24
   1cf90:	4604      	mov	r4, r0
   1cf92:	d05c      	beq.n	1d04e <rpc_ip_event_handler+0xca>
   1cf94:	f248 030f 	movw	r3, #32783	; 0x800f
   1cf98:	4299      	cmp	r1, r3
   1cf9a:	460d      	mov	r5, r1
   1cf9c:	d045      	beq.n	1d02a <rpc_ip_event_handler+0xa6>
   1cf9e:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1cfa2:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1cfa6:	68c0      	ldr	r0, [r0, #12]
   1cfa8:	d075      	beq.n	1d096 <rpc_ip_event_handler+0x112>
   1cfaa:	0c06      	lsrs	r6, r0, #16
   1cfac:	4630      	mov	r0, r6
   1cfae:	f004 fdef 	bl	21b90 <interface_socket_from_handle_get>
   1cfb2:	4607      	mov	r7, r0
   1cfb4:	2800      	cmp	r0, #0
   1cfb6:	d059      	beq.n	1d06c <rpc_ip_event_handler+0xe8>
   1cfb8:	4601      	mov	r1, r0
   1cfba:	462b      	mov	r3, r5
   1cfbc:	4622      	mov	r2, r4
   1cfbe:	4630      	mov	r0, r6
   1cfc0:	f7fe fc36 	bl	1b830 <tls_rpc_ip_event_handler>
   1cfc4:	2800      	cmp	r0, #0
   1cfc6:	d04d      	beq.n	1d064 <rpc_ip_event_handler+0xe0>
   1cfc8:	f248 0307 	movw	r3, #32775	; 0x8007
   1cfcc:	429d      	cmp	r5, r3
   1cfce:	d866      	bhi.n	1d09e <rpc_ip_event_handler+0x11a>
   1cfd0:	f248 0306 	movw	r3, #32774	; 0x8006
   1cfd4:	429d      	cmp	r5, r3
   1cfd6:	f080 81e7 	bcs.w	1d3a8 <rpc_ip_event_handler+0x424>
   1cfda:	f248 0303 	movw	r3, #32771	; 0x8003
   1cfde:	429d      	cmp	r5, r3
   1cfe0:	f000 81c5 	beq.w	1d36e <rpc_ip_event_handler+0x3ea>
   1cfe4:	f200 811b 	bhi.w	1d21e <rpc_ip_event_handler+0x29a>
   1cfe8:	f248 0301 	movw	r3, #32769	; 0x8001
   1cfec:	429d      	cmp	r5, r3
   1cfee:	f000 8154 	beq.w	1d29a <rpc_ip_event_handler+0x316>
   1cff2:	f248 0302 	movw	r3, #32770	; 0x8002
   1cff6:	429d      	cmp	r5, r3
   1cff8:	d138      	bne.n	1d06c <rpc_ip_event_handler+0xe8>
   1cffa:	683b      	ldr	r3, [r7, #0]
   1cffc:	0098      	lsls	r0, r3, #2
   1cffe:	d531      	bpl.n	1d064 <rpc_ip_event_handler+0xe0>
   1d000:	683b      	ldr	r3, [r7, #0]
   1d002:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1d006:	603b      	str	r3, [r7, #0]
   1d008:	6963      	ldr	r3, [r4, #20]
   1d00a:	2b00      	cmp	r3, #0
   1d00c:	f000 81ea 	beq.w	1d3e4 <rpc_ip_event_handler+0x460>
   1d010:	2b10      	cmp	r3, #16
   1d012:	bf8e      	itee	hi
   1d014:	232d      	movhi	r3, #45	; 0x2d
   1d016:	4ab9      	ldrls	r2, [pc, #740]	; (1d2fc <rpc_ip_event_handler+0x378>)
   1d018:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1d01c:	607b      	str	r3, [r7, #4]
   1d01e:	683b      	ldr	r3, [r7, #0]
   1d020:	2000      	movs	r0, #0
   1d022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1d026:	603b      	str	r3, [r7, #0]
   1d028:	e00e      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d02a:	6943      	ldr	r3, [r0, #20]
   1d02c:	2001      	movs	r0, #1
   1d02e:	2b10      	cmp	r3, #16
   1d030:	49b3      	ldr	r1, [pc, #716]	; (1d300 <rpc_ip_event_handler+0x37c>)
   1d032:	bf88      	it	hi
   1d034:	222d      	movhi	r2, #45	; 0x2d
   1d036:	7008      	strb	r0, [r1, #0]
   1d038:	f04f 0000 	mov.w	r0, #0
   1d03c:	bf9c      	itt	ls
   1d03e:	4aaf      	ldrls	r2, [pc, #700]	; (1d2fc <rpc_ip_event_handler+0x378>)
   1d040:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1d044:	4baf      	ldr	r3, [pc, #700]	; (1d304 <rpc_ip_event_handler+0x380>)
   1d046:	601a      	str	r2, [r3, #0]
   1d048:	b009      	add	sp, #36	; 0x24
   1d04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d04e:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 1d318 <rpc_ip_event_handler+0x394>
   1d052:	6807      	ldr	r7, [r0, #0]
   1d054:	f8da 2000 	ldr.w	r2, [sl]
   1d058:	2a01      	cmp	r2, #1
   1d05a:	d00b      	beq.n	1d074 <rpc_ip_event_handler+0xf0>
   1d05c:	b117      	cbz	r7, 1d064 <rpc_ip_event_handler+0xe0>
   1d05e:	4638      	mov	r0, r7
   1d060:	f7fe fca6 	bl	1b9b0 <rpc_ip_client_data_free>
   1d064:	2000      	movs	r0, #0
   1d066:	b009      	add	sp, #36	; 0x24
   1d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d06c:	6820      	ldr	r0, [r4, #0]
   1d06e:	2800      	cmp	r0, #0
   1d070:	d1f6      	bne.n	1d060 <rpc_ip_event_handler+0xdc>
   1d072:	e7f7      	b.n	1d064 <rpc_ip_event_handler+0xe0>
   1d074:	6942      	ldr	r2, [r0, #20]
   1d076:	2a00      	cmp	r2, #0
   1d078:	d045      	beq.n	1d106 <rpc_ip_event_handler+0x182>
   1d07a:	2a10      	cmp	r2, #16
   1d07c:	bf8e      	itee	hi
   1d07e:	222d      	movhi	r2, #45	; 0x2d
   1d080:	499e      	ldrls	r1, [pc, #632]	; (1d2fc <rpc_ip_event_handler+0x378>)
   1d082:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   1d086:	49a0      	ldr	r1, [pc, #640]	; (1d308 <rpc_ip_event_handler+0x384>)
   1d088:	600a      	str	r2, [r1, #0]
   1d08a:	2202      	movs	r2, #2
   1d08c:	f8ca 2000 	str.w	r2, [sl]
   1d090:	2f00      	cmp	r7, #0
   1d092:	d1e4      	bne.n	1d05e <rpc_ip_event_handler+0xda>
   1d094:	e7e6      	b.n	1d064 <rpc_ip_event_handler+0xe0>
   1d096:	f004 fd29 	bl	21aec <interface_from_internal_id_search>
   1d09a:	4606      	mov	r6, r0
   1d09c:	e786      	b.n	1cfac <rpc_ip_event_handler+0x28>
   1d09e:	f248 030c 	movw	r3, #32780	; 0x800c
   1d0a2:	429d      	cmp	r5, r3
   1d0a4:	f000 813c 	beq.w	1d320 <rpc_ip_event_handler+0x39c>
   1d0a8:	f240 80d5 	bls.w	1d256 <rpc_ip_event_handler+0x2d2>
   1d0ac:	f249 0302 	movw	r3, #36866	; 0x9002
   1d0b0:	429d      	cmp	r5, r3
   1d0b2:	f000 811d 	beq.w	1d2f0 <rpc_ip_event_handler+0x36c>
   1d0b6:	f249 0303 	movw	r3, #36867	; 0x9003
   1d0ba:	429d      	cmp	r5, r3
   1d0bc:	f000 80f9 	beq.w	1d2b2 <rpc_ip_event_handler+0x32e>
   1d0c0:	f249 0301 	movw	r3, #36865	; 0x9001
   1d0c4:	429d      	cmp	r5, r3
   1d0c6:	d1d1      	bne.n	1d06c <rpc_ip_event_handler+0xe8>
   1d0c8:	683d      	ldr	r5, [r7, #0]
   1d0ca:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1d0ce:	f000 8184 	beq.w	1d3da <rpc_ip_event_handler+0x456>
   1d0d2:	68a3      	ldr	r3, [r4, #8]
   1d0d4:	2b04      	cmp	r3, #4
   1d0d6:	f200 81af 	bhi.w	1d438 <rpc_ip_event_handler+0x4b4>
   1d0da:	2500      	movs	r5, #0
   1d0dc:	462e      	mov	r6, r5
   1d0de:	6821      	ldr	r1, [r4, #0]
   1d0e0:	6862      	ldr	r2, [r4, #4]
   1d0e2:	e9cd 6506 	strd	r6, r5, [sp, #24]
   1d0e6:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1d0ea:	69f8      	ldr	r0, [r7, #28]
   1d0ec:	a904      	add	r1, sp, #16
   1d0ee:	6803      	ldr	r3, [r0, #0]
   1d0f0:	685b      	ldr	r3, [r3, #4]
   1d0f2:	4798      	blx	r3
   1d0f4:	3001      	adds	r0, #1
   1d0f6:	f000 818e 	beq.w	1d416 <rpc_ip_event_handler+0x492>
   1d0fa:	683b      	ldr	r3, [r7, #0]
   1d0fc:	2000      	movs	r0, #0
   1d0fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d102:	603b      	str	r3, [r7, #0]
   1d104:	e7a0      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d106:	6985      	ldr	r5, [r0, #24]
   1d108:	016b      	lsls	r3, r5, #5
   1d10a:	4618      	mov	r0, r3
   1d10c:	9303      	str	r3, [sp, #12]
   1d10e:	f004 f837 	bl	21180 <nrf_malloc>
   1d112:	9002      	str	r0, [sp, #8]
   1d114:	2800      	cmp	r0, #0
   1d116:	d078      	beq.n	1d20a <rpc_ip_event_handler+0x286>
   1d118:	00ee      	lsls	r6, r5, #3
   1d11a:	1970      	adds	r0, r6, r5
   1d11c:	0080      	lsls	r0, r0, #2
   1d11e:	f004 f82f 	bl	21180 <nrf_malloc>
   1d122:	2800      	cmp	r0, #0
   1d124:	d073      	beq.n	1d20e <rpc_ip_event_handler+0x28a>
   1d126:	2d00      	cmp	r5, #0
   1d128:	d074      	beq.n	1d214 <rpc_ip_event_handler+0x290>
   1d12a:	3610      	adds	r6, #16
   1d12c:	1983      	adds	r3, r0, r6
   1d12e:	9301      	str	r3, [sp, #4]
   1d130:	9b02      	ldr	r3, [sp, #8]
   1d132:	2204      	movs	r2, #4
   1d134:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 1d31c <rpc_ip_event_handler+0x398>
   1d138:	f100 0810 	add.w	r8, r0, #16
   1d13c:	f103 0520 	add.w	r5, r3, #32
   1d140:	e013      	b.n	1d16a <rpc_ip_event_handler+0x1e6>
   1d142:	464a      	mov	r2, r9
   1d144:	f7ef fd02 	bl	cb4c <memcpy>
   1d148:	2100      	movs	r1, #0
   1d14a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1d14e:	f108 0808 	add.w	r8, r8, #8
   1d152:	eb09 0206 	add.w	r2, r9, r6
   1d156:	f803 1009 	strb.w	r1, [r3, r9]
   1d15a:	9b01      	ldr	r3, [sp, #4]
   1d15c:	f845 5c04 	str.w	r5, [r5, #-4]
   1d160:	4598      	cmp	r8, r3
   1d162:	f105 0520 	add.w	r5, r5, #32
   1d166:	f000 8090 	beq.w	1d28a <rpc_ip_event_handler+0x306>
   1d16a:	58bb      	ldr	r3, [r7, r2]
   1d16c:	18b9      	adds	r1, r7, r2
   1d16e:	f845 3c20 	str.w	r3, [r5, #-32]
   1d172:	684b      	ldr	r3, [r1, #4]
   1d174:	f8db 0000 	ldr.w	r0, [fp]
   1d178:	2b02      	cmp	r3, #2
   1d17a:	bf14      	ite	ne
   1d17c:	2602      	movne	r6, #2
   1d17e:	260a      	moveq	r6, #10
   1d180:	4b62      	ldr	r3, [pc, #392]	; (1d30c <rpc_ip_event_handler+0x388>)
   1d182:	e945 6007 	strd	r6, r0, [r5, #-28]
   1d186:	681b      	ldr	r3, [r3, #0]
   1d188:	f102 0614 	add.w	r6, r2, #20
   1d18c:	f845 3c14 	str.w	r3, [r5, #-20]
   1d190:	8a08      	ldrh	r0, [r1, #16]
   1d192:	f1a8 0310 	sub.w	r3, r8, #16
   1d196:	f845 0c10 	str.w	r0, [r5, #-16]
   1d19a:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   1d19e:	f845 3c0c 	str.w	r3, [r5, #-12]
   1d1a2:	4b5b      	ldr	r3, [pc, #364]	; (1d310 <rpc_ip_event_handler+0x38c>)
   1d1a4:	2804      	cmp	r0, #4
   1d1a6:	eb07 0106 	add.w	r1, r7, r6
   1d1aa:	881b      	ldrh	r3, [r3, #0]
   1d1ac:	d01e      	beq.n	1d1ec <rpc_ip_event_handler+0x268>
   1d1ae:	220a      	movs	r2, #10
   1d1b0:	f848 2c0c 	str.w	r2, [r8, #-12]
   1d1b4:	f04f 0224 	mov.w	r2, #36	; 0x24
   1d1b8:	f828 3c08 	strh.w	r3, [r8, #-8]
   1d1bc:	f808 2c10 	strb.w	r2, [r8, #-16]
   1d1c0:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1d1c4:	4640      	mov	r0, r8
   1d1c6:	f7ef fcc1 	bl	cb4c <memcpy>
   1d1ca:	f855 3c10 	ldr.w	r3, [r5, #-16]
   1d1ce:	f109 0001 	add.w	r0, r9, #1
   1d1d2:	441e      	add	r6, r3
   1d1d4:	f003 ffd4 	bl	21180 <nrf_malloc>
   1d1d8:	19b9      	adds	r1, r7, r6
   1d1da:	eb09 0206 	add.w	r2, r9, r6
   1d1de:	f845 0c08 	str.w	r0, [r5, #-8]
   1d1e2:	2800      	cmp	r0, #0
   1d1e4:	d1ad      	bne.n	1d142 <rpc_ip_event_handler+0x1be>
   1d1e6:	f108 0808 	add.w	r8, r8, #8
   1d1ea:	e7b6      	b.n	1d15a <rpc_ip_event_handler+0x1d6>
   1d1ec:	2210      	movs	r2, #16
   1d1ee:	2002      	movs	r0, #2
   1d1f0:	f828 3c08 	strh.w	r3, [r8, #-8]
   1d1f4:	f848 0c0c 	str.w	r0, [r8, #-12]
   1d1f8:	f808 2c10 	strb.w	r2, [r8, #-16]
   1d1fc:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1d200:	f1a8 0004 	sub.w	r0, r8, #4
   1d204:	f7ef fca2 	bl	cb4c <memcpy>
   1d208:	e7df      	b.n	1d1ca <rpc_ip_event_handler+0x246>
   1d20a:	f003 ffc3 	bl	21194 <nrf_free>
   1d20e:	210c      	movs	r1, #12
   1d210:	4a3d      	ldr	r2, [pc, #244]	; (1d308 <rpc_ip_event_handler+0x384>)
   1d212:	6011      	str	r1, [r2, #0]
   1d214:	9b02      	ldr	r3, [sp, #8]
   1d216:	4a3f      	ldr	r2, [pc, #252]	; (1d314 <rpc_ip_event_handler+0x390>)
   1d218:	6827      	ldr	r7, [r4, #0]
   1d21a:	6013      	str	r3, [r2, #0]
   1d21c:	e735      	b.n	1d08a <rpc_ip_event_handler+0x106>
   1d21e:	f248 0304 	movw	r3, #32772	; 0x8004
   1d222:	429d      	cmp	r5, r3
   1d224:	f000 808f 	beq.w	1d346 <rpc_ip_event_handler+0x3c2>
   1d228:	f248 0305 	movw	r3, #32773	; 0x8005
   1d22c:	429d      	cmp	r5, r3
   1d22e:	f47f af1d 	bne.w	1d06c <rpc_ip_event_handler+0xe8>
   1d232:	683b      	ldr	r3, [r7, #0]
   1d234:	b29b      	uxth	r3, r3
   1d236:	2b03      	cmp	r3, #3
   1d238:	f47f af14 	bne.w	1d064 <rpc_ip_event_handler+0xe0>
   1d23c:	6963      	ldr	r3, [r4, #20]
   1d23e:	2b00      	cmp	r3, #0
   1d240:	f000 80eb 	beq.w	1d41a <rpc_ip_event_handler+0x496>
   1d244:	2b10      	cmp	r3, #16
   1d246:	f200 80bd 	bhi.w	1d3c4 <rpc_ip_event_handler+0x440>
   1d24a:	4a2c      	ldr	r2, [pc, #176]	; (1d2fc <rpc_ip_event_handler+0x378>)
   1d24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d250:	607b      	str	r3, [r7, #4]
   1d252:	2000      	movs	r0, #0
   1d254:	e6f8      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d256:	f248 0308 	movw	r3, #32776	; 0x8008
   1d25a:	429d      	cmp	r5, r3
   1d25c:	f000 8094 	beq.w	1d388 <rpc_ip_event_handler+0x404>
   1d260:	f248 0309 	movw	r3, #32777	; 0x8009
   1d264:	429d      	cmp	r5, r3
   1d266:	f47f af01 	bne.w	1d06c <rpc_ip_event_handler+0xe8>
   1d26a:	683b      	ldr	r3, [r7, #0]
   1d26c:	b29b      	uxth	r3, r3
   1d26e:	2b0d      	cmp	r3, #13
   1d270:	f47f aef8 	bne.w	1d064 <rpc_ip_event_handler+0xe0>
   1d274:	6960      	ldr	r0, [r4, #20]
   1d276:	2800      	cmp	r0, #0
   1d278:	f000 80d7 	beq.w	1d42a <rpc_ip_event_handler+0x4a6>
   1d27c:	2810      	cmp	r0, #16
   1d27e:	f200 80a1 	bhi.w	1d3c4 <rpc_ip_event_handler+0x440>
   1d282:	4b1e      	ldr	r3, [pc, #120]	; (1d2fc <rpc_ip_event_handler+0x378>)
   1d284:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1d288:	e7e2      	b.n	1d250 <rpc_ip_event_handler+0x2cc>
   1d28a:	2100      	movs	r1, #0
   1d28c:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   1d290:	4403      	add	r3, r0
   1d292:	f843 1c04 	str.w	r1, [r3, #-4]
   1d296:	4603      	mov	r3, r0
   1d298:	e7bd      	b.n	1d216 <rpc_ip_event_handler+0x292>
   1d29a:	683b      	ldr	r3, [r7, #0]
   1d29c:	2b01      	cmp	r3, #1
   1d29e:	f47f aee1 	bne.w	1d064 <rpc_ip_event_handler+0xe0>
   1d2a2:	6960      	ldr	r0, [r4, #20]
   1d2a4:	2800      	cmp	r0, #0
   1d2a6:	d1e9      	bne.n	1d27c <rpc_ip_event_handler+0x2f8>
   1d2a8:	2302      	movs	r3, #2
   1d2aa:	603b      	str	r3, [r7, #0]
   1d2ac:	69a3      	ldr	r3, [r4, #24]
   1d2ae:	61bb      	str	r3, [r7, #24]
   1d2b0:	e6ca      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d2b2:	683b      	ldr	r3, [r7, #0]
   1d2b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1d2b8:	603b      	str	r3, [r7, #0]
   1d2ba:	683b      	ldr	r3, [r7, #0]
   1d2bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d2c0:	603b      	str	r3, [r7, #0]
   1d2c2:	683b      	ldr	r3, [r7, #0]
   1d2c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d2c8:	603b      	str	r3, [r7, #0]
   1d2ca:	683b      	ldr	r3, [r7, #0]
   1d2cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1d2d0:	603b      	str	r3, [r7, #0]
   1d2d2:	6923      	ldr	r3, [r4, #16]
   1d2d4:	2b6c      	cmp	r3, #108	; 0x6c
   1d2d6:	d077      	beq.n	1d3c8 <rpc_ip_event_handler+0x444>
   1d2d8:	2b10      	cmp	r3, #16
   1d2da:	bf8c      	ite	hi
   1d2dc:	232d      	movhi	r3, #45	; 0x2d
   1d2de:	4a07      	ldrls	r2, [pc, #28]	; (1d2fc <rpc_ip_event_handler+0x378>)
   1d2e0:	f04f 0000 	mov.w	r0, #0
   1d2e4:	bf98      	it	ls
   1d2e6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1d2ea:	607b      	str	r3, [r7, #4]
   1d2ec:	60bb      	str	r3, [r7, #8]
   1d2ee:	e6ab      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d2f0:	683b      	ldr	r3, [r7, #0]
   1d2f2:	b29b      	uxth	r3, r3
   1d2f4:	2b07      	cmp	r3, #7
   1d2f6:	f47f aeb5 	bne.w	1d064 <rpc_ip_event_handler+0xe0>
   1d2fa:	e6fe      	b.n	1d0fa <rpc_ip_event_handler+0x176>
   1d2fc:	0002f070 	.word	0x0002f070
   1d300:	2002628f 	.word	0x2002628f
   1d304:	20021a24 	.word	0x20021a24
   1d308:	200219f4 	.word	0x200219f4
   1d30c:	200219ec 	.word	0x200219ec
   1d310:	200242bc 	.word	0x200242bc
   1d314:	200219fc 	.word	0x200219fc
   1d318:	200219f8 	.word	0x200219f8
   1d31c:	200219f0 	.word	0x200219f0
   1d320:	683b      	ldr	r3, [r7, #0]
   1d322:	b29b      	uxth	r3, r3
   1d324:	2b08      	cmp	r3, #8
   1d326:	f47f ae9d 	bne.w	1d064 <rpc_ip_event_handler+0xe0>
   1d32a:	6963      	ldr	r3, [r4, #20]
   1d32c:	2b00      	cmp	r3, #0
   1d32e:	d189      	bne.n	1d244 <rpc_ip_event_handler+0x2c0>
   1d330:	4b5e      	ldr	r3, [pc, #376]	; (1d4ac <rpc_ip_event_handler+0x528>)
   1d332:	2001      	movs	r0, #1
   1d334:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1d338:	683b      	ldr	r3, [r7, #0]
   1d33a:	0c1b      	lsrs	r3, r3, #16
   1d33c:	041b      	lsls	r3, r3, #16
   1d33e:	f043 0309 	orr.w	r3, r3, #9
   1d342:	603b      	str	r3, [r7, #0]
   1d344:	e680      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d346:	683b      	ldr	r3, [r7, #0]
   1d348:	01db      	lsls	r3, r3, #7
   1d34a:	f57f ae8b 	bpl.w	1d064 <rpc_ip_event_handler+0xe0>
   1d34e:	6963      	ldr	r3, [r4, #20]
   1d350:	2b00      	cmp	r3, #0
   1d352:	f47f af77 	bne.w	1d244 <rpc_ip_event_handler+0x2c0>
   1d356:	6823      	ldr	r3, [r4, #0]
   1d358:	2b00      	cmp	r3, #0
   1d35a:	d071      	beq.n	1d440 <rpc_ip_event_handler+0x4bc>
   1d35c:	2001      	movs	r0, #1
   1d35e:	4b53      	ldr	r3, [pc, #332]	; (1d4ac <rpc_ip_event_handler+0x528>)
   1d360:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1d364:	683b      	ldr	r3, [r7, #0]
   1d366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1d36a:	603b      	str	r3, [r7, #0]
   1d36c:	e66c      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d36e:	683b      	ldr	r3, [r7, #0]
   1d370:	025a      	lsls	r2, r3, #9
   1d372:	f57f ae77 	bpl.w	1d064 <rpc_ip_event_handler+0xe0>
   1d376:	6960      	ldr	r0, [r4, #20]
   1d378:	2800      	cmp	r0, #0
   1d37a:	f47f af7f 	bne.w	1d27c <rpc_ip_event_handler+0x2f8>
   1d37e:	683b      	ldr	r3, [r7, #0]
   1d380:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d384:	603b      	str	r3, [r7, #0]
   1d386:	e65f      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d388:	683b      	ldr	r3, [r7, #0]
   1d38a:	b29b      	uxth	r3, r3
   1d38c:	2b06      	cmp	r3, #6
   1d38e:	f47f ae69 	bne.w	1d064 <rpc_ip_event_handler+0xe0>
   1d392:	6960      	ldr	r0, [r4, #20]
   1d394:	2800      	cmp	r0, #0
   1d396:	f47f af71 	bne.w	1d27c <rpc_ip_event_handler+0x2f8>
   1d39a:	683b      	ldr	r3, [r7, #0]
   1d39c:	0c1b      	lsrs	r3, r3, #16
   1d39e:	041b      	lsls	r3, r3, #16
   1d3a0:	f043 0307 	orr.w	r3, r3, #7
   1d3a4:	603b      	str	r3, [r7, #0]
   1d3a6:	e64f      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d3a8:	683b      	ldr	r3, [r7, #0]
   1d3aa:	0299      	lsls	r1, r3, #10
   1d3ac:	f57f ae5a 	bpl.w	1d064 <rpc_ip_event_handler+0xe0>
   1d3b0:	6963      	ldr	r3, [r4, #20]
   1d3b2:	b33b      	cbz	r3, 1d404 <rpc_ip_event_handler+0x480>
   1d3b4:	2b6b      	cmp	r3, #107	; 0x6b
   1d3b6:	f47f ae2b 	bne.w	1d010 <rpc_ip_event_handler+0x8c>
   1d3ba:	693b      	ldr	r3, [r7, #16]
   1d3bc:	2b01      	cmp	r3, #1
   1d3be:	d041      	beq.n	1d444 <rpc_ip_event_handler+0x4c0>
   1d3c0:	230c      	movs	r3, #12
   1d3c2:	e62b      	b.n	1d01c <rpc_ip_event_handler+0x98>
   1d3c4:	232d      	movs	r3, #45	; 0x2d
   1d3c6:	e743      	b.n	1d250 <rpc_ip_event_handler+0x2cc>
   1d3c8:	2239      	movs	r2, #57	; 0x39
   1d3ca:	683b      	ldr	r3, [r7, #0]
   1d3cc:	2000      	movs	r0, #0
   1d3ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1d3d2:	603b      	str	r3, [r7, #0]
   1d3d4:	607a      	str	r2, [r7, #4]
   1d3d6:	60ba      	str	r2, [r7, #8]
   1d3d8:	e636      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d3da:	6820      	ldr	r0, [r4, #0]
   1d3dc:	f7fe fae8 	bl	1b9b0 <rpc_ip_client_data_free>
   1d3e0:	4628      	mov	r0, r5
   1d3e2:	e631      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d3e4:	683b      	ldr	r3, [r7, #0]
   1d3e6:	2000      	movs	r0, #0
   1d3e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d3ec:	603b      	str	r3, [r7, #0]
   1d3ee:	683b      	ldr	r3, [r7, #0]
   1d3f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1d3f4:	603b      	str	r3, [r7, #0]
   1d3f6:	683b      	ldr	r3, [r7, #0]
   1d3f8:	0c1b      	lsrs	r3, r3, #16
   1d3fa:	041b      	lsls	r3, r3, #16
   1d3fc:	f043 0305 	orr.w	r3, r3, #5
   1d400:	603b      	str	r3, [r7, #0]
   1d402:	e621      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d404:	683b      	ldr	r3, [r7, #0]
   1d406:	4a29      	ldr	r2, [pc, #164]	; (1d4ac <rpc_ip_event_handler+0x528>)
   1d408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d40c:	603b      	str	r3, [r7, #0]
   1d40e:	2001      	movs	r0, #1
   1d410:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   1d414:	e618      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d416:	2002      	movs	r0, #2
   1d418:	e616      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d41a:	683b      	ldr	r3, [r7, #0]
   1d41c:	2000      	movs	r0, #0
   1d41e:	0c1b      	lsrs	r3, r3, #16
   1d420:	041b      	lsls	r3, r3, #16
   1d422:	f043 0304 	orr.w	r3, r3, #4
   1d426:	603b      	str	r3, [r7, #0]
   1d428:	e60e      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d42a:	683b      	ldr	r3, [r7, #0]
   1d42c:	0c1b      	lsrs	r3, r3, #16
   1d42e:	041b      	lsls	r3, r3, #16
   1d430:	f043 030e 	orr.w	r3, r3, #14
   1d434:	603b      	str	r3, [r7, #0]
   1d436:	e607      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d438:	8a65      	ldrh	r5, [r4, #18]
   1d43a:	b95d      	cbnz	r5, 1d454 <rpc_ip_event_handler+0x4d0>
   1d43c:	462e      	mov	r6, r5
   1d43e:	e64e      	b.n	1d0de <rpc_ip_event_handler+0x15a>
   1d440:	2000      	movs	r0, #0
   1d442:	e78f      	b.n	1d364 <rpc_ip_event_handler+0x3e0>
   1d444:	220c      	movs	r2, #12
   1d446:	683b      	ldr	r3, [r7, #0]
   1d448:	2000      	movs	r0, #0
   1d44a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1d44e:	603b      	str	r3, [r7, #0]
   1d450:	607a      	str	r2, [r7, #4]
   1d452:	e5f9      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d454:	2024      	movs	r0, #36	; 0x24
   1d456:	f003 fe93 	bl	21180 <nrf_malloc>
   1d45a:	4606      	mov	r6, r0
   1d45c:	2800      	cmp	r0, #0
   1d45e:	d0da      	beq.n	1d416 <rpc_ip_event_handler+0x492>
   1d460:	8a62      	ldrh	r2, [r4, #18]
   1d462:	2a10      	cmp	r2, #16
   1d464:	d009      	beq.n	1d47a <rpc_ip_event_handler+0x4f6>
   1d466:	2a04      	cmp	r2, #4
   1d468:	d013      	beq.n	1d492 <rpc_ip_event_handler+0x50e>
   1d46a:	6820      	ldr	r0, [r4, #0]
   1d46c:	f7fe faa0 	bl	1b9b0 <rpc_ip_client_data_free>
   1d470:	4630      	mov	r0, r6
   1d472:	f003 fe8f 	bl	21194 <nrf_free>
   1d476:	2000      	movs	r0, #0
   1d478:	e5e6      	b.n	1d048 <rpc_ip_event_handler+0xc4>
   1d47a:	230a      	movs	r3, #10
   1d47c:	2524      	movs	r5, #36	; 0x24
   1d47e:	6043      	str	r3, [r0, #4]
   1d480:	7005      	strb	r5, [r0, #0]
   1d482:	8a23      	ldrh	r3, [r4, #16]
   1d484:	f104 0114 	add.w	r1, r4, #20
   1d488:	8103      	strh	r3, [r0, #8]
   1d48a:	3010      	adds	r0, #16
   1d48c:	f7ef fb5e 	bl	cb4c <memcpy>
   1d490:	e625      	b.n	1d0de <rpc_ip_event_handler+0x15a>
   1d492:	2302      	movs	r3, #2
   1d494:	2510      	movs	r5, #16
   1d496:	6043      	str	r3, [r0, #4]
   1d498:	7005      	strb	r5, [r0, #0]
   1d49a:	8a23      	ldrh	r3, [r4, #16]
   1d49c:	f104 0114 	add.w	r1, r4, #20
   1d4a0:	8103      	strh	r3, [r0, #8]
   1d4a2:	300c      	adds	r0, #12
   1d4a4:	f7ef fb52 	bl	cb4c <memcpy>
   1d4a8:	e619      	b.n	1d0de <rpc_ip_event_handler+0x15a>
   1d4aa:	bf00      	nop
   1d4ac:	20021a00 	.word	0x20021a00

0001d4b0 <rpc_handle_ctrl_message>:
   1d4b0:	2902      	cmp	r1, #2
   1d4b2:	b510      	push	{r4, lr}
   1d4b4:	4604      	mov	r4, r0
   1d4b6:	d00c      	beq.n	1d4d2 <rpc_handle_ctrl_message+0x22>
   1d4b8:	2904      	cmp	r1, #4
   1d4ba:	d008      	beq.n	1d4ce <rpc_handle_ctrl_message+0x1e>
   1d4bc:	2901      	cmp	r1, #1
   1d4be:	d006      	beq.n	1d4ce <rpc_handle_ctrl_message+0x1e>
   1d4c0:	6880      	ldr	r0, [r0, #8]
   1d4c2:	b108      	cbz	r0, 1d4c8 <rpc_handle_ctrl_message+0x18>
   1d4c4:	f7fc fd32 	bl	19f2c <rpc_transport_data_free>
   1d4c8:	4620      	mov	r0, r4
   1d4ca:	f7fc fd2d 	bl	19f28 <rpc_transport_rpc_free>
   1d4ce:	2000      	movs	r0, #0
   1d4d0:	bd10      	pop	{r4, pc}
   1d4d2:	6880      	ldr	r0, [r0, #8]
   1d4d4:	2800      	cmp	r0, #0
   1d4d6:	d0fa      	beq.n	1d4ce <rpc_handle_ctrl_message+0x1e>
   1d4d8:	f7fc fd28 	bl	19f2c <rpc_transport_data_free>
   1d4dc:	2000      	movs	r0, #0
   1d4de:	bd10      	pop	{r4, pc}

0001d4e0 <rpc_handle_data_message>:
   1d4e0:	4b23      	ldr	r3, [pc, #140]	; (1d570 <rpc_handle_data_message+0x90>)
   1d4e2:	6802      	ldr	r2, [r0, #0]
   1d4e4:	8819      	ldrh	r1, [r3, #0]
   1d4e6:	b292      	uxth	r2, r2
   1d4e8:	4291      	cmp	r1, r2
   1d4ea:	d027      	beq.n	1d53c <rpc_handle_data_message+0x5c>
   1d4ec:	8a19      	ldrh	r1, [r3, #16]
   1d4ee:	4291      	cmp	r1, r2
   1d4f0:	d02a      	beq.n	1d548 <rpc_handle_data_message+0x68>
   1d4f2:	8c19      	ldrh	r1, [r3, #32]
   1d4f4:	4291      	cmp	r1, r2
   1d4f6:	d02b      	beq.n	1d550 <rpc_handle_data_message+0x70>
   1d4f8:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   1d4fa:	4291      	cmp	r1, r2
   1d4fc:	d02a      	beq.n	1d554 <rpc_handle_data_message+0x74>
   1d4fe:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   1d502:	4291      	cmp	r1, r2
   1d504:	d028      	beq.n	1d558 <rpc_handle_data_message+0x78>
   1d506:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   1d50a:	4291      	cmp	r1, r2
   1d50c:	d026      	beq.n	1d55c <rpc_handle_data_message+0x7c>
   1d50e:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   1d512:	4291      	cmp	r1, r2
   1d514:	d026      	beq.n	1d564 <rpc_handle_data_message+0x84>
   1d516:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   1d51a:	4291      	cmp	r1, r2
   1d51c:	d024      	beq.n	1d568 <rpc_handle_data_message+0x88>
   1d51e:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1d522:	4291      	cmp	r1, r2
   1d524:	d01c      	beq.n	1d560 <rpc_handle_data_message+0x80>
   1d526:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   1d52a:	4291      	cmp	r1, r2
   1d52c:	d01e      	beq.n	1d56c <rpc_handle_data_message+0x8c>
   1d52e:	6880      	ldr	r0, [r0, #8]
   1d530:	b160      	cbz	r0, 1d54c <rpc_handle_data_message+0x6c>
   1d532:	b510      	push	{r4, lr}
   1d534:	f7fc fcfa 	bl	19f2c <rpc_transport_data_free>
   1d538:	2000      	movs	r0, #0
   1d53a:	bd10      	pop	{r4, pc}
   1d53c:	2200      	movs	r2, #0
   1d53e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1d542:	685a      	ldr	r2, [r3, #4]
   1d544:	68d9      	ldr	r1, [r3, #12]
   1d546:	4710      	bx	r2
   1d548:	2201      	movs	r2, #1
   1d54a:	e7f8      	b.n	1d53e <rpc_handle_data_message+0x5e>
   1d54c:	2000      	movs	r0, #0
   1d54e:	4770      	bx	lr
   1d550:	2202      	movs	r2, #2
   1d552:	e7f4      	b.n	1d53e <rpc_handle_data_message+0x5e>
   1d554:	2203      	movs	r2, #3
   1d556:	e7f2      	b.n	1d53e <rpc_handle_data_message+0x5e>
   1d558:	2204      	movs	r2, #4
   1d55a:	e7f0      	b.n	1d53e <rpc_handle_data_message+0x5e>
   1d55c:	2205      	movs	r2, #5
   1d55e:	e7ee      	b.n	1d53e <rpc_handle_data_message+0x5e>
   1d560:	2208      	movs	r2, #8
   1d562:	e7ec      	b.n	1d53e <rpc_handle_data_message+0x5e>
   1d564:	2206      	movs	r2, #6
   1d566:	e7ea      	b.n	1d53e <rpc_handle_data_message+0x5e>
   1d568:	2207      	movs	r2, #7
   1d56a:	e7e8      	b.n	1d53e <rpc_handle_data_message+0x5e>
   1d56c:	2209      	movs	r2, #9
   1d56e:	e7e6      	b.n	1d53e <rpc_handle_data_message+0x5e>
   1d570:	20021a28 	.word	0x20021a28

0001d574 <rpc_framework_init>:
   1d574:	b508      	push	{r3, lr}
   1d576:	22a0      	movs	r2, #160	; 0xa0
   1d578:	2100      	movs	r1, #0
   1d57a:	4802      	ldr	r0, [pc, #8]	; (1d584 <rpc_framework_init+0x10>)
   1d57c:	f008 fd22 	bl	25fc4 <memset>
   1d580:	2000      	movs	r0, #0
   1d582:	bd08      	pop	{r3, pc}
   1d584:	20021a28 	.word	0x20021a28

0001d588 <rpc_client_register>:
   1d588:	8803      	ldrh	r3, [r0, #0]
   1d58a:	2b00      	cmp	r3, #0
   1d58c:	d045      	beq.n	1d61a <rpc_client_register+0x92>
   1d58e:	6842      	ldr	r2, [r0, #4]
   1d590:	4601      	mov	r1, r0
   1d592:	2a00      	cmp	r2, #0
   1d594:	d050      	beq.n	1d638 <rpc_client_register+0xb0>
   1d596:	4a30      	ldr	r2, [pc, #192]	; (1d658 <rpc_client_register+0xd0>)
   1d598:	8810      	ldrh	r0, [r2, #0]
   1d59a:	4283      	cmp	r3, r0
   1d59c:	d03d      	beq.n	1d61a <rpc_client_register+0x92>
   1d59e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d5a2:	8a14      	ldrh	r4, [r2, #16]
   1d5a4:	42a3      	cmp	r3, r4
   1d5a6:	d035      	beq.n	1d614 <rpc_client_register+0x8c>
   1d5a8:	8c15      	ldrh	r5, [r2, #32]
   1d5aa:	42ab      	cmp	r3, r5
   1d5ac:	d032      	beq.n	1d614 <rpc_client_register+0x8c>
   1d5ae:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1d5b0:	42b3      	cmp	r3, r6
   1d5b2:	d02f      	beq.n	1d614 <rpc_client_register+0x8c>
   1d5b4:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   1d5b8:	42bb      	cmp	r3, r7
   1d5ba:	d02b      	beq.n	1d614 <rpc_client_register+0x8c>
   1d5bc:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1d5c0:	4563      	cmp	r3, ip
   1d5c2:	d027      	beq.n	1d614 <rpc_client_register+0x8c>
   1d5c4:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   1d5c8:	4573      	cmp	r3, lr
   1d5ca:	d023      	beq.n	1d614 <rpc_client_register+0x8c>
   1d5cc:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1d5d0:	4543      	cmp	r3, r8
   1d5d2:	d01f      	beq.n	1d614 <rpc_client_register+0x8c>
   1d5d4:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   1d5d8:	454b      	cmp	r3, r9
   1d5da:	d01b      	beq.n	1d614 <rpc_client_register+0x8c>
   1d5dc:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   1d5e0:	4553      	cmp	r3, sl
   1d5e2:	d017      	beq.n	1d614 <rpc_client_register+0x8c>
   1d5e4:	b1e0      	cbz	r0, 1d620 <rpc_client_register+0x98>
   1d5e6:	b35c      	cbz	r4, 1d640 <rpc_client_register+0xb8>
   1d5e8:	b365      	cbz	r5, 1d644 <rpc_client_register+0xbc>
   1d5ea:	b36e      	cbz	r6, 1d648 <rpc_client_register+0xc0>
   1d5ec:	b377      	cbz	r7, 1d64c <rpc_client_register+0xc4>
   1d5ee:	f1bc 0f00 	cmp.w	ip, #0
   1d5f2:	d02d      	beq.n	1d650 <rpc_client_register+0xc8>
   1d5f4:	f1be 0f00 	cmp.w	lr, #0
   1d5f8:	d020      	beq.n	1d63c <rpc_client_register+0xb4>
   1d5fa:	f1b8 0f00 	cmp.w	r8, #0
   1d5fe:	d029      	beq.n	1d654 <rpc_client_register+0xcc>
   1d600:	f1b9 0f00 	cmp.w	r9, #0
   1d604:	d00b      	beq.n	1d61e <rpc_client_register+0x96>
   1d606:	2009      	movs	r0, #9
   1d608:	f1ba 0f00 	cmp.w	sl, #0
   1d60c:	d008      	beq.n	1d620 <rpc_client_register+0x98>
   1d60e:	2004      	movs	r0, #4
   1d610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d614:	2007      	movs	r0, #7
   1d616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d61a:	2007      	movs	r0, #7
   1d61c:	4770      	bx	lr
   1d61e:	2008      	movs	r0, #8
   1d620:	0100      	lsls	r0, r0, #4
   1d622:	5213      	strh	r3, [r2, r0]
   1d624:	684b      	ldr	r3, [r1, #4]
   1d626:	4402      	add	r2, r0
   1d628:	6053      	str	r3, [r2, #4]
   1d62a:	688b      	ldr	r3, [r1, #8]
   1d62c:	2000      	movs	r0, #0
   1d62e:	6093      	str	r3, [r2, #8]
   1d630:	68cb      	ldr	r3, [r1, #12]
   1d632:	60d3      	str	r3, [r2, #12]
   1d634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d638:	200e      	movs	r0, #14
   1d63a:	4770      	bx	lr
   1d63c:	2006      	movs	r0, #6
   1d63e:	e7ef      	b.n	1d620 <rpc_client_register+0x98>
   1d640:	2001      	movs	r0, #1
   1d642:	e7ed      	b.n	1d620 <rpc_client_register+0x98>
   1d644:	2002      	movs	r0, #2
   1d646:	e7eb      	b.n	1d620 <rpc_client_register+0x98>
   1d648:	2003      	movs	r0, #3
   1d64a:	e7e9      	b.n	1d620 <rpc_client_register+0x98>
   1d64c:	2004      	movs	r0, #4
   1d64e:	e7e7      	b.n	1d620 <rpc_client_register+0x98>
   1d650:	2005      	movs	r0, #5
   1d652:	e7e5      	b.n	1d620 <rpc_client_register+0x98>
   1d654:	2007      	movs	r0, #7
   1d656:	e7e3      	b.n	1d620 <rpc_client_register+0x98>
   1d658:	20021a28 	.word	0x20021a28

0001d65c <rpc_message_send>:
   1d65c:	b150      	cbz	r0, 1d674 <rpc_message_send+0x18>
   1d65e:	b159      	cbz	r1, 1d678 <rpc_message_send+0x1c>
   1d660:	684b      	ldr	r3, [r1, #4]
   1d662:	8008      	strh	r0, [r1, #0]
   1d664:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d668:	f043 0302 	orr.w	r3, r3, #2
   1d66c:	604b      	str	r3, [r1, #4]
   1d66e:	4608      	mov	r0, r1
   1d670:	f7fc bc54 	b.w	19f1c <rpc_transport_send>
   1d674:	2007      	movs	r0, #7
   1d676:	4770      	bx	lr
   1d678:	200e      	movs	r0, #14
   1d67a:	4770      	bx	lr

0001d67c <rpc_message_alloc>:
   1d67c:	b342      	cbz	r2, 1d6d0 <rpc_message_alloc+0x54>
   1d67e:	b328      	cbz	r0, 1d6cc <rpc_message_alloc+0x50>
   1d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d682:	2300      	movs	r3, #0
   1d684:	4616      	mov	r6, r2
   1d686:	460c      	mov	r4, r1
   1d688:	4605      	mov	r5, r0
   1d68a:	6013      	str	r3, [r2, #0]
   1d68c:	b171      	cbz	r1, 1d6ac <rpc_message_alloc+0x30>
   1d68e:	4608      	mov	r0, r1
   1d690:	f7fc fc48 	bl	19f24 <rpc_transport_data_alloc>
   1d694:	4607      	mov	r7, r0
   1d696:	b1b8      	cbz	r0, 1d6c8 <rpc_message_alloc+0x4c>
   1d698:	f7fc fc42 	bl	19f20 <rpc_transport_rpc_alloc>
   1d69c:	4603      	mov	r3, r0
   1d69e:	b180      	cbz	r0, 1d6c2 <rpc_message_alloc+0x46>
   1d6a0:	2000      	movs	r0, #0
   1d6a2:	60dc      	str	r4, [r3, #12]
   1d6a4:	609f      	str	r7, [r3, #8]
   1d6a6:	801d      	strh	r5, [r3, #0]
   1d6a8:	6033      	str	r3, [r6, #0]
   1d6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d6ac:	f7fc fc38 	bl	19f20 <rpc_transport_rpc_alloc>
   1d6b0:	4603      	mov	r3, r0
   1d6b2:	b148      	cbz	r0, 1d6c8 <rpc_message_alloc+0x4c>
   1d6b4:	4627      	mov	r7, r4
   1d6b6:	60dc      	str	r4, [r3, #12]
   1d6b8:	609f      	str	r7, [r3, #8]
   1d6ba:	801d      	strh	r5, [r3, #0]
   1d6bc:	2000      	movs	r0, #0
   1d6be:	6033      	str	r3, [r6, #0]
   1d6c0:	e7f3      	b.n	1d6aa <rpc_message_alloc+0x2e>
   1d6c2:	4638      	mov	r0, r7
   1d6c4:	f7fc fc32 	bl	19f2c <rpc_transport_data_free>
   1d6c8:	2004      	movs	r0, #4
   1d6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d6cc:	2007      	movs	r0, #7
   1d6ce:	4770      	bx	lr
   1d6d0:	200e      	movs	r0, #14
   1d6d2:	4770      	bx	lr

0001d6d4 <rpc_message_free>:
   1d6d4:	b130      	cbz	r0, 1d6e4 <rpc_message_free+0x10>
   1d6d6:	b139      	cbz	r1, 1d6e8 <rpc_message_free+0x14>
   1d6d8:	b508      	push	{r3, lr}
   1d6da:	4608      	mov	r0, r1
   1d6dc:	f7fc fc24 	bl	19f28 <rpc_transport_rpc_free>
   1d6e0:	2000      	movs	r0, #0
   1d6e2:	bd08      	pop	{r3, pc}
   1d6e4:	2007      	movs	r0, #7
   1d6e6:	4770      	bx	lr
   1d6e8:	200e      	movs	r0, #14
   1d6ea:	4770      	bx	lr

0001d6ec <rpc_message_data_free>:
   1d6ec:	b130      	cbz	r0, 1d6fc <rpc_message_data_free+0x10>
   1d6ee:	b139      	cbz	r1, 1d700 <rpc_message_data_free+0x14>
   1d6f0:	b508      	push	{r3, lr}
   1d6f2:	4608      	mov	r0, r1
   1d6f4:	f7fc fc1a 	bl	19f2c <rpc_transport_data_free>
   1d6f8:	2000      	movs	r0, #0
   1d6fa:	bd08      	pop	{r3, pc}
   1d6fc:	2007      	movs	r0, #7
   1d6fe:	4770      	bx	lr
   1d700:	200e      	movs	r0, #14
   1d702:	4770      	bx	lr

0001d704 <packet_free_cb>:
   1d704:	b510      	push	{r4, lr}
   1d706:	4604      	mov	r4, r0
   1d708:	b118      	cbz	r0, 1d712 <packet_free_cb+0xe>
   1d70a:	6800      	ldr	r0, [r0, #0]
   1d70c:	b108      	cbz	r0, 1d712 <packet_free_cb+0xe>
   1d70e:	f002 ff53 	bl	205b8 <rpc_gnss_client_data_free>
   1d712:	68a0      	ldr	r0, [r4, #8]
   1d714:	b118      	cbz	r0, 1d71e <packet_free_cb+0x1a>
   1d716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d71a:	f003 bd3b 	b.w	21194 <nrf_free>
   1d71e:	bd10      	pop	{r4, pc}

0001d720 <rpc_gnss_event_handler>:
   1d720:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d722:	4b64      	ldr	r3, [pc, #400]	; (1d8b4 <rpc_gnss_event_handler+0x194>)
   1d724:	4606      	mov	r6, r0
   1d726:	6800      	ldr	r0, [r0, #0]
   1d728:	881b      	ldrh	r3, [r3, #0]
   1d72a:	6802      	ldr	r2, [r0, #0]
   1d72c:	b085      	sub	sp, #20
   1d72e:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1d732:	460d      	mov	r5, r1
   1d734:	d037      	beq.n	1d7a6 <rpc_gnss_event_handler+0x86>
   1d736:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   1d73a:	33ff      	adds	r3, #255	; 0xff
   1d73c:	b29b      	uxth	r3, r3
   1d73e:	2b02      	cmp	r3, #2
   1d740:	d811      	bhi.n	1d766 <rpc_gnss_event_handler+0x46>
   1d742:	4c5d      	ldr	r4, [pc, #372]	; (1d8b8 <rpc_gnss_event_handler+0x198>)
   1d744:	6823      	ldr	r3, [r4, #0]
   1d746:	075a      	lsls	r2, r3, #29
   1d748:	d410      	bmi.n	1d76c <rpc_gnss_event_handler+0x4c>
   1d74a:	6823      	ldr	r3, [r4, #0]
   1d74c:	079b      	lsls	r3, r3, #30
   1d74e:	d503      	bpl.n	1d758 <rpc_gnss_event_handler+0x38>
   1d750:	f244 0303 	movw	r3, #16387	; 0x4003
   1d754:	429d      	cmp	r5, r3
   1d756:	d009      	beq.n	1d76c <rpc_gnss_event_handler+0x4c>
   1d758:	6830      	ldr	r0, [r6, #0]
   1d75a:	b120      	cbz	r0, 1d766 <rpc_gnss_event_handler+0x46>
   1d75c:	f002 ff2c 	bl	205b8 <rpc_gnss_client_data_free>
   1d760:	2200      	movs	r2, #0
   1d762:	4b56      	ldr	r3, [pc, #344]	; (1d8bc <rpc_gnss_event_handler+0x19c>)
   1d764:	601a      	str	r2, [r3, #0]
   1d766:	2000      	movs	r0, #0
   1d768:	b005      	add	sp, #20
   1d76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d76c:	2002      	movs	r0, #2
   1d76e:	f003 fd07 	bl	21180 <nrf_malloc>
   1d772:	4607      	mov	r7, r0
   1d774:	2800      	cmp	r0, #0
   1d776:	f000 8094 	beq.w	1d8a2 <rpc_gnss_event_handler+0x182>
   1d77a:	2302      	movs	r3, #2
   1d77c:	8005      	strh	r5, [r0, #0]
   1d77e:	6831      	ldr	r1, [r6, #0]
   1d780:	6872      	ldr	r2, [r6, #4]
   1d782:	484f      	ldr	r0, [pc, #316]	; (1d8c0 <rpc_gnss_event_handler+0x1a0>)
   1d784:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   1d788:	6800      	ldr	r0, [r0, #0]
   1d78a:	9303      	str	r3, [sp, #12]
   1d78c:	6803      	ldr	r3, [r0, #0]
   1d78e:	4669      	mov	r1, sp
   1d790:	685b      	ldr	r3, [r3, #4]
   1d792:	4798      	blx	r3
   1d794:	3001      	adds	r0, #1
   1d796:	d071      	beq.n	1d87c <rpc_gnss_event_handler+0x15c>
   1d798:	2000      	movs	r0, #0
   1d79a:	6823      	ldr	r3, [r4, #0]
   1d79c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d7a0:	6023      	str	r3, [r4, #0]
   1d7a2:	b005      	add	sp, #20
   1d7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d7a6:	4c44      	ldr	r4, [pc, #272]	; (1d8b8 <rpc_gnss_event_handler+0x198>)
   1d7a8:	4f44      	ldr	r7, [pc, #272]	; (1d8bc <rpc_gnss_event_handler+0x19c>)
   1d7aa:	6823      	ldr	r3, [r4, #0]
   1d7ac:	6038      	str	r0, [r7, #0]
   1d7ae:	01d9      	lsls	r1, r3, #7
   1d7b0:	d523      	bpl.n	1d7fa <rpc_gnss_event_handler+0xda>
   1d7b2:	f242 1302 	movw	r3, #8450	; 0x2102
   1d7b6:	429d      	cmp	r5, r3
   1d7b8:	d11f      	bne.n	1d7fa <rpc_gnss_event_handler+0xda>
   1d7ba:	6843      	ldr	r3, [r0, #4]
   1d7bc:	b91b      	cbnz	r3, 1d7c6 <rpc_gnss_event_handler+0xa6>
   1d7be:	6823      	ldr	r3, [r4, #0]
   1d7c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1d7c4:	6023      	str	r3, [r4, #0]
   1d7c6:	6823      	ldr	r3, [r4, #0]
   1d7c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d7cc:	6023      	str	r3, [r4, #0]
   1d7ce:	6823      	ldr	r3, [r4, #0]
   1d7d0:	025a      	lsls	r2, r3, #9
   1d7d2:	d430      	bmi.n	1d836 <rpc_gnss_event_handler+0x116>
   1d7d4:	f242 0305 	movw	r3, #8197	; 0x2005
   1d7d8:	429d      	cmp	r5, r3
   1d7da:	d12c      	bne.n	1d836 <rpc_gnss_event_handler+0x116>
   1d7dc:	6823      	ldr	r3, [r4, #0]
   1d7de:	0299      	lsls	r1, r3, #10
   1d7e0:	d529      	bpl.n	1d836 <rpc_gnss_event_handler+0x116>
   1d7e2:	6843      	ldr	r3, [r0, #4]
   1d7e4:	2b00      	cmp	r3, #0
   1d7e6:	d157      	bne.n	1d898 <rpc_gnss_event_handler+0x178>
   1d7e8:	6823      	ldr	r3, [r4, #0]
   1d7ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d7ee:	6023      	str	r3, [r4, #0]
   1d7f0:	6823      	ldr	r3, [r4, #0]
   1d7f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d7f6:	6023      	str	r3, [r4, #0]
   1d7f8:	e01d      	b.n	1d836 <rpc_gnss_event_handler+0x116>
   1d7fa:	6823      	ldr	r3, [r4, #0]
   1d7fc:	025b      	lsls	r3, r3, #9
   1d7fe:	d50e      	bpl.n	1d81e <rpc_gnss_event_handler+0xfe>
   1d800:	f242 1303 	movw	r3, #8451	; 0x2103
   1d804:	429d      	cmp	r5, r3
   1d806:	d10a      	bne.n	1d81e <rpc_gnss_event_handler+0xfe>
   1d808:	6843      	ldr	r3, [r0, #4]
   1d80a:	b91b      	cbnz	r3, 1d814 <rpc_gnss_event_handler+0xf4>
   1d80c:	6823      	ldr	r3, [r4, #0]
   1d80e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d812:	6023      	str	r3, [r4, #0]
   1d814:	6823      	ldr	r3, [r4, #0]
   1d816:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1d81a:	6023      	str	r3, [r4, #0]
   1d81c:	e00b      	b.n	1d836 <rpc_gnss_event_handler+0x116>
   1d81e:	f242 0301 	movw	r3, #8193	; 0x2001
   1d822:	429d      	cmp	r5, r3
   1d824:	d10c      	bne.n	1d840 <rpc_gnss_event_handler+0x120>
   1d826:	6843      	ldr	r3, [r0, #4]
   1d828:	b92b      	cbnz	r3, 1d836 <rpc_gnss_event_handler+0x116>
   1d82a:	6823      	ldr	r3, [r4, #0]
   1d82c:	0c1b      	lsrs	r3, r3, #16
   1d82e:	041b      	lsls	r3, r3, #16
   1d830:	f043 0302 	orr.w	r3, r3, #2
   1d834:	6023      	str	r3, [r4, #0]
   1d836:	f002 febf 	bl	205b8 <rpc_gnss_client_data_free>
   1d83a:	2300      	movs	r3, #0
   1d83c:	603b      	str	r3, [r7, #0]
   1d83e:	e77a      	b.n	1d736 <rpc_gnss_event_handler+0x16>
   1d840:	f242 0304 	movw	r3, #8196	; 0x2004
   1d844:	429d      	cmp	r5, r3
   1d846:	d1c5      	bne.n	1d7d4 <rpc_gnss_event_handler+0xb4>
   1d848:	6843      	ldr	r3, [r0, #4]
   1d84a:	b993      	cbnz	r3, 1d872 <rpc_gnss_event_handler+0x152>
   1d84c:	6823      	ldr	r3, [r4, #0]
   1d84e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d852:	6023      	str	r3, [r4, #0]
   1d854:	6823      	ldr	r3, [r4, #0]
   1d856:	b29b      	uxth	r3, r3
   1d858:	2b03      	cmp	r3, #3
   1d85a:	6823      	ldr	r3, [r4, #0]
   1d85c:	d016      	beq.n	1d88c <rpc_gnss_event_handler+0x16c>
   1d85e:	b29b      	uxth	r3, r3
   1d860:	2b04      	cmp	r3, #4
   1d862:	d1d7      	bne.n	1d814 <rpc_gnss_event_handler+0xf4>
   1d864:	6823      	ldr	r3, [r4, #0]
   1d866:	0c1b      	lsrs	r3, r3, #16
   1d868:	041b      	lsls	r3, r3, #16
   1d86a:	f043 0302 	orr.w	r3, r3, #2
   1d86e:	6023      	str	r3, [r4, #0]
   1d870:	e7d0      	b.n	1d814 <rpc_gnss_event_handler+0xf4>
   1d872:	6823      	ldr	r3, [r4, #0]
   1d874:	b29b      	uxth	r3, r3
   1d876:	2b03      	cmp	r3, #3
   1d878:	d1cc      	bne.n	1d814 <rpc_gnss_event_handler+0xf4>
   1d87a:	e7f3      	b.n	1d864 <rpc_gnss_event_handler+0x144>
   1d87c:	4638      	mov	r0, r7
   1d87e:	f003 fc89 	bl	21194 <nrf_free>
   1d882:	6830      	ldr	r0, [r6, #0]
   1d884:	2800      	cmp	r0, #0
   1d886:	f47f af69 	bne.w	1d75c <rpc_gnss_event_handler+0x3c>
   1d88a:	e76c      	b.n	1d766 <rpc_gnss_event_handler+0x46>
   1d88c:	0c1b      	lsrs	r3, r3, #16
   1d88e:	041b      	lsls	r3, r3, #16
   1d890:	f043 0304 	orr.w	r3, r3, #4
   1d894:	6023      	str	r3, [r4, #0]
   1d896:	e7bd      	b.n	1d814 <rpc_gnss_event_handler+0xf4>
   1d898:	6823      	ldr	r3, [r4, #0]
   1d89a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d89e:	6023      	str	r3, [r4, #0]
   1d8a0:	e7c9      	b.n	1d836 <rpc_gnss_event_handler+0x116>
   1d8a2:	6830      	ldr	r0, [r6, #0]
   1d8a4:	2800      	cmp	r0, #0
   1d8a6:	f43f af5e 	beq.w	1d766 <rpc_gnss_event_handler+0x46>
   1d8aa:	f002 fe85 	bl	205b8 <rpc_gnss_client_data_free>
   1d8ae:	4b03      	ldr	r3, [pc, #12]	; (1d8bc <rpc_gnss_event_handler+0x19c>)
   1d8b0:	601f      	str	r7, [r3, #0]
   1d8b2:	e758      	b.n	1d766 <rpc_gnss_event_handler+0x46>
   1d8b4:	200242be 	.word	0x200242be
   1d8b8:	20021ac8 	.word	0x20021ac8
   1d8bc:	20021acc 	.word	0x20021acc
   1d8c0:	20021ad0 	.word	0x20021ad0

0001d8c4 <gnss_interface_write>:
   1d8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d8c8:	4a74      	ldr	r2, [pc, #464]	; (1da9c <gnss_interface_write+0x1d8>)
   1d8ca:	b09f      	sub	sp, #124	; 0x7c
   1d8cc:	4290      	cmp	r0, r2
   1d8ce:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1d8d0:	f040 80d7 	bne.w	1da82 <gnss_interface_write+0x1be>
   1d8d4:	2900      	cmp	r1, #0
   1d8d6:	f000 80c6 	beq.w	1da66 <gnss_interface_write+0x1a2>
   1d8da:	2d00      	cmp	r5, #0
   1d8dc:	f000 80c3 	beq.w	1da66 <gnss_interface_write+0x1a2>
   1d8e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1d8e2:	2a02      	cmp	r2, #2
   1d8e4:	f040 80bf 	bne.w	1da66 <gnss_interface_write+0x1a2>
   1d8e8:	4c6d      	ldr	r4, [pc, #436]	; (1daa0 <gnss_interface_write+0x1dc>)
   1d8ea:	6822      	ldr	r2, [r4, #0]
   1d8ec:	b292      	uxth	r2, r2
   1d8ee:	2a02      	cmp	r2, #2
   1d8f0:	d004      	beq.n	1d8fc <gnss_interface_write+0x38>
   1d8f2:	6822      	ldr	r2, [r4, #0]
   1d8f4:	b292      	uxth	r2, r2
   1d8f6:	2a04      	cmp	r2, #4
   1d8f8:	f040 80bd 	bne.w	1da76 <gnss_interface_write+0x1b2>
   1d8fc:	2b00      	cmp	r3, #0
   1d8fe:	f040 80c6 	bne.w	1da8e <gnss_interface_write+0x1ca>
   1d902:	6822      	ldr	r2, [r4, #0]
   1d904:	0390      	lsls	r0, r2, #14
   1d906:	d512      	bpl.n	1d92e <gnss_interface_write+0x6a>
   1d908:	6822      	ldr	r2, [r4, #0]
   1d90a:	882b      	ldrh	r3, [r5, #0]
   1d90c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1d910:	6022      	str	r2, [r4, #0]
   1d912:	6822      	ldr	r2, [r4, #0]
   1d914:	3b01      	subs	r3, #1
   1d916:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1d91a:	6022      	str	r2, [r4, #0]
   1d91c:	2b07      	cmp	r3, #7
   1d91e:	f200 80a2 	bhi.w	1da66 <gnss_interface_write+0x1a2>
   1d922:	e8df f003 	tbb	[pc, r3]
   1d926:	7d82      	.short	0x7d82
   1d928:	646e7378 	.word	0x646e7378
   1d92c:	0869      	.short	0x0869
   1d92e:	2000      	movs	r0, #0
   1d930:	b01f      	add	sp, #124	; 0x7c
   1d932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d936:	4608      	mov	r0, r1
   1d938:	a902      	add	r1, sp, #8
   1d93a:	f002 fdf1 	bl	20520 <rpc_gnss_serialize_integrity>
   1d93e:	2172      	movs	r1, #114	; 0x72
   1d940:	4668      	mov	r0, sp
   1d942:	f002 fe07 	bl	20554 <rpc_gnss_client_request_alloc>
   1d946:	4605      	mov	r5, r0
   1d948:	9800      	ldr	r0, [sp, #0]
   1d94a:	2d00      	cmp	r5, #0
   1d94c:	d172      	bne.n	1da34 <gnss_interface_write+0x170>
   1d94e:	2800      	cmp	r0, #0
   1d950:	d077      	beq.n	1da42 <gnss_interface_write+0x17e>
   1d952:	f241 0605 	movw	r6, #4101	; 0x1005
   1d956:	f04f 0c49 	mov.w	ip, #73	; 0x49
   1d95a:	2272      	movs	r2, #114	; 0x72
   1d95c:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1d960:	f04f 0943 	mov.w	r9, #67	; 0x43
   1d964:	f04f 0854 	mov.w	r8, #84	; 0x54
   1d968:	4f4e      	ldr	r7, [pc, #312]	; (1daa4 <gnss_interface_write+0x1e0>)
   1d96a:	a91e      	add	r1, sp, #120	; 0x78
   1d96c:	883b      	ldrh	r3, [r7, #0]
   1d96e:	f880 c00f 	strb.w	ip, [r0, #15]
   1d972:	3301      	adds	r3, #1
   1d974:	b29b      	uxth	r3, r3
   1d976:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   1d97a:	f841 cd74 	str.w	ip, [r1, #-116]!
   1d97e:	7145      	strb	r5, [r0, #5]
   1d980:	7185      	strb	r5, [r0, #6]
   1d982:	71c5      	strb	r5, [r0, #7]
   1d984:	7205      	strb	r5, [r0, #8]
   1d986:	7245      	strb	r5, [r0, #9]
   1d988:	7285      	strb	r5, [r0, #10]
   1d98a:	72c5      	strb	r5, [r0, #11]
   1d98c:	7102      	strb	r2, [r0, #4]
   1d98e:	f880 900c 	strb.w	r9, [r0, #12]
   1d992:	f880 800d 	strb.w	r8, [r0, #13]
   1d996:	f880 e00e 	strb.w	lr, [r0, #14]
   1d99a:	6800      	ldr	r0, [r0, #0]
   1d99c:	803b      	strh	r3, [r7, #0]
   1d99e:	f7ef f8d5 	bl	cb4c <memcpy>
   1d9a2:	4b41      	ldr	r3, [pc, #260]	; (1daa8 <gnss_interface_write+0x1e4>)
   1d9a4:	4631      	mov	r1, r6
   1d9a6:	9800      	ldr	r0, [sp, #0]
   1d9a8:	601d      	str	r5, [r3, #0]
   1d9aa:	f002 fde7 	bl	2057c <rpc_gnss_client_request_send>
   1d9ae:	2800      	cmp	r0, #0
   1d9b0:	d14e      	bne.n	1da50 <gnss_interface_write+0x18c>
   1d9b2:	6823      	ldr	r3, [r4, #0]
   1d9b4:	0299      	lsls	r1, r3, #10
   1d9b6:	d50b      	bpl.n	1d9d0 <gnss_interface_write+0x10c>
   1d9b8:	4e3c      	ldr	r6, [pc, #240]	; (1daac <gnss_interface_write+0x1e8>)
   1d9ba:	4d38      	ldr	r5, [pc, #224]	; (1da9c <gnss_interface_write+0x1d8>)
   1d9bc:	e000      	b.n	1d9c0 <gnss_interface_write+0xfc>
   1d9be:	b978      	cbnz	r0, 1d9e0 <gnss_interface_write+0x11c>
   1d9c0:	4631      	mov	r1, r6
   1d9c2:	4628      	mov	r0, r5
   1d9c4:	f7f9 f880 	bl	16ac8 <bsd_os_timedwait>
   1d9c8:	6823      	ldr	r3, [r4, #0]
   1d9ca:	029a      	lsls	r2, r3, #10
   1d9cc:	d4f7      	bmi.n	1d9be <gnss_interface_write+0xfa>
   1d9ce:	b938      	cbnz	r0, 1d9e0 <gnss_interface_write+0x11c>
   1d9d0:	6823      	ldr	r3, [r4, #0]
   1d9d2:	039b      	lsls	r3, r3, #14
   1d9d4:	d4ab      	bmi.n	1d92e <gnss_interface_write+0x6a>
   1d9d6:	2005      	movs	r0, #5
   1d9d8:	6823      	ldr	r3, [r4, #0]
   1d9da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d9de:	6023      	str	r3, [r4, #0]
   1d9e0:	f7f9 f92a 	bl	16c38 <bsd_os_errno_set>
   1d9e4:	f04f 30ff 	mov.w	r0, #4294967295
   1d9e8:	b01f      	add	sp, #124	; 0x7c
   1d9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d9ee:	4608      	mov	r0, r1
   1d9f0:	a902      	add	r1, sp, #8
   1d9f2:	f002 fd4d 	bl	20490 <rpc_gnss_serialize_time_and_sv_tow>
   1d9f6:	e7a2      	b.n	1d93e <gnss_interface_write+0x7a>
   1d9f8:	4608      	mov	r0, r1
   1d9fa:	a902      	add	r1, sp, #8
   1d9fc:	f002 fd70 	bl	204e0 <rpc_gnss_serialize_location>
   1da00:	e79d      	b.n	1d93e <gnss_interface_write+0x7a>
   1da02:	4608      	mov	r0, r1
   1da04:	a902      	add	r1, sp, #8
   1da06:	f002 fd29 	bl	2045c <rpc_gnss_serialize_nequick>
   1da0a:	e798      	b.n	1d93e <gnss_interface_write+0x7a>
   1da0c:	4608      	mov	r0, r1
   1da0e:	a902      	add	r1, sp, #8
   1da10:	f002 fd00 	bl	20414 <rpc_gnss_serialize_klob>
   1da14:	e793      	b.n	1d93e <gnss_interface_write+0x7a>
   1da16:	4608      	mov	r0, r1
   1da18:	a902      	add	r1, sp, #8
   1da1a:	f002 fcc9 	bl	203b0 <rpc_gnss_serialize_alm>
   1da1e:	e78e      	b.n	1d93e <gnss_interface_write+0x7a>
   1da20:	4608      	mov	r0, r1
   1da22:	a902      	add	r1, sp, #8
   1da24:	f002 fc72 	bl	2030c <rpc_gnss_serialize_ephe>
   1da28:	e789      	b.n	1d93e <gnss_interface_write+0x7a>
   1da2a:	4608      	mov	r0, r1
   1da2c:	a902      	add	r1, sp, #8
   1da2e:	f002 fc4b 	bl	202c8 <rpc_gnss_serialize_utc>
   1da32:	e784      	b.n	1d93e <gnss_interface_write+0x7a>
   1da34:	b128      	cbz	r0, 1da42 <gnss_interface_write+0x17e>
   1da36:	6803      	ldr	r3, [r0, #0]
   1da38:	b11b      	cbz	r3, 1da42 <gnss_interface_write+0x17e>
   1da3a:	4618      	mov	r0, r3
   1da3c:	f002 fdbc 	bl	205b8 <rpc_gnss_client_data_free>
   1da40:	9800      	ldr	r0, [sp, #0]
   1da42:	f002 fdb1 	bl	205a8 <rpc_gnss_client_message_free>
   1da46:	2023      	movs	r0, #35	; 0x23
   1da48:	f7f9 f8f6 	bl	16c38 <bsd_os_errno_set>
   1da4c:	f04f 30ff 	mov.w	r0, #4294967295
   1da50:	6823      	ldr	r3, [r4, #0]
   1da52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1da56:	6023      	str	r3, [r4, #0]
   1da58:	6823      	ldr	r3, [r4, #0]
   1da5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1da5e:	6023      	str	r3, [r4, #0]
   1da60:	b01f      	add	sp, #124	; 0x7c
   1da62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1da66:	2016      	movs	r0, #22
   1da68:	f7f9 f8e6 	bl	16c38 <bsd_os_errno_set>
   1da6c:	f04f 30ff 	mov.w	r0, #4294967295
   1da70:	b01f      	add	sp, #124	; 0x7c
   1da72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1da76:	2039      	movs	r0, #57	; 0x39
   1da78:	f7f9 f8de 	bl	16c38 <bsd_os_errno_set>
   1da7c:	f04f 30ff 	mov.w	r0, #4294967295
   1da80:	e756      	b.n	1d930 <gnss_interface_write+0x6c>
   1da82:	2009      	movs	r0, #9
   1da84:	f7f9 f8d8 	bl	16c38 <bsd_os_errno_set>
   1da88:	f04f 30ff 	mov.w	r0, #4294967295
   1da8c:	e750      	b.n	1d930 <gnss_interface_write+0x6c>
   1da8e:	202d      	movs	r0, #45	; 0x2d
   1da90:	f7f9 f8d2 	bl	16c38 <bsd_os_errno_set>
   1da94:	f04f 30ff 	mov.w	r0, #4294967295
   1da98:	e74a      	b.n	1d930 <gnss_interface_write+0x6c>
   1da9a:	bf00      	nop
   1da9c:	49765443 	.word	0x49765443
   1daa0:	20021ac8 	.word	0x20021ac8
   1daa4:	200242be 	.word	0x200242be
   1daa8:	20021acc 	.word	0x20021acc
   1daac:	200204c4 	.word	0x200204c4

0001dab0 <gnss_interface_read>:
   1dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dab4:	4c55      	ldr	r4, [pc, #340]	; (1dc0c <gnss_interface_read+0x15c>)
   1dab6:	b0b7      	sub	sp, #220	; 0xdc
   1dab8:	42a0      	cmp	r0, r4
   1daba:	f040 81fa 	bne.w	1deb2 <gnss_interface_read+0x402>
   1dabe:	460e      	mov	r6, r1
   1dac0:	2900      	cmp	r1, #0
   1dac2:	f000 81f0 	beq.w	1dea6 <gnss_interface_read+0x3f6>
   1dac6:	2ad7      	cmp	r2, #215	; 0xd7
   1dac8:	f240 81ed 	bls.w	1dea6 <gnss_interface_read+0x3f6>
   1dacc:	4d50      	ldr	r5, [pc, #320]	; (1dc10 <gnss_interface_read+0x160>)
   1dace:	469a      	mov	sl, r3
   1dad0:	682b      	ldr	r3, [r5, #0]
   1dad2:	b29b      	uxth	r3, r3
   1dad4:	2b04      	cmp	r3, #4
   1dad6:	d004      	beq.n	1dae2 <gnss_interface_read+0x32>
   1dad8:	682b      	ldr	r3, [r5, #0]
   1dada:	b29b      	uxth	r3, r3
   1dadc:	2b02      	cmp	r3, #2
   1dade:	f040 81dc 	bne.w	1de9a <gnss_interface_read+0x3ea>
   1dae2:	f1ba 0f00 	cmp.w	sl, #0
   1dae6:	d178      	bne.n	1dbda <gnss_interface_read+0x12a>
   1dae8:	2102      	movs	r1, #2
   1daea:	20b6      	movs	r0, #182	; 0xb6
   1daec:	2400      	movs	r4, #0
   1daee:	682b      	ldr	r3, [r5, #0]
   1daf0:	f10d 020e 	add.w	r2, sp, #14
   1daf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1daf8:	602b      	str	r3, [r5, #0]
   1dafa:	ab08      	add	r3, sp, #32
   1dafc:	9304      	str	r3, [sp, #16]
   1dafe:	f8df b118 	ldr.w	fp, [pc, #280]	; 1dc18 <gnss_interface_read+0x168>
   1db02:	ea0a 0301 	and.w	r3, sl, r1
   1db06:	4f43      	ldr	r7, [pc, #268]	; (1dc14 <gnss_interface_read+0x164>)
   1db08:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1dc1c <gnss_interface_read+0x16c>
   1db0c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1dc0c <gnss_interface_read+0x15c>
   1db10:	9005      	str	r0, [sp, #20]
   1db12:	9107      	str	r1, [sp, #28]
   1db14:	9206      	str	r2, [sp, #24]
   1db16:	9301      	str	r3, [sp, #4]
   1db18:	f8db 0000 	ldr.w	r0, [fp]
   1db1c:	4652      	mov	r2, sl
   1db1e:	6803      	ldr	r3, [r0, #0]
   1db20:	a904      	add	r1, sp, #16
   1db22:	689b      	ldr	r3, [r3, #8]
   1db24:	4798      	blx	r3
   1db26:	2800      	cmp	r0, #0
   1db28:	da2a      	bge.n	1db80 <gnss_interface_read+0xd0>
   1db2a:	9b01      	ldr	r3, [sp, #4]
   1db2c:	b15b      	cbz	r3, 1db46 <gnss_interface_read+0x96>
   1db2e:	1c42      	adds	r2, r0, #1
   1db30:	4603      	mov	r3, r0
   1db32:	d125      	bne.n	1db80 <gnss_interface_read+0xd0>
   1db34:	b9dc      	cbnz	r4, 1db6e <gnss_interface_read+0xbe>
   1db36:	2023      	movs	r0, #35	; 0x23
   1db38:	461c      	mov	r4, r3
   1db3a:	f7f9 f87d 	bl	16c38 <bsd_os_errno_set>
   1db3e:	4620      	mov	r0, r4
   1db40:	b037      	add	sp, #220	; 0xdc
   1db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db46:	682a      	ldr	r2, [r5, #0]
   1db48:	783b      	ldrb	r3, [r7, #0]
   1db4a:	03d1      	lsls	r1, r2, #15
   1db4c:	d40c      	bmi.n	1db68 <gnss_interface_read+0xb8>
   1db4e:	b95c      	cbnz	r4, 1db68 <gnss_interface_read+0xb8>
   1db50:	b163      	cbz	r3, 1db6c <gnss_interface_read+0xbc>
   1db52:	4649      	mov	r1, r9
   1db54:	4640      	mov	r0, r8
   1db56:	f7f8 ffb7 	bl	16ac8 <bsd_os_timedwait>
   1db5a:	682b      	ldr	r3, [r5, #0]
   1db5c:	03db      	lsls	r3, r3, #15
   1db5e:	d437      	bmi.n	1dbd0 <gnss_interface_read+0x120>
   1db60:	783b      	ldrb	r3, [r7, #0]
   1db62:	2800      	cmp	r0, #0
   1db64:	d0f4      	beq.n	1db50 <gnss_interface_read+0xa0>
   1db66:	4604      	mov	r4, r0
   1db68:	2b00      	cmp	r3, #0
   1db6a:	d1d5      	bne.n	1db18 <gnss_interface_read+0x68>
   1db6c:	2470      	movs	r4, #112	; 0x70
   1db6e:	4620      	mov	r0, r4
   1db70:	f04f 34ff 	mov.w	r4, #4294967295
   1db74:	f7f9 f860 	bl	16c38 <bsd_os_errno_set>
   1db78:	4620      	mov	r0, r4
   1db7a:	b037      	add	sp, #220	; 0xdc
   1db7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db80:	f244 0202 	movw	r2, #16386	; 0x4002
   1db84:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1db88:	4293      	cmp	r3, r2
   1db8a:	d02f      	beq.n	1dbec <gnss_interface_read+0x13c>
   1db8c:	f244 0201 	movw	r2, #16385	; 0x4001
   1db90:	4293      	cmp	r3, r2
   1db92:	d045      	beq.n	1dc20 <gnss_interface_read+0x170>
   1db94:	f244 0203 	movw	r2, #16387	; 0x4003
   1db98:	4293      	cmp	r3, r2
   1db9a:	f040 8184 	bne.w	1dea6 <gnss_interface_read+0x3f6>
   1db9e:	2203      	movs	r2, #3
   1dba0:	2414      	movs	r4, #20
   1dba2:	9b08      	ldr	r3, [sp, #32]
   1dba4:	7032      	strb	r2, [r6, #0]
   1dba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dba8:	60b3      	str	r3, [r6, #8]
   1dbaa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1dbae:	e9c6 2303 	strd	r2, r3, [r6, #12]
   1dbb2:	f8db 0000 	ldr.w	r0, [fp]
   1dbb6:	6803      	ldr	r3, [r0, #0]
   1dbb8:	68db      	ldr	r3, [r3, #12]
   1dbba:	4798      	blx	r3
   1dbbc:	2800      	cmp	r0, #0
   1dbbe:	ddbe      	ble.n	1db3e <gnss_interface_read+0x8e>
   1dbc0:	4620      	mov	r0, r4
   1dbc2:	682b      	ldr	r3, [r5, #0]
   1dbc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1dbc8:	602b      	str	r3, [r5, #0]
   1dbca:	b037      	add	sp, #220	; 0xdc
   1dbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbd0:	783b      	ldrb	r3, [r7, #0]
   1dbd2:	4604      	mov	r4, r0
   1dbd4:	2b00      	cmp	r3, #0
   1dbd6:	d19f      	bne.n	1db18 <gnss_interface_read+0x68>
   1dbd8:	e7c8      	b.n	1db6c <gnss_interface_read+0xbc>
   1dbda:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   1dbde:	d183      	bne.n	1dae8 <gnss_interface_read+0x38>
   1dbe0:	202d      	movs	r0, #45	; 0x2d
   1dbe2:	f7f9 f829 	bl	16c38 <bsd_os_errno_set>
   1dbe6:	f04f 34ff 	mov.w	r4, #4294967295
   1dbea:	e7a8      	b.n	1db3e <gnss_interface_read+0x8e>
   1dbec:	a808      	add	r0, sp, #32
   1dbee:	f008 fdf9 	bl	267e4 <strlen>
   1dbf2:	2302      	movs	r3, #2
   1dbf4:	1c44      	adds	r4, r0, #1
   1dbf6:	b2a4      	uxth	r4, r4
   1dbf8:	f806 3b08 	strb.w	r3, [r6], #8
   1dbfc:	4622      	mov	r2, r4
   1dbfe:	a908      	add	r1, sp, #32
   1dc00:	4630      	mov	r0, r6
   1dc02:	f7ee ffa3 	bl	cb4c <memcpy>
   1dc06:	3408      	adds	r4, #8
   1dc08:	e7d3      	b.n	1dbb2 <gnss_interface_read+0x102>
   1dc0a:	bf00      	nop
   1dc0c:	49765443 	.word	0x49765443
   1dc10:	20021ac8 	.word	0x20021ac8
   1dc14:	20026290 	.word	0x20026290
   1dc18:	20021ad0 	.word	0x20021ad0
   1dc1c:	200204c4 	.word	0x200204c4
   1dc20:	2401      	movs	r4, #1
   1dc22:	a809      	add	r0, sp, #36	; 0x24
   1dc24:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1dc26:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1dc2a:	e9c6 2304 	strd	r2, r3, [r6, #16]
   1dc2e:	990d      	ldr	r1, [sp, #52]	; 0x34
   1dc30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dc32:	7034      	strb	r4, [r6, #0]
   1dc34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dc36:	61b1      	str	r1, [r6, #24]
   1dc38:	9910      	ldr	r1, [sp, #64]	; 0x40
   1dc3a:	61f2      	str	r2, [r6, #28]
   1dc3c:	6233      	str	r3, [r6, #32]
   1dc3e:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   1dc42:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   1dc46:	6271      	str	r1, [r6, #36]	; 0x24
   1dc48:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1dc4c:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   1dc50:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   1dc54:	6373      	str	r3, [r6, #52]	; 0x34
   1dc56:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1dc5a:	63b1      	str	r1, [r6, #56]	; 0x38
   1dc5c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1dc60:	63f2      	str	r2, [r6, #60]	; 0x3c
   1dc62:	6433      	str	r3, [r6, #64]	; 0x40
   1dc64:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1dc68:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1dc6c:	8531      	strh	r1, [r6, #40]	; 0x28
   1dc6e:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   1dc72:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   1dc76:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1dc7a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   1dc7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1dc80:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   1dc84:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   1dc88:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   1dc8c:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1dc90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dc92:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1dc96:	8630      	strh	r0, [r6, #48]	; 0x30
   1dc98:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   1dc9c:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   1dca0:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1dca4:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   1dca8:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1dcac:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   1dcb0:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   1dcb4:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   1dcb8:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   1dcbc:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1dcc0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1dcc4:	64f3      	str	r3, [r6, #76]	; 0x4c
   1dcc6:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1dcca:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   1dcce:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   1dcd2:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   1dcd6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1dcda:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1dcde:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   1dce2:	65b1      	str	r1, [r6, #88]	; 0x58
   1dce4:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   1dce8:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1dcec:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   1dcf0:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   1dcf4:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1dcf8:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   1dcfc:	6672      	str	r2, [r6, #100]	; 0x64
   1dcfe:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   1dd02:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1dd06:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1dd0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1dd0c:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   1dd10:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1dd14:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1dd18:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1dd1c:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   1dd20:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   1dd24:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1dd28:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   1dd2c:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   1dd30:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   1dd34:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1dd38:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   1dd3c:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   1dd40:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1dd44:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   1dd48:	6733      	str	r3, [r6, #112]	; 0x70
   1dd4a:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   1dd4e:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   1dd52:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   1dd56:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   1dd5a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   1dd5e:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   1dd62:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   1dd66:	67f1      	str	r1, [r6, #124]	; 0x7c
   1dd68:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   1dd6c:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   1dd70:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   1dd74:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   1dd78:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   1dd7c:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   1dd80:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   1dd84:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   1dd88:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   1dd8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1dd8e:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   1dd92:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   1dd96:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1dd9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1dd9c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1dda0:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   1dda4:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   1dda8:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   1ddac:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1ddb0:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   1ddb4:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   1ddb8:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   1ddbc:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   1ddc0:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   1ddc4:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1ddc8:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   1ddcc:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   1ddd0:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   1ddd4:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   1ddd8:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   1dddc:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   1dde0:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1dde4:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   1dde8:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   1ddec:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   1ddf0:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   1ddf4:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   1ddf8:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   1ddfc:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   1de00:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1de04:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   1de08:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   1de0c:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   1de10:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   1de14:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   1de18:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   1de1c:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   1de20:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1de22:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1de26:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   1de2a:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   1de2e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1de32:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1de36:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   1de3a:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   1de3e:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   1de42:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   1de46:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1de4a:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   1de4e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1de52:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1de56:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   1de5a:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   1de5e:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   1de62:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   1de66:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1de6a:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1de6e:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1de72:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   1de76:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   1de7a:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1de7e:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1de82:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   1de86:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1de8a:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   1de8e:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   1de92:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   1de96:	24d8      	movs	r4, #216	; 0xd8
   1de98:	e68b      	b.n	1dbb2 <gnss_interface_read+0x102>
   1de9a:	2039      	movs	r0, #57	; 0x39
   1de9c:	f7f8 fecc 	bl	16c38 <bsd_os_errno_set>
   1dea0:	f04f 34ff 	mov.w	r4, #4294967295
   1dea4:	e64b      	b.n	1db3e <gnss_interface_read+0x8e>
   1dea6:	2016      	movs	r0, #22
   1dea8:	f7f8 fec6 	bl	16c38 <bsd_os_errno_set>
   1deac:	f04f 34ff 	mov.w	r4, #4294967295
   1deb0:	e645      	b.n	1db3e <gnss_interface_read+0x8e>
   1deb2:	2009      	movs	r0, #9
   1deb4:	f7f8 fec0 	bl	16c38 <bsd_os_errno_set>
   1deb8:	f04f 34ff 	mov.w	r4, #4294967295
   1debc:	e63f      	b.n	1db3e <gnss_interface_read+0x8e>
   1debe:	bf00      	nop

0001dec0 <gnss_interface_setopt>:
   1dec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dec4:	4db9      	ldr	r5, [pc, #740]	; (1e1ac <gnss_interface_setopt+0x2ec>)
   1dec6:	b087      	sub	sp, #28
   1dec8:	682c      	ldr	r4, [r5, #0]
   1deca:	4690      	mov	r8, r2
   1decc:	b2a4      	uxth	r4, r4
   1dece:	2c02      	cmp	r4, #2
   1ded0:	d00c      	beq.n	1deec <gnss_interface_setopt+0x2c>
   1ded2:	2a08      	cmp	r2, #8
   1ded4:	d00a      	beq.n	1deec <gnss_interface_setopt+0x2c>
   1ded6:	3a0a      	subs	r2, #10
   1ded8:	2a01      	cmp	r2, #1
   1deda:	d907      	bls.n	1deec <gnss_interface_setopt+0x2c>
   1dedc:	200e      	movs	r0, #14
   1dede:	f7f8 feab 	bl	16c38 <bsd_os_errno_set>
   1dee2:	f04f 30ff 	mov.w	r0, #4294967295
   1dee6:	b007      	add	sp, #28
   1dee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1deec:	682a      	ldr	r2, [r5, #0]
   1deee:	0252      	lsls	r2, r2, #9
   1def0:	f100 8155 	bmi.w	1e19e <gnss_interface_setopt+0x2de>
   1def4:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1def8:	f040 8145 	bne.w	1e186 <gnss_interface_setopt+0x2c6>
   1defc:	4aac      	ldr	r2, [pc, #688]	; (1e1b0 <gnss_interface_setopt+0x2f0>)
   1defe:	4290      	cmp	r0, r2
   1df00:	f040 8147 	bne.w	1e192 <gnss_interface_setopt+0x2d2>
   1df04:	f1a8 020a 	sub.w	r2, r8, #10
   1df08:	2a01      	cmp	r2, #1
   1df0a:	d902      	bls.n	1df12 <gnss_interface_setopt+0x52>
   1df0c:	2b00      	cmp	r3, #0
   1df0e:	f000 811e 	beq.w	1e14e <gnss_interface_setopt+0x28e>
   1df12:	f108 32ff 	add.w	r2, r8, #4294967295
   1df16:	2a0a      	cmp	r2, #10
   1df18:	f200 8119 	bhi.w	1e14e <gnss_interface_setopt+0x28e>
   1df1c:	e8df f012 	tbh	[pc, r2, lsl #1]
   1df20:	00950088 	.word	0x00950088
   1df24:	00ab00a1 	.word	0x00ab00a1
   1df28:	00c200b7 	.word	0x00c200b7
   1df2c:	00e600ce 	.word	0x00e600ce
   1df30:	010800fc 	.word	0x010800fc
   1df34:	000b      	.short	0x000b
   1df36:	682b      	ldr	r3, [r5, #0]
   1df38:	b29b      	uxth	r3, r3
   1df3a:	2b04      	cmp	r3, #4
   1df3c:	d1ce      	bne.n	1dedc <gnss_interface_setopt+0x1c>
   1df3e:	2203      	movs	r2, #3
   1df40:	f241 0604 	movw	r6, #4100	; 0x1004
   1df44:	2300      	movs	r3, #0
   1df46:	4637      	mov	r7, r6
   1df48:	f88d 2008 	strb.w	r2, [sp, #8]
   1df4c:	f88d 3009 	strb.w	r3, [sp, #9]
   1df50:	f88d 300a 	strb.w	r3, [sp, #10]
   1df54:	f88d 300b 	strb.w	r3, [sp, #11]
   1df58:	f88d 300c 	strb.w	r3, [sp, #12]
   1df5c:	682b      	ldr	r3, [r5, #0]
   1df5e:	2112      	movs	r1, #18
   1df60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1df64:	4668      	mov	r0, sp
   1df66:	602b      	str	r3, [r5, #0]
   1df68:	f002 faf4 	bl	20554 <rpc_gnss_client_request_alloc>
   1df6c:	4604      	mov	r4, r0
   1df6e:	9800      	ldr	r0, [sp, #0]
   1df70:	2c00      	cmp	r4, #0
   1df72:	f040 80f2 	bne.w	1e15a <gnss_interface_setopt+0x29a>
   1df76:	2800      	cmp	r0, #0
   1df78:	f000 80f6 	beq.w	1e168 <gnss_interface_setopt+0x2a8>
   1df7c:	2212      	movs	r2, #18
   1df7e:	f04f 0976 	mov.w	r9, #118	; 0x76
   1df82:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1df86:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1df8a:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1df8e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 1e1bc <gnss_interface_setopt+0x2fc>
   1df92:	a906      	add	r1, sp, #24
   1df94:	f8bc 3000 	ldrh.w	r3, [ip]
   1df98:	f880 900e 	strb.w	r9, [r0, #14]
   1df9c:	3301      	adds	r3, #1
   1df9e:	b29b      	uxth	r3, r3
   1dfa0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1dfa4:	f841 6d14 	str.w	r6, [r1, #-20]!
   1dfa8:	7144      	strb	r4, [r0, #5]
   1dfaa:	7184      	strb	r4, [r0, #6]
   1dfac:	71c4      	strb	r4, [r0, #7]
   1dfae:	7204      	strb	r4, [r0, #8]
   1dfb0:	7244      	strb	r4, [r0, #9]
   1dfb2:	7284      	strb	r4, [r0, #10]
   1dfb4:	72c4      	strb	r4, [r0, #11]
   1dfb6:	7102      	strb	r2, [r0, #4]
   1dfb8:	f880 b00c 	strb.w	fp, [r0, #12]
   1dfbc:	f880 a00d 	strb.w	sl, [r0, #13]
   1dfc0:	f880 e00f 	strb.w	lr, [r0, #15]
   1dfc4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1e1c0 <gnss_interface_setopt+0x300>
   1dfc8:	6800      	ldr	r0, [r0, #0]
   1dfca:	f8ac 3000 	strh.w	r3, [ip]
   1dfce:	f7ee fdbd 	bl	cb4c <memcpy>
   1dfd2:	4639      	mov	r1, r7
   1dfd4:	9800      	ldr	r0, [sp, #0]
   1dfd6:	f8c9 4000 	str.w	r4, [r9]
   1dfda:	f002 facf 	bl	2057c <rpc_gnss_client_request_send>
   1dfde:	2800      	cmp	r0, #0
   1dfe0:	f040 80c7 	bne.w	1e172 <gnss_interface_setopt+0x2b2>
   1dfe4:	4f73      	ldr	r7, [pc, #460]	; (1e1b4 <gnss_interface_setopt+0x2f4>)
   1dfe6:	4e72      	ldr	r6, [pc, #456]	; (1e1b0 <gnss_interface_setopt+0x2f0>)
   1dfe8:	4639      	mov	r1, r7
   1dfea:	4630      	mov	r0, r6
   1dfec:	f7f8 fd6c 	bl	16ac8 <bsd_os_timedwait>
   1dff0:	682c      	ldr	r4, [r5, #0]
   1dff2:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1dff6:	d1f7      	bne.n	1dfe8 <gnss_interface_setopt+0x128>
   1dff8:	f8d9 0000 	ldr.w	r0, [r9]
   1dffc:	b118      	cbz	r0, 1e006 <gnss_interface_setopt+0x146>
   1dffe:	f002 fadb 	bl	205b8 <rpc_gnss_client_data_free>
   1e002:	f8c9 4000 	str.w	r4, [r9]
   1e006:	682b      	ldr	r3, [r5, #0]
   1e008:	021b      	lsls	r3, r3, #8
   1e00a:	f140 8098 	bpl.w	1e13e <gnss_interface_setopt+0x27e>
   1e00e:	f1b8 0f08 	cmp.w	r8, #8
   1e012:	f040 809a 	bne.w	1e14a <gnss_interface_setopt+0x28a>
   1e016:	4b68      	ldr	r3, [pc, #416]	; (1e1b8 <gnss_interface_setopt+0x2f8>)
   1e018:	6818      	ldr	r0, [r3, #0]
   1e01a:	6803      	ldr	r3, [r0, #0]
   1e01c:	691b      	ldr	r3, [r3, #16]
   1e01e:	4798      	blx	r3
   1e020:	2000      	movs	r0, #0
   1e022:	682b      	ldr	r3, [r5, #0]
   1e024:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1e028:	602b      	str	r3, [r5, #0]
   1e02a:	b007      	add	sp, #28
   1e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e030:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e032:	2a02      	cmp	r2, #2
   1e034:	f040 808b 	bne.w	1e14e <gnss_interface_setopt+0x28e>
   1e038:	2208      	movs	r2, #8
   1e03a:	f241 1603 	movw	r6, #4355	; 0x1103
   1e03e:	881b      	ldrh	r3, [r3, #0]
   1e040:	9202      	str	r2, [sp, #8]
   1e042:	f8ad 300f 	strh.w	r3, [sp, #15]
   1e046:	4637      	mov	r7, r6
   1e048:	e788      	b.n	1df5c <gnss_interface_setopt+0x9c>
   1e04a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e04c:	2a02      	cmp	r2, #2
   1e04e:	d17e      	bne.n	1e14e <gnss_interface_setopt+0x28e>
   1e050:	2210      	movs	r2, #16
   1e052:	f241 1603 	movw	r6, #4355	; 0x1103
   1e056:	881b      	ldrh	r3, [r3, #0]
   1e058:	9202      	str	r2, [sp, #8]
   1e05a:	f8ad 3011 	strh.w	r3, [sp, #17]
   1e05e:	4637      	mov	r7, r6
   1e060:	e77c      	b.n	1df5c <gnss_interface_setopt+0x9c>
   1e062:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e064:	2a01      	cmp	r2, #1
   1e066:	d172      	bne.n	1e14e <gnss_interface_setopt+0x28e>
   1e068:	781b      	ldrb	r3, [r3, #0]
   1e06a:	2b01      	cmp	r3, #1
   1e06c:	d16f      	bne.n	1e14e <gnss_interface_setopt+0x28e>
   1e06e:	f241 1603 	movw	r6, #4355	; 0x1103
   1e072:	4637      	mov	r7, r6
   1e074:	e772      	b.n	1df5c <gnss_interface_setopt+0x9c>
   1e076:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e078:	2a02      	cmp	r2, #2
   1e07a:	d168      	bne.n	1e14e <gnss_interface_setopt+0x28e>
   1e07c:	2220      	movs	r2, #32
   1e07e:	f241 1603 	movw	r6, #4355	; 0x1103
   1e082:	881b      	ldrh	r3, [r3, #0]
   1e084:	9202      	str	r2, [sp, #8]
   1e086:	f8ad 3013 	strh.w	r3, [sp, #19]
   1e08a:	4637      	mov	r7, r6
   1e08c:	e766      	b.n	1df5c <gnss_interface_setopt+0x9c>
   1e08e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e090:	2a01      	cmp	r2, #1
   1e092:	d15c      	bne.n	1e14e <gnss_interface_setopt+0x28e>
   1e094:	f241 1603 	movw	r6, #4355	; 0x1103
   1e098:	781b      	ldrb	r3, [r3, #0]
   1e09a:	9202      	str	r2, [sp, #8]
   1e09c:	f88d 300c 	strb.w	r3, [sp, #12]
   1e0a0:	4637      	mov	r7, r6
   1e0a2:	e75b      	b.n	1df5c <gnss_interface_setopt+0x9c>
   1e0a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e0a6:	2a01      	cmp	r2, #1
   1e0a8:	d151      	bne.n	1e14e <gnss_interface_setopt+0x28e>
   1e0aa:	2202      	movs	r2, #2
   1e0ac:	f241 1603 	movw	r6, #4355	; 0x1103
   1e0b0:	781b      	ldrb	r3, [r3, #0]
   1e0b2:	9202      	str	r2, [sp, #8]
   1e0b4:	f88d 300d 	strb.w	r3, [sp, #13]
   1e0b8:	4637      	mov	r7, r6
   1e0ba:	e74f      	b.n	1df5c <gnss_interface_setopt+0x9c>
   1e0bc:	682a      	ldr	r2, [r5, #0]
   1e0be:	b292      	uxth	r2, r2
   1e0c0:	2a02      	cmp	r2, #2
   1e0c2:	f47f af0b 	bne.w	1dedc <gnss_interface_setopt+0x1c>
   1e0c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e0c8:	2a04      	cmp	r2, #4
   1e0ca:	d140      	bne.n	1e14e <gnss_interface_setopt+0x28e>
   1e0cc:	2101      	movs	r1, #1
   1e0ce:	f241 0604 	movw	r6, #4100	; 0x1004
   1e0d2:	682a      	ldr	r2, [r5, #0]
   1e0d4:	6818      	ldr	r0, [r3, #0]
   1e0d6:	0c13      	lsrs	r3, r2, #16
   1e0d8:	041b      	lsls	r3, r3, #16
   1e0da:	f043 0303 	orr.w	r3, r3, #3
   1e0de:	f8cd 0009 	str.w	r0, [sp, #9]
   1e0e2:	602b      	str	r3, [r5, #0]
   1e0e4:	f88d 1008 	strb.w	r1, [sp, #8]
   1e0e8:	4637      	mov	r7, r6
   1e0ea:	e737      	b.n	1df5c <gnss_interface_setopt+0x9c>
   1e0ec:	682a      	ldr	r2, [r5, #0]
   1e0ee:	b292      	uxth	r2, r2
   1e0f0:	2a04      	cmp	r2, #4
   1e0f2:	d004      	beq.n	1e0fe <gnss_interface_setopt+0x23e>
   1e0f4:	682a      	ldr	r2, [r5, #0]
   1e0f6:	b292      	uxth	r2, r2
   1e0f8:	2a02      	cmp	r2, #2
   1e0fa:	f47f aeef 	bne.w	1dedc <gnss_interface_setopt+0x1c>
   1e0fe:	2200      	movs	r2, #0
   1e100:	f88d 2008 	strb.w	r2, [sp, #8]
   1e104:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e106:	2a04      	cmp	r2, #4
   1e108:	d121      	bne.n	1e14e <gnss_interface_setopt+0x28e>
   1e10a:	f241 0604 	movw	r6, #4100	; 0x1004
   1e10e:	681b      	ldr	r3, [r3, #0]
   1e110:	4637      	mov	r7, r6
   1e112:	f8cd 3009 	str.w	r3, [sp, #9]
   1e116:	e721      	b.n	1df5c <gnss_interface_setopt+0x9c>
   1e118:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e11a:	2a01      	cmp	r2, #1
   1e11c:	d117      	bne.n	1e14e <gnss_interface_setopt+0x28e>
   1e11e:	2240      	movs	r2, #64	; 0x40
   1e120:	f241 1603 	movw	r6, #4355	; 0x1103
   1e124:	781b      	ldrb	r3, [r3, #0]
   1e126:	9202      	str	r2, [sp, #8]
   1e128:	f88d 3015 	strb.w	r3, [sp, #21]
   1e12c:	4637      	mov	r7, r6
   1e12e:	e715      	b.n	1df5c <gnss_interface_setopt+0x9c>
   1e130:	682b      	ldr	r3, [r5, #0]
   1e132:	b29b      	uxth	r3, r3
   1e134:	2b04      	cmp	r3, #4
   1e136:	f47f aed1 	bne.w	1dedc <gnss_interface_setopt+0x1c>
   1e13a:	2202      	movs	r2, #2
   1e13c:	e700      	b.n	1df40 <gnss_interface_setopt+0x80>
   1e13e:	200e      	movs	r0, #14
   1e140:	f7f8 fd7a 	bl	16c38 <bsd_os_errno_set>
   1e144:	f04f 30ff 	mov.w	r0, #4294967295
   1e148:	e76b      	b.n	1e022 <gnss_interface_setopt+0x162>
   1e14a:	2000      	movs	r0, #0
   1e14c:	e769      	b.n	1e022 <gnss_interface_setopt+0x162>
   1e14e:	2016      	movs	r0, #22
   1e150:	f7f8 fd72 	bl	16c38 <bsd_os_errno_set>
   1e154:	f04f 30ff 	mov.w	r0, #4294967295
   1e158:	e6c5      	b.n	1dee6 <gnss_interface_setopt+0x26>
   1e15a:	b128      	cbz	r0, 1e168 <gnss_interface_setopt+0x2a8>
   1e15c:	6803      	ldr	r3, [r0, #0]
   1e15e:	b11b      	cbz	r3, 1e168 <gnss_interface_setopt+0x2a8>
   1e160:	4618      	mov	r0, r3
   1e162:	f002 fa29 	bl	205b8 <rpc_gnss_client_data_free>
   1e166:	9800      	ldr	r0, [sp, #0]
   1e168:	f002 fa1e 	bl	205a8 <rpc_gnss_client_message_free>
   1e16c:	2023      	movs	r0, #35	; 0x23
   1e16e:	f7f8 fd63 	bl	16c38 <bsd_os_errno_set>
   1e172:	682b      	ldr	r3, [r5, #0]
   1e174:	200e      	movs	r0, #14
   1e176:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1e17a:	602b      	str	r3, [r5, #0]
   1e17c:	f7f8 fd5c 	bl	16c38 <bsd_os_errno_set>
   1e180:	f04f 30ff 	mov.w	r0, #4294967295
   1e184:	e6af      	b.n	1dee6 <gnss_interface_setopt+0x26>
   1e186:	202a      	movs	r0, #42	; 0x2a
   1e188:	f7f8 fd56 	bl	16c38 <bsd_os_errno_set>
   1e18c:	f04f 30ff 	mov.w	r0, #4294967295
   1e190:	e6a9      	b.n	1dee6 <gnss_interface_setopt+0x26>
   1e192:	2009      	movs	r0, #9
   1e194:	f7f8 fd50 	bl	16c38 <bsd_os_errno_set>
   1e198:	f04f 30ff 	mov.w	r0, #4294967295
   1e19c:	e6a3      	b.n	1dee6 <gnss_interface_setopt+0x26>
   1e19e:	2073      	movs	r0, #115	; 0x73
   1e1a0:	f7f8 fd4a 	bl	16c38 <bsd_os_errno_set>
   1e1a4:	f04f 30ff 	mov.w	r0, #4294967295
   1e1a8:	e69d      	b.n	1dee6 <gnss_interface_setopt+0x26>
   1e1aa:	bf00      	nop
   1e1ac:	20021ac8 	.word	0x20021ac8
   1e1b0:	49765443 	.word	0x49765443
   1e1b4:	200204c4 	.word	0x200204c4
   1e1b8:	20021ad0 	.word	0x20021ad0
   1e1bc:	200242be 	.word	0x200242be
   1e1c0:	20021acc 	.word	0x20021acc

0001e1c4 <gnss_interface_getopt>:
   1e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1c8:	4c81      	ldr	r4, [pc, #516]	; (1e3d0 <gnss_interface_getopt+0x20c>)
   1e1ca:	b087      	sub	sp, #28
   1e1cc:	6825      	ldr	r5, [r4, #0]
   1e1ce:	4698      	mov	r8, r3
   1e1d0:	b2ad      	uxth	r5, r5
   1e1d2:	2d02      	cmp	r5, #2
   1e1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e1d6:	f040 80dd 	bne.w	1e394 <gnss_interface_getopt+0x1d0>
   1e1da:	6825      	ldr	r5, [r4, #0]
   1e1dc:	03ee      	lsls	r6, r5, #15
   1e1de:	f100 80eb 	bmi.w	1e3b8 <gnss_interface_getopt+0x1f4>
   1e1e2:	6825      	ldr	r5, [r4, #0]
   1e1e4:	01ed      	lsls	r5, r5, #7
   1e1e6:	f100 80ed 	bmi.w	1e3c4 <gnss_interface_getopt+0x200>
   1e1ea:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1e1ee:	f040 80d7 	bne.w	1e3a0 <gnss_interface_getopt+0x1dc>
   1e1f2:	4978      	ldr	r1, [pc, #480]	; (1e3d4 <gnss_interface_getopt+0x210>)
   1e1f4:	4288      	cmp	r0, r1
   1e1f6:	f040 80d9 	bne.w	1e3ac <gnss_interface_getopt+0x1e8>
   1e1fa:	f1b8 0f00 	cmp.w	r8, #0
   1e1fe:	d00b      	beq.n	1e218 <gnss_interface_getopt+0x54>
   1e200:	b153      	cbz	r3, 1e218 <gnss_interface_getopt+0x54>
   1e202:	1e57      	subs	r7, r2, #1
   1e204:	2f05      	cmp	r7, #5
   1e206:	d807      	bhi.n	1e218 <gnss_interface_getopt+0x54>
   1e208:	e8df f007 	tbb	[pc, r7]
   1e20c:	0f030f0f 	.word	0x0f030f0f
   1e210:	0303      	.short	0x0303
   1e212:	681b      	ldr	r3, [r3, #0]
   1e214:	2b01      	cmp	r3, #1
   1e216:	d00b      	beq.n	1e230 <gnss_interface_getopt+0x6c>
   1e218:	2016      	movs	r0, #22
   1e21a:	f7f8 fd0d 	bl	16c38 <bsd_os_errno_set>
   1e21e:	f04f 35ff 	mov.w	r5, #4294967295
   1e222:	4628      	mov	r0, r5
   1e224:	b007      	add	sp, #28
   1e226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e22a:	681b      	ldr	r3, [r3, #0]
   1e22c:	2b02      	cmp	r3, #2
   1e22e:	d1f3      	bne.n	1e218 <gnss_interface_getopt+0x54>
   1e230:	6823      	ldr	r3, [r4, #0]
   1e232:	2212      	movs	r2, #18
   1e234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e238:	2100      	movs	r1, #0
   1e23a:	a801      	add	r0, sp, #4
   1e23c:	6023      	str	r3, [r4, #0]
   1e23e:	f007 fec1 	bl	25fc4 <memset>
   1e242:	2112      	movs	r1, #18
   1e244:	4668      	mov	r0, sp
   1e246:	f002 f985 	bl	20554 <rpc_gnss_client_request_alloc>
   1e24a:	4605      	mov	r5, r0
   1e24c:	9800      	ldr	r0, [sp, #0]
   1e24e:	2d00      	cmp	r5, #0
   1e250:	f040 808a 	bne.w	1e368 <gnss_interface_getopt+0x1a4>
   1e254:	2800      	cmp	r0, #0
   1e256:	f000 808e 	beq.w	1e376 <gnss_interface_getopt+0x1b2>
   1e25a:	f241 1602 	movw	r6, #4354	; 0x1102
   1e25e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1e262:	2212      	movs	r2, #18
   1e264:	f04f 0976 	mov.w	r9, #118	; 0x76
   1e268:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1e26c:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1e270:	f8df c168 	ldr.w	ip, [pc, #360]	; 1e3dc <gnss_interface_getopt+0x218>
   1e274:	f880 e00f 	strb.w	lr, [r0, #15]
   1e278:	f8bc 3000 	ldrh.w	r3, [ip]
   1e27c:	f880 900e 	strb.w	r9, [r0, #14]
   1e280:	3301      	adds	r3, #1
   1e282:	b29b      	uxth	r3, r3
   1e284:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1e288:	f8cd e004 	str.w	lr, [sp, #4]
   1e28c:	7145      	strb	r5, [r0, #5]
   1e28e:	7185      	strb	r5, [r0, #6]
   1e290:	71c5      	strb	r5, [r0, #7]
   1e292:	7205      	strb	r5, [r0, #8]
   1e294:	7245      	strb	r5, [r0, #9]
   1e296:	7285      	strb	r5, [r0, #10]
   1e298:	72c5      	strb	r5, [r0, #11]
   1e29a:	a901      	add	r1, sp, #4
   1e29c:	7102      	strb	r2, [r0, #4]
   1e29e:	f880 b00c 	strb.w	fp, [r0, #12]
   1e2a2:	f880 a00d 	strb.w	sl, [r0, #13]
   1e2a6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1e3e0 <gnss_interface_getopt+0x21c>
   1e2aa:	6800      	ldr	r0, [r0, #0]
   1e2ac:	f8ac 3000 	strh.w	r3, [ip]
   1e2b0:	f7ee fc4c 	bl	cb4c <memcpy>
   1e2b4:	4631      	mov	r1, r6
   1e2b6:	9800      	ldr	r0, [sp, #0]
   1e2b8:	f8c9 5000 	str.w	r5, [r9]
   1e2bc:	f002 f95e 	bl	2057c <rpc_gnss_client_request_send>
   1e2c0:	2800      	cmp	r0, #0
   1e2c2:	d15d      	bne.n	1e380 <gnss_interface_getopt+0x1bc>
   1e2c4:	4e44      	ldr	r6, [pc, #272]	; (1e3d8 <gnss_interface_getopt+0x214>)
   1e2c6:	4d43      	ldr	r5, [pc, #268]	; (1e3d4 <gnss_interface_getopt+0x210>)
   1e2c8:	4631      	mov	r1, r6
   1e2ca:	4628      	mov	r0, r5
   1e2cc:	f7f8 fbfc 	bl	16ac8 <bsd_os_timedwait>
   1e2d0:	6823      	ldr	r3, [r4, #0]
   1e2d2:	01db      	lsls	r3, r3, #7
   1e2d4:	d4f8      	bmi.n	1e2c8 <gnss_interface_getopt+0x104>
   1e2d6:	f8d9 0000 	ldr.w	r0, [r9]
   1e2da:	b1d8      	cbz	r0, 1e314 <gnss_interface_getopt+0x150>
   1e2dc:	6825      	ldr	r5, [r4, #0]
   1e2de:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1e2e2:	d00f      	beq.n	1e304 <gnss_interface_getopt+0x140>
   1e2e4:	2f05      	cmp	r7, #5
   1e2e6:	d837      	bhi.n	1e358 <gnss_interface_getopt+0x194>
   1e2e8:	e8df f007 	tbb	[pc, r7]
   1e2ec:	2b26201a 	.word	0x2b26201a
   1e2f0:	0331      	.short	0x0331
   1e2f2:	2500      	movs	r5, #0
   1e2f4:	7b43      	ldrb	r3, [r0, #13]
   1e2f6:	f888 3000 	strb.w	r3, [r8]
   1e2fa:	f002 f95d 	bl	205b8 <rpc_gnss_client_data_free>
   1e2fe:	2300      	movs	r3, #0
   1e300:	f8c9 3000 	str.w	r3, [r9]
   1e304:	6823      	ldr	r3, [r4, #0]
   1e306:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1e30a:	6023      	str	r3, [r4, #0]
   1e30c:	4628      	mov	r0, r5
   1e30e:	b007      	add	sp, #28
   1e310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e314:	6823      	ldr	r3, [r4, #0]
   1e316:	4605      	mov	r5, r0
   1e318:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1e31c:	6023      	str	r3, [r4, #0]
   1e31e:	e7f5      	b.n	1e30c <gnss_interface_getopt+0x148>
   1e320:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1e324:	2500      	movs	r5, #0
   1e326:	f8a8 3000 	strh.w	r3, [r8]
   1e32a:	e7e6      	b.n	1e2fa <gnss_interface_getopt+0x136>
   1e32c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1e330:	2500      	movs	r5, #0
   1e332:	f8a8 3000 	strh.w	r3, [r8]
   1e336:	e7e0      	b.n	1e2fa <gnss_interface_getopt+0x136>
   1e338:	7b83      	ldrb	r3, [r0, #14]
   1e33a:	2500      	movs	r5, #0
   1e33c:	f888 3000 	strb.w	r3, [r8]
   1e340:	e7db      	b.n	1e2fa <gnss_interface_getopt+0x136>
   1e342:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1e346:	2500      	movs	r5, #0
   1e348:	f8a8 3000 	strh.w	r3, [r8]
   1e34c:	e7d5      	b.n	1e2fa <gnss_interface_getopt+0x136>
   1e34e:	7b03      	ldrb	r3, [r0, #12]
   1e350:	2500      	movs	r5, #0
   1e352:	f888 3000 	strb.w	r3, [r8]
   1e356:	e7d0      	b.n	1e2fa <gnss_interface_getopt+0x136>
   1e358:	2016      	movs	r0, #22
   1e35a:	f7f8 fc6d 	bl	16c38 <bsd_os_errno_set>
   1e35e:	f04f 35ff 	mov.w	r5, #4294967295
   1e362:	f8d9 0000 	ldr.w	r0, [r9]
   1e366:	e7c8      	b.n	1e2fa <gnss_interface_getopt+0x136>
   1e368:	b128      	cbz	r0, 1e376 <gnss_interface_getopt+0x1b2>
   1e36a:	6803      	ldr	r3, [r0, #0]
   1e36c:	b11b      	cbz	r3, 1e376 <gnss_interface_getopt+0x1b2>
   1e36e:	4618      	mov	r0, r3
   1e370:	f002 f922 	bl	205b8 <rpc_gnss_client_data_free>
   1e374:	9800      	ldr	r0, [sp, #0]
   1e376:	f002 f917 	bl	205a8 <rpc_gnss_client_message_free>
   1e37a:	2023      	movs	r0, #35	; 0x23
   1e37c:	f7f8 fc5c 	bl	16c38 <bsd_os_errno_set>
   1e380:	6823      	ldr	r3, [r4, #0]
   1e382:	200e      	movs	r0, #14
   1e384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e388:	6023      	str	r3, [r4, #0]
   1e38a:	f04f 35ff 	mov.w	r5, #4294967295
   1e38e:	f7f8 fc53 	bl	16c38 <bsd_os_errno_set>
   1e392:	e746      	b.n	1e222 <gnss_interface_getopt+0x5e>
   1e394:	200e      	movs	r0, #14
   1e396:	f7f8 fc4f 	bl	16c38 <bsd_os_errno_set>
   1e39a:	f04f 35ff 	mov.w	r5, #4294967295
   1e39e:	e740      	b.n	1e222 <gnss_interface_getopt+0x5e>
   1e3a0:	202a      	movs	r0, #42	; 0x2a
   1e3a2:	f7f8 fc49 	bl	16c38 <bsd_os_errno_set>
   1e3a6:	f04f 35ff 	mov.w	r5, #4294967295
   1e3aa:	e73a      	b.n	1e222 <gnss_interface_getopt+0x5e>
   1e3ac:	2009      	movs	r0, #9
   1e3ae:	f7f8 fc43 	bl	16c38 <bsd_os_errno_set>
   1e3b2:	f04f 35ff 	mov.w	r5, #4294967295
   1e3b6:	e734      	b.n	1e222 <gnss_interface_getopt+0x5e>
   1e3b8:	2005      	movs	r0, #5
   1e3ba:	f7f8 fc3d 	bl	16c38 <bsd_os_errno_set>
   1e3be:	f04f 35ff 	mov.w	r5, #4294967295
   1e3c2:	e72e      	b.n	1e222 <gnss_interface_getopt+0x5e>
   1e3c4:	2073      	movs	r0, #115	; 0x73
   1e3c6:	f7f8 fc37 	bl	16c38 <bsd_os_errno_set>
   1e3ca:	f04f 35ff 	mov.w	r5, #4294967295
   1e3ce:	e728      	b.n	1e222 <gnss_interface_getopt+0x5e>
   1e3d0:	20021ac8 	.word	0x20021ac8
   1e3d4:	49765443 	.word	0x49765443
   1e3d8:	200204c4 	.word	0x200204c4
   1e3dc:	200242be 	.word	0x200242be
   1e3e0:	20021acc 	.word	0x20021acc

0001e3e4 <gnss_interface_init>:
   1e3e4:	2100      	movs	r1, #0
   1e3e6:	b538      	push	{r3, r4, r5, lr}
   1e3e8:	4c0a      	ldr	r4, [pc, #40]	; (1e414 <gnss_interface_init+0x30>)
   1e3ea:	4d0b      	ldr	r5, [pc, #44]	; (1e418 <gnss_interface_init+0x34>)
   1e3ec:	6822      	ldr	r2, [r4, #0]
   1e3ee:	480b      	ldr	r0, [pc, #44]	; (1e41c <gnss_interface_init+0x38>)
   1e3f0:	4b0b      	ldr	r3, [pc, #44]	; (1e420 <gnss_interface_init+0x3c>)
   1e3f2:	402a      	ands	r2, r5
   1e3f4:	6022      	str	r2, [r4, #0]
   1e3f6:	8001      	strh	r1, [r0, #0]
   1e3f8:	6019      	str	r1, [r3, #0]
   1e3fa:	f002 f8a5 	bl	20548 <rpc_gnss_client_init>
   1e3fe:	b938      	cbnz	r0, 1e410 <gnss_interface_init+0x2c>
   1e400:	2101      	movs	r1, #1
   1e402:	6823      	ldr	r3, [r4, #0]
   1e404:	4a07      	ldr	r2, [pc, #28]	; (1e424 <gnss_interface_init+0x40>)
   1e406:	402b      	ands	r3, r5
   1e408:	430b      	orrs	r3, r1
   1e40a:	7011      	strb	r1, [r2, #0]
   1e40c:	6023      	str	r3, [r4, #0]
   1e40e:	bd38      	pop	{r3, r4, r5, pc}
   1e410:	2003      	movs	r0, #3
   1e412:	bd38      	pop	{r3, r4, r5, pc}
   1e414:	20021ac8 	.word	0x20021ac8
   1e418:	ffff0000 	.word	0xffff0000
   1e41c:	200242be 	.word	0x200242be
   1e420:	20021acc 	.word	0x20021acc
   1e424:	20026290 	.word	0x20026290

0001e428 <gnss_interface_open>:
   1e428:	b510      	push	{r4, lr}
   1e42a:	4b1c      	ldr	r3, [pc, #112]	; (1e49c <gnss_interface_open+0x74>)
   1e42c:	781b      	ldrb	r3, [r3, #0]
   1e42e:	b34b      	cbz	r3, 1e484 <gnss_interface_open+0x5c>
   1e430:	2902      	cmp	r1, #2
   1e432:	d121      	bne.n	1e478 <gnss_interface_open+0x50>
   1e434:	4c1a      	ldr	r4, [pc, #104]	; (1e4a0 <gnss_interface_open+0x78>)
   1e436:	6823      	ldr	r3, [r4, #0]
   1e438:	b29b      	uxth	r3, r3
   1e43a:	2b01      	cmp	r3, #1
   1e43c:	d116      	bne.n	1e46c <gnss_interface_open+0x44>
   1e43e:	6823      	ldr	r3, [r4, #0]
   1e440:	4608      	mov	r0, r1
   1e442:	0c1b      	lsrs	r3, r3, #16
   1e444:	041b      	lsls	r3, r3, #16
   1e446:	f043 0302 	orr.w	r3, r3, #2
   1e44a:	2200      	movs	r2, #0
   1e44c:	4915      	ldr	r1, [pc, #84]	; (1e4a4 <gnss_interface_open+0x7c>)
   1e44e:	6023      	str	r3, [r4, #0]
   1e450:	f002 f99c 	bl	2078c <packet_handler_create>
   1e454:	4a14      	ldr	r2, [pc, #80]	; (1e4a8 <gnss_interface_open+0x80>)
   1e456:	6010      	str	r0, [r2, #0]
   1e458:	b1d0      	cbz	r0, 1e490 <gnss_interface_open+0x68>
   1e45a:	6823      	ldr	r3, [r4, #0]
   1e45c:	6802      	ldr	r2, [r0, #0]
   1e45e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e462:	6812      	ldr	r2, [r2, #0]
   1e464:	6023      	str	r3, [r4, #0]
   1e466:	4790      	blx	r2
   1e468:	4810      	ldr	r0, [pc, #64]	; (1e4ac <gnss_interface_open+0x84>)
   1e46a:	bd10      	pop	{r4, pc}
   1e46c:	2005      	movs	r0, #5
   1e46e:	f7f8 fbe3 	bl	16c38 <bsd_os_errno_set>
   1e472:	f04f 30ff 	mov.w	r0, #4294967295
   1e476:	bd10      	pop	{r4, pc}
   1e478:	2029      	movs	r0, #41	; 0x29
   1e47a:	f7f8 fbdd 	bl	16c38 <bsd_os_errno_set>
   1e47e:	f04f 30ff 	mov.w	r0, #4294967295
   1e482:	bd10      	pop	{r4, pc}
   1e484:	2070      	movs	r0, #112	; 0x70
   1e486:	f7f8 fbd7 	bl	16c38 <bsd_os_errno_set>
   1e48a:	f04f 30ff 	mov.w	r0, #4294967295
   1e48e:	bd10      	pop	{r4, pc}
   1e490:	200e      	movs	r0, #14
   1e492:	f7f8 fbd1 	bl	16c38 <bsd_os_errno_set>
   1e496:	f04f 30ff 	mov.w	r0, #4294967295
   1e49a:	bd10      	pop	{r4, pc}
   1e49c:	20026290 	.word	0x20026290
   1e4a0:	20021ac8 	.word	0x20021ac8
   1e4a4:	0001d705 	.word	0x0001d705
   1e4a8:	20021ad0 	.word	0x20021ad0
   1e4ac:	49765443 	.word	0x49765443

0001e4b0 <gnss_interface_close>:
   1e4b0:	b530      	push	{r4, r5, lr}
   1e4b2:	4b15      	ldr	r3, [pc, #84]	; (1e508 <gnss_interface_close+0x58>)
   1e4b4:	b085      	sub	sp, #20
   1e4b6:	4298      	cmp	r0, r3
   1e4b8:	d11f      	bne.n	1e4fa <gnss_interface_close+0x4a>
   1e4ba:	4c14      	ldr	r4, [pc, #80]	; (1e50c <gnss_interface_close+0x5c>)
   1e4bc:	6822      	ldr	r2, [r4, #0]
   1e4be:	b292      	uxth	r2, r2
   1e4c0:	2a04      	cmp	r2, #4
   1e4c2:	d00f      	beq.n	1e4e4 <gnss_interface_close+0x34>
   1e4c4:	4d12      	ldr	r5, [pc, #72]	; (1e510 <gnss_interface_close+0x60>)
   1e4c6:	6828      	ldr	r0, [r5, #0]
   1e4c8:	b118      	cbz	r0, 1e4d2 <gnss_interface_close+0x22>
   1e4ca:	f002 f97f 	bl	207cc <packet_handler_delete>
   1e4ce:	2300      	movs	r3, #0
   1e4d0:	602b      	str	r3, [r5, #0]
   1e4d2:	2000      	movs	r0, #0
   1e4d4:	6823      	ldr	r3, [r4, #0]
   1e4d6:	0c1b      	lsrs	r3, r3, #16
   1e4d8:	041b      	lsls	r3, r3, #16
   1e4da:	f043 0301 	orr.w	r3, r3, #1
   1e4de:	6023      	str	r3, [r4, #0]
   1e4e0:	b005      	add	sp, #20
   1e4e2:	bd30      	pop	{r4, r5, pc}
   1e4e4:	2100      	movs	r1, #0
   1e4e6:	ab04      	add	r3, sp, #16
   1e4e8:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e4ec:	9200      	str	r2, [sp, #0]
   1e4ee:	f44f 7101 	mov.w	r1, #516	; 0x204
   1e4f2:	2208      	movs	r2, #8
   1e4f4:	f001 fea8 	bl	20248 <nrf_setsockopt>
   1e4f8:	e7e4      	b.n	1e4c4 <gnss_interface_close+0x14>
   1e4fa:	2009      	movs	r0, #9
   1e4fc:	f7f8 fb9c 	bl	16c38 <bsd_os_errno_set>
   1e500:	f04f 30ff 	mov.w	r0, #4294967295
   1e504:	e7ec      	b.n	1e4e0 <gnss_interface_close+0x30>
   1e506:	bf00      	nop
   1e508:	49765443 	.word	0x49765443
   1e50c:	20021ac8 	.word	0x20021ac8
   1e510:	20021ad0 	.word	0x20021ad0

0001e514 <rpc_logobj_client_evt_handler>:
   1e514:	b120      	cbz	r0, 1e520 <rpc_logobj_client_evt_handler+0xc>
   1e516:	f850 1b08 	ldr.w	r1, [r0], #8
   1e51a:	0c09      	lsrs	r1, r1, #16
   1e51c:	f7fb b94e 	b.w	197bc <logobj_event_handler>
   1e520:	4770      	bx	lr
   1e522:	bf00      	nop

0001e524 <rpc_logobj_client_init>:
   1e524:	4801      	ldr	r0, [pc, #4]	; (1e52c <rpc_logobj_client_init+0x8>)
   1e526:	f7ff b82f 	b.w	1d588 <rpc_client_register>
   1e52a:	bf00      	nop
   1e52c:	0002f0b4 	.word	0x0002f0b4

0001e530 <rpc_logobj_client_request_alloc>:
   1e530:	2300      	movs	r3, #0
   1e532:	b510      	push	{r4, lr}
   1e534:	b082      	sub	sp, #8
   1e536:	9301      	str	r3, [sp, #4]
   1e538:	b961      	cbnz	r1, 1e554 <rpc_logobj_client_request_alloc+0x24>
   1e53a:	b170      	cbz	r0, 1e55a <rpc_logobj_client_request_alloc+0x2a>
   1e53c:	4604      	mov	r4, r0
   1e53e:	aa01      	add	r2, sp, #4
   1e540:	2009      	movs	r0, #9
   1e542:	f7ff f89b 	bl	1d67c <rpc_message_alloc>
   1e546:	b918      	cbnz	r0, 1e550 <rpc_logobj_client_request_alloc+0x20>
   1e548:	9b01      	ldr	r3, [sp, #4]
   1e54a:	b10b      	cbz	r3, 1e550 <rpc_logobj_client_request_alloc+0x20>
   1e54c:	3308      	adds	r3, #8
   1e54e:	6023      	str	r3, [r4, #0]
   1e550:	b002      	add	sp, #8
   1e552:	bd10      	pop	{r4, pc}
   1e554:	200f      	movs	r0, #15
   1e556:	b002      	add	sp, #8
   1e558:	bd10      	pop	{r4, pc}
   1e55a:	200e      	movs	r0, #14
   1e55c:	b002      	add	sp, #8
   1e55e:	bd10      	pop	{r4, pc}

0001e560 <rpc_logobj_client_request_send>:
   1e560:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1e564:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1e568:	d10b      	bne.n	1e582 <rpc_logobj_client_request_send+0x22>
   1e56a:	b160      	cbz	r0, 1e586 <rpc_logobj_client_request_send+0x26>
   1e56c:	4603      	mov	r3, r0
   1e56e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e572:	2009      	movs	r0, #9
   1e574:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e578:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e57c:	4619      	mov	r1, r3
   1e57e:	f7ff b86d 	b.w	1d65c <rpc_message_send>
   1e582:	200f      	movs	r0, #15
   1e584:	4770      	bx	lr
   1e586:	200e      	movs	r0, #14
   1e588:	4770      	bx	lr
   1e58a:	bf00      	nop

0001e58c <rpc_logobj_client_message_free>:
   1e58c:	b120      	cbz	r0, 1e598 <rpc_logobj_client_message_free+0xc>
   1e58e:	f1a0 0108 	sub.w	r1, r0, #8
   1e592:	2009      	movs	r0, #9
   1e594:	f7ff b89e 	b.w	1d6d4 <rpc_message_free>
   1e598:	200e      	movs	r0, #14
   1e59a:	4770      	bx	lr

0001e59c <rpc_logobj_client_data_free>:
   1e59c:	b118      	cbz	r0, 1e5a6 <rpc_logobj_client_data_free+0xa>
   1e59e:	4601      	mov	r1, r0
   1e5a0:	2009      	movs	r0, #9
   1e5a2:	f7ff b8a3 	b.w	1d6ec <rpc_message_data_free>
   1e5a6:	200e      	movs	r0, #14
   1e5a8:	4770      	bx	lr
   1e5aa:	bf00      	nop

0001e5ac <dfu_client_event_handler>:
   1e5ac:	f850 1b08 	ldr.w	r1, [r0], #8
   1e5b0:	0c09      	lsrs	r1, r1, #16
   1e5b2:	f002 bec1 	b.w	21338 <rpc_dfu_event_handler>
   1e5b6:	bf00      	nop

0001e5b8 <rpc_dfu_client_init>:
   1e5b8:	4801      	ldr	r0, [pc, #4]	; (1e5c0 <rpc_dfu_client_init+0x8>)
   1e5ba:	f7fe bfe5 	b.w	1d588 <rpc_client_register>
   1e5be:	bf00      	nop
   1e5c0:	0002f0c4 	.word	0x0002f0c4

0001e5c4 <rpc_dfu_client_request_alloc>:
   1e5c4:	2300      	movs	r3, #0
   1e5c6:	b510      	push	{r4, lr}
   1e5c8:	b082      	sub	sp, #8
   1e5ca:	9301      	str	r3, [sp, #4]
   1e5cc:	b158      	cbz	r0, 1e5e6 <rpc_dfu_client_request_alloc+0x22>
   1e5ce:	4604      	mov	r4, r0
   1e5d0:	aa01      	add	r2, sp, #4
   1e5d2:	2006      	movs	r0, #6
   1e5d4:	f7ff f852 	bl	1d67c <rpc_message_alloc>
   1e5d8:	b918      	cbnz	r0, 1e5e2 <rpc_dfu_client_request_alloc+0x1e>
   1e5da:	9b01      	ldr	r3, [sp, #4]
   1e5dc:	b10b      	cbz	r3, 1e5e2 <rpc_dfu_client_request_alloc+0x1e>
   1e5de:	3308      	adds	r3, #8
   1e5e0:	6023      	str	r3, [r4, #0]
   1e5e2:	b002      	add	sp, #8
   1e5e4:	bd10      	pop	{r4, pc}
   1e5e6:	2007      	movs	r0, #7
   1e5e8:	b002      	add	sp, #8
   1e5ea:	bd10      	pop	{r4, pc}

0001e5ec <rpc_dfu_client_request_send>:
   1e5ec:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1e5f0:	d10b      	bne.n	1e60a <rpc_dfu_client_request_send+0x1e>
   1e5f2:	b160      	cbz	r0, 1e60e <rpc_dfu_client_request_send+0x22>
   1e5f4:	4603      	mov	r3, r0
   1e5f6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e5fa:	2006      	movs	r0, #6
   1e5fc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e600:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e604:	4619      	mov	r1, r3
   1e606:	f7ff b829 	b.w	1d65c <rpc_message_send>
   1e60a:	200f      	movs	r0, #15
   1e60c:	4770      	bx	lr
   1e60e:	2007      	movs	r0, #7
   1e610:	4770      	bx	lr
   1e612:	bf00      	nop

0001e614 <rpc_dfu_client_message_free>:
   1e614:	b120      	cbz	r0, 1e620 <rpc_dfu_client_message_free+0xc>
   1e616:	f1a0 0108 	sub.w	r1, r0, #8
   1e61a:	2006      	movs	r0, #6
   1e61c:	f7ff b85a 	b.w	1d6d4 <rpc_message_free>
   1e620:	2007      	movs	r0, #7
   1e622:	4770      	bx	lr

0001e624 <rpc_dfu_client_data_free>:
   1e624:	b118      	cbz	r0, 1e62e <rpc_dfu_client_data_free+0xa>
   1e626:	4601      	mov	r1, r0
   1e628:	2006      	movs	r0, #6
   1e62a:	f7ff b85f 	b.w	1d6ec <rpc_message_data_free>
   1e62e:	2007      	movs	r0, #7
   1e630:	4770      	bx	lr
   1e632:	bf00      	nop

0001e634 <packet_free_cb>:
   1e634:	6800      	ldr	r0, [r0, #0]
   1e636:	f003 bbd9 	b.w	21dec <rpc_at_client_data_free>
   1e63a:	bf00      	nop

0001e63c <at_interface_write>:
   1e63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e640:	b083      	sub	sp, #12
   1e642:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1e644:	2c00      	cmp	r4, #0
   1e646:	d16c      	bne.n	1e722 <at_interface_write+0xe6>
   1e648:	4688      	mov	r8, r1
   1e64a:	4615      	mov	r5, r2
   1e64c:	461e      	mov	r6, r3
   1e64e:	4607      	mov	r7, r0
   1e650:	f003 fa9e 	bl	21b90 <interface_socket_from_handle_get>
   1e654:	4604      	mov	r4, r0
   1e656:	2e00      	cmp	r6, #0
   1e658:	d137      	bne.n	1e6ca <at_interface_write+0x8e>
   1e65a:	2800      	cmp	r0, #0
   1e65c:	d067      	beq.n	1e72e <at_interface_write+0xf2>
   1e65e:	6803      	ldr	r3, [r0, #0]
   1e660:	039b      	lsls	r3, r3, #14
   1e662:	d564      	bpl.n	1e72e <at_interface_write+0xf2>
   1e664:	6803      	ldr	r3, [r0, #0]
   1e666:	4629      	mov	r1, r5
   1e668:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1e66c:	6003      	str	r3, [r0, #0]
   1e66e:	6803      	ldr	r3, [r0, #0]
   1e670:	4668      	mov	r0, sp
   1e672:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1e676:	6023      	str	r3, [r4, #0]
   1e678:	f003 fb8e 	bl	21d98 <rpc_at_client_request_alloc>
   1e67c:	4606      	mov	r6, r0
   1e67e:	4638      	mov	r0, r7
   1e680:	f003 fa86 	bl	21b90 <interface_socket_from_handle_get>
   1e684:	4681      	mov	r9, r0
   1e686:	bb56      	cbnz	r6, 1e6de <at_interface_write+0xa2>
   1e688:	2304      	movs	r3, #4
   1e68a:	9800      	ldr	r0, [sp, #0]
   1e68c:	7203      	strb	r3, [r0, #8]
   1e68e:	7246      	strb	r6, [r0, #9]
   1e690:	7286      	strb	r6, [r0, #10]
   1e692:	72c6      	strb	r6, [r0, #11]
   1e694:	60c7      	str	r7, [r0, #12]
   1e696:	bb25      	cbnz	r5, 1e6e2 <at_interface_write+0xa6>
   1e698:	2101      	movs	r1, #1
   1e69a:	f003 fb91 	bl	21dc0 <rpc_at_client_request_send>
   1e69e:	bb78      	cbnz	r0, 1e700 <at_interface_write+0xc4>
   1e6a0:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   1e6a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e6a8:	2900      	cmp	r1, #0
   1e6aa:	bf08      	it	eq
   1e6ac:	f04f 31ff 	moveq.w	r1, #4294967295
   1e6b0:	ab02      	add	r3, sp, #8
   1e6b2:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e6b6:	4638      	mov	r0, r7
   1e6b8:	4611      	mov	r1, r2
   1e6ba:	f003 f9f5 	bl	21aa8 <interface_socket_wait>
   1e6be:	b320      	cbz	r0, 1e70a <at_interface_write+0xce>
   1e6c0:	6823      	ldr	r3, [r4, #0]
   1e6c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e6c6:	6023      	str	r3, [r4, #0]
   1e6c8:	e002      	b.n	1e6d0 <at_interface_write+0x94>
   1e6ca:	b390      	cbz	r0, 1e732 <at_interface_write+0xf6>
   1e6cc:	6803      	ldr	r3, [r0, #0]
   1e6ce:	202d      	movs	r0, #45	; 0x2d
   1e6d0:	f7f8 fab2 	bl	16c38 <bsd_os_errno_set>
   1e6d4:	f04f 30ff 	mov.w	r0, #4294967295
   1e6d8:	b003      	add	sp, #12
   1e6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e6de:	200c      	movs	r0, #12
   1e6e0:	e7ee      	b.n	1e6c0 <at_interface_write+0x84>
   1e6e2:	4641      	mov	r1, r8
   1e6e4:	6800      	ldr	r0, [r0, #0]
   1e6e6:	462a      	mov	r2, r5
   1e6e8:	f7ee fa30 	bl	cb4c <memcpy>
   1e6ec:	2101      	movs	r1, #1
   1e6ee:	9800      	ldr	r0, [sp, #0]
   1e6f0:	f003 fb66 	bl	21dc0 <rpc_at_client_request_send>
   1e6f4:	2800      	cmp	r0, #0
   1e6f6:	d0d3      	beq.n	1e6a0 <at_interface_write+0x64>
   1e6f8:	9b00      	ldr	r3, [sp, #0]
   1e6fa:	6818      	ldr	r0, [r3, #0]
   1e6fc:	f003 fb76 	bl	21dec <rpc_at_client_data_free>
   1e700:	9800      	ldr	r0, [sp, #0]
   1e702:	f003 fb6b 	bl	21ddc <rpc_at_client_message_free>
   1e706:	2023      	movs	r0, #35	; 0x23
   1e708:	e7da      	b.n	1e6c0 <at_interface_write+0x84>
   1e70a:	4638      	mov	r0, r7
   1e70c:	f003 fa40 	bl	21b90 <interface_socket_from_handle_get>
   1e710:	4603      	mov	r3, r0
   1e712:	b120      	cbz	r0, 1e71e <at_interface_write+0xe2>
   1e714:	6840      	ldr	r0, [r0, #4]
   1e716:	b110      	cbz	r0, 1e71e <at_interface_write+0xe2>
   1e718:	2200      	movs	r2, #0
   1e71a:	605a      	str	r2, [r3, #4]
   1e71c:	e7d0      	b.n	1e6c0 <at_interface_write+0x84>
   1e71e:	4628      	mov	r0, r5
   1e720:	e7da      	b.n	1e6d8 <at_interface_write+0x9c>
   1e722:	2038      	movs	r0, #56	; 0x38
   1e724:	f7f8 fa88 	bl	16c38 <bsd_os_errno_set>
   1e728:	f04f 30ff 	mov.w	r0, #4294967295
   1e72c:	e7d4      	b.n	1e6d8 <at_interface_write+0x9c>
   1e72e:	2016      	movs	r0, #22
   1e730:	e7ce      	b.n	1e6d0 <at_interface_write+0x94>
   1e732:	202d      	movs	r0, #45	; 0x2d
   1e734:	e7cc      	b.n	1e6d0 <at_interface_write+0x94>
   1e736:	bf00      	nop

0001e738 <at_interface_init>:
   1e738:	b508      	push	{r3, lr}
   1e73a:	f003 fb27 	bl	21d8c <rpc_at_client_init>
   1e73e:	b910      	cbnz	r0, 1e746 <at_interface_init+0xe>
   1e740:	2201      	movs	r2, #1
   1e742:	4b01      	ldr	r3, [pc, #4]	; (1e748 <at_interface_init+0x10>)
   1e744:	701a      	strb	r2, [r3, #0]
   1e746:	bd08      	pop	{r3, pc}
   1e748:	20026291 	.word	0x20026291

0001e74c <at_interface_open>:
   1e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e750:	2600      	movs	r6, #0
   1e752:	4b34      	ldr	r3, [pc, #208]	; (1e824 <at_interface_open+0xd8>)
   1e754:	b084      	sub	sp, #16
   1e756:	781b      	ldrb	r3, [r3, #0]
   1e758:	9601      	str	r6, [sp, #4]
   1e75a:	2b00      	cmp	r3, #0
   1e75c:	d05c      	beq.n	1e818 <at_interface_open+0xcc>
   1e75e:	2902      	cmp	r1, #2
   1e760:	460d      	mov	r5, r1
   1e762:	d153      	bne.n	1e80c <at_interface_open+0xc0>
   1e764:	4680      	mov	r8, r0
   1e766:	4617      	mov	r7, r2
   1e768:	a801      	add	r0, sp, #4
   1e76a:	4a2f      	ldr	r2, [pc, #188]	; (1e828 <at_interface_open+0xdc>)
   1e76c:	f003 f8ea 	bl	21944 <interface_socket_allocate>
   1e770:	9b01      	ldr	r3, [sp, #4]
   1e772:	4604      	mov	r4, r0
   1e774:	b3c3      	cbz	r3, 1e7e8 <at_interface_open+0x9c>
   1e776:	615f      	str	r7, [r3, #20]
   1e778:	4631      	mov	r1, r6
   1e77a:	e9c3 8503 	strd	r8, r5, [r3, #12]
   1e77e:	a802      	add	r0, sp, #8
   1e780:	f003 fb0a 	bl	21d98 <rpc_at_client_request_alloc>
   1e784:	4606      	mov	r6, r0
   1e786:	4620      	mov	r0, r4
   1e788:	f003 fa02 	bl	21b90 <interface_socket_from_handle_get>
   1e78c:	4607      	mov	r7, r0
   1e78e:	bb16      	cbnz	r6, 1e7d6 <at_interface_open+0x8a>
   1e790:	2304      	movs	r3, #4
   1e792:	9802      	ldr	r0, [sp, #8]
   1e794:	2105      	movs	r1, #5
   1e796:	7246      	strb	r6, [r0, #9]
   1e798:	7286      	strb	r6, [r0, #10]
   1e79a:	72c6      	strb	r6, [r0, #11]
   1e79c:	7203      	strb	r3, [r0, #8]
   1e79e:	60c4      	str	r4, [r0, #12]
   1e7a0:	f003 fb0e 	bl	21dc0 <rpc_at_client_request_send>
   1e7a4:	4606      	mov	r6, r0
   1e7a6:	bb60      	cbnz	r0, 1e802 <at_interface_open+0xb6>
   1e7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e7aa:	ab04      	add	r3, sp, #16
   1e7ac:	2a00      	cmp	r2, #0
   1e7ae:	bf08      	it	eq
   1e7b0:	f04f 32ff 	moveq.w	r2, #4294967295
   1e7b4:	4629      	mov	r1, r5
   1e7b6:	f843 2d04 	str.w	r2, [r3, #-4]!
   1e7ba:	4620      	mov	r0, r4
   1e7bc:	462a      	mov	r2, r5
   1e7be:	f003 f973 	bl	21aa8 <interface_socket_wait>
   1e7c2:	4605      	mov	r5, r0
   1e7c4:	b940      	cbnz	r0, 1e7d8 <at_interface_open+0x8c>
   1e7c6:	4620      	mov	r0, r4
   1e7c8:	f003 f9e2 	bl	21b90 <interface_socket_from_handle_get>
   1e7cc:	b180      	cbz	r0, 1e7f0 <at_interface_open+0xa4>
   1e7ce:	6845      	ldr	r5, [r0, #4]
   1e7d0:	b175      	cbz	r5, 1e7f0 <at_interface_open+0xa4>
   1e7d2:	6046      	str	r6, [r0, #4]
   1e7d4:	e000      	b.n	1e7d8 <at_interface_open+0x8c>
   1e7d6:	250c      	movs	r5, #12
   1e7d8:	4620      	mov	r0, r4
   1e7da:	f003 f917 	bl	21a0c <interface_socket_free>
   1e7de:	4628      	mov	r0, r5
   1e7e0:	f7f8 fa2a 	bl	16c38 <bsd_os_errno_set>
   1e7e4:	f04f 34ff 	mov.w	r4, #4294967295
   1e7e8:	4620      	mov	r0, r4
   1e7ea:	b004      	add	sp, #16
   1e7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7f0:	4620      	mov	r0, r4
   1e7f2:	9a01      	ldr	r2, [sp, #4]
   1e7f4:	6813      	ldr	r3, [r2, #0]
   1e7f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e7fa:	6013      	str	r3, [r2, #0]
   1e7fc:	b004      	add	sp, #16
   1e7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e802:	9802      	ldr	r0, [sp, #8]
   1e804:	f003 faea 	bl	21ddc <rpc_at_client_message_free>
   1e808:	2523      	movs	r5, #35	; 0x23
   1e80a:	e7e5      	b.n	1e7d8 <at_interface_open+0x8c>
   1e80c:	2029      	movs	r0, #41	; 0x29
   1e80e:	f7f8 fa13 	bl	16c38 <bsd_os_errno_set>
   1e812:	f04f 34ff 	mov.w	r4, #4294967295
   1e816:	e7e7      	b.n	1e7e8 <at_interface_open+0x9c>
   1e818:	2070      	movs	r0, #112	; 0x70
   1e81a:	f7f8 fa0d 	bl	16c38 <bsd_os_errno_set>
   1e81e:	f04f 34ff 	mov.w	r4, #4294967295
   1e822:	e7e1      	b.n	1e7e8 <at_interface_open+0x9c>
   1e824:	20026291 	.word	0x20026291
   1e828:	0001e635 	.word	0x0001e635

0001e82c <at_interface_close>:
   1e82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e830:	b082      	sub	sp, #8
   1e832:	4606      	mov	r6, r0
   1e834:	f003 f9ac 	bl	21b90 <interface_socket_from_handle_get>
   1e838:	2800      	cmp	r0, #0
   1e83a:	d051      	beq.n	1e8e0 <at_interface_close+0xb4>
   1e83c:	230d      	movs	r3, #13
   1e83e:	6807      	ldr	r7, [r0, #0]
   1e840:	6003      	str	r3, [r0, #0]
   1e842:	6803      	ldr	r3, [r0, #0]
   1e844:	4604      	mov	r4, r0
   1e846:	039b      	lsls	r3, r3, #14
   1e848:	d42e      	bmi.n	1e8a8 <at_interface_close+0x7c>
   1e84a:	2100      	movs	r1, #0
   1e84c:	4668      	mov	r0, sp
   1e84e:	f003 faa3 	bl	21d98 <rpc_at_client_request_alloc>
   1e852:	4605      	mov	r5, r0
   1e854:	4630      	mov	r0, r6
   1e856:	f003 f99b 	bl	21b90 <interface_socket_from_handle_get>
   1e85a:	4680      	mov	r8, r0
   1e85c:	bb75      	cbnz	r5, 1e8bc <at_interface_close+0x90>
   1e85e:	2304      	movs	r3, #4
   1e860:	9800      	ldr	r0, [sp, #0]
   1e862:	2106      	movs	r1, #6
   1e864:	7203      	strb	r3, [r0, #8]
   1e866:	7245      	strb	r5, [r0, #9]
   1e868:	7285      	strb	r5, [r0, #10]
   1e86a:	72c5      	strb	r5, [r0, #11]
   1e86c:	60c6      	str	r6, [r0, #12]
   1e86e:	f003 faa7 	bl	21dc0 <rpc_at_client_request_send>
   1e872:	b9f0      	cbnz	r0, 1e8b2 <at_interface_close+0x86>
   1e874:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   1e878:	220e      	movs	r2, #14
   1e87a:	2900      	cmp	r1, #0
   1e87c:	bf08      	it	eq
   1e87e:	f04f 31ff 	moveq.w	r1, #4294967295
   1e882:	ab02      	add	r3, sp, #8
   1e884:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e888:	4630      	mov	r0, r6
   1e88a:	4611      	mov	r1, r2
   1e88c:	f003 f90c 	bl	21aa8 <interface_socket_wait>
   1e890:	4605      	mov	r5, r0
   1e892:	b1a8      	cbz	r0, 1e8c0 <at_interface_close+0x94>
   1e894:	6027      	str	r7, [r4, #0]
   1e896:	4628      	mov	r0, r5
   1e898:	f04f 35ff 	mov.w	r5, #4294967295
   1e89c:	f7f8 f9cc 	bl	16c38 <bsd_os_errno_set>
   1e8a0:	4628      	mov	r0, r5
   1e8a2:	b002      	add	sp, #8
   1e8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8a8:	6803      	ldr	r3, [r0, #0]
   1e8aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1e8ae:	6003      	str	r3, [r0, #0]
   1e8b0:	e7cb      	b.n	1e84a <at_interface_close+0x1e>
   1e8b2:	9800      	ldr	r0, [sp, #0]
   1e8b4:	f003 fa92 	bl	21ddc <rpc_at_client_message_free>
   1e8b8:	2523      	movs	r5, #35	; 0x23
   1e8ba:	e7eb      	b.n	1e894 <at_interface_close+0x68>
   1e8bc:	250c      	movs	r5, #12
   1e8be:	e7e9      	b.n	1e894 <at_interface_close+0x68>
   1e8c0:	4630      	mov	r0, r6
   1e8c2:	f003 f965 	bl	21b90 <interface_socket_from_handle_get>
   1e8c6:	b120      	cbz	r0, 1e8d2 <at_interface_close+0xa6>
   1e8c8:	6843      	ldr	r3, [r0, #4]
   1e8ca:	b113      	cbz	r3, 1e8d2 <at_interface_close+0xa6>
   1e8cc:	6045      	str	r5, [r0, #4]
   1e8ce:	461d      	mov	r5, r3
   1e8d0:	e7e0      	b.n	1e894 <at_interface_close+0x68>
   1e8d2:	4630      	mov	r0, r6
   1e8d4:	f003 f89a 	bl	21a0c <interface_socket_free>
   1e8d8:	4628      	mov	r0, r5
   1e8da:	b002      	add	sp, #8
   1e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8e0:	2516      	movs	r5, #22
   1e8e2:	e7d8      	b.n	1e896 <at_interface_close+0x6a>

0001e8e4 <at_interface_read>:
   1e8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e8e8:	b087      	sub	sp, #28
   1e8ea:	4688      	mov	r8, r1
   1e8ec:	4615      	mov	r5, r2
   1e8ee:	461e      	mov	r6, r3
   1e8f0:	4607      	mov	r7, r0
   1e8f2:	f003 f94d 	bl	21b90 <interface_socket_from_handle_get>
   1e8f6:	2800      	cmp	r0, #0
   1e8f8:	f000 8084 	beq.w	1ea04 <at_interface_read+0x120>
   1e8fc:	2300      	movs	r3, #0
   1e8fe:	4604      	mov	r4, r0
   1e900:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1e904:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1e908:	2e00      	cmp	r6, #0
   1e90a:	d12d      	bne.n	1e968 <at_interface_read+0x84>
   1e90c:	f016 0502 	ands.w	r5, r6, #2
   1e910:	d148      	bne.n	1e9a4 <at_interface_read+0xc0>
   1e912:	46a8      	mov	r8, r5
   1e914:	6823      	ldr	r3, [r4, #0]
   1e916:	69e0      	ldr	r0, [r4, #28]
   1e918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1e91c:	6023      	str	r3, [r4, #0]
   1e91e:	6803      	ldr	r3, [r0, #0]
   1e920:	4632      	mov	r2, r6
   1e922:	689b      	ldr	r3, [r3, #8]
   1e924:	a902      	add	r1, sp, #8
   1e926:	4798      	blx	r3
   1e928:	f1b0 0900 	subs.w	r9, r0, #0
   1e92c:	da2a      	bge.n	1e984 <at_interface_read+0xa0>
   1e92e:	2d00      	cmp	r5, #0
   1e930:	d15e      	bne.n	1e9f0 <at_interface_read+0x10c>
   1e932:	6a25      	ldr	r5, [r4, #32]
   1e934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e938:	2d00      	cmp	r5, #0
   1e93a:	bf08      	it	eq
   1e93c:	f04f 35ff 	moveq.w	r5, #4294967295
   1e940:	4611      	mov	r1, r2
   1e942:	ab01      	add	r3, sp, #4
   1e944:	4638      	mov	r0, r7
   1e946:	9501      	str	r5, [sp, #4]
   1e948:	f003 f8ae 	bl	21aa8 <interface_socket_wait>
   1e94c:	4605      	mov	r5, r0
   1e94e:	2800      	cmp	r0, #0
   1e950:	d1e0      	bne.n	1e914 <at_interface_read+0x30>
   1e952:	4638      	mov	r0, r7
   1e954:	f003 f91c 	bl	21b90 <interface_socket_from_handle_get>
   1e958:	2800      	cmp	r0, #0
   1e95a:	d0db      	beq.n	1e914 <at_interface_read+0x30>
   1e95c:	6845      	ldr	r5, [r0, #4]
   1e95e:	2d00      	cmp	r5, #0
   1e960:	d0d8      	beq.n	1e914 <at_interface_read+0x30>
   1e962:	f8c0 8004 	str.w	r8, [r0, #4]
   1e966:	e7d5      	b.n	1e914 <at_interface_read+0x30>
   1e968:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   1e96c:	d1ce      	bne.n	1e90c <at_interface_read+0x28>
   1e96e:	252d      	movs	r5, #45	; 0x2d
   1e970:	f04f 39ff 	mov.w	r9, #4294967295
   1e974:	4628      	mov	r0, r5
   1e976:	f7f8 f95f 	bl	16c38 <bsd_os_errno_set>
   1e97a:	4648      	mov	r0, r9
   1e97c:	b007      	add	sp, #28
   1e97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e982:	2500      	movs	r5, #0
   1e984:	69e0      	ldr	r0, [r4, #28]
   1e986:	6803      	ldr	r3, [r0, #0]
   1e988:	68db      	ldr	r3, [r3, #12]
   1e98a:	4798      	blx	r3
   1e98c:	3001      	adds	r0, #1
   1e98e:	d003      	beq.n	1e998 <at_interface_read+0xb4>
   1e990:	6823      	ldr	r3, [r4, #0]
   1e992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1e996:	6023      	str	r3, [r4, #0]
   1e998:	2d00      	cmp	r5, #0
   1e99a:	d1eb      	bne.n	1e974 <at_interface_read+0x90>
   1e99c:	4648      	mov	r0, r9
   1e99e:	b007      	add	sp, #28
   1e9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e9a4:	6823      	ldr	r3, [r4, #0]
   1e9a6:	69e0      	ldr	r0, [r4, #28]
   1e9a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1e9ac:	6023      	str	r3, [r4, #0]
   1e9ae:	6803      	ldr	r3, [r0, #0]
   1e9b0:	4632      	mov	r2, r6
   1e9b2:	689b      	ldr	r3, [r3, #8]
   1e9b4:	a902      	add	r1, sp, #8
   1e9b6:	4798      	blx	r3
   1e9b8:	f1b0 0900 	subs.w	r9, r0, #0
   1e9bc:	dae1      	bge.n	1e982 <at_interface_read+0x9e>
   1e9be:	69e0      	ldr	r0, [r4, #28]
   1e9c0:	f1b9 3fff 	cmp.w	r9, #4294967295
   1e9c4:	6803      	ldr	r3, [r0, #0]
   1e9c6:	68db      	ldr	r3, [r3, #12]
   1e9c8:	d10a      	bne.n	1e9e0 <at_interface_read+0xfc>
   1e9ca:	2523      	movs	r5, #35	; 0x23
   1e9cc:	4798      	blx	r3
   1e9ce:	3001      	adds	r0, #1
   1e9d0:	d0ce      	beq.n	1e970 <at_interface_read+0x8c>
   1e9d2:	6823      	ldr	r3, [r4, #0]
   1e9d4:	f04f 39ff 	mov.w	r9, #4294967295
   1e9d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1e9dc:	6023      	str	r3, [r4, #0]
   1e9de:	e7db      	b.n	1e998 <at_interface_read+0xb4>
   1e9e0:	4798      	blx	r3
   1e9e2:	3001      	adds	r0, #1
   1e9e4:	d0c9      	beq.n	1e97a <at_interface_read+0x96>
   1e9e6:	6823      	ldr	r3, [r4, #0]
   1e9e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1e9ec:	6023      	str	r3, [r4, #0]
   1e9ee:	e7c4      	b.n	1e97a <at_interface_read+0x96>
   1e9f0:	69e0      	ldr	r0, [r4, #28]
   1e9f2:	f1b9 3fff 	cmp.w	r9, #4294967295
   1e9f6:	6803      	ldr	r3, [r0, #0]
   1e9f8:	68db      	ldr	r3, [r3, #12]
   1e9fa:	d0e7      	beq.n	1e9cc <at_interface_read+0xe8>
   1e9fc:	4798      	blx	r3
   1e9fe:	3001      	adds	r0, #1
   1ea00:	d1c6      	bne.n	1e990 <at_interface_read+0xac>
   1ea02:	e7b7      	b.n	1e974 <at_interface_read+0x90>
   1ea04:	2516      	movs	r5, #22
   1ea06:	e7b3      	b.n	1e970 <at_interface_read+0x8c>

0001ea08 <at_interface_getopt>:
   1ea08:	f003 b930 	b.w	21c6c <interface_socket_getopt>

0001ea0c <at_interface_setopt>:
   1ea0c:	f003 b8e8 	b.w	21be0 <interface_socket_setopt>

0001ea10 <rpc_at_event_handler>:
   1ea10:	b570      	push	{r4, r5, r6, lr}
   1ea12:	4606      	mov	r6, r0
   1ea14:	b084      	sub	sp, #16
   1ea16:	68c0      	ldr	r0, [r0, #12]
   1ea18:	460d      	mov	r5, r1
   1ea1a:	f003 f8b9 	bl	21b90 <interface_socket_from_handle_get>
   1ea1e:	4604      	mov	r4, r0
   1ea20:	b348      	cbz	r0, 1ea76 <rpc_at_event_handler+0x66>
   1ea22:	6803      	ldr	r3, [r0, #0]
   1ea24:	b29b      	uxth	r3, r3
   1ea26:	2b01      	cmp	r3, #1
   1ea28:	d01f      	beq.n	1ea6a <rpc_at_event_handler+0x5a>
   1ea2a:	6803      	ldr	r3, [r0, #0]
   1ea2c:	b29b      	uxth	r3, r3
   1ea2e:	2b0d      	cmp	r3, #13
   1ea30:	d029      	beq.n	1ea86 <rpc_at_event_handler+0x76>
   1ea32:	6803      	ldr	r3, [r0, #0]
   1ea34:	b29b      	uxth	r3, r3
   1ea36:	2b02      	cmp	r3, #2
   1ea38:	d02d      	beq.n	1ea96 <rpc_at_event_handler+0x86>
   1ea3a:	3d03      	subs	r5, #3
   1ea3c:	2d01      	cmp	r5, #1
   1ea3e:	d817      	bhi.n	1ea70 <rpc_at_event_handler+0x60>
   1ea40:	2500      	movs	r5, #0
   1ea42:	6873      	ldr	r3, [r6, #4]
   1ea44:	6832      	ldr	r2, [r6, #0]
   1ea46:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1ea4a:	e9cd 2300 	strd	r2, r3, [sp]
   1ea4e:	69e0      	ldr	r0, [r4, #28]
   1ea50:	4669      	mov	r1, sp
   1ea52:	6803      	ldr	r3, [r0, #0]
   1ea54:	685b      	ldr	r3, [r3, #4]
   1ea56:	4798      	blx	r3
   1ea58:	3001      	adds	r0, #1
   1ea5a:	d019      	beq.n	1ea90 <rpc_at_event_handler+0x80>
   1ea5c:	4628      	mov	r0, r5
   1ea5e:	6823      	ldr	r3, [r4, #0]
   1ea60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ea64:	6023      	str	r3, [r4, #0]
   1ea66:	b004      	add	sp, #16
   1ea68:	bd70      	pop	{r4, r5, r6, pc}
   1ea6a:	2d02      	cmp	r5, #2
   1ea6c:	d1e5      	bne.n	1ea3a <rpc_at_event_handler+0x2a>
   1ea6e:	6005      	str	r5, [r0, #0]
   1ea70:	2000      	movs	r0, #0
   1ea72:	b004      	add	sp, #16
   1ea74:	bd70      	pop	{r4, r5, r6, pc}
   1ea76:	6830      	ldr	r0, [r6, #0]
   1ea78:	2800      	cmp	r0, #0
   1ea7a:	d0f9      	beq.n	1ea70 <rpc_at_event_handler+0x60>
   1ea7c:	f003 f9b6 	bl	21dec <rpc_at_client_data_free>
   1ea80:	4620      	mov	r0, r4
   1ea82:	b004      	add	sp, #16
   1ea84:	bd70      	pop	{r4, r5, r6, pc}
   1ea86:	2d02      	cmp	r5, #2
   1ea88:	d1d7      	bne.n	1ea3a <rpc_at_event_handler+0x2a>
   1ea8a:	230e      	movs	r3, #14
   1ea8c:	6003      	str	r3, [r0, #0]
   1ea8e:	e7ef      	b.n	1ea70 <rpc_at_event_handler+0x60>
   1ea90:	2002      	movs	r0, #2
   1ea92:	b004      	add	sp, #16
   1ea94:	bd70      	pop	{r4, r5, r6, pc}
   1ea96:	6803      	ldr	r3, [r0, #0]
   1ea98:	029b      	lsls	r3, r3, #10
   1ea9a:	d5ce      	bpl.n	1ea3a <rpc_at_event_handler+0x2a>
   1ea9c:	2d02      	cmp	r5, #2
   1ea9e:	d1cc      	bne.n	1ea3a <rpc_at_event_handler+0x2a>
   1eaa0:	6803      	ldr	r3, [r0, #0]
   1eaa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1eaa6:	6003      	str	r3, [r0, #0]
   1eaa8:	6803      	ldr	r3, [r0, #0]
   1eaaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1eaae:	6003      	str	r3, [r0, #0]
   1eab0:	e7de      	b.n	1ea70 <rpc_at_event_handler+0x60>
   1eab2:	bf00      	nop

0001eab4 <ok_rsp_parser>:
   1eab4:	2000      	movs	r0, #0
   1eab6:	4770      	bx	lr

0001eab8 <pdn_state_get_parser>:
   1eab8:	2200      	movs	r2, #0
   1eaba:	b570      	push	{r4, r5, r6, lr}
   1eabc:	780b      	ldrb	r3, [r1, #0]
   1eabe:	b084      	sub	sp, #16
   1eac0:	460e      	mov	r6, r1
   1eac2:	e9cd 2200 	strd	r2, r2, [sp]
   1eac6:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1eaca:	b323      	cbz	r3, 1eb16 <pdn_state_get_parser+0x5e>
   1eacc:	460c      	mov	r4, r1
   1eace:	2b20      	cmp	r3, #32
   1ead0:	460d      	mov	r5, r1
   1ead2:	d01b      	beq.n	1eb0c <pdn_state_get_parser+0x54>
   1ead4:	700b      	strb	r3, [r1, #0]
   1ead6:	3201      	adds	r2, #1
   1ead8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1eadc:	18b1      	adds	r1, r6, r2
   1eade:	460d      	mov	r5, r1
   1eae0:	2b00      	cmp	r3, #0
   1eae2:	d1f4      	bne.n	1eace <pdn_state_get_parser+0x16>
   1eae4:	2200      	movs	r2, #0
   1eae6:	4b0d      	ldr	r3, [pc, #52]	; (1eb1c <pdn_state_get_parser+0x64>)
   1eae8:	702a      	strb	r2, [r5, #0]
   1eaea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1eaee:	4a0c      	ldr	r2, [pc, #48]	; (1eb20 <pdn_state_get_parser+0x68>)
   1eaf0:	681b      	ldr	r3, [r3, #0]
   1eaf2:	2110      	movs	r1, #16
   1eaf4:	4668      	mov	r0, sp
   1eaf6:	f007 fcd5 	bl	264a4 <snprintf>
   1eafa:	4669      	mov	r1, sp
   1eafc:	4630      	mov	r0, r6
   1eafe:	f008 f86b 	bl	26bd8 <strstr>
   1eb02:	3000      	adds	r0, #0
   1eb04:	bf18      	it	ne
   1eb06:	2001      	movne	r0, #1
   1eb08:	b004      	add	sp, #16
   1eb0a:	bd70      	pop	{r4, r5, r6, pc}
   1eb0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1eb10:	2b00      	cmp	r3, #0
   1eb12:	d1dc      	bne.n	1eace <pdn_state_get_parser+0x16>
   1eb14:	e7e6      	b.n	1eae4 <pdn_state_get_parser+0x2c>
   1eb16:	460d      	mov	r5, r1
   1eb18:	e7e4      	b.n	1eae4 <pdn_state_get_parser+0x2c>
   1eb1a:	bf00      	nop
   1eb1c:	20021bd8 	.word	0x20021bd8
   1eb20:	0002f190 	.word	0x0002f190

0001eb24 <pdn_id_get_parser>:
   1eb24:	b570      	push	{r4, r5, r6, lr}
   1eb26:	780b      	ldrb	r3, [r1, #0]
   1eb28:	4606      	mov	r6, r0
   1eb2a:	b313      	cbz	r3, 1eb72 <pdn_id_get_parser+0x4e>
   1eb2c:	4608      	mov	r0, r1
   1eb2e:	2400      	movs	r4, #0
   1eb30:	460a      	mov	r2, r1
   1eb32:	2b20      	cmp	r3, #32
   1eb34:	4615      	mov	r5, r2
   1eb36:	d017      	beq.n	1eb68 <pdn_id_get_parser+0x44>
   1eb38:	7013      	strb	r3, [r2, #0]
   1eb3a:	3401      	adds	r4, #1
   1eb3c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1eb40:	190a      	adds	r2, r1, r4
   1eb42:	4615      	mov	r5, r2
   1eb44:	2b00      	cmp	r3, #0
   1eb46:	d1f4      	bne.n	1eb32 <pdn_id_get_parser+0xe>
   1eb48:	2300      	movs	r3, #0
   1eb4a:	4608      	mov	r0, r1
   1eb4c:	702b      	strb	r3, [r5, #0]
   1eb4e:	213a      	movs	r1, #58	; 0x3a
   1eb50:	f007 fd82 	bl	26658 <strchr>
   1eb54:	b130      	cbz	r0, 1eb64 <pdn_id_get_parser+0x40>
   1eb56:	3001      	adds	r0, #1
   1eb58:	f006 fed2 	bl	25900 <atoi>
   1eb5c:	4b06      	ldr	r3, [pc, #24]	; (1eb78 <pdn_id_get_parser+0x54>)
   1eb5e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1eb62:	6058      	str	r0, [r3, #4]
   1eb64:	2000      	movs	r0, #0
   1eb66:	bd70      	pop	{r4, r5, r6, pc}
   1eb68:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1eb6c:	2b00      	cmp	r3, #0
   1eb6e:	d1e0      	bne.n	1eb32 <pdn_id_get_parser+0xe>
   1eb70:	e7ea      	b.n	1eb48 <pdn_id_get_parser+0x24>
   1eb72:	460d      	mov	r5, r1
   1eb74:	e7e8      	b.n	1eb48 <pdn_id_get_parser+0x24>
   1eb76:	bf00      	nop
   1eb78:	20021bd8 	.word	0x20021bd8

0001eb7c <context_create_parser>:
   1eb7c:	b570      	push	{r4, r5, r6, lr}
   1eb7e:	780b      	ldrb	r3, [r1, #0]
   1eb80:	4606      	mov	r6, r0
   1eb82:	b313      	cbz	r3, 1ebca <context_create_parser+0x4e>
   1eb84:	4608      	mov	r0, r1
   1eb86:	2400      	movs	r4, #0
   1eb88:	460a      	mov	r2, r1
   1eb8a:	2b20      	cmp	r3, #32
   1eb8c:	4615      	mov	r5, r2
   1eb8e:	d017      	beq.n	1ebc0 <context_create_parser+0x44>
   1eb90:	7013      	strb	r3, [r2, #0]
   1eb92:	3401      	adds	r4, #1
   1eb94:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1eb98:	190a      	adds	r2, r1, r4
   1eb9a:	4615      	mov	r5, r2
   1eb9c:	2b00      	cmp	r3, #0
   1eb9e:	d1f4      	bne.n	1eb8a <context_create_parser+0xe>
   1eba0:	2300      	movs	r3, #0
   1eba2:	4608      	mov	r0, r1
   1eba4:	702b      	strb	r3, [r5, #0]
   1eba6:	213a      	movs	r1, #58	; 0x3a
   1eba8:	f007 fd56 	bl	26658 <strchr>
   1ebac:	b130      	cbz	r0, 1ebbc <context_create_parser+0x40>
   1ebae:	4b08      	ldr	r3, [pc, #32]	; (1ebd0 <context_create_parser+0x54>)
   1ebb0:	3001      	adds	r0, #1
   1ebb2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1ebb6:	f006 fea3 	bl	25900 <atoi>
   1ebba:	6020      	str	r0, [r4, #0]
   1ebbc:	2000      	movs	r0, #0
   1ebbe:	bd70      	pop	{r4, r5, r6, pc}
   1ebc0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ebc4:	2b00      	cmp	r3, #0
   1ebc6:	d1e0      	bne.n	1eb8a <context_create_parser+0xe>
   1ebc8:	e7ea      	b.n	1eba0 <context_create_parser+0x24>
   1ebca:	460d      	mov	r5, r1
   1ebcc:	e7e8      	b.n	1eba0 <context_create_parser+0x24>
   1ebce:	bf00      	nop
   1ebd0:	20021bd8 	.word	0x20021bd8

0001ebd4 <pdn_interface_init>:
   1ebd4:	f04f 33ff 	mov.w	r3, #4294967295
   1ebd8:	b510      	push	{r4, lr}
   1ebda:	4c0b      	ldr	r4, [pc, #44]	; (1ec08 <pdn_interface_init+0x34>)
   1ebdc:	2228      	movs	r2, #40	; 0x28
   1ebde:	2100      	movs	r1, #0
   1ebe0:	480a      	ldr	r0, [pc, #40]	; (1ec0c <pdn_interface_init+0x38>)
   1ebe2:	6023      	str	r3, [r4, #0]
   1ebe4:	f007 f9ee 	bl	25fc4 <memset>
   1ebe8:	f240 2201 	movw	r2, #513	; 0x201
   1ebec:	2102      	movs	r1, #2
   1ebee:	2066      	movs	r0, #102	; 0x66
   1ebf0:	f7ff fdac 	bl	1e74c <at_interface_open>
   1ebf4:	2800      	cmp	r0, #0
   1ebf6:	6020      	str	r0, [r4, #0]
   1ebf8:	db04      	blt.n	1ec04 <pdn_interface_init+0x30>
   1ebfa:	2201      	movs	r2, #1
   1ebfc:	4b04      	ldr	r3, [pc, #16]	; (1ec10 <pdn_interface_init+0x3c>)
   1ebfe:	2000      	movs	r0, #0
   1ec00:	701a      	strb	r2, [r3, #0]
   1ec02:	bd10      	pop	{r4, pc}
   1ec04:	2003      	movs	r0, #3
   1ec06:	bd10      	pop	{r4, pc}
   1ec08:	20021ad4 	.word	0x20021ad4
   1ec0c:	20021bd8 	.word	0x20021bd8
   1ec10:	20026292 	.word	0x20026292

0001ec14 <pdn_interface_open>:
   1ec14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ec18:	4b68      	ldr	r3, [pc, #416]	; (1edbc <pdn_interface_open+0x1a8>)
   1ec1a:	b083      	sub	sp, #12
   1ec1c:	781b      	ldrb	r3, [r3, #0]
   1ec1e:	2b00      	cmp	r3, #0
   1ec20:	f000 80c5 	beq.w	1edae <pdn_interface_open+0x19a>
   1ec24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1ec28:	f040 80b0 	bne.w	1ed8c <pdn_interface_open+0x178>
   1ec2c:	4c64      	ldr	r4, [pc, #400]	; (1edc0 <pdn_interface_open+0x1ac>)
   1ec2e:	6825      	ldr	r5, [r4, #0]
   1ec30:	b34d      	cbz	r5, 1ec86 <pdn_interface_open+0x72>
   1ec32:	6863      	ldr	r3, [r4, #4]
   1ec34:	2b00      	cmp	r3, #0
   1ec36:	f000 809b 	beq.w	1ed70 <pdn_interface_open+0x15c>
   1ec3a:	68a3      	ldr	r3, [r4, #8]
   1ec3c:	2b00      	cmp	r3, #0
   1ec3e:	f000 8099 	beq.w	1ed74 <pdn_interface_open+0x160>
   1ec42:	68e3      	ldr	r3, [r4, #12]
   1ec44:	2b00      	cmp	r3, #0
   1ec46:	f000 8097 	beq.w	1ed78 <pdn_interface_open+0x164>
   1ec4a:	6923      	ldr	r3, [r4, #16]
   1ec4c:	2b00      	cmp	r3, #0
   1ec4e:	f000 8095 	beq.w	1ed7c <pdn_interface_open+0x168>
   1ec52:	6963      	ldr	r3, [r4, #20]
   1ec54:	2b00      	cmp	r3, #0
   1ec56:	f000 8093 	beq.w	1ed80 <pdn_interface_open+0x16c>
   1ec5a:	69a3      	ldr	r3, [r4, #24]
   1ec5c:	2b00      	cmp	r3, #0
   1ec5e:	f000 8091 	beq.w	1ed84 <pdn_interface_open+0x170>
   1ec62:	69e3      	ldr	r3, [r4, #28]
   1ec64:	2b00      	cmp	r3, #0
   1ec66:	f000 808f 	beq.w	1ed88 <pdn_interface_open+0x174>
   1ec6a:	6a23      	ldr	r3, [r4, #32]
   1ec6c:	b153      	cbz	r3, 1ec84 <pdn_interface_open+0x70>
   1ec6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ec70:	2509      	movs	r5, #9
   1ec72:	b143      	cbz	r3, 1ec86 <pdn_interface_open+0x72>
   1ec74:	200c      	movs	r0, #12
   1ec76:	f7f7 ffdf 	bl	16c38 <bsd_os_errno_set>
   1ec7a:	f04f 30ff 	mov.w	r0, #4294967295
   1ec7e:	b003      	add	sp, #12
   1ec80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ec84:	2508      	movs	r5, #8
   1ec86:	2020      	movs	r0, #32
   1ec88:	f002 fa7a 	bl	21180 <nrf_malloc>
   1ec8c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1ec90:	2800      	cmp	r0, #0
   1ec92:	d0ef      	beq.n	1ec74 <pdn_interface_open+0x60>
   1ec94:	2220      	movs	r2, #32
   1ec96:	2100      	movs	r1, #0
   1ec98:	f007 f994 	bl	25fc4 <memset>
   1ec9c:	2101      	movs	r1, #1
   1ec9e:	2003      	movs	r0, #3
   1eca0:	f04f 37ff 	mov.w	r7, #4294967295
   1eca4:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   1eca8:	4b46      	ldr	r3, [pc, #280]	; (1edc4 <pdn_interface_open+0x1b0>)
   1ecaa:	6091      	str	r1, [r2, #8]
   1ecac:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   1ecb0:	4a45      	ldr	r2, [pc, #276]	; (1edc8 <pdn_interface_open+0x1b4>)
   1ecb2:	60c8      	str	r0, [r1, #12]
   1ecb4:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1ecb8:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ecbc:	6047      	str	r7, [r0, #4]
   1ecbe:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1edd8 <pdn_interface_open+0x1c4>
   1ecc2:	4842      	ldr	r0, [pc, #264]	; (1edcc <pdn_interface_open+0x1b8>)
   1ecc4:	f007 fbee 	bl	264a4 <snprintf>
   1ecc8:	4840      	ldr	r0, [pc, #256]	; (1edcc <pdn_interface_open+0x1b8>)
   1ecca:	f8d8 9000 	ldr.w	r9, [r8]
   1ecce:	2600      	movs	r6, #0
   1ecd0:	f007 fd88 	bl	267e4 <strlen>
   1ecd4:	4633      	mov	r3, r6
   1ecd6:	4602      	mov	r2, r0
   1ecd8:	493c      	ldr	r1, [pc, #240]	; (1edcc <pdn_interface_open+0x1b8>)
   1ecda:	4648      	mov	r0, r9
   1ecdc:	9601      	str	r6, [sp, #4]
   1ecde:	9600      	str	r6, [sp, #0]
   1ece0:	f7ff fcac 	bl	1e63c <at_interface_write>
   1ece4:	4681      	mov	r9, r0
   1ece6:	4839      	ldr	r0, [pc, #228]	; (1edcc <pdn_interface_open+0x1b8>)
   1ece8:	f007 fd7c 	bl	267e4 <strlen>
   1ecec:	4548      	cmp	r0, r9
   1ecee:	d153      	bne.n	1ed98 <pdn_interface_open+0x184>
   1ecf0:	4633      	mov	r3, r6
   1ecf2:	e9cd 6600 	strd	r6, r6, [sp]
   1ecf6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ecfa:	4934      	ldr	r1, [pc, #208]	; (1edcc <pdn_interface_open+0x1b8>)
   1ecfc:	f8d8 0000 	ldr.w	r0, [r8]
   1ed00:	f7ff fdf0 	bl	1e8e4 <at_interface_read>
   1ed04:	4606      	mov	r6, r0
   1ed06:	4832      	ldr	r0, [pc, #200]	; (1edd0 <pdn_interface_open+0x1bc>)
   1ed08:	f007 fd6c 	bl	267e4 <strlen>
   1ed0c:	4286      	cmp	r6, r0
   1ed0e:	db15      	blt.n	1ed3c <pdn_interface_open+0x128>
   1ed10:	4602      	mov	r2, r0
   1ed12:	492e      	ldr	r1, [pc, #184]	; (1edcc <pdn_interface_open+0x1b8>)
   1ed14:	482e      	ldr	r0, [pc, #184]	; (1edd0 <pdn_interface_open+0x1bc>)
   1ed16:	f007 fd93 	bl	26840 <strncmp>
   1ed1a:	b978      	cbnz	r0, 1ed3c <pdn_interface_open+0x128>
   1ed1c:	492b      	ldr	r1, [pc, #172]	; (1edcc <pdn_interface_open+0x1b8>)
   1ed1e:	4628      	mov	r0, r5
   1ed20:	f7ff ff2c 	bl	1eb7c <context_create_parser>
   1ed24:	b9b0      	cbnz	r0, 1ed54 <pdn_interface_open+0x140>
   1ed26:	2202      	movs	r2, #2
   1ed28:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1ed2c:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1ed30:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1ed34:	609a      	str	r2, [r3, #8]
   1ed36:	b003      	add	sp, #12
   1ed38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed3c:	4825      	ldr	r0, [pc, #148]	; (1edd4 <pdn_interface_open+0x1c0>)
   1ed3e:	f007 fd51 	bl	267e4 <strlen>
   1ed42:	4922      	ldr	r1, [pc, #136]	; (1edcc <pdn_interface_open+0x1b8>)
   1ed44:	4602      	mov	r2, r0
   1ed46:	4823      	ldr	r0, [pc, #140]	; (1edd4 <pdn_interface_open+0x1c0>)
   1ed48:	f007 fd7a 	bl	26840 <strncmp>
   1ed4c:	b960      	cbnz	r0, 1ed68 <pdn_interface_open+0x154>
   1ed4e:	2008      	movs	r0, #8
   1ed50:	f7f7 ff72 	bl	16c38 <bsd_os_errno_set>
   1ed54:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1ed58:	f002 fa1c 	bl	21194 <nrf_free>
   1ed5c:	2300      	movs	r3, #0
   1ed5e:	f04f 30ff 	mov.w	r0, #4294967295
   1ed62:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1ed66:	e78a      	b.n	1ec7e <pdn_interface_open+0x6a>
   1ed68:	2005      	movs	r0, #5
   1ed6a:	f7f7 ff65 	bl	16c38 <bsd_os_errno_set>
   1ed6e:	e7f1      	b.n	1ed54 <pdn_interface_open+0x140>
   1ed70:	2501      	movs	r5, #1
   1ed72:	e788      	b.n	1ec86 <pdn_interface_open+0x72>
   1ed74:	2502      	movs	r5, #2
   1ed76:	e786      	b.n	1ec86 <pdn_interface_open+0x72>
   1ed78:	2503      	movs	r5, #3
   1ed7a:	e784      	b.n	1ec86 <pdn_interface_open+0x72>
   1ed7c:	2504      	movs	r5, #4
   1ed7e:	e782      	b.n	1ec86 <pdn_interface_open+0x72>
   1ed80:	2505      	movs	r5, #5
   1ed82:	e780      	b.n	1ec86 <pdn_interface_open+0x72>
   1ed84:	2506      	movs	r5, #6
   1ed86:	e77e      	b.n	1ec86 <pdn_interface_open+0x72>
   1ed88:	2507      	movs	r5, #7
   1ed8a:	e77c      	b.n	1ec86 <pdn_interface_open+0x72>
   1ed8c:	2029      	movs	r0, #41	; 0x29
   1ed8e:	f7f7 ff53 	bl	16c38 <bsd_os_errno_set>
   1ed92:	f04f 30ff 	mov.w	r0, #4294967295
   1ed96:	e772      	b.n	1ec7e <pdn_interface_open+0x6a>
   1ed98:	2005      	movs	r0, #5
   1ed9a:	f7f7 ff4d 	bl	16c38 <bsd_os_errno_set>
   1ed9e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1eda2:	f002 f9f7 	bl	21194 <nrf_free>
   1eda6:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   1edaa:	4638      	mov	r0, r7
   1edac:	e767      	b.n	1ec7e <pdn_interface_open+0x6a>
   1edae:	2070      	movs	r0, #112	; 0x70
   1edb0:	f7f7 ff42 	bl	16c38 <bsd_os_errno_set>
   1edb4:	f04f 30ff 	mov.w	r0, #4294967295
   1edb8:	e761      	b.n	1ec7e <pdn_interface_open+0x6a>
   1edba:	bf00      	nop
   1edbc:	20026292 	.word	0x20026292
   1edc0:	20021bd8 	.word	0x20021bd8
   1edc4:	0002f16c 	.word	0x0002f16c
   1edc8:	0002f178 	.word	0x0002f178
   1edcc:	20021ad8 	.word	0x20021ad8
   1edd0:	0002f17c 	.word	0x0002f17c
   1edd4:	0002f188 	.word	0x0002f188
   1edd8:	20021ad4 	.word	0x20021ad4

0001eddc <pdn_interface_connect>:
   1eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ede0:	b085      	sub	sp, #20
   1ede2:	2900      	cmp	r1, #0
   1ede4:	f000 81f3 	beq.w	1f1ce <pdn_interface_connect+0x3f2>
   1ede8:	2a64      	cmp	r2, #100	; 0x64
   1edea:	4690      	mov	r8, r2
   1edec:	f200 81ef 	bhi.w	1f1ce <pdn_interface_connect+0x3f2>
   1edf0:	0c03      	lsrs	r3, r0, #16
   1edf2:	4ab1      	ldr	r2, [pc, #708]	; (1f0b8 <pdn_interface_connect+0x2dc>)
   1edf4:	041b      	lsls	r3, r3, #16
   1edf6:	4293      	cmp	r3, r2
   1edf8:	f040 8154 	bne.w	1f0a4 <pdn_interface_connect+0x2c8>
   1edfc:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1ee00:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1ee04:	2c09      	cmp	r4, #9
   1ee06:	f300 814d 	bgt.w	1f0a4 <pdn_interface_connect+0x2c8>
   1ee0a:	4fac      	ldr	r7, [pc, #688]	; (1f0bc <pdn_interface_connect+0x2e0>)
   1ee0c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ee10:	2b00      	cmp	r3, #0
   1ee12:	f000 8147 	beq.w	1f0a4 <pdn_interface_connect+0x2c8>
   1ee16:	689a      	ldr	r2, [r3, #8]
   1ee18:	2a00      	cmp	r2, #0
   1ee1a:	f000 8143 	beq.w	1f0a4 <pdn_interface_connect+0x2c8>
   1ee1e:	689b      	ldr	r3, [r3, #8]
   1ee20:	2b02      	cmp	r3, #2
   1ee22:	f040 813f 	bne.w	1f0a4 <pdn_interface_connect+0x2c8>
   1ee26:	4da6      	ldr	r5, [pc, #664]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1ee28:	4ba6      	ldr	r3, [pc, #664]	; (1f0c4 <pdn_interface_connect+0x2e8>)
   1ee2a:	4aa7      	ldr	r2, [pc, #668]	; (1f0c8 <pdn_interface_connect+0x2ec>)
   1ee2c:	4689      	mov	r9, r1
   1ee2e:	4628      	mov	r0, r5
   1ee30:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ee34:	f007 fb36 	bl	264a4 <snprintf>
   1ee38:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ee3c:	4606      	mov	r6, r0
   1ee3e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1ee42:	681b      	ldr	r3, [r3, #0]
   1ee44:	4aa1      	ldr	r2, [pc, #644]	; (1f0cc <pdn_interface_connect+0x2f0>)
   1ee46:	1828      	adds	r0, r5, r0
   1ee48:	f007 fb2c 	bl	264a4 <snprintf>
   1ee4c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ee50:	4406      	add	r6, r0
   1ee52:	68db      	ldr	r3, [r3, #12]
   1ee54:	f003 0203 	and.w	r2, r3, #3
   1ee58:	2a03      	cmp	r2, #3
   1ee5a:	f000 811a 	beq.w	1f092 <pdn_interface_connect+0x2b6>
   1ee5e:	079b      	lsls	r3, r3, #30
   1ee60:	bf4c      	ite	mi
   1ee62:	4b9b      	ldrmi	r3, [pc, #620]	; (1f0d0 <pdn_interface_connect+0x2f4>)
   1ee64:	4b9b      	ldrpl	r3, [pc, #620]	; (1f0d4 <pdn_interface_connect+0x2f8>)
   1ee66:	19a8      	adds	r0, r5, r6
   1ee68:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1ee6c:	4a9a      	ldr	r2, [pc, #616]	; (1f0d8 <pdn_interface_connect+0x2fc>)
   1ee6e:	f007 fb19 	bl	264a4 <snprintf>
   1ee72:	1833      	adds	r3, r6, r0
   1ee74:	eb08 0203 	add.w	r2, r8, r3
   1ee78:	2afd      	cmp	r2, #253	; 0xfd
   1ee7a:	f300 81a5 	bgt.w	1f1c8 <pdn_interface_connect+0x3ec>
   1ee7e:	2122      	movs	r1, #34	; 0x22
   1ee80:	1c5e      	adds	r6, r3, #1
   1ee82:	54e9      	strb	r1, [r5, r3]
   1ee84:	4642      	mov	r2, r8
   1ee86:	19a8      	adds	r0, r5, r6
   1ee88:	4649      	mov	r1, r9
   1ee8a:	f007 fd13 	bl	268b4 <strncpy>
   1ee8e:	eb08 0306 	add.w	r3, r8, r6
   1ee92:	18ea      	adds	r2, r5, r3
   1ee94:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1ee98:	b902      	cbnz	r2, 1ee9c <pdn_interface_connect+0xc0>
   1ee9a:	3b01      	subs	r3, #1
   1ee9c:	2600      	movs	r6, #0
   1ee9e:	2122      	movs	r1, #34	; 0x22
   1eea0:	18ea      	adds	r2, r5, r3
   1eea2:	f8df a254 	ldr.w	sl, [pc, #596]	; 1f0f8 <pdn_interface_connect+0x31c>
   1eea6:	54e9      	strb	r1, [r5, r3]
   1eea8:	4885      	ldr	r0, [pc, #532]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1eeaa:	7056      	strb	r6, [r2, #1]
   1eeac:	f8da b000 	ldr.w	fp, [sl]
   1eeb0:	f007 fc98 	bl	267e4 <strlen>
   1eeb4:	4633      	mov	r3, r6
   1eeb6:	4602      	mov	r2, r0
   1eeb8:	4981      	ldr	r1, [pc, #516]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1eeba:	4658      	mov	r0, fp
   1eebc:	9601      	str	r6, [sp, #4]
   1eebe:	9600      	str	r6, [sp, #0]
   1eec0:	f7ff fbbc 	bl	1e63c <at_interface_write>
   1eec4:	4683      	mov	fp, r0
   1eec6:	487e      	ldr	r0, [pc, #504]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1eec8:	f007 fc8c 	bl	267e4 <strlen>
   1eecc:	4558      	cmp	r0, fp
   1eece:	d008      	beq.n	1eee2 <pdn_interface_connect+0x106>
   1eed0:	2005      	movs	r0, #5
   1eed2:	f7f7 feb1 	bl	16c38 <bsd_os_errno_set>
   1eed6:	f04f 3bff 	mov.w	fp, #4294967295
   1eeda:	4658      	mov	r0, fp
   1eedc:	b005      	add	sp, #20
   1eede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eee2:	4633      	mov	r3, r6
   1eee4:	e9cd 6600 	strd	r6, r6, [sp]
   1eee8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1eeec:	4974      	ldr	r1, [pc, #464]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1eeee:	f8da 0000 	ldr.w	r0, [sl]
   1eef2:	f7ff fcf7 	bl	1e8e4 <at_interface_read>
   1eef6:	4606      	mov	r6, r0
   1eef8:	4878      	ldr	r0, [pc, #480]	; (1f0dc <pdn_interface_connect+0x300>)
   1eefa:	f007 fc73 	bl	267e4 <strlen>
   1eefe:	4286      	cmp	r6, r0
   1ef00:	da0f      	bge.n	1ef22 <pdn_interface_connect+0x146>
   1ef02:	4877      	ldr	r0, [pc, #476]	; (1f0e0 <pdn_interface_connect+0x304>)
   1ef04:	f007 fc6e 	bl	267e4 <strlen>
   1ef08:	496d      	ldr	r1, [pc, #436]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1ef0a:	4602      	mov	r2, r0
   1ef0c:	4874      	ldr	r0, [pc, #464]	; (1f0e0 <pdn_interface_connect+0x304>)
   1ef0e:	f007 fc97 	bl	26840 <strncmp>
   1ef12:	2800      	cmp	r0, #0
   1ef14:	d1dc      	bne.n	1eed0 <pdn_interface_connect+0xf4>
   1ef16:	2008      	movs	r0, #8
   1ef18:	f7f7 fe8e 	bl	16c38 <bsd_os_errno_set>
   1ef1c:	f04f 3bff 	mov.w	fp, #4294967295
   1ef20:	e7db      	b.n	1eeda <pdn_interface_connect+0xfe>
   1ef22:	4602      	mov	r2, r0
   1ef24:	4966      	ldr	r1, [pc, #408]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1ef26:	486d      	ldr	r0, [pc, #436]	; (1f0dc <pdn_interface_connect+0x300>)
   1ef28:	f007 fc8a 	bl	26840 <strncmp>
   1ef2c:	2800      	cmp	r0, #0
   1ef2e:	d1e8      	bne.n	1ef02 <pdn_interface_connect+0x126>
   1ef30:	4963      	ldr	r1, [pc, #396]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1ef32:	4620      	mov	r0, r4
   1ef34:	f7ff fdbe 	bl	1eab4 <ok_rsp_parser>
   1ef38:	4683      	mov	fp, r0
   1ef3a:	2800      	cmp	r0, #0
   1ef3c:	d1cd      	bne.n	1eeda <pdn_interface_connect+0xfe>
   1ef3e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ef42:	7c1b      	ldrb	r3, [r3, #16]
   1ef44:	2b00      	cmp	r3, #0
   1ef46:	f040 80d9 	bne.w	1f0fc <pdn_interface_connect+0x320>
   1ef4a:	4b66      	ldr	r3, [pc, #408]	; (1f0e4 <pdn_interface_connect+0x308>)
   1ef4c:	4a5e      	ldr	r2, [pc, #376]	; (1f0c8 <pdn_interface_connect+0x2ec>)
   1ef4e:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ef52:	485b      	ldr	r0, [pc, #364]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1ef54:	f007 faa6 	bl	264a4 <snprintf>
   1ef58:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ef5c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1ef60:	4a61      	ldr	r2, [pc, #388]	; (1f0e8 <pdn_interface_connect+0x30c>)
   1ef62:	681b      	ldr	r3, [r3, #0]
   1ef64:	4428      	add	r0, r5
   1ef66:	f007 fa9d 	bl	264a4 <snprintf>
   1ef6a:	f8da 3000 	ldr.w	r3, [sl]
   1ef6e:	4854      	ldr	r0, [pc, #336]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1ef70:	2600      	movs	r6, #0
   1ef72:	9303      	str	r3, [sp, #12]
   1ef74:	f007 fc36 	bl	267e4 <strlen>
   1ef78:	9b03      	ldr	r3, [sp, #12]
   1ef7a:	4602      	mov	r2, r0
   1ef7c:	4950      	ldr	r1, [pc, #320]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1ef7e:	4618      	mov	r0, r3
   1ef80:	9601      	str	r6, [sp, #4]
   1ef82:	4633      	mov	r3, r6
   1ef84:	9600      	str	r6, [sp, #0]
   1ef86:	f7ff fb59 	bl	1e63c <at_interface_write>
   1ef8a:	9003      	str	r0, [sp, #12]
   1ef8c:	484c      	ldr	r0, [pc, #304]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1ef8e:	f007 fc29 	bl	267e4 <strlen>
   1ef92:	9b03      	ldr	r3, [sp, #12]
   1ef94:	4298      	cmp	r0, r3
   1ef96:	d19b      	bne.n	1eed0 <pdn_interface_connect+0xf4>
   1ef98:	4633      	mov	r3, r6
   1ef9a:	e9cd 6600 	strd	r6, r6, [sp]
   1ef9e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1efa2:	4947      	ldr	r1, [pc, #284]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1efa4:	f8da 0000 	ldr.w	r0, [sl]
   1efa8:	f7ff fc9c 	bl	1e8e4 <at_interface_read>
   1efac:	4606      	mov	r6, r0
   1efae:	484b      	ldr	r0, [pc, #300]	; (1f0dc <pdn_interface_connect+0x300>)
   1efb0:	f007 fc18 	bl	267e4 <strlen>
   1efb4:	4286      	cmp	r6, r0
   1efb6:	dba4      	blt.n	1ef02 <pdn_interface_connect+0x126>
   1efb8:	4602      	mov	r2, r0
   1efba:	4941      	ldr	r1, [pc, #260]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1efbc:	4847      	ldr	r0, [pc, #284]	; (1f0dc <pdn_interface_connect+0x300>)
   1efbe:	f007 fc3f 	bl	26840 <strncmp>
   1efc2:	4606      	mov	r6, r0
   1efc4:	2800      	cmp	r0, #0
   1efc6:	d19c      	bne.n	1ef02 <pdn_interface_connect+0x126>
   1efc8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1efcc:	f108 0320 	add.w	r3, r8, #32
   1efd0:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   1efd4:	4413      	add	r3, r2
   1efd6:	4419      	add	r1, r3
   1efd8:	f002 f8e8 	bl	211ac <nrf_realloc>
   1efdc:	2800      	cmp	r0, #0
   1efde:	f000 80fc 	beq.w	1f1da <pdn_interface_connect+0x3fe>
   1efe2:	2303      	movs	r3, #3
   1efe4:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1efe8:	6083      	str	r3, [r0, #8]
   1efea:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1efee:	4649      	mov	r1, r9
   1eff0:	f8c3 801c 	str.w	r8, [r3, #28]
   1eff4:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
   1eff8:	4642      	mov	r2, r8
   1effa:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   1effe:	4418      	add	r0, r3
   1f000:	4603      	mov	r3, r0
   1f002:	3320      	adds	r3, #32
   1f004:	eb0c 0003 	add.w	r0, ip, r3
   1f008:	f7ed fda0 	bl	cb4c <memcpy>
   1f00c:	4b37      	ldr	r3, [pc, #220]	; (1f0ec <pdn_interface_connect+0x310>)
   1f00e:	4a2e      	ldr	r2, [pc, #184]	; (1f0c8 <pdn_interface_connect+0x2ec>)
   1f010:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f014:	482a      	ldr	r0, [pc, #168]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1f016:	f007 fa45 	bl	264a4 <snprintf>
   1f01a:	4601      	mov	r1, r0
   1f01c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f020:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1f024:	681b      	ldr	r3, [r3, #0]
   1f026:	4a30      	ldr	r2, [pc, #192]	; (1f0e8 <pdn_interface_connect+0x30c>)
   1f028:	1828      	adds	r0, r5, r0
   1f02a:	f007 fa3b 	bl	264a4 <snprintf>
   1f02e:	4824      	ldr	r0, [pc, #144]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1f030:	f8da 5000 	ldr.w	r5, [sl]
   1f034:	f007 fbd6 	bl	267e4 <strlen>
   1f038:	4633      	mov	r3, r6
   1f03a:	4602      	mov	r2, r0
   1f03c:	4920      	ldr	r1, [pc, #128]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1f03e:	4628      	mov	r0, r5
   1f040:	9601      	str	r6, [sp, #4]
   1f042:	9600      	str	r6, [sp, #0]
   1f044:	f7ff fafa 	bl	1e63c <at_interface_write>
   1f048:	4605      	mov	r5, r0
   1f04a:	481d      	ldr	r0, [pc, #116]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1f04c:	f007 fbca 	bl	267e4 <strlen>
   1f050:	42a8      	cmp	r0, r5
   1f052:	f040 80d2 	bne.w	1f1fa <pdn_interface_connect+0x41e>
   1f056:	4633      	mov	r3, r6
   1f058:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f05c:	4918      	ldr	r1, [pc, #96]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1f05e:	f8da 0000 	ldr.w	r0, [sl]
   1f062:	e9cd 6600 	strd	r6, r6, [sp]
   1f066:	f7ff fc3d 	bl	1e8e4 <at_interface_read>
   1f06a:	4605      	mov	r5, r0
   1f06c:	4820      	ldr	r0, [pc, #128]	; (1f0f0 <pdn_interface_connect+0x314>)
   1f06e:	f007 fbb9 	bl	267e4 <strlen>
   1f072:	4285      	cmp	r5, r0
   1f074:	f2c0 80b4 	blt.w	1f1e0 <pdn_interface_connect+0x404>
   1f078:	4602      	mov	r2, r0
   1f07a:	4911      	ldr	r1, [pc, #68]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1f07c:	481c      	ldr	r0, [pc, #112]	; (1f0f0 <pdn_interface_connect+0x314>)
   1f07e:	f007 fbdf 	bl	26840 <strncmp>
   1f082:	2800      	cmp	r0, #0
   1f084:	f040 80ac 	bne.w	1f1e0 <pdn_interface_connect+0x404>
   1f088:	4620      	mov	r0, r4
   1f08a:	490d      	ldr	r1, [pc, #52]	; (1f0c0 <pdn_interface_connect+0x2e4>)
   1f08c:	f7ff fd4a 	bl	1eb24 <pdn_id_get_parser>
   1f090:	e723      	b.n	1eeda <pdn_interface_connect+0xfe>
   1f092:	4b18      	ldr	r3, [pc, #96]	; (1f0f4 <pdn_interface_connect+0x318>)
   1f094:	4a10      	ldr	r2, [pc, #64]	; (1f0d8 <pdn_interface_connect+0x2fc>)
   1f096:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f09a:	19a8      	adds	r0, r5, r6
   1f09c:	f007 fa02 	bl	264a4 <snprintf>
   1f0a0:	1833      	adds	r3, r6, r0
   1f0a2:	e6e7      	b.n	1ee74 <pdn_interface_connect+0x98>
   1f0a4:	f04f 3bff 	mov.w	fp, #4294967295
   1f0a8:	2009      	movs	r0, #9
   1f0aa:	f7f7 fdc5 	bl	16c38 <bsd_os_errno_set>
   1f0ae:	4658      	mov	r0, fp
   1f0b0:	b005      	add	sp, #20
   1f0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0b6:	bf00      	nop
   1f0b8:	789a0000 	.word	0x789a0000
   1f0bc:	20021bd8 	.word	0x20021bd8
   1f0c0:	20021ad8 	.word	0x20021ad8
   1f0c4:	0002f0e0 	.word	0x0002f0e0
   1f0c8:	0002f178 	.word	0x0002f178
   1f0cc:	0002f0ec 	.word	0x0002f0ec
   1f0d0:	0002f100 	.word	0x0002f100
   1f0d4:	0002f108 	.word	0x0002f108
   1f0d8:	0002f0f8 	.word	0x0002f0f8
   1f0dc:	0002f10c 	.word	0x0002f10c
   1f0e0:	0002f188 	.word	0x0002f188
   1f0e4:	0002f12c 	.word	0x0002f12c
   1f0e8:	0002f138 	.word	0x0002f138
   1f0ec:	0002f13c 	.word	0x0002f13c
   1f0f0:	0002f14c 	.word	0x0002f14c
   1f0f4:	0002f0f0 	.word	0x0002f0f0
   1f0f8:	20021ad4 	.word	0x20021ad4
   1f0fc:	4b41      	ldr	r3, [pc, #260]	; (1f204 <pdn_interface_connect+0x428>)
   1f0fe:	4a42      	ldr	r2, [pc, #264]	; (1f208 <pdn_interface_connect+0x42c>)
   1f100:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f104:	4841      	ldr	r0, [pc, #260]	; (1f20c <pdn_interface_connect+0x430>)
   1f106:	f007 f9cd 	bl	264a4 <snprintf>
   1f10a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f10e:	4a40      	ldr	r2, [pc, #256]	; (1f210 <pdn_interface_connect+0x434>)
   1f110:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f114:	4606      	mov	r6, r0
   1f116:	681b      	ldr	r3, [r3, #0]
   1f118:	1828      	adds	r0, r5, r0
   1f11a:	f007 f9c3 	bl	264a4 <snprintf>
   1f11e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f122:	4406      	add	r6, r0
   1f124:	7c1b      	ldrb	r3, [r3, #16]
   1f126:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f12a:	2b01      	cmp	r3, #1
   1f12c:	bf0c      	ite	eq
   1f12e:	4a39      	ldreq	r2, [pc, #228]	; (1f214 <pdn_interface_connect+0x438>)
   1f130:	4a39      	ldrne	r2, [pc, #228]	; (1f218 <pdn_interface_connect+0x43c>)
   1f132:	19a8      	adds	r0, r5, r6
   1f134:	f007 f9b6 	bl	264a4 <snprintf>
   1f138:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f13c:	4406      	add	r6, r0
   1f13e:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f142:	4a36      	ldr	r2, [pc, #216]	; (1f21c <pdn_interface_connect+0x440>)
   1f144:	3320      	adds	r3, #32
   1f146:	19a8      	adds	r0, r5, r6
   1f148:	f007 f9ac 	bl	264a4 <snprintf>
   1f14c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f150:	4430      	add	r0, r6
   1f152:	695a      	ldr	r2, [r3, #20]
   1f154:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f158:	3220      	adds	r2, #32
   1f15a:	4413      	add	r3, r2
   1f15c:	4428      	add	r0, r5
   1f15e:	4a30      	ldr	r2, [pc, #192]	; (1f220 <pdn_interface_connect+0x444>)
   1f160:	f007 f9a0 	bl	264a4 <snprintf>
   1f164:	f8da 3000 	ldr.w	r3, [sl]
   1f168:	4828      	ldr	r0, [pc, #160]	; (1f20c <pdn_interface_connect+0x430>)
   1f16a:	2600      	movs	r6, #0
   1f16c:	9303      	str	r3, [sp, #12]
   1f16e:	f007 fb39 	bl	267e4 <strlen>
   1f172:	9b03      	ldr	r3, [sp, #12]
   1f174:	4602      	mov	r2, r0
   1f176:	4925      	ldr	r1, [pc, #148]	; (1f20c <pdn_interface_connect+0x430>)
   1f178:	4618      	mov	r0, r3
   1f17a:	9601      	str	r6, [sp, #4]
   1f17c:	4633      	mov	r3, r6
   1f17e:	9600      	str	r6, [sp, #0]
   1f180:	f7ff fa5c 	bl	1e63c <at_interface_write>
   1f184:	9003      	str	r0, [sp, #12]
   1f186:	4821      	ldr	r0, [pc, #132]	; (1f20c <pdn_interface_connect+0x430>)
   1f188:	f007 fb2c 	bl	267e4 <strlen>
   1f18c:	9b03      	ldr	r3, [sp, #12]
   1f18e:	4298      	cmp	r0, r3
   1f190:	f47f ae9e 	bne.w	1eed0 <pdn_interface_connect+0xf4>
   1f194:	4633      	mov	r3, r6
   1f196:	e9cd 6600 	strd	r6, r6, [sp]
   1f19a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f19e:	491b      	ldr	r1, [pc, #108]	; (1f20c <pdn_interface_connect+0x430>)
   1f1a0:	f8da 0000 	ldr.w	r0, [sl]
   1f1a4:	f7ff fb9e 	bl	1e8e4 <at_interface_read>
   1f1a8:	4606      	mov	r6, r0
   1f1aa:	481e      	ldr	r0, [pc, #120]	; (1f224 <pdn_interface_connect+0x448>)
   1f1ac:	f007 fb1a 	bl	267e4 <strlen>
   1f1b0:	4286      	cmp	r6, r0
   1f1b2:	f6ff aea6 	blt.w	1ef02 <pdn_interface_connect+0x126>
   1f1b6:	4602      	mov	r2, r0
   1f1b8:	4914      	ldr	r1, [pc, #80]	; (1f20c <pdn_interface_connect+0x430>)
   1f1ba:	481a      	ldr	r0, [pc, #104]	; (1f224 <pdn_interface_connect+0x448>)
   1f1bc:	f007 fb40 	bl	26840 <strncmp>
   1f1c0:	2800      	cmp	r0, #0
   1f1c2:	f43f aec2 	beq.w	1ef4a <pdn_interface_connect+0x16e>
   1f1c6:	e69c      	b.n	1ef02 <pdn_interface_connect+0x126>
   1f1c8:	f04f 3bff 	mov.w	fp, #4294967295
   1f1cc:	e685      	b.n	1eeda <pdn_interface_connect+0xfe>
   1f1ce:	2016      	movs	r0, #22
   1f1d0:	f7f7 fd32 	bl	16c38 <bsd_os_errno_set>
   1f1d4:	f04f 3bff 	mov.w	fp, #4294967295
   1f1d8:	e67f      	b.n	1eeda <pdn_interface_connect+0xfe>
   1f1da:	f04f 0b0c 	mov.w	fp, #12
   1f1de:	e67c      	b.n	1eeda <pdn_interface_connect+0xfe>
   1f1e0:	4811      	ldr	r0, [pc, #68]	; (1f228 <pdn_interface_connect+0x44c>)
   1f1e2:	f007 faff 	bl	267e4 <strlen>
   1f1e6:	4909      	ldr	r1, [pc, #36]	; (1f20c <pdn_interface_connect+0x430>)
   1f1e8:	4602      	mov	r2, r0
   1f1ea:	480f      	ldr	r0, [pc, #60]	; (1f228 <pdn_interface_connect+0x44c>)
   1f1ec:	f007 fb28 	bl	26840 <strncmp>
   1f1f0:	b918      	cbnz	r0, 1f1fa <pdn_interface_connect+0x41e>
   1f1f2:	2008      	movs	r0, #8
   1f1f4:	f7f7 fd20 	bl	16c38 <bsd_os_errno_set>
   1f1f8:	e66f      	b.n	1eeda <pdn_interface_connect+0xfe>
   1f1fa:	2005      	movs	r0, #5
   1f1fc:	f7f7 fd1c 	bl	16c38 <bsd_os_errno_set>
   1f200:	e66b      	b.n	1eeda <pdn_interface_connect+0xfe>
   1f202:	bf00      	nop
   1f204:	0002f110 	.word	0x0002f110
   1f208:	0002f178 	.word	0x0002f178
   1f20c:	20021ad8 	.word	0x20021ad8
   1f210:	0002f0ec 	.word	0x0002f0ec
   1f214:	0002f11c 	.word	0x0002f11c
   1f218:	0002f120 	.word	0x0002f120
   1f21c:	0002f0f8 	.word	0x0002f0f8
   1f220:	0002f124 	.word	0x0002f124
   1f224:	0002f10c 	.word	0x0002f10c
   1f228:	0002f188 	.word	0x0002f188

0001f22c <pdn_interface_close>:
   1f22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f230:	4a6c      	ldr	r2, [pc, #432]	; (1f3e4 <__kernel_ram_size+0xcc>)
   1f232:	0c03      	lsrs	r3, r0, #16
   1f234:	041b      	lsls	r3, r3, #16
   1f236:	4293      	cmp	r3, r2
   1f238:	b083      	sub	sp, #12
   1f23a:	f040 80ae 	bne.w	1f39a <__kernel_ram_size+0x82>
   1f23e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f242:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f246:	2c09      	cmp	r4, #9
   1f248:	f300 80a7 	bgt.w	1f39a <__kernel_ram_size+0x82>
   1f24c:	4d66      	ldr	r5, [pc, #408]	; (1f3e8 <__kernel_ram_size+0xd0>)
   1f24e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f252:	2800      	cmp	r0, #0
   1f254:	f000 80a1 	beq.w	1f39a <__kernel_ram_size+0x82>
   1f258:	6883      	ldr	r3, [r0, #8]
   1f25a:	2b00      	cmp	r3, #0
   1f25c:	f000 809d 	beq.w	1f39a <__kernel_ram_size+0x82>
   1f260:	6883      	ldr	r3, [r0, #8]
   1f262:	2b03      	cmp	r3, #3
   1f264:	d00b      	beq.n	1f27e <pdn_interface_close+0x52>
   1f266:	6883      	ldr	r3, [r0, #8]
   1f268:	2b02      	cmp	r3, #2
   1f26a:	d056      	beq.n	1f31a <__kernel_ram_size+0x2>
   1f26c:	f001 ff92 	bl	21194 <nrf_free>
   1f270:	2300      	movs	r3, #0
   1f272:	4618      	mov	r0, r3
   1f274:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1f278:	b003      	add	sp, #12
   1f27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f27e:	4e5b      	ldr	r6, [pc, #364]	; (1f3ec <__kernel_ram_size+0xd4>)
   1f280:	4b5b      	ldr	r3, [pc, #364]	; (1f3f0 <__kernel_ram_size+0xd8>)
   1f282:	4a5c      	ldr	r2, [pc, #368]	; (1f3f4 <__kernel_ram_size+0xdc>)
   1f284:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f288:	4630      	mov	r0, r6
   1f28a:	f007 f90b 	bl	264a4 <snprintf>
   1f28e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f292:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f296:	681b      	ldr	r3, [r3, #0]
   1f298:	4a57      	ldr	r2, [pc, #348]	; (1f3f8 <__kernel_ram_size+0xe0>)
   1f29a:	4430      	add	r0, r6
   1f29c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1f408 <__kernel_ram_size+0xf0>
   1f2a0:	f007 f900 	bl	264a4 <snprintf>
   1f2a4:	4630      	mov	r0, r6
   1f2a6:	f8d8 9000 	ldr.w	r9, [r8]
   1f2aa:	2700      	movs	r7, #0
   1f2ac:	f007 fa9a 	bl	267e4 <strlen>
   1f2b0:	4631      	mov	r1, r6
   1f2b2:	4602      	mov	r2, r0
   1f2b4:	463b      	mov	r3, r7
   1f2b6:	4648      	mov	r0, r9
   1f2b8:	9701      	str	r7, [sp, #4]
   1f2ba:	9700      	str	r7, [sp, #0]
   1f2bc:	f7ff f9be 	bl	1e63c <at_interface_write>
   1f2c0:	4681      	mov	r9, r0
   1f2c2:	4630      	mov	r0, r6
   1f2c4:	f007 fa8e 	bl	267e4 <strlen>
   1f2c8:	4548      	cmp	r0, r9
   1f2ca:	f040 8083 	bne.w	1f3d4 <__kernel_ram_size+0xbc>
   1f2ce:	463b      	mov	r3, r7
   1f2d0:	e9cd 7700 	strd	r7, r7, [sp]
   1f2d4:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f2d8:	4631      	mov	r1, r6
   1f2da:	f8d8 0000 	ldr.w	r0, [r8]
   1f2de:	f7ff fb01 	bl	1e8e4 <at_interface_read>
   1f2e2:	4607      	mov	r7, r0
   1f2e4:	4845      	ldr	r0, [pc, #276]	; (1f3fc <__kernel_ram_size+0xe4>)
   1f2e6:	f007 fa7d 	bl	267e4 <strlen>
   1f2ea:	4287      	cmp	r7, r0
   1f2ec:	da5b      	bge.n	1f3a6 <__kernel_ram_size+0x8e>
   1f2ee:	4844      	ldr	r0, [pc, #272]	; (1f400 <__kernel_ram_size+0xe8>)
   1f2f0:	f007 fa78 	bl	267e4 <strlen>
   1f2f4:	493d      	ldr	r1, [pc, #244]	; (1f3ec <__kernel_ram_size+0xd4>)
   1f2f6:	4602      	mov	r2, r0
   1f2f8:	4841      	ldr	r0, [pc, #260]	; (1f400 <__kernel_ram_size+0xe8>)
   1f2fa:	f007 faa1 	bl	26840 <strncmp>
   1f2fe:	2800      	cmp	r0, #0
   1f300:	d168      	bne.n	1f3d4 <__kernel_ram_size+0xbc>
   1f302:	2008      	movs	r0, #8
   1f304:	f7f7 fc98 	bl	16c38 <bsd_os_errno_set>
   1f308:	2202      	movs	r2, #2
   1f30a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f30e:	609a      	str	r2, [r3, #8]
   1f310:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f314:	6883      	ldr	r3, [r0, #8]
   1f316:	2b02      	cmp	r3, #2
   1f318:	d1a8      	bne.n	1f26c <pdn_interface_close+0x40>
   1f31a:	4e34      	ldr	r6, [pc, #208]	; (1f3ec <__kernel_ram_size+0xd4>)
   1f31c:	4b39      	ldr	r3, [pc, #228]	; (1f404 <__kernel_ram_size+0xec>)
   1f31e:	4a35      	ldr	r2, [pc, #212]	; (1f3f4 <__kernel_ram_size+0xdc>)
   1f320:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f324:	4630      	mov	r0, r6
   1f326:	f007 f8bd 	bl	264a4 <snprintf>
   1f32a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f32e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f332:	681b      	ldr	r3, [r3, #0]
   1f334:	4a30      	ldr	r2, [pc, #192]	; (1f3f8 <__kernel_ram_size+0xe0>)
   1f336:	4430      	add	r0, r6
   1f338:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1f408 <__kernel_ram_size+0xf0>
   1f33c:	f007 f8b2 	bl	264a4 <snprintf>
   1f340:	4630      	mov	r0, r6
   1f342:	f8d8 9000 	ldr.w	r9, [r8]
   1f346:	2700      	movs	r7, #0
   1f348:	f007 fa4c 	bl	267e4 <strlen>
   1f34c:	4631      	mov	r1, r6
   1f34e:	4602      	mov	r2, r0
   1f350:	463b      	mov	r3, r7
   1f352:	4648      	mov	r0, r9
   1f354:	9701      	str	r7, [sp, #4]
   1f356:	9700      	str	r7, [sp, #0]
   1f358:	f7ff f970 	bl	1e63c <at_interface_write>
   1f35c:	4681      	mov	r9, r0
   1f35e:	4630      	mov	r0, r6
   1f360:	f007 fa40 	bl	267e4 <strlen>
   1f364:	4548      	cmp	r0, r9
   1f366:	d139      	bne.n	1f3dc <__kernel_ram_size+0xc4>
   1f368:	463b      	mov	r3, r7
   1f36a:	e9cd 7700 	strd	r7, r7, [sp]
   1f36e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f372:	4631      	mov	r1, r6
   1f374:	f8d8 0000 	ldr.w	r0, [r8]
   1f378:	f7ff fab4 	bl	1e8e4 <at_interface_read>
   1f37c:	4607      	mov	r7, r0
   1f37e:	481f      	ldr	r0, [pc, #124]	; (1f3fc <__kernel_ram_size+0xe4>)
   1f380:	f007 fa30 	bl	267e4 <strlen>
   1f384:	4287      	cmp	r7, r0
   1f386:	db16      	blt.n	1f3b6 <__kernel_ram_size+0x9e>
   1f388:	4602      	mov	r2, r0
   1f38a:	4631      	mov	r1, r6
   1f38c:	481b      	ldr	r0, [pc, #108]	; (1f3fc <__kernel_ram_size+0xe4>)
   1f38e:	f007 fa57 	bl	26840 <strncmp>
   1f392:	b980      	cbnz	r0, 1f3b6 <__kernel_ram_size+0x9e>
   1f394:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f398:	e768      	b.n	1f26c <pdn_interface_close+0x40>
   1f39a:	2009      	movs	r0, #9
   1f39c:	f7f7 fc4c 	bl	16c38 <bsd_os_errno_set>
   1f3a0:	f04f 30ff 	mov.w	r0, #4294967295
   1f3a4:	e768      	b.n	1f278 <pdn_interface_close+0x4c>
   1f3a6:	4602      	mov	r2, r0
   1f3a8:	4631      	mov	r1, r6
   1f3aa:	4814      	ldr	r0, [pc, #80]	; (1f3fc <__kernel_ram_size+0xe4>)
   1f3ac:	f007 fa48 	bl	26840 <strncmp>
   1f3b0:	2800      	cmp	r0, #0
   1f3b2:	d0a9      	beq.n	1f308 <pdn_interface_close+0xdc>
   1f3b4:	e79b      	b.n	1f2ee <pdn_interface_close+0xc2>
   1f3b6:	4812      	ldr	r0, [pc, #72]	; (1f400 <__kernel_ram_size+0xe8>)
   1f3b8:	f007 fa14 	bl	267e4 <strlen>
   1f3bc:	490b      	ldr	r1, [pc, #44]	; (1f3ec <__kernel_ram_size+0xd4>)
   1f3be:	4602      	mov	r2, r0
   1f3c0:	480f      	ldr	r0, [pc, #60]	; (1f400 <__kernel_ram_size+0xe8>)
   1f3c2:	f007 fa3d 	bl	26840 <strncmp>
   1f3c6:	b948      	cbnz	r0, 1f3dc <__kernel_ram_size+0xc4>
   1f3c8:	2008      	movs	r0, #8
   1f3ca:	f7f7 fc35 	bl	16c38 <bsd_os_errno_set>
   1f3ce:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f3d2:	e74b      	b.n	1f26c <pdn_interface_close+0x40>
   1f3d4:	2005      	movs	r0, #5
   1f3d6:	f7f7 fc2f 	bl	16c38 <bsd_os_errno_set>
   1f3da:	e795      	b.n	1f308 <pdn_interface_close+0xdc>
   1f3dc:	2005      	movs	r0, #5
   1f3de:	f7f7 fc2b 	bl	16c38 <bsd_os_errno_set>
   1f3e2:	e7d7      	b.n	1f394 <__kernel_ram_size+0x7c>
   1f3e4:	789a0000 	.word	0x789a0000
   1f3e8:	20021bd8 	.word	0x20021bd8
   1f3ec:	20021ad8 	.word	0x20021ad8
   1f3f0:	0002f0d4 	.word	0x0002f0d4
   1f3f4:	0002f178 	.word	0x0002f178
   1f3f8:	0002f138 	.word	0x0002f138
   1f3fc:	0002f10c 	.word	0x0002f10c
   1f400:	0002f188 	.word	0x0002f188
   1f404:	0002f0e0 	.word	0x0002f0e0
   1f408:	20021ad4 	.word	0x20021ad4

0001f40c <pdn_interface_setopt>:
   1f40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f40e:	f240 2402 	movw	r4, #514	; 0x202
   1f412:	42a1      	cmp	r1, r4
   1f414:	9e06      	ldr	r6, [sp, #24]
   1f416:	f040 8090 	bne.w	1f53a <pdn_interface_setopt+0x12e>
   1f41a:	461d      	mov	r5, r3
   1f41c:	2b00      	cmp	r3, #0
   1f41e:	f000 808c 	beq.w	1f53a <pdn_interface_setopt+0x12e>
   1f422:	2e00      	cmp	r6, #0
   1f424:	f000 8089 	beq.w	1f53a <pdn_interface_setopt+0x12e>
   1f428:	0c03      	lsrs	r3, r0, #16
   1f42a:	494d      	ldr	r1, [pc, #308]	; (1f560 <pdn_interface_setopt+0x154>)
   1f42c:	041b      	lsls	r3, r3, #16
   1f42e:	428b      	cmp	r3, r1
   1f430:	d005      	beq.n	1f43e <pdn_interface_setopt+0x32>
   1f432:	2009      	movs	r0, #9
   1f434:	f7f7 fc00 	bl	16c38 <bsd_os_errno_set>
   1f438:	f04f 30ff 	mov.w	r0, #4294967295
   1f43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f43e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f442:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f446:	2c09      	cmp	r4, #9
   1f448:	dcf3      	bgt.n	1f432 <pdn_interface_setopt+0x26>
   1f44a:	4f46      	ldr	r7, [pc, #280]	; (1f564 <pdn_interface_setopt+0x158>)
   1f44c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f450:	2b00      	cmp	r3, #0
   1f452:	d0ee      	beq.n	1f432 <pdn_interface_setopt+0x26>
   1f454:	6899      	ldr	r1, [r3, #8]
   1f456:	2900      	cmp	r1, #0
   1f458:	d0eb      	beq.n	1f432 <pdn_interface_setopt+0x26>
   1f45a:	2a01      	cmp	r2, #1
   1f45c:	d049      	beq.n	1f4f2 <pdn_interface_setopt+0xe6>
   1f45e:	2a04      	cmp	r2, #4
   1f460:	d145      	bne.n	1f4ee <pdn_interface_setopt+0xe2>
   1f462:	689a      	ldr	r2, [r3, #8]
   1f464:	2a00      	cmp	r2, #0
   1f466:	d04c      	beq.n	1f502 <pdn_interface_setopt+0xf6>
   1f468:	689a      	ldr	r2, [r3, #8]
   1f46a:	2a03      	cmp	r2, #3
   1f46c:	d049      	beq.n	1f502 <pdn_interface_setopt+0xf6>
   1f46e:	689b      	ldr	r3, [r3, #8]
   1f470:	2b04      	cmp	r3, #4
   1f472:	d046      	beq.n	1f502 <pdn_interface_setopt+0xf6>
   1f474:	4628      	mov	r0, r5
   1f476:	f007 f9b5 	bl	267e4 <strlen>
   1f47a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f47e:	3001      	adds	r0, #1
   1f480:	f105 0664 	add.w	r6, r5, #100	; 0x64
   1f484:	6158      	str	r0, [r3, #20]
   1f486:	4630      	mov	r0, r6
   1f488:	f007 f9ac 	bl	267e4 <strlen>
   1f48c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f490:	3001      	adds	r0, #1
   1f492:	6198      	str	r0, [r3, #24]
   1f494:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   1f498:	3b01      	subs	r3, #1
   1f49a:	2b01      	cmp	r3, #1
   1f49c:	d84b      	bhi.n	1f536 <pdn_interface_setopt+0x12a>
   1f49e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1f4a2:	6943      	ldr	r3, [r0, #20]
   1f4a4:	2b63      	cmp	r3, #99	; 0x63
   1f4a6:	dc46      	bgt.n	1f536 <pdn_interface_setopt+0x12a>
   1f4a8:	6982      	ldr	r2, [r0, #24]
   1f4aa:	2a63      	cmp	r2, #99	; 0x63
   1f4ac:	dc43      	bgt.n	1f536 <pdn_interface_setopt+0x12a>
   1f4ae:	4413      	add	r3, r2
   1f4b0:	f103 0120 	add.w	r1, r3, #32
   1f4b4:	f001 fe7a 	bl	211ac <nrf_realloc>
   1f4b8:	4603      	mov	r3, r0
   1f4ba:	2800      	cmp	r0, #0
   1f4bc:	d048      	beq.n	1f550 <pdn_interface_setopt+0x144>
   1f4be:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1f4c2:	6941      	ldr	r1, [r0, #20]
   1f4c4:	462b      	mov	r3, r5
   1f4c6:	4a28      	ldr	r2, [pc, #160]	; (1f568 <pdn_interface_setopt+0x15c>)
   1f4c8:	3020      	adds	r0, #32
   1f4ca:	f006 ffeb 	bl	264a4 <snprintf>
   1f4ce:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f4d2:	3021      	adds	r0, #33	; 0x21
   1f4d4:	4633      	mov	r3, r6
   1f4d6:	6991      	ldr	r1, [r2, #24]
   1f4d8:	4410      	add	r0, r2
   1f4da:	4a23      	ldr	r2, [pc, #140]	; (1f568 <pdn_interface_setopt+0x15c>)
   1f4dc:	f006 ffe2 	bl	264a4 <snprintf>
   1f4e0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f4e4:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   1f4e8:	2000      	movs	r0, #0
   1f4ea:	741a      	strb	r2, [r3, #16]
   1f4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f4ee:	202d      	movs	r0, #45	; 0x2d
   1f4f0:	e7a0      	b.n	1f434 <pdn_interface_setopt+0x28>
   1f4f2:	689a      	ldr	r2, [r3, #8]
   1f4f4:	b12a      	cbz	r2, 1f502 <pdn_interface_setopt+0xf6>
   1f4f6:	689a      	ldr	r2, [r3, #8]
   1f4f8:	2a03      	cmp	r2, #3
   1f4fa:	d002      	beq.n	1f502 <pdn_interface_setopt+0xf6>
   1f4fc:	689a      	ldr	r2, [r3, #8]
   1f4fe:	2a04      	cmp	r2, #4
   1f500:	d101      	bne.n	1f506 <pdn_interface_setopt+0xfa>
   1f502:	200e      	movs	r0, #14
   1f504:	e796      	b.n	1f434 <pdn_interface_setopt+0x28>
   1f506:	08b2      	lsrs	r2, r6, #2
   1f508:	1e51      	subs	r1, r2, #1
   1f50a:	2901      	cmp	r1, #1
   1f50c:	d813      	bhi.n	1f536 <pdn_interface_setopt+0x12a>
   1f50e:	07b1      	lsls	r1, r6, #30
   1f510:	d111      	bne.n	1f536 <pdn_interface_setopt+0x12a>
   1f512:	6829      	ldr	r1, [r5, #0]
   1f514:	2902      	cmp	r1, #2
   1f516:	d016      	beq.n	1f546 <pdn_interface_setopt+0x13a>
   1f518:	290a      	cmp	r1, #10
   1f51a:	d10c      	bne.n	1f536 <pdn_interface_setopt+0x12a>
   1f51c:	2102      	movs	r1, #2
   1f51e:	2a02      	cmp	r2, #2
   1f520:	d106      	bne.n	1f530 <pdn_interface_setopt+0x124>
   1f522:	686a      	ldr	r2, [r5, #4]
   1f524:	2a02      	cmp	r2, #2
   1f526:	d010      	beq.n	1f54a <pdn_interface_setopt+0x13e>
   1f528:	2a0a      	cmp	r2, #10
   1f52a:	d104      	bne.n	1f536 <pdn_interface_setopt+0x12a>
   1f52c:	f041 0102 	orr.w	r1, r1, #2
   1f530:	60d9      	str	r1, [r3, #12]
   1f532:	2000      	movs	r0, #0
   1f534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f536:	2016      	movs	r0, #22
   1f538:	e77c      	b.n	1f434 <pdn_interface_setopt+0x28>
   1f53a:	2016      	movs	r0, #22
   1f53c:	f7f7 fb7c 	bl	16c38 <bsd_os_errno_set>
   1f540:	f04f 30ff 	mov.w	r0, #4294967295
   1f544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f546:	2101      	movs	r1, #1
   1f548:	e7e9      	b.n	1f51e <pdn_interface_setopt+0x112>
   1f54a:	f041 0101 	orr.w	r1, r1, #1
   1f54e:	e7ef      	b.n	1f530 <pdn_interface_setopt+0x124>
   1f550:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f554:	200c      	movs	r0, #12
   1f556:	6153      	str	r3, [r2, #20]
   1f558:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f55c:	6193      	str	r3, [r2, #24]
   1f55e:	e769      	b.n	1f434 <pdn_interface_setopt+0x28>
   1f560:	789a0000 	.word	0x789a0000
   1f564:	20021bd8 	.word	0x20021bd8
   1f568:	0002f178 	.word	0x0002f178

0001f56c <pdn_interface_getopt>:
   1f56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f570:	f240 2402 	movw	r4, #514	; 0x202
   1f574:	b083      	sub	sp, #12
   1f576:	42a1      	cmp	r1, r4
   1f578:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f57a:	f040 808f 	bne.w	1f69c <pdn_interface_getopt+0x130>
   1f57e:	461e      	mov	r6, r3
   1f580:	2b00      	cmp	r3, #0
   1f582:	f000 808b 	beq.w	1f69c <pdn_interface_getopt+0x130>
   1f586:	2d00      	cmp	r5, #0
   1f588:	f000 8088 	beq.w	1f69c <pdn_interface_getopt+0x130>
   1f58c:	0c03      	lsrs	r3, r0, #16
   1f58e:	4954      	ldr	r1, [pc, #336]	; (1f6e0 <pdn_interface_getopt+0x174>)
   1f590:	041b      	lsls	r3, r3, #16
   1f592:	428b      	cmp	r3, r1
   1f594:	f040 8084 	bne.w	1f6a0 <pdn_interface_getopt+0x134>
   1f598:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f59c:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f5a0:	2c09      	cmp	r4, #9
   1f5a2:	dc7d      	bgt.n	1f6a0 <pdn_interface_getopt+0x134>
   1f5a4:	4b4f      	ldr	r3, [pc, #316]	; (1f6e4 <pdn_interface_getopt+0x178>)
   1f5a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1f5aa:	2b00      	cmp	r3, #0
   1f5ac:	d078      	beq.n	1f6a0 <pdn_interface_getopt+0x134>
   1f5ae:	6899      	ldr	r1, [r3, #8]
   1f5b0:	2900      	cmp	r1, #0
   1f5b2:	d075      	beq.n	1f6a0 <pdn_interface_getopt+0x134>
   1f5b4:	2a02      	cmp	r2, #2
   1f5b6:	d04e      	beq.n	1f656 <pdn_interface_getopt+0xea>
   1f5b8:	2a03      	cmp	r2, #3
   1f5ba:	d009      	beq.n	1f5d0 <pdn_interface_getopt+0x64>
   1f5bc:	2a01      	cmp	r2, #1
   1f5be:	d054      	beq.n	1f66a <pdn_interface_getopt+0xfe>
   1f5c0:	202d      	movs	r0, #45	; 0x2d
   1f5c2:	f7f7 fb39 	bl	16c38 <bsd_os_errno_set>
   1f5c6:	f04f 30ff 	mov.w	r0, #4294967295
   1f5ca:	b003      	add	sp, #12
   1f5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f5d0:	682b      	ldr	r3, [r5, #0]
   1f5d2:	2b00      	cmp	r3, #0
   1f5d4:	d062      	beq.n	1f69c <pdn_interface_getopt+0x130>
   1f5d6:	4b44      	ldr	r3, [pc, #272]	; (1f6e8 <pdn_interface_getopt+0x17c>)
   1f5d8:	4a44      	ldr	r2, [pc, #272]	; (1f6ec <pdn_interface_getopt+0x180>)
   1f5da:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f5de:	4844      	ldr	r0, [pc, #272]	; (1f6f0 <pdn_interface_getopt+0x184>)
   1f5e0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1f6fc <pdn_interface_getopt+0x190>
   1f5e4:	f006 ff5e 	bl	264a4 <snprintf>
   1f5e8:	4841      	ldr	r0, [pc, #260]	; (1f6f0 <pdn_interface_getopt+0x184>)
   1f5ea:	f8d8 9000 	ldr.w	r9, [r8]
   1f5ee:	2700      	movs	r7, #0
   1f5f0:	f007 f8f8 	bl	267e4 <strlen>
   1f5f4:	463b      	mov	r3, r7
   1f5f6:	4602      	mov	r2, r0
   1f5f8:	493d      	ldr	r1, [pc, #244]	; (1f6f0 <pdn_interface_getopt+0x184>)
   1f5fa:	4648      	mov	r0, r9
   1f5fc:	9701      	str	r7, [sp, #4]
   1f5fe:	9700      	str	r7, [sp, #0]
   1f600:	f7ff f81c 	bl	1e63c <at_interface_write>
   1f604:	4681      	mov	r9, r0
   1f606:	483a      	ldr	r0, [pc, #232]	; (1f6f0 <pdn_interface_getopt+0x184>)
   1f608:	f007 f8ec 	bl	267e4 <strlen>
   1f60c:	4548      	cmp	r0, r9
   1f60e:	d161      	bne.n	1f6d4 <pdn_interface_getopt+0x168>
   1f610:	463b      	mov	r3, r7
   1f612:	e9cd 7700 	strd	r7, r7, [sp]
   1f616:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f61a:	4935      	ldr	r1, [pc, #212]	; (1f6f0 <pdn_interface_getopt+0x184>)
   1f61c:	f8d8 0000 	ldr.w	r0, [r8]
   1f620:	f7ff f960 	bl	1e8e4 <at_interface_read>
   1f624:	4607      	mov	r7, r0
   1f626:	4833      	ldr	r0, [pc, #204]	; (1f6f4 <pdn_interface_getopt+0x188>)
   1f628:	f007 f8dc 	bl	267e4 <strlen>
   1f62c:	4287      	cmp	r7, r0
   1f62e:	db3d      	blt.n	1f6ac <pdn_interface_getopt+0x140>
   1f630:	4602      	mov	r2, r0
   1f632:	492f      	ldr	r1, [pc, #188]	; (1f6f0 <pdn_interface_getopt+0x184>)
   1f634:	482f      	ldr	r0, [pc, #188]	; (1f6f4 <pdn_interface_getopt+0x188>)
   1f636:	f007 f903 	bl	26840 <strncmp>
   1f63a:	4607      	mov	r7, r0
   1f63c:	2800      	cmp	r0, #0
   1f63e:	d135      	bne.n	1f6ac <pdn_interface_getopt+0x140>
   1f640:	4620      	mov	r0, r4
   1f642:	492b      	ldr	r1, [pc, #172]	; (1f6f0 <pdn_interface_getopt+0x184>)
   1f644:	f7ff fa38 	bl	1eab8 <pdn_state_get_parser>
   1f648:	2800      	cmp	r0, #0
   1f64a:	dbba      	blt.n	1f5c2 <pdn_interface_getopt+0x56>
   1f64c:	2301      	movs	r3, #1
   1f64e:	7030      	strb	r0, [r6, #0]
   1f650:	4638      	mov	r0, r7
   1f652:	602b      	str	r3, [r5, #0]
   1f654:	e7b9      	b.n	1f5ca <pdn_interface_getopt+0x5e>
   1f656:	682a      	ldr	r2, [r5, #0]
   1f658:	b302      	cbz	r2, 1f69c <pdn_interface_getopt+0x130>
   1f65a:	2201      	movs	r2, #1
   1f65c:	2000      	movs	r0, #0
   1f65e:	681b      	ldr	r3, [r3, #0]
   1f660:	7033      	strb	r3, [r6, #0]
   1f662:	602a      	str	r2, [r5, #0]
   1f664:	b003      	add	sp, #12
   1f666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f66a:	689a      	ldr	r2, [r3, #8]
   1f66c:	b1a2      	cbz	r2, 1f698 <pdn_interface_getopt+0x12c>
   1f66e:	689a      	ldr	r2, [r3, #8]
   1f670:	2a04      	cmp	r2, #4
   1f672:	d011      	beq.n	1f698 <pdn_interface_getopt+0x12c>
   1f674:	682a      	ldr	r2, [r5, #0]
   1f676:	2a07      	cmp	r2, #7
   1f678:	d910      	bls.n	1f69c <pdn_interface_getopt+0x130>
   1f67a:	f012 0203 	ands.w	r2, r2, #3
   1f67e:	d10d      	bne.n	1f69c <pdn_interface_getopt+0x130>
   1f680:	68db      	ldr	r3, [r3, #12]
   1f682:	0799      	lsls	r1, r3, #30
   1f684:	d421      	bmi.n	1f6ca <pdn_interface_getopt+0x15e>
   1f686:	2104      	movs	r1, #4
   1f688:	07db      	lsls	r3, r3, #31
   1f68a:	d502      	bpl.n	1f692 <pdn_interface_getopt+0x126>
   1f68c:	2302      	movs	r3, #2
   1f68e:	50b3      	str	r3, [r6, r2]
   1f690:	460a      	mov	r2, r1
   1f692:	602a      	str	r2, [r5, #0]
   1f694:	2000      	movs	r0, #0
   1f696:	e798      	b.n	1f5ca <pdn_interface_getopt+0x5e>
   1f698:	200e      	movs	r0, #14
   1f69a:	e792      	b.n	1f5c2 <pdn_interface_getopt+0x56>
   1f69c:	2016      	movs	r0, #22
   1f69e:	e790      	b.n	1f5c2 <pdn_interface_getopt+0x56>
   1f6a0:	2009      	movs	r0, #9
   1f6a2:	f7f7 fac9 	bl	16c38 <bsd_os_errno_set>
   1f6a6:	f04f 30ff 	mov.w	r0, #4294967295
   1f6aa:	e78e      	b.n	1f5ca <pdn_interface_getopt+0x5e>
   1f6ac:	4812      	ldr	r0, [pc, #72]	; (1f6f8 <pdn_interface_getopt+0x18c>)
   1f6ae:	f007 f899 	bl	267e4 <strlen>
   1f6b2:	490f      	ldr	r1, [pc, #60]	; (1f6f0 <pdn_interface_getopt+0x184>)
   1f6b4:	4602      	mov	r2, r0
   1f6b6:	4810      	ldr	r0, [pc, #64]	; (1f6f8 <pdn_interface_getopt+0x18c>)
   1f6b8:	f007 f8c2 	bl	26840 <strncmp>
   1f6bc:	b950      	cbnz	r0, 1f6d4 <pdn_interface_getopt+0x168>
   1f6be:	2008      	movs	r0, #8
   1f6c0:	f7f7 faba 	bl	16c38 <bsd_os_errno_set>
   1f6c4:	f04f 30ff 	mov.w	r0, #4294967295
   1f6c8:	e77b      	b.n	1f5c2 <pdn_interface_getopt+0x56>
   1f6ca:	220a      	movs	r2, #10
   1f6cc:	2108      	movs	r1, #8
   1f6ce:	6032      	str	r2, [r6, #0]
   1f6d0:	2204      	movs	r2, #4
   1f6d2:	e7d9      	b.n	1f688 <pdn_interface_getopt+0x11c>
   1f6d4:	2005      	movs	r0, #5
   1f6d6:	f7f7 faaf 	bl	16c38 <bsd_os_errno_set>
   1f6da:	f04f 30ff 	mov.w	r0, #4294967295
   1f6de:	e770      	b.n	1f5c2 <pdn_interface_getopt+0x56>
   1f6e0:	789a0000 	.word	0x789a0000
   1f6e4:	20021bd8 	.word	0x20021bd8
   1f6e8:	0002f158 	.word	0x0002f158
   1f6ec:	0002f178 	.word	0x0002f178
   1f6f0:	20021ad8 	.word	0x20021ad8
   1f6f4:	0002f164 	.word	0x0002f164
   1f6f8:	0002f188 	.word	0x0002f188
   1f6fc:	20021ad4 	.word	0x20021ad4

0001f700 <pdn_interface_pdn_id_get>:
   1f700:	2900      	cmp	r1, #0
   1f702:	f000 82ba 	beq.w	1fc7a <pdn_interface_pdn_id_get+0x57a>
   1f706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f70a:	2802      	cmp	r0, #2
   1f70c:	b083      	sub	sp, #12
   1f70e:	460e      	mov	r6, r1
   1f710:	d067      	beq.n	1f7e2 <pdn_interface_pdn_id_get+0xe2>
   1f712:	280a      	cmp	r0, #10
   1f714:	d040      	beq.n	1f798 <pdn_interface_pdn_id_get+0x98>
   1f716:	4cae      	ldr	r4, [pc, #696]	; (1f9d0 <pdn_interface_pdn_id_get+0x2d0>)
   1f718:	6823      	ldr	r3, [r4, #0]
   1f71a:	b11b      	cbz	r3, 1f724 <pdn_interface_pdn_id_get+0x24>
   1f71c:	689b      	ldr	r3, [r3, #8]
   1f71e:	2b03      	cmp	r3, #3
   1f720:	f000 80fc 	beq.w	1f91c <pdn_interface_pdn_id_get+0x21c>
   1f724:	6863      	ldr	r3, [r4, #4]
   1f726:	b11b      	cbz	r3, 1f730 <pdn_interface_pdn_id_get+0x30>
   1f728:	689b      	ldr	r3, [r3, #8]
   1f72a:	2b03      	cmp	r3, #3
   1f72c:	f000 80e4 	beq.w	1f8f8 <pdn_interface_pdn_id_get+0x1f8>
   1f730:	68a3      	ldr	r3, [r4, #8]
   1f732:	b11b      	cbz	r3, 1f73c <pdn_interface_pdn_id_get+0x3c>
   1f734:	689b      	ldr	r3, [r3, #8]
   1f736:	2b03      	cmp	r3, #3
   1f738:	f000 80cc 	beq.w	1f8d4 <pdn_interface_pdn_id_get+0x1d4>
   1f73c:	68e3      	ldr	r3, [r4, #12]
   1f73e:	b11b      	cbz	r3, 1f748 <pdn_interface_pdn_id_get+0x48>
   1f740:	689b      	ldr	r3, [r3, #8]
   1f742:	2b03      	cmp	r3, #3
   1f744:	f000 80b4 	beq.w	1f8b0 <pdn_interface_pdn_id_get+0x1b0>
   1f748:	6923      	ldr	r3, [r4, #16]
   1f74a:	b11b      	cbz	r3, 1f754 <pdn_interface_pdn_id_get+0x54>
   1f74c:	689b      	ldr	r3, [r3, #8]
   1f74e:	2b03      	cmp	r3, #3
   1f750:	f000 80f5 	beq.w	1f93e <pdn_interface_pdn_id_get+0x23e>
   1f754:	6963      	ldr	r3, [r4, #20]
   1f756:	b11b      	cbz	r3, 1f760 <pdn_interface_pdn_id_get+0x60>
   1f758:	689b      	ldr	r3, [r3, #8]
   1f75a:	2b03      	cmp	r3, #3
   1f75c:	f000 813c 	beq.w	1f9d8 <pdn_interface_pdn_id_get+0x2d8>
   1f760:	69a3      	ldr	r3, [r4, #24]
   1f762:	b11b      	cbz	r3, 1f76c <pdn_interface_pdn_id_get+0x6c>
   1f764:	689b      	ldr	r3, [r3, #8]
   1f766:	2b03      	cmp	r3, #3
   1f768:	f000 811f 	beq.w	1f9aa <pdn_interface_pdn_id_get+0x2aa>
   1f76c:	69e3      	ldr	r3, [r4, #28]
   1f76e:	b11b      	cbz	r3, 1f778 <pdn_interface_pdn_id_get+0x78>
   1f770:	689b      	ldr	r3, [r3, #8]
   1f772:	2b03      	cmp	r3, #3
   1f774:	f000 8107 	beq.w	1f986 <pdn_interface_pdn_id_get+0x286>
   1f778:	6a23      	ldr	r3, [r4, #32]
   1f77a:	b11b      	cbz	r3, 1f784 <pdn_interface_pdn_id_get+0x84>
   1f77c:	689b      	ldr	r3, [r3, #8]
   1f77e:	2b03      	cmp	r3, #3
   1f780:	f000 80ef 	beq.w	1f962 <pdn_interface_pdn_id_get+0x262>
   1f784:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f786:	b113      	cbz	r3, 1f78e <pdn_interface_pdn_id_get+0x8e>
   1f788:	689b      	ldr	r3, [r3, #8]
   1f78a:	2b03      	cmp	r3, #3
   1f78c:	d07e      	beq.n	1f88c <pdn_interface_pdn_id_get+0x18c>
   1f78e:	f04f 30ff 	mov.w	r0, #4294967295
   1f792:	b003      	add	sp, #12
   1f794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f798:	2500      	movs	r5, #0
   1f79a:	4c8e      	ldr	r4, [pc, #568]	; (1f9d4 <pdn_interface_pdn_id_get+0x2d4>)
   1f79c:	e002      	b.n	1f7a4 <pdn_interface_pdn_id_get+0xa4>
   1f79e:	3501      	adds	r5, #1
   1f7a0:	2d0a      	cmp	r5, #10
   1f7a2:	d0f4      	beq.n	1f78e <pdn_interface_pdn_id_get+0x8e>
   1f7a4:	f854 3f04 	ldr.w	r3, [r4, #4]!
   1f7a8:	2b00      	cmp	r3, #0
   1f7aa:	d0f8      	beq.n	1f79e <pdn_interface_pdn_id_get+0x9e>
   1f7ac:	689b      	ldr	r3, [r3, #8]
   1f7ae:	2b03      	cmp	r3, #3
   1f7b0:	d1f5      	bne.n	1f79e <pdn_interface_pdn_id_get+0x9e>
   1f7b2:	4630      	mov	r0, r6
   1f7b4:	f007 f816 	bl	267e4 <strlen>
   1f7b8:	6823      	ldr	r3, [r4, #0]
   1f7ba:	69da      	ldr	r2, [r3, #28]
   1f7bc:	4290      	cmp	r0, r2
   1f7be:	d1ee      	bne.n	1f79e <pdn_interface_pdn_id_get+0x9e>
   1f7c0:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   1f7c4:	4439      	add	r1, r7
   1f7c6:	3120      	adds	r1, #32
   1f7c8:	4602      	mov	r2, r0
   1f7ca:	4419      	add	r1, r3
   1f7cc:	4630      	mov	r0, r6
   1f7ce:	f007 f837 	bl	26840 <strncmp>
   1f7d2:	2800      	cmp	r0, #0
   1f7d4:	d1e3      	bne.n	1f79e <pdn_interface_pdn_id_get+0x9e>
   1f7d6:	6823      	ldr	r3, [r4, #0]
   1f7d8:	68da      	ldr	r2, [r3, #12]
   1f7da:	0792      	lsls	r2, r2, #30
   1f7dc:	f100 8128 	bmi.w	1fa30 <pdn_interface_pdn_id_get+0x330>
   1f7e0:	e7dd      	b.n	1f79e <pdn_interface_pdn_id_get+0x9e>
   1f7e2:	4c7b      	ldr	r4, [pc, #492]	; (1f9d0 <pdn_interface_pdn_id_get+0x2d0>)
   1f7e4:	6823      	ldr	r3, [r4, #0]
   1f7e6:	b11b      	cbz	r3, 1f7f0 <pdn_interface_pdn_id_get+0xf0>
   1f7e8:	689b      	ldr	r3, [r3, #8]
   1f7ea:	2b03      	cmp	r3, #3
   1f7ec:	f000 822a 	beq.w	1fc44 <pdn_interface_pdn_id_get+0x544>
   1f7f0:	6863      	ldr	r3, [r4, #4]
   1f7f2:	b11b      	cbz	r3, 1f7fc <pdn_interface_pdn_id_get+0xfc>
   1f7f4:	689b      	ldr	r3, [r3, #8]
   1f7f6:	2b03      	cmp	r3, #3
   1f7f8:	f000 8209 	beq.w	1fc0e <pdn_interface_pdn_id_get+0x50e>
   1f7fc:	68a3      	ldr	r3, [r4, #8]
   1f7fe:	b11b      	cbz	r3, 1f808 <pdn_interface_pdn_id_get+0x108>
   1f800:	689b      	ldr	r3, [r3, #8]
   1f802:	2b03      	cmp	r3, #3
   1f804:	f000 81b3 	beq.w	1fb6e <pdn_interface_pdn_id_get+0x46e>
   1f808:	68e3      	ldr	r3, [r4, #12]
   1f80a:	b11b      	cbz	r3, 1f814 <pdn_interface_pdn_id_get+0x114>
   1f80c:	689d      	ldr	r5, [r3, #8]
   1f80e:	2d03      	cmp	r5, #3
   1f810:	f000 81c8 	beq.w	1fba4 <pdn_interface_pdn_id_get+0x4a4>
   1f814:	6923      	ldr	r3, [r4, #16]
   1f816:	b11b      	cbz	r3, 1f820 <pdn_interface_pdn_id_get+0x120>
   1f818:	689b      	ldr	r3, [r3, #8]
   1f81a:	2b03      	cmp	r3, #3
   1f81c:	f000 80ee 	beq.w	1f9fc <pdn_interface_pdn_id_get+0x2fc>
   1f820:	6963      	ldr	r3, [r4, #20]
   1f822:	b11b      	cbz	r3, 1f82c <pdn_interface_pdn_id_get+0x12c>
   1f824:	689b      	ldr	r3, [r3, #8]
   1f826:	2b03      	cmp	r3, #3
   1f828:	f000 8150 	beq.w	1facc <pdn_interface_pdn_id_get+0x3cc>
   1f82c:	69a3      	ldr	r3, [r4, #24]
   1f82e:	b11b      	cbz	r3, 1f838 <pdn_interface_pdn_id_get+0x138>
   1f830:	689b      	ldr	r3, [r3, #8]
   1f832:	2b03      	cmp	r3, #3
   1f834:	f000 8165 	beq.w	1fb02 <pdn_interface_pdn_id_get+0x402>
   1f838:	69e3      	ldr	r3, [r4, #28]
   1f83a:	b11b      	cbz	r3, 1f844 <pdn_interface_pdn_id_get+0x144>
   1f83c:	689b      	ldr	r3, [r3, #8]
   1f83e:	2b03      	cmp	r3, #3
   1f840:	f000 817a 	beq.w	1fb38 <pdn_interface_pdn_id_get+0x438>
   1f844:	6a23      	ldr	r3, [r4, #32]
   1f846:	b11b      	cbz	r3, 1f850 <pdn_interface_pdn_id_get+0x150>
   1f848:	689b      	ldr	r3, [r3, #8]
   1f84a:	2b03      	cmp	r3, #3
   1f84c:	f000 81c4 	beq.w	1fbd8 <pdn_interface_pdn_id_get+0x4d8>
   1f850:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f852:	2b00      	cmp	r3, #0
   1f854:	d09b      	beq.n	1f78e <pdn_interface_pdn_id_get+0x8e>
   1f856:	689b      	ldr	r3, [r3, #8]
   1f858:	2b03      	cmp	r3, #3
   1f85a:	d198      	bne.n	1f78e <pdn_interface_pdn_id_get+0x8e>
   1f85c:	4630      	mov	r0, r6
   1f85e:	f006 ffc1 	bl	267e4 <strlen>
   1f862:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f864:	69da      	ldr	r2, [r3, #28]
   1f866:	4290      	cmp	r0, r2
   1f868:	d191      	bne.n	1f78e <pdn_interface_pdn_id_get+0x8e>
   1f86a:	e9d3 5105 	ldrd	r5, r1, [r3, #20]
   1f86e:	4429      	add	r1, r5
   1f870:	3120      	adds	r1, #32
   1f872:	4602      	mov	r2, r0
   1f874:	4419      	add	r1, r3
   1f876:	4630      	mov	r0, r6
   1f878:	f006 ffe2 	bl	26840 <strncmp>
   1f87c:	2800      	cmp	r0, #0
   1f87e:	d186      	bne.n	1f78e <pdn_interface_pdn_id_get+0x8e>
   1f880:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f882:	68da      	ldr	r2, [r3, #12]
   1f884:	07d2      	lsls	r2, r2, #31
   1f886:	d582      	bpl.n	1f78e <pdn_interface_pdn_id_get+0x8e>
   1f888:	2509      	movs	r5, #9
   1f88a:	e0d1      	b.n	1fa30 <pdn_interface_pdn_id_get+0x330>
   1f88c:	4630      	mov	r0, r6
   1f88e:	f006 ffa9 	bl	267e4 <strlen>
   1f892:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f894:	69da      	ldr	r2, [r3, #28]
   1f896:	4290      	cmp	r0, r2
   1f898:	f47f af79 	bne.w	1f78e <pdn_interface_pdn_id_get+0x8e>
   1f89c:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
   1f8a0:	4421      	add	r1, r4
   1f8a2:	3120      	adds	r1, #32
   1f8a4:	4602      	mov	r2, r0
   1f8a6:	4419      	add	r1, r3
   1f8a8:	4630      	mov	r0, r6
   1f8aa:	f006 ffc9 	bl	26840 <strncmp>
   1f8ae:	e76e      	b.n	1f78e <pdn_interface_pdn_id_get+0x8e>
   1f8b0:	4630      	mov	r0, r6
   1f8b2:	f006 ff97 	bl	267e4 <strlen>
   1f8b6:	68e3      	ldr	r3, [r4, #12]
   1f8b8:	69da      	ldr	r2, [r3, #28]
   1f8ba:	4290      	cmp	r0, r2
   1f8bc:	f47f af44 	bne.w	1f748 <pdn_interface_pdn_id_get+0x48>
   1f8c0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f8c4:	4429      	add	r1, r5
   1f8c6:	3120      	adds	r1, #32
   1f8c8:	4602      	mov	r2, r0
   1f8ca:	4419      	add	r1, r3
   1f8cc:	4630      	mov	r0, r6
   1f8ce:	f006 ffb7 	bl	26840 <strncmp>
   1f8d2:	e739      	b.n	1f748 <pdn_interface_pdn_id_get+0x48>
   1f8d4:	4630      	mov	r0, r6
   1f8d6:	f006 ff85 	bl	267e4 <strlen>
   1f8da:	68a3      	ldr	r3, [r4, #8]
   1f8dc:	69da      	ldr	r2, [r3, #28]
   1f8de:	4290      	cmp	r0, r2
   1f8e0:	f47f af2c 	bne.w	1f73c <pdn_interface_pdn_id_get+0x3c>
   1f8e4:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f8e8:	4429      	add	r1, r5
   1f8ea:	3120      	adds	r1, #32
   1f8ec:	4602      	mov	r2, r0
   1f8ee:	4419      	add	r1, r3
   1f8f0:	4630      	mov	r0, r6
   1f8f2:	f006 ffa5 	bl	26840 <strncmp>
   1f8f6:	e721      	b.n	1f73c <pdn_interface_pdn_id_get+0x3c>
   1f8f8:	4630      	mov	r0, r6
   1f8fa:	f006 ff73 	bl	267e4 <strlen>
   1f8fe:	6863      	ldr	r3, [r4, #4]
   1f900:	69da      	ldr	r2, [r3, #28]
   1f902:	4290      	cmp	r0, r2
   1f904:	f47f af14 	bne.w	1f730 <pdn_interface_pdn_id_get+0x30>
   1f908:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f90c:	4429      	add	r1, r5
   1f90e:	3120      	adds	r1, #32
   1f910:	4602      	mov	r2, r0
   1f912:	4419      	add	r1, r3
   1f914:	4630      	mov	r0, r6
   1f916:	f006 ff93 	bl	26840 <strncmp>
   1f91a:	e709      	b.n	1f730 <pdn_interface_pdn_id_get+0x30>
   1f91c:	4608      	mov	r0, r1
   1f91e:	f006 ff61 	bl	267e4 <strlen>
   1f922:	6823      	ldr	r3, [r4, #0]
   1f924:	69da      	ldr	r2, [r3, #28]
   1f926:	4282      	cmp	r2, r0
   1f928:	f47f aefc 	bne.w	1f724 <pdn_interface_pdn_id_get+0x24>
   1f92c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1f930:	4401      	add	r1, r0
   1f932:	3120      	adds	r1, #32
   1f934:	4419      	add	r1, r3
   1f936:	4630      	mov	r0, r6
   1f938:	f006 ff82 	bl	26840 <strncmp>
   1f93c:	e6f2      	b.n	1f724 <pdn_interface_pdn_id_get+0x24>
   1f93e:	4630      	mov	r0, r6
   1f940:	f006 ff50 	bl	267e4 <strlen>
   1f944:	6923      	ldr	r3, [r4, #16]
   1f946:	69da      	ldr	r2, [r3, #28]
   1f948:	4290      	cmp	r0, r2
   1f94a:	f47f af03 	bne.w	1f754 <pdn_interface_pdn_id_get+0x54>
   1f94e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f952:	4429      	add	r1, r5
   1f954:	3120      	adds	r1, #32
   1f956:	4602      	mov	r2, r0
   1f958:	4419      	add	r1, r3
   1f95a:	4630      	mov	r0, r6
   1f95c:	f006 ff70 	bl	26840 <strncmp>
   1f960:	e6f8      	b.n	1f754 <pdn_interface_pdn_id_get+0x54>
   1f962:	4630      	mov	r0, r6
   1f964:	f006 ff3e 	bl	267e4 <strlen>
   1f968:	6a23      	ldr	r3, [r4, #32]
   1f96a:	69da      	ldr	r2, [r3, #28]
   1f96c:	4290      	cmp	r0, r2
   1f96e:	f47f af09 	bne.w	1f784 <pdn_interface_pdn_id_get+0x84>
   1f972:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f976:	4429      	add	r1, r5
   1f978:	3120      	adds	r1, #32
   1f97a:	4602      	mov	r2, r0
   1f97c:	4419      	add	r1, r3
   1f97e:	4630      	mov	r0, r6
   1f980:	f006 ff5e 	bl	26840 <strncmp>
   1f984:	e6fe      	b.n	1f784 <pdn_interface_pdn_id_get+0x84>
   1f986:	4630      	mov	r0, r6
   1f988:	f006 ff2c 	bl	267e4 <strlen>
   1f98c:	69e3      	ldr	r3, [r4, #28]
   1f98e:	69da      	ldr	r2, [r3, #28]
   1f990:	4290      	cmp	r0, r2
   1f992:	f47f aef1 	bne.w	1f778 <pdn_interface_pdn_id_get+0x78>
   1f996:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f99a:	4429      	add	r1, r5
   1f99c:	3120      	adds	r1, #32
   1f99e:	4602      	mov	r2, r0
   1f9a0:	4419      	add	r1, r3
   1f9a2:	4630      	mov	r0, r6
   1f9a4:	f006 ff4c 	bl	26840 <strncmp>
   1f9a8:	e6e6      	b.n	1f778 <pdn_interface_pdn_id_get+0x78>
   1f9aa:	4630      	mov	r0, r6
   1f9ac:	f006 ff1a 	bl	267e4 <strlen>
   1f9b0:	69a3      	ldr	r3, [r4, #24]
   1f9b2:	69da      	ldr	r2, [r3, #28]
   1f9b4:	4290      	cmp	r0, r2
   1f9b6:	f47f aed9 	bne.w	1f76c <pdn_interface_pdn_id_get+0x6c>
   1f9ba:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f9be:	4429      	add	r1, r5
   1f9c0:	3120      	adds	r1, #32
   1f9c2:	4602      	mov	r2, r0
   1f9c4:	4419      	add	r1, r3
   1f9c6:	4630      	mov	r0, r6
   1f9c8:	f006 ff3a 	bl	26840 <strncmp>
   1f9cc:	e6ce      	b.n	1f76c <pdn_interface_pdn_id_get+0x6c>
   1f9ce:	bf00      	nop
   1f9d0:	20021bd8 	.word	0x20021bd8
   1f9d4:	20021bd4 	.word	0x20021bd4
   1f9d8:	4630      	mov	r0, r6
   1f9da:	f006 ff03 	bl	267e4 <strlen>
   1f9de:	6963      	ldr	r3, [r4, #20]
   1f9e0:	69da      	ldr	r2, [r3, #28]
   1f9e2:	4290      	cmp	r0, r2
   1f9e4:	f47f aebc 	bne.w	1f760 <pdn_interface_pdn_id_get+0x60>
   1f9e8:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f9ec:	4429      	add	r1, r5
   1f9ee:	3120      	adds	r1, #32
   1f9f0:	4602      	mov	r2, r0
   1f9f2:	4419      	add	r1, r3
   1f9f4:	4630      	mov	r0, r6
   1f9f6:	f006 ff23 	bl	26840 <strncmp>
   1f9fa:	e6b1      	b.n	1f760 <pdn_interface_pdn_id_get+0x60>
   1f9fc:	4630      	mov	r0, r6
   1f9fe:	f006 fef1 	bl	267e4 <strlen>
   1fa02:	6923      	ldr	r3, [r4, #16]
   1fa04:	69da      	ldr	r2, [r3, #28]
   1fa06:	4290      	cmp	r0, r2
   1fa08:	f47f af0a 	bne.w	1f820 <pdn_interface_pdn_id_get+0x120>
   1fa0c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa10:	4429      	add	r1, r5
   1fa12:	3120      	adds	r1, #32
   1fa14:	4602      	mov	r2, r0
   1fa16:	4419      	add	r1, r3
   1fa18:	4630      	mov	r0, r6
   1fa1a:	f006 ff11 	bl	26840 <strncmp>
   1fa1e:	2800      	cmp	r0, #0
   1fa20:	f47f aefe 	bne.w	1f820 <pdn_interface_pdn_id_get+0x120>
   1fa24:	6923      	ldr	r3, [r4, #16]
   1fa26:	68da      	ldr	r2, [r3, #12]
   1fa28:	07d2      	lsls	r2, r2, #31
   1fa2a:	f57f aef9 	bpl.w	1f820 <pdn_interface_pdn_id_get+0x120>
   1fa2e:	2504      	movs	r5, #4
   1fa30:	6858      	ldr	r0, [r3, #4]
   1fa32:	1c43      	adds	r3, r0, #1
   1fa34:	f47f aead 	bne.w	1f792 <pdn_interface_pdn_id_get+0x92>
   1fa38:	4e9d      	ldr	r6, [pc, #628]	; (1fcb0 <pdn_interface_pdn_id_get+0x5b0>)
   1fa3a:	4b9e      	ldr	r3, [pc, #632]	; (1fcb4 <pdn_interface_pdn_id_get+0x5b4>)
   1fa3c:	4a9e      	ldr	r2, [pc, #632]	; (1fcb8 <pdn_interface_pdn_id_get+0x5b8>)
   1fa3e:	f44f 7180 	mov.w	r1, #256	; 0x100
   1fa42:	4630      	mov	r0, r6
   1fa44:	f006 fd2e 	bl	264a4 <snprintf>
   1fa48:	4c9c      	ldr	r4, [pc, #624]	; (1fcbc <pdn_interface_pdn_id_get+0x5bc>)
   1fa4a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1fa4e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fa52:	4a9b      	ldr	r2, [pc, #620]	; (1fcc0 <pdn_interface_pdn_id_get+0x5c0>)
   1fa54:	681b      	ldr	r3, [r3, #0]
   1fa56:	4430      	add	r0, r6
   1fa58:	f8df 8270 	ldr.w	r8, [pc, #624]	; 1fccc <pdn_interface_pdn_id_get+0x5cc>
   1fa5c:	f006 fd22 	bl	264a4 <snprintf>
   1fa60:	4630      	mov	r0, r6
   1fa62:	f8d8 9000 	ldr.w	r9, [r8]
   1fa66:	2700      	movs	r7, #0
   1fa68:	f006 febc 	bl	267e4 <strlen>
   1fa6c:	4631      	mov	r1, r6
   1fa6e:	4602      	mov	r2, r0
   1fa70:	463b      	mov	r3, r7
   1fa72:	4648      	mov	r0, r9
   1fa74:	9701      	str	r7, [sp, #4]
   1fa76:	9700      	str	r7, [sp, #0]
   1fa78:	f7fe fde0 	bl	1e63c <at_interface_write>
   1fa7c:	4681      	mov	r9, r0
   1fa7e:	4630      	mov	r0, r6
   1fa80:	f006 feb0 	bl	267e4 <strlen>
   1fa84:	4548      	cmp	r0, r9
   1fa86:	f040 810b 	bne.w	1fca0 <pdn_interface_pdn_id_get+0x5a0>
   1fa8a:	463b      	mov	r3, r7
   1fa8c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1fa90:	e9cd 7700 	strd	r7, r7, [sp]
   1fa94:	4631      	mov	r1, r6
   1fa96:	f8d8 0000 	ldr.w	r0, [r8]
   1fa9a:	f7fe ff23 	bl	1e8e4 <at_interface_read>
   1fa9e:	4607      	mov	r7, r0
   1faa0:	4888      	ldr	r0, [pc, #544]	; (1fcc4 <pdn_interface_pdn_id_get+0x5c4>)
   1faa2:	f006 fe9f 	bl	267e4 <strlen>
   1faa6:	4287      	cmp	r7, r0
   1faa8:	4602      	mov	r2, r0
   1faaa:	f2c0 80e9 	blt.w	1fc80 <pdn_interface_pdn_id_get+0x580>
   1faae:	4631      	mov	r1, r6
   1fab0:	4884      	ldr	r0, [pc, #528]	; (1fcc4 <pdn_interface_pdn_id_get+0x5c4>)
   1fab2:	f006 fec5 	bl	26840 <strncmp>
   1fab6:	2800      	cmp	r0, #0
   1fab8:	f040 80e2 	bne.w	1fc80 <pdn_interface_pdn_id_get+0x580>
   1fabc:	4631      	mov	r1, r6
   1fabe:	4628      	mov	r0, r5
   1fac0:	f7ff f830 	bl	1eb24 <pdn_id_get_parser>
   1fac4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fac8:	6858      	ldr	r0, [r3, #4]
   1faca:	e662      	b.n	1f792 <pdn_interface_pdn_id_get+0x92>
   1facc:	4630      	mov	r0, r6
   1face:	f006 fe89 	bl	267e4 <strlen>
   1fad2:	6963      	ldr	r3, [r4, #20]
   1fad4:	69da      	ldr	r2, [r3, #28]
   1fad6:	4290      	cmp	r0, r2
   1fad8:	f47f aea8 	bne.w	1f82c <pdn_interface_pdn_id_get+0x12c>
   1fadc:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fae0:	4429      	add	r1, r5
   1fae2:	3120      	adds	r1, #32
   1fae4:	4602      	mov	r2, r0
   1fae6:	4419      	add	r1, r3
   1fae8:	4630      	mov	r0, r6
   1faea:	f006 fea9 	bl	26840 <strncmp>
   1faee:	2800      	cmp	r0, #0
   1faf0:	f47f ae9c 	bne.w	1f82c <pdn_interface_pdn_id_get+0x12c>
   1faf4:	6963      	ldr	r3, [r4, #20]
   1faf6:	68da      	ldr	r2, [r3, #12]
   1faf8:	07d7      	lsls	r7, r2, #31
   1fafa:	f57f ae97 	bpl.w	1f82c <pdn_interface_pdn_id_get+0x12c>
   1fafe:	2505      	movs	r5, #5
   1fb00:	e796      	b.n	1fa30 <pdn_interface_pdn_id_get+0x330>
   1fb02:	4630      	mov	r0, r6
   1fb04:	f006 fe6e 	bl	267e4 <strlen>
   1fb08:	69a3      	ldr	r3, [r4, #24]
   1fb0a:	69da      	ldr	r2, [r3, #28]
   1fb0c:	4290      	cmp	r0, r2
   1fb0e:	f47f ae93 	bne.w	1f838 <pdn_interface_pdn_id_get+0x138>
   1fb12:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fb16:	4429      	add	r1, r5
   1fb18:	3120      	adds	r1, #32
   1fb1a:	4602      	mov	r2, r0
   1fb1c:	4419      	add	r1, r3
   1fb1e:	4630      	mov	r0, r6
   1fb20:	f006 fe8e 	bl	26840 <strncmp>
   1fb24:	2800      	cmp	r0, #0
   1fb26:	f47f ae87 	bne.w	1f838 <pdn_interface_pdn_id_get+0x138>
   1fb2a:	69a3      	ldr	r3, [r4, #24]
   1fb2c:	68da      	ldr	r2, [r3, #12]
   1fb2e:	07d5      	lsls	r5, r2, #31
   1fb30:	f57f ae82 	bpl.w	1f838 <pdn_interface_pdn_id_get+0x138>
   1fb34:	2506      	movs	r5, #6
   1fb36:	e77b      	b.n	1fa30 <pdn_interface_pdn_id_get+0x330>
   1fb38:	4630      	mov	r0, r6
   1fb3a:	f006 fe53 	bl	267e4 <strlen>
   1fb3e:	69e3      	ldr	r3, [r4, #28]
   1fb40:	69da      	ldr	r2, [r3, #28]
   1fb42:	4290      	cmp	r0, r2
   1fb44:	f47f ae7e 	bne.w	1f844 <pdn_interface_pdn_id_get+0x144>
   1fb48:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fb4c:	4429      	add	r1, r5
   1fb4e:	3120      	adds	r1, #32
   1fb50:	4602      	mov	r2, r0
   1fb52:	4419      	add	r1, r3
   1fb54:	4630      	mov	r0, r6
   1fb56:	f006 fe73 	bl	26840 <strncmp>
   1fb5a:	2800      	cmp	r0, #0
   1fb5c:	f47f ae72 	bne.w	1f844 <pdn_interface_pdn_id_get+0x144>
   1fb60:	69e3      	ldr	r3, [r4, #28]
   1fb62:	68da      	ldr	r2, [r3, #12]
   1fb64:	07d0      	lsls	r0, r2, #31
   1fb66:	f57f ae6d 	bpl.w	1f844 <pdn_interface_pdn_id_get+0x144>
   1fb6a:	2507      	movs	r5, #7
   1fb6c:	e760      	b.n	1fa30 <pdn_interface_pdn_id_get+0x330>
   1fb6e:	4630      	mov	r0, r6
   1fb70:	f006 fe38 	bl	267e4 <strlen>
   1fb74:	68a3      	ldr	r3, [r4, #8]
   1fb76:	69da      	ldr	r2, [r3, #28]
   1fb78:	4290      	cmp	r0, r2
   1fb7a:	f47f ae45 	bne.w	1f808 <pdn_interface_pdn_id_get+0x108>
   1fb7e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fb82:	4429      	add	r1, r5
   1fb84:	3120      	adds	r1, #32
   1fb86:	4602      	mov	r2, r0
   1fb88:	4419      	add	r1, r3
   1fb8a:	4630      	mov	r0, r6
   1fb8c:	f006 fe58 	bl	26840 <strncmp>
   1fb90:	2800      	cmp	r0, #0
   1fb92:	f47f ae39 	bne.w	1f808 <pdn_interface_pdn_id_get+0x108>
   1fb96:	68a3      	ldr	r3, [r4, #8]
   1fb98:	68da      	ldr	r2, [r3, #12]
   1fb9a:	07d0      	lsls	r0, r2, #31
   1fb9c:	f57f ae34 	bpl.w	1f808 <pdn_interface_pdn_id_get+0x108>
   1fba0:	2502      	movs	r5, #2
   1fba2:	e745      	b.n	1fa30 <pdn_interface_pdn_id_get+0x330>
   1fba4:	4630      	mov	r0, r6
   1fba6:	f006 fe1d 	bl	267e4 <strlen>
   1fbaa:	68e3      	ldr	r3, [r4, #12]
   1fbac:	69da      	ldr	r2, [r3, #28]
   1fbae:	4290      	cmp	r0, r2
   1fbb0:	f47f ae30 	bne.w	1f814 <pdn_interface_pdn_id_get+0x114>
   1fbb4:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   1fbb8:	4439      	add	r1, r7
   1fbba:	3120      	adds	r1, #32
   1fbbc:	4602      	mov	r2, r0
   1fbbe:	4419      	add	r1, r3
   1fbc0:	4630      	mov	r0, r6
   1fbc2:	f006 fe3d 	bl	26840 <strncmp>
   1fbc6:	2800      	cmp	r0, #0
   1fbc8:	f47f ae24 	bne.w	1f814 <pdn_interface_pdn_id_get+0x114>
   1fbcc:	68e3      	ldr	r3, [r4, #12]
   1fbce:	68da      	ldr	r2, [r3, #12]
   1fbd0:	07d1      	lsls	r1, r2, #31
   1fbd2:	f53f af2d 	bmi.w	1fa30 <pdn_interface_pdn_id_get+0x330>
   1fbd6:	e61d      	b.n	1f814 <pdn_interface_pdn_id_get+0x114>
   1fbd8:	4630      	mov	r0, r6
   1fbda:	f006 fe03 	bl	267e4 <strlen>
   1fbde:	6a23      	ldr	r3, [r4, #32]
   1fbe0:	69da      	ldr	r2, [r3, #28]
   1fbe2:	4290      	cmp	r0, r2
   1fbe4:	f47f ae34 	bne.w	1f850 <pdn_interface_pdn_id_get+0x150>
   1fbe8:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fbec:	4429      	add	r1, r5
   1fbee:	3120      	adds	r1, #32
   1fbf0:	4602      	mov	r2, r0
   1fbf2:	4419      	add	r1, r3
   1fbf4:	4630      	mov	r0, r6
   1fbf6:	f006 fe23 	bl	26840 <strncmp>
   1fbfa:	2800      	cmp	r0, #0
   1fbfc:	f47f ae28 	bne.w	1f850 <pdn_interface_pdn_id_get+0x150>
   1fc00:	6a23      	ldr	r3, [r4, #32]
   1fc02:	68da      	ldr	r2, [r3, #12]
   1fc04:	07d1      	lsls	r1, r2, #31
   1fc06:	f57f ae23 	bpl.w	1f850 <pdn_interface_pdn_id_get+0x150>
   1fc0a:	2508      	movs	r5, #8
   1fc0c:	e710      	b.n	1fa30 <pdn_interface_pdn_id_get+0x330>
   1fc0e:	4630      	mov	r0, r6
   1fc10:	f006 fde8 	bl	267e4 <strlen>
   1fc14:	6863      	ldr	r3, [r4, #4]
   1fc16:	69da      	ldr	r2, [r3, #28]
   1fc18:	4290      	cmp	r0, r2
   1fc1a:	f47f adef 	bne.w	1f7fc <pdn_interface_pdn_id_get+0xfc>
   1fc1e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fc22:	4429      	add	r1, r5
   1fc24:	3120      	adds	r1, #32
   1fc26:	4602      	mov	r2, r0
   1fc28:	4419      	add	r1, r3
   1fc2a:	4630      	mov	r0, r6
   1fc2c:	f006 fe08 	bl	26840 <strncmp>
   1fc30:	2800      	cmp	r0, #0
   1fc32:	f47f ade3 	bne.w	1f7fc <pdn_interface_pdn_id_get+0xfc>
   1fc36:	6863      	ldr	r3, [r4, #4]
   1fc38:	68da      	ldr	r2, [r3, #12]
   1fc3a:	07d5      	lsls	r5, r2, #31
   1fc3c:	f57f adde 	bpl.w	1f7fc <pdn_interface_pdn_id_get+0xfc>
   1fc40:	2501      	movs	r5, #1
   1fc42:	e6f5      	b.n	1fa30 <pdn_interface_pdn_id_get+0x330>
   1fc44:	4608      	mov	r0, r1
   1fc46:	f006 fdcd 	bl	267e4 <strlen>
   1fc4a:	6823      	ldr	r3, [r4, #0]
   1fc4c:	69da      	ldr	r2, [r3, #28]
   1fc4e:	4290      	cmp	r0, r2
   1fc50:	f47f adce 	bne.w	1f7f0 <pdn_interface_pdn_id_get+0xf0>
   1fc54:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fc58:	4429      	add	r1, r5
   1fc5a:	3120      	adds	r1, #32
   1fc5c:	4602      	mov	r2, r0
   1fc5e:	4419      	add	r1, r3
   1fc60:	4630      	mov	r0, r6
   1fc62:	f006 fded 	bl	26840 <strncmp>
   1fc66:	4605      	mov	r5, r0
   1fc68:	2800      	cmp	r0, #0
   1fc6a:	f47f adc1 	bne.w	1f7f0 <pdn_interface_pdn_id_get+0xf0>
   1fc6e:	6823      	ldr	r3, [r4, #0]
   1fc70:	68da      	ldr	r2, [r3, #12]
   1fc72:	07d7      	lsls	r7, r2, #31
   1fc74:	f53f aedc 	bmi.w	1fa30 <pdn_interface_pdn_id_get+0x330>
   1fc78:	e5ba      	b.n	1f7f0 <pdn_interface_pdn_id_get+0xf0>
   1fc7a:	f04f 30ff 	mov.w	r0, #4294967295
   1fc7e:	4770      	bx	lr
   1fc80:	4811      	ldr	r0, [pc, #68]	; (1fcc8 <pdn_interface_pdn_id_get+0x5c8>)
   1fc82:	f006 fdaf 	bl	267e4 <strlen>
   1fc86:	490a      	ldr	r1, [pc, #40]	; (1fcb0 <pdn_interface_pdn_id_get+0x5b0>)
   1fc88:	4602      	mov	r2, r0
   1fc8a:	480f      	ldr	r0, [pc, #60]	; (1fcc8 <pdn_interface_pdn_id_get+0x5c8>)
   1fc8c:	f006 fdd8 	bl	26840 <strncmp>
   1fc90:	b930      	cbnz	r0, 1fca0 <pdn_interface_pdn_id_get+0x5a0>
   1fc92:	2008      	movs	r0, #8
   1fc94:	f7f6 ffd0 	bl	16c38 <bsd_os_errno_set>
   1fc98:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fc9c:	6858      	ldr	r0, [r3, #4]
   1fc9e:	e578      	b.n	1f792 <pdn_interface_pdn_id_get+0x92>
   1fca0:	2005      	movs	r0, #5
   1fca2:	f7f6 ffc9 	bl	16c38 <bsd_os_errno_set>
   1fca6:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fcaa:	6858      	ldr	r0, [r3, #4]
   1fcac:	e571      	b.n	1f792 <pdn_interface_pdn_id_get+0x92>
   1fcae:	bf00      	nop
   1fcb0:	20021ad8 	.word	0x20021ad8
   1fcb4:	0002f13c 	.word	0x0002f13c
   1fcb8:	0002f178 	.word	0x0002f178
   1fcbc:	20021bd8 	.word	0x20021bd8
   1fcc0:	0002f138 	.word	0x0002f138
   1fcc4:	0002f14c 	.word	0x0002f14c
   1fcc8:	0002f188 	.word	0x0002f188
   1fccc:	20021ad4 	.word	0x20021ad4

0001fcd0 <bsd_platform_error_handler>:
   1fcd0:	b508      	push	{r3, lr}
   1fcd2:	f7f1 fd87 	bl	117e4 <bsd_recoverable_error_handler>
   1fcd6:	bd08      	pop	{r3, pc}

0001fcd8 <bsd_init>:
   1fcd8:	b160      	cbz	r0, 1fcf4 <bsd_init+0x1c>
   1fcda:	b510      	push	{r4, lr}
   1fcdc:	4c07      	ldr	r4, [pc, #28]	; (1fcfc <bsd_init+0x24>)
   1fcde:	7823      	ldrb	r3, [r4, #0]
   1fce0:	b92b      	cbnz	r3, 1fcee <bsd_init+0x16>
   1fce2:	f000 f81b 	bl	1fd1c <bsd_platform_init>
   1fce6:	b908      	cbnz	r0, 1fcec <bsd_init+0x14>
   1fce8:	2301      	movs	r3, #1
   1fcea:	7023      	strb	r3, [r4, #0]
   1fcec:	bd10      	pop	{r4, pc}
   1fcee:	f04f 30ff 	mov.w	r0, #4294967295
   1fcf2:	bd10      	pop	{r4, pc}
   1fcf4:	f04f 30ff 	mov.w	r0, #4294967295
   1fcf8:	4770      	bx	lr
   1fcfa:	bf00      	nop
   1fcfc:	20026293 	.word	0x20026293

0001fd00 <unimplemented_method>:
   1fd00:	b40f      	push	{r0, r1, r2, r3}
   1fd02:	b508      	push	{r3, lr}
   1fd04:	202d      	movs	r0, #45	; 0x2d
   1fd06:	f7f6 ff97 	bl	16c38 <bsd_os_errno_set>
   1fd0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1fd0e:	f04f 30ff 	mov.w	r0, #4294967295
   1fd12:	b004      	add	sp, #16
   1fd14:	4770      	bx	lr
   1fd16:	bf00      	nop

0001fd18 <rpc_transport_ipc_fault_handler>:
   1fd18:	f7ff bfda 	b.w	1fcd0 <bsd_platform_error_handler>

0001fd1c <bsd_platform_init>:
   1fd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd1e:	f04f 0c00 	mov.w	ip, #0
   1fd22:	f247 0660 	movw	r6, #28768	; 0x7060
   1fd26:	f24b 0260 	movw	r2, #45152	; 0xb060
   1fd2a:	6843      	ldr	r3, [r0, #4]
   1fd2c:	4d3a      	ldr	r5, [pc, #232]	; (1fe18 <bsd_platform_init+0xfc>)
   1fd2e:	4607      	mov	r7, r0
   1fd30:	602b      	str	r3, [r5, #0]
   1fd32:	7801      	ldrb	r1, [r0, #0]
   1fd34:	2006      	movs	r0, #6
   1fd36:	4561      	cmp	r1, ip
   1fd38:	bf08      	it	eq
   1fd3a:	4632      	moveq	r2, r6
   1fd3c:	4413      	add	r3, r2
   1fd3e:	4c37      	ldr	r4, [pc, #220]	; (1fe1c <bsd_platform_init+0x100>)
   1fd40:	60ab      	str	r3, [r5, #8]
   1fd42:	68b9      	ldr	r1, [r7, #8]
   1fd44:	6063      	str	r3, [r4, #4]
   1fd46:	4b36      	ldr	r3, [pc, #216]	; (1fe20 <bsd_platform_init+0x104>)
   1fd48:	b093      	sub	sp, #76	; 0x4c
   1fd4a:	606a      	str	r2, [r5, #4]
   1fd4c:	f8a4 c000 	strh.w	ip, [r4]
   1fd50:	1a8a      	subs	r2, r1, r2
   1fd52:	60ea      	str	r2, [r5, #12]
   1fd54:	60a2      	str	r2, [r4, #8]
   1fd56:	81a0      	strh	r0, [r4, #12]
   1fd58:	6123      	str	r3, [r4, #16]
   1fd5a:	f001 f883 	bl	20e64 <nrf_mem_init>
   1fd5e:	2800      	cmp	r0, #0
   1fd60:	d156      	bne.n	1fe10 <bsd_platform_init+0xf4>
   1fd62:	4621      	mov	r1, r4
   1fd64:	a801      	add	r0, sp, #4
   1fd66:	f001 f8f1 	bl	20f4c <nrf_mem_register>
   1fd6a:	2800      	cmp	r0, #0
   1fd6c:	d150      	bne.n	1fe10 <bsd_platform_init+0xf4>
   1fd6e:	f7f7 f90f 	bl	16f90 <bsd_os_init>
   1fd72:	f7fd fbff 	bl	1d574 <rpc_framework_init>
   1fd76:	2800      	cmp	r0, #0
   1fd78:	d14a      	bne.n	1fe10 <bsd_platform_init+0xf4>
   1fd7a:	783a      	ldrb	r2, [r7, #0]
   1fd7c:	682b      	ldr	r3, [r5, #0]
   1fd7e:	bb32      	cbnz	r2, 1fdce <bsd_platform_init+0xb2>
   1fd80:	4606      	mov	r6, r0
   1fd82:	2220      	movs	r2, #32
   1fd84:	2408      	movs	r4, #8
   1fd86:	2500      	movs	r5, #0
   1fd88:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   1fd8c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   1fd90:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   1fd94:	4411      	add	r1, r2
   1fd96:	9302      	str	r3, [sp, #8]
   1fd98:	e9cd 6008 	strd	r6, r0, [sp, #32]
   1fd9c:	910c      	str	r1, [sp, #48]	; 0x30
   1fd9e:	9203      	str	r2, [sp, #12]
   1fda0:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1fda4:	9205      	str	r2, [sp, #20]
   1fda6:	9207      	str	r2, [sp, #28]
   1fda8:	eb0d 0004 	add.w	r0, sp, r4
   1fdac:	189a      	adds	r2, r3, r2
   1fdae:	3360      	adds	r3, #96	; 0x60
   1fdb0:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1fdb4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1fdb8:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   1fdbc:	940f      	str	r4, [sp, #60]	; 0x3c
   1fdbe:	9104      	str	r1, [sp, #16]
   1fdc0:	9206      	str	r2, [sp, #24]
   1fdc2:	930a      	str	r3, [sp, #40]	; 0x28
   1fdc4:	f7fa fb3a 	bl	1a43c <rpc_transport_ipc_init>
   1fdc8:	b128      	cbz	r0, 1fdd6 <bsd_platform_init+0xba>
   1fdca:	b013      	add	sp, #76	; 0x4c
   1fdcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fdce:	441e      	add	r6, r3
   1fdd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1fdd4:	e7d5      	b.n	1fd82 <bsd_platform_init+0x66>
   1fdd6:	f001 fda9 	bl	2192c <interface_init>
   1fdda:	b9c8      	cbnz	r0, 1fe10 <bsd_platform_init+0xf4>
   1fddc:	f7fe fcac 	bl	1e738 <at_interface_init>
   1fde0:	b9b0      	cbnz	r0, 1fe10 <bsd_platform_init+0xf4>
   1fde2:	f7fb fe4b 	bl	1ba7c <ip_interface_init>
   1fde6:	b998      	cbnz	r0, 1fe10 <bsd_platform_init+0xf4>
   1fde8:	f7fb f902 	bl	1aff0 <tls_interface_init>
   1fdec:	b980      	cbnz	r0, 1fe10 <bsd_platform_init+0xf4>
   1fdee:	f001 fab9 	bl	21364 <mfu_interface_init>
   1fdf2:	b968      	cbnz	r0, 1fe10 <bsd_platform_init+0xf4>
   1fdf4:	f7fe feee 	bl	1ebd4 <pdn_interface_init>
   1fdf8:	b950      	cbnz	r0, 1fe10 <bsd_platform_init+0xf4>
   1fdfa:	f7fe faf3 	bl	1e3e4 <gnss_interface_init>
   1fdfe:	b938      	cbnz	r0, 1fe10 <bsd_platform_init+0xf4>
   1fe00:	f7f9 fd5a 	bl	198b8 <logobj_interface_init>
   1fe04:	1b40      	subs	r0, r0, r5
   1fe06:	bf18      	it	ne
   1fe08:	2001      	movne	r0, #1
   1fe0a:	4240      	negs	r0, r0
   1fe0c:	b013      	add	sp, #76	; 0x4c
   1fe0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fe10:	f04f 30ff 	mov.w	r0, #4294967295
   1fe14:	b013      	add	sp, #76	; 0x4c
   1fe16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fe18:	20021c14 	.word	0x20021c14
   1fe1c:	20021c00 	.word	0x20021c00
   1fe20:	0002f2dc 	.word	0x0002f2dc

0001fe24 <bsd_platform_af_method_table_get>:
   1fe24:	2805      	cmp	r0, #5
   1fe26:	d02a      	beq.n	1fe7e <bsd_platform_af_method_table_get+0x5a>
   1fe28:	b508      	push	{r3, lr}
   1fe2a:	d914      	bls.n	1fe56 <bsd_platform_af_method_table_get+0x32>
   1fe2c:	280a      	cmp	r0, #10
   1fe2e:	d016      	beq.n	1fe5e <bsd_platform_af_method_table_get+0x3a>
   1fe30:	2866      	cmp	r0, #102	; 0x66
   1fe32:	d11f      	bne.n	1fe74 <bsd_platform_af_method_table_get+0x50>
   1fe34:	f240 2302 	movw	r3, #514	; 0x202
   1fe38:	429a      	cmp	r2, r3
   1fe3a:	d035      	beq.n	1fea8 <bsd_platform_af_method_table_get+0x84>
   1fe3c:	f240 2305 	movw	r3, #517	; 0x205
   1fe40:	429a      	cmp	r2, r3
   1fe42:	d035      	beq.n	1feb0 <bsd_platform_af_method_table_get+0x8c>
   1fe44:	f240 2301 	movw	r3, #513	; 0x201
   1fe48:	429a      	cmp	r2, r3
   1fe4a:	d02f      	beq.n	1feac <bsd_platform_af_method_table_get+0x88>
   1fe4c:	202b      	movs	r0, #43	; 0x2b
   1fe4e:	f7f6 fef3 	bl	16c38 <bsd_os_errno_set>
   1fe52:	2000      	movs	r0, #0
   1fe54:	bd08      	pop	{r3, pc}
   1fe56:	2801      	cmp	r0, #1
   1fe58:	d016      	beq.n	1fe88 <bsd_platform_af_method_table_get+0x64>
   1fe5a:	2802      	cmp	r0, #2
   1fe5c:	d10a      	bne.n	1fe74 <bsd_platform_af_method_table_get+0x50>
   1fe5e:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1fe62:	d21a      	bcs.n	1fe9a <bsd_platform_af_method_table_get+0x76>
   1fe64:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1fe68:	d21a      	bcs.n	1fea0 <bsd_platform_af_method_table_get+0x7c>
   1fe6a:	3a01      	subs	r2, #1
   1fe6c:	2a01      	cmp	r2, #1
   1fe6e:	d8ed      	bhi.n	1fe4c <bsd_platform_af_method_table_get+0x28>
   1fe70:	4810      	ldr	r0, [pc, #64]	; (1feb4 <bsd_platform_af_method_table_get+0x90>)
   1fe72:	bd08      	pop	{r3, pc}
   1fe74:	2016      	movs	r0, #22
   1fe76:	f7f6 fedf 	bl	16c38 <bsd_os_errno_set>
   1fe7a:	2000      	movs	r0, #0
   1fe7c:	bd08      	pop	{r3, pc}
   1fe7e:	2903      	cmp	r1, #3
   1fe80:	480d      	ldr	r0, [pc, #52]	; (1feb8 <bsd_platform_af_method_table_get+0x94>)
   1fe82:	bf18      	it	ne
   1fe84:	2000      	movne	r0, #0
   1fe86:	4770      	bx	lr
   1fe88:	f240 2303 	movw	r3, #515	; 0x203
   1fe8c:	429a      	cmp	r2, r3
   1fe8e:	d009      	beq.n	1fea4 <bsd_platform_af_method_table_get+0x80>
   1fe90:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1fe94:	d1da      	bne.n	1fe4c <bsd_platform_af_method_table_get+0x28>
   1fe96:	4809      	ldr	r0, [pc, #36]	; (1febc <bsd_platform_af_method_table_get+0x98>)
   1fe98:	bd08      	pop	{r3, pc}
   1fe9a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1fe9e:	d1d5      	bne.n	1fe4c <bsd_platform_af_method_table_get+0x28>
   1fea0:	4807      	ldr	r0, [pc, #28]	; (1fec0 <bsd_platform_af_method_table_get+0x9c>)
   1fea2:	bd08      	pop	{r3, pc}
   1fea4:	4807      	ldr	r0, [pc, #28]	; (1fec4 <bsd_platform_af_method_table_get+0xa0>)
   1fea6:	bd08      	pop	{r3, pc}
   1fea8:	4807      	ldr	r0, [pc, #28]	; (1fec8 <bsd_platform_af_method_table_get+0xa4>)
   1feaa:	bd08      	pop	{r3, pc}
   1feac:	4807      	ldr	r0, [pc, #28]	; (1fecc <bsd_platform_af_method_table_get+0xa8>)
   1feae:	bd08      	pop	{r3, pc}
   1feb0:	4807      	ldr	r0, [pc, #28]	; (1fed0 <bsd_platform_af_method_table_get+0xac>)
   1feb2:	bd08      	pop	{r3, pc}
   1feb4:	0002f1c4 	.word	0x0002f1c4
   1feb8:	0002f2b4 	.word	0x0002f2b4
   1febc:	0002f264 	.word	0x0002f264
   1fec0:	0002f1ec 	.word	0x0002f1ec
   1fec4:	0002f214 	.word	0x0002f214
   1fec8:	0002f23c 	.word	0x0002f23c
   1fecc:	0002f19c 	.word	0x0002f19c
   1fed0:	0002f28c 	.word	0x0002f28c

0001fed4 <bsd_platform_fd_method_table_get>:
   1fed4:	b538      	push	{r3, r4, r5, lr}
   1fed6:	4605      	mov	r5, r0
   1fed8:	f001 fe5a 	bl	21b90 <interface_socket_from_handle_get>
   1fedc:	4604      	mov	r4, r0
   1fede:	b960      	cbnz	r0, 1fefa <bsd_platform_fd_method_table_get+0x26>
   1fee0:	4b2c      	ldr	r3, [pc, #176]	; (1ff94 <bsd_platform_fd_method_table_get+0xc0>)
   1fee2:	429d      	cmp	r5, r3
   1fee4:	d02f      	beq.n	1ff46 <bsd_platform_fd_method_table_get+0x72>
   1fee6:	0c2b      	lsrs	r3, r5, #16
   1fee8:	4a2b      	ldr	r2, [pc, #172]	; (1ff98 <bsd_platform_fd_method_table_get+0xc4>)
   1feea:	041b      	lsls	r3, r3, #16
   1feec:	4293      	cmp	r3, r2
   1feee:	d03d      	beq.n	1ff6c <bsd_platform_fd_method_table_get+0x98>
   1fef0:	4b2a      	ldr	r3, [pc, #168]	; (1ff9c <bsd_platform_fd_method_table_get+0xc8>)
   1fef2:	429d      	cmp	r5, r3
   1fef4:	d149      	bne.n	1ff8a <bsd_platform_fd_method_table_get+0xb6>
   1fef6:	482a      	ldr	r0, [pc, #168]	; (1ffa0 <bsd_platform_fd_method_table_get+0xcc>)
   1fef8:	bd38      	pop	{r3, r4, r5, pc}
   1fefa:	68c3      	ldr	r3, [r0, #12]
   1fefc:	6942      	ldr	r2, [r0, #20]
   1fefe:	2b05      	cmp	r3, #5
   1ff00:	d036      	beq.n	1ff70 <bsd_platform_fd_method_table_get+0x9c>
   1ff02:	d911      	bls.n	1ff28 <bsd_platform_fd_method_table_get+0x54>
   1ff04:	2b0a      	cmp	r3, #10
   1ff06:	d013      	beq.n	1ff30 <bsd_platform_fd_method_table_get+0x5c>
   1ff08:	2b66      	cmp	r3, #102	; 0x66
   1ff0a:	d11e      	bne.n	1ff4a <bsd_platform_fd_method_table_get+0x76>
   1ff0c:	f240 2302 	movw	r3, #514	; 0x202
   1ff10:	429a      	cmp	r2, r3
   1ff12:	d02b      	beq.n	1ff6c <bsd_platform_fd_method_table_get+0x98>
   1ff14:	f240 2305 	movw	r3, #517	; 0x205
   1ff18:	429a      	cmp	r2, r3
   1ff1a:	d02f      	beq.n	1ff7c <bsd_platform_fd_method_table_get+0xa8>
   1ff1c:	f240 2301 	movw	r3, #513	; 0x201
   1ff20:	429a      	cmp	r2, r3
   1ff22:	d11e      	bne.n	1ff62 <bsd_platform_fd_method_table_get+0x8e>
   1ff24:	481f      	ldr	r0, [pc, #124]	; (1ffa4 <bsd_platform_fd_method_table_get+0xd0>)
   1ff26:	bd38      	pop	{r3, r4, r5, pc}
   1ff28:	2b01      	cmp	r3, #1
   1ff2a:	d013      	beq.n	1ff54 <bsd_platform_fd_method_table_get+0x80>
   1ff2c:	2b02      	cmp	r3, #2
   1ff2e:	d10c      	bne.n	1ff4a <bsd_platform_fd_method_table_get+0x76>
   1ff30:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1ff34:	d224      	bcs.n	1ff80 <bsd_platform_fd_method_table_get+0xac>
   1ff36:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1ff3a:	d224      	bcs.n	1ff86 <bsd_platform_fd_method_table_get+0xb2>
   1ff3c:	3a01      	subs	r2, #1
   1ff3e:	2a01      	cmp	r2, #1
   1ff40:	d80f      	bhi.n	1ff62 <bsd_platform_fd_method_table_get+0x8e>
   1ff42:	4819      	ldr	r0, [pc, #100]	; (1ffa8 <bsd_platform_fd_method_table_get+0xd4>)
   1ff44:	bd38      	pop	{r3, r4, r5, pc}
   1ff46:	4819      	ldr	r0, [pc, #100]	; (1ffac <bsd_platform_fd_method_table_get+0xd8>)
   1ff48:	bd38      	pop	{r3, r4, r5, pc}
   1ff4a:	2016      	movs	r0, #22
   1ff4c:	f7f6 fe74 	bl	16c38 <bsd_os_errno_set>
   1ff50:	2000      	movs	r0, #0
   1ff52:	bd38      	pop	{r3, r4, r5, pc}
   1ff54:	f240 2303 	movw	r3, #515	; 0x203
   1ff58:	429a      	cmp	r2, r3
   1ff5a:	d0f4      	beq.n	1ff46 <bsd_platform_fd_method_table_get+0x72>
   1ff5c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1ff60:	d0c9      	beq.n	1fef6 <bsd_platform_fd_method_table_get+0x22>
   1ff62:	202b      	movs	r0, #43	; 0x2b
   1ff64:	f7f6 fe68 	bl	16c38 <bsd_os_errno_set>
   1ff68:	2000      	movs	r0, #0
   1ff6a:	bd38      	pop	{r3, r4, r5, pc}
   1ff6c:	4810      	ldr	r0, [pc, #64]	; (1ffb0 <bsd_platform_fd_method_table_get+0xdc>)
   1ff6e:	bd38      	pop	{r3, r4, r5, pc}
   1ff70:	6903      	ldr	r3, [r0, #16]
   1ff72:	4810      	ldr	r0, [pc, #64]	; (1ffb4 <bsd_platform_fd_method_table_get+0xe0>)
   1ff74:	2b03      	cmp	r3, #3
   1ff76:	bf18      	it	ne
   1ff78:	2000      	movne	r0, #0
   1ff7a:	bd38      	pop	{r3, r4, r5, pc}
   1ff7c:	480e      	ldr	r0, [pc, #56]	; (1ffb8 <bsd_platform_fd_method_table_get+0xe4>)
   1ff7e:	bd38      	pop	{r3, r4, r5, pc}
   1ff80:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1ff84:	d1ed      	bne.n	1ff62 <bsd_platform_fd_method_table_get+0x8e>
   1ff86:	480d      	ldr	r0, [pc, #52]	; (1ffbc <bsd_platform_fd_method_table_get+0xe8>)
   1ff88:	bd38      	pop	{r3, r4, r5, pc}
   1ff8a:	2009      	movs	r0, #9
   1ff8c:	f7f6 fe54 	bl	16c38 <bsd_os_errno_set>
   1ff90:	4620      	mov	r0, r4
   1ff92:	bd38      	pop	{r3, r4, r5, pc}
   1ff94:	49765432 	.word	0x49765432
   1ff98:	789a0000 	.word	0x789a0000
   1ff9c:	49765443 	.word	0x49765443
   1ffa0:	0002f264 	.word	0x0002f264
   1ffa4:	0002f19c 	.word	0x0002f19c
   1ffa8:	0002f1c4 	.word	0x0002f1c4
   1ffac:	0002f214 	.word	0x0002f214
   1ffb0:	0002f23c 	.word	0x0002f23c
   1ffb4:	0002f2b4 	.word	0x0002f2b4
   1ffb8:	0002f28c 	.word	0x0002f28c
   1ffbc:	0002f1ec 	.word	0x0002f1ec

0001ffc0 <bsd_platform_getaddrinfo>:
   1ffc0:	f7fc bec6 	b.w	1cd50 <ip_interface_getaddrinfo>

0001ffc4 <bsd_platform_freeaddrinfo>:
   1ffc4:	f7fc bfc2 	b.w	1cf4c <ip_interface_freeaddrinfo>

0001ffc8 <bsd_platform_poll>:
   1ffc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ffcc:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   1ffd0:	b083      	sub	sp, #12
   1ffd2:	9200      	str	r2, [sp, #0]
   1ffd4:	2800      	cmp	r0, #0
   1ffd6:	d048      	beq.n	2006a <bsd_platform_poll+0xa2>
   1ffd8:	1e4b      	subs	r3, r1, #1
   1ffda:	2b08      	cmp	r3, #8
   1ffdc:	d845      	bhi.n	2006a <bsd_platform_poll+0xa2>
   1ffde:	4680      	mov	r8, r0
   1ffe0:	4605      	mov	r5, r0
   1ffe2:	2400      	movs	r4, #0
   1ffe4:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   1ffe8:	88ab      	ldrh	r3, [r5, #4]
   1ffea:	6828      	ldr	r0, [r5, #0]
   1ffec:	f003 0303 	and.w	r3, r3, #3
   1fff0:	a901      	add	r1, sp, #4
   1fff2:	f043 061c 	orr.w	r6, r3, #28
   1fff6:	f001 fdd9 	bl	21bac <interface_socket_event_get>
   1fffa:	9b01      	ldr	r3, [sp, #4]
   1fffc:	3508      	adds	r5, #8
   1fffe:	4033      	ands	r3, r6
   20000:	f825 3c02 	strh.w	r3, [r5, #-2]
   20004:	b103      	cbz	r3, 20008 <bsd_platform_poll+0x40>
   20006:	3401      	adds	r4, #1
   20008:	42af      	cmp	r7, r5
   2000a:	d1ed      	bne.n	1ffe8 <bsd_platform_poll+0x20>
   2000c:	bb9c      	cbnz	r4, 20076 <bsd_platform_poll+0xae>
   2000e:	4669      	mov	r1, sp
   20010:	4640      	mov	r0, r8
   20012:	f7f6 fd59 	bl	16ac8 <bsd_os_timedwait>
   20016:	4607      	mov	r7, r0
   20018:	b108      	cbz	r0, 2001e <bsd_platform_poll+0x56>
   2001a:	283c      	cmp	r0, #60	; 0x3c
   2001c:	d11d      	bne.n	2005a <bsd_platform_poll+0x92>
   2001e:	46c1      	mov	r9, r8
   20020:	2600      	movs	r6, #0
   20022:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   20026:	f8d9 0000 	ldr.w	r0, [r9]
   2002a:	f003 0303 	and.w	r3, r3, #3
   2002e:	a901      	add	r1, sp, #4
   20030:	f043 041c 	orr.w	r4, r3, #28
   20034:	f001 fdba 	bl	21bac <interface_socket_event_get>
   20038:	9b01      	ldr	r3, [sp, #4]
   2003a:	f109 0908 	add.w	r9, r9, #8
   2003e:	4023      	ands	r3, r4
   20040:	f829 3c02 	strh.w	r3, [r9, #-2]
   20044:	b103      	cbz	r3, 20048 <bsd_platform_poll+0x80>
   20046:	3601      	adds	r6, #1
   20048:	454d      	cmp	r5, r9
   2004a:	d1ea      	bne.n	20022 <bsd_platform_poll+0x5a>
   2004c:	b90e      	cbnz	r6, 20052 <bsd_platform_poll+0x8a>
   2004e:	2f00      	cmp	r7, #0
   20050:	d0dd      	beq.n	2000e <bsd_platform_poll+0x46>
   20052:	4630      	mov	r0, r6
   20054:	b003      	add	sp, #12
   20056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2005a:	2023      	movs	r0, #35	; 0x23
   2005c:	f7f6 fdec 	bl	16c38 <bsd_os_errno_set>
   20060:	f04f 30ff 	mov.w	r0, #4294967295
   20064:	b003      	add	sp, #12
   20066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2006a:	2016      	movs	r0, #22
   2006c:	f7f6 fde4 	bl	16c38 <bsd_os_errno_set>
   20070:	f04f 30ff 	mov.w	r0, #4294967295
   20074:	e7ee      	b.n	20054 <bsd_platform_poll+0x8c>
   20076:	4620      	mov	r0, r4
   20078:	e7ec      	b.n	20054 <bsd_platform_poll+0x8c>
   2007a:	bf00      	nop

0002007c <bsd_platform_fcntl>:
   2007c:	b508      	push	{r3, lr}
   2007e:	4b06      	ldr	r3, [pc, #24]	; (20098 <bsd_platform_fcntl+0x1c>)
   20080:	4298      	cmp	r0, r3
   20082:	d003      	beq.n	2008c <bsd_platform_fcntl+0x10>
   20084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20088:	f001 be3a 	b.w	21d00 <interface_socket_fcntl>
   2008c:	202d      	movs	r0, #45	; 0x2d
   2008e:	f7f6 fdd3 	bl	16c38 <bsd_os_errno_set>
   20092:	f04f 30ff 	mov.w	r0, #4294967295
   20096:	bd08      	pop	{r3, pc}
   20098:	49765432 	.word	0x49765432

0002009c <linked_list_init>:
   2009c:	b128      	cbz	r0, 200aa <linked_list_init+0xe>
   2009e:	2300      	movs	r3, #0
   200a0:	6003      	str	r3, [r0, #0]
   200a2:	e9c0 3301 	strd	r3, r3, [r0, #4]
   200a6:	4618      	mov	r0, r3
   200a8:	4770      	bx	lr
   200aa:	2007      	movs	r0, #7
   200ac:	4770      	bx	lr
   200ae:	bf00      	nop

000200b0 <linked_list_push>:
   200b0:	6802      	ldr	r2, [r0, #0]
   200b2:	4603      	mov	r3, r0
   200b4:	3201      	adds	r2, #1
   200b6:	d00e      	beq.n	200d6 <linked_list_push+0x26>
   200b8:	2200      	movs	r2, #0
   200ba:	600a      	str	r2, [r1, #0]
   200bc:	6802      	ldr	r2, [r0, #0]
   200be:	b13a      	cbz	r2, 200d0 <linked_list_push+0x20>
   200c0:	6882      	ldr	r2, [r0, #8]
   200c2:	6011      	str	r1, [r2, #0]
   200c4:	6081      	str	r1, [r0, #8]
   200c6:	681a      	ldr	r2, [r3, #0]
   200c8:	2000      	movs	r0, #0
   200ca:	3201      	adds	r2, #1
   200cc:	601a      	str	r2, [r3, #0]
   200ce:	4770      	bx	lr
   200d0:	e9c0 1101 	strd	r1, r1, [r0, #4]
   200d4:	e7f7      	b.n	200c6 <linked_list_push+0x16>
   200d6:	2004      	movs	r0, #4
   200d8:	4770      	bx	lr
   200da:	bf00      	nop

000200dc <linked_list_pop>:
   200dc:	4603      	mov	r3, r0
   200de:	6800      	ldr	r0, [r0, #0]
   200e0:	b128      	cbz	r0, 200ee <linked_list_pop+0x12>
   200e2:	6858      	ldr	r0, [r3, #4]
   200e4:	681a      	ldr	r2, [r3, #0]
   200e6:	6801      	ldr	r1, [r0, #0]
   200e8:	3a01      	subs	r2, #1
   200ea:	6059      	str	r1, [r3, #4]
   200ec:	601a      	str	r2, [r3, #0]
   200ee:	4770      	bx	lr

000200f0 <linked_list_peek>:
   200f0:	6803      	ldr	r3, [r0, #0]
   200f2:	b10b      	cbz	r3, 200f8 <linked_list_peek+0x8>
   200f4:	6840      	ldr	r0, [r0, #4]
   200f6:	4770      	bx	lr
   200f8:	4618      	mov	r0, r3
   200fa:	4770      	bx	lr

000200fc <linked_list_size_get>:
   200fc:	6800      	ldr	r0, [r0, #0]
   200fe:	4770      	bx	lr

00020100 <linked_list_get_next>:
   20100:	6800      	ldr	r0, [r0, #0]
   20102:	4770      	bx	lr

00020104 <nrf_socket>:
   20104:	b570      	push	{r4, r5, r6, lr}
   20106:	4604      	mov	r4, r0
   20108:	460d      	mov	r5, r1
   2010a:	4616      	mov	r6, r2
   2010c:	f7ff fe8a 	bl	1fe24 <bsd_platform_af_method_table_get>
   20110:	b130      	cbz	r0, 20120 <nrf_socket+0x1c>
   20112:	6803      	ldr	r3, [r0, #0]
   20114:	4632      	mov	r2, r6
   20116:	4629      	mov	r1, r5
   20118:	4620      	mov	r0, r4
   2011a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2011e:	4718      	bx	r3
   20120:	f04f 30ff 	mov.w	r0, #4294967295
   20124:	bd70      	pop	{r4, r5, r6, pc}
   20126:	bf00      	nop

00020128 <nrf_close>:
   20128:	b510      	push	{r4, lr}
   2012a:	4604      	mov	r4, r0
   2012c:	f7ff fed2 	bl	1fed4 <bsd_platform_fd_method_table_get>
   20130:	b120      	cbz	r0, 2013c <nrf_close+0x14>
   20132:	6843      	ldr	r3, [r0, #4]
   20134:	4620      	mov	r0, r4
   20136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2013a:	4718      	bx	r3
   2013c:	f04f 30ff 	mov.w	r0, #4294967295
   20140:	bd10      	pop	{r4, pc}
   20142:	bf00      	nop

00020144 <nrf_sendto>:
   20144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20148:	460d      	mov	r5, r1
   2014a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2014e:	4616      	mov	r6, r2
   20150:	461f      	mov	r7, r3
   20152:	4604      	mov	r4, r0
   20154:	f7ff febe 	bl	1fed4 <bsd_platform_fd_method_table_get>
   20158:	b158      	cbz	r0, 20172 <nrf_sendto+0x2e>
   2015a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2015e:	f8d0 e008 	ldr.w	lr, [r0, #8]
   20162:	463b      	mov	r3, r7
   20164:	4632      	mov	r2, r6
   20166:	4629      	mov	r1, r5
   20168:	4620      	mov	r0, r4
   2016a:	46f4      	mov	ip, lr
   2016c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20170:	4760      	bx	ip
   20172:	f04f 30ff 	mov.w	r0, #4294967295
   20176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2017a:	bf00      	nop

0002017c <nrf_recvfrom>:
   2017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20180:	460d      	mov	r5, r1
   20182:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   20186:	4616      	mov	r6, r2
   20188:	461f      	mov	r7, r3
   2018a:	4604      	mov	r4, r0
   2018c:	f7ff fea2 	bl	1fed4 <bsd_platform_fd_method_table_get>
   20190:	b158      	cbz	r0, 201aa <nrf_recvfrom+0x2e>
   20192:	e9cd 8908 	strd	r8, r9, [sp, #32]
   20196:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2019a:	463b      	mov	r3, r7
   2019c:	4632      	mov	r2, r6
   2019e:	4629      	mov	r1, r5
   201a0:	4620      	mov	r0, r4
   201a2:	46f4      	mov	ip, lr
   201a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   201a8:	4760      	bx	ip
   201aa:	f04f 30ff 	mov.w	r0, #4294967295
   201ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   201b2:	bf00      	nop

000201b4 <nrf_connect>:
   201b4:	b570      	push	{r4, r5, r6, lr}
   201b6:	460d      	mov	r5, r1
   201b8:	4616      	mov	r6, r2
   201ba:	4604      	mov	r4, r0
   201bc:	f7ff fe8a 	bl	1fed4 <bsd_platform_fd_method_table_get>
   201c0:	b130      	cbz	r0, 201d0 <nrf_connect+0x1c>
   201c2:	6943      	ldr	r3, [r0, #20]
   201c4:	4632      	mov	r2, r6
   201c6:	4629      	mov	r1, r5
   201c8:	4620      	mov	r0, r4
   201ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   201ce:	4718      	bx	r3
   201d0:	f04f 30ff 	mov.w	r0, #4294967295
   201d4:	bd70      	pop	{r4, r5, r6, pc}
   201d6:	bf00      	nop

000201d8 <nrf_listen>:
   201d8:	b570      	push	{r4, r5, r6, lr}
   201da:	460d      	mov	r5, r1
   201dc:	4604      	mov	r4, r0
   201de:	f7ff fe79 	bl	1fed4 <bsd_platform_fd_method_table_get>
   201e2:	b128      	cbz	r0, 201f0 <nrf_listen+0x18>
   201e4:	6983      	ldr	r3, [r0, #24]
   201e6:	4629      	mov	r1, r5
   201e8:	4620      	mov	r0, r4
   201ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   201ee:	4718      	bx	r3
   201f0:	f04f 30ff 	mov.w	r0, #4294967295
   201f4:	bd70      	pop	{r4, r5, r6, pc}
   201f6:	bf00      	nop

000201f8 <nrf_accept>:
   201f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   201fc:	460d      	mov	r5, r1
   201fe:	4616      	mov	r6, r2
   20200:	4604      	mov	r4, r0
   20202:	f7ff fe67 	bl	1fed4 <bsd_platform_fd_method_table_get>
   20206:	b140      	cbz	r0, 2021a <nrf_accept+0x22>
   20208:	69c7      	ldr	r7, [r0, #28]
   2020a:	4632      	mov	r2, r6
   2020c:	4629      	mov	r1, r5
   2020e:	4620      	mov	r0, r4
   20210:	46bc      	mov	ip, r7
   20212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20216:	2300      	movs	r3, #0
   20218:	4760      	bx	ip
   2021a:	f04f 30ff 	mov.w	r0, #4294967295
   2021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20222:	bf00      	nop

00020224 <nrf_bind>:
   20224:	b570      	push	{r4, r5, r6, lr}
   20226:	460d      	mov	r5, r1
   20228:	4616      	mov	r6, r2
   2022a:	4604      	mov	r4, r0
   2022c:	f7ff fe52 	bl	1fed4 <bsd_platform_fd_method_table_get>
   20230:	b130      	cbz	r0, 20240 <nrf_bind+0x1c>
   20232:	6903      	ldr	r3, [r0, #16]
   20234:	4632      	mov	r2, r6
   20236:	4629      	mov	r1, r5
   20238:	4620      	mov	r0, r4
   2023a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2023e:	4718      	bx	r3
   20240:	f04f 30ff 	mov.w	r0, #4294967295
   20244:	bd70      	pop	{r4, r5, r6, pc}
   20246:	bf00      	nop

00020248 <nrf_setsockopt>:
   20248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2024c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20250:	460d      	mov	r5, r1
   20252:	4616      	mov	r6, r2
   20254:	461f      	mov	r7, r3
   20256:	4604      	mov	r4, r0
   20258:	f7ff fe3c 	bl	1fed4 <bsd_platform_fd_method_table_get>
   2025c:	b158      	cbz	r0, 20276 <nrf_setsockopt+0x2e>
   2025e:	f8cd 8018 	str.w	r8, [sp, #24]
   20262:	f8d0 e020 	ldr.w	lr, [r0, #32]
   20266:	463b      	mov	r3, r7
   20268:	4632      	mov	r2, r6
   2026a:	4629      	mov	r1, r5
   2026c:	4620      	mov	r0, r4
   2026e:	46f4      	mov	ip, lr
   20270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20274:	4760      	bx	ip
   20276:	f04f 30ff 	mov.w	r0, #4294967295
   2027a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2027e:	bf00      	nop

00020280 <nrf_getsockopt>:
   20280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20284:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20288:	460d      	mov	r5, r1
   2028a:	4616      	mov	r6, r2
   2028c:	461f      	mov	r7, r3
   2028e:	4604      	mov	r4, r0
   20290:	f7ff fe20 	bl	1fed4 <bsd_platform_fd_method_table_get>
   20294:	b158      	cbz	r0, 202ae <nrf_getsockopt+0x2e>
   20296:	f8cd 8018 	str.w	r8, [sp, #24]
   2029a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   2029e:	463b      	mov	r3, r7
   202a0:	4632      	mov	r2, r6
   202a2:	4629      	mov	r1, r5
   202a4:	4620      	mov	r0, r4
   202a6:	46f4      	mov	ip, lr
   202a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   202ac:	4760      	bx	ip
   202ae:	f04f 30ff 	mov.w	r0, #4294967295
   202b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202b6:	bf00      	nop

000202b8 <nrf_getaddrinfo>:
   202b8:	f7ff be82 	b.w	1ffc0 <bsd_platform_getaddrinfo>

000202bc <nrf_freeaddrinfo>:
   202bc:	f7ff be82 	b.w	1ffc4 <bsd_platform_freeaddrinfo>

000202c0 <nrf_poll>:
   202c0:	f7ff be82 	b.w	1ffc8 <bsd_platform_poll>

000202c4 <nrf_fcntl>:
   202c4:	f7ff beda 	b.w	2007c <bsd_platform_fcntl>

000202c8 <rpc_gnss_serialize_utc>:
   202c8:	4603      	mov	r3, r0
   202ca:	b1d8      	cbz	r0, 20304 <rpc_gnss_serialize_utc+0x3c>
   202cc:	b1d1      	cbz	r1, 20304 <rpc_gnss_serialize_utc+0x3c>
   202ce:	2000      	movs	r0, #0
   202d0:	2201      	movs	r2, #1
   202d2:	7048      	strb	r0, [r1, #1]
   202d4:	700a      	strb	r2, [r1, #0]
   202d6:	685a      	ldr	r2, [r3, #4]
   202d8:	2010      	movs	r0, #16
   202da:	f8c1 2006 	str.w	r2, [r1, #6]
   202de:	681a      	ldr	r2, [r3, #0]
   202e0:	f8c1 2002 	str.w	r2, [r1, #2]
   202e4:	f993 200a 	ldrsb.w	r2, [r3, #10]
   202e8:	730a      	strb	r2, [r1, #12]
   202ea:	f993 200d 	ldrsb.w	r2, [r3, #13]
   202ee:	73ca      	strb	r2, [r1, #15]
   202f0:	f993 200c 	ldrsb.w	r2, [r3, #12]
   202f4:	738a      	strb	r2, [r1, #14]
   202f6:	7a1a      	ldrb	r2, [r3, #8]
   202f8:	728a      	strb	r2, [r1, #10]
   202fa:	7ada      	ldrb	r2, [r3, #11]
   202fc:	734a      	strb	r2, [r1, #13]
   202fe:	7a5b      	ldrb	r3, [r3, #9]
   20300:	72cb      	strb	r3, [r1, #11]
   20302:	4770      	bx	lr
   20304:	f04f 30ff 	mov.w	r0, #4294967295
   20308:	4770      	bx	lr
   2030a:	bf00      	nop

0002030c <rpc_gnss_serialize_ephe>:
   2030c:	4603      	mov	r3, r0
   2030e:	2800      	cmp	r0, #0
   20310:	d04b      	beq.n	203aa <rpc_gnss_serialize_ephe+0x9e>
   20312:	2900      	cmp	r1, #0
   20314:	d049      	beq.n	203aa <rpc_gnss_serialize_ephe+0x9e>
   20316:	2000      	movs	r0, #0
   20318:	2202      	movs	r2, #2
   2031a:	7048      	strb	r0, [r1, #1]
   2031c:	700a      	strb	r2, [r1, #0]
   2031e:	68da      	ldr	r2, [r3, #12]
   20320:	2040      	movs	r0, #64	; 0x40
   20322:	f8c1 200b 	str.w	r2, [r1, #11]
   20326:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2032a:	f8a1 2009 	strh.w	r2, [r1, #9]
   2032e:	f993 2006 	ldrsb.w	r2, [r3, #6]
   20332:	720a      	strb	r2, [r1, #8]
   20334:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   20338:	878a      	strh	r2, [r1, #60]	; 0x3c
   2033a:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   2033e:	86ca      	strh	r2, [r1, #54]	; 0x36
   20340:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   20344:	874a      	strh	r2, [r1, #58]	; 0x3a
   20346:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   2034a:	868a      	strh	r2, [r1, #52]	; 0x34
   2034c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   20350:	87ca      	strh	r2, [r1, #62]	; 0x3e
   20352:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   20356:	870a      	strh	r2, [r1, #56]	; 0x38
   20358:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2035c:	830a      	strh	r2, [r1, #24]
   2035e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   20360:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   20364:	7c9a      	ldrb	r2, [r3, #18]
   20366:	744a      	strb	r2, [r1, #17]
   20368:	785a      	ldrb	r2, [r3, #1]
   2036a:	70ca      	strb	r2, [r1, #3]
   2036c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2036e:	62ca      	str	r2, [r1, #44]	; 0x2c
   20370:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   20374:	84ca      	strh	r2, [r1, #38]	; 0x26
   20376:	885a      	ldrh	r2, [r3, #2]
   20378:	808a      	strh	r2, [r1, #4]
   2037a:	6a1a      	ldr	r2, [r3, #32]
   2037c:	f8c1 201a 	str.w	r2, [r1, #26]
   20380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20382:	630a      	str	r2, [r1, #48]	; 0x30
   20384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   20386:	f8c1 201e 	str.w	r2, [r1, #30]
   2038a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2038c:	628a      	str	r2, [r1, #40]	; 0x28
   2038e:	781a      	ldrb	r2, [r3, #0]
   20390:	708a      	strb	r2, [r1, #2]
   20392:	f993 2010 	ldrsb.w	r2, [r3, #16]
   20396:	73ca      	strb	r2, [r1, #15]
   20398:	889a      	ldrh	r2, [r3, #4]
   2039a:	80ca      	strh	r2, [r1, #6]
   2039c:	8a9a      	ldrh	r2, [r3, #20]
   2039e:	824a      	strh	r2, [r1, #18]
   203a0:	7c5a      	ldrb	r2, [r3, #17]
   203a2:	740a      	strb	r2, [r1, #16]
   203a4:	699b      	ldr	r3, [r3, #24]
   203a6:	614b      	str	r3, [r1, #20]
   203a8:	4770      	bx	lr
   203aa:	f04f 30ff 	mov.w	r0, #4294967295
   203ae:	4770      	bx	lr

000203b0 <rpc_gnss_serialize_alm>:
   203b0:	4603      	mov	r3, r0
   203b2:	b360      	cbz	r0, 2040e <rpc_gnss_serialize_alm+0x5e>
   203b4:	b359      	cbz	r1, 2040e <rpc_gnss_serialize_alm+0x5e>
   203b6:	2000      	movs	r0, #0
   203b8:	2203      	movs	r2, #3
   203ba:	7048      	strb	r0, [r1, #1]
   203bc:	700a      	strb	r2, [r1, #0]
   203be:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   203c2:	2021      	movs	r0, #33	; 0x21
   203c4:	f8a1 201d 	strh.w	r2, [r1, #29]
   203c8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   203cc:	f8a1 201f 	strh.w	r2, [r1, #31]
   203d0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   203d4:	810a      	strh	r2, [r1, #8]
   203d6:	889a      	ldrh	r2, [r3, #4]
   203d8:	80ca      	strh	r2, [r1, #6]
   203da:	78da      	ldrb	r2, [r3, #3]
   203dc:	714a      	strb	r2, [r1, #5]
   203de:	699a      	ldr	r2, [r3, #24]
   203e0:	f8c1 2019 	str.w	r2, [r1, #25]
   203e4:	691a      	ldr	r2, [r3, #16]
   203e6:	f8c1 2011 	str.w	r2, [r1, #17]
   203ea:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   203ee:	814a      	strh	r2, [r1, #10]
   203f0:	68da      	ldr	r2, [r3, #12]
   203f2:	f8c1 200d 	str.w	r2, [r1, #13]
   203f6:	7a9a      	ldrb	r2, [r3, #10]
   203f8:	730a      	strb	r2, [r1, #12]
   203fa:	781a      	ldrb	r2, [r3, #0]
   203fc:	708a      	strb	r2, [r1, #2]
   203fe:	789a      	ldrb	r2, [r3, #2]
   20400:	710a      	strb	r2, [r1, #4]
   20402:	695a      	ldr	r2, [r3, #20]
   20404:	f8c1 2015 	str.w	r2, [r1, #21]
   20408:	785b      	ldrb	r3, [r3, #1]
   2040a:	70cb      	strb	r3, [r1, #3]
   2040c:	4770      	bx	lr
   2040e:	f04f 30ff 	mov.w	r0, #4294967295
   20412:	4770      	bx	lr

00020414 <rpc_gnss_serialize_klob>:
   20414:	4603      	mov	r3, r0
   20416:	b1f0      	cbz	r0, 20456 <rpc_gnss_serialize_klob+0x42>
   20418:	b1e9      	cbz	r1, 20456 <rpc_gnss_serialize_klob+0x42>
   2041a:	2000      	movs	r0, #0
   2041c:	2204      	movs	r2, #4
   2041e:	7048      	strb	r0, [r1, #1]
   20420:	700a      	strb	r2, [r1, #0]
   20422:	f993 2000 	ldrsb.w	r2, [r3]
   20426:	200a      	movs	r0, #10
   20428:	708a      	strb	r2, [r1, #2]
   2042a:	f993 2001 	ldrsb.w	r2, [r3, #1]
   2042e:	70ca      	strb	r2, [r1, #3]
   20430:	f993 2002 	ldrsb.w	r2, [r3, #2]
   20434:	710a      	strb	r2, [r1, #4]
   20436:	f993 2003 	ldrsb.w	r2, [r3, #3]
   2043a:	714a      	strb	r2, [r1, #5]
   2043c:	f993 2004 	ldrsb.w	r2, [r3, #4]
   20440:	718a      	strb	r2, [r1, #6]
   20442:	f993 2005 	ldrsb.w	r2, [r3, #5]
   20446:	71ca      	strb	r2, [r1, #7]
   20448:	f993 2006 	ldrsb.w	r2, [r3, #6]
   2044c:	720a      	strb	r2, [r1, #8]
   2044e:	f993 3007 	ldrsb.w	r3, [r3, #7]
   20452:	724b      	strb	r3, [r1, #9]
   20454:	4770      	bx	lr
   20456:	f04f 30ff 	mov.w	r0, #4294967295
   2045a:	4770      	bx	lr

0002045c <rpc_gnss_serialize_nequick>:
   2045c:	4603      	mov	r3, r0
   2045e:	b198      	cbz	r0, 20488 <rpc_gnss_serialize_nequick+0x2c>
   20460:	b191      	cbz	r1, 20488 <rpc_gnss_serialize_nequick+0x2c>
   20462:	2000      	movs	r0, #0
   20464:	2205      	movs	r2, #5
   20466:	7048      	strb	r0, [r1, #1]
   20468:	700a      	strb	r2, [r1, #0]
   2046a:	f9b3 2000 	ldrsh.w	r2, [r3]
   2046e:	200a      	movs	r0, #10
   20470:	804a      	strh	r2, [r1, #2]
   20472:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   20476:	808a      	strh	r2, [r1, #4]
   20478:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   2047c:	80ca      	strh	r2, [r1, #6]
   2047e:	799a      	ldrb	r2, [r3, #6]
   20480:	720a      	strb	r2, [r1, #8]
   20482:	79db      	ldrb	r3, [r3, #7]
   20484:	724b      	strb	r3, [r1, #9]
   20486:	4770      	bx	lr
   20488:	f04f 30ff 	mov.w	r0, #4294967295
   2048c:	4770      	bx	lr
   2048e:	bf00      	nop

00020490 <rpc_gnss_serialize_time_and_sv_tow>:
   20490:	b310      	cbz	r0, 204d8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   20492:	b309      	cbz	r1, 204d8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   20494:	b470      	push	{r4, r5, r6}
   20496:	2500      	movs	r5, #0
   20498:	2606      	movs	r6, #6
   2049a:	460c      	mov	r4, r1
   2049c:	704d      	strb	r5, [r1, #1]
   2049e:	700e      	strb	r6, [r1, #0]
   204a0:	462b      	mov	r3, r5
   204a2:	8805      	ldrh	r5, [r0, #0]
   204a4:	4602      	mov	r2, r0
   204a6:	804d      	strh	r5, [r1, #2]
   204a8:	68c5      	ldr	r5, [r0, #12]
   204aa:	f8c1 500a 	str.w	r5, [r1, #10]
   204ae:	8905      	ldrh	r5, [r0, #8]
   204b0:	810d      	strh	r5, [r1, #8]
   204b2:	6840      	ldr	r0, [r0, #4]
   204b4:	6048      	str	r0, [r1, #4]
   204b6:	8a15      	ldrh	r5, [r2, #16]
   204b8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   204bc:	4408      	add	r0, r1
   204be:	81c5      	strh	r5, [r0, #14]
   204c0:	7c90      	ldrb	r0, [r2, #18]
   204c2:	3301      	adds	r3, #1
   204c4:	2b20      	cmp	r3, #32
   204c6:	7420      	strb	r0, [r4, #16]
   204c8:	f102 0204 	add.w	r2, r2, #4
   204cc:	f104 0403 	add.w	r4, r4, #3
   204d0:	d1f1      	bne.n	204b6 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   204d2:	206e      	movs	r0, #110	; 0x6e
   204d4:	bc70      	pop	{r4, r5, r6}
   204d6:	4770      	bx	lr
   204d8:	f04f 30ff 	mov.w	r0, #4294967295
   204dc:	4770      	bx	lr
   204de:	bf00      	nop

000204e0 <rpc_gnss_serialize_location>:
   204e0:	4603      	mov	r3, r0
   204e2:	b1c8      	cbz	r0, 20518 <rpc_gnss_serialize_location+0x38>
   204e4:	b1c1      	cbz	r1, 20518 <rpc_gnss_serialize_location+0x38>
   204e6:	2000      	movs	r0, #0
   204e8:	2207      	movs	r2, #7
   204ea:	7048      	strb	r0, [r1, #1]
   204ec:	700a      	strb	r2, [r1, #0]
   204ee:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   204f2:	2011      	movs	r0, #17
   204f4:	814a      	strh	r2, [r1, #10]
   204f6:	7b9a      	ldrb	r2, [r3, #14]
   204f8:	740a      	strb	r2, [r1, #16]
   204fa:	681a      	ldr	r2, [r3, #0]
   204fc:	f8c1 2002 	str.w	r2, [r1, #2]
   20500:	685a      	ldr	r2, [r3, #4]
   20502:	f8c1 2006 	str.w	r2, [r1, #6]
   20506:	7b1a      	ldrb	r2, [r3, #12]
   20508:	738a      	strb	r2, [r1, #14]
   2050a:	7b5a      	ldrb	r2, [r3, #13]
   2050c:	73ca      	strb	r2, [r1, #15]
   2050e:	7a9a      	ldrb	r2, [r3, #10]
   20510:	730a      	strb	r2, [r1, #12]
   20512:	7adb      	ldrb	r3, [r3, #11]
   20514:	734b      	strb	r3, [r1, #13]
   20516:	4770      	bx	lr
   20518:	f04f 30ff 	mov.w	r0, #4294967295
   2051c:	4770      	bx	lr
   2051e:	bf00      	nop

00020520 <rpc_gnss_serialize_integrity>:
   20520:	b148      	cbz	r0, 20536 <rpc_gnss_serialize_integrity+0x16>
   20522:	b141      	cbz	r1, 20536 <rpc_gnss_serialize_integrity+0x16>
   20524:	2200      	movs	r2, #0
   20526:	2308      	movs	r3, #8
   20528:	704a      	strb	r2, [r1, #1]
   2052a:	700b      	strb	r3, [r1, #0]
   2052c:	6803      	ldr	r3, [r0, #0]
   2052e:	2006      	movs	r0, #6
   20530:	f8c1 3002 	str.w	r3, [r1, #2]
   20534:	4770      	bx	lr
   20536:	f04f 30ff 	mov.w	r0, #4294967295
   2053a:	4770      	bx	lr

0002053c <gnss_client_event_handler>:
   2053c:	f850 1b08 	ldr.w	r1, [r0], #8
   20540:	0c09      	lsrs	r1, r1, #16
   20542:	f7fd b8ed 	b.w	1d720 <rpc_gnss_event_handler>
   20546:	bf00      	nop

00020548 <rpc_gnss_client_init>:
   20548:	4801      	ldr	r0, [pc, #4]	; (20550 <rpc_gnss_client_init+0x8>)
   2054a:	f7fd b81d 	b.w	1d588 <rpc_client_register>
   2054e:	bf00      	nop
   20550:	0002f2f4 	.word	0x0002f2f4

00020554 <rpc_gnss_client_request_alloc>:
   20554:	2300      	movs	r3, #0
   20556:	b510      	push	{r4, lr}
   20558:	b082      	sub	sp, #8
   2055a:	9301      	str	r3, [sp, #4]
   2055c:	b158      	cbz	r0, 20576 <rpc_gnss_client_request_alloc+0x22>
   2055e:	4604      	mov	r4, r0
   20560:	aa01      	add	r2, sp, #4
   20562:	2007      	movs	r0, #7
   20564:	f7fd f88a 	bl	1d67c <rpc_message_alloc>
   20568:	b918      	cbnz	r0, 20572 <rpc_gnss_client_request_alloc+0x1e>
   2056a:	9b01      	ldr	r3, [sp, #4]
   2056c:	b10b      	cbz	r3, 20572 <rpc_gnss_client_request_alloc+0x1e>
   2056e:	3308      	adds	r3, #8
   20570:	6023      	str	r3, [r4, #0]
   20572:	b002      	add	sp, #8
   20574:	bd10      	pop	{r4, pc}
   20576:	2007      	movs	r0, #7
   20578:	b002      	add	sp, #8
   2057a:	bd10      	pop	{r4, pc}

0002057c <rpc_gnss_client_request_send>:
   2057c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   20580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   20584:	d10b      	bne.n	2059e <rpc_gnss_client_request_send+0x22>
   20586:	b160      	cbz	r0, 205a2 <rpc_gnss_client_request_send+0x26>
   20588:	4603      	mov	r3, r0
   2058a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2058e:	2007      	movs	r0, #7
   20590:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   20594:	f843 1d08 	str.w	r1, [r3, #-8]!
   20598:	4619      	mov	r1, r3
   2059a:	f7fd b85f 	b.w	1d65c <rpc_message_send>
   2059e:	200f      	movs	r0, #15
   205a0:	4770      	bx	lr
   205a2:	2007      	movs	r0, #7
   205a4:	4770      	bx	lr
   205a6:	bf00      	nop

000205a8 <rpc_gnss_client_message_free>:
   205a8:	b120      	cbz	r0, 205b4 <rpc_gnss_client_message_free+0xc>
   205aa:	f1a0 0108 	sub.w	r1, r0, #8
   205ae:	2007      	movs	r0, #7
   205b0:	f7fd b890 	b.w	1d6d4 <rpc_message_free>
   205b4:	2007      	movs	r0, #7
   205b6:	4770      	bx	lr

000205b8 <rpc_gnss_client_data_free>:
   205b8:	b118      	cbz	r0, 205c2 <rpc_gnss_client_data_free+0xa>
   205ba:	4601      	mov	r1, r0
   205bc:	2007      	movs	r0, #7
   205be:	f7fd b895 	b.w	1d6ec <rpc_message_data_free>
   205c2:	2007      	movs	r0, #7
   205c4:	4770      	bx	lr
   205c6:	bf00      	nop

000205c8 <datagram_handler_init>:
   205c8:	b510      	push	{r4, lr}
   205ca:	4604      	mov	r4, r0
   205cc:	200c      	movs	r0, #12
   205ce:	f000 fdd7 	bl	21180 <nrf_malloc>
   205d2:	60e0      	str	r0, [r4, #12]
   205d4:	b118      	cbz	r0, 205de <datagram_handler_init+0x16>
   205d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   205da:	f7ff bd5f 	b.w	2009c <linked_list_init>
   205de:	2004      	movs	r0, #4
   205e0:	bd10      	pop	{r4, pc}
   205e2:	bf00      	nop

000205e4 <datagram_handler_put>:
   205e4:	b570      	push	{r4, r5, r6, lr}
   205e6:	4606      	mov	r6, r0
   205e8:	2014      	movs	r0, #20
   205ea:	460d      	mov	r5, r1
   205ec:	f000 fdc8 	bl	21180 <nrf_malloc>
   205f0:	b178      	cbz	r0, 20612 <datagram_handler_put+0x2e>
   205f2:	682b      	ldr	r3, [r5, #0]
   205f4:	4604      	mov	r4, r0
   205f6:	6043      	str	r3, [r0, #4]
   205f8:	686b      	ldr	r3, [r5, #4]
   205fa:	4601      	mov	r1, r0
   205fc:	6083      	str	r3, [r0, #8]
   205fe:	68eb      	ldr	r3, [r5, #12]
   20600:	60c3      	str	r3, [r0, #12]
   20602:	68ab      	ldr	r3, [r5, #8]
   20604:	6103      	str	r3, [r0, #16]
   20606:	68f0      	ldr	r0, [r6, #12]
   20608:	f7ff fd52 	bl	200b0 <linked_list_push>
   2060c:	b920      	cbnz	r0, 20618 <datagram_handler_put+0x34>
   2060e:	6868      	ldr	r0, [r5, #4]
   20610:	bd70      	pop	{r4, r5, r6, pc}
   20612:	f04f 30ff 	mov.w	r0, #4294967295
   20616:	bd70      	pop	{r4, r5, r6, pc}
   20618:	4620      	mov	r0, r4
   2061a:	f000 fdbb 	bl	21194 <nrf_free>
   2061e:	f04f 30ff 	mov.w	r0, #4294967295
   20622:	bd70      	pop	{r4, r5, r6, pc}

00020624 <datagram_handler_get>:
   20624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20628:	4607      	mov	r7, r0
   2062a:	b084      	sub	sp, #16
   2062c:	68c0      	ldr	r0, [r0, #12]
   2062e:	460c      	mov	r4, r1
   20630:	4616      	mov	r6, r2
   20632:	f7ff fd5d 	bl	200f0 <linked_list_peek>
   20636:	2800      	cmp	r0, #0
   20638:	d03b      	beq.n	206b2 <datagram_handler_get+0x8e>
   2063a:	6882      	ldr	r2, [r0, #8]
   2063c:	4605      	mov	r5, r0
   2063e:	e9d4 0300 	ldrd	r0, r3, [r4]
   20642:	429a      	cmp	r2, r3
   20644:	bf28      	it	cs
   20646:	461a      	movcs	r2, r3
   20648:	6062      	str	r2, [r4, #4]
   2064a:	b110      	cbz	r0, 20652 <datagram_handler_get+0x2e>
   2064c:	6869      	ldr	r1, [r5, #4]
   2064e:	f7ec fa7d 	bl	cb4c <memcpy>
   20652:	68a0      	ldr	r0, [r4, #8]
   20654:	b118      	cbz	r0, 2065e <datagram_handler_get+0x3a>
   20656:	692b      	ldr	r3, [r5, #16]
   20658:	b10b      	cbz	r3, 2065e <datagram_handler_get+0x3a>
   2065a:	68ea      	ldr	r2, [r5, #12]
   2065c:	bb02      	cbnz	r2, 206a0 <datagram_handler_get+0x7c>
   2065e:	2300      	movs	r3, #0
   20660:	60e3      	str	r3, [r4, #12]
   20662:	0732      	lsls	r2, r6, #28
   20664:	d506      	bpl.n	20674 <datagram_handler_get+0x50>
   20666:	06b3      	lsls	r3, r6, #26
   20668:	bf4c      	ite	mi
   2066a:	68a8      	ldrmi	r0, [r5, #8]
   2066c:	6860      	ldrpl	r0, [r4, #4]
   2066e:	b004      	add	sp, #16
   20670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20674:	68f8      	ldr	r0, [r7, #12]
   20676:	f7ff fd31 	bl	200dc <linked_list_pop>
   2067a:	4680      	mov	r8, r0
   2067c:	2800      	cmp	r0, #0
   2067e:	d0f2      	beq.n	20666 <datagram_handler_get+0x42>
   20680:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   20684:	6902      	ldr	r2, [r0, #16]
   20686:	9300      	str	r3, [sp, #0]
   20688:	68c3      	ldr	r3, [r0, #12]
   2068a:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2068e:	9303      	str	r3, [sp, #12]
   20690:	4668      	mov	r0, sp
   20692:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   20696:	4798      	blx	r3
   20698:	4640      	mov	r0, r8
   2069a:	f000 fd7b 	bl	21194 <nrf_free>
   2069e:	e7e2      	b.n	20666 <datagram_handler_get+0x42>
   206a0:	68e3      	ldr	r3, [r4, #12]
   206a2:	429a      	cmp	r2, r3
   206a4:	bf28      	it	cs
   206a6:	461a      	movcs	r2, r3
   206a8:	60e2      	str	r2, [r4, #12]
   206aa:	6929      	ldr	r1, [r5, #16]
   206ac:	f7ec fa4e 	bl	cb4c <memcpy>
   206b0:	e7d7      	b.n	20662 <datagram_handler_get+0x3e>
   206b2:	f04f 30ff 	mov.w	r0, #4294967295
   206b6:	e7da      	b.n	2066e <datagram_handler_get+0x4a>

000206b8 <datagram_handler_available>:
   206b8:	b508      	push	{r3, lr}
   206ba:	68c0      	ldr	r0, [r0, #12]
   206bc:	f7ff fd18 	bl	200f0 <linked_list_peek>
   206c0:	b108      	cbz	r0, 206c6 <datagram_handler_available+0xe>
   206c2:	6880      	ldr	r0, [r0, #8]
   206c4:	bd08      	pop	{r3, pc}
   206c6:	f04f 30ff 	mov.w	r0, #4294967295
   206ca:	bd08      	pop	{r3, pc}

000206cc <datagram_handler_flush>:
   206cc:	b530      	push	{r4, r5, lr}
   206ce:	4605      	mov	r5, r0
   206d0:	68c0      	ldr	r0, [r0, #12]
   206d2:	b085      	sub	sp, #20
   206d4:	b9a8      	cbnz	r0, 20702 <datagram_handler_flush+0x36>
   206d6:	e01a      	b.n	2070e <datagram_handler_flush+0x42>
   206d8:	68e8      	ldr	r0, [r5, #12]
   206da:	f7ff fcff 	bl	200dc <linked_list_pop>
   206de:	4604      	mov	r4, r0
   206e0:	b170      	cbz	r0, 20700 <datagram_handler_flush+0x34>
   206e2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   206e6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   206ea:	e9cd 0100 	strd	r0, r1, [sp]
   206ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   206f2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   206f6:	4668      	mov	r0, sp
   206f8:	4798      	blx	r3
   206fa:	4620      	mov	r0, r4
   206fc:	f000 fd4a 	bl	21194 <nrf_free>
   20700:	68e8      	ldr	r0, [r5, #12]
   20702:	f7ff fcfb 	bl	200fc <linked_list_size_get>
   20706:	2800      	cmp	r0, #0
   20708:	d1e6      	bne.n	206d8 <datagram_handler_flush+0xc>
   2070a:	b005      	add	sp, #20
   2070c:	bd30      	pop	{r4, r5, pc}
   2070e:	2008      	movs	r0, #8
   20710:	b005      	add	sp, #20
   20712:	bd30      	pop	{r4, r5, pc}

00020714 <datagram_handler_free>:
   20714:	b530      	push	{r4, r5, lr}
   20716:	4605      	mov	r5, r0
   20718:	68c0      	ldr	r0, [r0, #12]
   2071a:	b085      	sub	sp, #20
   2071c:	b9a0      	cbnz	r0, 20748 <datagram_handler_free+0x34>
   2071e:	e01c      	b.n	2075a <datagram_handler_free+0x46>
   20720:	f7ff fcdc 	bl	200dc <linked_list_pop>
   20724:	4604      	mov	r4, r0
   20726:	b170      	cbz	r0, 20746 <datagram_handler_free+0x32>
   20728:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2072c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   20730:	e9cd 0100 	strd	r0, r1, [sp]
   20734:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20738:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2073c:	4668      	mov	r0, sp
   2073e:	4798      	blx	r3
   20740:	4620      	mov	r0, r4
   20742:	f000 fd27 	bl	21194 <nrf_free>
   20746:	68e8      	ldr	r0, [r5, #12]
   20748:	f7ff fcd8 	bl	200fc <linked_list_size_get>
   2074c:	4604      	mov	r4, r0
   2074e:	68e8      	ldr	r0, [r5, #12]
   20750:	2c00      	cmp	r4, #0
   20752:	d1e5      	bne.n	20720 <datagram_handler_free+0xc>
   20754:	f000 fd1e 	bl	21194 <nrf_free>
   20758:	60ec      	str	r4, [r5, #12]
   2075a:	b005      	add	sp, #20
   2075c:	bd30      	pop	{r4, r5, pc}
   2075e:	bf00      	nop

00020760 <null_handler_init>:
   20760:	2000      	movs	r0, #0
   20762:	4770      	bx	lr

00020764 <null_handler_put>:
   20764:	b510      	push	{r4, lr}
   20766:	460c      	mov	r4, r1
   20768:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2076c:	4620      	mov	r0, r4
   2076e:	4798      	blx	r3
   20770:	6860      	ldr	r0, [r4, #4]
   20772:	bd10      	pop	{r4, pc}

00020774 <null_handler_get>:
   20774:	f04f 30ff 	mov.w	r0, #4294967295
   20778:	4770      	bx	lr
   2077a:	bf00      	nop

0002077c <null_handler_available>:
   2077c:	f04f 30ff 	mov.w	r0, #4294967295
   20780:	4770      	bx	lr
   20782:	bf00      	nop

00020784 <null_handler_flush>:
   20784:	2000      	movs	r0, #0
   20786:	4770      	bx	lr

00020788 <null_handler_free>:
   20788:	4770      	bx	lr
   2078a:	bf00      	nop

0002078c <packet_handler_create>:
   2078c:	2801      	cmp	r0, #1
   2078e:	b538      	push	{r3, r4, r5, lr}
   20790:	460d      	mov	r5, r1
   20792:	4614      	mov	r4, r2
   20794:	d00d      	beq.n	207b2 <packet_handler_create+0x26>
   20796:	db11      	blt.n	207bc <packet_handler_create+0x30>
   20798:	2803      	cmp	r0, #3
   2079a:	dc0f      	bgt.n	207bc <packet_handler_create+0x30>
   2079c:	2010      	movs	r0, #16
   2079e:	f000 fcef 	bl	21180 <nrf_malloc>
   207a2:	2218      	movs	r2, #24
   207a4:	b120      	cbz	r0, 207b0 <packet_handler_create+0x24>
   207a6:	4b08      	ldr	r3, [pc, #32]	; (207c8 <packet_handler_create+0x3c>)
   207a8:	6045      	str	r5, [r0, #4]
   207aa:	4413      	add	r3, r2
   207ac:	6084      	str	r4, [r0, #8]
   207ae:	6003      	str	r3, [r0, #0]
   207b0:	bd38      	pop	{r3, r4, r5, pc}
   207b2:	2014      	movs	r0, #20
   207b4:	f000 fce4 	bl	21180 <nrf_malloc>
   207b8:	2230      	movs	r2, #48	; 0x30
   207ba:	e7f3      	b.n	207a4 <packet_handler_create+0x18>
   207bc:	200c      	movs	r0, #12
   207be:	f000 fcdf 	bl	21180 <nrf_malloc>
   207c2:	2200      	movs	r2, #0
   207c4:	e7ee      	b.n	207a4 <packet_handler_create+0x18>
   207c6:	bf00      	nop
   207c8:	0002f304 	.word	0x0002f304

000207cc <packet_handler_delete>:
   207cc:	b510      	push	{r4, lr}
   207ce:	4604      	mov	r4, r0
   207d0:	6803      	ldr	r3, [r0, #0]
   207d2:	691b      	ldr	r3, [r3, #16]
   207d4:	4798      	blx	r3
   207d6:	6823      	ldr	r3, [r4, #0]
   207d8:	4620      	mov	r0, r4
   207da:	695b      	ldr	r3, [r3, #20]
   207dc:	4798      	blx	r3
   207de:	4620      	mov	r0, r4
   207e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   207e4:	f000 bcd6 	b.w	21194 <nrf_free>

000207e8 <stream_handler_init>:
   207e8:	b510      	push	{r4, lr}
   207ea:	4604      	mov	r4, r0
   207ec:	200c      	movs	r0, #12
   207ee:	f000 fcc7 	bl	21180 <nrf_malloc>
   207f2:	60e0      	str	r0, [r4, #12]
   207f4:	b128      	cbz	r0, 20802 <stream_handler_init+0x1a>
   207f6:	2300      	movs	r3, #0
   207f8:	6123      	str	r3, [r4, #16]
   207fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   207fe:	f7ff bc4d 	b.w	2009c <linked_list_init>
   20802:	2004      	movs	r0, #4
   20804:	bd10      	pop	{r4, pc}
   20806:	bf00      	nop

00020808 <stream_handler_put>:
   20808:	b570      	push	{r4, r5, r6, lr}
   2080a:	4606      	mov	r6, r0
   2080c:	2014      	movs	r0, #20
   2080e:	460d      	mov	r5, r1
   20810:	f000 fcb6 	bl	21180 <nrf_malloc>
   20814:	b178      	cbz	r0, 20836 <stream_handler_put+0x2e>
   20816:	682b      	ldr	r3, [r5, #0]
   20818:	4604      	mov	r4, r0
   2081a:	6043      	str	r3, [r0, #4]
   2081c:	686b      	ldr	r3, [r5, #4]
   2081e:	4601      	mov	r1, r0
   20820:	6083      	str	r3, [r0, #8]
   20822:	68eb      	ldr	r3, [r5, #12]
   20824:	60c3      	str	r3, [r0, #12]
   20826:	68ab      	ldr	r3, [r5, #8]
   20828:	6103      	str	r3, [r0, #16]
   2082a:	68f0      	ldr	r0, [r6, #12]
   2082c:	f7ff fc40 	bl	200b0 <linked_list_push>
   20830:	b920      	cbnz	r0, 2083c <stream_handler_put+0x34>
   20832:	6868      	ldr	r0, [r5, #4]
   20834:	bd70      	pop	{r4, r5, r6, pc}
   20836:	f04f 30ff 	mov.w	r0, #4294967295
   2083a:	bd70      	pop	{r4, r5, r6, pc}
   2083c:	4620      	mov	r0, r4
   2083e:	f000 fca9 	bl	21194 <nrf_free>
   20842:	f04f 30ff 	mov.w	r0, #4294967295
   20846:	bd70      	pop	{r4, r5, r6, pc}

00020848 <stream_handler_get>:
   20848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2084c:	4682      	mov	sl, r0
   2084e:	b089      	sub	sp, #36	; 0x24
   20850:	68c0      	ldr	r0, [r0, #12]
   20852:	4689      	mov	r9, r1
   20854:	4693      	mov	fp, r2
   20856:	f7ff fc4b 	bl	200f0 <linked_list_peek>
   2085a:	2800      	cmp	r0, #0
   2085c:	d071      	beq.n	20942 <stream_handler_get+0xfa>
   2085e:	4605      	mov	r5, r0
   20860:	f8d9 0008 	ldr.w	r0, [r9, #8]
   20864:	b120      	cbz	r0, 20870 <stream_handler_get+0x28>
   20866:	692b      	ldr	r3, [r5, #16]
   20868:	b113      	cbz	r3, 20870 <stream_handler_get+0x28>
   2086a:	68ea      	ldr	r2, [r5, #12]
   2086c:	2a00      	cmp	r2, #0
   2086e:	d15d      	bne.n	2092c <stream_handler_get+0xe4>
   20870:	2300      	movs	r3, #0
   20872:	f8c9 300c 	str.w	r3, [r9, #12]
   20876:	f8d9 2000 	ldr.w	r2, [r9]
   2087a:	f8d9 8004 	ldr.w	r8, [r9, #4]
   2087e:	f8da 1010 	ldr.w	r1, [sl, #16]
   20882:	9203      	str	r2, [sp, #12]
   20884:	f1b8 0f00 	cmp.w	r8, #0
   20888:	d030      	beq.n	208ec <stream_handler_get+0xa4>
   2088a:	2400      	movs	r4, #0
   2088c:	f00b 0320 	and.w	r3, fp, #32
   20890:	9301      	str	r3, [sp, #4]
   20892:	f00b 0b08 	and.w	fp, fp, #8
   20896:	68ae      	ldr	r6, [r5, #8]
   20898:	eba8 0304 	sub.w	r3, r8, r4
   2089c:	1a76      	subs	r6, r6, r1
   2089e:	429e      	cmp	r6, r3
   208a0:	4637      	mov	r7, r6
   208a2:	bf28      	it	cs
   208a4:	461f      	movcs	r7, r3
   208a6:	b10a      	cbz	r2, 208ac <stream_handler_get+0x64>
   208a8:	9a01      	ldr	r2, [sp, #4]
   208aa:	b1aa      	cbz	r2, 208d8 <stream_handler_get+0x90>
   208ac:	f1bb 0f00 	cmp.w	fp, #0
   208b0:	d106      	bne.n	208c0 <stream_handler_get+0x78>
   208b2:	429e      	cmp	r6, r3
   208b4:	d921      	bls.n	208fa <stream_handler_get+0xb2>
   208b6:	f8da 3010 	ldr.w	r3, [sl, #16]
   208ba:	443b      	add	r3, r7
   208bc:	f8ca 3010 	str.w	r3, [sl, #16]
   208c0:	4628      	mov	r0, r5
   208c2:	f7ff fc1d 	bl	20100 <linked_list_get_next>
   208c6:	443c      	add	r4, r7
   208c8:	4605      	mov	r5, r0
   208ca:	b180      	cbz	r0, 208ee <stream_handler_get+0xa6>
   208cc:	45a0      	cmp	r8, r4
   208ce:	d90e      	bls.n	208ee <stream_handler_get+0xa6>
   208d0:	f8d9 2000 	ldr.w	r2, [r9]
   208d4:	2100      	movs	r1, #0
   208d6:	e7de      	b.n	20896 <stream_handler_get+0x4e>
   208d8:	6868      	ldr	r0, [r5, #4]
   208da:	9302      	str	r3, [sp, #8]
   208dc:	9b03      	ldr	r3, [sp, #12]
   208de:	4401      	add	r1, r0
   208e0:	463a      	mov	r2, r7
   208e2:	1918      	adds	r0, r3, r4
   208e4:	f7ec f932 	bl	cb4c <memcpy>
   208e8:	9b02      	ldr	r3, [sp, #8]
   208ea:	e7df      	b.n	208ac <stream_handler_get+0x64>
   208ec:	4644      	mov	r4, r8
   208ee:	4620      	mov	r0, r4
   208f0:	f8c9 4004 	str.w	r4, [r9, #4]
   208f4:	b009      	add	sp, #36	; 0x24
   208f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208fa:	f8da 000c 	ldr.w	r0, [sl, #12]
   208fe:	f7ff fbed 	bl	200dc <linked_list_pop>
   20902:	4606      	mov	r6, r0
   20904:	b170      	cbz	r0, 20924 <stream_handler_get+0xdc>
   20906:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2090a:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   2090e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   20912:	e9cd 1006 	strd	r1, r0, [sp, #24]
   20916:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   2091a:	a804      	add	r0, sp, #16
   2091c:	4798      	blx	r3
   2091e:	4630      	mov	r0, r6
   20920:	f000 fc38 	bl	21194 <nrf_free>
   20924:	2300      	movs	r3, #0
   20926:	f8ca 3010 	str.w	r3, [sl, #16]
   2092a:	e7c9      	b.n	208c0 <stream_handler_get+0x78>
   2092c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20930:	429a      	cmp	r2, r3
   20932:	bf28      	it	cs
   20934:	461a      	movcs	r2, r3
   20936:	f8c9 200c 	str.w	r2, [r9, #12]
   2093a:	6929      	ldr	r1, [r5, #16]
   2093c:	f7ec f906 	bl	cb4c <memcpy>
   20940:	e799      	b.n	20876 <stream_handler_get+0x2e>
   20942:	f04f 30ff 	mov.w	r0, #4294967295
   20946:	e7d5      	b.n	208f4 <stream_handler_get+0xac>

00020948 <stream_handler_available>:
   20948:	b510      	push	{r4, lr}
   2094a:	4604      	mov	r4, r0
   2094c:	68c0      	ldr	r0, [r0, #12]
   2094e:	f7ff fbcf 	bl	200f0 <linked_list_peek>
   20952:	b150      	cbz	r0, 2096a <stream_handler_available+0x22>
   20954:	6924      	ldr	r4, [r4, #16]
   20956:	4264      	negs	r4, r4
   20958:	6883      	ldr	r3, [r0, #8]
   2095a:	441c      	add	r4, r3
   2095c:	f7ff fbd0 	bl	20100 <linked_list_get_next>
   20960:	2800      	cmp	r0, #0
   20962:	d1f9      	bne.n	20958 <stream_handler_available+0x10>
   20964:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   20968:	bd10      	pop	{r4, pc}
   2096a:	f04f 30ff 	mov.w	r0, #4294967295
   2096e:	bd10      	pop	{r4, pc}

00020970 <stream_handler_flush>:
   20970:	b530      	push	{r4, r5, lr}
   20972:	4605      	mov	r5, r0
   20974:	68c0      	ldr	r0, [r0, #12]
   20976:	b085      	sub	sp, #20
   20978:	b9a8      	cbnz	r0, 209a6 <stream_handler_flush+0x36>
   2097a:	e01a      	b.n	209b2 <stream_handler_flush+0x42>
   2097c:	68e8      	ldr	r0, [r5, #12]
   2097e:	f7ff fbad 	bl	200dc <linked_list_pop>
   20982:	4604      	mov	r4, r0
   20984:	b170      	cbz	r0, 209a4 <stream_handler_flush+0x34>
   20986:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2098a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2098e:	e9cd 0100 	strd	r0, r1, [sp]
   20992:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20996:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2099a:	4668      	mov	r0, sp
   2099c:	4798      	blx	r3
   2099e:	4620      	mov	r0, r4
   209a0:	f000 fbf8 	bl	21194 <nrf_free>
   209a4:	68e8      	ldr	r0, [r5, #12]
   209a6:	f7ff fba9 	bl	200fc <linked_list_size_get>
   209aa:	2800      	cmp	r0, #0
   209ac:	d1e6      	bne.n	2097c <stream_handler_flush+0xc>
   209ae:	b005      	add	sp, #20
   209b0:	bd30      	pop	{r4, r5, pc}
   209b2:	2008      	movs	r0, #8
   209b4:	b005      	add	sp, #20
   209b6:	bd30      	pop	{r4, r5, pc}

000209b8 <stream_handler_free>:
   209b8:	b530      	push	{r4, r5, lr}
   209ba:	4605      	mov	r5, r0
   209bc:	68c0      	ldr	r0, [r0, #12]
   209be:	b085      	sub	sp, #20
   209c0:	b9a0      	cbnz	r0, 209ec <stream_handler_free+0x34>
   209c2:	e01c      	b.n	209fe <stream_handler_free+0x46>
   209c4:	f7ff fb8a 	bl	200dc <linked_list_pop>
   209c8:	4604      	mov	r4, r0
   209ca:	b170      	cbz	r0, 209ea <stream_handler_free+0x32>
   209cc:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   209d0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   209d4:	e9cd 0100 	strd	r0, r1, [sp]
   209d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   209dc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   209e0:	4668      	mov	r0, sp
   209e2:	4798      	blx	r3
   209e4:	4620      	mov	r0, r4
   209e6:	f000 fbd5 	bl	21194 <nrf_free>
   209ea:	68e8      	ldr	r0, [r5, #12]
   209ec:	f7ff fb86 	bl	200fc <linked_list_size_get>
   209f0:	4604      	mov	r4, r0
   209f2:	68e8      	ldr	r0, [r5, #12]
   209f4:	2c00      	cmp	r4, #0
   209f6:	d1e5      	bne.n	209c4 <stream_handler_free+0xc>
   209f8:	f000 fbcc 	bl	21194 <nrf_free>
   209fc:	60ec      	str	r4, [r5, #12]
   209fe:	b005      	add	sp, #20
   20a00:	bd30      	pop	{r4, r5, pc}
   20a02:	bf00      	nop

00020a04 <mem_free>:
   20a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a08:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 20ad8 <mem_free+0xd4>
   20a0c:	b083      	sub	sp, #12
   20a0e:	9000      	str	r0, [sp, #0]
   20a10:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   20a14:	f8dc 3008 	ldr.w	r3, [ip, #8]
   20a18:	b12b      	cbz	r3, 20a26 <mem_free+0x22>
   20a1a:	f8dc 2000 	ldr.w	r2, [ip]
   20a1e:	9c00      	ldr	r4, [sp, #0]
   20a20:	7810      	ldrb	r0, [r2, #0]
   20a22:	42a0      	cmp	r0, r4
   20a24:	d006      	beq.n	20a34 <mem_free+0x30>
   20a26:	f10c 0c0c 	add.w	ip, ip, #12
   20a2a:	45e3      	cmp	fp, ip
   20a2c:	d1f2      	bne.n	20a14 <mem_free+0x10>
   20a2e:	b003      	add	sp, #12
   20a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a34:	f8dc a004 	ldr.w	sl, [ip, #4]
   20a38:	eb03 080a 	add.w	r8, r3, sl
   20a3c:	45c2      	cmp	sl, r8
   20a3e:	d2f2      	bcs.n	20a26 <mem_free+0x22>
   20a40:	6853      	ldr	r3, [r2, #4]
   20a42:	f8cd c004 	str.w	ip, [sp, #4]
   20a46:	46d6      	mov	lr, sl
   20a48:	469c      	mov	ip, r3
   20a4a:	f8d2 9010 	ldr.w	r9, [r2, #16]
   20a4e:	8997      	ldrh	r7, [r2, #12]
   20a50:	ebae 000a 	sub.w	r0, lr, sl
   20a54:	b3df      	cbz	r7, 20ace <mem_free+0xca>
   20a56:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   20a5a:	4290      	cmp	r0, r2
   20a5c:	d31c      	bcc.n	20a98 <mem_free+0x94>
   20a5e:	4665      	mov	r5, ip
   20a60:	2400      	movs	r4, #0
   20a62:	f109 0304 	add.w	r3, r9, #4
   20a66:	e003      	b.n	20a70 <mem_free+0x6c>
   20a68:	885a      	ldrh	r2, [r3, #2]
   20a6a:	3304      	adds	r3, #4
   20a6c:	4282      	cmp	r2, r0
   20a6e:	d815      	bhi.n	20a9c <mem_free+0x98>
   20a70:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   20a74:	3401      	adds	r4, #1
   20a76:	42a7      	cmp	r7, r4
   20a78:	fb02 5506 	mla	r5, r2, r6, r5
   20a7c:	eba0 0002 	sub.w	r0, r0, r2
   20a80:	461e      	mov	r6, r3
   20a82:	d1f1      	bne.n	20a68 <mem_free+0x64>
   20a84:	2000      	movs	r0, #0
   20a86:	4281      	cmp	r1, r0
   20a88:	d00d      	beq.n	20aa6 <mem_free+0xa2>
   20a8a:	f10e 0e01 	add.w	lr, lr, #1
   20a8e:	45f0      	cmp	r8, lr
   20a90:	d1de      	bne.n	20a50 <mem_free+0x4c>
   20a92:	f8dd c004 	ldr.w	ip, [sp, #4]
   20a96:	e7c6      	b.n	20a26 <mem_free+0x22>
   20a98:	4665      	mov	r5, ip
   20a9a:	464e      	mov	r6, r9
   20a9c:	8833      	ldrh	r3, [r6, #0]
   20a9e:	fb00 5003 	mla	r0, r0, r3, r5
   20aa2:	4281      	cmp	r1, r0
   20aa4:	d1f1      	bne.n	20a8a <mem_free+0x86>
   20aa6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   20aaa:	f8dd c004 	ldr.w	ip, [sp, #4]
   20aae:	d0ba      	beq.n	20a26 <mem_free+0x22>
   20ab0:	2301      	movs	r3, #1
   20ab2:	4a08      	ldr	r2, [pc, #32]	; (20ad4 <mem_free+0xd0>)
   20ab4:	ea4f 115e 	mov.w	r1, lr, lsr #5
   20ab8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   20abc:	f00e 0e1f 	and.w	lr, lr, #31
   20ac0:	fa03 fe0e 	lsl.w	lr, r3, lr
   20ac4:	ea4e 0000 	orr.w	r0, lr, r0
   20ac8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   20acc:	e7af      	b.n	20a2e <mem_free+0x2a>
   20ace:	4638      	mov	r0, r7
   20ad0:	e7d9      	b.n	20a86 <mem_free+0x82>
   20ad2:	bf00      	nop
   20ad4:	20021c24 	.word	0x20021c24
   20ad8:	20021c68 	.word	0x20021c68

00020adc <mem_alloc.constprop.5>:
   20adc:	2800      	cmp	r0, #0
   20ade:	d050      	beq.n	20b82 <mem_alloc.constprop.5+0xa6>
   20ae0:	4b6d      	ldr	r3, [pc, #436]	; (20c98 <mem_alloc.constprop.5+0x1bc>)
   20ae2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   20ae6:	4290      	cmp	r0, r2
   20ae8:	d84b      	bhi.n	20b82 <mem_alloc.constprop.5+0xa6>
   20aea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20aee:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   20af2:	b083      	sub	sp, #12
   20af4:	f1bb 0f00 	cmp.w	fp, #0
   20af8:	d054      	beq.n	20ba4 <mem_alloc.constprop.5+0xc8>
   20afa:	f10b 32ff 	add.w	r2, fp, #4294967295
   20afe:	4691      	mov	r9, r2
   20b00:	2600      	movs	r6, #0
   20b02:	f04f 0812 	mov.w	r8, #18
   20b06:	4f65      	ldr	r7, [pc, #404]	; (20c9c <mem_alloc.constprop.5+0x1c0>)
   20b08:	9201      	str	r2, [sp, #4]
   20b0a:	f10b 0e11 	add.w	lr, fp, #17
   20b0e:	eb06 0209 	add.w	r2, r6, r9
   20b12:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   20b16:	3201      	adds	r2, #1
   20b18:	0852      	lsrs	r2, r2, #1
   20b1a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   20b1e:	f102 0112 	add.w	r1, r2, #18
   20b22:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   20b26:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   20b2a:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   20b2e:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   20b32:	f8dc c004 	ldr.w	ip, [ip, #4]
   20b36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20b3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20b3e:	f8da a010 	ldr.w	sl, [sl, #16]
   20b42:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   20b46:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   20b4a:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   20b4e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   20b52:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   20b56:	6849      	ldr	r1, [r1, #4]
   20b58:	692d      	ldr	r5, [r5, #16]
   20b5a:	6924      	ldr	r4, [r4, #16]
   20b5c:	f8dc c004 	ldr.w	ip, [ip, #4]
   20b60:	4550      	cmp	r0, sl
   20b62:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   20b66:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   20b6a:	d915      	bls.n	20b98 <mem_alloc.constprop.5+0xbc>
   20b6c:	4288      	cmp	r0, r1
   20b6e:	d211      	bcs.n	20b94 <mem_alloc.constprop.5+0xb8>
   20b70:	42a8      	cmp	r0, r5
   20b72:	d908      	bls.n	20b86 <mem_alloc.constprop.5+0xaa>
   20b74:	1c56      	adds	r6, r2, #1
   20b76:	45b1      	cmp	r9, r6
   20b78:	f0c0 8087 	bcc.w	20c8a <mem_alloc.constprop.5+0x1ae>
   20b7c:	f102 0813 	add.w	r8, r2, #19
   20b80:	e7c5      	b.n	20b0e <mem_alloc.constprop.5+0x32>
   20b82:	2000      	movs	r0, #0
   20b84:	4770      	bx	lr
   20b86:	f102 39ff 	add.w	r9, r2, #4294967295
   20b8a:	454e      	cmp	r6, r9
   20b8c:	d87d      	bhi.n	20c8a <mem_alloc.constprop.5+0x1ae>
   20b8e:	f102 0e11 	add.w	lr, r2, #17
   20b92:	e7bc      	b.n	20b0e <mem_alloc.constprop.5+0x32>
   20b94:	f109 0601 	add.w	r6, r9, #1
   20b98:	45b3      	cmp	fp, r6
   20b9a:	d007      	beq.n	20bac <mem_alloc.constprop.5+0xd0>
   20b9c:	2e10      	cmp	r6, #16
   20b9e:	d001      	beq.n	20ba4 <mem_alloc.constprop.5+0xc8>
   20ba0:	45b3      	cmp	fp, r6
   20ba2:	d808      	bhi.n	20bb6 <mem_alloc.constprop.5+0xda>
   20ba4:	2000      	movs	r0, #0
   20ba6:	b003      	add	sp, #12
   20ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bac:	9a01      	ldr	r2, [sp, #4]
   20bae:	2a10      	cmp	r2, #16
   20bb0:	bf18      	it	ne
   20bb2:	4616      	movne	r6, r2
   20bb4:	d0f6      	beq.n	20ba4 <mem_alloc.constprop.5+0xc8>
   20bb6:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 20ca0 <mem_alloc.constprop.5+0x1c4>
   20bba:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   20bbe:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   20bc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20bc6:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   20bca:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   20bce:	f8d2 e004 	ldr.w	lr, [r2, #4]
   20bd2:	691d      	ldr	r5, [r3, #16]
   20bd4:	2c00      	cmp	r4, #0
   20bd6:	d056      	beq.n	20c86 <mem_alloc.constprop.5+0x1aa>
   20bd8:	462a      	mov	r2, r5
   20bda:	4670      	mov	r0, lr
   20bdc:	00a4      	lsls	r4, r4, #2
   20bde:	eb05 0904 	add.w	r9, r5, r4
   20be2:	8851      	ldrh	r1, [r2, #2]
   20be4:	3204      	adds	r2, #4
   20be6:	4591      	cmp	r9, r2
   20be8:	4408      	add	r0, r1
   20bea:	d1fa      	bne.n	20be2 <mem_alloc.constprop.5+0x106>
   20bec:	1929      	adds	r1, r5, r4
   20bee:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   20bf2:	4482      	add	sl, r0
   20bf4:	4582      	cmp	sl, r0
   20bf6:	d918      	bls.n	20c2a <mem_alloc.constprop.5+0x14e>
   20bf8:	0941      	lsrs	r1, r0, #5
   20bfa:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   20bfe:	f000 041f 	and.w	r4, r0, #31
   20c02:	fa22 f904 	lsr.w	r9, r2, r4
   20c06:	f019 0f01 	tst.w	r9, #1
   20c0a:	d007      	beq.n	20c1c <mem_alloc.constprop.5+0x140>
   20c0c:	e013      	b.n	20c36 <mem_alloc.constprop.5+0x15a>
   20c0e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   20c12:	fa22 f904 	lsr.w	r9, r2, r4
   20c16:	f019 0f01 	tst.w	r9, #1
   20c1a:	d10c      	bne.n	20c36 <mem_alloc.constprop.5+0x15a>
   20c1c:	3001      	adds	r0, #1
   20c1e:	4582      	cmp	sl, r0
   20c20:	ea4f 1150 	mov.w	r1, r0, lsr #5
   20c24:	f000 041f 	and.w	r4, r0, #31
   20c28:	d1f1      	bne.n	20c0e <mem_alloc.constprop.5+0x132>
   20c2a:	3601      	adds	r6, #1
   20c2c:	455e      	cmp	r6, fp
   20c2e:	f108 0808 	add.w	r8, r8, #8
   20c32:	d3c4      	bcc.n	20bbe <mem_alloc.constprop.5+0xe2>
   20c34:	e7b6      	b.n	20ba4 <mem_alloc.constprop.5+0xc8>
   20c36:	2601      	movs	r6, #1
   20c38:	fa06 f404 	lsl.w	r4, r6, r4
   20c3c:	899e      	ldrh	r6, [r3, #12]
   20c3e:	ea22 0204 	bic.w	r2, r2, r4
   20c42:	eba0 000e 	sub.w	r0, r0, lr
   20c46:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   20c4a:	685c      	ldr	r4, [r3, #4]
   20c4c:	2e00      	cmp	r6, #0
   20c4e:	d0a9      	beq.n	20ba4 <mem_alloc.constprop.5+0xc8>
   20c50:	886a      	ldrh	r2, [r5, #2]
   20c52:	4282      	cmp	r2, r0
   20c54:	d811      	bhi.n	20c7a <mem_alloc.constprop.5+0x19e>
   20c56:	2100      	movs	r1, #0
   20c58:	1d2b      	adds	r3, r5, #4
   20c5a:	e003      	b.n	20c64 <mem_alloc.constprop.5+0x188>
   20c5c:	885a      	ldrh	r2, [r3, #2]
   20c5e:	3304      	adds	r3, #4
   20c60:	4282      	cmp	r2, r0
   20c62:	d80a      	bhi.n	20c7a <mem_alloc.constprop.5+0x19e>
   20c64:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   20c68:	3101      	adds	r1, #1
   20c6a:	428e      	cmp	r6, r1
   20c6c:	fb02 4405 	mla	r4, r2, r5, r4
   20c70:	eba0 0002 	sub.w	r0, r0, r2
   20c74:	461d      	mov	r5, r3
   20c76:	d1f1      	bne.n	20c5c <mem_alloc.constprop.5+0x180>
   20c78:	e794      	b.n	20ba4 <mem_alloc.constprop.5+0xc8>
   20c7a:	882b      	ldrh	r3, [r5, #0]
   20c7c:	fb00 4003 	mla	r0, r0, r3, r4
   20c80:	b003      	add	sp, #12
   20c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c86:	4670      	mov	r0, lr
   20c88:	e7b0      	b.n	20bec <mem_alloc.constprop.5+0x110>
   20c8a:	f1bb 0f10 	cmp.w	fp, #16
   20c8e:	bf08      	it	eq
   20c90:	260f      	moveq	r6, #15
   20c92:	d090      	beq.n	20bb6 <mem_alloc.constprop.5+0xda>
   20c94:	e786      	b.n	20ba4 <mem_alloc.constprop.5+0xc8>
   20c96:	bf00      	nop
   20c98:	20021ca4 	.word	0x20021ca4
   20c9c:	20021c68 	.word	0x20021c68
   20ca0:	20021c24 	.word	0x20021c24

00020ca4 <mem_alloc.constprop.4>:
   20ca4:	2800      	cmp	r0, #0
   20ca6:	d04c      	beq.n	20d42 <mem_alloc.constprop.4+0x9e>
   20ca8:	4b6b      	ldr	r3, [pc, #428]	; (20e58 <mem_alloc.constprop.4+0x1b4>)
   20caa:	681a      	ldr	r2, [r3, #0]
   20cac:	4290      	cmp	r0, r2
   20cae:	d848      	bhi.n	20d42 <mem_alloc.constprop.4+0x9e>
   20cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cb4:	685f      	ldr	r7, [r3, #4]
   20cb6:	b083      	sub	sp, #12
   20cb8:	9700      	str	r7, [sp, #0]
   20cba:	2f00      	cmp	r7, #0
   20cbc:	d051      	beq.n	20d62 <mem_alloc.constprop.4+0xbe>
   20cbe:	1e7a      	subs	r2, r7, #1
   20cc0:	4696      	mov	lr, r2
   20cc2:	2100      	movs	r1, #0
   20cc4:	f04f 0c01 	mov.w	ip, #1
   20cc8:	4c64      	ldr	r4, [pc, #400]	; (20e5c <mem_alloc.constprop.4+0x1b8>)
   20cca:	9201      	str	r2, [sp, #4]
   20ccc:	eb01 020e 	add.w	r2, r1, lr
   20cd0:	3201      	adds	r2, #1
   20cd2:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   20cd6:	0852      	lsrs	r2, r2, #1
   20cd8:	f102 0801 	add.w	r8, r2, #1
   20cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20ce0:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   20ce4:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   20ce8:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   20cec:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   20cf0:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   20cf4:	f8d9 9004 	ldr.w	r9, [r9, #4]
   20cf8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   20cfc:	f8da a010 	ldr.w	sl, [sl, #16]
   20d00:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   20d04:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   20d08:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   20d0c:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   20d10:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   20d14:	6936      	ldr	r6, [r6, #16]
   20d16:	f8db b004 	ldr.w	fp, [fp, #4]
   20d1a:	692d      	ldr	r5, [r5, #16]
   20d1c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   20d20:	4550      	cmp	r0, sl
   20d22:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   20d26:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   20d2a:	d913      	bls.n	20d54 <mem_alloc.constprop.4+0xb0>
   20d2c:	42a8      	cmp	r0, r5
   20d2e:	d210      	bcs.n	20d52 <mem_alloc.constprop.4+0xae>
   20d30:	42b0      	cmp	r0, r6
   20d32:	d908      	bls.n	20d46 <mem_alloc.constprop.4+0xa2>
   20d34:	45c6      	cmp	lr, r8
   20d36:	4641      	mov	r1, r8
   20d38:	f0c0 8087 	bcc.w	20e4a <mem_alloc.constprop.4+0x1a6>
   20d3c:	f108 0c01 	add.w	ip, r8, #1
   20d40:	e7c4      	b.n	20ccc <mem_alloc.constprop.4+0x28>
   20d42:	2000      	movs	r0, #0
   20d44:	4770      	bx	lr
   20d46:	f102 3eff 	add.w	lr, r2, #4294967295
   20d4a:	4571      	cmp	r1, lr
   20d4c:	d87d      	bhi.n	20e4a <mem_alloc.constprop.4+0x1a6>
   20d4e:	4617      	mov	r7, r2
   20d50:	e7bc      	b.n	20ccc <mem_alloc.constprop.4+0x28>
   20d52:	4639      	mov	r1, r7
   20d54:	9a00      	ldr	r2, [sp, #0]
   20d56:	428a      	cmp	r2, r1
   20d58:	d007      	beq.n	20d6a <mem_alloc.constprop.4+0xc6>
   20d5a:	2910      	cmp	r1, #16
   20d5c:	d001      	beq.n	20d62 <mem_alloc.constprop.4+0xbe>
   20d5e:	428a      	cmp	r2, r1
   20d60:	d808      	bhi.n	20d74 <mem_alloc.constprop.4+0xd0>
   20d62:	2000      	movs	r0, #0
   20d64:	b003      	add	sp, #12
   20d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d6a:	9a01      	ldr	r2, [sp, #4]
   20d6c:	2a10      	cmp	r2, #16
   20d6e:	bf18      	it	ne
   20d70:	4611      	movne	r1, r2
   20d72:	d0f6      	beq.n	20d62 <mem_alloc.constprop.4+0xbe>
   20d74:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 20e60 <mem_alloc.constprop.4+0x1bc>
   20d78:	f8dd 9000 	ldr.w	r9, [sp]
   20d7c:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   20d80:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   20d84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20d88:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   20d8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   20d90:	f8d2 e004 	ldr.w	lr, [r2, #4]
   20d94:	691f      	ldr	r7, [r3, #16]
   20d96:	2e00      	cmp	r6, #0
   20d98:	d055      	beq.n	20e46 <mem_alloc.constprop.4+0x1a2>
   20d9a:	463a      	mov	r2, r7
   20d9c:	4670      	mov	r0, lr
   20d9e:	00b6      	lsls	r6, r6, #2
   20da0:	eb07 0a06 	add.w	sl, r7, r6
   20da4:	8855      	ldrh	r5, [r2, #2]
   20da6:	3204      	adds	r2, #4
   20da8:	4592      	cmp	sl, r2
   20daa:	4428      	add	r0, r5
   20dac:	d1fa      	bne.n	20da4 <mem_alloc.constprop.4+0x100>
   20dae:	19bd      	adds	r5, r7, r6
   20db0:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   20db4:	4483      	add	fp, r0
   20db6:	4583      	cmp	fp, r0
   20db8:	d918      	bls.n	20dec <mem_alloc.constprop.4+0x148>
   20dba:	0945      	lsrs	r5, r0, #5
   20dbc:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   20dc0:	f000 061f 	and.w	r6, r0, #31
   20dc4:	fa22 fa06 	lsr.w	sl, r2, r6
   20dc8:	f01a 0f01 	tst.w	sl, #1
   20dcc:	d007      	beq.n	20dde <mem_alloc.constprop.4+0x13a>
   20dce:	e013      	b.n	20df8 <mem_alloc.constprop.4+0x154>
   20dd0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   20dd4:	fa22 fa06 	lsr.w	sl, r2, r6
   20dd8:	f01a 0f01 	tst.w	sl, #1
   20ddc:	d10c      	bne.n	20df8 <mem_alloc.constprop.4+0x154>
   20dde:	3001      	adds	r0, #1
   20de0:	4583      	cmp	fp, r0
   20de2:	ea4f 1550 	mov.w	r5, r0, lsr #5
   20de6:	f000 061f 	and.w	r6, r0, #31
   20dea:	d1f1      	bne.n	20dd0 <mem_alloc.constprop.4+0x12c>
   20dec:	3101      	adds	r1, #1
   20dee:	4549      	cmp	r1, r9
   20df0:	f108 0808 	add.w	r8, r8, #8
   20df4:	d3c4      	bcc.n	20d80 <mem_alloc.constprop.4+0xdc>
   20df6:	e7b4      	b.n	20d62 <mem_alloc.constprop.4+0xbe>
   20df8:	2101      	movs	r1, #1
   20dfa:	40b1      	lsls	r1, r6
   20dfc:	899e      	ldrh	r6, [r3, #12]
   20dfe:	ea22 0201 	bic.w	r2, r2, r1
   20e02:	eba0 000e 	sub.w	r0, r0, lr
   20e06:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   20e0a:	685c      	ldr	r4, [r3, #4]
   20e0c:	2e00      	cmp	r6, #0
   20e0e:	d0a8      	beq.n	20d62 <mem_alloc.constprop.4+0xbe>
   20e10:	887a      	ldrh	r2, [r7, #2]
   20e12:	4282      	cmp	r2, r0
   20e14:	d811      	bhi.n	20e3a <mem_alloc.constprop.4+0x196>
   20e16:	2100      	movs	r1, #0
   20e18:	1d3b      	adds	r3, r7, #4
   20e1a:	e003      	b.n	20e24 <mem_alloc.constprop.4+0x180>
   20e1c:	885a      	ldrh	r2, [r3, #2]
   20e1e:	3304      	adds	r3, #4
   20e20:	4282      	cmp	r2, r0
   20e22:	d80a      	bhi.n	20e3a <mem_alloc.constprop.4+0x196>
   20e24:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   20e28:	3101      	adds	r1, #1
   20e2a:	428e      	cmp	r6, r1
   20e2c:	eba0 0002 	sub.w	r0, r0, r2
   20e30:	fb02 4405 	mla	r4, r2, r5, r4
   20e34:	461f      	mov	r7, r3
   20e36:	d1f1      	bne.n	20e1c <mem_alloc.constprop.4+0x178>
   20e38:	e793      	b.n	20d62 <mem_alloc.constprop.4+0xbe>
   20e3a:	883b      	ldrh	r3, [r7, #0]
   20e3c:	fb00 4003 	mla	r0, r0, r3, r4
   20e40:	b003      	add	sp, #12
   20e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e46:	4670      	mov	r0, lr
   20e48:	e7b1      	b.n	20dae <mem_alloc.constprop.4+0x10a>
   20e4a:	9a00      	ldr	r2, [sp, #0]
   20e4c:	2a10      	cmp	r2, #16
   20e4e:	bf08      	it	eq
   20e50:	210f      	moveq	r1, #15
   20e52:	d08f      	beq.n	20d74 <mem_alloc.constprop.4+0xd0>
   20e54:	e785      	b.n	20d62 <mem_alloc.constprop.4+0xbe>
   20e56:	bf00      	nop
   20e58:	20021ca4 	.word	0x20021ca4
   20e5c:	20021c68 	.word	0x20021c68
   20e60:	20021c24 	.word	0x20021c24

00020e64 <nrf_mem_init>:
   20e64:	b570      	push	{r4, r5, r6, lr}
   20e66:	2200      	movs	r2, #0
   20e68:	2501      	movs	r5, #1
   20e6a:	4833      	ldr	r0, [pc, #204]	; (20f38 <nrf_mem_init+0xd4>)
   20e6c:	0951      	lsrs	r1, r2, #5
   20e6e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   20e72:	f002 031f 	and.w	r3, r2, #31
   20e76:	fa05 f303 	lsl.w	r3, r5, r3
   20e7a:	3201      	adds	r2, #1
   20e7c:	4323      	orrs	r3, r4
   20e7e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   20e82:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   20e86:	d1f1      	bne.n	20e6c <nrf_mem_init+0x8>
   20e88:	2400      	movs	r4, #0
   20e8a:	4b2c      	ldr	r3, [pc, #176]	; (20f3c <nrf_mem_init+0xd8>)
   20e8c:	4621      	mov	r1, r4
   20e8e:	223c      	movs	r2, #60	; 0x3c
   20e90:	482b      	ldr	r0, [pc, #172]	; (20f40 <nrf_mem_init+0xdc>)
   20e92:	601c      	str	r4, [r3, #0]
   20e94:	f005 f896 	bl	25fc4 <memset>
   20e98:	2110      	movs	r1, #16
   20e9a:	2205      	movs	r2, #5
   20e9c:	4b29      	ldr	r3, [pc, #164]	; (20f44 <nrf_mem_init+0xe0>)
   20e9e:	4e2a      	ldr	r6, [pc, #168]	; (20f48 <nrf_mem_init+0xe4>)
   20ea0:	e9c3 4400 	strd	r4, r4, [r3]
   20ea4:	60d9      	str	r1, [r3, #12]
   20ea6:	6159      	str	r1, [r3, #20]
   20ea8:	61d9      	str	r1, [r3, #28]
   20eaa:	6259      	str	r1, [r3, #36]	; 0x24
   20eac:	62d9      	str	r1, [r3, #44]	; 0x2c
   20eae:	6359      	str	r1, [r3, #52]	; 0x34
   20eb0:	63d9      	str	r1, [r3, #60]	; 0x3c
   20eb2:	6459      	str	r1, [r3, #68]	; 0x44
   20eb4:	64d9      	str	r1, [r3, #76]	; 0x4c
   20eb6:	6559      	str	r1, [r3, #84]	; 0x54
   20eb8:	65d9      	str	r1, [r3, #92]	; 0x5c
   20eba:	6659      	str	r1, [r3, #100]	; 0x64
   20ebc:	66d9      	str	r1, [r3, #108]	; 0x6c
   20ebe:	6759      	str	r1, [r3, #116]	; 0x74
   20ec0:	67d9      	str	r1, [r3, #124]	; 0x7c
   20ec2:	609a      	str	r2, [r3, #8]
   20ec4:	611a      	str	r2, [r3, #16]
   20ec6:	619a      	str	r2, [r3, #24]
   20ec8:	621a      	str	r2, [r3, #32]
   20eca:	629a      	str	r2, [r3, #40]	; 0x28
   20ecc:	631a      	str	r2, [r3, #48]	; 0x30
   20ece:	639a      	str	r2, [r3, #56]	; 0x38
   20ed0:	641a      	str	r2, [r3, #64]	; 0x40
   20ed2:	649a      	str	r2, [r3, #72]	; 0x48
   20ed4:	651a      	str	r2, [r3, #80]	; 0x50
   20ed6:	659a      	str	r2, [r3, #88]	; 0x58
   20ed8:	661a      	str	r2, [r3, #96]	; 0x60
   20eda:	669a      	str	r2, [r3, #104]	; 0x68
   20edc:	671a      	str	r2, [r3, #112]	; 0x70
   20ede:	679a      	str	r2, [r3, #120]	; 0x78
   20ee0:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   20ee4:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   20ee8:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   20eec:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   20ef0:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   20ef4:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   20ef8:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   20efc:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   20f00:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   20f04:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   20f08:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   20f0c:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   20f10:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   20f14:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   20f18:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   20f1c:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   20f20:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   20f24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20f28:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   20f2c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   20f30:	4620      	mov	r0, r4
   20f32:	7035      	strb	r5, [r6, #0]
   20f34:	bd70      	pop	{r4, r5, r6, pc}
   20f36:	bf00      	nop
   20f38:	20021c24 	.word	0x20021c24
   20f3c:	20021c64 	.word	0x20021c64
   20f40:	20021c68 	.word	0x20021c68
   20f44:	20021ca4 	.word	0x20021ca4
   20f48:	20026294 	.word	0x20026294

00020f4c <nrf_mem_register>:
   20f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f50:	4b87      	ldr	r3, [pc, #540]	; (21170 <nrf_mem_register+0x224>)
   20f52:	b087      	sub	sp, #28
   20f54:	781b      	ldrb	r3, [r3, #0]
   20f56:	2b00      	cmp	r3, #0
   20f58:	f000 808c 	beq.w	21074 <nrf_mem_register+0x128>
   20f5c:	b328      	cbz	r0, 20faa <nrf_mem_register+0x5e>
   20f5e:	b321      	cbz	r1, 20faa <nrf_mem_register+0x5e>
   20f60:	780b      	ldrb	r3, [r1, #0]
   20f62:	f8df 8218 	ldr.w	r8, [pc, #536]	; 2117c <nrf_mem_register+0x230>
   20f66:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   20f6a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   20f6e:	685b      	ldr	r3, [r3, #4]
   20f70:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   20f74:	4463      	add	r3, ip
   20f76:	2b10      	cmp	r3, #16
   20f78:	d811      	bhi.n	20f9e <nrf_mem_register+0x52>
   20f7a:	f04f 0a00 	mov.w	sl, #0
   20f7e:	4689      	mov	r9, r1
   20f80:	4b7c      	ldr	r3, [pc, #496]	; (21174 <nrf_mem_register+0x228>)
   20f82:	4f7d      	ldr	r7, [pc, #500]	; (21178 <nrf_mem_register+0x22c>)
   20f84:	681b      	ldr	r3, [r3, #0]
   20f86:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   20f8a:	9300      	str	r3, [sp, #0]
   20f8c:	68b9      	ldr	r1, [r7, #8]
   20f8e:	b191      	cbz	r1, 20fb6 <nrf_mem_register+0x6a>
   20f90:	f10a 0a01 	add.w	sl, sl, #1
   20f94:	f1ba 0f05 	cmp.w	sl, #5
   20f98:	f107 070c 	add.w	r7, r7, #12
   20f9c:	d1f6      	bne.n	20f8c <nrf_mem_register+0x40>
   20f9e:	f248 1b07 	movw	fp, #33031	; 0x8107
   20fa2:	4658      	mov	r0, fp
   20fa4:	b007      	add	sp, #28
   20fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20faa:	f248 1b0e 	movw	fp, #33038	; 0x810e
   20fae:	4658      	mov	r0, fp
   20fb0:	b007      	add	sp, #28
   20fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fb6:	f1bc 0f00 	cmp.w	ip, #0
   20fba:	d061      	beq.n	21080 <nrf_mem_register+0x134>
   20fbc:	460d      	mov	r5, r1
   20fbe:	460c      	mov	r4, r1
   20fc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   20fc4:	eb0e 0b03 	add.w	fp, lr, r3
   20fc8:	885a      	ldrh	r2, [r3, #2]
   20fca:	f833 6b04 	ldrh.w	r6, [r3], #4
   20fce:	4415      	add	r5, r2
   20fd0:	459b      	cmp	fp, r3
   20fd2:	fb02 4406 	mla	r4, r2, r6, r4
   20fd6:	d1f7      	bne.n	20fc8 <nrf_mem_register+0x7c>
   20fd8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   20fdc:	42a3      	cmp	r3, r4
   20fde:	d3d7      	bcc.n	20f90 <nrf_mem_register+0x44>
   20fe0:	9b00      	ldr	r3, [sp, #0]
   20fe2:	442b      	add	r3, r5
   20fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   20fe8:	d2d2      	bcs.n	20f90 <nrf_mem_register+0x44>
   20fea:	4c63      	ldr	r4, [pc, #396]	; (21178 <nrf_mem_register+0x22c>)
   20fec:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   20ff0:	0092      	lsls	r2, r2, #2
   20ff2:	f8c0 a000 	str.w	sl, [r0]
   20ff6:	18a0      	adds	r0, r4, r2
   20ff8:	f844 9002 	str.w	r9, [r4, r2]
   20ffc:	9a00      	ldr	r2, [sp, #0]
   20ffe:	468b      	mov	fp, r1
   21000:	e9c0 2501 	strd	r2, r5, [r0, #4]
   21004:	f899 2001 	ldrb.w	r2, [r9, #1]
   21008:	485a      	ldr	r0, [pc, #360]	; (21174 <nrf_mem_register+0x228>)
   2100a:	2a01      	cmp	r2, #1
   2100c:	6003      	str	r3, [r0, #0]
   2100e:	d0c8      	beq.n	20fa2 <nrf_mem_register+0x56>
   21010:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   21014:	2b00      	cmp	r3, #0
   21016:	d0c4      	beq.n	20fa2 <nrf_mem_register+0x56>
   21018:	2500      	movs	r5, #0
   2101a:	f8cd 9004 	str.w	r9, [sp, #4]
   2101e:	f8cd a00c 	str.w	sl, [sp, #12]
   21022:	f8cd b014 	str.w	fp, [sp, #20]
   21026:	9b01      	ldr	r3, [sp, #4]
   21028:	781f      	ldrb	r7, [r3, #0]
   2102a:	691a      	ldr	r2, [r3, #16]
   2102c:	013b      	lsls	r3, r7, #4
   2102e:	eb03 0907 	add.w	r9, r3, r7
   21032:	9300      	str	r3, [sp, #0]
   21034:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   21038:	6859      	ldr	r1, [r3, #4]
   2103a:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   2103e:	9102      	str	r1, [sp, #8]
   21040:	bb39      	cbnz	r1, 21092 <nrf_mem_register+0x146>
   21042:	9a03      	ldr	r2, [sp, #12]
   21044:	60dd      	str	r5, [r3, #12]
   21046:	609a      	str	r2, [r3, #8]
   21048:	9b00      	ldr	r3, [sp, #0]
   2104a:	443b      	add	r3, r7
   2104c:	461f      	mov	r7, r3
   2104e:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   21052:	684b      	ldr	r3, [r1, #4]
   21054:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   21058:	3301      	adds	r3, #1
   2105a:	4294      	cmp	r4, r2
   2105c:	604b      	str	r3, [r1, #4]
   2105e:	d912      	bls.n	21086 <nrf_mem_register+0x13a>
   21060:	9b01      	ldr	r3, [sp, #4]
   21062:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   21066:	899b      	ldrh	r3, [r3, #12]
   21068:	3501      	adds	r5, #1
   2106a:	429d      	cmp	r5, r3
   2106c:	d3db      	bcc.n	21026 <nrf_mem_register+0xda>
   2106e:	f8dd b014 	ldr.w	fp, [sp, #20]
   21072:	e796      	b.n	20fa2 <nrf_mem_register+0x56>
   21074:	f248 1b08 	movw	fp, #33032	; 0x8108
   21078:	4658      	mov	r0, fp
   2107a:	b007      	add	sp, #28
   2107c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21080:	9b00      	ldr	r3, [sp, #0]
   21082:	4665      	mov	r5, ip
   21084:	e7ae      	b.n	20fe4 <nrf_mem_register+0x98>
   21086:	9b01      	ldr	r3, [sp, #4]
   21088:	3501      	adds	r5, #1
   2108a:	899b      	ldrh	r3, [r3, #12]
   2108c:	42ab      	cmp	r3, r5
   2108e:	d8ca      	bhi.n	21026 <nrf_mem_register+0xda>
   21090:	e7ed      	b.n	2106e <nrf_mem_register+0x122>
   21092:	2600      	movs	r6, #0
   21094:	f101 3aff 	add.w	sl, r1, #4294967295
   21098:	9504      	str	r5, [sp, #16]
   2109a:	eb06 000a 	add.w	r0, r6, sl
   2109e:	eb09 0206 	add.w	r2, r9, r6
   210a2:	3201      	adds	r2, #1
   210a4:	3001      	adds	r0, #1
   210a6:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   210aa:	0840      	lsrs	r0, r0, #1
   210ac:	4d32      	ldr	r5, [pc, #200]	; (21178 <nrf_mem_register+0x22c>)
   210ae:	eb09 0100 	add.w	r1, r9, r0
   210b2:	eb09 030a 	add.w	r3, r9, sl
   210b6:	3101      	adds	r1, #1
   210b8:	3301      	adds	r3, #1
   210ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   210be:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   210c2:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   210c6:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   210ca:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   210ce:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   210d2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   210d6:	f8db b010 	ldr.w	fp, [fp, #16]
   210da:	6852      	ldr	r2, [r2, #4]
   210dc:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   210e0:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   210e4:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   210e8:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   210ec:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   210f0:	f8de e010 	ldr.w	lr, [lr, #16]
   210f4:	6849      	ldr	r1, [r1, #4]
   210f6:	f8dc c010 	ldr.w	ip, [ip, #16]
   210fa:	685b      	ldr	r3, [r3, #4]
   210fc:	4294      	cmp	r4, r2
   210fe:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   21102:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   21106:	d92d      	bls.n	21164 <nrf_mem_register+0x218>
   21108:	429c      	cmp	r4, r3
   2110a:	d22d      	bcs.n	21168 <nrf_mem_register+0x21c>
   2110c:	428c      	cmp	r4, r1
   2110e:	d924      	bls.n	2115a <nrf_mem_register+0x20e>
   21110:	1c46      	adds	r6, r0, #1
   21112:	45b2      	cmp	sl, r6
   21114:	d2c1      	bcs.n	2109a <nrf_mem_register+0x14e>
   21116:	2610      	movs	r6, #16
   21118:	9d04      	ldr	r5, [sp, #16]
   2111a:	9a02      	ldr	r2, [sp, #8]
   2111c:	42b2      	cmp	r2, r6
   2111e:	d911      	bls.n	21144 <nrf_mem_register+0x1f8>
   21120:	9b00      	ldr	r3, [sp, #0]
   21122:	443b      	add	r3, r7
   21124:	441a      	add	r2, r3
   21126:	4433      	add	r3, r6
   21128:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   2112c:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   21130:	2208      	movs	r2, #8
   21132:	4651      	mov	r1, sl
   21134:	eb0a 0002 	add.w	r0, sl, r2
   21138:	f1aa 0a08 	sub.w	sl, sl, #8
   2113c:	f7eb fd06 	bl	cb4c <memcpy>
   21140:	45d1      	cmp	r9, sl
   21142:	d1f5      	bne.n	21130 <nrf_mem_register+0x1e4>
   21144:	9b00      	ldr	r3, [sp, #0]
   21146:	9903      	ldr	r1, [sp, #12]
   21148:	443b      	add	r3, r7
   2114a:	4433      	add	r3, r6
   2114c:	3301      	adds	r3, #1
   2114e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   21152:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   21156:	6055      	str	r5, [r2, #4]
   21158:	e776      	b.n	21048 <nrf_mem_register+0xfc>
   2115a:	f100 3aff 	add.w	sl, r0, #4294967295
   2115e:	4556      	cmp	r6, sl
   21160:	d99b      	bls.n	2109a <nrf_mem_register+0x14e>
   21162:	e7d8      	b.n	21116 <nrf_mem_register+0x1ca>
   21164:	9d04      	ldr	r5, [sp, #16]
   21166:	e7d8      	b.n	2111a <nrf_mem_register+0x1ce>
   21168:	9d04      	ldr	r5, [sp, #16]
   2116a:	f10a 0601 	add.w	r6, sl, #1
   2116e:	e7d4      	b.n	2111a <nrf_mem_register+0x1ce>
   21170:	20026294 	.word	0x20026294
   21174:	20021c64 	.word	0x20021c64
   21178:	20021c68 	.word	0x20021c68
   2117c:	20021ca4 	.word	0x20021ca4

00021180 <nrf_malloc>:
   21180:	4b03      	ldr	r3, [pc, #12]	; (21190 <nrf_malloc+0x10>)
   21182:	781b      	ldrb	r3, [r3, #0]
   21184:	b10b      	cbz	r3, 2118a <nrf_malloc+0xa>
   21186:	f7ff bd8d 	b.w	20ca4 <mem_alloc.constprop.4>
   2118a:	4618      	mov	r0, r3
   2118c:	4770      	bx	lr
   2118e:	bf00      	nop
   21190:	20026294 	.word	0x20026294

00021194 <nrf_free>:
   21194:	4b04      	ldr	r3, [pc, #16]	; (211a8 <nrf_free+0x14>)
   21196:	781b      	ldrb	r3, [r3, #0]
   21198:	b123      	cbz	r3, 211a4 <nrf_free+0x10>
   2119a:	b118      	cbz	r0, 211a4 <nrf_free+0x10>
   2119c:	4601      	mov	r1, r0
   2119e:	2000      	movs	r0, #0
   211a0:	f7ff bc30 	b.w	20a04 <mem_free>
   211a4:	4770      	bx	lr
   211a6:	bf00      	nop
   211a8:	20026294 	.word	0x20026294

000211ac <nrf_realloc>:
   211ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211b0:	4b52      	ldr	r3, [pc, #328]	; (212fc <nrf_realloc+0x150>)
   211b2:	b087      	sub	sp, #28
   211b4:	781b      	ldrb	r3, [r3, #0]
   211b6:	b173      	cbz	r3, 211d6 <nrf_realloc+0x2a>
   211b8:	b168      	cbz	r0, 211d6 <nrf_realloc+0x2a>
   211ba:	e9cd 0101 	strd	r0, r1, [sp, #4]
   211be:	f8df a148 	ldr.w	sl, [pc, #328]	; 21308 <nrf_realloc+0x15c>
   211c2:	f8da 3000 	ldr.w	r3, [sl]
   211c6:	b10b      	cbz	r3, 211cc <nrf_realloc+0x20>
   211c8:	781a      	ldrb	r2, [r3, #0]
   211ca:	b14a      	cbz	r2, 211e0 <nrf_realloc+0x34>
   211cc:	4b4c      	ldr	r3, [pc, #304]	; (21300 <nrf_realloc+0x154>)
   211ce:	f10a 0a0c 	add.w	sl, sl, #12
   211d2:	4553      	cmp	r3, sl
   211d4:	d1f5      	bne.n	211c2 <nrf_realloc+0x16>
   211d6:	2400      	movs	r4, #0
   211d8:	4620      	mov	r0, r4
   211da:	b007      	add	sp, #28
   211dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211e0:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   211e4:	444a      	add	r2, r9
   211e6:	4591      	cmp	r9, r2
   211e8:	9200      	str	r2, [sp, #0]
   211ea:	d2ef      	bcs.n	211cc <nrf_realloc+0x20>
   211ec:	685a      	ldr	r2, [r3, #4]
   211ee:	f8cd a00c 	str.w	sl, [sp, #12]
   211f2:	46cb      	mov	fp, r9
   211f4:	4692      	mov	sl, r2
   211f6:	f8d3 8010 	ldr.w	r8, [r3, #16]
   211fa:	899f      	ldrh	r7, [r3, #12]
   211fc:	ebab 0e09 	sub.w	lr, fp, r9
   21200:	b1d7      	cbz	r7, 21238 <nrf_realloc+0x8c>
   21202:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   21206:	45e6      	cmp	lr, ip
   21208:	4662      	mov	r2, ip
   2120a:	d31d      	bcc.n	21248 <nrf_realloc+0x9c>
   2120c:	4654      	mov	r4, sl
   2120e:	4671      	mov	r1, lr
   21210:	4665      	mov	r5, ip
   21212:	2000      	movs	r0, #0
   21214:	f108 0304 	add.w	r3, r8, #4
   21218:	e004      	b.n	21224 <nrf_realloc+0x78>
   2121a:	885a      	ldrh	r2, [r3, #2]
   2121c:	3304      	adds	r3, #4
   2121e:	428a      	cmp	r2, r1
   21220:	4615      	mov	r5, r2
   21222:	d814      	bhi.n	2124e <nrf_realloc+0xa2>
   21224:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   21228:	3001      	adds	r0, #1
   2122a:	4287      	cmp	r7, r0
   2122c:	fb02 4406 	mla	r4, r2, r6, r4
   21230:	eba1 0105 	sub.w	r1, r1, r5
   21234:	461e      	mov	r6, r3
   21236:	d1f0      	bne.n	2121a <nrf_realloc+0x6e>
   21238:	9b00      	ldr	r3, [sp, #0]
   2123a:	f10b 0b01 	add.w	fp, fp, #1
   2123e:	455b      	cmp	r3, fp
   21240:	d1dc      	bne.n	211fc <nrf_realloc+0x50>
   21242:	f8dd a00c 	ldr.w	sl, [sp, #12]
   21246:	e7c1      	b.n	211cc <nrf_realloc+0x20>
   21248:	4654      	mov	r4, sl
   2124a:	4671      	mov	r1, lr
   2124c:	4646      	mov	r6, r8
   2124e:	8833      	ldrh	r3, [r6, #0]
   21250:	fb01 4103 	mla	r1, r1, r3, r4
   21254:	9b01      	ldr	r3, [sp, #4]
   21256:	428b      	cmp	r3, r1
   21258:	d1ee      	bne.n	21238 <nrf_realloc+0x8c>
   2125a:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   2125e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   21262:	d0b3      	beq.n	211cc <nrf_realloc+0x20>
   21264:	45e6      	cmp	lr, ip
   21266:	d334      	bcc.n	212d2 <nrf_realloc+0x126>
   21268:	2200      	movs	r2, #0
   2126a:	f108 0304 	add.w	r3, r8, #4
   2126e:	e006      	b.n	2127e <nrf_realloc+0xd2>
   21270:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   21274:	4698      	mov	r8, r3
   21276:	45f4      	cmp	ip, lr
   21278:	f103 0304 	add.w	r3, r3, #4
   2127c:	d829      	bhi.n	212d2 <nrf_realloc+0x126>
   2127e:	3201      	adds	r2, #1
   21280:	42ba      	cmp	r2, r7
   21282:	ebae 0e0c 	sub.w	lr, lr, ip
   21286:	d1f3      	bne.n	21270 <nrf_realloc+0xc4>
   21288:	2300      	movs	r3, #0
   2128a:	9a02      	ldr	r2, [sp, #8]
   2128c:	429a      	cmp	r2, r3
   2128e:	d923      	bls.n	212d8 <nrf_realloc+0x12c>
   21290:	4610      	mov	r0, r2
   21292:	f7ff fd07 	bl	20ca4 <mem_alloc.constprop.4>
   21296:	4604      	mov	r4, r0
   21298:	2800      	cmp	r0, #0
   2129a:	d097      	beq.n	211cc <nrf_realloc+0x20>
   2129c:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   212a0:	462a      	mov	r2, r5
   212a2:	f7eb fc53 	bl	cb4c <memcpy>
   212a6:	462b      	mov	r3, r5
   212a8:	2201      	movs	r2, #1
   212aa:	3303      	adds	r3, #3
   212ac:	4915      	ldr	r1, [pc, #84]	; (21304 <nrf_realloc+0x158>)
   212ae:	4423      	add	r3, r4
   212b0:	f023 0303 	bic.w	r3, r3, #3
   212b4:	ea4f 105b 	mov.w	r0, fp, lsr #5
   212b8:	681e      	ldr	r6, [r3, #0]
   212ba:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   212be:	f00b 031f 	and.w	r3, fp, #31
   212c2:	fa02 f303 	lsl.w	r3, r2, r3
   212c6:	9605      	str	r6, [sp, #20]
   212c8:	432b      	orrs	r3, r5
   212ca:	9a05      	ldr	r2, [sp, #20]
   212cc:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   212d0:	e782      	b.n	211d8 <nrf_realloc+0x2c>
   212d2:	f8b8 3000 	ldrh.w	r3, [r8]
   212d6:	e7d8      	b.n	2128a <nrf_realloc+0xde>
   212d8:	4615      	mov	r5, r2
   212da:	b96a      	cbnz	r2, 212f8 <nrf_realloc+0x14c>
   212dc:	2301      	movs	r3, #1
   212de:	4a09      	ldr	r2, [pc, #36]	; (21304 <nrf_realloc+0x158>)
   212e0:	ea4f 115b 	mov.w	r1, fp, lsr #5
   212e4:	f00b 041f 	and.w	r4, fp, #31
   212e8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   212ec:	40a3      	lsls	r3, r4
   212ee:	4303      	orrs	r3, r0
   212f0:	462c      	mov	r4, r5
   212f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   212f6:	e76f      	b.n	211d8 <nrf_realloc+0x2c>
   212f8:	9c01      	ldr	r4, [sp, #4]
   212fa:	e76d      	b.n	211d8 <nrf_realloc+0x2c>
   212fc:	20026294 	.word	0x20026294
   21300:	20021ca4 	.word	0x20021ca4
   21304:	20021c24 	.word	0x20021c24
   21308:	20021c68 	.word	0x20021c68

0002130c <nrf_shared_malloc>:
   2130c:	4b03      	ldr	r3, [pc, #12]	; (2131c <nrf_shared_malloc+0x10>)
   2130e:	781b      	ldrb	r3, [r3, #0]
   21310:	b10b      	cbz	r3, 21316 <nrf_shared_malloc+0xa>
   21312:	f7ff bbe3 	b.w	20adc <mem_alloc.constprop.5>
   21316:	4618      	mov	r0, r3
   21318:	4770      	bx	lr
   2131a:	bf00      	nop
   2131c:	20026294 	.word	0x20026294

00021320 <nrf_shared_free>:
   21320:	4b04      	ldr	r3, [pc, #16]	; (21334 <nrf_shared_free+0x14>)
   21322:	781b      	ldrb	r3, [r3, #0]
   21324:	b123      	cbz	r3, 21330 <nrf_shared_free+0x10>
   21326:	b118      	cbz	r0, 21330 <nrf_shared_free+0x10>
   21328:	4601      	mov	r1, r0
   2132a:	2001      	movs	r0, #1
   2132c:	f7ff bb6a 	b.w	20a04 <mem_free>
   21330:	4770      	bx	lr
   21332:	bf00      	nop
   21334:	20026294 	.word	0x20026294

00021338 <rpc_dfu_event_handler>:
   21338:	b508      	push	{r3, lr}
   2133a:	4a08      	ldr	r2, [pc, #32]	; (2135c <rpc_dfu_event_handler+0x24>)
   2133c:	68c1      	ldr	r1, [r0, #12]
   2133e:	8812      	ldrh	r2, [r2, #0]
   21340:	4603      	mov	r3, r0
   21342:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   21346:	d005      	beq.n	21354 <rpc_dfu_event_handler+0x1c>
   21348:	6800      	ldr	r0, [r0, #0]
   2134a:	b110      	cbz	r0, 21352 <rpc_dfu_event_handler+0x1a>
   2134c:	f7fd f96a 	bl	1e624 <rpc_dfu_client_data_free>
   21350:	2000      	movs	r0, #0
   21352:	bd08      	pop	{r3, pc}
   21354:	4a02      	ldr	r2, [pc, #8]	; (21360 <rpc_dfu_event_handler+0x28>)
   21356:	2001      	movs	r0, #1
   21358:	6013      	str	r3, [r2, #0]
   2135a:	bd08      	pop	{r3, pc}
   2135c:	200242c0 	.word	0x200242c0
   21360:	20021dc0 	.word	0x20021dc0

00021364 <mfu_interface_init>:
   21364:	2300      	movs	r3, #0
   21366:	b510      	push	{r4, lr}
   21368:	4808      	ldr	r0, [pc, #32]	; (2138c <mfu_interface_init+0x28>)
   2136a:	4909      	ldr	r1, [pc, #36]	; (21390 <mfu_interface_init+0x2c>)
   2136c:	4a09      	ldr	r2, [pc, #36]	; (21394 <mfu_interface_init+0x30>)
   2136e:	4c0a      	ldr	r4, [pc, #40]	; (21398 <mfu_interface_init+0x34>)
   21370:	8003      	strh	r3, [r0, #0]
   21372:	600b      	str	r3, [r1, #0]
   21374:	6013      	str	r3, [r2, #0]
   21376:	6023      	str	r3, [r4, #0]
   21378:	f7fd f91e 	bl	1e5b8 <rpc_dfu_client_init>
   2137c:	b910      	cbnz	r0, 21384 <mfu_interface_init+0x20>
   2137e:	2301      	movs	r3, #1
   21380:	6023      	str	r3, [r4, #0]
   21382:	bd10      	pop	{r4, pc}
   21384:	f04f 30ff 	mov.w	r0, #4294967295
   21388:	bd10      	pop	{r4, pc}
   2138a:	bf00      	nop
   2138c:	200242c0 	.word	0x200242c0
   21390:	20021dc0 	.word	0x20021dc0
   21394:	20021dbc 	.word	0x20021dbc
   21398:	20021db4 	.word	0x20021db4

0002139c <mfu_interface_open>:
   2139c:	b508      	push	{r3, lr}
   2139e:	4b07      	ldr	r3, [pc, #28]	; (213bc <mfu_interface_open+0x20>)
   213a0:	681a      	ldr	r2, [r3, #0]
   213a2:	2a01      	cmp	r2, #1
   213a4:	d103      	bne.n	213ae <mfu_interface_open+0x12>
   213a6:	2202      	movs	r2, #2
   213a8:	601a      	str	r2, [r3, #0]
   213aa:	4805      	ldr	r0, [pc, #20]	; (213c0 <mfu_interface_open+0x24>)
   213ac:	bd08      	pop	{r3, pc}
   213ae:	2001      	movs	r0, #1
   213b0:	f7f5 fc42 	bl	16c38 <bsd_os_errno_set>
   213b4:	f04f 30ff 	mov.w	r0, #4294967295
   213b8:	bd08      	pop	{r3, pc}
   213ba:	bf00      	nop
   213bc:	20021db4 	.word	0x20021db4
   213c0:	49765432 	.word	0x49765432

000213c4 <mfu_interface_close>:
   213c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   213c6:	4c32      	ldr	r4, [pc, #200]	; (21490 <mfu_interface_close+0xcc>)
   213c8:	b083      	sub	sp, #12
   213ca:	6823      	ldr	r3, [r4, #0]
   213cc:	1e9a      	subs	r2, r3, #2
   213ce:	2a01      	cmp	r2, #1
   213d0:	d857      	bhi.n	21482 <mfu_interface_close+0xbe>
   213d2:	2b03      	cmp	r3, #3
   213d4:	d004      	beq.n	213e0 <mfu_interface_close+0x1c>
   213d6:	2301      	movs	r3, #1
   213d8:	2000      	movs	r0, #0
   213da:	6023      	str	r3, [r4, #0]
   213dc:	b003      	add	sp, #12
   213de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   213e0:	2100      	movs	r1, #0
   213e2:	4668      	mov	r0, sp
   213e4:	f7fd f8ee 	bl	1e5c4 <rpc_dfu_client_request_alloc>
   213e8:	4603      	mov	r3, r0
   213ea:	2800      	cmp	r0, #0
   213ec:	d13d      	bne.n	2146a <mfu_interface_close+0xa6>
   213ee:	2104      	movs	r1, #4
   213f0:	4e28      	ldr	r6, [pc, #160]	; (21494 <mfu_interface_close+0xd0>)
   213f2:	9800      	ldr	r0, [sp, #0]
   213f4:	8832      	ldrh	r2, [r6, #0]
   213f6:	7201      	strb	r1, [r0, #8]
   213f8:	3201      	adds	r2, #1
   213fa:	b292      	uxth	r2, r2
   213fc:	0411      	lsls	r1, r2, #16
   213fe:	f041 0106 	orr.w	r1, r1, #6
   21402:	4d25      	ldr	r5, [pc, #148]	; (21498 <mfu_interface_close+0xd4>)
   21404:	60c1      	str	r1, [r0, #12]
   21406:	7103      	strb	r3, [r0, #4]
   21408:	7143      	strb	r3, [r0, #5]
   2140a:	7183      	strb	r3, [r0, #6]
   2140c:	71c3      	strb	r3, [r0, #7]
   2140e:	7243      	strb	r3, [r0, #9]
   21410:	7283      	strb	r3, [r0, #10]
   21412:	72c3      	strb	r3, [r0, #11]
   21414:	2106      	movs	r1, #6
   21416:	8032      	strh	r2, [r6, #0]
   21418:	602b      	str	r3, [r5, #0]
   2141a:	f7fd f8e7 	bl	1e5ec <rpc_dfu_client_request_send>
   2141e:	b9d8      	cbnz	r0, 21458 <mfu_interface_close+0x94>
   21420:	f04f 33ff 	mov.w	r3, #4294967295
   21424:	ae02      	add	r6, sp, #8
   21426:	4627      	mov	r7, r4
   21428:	f846 3d04 	str.w	r3, [r6, #-4]!
   2142c:	e004      	b.n	21438 <mfu_interface_close+0x74>
   2142e:	4631      	mov	r1, r6
   21430:	4638      	mov	r0, r7
   21432:	f7f5 fb49 	bl	16ac8 <bsd_os_timedwait>
   21436:	b9f0      	cbnz	r0, 21476 <mfu_interface_close+0xb2>
   21438:	6828      	ldr	r0, [r5, #0]
   2143a:	2800      	cmp	r0, #0
   2143c:	d0f7      	beq.n	2142e <mfu_interface_close+0x6a>
   2143e:	6905      	ldr	r5, [r0, #16]
   21440:	f7fd f8e8 	bl	1e614 <rpc_dfu_client_message_free>
   21444:	2d00      	cmp	r5, #0
   21446:	d0c6      	beq.n	213d6 <mfu_interface_close+0x12>
   21448:	4b14      	ldr	r3, [pc, #80]	; (2149c <mfu_interface_close+0xd8>)
   2144a:	2008      	movs	r0, #8
   2144c:	601d      	str	r5, [r3, #0]
   2144e:	f7f5 fbf3 	bl	16c38 <bsd_os_errno_set>
   21452:	f04f 30ff 	mov.w	r0, #4294967295
   21456:	e7c1      	b.n	213dc <mfu_interface_close+0x18>
   21458:	9800      	ldr	r0, [sp, #0]
   2145a:	6803      	ldr	r3, [r0, #0]
   2145c:	b11b      	cbz	r3, 21466 <mfu_interface_close+0xa2>
   2145e:	4618      	mov	r0, r3
   21460:	f7fd f8e0 	bl	1e624 <rpc_dfu_client_data_free>
   21464:	9800      	ldr	r0, [sp, #0]
   21466:	f7fd f8d5 	bl	1e614 <rpc_dfu_client_message_free>
   2146a:	200c      	movs	r0, #12
   2146c:	f7f5 fbe4 	bl	16c38 <bsd_os_errno_set>
   21470:	f04f 30ff 	mov.w	r0, #4294967295
   21474:	e7b2      	b.n	213dc <mfu_interface_close+0x18>
   21476:	203c      	movs	r0, #60	; 0x3c
   21478:	f7f5 fbde 	bl	16c38 <bsd_os_errno_set>
   2147c:	f04f 30ff 	mov.w	r0, #4294967295
   21480:	e7ac      	b.n	213dc <mfu_interface_close+0x18>
   21482:	2001      	movs	r0, #1
   21484:	f7f5 fbd8 	bl	16c38 <bsd_os_errno_set>
   21488:	f04f 30ff 	mov.w	r0, #4294967295
   2148c:	e7a6      	b.n	213dc <mfu_interface_close+0x18>
   2148e:	bf00      	nop
   21490:	20021db4 	.word	0x20021db4
   21494:	200242c0 	.word	0x200242c0
   21498:	20021dc0 	.word	0x20021dc0
   2149c:	20021db8 	.word	0x20021db8

000214a0 <mfu_interface_sendto>:
   214a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   214a4:	4e64      	ldr	r6, [pc, #400]	; (21638 <mfu_interface_sendto+0x198>)
   214a6:	460f      	mov	r7, r1
   214a8:	6831      	ldr	r1, [r6, #0]
   214aa:	4615      	mov	r5, r2
   214ac:	1e8a      	subs	r2, r1, #2
   214ae:	2a01      	cmp	r2, #1
   214b0:	b082      	sub	sp, #8
   214b2:	f200 80b4 	bhi.w	2161e <mfu_interface_sendto+0x17e>
   214b6:	2f00      	cmp	r7, #0
   214b8:	f000 80a5 	beq.w	21606 <mfu_interface_sendto+0x166>
   214bc:	2d00      	cmp	r5, #0
   214be:	f000 80a2 	beq.w	21606 <mfu_interface_sendto+0x166>
   214c2:	2b00      	cmp	r3, #0
   214c4:	f040 80b1 	bne.w	2162a <mfu_interface_sendto+0x18a>
   214c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   214ca:	2b00      	cmp	r3, #0
   214cc:	f040 80a1 	bne.w	21612 <mfu_interface_sendto+0x172>
   214d0:	2902      	cmp	r1, #2
   214d2:	d04f      	beq.n	21574 <mfu_interface_sendto+0xd4>
   214d4:	46e8      	mov	r8, sp
   214d6:	4640      	mov	r0, r8
   214d8:	4629      	mov	r1, r5
   214da:	f7fd f873 	bl	1e5c4 <rpc_dfu_client_request_alloc>
   214de:	4606      	mov	r6, r0
   214e0:	b140      	cbz	r0, 214f4 <mfu_interface_sendto+0x54>
   214e2:	200c      	movs	r0, #12
   214e4:	f7f5 fba8 	bl	16c38 <bsd_os_errno_set>
   214e8:	f04f 35ff 	mov.w	r5, #4294967295
   214ec:	4628      	mov	r0, r5
   214ee:	b002      	add	sp, #8
   214f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   214f4:	9b00      	ldr	r3, [sp, #0]
   214f6:	4639      	mov	r1, r7
   214f8:	6818      	ldr	r0, [r3, #0]
   214fa:	462a      	mov	r2, r5
   214fc:	f7eb fb26 	bl	cb4c <memcpy>
   21500:	2104      	movs	r1, #4
   21502:	4c4e      	ldr	r4, [pc, #312]	; (2163c <mfu_interface_sendto+0x19c>)
   21504:	9800      	ldr	r0, [sp, #0]
   21506:	8823      	ldrh	r3, [r4, #0]
   21508:	6045      	str	r5, [r0, #4]
   2150a:	3301      	adds	r3, #1
   2150c:	b29b      	uxth	r3, r3
   2150e:	041a      	lsls	r2, r3, #16
   21510:	8023      	strh	r3, [r4, #0]
   21512:	430a      	orrs	r2, r1
   21514:	4c4a      	ldr	r4, [pc, #296]	; (21640 <mfu_interface_sendto+0x1a0>)
   21516:	60c2      	str	r2, [r0, #12]
   21518:	7246      	strb	r6, [r0, #9]
   2151a:	7286      	strb	r6, [r0, #10]
   2151c:	72c6      	strb	r6, [r0, #11]
   2151e:	7201      	strb	r1, [r0, #8]
   21520:	6026      	str	r6, [r4, #0]
   21522:	f7fd f863 	bl	1e5ec <rpc_dfu_client_request_send>
   21526:	2800      	cmp	r0, #0
   21528:	d163      	bne.n	215f2 <mfu_interface_sendto+0x152>
   2152a:	f04f 33ff 	mov.w	r3, #4294967295
   2152e:	ae02      	add	r6, sp, #8
   21530:	4f41      	ldr	r7, [pc, #260]	; (21638 <mfu_interface_sendto+0x198>)
   21532:	f846 3d04 	str.w	r3, [r6, #-4]!
   21536:	e004      	b.n	21542 <mfu_interface_sendto+0xa2>
   21538:	4631      	mov	r1, r6
   2153a:	4638      	mov	r0, r7
   2153c:	f7f5 fac4 	bl	16ac8 <bsd_os_timedwait>
   21540:	b978      	cbnz	r0, 21562 <mfu_interface_sendto+0xc2>
   21542:	6820      	ldr	r0, [r4, #0]
   21544:	2800      	cmp	r0, #0
   21546:	d0f7      	beq.n	21538 <mfu_interface_sendto+0x98>
   21548:	6904      	ldr	r4, [r0, #16]
   2154a:	f7fd f863 	bl	1e614 <rpc_dfu_client_message_free>
   2154e:	2c00      	cmp	r4, #0
   21550:	d0cc      	beq.n	214ec <mfu_interface_sendto+0x4c>
   21552:	4b3c      	ldr	r3, [pc, #240]	; (21644 <mfu_interface_sendto+0x1a4>)
   21554:	2008      	movs	r0, #8
   21556:	601c      	str	r4, [r3, #0]
   21558:	f04f 35ff 	mov.w	r5, #4294967295
   2155c:	f7f5 fb6c 	bl	16c38 <bsd_os_errno_set>
   21560:	e7c4      	b.n	214ec <mfu_interface_sendto+0x4c>
   21562:	f04f 35ff 	mov.w	r5, #4294967295
   21566:	203c      	movs	r0, #60	; 0x3c
   21568:	f7f5 fb66 	bl	16c38 <bsd_os_errno_set>
   2156c:	4628      	mov	r0, r5
   2156e:	b002      	add	sp, #8
   21570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21574:	46e8      	mov	r8, sp
   21576:	4619      	mov	r1, r3
   21578:	4640      	mov	r0, r8
   2157a:	f7fd f823 	bl	1e5c4 <rpc_dfu_client_request_alloc>
   2157e:	4602      	mov	r2, r0
   21580:	2800      	cmp	r0, #0
   21582:	d1ae      	bne.n	214e2 <mfu_interface_sendto+0x42>
   21584:	f04f 0c08 	mov.w	ip, #8
   21588:	492c      	ldr	r1, [pc, #176]	; (2163c <mfu_interface_sendto+0x19c>)
   2158a:	482f      	ldr	r0, [pc, #188]	; (21648 <mfu_interface_sendto+0x1a8>)
   2158c:	880b      	ldrh	r3, [r1, #0]
   2158e:	6804      	ldr	r4, [r0, #0]
   21590:	3301      	adds	r3, #1
   21592:	9800      	ldr	r0, [sp, #0]
   21594:	b29b      	uxth	r3, r3
   21596:	800b      	strh	r3, [r1, #0]
   21598:	041b      	lsls	r3, r3, #16
   2159a:	f043 0303 	orr.w	r3, r3, #3
   2159e:	6104      	str	r4, [r0, #16]
   215a0:	4c27      	ldr	r4, [pc, #156]	; (21640 <mfu_interface_sendto+0x1a0>)
   215a2:	60c3      	str	r3, [r0, #12]
   215a4:	7102      	strb	r2, [r0, #4]
   215a6:	7142      	strb	r2, [r0, #5]
   215a8:	7182      	strb	r2, [r0, #6]
   215aa:	71c2      	strb	r2, [r0, #7]
   215ac:	7242      	strb	r2, [r0, #9]
   215ae:	7282      	strb	r2, [r0, #10]
   215b0:	72c2      	strb	r2, [r0, #11]
   215b2:	f880 c008 	strb.w	ip, [r0, #8]
   215b6:	2103      	movs	r1, #3
   215b8:	6022      	str	r2, [r4, #0]
   215ba:	f7fd f817 	bl	1e5ec <rpc_dfu_client_request_send>
   215be:	b9c0      	cbnz	r0, 215f2 <mfu_interface_sendto+0x152>
   215c0:	f04f 33ff 	mov.w	r3, #4294967295
   215c4:	f10d 0908 	add.w	r9, sp, #8
   215c8:	f849 3d04 	str.w	r3, [r9, #-4]!
   215cc:	46b2      	mov	sl, r6
   215ce:	e005      	b.n	215dc <mfu_interface_sendto+0x13c>
   215d0:	4649      	mov	r1, r9
   215d2:	4650      	mov	r0, sl
   215d4:	f7f5 fa78 	bl	16ac8 <bsd_os_timedwait>
   215d8:	2800      	cmp	r0, #0
   215da:	d1c2      	bne.n	21562 <mfu_interface_sendto+0xc2>
   215dc:	6820      	ldr	r0, [r4, #0]
   215de:	2800      	cmp	r0, #0
   215e0:	d0f6      	beq.n	215d0 <mfu_interface_sendto+0x130>
   215e2:	6904      	ldr	r4, [r0, #16]
   215e4:	f7fd f816 	bl	1e614 <rpc_dfu_client_message_free>
   215e8:	2c00      	cmp	r4, #0
   215ea:	d1b2      	bne.n	21552 <mfu_interface_sendto+0xb2>
   215ec:	2303      	movs	r3, #3
   215ee:	6033      	str	r3, [r6, #0]
   215f0:	e771      	b.n	214d6 <mfu_interface_sendto+0x36>
   215f2:	9800      	ldr	r0, [sp, #0]
   215f4:	6803      	ldr	r3, [r0, #0]
   215f6:	b11b      	cbz	r3, 21600 <mfu_interface_sendto+0x160>
   215f8:	4618      	mov	r0, r3
   215fa:	f7fd f813 	bl	1e624 <rpc_dfu_client_data_free>
   215fe:	9800      	ldr	r0, [sp, #0]
   21600:	f7fd f808 	bl	1e614 <rpc_dfu_client_message_free>
   21604:	e76d      	b.n	214e2 <mfu_interface_sendto+0x42>
   21606:	2016      	movs	r0, #22
   21608:	f7f5 fb16 	bl	16c38 <bsd_os_errno_set>
   2160c:	f04f 35ff 	mov.w	r5, #4294967295
   21610:	e76c      	b.n	214ec <mfu_interface_sendto+0x4c>
   21612:	2038      	movs	r0, #56	; 0x38
   21614:	f7f5 fb10 	bl	16c38 <bsd_os_errno_set>
   21618:	f04f 35ff 	mov.w	r5, #4294967295
   2161c:	e766      	b.n	214ec <mfu_interface_sendto+0x4c>
   2161e:	2001      	movs	r0, #1
   21620:	f7f5 fb0a 	bl	16c38 <bsd_os_errno_set>
   21624:	f04f 35ff 	mov.w	r5, #4294967295
   21628:	e760      	b.n	214ec <mfu_interface_sendto+0x4c>
   2162a:	202d      	movs	r0, #45	; 0x2d
   2162c:	f7f5 fb04 	bl	16c38 <bsd_os_errno_set>
   21630:	f04f 35ff 	mov.w	r5, #4294967295
   21634:	e75a      	b.n	214ec <mfu_interface_sendto+0x4c>
   21636:	bf00      	nop
   21638:	20021db4 	.word	0x20021db4
   2163c:	200242c0 	.word	0x200242c0
   21640:	20021dc0 	.word	0x20021dc0
   21644:	20021db8 	.word	0x20021db8
   21648:	20021dbc 	.word	0x20021dbc

0002164c <mfu_interface_setopt>:
   2164c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2164e:	4846      	ldr	r0, [pc, #280]	; (21768 <mfu_interface_setopt+0x11c>)
   21650:	b083      	sub	sp, #12
   21652:	6800      	ldr	r0, [r0, #0]
   21654:	3802      	subs	r0, #2
   21656:	2801      	cmp	r0, #1
   21658:	d877      	bhi.n	2174a <mfu_interface_setopt+0xfe>
   2165a:	f240 2003 	movw	r0, #515	; 0x203
   2165e:	4281      	cmp	r1, r0
   21660:	d16d      	bne.n	2173e <mfu_interface_setopt+0xf2>
   21662:	3a04      	subs	r2, #4
   21664:	2a03      	cmp	r2, #3
   21666:	d85c      	bhi.n	21722 <mfu_interface_setopt+0xd6>
   21668:	e8df f002 	tbb	[pc, r2]
   2166c:	514e024b 	.word	0x514e024b
   21670:	2407      	movs	r4, #7
   21672:	4625      	mov	r5, r4
   21674:	2100      	movs	r1, #0
   21676:	4668      	mov	r0, sp
   21678:	f7fc ffa4 	bl	1e5c4 <rpc_dfu_client_request_alloc>
   2167c:	4603      	mov	r3, r0
   2167e:	2800      	cmp	r0, #0
   21680:	d138      	bne.n	216f4 <mfu_interface_setopt+0xa8>
   21682:	2704      	movs	r7, #4
   21684:	4e39      	ldr	r6, [pc, #228]	; (2176c <mfu_interface_setopt+0x120>)
   21686:	9800      	ldr	r0, [sp, #0]
   21688:	8832      	ldrh	r2, [r6, #0]
   2168a:	4629      	mov	r1, r5
   2168c:	3201      	adds	r2, #1
   2168e:	b292      	uxth	r2, r2
   21690:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   21694:	4c36      	ldr	r4, [pc, #216]	; (21770 <mfu_interface_setopt+0x124>)
   21696:	60c5      	str	r5, [r0, #12]
   21698:	7103      	strb	r3, [r0, #4]
   2169a:	7143      	strb	r3, [r0, #5]
   2169c:	7183      	strb	r3, [r0, #6]
   2169e:	71c3      	strb	r3, [r0, #7]
   216a0:	7243      	strb	r3, [r0, #9]
   216a2:	7283      	strb	r3, [r0, #10]
   216a4:	72c3      	strb	r3, [r0, #11]
   216a6:	7207      	strb	r7, [r0, #8]
   216a8:	8032      	strh	r2, [r6, #0]
   216aa:	6023      	str	r3, [r4, #0]
   216ac:	f7fc ff9e 	bl	1e5ec <rpc_dfu_client_request_send>
   216b0:	b9b8      	cbnz	r0, 216e2 <mfu_interface_setopt+0x96>
   216b2:	f04f 33ff 	mov.w	r3, #4294967295
   216b6:	ad02      	add	r5, sp, #8
   216b8:	4e2b      	ldr	r6, [pc, #172]	; (21768 <mfu_interface_setopt+0x11c>)
   216ba:	f845 3d04 	str.w	r3, [r5, #-4]!
   216be:	e005      	b.n	216cc <mfu_interface_setopt+0x80>
   216c0:	4629      	mov	r1, r5
   216c2:	4630      	mov	r0, r6
   216c4:	f7f5 fa00 	bl	16ac8 <bsd_os_timedwait>
   216c8:	2800      	cmp	r0, #0
   216ca:	d131      	bne.n	21730 <mfu_interface_setopt+0xe4>
   216cc:	6820      	ldr	r0, [r4, #0]
   216ce:	2800      	cmp	r0, #0
   216d0:	d0f6      	beq.n	216c0 <mfu_interface_setopt+0x74>
   216d2:	6904      	ldr	r4, [r0, #16]
   216d4:	f7fc ff9e 	bl	1e614 <rpc_dfu_client_message_free>
   216d8:	2c00      	cmp	r4, #0
   216da:	d13c      	bne.n	21756 <mfu_interface_setopt+0x10a>
   216dc:	4620      	mov	r0, r4
   216de:	b003      	add	sp, #12
   216e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   216e2:	9800      	ldr	r0, [sp, #0]
   216e4:	6803      	ldr	r3, [r0, #0]
   216e6:	b11b      	cbz	r3, 216f0 <mfu_interface_setopt+0xa4>
   216e8:	4618      	mov	r0, r3
   216ea:	f7fc ff9b 	bl	1e624 <rpc_dfu_client_data_free>
   216ee:	9800      	ldr	r0, [sp, #0]
   216f0:	f7fc ff90 	bl	1e614 <rpc_dfu_client_message_free>
   216f4:	200c      	movs	r0, #12
   216f6:	f7f5 fa9f 	bl	16c38 <bsd_os_errno_set>
   216fa:	f04f 30ff 	mov.w	r0, #4294967295
   216fe:	b003      	add	sp, #12
   21700:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21702:	2405      	movs	r4, #5
   21704:	4625      	mov	r5, r4
   21706:	e7b5      	b.n	21674 <mfu_interface_setopt+0x28>
   21708:	2408      	movs	r4, #8
   2170a:	4625      	mov	r5, r4
   2170c:	e7b2      	b.n	21674 <mfu_interface_setopt+0x28>
   2170e:	b1b3      	cbz	r3, 2173e <mfu_interface_setopt+0xf2>
   21710:	9a08      	ldr	r2, [sp, #32]
   21712:	2a04      	cmp	r2, #4
   21714:	d113      	bne.n	2173e <mfu_interface_setopt+0xf2>
   21716:	2000      	movs	r0, #0
   21718:	681a      	ldr	r2, [r3, #0]
   2171a:	4b16      	ldr	r3, [pc, #88]	; (21774 <mfu_interface_setopt+0x128>)
   2171c:	601a      	str	r2, [r3, #0]
   2171e:	b003      	add	sp, #12
   21720:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21722:	202a      	movs	r0, #42	; 0x2a
   21724:	f7f5 fa88 	bl	16c38 <bsd_os_errno_set>
   21728:	f04f 30ff 	mov.w	r0, #4294967295
   2172c:	b003      	add	sp, #12
   2172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21730:	203c      	movs	r0, #60	; 0x3c
   21732:	f7f5 fa81 	bl	16c38 <bsd_os_errno_set>
   21736:	f04f 30ff 	mov.w	r0, #4294967295
   2173a:	b003      	add	sp, #12
   2173c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2173e:	2016      	movs	r0, #22
   21740:	f7f5 fa7a 	bl	16c38 <bsd_os_errno_set>
   21744:	f04f 30ff 	mov.w	r0, #4294967295
   21748:	e7c9      	b.n	216de <mfu_interface_setopt+0x92>
   2174a:	2001      	movs	r0, #1
   2174c:	f7f5 fa74 	bl	16c38 <bsd_os_errno_set>
   21750:	f04f 30ff 	mov.w	r0, #4294967295
   21754:	e7c3      	b.n	216de <mfu_interface_setopt+0x92>
   21756:	4b08      	ldr	r3, [pc, #32]	; (21778 <mfu_interface_setopt+0x12c>)
   21758:	2008      	movs	r0, #8
   2175a:	601c      	str	r4, [r3, #0]
   2175c:	f7f5 fa6c 	bl	16c38 <bsd_os_errno_set>
   21760:	f04f 30ff 	mov.w	r0, #4294967295
   21764:	e7bb      	b.n	216de <mfu_interface_setopt+0x92>
   21766:	bf00      	nop
   21768:	20021db4 	.word	0x20021db4
   2176c:	200242c0 	.word	0x200242c0
   21770:	20021dc0 	.word	0x20021dc0
   21774:	20021dbc 	.word	0x20021dbc
   21778:	20021db8 	.word	0x20021db8

0002177c <mfu_interface_getopt>:
   2177c:	f240 2003 	movw	r0, #515	; 0x203
   21780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21784:	4281      	cmp	r1, r0
   21786:	b082      	sub	sp, #8
   21788:	9e08      	ldr	r6, [sp, #32]
   2178a:	f040 80ae 	bne.w	218ea <mfu_interface_getopt+0x16e>
   2178e:	461d      	mov	r5, r3
   21790:	2b00      	cmp	r3, #0
   21792:	f000 80aa 	beq.w	218ea <mfu_interface_getopt+0x16e>
   21796:	2e00      	cmp	r6, #0
   21798:	f000 80a7 	beq.w	218ea <mfu_interface_getopt+0x16e>
   2179c:	4b5e      	ldr	r3, [pc, #376]	; (21918 <mfu_interface_getopt+0x19c>)
   2179e:	681b      	ldr	r3, [r3, #0]
   217a0:	3b02      	subs	r3, #2
   217a2:	2b01      	cmp	r3, #1
   217a4:	f200 80a7 	bhi.w	218f6 <mfu_interface_getopt+0x17a>
   217a8:	3a01      	subs	r2, #1
   217aa:	2a13      	cmp	r2, #19
   217ac:	d879      	bhi.n	218a2 <mfu_interface_getopt+0x126>
   217ae:	e8df f002 	tbb	[pc, r2]
   217b2:	5f17      	.short	0x5f17
   217b4:	78787878 	.word	0x78787878
   217b8:	78787872 	.word	0x78787872
   217bc:	78787878 	.word	0x78787878
   217c0:	78787878 	.word	0x78787878
   217c4:	0a78      	.short	0x0a78
   217c6:	6833      	ldr	r3, [r6, #0]
   217c8:	2b04      	cmp	r3, #4
   217ca:	f040 808e 	bne.w	218ea <mfu_interface_getopt+0x16e>
   217ce:	2200      	movs	r2, #0
   217d0:	4610      	mov	r0, r2
   217d2:	4b52      	ldr	r3, [pc, #328]	; (2191c <mfu_interface_getopt+0x1a0>)
   217d4:	6819      	ldr	r1, [r3, #0]
   217d6:	601a      	str	r2, [r3, #0]
   217d8:	6029      	str	r1, [r5, #0]
   217da:	b002      	add	sp, #8
   217dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   217e0:	6833      	ldr	r3, [r6, #0]
   217e2:	2b24      	cmp	r3, #36	; 0x24
   217e4:	f040 8081 	bne.w	218ea <mfu_interface_getopt+0x16e>
   217e8:	2401      	movs	r4, #1
   217ea:	46a0      	mov	r8, r4
   217ec:	2100      	movs	r1, #0
   217ee:	4668      	mov	r0, sp
   217f0:	f7fc fee8 	bl	1e5c4 <rpc_dfu_client_request_alloc>
   217f4:	2800      	cmp	r0, #0
   217f6:	d146      	bne.n	21886 <mfu_interface_getopt+0x10a>
   217f8:	4949      	ldr	r1, [pc, #292]	; (21920 <mfu_interface_getopt+0x1a4>)
   217fa:	9b00      	ldr	r3, [sp, #0]
   217fc:	880a      	ldrh	r2, [r1, #0]
   217fe:	f1b8 0f03 	cmp.w	r8, #3
   21802:	f102 0201 	add.w	r2, r2, #1
   21806:	b292      	uxth	r2, r2
   21808:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   2180c:	7118      	strb	r0, [r3, #4]
   2180e:	800a      	strh	r2, [r1, #0]
   21810:	60dc      	str	r4, [r3, #12]
   21812:	7158      	strb	r0, [r3, #5]
   21814:	7198      	strb	r0, [r3, #6]
   21816:	71d8      	strb	r0, [r3, #7]
   21818:	d04b      	beq.n	218b2 <mfu_interface_getopt+0x136>
   2181a:	2104      	movs	r1, #4
   2181c:	2200      	movs	r2, #0
   2181e:	4f41      	ldr	r7, [pc, #260]	; (21924 <mfu_interface_getopt+0x1a8>)
   21820:	6099      	str	r1, [r3, #8]
   21822:	4618      	mov	r0, r3
   21824:	4641      	mov	r1, r8
   21826:	603a      	str	r2, [r7, #0]
   21828:	f7fc fee0 	bl	1e5ec <rpc_dfu_client_request_send>
   2182c:	2800      	cmp	r0, #0
   2182e:	d14d      	bne.n	218cc <mfu_interface_getopt+0x150>
   21830:	f04f 33ff 	mov.w	r3, #4294967295
   21834:	ac02      	add	r4, sp, #8
   21836:	f844 3d04 	str.w	r3, [r4, #-4]!
   2183a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 21918 <mfu_interface_getopt+0x19c>
   2183e:	e005      	b.n	2184c <mfu_interface_getopt+0xd0>
   21840:	4621      	mov	r1, r4
   21842:	4640      	mov	r0, r8
   21844:	f7f5 f940 	bl	16ac8 <bsd_os_timedwait>
   21848:	2800      	cmp	r0, #0
   2184a:	d137      	bne.n	218bc <mfu_interface_getopt+0x140>
   2184c:	6839      	ldr	r1, [r7, #0]
   2184e:	2900      	cmp	r1, #0
   21850:	d0f6      	beq.n	21840 <mfu_interface_getopt+0xc4>
   21852:	690c      	ldr	r4, [r1, #16]
   21854:	2c00      	cmp	r4, #0
   21856:	d154      	bne.n	21902 <mfu_interface_getopt+0x186>
   21858:	6832      	ldr	r2, [r6, #0]
   2185a:	3114      	adds	r1, #20
   2185c:	4628      	mov	r0, r5
   2185e:	f7eb f975 	bl	cb4c <memcpy>
   21862:	6838      	ldr	r0, [r7, #0]
   21864:	f7fc fed6 	bl	1e614 <rpc_dfu_client_message_free>
   21868:	4620      	mov	r0, r4
   2186a:	b002      	add	sp, #8
   2186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21870:	6833      	ldr	r3, [r6, #0]
   21872:	2b04      	cmp	r3, #4
   21874:	d139      	bne.n	218ea <mfu_interface_getopt+0x16e>
   21876:	2402      	movs	r4, #2
   21878:	2100      	movs	r1, #0
   2187a:	4668      	mov	r0, sp
   2187c:	46a0      	mov	r8, r4
   2187e:	f7fc fea1 	bl	1e5c4 <rpc_dfu_client_request_alloc>
   21882:	2800      	cmp	r0, #0
   21884:	d0b8      	beq.n	217f8 <mfu_interface_getopt+0x7c>
   21886:	200c      	movs	r0, #12
   21888:	f7f5 f9d6 	bl	16c38 <bsd_os_errno_set>
   2188c:	f04f 30ff 	mov.w	r0, #4294967295
   21890:	b002      	add	sp, #8
   21892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21896:	6833      	ldr	r3, [r6, #0]
   21898:	2b04      	cmp	r3, #4
   2189a:	d126      	bne.n	218ea <mfu_interface_getopt+0x16e>
   2189c:	2409      	movs	r4, #9
   2189e:	46a0      	mov	r8, r4
   218a0:	e7a4      	b.n	217ec <mfu_interface_getopt+0x70>
   218a2:	202a      	movs	r0, #42	; 0x2a
   218a4:	f7f5 f9c8 	bl	16c38 <bsd_os_errno_set>
   218a8:	f04f 30ff 	mov.w	r0, #4294967295
   218ac:	b002      	add	sp, #8
   218ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   218b2:	4a1d      	ldr	r2, [pc, #116]	; (21928 <mfu_interface_getopt+0x1ac>)
   218b4:	2108      	movs	r1, #8
   218b6:	6812      	ldr	r2, [r2, #0]
   218b8:	611a      	str	r2, [r3, #16]
   218ba:	e7af      	b.n	2181c <mfu_interface_getopt+0xa0>
   218bc:	203c      	movs	r0, #60	; 0x3c
   218be:	f7f5 f9bb 	bl	16c38 <bsd_os_errno_set>
   218c2:	f04f 30ff 	mov.w	r0, #4294967295
   218c6:	b002      	add	sp, #8
   218c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   218cc:	9800      	ldr	r0, [sp, #0]
   218ce:	6803      	ldr	r3, [r0, #0]
   218d0:	b11b      	cbz	r3, 218da <mfu_interface_getopt+0x15e>
   218d2:	4618      	mov	r0, r3
   218d4:	f7fc fea6 	bl	1e624 <rpc_dfu_client_data_free>
   218d8:	9800      	ldr	r0, [sp, #0]
   218da:	f7fc fe9b 	bl	1e614 <rpc_dfu_client_message_free>
   218de:	200c      	movs	r0, #12
   218e0:	f7f5 f9aa 	bl	16c38 <bsd_os_errno_set>
   218e4:	f04f 30ff 	mov.w	r0, #4294967295
   218e8:	e7d2      	b.n	21890 <mfu_interface_getopt+0x114>
   218ea:	2016      	movs	r0, #22
   218ec:	f7f5 f9a4 	bl	16c38 <bsd_os_errno_set>
   218f0:	f04f 30ff 	mov.w	r0, #4294967295
   218f4:	e771      	b.n	217da <mfu_interface_getopt+0x5e>
   218f6:	2001      	movs	r0, #1
   218f8:	f7f5 f99e 	bl	16c38 <bsd_os_errno_set>
   218fc:	f04f 30ff 	mov.w	r0, #4294967295
   21900:	e76b      	b.n	217da <mfu_interface_getopt+0x5e>
   21902:	4b06      	ldr	r3, [pc, #24]	; (2191c <mfu_interface_getopt+0x1a0>)
   21904:	2008      	movs	r0, #8
   21906:	601c      	str	r4, [r3, #0]
   21908:	f7f5 f996 	bl	16c38 <bsd_os_errno_set>
   2190c:	6838      	ldr	r0, [r7, #0]
   2190e:	f7fc fe81 	bl	1e614 <rpc_dfu_client_message_free>
   21912:	f04f 30ff 	mov.w	r0, #4294967295
   21916:	e760      	b.n	217da <mfu_interface_getopt+0x5e>
   21918:	20021db4 	.word	0x20021db4
   2191c:	20021db8 	.word	0x20021db8
   21920:	200242c0 	.word	0x200242c0
   21924:	20021dc0 	.word	0x20021dc0
   21928:	20021dbc 	.word	0x20021dbc

0002192c <interface_init>:
   2192c:	b508      	push	{r3, lr}
   2192e:	f44f 72b4 	mov.w	r2, #360	; 0x168
   21932:	2100      	movs	r1, #0
   21934:	4802      	ldr	r0, [pc, #8]	; (21940 <interface_init+0x14>)
   21936:	f004 fb45 	bl	25fc4 <memset>
   2193a:	2000      	movs	r0, #0
   2193c:	bd08      	pop	{r3, pc}
   2193e:	bf00      	nop
   21940:	20026298 	.word	0x20026298

00021944 <interface_socket_allocate>:
   21944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21946:	4b30      	ldr	r3, [pc, #192]	; (21a08 <interface_socket_allocate+0xc4>)
   21948:	4606      	mov	r6, r0
   2194a:	681d      	ldr	r5, [r3, #0]
   2194c:	4608      	mov	r0, r1
   2194e:	b31d      	cbz	r5, 21998 <interface_socket_allocate+0x54>
   21950:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   21952:	2c00      	cmp	r4, #0
   21954:	d04a      	beq.n	219ec <interface_socket_allocate+0xa8>
   21956:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   21958:	2c00      	cmp	r4, #0
   2195a:	d049      	beq.n	219f0 <interface_socket_allocate+0xac>
   2195c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   2195e:	2c00      	cmp	r4, #0
   21960:	d048      	beq.n	219f4 <interface_socket_allocate+0xb0>
   21962:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   21966:	2900      	cmp	r1, #0
   21968:	d046      	beq.n	219f8 <interface_socket_allocate+0xb4>
   2196a:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   2196e:	b191      	cbz	r1, 21996 <interface_socket_allocate+0x52>
   21970:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   21974:	2900      	cmp	r1, #0
   21976:	d043      	beq.n	21a00 <interface_socket_allocate+0xbc>
   21978:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   2197c:	2900      	cmp	r1, #0
   2197e:	d041      	beq.n	21a04 <interface_socket_allocate+0xc0>
   21980:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   21984:	2900      	cmp	r1, #0
   21986:	d039      	beq.n	219fc <interface_socket_allocate+0xb8>
   21988:	f04f 35ff 	mov.w	r5, #4294967295
   2198c:	2069      	movs	r0, #105	; 0x69
   2198e:	f7f5 f953 	bl	16c38 <bsd_os_errno_set>
   21992:	4628      	mov	r0, r5
   21994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21996:	2505      	movs	r5, #5
   21998:	f04f 0c01 	mov.w	ip, #1
   2199c:	f04f 37ff 	mov.w	r7, #4294967295
   219a0:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   219a4:	00e4      	lsls	r4, r4, #3
   219a6:	f843 c004 	str.w	ip, [r3, r4]
   219aa:	441c      	add	r4, r3
   219ac:	4611      	mov	r1, r2
   219ae:	61a7      	str	r7, [r4, #24]
   219b0:	4622      	mov	r2, r4
   219b2:	f7fe feeb 	bl	2078c <packet_handler_create>
   219b6:	4603      	mov	r3, r0
   219b8:	61e0      	str	r0, [r4, #28]
   219ba:	b158      	cbz	r0, 219d4 <interface_socket_allocate+0x90>
   219bc:	681b      	ldr	r3, [r3, #0]
   219be:	681b      	ldr	r3, [r3, #0]
   219c0:	4798      	blx	r3
   219c2:	b910      	cbnz	r0, 219ca <interface_socket_allocate+0x86>
   219c4:	6034      	str	r4, [r6, #0]
   219c6:	4628      	mov	r0, r5
   219c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   219ca:	69e0      	ldr	r0, [r4, #28]
   219cc:	f7fe fefe 	bl	207cc <packet_handler_delete>
   219d0:	2300      	movs	r3, #0
   219d2:	61e3      	str	r3, [r4, #28]
   219d4:	f04f 35ff 	mov.w	r5, #4294967295
   219d8:	2228      	movs	r2, #40	; 0x28
   219da:	2100      	movs	r1, #0
   219dc:	4620      	mov	r0, r4
   219de:	f004 faf1 	bl	25fc4 <memset>
   219e2:	200c      	movs	r0, #12
   219e4:	f7f5 f928 	bl	16c38 <bsd_os_errno_set>
   219e8:	4628      	mov	r0, r5
   219ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   219ec:	2501      	movs	r5, #1
   219ee:	e7d3      	b.n	21998 <interface_socket_allocate+0x54>
   219f0:	2502      	movs	r5, #2
   219f2:	e7d1      	b.n	21998 <interface_socket_allocate+0x54>
   219f4:	2503      	movs	r5, #3
   219f6:	e7cf      	b.n	21998 <interface_socket_allocate+0x54>
   219f8:	2504      	movs	r5, #4
   219fa:	e7cd      	b.n	21998 <interface_socket_allocate+0x54>
   219fc:	2508      	movs	r5, #8
   219fe:	e7cb      	b.n	21998 <interface_socket_allocate+0x54>
   21a00:	2506      	movs	r5, #6
   21a02:	e7c9      	b.n	21998 <interface_socket_allocate+0x54>
   21a04:	2507      	movs	r5, #7
   21a06:	e7c7      	b.n	21998 <interface_socket_allocate+0x54>
   21a08:	20026298 	.word	0x20026298

00021a0c <interface_socket_free>:
   21a0c:	2808      	cmp	r0, #8
   21a0e:	d900      	bls.n	21a12 <interface_socket_free+0x6>
   21a10:	4770      	bx	lr
   21a12:	b510      	push	{r4, lr}
   21a14:	4c07      	ldr	r4, [pc, #28]	; (21a34 <interface_socket_free+0x28>)
   21a16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21a1a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   21a1e:	69e0      	ldr	r0, [r4, #28]
   21a20:	b108      	cbz	r0, 21a26 <interface_socket_free+0x1a>
   21a22:	f7fe fed3 	bl	207cc <packet_handler_delete>
   21a26:	4620      	mov	r0, r4
   21a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21a2c:	2228      	movs	r2, #40	; 0x28
   21a2e:	2100      	movs	r1, #0
   21a30:	f004 bac8 	b.w	25fc4 <memset>
   21a34:	20026298 	.word	0x20026298

00021a38 <interface_socket_packet_handler_update>:
   21a38:	2808      	cmp	r0, #8
   21a3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21a3e:	d81e      	bhi.n	21a7e <interface_socket_packet_handler_update+0x46>
   21a40:	ea4f 0880 	mov.w	r8, r0, lsl #2
   21a44:	4e17      	ldr	r6, [pc, #92]	; (21aa4 <interface_socket_packet_handler_update+0x6c>)
   21a46:	eb08 0300 	add.w	r3, r8, r0
   21a4a:	00db      	lsls	r3, r3, #3
   21a4c:	58f4      	ldr	r4, [r6, r3]
   21a4e:	18f5      	adds	r5, r6, r3
   21a50:	b1ac      	cbz	r4, 21a7e <interface_socket_packet_handler_update+0x46>
   21a52:	460b      	mov	r3, r1
   21a54:	4604      	mov	r4, r0
   21a56:	4611      	mov	r1, r2
   21a58:	4618      	mov	r0, r3
   21a5a:	462a      	mov	r2, r5
   21a5c:	f8d5 901c 	ldr.w	r9, [r5, #28]
   21a60:	f7fe fe94 	bl	2078c <packet_handler_create>
   21a64:	61e8      	str	r0, [r5, #28]
   21a66:	b1d0      	cbz	r0, 21a9e <interface_socket_packet_handler_update+0x66>
   21a68:	6803      	ldr	r3, [r0, #0]
   21a6a:	681b      	ldr	r3, [r3, #0]
   21a6c:	4798      	blx	r3
   21a6e:	4607      	mov	r7, r0
   21a70:	b948      	cbnz	r0, 21a86 <interface_socket_packet_handler_update+0x4e>
   21a72:	4648      	mov	r0, r9
   21a74:	f7fe feaa 	bl	207cc <packet_handler_delete>
   21a78:	4638      	mov	r0, r7
   21a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21a7e:	2705      	movs	r7, #5
   21a80:	4638      	mov	r0, r7
   21a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21a86:	69e8      	ldr	r0, [r5, #28]
   21a88:	f7fe fea0 	bl	207cc <packet_handler_delete>
   21a8c:	eb08 0004 	add.w	r0, r8, r4
   21a90:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   21a94:	f8c6 901c 	str.w	r9, [r6, #28]
   21a98:	4638      	mov	r0, r7
   21a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21a9e:	2704      	movs	r7, #4
   21aa0:	e7f4      	b.n	21a8c <interface_socket_packet_handler_update+0x54>
   21aa2:	bf00      	nop
   21aa4:	20026298 	.word	0x20026298

00021aa8 <interface_socket_wait>:
   21aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21aac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21ab0:	4c0d      	ldr	r4, [pc, #52]	; (21ae8 <interface_socket_wait+0x40>)
   21ab2:	00c0      	lsls	r0, r0, #3
   21ab4:	5825      	ldr	r5, [r4, r0]
   21ab6:	4404      	add	r4, r0
   21ab8:	4015      	ands	r5, r2
   21aba:	428d      	cmp	r5, r1
   21abc:	d011      	beq.n	21ae2 <interface_socket_wait+0x3a>
   21abe:	6860      	ldr	r0, [r4, #4]
   21ac0:	b978      	cbnz	r0, 21ae2 <interface_socket_wait+0x3a>
   21ac2:	4698      	mov	r8, r3
   21ac4:	460f      	mov	r7, r1
   21ac6:	4616      	mov	r6, r2
   21ac8:	4625      	mov	r5, r4
   21aca:	e006      	b.n	21ada <interface_socket_wait+0x32>
   21acc:	686b      	ldr	r3, [r5, #4]
   21ace:	b943      	cbnz	r3, 21ae2 <interface_socket_wait+0x3a>
   21ad0:	4641      	mov	r1, r8
   21ad2:	4620      	mov	r0, r4
   21ad4:	f7f4 fff8 	bl	16ac8 <bsd_os_timedwait>
   21ad8:	b920      	cbnz	r0, 21ae4 <interface_socket_wait+0x3c>
   21ada:	6828      	ldr	r0, [r5, #0]
   21adc:	4030      	ands	r0, r6
   21ade:	42b8      	cmp	r0, r7
   21ae0:	d1f4      	bne.n	21acc <interface_socket_wait+0x24>
   21ae2:	2000      	movs	r0, #0
   21ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ae8:	20026298 	.word	0x20026298

00021aec <interface_from_internal_id_search>:
   21aec:	4b27      	ldr	r3, [pc, #156]	; (21b8c <interface_from_internal_id_search+0xa0>)
   21aee:	681a      	ldr	r2, [r3, #0]
   21af0:	b112      	cbz	r2, 21af8 <interface_from_internal_id_search+0xc>
   21af2:	699a      	ldr	r2, [r3, #24]
   21af4:	4282      	cmp	r2, r0
   21af6:	d039      	beq.n	21b6c <interface_from_internal_id_search+0x80>
   21af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   21afa:	b112      	cbz	r2, 21b02 <interface_from_internal_id_search+0x16>
   21afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21afe:	4282      	cmp	r2, r0
   21b00:	d036      	beq.n	21b70 <interface_from_internal_id_search+0x84>
   21b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   21b04:	b112      	cbz	r2, 21b0c <interface_from_internal_id_search+0x20>
   21b06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   21b08:	4282      	cmp	r2, r0
   21b0a:	d033      	beq.n	21b74 <interface_from_internal_id_search+0x88>
   21b0c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   21b0e:	b11a      	cbz	r2, 21b18 <interface_from_internal_id_search+0x2c>
   21b10:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   21b14:	4282      	cmp	r2, r0
   21b16:	d02f      	beq.n	21b78 <interface_from_internal_id_search+0x8c>
   21b18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   21b1c:	b11a      	cbz	r2, 21b26 <interface_from_internal_id_search+0x3a>
   21b1e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   21b22:	4282      	cmp	r2, r0
   21b24:	d02a      	beq.n	21b7c <interface_from_internal_id_search+0x90>
   21b26:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   21b2a:	b11a      	cbz	r2, 21b34 <interface_from_internal_id_search+0x48>
   21b2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   21b30:	4282      	cmp	r2, r0
   21b32:	d025      	beq.n	21b80 <interface_from_internal_id_search+0x94>
   21b34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   21b38:	b11a      	cbz	r2, 21b42 <interface_from_internal_id_search+0x56>
   21b3a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   21b3e:	4282      	cmp	r2, r0
   21b40:	d020      	beq.n	21b84 <interface_from_internal_id_search+0x98>
   21b42:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   21b46:	b11a      	cbz	r2, 21b50 <interface_from_internal_id_search+0x64>
   21b48:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21b4c:	4282      	cmp	r2, r0
   21b4e:	d01b      	beq.n	21b88 <interface_from_internal_id_search+0x9c>
   21b50:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   21b54:	b13a      	cbz	r2, 21b66 <interface_from_internal_id_search+0x7a>
   21b56:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   21b5a:	4283      	cmp	r3, r0
   21b5c:	bf14      	ite	ne
   21b5e:	f04f 30ff 	movne.w	r0, #4294967295
   21b62:	2008      	moveq	r0, #8
   21b64:	4770      	bx	lr
   21b66:	f04f 30ff 	mov.w	r0, #4294967295
   21b6a:	4770      	bx	lr
   21b6c:	2000      	movs	r0, #0
   21b6e:	4770      	bx	lr
   21b70:	2001      	movs	r0, #1
   21b72:	4770      	bx	lr
   21b74:	2002      	movs	r0, #2
   21b76:	4770      	bx	lr
   21b78:	2003      	movs	r0, #3
   21b7a:	4770      	bx	lr
   21b7c:	2004      	movs	r0, #4
   21b7e:	4770      	bx	lr
   21b80:	2005      	movs	r0, #5
   21b82:	4770      	bx	lr
   21b84:	2006      	movs	r0, #6
   21b86:	4770      	bx	lr
   21b88:	2007      	movs	r0, #7
   21b8a:	4770      	bx	lr
   21b8c:	20026298 	.word	0x20026298

00021b90 <interface_socket_from_handle_get>:
   21b90:	2808      	cmp	r0, #8
   21b92:	d807      	bhi.n	21ba4 <interface_socket_from_handle_get+0x14>
   21b94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21b98:	4b03      	ldr	r3, [pc, #12]	; (21ba8 <interface_socket_from_handle_get+0x18>)
   21b9a:	00c0      	lsls	r0, r0, #3
   21b9c:	581a      	ldr	r2, [r3, r0]
   21b9e:	b10a      	cbz	r2, 21ba4 <interface_socket_from_handle_get+0x14>
   21ba0:	4418      	add	r0, r3
   21ba2:	4770      	bx	lr
   21ba4:	2000      	movs	r0, #0
   21ba6:	4770      	bx	lr
   21ba8:	20026298 	.word	0x20026298

00021bac <interface_socket_event_get>:
   21bac:	b119      	cbz	r1, 21bb6 <interface_socket_event_get+0xa>
   21bae:	2808      	cmp	r0, #8
   21bb0:	d902      	bls.n	21bb8 <interface_socket_event_get+0xc>
   21bb2:	2310      	movs	r3, #16
   21bb4:	600b      	str	r3, [r1, #0]
   21bb6:	4770      	bx	lr
   21bb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21bbc:	4b07      	ldr	r3, [pc, #28]	; (21bdc <interface_socket_event_get+0x30>)
   21bbe:	00c0      	lsls	r0, r0, #3
   21bc0:	581a      	ldr	r2, [r3, r0]
   21bc2:	2a00      	cmp	r2, #0
   21bc4:	d0f5      	beq.n	21bb2 <interface_socket_event_get+0x6>
   21bc6:	581b      	ldr	r3, [r3, r0]
   21bc8:	0c1b      	lsrs	r3, r3, #16
   21bca:	f003 020a 	and.w	r2, r3, #10
   21bce:	2a0a      	cmp	r2, #10
   21bd0:	bf14      	ite	ne
   21bd2:	f003 030f 	andne.w	r3, r3, #15
   21bd6:	f003 030d 	andeq.w	r3, r3, #13
   21bda:	e7eb      	b.n	21bb4 <interface_socket_event_get+0x8>
   21bdc:	20026298 	.word	0x20026298

00021be0 <interface_socket_setopt>:
   21be0:	2808      	cmp	r0, #8
   21be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21be4:	d82c      	bhi.n	21c40 <interface_socket_setopt+0x60>
   21be6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21bea:	4e1e      	ldr	r6, [pc, #120]	; (21c64 <interface_socket_setopt+0x84>)
   21bec:	00c0      	lsls	r0, r0, #3
   21bee:	5834      	ldr	r4, [r6, r0]
   21bf0:	b334      	cbz	r4, 21c40 <interface_socket_setopt+0x60>
   21bf2:	2901      	cmp	r1, #1
   21bf4:	d11e      	bne.n	21c34 <interface_socket_setopt+0x54>
   21bf6:	f1a2 0114 	sub.w	r1, r2, #20
   21bfa:	2901      	cmp	r1, #1
   21bfc:	d81a      	bhi.n	21c34 <interface_socket_setopt+0x54>
   21bfe:	9906      	ldr	r1, [sp, #24]
   21c00:	2908      	cmp	r1, #8
   21c02:	d123      	bne.n	21c4c <interface_socket_setopt+0x6c>
   21c04:	b313      	cbz	r3, 21c4c <interface_socket_setopt+0x6c>
   21c06:	6859      	ldr	r1, [r3, #4]
   21c08:	4c17      	ldr	r4, [pc, #92]	; (21c68 <interface_socket_setopt+0x88>)
   21c0a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   21c0e:	fba4 4101 	umull	r4, r1, r4, r1
   21c12:	0989      	lsrs	r1, r1, #6
   21c14:	460c      	mov	r4, r1
   21c16:	2500      	movs	r5, #0
   21c18:	681b      	ldr	r3, [r3, #0]
   21c1a:	fbe7 4503 	umlal	r4, r5, r7, r3
   21c1e:	2d01      	cmp	r5, #1
   21c20:	bf08      	it	eq
   21c22:	2c00      	cmpeq	r4, #0
   21c24:	d218      	bcs.n	21c58 <interface_socket_setopt+0x78>
   21c26:	4430      	add	r0, r6
   21c28:	2a14      	cmp	r2, #20
   21c2a:	bf0c      	ite	eq
   21c2c:	6204      	streq	r4, [r0, #32]
   21c2e:	6244      	strne	r4, [r0, #36]	; 0x24
   21c30:	2000      	movs	r0, #0
   21c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21c34:	202a      	movs	r0, #42	; 0x2a
   21c36:	f7f4 ffff 	bl	16c38 <bsd_os_errno_set>
   21c3a:	f04f 30ff 	mov.w	r0, #4294967295
   21c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21c40:	2009      	movs	r0, #9
   21c42:	f7f4 fff9 	bl	16c38 <bsd_os_errno_set>
   21c46:	f04f 30ff 	mov.w	r0, #4294967295
   21c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21c4c:	2016      	movs	r0, #22
   21c4e:	f7f4 fff3 	bl	16c38 <bsd_os_errno_set>
   21c52:	f04f 30ff 	mov.w	r0, #4294967295
   21c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21c58:	2025      	movs	r0, #37	; 0x25
   21c5a:	f7f4 ffed 	bl	16c38 <bsd_os_errno_set>
   21c5e:	f04f 30ff 	mov.w	r0, #4294967295
   21c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21c64:	20026298 	.word	0x20026298
   21c68:	10624dd3 	.word	0x10624dd3

00021c6c <interface_socket_getopt>:
   21c6c:	b570      	push	{r4, r5, r6, lr}
   21c6e:	2808      	cmp	r0, #8
   21c70:	9d04      	ldr	r5, [sp, #16]
   21c72:	d835      	bhi.n	21ce0 <interface_socket_getopt+0x74>
   21c74:	4c20      	ldr	r4, [pc, #128]	; (21cf8 <interface_socket_getopt+0x8c>)
   21c76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21c7a:	00c0      	lsls	r0, r0, #3
   21c7c:	5826      	ldr	r6, [r4, r0]
   21c7e:	4404      	add	r4, r0
   21c80:	b376      	cbz	r6, 21ce0 <interface_socket_getopt+0x74>
   21c82:	2901      	cmp	r1, #1
   21c84:	d132      	bne.n	21cec <interface_socket_getopt+0x80>
   21c86:	b32b      	cbz	r3, 21cd4 <interface_socket_getopt+0x68>
   21c88:	b325      	cbz	r5, 21cd4 <interface_socket_getopt+0x68>
   21c8a:	2a04      	cmp	r2, #4
   21c8c:	d019      	beq.n	21cc2 <interface_socket_getopt+0x56>
   21c8e:	f1a2 0114 	sub.w	r1, r2, #20
   21c92:	2901      	cmp	r1, #1
   21c94:	d82a      	bhi.n	21cec <interface_socket_getopt+0x80>
   21c96:	6829      	ldr	r1, [r5, #0]
   21c98:	2908      	cmp	r1, #8
   21c9a:	d11b      	bne.n	21cd4 <interface_socket_getopt+0x68>
   21c9c:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   21ca0:	2a14      	cmp	r2, #20
   21ca2:	bf18      	it	ne
   21ca4:	4601      	movne	r1, r0
   21ca6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   21caa:	4a14      	ldr	r2, [pc, #80]	; (21cfc <interface_socket_getopt+0x90>)
   21cac:	2000      	movs	r0, #0
   21cae:	fba2 5201 	umull	r5, r2, r2, r1
   21cb2:	0992      	lsrs	r2, r2, #6
   21cb4:	fb04 1112 	mls	r1, r4, r2, r1
   21cb8:	fb04 f101 	mul.w	r1, r4, r1
   21cbc:	e9c3 2100 	strd	r2, r1, [r3]
   21cc0:	bd70      	pop	{r4, r5, r6, pc}
   21cc2:	682a      	ldr	r2, [r5, #0]
   21cc4:	2a04      	cmp	r2, #4
   21cc6:	d105      	bne.n	21cd4 <interface_socket_getopt+0x68>
   21cc8:	2200      	movs	r2, #0
   21cca:	6861      	ldr	r1, [r4, #4]
   21ccc:	4610      	mov	r0, r2
   21cce:	6019      	str	r1, [r3, #0]
   21cd0:	6062      	str	r2, [r4, #4]
   21cd2:	bd70      	pop	{r4, r5, r6, pc}
   21cd4:	2016      	movs	r0, #22
   21cd6:	f7f4 ffaf 	bl	16c38 <bsd_os_errno_set>
   21cda:	f04f 30ff 	mov.w	r0, #4294967295
   21cde:	bd70      	pop	{r4, r5, r6, pc}
   21ce0:	2009      	movs	r0, #9
   21ce2:	f7f4 ffa9 	bl	16c38 <bsd_os_errno_set>
   21ce6:	f04f 30ff 	mov.w	r0, #4294967295
   21cea:	bd70      	pop	{r4, r5, r6, pc}
   21cec:	202a      	movs	r0, #42	; 0x2a
   21cee:	f7f4 ffa3 	bl	16c38 <bsd_os_errno_set>
   21cf2:	f04f 30ff 	mov.w	r0, #4294967295
   21cf6:	bd70      	pop	{r4, r5, r6, pc}
   21cf8:	20026298 	.word	0x20026298
   21cfc:	10624dd3 	.word	0x10624dd3

00021d00 <interface_socket_fcntl>:
   21d00:	2808      	cmp	r0, #8
   21d02:	b510      	push	{r4, lr}
   21d04:	d826      	bhi.n	21d54 <interface_socket_fcntl+0x54>
   21d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21d0a:	4c1b      	ldr	r4, [pc, #108]	; (21d78 <interface_socket_fcntl+0x78>)
   21d0c:	00c3      	lsls	r3, r0, #3
   21d0e:	58e0      	ldr	r0, [r4, r3]
   21d10:	b300      	cbz	r0, 21d54 <interface_socket_fcntl+0x54>
   21d12:	2901      	cmp	r1, #1
   21d14:	d005      	beq.n	21d22 <interface_socket_fcntl+0x22>
   21d16:	2902      	cmp	r1, #2
   21d18:	d122      	bne.n	21d60 <interface_socket_fcntl+0x60>
   21d1a:	58e0      	ldr	r0, [r4, r3]
   21d1c:	f3c0 7000 	ubfx	r0, r0, #28, #1
   21d20:	bd10      	pop	{r4, pc}
   21d22:	07d2      	lsls	r2, r2, #31
   21d24:	d410      	bmi.n	21d48 <interface_socket_fcntl+0x48>
   21d26:	58e0      	ldr	r0, [r4, r3]
   21d28:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   21d2c:	d11e      	bne.n	21d6c <interface_socket_fcntl+0x6c>
   21d2e:	58e2      	ldr	r2, [r4, r3]
   21d30:	b292      	uxth	r2, r2
   21d32:	2a0a      	cmp	r2, #10
   21d34:	d01a      	beq.n	21d6c <interface_socket_fcntl+0x6c>
   21d36:	58e2      	ldr	r2, [r4, r3]
   21d38:	b292      	uxth	r2, r2
   21d3a:	2a0b      	cmp	r2, #11
   21d3c:	d016      	beq.n	21d6c <interface_socket_fcntl+0x6c>
   21d3e:	58e2      	ldr	r2, [r4, r3]
   21d40:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   21d44:	50e2      	str	r2, [r4, r3]
   21d46:	bd10      	pop	{r4, pc}
   21d48:	58e2      	ldr	r2, [r4, r3]
   21d4a:	2000      	movs	r0, #0
   21d4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   21d50:	50e2      	str	r2, [r4, r3]
   21d52:	bd10      	pop	{r4, pc}
   21d54:	2009      	movs	r0, #9
   21d56:	f7f4 ff6f 	bl	16c38 <bsd_os_errno_set>
   21d5a:	f04f 30ff 	mov.w	r0, #4294967295
   21d5e:	bd10      	pop	{r4, pc}
   21d60:	2016      	movs	r0, #22
   21d62:	f7f4 ff69 	bl	16c38 <bsd_os_errno_set>
   21d66:	f04f 30ff 	mov.w	r0, #4294967295
   21d6a:	bd10      	pop	{r4, pc}
   21d6c:	2023      	movs	r0, #35	; 0x23
   21d6e:	f7f4 ff63 	bl	16c38 <bsd_os_errno_set>
   21d72:	f04f 30ff 	mov.w	r0, #4294967295
   21d76:	bd10      	pop	{r4, pc}
   21d78:	20026298 	.word	0x20026298

00021d7c <at_client_evt_handler>:
   21d7c:	b120      	cbz	r0, 21d88 <at_client_evt_handler+0xc>
   21d7e:	f850 1b08 	ldr.w	r1, [r0], #8
   21d82:	0c09      	lsrs	r1, r1, #16
   21d84:	f7fc be44 	b.w	1ea10 <rpc_at_event_handler>
   21d88:	4770      	bx	lr
   21d8a:	bf00      	nop

00021d8c <rpc_at_client_init>:
   21d8c:	4801      	ldr	r0, [pc, #4]	; (21d94 <rpc_at_client_init+0x8>)
   21d8e:	f7fb bbfb 	b.w	1d588 <rpc_client_register>
   21d92:	bf00      	nop
   21d94:	0002f34c 	.word	0x0002f34c

00021d98 <rpc_at_client_request_alloc>:
   21d98:	b180      	cbz	r0, 21dbc <rpc_at_client_request_alloc+0x24>
   21d9a:	2300      	movs	r3, #0
   21d9c:	b510      	push	{r4, lr}
   21d9e:	b082      	sub	sp, #8
   21da0:	aa02      	add	r2, sp, #8
   21da2:	4604      	mov	r4, r0
   21da4:	f842 3d04 	str.w	r3, [r2, #-4]!
   21da8:	2003      	movs	r0, #3
   21daa:	f7fb fc67 	bl	1d67c <rpc_message_alloc>
   21dae:	b918      	cbnz	r0, 21db8 <rpc_at_client_request_alloc+0x20>
   21db0:	9b01      	ldr	r3, [sp, #4]
   21db2:	b10b      	cbz	r3, 21db8 <rpc_at_client_request_alloc+0x20>
   21db4:	3308      	adds	r3, #8
   21db6:	6023      	str	r3, [r4, #0]
   21db8:	b002      	add	sp, #8
   21dba:	bd10      	pop	{r4, pc}
   21dbc:	200e      	movs	r0, #14
   21dbe:	4770      	bx	lr

00021dc0 <rpc_at_client_request_send>:
   21dc0:	b150      	cbz	r0, 21dd8 <rpc_at_client_request_send+0x18>
   21dc2:	4603      	mov	r3, r0
   21dc4:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   21dc8:	2003      	movs	r0, #3
   21dca:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   21dce:	f843 1d08 	str.w	r1, [r3, #-8]!
   21dd2:	4619      	mov	r1, r3
   21dd4:	f7fb bc42 	b.w	1d65c <rpc_message_send>
   21dd8:	200e      	movs	r0, #14
   21dda:	4770      	bx	lr

00021ddc <rpc_at_client_message_free>:
   21ddc:	b120      	cbz	r0, 21de8 <rpc_at_client_message_free+0xc>
   21dde:	f1a0 0108 	sub.w	r1, r0, #8
   21de2:	2003      	movs	r0, #3
   21de4:	f7fb bc76 	b.w	1d6d4 <rpc_message_free>
   21de8:	200e      	movs	r0, #14
   21dea:	4770      	bx	lr

00021dec <rpc_at_client_data_free>:
   21dec:	b118      	cbz	r0, 21df6 <rpc_at_client_data_free+0xa>
   21dee:	4601      	mov	r1, r0
   21df0:	2003      	movs	r0, #3
   21df2:	f7fb bc7b 	b.w	1d6ec <rpc_message_data_free>
   21df6:	200e      	movs	r0, #14
   21df8:	4770      	bx	lr
   21dfa:	bf00      	nop

00021dfc <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   21dfc:	4a07      	ldr	r2, [pc, #28]	; (21e1c <SystemInit+0x20>)
   21dfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   21e02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   21e06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   21e0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21e0e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   21e12:	4b03      	ldr	r3, [pc, #12]	; (21e20 <SystemInit+0x24>)
   21e14:	4a03      	ldr	r2, [pc, #12]	; (21e24 <SystemInit+0x28>)
   21e16:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   21e18:	4770      	bx	lr
   21e1a:	bf00      	nop
   21e1c:	e000ed00 	.word	0xe000ed00
   21e20:	200204c8 	.word	0x200204c8
   21e24:	03d09000 	.word	0x03d09000

00021e28 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   21e28:	b508      	push	{r3, lr}
    switch (domain)
   21e2a:	b178      	cbz	r0, 21e4c <nrf_clock_is_running.constprop.0+0x24>
   21e2c:	2801      	cmp	r0, #1
   21e2e:	d019      	beq.n	21e64 <nrf_clock_is_running.constprop.0+0x3c>
            NRFX_ASSERT(0);
   21e30:	f240 3342 	movw	r3, #834	; 0x342
   21e34:	4a10      	ldr	r2, [pc, #64]	; (21e78 <nrf_clock_is_running.constprop.0+0x50>)
   21e36:	4911      	ldr	r1, [pc, #68]	; (21e7c <nrf_clock_is_running.constprop.0+0x54>)
   21e38:	4811      	ldr	r0, [pc, #68]	; (21e80 <nrf_clock_is_running.constprop.0+0x58>)
   21e3a:	f00a f8e0 	bl	2bffe <printk>
   21e3e:	480e      	ldr	r0, [pc, #56]	; (21e78 <nrf_clock_is_running.constprop.0+0x50>)
   21e40:	f240 3142 	movw	r1, #834	; 0x342
   21e44:	f00a faf8 	bl	2c438 <assert_post_action>
            return false;
   21e48:	2000      	movs	r0, #0
   21e4a:	e00a      	b.n	21e62 <nrf_clock_is_running.constprop.0+0x3a>
            if (p_clk_src != NULL)
   21e4c:	4a0d      	ldr	r2, [pc, #52]	; (21e84 <nrf_clock_is_running.constprop.0+0x5c>)
   21e4e:	b121      	cbz	r1, 21e5a <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21e50:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   21e54:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   21e58:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21e5a:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21e5e:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   21e62:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   21e64:	4a07      	ldr	r2, [pc, #28]	; (21e84 <nrf_clock_is_running.constprop.0+0x5c>)
   21e66:	b121      	cbz	r1, 21e72 <nrf_clock_is_running.constprop.0+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21e68:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   21e6c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   21e70:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21e72:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   21e76:	e7f2      	b.n	21e5e <nrf_clock_is_running.constprop.0+0x36>
   21e78:	000325f5 	.word	0x000325f5
   21e7c:	00032a36 	.word	0x00032a36
   21e80:	0002ff0d 	.word	0x0002ff0d
   21e84:	40005000 	.word	0x40005000

00021e88 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   21e88:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   21e8a:	4604      	mov	r4, r0
   21e8c:	b948      	cbnz	r0, 21ea2 <nrfx_clock_init+0x1a>
   21e8e:	490a      	ldr	r1, [pc, #40]	; (21eb8 <nrfx_clock_init+0x30>)
   21e90:	480a      	ldr	r0, [pc, #40]	; (21ebc <nrfx_clock_init+0x34>)
   21e92:	23b3      	movs	r3, #179	; 0xb3
   21e94:	4a0a      	ldr	r2, [pc, #40]	; (21ec0 <nrfx_clock_init+0x38>)
   21e96:	f00a f8b2 	bl	2bffe <printk>
   21e9a:	21b3      	movs	r1, #179	; 0xb3
   21e9c:	4808      	ldr	r0, [pc, #32]	; (21ec0 <nrfx_clock_init+0x38>)
   21e9e:	f00a facb 	bl	2c438 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21ea2:	4b08      	ldr	r3, [pc, #32]	; (21ec4 <nrfx_clock_init+0x3c>)
   21ea4:	791a      	ldrb	r2, [r3, #4]
   21ea6:	b922      	cbnz	r2, 21eb2 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   21ea8:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   21eaa:	4807      	ldr	r0, [pc, #28]	; (21ec8 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   21eac:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   21eae:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21eb0:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21eb2:	4806      	ldr	r0, [pc, #24]	; (21ecc <nrfx_clock_init+0x44>)
    return err_code;
   21eb4:	e7fc      	b.n	21eb0 <nrfx_clock_init+0x28>
   21eb6:	bf00      	nop
   21eb8:	00032666 	.word	0x00032666
   21ebc:	0002ff0d 	.word	0x0002ff0d
   21ec0:	00032629 	.word	0x00032629
   21ec4:	20021dc4 	.word	0x20021dc4
   21ec8:	0bad0000 	.word	0x0bad0000
   21ecc:	0bad000c 	.word	0x0bad000c

00021ed0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21ed0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21ed2:	4b0b      	ldr	r3, [pc, #44]	; (21f00 <nrfx_clock_enable+0x30>)
   21ed4:	791b      	ldrb	r3, [r3, #4]
   21ed6:	b94b      	cbnz	r3, 21eec <nrfx_clock_enable+0x1c>
   21ed8:	490a      	ldr	r1, [pc, #40]	; (21f04 <nrfx_clock_enable+0x34>)
   21eda:	480b      	ldr	r0, [pc, #44]	; (21f08 <nrfx_clock_enable+0x38>)
   21edc:	23cc      	movs	r3, #204	; 0xcc
   21ede:	4a0b      	ldr	r2, [pc, #44]	; (21f0c <nrfx_clock_enable+0x3c>)
   21ee0:	f00a f88d 	bl	2bffe <printk>
   21ee4:	21cc      	movs	r1, #204	; 0xcc
   21ee6:	4809      	ldr	r0, [pc, #36]	; (21f0c <nrfx_clock_enable+0x3c>)
   21ee8:	f00a faa6 	bl	2c438 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   21eec:	2005      	movs	r0, #5
   21eee:	f7f2 fc1d 	bl	1472c <arch_irq_is_enabled>
   21ef2:	b920      	cbnz	r0, 21efe <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   21ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   21ef8:	2005      	movs	r0, #5
   21efa:	f7f2 bc07 	b.w	1470c <arch_irq_enable>
   21efe:	bd08      	pop	{r3, pc}
   21f00:	20021dc4 	.word	0x20021dc4
   21f04:	00032674 	.word	0x00032674
   21f08:	0002ff0d 	.word	0x0002ff0d
   21f0c:	00032629 	.word	0x00032629

00021f10 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21f10:	4b22      	ldr	r3, [pc, #136]	; (21f9c <nrfx_clock_start+0x8c>)
{
   21f12:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21f14:	791b      	ldrb	r3, [r3, #4]
{
   21f16:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21f18:	b95b      	cbnz	r3, 21f32 <nrfx_clock_start+0x22>
   21f1a:	4921      	ldr	r1, [pc, #132]	; (21fa0 <nrfx_clock_start+0x90>)
   21f1c:	4821      	ldr	r0, [pc, #132]	; (21fa4 <nrfx_clock_start+0x94>)
   21f1e:	f44f 7384 	mov.w	r3, #264	; 0x108
   21f22:	4a21      	ldr	r2, [pc, #132]	; (21fa8 <nrfx_clock_start+0x98>)
   21f24:	f00a f86b 	bl	2bffe <printk>
   21f28:	f44f 7184 	mov.w	r1, #264	; 0x108
   21f2c:	481e      	ldr	r0, [pc, #120]	; (21fa8 <nrfx_clock_start+0x98>)
   21f2e:	f00a fa83 	bl	2c438 <assert_post_action>
    switch (domain)
   21f32:	b174      	cbz	r4, 21f52 <nrfx_clock_start+0x42>
   21f34:	2c01      	cmp	r4, #1
   21f36:	d027      	beq.n	21f88 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   21f38:	f44f 739d 	mov.w	r3, #314	; 0x13a
   21f3c:	4a1a      	ldr	r2, [pc, #104]	; (21fa8 <nrfx_clock_start+0x98>)
   21f3e:	491b      	ldr	r1, [pc, #108]	; (21fac <nrfx_clock_start+0x9c>)
   21f40:	4818      	ldr	r0, [pc, #96]	; (21fa4 <nrfx_clock_start+0x94>)
   21f42:	f00a f85c 	bl	2bffe <printk>
   21f46:	f44f 719d 	mov.w	r1, #314	; 0x13a
   21f4a:	4817      	ldr	r0, [pc, #92]	; (21fa8 <nrfx_clock_start+0x98>)
   21f4c:	f00a fa74 	bl	2c438 <assert_post_action>
            break;
    }
}
   21f50:	e016      	b.n	21f80 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   21f52:	4620      	mov	r0, r4
   21f54:	f10d 0107 	add.w	r1, sp, #7
   21f58:	f7ff ff66 	bl	21e28 <nrf_clock_is_running.constprop.0>
   21f5c:	4b14      	ldr	r3, [pc, #80]	; (21fb0 <nrfx_clock_start+0xa0>)
   21f5e:	b188      	cbz	r0, 21f84 <nrfx_clock_start+0x74>
   21f60:	f89d 2007 	ldrb.w	r2, [sp, #7]
   21f64:	2a02      	cmp	r2, #2
   21f66:	d10d      	bne.n	21f84 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21f68:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f6c:	2200      	movs	r2, #0
   21f6e:	4b11      	ldr	r3, [pc, #68]	; (21fb4 <nrfx_clock_start+0xa4>)
   21f70:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   21f72:	2202      	movs	r2, #2
   21f74:	681b      	ldr	r3, [r3, #0]
   21f76:	4b0e      	ldr	r3, [pc, #56]	; (21fb0 <nrfx_clock_start+0xa0>)
   21f78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21f7c:	2201      	movs	r2, #1
   21f7e:	609a      	str	r2, [r3, #8]
}
   21f80:	b002      	add	sp, #8
   21f82:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   21f84:	2201      	movs	r2, #1
   21f86:	e7ef      	b.n	21f68 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f88:	2200      	movs	r2, #0
   21f8a:	4b0b      	ldr	r3, [pc, #44]	; (21fb8 <nrfx_clock_start+0xa8>)
   21f8c:	601a      	str	r2, [r3, #0]
   21f8e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   21f90:	4b07      	ldr	r3, [pc, #28]	; (21fb0 <nrfx_clock_start+0xa0>)
   21f92:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21f96:	601c      	str	r4, [r3, #0]
}
   21f98:	e7f2      	b.n	21f80 <nrfx_clock_start+0x70>
   21f9a:	bf00      	nop
   21f9c:	20021dc4 	.word	0x20021dc4
   21fa0:	00032674 	.word	0x00032674
   21fa4:	0002ff0d 	.word	0x0002ff0d
   21fa8:	00032629 	.word	0x00032629
   21fac:	00032a36 	.word	0x00032a36
   21fb0:	40005000 	.word	0x40005000
   21fb4:	40005104 	.word	0x40005104
   21fb8:	40005100 	.word	0x40005100

00021fbc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fbc:	4b2d      	ldr	r3, [pc, #180]	; (22074 <nrfx_clock_stop+0xb8>)
{
   21fbe:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fc0:	791b      	ldrb	r3, [r3, #4]
{
   21fc2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fc4:	b95b      	cbnz	r3, 21fde <nrfx_clock_stop+0x22>
   21fc6:	492c      	ldr	r1, [pc, #176]	; (22078 <nrfx_clock_stop+0xbc>)
   21fc8:	482c      	ldr	r0, [pc, #176]	; (2207c <nrfx_clock_stop+0xc0>)
   21fca:	f240 1341 	movw	r3, #321	; 0x141
   21fce:	4a2c      	ldr	r2, [pc, #176]	; (22080 <nrfx_clock_stop+0xc4>)
   21fd0:	f00a f815 	bl	2bffe <printk>
   21fd4:	f240 1141 	movw	r1, #321	; 0x141
   21fd8:	4829      	ldr	r0, [pc, #164]	; (22080 <nrfx_clock_stop+0xc4>)
   21fda:	f00a fa2d 	bl	2c438 <assert_post_action>
    switch (domain)
   21fde:	b17c      	cbz	r4, 22000 <nrfx_clock_stop+0x44>
   21fe0:	2c01      	cmp	r4, #1
   21fe2:	d027      	beq.n	22034 <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   21fe4:	4927      	ldr	r1, [pc, #156]	; (22084 <nrfx_clock_stop+0xc8>)
   21fe6:	4825      	ldr	r0, [pc, #148]	; (2207c <nrfx_clock_stop+0xc0>)
   21fe8:	f240 135d 	movw	r3, #349	; 0x15d
   21fec:	4a24      	ldr	r2, [pc, #144]	; (22080 <nrfx_clock_stop+0xc4>)
   21fee:	f00a f806 	bl	2bffe <printk>
   21ff2:	f240 115d 	movw	r1, #349	; 0x15d
   21ff6:	4822      	ldr	r0, [pc, #136]	; (22080 <nrfx_clock_stop+0xc4>)
   21ff8:	f00a fa1e 	bl	2c438 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   21ffc:	b002      	add	sp, #8
   21ffe:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   22000:	2202      	movs	r2, #2
   22002:	4b21      	ldr	r3, [pc, #132]	; (22088 <nrfx_clock_stop+0xcc>)
   22004:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22008:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2200a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2200e:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22012:	f503 7382 	add.w	r3, r3, #260	; 0x104
   22016:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22018:	4b1c      	ldr	r3, [pc, #112]	; (2208c <nrfx_clock_stop+0xd0>)
   2201a:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   2201c:	2100      	movs	r1, #0
   2201e:	4608      	mov	r0, r1
   22020:	f7ff ff02 	bl	21e28 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   22024:	2800      	cmp	r0, #0
   22026:	d0e9      	beq.n	21ffc <nrfx_clock_stop+0x40>
   22028:	2001      	movs	r0, #1
   2202a:	f00c fa4a 	bl	2e4c2 <nrfx_busy_wait>
   2202e:	3c01      	subs	r4, #1
   22030:	d1f4      	bne.n	2201c <nrfx_clock_stop+0x60>
   22032:	e7e3      	b.n	21ffc <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22034:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   22036:	4b14      	ldr	r3, [pc, #80]	; (22088 <nrfx_clock_stop+0xcc>)
   22038:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2203c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22040:	f503 7380 	add.w	r3, r3, #256	; 0x100
   22044:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22046:	4b12      	ldr	r3, [pc, #72]	; (22090 <nrfx_clock_stop+0xd4>)
   22048:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2204a:	f88d 4007 	strb.w	r4, [sp, #7]
   2204e:	f242 7410 	movw	r4, #10000	; 0x2710
   22052:	2001      	movs	r0, #1
   22054:	f10d 0107 	add.w	r1, sp, #7
   22058:	f7ff fee6 	bl	21e28 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2205c:	2800      	cmp	r0, #0
   2205e:	d0cd      	beq.n	21ffc <nrfx_clock_stop+0x40>
   22060:	f89d 0007 	ldrb.w	r0, [sp, #7]
   22064:	2801      	cmp	r0, #1
   22066:	d1c9      	bne.n	21ffc <nrfx_clock_stop+0x40>
   22068:	f00c fa2b 	bl	2e4c2 <nrfx_busy_wait>
   2206c:	3c01      	subs	r4, #1
   2206e:	d1f0      	bne.n	22052 <nrfx_clock_stop+0x96>
   22070:	e7c4      	b.n	21ffc <nrfx_clock_stop+0x40>
   22072:	bf00      	nop
   22074:	20021dc4 	.word	0x20021dc4
   22078:	00032674 	.word	0x00032674
   2207c:	0002ff0d 	.word	0x0002ff0d
   22080:	00032629 	.word	0x00032629
   22084:	00032a36 	.word	0x00032a36
   22088:	40005000 	.word	0x40005000
   2208c:	4000500c 	.word	0x4000500c
   22090:	40005004 	.word	0x40005004

00022094 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22094:	4b15      	ldr	r3, [pc, #84]	; (220ec <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   22096:	b507      	push	{r0, r1, r2, lr}
   22098:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2209a:	b14a      	cbz	r2, 220b0 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2209c:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   2209e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220a0:	6018      	str	r0, [r3, #0]
   220a2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   220a4:	4b12      	ldr	r3, [pc, #72]	; (220f0 <nrfx_power_clock_irq_handler+0x5c>)
   220a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   220aa:	4b12      	ldr	r3, [pc, #72]	; (220f4 <nrfx_power_clock_irq_handler+0x60>)
   220ac:	681b      	ldr	r3, [r3, #0]
   220ae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   220b0:	4b11      	ldr	r3, [pc, #68]	; (220f8 <nrfx_power_clock_irq_handler+0x64>)
   220b2:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   220b4:	b17a      	cbz	r2, 220d6 <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220b6:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   220b8:	f10d 0107 	add.w	r1, sp, #7
   220bc:	6018      	str	r0, [r3, #0]
   220be:	681b      	ldr	r3, [r3, #0]
   220c0:	f7ff feb2 	bl	21e28 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   220c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   220c8:	2202      	movs	r2, #2
   220ca:	2901      	cmp	r1, #1
   220cc:	4b08      	ldr	r3, [pc, #32]	; (220f0 <nrfx_power_clock_irq_handler+0x5c>)
   220ce:	d105      	bne.n	220dc <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   220d0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220d4:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   220d6:	b003      	add	sp, #12
   220d8:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   220dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   220e0:	4b04      	ldr	r3, [pc, #16]	; (220f4 <nrfx_power_clock_irq_handler+0x60>)
   220e2:	2001      	movs	r0, #1
   220e4:	681b      	ldr	r3, [r3, #0]
   220e6:	4798      	blx	r3
}
   220e8:	e7f5      	b.n	220d6 <nrfx_power_clock_irq_handler+0x42>
   220ea:	bf00      	nop
   220ec:	40005100 	.word	0x40005100
   220f0:	40005000 	.word	0x40005000
   220f4:	20021dc4 	.word	0x20021dc4
   220f8:	40005104 	.word	0x40005104

000220fc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   220fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   220fe:	4b10      	ldr	r3, [pc, #64]	; (22140 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   22100:	4f10      	ldr	r7, [pc, #64]	; (22144 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22102:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   22106:	3001      	adds	r0, #1
   22108:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2210c:	42ae      	cmp	r6, r5
   2210e:	d800      	bhi.n	22112 <z_sys_init_run_level+0x16>
		}
	}
}
   22110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   22112:	e9d5 3400 	ldrd	r3, r4, [r5]
   22116:	4620      	mov	r0, r4
   22118:	4798      	blx	r3
   2211a:	b170      	cbz	r0, 2213a <z_sys_init_run_level+0x3e>
   2211c:	b16c      	cbz	r4, 2213a <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   2211e:	2301      	movs	r3, #1
				(dev - __device_start));
   22120:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22122:	4a09      	ldr	r2, [pc, #36]	; (22148 <z_sys_init_run_level+0x4c>)
   22124:	1124      	asrs	r4, r4, #4
   22126:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   22128:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2212c:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   22130:	fa03 f404 	lsl.w	r4, r3, r4
   22134:	4304      	orrs	r4, r0
   22136:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2213a:	3508      	adds	r5, #8
   2213c:	e7e6      	b.n	2210c <z_sys_init_run_level+0x10>
   2213e:	bf00      	nop
   22140:	0002f35c 	.word	0x0002f35c
   22144:	20020a60 	.word	0x20020a60
   22148:	20020ae0 	.word	0x20020ae0

0002214c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   2214c:	4b08      	ldr	r3, [pc, #32]	; (22170 <z_device_ready+0x24>)
   2214e:	1ac0      	subs	r0, r0, r3
   22150:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22152:	4b08      	ldr	r3, [pc, #32]	; (22174 <z_device_ready+0x28>)
   22154:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   22156:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   2215a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2215c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   22160:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   22164:	4210      	tst	r0, r2
}
   22166:	bf0c      	ite	eq
   22168:	4618      	moveq	r0, r3
   2216a:	2000      	movne	r0, #0
   2216c:	4770      	bx	lr
   2216e:	bf00      	nop
   22170:	20020a60 	.word	0x20020a60
   22174:	20020ae0 	.word	0x20020ae0

00022178 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   22178:	4911      	ldr	r1, [pc, #68]	; (221c0 <z_impl_device_get_binding+0x48>)
{
   2217a:	b570      	push	{r4, r5, r6, lr}
   2217c:	4605      	mov	r5, r0
   2217e:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   22180:	4c10      	ldr	r4, [pc, #64]	; (221c4 <z_impl_device_get_binding+0x4c>)
   22182:	428c      	cmp	r4, r1
   22184:	d104      	bne.n	22190 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   22186:	4c0f      	ldr	r4, [pc, #60]	; (221c4 <z_impl_device_get_binding+0x4c>)
   22188:	42b4      	cmp	r4, r6
   2218a:	d10a      	bne.n	221a2 <z_impl_device_get_binding+0x2a>
	return NULL;
   2218c:	2400      	movs	r4, #0
   2218e:	e014      	b.n	221ba <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   22190:	4620      	mov	r0, r4
   22192:	f7ff ffdb 	bl	2214c <z_device_ready>
   22196:	b110      	cbz	r0, 2219e <z_impl_device_get_binding+0x26>
   22198:	6823      	ldr	r3, [r4, #0]
   2219a:	42ab      	cmp	r3, r5
   2219c:	d00d      	beq.n	221ba <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   2219e:	3410      	adds	r4, #16
   221a0:	e7ef      	b.n	22182 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   221a2:	4620      	mov	r0, r4
   221a4:	f7ff ffd2 	bl	2214c <z_device_ready>
   221a8:	b908      	cbnz	r0, 221ae <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   221aa:	3410      	adds	r4, #16
   221ac:	e7ec      	b.n	22188 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   221ae:	4628      	mov	r0, r5
   221b0:	6821      	ldr	r1, [r4, #0]
   221b2:	f7ea fd41 	bl	cc38 <strcmp>
   221b6:	2800      	cmp	r0, #0
   221b8:	d1f7      	bne.n	221aa <z_impl_device_get_binding+0x32>
}
   221ba:	4620      	mov	r0, r4
   221bc:	bd70      	pop	{r4, r5, r6, pc}
   221be:	bf00      	nop
   221c0:	20020ae0 	.word	0x20020ae0
   221c4:	20020a60 	.word	0x20020a60

000221c8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   221c8:	4b01      	ldr	r3, [pc, #4]	; (221d0 <z_impl_z_errno+0x8>)
   221ca:	6898      	ldr	r0, [r3, #8]
}
   221cc:	3064      	adds	r0, #100	; 0x64
   221ce:	4770      	bx	lr
   221d0:	20021dd4 	.word	0x20021dd4

000221d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   221d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   221d8:	4605      	mov	r5, r0
   221da:	460f      	mov	r7, r1
	__asm__ volatile(
   221dc:	f04f 0320 	mov.w	r3, #32
   221e0:	f3ef 8811 	mrs	r8, BASEPRI
   221e4:	f383 8811 	msr	BASEPRI, r3
   221e8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   221ec:	f002 f94a 	bl	24484 <z_impl_k_current_get>
   221f0:	4c2a      	ldr	r4, [pc, #168]	; (2229c <z_fatal_error+0xc8>)
   221f2:	4b2b      	ldr	r3, [pc, #172]	; (222a0 <z_fatal_error+0xcc>)
   221f4:	2d04      	cmp	r5, #4
   221f6:	eba4 0403 	sub.w	r4, r4, r3
   221fa:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   221fe:	bf98      	it	ls
   22200:	4a28      	ldrls	r2, [pc, #160]	; (222a4 <z_fatal_error+0xd0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22202:	ea4f 1484 	mov.w	r4, r4, lsl #6
   22206:	f044 0301 	orr.w	r3, r4, #1
   2220a:	4606      	mov	r6, r0
	switch (reason) {
   2220c:	bf94      	ite	ls
   2220e:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22212:	4a25      	ldrhi	r2, [pc, #148]	; (222a8 <z_fatal_error+0xd4>)
   22214:	f8ad 3000 	strh.w	r3, [sp]
   22218:	4629      	mov	r1, r5
   2221a:	2300      	movs	r3, #0
   2221c:	4823      	ldr	r0, [pc, #140]	; (222ac <z_fatal_error+0xd8>)
   2221e:	f00a f97a 	bl	2c516 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   22222:	b147      	cbz	r7, 22236 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   22224:	69fb      	ldr	r3, [r7, #28]
   22226:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2222a:	b123      	cbz	r3, 22236 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   2222c:	4820      	ldr	r0, [pc, #128]	; (222b0 <z_fatal_error+0xdc>)
   2222e:	f044 0101 	orr.w	r1, r4, #1
   22232:	f00a f931 	bl	2c498 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   22236:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   22238:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   2223c:	f00c fa0e 	bl	2e65c <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   22240:	b348      	cbz	r0, 22296 <z_fatal_error+0xc2>
   22242:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   22244:	4b1b      	ldr	r3, [pc, #108]	; (222b4 <z_fatal_error+0xe0>)
   22246:	2a00      	cmp	r2, #0
   22248:	bf08      	it	eq
   2224a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   2224c:	f7f0 ff1e 	bl	1308c <log_strdup>
   22250:	4623      	mov	r3, r4
   22252:	4602      	mov	r2, r0
   22254:	4631      	mov	r1, r6
   22256:	4818      	ldr	r0, [pc, #96]	; (222b8 <z_fatal_error+0xe4>)
   22258:	f00a f944 	bl	2c4e4 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2225c:	4639      	mov	r1, r7
   2225e:	4628      	mov	r0, r5
   22260:	f7f7 f88c 	bl	1937c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   22264:	2d04      	cmp	r5, #4
   22266:	d10c      	bne.n	22282 <z_fatal_error+0xae>
   22268:	4914      	ldr	r1, [pc, #80]	; (222bc <z_fatal_error+0xe8>)
   2226a:	238e      	movs	r3, #142	; 0x8e
   2226c:	4a14      	ldr	r2, [pc, #80]	; (222c0 <z_fatal_error+0xec>)
   2226e:	4815      	ldr	r0, [pc, #84]	; (222c4 <z_fatal_error+0xf0>)
   22270:	f009 fec5 	bl	2bffe <printk>
   22274:	4814      	ldr	r0, [pc, #80]	; (222c8 <z_fatal_error+0xf4>)
   22276:	f009 fec2 	bl	2bffe <printk>
   2227a:	218e      	movs	r1, #142	; 0x8e
   2227c:	4810      	ldr	r0, [pc, #64]	; (222c0 <z_fatal_error+0xec>)
   2227e:	f00a f8db 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   22282:	f388 8811 	msr	BASEPRI, r8
   22286:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2228a:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   2228c:	b002      	add	sp, #8
   2228e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22292:	f7f2 be5f 	b.w	14f54 <z_impl_k_thread_abort>
		thread_name = "unknown";
   22296:	4807      	ldr	r0, [pc, #28]	; (222b4 <z_fatal_error+0xe0>)
   22298:	e7d8      	b.n	2224c <z_fatal_error+0x78>
   2229a:	bf00      	nop
   2229c:	0002ec44 	.word	0x0002ec44
   222a0:	0002ebc4 	.word	0x0002ebc4
   222a4:	0002f374 	.word	0x0002f374
   222a8:	00032692 	.word	0x00032692
   222ac:	000326a8 	.word	0x000326a8
   222b0:	000326d0 	.word	0x000326d0
   222b4:	000326a0 	.word	0x000326a0
   222b8:	000326f1 	.word	0x000326f1
   222bc:	0003272b 	.word	0x0003272b
   222c0:	00032709 	.word	0x00032709
   222c4:	0002ff0d 	.word	0x0002ff0d
   222c8:	00032748 	.word	0x00032748

000222cc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   222cc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   222ce:	4d0b      	ldr	r5, [pc, #44]	; (222fc <idle+0x30>)
	__asm__ volatile(
   222d0:	f04f 0220 	mov.w	r2, #32
   222d4:	f3ef 8311 	mrs	r3, BASEPRI
   222d8:	f382 8811 	msr	BASEPRI, r2
   222dc:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   222e0:	f002 fd3c 	bl	24d5c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   222e4:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   222e6:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   222e8:	2802      	cmp	r0, #2
   222ea:	bfd8      	it	le
   222ec:	4608      	movle	r0, r1
   222ee:	f002 fd7d 	bl	24dec <z_set_timeout_expiry>
	_kernel.idle = ticks;
   222f2:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   222f4:	f7f2 fab2 	bl	1485c <arch_cpu_idle>
}
   222f8:	e7ea      	b.n	222d0 <idle+0x4>
   222fa:	bf00      	nop
   222fc:	20021dd4 	.word	0x20021dd4

00022300 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   22300:	4802      	ldr	r0, [pc, #8]	; (2230c <z_bss_zero+0xc>)
   22302:	4a03      	ldr	r2, [pc, #12]	; (22310 <z_bss_zero+0x10>)
   22304:	2100      	movs	r1, #0
   22306:	1a12      	subs	r2, r2, r0
   22308:	f003 be5c 	b.w	25fc4 <memset>
   2230c:	20020ce8 	.word	0x20020ce8
   22310:	20026428 	.word	0x20026428

00022314 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   22314:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22316:	4806      	ldr	r0, [pc, #24]	; (22330 <z_data_copy+0x1c>)
   22318:	4a06      	ldr	r2, [pc, #24]	; (22334 <z_data_copy+0x20>)
   2231a:	4907      	ldr	r1, [pc, #28]	; (22338 <z_data_copy+0x24>)
   2231c:	1a12      	subs	r2, r2, r0
   2231e:	f7ea fc15 	bl	cb4c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22326:	4a05      	ldr	r2, [pc, #20]	; (2233c <z_data_copy+0x28>)
   22328:	4905      	ldr	r1, [pc, #20]	; (22340 <z_data_copy+0x2c>)
   2232a:	4806      	ldr	r0, [pc, #24]	; (22344 <z_data_copy+0x30>)
   2232c:	f7ea bc0e 	b.w	cb4c <memcpy>
   22330:	20020000 	.word	0x20020000
   22334:	20020ce8 	.word	0x20020ce8
   22338:	00032e00 	.word	0x00032e00
   2233c:	00000000 	.word	0x00000000
   22340:	00032e00 	.word	0x00032e00
   22344:	20020000 	.word	0x20020000

00022348 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   22348:	2201      	movs	r2, #1
{
   2234a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2234c:	4b0b      	ldr	r3, [pc, #44]	; (2237c <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2234e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   22350:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22352:	f7ff fed3 	bl	220fc <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   22356:	4a0a      	ldr	r2, [pc, #40]	; (22380 <bg_thread_main+0x38>)
   22358:	490a      	ldr	r1, [pc, #40]	; (22384 <bg_thread_main+0x3c>)
   2235a:	480b      	ldr	r0, [pc, #44]	; (22388 <bg_thread_main+0x40>)
   2235c:	f009 fe4f 	bl	2bffe <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   22360:	2003      	movs	r0, #3
   22362:	f7ff fecb 	bl	220fc <z_sys_init_run_level>

	z_init_static_threads();
   22366:	f002 fa23 	bl	247b0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2236a:	f7ef fc87 	bl	11c7c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2236e:	4a07      	ldr	r2, [pc, #28]	; (2238c <bg_thread_main+0x44>)
   22370:	7b13      	ldrb	r3, [r2, #12]
   22372:	f023 0301 	bic.w	r3, r3, #1
   22376:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   22378:	bd08      	pop	{r3, pc}
   2237a:	bf00      	nop
   2237c:	20026295 	.word	0x20026295
   22380:	0003053c 	.word	0x0003053c
   22384:	000327c7 	.word	0x000327c7
   22388:	000327d3 	.word	0x000327d3
   2238c:	20021290 	.word	0x20021290

00022390 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   22390:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   22394:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   22396:	f7f0 fdb7 	bl	12f08 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   2239a:	4b34      	ldr	r3, [pc, #208]	; (2246c <z_cstart+0xdc>)
	uint32_t msp =
   2239c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   223a0:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   223a4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   223a8:	2400      	movs	r4, #0
   223aa:	23e0      	movs	r3, #224	; 0xe0
   223ac:	4d30      	ldr	r5, [pc, #192]	; (22470 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   223ae:	f04f 0b01 	mov.w	fp, #1
   223b2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   223b6:	77ec      	strb	r4, [r5, #31]
   223b8:	762c      	strb	r4, [r5, #24]
   223ba:	766c      	strb	r4, [r5, #25]
   223bc:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   223be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   223c0:	4e2c      	ldr	r6, [pc, #176]	; (22474 <z_cstart+0xe4>)
   223c2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   223c6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   223c8:	f7f2 fd8c 	bl	14ee4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   223cc:	f7f2 fa40 	bl	14850 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   223d0:	f04f 33ff 	mov.w	r3, #4294967295
   223d4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   223d6:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   223d8:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   223dc:	4d26      	ldr	r5, [pc, #152]	; (22478 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   223de:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   223e2:	ab06      	add	r3, sp, #24
   223e4:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   223e6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   223e8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   223ec:	f7ff fe86 	bl	220fc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   223f0:	2001      	movs	r0, #1
   223f2:	f7ff fe83 	bl	220fc <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   223f6:	f8df a098 	ldr.w	sl, [pc, #152]	; 22490 <z_cstart+0x100>
	z_sched_init();
   223fa:	f001 feb9 	bl	24170 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   223fe:	4b1f      	ldr	r3, [pc, #124]	; (2247c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   22400:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   22406:	491e      	ldr	r1, [pc, #120]	; (22480 <z_cstart+0xf0>)
   22408:	9305      	str	r3, [sp, #20]
   2240a:	4630      	mov	r0, r6
   2240c:	4653      	mov	r3, sl
   2240e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   22412:	e9cd 4401 	strd	r4, r4, [sp, #4]
   22416:	9400      	str	r4, [sp, #0]
   22418:	f002 f920 	bl	2465c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2241c:	7b73      	ldrb	r3, [r6, #13]
   2241e:	4680      	mov	r8, r0
   22420:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   22424:	4630      	mov	r0, r6
   22426:	7373      	strb	r3, [r6, #13]
   22428:	f001 f9c4 	bl	237b4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   2242c:	230f      	movs	r3, #15
   2242e:	4f15      	ldr	r7, [pc, #84]	; (22484 <z_cstart+0xf4>)
   22430:	f44f 72a0 	mov.w	r2, #320	; 0x140
   22434:	e9cd 4302 	strd	r4, r3, [sp, #8]
   22438:	4913      	ldr	r1, [pc, #76]	; (22488 <z_cstart+0xf8>)
   2243a:	4b14      	ldr	r3, [pc, #80]	; (2248c <z_cstart+0xfc>)
   2243c:	4638      	mov	r0, r7
   2243e:	e9cd b404 	strd	fp, r4, [sp, #16]
   22442:	e9cd 4400 	strd	r4, r4, [sp]
   22446:	f002 f909 	bl	2465c <z_setup_new_thread>
   2244a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2244c:	4652      	mov	r2, sl
   2244e:	f023 0304 	bic.w	r3, r3, #4
   22452:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   22454:	f105 0318 	add.w	r3, r5, #24
   22458:	4641      	mov	r1, r8
   2245a:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   2245c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   22460:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   22462:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   22464:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   22468:	f7f2 f9cc 	bl	14804 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2246c:	20029468 	.word	0x20029468
   22470:	e000ed00 	.word	0xe000ed00
   22474:	20021290 	.word	0x20021290
   22478:	20021dd4 	.word	0x20021dd4
   2247c:	000327fa 	.word	0x000327fa
   22480:	20028328 	.word	0x20028328
   22484:	200211c8 	.word	0x200211c8
   22488:	20029328 	.word	0x20029328
   2248c:	000222cd 	.word	0x000222cd
   22490:	00022349 	.word	0x00022349

00022494 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   22494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   22496:	4d0f      	ldr	r5, [pc, #60]	; (224d4 <statics_init+0x40>)
   22498:	4c0f      	ldr	r4, [pc, #60]	; (224d8 <statics_init+0x44>)
   2249a:	462f      	mov	r7, r5
   2249c:	4e0f      	ldr	r6, [pc, #60]	; (224dc <statics_init+0x48>)
   2249e:	42ac      	cmp	r4, r5
   224a0:	d90c      	bls.n	224bc <statics_init+0x28>
   224a2:	490f      	ldr	r1, [pc, #60]	; (224e0 <statics_init+0x4c>)
   224a4:	2315      	movs	r3, #21
   224a6:	4632      	mov	r2, r6
   224a8:	480e      	ldr	r0, [pc, #56]	; (224e4 <statics_init+0x50>)
   224aa:	f009 fda8 	bl	2bffe <printk>
   224ae:	480e      	ldr	r0, [pc, #56]	; (224e8 <statics_init+0x54>)
   224b0:	f009 fda5 	bl	2bffe <printk>
   224b4:	2115      	movs	r1, #21
   224b6:	4630      	mov	r0, r6
   224b8:	f009 ffbe 	bl	2c438 <assert_post_action>
   224bc:	42bc      	cmp	r4, r7
   224be:	d301      	bcc.n	224c4 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   224c0:	2000      	movs	r0, #0
   224c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   224c4:	4620      	mov	r0, r4
   224c6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   224ca:	f00b fffe 	bl	2e4ca <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   224ce:	3418      	adds	r4, #24
   224d0:	e7e5      	b.n	2249e <statics_init+0xa>
   224d2:	bf00      	nop
   224d4:	20020b68 	.word	0x20020b68
   224d8:	20020b50 	.word	0x20020b50
   224dc:	00032802 	.word	0x00032802
   224e0:	00032824 	.word	0x00032824
   224e4:	0002ff0d 	.word	0x0002ff0d
   224e8:	000305b8 	.word	0x000305b8

000224ec <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   224ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224f0:	4606      	mov	r6, r0
   224f2:	b087      	sub	sp, #28
   224f4:	468a      	mov	sl, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   224f6:	4610      	mov	r0, r2
   224f8:	4619      	mov	r1, r3
{
   224fa:	4690      	mov	r8, r2
   224fc:	4699      	mov	r9, r3
	int64_t now, end = z_timeout_end_calc(timeout);
   224fe:	f00c f919 	bl	2e734 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22502:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   22506:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2250a:	f04f 0320 	mov.w	r3, #32
   2250e:	f3ef 8511 	mrs	r5, BASEPRI
   22512:	f383 8811 	msr	BASEPRI, r3
   22516:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2251a:	4620      	mov	r0, r4
   2251c:	f002 f9d8 	bl	248d0 <z_spin_lock_valid>
   22520:	b968      	cbnz	r0, 2253e <k_heap_alloc+0x52>
   22522:	235c      	movs	r3, #92	; 0x5c
   22524:	4a3f      	ldr	r2, [pc, #252]	; (22624 <k_heap_alloc+0x138>)
   22526:	4940      	ldr	r1, [pc, #256]	; (22628 <k_heap_alloc+0x13c>)
   22528:	4840      	ldr	r0, [pc, #256]	; (2262c <k_heap_alloc+0x140>)
   2252a:	f009 fd68 	bl	2bffe <printk>
   2252e:	4621      	mov	r1, r4
   22530:	483f      	ldr	r0, [pc, #252]	; (22630 <k_heap_alloc+0x144>)
   22532:	f009 fd64 	bl	2bffe <printk>
   22536:	215c      	movs	r1, #92	; 0x5c
   22538:	483a      	ldr	r0, [pc, #232]	; (22624 <k_heap_alloc+0x138>)
   2253a:	f009 ff7d 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2253e:	4620      	mov	r0, r4
   22540:	f002 f9e4 	bl	2490c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22544:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   22548:	b17b      	cbz	r3, 2256a <k_heap_alloc+0x7e>
   2254a:	ea58 0309 	orrs.w	r3, r8, r9
   2254e:	d00c      	beq.n	2256a <k_heap_alloc+0x7e>
   22550:	4938      	ldr	r1, [pc, #224]	; (22634 <k_heap_alloc+0x148>)
   22552:	2323      	movs	r3, #35	; 0x23
   22554:	4a38      	ldr	r2, [pc, #224]	; (22638 <k_heap_alloc+0x14c>)
   22556:	4835      	ldr	r0, [pc, #212]	; (2262c <k_heap_alloc+0x140>)
   22558:	f009 fd51 	bl	2bffe <printk>
   2255c:	4837      	ldr	r0, [pc, #220]	; (2263c <k_heap_alloc+0x150>)
   2255e:	f009 fd4e 	bl	2bffe <printk>
   22562:	2123      	movs	r1, #35	; 0x23
   22564:	4834      	ldr	r0, [pc, #208]	; (22638 <k_heap_alloc+0x14c>)
   22566:	f009 ff67 	bl	2c438 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2256a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 22624 <k_heap_alloc+0x138>
   2256e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 22628 <k_heap_alloc+0x13c>
   22572:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 2262c <k_heap_alloc+0x140>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   22576:	4651      	mov	r1, sl
   22578:	4630      	mov	r0, r6
   2257a:	f009 ff2e 	bl	2c3da <sys_heap_alloc>
   2257e:	4607      	mov	r7, r0

		now = z_tick_get();
   22580:	f002 fd4e 	bl	25020 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   22584:	b1cf      	cbz	r7, 225ba <k_heap_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22586:	4620      	mov	r0, r4
   22588:	f002 f9b0 	bl	248ec <z_spin_unlock_valid>
   2258c:	b968      	cbnz	r0, 225aa <k_heap_alloc+0xbe>
   2258e:	2384      	movs	r3, #132	; 0x84
   22590:	4a24      	ldr	r2, [pc, #144]	; (22624 <k_heap_alloc+0x138>)
   22592:	492b      	ldr	r1, [pc, #172]	; (22640 <k_heap_alloc+0x154>)
   22594:	4825      	ldr	r0, [pc, #148]	; (2262c <k_heap_alloc+0x140>)
   22596:	f009 fd32 	bl	2bffe <printk>
   2259a:	4621      	mov	r1, r4
   2259c:	4829      	ldr	r0, [pc, #164]	; (22644 <k_heap_alloc+0x158>)
   2259e:	f009 fd2e 	bl	2bffe <printk>
   225a2:	2184      	movs	r1, #132	; 0x84
   225a4:	481f      	ldr	r0, [pc, #124]	; (22624 <k_heap_alloc+0x138>)
   225a6:	f009 ff47 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   225aa:	f385 8811 	msr	BASEPRI, r5
   225ae:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   225b2:	4638      	mov	r0, r7
   225b4:	b007      	add	sp, #28
   225b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   225ba:	9b04      	ldr	r3, [sp, #16]
   225bc:	1a1b      	subs	r3, r3, r0
   225be:	9302      	str	r3, [sp, #8]
   225c0:	9b05      	ldr	r3, [sp, #20]
   225c2:	eb63 0301 	sbc.w	r3, r3, r1
   225c6:	9303      	str	r3, [sp, #12]
   225c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   225cc:	2a01      	cmp	r2, #1
   225ce:	f173 0300 	sbcs.w	r3, r3, #0
   225d2:	dbd8      	blt.n	22586 <k_heap_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   225d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   225d8:	4629      	mov	r1, r5
   225da:	e9cd 2300 	strd	r2, r3, [sp]
   225de:	4620      	mov	r0, r4
   225e0:	f106 020c 	add.w	r2, r6, #12
   225e4:	f001 fc78 	bl	23ed8 <z_pend_curr>
	__asm__ volatile(
   225e8:	f04f 0320 	mov.w	r3, #32
   225ec:	f3ef 8511 	mrs	r5, BASEPRI
   225f0:	f383 8811 	msr	BASEPRI, r3
   225f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225f8:	4620      	mov	r0, r4
   225fa:	f002 f969 	bl	248d0 <z_spin_lock_valid>
   225fe:	b968      	cbnz	r0, 2261c <k_heap_alloc+0x130>
   22600:	235c      	movs	r3, #92	; 0x5c
   22602:	4642      	mov	r2, r8
   22604:	4649      	mov	r1, r9
   22606:	4658      	mov	r0, fp
   22608:	f009 fcf9 	bl	2bffe <printk>
   2260c:	4621      	mov	r1, r4
   2260e:	4808      	ldr	r0, [pc, #32]	; (22630 <k_heap_alloc+0x144>)
   22610:	f009 fcf5 	bl	2bffe <printk>
   22614:	215c      	movs	r1, #92	; 0x5c
   22616:	4640      	mov	r0, r8
   22618:	f009 ff0e 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2261c:	4620      	mov	r0, r4
   2261e:	f002 f975 	bl	2490c <z_spin_lock_set_owner>
	return k;
   22622:	e7a8      	b.n	22576 <k_heap_alloc+0x8a>
   22624:	0002ffdd 	.word	0x0002ffdd
   22628:	0003002f 	.word	0x0003002f
   2262c:	0002ff0d 	.word	0x0002ff0d
   22630:	00030044 	.word	0x00030044
   22634:	0003283a 	.word	0x0003283a
   22638:	00032802 	.word	0x00032802
   2263c:	0003053a 	.word	0x0003053a
   22640:	00030003 	.word	0x00030003
   22644:	0003001a 	.word	0x0003001a

00022648 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2264a:	4605      	mov	r5, r0
   2264c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2264e:	f100 0414 	add.w	r4, r0, #20
   22652:	f04f 0320 	mov.w	r3, #32
   22656:	f3ef 8711 	mrs	r7, BASEPRI
   2265a:	f383 8811 	msr	BASEPRI, r3
   2265e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22662:	4620      	mov	r0, r4
   22664:	f002 f934 	bl	248d0 <z_spin_lock_valid>
   22668:	b968      	cbnz	r0, 22686 <k_heap_free+0x3e>
   2266a:	235c      	movs	r3, #92	; 0x5c
   2266c:	4a1a      	ldr	r2, [pc, #104]	; (226d8 <k_heap_free+0x90>)
   2266e:	491b      	ldr	r1, [pc, #108]	; (226dc <k_heap_free+0x94>)
   22670:	481b      	ldr	r0, [pc, #108]	; (226e0 <k_heap_free+0x98>)
   22672:	f009 fcc4 	bl	2bffe <printk>
   22676:	4621      	mov	r1, r4
   22678:	481a      	ldr	r0, [pc, #104]	; (226e4 <k_heap_free+0x9c>)
   2267a:	f009 fcc0 	bl	2bffe <printk>
   2267e:	215c      	movs	r1, #92	; 0x5c
   22680:	4815      	ldr	r0, [pc, #84]	; (226d8 <k_heap_free+0x90>)
   22682:	f009 fed9 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   22686:	4620      	mov	r0, r4
   22688:	f002 f940 	bl	2490c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2268c:	4628      	mov	r0, r5
   2268e:	4631      	mov	r1, r6
   22690:	f7f0 fa80 	bl	12b94 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   22694:	f105 000c 	add.w	r0, r5, #12
   22698:	f00b ffb5 	bl	2e606 <z_unpend_all>
   2269c:	b128      	cbz	r0, 226aa <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   2269e:	4639      	mov	r1, r7
   226a0:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   226a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   226a6:	f000 be61 	b.w	2336c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226aa:	4620      	mov	r0, r4
   226ac:	f002 f91e 	bl	248ec <z_spin_unlock_valid>
   226b0:	b968      	cbnz	r0, 226ce <k_heap_free+0x86>
   226b2:	2384      	movs	r3, #132	; 0x84
   226b4:	4a08      	ldr	r2, [pc, #32]	; (226d8 <k_heap_free+0x90>)
   226b6:	490c      	ldr	r1, [pc, #48]	; (226e8 <k_heap_free+0xa0>)
   226b8:	4809      	ldr	r0, [pc, #36]	; (226e0 <k_heap_free+0x98>)
   226ba:	f009 fca0 	bl	2bffe <printk>
   226be:	4621      	mov	r1, r4
   226c0:	480a      	ldr	r0, [pc, #40]	; (226ec <k_heap_free+0xa4>)
   226c2:	f009 fc9c 	bl	2bffe <printk>
   226c6:	2184      	movs	r1, #132	; 0x84
   226c8:	4803      	ldr	r0, [pc, #12]	; (226d8 <k_heap_free+0x90>)
   226ca:	f009 feb5 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   226ce:	f387 8811 	msr	BASEPRI, r7
   226d2:	f3bf 8f6f 	isb	sy
}
   226d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   226d8:	0002ffdd 	.word	0x0002ffdd
   226dc:	0003002f 	.word	0x0003002f
   226e0:	0002ff0d 	.word	0x0002ff0d
   226e4:	00030044 	.word	0x00030044
   226e8:	00030003 	.word	0x00030003
   226ec:	0003001a 	.word	0x0003001a

000226f0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   226f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   226f4:	4d16      	ldr	r5, [pc, #88]	; (22750 <init_mem_slab_module+0x60>)
   226f6:	4c17      	ldr	r4, [pc, #92]	; (22754 <init_mem_slab_module+0x64>)
   226f8:	46a8      	mov	r8, r5
   226fa:	4e17      	ldr	r6, [pc, #92]	; (22758 <init_mem_slab_module+0x68>)
   226fc:	42ac      	cmp	r4, r5
   226fe:	d90c      	bls.n	2271a <init_mem_slab_module+0x2a>
   22700:	4916      	ldr	r1, [pc, #88]	; (2275c <init_mem_slab_module+0x6c>)
   22702:	2342      	movs	r3, #66	; 0x42
   22704:	4632      	mov	r2, r6
   22706:	4816      	ldr	r0, [pc, #88]	; (22760 <init_mem_slab_module+0x70>)
   22708:	f009 fc79 	bl	2bffe <printk>
   2270c:	4815      	ldr	r0, [pc, #84]	; (22764 <init_mem_slab_module+0x74>)
   2270e:	f009 fc76 	bl	2bffe <printk>
   22712:	2142      	movs	r1, #66	; 0x42
   22714:	4630      	mov	r0, r6
   22716:	f009 fe8f 	bl	2c438 <assert_post_action>
   2271a:	4544      	cmp	r4, r8
   2271c:	d302      	bcc.n	22724 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   2271e:	2000      	movs	r0, #0
	return rc;
}
   22720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22724:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   22728:	ea41 0302 	orr.w	r3, r1, r2
   2272c:	f013 0303 	ands.w	r3, r3, #3
   22730:	d10b      	bne.n	2274a <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   22732:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   22734:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22736:	4283      	cmp	r3, r0
   22738:	d101      	bne.n	2273e <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2273a:	341c      	adds	r4, #28
   2273c:	e7de      	b.n	226fc <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   2273e:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22740:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   22742:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   22744:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
   22746:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22748:	e7f5      	b.n	22736 <init_mem_slab_module+0x46>
		return -EINVAL;
   2274a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2274e:	e7e7      	b.n	22720 <init_mem_slab_module+0x30>
   22750:	20020b50 	.word	0x20020b50
   22754:	20020b50 	.word	0x20020b50
   22758:	0003287f 	.word	0x0003287f
   2275c:	000328a4 	.word	0x000328a4
   22760:	0002ff0d 	.word	0x0002ff0d
   22764:	000305b8 	.word	0x000305b8

00022768 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   22768:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2276c:	4604      	mov	r4, r0
   2276e:	460d      	mov	r5, r1
   22770:	4616      	mov	r6, r2
   22772:	461f      	mov	r7, r3
	__asm__ volatile(
   22774:	f04f 0320 	mov.w	r3, #32
   22778:	f3ef 8811 	mrs	r8, BASEPRI
   2277c:	f383 8811 	msr	BASEPRI, r3
   22780:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22784:	4826      	ldr	r0, [pc, #152]	; (22820 <k_mem_slab_alloc+0xb8>)
   22786:	f002 f8a3 	bl	248d0 <z_spin_lock_valid>
   2278a:	b968      	cbnz	r0, 227a8 <k_mem_slab_alloc+0x40>
   2278c:	235c      	movs	r3, #92	; 0x5c
   2278e:	4a25      	ldr	r2, [pc, #148]	; (22824 <k_mem_slab_alloc+0xbc>)
   22790:	4925      	ldr	r1, [pc, #148]	; (22828 <k_mem_slab_alloc+0xc0>)
   22792:	4826      	ldr	r0, [pc, #152]	; (2282c <k_mem_slab_alloc+0xc4>)
   22794:	f009 fc33 	bl	2bffe <printk>
   22798:	4921      	ldr	r1, [pc, #132]	; (22820 <k_mem_slab_alloc+0xb8>)
   2279a:	4825      	ldr	r0, [pc, #148]	; (22830 <k_mem_slab_alloc+0xc8>)
   2279c:	f009 fc2f 	bl	2bffe <printk>
   227a0:	215c      	movs	r1, #92	; 0x5c
   227a2:	4820      	ldr	r0, [pc, #128]	; (22824 <k_mem_slab_alloc+0xbc>)
   227a4:	f009 fe48 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   227a8:	481d      	ldr	r0, [pc, #116]	; (22820 <k_mem_slab_alloc+0xb8>)
   227aa:	f002 f8af 	bl	2490c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   227ae:	6963      	ldr	r3, [r4, #20]
   227b0:	b1eb      	cbz	r3, 227ee <k_mem_slab_alloc+0x86>
		/* take a free block */
		*mem = slab->free_list;
   227b2:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   227b4:	681b      	ldr	r3, [r3, #0]
   227b6:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   227b8:	69a3      	ldr	r3, [r4, #24]
   227ba:	3301      	adds	r3, #1
   227bc:	61a3      	str	r3, [r4, #24]
		result = 0;
   227be:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227c0:	4817      	ldr	r0, [pc, #92]	; (22820 <k_mem_slab_alloc+0xb8>)
   227c2:	f002 f893 	bl	248ec <z_spin_unlock_valid>
   227c6:	b968      	cbnz	r0, 227e4 <k_mem_slab_alloc+0x7c>
   227c8:	2384      	movs	r3, #132	; 0x84
   227ca:	4a16      	ldr	r2, [pc, #88]	; (22824 <k_mem_slab_alloc+0xbc>)
   227cc:	4919      	ldr	r1, [pc, #100]	; (22834 <k_mem_slab_alloc+0xcc>)
   227ce:	4817      	ldr	r0, [pc, #92]	; (2282c <k_mem_slab_alloc+0xc4>)
   227d0:	f009 fc15 	bl	2bffe <printk>
   227d4:	4912      	ldr	r1, [pc, #72]	; (22820 <k_mem_slab_alloc+0xb8>)
   227d6:	4818      	ldr	r0, [pc, #96]	; (22838 <k_mem_slab_alloc+0xd0>)
   227d8:	f009 fc11 	bl	2bffe <printk>
   227dc:	2184      	movs	r1, #132	; 0x84
   227de:	4811      	ldr	r0, [pc, #68]	; (22824 <k_mem_slab_alloc+0xbc>)
   227e0:	f009 fe2a 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   227e4:	f388 8811 	msr	BASEPRI, r8
   227e8:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   227ec:	e013      	b.n	22816 <k_mem_slab_alloc+0xae>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   227ee:	ea56 0207 	orrs.w	r2, r6, r7
   227f2:	d103      	bne.n	227fc <k_mem_slab_alloc+0x94>
		result = -ENOMEM;
   227f4:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   227f8:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   227fa:	e7e1      	b.n	227c0 <k_mem_slab_alloc+0x58>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   227fc:	4622      	mov	r2, r4
   227fe:	4641      	mov	r1, r8
   22800:	e9cd 6700 	strd	r6, r7, [sp]
   22804:	4806      	ldr	r0, [pc, #24]	; (22820 <k_mem_slab_alloc+0xb8>)
   22806:	f001 fb67 	bl	23ed8 <z_pend_curr>
		if (result == 0) {
   2280a:	4604      	mov	r4, r0
   2280c:	b918      	cbnz	r0, 22816 <k_mem_slab_alloc+0xae>
			*mem = _current->base.swap_data;
   2280e:	4b0b      	ldr	r3, [pc, #44]	; (2283c <k_mem_slab_alloc+0xd4>)
   22810:	689b      	ldr	r3, [r3, #8]
   22812:	695b      	ldr	r3, [r3, #20]
   22814:	602b      	str	r3, [r5, #0]
}
   22816:	4620      	mov	r0, r4
   22818:	b002      	add	sp, #8
   2281a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2281e:	bf00      	nop
   22820:	20021dcc 	.word	0x20021dcc
   22824:	0002ffdd 	.word	0x0002ffdd
   22828:	0003002f 	.word	0x0003002f
   2282c:	0002ff0d 	.word	0x0002ff0d
   22830:	00030044 	.word	0x00030044
   22834:	00030003 	.word	0x00030003
   22838:	0003001a 	.word	0x0003001a
   2283c:	20021dd4 	.word	0x20021dd4

00022840 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   22840:	b570      	push	{r4, r5, r6, lr}
   22842:	4604      	mov	r4, r0
   22844:	460d      	mov	r5, r1
	__asm__ volatile(
   22846:	f04f 0320 	mov.w	r3, #32
   2284a:	f3ef 8611 	mrs	r6, BASEPRI
   2284e:	f383 8811 	msr	BASEPRI, r3
   22852:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22856:	4822      	ldr	r0, [pc, #136]	; (228e0 <k_mem_slab_free+0xa0>)
   22858:	f002 f83a 	bl	248d0 <z_spin_lock_valid>
   2285c:	b968      	cbnz	r0, 2287a <k_mem_slab_free+0x3a>
   2285e:	235c      	movs	r3, #92	; 0x5c
   22860:	4a20      	ldr	r2, [pc, #128]	; (228e4 <k_mem_slab_free+0xa4>)
   22862:	4921      	ldr	r1, [pc, #132]	; (228e8 <k_mem_slab_free+0xa8>)
   22864:	4821      	ldr	r0, [pc, #132]	; (228ec <k_mem_slab_free+0xac>)
   22866:	f009 fbca 	bl	2bffe <printk>
   2286a:	491d      	ldr	r1, [pc, #116]	; (228e0 <k_mem_slab_free+0xa0>)
   2286c:	4820      	ldr	r0, [pc, #128]	; (228f0 <k_mem_slab_free+0xb0>)
   2286e:	f009 fbc6 	bl	2bffe <printk>
   22872:	215c      	movs	r1, #92	; 0x5c
   22874:	481b      	ldr	r0, [pc, #108]	; (228e4 <k_mem_slab_free+0xa4>)
   22876:	f009 fddf 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2287a:	4819      	ldr	r0, [pc, #100]	; (228e0 <k_mem_slab_free+0xa0>)
   2287c:	f002 f846 	bl	2490c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22880:	4620      	mov	r0, r4
   22882:	f001 fbef 	bl	24064 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   22886:	b158      	cbz	r0, 228a0 <k_mem_slab_free+0x60>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   22888:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2288a:	682a      	ldr	r2, [r5, #0]
   2288c:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2288e:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   22890:	f000 ff90 	bl	237b4 <z_ready_thread>
		z_reschedule(&lock, key);
   22894:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   22896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2289a:	4811      	ldr	r0, [pc, #68]	; (228e0 <k_mem_slab_free+0xa0>)
   2289c:	f000 bd66 	b.w	2336c <z_reschedule>
		**(char ***)mem = slab->free_list;
   228a0:	682b      	ldr	r3, [r5, #0]
   228a2:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228a4:	480e      	ldr	r0, [pc, #56]	; (228e0 <k_mem_slab_free+0xa0>)
   228a6:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   228a8:	682b      	ldr	r3, [r5, #0]
   228aa:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   228ac:	69a3      	ldr	r3, [r4, #24]
   228ae:	3b01      	subs	r3, #1
   228b0:	61a3      	str	r3, [r4, #24]
   228b2:	f002 f81b 	bl	248ec <z_spin_unlock_valid>
   228b6:	b968      	cbnz	r0, 228d4 <k_mem_slab_free+0x94>
   228b8:	2384      	movs	r3, #132	; 0x84
   228ba:	4a0a      	ldr	r2, [pc, #40]	; (228e4 <k_mem_slab_free+0xa4>)
   228bc:	490d      	ldr	r1, [pc, #52]	; (228f4 <k_mem_slab_free+0xb4>)
   228be:	480b      	ldr	r0, [pc, #44]	; (228ec <k_mem_slab_free+0xac>)
   228c0:	f009 fb9d 	bl	2bffe <printk>
   228c4:	4906      	ldr	r1, [pc, #24]	; (228e0 <k_mem_slab_free+0xa0>)
   228c6:	480c      	ldr	r0, [pc, #48]	; (228f8 <k_mem_slab_free+0xb8>)
   228c8:	f009 fb99 	bl	2bffe <printk>
   228cc:	2184      	movs	r1, #132	; 0x84
   228ce:	4805      	ldr	r0, [pc, #20]	; (228e4 <k_mem_slab_free+0xa4>)
   228d0:	f009 fdb2 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   228d4:	f386 8811 	msr	BASEPRI, r6
   228d8:	f3bf 8f6f 	isb	sy
}
   228dc:	bd70      	pop	{r4, r5, r6, pc}
   228de:	bf00      	nop
   228e0:	20021dcc 	.word	0x20021dcc
   228e4:	0002ffdd 	.word	0x0002ffdd
   228e8:	0003002f 	.word	0x0003002f
   228ec:	0002ff0d 	.word	0x0002ff0d
   228f0:	00030044 	.word	0x00030044
   228f4:	00030003 	.word	0x00030003
   228f8:	0003001a 	.word	0x0003001a

000228fc <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   228fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22900:	4604      	mov	r4, r0
   22902:	468a      	mov	sl, r1
   22904:	4690      	mov	r8, r2
   22906:	4699      	mov	r9, r3
   22908:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2290c:	b17b      	cbz	r3, 2292e <z_impl_k_msgq_put+0x32>
   2290e:	ea58 0309 	orrs.w	r3, r8, r9
   22912:	d00c      	beq.n	2292e <z_impl_k_msgq_put+0x32>
   22914:	4940      	ldr	r1, [pc, #256]	; (22a18 <z_impl_k_msgq_put+0x11c>)
   22916:	2376      	movs	r3, #118	; 0x76
   22918:	4a40      	ldr	r2, [pc, #256]	; (22a1c <z_impl_k_msgq_put+0x120>)
   2291a:	4841      	ldr	r0, [pc, #260]	; (22a20 <z_impl_k_msgq_put+0x124>)
   2291c:	f009 fb6f 	bl	2bffe <printk>
   22920:	4840      	ldr	r0, [pc, #256]	; (22a24 <z_impl_k_msgq_put+0x128>)
   22922:	f009 fb6c 	bl	2bffe <printk>
   22926:	2176      	movs	r1, #118	; 0x76
   22928:	483c      	ldr	r0, [pc, #240]	; (22a1c <z_impl_k_msgq_put+0x120>)
   2292a:	f009 fd85 	bl	2c438 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2292e:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   22932:	f04f 0320 	mov.w	r3, #32
   22936:	f3ef 8711 	mrs	r7, BASEPRI
   2293a:	f383 8811 	msr	BASEPRI, r3
   2293e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22942:	4628      	mov	r0, r5
   22944:	f001 ffc4 	bl	248d0 <z_spin_lock_valid>
   22948:	b968      	cbnz	r0, 22966 <z_impl_k_msgq_put+0x6a>
   2294a:	235c      	movs	r3, #92	; 0x5c
   2294c:	4a36      	ldr	r2, [pc, #216]	; (22a28 <z_impl_k_msgq_put+0x12c>)
   2294e:	4937      	ldr	r1, [pc, #220]	; (22a2c <z_impl_k_msgq_put+0x130>)
   22950:	4833      	ldr	r0, [pc, #204]	; (22a20 <z_impl_k_msgq_put+0x124>)
   22952:	f009 fb54 	bl	2bffe <printk>
   22956:	4629      	mov	r1, r5
   22958:	4835      	ldr	r0, [pc, #212]	; (22a30 <z_impl_k_msgq_put+0x134>)
   2295a:	f009 fb50 	bl	2bffe <printk>
   2295e:	215c      	movs	r1, #92	; 0x5c
   22960:	4831      	ldr	r0, [pc, #196]	; (22a28 <z_impl_k_msgq_put+0x12c>)
   22962:	f009 fd69 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   22966:	4628      	mov	r0, r5
   22968:	f001 ffd0 	bl	2490c <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   2296c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2296e:	6923      	ldr	r3, [r4, #16]
   22970:	429a      	cmp	r2, r3
   22972:	d23d      	bcs.n	229f0 <z_impl_k_msgq_put+0xf4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22974:	4620      	mov	r0, r4
   22976:	f001 fb75 	bl	24064 <z_unpend_first_thread>
   2297a:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   2297c:	4606      	mov	r6, r0
   2297e:	68e2      	ldr	r2, [r4, #12]
   22980:	b178      	cbz	r0, 229a2 <z_impl_k_msgq_put+0xa6>
   22982:	2400      	movs	r4, #0
   22984:	6940      	ldr	r0, [r0, #20]
   22986:	f7ea f8e1 	bl	cb4c <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2298a:	4630      	mov	r0, r6
   2298c:	67f4      	str	r4, [r6, #124]	; 0x7c
   2298e:	f000 ff11 	bl	237b4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   22992:	4639      	mov	r1, r7
   22994:	4628      	mov	r0, r5
   22996:	f000 fce9 	bl	2336c <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2299a:	4620      	mov	r0, r4
   2299c:	b002      	add	sp, #8
   2299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   229a2:	6a20      	ldr	r0, [r4, #32]
   229a4:	f7ea f8d2 	bl	cb4c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   229a8:	6a23      	ldr	r3, [r4, #32]
   229aa:	68e2      	ldr	r2, [r4, #12]
   229ac:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   229ae:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   229b0:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   229b2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   229b4:	bf04      	itt	eq
   229b6:	6963      	ldreq	r3, [r4, #20]
   229b8:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   229ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   229bc:	3301      	adds	r3, #1
   229be:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   229c0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229c2:	4628      	mov	r0, r5
   229c4:	f001 ff92 	bl	248ec <z_spin_unlock_valid>
   229c8:	b968      	cbnz	r0, 229e6 <z_impl_k_msgq_put+0xea>
   229ca:	2384      	movs	r3, #132	; 0x84
   229cc:	4a16      	ldr	r2, [pc, #88]	; (22a28 <z_impl_k_msgq_put+0x12c>)
   229ce:	4919      	ldr	r1, [pc, #100]	; (22a34 <z_impl_k_msgq_put+0x138>)
   229d0:	4813      	ldr	r0, [pc, #76]	; (22a20 <z_impl_k_msgq_put+0x124>)
   229d2:	f009 fb14 	bl	2bffe <printk>
   229d6:	4629      	mov	r1, r5
   229d8:	4817      	ldr	r0, [pc, #92]	; (22a38 <z_impl_k_msgq_put+0x13c>)
   229da:	f009 fb10 	bl	2bffe <printk>
   229de:	2184      	movs	r1, #132	; 0x84
   229e0:	4811      	ldr	r0, [pc, #68]	; (22a28 <z_impl_k_msgq_put+0x12c>)
   229e2:	f009 fd29 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   229e6:	f387 8811 	msr	BASEPRI, r7
   229ea:	f3bf 8f6f 	isb	sy
	return result;
   229ee:	e7d4      	b.n	2299a <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   229f0:	ea58 0309 	orrs.w	r3, r8, r9
   229f4:	d00c      	beq.n	22a10 <z_impl_k_msgq_put+0x114>
		_current->base.swap_data = (void *) data;
   229f6:	4b11      	ldr	r3, [pc, #68]	; (22a3c <z_impl_k_msgq_put+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   229f8:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   229fa:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   229fc:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   229fe:	f8c3 a014 	str.w	sl, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22a02:	4628      	mov	r0, r5
   22a04:	e9cd 8900 	strd	r8, r9, [sp]
   22a08:	f001 fa66 	bl	23ed8 <z_pend_curr>
   22a0c:	4604      	mov	r4, r0
   22a0e:	e7c4      	b.n	2299a <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   22a10:	f06f 0422 	mvn.w	r4, #34	; 0x22
   22a14:	e7d5      	b.n	229c2 <z_impl_k_msgq_put+0xc6>
   22a16:	bf00      	nop
   22a18:	0003283a 	.word	0x0003283a
   22a1c:	000328c1 	.word	0x000328c1
   22a20:	0002ff0d 	.word	0x0002ff0d
   22a24:	0003053a 	.word	0x0003053a
   22a28:	0002ffdd 	.word	0x0002ffdd
   22a2c:	0003002f 	.word	0x0003002f
   22a30:	00030044 	.word	0x00030044
   22a34:	00030003 	.word	0x00030003
   22a38:	0003001a 	.word	0x0003001a
   22a3c:	20021dd4 	.word	0x20021dd4

00022a40 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   22a40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22a44:	4604      	mov	r4, r0
   22a46:	460d      	mov	r5, r1
   22a48:	4690      	mov	r8, r2
   22a4a:	4699      	mov	r9, r3
   22a4c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   22a50:	b17b      	cbz	r3, 22a72 <z_impl_k_msgq_get+0x32>
   22a52:	ea58 0309 	orrs.w	r3, r8, r9
   22a56:	d00c      	beq.n	22a72 <z_impl_k_msgq_get+0x32>
   22a58:	4946      	ldr	r1, [pc, #280]	; (22b74 <z_impl_k_msgq_get+0x134>)
   22a5a:	23c2      	movs	r3, #194	; 0xc2
   22a5c:	4a46      	ldr	r2, [pc, #280]	; (22b78 <z_impl_k_msgq_get+0x138>)
   22a5e:	4847      	ldr	r0, [pc, #284]	; (22b7c <z_impl_k_msgq_get+0x13c>)
   22a60:	f009 facd 	bl	2bffe <printk>
   22a64:	4846      	ldr	r0, [pc, #280]	; (22b80 <z_impl_k_msgq_get+0x140>)
   22a66:	f009 faca 	bl	2bffe <printk>
   22a6a:	21c2      	movs	r1, #194	; 0xc2
   22a6c:	4842      	ldr	r0, [pc, #264]	; (22b78 <z_impl_k_msgq_get+0x138>)
   22a6e:	f009 fce3 	bl	2c438 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   22a72:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   22a76:	f04f 0320 	mov.w	r3, #32
   22a7a:	f3ef 8711 	mrs	r7, BASEPRI
   22a7e:	f383 8811 	msr	BASEPRI, r3
   22a82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a86:	4630      	mov	r0, r6
   22a88:	f001 ff22 	bl	248d0 <z_spin_lock_valid>
   22a8c:	b968      	cbnz	r0, 22aaa <z_impl_k_msgq_get+0x6a>
   22a8e:	235c      	movs	r3, #92	; 0x5c
   22a90:	4a3c      	ldr	r2, [pc, #240]	; (22b84 <z_impl_k_msgq_get+0x144>)
   22a92:	493d      	ldr	r1, [pc, #244]	; (22b88 <z_impl_k_msgq_get+0x148>)
   22a94:	4839      	ldr	r0, [pc, #228]	; (22b7c <z_impl_k_msgq_get+0x13c>)
   22a96:	f009 fab2 	bl	2bffe <printk>
   22a9a:	4631      	mov	r1, r6
   22a9c:	483b      	ldr	r0, [pc, #236]	; (22b8c <z_impl_k_msgq_get+0x14c>)
   22a9e:	f009 faae 	bl	2bffe <printk>
   22aa2:	215c      	movs	r1, #92	; 0x5c
   22aa4:	4837      	ldr	r0, [pc, #220]	; (22b84 <z_impl_k_msgq_get+0x144>)
   22aa6:	f009 fcc7 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   22aaa:	4630      	mov	r0, r6
   22aac:	f001 ff2e 	bl	2490c <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   22ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22ab2:	2b00      	cmp	r3, #0
   22ab4:	d035      	beq.n	22b22 <z_impl_k_msgq_get+0xe2>
   22ab6:	4628      	mov	r0, r5
   22ab8:	68e2      	ldr	r2, [r4, #12]
   22aba:	69e1      	ldr	r1, [r4, #28]
   22abc:	f7ea f846 	bl	cb4c <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   22ac0:	69e3      	ldr	r3, [r4, #28]
   22ac2:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22ac4:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   22ac6:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   22ac8:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   22aca:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   22acc:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   22ace:	bf04      	itt	eq
   22ad0:	6963      	ldreq	r3, [r4, #20]
   22ad2:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   22ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22ad6:	3b01      	subs	r3, #1
   22ad8:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22ada:	f001 fac3 	bl	24064 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   22ade:	4605      	mov	r5, r0
   22ae0:	2800      	cmp	r0, #0
   22ae2:	d02f      	beq.n	22b44 <z_impl_k_msgq_get+0x104>
   22ae4:	6941      	ldr	r1, [r0, #20]
   22ae6:	68e2      	ldr	r2, [r4, #12]
   22ae8:	6a20      	ldr	r0, [r4, #32]
   22aea:	f7ea f82f 	bl	cb4c <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   22aee:	6a23      	ldr	r3, [r4, #32]
   22af0:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   22af2:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   22af4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22af6:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   22af8:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   22afa:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   22afc:	bf04      	itt	eq
   22afe:	6963      	ldreq	r3, [r4, #20]
   22b00:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   22b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22b04:	3301      	adds	r3, #1
   22b06:	6263      	str	r3, [r4, #36]	; 0x24
   22b08:	2400      	movs	r4, #0
   22b0a:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   22b0c:	f000 fe52 	bl	237b4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   22b10:	4639      	mov	r1, r7
   22b12:	4630      	mov	r0, r6
   22b14:	f000 fc2a 	bl	2336c <z_reschedule>
			return 0;
   22b18:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22b1a:	4628      	mov	r0, r5
   22b1c:	b003      	add	sp, #12
   22b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22b22:	ea58 0309 	orrs.w	r3, r8, r9
   22b26:	d00b      	beq.n	22b40 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   22b28:	4b19      	ldr	r3, [pc, #100]	; (22b90 <z_impl_k_msgq_get+0x150>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22b2a:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   22b2c:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22b2e:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   22b30:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22b32:	4630      	mov	r0, r6
   22b34:	e9cd 8900 	strd	r8, r9, [sp]
   22b38:	f001 f9ce 	bl	23ed8 <z_pend_curr>
   22b3c:	4605      	mov	r5, r0
   22b3e:	e7ec      	b.n	22b1a <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   22b40:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b44:	4630      	mov	r0, r6
   22b46:	f001 fed1 	bl	248ec <z_spin_unlock_valid>
   22b4a:	b968      	cbnz	r0, 22b68 <z_impl_k_msgq_get+0x128>
   22b4c:	2384      	movs	r3, #132	; 0x84
   22b4e:	4a0d      	ldr	r2, [pc, #52]	; (22b84 <z_impl_k_msgq_get+0x144>)
   22b50:	4910      	ldr	r1, [pc, #64]	; (22b94 <z_impl_k_msgq_get+0x154>)
   22b52:	480a      	ldr	r0, [pc, #40]	; (22b7c <z_impl_k_msgq_get+0x13c>)
   22b54:	f009 fa53 	bl	2bffe <printk>
   22b58:	4631      	mov	r1, r6
   22b5a:	480f      	ldr	r0, [pc, #60]	; (22b98 <z_impl_k_msgq_get+0x158>)
   22b5c:	f009 fa4f 	bl	2bffe <printk>
   22b60:	2184      	movs	r1, #132	; 0x84
   22b62:	4808      	ldr	r0, [pc, #32]	; (22b84 <z_impl_k_msgq_get+0x144>)
   22b64:	f009 fc68 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   22b68:	f387 8811 	msr	BASEPRI, r7
   22b6c:	f3bf 8f6f 	isb	sy
	return result;
   22b70:	e7d3      	b.n	22b1a <z_impl_k_msgq_get+0xda>
   22b72:	bf00      	nop
   22b74:	0003283a 	.word	0x0003283a
   22b78:	000328c1 	.word	0x000328c1
   22b7c:	0002ff0d 	.word	0x0002ff0d
   22b80:	0003053a 	.word	0x0003053a
   22b84:	0002ffdd 	.word	0x0002ffdd
   22b88:	0003002f 	.word	0x0003002f
   22b8c:	00030044 	.word	0x00030044
   22b90:	20021dd4 	.word	0x20021dd4
   22b94:	00030003 	.word	0x00030003
   22b98:	0003001a 	.word	0x0003001a

00022b9c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   22b9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22ba0:	4604      	mov	r4, r0
   22ba2:	4616      	mov	r6, r2
   22ba4:	461f      	mov	r7, r3
   22ba6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   22baa:	b163      	cbz	r3, 22bc6 <z_impl_k_mutex_lock+0x2a>
   22bac:	496d      	ldr	r1, [pc, #436]	; (22d64 <z_impl_k_mutex_lock+0x1c8>)
   22bae:	237d      	movs	r3, #125	; 0x7d
   22bb0:	4a6d      	ldr	r2, [pc, #436]	; (22d68 <z_impl_k_mutex_lock+0x1cc>)
   22bb2:	486e      	ldr	r0, [pc, #440]	; (22d6c <z_impl_k_mutex_lock+0x1d0>)
   22bb4:	f009 fa23 	bl	2bffe <printk>
   22bb8:	486d      	ldr	r0, [pc, #436]	; (22d70 <z_impl_k_mutex_lock+0x1d4>)
   22bba:	f009 fa20 	bl	2bffe <printk>
   22bbe:	217d      	movs	r1, #125	; 0x7d
   22bc0:	4869      	ldr	r0, [pc, #420]	; (22d68 <z_impl_k_mutex_lock+0x1cc>)
   22bc2:	f009 fc39 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   22bc6:	f04f 0320 	mov.w	r3, #32
   22bca:	f3ef 8811 	mrs	r8, BASEPRI
   22bce:	f383 8811 	msr	BASEPRI, r3
   22bd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bd6:	4867      	ldr	r0, [pc, #412]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22bd8:	f001 fe7a 	bl	248d0 <z_spin_lock_valid>
   22bdc:	b968      	cbnz	r0, 22bfa <z_impl_k_mutex_lock+0x5e>
   22bde:	235c      	movs	r3, #92	; 0x5c
   22be0:	4a65      	ldr	r2, [pc, #404]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22be2:	4966      	ldr	r1, [pc, #408]	; (22d7c <z_impl_k_mutex_lock+0x1e0>)
   22be4:	4861      	ldr	r0, [pc, #388]	; (22d6c <z_impl_k_mutex_lock+0x1d0>)
   22be6:	f009 fa0a 	bl	2bffe <printk>
   22bea:	4962      	ldr	r1, [pc, #392]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22bec:	4864      	ldr	r0, [pc, #400]	; (22d80 <z_impl_k_mutex_lock+0x1e4>)
   22bee:	f009 fa06 	bl	2bffe <printk>
   22bf2:	215c      	movs	r1, #92	; 0x5c
   22bf4:	4860      	ldr	r0, [pc, #384]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22bf6:	f009 fc1f 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   22bfa:	485e      	ldr	r0, [pc, #376]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22bfc:	f001 fe86 	bl	2490c <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   22c00:	68e3      	ldr	r3, [r4, #12]
   22c02:	4a60      	ldr	r2, [pc, #384]	; (22d84 <z_impl_k_mutex_lock+0x1e8>)
   22c04:	b1fb      	cbz	r3, 22c46 <z_impl_k_mutex_lock+0xaa>
   22c06:	68a0      	ldr	r0, [r4, #8]
   22c08:	6891      	ldr	r1, [r2, #8]
   22c0a:	4288      	cmp	r0, r1
   22c0c:	d03d      	beq.n	22c8a <z_impl_k_mutex_lock+0xee>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   22c0e:	ea56 0307 	orrs.w	r3, r6, r7
   22c12:	d13c      	bne.n	22c8e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c14:	4857      	ldr	r0, [pc, #348]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22c16:	f001 fe69 	bl	248ec <z_spin_unlock_valid>
   22c1a:	b968      	cbnz	r0, 22c38 <z_impl_k_mutex_lock+0x9c>
   22c1c:	2384      	movs	r3, #132	; 0x84
   22c1e:	4a56      	ldr	r2, [pc, #344]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22c20:	4959      	ldr	r1, [pc, #356]	; (22d88 <z_impl_k_mutex_lock+0x1ec>)
   22c22:	4852      	ldr	r0, [pc, #328]	; (22d6c <z_impl_k_mutex_lock+0x1d0>)
   22c24:	f009 f9eb 	bl	2bffe <printk>
   22c28:	4952      	ldr	r1, [pc, #328]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22c2a:	4858      	ldr	r0, [pc, #352]	; (22d8c <z_impl_k_mutex_lock+0x1f0>)
   22c2c:	f009 f9e7 	bl	2bffe <printk>
   22c30:	2184      	movs	r1, #132	; 0x84
   22c32:	4851      	ldr	r0, [pc, #324]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22c34:	f009 fc00 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   22c38:	f388 8811 	msr	BASEPRI, r8
   22c3c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   22c40:	f06f 000f 	mvn.w	r0, #15
   22c44:	e01e      	b.n	22c84 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   22c46:	6891      	ldr	r1, [r2, #8]
   22c48:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   22c4c:	3301      	adds	r3, #1
   22c4e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   22c50:	6893      	ldr	r3, [r2, #8]
   22c52:	4848      	ldr	r0, [pc, #288]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   22c54:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   22c56:	60a3      	str	r3, [r4, #8]
   22c58:	f001 fe48 	bl	248ec <z_spin_unlock_valid>
   22c5c:	b968      	cbnz	r0, 22c7a <z_impl_k_mutex_lock+0xde>
   22c5e:	2384      	movs	r3, #132	; 0x84
   22c60:	4a45      	ldr	r2, [pc, #276]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22c62:	4949      	ldr	r1, [pc, #292]	; (22d88 <z_impl_k_mutex_lock+0x1ec>)
   22c64:	4841      	ldr	r0, [pc, #260]	; (22d6c <z_impl_k_mutex_lock+0x1d0>)
   22c66:	f009 f9ca 	bl	2bffe <printk>
   22c6a:	4942      	ldr	r1, [pc, #264]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22c6c:	4847      	ldr	r0, [pc, #284]	; (22d8c <z_impl_k_mutex_lock+0x1f0>)
   22c6e:	f009 f9c6 	bl	2bffe <printk>
   22c72:	2184      	movs	r1, #132	; 0x84
   22c74:	4840      	ldr	r0, [pc, #256]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22c76:	f009 fbdf 	bl	2c438 <assert_post_action>
   22c7a:	f388 8811 	msr	BASEPRI, r8
   22c7e:	f3bf 8f6f 	isb	sy
		return 0;
   22c82:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   22c84:	b002      	add	sp, #8
   22c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   22c8a:	6921      	ldr	r1, [r4, #16]
   22c8c:	e7de      	b.n	22c4c <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   22c8e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22c92:	f991 100e 	ldrsb.w	r1, [r1, #14]
   22c96:	4299      	cmp	r1, r3
   22c98:	bfa8      	it	ge
   22c9a:	4619      	movge	r1, r3
   22c9c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   22ca0:	4299      	cmp	r1, r3
   22ca2:	da41      	bge.n	22d28 <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   22ca4:	f001 f948 	bl	23f38 <z_set_prio>
   22ca8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   22caa:	4622      	mov	r2, r4
   22cac:	4641      	mov	r1, r8
   22cae:	e9cd 6700 	strd	r6, r7, [sp]
   22cb2:	4830      	ldr	r0, [pc, #192]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22cb4:	f001 f910 	bl	23ed8 <z_pend_curr>
	if (got_mutex == 0) {
   22cb8:	2800      	cmp	r0, #0
   22cba:	d0e3      	beq.n	22c84 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   22cbc:	f04f 0320 	mov.w	r3, #32
   22cc0:	f3ef 8611 	mrs	r6, BASEPRI
   22cc4:	f383 8811 	msr	BASEPRI, r3
   22cc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ccc:	4829      	ldr	r0, [pc, #164]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22cce:	f001 fdff 	bl	248d0 <z_spin_lock_valid>
   22cd2:	b968      	cbnz	r0, 22cf0 <z_impl_k_mutex_lock+0x154>
   22cd4:	235c      	movs	r3, #92	; 0x5c
   22cd6:	4a28      	ldr	r2, [pc, #160]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22cd8:	4928      	ldr	r1, [pc, #160]	; (22d7c <z_impl_k_mutex_lock+0x1e0>)
   22cda:	4824      	ldr	r0, [pc, #144]	; (22d6c <z_impl_k_mutex_lock+0x1d0>)
   22cdc:	f009 f98f 	bl	2bffe <printk>
   22ce0:	4924      	ldr	r1, [pc, #144]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22ce2:	4827      	ldr	r0, [pc, #156]	; (22d80 <z_impl_k_mutex_lock+0x1e4>)
   22ce4:	f009 f98b 	bl	2bffe <printk>
   22ce8:	215c      	movs	r1, #92	; 0x5c
   22cea:	4823      	ldr	r0, [pc, #140]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22cec:	f009 fba4 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   22cf0:	4820      	ldr	r0, [pc, #128]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22cf2:	f001 fe0b 	bl	2490c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   22cf6:	6823      	ldr	r3, [r4, #0]
   22cf8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22cfa:	42a3      	cmp	r3, r4
   22cfc:	d007      	beq.n	22d0e <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22cfe:	b133      	cbz	r3, 22d0e <z_impl_k_mutex_lock+0x172>
   22d00:	f993 300e 	ldrsb.w	r3, [r3, #14]
   22d04:	4299      	cmp	r1, r3
   22d06:	bfa8      	it	ge
   22d08:	4619      	movge	r1, r3
   22d0a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   22d0e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   22d10:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22d14:	4299      	cmp	r1, r3
   22d16:	d109      	bne.n	22d2c <z_impl_k_mutex_lock+0x190>
	if (resched) {
   22d18:	b16d      	cbz	r5, 22d36 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   22d1a:	4631      	mov	r1, r6
   22d1c:	4815      	ldr	r0, [pc, #84]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22d1e:	f000 fb25 	bl	2336c <z_reschedule>
	return -EAGAIN;
   22d22:	f06f 000a 	mvn.w	r0, #10
   22d26:	e7ad      	b.n	22c84 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   22d28:	2500      	movs	r5, #0
   22d2a:	e7be      	b.n	22caa <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   22d2c:	f001 f904 	bl	23f38 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   22d30:	2800      	cmp	r0, #0
   22d32:	d1f2      	bne.n	22d1a <z_impl_k_mutex_lock+0x17e>
   22d34:	e7f0      	b.n	22d18 <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d36:	480f      	ldr	r0, [pc, #60]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22d38:	f001 fdd8 	bl	248ec <z_spin_unlock_valid>
   22d3c:	b968      	cbnz	r0, 22d5a <z_impl_k_mutex_lock+0x1be>
   22d3e:	2384      	movs	r3, #132	; 0x84
   22d40:	4a0d      	ldr	r2, [pc, #52]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22d42:	4911      	ldr	r1, [pc, #68]	; (22d88 <z_impl_k_mutex_lock+0x1ec>)
   22d44:	4809      	ldr	r0, [pc, #36]	; (22d6c <z_impl_k_mutex_lock+0x1d0>)
   22d46:	f009 f95a 	bl	2bffe <printk>
   22d4a:	490a      	ldr	r1, [pc, #40]	; (22d74 <z_impl_k_mutex_lock+0x1d8>)
   22d4c:	480f      	ldr	r0, [pc, #60]	; (22d8c <z_impl_k_mutex_lock+0x1f0>)
   22d4e:	f009 f956 	bl	2bffe <printk>
   22d52:	2184      	movs	r1, #132	; 0x84
   22d54:	4808      	ldr	r0, [pc, #32]	; (22d78 <z_impl_k_mutex_lock+0x1dc>)
   22d56:	f009 fb6f 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   22d5a:	f386 8811 	msr	BASEPRI, r6
   22d5e:	f3bf 8f6f 	isb	sy
   22d62:	e7de      	b.n	22d22 <z_impl_k_mutex_lock+0x186>
   22d64:	00032905 	.word	0x00032905
   22d68:	000328e3 	.word	0x000328e3
   22d6c:	0002ff0d 	.word	0x0002ff0d
   22d70:	00032917 	.word	0x00032917
   22d74:	20021dd0 	.word	0x20021dd0
   22d78:	0002ffdd 	.word	0x0002ffdd
   22d7c:	0003002f 	.word	0x0003002f
   22d80:	00030044 	.word	0x00030044
   22d84:	20021dd4 	.word	0x20021dd4
   22d88:	00030003 	.word	0x00030003
   22d8c:	0003001a 	.word	0x0003001a

00022d90 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   22d90:	b538      	push	{r3, r4, r5, lr}
   22d92:	4604      	mov	r4, r0
   22d94:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   22d98:	b163      	cbz	r3, 22db4 <z_impl_k_mutex_unlock+0x24>
   22d9a:	4954      	ldr	r1, [pc, #336]	; (22eec <z_impl_k_mutex_unlock+0x15c>)
   22d9c:	23d8      	movs	r3, #216	; 0xd8
   22d9e:	4a54      	ldr	r2, [pc, #336]	; (22ef0 <z_impl_k_mutex_unlock+0x160>)
   22da0:	4854      	ldr	r0, [pc, #336]	; (22ef4 <z_impl_k_mutex_unlock+0x164>)
   22da2:	f009 f92c 	bl	2bffe <printk>
   22da6:	4854      	ldr	r0, [pc, #336]	; (22ef8 <z_impl_k_mutex_unlock+0x168>)
   22da8:	f009 f929 	bl	2bffe <printk>
   22dac:	21d8      	movs	r1, #216	; 0xd8
   22dae:	4850      	ldr	r0, [pc, #320]	; (22ef0 <z_impl_k_mutex_unlock+0x160>)
   22db0:	f009 fb42 	bl	2c438 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   22db4:	68a3      	ldr	r3, [r4, #8]
   22db6:	2b00      	cmp	r3, #0
   22db8:	f000 8091 	beq.w	22ede <z_impl_k_mutex_unlock+0x14e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   22dbc:	4d4f      	ldr	r5, [pc, #316]	; (22efc <z_impl_k_mutex_unlock+0x16c>)
   22dbe:	68aa      	ldr	r2, [r5, #8]
   22dc0:	4293      	cmp	r3, r2
   22dc2:	f040 808f 	bne.w	22ee4 <z_impl_k_mutex_unlock+0x154>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   22dc6:	68e3      	ldr	r3, [r4, #12]
   22dc8:	b94b      	cbnz	r3, 22dde <z_impl_k_mutex_unlock+0x4e>
   22dca:	494d      	ldr	r1, [pc, #308]	; (22f00 <z_impl_k_mutex_unlock+0x170>)
   22dcc:	4849      	ldr	r0, [pc, #292]	; (22ef4 <z_impl_k_mutex_unlock+0x164>)
   22dce:	23ea      	movs	r3, #234	; 0xea
   22dd0:	4a47      	ldr	r2, [pc, #284]	; (22ef0 <z_impl_k_mutex_unlock+0x160>)
   22dd2:	f009 f914 	bl	2bffe <printk>
   22dd6:	21ea      	movs	r1, #234	; 0xea
   22dd8:	4845      	ldr	r0, [pc, #276]	; (22ef0 <z_impl_k_mutex_unlock+0x160>)
   22dda:	f009 fb2d 	bl	2c438 <assert_post_action>
   22dde:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   22de2:	b173      	cbz	r3, 22e02 <z_impl_k_mutex_unlock+0x72>
   22de4:	4941      	ldr	r1, [pc, #260]	; (22eec <z_impl_k_mutex_unlock+0x15c>)
   22de6:	f44f 7386 	mov.w	r3, #268	; 0x10c
   22dea:	4a46      	ldr	r2, [pc, #280]	; (22f04 <z_impl_k_mutex_unlock+0x174>)
   22dec:	4841      	ldr	r0, [pc, #260]	; (22ef4 <z_impl_k_mutex_unlock+0x164>)
   22dee:	f009 f906 	bl	2bffe <printk>
   22df2:	4845      	ldr	r0, [pc, #276]	; (22f08 <z_impl_k_mutex_unlock+0x178>)
   22df4:	f009 f903 	bl	2bffe <printk>
   22df8:	f44f 7186 	mov.w	r1, #268	; 0x10c
   22dfc:	4841      	ldr	r0, [pc, #260]	; (22f04 <z_impl_k_mutex_unlock+0x174>)
   22dfe:	f009 fb1b 	bl	2c438 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   22e02:	68ab      	ldr	r3, [r5, #8]
   22e04:	7bdb      	ldrb	r3, [r3, #15]
   22e06:	2b01      	cmp	r3, #1
   22e08:	d10e      	bne.n	22e28 <z_impl_k_mutex_unlock+0x98>
   22e0a:	4940      	ldr	r1, [pc, #256]	; (22f0c <z_impl_k_mutex_unlock+0x17c>)
   22e0c:	f240 130d 	movw	r3, #269	; 0x10d
   22e10:	4a3c      	ldr	r2, [pc, #240]	; (22f04 <z_impl_k_mutex_unlock+0x174>)
   22e12:	4838      	ldr	r0, [pc, #224]	; (22ef4 <z_impl_k_mutex_unlock+0x164>)
   22e14:	f009 f8f3 	bl	2bffe <printk>
   22e18:	483b      	ldr	r0, [pc, #236]	; (22f08 <z_impl_k_mutex_unlock+0x178>)
   22e1a:	f009 f8f0 	bl	2bffe <printk>
   22e1e:	f240 110d 	movw	r1, #269	; 0x10d
   22e22:	4838      	ldr	r0, [pc, #224]	; (22f04 <z_impl_k_mutex_unlock+0x174>)
   22e24:	f009 fb08 	bl	2c438 <assert_post_action>

	--_current->base.sched_locked;
   22e28:	68aa      	ldr	r2, [r5, #8]
   22e2a:	7bd3      	ldrb	r3, [r2, #15]
   22e2c:	3b01      	subs	r3, #1
   22e2e:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   22e30:	68e3      	ldr	r3, [r4, #12]
   22e32:	2b01      	cmp	r3, #1
   22e34:	d005      	beq.n	22e42 <z_impl_k_mutex_unlock+0xb2>
		mutex->lock_count--;
   22e36:	3b01      	subs	r3, #1
   22e38:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   22e3a:	f000 fbf1 	bl	23620 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   22e3e:	2000      	movs	r0, #0
}
   22e40:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   22e42:	f04f 0320 	mov.w	r3, #32
   22e46:	f3ef 8511 	mrs	r5, BASEPRI
   22e4a:	f383 8811 	msr	BASEPRI, r3
   22e4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e52:	482f      	ldr	r0, [pc, #188]	; (22f10 <z_impl_k_mutex_unlock+0x180>)
   22e54:	f001 fd3c 	bl	248d0 <z_spin_lock_valid>
   22e58:	b968      	cbnz	r0, 22e76 <z_impl_k_mutex_unlock+0xe6>
   22e5a:	235c      	movs	r3, #92	; 0x5c
   22e5c:	4a2d      	ldr	r2, [pc, #180]	; (22f14 <z_impl_k_mutex_unlock+0x184>)
   22e5e:	492e      	ldr	r1, [pc, #184]	; (22f18 <z_impl_k_mutex_unlock+0x188>)
   22e60:	4824      	ldr	r0, [pc, #144]	; (22ef4 <z_impl_k_mutex_unlock+0x164>)
   22e62:	f009 f8cc 	bl	2bffe <printk>
   22e66:	492a      	ldr	r1, [pc, #168]	; (22f10 <z_impl_k_mutex_unlock+0x180>)
   22e68:	482c      	ldr	r0, [pc, #176]	; (22f1c <z_impl_k_mutex_unlock+0x18c>)
   22e6a:	f009 f8c8 	bl	2bffe <printk>
   22e6e:	215c      	movs	r1, #92	; 0x5c
   22e70:	4828      	ldr	r0, [pc, #160]	; (22f14 <z_impl_k_mutex_unlock+0x184>)
   22e72:	f009 fae1 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e76:	4826      	ldr	r0, [pc, #152]	; (22f10 <z_impl_k_mutex_unlock+0x180>)
   22e78:	f001 fd48 	bl	2490c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   22e7c:	68a0      	ldr	r0, [r4, #8]
   22e7e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   22e80:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22e84:	4299      	cmp	r1, r3
   22e86:	d001      	beq.n	22e8c <z_impl_k_mutex_unlock+0xfc>
		return z_set_prio(mutex->owner, new_prio);
   22e88:	f001 f856 	bl	23f38 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   22e8c:	4620      	mov	r0, r4
   22e8e:	f001 f8e9 	bl	24064 <z_unpend_first_thread>
	mutex->owner = new_owner;
   22e92:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   22e94:	b158      	cbz	r0, 22eae <z_impl_k_mutex_unlock+0x11e>
		mutex->owner_orig_prio = new_owner->base.prio;
   22e96:	f990 200e 	ldrsb.w	r2, [r0, #14]
   22e9a:	6122      	str	r2, [r4, #16]
   22e9c:	2200      	movs	r2, #0
   22e9e:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   22ea0:	f000 fc88 	bl	237b4 <z_ready_thread>
		z_reschedule(&lock, key);
   22ea4:	4629      	mov	r1, r5
   22ea6:	481a      	ldr	r0, [pc, #104]	; (22f10 <z_impl_k_mutex_unlock+0x180>)
   22ea8:	f000 fa60 	bl	2336c <z_reschedule>
   22eac:	e7c5      	b.n	22e3a <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count = 0U;
   22eae:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22eb0:	4817      	ldr	r0, [pc, #92]	; (22f10 <z_impl_k_mutex_unlock+0x180>)
   22eb2:	f001 fd1b 	bl	248ec <z_spin_unlock_valid>
   22eb6:	b968      	cbnz	r0, 22ed4 <z_impl_k_mutex_unlock+0x144>
   22eb8:	2384      	movs	r3, #132	; 0x84
   22eba:	4a16      	ldr	r2, [pc, #88]	; (22f14 <z_impl_k_mutex_unlock+0x184>)
   22ebc:	4918      	ldr	r1, [pc, #96]	; (22f20 <z_impl_k_mutex_unlock+0x190>)
   22ebe:	480d      	ldr	r0, [pc, #52]	; (22ef4 <z_impl_k_mutex_unlock+0x164>)
   22ec0:	f009 f89d 	bl	2bffe <printk>
   22ec4:	4912      	ldr	r1, [pc, #72]	; (22f10 <z_impl_k_mutex_unlock+0x180>)
   22ec6:	4817      	ldr	r0, [pc, #92]	; (22f24 <z_impl_k_mutex_unlock+0x194>)
   22ec8:	f009 f899 	bl	2bffe <printk>
   22ecc:	2184      	movs	r1, #132	; 0x84
   22ece:	4811      	ldr	r0, [pc, #68]	; (22f14 <z_impl_k_mutex_unlock+0x184>)
   22ed0:	f009 fab2 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   22ed4:	f385 8811 	msr	BASEPRI, r5
   22ed8:	f3bf 8f6f 	isb	sy
   22edc:	e7ad      	b.n	22e3a <z_impl_k_mutex_unlock+0xaa>
		return -EINVAL;
   22ede:	f06f 0015 	mvn.w	r0, #21
   22ee2:	e7ad      	b.n	22e40 <z_impl_k_mutex_unlock+0xb0>
		return -EPERM;
   22ee4:	f04f 30ff 	mov.w	r0, #4294967295
   22ee8:	e7aa      	b.n	22e40 <z_impl_k_mutex_unlock+0xb0>
   22eea:	bf00      	nop
   22eec:	00032905 	.word	0x00032905
   22ef0:	000328e3 	.word	0x000328e3
   22ef4:	0002ff0d 	.word	0x0002ff0d
   22ef8:	00032917 	.word	0x00032917
   22efc:	20021dd4 	.word	0x20021dd4
   22f00:	0003293c 	.word	0x0003293c
   22f04:	00032953 	.word	0x00032953
   22f08:	0003053a 	.word	0x0003053a
   22f0c:	0003297e 	.word	0x0003297e
   22f10:	20021dd0 	.word	0x20021dd0
   22f14:	0002ffdd 	.word	0x0002ffdd
   22f18:	0003002f 	.word	0x0003002f
   22f1c:	00030044 	.word	0x00030044
   22f20:	00030003 	.word	0x00030003
   22f24:	0003001a 	.word	0x0003001a

00022f28 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   22f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22f2c:	4604      	mov	r4, r0
   22f2e:	460e      	mov	r6, r1
   22f30:	4690      	mov	r8, r2
   22f32:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22f34:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   22f38:	f04f 0320 	mov.w	r3, #32
   22f3c:	f3ef 8711 	mrs	r7, BASEPRI
   22f40:	f383 8811 	msr	BASEPRI, r3
   22f44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f48:	4628      	mov	r0, r5
   22f4a:	f001 fcc1 	bl	248d0 <z_spin_lock_valid>
   22f4e:	b968      	cbnz	r0, 22f6c <queue_insert+0x44>
   22f50:	235c      	movs	r3, #92	; 0x5c
   22f52:	4a39      	ldr	r2, [pc, #228]	; (23038 <queue_insert+0x110>)
   22f54:	4939      	ldr	r1, [pc, #228]	; (2303c <queue_insert+0x114>)
   22f56:	483a      	ldr	r0, [pc, #232]	; (23040 <queue_insert+0x118>)
   22f58:	f009 f851 	bl	2bffe <printk>
   22f5c:	4629      	mov	r1, r5
   22f5e:	4839      	ldr	r0, [pc, #228]	; (23044 <queue_insert+0x11c>)
   22f60:	f009 f84d 	bl	2bffe <printk>
   22f64:	215c      	movs	r1, #92	; 0x5c
   22f66:	4834      	ldr	r0, [pc, #208]	; (23038 <queue_insert+0x110>)
   22f68:	f009 fa66 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   22f6c:	4628      	mov	r0, r5
   22f6e:	f001 fccd 	bl	2490c <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   22f72:	f104 000c 	add.w	r0, r4, #12
   22f76:	f001 f875 	bl	24064 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   22f7a:	b158      	cbz	r0, 22f94 <queue_insert+0x6c>
   22f7c:	2400      	movs	r4, #0
   22f7e:	f8c0 8014 	str.w	r8, [r0, #20]
   22f82:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   22f84:	f000 fc16 	bl	237b4 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   22f88:	4628      	mov	r0, r5
   22f8a:	4639      	mov	r1, r7
   22f8c:	f000 f9ee 	bl	2336c <z_reschedule>
	return 0;
   22f90:	2000      	movs	r0, #0
   22f92:	e01e      	b.n	22fd2 <queue_insert+0xaa>
	if (alloc) {
   22f94:	f1b9 0f00 	cmp.w	r9, #0
   22f98:	d02d      	beq.n	22ff6 <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   22f9a:	2008      	movs	r0, #8
   22f9c:	f002 fc78 	bl	25890 <z_thread_malloc>
		if (anode == NULL) {
   22fa0:	b9c8      	cbnz	r0, 22fd6 <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fa2:	4628      	mov	r0, r5
   22fa4:	f001 fca2 	bl	248ec <z_spin_unlock_valid>
   22fa8:	b968      	cbnz	r0, 22fc6 <queue_insert+0x9e>
   22faa:	2384      	movs	r3, #132	; 0x84
   22fac:	4a22      	ldr	r2, [pc, #136]	; (23038 <queue_insert+0x110>)
   22fae:	4926      	ldr	r1, [pc, #152]	; (23048 <queue_insert+0x120>)
   22fb0:	4823      	ldr	r0, [pc, #140]	; (23040 <queue_insert+0x118>)
   22fb2:	f009 f824 	bl	2bffe <printk>
   22fb6:	4629      	mov	r1, r5
   22fb8:	4824      	ldr	r0, [pc, #144]	; (2304c <queue_insert+0x124>)
   22fba:	f009 f820 	bl	2bffe <printk>
   22fbe:	2184      	movs	r1, #132	; 0x84
   22fc0:	481d      	ldr	r0, [pc, #116]	; (23038 <queue_insert+0x110>)
   22fc2:	f009 fa39 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   22fc6:	f387 8811 	msr	BASEPRI, r7
   22fca:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   22fce:	f06f 000b 	mvn.w	r0, #11
}
   22fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   22fd6:	2301      	movs	r3, #1
		anode->data = data;
   22fd8:	f8c0 8004 	str.w	r8, [r0, #4]
   22fdc:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   22fde:	6803      	ldr	r3, [r0, #0]
   22fe0:	f003 0303 	and.w	r3, r3, #3
   22fe4:	b95e      	cbnz	r6, 22ffe <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22fe6:	6822      	ldr	r2, [r4, #0]
   22fe8:	4313      	orrs	r3, r2
   22fea:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22fec:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22fee:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22ff0:	b973      	cbnz	r3, 23010 <queue_insert+0xe8>
	list->tail = node;
   22ff2:	6060      	str	r0, [r4, #4]
}
   22ff4:	e00c      	b.n	23010 <queue_insert+0xe8>
}
   22ff6:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   22ff8:	f8c8 9000 	str.w	r9, [r8]
}
   22ffc:	e7ef      	b.n	22fde <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22ffe:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23000:	f032 0203 	bics.w	r2, r2, #3
   23004:	d110      	bne.n	23028 <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   23006:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23008:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2300a:	b93a      	cbnz	r2, 2301c <queue_insert+0xf4>
	list->head = node;
   2300c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23010:	2104      	movs	r1, #4
   23012:	f104 0014 	add.w	r0, r4, #20
   23016:	f00b fc30 	bl	2e87a <z_handle_obj_poll_events>
   2301a:	e7b5      	b.n	22f88 <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2301c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2301e:	f003 0303 	and.w	r3, r3, #3
   23022:	4303      	orrs	r3, r0
   23024:	6013      	str	r3, [r2, #0]
   23026:	e7e4      	b.n	22ff2 <queue_insert+0xca>
   23028:	4313      	orrs	r3, r2
   2302a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2302c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2302e:	f003 0303 	and.w	r3, r3, #3
   23032:	4303      	orrs	r3, r0
   23034:	6033      	str	r3, [r6, #0]
}
   23036:	e7eb      	b.n	23010 <queue_insert+0xe8>
   23038:	0002ffdd 	.word	0x0002ffdd
   2303c:	0003002f 	.word	0x0003002f
   23040:	0002ff0d 	.word	0x0002ff0d
   23044:	00030044 	.word	0x00030044
   23048:	00030003 	.word	0x00030003
   2304c:	0003001a 	.word	0x0003001a

00023050 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23054:	4606      	mov	r6, r0
   23056:	4690      	mov	r8, r2
   23058:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2305a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2305e:	f04f 0320 	mov.w	r3, #32
   23062:	f3ef 8711 	mrs	r7, BASEPRI
   23066:	f383 8811 	msr	BASEPRI, r3
   2306a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2306e:	4628      	mov	r0, r5
   23070:	f001 fc2e 	bl	248d0 <z_spin_lock_valid>
   23074:	b968      	cbnz	r0, 23092 <z_impl_k_queue_get+0x42>
   23076:	235c      	movs	r3, #92	; 0x5c
   23078:	4a25      	ldr	r2, [pc, #148]	; (23110 <z_impl_k_queue_get+0xc0>)
   2307a:	4926      	ldr	r1, [pc, #152]	; (23114 <z_impl_k_queue_get+0xc4>)
   2307c:	4826      	ldr	r0, [pc, #152]	; (23118 <z_impl_k_queue_get+0xc8>)
   2307e:	f008 ffbe 	bl	2bffe <printk>
   23082:	4629      	mov	r1, r5
   23084:	4825      	ldr	r0, [pc, #148]	; (2311c <z_impl_k_queue_get+0xcc>)
   23086:	f008 ffba 	bl	2bffe <printk>
   2308a:	215c      	movs	r1, #92	; 0x5c
   2308c:	4820      	ldr	r0, [pc, #128]	; (23110 <z_impl_k_queue_get+0xc0>)
   2308e:	f009 f9d3 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23092:	4628      	mov	r0, r5
   23094:	f001 fc3a 	bl	2490c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   23098:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2309a:	b33c      	cbz	r4, 230ec <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2309c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2309e:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   230a0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   230a4:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   230a6:	4620      	mov	r0, r4
   230a8:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   230ac:	6033      	str	r3, [r6, #0]
	list->tail = node;
   230ae:	bf08      	it	eq
   230b0:	6073      	streq	r3, [r6, #4]
   230b2:	f00b fa52 	bl	2e55a <z_queue_node_peek>
   230b6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230b8:	4628      	mov	r0, r5
   230ba:	f001 fc17 	bl	248ec <z_spin_unlock_valid>
   230be:	b968      	cbnz	r0, 230dc <z_impl_k_queue_get+0x8c>
   230c0:	2384      	movs	r3, #132	; 0x84
   230c2:	4a13      	ldr	r2, [pc, #76]	; (23110 <z_impl_k_queue_get+0xc0>)
   230c4:	4916      	ldr	r1, [pc, #88]	; (23120 <z_impl_k_queue_get+0xd0>)
   230c6:	4814      	ldr	r0, [pc, #80]	; (23118 <z_impl_k_queue_get+0xc8>)
   230c8:	f008 ff99 	bl	2bffe <printk>
   230cc:	4629      	mov	r1, r5
   230ce:	4815      	ldr	r0, [pc, #84]	; (23124 <z_impl_k_queue_get+0xd4>)
   230d0:	f008 ff95 	bl	2bffe <printk>
   230d4:	2184      	movs	r1, #132	; 0x84
   230d6:	480e      	ldr	r0, [pc, #56]	; (23110 <z_impl_k_queue_get+0xc0>)
   230d8:	f009 f9ae 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   230dc:	f387 8811 	msr	BASEPRI, r7
   230e0:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   230e4:	4620      	mov	r0, r4
   230e6:	b003      	add	sp, #12
   230e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   230ec:	ea58 0309 	orrs.w	r3, r8, r9
   230f0:	d0e2      	beq.n	230b8 <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   230f2:	4639      	mov	r1, r7
   230f4:	4628      	mov	r0, r5
   230f6:	e9cd 8900 	strd	r8, r9, [sp]
   230fa:	f106 020c 	add.w	r2, r6, #12
   230fe:	f000 feeb 	bl	23ed8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23102:	2800      	cmp	r0, #0
   23104:	d1ee      	bne.n	230e4 <z_impl_k_queue_get+0x94>
   23106:	4b08      	ldr	r3, [pc, #32]	; (23128 <z_impl_k_queue_get+0xd8>)
   23108:	689b      	ldr	r3, [r3, #8]
   2310a:	695c      	ldr	r4, [r3, #20]
   2310c:	e7ea      	b.n	230e4 <z_impl_k_queue_get+0x94>
   2310e:	bf00      	nop
   23110:	0002ffdd 	.word	0x0002ffdd
   23114:	0003002f 	.word	0x0003002f
   23118:	0002ff0d 	.word	0x0002ff0d
   2311c:	00030044 	.word	0x00030044
   23120:	00030003 	.word	0x00030003
   23124:	0003001a 	.word	0x0003001a
   23128:	20021dd4 	.word	0x20021dd4

0002312c <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   2312c:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   2312e:	b510      	push	{r4, lr}
   23130:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   23132:	b95b      	cbnz	r3, 2314c <pended_on.isra.0+0x20>
   23134:	4906      	ldr	r1, [pc, #24]	; (23150 <pended_on.isra.0+0x24>)
   23136:	4807      	ldr	r0, [pc, #28]	; (23154 <pended_on.isra.0+0x28>)
   23138:	f240 13ed 	movw	r3, #493	; 0x1ed
   2313c:	4a06      	ldr	r2, [pc, #24]	; (23158 <pended_on.isra.0+0x2c>)
   2313e:	f008 ff5e 	bl	2bffe <printk>
   23142:	f240 11ed 	movw	r1, #493	; 0x1ed
   23146:	4804      	ldr	r0, [pc, #16]	; (23158 <pended_on.isra.0+0x2c>)
   23148:	f009 f976 	bl	2c438 <assert_post_action>

	return thread->base.pended_on;
}
   2314c:	6820      	ldr	r0, [r4, #0]
   2314e:	bd10      	pop	{r4, pc}
   23150:	000329d0 	.word	0x000329d0
   23154:	0002ff0d 	.word	0x0002ff0d
   23158:	000329ae 	.word	0x000329ae

0002315c <z_reset_time_slice>:
{
   2315c:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   2315e:	4c08      	ldr	r4, [pc, #32]	; (23180 <z_reset_time_slice+0x24>)
   23160:	6823      	ldr	r3, [r4, #0]
   23162:	b15b      	cbz	r3, 2317c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   23164:	f7f1 f9ae 	bl	144c4 <z_clock_elapsed>
   23168:	6822      	ldr	r2, [r4, #0]
   2316a:	4906      	ldr	r1, [pc, #24]	; (23184 <z_reset_time_slice+0x28>)
   2316c:	4410      	add	r0, r2
   2316e:	6108      	str	r0, [r1, #16]
}
   23170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   23174:	2100      	movs	r1, #0
   23176:	4610      	mov	r0, r2
   23178:	f001 be38 	b.w	24dec <z_set_timeout_expiry>
}
   2317c:	bd10      	pop	{r4, pc}
   2317e:	bf00      	nop
   23180:	20021e14 	.word	0x20021e14
   23184:	20021dd4 	.word	0x20021dd4

00023188 <k_sched_time_slice_set>:
{
   23188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2318a:	4605      	mov	r5, r0
   2318c:	460c      	mov	r4, r1
	__asm__ volatile(
   2318e:	f04f 0320 	mov.w	r3, #32
   23192:	f3ef 8611 	mrs	r6, BASEPRI
   23196:	f383 8811 	msr	BASEPRI, r3
   2319a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2319e:	4820      	ldr	r0, [pc, #128]	; (23220 <k_sched_time_slice_set+0x98>)
   231a0:	f001 fb96 	bl	248d0 <z_spin_lock_valid>
   231a4:	b968      	cbnz	r0, 231c2 <k_sched_time_slice_set+0x3a>
   231a6:	235c      	movs	r3, #92	; 0x5c
   231a8:	4a1e      	ldr	r2, [pc, #120]	; (23224 <k_sched_time_slice_set+0x9c>)
   231aa:	491f      	ldr	r1, [pc, #124]	; (23228 <k_sched_time_slice_set+0xa0>)
   231ac:	481f      	ldr	r0, [pc, #124]	; (2322c <k_sched_time_slice_set+0xa4>)
   231ae:	f008 ff26 	bl	2bffe <printk>
   231b2:	491b      	ldr	r1, [pc, #108]	; (23220 <k_sched_time_slice_set+0x98>)
   231b4:	481e      	ldr	r0, [pc, #120]	; (23230 <k_sched_time_slice_set+0xa8>)
   231b6:	f008 ff22 	bl	2bffe <printk>
   231ba:	215c      	movs	r1, #92	; 0x5c
   231bc:	4819      	ldr	r0, [pc, #100]	; (23224 <k_sched_time_slice_set+0x9c>)
   231be:	f009 f93b 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   231c2:	4817      	ldr	r0, [pc, #92]	; (23220 <k_sched_time_slice_set+0x98>)
   231c4:	f001 fba2 	bl	2490c <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   231c8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   231cc:	2200      	movs	r2, #0
   231ce:	f240 30e7 	movw	r0, #999	; 0x3e7
   231d2:	2100      	movs	r1, #0
   231d4:	4b17      	ldr	r3, [pc, #92]	; (23234 <k_sched_time_slice_set+0xac>)
   231d6:	fbe7 0105 	umlal	r0, r1, r7, r5
   231da:	611a      	str	r2, [r3, #16]
   231dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   231e0:	2300      	movs	r3, #0
   231e2:	f7e9 fb39 	bl	c858 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   231e6:	4b14      	ldr	r3, [pc, #80]	; (23238 <k_sched_time_slice_set+0xb0>)
   231e8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   231ea:	4b14      	ldr	r3, [pc, #80]	; (2323c <k_sched_time_slice_set+0xb4>)
   231ec:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   231ee:	f7ff ffb5 	bl	2315c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231f2:	480b      	ldr	r0, [pc, #44]	; (23220 <k_sched_time_slice_set+0x98>)
   231f4:	f001 fb7a 	bl	248ec <z_spin_unlock_valid>
   231f8:	b968      	cbnz	r0, 23216 <k_sched_time_slice_set+0x8e>
   231fa:	2384      	movs	r3, #132	; 0x84
   231fc:	4a09      	ldr	r2, [pc, #36]	; (23224 <k_sched_time_slice_set+0x9c>)
   231fe:	4910      	ldr	r1, [pc, #64]	; (23240 <k_sched_time_slice_set+0xb8>)
   23200:	480a      	ldr	r0, [pc, #40]	; (2322c <k_sched_time_slice_set+0xa4>)
   23202:	f008 fefc 	bl	2bffe <printk>
   23206:	4906      	ldr	r1, [pc, #24]	; (23220 <k_sched_time_slice_set+0x98>)
   23208:	480e      	ldr	r0, [pc, #56]	; (23244 <k_sched_time_slice_set+0xbc>)
   2320a:	f008 fef8 	bl	2bffe <printk>
   2320e:	2184      	movs	r1, #132	; 0x84
   23210:	4804      	ldr	r0, [pc, #16]	; (23224 <k_sched_time_slice_set+0x9c>)
   23212:	f009 f911 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   23216:	f386 8811 	msr	BASEPRI, r6
   2321a:	f3bf 8f6f 	isb	sy
}
   2321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23220:	20021e0c 	.word	0x20021e0c
   23224:	0002ffdd 	.word	0x0002ffdd
   23228:	0003002f 	.word	0x0003002f
   2322c:	0002ff0d 	.word	0x0002ff0d
   23230:	00030044 	.word	0x00030044
   23234:	20021dd4 	.word	0x20021dd4
   23238:	20021e14 	.word	0x20021e14
   2323c:	20021e10 	.word	0x20021e10
   23240:	00030003 	.word	0x00030003
   23244:	0003001a 	.word	0x0003001a

00023248 <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
   23248:	b538      	push	{r3, r4, r5, lr}
   2324a:	4604      	mov	r4, r0
	__asm__ volatile(
   2324c:	f04f 0320 	mov.w	r3, #32
   23250:	f3ef 8511 	mrs	r5, BASEPRI
   23254:	f383 8811 	msr	BASEPRI, r3
   23258:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2325c:	4818      	ldr	r0, [pc, #96]	; (232c0 <z_find_first_thread_to_unpend+0x78>)
   2325e:	f001 fb37 	bl	248d0 <z_spin_lock_valid>
   23262:	b968      	cbnz	r0, 23280 <z_find_first_thread_to_unpend+0x38>
   23264:	235c      	movs	r3, #92	; 0x5c
   23266:	4a17      	ldr	r2, [pc, #92]	; (232c4 <z_find_first_thread_to_unpend+0x7c>)
   23268:	4917      	ldr	r1, [pc, #92]	; (232c8 <z_find_first_thread_to_unpend+0x80>)
   2326a:	4818      	ldr	r0, [pc, #96]	; (232cc <z_find_first_thread_to_unpend+0x84>)
   2326c:	f008 fec7 	bl	2bffe <printk>
   23270:	4913      	ldr	r1, [pc, #76]	; (232c0 <z_find_first_thread_to_unpend+0x78>)
   23272:	4817      	ldr	r0, [pc, #92]	; (232d0 <z_find_first_thread_to_unpend+0x88>)
   23274:	f008 fec3 	bl	2bffe <printk>
   23278:	215c      	movs	r1, #92	; 0x5c
   2327a:	4812      	ldr	r0, [pc, #72]	; (232c4 <z_find_first_thread_to_unpend+0x7c>)
   2327c:	f009 f8dc 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23280:	480f      	ldr	r0, [pc, #60]	; (232c0 <z_find_first_thread_to_unpend+0x78>)
   23282:	f001 fb43 	bl	2490c <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
   23286:	4620      	mov	r0, r4
   23288:	f00b f9b3 	bl	2e5f2 <z_priq_dumb_best>
   2328c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2328e:	480c      	ldr	r0, [pc, #48]	; (232c0 <z_find_first_thread_to_unpend+0x78>)
   23290:	f001 fb2c 	bl	248ec <z_spin_unlock_valid>
   23294:	b968      	cbnz	r0, 232b2 <z_find_first_thread_to_unpend+0x6a>
   23296:	2384      	movs	r3, #132	; 0x84
   23298:	4a0a      	ldr	r2, [pc, #40]	; (232c4 <z_find_first_thread_to_unpend+0x7c>)
   2329a:	490e      	ldr	r1, [pc, #56]	; (232d4 <z_find_first_thread_to_unpend+0x8c>)
   2329c:	480b      	ldr	r0, [pc, #44]	; (232cc <z_find_first_thread_to_unpend+0x84>)
   2329e:	f008 feae 	bl	2bffe <printk>
   232a2:	4907      	ldr	r1, [pc, #28]	; (232c0 <z_find_first_thread_to_unpend+0x78>)
   232a4:	480c      	ldr	r0, [pc, #48]	; (232d8 <z_find_first_thread_to_unpend+0x90>)
   232a6:	f008 feaa 	bl	2bffe <printk>
   232aa:	2184      	movs	r1, #132	; 0x84
   232ac:	4805      	ldr	r0, [pc, #20]	; (232c4 <z_find_first_thread_to_unpend+0x7c>)
   232ae:	f009 f8c3 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   232b2:	f385 8811 	msr	BASEPRI, r5
   232b6:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
   232ba:	4620      	mov	r0, r4
   232bc:	bd38      	pop	{r3, r4, r5, pc}
   232be:	bf00      	nop
   232c0:	20021e0c 	.word	0x20021e0c
   232c4:	0002ffdd 	.word	0x0002ffdd
   232c8:	0003002f 	.word	0x0003002f
   232cc:	0002ff0d 	.word	0x0002ff0d
   232d0:	00030044 	.word	0x00030044
   232d4:	00030003 	.word	0x00030003
   232d8:	0003001a 	.word	0x0003001a

000232dc <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   232dc:	b538      	push	{r3, r4, r5, lr}
   232de:	4604      	mov	r4, r0
	__asm__ volatile(
   232e0:	f04f 0320 	mov.w	r3, #32
   232e4:	f3ef 8511 	mrs	r5, BASEPRI
   232e8:	f383 8811 	msr	BASEPRI, r3
   232ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   232f0:	4817      	ldr	r0, [pc, #92]	; (23350 <z_unpend_thread_no_timeout+0x74>)
   232f2:	f001 faed 	bl	248d0 <z_spin_lock_valid>
   232f6:	b968      	cbnz	r0, 23314 <z_unpend_thread_no_timeout+0x38>
   232f8:	235c      	movs	r3, #92	; 0x5c
   232fa:	4a16      	ldr	r2, [pc, #88]	; (23354 <z_unpend_thread_no_timeout+0x78>)
   232fc:	4916      	ldr	r1, [pc, #88]	; (23358 <z_unpend_thread_no_timeout+0x7c>)
   232fe:	4817      	ldr	r0, [pc, #92]	; (2335c <z_unpend_thread_no_timeout+0x80>)
   23300:	f008 fe7d 	bl	2bffe <printk>
   23304:	4912      	ldr	r1, [pc, #72]	; (23350 <z_unpend_thread_no_timeout+0x74>)
   23306:	4816      	ldr	r0, [pc, #88]	; (23360 <z_unpend_thread_no_timeout+0x84>)
   23308:	f008 fe79 	bl	2bffe <printk>
   2330c:	215c      	movs	r1, #92	; 0x5c
   2330e:	4811      	ldr	r0, [pc, #68]	; (23354 <z_unpend_thread_no_timeout+0x78>)
   23310:	f009 f892 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23314:	480e      	ldr	r0, [pc, #56]	; (23350 <z_unpend_thread_no_timeout+0x74>)
   23316:	f001 faf9 	bl	2490c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   2331a:	4620      	mov	r0, r4
   2331c:	f00b f95a 	bl	2e5d4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23320:	480b      	ldr	r0, [pc, #44]	; (23350 <z_unpend_thread_no_timeout+0x74>)
   23322:	f001 fae3 	bl	248ec <z_spin_unlock_valid>
   23326:	b968      	cbnz	r0, 23344 <z_unpend_thread_no_timeout+0x68>
   23328:	2384      	movs	r3, #132	; 0x84
   2332a:	4a0a      	ldr	r2, [pc, #40]	; (23354 <z_unpend_thread_no_timeout+0x78>)
   2332c:	490d      	ldr	r1, [pc, #52]	; (23364 <z_unpend_thread_no_timeout+0x88>)
   2332e:	480b      	ldr	r0, [pc, #44]	; (2335c <z_unpend_thread_no_timeout+0x80>)
   23330:	f008 fe65 	bl	2bffe <printk>
   23334:	4906      	ldr	r1, [pc, #24]	; (23350 <z_unpend_thread_no_timeout+0x74>)
   23336:	480c      	ldr	r0, [pc, #48]	; (23368 <z_unpend_thread_no_timeout+0x8c>)
   23338:	f008 fe61 	bl	2bffe <printk>
   2333c:	2184      	movs	r1, #132	; 0x84
   2333e:	4805      	ldr	r0, [pc, #20]	; (23354 <z_unpend_thread_no_timeout+0x78>)
   23340:	f009 f87a 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   23344:	f385 8811 	msr	BASEPRI, r5
   23348:	f3bf 8f6f 	isb	sy
	}
}
   2334c:	bd38      	pop	{r3, r4, r5, pc}
   2334e:	bf00      	nop
   23350:	20021e0c 	.word	0x20021e0c
   23354:	0002ffdd 	.word	0x0002ffdd
   23358:	0003002f 	.word	0x0003002f
   2335c:	0002ff0d 	.word	0x0002ff0d
   23360:	00030044 	.word	0x00030044
   23364:	00030003 	.word	0x00030003
   23368:	0003001a 	.word	0x0003001a

0002336c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2336c:	b538      	push	{r3, r4, r5, lr}
   2336e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23370:	460d      	mov	r5, r1
   23372:	b9e9      	cbnz	r1, 233b0 <z_reschedule+0x44>
   23374:	f3ef 8305 	mrs	r3, IPSR
   23378:	b9d3      	cbnz	r3, 233b0 <z_reschedule+0x44>
	return _kernel.ready_q.cache;
   2337a:	4b19      	ldr	r3, [pc, #100]	; (233e0 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   2337c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2337e:	689b      	ldr	r3, [r3, #8]
   23380:	429a      	cmp	r2, r3
   23382:	d015      	beq.n	233b0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23384:	f001 fab2 	bl	248ec <z_spin_unlock_valid>
   23388:	b968      	cbnz	r0, 233a6 <z_reschedule+0x3a>
   2338a:	239b      	movs	r3, #155	; 0x9b
   2338c:	4a15      	ldr	r2, [pc, #84]	; (233e4 <z_reschedule+0x78>)
   2338e:	4916      	ldr	r1, [pc, #88]	; (233e8 <z_reschedule+0x7c>)
   23390:	4816      	ldr	r0, [pc, #88]	; (233ec <z_reschedule+0x80>)
   23392:	f008 fe34 	bl	2bffe <printk>
   23396:	4621      	mov	r1, r4
   23398:	4815      	ldr	r0, [pc, #84]	; (233f0 <z_reschedule+0x84>)
   2339a:	f008 fe30 	bl	2bffe <printk>
   2339e:	219b      	movs	r1, #155	; 0x9b
   233a0:	4810      	ldr	r0, [pc, #64]	; (233e4 <z_reschedule+0x78>)
   233a2:	f009 f849 	bl	2c438 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   233a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   233aa:	2000      	movs	r0, #0
   233ac:	f7f1 b92c 	b.w	14608 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233b0:	4620      	mov	r0, r4
   233b2:	f001 fa9b 	bl	248ec <z_spin_unlock_valid>
   233b6:	b968      	cbnz	r0, 233d4 <z_reschedule+0x68>
   233b8:	2384      	movs	r3, #132	; 0x84
   233ba:	4a0a      	ldr	r2, [pc, #40]	; (233e4 <z_reschedule+0x78>)
   233bc:	490a      	ldr	r1, [pc, #40]	; (233e8 <z_reschedule+0x7c>)
   233be:	480b      	ldr	r0, [pc, #44]	; (233ec <z_reschedule+0x80>)
   233c0:	f008 fe1d 	bl	2bffe <printk>
   233c4:	4621      	mov	r1, r4
   233c6:	480a      	ldr	r0, [pc, #40]	; (233f0 <z_reschedule+0x84>)
   233c8:	f008 fe19 	bl	2bffe <printk>
   233cc:	2184      	movs	r1, #132	; 0x84
   233ce:	4805      	ldr	r0, [pc, #20]	; (233e4 <z_reschedule+0x78>)
   233d0:	f009 f832 	bl	2c438 <assert_post_action>
   233d4:	f385 8811 	msr	BASEPRI, r5
   233d8:	f3bf 8f6f 	isb	sy
   233dc:	bd38      	pop	{r3, r4, r5, pc}
   233de:	bf00      	nop
   233e0:	20021dd4 	.word	0x20021dd4
   233e4:	0002ffdd 	.word	0x0002ffdd
   233e8:	00030003 	.word	0x00030003
   233ec:	0002ff0d 	.word	0x0002ff0d
   233f0:	0003001a 	.word	0x0003001a

000233f4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   233f4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   233f6:	f04f 0320 	mov.w	r3, #32
   233fa:	f3ef 8511 	mrs	r5, BASEPRI
   233fe:	f383 8811 	msr	BASEPRI, r3
   23402:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23406:	482b      	ldr	r0, [pc, #172]	; (234b4 <k_sched_lock+0xc0>)
   23408:	f001 fa62 	bl	248d0 <z_spin_lock_valid>
   2340c:	b968      	cbnz	r0, 2342a <k_sched_lock+0x36>
   2340e:	235c      	movs	r3, #92	; 0x5c
   23410:	4a29      	ldr	r2, [pc, #164]	; (234b8 <k_sched_lock+0xc4>)
   23412:	492a      	ldr	r1, [pc, #168]	; (234bc <k_sched_lock+0xc8>)
   23414:	482a      	ldr	r0, [pc, #168]	; (234c0 <k_sched_lock+0xcc>)
   23416:	f008 fdf2 	bl	2bffe <printk>
   2341a:	4926      	ldr	r1, [pc, #152]	; (234b4 <k_sched_lock+0xc0>)
   2341c:	4829      	ldr	r0, [pc, #164]	; (234c4 <k_sched_lock+0xd0>)
   2341e:	f008 fdee 	bl	2bffe <printk>
   23422:	215c      	movs	r1, #92	; 0x5c
   23424:	4824      	ldr	r0, [pc, #144]	; (234b8 <k_sched_lock+0xc4>)
   23426:	f009 f807 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2342a:	4822      	ldr	r0, [pc, #136]	; (234b4 <k_sched_lock+0xc0>)
   2342c:	f001 fa6e 	bl	2490c <z_spin_lock_set_owner>
   23430:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   23434:	b173      	cbz	r3, 23454 <k_sched_lock+0x60>
   23436:	4924      	ldr	r1, [pc, #144]	; (234c8 <k_sched_lock+0xd4>)
   23438:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2343c:	4a23      	ldr	r2, [pc, #140]	; (234cc <k_sched_lock+0xd8>)
   2343e:	4820      	ldr	r0, [pc, #128]	; (234c0 <k_sched_lock+0xcc>)
   23440:	f008 fddd 	bl	2bffe <printk>
   23444:	4822      	ldr	r0, [pc, #136]	; (234d0 <k_sched_lock+0xdc>)
   23446:	f008 fdda 	bl	2bffe <printk>
   2344a:	f44f 7186 	mov.w	r1, #268	; 0x10c
   2344e:	481f      	ldr	r0, [pc, #124]	; (234cc <k_sched_lock+0xd8>)
   23450:	f008 fff2 	bl	2c438 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   23454:	4c1f      	ldr	r4, [pc, #124]	; (234d4 <k_sched_lock+0xe0>)
   23456:	68a2      	ldr	r2, [r4, #8]
   23458:	7bd2      	ldrb	r2, [r2, #15]
   2345a:	2a01      	cmp	r2, #1
   2345c:	d10e      	bne.n	2347c <k_sched_lock+0x88>
   2345e:	491e      	ldr	r1, [pc, #120]	; (234d8 <k_sched_lock+0xe4>)
   23460:	f240 130d 	movw	r3, #269	; 0x10d
   23464:	4a19      	ldr	r2, [pc, #100]	; (234cc <k_sched_lock+0xd8>)
   23466:	4816      	ldr	r0, [pc, #88]	; (234c0 <k_sched_lock+0xcc>)
   23468:	f008 fdc9 	bl	2bffe <printk>
   2346c:	4818      	ldr	r0, [pc, #96]	; (234d0 <k_sched_lock+0xdc>)
   2346e:	f008 fdc6 	bl	2bffe <printk>
   23472:	f240 110d 	movw	r1, #269	; 0x10d
   23476:	4815      	ldr	r0, [pc, #84]	; (234cc <k_sched_lock+0xd8>)
   23478:	f008 ffde 	bl	2c438 <assert_post_action>
	--_current->base.sched_locked;
   2347c:	68a2      	ldr	r2, [r4, #8]
   2347e:	7bd3      	ldrb	r3, [r2, #15]
   23480:	3b01      	subs	r3, #1
   23482:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23484:	480b      	ldr	r0, [pc, #44]	; (234b4 <k_sched_lock+0xc0>)
   23486:	f001 fa31 	bl	248ec <z_spin_unlock_valid>
   2348a:	b968      	cbnz	r0, 234a8 <k_sched_lock+0xb4>
   2348c:	2384      	movs	r3, #132	; 0x84
   2348e:	4a0a      	ldr	r2, [pc, #40]	; (234b8 <k_sched_lock+0xc4>)
   23490:	4912      	ldr	r1, [pc, #72]	; (234dc <k_sched_lock+0xe8>)
   23492:	480b      	ldr	r0, [pc, #44]	; (234c0 <k_sched_lock+0xcc>)
   23494:	f008 fdb3 	bl	2bffe <printk>
   23498:	4906      	ldr	r1, [pc, #24]	; (234b4 <k_sched_lock+0xc0>)
   2349a:	4811      	ldr	r0, [pc, #68]	; (234e0 <k_sched_lock+0xec>)
   2349c:	f008 fdaf 	bl	2bffe <printk>
   234a0:	2184      	movs	r1, #132	; 0x84
   234a2:	4805      	ldr	r0, [pc, #20]	; (234b8 <k_sched_lock+0xc4>)
   234a4:	f008 ffc8 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   234a8:	f385 8811 	msr	BASEPRI, r5
   234ac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   234b0:	bd38      	pop	{r3, r4, r5, pc}
   234b2:	bf00      	nop
   234b4:	20021e0c 	.word	0x20021e0c
   234b8:	0002ffdd 	.word	0x0002ffdd
   234bc:	0003002f 	.word	0x0003002f
   234c0:	0002ff0d 	.word	0x0002ff0d
   234c4:	00030044 	.word	0x00030044
   234c8:	00032905 	.word	0x00032905
   234cc:	00032953 	.word	0x00032953
   234d0:	0003053a 	.word	0x0003053a
   234d4:	20021dd4 	.word	0x20021dd4
   234d8:	0003297e 	.word	0x0003297e
   234dc:	00030003 	.word	0x00030003
   234e0:	0003001a 	.word	0x0003001a

000234e4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   234e4:	4b11      	ldr	r3, [pc, #68]	; (2352c <z_priq_dumb_remove+0x48>)
{
   234e6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   234e8:	f103 0228 	add.w	r2, r3, #40	; 0x28
   234ec:	4282      	cmp	r2, r0
{
   234ee:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   234f0:	d105      	bne.n	234fe <z_priq_dumb_remove+0x1a>
   234f2:	689b      	ldr	r3, [r3, #8]
   234f4:	428b      	cmp	r3, r1
   234f6:	d102      	bne.n	234fe <z_priq_dumb_remove+0x1a>
   234f8:	7b4b      	ldrb	r3, [r1, #13]
   234fa:	06db      	lsls	r3, r3, #27
   234fc:	d115      	bne.n	2352a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   234fe:	4b0c      	ldr	r3, [pc, #48]	; (23530 <z_priq_dumb_remove+0x4c>)
   23500:	429c      	cmp	r4, r3
   23502:	d10b      	bne.n	2351c <z_priq_dumb_remove+0x38>
   23504:	490b      	ldr	r1, [pc, #44]	; (23534 <z_priq_dumb_remove+0x50>)
   23506:	480c      	ldr	r0, [pc, #48]	; (23538 <z_priq_dumb_remove+0x54>)
   23508:	f240 339f 	movw	r3, #927	; 0x39f
   2350c:	4a0b      	ldr	r2, [pc, #44]	; (2353c <z_priq_dumb_remove+0x58>)
   2350e:	f008 fd76 	bl	2bffe <printk>
   23512:	f240 319f 	movw	r1, #927	; 0x39f
   23516:	4809      	ldr	r0, [pc, #36]	; (2353c <z_priq_dumb_remove+0x58>)
   23518:	f008 ff8e 	bl	2c438 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2351c:	e9d4 3200 	ldrd	r3, r2, [r4]
   23520:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   23522:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23524:	2300      	movs	r3, #0
	node->prev = NULL;
   23526:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2352a:	bd10      	pop	{r4, pc}
   2352c:	20021dd4 	.word	0x20021dd4
   23530:	200211c8 	.word	0x200211c8
   23534:	000329e7 	.word	0x000329e7
   23538:	0002ff0d 	.word	0x0002ff0d
   2353c:	000329ae 	.word	0x000329ae

00023540 <z_unpend_thread>:
{
   23540:	b538      	push	{r3, r4, r5, lr}
   23542:	4604      	mov	r4, r0
	__asm__ volatile(
   23544:	f04f 0320 	mov.w	r3, #32
   23548:	f3ef 8511 	mrs	r5, BASEPRI
   2354c:	f383 8811 	msr	BASEPRI, r3
   23550:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23554:	4819      	ldr	r0, [pc, #100]	; (235bc <z_unpend_thread+0x7c>)
   23556:	f001 f9bb 	bl	248d0 <z_spin_lock_valid>
   2355a:	b968      	cbnz	r0, 23578 <z_unpend_thread+0x38>
   2355c:	235c      	movs	r3, #92	; 0x5c
   2355e:	4a18      	ldr	r2, [pc, #96]	; (235c0 <z_unpend_thread+0x80>)
   23560:	4918      	ldr	r1, [pc, #96]	; (235c4 <z_unpend_thread+0x84>)
   23562:	4819      	ldr	r0, [pc, #100]	; (235c8 <z_unpend_thread+0x88>)
   23564:	f008 fd4b 	bl	2bffe <printk>
   23568:	4914      	ldr	r1, [pc, #80]	; (235bc <z_unpend_thread+0x7c>)
   2356a:	4818      	ldr	r0, [pc, #96]	; (235cc <z_unpend_thread+0x8c>)
   2356c:	f008 fd47 	bl	2bffe <printk>
   23570:	215c      	movs	r1, #92	; 0x5c
   23572:	4813      	ldr	r0, [pc, #76]	; (235c0 <z_unpend_thread+0x80>)
   23574:	f008 ff60 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23578:	4810      	ldr	r0, [pc, #64]	; (235bc <z_unpend_thread+0x7c>)
   2357a:	f001 f9c7 	bl	2490c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   2357e:	4620      	mov	r0, r4
   23580:	f00b f828 	bl	2e5d4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23584:	480d      	ldr	r0, [pc, #52]	; (235bc <z_unpend_thread+0x7c>)
   23586:	f001 f9b1 	bl	248ec <z_spin_unlock_valid>
   2358a:	b968      	cbnz	r0, 235a8 <z_unpend_thread+0x68>
   2358c:	2384      	movs	r3, #132	; 0x84
   2358e:	4a0c      	ldr	r2, [pc, #48]	; (235c0 <z_unpend_thread+0x80>)
   23590:	490f      	ldr	r1, [pc, #60]	; (235d0 <z_unpend_thread+0x90>)
   23592:	480d      	ldr	r0, [pc, #52]	; (235c8 <z_unpend_thread+0x88>)
   23594:	f008 fd33 	bl	2bffe <printk>
   23598:	4908      	ldr	r1, [pc, #32]	; (235bc <z_unpend_thread+0x7c>)
   2359a:	480e      	ldr	r0, [pc, #56]	; (235d4 <z_unpend_thread+0x94>)
   2359c:	f008 fd2f 	bl	2bffe <printk>
   235a0:	2184      	movs	r1, #132	; 0x84
   235a2:	4807      	ldr	r0, [pc, #28]	; (235c0 <z_unpend_thread+0x80>)
   235a4:	f008 ff48 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   235a8:	f385 8811 	msr	BASEPRI, r5
   235ac:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   235b0:	f104 0018 	add.w	r0, r4, #24
}
   235b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   235b8:	f001 bb82 	b.w	24cc0 <z_abort_timeout>
   235bc:	20021e0c 	.word	0x20021e0c
   235c0:	0002ffdd 	.word	0x0002ffdd
   235c4:	0003002f 	.word	0x0003002f
   235c8:	0002ff0d 	.word	0x0002ff0d
   235cc:	00030044 	.word	0x00030044
   235d0:	00030003 	.word	0x00030003
   235d4:	0003001a 	.word	0x0003001a

000235d8 <update_cache>:
{
   235d8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   235da:	4c10      	ldr	r4, [pc, #64]	; (2361c <update_cache+0x44>)
{
   235dc:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   235de:	f104 0028 	add.w	r0, r4, #40	; 0x28
   235e2:	f00b f806 	bl	2e5f2 <z_priq_dumb_best>
   235e6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   235e8:	68a3      	ldr	r3, [r4, #8]
   235ea:	7b59      	ldrb	r1, [r3, #13]
   235ec:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   235ee:	bf44      	itt	mi
   235f0:	f041 0108 	orrmi.w	r1, r1, #8
   235f4:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   235f6:	b905      	cbnz	r5, 235fa <update_cache+0x22>
   235f8:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   235fa:	b94e      	cbnz	r6, 23610 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   235fc:	7b5a      	ldrb	r2, [r3, #13]
   235fe:	06d2      	lsls	r2, r2, #27
   23600:	d106      	bne.n	23610 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   23602:	69aa      	ldr	r2, [r5, #24]
   23604:	b922      	cbnz	r2, 23610 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   23606:	89da      	ldrh	r2, [r3, #14]
   23608:	2a7f      	cmp	r2, #127	; 0x7f
   2360a:	d901      	bls.n	23610 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   2360c:	6263      	str	r3, [r4, #36]	; 0x24
}
   2360e:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   23610:	42ab      	cmp	r3, r5
   23612:	d001      	beq.n	23618 <update_cache+0x40>
			z_reset_time_slice();
   23614:	f7ff fda2 	bl	2315c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   23618:	6265      	str	r5, [r4, #36]	; 0x24
}
   2361a:	e7f8      	b.n	2360e <update_cache+0x36>
   2361c:	20021dd4 	.word	0x20021dd4

00023620 <k_sched_unlock>:
{
   23620:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23622:	f04f 0320 	mov.w	r3, #32
   23626:	f3ef 8511 	mrs	r5, BASEPRI
   2362a:	f383 8811 	msr	BASEPRI, r3
   2362e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23632:	482d      	ldr	r0, [pc, #180]	; (236e8 <k_sched_unlock+0xc8>)
   23634:	f001 f94c 	bl	248d0 <z_spin_lock_valid>
   23638:	b968      	cbnz	r0, 23656 <k_sched_unlock+0x36>
   2363a:	235c      	movs	r3, #92	; 0x5c
   2363c:	4a2b      	ldr	r2, [pc, #172]	; (236ec <k_sched_unlock+0xcc>)
   2363e:	492c      	ldr	r1, [pc, #176]	; (236f0 <k_sched_unlock+0xd0>)
   23640:	482c      	ldr	r0, [pc, #176]	; (236f4 <k_sched_unlock+0xd4>)
   23642:	f008 fcdc 	bl	2bffe <printk>
   23646:	4928      	ldr	r1, [pc, #160]	; (236e8 <k_sched_unlock+0xc8>)
   23648:	482b      	ldr	r0, [pc, #172]	; (236f8 <k_sched_unlock+0xd8>)
   2364a:	f008 fcd8 	bl	2bffe <printk>
   2364e:	215c      	movs	r1, #92	; 0x5c
   23650:	4826      	ldr	r0, [pc, #152]	; (236ec <k_sched_unlock+0xcc>)
   23652:	f008 fef1 	bl	2c438 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   23656:	4c29      	ldr	r4, [pc, #164]	; (236fc <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   23658:	4823      	ldr	r0, [pc, #140]	; (236e8 <k_sched_unlock+0xc8>)
   2365a:	f001 f957 	bl	2490c <z_spin_lock_set_owner>
   2365e:	68a2      	ldr	r2, [r4, #8]
   23660:	7bd2      	ldrb	r2, [r2, #15]
   23662:	b972      	cbnz	r2, 23682 <k_sched_unlock+0x62>
   23664:	4926      	ldr	r1, [pc, #152]	; (23700 <k_sched_unlock+0xe0>)
   23666:	f240 333a 	movw	r3, #826	; 0x33a
   2366a:	4a26      	ldr	r2, [pc, #152]	; (23704 <k_sched_unlock+0xe4>)
   2366c:	4821      	ldr	r0, [pc, #132]	; (236f4 <k_sched_unlock+0xd4>)
   2366e:	f008 fcc6 	bl	2bffe <printk>
   23672:	4825      	ldr	r0, [pc, #148]	; (23708 <k_sched_unlock+0xe8>)
   23674:	f008 fcc3 	bl	2bffe <printk>
   23678:	f240 313a 	movw	r1, #826	; 0x33a
   2367c:	4821      	ldr	r0, [pc, #132]	; (23704 <k_sched_unlock+0xe4>)
   2367e:	f008 fedb 	bl	2c438 <assert_post_action>
   23682:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   23686:	b173      	cbz	r3, 236a6 <k_sched_unlock+0x86>
   23688:	4920      	ldr	r1, [pc, #128]	; (2370c <k_sched_unlock+0xec>)
   2368a:	f240 333b 	movw	r3, #827	; 0x33b
   2368e:	4a1d      	ldr	r2, [pc, #116]	; (23704 <k_sched_unlock+0xe4>)
   23690:	4818      	ldr	r0, [pc, #96]	; (236f4 <k_sched_unlock+0xd4>)
   23692:	f008 fcb4 	bl	2bffe <printk>
   23696:	481c      	ldr	r0, [pc, #112]	; (23708 <k_sched_unlock+0xe8>)
   23698:	f008 fcb1 	bl	2bffe <printk>
   2369c:	f240 313b 	movw	r1, #827	; 0x33b
   236a0:	4818      	ldr	r0, [pc, #96]	; (23704 <k_sched_unlock+0xe4>)
   236a2:	f008 fec9 	bl	2c438 <assert_post_action>
		++_current->base.sched_locked;
   236a6:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   236a8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   236aa:	7bd3      	ldrb	r3, [r2, #15]
   236ac:	3301      	adds	r3, #1
   236ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   236b0:	f7ff ff92 	bl	235d8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   236b4:	480c      	ldr	r0, [pc, #48]	; (236e8 <k_sched_unlock+0xc8>)
   236b6:	f001 f919 	bl	248ec <z_spin_unlock_valid>
   236ba:	b968      	cbnz	r0, 236d8 <k_sched_unlock+0xb8>
   236bc:	2384      	movs	r3, #132	; 0x84
   236be:	4a0b      	ldr	r2, [pc, #44]	; (236ec <k_sched_unlock+0xcc>)
   236c0:	4913      	ldr	r1, [pc, #76]	; (23710 <k_sched_unlock+0xf0>)
   236c2:	480c      	ldr	r0, [pc, #48]	; (236f4 <k_sched_unlock+0xd4>)
   236c4:	f008 fc9b 	bl	2bffe <printk>
   236c8:	4907      	ldr	r1, [pc, #28]	; (236e8 <k_sched_unlock+0xc8>)
   236ca:	4812      	ldr	r0, [pc, #72]	; (23714 <k_sched_unlock+0xf4>)
   236cc:	f008 fc97 	bl	2bffe <printk>
   236d0:	2184      	movs	r1, #132	; 0x84
   236d2:	4806      	ldr	r0, [pc, #24]	; (236ec <k_sched_unlock+0xcc>)
   236d4:	f008 feb0 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   236d8:	f385 8811 	msr	BASEPRI, r5
   236dc:	f3bf 8f6f 	isb	sy
}
   236e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   236e4:	f00a bf6c 	b.w	2e5c0 <z_reschedule_unlocked>
   236e8:	20021e0c 	.word	0x20021e0c
   236ec:	0002ffdd 	.word	0x0002ffdd
   236f0:	0003002f 	.word	0x0003002f
   236f4:	0002ff0d 	.word	0x0002ff0d
   236f8:	00030044 	.word	0x00030044
   236fc:	20021dd4 	.word	0x20021dd4
   23700:	00032a08 	.word	0x00032a08
   23704:	000329ae 	.word	0x000329ae
   23708:	0003053a 	.word	0x0003053a
   2370c:	00032905 	.word	0x00032905
   23710:	00030003 	.word	0x00030003
   23714:	0003001a 	.word	0x0003001a

00023718 <ready_thread>:
{
   23718:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2371a:	7b43      	ldrb	r3, [r0, #13]
   2371c:	4604      	mov	r4, r0
   2371e:	06db      	lsls	r3, r3, #27
   23720:	d13d      	bne.n	2379e <ready_thread+0x86>
	return !sys_dnode_is_linked(&t->node);
   23722:	6985      	ldr	r5, [r0, #24]
	if (z_is_thread_ready(thread)) {
   23724:	2d00      	cmp	r5, #0
   23726:	d13a      	bne.n	2379e <ready_thread+0x86>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23728:	4b1d      	ldr	r3, [pc, #116]	; (237a0 <ready_thread+0x88>)
   2372a:	4298      	cmp	r0, r3
   2372c:	d10b      	bne.n	23746 <ready_thread+0x2e>
   2372e:	491d      	ldr	r1, [pc, #116]	; (237a4 <ready_thread+0x8c>)
   23730:	481d      	ldr	r0, [pc, #116]	; (237a8 <ready_thread+0x90>)
   23732:	f240 3389 	movw	r3, #905	; 0x389
   23736:	4a1d      	ldr	r2, [pc, #116]	; (237ac <ready_thread+0x94>)
   23738:	f008 fc61 	bl	2bffe <printk>
   2373c:	f240 3189 	movw	r1, #905	; 0x389
   23740:	481a      	ldr	r0, [pc, #104]	; (237ac <ready_thread+0x94>)
   23742:	f008 fe79 	bl	2c438 <assert_post_action>
	return list->head == list;
   23746:	4a1a      	ldr	r2, [pc, #104]	; (237b0 <ready_thread+0x98>)
   23748:	4613      	mov	r3, r2
   2374a:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2374e:	4298      	cmp	r0, r3
   23750:	bf18      	it	ne
   23752:	4605      	movne	r5, r0
   23754:	2d00      	cmp	r5, #0
   23756:	4619      	mov	r1, r3
   23758:	462b      	mov	r3, r5
   2375a:	bf38      	it	cc
   2375c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2375e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23760:	b1bb      	cbz	r3, 23792 <ready_thread+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
   23762:	f994 600e 	ldrsb.w	r6, [r4, #14]
   23766:	f993 500e 	ldrsb.w	r5, [r3, #14]
   2376a:	42ae      	cmp	r6, r5
   2376c:	db03      	blt.n	23776 <ready_thread+0x5e>
	return (node == list->tail) ? NULL : node->next;
   2376e:	4298      	cmp	r0, r3
   23770:	d00f      	beq.n	23792 <ready_thread+0x7a>
   23772:	681b      	ldr	r3, [r3, #0]
   23774:	e7f4      	b.n	23760 <ready_thread+0x48>
	node->prev = successor->prev;
   23776:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23778:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2377c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2377e:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   23780:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   23782:	2000      	movs	r0, #0
   23784:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23788:	7363      	strb	r3, [r4, #13]
}
   2378a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2378e:	f7ff bf23 	b.w	235d8 <update_cache>
	node->prev = list->tail;
   23792:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   23796:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23798:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2379a:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2379c:	e7f0      	b.n	23780 <ready_thread+0x68>
}
   2379e:	bd70      	pop	{r4, r5, r6, pc}
   237a0:	200211c8 	.word	0x200211c8
   237a4:	000329e7 	.word	0x000329e7
   237a8:	0002ff0d 	.word	0x0002ff0d
   237ac:	000329ae 	.word	0x000329ae
   237b0:	20021dd4 	.word	0x20021dd4

000237b4 <z_ready_thread>:
{
   237b4:	b538      	push	{r3, r4, r5, lr}
   237b6:	4604      	mov	r4, r0
	__asm__ volatile(
   237b8:	f04f 0320 	mov.w	r3, #32
   237bc:	f3ef 8511 	mrs	r5, BASEPRI
   237c0:	f383 8811 	msr	BASEPRI, r3
   237c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   237c8:	4817      	ldr	r0, [pc, #92]	; (23828 <z_ready_thread+0x74>)
   237ca:	f001 f881 	bl	248d0 <z_spin_lock_valid>
   237ce:	b968      	cbnz	r0, 237ec <z_ready_thread+0x38>
   237d0:	235c      	movs	r3, #92	; 0x5c
   237d2:	4a16      	ldr	r2, [pc, #88]	; (2382c <z_ready_thread+0x78>)
   237d4:	4916      	ldr	r1, [pc, #88]	; (23830 <z_ready_thread+0x7c>)
   237d6:	4817      	ldr	r0, [pc, #92]	; (23834 <z_ready_thread+0x80>)
   237d8:	f008 fc11 	bl	2bffe <printk>
   237dc:	4912      	ldr	r1, [pc, #72]	; (23828 <z_ready_thread+0x74>)
   237de:	4816      	ldr	r0, [pc, #88]	; (23838 <z_ready_thread+0x84>)
   237e0:	f008 fc0d 	bl	2bffe <printk>
   237e4:	215c      	movs	r1, #92	; 0x5c
   237e6:	4811      	ldr	r0, [pc, #68]	; (2382c <z_ready_thread+0x78>)
   237e8:	f008 fe26 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   237ec:	480e      	ldr	r0, [pc, #56]	; (23828 <z_ready_thread+0x74>)
   237ee:	f001 f88d 	bl	2490c <z_spin_lock_set_owner>
		ready_thread(thread);
   237f2:	4620      	mov	r0, r4
   237f4:	f7ff ff90 	bl	23718 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237f8:	480b      	ldr	r0, [pc, #44]	; (23828 <z_ready_thread+0x74>)
   237fa:	f001 f877 	bl	248ec <z_spin_unlock_valid>
   237fe:	b968      	cbnz	r0, 2381c <z_ready_thread+0x68>
   23800:	2384      	movs	r3, #132	; 0x84
   23802:	4a0a      	ldr	r2, [pc, #40]	; (2382c <z_ready_thread+0x78>)
   23804:	490d      	ldr	r1, [pc, #52]	; (2383c <z_ready_thread+0x88>)
   23806:	480b      	ldr	r0, [pc, #44]	; (23834 <z_ready_thread+0x80>)
   23808:	f008 fbf9 	bl	2bffe <printk>
   2380c:	4906      	ldr	r1, [pc, #24]	; (23828 <z_ready_thread+0x74>)
   2380e:	480c      	ldr	r0, [pc, #48]	; (23840 <z_ready_thread+0x8c>)
   23810:	f008 fbf5 	bl	2bffe <printk>
   23814:	2184      	movs	r1, #132	; 0x84
   23816:	4805      	ldr	r0, [pc, #20]	; (2382c <z_ready_thread+0x78>)
   23818:	f008 fe0e 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   2381c:	f385 8811 	msr	BASEPRI, r5
   23820:	f3bf 8f6f 	isb	sy
}
   23824:	bd38      	pop	{r3, r4, r5, pc}
   23826:	bf00      	nop
   23828:	20021e0c 	.word	0x20021e0c
   2382c:	0002ffdd 	.word	0x0002ffdd
   23830:	0003002f 	.word	0x0003002f
   23834:	0002ff0d 	.word	0x0002ff0d
   23838:	00030044 	.word	0x00030044
   2383c:	00030003 	.word	0x00030003
   23840:	0003001a 	.word	0x0003001a

00023844 <z_sched_start>:
{
   23844:	b538      	push	{r3, r4, r5, lr}
   23846:	4604      	mov	r4, r0
	__asm__ volatile(
   23848:	f04f 0320 	mov.w	r3, #32
   2384c:	f3ef 8511 	mrs	r5, BASEPRI
   23850:	f383 8811 	msr	BASEPRI, r3
   23854:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23858:	481d      	ldr	r0, [pc, #116]	; (238d0 <z_sched_start+0x8c>)
   2385a:	f001 f839 	bl	248d0 <z_spin_lock_valid>
   2385e:	b968      	cbnz	r0, 2387c <z_sched_start+0x38>
   23860:	235c      	movs	r3, #92	; 0x5c
   23862:	4a1c      	ldr	r2, [pc, #112]	; (238d4 <z_sched_start+0x90>)
   23864:	491c      	ldr	r1, [pc, #112]	; (238d8 <z_sched_start+0x94>)
   23866:	481d      	ldr	r0, [pc, #116]	; (238dc <z_sched_start+0x98>)
   23868:	f008 fbc9 	bl	2bffe <printk>
   2386c:	4918      	ldr	r1, [pc, #96]	; (238d0 <z_sched_start+0x8c>)
   2386e:	481c      	ldr	r0, [pc, #112]	; (238e0 <z_sched_start+0x9c>)
   23870:	f008 fbc5 	bl	2bffe <printk>
   23874:	215c      	movs	r1, #92	; 0x5c
   23876:	4817      	ldr	r0, [pc, #92]	; (238d4 <z_sched_start+0x90>)
   23878:	f008 fdde 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2387c:	4814      	ldr	r0, [pc, #80]	; (238d0 <z_sched_start+0x8c>)
   2387e:	f001 f845 	bl	2490c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   23882:	7b63      	ldrb	r3, [r4, #13]
   23884:	075a      	lsls	r2, r3, #29
   23886:	d416      	bmi.n	238b6 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23888:	4811      	ldr	r0, [pc, #68]	; (238d0 <z_sched_start+0x8c>)
   2388a:	f001 f82f 	bl	248ec <z_spin_unlock_valid>
   2388e:	b968      	cbnz	r0, 238ac <z_sched_start+0x68>
   23890:	2384      	movs	r3, #132	; 0x84
   23892:	4a10      	ldr	r2, [pc, #64]	; (238d4 <z_sched_start+0x90>)
   23894:	4913      	ldr	r1, [pc, #76]	; (238e4 <z_sched_start+0xa0>)
   23896:	4811      	ldr	r0, [pc, #68]	; (238dc <z_sched_start+0x98>)
   23898:	f008 fbb1 	bl	2bffe <printk>
   2389c:	490c      	ldr	r1, [pc, #48]	; (238d0 <z_sched_start+0x8c>)
   2389e:	4812      	ldr	r0, [pc, #72]	; (238e8 <z_sched_start+0xa4>)
   238a0:	f008 fbad 	bl	2bffe <printk>
   238a4:	2184      	movs	r1, #132	; 0x84
   238a6:	480b      	ldr	r0, [pc, #44]	; (238d4 <z_sched_start+0x90>)
   238a8:	f008 fdc6 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   238ac:	f385 8811 	msr	BASEPRI, r5
   238b0:	f3bf 8f6f 	isb	sy
}
   238b4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   238b6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   238ba:	4620      	mov	r0, r4
   238bc:	7363      	strb	r3, [r4, #13]
   238be:	f7ff ff2b 	bl	23718 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   238c2:	4629      	mov	r1, r5
}
   238c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   238c8:	4801      	ldr	r0, [pc, #4]	; (238d0 <z_sched_start+0x8c>)
   238ca:	f7ff bd4f 	b.w	2336c <z_reschedule>
   238ce:	bf00      	nop
   238d0:	20021e0c 	.word	0x20021e0c
   238d4:	0002ffdd 	.word	0x0002ffdd
   238d8:	0003002f 	.word	0x0003002f
   238dc:	0002ff0d 	.word	0x0002ff0d
   238e0:	00030044 	.word	0x00030044
   238e4:	00030003 	.word	0x00030003
   238e8:	0003001a 	.word	0x0003001a

000238ec <z_thread_timeout>:
{
   238ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   238ee:	4604      	mov	r4, r0
	__asm__ volatile(
   238f0:	f04f 0320 	mov.w	r3, #32
   238f4:	f3ef 8511 	mrs	r5, BASEPRI
   238f8:	f383 8811 	msr	BASEPRI, r3
   238fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23900:	481e      	ldr	r0, [pc, #120]	; (2397c <z_thread_timeout+0x90>)
   23902:	f000 ffe5 	bl	248d0 <z_spin_lock_valid>
   23906:	b968      	cbnz	r0, 23924 <z_thread_timeout+0x38>
   23908:	235c      	movs	r3, #92	; 0x5c
   2390a:	4a1d      	ldr	r2, [pc, #116]	; (23980 <z_thread_timeout+0x94>)
   2390c:	491d      	ldr	r1, [pc, #116]	; (23984 <z_thread_timeout+0x98>)
   2390e:	481e      	ldr	r0, [pc, #120]	; (23988 <z_thread_timeout+0x9c>)
   23910:	f008 fb75 	bl	2bffe <printk>
   23914:	4919      	ldr	r1, [pc, #100]	; (2397c <z_thread_timeout+0x90>)
   23916:	481d      	ldr	r0, [pc, #116]	; (2398c <z_thread_timeout+0xa0>)
   23918:	f008 fb71 	bl	2bffe <printk>
   2391c:	215c      	movs	r1, #92	; 0x5c
   2391e:	4818      	ldr	r0, [pc, #96]	; (23980 <z_thread_timeout+0x94>)
   23920:	f008 fd8a 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23924:	4815      	ldr	r0, [pc, #84]	; (2397c <z_thread_timeout+0x90>)
   23926:	f000 fff1 	bl	2490c <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   2392a:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   2392e:	f1a4 0018 	sub.w	r0, r4, #24
		if (thread->base.pended_on != NULL) {
   23932:	b11b      	cbz	r3, 2393c <z_thread_timeout+0x50>
			unpend_thread_no_timeout(thread);
   23934:	9001      	str	r0, [sp, #4]
   23936:	f00a fe4d 	bl	2e5d4 <unpend_thread_no_timeout>
   2393a:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2393c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23940:	f023 0314 	bic.w	r3, r3, #20
   23944:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   23948:	f7ff fee6 	bl	23718 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2394c:	480b      	ldr	r0, [pc, #44]	; (2397c <z_thread_timeout+0x90>)
   2394e:	f000 ffcd 	bl	248ec <z_spin_unlock_valid>
   23952:	b968      	cbnz	r0, 23970 <z_thread_timeout+0x84>
   23954:	2384      	movs	r3, #132	; 0x84
   23956:	4a0a      	ldr	r2, [pc, #40]	; (23980 <z_thread_timeout+0x94>)
   23958:	490d      	ldr	r1, [pc, #52]	; (23990 <z_thread_timeout+0xa4>)
   2395a:	480b      	ldr	r0, [pc, #44]	; (23988 <z_thread_timeout+0x9c>)
   2395c:	f008 fb4f 	bl	2bffe <printk>
   23960:	4906      	ldr	r1, [pc, #24]	; (2397c <z_thread_timeout+0x90>)
   23962:	480c      	ldr	r0, [pc, #48]	; (23994 <z_thread_timeout+0xa8>)
   23964:	f008 fb4b 	bl	2bffe <printk>
   23968:	2184      	movs	r1, #132	; 0x84
   2396a:	4805      	ldr	r0, [pc, #20]	; (23980 <z_thread_timeout+0x94>)
   2396c:	f008 fd64 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   23970:	f385 8811 	msr	BASEPRI, r5
   23974:	f3bf 8f6f 	isb	sy
}
   23978:	b003      	add	sp, #12
   2397a:	bd30      	pop	{r4, r5, pc}
   2397c:	20021e0c 	.word	0x20021e0c
   23980:	0002ffdd 	.word	0x0002ffdd
   23984:	0003002f 	.word	0x0003002f
   23988:	0002ff0d 	.word	0x0002ff0d
   2398c:	00030044 	.word	0x00030044
   23990:	00030003 	.word	0x00030003
   23994:	0003001a 	.word	0x0003001a

00023998 <move_thread_to_end_of_prio_q>:
{
   23998:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2399a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   2399e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   239a0:	2b00      	cmp	r3, #0
   239a2:	da03      	bge.n	239ac <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   239a4:	4601      	mov	r1, r0
   239a6:	481f      	ldr	r0, [pc, #124]	; (23a24 <move_thread_to_end_of_prio_q+0x8c>)
   239a8:	f7ff fd9c 	bl	234e4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   239ac:	4b1e      	ldr	r3, [pc, #120]	; (23a28 <move_thread_to_end_of_prio_q+0x90>)
   239ae:	429c      	cmp	r4, r3
   239b0:	d10b      	bne.n	239ca <move_thread_to_end_of_prio_q+0x32>
   239b2:	491e      	ldr	r1, [pc, #120]	; (23a2c <move_thread_to_end_of_prio_q+0x94>)
   239b4:	481e      	ldr	r0, [pc, #120]	; (23a30 <move_thread_to_end_of_prio_q+0x98>)
   239b6:	f240 3389 	movw	r3, #905	; 0x389
   239ba:	4a1e      	ldr	r2, [pc, #120]	; (23a34 <move_thread_to_end_of_prio_q+0x9c>)
   239bc:	f008 fb1f 	bl	2bffe <printk>
   239c0:	f240 3189 	movw	r1, #905	; 0x389
   239c4:	481b      	ldr	r0, [pc, #108]	; (23a34 <move_thread_to_end_of_prio_q+0x9c>)
   239c6:	f008 fd37 	bl	2c438 <assert_post_action>
	return list->head == list;
   239ca:	4a1b      	ldr	r2, [pc, #108]	; (23a38 <move_thread_to_end_of_prio_q+0xa0>)
   239cc:	4611      	mov	r1, r2
   239ce:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   239d2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   239d4:	428b      	cmp	r3, r1
   239d6:	bf08      	it	eq
   239d8:	2300      	moveq	r3, #0
   239da:	2b00      	cmp	r3, #0
   239dc:	bf38      	it	cc
   239de:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   239e0:	b1d3      	cbz	r3, 23a18 <move_thread_to_end_of_prio_q+0x80>
	if (thread_1->base.prio < thread_2->base.prio) {
   239e2:	f994 600e 	ldrsb.w	r6, [r4, #14]
   239e6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   239ea:	42ae      	cmp	r6, r5
   239ec:	db03      	blt.n	239f6 <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
   239ee:	4298      	cmp	r0, r3
   239f0:	d012      	beq.n	23a18 <move_thread_to_end_of_prio_q+0x80>
   239f2:	681b      	ldr	r3, [r3, #0]
   239f4:	e7f4      	b.n	239e0 <move_thread_to_end_of_prio_q+0x48>
	node->prev = successor->prev;
   239f6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   239f8:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   239fc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   239fe:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   23a00:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   23a02:	6890      	ldr	r0, [r2, #8]
   23a04:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23a08:	7363      	strb	r3, [r4, #13]
   23a0a:	1b03      	subs	r3, r0, r4
   23a0c:	4258      	negs	r0, r3
   23a0e:	4158      	adcs	r0, r3
}
   23a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   23a14:	f7ff bde0 	b.w	235d8 <update_cache>
	node->prev = list->tail;
   23a18:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   23a1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23a1e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23a20:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   23a22:	e7ed      	b.n	23a00 <move_thread_to_end_of_prio_q+0x68>
   23a24:	20021dfc 	.word	0x20021dfc
   23a28:	200211c8 	.word	0x200211c8
   23a2c:	000329e7 	.word	0x000329e7
   23a30:	0002ff0d 	.word	0x0002ff0d
   23a34:	000329ae 	.word	0x000329ae
   23a38:	20021dd4 	.word	0x20021dd4

00023a3c <z_time_slice>:
{
   23a3c:	b570      	push	{r4, r5, r6, lr}
   23a3e:	4604      	mov	r4, r0
	__asm__ volatile(
   23a40:	f04f 0320 	mov.w	r3, #32
   23a44:	f3ef 8511 	mrs	r5, BASEPRI
   23a48:	f383 8811 	msr	BASEPRI, r3
   23a4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a50:	482a      	ldr	r0, [pc, #168]	; (23afc <z_time_slice+0xc0>)
   23a52:	f000 ff3d 	bl	248d0 <z_spin_lock_valid>
   23a56:	b968      	cbnz	r0, 23a74 <z_time_slice+0x38>
   23a58:	235c      	movs	r3, #92	; 0x5c
   23a5a:	4a29      	ldr	r2, [pc, #164]	; (23b00 <z_time_slice+0xc4>)
   23a5c:	4929      	ldr	r1, [pc, #164]	; (23b04 <z_time_slice+0xc8>)
   23a5e:	482a      	ldr	r0, [pc, #168]	; (23b08 <z_time_slice+0xcc>)
   23a60:	f008 facd 	bl	2bffe <printk>
   23a64:	4925      	ldr	r1, [pc, #148]	; (23afc <z_time_slice+0xc0>)
   23a66:	4829      	ldr	r0, [pc, #164]	; (23b0c <z_time_slice+0xd0>)
   23a68:	f008 fac9 	bl	2bffe <printk>
   23a6c:	215c      	movs	r1, #92	; 0x5c
   23a6e:	4824      	ldr	r0, [pc, #144]	; (23b00 <z_time_slice+0xc4>)
   23a70:	f008 fce2 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23a74:	4821      	ldr	r0, [pc, #132]	; (23afc <z_time_slice+0xc0>)
   23a76:	f000 ff49 	bl	2490c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   23a7a:	4b25      	ldr	r3, [pc, #148]	; (23b10 <z_time_slice+0xd4>)
   23a7c:	4a25      	ldr	r2, [pc, #148]	; (23b14 <z_time_slice+0xd8>)
   23a7e:	6898      	ldr	r0, [r3, #8]
   23a80:	6811      	ldr	r1, [r2, #0]
   23a82:	4288      	cmp	r0, r1
   23a84:	4619      	mov	r1, r3
   23a86:	d118      	bne.n	23aba <z_time_slice+0x7e>
			z_reset_time_slice();
   23a88:	f7ff fb68 	bl	2315c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a8c:	481b      	ldr	r0, [pc, #108]	; (23afc <z_time_slice+0xc0>)
   23a8e:	f000 ff2d 	bl	248ec <z_spin_unlock_valid>
   23a92:	b968      	cbnz	r0, 23ab0 <z_time_slice+0x74>
   23a94:	2384      	movs	r3, #132	; 0x84
   23a96:	4a1a      	ldr	r2, [pc, #104]	; (23b00 <z_time_slice+0xc4>)
   23a98:	491f      	ldr	r1, [pc, #124]	; (23b18 <z_time_slice+0xdc>)
   23a9a:	481b      	ldr	r0, [pc, #108]	; (23b08 <z_time_slice+0xcc>)
   23a9c:	f008 faaf 	bl	2bffe <printk>
   23aa0:	4916      	ldr	r1, [pc, #88]	; (23afc <z_time_slice+0xc0>)
   23aa2:	481e      	ldr	r0, [pc, #120]	; (23b1c <z_time_slice+0xe0>)
   23aa4:	f008 faab 	bl	2bffe <printk>
   23aa8:	2184      	movs	r1, #132	; 0x84
   23aaa:	4815      	ldr	r0, [pc, #84]	; (23b00 <z_time_slice+0xc4>)
   23aac:	f008 fcc4 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   23ab0:	f385 8811 	msr	BASEPRI, r5
   23ab4:	f3bf 8f6f 	isb	sy
}
   23ab8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   23aba:	2600      	movs	r6, #0
   23abc:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   23abe:	4a18      	ldr	r2, [pc, #96]	; (23b20 <z_time_slice+0xe4>)
   23ac0:	6812      	ldr	r2, [r2, #0]
   23ac2:	b1ba      	cbz	r2, 23af4 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23ac4:	89c2      	ldrh	r2, [r0, #14]
   23ac6:	2a7f      	cmp	r2, #127	; 0x7f
   23ac8:	d814      	bhi.n	23af4 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   23aca:	7b42      	ldrb	r2, [r0, #13]
   23acc:	06d2      	lsls	r2, r2, #27
   23ace:	d111      	bne.n	23af4 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   23ad0:	4a14      	ldr	r2, [pc, #80]	; (23b24 <z_time_slice+0xe8>)
   23ad2:	f990 600e 	ldrsb.w	r6, [r0, #14]
   23ad6:	6812      	ldr	r2, [r2, #0]
   23ad8:	4296      	cmp	r6, r2
   23ada:	db0b      	blt.n	23af4 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23adc:	4a12      	ldr	r2, [pc, #72]	; (23b28 <z_time_slice+0xec>)
   23ade:	4290      	cmp	r0, r2
   23ae0:	d008      	beq.n	23af4 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   23ae2:	691a      	ldr	r2, [r3, #16]
   23ae4:	42a2      	cmp	r2, r4
   23ae6:	dc02      	bgt.n	23aee <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   23ae8:	f7ff ff56 	bl	23998 <move_thread_to_end_of_prio_q>
   23aec:	e7cc      	b.n	23a88 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   23aee:	1b12      	subs	r2, r2, r4
   23af0:	611a      	str	r2, [r3, #16]
   23af2:	e7cb      	b.n	23a8c <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   23af4:	2300      	movs	r3, #0
   23af6:	610b      	str	r3, [r1, #16]
   23af8:	e7c8      	b.n	23a8c <z_time_slice+0x50>
   23afa:	bf00      	nop
   23afc:	20021e0c 	.word	0x20021e0c
   23b00:	0002ffdd 	.word	0x0002ffdd
   23b04:	0003002f 	.word	0x0003002f
   23b08:	0002ff0d 	.word	0x0002ff0d
   23b0c:	00030044 	.word	0x00030044
   23b10:	20021dd4 	.word	0x20021dd4
   23b14:	20021e08 	.word	0x20021e08
   23b18:	00030003 	.word	0x00030003
   23b1c:	0003001a 	.word	0x0003001a
   23b20:	20021e14 	.word	0x20021e14
   23b24:	20021e10 	.word	0x20021e10
   23b28:	200211c8 	.word	0x200211c8

00023b2c <z_impl_k_thread_suspend>:
{
   23b2c:	b570      	push	{r4, r5, r6, lr}
   23b2e:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   23b30:	3018      	adds	r0, #24
   23b32:	f001 f8c5 	bl	24cc0 <z_abort_timeout>
	__asm__ volatile(
   23b36:	f04f 0320 	mov.w	r3, #32
   23b3a:	f3ef 8611 	mrs	r6, BASEPRI
   23b3e:	f383 8811 	msr	BASEPRI, r3
   23b42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b46:	4825      	ldr	r0, [pc, #148]	; (23bdc <z_impl_k_thread_suspend+0xb0>)
   23b48:	f000 fec2 	bl	248d0 <z_spin_lock_valid>
   23b4c:	b968      	cbnz	r0, 23b6a <z_impl_k_thread_suspend+0x3e>
   23b4e:	235c      	movs	r3, #92	; 0x5c
   23b50:	4a23      	ldr	r2, [pc, #140]	; (23be0 <z_impl_k_thread_suspend+0xb4>)
   23b52:	4924      	ldr	r1, [pc, #144]	; (23be4 <z_impl_k_thread_suspend+0xb8>)
   23b54:	4824      	ldr	r0, [pc, #144]	; (23be8 <z_impl_k_thread_suspend+0xbc>)
   23b56:	f008 fa52 	bl	2bffe <printk>
   23b5a:	4920      	ldr	r1, [pc, #128]	; (23bdc <z_impl_k_thread_suspend+0xb0>)
   23b5c:	4823      	ldr	r0, [pc, #140]	; (23bec <z_impl_k_thread_suspend+0xc0>)
   23b5e:	f008 fa4e 	bl	2bffe <printk>
   23b62:	215c      	movs	r1, #92	; 0x5c
   23b64:	481e      	ldr	r0, [pc, #120]	; (23be0 <z_impl_k_thread_suspend+0xb4>)
   23b66:	f008 fc67 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23b6a:	481c      	ldr	r0, [pc, #112]	; (23bdc <z_impl_k_thread_suspend+0xb0>)
   23b6c:	f000 fece 	bl	2490c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   23b70:	f994 300d 	ldrsb.w	r3, [r4, #13]
   23b74:	2b00      	cmp	r3, #0
   23b76:	da07      	bge.n	23b88 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   23b78:	4621      	mov	r1, r4
   23b7a:	481d      	ldr	r0, [pc, #116]	; (23bf0 <z_impl_k_thread_suspend+0xc4>)
   23b7c:	f7ff fcb2 	bl	234e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23b80:	7b63      	ldrb	r3, [r4, #13]
   23b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23b86:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   23b88:	4d1a      	ldr	r5, [pc, #104]	; (23bf4 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23b8a:	7b63      	ldrb	r3, [r4, #13]
   23b8c:	68a8      	ldr	r0, [r5, #8]
   23b8e:	f043 0310 	orr.w	r3, r3, #16
   23b92:	7363      	strb	r3, [r4, #13]
   23b94:	1b03      	subs	r3, r0, r4
   23b96:	4258      	negs	r0, r3
   23b98:	4158      	adcs	r0, r3
   23b9a:	f7ff fd1d 	bl	235d8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b9e:	480f      	ldr	r0, [pc, #60]	; (23bdc <z_impl_k_thread_suspend+0xb0>)
   23ba0:	f000 fea4 	bl	248ec <z_spin_unlock_valid>
   23ba4:	b968      	cbnz	r0, 23bc2 <z_impl_k_thread_suspend+0x96>
   23ba6:	2384      	movs	r3, #132	; 0x84
   23ba8:	4a0d      	ldr	r2, [pc, #52]	; (23be0 <z_impl_k_thread_suspend+0xb4>)
   23baa:	4913      	ldr	r1, [pc, #76]	; (23bf8 <z_impl_k_thread_suspend+0xcc>)
   23bac:	480e      	ldr	r0, [pc, #56]	; (23be8 <z_impl_k_thread_suspend+0xbc>)
   23bae:	f008 fa26 	bl	2bffe <printk>
   23bb2:	490a      	ldr	r1, [pc, #40]	; (23bdc <z_impl_k_thread_suspend+0xb0>)
   23bb4:	4811      	ldr	r0, [pc, #68]	; (23bfc <z_impl_k_thread_suspend+0xd0>)
   23bb6:	f008 fa22 	bl	2bffe <printk>
   23bba:	2184      	movs	r1, #132	; 0x84
   23bbc:	4808      	ldr	r0, [pc, #32]	; (23be0 <z_impl_k_thread_suspend+0xb4>)
   23bbe:	f008 fc3b 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   23bc2:	f386 8811 	msr	BASEPRI, r6
   23bc6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23bca:	68ab      	ldr	r3, [r5, #8]
   23bcc:	42a3      	cmp	r3, r4
   23bce:	d103      	bne.n	23bd8 <z_impl_k_thread_suspend+0xac>
}
   23bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23bd4:	f00a bcf4 	b.w	2e5c0 <z_reschedule_unlocked>
}
   23bd8:	bd70      	pop	{r4, r5, r6, pc}
   23bda:	bf00      	nop
   23bdc:	20021e0c 	.word	0x20021e0c
   23be0:	0002ffdd 	.word	0x0002ffdd
   23be4:	0003002f 	.word	0x0003002f
   23be8:	0002ff0d 	.word	0x0002ff0d
   23bec:	00030044 	.word	0x00030044
   23bf0:	20021dfc 	.word	0x20021dfc
   23bf4:	20021dd4 	.word	0x20021dd4
   23bf8:	00030003 	.word	0x00030003
   23bfc:	0003001a 	.word	0x0003001a

00023c00 <z_thread_single_abort>:
{
   23c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   23c04:	7b03      	ldrb	r3, [r0, #12]
{
   23c06:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   23c08:	07dd      	lsls	r5, r3, #31
   23c0a:	d50e      	bpl.n	23c2a <z_thread_single_abort+0x2a>
   23c0c:	4948      	ldr	r1, [pc, #288]	; (23d30 <z_thread_single_abort+0x130>)
   23c0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   23c12:	4a48      	ldr	r2, [pc, #288]	; (23d34 <z_thread_single_abort+0x134>)
   23c14:	4848      	ldr	r0, [pc, #288]	; (23d38 <z_thread_single_abort+0x138>)
   23c16:	f008 f9f2 	bl	2bffe <printk>
   23c1a:	4848      	ldr	r0, [pc, #288]	; (23d3c <z_thread_single_abort+0x13c>)
   23c1c:	f008 f9ef 	bl	2bffe <printk>
   23c20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23c24:	4843      	ldr	r0, [pc, #268]	; (23d34 <z_thread_single_abort+0x134>)
   23c26:	f008 fc07 	bl	2c438 <assert_post_action>
	if (thread->fn_abort != NULL) {
   23c2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   23c2c:	b103      	cbz	r3, 23c30 <z_thread_single_abort+0x30>
		thread->fn_abort();
   23c2e:	4798      	blx	r3
   23c30:	f104 0018 	add.w	r0, r4, #24
   23c34:	f001 f844 	bl	24cc0 <z_abort_timeout>
	__asm__ volatile(
   23c38:	f04f 0320 	mov.w	r3, #32
   23c3c:	f3ef 8611 	mrs	r6, BASEPRI
   23c40:	f383 8811 	msr	BASEPRI, r3
   23c44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c48:	483d      	ldr	r0, [pc, #244]	; (23d40 <z_thread_single_abort+0x140>)
   23c4a:	f000 fe41 	bl	248d0 <z_spin_lock_valid>
   23c4e:	b968      	cbnz	r0, 23c6c <z_thread_single_abort+0x6c>
   23c50:	235c      	movs	r3, #92	; 0x5c
   23c52:	4a3c      	ldr	r2, [pc, #240]	; (23d44 <z_thread_single_abort+0x144>)
   23c54:	493c      	ldr	r1, [pc, #240]	; (23d48 <z_thread_single_abort+0x148>)
   23c56:	4838      	ldr	r0, [pc, #224]	; (23d38 <z_thread_single_abort+0x138>)
   23c58:	f008 f9d1 	bl	2bffe <printk>
   23c5c:	4938      	ldr	r1, [pc, #224]	; (23d40 <z_thread_single_abort+0x140>)
   23c5e:	483b      	ldr	r0, [pc, #236]	; (23d4c <z_thread_single_abort+0x14c>)
   23c60:	f008 f9cd 	bl	2bffe <printk>
   23c64:	215c      	movs	r1, #92	; 0x5c
   23c66:	4837      	ldr	r0, [pc, #220]	; (23d44 <z_thread_single_abort+0x144>)
   23c68:	f008 fbe6 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23c6c:	4834      	ldr	r0, [pc, #208]	; (23d40 <z_thread_single_abort+0x140>)
   23c6e:	f000 fe4d 	bl	2490c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   23c72:	7b63      	ldrb	r3, [r4, #13]
   23c74:	06d8      	lsls	r0, r3, #27
   23c76:	d136      	bne.n	23ce6 <z_thread_single_abort+0xe6>
		if (z_is_thread_ready(thread)) {
   23c78:	69a2      	ldr	r2, [r4, #24]
   23c7a:	2a00      	cmp	r2, #0
   23c7c:	d133      	bne.n	23ce6 <z_thread_single_abort+0xe6>
			if (z_is_thread_queued(thread)) {
   23c7e:	0619      	lsls	r1, r3, #24
   23c80:	d507      	bpl.n	23c92 <z_thread_single_abort+0x92>
				_priq_run_remove(&_kernel.ready_q.runq,
   23c82:	4621      	mov	r1, r4
   23c84:	4832      	ldr	r0, [pc, #200]	; (23d50 <z_thread_single_abort+0x150>)
   23c86:	f7ff fc2d 	bl	234e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23c8a:	7b63      	ldrb	r3, [r4, #13]
   23c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23c90:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   23c92:	4b30      	ldr	r3, [pc, #192]	; (23d54 <z_thread_single_abort+0x154>)
   23c94:	6898      	ldr	r0, [r3, #8]
   23c96:	1b02      	subs	r2, r0, r4
   23c98:	4250      	negs	r0, r2
   23c9a:	4150      	adcs	r0, r2
   23c9c:	f7ff fc9c 	bl	235d8 <update_cache>
			waiter->base.pended_on = NULL;
   23ca0:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   23ca2:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   23ca4:	f104 0830 	add.w	r8, r4, #48	; 0x30
   23ca8:	f043 0308 	orr.w	r3, r3, #8
   23cac:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   23cae:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23cb0:	4545      	cmp	r5, r8
   23cb2:	d000      	beq.n	23cb6 <z_thread_single_abort+0xb6>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   23cb4:	bb3d      	cbnz	r5, 23d06 <z_thread_single_abort+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cb6:	4822      	ldr	r0, [pc, #136]	; (23d40 <z_thread_single_abort+0x140>)
   23cb8:	f000 fe18 	bl	248ec <z_spin_unlock_valid>
   23cbc:	b968      	cbnz	r0, 23cda <z_thread_single_abort+0xda>
   23cbe:	2384      	movs	r3, #132	; 0x84
   23cc0:	4a20      	ldr	r2, [pc, #128]	; (23d44 <z_thread_single_abort+0x144>)
   23cc2:	4925      	ldr	r1, [pc, #148]	; (23d58 <z_thread_single_abort+0x158>)
   23cc4:	481c      	ldr	r0, [pc, #112]	; (23d38 <z_thread_single_abort+0x138>)
   23cc6:	f008 f99a 	bl	2bffe <printk>
   23cca:	491d      	ldr	r1, [pc, #116]	; (23d40 <z_thread_single_abort+0x140>)
   23ccc:	4823      	ldr	r0, [pc, #140]	; (23d5c <z_thread_single_abort+0x15c>)
   23cce:	f008 f996 	bl	2bffe <printk>
   23cd2:	2184      	movs	r1, #132	; 0x84
   23cd4:	481b      	ldr	r0, [pc, #108]	; (23d44 <z_thread_single_abort+0x144>)
   23cd6:	f008 fbaf 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   23cda:	f386 8811 	msr	BASEPRI, r6
   23cde:	f3bf 8f6f 	isb	sy
}
   23ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   23ce6:	079b      	lsls	r3, r3, #30
   23ce8:	d5da      	bpl.n	23ca0 <z_thread_single_abort+0xa0>
				_priq_wait_remove(&pended_on(thread)->waitq,
   23cea:	f104 0008 	add.w	r0, r4, #8
   23cee:	f7ff fa1d 	bl	2312c <pended_on.isra.0>
   23cf2:	4621      	mov	r1, r4
   23cf4:	f7ff fbf6 	bl	234e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23cf8:	7b63      	ldrb	r3, [r4, #13]
   23cfa:	f023 0302 	bic.w	r3, r3, #2
   23cfe:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   23d00:	2300      	movs	r3, #0
   23d02:	60a3      	str	r3, [r4, #8]
   23d04:	e7cc      	b.n	23ca0 <z_thread_single_abort+0xa0>
   23d06:	f105 0018 	add.w	r0, r5, #24
   23d0a:	f000 ffd9 	bl	24cc0 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   23d0e:	f105 0008 	add.w	r0, r5, #8
   23d12:	f7ff fa0b 	bl	2312c <pended_on.isra.0>
   23d16:	4629      	mov	r1, r5
   23d18:	f7ff fbe4 	bl	234e4 <z_priq_dumb_remove>
   23d1c:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   23d1e:	4628      	mov	r0, r5
   23d20:	f023 0302 	bic.w	r3, r3, #2
   23d24:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   23d26:	60af      	str	r7, [r5, #8]
   23d28:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   23d2a:	f7ff fcf5 	bl	23718 <ready_thread>
   23d2e:	e7be      	b.n	23cae <z_thread_single_abort+0xae>
   23d30:	00032a38 	.word	0x00032a38
   23d34:	000329ae 	.word	0x000329ae
   23d38:	0002ff0d 	.word	0x0002ff0d
   23d3c:	00032a66 	.word	0x00032a66
   23d40:	20021e0c 	.word	0x20021e0c
   23d44:	0002ffdd 	.word	0x0002ffdd
   23d48:	0003002f 	.word	0x0003002f
   23d4c:	00030044 	.word	0x00030044
   23d50:	20021dfc 	.word	0x20021dfc
   23d54:	20021dd4 	.word	0x20021dd4
   23d58:	00030003 	.word	0x00030003
   23d5c:	0003001a 	.word	0x0003001a

00023d60 <unready_thread>:
{
   23d60:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   23d62:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   23d66:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23d68:	2b00      	cmp	r3, #0
   23d6a:	da07      	bge.n	23d7c <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   23d6c:	4601      	mov	r1, r0
   23d6e:	4808      	ldr	r0, [pc, #32]	; (23d90 <unready_thread+0x30>)
   23d70:	f7ff fbb8 	bl	234e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23d74:	7b63      	ldrb	r3, [r4, #13]
   23d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23d7a:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   23d7c:	4b05      	ldr	r3, [pc, #20]	; (23d94 <unready_thread+0x34>)
   23d7e:	6898      	ldr	r0, [r3, #8]
   23d80:	1b03      	subs	r3, r0, r4
   23d82:	4258      	negs	r0, r3
   23d84:	4158      	adcs	r0, r3
}
   23d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   23d8a:	f7ff bc25 	b.w	235d8 <update_cache>
   23d8e:	bf00      	nop
   23d90:	20021dfc 	.word	0x20021dfc
   23d94:	20021dd4 	.word	0x20021dd4

00023d98 <add_to_waitq_locked>:
{
   23d98:	b538      	push	{r3, r4, r5, lr}
   23d9a:	4604      	mov	r4, r0
   23d9c:	460d      	mov	r5, r1
	unready_thread(thread);
   23d9e:	f7ff ffdf 	bl	23d60 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   23da2:	7b63      	ldrb	r3, [r4, #13]
   23da4:	f043 0302 	orr.w	r3, r3, #2
   23da8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   23daa:	b33d      	cbz	r5, 23dfc <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23dac:	4b17      	ldr	r3, [pc, #92]	; (23e0c <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   23dae:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23db0:	429c      	cmp	r4, r3
   23db2:	d10b      	bne.n	23dcc <add_to_waitq_locked+0x34>
   23db4:	4916      	ldr	r1, [pc, #88]	; (23e10 <add_to_waitq_locked+0x78>)
   23db6:	4817      	ldr	r0, [pc, #92]	; (23e14 <add_to_waitq_locked+0x7c>)
   23db8:	f240 3389 	movw	r3, #905	; 0x389
   23dbc:	4a16      	ldr	r2, [pc, #88]	; (23e18 <add_to_waitq_locked+0x80>)
   23dbe:	f008 f91e 	bl	2bffe <printk>
   23dc2:	f240 3189 	movw	r1, #905	; 0x389
   23dc6:	4814      	ldr	r0, [pc, #80]	; (23e18 <add_to_waitq_locked+0x80>)
   23dc8:	f008 fb36 	bl	2c438 <assert_post_action>
	return list->head == list;
   23dcc:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23dce:	429d      	cmp	r5, r3
   23dd0:	bf08      	it	eq
   23dd2:	2300      	moveq	r3, #0
   23dd4:	2b00      	cmp	r3, #0
   23dd6:	bf38      	it	cc
   23dd8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23dda:	b183      	cbz	r3, 23dfe <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
   23ddc:	f994 100e 	ldrsb.w	r1, [r4, #14]
   23de0:	f993 200e 	ldrsb.w	r2, [r3, #14]
   23de4:	4291      	cmp	r1, r2
   23de6:	db04      	blt.n	23df2 <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
   23de8:	686a      	ldr	r2, [r5, #4]
   23dea:	429a      	cmp	r2, r3
   23dec:	d007      	beq.n	23dfe <add_to_waitq_locked+0x66>
   23dee:	681b      	ldr	r3, [r3, #0]
   23df0:	e7f3      	b.n	23dda <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
   23df2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23df4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   23df8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23dfa:	605c      	str	r4, [r3, #4]
}
   23dfc:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   23dfe:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   23e00:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   23e02:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   23e04:	686b      	ldr	r3, [r5, #4]
   23e06:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23e08:	606c      	str	r4, [r5, #4]
   23e0a:	e7f7      	b.n	23dfc <add_to_waitq_locked+0x64>
   23e0c:	200211c8 	.word	0x200211c8
   23e10:	000329e7 	.word	0x000329e7
   23e14:	0002ff0d 	.word	0x0002ff0d
   23e18:	000329ae 	.word	0x000329ae

00023e1c <pend>:
{
   23e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e20:	4604      	mov	r4, r0
   23e22:	460d      	mov	r5, r1
   23e24:	4616      	mov	r6, r2
   23e26:	461f      	mov	r7, r3
	__asm__ volatile(
   23e28:	f04f 0320 	mov.w	r3, #32
   23e2c:	f3ef 8811 	mrs	r8, BASEPRI
   23e30:	f383 8811 	msr	BASEPRI, r3
   23e34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e38:	481f      	ldr	r0, [pc, #124]	; (23eb8 <pend+0x9c>)
   23e3a:	f000 fd49 	bl	248d0 <z_spin_lock_valid>
   23e3e:	b968      	cbnz	r0, 23e5c <pend+0x40>
   23e40:	235c      	movs	r3, #92	; 0x5c
   23e42:	4a1e      	ldr	r2, [pc, #120]	; (23ebc <pend+0xa0>)
   23e44:	491e      	ldr	r1, [pc, #120]	; (23ec0 <pend+0xa4>)
   23e46:	481f      	ldr	r0, [pc, #124]	; (23ec4 <pend+0xa8>)
   23e48:	f008 f8d9 	bl	2bffe <printk>
   23e4c:	491a      	ldr	r1, [pc, #104]	; (23eb8 <pend+0x9c>)
   23e4e:	481e      	ldr	r0, [pc, #120]	; (23ec8 <pend+0xac>)
   23e50:	f008 f8d5 	bl	2bffe <printk>
   23e54:	215c      	movs	r1, #92	; 0x5c
   23e56:	4819      	ldr	r0, [pc, #100]	; (23ebc <pend+0xa0>)
   23e58:	f008 faee 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23e5c:	4816      	ldr	r0, [pc, #88]	; (23eb8 <pend+0x9c>)
   23e5e:	f000 fd55 	bl	2490c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   23e62:	4620      	mov	r0, r4
   23e64:	4629      	mov	r1, r5
   23e66:	f7ff ff97 	bl	23d98 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23e6a:	4813      	ldr	r0, [pc, #76]	; (23eb8 <pend+0x9c>)
   23e6c:	f000 fd3e 	bl	248ec <z_spin_unlock_valid>
   23e70:	b968      	cbnz	r0, 23e8e <pend+0x72>
   23e72:	2384      	movs	r3, #132	; 0x84
   23e74:	4a11      	ldr	r2, [pc, #68]	; (23ebc <pend+0xa0>)
   23e76:	4915      	ldr	r1, [pc, #84]	; (23ecc <pend+0xb0>)
   23e78:	4812      	ldr	r0, [pc, #72]	; (23ec4 <pend+0xa8>)
   23e7a:	f008 f8c0 	bl	2bffe <printk>
   23e7e:	490e      	ldr	r1, [pc, #56]	; (23eb8 <pend+0x9c>)
   23e80:	4813      	ldr	r0, [pc, #76]	; (23ed0 <pend+0xb4>)
   23e82:	f008 f8bc 	bl	2bffe <printk>
   23e86:	2184      	movs	r1, #132	; 0x84
   23e88:	480c      	ldr	r0, [pc, #48]	; (23ebc <pend+0xa0>)
   23e8a:	f008 fad5 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   23e8e:	f388 8811 	msr	BASEPRI, r8
   23e92:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23e96:	1c7b      	adds	r3, r7, #1
   23e98:	bf08      	it	eq
   23e9a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23e9e:	d008      	beq.n	23eb2 <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   23ea0:	4632      	mov	r2, r6
   23ea2:	463b      	mov	r3, r7
   23ea4:	f104 0018 	add.w	r0, r4, #24
   23ea8:	490a      	ldr	r1, [pc, #40]	; (23ed4 <pend+0xb8>)
}
   23eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23eae:	f000 be33 	b.w	24b18 <z_add_timeout>
   23eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23eb6:	bf00      	nop
   23eb8:	20021e0c 	.word	0x20021e0c
   23ebc:	0002ffdd 	.word	0x0002ffdd
   23ec0:	0003002f 	.word	0x0003002f
   23ec4:	0002ff0d 	.word	0x0002ff0d
   23ec8:	00030044 	.word	0x00030044
   23ecc:	00030003 	.word	0x00030003
   23ed0:	0003001a 	.word	0x0003001a
   23ed4:	000238ed 	.word	0x000238ed

00023ed8 <z_pend_curr>:
{
   23ed8:	b538      	push	{r3, r4, r5, lr}
   23eda:	4604      	mov	r4, r0
	pending_current = _current;
   23edc:	4b10      	ldr	r3, [pc, #64]	; (23f20 <z_pend_curr+0x48>)
{
   23ede:	460d      	mov	r5, r1
	pending_current = _current;
   23ee0:	6898      	ldr	r0, [r3, #8]
   23ee2:	4b10      	ldr	r3, [pc, #64]	; (23f24 <z_pend_curr+0x4c>)
{
   23ee4:	4611      	mov	r1, r2
	pending_current = _current;
   23ee6:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   23ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23eec:	f7ff ff96 	bl	23e1c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ef0:	4620      	mov	r0, r4
   23ef2:	f000 fcfb 	bl	248ec <z_spin_unlock_valid>
   23ef6:	b968      	cbnz	r0, 23f14 <z_pend_curr+0x3c>
   23ef8:	239b      	movs	r3, #155	; 0x9b
   23efa:	4a0b      	ldr	r2, [pc, #44]	; (23f28 <z_pend_curr+0x50>)
   23efc:	490b      	ldr	r1, [pc, #44]	; (23f2c <z_pend_curr+0x54>)
   23efe:	480c      	ldr	r0, [pc, #48]	; (23f30 <z_pend_curr+0x58>)
   23f00:	f008 f87d 	bl	2bffe <printk>
   23f04:	4621      	mov	r1, r4
   23f06:	480b      	ldr	r0, [pc, #44]	; (23f34 <z_pend_curr+0x5c>)
   23f08:	f008 f879 	bl	2bffe <printk>
   23f0c:	219b      	movs	r1, #155	; 0x9b
   23f0e:	4806      	ldr	r0, [pc, #24]	; (23f28 <z_pend_curr+0x50>)
   23f10:	f008 fa92 	bl	2c438 <assert_post_action>
   23f14:	4628      	mov	r0, r5
}
   23f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23f1a:	f7f0 bb75 	b.w	14608 <arch_swap>
   23f1e:	bf00      	nop
   23f20:	20021dd4 	.word	0x20021dd4
   23f24:	20021e08 	.word	0x20021e08
   23f28:	0002ffdd 	.word	0x0002ffdd
   23f2c:	00030003 	.word	0x00030003
   23f30:	0002ff0d 	.word	0x0002ff0d
   23f34:	0003001a 	.word	0x0003001a

00023f38 <z_set_prio>:
{
   23f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f3a:	4604      	mov	r4, r0
   23f3c:	460e      	mov	r6, r1
	__asm__ volatile(
   23f3e:	f04f 0320 	mov.w	r3, #32
   23f42:	f3ef 8711 	mrs	r7, BASEPRI
   23f46:	f383 8811 	msr	BASEPRI, r3
   23f4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f4e:	4839      	ldr	r0, [pc, #228]	; (24034 <z_set_prio+0xfc>)
   23f50:	f000 fcbe 	bl	248d0 <z_spin_lock_valid>
   23f54:	b968      	cbnz	r0, 23f72 <z_set_prio+0x3a>
   23f56:	235c      	movs	r3, #92	; 0x5c
   23f58:	4a37      	ldr	r2, [pc, #220]	; (24038 <z_set_prio+0x100>)
   23f5a:	4938      	ldr	r1, [pc, #224]	; (2403c <z_set_prio+0x104>)
   23f5c:	4838      	ldr	r0, [pc, #224]	; (24040 <z_set_prio+0x108>)
   23f5e:	f008 f84e 	bl	2bffe <printk>
   23f62:	4934      	ldr	r1, [pc, #208]	; (24034 <z_set_prio+0xfc>)
   23f64:	4837      	ldr	r0, [pc, #220]	; (24044 <z_set_prio+0x10c>)
   23f66:	f008 f84a 	bl	2bffe <printk>
   23f6a:	215c      	movs	r1, #92	; 0x5c
   23f6c:	4832      	ldr	r0, [pc, #200]	; (24038 <z_set_prio+0x100>)
   23f6e:	f008 fa63 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   23f72:	4830      	ldr	r0, [pc, #192]	; (24034 <z_set_prio+0xfc>)
   23f74:	f000 fcca 	bl	2490c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   23f78:	7b63      	ldrb	r3, [r4, #13]
   23f7a:	b276      	sxtb	r6, r6
   23f7c:	06db      	lsls	r3, r3, #27
   23f7e:	d155      	bne.n	2402c <z_set_prio+0xf4>
	return !sys_dnode_is_linked(&t->node);
   23f80:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   23f82:	2d00      	cmp	r5, #0
   23f84:	d152      	bne.n	2402c <z_set_prio+0xf4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   23f86:	4621      	mov	r1, r4
   23f88:	482f      	ldr	r0, [pc, #188]	; (24048 <z_set_prio+0x110>)
   23f8a:	f7ff faab 	bl	234e4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23f8e:	4b2f      	ldr	r3, [pc, #188]	; (2404c <z_set_prio+0x114>)
				thread->base.prio = prio;
   23f90:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23f92:	429c      	cmp	r4, r3
   23f94:	d10b      	bne.n	23fae <z_set_prio+0x76>
   23f96:	492e      	ldr	r1, [pc, #184]	; (24050 <z_set_prio+0x118>)
   23f98:	4829      	ldr	r0, [pc, #164]	; (24040 <z_set_prio+0x108>)
   23f9a:	f240 3389 	movw	r3, #905	; 0x389
   23f9e:	4a2d      	ldr	r2, [pc, #180]	; (24054 <z_set_prio+0x11c>)
   23fa0:	f008 f82d 	bl	2bffe <printk>
   23fa4:	f240 3189 	movw	r1, #905	; 0x389
   23fa8:	482a      	ldr	r0, [pc, #168]	; (24054 <z_set_prio+0x11c>)
   23faa:	f008 fa45 	bl	2c438 <assert_post_action>
	return list->head == list;
   23fae:	4a2a      	ldr	r2, [pc, #168]	; (24058 <z_set_prio+0x120>)
   23fb0:	4613      	mov	r3, r2
   23fb2:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23fb6:	4298      	cmp	r0, r3
   23fb8:	bf18      	it	ne
   23fba:	4605      	movne	r5, r0
   23fbc:	2d00      	cmp	r5, #0
   23fbe:	4619      	mov	r1, r3
   23fc0:	462b      	mov	r3, r5
   23fc2:	bf38      	it	cc
   23fc4:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23fc6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23fc8:	b353      	cbz	r3, 24020 <z_set_prio+0xe8>
	if (thread_1->base.prio < thread_2->base.prio) {
   23fca:	f994 600e 	ldrsb.w	r6, [r4, #14]
   23fce:	f993 500e 	ldrsb.w	r5, [r3, #14]
   23fd2:	42ae      	cmp	r6, r5
   23fd4:	db03      	blt.n	23fde <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   23fd6:	4298      	cmp	r0, r3
   23fd8:	d022      	beq.n	24020 <z_set_prio+0xe8>
   23fda:	681b      	ldr	r3, [r3, #0]
   23fdc:	e7f4      	b.n	23fc8 <z_set_prio+0x90>
	node->prev = successor->prev;
   23fde:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23fe0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   23fe4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23fe6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   23fe8:	2001      	movs	r0, #1
   23fea:	f7ff faf5 	bl	235d8 <update_cache>
   23fee:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ff0:	4810      	ldr	r0, [pc, #64]	; (24034 <z_set_prio+0xfc>)
   23ff2:	f000 fc7b 	bl	248ec <z_spin_unlock_valid>
   23ff6:	b968      	cbnz	r0, 24014 <z_set_prio+0xdc>
   23ff8:	2384      	movs	r3, #132	; 0x84
   23ffa:	4a0f      	ldr	r2, [pc, #60]	; (24038 <z_set_prio+0x100>)
   23ffc:	4917      	ldr	r1, [pc, #92]	; (2405c <z_set_prio+0x124>)
   23ffe:	4810      	ldr	r0, [pc, #64]	; (24040 <z_set_prio+0x108>)
   24000:	f007 fffd 	bl	2bffe <printk>
   24004:	490b      	ldr	r1, [pc, #44]	; (24034 <z_set_prio+0xfc>)
   24006:	4816      	ldr	r0, [pc, #88]	; (24060 <z_set_prio+0x128>)
   24008:	f007 fff9 	bl	2bffe <printk>
   2400c:	2184      	movs	r1, #132	; 0x84
   2400e:	480a      	ldr	r0, [pc, #40]	; (24038 <z_set_prio+0x100>)
   24010:	f008 fa12 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   24014:	f387 8811 	msr	BASEPRI, r7
   24018:	f3bf 8f6f 	isb	sy
}
   2401c:	4620      	mov	r0, r4
   2401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   24020:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   24024:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   24026:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24028:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2402a:	e7dd      	b.n	23fe8 <z_set_prio+0xb0>
			thread->base.prio = prio;
   2402c:	73a6      	strb	r6, [r4, #14]
   2402e:	2400      	movs	r4, #0
   24030:	e7de      	b.n	23ff0 <z_set_prio+0xb8>
   24032:	bf00      	nop
   24034:	20021e0c 	.word	0x20021e0c
   24038:	0002ffdd 	.word	0x0002ffdd
   2403c:	0003002f 	.word	0x0003002f
   24040:	0002ff0d 	.word	0x0002ff0d
   24044:	00030044 	.word	0x00030044
   24048:	20021dfc 	.word	0x20021dfc
   2404c:	200211c8 	.word	0x200211c8
   24050:	000329e7 	.word	0x000329e7
   24054:	000329ae 	.word	0x000329ae
   24058:	20021dd4 	.word	0x20021dd4
   2405c:	00030003 	.word	0x00030003
   24060:	0003001a 	.word	0x0003001a

00024064 <z_unpend_first_thread>:
{
   24064:	b538      	push	{r3, r4, r5, lr}
   24066:	4604      	mov	r4, r0
	__asm__ volatile(
   24068:	f04f 0320 	mov.w	r3, #32
   2406c:	f3ef 8511 	mrs	r5, BASEPRI
   24070:	f383 8811 	msr	BASEPRI, r3
   24074:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24078:	4836      	ldr	r0, [pc, #216]	; (24154 <z_unpend_first_thread+0xf0>)
   2407a:	f000 fc29 	bl	248d0 <z_spin_lock_valid>
   2407e:	b968      	cbnz	r0, 2409c <z_unpend_first_thread+0x38>
   24080:	235c      	movs	r3, #92	; 0x5c
   24082:	4a35      	ldr	r2, [pc, #212]	; (24158 <z_unpend_first_thread+0xf4>)
   24084:	4935      	ldr	r1, [pc, #212]	; (2415c <z_unpend_first_thread+0xf8>)
   24086:	4836      	ldr	r0, [pc, #216]	; (24160 <z_unpend_first_thread+0xfc>)
   24088:	f007 ffb9 	bl	2bffe <printk>
   2408c:	4931      	ldr	r1, [pc, #196]	; (24154 <z_unpend_first_thread+0xf0>)
   2408e:	4835      	ldr	r0, [pc, #212]	; (24164 <z_unpend_first_thread+0x100>)
   24090:	f007 ffb5 	bl	2bffe <printk>
   24094:	215c      	movs	r1, #92	; 0x5c
   24096:	4830      	ldr	r0, [pc, #192]	; (24158 <z_unpend_first_thread+0xf4>)
   24098:	f008 f9ce 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2409c:	482d      	ldr	r0, [pc, #180]	; (24154 <z_unpend_first_thread+0xf0>)
   2409e:	f000 fc35 	bl	2490c <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   240a2:	4620      	mov	r0, r4
   240a4:	f00a faa5 	bl	2e5f2 <z_priq_dumb_best>
   240a8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   240aa:	482a      	ldr	r0, [pc, #168]	; (24154 <z_unpend_first_thread+0xf0>)
   240ac:	f000 fc1e 	bl	248ec <z_spin_unlock_valid>
   240b0:	b968      	cbnz	r0, 240ce <z_unpend_first_thread+0x6a>
   240b2:	2384      	movs	r3, #132	; 0x84
   240b4:	4a28      	ldr	r2, [pc, #160]	; (24158 <z_unpend_first_thread+0xf4>)
   240b6:	492c      	ldr	r1, [pc, #176]	; (24168 <z_unpend_first_thread+0x104>)
   240b8:	4829      	ldr	r0, [pc, #164]	; (24160 <z_unpend_first_thread+0xfc>)
   240ba:	f007 ffa0 	bl	2bffe <printk>
   240be:	4925      	ldr	r1, [pc, #148]	; (24154 <z_unpend_first_thread+0xf0>)
   240c0:	482a      	ldr	r0, [pc, #168]	; (2416c <z_unpend_first_thread+0x108>)
   240c2:	f007 ff9c 	bl	2bffe <printk>
   240c6:	2184      	movs	r1, #132	; 0x84
   240c8:	4823      	ldr	r0, [pc, #140]	; (24158 <z_unpend_first_thread+0xf4>)
   240ca:	f008 f9b5 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   240ce:	f385 8811 	msr	BASEPRI, r5
   240d2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   240d6:	2c00      	cmp	r4, #0
   240d8:	d039      	beq.n	2414e <z_unpend_first_thread+0xea>
	__asm__ volatile(
   240da:	f04f 0320 	mov.w	r3, #32
   240de:	f3ef 8511 	mrs	r5, BASEPRI
   240e2:	f383 8811 	msr	BASEPRI, r3
   240e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240ea:	481a      	ldr	r0, [pc, #104]	; (24154 <z_unpend_first_thread+0xf0>)
   240ec:	f000 fbf0 	bl	248d0 <z_spin_lock_valid>
   240f0:	b968      	cbnz	r0, 2410e <z_unpend_first_thread+0xaa>
   240f2:	235c      	movs	r3, #92	; 0x5c
   240f4:	4a18      	ldr	r2, [pc, #96]	; (24158 <z_unpend_first_thread+0xf4>)
   240f6:	4919      	ldr	r1, [pc, #100]	; (2415c <z_unpend_first_thread+0xf8>)
   240f8:	4819      	ldr	r0, [pc, #100]	; (24160 <z_unpend_first_thread+0xfc>)
   240fa:	f007 ff80 	bl	2bffe <printk>
   240fe:	4915      	ldr	r1, [pc, #84]	; (24154 <z_unpend_first_thread+0xf0>)
   24100:	4818      	ldr	r0, [pc, #96]	; (24164 <z_unpend_first_thread+0x100>)
   24102:	f007 ff7c 	bl	2bffe <printk>
   24106:	215c      	movs	r1, #92	; 0x5c
   24108:	4813      	ldr	r0, [pc, #76]	; (24158 <z_unpend_first_thread+0xf4>)
   2410a:	f008 f995 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2410e:	4811      	ldr	r0, [pc, #68]	; (24154 <z_unpend_first_thread+0xf0>)
   24110:	f000 fbfc 	bl	2490c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   24114:	4620      	mov	r0, r4
   24116:	f00a fa5d 	bl	2e5d4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2411a:	480e      	ldr	r0, [pc, #56]	; (24154 <z_unpend_first_thread+0xf0>)
   2411c:	f000 fbe6 	bl	248ec <z_spin_unlock_valid>
   24120:	b968      	cbnz	r0, 2413e <z_unpend_first_thread+0xda>
   24122:	2384      	movs	r3, #132	; 0x84
   24124:	4a0c      	ldr	r2, [pc, #48]	; (24158 <z_unpend_first_thread+0xf4>)
   24126:	4910      	ldr	r1, [pc, #64]	; (24168 <z_unpend_first_thread+0x104>)
   24128:	480d      	ldr	r0, [pc, #52]	; (24160 <z_unpend_first_thread+0xfc>)
   2412a:	f007 ff68 	bl	2bffe <printk>
   2412e:	4909      	ldr	r1, [pc, #36]	; (24154 <z_unpend_first_thread+0xf0>)
   24130:	480e      	ldr	r0, [pc, #56]	; (2416c <z_unpend_first_thread+0x108>)
   24132:	f007 ff64 	bl	2bffe <printk>
   24136:	2184      	movs	r1, #132	; 0x84
   24138:	4807      	ldr	r0, [pc, #28]	; (24158 <z_unpend_first_thread+0xf4>)
   2413a:	f008 f97d 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   2413e:	f385 8811 	msr	BASEPRI, r5
   24142:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   24146:	f104 0018 	add.w	r0, r4, #24
   2414a:	f000 fdb9 	bl	24cc0 <z_abort_timeout>
}
   2414e:	4620      	mov	r0, r4
   24150:	bd38      	pop	{r3, r4, r5, pc}
   24152:	bf00      	nop
   24154:	20021e0c 	.word	0x20021e0c
   24158:	0002ffdd 	.word	0x0002ffdd
   2415c:	0003002f 	.word	0x0003002f
   24160:	0002ff0d 	.word	0x0002ff0d
   24164:	00030044 	.word	0x00030044
   24168:	00030003 	.word	0x00030003
   2416c:	0003001a 	.word	0x0003001a

00024170 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   24170:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   24172:	4b04      	ldr	r3, [pc, #16]	; (24184 <z_sched_init+0x14>)
   24174:	4608      	mov	r0, r1
   24176:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2417a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2417e:	f7ff b803 	b.w	23188 <k_sched_time_slice_set>
   24182:	bf00      	nop
   24184:	20021dd4 	.word	0x20021dd4

00024188 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   24188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2418a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2418e:	b173      	cbz	r3, 241ae <z_impl_k_yield+0x26>
   24190:	4946      	ldr	r1, [pc, #280]	; (242ac <z_impl_k_yield+0x124>)
   24192:	f240 4394 	movw	r3, #1172	; 0x494
   24196:	4a46      	ldr	r2, [pc, #280]	; (242b0 <z_impl_k_yield+0x128>)
   24198:	4846      	ldr	r0, [pc, #280]	; (242b4 <z_impl_k_yield+0x12c>)
   2419a:	f007 ff30 	bl	2bffe <printk>
   2419e:	4846      	ldr	r0, [pc, #280]	; (242b8 <z_impl_k_yield+0x130>)
   241a0:	f007 ff2d 	bl	2bffe <printk>
   241a4:	f240 4194 	movw	r1, #1172	; 0x494
   241a8:	4841      	ldr	r0, [pc, #260]	; (242b0 <z_impl_k_yield+0x128>)
   241aa:	f008 f945 	bl	2c438 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   241ae:	4c43      	ldr	r4, [pc, #268]	; (242bc <z_impl_k_yield+0x134>)
   241b0:	4e43      	ldr	r6, [pc, #268]	; (242c0 <z_impl_k_yield+0x138>)
   241b2:	68a2      	ldr	r2, [r4, #8]
   241b4:	42b2      	cmp	r2, r6
   241b6:	d067      	beq.n	24288 <z_impl_k_yield+0x100>
	__asm__ volatile(
   241b8:	f04f 0320 	mov.w	r3, #32
   241bc:	f3ef 8711 	mrs	r7, BASEPRI
   241c0:	f383 8811 	msr	BASEPRI, r3
   241c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   241c8:	483e      	ldr	r0, [pc, #248]	; (242c4 <z_impl_k_yield+0x13c>)
   241ca:	f000 fb81 	bl	248d0 <z_spin_lock_valid>
   241ce:	b968      	cbnz	r0, 241ec <z_impl_k_yield+0x64>
   241d0:	235c      	movs	r3, #92	; 0x5c
   241d2:	4a3d      	ldr	r2, [pc, #244]	; (242c8 <z_impl_k_yield+0x140>)
   241d4:	493d      	ldr	r1, [pc, #244]	; (242cc <z_impl_k_yield+0x144>)
   241d6:	4837      	ldr	r0, [pc, #220]	; (242b4 <z_impl_k_yield+0x12c>)
   241d8:	f007 ff11 	bl	2bffe <printk>
   241dc:	4939      	ldr	r1, [pc, #228]	; (242c4 <z_impl_k_yield+0x13c>)
   241de:	483c      	ldr	r0, [pc, #240]	; (242d0 <z_impl_k_yield+0x148>)
   241e0:	f007 ff0d 	bl	2bffe <printk>
   241e4:	215c      	movs	r1, #92	; 0x5c
   241e6:	4838      	ldr	r0, [pc, #224]	; (242c8 <z_impl_k_yield+0x140>)
   241e8:	f008 f926 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   241ec:	4835      	ldr	r0, [pc, #212]	; (242c4 <z_impl_k_yield+0x13c>)
   241ee:	f000 fb8d 	bl	2490c <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   241f2:	68a1      	ldr	r1, [r4, #8]
   241f4:	4837      	ldr	r0, [pc, #220]	; (242d4 <z_impl_k_yield+0x14c>)
   241f6:	f7ff f975 	bl	234e4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   241fa:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   241fc:	42b5      	cmp	r5, r6
   241fe:	d10b      	bne.n	24218 <z_impl_k_yield+0x90>
   24200:	4935      	ldr	r1, [pc, #212]	; (242d8 <z_impl_k_yield+0x150>)
   24202:	482c      	ldr	r0, [pc, #176]	; (242b4 <z_impl_k_yield+0x12c>)
   24204:	f240 3389 	movw	r3, #905	; 0x389
   24208:	4a29      	ldr	r2, [pc, #164]	; (242b0 <z_impl_k_yield+0x128>)
   2420a:	f007 fef8 	bl	2bffe <printk>
   2420e:	f240 3189 	movw	r1, #905	; 0x389
   24212:	4827      	ldr	r0, [pc, #156]	; (242b0 <z_impl_k_yield+0x128>)
   24214:	f008 f910 	bl	2c438 <assert_post_action>
	return list->head == list;
   24218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2421a:	492e      	ldr	r1, [pc, #184]	; (242d4 <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2421c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2421e:	428b      	cmp	r3, r1
   24220:	bf08      	it	eq
   24222:	2300      	moveq	r3, #0
   24224:	2b00      	cmp	r3, #0
   24226:	bf38      	it	cc
   24228:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2422a:	2b00      	cmp	r3, #0
   2422c:	d038      	beq.n	242a0 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
   2422e:	f995 600e 	ldrsb.w	r6, [r5, #14]
   24232:	f993 000e 	ldrsb.w	r0, [r3, #14]
   24236:	4286      	cmp	r6, r0
   24238:	db03      	blt.n	24242 <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   2423a:	4293      	cmp	r3, r2
   2423c:	d030      	beq.n	242a0 <z_impl_k_yield+0x118>
   2423e:	681b      	ldr	r3, [r3, #0]
   24240:	e7f3      	b.n	2422a <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
   24242:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24244:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   24248:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   2424a:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   2424c:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   2424e:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   24250:	7b53      	ldrb	r3, [r2, #13]
   24252:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24256:	7353      	strb	r3, [r2, #13]
   24258:	f7ff f9be 	bl	235d8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2425c:	4819      	ldr	r0, [pc, #100]	; (242c4 <z_impl_k_yield+0x13c>)
   2425e:	f000 fb45 	bl	248ec <z_spin_unlock_valid>
   24262:	b968      	cbnz	r0, 24280 <z_impl_k_yield+0xf8>
   24264:	2384      	movs	r3, #132	; 0x84
   24266:	4a18      	ldr	r2, [pc, #96]	; (242c8 <z_impl_k_yield+0x140>)
   24268:	491c      	ldr	r1, [pc, #112]	; (242dc <z_impl_k_yield+0x154>)
   2426a:	4812      	ldr	r0, [pc, #72]	; (242b4 <z_impl_k_yield+0x12c>)
   2426c:	f007 fec7 	bl	2bffe <printk>
   24270:	4914      	ldr	r1, [pc, #80]	; (242c4 <z_impl_k_yield+0x13c>)
   24272:	481b      	ldr	r0, [pc, #108]	; (242e0 <z_impl_k_yield+0x158>)
   24274:	f007 fec3 	bl	2bffe <printk>
   24278:	2184      	movs	r1, #132	; 0x84
   2427a:	4813      	ldr	r0, [pc, #76]	; (242c8 <z_impl_k_yield+0x140>)
   2427c:	f008 f8dc 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   24280:	f387 8811 	msr	BASEPRI, r7
   24284:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24288:	f04f 0320 	mov.w	r3, #32
   2428c:	f3ef 8011 	mrs	r0, BASEPRI
   24290:	f383 8811 	msr	BASEPRI, r3
   24294:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   24298:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2429c:	f7f0 b9b4 	b.w	14608 <arch_swap>
	node->prev = list->tail;
   242a0:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   242a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   242a6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   242a8:	62e5      	str	r5, [r4, #44]	; 0x2c
}
   242aa:	e7cf      	b.n	2424c <z_impl_k_yield+0xc4>
   242ac:	00032905 	.word	0x00032905
   242b0:	000329ae 	.word	0x000329ae
   242b4:	0002ff0d 	.word	0x0002ff0d
   242b8:	0003053a 	.word	0x0003053a
   242bc:	20021dd4 	.word	0x20021dd4
   242c0:	200211c8 	.word	0x200211c8
   242c4:	20021e0c 	.word	0x20021e0c
   242c8:	0002ffdd 	.word	0x0002ffdd
   242cc:	0003002f 	.word	0x0003002f
   242d0:	00030044 	.word	0x00030044
   242d4:	20021dfc 	.word	0x20021dfc
   242d8:	000329e7 	.word	0x000329e7
   242dc:	00030003 	.word	0x00030003
   242e0:	0003001a 	.word	0x0003001a

000242e4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   242e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   242e8:	4604      	mov	r4, r0
   242ea:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   242ee:	b173      	cbz	r3, 2430e <z_tick_sleep+0x2a>
   242f0:	493b      	ldr	r1, [pc, #236]	; (243e0 <z_tick_sleep+0xfc>)
   242f2:	f240 43b2 	movw	r3, #1202	; 0x4b2
   242f6:	4a3b      	ldr	r2, [pc, #236]	; (243e4 <z_tick_sleep+0x100>)
   242f8:	483b      	ldr	r0, [pc, #236]	; (243e8 <z_tick_sleep+0x104>)
   242fa:	f007 fe80 	bl	2bffe <printk>
   242fe:	483b      	ldr	r0, [pc, #236]	; (243ec <z_tick_sleep+0x108>)
   24300:	f007 fe7d 	bl	2bffe <printk>
   24304:	f240 41b2 	movw	r1, #1202	; 0x4b2
   24308:	4836      	ldr	r0, [pc, #216]	; (243e4 <z_tick_sleep+0x100>)
   2430a:	f008 f895 	bl	2c438 <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2430e:	b924      	cbnz	r4, 2431a <z_tick_sleep+0x36>
	z_impl_k_yield();
   24310:	f7ff ff3a 	bl	24188 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   24314:	4620      	mov	r0, r4
   24316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   2431a:	f00a fa05 	bl	2e728 <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
   2431e:	4626      	mov	r6, r4
   24320:	17e7      	asrs	r7, r4, #31
	expected_wakeup_time = ticks + z_tick_get_32();
   24322:	4404      	add	r4, r0
   24324:	f04f 0320 	mov.w	r3, #32
   24328:	f3ef 8811 	mrs	r8, BASEPRI
   2432c:	f383 8811 	msr	BASEPRI, r3
   24330:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24334:	482e      	ldr	r0, [pc, #184]	; (243f0 <z_tick_sleep+0x10c>)
   24336:	f000 facb 	bl	248d0 <z_spin_lock_valid>
   2433a:	b968      	cbnz	r0, 24358 <z_tick_sleep+0x74>
   2433c:	235c      	movs	r3, #92	; 0x5c
   2433e:	4a2d      	ldr	r2, [pc, #180]	; (243f4 <z_tick_sleep+0x110>)
   24340:	492d      	ldr	r1, [pc, #180]	; (243f8 <z_tick_sleep+0x114>)
   24342:	4829      	ldr	r0, [pc, #164]	; (243e8 <z_tick_sleep+0x104>)
   24344:	f007 fe5b 	bl	2bffe <printk>
   24348:	4929      	ldr	r1, [pc, #164]	; (243f0 <z_tick_sleep+0x10c>)
   2434a:	482c      	ldr	r0, [pc, #176]	; (243fc <z_tick_sleep+0x118>)
   2434c:	f007 fe57 	bl	2bffe <printk>
   24350:	215c      	movs	r1, #92	; 0x5c
   24352:	4828      	ldr	r0, [pc, #160]	; (243f4 <z_tick_sleep+0x110>)
   24354:	f008 f870 	bl	2c438 <assert_post_action>
	pending_current = _current;
   24358:	4d29      	ldr	r5, [pc, #164]	; (24400 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
   2435a:	4825      	ldr	r0, [pc, #148]	; (243f0 <z_tick_sleep+0x10c>)
   2435c:	f000 fad6 	bl	2490c <z_spin_lock_set_owner>
   24360:	68a8      	ldr	r0, [r5, #8]
   24362:	4b28      	ldr	r3, [pc, #160]	; (24404 <z_tick_sleep+0x120>)
   24364:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   24366:	f7ff fcfb 	bl	23d60 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2436a:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2436c:	4632      	mov	r2, r6
   2436e:	463b      	mov	r3, r7
   24370:	3018      	adds	r0, #24
   24372:	4925      	ldr	r1, [pc, #148]	; (24408 <z_tick_sleep+0x124>)
   24374:	f000 fbd0 	bl	24b18 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   24378:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2437a:	481d      	ldr	r0, [pc, #116]	; (243f0 <z_tick_sleep+0x10c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2437c:	7b53      	ldrb	r3, [r2, #13]
   2437e:	f043 0310 	orr.w	r3, r3, #16
   24382:	7353      	strb	r3, [r2, #13]
   24384:	f000 fab2 	bl	248ec <z_spin_unlock_valid>
   24388:	b968      	cbnz	r0, 243a6 <z_tick_sleep+0xc2>
   2438a:	239b      	movs	r3, #155	; 0x9b
   2438c:	4a19      	ldr	r2, [pc, #100]	; (243f4 <z_tick_sleep+0x110>)
   2438e:	491f      	ldr	r1, [pc, #124]	; (2440c <z_tick_sleep+0x128>)
   24390:	4815      	ldr	r0, [pc, #84]	; (243e8 <z_tick_sleep+0x104>)
   24392:	f007 fe34 	bl	2bffe <printk>
   24396:	4916      	ldr	r1, [pc, #88]	; (243f0 <z_tick_sleep+0x10c>)
   24398:	481d      	ldr	r0, [pc, #116]	; (24410 <z_tick_sleep+0x12c>)
   2439a:	f007 fe30 	bl	2bffe <printk>
   2439e:	219b      	movs	r1, #155	; 0x9b
   243a0:	4814      	ldr	r0, [pc, #80]	; (243f4 <z_tick_sleep+0x110>)
   243a2:	f008 f849 	bl	2c438 <assert_post_action>
   243a6:	4640      	mov	r0, r8
   243a8:	f7f0 f92e 	bl	14608 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   243ac:	68ab      	ldr	r3, [r5, #8]
   243ae:	7b5b      	ldrb	r3, [r3, #13]
   243b0:	06db      	lsls	r3, r3, #27
   243b2:	d50e      	bpl.n	243d2 <z_tick_sleep+0xee>
   243b4:	4917      	ldr	r1, [pc, #92]	; (24414 <z_tick_sleep+0x130>)
   243b6:	f240 43d2 	movw	r3, #1234	; 0x4d2
   243ba:	4a0a      	ldr	r2, [pc, #40]	; (243e4 <z_tick_sleep+0x100>)
   243bc:	480a      	ldr	r0, [pc, #40]	; (243e8 <z_tick_sleep+0x104>)
   243be:	f007 fe1e 	bl	2bffe <printk>
   243c2:	480a      	ldr	r0, [pc, #40]	; (243ec <z_tick_sleep+0x108>)
   243c4:	f007 fe1b 	bl	2bffe <printk>
   243c8:	f240 41d2 	movw	r1, #1234	; 0x4d2
   243cc:	4805      	ldr	r0, [pc, #20]	; (243e4 <z_tick_sleep+0x100>)
   243ce:	f008 f833 	bl	2c438 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   243d2:	f00a f9a9 	bl	2e728 <z_tick_get_32>
   243d6:	1a24      	subs	r4, r4, r0
   243d8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   243dc:	e79a      	b.n	24314 <z_tick_sleep+0x30>
   243de:	bf00      	nop
   243e0:	00032905 	.word	0x00032905
   243e4:	000329ae 	.word	0x000329ae
   243e8:	0002ff0d 	.word	0x0002ff0d
   243ec:	0003053a 	.word	0x0003053a
   243f0:	20021e0c 	.word	0x20021e0c
   243f4:	0002ffdd 	.word	0x0002ffdd
   243f8:	0003002f 	.word	0x0003002f
   243fc:	00030044 	.word	0x00030044
   24400:	20021dd4 	.word	0x20021dd4
   24404:	20021e08 	.word	0x20021e08
   24408:	000238ed 	.word	0x000238ed
   2440c:	00030003 	.word	0x00030003
   24410:	0003001a 	.word	0x0003001a
   24414:	00032a81 	.word	0x00032a81

00024418 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   24418:	b538      	push	{r3, r4, r5, lr}
   2441a:	4604      	mov	r4, r0
   2441c:	460d      	mov	r5, r1
   2441e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   24422:	b173      	cbz	r3, 24442 <z_impl_k_sleep+0x2a>
   24424:	4912      	ldr	r1, [pc, #72]	; (24470 <z_impl_k_sleep+0x58>)
   24426:	f240 43e1 	movw	r3, #1249	; 0x4e1
   2442a:	4a12      	ldr	r2, [pc, #72]	; (24474 <z_impl_k_sleep+0x5c>)
   2442c:	4812      	ldr	r0, [pc, #72]	; (24478 <z_impl_k_sleep+0x60>)
   2442e:	f007 fde6 	bl	2bffe <printk>
   24432:	4812      	ldr	r0, [pc, #72]	; (2447c <z_impl_k_sleep+0x64>)
   24434:	f007 fde3 	bl	2bffe <printk>
   24438:	f240 41e1 	movw	r1, #1249	; 0x4e1
   2443c:	480d      	ldr	r0, [pc, #52]	; (24474 <z_impl_k_sleep+0x5c>)
   2443e:	f007 fffb 	bl	2c438 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24442:	3501      	adds	r5, #1
   24444:	bf08      	it	eq
   24446:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2444a:	d106      	bne.n	2445a <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   2444c:	4b0c      	ldr	r3, [pc, #48]	; (24480 <z_impl_k_sleep+0x68>)
   2444e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   24450:	f7ff fb6c 	bl	23b2c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   24454:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   24458:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   2445a:	4620      	mov	r0, r4
   2445c:	f7ff ff42 	bl	242e4 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   24460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24464:	fb80 0103 	smull	r0, r1, r0, r3
   24468:	0bc3      	lsrs	r3, r0, #15
   2446a:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   2446e:	e7f3      	b.n	24458 <z_impl_k_sleep+0x40>
   24470:	00032905 	.word	0x00032905
   24474:	000329ae 	.word	0x000329ae
   24478:	0002ff0d 	.word	0x0002ff0d
   2447c:	0003053a 	.word	0x0003053a
   24480:	20021dd4 	.word	0x20021dd4

00024484 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   24484:	4b01      	ldr	r3, [pc, #4]	; (2448c <z_impl_k_current_get+0x8>)
   24486:	6898      	ldr	r0, [r3, #8]
   24488:	4770      	bx	lr
   2448a:	bf00      	nop
   2448c:	20021dd4 	.word	0x20021dd4

00024490 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24490:	b538      	push	{r3, r4, r5, lr}
   24492:	4604      	mov	r4, r0
   24494:	f04f 0320 	mov.w	r3, #32
   24498:	f3ef 8511 	mrs	r5, BASEPRI
   2449c:	f383 8811 	msr	BASEPRI, r3
   244a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   244a4:	4817      	ldr	r0, [pc, #92]	; (24504 <z_impl_k_sem_give+0x74>)
   244a6:	f000 fa13 	bl	248d0 <z_spin_lock_valid>
   244aa:	b968      	cbnz	r0, 244c8 <z_impl_k_sem_give+0x38>
   244ac:	235c      	movs	r3, #92	; 0x5c
   244ae:	4a16      	ldr	r2, [pc, #88]	; (24508 <z_impl_k_sem_give+0x78>)
   244b0:	4916      	ldr	r1, [pc, #88]	; (2450c <z_impl_k_sem_give+0x7c>)
   244b2:	4817      	ldr	r0, [pc, #92]	; (24510 <z_impl_k_sem_give+0x80>)
   244b4:	f007 fda3 	bl	2bffe <printk>
   244b8:	4912      	ldr	r1, [pc, #72]	; (24504 <z_impl_k_sem_give+0x74>)
   244ba:	4816      	ldr	r0, [pc, #88]	; (24514 <z_impl_k_sem_give+0x84>)
   244bc:	f007 fd9f 	bl	2bffe <printk>
   244c0:	215c      	movs	r1, #92	; 0x5c
   244c2:	4811      	ldr	r0, [pc, #68]	; (24508 <z_impl_k_sem_give+0x78>)
   244c4:	f007 ffb8 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   244c8:	480e      	ldr	r0, [pc, #56]	; (24504 <z_impl_k_sem_give+0x74>)
   244ca:	f000 fa1f 	bl	2490c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   244ce:	4620      	mov	r0, r4
   244d0:	f7ff fdc8 	bl	24064 <z_unpend_first_thread>

	if (thread != NULL) {
   244d4:	b148      	cbz	r0, 244ea <z_impl_k_sem_give+0x5a>
   244d6:	2200      	movs	r2, #0
   244d8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   244da:	f7ff f96b 	bl	237b4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   244de:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   244e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   244e4:	4807      	ldr	r0, [pc, #28]	; (24504 <z_impl_k_sem_give+0x74>)
   244e6:	f7fe bf41 	b.w	2336c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   244ea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   244ee:	429a      	cmp	r2, r3
   244f0:	bf18      	it	ne
   244f2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   244f4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   244f6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   244f8:	f104 0010 	add.w	r0, r4, #16
   244fc:	f00a f9bd 	bl	2e87a <z_handle_obj_poll_events>
}
   24500:	e7ed      	b.n	244de <z_impl_k_sem_give+0x4e>
   24502:	bf00      	nop
   24504:	20021e18 	.word	0x20021e18
   24508:	0002ffdd 	.word	0x0002ffdd
   2450c:	0003002f 	.word	0x0003002f
   24510:	0002ff0d 	.word	0x0002ff0d
   24514:	00030044 	.word	0x00030044

00024518 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   24518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2451a:	4604      	mov	r4, r0
   2451c:	4616      	mov	r6, r2
   2451e:	461f      	mov	r7, r3
   24520:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   24524:	b17b      	cbz	r3, 24546 <z_impl_k_sem_take+0x2e>
   24526:	ea56 0307 	orrs.w	r3, r6, r7
   2452a:	d00c      	beq.n	24546 <z_impl_k_sem_take+0x2e>
   2452c:	4935      	ldr	r1, [pc, #212]	; (24604 <z_impl_k_sem_take+0xec>)
   2452e:	238c      	movs	r3, #140	; 0x8c
   24530:	4a35      	ldr	r2, [pc, #212]	; (24608 <z_impl_k_sem_take+0xf0>)
   24532:	4836      	ldr	r0, [pc, #216]	; (2460c <z_impl_k_sem_take+0xf4>)
   24534:	f007 fd63 	bl	2bffe <printk>
   24538:	4835      	ldr	r0, [pc, #212]	; (24610 <z_impl_k_sem_take+0xf8>)
   2453a:	f007 fd60 	bl	2bffe <printk>
   2453e:	218c      	movs	r1, #140	; 0x8c
   24540:	4831      	ldr	r0, [pc, #196]	; (24608 <z_impl_k_sem_take+0xf0>)
   24542:	f007 ff79 	bl	2c438 <assert_post_action>
   24546:	f04f 0320 	mov.w	r3, #32
   2454a:	f3ef 8511 	mrs	r5, BASEPRI
   2454e:	f383 8811 	msr	BASEPRI, r3
   24552:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24556:	482f      	ldr	r0, [pc, #188]	; (24614 <z_impl_k_sem_take+0xfc>)
   24558:	f000 f9ba 	bl	248d0 <z_spin_lock_valid>
   2455c:	b968      	cbnz	r0, 2457a <z_impl_k_sem_take+0x62>
   2455e:	235c      	movs	r3, #92	; 0x5c
   24560:	4a2d      	ldr	r2, [pc, #180]	; (24618 <z_impl_k_sem_take+0x100>)
   24562:	492e      	ldr	r1, [pc, #184]	; (2461c <z_impl_k_sem_take+0x104>)
   24564:	4829      	ldr	r0, [pc, #164]	; (2460c <z_impl_k_sem_take+0xf4>)
   24566:	f007 fd4a 	bl	2bffe <printk>
   2456a:	492a      	ldr	r1, [pc, #168]	; (24614 <z_impl_k_sem_take+0xfc>)
   2456c:	482c      	ldr	r0, [pc, #176]	; (24620 <z_impl_k_sem_take+0x108>)
   2456e:	f007 fd46 	bl	2bffe <printk>
   24572:	215c      	movs	r1, #92	; 0x5c
   24574:	4828      	ldr	r0, [pc, #160]	; (24618 <z_impl_k_sem_take+0x100>)
   24576:	f007 ff5f 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2457a:	4826      	ldr	r0, [pc, #152]	; (24614 <z_impl_k_sem_take+0xfc>)
   2457c:	f000 f9c6 	bl	2490c <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   24580:	68a3      	ldr	r3, [r4, #8]
   24582:	b1d3      	cbz	r3, 245ba <z_impl_k_sem_take+0xa2>
		sem->count--;
   24584:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24586:	4823      	ldr	r0, [pc, #140]	; (24614 <z_impl_k_sem_take+0xfc>)
   24588:	60a3      	str	r3, [r4, #8]
   2458a:	f000 f9af 	bl	248ec <z_spin_unlock_valid>
   2458e:	b968      	cbnz	r0, 245ac <z_impl_k_sem_take+0x94>
   24590:	2384      	movs	r3, #132	; 0x84
   24592:	4a21      	ldr	r2, [pc, #132]	; (24618 <z_impl_k_sem_take+0x100>)
   24594:	4923      	ldr	r1, [pc, #140]	; (24624 <z_impl_k_sem_take+0x10c>)
   24596:	481d      	ldr	r0, [pc, #116]	; (2460c <z_impl_k_sem_take+0xf4>)
   24598:	f007 fd31 	bl	2bffe <printk>
   2459c:	491d      	ldr	r1, [pc, #116]	; (24614 <z_impl_k_sem_take+0xfc>)
   2459e:	4822      	ldr	r0, [pc, #136]	; (24628 <z_impl_k_sem_take+0x110>)
   245a0:	f007 fd2d 	bl	2bffe <printk>
   245a4:	2184      	movs	r1, #132	; 0x84
   245a6:	481c      	ldr	r0, [pc, #112]	; (24618 <z_impl_k_sem_take+0x100>)
   245a8:	f007 ff46 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   245ac:	f385 8811 	msr	BASEPRI, r5
   245b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   245b4:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   245b6:	b003      	add	sp, #12
   245b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   245ba:	ea56 0307 	orrs.w	r3, r6, r7
   245be:	d118      	bne.n	245f2 <z_impl_k_sem_take+0xda>
   245c0:	4814      	ldr	r0, [pc, #80]	; (24614 <z_impl_k_sem_take+0xfc>)
   245c2:	f000 f993 	bl	248ec <z_spin_unlock_valid>
   245c6:	b968      	cbnz	r0, 245e4 <z_impl_k_sem_take+0xcc>
   245c8:	2384      	movs	r3, #132	; 0x84
   245ca:	4a13      	ldr	r2, [pc, #76]	; (24618 <z_impl_k_sem_take+0x100>)
   245cc:	4915      	ldr	r1, [pc, #84]	; (24624 <z_impl_k_sem_take+0x10c>)
   245ce:	480f      	ldr	r0, [pc, #60]	; (2460c <z_impl_k_sem_take+0xf4>)
   245d0:	f007 fd15 	bl	2bffe <printk>
   245d4:	490f      	ldr	r1, [pc, #60]	; (24614 <z_impl_k_sem_take+0xfc>)
   245d6:	4814      	ldr	r0, [pc, #80]	; (24628 <z_impl_k_sem_take+0x110>)
   245d8:	f007 fd11 	bl	2bffe <printk>
   245dc:	2184      	movs	r1, #132	; 0x84
   245de:	480e      	ldr	r0, [pc, #56]	; (24618 <z_impl_k_sem_take+0x100>)
   245e0:	f007 ff2a 	bl	2c438 <assert_post_action>
   245e4:	f385 8811 	msr	BASEPRI, r5
   245e8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   245ec:	f06f 000f 	mvn.w	r0, #15
   245f0:	e7e1      	b.n	245b6 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   245f2:	4622      	mov	r2, r4
   245f4:	4629      	mov	r1, r5
   245f6:	e9cd 6700 	strd	r6, r7, [sp]
   245fa:	4806      	ldr	r0, [pc, #24]	; (24614 <z_impl_k_sem_take+0xfc>)
   245fc:	f7ff fc6c 	bl	23ed8 <z_pend_curr>
	return ret;
   24600:	e7d9      	b.n	245b6 <z_impl_k_sem_take+0x9e>
   24602:	bf00      	nop
   24604:	00032ae1 	.word	0x00032ae1
   24608:	00032ac1 	.word	0x00032ac1
   2460c:	0002ff0d 	.word	0x0002ff0d
   24610:	0003053a 	.word	0x0003053a
   24614:	20021e18 	.word	0x20021e18
   24618:	0002ffdd 	.word	0x0002ffdd
   2461c:	0003002f 	.word	0x0003002f
   24620:	00030044 	.word	0x00030044
   24624:	00030003 	.word	0x00030003
   24628:	0003001a 	.word	0x0003001a

0002462c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2462c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2462e:	4c08      	ldr	r4, [pc, #32]	; (24650 <k_sys_work_q_init+0x24>)
   24630:	f04f 33ff 	mov.w	r3, #4294967295
   24634:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24638:	4620      	mov	r0, r4
   2463a:	4906      	ldr	r1, [pc, #24]	; (24654 <k_sys_work_q_init+0x28>)
   2463c:	f000 f96e 	bl	2491c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   24640:	4905      	ldr	r1, [pc, #20]	; (24658 <k_sys_work_q_init+0x2c>)
   24642:	f104 0020 	add.w	r0, r4, #32
   24646:	f00a f806 	bl	2e656 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2464a:	2000      	movs	r0, #0
   2464c:	bd10      	pop	{r4, pc}
   2464e:	bf00      	nop
   24650:	20021358 	.word	0x20021358
   24654:	20029c68 	.word	0x20029c68
   24658:	00032b2e 	.word	0x00032b2e

0002465c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2465c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   24660:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   24662:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   24664:	2e0f      	cmp	r6, #15
{
   24666:	460f      	mov	r7, r1
   24668:	4615      	mov	r5, r2
   2466a:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   2466c:	d12d      	bne.n	246ca <z_setup_new_thread+0x6e>
   2466e:	4b23      	ldr	r3, [pc, #140]	; (246fc <z_setup_new_thread+0xa0>)
   24670:	4598      	cmp	r8, r3
   24672:	d12e      	bne.n	246d2 <z_setup_new_thread+0x76>
	sys_dlist_init(&w->waitq);
   24674:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   24678:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   2467c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   2467e:	73a6      	strb	r6, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   24680:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24682:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   24684:	2600      	movs	r6, #0
	thread_base->thread_state = (uint8_t)initial_state;
   24686:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2468a:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2468c:	9302      	str	r3, [sp, #8]
   2468e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24690:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24694:	9301      	str	r3, [sp, #4]
   24696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   24698:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   2469a:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2469e:	9300      	str	r3, [sp, #0]
   246a0:	462a      	mov	r2, r5
   246a2:	4643      	mov	r3, r8
   246a4:	4639      	mov	r1, r7
   246a6:	4620      	mov	r0, r4
	node->prev = NULL;
   246a8:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->sched_locked = 0U;
   246ac:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   246ae:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   246b0:	f7f0 f88a 	bl	147c8 <arch_new_thread>
	if (!_current) {
   246b4:	4b12      	ldr	r3, [pc, #72]	; (24700 <z_setup_new_thread+0xa4>)
	new_thread->fn_abort = NULL;
   246b6:	e9c4 6617 	strd	r6, r6, [r4, #92]	; 0x5c
	if (!_current) {
   246ba:	689b      	ldr	r3, [r3, #8]
   246bc:	b103      	cbz	r3, 246c0 <z_setup_new_thread+0x64>
	new_thread->resource_pool = _current->resource_pool;
   246be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   246c0:	4628      	mov	r0, r5
   246c2:	6763      	str	r3, [r4, #116]	; 0x74
   246c4:	b004      	add	sp, #16
   246c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   246ca:	f106 0310 	add.w	r3, r6, #16
   246ce:	2b1e      	cmp	r3, #30
   246d0:	d9d0      	bls.n	24674 <z_setup_new_thread+0x18>
   246d2:	f240 2313 	movw	r3, #531	; 0x213
   246d6:	4a0b      	ldr	r2, [pc, #44]	; (24704 <z_setup_new_thread+0xa8>)
   246d8:	490b      	ldr	r1, [pc, #44]	; (24708 <z_setup_new_thread+0xac>)
   246da:	480c      	ldr	r0, [pc, #48]	; (2470c <z_setup_new_thread+0xb0>)
   246dc:	f007 fc8f 	bl	2bffe <printk>
   246e0:	4631      	mov	r1, r6
   246e2:	f06f 030f 	mvn.w	r3, #15
   246e6:	220e      	movs	r2, #14
   246e8:	4809      	ldr	r0, [pc, #36]	; (24710 <z_setup_new_thread+0xb4>)
   246ea:	f007 fc88 	bl	2bffe <printk>
   246ee:	f240 2113 	movw	r1, #531	; 0x213
   246f2:	4804      	ldr	r0, [pc, #16]	; (24704 <z_setup_new_thread+0xa8>)
   246f4:	f007 fea0 	bl	2c438 <assert_post_action>
   246f8:	e7bc      	b.n	24674 <z_setup_new_thread+0x18>
   246fa:	bf00      	nop
   246fc:	000222cd 	.word	0x000222cd
   24700:	20021dd4 	.word	0x20021dd4
   24704:	00032b37 	.word	0x00032b37
   24708:	00032b5a 	.word	0x00032b5a
   2470c:	0002ff0d 	.word	0x0002ff0d
   24710:	00032bda 	.word	0x00032bda

00024714 <z_impl_k_thread_create>:
{
   24714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24718:	b087      	sub	sp, #28
   2471a:	4604      	mov	r4, r0
   2471c:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   24720:	460d      	mov	r5, r1
   24722:	4690      	mov	r8, r2
   24724:	4699      	mov	r9, r3
   24726:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2472a:	b173      	cbz	r3, 2474a <z_impl_k_thread_create+0x36>
   2472c:	491b      	ldr	r1, [pc, #108]	; (2479c <z_impl_k_thread_create+0x88>)
   2472e:	f240 2373 	movw	r3, #627	; 0x273
   24732:	4a1b      	ldr	r2, [pc, #108]	; (247a0 <z_impl_k_thread_create+0x8c>)
   24734:	481b      	ldr	r0, [pc, #108]	; (247a4 <z_impl_k_thread_create+0x90>)
   24736:	f007 fc62 	bl	2bffe <printk>
   2473a:	481b      	ldr	r0, [pc, #108]	; (247a8 <z_impl_k_thread_create+0x94>)
   2473c:	f007 fc5f 	bl	2bffe <printk>
   24740:	f240 2173 	movw	r1, #627	; 0x273
   24744:	4816      	ldr	r0, [pc, #88]	; (247a0 <z_impl_k_thread_create+0x8c>)
   24746:	f007 fe77 	bl	2c438 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2474a:	2300      	movs	r3, #0
   2474c:	9305      	str	r3, [sp, #20]
   2474e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24750:	4642      	mov	r2, r8
   24752:	9304      	str	r3, [sp, #16]
   24754:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24756:	4629      	mov	r1, r5
   24758:	9303      	str	r3, [sp, #12]
   2475a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2475c:	4620      	mov	r0, r4
   2475e:	9302      	str	r3, [sp, #8]
   24760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24762:	9301      	str	r3, [sp, #4]
   24764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24766:	9300      	str	r3, [sp, #0]
   24768:	464b      	mov	r3, r9
   2476a:	f7ff ff77 	bl	2465c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2476e:	1c7b      	adds	r3, r7, #1
   24770:	bf08      	it	eq
   24772:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24776:	d005      	beq.n	24784 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24778:	ea56 0307 	orrs.w	r3, r6, r7
   2477c:	d106      	bne.n	2478c <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   2477e:	4620      	mov	r0, r4
   24780:	f7ff f860 	bl	23844 <z_sched_start>
}
   24784:	4620      	mov	r0, r4
   24786:	b007      	add	sp, #28
   24788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2478c:	4632      	mov	r2, r6
   2478e:	463b      	mov	r3, r7
   24790:	4906      	ldr	r1, [pc, #24]	; (247ac <z_impl_k_thread_create+0x98>)
   24792:	f104 0018 	add.w	r0, r4, #24
   24796:	f000 f9bf 	bl	24b18 <z_add_timeout>
   2479a:	e7f3      	b.n	24784 <z_impl_k_thread_create+0x70>
   2479c:	00032905 	.word	0x00032905
   247a0:	00032b37 	.word	0x00032b37
   247a4:	0002ff0d 	.word	0x0002ff0d
   247a8:	00032c0b 	.word	0x00032c0b
   247ac:	000238ed 	.word	0x000238ed

000247b0 <z_init_static_threads>:
{
   247b0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   247b4:	4f3f      	ldr	r7, [pc, #252]	; (248b4 <z_init_static_threads+0x104>)
   247b6:	4d40      	ldr	r5, [pc, #256]	; (248b8 <z_init_static_threads+0x108>)
   247b8:	463e      	mov	r6, r7
   247ba:	f8df 810c 	ldr.w	r8, [pc, #268]	; 248c8 <z_init_static_threads+0x118>
{
   247be:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   247c0:	42bd      	cmp	r5, r7
   247c2:	d90e      	bls.n	247e2 <z_init_static_threads+0x32>
   247c4:	493d      	ldr	r1, [pc, #244]	; (248bc <z_init_static_threads+0x10c>)
   247c6:	f240 23e1 	movw	r3, #737	; 0x2e1
   247ca:	4642      	mov	r2, r8
   247cc:	483c      	ldr	r0, [pc, #240]	; (248c0 <z_init_static_threads+0x110>)
   247ce:	f007 fc16 	bl	2bffe <printk>
   247d2:	483c      	ldr	r0, [pc, #240]	; (248c4 <z_init_static_threads+0x114>)
   247d4:	f007 fc13 	bl	2bffe <printk>
   247d8:	f240 21e1 	movw	r1, #737	; 0x2e1
   247dc:	4640      	mov	r0, r8
   247de:	f007 fe2b 	bl	2c438 <assert_post_action>
   247e2:	42b5      	cmp	r5, r6
   247e4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   247e8:	d31f      	bcc.n	2482a <z_init_static_threads+0x7a>
	k_sched_lock();
   247ea:	f7fe fe03 	bl	233f4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   247ee:	4c32      	ldr	r4, [pc, #200]	; (248b8 <z_init_static_threads+0x108>)
   247f0:	4d35      	ldr	r5, [pc, #212]	; (248c8 <z_init_static_threads+0x118>)
   247f2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 248bc <z_init_static_threads+0x10c>
   247f6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 248c0 <z_init_static_threads+0x110>
   247fa:	42b4      	cmp	r4, r6
   247fc:	d90e      	bls.n	2481c <z_init_static_threads+0x6c>
   247fe:	4641      	mov	r1, r8
   24800:	f44f 7340 	mov.w	r3, #768	; 0x300
   24804:	462a      	mov	r2, r5
   24806:	4648      	mov	r0, r9
   24808:	f007 fbf9 	bl	2bffe <printk>
   2480c:	482d      	ldr	r0, [pc, #180]	; (248c4 <z_init_static_threads+0x114>)
   2480e:	f007 fbf6 	bl	2bffe <printk>
   24812:	f44f 7140 	mov.w	r1, #768	; 0x300
   24816:	4628      	mov	r0, r5
   24818:	f007 fe0e 	bl	2c438 <assert_post_action>
   2481c:	42b4      	cmp	r4, r6
   2481e:	d321      	bcc.n	24864 <z_init_static_threads+0xb4>
}
   24820:	b006      	add	sp, #24
   24822:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   24826:	f7fe befb 	b.w	23620 <k_sched_unlock>
		z_setup_new_thread(
   2482a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2482e:	9305      	str	r3, [sp, #20]
   24830:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24834:	9304      	str	r3, [sp, #16]
   24836:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2483a:	9303      	str	r3, [sp, #12]
   2483c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24840:	9302      	str	r3, [sp, #8]
   24842:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   24846:	9301      	str	r3, [sp, #4]
   24848:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2484c:	9300      	str	r3, [sp, #0]
   2484e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   24852:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   24856:	f7ff ff01 	bl	2465c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2485a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2485e:	65dd      	str	r5, [r3, #92]	; 0x5c
   24860:	4625      	mov	r5, r4
   24862:	e7ad      	b.n	247c0 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24864:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24866:	1c4b      	adds	r3, r1, #1
   24868:	d014      	beq.n	24894 <z_init_static_threads+0xe4>
   2486a:	f240 32e7 	movw	r2, #999	; 0x3e7
   2486e:	2300      	movs	r3, #0
   24870:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   24874:	4693      	mov	fp, r2
   24876:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   24878:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2487c:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24880:	459c      	cmp	ip, r3
   24882:	bf08      	it	eq
   24884:	4593      	cmpeq	fp, r2
   24886:	4658      	mov	r0, fp
   24888:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   2488a:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2488c:	d104      	bne.n	24898 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   2488e:	4638      	mov	r0, r7
   24890:	f7fe ffd8 	bl	23844 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   24894:	3430      	adds	r4, #48	; 0x30
   24896:	e7b0      	b.n	247fa <z_init_static_threads+0x4a>
   24898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2489c:	2300      	movs	r3, #0
   2489e:	f7e7 ffdb 	bl	c858 <__aeabi_uldivmod>
   248a2:	4602      	mov	r2, r0
   248a4:	460b      	mov	r3, r1
   248a6:	f107 0018 	add.w	r0, r7, #24
   248aa:	4908      	ldr	r1, [pc, #32]	; (248cc <z_init_static_threads+0x11c>)
   248ac:	f000 f934 	bl	24b18 <z_add_timeout>
   248b0:	e7f0      	b.n	24894 <z_init_static_threads+0xe4>
   248b2:	bf00      	nop
   248b4:	20020b14 	.word	0x20020b14
   248b8:	20020ae4 	.word	0x20020ae4
   248bc:	00032c30 	.word	0x00032c30
   248c0:	0002ff0d 	.word	0x0002ff0d
   248c4:	000305b8 	.word	0x000305b8
   248c8:	00032b37 	.word	0x00032b37
   248cc:	000238ed 	.word	0x000238ed

000248d0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   248d0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   248d2:	b138      	cbz	r0, 248e4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   248d4:	4b04      	ldr	r3, [pc, #16]	; (248e8 <z_spin_lock_valid+0x18>)
   248d6:	f000 0003 	and.w	r0, r0, #3
   248da:	7d1b      	ldrb	r3, [r3, #20]
   248dc:	1ac0      	subs	r0, r0, r3
   248de:	bf18      	it	ne
   248e0:	2001      	movne	r0, #1
   248e2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   248e4:	2001      	movs	r0, #1
}
   248e6:	4770      	bx	lr
   248e8:	20021dd4 	.word	0x20021dd4

000248ec <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   248ec:	4a06      	ldr	r2, [pc, #24]	; (24908 <z_spin_unlock_valid+0x1c>)
   248ee:	7d11      	ldrb	r1, [r2, #20]
   248f0:	6893      	ldr	r3, [r2, #8]
   248f2:	6802      	ldr	r2, [r0, #0]
   248f4:	430b      	orrs	r3, r1
   248f6:	429a      	cmp	r2, r3
   248f8:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   248fc:	bf06      	itte	eq
   248fe:	6003      	streq	r3, [r0, #0]
	return true;
   24900:	2001      	moveq	r0, #1
		return false;
   24902:	4618      	movne	r0, r3
}
   24904:	4770      	bx	lr
   24906:	bf00      	nop
   24908:	20021dd4 	.word	0x20021dd4

0002490c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2490c:	4a02      	ldr	r2, [pc, #8]	; (24918 <z_spin_lock_set_owner+0xc>)
   2490e:	7d11      	ldrb	r1, [r2, #20]
   24910:	6893      	ldr	r3, [r2, #8]
   24912:	430b      	orrs	r3, r1
   24914:	6003      	str	r3, [r0, #0]
}
   24916:	4770      	bx	lr
   24918:	20021dd4 	.word	0x20021dd4

0002491c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   2491c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   24920:	b08a      	sub	sp, #40	; 0x28
   24922:	4604      	mov	r4, r0
   24924:	461d      	mov	r5, r3
   24926:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   2492a:	f009 fe22 	bl	2e572 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2492e:	f104 0620 	add.w	r6, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24932:	2000      	movs	r0, #0
   24934:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   24938:	f04f 0800 	mov.w	r8, #0
   2493c:	f04f 0900 	mov.w	r9, #0
   24940:	e9cd 5003 	strd	r5, r0, [sp, #12]
   24944:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24948:	e9cd 8906 	strd	r8, r9, [sp, #24]
   2494c:	4630      	mov	r0, r6
   2494e:	4b05      	ldr	r3, [pc, #20]	; (24964 <k_work_q_start+0x48>)
   24950:	9400      	str	r4, [sp, #0]
   24952:	f7ff fedf 	bl	24714 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   24956:	4630      	mov	r0, r6
   24958:	4903      	ldr	r1, [pc, #12]	; (24968 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   2495a:	b00a      	add	sp, #40	; 0x28
   2495c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   24960:	f009 be79 	b.w	2e656 <z_impl_k_thread_name_set>
   24964:	00012b21 	.word	0x00012b21
   24968:	00031503 	.word	0x00031503

0002496c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   2496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24970:	4680      	mov	r8, r0
   24972:	460d      	mov	r5, r1
   24974:	4616      	mov	r6, r2
   24976:	461f      	mov	r7, r3
	__asm__ volatile(
   24978:	f04f 0320 	mov.w	r3, #32
   2497c:	f3ef 8911 	mrs	r9, BASEPRI
   24980:	f383 8811 	msr	BASEPRI, r3
   24984:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24988:	4835      	ldr	r0, [pc, #212]	; (24a60 <k_delayed_work_submit_to_queue+0xf4>)
   2498a:	f7ff ffa1 	bl	248d0 <z_spin_lock_valid>
   2498e:	b968      	cbnz	r0, 249ac <k_delayed_work_submit_to_queue+0x40>
   24990:	235c      	movs	r3, #92	; 0x5c
   24992:	4a34      	ldr	r2, [pc, #208]	; (24a64 <k_delayed_work_submit_to_queue+0xf8>)
   24994:	4934      	ldr	r1, [pc, #208]	; (24a68 <k_delayed_work_submit_to_queue+0xfc>)
   24996:	4835      	ldr	r0, [pc, #212]	; (24a6c <k_delayed_work_submit_to_queue+0x100>)
   24998:	f007 fb31 	bl	2bffe <printk>
   2499c:	4930      	ldr	r1, [pc, #192]	; (24a60 <k_delayed_work_submit_to_queue+0xf4>)
   2499e:	4834      	ldr	r0, [pc, #208]	; (24a70 <k_delayed_work_submit_to_queue+0x104>)
   249a0:	f007 fb2d 	bl	2bffe <printk>
   249a4:	215c      	movs	r1, #92	; 0x5c
   249a6:	482f      	ldr	r0, [pc, #188]	; (24a64 <k_delayed_work_submit_to_queue+0xf8>)
   249a8:	f007 fd46 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   249ac:	482c      	ldr	r0, [pc, #176]	; (24a60 <k_delayed_work_submit_to_queue+0xf4>)
   249ae:	f7ff ffad 	bl	2490c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   249b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   249b4:	b30b      	cbz	r3, 249fa <k_delayed_work_submit_to_queue+0x8e>
   249b6:	4543      	cmp	r3, r8
   249b8:	d14e      	bne.n	24a58 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   249ba:	4628      	mov	r0, r5
   249bc:	f009 fe69 	bl	2e692 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   249c0:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   249c4:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   249c6:	d01b      	beq.n	24a00 <k_delayed_work_submit_to_queue+0x94>
			err = 0;
		} else if (err < 0) {
   249c8:	2800      	cmp	r0, #0
   249ca:	da1a      	bge.n	24a02 <k_delayed_work_submit_to_queue+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   249cc:	4824      	ldr	r0, [pc, #144]	; (24a60 <k_delayed_work_submit_to_queue+0xf4>)
   249ce:	f7ff ff8d 	bl	248ec <z_spin_unlock_valid>
   249d2:	b968      	cbnz	r0, 249f0 <k_delayed_work_submit_to_queue+0x84>
   249d4:	2384      	movs	r3, #132	; 0x84
   249d6:	4a23      	ldr	r2, [pc, #140]	; (24a64 <k_delayed_work_submit_to_queue+0xf8>)
   249d8:	4926      	ldr	r1, [pc, #152]	; (24a74 <k_delayed_work_submit_to_queue+0x108>)
   249da:	4824      	ldr	r0, [pc, #144]	; (24a6c <k_delayed_work_submit_to_queue+0x100>)
   249dc:	f007 fb0f 	bl	2bffe <printk>
   249e0:	491f      	ldr	r1, [pc, #124]	; (24a60 <k_delayed_work_submit_to_queue+0xf4>)
   249e2:	4825      	ldr	r0, [pc, #148]	; (24a78 <k_delayed_work_submit_to_queue+0x10c>)
   249e4:	f007 fb0b 	bl	2bffe <printk>
   249e8:	2184      	movs	r1, #132	; 0x84
   249ea:	481e      	ldr	r0, [pc, #120]	; (24a64 <k_delayed_work_submit_to_queue+0xf8>)
   249ec:	f007 fd24 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   249f0:	f389 8811 	msr	BASEPRI, r9
   249f4:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   249f8:	e023      	b.n	24a42 <k_delayed_work_submit_to_queue+0xd6>
	if (work->work_q == work_q) {
   249fa:	f1b8 0f00 	cmp.w	r8, #0
   249fe:	d0dc      	beq.n	249ba <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   24a00:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24a02:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
   24a06:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24a0a:	d11d      	bne.n	24a48 <k_delayed_work_submit_to_queue+0xdc>
   24a0c:	4814      	ldr	r0, [pc, #80]	; (24a60 <k_delayed_work_submit_to_queue+0xf4>)
   24a0e:	f7ff ff6d 	bl	248ec <z_spin_unlock_valid>
   24a12:	b968      	cbnz	r0, 24a30 <k_delayed_work_submit_to_queue+0xc4>
   24a14:	2384      	movs	r3, #132	; 0x84
   24a16:	4a13      	ldr	r2, [pc, #76]	; (24a64 <k_delayed_work_submit_to_queue+0xf8>)
   24a18:	4916      	ldr	r1, [pc, #88]	; (24a74 <k_delayed_work_submit_to_queue+0x108>)
   24a1a:	4814      	ldr	r0, [pc, #80]	; (24a6c <k_delayed_work_submit_to_queue+0x100>)
   24a1c:	f007 faef 	bl	2bffe <printk>
   24a20:	490f      	ldr	r1, [pc, #60]	; (24a60 <k_delayed_work_submit_to_queue+0xf4>)
   24a22:	4815      	ldr	r0, [pc, #84]	; (24a78 <k_delayed_work_submit_to_queue+0x10c>)
   24a24:	f007 faeb 	bl	2bffe <printk>
   24a28:	2184      	movs	r1, #132	; 0x84
   24a2a:	480e      	ldr	r0, [pc, #56]	; (24a64 <k_delayed_work_submit_to_queue+0xf8>)
   24a2c:	f007 fd04 	bl	2c438 <assert_post_action>
   24a30:	f389 8811 	msr	BASEPRI, r9
   24a34:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   24a38:	4629      	mov	r1, r5
   24a3a:	4640      	mov	r0, r8
   24a3c:	f009 fe10 	bl	2e660 <k_work_submit_to_queue>
		return 0;
   24a40:	2400      	movs	r4, #0
}
   24a42:	4620      	mov	r0, r4
   24a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   24a48:	4632      	mov	r2, r6
   24a4a:	463b      	mov	r3, r7
   24a4c:	490b      	ldr	r1, [pc, #44]	; (24a7c <k_delayed_work_submit_to_queue+0x110>)
   24a4e:	f105 0010 	add.w	r0, r5, #16
   24a52:	f000 f861 	bl	24b18 <z_add_timeout>
   24a56:	e7b9      	b.n	249cc <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   24a58:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   24a5c:	e7b6      	b.n	249cc <k_delayed_work_submit_to_queue+0x60>
   24a5e:	bf00      	nop
   24a60:	20021e1c 	.word	0x20021e1c
   24a64:	0002ffdd 	.word	0x0002ffdd
   24a68:	0003002f 	.word	0x0003002f
   24a6c:	0002ff0d 	.word	0x0002ff0d
   24a70:	00030044 	.word	0x00030044
   24a74:	00030003 	.word	0x00030003
   24a78:	0003001a 	.word	0x0003001a
   24a7c:	0002e689 	.word	0x0002e689

00024a80 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   24a80:	4b03      	ldr	r3, [pc, #12]	; (24a90 <elapsed+0x10>)
   24a82:	681b      	ldr	r3, [r3, #0]
   24a84:	b90b      	cbnz	r3, 24a8a <elapsed+0xa>
   24a86:	f7ef bd1d 	b.w	144c4 <z_clock_elapsed>
}
   24a8a:	2000      	movs	r0, #0
   24a8c:	4770      	bx	lr
   24a8e:	bf00      	nop
   24a90:	20021e20 	.word	0x20021e20

00024a94 <remove_timeout>:
{
   24a94:	b530      	push	{r4, r5, lr}
   24a96:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24a98:	b168      	cbz	r0, 24ab6 <remove_timeout+0x22>
   24a9a:	4a0a      	ldr	r2, [pc, #40]	; (24ac4 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   24a9c:	6852      	ldr	r2, [r2, #4]
   24a9e:	4290      	cmp	r0, r2
   24aa0:	d009      	beq.n	24ab6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   24aa2:	b143      	cbz	r3, 24ab6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   24aa4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   24aa8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24aac:	1912      	adds	r2, r2, r4
   24aae:	eb45 0101 	adc.w	r1, r5, r1
   24ab2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   24ab6:	6842      	ldr	r2, [r0, #4]
   24ab8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   24aba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24abc:	2300      	movs	r3, #0
	node->prev = NULL;
   24abe:	e9c0 3300 	strd	r3, r3, [r0]
}
   24ac2:	bd30      	pop	{r4, r5, pc}
   24ac4:	200204cc 	.word	0x200204cc

00024ac8 <next_timeout>:
	return list->head == list;
   24ac8:	4b11      	ldr	r3, [pc, #68]	; (24b10 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   24aca:	b510      	push	{r4, lr}
   24acc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24ace:	429c      	cmp	r4, r3
   24ad0:	bf08      	it	eq
   24ad2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   24ad4:	f7ff ffd4 	bl	24a80 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   24ad8:	b1bc      	cbz	r4, 24b0a <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   24ada:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   24ade:	1a12      	subs	r2, r2, r0
   24ae0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   24ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   24ae8:	f173 0100 	sbcs.w	r1, r3, #0
   24aec:	da0d      	bge.n	24b0a <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   24aee:	4619      	mov	r1, r3
   24af0:	2a00      	cmp	r2, #0
   24af2:	f171 0300 	sbcs.w	r3, r1, #0
   24af6:	4610      	mov	r0, r2
   24af8:	da00      	bge.n	24afc <next_timeout+0x34>
   24afa:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   24afc:	4b05      	ldr	r3, [pc, #20]	; (24b14 <next_timeout+0x4c>)
   24afe:	691b      	ldr	r3, [r3, #16]
   24b00:	b113      	cbz	r3, 24b08 <next_timeout+0x40>
   24b02:	4298      	cmp	r0, r3
   24b04:	bfa8      	it	ge
   24b06:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   24b08:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   24b0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24b0e:	e7f5      	b.n	24afc <next_timeout+0x34>
   24b10:	200204cc 	.word	0x200204cc
   24b14:	20021dd4 	.word	0x20021dd4

00024b18 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   24b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b1c:	9101      	str	r1, [sp, #4]
   24b1e:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24b20:	1c4b      	adds	r3, r1, #1
   24b22:	bf08      	it	eq
   24b24:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   24b28:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24b2a:	f000 80a3 	beq.w	24c74 <z_add_timeout+0x15c>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   24b2e:	f06f 0301 	mvn.w	r3, #1
   24b32:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   24b36:	1c54      	adds	r4, r2, #1
   24b38:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   24b3c:	ebb3 0804 	subs.w	r8, r3, r4
   24b40:	eb6b 0905 	sbc.w	r9, fp, r5
   24b44:	f1b8 0f00 	cmp.w	r8, #0
   24b48:	f179 0300 	sbcs.w	r3, r9, #0
   24b4c:	db0f      	blt.n	24b6e <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   24b4e:	f7ff ff97 	bl	24a80 <elapsed>
   24b52:	f06f 0301 	mvn.w	r3, #1
   24b56:	4a4e      	ldr	r2, [pc, #312]	; (24c90 <z_add_timeout+0x178>)
   24b58:	e9d2 1c00 	ldrd	r1, ip, [r2]
   24b5c:	1a5b      	subs	r3, r3, r1
   24b5e:	eb6b 020c 	sbc.w	r2, fp, ip
   24b62:	1b1e      	subs	r6, r3, r4
   24b64:	eb62 0705 	sbc.w	r7, r2, r5
   24b68:	1a34      	subs	r4, r6, r0
   24b6a:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24b6e:	f8da 3000 	ldr.w	r3, [sl]
   24b72:	b163      	cbz	r3, 24b8e <z_add_timeout+0x76>
   24b74:	4947      	ldr	r1, [pc, #284]	; (24c94 <z_add_timeout+0x17c>)
   24b76:	2368      	movs	r3, #104	; 0x68
   24b78:	4a47      	ldr	r2, [pc, #284]	; (24c98 <z_add_timeout+0x180>)
   24b7a:	4848      	ldr	r0, [pc, #288]	; (24c9c <z_add_timeout+0x184>)
   24b7c:	f007 fa3f 	bl	2bffe <printk>
   24b80:	4847      	ldr	r0, [pc, #284]	; (24ca0 <z_add_timeout+0x188>)
   24b82:	f007 fa3c 	bl	2bffe <printk>
   24b86:	2168      	movs	r1, #104	; 0x68
   24b88:	4843      	ldr	r0, [pc, #268]	; (24c98 <z_add_timeout+0x180>)
   24b8a:	f007 fc55 	bl	2c438 <assert_post_action>
	to->fn = fn;
   24b8e:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   24b90:	2c01      	cmp	r4, #1
	to->fn = fn;
   24b92:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   24b96:	f175 0300 	sbcs.w	r3, r5, #0
   24b9a:	bfbc      	itt	lt
   24b9c:	2401      	movlt	r4, #1
   24b9e:	2500      	movlt	r5, #0
	__asm__ volatile(
   24ba0:	f04f 0320 	mov.w	r3, #32
   24ba4:	f3ef 8611 	mrs	r6, BASEPRI
   24ba8:	f383 8811 	msr	BASEPRI, r3
   24bac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24bb0:	483c      	ldr	r0, [pc, #240]	; (24ca4 <z_add_timeout+0x18c>)
   24bb2:	f7ff fe8d 	bl	248d0 <z_spin_lock_valid>
   24bb6:	b968      	cbnz	r0, 24bd4 <z_add_timeout+0xbc>
   24bb8:	235c      	movs	r3, #92	; 0x5c
   24bba:	4a3b      	ldr	r2, [pc, #236]	; (24ca8 <z_add_timeout+0x190>)
   24bbc:	493b      	ldr	r1, [pc, #236]	; (24cac <z_add_timeout+0x194>)
   24bbe:	4837      	ldr	r0, [pc, #220]	; (24c9c <z_add_timeout+0x184>)
   24bc0:	f007 fa1d 	bl	2bffe <printk>
   24bc4:	4937      	ldr	r1, [pc, #220]	; (24ca4 <z_add_timeout+0x18c>)
   24bc6:	483a      	ldr	r0, [pc, #232]	; (24cb0 <z_add_timeout+0x198>)
   24bc8:	f007 fa19 	bl	2bffe <printk>
   24bcc:	215c      	movs	r1, #92	; 0x5c
   24bce:	4836      	ldr	r0, [pc, #216]	; (24ca8 <z_add_timeout+0x190>)
   24bd0:	f007 fc32 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   24bd4:	4833      	ldr	r0, [pc, #204]	; (24ca4 <z_add_timeout+0x18c>)
   24bd6:	f7ff fe99 	bl	2490c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   24bda:	f7ff ff51 	bl	24a80 <elapsed>
	return list->head == list;
   24bde:	4b35      	ldr	r3, [pc, #212]	; (24cb4 <z_add_timeout+0x19c>)
   24be0:	1824      	adds	r4, r4, r0
   24be2:	681a      	ldr	r2, [r3, #0]
   24be4:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24be8:	429a      	cmp	r2, r3
   24bea:	e9ca 4504 	strd	r4, r5, [sl, #16]
   24bee:	d001      	beq.n	24bf4 <z_add_timeout+0xdc>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24bf0:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   24bf2:	b952      	cbnz	r2, 24c0a <z_add_timeout+0xf2>
	node->prev = list->tail;
   24bf4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   24bf6:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   24bfa:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   24bfe:	685a      	ldr	r2, [r3, #4]
   24c00:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   24c04:	f8c3 a004 	str.w	sl, [r3, #4]
}
   24c08:	e014      	b.n	24c34 <z_add_timeout+0x11c>
			if (t->dticks > to->dticks) {
   24c0a:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   24c0e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   24c12:	4544      	cmp	r4, r8
   24c14:	eb75 0109 	sbcs.w	r1, r5, r9
   24c18:	da2f      	bge.n	24c7a <z_add_timeout+0x162>
				t->dticks -= to->dticks;
   24c1a:	ebb8 0004 	subs.w	r0, r8, r4
   24c1e:	eb69 0105 	sbc.w	r1, r9, r5
   24c22:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   24c26:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   24c28:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   24c2c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   24c30:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   24c34:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24c36:	429a      	cmp	r2, r3
   24c38:	d006      	beq.n	24c48 <z_add_timeout+0x130>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   24c3a:	4592      	cmp	sl, r2
   24c3c:	d104      	bne.n	24c48 <z_add_timeout+0x130>
			z_clock_set_timeout(next_timeout(), false);
   24c3e:	f7ff ff43 	bl	24ac8 <next_timeout>
   24c42:	2100      	movs	r1, #0
   24c44:	f7ef fbd8 	bl	143f8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c48:	4816      	ldr	r0, [pc, #88]	; (24ca4 <z_add_timeout+0x18c>)
   24c4a:	f7ff fe4f 	bl	248ec <z_spin_unlock_valid>
   24c4e:	b968      	cbnz	r0, 24c6c <z_add_timeout+0x154>
   24c50:	2384      	movs	r3, #132	; 0x84
   24c52:	4a15      	ldr	r2, [pc, #84]	; (24ca8 <z_add_timeout+0x190>)
   24c54:	4918      	ldr	r1, [pc, #96]	; (24cb8 <z_add_timeout+0x1a0>)
   24c56:	4811      	ldr	r0, [pc, #68]	; (24c9c <z_add_timeout+0x184>)
   24c58:	f007 f9d1 	bl	2bffe <printk>
   24c5c:	4911      	ldr	r1, [pc, #68]	; (24ca4 <z_add_timeout+0x18c>)
   24c5e:	4817      	ldr	r0, [pc, #92]	; (24cbc <z_add_timeout+0x1a4>)
   24c60:	f007 f9cd 	bl	2bffe <printk>
   24c64:	2184      	movs	r1, #132	; 0x84
   24c66:	4810      	ldr	r0, [pc, #64]	; (24ca8 <z_add_timeout+0x190>)
   24c68:	f007 fbe6 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   24c6c:	f386 8811 	msr	BASEPRI, r6
   24c70:	f3bf 8f6f 	isb	sy
		}
	}
}
   24c74:	b003      	add	sp, #12
   24c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   24c7a:	ebb4 0008 	subs.w	r0, r4, r8
   24c7e:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   24c82:	42ba      	cmp	r2, r7
   24c84:	e9ca 0104 	strd	r0, r1, [sl, #16]
   24c88:	d0b4      	beq.n	24bf4 <z_add_timeout+0xdc>
   24c8a:	6812      	ldr	r2, [r2, #0]
   24c8c:	e7b1      	b.n	24bf2 <z_add_timeout+0xda>
   24c8e:	bf00      	nop
   24c90:	20021440 	.word	0x20021440
   24c94:	00032c81 	.word	0x00032c81
   24c98:	00032c5d 	.word	0x00032c5d
   24c9c:	0002ff0d 	.word	0x0002ff0d
   24ca0:	0003053a 	.word	0x0003053a
   24ca4:	20021e24 	.word	0x20021e24
   24ca8:	0002ffdd 	.word	0x0002ffdd
   24cac:	0003002f 	.word	0x0003002f
   24cb0:	00030044 	.word	0x00030044
   24cb4:	200204cc 	.word	0x200204cc
   24cb8:	00030003 	.word	0x00030003
   24cbc:	0003001a 	.word	0x0003001a

00024cc0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   24cc0:	b538      	push	{r3, r4, r5, lr}
   24cc2:	4604      	mov	r4, r0
	__asm__ volatile(
   24cc4:	f04f 0320 	mov.w	r3, #32
   24cc8:	f3ef 8511 	mrs	r5, BASEPRI
   24ccc:	f383 8811 	msr	BASEPRI, r3
   24cd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24cd4:	481a      	ldr	r0, [pc, #104]	; (24d40 <z_abort_timeout+0x80>)
   24cd6:	f7ff fdfb 	bl	248d0 <z_spin_lock_valid>
   24cda:	b968      	cbnz	r0, 24cf8 <z_abort_timeout+0x38>
   24cdc:	235c      	movs	r3, #92	; 0x5c
   24cde:	4a19      	ldr	r2, [pc, #100]	; (24d44 <z_abort_timeout+0x84>)
   24ce0:	4919      	ldr	r1, [pc, #100]	; (24d48 <z_abort_timeout+0x88>)
   24ce2:	481a      	ldr	r0, [pc, #104]	; (24d4c <z_abort_timeout+0x8c>)
   24ce4:	f007 f98b 	bl	2bffe <printk>
   24ce8:	4915      	ldr	r1, [pc, #84]	; (24d40 <z_abort_timeout+0x80>)
   24cea:	4819      	ldr	r0, [pc, #100]	; (24d50 <z_abort_timeout+0x90>)
   24cec:	f007 f987 	bl	2bffe <printk>
   24cf0:	215c      	movs	r1, #92	; 0x5c
   24cf2:	4814      	ldr	r0, [pc, #80]	; (24d44 <z_abort_timeout+0x84>)
   24cf4:	f007 fba0 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   24cf8:	4811      	ldr	r0, [pc, #68]	; (24d40 <z_abort_timeout+0x80>)
   24cfa:	f7ff fe07 	bl	2490c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   24cfe:	6823      	ldr	r3, [r4, #0]
   24d00:	b1db      	cbz	r3, 24d3a <z_abort_timeout+0x7a>
			remove_timeout(to);
   24d02:	4620      	mov	r0, r4
   24d04:	f7ff fec6 	bl	24a94 <remove_timeout>
			ret = 0;
   24d08:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d0a:	480d      	ldr	r0, [pc, #52]	; (24d40 <z_abort_timeout+0x80>)
   24d0c:	f7ff fdee 	bl	248ec <z_spin_unlock_valid>
   24d10:	b968      	cbnz	r0, 24d2e <z_abort_timeout+0x6e>
   24d12:	2384      	movs	r3, #132	; 0x84
   24d14:	4a0b      	ldr	r2, [pc, #44]	; (24d44 <z_abort_timeout+0x84>)
   24d16:	490f      	ldr	r1, [pc, #60]	; (24d54 <z_abort_timeout+0x94>)
   24d18:	480c      	ldr	r0, [pc, #48]	; (24d4c <z_abort_timeout+0x8c>)
   24d1a:	f007 f970 	bl	2bffe <printk>
   24d1e:	4908      	ldr	r1, [pc, #32]	; (24d40 <z_abort_timeout+0x80>)
   24d20:	480d      	ldr	r0, [pc, #52]	; (24d58 <z_abort_timeout+0x98>)
   24d22:	f007 f96c 	bl	2bffe <printk>
   24d26:	2184      	movs	r1, #132	; 0x84
   24d28:	4806      	ldr	r0, [pc, #24]	; (24d44 <z_abort_timeout+0x84>)
   24d2a:	f007 fb85 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   24d2e:	f385 8811 	msr	BASEPRI, r5
   24d32:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   24d36:	4620      	mov	r0, r4
   24d38:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   24d3a:	f06f 0415 	mvn.w	r4, #21
   24d3e:	e7e4      	b.n	24d0a <z_abort_timeout+0x4a>
   24d40:	20021e24 	.word	0x20021e24
   24d44:	0002ffdd 	.word	0x0002ffdd
   24d48:	0003002f 	.word	0x0003002f
   24d4c:	0002ff0d 	.word	0x0002ff0d
   24d50:	00030044 	.word	0x00030044
   24d54:	00030003 	.word	0x00030003
   24d58:	0003001a 	.word	0x0003001a

00024d5c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   24d5c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24d5e:	f04f 0320 	mov.w	r3, #32
   24d62:	f3ef 8511 	mrs	r5, BASEPRI
   24d66:	f383 8811 	msr	BASEPRI, r3
   24d6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d6e:	4818      	ldr	r0, [pc, #96]	; (24dd0 <z_get_next_timeout_expiry+0x74>)
   24d70:	f7ff fdae 	bl	248d0 <z_spin_lock_valid>
   24d74:	b968      	cbnz	r0, 24d92 <z_get_next_timeout_expiry+0x36>
   24d76:	235c      	movs	r3, #92	; 0x5c
   24d78:	4a16      	ldr	r2, [pc, #88]	; (24dd4 <z_get_next_timeout_expiry+0x78>)
   24d7a:	4917      	ldr	r1, [pc, #92]	; (24dd8 <z_get_next_timeout_expiry+0x7c>)
   24d7c:	4817      	ldr	r0, [pc, #92]	; (24ddc <z_get_next_timeout_expiry+0x80>)
   24d7e:	f007 f93e 	bl	2bffe <printk>
   24d82:	4913      	ldr	r1, [pc, #76]	; (24dd0 <z_get_next_timeout_expiry+0x74>)
   24d84:	4816      	ldr	r0, [pc, #88]	; (24de0 <z_get_next_timeout_expiry+0x84>)
   24d86:	f007 f93a 	bl	2bffe <printk>
   24d8a:	215c      	movs	r1, #92	; 0x5c
   24d8c:	4811      	ldr	r0, [pc, #68]	; (24dd4 <z_get_next_timeout_expiry+0x78>)
   24d8e:	f007 fb53 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   24d92:	480f      	ldr	r0, [pc, #60]	; (24dd0 <z_get_next_timeout_expiry+0x74>)
   24d94:	f7ff fdba 	bl	2490c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   24d98:	f7ff fe96 	bl	24ac8 <next_timeout>
   24d9c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d9e:	480c      	ldr	r0, [pc, #48]	; (24dd0 <z_get_next_timeout_expiry+0x74>)
   24da0:	f7ff fda4 	bl	248ec <z_spin_unlock_valid>
   24da4:	b968      	cbnz	r0, 24dc2 <z_get_next_timeout_expiry+0x66>
   24da6:	2384      	movs	r3, #132	; 0x84
   24da8:	4a0a      	ldr	r2, [pc, #40]	; (24dd4 <z_get_next_timeout_expiry+0x78>)
   24daa:	490e      	ldr	r1, [pc, #56]	; (24de4 <z_get_next_timeout_expiry+0x88>)
   24dac:	480b      	ldr	r0, [pc, #44]	; (24ddc <z_get_next_timeout_expiry+0x80>)
   24dae:	f007 f926 	bl	2bffe <printk>
   24db2:	4907      	ldr	r1, [pc, #28]	; (24dd0 <z_get_next_timeout_expiry+0x74>)
   24db4:	480c      	ldr	r0, [pc, #48]	; (24de8 <z_get_next_timeout_expiry+0x8c>)
   24db6:	f007 f922 	bl	2bffe <printk>
   24dba:	2184      	movs	r1, #132	; 0x84
   24dbc:	4805      	ldr	r0, [pc, #20]	; (24dd4 <z_get_next_timeout_expiry+0x78>)
   24dbe:	f007 fb3b 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   24dc2:	f385 8811 	msr	BASEPRI, r5
   24dc6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   24dca:	4620      	mov	r0, r4
   24dcc:	bd38      	pop	{r3, r4, r5, pc}
   24dce:	bf00      	nop
   24dd0:	20021e24 	.word	0x20021e24
   24dd4:	0002ffdd 	.word	0x0002ffdd
   24dd8:	0003002f 	.word	0x0003002f
   24ddc:	0002ff0d 	.word	0x0002ff0d
   24de0:	00030044 	.word	0x00030044
   24de4:	00030003 	.word	0x00030003
   24de8:	0003001a 	.word	0x0003001a

00024dec <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   24dec:	b570      	push	{r4, r5, r6, lr}
   24dee:	4604      	mov	r4, r0
   24df0:	460d      	mov	r5, r1
	__asm__ volatile(
   24df2:	f04f 0320 	mov.w	r3, #32
   24df6:	f3ef 8611 	mrs	r6, BASEPRI
   24dfa:	f383 8811 	msr	BASEPRI, r3
   24dfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e02:	481b      	ldr	r0, [pc, #108]	; (24e70 <z_set_timeout_expiry+0x84>)
   24e04:	f7ff fd64 	bl	248d0 <z_spin_lock_valid>
   24e08:	b968      	cbnz	r0, 24e26 <z_set_timeout_expiry+0x3a>
   24e0a:	235c      	movs	r3, #92	; 0x5c
   24e0c:	4a19      	ldr	r2, [pc, #100]	; (24e74 <z_set_timeout_expiry+0x88>)
   24e0e:	491a      	ldr	r1, [pc, #104]	; (24e78 <z_set_timeout_expiry+0x8c>)
   24e10:	481a      	ldr	r0, [pc, #104]	; (24e7c <z_set_timeout_expiry+0x90>)
   24e12:	f007 f8f4 	bl	2bffe <printk>
   24e16:	4916      	ldr	r1, [pc, #88]	; (24e70 <z_set_timeout_expiry+0x84>)
   24e18:	4819      	ldr	r0, [pc, #100]	; (24e80 <z_set_timeout_expiry+0x94>)
   24e1a:	f007 f8f0 	bl	2bffe <printk>
   24e1e:	215c      	movs	r1, #92	; 0x5c
   24e20:	4814      	ldr	r0, [pc, #80]	; (24e74 <z_set_timeout_expiry+0x88>)
   24e22:	f007 fb09 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   24e26:	4812      	ldr	r0, [pc, #72]	; (24e70 <z_set_timeout_expiry+0x84>)
   24e28:	f7ff fd70 	bl	2490c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   24e2c:	f7ff fe4c 	bl	24ac8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   24e30:	2801      	cmp	r0, #1
   24e32:	dd05      	ble.n	24e40 <z_set_timeout_expiry+0x54>
   24e34:	42a0      	cmp	r0, r4
   24e36:	dd03      	ble.n	24e40 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, is_idle);
   24e38:	4629      	mov	r1, r5
   24e3a:	4620      	mov	r0, r4
   24e3c:	f7ef fadc 	bl	143f8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e40:	480b      	ldr	r0, [pc, #44]	; (24e70 <z_set_timeout_expiry+0x84>)
   24e42:	f7ff fd53 	bl	248ec <z_spin_unlock_valid>
   24e46:	b968      	cbnz	r0, 24e64 <z_set_timeout_expiry+0x78>
   24e48:	2384      	movs	r3, #132	; 0x84
   24e4a:	4a0a      	ldr	r2, [pc, #40]	; (24e74 <z_set_timeout_expiry+0x88>)
   24e4c:	490d      	ldr	r1, [pc, #52]	; (24e84 <z_set_timeout_expiry+0x98>)
   24e4e:	480b      	ldr	r0, [pc, #44]	; (24e7c <z_set_timeout_expiry+0x90>)
   24e50:	f007 f8d5 	bl	2bffe <printk>
   24e54:	4906      	ldr	r1, [pc, #24]	; (24e70 <z_set_timeout_expiry+0x84>)
   24e56:	480c      	ldr	r0, [pc, #48]	; (24e88 <z_set_timeout_expiry+0x9c>)
   24e58:	f007 f8d1 	bl	2bffe <printk>
   24e5c:	2184      	movs	r1, #132	; 0x84
   24e5e:	4805      	ldr	r0, [pc, #20]	; (24e74 <z_set_timeout_expiry+0x88>)
   24e60:	f007 faea 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   24e64:	f386 8811 	msr	BASEPRI, r6
   24e68:	f3bf 8f6f 	isb	sy
		}
	}
}
   24e6c:	bd70      	pop	{r4, r5, r6, pc}
   24e6e:	bf00      	nop
   24e70:	20021e24 	.word	0x20021e24
   24e74:	0002ffdd 	.word	0x0002ffdd
   24e78:	0003002f 	.word	0x0003002f
   24e7c:	0002ff0d 	.word	0x0002ff0d
   24e80:	00030044 	.word	0x00030044
   24e84:	00030003 	.word	0x00030003
   24e88:	0003001a 	.word	0x0003001a

00024e8c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   24e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e90:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24e92:	f7fe fdd3 	bl	23a3c <z_time_slice>
	__asm__ volatile(
   24e96:	f04f 0320 	mov.w	r3, #32
   24e9a:	f3ef 8711 	mrs	r7, BASEPRI
   24e9e:	f383 8811 	msr	BASEPRI, r3
   24ea2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ea6:	4854      	ldr	r0, [pc, #336]	; (24ff8 <z_clock_announce+0x16c>)
   24ea8:	f7ff fd12 	bl	248d0 <z_spin_lock_valid>
   24eac:	b968      	cbnz	r0, 24eca <z_clock_announce+0x3e>
   24eae:	235c      	movs	r3, #92	; 0x5c
   24eb0:	4a52      	ldr	r2, [pc, #328]	; (24ffc <z_clock_announce+0x170>)
   24eb2:	4953      	ldr	r1, [pc, #332]	; (25000 <z_clock_announce+0x174>)
   24eb4:	4853      	ldr	r0, [pc, #332]	; (25004 <z_clock_announce+0x178>)
   24eb6:	f007 f8a2 	bl	2bffe <printk>
   24eba:	494f      	ldr	r1, [pc, #316]	; (24ff8 <z_clock_announce+0x16c>)
   24ebc:	4852      	ldr	r0, [pc, #328]	; (25008 <z_clock_announce+0x17c>)
   24ebe:	f007 f89e 	bl	2bffe <printk>
   24ec2:	215c      	movs	r1, #92	; 0x5c
   24ec4:	484d      	ldr	r0, [pc, #308]	; (24ffc <z_clock_announce+0x170>)
   24ec6:	f007 fab7 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   24eca:	4e50      	ldr	r6, [pc, #320]	; (2500c <z_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   24ecc:	4d50      	ldr	r5, [pc, #320]	; (25010 <z_clock_announce+0x184>)
   24ece:	46b3      	mov	fp, r6
   24ed0:	4849      	ldr	r0, [pc, #292]	; (24ff8 <z_clock_announce+0x16c>)
	return list->head == list;
   24ed2:	f8df a148 	ldr.w	sl, [pc, #328]	; 2501c <z_clock_announce+0x190>
   24ed6:	f7ff fd19 	bl	2490c <z_spin_lock_set_owner>
   24eda:	602c      	str	r4, [r5, #0]
   24edc:	f8d5 c000 	ldr.w	ip, [r5]
   24ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
   24ee4:	e9cd 2300 	strd	r2, r3, [sp]
   24ee8:	4662      	mov	r2, ip
   24eea:	f8da 4000 	ldr.w	r4, [sl]
   24eee:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24ef0:	4554      	cmp	r4, sl
   24ef2:	46e0      	mov	r8, ip
   24ef4:	4699      	mov	r9, r3
   24ef6:	d00c      	beq.n	24f12 <z_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   24ef8:	b15c      	cbz	r4, 24f12 <z_clock_announce+0x86>
   24efa:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   24efe:	458c      	cmp	ip, r1
   24f00:	eb79 0302 	sbcs.w	r3, r9, r2
   24f04:	da2e      	bge.n	24f64 <z_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   24f06:	ebb1 000c 	subs.w	r0, r1, ip
   24f0a:	eb62 0109 	sbc.w	r1, r2, r9
   24f0e:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   24f12:	464b      	mov	r3, r9
	announce_remaining = 0;
   24f14:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   24f16:	9a00      	ldr	r2, [sp, #0]
   24f18:	9901      	ldr	r1, [sp, #4]
   24f1a:	eb18 0202 	adds.w	r2, r8, r2
   24f1e:	eb43 0101 	adc.w	r1, r3, r1
   24f22:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   24f26:	602c      	str	r4, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   24f28:	f7ff fdce 	bl	24ac8 <next_timeout>
   24f2c:	4621      	mov	r1, r4
   24f2e:	f7ef fa63 	bl	143f8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f32:	4831      	ldr	r0, [pc, #196]	; (24ff8 <z_clock_announce+0x16c>)
   24f34:	f7ff fcda 	bl	248ec <z_spin_unlock_valid>
   24f38:	b968      	cbnz	r0, 24f56 <z_clock_announce+0xca>
   24f3a:	2384      	movs	r3, #132	; 0x84
   24f3c:	4a2f      	ldr	r2, [pc, #188]	; (24ffc <z_clock_announce+0x170>)
   24f3e:	4935      	ldr	r1, [pc, #212]	; (25014 <z_clock_announce+0x188>)
   24f40:	4830      	ldr	r0, [pc, #192]	; (25004 <z_clock_announce+0x178>)
   24f42:	f007 f85c 	bl	2bffe <printk>
   24f46:	492c      	ldr	r1, [pc, #176]	; (24ff8 <z_clock_announce+0x16c>)
   24f48:	4833      	ldr	r0, [pc, #204]	; (25018 <z_clock_announce+0x18c>)
   24f4a:	f007 f858 	bl	2bffe <printk>
   24f4e:	2184      	movs	r1, #132	; 0x84
   24f50:	482a      	ldr	r0, [pc, #168]	; (24ffc <z_clock_announce+0x170>)
   24f52:	f007 fa71 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   24f56:	f387 8811 	msr	BASEPRI, r7
   24f5a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24f5e:	b003      	add	sp, #12
   24f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   24f64:	2200      	movs	r2, #0
		curr_tick += dt;
   24f66:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   24f6a:	2300      	movs	r3, #0
		curr_tick += dt;
   24f6c:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   24f70:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   24f74:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   24f78:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   24f7a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   24f7e:	4620      	mov	r0, r4
		curr_tick += dt;
   24f80:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   24f84:	f7ff fd86 	bl	24a94 <remove_timeout>
   24f88:	481b      	ldr	r0, [pc, #108]	; (24ff8 <z_clock_announce+0x16c>)
   24f8a:	f7ff fcaf 	bl	248ec <z_spin_unlock_valid>
   24f8e:	b968      	cbnz	r0, 24fac <z_clock_announce+0x120>
   24f90:	2384      	movs	r3, #132	; 0x84
   24f92:	4a1a      	ldr	r2, [pc, #104]	; (24ffc <z_clock_announce+0x170>)
   24f94:	491f      	ldr	r1, [pc, #124]	; (25014 <z_clock_announce+0x188>)
   24f96:	481b      	ldr	r0, [pc, #108]	; (25004 <z_clock_announce+0x178>)
   24f98:	f007 f831 	bl	2bffe <printk>
   24f9c:	4916      	ldr	r1, [pc, #88]	; (24ff8 <z_clock_announce+0x16c>)
   24f9e:	481e      	ldr	r0, [pc, #120]	; (25018 <z_clock_announce+0x18c>)
   24fa0:	f007 f82d 	bl	2bffe <printk>
   24fa4:	2184      	movs	r1, #132	; 0x84
   24fa6:	4815      	ldr	r0, [pc, #84]	; (24ffc <z_clock_announce+0x170>)
   24fa8:	f007 fa46 	bl	2c438 <assert_post_action>
   24fac:	f387 8811 	msr	BASEPRI, r7
   24fb0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   24fb4:	4620      	mov	r0, r4
   24fb6:	68a3      	ldr	r3, [r4, #8]
   24fb8:	4798      	blx	r3
	__asm__ volatile(
   24fba:	f04f 0320 	mov.w	r3, #32
   24fbe:	f3ef 8711 	mrs	r7, BASEPRI
   24fc2:	f383 8811 	msr	BASEPRI, r3
   24fc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fca:	480b      	ldr	r0, [pc, #44]	; (24ff8 <z_clock_announce+0x16c>)
   24fcc:	f7ff fc80 	bl	248d0 <z_spin_lock_valid>
   24fd0:	b968      	cbnz	r0, 24fee <z_clock_announce+0x162>
   24fd2:	235c      	movs	r3, #92	; 0x5c
   24fd4:	4a09      	ldr	r2, [pc, #36]	; (24ffc <z_clock_announce+0x170>)
   24fd6:	490a      	ldr	r1, [pc, #40]	; (25000 <z_clock_announce+0x174>)
   24fd8:	480a      	ldr	r0, [pc, #40]	; (25004 <z_clock_announce+0x178>)
   24fda:	f007 f810 	bl	2bffe <printk>
   24fde:	4906      	ldr	r1, [pc, #24]	; (24ff8 <z_clock_announce+0x16c>)
   24fe0:	4809      	ldr	r0, [pc, #36]	; (25008 <z_clock_announce+0x17c>)
   24fe2:	f007 f80c 	bl	2bffe <printk>
   24fe6:	215c      	movs	r1, #92	; 0x5c
   24fe8:	4804      	ldr	r0, [pc, #16]	; (24ffc <z_clock_announce+0x170>)
   24fea:	f007 fa25 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   24fee:	4802      	ldr	r0, [pc, #8]	; (24ff8 <z_clock_announce+0x16c>)
   24ff0:	f7ff fc8c 	bl	2490c <z_spin_lock_set_owner>
	return k;
   24ff4:	e772      	b.n	24edc <z_clock_announce+0x50>
   24ff6:	bf00      	nop
   24ff8:	20021e24 	.word	0x20021e24
   24ffc:	0002ffdd 	.word	0x0002ffdd
   25000:	0003002f 	.word	0x0003002f
   25004:	0002ff0d 	.word	0x0002ff0d
   25008:	00030044 	.word	0x00030044
   2500c:	20021440 	.word	0x20021440
   25010:	20021e20 	.word	0x20021e20
   25014:	00030003 	.word	0x00030003
   25018:	0003001a 	.word	0x0003001a
   2501c:	200204cc 	.word	0x200204cc

00025020 <z_tick_get>:

int64_t z_tick_get(void)
{
   25020:	b570      	push	{r4, r5, r6, lr}
   25022:	f04f 0320 	mov.w	r3, #32
   25026:	f3ef 8611 	mrs	r6, BASEPRI
   2502a:	f383 8811 	msr	BASEPRI, r3
   2502e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25032:	481b      	ldr	r0, [pc, #108]	; (250a0 <z_tick_get+0x80>)
   25034:	f7ff fc4c 	bl	248d0 <z_spin_lock_valid>
   25038:	b968      	cbnz	r0, 25056 <z_tick_get+0x36>
   2503a:	235c      	movs	r3, #92	; 0x5c
   2503c:	4a19      	ldr	r2, [pc, #100]	; (250a4 <z_tick_get+0x84>)
   2503e:	491a      	ldr	r1, [pc, #104]	; (250a8 <z_tick_get+0x88>)
   25040:	481a      	ldr	r0, [pc, #104]	; (250ac <z_tick_get+0x8c>)
   25042:	f006 ffdc 	bl	2bffe <printk>
   25046:	4916      	ldr	r1, [pc, #88]	; (250a0 <z_tick_get+0x80>)
   25048:	4819      	ldr	r0, [pc, #100]	; (250b0 <z_tick_get+0x90>)
   2504a:	f006 ffd8 	bl	2bffe <printk>
   2504e:	215c      	movs	r1, #92	; 0x5c
   25050:	4814      	ldr	r0, [pc, #80]	; (250a4 <z_tick_get+0x84>)
   25052:	f007 f9f1 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   25056:	4812      	ldr	r0, [pc, #72]	; (250a0 <z_tick_get+0x80>)
   25058:	f7ff fc58 	bl	2490c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   2505c:	f7ef fa32 	bl	144c4 <z_clock_elapsed>
   25060:	4b14      	ldr	r3, [pc, #80]	; (250b4 <z_tick_get+0x94>)
   25062:	e9d3 4500 	ldrd	r4, r5, [r3]
   25066:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25068:	480d      	ldr	r0, [pc, #52]	; (250a0 <z_tick_get+0x80>)
   2506a:	f145 0500 	adc.w	r5, r5, #0
   2506e:	f7ff fc3d 	bl	248ec <z_spin_unlock_valid>
   25072:	b968      	cbnz	r0, 25090 <z_tick_get+0x70>
   25074:	2384      	movs	r3, #132	; 0x84
   25076:	4a0b      	ldr	r2, [pc, #44]	; (250a4 <z_tick_get+0x84>)
   25078:	490f      	ldr	r1, [pc, #60]	; (250b8 <z_tick_get+0x98>)
   2507a:	480c      	ldr	r0, [pc, #48]	; (250ac <z_tick_get+0x8c>)
   2507c:	f006 ffbf 	bl	2bffe <printk>
   25080:	4907      	ldr	r1, [pc, #28]	; (250a0 <z_tick_get+0x80>)
   25082:	480e      	ldr	r0, [pc, #56]	; (250bc <z_tick_get+0x9c>)
   25084:	f006 ffbb 	bl	2bffe <printk>
   25088:	2184      	movs	r1, #132	; 0x84
   2508a:	4806      	ldr	r0, [pc, #24]	; (250a4 <z_tick_get+0x84>)
   2508c:	f007 f9d4 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   25090:	f386 8811 	msr	BASEPRI, r6
   25094:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   25098:	4620      	mov	r0, r4
   2509a:	4629      	mov	r1, r5
   2509c:	bd70      	pop	{r4, r5, r6, pc}
   2509e:	bf00      	nop
   250a0:	20021e24 	.word	0x20021e24
   250a4:	0002ffdd 	.word	0x0002ffdd
   250a8:	0003002f 	.word	0x0003002f
   250ac:	0002ff0d 	.word	0x0002ff0d
   250b0:	00030044 	.word	0x00030044
   250b4:	20021440 	.word	0x20021440
   250b8:	00030003 	.word	0x00030003
   250bc:	0003001a 	.word	0x0003001a

000250c0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   250c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   250c2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   250c6:	1c56      	adds	r6, r2, #1
   250c8:	f143 0700 	adc.w	r7, r3, #0
   250cc:	2f00      	cmp	r7, #0
   250ce:	bf08      	it	eq
   250d0:	2e02      	cmpeq	r6, #2
{
   250d2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   250d4:	d302      	bcc.n	250dc <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   250d6:	490c      	ldr	r1, [pc, #48]	; (25108 <z_timer_expiration_handler+0x48>)
   250d8:	f7ff fd1e 	bl	24b18 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   250dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   250de:	3301      	adds	r3, #1
   250e0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   250e2:	6a23      	ldr	r3, [r4, #32]
   250e4:	b10b      	cbz	r3, 250ea <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   250e6:	4620      	mov	r0, r4
   250e8:	4798      	blx	r3
	return list->head == list;
   250ea:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   250ee:	42a5      	cmp	r5, r4
   250f0:	d008      	beq.n	25104 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   250f2:	b13d      	cbz	r5, 25104 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   250f4:	4628      	mov	r0, r5
   250f6:	f7fe f8f1 	bl	232dc <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   250fa:	4628      	mov	r0, r5
   250fc:	f7fe fb5a 	bl	237b4 <z_ready_thread>
   25100:	2300      	movs	r3, #0
   25102:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   25104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25106:	bf00      	nop
   25108:	000250c1 	.word	0x000250c1

0002510c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2510c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   25110:	4619      	mov	r1, r3
   25112:	4606      	mov	r6, r0
   25114:	4610      	mov	r0, r2
   25116:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2511a:	1c4c      	adds	r4, r1, #1
   2511c:	bf08      	it	eq
   2511e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   25122:	4680      	mov	r8, r0
   25124:	4689      	mov	r9, r1
   25126:	d047      	beq.n	251b8 <z_impl_k_timer_start+0xac>
   25128:	4614      	mov	r4, r2
   2512a:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   2512c:	ea54 0305 	orrs.w	r3, r4, r5
   25130:	d016      	beq.n	25160 <z_impl_k_timer_start+0x54>
   25132:	f06f 0301 	mvn.w	r3, #1
   25136:	ebb3 0a02 	subs.w	sl, r3, r2
   2513a:	f04f 33ff 	mov.w	r3, #4294967295
   2513e:	eb63 0b05 	sbc.w	fp, r3, r5
   25142:	f1ba 0f00 	cmp.w	sl, #0
   25146:	f17b 0300 	sbcs.w	r3, fp, #0
   2514a:	da09      	bge.n	25160 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   2514c:	f112 34ff 	adds.w	r4, r2, #4294967295
   25150:	f145 35ff 	adc.w	r5, r5, #4294967295
   25154:	2c01      	cmp	r4, #1
   25156:	f175 0300 	sbcs.w	r3, r5, #0
   2515a:	bfbc      	itt	lt
   2515c:	2401      	movlt	r4, #1
   2515e:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   25160:	f06f 0301 	mvn.w	r3, #1
   25164:	1a1b      	subs	r3, r3, r0
   25166:	9300      	str	r3, [sp, #0]
   25168:	f04f 33ff 	mov.w	r3, #4294967295
   2516c:	eb63 0301 	sbc.w	r3, r3, r1
   25170:	9301      	str	r3, [sp, #4]
   25172:	e9dd 2300 	ldrd	r2, r3, [sp]
   25176:	2a00      	cmp	r2, #0
   25178:	f173 0300 	sbcs.w	r3, r3, #0
   2517c:	da0c      	bge.n	25198 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2517e:	f110 38ff 	adds.w	r8, r0, #4294967295
   25182:	f141 39ff 	adc.w	r9, r1, #4294967295
   25186:	f1b8 0f00 	cmp.w	r8, #0
   2518a:	f179 0300 	sbcs.w	r3, r9, #0
   2518e:	bfbc      	itt	lt
   25190:	f04f 0800 	movlt.w	r8, #0
   25194:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   25198:	4630      	mov	r0, r6
   2519a:	f7ff fd91 	bl	24cc0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2519e:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   251a0:	4642      	mov	r2, r8
	timer->status = 0U;
   251a2:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   251a4:	4630      	mov	r0, r6
   251a6:	464b      	mov	r3, r9
   251a8:	4905      	ldr	r1, [pc, #20]	; (251c0 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   251aa:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   251ae:	b002      	add	sp, #8
   251b0:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   251b4:	f7ff bcb0 	b.w	24b18 <z_add_timeout>
}
   251b8:	b002      	add	sp, #8
   251ba:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   251be:	bf00      	nop
   251c0:	000250c1 	.word	0x000250c1

000251c4 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, uint32_t state)
{
   251c4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   251c6:	6883      	ldr	r3, [r0, #8]
{
   251c8:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   251ca:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   251cc:	b964      	cbnz	r4, 251e8 <k_poll_poller_cb+0x24>
   251ce:	4919      	ldr	r1, [pc, #100]	; (25234 <k_poll_poller_cb+0x70>)
   251d0:	23df      	movs	r3, #223	; 0xdf
   251d2:	4a19      	ldr	r2, [pc, #100]	; (25238 <k_poll_poller_cb+0x74>)
   251d4:	4819      	ldr	r0, [pc, #100]	; (2523c <k_poll_poller_cb+0x78>)
   251d6:	f006 ff12 	bl	2bffe <printk>
   251da:	4819      	ldr	r0, [pc, #100]	; (25240 <k_poll_poller_cb+0x7c>)
   251dc:	f006 ff0f 	bl	2bffe <printk>
   251e0:	21df      	movs	r1, #223	; 0xdf
   251e2:	4815      	ldr	r0, [pc, #84]	; (25238 <k_poll_poller_cb+0x74>)
   251e4:	f007 f928 	bl	2c438 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   251e8:	7b63      	ldrb	r3, [r4, #13]
   251ea:	079a      	lsls	r2, r3, #30
   251ec:	d515      	bpl.n	2521a <k_poll_poller_cb+0x56>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   251ee:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   251f2:	f04f 31ff 	mov.w	r1, #4294967295
   251f6:	f06f 0001 	mvn.w	r0, #1
   251fa:	428b      	cmp	r3, r1
   251fc:	bf08      	it	eq
   251fe:	4282      	cmpeq	r2, r0
   25200:	d014      	beq.n	2522c <k_poll_poller_cb+0x68>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   25202:	4620      	mov	r0, r4
   25204:	f7fe f99c 	bl	23540 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   25208:	2d08      	cmp	r5, #8
   2520a:	bf0c      	ite	eq
   2520c:	f06f 0303 	mvneq.w	r3, #3
   25210:	2300      	movne	r3, #0
   25212:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25214:	7b63      	ldrb	r3, [r4, #13]
   25216:	06db      	lsls	r3, r3, #27
   25218:	d001      	beq.n	2521e <k_poll_poller_cb+0x5a>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   2521a:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   2521c:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   2521e:	69a5      	ldr	r5, [r4, #24]
   25220:	2d00      	cmp	r5, #0
   25222:	d1fa      	bne.n	2521a <k_poll_poller_cb+0x56>
	z_ready_thread(thread);
   25224:	4620      	mov	r0, r4
   25226:	f7fe fac5 	bl	237b4 <z_ready_thread>
	return 0;
   2522a:	e7f6      	b.n	2521a <k_poll_poller_cb+0x56>
		return -EAGAIN;
   2522c:	f06f 000a 	mvn.w	r0, #10
   25230:	e7f4      	b.n	2521c <k_poll_poller_cb+0x58>
   25232:	bf00      	nop
   25234:	00032cc2 	.word	0x00032cc2
   25238:	00032ca1 	.word	0x00032ca1
   2523c:	0002ff0d 	.word	0x0002ff0d
   25240:	00032cd8 	.word	0x00032cd8

00025244 <clear_event_registrations>:
{
   25244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25248:	2414      	movs	r4, #20
   2524a:	4680      	mov	r8, r0
   2524c:	4616      	mov	r6, r2
	while (num_events--) {
   2524e:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   25252:	4d48      	ldr	r5, [pc, #288]	; (25374 <clear_event_registrations+0x130>)
   25254:	f8df 9158 	ldr.w	r9, [pc, #344]	; 253b0 <clear_event_registrations+0x16c>
   25258:	4f47      	ldr	r7, [pc, #284]	; (25378 <clear_event_registrations+0x134>)
	while (num_events--) {
   2525a:	4544      	cmp	r4, r8
   2525c:	d101      	bne.n	25262 <clear_event_registrations+0x1e>
}
   2525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   25262:	2300      	movs	r3, #0
   25264:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   25268:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2526c:	f003 030f 	and.w	r3, r3, #15
   25270:	2b04      	cmp	r3, #4
   25272:	d83d      	bhi.n	252f0 <clear_event_registrations+0xac>
   25274:	e8df f003 	tbb	[pc, r3]
   25278:	3c032d49 	.word	0x3c032d49
   2527c:	1e          	.byte	0x1e
   2527d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2527e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25282:	b963      	cbnz	r3, 2529e <clear_event_registrations+0x5a>
   25284:	493d      	ldr	r1, [pc, #244]	; (2537c <clear_event_registrations+0x138>)
   25286:	2395      	movs	r3, #149	; 0x95
   25288:	462a      	mov	r2, r5
   2528a:	4638      	mov	r0, r7
   2528c:	f006 feb7 	bl	2bffe <printk>
   25290:	483b      	ldr	r0, [pc, #236]	; (25380 <clear_event_registrations+0x13c>)
   25292:	f006 feb4 	bl	2bffe <printk>
   25296:	2195      	movs	r1, #149	; 0x95
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25298:	4628      	mov	r0, r5
   2529a:	f007 f8cd 	bl	2c438 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2529e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   252a2:	b393      	cbz	r3, 2530a <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   252a4:	f854 2c10 	ldr.w	r2, [r4, #-16]
   252a8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   252aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   252ac:	2300      	movs	r3, #0
	node->prev = NULL;
   252ae:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   252b2:	e02a      	b.n	2530a <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   252b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   252b8:	2b00      	cmp	r3, #0
   252ba:	d1f0      	bne.n	2529e <clear_event_registrations+0x5a>
   252bc:	4931      	ldr	r1, [pc, #196]	; (25384 <clear_event_registrations+0x140>)
   252be:	2399      	movs	r3, #153	; 0x99
   252c0:	462a      	mov	r2, r5
   252c2:	4638      	mov	r0, r7
   252c4:	f006 fe9b 	bl	2bffe <printk>
   252c8:	482f      	ldr	r0, [pc, #188]	; (25388 <clear_event_registrations+0x144>)
   252ca:	f006 fe98 	bl	2bffe <printk>
   252ce:	2199      	movs	r1, #153	; 0x99
   252d0:	e7e2      	b.n	25298 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   252d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   252d6:	2b00      	cmp	r3, #0
   252d8:	d1e1      	bne.n	2529e <clear_event_registrations+0x5a>
   252da:	492c      	ldr	r1, [pc, #176]	; (2538c <clear_event_registrations+0x148>)
   252dc:	239d      	movs	r3, #157	; 0x9d
   252de:	462a      	mov	r2, r5
   252e0:	4638      	mov	r0, r7
   252e2:	f006 fe8c 	bl	2bffe <printk>
   252e6:	482a      	ldr	r0, [pc, #168]	; (25390 <clear_event_registrations+0x14c>)
   252e8:	f006 fe89 	bl	2bffe <printk>
   252ec:	219d      	movs	r1, #157	; 0x9d
   252ee:	e7d3      	b.n	25298 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   252f0:	4649      	mov	r1, r9
   252f2:	23a4      	movs	r3, #164	; 0xa4
   252f4:	462a      	mov	r2, r5
   252f6:	4638      	mov	r0, r7
   252f8:	f006 fe81 	bl	2bffe <printk>
   252fc:	4825      	ldr	r0, [pc, #148]	; (25394 <clear_event_registrations+0x150>)
   252fe:	f006 fe7e 	bl	2bffe <printk>
   25302:	21a4      	movs	r1, #164	; 0xa4
   25304:	4628      	mov	r0, r5
   25306:	f007 f897 	bl	2c438 <assert_post_action>
   2530a:	4823      	ldr	r0, [pc, #140]	; (25398 <clear_event_registrations+0x154>)
   2530c:	f7ff faee 	bl	248ec <z_spin_unlock_valid>
   25310:	b968      	cbnz	r0, 2532e <clear_event_registrations+0xea>
   25312:	2384      	movs	r3, #132	; 0x84
   25314:	4638      	mov	r0, r7
   25316:	4a21      	ldr	r2, [pc, #132]	; (2539c <clear_event_registrations+0x158>)
   25318:	4921      	ldr	r1, [pc, #132]	; (253a0 <clear_event_registrations+0x15c>)
   2531a:	f006 fe70 	bl	2bffe <printk>
   2531e:	491e      	ldr	r1, [pc, #120]	; (25398 <clear_event_registrations+0x154>)
   25320:	4820      	ldr	r0, [pc, #128]	; (253a4 <clear_event_registrations+0x160>)
   25322:	f006 fe6c 	bl	2bffe <printk>
   25326:	2184      	movs	r1, #132	; 0x84
   25328:	481c      	ldr	r0, [pc, #112]	; (2539c <clear_event_registrations+0x158>)
   2532a:	f007 f885 	bl	2c438 <assert_post_action>
   2532e:	f386 8811 	msr	BASEPRI, r6
   25332:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   25336:	f04f 0320 	mov.w	r3, #32
   2533a:	f3ef 8611 	mrs	r6, BASEPRI
   2533e:	f383 8811 	msr	BASEPRI, r3
   25342:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25346:	4814      	ldr	r0, [pc, #80]	; (25398 <clear_event_registrations+0x154>)
   25348:	f7ff fac2 	bl	248d0 <z_spin_lock_valid>
   2534c:	b968      	cbnz	r0, 2536a <clear_event_registrations+0x126>
   2534e:	235c      	movs	r3, #92	; 0x5c
   25350:	4638      	mov	r0, r7
   25352:	4a12      	ldr	r2, [pc, #72]	; (2539c <clear_event_registrations+0x158>)
   25354:	4914      	ldr	r1, [pc, #80]	; (253a8 <clear_event_registrations+0x164>)
   25356:	f006 fe52 	bl	2bffe <printk>
   2535a:	490f      	ldr	r1, [pc, #60]	; (25398 <clear_event_registrations+0x154>)
   2535c:	4813      	ldr	r0, [pc, #76]	; (253ac <clear_event_registrations+0x168>)
   2535e:	f006 fe4e 	bl	2bffe <printk>
   25362:	215c      	movs	r1, #92	; 0x5c
   25364:	480d      	ldr	r0, [pc, #52]	; (2539c <clear_event_registrations+0x158>)
   25366:	f007 f867 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2536a:	480b      	ldr	r0, [pc, #44]	; (25398 <clear_event_registrations+0x154>)
   2536c:	f7ff face 	bl	2490c <z_spin_lock_set_owner>
	return k;
   25370:	3c14      	subs	r4, #20
   25372:	e772      	b.n	2525a <clear_event_registrations+0x16>
   25374:	00032ca1 	.word	0x00032ca1
   25378:	0002ff0d 	.word	0x0002ff0d
   2537c:	00032cf7 	.word	0x00032cf7
   25380:	00032d11 	.word	0x00032d11
   25384:	00032d26 	.word	0x00032d26
   25388:	00032d42 	.word	0x00032d42
   2538c:	00032d53 	.word	0x00032d53
   25390:	00032d70 	.word	0x00032d70
   25394:	00032d87 	.word	0x00032d87
   25398:	20021e28 	.word	0x20021e28
   2539c:	0002ffdd 	.word	0x0002ffdd
   253a0:	00030003 	.word	0x00030003
   253a4:	0003001a 	.word	0x0003001a
   253a8:	0003002f 	.word	0x0003002f
   253ac:	00030044 	.word	0x00030044
   253b0:	00032a36 	.word	0x00032a36

000253b4 <register_events>:
{
   253b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   253b8:	2700      	movs	r7, #0
{
   253ba:	4615      	mov	r5, r2
   253bc:	4604      	mov	r4, r0
	int events_registered = 0;
   253be:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   253c0:	4e6a      	ldr	r6, [pc, #424]	; (2556c <register_events+0x1b8>)
   253c2:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 255a8 <register_events+0x1f4>
   253c6:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 255ac <register_events+0x1f8>
{
   253ca:	9100      	str	r1, [sp, #0]
   253cc:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   253ce:	9b00      	ldr	r3, [sp, #0]
   253d0:	429f      	cmp	r7, r3
   253d2:	db03      	blt.n	253dc <register_events+0x28>
}
   253d4:	4648      	mov	r0, r9
   253d6:	b003      	add	sp, #12
   253d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253dc:	f04f 0320 	mov.w	r3, #32
   253e0:	f3ef 8b11 	mrs	fp, BASEPRI
   253e4:	f383 8811 	msr	BASEPRI, r3
   253e8:	f3bf 8f6f 	isb	sy
   253ec:	4630      	mov	r0, r6
   253ee:	f7ff fa6f 	bl	248d0 <z_spin_lock_valid>
   253f2:	b968      	cbnz	r0, 25410 <register_events+0x5c>
   253f4:	235c      	movs	r3, #92	; 0x5c
   253f6:	4642      	mov	r2, r8
   253f8:	4651      	mov	r1, sl
   253fa:	485d      	ldr	r0, [pc, #372]	; (25570 <register_events+0x1bc>)
   253fc:	f006 fdff 	bl	2bffe <printk>
   25400:	4631      	mov	r1, r6
   25402:	485c      	ldr	r0, [pc, #368]	; (25574 <register_events+0x1c0>)
   25404:	f006 fdfb 	bl	2bffe <printk>
   25408:	215c      	movs	r1, #92	; 0x5c
   2540a:	4640      	mov	r0, r8
   2540c:	f007 f814 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   25410:	4630      	mov	r0, r6
   25412:	f7ff fa7b 	bl	2490c <z_spin_lock_set_owner>
	switch (event->type) {
   25416:	7b63      	ldrb	r3, [r4, #13]
   25418:	f003 030f 	and.w	r3, r3, #15
   2541c:	2b04      	cmp	r3, #4
   2541e:	d844      	bhi.n	254aa <register_events+0xf6>
   25420:	e8df f003 	tbb	[pc, r3]
   25424:	43033d2d 	.word	0x43033d2d
   25428:	2a          	.byte	0x2a
   25429:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   2542a:	6923      	ldr	r3, [r4, #16]
   2542c:	689b      	ldr	r3, [r3, #8]
   2542e:	b333      	cbz	r3, 2547e <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   25430:	2202      	movs	r2, #2
	event->poller = NULL;
   25432:	2100      	movs	r1, #0
	event->state |= state;
   25434:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   25436:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   25438:	f3c3 3004 	ubfx	r0, r3, #12, #5
   2543c:	4302      	orrs	r2, r0
   2543e:	f362 3310 	bfi	r3, r2, #12, #5
   25442:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   25444:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25446:	4630      	mov	r0, r6
   25448:	f7ff fa50 	bl	248ec <z_spin_unlock_valid>
   2544c:	b968      	cbnz	r0, 2546a <register_events+0xb6>
   2544e:	2384      	movs	r3, #132	; 0x84
   25450:	4642      	mov	r2, r8
   25452:	4949      	ldr	r1, [pc, #292]	; (25578 <register_events+0x1c4>)
   25454:	4846      	ldr	r0, [pc, #280]	; (25570 <register_events+0x1bc>)
   25456:	f006 fdd2 	bl	2bffe <printk>
   2545a:	4631      	mov	r1, r6
   2545c:	4847      	ldr	r0, [pc, #284]	; (2557c <register_events+0x1c8>)
   2545e:	f006 fdce 	bl	2bffe <printk>
   25462:	2184      	movs	r1, #132	; 0x84
   25464:	4640      	mov	r0, r8
   25466:	f006 ffe7 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   2546a:	f38b 8811 	msr	BASEPRI, fp
   2546e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   25472:	3701      	adds	r7, #1
   25474:	3414      	adds	r4, #20
   25476:	e7aa      	b.n	253ce <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   25478:	6923      	ldr	r3, [r4, #16]
   2547a:	681b      	ldr	r3, [r3, #0]
   2547c:	bb33      	cbnz	r3, 254cc <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   2547e:	9b01      	ldr	r3, [sp, #4]
   25480:	2b00      	cmp	r3, #0
   25482:	d1e0      	bne.n	25446 <register_events+0x92>
   25484:	782b      	ldrb	r3, [r5, #0]
   25486:	2b00      	cmp	r3, #0
   25488:	d0dd      	beq.n	25446 <register_events+0x92>
	switch (event->type) {
   2548a:	7b63      	ldrb	r3, [r4, #13]
   2548c:	f003 030f 	and.w	r3, r3, #15
   25490:	2b04      	cmp	r3, #4
   25492:	d85d      	bhi.n	25550 <register_events+0x19c>
   25494:	e8df f003 	tbb	[pc, r3]
   25498:	5c1c4931 	.word	0x5c1c4931
   2549c:	35          	.byte	0x35
   2549d:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2549e:	6923      	ldr	r3, [r4, #16]
   254a0:	689b      	ldr	r3, [r3, #8]
   254a2:	2b00      	cmp	r3, #0
   254a4:	d0eb      	beq.n	2547e <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   254a6:	2201      	movs	r2, #1
   254a8:	e7c3      	b.n	25432 <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   254aa:	234f      	movs	r3, #79	; 0x4f
   254ac:	4a34      	ldr	r2, [pc, #208]	; (25580 <register_events+0x1cc>)
   254ae:	4935      	ldr	r1, [pc, #212]	; (25584 <register_events+0x1d0>)
   254b0:	482f      	ldr	r0, [pc, #188]	; (25570 <register_events+0x1bc>)
   254b2:	f006 fda4 	bl	2bffe <printk>
   254b6:	7b61      	ldrb	r1, [r4, #13]
   254b8:	4833      	ldr	r0, [pc, #204]	; (25588 <register_events+0x1d4>)
   254ba:	f001 010f 	and.w	r1, r1, #15
   254be:	f006 fd9e 	bl	2bffe <printk>
   254c2:	214f      	movs	r1, #79	; 0x4f
   254c4:	482e      	ldr	r0, [pc, #184]	; (25580 <register_events+0x1cc>)
   254c6:	f006 ffb7 	bl	2c438 <assert_post_action>
		break;
   254ca:	e7d8      	b.n	2547e <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   254cc:	2204      	movs	r2, #4
   254ce:	e7b0      	b.n	25432 <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   254d0:	6923      	ldr	r3, [r4, #16]
   254d2:	b963      	cbnz	r3, 254ee <register_events+0x13a>
   254d4:	492d      	ldr	r1, [pc, #180]	; (2558c <register_events+0x1d8>)
   254d6:	2374      	movs	r3, #116	; 0x74
   254d8:	4a29      	ldr	r2, [pc, #164]	; (25580 <register_events+0x1cc>)
   254da:	4825      	ldr	r0, [pc, #148]	; (25570 <register_events+0x1bc>)
   254dc:	f006 fd8f 	bl	2bffe <printk>
   254e0:	482b      	ldr	r0, [pc, #172]	; (25590 <register_events+0x1dc>)
   254e2:	f006 fd8c 	bl	2bffe <printk>
   254e6:	2174      	movs	r1, #116	; 0x74
   254e8:	4825      	ldr	r0, [pc, #148]	; (25580 <register_events+0x1cc>)
   254ea:	f006 ffa5 	bl	2c438 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   254ee:	462a      	mov	r2, r5
   254f0:	4621      	mov	r1, r4
   254f2:	6920      	ldr	r0, [r4, #16]
   254f4:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   254f6:	f009 f98f 	bl	2e818 <add_event>
	event->poller = poller;
   254fa:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   254fc:	f109 0901 	add.w	r9, r9, #1
   25500:	e7a1      	b.n	25446 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25502:	6923      	ldr	r3, [r4, #16]
   25504:	b963      	cbnz	r3, 25520 <register_events+0x16c>
   25506:	4923      	ldr	r1, [pc, #140]	; (25594 <register_events+0x1e0>)
   25508:	2378      	movs	r3, #120	; 0x78
   2550a:	4a1d      	ldr	r2, [pc, #116]	; (25580 <register_events+0x1cc>)
   2550c:	4818      	ldr	r0, [pc, #96]	; (25570 <register_events+0x1bc>)
   2550e:	f006 fd76 	bl	2bffe <printk>
   25512:	4821      	ldr	r0, [pc, #132]	; (25598 <register_events+0x1e4>)
   25514:	f006 fd73 	bl	2bffe <printk>
   25518:	2178      	movs	r1, #120	; 0x78
   2551a:	4819      	ldr	r0, [pc, #100]	; (25580 <register_events+0x1cc>)
   2551c:	f006 ff8c 	bl	2c438 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   25520:	6920      	ldr	r0, [r4, #16]
   25522:	462a      	mov	r2, r5
   25524:	4621      	mov	r1, r4
   25526:	3014      	adds	r0, #20
   25528:	e7e5      	b.n	254f6 <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2552a:	6923      	ldr	r3, [r4, #16]
   2552c:	b963      	cbnz	r3, 25548 <register_events+0x194>
   2552e:	491b      	ldr	r1, [pc, #108]	; (2559c <register_events+0x1e8>)
   25530:	237c      	movs	r3, #124	; 0x7c
   25532:	4a13      	ldr	r2, [pc, #76]	; (25580 <register_events+0x1cc>)
   25534:	480e      	ldr	r0, [pc, #56]	; (25570 <register_events+0x1bc>)
   25536:	f006 fd62 	bl	2bffe <printk>
   2553a:	4819      	ldr	r0, [pc, #100]	; (255a0 <register_events+0x1ec>)
   2553c:	f006 fd5f 	bl	2bffe <printk>
   25540:	217c      	movs	r1, #124	; 0x7c
   25542:	480f      	ldr	r0, [pc, #60]	; (25580 <register_events+0x1cc>)
   25544:	f006 ff78 	bl	2c438 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   25548:	462a      	mov	r2, r5
   2554a:	4621      	mov	r1, r4
   2554c:	6920      	ldr	r0, [r4, #16]
   2554e:	e7d2      	b.n	254f6 <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   25550:	2383      	movs	r3, #131	; 0x83
   25552:	4a0b      	ldr	r2, [pc, #44]	; (25580 <register_events+0x1cc>)
   25554:	490b      	ldr	r1, [pc, #44]	; (25584 <register_events+0x1d0>)
   25556:	4806      	ldr	r0, [pc, #24]	; (25570 <register_events+0x1bc>)
   25558:	f006 fd51 	bl	2bffe <printk>
   2555c:	4811      	ldr	r0, [pc, #68]	; (255a4 <register_events+0x1f0>)
   2555e:	f006 fd4e 	bl	2bffe <printk>
   25562:	2183      	movs	r1, #131	; 0x83
   25564:	4806      	ldr	r0, [pc, #24]	; (25580 <register_events+0x1cc>)
   25566:	f006 ff67 	bl	2c438 <assert_post_action>
		break;
   2556a:	e7c6      	b.n	254fa <register_events+0x146>
   2556c:	20021e28 	.word	0x20021e28
   25570:	0002ff0d 	.word	0x0002ff0d
   25574:	00030044 	.word	0x00030044
   25578:	00030003 	.word	0x00030003
   2557c:	0003001a 	.word	0x0003001a
   25580:	00032ca1 	.word	0x00032ca1
   25584:	00032a36 	.word	0x00032a36
   25588:	00032d9d 	.word	0x00032d9d
   2558c:	00032cf7 	.word	0x00032cf7
   25590:	00032d11 	.word	0x00032d11
   25594:	00032d26 	.word	0x00032d26
   25598:	00032d42 	.word	0x00032d42
   2559c:	00032d53 	.word	0x00032d53
   255a0:	00032d70 	.word	0x00032d70
   255a4:	00032d87 	.word	0x00032d87
   255a8:	0002ffdd 	.word	0x0002ffdd
   255ac:	0003002f 	.word	0x0003002f

000255b0 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   255b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   255b4:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   255b6:	2301      	movs	r3, #1
{
   255b8:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   255ba:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   255be:	4b73      	ldr	r3, [pc, #460]	; (2578c <z_impl_k_poll+0x1dc>)
{
   255c0:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   255c2:	689b      	ldr	r3, [r3, #8]
{
   255c4:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   255c6:	9306      	str	r3, [sp, #24]
   255c8:	4b71      	ldr	r3, [pc, #452]	; (25790 <z_impl_k_poll+0x1e0>)
{
   255ca:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   255cc:	9307      	str	r3, [sp, #28]
   255ce:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   255d2:	b163      	cbz	r3, 255ee <z_impl_k_poll+0x3e>
   255d4:	496f      	ldr	r1, [pc, #444]	; (25794 <z_impl_k_poll+0x1e4>)
   255d6:	23ff      	movs	r3, #255	; 0xff
   255d8:	4a6f      	ldr	r2, [pc, #444]	; (25798 <z_impl_k_poll+0x1e8>)
   255da:	4870      	ldr	r0, [pc, #448]	; (2579c <z_impl_k_poll+0x1ec>)
   255dc:	f006 fd0f 	bl	2bffe <printk>
   255e0:	486f      	ldr	r0, [pc, #444]	; (257a0 <z_impl_k_poll+0x1f0>)
   255e2:	f006 fd0c 	bl	2bffe <printk>
   255e6:	21ff      	movs	r1, #255	; 0xff
   255e8:	486b      	ldr	r0, [pc, #428]	; (25798 <z_impl_k_poll+0x1e8>)
   255ea:	f006 ff25 	bl	2c438 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   255ee:	b974      	cbnz	r4, 2560e <z_impl_k_poll+0x5e>
   255f0:	496c      	ldr	r1, [pc, #432]	; (257a4 <z_impl_k_poll+0x1f4>)
   255f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   255f6:	4a68      	ldr	r2, [pc, #416]	; (25798 <z_impl_k_poll+0x1e8>)
   255f8:	4868      	ldr	r0, [pc, #416]	; (2579c <z_impl_k_poll+0x1ec>)
   255fa:	f006 fd00 	bl	2bffe <printk>
   255fe:	486a      	ldr	r0, [pc, #424]	; (257a8 <z_impl_k_poll+0x1f8>)
   25600:	f006 fcfd 	bl	2bffe <printk>
   25604:	f44f 7180 	mov.w	r1, #256	; 0x100
   25608:	4863      	ldr	r0, [pc, #396]	; (25798 <z_impl_k_poll+0x1e8>)
   2560a:	f006 ff15 	bl	2c438 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2560e:	2d00      	cmp	r5, #0
   25610:	da0e      	bge.n	25630 <z_impl_k_poll+0x80>
   25612:	4966      	ldr	r1, [pc, #408]	; (257ac <z_impl_k_poll+0x1fc>)
   25614:	f240 1301 	movw	r3, #257	; 0x101
   25618:	4a5f      	ldr	r2, [pc, #380]	; (25798 <z_impl_k_poll+0x1e8>)
   2561a:	4860      	ldr	r0, [pc, #384]	; (2579c <z_impl_k_poll+0x1ec>)
   2561c:	f006 fcef 	bl	2bffe <printk>
   25620:	4863      	ldr	r0, [pc, #396]	; (257b0 <z_impl_k_poll+0x200>)
   25622:	f006 fcec 	bl	2bffe <printk>
   25626:	f240 1101 	movw	r1, #257	; 0x101
   2562a:	485b      	ldr	r0, [pc, #364]	; (25798 <z_impl_k_poll+0x1e8>)
   2562c:	f006 ff04 	bl	2c438 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   25630:	ea56 0307 	orrs.w	r3, r6, r7
   25634:	bf0c      	ite	eq
   25636:	2301      	moveq	r3, #1
   25638:	2300      	movne	r3, #0
   2563a:	4629      	mov	r1, r5
   2563c:	4620      	mov	r0, r4
   2563e:	aa05      	add	r2, sp, #20
   25640:	f7ff feb8 	bl	253b4 <register_events>
   25644:	4680      	mov	r8, r0
	__asm__ volatile(
   25646:	f04f 0320 	mov.w	r3, #32
   2564a:	f3ef 8511 	mrs	r5, BASEPRI
   2564e:	f383 8811 	msr	BASEPRI, r3
   25652:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25656:	4857      	ldr	r0, [pc, #348]	; (257b4 <z_impl_k_poll+0x204>)
   25658:	f7ff f93a 	bl	248d0 <z_spin_lock_valid>
   2565c:	b968      	cbnz	r0, 2567a <z_impl_k_poll+0xca>
   2565e:	235c      	movs	r3, #92	; 0x5c
   25660:	4a55      	ldr	r2, [pc, #340]	; (257b8 <z_impl_k_poll+0x208>)
   25662:	4956      	ldr	r1, [pc, #344]	; (257bc <z_impl_k_poll+0x20c>)
   25664:	484d      	ldr	r0, [pc, #308]	; (2579c <z_impl_k_poll+0x1ec>)
   25666:	f006 fcca 	bl	2bffe <printk>
   2566a:	4952      	ldr	r1, [pc, #328]	; (257b4 <z_impl_k_poll+0x204>)
   2566c:	4854      	ldr	r0, [pc, #336]	; (257c0 <z_impl_k_poll+0x210>)
   2566e:	f006 fcc6 	bl	2bffe <printk>
   25672:	215c      	movs	r1, #92	; 0x5c
   25674:	4850      	ldr	r0, [pc, #320]	; (257b8 <z_impl_k_poll+0x208>)
   25676:	f006 fedf 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2567a:	484e      	ldr	r0, [pc, #312]	; (257b4 <z_impl_k_poll+0x204>)
   2567c:	f7ff f946 	bl	2490c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   25680:	f89d 3014 	ldrb.w	r3, [sp, #20]
   25684:	b9fb      	cbnz	r3, 256c6 <z_impl_k_poll+0x116>
		clear_event_registrations(events, events_registered, key);
   25686:	4620      	mov	r0, r4
   25688:	462a      	mov	r2, r5
   2568a:	4641      	mov	r1, r8
   2568c:	f7ff fdda 	bl	25244 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25690:	4848      	ldr	r0, [pc, #288]	; (257b4 <z_impl_k_poll+0x204>)
   25692:	f7ff f92b 	bl	248ec <z_spin_unlock_valid>
   25696:	b968      	cbnz	r0, 256b4 <z_impl_k_poll+0x104>
   25698:	2384      	movs	r3, #132	; 0x84
   2569a:	4a47      	ldr	r2, [pc, #284]	; (257b8 <z_impl_k_poll+0x208>)
   2569c:	4949      	ldr	r1, [pc, #292]	; (257c4 <z_impl_k_poll+0x214>)
   2569e:	483f      	ldr	r0, [pc, #252]	; (2579c <z_impl_k_poll+0x1ec>)
   256a0:	f006 fcad 	bl	2bffe <printk>
   256a4:	4943      	ldr	r1, [pc, #268]	; (257b4 <z_impl_k_poll+0x204>)
   256a6:	4848      	ldr	r0, [pc, #288]	; (257c8 <z_impl_k_poll+0x218>)
   256a8:	f006 fca9 	bl	2bffe <printk>
   256ac:	2184      	movs	r1, #132	; 0x84
   256ae:	4842      	ldr	r0, [pc, #264]	; (257b8 <z_impl_k_poll+0x208>)
   256b0:	f006 fec2 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   256b4:	f385 8811 	msr	BASEPRI, r5
   256b8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   256bc:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   256be:	4628      	mov	r0, r5
   256c0:	b008      	add	sp, #32
   256c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   256c6:	2300      	movs	r3, #0
   256c8:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   256cc:	ea56 0307 	orrs.w	r3, r6, r7
   256d0:	d118      	bne.n	25704 <z_impl_k_poll+0x154>
   256d2:	4838      	ldr	r0, [pc, #224]	; (257b4 <z_impl_k_poll+0x204>)
   256d4:	f7ff f90a 	bl	248ec <z_spin_unlock_valid>
   256d8:	b968      	cbnz	r0, 256f6 <z_impl_k_poll+0x146>
   256da:	2384      	movs	r3, #132	; 0x84
   256dc:	4a36      	ldr	r2, [pc, #216]	; (257b8 <z_impl_k_poll+0x208>)
   256de:	4939      	ldr	r1, [pc, #228]	; (257c4 <z_impl_k_poll+0x214>)
   256e0:	482e      	ldr	r0, [pc, #184]	; (2579c <z_impl_k_poll+0x1ec>)
   256e2:	f006 fc8c 	bl	2bffe <printk>
   256e6:	4933      	ldr	r1, [pc, #204]	; (257b4 <z_impl_k_poll+0x204>)
   256e8:	4837      	ldr	r0, [pc, #220]	; (257c8 <z_impl_k_poll+0x218>)
   256ea:	f006 fc88 	bl	2bffe <printk>
   256ee:	2184      	movs	r1, #132	; 0x84
   256f0:	4831      	ldr	r0, [pc, #196]	; (257b8 <z_impl_k_poll+0x208>)
   256f2:	f006 fea1 	bl	2c438 <assert_post_action>
   256f6:	f385 8811 	msr	BASEPRI, r5
   256fa:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   256fe:	f06f 050a 	mvn.w	r5, #10
   25702:	e7dc      	b.n	256be <z_impl_k_poll+0x10e>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25704:	4629      	mov	r1, r5
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   25706:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25708:	e9cd 6700 	strd	r6, r7, [sp]
   2570c:	4829      	ldr	r0, [pc, #164]	; (257b4 <z_impl_k_poll+0x204>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2570e:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25712:	f7fe fbe1 	bl	23ed8 <z_pend_curr>
   25716:	4605      	mov	r5, r0
	__asm__ volatile(
   25718:	f04f 0320 	mov.w	r3, #32
   2571c:	f3ef 8611 	mrs	r6, BASEPRI
   25720:	f383 8811 	msr	BASEPRI, r3
   25724:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25728:	4822      	ldr	r0, [pc, #136]	; (257b4 <z_impl_k_poll+0x204>)
   2572a:	f7ff f8d1 	bl	248d0 <z_spin_lock_valid>
   2572e:	b968      	cbnz	r0, 2574c <z_impl_k_poll+0x19c>
   25730:	235c      	movs	r3, #92	; 0x5c
   25732:	4a21      	ldr	r2, [pc, #132]	; (257b8 <z_impl_k_poll+0x208>)
   25734:	4921      	ldr	r1, [pc, #132]	; (257bc <z_impl_k_poll+0x20c>)
   25736:	4819      	ldr	r0, [pc, #100]	; (2579c <z_impl_k_poll+0x1ec>)
   25738:	f006 fc61 	bl	2bffe <printk>
   2573c:	491d      	ldr	r1, [pc, #116]	; (257b4 <z_impl_k_poll+0x204>)
   2573e:	4820      	ldr	r0, [pc, #128]	; (257c0 <z_impl_k_poll+0x210>)
   25740:	f006 fc5d 	bl	2bffe <printk>
   25744:	215c      	movs	r1, #92	; 0x5c
   25746:	481c      	ldr	r0, [pc, #112]	; (257b8 <z_impl_k_poll+0x208>)
   25748:	f006 fe76 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   2574c:	4819      	ldr	r0, [pc, #100]	; (257b4 <z_impl_k_poll+0x204>)
   2574e:	f7ff f8dd 	bl	2490c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   25752:	4620      	mov	r0, r4
   25754:	4632      	mov	r2, r6
   25756:	4641      	mov	r1, r8
   25758:	f7ff fd74 	bl	25244 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2575c:	4815      	ldr	r0, [pc, #84]	; (257b4 <z_impl_k_poll+0x204>)
   2575e:	f7ff f8c5 	bl	248ec <z_spin_unlock_valid>
   25762:	b968      	cbnz	r0, 25780 <z_impl_k_poll+0x1d0>
   25764:	2384      	movs	r3, #132	; 0x84
   25766:	4a14      	ldr	r2, [pc, #80]	; (257b8 <z_impl_k_poll+0x208>)
   25768:	4916      	ldr	r1, [pc, #88]	; (257c4 <z_impl_k_poll+0x214>)
   2576a:	480c      	ldr	r0, [pc, #48]	; (2579c <z_impl_k_poll+0x1ec>)
   2576c:	f006 fc47 	bl	2bffe <printk>
   25770:	4910      	ldr	r1, [pc, #64]	; (257b4 <z_impl_k_poll+0x204>)
   25772:	4815      	ldr	r0, [pc, #84]	; (257c8 <z_impl_k_poll+0x218>)
   25774:	f006 fc43 	bl	2bffe <printk>
   25778:	2184      	movs	r1, #132	; 0x84
   2577a:	480f      	ldr	r0, [pc, #60]	; (257b8 <z_impl_k_poll+0x208>)
   2577c:	f006 fe5c 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   25780:	f386 8811 	msr	BASEPRI, r6
   25784:	f3bf 8f6f 	isb	sy
	return swap_rc;
   25788:	e799      	b.n	256be <z_impl_k_poll+0x10e>
   2578a:	bf00      	nop
   2578c:	20021dd4 	.word	0x20021dd4
   25790:	000251c5 	.word	0x000251c5
   25794:	00032905 	.word	0x00032905
   25798:	00032ca1 	.word	0x00032ca1
   2579c:	0002ff0d 	.word	0x0002ff0d
   257a0:	0003053a 	.word	0x0003053a
   257a4:	00032dba 	.word	0x00032dba
   257a8:	00032dd0 	.word	0x00032dd0
   257ac:	00032ddf 	.word	0x00032ddf
   257b0:	00032def 	.word	0x00032def
   257b4:	20021e28 	.word	0x20021e28
   257b8:	0002ffdd 	.word	0x0002ffdd
   257bc:	0003002f 	.word	0x0003002f
   257c0:	00030044 	.word	0x00030044
   257c4:	00030003 	.word	0x00030003
   257c8:	0003001a 	.word	0x0003001a

000257cc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   257cc:	b570      	push	{r4, r5, r6, lr}
   257ce:	4604      	mov	r4, r0
   257d0:	460d      	mov	r5, r1
	__asm__ volatile(
   257d2:	f04f 0320 	mov.w	r3, #32
   257d6:	f3ef 8611 	mrs	r6, BASEPRI
   257da:	f383 8811 	msr	BASEPRI, r3
   257de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257e2:	4821      	ldr	r0, [pc, #132]	; (25868 <z_impl_k_poll_signal_raise+0x9c>)
   257e4:	f7ff f874 	bl	248d0 <z_spin_lock_valid>
   257e8:	b968      	cbnz	r0, 25806 <z_impl_k_poll_signal_raise+0x3a>
   257ea:	235c      	movs	r3, #92	; 0x5c
   257ec:	4a1f      	ldr	r2, [pc, #124]	; (2586c <z_impl_k_poll_signal_raise+0xa0>)
   257ee:	4920      	ldr	r1, [pc, #128]	; (25870 <z_impl_k_poll_signal_raise+0xa4>)
   257f0:	4820      	ldr	r0, [pc, #128]	; (25874 <z_impl_k_poll_signal_raise+0xa8>)
   257f2:	f006 fc04 	bl	2bffe <printk>
   257f6:	491c      	ldr	r1, [pc, #112]	; (25868 <z_impl_k_poll_signal_raise+0x9c>)
   257f8:	481f      	ldr	r0, [pc, #124]	; (25878 <z_impl_k_poll_signal_raise+0xac>)
   257fa:	f006 fc00 	bl	2bffe <printk>
   257fe:	215c      	movs	r1, #92	; 0x5c
   25800:	481a      	ldr	r0, [pc, #104]	; (2586c <z_impl_k_poll_signal_raise+0xa0>)
   25802:	f006 fe19 	bl	2c438 <assert_post_action>
	z_spin_lock_set_owner(l);
   25806:	4818      	ldr	r0, [pc, #96]	; (25868 <z_impl_k_poll_signal_raise+0x9c>)
   25808:	f7ff f880 	bl	2490c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   2580c:	2101      	movs	r1, #1
	return list->head == list;
   2580e:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   25810:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   25812:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   25814:	60a1      	str	r1, [r4, #8]
   25816:	d117      	bne.n	25848 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25818:	4813      	ldr	r0, [pc, #76]	; (25868 <z_impl_k_poll_signal_raise+0x9c>)
   2581a:	f7ff f867 	bl	248ec <z_spin_unlock_valid>
   2581e:	b968      	cbnz	r0, 2583c <z_impl_k_poll_signal_raise+0x70>
   25820:	2384      	movs	r3, #132	; 0x84
   25822:	4a12      	ldr	r2, [pc, #72]	; (2586c <z_impl_k_poll_signal_raise+0xa0>)
   25824:	4915      	ldr	r1, [pc, #84]	; (2587c <z_impl_k_poll_signal_raise+0xb0>)
   25826:	4813      	ldr	r0, [pc, #76]	; (25874 <z_impl_k_poll_signal_raise+0xa8>)
   25828:	f006 fbe9 	bl	2bffe <printk>
   2582c:	490e      	ldr	r1, [pc, #56]	; (25868 <z_impl_k_poll_signal_raise+0x9c>)
   2582e:	4814      	ldr	r0, [pc, #80]	; (25880 <z_impl_k_poll_signal_raise+0xb4>)
   25830:	f006 fbe5 	bl	2bffe <printk>
   25834:	2184      	movs	r1, #132	; 0x84
   25836:	480d      	ldr	r0, [pc, #52]	; (2586c <z_impl_k_poll_signal_raise+0xa0>)
   25838:	f006 fdfe 	bl	2c438 <assert_post_action>
	__asm__ volatile(
   2583c:	f386 8811 	msr	BASEPRI, r6
   25840:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   25844:	2400      	movs	r4, #0
   25846:	e00d      	b.n	25864 <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   25848:	e9d0 3200 	ldrd	r3, r2, [r0]
   2584c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2584e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25850:	2300      	movs	r3, #0
	node->prev = NULL;
   25852:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25856:	f008 ffc4 	bl	2e7e2 <signal_poll_event>

	z_reschedule(&lock, key);
   2585a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2585c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2585e:	4802      	ldr	r0, [pc, #8]	; (25868 <z_impl_k_poll_signal_raise+0x9c>)
   25860:	f7fd fd84 	bl	2336c <z_reschedule>
	return rc;
}
   25864:	4620      	mov	r0, r4
   25866:	bd70      	pop	{r4, r5, r6, pc}
   25868:	20021e28 	.word	0x20021e28
   2586c:	0002ffdd 	.word	0x0002ffdd
   25870:	0003002f 	.word	0x0003002f
   25874:	0002ff0d 	.word	0x0002ff0d
   25878:	00030044 	.word	0x00030044
   2587c:	00030003 	.word	0x00030003
   25880:	0003001a 	.word	0x0003001a

00025884 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   25884:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   25886:	4801      	ldr	r0, [pc, #4]	; (2588c <k_malloc+0x8>)
   25888:	f009 b805 	b.w	2e896 <k_mem_pool_malloc>
   2588c:	200204d4 	.word	0x200204d4

00025890 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   25890:	b507      	push	{r0, r1, r2, lr}
   25892:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   25894:	f008 fed7 	bl	2e646 <k_is_in_isr>
   25898:	9901      	ldr	r1, [sp, #4]
   2589a:	b948      	cbnz	r0, 258b0 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   2589c:	4b07      	ldr	r3, [pc, #28]	; (258bc <z_thread_malloc+0x2c>)
   2589e:	689b      	ldr	r3, [r3, #8]
   258a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   258a2:	b13b      	cbz	r3, 258b4 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   258a4:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   258a6:	b003      	add	sp, #12
   258a8:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   258ac:	f008 bff3 	b.w	2e896 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   258b0:	4b03      	ldr	r3, [pc, #12]	; (258c0 <z_thread_malloc+0x30>)
   258b2:	e7f7      	b.n	258a4 <z_thread_malloc+0x14>
}
   258b4:	b003      	add	sp, #12
   258b6:	f85d fb04 	ldr.w	pc, [sp], #4
   258ba:	bf00      	nop
   258bc:	20021dd4 	.word	0x20021dd4
   258c0:	200204d4 	.word	0x200204d4

000258c4 <__assert_func>:
   258c4:	4d0a      	ldr	r5, [pc, #40]	; (258f0 <__assert_func+0x2c>)
   258c6:	4614      	mov	r4, r2
   258c8:	461a      	mov	r2, r3
   258ca:	4603      	mov	r3, r0
   258cc:	682d      	ldr	r5, [r5, #0]
   258ce:	b500      	push	{lr}
   258d0:	68e8      	ldr	r0, [r5, #12]
   258d2:	b085      	sub	sp, #20
   258d4:	b144      	cbz	r4, 258e8 <__assert_func+0x24>
   258d6:	4d07      	ldr	r5, [pc, #28]	; (258f4 <__assert_func+0x30>)
   258d8:	9100      	str	r1, [sp, #0]
   258da:	4907      	ldr	r1, [pc, #28]	; (258f8 <__assert_func+0x34>)
   258dc:	e9cd 5401 	strd	r5, r4, [sp, #4]
   258e0:	f000 f812 	bl	25908 <fiprintf>
   258e4:	f003 feda 	bl	2969c <abort>
   258e8:	4d04      	ldr	r5, [pc, #16]	; (258fc <__assert_func+0x38>)
   258ea:	462c      	mov	r4, r5
   258ec:	e7f4      	b.n	258d8 <__assert_func+0x14>
   258ee:	bf00      	nop
   258f0:	200204d8 	.word	0x200204d8
   258f4:	0002f388 	.word	0x0002f388
   258f8:	0002f398 	.word	0x0002f398
   258fc:	0002f394 	.word	0x0002f394

00025900 <atoi>:
   25900:	220a      	movs	r2, #10
   25902:	2100      	movs	r1, #0
   25904:	f001 bac2 	b.w	26e8c <strtol>

00025908 <fiprintf>:
   25908:	b40e      	push	{r1, r2, r3}
   2590a:	b510      	push	{r4, lr}
   2590c:	b083      	sub	sp, #12
   2590e:	4c07      	ldr	r4, [pc, #28]	; (2592c <fiprintf+0x24>)
   25910:	4601      	mov	r1, r0
   25912:	ab05      	add	r3, sp, #20
   25914:	6820      	ldr	r0, [r4, #0]
   25916:	f853 2b04 	ldr.w	r2, [r3], #4
   2591a:	9301      	str	r3, [sp, #4]
   2591c:	f002 feea 	bl	286f4 <_vfiprintf_r>
   25920:	b003      	add	sp, #12
   25922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25926:	b003      	add	sp, #12
   25928:	4770      	bx	lr
   2592a:	bf00      	nop
   2592c:	200204d8 	.word	0x200204d8

00025930 <malloc>:
   25930:	4b02      	ldr	r3, [pc, #8]	; (2593c <malloc+0xc>)
   25932:	4601      	mov	r1, r0
   25934:	6818      	ldr	r0, [r3, #0]
   25936:	f000 b80b 	b.w	25950 <_malloc_r>
   2593a:	bf00      	nop
   2593c:	200204d8 	.word	0x200204d8

00025940 <free>:
   25940:	4b02      	ldr	r3, [pc, #8]	; (2594c <free+0xc>)
   25942:	4601      	mov	r1, r0
   25944:	6818      	ldr	r0, [r3, #0]
   25946:	f004 b96d 	b.w	29c24 <_free_r>
   2594a:	bf00      	nop
   2594c:	200204d8 	.word	0x200204d8

00025950 <_malloc_r>:
   25950:	f101 030b 	add.w	r3, r1, #11
   25954:	2b16      	cmp	r3, #22
   25956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2595a:	4606      	mov	r6, r0
   2595c:	b083      	sub	sp, #12
   2595e:	d824      	bhi.n	259aa <_malloc_r+0x5a>
   25960:	2910      	cmp	r1, #16
   25962:	f200 80f5 	bhi.w	25b50 <_malloc_r+0x200>
   25966:	f000 fb7d 	bl	26064 <__malloc_lock>
   2596a:	2510      	movs	r5, #16
   2596c:	2002      	movs	r0, #2
   2596e:	2318      	movs	r3, #24
   25970:	4fce      	ldr	r7, [pc, #824]	; (25cac <_malloc_r+0x35c>)
   25972:	443b      	add	r3, r7
   25974:	685a      	ldr	r2, [r3, #4]
   25976:	f1a3 0108 	sub.w	r1, r3, #8
   2597a:	428a      	cmp	r2, r1
   2597c:	f000 80ef 	beq.w	25b5e <_malloc_r+0x20e>
   25980:	6853      	ldr	r3, [r2, #4]
   25982:	f102 0408 	add.w	r4, r2, #8
   25986:	68d1      	ldr	r1, [r2, #12]
   25988:	4630      	mov	r0, r6
   2598a:	f023 0303 	bic.w	r3, r3, #3
   2598e:	6895      	ldr	r5, [r2, #8]
   25990:	441a      	add	r2, r3
   25992:	60e9      	str	r1, [r5, #12]
   25994:	608d      	str	r5, [r1, #8]
   25996:	6853      	ldr	r3, [r2, #4]
   25998:	f043 0301 	orr.w	r3, r3, #1
   2599c:	6053      	str	r3, [r2, #4]
   2599e:	f000 fb67 	bl	26070 <__malloc_unlock>
   259a2:	4620      	mov	r0, r4
   259a4:	b003      	add	sp, #12
   259a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259aa:	2b00      	cmp	r3, #0
   259ac:	f023 0507 	bic.w	r5, r3, #7
   259b0:	f2c0 80ce 	blt.w	25b50 <_malloc_r+0x200>
   259b4:	42a9      	cmp	r1, r5
   259b6:	f200 80cb 	bhi.w	25b50 <_malloc_r+0x200>
   259ba:	f000 fb53 	bl	26064 <__malloc_lock>
   259be:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   259c2:	f0c0 81ca 	bcc.w	25d5a <_malloc_r+0x40a>
   259c6:	0a6b      	lsrs	r3, r5, #9
   259c8:	f000 813a 	beq.w	25c40 <_malloc_r+0x2f0>
   259cc:	2b04      	cmp	r3, #4
   259ce:	f200 81a0 	bhi.w	25d12 <_malloc_r+0x3c2>
   259d2:	09ab      	lsrs	r3, r5, #6
   259d4:	f103 0039 	add.w	r0, r3, #57	; 0x39
   259d8:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   259dc:	00c3      	lsls	r3, r0, #3
   259de:	4fb3      	ldr	r7, [pc, #716]	; (25cac <_malloc_r+0x35c>)
   259e0:	443b      	add	r3, r7
   259e2:	f1a3 0408 	sub.w	r4, r3, #8
   259e6:	685b      	ldr	r3, [r3, #4]
   259e8:	429c      	cmp	r4, r3
   259ea:	d107      	bne.n	259fc <_malloc_r+0xac>
   259ec:	e0bc      	b.n	25b68 <_malloc_r+0x218>
   259ee:	2900      	cmp	r1, #0
   259f0:	f280 8149 	bge.w	25c86 <_malloc_r+0x336>
   259f4:	68db      	ldr	r3, [r3, #12]
   259f6:	429c      	cmp	r4, r3
   259f8:	f000 80b6 	beq.w	25b68 <_malloc_r+0x218>
   259fc:	685a      	ldr	r2, [r3, #4]
   259fe:	f022 0203 	bic.w	r2, r2, #3
   25a02:	1b51      	subs	r1, r2, r5
   25a04:	290f      	cmp	r1, #15
   25a06:	ddf2      	ble.n	259ee <_malloc_r+0x9e>
   25a08:	4660      	mov	r0, ip
   25a0a:	f8df e2bc 	ldr.w	lr, [pc, #700]	; 25cc8 <_malloc_r+0x378>
   25a0e:	f8d7 c010 	ldr.w	ip, [r7, #16]
   25a12:	45f4      	cmp	ip, lr
   25a14:	f040 80af 	bne.w	25b76 <_malloc_r+0x226>
   25a18:	1083      	asrs	r3, r0, #2
   25a1a:	2401      	movs	r4, #1
   25a1c:	687a      	ldr	r2, [r7, #4]
   25a1e:	409c      	lsls	r4, r3
   25a20:	4294      	cmp	r4, r2
   25a22:	f240 80d5 	bls.w	25bd0 <_malloc_r+0x280>
   25a26:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25a2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25a2e:	f023 0903 	bic.w	r9, r3, #3
   25a32:	eba9 0205 	sub.w	r2, r9, r5
   25a36:	2a0f      	cmp	r2, #15
   25a38:	dd02      	ble.n	25a40 <_malloc_r+0xf0>
   25a3a:	45a9      	cmp	r9, r5
   25a3c:	f080 8111 	bcs.w	25c62 <_malloc_r+0x312>
   25a40:	4a9b      	ldr	r2, [pc, #620]	; (25cb0 <_malloc_r+0x360>)
   25a42:	eb08 0b09 	add.w	fp, r8, r9
   25a46:	4b9b      	ldr	r3, [pc, #620]	; (25cb4 <_malloc_r+0x364>)
   25a48:	6811      	ldr	r1, [r2, #0]
   25a4a:	681b      	ldr	r3, [r3, #0]
   25a4c:	3101      	adds	r1, #1
   25a4e:	442b      	add	r3, r5
   25a50:	f000 81d7 	beq.w	25e02 <_malloc_r+0x4b2>
   25a54:	f241 010f 	movw	r1, #4111	; 0x100f
   25a58:	4c97      	ldr	r4, [pc, #604]	; (25cb8 <_malloc_r+0x368>)
   25a5a:	4419      	add	r1, r3
   25a5c:	400c      	ands	r4, r1
   25a5e:	4621      	mov	r1, r4
   25a60:	4630      	mov	r0, r6
   25a62:	f000 fd0d 	bl	26480 <_sbrk_r>
   25a66:	f1b0 3fff 	cmp.w	r0, #4294967295
   25a6a:	4682      	mov	sl, r0
   25a6c:	4a90      	ldr	r2, [pc, #576]	; (25cb0 <_malloc_r+0x360>)
   25a6e:	f000 81b3 	beq.w	25dd8 <_malloc_r+0x488>
   25a72:	45b8      	cmp	r8, r7
   25a74:	d002      	beq.n	25a7c <_malloc_r+0x12c>
   25a76:	4583      	cmp	fp, r0
   25a78:	f200 81ae 	bhi.w	25dd8 <_malloc_r+0x488>
   25a7c:	4b8f      	ldr	r3, [pc, #572]	; (25cbc <_malloc_r+0x36c>)
   25a7e:	45d3      	cmp	fp, sl
   25a80:	6818      	ldr	r0, [r3, #0]
   25a82:	4420      	add	r0, r4
   25a84:	6018      	str	r0, [r3, #0]
   25a86:	f000 81ac 	beq.w	25de2 <_malloc_r+0x492>
   25a8a:	6811      	ldr	r1, [r2, #0]
   25a8c:	3101      	adds	r1, #1
   25a8e:	f000 81b5 	beq.w	25dfc <_malloc_r+0x4ac>
   25a92:	ebaa 0b0b 	sub.w	fp, sl, fp
   25a96:	4458      	add	r0, fp
   25a98:	6018      	str	r0, [r3, #0]
   25a9a:	f01a 0207 	ands.w	r2, sl, #7
   25a9e:	f000 81bc 	beq.w	25e1a <_malloc_r+0x4ca>
   25aa2:	f1c2 0c08 	rsb	ip, r2, #8
   25aa6:	f241 0108 	movw	r1, #4104	; 0x1008
   25aaa:	4630      	mov	r0, r6
   25aac:	9201      	str	r2, [sp, #4]
   25aae:	44e2      	add	sl, ip
   25ab0:	1a89      	subs	r1, r1, r2
   25ab2:	4454      	add	r4, sl
   25ab4:	1b09      	subs	r1, r1, r4
   25ab6:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
   25aba:	4659      	mov	r1, fp
   25abc:	f000 fce0 	bl	26480 <_sbrk_r>
   25ac0:	1c42      	adds	r2, r0, #1
   25ac2:	4b7e      	ldr	r3, [pc, #504]	; (25cbc <_malloc_r+0x36c>)
   25ac4:	9a01      	ldr	r2, [sp, #4]
   25ac6:	f000 81f2 	beq.w	25eae <_malloc_r+0x55e>
   25aca:	eba0 000a 	sub.w	r0, r0, sl
   25ace:	eb00 040b 	add.w	r4, r0, fp
   25ad2:	6818      	ldr	r0, [r3, #0]
   25ad4:	f044 0101 	orr.w	r1, r4, #1
   25ad8:	45b8      	cmp	r8, r7
   25ada:	f8c7 a008 	str.w	sl, [r7, #8]
   25ade:	4458      	add	r0, fp
   25ae0:	f8ca 1004 	str.w	r1, [sl, #4]
   25ae4:	6018      	str	r0, [r3, #0]
   25ae6:	f000 81bc 	beq.w	25e62 <_malloc_r+0x512>
   25aea:	f1b9 0f0f 	cmp.w	r9, #15
   25aee:	f240 81ba 	bls.w	25e66 <_malloc_r+0x516>
   25af2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   25af6:	f1a9 010c 	sub.w	r1, r9, #12
   25afa:	f04f 0c05 	mov.w	ip, #5
   25afe:	f021 0107 	bic.w	r1, r1, #7
   25b02:	f002 0201 	and.w	r2, r2, #1
   25b06:	eb08 0401 	add.w	r4, r8, r1
   25b0a:	430a      	orrs	r2, r1
   25b0c:	290f      	cmp	r1, #15
   25b0e:	f8c8 2004 	str.w	r2, [r8, #4]
   25b12:	e9c4 cc01 	strd	ip, ip, [r4, #4]
   25b16:	f200 81be 	bhi.w	25e96 <_malloc_r+0x546>
   25b1a:	f8da 1004 	ldr.w	r1, [sl, #4]
   25b1e:	46d0      	mov	r8, sl
   25b20:	4b67      	ldr	r3, [pc, #412]	; (25cc0 <_malloc_r+0x370>)
   25b22:	681a      	ldr	r2, [r3, #0]
   25b24:	4282      	cmp	r2, r0
   25b26:	bf38      	it	cc
   25b28:	6018      	strcc	r0, [r3, #0]
   25b2a:	4b66      	ldr	r3, [pc, #408]	; (25cc4 <_malloc_r+0x374>)
   25b2c:	681a      	ldr	r2, [r3, #0]
   25b2e:	4282      	cmp	r2, r0
   25b30:	bf38      	it	cc
   25b32:	6018      	strcc	r0, [r3, #0]
   25b34:	f021 0103 	bic.w	r1, r1, #3
   25b38:	42a9      	cmp	r1, r5
   25b3a:	eba1 0205 	sub.w	r2, r1, r5
   25b3e:	d302      	bcc.n	25b46 <_malloc_r+0x1f6>
   25b40:	2a0f      	cmp	r2, #15
   25b42:	f300 808e 	bgt.w	25c62 <_malloc_r+0x312>
   25b46:	4630      	mov	r0, r6
   25b48:	2400      	movs	r4, #0
   25b4a:	f000 fa91 	bl	26070 <__malloc_unlock>
   25b4e:	e728      	b.n	259a2 <_malloc_r+0x52>
   25b50:	2400      	movs	r4, #0
   25b52:	230c      	movs	r3, #12
   25b54:	4620      	mov	r0, r4
   25b56:	6033      	str	r3, [r6, #0]
   25b58:	b003      	add	sp, #12
   25b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b5e:	68da      	ldr	r2, [r3, #12]
   25b60:	4293      	cmp	r3, r2
   25b62:	f47f af0d 	bne.w	25980 <_malloc_r+0x30>
   25b66:	3002      	adds	r0, #2
   25b68:	f8d7 c010 	ldr.w	ip, [r7, #16]
   25b6c:	f8df e158 	ldr.w	lr, [pc, #344]	; 25cc8 <_malloc_r+0x378>
   25b70:	45f4      	cmp	ip, lr
   25b72:	f43f af51 	beq.w	25a18 <_malloc_r+0xc8>
   25b76:	f8dc 2004 	ldr.w	r2, [ip, #4]
   25b7a:	f022 0203 	bic.w	r2, r2, #3
   25b7e:	1b53      	subs	r3, r2, r5
   25b80:	2b0f      	cmp	r3, #15
   25b82:	f300 80ee 	bgt.w	25d62 <_malloc_r+0x412>
   25b86:	2b00      	cmp	r3, #0
   25b88:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   25b8c:	da5e      	bge.n	25c4c <_malloc_r+0x2fc>
   25b8e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   25b92:	f080 809b 	bcs.w	25ccc <_malloc_r+0x37c>
   25b96:	2301      	movs	r3, #1
   25b98:	ea4f 08d2 	mov.w	r8, r2, lsr #3
   25b9c:	0952      	lsrs	r2, r2, #5
   25b9e:	6879      	ldr	r1, [r7, #4]
   25ba0:	4498      	add	r8, r3
   25ba2:	fa03 f202 	lsl.w	r2, r3, r2
   25ba6:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   25baa:	f857 4038 	ldr.w	r4, [r7, r8, lsl #3]
   25bae:	430a      	orrs	r2, r1
   25bb0:	3b08      	subs	r3, #8
   25bb2:	f8cc 4008 	str.w	r4, [ip, #8]
   25bb6:	607a      	str	r2, [r7, #4]
   25bb8:	f8cc 300c 	str.w	r3, [ip, #12]
   25bbc:	f847 c038 	str.w	ip, [r7, r8, lsl #3]
   25bc0:	f8c4 c00c 	str.w	ip, [r4, #12]
   25bc4:	1083      	asrs	r3, r0, #2
   25bc6:	2401      	movs	r4, #1
   25bc8:	409c      	lsls	r4, r3
   25bca:	4294      	cmp	r4, r2
   25bcc:	f63f af2b 	bhi.w	25a26 <_malloc_r+0xd6>
   25bd0:	4214      	tst	r4, r2
   25bd2:	d105      	bne.n	25be0 <_malloc_r+0x290>
   25bd4:	f020 0003 	bic.w	r0, r0, #3
   25bd8:	0064      	lsls	r4, r4, #1
   25bda:	3004      	adds	r0, #4
   25bdc:	4214      	tst	r4, r2
   25bde:	d0fb      	beq.n	25bd8 <_malloc_r+0x288>
   25be0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   25be4:	4680      	mov	r8, r0
   25be6:	46cc      	mov	ip, r9
   25be8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   25bec:	459c      	cmp	ip, r3
   25bee:	d107      	bne.n	25c00 <_malloc_r+0x2b0>
   25bf0:	e09b      	b.n	25d2a <_malloc_r+0x3da>
   25bf2:	2a00      	cmp	r2, #0
   25bf4:	f280 80a2 	bge.w	25d3c <_malloc_r+0x3ec>
   25bf8:	68db      	ldr	r3, [r3, #12]
   25bfa:	459c      	cmp	ip, r3
   25bfc:	f000 8095 	beq.w	25d2a <_malloc_r+0x3da>
   25c00:	6859      	ldr	r1, [r3, #4]
   25c02:	f021 0103 	bic.w	r1, r1, #3
   25c06:	1b4a      	subs	r2, r1, r5
   25c08:	2a0f      	cmp	r2, #15
   25c0a:	ddf2      	ble.n	25bf2 <_malloc_r+0x2a2>
   25c0c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   25c10:	f045 0401 	orr.w	r4, r5, #1
   25c14:	f042 0801 	orr.w	r8, r2, #1
   25c18:	441d      	add	r5, r3
   25c1a:	4630      	mov	r0, r6
   25c1c:	689e      	ldr	r6, [r3, #8]
   25c1e:	605c      	str	r4, [r3, #4]
   25c20:	f103 0408 	add.w	r4, r3, #8
   25c24:	f8c6 c00c 	str.w	ip, [r6, #12]
   25c28:	f8cc 6008 	str.w	r6, [ip, #8]
   25c2c:	e9c7 5504 	strd	r5, r5, [r7, #16]
   25c30:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   25c34:	f8c5 8004 	str.w	r8, [r5, #4]
   25c38:	505a      	str	r2, [r3, r1]
   25c3a:	f000 fa19 	bl	26070 <__malloc_unlock>
   25c3e:	e6b0      	b.n	259a2 <_malloc_r+0x52>
   25c40:	f44f 7300 	mov.w	r3, #512	; 0x200
   25c44:	2040      	movs	r0, #64	; 0x40
   25c46:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   25c4a:	e6c8      	b.n	259de <_malloc_r+0x8e>
   25c4c:	4462      	add	r2, ip
   25c4e:	4630      	mov	r0, r6
   25c50:	f10c 0408 	add.w	r4, ip, #8
   25c54:	6853      	ldr	r3, [r2, #4]
   25c56:	f043 0301 	orr.w	r3, r3, #1
   25c5a:	6053      	str	r3, [r2, #4]
   25c5c:	f000 fa08 	bl	26070 <__malloc_unlock>
   25c60:	e69f      	b.n	259a2 <_malloc_r+0x52>
   25c62:	f045 0301 	orr.w	r3, r5, #1
   25c66:	f042 0201 	orr.w	r2, r2, #1
   25c6a:	4445      	add	r5, r8
   25c6c:	f108 0408 	add.w	r4, r8, #8
   25c70:	f8c8 3004 	str.w	r3, [r8, #4]
   25c74:	4630      	mov	r0, r6
   25c76:	60bd      	str	r5, [r7, #8]
   25c78:	606a      	str	r2, [r5, #4]
   25c7a:	f000 f9f9 	bl	26070 <__malloc_unlock>
   25c7e:	4620      	mov	r0, r4
   25c80:	b003      	add	sp, #12
   25c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c86:	441a      	add	r2, r3
   25c88:	f103 0408 	add.w	r4, r3, #8
   25c8c:	4630      	mov	r0, r6
   25c8e:	6851      	ldr	r1, [r2, #4]
   25c90:	e9d3 7502 	ldrd	r7, r5, [r3, #8]
   25c94:	f041 0101 	orr.w	r1, r1, #1
   25c98:	60fd      	str	r5, [r7, #12]
   25c9a:	60af      	str	r7, [r5, #8]
   25c9c:	6051      	str	r1, [r2, #4]
   25c9e:	f000 f9e7 	bl	26070 <__malloc_unlock>
   25ca2:	4620      	mov	r0, r4
   25ca4:	b003      	add	sp, #12
   25ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25caa:	bf00      	nop
   25cac:	200204dc 	.word	0x200204dc
   25cb0:	200208e4 	.word	0x200208e4
   25cb4:	2002429c 	.word	0x2002429c
   25cb8:	fffff000 	.word	0xfffff000
   25cbc:	2002426c 	.word	0x2002426c
   25cc0:	20024294 	.word	0x20024294
   25cc4:	20024298 	.word	0x20024298
   25cc8:	200204e4 	.word	0x200204e4
   25ccc:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   25cd0:	ea4f 2352 	mov.w	r3, r2, lsr #9
   25cd4:	d359      	bcc.n	25d8a <_malloc_r+0x43a>
   25cd6:	2b14      	cmp	r3, #20
   25cd8:	f200 80b1 	bhi.w	25e3e <_malloc_r+0x4ee>
   25cdc:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   25ce0:	335b      	adds	r3, #91	; 0x5b
   25ce2:	00c9      	lsls	r1, r1, #3
   25ce4:	187c      	adds	r4, r7, r1
   25ce6:	5879      	ldr	r1, [r7, r1]
   25ce8:	3c08      	subs	r4, #8
   25cea:	428c      	cmp	r4, r1
   25cec:	f000 808c 	beq.w	25e08 <_malloc_r+0x4b8>
   25cf0:	684b      	ldr	r3, [r1, #4]
   25cf2:	f023 0303 	bic.w	r3, r3, #3
   25cf6:	4293      	cmp	r3, r2
   25cf8:	d902      	bls.n	25d00 <_malloc_r+0x3b0>
   25cfa:	6889      	ldr	r1, [r1, #8]
   25cfc:	428c      	cmp	r4, r1
   25cfe:	d1f7      	bne.n	25cf0 <_malloc_r+0x3a0>
   25d00:	68cc      	ldr	r4, [r1, #12]
   25d02:	687a      	ldr	r2, [r7, #4]
   25d04:	e9cc 1402 	strd	r1, r4, [ip, #8]
   25d08:	f8c4 c008 	str.w	ip, [r4, #8]
   25d0c:	f8c1 c00c 	str.w	ip, [r1, #12]
   25d10:	e758      	b.n	25bc4 <_malloc_r+0x274>
   25d12:	2b14      	cmp	r3, #20
   25d14:	d93f      	bls.n	25d96 <_malloc_r+0x446>
   25d16:	2b54      	cmp	r3, #84	; 0x54
   25d18:	f200 8099 	bhi.w	25e4e <_malloc_r+0x4fe>
   25d1c:	0b2b      	lsrs	r3, r5, #12
   25d1e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   25d22:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   25d26:	00c3      	lsls	r3, r0, #3
   25d28:	e659      	b.n	259de <_malloc_r+0x8e>
   25d2a:	f108 0801 	add.w	r8, r8, #1
   25d2e:	f10c 0c08 	add.w	ip, ip, #8
   25d32:	f018 0f03 	tst.w	r8, #3
   25d36:	f47f af57 	bne.w	25be8 <_malloc_r+0x298>
   25d3a:	e037      	b.n	25dac <_malloc_r+0x45c>
   25d3c:	4419      	add	r1, r3
   25d3e:	68da      	ldr	r2, [r3, #12]
   25d40:	461c      	mov	r4, r3
   25d42:	4630      	mov	r0, r6
   25d44:	684b      	ldr	r3, [r1, #4]
   25d46:	f854 5f08 	ldr.w	r5, [r4, #8]!
   25d4a:	f043 0301 	orr.w	r3, r3, #1
   25d4e:	604b      	str	r3, [r1, #4]
   25d50:	60ea      	str	r2, [r5, #12]
   25d52:	6095      	str	r5, [r2, #8]
   25d54:	f000 f98c 	bl	26070 <__malloc_unlock>
   25d58:	e623      	b.n	259a2 <_malloc_r+0x52>
   25d5a:	08e8      	lsrs	r0, r5, #3
   25d5c:	f105 0308 	add.w	r3, r5, #8
   25d60:	e606      	b.n	25970 <_malloc_r+0x20>
   25d62:	f045 0401 	orr.w	r4, r5, #1
   25d66:	f043 0101 	orr.w	r1, r3, #1
   25d6a:	4465      	add	r5, ip
   25d6c:	4630      	mov	r0, r6
   25d6e:	f8cc 4004 	str.w	r4, [ip, #4]
   25d72:	f10c 0408 	add.w	r4, ip, #8
   25d76:	e9c7 5504 	strd	r5, r5, [r7, #16]
   25d7a:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   25d7e:	6069      	str	r1, [r5, #4]
   25d80:	f84c 3002 	str.w	r3, [ip, r2]
   25d84:	f000 f974 	bl	26070 <__malloc_unlock>
   25d88:	e60b      	b.n	259a2 <_malloc_r+0x52>
   25d8a:	0993      	lsrs	r3, r2, #6
   25d8c:	f103 0139 	add.w	r1, r3, #57	; 0x39
   25d90:	3338      	adds	r3, #56	; 0x38
   25d92:	00c9      	lsls	r1, r1, #3
   25d94:	e7a6      	b.n	25ce4 <_malloc_r+0x394>
   25d96:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   25d9a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   25d9e:	00c3      	lsls	r3, r0, #3
   25da0:	e61d      	b.n	259de <_malloc_r+0x8e>
   25da2:	f859 3908 	ldr.w	r3, [r9], #-8
   25da6:	454b      	cmp	r3, r9
   25da8:	f040 809c 	bne.w	25ee4 <_malloc_r+0x594>
   25dac:	f010 0f03 	tst.w	r0, #3
   25db0:	f100 30ff 	add.w	r0, r0, #4294967295
   25db4:	d1f5      	bne.n	25da2 <_malloc_r+0x452>
   25db6:	687b      	ldr	r3, [r7, #4]
   25db8:	ea23 0304 	bic.w	r3, r3, r4
   25dbc:	607b      	str	r3, [r7, #4]
   25dbe:	0064      	lsls	r4, r4, #1
   25dc0:	f43f ae31 	beq.w	25a26 <_malloc_r+0xd6>
   25dc4:	429c      	cmp	r4, r3
   25dc6:	d903      	bls.n	25dd0 <_malloc_r+0x480>
   25dc8:	e62d      	b.n	25a26 <_malloc_r+0xd6>
   25dca:	0064      	lsls	r4, r4, #1
   25dcc:	f108 0804 	add.w	r8, r8, #4
   25dd0:	421c      	tst	r4, r3
   25dd2:	d0fa      	beq.n	25dca <_malloc_r+0x47a>
   25dd4:	4640      	mov	r0, r8
   25dd6:	e703      	b.n	25be0 <_malloc_r+0x290>
   25dd8:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25ddc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   25de0:	e6a8      	b.n	25b34 <_malloc_r+0x1e4>
   25de2:	f3cb 010b 	ubfx	r1, fp, #0, #12
   25de6:	2900      	cmp	r1, #0
   25de8:	f47f ae4f 	bne.w	25a8a <_malloc_r+0x13a>
   25dec:	444c      	add	r4, r9
   25dee:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25df2:	f044 0101 	orr.w	r1, r4, #1
   25df6:	f8c8 1004 	str.w	r1, [r8, #4]
   25dfa:	e691      	b.n	25b20 <_malloc_r+0x1d0>
   25dfc:	f8c2 a000 	str.w	sl, [r2]
   25e00:	e64b      	b.n	25a9a <_malloc_r+0x14a>
   25e02:	f103 0410 	add.w	r4, r3, #16
   25e06:	e62a      	b.n	25a5e <_malloc_r+0x10e>
   25e08:	109a      	asrs	r2, r3, #2
   25e0a:	f04f 0801 	mov.w	r8, #1
   25e0e:	687b      	ldr	r3, [r7, #4]
   25e10:	fa08 f202 	lsl.w	r2, r8, r2
   25e14:	431a      	orrs	r2, r3
   25e16:	607a      	str	r2, [r7, #4]
   25e18:	e774      	b.n	25d04 <_malloc_r+0x3b4>
   25e1a:	eb0a 0b04 	add.w	fp, sl, r4
   25e1e:	4630      	mov	r0, r6
   25e20:	9201      	str	r2, [sp, #4]
   25e22:	f1cb 0b00 	rsb	fp, fp, #0
   25e26:	f3cb 0b0b 	ubfx	fp, fp, #0, #12
   25e2a:	4659      	mov	r1, fp
   25e2c:	f000 fb28 	bl	26480 <_sbrk_r>
   25e30:	1c43      	adds	r3, r0, #1
   25e32:	9a01      	ldr	r2, [sp, #4]
   25e34:	4b2c      	ldr	r3, [pc, #176]	; (25ee8 <_malloc_r+0x598>)
   25e36:	f47f ae48 	bne.w	25aca <_malloc_r+0x17a>
   25e3a:	4693      	mov	fp, r2
   25e3c:	e649      	b.n	25ad2 <_malloc_r+0x182>
   25e3e:	2b54      	cmp	r3, #84	; 0x54
   25e40:	d815      	bhi.n	25e6e <_malloc_r+0x51e>
   25e42:	0b13      	lsrs	r3, r2, #12
   25e44:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   25e48:	336e      	adds	r3, #110	; 0x6e
   25e4a:	00c9      	lsls	r1, r1, #3
   25e4c:	e74a      	b.n	25ce4 <_malloc_r+0x394>
   25e4e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   25e52:	d815      	bhi.n	25e80 <_malloc_r+0x530>
   25e54:	0beb      	lsrs	r3, r5, #15
   25e56:	f103 0078 	add.w	r0, r3, #120	; 0x78
   25e5a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   25e5e:	00c3      	lsls	r3, r0, #3
   25e60:	e5bd      	b.n	259de <_malloc_r+0x8e>
   25e62:	46d0      	mov	r8, sl
   25e64:	e65c      	b.n	25b20 <_malloc_r+0x1d0>
   25e66:	2301      	movs	r3, #1
   25e68:	f8ca 3004 	str.w	r3, [sl, #4]
   25e6c:	e66b      	b.n	25b46 <_malloc_r+0x1f6>
   25e6e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   25e72:	d823      	bhi.n	25ebc <_malloc_r+0x56c>
   25e74:	0bd3      	lsrs	r3, r2, #15
   25e76:	f103 0178 	add.w	r1, r3, #120	; 0x78
   25e7a:	3377      	adds	r3, #119	; 0x77
   25e7c:	00c9      	lsls	r1, r1, #3
   25e7e:	e731      	b.n	25ce4 <_malloc_r+0x394>
   25e80:	f240 5254 	movw	r2, #1364	; 0x554
   25e84:	4293      	cmp	r3, r2
   25e86:	d823      	bhi.n	25ed0 <_malloc_r+0x580>
   25e88:	0cab      	lsrs	r3, r5, #18
   25e8a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   25e8e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   25e92:	00c3      	lsls	r3, r0, #3
   25e94:	e5a3      	b.n	259de <_malloc_r+0x8e>
   25e96:	f108 0108 	add.w	r1, r8, #8
   25e9a:	4630      	mov	r0, r6
   25e9c:	f003 fec2 	bl	29c24 <_free_r>
   25ea0:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25ea4:	4b10      	ldr	r3, [pc, #64]	; (25ee8 <_malloc_r+0x598>)
   25ea6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   25eaa:	6818      	ldr	r0, [r3, #0]
   25eac:	e638      	b.n	25b20 <_malloc_r+0x1d0>
   25eae:	3a08      	subs	r2, #8
   25eb0:	f04f 0b00 	mov.w	fp, #0
   25eb4:	4414      	add	r4, r2
   25eb6:	eba4 040a 	sub.w	r4, r4, sl
   25eba:	e60a      	b.n	25ad2 <_malloc_r+0x182>
   25ebc:	f240 5154 	movw	r1, #1364	; 0x554
   25ec0:	428b      	cmp	r3, r1
   25ec2:	d80b      	bhi.n	25edc <_malloc_r+0x58c>
   25ec4:	0c93      	lsrs	r3, r2, #18
   25ec6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   25eca:	337c      	adds	r3, #124	; 0x7c
   25ecc:	00c9      	lsls	r1, r1, #3
   25ece:	e709      	b.n	25ce4 <_malloc_r+0x394>
   25ed0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   25ed4:	207f      	movs	r0, #127	; 0x7f
   25ed6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   25eda:	e580      	b.n	259de <_malloc_r+0x8e>
   25edc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   25ee0:	237e      	movs	r3, #126	; 0x7e
   25ee2:	e6ff      	b.n	25ce4 <_malloc_r+0x394>
   25ee4:	687b      	ldr	r3, [r7, #4]
   25ee6:	e76a      	b.n	25dbe <_malloc_r+0x46e>
   25ee8:	2002426c 	.word	0x2002426c

00025eec <memchr>:
   25eec:	b470      	push	{r4, r5, r6}
   25eee:	0784      	lsls	r4, r0, #30
   25ef0:	b2ce      	uxtb	r6, r1
   25ef2:	d012      	beq.n	25f1a <memchr+0x2e>
   25ef4:	4603      	mov	r3, r0
   25ef6:	1e55      	subs	r5, r2, #1
   25ef8:	b922      	cbnz	r2, 25f04 <memchr+0x18>
   25efa:	e00b      	b.n	25f14 <memchr+0x28>
   25efc:	079a      	lsls	r2, r3, #30
   25efe:	d00e      	beq.n	25f1e <memchr+0x32>
   25f00:	3d01      	subs	r5, #1
   25f02:	d307      	bcc.n	25f14 <memchr+0x28>
   25f04:	4618      	mov	r0, r3
   25f06:	f813 2b01 	ldrb.w	r2, [r3], #1
   25f0a:	42b2      	cmp	r2, r6
   25f0c:	461c      	mov	r4, r3
   25f0e:	d1f5      	bne.n	25efc <memchr+0x10>
   25f10:	bc70      	pop	{r4, r5, r6}
   25f12:	4770      	bx	lr
   25f14:	2000      	movs	r0, #0
   25f16:	bc70      	pop	{r4, r5, r6}
   25f18:	4770      	bx	lr
   25f1a:	4604      	mov	r4, r0
   25f1c:	4615      	mov	r5, r2
   25f1e:	2d03      	cmp	r5, #3
   25f20:	d80c      	bhi.n	25f3c <memchr+0x50>
   25f22:	2d00      	cmp	r5, #0
   25f24:	d0f6      	beq.n	25f14 <memchr+0x28>
   25f26:	1963      	adds	r3, r4, r5
   25f28:	e001      	b.n	25f2e <memchr+0x42>
   25f2a:	429c      	cmp	r4, r3
   25f2c:	d0f2      	beq.n	25f14 <memchr+0x28>
   25f2e:	4620      	mov	r0, r4
   25f30:	f814 2b01 	ldrb.w	r2, [r4], #1
   25f34:	42b2      	cmp	r2, r6
   25f36:	d1f8      	bne.n	25f2a <memchr+0x3e>
   25f38:	bc70      	pop	{r4, r5, r6}
   25f3a:	4770      	bx	lr
   25f3c:	020a      	lsls	r2, r1, #8
   25f3e:	4621      	mov	r1, r4
   25f40:	b292      	uxth	r2, r2
   25f42:	4332      	orrs	r2, r6
   25f44:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   25f48:	460c      	mov	r4, r1
   25f4a:	3104      	adds	r1, #4
   25f4c:	6823      	ldr	r3, [r4, #0]
   25f4e:	4053      	eors	r3, r2
   25f50:	f1a3 3001 	sub.w	r0, r3, #16843009	; 0x1010101
   25f54:	ea20 0303 	bic.w	r3, r0, r3
   25f58:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   25f5c:	d1e3      	bne.n	25f26 <memchr+0x3a>
   25f5e:	3d04      	subs	r5, #4
   25f60:	460c      	mov	r4, r1
   25f62:	2d03      	cmp	r5, #3
   25f64:	d8f0      	bhi.n	25f48 <memchr+0x5c>
   25f66:	e7dc      	b.n	25f22 <memchr+0x36>

00025f68 <memcmp>:
   25f68:	2a03      	cmp	r2, #3
   25f6a:	b470      	push	{r4, r5, r6}
   25f6c:	d912      	bls.n	25f94 <memcmp+0x2c>
   25f6e:	ea40 0501 	orr.w	r5, r0, r1
   25f72:	4604      	mov	r4, r0
   25f74:	460b      	mov	r3, r1
   25f76:	07ad      	lsls	r5, r5, #30
   25f78:	d11d      	bne.n	25fb6 <memcmp+0x4e>
   25f7a:	4619      	mov	r1, r3
   25f7c:	4620      	mov	r0, r4
   25f7e:	f853 5b04 	ldr.w	r5, [r3], #4
   25f82:	f854 6b04 	ldr.w	r6, [r4], #4
   25f86:	42ae      	cmp	r6, r5
   25f88:	d115      	bne.n	25fb6 <memcmp+0x4e>
   25f8a:	3a04      	subs	r2, #4
   25f8c:	4620      	mov	r0, r4
   25f8e:	4619      	mov	r1, r3
   25f90:	2a03      	cmp	r2, #3
   25f92:	d8f2      	bhi.n	25f7a <memcmp+0x12>
   25f94:	1e56      	subs	r6, r2, #1
   25f96:	b19a      	cbz	r2, 25fc0 <memcmp+0x58>
   25f98:	3901      	subs	r1, #1
   25f9a:	1e44      	subs	r4, r0, #1
   25f9c:	e001      	b.n	25fa2 <memcmp+0x3a>
   25f9e:	18c3      	adds	r3, r0, r3
   25fa0:	d00b      	beq.n	25fba <memcmp+0x52>
   25fa2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
   25fa6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   25faa:	1b33      	subs	r3, r6, r4
   25fac:	4295      	cmp	r5, r2
   25fae:	d0f6      	beq.n	25f9e <memcmp+0x36>
   25fb0:	1aa8      	subs	r0, r5, r2
   25fb2:	bc70      	pop	{r4, r5, r6}
   25fb4:	4770      	bx	lr
   25fb6:	1e56      	subs	r6, r2, #1
   25fb8:	e7ee      	b.n	25f98 <memcmp+0x30>
   25fba:	4618      	mov	r0, r3
   25fbc:	bc70      	pop	{r4, r5, r6}
   25fbe:	4770      	bx	lr
   25fc0:	4610      	mov	r0, r2
   25fc2:	e7f6      	b.n	25fb2 <memcmp+0x4a>

00025fc4 <memset>:
   25fc4:	b4f0      	push	{r4, r5, r6, r7}
   25fc6:	0786      	lsls	r6, r0, #30
   25fc8:	d046      	beq.n	26058 <memset+0x94>
   25fca:	1e54      	subs	r4, r2, #1
   25fcc:	2a00      	cmp	r2, #0
   25fce:	d03c      	beq.n	2604a <memset+0x86>
   25fd0:	b2ca      	uxtb	r2, r1
   25fd2:	4603      	mov	r3, r0
   25fd4:	e001      	b.n	25fda <memset+0x16>
   25fd6:	3c01      	subs	r4, #1
   25fd8:	d337      	bcc.n	2604a <memset+0x86>
   25fda:	f803 2b01 	strb.w	r2, [r3], #1
   25fde:	079d      	lsls	r5, r3, #30
   25fe0:	d1f9      	bne.n	25fd6 <memset+0x12>
   25fe2:	2c03      	cmp	r4, #3
   25fe4:	d92a      	bls.n	2603c <memset+0x78>
   25fe6:	b2cd      	uxtb	r5, r1
   25fe8:	2c0f      	cmp	r4, #15
   25fea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   25fee:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   25ff2:	d934      	bls.n	2605e <memset+0x9a>
   25ff4:	f1a4 0610 	sub.w	r6, r4, #16
   25ff8:	f103 0720 	add.w	r7, r3, #32
   25ffc:	f103 0210 	add.w	r2, r3, #16
   26000:	f026 0c0f 	bic.w	ip, r6, #15
   26004:	0936      	lsrs	r6, r6, #4
   26006:	4467      	add	r7, ip
   26008:	e942 5504 	strd	r5, r5, [r2, #-16]
   2600c:	e942 5502 	strd	r5, r5, [r2, #-8]
   26010:	3210      	adds	r2, #16
   26012:	42ba      	cmp	r2, r7
   26014:	d1f8      	bne.n	26008 <memset+0x44>
   26016:	1c72      	adds	r2, r6, #1
   26018:	f014 0f0c 	tst.w	r4, #12
   2601c:	f004 060f 	and.w	r6, r4, #15
   26020:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   26024:	d013      	beq.n	2604e <memset+0x8a>
   26026:	1f33      	subs	r3, r6, #4
   26028:	f023 0303 	bic.w	r3, r3, #3
   2602c:	3304      	adds	r3, #4
   2602e:	4413      	add	r3, r2
   26030:	f842 5b04 	str.w	r5, [r2], #4
   26034:	4293      	cmp	r3, r2
   26036:	d1fb      	bne.n	26030 <memset+0x6c>
   26038:	f006 0403 	and.w	r4, r6, #3
   2603c:	b12c      	cbz	r4, 2604a <memset+0x86>
   2603e:	b2ca      	uxtb	r2, r1
   26040:	441c      	add	r4, r3
   26042:	f803 2b01 	strb.w	r2, [r3], #1
   26046:	429c      	cmp	r4, r3
   26048:	d1fb      	bne.n	26042 <memset+0x7e>
   2604a:	bcf0      	pop	{r4, r5, r6, r7}
   2604c:	4770      	bx	lr
   2604e:	4634      	mov	r4, r6
   26050:	4613      	mov	r3, r2
   26052:	2c00      	cmp	r4, #0
   26054:	d1f3      	bne.n	2603e <memset+0x7a>
   26056:	e7f8      	b.n	2604a <memset+0x86>
   26058:	4614      	mov	r4, r2
   2605a:	4603      	mov	r3, r0
   2605c:	e7c1      	b.n	25fe2 <memset+0x1e>
   2605e:	461a      	mov	r2, r3
   26060:	4626      	mov	r6, r4
   26062:	e7e0      	b.n	26026 <memset+0x62>

00026064 <__malloc_lock>:
   26064:	4801      	ldr	r0, [pc, #4]	; (2606c <__malloc_lock+0x8>)
   26066:	f004 bc83 	b.w	2a970 <__retarget_lock_acquire_recursive>
   2606a:	bf00      	nop
   2606c:	20026410 	.word	0x20026410

00026070 <__malloc_unlock>:
   26070:	4801      	ldr	r0, [pc, #4]	; (26078 <__malloc_unlock+0x8>)
   26072:	f004 bc7f 	b.w	2a974 <__retarget_lock_release_recursive>
   26076:	bf00      	nop
   26078:	20026410 	.word	0x20026410

0002607c <realloc>:
   2607c:	4b02      	ldr	r3, [pc, #8]	; (26088 <realloc+0xc>)
   2607e:	460a      	mov	r2, r1
   26080:	4601      	mov	r1, r0
   26082:	6818      	ldr	r0, [r3, #0]
   26084:	f000 b802 	b.w	2608c <_realloc_r>
   26088:	200204d8 	.word	0x200204d8

0002608c <_realloc_r>:
   2608c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26090:	4617      	mov	r7, r2
   26092:	2900      	cmp	r1, #0
   26094:	f000 80ba 	beq.w	2620c <_realloc_r+0x180>
   26098:	460c      	mov	r4, r1
   2609a:	f107 050b 	add.w	r5, r7, #11
   2609e:	4680      	mov	r8, r0
   260a0:	f7ff ffe0 	bl	26064 <__malloc_lock>
   260a4:	f854 1c04 	ldr.w	r1, [r4, #-4]
   260a8:	2d16      	cmp	r5, #22
   260aa:	f1a4 0908 	sub.w	r9, r4, #8
   260ae:	f021 0603 	bic.w	r6, r1, #3
   260b2:	d85d      	bhi.n	26170 <_realloc_r+0xe4>
   260b4:	2210      	movs	r2, #16
   260b6:	2300      	movs	r3, #0
   260b8:	4615      	mov	r5, r2
   260ba:	42bd      	cmp	r5, r7
   260bc:	f0c0 80c2 	bcc.w	26244 <_realloc_r+0x1b8>
   260c0:	2b00      	cmp	r3, #0
   260c2:	f040 80bf 	bne.w	26244 <_realloc_r+0x1b8>
   260c6:	4296      	cmp	r6, r2
   260c8:	da7e      	bge.n	261c8 <_realloc_r+0x13c>
   260ca:	4bc6      	ldr	r3, [pc, #792]	; (263e4 <_realloc_r+0x358>)
   260cc:	eb09 0006 	add.w	r0, r9, r6
   260d0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   260d4:	4584      	cmp	ip, r0
   260d6:	f000 80bc 	beq.w	26252 <_realloc_r+0x1c6>
   260da:	f8d0 c004 	ldr.w	ip, [r0, #4]
   260de:	f02c 0301 	bic.w	r3, ip, #1
   260e2:	4403      	add	r3, r0
   260e4:	685b      	ldr	r3, [r3, #4]
   260e6:	07db      	lsls	r3, r3, #31
   260e8:	f100 8085 	bmi.w	261f6 <_realloc_r+0x16a>
   260ec:	f02c 0c03 	bic.w	ip, ip, #3
   260f0:	eb06 030c 	add.w	r3, r6, ip
   260f4:	4293      	cmp	r3, r2
   260f6:	f280 80fa 	bge.w	262ee <_realloc_r+0x262>
   260fa:	07cb      	lsls	r3, r1, #31
   260fc:	d40f      	bmi.n	2611e <_realloc_r+0x92>
   260fe:	f854 3c08 	ldr.w	r3, [r4, #-8]
   26102:	eba9 0a03 	sub.w	sl, r9, r3
   26106:	f8da 3004 	ldr.w	r3, [sl, #4]
   2610a:	f023 0103 	bic.w	r1, r3, #3
   2610e:	448c      	add	ip, r1
   26110:	44b4      	add	ip, r6
   26112:	4594      	cmp	ip, r2
   26114:	da31      	bge.n	2617a <_realloc_r+0xee>
   26116:	1873      	adds	r3, r6, r1
   26118:	4293      	cmp	r3, r2
   2611a:	f280 80ff 	bge.w	2631c <_realloc_r+0x290>
   2611e:	4639      	mov	r1, r7
   26120:	4640      	mov	r0, r8
   26122:	f7ff fc15 	bl	25950 <_malloc_r>
   26126:	4607      	mov	r7, r0
   26128:	b1e0      	cbz	r0, 26164 <_realloc_r+0xd8>
   2612a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2612e:	f1a0 0208 	sub.w	r2, r0, #8
   26132:	f023 0301 	bic.w	r3, r3, #1
   26136:	444b      	add	r3, r9
   26138:	4293      	cmp	r3, r2
   2613a:	f000 80de 	beq.w	262fa <_realloc_r+0x26e>
   2613e:	1f32      	subs	r2, r6, #4
   26140:	2a24      	cmp	r2, #36	; 0x24
   26142:	f200 810c 	bhi.w	2635e <_realloc_r+0x2d2>
   26146:	2a13      	cmp	r2, #19
   26148:	f200 80dd 	bhi.w	26306 <_realloc_r+0x27a>
   2614c:	4603      	mov	r3, r0
   2614e:	4622      	mov	r2, r4
   26150:	6811      	ldr	r1, [r2, #0]
   26152:	6019      	str	r1, [r3, #0]
   26154:	6851      	ldr	r1, [r2, #4]
   26156:	6059      	str	r1, [r3, #4]
   26158:	6892      	ldr	r2, [r2, #8]
   2615a:	609a      	str	r2, [r3, #8]
   2615c:	4621      	mov	r1, r4
   2615e:	4640      	mov	r0, r8
   26160:	f003 fd60 	bl	29c24 <_free_r>
   26164:	4640      	mov	r0, r8
   26166:	f7ff ff83 	bl	26070 <__malloc_unlock>
   2616a:	4638      	mov	r0, r7
   2616c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26170:	f025 0507 	bic.w	r5, r5, #7
   26174:	462a      	mov	r2, r5
   26176:	0feb      	lsrs	r3, r5, #31
   26178:	e79f      	b.n	260ba <_realloc_r+0x2e>
   2617a:	68c3      	ldr	r3, [r0, #12]
   2617c:	4657      	mov	r7, sl
   2617e:	6881      	ldr	r1, [r0, #8]
   26180:	1f32      	subs	r2, r6, #4
   26182:	60cb      	str	r3, [r1, #12]
   26184:	2a24      	cmp	r2, #36	; 0x24
   26186:	6099      	str	r1, [r3, #8]
   26188:	f857 1f08 	ldr.w	r1, [r7, #8]!
   2618c:	f8da 300c 	ldr.w	r3, [sl, #12]
   26190:	60cb      	str	r3, [r1, #12]
   26192:	6099      	str	r1, [r3, #8]
   26194:	f200 8112 	bhi.w	263bc <_realloc_r+0x330>
   26198:	2a13      	cmp	r2, #19
   2619a:	f240 810d 	bls.w	263b8 <_realloc_r+0x32c>
   2619e:	6823      	ldr	r3, [r4, #0]
   261a0:	2a1b      	cmp	r2, #27
   261a2:	f8ca 3008 	str.w	r3, [sl, #8]
   261a6:	6863      	ldr	r3, [r4, #4]
   261a8:	f8ca 300c 	str.w	r3, [sl, #12]
   261ac:	f200 8125 	bhi.w	263fa <_realloc_r+0x36e>
   261b0:	3408      	adds	r4, #8
   261b2:	f10a 0310 	add.w	r3, sl, #16
   261b6:	6822      	ldr	r2, [r4, #0]
   261b8:	4666      	mov	r6, ip
   261ba:	46d1      	mov	r9, sl
   261bc:	601a      	str	r2, [r3, #0]
   261be:	6862      	ldr	r2, [r4, #4]
   261c0:	605a      	str	r2, [r3, #4]
   261c2:	68a2      	ldr	r2, [r4, #8]
   261c4:	463c      	mov	r4, r7
   261c6:	609a      	str	r2, [r3, #8]
   261c8:	1b73      	subs	r3, r6, r5
   261ca:	2b0f      	cmp	r3, #15
   261cc:	d823      	bhi.n	26216 <_realloc_r+0x18a>
   261ce:	f8d9 2004 	ldr.w	r2, [r9, #4]
   261d2:	eb09 0106 	add.w	r1, r9, r6
   261d6:	f002 0201 	and.w	r2, r2, #1
   261da:	4332      	orrs	r2, r6
   261dc:	f8c9 2004 	str.w	r2, [r9, #4]
   261e0:	684b      	ldr	r3, [r1, #4]
   261e2:	f043 0301 	orr.w	r3, r3, #1
   261e6:	604b      	str	r3, [r1, #4]
   261e8:	4640      	mov	r0, r8
   261ea:	4627      	mov	r7, r4
   261ec:	f7ff ff40 	bl	26070 <__malloc_unlock>
   261f0:	4638      	mov	r0, r7
   261f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261f6:	07c9      	lsls	r1, r1, #31
   261f8:	d491      	bmi.n	2611e <_realloc_r+0x92>
   261fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
   261fe:	eba9 0a03 	sub.w	sl, r9, r3
   26202:	f8da 1004 	ldr.w	r1, [sl, #4]
   26206:	f021 0103 	bic.w	r1, r1, #3
   2620a:	e784      	b.n	26116 <_realloc_r+0x8a>
   2620c:	4611      	mov	r1, r2
   2620e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26212:	f7ff bb9d 	b.w	25950 <_malloc_r>
   26216:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2621a:	eb09 0205 	add.w	r2, r9, r5
   2621e:	444e      	add	r6, r9
   26220:	f043 0301 	orr.w	r3, r3, #1
   26224:	f001 0101 	and.w	r1, r1, #1
   26228:	4640      	mov	r0, r8
   2622a:	430d      	orrs	r5, r1
   2622c:	f102 0108 	add.w	r1, r2, #8
   26230:	f8c9 5004 	str.w	r5, [r9, #4]
   26234:	6053      	str	r3, [r2, #4]
   26236:	6873      	ldr	r3, [r6, #4]
   26238:	f043 0301 	orr.w	r3, r3, #1
   2623c:	6073      	str	r3, [r6, #4]
   2623e:	f003 fcf1 	bl	29c24 <_free_r>
   26242:	e7d1      	b.n	261e8 <_realloc_r+0x15c>
   26244:	230c      	movs	r3, #12
   26246:	2700      	movs	r7, #0
   26248:	f8c8 3000 	str.w	r3, [r8]
   2624c:	4638      	mov	r0, r7
   2624e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26252:	f8dc b004 	ldr.w	fp, [ip, #4]
   26256:	f105 0010 	add.w	r0, r5, #16
   2625a:	f02b 0b03 	bic.w	fp, fp, #3
   2625e:	eb06 0c0b 	add.w	ip, r6, fp
   26262:	4584      	cmp	ip, r0
   26264:	f280 8094 	bge.w	26390 <_realloc_r+0x304>
   26268:	07c9      	lsls	r1, r1, #31
   2626a:	f53f af58 	bmi.w	2611e <_realloc_r+0x92>
   2626e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   26272:	eba9 0a01 	sub.w	sl, r9, r1
   26276:	f8da 1004 	ldr.w	r1, [sl, #4]
   2627a:	f021 0103 	bic.w	r1, r1, #3
   2627e:	448b      	add	fp, r1
   26280:	44b3      	add	fp, r6
   26282:	4558      	cmp	r0, fp
   26284:	f73f af47 	bgt.w	26116 <_realloc_r+0x8a>
   26288:	4657      	mov	r7, sl
   2628a:	1f32      	subs	r2, r6, #4
   2628c:	f8da 100c 	ldr.w	r1, [sl, #12]
   26290:	f857 0f08 	ldr.w	r0, [r7, #8]!
   26294:	2a24      	cmp	r2, #36	; 0x24
   26296:	60c1      	str	r1, [r0, #12]
   26298:	6088      	str	r0, [r1, #8]
   2629a:	f200 80bc 	bhi.w	26416 <_realloc_r+0x38a>
   2629e:	2a13      	cmp	r2, #19
   262a0:	f240 80b7 	bls.w	26412 <_realloc_r+0x386>
   262a4:	6821      	ldr	r1, [r4, #0]
   262a6:	2a1b      	cmp	r2, #27
   262a8:	f8ca 1008 	str.w	r1, [sl, #8]
   262ac:	6861      	ldr	r1, [r4, #4]
   262ae:	f8ca 100c 	str.w	r1, [sl, #12]
   262b2:	f200 80c1 	bhi.w	26438 <_realloc_r+0x3ac>
   262b6:	3408      	adds	r4, #8
   262b8:	f10a 0210 	add.w	r2, sl, #16
   262bc:	6821      	ldr	r1, [r4, #0]
   262be:	6011      	str	r1, [r2, #0]
   262c0:	6861      	ldr	r1, [r4, #4]
   262c2:	6051      	str	r1, [r2, #4]
   262c4:	68a1      	ldr	r1, [r4, #8]
   262c6:	6091      	str	r1, [r2, #8]
   262c8:	ebab 0205 	sub.w	r2, fp, r5
   262cc:	eb0a 0105 	add.w	r1, sl, r5
   262d0:	4640      	mov	r0, r8
   262d2:	f042 0201 	orr.w	r2, r2, #1
   262d6:	6099      	str	r1, [r3, #8]
   262d8:	604a      	str	r2, [r1, #4]
   262da:	f8da 3004 	ldr.w	r3, [sl, #4]
   262de:	f003 0301 	and.w	r3, r3, #1
   262e2:	431d      	orrs	r5, r3
   262e4:	f8ca 5004 	str.w	r5, [sl, #4]
   262e8:	f7ff fec2 	bl	26070 <__malloc_unlock>
   262ec:	e780      	b.n	261f0 <_realloc_r+0x164>
   262ee:	68c2      	ldr	r2, [r0, #12]
   262f0:	461e      	mov	r6, r3
   262f2:	6883      	ldr	r3, [r0, #8]
   262f4:	60da      	str	r2, [r3, #12]
   262f6:	6093      	str	r3, [r2, #8]
   262f8:	e766      	b.n	261c8 <_realloc_r+0x13c>
   262fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
   262fe:	f023 0303 	bic.w	r3, r3, #3
   26302:	441e      	add	r6, r3
   26304:	e760      	b.n	261c8 <_realloc_r+0x13c>
   26306:	6823      	ldr	r3, [r4, #0]
   26308:	2a1b      	cmp	r2, #27
   2630a:	6003      	str	r3, [r0, #0]
   2630c:	6863      	ldr	r3, [r4, #4]
   2630e:	6043      	str	r3, [r0, #4]
   26310:	d829      	bhi.n	26366 <_realloc_r+0x2da>
   26312:	f104 0208 	add.w	r2, r4, #8
   26316:	f100 0308 	add.w	r3, r0, #8
   2631a:	e719      	b.n	26150 <_realloc_r+0xc4>
   2631c:	4657      	mov	r7, sl
   2631e:	1f32      	subs	r2, r6, #4
   26320:	f8da 100c 	ldr.w	r1, [sl, #12]
   26324:	f857 0f08 	ldr.w	r0, [r7, #8]!
   26328:	2a24      	cmp	r2, #36	; 0x24
   2632a:	60c1      	str	r1, [r0, #12]
   2632c:	6088      	str	r0, [r1, #8]
   2632e:	d827      	bhi.n	26380 <_realloc_r+0x2f4>
   26330:	2a13      	cmp	r2, #19
   26332:	d923      	bls.n	2637c <_realloc_r+0x2f0>
   26334:	6821      	ldr	r1, [r4, #0]
   26336:	2a1b      	cmp	r2, #27
   26338:	f8ca 1008 	str.w	r1, [sl, #8]
   2633c:	6861      	ldr	r1, [r4, #4]
   2633e:	f8ca 100c 	str.w	r1, [sl, #12]
   26342:	d843      	bhi.n	263cc <_realloc_r+0x340>
   26344:	3408      	adds	r4, #8
   26346:	f10a 0210 	add.w	r2, sl, #16
   2634a:	6821      	ldr	r1, [r4, #0]
   2634c:	461e      	mov	r6, r3
   2634e:	46d1      	mov	r9, sl
   26350:	6011      	str	r1, [r2, #0]
   26352:	6863      	ldr	r3, [r4, #4]
   26354:	6053      	str	r3, [r2, #4]
   26356:	68a3      	ldr	r3, [r4, #8]
   26358:	463c      	mov	r4, r7
   2635a:	6093      	str	r3, [r2, #8]
   2635c:	e734      	b.n	261c8 <_realloc_r+0x13c>
   2635e:	4621      	mov	r1, r4
   26360:	f004 fbd4 	bl	2ab0c <memmove>
   26364:	e6fa      	b.n	2615c <_realloc_r+0xd0>
   26366:	68a3      	ldr	r3, [r4, #8]
   26368:	2a24      	cmp	r2, #36	; 0x24
   2636a:	6083      	str	r3, [r0, #8]
   2636c:	68e3      	ldr	r3, [r4, #12]
   2636e:	60c3      	str	r3, [r0, #12]
   26370:	d03a      	beq.n	263e8 <_realloc_r+0x35c>
   26372:	f104 0210 	add.w	r2, r4, #16
   26376:	f100 0310 	add.w	r3, r0, #16
   2637a:	e6e9      	b.n	26150 <_realloc_r+0xc4>
   2637c:	463a      	mov	r2, r7
   2637e:	e7e4      	b.n	2634a <_realloc_r+0x2be>
   26380:	4621      	mov	r1, r4
   26382:	4638      	mov	r0, r7
   26384:	461e      	mov	r6, r3
   26386:	46d1      	mov	r9, sl
   26388:	463c      	mov	r4, r7
   2638a:	f004 fbbf 	bl	2ab0c <memmove>
   2638e:	e71b      	b.n	261c8 <_realloc_r+0x13c>
   26390:	ebac 0205 	sub.w	r2, ip, r5
   26394:	eb09 0105 	add.w	r1, r9, r5
   26398:	4640      	mov	r0, r8
   2639a:	4627      	mov	r7, r4
   2639c:	f042 0201 	orr.w	r2, r2, #1
   263a0:	6099      	str	r1, [r3, #8]
   263a2:	604a      	str	r2, [r1, #4]
   263a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   263a8:	f003 0301 	and.w	r3, r3, #1
   263ac:	431d      	orrs	r5, r3
   263ae:	f844 5c04 	str.w	r5, [r4, #-4]
   263b2:	f7ff fe5d 	bl	26070 <__malloc_unlock>
   263b6:	e71b      	b.n	261f0 <_realloc_r+0x164>
   263b8:	463b      	mov	r3, r7
   263ba:	e6fc      	b.n	261b6 <_realloc_r+0x12a>
   263bc:	4621      	mov	r1, r4
   263be:	4638      	mov	r0, r7
   263c0:	4666      	mov	r6, ip
   263c2:	46d1      	mov	r9, sl
   263c4:	463c      	mov	r4, r7
   263c6:	f004 fba1 	bl	2ab0c <memmove>
   263ca:	e6fd      	b.n	261c8 <_realloc_r+0x13c>
   263cc:	68a1      	ldr	r1, [r4, #8]
   263ce:	2a24      	cmp	r2, #36	; 0x24
   263d0:	f8ca 1010 	str.w	r1, [sl, #16]
   263d4:	68e1      	ldr	r1, [r4, #12]
   263d6:	f8ca 1014 	str.w	r1, [sl, #20]
   263da:	d022      	beq.n	26422 <_realloc_r+0x396>
   263dc:	3410      	adds	r4, #16
   263de:	f10a 0218 	add.w	r2, sl, #24
   263e2:	e7b2      	b.n	2634a <_realloc_r+0x2be>
   263e4:	200204dc 	.word	0x200204dc
   263e8:	6921      	ldr	r1, [r4, #16]
   263ea:	f104 0218 	add.w	r2, r4, #24
   263ee:	f100 0318 	add.w	r3, r0, #24
   263f2:	6101      	str	r1, [r0, #16]
   263f4:	6961      	ldr	r1, [r4, #20]
   263f6:	6141      	str	r1, [r0, #20]
   263f8:	e6aa      	b.n	26150 <_realloc_r+0xc4>
   263fa:	68a3      	ldr	r3, [r4, #8]
   263fc:	2a24      	cmp	r2, #36	; 0x24
   263fe:	f8ca 3010 	str.w	r3, [sl, #16]
   26402:	68e3      	ldr	r3, [r4, #12]
   26404:	f8ca 3014 	str.w	r3, [sl, #20]
   26408:	d022      	beq.n	26450 <_realloc_r+0x3c4>
   2640a:	3410      	adds	r4, #16
   2640c:	f10a 0318 	add.w	r3, sl, #24
   26410:	e6d1      	b.n	261b6 <_realloc_r+0x12a>
   26412:	463a      	mov	r2, r7
   26414:	e752      	b.n	262bc <_realloc_r+0x230>
   26416:	4621      	mov	r1, r4
   26418:	4638      	mov	r0, r7
   2641a:	f004 fb77 	bl	2ab0c <memmove>
   2641e:	4b17      	ldr	r3, [pc, #92]	; (2647c <_realloc_r+0x3f0>)
   26420:	e752      	b.n	262c8 <_realloc_r+0x23c>
   26422:	6921      	ldr	r1, [r4, #16]
   26424:	f10a 0220 	add.w	r2, sl, #32
   26428:	3418      	adds	r4, #24
   2642a:	f8ca 1018 	str.w	r1, [sl, #24]
   2642e:	f854 1c04 	ldr.w	r1, [r4, #-4]
   26432:	f8ca 101c 	str.w	r1, [sl, #28]
   26436:	e788      	b.n	2634a <_realloc_r+0x2be>
   26438:	68a1      	ldr	r1, [r4, #8]
   2643a:	2a24      	cmp	r2, #36	; 0x24
   2643c:	f8ca 1010 	str.w	r1, [sl, #16]
   26440:	68e1      	ldr	r1, [r4, #12]
   26442:	f8ca 1014 	str.w	r1, [sl, #20]
   26446:	d00e      	beq.n	26466 <_realloc_r+0x3da>
   26448:	3410      	adds	r4, #16
   2644a:	f10a 0218 	add.w	r2, sl, #24
   2644e:	e735      	b.n	262bc <_realloc_r+0x230>
   26450:	6922      	ldr	r2, [r4, #16]
   26452:	f10a 0320 	add.w	r3, sl, #32
   26456:	3418      	adds	r4, #24
   26458:	f8ca 2018 	str.w	r2, [sl, #24]
   2645c:	f854 2c04 	ldr.w	r2, [r4, #-4]
   26460:	f8ca 201c 	str.w	r2, [sl, #28]
   26464:	e6a7      	b.n	261b6 <_realloc_r+0x12a>
   26466:	6921      	ldr	r1, [r4, #16]
   26468:	f10a 0220 	add.w	r2, sl, #32
   2646c:	3418      	adds	r4, #24
   2646e:	f8ca 1018 	str.w	r1, [sl, #24]
   26472:	f854 1c04 	ldr.w	r1, [r4, #-4]
   26476:	f8ca 101c 	str.w	r1, [sl, #28]
   2647a:	e71f      	b.n	262bc <_realloc_r+0x230>
   2647c:	200204dc 	.word	0x200204dc

00026480 <_sbrk_r>:
   26480:	b538      	push	{r3, r4, r5, lr}
   26482:	2200      	movs	r2, #0
   26484:	4d06      	ldr	r5, [pc, #24]	; (264a0 <_sbrk_r+0x20>)
   26486:	4604      	mov	r4, r0
   26488:	4608      	mov	r0, r1
   2648a:	602a      	str	r2, [r5, #0]
   2648c:	f7ee ffdc 	bl	15448 <_sbrk>
   26490:	1c43      	adds	r3, r0, #1
   26492:	d000      	beq.n	26496 <_sbrk_r+0x16>
   26494:	bd38      	pop	{r3, r4, r5, pc}
   26496:	682b      	ldr	r3, [r5, #0]
   26498:	2b00      	cmp	r3, #0
   2649a:	d0fb      	beq.n	26494 <_sbrk_r+0x14>
   2649c:	6023      	str	r3, [r4, #0]
   2649e:	bd38      	pop	{r3, r4, r5, pc}
   264a0:	20026424 	.word	0x20026424

000264a4 <snprintf>:
   264a4:	b40c      	push	{r2, r3}
   264a6:	4b20      	ldr	r3, [pc, #128]	; (26528 <snprintf+0x84>)
   264a8:	b570      	push	{r4, r5, r6, lr}
   264aa:	1e0c      	subs	r4, r1, #0
   264ac:	b09c      	sub	sp, #112	; 0x70
   264ae:	681d      	ldr	r5, [r3, #0]
   264b0:	db35      	blt.n	2651e <snprintf+0x7a>
   264b2:	f44f 7302 	mov.w	r3, #520	; 0x208
   264b6:	9002      	str	r0, [sp, #8]
   264b8:	9006      	str	r0, [sp, #24]
   264ba:	f8ad 3014 	strh.w	r3, [sp, #20]
   264be:	ab21      	add	r3, sp, #132	; 0x84
   264c0:	d018      	beq.n	264f4 <snprintf+0x50>
   264c2:	1e61      	subs	r1, r4, #1
   264c4:	f64f 74ff 	movw	r4, #65535	; 0xffff
   264c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   264ca:	4628      	mov	r0, r5
   264cc:	9104      	str	r1, [sp, #16]
   264ce:	9107      	str	r1, [sp, #28]
   264d0:	a902      	add	r1, sp, #8
   264d2:	9301      	str	r3, [sp, #4]
   264d4:	f8ad 4016 	strh.w	r4, [sp, #22]
   264d8:	f7e8 f9ee 	bl	e8b8 <_svfprintf_r>
   264dc:	1c42      	adds	r2, r0, #1
   264de:	da01      	bge.n	264e4 <snprintf+0x40>
   264e0:	238b      	movs	r3, #139	; 0x8b
   264e2:	602b      	str	r3, [r5, #0]
   264e4:	9b02      	ldr	r3, [sp, #8]
   264e6:	2200      	movs	r2, #0
   264e8:	701a      	strb	r2, [r3, #0]
   264ea:	b01c      	add	sp, #112	; 0x70
   264ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   264f0:	b002      	add	sp, #8
   264f2:	4770      	bx	lr
   264f4:	f64f 76ff 	movw	r6, #65535	; 0xffff
   264f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   264fa:	a902      	add	r1, sp, #8
   264fc:	4628      	mov	r0, r5
   264fe:	9301      	str	r3, [sp, #4]
   26500:	9404      	str	r4, [sp, #16]
   26502:	9407      	str	r4, [sp, #28]
   26504:	f8ad 6016 	strh.w	r6, [sp, #22]
   26508:	f7e8 f9d6 	bl	e8b8 <_svfprintf_r>
   2650c:	1c43      	adds	r3, r0, #1
   2650e:	da01      	bge.n	26514 <snprintf+0x70>
   26510:	238b      	movs	r3, #139	; 0x8b
   26512:	602b      	str	r3, [r5, #0]
   26514:	b01c      	add	sp, #112	; 0x70
   26516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2651a:	b002      	add	sp, #8
   2651c:	4770      	bx	lr
   2651e:	238b      	movs	r3, #139	; 0x8b
   26520:	f04f 30ff 	mov.w	r0, #4294967295
   26524:	602b      	str	r3, [r5, #0]
   26526:	e7f5      	b.n	26514 <snprintf+0x70>
   26528:	200204d8 	.word	0x200204d8

0002652c <__sprintf_chk>:
   2652c:	b408      	push	{r3}
   2652e:	b510      	push	{r4, lr}
   26530:	b083      	sub	sp, #12
   26532:	1e14      	subs	r4, r2, #0
   26534:	ab05      	add	r3, sp, #20
   26536:	f853 1b04 	ldr.w	r1, [r3], #4
   2653a:	9301      	str	r3, [sp, #4]
   2653c:	db0c      	blt.n	26558 <__sprintf_chk+0x2c>
   2653e:	460a      	mov	r2, r1
   26540:	4621      	mov	r1, r4
   26542:	f002 fffb 	bl	2953c <vsnprintf>
   26546:	2800      	cmp	r0, #0
   26548:	db01      	blt.n	2654e <__sprintf_chk+0x22>
   2654a:	42a0      	cmp	r0, r4
   2654c:	d20c      	bcs.n	26568 <__sprintf_chk+0x3c>
   2654e:	b003      	add	sp, #12
   26550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26554:	b001      	add	sp, #4
   26556:	4770      	bx	lr
   26558:	461a      	mov	r2, r3
   2655a:	f003 f815 	bl	29588 <vsprintf>
   2655e:	b003      	add	sp, #12
   26560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26564:	b001      	add	sp, #4
   26566:	4770      	bx	lr
   26568:	f7ee ff90 	bl	1548c <__chk_fail>

0002656c <sscanf>:
   2656c:	b40e      	push	{r1, r2, r3}
   2656e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26570:	b09e      	sub	sp, #120	; 0x78
   26572:	f44f 7101 	mov.w	r1, #516	; 0x204
   26576:	2500      	movs	r5, #0
   26578:	4f10      	ldr	r7, [pc, #64]	; (265bc <sscanf+0x50>)
   2657a:	ac23      	add	r4, sp, #140	; 0x8c
   2657c:	f8ad 101c 	strh.w	r1, [sp, #28]
   26580:	9004      	str	r0, [sp, #16]
   26582:	f64f 76ff 	movw	r6, #65535	; 0xffff
   26586:	f854 2b04 	ldr.w	r2, [r4], #4
   2658a:	9008      	str	r0, [sp, #32]
   2658c:	9201      	str	r2, [sp, #4]
   2658e:	f000 f929 	bl	267e4 <strlen>
   26592:	4b0b      	ldr	r3, [pc, #44]	; (265c0 <sscanf+0x54>)
   26594:	4601      	mov	r1, r0
   26596:	9a01      	ldr	r2, [sp, #4]
   26598:	9105      	str	r1, [sp, #20]
   2659a:	9109      	str	r1, [sp, #36]	; 0x24
   2659c:	a904      	add	r1, sp, #16
   2659e:	6818      	ldr	r0, [r3, #0]
   265a0:	4623      	mov	r3, r4
   265a2:	9403      	str	r4, [sp, #12]
   265a4:	970c      	str	r7, [sp, #48]	; 0x30
   265a6:	9510      	str	r5, [sp, #64]	; 0x40
   265a8:	9515      	str	r5, [sp, #84]	; 0x54
   265aa:	f8ad 601e 	strh.w	r6, [sp, #30]
   265ae:	f000 fd11 	bl	26fd4 <__ssvfscanf_r>
   265b2:	b01e      	add	sp, #120	; 0x78
   265b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   265b8:	b003      	add	sp, #12
   265ba:	4770      	bx	lr
   265bc:	000265e9 	.word	0x000265e9
   265c0:	200204d8 	.word	0x200204d8

000265c4 <__sread>:
   265c4:	b510      	push	{r4, lr}
   265c6:	460c      	mov	r4, r1
   265c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   265cc:	f004 ffb4 	bl	2b538 <_read_r>
   265d0:	2800      	cmp	r0, #0
   265d2:	db03      	blt.n	265dc <__sread+0x18>
   265d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   265d6:	4403      	add	r3, r0
   265d8:	6523      	str	r3, [r4, #80]	; 0x50
   265da:	bd10      	pop	{r4, pc}
   265dc:	89a3      	ldrh	r3, [r4, #12]
   265de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   265e2:	81a3      	strh	r3, [r4, #12]
   265e4:	bd10      	pop	{r4, pc}
   265e6:	bf00      	nop

000265e8 <__seofread>:
   265e8:	2000      	movs	r0, #0
   265ea:	4770      	bx	lr

000265ec <__swrite>:
   265ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265f0:	460c      	mov	r4, r1
   265f2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   265f6:	461f      	mov	r7, r3
   265f8:	4616      	mov	r6, r2
   265fa:	05cb      	lsls	r3, r1, #23
   265fc:	4605      	mov	r5, r0
   265fe:	d40b      	bmi.n	26618 <__swrite+0x2c>
   26600:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   26604:	463b      	mov	r3, r7
   26606:	4632      	mov	r2, r6
   26608:	4628      	mov	r0, r5
   2660a:	81a1      	strh	r1, [r4, #12]
   2660c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26614:	f002 bfc4 	b.w	295a0 <_write_r>
   26618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2661c:	2302      	movs	r3, #2
   2661e:	2200      	movs	r2, #0
   26620:	f004 f9aa 	bl	2a978 <_lseek_r>
   26624:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   26628:	e7ea      	b.n	26600 <__swrite+0x14>
   2662a:	bf00      	nop

0002662c <__sseek>:
   2662c:	b510      	push	{r4, lr}
   2662e:	460c      	mov	r4, r1
   26630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26634:	f004 f9a0 	bl	2a978 <_lseek_r>
   26638:	1c42      	adds	r2, r0, #1
   2663a:	89a3      	ldrh	r3, [r4, #12]
   2663c:	d004      	beq.n	26648 <__sseek+0x1c>
   2663e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   26642:	6520      	str	r0, [r4, #80]	; 0x50
   26644:	81a3      	strh	r3, [r4, #12]
   26646:	bd10      	pop	{r4, pc}
   26648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2664c:	81a3      	strh	r3, [r4, #12]
   2664e:	bd10      	pop	{r4, pc}

00026650 <__sclose>:
   26650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26654:	f003 b82a 	b.w	296ac <_close_r>

00026658 <strchr>:
   26658:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   2665c:	4603      	mov	r3, r0
   2665e:	d044      	beq.n	266ea <strchr+0x92>
   26660:	0782      	lsls	r2, r0, #30
   26662:	d132      	bne.n	266ca <strchr+0x72>
   26664:	b470      	push	{r4, r5, r6}
   26666:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   2666a:	6803      	ldr	r3, [r0, #0]
   2666c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   26670:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26674:	ea86 0403 	eor.w	r4, r6, r3
   26678:	ea22 0203 	bic.w	r2, r2, r3
   2667c:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   26680:	ea23 0304 	bic.w	r3, r3, r4
   26684:	4313      	orrs	r3, r2
   26686:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2668a:	d10f      	bne.n	266ac <strchr+0x54>
   2668c:	f850 4f04 	ldr.w	r4, [r0, #4]!
   26690:	ea84 0506 	eor.w	r5, r4, r6
   26694:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   26698:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2669c:	ea23 0304 	bic.w	r3, r3, r4
   266a0:	ea22 0205 	bic.w	r2, r2, r5
   266a4:	4313      	orrs	r3, r2
   266a6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   266aa:	d0ef      	beq.n	2668c <strchr+0x34>
   266ac:	7803      	ldrb	r3, [r0, #0]
   266ae:	b923      	cbnz	r3, 266ba <strchr+0x62>
   266b0:	e036      	b.n	26720 <strchr+0xc8>
   266b2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   266b6:	2b00      	cmp	r3, #0
   266b8:	d032      	beq.n	26720 <strchr+0xc8>
   266ba:	4299      	cmp	r1, r3
   266bc:	d1f9      	bne.n	266b2 <strchr+0x5a>
   266be:	e030      	b.n	26722 <strchr+0xca>
   266c0:	428a      	cmp	r2, r1
   266c2:	d011      	beq.n	266e8 <strchr+0x90>
   266c4:	079a      	lsls	r2, r3, #30
   266c6:	4618      	mov	r0, r3
   266c8:	d0cc      	beq.n	26664 <strchr+0xc>
   266ca:	4618      	mov	r0, r3
   266cc:	f813 2b01 	ldrb.w	r2, [r3], #1
   266d0:	2a00      	cmp	r2, #0
   266d2:	d1f5      	bne.n	266c0 <strchr+0x68>
   266d4:	4610      	mov	r0, r2
   266d6:	4770      	bx	lr
   266d8:	0799      	lsls	r1, r3, #30
   266da:	4618      	mov	r0, r3
   266dc:	d007      	beq.n	266ee <strchr+0x96>
   266de:	4618      	mov	r0, r3
   266e0:	3301      	adds	r3, #1
   266e2:	7802      	ldrb	r2, [r0, #0]
   266e4:	2a00      	cmp	r2, #0
   266e6:	d1f7      	bne.n	266d8 <strchr+0x80>
   266e8:	4770      	bx	lr
   266ea:	0782      	lsls	r2, r0, #30
   266ec:	d1f7      	bne.n	266de <strchr+0x86>
   266ee:	6802      	ldr	r2, [r0, #0]
   266f0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   266f4:	ea23 0302 	bic.w	r3, r3, r2
   266f8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   266fc:	d108      	bne.n	26710 <strchr+0xb8>
   266fe:	f850 2f04 	ldr.w	r2, [r0, #4]!
   26702:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   26706:	ea23 0302 	bic.w	r3, r3, r2
   2670a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2670e:	d0f6      	beq.n	266fe <strchr+0xa6>
   26710:	7803      	ldrb	r3, [r0, #0]
   26712:	2b00      	cmp	r3, #0
   26714:	d0e8      	beq.n	266e8 <strchr+0x90>
   26716:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2671a:	2b00      	cmp	r3, #0
   2671c:	d1fb      	bne.n	26716 <strchr+0xbe>
   2671e:	4770      	bx	lr
   26720:	4618      	mov	r0, r3
   26722:	bc70      	pop	{r4, r5, r6}
   26724:	4770      	bx	lr
   26726:	bf00      	nop

00026728 <strcpy>:
   26728:	ea80 0201 	eor.w	r2, r0, r1
   2672c:	4684      	mov	ip, r0
   2672e:	f012 0f03 	tst.w	r2, #3
   26732:	d14f      	bne.n	267d4 <strcpy+0xac>
   26734:	f011 0f03 	tst.w	r1, #3
   26738:	d132      	bne.n	267a0 <strcpy+0x78>
   2673a:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2673e:	f011 0f04 	tst.w	r1, #4
   26742:	f851 3b04 	ldr.w	r3, [r1], #4
   26746:	d00b      	beq.n	26760 <strcpy+0x38>
   26748:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2674c:	439a      	bics	r2, r3
   2674e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   26752:	bf04      	itt	eq
   26754:	f84c 3b04 	streq.w	r3, [ip], #4
   26758:	f851 3b04 	ldreq.w	r3, [r1], #4
   2675c:	d116      	bne.n	2678c <strcpy+0x64>
   2675e:	bf00      	nop
   26760:	f851 4b04 	ldr.w	r4, [r1], #4
   26764:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26768:	439a      	bics	r2, r3
   2676a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2676e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   26772:	d10b      	bne.n	2678c <strcpy+0x64>
   26774:	f84c 3b04 	str.w	r3, [ip], #4
   26778:	43a2      	bics	r2, r4
   2677a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2677e:	bf04      	itt	eq
   26780:	f851 3b04 	ldreq.w	r3, [r1], #4
   26784:	f84c 4b04 	streq.w	r4, [ip], #4
   26788:	d0ea      	beq.n	26760 <strcpy+0x38>
   2678a:	4623      	mov	r3, r4
   2678c:	f80c 3b01 	strb.w	r3, [ip], #1
   26790:	f013 0fff 	tst.w	r3, #255	; 0xff
   26794:	ea4f 2333 	mov.w	r3, r3, ror #8
   26798:	d1f8      	bne.n	2678c <strcpy+0x64>
   2679a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2679e:	4770      	bx	lr
   267a0:	f011 0f01 	tst.w	r1, #1
   267a4:	d006      	beq.n	267b4 <strcpy+0x8c>
   267a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   267aa:	f80c 2b01 	strb.w	r2, [ip], #1
   267ae:	2a00      	cmp	r2, #0
   267b0:	bf08      	it	eq
   267b2:	4770      	bxeq	lr
   267b4:	f011 0f02 	tst.w	r1, #2
   267b8:	d0bf      	beq.n	2673a <strcpy+0x12>
   267ba:	f831 2b02 	ldrh.w	r2, [r1], #2
   267be:	f012 0fff 	tst.w	r2, #255	; 0xff
   267c2:	bf16      	itet	ne
   267c4:	f82c 2b02 	strhne.w	r2, [ip], #2
   267c8:	f88c 2000 	strbeq.w	r2, [ip]
   267cc:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   267d0:	d1b3      	bne.n	2673a <strcpy+0x12>
   267d2:	4770      	bx	lr
   267d4:	f811 2b01 	ldrb.w	r2, [r1], #1
   267d8:	f80c 2b01 	strb.w	r2, [ip], #1
   267dc:	2a00      	cmp	r2, #0
   267de:	d1f9      	bne.n	267d4 <strcpy+0xac>
   267e0:	4770      	bx	lr
   267e2:	bf00      	nop

000267e4 <strlen>:
   267e4:	f020 0103 	bic.w	r1, r0, #3
   267e8:	f010 0003 	ands.w	r0, r0, #3
   267ec:	f1c0 0000 	rsb	r0, r0, #0
   267f0:	f851 3b04 	ldr.w	r3, [r1], #4
   267f4:	f100 0c04 	add.w	ip, r0, #4
   267f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   267fc:	f06f 0200 	mvn.w	r2, #0
   26800:	bf1c      	itt	ne
   26802:	fa22 f20c 	lsrne.w	r2, r2, ip
   26806:	4313      	orrne	r3, r2
   26808:	f04f 0c01 	mov.w	ip, #1
   2680c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   26810:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   26814:	eba3 020c 	sub.w	r2, r3, ip
   26818:	ea22 0203 	bic.w	r2, r2, r3
   2681c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   26820:	bf04      	itt	eq
   26822:	f851 3b04 	ldreq.w	r3, [r1], #4
   26826:	3004      	addeq	r0, #4
   26828:	d0f4      	beq.n	26814 <strlen+0x30>
   2682a:	f1c2 0100 	rsb	r1, r2, #0
   2682e:	ea02 0201 	and.w	r2, r2, r1
   26832:	fab2 f282 	clz	r2, r2
   26836:	f1c2 021f 	rsb	r2, r2, #31
   2683a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   2683e:	4770      	bx	lr

00026840 <strncmp>:
   26840:	b3b2      	cbz	r2, 268b0 <strncmp+0x70>
   26842:	460b      	mov	r3, r1
   26844:	b4f0      	push	{r4, r5, r6, r7}
   26846:	ea40 0501 	orr.w	r5, r0, r1
   2684a:	4604      	mov	r4, r0
   2684c:	07ad      	lsls	r5, r5, #30
   2684e:	d029      	beq.n	268a4 <strncmp+0x64>
   26850:	7820      	ldrb	r0, [r4, #0]
   26852:	780e      	ldrb	r6, [r1, #0]
   26854:	4286      	cmp	r6, r0
   26856:	d10f      	bne.n	26878 <strncmp+0x38>
   26858:	b33e      	cbz	r6, 268aa <strncmp+0x6a>
   2685a:	2a01      	cmp	r2, #1
   2685c:	d025      	beq.n	268aa <strncmp+0x6a>
   2685e:	4625      	mov	r5, r4
   26860:	e002      	b.n	26868 <strncmp+0x28>
   26862:	42dc      	cmn	r4, r3
   26864:	d021      	beq.n	268aa <strncmp+0x6a>
   26866:	b300      	cbz	r0, 268aa <strncmp+0x6a>
   26868:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   2686c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   26870:	43eb      	mvns	r3, r5
   26872:	42b0      	cmp	r0, r6
   26874:	4413      	add	r3, r2
   26876:	d0f4      	beq.n	26862 <strncmp+0x22>
   26878:	1b80      	subs	r0, r0, r6
   2687a:	bcf0      	pop	{r4, r5, r6, r7}
   2687c:	4770      	bx	lr
   2687e:	4619      	mov	r1, r3
   26880:	4604      	mov	r4, r0
   26882:	f850 5b04 	ldr.w	r5, [r0], #4
   26886:	3304      	adds	r3, #4
   26888:	680f      	ldr	r7, [r1, #0]
   2688a:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   2688e:	42bd      	cmp	r5, r7
   26890:	ea26 0505 	bic.w	r5, r6, r5
   26894:	d1dc      	bne.n	26850 <strncmp+0x10>
   26896:	3a04      	subs	r2, #4
   26898:	4604      	mov	r4, r0
   2689a:	4619      	mov	r1, r3
   2689c:	d005      	beq.n	268aa <strncmp+0x6a>
   2689e:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   268a2:	d102      	bne.n	268aa <strncmp+0x6a>
   268a4:	2a03      	cmp	r2, #3
   268a6:	d8ea      	bhi.n	2687e <strncmp+0x3e>
   268a8:	e7d2      	b.n	26850 <strncmp+0x10>
   268aa:	2000      	movs	r0, #0
   268ac:	bcf0      	pop	{r4, r5, r6, r7}
   268ae:	4770      	bx	lr
   268b0:	4610      	mov	r0, r2
   268b2:	4770      	bx	lr

000268b4 <strncpy>:
   268b4:	b470      	push	{r4, r5, r6}
   268b6:	ea40 0401 	orr.w	r4, r0, r1
   268ba:	07a3      	lsls	r3, r4, #30
   268bc:	d101      	bne.n	268c2 <strncpy+0xe>
   268be:	2a03      	cmp	r2, #3
   268c0:	d80f      	bhi.n	268e2 <strncpy+0x2e>
   268c2:	4604      	mov	r4, r0
   268c4:	1e4d      	subs	r5, r1, #1
   268c6:	e007      	b.n	268d8 <strncpy+0x24>
   268c8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   268cc:	1e56      	subs	r6, r2, #1
   268ce:	f803 1b01 	strb.w	r1, [r3], #1
   268d2:	b1c9      	cbz	r1, 26908 <strncpy+0x54>
   268d4:	4632      	mov	r2, r6
   268d6:	461c      	mov	r4, r3
   268d8:	4623      	mov	r3, r4
   268da:	2a00      	cmp	r2, #0
   268dc:	d1f4      	bne.n	268c8 <strncpy+0x14>
   268de:	bc70      	pop	{r4, r5, r6}
   268e0:	4770      	bx	lr
   268e2:	460b      	mov	r3, r1
   268e4:	4604      	mov	r4, r0
   268e6:	4619      	mov	r1, r3
   268e8:	f853 6b04 	ldr.w	r6, [r3], #4
   268ec:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   268f0:	ea25 0506 	bic.w	r5, r5, r6
   268f4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   268f8:	d1e4      	bne.n	268c4 <strncpy+0x10>
   268fa:	3a04      	subs	r2, #4
   268fc:	4619      	mov	r1, r3
   268fe:	f844 6b04 	str.w	r6, [r4], #4
   26902:	2a03      	cmp	r2, #3
   26904:	d8ef      	bhi.n	268e6 <strncpy+0x32>
   26906:	e7dd      	b.n	268c4 <strncpy+0x10>
   26908:	2e00      	cmp	r6, #0
   2690a:	d0e8      	beq.n	268de <strncpy+0x2a>
   2690c:	4422      	add	r2, r4
   2690e:	f803 1b01 	strb.w	r1, [r3], #1
   26912:	4293      	cmp	r3, r2
   26914:	d1fb      	bne.n	2690e <strncpy+0x5a>
   26916:	bc70      	pop	{r4, r5, r6}
   26918:	4770      	bx	lr
   2691a:	bf00      	nop

0002691c <two_way_long_needle>:
   2691c:	2b01      	cmp	r3, #1
   2691e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26922:	461d      	mov	r5, r3
   26924:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   26928:	4682      	mov	sl, r0
   2692a:	460f      	mov	r7, r1
   2692c:	4690      	mov	r8, r2
   2692e:	f04f 0301 	mov.w	r3, #1
   26932:	f240 814d 	bls.w	26bd0 <two_way_long_needle+0x2b4>
   26936:	2400      	movs	r4, #0
   26938:	f04f 30ff 	mov.w	r0, #4294967295
   2693c:	4619      	mov	r1, r3
   2693e:	469c      	mov	ip, r3
   26940:	e006      	b.n	26950 <two_way_long_needle+0x34>
   26942:	eba3 0c00 	sub.w	ip, r3, r0
   26946:	461c      	mov	r4, r3
   26948:	2101      	movs	r1, #1
   2694a:	190b      	adds	r3, r1, r4
   2694c:	429d      	cmp	r5, r3
   2694e:	d910      	bls.n	26972 <two_way_long_needle+0x56>
   26950:	eb08 0200 	add.w	r2, r8, r0
   26954:	f818 6003 	ldrb.w	r6, [r8, r3]
   26958:	5c52      	ldrb	r2, [r2, r1]
   2695a:	4296      	cmp	r6, r2
   2695c:	d3f1      	bcc.n	26942 <two_way_long_needle+0x26>
   2695e:	f000 8083 	beq.w	26a68 <two_way_long_needle+0x14c>
   26962:	f04f 0c01 	mov.w	ip, #1
   26966:	4620      	mov	r0, r4
   26968:	4661      	mov	r1, ip
   2696a:	4464      	add	r4, ip
   2696c:	190b      	adds	r3, r1, r4
   2696e:	429d      	cmp	r5, r3
   26970:	d8ee      	bhi.n	26950 <two_way_long_needle+0x34>
   26972:	f8cd c004 	str.w	ip, [sp, #4]
   26976:	f04f 0c01 	mov.w	ip, #1
   2697a:	2400      	movs	r4, #0
   2697c:	f04f 36ff 	mov.w	r6, #4294967295
   26980:	4661      	mov	r1, ip
   26982:	4663      	mov	r3, ip
   26984:	e006      	b.n	26994 <two_way_long_needle+0x78>
   26986:	eba3 0c06 	sub.w	ip, r3, r6
   2698a:	461c      	mov	r4, r3
   2698c:	2101      	movs	r1, #1
   2698e:	1863      	adds	r3, r4, r1
   26990:	429d      	cmp	r5, r3
   26992:	d90f      	bls.n	269b4 <two_way_long_needle+0x98>
   26994:	eb08 0201 	add.w	r2, r8, r1
   26998:	f818 e003 	ldrb.w	lr, [r8, r3]
   2699c:	5d92      	ldrb	r2, [r2, r6]
   2699e:	4596      	cmp	lr, r2
   269a0:	d8f1      	bhi.n	26986 <two_way_long_needle+0x6a>
   269a2:	d069      	beq.n	26a78 <two_way_long_needle+0x15c>
   269a4:	f04f 0c01 	mov.w	ip, #1
   269a8:	4626      	mov	r6, r4
   269aa:	4661      	mov	r1, ip
   269ac:	4464      	add	r4, ip
   269ae:	1863      	adds	r3, r4, r1
   269b0:	429d      	cmp	r5, r3
   269b2:	d8ef      	bhi.n	26994 <two_way_long_needle+0x78>
   269b4:	3601      	adds	r6, #1
   269b6:	f100 0b01 	add.w	fp, r0, #1
   269ba:	45b3      	cmp	fp, r6
   269bc:	d802      	bhi.n	269c4 <two_way_long_needle+0xa8>
   269be:	46b3      	mov	fp, r6
   269c0:	f8cd c004 	str.w	ip, [sp, #4]
   269c4:	ab05      	add	r3, sp, #20
   269c6:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   269ca:	f843 5f04 	str.w	r5, [r3, #4]!
   269ce:	4293      	cmp	r3, r2
   269d0:	d1fb      	bne.n	269ca <two_way_long_needle+0xae>
   269d2:	2d00      	cmp	r5, #0
   269d4:	f000 80f7 	beq.w	26bc6 <two_way_long_needle+0x2aa>
   269d8:	1e6c      	subs	r4, r5, #1
   269da:	ae06      	add	r6, sp, #24
   269dc:	f108 32ff 	add.w	r2, r8, #4294967295
   269e0:	eb08 0004 	add.w	r0, r8, r4
   269e4:	9600      	str	r6, [sp, #0]
   269e6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   269ea:	43d3      	mvns	r3, r2
   269ec:	4282      	cmp	r2, r0
   269ee:	442b      	add	r3, r5
   269f0:	4443      	add	r3, r8
   269f2:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
   269f6:	d1f6      	bne.n	269e6 <two_way_long_needle+0xca>
   269f8:	9e01      	ldr	r6, [sp, #4]
   269fa:	465a      	mov	r2, fp
   269fc:	4640      	mov	r0, r8
   269fe:	eb08 0106 	add.w	r1, r8, r6
   26a02:	f7ff fab1 	bl	25f68 <memcmp>
   26a06:	2800      	cmp	r0, #0
   26a08:	f040 8089 	bne.w	26b1e <two_way_long_needle+0x202>
   26a0c:	f10b 33ff 	add.w	r3, fp, #4294967295
   26a10:	4681      	mov	r9, r0
   26a12:	f8cd 8008 	str.w	r8, [sp, #8]
   26a16:	9305      	str	r3, [sp, #20]
   26a18:	1bab      	subs	r3, r5, r6
   26a1a:	4606      	mov	r6, r0
   26a1c:	9303      	str	r3, [sp, #12]
   26a1e:	eb0a 0806 	add.w	r8, sl, r6
   26a22:	9a00      	ldr	r2, [sp, #0]
   26a24:	f818 3004 	ldrb.w	r3, [r8, r4]
   26a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   26a2c:	b35b      	cbz	r3, 26a86 <two_way_long_needle+0x16a>
   26a2e:	f1b9 0f00 	cmp.w	r9, #0
   26a32:	d004      	beq.n	26a3e <two_way_long_needle+0x122>
   26a34:	9a01      	ldr	r2, [sp, #4]
   26a36:	4293      	cmp	r3, r2
   26a38:	9a03      	ldr	r2, [sp, #12]
   26a3a:	bf38      	it	cc
   26a3c:	4613      	movcc	r3, r2
   26a3e:	441e      	add	r6, r3
   26a40:	f04f 0900 	mov.w	r9, #0
   26a44:	1b7b      	subs	r3, r7, r5
   26a46:	42b3      	cmp	r3, r6
   26a48:	d2e9      	bcs.n	26a1e <two_way_long_needle+0x102>
   26a4a:	eb0a 0007 	add.w	r0, sl, r7
   26a4e:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
   26a52:	f004 fe75 	bl	2b740 <strnlen>
   26a56:	4407      	add	r7, r0
   26a58:	1b7b      	subs	r3, r7, r5
   26a5a:	42b3      	cmp	r3, r6
   26a5c:	d2df      	bcs.n	26a1e <two_way_long_needle+0x102>
   26a5e:	2000      	movs	r0, #0
   26a60:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   26a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a68:	458c      	cmp	ip, r1
   26a6a:	f101 0101 	add.w	r1, r1, #1
   26a6e:	f47f af6c 	bne.w	2694a <two_way_long_needle+0x2e>
   26a72:	4464      	add	r4, ip
   26a74:	2101      	movs	r1, #1
   26a76:	e768      	b.n	2694a <two_way_long_needle+0x2e>
   26a78:	458c      	cmp	ip, r1
   26a7a:	f101 0101 	add.w	r1, r1, #1
   26a7e:	d186      	bne.n	2698e <two_way_long_needle+0x72>
   26a80:	4464      	add	r4, ip
   26a82:	2101      	movs	r1, #1
   26a84:	e783      	b.n	2698e <two_way_long_needle+0x72>
   26a86:	45cb      	cmp	fp, r9
   26a88:	465b      	mov	r3, fp
   26a8a:	bf38      	it	cc
   26a8c:	464b      	movcc	r3, r9
   26a8e:	42a3      	cmp	r3, r4
   26a90:	d215      	bcs.n	26abe <two_way_long_needle+0x1a2>
   26a92:	1e59      	subs	r1, r3, #1
   26a94:	199a      	adds	r2, r3, r6
   26a96:	9802      	ldr	r0, [sp, #8]
   26a98:	4452      	add	r2, sl
   26a9a:	4401      	add	r1, r0
   26a9c:	e002      	b.n	26aa4 <two_way_long_needle+0x188>
   26a9e:	3301      	adds	r3, #1
   26aa0:	42a3      	cmp	r3, r4
   26aa2:	d20c      	bcs.n	26abe <two_way_long_needle+0x1a2>
   26aa4:	f812 0b01 	ldrb.w	r0, [r2], #1
   26aa8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   26aac:	4584      	cmp	ip, r0
   26aae:	d0f6      	beq.n	26a9e <two_way_long_needle+0x182>
   26ab0:	f1cb 0201 	rsb	r2, fp, #1
   26ab4:	f04f 0900 	mov.w	r9, #0
   26ab8:	4416      	add	r6, r2
   26aba:	441e      	add	r6, r3
   26abc:	e7c2      	b.n	26a44 <two_way_long_needle+0x128>
   26abe:	45cb      	cmp	fp, r9
   26ac0:	9b05      	ldr	r3, [sp, #20]
   26ac2:	d97e      	bls.n	26bc2 <two_way_long_needle+0x2a6>
   26ac4:	eb0b 0206 	add.w	r2, fp, r6
   26ac8:	9902      	ldr	r1, [sp, #8]
   26aca:	f8cd b010 	str.w	fp, [sp, #16]
   26ace:	4459      	add	r1, fp
   26ad0:	4452      	add	r2, sl
   26ad2:	e002      	b.n	26ada <two_way_long_needle+0x1be>
   26ad4:	454b      	cmp	r3, r9
   26ad6:	4673      	mov	r3, lr
   26ad8:	d015      	beq.n	26b06 <two_way_long_needle+0x1ea>
   26ada:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
   26ade:	f103 0b01 	add.w	fp, r3, #1
   26ae2:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   26ae6:	f103 3eff 	add.w	lr, r3, #4294967295
   26aea:	4584      	cmp	ip, r0
   26aec:	d0f2      	beq.n	26ad4 <two_way_long_needle+0x1b8>
   26aee:	465b      	mov	r3, fp
   26af0:	f8dd b010 	ldr.w	fp, [sp, #16]
   26af4:	f109 0901 	add.w	r9, r9, #1
   26af8:	4599      	cmp	r9, r3
   26afa:	d80b      	bhi.n	26b14 <two_way_long_needle+0x1f8>
   26afc:	9b01      	ldr	r3, [sp, #4]
   26afe:	f8dd 900c 	ldr.w	r9, [sp, #12]
   26b02:	441e      	add	r6, r3
   26b04:	e79e      	b.n	26a44 <two_way_long_needle+0x128>
   26b06:	464b      	mov	r3, r9
   26b08:	f109 0901 	add.w	r9, r9, #1
   26b0c:	f8dd b010 	ldr.w	fp, [sp, #16]
   26b10:	4599      	cmp	r9, r3
   26b12:	d9f3      	bls.n	26afc <two_way_long_needle+0x1e0>
   26b14:	4640      	mov	r0, r8
   26b16:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   26b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b1e:	eba5 030b 	sub.w	r3, r5, fp
   26b22:	f10b 32ff 	add.w	r2, fp, #4294967295
   26b26:	2600      	movs	r6, #0
   26b28:	f445 6900 	orr.w	r9, r5, #2048	; 0x800
   26b2c:	455b      	cmp	r3, fp
   26b2e:	9201      	str	r2, [sp, #4]
   26b30:	f1cb 0201 	rsb	r2, fp, #1
   26b34:	bf38      	it	cc
   26b36:	465b      	movcc	r3, fp
   26b38:	9202      	str	r2, [sp, #8]
   26b3a:	3301      	adds	r3, #1
   26b3c:	9303      	str	r3, [sp, #12]
   26b3e:	eb0a 0006 	add.w	r0, sl, r6
   26b42:	9a00      	ldr	r2, [sp, #0]
   26b44:	5d03      	ldrb	r3, [r0, r4]
   26b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   26b4a:	b16b      	cbz	r3, 26b68 <two_way_long_needle+0x24c>
   26b4c:	441e      	add	r6, r3
   26b4e:	1b7b      	subs	r3, r7, r5
   26b50:	429e      	cmp	r6, r3
   26b52:	d9f4      	bls.n	26b3e <two_way_long_needle+0x222>
   26b54:	eb0a 0007 	add.w	r0, sl, r7
   26b58:	4649      	mov	r1, r9
   26b5a:	f004 fdf1 	bl	2b740 <strnlen>
   26b5e:	4407      	add	r7, r0
   26b60:	1b7b      	subs	r3, r7, r5
   26b62:	429e      	cmp	r6, r3
   26b64:	d9eb      	bls.n	26b3e <two_way_long_needle+0x222>
   26b66:	e77a      	b.n	26a5e <two_way_long_needle+0x142>
   26b68:	45a3      	cmp	fp, r4
   26b6a:	d214      	bcs.n	26b96 <two_way_long_needle+0x27a>
   26b6c:	9b01      	ldr	r3, [sp, #4]
   26b6e:	eb0b 0206 	add.w	r2, fp, r6
   26b72:	eb08 0c03 	add.w	ip, r8, r3
   26b76:	4452      	add	r2, sl
   26b78:	465b      	mov	r3, fp
   26b7a:	e002      	b.n	26b82 <two_way_long_needle+0x266>
   26b7c:	3301      	adds	r3, #1
   26b7e:	42a3      	cmp	r3, r4
   26b80:	d209      	bcs.n	26b96 <two_way_long_needle+0x27a>
   26b82:	f812 1b01 	ldrb.w	r1, [r2], #1
   26b86:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   26b8a:	458e      	cmp	lr, r1
   26b8c:	d0f6      	beq.n	26b7c <two_way_long_needle+0x260>
   26b8e:	9a02      	ldr	r2, [sp, #8]
   26b90:	4416      	add	r6, r2
   26b92:	441e      	add	r6, r3
   26b94:	e7db      	b.n	26b4e <two_way_long_needle+0x232>
   26b96:	f1bb 0f00 	cmp.w	fp, #0
   26b9a:	f43f af61 	beq.w	26a60 <two_way_long_needle+0x144>
   26b9e:	eb0b 0c06 	add.w	ip, fp, r6
   26ba2:	eb08 020b 	add.w	r2, r8, fp
   26ba6:	44d4      	add	ip, sl
   26ba8:	e002      	b.n	26bb0 <two_way_long_needle+0x294>
   26baa:	4543      	cmp	r3, r8
   26bac:	f43f af58 	beq.w	26a60 <two_way_long_needle+0x144>
   26bb0:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   26bb4:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   26bb8:	4613      	mov	r3, r2
   26bba:	458e      	cmp	lr, r1
   26bbc:	d0f5      	beq.n	26baa <two_way_long_needle+0x28e>
   26bbe:	9b03      	ldr	r3, [sp, #12]
   26bc0:	e7c4      	b.n	26b4c <two_way_long_needle+0x230>
   26bc2:	465b      	mov	r3, fp
   26bc4:	e796      	b.n	26af4 <two_way_long_needle+0x1d8>
   26bc6:	ab06      	add	r3, sp, #24
   26bc8:	f04f 34ff 	mov.w	r4, #4294967295
   26bcc:	9300      	str	r3, [sp, #0]
   26bce:	e713      	b.n	269f8 <two_way_long_needle+0xdc>
   26bd0:	f04f 0b00 	mov.w	fp, #0
   26bd4:	9301      	str	r3, [sp, #4]
   26bd6:	e6f5      	b.n	269c4 <two_way_long_needle+0xa8>

00026bd8 <strstr>:
   26bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26bdc:	460e      	mov	r6, r1
   26bde:	7809      	ldrb	r1, [r1, #0]
   26be0:	b090      	sub	sp, #64	; 0x40
   26be2:	4604      	mov	r4, r0
   26be4:	2900      	cmp	r1, #0
   26be6:	d051      	beq.n	26c8c <strstr+0xb4>
   26be8:	7875      	ldrb	r5, [r6, #1]
   26bea:	2d00      	cmp	r5, #0
   26bec:	f000 8083 	beq.w	26cf6 <strstr+0x11e>
   26bf0:	78b3      	ldrb	r3, [r6, #2]
   26bf2:	2b00      	cmp	r3, #0
   26bf4:	d04e      	beq.n	26c94 <strstr+0xbc>
   26bf6:	78f2      	ldrb	r2, [r6, #3]
   26bf8:	2a00      	cmp	r2, #0
   26bfa:	f000 8085 	beq.w	26d08 <strstr+0x130>
   26bfe:	7933      	ldrb	r3, [r6, #4]
   26c00:	2b00      	cmp	r3, #0
   26c02:	d05b      	beq.n	26cbc <strstr+0xe4>
   26c04:	4630      	mov	r0, r6
   26c06:	f7ff fded 	bl	267e4 <strlen>
   26c0a:	4607      	mov	r7, r0
   26c0c:	4620      	mov	r0, r4
   26c0e:	f447 7100 	orr.w	r1, r7, #512	; 0x200
   26c12:	f004 fd95 	bl	2b740 <strnlen>
   26c16:	4287      	cmp	r7, r0
   26c18:	d84b      	bhi.n	26cb2 <strstr+0xda>
   26c1a:	2ffe      	cmp	r7, #254	; 0xfe
   26c1c:	f200 808f 	bhi.w	26d3e <strstr+0x166>
   26c20:	eba0 0807 	sub.w	r8, r0, r7
   26c24:	2240      	movs	r2, #64	; 0x40
   26c26:	1c79      	adds	r1, r7, #1
   26c28:	4668      	mov	r0, sp
   26c2a:	44a0      	add	r8, r4
   26c2c:	f7ff f9ca 	bl	25fc4 <memset>
   26c30:	b17f      	cbz	r7, 26c52 <strstr+0x7a>
   26c32:	1e72      	subs	r2, r6, #1
   26c34:	b2fd      	uxtb	r5, r7
   26c36:	19d0      	adds	r0, r2, r7
   26c38:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   26c3c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   26c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26c44:	1ab1      	subs	r1, r6, r2
   26c46:	4282      	cmp	r2, r0
   26c48:	4463      	add	r3, ip
   26c4a:	4429      	add	r1, r5
   26c4c:	f803 1c40 	strb.w	r1, [r3, #-64]
   26c50:	d1f2      	bne.n	26c38 <strstr+0x60>
   26c52:	3c01      	subs	r4, #1
   26c54:	aa10      	add	r2, sp, #64	; 0x40
   26c56:	5de3      	ldrb	r3, [r4, r7]
   26c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26c5c:	4413      	add	r3, r2
   26c5e:	f813 0c40 	ldrb.w	r0, [r3, #-64]
   26c62:	4404      	add	r4, r0
   26c64:	45a0      	cmp	r8, r4
   26c66:	d203      	bcs.n	26c70 <strstr+0x98>
   26c68:	e037      	b.n	26cda <strstr+0x102>
   26c6a:	442c      	add	r4, r5
   26c6c:	45a0      	cmp	r8, r4
   26c6e:	d334      	bcc.n	26cda <strstr+0x102>
   26c70:	5de5      	ldrb	r5, [r4, r7]
   26c72:	ab10      	add	r3, sp, #64	; 0x40
   26c74:	463a      	mov	r2, r7
   26c76:	4631      	mov	r1, r6
   26c78:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   26c7c:	4620      	mov	r0, r4
   26c7e:	441d      	add	r5, r3
   26c80:	f815 5c40 	ldrb.w	r5, [r5, #-64]
   26c84:	f7ff f970 	bl	25f68 <memcmp>
   26c88:	2800      	cmp	r0, #0
   26c8a:	d1ee      	bne.n	26c6a <strstr+0x92>
   26c8c:	4620      	mov	r0, r4
   26c8e:	b010      	add	sp, #64	; 0x40
   26c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26c94:	7802      	ldrb	r2, [r0, #0]
   26c96:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   26c9a:	b152      	cbz	r2, 26cb2 <strstr+0xda>
   26c9c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   26ca0:	4620      	mov	r0, r4
   26ca2:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   26ca6:	4299      	cmp	r1, r3
   26ca8:	d02c      	beq.n	26d04 <strstr+0x12c>
   26caa:	2a00      	cmp	r2, #0
   26cac:	d1f6      	bne.n	26c9c <strstr+0xc4>
   26cae:	4299      	cmp	r1, r3
   26cb0:	d028      	beq.n	26d04 <strstr+0x12c>
   26cb2:	2400      	movs	r4, #0
   26cb4:	4620      	mov	r0, r4
   26cb6:	b010      	add	sp, #64	; 0x40
   26cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26cbc:	7802      	ldrb	r2, [r0, #0]
   26cbe:	2a00      	cmp	r2, #0
   26cc0:	d0f7      	beq.n	26cb2 <strstr+0xda>
   26cc2:	6831      	ldr	r1, [r6, #0]
   26cc4:	ba09      	rev	r1, r1
   26cc6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   26cca:	4620      	mov	r0, r4
   26ccc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   26cd0:	b392      	cbz	r2, 26d38 <strstr+0x160>
   26cd2:	428b      	cmp	r3, r1
   26cd4:	d1f7      	bne.n	26cc6 <strstr+0xee>
   26cd6:	1ec4      	subs	r4, r0, #3
   26cd8:	e7d8      	b.n	26c8c <strstr+0xb4>
   26cda:	f818 3007 	ldrb.w	r3, [r8, r7]
   26cde:	eb08 0007 	add.w	r0, r8, r7
   26ce2:	2b00      	cmp	r3, #0
   26ce4:	d0e5      	beq.n	26cb2 <strstr+0xda>
   26ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
   26cea:	f004 fd29 	bl	2b740 <strnlen>
   26cee:	4480      	add	r8, r0
   26cf0:	45a0      	cmp	r8, r4
   26cf2:	d2ae      	bcs.n	26c52 <strstr+0x7a>
   26cf4:	e7dd      	b.n	26cb2 <strstr+0xda>
   26cf6:	f7ff fcaf 	bl	26658 <strchr>
   26cfa:	4604      	mov	r4, r0
   26cfc:	4620      	mov	r0, r4
   26cfe:	b010      	add	sp, #64	; 0x40
   26d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26d04:	1e44      	subs	r4, r0, #1
   26d06:	e7c1      	b.n	26c8c <strstr+0xb4>
   26d08:	042d      	lsls	r5, r5, #16
   26d0a:	7806      	ldrb	r6, [r0, #0]
   26d0c:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
   26d10:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
   26d14:	2e00      	cmp	r6, #0
   26d16:	d0cc      	beq.n	26cb2 <strstr+0xda>
   26d18:	ea46 0102 	orr.w	r1, r6, r2
   26d1c:	4620      	mov	r0, r4
   26d1e:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   26d22:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
   26d26:	ea4f 2201 	mov.w	r2, r1, lsl #8
   26d2a:	d001      	beq.n	26d30 <strstr+0x158>
   26d2c:	2e00      	cmp	r6, #0
   26d2e:	d1f3      	bne.n	26d18 <strstr+0x140>
   26d30:	4293      	cmp	r3, r2
   26d32:	d1be      	bne.n	26cb2 <strstr+0xda>
   26d34:	1e84      	subs	r4, r0, #2
   26d36:	e7a9      	b.n	26c8c <strstr+0xb4>
   26d38:	428b      	cmp	r3, r1
   26d3a:	d1ba      	bne.n	26cb2 <strstr+0xda>
   26d3c:	e7cb      	b.n	26cd6 <strstr+0xfe>
   26d3e:	4601      	mov	r1, r0
   26d40:	463b      	mov	r3, r7
   26d42:	4620      	mov	r0, r4
   26d44:	4632      	mov	r2, r6
   26d46:	f7ff fde9 	bl	2691c <two_way_long_needle>
   26d4a:	4604      	mov	r4, r0
   26d4c:	e79e      	b.n	26c8c <strstr+0xb4>
   26d4e:	bf00      	nop

00026d50 <sulp>:
   26d50:	b570      	push	{r4, r5, r6, lr}
   26d52:	4604      	mov	r4, r0
   26d54:	460d      	mov	r5, r1
   26d56:	4616      	mov	r6, r2
   26d58:	ec45 4b10 	vmov	d0, r4, r5
   26d5c:	f004 fa76 	bl	2b24c <__ulp>
   26d60:	ec51 0b10 	vmov	r0, r1, d0
   26d64:	b16e      	cbz	r6, 26d82 <sulp+0x32>
   26d66:	f3c5 530a 	ubfx	r3, r5, #20, #11
   26d6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   26d6e:	2b00      	cmp	r3, #0
   26d70:	dd07      	ble.n	26d82 <sulp+0x32>
   26d72:	4a04      	ldr	r2, [pc, #16]	; (26d84 <sulp+0x34>)
   26d74:	2400      	movs	r4, #0
   26d76:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   26d7a:	4622      	mov	r2, r4
   26d7c:	462b      	mov	r3, r5
   26d7e:	f7e6 f839 	bl	cdf4 <__aeabi_dmul>
   26d82:	bd70      	pop	{r4, r5, r6, pc}
   26d84:	3ff00000 	.word	0x3ff00000

00026d88 <_strtod_r>:
   26d88:	4b01      	ldr	r3, [pc, #4]	; (26d90 <_strtod_r+0x8>)
   26d8a:	f7e6 be15 	b.w	d9b8 <_strtod_l>
   26d8e:	bf00      	nop
   26d90:	200208f0 	.word	0x200208f0

00026d94 <_strtol_l.isra.0>:
   26d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d98:	4682      	mov	sl, r0
   26d9a:	460d      	mov	r5, r1
   26d9c:	4839      	ldr	r0, [pc, #228]	; (26e84 <_strtol_l.isra.0+0xf0>)
   26d9e:	462f      	mov	r7, r5
   26da0:	f815 4b01 	ldrb.w	r4, [r5], #1
   26da4:	5d06      	ldrb	r6, [r0, r4]
   26da6:	f016 0608 	ands.w	r6, r6, #8
   26daa:	d1f8      	bne.n	26d9e <_strtol_l.isra.0+0xa>
   26dac:	2c2d      	cmp	r4, #45	; 0x2d
   26dae:	d04d      	beq.n	26e4c <_strtol_l.isra.0+0xb8>
   26db0:	2c2b      	cmp	r4, #43	; 0x2b
   26db2:	d03a      	beq.n	26e2a <_strtol_l.isra.0+0x96>
   26db4:	46a3      	mov	fp, r4
   26db6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   26dba:	f033 0010 	bics.w	r0, r3, #16
   26dbe:	d104      	bne.n	26dca <_strtol_l.isra.0+0x36>
   26dc0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   26dc4:	d049      	beq.n	26e5a <_strtol_l.isra.0+0xc6>
   26dc6:	b903      	cbnz	r3, 26dca <_strtol_l.isra.0+0x36>
   26dc8:	230a      	movs	r3, #10
   26dca:	469e      	mov	lr, r3
   26dcc:	2700      	movs	r7, #0
   26dce:	fbb9 fcfe 	udiv	ip, r9, lr
   26dd2:	4638      	mov	r0, r7
   26dd4:	fb0e 981c 	mls	r8, lr, ip, r9
   26dd8:	e00e      	b.n	26df8 <_strtol_l.isra.0+0x64>
   26dda:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
   26dde:	42a3      	cmp	r3, r4
   26de0:	dd1a      	ble.n	26e18 <_strtol_l.isra.0+0x84>
   26de2:	2f00      	cmp	r7, #0
   26de4:	db04      	blt.n	26df0 <_strtol_l.isra.0+0x5c>
   26de6:	4584      	cmp	ip, r0
   26de8:	d302      	bcc.n	26df0 <_strtol_l.isra.0+0x5c>
   26dea:	d124      	bne.n	26e36 <_strtol_l.isra.0+0xa2>
   26dec:	45a0      	cmp	r8, r4
   26dee:	da22      	bge.n	26e36 <_strtol_l.isra.0+0xa2>
   26df0:	f04f 37ff 	mov.w	r7, #4294967295
   26df4:	f815 bb01 	ldrb.w	fp, [r5], #1
   26df8:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
   26dfc:	2c09      	cmp	r4, #9
   26dfe:	d9ee      	bls.n	26dde <_strtol_l.isra.0+0x4a>
   26e00:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
   26e04:	2c19      	cmp	r4, #25
   26e06:	d9e8      	bls.n	26dda <_strtol_l.isra.0+0x46>
   26e08:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
   26e0c:	2c19      	cmp	r4, #25
   26e0e:	d803      	bhi.n	26e18 <_strtol_l.isra.0+0x84>
   26e10:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
   26e14:	42a3      	cmp	r3, r4
   26e16:	dce4      	bgt.n	26de2 <_strtol_l.isra.0+0x4e>
   26e18:	1c7b      	adds	r3, r7, #1
   26e1a:	d010      	beq.n	26e3e <_strtol_l.isra.0+0xaa>
   26e1c:	b106      	cbz	r6, 26e20 <_strtol_l.isra.0+0x8c>
   26e1e:	4240      	negs	r0, r0
   26e20:	b10a      	cbz	r2, 26e26 <_strtol_l.isra.0+0x92>
   26e22:	bb6f      	cbnz	r7, 26e80 <_strtol_l.isra.0+0xec>
   26e24:	6011      	str	r1, [r2, #0]
   26e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e2a:	f895 b000 	ldrb.w	fp, [r5]
   26e2e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   26e32:	1cbd      	adds	r5, r7, #2
   26e34:	e7c1      	b.n	26dba <_strtol_l.isra.0+0x26>
   26e36:	fb0e 4000 	mla	r0, lr, r0, r4
   26e3a:	2701      	movs	r7, #1
   26e3c:	e7da      	b.n	26df4 <_strtol_l.isra.0+0x60>
   26e3e:	2322      	movs	r3, #34	; 0x22
   26e40:	f8ca 3000 	str.w	r3, [sl]
   26e44:	b1a2      	cbz	r2, 26e70 <_strtol_l.isra.0+0xdc>
   26e46:	1e69      	subs	r1, r5, #1
   26e48:	4648      	mov	r0, r9
   26e4a:	e7eb      	b.n	26e24 <_strtol_l.isra.0+0x90>
   26e4c:	f895 b000 	ldrb.w	fp, [r5]
   26e50:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   26e54:	1cbd      	adds	r5, r7, #2
   26e56:	2601      	movs	r6, #1
   26e58:	e7af      	b.n	26dba <_strtol_l.isra.0+0x26>
   26e5a:	7828      	ldrb	r0, [r5, #0]
   26e5c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   26e60:	2858      	cmp	r0, #88	; 0x58
   26e62:	d108      	bne.n	26e76 <_strtol_l.isra.0+0xe2>
   26e64:	2310      	movs	r3, #16
   26e66:	f895 b001 	ldrb.w	fp, [r5, #1]
   26e6a:	3502      	adds	r5, #2
   26e6c:	469e      	mov	lr, r3
   26e6e:	e7ad      	b.n	26dcc <_strtol_l.isra.0+0x38>
   26e70:	4648      	mov	r0, r9
   26e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e76:	2b00      	cmp	r3, #0
   26e78:	d1a7      	bne.n	26dca <_strtol_l.isra.0+0x36>
   26e7a:	2308      	movs	r3, #8
   26e7c:	469e      	mov	lr, r3
   26e7e:	e7a5      	b.n	26dcc <_strtol_l.isra.0+0x38>
   26e80:	4681      	mov	r9, r0
   26e82:	e7e0      	b.n	26e46 <_strtol_l.isra.0+0xb2>
   26e84:	0002f3c9 	.word	0x0002f3c9

00026e88 <_strtol_r>:
   26e88:	f7ff bf84 	b.w	26d94 <_strtol_l.isra.0>

00026e8c <strtol>:
   26e8c:	b430      	push	{r4, r5}
   26e8e:	460d      	mov	r5, r1
   26e90:	4c03      	ldr	r4, [pc, #12]	; (26ea0 <strtol+0x14>)
   26e92:	4613      	mov	r3, r2
   26e94:	4601      	mov	r1, r0
   26e96:	462a      	mov	r2, r5
   26e98:	6820      	ldr	r0, [r4, #0]
   26e9a:	bc30      	pop	{r4, r5}
   26e9c:	f7ff bf7a 	b.w	26d94 <_strtol_l.isra.0>
   26ea0:	200204d8 	.word	0x200204d8

00026ea4 <_strtoul_l.isra.0>:
   26ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26ea8:	468c      	mov	ip, r1
   26eaa:	4686      	mov	lr, r0
   26eac:	4840      	ldr	r0, [pc, #256]	; (26fb0 <_strtoul_l.isra.0+0x10c>)
   26eae:	4667      	mov	r7, ip
   26eb0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   26eb4:	5d06      	ldrb	r6, [r0, r4]
   26eb6:	f016 0608 	ands.w	r6, r6, #8
   26eba:	d1f8      	bne.n	26eae <_strtoul_l.isra.0+0xa>
   26ebc:	2c2d      	cmp	r4, #45	; 0x2d
   26ebe:	d057      	beq.n	26f70 <_strtoul_l.isra.0+0xcc>
   26ec0:	2c2b      	cmp	r4, #43	; 0x2b
   26ec2:	d00d      	beq.n	26ee0 <_strtoul_l.isra.0+0x3c>
   26ec4:	4625      	mov	r5, r4
   26ec6:	f033 0010 	bics.w	r0, r3, #16
   26eca:	d110      	bne.n	26eee <_strtoul_l.isra.0+0x4a>
   26ecc:	2d30      	cmp	r5, #48	; 0x30
   26ece:	d055      	beq.n	26f7c <_strtoul_l.isra.0+0xd8>
   26ed0:	b96b      	cbnz	r3, 26eee <_strtoul_l.isra.0+0x4a>
   26ed2:	230a      	movs	r3, #10
   26ed4:	f04f 0905 	mov.w	r9, #5
   26ed8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 26fb4 <_strtoul_l.isra.0+0x110>
   26edc:	469a      	mov	sl, r3
   26ede:	e00f      	b.n	26f00 <_strtoul_l.isra.0+0x5c>
   26ee0:	f033 0010 	bics.w	r0, r3, #16
   26ee4:	f89c 5000 	ldrb.w	r5, [ip]
   26ee8:	f107 0c02 	add.w	ip, r7, #2
   26eec:	d0ee      	beq.n	26ecc <_strtoul_l.isra.0+0x28>
   26eee:	f04f 38ff 	mov.w	r8, #4294967295
   26ef2:	469a      	mov	sl, r3
   26ef4:	fbb8 f8f3 	udiv	r8, r8, r3
   26ef8:	fb03 f908 	mul.w	r9, r3, r8
   26efc:	ea6f 0909 	mvn.w	r9, r9
   26f00:	2700      	movs	r7, #0
   26f02:	4638      	mov	r0, r7
   26f04:	e00e      	b.n	26f24 <_strtoul_l.isra.0+0x80>
   26f06:	f1a5 0437 	sub.w	r4, r5, #55	; 0x37
   26f0a:	42a3      	cmp	r3, r4
   26f0c:	dd1a      	ble.n	26f44 <_strtoul_l.isra.0+0xa0>
   26f0e:	2f00      	cmp	r7, #0
   26f10:	db04      	blt.n	26f1c <_strtoul_l.isra.0+0x78>
   26f12:	4540      	cmp	r0, r8
   26f14:	d802      	bhi.n	26f1c <_strtoul_l.isra.0+0x78>
   26f16:	d11e      	bne.n	26f56 <_strtoul_l.isra.0+0xb2>
   26f18:	454c      	cmp	r4, r9
   26f1a:	dd1c      	ble.n	26f56 <_strtoul_l.isra.0+0xb2>
   26f1c:	f04f 37ff 	mov.w	r7, #4294967295
   26f20:	f81c 5b01 	ldrb.w	r5, [ip], #1
   26f24:	f1a5 0430 	sub.w	r4, r5, #48	; 0x30
   26f28:	2c09      	cmp	r4, #9
   26f2a:	d9ee      	bls.n	26f0a <_strtoul_l.isra.0+0x66>
   26f2c:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
   26f30:	2c19      	cmp	r4, #25
   26f32:	d9e8      	bls.n	26f06 <_strtoul_l.isra.0+0x62>
   26f34:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
   26f38:	2c19      	cmp	r4, #25
   26f3a:	d803      	bhi.n	26f44 <_strtoul_l.isra.0+0xa0>
   26f3c:	f1a5 0457 	sub.w	r4, r5, #87	; 0x57
   26f40:	42a3      	cmp	r3, r4
   26f42:	dce4      	bgt.n	26f0e <_strtoul_l.isra.0+0x6a>
   26f44:	1c7b      	adds	r3, r7, #1
   26f46:	d00a      	beq.n	26f5e <_strtoul_l.isra.0+0xba>
   26f48:	b106      	cbz	r6, 26f4c <_strtoul_l.isra.0+0xa8>
   26f4a:	4240      	negs	r0, r0
   26f4c:	b10a      	cbz	r2, 26f52 <_strtoul_l.isra.0+0xae>
   26f4e:	b967      	cbnz	r7, 26f6a <_strtoul_l.isra.0+0xc6>
   26f50:	6011      	str	r1, [r2, #0]
   26f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26f56:	fb0a 4000 	mla	r0, sl, r0, r4
   26f5a:	2701      	movs	r7, #1
   26f5c:	e7e0      	b.n	26f20 <_strtoul_l.isra.0+0x7c>
   26f5e:	2322      	movs	r3, #34	; 0x22
   26f60:	4638      	mov	r0, r7
   26f62:	f8ce 3000 	str.w	r3, [lr]
   26f66:	2a00      	cmp	r2, #0
   26f68:	d0f3      	beq.n	26f52 <_strtoul_l.isra.0+0xae>
   26f6a:	f10c 31ff 	add.w	r1, ip, #4294967295
   26f6e:	e7ef      	b.n	26f50 <_strtoul_l.isra.0+0xac>
   26f70:	f89c 5000 	ldrb.w	r5, [ip]
   26f74:	2601      	movs	r6, #1
   26f76:	f107 0c02 	add.w	ip, r7, #2
   26f7a:	e7a4      	b.n	26ec6 <_strtoul_l.isra.0+0x22>
   26f7c:	f89c 0000 	ldrb.w	r0, [ip]
   26f80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   26f84:	2858      	cmp	r0, #88	; 0x58
   26f86:	d10a      	bne.n	26f9e <_strtoul_l.isra.0+0xfa>
   26f88:	2310      	movs	r3, #16
   26f8a:	f89c 5001 	ldrb.w	r5, [ip, #1]
   26f8e:	f04f 090f 	mov.w	r9, #15
   26f92:	f10c 0c02 	add.w	ip, ip, #2
   26f96:	469a      	mov	sl, r3
   26f98:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   26f9c:	e7b0      	b.n	26f00 <_strtoul_l.isra.0+0x5c>
   26f9e:	2b00      	cmp	r3, #0
   26fa0:	d1a5      	bne.n	26eee <_strtoul_l.isra.0+0x4a>
   26fa2:	2308      	movs	r3, #8
   26fa4:	f04f 0907 	mov.w	r9, #7
   26fa8:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   26fac:	469a      	mov	sl, r3
   26fae:	e7a7      	b.n	26f00 <_strtoul_l.isra.0+0x5c>
   26fb0:	0002f3c9 	.word	0x0002f3c9
   26fb4:	19999999 	.word	0x19999999

00026fb8 <_strtoul_r>:
   26fb8:	f7ff bf74 	b.w	26ea4 <_strtoul_l.isra.0>

00026fbc <strtoul>:
   26fbc:	b430      	push	{r4, r5}
   26fbe:	460d      	mov	r5, r1
   26fc0:	4c03      	ldr	r4, [pc, #12]	; (26fd0 <strtoul+0x14>)
   26fc2:	4613      	mov	r3, r2
   26fc4:	4601      	mov	r1, r0
   26fc6:	462a      	mov	r2, r5
   26fc8:	6820      	ldr	r0, [r4, #0]
   26fca:	bc30      	pop	{r4, r5}
   26fcc:	f7ff bf6a 	b.w	26ea4 <_strtoul_l.isra.0>
   26fd0:	200204d8 	.word	0x200204d8

00026fd4 <__ssvfscanf_r>:
   26fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26fd8:	ed2d 8b02 	vpush	{d8}
   26fdc:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
   26fe0:	468b      	mov	fp, r1
   26fe2:	4682      	mov	sl, r0
   26fe4:	af02      	add	r7, sp, #8
   26fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   26fe8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   26fec:	0499      	lsls	r1, r3, #18
   26fee:	d409      	bmi.n	27004 <__ssvfscanf_r+0x30>
   26ff0:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
   26ff4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   26ff8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   26ffc:	f8ab 300c 	strh.w	r3, [fp, #12]
   27000:	f8cb 1064 	str.w	r1, [fp, #100]	; 0x64
   27004:	f812 3b01 	ldrb.w	r3, [r2], #1
   27008:	63fa      	str	r2, [r7, #60]	; 0x3c
   2700a:	647b      	str	r3, [r7, #68]	; 0x44
   2700c:	2b00      	cmp	r3, #0
   2700e:	f001 80fc 	beq.w	2820a <_flash_used+0x722>
   27012:	2200      	movs	r2, #0
   27014:	ee08 aa10 	vmov	s16, sl
   27018:	623a      	str	r2, [r7, #32]
   2701a:	4692      	mov	sl, r2
   2701c:	637a      	str	r2, [r7, #52]	; 0x34
   2701e:	62fa      	str	r2, [r7, #44]	; 0x2c
   27020:	627a      	str	r2, [r7, #36]	; 0x24
   27022:	633a      	str	r2, [r7, #48]	; 0x30
   27024:	4a7c      	ldr	r2, [pc, #496]	; (27218 <__ssvfscanf_r+0x244>)
   27026:	5cd5      	ldrb	r5, [r2, r3]
   27028:	f015 0508 	ands.w	r5, r5, #8
   2702c:	f040 80ac 	bne.w	27188 <__ssvfscanf_r+0x1b4>
   27030:	2b25      	cmp	r3, #37	; 0x25
   27032:	f040 8088 	bne.w	27146 <__ssvfscanf_r+0x172>
   27036:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   27038:	462c      	mov	r4, r5
   2703a:	46a8      	mov	r8, r5
   2703c:	7802      	ldrb	r2, [r0, #0]
   2703e:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   27042:	1c41      	adds	r1, r0, #1
   27044:	2b55      	cmp	r3, #85	; 0x55
   27046:	d86d      	bhi.n	27124 <__ssvfscanf_r+0x150>
   27048:	e8df f013 	tbh	[pc, r3, lsl #1]
   2704c:	006c007c 	.word	0x006c007c
   27050:	006c006c 	.word	0x006c006c
   27054:	04cf006c 	.word	0x04cf006c
   27058:	006c006c 	.word	0x006c006c
   2705c:	006c006c 	.word	0x006c006c
   27060:	00c5006c 	.word	0x00c5006c
   27064:	00c500c5 	.word	0x00c500c5
   27068:	00c500c5 	.word	0x00c500c5
   2706c:	00c500c5 	.word	0x00c500c5
   27070:	00c500c5 	.word	0x00c500c5
   27074:	006c00c5 	.word	0x006c00c5
   27078:	006c006c 	.word	0x006c006c
   2707c:	006c006c 	.word	0x006c006c
   27080:	006c006c 	.word	0x006c006c
   27084:	006c00d1 	.word	0x006c00d1
   27088:	04b104a1 	.word	0x04b104a1
   2708c:	00d100d1 	.word	0x00d100d1
   27090:	006c00d1 	.word	0x006c00d1
   27094:	006c006c 	.word	0x006c006c
   27098:	0439006c 	.word	0x0439006c
   2709c:	006c006c 	.word	0x006c006c
   270a0:	006c04a8 	.word	0x006c04a8
   270a4:	006c006c 	.word	0x006c006c
   270a8:	006c049c 	.word	0x006c049c
   270ac:	006c006c 	.word	0x006c006c
   270b0:	0442006c 	.word	0x0442006c
   270b4:	006c006c 	.word	0x006c006c
   270b8:	006c04ba 	.word	0x006c04ba
   270bc:	006c006c 	.word	0x006c006c
   270c0:	006c006c 	.word	0x006c006c
   270c4:	006c00d1 	.word	0x006c00d1
   270c8:	04b304a3 	.word	0x04b304a3
   270cc:	00d100d1 	.word	0x00d100d1
   270d0:	04f500d1 	.word	0x04f500d1
   270d4:	04390501 	.word	0x04390501
   270d8:	04c3006c 	.word	0x04c3006c
   270dc:	04e604d8 	.word	0x04e604d8
   270e0:	051104aa 	.word	0x051104aa
   270e4:	006c006c 	.word	0x006c006c
   270e8:	0432049e 	.word	0x0432049e
   270ec:	006c0509 	.word	0x006c0509
   270f0:	0442006c 	.word	0x0442006c
   270f4:	0432006c 	.word	0x0432006c
   270f8:	4659      	mov	r1, fp
   270fa:	ee18 0a10 	vmov	r0, s16
   270fe:	f004 fd77 	bl	2bbf0 <__ssrefill_r>
   27102:	2800      	cmp	r0, #0
   27104:	f000 87c5 	beq.w	28092 <_flash_used+0x5aa>
   27108:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   2710c:	2e00      	cmp	r6, #0
   2710e:	f000 8216 	beq.w	2753e <__ssvfscanf_r+0x56a>
   27112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27114:	2b00      	cmp	r3, #0
   27116:	f000 870c 	beq.w	27f32 <_flash_used+0x44a>
   2711a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   2711e:	065a      	lsls	r2, r3, #25
   27120:	f100 8707 	bmi.w	27f32 <_flash_used+0x44a>
   27124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27126:	b12b      	cbz	r3, 27134 <__ssvfscanf_r+0x160>
   27128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2712a:	681e      	ldr	r6, [r3, #0]
   2712c:	b116      	cbz	r6, 27134 <__ssvfscanf_r+0x160>
   2712e:	4630      	mov	r0, r6
   27130:	f7fe fc06 	bl	25940 <free>
   27134:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27136:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
   2713a:	46bd      	mov	sp, r7
   2713c:	ecbd 8b02 	vpop	{d8}
   27140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27144:	63f9      	str	r1, [r7, #60]	; 0x3c
   27146:	f8db 3004 	ldr.w	r3, [fp, #4]
   2714a:	2b00      	cmp	r3, #0
   2714c:	dd3b      	ble.n	271c6 <__ssvfscanf_r+0x1f2>
   2714e:	f8db 3000 	ldr.w	r3, [fp]
   27152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27154:	7819      	ldrb	r1, [r3, #0]
   27156:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   2715a:	4291      	cmp	r1, r2
   2715c:	d1e2      	bne.n	27124 <__ssvfscanf_r+0x150>
   2715e:	f8db 2004 	ldr.w	r2, [fp, #4]
   27162:	3301      	adds	r3, #1
   27164:	f10a 0a01 	add.w	sl, sl, #1
   27168:	3a01      	subs	r2, #1
   2716a:	e9cb 3200 	strd	r3, r2, [fp]
   2716e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27170:	f812 3b01 	ldrb.w	r3, [r2], #1
   27174:	63fa      	str	r2, [r7, #60]	; 0x3c
   27176:	647b      	str	r3, [r7, #68]	; 0x44
   27178:	2b00      	cmp	r3, #0
   2717a:	d0d3      	beq.n	27124 <__ssvfscanf_r+0x150>
   2717c:	4a26      	ldr	r2, [pc, #152]	; (27218 <__ssvfscanf_r+0x244>)
   2717e:	5cd5      	ldrb	r5, [r2, r3]
   27180:	f015 0508 	ands.w	r5, r5, #8
   27184:	f43f af54 	beq.w	27030 <__ssvfscanf_r+0x5c>
   27188:	f8db 2004 	ldr.w	r2, [fp, #4]
   2718c:	ee18 4a10 	vmov	r4, s16
   27190:	e010      	b.n	271b4 <__ssvfscanf_r+0x1e0>
   27192:	f8db 3000 	ldr.w	r3, [fp]
   27196:	4920      	ldr	r1, [pc, #128]	; (27218 <__ssvfscanf_r+0x244>)
   27198:	781a      	ldrb	r2, [r3, #0]
   2719a:	3301      	adds	r3, #1
   2719c:	5c8a      	ldrb	r2, [r1, r2]
   2719e:	0712      	lsls	r2, r2, #28
   271a0:	d5e5      	bpl.n	2716e <__ssvfscanf_r+0x19a>
   271a2:	f8db 2004 	ldr.w	r2, [fp, #4]
   271a6:	f10a 0a01 	add.w	sl, sl, #1
   271aa:	f8cb 3000 	str.w	r3, [fp]
   271ae:	3a01      	subs	r2, #1
   271b0:	f8cb 2004 	str.w	r2, [fp, #4]
   271b4:	2a00      	cmp	r2, #0
   271b6:	dcec      	bgt.n	27192 <__ssvfscanf_r+0x1be>
   271b8:	4659      	mov	r1, fp
   271ba:	4620      	mov	r0, r4
   271bc:	f004 fd18 	bl	2bbf0 <__ssrefill_r>
   271c0:	2800      	cmp	r0, #0
   271c2:	d0e6      	beq.n	27192 <__ssvfscanf_r+0x1be>
   271c4:	e7d3      	b.n	2716e <__ssvfscanf_r+0x19a>
   271c6:	4659      	mov	r1, fp
   271c8:	ee18 0a10 	vmov	r0, s16
   271cc:	f004 fd10 	bl	2bbf0 <__ssrefill_r>
   271d0:	2800      	cmp	r0, #0
   271d2:	d0bc      	beq.n	2714e <__ssvfscanf_r+0x17a>
   271d4:	e79d      	b.n	27112 <__ssvfscanf_r+0x13e>
   271d6:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   271da:	d1a3      	bne.n	27124 <__ssvfscanf_r+0x150>
   271dc:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   271e0:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   271e4:	7842      	ldrb	r2, [r0, #1]
   271e6:	4608      	mov	r0, r1
   271e8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   271ec:	e727      	b.n	2703e <__ssvfscanf_r+0x6a>
   271ee:	2604      	movs	r6, #4
   271f0:	63f9      	str	r1, [r7, #60]	; 0x3c
   271f2:	f8db 3004 	ldr.w	r3, [fp, #4]
   271f6:	2b00      	cmp	r3, #0
   271f8:	f340 8377 	ble.w	278ea <__ssvfscanf_r+0x916>
   271fc:	0662      	lsls	r2, r4, #25
   271fe:	f140 837f 	bpl.w	27900 <__ssvfscanf_r+0x92c>
   27202:	1e73      	subs	r3, r6, #1
   27204:	2b03      	cmp	r3, #3
   27206:	f200 8632 	bhi.w	27e6e <_flash_used+0x386>
   2720a:	e8df f013 	tbh	[pc, r3, lsl #1]
   2720e:	01b4      	.short	0x01b4
   27210:	00b2015c 	.word	0x00b2015c
   27214:	0007      	.short	0x0007
   27216:	bf00      	nop
   27218:	0002f3c9 	.word	0x0002f3c9
   2721c:	ee18 0a10 	vmov	r0, s16
   27220:	f003 fb9e 	bl	2a960 <_localeconv_r>
   27224:	f108 33ff 	add.w	r3, r8, #4294967295
   27228:	6802      	ldr	r2, [r0, #0]
   2722a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   2722e:	617a      	str	r2, [r7, #20]
   27230:	f240 84e4 	bls.w	27bfc <_flash_used+0x114>
   27234:	f46f 7cae 	mvn.w	ip, #348	; 0x15c
   27238:	eb08 030c 	add.w	r3, r8, ip
   2723c:	f240 185d 	movw	r8, #349	; 0x15d
   27240:	60fb      	str	r3, [r7, #12]
   27242:	2600      	movs	r6, #0
   27244:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   27248:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   2724c:	607d      	str	r5, [r7, #4]
   2724e:	4699      	mov	r9, r3
   27250:	4645      	mov	r5, r8
   27252:	46d8      	mov	r8, fp
   27254:	46a3      	mov	fp, r4
   27256:	4634      	mov	r4, r6
   27258:	61fb      	str	r3, [r7, #28]
   2725a:	63be      	str	r6, [r7, #56]	; 0x38
   2725c:	60be      	str	r6, [r7, #8]
   2725e:	613e      	str	r6, [r7, #16]
   27260:	61be      	str	r6, [r7, #24]
   27262:	f8d8 1000 	ldr.w	r1, [r8]
   27266:	7808      	ldrb	r0, [r1, #0]
   27268:	f1a0 0e2b 	sub.w	lr, r0, #43	; 0x2b
   2726c:	f1be 0f4e 	cmp.w	lr, #78	; 0x4e
   27270:	d850      	bhi.n	27314 <__ssvfscanf_r+0x340>
   27272:	e8df f01e 	tbh	[pc, lr, lsl #1]
   27276:	0275      	.short	0x0275
   27278:	0275004f 	.word	0x0275004f
   2727c:	004f004f 	.word	0x004f004f
   27280:	00780310 	.word	0x00780310
   27284:	00780078 	.word	0x00780078
   27288:	00780078 	.word	0x00780078
   2728c:	00780078 	.word	0x00780078
   27290:	00780078 	.word	0x00780078
   27294:	004f004f 	.word	0x004f004f
   27298:	004f004f 	.word	0x004f004f
   2729c:	004f004f 	.word	0x004f004f
   272a0:	026e004f 	.word	0x026e004f
   272a4:	004f004f 	.word	0x004f004f
   272a8:	02f0004f 	.word	0x02f0004f
   272ac:	004f02eb 	.word	0x004f02eb
   272b0:	0291004f 	.word	0x0291004f
   272b4:	004f004f 	.word	0x004f004f
   272b8:	004f004f 	.word	0x004f004f
   272bc:	004f027c 	.word	0x004f027c
   272c0:	004f004f 	.word	0x004f004f
   272c4:	004f004f 	.word	0x004f004f
   272c8:	004f0269 	.word	0x004f0269
   272cc:	004f004f 	.word	0x004f004f
   272d0:	0264004f 	.word	0x0264004f
   272d4:	004f004f 	.word	0x004f004f
   272d8:	004f004f 	.word	0x004f004f
   272dc:	004f004f 	.word	0x004f004f
   272e0:	026e004f 	.word	0x026e004f
   272e4:	004f004f 	.word	0x004f004f
   272e8:	02f0004f 	.word	0x02f0004f
   272ec:	004f02eb 	.word	0x004f02eb
   272f0:	0291004f 	.word	0x0291004f
   272f4:	004f004f 	.word	0x004f004f
   272f8:	004f004f 	.word	0x004f004f
   272fc:	004f027c 	.word	0x004f027c
   27300:	004f004f 	.word	0x004f004f
   27304:	004f004f 	.word	0x004f004f
   27308:	004f0269 	.word	0x004f0269
   2730c:	004f004f 	.word	0x004f004f
   27310:	0264004f 	.word	0x0264004f
   27314:	697b      	ldr	r3, [r7, #20]
   27316:	f893 e000 	ldrb.w	lr, [r3]
   2731a:	4586      	cmp	lr, r0
   2731c:	d117      	bne.n	2734e <__ssvfscanf_r+0x37a>
   2731e:	f41b 7f00 	tst.w	fp, #512	; 0x200
   27322:	d014      	beq.n	2734e <__ssvfscanf_r+0x37a>
   27324:	f42b 7b20 	bic.w	fp, fp, #640	; 0x280
   27328:	61be      	str	r6, [r7, #24]
   2732a:	3d01      	subs	r5, #1
   2732c:	f809 0b01 	strb.w	r0, [r9], #1
   27330:	f8d8 0004 	ldr.w	r0, [r8, #4]
   27334:	f10a 0a01 	add.w	sl, sl, #1
   27338:	3801      	subs	r0, #1
   2733a:	2800      	cmp	r0, #0
   2733c:	f8c8 0004 	str.w	r0, [r8, #4]
   27340:	f340 83a8 	ble.w	27a94 <__ssvfscanf_r+0xac0>
   27344:	1c48      	adds	r0, r1, #1
   27346:	f8c8 0000 	str.w	r0, [r8]
   2734a:	2d00      	cmp	r5, #0
   2734c:	d189      	bne.n	27262 <__ssvfscanf_r+0x28e>
   2734e:	617e      	str	r6, [r7, #20]
   27350:	4626      	mov	r6, r4
   27352:	697b      	ldr	r3, [r7, #20]
   27354:	465c      	mov	r4, fp
   27356:	46c3      	mov	fp, r8
   27358:	2b00      	cmp	r3, #0
   2735a:	f001 806a 	beq.w	28432 <_flash_used+0x94a>
   2735e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   27362:	4635      	mov	r5, r6
   27364:	e229      	b.n	277ba <__ssvfscanf_r+0x7e6>
   27366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27368:	42e3      	cmn	r3, r4
   2736a:	d1f0      	bne.n	2734e <__ssvfscanf_r+0x37a>
   2736c:	f42b 7bc0 	bic.w	fp, fp, #384	; 0x180
   27370:	e7db      	b.n	2732a <__ssvfscanf_r+0x356>
   27372:	f108 33ff 	add.w	r3, r8, #4294967295
   27376:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   2737a:	f240 83be 	bls.w	27afa <_flash_used+0x12>
   2737e:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
   27382:	eb08 0900 	add.w	r9, r8, r0
   27386:	f240 185d 	movw	r8, #349	; 0x15d
   2738a:	2300      	movs	r3, #0
   2738c:	f507 75ac 	add.w	r5, r7, #344	; 0x158
   27390:	465e      	mov	r6, fp
   27392:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   27396:	46d3      	mov	fp, sl
   27398:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   2739c:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
   273a0:	469a      	mov	sl, r3
   273a2:	61fd      	str	r5, [r7, #28]
   273a4:	6832      	ldr	r2, [r6, #0]
   273a6:	7810      	ldrb	r0, [r2, #0]
   273a8:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   273ac:	2b4d      	cmp	r3, #77	; 0x4d
   273ae:	d861      	bhi.n	27474 <__ssvfscanf_r+0x4a0>
   273b0:	e8df f013 	tbh	[pc, r3, lsl #1]
   273b4:	006002cd 	.word	0x006002cd
   273b8:	006002cd 	.word	0x006002cd
   273bc:	03600060 	.word	0x03600060
   273c0:	026b026b 	.word	0x026b026b
   273c4:	026b026b 	.word	0x026b026b
   273c8:	026b026b 	.word	0x026b026b
   273cc:	02d3026b 	.word	0x02d3026b
   273d0:	006002d3 	.word	0x006002d3
   273d4:	00600060 	.word	0x00600060
   273d8:	00600060 	.word	0x00600060
   273dc:	00600060 	.word	0x00600060
   273e0:	004e004e 	.word	0x004e004e
   273e4:	004e004e 	.word	0x004e004e
   273e8:	004e004e 	.word	0x004e004e
   273ec:	00600060 	.word	0x00600060
   273f0:	00600060 	.word	0x00600060
   273f4:	00600060 	.word	0x00600060
   273f8:	00600060 	.word	0x00600060
   273fc:	00600060 	.word	0x00600060
   27400:	00600060 	.word	0x00600060
   27404:	00600060 	.word	0x00600060
   27408:	00600060 	.word	0x00600060
   2740c:	02db0060 	.word	0x02db0060
   27410:	00600060 	.word	0x00600060
   27414:	00600060 	.word	0x00600060
   27418:	00600060 	.word	0x00600060
   2741c:	00600060 	.word	0x00600060
   27420:	004e004e 	.word	0x004e004e
   27424:	004e004e 	.word	0x004e004e
   27428:	004e004e 	.word	0x004e004e
   2742c:	00600060 	.word	0x00600060
   27430:	00600060 	.word	0x00600060
   27434:	00600060 	.word	0x00600060
   27438:	00600060 	.word	0x00600060
   2743c:	00600060 	.word	0x00600060
   27440:	00600060 	.word	0x00600060
   27444:	00600060 	.word	0x00600060
   27448:	00600060 	.word	0x00600060
   2744c:	02db0060 	.word	0x02db0060
   27450:	f1b9 0f0a 	cmp.w	r9, #10
   27454:	dd0e      	ble.n	27474 <__ssvfscanf_r+0x4a0>
   27456:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   2745a:	f805 0b01 	strb.w	r0, [r5], #1
   2745e:	6873      	ldr	r3, [r6, #4]
   27460:	3b01      	subs	r3, #1
   27462:	2b00      	cmp	r3, #0
   27464:	6073      	str	r3, [r6, #4]
   27466:	f340 8328 	ble.w	27aba <__ssvfscanf_r+0xae6>
   2746a:	3201      	adds	r2, #1
   2746c:	6032      	str	r2, [r6, #0]
   2746e:	f1b8 0801 	subs.w	r8, r8, #1
   27472:	d197      	bne.n	273a4 <__ssvfscanf_r+0x3d0>
   27474:	05e3      	lsls	r3, r4, #23
   27476:	46d0      	mov	r8, sl
   27478:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
   2747c:	46da      	mov	sl, fp
   2747e:	46b3      	mov	fp, r6
   27480:	d507      	bpl.n	27492 <__ssvfscanf_r+0x4be>
   27482:	69fb      	ldr	r3, [r7, #28]
   27484:	429d      	cmp	r5, r3
   27486:	f200 8593 	bhi.w	27fb0 <_flash_used+0x4c8>
   2748a:	69fb      	ldr	r3, [r7, #28]
   2748c:	429d      	cmp	r5, r3
   2748e:	f43f ae49 	beq.w	27124 <__ssvfscanf_r+0x150>
   27492:	f014 0210 	ands.w	r2, r4, #16
   27496:	f040 8321 	bne.w	27adc <__ssvfscanf_r+0xb08>
   2749a:	6a3e      	ldr	r6, [r7, #32]
   2749c:	ee18 0a10 	vmov	r0, s16
   274a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   274a2:	69f9      	ldr	r1, [r7, #28]
   274a4:	702a      	strb	r2, [r5, #0]
   274a6:	47b0      	blx	r6
   274a8:	06a6      	lsls	r6, r4, #26
   274aa:	f100 830f 	bmi.w	27acc <__ssvfscanf_r+0xaf8>
   274ae:	0721      	lsls	r1, r4, #28
   274b0:	f100 84ab 	bmi.w	27e0a <_flash_used+0x322>
   274b4:	0762      	lsls	r2, r4, #29
   274b6:	f140 870d 	bpl.w	282d4 <_flash_used+0x7ec>
   274ba:	6abc      	ldr	r4, [r7, #40]	; 0x28
   274bc:	f854 3b04 	ldr.w	r3, [r4], #4
   274c0:	8018      	strh	r0, [r3, #0]
   274c2:	62bc      	str	r4, [r7, #40]	; 0x28
   274c4:	e307      	b.n	27ad6 <__ssvfscanf_r+0xb02>
   274c6:	f1b8 0f00 	cmp.w	r8, #0
   274ca:	bf08      	it	eq
   274cc:	f04f 38ff 	moveq.w	r8, #4294967295
   274d0:	f014 0501 	ands.w	r5, r4, #1
   274d4:	f000 831c 	beq.w	27b10 <_flash_used+0x28>
   274d8:	f014 0310 	ands.w	r3, r4, #16
   274dc:	61fb      	str	r3, [r7, #28]
   274de:	f040 8604 	bne.w	280ea <_flash_used+0x602>
   274e2:	0622      	lsls	r2, r4, #24
   274e4:	6abe      	ldr	r6, [r7, #40]	; 0x28
   274e6:	f140 8693 	bpl.w	28210 <_flash_used+0x728>
   274ea:	f856 3b04 	ldr.w	r3, [r6], #4
   274ee:	63bb      	str	r3, [r7, #56]	; 0x38
   274f0:	2b00      	cmp	r3, #0
   274f2:	f43f ae17 	beq.w	27124 <__ssvfscanf_r+0x150>
   274f6:	2080      	movs	r0, #128	; 0x80
   274f8:	f7fe fa1a 	bl	25930 <malloc>
   274fc:	4681      	mov	r9, r0
   274fe:	2800      	cmp	r0, #0
   27500:	f000 8517 	beq.w	27f32 <_flash_used+0x44a>
   27504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27506:	6bba      	ldr	r2, [r7, #56]	; 0x38
   27508:	88dd      	ldrh	r5, [r3, #6]
   2750a:	889c      	ldrh	r4, [r3, #4]
   2750c:	6010      	str	r0, [r2, #0]
   2750e:	42a5      	cmp	r5, r4
   27510:	f080 8468 	bcs.w	27de4 <_flash_used+0x2fc>
   27514:	6818      	ldr	r0, [r3, #0]
   27516:	6bba      	ldr	r2, [r7, #56]	; 0x38
   27518:	1c6b      	adds	r3, r5, #1
   2751a:	62be      	str	r6, [r7, #40]	; 0x28
   2751c:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   27520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27522:	f8c7 9018 	str.w	r9, [r7, #24]
   27526:	80d3      	strh	r3, [r2, #6]
   27528:	2320      	movs	r3, #32
   2752a:	617b      	str	r3, [r7, #20]
   2752c:	f8db 3000 	ldr.w	r3, [fp]
   27530:	4ac4      	ldr	r2, [pc, #784]	; (27844 <__ssvfscanf_r+0x870>)
   27532:	781b      	ldrb	r3, [r3, #0]
   27534:	5cd3      	ldrb	r3, [r2, r3]
   27536:	f013 0508 	ands.w	r5, r3, #8
   2753a:	f000 8544 	beq.w	27fc6 <_flash_used+0x4de>
   2753e:	69fb      	ldr	r3, [r7, #28]
   27540:	2b00      	cmp	r3, #0
   27542:	f47f ae14 	bne.w	2716e <__ssvfscanf_r+0x19a>
   27546:	69ba      	ldr	r2, [r7, #24]
   27548:	f8c9 3000 	str.w	r3, [r9]
   2754c:	eba9 0102 	sub.w	r1, r9, r2
   27550:	697a      	ldr	r2, [r7, #20]
   27552:	108b      	asrs	r3, r1, #2
   27554:	3301      	adds	r3, #1
   27556:	429a      	cmp	r2, r3
   27558:	f240 8170 	bls.w	2783c <__ssvfscanf_r+0x868>
   2755c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   2755e:	2c00      	cmp	r4, #0
   27560:	f000 816c 	beq.w	2783c <__ssvfscanf_r+0x868>
   27564:	3104      	adds	r1, #4
   27566:	6820      	ldr	r0, [r4, #0]
   27568:	f7fe fd88 	bl	2607c <realloc>
   2756c:	2800      	cmp	r0, #0
   2756e:	f000 8165 	beq.w	2783c <__ssvfscanf_r+0x868>
   27572:	6020      	str	r0, [r4, #0]
   27574:	e162      	b.n	2783c <__ssvfscanf_r+0x868>
   27576:	f1b8 0f00 	cmp.w	r8, #0
   2757a:	bf08      	it	eq
   2757c:	f04f 38ff 	moveq.w	r8, #4294967295
   27580:	07e2      	lsls	r2, r4, #31
   27582:	f140 833f 	bpl.w	27c04 <_flash_used+0x11c>
   27586:	f014 0310 	ands.w	r3, r4, #16
   2758a:	617b      	str	r3, [r7, #20]
   2758c:	f040 85f2 	bne.w	28174 <_flash_used+0x68c>
   27590:	0623      	lsls	r3, r4, #24
   27592:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27594:	f140 864a 	bpl.w	2822c <_flash_used+0x744>
   27598:	f856 3b04 	ldr.w	r3, [r6], #4
   2759c:	60bb      	str	r3, [r7, #8]
   2759e:	2b00      	cmp	r3, #0
   275a0:	f43f adc0 	beq.w	27124 <__ssvfscanf_r+0x150>
   275a4:	2080      	movs	r0, #128	; 0x80
   275a6:	f7fe f9c3 	bl	25930 <malloc>
   275aa:	4681      	mov	r9, r0
   275ac:	2800      	cmp	r0, #0
   275ae:	f000 84c0 	beq.w	27f32 <_flash_used+0x44a>
   275b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   275b4:	68ba      	ldr	r2, [r7, #8]
   275b6:	88dd      	ldrh	r5, [r3, #6]
   275b8:	889c      	ldrh	r4, [r3, #4]
   275ba:	6010      	str	r0, [r2, #0]
   275bc:	42a5      	cmp	r5, r4
   275be:	f080 83ed 	bcs.w	27d9c <_flash_used+0x2b4>
   275c2:	6818      	ldr	r0, [r3, #0]
   275c4:	68ba      	ldr	r2, [r7, #8]
   275c6:	1c6b      	adds	r3, r5, #1
   275c8:	62be      	str	r6, [r7, #40]	; 0x28
   275ca:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   275ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   275d0:	f8c7 900c 	str.w	r9, [r7, #12]
   275d4:	80d3      	strh	r3, [r2, #6]
   275d6:	2320      	movs	r3, #32
   275d8:	613b      	str	r3, [r7, #16]
   275da:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   275dc:	2400      	movs	r4, #0
   275de:	f8c7 a01c 	str.w	sl, [r7, #28]
   275e2:	ee18 aa10 	vmov	sl, s16
   275e6:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   275ea:	e050      	b.n	2768e <__ssvfscanf_r+0x6ba>
   275ec:	4605      	mov	r5, r0
   275ee:	f8c9 0000 	str.w	r0, [r9]
   275f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
   275f6:	2208      	movs	r2, #8
   275f8:	2100      	movs	r1, #0
   275fa:	4618      	mov	r0, r3
   275fc:	61bb      	str	r3, [r7, #24]
   275fe:	f7fe fce1 	bl	25fc4 <memset>
   27602:	4891      	ldr	r0, [pc, #580]	; (27848 <__ssvfscanf_r+0x874>)
   27604:	462a      	mov	r2, r5
   27606:	69bb      	ldr	r3, [r7, #24]
   27608:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
   2760c:	f107 0140 	add.w	r1, r7, #64	; 0x40
   27610:	4605      	mov	r5, r0
   27612:	4650      	mov	r0, sl
   27614:	47a8      	blx	r5
   27616:	2801      	cmp	r0, #1
   27618:	f000 84b0 	beq.w	27f7c <_flash_used+0x494>
   2761c:	2200      	movs	r2, #0
   2761e:	f107 0358 	add.w	r3, r7, #88	; 0x58
   27622:	5c9b      	ldrb	r3, [r3, r2]
   27624:	2b00      	cmp	r3, #0
   27626:	f000 866e 	beq.w	28306 <_flash_used+0x81e>
   2762a:	69fb      	ldr	r3, [r7, #28]
   2762c:	2e03      	cmp	r6, #3
   2762e:	4443      	add	r3, r8
   27630:	61fb      	str	r3, [r7, #28]
   27632:	f000 84a7 	beq.w	27f84 <_flash_used+0x49c>
   27636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27638:	3b01      	subs	r3, #1
   2763a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2763c:	697d      	ldr	r5, [r7, #20]
   2763e:	2d00      	cmp	r5, #0
   27640:	f040 8499 	bne.w	27f76 <_flash_used+0x48e>
   27644:	f109 0904 	add.w	r9, r9, #4
   27648:	68f8      	ldr	r0, [r7, #12]
   2764a:	693b      	ldr	r3, [r7, #16]
   2764c:	eba9 0400 	sub.w	r4, r9, r0
   27650:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   27654:	f200 848f 	bhi.w	27f76 <_flash_used+0x48e>
   27658:	68ba      	ldr	r2, [r7, #8]
   2765a:	2a00      	cmp	r2, #0
   2765c:	f000 848b 	beq.w	27f76 <_flash_used+0x48e>
   27660:	00d9      	lsls	r1, r3, #3
   27662:	f7fe fd0b 	bl	2607c <realloc>
   27666:	60f8      	str	r0, [r7, #12]
   27668:	2800      	cmp	r0, #0
   2766a:	f000 8462 	beq.w	27f32 <_flash_used+0x44a>
   2766e:	693b      	ldr	r3, [r7, #16]
   27670:	eb00 0904 	add.w	r9, r0, r4
   27674:	68ba      	ldr	r2, [r7, #8]
   27676:	462c      	mov	r4, r5
   27678:	005b      	lsls	r3, r3, #1
   2767a:	6010      	str	r0, [r2, #0]
   2767c:	613b      	str	r3, [r7, #16]
   2767e:	f8db 3004 	ldr.w	r3, [fp, #4]
   27682:	2b00      	cmp	r3, #0
   27684:	dd3c      	ble.n	27700 <__ssvfscanf_r+0x72c>
   27686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27688:	2b00      	cmp	r3, #0
   2768a:	f000 857c 	beq.w	28186 <_flash_used+0x69e>
   2768e:	f003 f961 	bl	2a954 <__locale_mb_cur_max>
   27692:	42a0      	cmp	r0, r4
   27694:	f43f ad3d 	beq.w	27112 <__ssvfscanf_r+0x13e>
   27698:	f8db 2000 	ldr.w	r2, [fp]
   2769c:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   276a0:	f8db 3004 	ldr.w	r3, [fp, #4]
   276a4:	2e03      	cmp	r6, #3
   276a6:	f812 1b01 	ldrb.w	r1, [r2], #1
   276aa:	f104 0801 	add.w	r8, r4, #1
   276ae:	f103 33ff 	add.w	r3, r3, #4294967295
   276b2:	5501      	strb	r1, [r0, r4]
   276b4:	e9cb 2300 	strd	r2, r3, [fp]
   276b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
   276bc:	63bb      	str	r3, [r7, #56]	; 0x38
   276be:	d102      	bne.n	276c6 <__ssvfscanf_r+0x6f2>
   276c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   276c2:	2b04      	cmp	r3, #4
   276c4:	d004      	beq.n	276d0 <__ssvfscanf_r+0x6fc>
   276c6:	2208      	movs	r2, #8
   276c8:	2100      	movs	r1, #0
   276ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   276cc:	f7fe fc7a 	bl	25fc4 <memset>
   276d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   276d2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   276d6:	4649      	mov	r1, r9
   276d8:	4650      	mov	r0, sl
   276da:	9300      	str	r3, [sp, #0]
   276dc:	4643      	mov	r3, r8
   276de:	f003 f9db 	bl	2aa98 <_mbrtowc_r>
   276e2:	1c45      	adds	r5, r0, #1
   276e4:	4606      	mov	r6, r0
   276e6:	f43f ad14 	beq.w	27112 <__ssvfscanf_r+0x13e>
   276ea:	2800      	cmp	r0, #0
   276ec:	f43f af7e 	beq.w	275ec <__ssvfscanf_r+0x618>
   276f0:	1cb0      	adds	r0, r6, #2
   276f2:	f040 86a1 	bne.w	28438 <_flash_used+0x950>
   276f6:	f8db 3004 	ldr.w	r3, [fp, #4]
   276fa:	4644      	mov	r4, r8
   276fc:	2b00      	cmp	r3, #0
   276fe:	dcc2      	bgt.n	27686 <__ssvfscanf_r+0x6b2>
   27700:	4659      	mov	r1, fp
   27702:	4650      	mov	r0, sl
   27704:	f004 fa74 	bl	2bbf0 <__ssrefill_r>
   27708:	2800      	cmp	r0, #0
   2770a:	d0bc      	beq.n	27686 <__ssvfscanf_r+0x6b2>
   2770c:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   27710:	62fe      	str	r6, [r7, #44]	; 0x2c
   27712:	2c00      	cmp	r4, #0
   27714:	f47f acfd 	bne.w	27112 <__ssvfscanf_r+0x13e>
   27718:	697b      	ldr	r3, [r7, #20]
   2771a:	2b00      	cmp	r3, #0
   2771c:	f47f ad27 	bne.w	2716e <__ssvfscanf_r+0x19a>
   27720:	68fa      	ldr	r2, [r7, #12]
   27722:	f8c9 3000 	str.w	r3, [r9]
   27726:	eba9 0102 	sub.w	r1, r9, r2
   2772a:	693a      	ldr	r2, [r7, #16]
   2772c:	108b      	asrs	r3, r1, #2
   2772e:	3301      	adds	r3, #1
   27730:	429a      	cmp	r2, r3
   27732:	f240 8083 	bls.w	2783c <__ssvfscanf_r+0x868>
   27736:	68bc      	ldr	r4, [r7, #8]
   27738:	2c00      	cmp	r4, #0
   2773a:	d07f      	beq.n	2783c <__ssvfscanf_r+0x868>
   2773c:	e712      	b.n	27564 <__ssvfscanf_r+0x590>
   2773e:	2c07      	cmp	r4, #7
   27740:	f47f ae05 	bne.w	2734e <__ssvfscanf_r+0x37a>
   27744:	2408      	movs	r4, #8
   27746:	e5f0      	b.n	2732a <__ssvfscanf_r+0x356>
   27748:	2c06      	cmp	r4, #6
   2774a:	f47f ae00 	bne.w	2734e <__ssvfscanf_r+0x37a>
   2774e:	2407      	movs	r4, #7
   27750:	e5eb      	b.n	2732a <__ssvfscanf_r+0x356>
   27752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27754:	2b01      	cmp	r3, #1
   27756:	f47f adfa 	bne.w	2734e <__ssvfscanf_r+0x37a>
   2775a:	2302      	movs	r3, #2
   2775c:	63bb      	str	r3, [r7, #56]	; 0x38
   2775e:	e5e4      	b.n	2732a <__ssvfscanf_r+0x356>
   27760:	f01b 0f80 	tst.w	fp, #128	; 0x80
   27764:	f43f adf3 	beq.w	2734e <__ssvfscanf_r+0x37a>
   27768:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   2776c:	e5dd      	b.n	2732a <__ssvfscanf_r+0x356>
   2776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27770:	2b00      	cmp	r3, #0
   27772:	f040 81bb 	bne.w	27aec <_flash_used+0x4>
   27776:	2e00      	cmp	r6, #0
   27778:	f040 81b8 	bne.w	27aec <_flash_used+0x4>
   2777c:	f40b 6ee0 	and.w	lr, fp, #1792	; 0x700
   27780:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   27784:	f000 840e 	beq.w	27fa4 <_flash_used+0x4bc>
   27788:	2c01      	cmp	r4, #1
   2778a:	d002      	beq.n	27792 <__ssvfscanf_r+0x7be>
   2778c:	2c04      	cmp	r4, #4
   2778e:	f47f adde 	bne.w	2734e <__ssvfscanf_r+0x37a>
   27792:	1c62      	adds	r2, r4, #1
   27794:	b2d4      	uxtb	r4, r2
   27796:	e5c8      	b.n	2732a <__ssvfscanf_r+0x356>
   27798:	2c00      	cmp	r4, #0
   2779a:	f040 8187 	bne.w	27aac <__ssvfscanf_r+0xad8>
   2779e:	2e00      	cmp	r6, #0
   277a0:	f040 8184 	bne.w	27aac <__ssvfscanf_r+0xad8>
   277a4:	f40b 62e0 	and.w	r2, fp, #1792	; 0x700
   277a8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
   277ac:	f000 83f5 	beq.w	27f9a <_flash_used+0x4b2>
   277b0:	465c      	mov	r4, fp
   277b2:	2300      	movs	r3, #0
   277b4:	687d      	ldr	r5, [r7, #4]
   277b6:	46c3      	mov	fp, r8
   277b8:	617b      	str	r3, [r7, #20]
   277ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   277bc:	3b01      	subs	r3, #1
   277be:	2b01      	cmp	r3, #1
   277c0:	f240 85f0 	bls.w	283a4 <_flash_used+0x8bc>
   277c4:	1e6b      	subs	r3, r5, #1
   277c6:	2b06      	cmp	r3, #6
   277c8:	f240 82ae 	bls.w	27d28 <_flash_used+0x240>
   277cc:	05e6      	lsls	r6, r4, #23
   277ce:	d512      	bpl.n	277f6 <__ssvfscanf_r+0x822>
   277d0:	0565      	lsls	r5, r4, #21
   277d2:	f100 85fe 	bmi.w	283d2 <_flash_used+0x8ea>
   277d6:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   277da:	f001 03df 	and.w	r3, r1, #223	; 0xdf
   277de:	2b45      	cmp	r3, #69	; 0x45
   277e0:	f040 8470 	bne.w	280c4 <_flash_used+0x5dc>
   277e4:	f109 39ff 	add.w	r9, r9, #4294967295
   277e8:	f10a 3aff 	add.w	sl, sl, #4294967295
   277ec:	465a      	mov	r2, fp
   277ee:	ee18 0a10 	vmov	r0, s16
   277f2:	f004 f9bd 	bl	2bb70 <_sungetc_r>
   277f6:	f014 0210 	ands.w	r2, r4, #16
   277fa:	f47f acb8 	bne.w	2716e <__ssvfscanf_r+0x19a>
   277fe:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   27802:	f889 2000 	strb.w	r2, [r9]
   27806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2780a:	f000 8452 	beq.w	280b2 <_flash_used+0x5ca>
   2780e:	693b      	ldr	r3, [r7, #16]
   27810:	2b00      	cmp	r3, #0
   27812:	f040 8317 	bne.w	27e44 <_flash_used+0x35c>
   27816:	ee18 0a10 	vmov	r0, s16
   2781a:	69f9      	ldr	r1, [r7, #28]
   2781c:	2200      	movs	r2, #0
   2781e:	f7ff fab3 	bl	26d88 <_strtod_r>
   27822:	07e0      	lsls	r0, r4, #31
   27824:	ec59 8b10 	vmov	r8, r9, d0
   27828:	d402      	bmi.n	27830 <__ssvfscanf_r+0x85c>
   2782a:	07a1      	lsls	r1, r4, #30
   2782c:	f140 82f3 	bpl.w	27e16 <_flash_used+0x32e>
   27830:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27832:	f856 3b04 	ldr.w	r3, [r6], #4
   27836:	e9c3 8900 	strd	r8, r9, [r3]
   2783a:	62be      	str	r6, [r7, #40]	; 0x28
   2783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2783e:	3301      	adds	r3, #1
   27840:	633b      	str	r3, [r7, #48]	; 0x30
   27842:	e494      	b.n	2716e <__ssvfscanf_r+0x19a>
   27844:	0002f3c9 	.word	0x0002f3c9
   27848:	200208f0 	.word	0x200208f0
   2784c:	2c02      	cmp	r4, #2
   2784e:	f47f ad7e 	bne.w	2734e <__ssvfscanf_r+0x37a>
   27852:	2403      	movs	r4, #3
   27854:	e569      	b.n	2732a <__ssvfscanf_r+0x356>
   27856:	f40b 6ea0 	and.w	lr, fp, #1280	; 0x500
   2785a:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
   2785e:	d006      	beq.n	2786e <__ssvfscanf_r+0x89a>
   27860:	f41b 6f80 	tst.w	fp, #1024	; 0x400
   27864:	f43f ad73 	beq.w	2734e <__ssvfscanf_r+0x37a>
   27868:	2e00      	cmp	r6, #0
   2786a:	f000 8594 	beq.w	28396 <_flash_used+0x8ae>
   2786e:	f41b 7f00 	tst.w	fp, #512	; 0x200
   27872:	d104      	bne.n	2787e <__ssvfscanf_r+0x8aa>
   27874:	69bb      	ldr	r3, [r7, #24]
   27876:	f8c7 9008 	str.w	r9, [r7, #8]
   2787a:	1af3      	subs	r3, r6, r3
   2787c:	613b      	str	r3, [r7, #16]
   2787e:	f42b 63f0 	bic.w	r3, fp, #1920	; 0x780
   27882:	2600      	movs	r6, #0
   27884:	f443 7bc0 	orr.w	fp, r3, #384	; 0x180
   27888:	e54f      	b.n	2732a <__ssvfscanf_r+0x356>
   2788a:	4b9d      	ldr	r3, [pc, #628]	; (27b00 <_flash_used+0x18>)
   2788c:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   27890:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   27894:	e5e1      	b.n	2745a <__ssvfscanf_r+0x486>
   27896:	f41b 7f80 	tst.w	fp, #256	; 0x100
   2789a:	f43f ad64 	beq.w	27366 <__ssvfscanf_r+0x392>
   2789e:	68fb      	ldr	r3, [r7, #12]
   278a0:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   278a4:	3601      	adds	r6, #1
   278a6:	2b00      	cmp	r3, #0
   278a8:	f040 8239 	bne.w	27d1e <_flash_used+0x236>
   278ac:	3d01      	subs	r5, #1
   278ae:	e53f      	b.n	27330 <__ssvfscanf_r+0x35c>
   278b0:	0726      	lsls	r6, r4, #28
   278b2:	f47f ac37 	bne.w	27124 <__ssvfscanf_r+0x150>
   278b6:	7842      	ldrb	r2, [r0, #1]
   278b8:	4608      	mov	r0, r1
   278ba:	f7ff bbc0 	b.w	2703e <__ssvfscanf_r+0x6a>
   278be:	0723      	lsls	r3, r4, #28
   278c0:	f47f ac30 	bne.w	27124 <__ssvfscanf_r+0x150>
   278c4:	7842      	ldrb	r2, [r0, #1]
   278c6:	f044 0402 	orr.w	r4, r4, #2
   278ca:	4608      	mov	r0, r1
   278cc:	f7ff bbb7 	b.w	2703e <__ssvfscanf_r+0x6a>
   278d0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   278d4:	4b8b      	ldr	r3, [pc, #556]	; (27b04 <_flash_used+0x1c>)
   278d6:	2603      	movs	r6, #3
   278d8:	63f9      	str	r1, [r7, #60]	; 0x3c
   278da:	623b      	str	r3, [r7, #32]
   278dc:	2310      	movs	r3, #16
   278de:	627b      	str	r3, [r7, #36]	; 0x24
   278e0:	f8db 3004 	ldr.w	r3, [fp, #4]
   278e4:	2b00      	cmp	r3, #0
   278e6:	f73f ac89 	bgt.w	271fc <__ssvfscanf_r+0x228>
   278ea:	4659      	mov	r1, fp
   278ec:	ee18 0a10 	vmov	r0, s16
   278f0:	f004 f97e 	bl	2bbf0 <__ssrefill_r>
   278f4:	2800      	cmp	r0, #0
   278f6:	f47f ac0c 	bne.w	27112 <__ssvfscanf_r+0x13e>
   278fa:	0662      	lsls	r2, r4, #25
   278fc:	f53f ac81 	bmi.w	27202 <__ssvfscanf_r+0x22e>
   27900:	f8db 2000 	ldr.w	r2, [fp]
   27904:	4980      	ldr	r1, [pc, #512]	; (27b08 <_flash_used+0x20>)
   27906:	7813      	ldrb	r3, [r2, #0]
   27908:	5ccb      	ldrb	r3, [r1, r3]
   2790a:	071b      	lsls	r3, r3, #28
   2790c:	f57f ac79 	bpl.w	27202 <__ssvfscanf_r+0x22e>
   27910:	ee18 9a10 	vmov	r9, s16
   27914:	e007      	b.n	27926 <__ssvfscanf_r+0x952>
   27916:	f8cb 2000 	str.w	r2, [fp]
   2791a:	7813      	ldrb	r3, [r2, #0]
   2791c:	497a      	ldr	r1, [pc, #488]	; (27b08 <_flash_used+0x20>)
   2791e:	5ccb      	ldrb	r3, [r1, r3]
   27920:	0718      	lsls	r0, r3, #28
   27922:	f57f ac6e 	bpl.w	27202 <__ssvfscanf_r+0x22e>
   27926:	f8db 3004 	ldr.w	r3, [fp, #4]
   2792a:	f10a 0a01 	add.w	sl, sl, #1
   2792e:	3201      	adds	r2, #1
   27930:	3b01      	subs	r3, #1
   27932:	2b00      	cmp	r3, #0
   27934:	f8cb 3004 	str.w	r3, [fp, #4]
   27938:	dced      	bgt.n	27916 <__ssvfscanf_r+0x942>
   2793a:	4659      	mov	r1, fp
   2793c:	4648      	mov	r0, r9
   2793e:	f004 f957 	bl	2bbf0 <__ssrefill_r>
   27942:	2800      	cmp	r0, #0
   27944:	f47f abe5 	bne.w	27112 <__ssvfscanf_r+0x13e>
   27948:	f8db 2000 	ldr.w	r2, [fp]
   2794c:	e7e5      	b.n	2791a <__ssvfscanf_r+0x946>
   2794e:	0621      	lsls	r1, r4, #24
   27950:	f57f ad90 	bpl.w	27474 <__ssvfscanf_r+0x4a0>
   27954:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   27958:	e57f      	b.n	2745a <__ssvfscanf_r+0x486>
   2795a:	4b69      	ldr	r3, [pc, #420]	; (27b00 <_flash_used+0x18>)
   2795c:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   27960:	f1b9 0f08 	cmp.w	r9, #8
   27964:	f73f ad77 	bgt.w	27456 <__ssvfscanf_r+0x482>
   27968:	e584      	b.n	27474 <__ssvfscanf_r+0x4a0>
   2796a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   2796e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   27972:	f47f ad7f 	bne.w	27474 <__ssvfscanf_r+0x4a0>
   27976:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   2797a:	f04f 0910 	mov.w	r9, #16
   2797e:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   27982:	e56a      	b.n	2745a <__ssvfscanf_r+0x486>
   27984:	f044 0401 	orr.w	r4, r4, #1
   27988:	2602      	movs	r6, #2
   2798a:	63f9      	str	r1, [r7, #60]	; 0x3c
   2798c:	e431      	b.n	271f2 <__ssvfscanf_r+0x21e>
   2798e:	f044 0401 	orr.w	r4, r4, #1
   27992:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   27996:	2600      	movs	r6, #0
   27998:	63f9      	str	r1, [r7, #60]	; 0x3c
   2799a:	e42a      	b.n	271f2 <__ssvfscanf_r+0x21e>
   2799c:	f044 0401 	orr.w	r4, r4, #1
   279a0:	4b58      	ldr	r3, [pc, #352]	; (27b04 <_flash_used+0x1c>)
   279a2:	2603      	movs	r6, #3
   279a4:	63f9      	str	r1, [r7, #60]	; 0x3c
   279a6:	623b      	str	r3, [r7, #32]
   279a8:	2308      	movs	r3, #8
   279aa:	627b      	str	r3, [r7, #36]	; 0x24
   279ac:	e421      	b.n	271f2 <__ssvfscanf_r+0x21e>
   279ae:	f044 0401 	orr.w	r4, r4, #1
   279b2:	4b56      	ldr	r3, [pc, #344]	; (27b0c <_flash_used+0x24>)
   279b4:	2603      	movs	r6, #3
   279b6:	63f9      	str	r1, [r7, #60]	; 0x3c
   279b8:	623b      	str	r3, [r7, #32]
   279ba:	230a      	movs	r3, #10
   279bc:	627b      	str	r3, [r7, #36]	; 0x24
   279be:	e418      	b.n	271f2 <__ssvfscanf_r+0x21e>
   279c0:	f107 0058 	add.w	r0, r7, #88	; 0x58
   279c4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   279c8:	f003 fe02 	bl	2b5d0 <__sccl>
   279cc:	2601      	movs	r6, #1
   279ce:	63f8      	str	r0, [r7, #60]	; 0x3c
   279d0:	e40f      	b.n	271f2 <__ssvfscanf_r+0x21e>
   279d2:	0726      	lsls	r6, r4, #28
   279d4:	f47f aba6 	bne.w	27124 <__ssvfscanf_r+0x150>
   279d8:	7842      	ldrb	r2, [r0, #1]
   279da:	2a6c      	cmp	r2, #108	; 0x6c
   279dc:	f000 83d8 	beq.w	28190 <_flash_used+0x6a8>
   279e0:	f044 0401 	orr.w	r4, r4, #1
   279e4:	4608      	mov	r0, r1
   279e6:	f7ff bb2a 	b.w	2703e <__ssvfscanf_r+0x6a>
   279ea:	ea58 0804 	orrs.w	r8, r8, r4
   279ee:	f47f ab99 	bne.w	27124 <__ssvfscanf_r+0x150>
   279f2:	7842      	ldrb	r2, [r0, #1]
   279f4:	2410      	movs	r4, #16
   279f6:	4608      	mov	r0, r1
   279f8:	f7ff bb21 	b.w	2703e <__ssvfscanf_r+0x6a>
   279fc:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   27a00:	f47f ab90 	bne.w	27124 <__ssvfscanf_r+0x150>
   27a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27a06:	2a00      	cmp	r2, #0
   27a08:	f000 83f7 	beq.w	281fa <_flash_used+0x712>
   27a0c:	7842      	ldrb	r2, [r0, #1]
   27a0e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   27a12:	4608      	mov	r0, r1
   27a14:	f7ff bb13 	b.w	2703e <__ssvfscanf_r+0x6a>
   27a18:	06e2      	lsls	r2, r4, #27
   27a1a:	f100 81aa 	bmi.w	27d72 <_flash_used+0x28a>
   27a1e:	0723      	lsls	r3, r4, #28
   27a20:	f140 840d 	bpl.w	2823e <_flash_used+0x756>
   27a24:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27a26:	63f9      	str	r1, [r7, #60]	; 0x3c
   27a28:	f856 3b04 	ldr.w	r3, [r6], #4
   27a2c:	f883 a000 	strb.w	sl, [r3]
   27a30:	62be      	str	r6, [r7, #40]	; 0x28
   27a32:	f7ff bb9c 	b.w	2716e <__ssvfscanf_r+0x19a>
   27a36:	0722      	lsls	r2, r4, #28
   27a38:	f47f ab74 	bne.w	27124 <__ssvfscanf_r+0x150>
   27a3c:	7842      	ldrb	r2, [r0, #1]
   27a3e:	2a68      	cmp	r2, #104	; 0x68
   27a40:	f000 83b0 	beq.w	281a4 <_flash_used+0x6bc>
   27a44:	f044 0404 	orr.w	r4, r4, #4
   27a48:	4608      	mov	r0, r1
   27a4a:	f7ff baf8 	b.w	2703e <__ssvfscanf_r+0x6a>
   27a4e:	4b2f      	ldr	r3, [pc, #188]	; (27b0c <_flash_used+0x24>)
   27a50:	2603      	movs	r6, #3
   27a52:	63f9      	str	r1, [r7, #60]	; 0x3c
   27a54:	623b      	str	r3, [r7, #32]
   27a56:	2300      	movs	r3, #0
   27a58:	627b      	str	r3, [r7, #36]	; 0x24
   27a5a:	f7ff bbca 	b.w	271f2 <__ssvfscanf_r+0x21e>
   27a5e:	4b29      	ldr	r3, [pc, #164]	; (27b04 <_flash_used+0x1c>)
   27a60:	2603      	movs	r6, #3
   27a62:	63f9      	str	r1, [r7, #60]	; 0x3c
   27a64:	623b      	str	r3, [r7, #32]
   27a66:	230a      	movs	r3, #10
   27a68:	627b      	str	r3, [r7, #36]	; 0x24
   27a6a:	f7ff bbc2 	b.w	271f2 <__ssvfscanf_r+0x21e>
   27a6e:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   27a72:	e72f      	b.n	278d4 <__ssvfscanf_r+0x900>
   27a74:	0521      	lsls	r1, r4, #20
   27a76:	f57f acf0 	bpl.w	2745a <__ssvfscanf_r+0x486>
   27a7a:	f1b9 0f00 	cmp.w	r9, #0
   27a7e:	d103      	bne.n	27a88 <__ssvfscanf_r+0xab4>
   27a80:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   27a84:	f04f 0908 	mov.w	r9, #8
   27a88:	0563      	lsls	r3, r4, #21
   27a8a:	f140 8166 	bpl.w	27d5a <_flash_used+0x272>
   27a8e:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   27a92:	e4e2      	b.n	2745a <__ssvfscanf_r+0x486>
   27a94:	4641      	mov	r1, r8
   27a96:	ee18 0a10 	vmov	r0, s16
   27a9a:	f004 f8a9 	bl	2bbf0 <__ssrefill_r>
   27a9e:	2800      	cmp	r0, #0
   27aa0:	f47f ac55 	bne.w	2734e <__ssvfscanf_r+0x37a>
   27aa4:	2d00      	cmp	r5, #0
   27aa6:	f47f abdc 	bne.w	27262 <__ssvfscanf_r+0x28e>
   27aaa:	e450      	b.n	2734e <__ssvfscanf_r+0x37a>
   27aac:	2c03      	cmp	r4, #3
   27aae:	f43f ae70 	beq.w	27792 <__ssvfscanf_r+0x7be>
   27ab2:	2c05      	cmp	r4, #5
   27ab4:	f43f ae6d 	beq.w	27792 <__ssvfscanf_r+0x7be>
   27ab8:	e449      	b.n	2734e <__ssvfscanf_r+0x37a>
   27aba:	4631      	mov	r1, r6
   27abc:	ee18 0a10 	vmov	r0, s16
   27ac0:	f004 f896 	bl	2bbf0 <__ssrefill_r>
   27ac4:	2800      	cmp	r0, #0
   27ac6:	f43f acd2 	beq.w	2746e <__ssvfscanf_r+0x49a>
   27aca:	e4d3      	b.n	27474 <__ssvfscanf_r+0x4a0>
   27acc:	6abc      	ldr	r4, [r7, #40]	; 0x28
   27ace:	f854 3b04 	ldr.w	r3, [r4], #4
   27ad2:	6018      	str	r0, [r3, #0]
   27ad4:	62bc      	str	r4, [r7, #40]	; 0x28
   27ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27ad8:	3301      	adds	r3, #1
   27ada:	633b      	str	r3, [r7, #48]	; 0x30
   27adc:	69fb      	ldr	r3, [r7, #28]
   27ade:	1aed      	subs	r5, r5, r3
   27ae0:	4643      	mov	r3, r8
   27ae2:	442b      	add	r3, r5
   27ae4:	461e      	mov	r6, r3
   27ae6:	44b2      	add	sl, r6
   27ae8:	f7ff bb41 	b.w	2716e <__ssvfscanf_r+0x19a>
   27aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27aee:	2b02      	cmp	r3, #2
   27af0:	f47f ae4a 	bne.w	27788 <__ssvfscanf_r+0x7b4>
   27af4:	2303      	movs	r3, #3
   27af6:	63bb      	str	r3, [r7, #56]	; 0x38
   27af8:	e417      	b.n	2732a <__ssvfscanf_r+0x356>
   27afa:	f04f 0900 	mov.w	r9, #0
   27afe:	e444      	b.n	2738a <__ssvfscanf_r+0x3b6>
   27b00:	0002f570 	.word	0x0002f570
   27b04:	00026fb9 	.word	0x00026fb9
   27b08:	0002f3c9 	.word	0x0002f3c9
   27b0c:	00026e89 	.word	0x00026e89
   27b10:	06e6      	lsls	r6, r4, #27
   27b12:	f100 83a9 	bmi.w	28268 <_flash_used+0x780>
   27b16:	f014 0380 	ands.w	r3, r4, #128	; 0x80
   27b1a:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27b1c:	f000 8351 	beq.w	281c2 <_flash_used+0x6da>
   27b20:	f856 3b04 	ldr.w	r3, [r6], #4
   27b24:	63bb      	str	r3, [r7, #56]	; 0x38
   27b26:	2b00      	cmp	r3, #0
   27b28:	f43f aafc 	beq.w	27124 <__ssvfscanf_r+0x150>
   27b2c:	2020      	movs	r0, #32
   27b2e:	f7fd feff 	bl	25930 <malloc>
   27b32:	4605      	mov	r5, r0
   27b34:	2800      	cmp	r0, #0
   27b36:	f000 81fc 	beq.w	27f32 <_flash_used+0x44a>
   27b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27b3e:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   27b42:	8894      	ldrh	r4, [r2, #4]
   27b44:	6018      	str	r0, [r3, #0]
   27b46:	45a1      	cmp	r9, r4
   27b48:	f080 8116 	bcs.w	27d78 <_flash_used+0x290>
   27b4c:	6810      	ldr	r0, [r2, #0]
   27b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   27b50:	f109 0301 	add.w	r3, r9, #1
   27b54:	62be      	str	r6, [r7, #40]	; 0x28
   27b56:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   27b5a:	2201      	movs	r2, #1
   27b5c:	f04f 0920 	mov.w	r9, #32
   27b60:	61fa      	str	r2, [r7, #28]
   27b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27b64:	80d3      	strh	r3, [r2, #6]
   27b66:	f8db 3000 	ldr.w	r3, [fp]
   27b6a:	49b5      	ldr	r1, [pc, #724]	; (27e40 <_flash_used+0x358>)
   27b6c:	781a      	ldrb	r2, [r3, #0]
   27b6e:	5c8a      	ldrb	r2, [r1, r2]
   27b70:	0711      	lsls	r1, r2, #28
   27b72:	f100 82b8 	bmi.w	280e6 <_flash_used+0x5fe>
   27b76:	462c      	mov	r4, r5
   27b78:	f8db 2004 	ldr.w	r2, [fp, #4]
   27b7c:	1c59      	adds	r1, r3, #1
   27b7e:	462e      	mov	r6, r5
   27b80:	3a01      	subs	r2, #1
   27b82:	e9cb 1200 	strd	r1, r2, [fp]
   27b86:	781b      	ldrb	r3, [r3, #0]
   27b88:	f806 3b01 	strb.w	r3, [r6], #1
   27b8c:	1b35      	subs	r5, r6, r4
   27b8e:	45a9      	cmp	r9, r5
   27b90:	d80e      	bhi.n	27bb0 <_flash_used+0xc8>
   27b92:	69fb      	ldr	r3, [r7, #28]
   27b94:	4620      	mov	r0, r4
   27b96:	b15b      	cbz	r3, 27bb0 <_flash_used+0xc8>
   27b98:	ea4f 0949 	mov.w	r9, r9, lsl #1
   27b9c:	4649      	mov	r1, r9
   27b9e:	f7fe fa6d 	bl	2607c <realloc>
   27ba2:	4604      	mov	r4, r0
   27ba4:	2800      	cmp	r0, #0
   27ba6:	f000 81c4 	beq.w	27f32 <_flash_used+0x44a>
   27baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27bac:	1946      	adds	r6, r0, r5
   27bae:	6018      	str	r0, [r3, #0]
   27bb0:	f1b8 0801 	subs.w	r8, r8, #1
   27bb4:	4635      	mov	r5, r6
   27bb6:	f000 8292 	beq.w	280de <_flash_used+0x5f6>
   27bba:	f8db 3004 	ldr.w	r3, [fp, #4]
   27bbe:	2b00      	cmp	r3, #0
   27bc0:	f340 8349 	ble.w	28256 <_flash_used+0x76e>
   27bc4:	f8db 3000 	ldr.w	r3, [fp]
   27bc8:	499d      	ldr	r1, [pc, #628]	; (27e40 <_flash_used+0x358>)
   27bca:	781a      	ldrb	r2, [r3, #0]
   27bcc:	5c8a      	ldrb	r2, [r1, r2]
   27bce:	0712      	lsls	r2, r2, #28
   27bd0:	d5d2      	bpl.n	27b78 <_flash_used+0x90>
   27bd2:	1b31      	subs	r1, r6, r4
   27bd4:	4635      	mov	r5, r6
   27bd6:	448a      	add	sl, r1
   27bd8:	3101      	adds	r1, #1
   27bda:	2300      	movs	r3, #0
   27bdc:	4589      	cmp	r9, r1
   27bde:	702b      	strb	r3, [r5, #0]
   27be0:	f67f ae2c 	bls.w	2783c <__ssvfscanf_r+0x868>
   27be4:	69fb      	ldr	r3, [r7, #28]
   27be6:	2b00      	cmp	r3, #0
   27be8:	f43f ae28 	beq.w	2783c <__ssvfscanf_r+0x868>
   27bec:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   27bee:	6820      	ldr	r0, [r4, #0]
   27bf0:	f7fe fa44 	bl	2607c <realloc>
   27bf4:	2800      	cmp	r0, #0
   27bf6:	f47f acbc 	bne.w	27572 <__ssvfscanf_r+0x59e>
   27bfa:	e61f      	b.n	2783c <__ssvfscanf_r+0x868>
   27bfc:	2300      	movs	r3, #0
   27bfe:	60fb      	str	r3, [r7, #12]
   27c00:	f7ff bb1f 	b.w	27242 <__ssvfscanf_r+0x26e>
   27c04:	06e1      	lsls	r1, r4, #27
   27c06:	f100 827d 	bmi.w	28104 <_flash_used+0x61c>
   27c0a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   27c0e:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27c10:	f000 8307 	beq.w	28222 <_flash_used+0x73a>
   27c14:	f856 3b04 	ldr.w	r3, [r6], #4
   27c18:	61fb      	str	r3, [r7, #28]
   27c1a:	2b00      	cmp	r3, #0
   27c1c:	f43f aa82 	beq.w	27124 <__ssvfscanf_r+0x150>
   27c20:	2020      	movs	r0, #32
   27c22:	f7fd fe85 	bl	25930 <malloc>
   27c26:	4605      	mov	r5, r0
   27c28:	2800      	cmp	r0, #0
   27c2a:	f000 8182 	beq.w	27f32 <_flash_used+0x44a>
   27c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27c30:	69fb      	ldr	r3, [r7, #28]
   27c32:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   27c36:	8894      	ldrh	r4, [r2, #4]
   27c38:	6018      	str	r0, [r3, #0]
   27c3a:	45a1      	cmp	r9, r4
   27c3c:	f080 80c0 	bcs.w	27dc0 <_flash_used+0x2d8>
   27c40:	6810      	ldr	r0, [r2, #0]
   27c42:	69fa      	ldr	r2, [r7, #28]
   27c44:	f109 0301 	add.w	r3, r9, #1
   27c48:	2420      	movs	r4, #32
   27c4a:	62be      	str	r6, [r7, #40]	; 0x28
   27c4c:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   27c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27c52:	80d3      	strh	r3, [r2, #6]
   27c54:	f107 0358 	add.w	r3, r7, #88	; 0x58
   27c58:	f8db 2000 	ldr.w	r2, [fp]
   27c5c:	4619      	mov	r1, r3
   27c5e:	4618      	mov	r0, r3
   27c60:	7813      	ldrb	r3, [r2, #0]
   27c62:	5ccb      	ldrb	r3, [r1, r3]
   27c64:	2b00      	cmp	r3, #0
   27c66:	f43f aa5d 	beq.w	27124 <__ssvfscanf_r+0x150>
   27c6a:	69fb      	ldr	r3, [r7, #28]
   27c6c:	462e      	mov	r6, r5
   27c6e:	f8c7 a018 	str.w	sl, [r7, #24]
   27c72:	4611      	mov	r1, r2
   27c74:	3b00      	subs	r3, #0
   27c76:	46a2      	mov	sl, r4
   27c78:	4681      	mov	r9, r0
   27c7a:	bf18      	it	ne
   27c7c:	2301      	movne	r3, #1
   27c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   27c80:	e007      	b.n	27c92 <_flash_used+0x1aa>
   27c82:	f8db 1000 	ldr.w	r1, [fp]
   27c86:	780b      	ldrb	r3, [r1, #0]
   27c88:	f819 3003 	ldrb.w	r3, [r9, r3]
   27c8c:	2b00      	cmp	r3, #0
   27c8e:	f000 8180 	beq.w	27f92 <_flash_used+0x4aa>
   27c92:	f8db 3004 	ldr.w	r3, [fp, #4]
   27c96:	1c48      	adds	r0, r1, #1
   27c98:	3b01      	subs	r3, #1
   27c9a:	e9cb 0300 	strd	r0, r3, [fp]
   27c9e:	780b      	ldrb	r3, [r1, #0]
   27ca0:	f805 3b01 	strb.w	r3, [r5], #1
   27ca4:	1bac      	subs	r4, r5, r6
   27ca6:	4554      	cmp	r4, sl
   27ca8:	d30e      	bcc.n	27cc8 <_flash_used+0x1e0>
   27caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27cac:	4630      	mov	r0, r6
   27cae:	b15b      	cbz	r3, 27cc8 <_flash_used+0x1e0>
   27cb0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   27cb4:	4651      	mov	r1, sl
   27cb6:	f7fe f9e1 	bl	2607c <realloc>
   27cba:	4606      	mov	r6, r0
   27cbc:	2800      	cmp	r0, #0
   27cbe:	f000 8138 	beq.w	27f32 <_flash_used+0x44a>
   27cc2:	69fb      	ldr	r3, [r7, #28]
   27cc4:	1905      	adds	r5, r0, r4
   27cc6:	6018      	str	r0, [r3, #0]
   27cc8:	f1b8 0801 	subs.w	r8, r8, #1
   27ccc:	f000 8161 	beq.w	27f92 <_flash_used+0x4aa>
   27cd0:	f8db 3004 	ldr.w	r3, [fp, #4]
   27cd4:	2b00      	cmp	r3, #0
   27cd6:	dcd4      	bgt.n	27c82 <_flash_used+0x19a>
   27cd8:	4659      	mov	r1, fp
   27cda:	ee18 0a10 	vmov	r0, s16
   27cde:	f003 ff87 	bl	2bbf0 <__ssrefill_r>
   27ce2:	2800      	cmp	r0, #0
   27ce4:	d0cd      	beq.n	27c82 <_flash_used+0x19a>
   27ce6:	42b5      	cmp	r5, r6
   27ce8:	4654      	mov	r4, sl
   27cea:	f8d7 a018 	ldr.w	sl, [r7, #24]
   27cee:	f43f aa10 	beq.w	27112 <__ssvfscanf_r+0x13e>
   27cf2:	1bae      	subs	r6, r5, r6
   27cf4:	f43f aa16 	beq.w	27124 <__ssvfscanf_r+0x150>
   27cf8:	1c71      	adds	r1, r6, #1
   27cfa:	2300      	movs	r3, #0
   27cfc:	428c      	cmp	r4, r1
   27cfe:	702b      	strb	r3, [r5, #0]
   27d00:	d907      	bls.n	27d12 <_flash_used+0x22a>
   27d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27d04:	b12b      	cbz	r3, 27d12 <_flash_used+0x22a>
   27d06:	69fc      	ldr	r4, [r7, #28]
   27d08:	6820      	ldr	r0, [r4, #0]
   27d0a:	f7fe f9b7 	bl	2607c <realloc>
   27d0e:	b100      	cbz	r0, 27d12 <_flash_used+0x22a>
   27d10:	6020      	str	r0, [r4, #0]
   27d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27d14:	44b2      	add	sl, r6
   27d16:	3301      	adds	r3, #1
   27d18:	633b      	str	r3, [r7, #48]	; 0x30
   27d1a:	f7ff ba28 	b.w	2716e <__ssvfscanf_r+0x19a>
   27d1e:	68fb      	ldr	r3, [r7, #12]
   27d20:	3b01      	subs	r3, #1
   27d22:	60fb      	str	r3, [r7, #12]
   27d24:	f7ff bb04 	b.w	27330 <__ssvfscanf_r+0x35c>
   27d28:	2d02      	cmp	r5, #2
   27d2a:	f240 836a 	bls.w	28402 <_flash_used+0x91a>
   27d2e:	2d03      	cmp	r5, #3
   27d30:	f43f ad4c 	beq.w	277cc <__ssvfscanf_r+0x7f8>
   27d34:	3d04      	subs	r5, #4
   27d36:	ee18 8a10 	vmov	r8, s16
   27d3a:	b2ee      	uxtb	r6, r5
   27d3c:	43f5      	mvns	r5, r6
   27d3e:	444d      	add	r5, r9
   27d40:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   27d44:	465a      	mov	r2, fp
   27d46:	4640      	mov	r0, r8
   27d48:	f003 ff12 	bl	2bb70 <_sungetc_r>
   27d4c:	454d      	cmp	r5, r9
   27d4e:	d1f7      	bne.n	27d40 <_flash_used+0x258>
   27d50:	f10a 33ff 	add.w	r3, sl, #4294967295
   27d54:	eba3 0a06 	sub.w	sl, r3, r6
   27d58:	e538      	b.n	277cc <__ssvfscanf_r+0x7f8>
   27d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27d5c:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   27d60:	b11b      	cbz	r3, 27d6a <_flash_used+0x282>
   27d62:	3b01      	subs	r3, #1
   27d64:	f108 0801 	add.w	r8, r8, #1
   27d68:	63bb      	str	r3, [r7, #56]	; 0x38
   27d6a:	f10a 0a01 	add.w	sl, sl, #1
   27d6e:	f7ff bb76 	b.w	2745e <__ssvfscanf_r+0x48a>
   27d72:	63f9      	str	r1, [r7, #60]	; 0x3c
   27d74:	f7ff b9fb 	b.w	2716e <__ssvfscanf_r+0x19a>
   27d78:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   27d7c:	429c      	cmp	r4, r3
   27d7e:	f200 80dc 	bhi.w	27f3a <_flash_used+0x452>
   27d82:	3408      	adds	r4, #8
   27d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27d86:	00a1      	lsls	r1, r4, #2
   27d88:	6810      	ldr	r0, [r2, #0]
   27d8a:	f7fe f977 	bl	2607c <realloc>
   27d8e:	2800      	cmp	r0, #0
   27d90:	f000 80d3 	beq.w	27f3a <_flash_used+0x452>
   27d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27d96:	6018      	str	r0, [r3, #0]
   27d98:	809c      	strh	r4, [r3, #4]
   27d9a:	e6d8      	b.n	27b4e <_flash_used+0x66>
   27d9c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   27da0:	429c      	cmp	r4, r3
   27da2:	f200 80ca 	bhi.w	27f3a <_flash_used+0x452>
   27da6:	3408      	adds	r4, #8
   27da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27daa:	00a1      	lsls	r1, r4, #2
   27dac:	6810      	ldr	r0, [r2, #0]
   27dae:	f7fe f965 	bl	2607c <realloc>
   27db2:	2800      	cmp	r0, #0
   27db4:	f000 80c1 	beq.w	27f3a <_flash_used+0x452>
   27db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27dba:	6018      	str	r0, [r3, #0]
   27dbc:	809c      	strh	r4, [r3, #4]
   27dbe:	e401      	b.n	275c4 <__ssvfscanf_r+0x5f0>
   27dc0:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   27dc4:	429c      	cmp	r4, r3
   27dc6:	f200 80b8 	bhi.w	27f3a <_flash_used+0x452>
   27dca:	3408      	adds	r4, #8
   27dcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27dce:	00a1      	lsls	r1, r4, #2
   27dd0:	6810      	ldr	r0, [r2, #0]
   27dd2:	f7fe f953 	bl	2607c <realloc>
   27dd6:	2800      	cmp	r0, #0
   27dd8:	f000 80af 	beq.w	27f3a <_flash_used+0x452>
   27ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27dde:	6018      	str	r0, [r3, #0]
   27de0:	809c      	strh	r4, [r3, #4]
   27de2:	e72e      	b.n	27c42 <_flash_used+0x15a>
   27de4:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   27de8:	429c      	cmp	r4, r3
   27dea:	f200 80a6 	bhi.w	27f3a <_flash_used+0x452>
   27dee:	3408      	adds	r4, #8
   27df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27df2:	00a1      	lsls	r1, r4, #2
   27df4:	6810      	ldr	r0, [r2, #0]
   27df6:	f7fe f941 	bl	2607c <realloc>
   27dfa:	2800      	cmp	r0, #0
   27dfc:	f000 809d 	beq.w	27f3a <_flash_used+0x452>
   27e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27e02:	6018      	str	r0, [r3, #0]
   27e04:	809c      	strh	r4, [r3, #4]
   27e06:	f7ff bb86 	b.w	27516 <__ssvfscanf_r+0x542>
   27e0a:	6abc      	ldr	r4, [r7, #40]	; 0x28
   27e0c:	f854 3b04 	ldr.w	r3, [r4], #4
   27e10:	7018      	strb	r0, [r3, #0]
   27e12:	62bc      	str	r4, [r7, #40]	; 0x28
   27e14:	e65f      	b.n	27ad6 <__ssvfscanf_r+0xb02>
   27e16:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27e18:	ee10 2a10 	vmov	r2, s0
   27e1c:	464b      	mov	r3, r9
   27e1e:	ee10 0a10 	vmov	r0, s0
   27e22:	4649      	mov	r1, r9
   27e24:	f7e5 f9f8 	bl	d218 <__aeabi_dcmpun>
   27e28:	f856 4b04 	ldr.w	r4, [r6], #4
   27e2c:	2800      	cmp	r0, #0
   27e2e:	f040 82e0 	bne.w	283f2 <_flash_used+0x90a>
   27e32:	4640      	mov	r0, r8
   27e34:	4649      	mov	r1, r9
   27e36:	f7e4 fc6f 	bl	c718 <__aeabi_d2f>
   27e3a:	62be      	str	r6, [r7, #40]	; 0x28
   27e3c:	6020      	str	r0, [r4, #0]
   27e3e:	e4fd      	b.n	2783c <__ssvfscanf_r+0x868>
   27e40:	0002f3c9 	.word	0x0002f3c9
   27e44:	68bd      	ldr	r5, [r7, #8]
   27e46:	230a      	movs	r3, #10
   27e48:	ee18 0a10 	vmov	r0, s16
   27e4c:	1c69      	adds	r1, r5, #1
   27e4e:	46a9      	mov	r9, r5
   27e50:	f7ff f81a 	bl	26e88 <_strtol_r>
   27e54:	693b      	ldr	r3, [r7, #16]
   27e56:	1ac2      	subs	r2, r0, r3
   27e58:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
   27e5c:	49cf      	ldr	r1, [pc, #828]	; (2819c <_flash_used+0x6b4>)
   27e5e:	4599      	cmp	r9, r3
   27e60:	bf28      	it	cs
   27e62:	f207 29aa 	addwcs	r9, r7, #682	; 0x2aa
   27e66:	4648      	mov	r0, r9
   27e68:	f003 fc48 	bl	2b6fc <sprintf>
   27e6c:	e4d3      	b.n	27816 <__ssvfscanf_r+0x842>
   27e6e:	4645      	mov	r5, r8
   27e70:	2d01      	cmp	r5, #1
   27e72:	bf38      	it	cc
   27e74:	2501      	movcc	r5, #1
   27e76:	f014 0301 	ands.w	r3, r4, #1
   27e7a:	f000 82e6 	beq.w	2844a <_flash_used+0x962>
   27e7e:	f014 0310 	ands.w	r3, r4, #16
   27e82:	61fb      	str	r3, [r7, #28]
   27e84:	f000 8334 	beq.w	284f0 <_flash_used+0xa08>
   27e88:	f04f 0900 	mov.w	r9, #0
   27e8c:	46c8      	mov	r8, r9
   27e8e:	464e      	mov	r6, r9
   27e90:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   27e94:	2400      	movs	r4, #0
   27e96:	f002 fd5d 	bl	2a954 <__locale_mb_cur_max>
   27e9a:	42a0      	cmp	r0, r4
   27e9c:	f43f a939 	beq.w	27112 <__ssvfscanf_r+0x13e>
   27ea0:	f8db 1000 	ldr.w	r1, [fp]
   27ea4:	f507 7cac 	add.w	ip, r7, #344	; 0x158
   27ea8:	f8db 2004 	ldr.w	r2, [fp, #4]
   27eac:	1c63      	adds	r3, r4, #1
   27eae:	f811 0b01 	ldrb.w	r0, [r1], #1
   27eb2:	3a01      	subs	r2, #1
   27eb4:	f80c 0004 	strb.w	r0, [ip, r4]
   27eb8:	f107 0450 	add.w	r4, r7, #80	; 0x50
   27ebc:	e9cb 1200 	strd	r1, r2, [fp]
   27ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27ec2:	2a03      	cmp	r2, #3
   27ec4:	d102      	bne.n	27ecc <_flash_used+0x3e4>
   27ec6:	6822      	ldr	r2, [r4, #0]
   27ec8:	2a04      	cmp	r2, #4
   27eca:	d006      	beq.n	27eda <_flash_used+0x3f2>
   27ecc:	2208      	movs	r2, #8
   27ece:	2100      	movs	r1, #0
   27ed0:	4620      	mov	r0, r4
   27ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   27ed4:	f7fe f876 	bl	25fc4 <memset>
   27ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27eda:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   27ede:	4631      	mov	r1, r6
   27ee0:	ee18 0a10 	vmov	r0, s16
   27ee4:	9400      	str	r4, [sp, #0]
   27ee6:	61bb      	str	r3, [r7, #24]
   27ee8:	f002 fdd6 	bl	2aa98 <_mbrtowc_r>
   27eec:	1c42      	adds	r2, r0, #1
   27eee:	62f8      	str	r0, [r7, #44]	; 0x2c
   27ef0:	f43f a90f 	beq.w	27112 <__ssvfscanf_r+0x13e>
   27ef4:	69fa      	ldr	r2, [r7, #28]
   27ef6:	69bb      	ldr	r3, [r7, #24]
   27ef8:	4302      	orrs	r2, r0
   27efa:	f040 837d 	bne.w	285f8 <_flash_used+0xb10>
   27efe:	449a      	add	sl, r3
   27f00:	6032      	str	r2, [r6, #0]
   27f02:	3d01      	subs	r5, #1
   27f04:	69fb      	ldr	r3, [r7, #28]
   27f06:	2b00      	cmp	r3, #0
   27f08:	f040 83a8 	bne.w	2865c <_flash_used+0xb74>
   27f0c:	eba6 0408 	sub.w	r4, r6, r8
   27f10:	ebb9 0fa4 	cmp.w	r9, r4, asr #2
   27f14:	f200 83a1 	bhi.w	2865a <_flash_used+0xb72>
   27f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27f1a:	2b00      	cmp	r3, #0
   27f1c:	f000 839d 	beq.w	2865a <_flash_used+0xb72>
   27f20:	4640      	mov	r0, r8
   27f22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
   27f26:	f7fe f8a9 	bl	2607c <realloc>
   27f2a:	4680      	mov	r8, r0
   27f2c:	2800      	cmp	r0, #0
   27f2e:	f040 838f 	bne.w	28650 <_flash_used+0xb68>
   27f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27f34:	2b00      	cmp	r3, #0
   27f36:	f000 8166 	beq.w	28206 <_flash_used+0x71e>
   27f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27f3c:	88dd      	ldrh	r5, [r3, #6]
   27f3e:	2d00      	cmp	r5, #0
   27f40:	f000 8136 	beq.w	281b0 <_flash_used+0x6c8>
   27f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27f46:	f04f 0800 	mov.w	r8, #0
   27f4a:	681e      	ldr	r6, [r3, #0]
   27f4c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   27f50:	4634      	mov	r4, r6
   27f52:	6823      	ldr	r3, [r4, #0]
   27f54:	6818      	ldr	r0, [r3, #0]
   27f56:	f7fd fcf3 	bl	25940 <free>
   27f5a:	f854 3b04 	ldr.w	r3, [r4], #4
   27f5e:	42ac      	cmp	r4, r5
   27f60:	f8c3 8000 	str.w	r8, [r3]
   27f64:	d1f5      	bne.n	27f52 <_flash_used+0x46a>
   27f66:	f04f 33ff 	mov.w	r3, #4294967295
   27f6a:	633b      	str	r3, [r7, #48]	; 0x30
   27f6c:	2e00      	cmp	r6, #0
   27f6e:	f47f a8de 	bne.w	2712e <__ssvfscanf_r+0x15a>
   27f72:	f7ff b8df 	b.w	27134 <__ssvfscanf_r+0x160>
   27f76:	2400      	movs	r4, #0
   27f78:	f7ff bb81 	b.w	2767e <__ssvfscanf_r+0x6aa>
   27f7c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
   27f80:	f7ff bb4d 	b.w	2761e <__ssvfscanf_r+0x64a>
   27f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27f86:	681b      	ldr	r3, [r3, #0]
   27f88:	2b04      	cmp	r3, #4
   27f8a:	f47f ab54 	bne.w	27636 <__ssvfscanf_r+0x662>
   27f8e:	f7ff bb55 	b.w	2763c <__ssvfscanf_r+0x668>
   27f92:	4654      	mov	r4, sl
   27f94:	f8d7 a018 	ldr.w	sl, [r7, #24]
   27f98:	e6ab      	b.n	27cf2 <_flash_used+0x20a>
   27f9a:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   27f9e:	2401      	movs	r4, #1
   27fa0:	f7ff b9c3 	b.w	2732a <__ssvfscanf_r+0x356>
   27fa4:	2301      	movs	r3, #1
   27fa6:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   27faa:	63bb      	str	r3, [r7, #56]	; 0x38
   27fac:	f7ff b9bd 	b.w	2732a <__ssvfscanf_r+0x356>
   27fb0:	1e6b      	subs	r3, r5, #1
   27fb2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   27fb6:	4632      	mov	r2, r6
   27fb8:	ee18 0a10 	vmov	r0, s16
   27fbc:	461d      	mov	r5, r3
   27fbe:	f003 fdd7 	bl	2bb70 <_sungetc_r>
   27fc2:	f7ff ba62 	b.w	2748a <__ssvfscanf_r+0x4b6>
   27fc6:	f8c7 8010 	str.w	r8, [r7, #16]
   27fca:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
   27fce:	f002 fcc1 	bl	2a954 <__locale_mb_cur_max>
   27fd2:	42a8      	cmp	r0, r5
   27fd4:	f43f a89d 	beq.w	27112 <__ssvfscanf_r+0x13e>
   27fd8:	f8db 2000 	ldr.w	r2, [fp]
   27fdc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   27fe0:	f8db 3004 	ldr.w	r3, [fp, #4]
   27fe4:	f1b8 0f03 	cmp.w	r8, #3
   27fe8:	f812 1b01 	ldrb.w	r1, [r2], #1
   27fec:	f105 0601 	add.w	r6, r5, #1
   27ff0:	f103 33ff 	add.w	r3, r3, #4294967295
   27ff4:	f107 0450 	add.w	r4, r7, #80	; 0x50
   27ff8:	5541      	strb	r1, [r0, r5]
   27ffa:	e9cb 2300 	strd	r2, r3, [fp]
   27ffe:	d102      	bne.n	28006 <_flash_used+0x51e>
   28000:	6823      	ldr	r3, [r4, #0]
   28002:	2b04      	cmp	r3, #4
   28004:	d004      	beq.n	28010 <_flash_used+0x528>
   28006:	2208      	movs	r2, #8
   28008:	2100      	movs	r1, #0
   2800a:	4620      	mov	r0, r4
   2800c:	f7fd ffda 	bl	25fc4 <memset>
   28010:	4633      	mov	r3, r6
   28012:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   28016:	4649      	mov	r1, r9
   28018:	ee18 0a10 	vmov	r0, s16
   2801c:	9400      	str	r4, [sp, #0]
   2801e:	f002 fd3b 	bl	2aa98 <_mbrtowc_r>
   28022:	f1b0 3fff 	cmp.w	r0, #4294967295
   28026:	4680      	mov	r8, r0
   28028:	f43f a873 	beq.w	27112 <__ssvfscanf_r+0x13e>
   2802c:	2800      	cmp	r0, #0
   2802e:	f040 80cf 	bne.w	281d0 <_flash_used+0x6e8>
   28032:	f8c9 0000 	str.w	r0, [r9]
   28036:	f002 fc7d 	bl	2a934 <iswspace>
   2803a:	2800      	cmp	r0, #0
   2803c:	f040 817c 	bne.w	28338 <_flash_used+0x850>
   28040:	44b2      	add	sl, r6
   28042:	693b      	ldr	r3, [r7, #16]
   28044:	3b01      	subs	r3, #1
   28046:	613b      	str	r3, [r7, #16]
   28048:	69fe      	ldr	r6, [r7, #28]
   2804a:	2e00      	cmp	r6, #0
   2804c:	f040 8140 	bne.w	282d0 <_flash_used+0x7e8>
   28050:	f109 0904 	add.w	r9, r9, #4
   28054:	69b8      	ldr	r0, [r7, #24]
   28056:	697b      	ldr	r3, [r7, #20]
   28058:	eba9 0400 	sub.w	r4, r9, r0
   2805c:	461d      	mov	r5, r3
   2805e:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   28062:	f200 8135 	bhi.w	282d0 <_flash_used+0x7e8>
   28066:	6bba      	ldr	r2, [r7, #56]	; 0x38
   28068:	2a00      	cmp	r2, #0
   2806a:	f000 8131 	beq.w	282d0 <_flash_used+0x7e8>
   2806e:	00d9      	lsls	r1, r3, #3
   28070:	f7fe f804 	bl	2607c <realloc>
   28074:	61b8      	str	r0, [r7, #24]
   28076:	2800      	cmp	r0, #0
   28078:	f43f af5b 	beq.w	27f32 <_flash_used+0x44a>
   2807c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2807e:	006b      	lsls	r3, r5, #1
   28080:	eb00 0904 	add.w	r9, r0, r4
   28084:	6010      	str	r0, [r2, #0]
   28086:	617b      	str	r3, [r7, #20]
   28088:	f8db 3004 	ldr.w	r3, [fp, #4]
   2808c:	2b00      	cmp	r3, #0
   2808e:	f77f a833 	ble.w	270f8 <__ssvfscanf_r+0x124>
   28092:	f8db 3000 	ldr.w	r3, [fp]
   28096:	4a42      	ldr	r2, [pc, #264]	; (281a0 <_flash_used+0x6b8>)
   28098:	781b      	ldrb	r3, [r3, #0]
   2809a:	5cd3      	ldrb	r3, [r2, r3]
   2809c:	071b      	lsls	r3, r3, #28
   2809e:	d42d      	bmi.n	280fc <_flash_used+0x614>
   280a0:	693b      	ldr	r3, [r7, #16]
   280a2:	b35b      	cbz	r3, 280fc <_flash_used+0x614>
   280a4:	4635      	mov	r5, r6
   280a6:	f002 fc55 	bl	2a954 <__locale_mb_cur_max>
   280aa:	42a8      	cmp	r0, r5
   280ac:	d194      	bne.n	27fd8 <_flash_used+0x4f0>
   280ae:	f7ff b830 	b.w	27112 <__ssvfscanf_r+0x13e>
   280b2:	e9d7 1305 	ldrd	r1, r3, [r7, #20]
   280b6:	428b      	cmp	r3, r1
   280b8:	eba3 0201 	sub.w	r2, r3, r1
   280bc:	f47f aecc 	bne.w	27e58 <_flash_used+0x370>
   280c0:	f7ff bba9 	b.w	27816 <__ssvfscanf_r+0x842>
   280c4:	465a      	mov	r2, fp
   280c6:	ee18 0a10 	vmov	r0, s16
   280ca:	f003 fd51 	bl	2bb70 <_sungetc_r>
   280ce:	f1aa 0a02 	sub.w	sl, sl, #2
   280d2:	f819 1c02 	ldrb.w	r1, [r9, #-2]
   280d6:	f1a9 0902 	sub.w	r9, r9, #2
   280da:	f7ff bb87 	b.w	277ec <__ssvfscanf_r+0x818>
   280de:	1b31      	subs	r1, r6, r4
   280e0:	448a      	add	sl, r1
   280e2:	3101      	adds	r1, #1
   280e4:	e579      	b.n	27bda <_flash_used+0xf2>
   280e6:	2101      	movs	r1, #1
   280e8:	e577      	b.n	27bda <_flash_used+0xf2>
   280ea:	2300      	movs	r3, #0
   280ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
   280f0:	617b      	str	r3, [r7, #20]
   280f2:	4691      	mov	r9, r2
   280f4:	61bb      	str	r3, [r7, #24]
   280f6:	63bb      	str	r3, [r7, #56]	; 0x38
   280f8:	f7ff ba18 	b.w	2752c <__ssvfscanf_r+0x558>
   280fc:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   28100:	f7ff ba1d 	b.w	2753e <__ssvfscanf_r+0x56a>
   28104:	f107 0358 	add.w	r3, r7, #88	; 0x58
   28108:	f8db 2000 	ldr.w	r2, [fp]
   2810c:	4619      	mov	r1, r3
   2810e:	7813      	ldrb	r3, [r2, #0]
   28110:	5ccb      	ldrb	r3, [r1, r3]
   28112:	2b00      	cmp	r3, #0
   28114:	f43f a806 	beq.w	27124 <__ssvfscanf_r+0x150>
   28118:	f8db 3004 	ldr.w	r3, [fp, #4]
   2811c:	3201      	adds	r2, #1
   2811e:	f1b8 0f01 	cmp.w	r8, #1
   28122:	f103 33ff 	add.w	r3, r3, #4294967295
   28126:	e9cb 2300 	strd	r2, r3, [fp]
   2812a:	f43f acdc 	beq.w	27ae6 <__ssvfscanf_r+0xb12>
   2812e:	461a      	mov	r2, r3
   28130:	ee18 4a10 	vmov	r4, s16
   28134:	460d      	mov	r5, r1
   28136:	e012      	b.n	2815e <_flash_used+0x676>
   28138:	f8db 3000 	ldr.w	r3, [fp]
   2813c:	781a      	ldrb	r2, [r3, #0]
   2813e:	3301      	adds	r3, #1
   28140:	5caa      	ldrb	r2, [r5, r2]
   28142:	2a00      	cmp	r2, #0
   28144:	f43f accf 	beq.w	27ae6 <__ssvfscanf_r+0xb12>
   28148:	f8db 2004 	ldr.w	r2, [fp, #4]
   2814c:	3601      	adds	r6, #1
   2814e:	f8cb 3000 	str.w	r3, [fp]
   28152:	3a01      	subs	r2, #1
   28154:	45b0      	cmp	r8, r6
   28156:	f8cb 2004 	str.w	r2, [fp, #4]
   2815a:	f43f acc4 	beq.w	27ae6 <__ssvfscanf_r+0xb12>
   2815e:	2a00      	cmp	r2, #0
   28160:	dcea      	bgt.n	28138 <_flash_used+0x650>
   28162:	4659      	mov	r1, fp
   28164:	4620      	mov	r0, r4
   28166:	f003 fd43 	bl	2bbf0 <__ssrefill_r>
   2816a:	2800      	cmp	r0, #0
   2816c:	d0e4      	beq.n	28138 <_flash_used+0x650>
   2816e:	44b2      	add	sl, r6
   28170:	f7fe bffd 	b.w	2716e <__ssvfscanf_r+0x19a>
   28174:	2300      	movs	r3, #0
   28176:	f107 0244 	add.w	r2, r7, #68	; 0x44
   2817a:	613b      	str	r3, [r7, #16]
   2817c:	4691      	mov	r9, r2
   2817e:	e9c7 3302 	strd	r3, r3, [r7, #8]
   28182:	f7ff ba2a 	b.w	275da <__ssvfscanf_r+0x606>
   28186:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   2818a:	62fe      	str	r6, [r7, #44]	; 0x2c
   2818c:	f7ff bac4 	b.w	27718 <__ssvfscanf_r+0x744>
   28190:	7882      	ldrb	r2, [r0, #2]
   28192:	f044 0402 	orr.w	r4, r4, #2
   28196:	3002      	adds	r0, #2
   28198:	f7fe bf51 	b.w	2703e <__ssvfscanf_r+0x6a>
   2819c:	0002f568 	.word	0x0002f568
   281a0:	0002f3c9 	.word	0x0002f3c9
   281a4:	7882      	ldrb	r2, [r0, #2]
   281a6:	f044 0408 	orr.w	r4, r4, #8
   281aa:	3002      	adds	r0, #2
   281ac:	f7fe bf47 	b.w	2703e <__ssvfscanf_r+0x6a>
   281b0:	681e      	ldr	r6, [r3, #0]
   281b2:	f04f 33ff 	mov.w	r3, #4294967295
   281b6:	633b      	str	r3, [r7, #48]	; 0x30
   281b8:	2e00      	cmp	r6, #0
   281ba:	f47e afb8 	bne.w	2712e <__ssvfscanf_r+0x15a>
   281be:	f7fe bfb9 	b.w	27134 <__ssvfscanf_r+0x160>
   281c2:	f856 5b04 	ldr.w	r5, [r6], #4
   281c6:	4699      	mov	r9, r3
   281c8:	61fb      	str	r3, [r7, #28]
   281ca:	63bb      	str	r3, [r7, #56]	; 0x38
   281cc:	62be      	str	r6, [r7, #40]	; 0x28
   281ce:	e4ca      	b.n	27b66 <_flash_used+0x7e>
   281d0:	f110 0f02 	cmn.w	r0, #2
   281d4:	f43f af58 	beq.w	28088 <_flash_used+0x5a0>
   281d8:	f8d9 0000 	ldr.w	r0, [r9]
   281dc:	f002 fbaa 	bl	2a934 <iswspace>
   281e0:	2800      	cmp	r0, #0
   281e2:	f040 80a9 	bne.w	28338 <_flash_used+0x850>
   281e6:	f1b8 0f03 	cmp.w	r8, #3
   281ea:	44b2      	add	sl, r6
   281ec:	f47f af29 	bne.w	28042 <_flash_used+0x55a>
   281f0:	6823      	ldr	r3, [r4, #0]
   281f2:	2b04      	cmp	r3, #4
   281f4:	f47f af25 	bne.w	28042 <_flash_used+0x55a>
   281f8:	e726      	b.n	28048 <_flash_used+0x560>
   281fa:	b082      	sub	sp, #8
   281fc:	aa02      	add	r2, sp, #8
   281fe:	6013      	str	r3, [r2, #0]
   28200:	9303      	str	r3, [sp, #12]
   28202:	637a      	str	r2, [r7, #52]	; 0x34
   28204:	e402      	b.n	27a0c <__ssvfscanf_r+0xa38>
   28206:	f04f 33ff 	mov.w	r3, #4294967295
   2820a:	633b      	str	r3, [r7, #48]	; 0x30
   2820c:	f7fe bf92 	b.w	27134 <__ssvfscanf_r+0x160>
   28210:	69fb      	ldr	r3, [r7, #28]
   28212:	f856 9b04 	ldr.w	r9, [r6], #4
   28216:	63bb      	str	r3, [r7, #56]	; 0x38
   28218:	62be      	str	r6, [r7, #40]	; 0x28
   2821a:	e9c7 3305 	strd	r3, r3, [r7, #20]
   2821e:	f7ff b985 	b.w	2752c <__ssvfscanf_r+0x558>
   28222:	f856 5b04 	ldr.w	r5, [r6], #4
   28226:	61fc      	str	r4, [r7, #28]
   28228:	62be      	str	r6, [r7, #40]	; 0x28
   2822a:	e513      	b.n	27c54 <_flash_used+0x16c>
   2822c:	697b      	ldr	r3, [r7, #20]
   2822e:	f856 9b04 	ldr.w	r9, [r6], #4
   28232:	60bb      	str	r3, [r7, #8]
   28234:	62be      	str	r6, [r7, #40]	; 0x28
   28236:	e9c7 3303 	strd	r3, r3, [r7, #12]
   2823a:	f7ff b9ce 	b.w	275da <__ssvfscanf_r+0x606>
   2823e:	0766      	lsls	r6, r4, #29
   28240:	f140 8091 	bpl.w	28366 <_flash_used+0x87e>
   28244:	6abe      	ldr	r6, [r7, #40]	; 0x28
   28246:	63f9      	str	r1, [r7, #60]	; 0x3c
   28248:	f856 3b04 	ldr.w	r3, [r6], #4
   2824c:	f8a3 a000 	strh.w	sl, [r3]
   28250:	62be      	str	r6, [r7, #40]	; 0x28
   28252:	f7fe bf8c 	b.w	2716e <__ssvfscanf_r+0x19a>
   28256:	4659      	mov	r1, fp
   28258:	ee18 0a10 	vmov	r0, s16
   2825c:	f003 fcc8 	bl	2bbf0 <__ssrefill_r>
   28260:	2800      	cmp	r0, #0
   28262:	f43f acaf 	beq.w	27bc4 <_flash_used+0xdc>
   28266:	e4b4      	b.n	27bd2 <_flash_used+0xea>
   28268:	f8db 2000 	ldr.w	r2, [fp]
   2826c:	49c0      	ldr	r1, [pc, #768]	; (28570 <_flash_used+0xa88>)
   2826e:	7813      	ldrb	r3, [r2, #0]
   28270:	5ccb      	ldrb	r3, [r1, r3]
   28272:	071c      	lsls	r4, r3, #28
   28274:	d429      	bmi.n	282ca <_flash_used+0x7e2>
   28276:	f8db 3004 	ldr.w	r3, [fp, #4]
   2827a:	3201      	adds	r2, #1
   2827c:	f1b8 0f01 	cmp.w	r8, #1
   28280:	f103 33ff 	add.w	r3, r3, #4294967295
   28284:	e9cb 2300 	strd	r2, r3, [fp]
   28288:	f000 80cc 	beq.w	28424 <_flash_used+0x93c>
   2828c:	2501      	movs	r5, #1
   2828e:	461a      	mov	r2, r3
   28290:	ee18 4a10 	vmov	r4, s16
   28294:	e011      	b.n	282ba <_flash_used+0x7d2>
   28296:	f8db 3000 	ldr.w	r3, [fp]
   2829a:	49b5      	ldr	r1, [pc, #724]	; (28570 <_flash_used+0xa88>)
   2829c:	781a      	ldrb	r2, [r3, #0]
   2829e:	3301      	adds	r3, #1
   282a0:	5c8a      	ldrb	r2, [r1, r2]
   282a2:	0710      	lsls	r0, r2, #28
   282a4:	d411      	bmi.n	282ca <_flash_used+0x7e2>
   282a6:	f8db 2004 	ldr.w	r2, [fp, #4]
   282aa:	3501      	adds	r5, #1
   282ac:	f8cb 3000 	str.w	r3, [fp]
   282b0:	3a01      	subs	r2, #1
   282b2:	45a8      	cmp	r8, r5
   282b4:	f8cb 2004 	str.w	r2, [fp, #4]
   282b8:	d007      	beq.n	282ca <_flash_used+0x7e2>
   282ba:	2a00      	cmp	r2, #0
   282bc:	dceb      	bgt.n	28296 <_flash_used+0x7ae>
   282be:	4659      	mov	r1, fp
   282c0:	4620      	mov	r0, r4
   282c2:	f003 fc95 	bl	2bbf0 <__ssrefill_r>
   282c6:	2800      	cmp	r0, #0
   282c8:	d0e5      	beq.n	28296 <_flash_used+0x7ae>
   282ca:	44aa      	add	sl, r5
   282cc:	f7fe bf4f 	b.w	2716e <__ssvfscanf_r+0x19a>
   282d0:	2600      	movs	r6, #0
   282d2:	e6d9      	b.n	28088 <_flash_used+0x5a0>
   282d4:	f014 0201 	ands.w	r2, r4, #1
   282d8:	f47f abf8 	bne.w	27acc <__ssvfscanf_r+0xaf8>
   282dc:	07a3      	lsls	r3, r4, #30
   282de:	d571      	bpl.n	283c4 <_flash_used+0x8dc>
   282e0:	4ba4      	ldr	r3, [pc, #656]	; (28574 <_flash_used+0xa8c>)
   282e2:	ee18 0a10 	vmov	r0, s16
   282e6:	6a39      	ldr	r1, [r7, #32]
   282e8:	4299      	cmp	r1, r3
   282ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   282ec:	69f9      	ldr	r1, [r7, #28]
   282ee:	f000 809d 	beq.w	2842c <_flash_used+0x944>
   282f2:	f003 faef 	bl	2b8d4 <_strtoll_r>
   282f6:	6abc      	ldr	r4, [r7, #40]	; 0x28
   282f8:	f854 3b04 	ldr.w	r3, [r4], #4
   282fc:	6018      	str	r0, [r3, #0]
   282fe:	62bc      	str	r4, [r7, #40]	; 0x28
   28300:	6059      	str	r1, [r3, #4]
   28302:	f7ff bbe8 	b.w	27ad6 <__ssvfscanf_r+0xb02>
   28306:	4645      	mov	r5, r8
   28308:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   2830c:	62fe      	str	r6, [r7, #44]	; 0x2c
   2830e:	2d00      	cmp	r5, #0
   28310:	f43f aa02 	beq.w	27718 <__ssvfscanf_r+0x744>
   28314:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   28318:	ee18 6a10 	vmov	r6, s16
   2831c:	441c      	add	r4, r3
   2831e:	7821      	ldrb	r1, [r4, #0]
   28320:	465a      	mov	r2, fp
   28322:	4630      	mov	r0, r6
   28324:	f003 fc24 	bl	2bb70 <_sungetc_r>
   28328:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   2832c:	429c      	cmp	r4, r3
   2832e:	f104 34ff 	add.w	r4, r4, #4294967295
   28332:	d1f4      	bne.n	2831e <_flash_used+0x836>
   28334:	f7ff b9f0 	b.w	27718 <__ssvfscanf_r+0x744>
   28338:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   2833c:	2e00      	cmp	r6, #0
   2833e:	f43f a8fe 	beq.w	2753e <__ssvfscanf_r+0x56a>
   28342:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   28346:	ee18 6a10 	vmov	r6, s16
   2834a:	441d      	add	r5, r3
   2834c:	7829      	ldrb	r1, [r5, #0]
   2834e:	465a      	mov	r2, fp
   28350:	4630      	mov	r0, r6
   28352:	f003 fc0d 	bl	2bb70 <_sungetc_r>
   28356:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   2835a:	42ab      	cmp	r3, r5
   2835c:	f105 35ff 	add.w	r5, r5, #4294967295
   28360:	d1f4      	bne.n	2834c <_flash_used+0x864>
   28362:	f7ff b8ec 	b.w	2753e <__ssvfscanf_r+0x56a>
   28366:	07e5      	lsls	r5, r4, #31
   28368:	d40c      	bmi.n	28384 <_flash_used+0x89c>
   2836a:	07a0      	lsls	r0, r4, #30
   2836c:	d50a      	bpl.n	28384 <_flash_used+0x89c>
   2836e:	6abe      	ldr	r6, [r7, #40]	; 0x28
   28370:	4652      	mov	r2, sl
   28372:	63f9      	str	r1, [r7, #60]	; 0x3c
   28374:	17d3      	asrs	r3, r2, #31
   28376:	f856 1b04 	ldr.w	r1, [r6], #4
   2837a:	62be      	str	r6, [r7, #40]	; 0x28
   2837c:	e9c1 2300 	strd	r2, r3, [r1]
   28380:	f7fe bef5 	b.w	2716e <__ssvfscanf_r+0x19a>
   28384:	6abe      	ldr	r6, [r7, #40]	; 0x28
   28386:	63f9      	str	r1, [r7, #60]	; 0x3c
   28388:	f856 3b04 	ldr.w	r3, [r6], #4
   2838c:	f8c3 a000 	str.w	sl, [r3]
   28390:	62be      	str	r6, [r7, #40]	; 0x28
   28392:	f7fe beec 	b.w	2716e <__ssvfscanf_r+0x19a>
   28396:	617e      	str	r6, [r7, #20]
   28398:	4626      	mov	r6, r4
   2839a:	465c      	mov	r4, fp
   2839c:	46c3      	mov	fp, r8
   2839e:	4635      	mov	r5, r6
   283a0:	f7ff ba0b 	b.w	277ba <__ssvfscanf_r+0x7e6>
   283a4:	69fc      	ldr	r4, [r7, #28]
   283a6:	ee18 aa10 	vmov	sl, s16
   283aa:	45a1      	cmp	r9, r4
   283ac:	f67e aeba 	bls.w	27124 <__ssvfscanf_r+0x150>
   283b0:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   283b4:	465a      	mov	r2, fp
   283b6:	4650      	mov	r0, sl
   283b8:	f003 fbda 	bl	2bb70 <_sungetc_r>
   283bc:	45a1      	cmp	r9, r4
   283be:	d1f7      	bne.n	283b0 <_flash_used+0x8c8>
   283c0:	f7fe beb0 	b.w	27124 <__ssvfscanf_r+0x150>
   283c4:	6abc      	ldr	r4, [r7, #40]	; 0x28
   283c6:	f854 3b04 	ldr.w	r3, [r4], #4
   283ca:	62bc      	str	r4, [r7, #40]	; 0x28
   283cc:	6018      	str	r0, [r3, #0]
   283ce:	f7ff bb82 	b.w	27ad6 <__ssvfscanf_r+0xb02>
   283d2:	69fc      	ldr	r4, [r7, #28]
   283d4:	ee18 aa10 	vmov	sl, s16
   283d8:	45a1      	cmp	r9, r4
   283da:	f67e aea3 	bls.w	27124 <__ssvfscanf_r+0x150>
   283de:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   283e2:	465a      	mov	r2, fp
   283e4:	4650      	mov	r0, sl
   283e6:	f003 fbc3 	bl	2bb70 <_sungetc_r>
   283ea:	45a1      	cmp	r9, r4
   283ec:	d1f7      	bne.n	283de <_flash_used+0x8f6>
   283ee:	f7fe be99 	b.w	27124 <__ssvfscanf_r+0x150>
   283f2:	4861      	ldr	r0, [pc, #388]	; (28578 <_flash_used+0xa90>)
   283f4:	62be      	str	r6, [r7, #40]	; 0x28
   283f6:	f003 f92f 	bl	2b658 <nanf>
   283fa:	ed84 0a00 	vstr	s0, [r4]
   283fe:	f7ff ba1d 	b.w	2783c <__ssvfscanf_r+0x868>
   28402:	69fb      	ldr	r3, [r7, #28]
   28404:	ee18 aa10 	vmov	sl, s16
   28408:	4599      	cmp	r9, r3
   2840a:	f67e ae8b 	bls.w	27124 <__ssvfscanf_r+0x150>
   2840e:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   28412:	465a      	mov	r2, fp
   28414:	4650      	mov	r0, sl
   28416:	f003 fbab 	bl	2bb70 <_sungetc_r>
   2841a:	69fb      	ldr	r3, [r7, #28]
   2841c:	4599      	cmp	r9, r3
   2841e:	d1f6      	bne.n	2840e <_flash_used+0x926>
   28420:	f7fe be80 	b.w	27124 <__ssvfscanf_r+0x150>
   28424:	4645      	mov	r5, r8
   28426:	44aa      	add	sl, r5
   28428:	f7fe bea1 	b.w	2716e <__ssvfscanf_r+0x19a>
   2842c:	f003 fb1a 	bl	2ba64 <_strtoull_r>
   28430:	e761      	b.n	282f6 <_flash_used+0x80e>
   28432:	4635      	mov	r5, r6
   28434:	f7ff b9c1 	b.w	277ba <__ssvfscanf_r+0x7e6>
   28438:	f8d9 3000 	ldr.w	r3, [r9]
   2843c:	461d      	mov	r5, r3
   2843e:	3301      	adds	r3, #1
   28440:	f47f a8d7 	bne.w	275f2 <__ssvfscanf_r+0x61e>
   28444:	462a      	mov	r2, r5
   28446:	f7ff b8ea 	b.w	2761e <__ssvfscanf_r+0x64a>
   2844a:	06e1      	lsls	r1, r4, #27
   2844c:	f100 8096 	bmi.w	2857c <_flash_used+0xa94>
   28450:	f014 0f80 	tst.w	r4, #128	; 0x80
   28454:	6abc      	ldr	r4, [r7, #40]	; 0x28
   28456:	f000 80aa 	beq.w	285ae <_flash_used+0xac6>
   2845a:	f854 6b04 	ldr.w	r6, [r4], #4
   2845e:	2e00      	cmp	r6, #0
   28460:	f43e ae60 	beq.w	27124 <__ssvfscanf_r+0x150>
   28464:	4628      	mov	r0, r5
   28466:	f7fd fa63 	bl	25930 <malloc>
   2846a:	4681      	mov	r9, r0
   2846c:	2800      	cmp	r0, #0
   2846e:	f43f ad60 	beq.w	27f32 <_flash_used+0x44a>
   28472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28474:	6030      	str	r0, [r6, #0]
   28476:	f8b3 8006 	ldrh.w	r8, [r3, #6]
   2847a:	889a      	ldrh	r2, [r3, #4]
   2847c:	4590      	cmp	r8, r2
   2847e:	f0c0 80af 	bcc.w	285e0 <_flash_used+0xaf8>
   28482:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   28486:	429a      	cmp	r2, r3
   28488:	f63f ad57 	bhi.w	27f3a <_flash_used+0x452>
   2848c:	f102 0308 	add.w	r3, r2, #8
   28490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28492:	0099      	lsls	r1, r3, #2
   28494:	6810      	ldr	r0, [r2, #0]
   28496:	63bb      	str	r3, [r7, #56]	; 0x38
   28498:	f7fd fdf0 	bl	2607c <realloc>
   2849c:	2800      	cmp	r0, #0
   2849e:	f43f ad4c 	beq.w	27f3a <_flash_used+0x452>
   284a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   284a4:	461a      	mov	r2, r3
   284a6:	6018      	str	r0, [r3, #0]
   284a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   284aa:	8093      	strh	r3, [r2, #4]
   284ac:	f840 6028 	str.w	r6, [r0, r8, lsl #2]
   284b0:	f108 0201 	add.w	r2, r8, #1
   284b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   284b6:	4649      	mov	r1, r9
   284b8:	462b      	mov	r3, r5
   284ba:	80c2      	strh	r2, [r0, #6]
   284bc:	2201      	movs	r2, #1
   284be:	ee18 0a10 	vmov	r0, s16
   284c2:	f8cd b000 	str.w	fp, [sp]
   284c6:	f003 fbb1 	bl	2bc2c <_sfread_r>
   284ca:	4680      	mov	r8, r0
   284cc:	2800      	cmp	r0, #0
   284ce:	f000 8089 	beq.w	285e4 <_flash_used+0xafc>
   284d2:	4285      	cmp	r5, r0
   284d4:	d905      	bls.n	284e2 <_flash_used+0x9fa>
   284d6:	4601      	mov	r1, r0
   284d8:	6830      	ldr	r0, [r6, #0]
   284da:	f7fd fdcf 	bl	2607c <realloc>
   284de:	b100      	cbz	r0, 284e2 <_flash_used+0x9fa>
   284e0:	6030      	str	r0, [r6, #0]
   284e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   284e4:	44c2      	add	sl, r8
   284e6:	62bc      	str	r4, [r7, #40]	; 0x28
   284e8:	3301      	adds	r3, #1
   284ea:	633b      	str	r3, [r7, #48]	; 0x30
   284ec:	f7fe be3f 	b.w	2716e <__ssvfscanf_r+0x19a>
   284f0:	0621      	lsls	r1, r4, #24
   284f2:	d534      	bpl.n	2855e <_flash_used+0xa76>
   284f4:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
   284f8:	f858 3b04 	ldr.w	r3, [r8], #4
   284fc:	63bb      	str	r3, [r7, #56]	; 0x38
   284fe:	2b00      	cmp	r3, #0
   28500:	f43e ae10 	beq.w	27124 <__ssvfscanf_r+0x150>
   28504:	2080      	movs	r0, #128	; 0x80
   28506:	f7fd fa13 	bl	25930 <malloc>
   2850a:	4606      	mov	r6, r0
   2850c:	2800      	cmp	r0, #0
   2850e:	f43f ad10 	beq.w	27f32 <_flash_used+0x44a>
   28512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28514:	6bba      	ldr	r2, [r7, #56]	; 0x38
   28516:	f8b3 9006 	ldrh.w	r9, [r3, #6]
   2851a:	889c      	ldrh	r4, [r3, #4]
   2851c:	6010      	str	r0, [r2, #0]
   2851e:	45a1      	cmp	r9, r4
   28520:	d35c      	bcc.n	285dc <_flash_used+0xaf4>
   28522:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   28526:	429c      	cmp	r4, r3
   28528:	f63f ad07 	bhi.w	27f3a <_flash_used+0x452>
   2852c:	3408      	adds	r4, #8
   2852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28530:	00a1      	lsls	r1, r4, #2
   28532:	6818      	ldr	r0, [r3, #0]
   28534:	f7fd fda2 	bl	2607c <realloc>
   28538:	2800      	cmp	r0, #0
   2853a:	f43f acfe 	beq.w	27f3a <_flash_used+0x452>
   2853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28540:	6018      	str	r0, [r3, #0]
   28542:	809c      	strh	r4, [r3, #4]
   28544:	6bba      	ldr	r2, [r7, #56]	; 0x38
   28546:	f109 0301 	add.w	r3, r9, #1
   2854a:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
   2854e:	46b0      	mov	r8, r6
   28550:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   28554:	f04f 0920 	mov.w	r9, #32
   28558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2855a:	80d3      	strh	r3, [r2, #6]
   2855c:	e49a      	b.n	27e94 <_flash_used+0x3ac>
   2855e:	6abc      	ldr	r4, [r7, #40]	; 0x28
   28560:	69fb      	ldr	r3, [r7, #28]
   28562:	f854 6b04 	ldr.w	r6, [r4], #4
   28566:	4699      	mov	r9, r3
   28568:	4698      	mov	r8, r3
   2856a:	63bb      	str	r3, [r7, #56]	; 0x38
   2856c:	62bc      	str	r4, [r7, #40]	; 0x28
   2856e:	e491      	b.n	27e94 <_flash_used+0x3ac>
   28570:	0002f3c9 	.word	0x0002f3c9
   28574:	00026fb9 	.word	0x00026fb9
   28578:	0002f394 	.word	0x0002f394
   2857c:	461c      	mov	r4, r3
   2857e:	f8db 2004 	ldr.w	r2, [fp, #4]
   28582:	4659      	mov	r1, fp
   28584:	ee18 0a10 	vmov	r0, s16
   28588:	f8db 3000 	ldr.w	r3, [fp]
   2858c:	4295      	cmp	r5, r2
   2858e:	dd1d      	ble.n	285cc <_flash_used+0xae4>
   28590:	4413      	add	r3, r2
   28592:	4414      	add	r4, r2
   28594:	1aad      	subs	r5, r5, r2
   28596:	f8cb 3000 	str.w	r3, [fp]
   2859a:	f003 fb29 	bl	2bbf0 <__ssrefill_r>
   2859e:	2800      	cmp	r0, #0
   285a0:	d0ed      	beq.n	2857e <_flash_used+0xa96>
   285a2:	2c00      	cmp	r4, #0
   285a4:	f43e adb5 	beq.w	27112 <__ssvfscanf_r+0x13e>
   285a8:	44a2      	add	sl, r4
   285aa:	f7fe bde0 	b.w	2716e <__ssvfscanf_r+0x19a>
   285ae:	f854 1b04 	ldr.w	r1, [r4], #4
   285b2:	462b      	mov	r3, r5
   285b4:	2201      	movs	r2, #1
   285b6:	ee18 0a10 	vmov	r0, s16
   285ba:	f8cd b000 	str.w	fp, [sp]
   285be:	f003 fb35 	bl	2bc2c <_sfread_r>
   285c2:	4680      	mov	r8, r0
   285c4:	2800      	cmp	r0, #0
   285c6:	d18c      	bne.n	284e2 <_flash_used+0x9fa>
   285c8:	f7fe bda3 	b.w	27112 <__ssvfscanf_r+0x13e>
   285cc:	1b52      	subs	r2, r2, r5
   285ce:	442c      	add	r4, r5
   285d0:	442b      	add	r3, r5
   285d2:	44a2      	add	sl, r4
   285d4:	e9cb 3200 	strd	r3, r2, [fp]
   285d8:	f7fe bdc9 	b.w	2716e <__ssvfscanf_r+0x19a>
   285dc:	6818      	ldr	r0, [r3, #0]
   285de:	e7b1      	b.n	28544 <_flash_used+0xa5c>
   285e0:	6818      	ldr	r0, [r3, #0]
   285e2:	e763      	b.n	284ac <_flash_used+0x9c4>
   285e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   285e6:	2b00      	cmp	r3, #0
   285e8:	f43f aca7 	beq.w	27f3a <_flash_used+0x452>
   285ec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   285f0:	065b      	lsls	r3, r3, #25
   285f2:	f57e ad99 	bpl.w	27128 <__ssvfscanf_r+0x154>
   285f6:	e49c      	b.n	27f32 <_flash_used+0x44a>
   285f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   285fa:	1c90      	adds	r0, r2, #2
   285fc:	d008      	beq.n	28610 <_flash_used+0xb28>
   285fe:	2a03      	cmp	r2, #3
   28600:	449a      	add	sl, r3
   28602:	f47f ac7e 	bne.w	27f02 <_flash_used+0x41a>
   28606:	6823      	ldr	r3, [r4, #0]
   28608:	2b04      	cmp	r3, #4
   2860a:	f47f ac7a 	bne.w	27f02 <_flash_used+0x41a>
   2860e:	e479      	b.n	27f04 <_flash_used+0x41c>
   28610:	f8db 2004 	ldr.w	r2, [fp, #4]
   28614:	461c      	mov	r4, r3
   28616:	2a00      	cmp	r2, #0
   28618:	f73f ac3d 	bgt.w	27e96 <_flash_used+0x3ae>
   2861c:	4659      	mov	r1, fp
   2861e:	ee18 0a10 	vmov	r0, s16
   28622:	f003 fae5 	bl	2bbf0 <__ssrefill_r>
   28626:	b978      	cbnz	r0, 28648 <_flash_used+0xb60>
   28628:	2d00      	cmp	r5, #0
   2862a:	f47f ac34 	bne.w	27e96 <_flash_used+0x3ae>
   2862e:	eba6 0108 	sub.w	r1, r6, r8
   28632:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
   28636:	d901      	bls.n	2863c <_flash_used+0xb54>
   28638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2863a:	b9c3      	cbnz	r3, 2866e <_flash_used+0xb86>
   2863c:	69fb      	ldr	r3, [r7, #28]
   2863e:	2b00      	cmp	r3, #0
   28640:	f47e ad95 	bne.w	2716e <__ssvfscanf_r+0x19a>
   28644:	f7ff b8fa 	b.w	2783c <__ssvfscanf_r+0x868>
   28648:	2c00      	cmp	r4, #0
   2864a:	d0f0      	beq.n	2862e <_flash_used+0xb46>
   2864c:	f7fe bd61 	b.w	27112 <__ssvfscanf_r+0x13e>
   28650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28652:	1906      	adds	r6, r0, r4
   28654:	ea4f 0949 	mov.w	r9, r9, lsl #1
   28658:	6018      	str	r0, [r3, #0]
   2865a:	3604      	adds	r6, #4
   2865c:	f8db 3004 	ldr.w	r3, [fp, #4]
   28660:	2400      	movs	r4, #0
   28662:	2b00      	cmp	r3, #0
   28664:	ddda      	ble.n	2861c <_flash_used+0xb34>
   28666:	2d00      	cmp	r5, #0
   28668:	f47f ac15 	bne.w	27e96 <_flash_used+0x3ae>
   2866c:	e7df      	b.n	2862e <_flash_used+0xb46>
   2866e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   28670:	6820      	ldr	r0, [r4, #0]
   28672:	f7fd fd03 	bl	2607c <realloc>
   28676:	2800      	cmp	r0, #0
   28678:	d0e0      	beq.n	2863c <_flash_used+0xb54>
   2867a:	6020      	str	r0, [r4, #0]
   2867c:	e7de      	b.n	2863c <_flash_used+0xb54>
   2867e:	bf00      	nop

00028680 <__sprint_r.part.0>:
   28680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28684:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   28686:	4690      	mov	r8, r2
   28688:	049c      	lsls	r4, r3, #18
   2868a:	d52c      	bpl.n	286e6 <__sprint_r.part.0+0x66>
   2868c:	6893      	ldr	r3, [r2, #8]
   2868e:	6812      	ldr	r2, [r2, #0]
   28690:	b33b      	cbz	r3, 286e2 <__sprint_r.part.0+0x62>
   28692:	468b      	mov	fp, r1
   28694:	4606      	mov	r6, r0
   28696:	f102 0908 	add.w	r9, r2, #8
   2869a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   2869e:	ea5f 079a 	movs.w	r7, sl, lsr #2
   286a2:	d014      	beq.n	286ce <__sprint_r.part.0+0x4e>
   286a4:	3d04      	subs	r5, #4
   286a6:	2400      	movs	r4, #0
   286a8:	e001      	b.n	286ae <__sprint_r.part.0+0x2e>
   286aa:	42a7      	cmp	r7, r4
   286ac:	d00d      	beq.n	286ca <__sprint_r.part.0+0x4a>
   286ae:	465a      	mov	r2, fp
   286b0:	f855 1f04 	ldr.w	r1, [r5, #4]!
   286b4:	4630      	mov	r0, r6
   286b6:	3401      	adds	r4, #1
   286b8:	f001 fa30 	bl	29b1c <_fputwc_r>
   286bc:	1c43      	adds	r3, r0, #1
   286be:	d1f4      	bne.n	286aa <__sprint_r.part.0+0x2a>
   286c0:	2300      	movs	r3, #0
   286c2:	e9c8 3301 	strd	r3, r3, [r8, #4]
   286c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   286ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
   286ce:	f02a 0a03 	bic.w	sl, sl, #3
   286d2:	f109 0908 	add.w	r9, r9, #8
   286d6:	eba3 030a 	sub.w	r3, r3, sl
   286da:	f8c8 3008 	str.w	r3, [r8, #8]
   286de:	2b00      	cmp	r3, #0
   286e0:	d1db      	bne.n	2869a <__sprint_r.part.0+0x1a>
   286e2:	2000      	movs	r0, #0
   286e4:	e7ec      	b.n	286c0 <__sprint_r.part.0+0x40>
   286e6:	f001 fba3 	bl	29e30 <__sfvwrite_r>
   286ea:	2300      	movs	r3, #0
   286ec:	e9c8 3301 	strd	r3, r3, [r8, #4]
   286f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000286f4 <_vfiprintf_r>:
   286f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286f8:	ed2d 8b02 	vpush	{d8}
   286fc:	b0bd      	sub	sp, #244	; 0xf4
   286fe:	461c      	mov	r4, r3
   28700:	468a      	mov	sl, r1
   28702:	4691      	mov	r9, r2
   28704:	ee08 0a10 	vmov	s16, r0
   28708:	9306      	str	r3, [sp, #24]
   2870a:	b118      	cbz	r0, 28714 <_vfiprintf_r+0x20>
   2870c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2870e:	2b00      	cmp	r3, #0
   28710:	f000 8279 	beq.w	28c06 <_vfiprintf_r+0x512>
   28714:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28718:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   2871c:	07db      	lsls	r3, r3, #31
   2871e:	b28a      	uxth	r2, r1
   28720:	d402      	bmi.n	28728 <_vfiprintf_r+0x34>
   28722:	058f      	lsls	r7, r1, #22
   28724:	f140 8508 	bpl.w	29138 <_vfiprintf_r+0xa44>
   28728:	0496      	lsls	r6, r2, #18
   2872a:	d40a      	bmi.n	28742 <_vfiprintf_r+0x4e>
   2872c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   28730:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28734:	b28a      	uxth	r2, r1
   28736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   2873a:	f8aa 100c 	strh.w	r1, [sl, #12]
   2873e:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
   28742:	0715      	lsls	r5, r2, #28
   28744:	f140 80f3 	bpl.w	2892e <_vfiprintf_r+0x23a>
   28748:	f8da 3010 	ldr.w	r3, [sl, #16]
   2874c:	2b00      	cmp	r3, #0
   2874e:	f000 80ee 	beq.w	2892e <_vfiprintf_r+0x23a>
   28752:	f002 031a 	and.w	r3, r2, #26
   28756:	2b0a      	cmp	r3, #10
   28758:	f000 80f8 	beq.w	2894c <_vfiprintf_r+0x258>
   2875c:	2300      	movs	r3, #0
   2875e:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28762:	ee18 ba10 	vmov	fp, s16
   28766:	9309      	str	r3, [sp, #36]	; 0x24
   28768:	9312      	str	r3, [sp, #72]	; 0x48
   2876a:	930a      	str	r3, [sp, #40]	; 0x28
   2876c:	9305      	str	r3, [sp, #20]
   2876e:	9311      	str	r3, [sp, #68]	; 0x44
   28770:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   28774:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   28778:	f899 3000 	ldrb.w	r3, [r9]
   2877c:	464c      	mov	r4, r9
   2877e:	2b25      	cmp	r3, #37	; 0x25
   28780:	d01c      	beq.n	287bc <_vfiprintf_r+0xc8>
   28782:	b1db      	cbz	r3, 287bc <_vfiprintf_r+0xc8>
   28784:	4625      	mov	r5, r4
   28786:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2878a:	b10b      	cbz	r3, 28790 <_vfiprintf_r+0x9c>
   2878c:	2b25      	cmp	r3, #37	; 0x25
   2878e:	d1f9      	bne.n	28784 <_vfiprintf_r+0x90>
   28790:	ebb4 0609 	subs.w	r6, r4, r9
   28794:	d012      	beq.n	287bc <_vfiprintf_r+0xc8>
   28796:	f8c8 9000 	str.w	r9, [r8]
   2879a:	f8c8 6004 	str.w	r6, [r8, #4]
   2879e:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   287a2:	3301      	adds	r3, #1
   287a4:	4432      	add	r2, r6
   287a6:	2b07      	cmp	r3, #7
   287a8:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   287ac:	f300 812b 	bgt.w	28a06 <_vfiprintf_r+0x312>
   287b0:	f108 0808 	add.w	r8, r8, #8
   287b4:	9b05      	ldr	r3, [sp, #20]
   287b6:	4433      	add	r3, r6
   287b8:	9305      	str	r3, [sp, #20]
   287ba:	786b      	ldrb	r3, [r5, #1]
   287bc:	2b00      	cmp	r3, #0
   287be:	f000 812e 	beq.w	28a1e <_vfiprintf_r+0x32a>
   287c2:	f04f 0300 	mov.w	r3, #0
   287c6:	2600      	movs	r6, #0
   287c8:	f04f 32ff 	mov.w	r2, #4294967295
   287cc:	f104 0901 	add.w	r9, r4, #1
   287d0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   287d4:	252b      	movs	r5, #43	; 0x2b
   287d6:	7863      	ldrb	r3, [r4, #1]
   287d8:	9604      	str	r6, [sp, #16]
   287da:	9202      	str	r2, [sp, #8]
   287dc:	f109 0901 	add.w	r9, r9, #1
   287e0:	f1a3 0220 	sub.w	r2, r3, #32
   287e4:	2a5a      	cmp	r2, #90	; 0x5a
   287e6:	f200 8131 	bhi.w	28a4c <_vfiprintf_r+0x358>
   287ea:	e8df f012 	tbh	[pc, r2, lsl #1]
   287ee:	006a      	.short	0x006a
   287f0:	012f012f 	.word	0x012f012f
   287f4:	012f0262 	.word	0x012f0262
   287f8:	012f012f 	.word	0x012f012f
   287fc:	012f0242 	.word	0x012f0242
   28800:	020f012f 	.word	0x020f012f
   28804:	012f021f 	.word	0x012f021f
   28808:	0229021a 	.word	0x0229021a
   2880c:	0224012f 	.word	0x0224012f
   28810:	005b005b 	.word	0x005b005b
   28814:	005b005b 	.word	0x005b005b
   28818:	005b005b 	.word	0x005b005b
   2881c:	005b005b 	.word	0x005b005b
   28820:	012f005b 	.word	0x012f005b
   28824:	012f012f 	.word	0x012f012f
   28828:	012f012f 	.word	0x012f012f
   2882c:	012f012f 	.word	0x012f012f
   28830:	012f012f 	.word	0x012f012f
   28834:	007701fd 	.word	0x007701fd
   28838:	012f012f 	.word	0x012f012f
   2883c:	012f012f 	.word	0x012f012f
   28840:	012f012f 	.word	0x012f012f
   28844:	012f012f 	.word	0x012f012f
   28848:	012f012f 	.word	0x012f012f
   2884c:	012f00c9 	.word	0x012f00c9
   28850:	012f012f 	.word	0x012f012f
   28854:	012f01e1 	.word	0x012f01e1
   28858:	012f0277 	.word	0x012f0277
   2885c:	04e8012f 	.word	0x04e8012f
   28860:	012f012f 	.word	0x012f012f
   28864:	012f012f 	.word	0x012f012f
   28868:	012f012f 	.word	0x012f012f
   2886c:	012f012f 	.word	0x012f012f
   28870:	012f012f 	.word	0x012f012f
   28874:	007901fd 	.word	0x007901fd
   28878:	012f012f 	.word	0x012f012f
   2887c:	026f012f 	.word	0x026f012f
   28880:	00720079 	.word	0x00720079
   28884:	0267012f 	.word	0x0267012f
   28888:	0298012f 	.word	0x0298012f
   2888c:	028700cb 	.word	0x028700cb
   28890:	012f0072 	.word	0x012f0072
   28894:	006f01e1 	.word	0x006f01e1
   28898:	012f04e6 	.word	0x012f04e6
   2889c:	0505012f 	.word	0x0505012f
   288a0:	006f012f 	.word	0x006f012f
   288a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   288a8:	2100      	movs	r1, #0
   288aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   288ae:	f819 3b01 	ldrb.w	r3, [r9], #1
   288b2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   288b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   288ba:	2a09      	cmp	r2, #9
   288bc:	d9f5      	bls.n	288aa <_vfiprintf_r+0x1b6>
   288be:	9104      	str	r1, [sp, #16]
   288c0:	e78e      	b.n	287e0 <_vfiprintf_r+0xec>
   288c2:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   288c6:	2b00      	cmp	r3, #0
   288c8:	f000 8453 	beq.w	29172 <_vfiprintf_r+0xa7e>
   288cc:	f899 3000 	ldrb.w	r3, [r9]
   288d0:	e784      	b.n	287dc <_vfiprintf_r+0xe8>
   288d2:	f046 0620 	orr.w	r6, r6, #32
   288d6:	f899 3000 	ldrb.w	r3, [r9]
   288da:	e77f      	b.n	287dc <_vfiprintf_r+0xe8>
   288dc:	f046 0610 	orr.w	r6, r6, #16
   288e0:	06b7      	lsls	r7, r6, #26
   288e2:	f140 814a 	bpl.w	28b7a <_vfiprintf_r+0x486>
   288e6:	9c06      	ldr	r4, [sp, #24]
   288e8:	3407      	adds	r4, #7
   288ea:	f024 0307 	bic.w	r3, r4, #7
   288ee:	4619      	mov	r1, r3
   288f0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   288f4:	4614      	mov	r4, r2
   288f6:	461d      	mov	r5, r3
   288f8:	9106      	str	r1, [sp, #24]
   288fa:	2a00      	cmp	r2, #0
   288fc:	f173 0300 	sbcs.w	r3, r3, #0
   28900:	f2c0 83f9 	blt.w	290f6 <_vfiprintf_r+0xa02>
   28904:	9b02      	ldr	r3, [sp, #8]
   28906:	3301      	adds	r3, #1
   28908:	f000 83b3 	beq.w	29072 <_vfiprintf_r+0x97e>
   2890c:	ea54 0305 	orrs.w	r3, r4, r5
   28910:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   28914:	f040 83ad 	bne.w	29072 <_vfiprintf_r+0x97e>
   28918:	9a02      	ldr	r2, [sp, #8]
   2891a:	1e13      	subs	r3, r2, #0
   2891c:	bf18      	it	ne
   2891e:	2301      	movne	r3, #1
   28920:	2a00      	cmp	r2, #0
   28922:	f040 83a6 	bne.w	29072 <_vfiprintf_r+0x97e>
   28926:	af3c      	add	r7, sp, #240	; 0xf0
   28928:	9302      	str	r3, [sp, #8]
   2892a:	9303      	str	r3, [sp, #12]
   2892c:	e05e      	b.n	289ec <_vfiprintf_r+0x2f8>
   2892e:	4651      	mov	r1, sl
   28930:	ee18 0a10 	vmov	r0, s16
   28934:	f000 fe4a 	bl	295cc <__swsetup_r>
   28938:	2800      	cmp	r0, #0
   2893a:	f040 856b 	bne.w	29414 <_vfiprintf_r+0xd20>
   2893e:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   28942:	f002 031a 	and.w	r3, r2, #26
   28946:	2b0a      	cmp	r3, #10
   28948:	f47f af08 	bne.w	2875c <_vfiprintf_r+0x68>
   2894c:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
   28950:	2b00      	cmp	r3, #0
   28952:	f6ff af03 	blt.w	2875c <_vfiprintf_r+0x68>
   28956:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   2895a:	07d9      	lsls	r1, r3, #31
   2895c:	d402      	bmi.n	28964 <_vfiprintf_r+0x270>
   2895e:	0593      	lsls	r3, r2, #22
   28960:	f140 850c 	bpl.w	2937c <_vfiprintf_r+0xc88>
   28964:	4623      	mov	r3, r4
   28966:	464a      	mov	r2, r9
   28968:	4651      	mov	r1, sl
   2896a:	ee18 0a10 	vmov	r0, s16
   2896e:	f000 fd6d 	bl	2944c <__sbprintf>
   28972:	9005      	str	r0, [sp, #20]
   28974:	9805      	ldr	r0, [sp, #20]
   28976:	b03d      	add	sp, #244	; 0xf4
   28978:	ecbd 8b02 	vpop	{d8}
   2897c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28980:	f046 0610 	orr.w	r6, r6, #16
   28984:	06b5      	lsls	r5, r6, #26
   28986:	9c06      	ldr	r4, [sp, #24]
   28988:	f140 8106 	bpl.w	28b98 <_vfiprintf_r+0x4a4>
   2898c:	3407      	adds	r4, #7
   2898e:	f024 0307 	bic.w	r3, r4, #7
   28992:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   28996:	9306      	str	r3, [sp, #24]
   28998:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   2899c:	9301      	str	r3, [sp, #4]
   2899e:	2300      	movs	r3, #0
   289a0:	f04f 0200 	mov.w	r2, #0
   289a4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   289a8:	9a02      	ldr	r2, [sp, #8]
   289aa:	4611      	mov	r1, r2
   289ac:	3101      	adds	r1, #1
   289ae:	f000 81d5 	beq.w	28d5c <_vfiprintf_r+0x668>
   289b2:	9901      	ldr	r1, [sp, #4]
   289b4:	f021 0680 	bic.w	r6, r1, #128	; 0x80
   289b8:	ea54 0105 	orrs.w	r1, r4, r5
   289bc:	f040 81cd 	bne.w	28d5a <_vfiprintf_r+0x666>
   289c0:	4611      	mov	r1, r2
   289c2:	3a00      	subs	r2, #0
   289c4:	bf18      	it	ne
   289c6:	2201      	movne	r2, #1
   289c8:	2900      	cmp	r1, #0
   289ca:	f040 81c6 	bne.w	28d5a <_vfiprintf_r+0x666>
   289ce:	2b00      	cmp	r3, #0
   289d0:	f040 834b 	bne.w	2906a <_vfiprintf_r+0x976>
   289d4:	9a01      	ldr	r2, [sp, #4]
   289d6:	f012 0201 	ands.w	r2, r2, #1
   289da:	9203      	str	r2, [sp, #12]
   289dc:	f000 8379 	beq.w	290d2 <_vfiprintf_r+0x9de>
   289e0:	2230      	movs	r2, #48	; 0x30
   289e2:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   289e6:	9302      	str	r3, [sp, #8]
   289e8:	f88d 20ef 	strb.w	r2, [sp, #239]	; 0xef
   289ec:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   289f0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   289f4:	428a      	cmp	r2, r1
   289f6:	bfb8      	it	lt
   289f8:	460a      	movlt	r2, r1
   289fa:	9201      	str	r2, [sp, #4]
   289fc:	2b00      	cmp	r3, #0
   289fe:	d033      	beq.n	28a68 <_vfiprintf_r+0x374>
   28a00:	3201      	adds	r2, #1
   28a02:	9201      	str	r2, [sp, #4]
   28a04:	e030      	b.n	28a68 <_vfiprintf_r+0x374>
   28a06:	2a00      	cmp	r2, #0
   28a08:	f000 835e 	beq.w	290c8 <_vfiprintf_r+0x9d4>
   28a0c:	aa10      	add	r2, sp, #64	; 0x40
   28a0e:	4651      	mov	r1, sl
   28a10:	4658      	mov	r0, fp
   28a12:	f7ff fe35 	bl	28680 <__sprint_r.part.0>
   28a16:	b940      	cbnz	r0, 28a2a <_vfiprintf_r+0x336>
   28a18:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28a1c:	e6ca      	b.n	287b4 <_vfiprintf_r+0xc0>
   28a1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28a20:	2b00      	cmp	r3, #0
   28a22:	f040 84d8 	bne.w	293d6 <_vfiprintf_r+0xce2>
   28a26:	2300      	movs	r3, #0
   28a28:	9311      	str	r3, [sp, #68]	; 0x44
   28a2a:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28a2e:	f013 0f01 	tst.w	r3, #1
   28a32:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   28a36:	f000 8096 	beq.w	28b66 <_vfiprintf_r+0x472>
   28a3a:	065b      	lsls	r3, r3, #25
   28a3c:	f100 84d6 	bmi.w	293ec <_vfiprintf_r+0xcf8>
   28a40:	9805      	ldr	r0, [sp, #20]
   28a42:	b03d      	add	sp, #244	; 0xf4
   28a44:	ecbd 8b02 	vpop	{d8}
   28a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a4c:	2b00      	cmp	r3, #0
   28a4e:	d0e6      	beq.n	28a1e <_vfiprintf_r+0x32a>
   28a50:	2201      	movs	r2, #1
   28a52:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   28a56:	af23      	add	r7, sp, #140	; 0x8c
   28a58:	f04f 0300 	mov.w	r3, #0
   28a5c:	9201      	str	r2, [sp, #4]
   28a5e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28a62:	9203      	str	r2, [sp, #12]
   28a64:	2300      	movs	r3, #0
   28a66:	9302      	str	r3, [sp, #8]
   28a68:	f016 0302 	ands.w	r3, r6, #2
   28a6c:	9307      	str	r3, [sp, #28]
   28a6e:	d002      	beq.n	28a76 <_vfiprintf_r+0x382>
   28a70:	9b01      	ldr	r3, [sp, #4]
   28a72:	3302      	adds	r3, #2
   28a74:	9301      	str	r3, [sp, #4]
   28a76:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   28a7a:	9308      	str	r3, [sp, #32]
   28a7c:	d105      	bne.n	28a8a <_vfiprintf_r+0x396>
   28a7e:	9b04      	ldr	r3, [sp, #16]
   28a80:	9a01      	ldr	r2, [sp, #4]
   28a82:	1a9c      	subs	r4, r3, r2
   28a84:	2c00      	cmp	r4, #0
   28a86:	f300 8259 	bgt.w	28f3c <_vfiprintf_r+0x848>
   28a8a:	e9dd 2c11 	ldrd	r2, ip, [sp, #68]	; 0x44
   28a8e:	1c51      	adds	r1, r2, #1
   28a90:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   28a94:	b178      	cbz	r0, 28ab6 <_vfiprintf_r+0x3c2>
   28a96:	f10c 0c01 	add.w	ip, ip, #1
   28a9a:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   28a9e:	2201      	movs	r2, #1
   28aa0:	2907      	cmp	r1, #7
   28aa2:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28aa6:	e9c8 0200 	strd	r0, r2, [r8]
   28aaa:	f300 8227 	bgt.w	28efc <_vfiprintf_r+0x808>
   28aae:	460a      	mov	r2, r1
   28ab0:	f108 0808 	add.w	r8, r8, #8
   28ab4:	3101      	adds	r1, #1
   28ab6:	9b07      	ldr	r3, [sp, #28]
   28ab8:	b1db      	cbz	r3, 28af2 <_vfiprintf_r+0x3fe>
   28aba:	f10c 0c02 	add.w	ip, ip, #2
   28abe:	aa0f      	add	r2, sp, #60	; 0x3c
   28ac0:	2302      	movs	r3, #2
   28ac2:	2907      	cmp	r1, #7
   28ac4:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28ac8:	e9c8 2300 	strd	r2, r3, [r8]
   28acc:	f340 8231 	ble.w	28f32 <_vfiprintf_r+0x83e>
   28ad0:	f1bc 0f00 	cmp.w	ip, #0
   28ad4:	f000 82e0 	beq.w	29098 <_vfiprintf_r+0x9a4>
   28ad8:	aa10      	add	r2, sp, #64	; 0x40
   28ada:	4651      	mov	r1, sl
   28adc:	4658      	mov	r0, fp
   28ade:	f7ff fdcf 	bl	28680 <__sprint_r.part.0>
   28ae2:	2800      	cmp	r0, #0
   28ae4:	d1a1      	bne.n	28a2a <_vfiprintf_r+0x336>
   28ae6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   28ae8:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28aec:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   28af0:	1c51      	adds	r1, r2, #1
   28af2:	9b08      	ldr	r3, [sp, #32]
   28af4:	2b80      	cmp	r3, #128	; 0x80
   28af6:	f000 8169 	beq.w	28dcc <_vfiprintf_r+0x6d8>
   28afa:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   28afe:	1a1c      	subs	r4, r3, r0
   28b00:	2c00      	cmp	r4, #0
   28b02:	f300 81b8 	bgt.w	28e76 <_vfiprintf_r+0x782>
   28b06:	9a03      	ldr	r2, [sp, #12]
   28b08:	2907      	cmp	r1, #7
   28b0a:	4613      	mov	r3, r2
   28b0c:	4463      	add	r3, ip
   28b0e:	e9c8 7200 	strd	r7, r2, [r8]
   28b12:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
   28b16:	f340 811d 	ble.w	28d54 <_vfiprintf_r+0x660>
   28b1a:	2b00      	cmp	r3, #0
   28b1c:	f000 824a 	beq.w	28fb4 <_vfiprintf_r+0x8c0>
   28b20:	aa10      	add	r2, sp, #64	; 0x40
   28b22:	4651      	mov	r1, sl
   28b24:	4658      	mov	r0, fp
   28b26:	f7ff fdab 	bl	28680 <__sprint_r.part.0>
   28b2a:	2800      	cmp	r0, #0
   28b2c:	f47f af7d 	bne.w	28a2a <_vfiprintf_r+0x336>
   28b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28b32:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28b36:	0771      	lsls	r1, r6, #29
   28b38:	d505      	bpl.n	28b46 <_vfiprintf_r+0x452>
   28b3a:	9a04      	ldr	r2, [sp, #16]
   28b3c:	9901      	ldr	r1, [sp, #4]
   28b3e:	1a54      	subs	r4, r2, r1
   28b40:	2c00      	cmp	r4, #0
   28b42:	f300 8241 	bgt.w	28fc8 <_vfiprintf_r+0x8d4>
   28b46:	9801      	ldr	r0, [sp, #4]
   28b48:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   28b4c:	4281      	cmp	r1, r0
   28b4e:	bfac      	ite	ge
   28b50:	1852      	addge	r2, r2, r1
   28b52:	1812      	addlt	r2, r2, r0
   28b54:	9205      	str	r2, [sp, #20]
   28b56:	2b00      	cmp	r3, #0
   28b58:	f040 81c7 	bne.w	28eea <_vfiprintf_r+0x7f6>
   28b5c:	2300      	movs	r3, #0
   28b5e:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28b62:	9311      	str	r3, [sp, #68]	; 0x44
   28b64:	e608      	b.n	28778 <_vfiprintf_r+0x84>
   28b66:	059a      	lsls	r2, r3, #22
   28b68:	f53f af67 	bmi.w	28a3a <_vfiprintf_r+0x346>
   28b6c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   28b70:	f001 ff00 	bl	2a974 <__retarget_lock_release_recursive>
   28b74:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   28b78:	e75f      	b.n	28a3a <_vfiprintf_r+0x346>
   28b7a:	9b06      	ldr	r3, [sp, #24]
   28b7c:	06f5      	lsls	r5, r6, #27
   28b7e:	f853 4b04 	ldr.w	r4, [r3], #4
   28b82:	f100 82ea 	bmi.w	2915a <_vfiprintf_r+0xa66>
   28b86:	0670      	lsls	r0, r6, #25
   28b88:	f140 82e4 	bpl.w	29154 <_vfiprintf_r+0xa60>
   28b8c:	b224      	sxth	r4, r4
   28b8e:	9306      	str	r3, [sp, #24]
   28b90:	17e5      	asrs	r5, r4, #31
   28b92:	4622      	mov	r2, r4
   28b94:	462b      	mov	r3, r5
   28b96:	e6b0      	b.n	288fa <_vfiprintf_r+0x206>
   28b98:	f854 3b04 	ldr.w	r3, [r4], #4
   28b9c:	06f0      	lsls	r0, r6, #27
   28b9e:	9406      	str	r4, [sp, #24]
   28ba0:	f100 82e4 	bmi.w	2916c <_vfiprintf_r+0xa78>
   28ba4:	0671      	lsls	r1, r6, #25
   28ba6:	f140 82de 	bpl.w	29166 <_vfiprintf_r+0xa72>
   28baa:	b29c      	uxth	r4, r3
   28bac:	2500      	movs	r5, #0
   28bae:	e6f3      	b.n	28998 <_vfiprintf_r+0x2a4>
   28bb0:	9c06      	ldr	r4, [sp, #24]
   28bb2:	f04f 0300 	mov.w	r3, #0
   28bb6:	f854 7b04 	ldr.w	r7, [r4], #4
   28bba:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28bbe:	2f00      	cmp	r7, #0
   28bc0:	f000 839d 	beq.w	292fe <_vfiprintf_r+0xc0a>
   28bc4:	9a02      	ldr	r2, [sp, #8]
   28bc6:	4613      	mov	r3, r2
   28bc8:	3301      	adds	r3, #1
   28bca:	f000 8318 	beq.w	291fe <_vfiprintf_r+0xb0a>
   28bce:	2100      	movs	r1, #0
   28bd0:	4638      	mov	r0, r7
   28bd2:	f7fd f98b 	bl	25eec <memchr>
   28bd6:	2800      	cmp	r0, #0
   28bd8:	f000 83ea 	beq.w	293b0 <_vfiprintf_r+0xcbc>
   28bdc:	1bc3      	subs	r3, r0, r7
   28bde:	9406      	str	r4, [sp, #24]
   28be0:	9303      	str	r3, [sp, #12]
   28be2:	2300      	movs	r3, #0
   28be4:	9302      	str	r3, [sp, #8]
   28be6:	e701      	b.n	289ec <_vfiprintf_r+0x2f8>
   28be8:	9c06      	ldr	r4, [sp, #24]
   28bea:	f04f 0300 	mov.w	r3, #0
   28bee:	2201      	movs	r2, #1
   28bf0:	af23      	add	r7, sp, #140	; 0x8c
   28bf2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28bf6:	f854 3b04 	ldr.w	r3, [r4], #4
   28bfa:	9201      	str	r2, [sp, #4]
   28bfc:	9203      	str	r2, [sp, #12]
   28bfe:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   28c02:	9406      	str	r4, [sp, #24]
   28c04:	e72e      	b.n	28a64 <_vfiprintf_r+0x370>
   28c06:	f000 fefd 	bl	29a04 <__sinit>
   28c0a:	e583      	b.n	28714 <_vfiprintf_r+0x20>
   28c0c:	9b06      	ldr	r3, [sp, #24]
   28c0e:	f853 2b04 	ldr.w	r2, [r3], #4
   28c12:	2a00      	cmp	r2, #0
   28c14:	9204      	str	r2, [sp, #16]
   28c16:	f280 828a 	bge.w	2912e <_vfiprintf_r+0xa3a>
   28c1a:	9a04      	ldr	r2, [sp, #16]
   28c1c:	9306      	str	r3, [sp, #24]
   28c1e:	4252      	negs	r2, r2
   28c20:	9204      	str	r2, [sp, #16]
   28c22:	f046 0604 	orr.w	r6, r6, #4
   28c26:	f899 3000 	ldrb.w	r3, [r9]
   28c2a:	e5d7      	b.n	287dc <_vfiprintf_r+0xe8>
   28c2c:	f899 3000 	ldrb.w	r3, [r9]
   28c30:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   28c34:	e5d2      	b.n	287dc <_vfiprintf_r+0xe8>
   28c36:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   28c3a:	f899 3000 	ldrb.w	r3, [r9]
   28c3e:	e5cd      	b.n	287dc <_vfiprintf_r+0xe8>
   28c40:	4649      	mov	r1, r9
   28c42:	f811 3b01 	ldrb.w	r3, [r1], #1
   28c46:	2b2a      	cmp	r3, #42	; 0x2a
   28c48:	f000 83d8 	beq.w	293fc <_vfiprintf_r+0xd08>
   28c4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28c50:	4689      	mov	r9, r1
   28c52:	2a09      	cmp	r2, #9
   28c54:	f200 83b7 	bhi.w	293c6 <_vfiprintf_r+0xcd2>
   28c58:	2100      	movs	r1, #0
   28c5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   28c5e:	f819 3b01 	ldrb.w	r3, [r9], #1
   28c62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   28c66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28c6a:	2a09      	cmp	r2, #9
   28c6c:	d9f5      	bls.n	28c5a <_vfiprintf_r+0x566>
   28c6e:	9102      	str	r1, [sp, #8]
   28c70:	e5b6      	b.n	287e0 <_vfiprintf_r+0xec>
   28c72:	4658      	mov	r0, fp
   28c74:	f001 fe74 	bl	2a960 <_localeconv_r>
   28c78:	6843      	ldr	r3, [r0, #4]
   28c7a:	4618      	mov	r0, r3
   28c7c:	930b      	str	r3, [sp, #44]	; 0x2c
   28c7e:	f7fd fdb1 	bl	267e4 <strlen>
   28c82:	4603      	mov	r3, r0
   28c84:	4658      	mov	r0, fp
   28c86:	461c      	mov	r4, r3
   28c88:	930c      	str	r3, [sp, #48]	; 0x30
   28c8a:	f001 fe69 	bl	2a960 <_localeconv_r>
   28c8e:	6882      	ldr	r2, [r0, #8]
   28c90:	920a      	str	r2, [sp, #40]	; 0x28
   28c92:	2c00      	cmp	r4, #0
   28c94:	f43f ae1a 	beq.w	288cc <_vfiprintf_r+0x1d8>
   28c98:	2a00      	cmp	r2, #0
   28c9a:	f43f ae17 	beq.w	288cc <_vfiprintf_r+0x1d8>
   28c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28ca0:	781b      	ldrb	r3, [r3, #0]
   28ca2:	2b00      	cmp	r3, #0
   28ca4:	f43f ae12 	beq.w	288cc <_vfiprintf_r+0x1d8>
   28ca8:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   28cac:	f899 3000 	ldrb.w	r3, [r9]
   28cb0:	e594      	b.n	287dc <_vfiprintf_r+0xe8>
   28cb2:	f046 0601 	orr.w	r6, r6, #1
   28cb6:	f899 3000 	ldrb.w	r3, [r9]
   28cba:	e58f      	b.n	287dc <_vfiprintf_r+0xe8>
   28cbc:	f899 3000 	ldrb.w	r3, [r9]
   28cc0:	2b6c      	cmp	r3, #108	; 0x6c
   28cc2:	f000 830c 	beq.w	292de <_vfiprintf_r+0xbea>
   28cc6:	f046 0610 	orr.w	r6, r6, #16
   28cca:	e587      	b.n	287dc <_vfiprintf_r+0xe8>
   28ccc:	f899 3000 	ldrb.w	r3, [r9]
   28cd0:	2b68      	cmp	r3, #104	; 0x68
   28cd2:	f000 82fc 	beq.w	292ce <_vfiprintf_r+0xbda>
   28cd6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   28cda:	e57f      	b.n	287dc <_vfiprintf_r+0xe8>
   28cdc:	f046 0310 	orr.w	r3, r6, #16
   28ce0:	9301      	str	r3, [sp, #4]
   28ce2:	9b01      	ldr	r3, [sp, #4]
   28ce4:	069b      	lsls	r3, r3, #26
   28ce6:	f140 81f7 	bpl.w	290d8 <_vfiprintf_r+0x9e4>
   28cea:	9c06      	ldr	r4, [sp, #24]
   28cec:	2301      	movs	r3, #1
   28cee:	3407      	adds	r4, #7
   28cf0:	f024 0207 	bic.w	r2, r4, #7
   28cf4:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   28cf8:	9206      	str	r2, [sp, #24]
   28cfa:	e651      	b.n	289a0 <_vfiprintf_r+0x2ac>
   28cfc:	9c06      	ldr	r4, [sp, #24]
   28cfe:	f046 0302 	orr.w	r3, r6, #2
   28d02:	f647 0130 	movw	r1, #30768	; 0x7830
   28d06:	2500      	movs	r5, #0
   28d08:	f854 2b04 	ldr.w	r2, [r4], #4
   28d0c:	9301      	str	r3, [sp, #4]
   28d0e:	4bb2      	ldr	r3, [pc, #712]	; (28fd8 <_vfiprintf_r+0x8e4>)
   28d10:	9406      	str	r4, [sp, #24]
   28d12:	4614      	mov	r4, r2
   28d14:	9309      	str	r3, [sp, #36]	; 0x24
   28d16:	2302      	movs	r3, #2
   28d18:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
   28d1c:	e640      	b.n	289a0 <_vfiprintf_r+0x2ac>
   28d1e:	06b2      	lsls	r2, r6, #26
   28d20:	f100 822e 	bmi.w	29180 <_vfiprintf_r+0xa8c>
   28d24:	06f3      	lsls	r3, r6, #27
   28d26:	f100 82e2 	bmi.w	292ee <_vfiprintf_r+0xbfa>
   28d2a:	0677      	lsls	r7, r6, #25
   28d2c:	f100 8310 	bmi.w	29350 <_vfiprintf_r+0xc5c>
   28d30:	05b6      	lsls	r6, r6, #22
   28d32:	f140 82dc 	bpl.w	292ee <_vfiprintf_r+0xbfa>
   28d36:	9c06      	ldr	r4, [sp, #24]
   28d38:	9a05      	ldr	r2, [sp, #20]
   28d3a:	f854 3b04 	ldr.w	r3, [r4], #4
   28d3e:	701a      	strb	r2, [r3, #0]
   28d40:	9406      	str	r4, [sp, #24]
   28d42:	e519      	b.n	28778 <_vfiprintf_r+0x84>
   28d44:	9b03      	ldr	r3, [sp, #12]
   28d46:	2201      	movs	r2, #1
   28d48:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28d4c:	9713      	str	r7, [sp, #76]	; 0x4c
   28d4e:	9314      	str	r3, [sp, #80]	; 0x50
   28d50:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
   28d54:	f108 0808 	add.w	r8, r8, #8
   28d58:	e6ed      	b.n	28b36 <_vfiprintf_r+0x442>
   28d5a:	9601      	str	r6, [sp, #4]
   28d5c:	2b01      	cmp	r3, #1
   28d5e:	f000 8189 	beq.w	29074 <_vfiprintf_r+0x980>
   28d62:	2b02      	cmp	r3, #2
   28d64:	af3c      	add	r7, sp, #240	; 0xf0
   28d66:	d113      	bne.n	28d90 <_vfiprintf_r+0x69c>
   28d68:	9809      	ldr	r0, [sp, #36]	; 0x24
   28d6a:	0923      	lsrs	r3, r4, #4
   28d6c:	f004 010f 	and.w	r1, r4, #15
   28d70:	092a      	lsrs	r2, r5, #4
   28d72:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   28d76:	4615      	mov	r5, r2
   28d78:	461c      	mov	r4, r3
   28d7a:	5c43      	ldrb	r3, [r0, r1]
   28d7c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   28d80:	ea54 0305 	orrs.w	r3, r4, r5
   28d84:	d1f1      	bne.n	28d6a <_vfiprintf_r+0x676>
   28d86:	ab3c      	add	r3, sp, #240	; 0xf0
   28d88:	9e01      	ldr	r6, [sp, #4]
   28d8a:	1bdb      	subs	r3, r3, r7
   28d8c:	9303      	str	r3, [sp, #12]
   28d8e:	e62d      	b.n	289ec <_vfiprintf_r+0x2f8>
   28d90:	08e2      	lsrs	r2, r4, #3
   28d92:	f004 0307 	and.w	r3, r4, #7
   28d96:	08e9      	lsrs	r1, r5, #3
   28d98:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   28d9c:	3330      	adds	r3, #48	; 0x30
   28d9e:	460d      	mov	r5, r1
   28da0:	4614      	mov	r4, r2
   28da2:	463a      	mov	r2, r7
   28da4:	f807 3d01 	strb.w	r3, [r7, #-1]!
   28da8:	ea54 0105 	orrs.w	r1, r4, r5
   28dac:	d1f0      	bne.n	28d90 <_vfiprintf_r+0x69c>
   28dae:	2b30      	cmp	r3, #48	; 0x30
   28db0:	d0e9      	beq.n	28d86 <_vfiprintf_r+0x692>
   28db2:	9b01      	ldr	r3, [sp, #4]
   28db4:	07dc      	lsls	r4, r3, #31
   28db6:	d5e6      	bpl.n	28d86 <_vfiprintf_r+0x692>
   28db8:	2330      	movs	r3, #48	; 0x30
   28dba:	3a02      	subs	r2, #2
   28dbc:	9e01      	ldr	r6, [sp, #4]
   28dbe:	f807 3c01 	strb.w	r3, [r7, #-1]
   28dc2:	ab3c      	add	r3, sp, #240	; 0xf0
   28dc4:	4617      	mov	r7, r2
   28dc6:	1a9b      	subs	r3, r3, r2
   28dc8:	9303      	str	r3, [sp, #12]
   28dca:	e60f      	b.n	289ec <_vfiprintf_r+0x2f8>
   28dcc:	9b04      	ldr	r3, [sp, #16]
   28dce:	9801      	ldr	r0, [sp, #4]
   28dd0:	1a1c      	subs	r4, r3, r0
   28dd2:	2c00      	cmp	r4, #0
   28dd4:	f77f ae91 	ble.w	28afa <_vfiprintf_r+0x406>
   28dd8:	2c10      	cmp	r4, #16
   28dda:	f340 830c 	ble.w	293f6 <_vfiprintf_r+0xd02>
   28dde:	9607      	str	r6, [sp, #28]
   28de0:	4666      	mov	r6, ip
   28de2:	4d7e      	ldr	r5, [pc, #504]	; (28fdc <_vfiprintf_r+0x8e8>)
   28de4:	e00a      	b.n	28dfc <_vfiprintf_r+0x708>
   28de6:	f7ff fc4b 	bl	28680 <__sprint_r.part.0>
   28dea:	2800      	cmp	r0, #0
   28dec:	f47f ae1d 	bne.w	28a2a <_vfiprintf_r+0x336>
   28df0:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   28df4:	1c50      	adds	r0, r2, #1
   28df6:	3c10      	subs	r4, #16
   28df8:	2c10      	cmp	r4, #16
   28dfa:	dd1a      	ble.n	28e32 <_vfiprintf_r+0x73e>
   28dfc:	1c53      	adds	r3, r2, #1
   28dfe:	3610      	adds	r6, #16
   28e00:	2110      	movs	r1, #16
   28e02:	1c90      	adds	r0, r2, #2
   28e04:	2b07      	cmp	r3, #7
   28e06:	f8c8 5000 	str.w	r5, [r8]
   28e0a:	f8c8 1004 	str.w	r1, [r8, #4]
   28e0e:	461a      	mov	r2, r3
   28e10:	f108 0808 	add.w	r8, r8, #8
   28e14:	9612      	str	r6, [sp, #72]	; 0x48
   28e16:	9311      	str	r3, [sp, #68]	; 0x44
   28e18:	dded      	ble.n	28df6 <_vfiprintf_r+0x702>
   28e1a:	aa10      	add	r2, sp, #64	; 0x40
   28e1c:	4651      	mov	r1, sl
   28e1e:	4658      	mov	r0, fp
   28e20:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28e24:	2e00      	cmp	r6, #0
   28e26:	d1de      	bne.n	28de6 <_vfiprintf_r+0x6f2>
   28e28:	3c10      	subs	r4, #16
   28e2a:	2001      	movs	r0, #1
   28e2c:	4632      	mov	r2, r6
   28e2e:	2c10      	cmp	r4, #16
   28e30:	dce4      	bgt.n	28dfc <_vfiprintf_r+0x708>
   28e32:	46b4      	mov	ip, r6
   28e34:	9e07      	ldr	r6, [sp, #28]
   28e36:	44a4      	add	ip, r4
   28e38:	2807      	cmp	r0, #7
   28e3a:	e9c8 5400 	strd	r5, r4, [r8]
   28e3e:	e9cd 0c11 	strd	r0, ip, [sp, #68]	; 0x44
   28e42:	f340 8182 	ble.w	2914a <_vfiprintf_r+0xa56>
   28e46:	f1bc 0f00 	cmp.w	ip, #0
   28e4a:	f000 8271 	beq.w	29330 <_vfiprintf_r+0xc3c>
   28e4e:	aa10      	add	r2, sp, #64	; 0x40
   28e50:	4651      	mov	r1, sl
   28e52:	4658      	mov	r0, fp
   28e54:	f7ff fc14 	bl	28680 <__sprint_r.part.0>
   28e58:	2800      	cmp	r0, #0
   28e5a:	f47f ade6 	bne.w	28a2a <_vfiprintf_r+0x336>
   28e5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   28e60:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28e64:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   28e68:	1c51      	adds	r1, r2, #1
   28e6a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   28e6e:	1a1c      	subs	r4, r3, r0
   28e70:	2c00      	cmp	r4, #0
   28e72:	f77f ae48 	ble.w	28b06 <_vfiprintf_r+0x412>
   28e76:	2c10      	cmp	r4, #16
   28e78:	4d58      	ldr	r5, [pc, #352]	; (28fdc <_vfiprintf_r+0x8e8>)
   28e7a:	dd2a      	ble.n	28ed2 <_vfiprintf_r+0x7de>
   28e7c:	9602      	str	r6, [sp, #8]
   28e7e:	4666      	mov	r6, ip
   28e80:	e00a      	b.n	28e98 <_vfiprintf_r+0x7a4>
   28e82:	f7ff fbfd 	bl	28680 <__sprint_r.part.0>
   28e86:	2800      	cmp	r0, #0
   28e88:	f47f adcf 	bne.w	28a2a <_vfiprintf_r+0x336>
   28e8c:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   28e90:	1c51      	adds	r1, r2, #1
   28e92:	3c10      	subs	r4, #16
   28e94:	2c10      	cmp	r4, #16
   28e96:	dd1a      	ble.n	28ece <_vfiprintf_r+0x7da>
   28e98:	1c53      	adds	r3, r2, #1
   28e9a:	3610      	adds	r6, #16
   28e9c:	2010      	movs	r0, #16
   28e9e:	1c91      	adds	r1, r2, #2
   28ea0:	2b07      	cmp	r3, #7
   28ea2:	f8c8 5000 	str.w	r5, [r8]
   28ea6:	f8c8 0004 	str.w	r0, [r8, #4]
   28eaa:	461a      	mov	r2, r3
   28eac:	f108 0808 	add.w	r8, r8, #8
   28eb0:	9612      	str	r6, [sp, #72]	; 0x48
   28eb2:	9311      	str	r3, [sp, #68]	; 0x44
   28eb4:	dded      	ble.n	28e92 <_vfiprintf_r+0x79e>
   28eb6:	aa10      	add	r2, sp, #64	; 0x40
   28eb8:	4651      	mov	r1, sl
   28eba:	4658      	mov	r0, fp
   28ebc:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28ec0:	2e00      	cmp	r6, #0
   28ec2:	d1de      	bne.n	28e82 <_vfiprintf_r+0x78e>
   28ec4:	3c10      	subs	r4, #16
   28ec6:	2101      	movs	r1, #1
   28ec8:	4632      	mov	r2, r6
   28eca:	2c10      	cmp	r4, #16
   28ecc:	dce4      	bgt.n	28e98 <_vfiprintf_r+0x7a4>
   28ece:	46b4      	mov	ip, r6
   28ed0:	9e02      	ldr	r6, [sp, #8]
   28ed2:	44a4      	add	ip, r4
   28ed4:	2907      	cmp	r1, #7
   28ed6:	e9c8 5400 	strd	r5, r4, [r8]
   28eda:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28ede:	f300 80e0 	bgt.w	290a2 <_vfiprintf_r+0x9ae>
   28ee2:	f108 0808 	add.w	r8, r8, #8
   28ee6:	3101      	adds	r1, #1
   28ee8:	e60d      	b.n	28b06 <_vfiprintf_r+0x412>
   28eea:	aa10      	add	r2, sp, #64	; 0x40
   28eec:	4651      	mov	r1, sl
   28eee:	4658      	mov	r0, fp
   28ef0:	f7ff fbc6 	bl	28680 <__sprint_r.part.0>
   28ef4:	2800      	cmp	r0, #0
   28ef6:	f43f ae31 	beq.w	28b5c <_vfiprintf_r+0x468>
   28efa:	e596      	b.n	28a2a <_vfiprintf_r+0x336>
   28efc:	f1bc 0f00 	cmp.w	ip, #0
   28f00:	f000 80c6 	beq.w	29090 <_vfiprintf_r+0x99c>
   28f04:	aa10      	add	r2, sp, #64	; 0x40
   28f06:	4651      	mov	r1, sl
   28f08:	4658      	mov	r0, fp
   28f0a:	f7ff fbb9 	bl	28680 <__sprint_r.part.0>
   28f0e:	2800      	cmp	r0, #0
   28f10:	f47f ad8b 	bne.w	28a2a <_vfiprintf_r+0x336>
   28f14:	9a11      	ldr	r2, [sp, #68]	; 0x44
   28f16:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28f1a:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   28f1e:	1c51      	adds	r1, r2, #1
   28f20:	e5c9      	b.n	28ab6 <_vfiprintf_r+0x3c2>
   28f22:	2302      	movs	r3, #2
   28f24:	aa0f      	add	r2, sp, #60	; 0x3c
   28f26:	2101      	movs	r1, #1
   28f28:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28f2c:	469c      	mov	ip, r3
   28f2e:	9213      	str	r2, [sp, #76]	; 0x4c
   28f30:	9314      	str	r3, [sp, #80]	; 0x50
   28f32:	460a      	mov	r2, r1
   28f34:	f108 0808 	add.w	r8, r8, #8
   28f38:	1c51      	adds	r1, r2, #1
   28f3a:	e5da      	b.n	28af2 <_vfiprintf_r+0x3fe>
   28f3c:	2c10      	cmp	r4, #16
   28f3e:	f340 823d 	ble.w	293bc <_vfiprintf_r+0xcc8>
   28f42:	4d27      	ldr	r5, [pc, #156]	; (28fe0 <_vfiprintf_r+0x8ec>)
   28f44:	960d      	str	r6, [sp, #52]	; 0x34
   28f46:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   28f4a:	e00a      	b.n	28f62 <_vfiprintf_r+0x86e>
   28f4c:	f7ff fb98 	bl	28680 <__sprint_r.part.0>
   28f50:	2800      	cmp	r0, #0
   28f52:	f47f ad6a 	bne.w	28a2a <_vfiprintf_r+0x336>
   28f56:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   28f5a:	1c42      	adds	r2, r0, #1
   28f5c:	3c10      	subs	r4, #16
   28f5e:	2c10      	cmp	r4, #16
   28f60:	dd1a      	ble.n	28f98 <_vfiprintf_r+0x8a4>
   28f62:	1c41      	adds	r1, r0, #1
   28f64:	3310      	adds	r3, #16
   28f66:	2610      	movs	r6, #16
   28f68:	1c82      	adds	r2, r0, #2
   28f6a:	2907      	cmp	r1, #7
   28f6c:	f8c8 5000 	str.w	r5, [r8]
   28f70:	f8c8 6004 	str.w	r6, [r8, #4]
   28f74:	4608      	mov	r0, r1
   28f76:	f108 0808 	add.w	r8, r8, #8
   28f7a:	9312      	str	r3, [sp, #72]	; 0x48
   28f7c:	9111      	str	r1, [sp, #68]	; 0x44
   28f7e:	dded      	ble.n	28f5c <_vfiprintf_r+0x868>
   28f80:	aa10      	add	r2, sp, #64	; 0x40
   28f82:	4651      	mov	r1, sl
   28f84:	4658      	mov	r0, fp
   28f86:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28f8a:	2b00      	cmp	r3, #0
   28f8c:	d1de      	bne.n	28f4c <_vfiprintf_r+0x858>
   28f8e:	3c10      	subs	r4, #16
   28f90:	4618      	mov	r0, r3
   28f92:	2201      	movs	r2, #1
   28f94:	2c10      	cmp	r4, #16
   28f96:	dce4      	bgt.n	28f62 <_vfiprintf_r+0x86e>
   28f98:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   28f9a:	eb04 0c03 	add.w	ip, r4, r3
   28f9e:	2a07      	cmp	r2, #7
   28fa0:	e9c8 5400 	strd	r5, r4, [r8]
   28fa4:	e9cd 2c11 	strd	r2, ip, [sp, #68]	; 0x44
   28fa8:	f300 80af 	bgt.w	2910a <_vfiprintf_r+0xa16>
   28fac:	f108 0808 	add.w	r8, r8, #8
   28fb0:	1c51      	adds	r1, r2, #1
   28fb2:	e56d      	b.n	28a90 <_vfiprintf_r+0x39c>
   28fb4:	0770      	lsls	r0, r6, #29
   28fb6:	9311      	str	r3, [sp, #68]	; 0x44
   28fb8:	d54e      	bpl.n	29058 <_vfiprintf_r+0x964>
   28fba:	9a04      	ldr	r2, [sp, #16]
   28fbc:	9901      	ldr	r1, [sp, #4]
   28fbe:	1a54      	subs	r4, r2, r1
   28fc0:	2c00      	cmp	r4, #0
   28fc2:	dd49      	ble.n	29058 <_vfiprintf_r+0x964>
   28fc4:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28fc8:	2c10      	cmp	r4, #16
   28fca:	f340 8200 	ble.w	293ce <_vfiprintf_r+0xcda>
   28fce:	9911      	ldr	r1, [sp, #68]	; 0x44
   28fd0:	2610      	movs	r6, #16
   28fd2:	4d03      	ldr	r5, [pc, #12]	; (28fe0 <_vfiprintf_r+0x8ec>)
   28fd4:	e013      	b.n	28ffe <_vfiprintf_r+0x90a>
   28fd6:	bf00      	nop
   28fd8:	0002f514 	.word	0x0002f514
   28fdc:	0002f5a4 	.word	0x0002f5a4
   28fe0:	0002f594 	.word	0x0002f594
   28fe4:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28fe8:	f7ff fb4a 	bl	28680 <__sprint_r.part.0>
   28fec:	2800      	cmp	r0, #0
   28fee:	f47f ad1c 	bne.w	28a2a <_vfiprintf_r+0x336>
   28ff2:	e9dd 1311 	ldrd	r1, r3, [sp, #68]	; 0x44
   28ff6:	1c48      	adds	r0, r1, #1
   28ff8:	3c10      	subs	r4, #16
   28ffa:	2c10      	cmp	r4, #16
   28ffc:	dd19      	ble.n	29032 <_vfiprintf_r+0x93e>
   28ffe:	1c4a      	adds	r2, r1, #1
   29000:	3310      	adds	r3, #16
   29002:	1c88      	adds	r0, r1, #2
   29004:	f8c8 5000 	str.w	r5, [r8]
   29008:	2a07      	cmp	r2, #7
   2900a:	f8c8 6004 	str.w	r6, [r8, #4]
   2900e:	4611      	mov	r1, r2
   29010:	f108 0808 	add.w	r8, r8, #8
   29014:	9312      	str	r3, [sp, #72]	; 0x48
   29016:	9211      	str	r2, [sp, #68]	; 0x44
   29018:	ddee      	ble.n	28ff8 <_vfiprintf_r+0x904>
   2901a:	aa10      	add	r2, sp, #64	; 0x40
   2901c:	4651      	mov	r1, sl
   2901e:	4658      	mov	r0, fp
   29020:	2b00      	cmp	r3, #0
   29022:	d1df      	bne.n	28fe4 <_vfiprintf_r+0x8f0>
   29024:	3c10      	subs	r4, #16
   29026:	2001      	movs	r0, #1
   29028:	4619      	mov	r1, r3
   2902a:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2902e:	2c10      	cmp	r4, #16
   29030:	dce5      	bgt.n	28ffe <_vfiprintf_r+0x90a>
   29032:	4423      	add	r3, r4
   29034:	2807      	cmp	r0, #7
   29036:	e9c8 5400 	strd	r5, r4, [r8]
   2903a:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
   2903e:	f77f ad82 	ble.w	28b46 <_vfiprintf_r+0x452>
   29042:	b14b      	cbz	r3, 29058 <_vfiprintf_r+0x964>
   29044:	aa10      	add	r2, sp, #64	; 0x40
   29046:	4651      	mov	r1, sl
   29048:	4658      	mov	r0, fp
   2904a:	f7ff fb19 	bl	28680 <__sprint_r.part.0>
   2904e:	2800      	cmp	r0, #0
   29050:	f47f aceb 	bne.w	28a2a <_vfiprintf_r+0x336>
   29054:	9b12      	ldr	r3, [sp, #72]	; 0x48
   29056:	e576      	b.n	28b46 <_vfiprintf_r+0x452>
   29058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2905c:	9901      	ldr	r1, [sp, #4]
   2905e:	428a      	cmp	r2, r1
   29060:	bfac      	ite	ge
   29062:	189b      	addge	r3, r3, r2
   29064:	185b      	addlt	r3, r3, r1
   29066:	9305      	str	r3, [sp, #20]
   29068:	e578      	b.n	28b5c <_vfiprintf_r+0x468>
   2906a:	af3c      	add	r7, sp, #240	; 0xf0
   2906c:	9202      	str	r2, [sp, #8]
   2906e:	9203      	str	r2, [sp, #12]
   29070:	e4bc      	b.n	289ec <_vfiprintf_r+0x2f8>
   29072:	9601      	str	r6, [sp, #4]
   29074:	2d00      	cmp	r5, #0
   29076:	bf08      	it	eq
   29078:	2c0a      	cmpeq	r4, #10
   2907a:	f080 80e8 	bcs.w	2924e <_vfiprintf_r+0xb5a>
   2907e:	3430      	adds	r4, #48	; 0x30
   29080:	2301      	movs	r3, #1
   29082:	9e01      	ldr	r6, [sp, #4]
   29084:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   29088:	9303      	str	r3, [sp, #12]
   2908a:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
   2908e:	e4ad      	b.n	289ec <_vfiprintf_r+0x2f8>
   29090:	9b07      	ldr	r3, [sp, #28]
   29092:	2b00      	cmp	r3, #0
   29094:	f040 8089 	bne.w	291aa <_vfiprintf_r+0xab6>
   29098:	2101      	movs	r1, #1
   2909a:	4662      	mov	r2, ip
   2909c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   290a0:	e527      	b.n	28af2 <_vfiprintf_r+0x3fe>
   290a2:	f1bc 0f00 	cmp.w	ip, #0
   290a6:	f43f ae4d 	beq.w	28d44 <_vfiprintf_r+0x650>
   290aa:	aa10      	add	r2, sp, #64	; 0x40
   290ac:	4651      	mov	r1, sl
   290ae:	4658      	mov	r0, fp
   290b0:	f7ff fae6 	bl	28680 <__sprint_r.part.0>
   290b4:	2800      	cmp	r0, #0
   290b6:	f47f acb8 	bne.w	28a2a <_vfiprintf_r+0x336>
   290ba:	9911      	ldr	r1, [sp, #68]	; 0x44
   290bc:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   290c0:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   290c4:	3101      	adds	r1, #1
   290c6:	e51e      	b.n	28b06 <_vfiprintf_r+0x412>
   290c8:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   290cc:	9211      	str	r2, [sp, #68]	; 0x44
   290ce:	f7ff bb71 	b.w	287b4 <_vfiprintf_r+0xc0>
   290d2:	af3c      	add	r7, sp, #240	; 0xf0
   290d4:	9302      	str	r3, [sp, #8]
   290d6:	e489      	b.n	289ec <_vfiprintf_r+0x2f8>
   290d8:	9b01      	ldr	r3, [sp, #4]
   290da:	06df      	lsls	r7, r3, #27
   290dc:	d45c      	bmi.n	29198 <_vfiprintf_r+0xaa4>
   290de:	9b01      	ldr	r3, [sp, #4]
   290e0:	065e      	lsls	r6, r3, #25
   290e2:	f140 8116 	bpl.w	29312 <_vfiprintf_r+0xc1e>
   290e6:	9c06      	ldr	r4, [sp, #24]
   290e8:	2301      	movs	r3, #1
   290ea:	2500      	movs	r5, #0
   290ec:	f854 2b04 	ldr.w	r2, [r4], #4
   290f0:	9406      	str	r4, [sp, #24]
   290f2:	b294      	uxth	r4, r2
   290f4:	e454      	b.n	289a0 <_vfiprintf_r+0x2ac>
   290f6:	222d      	movs	r2, #45	; 0x2d
   290f8:	4264      	negs	r4, r4
   290fa:	f04f 0301 	mov.w	r3, #1
   290fe:	9601      	str	r6, [sp, #4]
   29100:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   29104:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   29108:	e44e      	b.n	289a8 <_vfiprintf_r+0x2b4>
   2910a:	f1bc 0f00 	cmp.w	ip, #0
   2910e:	d07f      	beq.n	29210 <_vfiprintf_r+0xb1c>
   29110:	aa10      	add	r2, sp, #64	; 0x40
   29112:	4651      	mov	r1, sl
   29114:	4658      	mov	r0, fp
   29116:	f7ff fab3 	bl	28680 <__sprint_r.part.0>
   2911a:	2800      	cmp	r0, #0
   2911c:	f47f ac85 	bne.w	28a2a <_vfiprintf_r+0x336>
   29120:	9a11      	ldr	r2, [sp, #68]	; 0x44
   29122:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29126:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   2912a:	1c51      	adds	r1, r2, #1
   2912c:	e4b0      	b.n	28a90 <_vfiprintf_r+0x39c>
   2912e:	9306      	str	r3, [sp, #24]
   29130:	f899 3000 	ldrb.w	r3, [r9]
   29134:	f7ff bb52 	b.w	287dc <_vfiprintf_r+0xe8>
   29138:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   2913c:	f001 fc18 	bl	2a970 <__retarget_lock_acquire_recursive>
   29140:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   29144:	b28a      	uxth	r2, r1
   29146:	f7ff baef 	b.w	28728 <_vfiprintf_r+0x34>
   2914a:	f108 0808 	add.w	r8, r8, #8
   2914e:	1c41      	adds	r1, r0, #1
   29150:	4602      	mov	r2, r0
   29152:	e4d2      	b.n	28afa <_vfiprintf_r+0x406>
   29154:	05b1      	lsls	r1, r6, #22
   29156:	f100 8103 	bmi.w	29360 <_vfiprintf_r+0xc6c>
   2915a:	17e5      	asrs	r5, r4, #31
   2915c:	9306      	str	r3, [sp, #24]
   2915e:	4622      	mov	r2, r4
   29160:	462b      	mov	r3, r5
   29162:	f7ff bbca 	b.w	288fa <_vfiprintf_r+0x206>
   29166:	05b2      	lsls	r2, r6, #22
   29168:	f100 8101 	bmi.w	2936e <_vfiprintf_r+0xc7a>
   2916c:	461c      	mov	r4, r3
   2916e:	2500      	movs	r5, #0
   29170:	e412      	b.n	28998 <_vfiprintf_r+0x2a4>
   29172:	2220      	movs	r2, #32
   29174:	f899 3000 	ldrb.w	r3, [r9]
   29178:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   2917c:	f7ff bb2e 	b.w	287dc <_vfiprintf_r+0xe8>
   29180:	9b05      	ldr	r3, [sp, #20]
   29182:	9c06      	ldr	r4, [sp, #24]
   29184:	17dd      	asrs	r5, r3, #31
   29186:	461a      	mov	r2, r3
   29188:	f854 1b04 	ldr.w	r1, [r4], #4
   2918c:	462b      	mov	r3, r5
   2918e:	9406      	str	r4, [sp, #24]
   29190:	e9c1 2300 	strd	r2, r3, [r1]
   29194:	f7ff baf0 	b.w	28778 <_vfiprintf_r+0x84>
   29198:	9c06      	ldr	r4, [sp, #24]
   2919a:	2301      	movs	r3, #1
   2919c:	2500      	movs	r5, #0
   2919e:	f854 2b04 	ldr.w	r2, [r4], #4
   291a2:	9406      	str	r4, [sp, #24]
   291a4:	4614      	mov	r4, r2
   291a6:	f7ff bbfb 	b.w	289a0 <_vfiprintf_r+0x2ac>
   291aa:	2302      	movs	r3, #2
   291ac:	a90f      	add	r1, sp, #60	; 0x3c
   291ae:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   291b2:	469c      	mov	ip, r3
   291b4:	9113      	str	r1, [sp, #76]	; 0x4c
   291b6:	9314      	str	r3, [sp, #80]	; 0x50
   291b8:	e6bc      	b.n	28f34 <_vfiprintf_r+0x840>
   291ba:	9601      	str	r6, [sp, #4]
   291bc:	e591      	b.n	28ce2 <_vfiprintf_r+0x5ee>
   291be:	4a9e      	ldr	r2, [pc, #632]	; (29438 <_vfiprintf_r+0xd44>)
   291c0:	9209      	str	r2, [sp, #36]	; 0x24
   291c2:	06b5      	lsls	r5, r6, #26
   291c4:	9c06      	ldr	r4, [sp, #24]
   291c6:	d532      	bpl.n	2922e <_vfiprintf_r+0xb3a>
   291c8:	3407      	adds	r4, #7
   291ca:	f024 0207 	bic.w	r2, r4, #7
   291ce:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   291d2:	9206      	str	r2, [sp, #24]
   291d4:	ea54 0205 	orrs.w	r2, r4, r5
   291d8:	d008      	beq.n	291ec <_vfiprintf_r+0xaf8>
   291da:	07f7      	lsls	r7, r6, #31
   291dc:	d506      	bpl.n	291ec <_vfiprintf_r+0xaf8>
   291de:	2230      	movs	r2, #48	; 0x30
   291e0:	f046 0602 	orr.w	r6, r6, #2
   291e4:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   291e8:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   291ec:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   291f0:	9301      	str	r3, [sp, #4]
   291f2:	2302      	movs	r3, #2
   291f4:	f7ff bbd4 	b.w	289a0 <_vfiprintf_r+0x2ac>
   291f8:	4a90      	ldr	r2, [pc, #576]	; (2943c <_vfiprintf_r+0xd48>)
   291fa:	9209      	str	r2, [sp, #36]	; 0x24
   291fc:	e7e1      	b.n	291c2 <_vfiprintf_r+0xace>
   291fe:	4638      	mov	r0, r7
   29200:	9406      	str	r4, [sp, #24]
   29202:	f7fd faef 	bl	267e4 <strlen>
   29206:	2300      	movs	r3, #0
   29208:	e9cd 3002 	strd	r3, r0, [sp, #8]
   2920c:	f7ff bbee 	b.w	289ec <_vfiprintf_r+0x2f8>
   29210:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   29214:	2a00      	cmp	r2, #0
   29216:	f000 8091 	beq.w	2933c <_vfiprintf_r+0xc48>
   2921a:	2201      	movs	r2, #1
   2921c:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   29220:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29224:	4611      	mov	r1, r2
   29226:	4694      	mov	ip, r2
   29228:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   2922c:	e43f      	b.n	28aae <_vfiprintf_r+0x3ba>
   2922e:	f854 2b04 	ldr.w	r2, [r4], #4
   29232:	9406      	str	r4, [sp, #24]
   29234:	06f4      	lsls	r4, r6, #27
   29236:	d407      	bmi.n	29248 <_vfiprintf_r+0xb54>
   29238:	0670      	lsls	r0, r6, #25
   2923a:	d502      	bpl.n	29242 <_vfiprintf_r+0xb4e>
   2923c:	b294      	uxth	r4, r2
   2923e:	2500      	movs	r5, #0
   29240:	e7c8      	b.n	291d4 <_vfiprintf_r+0xae0>
   29242:	05b1      	lsls	r1, r6, #22
   29244:	f100 8097 	bmi.w	29376 <_vfiprintf_r+0xc82>
   29248:	4614      	mov	r4, r2
   2924a:	2500      	movs	r5, #0
   2924c:	e7c2      	b.n	291d4 <_vfiprintf_r+0xae0>
   2924e:	9b01      	ldr	r3, [sp, #4]
   29250:	2600      	movs	r6, #0
   29252:	f8cd 800c 	str.w	r8, [sp, #12]
   29256:	af3c      	add	r7, sp, #240	; 0xf0
   29258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   2925c:	f8cd 901c 	str.w	r9, [sp, #28]
   29260:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   29264:	4698      	mov	r8, r3
   29266:	e007      	b.n	29278 <_vfiprintf_r+0xb84>
   29268:	f7e3 faf6 	bl	c858 <__aeabi_uldivmod>
   2926c:	2d00      	cmp	r5, #0
   2926e:	bf08      	it	eq
   29270:	2c0a      	cmpeq	r4, #10
   29272:	d320      	bcc.n	292b6 <_vfiprintf_r+0xbc2>
   29274:	4604      	mov	r4, r0
   29276:	460d      	mov	r5, r1
   29278:	220a      	movs	r2, #10
   2927a:	2300      	movs	r3, #0
   2927c:	4620      	mov	r0, r4
   2927e:	4629      	mov	r1, r5
   29280:	f7e3 faea 	bl	c858 <__aeabi_uldivmod>
   29284:	4694      	mov	ip, r2
   29286:	4620      	mov	r0, r4
   29288:	4629      	mov	r1, r5
   2928a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   2928e:	220a      	movs	r2, #10
   29290:	2300      	movs	r3, #0
   29292:	3601      	adds	r6, #1
   29294:	f807 cc01 	strb.w	ip, [r7, #-1]
   29298:	3f01      	subs	r7, #1
   2929a:	f1b8 0f00 	cmp.w	r8, #0
   2929e:	d0e3      	beq.n	29268 <_vfiprintf_r+0xb74>
   292a0:	f899 c000 	ldrb.w	ip, [r9]
   292a4:	45b4      	cmp	ip, r6
   292a6:	d1df      	bne.n	29268 <_vfiprintf_r+0xb74>
   292a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   292ac:	d0dc      	beq.n	29268 <_vfiprintf_r+0xb74>
   292ae:	429d      	cmp	r5, r3
   292b0:	bf08      	it	eq
   292b2:	4294      	cmpeq	r4, r2
   292b4:	d268      	bcs.n	29388 <_vfiprintf_r+0xc94>
   292b6:	ab3c      	add	r3, sp, #240	; 0xf0
   292b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
   292bc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   292c0:	1bdb      	subs	r3, r3, r7
   292c2:	f8dd 901c 	ldr.w	r9, [sp, #28]
   292c6:	9e01      	ldr	r6, [sp, #4]
   292c8:	9303      	str	r3, [sp, #12]
   292ca:	f7ff bb8f 	b.w	289ec <_vfiprintf_r+0x2f8>
   292ce:	f899 3001 	ldrb.w	r3, [r9, #1]
   292d2:	f446 7600 	orr.w	r6, r6, #512	; 0x200
   292d6:	f109 0901 	add.w	r9, r9, #1
   292da:	f7ff ba7f 	b.w	287dc <_vfiprintf_r+0xe8>
   292de:	f899 3001 	ldrb.w	r3, [r9, #1]
   292e2:	f046 0620 	orr.w	r6, r6, #32
   292e6:	f109 0901 	add.w	r9, r9, #1
   292ea:	f7ff ba77 	b.w	287dc <_vfiprintf_r+0xe8>
   292ee:	9c06      	ldr	r4, [sp, #24]
   292f0:	9a05      	ldr	r2, [sp, #20]
   292f2:	f854 3b04 	ldr.w	r3, [r4], #4
   292f6:	601a      	str	r2, [r3, #0]
   292f8:	9406      	str	r4, [sp, #24]
   292fa:	f7ff ba3d 	b.w	28778 <_vfiprintf_r+0x84>
   292fe:	9b02      	ldr	r3, [sp, #8]
   29300:	4f4f      	ldr	r7, [pc, #316]	; (29440 <_vfiprintf_r+0xd4c>)
   29302:	2b06      	cmp	r3, #6
   29304:	9406      	str	r4, [sp, #24]
   29306:	bf28      	it	cs
   29308:	2306      	movcs	r3, #6
   2930a:	9303      	str	r3, [sp, #12]
   2930c:	9301      	str	r3, [sp, #4]
   2930e:	f7ff bba9 	b.w	28a64 <_vfiprintf_r+0x370>
   29312:	9c06      	ldr	r4, [sp, #24]
   29314:	2500      	movs	r5, #0
   29316:	9b01      	ldr	r3, [sp, #4]
   29318:	f854 2b04 	ldr.w	r2, [r4], #4
   2931c:	f413 7f00 	tst.w	r3, #512	; 0x200
   29320:	f04f 0301 	mov.w	r3, #1
   29324:	9406      	str	r4, [sp, #24]
   29326:	bf14      	ite	ne
   29328:	b2d4      	uxtbne	r4, r2
   2932a:	4614      	moveq	r4, r2
   2932c:	f7ff bb38 	b.w	289a0 <_vfiprintf_r+0x2ac>
   29330:	2101      	movs	r1, #1
   29332:	4662      	mov	r2, ip
   29334:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29338:	f7ff bbdf 	b.w	28afa <_vfiprintf_r+0x406>
   2933c:	9b07      	ldr	r3, [sp, #28]
   2933e:	2b00      	cmp	r3, #0
   29340:	f47f adef 	bne.w	28f22 <_vfiprintf_r+0x82e>
   29344:	4662      	mov	r2, ip
   29346:	2101      	movs	r1, #1
   29348:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2934c:	f7ff bbd5 	b.w	28afa <_vfiprintf_r+0x406>
   29350:	9c06      	ldr	r4, [sp, #24]
   29352:	9a05      	ldr	r2, [sp, #20]
   29354:	f854 3b04 	ldr.w	r3, [r4], #4
   29358:	801a      	strh	r2, [r3, #0]
   2935a:	9406      	str	r4, [sp, #24]
   2935c:	f7ff ba0c 	b.w	28778 <_vfiprintf_r+0x84>
   29360:	b264      	sxtb	r4, r4
   29362:	9306      	str	r3, [sp, #24]
   29364:	17e5      	asrs	r5, r4, #31
   29366:	4622      	mov	r2, r4
   29368:	462b      	mov	r3, r5
   2936a:	f7ff bac6 	b.w	288fa <_vfiprintf_r+0x206>
   2936e:	b2dc      	uxtb	r4, r3
   29370:	2500      	movs	r5, #0
   29372:	f7ff bb11 	b.w	28998 <_vfiprintf_r+0x2a4>
   29376:	b2d4      	uxtb	r4, r2
   29378:	2500      	movs	r5, #0
   2937a:	e72b      	b.n	291d4 <_vfiprintf_r+0xae0>
   2937c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   29380:	f001 faf8 	bl	2a974 <__retarget_lock_release_recursive>
   29384:	f7ff baee 	b.w	28964 <_vfiprintf_r+0x270>
   29388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2938a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2938c:	1aff      	subs	r7, r7, r3
   2938e:	461a      	mov	r2, r3
   29390:	4638      	mov	r0, r7
   29392:	f7fd fa8f 	bl	268b4 <strncpy>
   29396:	f899 3001 	ldrb.w	r3, [r9, #1]
   2939a:	b10b      	cbz	r3, 293a0 <_vfiprintf_r+0xcac>
   2939c:	f109 0901 	add.w	r9, r9, #1
   293a0:	4620      	mov	r0, r4
   293a2:	4629      	mov	r1, r5
   293a4:	220a      	movs	r2, #10
   293a6:	2300      	movs	r3, #0
   293a8:	2600      	movs	r6, #0
   293aa:	f7e3 fa55 	bl	c858 <__aeabi_uldivmod>
   293ae:	e761      	b.n	29274 <_vfiprintf_r+0xb80>
   293b0:	9b02      	ldr	r3, [sp, #8]
   293b2:	9406      	str	r4, [sp, #24]
   293b4:	9303      	str	r3, [sp, #12]
   293b6:	9002      	str	r0, [sp, #8]
   293b8:	f7ff bb18 	b.w	289ec <_vfiprintf_r+0x2f8>
   293bc:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	; 0x44
   293c0:	4d20      	ldr	r5, [pc, #128]	; (29444 <_vfiprintf_r+0xd50>)
   293c2:	3201      	adds	r2, #1
   293c4:	e5e9      	b.n	28f9a <_vfiprintf_r+0x8a6>
   293c6:	2200      	movs	r2, #0
   293c8:	9202      	str	r2, [sp, #8]
   293ca:	f7ff ba09 	b.w	287e0 <_vfiprintf_r+0xec>
   293ce:	9811      	ldr	r0, [sp, #68]	; 0x44
   293d0:	4d1c      	ldr	r5, [pc, #112]	; (29444 <_vfiprintf_r+0xd50>)
   293d2:	3001      	adds	r0, #1
   293d4:	e62d      	b.n	29032 <_vfiprintf_r+0x93e>
   293d6:	ee18 0a10 	vmov	r0, s16
   293da:	aa10      	add	r2, sp, #64	; 0x40
   293dc:	4651      	mov	r1, sl
   293de:	f7ff f94f 	bl	28680 <__sprint_r.part.0>
   293e2:	2800      	cmp	r0, #0
   293e4:	f43f ab1f 	beq.w	28a26 <_vfiprintf_r+0x332>
   293e8:	f7ff bb1f 	b.w	28a2a <_vfiprintf_r+0x336>
   293ec:	f04f 33ff 	mov.w	r3, #4294967295
   293f0:	9305      	str	r3, [sp, #20]
   293f2:	f7ff bb25 	b.w	28a40 <_vfiprintf_r+0x34c>
   293f6:	4608      	mov	r0, r1
   293f8:	4d13      	ldr	r5, [pc, #76]	; (29448 <_vfiprintf_r+0xd54>)
   293fa:	e51c      	b.n	28e36 <_vfiprintf_r+0x742>
   293fc:	9a06      	ldr	r2, [sp, #24]
   293fe:	f899 3001 	ldrb.w	r3, [r9, #1]
   29402:	4689      	mov	r9, r1
   29404:	f852 1b04 	ldr.w	r1, [r2], #4
   29408:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   2940c:	9206      	str	r2, [sp, #24]
   2940e:	9102      	str	r1, [sp, #8]
   29410:	f7ff b9e4 	b.w	287dc <_vfiprintf_r+0xe8>
   29414:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   29418:	07dc      	lsls	r4, r3, #31
   2941a:	d4e7      	bmi.n	293ec <_vfiprintf_r+0xcf8>
   2941c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   29420:	0598      	lsls	r0, r3, #22
   29422:	d4e3      	bmi.n	293ec <_vfiprintf_r+0xcf8>
   29424:	f04f 33ff 	mov.w	r3, #4294967295
   29428:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   2942c:	9305      	str	r3, [sp, #20]
   2942e:	f001 faa1 	bl	2a974 <__retarget_lock_release_recursive>
   29432:	f7ff bb05 	b.w	28a40 <_vfiprintf_r+0x34c>
   29436:	bf00      	nop
   29438:	0002f528 	.word	0x0002f528
   2943c:	0002f514 	.word	0x0002f514
   29440:	0002f53c 	.word	0x0002f53c
   29444:	0002f594 	.word	0x0002f594
   29448:	0002f5a4 	.word	0x0002f5a4

0002944c <__sbprintf>:
   2944c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2944e:	460c      	mov	r4, r1
   29450:	8989      	ldrh	r1, [r1, #12]
   29452:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
   29456:	2700      	movs	r7, #0
   29458:	f021 0102 	bic.w	r1, r1, #2
   2945c:	4606      	mov	r6, r0
   2945e:	ad1c      	add	r5, sp, #112	; 0x70
   29460:	9708      	str	r7, [sp, #32]
   29462:	f8ad 1014 	strh.w	r1, [sp, #20]
   29466:	f44f 6780 	mov.w	r7, #1024	; 0x400
   2946a:	89e1      	ldrh	r1, [r4, #14]
   2946c:	a818      	add	r0, sp, #96	; 0x60
   2946e:	9502      	str	r5, [sp, #8]
   29470:	f8ad 1016 	strh.w	r1, [sp, #22]
   29474:	69e1      	ldr	r1, [r4, #28]
   29476:	9506      	str	r5, [sp, #24]
   29478:	9109      	str	r1, [sp, #36]	; 0x24
   2947a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2947c:	9704      	str	r7, [sp, #16]
   2947e:	910b      	str	r1, [sp, #44]	; 0x2c
   29480:	9707      	str	r7, [sp, #28]
   29482:	e9cd 3200 	strd	r3, r2, [sp]
   29486:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29488:	931b      	str	r3, [sp, #108]	; 0x6c
   2948a:	f001 fa6d 	bl	2a968 <__retarget_lock_init_recursive>
   2948e:	a902      	add	r1, sp, #8
   29490:	4630      	mov	r0, r6
   29492:	e9dd 3200 	ldrd	r3, r2, [sp]
   29496:	f7ff f92d 	bl	286f4 <_vfiprintf_r>
   2949a:	1e05      	subs	r5, r0, #0
   2949c:	db07      	blt.n	294ae <__sbprintf+0x62>
   2949e:	4630      	mov	r0, r6
   294a0:	a902      	add	r1, sp, #8
   294a2:	f000 fa51 	bl	29948 <_fflush_r>
   294a6:	2800      	cmp	r0, #0
   294a8:	bf18      	it	ne
   294aa:	f04f 35ff 	movne.w	r5, #4294967295
   294ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   294b2:	065b      	lsls	r3, r3, #25
   294b4:	d503      	bpl.n	294be <__sbprintf+0x72>
   294b6:	89a3      	ldrh	r3, [r4, #12]
   294b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   294bc:	81a3      	strh	r3, [r4, #12]
   294be:	9818      	ldr	r0, [sp, #96]	; 0x60
   294c0:	f001 fa54 	bl	2a96c <__retarget_lock_close_recursive>
   294c4:	4628      	mov	r0, r5
   294c6:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
   294ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000294cc <_vsnprintf_r>:
   294cc:	b570      	push	{r4, r5, r6, lr}
   294ce:	1e14      	subs	r4, r2, #0
   294d0:	b09a      	sub	sp, #104	; 0x68
   294d2:	4605      	mov	r5, r0
   294d4:	db2c      	blt.n	29530 <_vsnprintf_r+0x64>
   294d6:	f44f 7202 	mov.w	r2, #520	; 0x208
   294da:	9100      	str	r1, [sp, #0]
   294dc:	9104      	str	r1, [sp, #16]
   294de:	f8ad 200c 	strh.w	r2, [sp, #12]
   294e2:	d014      	beq.n	2950e <_vsnprintf_r+0x42>
   294e4:	3c01      	subs	r4, #1
   294e6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   294ea:	461a      	mov	r2, r3
   294ec:	4669      	mov	r1, sp
   294ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   294f0:	9402      	str	r4, [sp, #8]
   294f2:	9405      	str	r4, [sp, #20]
   294f4:	f8ad 600e 	strh.w	r6, [sp, #14]
   294f8:	f7e5 f9de 	bl	e8b8 <_svfprintf_r>
   294fc:	1c42      	adds	r2, r0, #1
   294fe:	da01      	bge.n	29504 <_vsnprintf_r+0x38>
   29500:	238b      	movs	r3, #139	; 0x8b
   29502:	602b      	str	r3, [r5, #0]
   29504:	9b00      	ldr	r3, [sp, #0]
   29506:	2200      	movs	r2, #0
   29508:	701a      	strb	r2, [r3, #0]
   2950a:	b01a      	add	sp, #104	; 0x68
   2950c:	bd70      	pop	{r4, r5, r6, pc}
   2950e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   29512:	461a      	mov	r2, r3
   29514:	4669      	mov	r1, sp
   29516:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   29518:	9402      	str	r4, [sp, #8]
   2951a:	9405      	str	r4, [sp, #20]
   2951c:	f8ad 600e 	strh.w	r6, [sp, #14]
   29520:	f7e5 f9ca 	bl	e8b8 <_svfprintf_r>
   29524:	1c43      	adds	r3, r0, #1
   29526:	da01      	bge.n	2952c <_vsnprintf_r+0x60>
   29528:	238b      	movs	r3, #139	; 0x8b
   2952a:	602b      	str	r3, [r5, #0]
   2952c:	b01a      	add	sp, #104	; 0x68
   2952e:	bd70      	pop	{r4, r5, r6, pc}
   29530:	238b      	movs	r3, #139	; 0x8b
   29532:	f04f 30ff 	mov.w	r0, #4294967295
   29536:	602b      	str	r3, [r5, #0]
   29538:	e7f8      	b.n	2952c <_vsnprintf_r+0x60>
   2953a:	bf00      	nop

0002953c <vsnprintf>:
   2953c:	b570      	push	{r4, r5, r6, lr}
   2953e:	460e      	mov	r6, r1
   29540:	b082      	sub	sp, #8
   29542:	4615      	mov	r5, r2
   29544:	4c04      	ldr	r4, [pc, #16]	; (29558 <vsnprintf+0x1c>)
   29546:	4601      	mov	r1, r0
   29548:	9300      	str	r3, [sp, #0]
   2954a:	4632      	mov	r2, r6
   2954c:	462b      	mov	r3, r5
   2954e:	6820      	ldr	r0, [r4, #0]
   29550:	f7ff ffbc 	bl	294cc <_vsnprintf_r>
   29554:	b002      	add	sp, #8
   29556:	bd70      	pop	{r4, r5, r6, pc}
   29558:	200204d8 	.word	0x200204d8

0002955c <_vsprintf_r>:
   2955c:	b570      	push	{r4, r5, r6, lr}
   2955e:	b09a      	sub	sp, #104	; 0x68
   29560:	460c      	mov	r4, r1
   29562:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   29566:	4e07      	ldr	r6, [pc, #28]	; (29584 <_vsprintf_r+0x28>)
   29568:	4669      	mov	r1, sp
   2956a:	9400      	str	r4, [sp, #0]
   2956c:	9505      	str	r5, [sp, #20]
   2956e:	9502      	str	r5, [sp, #8]
   29570:	e9cd 6403 	strd	r6, r4, [sp, #12]
   29574:	f7e5 f9a0 	bl	e8b8 <_svfprintf_r>
   29578:	9b00      	ldr	r3, [sp, #0]
   2957a:	2200      	movs	r2, #0
   2957c:	701a      	strb	r2, [r3, #0]
   2957e:	b01a      	add	sp, #104	; 0x68
   29580:	bd70      	pop	{r4, r5, r6, pc}
   29582:	bf00      	nop
   29584:	ffff0208 	.word	0xffff0208

00029588 <vsprintf>:
   29588:	b430      	push	{r4, r5}
   2958a:	460d      	mov	r5, r1
   2958c:	4c03      	ldr	r4, [pc, #12]	; (2959c <vsprintf+0x14>)
   2958e:	4613      	mov	r3, r2
   29590:	4601      	mov	r1, r0
   29592:	462a      	mov	r2, r5
   29594:	6820      	ldr	r0, [r4, #0]
   29596:	bc30      	pop	{r4, r5}
   29598:	f7ff bfe0 	b.w	2955c <_vsprintf_r>
   2959c:	200204d8 	.word	0x200204d8

000295a0 <_write_r>:
   295a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   295a2:	460f      	mov	r7, r1
   295a4:	4d08      	ldr	r5, [pc, #32]	; (295c8 <_write_r+0x28>)
   295a6:	2600      	movs	r6, #0
   295a8:	4611      	mov	r1, r2
   295aa:	4604      	mov	r4, r0
   295ac:	461a      	mov	r2, r3
   295ae:	4638      	mov	r0, r7
   295b0:	602e      	str	r6, [r5, #0]
   295b2:	f003 fb5e 	bl	2cc72 <_write>
   295b6:	1c43      	adds	r3, r0, #1
   295b8:	d000      	beq.n	295bc <_write_r+0x1c>
   295ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   295bc:	682b      	ldr	r3, [r5, #0]
   295be:	2b00      	cmp	r3, #0
   295c0:	d0fb      	beq.n	295ba <_write_r+0x1a>
   295c2:	6023      	str	r3, [r4, #0]
   295c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   295c6:	bf00      	nop
   295c8:	20026424 	.word	0x20026424

000295cc <__swsetup_r>:
   295cc:	b538      	push	{r3, r4, r5, lr}
   295ce:	4b32      	ldr	r3, [pc, #200]	; (29698 <__swsetup_r+0xcc>)
   295d0:	4605      	mov	r5, r0
   295d2:	460c      	mov	r4, r1
   295d4:	681b      	ldr	r3, [r3, #0]
   295d6:	b113      	cbz	r3, 295de <__swsetup_r+0x12>
   295d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   295da:	2a00      	cmp	r2, #0
   295dc:	d036      	beq.n	2964c <__swsetup_r+0x80>
   295de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   295e2:	0718      	lsls	r0, r3, #28
   295e4:	b29a      	uxth	r2, r3
   295e6:	d50c      	bpl.n	29602 <__swsetup_r+0x36>
   295e8:	6921      	ldr	r1, [r4, #16]
   295ea:	b1a9      	cbz	r1, 29618 <__swsetup_r+0x4c>
   295ec:	f012 0001 	ands.w	r0, r2, #1
   295f0:	d022      	beq.n	29638 <__swsetup_r+0x6c>
   295f2:	6960      	ldr	r0, [r4, #20]
   295f4:	2500      	movs	r5, #0
   295f6:	4240      	negs	r0, r0
   295f8:	60a5      	str	r5, [r4, #8]
   295fa:	61a0      	str	r0, [r4, #24]
   295fc:	b311      	cbz	r1, 29644 <__swsetup_r+0x78>
   295fe:	2000      	movs	r0, #0
   29600:	bd38      	pop	{r3, r4, r5, pc}
   29602:	06d1      	lsls	r1, r2, #27
   29604:	d53a      	bpl.n	2967c <__swsetup_r+0xb0>
   29606:	0752      	lsls	r2, r2, #29
   29608:	d424      	bmi.n	29654 <__swsetup_r+0x88>
   2960a:	6921      	ldr	r1, [r4, #16]
   2960c:	f043 0308 	orr.w	r3, r3, #8
   29610:	b29a      	uxth	r2, r3
   29612:	81a3      	strh	r3, [r4, #12]
   29614:	2900      	cmp	r1, #0
   29616:	d1e9      	bne.n	295ec <__swsetup_r+0x20>
   29618:	f402 7020 	and.w	r0, r2, #640	; 0x280
   2961c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   29620:	d0e4      	beq.n	295ec <__swsetup_r+0x20>
   29622:	4628      	mov	r0, r5
   29624:	4621      	mov	r1, r4
   29626:	f001 f9eb 	bl	2aa00 <__smakebuf_r>
   2962a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2962e:	6921      	ldr	r1, [r4, #16]
   29630:	b29a      	uxth	r2, r3
   29632:	f012 0001 	ands.w	r0, r2, #1
   29636:	d1dc      	bne.n	295f2 <__swsetup_r+0x26>
   29638:	0795      	lsls	r5, r2, #30
   2963a:	bf58      	it	pl
   2963c:	6960      	ldrpl	r0, [r4, #20]
   2963e:	60a0      	str	r0, [r4, #8]
   29640:	2900      	cmp	r1, #0
   29642:	d1dc      	bne.n	295fe <__swsetup_r+0x32>
   29644:	0612      	lsls	r2, r2, #24
   29646:	d421      	bmi.n	2968c <__swsetup_r+0xc0>
   29648:	4608      	mov	r0, r1
   2964a:	bd38      	pop	{r3, r4, r5, pc}
   2964c:	4618      	mov	r0, r3
   2964e:	f000 f9d9 	bl	29a04 <__sinit>
   29652:	e7c4      	b.n	295de <__swsetup_r+0x12>
   29654:	6b21      	ldr	r1, [r4, #48]	; 0x30
   29656:	b151      	cbz	r1, 2966e <__swsetup_r+0xa2>
   29658:	f104 0240 	add.w	r2, r4, #64	; 0x40
   2965c:	4291      	cmp	r1, r2
   2965e:	d004      	beq.n	2966a <__swsetup_r+0x9e>
   29660:	4628      	mov	r0, r5
   29662:	f000 fadf 	bl	29c24 <_free_r>
   29666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2966a:	2200      	movs	r2, #0
   2966c:	6322      	str	r2, [r4, #48]	; 0x30
   2966e:	2200      	movs	r2, #0
   29670:	6921      	ldr	r1, [r4, #16]
   29672:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   29676:	e9c4 1200 	strd	r1, r2, [r4]
   2967a:	e7c7      	b.n	2960c <__swsetup_r+0x40>
   2967c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29680:	2209      	movs	r2, #9
   29682:	f04f 30ff 	mov.w	r0, #4294967295
   29686:	602a      	str	r2, [r5, #0]
   29688:	81a3      	strh	r3, [r4, #12]
   2968a:	bd38      	pop	{r3, r4, r5, pc}
   2968c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29690:	f04f 30ff 	mov.w	r0, #4294967295
   29694:	81a3      	strh	r3, [r4, #12]
   29696:	bd38      	pop	{r3, r4, r5, pc}
   29698:	200204d8 	.word	0x200204d8

0002969c <abort>:
   2969c:	2006      	movs	r0, #6
   2969e:	b508      	push	{r3, lr}
   296a0:	f002 f80c 	bl	2b6bc <raise>
   296a4:	2001      	movs	r0, #1
   296a6:	f7eb fec7 	bl	15438 <_exit>
   296aa:	bf00      	nop

000296ac <_close_r>:
   296ac:	b538      	push	{r3, r4, r5, lr}
   296ae:	2200      	movs	r2, #0
   296b0:	4d06      	ldr	r5, [pc, #24]	; (296cc <_close_r+0x20>)
   296b2:	4604      	mov	r4, r0
   296b4:	4608      	mov	r0, r1
   296b6:	602a      	str	r2, [r5, #0]
   296b8:	f003 fadf 	bl	2cc7a <_close>
   296bc:	1c43      	adds	r3, r0, #1
   296be:	d000      	beq.n	296c2 <_close_r+0x16>
   296c0:	bd38      	pop	{r3, r4, r5, pc}
   296c2:	682b      	ldr	r3, [r5, #0]
   296c4:	2b00      	cmp	r3, #0
   296c6:	d0fb      	beq.n	296c0 <_close_r+0x14>
   296c8:	6023      	str	r3, [r4, #0]
   296ca:	bd38      	pop	{r3, r4, r5, pc}
   296cc:	20026424 	.word	0x20026424

000296d0 <quorem>:
   296d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   296d4:	6903      	ldr	r3, [r0, #16]
   296d6:	b085      	sub	sp, #20
   296d8:	690c      	ldr	r4, [r1, #16]
   296da:	9101      	str	r1, [sp, #4]
   296dc:	42a3      	cmp	r3, r4
   296de:	f2c0 808c 	blt.w	297fa <quorem+0x12a>
   296e2:	3c01      	subs	r4, #1
   296e4:	f101 0514 	add.w	r5, r1, #20
   296e8:	f100 0914 	add.w	r9, r0, #20
   296ec:	4682      	mov	sl, r0
   296ee:	00a2      	lsls	r2, r4, #2
   296f0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   296f4:	eb09 0184 	add.w	r1, r9, r4, lsl #2
   296f8:	3301      	adds	r3, #1
   296fa:	9202      	str	r2, [sp, #8]
   296fc:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   29700:	eb05 0884 	add.w	r8, r5, r4, lsl #2
   29704:	9103      	str	r1, [sp, #12]
   29706:	429a      	cmp	r2, r3
   29708:	fbb2 f6f3 	udiv	r6, r2, r3
   2970c:	d33c      	bcc.n	29788 <quorem+0xb8>
   2970e:	2300      	movs	r3, #0
   29710:	4628      	mov	r0, r5
   29712:	464f      	mov	r7, r9
   29714:	461a      	mov	r2, r3
   29716:	f850 1b04 	ldr.w	r1, [r0], #4
   2971a:	f8d7 e000 	ldr.w	lr, [r7]
   2971e:	fa1f fc81 	uxth.w	ip, r1
   29722:	4580      	cmp	r8, r0
   29724:	ea4f 4111 	mov.w	r1, r1, lsr #16
   29728:	fb06 3c0c 	mla	ip, r6, ip, r3
   2972c:	fa1f fb8e 	uxth.w	fp, lr
   29730:	ea4f 431c 	mov.w	r3, ip, lsr #16
   29734:	fa1f fc8c 	uxth.w	ip, ip
   29738:	fb06 3301 	mla	r3, r6, r1, r3
   2973c:	eba2 010c 	sub.w	r1, r2, ip
   29740:	b29a      	uxth	r2, r3
   29742:	4459      	add	r1, fp
   29744:	ea4f 4313 	mov.w	r3, r3, lsr #16
   29748:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   2974c:	fa1f fc81 	uxth.w	ip, r1
   29750:	eb02 4221 	add.w	r2, r2, r1, asr #16
   29754:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
   29758:	ea4f 4222 	mov.w	r2, r2, asr #16
   2975c:	f847 1b04 	str.w	r1, [r7], #4
   29760:	d2d9      	bcs.n	29716 <quorem+0x46>
   29762:	9b02      	ldr	r3, [sp, #8]
   29764:	f859 3003 	ldr.w	r3, [r9, r3]
   29768:	b973      	cbnz	r3, 29788 <quorem+0xb8>
   2976a:	9b03      	ldr	r3, [sp, #12]
   2976c:	3b04      	subs	r3, #4
   2976e:	4599      	cmp	r9, r3
   29770:	d304      	bcc.n	2977c <quorem+0xac>
   29772:	e007      	b.n	29784 <quorem+0xb4>
   29774:	4599      	cmp	r9, r3
   29776:	f104 34ff 	add.w	r4, r4, #4294967295
   2977a:	d203      	bcs.n	29784 <quorem+0xb4>
   2977c:	f853 2904 	ldr.w	r2, [r3], #-4
   29780:	2a00      	cmp	r2, #0
   29782:	d0f7      	beq.n	29774 <quorem+0xa4>
   29784:	f8ca 4010 	str.w	r4, [sl, #16]
   29788:	9901      	ldr	r1, [sp, #4]
   2978a:	4650      	mov	r0, sl
   2978c:	f001 fca0 	bl	2b0d0 <__mcmp>
   29790:	2800      	cmp	r0, #0
   29792:	db2e      	blt.n	297f2 <quorem+0x122>
   29794:	3601      	adds	r6, #1
   29796:	4648      	mov	r0, r9
   29798:	2200      	movs	r2, #0
   2979a:	f855 1b04 	ldr.w	r1, [r5], #4
   2979e:	f8d0 c000 	ldr.w	ip, [r0]
   297a2:	b28b      	uxth	r3, r1
   297a4:	45a8      	cmp	r8, r5
   297a6:	ea4f 4111 	mov.w	r1, r1, lsr #16
   297aa:	eba2 0303 	sub.w	r3, r2, r3
   297ae:	fa1f f28c 	uxth.w	r2, ip
   297b2:	ebc1 411c 	rsb	r1, r1, ip, lsr #16
   297b6:	4413      	add	r3, r2
   297b8:	eb01 4123 	add.w	r1, r1, r3, asr #16
   297bc:	b29b      	uxth	r3, r3
   297be:	ea4f 4221 	mov.w	r2, r1, asr #16
   297c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   297c6:	f840 3b04 	str.w	r3, [r0], #4
   297ca:	d2e6      	bcs.n	2979a <quorem+0xca>
   297cc:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   297d0:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   297d4:	b96a      	cbnz	r2, 297f2 <quorem+0x122>
   297d6:	3b04      	subs	r3, #4
   297d8:	4599      	cmp	r9, r3
   297da:	d304      	bcc.n	297e6 <quorem+0x116>
   297dc:	e007      	b.n	297ee <quorem+0x11e>
   297de:	4599      	cmp	r9, r3
   297e0:	f104 34ff 	add.w	r4, r4, #4294967295
   297e4:	d203      	bcs.n	297ee <quorem+0x11e>
   297e6:	f853 2904 	ldr.w	r2, [r3], #-4
   297ea:	2a00      	cmp	r2, #0
   297ec:	d0f7      	beq.n	297de <quorem+0x10e>
   297ee:	f8ca 4010 	str.w	r4, [sl, #16]
   297f2:	4630      	mov	r0, r6
   297f4:	b005      	add	sp, #20
   297f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   297fa:	2000      	movs	r0, #0
   297fc:	b005      	add	sp, #20
   297fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29802:	bf00      	nop

00029804 <__sflush_r>:
   29804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   29808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2980c:	460d      	mov	r5, r1
   2980e:	0711      	lsls	r1, r2, #28
   29810:	4680      	mov	r8, r0
   29812:	d431      	bmi.n	29878 <__sflush_r+0x74>
   29814:	686b      	ldr	r3, [r5, #4]
   29816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2981a:	2b00      	cmp	r3, #0
   2981c:	81aa      	strh	r2, [r5, #12]
   2981e:	dd48      	ble.n	298b2 <__sflush_r+0xae>
   29820:	6aac      	ldr	r4, [r5, #40]	; 0x28
   29822:	2c00      	cmp	r4, #0
   29824:	d042      	beq.n	298ac <__sflush_r+0xa8>
   29826:	2100      	movs	r1, #0
   29828:	b293      	uxth	r3, r2
   2982a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2982e:	f8d8 6000 	ldr.w	r6, [r8]
   29832:	f8c8 1000 	str.w	r1, [r8]
   29836:	d140      	bne.n	298ba <__sflush_r+0xb6>
   29838:	2301      	movs	r3, #1
   2983a:	69e9      	ldr	r1, [r5, #28]
   2983c:	4640      	mov	r0, r8
   2983e:	47a0      	blx	r4
   29840:	1c43      	adds	r3, r0, #1
   29842:	d073      	beq.n	2992c <__sflush_r+0x128>
   29844:	89ab      	ldrh	r3, [r5, #12]
   29846:	6aac      	ldr	r4, [r5, #40]	; 0x28
   29848:	075f      	lsls	r7, r3, #29
   2984a:	d505      	bpl.n	29858 <__sflush_r+0x54>
   2984c:	686a      	ldr	r2, [r5, #4]
   2984e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   29850:	1a80      	subs	r0, r0, r2
   29852:	b10b      	cbz	r3, 29858 <__sflush_r+0x54>
   29854:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   29856:	1ac0      	subs	r0, r0, r3
   29858:	4602      	mov	r2, r0
   2985a:	2300      	movs	r3, #0
   2985c:	69e9      	ldr	r1, [r5, #28]
   2985e:	4640      	mov	r0, r8
   29860:	47a0      	blx	r4
   29862:	1c44      	adds	r4, r0, #1
   29864:	d133      	bne.n	298ce <__sflush_r+0xca>
   29866:	f8d8 4000 	ldr.w	r4, [r8]
   2986a:	2c1d      	cmp	r4, #29
   2986c:	d94b      	bls.n	29906 <__sflush_r+0x102>
   2986e:	89ab      	ldrh	r3, [r5, #12]
   29870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29874:	81ab      	strh	r3, [r5, #12]
   29876:	e01a      	b.n	298ae <__sflush_r+0xaa>
   29878:	692f      	ldr	r7, [r5, #16]
   2987a:	b1bf      	cbz	r7, 298ac <__sflush_r+0xa8>
   2987c:	b293      	uxth	r3, r2
   2987e:	682e      	ldr	r6, [r5, #0]
   29880:	602f      	str	r7, [r5, #0]
   29882:	0799      	lsls	r1, r3, #30
   29884:	eba6 0607 	sub.w	r6, r6, r7
   29888:	bf0c      	ite	eq
   2988a:	696b      	ldreq	r3, [r5, #20]
   2988c:	2300      	movne	r3, #0
   2988e:	60ab      	str	r3, [r5, #8]
   29890:	e00a      	b.n	298a8 <__sflush_r+0xa4>
   29892:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   29894:	4633      	mov	r3, r6
   29896:	463a      	mov	r2, r7
   29898:	69e9      	ldr	r1, [r5, #28]
   2989a:	4640      	mov	r0, r8
   2989c:	47a0      	blx	r4
   2989e:	1e04      	subs	r4, r0, #0
   298a0:	eba6 0604 	sub.w	r6, r6, r4
   298a4:	4427      	add	r7, r4
   298a6:	dd0a      	ble.n	298be <__sflush_r+0xba>
   298a8:	2e00      	cmp	r6, #0
   298aa:	dcf2      	bgt.n	29892 <__sflush_r+0x8e>
   298ac:	2000      	movs	r0, #0
   298ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   298b2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   298b4:	2b00      	cmp	r3, #0
   298b6:	dcb3      	bgt.n	29820 <__sflush_r+0x1c>
   298b8:	e7f8      	b.n	298ac <__sflush_r+0xa8>
   298ba:	6d28      	ldr	r0, [r5, #80]	; 0x50
   298bc:	e7c4      	b.n	29848 <__sflush_r+0x44>
   298be:	89ab      	ldrh	r3, [r5, #12]
   298c0:	f04f 30ff 	mov.w	r0, #4294967295
   298c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   298c8:	81ab      	strh	r3, [r5, #12]
   298ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   298ce:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   298d2:	2100      	movs	r1, #0
   298d4:	692a      	ldr	r2, [r5, #16]
   298d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   298da:	e9c5 2100 	strd	r2, r1, [r5]
   298de:	04da      	lsls	r2, r3, #19
   298e0:	81ab      	strh	r3, [r5, #12]
   298e2:	d500      	bpl.n	298e6 <__sflush_r+0xe2>
   298e4:	6528      	str	r0, [r5, #80]	; 0x50
   298e6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   298e8:	f8c8 6000 	str.w	r6, [r8]
   298ec:	2900      	cmp	r1, #0
   298ee:	d0dd      	beq.n	298ac <__sflush_r+0xa8>
   298f0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   298f4:	4299      	cmp	r1, r3
   298f6:	d002      	beq.n	298fe <__sflush_r+0xfa>
   298f8:	4640      	mov	r0, r8
   298fa:	f000 f993 	bl	29c24 <_free_r>
   298fe:	2000      	movs	r0, #0
   29900:	6328      	str	r0, [r5, #48]	; 0x30
   29902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29906:	4a0f      	ldr	r2, [pc, #60]	; (29944 <__sflush_r+0x140>)
   29908:	40e2      	lsrs	r2, r4
   2990a:	43d2      	mvns	r2, r2
   2990c:	f012 0201 	ands.w	r2, r2, #1
   29910:	d1ad      	bne.n	2986e <__sflush_r+0x6a>
   29912:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   29916:	6929      	ldr	r1, [r5, #16]
   29918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   2991c:	81ab      	strh	r3, [r5, #12]
   2991e:	04db      	lsls	r3, r3, #19
   29920:	e9c5 1200 	strd	r1, r2, [r5]
   29924:	d5df      	bpl.n	298e6 <__sflush_r+0xe2>
   29926:	2c00      	cmp	r4, #0
   29928:	d1dd      	bne.n	298e6 <__sflush_r+0xe2>
   2992a:	e7db      	b.n	298e4 <__sflush_r+0xe0>
   2992c:	f8d8 3000 	ldr.w	r3, [r8]
   29930:	2b00      	cmp	r3, #0
   29932:	d087      	beq.n	29844 <__sflush_r+0x40>
   29934:	2b1d      	cmp	r3, #29
   29936:	d001      	beq.n	2993c <__sflush_r+0x138>
   29938:	2b16      	cmp	r3, #22
   2993a:	d198      	bne.n	2986e <__sflush_r+0x6a>
   2993c:	f8c8 6000 	str.w	r6, [r8]
   29940:	e7b4      	b.n	298ac <__sflush_r+0xa8>
   29942:	bf00      	nop
   29944:	20400001 	.word	0x20400001

00029948 <_fflush_r>:
   29948:	b538      	push	{r3, r4, r5, lr}
   2994a:	460c      	mov	r4, r1
   2994c:	4605      	mov	r5, r0
   2994e:	b108      	cbz	r0, 29954 <_fflush_r+0xc>
   29950:	6b83      	ldr	r3, [r0, #56]	; 0x38
   29952:	b1a3      	cbz	r3, 2997e <_fflush_r+0x36>
   29954:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   29958:	b1b8      	cbz	r0, 2998a <_fflush_r+0x42>
   2995a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2995c:	07db      	lsls	r3, r3, #31
   2995e:	d401      	bmi.n	29964 <_fflush_r+0x1c>
   29960:	0581      	lsls	r1, r0, #22
   29962:	d515      	bpl.n	29990 <_fflush_r+0x48>
   29964:	4628      	mov	r0, r5
   29966:	4621      	mov	r1, r4
   29968:	f7ff ff4c 	bl	29804 <__sflush_r>
   2996c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2996e:	4605      	mov	r5, r0
   29970:	07da      	lsls	r2, r3, #31
   29972:	d402      	bmi.n	2997a <_fflush_r+0x32>
   29974:	89a3      	ldrh	r3, [r4, #12]
   29976:	059b      	lsls	r3, r3, #22
   29978:	d50e      	bpl.n	29998 <_fflush_r+0x50>
   2997a:	4628      	mov	r0, r5
   2997c:	bd38      	pop	{r3, r4, r5, pc}
   2997e:	f000 f841 	bl	29a04 <__sinit>
   29982:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   29986:	2800      	cmp	r0, #0
   29988:	d1e7      	bne.n	2995a <_fflush_r+0x12>
   2998a:	4605      	mov	r5, r0
   2998c:	4628      	mov	r0, r5
   2998e:	bd38      	pop	{r3, r4, r5, pc}
   29990:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29992:	f000 ffed 	bl	2a970 <__retarget_lock_acquire_recursive>
   29996:	e7e5      	b.n	29964 <_fflush_r+0x1c>
   29998:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2999a:	f000 ffeb 	bl	2a974 <__retarget_lock_release_recursive>
   2999e:	4628      	mov	r0, r5
   299a0:	bd38      	pop	{r3, r4, r5, pc}
   299a2:	bf00      	nop

000299a4 <std>:
   299a4:	b538      	push	{r3, r4, r5, lr}
   299a6:	4604      	mov	r4, r0
   299a8:	4613      	mov	r3, r2
   299aa:	460d      	mov	r5, r1
   299ac:	2100      	movs	r1, #0
   299ae:	2208      	movs	r2, #8
   299b0:	305c      	adds	r0, #92	; 0x5c
   299b2:	f820 5c50 	strh.w	r5, [r0, #-80]
   299b6:	81e3      	strh	r3, [r4, #14]
   299b8:	60a1      	str	r1, [r4, #8]
   299ba:	6661      	str	r1, [r4, #100]	; 0x64
   299bc:	61a1      	str	r1, [r4, #24]
   299be:	4d0a      	ldr	r5, [pc, #40]	; (299e8 <std+0x44>)
   299c0:	e9c4 1100 	strd	r1, r1, [r4]
   299c4:	e9c4 1104 	strd	r1, r1, [r4, #16]
   299c8:	f7fc fafc 	bl	25fc4 <memset>
   299cc:	4b07      	ldr	r3, [pc, #28]	; (299ec <std+0x48>)
   299ce:	4908      	ldr	r1, [pc, #32]	; (299f0 <std+0x4c>)
   299d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   299d4:	4a07      	ldr	r2, [pc, #28]	; (299f4 <std+0x50>)
   299d6:	62e3      	str	r3, [r4, #44]	; 0x2c
   299d8:	e9c4 4507 	strd	r4, r5, [r4, #28]
   299dc:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   299e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   299e4:	f000 bfc0 	b.w	2a968 <__retarget_lock_init_recursive>
   299e8:	000265c5 	.word	0x000265c5
   299ec:	00026651 	.word	0x00026651
   299f0:	000265ed 	.word	0x000265ed
   299f4:	0002662d 	.word	0x0002662d

000299f8 <_cleanup_r>:
   299f8:	4901      	ldr	r1, [pc, #4]	; (29a00 <_cleanup_r+0x8>)
   299fa:	f000 bb8f 	b.w	2a11c <_fwalk_reent>
   299fe:	bf00      	nop
   29a00:	0002be91 	.word	0x0002be91

00029a04 <__sinit>:
   29a04:	b510      	push	{r4, lr}
   29a06:	4604      	mov	r4, r0
   29a08:	4814      	ldr	r0, [pc, #80]	; (29a5c <__sinit+0x58>)
   29a0a:	f000 ffb1 	bl	2a970 <__retarget_lock_acquire_recursive>
   29a0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   29a10:	b9fa      	cbnz	r2, 29a52 <__sinit+0x4e>
   29a12:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   29a16:	4812      	ldr	r0, [pc, #72]	; (29a60 <__sinit+0x5c>)
   29a18:	2103      	movs	r1, #3
   29a1a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   29a1e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   29a22:	63e0      	str	r0, [r4, #60]	; 0x3c
   29a24:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   29a28:	2104      	movs	r1, #4
   29a2a:	6860      	ldr	r0, [r4, #4]
   29a2c:	f7ff ffba 	bl	299a4 <std>
   29a30:	68a0      	ldr	r0, [r4, #8]
   29a32:	2201      	movs	r2, #1
   29a34:	2109      	movs	r1, #9
   29a36:	f7ff ffb5 	bl	299a4 <std>
   29a3a:	68e0      	ldr	r0, [r4, #12]
   29a3c:	2202      	movs	r2, #2
   29a3e:	2112      	movs	r1, #18
   29a40:	f7ff ffb0 	bl	299a4 <std>
   29a44:	2301      	movs	r3, #1
   29a46:	4805      	ldr	r0, [pc, #20]	; (29a5c <__sinit+0x58>)
   29a48:	63a3      	str	r3, [r4, #56]	; 0x38
   29a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29a4e:	f000 bf91 	b.w	2a974 <__retarget_lock_release_recursive>
   29a52:	4802      	ldr	r0, [pc, #8]	; (29a5c <__sinit+0x58>)
   29a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29a58:	f000 bf8c 	b.w	2a974 <__retarget_lock_release_recursive>
   29a5c:	2002640c 	.word	0x2002640c
   29a60:	000299f9 	.word	0x000299f9

00029a64 <__sfp_lock_acquire>:
   29a64:	4801      	ldr	r0, [pc, #4]	; (29a6c <__sfp_lock_acquire+0x8>)
   29a66:	f000 bf83 	b.w	2a970 <__retarget_lock_acquire_recursive>
   29a6a:	bf00      	nop
   29a6c:	20026420 	.word	0x20026420

00029a70 <__sfp_lock_release>:
   29a70:	4801      	ldr	r0, [pc, #4]	; (29a78 <__sfp_lock_release+0x8>)
   29a72:	f000 bf7f 	b.w	2a974 <__retarget_lock_release_recursive>
   29a76:	bf00      	nop
   29a78:	20026420 	.word	0x20026420

00029a7c <__fputwc>:
   29a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29a80:	b082      	sub	sp, #8
   29a82:	4680      	mov	r8, r0
   29a84:	4689      	mov	r9, r1
   29a86:	4614      	mov	r4, r2
   29a88:	f000 ff64 	bl	2a954 <__locale_mb_cur_max>
   29a8c:	2801      	cmp	r0, #1
   29a8e:	d103      	bne.n	29a98 <__fputwc+0x1c>
   29a90:	f109 33ff 	add.w	r3, r9, #4294967295
   29a94:	2bfe      	cmp	r3, #254	; 0xfe
   29a96:	d931      	bls.n	29afc <__fputwc+0x80>
   29a98:	464a      	mov	r2, r9
   29a9a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   29a9e:	a901      	add	r1, sp, #4
   29aa0:	4640      	mov	r0, r8
   29aa2:	f002 f999 	bl	2bdd8 <_wcrtomb_r>
   29aa6:	1c42      	adds	r2, r0, #1
   29aa8:	4606      	mov	r6, r0
   29aaa:	d032      	beq.n	29b12 <__fputwc+0x96>
   29aac:	b360      	cbz	r0, 29b08 <__fputwc+0x8c>
   29aae:	f89d c004 	ldrb.w	ip, [sp, #4]
   29ab2:	2500      	movs	r5, #0
   29ab4:	f10d 0a04 	add.w	sl, sp, #4
   29ab8:	e00c      	b.n	29ad4 <__fputwc+0x58>
   29aba:	f1bc 0f0a 	cmp.w	ip, #10
   29abe:	d014      	beq.n	29aea <__fputwc+0x6e>
   29ac0:	6823      	ldr	r3, [r4, #0]
   29ac2:	1c5a      	adds	r2, r3, #1
   29ac4:	6022      	str	r2, [r4, #0]
   29ac6:	f883 c000 	strb.w	ip, [r3]
   29aca:	3501      	adds	r5, #1
   29acc:	42b5      	cmp	r5, r6
   29ace:	d21b      	bcs.n	29b08 <__fputwc+0x8c>
   29ad0:	f815 c00a 	ldrb.w	ip, [r5, sl]
   29ad4:	68a3      	ldr	r3, [r4, #8]
   29ad6:	3b01      	subs	r3, #1
   29ad8:	2b00      	cmp	r3, #0
   29ada:	60a3      	str	r3, [r4, #8]
   29adc:	daf0      	bge.n	29ac0 <__fputwc+0x44>
   29ade:	69a7      	ldr	r7, [r4, #24]
   29ae0:	4661      	mov	r1, ip
   29ae2:	4622      	mov	r2, r4
   29ae4:	4640      	mov	r0, r8
   29ae6:	42bb      	cmp	r3, r7
   29ae8:	dae7      	bge.n	29aba <__fputwc+0x3e>
   29aea:	f002 f91d 	bl	2bd28 <__swbuf_r>
   29aee:	1c43      	adds	r3, r0, #1
   29af0:	d1eb      	bne.n	29aca <__fputwc+0x4e>
   29af2:	4606      	mov	r6, r0
   29af4:	4630      	mov	r0, r6
   29af6:	b002      	add	sp, #8
   29af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29afc:	fa5f fc89 	uxtb.w	ip, r9
   29b00:	4606      	mov	r6, r0
   29b02:	f88d c004 	strb.w	ip, [sp, #4]
   29b06:	e7d4      	b.n	29ab2 <__fputwc+0x36>
   29b08:	464e      	mov	r6, r9
   29b0a:	4630      	mov	r0, r6
   29b0c:	b002      	add	sp, #8
   29b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29b12:	89a3      	ldrh	r3, [r4, #12]
   29b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29b18:	81a3      	strh	r3, [r4, #12]
   29b1a:	e7eb      	b.n	29af4 <__fputwc+0x78>

00029b1c <_fputwc_r>:
   29b1c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   29b1e:	f013 0f01 	tst.w	r3, #1
   29b22:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   29b26:	b530      	push	{r4, r5, lr}
   29b28:	4614      	mov	r4, r2
   29b2a:	b083      	sub	sp, #12
   29b2c:	4605      	mov	r5, r0
   29b2e:	b29a      	uxth	r2, r3
   29b30:	d101      	bne.n	29b36 <_fputwc_r+0x1a>
   29b32:	0598      	lsls	r0, r3, #22
   29b34:	d51c      	bpl.n	29b70 <_fputwc_r+0x54>
   29b36:	0490      	lsls	r0, r2, #18
   29b38:	d406      	bmi.n	29b48 <_fputwc_r+0x2c>
   29b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   29b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   29b44:	81a3      	strh	r3, [r4, #12]
   29b46:	6662      	str	r2, [r4, #100]	; 0x64
   29b48:	4628      	mov	r0, r5
   29b4a:	4622      	mov	r2, r4
   29b4c:	f7ff ff96 	bl	29a7c <__fputwc>
   29b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29b52:	4605      	mov	r5, r0
   29b54:	07da      	lsls	r2, r3, #31
   29b56:	d402      	bmi.n	29b5e <_fputwc_r+0x42>
   29b58:	89a3      	ldrh	r3, [r4, #12]
   29b5a:	059b      	lsls	r3, r3, #22
   29b5c:	d502      	bpl.n	29b64 <_fputwc_r+0x48>
   29b5e:	4628      	mov	r0, r5
   29b60:	b003      	add	sp, #12
   29b62:	bd30      	pop	{r4, r5, pc}
   29b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29b66:	f000 ff05 	bl	2a974 <__retarget_lock_release_recursive>
   29b6a:	4628      	mov	r0, r5
   29b6c:	b003      	add	sp, #12
   29b6e:	bd30      	pop	{r4, r5, pc}
   29b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29b72:	9101      	str	r1, [sp, #4]
   29b74:	f000 fefc 	bl	2a970 <__retarget_lock_acquire_recursive>
   29b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29b7c:	9901      	ldr	r1, [sp, #4]
   29b7e:	b29a      	uxth	r2, r3
   29b80:	e7d9      	b.n	29b36 <_fputwc_r+0x1a>
   29b82:	bf00      	nop

00029b84 <_malloc_trim_r>:
   29b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29b86:	4f23      	ldr	r7, [pc, #140]	; (29c14 <_malloc_trim_r+0x90>)
   29b88:	460c      	mov	r4, r1
   29b8a:	4606      	mov	r6, r0
   29b8c:	f7fc fa6a 	bl	26064 <__malloc_lock>
   29b90:	68b9      	ldr	r1, [r7, #8]
   29b92:	f640 73ef 	movw	r3, #4079	; 0xfef
   29b96:	4a20      	ldr	r2, [pc, #128]	; (29c18 <_malloc_trim_r+0x94>)
   29b98:	684d      	ldr	r5, [r1, #4]
   29b9a:	1b1b      	subs	r3, r3, r4
   29b9c:	f025 0503 	bic.w	r5, r5, #3
   29ba0:	442b      	add	r3, r5
   29ba2:	401a      	ands	r2, r3
   29ba4:	f5a2 5480 	sub.w	r4, r2, #4096	; 0x1000
   29ba8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   29bac:	db07      	blt.n	29bbe <_malloc_trim_r+0x3a>
   29bae:	2100      	movs	r1, #0
   29bb0:	4630      	mov	r0, r6
   29bb2:	f7fc fc65 	bl	26480 <_sbrk_r>
   29bb6:	68bb      	ldr	r3, [r7, #8]
   29bb8:	442b      	add	r3, r5
   29bba:	4298      	cmp	r0, r3
   29bbc:	d004      	beq.n	29bc8 <_malloc_trim_r+0x44>
   29bbe:	4630      	mov	r0, r6
   29bc0:	f7fc fa56 	bl	26070 <__malloc_unlock>
   29bc4:	2000      	movs	r0, #0
   29bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29bc8:	4261      	negs	r1, r4
   29bca:	4630      	mov	r0, r6
   29bcc:	f7fc fc58 	bl	26480 <_sbrk_r>
   29bd0:	3001      	adds	r0, #1
   29bd2:	d00d      	beq.n	29bf0 <_malloc_trim_r+0x6c>
   29bd4:	4b11      	ldr	r3, [pc, #68]	; (29c1c <_malloc_trim_r+0x98>)
   29bd6:	1b2d      	subs	r5, r5, r4
   29bd8:	68b9      	ldr	r1, [r7, #8]
   29bda:	4630      	mov	r0, r6
   29bdc:	681a      	ldr	r2, [r3, #0]
   29bde:	f045 0501 	orr.w	r5, r5, #1
   29be2:	1b12      	subs	r2, r2, r4
   29be4:	604d      	str	r5, [r1, #4]
   29be6:	601a      	str	r2, [r3, #0]
   29be8:	f7fc fa42 	bl	26070 <__malloc_unlock>
   29bec:	2001      	movs	r0, #1
   29bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29bf0:	2100      	movs	r1, #0
   29bf2:	4630      	mov	r0, r6
   29bf4:	f7fc fc44 	bl	26480 <_sbrk_r>
   29bf8:	68ba      	ldr	r2, [r7, #8]
   29bfa:	1a83      	subs	r3, r0, r2
   29bfc:	2b0f      	cmp	r3, #15
   29bfe:	ddde      	ble.n	29bbe <_malloc_trim_r+0x3a>
   29c00:	4c07      	ldr	r4, [pc, #28]	; (29c20 <_malloc_trim_r+0x9c>)
   29c02:	f043 0301 	orr.w	r3, r3, #1
   29c06:	4905      	ldr	r1, [pc, #20]	; (29c1c <_malloc_trim_r+0x98>)
   29c08:	6824      	ldr	r4, [r4, #0]
   29c0a:	6053      	str	r3, [r2, #4]
   29c0c:	1b00      	subs	r0, r0, r4
   29c0e:	6008      	str	r0, [r1, #0]
   29c10:	e7d5      	b.n	29bbe <_malloc_trim_r+0x3a>
   29c12:	bf00      	nop
   29c14:	200204dc 	.word	0x200204dc
   29c18:	fffff000 	.word	0xfffff000
   29c1c:	2002426c 	.word	0x2002426c
   29c20:	200208e4 	.word	0x200208e4

00029c24 <_free_r>:
   29c24:	2900      	cmp	r1, #0
   29c26:	d05f      	beq.n	29ce8 <_free_r+0xc4>
   29c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29c2a:	460c      	mov	r4, r1
   29c2c:	4606      	mov	r6, r0
   29c2e:	f7fc fa19 	bl	26064 <__malloc_lock>
   29c32:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 29e2c <_free_r+0x208>
   29c36:	f854 3c04 	ldr.w	r3, [r4, #-4]
   29c3a:	f1a4 0008 	sub.w	r0, r4, #8
   29c3e:	f8dc 7008 	ldr.w	r7, [ip, #8]
   29c42:	f023 0101 	bic.w	r1, r3, #1
   29c46:	1842      	adds	r2, r0, r1
   29c48:	6855      	ldr	r5, [r2, #4]
   29c4a:	4297      	cmp	r7, r2
   29c4c:	f025 0503 	bic.w	r5, r5, #3
   29c50:	f000 8089 	beq.w	29d66 <_free_r+0x142>
   29c54:	07df      	lsls	r7, r3, #31
   29c56:	6055      	str	r5, [r2, #4]
   29c58:	d434      	bmi.n	29cc4 <_free_r+0xa0>
   29c5a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   29c5e:	f10c 0408 	add.w	r4, ip, #8
   29c62:	1ac0      	subs	r0, r0, r3
   29c64:	4419      	add	r1, r3
   29c66:	6883      	ldr	r3, [r0, #8]
   29c68:	42a3      	cmp	r3, r4
   29c6a:	d06a      	beq.n	29d42 <_free_r+0x11e>
   29c6c:	1957      	adds	r7, r2, r5
   29c6e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   29c72:	687f      	ldr	r7, [r7, #4]
   29c74:	f8c3 e00c 	str.w	lr, [r3, #12]
   29c78:	f8ce 3008 	str.w	r3, [lr, #8]
   29c7c:	07fb      	lsls	r3, r7, #31
   29c7e:	f140 8097 	bpl.w	29db0 <_free_r+0x18c>
   29c82:	f041 0301 	orr.w	r3, r1, #1
   29c86:	6043      	str	r3, [r0, #4]
   29c88:	6011      	str	r1, [r2, #0]
   29c8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   29c8e:	d234      	bcs.n	29cfa <_free_r+0xd6>
   29c90:	2201      	movs	r2, #1
   29c92:	08cb      	lsrs	r3, r1, #3
   29c94:	0949      	lsrs	r1, r1, #5
   29c96:	f8dc 4004 	ldr.w	r4, [ip, #4]
   29c9a:	4413      	add	r3, r2
   29c9c:	fa02 f101 	lsl.w	r1, r2, r1
   29ca0:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   29ca4:	4321      	orrs	r1, r4
   29ca6:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   29caa:	3a08      	subs	r2, #8
   29cac:	f8cc 1004 	str.w	r1, [ip, #4]
   29cb0:	e9c0 4202 	strd	r4, r2, [r0, #8]
   29cb4:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   29cb8:	60e0      	str	r0, [r4, #12]
   29cba:	4630      	mov	r0, r6
   29cbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29cc0:	f7fc b9d6 	b.w	26070 <__malloc_unlock>
   29cc4:	1953      	adds	r3, r2, r5
   29cc6:	685b      	ldr	r3, [r3, #4]
   29cc8:	07df      	lsls	r7, r3, #31
   29cca:	d40e      	bmi.n	29cea <_free_r+0xc6>
   29ccc:	4429      	add	r1, r5
   29cce:	f10c 0408 	add.w	r4, ip, #8
   29cd2:	6893      	ldr	r3, [r2, #8]
   29cd4:	42a3      	cmp	r3, r4
   29cd6:	d073      	beq.n	29dc0 <_free_r+0x19c>
   29cd8:	68d4      	ldr	r4, [r2, #12]
   29cda:	f041 0201 	orr.w	r2, r1, #1
   29cde:	60dc      	str	r4, [r3, #12]
   29ce0:	60a3      	str	r3, [r4, #8]
   29ce2:	6042      	str	r2, [r0, #4]
   29ce4:	5041      	str	r1, [r0, r1]
   29ce6:	e7d0      	b.n	29c8a <_free_r+0x66>
   29ce8:	4770      	bx	lr
   29cea:	f041 0301 	orr.w	r3, r1, #1
   29cee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   29cf2:	f844 3c04 	str.w	r3, [r4, #-4]
   29cf6:	6011      	str	r1, [r2, #0]
   29cf8:	d3ca      	bcc.n	29c90 <_free_r+0x6c>
   29cfa:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   29cfe:	ea4f 2351 	mov.w	r3, r1, lsr #9
   29d02:	d24a      	bcs.n	29d9a <_free_r+0x176>
   29d04:	098b      	lsrs	r3, r1, #6
   29d06:	f103 0439 	add.w	r4, r3, #57	; 0x39
   29d0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
   29d0e:	00e3      	lsls	r3, r4, #3
   29d10:	eb0c 0403 	add.w	r4, ip, r3
   29d14:	f85c 3003 	ldr.w	r3, [ip, r3]
   29d18:	3c08      	subs	r4, #8
   29d1a:	429c      	cmp	r4, r3
   29d1c:	d059      	beq.n	29dd2 <_free_r+0x1ae>
   29d1e:	685a      	ldr	r2, [r3, #4]
   29d20:	f022 0203 	bic.w	r2, r2, #3
   29d24:	428a      	cmp	r2, r1
   29d26:	d902      	bls.n	29d2e <_free_r+0x10a>
   29d28:	689b      	ldr	r3, [r3, #8]
   29d2a:	429c      	cmp	r4, r3
   29d2c:	d1f7      	bne.n	29d1e <_free_r+0xfa>
   29d2e:	68dc      	ldr	r4, [r3, #12]
   29d30:	e9c0 3402 	strd	r3, r4, [r0, #8]
   29d34:	60a0      	str	r0, [r4, #8]
   29d36:	60d8      	str	r0, [r3, #12]
   29d38:	4630      	mov	r0, r6
   29d3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29d3e:	f7fc b997 	b.w	26070 <__malloc_unlock>
   29d42:	1953      	adds	r3, r2, r5
   29d44:	685b      	ldr	r3, [r3, #4]
   29d46:	07db      	lsls	r3, r3, #31
   29d48:	d466      	bmi.n	29e18 <_free_r+0x1f4>
   29d4a:	4429      	add	r1, r5
   29d4c:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   29d50:	f041 0401 	orr.w	r4, r1, #1
   29d54:	60d3      	str	r3, [r2, #12]
   29d56:	609a      	str	r2, [r3, #8]
   29d58:	6044      	str	r4, [r0, #4]
   29d5a:	5041      	str	r1, [r0, r1]
   29d5c:	4630      	mov	r0, r6
   29d5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29d62:	f7fc b985 	b.w	26070 <__malloc_unlock>
   29d66:	07db      	lsls	r3, r3, #31
   29d68:	4429      	add	r1, r5
   29d6a:	d407      	bmi.n	29d7c <_free_r+0x158>
   29d6c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   29d70:	1ac0      	subs	r0, r0, r3
   29d72:	4419      	add	r1, r3
   29d74:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   29d78:	60d3      	str	r3, [r2, #12]
   29d7a:	609a      	str	r2, [r3, #8]
   29d7c:	4b29      	ldr	r3, [pc, #164]	; (29e24 <_free_r+0x200>)
   29d7e:	f041 0201 	orr.w	r2, r1, #1
   29d82:	681b      	ldr	r3, [r3, #0]
   29d84:	6042      	str	r2, [r0, #4]
   29d86:	428b      	cmp	r3, r1
   29d88:	f8cc 0008 	str.w	r0, [ip, #8]
   29d8c:	d895      	bhi.n	29cba <_free_r+0x96>
   29d8e:	4b26      	ldr	r3, [pc, #152]	; (29e28 <_free_r+0x204>)
   29d90:	4630      	mov	r0, r6
   29d92:	6819      	ldr	r1, [r3, #0]
   29d94:	f7ff fef6 	bl	29b84 <_malloc_trim_r>
   29d98:	e78f      	b.n	29cba <_free_r+0x96>
   29d9a:	2b14      	cmp	r3, #20
   29d9c:	d90a      	bls.n	29db4 <_free_r+0x190>
   29d9e:	2b54      	cmp	r3, #84	; 0x54
   29da0:	d821      	bhi.n	29de6 <_free_r+0x1c2>
   29da2:	0b0b      	lsrs	r3, r1, #12
   29da4:	f103 046f 	add.w	r4, r3, #111	; 0x6f
   29da8:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   29dac:	00e3      	lsls	r3, r4, #3
   29dae:	e7af      	b.n	29d10 <_free_r+0xec>
   29db0:	4429      	add	r1, r5
   29db2:	e78e      	b.n	29cd2 <_free_r+0xae>
   29db4:	f103 045c 	add.w	r4, r3, #92	; 0x5c
   29db8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   29dbc:	00e3      	lsls	r3, r4, #3
   29dbe:	e7a7      	b.n	29d10 <_free_r+0xec>
   29dc0:	f041 0301 	orr.w	r3, r1, #1
   29dc4:	e9cc 0004 	strd	r0, r0, [ip, #16]
   29dc8:	e9c0 4402 	strd	r4, r4, [r0, #8]
   29dcc:	6043      	str	r3, [r0, #4]
   29dce:	5041      	str	r1, [r0, r1]
   29dd0:	e773      	b.n	29cba <_free_r+0x96>
   29dd2:	1092      	asrs	r2, r2, #2
   29dd4:	2501      	movs	r5, #1
   29dd6:	f8dc 1004 	ldr.w	r1, [ip, #4]
   29dda:	fa05 f202 	lsl.w	r2, r5, r2
   29dde:	430a      	orrs	r2, r1
   29de0:	f8cc 2004 	str.w	r2, [ip, #4]
   29de4:	e7a4      	b.n	29d30 <_free_r+0x10c>
   29de6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   29dea:	d806      	bhi.n	29dfa <_free_r+0x1d6>
   29dec:	0bcb      	lsrs	r3, r1, #15
   29dee:	f103 0478 	add.w	r4, r3, #120	; 0x78
   29df2:	f103 0277 	add.w	r2, r3, #119	; 0x77
   29df6:	00e3      	lsls	r3, r4, #3
   29df8:	e78a      	b.n	29d10 <_free_r+0xec>
   29dfa:	f240 5254 	movw	r2, #1364	; 0x554
   29dfe:	4293      	cmp	r3, r2
   29e00:	d806      	bhi.n	29e10 <_free_r+0x1ec>
   29e02:	0c8b      	lsrs	r3, r1, #18
   29e04:	f103 047d 	add.w	r4, r3, #125	; 0x7d
   29e08:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   29e0c:	00e3      	lsls	r3, r4, #3
   29e0e:	e77f      	b.n	29d10 <_free_r+0xec>
   29e10:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   29e14:	227e      	movs	r2, #126	; 0x7e
   29e16:	e77b      	b.n	29d10 <_free_r+0xec>
   29e18:	f041 0301 	orr.w	r3, r1, #1
   29e1c:	6043      	str	r3, [r0, #4]
   29e1e:	6011      	str	r1, [r2, #0]
   29e20:	e74b      	b.n	29cba <_free_r+0x96>
   29e22:	bf00      	nop
   29e24:	200208e8 	.word	0x200208e8
   29e28:	2002429c 	.word	0x2002429c
   29e2c:	200204dc 	.word	0x200204dc

00029e30 <__sfvwrite_r>:
   29e30:	6893      	ldr	r3, [r2, #8]
   29e32:	2b00      	cmp	r3, #0
   29e34:	f000 808d 	beq.w	29f52 <__sfvwrite_r+0x122>
   29e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e3c:	4690      	mov	r8, r2
   29e3e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   29e42:	460c      	mov	r4, r1
   29e44:	b083      	sub	sp, #12
   29e46:	0711      	lsls	r1, r2, #28
   29e48:	4681      	mov	r9, r0
   29e4a:	b293      	uxth	r3, r2
   29e4c:	d525      	bpl.n	29e9a <__sfvwrite_r+0x6a>
   29e4e:	6922      	ldr	r2, [r4, #16]
   29e50:	b31a      	cbz	r2, 29e9a <__sfvwrite_r+0x6a>
   29e52:	f013 0702 	ands.w	r7, r3, #2
   29e56:	f8d8 5000 	ldr.w	r5, [r8]
   29e5a:	d02d      	beq.n	29eb8 <__sfvwrite_r+0x88>
   29e5c:	2600      	movs	r6, #0
   29e5e:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 2a118 <__sfvwrite_r+0x2e8>
   29e62:	46aa      	mov	sl, r5
   29e64:	4637      	mov	r7, r6
   29e66:	455f      	cmp	r7, fp
   29e68:	463b      	mov	r3, r7
   29e6a:	4632      	mov	r2, r6
   29e6c:	4648      	mov	r0, r9
   29e6e:	bf28      	it	cs
   29e70:	465b      	movcs	r3, fp
   29e72:	2f00      	cmp	r7, #0
   29e74:	d052      	beq.n	29f1c <__sfvwrite_r+0xec>
   29e76:	69e1      	ldr	r1, [r4, #28]
   29e78:	6a65      	ldr	r5, [r4, #36]	; 0x24
   29e7a:	47a8      	blx	r5
   29e7c:	2800      	cmp	r0, #0
   29e7e:	dd5e      	ble.n	29f3e <__sfvwrite_r+0x10e>
   29e80:	f8d8 3008 	ldr.w	r3, [r8, #8]
   29e84:	4406      	add	r6, r0
   29e86:	1a3f      	subs	r7, r7, r0
   29e88:	1a18      	subs	r0, r3, r0
   29e8a:	f8c8 0008 	str.w	r0, [r8, #8]
   29e8e:	2800      	cmp	r0, #0
   29e90:	d1e9      	bne.n	29e66 <__sfvwrite_r+0x36>
   29e92:	2000      	movs	r0, #0
   29e94:	b003      	add	sp, #12
   29e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e9a:	4621      	mov	r1, r4
   29e9c:	4648      	mov	r0, r9
   29e9e:	f7ff fb95 	bl	295cc <__swsetup_r>
   29ea2:	2800      	cmp	r0, #0
   29ea4:	f040 8135 	bne.w	2a112 <__sfvwrite_r+0x2e2>
   29ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   29eac:	f8d8 5000 	ldr.w	r5, [r8]
   29eb0:	b293      	uxth	r3, r2
   29eb2:	f013 0702 	ands.w	r7, r3, #2
   29eb6:	d1d1      	bne.n	29e5c <__sfvwrite_r+0x2c>
   29eb8:	f013 0a01 	ands.w	sl, r3, #1
   29ebc:	d14b      	bne.n	29f56 <__sfvwrite_r+0x126>
   29ebe:	4656      	mov	r6, sl
   29ec0:	b346      	cbz	r6, 29f14 <__sfvwrite_r+0xe4>
   29ec2:	059a      	lsls	r2, r3, #22
   29ec4:	f8d4 b008 	ldr.w	fp, [r4, #8]
   29ec8:	f140 8090 	bpl.w	29fec <__sfvwrite_r+0x1bc>
   29ecc:	45b3      	cmp	fp, r6
   29ece:	465a      	mov	r2, fp
   29ed0:	f200 80bc 	bhi.w	2a04c <__sfvwrite_r+0x21c>
   29ed4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   29ed8:	f040 80d0 	bne.w	2a07c <__sfvwrite_r+0x24c>
   29edc:	6820      	ldr	r0, [r4, #0]
   29ede:	4651      	mov	r1, sl
   29ee0:	9200      	str	r2, [sp, #0]
   29ee2:	f000 fe13 	bl	2ab0c <memmove>
   29ee6:	68a1      	ldr	r1, [r4, #8]
   29ee8:	6823      	ldr	r3, [r4, #0]
   29eea:	4637      	mov	r7, r6
   29eec:	9a00      	ldr	r2, [sp, #0]
   29eee:	eba1 010b 	sub.w	r1, r1, fp
   29ef2:	2600      	movs	r6, #0
   29ef4:	4413      	add	r3, r2
   29ef6:	60a1      	str	r1, [r4, #8]
   29ef8:	6023      	str	r3, [r4, #0]
   29efa:	f8d8 0008 	ldr.w	r0, [r8, #8]
   29efe:	44ba      	add	sl, r7
   29f00:	1bc7      	subs	r7, r0, r7
   29f02:	f8c8 7008 	str.w	r7, [r8, #8]
   29f06:	2f00      	cmp	r7, #0
   29f08:	d0c3      	beq.n	29e92 <__sfvwrite_r+0x62>
   29f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29f0e:	b29b      	uxth	r3, r3
   29f10:	2e00      	cmp	r6, #0
   29f12:	d1d6      	bne.n	29ec2 <__sfvwrite_r+0x92>
   29f14:	e9d5 a600 	ldrd	sl, r6, [r5]
   29f18:	3508      	adds	r5, #8
   29f1a:	e7d1      	b.n	29ec0 <__sfvwrite_r+0x90>
   29f1c:	e9da 6700 	ldrd	r6, r7, [sl]
   29f20:	f10a 0a08 	add.w	sl, sl, #8
   29f24:	e79f      	b.n	29e66 <__sfvwrite_r+0x36>
   29f26:	4629      	mov	r1, r5
   29f28:	465a      	mov	r2, fp
   29f2a:	f000 fdef 	bl	2ab0c <memmove>
   29f2e:	6823      	ldr	r3, [r4, #0]
   29f30:	4621      	mov	r1, r4
   29f32:	4648      	mov	r0, r9
   29f34:	445b      	add	r3, fp
   29f36:	6023      	str	r3, [r4, #0]
   29f38:	f7ff fd06 	bl	29948 <_fflush_r>
   29f3c:	b358      	cbz	r0, 29f96 <__sfvwrite_r+0x166>
   29f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29f46:	f04f 30ff 	mov.w	r0, #4294967295
   29f4a:	81a3      	strh	r3, [r4, #12]
   29f4c:	b003      	add	sp, #12
   29f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f52:	2000      	movs	r0, #0
   29f54:	4770      	bx	lr
   29f56:	463e      	mov	r6, r7
   29f58:	46aa      	mov	sl, r5
   29f5a:	4638      	mov	r0, r7
   29f5c:	463d      	mov	r5, r7
   29f5e:	9700      	str	r7, [sp, #0]
   29f60:	b36e      	cbz	r6, 29fbe <__sfvwrite_r+0x18e>
   29f62:	2800      	cmp	r0, #0
   29f64:	d035      	beq.n	29fd2 <__sfvwrite_r+0x1a2>
   29f66:	9a00      	ldr	r2, [sp, #0]
   29f68:	42b2      	cmp	r2, r6
   29f6a:	6820      	ldr	r0, [r4, #0]
   29f6c:	6921      	ldr	r1, [r4, #16]
   29f6e:	6963      	ldr	r3, [r4, #20]
   29f70:	bf28      	it	cs
   29f72:	4632      	movcs	r2, r6
   29f74:	68a7      	ldr	r7, [r4, #8]
   29f76:	4288      	cmp	r0, r1
   29f78:	eb03 0b07 	add.w	fp, r3, r7
   29f7c:	d901      	bls.n	29f82 <__sfvwrite_r+0x152>
   29f7e:	455a      	cmp	r2, fp
   29f80:	dcd1      	bgt.n	29f26 <__sfvwrite_r+0xf6>
   29f82:	4293      	cmp	r3, r2
   29f84:	dc6d      	bgt.n	2a062 <__sfvwrite_r+0x232>
   29f86:	462a      	mov	r2, r5
   29f88:	69e1      	ldr	r1, [r4, #28]
   29f8a:	4648      	mov	r0, r9
   29f8c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   29f8e:	47b8      	blx	r7
   29f90:	f1b0 0b00 	subs.w	fp, r0, #0
   29f94:	ddd3      	ble.n	29f3e <__sfvwrite_r+0x10e>
   29f96:	9b00      	ldr	r3, [sp, #0]
   29f98:	ebb3 030b 	subs.w	r3, r3, fp
   29f9c:	9300      	str	r3, [sp, #0]
   29f9e:	d059      	beq.n	2a054 <__sfvwrite_r+0x224>
   29fa0:	2001      	movs	r0, #1
   29fa2:	f8d8 2008 	ldr.w	r2, [r8, #8]
   29fa6:	445d      	add	r5, fp
   29fa8:	eba6 060b 	sub.w	r6, r6, fp
   29fac:	eba2 020b 	sub.w	r2, r2, fp
   29fb0:	f8c8 2008 	str.w	r2, [r8, #8]
   29fb4:	2a00      	cmp	r2, #0
   29fb6:	f43f af6c 	beq.w	29e92 <__sfvwrite_r+0x62>
   29fba:	2e00      	cmp	r6, #0
   29fbc:	d1d1      	bne.n	29f62 <__sfvwrite_r+0x132>
   29fbe:	f10a 0308 	add.w	r3, sl, #8
   29fc2:	f853 6c04 	ldr.w	r6, [r3, #-4]
   29fc6:	469a      	mov	sl, r3
   29fc8:	f853 5c08 	ldr.w	r5, [r3, #-8]
   29fcc:	3308      	adds	r3, #8
   29fce:	2e00      	cmp	r6, #0
   29fd0:	d0f7      	beq.n	29fc2 <__sfvwrite_r+0x192>
   29fd2:	4632      	mov	r2, r6
   29fd4:	210a      	movs	r1, #10
   29fd6:	4628      	mov	r0, r5
   29fd8:	f7fb ff88 	bl	25eec <memchr>
   29fdc:	2800      	cmp	r0, #0
   29fde:	f000 808f 	beq.w	2a100 <__sfvwrite_r+0x2d0>
   29fe2:	3001      	adds	r0, #1
   29fe4:	1b43      	subs	r3, r0, r5
   29fe6:	461a      	mov	r2, r3
   29fe8:	9300      	str	r3, [sp, #0]
   29fea:	e7bd      	b.n	29f68 <__sfvwrite_r+0x138>
   29fec:	6820      	ldr	r0, [r4, #0]
   29fee:	6923      	ldr	r3, [r4, #16]
   29ff0:	4298      	cmp	r0, r3
   29ff2:	d814      	bhi.n	2a01e <__sfvwrite_r+0x1ee>
   29ff4:	6963      	ldr	r3, [r4, #20]
   29ff6:	42b3      	cmp	r3, r6
   29ff8:	d811      	bhi.n	2a01e <__sfvwrite_r+0x1ee>
   29ffa:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   29ffe:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2a000:	4652      	mov	r2, sl
   2a002:	69e1      	ldr	r1, [r4, #28]
   2a004:	45b4      	cmp	ip, r6
   2a006:	4648      	mov	r0, r9
   2a008:	bf28      	it	cs
   2a00a:	46b4      	movcs	ip, r6
   2a00c:	fb9c fcf3 	sdiv	ip, ip, r3
   2a010:	fb03 f30c 	mul.w	r3, r3, ip
   2a014:	47b8      	blx	r7
   2a016:	1e07      	subs	r7, r0, #0
   2a018:	dd91      	ble.n	29f3e <__sfvwrite_r+0x10e>
   2a01a:	1bf6      	subs	r6, r6, r7
   2a01c:	e76d      	b.n	29efa <__sfvwrite_r+0xca>
   2a01e:	45b3      	cmp	fp, r6
   2a020:	465f      	mov	r7, fp
   2a022:	4651      	mov	r1, sl
   2a024:	bf28      	it	cs
   2a026:	4637      	movcs	r7, r6
   2a028:	463a      	mov	r2, r7
   2a02a:	f000 fd6f 	bl	2ab0c <memmove>
   2a02e:	68a3      	ldr	r3, [r4, #8]
   2a030:	6822      	ldr	r2, [r4, #0]
   2a032:	1bdb      	subs	r3, r3, r7
   2a034:	443a      	add	r2, r7
   2a036:	60a3      	str	r3, [r4, #8]
   2a038:	6022      	str	r2, [r4, #0]
   2a03a:	2b00      	cmp	r3, #0
   2a03c:	d1ed      	bne.n	2a01a <__sfvwrite_r+0x1ea>
   2a03e:	4621      	mov	r1, r4
   2a040:	4648      	mov	r0, r9
   2a042:	f7ff fc81 	bl	29948 <_fflush_r>
   2a046:	2800      	cmp	r0, #0
   2a048:	d0e7      	beq.n	2a01a <__sfvwrite_r+0x1ea>
   2a04a:	e778      	b.n	29f3e <__sfvwrite_r+0x10e>
   2a04c:	46b3      	mov	fp, r6
   2a04e:	6820      	ldr	r0, [r4, #0]
   2a050:	4632      	mov	r2, r6
   2a052:	e744      	b.n	29ede <__sfvwrite_r+0xae>
   2a054:	4621      	mov	r1, r4
   2a056:	4648      	mov	r0, r9
   2a058:	f7ff fc76 	bl	29948 <_fflush_r>
   2a05c:	2800      	cmp	r0, #0
   2a05e:	d0a0      	beq.n	29fa2 <__sfvwrite_r+0x172>
   2a060:	e76d      	b.n	29f3e <__sfvwrite_r+0x10e>
   2a062:	4629      	mov	r1, r5
   2a064:	4693      	mov	fp, r2
   2a066:	9201      	str	r2, [sp, #4]
   2a068:	f000 fd50 	bl	2ab0c <memmove>
   2a06c:	68a1      	ldr	r1, [r4, #8]
   2a06e:	6823      	ldr	r3, [r4, #0]
   2a070:	9a01      	ldr	r2, [sp, #4]
   2a072:	1a89      	subs	r1, r1, r2
   2a074:	441a      	add	r2, r3
   2a076:	60a1      	str	r1, [r4, #8]
   2a078:	6022      	str	r2, [r4, #0]
   2a07a:	e78c      	b.n	29f96 <__sfvwrite_r+0x166>
   2a07c:	6822      	ldr	r2, [r4, #0]
   2a07e:	6921      	ldr	r1, [r4, #16]
   2a080:	6967      	ldr	r7, [r4, #20]
   2a082:	eba2 0b01 	sub.w	fp, r2, r1
   2a086:	eb17 0747 	adds.w	r7, r7, r7, lsl #1
   2a08a:	f10b 0001 	add.w	r0, fp, #1
   2a08e:	bf48      	it	mi
   2a090:	3701      	addmi	r7, #1
   2a092:	4430      	add	r0, r6
   2a094:	107f      	asrs	r7, r7, #1
   2a096:	42b8      	cmp	r0, r7
   2a098:	463a      	mov	r2, r7
   2a09a:	d901      	bls.n	2a0a0 <__sfvwrite_r+0x270>
   2a09c:	4607      	mov	r7, r0
   2a09e:	4602      	mov	r2, r0
   2a0a0:	055b      	lsls	r3, r3, #21
   2a0a2:	d51b      	bpl.n	2a0dc <__sfvwrite_r+0x2ac>
   2a0a4:	4611      	mov	r1, r2
   2a0a6:	4648      	mov	r0, r9
   2a0a8:	f7fb fc52 	bl	25950 <_malloc_r>
   2a0ac:	b358      	cbz	r0, 2a106 <__sfvwrite_r+0x2d6>
   2a0ae:	465a      	mov	r2, fp
   2a0b0:	6921      	ldr	r1, [r4, #16]
   2a0b2:	9000      	str	r0, [sp, #0]
   2a0b4:	f7e2 fd4a 	bl	cb4c <memcpy>
   2a0b8:	89a2      	ldrh	r2, [r4, #12]
   2a0ba:	9b00      	ldr	r3, [sp, #0]
   2a0bc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2a0c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2a0c4:	81a2      	strh	r2, [r4, #12]
   2a0c6:	eba7 020b 	sub.w	r2, r7, fp
   2a0ca:	eb03 000b 	add.w	r0, r3, fp
   2a0ce:	6123      	str	r3, [r4, #16]
   2a0d0:	46b3      	mov	fp, r6
   2a0d2:	60a2      	str	r2, [r4, #8]
   2a0d4:	4632      	mov	r2, r6
   2a0d6:	6020      	str	r0, [r4, #0]
   2a0d8:	6167      	str	r7, [r4, #20]
   2a0da:	e700      	b.n	29ede <__sfvwrite_r+0xae>
   2a0dc:	4648      	mov	r0, r9
   2a0de:	f7fb ffd5 	bl	2608c <_realloc_r>
   2a0e2:	4603      	mov	r3, r0
   2a0e4:	2800      	cmp	r0, #0
   2a0e6:	d1ee      	bne.n	2a0c6 <__sfvwrite_r+0x296>
   2a0e8:	6921      	ldr	r1, [r4, #16]
   2a0ea:	4648      	mov	r0, r9
   2a0ec:	f7ff fd9a 	bl	29c24 <_free_r>
   2a0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a0f4:	220c      	movs	r2, #12
   2a0f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2a0fa:	f8c9 2000 	str.w	r2, [r9]
   2a0fe:	e720      	b.n	29f42 <__sfvwrite_r+0x112>
   2a100:	1c72      	adds	r2, r6, #1
   2a102:	9200      	str	r2, [sp, #0]
   2a104:	e730      	b.n	29f68 <__sfvwrite_r+0x138>
   2a106:	220c      	movs	r2, #12
   2a108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a10c:	f8c9 2000 	str.w	r2, [r9]
   2a110:	e717      	b.n	29f42 <__sfvwrite_r+0x112>
   2a112:	f04f 30ff 	mov.w	r0, #4294967295
   2a116:	e6bd      	b.n	29e94 <__sfvwrite_r+0x64>
   2a118:	7ffffc00 	.word	0x7ffffc00

0002a11c <_fwalk_reent>:
   2a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a120:	2600      	movs	r6, #0
   2a122:	4681      	mov	r9, r0
   2a124:	4688      	mov	r8, r1
   2a126:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
   2a12a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   2a12e:	3d01      	subs	r5, #1
   2a130:	d40f      	bmi.n	2a152 <_fwalk_reent+0x36>
   2a132:	89a3      	ldrh	r3, [r4, #12]
   2a134:	3d01      	subs	r5, #1
   2a136:	2b01      	cmp	r3, #1
   2a138:	d907      	bls.n	2a14a <_fwalk_reent+0x2e>
   2a13a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2a13e:	4621      	mov	r1, r4
   2a140:	4648      	mov	r0, r9
   2a142:	3301      	adds	r3, #1
   2a144:	d001      	beq.n	2a14a <_fwalk_reent+0x2e>
   2a146:	47c0      	blx	r8
   2a148:	4306      	orrs	r6, r0
   2a14a:	1c6b      	adds	r3, r5, #1
   2a14c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   2a150:	d1ef      	bne.n	2a132 <_fwalk_reent+0x16>
   2a152:	683f      	ldr	r7, [r7, #0]
   2a154:	2f00      	cmp	r7, #0
   2a156:	d1e8      	bne.n	2a12a <_fwalk_reent+0xe>
   2a158:	4630      	mov	r0, r6
   2a15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a15e:	bf00      	nop

0002a160 <rshift>:
   2a160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a164:	6906      	ldr	r6, [r0, #16]
   2a166:	ebb6 1f61 	cmp.w	r6, r1, asr #5
   2a16a:	dd2d      	ble.n	2a1c8 <rshift+0x68>
   2a16c:	f100 0414 	add.w	r4, r0, #20
   2a170:	ea4f 1c61 	mov.w	ip, r1, asr #5
   2a174:	f011 051f 	ands.w	r5, r1, #31
   2a178:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   2a17c:	eb04 038c 	add.w	r3, r4, ip, lsl #2
   2a180:	d028      	beq.n	2a1d4 <rshift+0x74>
   2a182:	3304      	adds	r3, #4
   2a184:	f854 202c 	ldr.w	r2, [r4, ip, lsl #2]
   2a188:	f1c5 0e20 	rsb	lr, r5, #32
   2a18c:	429f      	cmp	r7, r3
   2a18e:	fa22 f105 	lsr.w	r1, r2, r5
   2a192:	d935      	bls.n	2a200 <rshift+0xa0>
   2a194:	46a0      	mov	r8, r4
   2a196:	681a      	ldr	r2, [r3, #0]
   2a198:	fa02 f20e 	lsl.w	r2, r2, lr
   2a19c:	430a      	orrs	r2, r1
   2a19e:	f848 2b04 	str.w	r2, [r8], #4
   2a1a2:	f853 1b04 	ldr.w	r1, [r3], #4
   2a1a6:	429f      	cmp	r7, r3
   2a1a8:	fa21 f105 	lsr.w	r1, r1, r5
   2a1ac:	d8f3      	bhi.n	2a196 <rshift+0x36>
   2a1ae:	eba6 030c 	sub.w	r3, r6, ip
   2a1b2:	009b      	lsls	r3, r3, #2
   2a1b4:	3b05      	subs	r3, #5
   2a1b6:	089b      	lsrs	r3, r3, #2
   2a1b8:	3301      	adds	r3, #1
   2a1ba:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   2a1be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2a1c2:	b1a9      	cbz	r1, 2a1f0 <rshift+0x90>
   2a1c4:	3304      	adds	r3, #4
   2a1c6:	e013      	b.n	2a1f0 <rshift+0x90>
   2a1c8:	2300      	movs	r3, #0
   2a1ca:	6103      	str	r3, [r0, #16]
   2a1cc:	2300      	movs	r3, #0
   2a1ce:	6143      	str	r3, [r0, #20]
   2a1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a1d4:	429f      	cmp	r7, r3
   2a1d6:	d9f7      	bls.n	2a1c8 <rshift+0x68>
   2a1d8:	f100 0210 	add.w	r2, r0, #16
   2a1dc:	f853 1b04 	ldr.w	r1, [r3], #4
   2a1e0:	429f      	cmp	r7, r3
   2a1e2:	f842 1f04 	str.w	r1, [r2, #4]!
   2a1e6:	d8f9      	bhi.n	2a1dc <rshift+0x7c>
   2a1e8:	eba6 030c 	sub.w	r3, r6, ip
   2a1ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2a1f0:	1b1a      	subs	r2, r3, r4
   2a1f2:	42a3      	cmp	r3, r4
   2a1f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2a1f8:	6102      	str	r2, [r0, #16]
   2a1fa:	d0e7      	beq.n	2a1cc <rshift+0x6c>
   2a1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a200:	6141      	str	r1, [r0, #20]
   2a202:	2900      	cmp	r1, #0
   2a204:	d0e0      	beq.n	2a1c8 <rshift+0x68>
   2a206:	4623      	mov	r3, r4
   2a208:	e7dc      	b.n	2a1c4 <rshift+0x64>
   2a20a:	bf00      	nop

0002a20c <__gethex>:
   2a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a210:	4cc2      	ldr	r4, [pc, #776]	; (2a51c <__gethex+0x310>)
   2a212:	4689      	mov	r9, r1
   2a214:	6824      	ldr	r4, [r4, #0]
   2a216:	ed2d 8b02 	vpush	{d8}
   2a21a:	b08b      	sub	sp, #44	; 0x2c
   2a21c:	ee08 0a10 	vmov	s16, r0
   2a220:	4620      	mov	r0, r4
   2a222:	9202      	str	r2, [sp, #8]
   2a224:	9307      	str	r3, [sp, #28]
   2a226:	9404      	str	r4, [sp, #16]
   2a228:	f7fc fadc 	bl	267e4 <strlen>
   2a22c:	f8d9 5000 	ldr.w	r5, [r9]
   2a230:	1823      	adds	r3, r4, r0
   2a232:	4602      	mov	r2, r0
   2a234:	78a9      	ldrb	r1, [r5, #2]
   2a236:	f813 bc01 	ldrb.w	fp, [r3, #-1]
   2a23a:	2930      	cmp	r1, #48	; 0x30
   2a23c:	f040 81ef 	bne.w	2a61e <__gethex+0x412>
   2a240:	f06f 0001 	mvn.w	r0, #1
   2a244:	1ceb      	adds	r3, r5, #3
   2a246:	1b40      	subs	r0, r0, r5
   2a248:	eb00 0a03 	add.w	sl, r0, r3
   2a24c:	461d      	mov	r5, r3
   2a24e:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a252:	2930      	cmp	r1, #48	; 0x30
   2a254:	d0f8      	beq.n	2a248 <__gethex+0x3c>
   2a256:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2a520 <__gethex+0x314>
   2a25a:	f818 3001 	ldrb.w	r3, [r8, r1]
   2a25e:	2b00      	cmp	r3, #0
   2a260:	f000 80da 	beq.w	2a418 <__gethex+0x20c>
   2a264:	782b      	ldrb	r3, [r5, #0]
   2a266:	2700      	movs	r7, #0
   2a268:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a26c:	463c      	mov	r4, r7
   2a26e:	462e      	mov	r6, r5
   2a270:	b12b      	cbz	r3, 2a27e <__gethex+0x72>
   2a272:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   2a276:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a27a:	2b00      	cmp	r3, #0
   2a27c:	d1f9      	bne.n	2a272 <__gethex+0x66>
   2a27e:	9904      	ldr	r1, [sp, #16]
   2a280:	4630      	mov	r0, r6
   2a282:	9203      	str	r2, [sp, #12]
   2a284:	f7fc fadc 	bl	26840 <strncmp>
   2a288:	9a03      	ldr	r2, [sp, #12]
   2a28a:	9001      	str	r0, [sp, #4]
   2a28c:	2800      	cmp	r0, #0
   2a28e:	f000 8091 	beq.w	2a3b4 <__gethex+0x1a8>
   2a292:	2c00      	cmp	r4, #0
   2a294:	f040 8091 	bne.w	2a3ba <__gethex+0x1ae>
   2a298:	7833      	ldrb	r3, [r6, #0]
   2a29a:	9401      	str	r4, [sp, #4]
   2a29c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a2a0:	4634      	mov	r4, r6
   2a2a2:	2b50      	cmp	r3, #80	; 0x50
   2a2a4:	f000 8093 	beq.w	2a3ce <__gethex+0x1c2>
   2a2a8:	f8c9 6000 	str.w	r6, [r9]
   2a2ac:	2f00      	cmp	r7, #0
   2a2ae:	f040 80a2 	bne.w	2a3f6 <__gethex+0x1ea>
   2a2b2:	1b63      	subs	r3, r4, r5
   2a2b4:	4639      	mov	r1, r7
   2a2b6:	3b01      	subs	r3, #1
   2a2b8:	2b07      	cmp	r3, #7
   2a2ba:	dd03      	ble.n	2a2c4 <__gethex+0xb8>
   2a2bc:	105b      	asrs	r3, r3, #1
   2a2be:	3101      	adds	r1, #1
   2a2c0:	2b07      	cmp	r3, #7
   2a2c2:	dcfb      	bgt.n	2a2bc <__gethex+0xb0>
   2a2c4:	ee18 0a10 	vmov	r0, s16
   2a2c8:	9205      	str	r2, [sp, #20]
   2a2ca:	f000 fc89 	bl	2abe0 <_Balloc>
   2a2ce:	42a5      	cmp	r5, r4
   2a2d0:	f100 0614 	add.w	r6, r0, #20
   2a2d4:	9003      	str	r0, [sp, #12]
   2a2d6:	9606      	str	r6, [sp, #24]
   2a2d8:	f080 81ca 	bcs.w	2a670 <__gethex+0x464>
   2a2dc:	9a05      	ldr	r2, [sp, #20]
   2a2de:	2700      	movs	r7, #0
   2a2e0:	f1c2 0301 	rsb	r3, r2, #1
   2a2e4:	46b9      	mov	r9, r7
   2a2e6:	9305      	str	r3, [sp, #20]
   2a2e8:	e011      	b.n	2a30e <__gethex+0x102>
   2a2ea:	2f20      	cmp	r7, #32
   2a2ec:	f000 808e 	beq.w	2a40c <__gethex+0x200>
   2a2f0:	4639      	mov	r1, r7
   2a2f2:	3704      	adds	r7, #4
   2a2f4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   2a2f8:	4654      	mov	r4, sl
   2a2fa:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a2fe:	42ac      	cmp	r4, r5
   2a300:	f003 030f 	and.w	r3, r3, #15
   2a304:	fa03 f301 	lsl.w	r3, r3, r1
   2a308:	ea49 0903 	orr.w	r9, r9, r3
   2a30c:	d916      	bls.n	2a33c <__gethex+0x130>
   2a30e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   2a312:	f104 3aff 	add.w	sl, r4, #4294967295
   2a316:	455b      	cmp	r3, fp
   2a318:	d1e7      	bne.n	2a2ea <__gethex+0xde>
   2a31a:	9b05      	ldr	r3, [sp, #20]
   2a31c:	4453      	add	r3, sl
   2a31e:	42ab      	cmp	r3, r5
   2a320:	d3e3      	bcc.n	2a2ea <__gethex+0xde>
   2a322:	4618      	mov	r0, r3
   2a324:	9904      	ldr	r1, [sp, #16]
   2a326:	9209      	str	r2, [sp, #36]	; 0x24
   2a328:	9308      	str	r3, [sp, #32]
   2a32a:	f7fc fa89 	bl	26840 <strncmp>
   2a32e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2a332:	2800      	cmp	r0, #0
   2a334:	d1d9      	bne.n	2a2ea <__gethex+0xde>
   2a336:	461c      	mov	r4, r3
   2a338:	42ac      	cmp	r4, r5
   2a33a:	d8e8      	bhi.n	2a30e <__gethex+0x102>
   2a33c:	9b06      	ldr	r3, [sp, #24]
   2a33e:	4648      	mov	r0, r9
   2a340:	f846 9b04 	str.w	r9, [r6], #4
   2a344:	1af6      	subs	r6, r6, r3
   2a346:	9b03      	ldr	r3, [sp, #12]
   2a348:	10b6      	asrs	r6, r6, #2
   2a34a:	611e      	str	r6, [r3, #16]
   2a34c:	0176      	lsls	r6, r6, #5
   2a34e:	f000 fd09 	bl	2ad64 <__hi0bits>
   2a352:	9b02      	ldr	r3, [sp, #8]
   2a354:	1a30      	subs	r0, r6, r0
   2a356:	681c      	ldr	r4, [r3, #0]
   2a358:	42a0      	cmp	r0, r4
   2a35a:	f300 80be 	bgt.w	2a4da <__gethex+0x2ce>
   2a35e:	f2c0 813d 	blt.w	2a5dc <__gethex+0x3d0>
   2a362:	2700      	movs	r7, #0
   2a364:	9b02      	ldr	r3, [sp, #8]
   2a366:	9a01      	ldr	r2, [sp, #4]
   2a368:	689b      	ldr	r3, [r3, #8]
   2a36a:	4293      	cmp	r3, r2
   2a36c:	f2c0 8176 	blt.w	2a65c <__gethex+0x450>
   2a370:	9802      	ldr	r0, [sp, #8]
   2a372:	9a01      	ldr	r2, [sp, #4]
   2a374:	6843      	ldr	r3, [r0, #4]
   2a376:	4293      	cmp	r3, r2
   2a378:	dd6d      	ble.n	2a456 <__gethex+0x24a>
   2a37a:	1a9d      	subs	r5, r3, r2
   2a37c:	42ac      	cmp	r4, r5
   2a37e:	f300 80d1 	bgt.w	2a524 <__gethex+0x318>
   2a382:	68c2      	ldr	r2, [r0, #12]
   2a384:	2a02      	cmp	r2, #2
   2a386:	f000 818c 	beq.w	2a6a2 <__gethex+0x496>
   2a38a:	2a03      	cmp	r2, #3
   2a38c:	f000 81a7 	beq.w	2a6de <__gethex+0x4d2>
   2a390:	2a01      	cmp	r2, #1
   2a392:	f000 8195 	beq.w	2a6c0 <__gethex+0x4b4>
   2a396:	2550      	movs	r5, #80	; 0x50
   2a398:	ee18 0a10 	vmov	r0, s16
   2a39c:	9903      	ldr	r1, [sp, #12]
   2a39e:	f000 fc45 	bl	2ac2c <_Bfree>
   2a3a2:	2300      	movs	r3, #0
   2a3a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a3a6:	4628      	mov	r0, r5
   2a3a8:	6013      	str	r3, [r2, #0]
   2a3aa:	b00b      	add	sp, #44	; 0x2c
   2a3ac:	ecbd 8b02 	vpop	{d8}
   2a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3b4:	2c00      	cmp	r4, #0
   2a3b6:	f000 8120 	beq.w	2a5fa <__gethex+0x3ee>
   2a3ba:	7833      	ldrb	r3, [r6, #0]
   2a3bc:	1ba4      	subs	r4, r4, r6
   2a3be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a3c2:	00a1      	lsls	r1, r4, #2
   2a3c4:	4634      	mov	r4, r6
   2a3c6:	2b50      	cmp	r3, #80	; 0x50
   2a3c8:	9101      	str	r1, [sp, #4]
   2a3ca:	f47f af6d 	bne.w	2a2a8 <__gethex+0x9c>
   2a3ce:	7863      	ldrb	r3, [r4, #1]
   2a3d0:	2b2b      	cmp	r3, #43	; 0x2b
   2a3d2:	f000 8100 	beq.w	2a5d6 <__gethex+0x3ca>
   2a3d6:	2b2d      	cmp	r3, #45	; 0x2d
   2a3d8:	d05a      	beq.n	2a490 <__gethex+0x284>
   2a3da:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a3de:	1c66      	adds	r6, r4, #1
   2a3e0:	f04f 0c00 	mov.w	ip, #0
   2a3e4:	1e59      	subs	r1, r3, #1
   2a3e6:	2918      	cmp	r1, #24
   2a3e8:	d95b      	bls.n	2a4a2 <__gethex+0x296>
   2a3ea:	4626      	mov	r6, r4
   2a3ec:	f8c9 6000 	str.w	r6, [r9]
   2a3f0:	2f00      	cmp	r7, #0
   2a3f2:	f43f af5e 	beq.w	2a2b2 <__gethex+0xa6>
   2a3f6:	f1ba 0f00 	cmp.w	sl, #0
   2a3fa:	bf14      	ite	ne
   2a3fc:	2500      	movne	r5, #0
   2a3fe:	2506      	moveq	r5, #6
   2a400:	4628      	mov	r0, r5
   2a402:	b00b      	add	sp, #44	; 0x2c
   2a404:	ecbd 8b02 	vpop	{d8}
   2a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a40c:	2100      	movs	r1, #0
   2a40e:	f846 9b04 	str.w	r9, [r6], #4
   2a412:	2704      	movs	r7, #4
   2a414:	4689      	mov	r9, r1
   2a416:	e76d      	b.n	2a2f4 <__gethex+0xe8>
   2a418:	9904      	ldr	r1, [sp, #16]
   2a41a:	4628      	mov	r0, r5
   2a41c:	9201      	str	r2, [sp, #4]
   2a41e:	f7fc fa0f 	bl	26840 <strncmp>
   2a422:	9a01      	ldr	r2, [sp, #4]
   2a424:	2800      	cmp	r0, #0
   2a426:	f040 809b 	bne.w	2a560 <__gethex+0x354>
   2a42a:	5ca9      	ldrb	r1, [r5, r2]
   2a42c:	18ac      	adds	r4, r5, r2
   2a42e:	f818 3001 	ldrb.w	r3, [r8, r1]
   2a432:	2b00      	cmp	r3, #0
   2a434:	f000 8096 	beq.w	2a564 <__gethex+0x358>
   2a438:	2930      	cmp	r1, #48	; 0x30
   2a43a:	4625      	mov	r5, r4
   2a43c:	d105      	bne.n	2a44a <__gethex+0x23e>
   2a43e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   2a442:	2b30      	cmp	r3, #48	; 0x30
   2a444:	d0fb      	beq.n	2a43e <__gethex+0x232>
   2a446:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a44a:	fab3 f783 	clz	r7, r3
   2a44e:	f04f 0a01 	mov.w	sl, #1
   2a452:	097f      	lsrs	r7, r7, #5
   2a454:	e70b      	b.n	2a26e <__gethex+0x62>
   2a456:	2501      	movs	r5, #1
   2a458:	b167      	cbz	r7, 2a474 <__gethex+0x268>
   2a45a:	9b02      	ldr	r3, [sp, #8]
   2a45c:	68db      	ldr	r3, [r3, #12]
   2a45e:	2b02      	cmp	r3, #2
   2a460:	f000 8088 	beq.w	2a574 <__gethex+0x368>
   2a464:	2b03      	cmp	r3, #3
   2a466:	f000 8089 	beq.w	2a57c <__gethex+0x370>
   2a46a:	2b01      	cmp	r3, #1
   2a46c:	f000 80aa 	beq.w	2a5c4 <__gethex+0x3b8>
   2a470:	f045 0510 	orr.w	r5, r5, #16
   2a474:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a476:	4628      	mov	r0, r5
   2a478:	461a      	mov	r2, r3
   2a47a:	9b03      	ldr	r3, [sp, #12]
   2a47c:	6013      	str	r3, [r2, #0]
   2a47e:	9b07      	ldr	r3, [sp, #28]
   2a480:	461a      	mov	r2, r3
   2a482:	9b01      	ldr	r3, [sp, #4]
   2a484:	6013      	str	r3, [r2, #0]
   2a486:	b00b      	add	sp, #44	; 0x2c
   2a488:	ecbd 8b02 	vpop	{d8}
   2a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a490:	f04f 0c01 	mov.w	ip, #1
   2a494:	78a3      	ldrb	r3, [r4, #2]
   2a496:	1ca6      	adds	r6, r4, #2
   2a498:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a49c:	1e59      	subs	r1, r3, #1
   2a49e:	2918      	cmp	r1, #24
   2a4a0:	d8a3      	bhi.n	2a3ea <__gethex+0x1de>
   2a4a2:	7871      	ldrb	r1, [r6, #1]
   2a4a4:	3b10      	subs	r3, #16
   2a4a6:	3601      	adds	r6, #1
   2a4a8:	f818 1001 	ldrb.w	r1, [r8, r1]
   2a4ac:	1e48      	subs	r0, r1, #1
   2a4ae:	2818      	cmp	r0, #24
   2a4b0:	d80b      	bhi.n	2a4ca <__gethex+0x2be>
   2a4b2:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   2a4b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2a4ba:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   2a4be:	f818 1000 	ldrb.w	r1, [r8, r0]
   2a4c2:	1e48      	subs	r0, r1, #1
   2a4c4:	3b10      	subs	r3, #16
   2a4c6:	2818      	cmp	r0, #24
   2a4c8:	d9f3      	bls.n	2a4b2 <__gethex+0x2a6>
   2a4ca:	f1bc 0f00 	cmp.w	ip, #0
   2a4ce:	d000      	beq.n	2a4d2 <__gethex+0x2c6>
   2a4d0:	425b      	negs	r3, r3
   2a4d2:	9901      	ldr	r1, [sp, #4]
   2a4d4:	4419      	add	r1, r3
   2a4d6:	9101      	str	r1, [sp, #4]
   2a4d8:	e6e6      	b.n	2a2a8 <__gethex+0x9c>
   2a4da:	1b06      	subs	r6, r0, r4
   2a4dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
   2a4e0:	4631      	mov	r1, r6
   2a4e2:	4640      	mov	r0, r8
   2a4e4:	f000 fff6 	bl	2b4d4 <__any_on>
   2a4e8:	4607      	mov	r7, r0
   2a4ea:	b178      	cbz	r0, 2a50c <__gethex+0x300>
   2a4ec:	1e72      	subs	r2, r6, #1
   2a4ee:	2701      	movs	r7, #1
   2a4f0:	9d06      	ldr	r5, [sp, #24]
   2a4f2:	1151      	asrs	r1, r2, #5
   2a4f4:	f002 031f 	and.w	r3, r2, #31
   2a4f8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
   2a4fc:	fa07 f303 	lsl.w	r3, r7, r3
   2a500:	420b      	tst	r3, r1
   2a502:	d003      	beq.n	2a50c <__gethex+0x300>
   2a504:	42ba      	cmp	r2, r7
   2a506:	f300 80bf 	bgt.w	2a688 <__gethex+0x47c>
   2a50a:	2702      	movs	r7, #2
   2a50c:	9b01      	ldr	r3, [sp, #4]
   2a50e:	4631      	mov	r1, r6
   2a510:	9803      	ldr	r0, [sp, #12]
   2a512:	4433      	add	r3, r6
   2a514:	9301      	str	r3, [sp, #4]
   2a516:	f7ff fe23 	bl	2a160 <rshift>
   2a51a:	e723      	b.n	2a364 <__gethex+0x158>
   2a51c:	0002f6c8 	.word	0x0002f6c8
   2a520:	0002f5c4 	.word	0x0002f5c4
   2a524:	1e6e      	subs	r6, r5, #1
   2a526:	2f00      	cmp	r7, #0
   2a528:	f040 80a6 	bne.w	2a678 <__gethex+0x46c>
   2a52c:	2e00      	cmp	r6, #0
   2a52e:	f040 80a5 	bne.w	2a67c <__gethex+0x470>
   2a532:	2301      	movs	r3, #1
   2a534:	9906      	ldr	r1, [sp, #24]
   2a536:	1172      	asrs	r2, r6, #5
   2a538:	f006 061f 	and.w	r6, r6, #31
   2a53c:	9803      	ldr	r0, [sp, #12]
   2a53e:	1b64      	subs	r4, r4, r5
   2a540:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   2a544:	fa03 f606 	lsl.w	r6, r3, r6
   2a548:	4629      	mov	r1, r5
   2a54a:	2502      	movs	r5, #2
   2a54c:	4216      	tst	r6, r2
   2a54e:	bf18      	it	ne
   2a550:	f047 0702 	orrne.w	r7, r7, #2
   2a554:	f7ff fe04 	bl	2a160 <rshift>
   2a558:	9b02      	ldr	r3, [sp, #8]
   2a55a:	685b      	ldr	r3, [r3, #4]
   2a55c:	9301      	str	r3, [sp, #4]
   2a55e:	e77b      	b.n	2a458 <__gethex+0x24c>
   2a560:	7829      	ldrb	r1, [r5, #0]
   2a562:	462c      	mov	r4, r5
   2a564:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   2a568:	2950      	cmp	r1, #80	; 0x50
   2a56a:	f000 8096 	beq.w	2a69a <__gethex+0x48e>
   2a56e:	f8c9 4000 	str.w	r4, [r9]
   2a572:	e740      	b.n	2a3f6 <__gethex+0x1ea>
   2a574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2a576:	f1c3 0301 	rsb	r3, r3, #1
   2a57a:	9317      	str	r3, [sp, #92]	; 0x5c
   2a57c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2a57e:	2b00      	cmp	r3, #0
   2a580:	f43f af76 	beq.w	2a470 <__gethex+0x264>
   2a584:	9b03      	ldr	r3, [sp, #12]
   2a586:	2700      	movs	r7, #0
   2a588:	f8dd c018 	ldr.w	ip, [sp, #24]
   2a58c:	691e      	ldr	r6, [r3, #16]
   2a58e:	4663      	mov	r3, ip
   2a590:	eb0c 0086 	add.w	r0, ip, r6, lsl #2
   2a594:	ea4f 0986 	mov.w	r9, r6, lsl #2
   2a598:	e003      	b.n	2a5a2 <__gethex+0x396>
   2a59a:	4298      	cmp	r0, r3
   2a59c:	f843 7c04 	str.w	r7, [r3, #-4]
   2a5a0:	d941      	bls.n	2a626 <__gethex+0x41a>
   2a5a2:	4619      	mov	r1, r3
   2a5a4:	f853 2b04 	ldr.w	r2, [r3], #4
   2a5a8:	f1b2 3fff 	cmp.w	r2, #4294967295
   2a5ac:	d0f5      	beq.n	2a59a <__gethex+0x38e>
   2a5ae:	3201      	adds	r2, #1
   2a5b0:	2d02      	cmp	r5, #2
   2a5b2:	600a      	str	r2, [r1, #0]
   2a5b4:	f000 8098 	beq.w	2a6e8 <__gethex+0x4dc>
   2a5b8:	f014 041f 	ands.w	r4, r4, #31
   2a5bc:	f040 80b7 	bne.w	2a72e <__gethex+0x522>
   2a5c0:	2521      	movs	r5, #33	; 0x21
   2a5c2:	e757      	b.n	2a474 <__gethex+0x268>
   2a5c4:	07ba      	lsls	r2, r7, #30
   2a5c6:	f57f af53 	bpl.w	2a470 <__gethex+0x264>
   2a5ca:	9b06      	ldr	r3, [sp, #24]
   2a5cc:	681b      	ldr	r3, [r3, #0]
   2a5ce:	431f      	orrs	r7, r3
   2a5d0:	07fb      	lsls	r3, r7, #31
   2a5d2:	d4d7      	bmi.n	2a584 <__gethex+0x378>
   2a5d4:	e74c      	b.n	2a470 <__gethex+0x264>
   2a5d6:	f04f 0c00 	mov.w	ip, #0
   2a5da:	e75b      	b.n	2a494 <__gethex+0x288>
   2a5dc:	1a22      	subs	r2, r4, r0
   2a5de:	9b01      	ldr	r3, [sp, #4]
   2a5e0:	9903      	ldr	r1, [sp, #12]
   2a5e2:	ee18 0a10 	vmov	r0, s16
   2a5e6:	1a9b      	subs	r3, r3, r2
   2a5e8:	2700      	movs	r7, #0
   2a5ea:	9301      	str	r3, [sp, #4]
   2a5ec:	f000 fd08 	bl	2b000 <__lshift>
   2a5f0:	4603      	mov	r3, r0
   2a5f2:	9003      	str	r0, [sp, #12]
   2a5f4:	3314      	adds	r3, #20
   2a5f6:	9306      	str	r3, [sp, #24]
   2a5f8:	e6b4      	b.n	2a364 <__gethex+0x158>
   2a5fa:	5cb3      	ldrb	r3, [r6, r2]
   2a5fc:	18b0      	adds	r0, r6, r2
   2a5fe:	f818 1003 	ldrb.w	r1, [r8, r3]
   2a602:	4606      	mov	r6, r0
   2a604:	2900      	cmp	r1, #0
   2a606:	f43f ae49 	beq.w	2a29c <__gethex+0x90>
   2a60a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   2a60e:	f818 1003 	ldrb.w	r1, [r8, r3]
   2a612:	2900      	cmp	r1, #0
   2a614:	d1f9      	bne.n	2a60a <__gethex+0x3fe>
   2a616:	1b80      	subs	r0, r0, r6
   2a618:	0081      	lsls	r1, r0, #2
   2a61a:	9101      	str	r1, [sp, #4]
   2a61c:	e63e      	b.n	2a29c <__gethex+0x90>
   2a61e:	3502      	adds	r5, #2
   2a620:	f04f 0a00 	mov.w	sl, #0
   2a624:	e617      	b.n	2a256 <__gethex+0x4a>
   2a626:	9b03      	ldr	r3, [sp, #12]
   2a628:	689b      	ldr	r3, [r3, #8]
   2a62a:	429e      	cmp	r6, r3
   2a62c:	da63      	bge.n	2a6f6 <__gethex+0x4ea>
   2a62e:	4633      	mov	r3, r6
   2a630:	9803      	ldr	r0, [sp, #12]
   2a632:	1c5a      	adds	r2, r3, #1
   2a634:	2101      	movs	r1, #1
   2a636:	2d02      	cmp	r5, #2
   2a638:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2a63c:	6102      	str	r2, [r0, #16]
   2a63e:	6159      	str	r1, [r3, #20]
   2a640:	d052      	beq.n	2a6e8 <__gethex+0x4dc>
   2a642:	4296      	cmp	r6, r2
   2a644:	dab8      	bge.n	2a5b8 <__gethex+0x3ac>
   2a646:	9c01      	ldr	r4, [sp, #4]
   2a648:	2101      	movs	r1, #1
   2a64a:	9803      	ldr	r0, [sp, #12]
   2a64c:	440c      	add	r4, r1
   2a64e:	9401      	str	r4, [sp, #4]
   2a650:	f7ff fd86 	bl	2a160 <rshift>
   2a654:	9b02      	ldr	r3, [sp, #8]
   2a656:	689b      	ldr	r3, [r3, #8]
   2a658:	42a3      	cmp	r3, r4
   2a65a:	dab1      	bge.n	2a5c0 <__gethex+0x3b4>
   2a65c:	9903      	ldr	r1, [sp, #12]
   2a65e:	ee18 0a10 	vmov	r0, s16
   2a662:	f000 fae3 	bl	2ac2c <_Bfree>
   2a666:	2300      	movs	r3, #0
   2a668:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a66a:	25a3      	movs	r5, #163	; 0xa3
   2a66c:	6013      	str	r3, [r2, #0]
   2a66e:	e6c7      	b.n	2a400 <__gethex+0x1f4>
   2a670:	9e06      	ldr	r6, [sp, #24]
   2a672:	f04f 0900 	mov.w	r9, #0
   2a676:	e661      	b.n	2a33c <__gethex+0x130>
   2a678:	2701      	movs	r7, #1
   2a67a:	e75a      	b.n	2a532 <__gethex+0x326>
   2a67c:	4631      	mov	r1, r6
   2a67e:	9803      	ldr	r0, [sp, #12]
   2a680:	f000 ff28 	bl	2b4d4 <__any_on>
   2a684:	4607      	mov	r7, r0
   2a686:	e754      	b.n	2a532 <__gethex+0x326>
   2a688:	1eb1      	subs	r1, r6, #2
   2a68a:	4640      	mov	r0, r8
   2a68c:	f000 ff22 	bl	2b4d4 <__any_on>
   2a690:	2800      	cmp	r0, #0
   2a692:	f43f af3a 	beq.w	2a50a <__gethex+0x2fe>
   2a696:	2703      	movs	r7, #3
   2a698:	e738      	b.n	2a50c <__gethex+0x300>
   2a69a:	2300      	movs	r3, #0
   2a69c:	2701      	movs	r7, #1
   2a69e:	9301      	str	r3, [sp, #4]
   2a6a0:	e695      	b.n	2a3ce <__gethex+0x1c2>
   2a6a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2a6a4:	2a00      	cmp	r2, #0
   2a6a6:	f47f ae76 	bne.w	2a396 <__gethex+0x18a>
   2a6aa:	9907      	ldr	r1, [sp, #28]
   2a6ac:	2201      	movs	r2, #1
   2a6ae:	2562      	movs	r5, #98	; 0x62
   2a6b0:	600b      	str	r3, [r1, #0]
   2a6b2:	9b03      	ldr	r3, [sp, #12]
   2a6b4:	9906      	ldr	r1, [sp, #24]
   2a6b6:	611a      	str	r2, [r3, #16]
   2a6b8:	600a      	str	r2, [r1, #0]
   2a6ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a6bc:	6013      	str	r3, [r2, #0]
   2a6be:	e69f      	b.n	2a400 <__gethex+0x1f4>
   2a6c0:	42ac      	cmp	r4, r5
   2a6c2:	f47f ae68 	bne.w	2a396 <__gethex+0x18a>
   2a6c6:	2c01      	cmp	r4, #1
   2a6c8:	d0ef      	beq.n	2a6aa <__gethex+0x49e>
   2a6ca:	1e61      	subs	r1, r4, #1
   2a6cc:	9803      	ldr	r0, [sp, #12]
   2a6ce:	f000 ff01 	bl	2b4d4 <__any_on>
   2a6d2:	2800      	cmp	r0, #0
   2a6d4:	f43f ae5f 	beq.w	2a396 <__gethex+0x18a>
   2a6d8:	9b02      	ldr	r3, [sp, #8]
   2a6da:	685b      	ldr	r3, [r3, #4]
   2a6dc:	e7e5      	b.n	2a6aa <__gethex+0x49e>
   2a6de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2a6e0:	2a00      	cmp	r2, #0
   2a6e2:	f43f ae58 	beq.w	2a396 <__gethex+0x18a>
   2a6e6:	e7e0      	b.n	2a6aa <__gethex+0x49e>
   2a6e8:	9b02      	ldr	r3, [sp, #8]
   2a6ea:	681b      	ldr	r3, [r3, #0]
   2a6ec:	3b01      	subs	r3, #1
   2a6ee:	42a3      	cmp	r3, r4
   2a6f0:	d029      	beq.n	2a746 <__gethex+0x53a>
   2a6f2:	2522      	movs	r5, #34	; 0x22
   2a6f4:	e6be      	b.n	2a474 <__gethex+0x268>
   2a6f6:	9f03      	ldr	r7, [sp, #12]
   2a6f8:	ee18 0a10 	vmov	r0, s16
   2a6fc:	6879      	ldr	r1, [r7, #4]
   2a6fe:	3101      	adds	r1, #1
   2a700:	f000 fa6e 	bl	2abe0 <_Balloc>
   2a704:	693b      	ldr	r3, [r7, #16]
   2a706:	4680      	mov	r8, r0
   2a708:	f107 010c 	add.w	r1, r7, #12
   2a70c:	3302      	adds	r3, #2
   2a70e:	300c      	adds	r0, #12
   2a710:	009a      	lsls	r2, r3, #2
   2a712:	f7e2 fa1b 	bl	cb4c <memcpy>
   2a716:	4639      	mov	r1, r7
   2a718:	ee18 0a10 	vmov	r0, s16
   2a71c:	f8cd 800c 	str.w	r8, [sp, #12]
   2a720:	f000 fa84 	bl	2ac2c <_Bfree>
   2a724:	f108 0c14 	add.w	ip, r8, #20
   2a728:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2a72c:	e780      	b.n	2a630 <__gethex+0x424>
   2a72e:	eb0c 0709 	add.w	r7, ip, r9
   2a732:	f1c4 0420 	rsb	r4, r4, #32
   2a736:	f857 0c04 	ldr.w	r0, [r7, #-4]
   2a73a:	f000 fb13 	bl	2ad64 <__hi0bits>
   2a73e:	42a0      	cmp	r0, r4
   2a740:	f6bf af3e 	bge.w	2a5c0 <__gethex+0x3b4>
   2a744:	e77f      	b.n	2a646 <__gethex+0x43a>
   2a746:	1162      	asrs	r2, r4, #5
   2a748:	2301      	movs	r3, #1
   2a74a:	f004 041f 	and.w	r4, r4, #31
   2a74e:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   2a752:	40a3      	lsls	r3, r4
   2a754:	4213      	tst	r3, r2
   2a756:	bf0c      	ite	eq
   2a758:	2522      	moveq	r5, #34	; 0x22
   2a75a:	2521      	movne	r5, #33	; 0x21
   2a75c:	e68a      	b.n	2a474 <__gethex+0x268>
   2a75e:	bf00      	nop

0002a760 <__match>:
   2a760:	b470      	push	{r4, r5, r6}
   2a762:	4606      	mov	r6, r0
   2a764:	6804      	ldr	r4, [r0, #0]
   2a766:	e008      	b.n	2a77a <__match+0x1a>
   2a768:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2a76c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
   2a770:	2d19      	cmp	r5, #25
   2a772:	bf98      	it	ls
   2a774:	3320      	addls	r3, #32
   2a776:	4293      	cmp	r3, r2
   2a778:	d108      	bne.n	2a78c <__match+0x2c>
   2a77a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2a77e:	2a00      	cmp	r2, #0
   2a780:	d1f2      	bne.n	2a768 <__match+0x8>
   2a782:	3401      	adds	r4, #1
   2a784:	2001      	movs	r0, #1
   2a786:	6034      	str	r4, [r6, #0]
   2a788:	bc70      	pop	{r4, r5, r6}
   2a78a:	4770      	bx	lr
   2a78c:	2000      	movs	r0, #0
   2a78e:	bc70      	pop	{r4, r5, r6}
   2a790:	4770      	bx	lr
   2a792:	bf00      	nop

0002a794 <__hexnan>:
   2a794:	6809      	ldr	r1, [r1, #0]
   2a796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a79a:	114b      	asrs	r3, r1, #5
   2a79c:	b085      	sub	sp, #20
   2a79e:	f011 011f 	ands.w	r1, r1, #31
   2a7a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2a7a6:	9002      	str	r0, [sp, #8]
   2a7a8:	9103      	str	r1, [sp, #12]
   2a7aa:	f040 809c 	bne.w	2a8e6 <__hexnan+0x152>
   2a7ae:	f1a3 0c04 	sub.w	ip, r3, #4
   2a7b2:	9301      	str	r3, [sp, #4]
   2a7b4:	9902      	ldr	r1, [sp, #8]
   2a7b6:	2300      	movs	r3, #0
   2a7b8:	9801      	ldr	r0, [sp, #4]
   2a7ba:	6809      	ldr	r1, [r1, #0]
   2a7bc:	f840 3c04 	str.w	r3, [r0, #-4]
   2a7c0:	1c4f      	adds	r7, r1, #1
   2a7c2:	7849      	ldrb	r1, [r1, #1]
   2a7c4:	2900      	cmp	r1, #0
   2a7c6:	f000 80a4 	beq.w	2a912 <__hexnan+0x17e>
   2a7ca:	46e0      	mov	r8, ip
   2a7cc:	4664      	mov	r4, ip
   2a7ce:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2a930 <__hexnan+0x19c>
   2a7d2:	469a      	mov	sl, r3
   2a7d4:	469e      	mov	lr, r3
   2a7d6:	e00e      	b.n	2a7f6 <__hexnan+0x62>
   2a7d8:	2920      	cmp	r1, #32
   2a7da:	f200 8098 	bhi.w	2a90e <__hexnan+0x17a>
   2a7de:	45f2      	cmp	sl, lr
   2a7e0:	da06      	bge.n	2a7f0 <__hexnan+0x5c>
   2a7e2:	4544      	cmp	r4, r8
   2a7e4:	d201      	bcs.n	2a7ea <__hexnan+0x56>
   2a7e6:	2b07      	cmp	r3, #7
   2a7e8:	dd6a      	ble.n	2a8c0 <__hexnan+0x12c>
   2a7ea:	42a2      	cmp	r2, r4
   2a7ec:	d360      	bcc.n	2a8b0 <__hexnan+0x11c>
   2a7ee:	2308      	movs	r3, #8
   2a7f0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   2a7f4:	b191      	cbz	r1, 2a81c <__hexnan+0x88>
   2a7f6:	f819 0001 	ldrb.w	r0, [r9, r1]
   2a7fa:	2800      	cmp	r0, #0
   2a7fc:	d0ec      	beq.n	2a7d8 <__hexnan+0x44>
   2a7fe:	3301      	adds	r3, #1
   2a800:	f10e 0e01 	add.w	lr, lr, #1
   2a804:	2b08      	cmp	r3, #8
   2a806:	dc4b      	bgt.n	2a8a0 <__hexnan+0x10c>
   2a808:	6821      	ldr	r1, [r4, #0]
   2a80a:	0109      	lsls	r1, r1, #4
   2a80c:	f000 000f 	and.w	r0, r0, #15
   2a810:	4308      	orrs	r0, r1
   2a812:	6020      	str	r0, [r4, #0]
   2a814:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   2a818:	2900      	cmp	r1, #0
   2a81a:	d1ec      	bne.n	2a7f6 <__hexnan+0x62>
   2a81c:	f1be 0f00 	cmp.w	lr, #0
   2a820:	d077      	beq.n	2a912 <__hexnan+0x17e>
   2a822:	45a0      	cmp	r8, r4
   2a824:	d913      	bls.n	2a84e <__hexnan+0xba>
   2a826:	2b07      	cmp	r3, #7
   2a828:	dc11      	bgt.n	2a84e <__hexnan+0xba>
   2a82a:	f1c3 0308 	rsb	r3, r3, #8
   2a82e:	6825      	ldr	r5, [r4, #0]
   2a830:	4621      	mov	r1, r4
   2a832:	009b      	lsls	r3, r3, #2
   2a834:	f1c3 0720 	rsb	r7, r3, #32
   2a838:	684e      	ldr	r6, [r1, #4]
   2a83a:	fa06 f007 	lsl.w	r0, r6, r7
   2a83e:	4328      	orrs	r0, r5
   2a840:	fa26 f503 	lsr.w	r5, r6, r3
   2a844:	6008      	str	r0, [r1, #0]
   2a846:	f841 5f04 	str.w	r5, [r1, #4]!
   2a84a:	4588      	cmp	r8, r1
   2a84c:	d8f4      	bhi.n	2a838 <__hexnan+0xa4>
   2a84e:	42a2      	cmp	r2, r4
   2a850:	d24d      	bcs.n	2a8ee <__hexnan+0x15a>
   2a852:	1f11      	subs	r1, r2, #4
   2a854:	4623      	mov	r3, r4
   2a856:	f853 0b04 	ldr.w	r0, [r3], #4
   2a85a:	4563      	cmp	r3, ip
   2a85c:	f841 0f04 	str.w	r0, [r1, #4]!
   2a860:	d9f9      	bls.n	2a856 <__hexnan+0xc2>
   2a862:	ebac 0304 	sub.w	r3, ip, r4
   2a866:	f10c 0001 	add.w	r0, ip, #1
   2a86a:	3401      	adds	r4, #1
   2a86c:	2100      	movs	r1, #0
   2a86e:	f023 0303 	bic.w	r3, r3, #3
   2a872:	3304      	adds	r3, #4
   2a874:	42a0      	cmp	r0, r4
   2a876:	bf38      	it	cc
   2a878:	2304      	movcc	r3, #4
   2a87a:	4413      	add	r3, r2
   2a87c:	f843 1b04 	str.w	r1, [r3], #4
   2a880:	4563      	cmp	r3, ip
   2a882:	d9fb      	bls.n	2a87c <__hexnan+0xe8>
   2a884:	9b01      	ldr	r3, [sp, #4]
   2a886:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2a88a:	b92b      	cbnz	r3, 2a898 <__hexnan+0x104>
   2a88c:	4562      	cmp	r2, ip
   2a88e:	d044      	beq.n	2a91a <__hexnan+0x186>
   2a890:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   2a894:	2b00      	cmp	r3, #0
   2a896:	d0f9      	beq.n	2a88c <__hexnan+0xf8>
   2a898:	2005      	movs	r0, #5
   2a89a:	b005      	add	sp, #20
   2a89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8a0:	42a2      	cmp	r2, r4
   2a8a2:	d2a5      	bcs.n	2a7f0 <__hexnan+0x5c>
   2a8a4:	2300      	movs	r3, #0
   2a8a6:	3c04      	subs	r4, #4
   2a8a8:	6023      	str	r3, [r4, #0]
   2a8aa:	4619      	mov	r1, r3
   2a8ac:	2301      	movs	r3, #1
   2a8ae:	e7ad      	b.n	2a80c <__hexnan+0x78>
   2a8b0:	f1a4 0804 	sub.w	r8, r4, #4
   2a8b4:	2300      	movs	r3, #0
   2a8b6:	46f2      	mov	sl, lr
   2a8b8:	f844 3c04 	str.w	r3, [r4, #-4]
   2a8bc:	4644      	mov	r4, r8
   2a8be:	e797      	b.n	2a7f0 <__hexnan+0x5c>
   2a8c0:	f1c3 0108 	rsb	r1, r3, #8
   2a8c4:	6825      	ldr	r5, [r4, #0]
   2a8c6:	4623      	mov	r3, r4
   2a8c8:	0089      	lsls	r1, r1, #2
   2a8ca:	f1c1 0b20 	rsb	fp, r1, #32
   2a8ce:	685e      	ldr	r6, [r3, #4]
   2a8d0:	fa06 f00b 	lsl.w	r0, r6, fp
   2a8d4:	4328      	orrs	r0, r5
   2a8d6:	fa26 f501 	lsr.w	r5, r6, r1
   2a8da:	6018      	str	r0, [r3, #0]
   2a8dc:	f843 5f04 	str.w	r5, [r3, #4]!
   2a8e0:	4543      	cmp	r3, r8
   2a8e2:	d3f4      	bcc.n	2a8ce <__hexnan+0x13a>
   2a8e4:	e781      	b.n	2a7ea <__hexnan+0x56>
   2a8e6:	1d19      	adds	r1, r3, #4
   2a8e8:	469c      	mov	ip, r3
   2a8ea:	9101      	str	r1, [sp, #4]
   2a8ec:	e762      	b.n	2a7b4 <__hexnan+0x20>
   2a8ee:	9b03      	ldr	r3, [sp, #12]
   2a8f0:	2b00      	cmp	r3, #0
   2a8f2:	d0c7      	beq.n	2a884 <__hexnan+0xf0>
   2a8f4:	9b03      	ldr	r3, [sp, #12]
   2a8f6:	9c01      	ldr	r4, [sp, #4]
   2a8f8:	f1c3 0120 	rsb	r1, r3, #32
   2a8fc:	f04f 33ff 	mov.w	r3, #4294967295
   2a900:	f854 0c04 	ldr.w	r0, [r4, #-4]
   2a904:	40cb      	lsrs	r3, r1
   2a906:	4003      	ands	r3, r0
   2a908:	f844 3c04 	str.w	r3, [r4, #-4]
   2a90c:	e7bd      	b.n	2a88a <__hexnan+0xf6>
   2a90e:	2929      	cmp	r1, #41	; 0x29
   2a910:	d00a      	beq.n	2a928 <__hexnan+0x194>
   2a912:	2004      	movs	r0, #4
   2a914:	b005      	add	sp, #20
   2a916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a91a:	2301      	movs	r3, #1
   2a91c:	2005      	movs	r0, #5
   2a91e:	f8cc 3000 	str.w	r3, [ip]
   2a922:	b005      	add	sp, #20
   2a924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a928:	3701      	adds	r7, #1
   2a92a:	9902      	ldr	r1, [sp, #8]
   2a92c:	600f      	str	r7, [r1, #0]
   2a92e:	e775      	b.n	2a81c <__hexnan+0x88>
   2a930:	0002f5c4 	.word	0x0002f5c4

0002a934 <iswspace>:
   2a934:	2100      	movs	r1, #0
   2a936:	f000 b801 	b.w	2a93c <iswspace_l>
   2a93a:	bf00      	nop

0002a93c <iswspace_l>:
   2a93c:	28ff      	cmp	r0, #255	; 0xff
   2a93e:	d804      	bhi.n	2a94a <iswspace_l+0xe>
   2a940:	4b03      	ldr	r3, [pc, #12]	; (2a950 <iswspace_l+0x14>)
   2a942:	5cc0      	ldrb	r0, [r0, r3]
   2a944:	f000 0008 	and.w	r0, r0, #8
   2a948:	4770      	bx	lr
   2a94a:	2000      	movs	r0, #0
   2a94c:	4770      	bx	lr
   2a94e:	bf00      	nop
   2a950:	0002f3c9 	.word	0x0002f3c9

0002a954 <__locale_mb_cur_max>:
   2a954:	4b01      	ldr	r3, [pc, #4]	; (2a95c <__locale_mb_cur_max+0x8>)
   2a956:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   2a95a:	4770      	bx	lr
   2a95c:	200208f0 	.word	0x200208f0

0002a960 <_localeconv_r>:
   2a960:	4800      	ldr	r0, [pc, #0]	; (2a964 <_localeconv_r+0x4>)
   2a962:	4770      	bx	lr
   2a964:	200209e0 	.word	0x200209e0

0002a968 <__retarget_lock_init_recursive>:
   2a968:	4770      	bx	lr
   2a96a:	bf00      	nop

0002a96c <__retarget_lock_close_recursive>:
   2a96c:	4770      	bx	lr
   2a96e:	bf00      	nop

0002a970 <__retarget_lock_acquire_recursive>:
   2a970:	4770      	bx	lr
   2a972:	bf00      	nop

0002a974 <__retarget_lock_release_recursive>:
   2a974:	4770      	bx	lr
   2a976:	bf00      	nop

0002a978 <_lseek_r>:
   2a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a97a:	460f      	mov	r7, r1
   2a97c:	4d08      	ldr	r5, [pc, #32]	; (2a9a0 <_lseek_r+0x28>)
   2a97e:	2600      	movs	r6, #0
   2a980:	4611      	mov	r1, r2
   2a982:	4604      	mov	r4, r0
   2a984:	461a      	mov	r2, r3
   2a986:	4638      	mov	r0, r7
   2a988:	602e      	str	r6, [r5, #0]
   2a98a:	f002 f979 	bl	2cc80 <_lseek>
   2a98e:	1c43      	adds	r3, r0, #1
   2a990:	d000      	beq.n	2a994 <_lseek_r+0x1c>
   2a992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a994:	682b      	ldr	r3, [r5, #0]
   2a996:	2b00      	cmp	r3, #0
   2a998:	d0fb      	beq.n	2a992 <_lseek_r+0x1a>
   2a99a:	6023      	str	r3, [r4, #0]
   2a99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a99e:	bf00      	nop
   2a9a0:	20026424 	.word	0x20026424

0002a9a4 <__swhatbuf_r>:
   2a9a4:	b570      	push	{r4, r5, r6, lr}
   2a9a6:	460c      	mov	r4, r1
   2a9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a9ac:	b096      	sub	sp, #88	; 0x58
   2a9ae:	4615      	mov	r5, r2
   2a9b0:	2900      	cmp	r1, #0
   2a9b2:	461e      	mov	r6, r3
   2a9b4:	db14      	blt.n	2a9e0 <__swhatbuf_r+0x3c>
   2a9b6:	466a      	mov	r2, sp
   2a9b8:	f001 fad0 	bl	2bf5c <_fstat_r>
   2a9bc:	2800      	cmp	r0, #0
   2a9be:	db0f      	blt.n	2a9e0 <__swhatbuf_r+0x3c>
   2a9c0:	9a01      	ldr	r2, [sp, #4]
   2a9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2a9c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   2a9ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2a9ce:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   2a9d2:	fab2 f282 	clz	r2, r2
   2a9d6:	0952      	lsrs	r2, r2, #5
   2a9d8:	6032      	str	r2, [r6, #0]
   2a9da:	602b      	str	r3, [r5, #0]
   2a9dc:	b016      	add	sp, #88	; 0x58
   2a9de:	bd70      	pop	{r4, r5, r6, pc}
   2a9e0:	89a1      	ldrh	r1, [r4, #12]
   2a9e2:	2300      	movs	r3, #0
   2a9e4:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   2a9e8:	6033      	str	r3, [r6, #0]
   2a9ea:	d004      	beq.n	2a9f6 <__swhatbuf_r+0x52>
   2a9ec:	2240      	movs	r2, #64	; 0x40
   2a9ee:	4618      	mov	r0, r3
   2a9f0:	602a      	str	r2, [r5, #0]
   2a9f2:	b016      	add	sp, #88	; 0x58
   2a9f4:	bd70      	pop	{r4, r5, r6, pc}
   2a9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2a9fa:	602b      	str	r3, [r5, #0]
   2a9fc:	b016      	add	sp, #88	; 0x58
   2a9fe:	bd70      	pop	{r4, r5, r6, pc}

0002aa00 <__smakebuf_r>:
   2aa00:	898b      	ldrh	r3, [r1, #12]
   2aa02:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa04:	079d      	lsls	r5, r3, #30
   2aa06:	b083      	sub	sp, #12
   2aa08:	460c      	mov	r4, r1
   2aa0a:	d507      	bpl.n	2aa1c <__smakebuf_r+0x1c>
   2aa0c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   2aa10:	2201      	movs	r2, #1
   2aa12:	600b      	str	r3, [r1, #0]
   2aa14:	e9c1 3204 	strd	r3, r2, [r1, #16]
   2aa18:	b003      	add	sp, #12
   2aa1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa1c:	4606      	mov	r6, r0
   2aa1e:	ab01      	add	r3, sp, #4
   2aa20:	466a      	mov	r2, sp
   2aa22:	f7ff ffbf 	bl	2a9a4 <__swhatbuf_r>
   2aa26:	9900      	ldr	r1, [sp, #0]
   2aa28:	4605      	mov	r5, r0
   2aa2a:	4630      	mov	r0, r6
   2aa2c:	f7fa ff90 	bl	25950 <_malloc_r>
   2aa30:	b180      	cbz	r0, 2aa54 <__smakebuf_r+0x54>
   2aa32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2aa36:	4f17      	ldr	r7, [pc, #92]	; (2aa94 <__smakebuf_r+0x94>)
   2aa38:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   2aa3c:	9900      	ldr	r1, [sp, #0]
   2aa3e:	9a01      	ldr	r2, [sp, #4]
   2aa40:	63f7      	str	r7, [r6, #60]	; 0x3c
   2aa42:	81a3      	strh	r3, [r4, #12]
   2aa44:	6020      	str	r0, [r4, #0]
   2aa46:	e9c4 0104 	strd	r0, r1, [r4, #16]
   2aa4a:	b99a      	cbnz	r2, 2aa74 <__smakebuf_r+0x74>
   2aa4c:	432b      	orrs	r3, r5
   2aa4e:	81a3      	strh	r3, [r4, #12]
   2aa50:	b003      	add	sp, #12
   2aa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2aa58:	059a      	lsls	r2, r3, #22
   2aa5a:	d4dd      	bmi.n	2aa18 <__smakebuf_r+0x18>
   2aa5c:	f023 0303 	bic.w	r3, r3, #3
   2aa60:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2aa64:	2101      	movs	r1, #1
   2aa66:	f043 0302 	orr.w	r3, r3, #2
   2aa6a:	6022      	str	r2, [r4, #0]
   2aa6c:	6122      	str	r2, [r4, #16]
   2aa6e:	81a3      	strh	r3, [r4, #12]
   2aa70:	6161      	str	r1, [r4, #20]
   2aa72:	e7d1      	b.n	2aa18 <__smakebuf_r+0x18>
   2aa74:	4630      	mov	r0, r6
   2aa76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2aa7a:	f001 fa85 	bl	2bf88 <_isatty_r>
   2aa7e:	b910      	cbnz	r0, 2aa86 <__smakebuf_r+0x86>
   2aa80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2aa84:	e7e2      	b.n	2aa4c <__smakebuf_r+0x4c>
   2aa86:	89a2      	ldrh	r2, [r4, #12]
   2aa88:	f022 0203 	bic.w	r2, r2, #3
   2aa8c:	f042 0201 	orr.w	r2, r2, #1
   2aa90:	b213      	sxth	r3, r2
   2aa92:	e7db      	b.n	2aa4c <__smakebuf_r+0x4c>
   2aa94:	000299f9 	.word	0x000299f9

0002aa98 <_mbrtowc_r>:
   2aa98:	b570      	push	{r4, r5, r6, lr}
   2aa9a:	b082      	sub	sp, #8
   2aa9c:	4606      	mov	r6, r0
   2aa9e:	9c06      	ldr	r4, [sp, #24]
   2aaa0:	b142      	cbz	r2, 2aab4 <_mbrtowc_r+0x1c>
   2aaa2:	4d0d      	ldr	r5, [pc, #52]	; (2aad8 <_mbrtowc_r+0x40>)
   2aaa4:	9400      	str	r4, [sp, #0]
   2aaa6:	f8d5 50e4 	ldr.w	r5, [r5, #228]	; 0xe4
   2aaaa:	47a8      	blx	r5
   2aaac:	1c43      	adds	r3, r0, #1
   2aaae:	d00c      	beq.n	2aaca <_mbrtowc_r+0x32>
   2aab0:	b002      	add	sp, #8
   2aab2:	bd70      	pop	{r4, r5, r6, pc}
   2aab4:	4615      	mov	r5, r2
   2aab6:	4a08      	ldr	r2, [pc, #32]	; (2aad8 <_mbrtowc_r+0x40>)
   2aab8:	2301      	movs	r3, #1
   2aaba:	9400      	str	r4, [sp, #0]
   2aabc:	4629      	mov	r1, r5
   2aabe:	f8d2 50e4 	ldr.w	r5, [r2, #228]	; 0xe4
   2aac2:	4a06      	ldr	r2, [pc, #24]	; (2aadc <_mbrtowc_r+0x44>)
   2aac4:	47a8      	blx	r5
   2aac6:	1c43      	adds	r3, r0, #1
   2aac8:	d1f2      	bne.n	2aab0 <_mbrtowc_r+0x18>
   2aaca:	2200      	movs	r2, #0
   2aacc:	238a      	movs	r3, #138	; 0x8a
   2aace:	6022      	str	r2, [r4, #0]
   2aad0:	6033      	str	r3, [r6, #0]
   2aad2:	b002      	add	sp, #8
   2aad4:	bd70      	pop	{r4, r5, r6, pc}
   2aad6:	bf00      	nop
   2aad8:	200208f0 	.word	0x200208f0
   2aadc:	0002f394 	.word	0x0002f394

0002aae0 <__ascii_mbtowc>:
   2aae0:	b082      	sub	sp, #8
   2aae2:	b149      	cbz	r1, 2aaf8 <__ascii_mbtowc+0x18>
   2aae4:	b15a      	cbz	r2, 2aafe <__ascii_mbtowc+0x1e>
   2aae6:	b16b      	cbz	r3, 2ab04 <__ascii_mbtowc+0x24>
   2aae8:	7813      	ldrb	r3, [r2, #0]
   2aaea:	600b      	str	r3, [r1, #0]
   2aaec:	7812      	ldrb	r2, [r2, #0]
   2aaee:	1e10      	subs	r0, r2, #0
   2aaf0:	bf18      	it	ne
   2aaf2:	2001      	movne	r0, #1
   2aaf4:	b002      	add	sp, #8
   2aaf6:	4770      	bx	lr
   2aaf8:	a901      	add	r1, sp, #4
   2aafa:	2a00      	cmp	r2, #0
   2aafc:	d1f3      	bne.n	2aae6 <__ascii_mbtowc+0x6>
   2aafe:	4610      	mov	r0, r2
   2ab00:	b002      	add	sp, #8
   2ab02:	4770      	bx	lr
   2ab04:	f06f 0001 	mvn.w	r0, #1
   2ab08:	e7f4      	b.n	2aaf4 <__ascii_mbtowc+0x14>
   2ab0a:	bf00      	nop

0002ab0c <memmove>:
   2ab0c:	4288      	cmp	r0, r1
   2ab0e:	b4f0      	push	{r4, r5, r6, r7}
   2ab10:	d90d      	bls.n	2ab2e <memmove+0x22>
   2ab12:	188b      	adds	r3, r1, r2
   2ab14:	4283      	cmp	r3, r0
   2ab16:	d90a      	bls.n	2ab2e <memmove+0x22>
   2ab18:	1884      	adds	r4, r0, r2
   2ab1a:	b132      	cbz	r2, 2ab2a <memmove+0x1e>
   2ab1c:	4622      	mov	r2, r4
   2ab1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2ab22:	4299      	cmp	r1, r3
   2ab24:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2ab28:	d1f9      	bne.n	2ab1e <memmove+0x12>
   2ab2a:	bcf0      	pop	{r4, r5, r6, r7}
   2ab2c:	4770      	bx	lr
   2ab2e:	2a0f      	cmp	r2, #15
   2ab30:	d80e      	bhi.n	2ab50 <memmove+0x44>
   2ab32:	4603      	mov	r3, r0
   2ab34:	1e54      	subs	r4, r2, #1
   2ab36:	2a00      	cmp	r2, #0
   2ab38:	d0f7      	beq.n	2ab2a <memmove+0x1e>
   2ab3a:	3401      	adds	r4, #1
   2ab3c:	3b01      	subs	r3, #1
   2ab3e:	440c      	add	r4, r1
   2ab40:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ab44:	42a1      	cmp	r1, r4
   2ab46:	f803 2f01 	strb.w	r2, [r3, #1]!
   2ab4a:	d1f9      	bne.n	2ab40 <memmove+0x34>
   2ab4c:	bcf0      	pop	{r4, r5, r6, r7}
   2ab4e:	4770      	bx	lr
   2ab50:	ea40 0301 	orr.w	r3, r0, r1
   2ab54:	079b      	lsls	r3, r3, #30
   2ab56:	d13e      	bne.n	2abd6 <memmove+0xca>
   2ab58:	f1a2 0310 	sub.w	r3, r2, #16
   2ab5c:	f101 0520 	add.w	r5, r1, #32
   2ab60:	f101 0610 	add.w	r6, r1, #16
   2ab64:	f100 0710 	add.w	r7, r0, #16
   2ab68:	f023 040f 	bic.w	r4, r3, #15
   2ab6c:	091b      	lsrs	r3, r3, #4
   2ab6e:	4425      	add	r5, r4
   2ab70:	f856 4c10 	ldr.w	r4, [r6, #-16]
   2ab74:	3610      	adds	r6, #16
   2ab76:	3710      	adds	r7, #16
   2ab78:	f847 4c20 	str.w	r4, [r7, #-32]
   2ab7c:	f856 4c1c 	ldr.w	r4, [r6, #-28]
   2ab80:	f847 4c1c 	str.w	r4, [r7, #-28]
   2ab84:	f856 4c18 	ldr.w	r4, [r6, #-24]
   2ab88:	f847 4c18 	str.w	r4, [r7, #-24]
   2ab8c:	f856 4c14 	ldr.w	r4, [r6, #-20]
   2ab90:	42ae      	cmp	r6, r5
   2ab92:	f847 4c14 	str.w	r4, [r7, #-20]
   2ab96:	d1eb      	bne.n	2ab70 <memmove+0x64>
   2ab98:	3301      	adds	r3, #1
   2ab9a:	f012 0f0c 	tst.w	r2, #12
   2ab9e:	f002 050f 	and.w	r5, r2, #15
   2aba2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   2aba6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   2abaa:	d017      	beq.n	2abdc <memmove+0xd0>
   2abac:	3d04      	subs	r5, #4
   2abae:	1f1c      	subs	r4, r3, #4
   2abb0:	460e      	mov	r6, r1
   2abb2:	f025 0c03 	bic.w	ip, r5, #3
   2abb6:	08ad      	lsrs	r5, r5, #2
   2abb8:	449c      	add	ip, r3
   2abba:	f856 7b04 	ldr.w	r7, [r6], #4
   2abbe:	f844 7f04 	str.w	r7, [r4, #4]!
   2abc2:	4564      	cmp	r4, ip
   2abc4:	d1f9      	bne.n	2abba <memmove+0xae>
   2abc6:	3501      	adds	r5, #1
   2abc8:	f002 0203 	and.w	r2, r2, #3
   2abcc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2abd0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   2abd4:	e7ae      	b.n	2ab34 <memmove+0x28>
   2abd6:	1e54      	subs	r4, r2, #1
   2abd8:	4603      	mov	r3, r0
   2abda:	e7ae      	b.n	2ab3a <memmove+0x2e>
   2abdc:	462a      	mov	r2, r5
   2abde:	e7a9      	b.n	2ab34 <memmove+0x28>

0002abe0 <_Balloc>:
   2abe0:	b538      	push	{r3, r4, r5, lr}
   2abe2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2abe4:	4605      	mov	r5, r0
   2abe6:	460c      	mov	r4, r1
   2abe8:	b14b      	cbz	r3, 2abfe <_Balloc+0x1e>
   2abea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2abee:	b180      	cbz	r0, 2ac12 <_Balloc+0x32>
   2abf0:	6802      	ldr	r2, [r0, #0]
   2abf2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2abf6:	2300      	movs	r3, #0
   2abf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2abfc:	bd38      	pop	{r3, r4, r5, pc}
   2abfe:	2221      	movs	r2, #33	; 0x21
   2ac00:	2104      	movs	r1, #4
   2ac02:	f001 f915 	bl	2be30 <_calloc_r>
   2ac06:	4603      	mov	r3, r0
   2ac08:	64e8      	str	r0, [r5, #76]	; 0x4c
   2ac0a:	2800      	cmp	r0, #0
   2ac0c:	d1ed      	bne.n	2abea <_Balloc+0xa>
   2ac0e:	2000      	movs	r0, #0
   2ac10:	bd38      	pop	{r3, r4, r5, pc}
   2ac12:	2101      	movs	r1, #1
   2ac14:	4628      	mov	r0, r5
   2ac16:	fa01 f504 	lsl.w	r5, r1, r4
   2ac1a:	1d6a      	adds	r2, r5, #5
   2ac1c:	0092      	lsls	r2, r2, #2
   2ac1e:	f001 f907 	bl	2be30 <_calloc_r>
   2ac22:	2800      	cmp	r0, #0
   2ac24:	d0f3      	beq.n	2ac0e <_Balloc+0x2e>
   2ac26:	e9c0 4501 	strd	r4, r5, [r0, #4]
   2ac2a:	e7e4      	b.n	2abf6 <_Balloc+0x16>

0002ac2c <_Bfree>:
   2ac2c:	b131      	cbz	r1, 2ac3c <_Bfree+0x10>
   2ac2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2ac30:	684a      	ldr	r2, [r1, #4]
   2ac32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2ac36:	6008      	str	r0, [r1, #0]
   2ac38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2ac3c:	4770      	bx	lr
   2ac3e:	bf00      	nop

0002ac40 <__multadd>:
   2ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac44:	460f      	mov	r7, r1
   2ac46:	4680      	mov	r8, r0
   2ac48:	690e      	ldr	r6, [r1, #16]
   2ac4a:	f101 0014 	add.w	r0, r1, #20
   2ac4e:	b082      	sub	sp, #8
   2ac50:	2100      	movs	r1, #0
   2ac52:	6805      	ldr	r5, [r0, #0]
   2ac54:	3101      	adds	r1, #1
   2ac56:	b2ac      	uxth	r4, r5
   2ac58:	428e      	cmp	r6, r1
   2ac5a:	ea4f 4515 	mov.w	r5, r5, lsr #16
   2ac5e:	fb02 3304 	mla	r3, r2, r4, r3
   2ac62:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2ac66:	b29c      	uxth	r4, r3
   2ac68:	fb02 c305 	mla	r3, r2, r5, ip
   2ac6c:	eb04 4403 	add.w	r4, r4, r3, lsl #16
   2ac70:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2ac74:	f840 4b04 	str.w	r4, [r0], #4
   2ac78:	dceb      	bgt.n	2ac52 <__multadd+0x12>
   2ac7a:	b13b      	cbz	r3, 2ac8c <__multadd+0x4c>
   2ac7c:	68ba      	ldr	r2, [r7, #8]
   2ac7e:	42b2      	cmp	r2, r6
   2ac80:	dd08      	ble.n	2ac94 <__multadd+0x54>
   2ac82:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   2ac86:	3601      	adds	r6, #1
   2ac88:	6153      	str	r3, [r2, #20]
   2ac8a:	613e      	str	r6, [r7, #16]
   2ac8c:	4638      	mov	r0, r7
   2ac8e:	b002      	add	sp, #8
   2ac90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ac94:	6879      	ldr	r1, [r7, #4]
   2ac96:	4640      	mov	r0, r8
   2ac98:	9301      	str	r3, [sp, #4]
   2ac9a:	3101      	adds	r1, #1
   2ac9c:	f7ff ffa0 	bl	2abe0 <_Balloc>
   2aca0:	693a      	ldr	r2, [r7, #16]
   2aca2:	f107 010c 	add.w	r1, r7, #12
   2aca6:	4604      	mov	r4, r0
   2aca8:	3202      	adds	r2, #2
   2acaa:	300c      	adds	r0, #12
   2acac:	0092      	lsls	r2, r2, #2
   2acae:	f7e1 ff4d 	bl	cb4c <memcpy>
   2acb2:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
   2acb6:	6879      	ldr	r1, [r7, #4]
   2acb8:	9b01      	ldr	r3, [sp, #4]
   2acba:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2acbe:	6038      	str	r0, [r7, #0]
   2acc0:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
   2acc4:	4627      	mov	r7, r4
   2acc6:	e7dc      	b.n	2ac82 <__multadd+0x42>

0002acc8 <__s2b>:
   2acc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2accc:	461f      	mov	r7, r3
   2acce:	4c24      	ldr	r4, [pc, #144]	; (2ad60 <__s2b+0x98>)
   2acd0:	4606      	mov	r6, r0
   2acd2:	f103 0008 	add.w	r0, r3, #8
   2acd6:	2f09      	cmp	r7, #9
   2acd8:	4689      	mov	r9, r1
   2acda:	fb84 3c00 	smull	r3, ip, r4, r0
   2acde:	ea4f 73e0 	mov.w	r3, r0, asr #31
   2ace2:	4690      	mov	r8, r2
   2ace4:	9d08      	ldr	r5, [sp, #32]
   2ace6:	ebc3 036c 	rsb	r3, r3, ip, asr #1
   2acea:	dd37      	ble.n	2ad5c <__s2b+0x94>
   2acec:	2401      	movs	r4, #1
   2acee:	2100      	movs	r1, #0
   2acf0:	0064      	lsls	r4, r4, #1
   2acf2:	3101      	adds	r1, #1
   2acf4:	42a3      	cmp	r3, r4
   2acf6:	dcfb      	bgt.n	2acf0 <__s2b+0x28>
   2acf8:	4630      	mov	r0, r6
   2acfa:	f7ff ff71 	bl	2abe0 <_Balloc>
   2acfe:	2301      	movs	r3, #1
   2ad00:	f1b8 0f09 	cmp.w	r8, #9
   2ad04:	4601      	mov	r1, r0
   2ad06:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2ad0a:	dd22      	ble.n	2ad52 <__s2b+0x8a>
   2ad0c:	f109 0a09 	add.w	sl, r9, #9
   2ad10:	44c1      	add	r9, r8
   2ad12:	4655      	mov	r5, sl
   2ad14:	f815 3b01 	ldrb.w	r3, [r5], #1
   2ad18:	220a      	movs	r2, #10
   2ad1a:	4630      	mov	r0, r6
   2ad1c:	3b30      	subs	r3, #48	; 0x30
   2ad1e:	f7ff ff8f 	bl	2ac40 <__multadd>
   2ad22:	454d      	cmp	r5, r9
   2ad24:	4601      	mov	r1, r0
   2ad26:	d1f5      	bne.n	2ad14 <__s2b+0x4c>
   2ad28:	f1a8 0408 	sub.w	r4, r8, #8
   2ad2c:	4454      	add	r4, sl
   2ad2e:	4547      	cmp	r7, r8
   2ad30:	dd0c      	ble.n	2ad4c <__s2b+0x84>
   2ad32:	eba7 0508 	sub.w	r5, r7, r8
   2ad36:	4425      	add	r5, r4
   2ad38:	f814 3b01 	ldrb.w	r3, [r4], #1
   2ad3c:	220a      	movs	r2, #10
   2ad3e:	4630      	mov	r0, r6
   2ad40:	3b30      	subs	r3, #48	; 0x30
   2ad42:	f7ff ff7d 	bl	2ac40 <__multadd>
   2ad46:	42a5      	cmp	r5, r4
   2ad48:	4601      	mov	r1, r0
   2ad4a:	d1f5      	bne.n	2ad38 <__s2b+0x70>
   2ad4c:	4608      	mov	r0, r1
   2ad4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ad52:	f109 040a 	add.w	r4, r9, #10
   2ad56:	f04f 0809 	mov.w	r8, #9
   2ad5a:	e7e8      	b.n	2ad2e <__s2b+0x66>
   2ad5c:	2100      	movs	r1, #0
   2ad5e:	e7cb      	b.n	2acf8 <__s2b+0x30>
   2ad60:	38e38e39 	.word	0x38e38e39

0002ad64 <__hi0bits>:
   2ad64:	4b0f      	ldr	r3, [pc, #60]	; (2ada4 <__hi0bits+0x40>)
   2ad66:	4003      	ands	r3, r0
   2ad68:	b9d3      	cbnz	r3, 2ada0 <__hi0bits+0x3c>
   2ad6a:	0400      	lsls	r0, r0, #16
   2ad6c:	2310      	movs	r3, #16
   2ad6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   2ad72:	d101      	bne.n	2ad78 <__hi0bits+0x14>
   2ad74:	3308      	adds	r3, #8
   2ad76:	0200      	lsls	r0, r0, #8
   2ad78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   2ad7c:	d101      	bne.n	2ad82 <__hi0bits+0x1e>
   2ad7e:	3304      	adds	r3, #4
   2ad80:	0100      	lsls	r0, r0, #4
   2ad82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   2ad86:	d101      	bne.n	2ad8c <__hi0bits+0x28>
   2ad88:	3302      	adds	r3, #2
   2ad8a:	0080      	lsls	r0, r0, #2
   2ad8c:	2800      	cmp	r0, #0
   2ad8e:	db05      	blt.n	2ad9c <__hi0bits+0x38>
   2ad90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   2ad94:	f103 0301 	add.w	r3, r3, #1
   2ad98:	bf08      	it	eq
   2ad9a:	2320      	moveq	r3, #32
   2ad9c:	4618      	mov	r0, r3
   2ad9e:	4770      	bx	lr
   2ada0:	2300      	movs	r3, #0
   2ada2:	e7e4      	b.n	2ad6e <__hi0bits+0xa>
   2ada4:	ffff0000 	.word	0xffff0000

0002ada8 <__lo0bits>:
   2ada8:	6803      	ldr	r3, [r0, #0]
   2adaa:	4601      	mov	r1, r0
   2adac:	f013 0207 	ands.w	r2, r3, #7
   2adb0:	d007      	beq.n	2adc2 <__lo0bits+0x1a>
   2adb2:	07da      	lsls	r2, r3, #31
   2adb4:	d420      	bmi.n	2adf8 <__lo0bits+0x50>
   2adb6:	0798      	lsls	r0, r3, #30
   2adb8:	d522      	bpl.n	2ae00 <__lo0bits+0x58>
   2adba:	085b      	lsrs	r3, r3, #1
   2adbc:	2001      	movs	r0, #1
   2adbe:	600b      	str	r3, [r1, #0]
   2adc0:	4770      	bx	lr
   2adc2:	b298      	uxth	r0, r3
   2adc4:	b1a8      	cbz	r0, 2adf2 <__lo0bits+0x4a>
   2adc6:	4610      	mov	r0, r2
   2adc8:	f013 0fff 	tst.w	r3, #255	; 0xff
   2adcc:	d101      	bne.n	2add2 <__lo0bits+0x2a>
   2adce:	3008      	adds	r0, #8
   2add0:	0a1b      	lsrs	r3, r3, #8
   2add2:	071a      	lsls	r2, r3, #28
   2add4:	d101      	bne.n	2adda <__lo0bits+0x32>
   2add6:	3004      	adds	r0, #4
   2add8:	091b      	lsrs	r3, r3, #4
   2adda:	079a      	lsls	r2, r3, #30
   2addc:	d101      	bne.n	2ade2 <__lo0bits+0x3a>
   2adde:	3002      	adds	r0, #2
   2ade0:	089b      	lsrs	r3, r3, #2
   2ade2:	07da      	lsls	r2, r3, #31
   2ade4:	d403      	bmi.n	2adee <__lo0bits+0x46>
   2ade6:	085b      	lsrs	r3, r3, #1
   2ade8:	f100 0001 	add.w	r0, r0, #1
   2adec:	d006      	beq.n	2adfc <__lo0bits+0x54>
   2adee:	600b      	str	r3, [r1, #0]
   2adf0:	4770      	bx	lr
   2adf2:	0c1b      	lsrs	r3, r3, #16
   2adf4:	2010      	movs	r0, #16
   2adf6:	e7e7      	b.n	2adc8 <__lo0bits+0x20>
   2adf8:	2000      	movs	r0, #0
   2adfa:	4770      	bx	lr
   2adfc:	2020      	movs	r0, #32
   2adfe:	4770      	bx	lr
   2ae00:	089b      	lsrs	r3, r3, #2
   2ae02:	2002      	movs	r0, #2
   2ae04:	600b      	str	r3, [r1, #0]
   2ae06:	4770      	bx	lr

0002ae08 <__i2b>:
   2ae08:	b510      	push	{r4, lr}
   2ae0a:	460c      	mov	r4, r1
   2ae0c:	2101      	movs	r1, #1
   2ae0e:	f7ff fee7 	bl	2abe0 <_Balloc>
   2ae12:	2201      	movs	r2, #1
   2ae14:	e9c0 2404 	strd	r2, r4, [r0, #16]
   2ae18:	bd10      	pop	{r4, pc}
   2ae1a:	bf00      	nop

0002ae1c <__multiply>:
   2ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae20:	690e      	ldr	r6, [r1, #16]
   2ae22:	b085      	sub	sp, #20
   2ae24:	6917      	ldr	r7, [r2, #16]
   2ae26:	460d      	mov	r5, r1
   2ae28:	4614      	mov	r4, r2
   2ae2a:	42be      	cmp	r6, r7
   2ae2c:	db05      	blt.n	2ae3a <__multiply+0x1e>
   2ae2e:	463a      	mov	r2, r7
   2ae30:	4623      	mov	r3, r4
   2ae32:	4637      	mov	r7, r6
   2ae34:	460c      	mov	r4, r1
   2ae36:	4616      	mov	r6, r2
   2ae38:	461d      	mov	r5, r3
   2ae3a:	eb07 0806 	add.w	r8, r7, r6
   2ae3e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   2ae42:	4543      	cmp	r3, r8
   2ae44:	bfb8      	it	lt
   2ae46:	3101      	addlt	r1, #1
   2ae48:	f7ff feca 	bl	2abe0 <_Balloc>
   2ae4c:	f100 0914 	add.w	r9, r0, #20
   2ae50:	9001      	str	r0, [sp, #4]
   2ae52:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2ae56:	45d1      	cmp	r9, sl
   2ae58:	d205      	bcs.n	2ae66 <__multiply+0x4a>
   2ae5a:	464b      	mov	r3, r9
   2ae5c:	2200      	movs	r2, #0
   2ae5e:	f843 2b04 	str.w	r2, [r3], #4
   2ae62:	459a      	cmp	sl, r3
   2ae64:	d8fb      	bhi.n	2ae5e <__multiply+0x42>
   2ae66:	f105 0e14 	add.w	lr, r5, #20
   2ae6a:	f104 0314 	add.w	r3, r4, #20
   2ae6e:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
   2ae72:	461a      	mov	r2, r3
   2ae74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2ae78:	45de      	cmp	lr, fp
   2ae7a:	d260      	bcs.n	2af3e <__multiply+0x122>
   2ae7c:	1b3b      	subs	r3, r7, r4
   2ae7e:	3415      	adds	r4, #21
   2ae80:	3b15      	subs	r3, #21
   2ae82:	f023 0303 	bic.w	r3, r3, #3
   2ae86:	3304      	adds	r3, #4
   2ae88:	42a7      	cmp	r7, r4
   2ae8a:	bf38      	it	cc
   2ae8c:	2304      	movcc	r3, #4
   2ae8e:	e9cd a802 	strd	sl, r8, [sp, #8]
   2ae92:	4698      	mov	r8, r3
   2ae94:	4692      	mov	sl, r2
   2ae96:	e005      	b.n	2aea4 <__multiply+0x88>
   2ae98:	0c24      	lsrs	r4, r4, #16
   2ae9a:	d12b      	bne.n	2aef4 <__multiply+0xd8>
   2ae9c:	45f3      	cmp	fp, lr
   2ae9e:	f109 0904 	add.w	r9, r9, #4
   2aea2:	d94a      	bls.n	2af3a <__multiply+0x11e>
   2aea4:	f85e 4b04 	ldr.w	r4, [lr], #4
   2aea8:	b2a6      	uxth	r6, r4
   2aeaa:	2e00      	cmp	r6, #0
   2aeac:	d0f4      	beq.n	2ae98 <__multiply+0x7c>
   2aeae:	4655      	mov	r5, sl
   2aeb0:	464c      	mov	r4, r9
   2aeb2:	2200      	movs	r2, #0
   2aeb4:	f855 3b04 	ldr.w	r3, [r5], #4
   2aeb8:	6820      	ldr	r0, [r4, #0]
   2aeba:	b299      	uxth	r1, r3
   2aebc:	42af      	cmp	r7, r5
   2aebe:	fa1f fc80 	uxth.w	ip, r0
   2aec2:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2aec6:	fb06 c101 	mla	r1, r6, r1, ip
   2aeca:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2aece:	4411      	add	r1, r2
   2aed0:	fb06 0203 	mla	r2, r6, r3, r0
   2aed4:	b28b      	uxth	r3, r1
   2aed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   2aeda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2aede:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2aee2:	f844 3b04 	str.w	r3, [r4], #4
   2aee6:	d8e5      	bhi.n	2aeb4 <__multiply+0x98>
   2aee8:	f849 2008 	str.w	r2, [r9, r8]
   2aeec:	f85e 4c04 	ldr.w	r4, [lr, #-4]
   2aef0:	0c24      	lsrs	r4, r4, #16
   2aef2:	d0d3      	beq.n	2ae9c <__multiply+0x80>
   2aef4:	f8d9 3000 	ldr.w	r3, [r9]
   2aef8:	4655      	mov	r5, sl
   2aefa:	464e      	mov	r6, r9
   2aefc:	2200      	movs	r2, #0
   2aefe:	4618      	mov	r0, r3
   2af00:	0c01      	lsrs	r1, r0, #16
   2af02:	8828      	ldrh	r0, [r5, #0]
   2af04:	b29b      	uxth	r3, r3
   2af06:	fb04 1000 	mla	r0, r4, r0, r1
   2af0a:	4402      	add	r2, r0
   2af0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2af10:	f846 3b04 	str.w	r3, [r6], #4
   2af14:	f855 3b04 	ldr.w	r3, [r5], #4
   2af18:	6830      	ldr	r0, [r6, #0]
   2af1a:	0c1b      	lsrs	r3, r3, #16
   2af1c:	42af      	cmp	r7, r5
   2af1e:	b281      	uxth	r1, r0
   2af20:	fb04 1303 	mla	r3, r4, r3, r1
   2af24:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2af28:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2af2c:	d8e8      	bhi.n	2af00 <__multiply+0xe4>
   2af2e:	45f3      	cmp	fp, lr
   2af30:	f849 3008 	str.w	r3, [r9, r8]
   2af34:	f109 0904 	add.w	r9, r9, #4
   2af38:	d8b4      	bhi.n	2aea4 <__multiply+0x88>
   2af3a:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   2af3e:	f1b8 0f00 	cmp.w	r8, #0
   2af42:	dc03      	bgt.n	2af4c <__multiply+0x130>
   2af44:	e006      	b.n	2af54 <__multiply+0x138>
   2af46:	f1b8 0801 	subs.w	r8, r8, #1
   2af4a:	d003      	beq.n	2af54 <__multiply+0x138>
   2af4c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2af50:	2b00      	cmp	r3, #0
   2af52:	d0f8      	beq.n	2af46 <__multiply+0x12a>
   2af54:	9801      	ldr	r0, [sp, #4]
   2af56:	f8c0 8010 	str.w	r8, [r0, #16]
   2af5a:	b005      	add	sp, #20
   2af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002af60 <__pow5mult>:
   2af60:	f012 0303 	ands.w	r3, r2, #3
   2af64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2af68:	4614      	mov	r4, r2
   2af6a:	4607      	mov	r7, r0
   2af6c:	d12e      	bne.n	2afcc <__pow5mult+0x6c>
   2af6e:	460e      	mov	r6, r1
   2af70:	10a4      	asrs	r4, r4, #2
   2af72:	d01c      	beq.n	2afae <__pow5mult+0x4e>
   2af74:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   2af76:	b395      	cbz	r5, 2afde <__pow5mult+0x7e>
   2af78:	07e3      	lsls	r3, r4, #31
   2af7a:	f04f 0800 	mov.w	r8, #0
   2af7e:	d406      	bmi.n	2af8e <__pow5mult+0x2e>
   2af80:	1064      	asrs	r4, r4, #1
   2af82:	d014      	beq.n	2afae <__pow5mult+0x4e>
   2af84:	6828      	ldr	r0, [r5, #0]
   2af86:	b1a8      	cbz	r0, 2afb4 <__pow5mult+0x54>
   2af88:	4605      	mov	r5, r0
   2af8a:	07e3      	lsls	r3, r4, #31
   2af8c:	d5f8      	bpl.n	2af80 <__pow5mult+0x20>
   2af8e:	462a      	mov	r2, r5
   2af90:	4631      	mov	r1, r6
   2af92:	4638      	mov	r0, r7
   2af94:	f7ff ff42 	bl	2ae1c <__multiply>
   2af98:	b1b6      	cbz	r6, 2afc8 <__pow5mult+0x68>
   2af9a:	6871      	ldr	r1, [r6, #4]
   2af9c:	1064      	asrs	r4, r4, #1
   2af9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2afa0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2afa4:	6032      	str	r2, [r6, #0]
   2afa6:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   2afaa:	4606      	mov	r6, r0
   2afac:	d1ea      	bne.n	2af84 <__pow5mult+0x24>
   2afae:	4630      	mov	r0, r6
   2afb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2afb4:	462a      	mov	r2, r5
   2afb6:	4629      	mov	r1, r5
   2afb8:	4638      	mov	r0, r7
   2afba:	f7ff ff2f 	bl	2ae1c <__multiply>
   2afbe:	6028      	str	r0, [r5, #0]
   2afc0:	4605      	mov	r5, r0
   2afc2:	f8c0 8000 	str.w	r8, [r0]
   2afc6:	e7e0      	b.n	2af8a <__pow5mult+0x2a>
   2afc8:	4606      	mov	r6, r0
   2afca:	e7d9      	b.n	2af80 <__pow5mult+0x20>
   2afcc:	1e5a      	subs	r2, r3, #1
   2afce:	4d0b      	ldr	r5, [pc, #44]	; (2affc <__pow5mult+0x9c>)
   2afd0:	2300      	movs	r3, #0
   2afd2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2afd6:	f7ff fe33 	bl	2ac40 <__multadd>
   2afda:	4606      	mov	r6, r0
   2afdc:	e7c8      	b.n	2af70 <__pow5mult+0x10>
   2afde:	2101      	movs	r1, #1
   2afe0:	4638      	mov	r0, r7
   2afe2:	f7ff fdfd 	bl	2abe0 <_Balloc>
   2afe6:	f240 2271 	movw	r2, #625	; 0x271
   2afea:	2101      	movs	r1, #1
   2afec:	2300      	movs	r3, #0
   2afee:	4605      	mov	r5, r0
   2aff0:	e9c0 1204 	strd	r1, r2, [r0, #16]
   2aff4:	64b8      	str	r0, [r7, #72]	; 0x48
   2aff6:	6003      	str	r3, [r0, #0]
   2aff8:	e7be      	b.n	2af78 <__pow5mult+0x18>
   2affa:	bf00      	nop
   2affc:	0002f6e0 	.word	0x0002f6e0

0002b000 <__lshift>:
   2b000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b004:	690e      	ldr	r6, [r1, #16]
   2b006:	460c      	mov	r4, r1
   2b008:	688b      	ldr	r3, [r1, #8]
   2b00a:	4690      	mov	r8, r2
   2b00c:	eb06 1662 	add.w	r6, r6, r2, asr #5
   2b010:	4607      	mov	r7, r0
   2b012:	ea4f 1962 	mov.w	r9, r2, asr #5
   2b016:	6849      	ldr	r1, [r1, #4]
   2b018:	1c75      	adds	r5, r6, #1
   2b01a:	429d      	cmp	r5, r3
   2b01c:	dd03      	ble.n	2b026 <__lshift+0x26>
   2b01e:	005b      	lsls	r3, r3, #1
   2b020:	3101      	adds	r1, #1
   2b022:	429d      	cmp	r5, r3
   2b024:	dcfb      	bgt.n	2b01e <__lshift+0x1e>
   2b026:	4638      	mov	r0, r7
   2b028:	f7ff fdda 	bl	2abe0 <_Balloc>
   2b02c:	f1b9 0f00 	cmp.w	r9, #0
   2b030:	f100 0114 	add.w	r1, r0, #20
   2b034:	dd0f      	ble.n	2b056 <__lshift+0x56>
   2b036:	f109 0205 	add.w	r2, r9, #5
   2b03a:	460b      	mov	r3, r1
   2b03c:	f04f 0c00 	mov.w	ip, #0
   2b040:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   2b044:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   2b048:	f843 cb04 	str.w	ip, [r3], #4
   2b04c:	4293      	cmp	r3, r2
   2b04e:	d1fb      	bne.n	2b048 <__lshift+0x48>
   2b050:	f1ae 0314 	sub.w	r3, lr, #20
   2b054:	4419      	add	r1, r3
   2b056:	f104 0314 	add.w	r3, r4, #20
   2b05a:	6922      	ldr	r2, [r4, #16]
   2b05c:	f018 081f 	ands.w	r8, r8, #31
   2b060:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   2b064:	d02c      	beq.n	2b0c0 <__lshift+0xc0>
   2b066:	f1c8 0920 	rsb	r9, r8, #32
   2b06a:	468e      	mov	lr, r1
   2b06c:	f04f 0a00 	mov.w	sl, #0
   2b070:	681a      	ldr	r2, [r3, #0]
   2b072:	fa02 f208 	lsl.w	r2, r2, r8
   2b076:	ea42 020a 	orr.w	r2, r2, sl
   2b07a:	f84e 2b04 	str.w	r2, [lr], #4
   2b07e:	f853 2b04 	ldr.w	r2, [r3], #4
   2b082:	459c      	cmp	ip, r3
   2b084:	fa22 fa09 	lsr.w	sl, r2, r9
   2b088:	d8f2      	bhi.n	2b070 <__lshift+0x70>
   2b08a:	ebac 0304 	sub.w	r3, ip, r4
   2b08e:	f104 0215 	add.w	r2, r4, #21
   2b092:	f1ba 0f00 	cmp.w	sl, #0
   2b096:	bf18      	it	ne
   2b098:	462e      	movne	r6, r5
   2b09a:	3b15      	subs	r3, #21
   2b09c:	f023 0303 	bic.w	r3, r3, #3
   2b0a0:	3304      	adds	r3, #4
   2b0a2:	4594      	cmp	ip, r2
   2b0a4:	bf38      	it	cc
   2b0a6:	2304      	movcc	r3, #4
   2b0a8:	f841 a003 	str.w	sl, [r1, r3]
   2b0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2b0ae:	6862      	ldr	r2, [r4, #4]
   2b0b0:	6106      	str	r6, [r0, #16]
   2b0b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2b0b6:	6021      	str	r1, [r4, #0]
   2b0b8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2b0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b0c0:	3904      	subs	r1, #4
   2b0c2:	f853 2b04 	ldr.w	r2, [r3], #4
   2b0c6:	459c      	cmp	ip, r3
   2b0c8:	f841 2f04 	str.w	r2, [r1, #4]!
   2b0cc:	d8f9      	bhi.n	2b0c2 <__lshift+0xc2>
   2b0ce:	e7ed      	b.n	2b0ac <__lshift+0xac>

0002b0d0 <__mcmp>:
   2b0d0:	690b      	ldr	r3, [r1, #16]
   2b0d2:	b430      	push	{r4, r5}
   2b0d4:	4605      	mov	r5, r0
   2b0d6:	6900      	ldr	r0, [r0, #16]
   2b0d8:	1ac0      	subs	r0, r0, r3
   2b0da:	d111      	bne.n	2b100 <__mcmp+0x30>
   2b0dc:	3514      	adds	r5, #20
   2b0de:	3114      	adds	r1, #20
   2b0e0:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   2b0e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   2b0e8:	e001      	b.n	2b0ee <__mcmp+0x1e>
   2b0ea:	4295      	cmp	r5, r2
   2b0ec:	d208      	bcs.n	2b100 <__mcmp+0x30>
   2b0ee:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   2b0f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b0f6:	428c      	cmp	r4, r1
   2b0f8:	d0f7      	beq.n	2b0ea <__mcmp+0x1a>
   2b0fa:	d203      	bcs.n	2b104 <__mcmp+0x34>
   2b0fc:	f04f 30ff 	mov.w	r0, #4294967295
   2b100:	bc30      	pop	{r4, r5}
   2b102:	4770      	bx	lr
   2b104:	2001      	movs	r0, #1
   2b106:	bc30      	pop	{r4, r5}
   2b108:	4770      	bx	lr
   2b10a:	bf00      	nop

0002b10c <__mdiff>:
   2b10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b110:	690b      	ldr	r3, [r1, #16]
   2b112:	b083      	sub	sp, #12
   2b114:	6914      	ldr	r4, [r2, #16]
   2b116:	460e      	mov	r6, r1
   2b118:	4617      	mov	r7, r2
   2b11a:	1b1b      	subs	r3, r3, r4
   2b11c:	2b00      	cmp	r3, #0
   2b11e:	d119      	bne.n	2b154 <__mdiff+0x48>
   2b120:	f101 0814 	add.w	r8, r1, #20
   2b124:	f102 0914 	add.w	r9, r2, #20
   2b128:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   2b12c:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   2b130:	e001      	b.n	2b136 <__mdiff+0x2a>
   2b132:	4598      	cmp	r8, r3
   2b134:	d27f      	bcs.n	2b236 <__mdiff+0x12a>
   2b136:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b13a:	f854 2d04 	ldr.w	r2, [r4, #-4]!
   2b13e:	4291      	cmp	r1, r2
   2b140:	d0f7      	beq.n	2b132 <__mdiff+0x26>
   2b142:	d20c      	bcs.n	2b15e <__mdiff+0x52>
   2b144:	4642      	mov	r2, r8
   2b146:	4633      	mov	r3, r6
   2b148:	46c8      	mov	r8, r9
   2b14a:	463e      	mov	r6, r7
   2b14c:	4691      	mov	r9, r2
   2b14e:	461f      	mov	r7, r3
   2b150:	2501      	movs	r5, #1
   2b152:	e005      	b.n	2b160 <__mdiff+0x54>
   2b154:	db67      	blt.n	2b226 <__mdiff+0x11a>
   2b156:	f101 0814 	add.w	r8, r1, #20
   2b15a:	f102 0914 	add.w	r9, r2, #20
   2b15e:	2500      	movs	r5, #0
   2b160:	6871      	ldr	r1, [r6, #4]
   2b162:	464c      	mov	r4, r9
   2b164:	f7ff fd3c 	bl	2abe0 <_Balloc>
   2b168:	693b      	ldr	r3, [r7, #16]
   2b16a:	6936      	ldr	r6, [r6, #16]
   2b16c:	f100 0714 	add.w	r7, r0, #20
   2b170:	eb09 0a83 	add.w	sl, r9, r3, lsl #2
   2b174:	f1a8 0c04 	sub.w	ip, r8, #4
   2b178:	eb08 0e86 	add.w	lr, r8, r6, lsl #2
   2b17c:	2300      	movs	r3, #0
   2b17e:	9701      	str	r7, [sp, #4]
   2b180:	60c5      	str	r5, [r0, #12]
   2b182:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   2b186:	f854 2b04 	ldr.w	r2, [r4], #4
   2b18a:	b28d      	uxth	r5, r1
   2b18c:	fa1f fb82 	uxth.w	fp, r2
   2b190:	45a2      	cmp	sl, r4
   2b192:	441d      	add	r5, r3
   2b194:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2b198:	eba5 050b 	sub.w	r5, r5, fp
   2b19c:	ebc2 4311 	rsb	r3, r2, r1, lsr #16
   2b1a0:	b2a9      	uxth	r1, r5
   2b1a2:	eb03 4325 	add.w	r3, r3, r5, asr #16
   2b1a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2b1aa:	ea4f 4323 	mov.w	r3, r3, asr #16
   2b1ae:	f847 1b04 	str.w	r1, [r7], #4
   2b1b2:	d8e6      	bhi.n	2b182 <__mdiff+0x76>
   2b1b4:	ea6f 0209 	mvn.w	r2, r9
   2b1b8:	f109 0901 	add.w	r9, r9, #1
   2b1bc:	9c01      	ldr	r4, [sp, #4]
   2b1be:	4452      	add	r2, sl
   2b1c0:	45ca      	cmp	sl, r9
   2b1c2:	f022 0503 	bic.w	r5, r2, #3
   2b1c6:	462a      	mov	r2, r5
   2b1c8:	f105 0504 	add.w	r5, r5, #4
   2b1cc:	bf3c      	itt	cc
   2b1ce:	2504      	movcc	r5, #4
   2b1d0:	2200      	movcc	r2, #0
   2b1d2:	44a8      	add	r8, r5
   2b1d4:	4422      	add	r2, r4
   2b1d6:	4425      	add	r5, r4
   2b1d8:	45c6      	cmp	lr, r8
   2b1da:	d91a      	bls.n	2b212 <__mdiff+0x106>
   2b1dc:	462f      	mov	r7, r5
   2b1de:	4644      	mov	r4, r8
   2b1e0:	f854 cb04 	ldr.w	ip, [r4], #4
   2b1e4:	fa1f f28c 	uxth.w	r2, ip
   2b1e8:	45a6      	cmp	lr, r4
   2b1ea:	4413      	add	r3, r2
   2b1ec:	ea4f 4223 	mov.w	r2, r3, asr #16
   2b1f0:	b299      	uxth	r1, r3
   2b1f2:	eb02 431c 	add.w	r3, r2, ip, lsr #16
   2b1f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2b1fa:	ea4f 4323 	mov.w	r3, r3, asr #16
   2b1fe:	f847 1b04 	str.w	r1, [r7], #4
   2b202:	d8ed      	bhi.n	2b1e0 <__mdiff+0xd4>
   2b204:	f10e 32ff 	add.w	r2, lr, #4294967295
   2b208:	eba2 0808 	sub.w	r8, r2, r8
   2b20c:	f028 0203 	bic.w	r2, r8, #3
   2b210:	442a      	add	r2, r5
   2b212:	b921      	cbnz	r1, 2b21e <__mdiff+0x112>
   2b214:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2b218:	3e01      	subs	r6, #1
   2b21a:	2b00      	cmp	r3, #0
   2b21c:	d0fa      	beq.n	2b214 <__mdiff+0x108>
   2b21e:	6106      	str	r6, [r0, #16]
   2b220:	b003      	add	sp, #12
   2b222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b226:	f101 0914 	add.w	r9, r1, #20
   2b22a:	f102 0814 	add.w	r8, r2, #20
   2b22e:	4616      	mov	r6, r2
   2b230:	2501      	movs	r5, #1
   2b232:	460f      	mov	r7, r1
   2b234:	e794      	b.n	2b160 <__mdiff+0x54>
   2b236:	2100      	movs	r1, #0
   2b238:	f7ff fcd2 	bl	2abe0 <_Balloc>
   2b23c:	2201      	movs	r2, #1
   2b23e:	2300      	movs	r3, #0
   2b240:	e9c0 2304 	strd	r2, r3, [r0, #16]
   2b244:	b003      	add	sp, #12
   2b246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b24a:	bf00      	nop

0002b24c <__ulp>:
   2b24c:	b082      	sub	sp, #8
   2b24e:	4b17      	ldr	r3, [pc, #92]	; (2b2ac <__ulp+0x60>)
   2b250:	ed8d 0b00 	vstr	d0, [sp]
   2b254:	9a01      	ldr	r2, [sp, #4]
   2b256:	4013      	ands	r3, r2
   2b258:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   2b25c:	2b00      	cmp	r3, #0
   2b25e:	dd05      	ble.n	2b26c <__ulp+0x20>
   2b260:	2000      	movs	r0, #0
   2b262:	4619      	mov	r1, r3
   2b264:	ec41 0b10 	vmov	d0, r0, r1
   2b268:	b002      	add	sp, #8
   2b26a:	4770      	bx	lr
   2b26c:	425b      	negs	r3, r3
   2b26e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   2b272:	ea4f 5223 	mov.w	r2, r3, asr #20
   2b276:	da08      	bge.n	2b28a <__ulp+0x3e>
   2b278:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2b27c:	2000      	movs	r0, #0
   2b27e:	fa43 f102 	asr.w	r1, r3, r2
   2b282:	ec41 0b10 	vmov	d0, r0, r1
   2b286:	b002      	add	sp, #8
   2b288:	4770      	bx	lr
   2b28a:	3a14      	subs	r2, #20
   2b28c:	2100      	movs	r1, #0
   2b28e:	2a1e      	cmp	r2, #30
   2b290:	dc08      	bgt.n	2b2a4 <__ulp+0x58>
   2b292:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2b296:	fa23 f202 	lsr.w	r2, r3, r2
   2b29a:	4610      	mov	r0, r2
   2b29c:	ec41 0b10 	vmov	d0, r0, r1
   2b2a0:	b002      	add	sp, #8
   2b2a2:	4770      	bx	lr
   2b2a4:	2201      	movs	r2, #1
   2b2a6:	4610      	mov	r0, r2
   2b2a8:	e7f8      	b.n	2b29c <__ulp+0x50>
   2b2aa:	bf00      	nop
   2b2ac:	7ff00000 	.word	0x7ff00000

0002b2b0 <__b2d>:
   2b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b2b2:	6904      	ldr	r4, [r0, #16]
   2b2b4:	f100 0614 	add.w	r6, r0, #20
   2b2b8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   2b2bc:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2b2c0:	1f27      	subs	r7, r4, #4
   2b2c2:	4628      	mov	r0, r5
   2b2c4:	f7ff fd4e 	bl	2ad64 <__hi0bits>
   2b2c8:	f1c0 0320 	rsb	r3, r0, #32
   2b2cc:	280a      	cmp	r0, #10
   2b2ce:	600b      	str	r3, [r1, #0]
   2b2d0:	dd34      	ble.n	2b33c <__b2d+0x8c>
   2b2d2:	42be      	cmp	r6, r7
   2b2d4:	d21e      	bcs.n	2b314 <__b2d+0x64>
   2b2d6:	380b      	subs	r0, #11
   2b2d8:	f854 7c08 	ldr.w	r7, [r4, #-8]
   2b2dc:	d026      	beq.n	2b32c <__b2d+0x7c>
   2b2de:	f1c0 0e20 	rsb	lr, r0, #32
   2b2e2:	fa05 fc00 	lsl.w	ip, r5, r0
   2b2e6:	f1a4 0508 	sub.w	r5, r4, #8
   2b2ea:	fa27 f10e 	lsr.w	r1, r7, lr
   2b2ee:	42ae      	cmp	r6, r5
   2b2f0:	ea4c 0c01 	orr.w	ip, ip, r1
   2b2f4:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
   2b2f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b2fc:	d236      	bcs.n	2b36c <__b2d+0xbc>
   2b2fe:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   2b302:	fa07 f000 	lsl.w	r0, r7, r0
   2b306:	fa21 f10e 	lsr.w	r1, r1, lr
   2b30a:	4301      	orrs	r1, r0
   2b30c:	460a      	mov	r2, r1
   2b30e:	ec43 2b10 	vmov	d0, r2, r3
   2b312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b314:	380b      	subs	r0, #11
   2b316:	d008      	beq.n	2b32a <__b2d+0x7a>
   2b318:	fa05 f000 	lsl.w	r0, r5, r0
   2b31c:	2100      	movs	r1, #0
   2b31e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   2b322:	460a      	mov	r2, r1
   2b324:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b328:	e7f1      	b.n	2b30e <__b2d+0x5e>
   2b32a:	4607      	mov	r7, r0
   2b32c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   2b330:	463a      	mov	r2, r7
   2b332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b336:	ec43 2b10 	vmov	d0, r2, r3
   2b33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b33c:	f1c0 0c0b 	rsb	ip, r0, #11
   2b340:	42be      	cmp	r6, r7
   2b342:	fa25 f10c 	lsr.w	r1, r5, ip
   2b346:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   2b34a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b34e:	d308      	bcc.n	2b362 <__b2d+0xb2>
   2b350:	2100      	movs	r1, #0
   2b352:	3015      	adds	r0, #21
   2b354:	fa05 f000 	lsl.w	r0, r5, r0
   2b358:	ea40 0201 	orr.w	r2, r0, r1
   2b35c:	ec43 2b10 	vmov	d0, r2, r3
   2b360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b362:	f854 1c08 	ldr.w	r1, [r4, #-8]
   2b366:	fa21 f10c 	lsr.w	r1, r1, ip
   2b36a:	e7f2      	b.n	2b352 <__b2d+0xa2>
   2b36c:	fa07 f100 	lsl.w	r1, r7, r0
   2b370:	460a      	mov	r2, r1
   2b372:	e7cc      	b.n	2b30e <__b2d+0x5e>

0002b374 <__d2b>:
   2b374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b378:	ec55 4b10 	vmov	r4, r5, d0
   2b37c:	f3c5 590a 	ubfx	r9, r5, #20, #11
   2b380:	b083      	sub	sp, #12
   2b382:	4688      	mov	r8, r1
   2b384:	2101      	movs	r1, #1
   2b386:	4617      	mov	r7, r2
   2b388:	f7ff fc2a 	bl	2abe0 <_Balloc>
   2b38c:	f3c5 0313 	ubfx	r3, r5, #0, #20
   2b390:	4606      	mov	r6, r0
   2b392:	f1b9 0f00 	cmp.w	r9, #0
   2b396:	d001      	beq.n	2b39c <__d2b+0x28>
   2b398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2b39c:	2c00      	cmp	r4, #0
   2b39e:	9301      	str	r3, [sp, #4]
   2b3a0:	d01d      	beq.n	2b3de <__d2b+0x6a>
   2b3a2:	4668      	mov	r0, sp
   2b3a4:	9400      	str	r4, [sp, #0]
   2b3a6:	f7ff fcff 	bl	2ada8 <__lo0bits>
   2b3aa:	2800      	cmp	r0, #0
   2b3ac:	d133      	bne.n	2b416 <__d2b+0xa2>
   2b3ae:	e9dd 2300 	ldrd	r2, r3, [sp]
   2b3b2:	6172      	str	r2, [r6, #20]
   2b3b4:	2b00      	cmp	r3, #0
   2b3b6:	61b3      	str	r3, [r6, #24]
   2b3b8:	bf14      	ite	ne
   2b3ba:	2202      	movne	r2, #2
   2b3bc:	2201      	moveq	r2, #1
   2b3be:	6132      	str	r2, [r6, #16]
   2b3c0:	f1b9 0f00 	cmp.w	r9, #0
   2b3c4:	d017      	beq.n	2b3f6 <__d2b+0x82>
   2b3c6:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
   2b3ca:	f1c0 0235 	rsb	r2, r0, #53	; 0x35
   2b3ce:	4418      	add	r0, r3
   2b3d0:	f8c8 0000 	str.w	r0, [r8]
   2b3d4:	4630      	mov	r0, r6
   2b3d6:	603a      	str	r2, [r7, #0]
   2b3d8:	b003      	add	sp, #12
   2b3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b3de:	a801      	add	r0, sp, #4
   2b3e0:	f7ff fce2 	bl	2ada8 <__lo0bits>
   2b3e4:	2301      	movs	r3, #1
   2b3e6:	9901      	ldr	r1, [sp, #4]
   2b3e8:	3020      	adds	r0, #32
   2b3ea:	461a      	mov	r2, r3
   2b3ec:	e9c6 3104 	strd	r3, r1, [r6, #16]
   2b3f0:	f1b9 0f00 	cmp.w	r9, #0
   2b3f4:	d1e7      	bne.n	2b3c6 <__d2b+0x52>
   2b3f6:	eb06 0382 	add.w	r3, r6, r2, lsl #2
   2b3fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2b3fe:	f8c8 0000 	str.w	r0, [r8]
   2b402:	6918      	ldr	r0, [r3, #16]
   2b404:	f7ff fcae 	bl	2ad64 <__hi0bits>
   2b408:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2b40c:	6038      	str	r0, [r7, #0]
   2b40e:	4630      	mov	r0, r6
   2b410:	b003      	add	sp, #12
   2b412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b416:	9b01      	ldr	r3, [sp, #4]
   2b418:	f1c0 0220 	rsb	r2, r0, #32
   2b41c:	9900      	ldr	r1, [sp, #0]
   2b41e:	fa03 f202 	lsl.w	r2, r3, r2
   2b422:	40c3      	lsrs	r3, r0
   2b424:	430a      	orrs	r2, r1
   2b426:	9301      	str	r3, [sp, #4]
   2b428:	6172      	str	r2, [r6, #20]
   2b42a:	e7c3      	b.n	2b3b4 <__d2b+0x40>

0002b42c <__ratio>:
   2b42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b430:	b083      	sub	sp, #12
   2b432:	460e      	mov	r6, r1
   2b434:	4607      	mov	r7, r0
   2b436:	4669      	mov	r1, sp
   2b438:	f7ff ff3a 	bl	2b2b0 <__b2d>
   2b43c:	4630      	mov	r0, r6
   2b43e:	a901      	add	r1, sp, #4
   2b440:	ec55 4b10 	vmov	r4, r5, d0
   2b444:	f7ff ff34 	bl	2b2b0 <__b2d>
   2b448:	693b      	ldr	r3, [r7, #16]
   2b44a:	6936      	ldr	r6, [r6, #16]
   2b44c:	e9dd 2700 	ldrd	r2, r7, [sp]
   2b450:	1b9e      	subs	r6, r3, r6
   2b452:	1bd3      	subs	r3, r2, r7
   2b454:	eb03 1346 	add.w	r3, r3, r6, lsl #5
   2b458:	2b00      	cmp	r3, #0
   2b45a:	ec57 6b10 	vmov	r6, r7, d0
   2b45e:	dd0d      	ble.n	2b47c <__ratio+0x50>
   2b460:	eb05 5103 	add.w	r1, r5, r3, lsl #20
   2b464:	460d      	mov	r5, r1
   2b466:	4632      	mov	r2, r6
   2b468:	463b      	mov	r3, r7
   2b46a:	4620      	mov	r0, r4
   2b46c:	4629      	mov	r1, r5
   2b46e:	f7e1 fdeb 	bl	d048 <__aeabi_ddiv>
   2b472:	ec41 0b10 	vmov	d0, r0, r1
   2b476:	b003      	add	sp, #12
   2b478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b47c:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   2b480:	ee10 6a10 	vmov	r6, s0
   2b484:	eb07 5903 	add.w	r9, r7, r3, lsl #20
   2b488:	464f      	mov	r7, r9
   2b48a:	e7ec      	b.n	2b466 <__ratio+0x3a>

0002b48c <__copybits>:
   2b48c:	f102 0314 	add.w	r3, r2, #20
   2b490:	b470      	push	{r4, r5, r6}
   2b492:	1e4c      	subs	r4, r1, #1
   2b494:	6911      	ldr	r1, [r2, #16]
   2b496:	1164      	asrs	r4, r4, #5
   2b498:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2b49c:	3401      	adds	r4, #1
   2b49e:	428b      	cmp	r3, r1
   2b4a0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   2b4a4:	d20c      	bcs.n	2b4c0 <__copybits+0x34>
   2b4a6:	1f05      	subs	r5, r0, #4
   2b4a8:	f853 6b04 	ldr.w	r6, [r3], #4
   2b4ac:	4299      	cmp	r1, r3
   2b4ae:	f845 6f04 	str.w	r6, [r5, #4]!
   2b4b2:	d8f9      	bhi.n	2b4a8 <__copybits+0x1c>
   2b4b4:	1a8b      	subs	r3, r1, r2
   2b4b6:	3b15      	subs	r3, #21
   2b4b8:	f023 0303 	bic.w	r3, r3, #3
   2b4bc:	3304      	adds	r3, #4
   2b4be:	4418      	add	r0, r3
   2b4c0:	4284      	cmp	r4, r0
   2b4c2:	d904      	bls.n	2b4ce <__copybits+0x42>
   2b4c4:	2300      	movs	r3, #0
   2b4c6:	f840 3b04 	str.w	r3, [r0], #4
   2b4ca:	4284      	cmp	r4, r0
   2b4cc:	d8fb      	bhi.n	2b4c6 <__copybits+0x3a>
   2b4ce:	bc70      	pop	{r4, r5, r6}
   2b4d0:	4770      	bx	lr
   2b4d2:	bf00      	nop

0002b4d4 <__any_on>:
   2b4d4:	6903      	ldr	r3, [r0, #16]
   2b4d6:	114a      	asrs	r2, r1, #5
   2b4d8:	3014      	adds	r0, #20
   2b4da:	4293      	cmp	r3, r2
   2b4dc:	da09      	bge.n	2b4f2 <__any_on+0x1e>
   2b4de:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2b4e2:	e002      	b.n	2b4ea <__any_on+0x16>
   2b4e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2b4e8:	b9ca      	cbnz	r2, 2b51e <__any_on+0x4a>
   2b4ea:	4283      	cmp	r3, r0
   2b4ec:	d8fa      	bhi.n	2b4e4 <__any_on+0x10>
   2b4ee:	2000      	movs	r0, #0
   2b4f0:	4770      	bx	lr
   2b4f2:	dd11      	ble.n	2b518 <__any_on+0x44>
   2b4f4:	f011 011f 	ands.w	r1, r1, #31
   2b4f8:	d00e      	beq.n	2b518 <__any_on+0x44>
   2b4fa:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2b4fe:	b410      	push	{r4}
   2b500:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2b504:	fa24 f201 	lsr.w	r2, r4, r1
   2b508:	fa02 f101 	lsl.w	r1, r2, r1
   2b50c:	428c      	cmp	r4, r1
   2b50e:	d00c      	beq.n	2b52a <__any_on+0x56>
   2b510:	2001      	movs	r0, #1
   2b512:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b516:	4770      	bx	lr
   2b518:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2b51c:	e7e5      	b.n	2b4ea <__any_on+0x16>
   2b51e:	2001      	movs	r0, #1
   2b520:	4770      	bx	lr
   2b522:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2b526:	2a00      	cmp	r2, #0
   2b528:	d1f2      	bne.n	2b510 <__any_on+0x3c>
   2b52a:	4283      	cmp	r3, r0
   2b52c:	d8f9      	bhi.n	2b522 <__any_on+0x4e>
   2b52e:	2000      	movs	r0, #0
   2b530:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b534:	4770      	bx	lr
   2b536:	bf00      	nop

0002b538 <_read_r>:
   2b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b53a:	460f      	mov	r7, r1
   2b53c:	4d08      	ldr	r5, [pc, #32]	; (2b560 <_read_r+0x28>)
   2b53e:	2600      	movs	r6, #0
   2b540:	4611      	mov	r1, r2
   2b542:	4604      	mov	r4, r0
   2b544:	461a      	mov	r2, r3
   2b546:	4638      	mov	r0, r7
   2b548:	602e      	str	r6, [r5, #0]
   2b54a:	f001 fb8e 	bl	2cc6a <_read>
   2b54e:	1c43      	adds	r3, r0, #1
   2b550:	d000      	beq.n	2b554 <_read_r+0x1c>
   2b552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b554:	682b      	ldr	r3, [r5, #0]
   2b556:	2b00      	cmp	r3, #0
   2b558:	d0fb      	beq.n	2b552 <_read_r+0x1a>
   2b55a:	6023      	str	r3, [r4, #0]
   2b55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b55e:	bf00      	nop
   2b560:	20026424 	.word	0x20026424

0002b564 <frexp>:
   2b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b566:	ec53 2b10 	vmov	r2, r3, d0
   2b56a:	4f15      	ldr	r7, [pc, #84]	; (2b5c0 <frexp+0x5c>)
   2b56c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   2b570:	2600      	movs	r6, #0
   2b572:	42b9      	cmp	r1, r7
   2b574:	6006      	str	r6, [r0, #0]
   2b576:	dc20      	bgt.n	2b5ba <frexp+0x56>
   2b578:	4604      	mov	r4, r0
   2b57a:	ee10 0a10 	vmov	r0, s0
   2b57e:	4308      	orrs	r0, r1
   2b580:	d01b      	beq.n	2b5ba <frexp+0x56>
   2b582:	4810      	ldr	r0, [pc, #64]	; (2b5c4 <frexp+0x60>)
   2b584:	461d      	mov	r5, r3
   2b586:	4018      	ands	r0, r3
   2b588:	b960      	cbnz	r0, 2b5a4 <frexp+0x40>
   2b58a:	4619      	mov	r1, r3
   2b58c:	2200      	movs	r2, #0
   2b58e:	ee10 0a10 	vmov	r0, s0
   2b592:	4b0d      	ldr	r3, [pc, #52]	; (2b5c8 <frexp+0x64>)
   2b594:	f7e1 fc2e 	bl	cdf4 <__aeabi_dmul>
   2b598:	f06f 0635 	mvn.w	r6, #53	; 0x35
   2b59c:	460d      	mov	r5, r1
   2b59e:	4602      	mov	r2, r0
   2b5a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2b5a4:	4809      	ldr	r0, [pc, #36]	; (2b5cc <frexp+0x68>)
   2b5a6:	1509      	asrs	r1, r1, #20
   2b5a8:	4028      	ands	r0, r5
   2b5aa:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   2b5ae:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   2b5b2:	4431      	add	r1, r6
   2b5b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2b5b8:	6021      	str	r1, [r4, #0]
   2b5ba:	ec43 2b10 	vmov	d0, r2, r3
   2b5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b5c0:	7fefffff 	.word	0x7fefffff
   2b5c4:	7ff00000 	.word	0x7ff00000
   2b5c8:	43500000 	.word	0x43500000
   2b5cc:	800fffff 	.word	0x800fffff

0002b5d0 <__sccl>:
   2b5d0:	b4f0      	push	{r4, r5, r6, r7}
   2b5d2:	780c      	ldrb	r4, [r1, #0]
   2b5d4:	2c5e      	cmp	r4, #94	; 0x5e
   2b5d6:	d023      	beq.n	2b620 <__sccl+0x50>
   2b5d8:	2200      	movs	r2, #0
   2b5da:	1c4e      	adds	r6, r1, #1
   2b5dc:	4615      	mov	r5, r2
   2b5de:	1e43      	subs	r3, r0, #1
   2b5e0:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   2b5e4:	f803 2f01 	strb.w	r2, [r3, #1]!
   2b5e8:	428b      	cmp	r3, r1
   2b5ea:	d1fb      	bne.n	2b5e4 <__sccl+0x14>
   2b5ec:	b1a4      	cbz	r4, 2b618 <__sccl+0x48>
   2b5ee:	f085 0201 	eor.w	r2, r5, #1
   2b5f2:	ea6f 0c00 	mvn.w	ip, r0
   2b5f6:	1c71      	adds	r1, r6, #1
   2b5f8:	5502      	strb	r2, [r0, r4]
   2b5fa:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   2b5fe:	1e4d      	subs	r5, r1, #1
   2b600:	460e      	mov	r6, r1
   2b602:	2b2d      	cmp	r3, #45	; 0x2d
   2b604:	d011      	beq.n	2b62a <__sccl+0x5a>
   2b606:	2b5d      	cmp	r3, #93	; 0x5d
   2b608:	d003      	beq.n	2b612 <__sccl+0x42>
   2b60a:	b10b      	cbz	r3, 2b610 <__sccl+0x40>
   2b60c:	461c      	mov	r4, r3
   2b60e:	e7f2      	b.n	2b5f6 <__sccl+0x26>
   2b610:	462e      	mov	r6, r5
   2b612:	4630      	mov	r0, r6
   2b614:	bcf0      	pop	{r4, r5, r6, r7}
   2b616:	4770      	bx	lr
   2b618:	3e01      	subs	r6, #1
   2b61a:	4630      	mov	r0, r6
   2b61c:	bcf0      	pop	{r4, r5, r6, r7}
   2b61e:	4770      	bx	lr
   2b620:	2201      	movs	r2, #1
   2b622:	1c8e      	adds	r6, r1, #2
   2b624:	784c      	ldrb	r4, [r1, #1]
   2b626:	4615      	mov	r5, r2
   2b628:	e7d9      	b.n	2b5de <__sccl+0xe>
   2b62a:	780f      	ldrb	r7, [r1, #0]
   2b62c:	2f5d      	cmp	r7, #93	; 0x5d
   2b62e:	d011      	beq.n	2b654 <__sccl+0x84>
   2b630:	42bc      	cmp	r4, r7
   2b632:	dc0f      	bgt.n	2b654 <__sccl+0x84>
   2b634:	1c66      	adds	r6, r4, #1
   2b636:	1983      	adds	r3, r0, r6
   2b638:	f803 2b01 	strb.w	r2, [r3], #1
   2b63c:	eb0c 0503 	add.w	r5, ip, r3
   2b640:	42af      	cmp	r7, r5
   2b642:	dcf9      	bgt.n	2b638 <__sccl+0x68>
   2b644:	43e3      	mvns	r3, r4
   2b646:	3102      	adds	r1, #2
   2b648:	443b      	add	r3, r7
   2b64a:	42bc      	cmp	r4, r7
   2b64c:	bfa8      	it	ge
   2b64e:	2300      	movge	r3, #0
   2b650:	199c      	adds	r4, r3, r6
   2b652:	e7d2      	b.n	2b5fa <__sccl+0x2a>
   2b654:	242d      	movs	r4, #45	; 0x2d
   2b656:	e7ce      	b.n	2b5f6 <__sccl+0x26>

0002b658 <nanf>:
   2b658:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2b660 <nanf+0x8>
   2b65c:	4770      	bx	lr
   2b65e:	bf00      	nop
   2b660:	7fc00000 	.word	0x7fc00000

0002b664 <_raise_r>:
   2b664:	291f      	cmp	r1, #31
   2b666:	b538      	push	{r3, r4, r5, lr}
   2b668:	4605      	mov	r5, r0
   2b66a:	d821      	bhi.n	2b6b0 <_raise_r+0x4c>
   2b66c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   2b670:	460c      	mov	r4, r1
   2b672:	b16a      	cbz	r2, 2b690 <_raise_r+0x2c>
   2b674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2b678:	b153      	cbz	r3, 2b690 <_raise_r+0x2c>
   2b67a:	2b01      	cmp	r3, #1
   2b67c:	d016      	beq.n	2b6ac <_raise_r+0x48>
   2b67e:	1c59      	adds	r1, r3, #1
   2b680:	d010      	beq.n	2b6a4 <_raise_r+0x40>
   2b682:	2500      	movs	r5, #0
   2b684:	4620      	mov	r0, r4
   2b686:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   2b68a:	4798      	blx	r3
   2b68c:	4628      	mov	r0, r5
   2b68e:	bd38      	pop	{r3, r4, r5, pc}
   2b690:	4628      	mov	r0, r5
   2b692:	f000 f831 	bl	2b6f8 <_getpid_r>
   2b696:	4622      	mov	r2, r4
   2b698:	4601      	mov	r1, r0
   2b69a:	4628      	mov	r0, r5
   2b69c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b6a0:	f000 b814 	b.w	2b6cc <_kill_r>
   2b6a4:	2316      	movs	r3, #22
   2b6a6:	2001      	movs	r0, #1
   2b6a8:	602b      	str	r3, [r5, #0]
   2b6aa:	bd38      	pop	{r3, r4, r5, pc}
   2b6ac:	2000      	movs	r0, #0
   2b6ae:	bd38      	pop	{r3, r4, r5, pc}
   2b6b0:	2316      	movs	r3, #22
   2b6b2:	f04f 30ff 	mov.w	r0, #4294967295
   2b6b6:	602b      	str	r3, [r5, #0]
   2b6b8:	bd38      	pop	{r3, r4, r5, pc}
   2b6ba:	bf00      	nop

0002b6bc <raise>:
   2b6bc:	4b02      	ldr	r3, [pc, #8]	; (2b6c8 <raise+0xc>)
   2b6be:	4601      	mov	r1, r0
   2b6c0:	6818      	ldr	r0, [r3, #0]
   2b6c2:	f7ff bfcf 	b.w	2b664 <_raise_r>
   2b6c6:	bf00      	nop
   2b6c8:	200204d8 	.word	0x200204d8

0002b6cc <_kill_r>:
   2b6cc:	b570      	push	{r4, r5, r6, lr}
   2b6ce:	460c      	mov	r4, r1
   2b6d0:	4603      	mov	r3, r0
   2b6d2:	4d08      	ldr	r5, [pc, #32]	; (2b6f4 <_kill_r+0x28>)
   2b6d4:	2600      	movs	r6, #0
   2b6d6:	4620      	mov	r0, r4
   2b6d8:	4611      	mov	r1, r2
   2b6da:	461c      	mov	r4, r3
   2b6dc:	602e      	str	r6, [r5, #0]
   2b6de:	f001 fad3 	bl	2cc88 <_kill>
   2b6e2:	1c43      	adds	r3, r0, #1
   2b6e4:	d000      	beq.n	2b6e8 <_kill_r+0x1c>
   2b6e6:	bd70      	pop	{r4, r5, r6, pc}
   2b6e8:	682b      	ldr	r3, [r5, #0]
   2b6ea:	2b00      	cmp	r3, #0
   2b6ec:	d0fb      	beq.n	2b6e6 <_kill_r+0x1a>
   2b6ee:	6023      	str	r3, [r4, #0]
   2b6f0:	bd70      	pop	{r4, r5, r6, pc}
   2b6f2:	bf00      	nop
   2b6f4:	20026424 	.word	0x20026424

0002b6f8 <_getpid_r>:
   2b6f8:	f001 bac8 	b.w	2cc8c <_getpid>

0002b6fc <sprintf>:
   2b6fc:	b40e      	push	{r1, r2, r3}
   2b6fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b700:	b09c      	sub	sp, #112	; 0x70
   2b702:	4f0d      	ldr	r7, [pc, #52]	; (2b738 <sprintf+0x3c>)
   2b704:	4604      	mov	r4, r0
   2b706:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   2b70a:	ab21      	add	r3, sp, #132	; 0x84
   2b70c:	4e0b      	ldr	r6, [pc, #44]	; (2b73c <sprintf+0x40>)
   2b70e:	a902      	add	r1, sp, #8
   2b710:	6838      	ldr	r0, [r7, #0]
   2b712:	f853 2b04 	ldr.w	r2, [r3], #4
   2b716:	9402      	str	r4, [sp, #8]
   2b718:	9301      	str	r3, [sp, #4]
   2b71a:	9406      	str	r4, [sp, #24]
   2b71c:	9507      	str	r5, [sp, #28]
   2b71e:	e9cd 5604 	strd	r5, r6, [sp, #16]
   2b722:	f7e3 f8c9 	bl	e8b8 <_svfprintf_r>
   2b726:	9b02      	ldr	r3, [sp, #8]
   2b728:	2200      	movs	r2, #0
   2b72a:	701a      	strb	r2, [r3, #0]
   2b72c:	b01c      	add	sp, #112	; 0x70
   2b72e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2b732:	b003      	add	sp, #12
   2b734:	4770      	bx	lr
   2b736:	bf00      	nop
   2b738:	200204d8 	.word	0x200204d8
   2b73c:	ffff0208 	.word	0xffff0208

0002b740 <strnlen>:
   2b740:	b191      	cbz	r1, 2b768 <strnlen+0x28>
   2b742:	4603      	mov	r3, r0
   2b744:	b410      	push	{r4}
   2b746:	1844      	adds	r4, r0, r1
   2b748:	e001      	b.n	2b74e <strnlen+0xe>
   2b74a:	42a3      	cmp	r3, r4
   2b74c:	d008      	beq.n	2b760 <strnlen+0x20>
   2b74e:	461a      	mov	r2, r3
   2b750:	3301      	adds	r3, #1
   2b752:	7811      	ldrb	r1, [r2, #0]
   2b754:	2900      	cmp	r1, #0
   2b756:	d1f8      	bne.n	2b74a <strnlen+0xa>
   2b758:	1a10      	subs	r0, r2, r0
   2b75a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b75e:	4770      	bx	lr
   2b760:	1a18      	subs	r0, r3, r0
   2b762:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b766:	4770      	bx	lr
   2b768:	4608      	mov	r0, r1
   2b76a:	4770      	bx	lr

0002b76c <_strtoll_l.isra.0>:
   2b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b770:	b087      	sub	sp, #28
   2b772:	4698      	mov	r8, r3
   2b774:	460d      	mov	r5, r1
   2b776:	9201      	str	r2, [sp, #4]
   2b778:	4a55      	ldr	r2, [pc, #340]	; (2b8d0 <_strtoll_l.isra.0+0x164>)
   2b77a:	9103      	str	r1, [sp, #12]
   2b77c:	9005      	str	r0, [sp, #20]
   2b77e:	4629      	mov	r1, r5
   2b780:	f815 4b01 	ldrb.w	r4, [r5], #1
   2b784:	5d13      	ldrb	r3, [r2, r4]
   2b786:	f013 0308 	ands.w	r3, r3, #8
   2b78a:	d1f8      	bne.n	2b77e <_strtoll_l.isra.0+0x12>
   2b78c:	2c2d      	cmp	r4, #45	; 0x2d
   2b78e:	d079      	beq.n	2b884 <_strtoll_l.isra.0+0x118>
   2b790:	2c2b      	cmp	r4, #43	; 0x2b
   2b792:	d012      	beq.n	2b7ba <_strtoll_l.isra.0+0x4e>
   2b794:	9304      	str	r3, [sp, #16]
   2b796:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2b79a:	f04f 33ff 	mov.w	r3, #4294967295
   2b79e:	9302      	str	r3, [sp, #8]
   2b7a0:	f038 0310 	bics.w	r3, r8, #16
   2b7a4:	d115      	bne.n	2b7d2 <_strtoll_l.isra.0+0x66>
   2b7a6:	2c30      	cmp	r4, #48	; 0x30
   2b7a8:	d075      	beq.n	2b896 <_strtoll_l.isra.0+0x12a>
   2b7aa:	f1b8 0f00 	cmp.w	r8, #0
   2b7ae:	d110      	bne.n	2b7d2 <_strtoll_l.isra.0+0x66>
   2b7b0:	260a      	movs	r6, #10
   2b7b2:	2700      	movs	r7, #0
   2b7b4:	f04f 080a 	mov.w	r8, #10
   2b7b8:	e00d      	b.n	2b7d6 <_strtoll_l.isra.0+0x6a>
   2b7ba:	9304      	str	r3, [sp, #16]
   2b7bc:	f04f 33ff 	mov.w	r3, #4294967295
   2b7c0:	782c      	ldrb	r4, [r5, #0]
   2b7c2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2b7c6:	9302      	str	r3, [sp, #8]
   2b7c8:	f038 0310 	bics.w	r3, r8, #16
   2b7cc:	f101 0502 	add.w	r5, r1, #2
   2b7d0:	d0e9      	beq.n	2b7a6 <_strtoll_l.isra.0+0x3a>
   2b7d2:	4646      	mov	r6, r8
   2b7d4:	17f7      	asrs	r7, r6, #31
   2b7d6:	4632      	mov	r2, r6
   2b7d8:	463b      	mov	r3, r7
   2b7da:	9802      	ldr	r0, [sp, #8]
   2b7dc:	4649      	mov	r1, r9
   2b7de:	f7e1 f83b 	bl	c858 <__aeabi_uldivmod>
   2b7e2:	468c      	mov	ip, r1
   2b7e4:	4682      	mov	sl, r0
   2b7e6:	2300      	movs	r3, #0
   2b7e8:	46e3      	mov	fp, ip
   2b7ea:	2000      	movs	r0, #0
   2b7ec:	2100      	movs	r1, #0
   2b7ee:	46a4      	mov	ip, r4
   2b7f0:	e010      	b.n	2b814 <_strtoll_l.isra.0+0xa8>
   2b7f2:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   2b7f6:	45a0      	cmp	r8, r4
   2b7f8:	dd1c      	ble.n	2b834 <_strtoll_l.isra.0+0xc8>
   2b7fa:	2b00      	cmp	r3, #0
   2b7fc:	db06      	blt.n	2b80c <_strtoll_l.isra.0+0xa0>
   2b7fe:	458b      	cmp	fp, r1
   2b800:	bf08      	it	eq
   2b802:	4582      	cmpeq	sl, r0
   2b804:	d302      	bcc.n	2b80c <_strtoll_l.isra.0+0xa0>
   2b806:	d127      	bne.n	2b858 <_strtoll_l.isra.0+0xec>
   2b808:	42a2      	cmp	r2, r4
   2b80a:	da25      	bge.n	2b858 <_strtoll_l.isra.0+0xec>
   2b80c:	f04f 33ff 	mov.w	r3, #4294967295
   2b810:	f815 cb01 	ldrb.w	ip, [r5], #1
   2b814:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   2b818:	2c09      	cmp	r4, #9
   2b81a:	d9ec      	bls.n	2b7f6 <_strtoll_l.isra.0+0x8a>
   2b81c:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   2b820:	2c19      	cmp	r4, #25
   2b822:	d9e6      	bls.n	2b7f2 <_strtoll_l.isra.0+0x86>
   2b824:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   2b828:	2c19      	cmp	r4, #25
   2b82a:	d803      	bhi.n	2b834 <_strtoll_l.isra.0+0xc8>
   2b82c:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   2b830:	45a0      	cmp	r8, r4
   2b832:	dce2      	bgt.n	2b7fa <_strtoll_l.isra.0+0x8e>
   2b834:	1c5a      	adds	r2, r3, #1
   2b836:	d01b      	beq.n	2b870 <_strtoll_l.isra.0+0x104>
   2b838:	9a04      	ldr	r2, [sp, #16]
   2b83a:	b112      	cbz	r2, 2b842 <_strtoll_l.isra.0+0xd6>
   2b83c:	4240      	negs	r0, r0
   2b83e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2b842:	9a01      	ldr	r2, [sp, #4]
   2b844:	b12a      	cbz	r2, 2b852 <_strtoll_l.isra.0+0xe6>
   2b846:	2b00      	cmp	r3, #0
   2b848:	d13e      	bne.n	2b8c8 <_strtoll_l.isra.0+0x15c>
   2b84a:	9b01      	ldr	r3, [sp, #4]
   2b84c:	461a      	mov	r2, r3
   2b84e:	9b03      	ldr	r3, [sp, #12]
   2b850:	6013      	str	r3, [r2, #0]
   2b852:	b007      	add	sp, #28
   2b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b858:	fb00 fc07 	mul.w	ip, r0, r7
   2b85c:	2301      	movs	r3, #1
   2b85e:	fb06 cc01 	mla	ip, r6, r1, ip
   2b862:	fba0 0106 	umull	r0, r1, r0, r6
   2b866:	4461      	add	r1, ip
   2b868:	1900      	adds	r0, r0, r4
   2b86a:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2b86e:	e7cf      	b.n	2b810 <_strtoll_l.isra.0+0xa4>
   2b870:	2322      	movs	r3, #34	; 0x22
   2b872:	9a05      	ldr	r2, [sp, #20]
   2b874:	6013      	str	r3, [r2, #0]
   2b876:	9b01      	ldr	r3, [sp, #4]
   2b878:	b1cb      	cbz	r3, 2b8ae <_strtoll_l.isra.0+0x142>
   2b87a:	1e6b      	subs	r3, r5, #1
   2b87c:	9802      	ldr	r0, [sp, #8]
   2b87e:	4649      	mov	r1, r9
   2b880:	9303      	str	r3, [sp, #12]
   2b882:	e7e2      	b.n	2b84a <_strtoll_l.isra.0+0xde>
   2b884:	2300      	movs	r3, #0
   2b886:	782c      	ldrb	r4, [r5, #0]
   2b888:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   2b88c:	1c8d      	adds	r5, r1, #2
   2b88e:	9302      	str	r3, [sp, #8]
   2b890:	2301      	movs	r3, #1
   2b892:	9304      	str	r3, [sp, #16]
   2b894:	e784      	b.n	2b7a0 <_strtoll_l.isra.0+0x34>
   2b896:	782b      	ldrb	r3, [r5, #0]
   2b898:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b89c:	2b58      	cmp	r3, #88	; 0x58
   2b89e:	d10b      	bne.n	2b8b8 <_strtoll_l.isra.0+0x14c>
   2b8a0:	786c      	ldrb	r4, [r5, #1]
   2b8a2:	2610      	movs	r6, #16
   2b8a4:	2700      	movs	r7, #0
   2b8a6:	3502      	adds	r5, #2
   2b8a8:	f04f 0810 	mov.w	r8, #16
   2b8ac:	e793      	b.n	2b7d6 <_strtoll_l.isra.0+0x6a>
   2b8ae:	9802      	ldr	r0, [sp, #8]
   2b8b0:	4649      	mov	r1, r9
   2b8b2:	b007      	add	sp, #28
   2b8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8b8:	f1b8 0f00 	cmp.w	r8, #0
   2b8bc:	d189      	bne.n	2b7d2 <_strtoll_l.isra.0+0x66>
   2b8be:	2608      	movs	r6, #8
   2b8c0:	2700      	movs	r7, #0
   2b8c2:	f04f 0808 	mov.w	r8, #8
   2b8c6:	e786      	b.n	2b7d6 <_strtoll_l.isra.0+0x6a>
   2b8c8:	4689      	mov	r9, r1
   2b8ca:	9002      	str	r0, [sp, #8]
   2b8cc:	e7d5      	b.n	2b87a <_strtoll_l.isra.0+0x10e>
   2b8ce:	bf00      	nop
   2b8d0:	0002f3c9 	.word	0x0002f3c9

0002b8d4 <_strtoll_r>:
   2b8d4:	f7ff bf4a 	b.w	2b76c <_strtoll_l.isra.0>

0002b8d8 <_strtoull_l.isra.0>:
   2b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b8dc:	b085      	sub	sp, #20
   2b8de:	468b      	mov	fp, r1
   2b8e0:	469a      	mov	sl, r3
   2b8e2:	460d      	mov	r5, r1
   2b8e4:	9201      	str	r2, [sp, #4]
   2b8e6:	4a5d      	ldr	r2, [pc, #372]	; (2ba5c <_strtoull_l.isra.0+0x184>)
   2b8e8:	9003      	str	r0, [sp, #12]
   2b8ea:	4629      	mov	r1, r5
   2b8ec:	f815 4b01 	ldrb.w	r4, [r5], #1
   2b8f0:	5d13      	ldrb	r3, [r2, r4]
   2b8f2:	f013 0308 	ands.w	r3, r3, #8
   2b8f6:	d1f8      	bne.n	2b8ea <_strtoull_l.isra.0+0x12>
   2b8f8:	2c2d      	cmp	r4, #45	; 0x2d
   2b8fa:	f000 8086 	beq.w	2ba0a <_strtoull_l.isra.0+0x132>
   2b8fe:	2c2b      	cmp	r4, #43	; 0x2b
   2b900:	d014      	beq.n	2b92c <_strtoull_l.isra.0+0x54>
   2b902:	9302      	str	r3, [sp, #8]
   2b904:	f03a 0310 	bics.w	r3, sl, #16
   2b908:	d117      	bne.n	2b93a <_strtoull_l.isra.0+0x62>
   2b90a:	2c30      	cmp	r4, #48	; 0x30
   2b90c:	f000 8082 	beq.w	2ba14 <_strtoull_l.isra.0+0x13c>
   2b910:	f1ba 0f00 	cmp.w	sl, #0
   2b914:	d111      	bne.n	2b93a <_strtoull_l.isra.0+0x62>
   2b916:	2205      	movs	r2, #5
   2b918:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   2b91c:	4f50      	ldr	r7, [pc, #320]	; (2ba60 <_strtoull_l.isra.0+0x188>)
   2b91e:	f04f 080a 	mov.w	r8, #10
   2b922:	f04f 0900 	mov.w	r9, #0
   2b926:	f04f 0a0a 	mov.w	sl, #10
   2b92a:	e01c      	b.n	2b966 <_strtoull_l.isra.0+0x8e>
   2b92c:	9302      	str	r3, [sp, #8]
   2b92e:	f03a 0310 	bics.w	r3, sl, #16
   2b932:	782c      	ldrb	r4, [r5, #0]
   2b934:	f101 0502 	add.w	r5, r1, #2
   2b938:	d0e7      	beq.n	2b90a <_strtoull_l.isra.0+0x32>
   2b93a:	ea4f 79ea 	mov.w	r9, sl, asr #31
   2b93e:	4652      	mov	r2, sl
   2b940:	f04f 30ff 	mov.w	r0, #4294967295
   2b944:	f04f 31ff 	mov.w	r1, #4294967295
   2b948:	464b      	mov	r3, r9
   2b94a:	46d0      	mov	r8, sl
   2b94c:	f7e0 ff84 	bl	c858 <__aeabi_uldivmod>
   2b950:	468c      	mov	ip, r1
   2b952:	4606      	mov	r6, r0
   2b954:	4652      	mov	r2, sl
   2b956:	464b      	mov	r3, r9
   2b958:	f04f 30ff 	mov.w	r0, #4294967295
   2b95c:	f04f 31ff 	mov.w	r1, #4294967295
   2b960:	4667      	mov	r7, ip
   2b962:	f7e0 ff79 	bl	c858 <__aeabi_uldivmod>
   2b966:	2300      	movs	r3, #0
   2b968:	2000      	movs	r0, #0
   2b96a:	2100      	movs	r1, #0
   2b96c:	46a4      	mov	ip, r4
   2b96e:	e013      	b.n	2b998 <_strtoull_l.isra.0+0xc0>
   2b970:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   2b974:	45a2      	cmp	sl, r4
   2b976:	dd1f      	ble.n	2b9b8 <_strtoull_l.isra.0+0xe0>
   2b978:	2b00      	cmp	r3, #0
   2b97a:	db09      	blt.n	2b990 <_strtoull_l.isra.0+0xb8>
   2b97c:	428f      	cmp	r7, r1
   2b97e:	bf08      	it	eq
   2b980:	4286      	cmpeq	r6, r0
   2b982:	d305      	bcc.n	2b990 <_strtoull_l.isra.0+0xb8>
   2b984:	42b9      	cmp	r1, r7
   2b986:	bf08      	it	eq
   2b988:	42b0      	cmpeq	r0, r6
   2b98a:	d125      	bne.n	2b9d8 <_strtoull_l.isra.0+0x100>
   2b98c:	4294      	cmp	r4, r2
   2b98e:	dd23      	ble.n	2b9d8 <_strtoull_l.isra.0+0x100>
   2b990:	f04f 33ff 	mov.w	r3, #4294967295
   2b994:	f815 cb01 	ldrb.w	ip, [r5], #1
   2b998:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   2b99c:	2c09      	cmp	r4, #9
   2b99e:	d9e9      	bls.n	2b974 <_strtoull_l.isra.0+0x9c>
   2b9a0:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   2b9a4:	2c19      	cmp	r4, #25
   2b9a6:	d9e3      	bls.n	2b970 <_strtoull_l.isra.0+0x98>
   2b9a8:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   2b9ac:	2c19      	cmp	r4, #25
   2b9ae:	d803      	bhi.n	2b9b8 <_strtoull_l.isra.0+0xe0>
   2b9b0:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   2b9b4:	45a2      	cmp	sl, r4
   2b9b6:	dcdf      	bgt.n	2b978 <_strtoull_l.isra.0+0xa0>
   2b9b8:	1c5a      	adds	r2, r3, #1
   2b9ba:	d019      	beq.n	2b9f0 <_strtoull_l.isra.0+0x118>
   2b9bc:	9a02      	ldr	r2, [sp, #8]
   2b9be:	b112      	cbz	r2, 2b9c6 <_strtoull_l.isra.0+0xee>
   2b9c0:	4240      	negs	r0, r0
   2b9c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2b9c6:	9a01      	ldr	r2, [sp, #4]
   2b9c8:	b11a      	cbz	r2, 2b9d2 <_strtoull_l.isra.0+0xfa>
   2b9ca:	b9db      	cbnz	r3, 2ba04 <_strtoull_l.isra.0+0x12c>
   2b9cc:	9b01      	ldr	r3, [sp, #4]
   2b9ce:	f8c3 b000 	str.w	fp, [r3]
   2b9d2:	b005      	add	sp, #20
   2b9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9d8:	fb00 fc09 	mul.w	ip, r0, r9
   2b9dc:	2301      	movs	r3, #1
   2b9de:	fb08 cc01 	mla	ip, r8, r1, ip
   2b9e2:	fba0 0108 	umull	r0, r1, r0, r8
   2b9e6:	4461      	add	r1, ip
   2b9e8:	1900      	adds	r0, r0, r4
   2b9ea:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2b9ee:	e7d1      	b.n	2b994 <_strtoull_l.isra.0+0xbc>
   2b9f0:	2322      	movs	r3, #34	; 0x22
   2b9f2:	9a03      	ldr	r2, [sp, #12]
   2b9f4:	f04f 30ff 	mov.w	r0, #4294967295
   2b9f8:	f04f 31ff 	mov.w	r1, #4294967295
   2b9fc:	6013      	str	r3, [r2, #0]
   2b9fe:	9b01      	ldr	r3, [sp, #4]
   2ba00:	2b00      	cmp	r3, #0
   2ba02:	d0e6      	beq.n	2b9d2 <_strtoull_l.isra.0+0xfa>
   2ba04:	f105 3bff 	add.w	fp, r5, #4294967295
   2ba08:	e7e0      	b.n	2b9cc <_strtoull_l.isra.0+0xf4>
   2ba0a:	2301      	movs	r3, #1
   2ba0c:	782c      	ldrb	r4, [r5, #0]
   2ba0e:	1c8d      	adds	r5, r1, #2
   2ba10:	9302      	str	r3, [sp, #8]
   2ba12:	e777      	b.n	2b904 <_strtoull_l.isra.0+0x2c>
   2ba14:	782b      	ldrb	r3, [r5, #0]
   2ba16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2ba1a:	2b58      	cmp	r3, #88	; 0x58
   2ba1c:	d10d      	bne.n	2ba3a <_strtoull_l.isra.0+0x162>
   2ba1e:	786c      	ldrb	r4, [r5, #1]
   2ba20:	220f      	movs	r2, #15
   2ba22:	3502      	adds	r5, #2
   2ba24:	f04f 36ff 	mov.w	r6, #4294967295
   2ba28:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   2ba2c:	f04f 0810 	mov.w	r8, #16
   2ba30:	f04f 0900 	mov.w	r9, #0
   2ba34:	f04f 0a10 	mov.w	sl, #16
   2ba38:	e795      	b.n	2b966 <_strtoull_l.isra.0+0x8e>
   2ba3a:	f1ba 0f00 	cmp.w	sl, #0
   2ba3e:	f47f af7c 	bne.w	2b93a <_strtoull_l.isra.0+0x62>
   2ba42:	2207      	movs	r2, #7
   2ba44:	f04f 36ff 	mov.w	r6, #4294967295
   2ba48:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   2ba4c:	f04f 0808 	mov.w	r8, #8
   2ba50:	f04f 0900 	mov.w	r9, #0
   2ba54:	f04f 0a08 	mov.w	sl, #8
   2ba58:	e785      	b.n	2b966 <_strtoull_l.isra.0+0x8e>
   2ba5a:	bf00      	nop
   2ba5c:	0002f3c9 	.word	0x0002f3c9
   2ba60:	19999999 	.word	0x19999999

0002ba64 <_strtoull_r>:
   2ba64:	f7ff bf38 	b.w	2b8d8 <_strtoull_l.isra.0>

0002ba68 <__ssprint_r>:
   2ba68:	6893      	ldr	r3, [r2, #8]
   2ba6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba6e:	4691      	mov	r9, r2
   2ba70:	b083      	sub	sp, #12
   2ba72:	2b00      	cmp	r3, #0
   2ba74:	d076      	beq.n	2bb64 <__ssprint_r+0xfc>
   2ba76:	6817      	ldr	r7, [r2, #0]
   2ba78:	4680      	mov	r8, r0
   2ba7a:	460c      	mov	r4, r1
   2ba7c:	6808      	ldr	r0, [r1, #0]
   2ba7e:	3708      	adds	r7, #8
   2ba80:	688d      	ldr	r5, [r1, #8]
   2ba82:	e04b      	b.n	2bb1c <__ssprint_r+0xb4>
   2ba84:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   2ba88:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   2ba8c:	d034      	beq.n	2baf8 <__ssprint_r+0x90>
   2ba8e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2ba92:	eb12 0242 	adds.w	r2, r2, r2, lsl #1
   2ba96:	eba0 0501 	sub.w	r5, r0, r1
   2ba9a:	bf48      	it	mi
   2ba9c:	3201      	addmi	r2, #1
   2ba9e:	19a8      	adds	r0, r5, r6
   2baa0:	ea4f 0b62 	mov.w	fp, r2, asr #1
   2baa4:	3001      	adds	r0, #1
   2baa6:	4558      	cmp	r0, fp
   2baa8:	465a      	mov	r2, fp
   2baaa:	d901      	bls.n	2bab0 <__ssprint_r+0x48>
   2baac:	4683      	mov	fp, r0
   2baae:	4602      	mov	r2, r0
   2bab0:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   2bab4:	9301      	str	r3, [sp, #4]
   2bab6:	d03b      	beq.n	2bb30 <__ssprint_r+0xc8>
   2bab8:	4611      	mov	r1, r2
   2baba:	4640      	mov	r0, r8
   2babc:	f7f9 ff48 	bl	25950 <_malloc_r>
   2bac0:	9b01      	ldr	r3, [sp, #4]
   2bac2:	4682      	mov	sl, r0
   2bac4:	2800      	cmp	r0, #0
   2bac6:	d03e      	beq.n	2bb46 <__ssprint_r+0xde>
   2bac8:	462a      	mov	r2, r5
   2baca:	6921      	ldr	r1, [r4, #16]
   2bacc:	9301      	str	r3, [sp, #4]
   2bace:	f7e1 f83d 	bl	cb4c <memcpy>
   2bad2:	89a2      	ldrh	r2, [r4, #12]
   2bad4:	9b01      	ldr	r3, [sp, #4]
   2bad6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2bada:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2bade:	81a2      	strh	r2, [r4, #12]
   2bae0:	eb0a 0005 	add.w	r0, sl, r5
   2bae4:	ebab 0205 	sub.w	r2, fp, r5
   2bae8:	f8c4 a010 	str.w	sl, [r4, #16]
   2baec:	4635      	mov	r5, r6
   2baee:	46b2      	mov	sl, r6
   2baf0:	6020      	str	r0, [r4, #0]
   2baf2:	60a2      	str	r2, [r4, #8]
   2baf4:	f8c4 b014 	str.w	fp, [r4, #20]
   2baf8:	4619      	mov	r1, r3
   2bafa:	4652      	mov	r2, sl
   2bafc:	f7ff f806 	bl	2ab0c <memmove>
   2bb00:	68a0      	ldr	r0, [r4, #8]
   2bb02:	f8d9 1008 	ldr.w	r1, [r9, #8]
   2bb06:	6823      	ldr	r3, [r4, #0]
   2bb08:	1b45      	subs	r5, r0, r5
   2bb0a:	1b8e      	subs	r6, r1, r6
   2bb0c:	eb03 000a 	add.w	r0, r3, sl
   2bb10:	60a5      	str	r5, [r4, #8]
   2bb12:	6020      	str	r0, [r4, #0]
   2bb14:	f8c9 6008 	str.w	r6, [r9, #8]
   2bb18:	b326      	cbz	r6, 2bb64 <__ssprint_r+0xfc>
   2bb1a:	3708      	adds	r7, #8
   2bb1c:	e957 3602 	ldrd	r3, r6, [r7, #-8]
   2bb20:	2e00      	cmp	r6, #0
   2bb22:	d0fa      	beq.n	2bb1a <__ssprint_r+0xb2>
   2bb24:	42b5      	cmp	r5, r6
   2bb26:	46aa      	mov	sl, r5
   2bb28:	d9ac      	bls.n	2ba84 <__ssprint_r+0x1c>
   2bb2a:	4635      	mov	r5, r6
   2bb2c:	46b2      	mov	sl, r6
   2bb2e:	e7e3      	b.n	2baf8 <__ssprint_r+0x90>
   2bb30:	4640      	mov	r0, r8
   2bb32:	f7fa faab 	bl	2608c <_realloc_r>
   2bb36:	9b01      	ldr	r3, [sp, #4]
   2bb38:	4682      	mov	sl, r0
   2bb3a:	2800      	cmp	r0, #0
   2bb3c:	d1d0      	bne.n	2bae0 <__ssprint_r+0x78>
   2bb3e:	6921      	ldr	r1, [r4, #16]
   2bb40:	4640      	mov	r0, r8
   2bb42:	f7fe f86f 	bl	29c24 <_free_r>
   2bb46:	230c      	movs	r3, #12
   2bb48:	2200      	movs	r2, #0
   2bb4a:	f04f 30ff 	mov.w	r0, #4294967295
   2bb4e:	f8c8 3000 	str.w	r3, [r8]
   2bb52:	89a3      	ldrh	r3, [r4, #12]
   2bb54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2bb58:	81a3      	strh	r3, [r4, #12]
   2bb5a:	e9c9 2201 	strd	r2, r2, [r9, #4]
   2bb5e:	b003      	add	sp, #12
   2bb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb64:	2000      	movs	r0, #0
   2bb66:	f8c9 0004 	str.w	r0, [r9, #4]
   2bb6a:	b003      	add	sp, #12
   2bb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bb70 <_sungetc_r>:
   2bb70:	b538      	push	{r3, r4, r5, lr}
   2bb72:	1c4b      	adds	r3, r1, #1
   2bb74:	d01a      	beq.n	2bbac <_sungetc_r+0x3c>
   2bb76:	8993      	ldrh	r3, [r2, #12]
   2bb78:	4614      	mov	r4, r2
   2bb7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
   2bb7c:	b2cd      	uxtb	r5, r1
   2bb7e:	f023 0320 	bic.w	r3, r3, #32
   2bb82:	81a3      	strh	r3, [r4, #12]
   2bb84:	b1aa      	cbz	r2, 2bbb2 <_sungetc_r+0x42>
   2bb86:	6862      	ldr	r2, [r4, #4]
   2bb88:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2bb8a:	429a      	cmp	r2, r3
   2bb8c:	da09      	bge.n	2bba2 <_sungetc_r+0x32>
   2bb8e:	6823      	ldr	r3, [r4, #0]
   2bb90:	1e5a      	subs	r2, r3, #1
   2bb92:	6022      	str	r2, [r4, #0]
   2bb94:	f803 5c01 	strb.w	r5, [r3, #-1]
   2bb98:	6863      	ldr	r3, [r4, #4]
   2bb9a:	3301      	adds	r3, #1
   2bb9c:	6063      	str	r3, [r4, #4]
   2bb9e:	4628      	mov	r0, r5
   2bba0:	bd38      	pop	{r3, r4, r5, pc}
   2bba2:	4621      	mov	r1, r4
   2bba4:	f000 f884 	bl	2bcb0 <__submore>
   2bba8:	2800      	cmp	r0, #0
   2bbaa:	d0f0      	beq.n	2bb8e <_sungetc_r+0x1e>
   2bbac:	f04f 35ff 	mov.w	r5, #4294967295
   2bbb0:	e7f5      	b.n	2bb9e <_sungetc_r+0x2e>
   2bbb2:	6922      	ldr	r2, [r4, #16]
   2bbb4:	6823      	ldr	r3, [r4, #0]
   2bbb6:	b12a      	cbz	r2, 2bbc4 <_sungetc_r+0x54>
   2bbb8:	429a      	cmp	r2, r3
   2bbba:	d203      	bcs.n	2bbc4 <_sungetc_r+0x54>
   2bbbc:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   2bbc0:	42aa      	cmp	r2, r5
   2bbc2:	d00f      	beq.n	2bbe4 <_sungetc_r+0x74>
   2bbc4:	6862      	ldr	r2, [r4, #4]
   2bbc6:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2bbca:	63a3      	str	r3, [r4, #56]	; 0x38
   2bbcc:	2103      	movs	r1, #3
   2bbce:	4623      	mov	r3, r4
   2bbd0:	63e2      	str	r2, [r4, #60]	; 0x3c
   2bbd2:	2201      	movs	r2, #1
   2bbd4:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
   2bbd8:	f803 5f42 	strb.w	r5, [r3, #66]!
   2bbdc:	4628      	mov	r0, r5
   2bbde:	e9c4 3200 	strd	r3, r2, [r4]
   2bbe2:	bd38      	pop	{r3, r4, r5, pc}
   2bbe4:	6862      	ldr	r2, [r4, #4]
   2bbe6:	3b01      	subs	r3, #1
   2bbe8:	3201      	adds	r2, #1
   2bbea:	e9c4 3200 	strd	r3, r2, [r4]
   2bbee:	e7d6      	b.n	2bb9e <_sungetc_r+0x2e>

0002bbf0 <__ssrefill_r>:
   2bbf0:	b510      	push	{r4, lr}
   2bbf2:	460c      	mov	r4, r1
   2bbf4:	6b09      	ldr	r1, [r1, #48]	; 0x30
   2bbf6:	b169      	cbz	r1, 2bc14 <__ssrefill_r+0x24>
   2bbf8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2bbfc:	4299      	cmp	r1, r3
   2bbfe:	d001      	beq.n	2bc04 <__ssrefill_r+0x14>
   2bc00:	f7fe f810 	bl	29c24 <_free_r>
   2bc04:	2000      	movs	r0, #0
   2bc06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2bc08:	6320      	str	r0, [r4, #48]	; 0x30
   2bc0a:	6063      	str	r3, [r4, #4]
   2bc0c:	b113      	cbz	r3, 2bc14 <__ssrefill_r+0x24>
   2bc0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2bc10:	6023      	str	r3, [r4, #0]
   2bc12:	bd10      	pop	{r4, pc}
   2bc14:	89a3      	ldrh	r3, [r4, #12]
   2bc16:	2100      	movs	r1, #0
   2bc18:	6922      	ldr	r2, [r4, #16]
   2bc1a:	f04f 30ff 	mov.w	r0, #4294967295
   2bc1e:	f043 0320 	orr.w	r3, r3, #32
   2bc22:	e9c4 2100 	strd	r2, r1, [r4]
   2bc26:	81a3      	strh	r3, [r4, #12]
   2bc28:	bd10      	pop	{r4, pc}
   2bc2a:	bf00      	nop

0002bc2c <_sfread_r>:
   2bc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc30:	fb02 fa03 	mul.w	sl, r2, r3
   2bc34:	b083      	sub	sp, #12
   2bc36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bc38:	e9cd 3200 	strd	r3, r2, [sp]
   2bc3c:	f1ba 0f00 	cmp.w	sl, #0
   2bc40:	d027      	beq.n	2bc92 <_sfread_r+0x66>
   2bc42:	4680      	mov	r8, r0
   2bc44:	460e      	mov	r6, r1
   2bc46:	4657      	mov	r7, sl
   2bc48:	f04f 0900 	mov.w	r9, #0
   2bc4c:	e00e      	b.n	2bc6c <_sfread_r+0x40>
   2bc4e:	6821      	ldr	r1, [r4, #0]
   2bc50:	442e      	add	r6, r5
   2bc52:	f7e0 ff7b 	bl	cb4c <memcpy>
   2bc56:	6823      	ldr	r3, [r4, #0]
   2bc58:	4621      	mov	r1, r4
   2bc5a:	4640      	mov	r0, r8
   2bc5c:	442b      	add	r3, r5
   2bc5e:	f8c4 9004 	str.w	r9, [r4, #4]
   2bc62:	6023      	str	r3, [r4, #0]
   2bc64:	f7ff ffc4 	bl	2bbf0 <__ssrefill_r>
   2bc68:	b9b8      	cbnz	r0, 2bc9a <_sfread_r+0x6e>
   2bc6a:	465f      	mov	r7, fp
   2bc6c:	6865      	ldr	r5, [r4, #4]
   2bc6e:	4630      	mov	r0, r6
   2bc70:	42bd      	cmp	r5, r7
   2bc72:	462a      	mov	r2, r5
   2bc74:	eba7 0b05 	sub.w	fp, r7, r5
   2bc78:	d3e9      	bcc.n	2bc4e <_sfread_r+0x22>
   2bc7a:	463a      	mov	r2, r7
   2bc7c:	6821      	ldr	r1, [r4, #0]
   2bc7e:	f8dd a000 	ldr.w	sl, [sp]
   2bc82:	f7e0 ff63 	bl	cb4c <memcpy>
   2bc86:	e9d4 3200 	ldrd	r3, r2, [r4]
   2bc8a:	1bd2      	subs	r2, r2, r7
   2bc8c:	441f      	add	r7, r3
   2bc8e:	e9c4 7200 	strd	r7, r2, [r4]
   2bc92:	4650      	mov	r0, sl
   2bc94:	b003      	add	sp, #12
   2bc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc9a:	44aa      	add	sl, r5
   2bc9c:	9b01      	ldr	r3, [sp, #4]
   2bc9e:	ebaa 0707 	sub.w	r7, sl, r7
   2bca2:	fbb7 faf3 	udiv	sl, r7, r3
   2bca6:	4650      	mov	r0, sl
   2bca8:	b003      	add	sp, #12
   2bcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bcae:	bf00      	nop

0002bcb0 <__submore>:
   2bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bcb4:	460c      	mov	r4, r1
   2bcb6:	6b09      	ldr	r1, [r1, #48]	; 0x30
   2bcb8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2bcbc:	4299      	cmp	r1, r3
   2bcbe:	d014      	beq.n	2bcea <__submore+0x3a>
   2bcc0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2bcc2:	0077      	lsls	r7, r6, #1
   2bcc4:	463a      	mov	r2, r7
   2bcc6:	f7fa f9e1 	bl	2608c <_realloc_r>
   2bcca:	4605      	mov	r5, r0
   2bccc:	b348      	cbz	r0, 2bd22 <__submore+0x72>
   2bcce:	eb00 0806 	add.w	r8, r0, r6
   2bcd2:	4601      	mov	r1, r0
   2bcd4:	4632      	mov	r2, r6
   2bcd6:	4640      	mov	r0, r8
   2bcd8:	f7e0 ff38 	bl	cb4c <memcpy>
   2bcdc:	2000      	movs	r0, #0
   2bcde:	f8c4 8000 	str.w	r8, [r4]
   2bce2:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   2bce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bcea:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2bcee:	f7f9 fe2f 	bl	25950 <_malloc_r>
   2bcf2:	4603      	mov	r3, r0
   2bcf4:	b1a8      	cbz	r0, 2bd22 <__submore+0x72>
   2bcf6:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   2bcfa:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2bcfe:	6323      	str	r3, [r4, #48]	; 0x30
   2bd00:	f203 32fd 	addw	r2, r3, #1021	; 0x3fd
   2bd04:	6360      	str	r0, [r4, #52]	; 0x34
   2bd06:	2000      	movs	r0, #0
   2bd08:	f883 13ff 	strb.w	r1, [r3, #1023]	; 0x3ff
   2bd0c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   2bd10:	f883 13fe 	strb.w	r1, [r3, #1022]	; 0x3fe
   2bd14:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   2bd18:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
   2bd1c:	6022      	str	r2, [r4, #0]
   2bd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bd22:	f04f 30ff 	mov.w	r0, #4294967295
   2bd26:	e7de      	b.n	2bce6 <__submore+0x36>

0002bd28 <__swbuf_r>:
   2bd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bd2a:	460d      	mov	r5, r1
   2bd2c:	4614      	mov	r4, r2
   2bd2e:	4606      	mov	r6, r0
   2bd30:	b110      	cbz	r0, 2bd38 <__swbuf_r+0x10>
   2bd32:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2bd34:	2b00      	cmp	r3, #0
   2bd36:	d043      	beq.n	2bdc0 <__swbuf_r+0x98>
   2bd38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2bd3c:	69a3      	ldr	r3, [r4, #24]
   2bd3e:	0717      	lsls	r7, r2, #28
   2bd40:	b290      	uxth	r0, r2
   2bd42:	60a3      	str	r3, [r4, #8]
   2bd44:	d51b      	bpl.n	2bd7e <__swbuf_r+0x56>
   2bd46:	6923      	ldr	r3, [r4, #16]
   2bd48:	b1cb      	cbz	r3, 2bd7e <__swbuf_r+0x56>
   2bd4a:	b2ed      	uxtb	r5, r5
   2bd4c:	0481      	lsls	r1, r0, #18
   2bd4e:	462f      	mov	r7, r5
   2bd50:	d522      	bpl.n	2bd98 <__swbuf_r+0x70>
   2bd52:	6822      	ldr	r2, [r4, #0]
   2bd54:	6961      	ldr	r1, [r4, #20]
   2bd56:	1ad3      	subs	r3, r2, r3
   2bd58:	4299      	cmp	r1, r3
   2bd5a:	dd29      	ble.n	2bdb0 <__swbuf_r+0x88>
   2bd5c:	3301      	adds	r3, #1
   2bd5e:	68a1      	ldr	r1, [r4, #8]
   2bd60:	1c50      	adds	r0, r2, #1
   2bd62:	3901      	subs	r1, #1
   2bd64:	6020      	str	r0, [r4, #0]
   2bd66:	60a1      	str	r1, [r4, #8]
   2bd68:	7015      	strb	r5, [r2, #0]
   2bd6a:	6962      	ldr	r2, [r4, #20]
   2bd6c:	429a      	cmp	r2, r3
   2bd6e:	d02a      	beq.n	2bdc6 <__swbuf_r+0x9e>
   2bd70:	2d0a      	cmp	r5, #10
   2bd72:	d102      	bne.n	2bd7a <__swbuf_r+0x52>
   2bd74:	7b23      	ldrb	r3, [r4, #12]
   2bd76:	07db      	lsls	r3, r3, #31
   2bd78:	d425      	bmi.n	2bdc6 <__swbuf_r+0x9e>
   2bd7a:	4638      	mov	r0, r7
   2bd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bd7e:	4621      	mov	r1, r4
   2bd80:	4630      	mov	r0, r6
   2bd82:	f7fd fc23 	bl	295cc <__swsetup_r>
   2bd86:	bb20      	cbnz	r0, 2bdd2 <__swbuf_r+0xaa>
   2bd88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2bd8c:	b2ed      	uxtb	r5, r5
   2bd8e:	6923      	ldr	r3, [r4, #16]
   2bd90:	b290      	uxth	r0, r2
   2bd92:	462f      	mov	r7, r5
   2bd94:	0481      	lsls	r1, r0, #18
   2bd96:	d4dc      	bmi.n	2bd52 <__swbuf_r+0x2a>
   2bd98:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2bd9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2bd9e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2bda2:	81a2      	strh	r2, [r4, #12]
   2bda4:	6822      	ldr	r2, [r4, #0]
   2bda6:	6661      	str	r1, [r4, #100]	; 0x64
   2bda8:	1ad3      	subs	r3, r2, r3
   2bdaa:	6961      	ldr	r1, [r4, #20]
   2bdac:	4299      	cmp	r1, r3
   2bdae:	dcd5      	bgt.n	2bd5c <__swbuf_r+0x34>
   2bdb0:	4621      	mov	r1, r4
   2bdb2:	4630      	mov	r0, r6
   2bdb4:	f7fd fdc8 	bl	29948 <_fflush_r>
   2bdb8:	b958      	cbnz	r0, 2bdd2 <__swbuf_r+0xaa>
   2bdba:	6822      	ldr	r2, [r4, #0]
   2bdbc:	2301      	movs	r3, #1
   2bdbe:	e7ce      	b.n	2bd5e <__swbuf_r+0x36>
   2bdc0:	f7fd fe20 	bl	29a04 <__sinit>
   2bdc4:	e7b8      	b.n	2bd38 <__swbuf_r+0x10>
   2bdc6:	4621      	mov	r1, r4
   2bdc8:	4630      	mov	r0, r6
   2bdca:	f7fd fdbd 	bl	29948 <_fflush_r>
   2bdce:	2800      	cmp	r0, #0
   2bdd0:	d0d3      	beq.n	2bd7a <__swbuf_r+0x52>
   2bdd2:	f04f 37ff 	mov.w	r7, #4294967295
   2bdd6:	e7d0      	b.n	2bd7a <__swbuf_r+0x52>

0002bdd8 <_wcrtomb_r>:
   2bdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bdda:	4606      	mov	r6, r0
   2bddc:	b085      	sub	sp, #20
   2bdde:	461d      	mov	r5, r3
   2bde0:	b139      	cbz	r1, 2bdf2 <_wcrtomb_r+0x1a>
   2bde2:	4c0b      	ldr	r4, [pc, #44]	; (2be10 <_wcrtomb_r+0x38>)
   2bde4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   2bde8:	47a0      	blx	r4
   2bdea:	1c43      	adds	r3, r0, #1
   2bdec:	d009      	beq.n	2be02 <_wcrtomb_r+0x2a>
   2bdee:	b005      	add	sp, #20
   2bdf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bdf2:	4f07      	ldr	r7, [pc, #28]	; (2be10 <_wcrtomb_r+0x38>)
   2bdf4:	460a      	mov	r2, r1
   2bdf6:	a901      	add	r1, sp, #4
   2bdf8:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
   2bdfc:	47a0      	blx	r4
   2bdfe:	1c43      	adds	r3, r0, #1
   2be00:	d1f5      	bne.n	2bdee <_wcrtomb_r+0x16>
   2be02:	2200      	movs	r2, #0
   2be04:	238a      	movs	r3, #138	; 0x8a
   2be06:	602a      	str	r2, [r5, #0]
   2be08:	6033      	str	r3, [r6, #0]
   2be0a:	b005      	add	sp, #20
   2be0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2be0e:	bf00      	nop
   2be10:	200208f0 	.word	0x200208f0

0002be14 <__ascii_wctomb>:
   2be14:	4603      	mov	r3, r0
   2be16:	b149      	cbz	r1, 2be2c <__ascii_wctomb+0x18>
   2be18:	2aff      	cmp	r2, #255	; 0xff
   2be1a:	d802      	bhi.n	2be22 <__ascii_wctomb+0xe>
   2be1c:	2001      	movs	r0, #1
   2be1e:	700a      	strb	r2, [r1, #0]
   2be20:	4770      	bx	lr
   2be22:	228a      	movs	r2, #138	; 0x8a
   2be24:	f04f 30ff 	mov.w	r0, #4294967295
   2be28:	601a      	str	r2, [r3, #0]
   2be2a:	4770      	bx	lr
   2be2c:	4608      	mov	r0, r1
   2be2e:	4770      	bx	lr

0002be30 <_calloc_r>:
   2be30:	b510      	push	{r4, lr}
   2be32:	fb02 f101 	mul.w	r1, r2, r1
   2be36:	f7f9 fd8b 	bl	25950 <_malloc_r>
   2be3a:	4604      	mov	r4, r0
   2be3c:	b168      	cbz	r0, 2be5a <_calloc_r+0x2a>
   2be3e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2be42:	f022 0203 	bic.w	r2, r2, #3
   2be46:	3a04      	subs	r2, #4
   2be48:	2a24      	cmp	r2, #36	; 0x24
   2be4a:	d814      	bhi.n	2be76 <_calloc_r+0x46>
   2be4c:	2a13      	cmp	r2, #19
   2be4e:	d806      	bhi.n	2be5e <_calloc_r+0x2e>
   2be50:	4602      	mov	r2, r0
   2be52:	2300      	movs	r3, #0
   2be54:	e9c2 3300 	strd	r3, r3, [r2]
   2be58:	6093      	str	r3, [r2, #8]
   2be5a:	4620      	mov	r0, r4
   2be5c:	bd10      	pop	{r4, pc}
   2be5e:	2300      	movs	r3, #0
   2be60:	2a1b      	cmp	r2, #27
   2be62:	e9c0 3300 	strd	r3, r3, [r0]
   2be66:	d90b      	bls.n	2be80 <_calloc_r+0x50>
   2be68:	2a24      	cmp	r2, #36	; 0x24
   2be6a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   2be6e:	d00a      	beq.n	2be86 <_calloc_r+0x56>
   2be70:	f100 0210 	add.w	r2, r0, #16
   2be74:	e7ed      	b.n	2be52 <_calloc_r+0x22>
   2be76:	2100      	movs	r1, #0
   2be78:	f7fa f8a4 	bl	25fc4 <memset>
   2be7c:	4620      	mov	r0, r4
   2be7e:	bd10      	pop	{r4, pc}
   2be80:	f100 0208 	add.w	r2, r0, #8
   2be84:	e7e5      	b.n	2be52 <_calloc_r+0x22>
   2be86:	f100 0218 	add.w	r2, r0, #24
   2be8a:	6103      	str	r3, [r0, #16]
   2be8c:	6143      	str	r3, [r0, #20]
   2be8e:	e7e0      	b.n	2be52 <_calloc_r+0x22>

0002be90 <_fclose_r>:
   2be90:	b570      	push	{r4, r5, r6, lr}
   2be92:	2900      	cmp	r1, #0
   2be94:	d04b      	beq.n	2bf2e <_fclose_r+0x9e>
   2be96:	460c      	mov	r4, r1
   2be98:	4605      	mov	r5, r0
   2be9a:	b110      	cbz	r0, 2bea2 <_fclose_r+0x12>
   2be9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2be9e:	2b00      	cmp	r3, #0
   2bea0:	d048      	beq.n	2bf34 <_fclose_r+0xa4>
   2bea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2bea4:	07d8      	lsls	r0, r3, #31
   2bea6:	d534      	bpl.n	2bf12 <_fclose_r+0x82>
   2bea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2beac:	2b00      	cmp	r3, #0
   2beae:	d03e      	beq.n	2bf2e <_fclose_r+0x9e>
   2beb0:	4621      	mov	r1, r4
   2beb2:	4628      	mov	r0, r5
   2beb4:	f7fd fca6 	bl	29804 <__sflush_r>
   2beb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2beba:	4606      	mov	r6, r0
   2bebc:	b133      	cbz	r3, 2becc <_fclose_r+0x3c>
   2bebe:	69e1      	ldr	r1, [r4, #28]
   2bec0:	4628      	mov	r0, r5
   2bec2:	4798      	blx	r3
   2bec4:	2800      	cmp	r0, #0
   2bec6:	bfb8      	it	lt
   2bec8:	f04f 36ff 	movlt.w	r6, #4294967295
   2becc:	89a3      	ldrh	r3, [r4, #12]
   2bece:	061a      	lsls	r2, r3, #24
   2bed0:	d43b      	bmi.n	2bf4a <_fclose_r+0xba>
   2bed2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2bed4:	b141      	cbz	r1, 2bee8 <_fclose_r+0x58>
   2bed6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2beda:	4299      	cmp	r1, r3
   2bedc:	d002      	beq.n	2bee4 <_fclose_r+0x54>
   2bede:	4628      	mov	r0, r5
   2bee0:	f7fd fea0 	bl	29c24 <_free_r>
   2bee4:	2300      	movs	r3, #0
   2bee6:	6323      	str	r3, [r4, #48]	; 0x30
   2bee8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2beea:	b121      	cbz	r1, 2bef6 <_fclose_r+0x66>
   2beec:	4628      	mov	r0, r5
   2beee:	f7fd fe99 	bl	29c24 <_free_r>
   2bef2:	2300      	movs	r3, #0
   2bef4:	6463      	str	r3, [r4, #68]	; 0x44
   2bef6:	f7fd fdb5 	bl	29a64 <__sfp_lock_acquire>
   2befa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2befc:	2200      	movs	r2, #0
   2befe:	07db      	lsls	r3, r3, #31
   2bf00:	81a2      	strh	r2, [r4, #12]
   2bf02:	d527      	bpl.n	2bf54 <_fclose_r+0xc4>
   2bf04:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2bf06:	f7fe fd31 	bl	2a96c <__retarget_lock_close_recursive>
   2bf0a:	f7fd fdb1 	bl	29a70 <__sfp_lock_release>
   2bf0e:	4630      	mov	r0, r6
   2bf10:	bd70      	pop	{r4, r5, r6, pc}
   2bf12:	89a3      	ldrh	r3, [r4, #12]
   2bf14:	0599      	lsls	r1, r3, #22
   2bf16:	d4cb      	bmi.n	2beb0 <_fclose_r+0x20>
   2bf18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2bf1a:	f7fe fd29 	bl	2a970 <__retarget_lock_acquire_recursive>
   2bf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2bf22:	2b00      	cmp	r3, #0
   2bf24:	d1c4      	bne.n	2beb0 <_fclose_r+0x20>
   2bf26:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2bf28:	f016 0601 	ands.w	r6, r6, #1
   2bf2c:	d008      	beq.n	2bf40 <_fclose_r+0xb0>
   2bf2e:	2600      	movs	r6, #0
   2bf30:	4630      	mov	r0, r6
   2bf32:	bd70      	pop	{r4, r5, r6, pc}
   2bf34:	f7fd fd66 	bl	29a04 <__sinit>
   2bf38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2bf3a:	07d8      	lsls	r0, r3, #31
   2bf3c:	d4b4      	bmi.n	2bea8 <_fclose_r+0x18>
   2bf3e:	e7e8      	b.n	2bf12 <_fclose_r+0x82>
   2bf40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2bf42:	f7fe fd17 	bl	2a974 <__retarget_lock_release_recursive>
   2bf46:	4630      	mov	r0, r6
   2bf48:	bd70      	pop	{r4, r5, r6, pc}
   2bf4a:	6921      	ldr	r1, [r4, #16]
   2bf4c:	4628      	mov	r0, r5
   2bf4e:	f7fd fe69 	bl	29c24 <_free_r>
   2bf52:	e7be      	b.n	2bed2 <_fclose_r+0x42>
   2bf54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2bf56:	f7fe fd0d 	bl	2a974 <__retarget_lock_release_recursive>
   2bf5a:	e7d3      	b.n	2bf04 <_fclose_r+0x74>

0002bf5c <_fstat_r>:
   2bf5c:	b570      	push	{r4, r5, r6, lr}
   2bf5e:	460c      	mov	r4, r1
   2bf60:	4603      	mov	r3, r0
   2bf62:	4d08      	ldr	r5, [pc, #32]	; (2bf84 <_fstat_r+0x28>)
   2bf64:	2600      	movs	r6, #0
   2bf66:	4620      	mov	r0, r4
   2bf68:	4611      	mov	r1, r2
   2bf6a:	461c      	mov	r4, r3
   2bf6c:	602e      	str	r6, [r5, #0]
   2bf6e:	f000 fe8f 	bl	2cc90 <_fstat>
   2bf72:	1c43      	adds	r3, r0, #1
   2bf74:	d000      	beq.n	2bf78 <_fstat_r+0x1c>
   2bf76:	bd70      	pop	{r4, r5, r6, pc}
   2bf78:	682b      	ldr	r3, [r5, #0]
   2bf7a:	2b00      	cmp	r3, #0
   2bf7c:	d0fb      	beq.n	2bf76 <_fstat_r+0x1a>
   2bf7e:	6023      	str	r3, [r4, #0]
   2bf80:	bd70      	pop	{r4, r5, r6, pc}
   2bf82:	bf00      	nop
   2bf84:	20026424 	.word	0x20026424

0002bf88 <_isatty_r>:
   2bf88:	b538      	push	{r3, r4, r5, lr}
   2bf8a:	2200      	movs	r2, #0
   2bf8c:	4d06      	ldr	r5, [pc, #24]	; (2bfa8 <_isatty_r+0x20>)
   2bf8e:	4604      	mov	r4, r0
   2bf90:	4608      	mov	r0, r1
   2bf92:	602a      	str	r2, [r5, #0]
   2bf94:	f000 fe76 	bl	2cc84 <_isatty>
   2bf98:	1c43      	adds	r3, r0, #1
   2bf9a:	d000      	beq.n	2bf9e <_isatty_r+0x16>
   2bf9c:	bd38      	pop	{r3, r4, r5, pc}
   2bf9e:	682b      	ldr	r3, [r5, #0]
   2bfa0:	2b00      	cmp	r3, #0
   2bfa2:	d0fb      	beq.n	2bf9c <_isatty_r+0x14>
   2bfa4:	6023      	str	r3, [r4, #0]
   2bfa6:	bd38      	pop	{r3, r4, r5, pc}
   2bfa8:	20026424 	.word	0x20026424

0002bfac <sys_notify_validate>:
	if (notify == NULL) {
   2bfac:	b140      	cbz	r0, 2bfc0 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2bfae:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2bfb0:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   2bfb4:	2b02      	cmp	r3, #2
   2bfb6:	d006      	beq.n	2bfc6 <sys_notify_validate+0x1a>
   2bfb8:	2b03      	cmp	r3, #3
   2bfba:	d004      	beq.n	2bfc6 <sys_notify_validate+0x1a>
   2bfbc:	2b01      	cmp	r3, #1
   2bfbe:	d005      	beq.n	2bfcc <sys_notify_validate+0x20>
		return -EINVAL;
   2bfc0:	f06f 0015 	mvn.w	r0, #21
}
   2bfc4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2bfc6:	6803      	ldr	r3, [r0, #0]
   2bfc8:	2b00      	cmp	r3, #0
   2bfca:	d0f9      	beq.n	2bfc0 <sys_notify_validate+0x14>
		notify->result = 0;
   2bfcc:	2300      	movs	r3, #0
   2bfce:	6083      	str	r3, [r0, #8]
   2bfd0:	4618      	mov	r0, r3
   2bfd2:	4770      	bx	lr

0002bfd4 <arch_printk_char_out>:
}
   2bfd4:	2000      	movs	r0, #0
   2bfd6:	4770      	bx	lr

0002bfd8 <str_out>:
{
   2bfd8:	b530      	push	{r4, r5, lr}
   2bfda:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2bfdc:	680c      	ldr	r4, [r1, #0]
   2bfde:	1c55      	adds	r5, r2, #1
   2bfe0:	b114      	cbz	r4, 2bfe8 <str_out+0x10>
   2bfe2:	684b      	ldr	r3, [r1, #4]
   2bfe4:	4293      	cmp	r3, r2
   2bfe6:	dc01      	bgt.n	2bfec <str_out+0x14>
		ctx->count++;
   2bfe8:	608d      	str	r5, [r1, #8]
}
   2bfea:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2bfec:	3b01      	subs	r3, #1
   2bfee:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2bff0:	bf08      	it	eq
   2bff2:	2200      	moveq	r2, #0
   2bff4:	608d      	str	r5, [r1, #8]
   2bff6:	bf0c      	ite	eq
   2bff8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2bffa:	54a0      	strbne	r0, [r4, r2]
   2bffc:	e7f5      	b.n	2bfea <str_out+0x12>

0002bffe <printk>:
{
   2bffe:	b40f      	push	{r0, r1, r2, r3}
   2c000:	b507      	push	{r0, r1, r2, lr}
   2c002:	a904      	add	r1, sp, #16
   2c004:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2c008:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2c00a:	f7e6 fa17 	bl	1243c <vprintk>
}
   2c00e:	b003      	add	sp, #12
   2c010:	f85d eb04 	ldr.w	lr, [sp], #4
   2c014:	b004      	add	sp, #16
   2c016:	4770      	bx	lr

0002c018 <snprintk>:
{
   2c018:	b40c      	push	{r2, r3}
   2c01a:	b507      	push	{r0, r1, r2, lr}
   2c01c:	ab04      	add	r3, sp, #16
   2c01e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2c022:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2c024:	f7e6 fa18 	bl	12458 <vsnprintk>
}
   2c028:	b003      	add	sp, #12
   2c02a:	f85d eb04 	ldr.w	lr, [sp], #4
   2c02e:	b002      	add	sp, #8
   2c030:	4770      	bx	lr

0002c032 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2c032:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2c034:	f013 0307 	ands.w	r3, r3, #7
   2c038:	d105      	bne.n	2c046 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2c03a:	6803      	ldr	r3, [r0, #0]
   2c03c:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2c03e:	bf0c      	ite	eq
   2c040:	2000      	moveq	r0, #0
   2c042:	2003      	movne	r0, #3
   2c044:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2c046:	2b02      	cmp	r3, #2
   2c048:	d105      	bne.n	2c056 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   2c04a:	8bc3      	ldrh	r3, [r0, #30]
   2c04c:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2c04e:	bf14      	ite	ne
   2c050:	2000      	movne	r0, #0
   2c052:	2004      	moveq	r0, #4
   2c054:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2c056:	2b01      	cmp	r3, #1
   2c058:	d105      	bne.n	2c066 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2c05a:	6803      	ldr	r3, [r0, #0]
   2c05c:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2c05e:	bf0c      	ite	eq
   2c060:	2000      	moveq	r0, #0
   2c062:	2005      	movne	r0, #5
   2c064:	4770      	bx	lr
	int evt = EVT_NOP;
   2c066:	2000      	movs	r0, #0
}
   2c068:	4770      	bx	lr

0002c06a <notify_one>:
{
   2c06a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c06c:	460d      	mov	r5, r1
   2c06e:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c070:	4619      	mov	r1, r3
   2c072:	1d28      	adds	r0, r5, #4
{
   2c074:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c076:	9300      	str	r3, [sp, #0]
   2c078:	f7e6 f826 	bl	120c8 <sys_notify_finalize>
	if (cb) {
   2c07c:	4604      	mov	r4, r0
   2c07e:	b140      	cbz	r0, 2c092 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2c080:	e9dd 3200 	ldrd	r3, r2, [sp]
   2c084:	4629      	mov	r1, r5
   2c086:	4630      	mov	r0, r6
   2c088:	46a4      	mov	ip, r4
}
   2c08a:	b002      	add	sp, #8
   2c08c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   2c090:	4760      	bx	ip
}
   2c092:	b002      	add	sp, #8
   2c094:	bd70      	pop	{r4, r5, r6, pc}

0002c096 <validate_args>:
{
   2c096:	b510      	push	{r4, lr}
   2c098:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2c09a:	b140      	cbz	r0, 2c0ae <validate_args+0x18>
   2c09c:	b139      	cbz	r1, 2c0ae <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2c09e:	1d08      	adds	r0, r1, #4
   2c0a0:	f7ff ff84 	bl	2bfac <sys_notify_validate>
	if ((rv == 0)
   2c0a4:	b928      	cbnz	r0, 2c0b2 <validate_args+0x1c>
	    && ((cli->notify.flags
   2c0a6:	68a3      	ldr	r3, [r4, #8]
   2c0a8:	f033 0303 	bics.w	r3, r3, #3
   2c0ac:	d001      	beq.n	2c0b2 <validate_args+0x1c>
		rv = -EINVAL;
   2c0ae:	f06f 0015 	mvn.w	r0, #21
}
   2c0b2:	bd10      	pop	{r4, pc}

0002c0b4 <onoff_manager_init>:
{
   2c0b4:	b538      	push	{r3, r4, r5, lr}
   2c0b6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2c0b8:	4605      	mov	r5, r0
   2c0ba:	b158      	cbz	r0, 2c0d4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2c0bc:	b151      	cbz	r1, 2c0d4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2c0be:	680b      	ldr	r3, [r1, #0]
   2c0c0:	b143      	cbz	r3, 2c0d4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2c0c2:	684b      	ldr	r3, [r1, #4]
   2c0c4:	b133      	cbz	r3, 2c0d4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c0c6:	2220      	movs	r2, #32
   2c0c8:	2100      	movs	r1, #0
   2c0ca:	f7f9 ff7b 	bl	25fc4 <memset>
	return 0;
   2c0ce:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c0d0:	612c      	str	r4, [r5, #16]
}
   2c0d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2c0d4:	f06f 0015 	mvn.w	r0, #21
   2c0d8:	e7fb      	b.n	2c0d2 <onoff_manager_init+0x1e>

0002c0da <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2c0da:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2c0dc:	f7f8 f9d8 	bl	24490 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2c0e0:	2000      	movs	r0, #0
   2c0e2:	bd08      	pop	{r3, pc}

0002c0e4 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2c0e4:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2c0e6:	f7f8 fa17 	bl	24518 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2c0ea:	f110 0f0b 	cmn.w	r0, #11
   2c0ee:	d005      	beq.n	2c0fc <sys_sem_take+0x18>
   2c0f0:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2c0f4:	bf08      	it	eq
   2c0f6:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2c0fa:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2c0fc:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2c100:	e7fb      	b.n	2c0fa <sys_sem_take+0x16>

0002c102 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2c102:	4604      	mov	r4, r0
   2c104:	b508      	push	{r3, lr}
   2c106:	4608      	mov	r0, r1
   2c108:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2c10a:	461a      	mov	r2, r3
   2c10c:	47a0      	blx	r4
	return z_impl_k_current_get();
   2c10e:	f7f8 f9b9 	bl	24484 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2c112:	f7e8 ff1f 	bl	14f54 <z_impl_k_thread_abort>

0002c116 <chunk_field>:
	if (big_heap(h)) {
   2c116:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2c118:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c11c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2c120:	bf2c      	ite	cs
   2c122:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   2c126:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   2c12a:	4770      	bx	lr

0002c12c <chunk_set>:
	void *cmem = &buf[c];
   2c12c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c130:	6880      	ldr	r0, [r0, #8]
   2c132:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   2c136:	bf2c      	ite	cs
   2c138:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2c13c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   2c140:	4770      	bx	lr

0002c142 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c142:	2201      	movs	r2, #1
{
   2c144:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c146:	f7ff ffe6 	bl	2c116 <chunk_field>
}
   2c14a:	0840      	lsrs	r0, r0, #1
   2c14c:	bd08      	pop	{r3, pc}

0002c14e <set_chunk_used>:
	if (big_heap(h)) {
   2c14e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2c150:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c158:	d308      	bcc.n	2c16c <set_chunk_used+0x1e>
		if (used) {
   2c15a:	684b      	ldr	r3, [r1, #4]
   2c15c:	b11a      	cbz	r2, 2c166 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   2c15e:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c162:	604b      	str	r3, [r1, #4]
   2c164:	4770      	bx	lr
   2c166:	f023 0301 	bic.w	r3, r3, #1
   2c16a:	e7fa      	b.n	2c162 <set_chunk_used+0x14>
		if (used) {
   2c16c:	884b      	ldrh	r3, [r1, #2]
   2c16e:	b11a      	cbz	r2, 2c178 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   2c170:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c174:	804b      	strh	r3, [r1, #2]
}
   2c176:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c178:	f023 0301 	bic.w	r3, r3, #1
   2c17c:	e7fa      	b.n	2c174 <set_chunk_used+0x26>

0002c17e <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c17e:	0053      	lsls	r3, r2, #1
   2c180:	2201      	movs	r2, #1
   2c182:	f7ff bfd3 	b.w	2c12c <chunk_set>

0002c186 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   2c186:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2c188:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   2c18a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c18e:	bf2c      	ite	cs
   2c190:	2008      	movcs	r0, #8
   2c192:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2c194:	4408      	add	r0, r1
}
   2c196:	08c0      	lsrs	r0, r0, #3
   2c198:	4770      	bx	lr

0002c19a <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   2c19a:	460a      	mov	r2, r1
   2c19c:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   2c19e:	2101      	movs	r1, #1
   2c1a0:	f7ff fff1 	bl	2c186 <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   2c1a4:	3201      	adds	r2, #1
   2c1a6:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   2c1a8:	fab0 f080 	clz	r0, r0
}
   2c1ac:	f1c0 001f 	rsb	r0, r0, #31
   2c1b0:	bd08      	pop	{r3, pc}

0002c1b2 <merge_chunks>:
{
   2c1b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c1b4:	4616      	mov	r6, r2
   2c1b6:	4604      	mov	r4, r0
   2c1b8:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2c1ba:	f7ff ffc2 	bl	2c142 <chunk_size>
   2c1be:	4631      	mov	r1, r6
   2c1c0:	4605      	mov	r5, r0
   2c1c2:	4620      	mov	r0, r4
   2c1c4:	f7ff ffbd 	bl	2c142 <chunk_size>
   2c1c8:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
   2c1ca:	461a      	mov	r2, r3
   2c1cc:	4639      	mov	r1, r7
   2c1ce:	4620      	mov	r0, r4
   2c1d0:	9301      	str	r3, [sp, #4]
   2c1d2:	f7ff ffd4 	bl	2c17e <set_chunk_size>
	return c + chunk_size(h, c);
   2c1d6:	4631      	mov	r1, r6
   2c1d8:	4620      	mov	r0, r4
   2c1da:	f7ff ffb2 	bl	2c142 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2c1de:	2200      	movs	r2, #0
   2c1e0:	1831      	adds	r1, r6, r0
   2c1e2:	4620      	mov	r0, r4
   2c1e4:	9b01      	ldr	r3, [sp, #4]
}
   2c1e6:	b003      	add	sp, #12
   2c1e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c1ec:	f7ff bf9e 	b.w	2c12c <chunk_set>

0002c1f0 <split_chunks>:
{
   2c1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c1f2:	4614      	mov	r4, r2
   2c1f4:	460e      	mov	r6, r1
   2c1f6:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   2c1f8:	f7ff ffa3 	bl	2c142 <chunk_size>
	size_t lsz = rc - lc;
   2c1fc:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   2c1fe:	1b32      	subs	r2, r6, r4
   2c200:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   2c202:	4631      	mov	r1, r6
   2c204:	461a      	mov	r2, r3
   2c206:	4628      	mov	r0, r5
   2c208:	9301      	str	r3, [sp, #4]
   2c20a:	f7ff ffb8 	bl	2c17e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2c20e:	463a      	mov	r2, r7
   2c210:	4621      	mov	r1, r4
   2c212:	4628      	mov	r0, r5
   2c214:	f7ff ffb3 	bl	2c17e <set_chunk_size>
   2c218:	9b01      	ldr	r3, [sp, #4]
   2c21a:	2200      	movs	r2, #0
   2c21c:	4621      	mov	r1, r4
   2c21e:	4628      	mov	r0, r5
   2c220:	f7ff ff84 	bl	2c12c <chunk_set>
	return c + chunk_size(h, c);
   2c224:	4621      	mov	r1, r4
   2c226:	4628      	mov	r0, r5
   2c228:	f7ff ff8b 	bl	2c142 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2c22c:	463b      	mov	r3, r7
   2c22e:	1821      	adds	r1, r4, r0
   2c230:	2200      	movs	r2, #0
   2c232:	4628      	mov	r0, r5
}
   2c234:	b003      	add	sp, #12
   2c236:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c23a:	f7ff bf77 	b.w	2c12c <chunk_set>

0002c23e <free_list_remove_bidx>:
{
   2c23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c242:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   2c244:	2203      	movs	r2, #3
   2c246:	460e      	mov	r6, r1
   2c248:	4604      	mov	r4, r0
   2c24a:	f7ff ff64 	bl	2c116 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   2c24e:	4286      	cmp	r6, r0
   2c250:	4605      	mov	r5, r0
   2c252:	f107 0804 	add.w	r8, r7, #4
   2c256:	d10b      	bne.n	2c270 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2c258:	2301      	movs	r3, #1
   2c25a:	fa03 f707 	lsl.w	r7, r3, r7
   2c25e:	68e3      	ldr	r3, [r4, #12]
   2c260:	ea23 0307 	bic.w	r3, r3, r7
   2c264:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   2c266:	2300      	movs	r3, #0
   2c268:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   2c26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2c270:	4631      	mov	r1, r6
   2c272:	2202      	movs	r2, #2
   2c274:	4620      	mov	r0, r4
   2c276:	f7ff ff4e 	bl	2c116 <chunk_field>
   2c27a:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   2c27c:	462b      	mov	r3, r5
   2c27e:	4601      	mov	r1, r0
   2c280:	2203      	movs	r2, #3
   2c282:	4620      	mov	r0, r4
		b->next = second;
   2c284:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2c288:	f7ff ff50 	bl	2c12c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2c28c:	4633      	mov	r3, r6
   2c28e:	4629      	mov	r1, r5
   2c290:	4620      	mov	r0, r4
}
   2c292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c296:	2202      	movs	r2, #2
   2c298:	f7ff bf48 	b.w	2c12c <chunk_set>

0002c29c <free_list_remove>:
{
   2c29c:	b538      	push	{r3, r4, r5, lr}
   2c29e:	4604      	mov	r4, r0
   2c2a0:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   2c2a2:	f7ff ff4e 	bl	2c142 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   2c2a6:	68a3      	ldr	r3, [r4, #8]
   2c2a8:	4601      	mov	r1, r0
   2c2aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c2ae:	d301      	bcc.n	2c2b4 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   2c2b0:	2801      	cmp	r0, #1
   2c2b2:	d009      	beq.n	2c2c8 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c2b4:	4620      	mov	r0, r4
   2c2b6:	f7ff ff70 	bl	2c19a <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   2c2ba:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c2bc:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2c2be:	4620      	mov	r0, r4
}
   2c2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2c2c4:	f7ff bfbb 	b.w	2c23e <free_list_remove_bidx>
}
   2c2c8:	bd38      	pop	{r3, r4, r5, pc}

0002c2ca <alloc_chunk>:
{
   2c2ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c2ce:	4604      	mov	r4, r0
   2c2d0:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   2c2d2:	f7ff ff62 	bl	2c19a <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   2c2d6:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   2c2d8:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   2c2da:	4620      	mov	r0, r4
   2c2dc:	f7ff ff5d 	bl	2c19a <bucket_idx>
   2c2e0:	42a8      	cmp	r0, r5
   2c2e2:	da04      	bge.n	2c2ee <alloc_chunk+0x24>
		return 0;
   2c2e4:	2100      	movs	r1, #0
}
   2c2e6:	4608      	mov	r0, r1
   2c2e8:	b003      	add	sp, #12
   2c2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   2c2ee:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   2c2f2:	f8d9 8010 	ldr.w	r8, [r9, #16]
   2c2f6:	f1b8 0f00 	cmp.w	r8, #0
   2c2fa:	d019      	beq.n	2c330 <alloc_chunk+0x66>
   2c2fc:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   2c2fe:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   2c302:	4620      	mov	r0, r4
   2c304:	9101      	str	r1, [sp, #4]
   2c306:	f7ff ff1c 	bl	2c142 <chunk_size>
   2c30a:	42b8      	cmp	r0, r7
   2c30c:	9901      	ldr	r1, [sp, #4]
   2c30e:	d305      	bcc.n	2c31c <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   2c310:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   2c312:	4620      	mov	r0, r4
   2c314:	f7ff ff93 	bl	2c23e <free_list_remove_bidx>
   2c318:	9901      	ldr	r1, [sp, #4]
		return c;
   2c31a:	e7e4      	b.n	2c2e6 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   2c31c:	2203      	movs	r2, #3
   2c31e:	4620      	mov	r0, r4
   2c320:	f7ff fef9 	bl	2c116 <chunk_field>
		} while (--i && b->next != first);
   2c324:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   2c326:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   2c32a:	d001      	beq.n	2c330 <alloc_chunk+0x66>
   2c32c:	4580      	cmp	r8, r0
   2c32e:	d1e6      	bne.n	2c2fe <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2c330:	f04f 32ff 	mov.w	r2, #4294967295
   2c334:	68e3      	ldr	r3, [r4, #12]
   2c336:	3501      	adds	r5, #1
   2c338:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   2c33a:	401a      	ands	r2, r3
   2c33c:	d0d2      	beq.n	2c2e4 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   2c33e:	fa92 f2a2 	rbit	r2, r2
   2c342:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2c346:	1d13      	adds	r3, r2, #4
   2c348:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2c34c:	9101      	str	r1, [sp, #4]
   2c34e:	e7e0      	b.n	2c312 <alloc_chunk+0x48>

0002c350 <free_list_add>:
{
   2c350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c354:	4604      	mov	r4, r0
   2c356:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   2c358:	f7ff fef3 	bl	2c142 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   2c35c:	68a3      	ldr	r3, [r4, #8]
   2c35e:	4601      	mov	r1, r0
   2c360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c364:	d301      	bcc.n	2c36a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   2c366:	2801      	cmp	r0, #1
   2c368:	d035      	beq.n	2c3d6 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c36a:	4620      	mov	r0, r4
   2c36c:	f7ff ff15 	bl	2c19a <bucket_idx>
	if (b->next == 0) {
   2c370:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2c374:	6916      	ldr	r6, [r2, #16]
   2c376:	b99e      	cbnz	r6, 2c3a0 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2c378:	2301      	movs	r3, #1
   2c37a:	fa03 f000 	lsl.w	r0, r3, r0
   2c37e:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   2c380:	4629      	mov	r1, r5
   2c382:	4303      	orrs	r3, r0
   2c384:	60e3      	str	r3, [r4, #12]
   2c386:	4620      	mov	r0, r4
		b->next = c;
   2c388:	6115      	str	r5, [r2, #16]
   2c38a:	462b      	mov	r3, r5
   2c38c:	2202      	movs	r2, #2
   2c38e:	f7ff fecd 	bl	2c12c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2c392:	2203      	movs	r2, #3
   2c394:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2c396:	4620      	mov	r0, r4
}
   2c398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c39c:	f7ff bec6 	b.w	2c12c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2c3a0:	2202      	movs	r2, #2
   2c3a2:	4631      	mov	r1, r6
   2c3a4:	4620      	mov	r0, r4
   2c3a6:	f7ff feb6 	bl	2c116 <chunk_field>
   2c3aa:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   2c3ac:	4603      	mov	r3, r0
   2c3ae:	2202      	movs	r2, #2
   2c3b0:	4629      	mov	r1, r5
   2c3b2:	4620      	mov	r0, r4
   2c3b4:	f7ff feba 	bl	2c12c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2c3b8:	4633      	mov	r3, r6
   2c3ba:	2203      	movs	r2, #3
   2c3bc:	4629      	mov	r1, r5
   2c3be:	4620      	mov	r0, r4
   2c3c0:	f7ff feb4 	bl	2c12c <chunk_set>
   2c3c4:	2203      	movs	r2, #3
   2c3c6:	4639      	mov	r1, r7
   2c3c8:	462b      	mov	r3, r5
   2c3ca:	4620      	mov	r0, r4
   2c3cc:	f7ff feae 	bl	2c12c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2c3d0:	2202      	movs	r2, #2
   2c3d2:	4631      	mov	r1, r6
   2c3d4:	e7df      	b.n	2c396 <free_list_add+0x46>
   2c3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c3da <sys_heap_alloc>:
{
   2c3da:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   2c3dc:	b909      	cbnz	r1, 2c3e2 <sys_heap_alloc+0x8>
		return NULL;
   2c3de:	2000      	movs	r0, #0
}
   2c3e0:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   2c3e2:	6804      	ldr	r4, [r0, #0]
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2c3e4:	4620      	mov	r0, r4
   2c3e6:	f7ff fece 	bl	2c186 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c3ea:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2c3ec:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c3ee:	4620      	mov	r0, r4
   2c3f0:	f7ff ff6b 	bl	2c2ca <alloc_chunk>
	if (c == 0) {
   2c3f4:	4605      	mov	r5, r0
   2c3f6:	2800      	cmp	r0, #0
   2c3f8:	d0f1      	beq.n	2c3de <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   2c3fa:	4601      	mov	r1, r0
   2c3fc:	4620      	mov	r0, r4
   2c3fe:	f7ff fea0 	bl	2c142 <chunk_size>
   2c402:	42b0      	cmp	r0, r6
   2c404:	d909      	bls.n	2c41a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2c406:	442e      	add	r6, r5
   2c408:	4629      	mov	r1, r5
   2c40a:	4620      	mov	r0, r4
   2c40c:	4632      	mov	r2, r6
   2c40e:	f7ff feef 	bl	2c1f0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2c412:	4631      	mov	r1, r6
   2c414:	4620      	mov	r0, r4
   2c416:	f7ff ff9b 	bl	2c350 <free_list_add>
	set_chunk_used(h, c, true);
   2c41a:	4620      	mov	r0, r4
   2c41c:	2201      	movs	r2, #1
   2c41e:	4629      	mov	r1, r5
   2c420:	f7ff fe95 	bl	2c14e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   2c424:	68a3      	ldr	r3, [r4, #8]
   2c426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c42a:	bf2c      	ite	cs
   2c42c:	2008      	movcs	r0, #8
   2c42e:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2c430:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   2c434:	4420      	add	r0, r4
	return chunk_mem(h, c);
   2c436:	e7d3      	b.n	2c3e0 <sys_heap_alloc+0x6>

0002c438 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2c438:	4040      	eors	r0, r0
   2c43a:	f380 8811 	msr	BASEPRI, r0
   2c43e:	f04f 0004 	mov.w	r0, #4
   2c442:	df02      	svc	2
}
   2c444:	4770      	bx	lr

0002c446 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_DEMO_LOG_LEVEL_DBG, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_DEMO_LOG_LEVEL, 4);

GEN_ABS_SYM_END
   2c446:	4770      	bx	lr

0002c448 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2c448:	f7f5 bcd8 	b.w	21dfc <SystemInit>

0002c44c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2c44c:	2300      	movs	r3, #0
	list->head = NULL;
   2c44e:	e9c0 3300 	strd	r3, r3, [r0]
}
   2c452:	4770      	bx	lr

0002c454 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2c454:	6803      	ldr	r3, [r0, #0]
   2c456:	b923      	cbnz	r3, 2c462 <log_list_add_tail+0xe>
		list->head = msg;
   2c458:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   2c45a:	2300      	movs	r3, #0
	list->tail = msg;
   2c45c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2c45e:	600b      	str	r3, [r1, #0]
}
   2c460:	4770      	bx	lr
		list->tail->next = msg;
   2c462:	6843      	ldr	r3, [r0, #4]
   2c464:	6019      	str	r1, [r3, #0]
   2c466:	e7f8      	b.n	2c45a <log_list_add_tail+0x6>

0002c468 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2c468:	6800      	ldr	r0, [r0, #0]
   2c46a:	4770      	bx	lr

0002c46c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   2c46c:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   2c46e:	b10b      	cbz	r3, 2c474 <log_list_head_get+0x8>
		list->head = list->head->next;
   2c470:	681a      	ldr	r2, [r3, #0]
   2c472:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   2c474:	4618      	mov	r0, r3
   2c476:	4770      	bx	lr

0002c478 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   2c478:	6843      	ldr	r3, [r0, #4]
}
   2c47a:	7958      	ldrb	r0, [r3, #5]
   2c47c:	4770      	bx	lr

0002c47e <z_log_msg_std_alloc>:
{
   2c47e:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2c480:	f7e6 fffc 	bl	1347c <log_msg_chunk_alloc>
	if (msg != NULL) {
   2c484:	b118      	cbz	r0, 2c48e <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   2c486:	2301      	movs	r3, #1
   2c488:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2c48a:	2300      	movs	r3, #0
   2c48c:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   2c48e:	bd08      	pop	{r3, pc}

0002c490 <k_cycle_get_32_wrapper>:
   2c490:	f7e8 b868 	b.w	14564 <z_timer_cycle_get_32>

0002c494 <dummy_timestamp>:
   2c494:	2000      	movs	r0, #0
   2c496:	4770      	bx	lr

0002c498 <log_0>:
{
   2c498:	b513      	push	{r0, r1, r4, lr}
   2c49a:	4604      	mov	r4, r0
   2c49c:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   2c49e:	f7ff ffee 	bl	2c47e <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c4a2:	b130      	cbz	r0, 2c4b2 <log_0+0x1a>
		msg_finalize(msg, src_level);
   2c4a4:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c4a6:	6104      	str	r4, [r0, #16]
}
   2c4a8:	b002      	add	sp, #8
   2c4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2c4ae:	f7e6 beeb 	b.w	13288 <msg_finalize>
}
   2c4b2:	b002      	add	sp, #8
   2c4b4:	bd10      	pop	{r4, pc}

0002c4b6 <log_1>:
{
   2c4b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c4b8:	460c      	mov	r4, r1
   2c4ba:	4611      	mov	r1, r2
   2c4bc:	4605      	mov	r5, r0
   2c4be:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c4c0:	f7ff ffdd 	bl	2c47e <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c4c4:	b160      	cbz	r0, 2c4e0 <log_1+0x2a>
		msg->str = str;
   2c4c6:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2c4c8:	2501      	movs	r5, #1
   2c4ca:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   2c4cc:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   2c4ce:	f365 1207 	bfi	r2, r5, #4, #4
   2c4d2:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   2c4d4:	9901      	ldr	r1, [sp, #4]
}
   2c4d6:	b003      	add	sp, #12
   2c4d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   2c4dc:	f7e6 bed4 	b.w	13288 <msg_finalize>
}
   2c4e0:	b003      	add	sp, #12
   2c4e2:	bd30      	pop	{r4, r5, pc}

0002c4e4 <log_2>:
{
   2c4e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c4e6:	460e      	mov	r6, r1
   2c4e8:	4619      	mov	r1, r3
   2c4ea:	4607      	mov	r7, r0
   2c4ec:	4615      	mov	r5, r2
   2c4ee:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c4f0:	f7ff ffc5 	bl	2c47e <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c4f4:	b168      	cbz	r0, 2c512 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   2c4f6:	2202      	movs	r2, #2
   2c4f8:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2c4fa:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   2c4fe:	f362 1307 	bfi	r3, r2, #4, #4
   2c502:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2c504:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c506:	6107      	str	r7, [r0, #16]
}
   2c508:	b003      	add	sp, #12
   2c50a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   2c50e:	f7e6 bebb 	b.w	13288 <msg_finalize>
}
   2c512:	b003      	add	sp, #12
   2c514:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c516 <log_3>:
{
   2c516:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c51a:	460f      	mov	r7, r1
   2c51c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   2c520:	4680      	mov	r8, r0
   2c522:	4616      	mov	r6, r2
   2c524:	461d      	mov	r5, r3
   2c526:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c528:	f7ff ffa9 	bl	2c47e <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c52c:	b178      	cbz	r0, 2c54e <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2c52e:	2203      	movs	r2, #3
   2c530:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2c532:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   2c536:	f362 1307 	bfi	r3, r2, #4, #4
   2c53a:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2c53c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c53e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   2c542:	61c5      	str	r5, [r0, #28]
}
   2c544:	b002      	add	sp, #8
   2c546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2c54a:	f7e6 be9d 	b.w	13288 <msg_finalize>
}
   2c54e:	b002      	add	sp, #8
   2c550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c554 <log_n>:
{
   2c554:	b510      	push	{r4, lr}
   2c556:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   2c558:	f7e6 ffe2 	bl	13520 <log_msg_create_n>
		if (msg == NULL) {
   2c55c:	b120      	cbz	r0, 2c568 <log_n+0x14>
		msg_finalize(msg, src_level);
   2c55e:	4621      	mov	r1, r4
}
   2c560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2c564:	f7e6 be90 	b.w	13288 <msg_finalize>
}
   2c568:	bd10      	pop	{r4, pc}

0002c56a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2c56a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c56e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2c570:	8903      	ldrh	r3, [r0, #8]
{
   2c572:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2c574:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2c578:	42a3      	cmp	r3, r4
{
   2c57a:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   2c57e:	d803      	bhi.n	2c588 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   2c580:	2300      	movs	r3, #0
   2c582:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2c584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   2c588:	6811      	ldr	r1, [r2, #0]
   2c58a:	4421      	add	r1, r4
   2c58c:	4299      	cmp	r1, r3
		*length = available_len - offset;
   2c58e:	bf84      	itt	hi
   2c590:	1b19      	subhi	r1, r3, r4
   2c592:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2c594:	2b0c      	cmp	r3, #12
	req_len = *length;
   2c596:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2c59a:	d92b      	bls.n	2c5f4 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   2c59c:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   2c59e:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2c5a2:	d82e      	bhi.n	2c602 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2c5a4:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   2c5a6:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2c5a8:	454b      	cmp	r3, r9
   2c5aa:	bf28      	it	cs
   2c5ac:	464b      	movcs	r3, r9
   2c5ae:	4420      	add	r0, r4
   2c5b0:	461d      	mov	r5, r3
   2c5b2:	461a      	mov	r2, r3
		if (put_op) {
   2c5b4:	b317      	cbz	r7, 2c5fc <log_msg_hexdump_data_op+0x92>
   2c5b6:	4631      	mov	r1, r6
   2c5b8:	f7e0 fac8 	bl	cb4c <memcpy>
		req_len -= cpy_len;
   2c5bc:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2c5c0:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2c5c2:	f1b9 0f00 	cmp.w	r9, #0
   2c5c6:	d0dd      	beq.n	2c584 <log_msg_hexdump_data_op+0x1a>
   2c5c8:	f1b8 0f00 	cmp.w	r8, #0
   2c5cc:	d0da      	beq.n	2c584 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2c5ce:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2c5d2:	454d      	cmp	r5, r9
   2c5d4:	bf28      	it	cs
   2c5d6:	464d      	movcs	r5, r9
		if (put_op) {
   2c5d8:	1d20      	adds	r0, r4, #4
   2c5da:	462a      	mov	r2, r5
   2c5dc:	4440      	add	r0, r8
   2c5de:	b1bf      	cbz	r7, 2c610 <log_msg_hexdump_data_op+0xa6>
   2c5e0:	4631      	mov	r1, r6
   2c5e2:	f7e0 fab3 	bl	cb4c <memcpy>
		offset = 0;
   2c5e6:	2400      	movs	r4, #0
		cont = cont->next;
   2c5e8:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   2c5ec:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2c5f0:	442e      	add	r6, r5
   2c5f2:	e7e6      	b.n	2c5c2 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   2c5f4:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   2c5f8:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   2c5fa:	e7d5      	b.n	2c5a8 <log_msg_hexdump_data_op+0x3e>
   2c5fc:	4601      	mov	r1, r0
   2c5fe:	4630      	mov	r0, r6
   2c600:	e7da      	b.n	2c5b8 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2c602:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   2c604:	2c1b      	cmp	r4, #27
   2c606:	d9dc      	bls.n	2c5c2 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   2c608:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   2c60c:	3c1c      	subs	r4, #28
   2c60e:	e7f9      	b.n	2c604 <log_msg_hexdump_data_op+0x9a>
   2c610:	4601      	mov	r1, r0
   2c612:	4630      	mov	r0, r6
   2c614:	e7e5      	b.n	2c5e2 <log_msg_hexdump_data_op+0x78>

0002c616 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2c616:	3004      	adds	r0, #4
   2c618:	e8d0 3fef 	ldaex	r3, [r0]
   2c61c:	3301      	adds	r3, #1
   2c61e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2c622:	2a00      	cmp	r2, #0
   2c624:	d1f8      	bne.n	2c618 <log_msg_get+0x2>
}
   2c626:	4770      	bx	lr

0002c628 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   2c628:	7a40      	ldrb	r0, [r0, #9]
}
   2c62a:	0900      	lsrs	r0, r0, #4
   2c62c:	4770      	bx	lr

0002c62e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   2c62e:	7a43      	ldrb	r3, [r0, #9]
   2c630:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2c634:	ea4f 1213 	mov.w	r2, r3, lsr #4
   2c638:	d216      	bcs.n	2c668 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2c63a:	2a03      	cmp	r2, #3
   2c63c:	d803      	bhi.n	2c646 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   2c63e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2c642:	6948      	ldr	r0, [r1, #20]
   2c644:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2c646:	2901      	cmp	r1, #1
   2c648:	d803      	bhi.n	2c652 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   2c64a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2c64e:	6988      	ldr	r0, [r1, #24]
   2c650:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2c652:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2c654:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2c656:	2906      	cmp	r1, #6
   2c658:	d803      	bhi.n	2c662 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   2c65a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2c65e:	6848      	ldr	r0, [r1, #4]
   2c660:	4770      	bx	lr
		cont = cont->next;
   2c662:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2c664:	3907      	subs	r1, #7
		cont = cont->next;
   2c666:	e7f6      	b.n	2c656 <log_msg_arg_get+0x28>
		return 0;
   2c668:	2000      	movs	r0, #0
}
   2c66a:	4770      	bx	lr

0002c66c <log_msg_put>:
{
   2c66c:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2c66e:	1d02      	adds	r2, r0, #4
   2c670:	e8d2 1fef 	ldaex	r1, [r2]
   2c674:	3901      	subs	r1, #1
   2c676:	e8c2 1fec 	stlex	ip, r1, [r2]
   2c67a:	f1bc 0f00 	cmp.w	ip, #0
   2c67e:	d1f7      	bne.n	2c670 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   2c680:	685b      	ldr	r3, [r3, #4]
   2c682:	b90b      	cbnz	r3, 2c688 <log_msg_put+0x1c>
		msg_free(msg);
   2c684:	f7e6 bf0e 	b.w	134a4 <msg_free>
}
   2c688:	4770      	bx	lr

0002c68a <log_msg_str_get>:
}
   2c68a:	6900      	ldr	r0, [r0, #16]
   2c68c:	4770      	bx	lr

0002c68e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2c68e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2c690:	2400      	movs	r4, #0
   2c692:	9400      	str	r4, [sp, #0]
   2c694:	f7ff ff69 	bl	2c56a <log_msg_hexdump_data_op>
}
   2c698:	b002      	add	sp, #8
   2c69a:	bd10      	pop	{r4, pc}

0002c69c <buffer_write>:
{
   2c69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c69e:	4606      	mov	r6, r0
   2c6a0:	460d      	mov	r5, r1
   2c6a2:	4614      	mov	r4, r2
   2c6a4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2c6a6:	4621      	mov	r1, r4
   2c6a8:	4628      	mov	r0, r5
   2c6aa:	463a      	mov	r2, r7
   2c6ac:	47b0      	blx	r6
	} while (len != 0);
   2c6ae:	1a24      	subs	r4, r4, r0
		buf += processed;
   2c6b0:	4405      	add	r5, r0
	} while (len != 0);
   2c6b2:	d1f8      	bne.n	2c6a6 <buffer_write+0xa>
}
   2c6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c6b6 <std_print>:
{
   2c6b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c6ba:	b08e      	sub	sp, #56	; 0x38
   2c6bc:	af0e      	add	r7, sp, #56	; 0x38
   2c6be:	4680      	mov	r8, r0
   2c6c0:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   2c6c2:	f7ff ffe2 	bl	2c68a <log_msg_str_get>
   2c6c6:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2c6c8:	4640      	mov	r0, r8
   2c6ca:	f7ff ffad 	bl	2c628 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   2c6ce:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   2c6d2:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   2c6d4:	0083      	lsls	r3, r0, #2
   2c6d6:	3307      	adds	r3, #7
   2c6d8:	f023 0307 	bic.w	r3, r3, #7
   2c6dc:	ebad 0d03 	sub.w	sp, sp, r3
   2c6e0:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2c6e2:	45d1      	cmp	r9, sl
   2c6e4:	d116      	bne.n	2c714 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   2c6e6:	4640      	mov	r0, r8
   2c6e8:	f7ff ff9e 	bl	2c628 <log_msg_nargs_get>
   2c6ec:	280f      	cmp	r0, #15
   2c6ee:	d81e      	bhi.n	2c72e <std_print+0x78>
   2c6f0:	e8df f010 	tbh	[pc, r0, lsl #1]
   2c6f4:	00200019 	.word	0x00200019
   2c6f8:	002d0026 	.word	0x002d0026
   2c6fc:	00410036 	.word	0x00410036
   2c700:	005d004e 	.word	0x005d004e
   2c704:	0081006e 	.word	0x0081006e
   2c708:	00ad0096 	.word	0x00ad0096
   2c70c:	00e100c6 	.word	0x00e100c6
   2c710:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   2c714:	4649      	mov	r1, r9
   2c716:	4640      	mov	r0, r8
   2c718:	f7ff ff89 	bl	2c62e <log_msg_arg_get>
   2c71c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   2c720:	f109 0901 	add.w	r9, r9, #1
   2c724:	e7dd      	b.n	2c6e2 <std_print+0x2c>
		print_formatted(log_output, str);
   2c726:	4631      	mov	r1, r6
   2c728:	4628      	mov	r0, r5
   2c72a:	f7e6 ff61 	bl	135f0 <print_formatted>
}
   2c72e:	46bd      	mov	sp, r7
   2c730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   2c734:	4631      	mov	r1, r6
   2c736:	4628      	mov	r0, r5
   2c738:	6822      	ldr	r2, [r4, #0]
   2c73a:	f7e6 ff59 	bl	135f0 <print_formatted>
		break;
   2c73e:	e7f6      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   2c740:	4631      	mov	r1, r6
   2c742:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c746:	4628      	mov	r0, r5
   2c748:	f7e6 ff52 	bl	135f0 <print_formatted>
		break;
   2c74c:	e7ef      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   2c74e:	68a3      	ldr	r3, [r4, #8]
   2c750:	4631      	mov	r1, r6
   2c752:	9300      	str	r3, [sp, #0]
   2c754:	4628      	mov	r0, r5
   2c756:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c75a:	f7e6 ff49 	bl	135f0 <print_formatted>
		break;
   2c75e:	e7e6      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c760:	68e3      	ldr	r3, [r4, #12]
   2c762:	4631      	mov	r1, r6
   2c764:	9301      	str	r3, [sp, #4]
   2c766:	68a3      	ldr	r3, [r4, #8]
   2c768:	4628      	mov	r0, r5
   2c76a:	9300      	str	r3, [sp, #0]
   2c76c:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c770:	f7e6 ff3e 	bl	135f0 <print_formatted>
		break;
   2c774:	e7db      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c776:	6923      	ldr	r3, [r4, #16]
   2c778:	4631      	mov	r1, r6
   2c77a:	9302      	str	r3, [sp, #8]
   2c77c:	68e3      	ldr	r3, [r4, #12]
   2c77e:	4628      	mov	r0, r5
   2c780:	9301      	str	r3, [sp, #4]
   2c782:	68a3      	ldr	r3, [r4, #8]
   2c784:	9300      	str	r3, [sp, #0]
   2c786:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c78a:	f7e6 ff31 	bl	135f0 <print_formatted>
		break;
   2c78e:	e7ce      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c790:	6963      	ldr	r3, [r4, #20]
   2c792:	4631      	mov	r1, r6
   2c794:	9303      	str	r3, [sp, #12]
   2c796:	6923      	ldr	r3, [r4, #16]
   2c798:	4628      	mov	r0, r5
   2c79a:	9302      	str	r3, [sp, #8]
   2c79c:	68e3      	ldr	r3, [r4, #12]
   2c79e:	9301      	str	r3, [sp, #4]
   2c7a0:	68a3      	ldr	r3, [r4, #8]
   2c7a2:	9300      	str	r3, [sp, #0]
   2c7a4:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c7a8:	f7e6 ff22 	bl	135f0 <print_formatted>
		break;
   2c7ac:	e7bf      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c7ae:	69a3      	ldr	r3, [r4, #24]
   2c7b0:	4631      	mov	r1, r6
   2c7b2:	9304      	str	r3, [sp, #16]
   2c7b4:	6963      	ldr	r3, [r4, #20]
   2c7b6:	4628      	mov	r0, r5
   2c7b8:	9303      	str	r3, [sp, #12]
   2c7ba:	6923      	ldr	r3, [r4, #16]
   2c7bc:	9302      	str	r3, [sp, #8]
   2c7be:	68e3      	ldr	r3, [r4, #12]
   2c7c0:	9301      	str	r3, [sp, #4]
   2c7c2:	68a3      	ldr	r3, [r4, #8]
   2c7c4:	9300      	str	r3, [sp, #0]
   2c7c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c7ca:	f7e6 ff11 	bl	135f0 <print_formatted>
		break;
   2c7ce:	e7ae      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c7d0:	69e3      	ldr	r3, [r4, #28]
   2c7d2:	4631      	mov	r1, r6
   2c7d4:	9305      	str	r3, [sp, #20]
   2c7d6:	69a3      	ldr	r3, [r4, #24]
   2c7d8:	4628      	mov	r0, r5
   2c7da:	9304      	str	r3, [sp, #16]
   2c7dc:	6963      	ldr	r3, [r4, #20]
   2c7de:	9303      	str	r3, [sp, #12]
   2c7e0:	6923      	ldr	r3, [r4, #16]
   2c7e2:	9302      	str	r3, [sp, #8]
   2c7e4:	68e3      	ldr	r3, [r4, #12]
   2c7e6:	9301      	str	r3, [sp, #4]
   2c7e8:	68a3      	ldr	r3, [r4, #8]
   2c7ea:	9300      	str	r3, [sp, #0]
   2c7ec:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c7f0:	f7e6 fefe 	bl	135f0 <print_formatted>
		break;
   2c7f4:	e79b      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c7f6:	6a23      	ldr	r3, [r4, #32]
   2c7f8:	4631      	mov	r1, r6
   2c7fa:	9306      	str	r3, [sp, #24]
   2c7fc:	69e3      	ldr	r3, [r4, #28]
   2c7fe:	4628      	mov	r0, r5
   2c800:	9305      	str	r3, [sp, #20]
   2c802:	69a3      	ldr	r3, [r4, #24]
   2c804:	9304      	str	r3, [sp, #16]
   2c806:	6963      	ldr	r3, [r4, #20]
   2c808:	9303      	str	r3, [sp, #12]
   2c80a:	6923      	ldr	r3, [r4, #16]
   2c80c:	9302      	str	r3, [sp, #8]
   2c80e:	68e3      	ldr	r3, [r4, #12]
   2c810:	9301      	str	r3, [sp, #4]
   2c812:	68a3      	ldr	r3, [r4, #8]
   2c814:	9300      	str	r3, [sp, #0]
   2c816:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c81a:	f7e6 fee9 	bl	135f0 <print_formatted>
		break;
   2c81e:	e786      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c820:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c822:	4631      	mov	r1, r6
   2c824:	9307      	str	r3, [sp, #28]
   2c826:	6a23      	ldr	r3, [r4, #32]
   2c828:	4628      	mov	r0, r5
   2c82a:	9306      	str	r3, [sp, #24]
   2c82c:	69e3      	ldr	r3, [r4, #28]
   2c82e:	9305      	str	r3, [sp, #20]
   2c830:	69a3      	ldr	r3, [r4, #24]
   2c832:	9304      	str	r3, [sp, #16]
   2c834:	6963      	ldr	r3, [r4, #20]
   2c836:	9303      	str	r3, [sp, #12]
   2c838:	6923      	ldr	r3, [r4, #16]
   2c83a:	9302      	str	r3, [sp, #8]
   2c83c:	68e3      	ldr	r3, [r4, #12]
   2c83e:	9301      	str	r3, [sp, #4]
   2c840:	68a3      	ldr	r3, [r4, #8]
   2c842:	9300      	str	r3, [sp, #0]
   2c844:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c848:	f7e6 fed2 	bl	135f0 <print_formatted>
		break;
   2c84c:	e76f      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c84e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c850:	4631      	mov	r1, r6
   2c852:	9308      	str	r3, [sp, #32]
   2c854:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c856:	4628      	mov	r0, r5
   2c858:	9307      	str	r3, [sp, #28]
   2c85a:	6a23      	ldr	r3, [r4, #32]
   2c85c:	9306      	str	r3, [sp, #24]
   2c85e:	69e3      	ldr	r3, [r4, #28]
   2c860:	9305      	str	r3, [sp, #20]
   2c862:	69a3      	ldr	r3, [r4, #24]
   2c864:	9304      	str	r3, [sp, #16]
   2c866:	6963      	ldr	r3, [r4, #20]
   2c868:	9303      	str	r3, [sp, #12]
   2c86a:	6923      	ldr	r3, [r4, #16]
   2c86c:	9302      	str	r3, [sp, #8]
   2c86e:	68e3      	ldr	r3, [r4, #12]
   2c870:	9301      	str	r3, [sp, #4]
   2c872:	68a3      	ldr	r3, [r4, #8]
   2c874:	9300      	str	r3, [sp, #0]
   2c876:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c87a:	f7e6 feb9 	bl	135f0 <print_formatted>
		break;
   2c87e:	e756      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c880:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c882:	4631      	mov	r1, r6
   2c884:	9309      	str	r3, [sp, #36]	; 0x24
   2c886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c888:	4628      	mov	r0, r5
   2c88a:	9308      	str	r3, [sp, #32]
   2c88c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c88e:	9307      	str	r3, [sp, #28]
   2c890:	6a23      	ldr	r3, [r4, #32]
   2c892:	9306      	str	r3, [sp, #24]
   2c894:	69e3      	ldr	r3, [r4, #28]
   2c896:	9305      	str	r3, [sp, #20]
   2c898:	69a3      	ldr	r3, [r4, #24]
   2c89a:	9304      	str	r3, [sp, #16]
   2c89c:	6963      	ldr	r3, [r4, #20]
   2c89e:	9303      	str	r3, [sp, #12]
   2c8a0:	6923      	ldr	r3, [r4, #16]
   2c8a2:	9302      	str	r3, [sp, #8]
   2c8a4:	68e3      	ldr	r3, [r4, #12]
   2c8a6:	9301      	str	r3, [sp, #4]
   2c8a8:	68a3      	ldr	r3, [r4, #8]
   2c8aa:	9300      	str	r3, [sp, #0]
   2c8ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c8b0:	f7e6 fe9e 	bl	135f0 <print_formatted>
		break;
   2c8b4:	e73b      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c8b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c8b8:	4631      	mov	r1, r6
   2c8ba:	930a      	str	r3, [sp, #40]	; 0x28
   2c8bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c8be:	4628      	mov	r0, r5
   2c8c0:	9309      	str	r3, [sp, #36]	; 0x24
   2c8c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c8c4:	9308      	str	r3, [sp, #32]
   2c8c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c8c8:	9307      	str	r3, [sp, #28]
   2c8ca:	6a23      	ldr	r3, [r4, #32]
   2c8cc:	9306      	str	r3, [sp, #24]
   2c8ce:	69e3      	ldr	r3, [r4, #28]
   2c8d0:	9305      	str	r3, [sp, #20]
   2c8d2:	69a3      	ldr	r3, [r4, #24]
   2c8d4:	9304      	str	r3, [sp, #16]
   2c8d6:	6963      	ldr	r3, [r4, #20]
   2c8d8:	9303      	str	r3, [sp, #12]
   2c8da:	6923      	ldr	r3, [r4, #16]
   2c8dc:	9302      	str	r3, [sp, #8]
   2c8de:	68e3      	ldr	r3, [r4, #12]
   2c8e0:	9301      	str	r3, [sp, #4]
   2c8e2:	68a3      	ldr	r3, [r4, #8]
   2c8e4:	9300      	str	r3, [sp, #0]
   2c8e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c8ea:	f7e6 fe81 	bl	135f0 <print_formatted>
		break;
   2c8ee:	e71e      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c8f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c8f2:	4631      	mov	r1, r6
   2c8f4:	930b      	str	r3, [sp, #44]	; 0x2c
   2c8f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c8f8:	4628      	mov	r0, r5
   2c8fa:	930a      	str	r3, [sp, #40]	; 0x28
   2c8fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c8fe:	9309      	str	r3, [sp, #36]	; 0x24
   2c900:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c902:	9308      	str	r3, [sp, #32]
   2c904:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c906:	9307      	str	r3, [sp, #28]
   2c908:	6a23      	ldr	r3, [r4, #32]
   2c90a:	9306      	str	r3, [sp, #24]
   2c90c:	69e3      	ldr	r3, [r4, #28]
   2c90e:	9305      	str	r3, [sp, #20]
   2c910:	69a3      	ldr	r3, [r4, #24]
   2c912:	9304      	str	r3, [sp, #16]
   2c914:	6963      	ldr	r3, [r4, #20]
   2c916:	9303      	str	r3, [sp, #12]
   2c918:	6923      	ldr	r3, [r4, #16]
   2c91a:	9302      	str	r3, [sp, #8]
   2c91c:	68e3      	ldr	r3, [r4, #12]
   2c91e:	9301      	str	r3, [sp, #4]
   2c920:	68a3      	ldr	r3, [r4, #8]
   2c922:	9300      	str	r3, [sp, #0]
   2c924:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c928:	f7e6 fe62 	bl	135f0 <print_formatted>
		break;
   2c92c:	e6ff      	b.n	2c72e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c92e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c930:	4631      	mov	r1, r6
   2c932:	930c      	str	r3, [sp, #48]	; 0x30
   2c934:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c936:	4628      	mov	r0, r5
   2c938:	930b      	str	r3, [sp, #44]	; 0x2c
   2c93a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c93c:	930a      	str	r3, [sp, #40]	; 0x28
   2c93e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c940:	9309      	str	r3, [sp, #36]	; 0x24
   2c942:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c944:	9308      	str	r3, [sp, #32]
   2c946:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c948:	9307      	str	r3, [sp, #28]
   2c94a:	6a23      	ldr	r3, [r4, #32]
   2c94c:	9306      	str	r3, [sp, #24]
   2c94e:	69e3      	ldr	r3, [r4, #28]
   2c950:	9305      	str	r3, [sp, #20]
   2c952:	69a3      	ldr	r3, [r4, #24]
   2c954:	9304      	str	r3, [sp, #16]
   2c956:	6963      	ldr	r3, [r4, #20]
   2c958:	9303      	str	r3, [sp, #12]
   2c95a:	6923      	ldr	r3, [r4, #16]
   2c95c:	9302      	str	r3, [sp, #8]
   2c95e:	68e3      	ldr	r3, [r4, #12]
   2c960:	9301      	str	r3, [sp, #4]
   2c962:	68a3      	ldr	r3, [r4, #8]
   2c964:	9300      	str	r3, [sp, #0]
   2c966:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c96a:	f7e6 fe41 	bl	135f0 <print_formatted>
}
   2c96e:	e6de      	b.n	2c72e <std_print+0x78>

0002c970 <log_output_flush>:
		     log_output->control_block->offset,
   2c970:	6842      	ldr	r2, [r0, #4]
{
   2c972:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   2c974:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   2c978:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   2c97a:	6881      	ldr	r1, [r0, #8]
   2c97c:	6800      	ldr	r0, [r0, #0]
   2c97e:	f7ff fe8d 	bl	2c69c <buffer_write>
	log_output->control_block->offset = 0;
   2c982:	2200      	movs	r2, #0
   2c984:	6863      	ldr	r3, [r4, #4]
   2c986:	601a      	str	r2, [r3, #0]
}
   2c988:	bd10      	pop	{r4, pc}

0002c98a <sntp_init>:
{
   2c98a:	b570      	push	{r4, r5, r6, lr}
   2c98c:	460d      	mov	r5, r1
   2c98e:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   2c990:	4604      	mov	r4, r0
   2c992:	b330      	cbz	r0, 2c9e2 <sntp_init+0x58>
   2c994:	b329      	cbz	r1, 2c9e2 <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   2c996:	2214      	movs	r2, #20
   2c998:	2100      	movs	r1, #0
   2c99a:	f7f9 fb13 	bl	25fc4 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2c99e:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2c9a0:	2211      	movs	r2, #17
   2c9a2:	2102      	movs	r1, #2
   2c9a4:	f7e7 f89e 	bl	13ae4 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2c9a8:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2c9aa:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   2c9ac:	da04      	bge.n	2c9b8 <sntp_init+0x2e>
		return -errno;
   2c9ae:	f000 f974 	bl	2cc9a <__errno>
   2c9b2:	6800      	ldr	r0, [r0, #0]
   2c9b4:	4240      	negs	r0, r0
}
   2c9b6:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2c9b8:	4632      	mov	r2, r6
   2c9ba:	4629      	mov	r1, r5
   2c9bc:	f000 f843 	bl	2ca46 <z_impl_zsock_connect>
	if (ret < 0) {
   2c9c0:	2800      	cmp	r0, #0
   2c9c2:	68e0      	ldr	r0, [r4, #12]
   2c9c4:	da02      	bge.n	2c9cc <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2c9c6:	f000 f827 	bl	2ca18 <z_impl_zsock_close>
   2c9ca:	e7f0      	b.n	2c9ae <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2c9cc:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   2c9ce:	68a3      	ldr	r3, [r4, #8]
   2c9d0:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2c9d4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2c9d8:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2c9da:	8091      	strh	r1, [r2, #4]
	return 0;
   2c9dc:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   2c9de:	60a3      	str	r3, [r4, #8]
	return 0;
   2c9e0:	e7e9      	b.n	2c9b6 <sntp_init+0x2c>
		return -EFAULT;
   2c9e2:	f06f 000d 	mvn.w	r0, #13
   2c9e6:	e7e6      	b.n	2c9b6 <sntp_init+0x2c>

0002c9e8 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2c9e8:	b110      	cbz	r0, 2c9f0 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   2c9ea:	68c0      	ldr	r0, [r0, #12]
   2c9ec:	f000 b814 	b.w	2ca18 <z_impl_zsock_close>
	}
}
   2c9f0:	4770      	bx	lr

0002c9f2 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2c9f2:	f7e7 b9ef 	b.w	13dd4 <socket_offload_getaddrinfo>

0002c9f6 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2c9f6:	f7e7 ba21 	b.w	13e3c <socket_offload_freeaddrinfo>

0002c9fa <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   2c9fa:	b40c      	push	{r2, r3}
   2c9fc:	4603      	mov	r3, r0
   2c9fe:	b507      	push	{r0, r1, r2, lr}
   2ca00:	aa04      	add	r2, sp, #16
   2ca02:	4608      	mov	r0, r1
   2ca04:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2ca08:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2ca0a:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2ca0c:	4798      	blx	r3
	va_end(args);

	return res;
}
   2ca0e:	b003      	add	sp, #12
   2ca10:	f85d eb04 	ldr.w	lr, [sp], #4
   2ca14:	b002      	add	sp, #8
   2ca16:	4770      	bx	lr

0002ca18 <z_impl_zsock_close>:
{
   2ca18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2ca1a:	a901      	add	r1, sp, #4
{
   2ca1c:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2ca1e:	f7e5 fae3 	bl	11fe8 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2ca22:	b940      	cbnz	r0, 2ca36 <z_impl_zsock_close+0x1e>
		errno = EBADF;
   2ca24:	f000 f939 	bl	2cc9a <__errno>
   2ca28:	2309      	movs	r3, #9
		return -1;
   2ca2a:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2ca2e:	6003      	str	r3, [r0, #0]
}
   2ca30:	4620      	mov	r0, r4
   2ca32:	b003      	add	sp, #12
   2ca34:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   2ca36:	9b01      	ldr	r3, [sp, #4]
   2ca38:	689b      	ldr	r3, [r3, #8]
   2ca3a:	4798      	blx	r3
   2ca3c:	4604      	mov	r4, r0
	z_free_fd(sock);
   2ca3e:	4628      	mov	r0, r5
   2ca40:	f7e5 fb22 	bl	12088 <z_free_fd>
	return ret;
   2ca44:	e7f4      	b.n	2ca30 <z_impl_zsock_close+0x18>

0002ca46 <z_impl_zsock_connect>:
{
   2ca46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2ca48:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2ca4a:	a903      	add	r1, sp, #12
{
   2ca4c:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   2ca4e:	f7e5 facb 	bl	11fe8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2ca52:	b118      	cbz	r0, 2ca5c <z_impl_zsock_connect+0x16>
   2ca54:	9b03      	ldr	r3, [sp, #12]
   2ca56:	9a01      	ldr	r2, [sp, #4]
   2ca58:	695b      	ldr	r3, [r3, #20]
   2ca5a:	b93b      	cbnz	r3, 2ca6c <z_impl_zsock_connect+0x26>
   2ca5c:	f000 f91d 	bl	2cc9a <__errno>
   2ca60:	2309      	movs	r3, #9
   2ca62:	6003      	str	r3, [r0, #0]
   2ca64:	f04f 30ff 	mov.w	r0, #4294967295
}
   2ca68:	b004      	add	sp, #16
   2ca6a:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2ca6c:	4621      	mov	r1, r4
   2ca6e:	4798      	blx	r3
   2ca70:	e7fa      	b.n	2ca68 <z_impl_zsock_connect+0x22>

0002ca72 <z_impl_zsock_sendto>:
{
   2ca72:	b530      	push	{r4, r5, lr}
   2ca74:	b087      	sub	sp, #28
   2ca76:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2ca78:	a905      	add	r1, sp, #20
{
   2ca7a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   2ca7e:	f7e5 fab3 	bl	11fe8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2ca82:	b120      	cbz	r0, 2ca8e <z_impl_zsock_sendto+0x1c>
   2ca84:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2ca88:	9905      	ldr	r1, [sp, #20]
   2ca8a:	6a0d      	ldr	r5, [r1, #32]
   2ca8c:	b93d      	cbnz	r5, 2ca9e <z_impl_zsock_sendto+0x2c>
   2ca8e:	f000 f904 	bl	2cc9a <__errno>
   2ca92:	2309      	movs	r3, #9
   2ca94:	6003      	str	r3, [r0, #0]
   2ca96:	f04f 30ff 	mov.w	r0, #4294967295
}
   2ca9a:	b007      	add	sp, #28
   2ca9c:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2ca9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2caa0:	9101      	str	r1, [sp, #4]
   2caa2:	990a      	ldr	r1, [sp, #40]	; 0x28
   2caa4:	9100      	str	r1, [sp, #0]
   2caa6:	4621      	mov	r1, r4
   2caa8:	47a8      	blx	r5
   2caaa:	e7f6      	b.n	2ca9a <z_impl_zsock_sendto+0x28>

0002caac <z_impl_zsock_sendmsg>:
{
   2caac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2caae:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cab0:	a903      	add	r1, sp, #12
{
   2cab2:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cab4:	f7e5 fa98 	bl	11fe8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2cab8:	b118      	cbz	r0, 2cac2 <z_impl_zsock_sendmsg+0x16>
   2caba:	9b03      	ldr	r3, [sp, #12]
   2cabc:	9a01      	ldr	r2, [sp, #4]
   2cabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2cac0:	b93b      	cbnz	r3, 2cad2 <z_impl_zsock_sendmsg+0x26>
   2cac2:	f000 f8ea 	bl	2cc9a <__errno>
   2cac6:	2309      	movs	r3, #9
   2cac8:	6003      	str	r3, [r0, #0]
   2caca:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cace:	b004      	add	sp, #16
   2cad0:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2cad2:	4621      	mov	r1, r4
   2cad4:	4798      	blx	r3
   2cad6:	e7fa      	b.n	2cace <z_impl_zsock_sendmsg+0x22>

0002cad8 <z_impl_zsock_recvfrom>:
{
   2cad8:	b530      	push	{r4, r5, lr}
   2cada:	b087      	sub	sp, #28
   2cadc:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cade:	a905      	add	r1, sp, #20
{
   2cae0:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cae4:	f7e5 fa80 	bl	11fe8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2cae8:	b120      	cbz	r0, 2caf4 <z_impl_zsock_recvfrom+0x1c>
   2caea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2caee:	9905      	ldr	r1, [sp, #20]
   2caf0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   2caf2:	b93d      	cbnz	r5, 2cb04 <z_impl_zsock_recvfrom+0x2c>
   2caf4:	f000 f8d1 	bl	2cc9a <__errno>
   2caf8:	2309      	movs	r3, #9
   2cafa:	6003      	str	r3, [r0, #0]
   2cafc:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cb00:	b007      	add	sp, #28
   2cb02:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2cb04:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cb06:	9101      	str	r1, [sp, #4]
   2cb08:	990a      	ldr	r1, [sp, #40]	; 0x28
   2cb0a:	9100      	str	r1, [sp, #0]
   2cb0c:	4621      	mov	r1, r4
   2cb0e:	47a8      	blx	r5
   2cb10:	e7f6      	b.n	2cb00 <z_impl_zsock_recvfrom+0x28>

0002cb12 <set_starting_state>:
{
   2cb12:	b510      	push	{r4, lr}
	__asm__ volatile(
   2cb14:	f04f 0320 	mov.w	r3, #32
   2cb18:	f3ef 8211 	mrs	r2, BASEPRI
   2cb1c:	f383 8811 	msr	BASEPRI, r3
   2cb20:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2cb24:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2cb26:	f003 0407 	and.w	r4, r3, #7
   2cb2a:	2c01      	cmp	r4, #1
   2cb2c:	d106      	bne.n	2cb3c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2cb2e:	6001      	str	r1, [r0, #0]
	int err = 0;
   2cb30:	2000      	movs	r0, #0
	__asm__ volatile(
   2cb32:	f382 8811 	msr	BASEPRI, r2
   2cb36:	f3bf 8f6f 	isb	sy
}
   2cb3a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2cb3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2cb40:	428b      	cmp	r3, r1
		err = -EBUSY;
   2cb42:	bf14      	ite	ne
   2cb44:	f04f 30ff 	movne.w	r0, #4294967295
   2cb48:	f06f 000f 	mvneq.w	r0, #15
   2cb4c:	e7f1      	b.n	2cb32 <set_starting_state+0x20>

0002cb4e <set_on_state>:
	__asm__ volatile(
   2cb4e:	f04f 0320 	mov.w	r3, #32
   2cb52:	f3ef 8211 	mrs	r2, BASEPRI
   2cb56:	f383 8811 	msr	BASEPRI, r3
   2cb5a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2cb5e:	6803      	ldr	r3, [r0, #0]
   2cb60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2cb64:	f043 0302 	orr.w	r3, r3, #2
   2cb68:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2cb6a:	f382 8811 	msr	BASEPRI, r2
   2cb6e:	f3bf 8f6f 	isb	sy
}
   2cb72:	4770      	bx	lr

0002cb74 <onoff_started_callback>:
	return &data->mgr[type];
   2cb74:	68c0      	ldr	r0, [r0, #12]
   2cb76:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2cb78:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2cb7c:	2100      	movs	r1, #0
   2cb7e:	4710      	bx	r2

0002cb80 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2cb80:	2280      	movs	r2, #128	; 0x80
   2cb82:	f7e7 b9f3 	b.w	13f6c <stop>

0002cb86 <blocking_start_callback>:
{
   2cb86:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2cb88:	f7f7 bc82 	b.w	24490 <z_impl_k_sem_give>

0002cb8c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2cb8c:	2000      	movs	r0, #0
   2cb8e:	f7f5 ba15 	b.w	21fbc <nrfx_clock_stop>

0002cb92 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2cb92:	2000      	movs	r0, #0
   2cb94:	f7f5 b9bc 	b.w	21f10 <nrfx_clock_start>

0002cb98 <api_start>:
{
   2cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   2cb9a:	240c      	movs	r4, #12
   2cb9c:	b2c9      	uxtb	r1, r1
   2cb9e:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2cba0:	68c5      	ldr	r5, [r0, #12]
{
   2cba2:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2cba4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2cba8:	2180      	movs	r1, #128	; 0x80
   2cbaa:	4428      	add	r0, r5
{
   2cbac:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   2cbae:	f7ff ffb0 	bl	2cb12 <set_starting_state>
	if (err < 0) {
   2cbb2:	2800      	cmp	r0, #0
   2cbb4:	db08      	blt.n	2cbc8 <api_start+0x30>
	subdata->cb = data->cb;
   2cbb6:	687b      	ldr	r3, [r7, #4]
   2cbb8:	4425      	add	r5, r4
   2cbba:	642b      	str	r3, [r5, #64]	; 0x40
	subdata->user_data = data->user_data;
   2cbbc:	68bb      	ldr	r3, [r7, #8]
   2cbbe:	646b      	str	r3, [r5, #68]	; 0x44
	 get_sub_config(dev, type)->start();
   2cbc0:	6873      	ldr	r3, [r6, #4]
   2cbc2:	591b      	ldr	r3, [r3, r4]
   2cbc4:	4798      	blx	r3
	return 0;
   2cbc6:	2000      	movs	r0, #0
}
   2cbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cbca <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2cbca:	4770      	bx	lr

0002cbcc <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   2cbcc:	b510      	push	{r4, lr}
   2cbce:	b40f      	push	{r0, r1, r2, r3}
   2cbd0:	f7f6 fc10 	bl	233f4 <k_sched_lock>
   2cbd4:	bc0f      	pop	{r0, r1, r2, r3}
   2cbd6:	f7db fa07 	bl	7fe8 <spm_request_random_number_nse>
   2cbda:	b40f      	push	{r0, r1, r2, r3}
   2cbdc:	f7f6 fd20 	bl	23620 <k_sched_unlock>
   2cbe0:	bc0f      	pop	{r0, r1, r2, r3}
   2cbe2:	bd10      	pop	{r4, pc}

0002cbe4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2cbe4:	2100      	movs	r1, #0
   2cbe6:	2001      	movs	r0, #1
   2cbe8:	f7e7 be50 	b.w	1488c <z_arm_fatal_error>

0002cbec <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2cbec:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2cbee:	f383 880b 	msr	PSPLIM, r3
}
   2cbf2:	4770      	bx	lr

0002cbf4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2cbf4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2cbf6:	6800      	ldr	r0, [r0, #0]
   2cbf8:	f7e7 be48 	b.w	1488c <z_arm_fatal_error>

0002cbfc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2cbfc:	b508      	push	{r3, lr}
	handler();
   2cbfe:	f7e7 feb9 	bl	14974 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2cc02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2cc06:	f7e8 b979 	b.w	14efc <z_arm_exc_exit>

0002cc0a <mpu_configure_region>:
{
   2cc0a:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2cc0c:	890a      	ldrh	r2, [r1, #8]
   2cc0e:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   2cc10:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   2cc12:	684c      	ldr	r4, [r1, #4]
   2cc14:	f002 021f 	and.w	r2, r2, #31
{
   2cc18:	b085      	sub	sp, #20
   2cc1a:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2cc1e:	9300      	str	r3, [sp, #0]
   2cc20:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2cc24:	f023 031f 	bic.w	r3, r3, #31
   2cc28:	1e62      	subs	r2, r4, #1
   2cc2a:	4413      	add	r3, r2
   2cc2c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   2cc30:	280f      	cmp	r0, #15
   2cc32:	4604      	mov	r4, r0
   2cc34:	9303      	str	r3, [sp, #12]
   2cc36:	d905      	bls.n	2cc44 <mpu_configure_region+0x3a>
   2cc38:	f7e8 f9fa 	bl	15030 <region_allocate_and_init.part.0>
   2cc3c:	4604      	mov	r4, r0
}
   2cc3e:	4620      	mov	r0, r4
   2cc40:	b005      	add	sp, #20
   2cc42:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   2cc44:	4669      	mov	r1, sp
   2cc46:	f7e8 f9db 	bl	15000 <region_init>
	return region_allocate_and_init(index,
   2cc4a:	e7f8      	b.n	2cc3e <mpu_configure_region+0x34>

0002cc4c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2cc4c:	e840 f000 	tt	r0, r0
   2cc50:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2cc52:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2cc56:	bf14      	ite	ne
   2cc58:	4618      	movne	r0, r3
   2cc5a:	f06f 0015 	mvneq.w	r0, #21
   2cc5e:	4770      	bx	lr

0002cc60 <_stdout_hook_default>:
}
   2cc60:	f04f 30ff 	mov.w	r0, #4294967295
   2cc64:	4770      	bx	lr

0002cc66 <_stdin_hook_default>:
}
   2cc66:	2000      	movs	r0, #0
   2cc68:	4770      	bx	lr

0002cc6a <_read>:
{
   2cc6a:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2cc6c:	4611      	mov	r1, r2
   2cc6e:	f7e8 bbb7 	b.w	153e0 <z_impl_zephyr_read_stdin>

0002cc72 <_write>:
{
   2cc72:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2cc74:	4611      	mov	r1, r2
   2cc76:	f7e8 bbc7 	b.w	15408 <z_impl_zephyr_write_stdout>

0002cc7a <_close>:
   2cc7a:	f04f 30ff 	mov.w	r0, #4294967295
   2cc7e:	4770      	bx	lr

0002cc80 <_lseek>:
}
   2cc80:	2000      	movs	r0, #0
   2cc82:	4770      	bx	lr

0002cc84 <_isatty>:
}
   2cc84:	2001      	movs	r0, #1
   2cc86:	4770      	bx	lr

0002cc88 <_kill>:
}
   2cc88:	2000      	movs	r0, #0
   2cc8a:	4770      	bx	lr

0002cc8c <_getpid>:
}
   2cc8c:	2000      	movs	r0, #0
   2cc8e:	4770      	bx	lr

0002cc90 <_fstat>:
	st->st_mode = S_IFCHR;
   2cc90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2cc94:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2cc96:	604b      	str	r3, [r1, #4]
}
   2cc98:	4770      	bx	lr

0002cc9a <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2cc9a:	f7f5 ba95 	b.w	221c8 <z_impl_z_errno>

0002cc9e <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   2cc9e:	b508      	push	{r3, lr}
	net_if_init();
   2cca0:	f7e8 fc88 	bl	155b4 <net_if_init>
	net_if_post_init();
   2cca4:	f7e8 fcba 	bl	1561c <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2cca8:	2000      	movs	r0, #0
   2ccaa:	bd08      	pop	{r3, pc}

0002ccac <net_if_l2>:
	if (!iface || !iface->if_dev) {
   2ccac:	b110      	cbz	r0, 2ccb4 <net_if_l2+0x8>
   2ccae:	6800      	ldr	r0, [r0, #0]
   2ccb0:	b100      	cbz	r0, 2ccb4 <net_if_l2+0x8>
	return iface->if_dev->l2;
   2ccb2:	6840      	ldr	r0, [r0, #4]
}
   2ccb4:	4770      	bx	lr

0002ccb6 <l2_flags_get>:
{
   2ccb6:	b510      	push	{r4, lr}
   2ccb8:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2ccba:	f7ff fff7 	bl	2ccac <net_if_l2>
   2ccbe:	b128      	cbz	r0, 2cccc <l2_flags_get+0x16>
   2ccc0:	68c2      	ldr	r2, [r0, #12]
   2ccc2:	b11a      	cbz	r2, 2cccc <l2_flags_get+0x16>
}
   2ccc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   2ccc8:	4618      	mov	r0, r3
   2ccca:	4710      	bx	r2
}
   2cccc:	2000      	movs	r0, #0
   2ccce:	bd10      	pop	{r4, pc}

0002ccd0 <net_byte_to_hex>:
{
   2ccd0:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2ccd2:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   2ccd4:	b1bb      	cbz	r3, 2cd06 <net_byte_to_hex+0x36>
		if (val < 10) {
   2ccd6:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   2ccd8:	b26b      	sxtb	r3, r5
   2ccda:	bf86      	itte	hi
   2ccdc:	f1a2 050a 	subhi.w	r5, r2, #10
   2cce0:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   2cce2:	3330      	addls	r3, #48	; 0x30
   2cce4:	1c44      	adds	r4, r0, #1
   2cce6:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2cce8:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   2ccec:	4619      	mov	r1, r3
   2ccee:	2b09      	cmp	r3, #9
	*ptr = '\0';
   2ccf0:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   2ccf4:	bf83      	ittte	hi
   2ccf6:	3a0a      	subhi	r2, #10
   2ccf8:	1889      	addhi	r1, r1, r2
   2ccfa:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   2ccfc:	3130      	addls	r1, #48	; 0x30
   2ccfe:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   2cd00:	7063      	strb	r3, [r4, #1]
   2cd02:	1c60      	adds	r0, r4, #1
}
   2cd04:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   2cd06:	2d00      	cmp	r5, #0
   2cd08:	d1e5      	bne.n	2ccd6 <net_byte_to_hex+0x6>
   2cd0a:	4604      	mov	r4, r0
   2cd0c:	e7ec      	b.n	2cce8 <net_byte_to_hex+0x18>

0002cd0e <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2cd0e:	e9d0 2300 	ldrd	r2, r3, [r0]
   2cd12:	1a9b      	subs	r3, r3, r2
   2cd14:	2b01      	cmp	r3, #1
{
   2cd16:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2cd18:	d90c      	bls.n	2cd34 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   2cd1a:	4614      	mov	r4, r2
   2cd1c:	1c53      	adds	r3, r2, #1
   2cd1e:	6003      	str	r3, [r0, #0]
   2cd20:	f814 3b02 	ldrb.w	r3, [r4], #2
   2cd24:	021b      	lsls	r3, r3, #8
   2cd26:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   2cd28:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   2cd2a:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   2cd2c:	7852      	ldrb	r2, [r2, #1]
   2cd2e:	4313      	orrs	r3, r2
   2cd30:	800b      	strh	r3, [r1, #0]
}
   2cd32:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2cd34:	f06f 0015 	mvn.w	r0, #21
   2cd38:	e7fb      	b.n	2cd32 <unpack_uint16+0x24>

0002cd3a <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   2cd3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2cd3c:	e9d0 3400 	ldrd	r3, r4, [r0]
   2cd40:	429c      	cmp	r4, r3
   2cd42:	d01f      	beq.n	2cd84 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   2cd44:	1c5c      	adds	r4, r3, #1
   2cd46:	6004      	str	r4, [r0, #0]
   2cd48:	781b      	ldrb	r3, [r3, #0]
   2cd4a:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   2cd4c:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   2cd4e:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   2cd50:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   2cd52:	6804      	ldr	r4, [r0, #0]
   2cd54:	42bc      	cmp	r4, r7
   2cd56:	d218      	bcs.n	2cd8a <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2cd58:	4625      	mov	r5, r4
   2cd5a:	f815 3b01 	ldrb.w	r3, [r5], #1
   2cd5e:	6816      	ldr	r6, [r2, #0]
   2cd60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   2cd64:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2cd66:	4433      	add	r3, r6
   2cd68:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   2cd6a:	6005      	str	r5, [r0, #0]
   2cd6c:	f994 4000 	ldrsb.w	r4, [r4]
   2cd70:	2c00      	cmp	r4, #0
   2cd72:	db04      	blt.n	2cd7e <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   2cd74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2cd78:	d204      	bcs.n	2cd84 <fixed_header_decode+0x4a>
	return 0;
   2cd7a:	2000      	movs	r0, #0
   2cd7c:	e004      	b.n	2cd88 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   2cd7e:	3107      	adds	r1, #7
   2cd80:	291c      	cmp	r1, #28
   2cd82:	d1e6      	bne.n	2cd52 <fixed_header_decode+0x18>
		return -EINVAL;
   2cd84:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   2cd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   2cd8a:	f06f 000a 	mvn.w	r0, #10
   2cd8e:	e7fb      	b.n	2cd88 <fixed_header_decode+0x4e>

0002cd90 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   2cd90:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2cd92:	e9d1 3500 	ldrd	r3, r5, [r1]
   2cd96:	429d      	cmp	r5, r3
   2cd98:	d102      	bne.n	2cda0 <connect_ack_decode+0x10>
		return -EINVAL;
   2cd9a:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   2cd9e:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   2cda0:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2cda2:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   2cda4:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2cda6:	d0f8      	beq.n	2cd9a <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   2cda8:	461d      	mov	r5, r3
   2cdaa:	f815 4b02 	ldrb.w	r4, [r5], #2
   2cdae:	600d      	str	r5, [r1, #0]
   2cdb0:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2cdb2:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   2cdb6:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2cdb8:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2cdba:	bf04      	itt	eq
   2cdbc:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   2cdc0:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   2cdc2:	7051      	strb	r1, [r2, #1]
	return 0;
   2cdc4:	e7eb      	b.n	2cd9e <connect_ack_decode+0xe>

0002cdc6 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   2cdc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2cdca:	461c      	mov	r4, r3
   2cdcc:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2cdce:	7da2      	ldrb	r2, [r4, #22]
   2cdd0:	0043      	lsls	r3, r0, #1
   2cdd2:	f022 0203 	bic.w	r2, r2, #3
   2cdd6:	f003 0302 	and.w	r3, r3, #2
   2cdda:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   2cddc:	f3c0 0041 	ubfx	r0, r0, #1, #2
   2cde0:	7220      	strb	r0, [r4, #8]
{
   2cde2:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   2cde4:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2cde6:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   2cde8:	f10d 0106 	add.w	r1, sp, #6
   2cdec:	f7ff ff8f 	bl	2cd0e <unpack_uint16>
	if (err_code != 0) {
   2cdf0:	4606      	mov	r6, r0
   2cdf2:	b9c0      	cbnz	r0, 2ce26 <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   2cdf4:	683b      	ldr	r3, [r7, #0]
   2cdf6:	687a      	ldr	r2, [r7, #4]
   2cdf8:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   2cdfc:	1ad2      	subs	r2, r2, r3
   2cdfe:	42aa      	cmp	r2, r5
   2ce00:	da02      	bge.n	2ce08 <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   2ce02:	f06f 0615 	mvn.w	r6, #21
   2ce06:	e00e      	b.n	2ce26 <publish_decode+0x60>
	str->size = utf8_strlen;
   2ce08:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   2ce0a:	b185      	cbz	r5, 2ce2e <publish_decode+0x68>
		str->utf8 = buf->cur;
   2ce0c:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   2ce0e:	442b      	add	r3, r5
   2ce10:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2ce12:	7a23      	ldrb	r3, [r4, #8]
   2ce14:	b96b      	cbnz	r3, 2ce32 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   2ce16:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   2ce18:	4545      	cmp	r5, r8
   2ce1a:	d8f2      	bhi.n	2ce02 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   2ce1c:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   2ce1e:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   2ce22:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   2ce24:	6125      	str	r5, [r4, #16]

	return 0;
}
   2ce26:	4630      	mov	r0, r6
   2ce28:	b002      	add	sp, #8
   2ce2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   2ce2e:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   2ce30:	e7ef      	b.n	2ce12 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   2ce32:	4638      	mov	r0, r7
   2ce34:	f104 0114 	add.w	r1, r4, #20
   2ce38:	f7ff ff69 	bl	2cd0e <unpack_uint16>
		if (err_code != 0) {
   2ce3c:	b908      	cbnz	r0, 2ce42 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   2ce3e:	3504      	adds	r5, #4
   2ce40:	e7ea      	b.n	2ce18 <publish_decode+0x52>
   2ce42:	4606      	mov	r6, r0
   2ce44:	e7ef      	b.n	2ce26 <publish_decode+0x60>

0002ce46 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2ce46:	f7ff bf62 	b.w	2cd0e <unpack_uint16>

0002ce4a <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2ce4a:	f7ff bf60 	b.w	2cd0e <unpack_uint16>

0002ce4e <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2ce4e:	f7ff bf5e 	b.w	2cd0e <unpack_uint16>

0002ce52 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2ce52:	f7ff bf5c 	b.w	2cd0e <unpack_uint16>

0002ce56 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   2ce56:	b538      	push	{r3, r4, r5, lr}
   2ce58:	4605      	mov	r5, r0
   2ce5a:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   2ce5c:	f7ff ff57 	bl	2cd0e <unpack_uint16>
	if (err_code != 0) {
   2ce60:	b930      	cbnz	r0, 2ce70 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   2ce62:	e9d5 2300 	ldrd	r2, r3, [r5]
   2ce66:	1a99      	subs	r1, r3, r2
	str->len = length;
   2ce68:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   2ce6a:	b111      	cbz	r1, 2ce72 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   2ce6c:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   2ce6e:	602b      	str	r3, [r5, #0]
}
   2ce70:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   2ce72:	6060      	str	r0, [r4, #4]
   2ce74:	e7fc      	b.n	2ce70 <subscribe_ack_decode+0x1a>

0002ce76 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2ce76:	f7ff bf4a 	b.w	2cd0e <unpack_uint16>

0002ce7a <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2ce7a:	e9d1 3200 	ldrd	r3, r2, [r1]
   2ce7e:	1ad2      	subs	r2, r2, r3
   2ce80:	2a01      	cmp	r2, #1
   2ce82:	d909      	bls.n	2ce98 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   2ce84:	1c5a      	adds	r2, r3, #1
   2ce86:	600a      	str	r2, [r1, #0]
   2ce88:	0a02      	lsrs	r2, r0, #8
   2ce8a:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   2ce8c:	680b      	ldr	r3, [r1, #0]
   2ce8e:	1c5a      	adds	r2, r3, #1
   2ce90:	600a      	str	r2, [r1, #0]
   2ce92:	7018      	strb	r0, [r3, #0]
	return 0;
   2ce94:	2000      	movs	r0, #0
   2ce96:	4770      	bx	lr
		return -ENOMEM;
   2ce98:	f06f 000b 	mvn.w	r0, #11
}
   2ce9c:	4770      	bx	lr

0002ce9e <pack_utf8_str>:
{
   2ce9e:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2cea0:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   2cea4:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2cea6:	6840      	ldr	r0, [r0, #4]
   2cea8:	1a9b      	subs	r3, r3, r2
   2ceaa:	1c82      	adds	r2, r0, #2
   2ceac:	4293      	cmp	r3, r2
{
   2ceae:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2ceb0:	d30d      	bcc.n	2cece <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   2ceb2:	b280      	uxth	r0, r0
   2ceb4:	f7ff ffe1 	bl	2ce7a <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ceb8:	e9d5 1200 	ldrd	r1, r2, [r5]
   2cebc:	6820      	ldr	r0, [r4, #0]
   2cebe:	f7df fe45 	bl	cb4c <memcpy>
	return 0;
   2cec2:	2000      	movs	r0, #0
	buf->cur += str->size;
   2cec4:	6823      	ldr	r3, [r4, #0]
   2cec6:	686a      	ldr	r2, [r5, #4]
   2cec8:	4413      	add	r3, r2
   2ceca:	6023      	str	r3, [r4, #0]
}
   2cecc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   2cece:	f06f 000b 	mvn.w	r0, #11
   2ced2:	e7fb      	b.n	2cecc <pack_utf8_str+0x2e>

0002ced4 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   2ced4:	6813      	ldr	r3, [r2, #0]
{
   2ced6:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   2ced8:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   2ceda:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   2cede:	d227      	bcs.n	2cf30 <mqtt_encode_fixed_header+0x5c>
   2cee0:	4625      	mov	r5, r4
   2cee2:	2600      	movs	r6, #0
	} while (length > 0);
   2cee4:	09ed      	lsrs	r5, r5, #7
   2cee6:	b2f3      	uxtb	r3, r6
   2cee8:	f106 0601 	add.w	r6, r6, #1
   2ceec:	d1fa      	bne.n	2cee4 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   2ceee:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2cef0:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   2cef2:	b2db      	uxtb	r3, r3
   2cef4:	425d      	negs	r5, r3
   2cef6:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2cef8:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   2cefa:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   2cefc:	bf1e      	ittt	ne
   2cefe:	3301      	addne	r3, #1
   2cf00:	6013      	strne	r3, [r2, #0]
   2cf02:	5548      	strbne	r0, [r1, r5]
	return 0;
   2cf04:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   2cf06:	6813      	ldr	r3, [r2, #0]
   2cf08:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   2cf0c:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   2cf0e:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   2cf10:	bf1f      	itttt	ne
   2cf12:	6811      	ldrne	r1, [r2, #0]
   2cf14:	780b      	ldrbne	r3, [r1, #0]
   2cf16:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   2cf1a:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   2cf1c:	6813      	ldr	r3, [r2, #0]
   2cf1e:	3301      	adds	r3, #1
   2cf20:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   2cf22:	2800      	cmp	r0, #0
   2cf24:	d1ef      	bne.n	2cf06 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   2cf26:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   2cf28:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   2cf2a:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   2cf2c:	6053      	str	r3, [r2, #4]
}
   2cf2e:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2cf30:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2cf34:	e7fb      	b.n	2cf2e <mqtt_encode_fixed_header+0x5a>

0002cf36 <publish_encode>:
{
   2cf36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2cf3a:	7d87      	ldrb	r7, [r0, #22]
   2cf3c:	7a04      	ldrb	r4, [r0, #8]
   2cf3e:	f007 0801 	and.w	r8, r7, #1
{
   2cf42:	4605      	mov	r5, r0
   2cf44:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2cf46:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   2cf4a:	b10c      	cbz	r4, 2cf50 <publish_encode+0x1a>
   2cf4c:	8a83      	ldrh	r3, [r0, #20]
   2cf4e:	b383      	cbz	r3, 2cfb2 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2cf50:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2cf54:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2cf56:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2cf58:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2cf5a:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2cf5e:	f7ff ff9e 	bl	2ce9e <pack_utf8_str>
	if (err_code != 0) {
   2cf62:	b9b0      	cbnz	r0, 2cf92 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   2cf64:	7a2b      	ldrb	r3, [r5, #8]
   2cf66:	b9b3      	cbnz	r3, 2cf96 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2cf68:	0060      	lsls	r0, r4, #1
   2cf6a:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   2cf6e:	692a      	ldr	r2, [r5, #16]
   2cf70:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2cf74:	4338      	orrs	r0, r7
   2cf76:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   2cf7a:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2cf7c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2cf80:	464a      	mov	r2, r9
   2cf82:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   2cf84:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2cf88:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2cf8c:	f7ff ffa2 	bl	2ced4 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   2cf90:	b140      	cbz	r0, 2cfa4 <publish_encode+0x6e>
}
   2cf92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   2cf96:	4649      	mov	r1, r9
   2cf98:	8aa8      	ldrh	r0, [r5, #20]
   2cf9a:	f7ff ff6e 	bl	2ce7a <pack_uint16>
		if (err_code != 0) {
   2cf9e:	2800      	cmp	r0, #0
   2cfa0:	d0e2      	beq.n	2cf68 <publish_encode+0x32>
   2cfa2:	e7f6      	b.n	2cf92 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   2cfa4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2cfa8:	692a      	ldr	r2, [r5, #16]
   2cfaa:	1a9b      	subs	r3, r3, r2
   2cfac:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   2cfb0:	e7ef      	b.n	2cf92 <publish_encode+0x5c>
		return -EINVAL;
   2cfb2:	f06f 0015 	mvn.w	r0, #21
   2cfb6:	e7ec      	b.n	2cf92 <publish_encode+0x5c>

0002cfb8 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   2cfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cfba:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   2cfbc:	e9d1 3100 	ldrd	r3, r1, [r1]
   2cfc0:	1acb      	subs	r3, r1, r3
   2cfc2:	4293      	cmp	r3, r2
{
   2cfc4:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   2cfc6:	d301      	bcc.n	2cfcc <mqtt_read_message_chunk+0x14>
		return 0;
   2cfc8:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   2cfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   2cfcc:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   2cfce:	190f      	adds	r7, r1, r4
   2cfd0:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   2cfd4:	4413      	add	r3, r2
   2cfd6:	429f      	cmp	r7, r3
   2cfd8:	d813      	bhi.n	2d002 <mqtt_read_message_chunk+0x4a>
   2cfda:	4297      	cmp	r7, r2
   2cfdc:	d311      	bcc.n	2d002 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   2cfde:	2300      	movs	r3, #0
   2cfe0:	4622      	mov	r2, r4
   2cfe2:	f7e8 fcf9 	bl	159d8 <mqtt_transport_read>
	if (len < 0) {
   2cfe6:	2800      	cmp	r0, #0
   2cfe8:	dbef      	blt.n	2cfca <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   2cfea:	d00d      	beq.n	2d008 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   2cfec:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   2cfee:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   2cff0:	4403      	add	r3, r0
   2cff2:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   2cff4:	686b      	ldr	r3, [r5, #4]
   2cff6:	4403      	add	r3, r0
   2cff8:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   2cffa:	d2e5      	bcs.n	2cfc8 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   2cffc:	f06f 000a 	mvn.w	r0, #10
   2d000:	e7e3      	b.n	2cfca <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   2d002:	f06f 000b 	mvn.w	r0, #11
   2d006:	e7e0      	b.n	2cfca <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   2d008:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d00c:	e7dd      	b.n	2cfca <mqtt_read_message_chunk+0x12>

0002d00e <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   2d00e:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   2d010:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d012:	69c2      	ldr	r2, [r0, #28]
{
   2d014:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   2d016:	9302      	str	r3, [sp, #8]
{
   2d018:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d01a:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   2d01c:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d01e:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   2d020:	4628      	mov	r0, r5
   2d022:	a902      	add	r1, sp, #8
   2d024:	f7ff ffc8 	bl	2cfb8 <mqtt_read_message_chunk>
		if (err_code < 0) {
   2d028:	1e04      	subs	r4, r0, #0
   2d02a:	db2d      	blt.n	2d088 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   2d02c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d02e:	aa01      	add	r2, sp, #4
   2d030:	f10d 0103 	add.w	r1, sp, #3
   2d034:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   2d036:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d038:	f7ff fe7f 	bl	2cd3a <fixed_header_decode>
	} while (err_code == -EAGAIN);
   2d03c:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d040:	4604      	mov	r4, r0
		chunk_size = 1U;
   2d042:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   2d046:	d0eb      	beq.n	2d020 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   2d048:	2800      	cmp	r0, #0
   2d04a:	db21      	blt.n	2d090 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   2d04c:	f89d 6003 	ldrb.w	r6, [sp, #3]
   2d050:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   2d054:	2b30      	cmp	r3, #48	; 0x30
   2d056:	d11e      	bne.n	2d096 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   2d058:	2202      	movs	r2, #2
   2d05a:	4628      	mov	r0, r5
   2d05c:	a902      	add	r1, sp, #8
   2d05e:	f7ff ffab 	bl	2cfb8 <mqtt_read_message_chunk>
	if (err_code < 0) {
   2d062:	1e04      	subs	r4, r0, #0
   2d064:	db10      	blt.n	2d088 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   2d066:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2d068:	f016 0f06 	tst.w	r6, #6
   2d06c:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   2d06e:	4628      	mov	r0, r5
   2d070:	ba52      	rev16	r2, r2
   2d072:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   2d074:	bf0c      	ite	eq
   2d076:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   2d078:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   2d07a:	a902      	add	r1, sp, #8
   2d07c:	f7ff ff9c 	bl	2cfb8 <mqtt_read_message_chunk>
	if (err_code < 0) {
   2d080:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   2d084:	2c00      	cmp	r4, #0
   2d086:	da0d      	bge.n	2d0a4 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   2d088:	f114 0f0b 	cmn.w	r4, #11
   2d08c:	d100      	bne.n	2d090 <mqtt_handle_rx+0x82>
   2d08e:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   2d090:	4620      	mov	r0, r4
   2d092:	b00c      	add	sp, #48	; 0x30
   2d094:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   2d096:	4628      	mov	r0, r5
   2d098:	9a01      	ldr	r2, [sp, #4]
   2d09a:	a902      	add	r1, sp, #8
   2d09c:	f7ff ff8c 	bl	2cfb8 <mqtt_read_message_chunk>
   2d0a0:	4604      	mov	r4, r0
   2d0a2:	e7ef      	b.n	2d084 <mqtt_handle_rx+0x76>
	evt.result = 0;
   2d0a4:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   2d0a6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2d0aa:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   2d0ac:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   2d0b0:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   2d0b2:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   2d0b4:	d066      	beq.n	2d184 <mqtt_handle_rx+0x176>
   2d0b6:	d813      	bhi.n	2d0e0 <mqtt_handle_rx+0xd2>
   2d0b8:	2b40      	cmp	r3, #64	; 0x40
   2d0ba:	d059      	beq.n	2d170 <mqtt_handle_rx+0x162>
   2d0bc:	d806      	bhi.n	2d0cc <mqtt_handle_rx+0xbe>
   2d0be:	2b20      	cmp	r3, #32
   2d0c0:	d02f      	beq.n	2d122 <mqtt_handle_rx+0x114>
   2d0c2:	2b30      	cmp	r3, #48	; 0x30
   2d0c4:	d048      	beq.n	2d158 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   2d0c6:	2400      	movs	r4, #0
   2d0c8:	61ec      	str	r4, [r5, #28]
	return 0;
   2d0ca:	e7e1      	b.n	2d090 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   2d0cc:	2b50      	cmp	r3, #80	; 0x50
   2d0ce:	d1fa      	bne.n	2d0c6 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   2d0d0:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2d0d2:	a905      	add	r1, sp, #20
   2d0d4:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   2d0d6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2d0da:	f7ff feb6 	bl	2ce4a <publish_receive_decode>
   2d0de:	e04e      	b.n	2d17e <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   2d0e0:	2bb0      	cmp	r3, #176	; 0xb0
   2d0e2:	d05f      	beq.n	2d1a4 <mqtt_handle_rx+0x196>
   2d0e4:	d80b      	bhi.n	2d0fe <mqtt_handle_rx+0xf0>
   2d0e6:	2b70      	cmp	r3, #112	; 0x70
   2d0e8:	d054      	beq.n	2d194 <mqtt_handle_rx+0x186>
   2d0ea:	2b90      	cmp	r3, #144	; 0x90
   2d0ec:	d1eb      	bne.n	2d0c6 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   2d0ee:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2d0f0:	a905      	add	r1, sp, #20
   2d0f2:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   2d0f4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2d0f8:	f7ff fead 	bl	2ce56 <subscribe_ack_decode>
   2d0fc:	e03f      	b.n	2d17e <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   2d0fe:	2bd0      	cmp	r3, #208	; 0xd0
   2d100:	d1e1      	bne.n	2d0c6 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   2d102:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	int err_code = 0;
   2d106:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   2d108:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   2d10a:	bfc8      	it	gt
   2d10c:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   2d110:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   2d114:	bfc8      	it	gt
   2d116:	b252      	sxtbgt	r2, r2
   2d118:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
		evt.type = MQTT_EVT_PINGRESP;
   2d11c:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   2d120:	e010      	b.n	2d144 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   2d122:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   2d126:	4628      	mov	r0, r5
   2d128:	aa05      	add	r2, sp, #20
   2d12a:	a902      	add	r1, sp, #8
   2d12c:	f7ff fe30 	bl	2cd90 <connect_ack_decode>
		if (err_code == 0) {
   2d130:	4604      	mov	r4, r0
   2d132:	bb28      	cbnz	r0, 2d180 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   2d134:	f89d 2015 	ldrb.w	r2, [sp, #21]
   2d138:	b95a      	cbnz	r2, 2d152 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   2d13a:	69ab      	ldr	r3, [r5, #24]
   2d13c:	f043 0304 	orr.w	r3, r3, #4
   2d140:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   2d142:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   2d144:	4628      	mov	r0, r5
   2d146:	a904      	add	r1, sp, #16
   2d148:	f000 f8bf 	bl	2d2ca <event_notify>
	if (err_code < 0) {
   2d14c:	2c00      	cmp	r4, #0
   2d14e:	daba      	bge.n	2d0c6 <mqtt_handle_rx+0xb8>
   2d150:	e79e      	b.n	2d090 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   2d152:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   2d156:	e7f4      	b.n	2d142 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   2d158:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d15a:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   2d15c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d160:	ab05      	add	r3, sp, #20
   2d162:	f7ff fe30 	bl	2cdc6 <publish_decode>
		client->internal.remaining_payload =
   2d166:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d168:	4604      	mov	r4, r0
		evt.result = err_code;
   2d16a:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   2d16c:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   2d16e:	e7e9      	b.n	2d144 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   2d170:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2d172:	a905      	add	r1, sp, #20
   2d174:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   2d176:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2d17a:	f7ff fe64 	bl	2ce46 <publish_ack_decode>
   2d17e:	4604      	mov	r4, r0
		evt.result = err_code;
   2d180:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   2d182:	e7df      	b.n	2d144 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   2d184:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2d186:	a905      	add	r1, sp, #20
   2d188:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   2d18a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2d18e:	f7ff fe5e 	bl	2ce4e <publish_release_decode>
   2d192:	e7f4      	b.n	2d17e <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   2d194:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2d196:	a905      	add	r1, sp, #20
   2d198:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   2d19a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2d19e:	f7ff fe58 	bl	2ce52 <publish_complete_decode>
   2d1a2:	e7ec      	b.n	2d17e <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   2d1a4:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2d1a6:	a905      	add	r1, sp, #20
   2d1a8:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   2d1ac:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2d1b0:	f7ff fe61 	bl	2ce76 <unsubscribe_ack_decode>
   2d1b4:	e7e3      	b.n	2d17e <mqtt_handle_rx+0x170>

0002d1b6 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   2d1b6:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   2d1b8:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   2d1ba:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2d1bc:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2d1be:	2206      	movs	r2, #6
   2d1c0:	2101      	movs	r1, #1
   2d1c2:	f7e6 fc8f 	bl	13ae4 <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   2d1c6:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2d1c8:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   2d1ca:	da04      	bge.n	2d1d6 <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   2d1cc:	f7ff fd65 	bl	2cc9a <__errno>
   2d1d0:	6800      	ldr	r0, [r0, #0]
   2d1d2:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   2d1d4:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   2d1d6:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   2d1d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
	if (broker->sa_family == AF_INET) {
   2d1da:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   2d1dc:	bf14      	ite	ne
   2d1de:	2218      	movne	r2, #24
   2d1e0:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   2d1e2:	f7ff fc30 	bl	2ca46 <z_impl_zsock_connect>
	if (ret < 0) {
   2d1e6:	2800      	cmp	r0, #0
   2d1e8:	da03      	bge.n	2d1f2 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   2d1ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2d1ec:	f7ff fc14 	bl	2ca18 <z_impl_zsock_close>
   2d1f0:	e7ec      	b.n	2d1cc <mqtt_client_tcp_connect+0x16>
	return 0;
   2d1f2:	2000      	movs	r0, #0
   2d1f4:	e7ee      	b.n	2d1d4 <mqtt_client_tcp_connect+0x1e>

0002d1f6 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   2d1f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   2d1fa:	2400      	movs	r4, #0
{
   2d1fc:	4606      	mov	r6, r0
   2d1fe:	460f      	mov	r7, r1
   2d200:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2d202:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   2d204:	42ac      	cmp	r4, r5
   2d206:	d301      	bcc.n	2d20c <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   2d208:	2000      	movs	r0, #0
   2d20a:	e00d      	b.n	2d228 <mqtt_client_tcp_write+0x32>
		ret = send(client->transport.tcp.sock, data + offset,
   2d20c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2d20e:	2300      	movs	r3, #0
   2d210:	e9cd 8800 	strd	r8, r8, [sp]
   2d214:	1b2a      	subs	r2, r5, r4
   2d216:	1939      	adds	r1, r7, r4
   2d218:	f7ff fc2b 	bl	2ca72 <z_impl_zsock_sendto>
		if (ret < 0) {
   2d21c:	1e03      	subs	r3, r0, #0
   2d21e:	da06      	bge.n	2d22e <mqtt_client_tcp_write+0x38>
			return -errno;
   2d220:	f7ff fd3b 	bl	2cc9a <__errno>
   2d224:	6800      	ldr	r0, [r0, #0]
   2d226:	4240      	negs	r0, r0
}
   2d228:	b002      	add	sp, #8
   2d22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   2d22e:	441c      	add	r4, r3
   2d230:	e7e8      	b.n	2d204 <mqtt_client_tcp_write+0xe>

0002d232 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   2d232:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   2d234:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   2d236:	2200      	movs	r2, #0
   2d238:	f7ff fc38 	bl	2caac <z_impl_zsock_sendmsg>
	if (ret < 0) {
   2d23c:	2800      	cmp	r0, #0
   2d23e:	da04      	bge.n	2d24a <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   2d240:	f7ff fd2b 	bl	2cc9a <__errno>
   2d244:	6800      	ldr	r0, [r0, #0]
   2d246:	4240      	negs	r0, r0
	}

	return 0;
}
   2d248:	bd08      	pop	{r3, pc}
	return 0;
   2d24a:	2000      	movs	r0, #0
   2d24c:	e7fc      	b.n	2d248 <mqtt_client_tcp_write_msg+0x16>

0002d24e <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   2d24e:	b513      	push	{r0, r1, r4, lr}
   2d250:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   2d252:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   2d254:	bf14      	ite	ne
   2d256:	4623      	movne	r3, r4
   2d258:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   2d25a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2d25c:	e9cd 4400 	strd	r4, r4, [sp]
   2d260:	f7ff fc3a 	bl	2cad8 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   2d264:	2800      	cmp	r0, #0
   2d266:	da03      	bge.n	2d270 <mqtt_client_tcp_read+0x22>
		return -errno;
   2d268:	f7ff fd17 	bl	2cc9a <__errno>
   2d26c:	6800      	ldr	r0, [r0, #0]
   2d26e:	4240      	negs	r0, r0
	}

	return ret;
}
   2d270:	b002      	add	sp, #8
   2d272:	bd10      	pop	{r4, pc}

0002d274 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   2d274:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   2d276:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2d278:	f7ff fbce 	bl	2ca18 <z_impl_zsock_close>
	if (ret < 0) {
   2d27c:	2800      	cmp	r0, #0
   2d27e:	da04      	bge.n	2d28a <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   2d280:	f7ff fd0b 	bl	2cc9a <__errno>
   2d284:	6800      	ldr	r0, [r0, #0]
   2d286:	4240      	negs	r0, r0
	}

	return 0;
}
   2d288:	bd08      	pop	{r3, pc}
	return 0;
   2d28a:	2000      	movs	r0, #0
   2d28c:	e7fc      	b.n	2d288 <mqtt_client_tcp_disconnect+0x14>

0002d28e <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   2d28e:	f7ff bff1 	b.w	2d274 <mqtt_client_tcp_disconnect>

0002d292 <k_uptime_get>:
{
   2d292:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2d294:	f001 fa4c 	bl	2e730 <z_impl_k_uptime_ticks>
   2d298:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2d29c:	fba0 2304 	umull	r2, r3, r0, r4
   2d2a0:	fb04 3301 	mla	r3, r4, r1, r3
   2d2a4:	0bd0      	lsrs	r0, r2, #15
}
   2d2a6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2d2aa:	0bd9      	lsrs	r1, r3, #15
   2d2ac:	bd10      	pop	{r4, pc}

0002d2ae <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   2d2ae:	b538      	push	{r3, r4, r5, lr}
   2d2b0:	4604      	mov	r4, r0
   2d2b2:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   2d2b4:	6d82      	ldr	r2, [r0, #88]	; 0x58
   2d2b6:	2100      	movs	r1, #0
   2d2b8:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2d2ba:	f7f8 fe83 	bl	25fc4 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   2d2be:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   2d2c0:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   2d2c2:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   2d2c4:	4413      	add	r3, r2
   2d2c6:	606b      	str	r3, [r5, #4]
}
   2d2c8:	bd38      	pop	{r3, r4, r5, pc}

0002d2ca <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   2d2ca:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   2d2cc:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   2d2ce:	4604      	mov	r4, r0
   2d2d0:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   2d2d2:	b15b      	cbz	r3, 2d2ec <event_notify+0x22>
		mqtt_mutex_unlock(client);
   2d2d4:	f7e8 fb8e 	bl	159f4 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   2d2d8:	4620      	mov	r0, r4
   2d2da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2d2dc:	9901      	ldr	r1, [sp, #4]
   2d2de:	4798      	blx	r3

		mqtt_mutex_lock(client);
   2d2e0:	4620      	mov	r0, r4
	}
}
   2d2e2:	b002      	add	sp, #8
   2d2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   2d2e8:	f7e8 bbb0 	b.w	15a4c <mqtt_mutex_lock>
}
   2d2ec:	b002      	add	sp, #8
   2d2ee:	bd10      	pop	{r4, pc}

0002d2f0 <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   2d2f0:	b530      	push	{r4, r5, lr}
   2d2f2:	b089      	sub	sp, #36	; 0x24
   2d2f4:	4604      	mov	r4, r0
   2d2f6:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   2d2f8:	f7ff ffc9 	bl	2d28e <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   2d2fc:	221c      	movs	r2, #28
   2d2fe:	2100      	movs	r1, #0
   2d300:	4668      	mov	r0, sp
   2d302:	f7f8 fe5f 	bl	25fc4 <memset>
   2d306:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   2d308:	4669      	mov	r1, sp
   2d30a:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   2d30c:	f88d 3000 	strb.w	r3, [sp]
   2d310:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   2d312:	f7ff ffda 	bl	2d2ca <event_notify>
	MQTT_STATE_INIT(client);
   2d316:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2d318:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   2d31c:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   2d320:	b009      	add	sp, #36	; 0x24
   2d322:	bd30      	pop	{r4, r5, pc}

0002d324 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   2d324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d326:	4617      	mov	r7, r2
   2d328:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   2d32a:	4605      	mov	r5, r0
{
   2d32c:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   2d32e:	b320      	cbz	r0, 2d37a <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   2d330:	f7e8 fb8c 	bl	15a4c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   2d334:	6a2c      	ldr	r4, [r5, #32]
   2d336:	b1b4      	cbz	r4, 2d366 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   2d338:	42bc      	cmp	r4, r7
   2d33a:	4622      	mov	r2, r4
   2d33c:	4633      	mov	r3, r6
   2d33e:	bf28      	it	cs
   2d340:	463a      	movcs	r2, r7
   2d342:	4628      	mov	r0, r5
   2d344:	9901      	ldr	r1, [sp, #4]
   2d346:	f7e8 fb47 	bl	159d8 <mqtt_transport_read>
   2d34a:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   2d34c:	b916      	cbnz	r6, 2d354 <read_publish_payload+0x30>
   2d34e:	f110 0f0b 	cmn.w	r0, #11
   2d352:	d008      	beq.n	2d366 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   2d354:	2c00      	cmp	r4, #0
   2d356:	dc0c      	bgt.n	2d372 <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   2d358:	bf08      	it	eq
   2d35a:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   2d35e:	4628      	mov	r0, r5
   2d360:	4621      	mov	r1, r4
   2d362:	f7ff ffc5 	bl	2d2f0 <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   2d366:	4628      	mov	r0, r5
   2d368:	f7e8 fb44 	bl	159f4 <mqtt_mutex_unlock>

	return ret;
}
   2d36c:	4620      	mov	r0, r4
   2d36e:	b003      	add	sp, #12
   2d370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   2d372:	6a2b      	ldr	r3, [r5, #32]
   2d374:	1b1b      	subs	r3, r3, r4
   2d376:	622b      	str	r3, [r5, #32]
   2d378:	e7f5      	b.n	2d366 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   2d37a:	f06f 0415 	mvn.w	r4, #21
   2d37e:	e7f5      	b.n	2d36c <read_publish_payload+0x48>

0002d380 <client_write>:
{
   2d380:	b538      	push	{r3, r4, r5, lr}
   2d382:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   2d384:	f7e8 fb0e 	bl	159a4 <mqtt_transport_write>
	if (err_code < 0) {
   2d388:	1e04      	subs	r4, r0, #0
   2d38a:	da05      	bge.n	2d398 <client_write+0x18>
		client_disconnect(client, err_code, true);
   2d38c:	4621      	mov	r1, r4
   2d38e:	4628      	mov	r0, r5
   2d390:	f7ff ffae 	bl	2d2f0 <client_disconnect.constprop.0>
}
   2d394:	4620      	mov	r0, r4
   2d396:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   2d398:	f7ff ff7b 	bl	2d292 <k_uptime_get>
	return 0;
   2d39c:	2400      	movs	r4, #0
   2d39e:	6168      	str	r0, [r5, #20]
   2d3a0:	e7f8      	b.n	2d394 <client_write+0x14>

0002d3a2 <mqtt_client_init>:
{
   2d3a2:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   2d3a4:	4604      	mov	r4, r0
   2d3a6:	b1a8      	cbz	r0, 2d3d4 <mqtt_client_init+0x32>
	MQTT_STATE_INIT(client);
   2d3a8:	2500      	movs	r5, #0
   2d3aa:	2264      	movs	r2, #100	; 0x64
   2d3ac:	2100      	movs	r1, #0
   2d3ae:	f7f8 fe09 	bl	25fc4 <memset>
   2d3b2:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   2d3b4:	4620      	mov	r0, r4
   2d3b6:	f001 f8c9 	bl	2e54c <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   2d3ba:	2304      	movs	r3, #4
   2d3bc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   2d3c0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   2d3c4:	f365 0341 	bfi	r3, r5, #1, #1
   2d3c8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   2d3cc:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2d3d0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   2d3d4:	bd38      	pop	{r3, r4, r5, pc}

0002d3d6 <mqtt_connect>:
{
   2d3d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d3d8:	4605      	mov	r5, r0
   2d3da:	2800      	cmp	r0, #0
   2d3dc:	d03b      	beq.n	2d456 <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   2d3de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d3e0:	2b00      	cmp	r3, #0
   2d3e2:	d038      	beq.n	2d456 <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   2d3e4:	f7e8 fb32 	bl	15a4c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   2d3e8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2d3ea:	b38b      	cbz	r3, 2d450 <mqtt_connect+0x7a>
   2d3ec:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2d3ee:	b37b      	cbz	r3, 2d450 <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   2d3f0:	4628      	mov	r0, r5
   2d3f2:	f7e8 facd 	bl	15990 <mqtt_transport_connect>
	if (err_code < 0) {
   2d3f6:	1e04      	subs	r4, r0, #0
   2d3f8:	db24      	blt.n	2d444 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   2d3fa:	4669      	mov	r1, sp
   2d3fc:	4628      	mov	r0, r5
   2d3fe:	f7ff ff56 	bl	2d2ae <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d402:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2d404:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d406:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   2d40a:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d40c:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2d40e:	f7e8 fa1b 	bl	15848 <connect_request_encode>
	if (err_code < 0) {
   2d412:	1e04      	subs	r4, r0, #0
   2d414:	db13      	blt.n	2d43e <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   2d416:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d41a:	4628      	mov	r0, r5
   2d41c:	1a52      	subs	r2, r2, r1
   2d41e:	f7e8 fac1 	bl	159a4 <mqtt_transport_write>
	if (err_code < 0) {
   2d422:	1e04      	subs	r4, r0, #0
   2d424:	db0b      	blt.n	2d43e <mqtt_connect+0x68>
   2d426:	f7ff ff34 	bl	2d292 <k_uptime_get>
	client->unacked_ping = 0;
   2d42a:	2400      	movs	r4, #0
   2d42c:	6168      	str	r0, [r5, #20]
   2d42e:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2d432:	4628      	mov	r0, r5
   2d434:	f7e8 fade 	bl	159f4 <mqtt_mutex_unlock>
}
   2d438:	4620      	mov	r0, r4
   2d43a:	b003      	add	sp, #12
   2d43c:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   2d43e:	4628      	mov	r0, r5
   2d440:	f7ff ff25 	bl	2d28e <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   2d444:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2d446:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   2d44a:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   2d44e:	e7f0      	b.n	2d432 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   2d450:	f06f 040b 	mvn.w	r4, #11
   2d454:	e7f6      	b.n	2d444 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   2d456:	f06f 0415 	mvn.w	r4, #21
   2d45a:	e7ed      	b.n	2d438 <mqtt_connect+0x62>

0002d45c <mqtt_publish>:
{
   2d45c:	b570      	push	{r4, r5, r6, lr}
   2d45e:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   2d460:	4605      	mov	r5, r0
{
   2d462:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   2d464:	2800      	cmp	r0, #0
   2d466:	d03b      	beq.n	2d4e0 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   2d468:	2900      	cmp	r1, #0
   2d46a:	d039      	beq.n	2d4e0 <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   2d46c:	f7e8 faee 	bl	15a4c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d470:	4628      	mov	r0, r5
   2d472:	a901      	add	r1, sp, #4
   2d474:	f7ff ff1b 	bl	2d2ae <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d478:	69ab      	ldr	r3, [r5, #24]
   2d47a:	075b      	lsls	r3, r3, #29
   2d47c:	d52d      	bpl.n	2d4da <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   2d47e:	4630      	mov	r0, r6
   2d480:	a901      	add	r1, sp, #4
   2d482:	f7ff fd58 	bl	2cf36 <publish_encode>
	if (err_code < 0) {
   2d486:	1e04      	subs	r4, r0, #0
   2d488:	db1c      	blt.n	2d4c4 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   2d48a:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   2d48c:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   2d48e:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   2d490:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   2d492:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   2d494:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   2d496:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   2d498:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   2d49a:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   2d49c:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   2d49e:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   2d4a2:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   2d4a4:	f7f8 fd8e 	bl	25fc4 <memset>
	msg.msg_iov = io_vector;
   2d4a8:	ab03      	add	r3, sp, #12
   2d4aa:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2d4ac:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   2d4ae:	4628      	mov	r0, r5
   2d4b0:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2d4b2:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   2d4b4:	f7e8 fa82 	bl	159bc <mqtt_transport_write_msg>
	if (err_code < 0) {
   2d4b8:	1e04      	subs	r4, r0, #0
   2d4ba:	da09      	bge.n	2d4d0 <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   2d4bc:	4621      	mov	r1, r4
   2d4be:	4628      	mov	r0, r5
   2d4c0:	f7ff ff16 	bl	2d2f0 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d4c4:	4628      	mov	r0, r5
   2d4c6:	f7e8 fa95 	bl	159f4 <mqtt_mutex_unlock>
}
   2d4ca:	4620      	mov	r0, r4
   2d4cc:	b00e      	add	sp, #56	; 0x38
   2d4ce:	bd70      	pop	{r4, r5, r6, pc}
   2d4d0:	f7ff fedf 	bl	2d292 <k_uptime_get>
	return 0;
   2d4d4:	2400      	movs	r4, #0
   2d4d6:	6168      	str	r0, [r5, #20]
   2d4d8:	e7f4      	b.n	2d4c4 <mqtt_publish+0x68>
		return -ENOTCONN;
   2d4da:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d4de:	e7f1      	b.n	2d4c4 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   2d4e0:	f06f 0415 	mvn.w	r4, #21
   2d4e4:	e7f1      	b.n	2d4ca <mqtt_publish+0x6e>

0002d4e6 <mqtt_disconnect>:
{
   2d4e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d4e8:	4605      	mov	r5, r0
   2d4ea:	b310      	cbz	r0, 2d532 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   2d4ec:	f7e8 faae 	bl	15a4c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d4f0:	4669      	mov	r1, sp
   2d4f2:	4628      	mov	r0, r5
   2d4f4:	f7ff fedb 	bl	2d2ae <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d4f8:	69ab      	ldr	r3, [r5, #24]
   2d4fa:	075b      	lsls	r3, r3, #29
   2d4fc:	d516      	bpl.n	2d52c <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   2d4fe:	4668      	mov	r0, sp
   2d500:	f7e8 fa22 	bl	15948 <disconnect_encode>
	if (err_code < 0) {
   2d504:	1e04      	subs	r4, r0, #0
   2d506:	db0b      	blt.n	2d520 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d508:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d50c:	4628      	mov	r0, r5
   2d50e:	1a52      	subs	r2, r2, r1
   2d510:	f7ff ff36 	bl	2d380 <client_write>
	if (err_code < 0) {
   2d514:	1e04      	subs	r4, r0, #0
   2d516:	db03      	blt.n	2d520 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   2d518:	2100      	movs	r1, #0
   2d51a:	4628      	mov	r0, r5
   2d51c:	f7ff fee8 	bl	2d2f0 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d520:	4628      	mov	r0, r5
   2d522:	f7e8 fa67 	bl	159f4 <mqtt_mutex_unlock>
}
   2d526:	4620      	mov	r0, r4
   2d528:	b003      	add	sp, #12
   2d52a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   2d52c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d530:	e7f6      	b.n	2d520 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   2d532:	f06f 0415 	mvn.w	r4, #21
   2d536:	e7f6      	b.n	2d526 <mqtt_disconnect+0x40>

0002d538 <mqtt_ping>:
{
   2d538:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d53a:	4605      	mov	r5, r0
   2d53c:	b320      	cbz	r0, 2d588 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   2d53e:	f7e8 fa85 	bl	15a4c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d542:	4669      	mov	r1, sp
   2d544:	4628      	mov	r0, r5
   2d546:	f7ff feb2 	bl	2d2ae <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d54a:	69ab      	ldr	r3, [r5, #24]
   2d54c:	075b      	lsls	r3, r3, #29
   2d54e:	d518      	bpl.n	2d582 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   2d550:	4668      	mov	r0, sp
   2d552:	f7e8 fa0b 	bl	1596c <ping_request_encode>
	if (err_code < 0) {
   2d556:	1e04      	subs	r4, r0, #0
   2d558:	db0d      	blt.n	2d576 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d55a:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d55e:	4628      	mov	r0, r5
   2d560:	1a52      	subs	r2, r2, r1
   2d562:	f7ff ff0d 	bl	2d380 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   2d566:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d56a:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   2d56c:	2b7f      	cmp	r3, #127	; 0x7f
   2d56e:	d002      	beq.n	2d576 <mqtt_ping+0x3e>
		client->unacked_ping++;
   2d570:	3301      	adds	r3, #1
   2d572:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2d576:	4628      	mov	r0, r5
   2d578:	f7e8 fa3c 	bl	159f4 <mqtt_mutex_unlock>
}
   2d57c:	4620      	mov	r0, r4
   2d57e:	b003      	add	sp, #12
   2d580:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   2d582:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d586:	e7f6      	b.n	2d576 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   2d588:	f06f 0415 	mvn.w	r4, #21
   2d58c:	e7f6      	b.n	2d57c <mqtt_ping+0x44>

0002d58e <mqtt_abort>:
{
   2d58e:	b510      	push	{r4, lr}
   2d590:	4604      	mov	r4, r0
	mqtt_mutex_lock(client);
   2d592:	f7e8 fa5b 	bl	15a4c <mqtt_mutex_lock>
	NULL_PARAM_CHECK(client);
   2d596:	b15c      	cbz	r4, 2d5b0 <mqtt_abort+0x22>
	if (client->internal.state != MQTT_STATE_IDLE) {
   2d598:	69a3      	ldr	r3, [r4, #24]
   2d59a:	b123      	cbz	r3, 2d5a6 <mqtt_abort+0x18>
		client_disconnect(client, -ECONNABORTED, true);
   2d59c:	f06f 0170 	mvn.w	r1, #112	; 0x70
   2d5a0:	4620      	mov	r0, r4
   2d5a2:	f7ff fea5 	bl	2d2f0 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d5a6:	4620      	mov	r0, r4
   2d5a8:	f7e8 fa24 	bl	159f4 <mqtt_mutex_unlock>
	return 0;
   2d5ac:	2000      	movs	r0, #0
}
   2d5ae:	bd10      	pop	{r4, pc}
	NULL_PARAM_CHECK(client);
   2d5b0:	f06f 0015 	mvn.w	r0, #21
   2d5b4:	e7fb      	b.n	2d5ae <mqtt_abort+0x20>

0002d5b6 <mqtt_live>:
{
   2d5b6:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   2d5b8:	4606      	mov	r6, r0
   2d5ba:	b300      	cbz	r0, 2d5fe <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   2d5bc:	f7e8 fa46 	bl	15a4c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   2d5c0:	6974      	ldr	r4, [r6, #20]
   2d5c2:	f7ff fe66 	bl	2d292 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   2d5c6:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   2d5c8:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   2d5cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2d5d0:	b19c      	cbz	r4, 2d5fa <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   2d5d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2d5d6:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   2d5d8:	4284      	cmp	r4, r0
   2d5da:	d80d      	bhi.n	2d5f8 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   2d5dc:	4630      	mov	r0, r6
   2d5de:	f7ff ffab 	bl	2d538 <mqtt_ping>
		ping_sent = true;
   2d5e2:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   2d5e4:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   2d5e6:	4630      	mov	r0, r6
   2d5e8:	f7e8 fa04 	bl	159f4 <mqtt_mutex_unlock>
		return -EAGAIN;
   2d5ec:	2c00      	cmp	r4, #0
   2d5ee:	bf08      	it	eq
   2d5f0:	f06f 050a 	mvneq.w	r5, #10
}
   2d5f4:	4628      	mov	r0, r5
   2d5f6:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   2d5f8:	2400      	movs	r4, #0
	int err_code = 0;
   2d5fa:	4625      	mov	r5, r4
   2d5fc:	e7f3      	b.n	2d5e6 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   2d5fe:	f06f 0515 	mvn.w	r5, #21
   2d602:	e7f7      	b.n	2d5f4 <mqtt_live+0x3e>

0002d604 <mqtt_keepalive_time_left>:
{
   2d604:	b538      	push	{r3, r4, r5, lr}
   2d606:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   2d608:	6945      	ldr	r5, [r0, #20]
   2d60a:	f7ff fe42 	bl	2d292 <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   2d60e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2d612:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	int32_t diff = k_uptime_get_32() - last_activity;
   2d616:	1b42      	subs	r2, r0, r5
   2d618:	434b      	muls	r3, r1
		return 0;
   2d61a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   2d61e:	b119      	cbz	r1, 2d628 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   2d620:	4293      	cmp	r3, r2
   2d622:	d904      	bls.n	2d62e <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   2d624:	1a98      	subs	r0, r3, r2
}
   2d626:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   2d628:	f04f 30ff 	mov.w	r0, #4294967295
   2d62c:	e7fb      	b.n	2d626 <mqtt_keepalive_time_left+0x22>
		return 0;
   2d62e:	2000      	movs	r0, #0
   2d630:	e7f9      	b.n	2d626 <mqtt_keepalive_time_left+0x22>

0002d632 <mqtt_input>:
{
   2d632:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d634:	4605      	mov	r5, r0
   2d636:	b1d0      	cbz	r0, 2d66e <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   2d638:	f7e8 fa08 	bl	15a4c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   2d63c:	69ab      	ldr	r3, [r5, #24]
   2d63e:	079b      	lsls	r3, r3, #30
   2d640:	d50f      	bpl.n	2d662 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   2d642:	6a2b      	ldr	r3, [r5, #32]
   2d644:	b983      	cbnz	r3, 2d668 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   2d646:	4628      	mov	r0, r5
   2d648:	f7ff fce1 	bl	2d00e <mqtt_handle_rx>
	if (err_code < 0) {
   2d64c:	1e04      	subs	r4, r0, #0
   2d64e:	da03      	bge.n	2d658 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   2d650:	4621      	mov	r1, r4
   2d652:	4628      	mov	r0, r5
   2d654:	f7ff fe4c 	bl	2d2f0 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d658:	4628      	mov	r0, r5
   2d65a:	f7e8 f9cb 	bl	159f4 <mqtt_mutex_unlock>
}
   2d65e:	4620      	mov	r0, r4
   2d660:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   2d662:	f06f 040c 	mvn.w	r4, #12
   2d666:	e7f7      	b.n	2d658 <mqtt_input+0x26>
		return -EBUSY;
   2d668:	f06f 040f 	mvn.w	r4, #15
   2d66c:	e7f4      	b.n	2d658 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   2d66e:	f06f 0415 	mvn.w	r4, #21
   2d672:	e7f4      	b.n	2d65e <mqtt_input+0x2c>

0002d674 <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   2d674:	2300      	movs	r3, #0
   2d676:	f7ff be55 	b.w	2d324 <read_publish_payload>

0002d67a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d67a:	6843      	ldr	r3, [r0, #4]
}
   2d67c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d67e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2d680:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2d682:	600b      	str	r3, [r1, #0]
}
   2d684:	4770      	bx	lr

0002d686 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d686:	6843      	ldr	r3, [r0, #4]
   2d688:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2d68a:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2d68c:	4042      	eors	r2, r0
   2d68e:	400a      	ands	r2, r1
   2d690:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2d692:	605a      	str	r2, [r3, #4]
}
   2d694:	2000      	movs	r0, #0
   2d696:	4770      	bx	lr

0002d698 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d698:	6843      	ldr	r3, [r0, #4]
}
   2d69a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d69c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2d69e:	6099      	str	r1, [r3, #8]
}
   2d6a0:	4770      	bx	lr

0002d6a2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d6a2:	6843      	ldr	r3, [r0, #4]
}
   2d6a4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d6a6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2d6a8:	60d9      	str	r1, [r3, #12]
}
   2d6aa:	4770      	bx	lr

0002d6ac <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d6ac:	6843      	ldr	r3, [r0, #4]
}
   2d6ae:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d6b0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2d6b2:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   2d6b4:	4059      	eors	r1, r3
    p_reg->OUT = value;
   2d6b6:	6051      	str	r1, [r2, #4]
}
   2d6b8:	4770      	bx	lr

0002d6ba <nrf_gpio_cfg_sense_set>:
{
   2d6ba:	b513      	push	{r0, r1, r4, lr}
   2d6bc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d6be:	a801      	add	r0, sp, #4
{
   2d6c0:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d6c2:	f7e8 fa3b 	bl	15b3c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2d6c6:	9b01      	ldr	r3, [sp, #4]
   2d6c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2d6cc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   2d6d0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2d6d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2d6d8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2d6dc:	b002      	add	sp, #8
   2d6de:	bd10      	pop	{r4, pc}

0002d6e0 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   2d6e0:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2d6e2:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   2d6e4:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   2d6e6:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   2d6e8:	7b91      	ldrb	r1, [r2, #14]
   2d6ea:	b159      	cbz	r1, 2d704 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d6ec:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2d6f0:	b141      	cbz	r1, 2d704 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   2d6f2:	f44f 7180 	mov.w	r1, #256	; 0x100
   2d6f6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d6fa:	2101      	movs	r1, #1
   2d6fc:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   2d6fe:	2300      	movs	r3, #0
   2d700:	7393      	strb	r3, [r2, #14]
		return;
   2d702:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d704:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2d708:	b121      	cbz	r1, 2d714 <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d70a:	2100      	movs	r1, #0
   2d70c:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2d710:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2d714:	6813      	ldr	r3, [r2, #0]
   2d716:	b10b      	cbz	r3, 2d71c <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2d718:	6851      	ldr	r1, [r2, #4]
   2d71a:	4718      	bx	r3
}
   2d71c:	4770      	bx	lr

0002d71e <uarte_nrfx_config_get>:
{
   2d71e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2d720:	68c2      	ldr	r2, [r0, #12]
   2d722:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2d726:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2d72a:	2000      	movs	r0, #0
   2d72c:	4770      	bx	lr

0002d72e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2d72e:	6843      	ldr	r3, [r0, #4]
   2d730:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2d732:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2d736:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2d73a:	4770      	bx	lr

0002d73c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2d73c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2d73e:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2d740:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d742:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2d746:	b148      	cbz	r0, 2d75c <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d748:	2000      	movs	r0, #0
	*c = data->rx_data;
   2d74a:	7d12      	ldrb	r2, [r2, #20]
   2d74c:	700a      	strb	r2, [r1, #0]
   2d74e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2d752:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d756:	2201      	movs	r2, #1
   2d758:	601a      	str	r2, [r3, #0]
	return 0;
   2d75a:	4770      	bx	lr
		return -1;
   2d75c:	f04f 30ff 	mov.w	r0, #4294967295
}
   2d760:	4770      	bx	lr

0002d762 <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   2d762:	6843      	ldr	r3, [r0, #4]
{
   2d764:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2d766:	681c      	ldr	r4, [r3, #0]
{
   2d768:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d76a:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2d76e:	b1a0      	cbz	r0, 2d79a <uarte_nrfx_fifo_fill+0x38>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2d770:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   2d772:	68eb      	ldr	r3, [r5, #12]
   2d774:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d776:	2300      	movs	r3, #0
   2d778:	4290      	cmp	r0, r2
   2d77a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2d77e:	bfa8      	it	ge
   2d780:	4610      	movge	r0, r2
   2d782:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   2d786:	68ea      	ldr	r2, [r5, #12]
   2d788:	4283      	cmp	r3, r0
   2d78a:	6892      	ldr	r2, [r2, #8]
   2d78c:	db06      	blt.n	2d79c <uarte_nrfx_fifo_fill+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d78e:	2301      	movs	r3, #1

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2d790:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2d794:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d798:	60a3      	str	r3, [r4, #8]
}
   2d79a:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2d79c:	5cce      	ldrb	r6, [r1, r3]
   2d79e:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   2d7a0:	3301      	adds	r3, #1
   2d7a2:	e7f0      	b.n	2d786 <uarte_nrfx_fifo_fill+0x24>

0002d7a4 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   2d7a4:	6843      	ldr	r3, [r0, #4]
   2d7a6:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d7a8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2d7ac:	b153      	cbz	r3, 2d7c4 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2d7ae:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d7b0:	2000      	movs	r0, #0
   2d7b2:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   2d7b6:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d7ba:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2d7bc:	7d1b      	ldrb	r3, [r3, #20]
   2d7be:	700b      	strb	r3, [r1, #0]
   2d7c0:	6010      	str	r0, [r2, #0]
}
   2d7c2:	4770      	bx	lr
	int num_rx = 0;
   2d7c4:	4618      	mov	r0, r3
}
   2d7c6:	4770      	bx	lr

0002d7c8 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   2d7c8:	2100      	movs	r1, #0
   2d7ca:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2d7cc:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   2d7ce:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   2d7d0:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   2d7d2:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   2d7d4:	f44f 7280 	mov.w	r2, #256	; 0x100
   2d7d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2d7dc:	4770      	bx	lr

0002d7de <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2d7de:	2201      	movs	r2, #1
   2d7e0:	68c3      	ldr	r3, [r0, #12]
   2d7e2:	68db      	ldr	r3, [r3, #12]
   2d7e4:	739a      	strb	r2, [r3, #14]
}
   2d7e6:	4770      	bx	lr

0002d7e8 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   2d7e8:	68c3      	ldr	r3, [r0, #12]
   2d7ea:	68db      	ldr	r3, [r3, #12]
   2d7ec:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2d7ee:	b94b      	cbnz	r3, 2d804 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   2d7f0:	6843      	ldr	r3, [r0, #4]
   2d7f2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d7f4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   2d7f8:	b128      	cbz	r0, 2d806 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   2d7fa:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2d7fe:	f3c0 2000 	ubfx	r0, r0, #8, #1
   2d802:	4770      	bx	lr
   2d804:	2000      	movs	r0, #0
}
   2d806:	4770      	bx	lr

0002d808 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2d808:	6843      	ldr	r3, [r0, #4]
   2d80a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d80c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2d810:	3800      	subs	r0, #0
   2d812:	bf18      	it	ne
   2d814:	2001      	movne	r0, #1
   2d816:	4770      	bx	lr

0002d818 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   2d818:	2210      	movs	r2, #16
	return config->uarte_regs;
   2d81a:	6843      	ldr	r3, [r0, #4]
   2d81c:	681b      	ldr	r3, [r3, #0]
   2d81e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2d822:	4770      	bx	lr

0002d824 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2d824:	2210      	movs	r2, #16
	return config->uarte_regs;
   2d826:	6843      	ldr	r3, [r0, #4]
   2d828:	681b      	ldr	r3, [r3, #0]
   2d82a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2d82e:	4770      	bx	lr

0002d830 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2d830:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2d834:	6843      	ldr	r3, [r0, #4]
   2d836:	681b      	ldr	r3, [r3, #0]
   2d838:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2d83c:	4770      	bx	lr

0002d83e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2d83e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2d842:	6843      	ldr	r3, [r0, #4]
   2d844:	681b      	ldr	r3, [r3, #0]
   2d846:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2d84a:	4770      	bx	lr

0002d84c <uarte_nrfx_irq_update>:
}
   2d84c:	2001      	movs	r0, #1
   2d84e:	4770      	bx	lr

0002d850 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2d850:	68c3      	ldr	r3, [r0, #12]
   2d852:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2d854:	e9c3 1200 	strd	r1, r2, [r3]
}
   2d858:	4770      	bx	lr

0002d85a <uarte_nrfx_irq_is_pending>:
{
   2d85a:	b508      	push	{r3, lr}
	return config->uarte_regs;
   2d85c:	6843      	ldr	r3, [r0, #4]
{
   2d85e:	4602      	mov	r2, r0
	return config->uarte_regs;
   2d860:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   2d862:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   2d866:	05db      	lsls	r3, r3, #23
   2d868:	d405      	bmi.n	2d876 <uarte_nrfx_irq_is_pending+0x1c>
   2d86a:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   2d86e:	f010 0010 	ands.w	r0, r0, #16
   2d872:	d106      	bne.n	2d882 <uarte_nrfx_irq_is_pending+0x28>
}
   2d874:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2d876:	f7ff ffb7 	bl	2d7e8 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   2d87a:	2800      	cmp	r0, #0
   2d87c:	d0f5      	beq.n	2d86a <uarte_nrfx_irq_is_pending+0x10>
		||
   2d87e:	2001      	movs	r0, #1
   2d880:	e7f8      	b.n	2d874 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2d882:	4610      	mov	r0, r2
   2d884:	f7ff ffc0 	bl	2d808 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2d888:	3800      	subs	r0, #0
   2d88a:	bf18      	it	ne
   2d88c:	2001      	movne	r0, #1
   2d88e:	e7f1      	b.n	2d874 <uarte_nrfx_irq_is_pending+0x1a>

0002d890 <uarte_nrfx_poll_out>:
{
   2d890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   2d894:	6843      	ldr	r3, [r0, #4]
{
   2d896:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   2d89a:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2d89c:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   2d89e:	f000 fed2 	bl	2e646 <k_is_in_isr>
   2d8a2:	bb98      	cbnz	r0, 2d90c <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   2d8a4:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2d8a6:	f04f 0801 	mov.w	r8, #1
   2d8aa:	f106 0710 	add.w	r7, r6, #16
   2d8ae:	e8d7 3fef 	ldaex	r3, [r7]
   2d8b2:	2b00      	cmp	r3, #0
   2d8b4:	d103      	bne.n	2d8be <uarte_nrfx_poll_out+0x2e>
   2d8b6:	e8c7 8fe2 	stlex	r2, r8, [r7]
   2d8ba:	2a00      	cmp	r2, #0
   2d8bc:	d1f7      	bne.n	2d8ae <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   2d8be:	d007      	beq.n	2d8d0 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   2d8c0:	2021      	movs	r0, #33	; 0x21
   2d8c2:	2100      	movs	r1, #0
   2d8c4:	3d01      	subs	r5, #1
   2d8c6:	f7f6 fda7 	bl	24418 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   2d8ca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   2d8ce:	d1ee      	bne.n	2d8ae <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d8d0:	2300      	movs	r3, #0
   2d8d2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2d8d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2d8da:	f10d 0307 	add.w	r3, sp, #7
   2d8de:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2d8e2:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d8e4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   2d8e8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d8ec:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d8ee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   2d8f2:	b923      	cbnz	r3, 2d8fe <uarte_nrfx_poll_out+0x6e>
   2d8f4:	2001      	movs	r0, #1
   2d8f6:	f000 fde4 	bl	2e4c2 <nrfx_busy_wait>
   2d8fa:	3d01      	subs	r5, #1
   2d8fc:	d1f7      	bne.n	2d8ee <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d8fe:	2301      	movs	r3, #1
   2d900:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   2d902:	2300      	movs	r3, #0
   2d904:	6133      	str	r3, [r6, #16]
}
   2d906:	b002      	add	sp, #8
   2d908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   2d90c:	2301      	movs	r3, #1
   2d90e:	6133      	str	r3, [r6, #16]
   2d910:	e7de      	b.n	2d8d0 <uarte_nrfx_poll_out+0x40>

0002d912 <uarte_instance_init.constprop.0>:
static int uarte_instance_init(const struct device *dev,
   2d912:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2d916:	f04f 0800 	mov.w	r8, #0
	return config->uarte_regs;
   2d91a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2d91c:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   2d91e:	681c      	ldr	r4, [r3, #0]
   2d920:	680b      	ldr	r3, [r1, #0]
   2d922:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   2d926:	4606      	mov	r6, r0
	data->dev = dev;
   2d928:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d92a:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
   2d92c:	460d      	mov	r5, r1
   2d92e:	9301      	str	r3, [sp, #4]
   2d930:	f7e8 fc12 	bl	16158 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2d934:	2301      	movs	r3, #1
   2d936:	9a01      	ldr	r2, [sp, #4]
   2d938:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2d93a:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   2d93c:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d93e:	a801      	add	r0, sp, #4
   2d940:	9301      	str	r3, [sp, #4]
   2d942:	f7e8 fc09 	bl	16158 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2d946:	2203      	movs	r2, #3
   2d948:	9b01      	ldr	r3, [sp, #4]
   2d94a:	3380      	adds	r3, #128	; 0x80
   2d94c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   2d950:	686b      	ldr	r3, [r5, #4]
   2d952:	1c58      	adds	r0, r3, #1
   2d954:	d007      	beq.n	2d966 <uarte_instance_init.constprop.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d956:	a801      	add	r0, sp, #4
   2d958:	9301      	str	r3, [sp, #4]
   2d95a:	f7e8 fbfd 	bl	16158 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2d95e:	9b01      	ldr	r3, [sp, #4]
   2d960:	3380      	adds	r3, #128	; 0x80
   2d962:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   2d966:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   2d96a:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   2d96e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   2d972:	68ab      	ldr	r3, [r5, #8]
   2d974:	1c59      	adds	r1, r3, #1
   2d976:	d008      	beq.n	2d98a <uarte_instance_init.constprop.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d978:	a801      	add	r0, sp, #4
   2d97a:	9301      	str	r3, [sp, #4]
   2d97c:	f7e8 fbec 	bl	16158 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2d980:	2200      	movs	r2, #0
   2d982:	9b01      	ldr	r3, [sp, #4]
   2d984:	3380      	adds	r3, #128	; 0x80
   2d986:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   2d98a:	68eb      	ldr	r3, [r5, #12]
   2d98c:	1c5a      	adds	r2, r3, #1
   2d98e:	d011      	beq.n	2d9b4 <uarte_instance_init.constprop.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d990:	a801      	add	r0, sp, #4
   2d992:	9301      	str	r3, [sp, #4]
   2d994:	f7e8 fbe0 	bl	16158 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2d998:	2301      	movs	r3, #1
   2d99a:	9a01      	ldr	r2, [sp, #4]
   2d99c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2d99e:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   2d9a0:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d9a2:	a801      	add	r0, sp, #4
   2d9a4:	9301      	str	r3, [sp, #4]
   2d9a6:	f7e8 fbd7 	bl	16158 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2d9aa:	2203      	movs	r2, #3
   2d9ac:	9b01      	ldr	r3, [sp, #4]
   2d9ae:	3380      	adds	r3, #128	; 0x80
   2d9b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2d9b4:	68f1      	ldr	r1, [r6, #12]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   2d9b6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2d9ba:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   2d9bc:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   2d9c0:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   2d9c2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   2d9c6:	f7e8 fb11 	bl	15fec <uarte_nrfx_configure>
	if (err) {
   2d9ca:	b9d8      	cbnz	r0, 2da04 <uarte_instance_init.constprop.0+0xf2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2d9cc:	2308      	movs	r3, #8
   2d9ce:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   2d9d2:	686b      	ldr	r3, [r5, #4]
   2d9d4:	3301      	adds	r3, #1
   2d9d6:	d00b      	beq.n	2d9f0 <uarte_instance_init.constprop.0+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d9d8:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   2d9dc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2d9e0:	f107 0314 	add.w	r3, r7, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2d9e4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2d9e8:	2301      	movs	r3, #1
   2d9ea:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d9ee:	6023      	str	r3, [r4, #0]
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   2d9f0:	68fb      	ldr	r3, [r7, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2d9f2:	689b      	ldr	r3, [r3, #8]
   2d9f4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2d9f8:	2300      	movs	r3, #0
   2d9fa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d9fe:	2301      	movs	r3, #1
   2da00:	60a3      	str	r3, [r4, #8]
   2da02:	60e3      	str	r3, [r4, #12]
}
   2da04:	b002      	add	sp, #8
   2da06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002da0a <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2da0a:	2000      	movs	r0, #0
   2da0c:	4770      	bx	lr

0002da0e <update_offset>:
{
   2da0e:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   2da10:	4604      	mov	r4, r0
   2da12:	b140      	cbz	r0, 2da26 <update_offset+0x18>
   2da14:	6803      	ldr	r3, [r0, #0]
   2da16:	b133      	cbz	r3, 2da26 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   2da18:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   2da1a:	4418      	add	r0, r3
   2da1c:	f7f8 fee2 	bl	267e4 <strlen>
   2da20:	68a3      	ldr	r3, [r4, #8]
   2da22:	4418      	add	r0, r3
   2da24:	60a0      	str	r0, [r4, #8]
}
   2da26:	bd10      	pop	{r4, pc}

0002da28 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   2da28:	b161      	cbz	r1, 2da44 <add_item_to_array+0x1c>
   2da2a:	b160      	cbz	r0, 2da46 <add_item_to_array+0x1e>
    child = array->child;
   2da2c:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   2da2e:	b913      	cbnz	r3, 2da36 <add_item_to_array+0xe>
        array->child = item;
   2da30:	6081      	str	r1, [r0, #8]
}
   2da32:	2001      	movs	r0, #1
   2da34:	4770      	bx	lr
        while (child->next)
   2da36:	461a      	mov	r2, r3
   2da38:	681b      	ldr	r3, [r3, #0]
   2da3a:	2b00      	cmp	r3, #0
   2da3c:	d1fb      	bne.n	2da36 <add_item_to_array+0xe>
    prev->next = item;
   2da3e:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   2da40:	604a      	str	r2, [r1, #4]
   2da42:	e7f6      	b.n	2da32 <add_item_to_array+0xa>
        return false;
   2da44:	4608      	mov	r0, r1
}
   2da46:	4770      	bx	lr

0002da48 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   2da48:	4603      	mov	r3, r0
   2da4a:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   2da4c:	2028      	movs	r0, #40	; 0x28
   2da4e:	4798      	blx	r3
    if (node)
   2da50:	4604      	mov	r4, r0
   2da52:	b118      	cbz	r0, 2da5c <cJSON_New_Item.isra.0+0x14>
   2da54:	2228      	movs	r2, #40	; 0x28
   2da56:	2100      	movs	r1, #0
   2da58:	f7f8 fab4 	bl	25fc4 <memset>
}
   2da5c:	4620      	mov	r0, r4
   2da5e:	bd10      	pop	{r4, pc}

0002da60 <ensure>:
{
   2da60:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   2da62:	4604      	mov	r4, r0
   2da64:	b1b8      	cbz	r0, 2da96 <ensure+0x36>
   2da66:	6805      	ldr	r5, [r0, #0]
   2da68:	b165      	cbz	r5, 2da84 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   2da6a:	6842      	ldr	r2, [r0, #4]
   2da6c:	b112      	cbz	r2, 2da74 <ensure+0x14>
   2da6e:	6883      	ldr	r3, [r0, #8]
   2da70:	429a      	cmp	r2, r3
   2da72:	d910      	bls.n	2da96 <ensure+0x36>
    if (needed > INT_MAX)
   2da74:	2900      	cmp	r1, #0
   2da76:	db0e      	blt.n	2da96 <ensure+0x36>
    needed += p->offset + 1;
   2da78:	68a0      	ldr	r0, [r4, #8]
   2da7a:	4401      	add	r1, r0
   2da7c:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   2da7e:	429a      	cmp	r2, r3
   2da80:	d302      	bcc.n	2da88 <ensure+0x28>
        return p->buffer + p->offset;
   2da82:	4405      	add	r5, r0
}
   2da84:	4628      	mov	r0, r5
   2da86:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   2da88:	6922      	ldr	r2, [r4, #16]
   2da8a:	b922      	cbnz	r2, 2da96 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   2da8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2da90:	d303      	bcc.n	2da9a <ensure+0x3a>
        if (needed <= INT_MAX)
   2da92:	2b00      	cmp	r3, #0
   2da94:	da0f      	bge.n	2dab6 <ensure+0x56>
        return NULL;
   2da96:	2500      	movs	r5, #0
   2da98:	e7f4      	b.n	2da84 <ensure+0x24>
        newsize = needed + 1;
   2da9a:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   2da9c:	6a23      	ldr	r3, [r4, #32]
   2da9e:	b16b      	cbz	r3, 2dabc <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   2daa0:	4628      	mov	r0, r5
   2daa2:	4631      	mov	r1, r6
   2daa4:	4798      	blx	r3
        if (newbuffer == NULL)
   2daa6:	4605      	mov	r5, r0
   2daa8:	b9b0      	cbnz	r0, 2dad8 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   2daaa:	69e3      	ldr	r3, [r4, #28]
   2daac:	6820      	ldr	r0, [r4, #0]
   2daae:	4798      	blx	r3
            p->buffer = NULL;
   2dab0:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   2dab4:	e7e6      	b.n	2da84 <ensure+0x24>
            newsize = INT_MAX;
   2dab6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2daba:	e7ef      	b.n	2da9c <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   2dabc:	4630      	mov	r0, r6
   2dabe:	69a3      	ldr	r3, [r4, #24]
   2dac0:	4798      	blx	r3
        if (!newbuffer)
   2dac2:	4605      	mov	r5, r0
   2dac4:	2800      	cmp	r0, #0
   2dac6:	d0f0      	beq.n	2daaa <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   2dac8:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2daca:	6821      	ldr	r1, [r4, #0]
   2dacc:	3201      	adds	r2, #1
   2dace:	f7df f83d 	bl	cb4c <memcpy>
        p->hooks.deallocate(p->buffer);
   2dad2:	69e3      	ldr	r3, [r4, #28]
   2dad4:	6820      	ldr	r0, [r4, #0]
   2dad6:	4798      	blx	r3
    return newbuffer + p->offset;
   2dad8:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   2dada:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   2dade:	441d      	add	r5, r3
   2dae0:	e7d0      	b.n	2da84 <ensure+0x24>

0002dae2 <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
   2dae2:	2101      	movs	r1, #1
   2dae4:	f7e8 be86 	b.w	167f4 <print.constprop.0>

0002dae8 <cJSON_AddStringToObject>:
{
   2dae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2daea:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   2daec:	4610      	mov	r0, r2
{
   2daee:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   2daf0:	f7e8 fef0 	bl	168d4 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2daf4:	2300      	movs	r3, #0
   2daf6:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   2daf8:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2dafa:	9901      	ldr	r1, [sp, #4]
   2dafc:	4628      	mov	r0, r5
   2dafe:	f7e8 fe51 	bl	167a4 <add_item_to_object.constprop.0>
   2db02:	4605      	mov	r5, r0
   2db04:	b918      	cbnz	r0, 2db0e <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   2db06:	4620      	mov	r0, r4
   2db08:	f7e8 fec0 	bl	1688c <cJSON_Delete>
    return NULL;
   2db0c:	462c      	mov	r4, r5
}
   2db0e:	4620      	mov	r0, r4
   2db10:	b003      	add	sp, #12
   2db12:	bd30      	pop	{r4, r5, pc}

0002db14 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2db14:	4668      	mov	r0, sp
   2db16:	f020 0107 	bic.w	r1, r0, #7
   2db1a:	468d      	mov	sp, r1
   2db1c:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   2db1e:	f7ec fa0d 	bl	19f3c <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2db22:	f7e6 fe43 	bl	147ac <_arch_isr_direct_pm>
   2db26:	f7e7 f9e9 	bl	14efc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2db2a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2db2e:	4685      	mov	sp, r0
   2db30:	4770      	bx	lr

0002db32 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2db32:	4668      	mov	r0, sp
   2db34:	f020 0107 	bic.w	r1, r0, #7
   2db38:	468d      	mov	sp, r1
   2db3a:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   2db3c:	f7ec fda4 	bl	1a688 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2db40:	f7e6 fe34 	bl	147ac <_arch_isr_direct_pm>
   2db44:	f7e7 f9da 	bl	14efc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2db48:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2db4c:	4685      	mov	sp, r0
   2db4e:	4770      	bx	lr

0002db50 <trace_task_create>:
{
   2db50:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   2db52:	201d      	movs	r0, #29
   2db54:	2200      	movs	r2, #0
   2db56:	2106      	movs	r1, #6
   2db58:	f7e6 fdf6 	bl	14748 <z_arm_irq_priority_set>
}
   2db5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   2db60:	201d      	movs	r0, #29
   2db62:	f7e6 bdd3 	b.w	1470c <arch_irq_enable>

0002db66 <read_task_create>:
{
   2db66:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   2db68:	201c      	movs	r0, #28
   2db6a:	2200      	movs	r2, #0
   2db6c:	2106      	movs	r1, #6
   2db6e:	f7e6 fdeb 	bl	14748 <z_arm_irq_priority_set>
}
   2db72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   2db76:	201c      	movs	r0, #28
   2db78:	f7e6 bdc8 	b.w	1470c <arch_irq_enable>

0002db7c <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   2db7c:	2000      	movs	r0, #0
   2db7e:	4770      	bx	lr

0002db80 <z_to_nrf_flags>:
{
   2db80:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   2db82:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   2db86:	bf18      	it	ne
   2db88:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   2db8a:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   2db8c:	bf48      	it	mi
   2db8e:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   2db92:	06db      	lsls	r3, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   2db94:	bf48      	it	mi
   2db96:	f040 0020 	orrmi.w	r0, r0, #32
}
   2db9a:	4770      	bx	lr

0002db9c <z_to_nrf_family>:
	switch (z_family) {
   2db9c:	2806      	cmp	r0, #6
   2db9e:	d80a      	bhi.n	2dbb6 <z_to_nrf_family+0x1a>
   2dba0:	b198      	cbz	r0, 2dbca <z_to_nrf_family+0x2e>
   2dba2:	3801      	subs	r0, #1
   2dba4:	2805      	cmp	r0, #5
   2dba6:	d810      	bhi.n	2dbca <z_to_nrf_family+0x2e>
   2dba8:	e8df f000 	tbb	[pc, r0]
   2dbac:	0f0d0312 	.word	0x0f0d0312
   2dbb0:	0b0f      	.short	0x0b0f
   2dbb2:	200a      	movs	r0, #10
   2dbb4:	4770      	bx	lr
   2dbb6:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   2dbb8:	bf14      	ite	ne
   2dbba:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   2dbbe:	2066      	moveq	r0, #102	; 0x66
   2dbc0:	4770      	bx	lr
		return NRF_AF_LOCAL;
   2dbc2:	2001      	movs	r0, #1
   2dbc4:	4770      	bx	lr
		return NRF_AF_PACKET;
   2dbc6:	2005      	movs	r0, #5
   2dbc8:	4770      	bx	lr
		return -EAFNOSUPPORT;
   2dbca:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2dbce:	4770      	bx	lr
		return NRF_AF_INET;
   2dbd0:	2002      	movs	r0, #2
}
   2dbd2:	4770      	bx	lr

0002dbd4 <z_to_nrf_protocol>:
	switch (proto) {
   2dbd4:	f240 1311 	movw	r3, #273	; 0x111
   2dbd8:	4298      	cmp	r0, r3
   2dbda:	d023      	beq.n	2dc24 <z_to_nrf_protocol+0x50>
   2dbdc:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   2dbe0:	da11      	bge.n	2dc06 <z_to_nrf_protocol+0x32>
   2dbe2:	2811      	cmp	r0, #17
   2dbe4:	d021      	beq.n	2dc2a <z_to_nrf_protocol+0x56>
   2dbe6:	dc06      	bgt.n	2dbf6 <z_to_nrf_protocol+0x22>
   2dbe8:	b300      	cbz	r0, 2dc2c <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   2dbea:	2806      	cmp	r0, #6
   2dbec:	bf14      	ite	ne
   2dbee:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2dbf2:	2001      	moveq	r0, #1
   2dbf4:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2dbf6:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2dbfa:	bf14      	ite	ne
   2dbfc:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2dc00:	f44f 7082 	moveq.w	r0, #260	; 0x104
   2dc04:	4770      	bx	lr
	switch (proto) {
   2dc06:	f240 2302 	movw	r3, #514	; 0x202
   2dc0a:	4298      	cmp	r0, r3
   2dc0c:	d00e      	beq.n	2dc2c <z_to_nrf_protocol+0x58>
   2dc0e:	f240 2303 	movw	r3, #515	; 0x203
   2dc12:	4298      	cmp	r0, r3
   2dc14:	d00a      	beq.n	2dc2c <z_to_nrf_protocol+0x58>
   2dc16:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   2dc1a:	4298      	cmp	r0, r3
   2dc1c:	bf18      	it	ne
   2dc1e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2dc22:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   2dc24:	f44f 7087 	mov.w	r0, #270	; 0x10e
   2dc28:	4770      	bx	lr
	switch (proto) {
   2dc2a:	2002      	movs	r0, #2
}
   2dc2c:	4770      	bx	lr

0002dc2e <nrf91_socket_is_supported>:
}
   2dc2e:	2001      	movs	r0, #1
   2dc30:	4770      	bx	lr

0002dc32 <nrf91_bsdlib_socket_offload_init>:
}
   2dc32:	2000      	movs	r0, #0
   2dc34:	4770      	bx	lr

0002dc36 <nrf91_socket_offload_getsockopt>:
{
   2dc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dc3a:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   2dc3c:	2300      	movs	r3, #0
{
   2dc3e:	b086      	sub	sp, #24
   2dc40:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   2dc44:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2dc48:	f8d8 3000 	ldr.w	r3, [r8]
{
   2dc4c:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2dc4e:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2dc50:	f240 2302 	movw	r3, #514	; 0x202
   2dc54:	4299      	cmp	r1, r3
{
   2dc56:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   2dc58:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   2dc5c:	d005      	beq.n	2dc6a <nrf91_socket_offload_getsockopt+0x34>
   2dc5e:	dc30      	bgt.n	2dcc2 <nrf91_socket_offload_getsockopt+0x8c>
   2dc60:	2901      	cmp	r1, #1
   2dc62:	d002      	beq.n	2dc6a <nrf91_socket_offload_getsockopt+0x34>
   2dc64:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2dc68:	d13c      	bne.n	2dce4 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2dc6a:	4631      	mov	r1, r6
   2dc6c:	4620      	mov	r0, r4
   2dc6e:	aa02      	add	r2, sp, #8
   2dc70:	f7e9 f9a4 	bl	16fbc <z_to_nrf_optname>
   2dc74:	2800      	cmp	r0, #0
   2dc76:	db35      	blt.n	2dce4 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2dc78:	2c01      	cmp	r4, #1
   2dc7a:	d126      	bne.n	2dcca <nrf91_socket_offload_getsockopt+0x94>
   2dc7c:	f1a6 0314 	sub.w	r3, r6, #20
   2dc80:	2b01      	cmp	r3, #1
   2dc82:	d822      	bhi.n	2dcca <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   2dc84:	2308      	movs	r3, #8
   2dc86:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   2dc88:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2dc8a:	aa03      	add	r2, sp, #12
   2dc8c:	4638      	mov	r0, r7
   2dc8e:	9200      	str	r2, [sp, #0]
   2dc90:	4621      	mov	r1, r4
   2dc92:	9a02      	ldr	r2, [sp, #8]
   2dc94:	f7f2 faf4 	bl	20280 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2dc98:	4607      	mov	r7, r0
   2dc9a:	b970      	cbnz	r0, 2dcba <nrf91_socket_offload_getsockopt+0x84>
   2dc9c:	b16d      	cbz	r5, 2dcba <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   2dc9e:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2dca0:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   2dca2:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2dca6:	d108      	bne.n	2dcba <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   2dca8:	2e04      	cmp	r6, #4
   2dcaa:	d110      	bne.n	2dcce <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   2dcac:	6828      	ldr	r0, [r5, #0]
   2dcae:	f7e8 ffc3 	bl	16c38 <bsd_os_errno_set>
				*(int *)optval = errno;
   2dcb2:	f7fe fff2 	bl	2cc9a <__errno>
   2dcb6:	6803      	ldr	r3, [r0, #0]
   2dcb8:	602b      	str	r3, [r5, #0]
}
   2dcba:	4638      	mov	r0, r7
   2dcbc:	b006      	add	sp, #24
   2dcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2dcc2:	f240 2303 	movw	r3, #515	; 0x203
   2dcc6:	4299      	cmp	r1, r3
   2dcc8:	e7ce      	b.n	2dc68 <nrf91_socket_offload_getsockopt+0x32>
   2dcca:	462b      	mov	r3, r5
   2dccc:	e7dd      	b.n	2dc8a <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   2dcce:	3e14      	subs	r6, #20
   2dcd0:	2e01      	cmp	r6, #1
   2dcd2:	d8f2      	bhi.n	2dcba <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   2dcd4:	9b04      	ldr	r3, [sp, #16]
   2dcd6:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   2dcd8:	9b05      	ldr	r3, [sp, #20]
   2dcda:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   2dcdc:	2308      	movs	r3, #8
   2dcde:	f8c8 3000 	str.w	r3, [r8]
   2dce2:	e7ea      	b.n	2dcba <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   2dce4:	f7fe ffd9 	bl	2cc9a <__errno>
   2dce8:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2dcea:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   2dcee:	6003      	str	r3, [r0, #0]
	return retval;
   2dcf0:	e7e3      	b.n	2dcba <nrf91_socket_offload_getsockopt+0x84>

0002dcf2 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2dcf2:	3801      	subs	r0, #1
   2dcf4:	f7f2 ba70 	b.w	201d8 <nrf_listen>

0002dcf8 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   2dcf8:	3801      	subs	r0, #1
   2dcfa:	f7f2 ba15 	b.w	20128 <nrf_close>

0002dcfe <nrf91_socket_offload_freeaddrinfo>:
{
   2dcfe:	b538      	push	{r3, r4, r5, lr}
   2dd00:	4604      	mov	r4, r0
	while (next != NULL) {
   2dd02:	b904      	cbnz	r4, 2dd06 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2dd04:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2dd06:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2dd08:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2dd0a:	f000 fddc 	bl	2e8c6 <k_free>
		k_free(this);
   2dd0e:	4620      	mov	r0, r4
   2dd10:	f000 fdd9 	bl	2e8c6 <k_free>
		next = next->ai_next;
   2dd14:	462c      	mov	r4, r5
   2dd16:	e7f4      	b.n	2dd02 <nrf91_socket_offload_freeaddrinfo+0x4>

0002dd18 <z_to_nrf_addrinfo_hints>:
{
   2dd18:	b538      	push	{r3, r4, r5, lr}
   2dd1a:	460c      	mov	r4, r1
   2dd1c:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   2dd1e:	221c      	movs	r2, #28
   2dd20:	2100      	movs	r1, #0
   2dd22:	1d20      	adds	r0, r4, #4
   2dd24:	f7f8 f94e 	bl	25fc4 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   2dd28:	2300      	movs	r3, #0
   2dd2a:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2dd2c:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   2dd2e:	2b03      	cmp	r3, #3
   2dd30:	d003      	beq.n	2dd3a <z_to_nrf_addrinfo_hints+0x22>
   2dd32:	2b04      	cmp	r3, #4
   2dd34:	bf08      	it	eq
   2dd36:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   2dd3a:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2dd3c:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   2dd3e:	f7ff ff2d 	bl	2db9c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2dd42:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   2dd46:	d00b      	beq.n	2dd60 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   2dd48:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2dd4a:	6928      	ldr	r0, [r5, #16]
   2dd4c:	f7ff ff42 	bl	2dbd4 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2dd50:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2dd54:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2dd56:	d003      	beq.n	2dd60 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   2dd58:	69e8      	ldr	r0, [r5, #28]
   2dd5a:	b108      	cbz	r0, 2dd60 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   2dd5c:	61a0      	str	r0, [r4, #24]
	return 0;
   2dd5e:	2000      	movs	r0, #0
}
   2dd60:	bd38      	pop	{r3, r4, r5, pc}

0002dd62 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2dd62:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2dd64:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2dd66:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2dd68:	4603      	mov	r3, r0
{
   2dd6a:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2dd6c:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2dd70:	f101 0420 	add.w	r4, r1, #32
   2dd74:	f101 0210 	add.w	r2, r1, #16
   2dd78:	f852 5b04 	ldr.w	r5, [r2], #4
   2dd7c:	42a2      	cmp	r2, r4
   2dd7e:	f843 5b04 	str.w	r5, [r3], #4
   2dd82:	d1f9      	bne.n	2dd78 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   2dd84:	6a0b      	ldr	r3, [r1, #32]
   2dd86:	7503      	strb	r3, [r0, #20]
}
   2dd88:	bd30      	pop	{r4, r5, pc}

0002dd8a <nrf91_socket_offload_recvfrom>:
{
   2dd8a:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   2dd8c:	1e45      	subs	r5, r0, #1
{
   2dd8e:	b08f      	sub	sp, #60	; 0x3c
   2dd90:	4618      	mov	r0, r3
   2dd92:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   2dd96:	9203      	str	r2, [sp, #12]
   2dd98:	f7ff fef2 	bl	2db80 <z_to_nrf_flags>
	if (from == NULL) {
   2dd9c:	9a03      	ldr	r2, [sp, #12]
   2dd9e:	4603      	mov	r3, r0
   2dda0:	b944      	cbnz	r4, 2ddb4 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2dda2:	4628      	mov	r0, r5
   2dda4:	e9cd 4400 	strd	r4, r4, [sp]
   2dda8:	f7f2 f9e8 	bl	2017c <nrf_recvfrom>
   2ddac:	4605      	mov	r5, r0
}
   2ddae:	4628      	mov	r0, r5
   2ddb0:	b00f      	add	sp, #60	; 0x3c
   2ddb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2ddb4:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2ddb6:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2ddb8:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2ddba:	a804      	add	r0, sp, #16
   2ddbc:	9001      	str	r0, [sp, #4]
   2ddbe:	9700      	str	r7, [sp, #0]
   2ddc0:	4628      	mov	r0, r5
   2ddc2:	f7f2 f9db 	bl	2017c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2ddc6:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2ddc8:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   2ddca:	2b02      	cmp	r3, #2
   2ddcc:	d109      	bne.n	2dde2 <nrf91_socket_offload_recvfrom+0x58>
	ptr->sin_port = nrf_in->sin_port;
   2ddce:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2ddd2:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2ddd4:	2301      	movs	r3, #1
   2ddd6:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2ddd8:	9b08      	ldr	r3, [sp, #32]
   2ddda:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2dddc:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2ddde:	6033      	str	r3, [r6, #0]
	return retval;
   2dde0:	e7e5      	b.n	2ddae <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2dde2:	2b0a      	cmp	r3, #10
   2dde4:	d1e3      	bne.n	2ddae <nrf91_socket_offload_recvfrom+0x24>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2dde6:	4639      	mov	r1, r7
   2dde8:	4620      	mov	r0, r4
   2ddea:	f7ff ffba 	bl	2dd62 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2ddee:	2318      	movs	r3, #24
   2ddf0:	e7f5      	b.n	2ddde <nrf91_socket_offload_recvfrom+0x54>

0002ddf2 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2ddf2:	2300      	movs	r3, #0
{
   2ddf4:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2ddf6:	e9cd 3300 	strd	r3, r3, [sp]
   2ddfa:	f7ff ffc6 	bl	2dd8a <nrf91_socket_offload_recvfrom>
}
   2ddfe:	b003      	add	sp, #12
   2de00:	f85d fb04 	ldr.w	pc, [sp], #4

0002de04 <nrf91_socket_offload_getaddrinfo>:
{
   2de04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2de08:	4614      	mov	r4, r2
   2de0a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   2de0c:	2100      	movs	r1, #0
{
   2de0e:	b093      	sub	sp, #76	; 0x4c
   2de10:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2de12:	2220      	movs	r2, #32
   2de14:	a802      	add	r0, sp, #8
{
   2de16:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   2de18:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2de1a:	f7f8 f8d3 	bl	25fc4 <memset>
	if (hints != NULL) {
   2de1e:	b194      	cbz	r4, 2de46 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   2de20:	4620      	mov	r0, r4
   2de22:	a902      	add	r1, sp, #8
   2de24:	f7ff ff78 	bl	2dd18 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   2de28:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   2de2c:	f000 80d0 	beq.w	2dfd0 <nrf91_socket_offload_getaddrinfo+0x1cc>
		} else if (error == -EAFNOSUPPORT) {
   2de30:	306a      	adds	r0, #106	; 0x6a
   2de32:	f000 80d0 	beq.w	2dfd6 <nrf91_socket_offload_getaddrinfo+0x1d2>
		if (hints->ai_next != NULL) {
   2de36:	6820      	ldr	r0, [r4, #0]
   2de38:	b120      	cbz	r0, 2de44 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   2de3a:	ac0a      	add	r4, sp, #40	; 0x28
   2de3c:	4621      	mov	r1, r4
   2de3e:	f7ff ff6b 	bl	2dd18 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2de42:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2de44:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2de46:	4628      	mov	r0, r5
   2de48:	4622      	mov	r2, r4
   2de4a:	4631      	mov	r1, r6
   2de4c:	ab01      	add	r3, sp, #4
   2de4e:	f7f2 fa33 	bl	202b8 <nrf_getaddrinfo>
	if (retval != 0) {
   2de52:	4605      	mov	r5, r0
   2de54:	b300      	cbz	r0, 2de98 <nrf91_socket_offload_getaddrinfo+0x94>
	switch (nrf_error) {
   2de56:	282f      	cmp	r0, #47	; 0x2f
   2de58:	f000 80c0 	beq.w	2dfdc <nrf91_socket_offload_getaddrinfo+0x1d8>
   2de5c:	dc0c      	bgt.n	2de78 <nrf91_socket_offload_getaddrinfo+0x74>
   2de5e:	280c      	cmp	r0, #12
   2de60:	f000 80bf 	beq.w	2dfe2 <nrf91_socket_offload_getaddrinfo+0x1de>
		return DNS_EAI_AGAIN;
   2de64:	2823      	cmp	r0, #35	; 0x23
   2de66:	bf14      	ite	ne
   2de68:	f06f 050a 	mvnne.w	r5, #10
   2de6c:	f06f 0502 	mvneq.w	r5, #2
}
   2de70:	4628      	mov	r0, r5
   2de72:	b013      	add	sp, #76	; 0x4c
   2de74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   2de78:	2833      	cmp	r0, #51	; 0x33
   2de7a:	d006      	beq.n	2de8a <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   2de7c:	2873      	cmp	r0, #115	; 0x73
   2de7e:	bf14      	ite	ne
   2de80:	f06f 050a 	mvnne.w	r5, #10
   2de84:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   2de88:	e7f2      	b.n	2de70 <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   2de8a:	f7fe ff06 	bl	2cc9a <__errno>
   2de8e:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   2de90:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   2de94:	6003      	str	r3, [r0, #0]
   2de96:	e7eb      	b.n	2de70 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   2de98:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   2de9a:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2de9c:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2de9e:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2dea0:	b91e      	cbnz	r6, 2deaa <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   2dea2:	9801      	ldr	r0, [sp, #4]
   2dea4:	f7f2 fa0a 	bl	202bc <nrf_freeaddrinfo>
	return retval;
   2dea8:	e7e2      	b.n	2de70 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   2deaa:	2050      	movs	r0, #80	; 0x50
   2deac:	f7f7 fcea 	bl	25884 <k_malloc>
		if (next_z_res == NULL) {
   2deb0:	4604      	mov	r4, r0
   2deb2:	2800      	cmp	r0, #0
   2deb4:	f000 8081 	beq.w	2dfba <nrf91_socket_offload_getaddrinfo+0x1b6>
	family = nrf_to_z_family(nrf_in->ai_family);
   2deb8:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2deba:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2debc:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   2debe:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2dec2:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2dec6:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2deca:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   2decc:	dc23      	bgt.n	2df16 <nrf91_socket_offload_getaddrinfo+0x112>
   2dece:	2900      	cmp	r1, #0
   2ded0:	dd23      	ble.n	2df1a <nrf91_socket_offload_getaddrinfo+0x116>
   2ded2:	1e4b      	subs	r3, r1, #1
   2ded4:	2b09      	cmp	r3, #9
   2ded6:	d820      	bhi.n	2df1a <nrf91_socket_offload_getaddrinfo+0x116>
   2ded8:	e8df f003 	tbb	[pc, r3]
   2dedc:	1f1f2905 	.word	0x1f1f2905
   2dee0:	1f1f1f25 	.word	0x1f1f1f25
   2dee4:	271f      	.short	0x271f
		return AF_LOCAL;
   2dee6:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2dee8:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   2deea:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   2deec:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2def0:	d04b      	beq.n	2df8a <nrf91_socket_offload_getaddrinfo+0x186>
   2def2:	dc26      	bgt.n	2df42 <nrf91_socket_offload_getaddrinfo+0x13e>
   2def4:	2a02      	cmp	r2, #2
   2def6:	d04c      	beq.n	2df92 <nrf91_socket_offload_getaddrinfo+0x18e>
   2def8:	dc1d      	bgt.n	2df36 <nrf91_socket_offload_getaddrinfo+0x132>
   2defa:	b372      	cbz	r2, 2df5a <nrf91_socket_offload_getaddrinfo+0x156>
   2defc:	2a01      	cmp	r2, #1
   2defe:	d04a      	beq.n	2df96 <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2df00:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   2df04:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   2df06:	2300      	movs	r3, #0
   2df08:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   2df0a:	4620      	mov	r0, r4
   2df0c:	f000 fcdb 	bl	2e8c6 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2df10:	f06f 0506 	mvn.w	r5, #6
   2df14:	e053      	b.n	2dfbe <nrf91_socket_offload_getaddrinfo+0x1ba>
	switch (nrf_family) {
   2df16:	2966      	cmp	r1, #102	; 0x66
   2df18:	d00b      	beq.n	2df32 <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   2df1a:	4620      	mov	r0, r4
   2df1c:	f000 fcd3 	bl	2e8c6 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2df20:	f06f 0508 	mvn.w	r5, #8
   2df24:	e04b      	b.n	2dfbe <nrf91_socket_offload_getaddrinfo+0x1ba>
		return AF_PACKET;
   2df26:	2303      	movs	r3, #3
   2df28:	e7de      	b.n	2dee8 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   2df2a:	2302      	movs	r3, #2
   2df2c:	e7dc      	b.n	2dee8 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   2df2e:	2301      	movs	r3, #1
   2df30:	e7da      	b.n	2dee8 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   2df32:	460b      	mov	r3, r1
   2df34:	e7d8      	b.n	2dee8 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   2df36:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2df3a:	d1e1      	bne.n	2df00 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2df3c:	f44f 7381 	mov.w	r3, #258	; 0x102
   2df40:	e025      	b.n	2df8e <nrf91_socket_offload_getaddrinfo+0x18a>
	switch (proto) {
   2df42:	f240 2302 	movw	r3, #514	; 0x202
   2df46:	429a      	cmp	r2, r3
   2df48:	d007      	beq.n	2df5a <nrf91_socket_offload_getaddrinfo+0x156>
   2df4a:	f240 2303 	movw	r3, #515	; 0x203
   2df4e:	429a      	cmp	r2, r3
   2df50:	d003      	beq.n	2df5a <nrf91_socket_offload_getaddrinfo+0x156>
   2df52:	f240 2301 	movw	r3, #513	; 0x201
   2df56:	429a      	cmp	r2, r3
   2df58:	d1d2      	bne.n	2df00 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2df5a:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2df5c:	2902      	cmp	r1, #2
   2df5e:	d11c      	bne.n	2df9a <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2df60:	2008      	movs	r0, #8
   2df62:	f7f7 fc8f 	bl	25884 <k_malloc>
   2df66:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2df68:	b320      	cbz	r0, 2dfb4 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2df6a:	2308      	movs	r3, #8
   2df6c:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2df6e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2df70:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2df72:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2df74:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   2df76:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2df78:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2df7a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2df7c:	f1b8 0f00 	cmp.w	r8, #0
   2df80:	d123      	bne.n	2dfca <nrf91_socket_offload_getaddrinfo+0x1c6>
			*res = next_z_res;
   2df82:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2df84:	46a0      	mov	r8, r4
   2df86:	69f6      	ldr	r6, [r6, #28]
   2df88:	e78a      	b.n	2dea0 <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2df8a:	f240 1311 	movw	r3, #273	; 0x111
   2df8e:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   2df90:	e7e4      	b.n	2df5c <nrf91_socket_offload_getaddrinfo+0x158>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2df92:	2311      	movs	r3, #17
   2df94:	e7fb      	b.n	2df8e <nrf91_socket_offload_getaddrinfo+0x18a>
   2df96:	2306      	movs	r3, #6
   2df98:	e7f9      	b.n	2df8e <nrf91_socket_offload_getaddrinfo+0x18a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2df9a:	290a      	cmp	r1, #10
   2df9c:	d1b5      	bne.n	2df0a <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2df9e:	2018      	movs	r0, #24
   2dfa0:	f7f7 fc70 	bl	25884 <k_malloc>
   2dfa4:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2dfa6:	b128      	cbz	r0, 2dfb4 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2dfa8:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   2dfaa:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2dfac:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2dfae:	f7ff fed8 	bl	2dd62 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2dfb2:	e7e3      	b.n	2df7c <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   2dfb4:	4620      	mov	r0, r4
   2dfb6:	f000 fc86 	bl	2e8c6 <k_free>
			retval = DNS_EAI_MEMORY;
   2dfba:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   2dfbe:	6838      	ldr	r0, [r7, #0]
   2dfc0:	f7ff fe9d 	bl	2dcfe <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2dfc4:	2300      	movs	r3, #0
   2dfc6:	603b      	str	r3, [r7, #0]
   2dfc8:	e76b      	b.n	2dea2 <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   2dfca:	f8c8 4000 	str.w	r4, [r8]
   2dfce:	e7d9      	b.n	2df84 <nrf91_socket_offload_getaddrinfo+0x180>
			return DNS_EAI_SOCKTYPE;
   2dfd0:	f06f 0506 	mvn.w	r5, #6
   2dfd4:	e74c      	b.n	2de70 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   2dfd6:	f06f 0508 	mvn.w	r5, #8
   2dfda:	e749      	b.n	2de70 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   2dfdc:	f06f 0501 	mvn.w	r5, #1
   2dfe0:	e746      	b.n	2de70 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   2dfe2:	f06f 0509 	mvn.w	r5, #9
   2dfe6:	e743      	b.n	2de70 <nrf91_socket_offload_getaddrinfo+0x6c>

0002dfe8 <z_to_nrf_ipv6>:
{
   2dfe8:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2dfea:	2124      	movs	r1, #36	; 0x24
   2dfec:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2dfee:	8841      	ldrh	r1, [r0, #2]
{
   2dff0:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2dff2:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2dff4:	210a      	movs	r1, #10
{
   2dff6:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   2dff8:	6059      	str	r1, [r3, #4]
   2dffa:	1d04      	adds	r4, r0, #4
   2dffc:	f103 0610 	add.w	r6, r3, #16
   2e000:	f100 0714 	add.w	r7, r0, #20
   2e004:	4635      	mov	r5, r6
   2e006:	6820      	ldr	r0, [r4, #0]
   2e008:	6861      	ldr	r1, [r4, #4]
   2e00a:	3408      	adds	r4, #8
   2e00c:	c503      	stmia	r5!, {r0, r1}
   2e00e:	42bc      	cmp	r4, r7
   2e010:	462e      	mov	r6, r5
   2e012:	d1f7      	bne.n	2e004 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   2e014:	7d12      	ldrb	r2, [r2, #20]
   2e016:	621a      	str	r2, [r3, #32]
}
   2e018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e01a <nrf91_socket_offload_sendto>:
{
   2e01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e01e:	b08e      	sub	sp, #56	; 0x38
   2e020:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2e022:	460e      	mov	r6, r1
   2e024:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2e026:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   2e028:	b974      	cbnz	r4, 2e048 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2e02a:	4618      	mov	r0, r3
   2e02c:	9203      	str	r2, [sp, #12]
   2e02e:	f7ff fda7 	bl	2db80 <z_to_nrf_flags>
   2e032:	4603      	mov	r3, r0
   2e034:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2e038:	4631      	mov	r1, r6
   2e03a:	4628      	mov	r0, r5
   2e03c:	9a03      	ldr	r2, [sp, #12]
   2e03e:	f7f2 f881 	bl	20144 <nrf_sendto>
}
   2e042:	b00e      	add	sp, #56	; 0x38
   2e044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   2e048:	8823      	ldrh	r3, [r4, #0]
   2e04a:	9203      	str	r2, [sp, #12]
   2e04c:	2b01      	cmp	r3, #1
   2e04e:	d111      	bne.n	2e074 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   2e050:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e052:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   2e054:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   2e058:	2302      	movs	r3, #2
   2e05a:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e05c:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2e05e:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e060:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e064:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2e066:	f7ff fd8b 	bl	2db80 <z_to_nrf_flags>
   2e06a:	9101      	str	r1, [sp, #4]
   2e06c:	a905      	add	r1, sp, #20
   2e06e:	4603      	mov	r3, r0
   2e070:	9100      	str	r1, [sp, #0]
   2e072:	e7e1      	b.n	2e038 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   2e074:	2b02      	cmp	r3, #2
   2e076:	d10d      	bne.n	2e094 <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   2e078:	f10d 0814 	add.w	r8, sp, #20
   2e07c:	4641      	mov	r1, r8
   2e07e:	4620      	mov	r0, r4
   2e080:	f7ff ffb2 	bl	2dfe8 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2e084:	4638      	mov	r0, r7
   2e086:	f7ff fd7b 	bl	2db80 <z_to_nrf_flags>
   2e08a:	2124      	movs	r1, #36	; 0x24
   2e08c:	4603      	mov	r3, r0
   2e08e:	e9cd 8100 	strd	r8, r1, [sp]
   2e092:	e7d1      	b.n	2e038 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   2e094:	f7fe fe01 	bl	2cc9a <__errno>
   2e098:	2386      	movs	r3, #134	; 0x86
   2e09a:	6003      	str	r3, [r0, #0]
	return retval;
   2e09c:	f04f 30ff 	mov.w	r0, #4294967295
   2e0a0:	e7cf      	b.n	2e042 <nrf91_socket_offload_sendto+0x28>

0002e0a2 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2e0a2:	2300      	movs	r3, #0
{
   2e0a4:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2e0a6:	e9cd 3300 	strd	r3, r3, [sp]
   2e0aa:	f7ff ffb6 	bl	2e01a <nrf91_socket_offload_sendto>
}
   2e0ae:	b003      	add	sp, #12
   2e0b0:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0b4 <nrf91_socket_offload_connect>:
{
   2e0b4:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2e0b6:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   2e0b8:	8808      	ldrh	r0, [r1, #0]
{
   2e0ba:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2e0bc:	2801      	cmp	r0, #1
{
   2e0be:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2e0c0:	d10f      	bne.n	2e0e2 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   2e0c2:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e0c4:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2e0c6:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2e0ca:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e0cc:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e0ce:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2e0d2:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e0d4:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2e0d6:	4620      	mov	r0, r4
   2e0d8:	a901      	add	r1, sp, #4
   2e0da:	f7f2 f86b 	bl	201b4 <nrf_connect>
}
   2e0de:	b00a      	add	sp, #40	; 0x28
   2e0e0:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2e0e2:	2802      	cmp	r0, #2
   2e0e4:	d105      	bne.n	2e0f2 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   2e0e6:	4618      	mov	r0, r3
   2e0e8:	a901      	add	r1, sp, #4
   2e0ea:	f7ff ff7d 	bl	2dfe8 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2e0ee:	2224      	movs	r2, #36	; 0x24
   2e0f0:	e7f1      	b.n	2e0d6 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2e0f2:	4620      	mov	r0, r4
   2e0f4:	f7f2 f85e 	bl	201b4 <nrf_connect>
		if (retval < 0) {
   2e0f8:	2800      	cmp	r0, #0
   2e0fa:	daf0      	bge.n	2e0de <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   2e0fc:	f7fe fdcd 	bl	2cc9a <__errno>
   2e100:	2386      	movs	r3, #134	; 0x86
   2e102:	6003      	str	r3, [r0, #0]
   2e104:	f04f 30ff 	mov.w	r0, #4294967295
   2e108:	e7e9      	b.n	2e0de <nrf91_socket_offload_connect+0x2a>

0002e10a <nrf91_socket_offload_setsockopt>:
{
   2e10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e10e:	461e      	mov	r6, r3
	switch (z_in_level) {
   2e110:	f240 2302 	movw	r3, #514	; 0x202
{
   2e114:	b086      	sub	sp, #24
	switch (z_in_level) {
   2e116:	4299      	cmp	r1, r3
{
   2e118:	460c      	mov	r4, r1
   2e11a:	4615      	mov	r5, r2
   2e11c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   2e11e:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   2e122:	d005      	beq.n	2e130 <nrf91_socket_offload_setsockopt+0x26>
   2e124:	dc20      	bgt.n	2e168 <nrf91_socket_offload_setsockopt+0x5e>
   2e126:	2901      	cmp	r1, #1
   2e128:	d002      	beq.n	2e130 <nrf91_socket_offload_setsockopt+0x26>
   2e12a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2e12e:	d126      	bne.n	2e17e <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2e130:	4629      	mov	r1, r5
   2e132:	4620      	mov	r0, r4
   2e134:	aa03      	add	r2, sp, #12
   2e136:	f7e8 ff41 	bl	16fbc <z_to_nrf_optname>
   2e13a:	2800      	cmp	r0, #0
   2e13c:	db1f      	blt.n	2e17e <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2e13e:	2c01      	cmp	r4, #1
   2e140:	d116      	bne.n	2e170 <nrf91_socket_offload_setsockopt+0x66>
   2e142:	3d14      	subs	r5, #20
   2e144:	2d01      	cmp	r5, #1
   2e146:	d805      	bhi.n	2e154 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   2e148:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2e14a:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2e14c:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2e14e:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2e150:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   2e152:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2e154:	4633      	mov	r3, r6
   2e156:	4621      	mov	r1, r4
   2e158:	4640      	mov	r0, r8
   2e15a:	9a03      	ldr	r2, [sp, #12]
   2e15c:	9700      	str	r7, [sp, #0]
   2e15e:	f7f2 f873 	bl	20248 <nrf_setsockopt>
}
   2e162:	b006      	add	sp, #24
   2e164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2e168:	f240 2303 	movw	r3, #515	; 0x203
   2e16c:	4299      	cmp	r1, r3
   2e16e:	e7de      	b.n	2e12e <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   2e170:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   2e174:	d1ee      	bne.n	2e154 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   2e176:	2d07      	cmp	r5, #7
   2e178:	bf08      	it	eq
   2e17a:	2701      	moveq	r7, #1
   2e17c:	e7ea      	b.n	2e154 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   2e17e:	f7fe fd8c 	bl	2cc9a <__errno>
   2e182:	236d      	movs	r3, #109	; 0x6d
   2e184:	6003      	str	r3, [r0, #0]
   2e186:	f04f 30ff 	mov.w	r0, #4294967295
   2e18a:	e7ea      	b.n	2e162 <nrf91_socket_offload_setsockopt+0x58>

0002e18c <nrf91_socket_offload_bind>:
{
   2e18c:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   2e18e:	880a      	ldrh	r2, [r1, #0]
{
   2e190:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2e192:	2a01      	cmp	r2, #1
{
   2e194:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   2e196:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   2e19a:	d10f      	bne.n	2e1bc <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2e19c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e19e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2e1a0:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2e1a4:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e1a6:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e1a8:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2e1ac:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e1ae:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2e1b0:	4620      	mov	r0, r4
   2e1b2:	a901      	add	r1, sp, #4
   2e1b4:	f7f2 f836 	bl	20224 <nrf_bind>
}
   2e1b8:	b00a      	add	sp, #40	; 0x28
   2e1ba:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2e1bc:	2a02      	cmp	r2, #2
   2e1be:	d105      	bne.n	2e1cc <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2e1c0:	4618      	mov	r0, r3
   2e1c2:	a901      	add	r1, sp, #4
   2e1c4:	f7ff ff10 	bl	2dfe8 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2e1c8:	2224      	movs	r2, #36	; 0x24
   2e1ca:	e7f1      	b.n	2e1b0 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2e1cc:	f7fe fd65 	bl	2cc9a <__errno>
   2e1d0:	2386      	movs	r3, #134	; 0x86
   2e1d2:	6003      	str	r3, [r0, #0]
   2e1d4:	f04f 30ff 	mov.w	r0, #4294967295
   2e1d8:	e7ee      	b.n	2e1b8 <nrf91_socket_offload_bind+0x2c>

0002e1da <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2e1da:	ea40 0301 	orr.w	r3, r0, r1
   2e1de:	f033 030f 	bics.w	r3, r3, #15
   2e1e2:	d101      	bne.n	2e1e8 <dk_set_leds_state+0xe>
   2e1e4:	f7e9 ba18 	b.w	17618 <dk_set_leds_state.part.0>
}
   2e1e8:	f06f 0015 	mvn.w	r0, #21
   2e1ec:	4770      	bx	lr

0002e1ee <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   2e1ee:	6883      	ldr	r3, [r0, #8]
   2e1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e1f2:	b103      	cbz	r3, 2e1f6 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   2e1f4:	4718      	bx	r3
}
   2e1f6:	4770      	bx	lr

0002e1f8 <response_handler>:
	write_uart_string(response);
   2e1f8:	4608      	mov	r0, r1
   2e1fa:	f7ea b8d7 	b.w	183ac <write_uart_string>

0002e1fe <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   2e1fe:	280d      	cmp	r0, #13
   2e200:	d004      	beq.n	2e20c <is_lfcr+0xe>
   2e202:	f1a0 030a 	sub.w	r3, r0, #10
   2e206:	4258      	negs	r0, r3
   2e208:	4158      	adcs	r0, r3
   2e20a:	4770      	bx	lr
		return true;
   2e20c:	2001      	movs	r0, #1
}
   2e20e:	4770      	bx	lr

0002e210 <skip_command_prefix>:
{
   2e210:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2e212:	6801      	ldr	r1, [r0, #0]
{
   2e214:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2e216:	1c8b      	adds	r3, r1, #2
   2e218:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2e21a:	788c      	ldrb	r4, [r1, #2]
   2e21c:	4620      	mov	r0, r4
   2e21e:	f7ff ffee 	bl	2e1fe <is_lfcr>
   2e222:	b910      	cbnz	r0, 2e22a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2e224:	b10c      	cbz	r4, 2e22a <skip_command_prefix+0x1a>
	(*cmd)++;
   2e226:	3103      	adds	r1, #3
   2e228:	6011      	str	r1, [r2, #0]
}
   2e22a:	bd10      	pop	{r4, pc}

0002e22c <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2e22c:	6813      	ldr	r3, [r2, #0]
   2e22e:	f7ea bc05 	b.w	18a3c <at_parser_max_params_from_str>

0002e232 <at_params_list_init>:
{
   2e232:	b538      	push	{r3, r4, r5, lr}
   2e234:	460d      	mov	r5, r1
	if (list == NULL) {
   2e236:	4604      	mov	r4, r0
   2e238:	b140      	cbz	r0, 2e24c <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2e23a:	210c      	movs	r1, #12
   2e23c:	4628      	mov	r0, r5
   2e23e:	f000 fb47 	bl	2e8d0 <k_calloc>
   2e242:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2e244:	b128      	cbz	r0, 2e252 <at_params_list_init+0x20>
	return 0;
   2e246:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2e248:	6025      	str	r5, [r4, #0]
}
   2e24a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2e24c:	f06f 0015 	mvn.w	r0, #21
   2e250:	e7fb      	b.n	2e24a <at_params_list_init+0x18>
		return -ENOMEM;
   2e252:	f06f 000b 	mvn.w	r0, #11
   2e256:	e7f8      	b.n	2e24a <at_params_list_init+0x18>

0002e258 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   2e258:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2e25a:	4604      	mov	r4, r0
   2e25c:	b148      	cbz	r0, 2e272 <at_params_list_free+0x1a>
   2e25e:	6843      	ldr	r3, [r0, #4]
   2e260:	b13b      	cbz	r3, 2e272 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   2e262:	2500      	movs	r5, #0
	at_params_list_clear(list);
   2e264:	f7ea fce6 	bl	18c34 <at_params_list_clear>
	k_free(list->params);
   2e268:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   2e26a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   2e26c:	f000 fb2b 	bl	2e8c6 <k_free>
	list->params = NULL;
   2e270:	6065      	str	r5, [r4, #4]
}
   2e272:	bd38      	pop	{r3, r4, r5, pc}

0002e274 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   2e274:	b538      	push	{r3, r4, r5, lr}
   2e276:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2e278:	b910      	cbnz	r0, 2e280 <at_params_short_put+0xc>
		return -EINVAL;
   2e27a:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
}
   2e27e:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2e280:	6843      	ldr	r3, [r0, #4]
   2e282:	2b00      	cmp	r3, #0
   2e284:	d0f9      	beq.n	2e27a <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2e286:	f7ea fc69 	bl	18b5c <at_params_get>
	if (param == NULL) {
   2e28a:	4604      	mov	r4, r0
   2e28c:	2800      	cmp	r0, #0
   2e28e:	d0f4      	beq.n	2e27a <at_params_short_put+0x6>
	at_param_clear(param);
   2e290:	f7ea fcae 	bl	18bf0 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2e294:	2301      	movs	r3, #1
	return 0;
   2e296:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2e298:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   2e29a:	60a5      	str	r5, [r4, #8]
	return 0;
   2e29c:	e7ef      	b.n	2e27e <at_params_short_put+0xa>

0002e29e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   2e29e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2e2a0:	b910      	cbnz	r0, 2e2a8 <at_params_empty_put+0xa>
		return -EINVAL;
   2e2a2:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   2e2a6:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   2e2a8:	6843      	ldr	r3, [r0, #4]
   2e2aa:	2b00      	cmp	r3, #0
   2e2ac:	d0f9      	beq.n	2e2a2 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   2e2ae:	f7ea fc55 	bl	18b5c <at_params_get>
	if (param == NULL) {
   2e2b2:	4604      	mov	r4, r0
   2e2b4:	2800      	cmp	r0, #0
   2e2b6:	d0f4      	beq.n	2e2a2 <at_params_empty_put+0x4>
	at_param_clear(param);
   2e2b8:	f7ea fc9a 	bl	18bf0 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   2e2bc:	2305      	movs	r3, #5
	param->value.int_val = 0;
   2e2be:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2e2c0:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2e2c2:	60a0      	str	r0, [r4, #8]
	return 0;
   2e2c4:	e7ef      	b.n	2e2a6 <at_params_empty_put+0x8>

0002e2c6 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   2e2c6:	b538      	push	{r3, r4, r5, lr}
   2e2c8:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2e2ca:	b910      	cbnz	r0, 2e2d2 <at_params_int_put+0xc>
		return -EINVAL;
   2e2cc:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   2e2d0:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2e2d2:	6843      	ldr	r3, [r0, #4]
   2e2d4:	2b00      	cmp	r3, #0
   2e2d6:	d0f9      	beq.n	2e2cc <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2e2d8:	f7ea fc40 	bl	18b5c <at_params_get>
	if (param == NULL) {
   2e2dc:	4604      	mov	r4, r0
   2e2de:	2800      	cmp	r0, #0
   2e2e0:	d0f4      	beq.n	2e2cc <at_params_int_put+0x6>
	at_param_clear(param);
   2e2e2:	f7ea fc85 	bl	18bf0 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   2e2e6:	2302      	movs	r3, #2
	return 0;
   2e2e8:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   2e2ea:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   2e2ec:	60a5      	str	r5, [r4, #8]
	return 0;
   2e2ee:	e7ef      	b.n	2e2d0 <at_params_int_put+0xa>

0002e2f0 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e2f2:	4617      	mov	r7, r2
   2e2f4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2e2f6:	b910      	cbnz	r0, 2e2fe <at_params_string_put+0xe>
		return -EINVAL;
   2e2f8:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   2e2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   2e2fe:	6843      	ldr	r3, [r0, #4]
   2e300:	2b00      	cmp	r3, #0
   2e302:	d0f9      	beq.n	2e2f8 <at_params_string_put+0x8>
   2e304:	2a00      	cmp	r2, #0
   2e306:	d0f7      	beq.n	2e2f8 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2e308:	f7ea fc28 	bl	18b5c <at_params_get>
	if (param == NULL) {
   2e30c:	4604      	mov	r4, r0
   2e30e:	2800      	cmp	r0, #0
   2e310:	d0f2      	beq.n	2e2f8 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   2e312:	1c68      	adds	r0, r5, #1
   2e314:	f7f7 fab6 	bl	25884 <k_malloc>
	if (param_value == NULL) {
   2e318:	4606      	mov	r6, r0
   2e31a:	b160      	cbz	r0, 2e336 <at_params_string_put+0x46>
   2e31c:	462a      	mov	r2, r5
   2e31e:	4639      	mov	r1, r7
   2e320:	f7de fc14 	bl	cb4c <memcpy>
	at_param_clear(param);
   2e324:	4620      	mov	r0, r4
   2e326:	f7ea fc63 	bl	18bf0 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   2e32a:	2303      	movs	r3, #3
	return 0;
   2e32c:	2000      	movs	r0, #0
	param->size = str_len;
   2e32e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2e330:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2e332:	60a6      	str	r6, [r4, #8]
	return 0;
   2e334:	e7e2      	b.n	2e2fc <at_params_string_put+0xc>
		return -ENOMEM;
   2e336:	f06f 000b 	mvn.w	r0, #11
   2e33a:	e7df      	b.n	2e2fc <at_params_string_put+0xc>

0002e33c <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e33e:	4617      	mov	r7, r2
   2e340:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   2e342:	b910      	cbnz	r0, 2e34a <at_params_array_put+0xe>
		return -EINVAL;
   2e344:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   2e348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   2e34a:	6843      	ldr	r3, [r0, #4]
   2e34c:	2b00      	cmp	r3, #0
   2e34e:	d0f9      	beq.n	2e344 <at_params_array_put+0x8>
   2e350:	2a00      	cmp	r2, #0
   2e352:	d0f7      	beq.n	2e344 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2e354:	f7ea fc02 	bl	18b5c <at_params_get>
	if (param == NULL) {
   2e358:	4604      	mov	r4, r0
   2e35a:	2800      	cmp	r0, #0
   2e35c:	d0f2      	beq.n	2e344 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   2e35e:	4628      	mov	r0, r5
   2e360:	f7f7 fa90 	bl	25884 <k_malloc>
	if (param_value == NULL) {
   2e364:	4606      	mov	r6, r0
   2e366:	b160      	cbz	r0, 2e382 <at_params_array_put+0x46>
   2e368:	462a      	mov	r2, r5
   2e36a:	4639      	mov	r1, r7
   2e36c:	f7de fbee 	bl	cb4c <memcpy>
	at_param_clear(param);
   2e370:	4620      	mov	r0, r4
   2e372:	f7ea fc3d 	bl	18bf0 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   2e376:	2304      	movs	r3, #4
	return 0;
   2e378:	2000      	movs	r0, #0
	param->size = array_len;
   2e37a:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2e37c:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   2e37e:	60a6      	str	r6, [r4, #8]
	return 0;
   2e380:	e7e2      	b.n	2e348 <at_params_array_put+0xc>
		return -ENOMEM;
   2e382:	f06f 000b 	mvn.w	r0, #11
   2e386:	e7df      	b.n	2e348 <at_params_array_put+0xc>

0002e388 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   2e388:	b510      	push	{r4, lr}
   2e38a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2e38c:	b910      	cbnz	r0, 2e394 <at_params_short_get+0xc>
		return -EINVAL;
   2e38e:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   2e392:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2e394:	6843      	ldr	r3, [r0, #4]
   2e396:	2b00      	cmp	r3, #0
   2e398:	d0f9      	beq.n	2e38e <at_params_short_get+0x6>
   2e39a:	2a00      	cmp	r2, #0
   2e39c:	d0f7      	beq.n	2e38e <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2e39e:	f7ea fbdd 	bl	18b5c <at_params_get>
	if (param == NULL) {
   2e3a2:	2800      	cmp	r0, #0
   2e3a4:	d0f3      	beq.n	2e38e <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   2e3a6:	7803      	ldrb	r3, [r0, #0]
   2e3a8:	2b01      	cmp	r3, #1
   2e3aa:	d1f0      	bne.n	2e38e <at_params_short_get+0x6>
	*value = (uint16_t)param->value.int_val;
   2e3ac:	6883      	ldr	r3, [r0, #8]
	return 0;
   2e3ae:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   2e3b0:	8023      	strh	r3, [r4, #0]
	return 0;
   2e3b2:	e7ee      	b.n	2e392 <at_params_short_get+0xa>

0002e3b4 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   2e3b4:	b510      	push	{r4, lr}
   2e3b6:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2e3b8:	b910      	cbnz	r0, 2e3c0 <at_params_int_get+0xc>
		return -EINVAL;
   2e3ba:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   2e3be:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2e3c0:	6843      	ldr	r3, [r0, #4]
   2e3c2:	2b00      	cmp	r3, #0
   2e3c4:	d0f9      	beq.n	2e3ba <at_params_int_get+0x6>
   2e3c6:	2a00      	cmp	r2, #0
   2e3c8:	d0f7      	beq.n	2e3ba <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2e3ca:	f7ea fbc7 	bl	18b5c <at_params_get>
	if (param == NULL) {
   2e3ce:	2800      	cmp	r0, #0
   2e3d0:	d0f3      	beq.n	2e3ba <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   2e3d2:	7803      	ldrb	r3, [r0, #0]
   2e3d4:	3b01      	subs	r3, #1
   2e3d6:	2b01      	cmp	r3, #1
   2e3d8:	d8ef      	bhi.n	2e3ba <at_params_int_get+0x6>
	*value = param->value.int_val;
   2e3da:	6883      	ldr	r3, [r0, #8]
	return 0;
   2e3dc:	2000      	movs	r0, #0
	*value = param->value.int_val;
   2e3de:	6023      	str	r3, [r4, #0]
	return 0;
   2e3e0:	e7ed      	b.n	2e3be <at_params_int_get+0xa>

0002e3e2 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2e3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e3e4:	4617      	mov	r7, r2
   2e3e6:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   2e3e8:	b910      	cbnz	r0, 2e3f0 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   2e3ea:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   2e3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   2e3f0:	6843      	ldr	r3, [r0, #4]
   2e3f2:	2b00      	cmp	r3, #0
   2e3f4:	d0f9      	beq.n	2e3ea <at_params_string_get+0x8>
   2e3f6:	2a00      	cmp	r2, #0
   2e3f8:	d0f7      	beq.n	2e3ea <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   2e3fa:	2c00      	cmp	r4, #0
   2e3fc:	d0f5      	beq.n	2e3ea <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   2e3fe:	f7ea fbad 	bl	18b5c <at_params_get>
	if (param == NULL) {
   2e402:	4606      	mov	r6, r0
   2e404:	2800      	cmp	r0, #0
   2e406:	d0f0      	beq.n	2e3ea <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   2e408:	7803      	ldrb	r3, [r0, #0]
   2e40a:	2b03      	cmp	r3, #3
   2e40c:	d1ed      	bne.n	2e3ea <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   2e40e:	f7ea fbc7 	bl	18ba0 <at_param_size>
	if (*len < param_len) {
   2e412:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   2e414:	4605      	mov	r5, r0
	if (*len < param_len) {
   2e416:	4283      	cmp	r3, r0
   2e418:	d307      	bcc.n	2e42a <at_params_string_get+0x48>
   2e41a:	4602      	mov	r2, r0
   2e41c:	68b1      	ldr	r1, [r6, #8]
   2e41e:	4638      	mov	r0, r7
   2e420:	f7de fb94 	bl	cb4c <memcpy>
	return 0;
   2e424:	2000      	movs	r0, #0
	*len = param_len;
   2e426:	6025      	str	r5, [r4, #0]
	return 0;
   2e428:	e7e1      	b.n	2e3ee <at_params_string_get+0xc>
		return -ENOMEM;
   2e42a:	f06f 000b 	mvn.w	r0, #11
   2e42e:	e7de      	b.n	2e3ee <at_params_string_get+0xc>

0002e430 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   2e430:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2e432:	4605      	mov	r5, r0
   2e434:	b180      	cbz	r0, 2e458 <at_params_valid_count_get+0x28>
   2e436:	6843      	ldr	r3, [r0, #4]
   2e438:	b173      	cbz	r3, 2e458 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   2e43a:	2100      	movs	r1, #0
   2e43c:	f7ea fb8e 	bl	18b5c <at_params_get>
	size_t valid_i = 0;
   2e440:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   2e442:	b108      	cbz	r0, 2e448 <at_params_valid_count_get+0x18>
   2e444:	7803      	ldrb	r3, [r0, #0]
   2e446:	b90b      	cbnz	r3, 2e44c <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   2e448:	4620      	mov	r0, r4
   2e44a:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   2e44c:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   2e44e:	4621      	mov	r1, r4
   2e450:	4628      	mov	r0, r5
   2e452:	f7ea fb83 	bl	18b5c <at_params_get>
   2e456:	e7f4      	b.n	2e442 <at_params_valid_count_get+0x12>
		return -EINVAL;
   2e458:	f06f 0415 	mvn.w	r4, #21
   2e45c:	e7f4      	b.n	2e448 <at_params_valid_count_get+0x18>

0002e45e <response_is_valid>:
{
   2e45e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e460:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   2e462:	4610      	mov	r0, r2
{
   2e464:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   2e466:	9201      	str	r2, [sp, #4]
   2e468:	f7f8 f9bc 	bl	267e4 <strlen>
   2e46c:	42a0      	cmp	r0, r4
   2e46e:	d809      	bhi.n	2e484 <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   2e470:	4622      	mov	r2, r4
   2e472:	4628      	mov	r0, r5
   2e474:	9901      	ldr	r1, [sp, #4]
   2e476:	f7f7 fd77 	bl	25f68 <memcmp>
	if ((response_len < strlen(check)) ||
   2e47a:	fab0 f080 	clz	r0, r0
   2e47e:	0940      	lsrs	r0, r0, #5
}
   2e480:	b003      	add	sp, #12
   2e482:	bd30      	pop	{r4, r5, pc}
		return false;
   2e484:	2000      	movs	r0, #0
   2e486:	e7fb      	b.n	2e480 <response_is_valid+0x22>

0002e488 <lte_lc_connect>:
	return w_lte_lc_connect(true);
   2e488:	2001      	movs	r0, #1
   2e48a:	f7ea bd11 	b.w	18eb0 <w_lte_lc_connect>

0002e48e <lte_lc_init_and_connect>:
{
   2e48e:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   2e490:	f7ea fe48 	bl	19124 <w_lte_lc_init>
	if (ret) {
   2e494:	b920      	cbnz	r0, 2e4a0 <lte_lc_init_and_connect+0x12>
}
   2e496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   2e49a:	2001      	movs	r0, #1
   2e49c:	f7ea bd08 	b.w	18eb0 <w_lte_lc_connect>
}
   2e4a0:	bd08      	pop	{r3, pc}

0002e4a2 <date_time_handler>:
}
   2e4a2:	4770      	bx	lr

0002e4a4 <k_uptime_get>:
{
   2e4a4:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2e4a6:	f000 f943 	bl	2e730 <z_impl_k_uptime_ticks>
   2e4aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2e4ae:	fba0 2304 	umull	r2, r3, r0, r4
   2e4b2:	fb04 3301 	mla	r3, r4, r1, r3
   2e4b6:	0bd0      	lsrs	r0, r2, #15
}
   2e4b8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2e4bc:	0bd9      	lsrs	r1, r3, #15
   2e4be:	bd10      	pop	{r4, pc}

0002e4c0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2e4c0:	4700      	bx	r0

0002e4c2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2e4c2:	f000 b8c6 	b.w	2e652 <z_impl_k_busy_wait>

0002e4c6 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2e4c6:	f7fe bb80 	b.w	2cbca <z_clock_idle_exit>

0002e4ca <k_heap_init>:
{
   2e4ca:	b410      	push	{r4}
   2e4cc:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2e4d0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2e4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2e4d8:	f7e4 bbf2 	b.w	12cc0 <sys_heap_init>

0002e4dc <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   2e4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e4de:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   2e4e2:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   2e4e4:	6800      	ldr	r0, [r0, #0]
{
   2e4e6:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   2e4e8:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   2e4ea:	4632      	mov	r2, r6
   2e4ec:	463b      	mov	r3, r7
   2e4ee:	4621      	mov	r1, r4
   2e4f0:	f7f3 fffc 	bl	224ec <k_heap_alloc>
   2e4f4:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   2e4f6:	b144      	cbz	r4, 2e50a <k_mem_pool_alloc+0x2e>
   2e4f8:	b938      	cbnz	r0, 2e50a <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   2e4fa:	ea56 0307 	orrs.w	r3, r6, r7
   2e4fe:	bf0c      	ite	eq
   2e500:	f06f 000b 	mvneq.w	r0, #11
   2e504:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   2e508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2e50a:	2000      	movs	r0, #0
   2e50c:	e7fc      	b.n	2e508 <k_mem_pool_alloc+0x2c>

0002e50e <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2e50e:	e9d0 1000 	ldrd	r1, r0, [r0]
   2e512:	f7f4 b899 	b.w	22648 <k_heap_free>

0002e516 <k_mem_slab_init>:
{
   2e516:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2e518:	2400      	movs	r4, #0
   2e51a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2e51c:	ea41 0402 	orr.w	r4, r1, r2
   2e520:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2e524:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2e528:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2e52a:	d10c      	bne.n	2e546 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2e52c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e52e:	42a3      	cmp	r3, r4
   2e530:	d103      	bne.n	2e53a <k_mem_slab_init+0x24>
   2e532:	e9c0 0000 	strd	r0, r0, [r0]
}
   2e536:	2000      	movs	r0, #0
}
   2e538:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2e53a:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e53c:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   2e53e:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   2e540:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2e542:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2e544:	e7f3      	b.n	2e52e <k_mem_slab_init+0x18>
		return -EINVAL;
   2e546:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2e54a:	e7f5      	b.n	2e538 <k_mem_slab_init+0x22>

0002e54c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   2e54c:	2300      	movs	r3, #0
   2e54e:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   2e552:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2e556:	4618      	mov	r0, r3
   2e558:	4770      	bx	lr

0002e55a <z_queue_node_peek>:
{
   2e55a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2e55c:	4604      	mov	r4, r0
   2e55e:	b130      	cbz	r0, 2e56e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e560:	6802      	ldr	r2, [r0, #0]
   2e562:	0793      	lsls	r3, r2, #30
   2e564:	d003      	beq.n	2e56e <z_queue_node_peek+0x14>
		ret = anode->data;
   2e566:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2e568:	b109      	cbz	r1, 2e56e <z_queue_node_peek+0x14>
			k_free(anode);
   2e56a:	f000 f9ac 	bl	2e8c6 <k_free>
}
   2e56e:	4620      	mov	r0, r4
   2e570:	bd10      	pop	{r4, pc}

0002e572 <z_impl_k_queue_init>:
	list->head = NULL;
   2e572:	2300      	movs	r3, #0
	list->tail = NULL;
   2e574:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2e578:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2e57a:	f100 030c 	add.w	r3, r0, #12
   2e57e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2e582:	f100 0314 	add.w	r3, r0, #20
   2e586:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2e58a:	4770      	bx	lr

0002e58c <k_queue_append>:
{
   2e58c:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2e58e:	2300      	movs	r3, #0
   2e590:	6841      	ldr	r1, [r0, #4]
   2e592:	f7f4 bcc9 	b.w	22f28 <queue_insert>

0002e596 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2e596:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2e59a:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2e59e:	4298      	cmp	r0, r3
   2e5a0:	bfac      	ite	ge
   2e5a2:	2000      	movge	r0, #0
   2e5a4:	2001      	movlt	r0, #1
   2e5a6:	4770      	bx	lr

0002e5a8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2e5a8:	4603      	mov	r3, r0
   2e5aa:	b920      	cbnz	r0, 2e5b6 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2e5ac:	f3ef 8205 	mrs	r2, IPSR
   2e5b0:	b90a      	cbnz	r2, 2e5b6 <z_reschedule_irqlock+0xe>
   2e5b2:	f7e6 b829 	b.w	14608 <arch_swap>
   2e5b6:	f383 8811 	msr	BASEPRI, r3
   2e5ba:	f3bf 8f6f 	isb	sy
}
   2e5be:	4770      	bx	lr

0002e5c0 <z_reschedule_unlocked>:
	__asm__ volatile(
   2e5c0:	f04f 0320 	mov.w	r3, #32
   2e5c4:	f3ef 8011 	mrs	r0, BASEPRI
   2e5c8:	f383 8811 	msr	BASEPRI, r3
   2e5cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2e5d0:	f7ff bfea 	b.w	2e5a8 <z_reschedule_irqlock>

0002e5d4 <unpend_thread_no_timeout>:
{
   2e5d4:	b510      	push	{r4, lr}
   2e5d6:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2e5d8:	3008      	adds	r0, #8
   2e5da:	f7f4 fda7 	bl	2312c <pended_on.isra.0>
   2e5de:	4621      	mov	r1, r4
   2e5e0:	f7f4 ff80 	bl	234e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2e5e4:	7b63      	ldrb	r3, [r4, #13]
   2e5e6:	f023 0302 	bic.w	r3, r3, #2
   2e5ea:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2e5ec:	2300      	movs	r3, #0
   2e5ee:	60a3      	str	r3, [r4, #8]
}
   2e5f0:	bd10      	pop	{r4, pc}

0002e5f2 <z_priq_dumb_best>:
	return list->head == list;
   2e5f2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e5f4:	4298      	cmp	r0, r3
   2e5f6:	d004      	beq.n	2e602 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2e5f8:	2b00      	cmp	r3, #0
   2e5fa:	bf38      	it	cc
   2e5fc:	2300      	movcc	r3, #0
   2e5fe:	4618      	mov	r0, r3
   2e600:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2e602:	2000      	movs	r0, #0
}
   2e604:	4770      	bx	lr

0002e606 <z_unpend_all>:
{
   2e606:	b538      	push	{r3, r4, r5, lr}
   2e608:	4605      	mov	r5, r0
	int need_sched = 0;
   2e60a:	2000      	movs	r0, #0
	return list->head == list;
   2e60c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e60e:	42a5      	cmp	r5, r4
   2e610:	d000      	beq.n	2e614 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2e612:	b904      	cbnz	r4, 2e616 <z_unpend_all+0x10>
}
   2e614:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2e616:	4620      	mov	r0, r4
   2e618:	f7f4 ff92 	bl	23540 <z_unpend_thread>
		z_ready_thread(thread);
   2e61c:	4620      	mov	r0, r4
   2e61e:	f7f5 f8c9 	bl	237b4 <z_ready_thread>
		need_sched = 1;
   2e622:	2001      	movs	r0, #1
   2e624:	e7f2      	b.n	2e60c <z_unpend_all+0x6>

0002e626 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2e626:	b15a      	cbz	r2, 2e640 <z_impl_k_sem_init+0x1a>
   2e628:	428a      	cmp	r2, r1
   2e62a:	d309      	bcc.n	2e640 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2e62c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2e630:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2e634:	e9c0 0000 	strd	r0, r0, [r0]
   2e638:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2e63c:	2000      	movs	r0, #0
   2e63e:	4770      	bx	lr
		return -EINVAL;
   2e640:	f06f 0015 	mvn.w	r0, #21
}
   2e644:	4770      	bx	lr

0002e646 <k_is_in_isr>:
   2e646:	f3ef 8005 	mrs	r0, IPSR
}
   2e64a:	3800      	subs	r0, #0
   2e64c:	bf18      	it	ne
   2e64e:	2001      	movne	r0, #1
   2e650:	4770      	bx	lr

0002e652 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2e652:	f7e4 bbe5 	b.w	12e20 <arch_busy_wait>

0002e656 <z_impl_k_thread_name_set>:
}
   2e656:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2e65a:	4770      	bx	lr

0002e65c <k_thread_name_get>:
}
   2e65c:	2000      	movs	r0, #0
   2e65e:	4770      	bx	lr

0002e660 <k_work_submit_to_queue>:
{
   2e660:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e662:	f101 0308 	add.w	r3, r1, #8
   2e666:	e8d3 2fef 	ldaex	r2, [r3]
   2e66a:	f042 0c01 	orr.w	ip, r2, #1
   2e66e:	e8c3 cfee 	stlex	lr, ip, [r3]
   2e672:	f1be 0f00 	cmp.w	lr, #0
   2e676:	d1f6      	bne.n	2e666 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2e678:	07d3      	lsls	r3, r2, #31
   2e67a:	d403      	bmi.n	2e684 <k_work_submit_to_queue+0x24>
}
   2e67c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2e680:	f7ff bf84 	b.w	2e58c <k_queue_append>
}
   2e684:	f85d fb04 	ldr.w	pc, [sp], #4

0002e688 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2e688:	f1a0 0110 	sub.w	r1, r0, #16
   2e68c:	6980      	ldr	r0, [r0, #24]
   2e68e:	f7ff bfe7 	b.w	2e660 <k_work_submit_to_queue>

0002e692 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   2e692:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   2e694:	b570      	push	{r4, r5, r6, lr}
   2e696:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   2e698:	b913      	cbnz	r3, 2e6a0 <work_cancel+0xe>
		return -EALREADY;
   2e69a:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2e69e:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2e6a0:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e6a4:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   2e6a8:	07db      	lsls	r3, r3, #31
   2e6aa:	d52f      	bpl.n	2e70c <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2e6ac:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2e6ae:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2e6b0:	6813      	ldr	r3, [r2, #0]
   2e6b2:	b913      	cbnz	r3, 2e6ba <work_cancel+0x28>
			return -EINVAL;
   2e6b4:	f06f 0015 	mvn.w	r0, #21
   2e6b8:	e7f1      	b.n	2e69e <work_cancel+0xc>
   2e6ba:	429c      	cmp	r4, r3
   2e6bc:	d121      	bne.n	2e702 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   2e6be:	6823      	ldr	r3, [r4, #0]
   2e6c0:	6856      	ldr	r6, [r2, #4]
   2e6c2:	f023 0003 	bic.w	r0, r3, #3
   2e6c6:	b991      	cbnz	r1, 2e6ee <work_cancel+0x5c>
   2e6c8:	42b4      	cmp	r4, r6
	list->head = node;
   2e6ca:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2e6cc:	d100      	bne.n	2e6d0 <work_cancel+0x3e>
	list->tail = node;
   2e6ce:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e6d0:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e6d2:	f003 0303 	and.w	r3, r3, #3
   2e6d6:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2e6d8:	2000      	movs	r0, #0
   2e6da:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e6dc:	e8d5 3fef 	ldaex	r3, [r5]
   2e6e0:	f023 0301 	bic.w	r3, r3, #1
   2e6e4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2e6e8:	2a00      	cmp	r2, #0
   2e6ea:	d0d8      	beq.n	2e69e <work_cancel+0xc>
   2e6ec:	e7f6      	b.n	2e6dc <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e6ee:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2e6f0:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e6f2:	f003 0303 	and.w	r3, r3, #3
   2e6f6:	ea43 0300 	orr.w	r3, r3, r0
   2e6fa:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2e6fc:	bf08      	it	eq
   2e6fe:	6051      	streq	r1, [r2, #4]
}
   2e700:	e7e6      	b.n	2e6d0 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2e702:	6818      	ldr	r0, [r3, #0]
   2e704:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2e706:	f020 0303 	bic.w	r3, r0, #3
   2e70a:	e7d2      	b.n	2e6b2 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   2e70c:	3010      	adds	r0, #16
   2e70e:	f7f6 fad7 	bl	24cc0 <z_abort_timeout>
		if (err) {
   2e712:	2800      	cmp	r0, #0
   2e714:	d0e0      	beq.n	2e6d8 <work_cancel+0x46>
   2e716:	e7c0      	b.n	2e69a <work_cancel+0x8>

0002e718 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2e718:	2300      	movs	r3, #0
   2e71a:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   2e71e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2e722:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   2e724:	6283      	str	r3, [r0, #40]	; 0x28
}
   2e726:	4770      	bx	lr

0002e728 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2e728:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2e72a:	f7f6 fc79 	bl	25020 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2e72e:	bd08      	pop	{r3, pc}

0002e730 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2e730:	f7f6 bc76 	b.w	25020 <z_tick_get>

0002e734 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2e734:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e736:	1c4b      	adds	r3, r1, #1
   2e738:	bf08      	it	eq
   2e73a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2e73e:	4604      	mov	r4, r0
   2e740:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e742:	d013      	beq.n	2e76c <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2e744:	ea54 0105 	orrs.w	r1, r4, r5
   2e748:	d103      	bne.n	2e752 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   2e74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2e74e:	f7f6 bc67 	b.w	25020 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2e752:	f06f 0101 	mvn.w	r1, #1
   2e756:	1a0a      	subs	r2, r1, r0
   2e758:	f04f 31ff 	mov.w	r1, #4294967295
   2e75c:	eb61 0305 	sbc.w	r3, r1, r5
   2e760:	2a00      	cmp	r2, #0
   2e762:	f173 0100 	sbcs.w	r1, r3, #0
   2e766:	db02      	blt.n	2e76e <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2e768:	4610      	mov	r0, r2
   2e76a:	4619      	mov	r1, r3
}
   2e76c:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2e76e:	f7f6 fc57 	bl	25020 <z_tick_get>
   2e772:	2c01      	cmp	r4, #1
   2e774:	f175 0300 	sbcs.w	r3, r5, #0
   2e778:	bfbc      	itt	lt
   2e77a:	2401      	movlt	r4, #1
   2e77c:	2500      	movlt	r5, #0
   2e77e:	1820      	adds	r0, r4, r0
   2e780:	eb45 0101 	adc.w	r1, r5, r1
   2e784:	e7f2      	b.n	2e76c <z_timeout_end_calc+0x38>

0002e786 <k_timer_init>:
	timer->status = 0U;
   2e786:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2e788:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2e78c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2e790:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2e794:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2e798:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2e79a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2e79c:	4770      	bx	lr

0002e79e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2e79e:	b510      	push	{r4, lr}
   2e7a0:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2e7a2:	f7f6 fa8d 	bl	24cc0 <z_abort_timeout>

	if (inactive) {
   2e7a6:	b9d8      	cbnz	r0, 2e7e0 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2e7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e7aa:	b10b      	cbz	r3, 2e7b0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2e7ac:	4620      	mov	r0, r4
   2e7ae:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2e7b0:	f104 0018 	add.w	r0, r4, #24
   2e7b4:	2100      	movs	r1, #0
   2e7b6:	f7f4 fd47 	bl	23248 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2e7ba:	4604      	mov	r4, r0
   2e7bc:	b180      	cbz	r0, 2e7e0 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2e7be:	f7f4 fd8d 	bl	232dc <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2e7c2:	4620      	mov	r0, r4
   2e7c4:	f7f4 fff6 	bl	237b4 <z_ready_thread>
   2e7c8:	f04f 0320 	mov.w	r3, #32
   2e7cc:	f3ef 8011 	mrs	r0, BASEPRI
   2e7d0:	f383 8811 	msr	BASEPRI, r3
   2e7d4:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2e7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2e7dc:	f7ff bee4 	b.w	2e5a8 <z_reschedule_irqlock>
   2e7e0:	bd10      	pop	{r4, pc}

0002e7e2 <signal_poll_event>:
{
   2e7e2:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2e7e4:	6884      	ldr	r4, [r0, #8]
{
   2e7e6:	4605      	mov	r5, r0
   2e7e8:	460e      	mov	r6, r1
	if (poller) {
   2e7ea:	b19c      	cbz	r4, 2e814 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2e7ec:	68a3      	ldr	r3, [r4, #8]
   2e7ee:	b95b      	cbnz	r3, 2e808 <signal_poll_event+0x26>
	int retcode = 0;
   2e7f0:	4618      	mov	r0, r3
		poller->is_polling = false;
   2e7f2:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2e7f4:	2300      	movs	r3, #0
   2e7f6:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2e7f8:	68eb      	ldr	r3, [r5, #12]
   2e7fa:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2e7fe:	430e      	orrs	r6, r1
   2e800:	f366 3310 	bfi	r3, r6, #12, #5
   2e804:	60eb      	str	r3, [r5, #12]
	return retcode;
   2e806:	e004      	b.n	2e812 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2e808:	4798      	blx	r3
		poller->is_polling = false;
   2e80a:	2300      	movs	r3, #0
		if (retcode < 0) {
   2e80c:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2e80e:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2e810:	daf0      	bge.n	2e7f4 <signal_poll_event+0x12>
}
   2e812:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2e814:	4620      	mov	r0, r4
   2e816:	e7ed      	b.n	2e7f4 <signal_poll_event+0x12>

0002e818 <add_event>:
{
   2e818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e81a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2e81c:	e9d0 2300 	ldrd	r2, r3, [r0]
   2e820:	4290      	cmp	r0, r2
   2e822:	4604      	mov	r4, r0
   2e824:	460d      	mov	r5, r1
   2e826:	d106      	bne.n	2e836 <add_event+0x1e>
	node->prev = list->tail;
   2e828:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2e82a:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   2e82c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2e82e:	6863      	ldr	r3, [r4, #4]
   2e830:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2e832:	6065      	str	r5, [r4, #4]
}
   2e834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2e836:	2b00      	cmp	r3, #0
   2e838:	d0f6      	beq.n	2e828 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2e83a:	689b      	ldr	r3, [r3, #8]
   2e83c:	6879      	ldr	r1, [r7, #4]
   2e83e:	6858      	ldr	r0, [r3, #4]
   2e840:	f7ff fea9 	bl	2e596 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2e844:	2800      	cmp	r0, #0
   2e846:	d1ef      	bne.n	2e828 <add_event+0x10>
	return list->head == list;
   2e848:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e84a:	42b4      	cmp	r4, r6
   2e84c:	d0ec      	beq.n	2e828 <add_event+0x10>
   2e84e:	2e00      	cmp	r6, #0
   2e850:	bf38      	it	cc
   2e852:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2e854:	2e00      	cmp	r6, #0
   2e856:	d0e7      	beq.n	2e828 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2e858:	68b3      	ldr	r3, [r6, #8]
   2e85a:	6878      	ldr	r0, [r7, #4]
   2e85c:	6859      	ldr	r1, [r3, #4]
   2e85e:	f7ff fe9a 	bl	2e596 <z_is_t1_higher_prio_than_t2>
   2e862:	b128      	cbz	r0, 2e870 <add_event+0x58>
	node->prev = successor->prev;
   2e864:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2e866:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2e86a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2e86c:	6075      	str	r5, [r6, #4]
			return;
   2e86e:	e7e1      	b.n	2e834 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2e870:	6863      	ldr	r3, [r4, #4]
   2e872:	42b3      	cmp	r3, r6
   2e874:	d0d8      	beq.n	2e828 <add_event+0x10>
   2e876:	6836      	ldr	r6, [r6, #0]
   2e878:	e7ec      	b.n	2e854 <add_event+0x3c>

0002e87a <z_handle_obj_poll_events>:
{
   2e87a:	4603      	mov	r3, r0
	return list->head == list;
   2e87c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2e87e:	4283      	cmp	r3, r0
   2e880:	d008      	beq.n	2e894 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2e882:	e9d0 3200 	ldrd	r3, r2, [r0]
   2e886:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2e888:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2e88a:	2300      	movs	r3, #0
	node->prev = NULL;
   2e88c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2e890:	f7ff bfa7 	b.w	2e7e2 <signal_poll_event>
}
   2e894:	4770      	bx	lr

0002e896 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2e896:	2208      	movs	r2, #8
{
   2e898:	b530      	push	{r4, r5, lr}
   2e89a:	188a      	adds	r2, r1, r2
   2e89c:	b085      	sub	sp, #20
   2e89e:	d207      	bcs.n	2e8b0 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2e8a0:	2400      	movs	r4, #0
   2e8a2:	2500      	movs	r5, #0
   2e8a4:	a902      	add	r1, sp, #8
   2e8a6:	e9cd 4500 	strd	r4, r5, [sp]
   2e8aa:	f7ff fe17 	bl	2e4dc <k_mem_pool_alloc>
   2e8ae:	b110      	cbz	r0, 2e8b6 <k_mem_pool_malloc+0x20>
		return NULL;
   2e8b0:	2000      	movs	r0, #0
}
   2e8b2:	b005      	add	sp, #20
   2e8b4:	bd30      	pop	{r4, r5, pc}
   2e8b6:	9a02      	ldr	r2, [sp, #8]
   2e8b8:	ab02      	add	r3, sp, #8
   2e8ba:	cb03      	ldmia	r3!, {r0, r1}
   2e8bc:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2e8be:	9802      	ldr	r0, [sp, #8]
   2e8c0:	6051      	str	r1, [r2, #4]
   2e8c2:	3008      	adds	r0, #8
   2e8c4:	e7f5      	b.n	2e8b2 <k_mem_pool_malloc+0x1c>

0002e8c6 <k_free>:
	if (ptr != NULL) {
   2e8c6:	b110      	cbz	r0, 2e8ce <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2e8c8:	3808      	subs	r0, #8
   2e8ca:	f7ff be20 	b.w	2e50e <k_mem_pool_free_id>
}
   2e8ce:	4770      	bx	lr

0002e8d0 <k_calloc>:
{
   2e8d0:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   2e8d2:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   2e8d6:	b118      	cbz	r0, 2e8e0 <k_calloc+0x10>
   2e8d8:	fbb2 f0f0 	udiv	r0, r2, r0
   2e8dc:	4281      	cmp	r1, r0
   2e8de:	d10c      	bne.n	2e8fa <k_calloc+0x2a>
	ret = k_malloc(bounds);
   2e8e0:	4610      	mov	r0, r2
   2e8e2:	9201      	str	r2, [sp, #4]
   2e8e4:	f7f6 ffce 	bl	25884 <k_malloc>
	if (ret != NULL) {
   2e8e8:	4604      	mov	r4, r0
   2e8ea:	b118      	cbz	r0, 2e8f4 <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2e8ec:	2100      	movs	r1, #0
   2e8ee:	9a01      	ldr	r2, [sp, #4]
   2e8f0:	f7f7 fb68 	bl	25fc4 <memset>
}
   2e8f4:	4620      	mov	r0, r4
   2e8f6:	b002      	add	sp, #8
   2e8f8:	bd10      	pop	{r4, pc}
		return NULL;
   2e8fa:	2400      	movs	r4, #0
   2e8fc:	e7fa      	b.n	2e8f4 <k_calloc+0x24>

0002e8fe <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2e8fe:	4770      	bx	lr
