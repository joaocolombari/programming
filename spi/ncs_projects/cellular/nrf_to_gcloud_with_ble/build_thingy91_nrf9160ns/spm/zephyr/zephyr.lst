
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	20002798 	.word	0x20002798

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
}
   4:	00002419 	.word	0x00002419
   8:	00008fd9 	.word	0x00008fd9
   c:	00002479 	.word	0x00002479
  10:	00002479 	.word	0x00002479
  14:	00002479 	.word	0x00002479
  18:	00002479 	.word	0x00002479
  1c:	00002479 	.word	0x00002479
	...
  2c:	000021f9 	.word	0x000021f9
  30:	00002479 	.word	0x00002479
  34:	00000000 	.word	0x00000000
  38:	000021a1 	.word	0x000021a1
  3c:	00001871 	.word	0x00001871

00000040 <_irq_vector_table>:
  40:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  50:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  60:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  70:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  80:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  90:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  a0:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  b0:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  c0:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  d0:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  e0:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
  f0:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
 100:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
 110:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
 120:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
 130:	000023d9 000023d9 000023d9 000023d9     .#...#...#...#..
 140:	000023d9                                .#..

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00010000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295
     24c:	f04f 30ff 	movne.w	r0, #4294967295
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	9e08      	ldr	r6, [sp, #32]
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	468a      	mov	sl, r1
     278:	2b00      	cmp	r3, #0
     27a:	d17f      	bne.n	37c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfc>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d941      	bls.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0120 	rsb	r1, r2, #32
     28c:	fa05 f302 	lsl.w	r3, r5, r2
     290:	4097      	lsls	r7, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f101 	lsr.w	r1, r0, r1
     298:	ea41 0a03 	orr.w	sl, r1, r3
     29c:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2a4:	fa1f f987 	uxth.w	r9, r7
     2a8:	fbba fef8 	udiv	lr, sl, r8
     2ac:	fb08 a31e 	mls	r3, r8, lr, sl
     2b0:	fb0e f109 	mul.w	r1, lr, r9
     2b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     2b8:	4299      	cmp	r1, r3
     2ba:	d906      	bls.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     2bc:	18fb      	adds	r3, r7, r3
     2be:	d202      	bcs.n	2c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x46>
     2c0:	4299      	cmp	r1, r3
     2c2:	f200 8124 	bhi.w	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     2c6:	f10e 3eff 	add.w	lr, lr, #4294967295
     2ca:	1a59      	subs	r1, r3, r1
     2cc:	b2a3      	uxth	r3, r4
     2ce:	fbb1 f0f8 	udiv	r0, r1, r8
     2d2:	fb08 1110 	mls	r1, r8, r0, r1
     2d6:	fb00 f909 	mul.w	r9, r0, r9
     2da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2de:	45a1      	cmp	r9, r4
     2e0:	d905      	bls.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     2e2:	193c      	adds	r4, r7, r4
     2e4:	d202      	bcs.n	2ec <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6c>
     2e6:	45a1      	cmp	r9, r4
     2e8:	f200 810e 	bhi.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     2ec:	3801      	subs	r0, #1
     2ee:	eba4 0409 	sub.w	r4, r4, r9
     2f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2f6:	2100      	movs	r1, #0
     2f8:	b11e      	cbz	r6, 302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     2fa:	40d4      	lsrs	r4, r2
     2fc:	2300      	movs	r3, #0
     2fe:	e9c6 4300 	strd	r4, r3, [r6]
     302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     306:	b902      	cbnz	r2, 30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     308:	deff      	udf	#255	; 0xff
     30a:	fab2 f282 	clz	r2, r2
     30e:	2a00      	cmp	r2, #0
     310:	d14f      	bne.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     312:	1bcb      	subs	r3, r1, r7
     314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     318:	fa1f f887 	uxth.w	r8, r7
     31c:	2101      	movs	r1, #1
     31e:	0c25      	lsrs	r5, r4, #16
     320:	fbb3 fcfe 	udiv	ip, r3, lr
     324:	fb0e 301c 	mls	r0, lr, ip, r3
     328:	462b      	mov	r3, r5
     32a:	fb08 f90c 	mul.w	r9, r8, ip
     32e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     332:	45a9      	cmp	r9, r5
     334:	d90a      	bls.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     336:	197d      	adds	r5, r7, r5
     338:	bf2c      	ite	cs
     33a:	2301      	movcs	r3, #1
     33c:	2300      	movcc	r3, #0
     33e:	45a9      	cmp	r9, r5
     340:	d902      	bls.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     342:	2b00      	cmp	r3, #0
     344:	f000 80d9 	beq.w	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     348:	f10c 3cff 	add.w	ip, ip, #4294967295
     34c:	eba5 0509 	sub.w	r5, r5, r9
     350:	b2a3      	uxth	r3, r4
     352:	fbb5 f0fe 	udiv	r0, r5, lr
     356:	fb0e 5510 	mls	r5, lr, r0, r5
     35a:	fb08 f800 	mul.w	r8, r8, r0
     35e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     362:	45a0      	cmp	r8, r4
     364:	d905      	bls.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     366:	193c      	adds	r4, r7, r4
     368:	d202      	bcs.n	370 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf0>
     36a:	45a0      	cmp	r8, r4
     36c:	f200 80c9 	bhi.w	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     370:	3801      	subs	r0, #1
     372:	eba4 0408 	sub.w	r4, r4, r8
     376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     37a:	e7bd      	b.n	2f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x78>
     37c:	428b      	cmp	r3, r1
     37e:	d908      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     380:	2e00      	cmp	r6, #0
     382:	f000 80b1 	beq.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     386:	2100      	movs	r1, #0
     388:	e9c6 0500 	strd	r0, r5, [r6]
     38c:	4608      	mov	r0, r1
     38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     392:	fab3 f183 	clz	r1, r3
     396:	2900      	cmp	r1, #0
     398:	d146      	bne.n	428 <CONFIG_FLASH_SIZE+0x28>
     39a:	42ab      	cmp	r3, r5
     39c:	f0c0 80a7 	bcc.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a0:	4282      	cmp	r2, r0
     3a2:	f240 80a4 	bls.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a6:	4608      	mov	r0, r1
     3a8:	2e00      	cmp	r6, #0
     3aa:	d0aa      	beq.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3ac:	e9c6 4a00 	strd	r4, sl, [r6]
     3b0:	e7a7      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3b2:	f1c2 0020 	rsb	r0, r2, #32
     3b6:	4097      	lsls	r7, r2
     3b8:	fa01 f302 	lsl.w	r3, r1, r2
     3bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3c0:	40c1      	lsrs	r1, r0
     3c2:	fa24 f500 	lsr.w	r5, r4, r0
     3c6:	fa1f f887 	uxth.w	r8, r7
     3ca:	4094      	lsls	r4, r2
     3cc:	431d      	orrs	r5, r3
     3ce:	fbb1 f0fe 	udiv	r0, r1, lr
     3d2:	0c2b      	lsrs	r3, r5, #16
     3d4:	fb0e 1110 	mls	r1, lr, r0, r1
     3d8:	fb00 fc08 	mul.w	ip, r0, r8
     3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3e0:	459c      	cmp	ip, r3
     3e2:	d909      	bls.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	bf2c      	ite	cs
     3e8:	2101      	movcs	r1, #1
     3ea:	2100      	movcc	r1, #0
     3ec:	459c      	cmp	ip, r3
     3ee:	d902      	bls.n	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     3f0:	2900      	cmp	r1, #0
     3f2:	f000 8095 	beq.w	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     3f6:	3801      	subs	r0, #1
     3f8:	eba3 030c 	sub.w	r3, r3, ip
     3fc:	b2ad      	uxth	r5, r5
     3fe:	fbb3 f1fe 	udiv	r1, r3, lr
     402:	fb0e 3311 	mls	r3, lr, r1, r3
     406:	fb01 fc08 	mul.w	ip, r1, r8
     40a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     40e:	45ac      	cmp	ip, r5
     410:	d905      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     412:	197d      	adds	r5, r7, r5
     414:	d202      	bcs.n	41c <CONFIG_FLASH_SIZE+0x1c>
     416:	45ac      	cmp	ip, r5
     418:	f200 8089 	bhi.w	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
     41c:	3901      	subs	r1, #1
     41e:	eba5 030c 	sub.w	r3, r5, ip
     422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     426:	e77a      	b.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     428:	f1c1 0420 	rsb	r4, r1, #32
     42c:	408b      	lsls	r3, r1
     42e:	fa02 f701 	lsl.w	r7, r2, r1
     432:	fa05 fc01 	lsl.w	ip, r5, r1
     436:	40e2      	lsrs	r2, r4
     438:	fa20 f804 	lsr.w	r8, r0, r4
     43c:	40e5      	lsrs	r5, r4
     43e:	fa00 fe01 	lsl.w	lr, r0, r1
     442:	4313      	orrs	r3, r2
     444:	ea48 020c 	orr.w	r2, r8, ip
     448:	ea4f 4813 	mov.w	r8, r3, lsr #16
     44c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     450:	fa1f f983 	uxth.w	r9, r3
     454:	fbb5 faf8 	udiv	sl, r5, r8
     458:	fb08 551a 	mls	r5, r8, sl, r5
     45c:	fb0a f009 	mul.w	r0, sl, r9
     460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     464:	4560      	cmp	r0, ip
     466:	d90a      	bls.n	47e <CONFIG_FLASH_SIZE+0x7e>
     468:	eb13 0c0c 	adds.w	ip, r3, ip
     46c:	bf2c      	ite	cs
     46e:	2501      	movcs	r5, #1
     470:	2500      	movcc	r5, #0
     472:	4560      	cmp	r0, ip
     474:	d901      	bls.n	47a <CONFIG_FLASH_SIZE+0x7a>
     476:	2d00      	cmp	r5, #0
     478:	d055      	beq.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     47a:	f10a 3aff 	add.w	sl, sl, #4294967295
     47e:	ebac 0c00 	sub.w	ip, ip, r0
     482:	b292      	uxth	r2, r2
     484:	fbbc f0f8 	udiv	r0, ip, r8
     488:	fb08 cc10 	mls	ip, r8, r0, ip
     48c:	fb00 f909 	mul.w	r9, r0, r9
     490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     494:	45e1      	cmp	r9, ip
     496:	d905      	bls.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     498:	eb13 0c0c 	adds.w	ip, r3, ip
     49c:	d201      	bcs.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     49e:	45e1      	cmp	r9, ip
     4a0:	d83b      	bhi.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     4a2:	3801      	subs	r0, #1
     4a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4a8:	ebac 0c09 	sub.w	ip, ip, r9
     4ac:	fba0 8907 	umull	r8, r9, r0, r7
     4b0:	45cc      	cmp	ip, r9
     4b2:	4645      	mov	r5, r8
     4b4:	464a      	mov	r2, r9
     4b6:	d302      	bcc.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4b8:	d106      	bne.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4ba:	45c6      	cmp	lr, r8
     4bc:	d204      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4be:	3801      	subs	r0, #1
     4c0:	ebb8 0507 	subs.w	r5, r8, r7
     4c4:	eb69 0203 	sbc.w	r2, r9, r3
     4c8:	b32e      	cbz	r6, 516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     4ca:	ebbe 0305 	subs.w	r3, lr, r5
     4ce:	eb6c 0c02 	sbc.w	ip, ip, r2
     4d2:	fa23 f201 	lsr.w	r2, r3, r1
     4d6:	fa0c f404 	lsl.w	r4, ip, r4
     4da:	fa2c f301 	lsr.w	r3, ip, r1
     4de:	2100      	movs	r1, #0
     4e0:	4314      	orrs	r4, r2
     4e2:	e9c6 4300 	strd	r4, r3, [r6]
     4e6:	e70c      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4e8:	4631      	mov	r1, r6
     4ea:	4630      	mov	r0, r6
     4ec:	e709      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4ee:	1a84      	subs	r4, r0, r2
     4f0:	eb65 0303 	sbc.w	r3, r5, r3
     4f4:	2001      	movs	r0, #1
     4f6:	469a      	mov	sl, r3
     4f8:	e756      	b.n	3a8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x128>
     4fa:	f1ac 0c02 	sub.w	ip, ip, #2
     4fe:	443d      	add	r5, r7
     500:	e724      	b.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     502:	3802      	subs	r0, #2
     504:	443c      	add	r4, r7
     506:	e734      	b.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     508:	3802      	subs	r0, #2
     50a:	443c      	add	r4, r7
     50c:	e6ef      	b.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     50e:	f1ae 0e02 	sub.w	lr, lr, #2
     512:	443b      	add	r3, r7
     514:	e6d9      	b.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     516:	4631      	mov	r1, r6
     518:	e6f3      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     51a:	3802      	subs	r0, #2
     51c:	449c      	add	ip, r3
     51e:	e7c1      	b.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     520:	3802      	subs	r0, #2
     522:	443b      	add	r3, r7
     524:	e768      	b.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     526:	f1aa 0a02 	sub.w	sl, sl, #2
     52a:	449c      	add	ip, r3
     52c:	e7a7      	b.n	47e <CONFIG_FLASH_SIZE+0x7e>
     52e:	3902      	subs	r1, #2
     530:	443d      	add	r5, r7
     532:	e774      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <__gnu_cmse_nonsecure_call>:
     538:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	4627      	mov	r7, r4
     53e:	46a0      	mov	r8, r4
     540:	46a1      	mov	r9, r4
     542:	46a2      	mov	sl, r4
     544:	46a3      	mov	fp, r4
     546:	46a4      	mov	ip, r4
     548:	b0a2      	sub	sp, #136	; 0x88
     54a:	ec2d 0a00 	vlstm	sp
     54e:	f384 8800 	msr	CPSR_f, r4
     552:	4625      	mov	r5, r4
     554:	4626      	mov	r6, r4
     556:	47a4      	blxns	r4
     558:	ec3d 0a00 	vlldm	sp
     55c:	b022      	add	sp, #136	; 0x88
     55e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

00000564 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     564:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     566:	6844      	ldr	r4, [r0, #4]
     568:	4605      	mov	r5, r0

	return method & SYS_NOTIFY_METHOD_MASK;
     56a:	f004 0403 	and.w	r4, r4, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
     56e:	2c03      	cmp	r4, #3
	notify->result = res;
     570:	6081      	str	r1, [r0, #8]
	switch (method) {
     572:	d002      	beq.n	57a <sys_notify_finalize+0x16>
     574:	b12c      	cbz	r4, 582 <sys_notify_finalize+0x1e>
     576:	2000      	movs	r0, #0
     578:	e000      	b.n	57c <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     57a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     57c:	2300      	movs	r3, #0
     57e:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     580:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     582:	2245      	movs	r2, #69	; 0x45
     584:	4904      	ldr	r1, [pc, #16]	; (598 <sys_notify_finalize+0x34>)
     586:	4805      	ldr	r0, [pc, #20]	; (59c <sys_notify_finalize+0x38>)
     588:	f008 fb68 	bl	8c5c <printk>
     58c:	2145      	movs	r1, #69	; 0x45
     58e:	4802      	ldr	r0, [pc, #8]	; (598 <sys_notify_finalize+0x34>)
     590:	f008 fc30 	bl	8df4 <assert_post_action>
     594:	e7ef      	b.n	576 <sys_notify_finalize+0x12>
     596:	bf00      	nop
     598:	00009b6f 	.word	0x00009b6f
     59c:	00009b92 	.word	0x00009b92

000005a0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5a0:	680b      	ldr	r3, [r1, #0]
     5a2:	3301      	adds	r3, #1
     5a4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5a6:	4b01      	ldr	r3, [pc, #4]	; (5ac <char_out+0xc>)
     5a8:	681b      	ldr	r3, [r3, #0]
     5aa:	4718      	bx	r3
     5ac:	20000000 	.word	0x20000000

000005b0 <__printk_hook_install>:
	_char_out = fn;
     5b0:	4b01      	ldr	r3, [pc, #4]	; (5b8 <__printk_hook_install+0x8>)
     5b2:	6018      	str	r0, [r3, #0]
}
     5b4:	4770      	bx	lr
     5b6:	bf00      	nop
     5b8:	20000000 	.word	0x20000000

000005bc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     5bc:	b507      	push	{r0, r1, r2, lr}
     5be:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     5c0:	2100      	movs	r1, #0
{
     5c2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     5c4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     5c6:	4803      	ldr	r0, [pc, #12]	; (5d4 <vprintk+0x18>)
     5c8:	a901      	add	r1, sp, #4
     5ca:	f000 fa6d 	bl	aa8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     5ce:	b003      	add	sp, #12
     5d0:	f85d fb04 	ldr.w	pc, [sp], #4
     5d4:	000005a1 	.word	0x000005a1

000005d8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5dc:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
     5e0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     5e2:	f01a 0f08 	tst.w	sl, #8
{
     5e6:	4693      	mov	fp, r2
	if (processing) {
     5e8:	d01c      	beq.n	624 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
     5ea:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5ec:	bf0c      	ite	eq
     5ee:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5f2:	f04a 0a20 	orrne.w	sl, sl, #32
     5f6:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     5fa:	f104 0014 	add.w	r0, r4, #20
     5fe:	f004 f9c9 	bl	4994 <z_spin_unlock_valid>
     602:	b940      	cbnz	r0, 616 <process_event+0x3e>
     604:	49ba      	ldr	r1, [pc, #744]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     606:	48bb      	ldr	r0, [pc, #748]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
     608:	22ac      	movs	r2, #172	; 0xac
     60a:	f008 fb27 	bl	8c5c <printk>
     60e:	21ac      	movs	r1, #172	; 0xac
     610:	48b7      	ldr	r0, [pc, #732]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     612:	f008 fbef 	bl	8df4 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     616:	f38b 8811 	msr	BASEPRI, fp
     61a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     61e:	b003      	add	sp, #12
     620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     624:	4fb4      	ldr	r7, [pc, #720]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     626:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     62a:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
     62e:	2902      	cmp	r1, #2
     630:	d106      	bne.n	640 <process_event+0x68>
			evt = process_recheck(mgr);
     632:	4620      	mov	r0, r4
     634:	f008 fb1f 	bl	8c76 <process_recheck>
		if (evt == EVT_NOP) {
     638:	2800      	cmp	r0, #0
     63a:	d0de      	beq.n	5fa <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     63c:	2801      	cmp	r0, #1
     63e:	d165      	bne.n	70c <process_event+0x134>
			res = mgr->last_res;
     640:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     644:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     646:	f1b9 0f00 	cmp.w	r9, #0
     64a:	da19      	bge.n	680 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     64c:	2600      	movs	r6, #0
		*clients = mgr->clients;
     64e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     650:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     654:	e9c4 6600 	strd	r6, r6, [r4]
     658:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     65c:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     65e:	8ba3      	ldrh	r3, [r4, #28]
     660:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     664:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     666:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
     668:	d003      	beq.n	672 <process_event+0x9a>
		if (do_monitors
     66a:	68a2      	ldr	r2, [r4, #8]
     66c:	2a00      	cmp	r2, #0
     66e:	f040 80f1 	bne.w	854 <CONFIG_ISR_STACK_SIZE+0x54>
		    || !sys_slist_is_empty(&clients)
     672:	b915      	cbnz	r5, 67a <process_event+0xa2>
		    || (transit != NULL)) {
     674:	2e00      	cmp	r6, #0
     676:	f000 812b 	beq.w	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
     67a:	f04f 0a00 	mov.w	sl, #0
     67e:	e0eb      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     680:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     684:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     686:	2901      	cmp	r1, #1
     688:	d822      	bhi.n	6d0 <process_event+0xf8>
	list->head = NULL;
     68a:	2100      	movs	r1, #0
     68c:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     690:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     692:	6825      	ldr	r5, [r4, #0]
     694:	b29b      	uxth	r3, r3
	list->tail = NULL;
     696:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     69a:	d10c      	bne.n	6b6 <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     69c:	428d      	cmp	r5, r1
     69e:	462a      	mov	r2, r5
     6a0:	bf38      	it	cc
     6a2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6a4:	b12a      	cbz	r2, 6b2 <process_event+0xda>
				mgr->refs += 1U;
     6a6:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     6a8:	6812      	ldr	r2, [r2, #0]
     6aa:	3101      	adds	r1, #1
     6ac:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6ae:	2a00      	cmp	r2, #0
     6b0:	d1f8      	bne.n	6a4 <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b2:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
     6b6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6b8:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     6ba:	f008 fadc 	bl	8c76 <process_recheck>
     6be:	4606      	mov	r6, r0
     6c0:	2800      	cmp	r0, #0
     6c2:	d0cc      	beq.n	65e <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6c4:	8ba3      	ldrh	r3, [r4, #28]
     6c6:	f043 0320 	orr.w	r3, r3, #32
     6ca:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     6cc:	2600      	movs	r6, #0
     6ce:	e7c6      	b.n	65e <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
     6d0:	2a04      	cmp	r2, #4
     6d2:	d10d      	bne.n	6f0 <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d4:	f023 0307 	bic.w	r3, r3, #7
     6d8:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
     6da:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6dc:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     6de:	f008 faca 	bl	8c76 <process_recheck>
     6e2:	4605      	mov	r5, r0
     6e4:	b180      	cbz	r0, 708 <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6e6:	f042 0220 	orr.w	r2, r2, #32
     6ea:	2500      	movs	r5, #0
     6ec:	83a2      	strh	r2, [r4, #28]
     6ee:	e7ed      	b.n	6cc <process_event+0xf4>
		__ASSERT_NO_MSG(false);
     6f0:	f240 121b 	movw	r2, #283	; 0x11b
     6f4:	4639      	mov	r1, r7
     6f6:	4640      	mov	r0, r8
     6f8:	f008 fab0 	bl	8c5c <printk>
     6fc:	f240 111b 	movw	r1, #283	; 0x11b
     700:	4638      	mov	r0, r7
     702:	f008 fb77 	bl	8df4 <assert_post_action>
     706:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     708:	462e      	mov	r6, r5
     70a:	e7a8      	b.n	65e <process_event+0x86>
		} else if (evt == EVT_START) {
     70c:	2803      	cmp	r0, #3
     70e:	d131      	bne.n	774 <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     710:	f1ba 0f00 	cmp.w	sl, #0
     714:	d00a      	beq.n	72c <process_event+0x154>
     716:	4639      	mov	r1, r7
     718:	4640      	mov	r0, r8
     71a:	f44f 72ab 	mov.w	r2, #342	; 0x156
     71e:	f008 fa9d 	bl	8c5c <printk>
     722:	f44f 71ab 	mov.w	r1, #342	; 0x156
     726:	4638      	mov	r0, r7
     728:	f008 fb64 	bl	8df4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     72c:	6823      	ldr	r3, [r4, #0]
     72e:	b953      	cbnz	r3, 746 <process_event+0x16e>
     730:	4639      	mov	r1, r7
     732:	4640      	mov	r0, r8
     734:	f240 1257 	movw	r2, #343	; 0x157
     738:	f008 fa90 	bl	8c5c <printk>
     73c:	f240 1157 	movw	r1, #343	; 0x157
     740:	4638      	mov	r0, r7
     742:	f008 fb57 	bl	8df4 <assert_post_action>
			transit = mgr->transitions->start;
     746:	6923      	ldr	r3, [r4, #16]
     748:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     74a:	b956      	cbnz	r6, 762 <process_event+0x18a>
     74c:	4639      	mov	r1, r7
     74e:	4640      	mov	r0, r8
     750:	f44f 72ad 	mov.w	r2, #346	; 0x15a
     754:	f008 fa82 	bl	8c5c <printk>
     758:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     75c:	4638      	mov	r0, r7
     75e:	f008 fb49 	bl	8df4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     762:	8ba3      	ldrh	r3, [r4, #28]
     764:	f023 0307 	bic.w	r3, r3, #7
     768:	f043 0306 	orr.w	r3, r3, #6
}
     76c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     76e:	83a3      	strh	r3, [r4, #28]
		res = 0;
     770:	46a9      	mov	r9, r5
}
     772:	e774      	b.n	65e <process_event+0x86>
		} else if (evt == EVT_STOP) {
     774:	2804      	cmp	r0, #4
     776:	d12e      	bne.n	7d6 <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     778:	f1ba 0f02 	cmp.w	sl, #2
     77c:	d00a      	beq.n	794 <process_event+0x1bc>
     77e:	4639      	mov	r1, r7
     780:	4640      	mov	r0, r8
     782:	f240 125d 	movw	r2, #349	; 0x15d
     786:	f008 fa69 	bl	8c5c <printk>
     78a:	f240 115d 	movw	r1, #349	; 0x15d
     78e:	4638      	mov	r0, r7
     790:	f008 fb30 	bl	8df4 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     794:	8be3      	ldrh	r3, [r4, #30]
     796:	b153      	cbz	r3, 7ae <process_event+0x1d6>
     798:	4639      	mov	r1, r7
     79a:	4640      	mov	r0, r8
     79c:	f44f 72af 	mov.w	r2, #350	; 0x15e
     7a0:	f008 fa5c 	bl	8c5c <printk>
     7a4:	f44f 71af 	mov.w	r1, #350	; 0x15e
     7a8:	4638      	mov	r0, r7
     7aa:	f008 fb23 	bl	8df4 <assert_post_action>
			transit = mgr->transitions->stop;
     7ae:	6923      	ldr	r3, [r4, #16]
     7b0:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     7b2:	b956      	cbnz	r6, 7ca <process_event+0x1f2>
     7b4:	4639      	mov	r1, r7
     7b6:	4640      	mov	r0, r8
     7b8:	f240 1261 	movw	r2, #353	; 0x161
     7bc:	f008 fa4e 	bl	8c5c <printk>
     7c0:	f240 1161 	movw	r1, #353	; 0x161
     7c4:	4638      	mov	r0, r7
     7c6:	f008 fb15 	bl	8df4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7ca:	8ba3      	ldrh	r3, [r4, #28]
     7cc:	f023 0307 	bic.w	r3, r3, #7
     7d0:	f043 0304 	orr.w	r3, r3, #4
     7d4:	e7ca      	b.n	76c <process_event+0x194>
		} else if (evt == EVT_RESET) {
     7d6:	2805      	cmp	r0, #5
     7d8:	d12e      	bne.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     7da:	f1ba 0f01 	cmp.w	sl, #1
     7de:	d00a      	beq.n	7f6 <process_event+0x21e>
     7e0:	4639      	mov	r1, r7
     7e2:	4640      	mov	r0, r8
     7e4:	f44f 72b2 	mov.w	r2, #356	; 0x164
     7e8:	f008 fa38 	bl	8c5c <printk>
     7ec:	f44f 71b2 	mov.w	r1, #356	; 0x164
     7f0:	4638      	mov	r0, r7
     7f2:	f008 faff 	bl	8df4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     7f6:	6823      	ldr	r3, [r4, #0]
     7f8:	b953      	cbnz	r3, 810 <CONFIG_ISR_STACK_SIZE+0x10>
     7fa:	4639      	mov	r1, r7
     7fc:	4640      	mov	r0, r8
     7fe:	f240 1265 	movw	r2, #357	; 0x165
     802:	f008 fa2b 	bl	8c5c <printk>
     806:	f240 1165 	movw	r1, #357	; 0x165
     80a:	4638      	mov	r0, r7
     80c:	f008 faf2 	bl	8df4 <assert_post_action>
			transit = mgr->transitions->reset;
     810:	6923      	ldr	r3, [r4, #16]
     812:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     814:	b956      	cbnz	r6, 82c <CONFIG_ISR_STACK_SIZE+0x2c>
     816:	4639      	mov	r1, r7
     818:	4640      	mov	r0, r8
     81a:	f44f 72b4 	mov.w	r2, #360	; 0x168
     81e:	f008 fa1d 	bl	8c5c <printk>
     822:	f44f 71b4 	mov.w	r1, #360	; 0x168
     826:	4638      	mov	r0, r7
     828:	f008 fae4 	bl	8df4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     82c:	8ba3      	ldrh	r3, [r4, #28]
     82e:	f023 0307 	bic.w	r3, r3, #7
     832:	f043 0305 	orr.w	r3, r3, #5
     836:	e799      	b.n	76c <process_event+0x194>
			__ASSERT_NO_MSG(false);
     838:	2500      	movs	r5, #0
     83a:	f240 126b 	movw	r2, #363	; 0x16b
     83e:	4639      	mov	r1, r7
     840:	4640      	mov	r0, r8
     842:	f008 fa0b 	bl	8c5c <printk>
     846:	f240 116b 	movw	r1, #363	; 0x16b
     84a:	4638      	mov	r0, r7
     84c:	f008 fad2 	bl	8df4 <assert_post_action>
		onoff_transition_fn transit = NULL;
     850:	462e      	mov	r6, r5
     852:	e78d      	b.n	770 <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
     854:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     858:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     85c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     85e:	f104 0314 	add.w	r3, r4, #20
     862:	4618      	mov	r0, r3
     864:	9301      	str	r3, [sp, #4]
     866:	f004 f895 	bl	4994 <z_spin_unlock_valid>
     86a:	b940      	cbnz	r0, 87e <CONFIG_ISR_STACK_SIZE+0x7e>
     86c:	4640      	mov	r0, r8
     86e:	4920      	ldr	r1, [pc, #128]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     870:	22ac      	movs	r2, #172	; 0xac
     872:	f008 f9f3 	bl	8c5c <printk>
     876:	21ac      	movs	r1, #172	; 0xac
     878:	481d      	ldr	r0, [pc, #116]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     87a:	f008 fabb 	bl	8df4 <assert_post_action>
     87e:	f38b 8811 	msr	BASEPRI, fp
     882:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     886:	f1ba 0f00 	cmp.w	sl, #0
     88a:	d139      	bne.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
	while (!sys_slist_is_empty(list)) {
     88c:	2d00      	cmp	r5, #0
     88e:	d14c      	bne.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
			if (transit != NULL) {
     890:	b116      	cbz	r6, 898 <CONFIG_ISR_STACK_SIZE+0x98>
				transit(mgr, transition_complete);
     892:	4620      	mov	r0, r4
     894:	4919      	ldr	r1, [pc, #100]	; (8fc <CONFIG_ISR_STACK_SIZE+0xfc>)
     896:	47b0      	blx	r6
	__asm__ volatile(
     898:	f04f 0320 	mov.w	r3, #32
     89c:	f3ef 8b11 	mrs	fp, BASEPRI
     8a0:	f383 8811 	msr	BASEPRI, r3
     8a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     8a8:	9801      	ldr	r0, [sp, #4]
     8aa:	f004 f865 	bl	4978 <z_spin_lock_valid>
     8ae:	b940      	cbnz	r0, 8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
     8b0:	4640      	mov	r0, r8
     8b2:	490f      	ldr	r1, [pc, #60]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     8b4:	2281      	movs	r2, #129	; 0x81
     8b6:	f008 f9d1 	bl	8c5c <printk>
     8ba:	2181      	movs	r1, #129	; 0x81
     8bc:	480c      	ldr	r0, [pc, #48]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     8be:	f008 fa99 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
     8c2:	9801      	ldr	r0, [sp, #4]
     8c4:	f004 f874 	bl	49b0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     8c8:	8ba3      	ldrh	r3, [r4, #28]
     8ca:	f023 0308 	bic.w	r3, r3, #8
     8ce:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     8d0:	8ba3      	ldrh	r3, [r4, #28]
     8d2:	06da      	lsls	r2, r3, #27
     8d4:	d531      	bpl.n	93a <CONFIG_ISR_STACK_SIZE+0x13a>
			evt = EVT_COMPLETE;
     8d6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     8d8:	f023 0310 	bic.w	r3, r3, #16
     8dc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
     8de:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
     8e2:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
     8e6:	2900      	cmp	r1, #0
     8e8:	f47f aea1 	bne.w	62e <process_event+0x56>
out:
     8ec:	e685      	b.n	5fa <process_event+0x22>
     8ee:	bf00      	nop
     8f0:	00009bcc 	.word	0x00009bcc
     8f4:	00009b92 	.word	0x00009b92
     8f8:	00009baa 	.word	0x00009baa
     8fc:	0000094d 	.word	0x0000094d
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     900:	68a1      	ldr	r1, [r4, #8]
     902:	2900      	cmp	r1, #0
     904:	d0c2      	beq.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
	return node->next;
     906:	680b      	ldr	r3, [r1, #0]
     908:	2b00      	cmp	r3, #0
     90a:	bf38      	it	cc
     90c:	2300      	movcc	r3, #0
     90e:	469a      	mov	sl, r3
		mon->callback(mgr, mon, state, res);
     910:	4620      	mov	r0, r4
     912:	464b      	mov	r3, r9
     914:	f8d1 b004 	ldr.w	fp, [r1, #4]
     918:	9a00      	ldr	r2, [sp, #0]
     91a:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     91c:	f1ba 0f00 	cmp.w	sl, #0
     920:	d0b4      	beq.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     922:	4651      	mov	r1, sl
     924:	f8da 3000 	ldr.w	r3, [sl]
     928:	e7ee      	b.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     92a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     92c:	464b      	mov	r3, r9
     92e:	4620      	mov	r0, r4
     930:	9a00      	ldr	r2, [sp, #0]
     932:	682d      	ldr	r5, [r5, #0]
     934:	f008 f9bb 	bl	8cae <notify_one>
     938:	e7a8      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     93a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     93e:	bf1e      	ittt	ne
     940:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     944:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     946:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
     948:	e7c9      	b.n	8de <CONFIG_ISR_STACK_SIZE+0xde>
     94a:	bf00      	nop

0000094c <transition_complete>:
{
     94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     94e:	4604      	mov	r4, r0
     950:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     952:	f100 0614 	add.w	r6, r0, #20
     956:	f04f 0320 	mov.w	r3, #32
     95a:	f3ef 8711 	mrs	r7, BASEPRI
     95e:	f383 8811 	msr	BASEPRI, r3
     962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     966:	4630      	mov	r0, r6
     968:	f004 f806 	bl	4978 <z_spin_lock_valid>
     96c:	b940      	cbnz	r0, 980 <transition_complete+0x34>
     96e:	490a      	ldr	r1, [pc, #40]	; (998 <transition_complete+0x4c>)
     970:	480a      	ldr	r0, [pc, #40]	; (99c <transition_complete+0x50>)
     972:	2281      	movs	r2, #129	; 0x81
     974:	f008 f972 	bl	8c5c <printk>
     978:	2181      	movs	r1, #129	; 0x81
     97a:	4807      	ldr	r0, [pc, #28]	; (998 <transition_complete+0x4c>)
     97c:	f008 fa3a 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
     980:	4630      	mov	r0, r6
     982:	f004 f815 	bl	49b0 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
     986:	463a      	mov	r2, r7
     988:	4620      	mov	r0, r4
	mgr->last_res = res;
     98a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     98c:	2101      	movs	r1, #1
}
     98e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     992:	f7ff be21 	b.w	5d8 <process_event>
     996:	bf00      	nop
     998:	00009bcc 	.word	0x00009bcc
     99c:	00009b92 	.word	0x00009b92

000009a0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     9a4:	4604      	mov	r4, r0
     9a6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     9a8:	f008 f997 	bl	8cda <validate_args>

	if (rv < 0) {
     9ac:	1e05      	subs	r5, r0, #0
     9ae:	db54      	blt.n	a5a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     9b0:	f104 0914 	add.w	r9, r4, #20
     9b4:	f04f 0320 	mov.w	r3, #32
     9b8:	f3ef 8a11 	mrs	sl, BASEPRI
     9bc:	f383 8811 	msr	BASEPRI, r3
     9c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     9c4:	4648      	mov	r0, r9
     9c6:	f003 ffd7 	bl	4978 <z_spin_lock_valid>
     9ca:	b940      	cbnz	r0, 9de <onoff_request+0x3e>
     9cc:	4933      	ldr	r1, [pc, #204]	; (a9c <onoff_request+0xfc>)
     9ce:	4834      	ldr	r0, [pc, #208]	; (aa0 <onoff_request+0x100>)
     9d0:	2281      	movs	r2, #129	; 0x81
     9d2:	f008 f943 	bl	8c5c <printk>
     9d6:	2181      	movs	r1, #129	; 0x81
     9d8:	4830      	ldr	r0, [pc, #192]	; (a9c <onoff_request+0xfc>)
     9da:	f008 fa0b 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
     9de:	4648      	mov	r0, r9
     9e0:	f003 ffe6 	bl	49b0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     9e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     9e8:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9ea:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
     9ec:	428b      	cmp	r3, r1
     9ee:	f002 0607 	and.w	r6, r2, #7
     9f2:	d04a      	beq.n	a8a <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     9f4:	2e02      	cmp	r6, #2
     9f6:	d11f      	bne.n	a38 <onoff_request+0x98>
	rv = state;
     9f8:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
     9fa:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
     9fe:	3301      	adds	r3, #1
     a00:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     a02:	4648      	mov	r0, r9
     a04:	f003 ffc6 	bl	4994 <z_spin_unlock_valid>
     a08:	b940      	cbnz	r0, a1c <onoff_request+0x7c>
     a0a:	4924      	ldr	r1, [pc, #144]	; (a9c <onoff_request+0xfc>)
     a0c:	4824      	ldr	r0, [pc, #144]	; (aa0 <onoff_request+0x100>)
     a0e:	22ac      	movs	r2, #172	; 0xac
     a10:	f008 f924 	bl	8c5c <printk>
     a14:	21ac      	movs	r1, #172	; 0xac
     a16:	4821      	ldr	r0, [pc, #132]	; (a9c <onoff_request+0xfc>)
     a18:	f008 f9ec 	bl	8df4 <assert_post_action>
	__asm__ volatile(
     a1c:	f38a 8811 	msr	BASEPRI, sl
     a20:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
     a24:	f1b8 0f00 	cmp.w	r8, #0
     a28:	d017      	beq.n	a5a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
     a2a:	2300      	movs	r3, #0
     a2c:	4632      	mov	r2, r6
     a2e:	4639      	mov	r1, r7
     a30:	4620      	mov	r0, r4
     a32:	f008 f93c 	bl	8cae <notify_one>
     a36:	e010      	b.n	a5a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
     a38:	0793      	lsls	r3, r2, #30
     a3a:	d001      	beq.n	a40 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
     a3c:	2e06      	cmp	r6, #6
     a3e:	d10f      	bne.n	a60 <onoff_request+0xc0>
	parent->next = child;
     a40:	2300      	movs	r3, #0
     a42:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
     a44:	6863      	ldr	r3, [r4, #4]
     a46:	b9eb      	cbnz	r3, a84 <onoff_request+0xe4>
	list->head = node;
     a48:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
     a4c:	4635      	mov	r5, r6
     a4e:	b9f6      	cbnz	r6, a8e <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
     a50:	4652      	mov	r2, sl
     a52:	2102      	movs	r1, #2
     a54:	4620      	mov	r0, r4
     a56:	f7ff fdbf 	bl	5d8 <process_event>
		}
	}

	return rv;
}
     a5a:	4628      	mov	r0, r5
     a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
     a60:	2e05      	cmp	r6, #5
     a62:	d017      	beq.n	a94 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     a64:	2e01      	cmp	r6, #1
     a66:	d00a      	beq.n	a7e <onoff_request+0xde>
     a68:	490e      	ldr	r1, [pc, #56]	; (aa4 <onoff_request+0x104>)
     a6a:	480d      	ldr	r0, [pc, #52]	; (aa0 <onoff_request+0x100>)
     a6c:	f240 12c9 	movw	r2, #457	; 0x1c9
     a70:	f008 f8f4 	bl	8c5c <printk>
     a74:	f240 11c9 	movw	r1, #457	; 0x1c9
     a78:	480a      	ldr	r0, [pc, #40]	; (aa4 <onoff_request+0x104>)
     a7a:	f008 f9bb 	bl	8df4 <assert_post_action>
		rv = -EIO;
     a7e:	f06f 0504 	mvn.w	r5, #4
     a82:	e004      	b.n	a8e <onoff_request+0xee>
	parent->next = child;
     a84:	601f      	str	r7, [r3, #0]
	list->tail = node;
     a86:	6067      	str	r7, [r4, #4]
}
     a88:	e7e0      	b.n	a4c <onoff_request+0xac>
		rv = -EAGAIN;
     a8a:	f06f 050a 	mvn.w	r5, #10
     a8e:	f04f 0800 	mov.w	r8, #0
     a92:	e7b6      	b.n	a02 <onoff_request+0x62>
		rv = -ENOTSUP;
     a94:	f06f 0585 	mvn.w	r5, #133	; 0x85
     a98:	e7f9      	b.n	a8e <onoff_request+0xee>
     a9a:	bf00      	nop
     a9c:	00009bcc 	.word	0x00009bcc
     aa0:	00009b92 	.word	0x00009b92
     aa4:	00009baa 	.word	0x00009baa

00000aa8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     aac:	468b      	mov	fp, r1
     aae:	4692      	mov	sl, r2
     ab0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     ab2:	2500      	movs	r5, #0
{
     ab4:	b091      	sub	sp, #68	; 0x44
     ab6:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     ab8:	f89a 0000 	ldrb.w	r0, [sl]
     abc:	b908      	cbnz	r0, ac2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     abe:	4628      	mov	r0, r5
     ac0:	e35e      	b.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
		if (*fp != '%') {
     ac2:	2825      	cmp	r0, #37	; 0x25
     ac4:	f10a 0701 	add.w	r7, sl, #1
     ac8:	d007      	beq.n	ada <cbvprintf+0x32>
			OUTC('%');
     aca:	4659      	mov	r1, fp
     acc:	9b02      	ldr	r3, [sp, #8]
     ace:	4798      	blx	r3
     ad0:	2800      	cmp	r0, #0
     ad2:	f2c0 8355 	blt.w	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
     ad6:	3501      	adds	r5, #1
			break;
     ad8:	e210      	b.n	efc <cbvprintf+0x454>
		} state = {
     ada:	2218      	movs	r2, #24
     adc:	2100      	movs	r1, #0
     ade:	a80a      	add	r0, sp, #40	; 0x28
     ae0:	f008 fafd 	bl	90de <memset>
	if (*sp == '%') {
     ae4:	f89a 3001 	ldrb.w	r3, [sl, #1]
     ae8:	2b25      	cmp	r3, #37	; 0x25
     aea:	d078      	beq.n	bde <cbvprintf+0x136>
     aec:	2200      	movs	r2, #0
     aee:	4694      	mov	ip, r2
     af0:	4616      	mov	r6, r2
     af2:	4696      	mov	lr, r2
     af4:	4610      	mov	r0, r2
     af6:	4639      	mov	r1, r7
		switch (*sp) {
     af8:	f817 3b01 	ldrb.w	r3, [r7], #1
     afc:	2b2b      	cmp	r3, #43	; 0x2b
     afe:	f000 809d 	beq.w	c3c <cbvprintf+0x194>
     b02:	f200 8094 	bhi.w	c2e <cbvprintf+0x186>
     b06:	2b20      	cmp	r3, #32
     b08:	f000 809b 	beq.w	c42 <cbvprintf+0x19a>
     b0c:	2b23      	cmp	r3, #35	; 0x23
     b0e:	f000 809a 	beq.w	c46 <cbvprintf+0x19e>
     b12:	b128      	cbz	r0, b20 <cbvprintf+0x78>
     b14:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b18:	f040 0004 	orr.w	r0, r0, #4
     b1c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b20:	f1be 0f00 	cmp.w	lr, #0
     b24:	d005      	beq.n	b32 <cbvprintf+0x8a>
     b26:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b2a:	f040 0008 	orr.w	r0, r0, #8
     b2e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b32:	b12e      	cbz	r6, b40 <cbvprintf+0x98>
     b34:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b38:	f040 0010 	orr.w	r0, r0, #16
     b3c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b40:	f1bc 0f00 	cmp.w	ip, #0
     b44:	d005      	beq.n	b52 <cbvprintf+0xaa>
     b46:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b4a:	f040 0020 	orr.w	r0, r0, #32
     b4e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b52:	b12a      	cbz	r2, b60 <cbvprintf+0xb8>
     b54:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     b5c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     b60:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b64:	f002 0044 	and.w	r0, r2, #68	; 0x44
     b68:	2844      	cmp	r0, #68	; 0x44
     b6a:	d103      	bne.n	b74 <cbvprintf+0xcc>
		conv->flag_zero = false;
     b6c:	f36f 1286 	bfc	r2, #6, #1
     b70:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     b74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b78:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b7e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b82:	d17b      	bne.n	c7c <cbvprintf+0x1d4>
		conv->width_star = true;
     b84:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b88:	1c4b      	adds	r3, r1, #1
     b8a:	f042 0201 	orr.w	r2, r2, #1
     b8e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     b92:	781a      	ldrb	r2, [r3, #0]
     b94:	2a2e      	cmp	r2, #46	; 0x2e
     b96:	bf0c      	ite	eq
     b98:	2101      	moveq	r1, #1
     b9a:	2100      	movne	r1, #0
     b9c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ba0:	f361 0241 	bfi	r2, r1, #1, #1
     ba4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     ba8:	d174      	bne.n	c94 <cbvprintf+0x1ec>
	if (*sp == '*') {
     baa:	785a      	ldrb	r2, [r3, #1]
     bac:	2a2a      	cmp	r2, #42	; 0x2a
     bae:	d06a      	beq.n	c86 <cbvprintf+0x1de>
	size_t val = 0;
     bb0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     bb2:	260a      	movs	r6, #10
     bb4:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     bb6:	4618      	mov	r0, r3
     bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
     bbc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     bc0:	2f09      	cmp	r7, #9
     bc2:	f240 808e 	bls.w	ce2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     bc6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     bca:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     bcc:	f3c2 0040 	ubfx	r0, r2, #1, #1
     bd0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     bd4:	f361 0241 	bfi	r2, r1, #1, #1
     bd8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     bdc:	e05a      	b.n	c94 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     bde:	f10a 0702 	add.w	r7, sl, #2
     be2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     be6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bea:	07d9      	lsls	r1, r3, #31
     bec:	f140 8149 	bpl.w	e82 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     bf0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     bf4:	f1b9 0f00 	cmp.w	r9, #0
     bf8:	da07      	bge.n	c0a <cbvprintf+0x162>
				conv->flag_dash = true;
     bfa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     bfe:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     c02:	f042 0204 	orr.w	r2, r2, #4
     c06:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     c0a:	075a      	lsls	r2, r3, #29
     c0c:	f140 8142 	bpl.w	e94 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     c10:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     c14:	f1b8 0f00 	cmp.w	r8, #0
     c18:	f280 8141 	bge.w	e9e <cbvprintf+0x3f6>
				conv->prec_present = false;
     c1c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c20:	f36f 0341 	bfc	r3, #1, #1
     c24:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     c28:	f04f 38ff 	mov.w	r8, #4294967295
     c2c:	e137      	b.n	e9e <cbvprintf+0x3f6>
		switch (*sp) {
     c2e:	2b2d      	cmp	r3, #45	; 0x2d
     c30:	d00c      	beq.n	c4c <cbvprintf+0x1a4>
     c32:	2b30      	cmp	r3, #48	; 0x30
     c34:	f47f af6d 	bne.w	b12 <cbvprintf+0x6a>
			conv->flag_zero = true;
     c38:	2201      	movs	r2, #1
	} while (loop);
     c3a:	e75c      	b.n	af6 <cbvprintf+0x4e>
			conv->flag_plus = true;
     c3c:	f04f 0e01 	mov.w	lr, #1
     c40:	e759      	b.n	af6 <cbvprintf+0x4e>
			conv->flag_space = true;
     c42:	2601      	movs	r6, #1
     c44:	e757      	b.n	af6 <cbvprintf+0x4e>
			conv->flag_hash = true;
     c46:	f04f 0c01 	mov.w	ip, #1
     c4a:	e754      	b.n	af6 <cbvprintf+0x4e>
		switch (*sp) {
     c4c:	2001      	movs	r0, #1
     c4e:	e752      	b.n	af6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c50:	4633      	mov	r3, r6
     c52:	fb0c 0202 	mla	r2, ip, r2, r0
     c56:	3a30      	subs	r2, #48	; 0x30
     c58:	461e      	mov	r6, r3
     c5a:	f816 0b01 	ldrb.w	r0, [r6], #1
     c5e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c62:	2f09      	cmp	r7, #9
     c64:	d9f4      	bls.n	c50 <cbvprintf+0x1a8>
	if (sp != wp) {
     c66:	4299      	cmp	r1, r3
     c68:	d093      	beq.n	b92 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     c6a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c6e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     c70:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     c72:	f362 0141 	bfi	r1, r2, #1, #1
     c76:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     c7a:	e78a      	b.n	b92 <cbvprintf+0xea>
     c7c:	460b      	mov	r3, r1
	size_t val = 0;
     c7e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c80:	f04f 0c0a 	mov.w	ip, #10
     c84:	e7e8      	b.n	c58 <cbvprintf+0x1b0>
		conv->prec_star = true;
     c86:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     c8a:	3302      	adds	r3, #2
		conv->prec_star = true;
     c8c:	f042 0204 	orr.w	r2, r2, #4
     c90:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     c94:	461f      	mov	r7, r3
     c96:	f817 2b01 	ldrb.w	r2, [r7], #1
     c9a:	2a6c      	cmp	r2, #108	; 0x6c
     c9c:	d041      	beq.n	d22 <cbvprintf+0x27a>
     c9e:	d825      	bhi.n	cec <cbvprintf+0x244>
     ca0:	2a68      	cmp	r2, #104	; 0x68
     ca2:	d02b      	beq.n	cfc <cbvprintf+0x254>
     ca4:	2a6a      	cmp	r2, #106	; 0x6a
     ca6:	d046      	beq.n	d36 <cbvprintf+0x28e>
     ca8:	2a4c      	cmp	r2, #76	; 0x4c
     caa:	d04c      	beq.n	d46 <cbvprintf+0x29e>
     cac:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     cae:	f817 2b01 	ldrb.w	r2, [r7], #1
     cb2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     cb6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     cb8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     cbc:	f200 80d9 	bhi.w	e72 <cbvprintf+0x3ca>
     cc0:	2a57      	cmp	r2, #87	; 0x57
     cc2:	d84d      	bhi.n	d60 <cbvprintf+0x2b8>
     cc4:	2a41      	cmp	r2, #65	; 0x41
     cc6:	d003      	beq.n	cd0 <cbvprintf+0x228>
     cc8:	3a45      	subs	r2, #69	; 0x45
     cca:	2a02      	cmp	r2, #2
     ccc:	f200 80d1 	bhi.w	e72 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     cd0:	2204      	movs	r2, #4
     cd2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cd6:	f362 0302 	bfi	r3, r2, #0, #3
     cda:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     cde:	2301      	movs	r3, #1
			break;
     ce0:	e09e      	b.n	e20 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     ce2:	fb06 2101 	mla	r1, r6, r1, r2
     ce6:	4603      	mov	r3, r0
     ce8:	3930      	subs	r1, #48	; 0x30
     cea:	e764      	b.n	bb6 <cbvprintf+0x10e>
	switch (*sp) {
     cec:	2a74      	cmp	r2, #116	; 0x74
     cee:	d026      	beq.n	d3e <cbvprintf+0x296>
     cf0:	2a7a      	cmp	r2, #122	; 0x7a
     cf2:	d1db      	bne.n	cac <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     cf4:	2206      	movs	r2, #6
     cf6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cfa:	e00d      	b.n	d18 <cbvprintf+0x270>
		if (*++sp == 'h') {
     cfc:	785a      	ldrb	r2, [r3, #1]
     cfe:	2a68      	cmp	r2, #104	; 0x68
     d00:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d04:	d106      	bne.n	d14 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     d06:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d08:	f361 02c6 	bfi	r2, r1, #3, #4
     d0c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     d10:	1c9f      	adds	r7, r3, #2
     d12:	e7cc      	b.n	cae <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     d14:	4613      	mov	r3, r2
     d16:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     d18:	f362 03c6 	bfi	r3, r2, #3, #4
     d1c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     d20:	e7c5      	b.n	cae <cbvprintf+0x206>
		if (*++sp == 'l') {
     d22:	785a      	ldrb	r2, [r3, #1]
     d24:	2a6c      	cmp	r2, #108	; 0x6c
     d26:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d2a:	d101      	bne.n	d30 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     d2c:	2104      	movs	r1, #4
     d2e:	e7eb      	b.n	d08 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     d30:	4613      	mov	r3, r2
     d32:	2203      	movs	r2, #3
     d34:	e7f0      	b.n	d18 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     d36:	2205      	movs	r2, #5
     d38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d3c:	e7ec      	b.n	d18 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     d3e:	2207      	movs	r2, #7
     d40:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d44:	e7e8      	b.n	d18 <cbvprintf+0x270>
		conv->unsupported = true;
     d46:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d4a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d4e:	f023 0302 	bic.w	r3, r3, #2
     d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d56:	f043 0302 	orr.w	r3, r3, #2
     d5a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     d5e:	e7a6      	b.n	cae <cbvprintf+0x206>
     d60:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     d64:	2920      	cmp	r1, #32
     d66:	f200 8084 	bhi.w	e72 <cbvprintf+0x3ca>
     d6a:	a001      	add	r0, pc, #4	; (adr r0, d70 <cbvprintf+0x2c8>)
     d6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d70:	00000e35 	.word	0x00000e35
     d74:	00000e73 	.word	0x00000e73
     d78:	00000e73 	.word	0x00000e73
     d7c:	00000e73 	.word	0x00000e73
     d80:	00000e73 	.word	0x00000e73
     d84:	00000e73 	.word	0x00000e73
     d88:	00000e73 	.word	0x00000e73
     d8c:	00000e73 	.word	0x00000e73
     d90:	00000e73 	.word	0x00000e73
     d94:	00000cd1 	.word	0x00000cd1
     d98:	00000e73 	.word	0x00000e73
     d9c:	00000e35 	.word	0x00000e35
     da0:	00000df5 	.word	0x00000df5
     da4:	00000cd1 	.word	0x00000cd1
     da8:	00000cd1 	.word	0x00000cd1
     dac:	00000cd1 	.word	0x00000cd1
     db0:	00000e73 	.word	0x00000e73
     db4:	00000df5 	.word	0x00000df5
     db8:	00000e73 	.word	0x00000e73
     dbc:	00000e73 	.word	0x00000e73
     dc0:	00000e73 	.word	0x00000e73
     dc4:	00000e73 	.word	0x00000e73
     dc8:	00000e3d 	.word	0x00000e3d
     dcc:	00000e35 	.word	0x00000e35
     dd0:	00000e59 	.word	0x00000e59
     dd4:	00000e73 	.word	0x00000e73
     dd8:	00000e73 	.word	0x00000e73
     ddc:	00000e59 	.word	0x00000e59
     de0:	00000e73 	.word	0x00000e73
     de4:	00000e35 	.word	0x00000e35
     de8:	00000e73 	.word	0x00000e73
     dec:	00000e73 	.word	0x00000e73
     df0:	00000e35 	.word	0x00000e35
		conv->specifier_cat = SPECIFIER_SINT;
     df4:	2001      	movs	r0, #1
     df6:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     dfa:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     dfe:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e02:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     e04:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     e08:	bf02      	ittt	eq
     e0a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     e0e:	f041 0101 	orreq.w	r1, r1, #1
     e12:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     e16:	2a63      	cmp	r2, #99	; 0x63
     e18:	d131      	bne.n	e7e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e1a:	3b00      	subs	r3, #0
     e1c:	bf18      	it	ne
     e1e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     e20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e24:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e28:	430b      	orrs	r3, r1
     e2a:	f363 0241 	bfi	r2, r3, #1, #1
     e2e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e32:	e6d8      	b.n	be6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     e34:	2002      	movs	r0, #2
     e36:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e3a:	e7de      	b.n	dfa <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     e3c:	2103      	movs	r1, #3
     e3e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e42:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e46:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e4a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e4e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e50:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e54:	4143      	adcs	r3, r0
     e56:	e7e3      	b.n	e20 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     e58:	2103      	movs	r1, #3
     e5a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e5e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     e62:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     e66:	bf14      	ite	ne
     e68:	2301      	movne	r3, #1
     e6a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     e6c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e70:	e7d6      	b.n	e20 <cbvprintf+0x378>
		conv->invalid = true;
     e72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e76:	f043 0301 	orr.w	r3, r3, #1
     e7a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     e7e:	2300      	movs	r3, #0
     e80:	e7ce      	b.n	e20 <cbvprintf+0x378>
		} else if (conv->width_present) {
     e82:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     e86:	2a00      	cmp	r2, #0
		int width = -1;
     e88:	bfac      	ite	ge
     e8a:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     e8e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     e92:	e6ba      	b.n	c0a <cbvprintf+0x162>
		} else if (conv->prec_present) {
     e94:	079b      	lsls	r3, r3, #30
     e96:	f57f aec7 	bpl.w	c28 <cbvprintf+0x180>
			precision = conv->prec_value;
     e9a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     e9e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     ea0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     ea4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     ea8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     eac:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     eb0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     eb2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     eb6:	d136      	bne.n	f26 <cbvprintf+0x47e>
			switch (length_mod) {
     eb8:	1ed3      	subs	r3, r2, #3
     eba:	2b04      	cmp	r3, #4
     ebc:	d820      	bhi.n	f00 <cbvprintf+0x458>
     ebe:	e8df f003 	tbb	[pc, r3]
     ec2:	0703      	.short	0x0703
     ec4:	1f07      	.short	0x1f07
     ec6:	1f          	.byte	0x1f
     ec7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     ec8:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     ecc:	17c1      	asrs	r1, r0, #31
     ece:	e004      	b.n	eda <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
     ed0:	3407      	adds	r4, #7
     ed2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     ed6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     eda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ede:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ee2:	f013 0603 	ands.w	r6, r3, #3
     ee6:	d054      	beq.n	f92 <cbvprintf+0x4ea>
			OUTS(sp, fp);
     ee8:	463b      	mov	r3, r7
     eea:	4652      	mov	r2, sl
     eec:	4659      	mov	r1, fp
     eee:	9802      	ldr	r0, [sp, #8]
     ef0:	f007 ff6a 	bl	8dc8 <outs>
     ef4:	2800      	cmp	r0, #0
     ef6:	f2c0 8143 	blt.w	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
     efa:	4405      	add	r5, r0
			continue;
     efc:	46ba      	mov	sl, r7
     efe:	e5db      	b.n	ab8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f00:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     f04:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f06:	ea4f 71e0 	mov.w	r1, r0, asr #31
     f0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f0e:	d105      	bne.n	f1c <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
     f10:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     f14:	930a      	str	r3, [sp, #40]	; 0x28
     f16:	2300      	movs	r3, #0
     f18:	930b      	str	r3, [sp, #44]	; 0x2c
     f1a:	e7e0      	b.n	ede <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
     f1c:	2a02      	cmp	r2, #2
     f1e:	d1de      	bne.n	ede <cbvprintf+0x436>
				value->sint = (short)value->sint;
     f20:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     f24:	e7d2      	b.n	ecc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f26:	2b02      	cmp	r3, #2
     f28:	d123      	bne.n	f72 <cbvprintf+0x4ca>
			switch (length_mod) {
     f2a:	1ed3      	subs	r3, r2, #3
     f2c:	2b04      	cmp	r3, #4
     f2e:	d813      	bhi.n	f58 <cbvprintf+0x4b0>
     f30:	e8df f003 	tbb	[pc, r3]
     f34:	120a0a03 	.word	0x120a0a03
     f38:	12          	.byte	0x12
     f39:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     f3a:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     f3c:	6820      	ldr	r0, [r4, #0]
     f3e:	1d23      	adds	r3, r4, #4
     f40:	900a      	str	r0, [sp, #40]	; 0x28
     f42:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f44:	461c      	mov	r4, r3
     f46:	e7ca      	b.n	ede <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
     f48:	3407      	adds	r4, #7
     f4a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     f4e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     f52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     f56:	e7f5      	b.n	f44 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
     f58:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     f5c:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     f5e:	930a      	str	r3, [sp, #40]	; 0x28
     f60:	f04f 0300 	mov.w	r3, #0
     f64:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     f66:	d0d3      	beq.n	f10 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
     f68:	2a02      	cmp	r2, #2
     f6a:	d1b8      	bne.n	ede <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
     f6c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     f70:	e7d0      	b.n	f14 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
     f72:	2b04      	cmp	r3, #4
     f74:	d107      	bne.n	f86 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
     f76:	3407      	adds	r4, #7
     f78:	f024 0407 	bic.w	r4, r4, #7
     f7c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     f80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     f84:	e7ab      	b.n	ede <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
     f86:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     f88:	bf04      	itt	eq
     f8a:	f854 3b04 	ldreq.w	r3, [r4], #4
     f8e:	930a      	streq	r3, [sp, #40]	; 0x28
     f90:	e7a5      	b.n	ede <cbvprintf+0x436>
		switch (conv->specifier) {
     f92:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f96:	2878      	cmp	r0, #120	; 0x78
     f98:	d8b0      	bhi.n	efc <cbvprintf+0x454>
     f9a:	2862      	cmp	r0, #98	; 0x62
     f9c:	d822      	bhi.n	fe4 <cbvprintf+0x53c>
     f9e:	2825      	cmp	r0, #37	; 0x25
     fa0:	f43f ad93 	beq.w	aca <cbvprintf+0x22>
     fa4:	2858      	cmp	r0, #88	; 0x58
     fa6:	d1a9      	bne.n	efc <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
     fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     fac:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     fb0:	9300      	str	r3, [sp, #0]
     fb2:	aa0c      	add	r2, sp, #48	; 0x30
     fb4:	ab04      	add	r3, sp, #16
     fb6:	f007 febc 	bl	8d32 <encode_uint>
     fba:	4682      	mov	sl, r0
			if (precision >= 0) {
     fbc:	f1b8 0f00 	cmp.w	r8, #0
     fc0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     fc4:	db0c      	blt.n	fe0 <cbvprintf+0x538>
				conv->flag_zero = false;
     fc6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     fca:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     fce:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     fd2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     fd4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     fd8:	d902      	bls.n	fe0 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
     fda:	eba8 0303 	sub.w	r3, r8, r3
     fde:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     fe0:	4680      	mov	r8, r0
     fe2:	e03d      	b.n	1060 <CONFIG_MAIN_STACK_SIZE+0x60>
     fe4:	3863      	subs	r0, #99	; 0x63
     fe6:	2815      	cmp	r0, #21
     fe8:	d888      	bhi.n	efc <cbvprintf+0x454>
     fea:	a101      	add	r1, pc, #4	; (adr r1, ff0 <cbvprintf+0x548>)
     fec:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     ff0:	00001071 	.word	0x00001071
     ff4:	000010d5 	.word	0x000010d5
     ff8:	00000efd 	.word	0x00000efd
     ffc:	00000efd 	.word	0x00000efd
    1000:	00000efd 	.word	0x00000efd
    1004:	00000efd 	.word	0x00000efd
    1008:	000010d5 	.word	0x000010d5
    100c:	00000efd 	.word	0x00000efd
    1010:	00000efd 	.word	0x00000efd
    1014:	00000efd 	.word	0x00000efd
    1018:	00000efd 	.word	0x00000efd
    101c:	00001133 	.word	0x00001133
    1020:	00001101 	.word	0x00001101
    1024:	00001105 	.word	0x00001105
    1028:	00000efd 	.word	0x00000efd
    102c:	00000efd 	.word	0x00000efd
    1030:	00001049 	.word	0x00001049
    1034:	00000efd 	.word	0x00000efd
    1038:	00001101 	.word	0x00001101
    103c:	00000efd 	.word	0x00000efd
    1040:	00000efd 	.word	0x00000efd
    1044:	00001101 	.word	0x00001101
			if (precision >= 0) {
    1048:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    104c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1050:	db0a      	blt.n	1068 <CONFIG_MAIN_STACK_SIZE+0x68>
				len = strnlen(bps, precision);
    1052:	4641      	mov	r1, r8
    1054:	4650      	mov	r0, sl
    1056:	f007 ffdb 	bl	9010 <strnlen>
		char sign = 0;
    105a:	2600      	movs	r6, #0
			bpe = bps + len;
    105c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    1060:	f1ba 0f00 	cmp.w	sl, #0
    1064:	d10c      	bne.n	1080 <CONFIG_MAIN_STACK_SIZE+0x80>
    1066:	e749      	b.n	efc <cbvprintf+0x454>
				len = strlen(bps);
    1068:	4650      	mov	r0, sl
    106a:	f007 ffca 	bl	9002 <strlen>
    106e:	e7f4      	b.n	105a <CONFIG_MAIN_STACK_SIZE+0x5a>
			break;
    1070:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
    1074:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1078:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
    107c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1080:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1084:	b106      	cbz	r6, 1088 <CONFIG_MAIN_STACK_SIZE+0x88>
			nj_len += 1U;
    1086:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1088:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    108c:	06d0      	lsls	r0, r2, #27
    108e:	d56b      	bpl.n	1168 <CONFIG_MAIN_STACK_SIZE+0x168>
			nj_len += 2U;
    1090:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1092:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1094:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1096:	bf48      	it	mi
    1098:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    109a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    109c:	bf48      	it	mi
    109e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    10a0:	f1b9 0f00 	cmp.w	r9, #0
    10a4:	dd79      	ble.n	119a <CONFIG_MAIN_STACK_SIZE+0x19a>
			if (!conv->flag_dash) {
    10a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    10aa:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    10ae:	f3c2 0380 	ubfx	r3, r2, #2, #1
    10b2:	9303      	str	r3, [sp, #12]
    10b4:	0753      	lsls	r3, r2, #29
    10b6:	d470      	bmi.n	119a <CONFIG_MAIN_STACK_SIZE+0x19a>
				if (conv->flag_zero) {
    10b8:	0650      	lsls	r0, r2, #25
    10ba:	d564      	bpl.n	1186 <CONFIG_MAIN_STACK_SIZE+0x186>
					if (sign != 0) {
    10bc:	b146      	cbz	r6, 10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
						OUTC(sign);
    10be:	4659      	mov	r1, fp
    10c0:	4630      	mov	r0, r6
    10c2:	9b02      	ldr	r3, [sp, #8]
    10c4:	4798      	blx	r3
    10c6:	2800      	cmp	r0, #0
    10c8:	db5a      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
						sign = 0;
    10ca:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    10cc:	3501      	adds	r5, #1
						sign = 0;
    10ce:	461e      	mov	r6, r3
					pad = '0';
    10d0:	2330      	movs	r3, #48	; 0x30
    10d2:	e059      	b.n	1188 <CONFIG_MAIN_STACK_SIZE+0x188>
			if (conv->flag_plus) {
    10d4:	071e      	lsls	r6, r3, #28
    10d6:	d411      	bmi.n	10fc <CONFIG_MAIN_STACK_SIZE+0xfc>
				sign = ' ';
    10d8:	f013 0610 	ands.w	r6, r3, #16
    10dc:	bf18      	it	ne
    10de:	2620      	movne	r6, #32
			sint = value->sint;
    10e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    10e4:	2a00      	cmp	r2, #0
    10e6:	f173 0100 	sbcs.w	r1, r3, #0
    10ea:	f6bf af5d 	bge.w	fa8 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    10ee:	4252      	negs	r2, r2
    10f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    10f4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    10f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    10fa:	e755      	b.n	fa8 <cbvprintf+0x500>
				sign = '+';
    10fc:	262b      	movs	r6, #43	; 0x2b
    10fe:	e7ef      	b.n	10e0 <CONFIG_MAIN_STACK_SIZE+0xe0>
		switch (conv->specifier) {
    1100:	2600      	movs	r6, #0
    1102:	e751      	b.n	fa8 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1104:	980a      	ldr	r0, [sp, #40]	; 0x28
    1106:	b348      	cbz	r0, 115c <CONFIG_MAIN_STACK_SIZE+0x15c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1108:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    110c:	9300      	str	r3, [sp, #0]
    110e:	2100      	movs	r1, #0
    1110:	ab04      	add	r3, sp, #16
    1112:	aa0c      	add	r2, sp, #48	; 0x30
    1114:	f007 fe0d 	bl	8d32 <encode_uint>
				conv->altform_0c = true;
    1118:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    111c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    111e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1122:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1126:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    112a:	2600      	movs	r6, #0
				conv->altform_0c = true;
    112c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    1130:	e744      	b.n	fbc <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1134:	2a07      	cmp	r2, #7
    1136:	f63f aee1 	bhi.w	efc <cbvprintf+0x454>
    113a:	e8df f002 	tbb	[pc, r2]
    113e:	040d      	.short	0x040d
    1140:	08080d06 	.word	0x08080d06
    1144:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1146:	701d      	strb	r5, [r3, #0]
		break;
    1148:	e6d8      	b.n	efc <cbvprintf+0x454>
		*(short *)dp = (short)count;
    114a:	801d      	strh	r5, [r3, #0]
		break;
    114c:	e6d6      	b.n	efc <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    114e:	4628      	mov	r0, r5
    1150:	17e9      	asrs	r1, r5, #31
    1152:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1156:	e6d1      	b.n	efc <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1158:	601d      	str	r5, [r3, #0]
		break;
    115a:	e6cf      	b.n	efc <cbvprintf+0x454>
			bpe = bps + 5;
    115c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1224 <CONFIG_MAIN_STACK_SIZE+0x224>
    1160:	4606      	mov	r6, r0
			bps = "(nil)";
    1162:	f1a8 0a05 	sub.w	sl, r8, #5
    1166:	e78b      	b.n	1080 <CONFIG_MAIN_STACK_SIZE+0x80>
		} else if (conv->altform_0) {
    1168:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    116a:	bf48      	it	mi
    116c:	3301      	addmi	r3, #1
    116e:	e790      	b.n	1092 <CONFIG_MAIN_STACK_SIZE+0x92>
					OUTC(pad);
    1170:	4618      	mov	r0, r3
    1172:	9303      	str	r3, [sp, #12]
    1174:	4659      	mov	r1, fp
    1176:	9b02      	ldr	r3, [sp, #8]
    1178:	4798      	blx	r3
    117a:	2800      	cmp	r0, #0
    117c:	9b03      	ldr	r3, [sp, #12]
    117e:	da04      	bge.n	118a <CONFIG_MAIN_STACK_SIZE+0x18a>
#undef OUTS
#undef OUTC
}
    1180:	b011      	add	sp, #68	; 0x44
    1182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1186:	2320      	movs	r3, #32
    1188:	444d      	add	r5, r9
    118a:	464a      	mov	r2, r9
				while (width-- > 0) {
    118c:	2a00      	cmp	r2, #0
    118e:	eba5 0109 	sub.w	r1, r5, r9
    1192:	f109 39ff 	add.w	r9, r9, #4294967295
    1196:	dceb      	bgt.n	1170 <CONFIG_MAIN_STACK_SIZE+0x170>
    1198:	460d      	mov	r5, r1
		if (sign != 0) {
    119a:	b136      	cbz	r6, 11aa <CONFIG_MAIN_STACK_SIZE+0x1aa>
			OUTC(sign);
    119c:	4659      	mov	r1, fp
    119e:	4630      	mov	r0, r6
    11a0:	9b02      	ldr	r3, [sp, #8]
    11a2:	4798      	blx	r3
    11a4:	2800      	cmp	r0, #0
    11a6:	dbeb      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11a8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    11aa:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11ae:	06d9      	lsls	r1, r3, #27
    11b0:	d401      	bmi.n	11b6 <CONFIG_MAIN_STACK_SIZE+0x1b6>
    11b2:	071a      	lsls	r2, r3, #28
    11b4:	d506      	bpl.n	11c4 <CONFIG_MAIN_STACK_SIZE+0x1c4>
				OUTC('0');
    11b6:	4659      	mov	r1, fp
    11b8:	2030      	movs	r0, #48	; 0x30
    11ba:	9b02      	ldr	r3, [sp, #8]
    11bc:	4798      	blx	r3
    11be:	2800      	cmp	r0, #0
    11c0:	dbde      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11c2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    11c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11c8:	06db      	lsls	r3, r3, #27
    11ca:	d507      	bpl.n	11dc <CONFIG_MAIN_STACK_SIZE+0x1dc>
				OUTC(conv->specifier);
    11cc:	4659      	mov	r1, fp
    11ce:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    11d2:	9b02      	ldr	r3, [sp, #8]
    11d4:	4798      	blx	r3
    11d6:	2800      	cmp	r0, #0
    11d8:	dbd2      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11da:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    11dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    11de:	442e      	add	r6, r5
    11e0:	1b73      	subs	r3, r6, r5
    11e2:	2b00      	cmp	r3, #0
    11e4:	dc16      	bgt.n	1214 <CONFIG_MAIN_STACK_SIZE+0x214>
			OUTS(bps, bpe);
    11e6:	4643      	mov	r3, r8
    11e8:	4652      	mov	r2, sl
    11ea:	4659      	mov	r1, fp
    11ec:	9802      	ldr	r0, [sp, #8]
    11ee:	f007 fdeb 	bl	8dc8 <outs>
    11f2:	2800      	cmp	r0, #0
    11f4:	dbc4      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11f6:	4405      	add	r5, r0
		while (width > 0) {
    11f8:	44a9      	add	r9, r5
    11fa:	eba9 0305 	sub.w	r3, r9, r5
    11fe:	2b00      	cmp	r3, #0
    1200:	f77f ae7c 	ble.w	efc <cbvprintf+0x454>
			OUTC(' ');
    1204:	4659      	mov	r1, fp
    1206:	2020      	movs	r0, #32
    1208:	9b02      	ldr	r3, [sp, #8]
    120a:	4798      	blx	r3
    120c:	2800      	cmp	r0, #0
    120e:	dbb7      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    1210:	3501      	adds	r5, #1
			--width;
    1212:	e7f2      	b.n	11fa <CONFIG_MAIN_STACK_SIZE+0x1fa>
				OUTC('0');
    1214:	4659      	mov	r1, fp
    1216:	2030      	movs	r0, #48	; 0x30
    1218:	9b02      	ldr	r3, [sp, #8]
    121a:	4798      	blx	r3
    121c:	2800      	cmp	r0, #0
    121e:	dbaf      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    1220:	3501      	adds	r5, #1
    1222:	e7dd      	b.n	11e0 <CONFIG_MAIN_STACK_SIZE+0x1e0>
    1224:	00009bf7 	.word	0x00009bf7

00001228 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1228:	4604      	mov	r4, r0
    122a:	b508      	push	{r3, lr}
	__asm__ volatile(
    122c:	f04f 0220 	mov.w	r2, #32
    1230:	f3ef 8311 	mrs	r3, BASEPRI
    1234:	f382 8811 	msr	BASEPRI, r2
    1238:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    123c:	f007 fe5f 	bl	8efe <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1240:	4620      	mov	r0, r4
    1242:	f001 fb93 	bl	296c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1246:	4803      	ldr	r0, [pc, #12]	; (1254 <sys_reboot+0x2c>)
    1248:	f007 fd08 	bl	8c5c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    124c:	f001 f85e 	bl	230c <arch_cpu_idle>
    1250:	e7fc      	b.n	124c <sys_reboot+0x24>
    1252:	bf00      	nop
    1254:	00009bf8 	.word	0x00009bf8

00001258 <nordicsemi_nrf91_init>:
    1258:	f04f 0220 	mov.w	r2, #32
    125c:	f3ef 8311 	mrs	r3, BASEPRI
    1260:	f382 8811 	msr	BASEPRI, r2
    1264:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1268:	2101      	movs	r1, #1
    126a:	4a04      	ldr	r2, [pc, #16]	; (127c <nordicsemi_nrf91_init+0x24>)
    126c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1270:	f383 8811 	msr	BASEPRI, r3
    1274:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1278:	2000      	movs	r0, #0
    127a:	4770      	bx	lr
    127c:	50039000 	.word	0x50039000

00001280 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1280:	b120      	cbz	r0, 128c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1282:	4b03      	ldr	r3, [pc, #12]	; (1290 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1284:	0180      	lsls	r0, r0, #6
    1286:	f043 0301 	orr.w	r3, r3, #1
    128a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    128c:	4770      	bx	lr
    128e:	bf00      	nop
    1290:	000097d0 	.word	0x000097d0

00001294 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
    1294:	b084      	sub	sp, #16
    1296:	ab04      	add	r3, sp, #16
    1298:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    129c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    12a0:	2b06      	cmp	r3, #6
    12a2:	d107      	bne.n	12b4 <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    12a4:	2201      	movs	r2, #1
    12a6:	4b04      	ldr	r3, [pc, #16]	; (12b8 <pm_power_state_set+0x24>)
    12a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12ac:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    12b0:	bf20      	wfe
    while (true)
    12b2:	e7fd      	b.n	12b0 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    12b4:	b004      	add	sp, #16
    12b6:	4770      	bx	lr
    12b8:	50004000 	.word	0x50004000

000012bc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    12bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12be:	4605      	mov	r5, r0
	__asm__ volatile(
    12c0:	f04f 0320 	mov.w	r3, #32
    12c4:	f3ef 8611 	mrs	r6, BASEPRI
    12c8:	f383 8811 	msr	BASEPRI, r3
    12cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    12d0:	4819      	ldr	r0, [pc, #100]	; (1338 <pm_state_notify+0x7c>)
    12d2:	f003 fb51 	bl	4978 <z_spin_lock_valid>
    12d6:	b940      	cbnz	r0, 12ea <pm_state_notify+0x2e>
    12d8:	4918      	ldr	r1, [pc, #96]	; (133c <pm_state_notify+0x80>)
    12da:	4819      	ldr	r0, [pc, #100]	; (1340 <pm_state_notify+0x84>)
    12dc:	2281      	movs	r2, #129	; 0x81
    12de:	f007 fcbd 	bl	8c5c <printk>
    12e2:	2181      	movs	r1, #129	; 0x81
    12e4:	4815      	ldr	r0, [pc, #84]	; (133c <pm_state_notify+0x80>)
    12e6:	f007 fd85 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    12ea:	4813      	ldr	r0, [pc, #76]	; (1338 <pm_state_notify+0x7c>)
    12ec:	f003 fb60 	bl	49b0 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    12f0:	4b14      	ldr	r3, [pc, #80]	; (1344 <pm_state_notify+0x88>)
    12f2:	681c      	ldr	r4, [r3, #0]
    12f4:	2c00      	cmp	r4, #0
    12f6:	bf38      	it	cc
    12f8:	2400      	movcc	r4, #0
    12fa:	b15c      	cbz	r4, 1314 <pm_state_notify+0x58>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    12fc:	4f12      	ldr	r7, [pc, #72]	; (1348 <pm_state_notify+0x8c>)
			callback = notifier->state_exit;
    12fe:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1302:	2d00      	cmp	r5, #0
    1304:	bf08      	it	eq
    1306:	4613      	moveq	r3, r2
		if (callback) {
    1308:	b10b      	cbz	r3, 130e <pm_state_notify+0x52>
			callback(z_power_state.state);
    130a:	7838      	ldrb	r0, [r7, #0]
    130c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    130e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1310:	2c00      	cmp	r4, #0
    1312:	d1f4      	bne.n	12fe <pm_state_notify+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1314:	4808      	ldr	r0, [pc, #32]	; (1338 <pm_state_notify+0x7c>)
    1316:	f003 fb3d 	bl	4994 <z_spin_unlock_valid>
    131a:	b940      	cbnz	r0, 132e <pm_state_notify+0x72>
    131c:	4907      	ldr	r1, [pc, #28]	; (133c <pm_state_notify+0x80>)
    131e:	4808      	ldr	r0, [pc, #32]	; (1340 <pm_state_notify+0x84>)
    1320:	22ac      	movs	r2, #172	; 0xac
    1322:	f007 fc9b 	bl	8c5c <printk>
    1326:	21ac      	movs	r1, #172	; 0xac
    1328:	4804      	ldr	r0, [pc, #16]	; (133c <pm_state_notify+0x80>)
    132a:	f007 fd63 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    132e:	f386 8811 	msr	BASEPRI, r6
    1332:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1338:	200002e8 	.word	0x200002e8
    133c:	00009bcc 	.word	0x00009bcc
    1340:	00009b92 	.word	0x00009b92
    1344:	200002ec 	.word	0x200002ec
    1348:	200002f4 	.word	0x200002f4

0000134c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    134c:	4b08      	ldr	r3, [pc, #32]	; (1370 <pm_system_resume+0x24>)
{
    134e:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    1350:	681c      	ldr	r4, [r3, #0]
    1352:	b95c      	cbnz	r4, 136c <pm_system_resume+0x20>
		post_ops_done = 1;
    1354:	2201      	movs	r2, #1
    1356:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    1358:	4b06      	ldr	r3, [pc, #24]	; (1374 <pm_system_resume+0x28>)
    135a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    135e:	f007 fd53 	bl	8e08 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1362:	4620      	mov	r0, r4
	}
}
    1364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    1368:	f7ff bfa8 	b.w	12bc <pm_state_notify>
}
    136c:	bd10      	pop	{r4, pc}
    136e:	bf00      	nop
    1370:	20000004 	.word	0x20000004
    1374:	200002f4 	.word	0x200002f4

00001378 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    1378:	b5f0      	push	{r4, r5, r6, r7, lr}
    137a:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
    137c:	466e      	mov	r6, sp
    137e:	4c1d      	ldr	r4, [pc, #116]	; (13f4 <pm_system_suspend+0x7c>)
    1380:	4601      	mov	r1, r0
{
    1382:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    1384:	4630      	mov	r0, r6
    1386:	f007 fd57 	bl	8e38 <pm_policy_next_state>
    138a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    138e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    1392:	7820      	ldrb	r0, [r4, #0]
    1394:	b360      	cbz	r0, 13f0 <pm_system_suspend+0x78>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    1396:	2000      	movs	r0, #0
    1398:	4b17      	ldr	r3, [pc, #92]	; (13f8 <pm_system_suspend+0x80>)
    139a:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    139c:	1c6b      	adds	r3, r5, #1
    139e:	d019      	beq.n	13d4 <pm_system_suspend+0x5c>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
    13a0:	4291      	cmp	r1, r2
    13a2:	d208      	bcs.n	13b6 <pm_system_suspend+0x3e>
    13a4:	4915      	ldr	r1, [pc, #84]	; (13fc <pm_system_suspend+0x84>)
    13a6:	4816      	ldr	r0, [pc, #88]	; (1400 <pm_system_suspend+0x88>)
    13a8:	22bd      	movs	r2, #189	; 0xbd
    13aa:	f007 fc57 	bl	8c5c <printk>
    13ae:	21bd      	movs	r1, #189	; 0xbd
    13b0:	4812      	ldr	r0, [pc, #72]	; (13fc <pm_system_suspend+0x84>)
    13b2:	f007 fd1f 	bl	8df4 <assert_post_action>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    13b6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    13ba:	2100      	movs	r1, #0
    13bc:	68a7      	ldr	r7, [r4, #8]
    13be:	4811      	ldr	r0, [pc, #68]	; (1404 <pm_system_suspend+0x8c>)
    13c0:	2300      	movs	r3, #0
    13c2:	fbe6 0107 	umlal	r0, r1, r6, r7
    13c6:	4a10      	ldr	r2, [pc, #64]	; (1408 <pm_system_suspend+0x90>)
    13c8:	f7fe ff38 	bl	23c <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    13cc:	2101      	movs	r1, #1
    13ce:	1a28      	subs	r0, r5, r0
    13d0:	f004 fe12 	bl	5ff8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    13d4:	f003 fdb8 	bl	4f48 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    13d8:	2001      	movs	r0, #1
    13da:	f7ff ff6f 	bl	12bc <pm_state_notify>
	pm_power_state_set(z_power_state);
    13de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    13e2:	f7ff ff57 	bl	1294 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    13e6:	f7ff ffb1 	bl	134c <pm_system_resume>
	k_sched_unlock();
    13ea:	f003 ff95 	bl	5318 <k_sched_unlock>

	return z_power_state.state;
    13ee:	7820      	ldrb	r0, [r4, #0]
}
    13f0:	b005      	add	sp, #20
    13f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13f4:	200002f4 	.word	0x200002f4
    13f8:	20000004 	.word	0x20000004
    13fc:	00009c25 	.word	0x00009c25
    1400:	00009b92 	.word	0x00009b92
    1404:	000f423f 	.word	0x000f423f
    1408:	000f4240 	.word	0x000f4240

0000140c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    140c:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    140e:	4807      	ldr	r0, [pc, #28]	; (142c <uart_console_init+0x20>)
    1410:	f002 ffbc 	bl	438c <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    1414:	4c06      	ldr	r4, [pc, #24]	; (1430 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1416:	4b07      	ldr	r3, [pc, #28]	; (1434 <uart_console_init+0x28>)
    1418:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    141a:	4620      	mov	r0, r4
    141c:	f001 fd6c 	bl	2ef8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1420:	4620      	mov	r0, r4
    1422:	f7ff f8c5 	bl	5b0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    1426:	2000      	movs	r0, #0
    1428:	bd10      	pop	{r4, pc}
    142a:	bf00      	nop
    142c:	00009c50 	.word	0x00009c50
    1430:	00001439 	.word	0x00001439
    1434:	20000300 	.word	0x20000300

00001438 <console_out>:
	if ('\n' == c) {
    1438:	280a      	cmp	r0, #10
{
    143a:	b538      	push	{r3, r4, r5, lr}
    143c:	4604      	mov	r4, r0
    143e:	4d07      	ldr	r5, [pc, #28]	; (145c <console_out+0x24>)
	if ('\n' == c) {
    1440:	d104      	bne.n	144c <console_out+0x14>
    1442:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1444:	6883      	ldr	r3, [r0, #8]
    1446:	210d      	movs	r1, #13
    1448:	685b      	ldr	r3, [r3, #4]
    144a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    144c:	6828      	ldr	r0, [r5, #0]
    144e:	6883      	ldr	r3, [r0, #8]
    1450:	b2e1      	uxtb	r1, r4
    1452:	685b      	ldr	r3, [r3, #4]
    1454:	4798      	blx	r3
}
    1456:	4620      	mov	r0, r4
    1458:	bd38      	pop	{r3, r4, r5, pc}
    145a:	bf00      	nop
    145c:	20000300 	.word	0x20000300

00001460 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1464:	4c0e      	ldr	r4, [pc, #56]	; (14a0 <onoff_start+0x40>)
{
    1466:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
    1468:	1b05      	subs	r5, r0, r4
    146a:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    146e:	250c      	movs	r5, #12
    1470:	435d      	muls	r5, r3
    1472:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    1476:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    1478:	4420      	add	r0, r4
    147a:	2140      	movs	r1, #64	; 0x40
    147c:	f007 fce1 	bl	8e42 <set_starting_state>
	if (err < 0) {
    1480:	1e01      	subs	r1, r0, #0
    1482:	db08      	blt.n	1496 <onoff_start+0x36>
	subdata->cb = cb;
    1484:	4b07      	ldr	r3, [pc, #28]	; (14a4 <onoff_start+0x44>)
    1486:	442c      	add	r4, r5
	subdata->user_data = user_data;
    1488:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    148c:	4b06      	ldr	r3, [pc, #24]	; (14a8 <onoff_start+0x48>)
    148e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1494:	4718      	bx	r3
		notify(mgr, err);
    1496:	4638      	mov	r0, r7
    1498:	4633      	mov	r3, r6
}
    149a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    149e:	4718      	bx	r3
    14a0:	20000318 	.word	0x20000318
    14a4:	00008ea5 	.word	0x00008ea5
    14a8:	000097ec 	.word	0x000097ec

000014ac <get_status>:
{
    14ac:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    14ae:	b2cc      	uxtb	r4, r1
    14b0:	2c01      	cmp	r4, #1
{
    14b2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    14b4:	d908      	bls.n	14c8 <get_status+0x1c>
    14b6:	4908      	ldr	r1, [pc, #32]	; (14d8 <get_status+0x2c>)
    14b8:	4808      	ldr	r0, [pc, #32]	; (14dc <get_status+0x30>)
    14ba:	227e      	movs	r2, #126	; 0x7e
    14bc:	f007 fbce 	bl	8c5c <printk>
    14c0:	217e      	movs	r1, #126	; 0x7e
    14c2:	4805      	ldr	r0, [pc, #20]	; (14d8 <get_status+0x2c>)
    14c4:	f007 fc96 	bl	8df4 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    14c8:	210c      	movs	r1, #12
    14ca:	692b      	ldr	r3, [r5, #16]
    14cc:	fb04 3401 	mla	r4, r4, r1, r3
    14d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    14d2:	f000 0007 	and.w	r0, r0, #7
    14d6:	bd38      	pop	{r3, r4, r5, pc}
    14d8:	00009c57 	.word	0x00009c57
    14dc:	00009b92 	.word	0x00009b92

000014e0 <stop>:
{
    14e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14e2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    14e4:	2c01      	cmp	r4, #1
{
    14e6:	4605      	mov	r5, r0
    14e8:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    14ea:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    14ec:	d90a      	bls.n	1504 <stop+0x24>
    14ee:	4918      	ldr	r1, [pc, #96]	; (1550 <stop+0x70>)
    14f0:	4818      	ldr	r0, [pc, #96]	; (1554 <stop+0x74>)
    14f2:	f240 1253 	movw	r2, #339	; 0x153
    14f6:	f007 fbb1 	bl	8c5c <printk>
    14fa:	f240 1153 	movw	r1, #339	; 0x153
    14fe:	4814      	ldr	r0, [pc, #80]	; (1550 <stop+0x70>)
    1500:	f007 fc78 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    1504:	f04f 0320 	mov.w	r3, #32
    1508:	f3ef 8211 	mrs	r2, BASEPRI
    150c:	f383 8811 	msr	BASEPRI, r3
    1510:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    1514:	230c      	movs	r3, #12
    1516:	fb03 7104 	mla	r1, r3, r4, r7
    151a:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    151c:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    1520:	d001      	beq.n	1526 <stop+0x46>
    1522:	428e      	cmp	r6, r1
    1524:	d111      	bne.n	154a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    1526:	2101      	movs	r1, #1
	int err = 0;
    1528:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    152a:	fb03 7304 	mla	r3, r3, r4, r7
    152e:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
    1530:	f382 8811 	msr	BASEPRI, r2
    1534:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    1538:	b930      	cbnz	r0, 1548 <stop+0x68>
	get_sub_config(dev, type)->stop();
    153a:	230c      	movs	r3, #12
    153c:	6869      	ldr	r1, [r5, #4]
    153e:	fb03 1404 	mla	r4, r3, r4, r1
    1542:	6863      	ldr	r3, [r4, #4]
    1544:	4798      	blx	r3
	return 0;
    1546:	2000      	movs	r0, #0
}
    1548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    154a:	f04f 30ff 	mov.w	r0, #4294967295
    154e:	e7ef      	b.n	1530 <stop+0x50>
    1550:	00009c57 	.word	0x00009c57
    1554:	00009b92 	.word	0x00009b92

00001558 <onoff_stop>:
{
    1558:	b570      	push	{r4, r5, r6, lr}
    155a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    155c:	4906      	ldr	r1, [pc, #24]	; (1578 <onoff_stop+0x20>)
{
    155e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    1560:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1562:	1149      	asrs	r1, r1, #5
    1564:	2240      	movs	r2, #64	; 0x40
    1566:	4805      	ldr	r0, [pc, #20]	; (157c <onoff_stop+0x24>)
    1568:	f7ff ffba 	bl	14e0 <stop>
	notify(mgr, res);
    156c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    156e:	4601      	mov	r1, r0
	notify(mgr, res);
    1570:	4620      	mov	r0, r4
}
    1572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1576:	4718      	bx	r3
    1578:	20000318 	.word	0x20000318
    157c:	20000100 	.word	0x20000100

00001580 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    1580:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1582:	2200      	movs	r2, #0
    1584:	2101      	movs	r1, #1
{
    1586:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1588:	2005      	movs	r0, #5
    158a:	f000 fe63 	bl	2254 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    158e:	2005      	movs	r0, #5
    1590:	f000 fe42 	bl	2218 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1594:	480f      	ldr	r0, [pc, #60]	; (15d4 <clk_init+0x54>)
    1596:	f002 f961 	bl	385c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    159a:	4b0f      	ldr	r3, [pc, #60]	; (15d8 <clk_init+0x58>)
    159c:	4298      	cmp	r0, r3
    159e:	d115      	bne.n	15cc <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    15a0:	f002 f97c 	bl	389c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    15a4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    15a6:	490d      	ldr	r1, [pc, #52]	; (15dc <clk_init+0x5c>)
    15a8:	4630      	mov	r0, r6
    15aa:	f007 fba5 	bl	8cf8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    15ae:	2800      	cmp	r0, #0
    15b0:	db0b      	blt.n	15ca <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    15b2:	2501      	movs	r5, #1
    15b4:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    15b6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    15b8:	4908      	ldr	r1, [pc, #32]	; (15dc <clk_init+0x5c>)
    15ba:	f104 0020 	add.w	r0, r4, #32
    15be:	f007 fb9b 	bl	8cf8 <onoff_manager_init>
		if (err < 0) {
    15c2:	2800      	cmp	r0, #0
    15c4:	db01      	blt.n	15ca <clk_init+0x4a>
	}

	return 0;
    15c6:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    15c8:	6565      	str	r5, [r4, #84]	; 0x54
}
    15ca:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    15cc:	f06f 0004 	mvn.w	r0, #4
    15d0:	e7fb      	b.n	15ca <clk_init+0x4a>
    15d2:	bf00      	nop
    15d4:	00001615 	.word	0x00001615
    15d8:	0bad0000 	.word	0x0bad0000
    15dc:	00009804 	.word	0x00009804

000015e0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    15e0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    15e2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    15e4:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    15e6:	434b      	muls	r3, r1
    15e8:	4808      	ldr	r0, [pc, #32]	; (160c <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    15ea:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    15ec:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    15ee:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
    15f0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    15f4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    15f6:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    15f8:	f007 fc41 	bl	8e7e <set_on_state>
	if (callback) {
    15fc:	b12d      	cbz	r5, 160a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    15fe:	4632      	mov	r2, r6
    1600:	462b      	mov	r3, r5
}
    1602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1606:	4802      	ldr	r0, [pc, #8]	; (1610 <clkstarted_handle.constprop.0+0x30>)
    1608:	4718      	bx	r3
}
    160a:	bd70      	pop	{r4, r5, r6, pc}
    160c:	20000318 	.word	0x20000318
    1610:	20000100 	.word	0x20000100

00001614 <clock_event_handler>:
	switch (event) {
    1614:	2801      	cmp	r0, #1
{
    1616:	b508      	push	{r3, lr}
	switch (event) {
    1618:	d006      	beq.n	1628 <clock_event_handler+0x14>
    161a:	2803      	cmp	r0, #3
    161c:	d008      	beq.n	1630 <clock_event_handler+0x1c>
    161e:	b9a0      	cbnz	r0, 164a <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1620:	4b0f      	ldr	r3, [pc, #60]	; (1660 <clock_event_handler+0x4c>)
    1622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1624:	075b      	lsls	r3, r3, #29
    1626:	d119      	bne.n	165c <clock_event_handler+0x48>
}
    1628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    162c:	f7ff bfd8 	b.w	15e0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    1630:	490c      	ldr	r1, [pc, #48]	; (1664 <clock_event_handler+0x50>)
    1632:	f240 2266 	movw	r2, #614	; 0x266
    1636:	480c      	ldr	r0, [pc, #48]	; (1668 <clock_event_handler+0x54>)
    1638:	f007 fb10 	bl	8c5c <printk>
    163c:	f240 2166 	movw	r1, #614	; 0x266
}
    1640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    1644:	4807      	ldr	r0, [pc, #28]	; (1664 <clock_event_handler+0x50>)
    1646:	f007 bbd5 	b.w	8df4 <assert_post_action>
    164a:	4906      	ldr	r1, [pc, #24]	; (1664 <clock_event_handler+0x50>)
    164c:	f240 226a 	movw	r2, #618	; 0x26a
    1650:	4805      	ldr	r0, [pc, #20]	; (1668 <clock_event_handler+0x54>)
    1652:	f007 fb03 	bl	8c5c <printk>
    1656:	f240 216a 	movw	r1, #618	; 0x26a
    165a:	e7f1      	b.n	1640 <clock_event_handler+0x2c>
}
    165c:	bd08      	pop	{r3, pc}
    165e:	bf00      	nop
    1660:	20000318 	.word	0x20000318
    1664:	00009c57 	.word	0x00009c57
    1668:	00009b92 	.word	0x00009b92

0000166c <generic_hfclk_start>:
{
    166c:	b508      	push	{r3, lr}
	__asm__ volatile(
    166e:	f04f 0320 	mov.w	r3, #32
    1672:	f3ef 8111 	mrs	r1, BASEPRI
    1676:	f383 8811 	msr	BASEPRI, r3
    167a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    167e:	4a12      	ldr	r2, [pc, #72]	; (16c8 <generic_hfclk_start+0x5c>)
    1680:	6813      	ldr	r3, [r2, #0]
    1682:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1686:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    168a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    168c:	d00c      	beq.n	16a8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    168e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1692:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1696:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    169a:	f013 0301 	ands.w	r3, r3, #1
    169e:	d003      	beq.n	16a8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    16a0:	480a      	ldr	r0, [pc, #40]	; (16cc <generic_hfclk_start+0x60>)
    16a2:	f007 fbec 	bl	8e7e <set_on_state>
			already_started = true;
    16a6:	2301      	movs	r3, #1
	__asm__ volatile(
    16a8:	f381 8811 	msr	BASEPRI, r1
    16ac:	f3bf 8f6f 	isb	sy
	if (already_started) {
    16b0:	b123      	cbz	r3, 16bc <generic_hfclk_start+0x50>
}
    16b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    16b6:	2000      	movs	r0, #0
    16b8:	f7ff bf92 	b.w	15e0 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    16bc:	2001      	movs	r0, #1
}
    16be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    16c2:	f002 b909 	b.w	38d8 <nrfx_clock_start>
    16c6:	bf00      	nop
    16c8:	20000370 	.word	0x20000370
    16cc:	20000360 	.word	0x20000360

000016d0 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    16d0:	4b07      	ldr	r3, [pc, #28]	; (16f0 <generic_hfclk_stop+0x20>)
    16d2:	e8d3 2fef 	ldaex	r2, [r3]
    16d6:	f022 0102 	bic.w	r1, r2, #2
    16da:	e8c3 1fe0 	stlex	r0, r1, [r3]
    16de:	2800      	cmp	r0, #0
    16e0:	d1f7      	bne.n	16d2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    16e2:	07d3      	lsls	r3, r2, #31
    16e4:	d402      	bmi.n	16ec <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    16e6:	2001      	movs	r0, #1
    16e8:	f002 b946 	b.w	3978 <nrfx_clock_stop>
}
    16ec:	4770      	bx	lr
    16ee:	bf00      	nop
    16f0:	20000370 	.word	0x20000370

000016f4 <api_blocking_start>:
{
    16f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    16f6:	2200      	movs	r2, #0
    16f8:	2301      	movs	r3, #1
    16fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    16fe:	466b      	mov	r3, sp
    1700:	4a08      	ldr	r2, [pc, #32]	; (1724 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1702:	f8cd d000 	str.w	sp, [sp]
    1706:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    170a:	f007 fbdd 	bl	8ec8 <api_start>
	if (err < 0) {
    170e:	2800      	cmp	r0, #0
    1710:	db05      	blt.n	171e <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1716:	2300      	movs	r3, #0
    1718:	4668      	mov	r0, sp
    171a:	f003 fb0b 	bl	4d34 <z_impl_k_sem_take>
}
    171e:	b005      	add	sp, #20
    1720:	f85d fb04 	ldr.w	pc, [sp], #4
    1724:	00008ec3 	.word	0x00008ec3

00001728 <z_nrf_clock_control_lf_on>:
{
    1728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    172c:	2201      	movs	r2, #1
    172e:	4605      	mov	r5, r0
    1730:	4946      	ldr	r1, [pc, #280]	; (184c <z_nrf_clock_control_lf_on+0x124>)
    1732:	e8d1 3fef 	ldaex	r3, [r1]
    1736:	e8c1 2fe0 	stlex	r0, r2, [r1]
    173a:	2800      	cmp	r0, #0
    173c:	d1f9      	bne.n	1732 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    173e:	b99b      	cbnz	r3, 1768 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1740:	4943      	ldr	r1, [pc, #268]	; (1850 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    1742:	4844      	ldr	r0, [pc, #272]	; (1854 <z_nrf_clock_control_lf_on+0x12c>)
    1744:	604b      	str	r3, [r1, #4]
    1746:	60cb      	str	r3, [r1, #12]
    1748:	608a      	str	r2, [r1, #8]
    174a:	f7ff f929 	bl	9a0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    174e:	2800      	cmp	r0, #0
    1750:	da0a      	bge.n	1768 <z_nrf_clock_control_lf_on+0x40>
    1752:	4941      	ldr	r1, [pc, #260]	; (1858 <z_nrf_clock_control_lf_on+0x130>)
    1754:	4841      	ldr	r0, [pc, #260]	; (185c <z_nrf_clock_control_lf_on+0x134>)
    1756:	f240 2226 	movw	r2, #550	; 0x226
    175a:	f007 fa7f 	bl	8c5c <printk>
    175e:	f240 2126 	movw	r1, #550	; 0x226
    1762:	483d      	ldr	r0, [pc, #244]	; (1858 <z_nrf_clock_control_lf_on+0x130>)
    1764:	f007 fb46 	bl	8df4 <assert_post_action>
	switch (start_mode) {
    1768:	b3ad      	cbz	r5, 17d6 <z_nrf_clock_control_lf_on+0xae>
    176a:	1e6b      	subs	r3, r5, #1
    176c:	2b01      	cmp	r3, #1
    176e:	d859      	bhi.n	1824 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1770:	2d01      	cmp	r5, #1
    1772:	d107      	bne.n	1784 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1774:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1778:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    177c:	f003 0303 	and.w	r3, r3, #3
    1780:	2b02      	cmp	r3, #2
    1782:	d028      	beq.n	17d6 <z_nrf_clock_control_lf_on+0xae>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1784:	f007 fe36 	bl	93f4 <k_is_in_isr>
    1788:	4604      	mov	r4, r0
    178a:	b918      	cbnz	r0, 1794 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
    178c:	4b34      	ldr	r3, [pc, #208]	; (1860 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
    178e:	781b      	ldrb	r3, [r3, #0]
    1790:	2b00      	cmp	r3, #0
    1792:	d154      	bne.n	183e <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    1794:	f04f 0320 	mov.w	r3, #32
    1798:	f3ef 8611 	mrs	r6, BASEPRI
    179c:	f383 8811 	msr	BASEPRI, r3
    17a0:	f3bf 8f6f 	isb	sy
    17a4:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    17a6:	4f2f      	ldr	r7, [pc, #188]	; (1864 <z_nrf_clock_control_lf_on+0x13c>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17a8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1868 <z_nrf_clock_control_lf_on+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    17ac:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 186c <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    17b0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    17b4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    17b8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    17bc:	03d2      	lsls	r2, r2, #15
    17be:	d50c      	bpl.n	17da <z_nrf_clock_control_lf_on+0xb2>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    17c0:	f003 0303 	and.w	r3, r3, #3
    17c4:	2b02      	cmp	r3, #2
    17c6:	d001      	beq.n	17cc <z_nrf_clock_control_lf_on+0xa4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    17c8:	2d01      	cmp	r5, #1
    17ca:	d106      	bne.n	17da <z_nrf_clock_control_lf_on+0xb2>
	if (isr_mode) {
    17cc:	b324      	cbz	r4, 1818 <z_nrf_clock_control_lf_on+0xf0>
	__asm__ volatile(
    17ce:	f386 8811 	msr	BASEPRI, r6
    17d2:	f3bf 8f6f 	isb	sy
}
    17d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    17da:	b1c4      	cbz	r4, 180e <z_nrf_clock_control_lf_on+0xe6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    17dc:	4630      	mov	r0, r6
    17de:	f000 fda3 	bl	2328 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    17e2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    17e6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    17ea:	b2db      	uxtb	r3, r3
    17ec:	2b01      	cmp	r3, #1
    17ee:	d1df      	bne.n	17b0 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    17f0:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    17f2:	2900      	cmp	r1, #0
    17f4:	d0dc      	beq.n	17b0 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    17f6:	2100      	movs	r1, #0
    17f8:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    17fa:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    17fc:	2102      	movs	r1, #2
    17fe:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    1802:	2220      	movs	r2, #32
    1804:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1808:	f8c9 3000 	str.w	r3, [r9]
}
    180c:	e7d0      	b.n	17b0 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    180e:	2100      	movs	r1, #0
    1810:	2021      	movs	r0, #33	; 0x21
    1812:	f004 f991 	bl	5b38 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1816:	e7e4      	b.n	17e2 <z_nrf_clock_control_lf_on+0xba>
    p_reg->INTENSET = mask;
    1818:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    181c:	2202      	movs	r2, #2
    181e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1822:	e7d8      	b.n	17d6 <z_nrf_clock_control_lf_on+0xae>
		__ASSERT_NO_MSG(false);
    1824:	490c      	ldr	r1, [pc, #48]	; (1858 <z_nrf_clock_control_lf_on+0x130>)
    1826:	480d      	ldr	r0, [pc, #52]	; (185c <z_nrf_clock_control_lf_on+0x134>)
    1828:	f44f 720e 	mov.w	r2, #568	; 0x238
    182c:	f007 fa16 	bl	8c5c <printk>
}
    1830:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    1834:	f44f 710e 	mov.w	r1, #568	; 0x238
    1838:	4807      	ldr	r0, [pc, #28]	; (1858 <z_nrf_clock_control_lf_on+0x130>)
    183a:	f007 badb 	b.w	8df4 <assert_post_action>
    p_reg->INTENCLR = mask;
    183e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1842:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1844:	4606      	mov	r6, r0
    1846:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    184a:	e7ac      	b.n	17a6 <z_nrf_clock_control_lf_on+0x7e>
    184c:	20000374 	.word	0x20000374
    1850:	20000308 	.word	0x20000308
    1854:	20000338 	.word	0x20000338
    1858:	00009c57 	.word	0x00009c57
    185c:	00009b92 	.word	0x00009b92
    1860:	20001795 	.word	0x20001795
    1864:	50005104 	.word	0x50005104
    1868:	e000e100 	.word	0xe000e100
    186c:	50005008 	.word	0x50005008

00001870 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
    1870:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    1872:	4c06      	ldr	r4, [pc, #24]	; (188c <sys_clock_isr+0x1c>)
    1874:	4806      	ldr	r0, [pc, #24]	; (1890 <sys_clock_isr+0x20>)
    1876:	4621      	mov	r1, r4
    1878:	2217      	movs	r2, #23
    187a:	f007 f9ef 	bl	8c5c <printk>
    187e:	4620      	mov	r0, r4
}
    1880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    1884:	2117      	movs	r1, #23
    1886:	f007 bab5 	b.w	8df4 <assert_post_action>
    188a:	bf00      	nop
    188c:	00009cae 	.word	0x00009cae
    1890:	00009b92 	.word	0x00009b92

00001894 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    1894:	4a04      	ldr	r2, [pc, #16]	; (18a8 <sys_clock_timeout_handler+0x14>)
    1896:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1898:	1ac8      	subs	r0, r1, r3
    189a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    189e:	4403      	add	r3, r0
    18a0:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    18a2:	f004 bbe7 	b.w	6074 <sys_clock_announce>
    18a6:	bf00      	nop
    18a8:	20000388 	.word	0x20000388

000018ac <set_absolute_alarm>:
{
    18ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    18b0:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    18b4:	f04f 0900 	mov.w	r9, #0
    18b8:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    18ba:	f100 0450 	add.w	r4, r0, #80	; 0x50
    18be:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    18c2:	00a4      	lsls	r4, r4, #2
    18c4:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    18c8:	b2a4      	uxth	r4, r4
    18ca:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    18ce:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    18d2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1940 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    18d6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    18da:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    18de:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    18e0:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    18e4:	eba3 030a 	sub.w	r3, r3, sl
    18e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    18ec:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    18f0:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    18f2:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    18f6:	d102      	bne.n	18fe <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    18f8:	2013      	movs	r0, #19
    18fa:	f007 fdb5 	bl	9468 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    18fe:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1902:	1aab      	subs	r3, r5, r2
    1904:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    190c:	bf88      	it	hi
    190e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1910:	f8c4 9000 	str.w	r9, [r4]
    1914:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1916:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    191a:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    191e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1922:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1926:	459a      	cmp	sl, r3
    1928:	d006      	beq.n	1938 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    192a:	1aeb      	subs	r3, r5, r3
    192c:	3b02      	subs	r3, #2
    192e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1936:	d801      	bhi.n	193c <set_absolute_alarm+0x90>
}
    1938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    193c:	462b      	mov	r3, r5
    193e:	e7cf      	b.n	18e0 <set_absolute_alarm+0x34>
    1940:	50015000 	.word	0x50015000

00001944 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1946:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1948:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    194a:	4e0f      	ldr	r6, [pc, #60]	; (1988 <rtc_nrf_isr+0x44>)
    194c:	4b0f      	ldr	r3, [pc, #60]	; (198c <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    194e:	4a10      	ldr	r2, [pc, #64]	; (1990 <rtc_nrf_isr+0x4c>)
    1950:	4618      	mov	r0, r3
    1952:	681d      	ldr	r5, [r3, #0]
    1954:	b104      	cbz	r4, 1958 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    1956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1958:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    195c:	03c9      	lsls	r1, r1, #15
    195e:	d5fa      	bpl.n	1956 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1960:	6831      	ldr	r1, [r6, #0]
    1962:	2900      	cmp	r1, #0
    1964:	d0f7      	beq.n	1956 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1966:	6034      	str	r4, [r6, #0]
    1968:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    196a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    196e:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1972:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    1974:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    1978:	b125      	cbz	r5, 1984 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    197a:	2000      	movs	r0, #0
    197c:	685a      	ldr	r2, [r3, #4]
    197e:	601f      	str	r7, [r3, #0]
    1980:	47a8      	blx	r5
    1982:	e7e3      	b.n	194c <rtc_nrf_isr+0x8>
    1984:	6005      	str	r5, [r0, #0]
}
    1986:	e7e6      	b.n	1956 <rtc_nrf_isr+0x12>
    1988:	50015140 	.word	0x50015140
    198c:	2000037c 	.word	0x2000037c
    1990:	50015000 	.word	0x50015000

00001994 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    1994:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    1996:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    1998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    199c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    19a0:	4d0d      	ldr	r5, [pc, #52]	; (19d8 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    19a2:	2101      	movs	r1, #1
    19a4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    19a8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    19ac:	4b0b      	ldr	r3, [pc, #44]	; (19dc <sys_clock_driver_init+0x48>)
    19ae:	2015      	movs	r0, #21
    19b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    19b4:	4622      	mov	r2, r4
    19b6:	f000 fc4d 	bl	2254 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    19ba:	2015      	movs	r0, #21
    19bc:	f000 fc2c 	bl	2218 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    19c0:	2301      	movs	r3, #1
    19c2:	4a07      	ldr	r2, [pc, #28]	; (19e0 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    19c4:	2002      	movs	r0, #2
    19c6:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    19c8:	4a06      	ldr	r2, [pc, #24]	; (19e4 <sys_clock_driver_init+0x50>)
    19ca:	602b      	str	r3, [r5, #0]
    19cc:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    19ce:	f7ff feab 	bl	1728 <z_nrf_clock_control_lf_on>

	return 0;
}
    19d2:	4620      	mov	r0, r4
    19d4:	bd38      	pop	{r3, r4, r5, pc}
    19d6:	bf00      	nop
    19d8:	50015000 	.word	0x50015000
    19dc:	e000e100 	.word	0xe000e100
    19e0:	50015008 	.word	0x50015008
    19e4:	20000384 	.word	0x20000384

000019e8 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    19e8:	4b13      	ldr	r3, [pc, #76]	; (1a38 <sys_clock_set_timeout+0x50>)
    19ea:	f1b0 3fff 	cmp.w	r0, #4294967295
    19ee:	bf08      	it	eq
    19f0:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    19f2:	3801      	subs	r0, #1
    19f4:	2800      	cmp	r0, #0
    19f6:	dd1c      	ble.n	1a32 <sys_clock_set_timeout+0x4a>
    19f8:	4298      	cmp	r0, r3
    19fa:	bfa8      	it	ge
    19fc:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    19fe:	4b0f      	ldr	r3, [pc, #60]	; (1a3c <sys_clock_set_timeout+0x54>)
    1a00:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1a04:	4b0e      	ldr	r3, [pc, #56]	; (1a40 <sys_clock_set_timeout+0x58>)
    1a06:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1a08:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1a0a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    1a0e:	bf18      	it	ne
    1a10:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    1a12:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1a16:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    1a18:	4a0a      	ldr	r2, [pc, #40]	; (1a44 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1a1a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1a1c:	480a      	ldr	r0, [pc, #40]	; (1a48 <sys_clock_set_timeout+0x60>)
    1a1e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    1a20:	2000      	movs	r0, #0
    1a22:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1a24:	4a04      	ldr	r2, [pc, #16]	; (1a38 <sys_clock_set_timeout+0x50>)
    1a26:	4293      	cmp	r3, r2
    1a28:	bf94      	ite	ls
    1a2a:	18c9      	addls	r1, r1, r3
    1a2c:	1889      	addhi	r1, r1, r2
    1a2e:	f7ff bf3d 	b.w	18ac <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1a32:	2000      	movs	r0, #0
    1a34:	e7e3      	b.n	19fe <sys_clock_set_timeout+0x16>
    1a36:	bf00      	nop
    1a38:	007fffff 	.word	0x007fffff
    1a3c:	50015000 	.word	0x50015000
    1a40:	20000388 	.word	0x20000388
    1a44:	2000037c 	.word	0x2000037c
    1a48:	00001895 	.word	0x00001895

00001a4c <sys_clock_elapsed>:
    1a4c:	4b04      	ldr	r3, [pc, #16]	; (1a60 <sys_clock_elapsed+0x14>)
    1a4e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    1a52:	4b04      	ldr	r3, [pc, #16]	; (1a64 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    1a54:	681b      	ldr	r3, [r3, #0]
    1a56:	1ac0      	subs	r0, r0, r3
}
    1a58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a5c:	4770      	bx	lr
    1a5e:	bf00      	nop
    1a60:	50015000 	.word	0x50015000
    1a64:	20000388 	.word	0x20000388

00001a68 <adp536x_reg_read>:


static const struct device *i2c_dev;

static int adp536x_reg_read(uint8_t reg, uint8_t *buff)
{
    1a68:	4603      	mov	r3, r0
    1a6a:	b510      	push	{r4, lr}
    1a6c:	b088      	sub	sp, #32
    1a6e:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    1a72:	f10d 0307 	add.w	r3, sp, #7
    1a76:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    1a78:	2301      	movs	r3, #1
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
    1a7a:	4a09      	ldr	r2, [pc, #36]	; (1aa0 <adp536x_reg_read+0x38>)
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
    1a7c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    1a80:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
    1a82:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    1a84:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    1a86:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    1a88:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    1a8c:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    1a90:	6883      	ldr	r3, [r0, #8]
    1a92:	2202      	movs	r2, #2
    1a94:	685c      	ldr	r4, [r3, #4]
    1a96:	a902      	add	r1, sp, #8
    1a98:	2346      	movs	r3, #70	; 0x46
    1a9a:	47a0      	blx	r4
}
    1a9c:	b008      	add	sp, #32
    1a9e:	bd10      	pop	{r4, pc}
    1aa0:	2000038c 	.word	0x2000038c

00001aa4 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(uint8_t reg_addr,
			       uint32_t mask,
			       uint8_t data)
{
    1aa4:	b570      	push	{r4, r5, r6, lr}
    1aa6:	b086      	sub	sp, #24
    1aa8:	460e      	mov	r6, r1
	int err;
	uint8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
    1aaa:	f10d 0107 	add.w	r1, sp, #7
{
    1aae:	4605      	mov	r5, r0
    1ab0:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
    1ab2:	f7ff ffd9 	bl	1a68 <adp536x_reg_read>
	if (err) {
    1ab6:	b9c0      	cbnz	r0, 1aea <adp536x_reg_write_mask+0x46>
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    1ab8:	4b0d      	ldr	r3, [pc, #52]	; (1af0 <adp536x_reg_write_mask+0x4c>)
		return err;
	}

	tmp &= ~mask;
    1aba:	f89d 2007 	ldrb.w	r2, [sp, #7]
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    1abe:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
    1ac0:	ab02      	add	r3, sp, #8
    1ac2:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
    1ac4:	2302      	movs	r3, #2
	tmp &= ~mask;
    1ac6:	ea22 0206 	bic.w	r2, r2, r6
	tmp |= data;
    1aca:	4322      	orrs	r2, r4
    1acc:	f88d 2007 	strb.w	r2, [sp, #7]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    1ad0:	f88d 5008 	strb.w	r5, [sp, #8]
    1ad4:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
    1ad8:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    1ada:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
    1ade:	6883      	ldr	r3, [r0, #8]
    1ae0:	2201      	movs	r2, #1
    1ae2:	685c      	ldr	r4, [r3, #4]
    1ae4:	a903      	add	r1, sp, #12
    1ae6:	2346      	movs	r3, #70	; 0x46
    1ae8:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
    1aea:	b006      	add	sp, #24
    1aec:	bd70      	pop	{r4, r5, r6, pc}
    1aee:	bf00      	nop
    1af0:	2000038c 	.word	0x2000038c

00001af4 <adp536x_init>:

	return 0;
}

int adp536x_init(const char *dev_name)
{
    1af4:	b508      	push	{r3, lr}
    1af6:	f002 fc49 	bl	438c <z_impl_device_get_binding>
	i2c_dev = device_get_binding(dev_name);
    1afa:	4b04      	ldr	r3, [pc, #16]	; (1b0c <adp536x_init+0x18>)
	if (i2c_dev == NULL) {
    1afc:	2800      	cmp	r0, #0
	i2c_dev = device_get_binding(dev_name);
    1afe:	6018      	str	r0, [r3, #0]
		return -ENODEV;
	}

	return 0;
}
    1b00:	bf0c      	ite	eq
    1b02:	f06f 0012 	mvneq.w	r0, #18
    1b06:	2000      	movne	r0, #0
    1b08:	bd08      	pop	{r3, pc}
    1b0a:	bf00      	nop
    1b0c:	2000038c 	.word	0x2000038c

00001b10 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    1b10:	2800      	cmp	r0, #0
    1b12:	db0d      	blt.n	1b30 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b14:	2201      	movs	r2, #1
    1b16:	0943      	lsrs	r3, r0, #5
    1b18:	f000 001f 	and.w	r0, r0, #31
    1b1c:	fa02 f000 	lsl.w	r0, r2, r0
    1b20:	4a04      	ldr	r2, [pc, #16]	; (1b34 <__NVIC_DisableIRQ+0x24>)
    1b22:	3320      	adds	r3, #32
    1b24:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1b28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b2c:	f3bf 8f6f 	isb	sy
}
    1b30:	4770      	bx	lr
    1b32:	bf00      	nop
    1b34:	e000e100 	.word	0xe000e100

00001b38 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    1b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1b3a:	2800      	cmp	r0, #0
{
    1b3c:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1b3e:	bf14      	ite	ne
    1b40:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    1b44:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
    1b48:	428a      	cmp	r2, r1
    1b4a:	d20b      	bcs.n	1b64 <config_regions+0x2c>
    1b4c:	2294      	movs	r2, #148	; 0x94
    1b4e:	4927      	ldr	r1, [pc, #156]	; (1bec <config_regions+0xb4>)
    1b50:	4827      	ldr	r0, [pc, #156]	; (1bf0 <config_regions+0xb8>)
    1b52:	f007 f883 	bl	8c5c <printk>
    1b56:	2194      	movs	r1, #148	; 0x94
    1b58:	4824      	ldr	r0, [pc, #144]	; (1bec <config_regions+0xb4>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    1b5a:	b003      	add	sp, #12
    1b5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    1b60:	f007 b948 	b.w	8df4 <assert_post_action>
	if (end <= start) {
    1b64:	d040      	beq.n	1be8 <config_regions+0xb0>
    1b66:	460d      	mov	r5, r1
    1b68:	4e22      	ldr	r6, [pc, #136]	; (1bf4 <config_regions+0xbc>)
		if (ram) {
    1b6a:	2800      	cmp	r0, #0
    1b6c:	d039      	beq.n	1be2 <config_regions+0xaa>
			NRF_SPU->RAMREGION[i].PERM = perm;
    1b6e:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    1b72:	3501      	adds	r5, #1
    1b74:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1b76:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    1b7a:	d8f6      	bhi.n	1b6a <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    1b7c:	fb02 f003 	mul.w	r0, r2, r3
    1b80:	3a01      	subs	r2, #1
    1b82:	434b      	muls	r3, r1
    1b84:	9000      	str	r0, [sp, #0]
    1b86:	481c      	ldr	r0, [pc, #112]	; (1bf8 <config_regions+0xc0>)
    1b88:	f007 f868 	bl	8c5c <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    1b8c:	4b1b      	ldr	r3, [pc, #108]	; (1bfc <config_regions+0xc4>)
    1b8e:	f014 0f10 	tst.w	r4, #16
    1b92:	491b      	ldr	r1, [pc, #108]	; (1c00 <config_regions+0xc8>)
    1b94:	481b      	ldr	r0, [pc, #108]	; (1c04 <config_regions+0xcc>)
    1b96:	bf08      	it	eq
    1b98:	4619      	moveq	r1, r3
    1b9a:	f007 f85f 	bl	8c5c <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    1b9e:	f014 0f04 	tst.w	r4, #4
    1ba2:	bf14      	ite	ne
    1ba4:	2172      	movne	r1, #114	; 0x72
    1ba6:	212d      	moveq	r1, #45	; 0x2d
    1ba8:	4817      	ldr	r0, [pc, #92]	; (1c08 <config_regions+0xd0>)
    1baa:	f007 f857 	bl	8c5c <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    1bae:	f014 0f02 	tst.w	r4, #2
    1bb2:	bf14      	ite	ne
    1bb4:	2177      	movne	r1, #119	; 0x77
    1bb6:	212d      	moveq	r1, #45	; 0x2d
    1bb8:	4813      	ldr	r0, [pc, #76]	; (1c08 <config_regions+0xd0>)
    1bba:	f007 f84f 	bl	8c5c <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    1bbe:	f014 0f01 	tst.w	r4, #1
    1bc2:	bf0c      	ite	eq
    1bc4:	212d      	moveq	r1, #45	; 0x2d
    1bc6:	2178      	movne	r1, #120	; 0x78
    1bc8:	480f      	ldr	r0, [pc, #60]	; (1c08 <config_regions+0xd0>)
    1bca:	f007 f847 	bl	8c5c <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    1bce:	216c      	movs	r1, #108	; 0x6c
    1bd0:	480d      	ldr	r0, [pc, #52]	; (1c08 <config_regions+0xd0>)
    1bd2:	f007 f843 	bl	8c5c <printk>
	PRINT("\n");
    1bd6:	480d      	ldr	r0, [pc, #52]	; (1c0c <config_regions+0xd4>)
}
    1bd8:	b003      	add	sp, #12
    1bda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    1bde:	f007 b83d 	b.w	8c5c <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1be2:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    1be6:	e7c4      	b.n	1b72 <config_regions+0x3a>
}
    1be8:	b003      	add	sp, #12
    1bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bec:	00009cff 	.word	0x00009cff
    1bf0:	00009b92 	.word	0x00009b92
    1bf4:	50003000 	.word	0x50003000
    1bf8:	00009d20 	.word	0x00009d20
    1bfc:	00009cf3 	.word	0x00009cf3
    1c00:	00009cea 	.word	0x00009cea
    1c04:	00009ed1 	.word	0x00009ed1
    1c08:	00009d3a 	.word	0x00009d3a
    1c0c:	0000a865 	.word	0x0000a865

00001c10 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    1c10:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1c12:	f44f 3480 	mov.w	r4, #65536	; 0x10000
{
    1c16:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1c18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1c1c:	4825      	ldr	r0, [pc, #148]	; (1cb4 <spm_jump+0xa4>)
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1c1e:	4d26      	ldr	r5, [pc, #152]	; (1cb8 <spm_jump+0xa8>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1c20:	f007 f81c 	bl	8c5c <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1c24:	6821      	ldr	r1, [r4, #0]
    1c26:	4825      	ldr	r0, [pc, #148]	; (1cbc <spm_jump+0xac>)
    1c28:	f007 f818 	bl	8c5c <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1c2c:	6829      	ldr	r1, [r5, #0]
    1c2e:	4824      	ldr	r0, [pc, #144]	; (1cc0 <spm_jump+0xb0>)
    1c30:	f007 f814 	bl	8c5c <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1c34:	2210      	movs	r2, #16
    1c36:	2100      	movs	r1, #0
    1c38:	4668      	mov	r0, sp
    1c3a:	f007 fa50 	bl	90de <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    1c3e:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    1c40:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1c42:	9300      	str	r3, [sp, #0]
    1c44:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    1c46:	f000 fef7 	bl	2a38 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    1c4a:	2001      	movs	r0, #1
    1c4c:	f000 ff24 	bl	2a98 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    1c50:	2000      	movs	r0, #0
    1c52:	f000 ff0d 	bl	2a70 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    1c56:	2000      	movs	r0, #0
    1c58:	f000 ff32 	bl	2ac0 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    1c5c:	2101      	movs	r1, #1
    1c5e:	2000      	movs	r0, #0
    1c60:	f000 ff4c 	bl	2afc <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    1c64:	f000 ff40 	bl	2ae8 <tz_nonsecure_fpu_access_enable>
	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1c68:	4816      	ldr	r0, [pc, #88]	; (1cc4 <spm_jump+0xb4>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1c6a:	682c      	ldr	r4, [r5, #0]
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1c6c:	f006 fff6 	bl	8c5c <printk>
	NVIC_DisableIRQ(id);
    1c70:	2008      	movs	r0, #8
    1c72:	f7ff ff4d 	bl	1b10 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1c76:	4a14      	ldr	r2, [pc, #80]	; (1cc8 <spm_jump+0xb8>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1c78:	f024 0401 	bic.w	r4, r4, #1
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1c7c:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
	return present && (usel || split);
    1c80:	2b00      	cmp	r3, #0
    1c82:	da07      	bge.n	1c94 <spm_jump+0x84>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1c84:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
    1c88:	3b02      	subs	r3, #2
    1c8a:	2b01      	cmp	r3, #1
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1c8c:	bf9c      	itt	ls
    1c8e:	4b0f      	ldrls	r3, [pc, #60]	; (1ccc <spm_jump+0xbc>)
    1c90:	f8c2 3820 	strls.w	r3, [r2, #2080]	; 0x820
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1c94:	2101      	movs	r1, #1
    1c96:	2008      	movs	r0, #8
    1c98:	f007 f967 	bl	8f6a <irq_target_state_set>
  __ASM volatile ("dsb 0xF":::"memory");
    1c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ca0:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    1ca4:	0864      	lsrs	r4, r4, #1
    1ca6:	0064      	lsls	r4, r4, #1
    1ca8:	4620      	mov	r0, r4
    1caa:	4621      	mov	r1, r4
    1cac:	4622      	mov	r2, r4
    1cae:	4623      	mov	r3, r4
    1cb0:	f7fe fc42 	bl	538 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    1cb4:	00009d3d 	.word	0x00009d3d
    1cb8:	00010004 	.word	0x00010004
    1cbc:	00009d54 	.word	0x00009d54
    1cc0:	00009d69 	.word	0x00009d69
    1cc4:	00009d87 	.word	0x00009d87
    1cc8:	50003000 	.word	0x50003000
    1ccc:	80000100 	.word	0x80000100

00001cd0 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    1cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    1cd4:	485e      	ldr	r0, [pc, #376]	; (1e50 <spm_config+0x180>)
    1cd6:	f006 ffc1 	bl	8c5c <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    1cda:	2100      	movs	r1, #0
    1cdc:	f240 1317 	movw	r3, #279	; 0x117
    1ce0:	4608      	mov	r0, r1
    1ce2:	2202      	movs	r2, #2
    1ce4:	f7ff ff28 	bl	1b38 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1ce8:	4d5a      	ldr	r5, [pc, #360]	; (1e54 <spm_config+0x184>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    1cea:	f240 1307 	movw	r3, #263	; 0x107
    1cee:	2220      	movs	r2, #32
    1cf0:	2102      	movs	r1, #2
    1cf2:	2000      	movs	r0, #0
    1cf4:	f7ff ff20 	bl	1b38 <config_regions>
	PRINT("\n");
    1cf8:	4857      	ldr	r0, [pc, #348]	; (1e58 <spm_config+0x188>)
    1cfa:	f006 ffaf 	bl	8c5c <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1cfe:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    1d02:	4b56      	ldr	r3, [pc, #344]	; (1e5c <spm_config+0x18c>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1d04:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    1d08:	429c      	cmp	r4, r3
    1d0a:	d208      	bcs.n	1d1e <spm_config+0x4e>
    1d0c:	4954      	ldr	r1, [pc, #336]	; (1e60 <spm_config+0x190>)
    1d0e:	4855      	ldr	r0, [pc, #340]	; (1e64 <spm_config+0x194>)
    1d10:	2282      	movs	r2, #130	; 0x82
    1d12:	f006 ffa3 	bl	8c5c <printk>
    1d16:	2182      	movs	r1, #130	; 0x82
    1d18:	4851      	ldr	r0, [pc, #324]	; (1e60 <spm_config+0x190>)
    1d1a:	f007 f86b 	bl	8df4 <assert_post_action>
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    1d1e:	4e52      	ldr	r6, [pc, #328]	; (1e68 <spm_config+0x198>)
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    1d20:	f3c4 1443 	ubfx	r4, r4, #5, #4
    1d24:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
    1d28:	f3c5 35c4 	ubfx	r5, r5, #15, #5
    1d2c:	05d2      	lsls	r2, r2, #23
    1d2e:	d50a      	bpl.n	1d46 <spm_config+0x76>
    1d30:	494e      	ldr	r1, [pc, #312]	; (1e6c <spm_config+0x19c>)
    1d32:	484c      	ldr	r0, [pc, #304]	; (1e64 <spm_config+0x194>)
    1d34:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    1d38:	f006 ff90 	bl	8c5c <printk>
    1d3c:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    1d40:	484a      	ldr	r0, [pc, #296]	; (1e6c <spm_config+0x19c>)
    1d42:	f007 f857 	bl	8df4 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    1d46:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    1d4a:	05db      	lsls	r3, r3, #23
    1d4c:	d50a      	bpl.n	1d64 <spm_config+0x94>
    1d4e:	4947      	ldr	r1, [pc, #284]	; (1e6c <spm_config+0x19c>)
    1d50:	4844      	ldr	r0, [pc, #272]	; (1e64 <spm_config+0x194>)
    1d52:	f240 127b 	movw	r2, #379	; 0x17b
    1d56:	f006 ff81 	bl	8c5c <printk>
    1d5a:	f240 117b 	movw	r1, #379	; 0x17b
    1d5e:	4843      	ldr	r0, [pc, #268]	; (1e6c <spm_config+0x19c>)
    1d60:	f007 f848 	bl	8df4 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1d64:	4b40      	ldr	r3, [pc, #256]	; (1e68 <spm_config+0x198>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    1d66:	4842      	ldr	r0, [pc, #264]	; (1e70 <spm_config+0x1a0>)
    1d68:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    1d6c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    1d70:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    1d74:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1d78:	0152      	lsls	r2, r2, #5
    1d7a:	f006 ff6f 	bl	8c5c <printk>
	PRINT("\n");
    1d7e:	4836      	ldr	r0, [pc, #216]	; (1e58 <spm_config+0x188>)
    1d80:	f006 ff6c 	bl	8c5c <printk>
	int err = spm_secure_services_init();
    1d84:	f000 f88a 	bl	1e9c <spm_secure_services_init>
	if (err != 0) {
    1d88:	4601      	mov	r1, r0
    1d8a:	b110      	cbz	r0, 1d92 <spm_config+0xc2>
		PRINT("Could not initialize secure services (err %d).\n", err);
    1d8c:	4839      	ldr	r0, [pc, #228]	; (1e74 <spm_config+0x1a4>)
    1d8e:	f006 ff65 	bl	8c5c <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1d92:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    1d94:	4838      	ldr	r0, [pc, #224]	; (1e78 <spm_config+0x1a8>)
    1d96:	f006 ff61 	bl	8c5c <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    1d9a:	f240 1317 	movw	r3, #279	; 0x117
    1d9e:	2208      	movs	r2, #8
    1da0:	2100      	movs	r1, #0
    1da2:	2001      	movs	r0, #1
    1da4:	f7ff fec8 	bl	1b38 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    1da8:	4d2f      	ldr	r5, [pc, #188]	; (1e68 <spm_config+0x198>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1daa:	f240 1307 	movw	r3, #263	; 0x107
    1dae:	2220      	movs	r2, #32
    1db0:	2108      	movs	r1, #8
    1db2:	2001      	movs	r0, #1
    1db4:	f7ff fec0 	bl	1b38 <config_regions>
	PRINT("\n");
    1db8:	4827      	ldr	r0, [pc, #156]	; (1e58 <spm_config+0x188>)
    1dba:	f006 ff4f 	bl	8c5c <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1dbe:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    1dc2:	482e      	ldr	r0, [pc, #184]	; (1e7c <spm_config+0x1ac>)
    1dc4:	f006 ff4a 	bl	8c5c <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    1dc8:	4e2d      	ldr	r6, [pc, #180]	; (1e80 <spm_config+0x1b0>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    1dca:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    1dce:	4f2d      	ldr	r7, [pc, #180]	; (1e84 <spm_config+0x1b4>)
    1dd0:	4d2d      	ldr	r5, [pc, #180]	; (1e88 <spm_config+0x1b8>)
    1dd2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1e98 <spm_config+0x1c8>
    1dd6:	f895 9005 	ldrb.w	r9, [r5, #5]
    1dda:	4621      	mov	r1, r4
    1ddc:	f1b9 0f00 	cmp.w	r9, #0
    1de0:	bf14      	ite	ne
    1de2:	4633      	movne	r3, r6
    1de4:	463b      	moveq	r3, r7
    1de6:	4640      	mov	r0, r8
    1de8:	682a      	ldr	r2, [r5, #0]
    1dea:	f006 ff37 	bl	8c5c <printk>
		if (!periph[i].nonsecure) {
    1dee:	f1b9 0f00 	cmp.w	r9, #0
    1df2:	d10c      	bne.n	1e0e <spm_config+0x13e>
			PRINT("\tSKIP\n");
    1df4:	4825      	ldr	r0, [pc, #148]	; (1e8c <spm_config+0x1bc>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    1df6:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    1df8:	f006 ff30 	bl	8c5c <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    1dfc:	2c1c      	cmp	r4, #28
    1dfe:	f105 0508 	add.w	r5, r5, #8
    1e02:	d1e8      	bne.n	1dd6 <spm_config+0x106>
	PRINT("\n");
    1e04:	4814      	ldr	r0, [pc, #80]	; (1e58 <spm_config+0x188>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    1e06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    1e0a:	f006 bf27 	b.w	8c5c <printk>
		err = spm_config_peripheral(periph[i].id, false);
    1e0e:	f895 9004 	ldrb.w	r9, [r5, #4]
	NVIC_DisableIRQ(id);
    1e12:	f995 0004 	ldrsb.w	r0, [r5, #4]
    1e16:	f7ff fe7b 	bl	1b10 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1e1a:	ea4f 0389 	mov.w	r3, r9, lsl #2
    1e1e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1e22:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1e26:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1e2a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1e2e:	d006      	beq.n	1e3e <spm_config+0x16e>
	return present && (usel || split);
    1e30:	2a00      	cmp	r2, #0
    1e32:	da07      	bge.n	1e44 <spm_config+0x174>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1e34:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    1e38:	3a02      	subs	r2, #2
    1e3a:	2a01      	cmp	r2, #1
    1e3c:	d802      	bhi.n	1e44 <spm_config+0x174>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1e3e:	4a14      	ldr	r2, [pc, #80]	; (1e90 <spm_config+0x1c0>)
    1e40:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1e44:	2101      	movs	r1, #1
    1e46:	4648      	mov	r0, r9
    1e48:	f007 f88f 	bl	8f6a <irq_target_state_set>
			PRINT("\tOK\n");
    1e4c:	4811      	ldr	r0, [pc, #68]	; (1e94 <spm_config+0x1c4>)
    1e4e:	e7d2      	b.n	1df6 <spm_config+0x126>
    1e50:	00009dbd 	.word	0x00009dbd
    1e54:	0000ffe0 	.word	0x0000ffe0
    1e58:	0000a865 	.word	0x0000a865
    1e5c:	00000020 	.word	0x00000020
    1e60:	00009cff 	.word	0x00009cff
    1e64:	00009b92 	.word	0x00009b92
    1e68:	50003000 	.word	0x50003000
    1e6c:	00009de1 	.word	0x00009de1
    1e70:	00009e13 	.word	0x00009e13
    1e74:	00009e59 	.word	0x00009e59
    1e78:	00009e89 	.word	0x00009e89
    1e7c:	00009eab 	.word	0x00009eab
    1e80:	00009db2 	.word	0x00009db2
    1e84:	00009cf7 	.word	0x00009cf7
    1e88:	00009810 	.word	0x00009810
    1e8c:	00009ed4 	.word	0x00009ed4
    1e90:	80000100 	.word	0x80000100
    1e94:	00009edb 	.word	0x00009edb
    1e98:	00009ec7 	.word	0x00009ec7

00001e9c <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    1e9c:	2200      	movs	r2, #0
    1e9e:	4802      	ldr	r0, [pc, #8]	; (1ea8 <spm_secure_services_init+0xc>)
    1ea0:	4611      	mov	r1, r2
    1ea2:	f004 ba3d 	b.w	6320 <nrf_cc3xx_platform_ctr_drbg_init>
    1ea6:	bf00      	nop
    1ea8:	20000390 	.word	0x20000390

00001eac <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    1eac:	b570      	push	{r4, r5, r6, lr}
    1eae:	460c      	mov	r4, r1
    1eb0:	4615      	mov	r5, r2
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    1eb2:	4606      	mov	r6, r0
    1eb4:	b950      	cbnz	r0, 1ecc <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    1eb6:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    1eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1ebe:	4671      	mov	r1, lr
    1ec0:	4672      	mov	r2, lr
    1ec2:	4673      	mov	r3, lr
    1ec4:	46f4      	mov	ip, lr
    1ec6:	f38e 8c00 	msr	CPSR_fs, lr
    1eca:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    1ecc:	2a00      	cmp	r2, #0
    1ece:	d0f2      	beq.n	1eb6 <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1ed0:	f007 f892 	bl	8ff8 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    1ed4:	2801      	cmp	r0, #1
    1ed6:	d0ee      	beq.n	1eb6 <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    1ed8:	4b0c      	ldr	r3, [pc, #48]	; (1f0c <__acle_se_spm_request_read_nse+0x60>)
    1eda:	429c      	cmp	r4, r3
    1edc:	d90b      	bls.n	1ef6 <__acle_se_spm_request_read_nse+0x4a>
    1ede:	192a      	adds	r2, r5, r4
    1ee0:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
    1ee4:	429a      	cmp	r2, r3
    1ee6:	d809      	bhi.n	1efc <__acle_se_spm_request_read_nse+0x50>
			memcpy(destination, (const void *)addr, len);
    1ee8:	462a      	mov	r2, r5
    1eea:	4621      	mov	r1, r4
    1eec:	4630      	mov	r0, r6
    1eee:	f007 f8cb 	bl	9088 <memcpy>
			return 0;
    1ef2:	2000      	movs	r0, #0
    1ef4:	e7e1      	b.n	1eba <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    1ef6:	4b06      	ldr	r3, [pc, #24]	; (1f10 <__acle_se_spm_request_read_nse+0x64>)
    1ef8:	429c      	cmp	r4, r3
    1efa:	d903      	bls.n	1f04 <__acle_se_spm_request_read_nse+0x58>
    1efc:	4b05      	ldr	r3, [pc, #20]	; (1f14 <__acle_se_spm_request_read_nse+0x68>)
    1efe:	192a      	adds	r2, r5, r4
    1f00:	429a      	cmp	r2, r3
    1f02:	d9f1      	bls.n	1ee8 <__acle_se_spm_request_read_nse+0x3c>
	return -EPERM;
    1f04:	f04f 30ff 	mov.w	r0, #4294967295
    1f08:	e7d7      	b.n	1eba <__acle_se_spm_request_read_nse+0xe>
    1f0a:	bf00      	nop
    1f0c:	00ff0203 	.word	0x00ff0203
    1f10:	00ff012f 	.word	0x00ff012f
    1f14:	00ff0138 	.word	0x00ff0138

00001f18 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	4606      	mov	r6, r0
    1f1c:	460d      	mov	r5, r1
    1f1e:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    1f20:	f007 f86a 	bl	8ff8 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    1f24:	2801      	cmp	r0, #1
    1f26:	d00d      	beq.n	1f44 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1f28:	4620      	mov	r0, r4
    1f2a:	f007 f865 	bl	8ff8 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    1f2e:	2801      	cmp	r0, #1
    1f30:	d008      	beq.n	1f44 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    1f32:	4623      	mov	r3, r4
    1f34:	462a      	mov	r2, r5
    1f36:	4631      	mov	r1, r6
    1f38:	4808      	ldr	r0, [pc, #32]	; (1f5c <__acle_se_spm_request_random_number_nse+0x44>)
    1f3a:	f004 fa25 	bl	6388 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    1f3e:	6823      	ldr	r3, [r4, #0]
    1f40:	42ab      	cmp	r3, r5
    1f42:	d001      	beq.n	1f48 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    1f44:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    1f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f4c:	4671      	mov	r1, lr
    1f4e:	4672      	mov	r2, lr
    1f50:	4673      	mov	r3, lr
    1f52:	46f4      	mov	ip, lr
    1f54:	f38e 8c00 	msr	CPSR_fs, lr
    1f58:	4774      	bxns	lr
    1f5a:	bf00      	nop
    1f5c:	20000390 	.word	0x20000390

00001f60 <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    1f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f64:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    1f66:	460d      	mov	r5, r1
{
    1f68:	b085      	sub	sp, #20
	if (info == NULL) {
    1f6a:	b381      	cbz	r1, 1fce <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1f6c:	f007 f844 	bl	8ff8 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    1f70:	2801      	cmp	r0, #1
    1f72:	d12c      	bne.n	1fce <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1f74:	4628      	mov	r0, r5
    1f76:	f007 f83f 	bl	8ff8 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    1f7a:	2801      	cmp	r0, #1
    1f7c:	d027      	beq.n	1fce <__acle_se_spm_firmware_info_nse+0x6e>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1f7e:	f04f 0800 	mov.w	r8, #0
    1f82:	f8df b05c 	ldr.w	fp, [pc, #92]	; 1fe0 <__acle_se_spm_firmware_info_nse+0x80>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1f86:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1fe4 <__acle_se_spm_firmware_info_nse+0x84>
    1f8a:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1f8c:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1f90:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    1f94:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1f96:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1f9a:	220c      	movs	r2, #12
    1f9c:	4639      	mov	r1, r7
    1f9e:	4630      	mov	r0, r6
    1fa0:	f007 f84b 	bl	903a <memcmp>
    1fa4:	4604      	mov	r4, r0
    1fa6:	b900      	cbnz	r0, 1faa <__acle_se_spm_firmware_info_nse+0x4a>
		if (finfo) {
    1fa8:	b9a6      	cbnz	r6, 1fd4 <__acle_se_spm_firmware_info_nse+0x74>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1faa:	f108 0801 	add.w	r8, r8, #1
    1fae:	f1b8 0f05 	cmp.w	r8, #5
    1fb2:	d1eb      	bne.n	1f8c <__acle_se_spm_firmware_info_nse+0x2c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    1fb4:	f06f 040d 	mvn.w	r4, #13
}
    1fb8:	4620      	mov	r0, r4
    1fba:	b005      	add	sp, #20
    1fbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fc0:	4671      	mov	r1, lr
    1fc2:	4672      	mov	r2, lr
    1fc4:	4673      	mov	r3, lr
    1fc6:	46f4      	mov	ip, lr
    1fc8:	f38e 8c00 	msr	CPSR_fs, lr
    1fcc:	4774      	bxns	lr
		return -EINVAL;
    1fce:	f06f 0415 	mvn.w	r4, #21
    1fd2:	e7f1      	b.n	1fb8 <__acle_se_spm_firmware_info_nse+0x58>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    1fd4:	223c      	movs	r2, #60	; 0x3c
    1fd6:	4631      	mov	r1, r6
    1fd8:	4628      	mov	r0, r5
    1fda:	f007 f855 	bl	9088 <memcpy>
		return 0;
    1fde:	e7eb      	b.n	1fb8 <__acle_se_spm_firmware_info_nse+0x58>
    1fe0:	000098f0 	.word	0x000098f0
    1fe4:	00009780 	.word	0x00009780

00001fe8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1fe8:	4801      	ldr	r0, [pc, #4]	; (1ff0 <nrf_cc3xx_platform_abort_init+0x8>)
    1fea:	f004 b991 	b.w	6310 <nrf_cc3xx_platform_set_abort>
    1fee:	bf00      	nop
    1ff0:	00009904 	.word	0x00009904

00001ff4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ff4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1ff6:	b1b0      	cbz	r0, 2026 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x26>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1ff8:	6843      	ldr	r3, [r0, #4]
    1ffa:	2b04      	cmp	r3, #4
    1ffc:	d10d      	bne.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1ffe:	2200      	movs	r2, #0
    2000:	6803      	ldr	r3, [r0, #0]
    2002:	e8d3 1fef 	ldaex	r1, [r3]
    2006:	2901      	cmp	r1, #1
    2008:	d103      	bne.n	2012 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12>
    200a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    200e:	2800      	cmp	r0, #0
    2010:	d1f7      	bne.n	2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2012:	4807      	ldr	r0, [pc, #28]	; (2030 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30>)
    2014:	bf08      	it	eq
    2016:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2018:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    201a:	b13b      	cbz	r3, 202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    201c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    201e:	f002 fdb7 	bl	4b90 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2022:	2000      	movs	r0, #0
    2024:	e7f8      	b.n	2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2026:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    202a:	e7f5      	b.n	2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    202c:	4801      	ldr	r0, [pc, #4]	; (2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>)
    202e:	e7f3      	b.n	2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>
    2030:	ffff8fe9 	.word	0xffff8fe9
    2034:	ffff8fea 	.word	0xffff8fea

00002038 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2038:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    203a:	4604      	mov	r4, r0
    203c:	b918      	cbnz	r0, 2046 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    203e:	4b0d      	ldr	r3, [pc, #52]	; (2074 <mutex_free_platform+0x3c>)
    2040:	480d      	ldr	r0, [pc, #52]	; (2078 <mutex_free_platform+0x40>)
    2042:	685b      	ldr	r3, [r3, #4]
    2044:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2046:	6861      	ldr	r1, [r4, #4]
    2048:	2908      	cmp	r1, #8
    204a:	d00d      	beq.n	2068 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    204c:	f031 0304 	bics.w	r3, r1, #4
    2050:	d00a      	beq.n	2068 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2052:	f011 0102 	ands.w	r1, r1, #2
    2056:	d008      	beq.n	206a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2058:	4621      	mov	r1, r4
    205a:	4808      	ldr	r0, [pc, #32]	; (207c <mutex_free_platform+0x44>)
    205c:	f002 fb66 	bl	472c <k_mem_slab_free>
        mutex->mutex = NULL;
    2060:	2300      	movs	r3, #0
    2062:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2064:	2300      	movs	r3, #0
    2066:	6063      	str	r3, [r4, #4]
}
    2068:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    206a:	2214      	movs	r2, #20
    206c:	6820      	ldr	r0, [r4, #0]
    206e:	f007 f836 	bl	90de <memset>
    2072:	e7f7      	b.n	2064 <mutex_free_platform+0x2c>
    2074:	20000090 	.word	0x20000090
    2078:	00009fec 	.word	0x00009fec
    207c:	2000054c 	.word	0x2000054c

00002080 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2080:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2082:	4604      	mov	r4, r0
    2084:	b918      	cbnz	r0, 208e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2086:	4b16      	ldr	r3, [pc, #88]	; (20e0 <mutex_init_platform+0x60>)
    2088:	4816      	ldr	r0, [pc, #88]	; (20e4 <mutex_init_platform+0x64>)
    208a:	685b      	ldr	r3, [r3, #4]
    208c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    208e:	6863      	ldr	r3, [r4, #4]
    2090:	2b04      	cmp	r3, #4
    2092:	d023      	beq.n	20dc <mutex_init_platform+0x5c>
    2094:	2b08      	cmp	r3, #8
    2096:	d021      	beq.n	20dc <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2098:	b9cb      	cbnz	r3, 20ce <mutex_init_platform+0x4e>
    209a:	6823      	ldr	r3, [r4, #0]
    209c:	b9bb      	cbnz	r3, 20ce <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    209e:	f04f 32ff 	mov.w	r2, #4294967295
    20a2:	f04f 33ff 	mov.w	r3, #4294967295
    20a6:	4621      	mov	r1, r4
    20a8:	480f      	ldr	r0, [pc, #60]	; (20e8 <mutex_init_platform+0x68>)
    20aa:	f002 fae5 	bl	4678 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    20ae:	b908      	cbnz	r0, 20b4 <mutex_init_platform+0x34>
    20b0:	6823      	ldr	r3, [r4, #0]
    20b2:	b91b      	cbnz	r3, 20bc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    20b4:	4b0a      	ldr	r3, [pc, #40]	; (20e0 <mutex_init_platform+0x60>)
    20b6:	480d      	ldr	r0, [pc, #52]	; (20ec <mutex_init_platform+0x6c>)
    20b8:	685b      	ldr	r3, [r3, #4]
    20ba:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    20bc:	2214      	movs	r2, #20
    20be:	2100      	movs	r1, #0
    20c0:	6820      	ldr	r0, [r4, #0]
    20c2:	f007 f80c 	bl	90de <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    20c6:	6863      	ldr	r3, [r4, #4]
    20c8:	f043 0302 	orr.w	r3, r3, #2
    20cc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    20ce:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    20d0:	f007 f99f 	bl	9412 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    20d4:	6863      	ldr	r3, [r4, #4]
    20d6:	f043 0301 	orr.w	r3, r3, #1
    20da:	6063      	str	r3, [r4, #4]
}
    20dc:	bd10      	pop	{r4, pc}
    20de:	bf00      	nop
    20e0:	20000090 	.word	0x20000090
    20e4:	00009fec 	.word	0x00009fec
    20e8:	2000054c 	.word	0x2000054c
    20ec:	0000a012 	.word	0x0000a012

000020f0 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    20f0:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    20f2:	b1e8      	cbz	r0, 2130 <mutex_lock_platform+0x40>
    switch (mutex->flags) {
    20f4:	6843      	ldr	r3, [r0, #4]
    20f6:	2b04      	cmp	r3, #4
    20f8:	d10c      	bne.n	2114 <mutex_lock_platform+0x24>
    20fa:	2201      	movs	r2, #1
    20fc:	6803      	ldr	r3, [r0, #0]
    20fe:	e8d3 1fef 	ldaex	r1, [r3]
    2102:	2900      	cmp	r1, #0
    2104:	d103      	bne.n	210e <mutex_lock_platform+0x1e>
    2106:	e8c3 2fe0 	stlex	r0, r2, [r3]
    210a:	2800      	cmp	r0, #0
    210c:	d1f7      	bne.n	20fe <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    210e:	d10b      	bne.n	2128 <mutex_lock_platform+0x38>
    2110:	2000      	movs	r0, #0
}
    2112:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2114:	b153      	cbz	r3, 212c <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2116:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2118:	f04f 32ff 	mov.w	r2, #4294967295
    211c:	f04f 33ff 	mov.w	r3, #4294967295
    2120:	f002 fc64 	bl	49ec <z_impl_k_mutex_lock>
        if (ret == 0) {
    2124:	2800      	cmp	r0, #0
    2126:	d0f3      	beq.n	2110 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2128:	4803      	ldr	r0, [pc, #12]	; (2138 <mutex_lock_platform+0x48>)
    212a:	e7f2      	b.n	2112 <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    212c:	4803      	ldr	r0, [pc, #12]	; (213c <mutex_lock_platform+0x4c>)
    212e:	e7f0      	b.n	2112 <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2130:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2134:	e7ed      	b.n	2112 <mutex_lock_platform+0x22>
    2136:	bf00      	nop
    2138:	ffff8fe9 	.word	0xffff8fe9
    213c:	ffff8fea 	.word	0xffff8fea

00002140 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2140:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2142:	4906      	ldr	r1, [pc, #24]	; (215c <nrf_cc3xx_platform_mutex_init+0x1c>)
    2144:	2340      	movs	r3, #64	; 0x40
    2146:	2214      	movs	r2, #20
    2148:	4805      	ldr	r0, [pc, #20]	; (2160 <nrf_cc3xx_platform_mutex_init+0x20>)
    214a:	f007 f937 	bl	93bc <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    214e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2152:	4904      	ldr	r1, [pc, #16]	; (2164 <nrf_cc3xx_platform_mutex_init+0x24>)
    2154:	4804      	ldr	r0, [pc, #16]	; (2168 <nrf_cc3xx_platform_mutex_init+0x28>)
    2156:	f004 b983 	b.w	6460 <nrf_cc3xx_platform_set_mutexes>
    215a:	bf00      	nop
    215c:	2000056c 	.word	0x2000056c
    2160:	2000054c 	.word	0x2000054c
    2164:	0000991c 	.word	0x0000991c
    2168:	0000990c 	.word	0x0000990c

0000216c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    216c:	4a09      	ldr	r2, [pc, #36]	; (2194 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    216e:	490a      	ldr	r1, [pc, #40]	; (2198 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2170:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2172:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2174:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    2176:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2178:	4908      	ldr	r1, [pc, #32]	; (219c <arch_swap+0x30>)
    217a:	684b      	ldr	r3, [r1, #4]
    217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2180:	604b      	str	r3, [r1, #4]
    2182:	2300      	movs	r3, #0
    2184:	f383 8811 	msr	BASEPRI, r3
    2188:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    218c:	6893      	ldr	r3, [r2, #8]
}
    218e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2190:	4770      	bx	lr
    2192:	bf00      	nop
    2194:	20000c88 	.word	0x20000c88
    2198:	000099d0 	.word	0x000099d0
    219c:	e000ed00 	.word	0xe000ed00

000021a0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    21a0:	4913      	ldr	r1, [pc, #76]	; (21f0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    21a2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    21a4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    21a8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    21aa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    21ae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    21b2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    21b4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    21b8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    21bc:	4f0d      	ldr	r7, [pc, #52]	; (21f4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    21be:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    21c2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    21c4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    21c6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    21c8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    21ca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    21cc:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    21ce:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    21d2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    21d6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    21da:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    21de:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    21e2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    21e4:	f006 fef0 	bl	8fc8 <configure_builtin_stack_guard>
    pop {r2, lr}
    21e8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    21ec:	4770      	bx	lr
    21ee:	0000      	.short	0x0000
    ldr r1, =_kernel
    21f0:	20000c88 	.word	0x20000c88
    ldr v4, =_SCS_ICSR
    21f4:	e000ed04 	.word	0xe000ed04

000021f8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    21f8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    21fc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    21fe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2202:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2206:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2208:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    220c:	2902      	cmp	r1, #2
    beq _oops
    220e:	d0ff      	beq.n	2210 <_oops>

00002210 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2210:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2212:	f006 fedd 	bl	8fd0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2216:	bd01      	pop	{r0, pc}

00002218 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2218:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    221a:	2b00      	cmp	r3, #0
    221c:	db08      	blt.n	2230 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    221e:	2201      	movs	r2, #1
    2220:	f000 001f 	and.w	r0, r0, #31
    2224:	fa02 f000 	lsl.w	r0, r2, r0
    2228:	4a02      	ldr	r2, [pc, #8]	; (2234 <arch_irq_enable+0x1c>)
    222a:	095b      	lsrs	r3, r3, #5
    222c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2230:	4770      	bx	lr
    2232:	bf00      	nop
    2234:	e000e100 	.word	0xe000e100

00002238 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2238:	4b05      	ldr	r3, [pc, #20]	; (2250 <arch_irq_is_enabled+0x18>)
    223a:	0942      	lsrs	r2, r0, #5
    223c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2240:	2301      	movs	r3, #1
    2242:	f000 001f 	and.w	r0, r0, #31
    2246:	fa03 f000 	lsl.w	r0, r3, r0
}
    224a:	4010      	ands	r0, r2
    224c:	4770      	bx	lr
    224e:	bf00      	nop
    2250:	e000e100 	.word	0xe000e100

00002254 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2254:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2256:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2258:	2c07      	cmp	r4, #7
{
    225a:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    225c:	d908      	bls.n	2270 <z_arm_irq_priority_set+0x1c>
    225e:	490d      	ldr	r1, [pc, #52]	; (2294 <z_arm_irq_priority_set+0x40>)
    2260:	480d      	ldr	r0, [pc, #52]	; (2298 <z_arm_irq_priority_set+0x44>)
    2262:	2258      	movs	r2, #88	; 0x58
    2264:	f006 fcfa 	bl	8c5c <printk>
    2268:	2158      	movs	r1, #88	; 0x58
    226a:	480a      	ldr	r0, [pc, #40]	; (2294 <z_arm_irq_priority_set+0x40>)
    226c:	f006 fdc2 	bl	8df4 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2270:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2272:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2274:	bfac      	ite	ge
    2276:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    227a:	4b08      	ldrlt	r3, [pc, #32]	; (229c <z_arm_irq_priority_set+0x48>)
    227c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2280:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2282:	bfab      	itete	ge
    2284:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2288:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    228c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2290:	555c      	strblt	r4, [r3, r5]
}
    2292:	bd38      	pop	{r3, r4, r5, pc}
    2294:	0000a03f 	.word	0x0000a03f
    2298:	00009b92 	.word	0x00009b92
    229c:	e000ed14 	.word	0xe000ed14

000022a0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    22a0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    22a4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    22a6:	490b      	ldr	r1, [pc, #44]	; (22d4 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    22a8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    22ac:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    22ae:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    22b2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    22b6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    22b8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    22bc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    22c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    22c4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    22c8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    22ca:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    22cc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    22ce:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    22d0:	4770      	bx	lr
    22d2:	bf00      	nop
    22d4:	00008d1f 	.word	0x00008d1f

000022d8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    22d8:	4b08      	ldr	r3, [pc, #32]	; (22fc <arch_switch_to_main_thread+0x24>)
    22da:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    22dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
    22de:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    22e2:	4610      	mov	r0, r2
    22e4:	f381 8809 	msr	PSP, r1
    22e8:	2100      	movs	r1, #0
    22ea:	b663      	cpsie	if
    22ec:	f381 8811 	msr	BASEPRI, r1
    22f0:	f3bf 8f6f 	isb	sy
    22f4:	2200      	movs	r2, #0
    22f6:	2300      	movs	r3, #0
    22f8:	f006 fd11 	bl	8d1e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    22fc:	20000c88 	.word	0x20000c88

00002300 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2300:	4901      	ldr	r1, [pc, #4]	; (2308 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2302:	2210      	movs	r2, #16
	str	r2, [r1]
    2304:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2306:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2308:	e000ed10 	.word	0xe000ed10

0000230c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    230c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    230e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2310:	f380 8811 	msr	BASEPRI, r0
	isb
    2314:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2318:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    231c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    231e:	b662      	cpsie	i
	isb
    2320:	f3bf 8f6f 	isb	sy

	bx	lr
    2324:	4770      	bx	lr
    2326:	bf00      	nop

00002328 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2328:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    232a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    232c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2330:	bf20      	wfe

	msr	BASEPRI, r0
    2332:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2336:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2338:	4770      	bx	lr
    233a:	bf00      	nop

0000233c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    233c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    233e:	4605      	mov	r5, r0

	if (esf != NULL) {
    2340:	460c      	mov	r4, r1
    2342:	b1c9      	cbz	r1, 2378 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2344:	688b      	ldr	r3, [r1, #8]
    2346:	4810      	ldr	r0, [pc, #64]	; (2388 <z_arm_fatal_error+0x4c>)
    2348:	9300      	str	r3, [sp, #0]
    234a:	e9d1 2300 	ldrd	r2, r3, [r1]
    234e:	2145      	movs	r1, #69	; 0x45
    2350:	f006 fd65 	bl	8e1e <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2354:	6963      	ldr	r3, [r4, #20]
    2356:	2145      	movs	r1, #69	; 0x45
    2358:	9300      	str	r3, [sp, #0]
    235a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    235e:	480b      	ldr	r0, [pc, #44]	; (238c <z_arm_fatal_error+0x50>)
    2360:	f006 fd5d 	bl	8e1e <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2364:	2145      	movs	r1, #69	; 0x45
    2366:	69e2      	ldr	r2, [r4, #28]
    2368:	4809      	ldr	r0, [pc, #36]	; (2390 <z_arm_fatal_error+0x54>)
    236a:	f006 fd58 	bl	8e1e <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    236e:	2145      	movs	r1, #69	; 0x45
    2370:	69a2      	ldr	r2, [r4, #24]
    2372:	4808      	ldr	r0, [pc, #32]	; (2394 <z_arm_fatal_error+0x58>)
    2374:	f006 fd53 	bl	8e1e <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2378:	4621      	mov	r1, r4
    237a:	4628      	mov	r0, r5
}
    237c:	b003      	add	sp, #12
    237e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    2382:	f002 b82f 	b.w	43e4 <z_fatal_error>
    2386:	bf00      	nop
    2388:	0000a075 	.word	0x0000a075
    238c:	0000a0a9 	.word	0x0000a0a9
    2390:	0000a0dd 	.word	0x0000a0dd
    2394:	0000a0f1 	.word	0x0000a0f1

00002398 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2398:	bf30      	wfi
    b z_SysNmiOnReset
    239a:	f7ff bffd 	b.w	2398 <z_SysNmiOnReset>
    239e:	bf00      	nop

000023a0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    23a0:	4a0b      	ldr	r2, [pc, #44]	; (23d0 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    23a2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    23a4:	4b0b      	ldr	r3, [pc, #44]	; (23d4 <z_arm_prep_c+0x34>)
    23a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    23aa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    23ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23b0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    23b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    23b8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    23bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    23c0:	f002 f86c 	bl	449c <z_bss_zero>
	z_data_copy();
    23c4:	f003 fc82 	bl	5ccc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    23c8:	f000 fb18 	bl	29fc <z_arm_interrupt_init>
	z_cstart();
    23cc:	f002 f88a 	bl	44e4 <z_cstart>
    23d0:	00000000 	.word	0x00000000
    23d4:	e000ed00 	.word	0xe000ed00

000023d8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    23d8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    23da:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    23dc:	4a0b      	ldr	r2, [pc, #44]	; (240c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    23de:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    23e0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    23e2:	bf1e      	ittt	ne
	movne	r1, #0
    23e4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    23e6:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    23e8:	f007 f80c 	blne	9404 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    23ec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    23ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    23f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    23f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    23fa:	4905      	ldr	r1, [pc, #20]	; (2410 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    23fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    23fe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2400:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2406:	4903      	ldr	r1, [pc, #12]	; (2414 <_isr_wrapper+0x3c>)
	bx r1
    2408:	4708      	bx	r1
    240a:	0000      	.short	0x0000
	ldr r2, =_kernel
    240c:	20000c88 	.word	0x20000c88
	ldr r1, =_sw_isr_table
    2410:	000094e4 	.word	0x000094e4
	ldr r1, =z_arm_int_exit
    2414:	00002951 	.word	0x00002951

00002418 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2418:	2000      	movs	r0, #0
    msr CONTROL, r0
    241a:	f380 8814 	msr	CONTROL, r0
    isb
    241e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2422:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2424:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2428:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    242c:	f006 fcea 	bl	8e04 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2430:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2432:	490e      	ldr	r1, [pc, #56]	; (246c <__start+0x54>)
    str r0, [r1]
    2434:	6008      	str	r0, [r1, #0]
    dsb
    2436:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    243a:	480d      	ldr	r0, [pc, #52]	; (2470 <__start+0x58>)
    msr msp, r0
    243c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2440:	f000 fab6 	bl	29b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2444:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2446:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    244a:	480a      	ldr	r0, [pc, #40]	; (2474 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    244c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2450:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2452:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2456:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    245a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    245c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    245e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2462:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2466:	f7ff ff9b 	bl	23a0 <z_arm_prep_c>
    246a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    246c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2470:	20002798 	.word	0x20002798
    ldr r0, =z_interrupt_stacks
    2474:	200028d8 	.word	0x200028d8

00002478 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2478:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    247c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2480:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2482:	4672      	mov	r2, lr
	bl z_arm_fault
    2484:	f000 f970 	bl	2768 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2488:	bd01      	pop	{r0, pc}
    248a:	bf00      	nop

0000248c <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    248c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    248e:	4c2b      	ldr	r4, [pc, #172]	; (253c <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2490:	4606      	mov	r6, r0
    2492:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2494:	482a      	ldr	r0, [pc, #168]	; (2540 <mem_manage_fault.isra.0+0xb4>)
    2496:	2145      	movs	r1, #69	; 0x45
    2498:	f006 fcc1 	bl	8e1e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    249c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    249e:	06d0      	lsls	r0, r2, #27
    24a0:	d503      	bpl.n	24aa <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    24a2:	2145      	movs	r1, #69	; 0x45
    24a4:	4827      	ldr	r0, [pc, #156]	; (2544 <mem_manage_fault.isra.0+0xb8>)
    24a6:	f006 fcba 	bl	8e1e <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    24aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24ac:	0719      	lsls	r1, r3, #28
    24ae:	d503      	bpl.n	24b8 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    24b0:	2145      	movs	r1, #69	; 0x45
    24b2:	4825      	ldr	r0, [pc, #148]	; (2548 <mem_manage_fault.isra.0+0xbc>)
    24b4:	f006 fcb3 	bl	8e1e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    24b8:	4c20      	ldr	r4, [pc, #128]	; (253c <mem_manage_fault.isra.0+0xb0>)
    24ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24bc:	079a      	lsls	r2, r3, #30
    24be:	d510      	bpl.n	24e2 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    24c0:	2145      	movs	r1, #69	; 0x45
    24c2:	4822      	ldr	r0, [pc, #136]	; (254c <mem_manage_fault.isra.0+0xc0>)
    24c4:	f006 fcab 	bl	8e1e <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    24c8:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    24ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24cc:	061b      	lsls	r3, r3, #24
    24ce:	d508      	bpl.n	24e2 <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    24d0:	2145      	movs	r1, #69	; 0x45
    24d2:	481f      	ldr	r0, [pc, #124]	; (2550 <mem_manage_fault.isra.0+0xc4>)
    24d4:	f006 fca3 	bl	8e1e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    24d8:	b11e      	cbz	r6, 24e2 <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    24da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    24e0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    24e2:	4c16      	ldr	r4, [pc, #88]	; (253c <mem_manage_fault.isra.0+0xb0>)
    24e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    24e6:	07d6      	lsls	r6, r2, #31
    24e8:	d503      	bpl.n	24f2 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    24ea:	2145      	movs	r1, #69	; 0x45
    24ec:	4819      	ldr	r0, [pc, #100]	; (2554 <mem_manage_fault.isra.0+0xc8>)
    24ee:	f006 fc96 	bl	8e1e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    24f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24f4:	0698      	lsls	r0, r3, #26
    24f6:	d503      	bpl.n	2500 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    24f8:	2145      	movs	r1, #69	; 0x45
    24fa:	4817      	ldr	r0, [pc, #92]	; (2558 <mem_manage_fault.isra.0+0xcc>)
    24fc:	f006 fc8f 	bl	8e1e <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2500:	4b0e      	ldr	r3, [pc, #56]	; (253c <mem_manage_fault.isra.0+0xb0>)
    2502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2504:	06d1      	lsls	r1, r2, #27
    2506:	d402      	bmi.n	250e <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    250a:	0792      	lsls	r2, r2, #30
    250c:	d50d      	bpl.n	252a <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2510:	06db      	lsls	r3, r3, #27
    2512:	d50a      	bpl.n	252a <mem_manage_fault.isra.0+0x9e>
    2514:	4911      	ldr	r1, [pc, #68]	; (255c <mem_manage_fault.isra.0+0xd0>)
    2516:	4812      	ldr	r0, [pc, #72]	; (2560 <mem_manage_fault.isra.0+0xd4>)
    2518:	f240 124f 	movw	r2, #335	; 0x14f
    251c:	f006 fb9e 	bl	8c5c <printk>
    2520:	f240 114f 	movw	r1, #335	; 0x14f
    2524:	480d      	ldr	r0, [pc, #52]	; (255c <mem_manage_fault.isra.0+0xd0>)
    2526:	f006 fc65 	bl	8df4 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    252a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    252c:	4a03      	ldr	r2, [pc, #12]	; (253c <mem_manage_fault.isra.0+0xb0>)
    252e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2530:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2534:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2536:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2538:	bd70      	pop	{r4, r5, r6, pc}
    253a:	bf00      	nop
    253c:	e000ed00 	.word	0xe000ed00
    2540:	0000a124 	.word	0x0000a124
    2544:	0000a13f 	.word	0x0000a13f
    2548:	0000a177 	.word	0x0000a177
    254c:	0000a18f 	.word	0x0000a18f
    2550:	0000a1ac 	.word	0x0000a1ac
    2554:	0000a1c7 	.word	0x0000a1c7
    2558:	0000a1eb 	.word	0x0000a1eb
    255c:	0000a21f 	.word	0x0000a21f
    2560:	00009b92 	.word	0x00009b92

00002564 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2564:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2566:	4c23      	ldr	r4, [pc, #140]	; (25f4 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2568:	4606      	mov	r6, r0
    256a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    256c:	4822      	ldr	r0, [pc, #136]	; (25f8 <bus_fault.isra.0+0x94>)
    256e:	2145      	movs	r1, #69	; 0x45
    2570:	f006 fc55 	bl	8e1e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2574:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2576:	04d1      	lsls	r1, r2, #19
    2578:	d503      	bpl.n	2582 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    257a:	2145      	movs	r1, #69	; 0x45
    257c:	481f      	ldr	r0, [pc, #124]	; (25fc <bus_fault.isra.0+0x98>)
    257e:	f006 fc4e 	bl	8e1e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2584:	051a      	lsls	r2, r3, #20
    2586:	d503      	bpl.n	2590 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2588:	2145      	movs	r1, #69	; 0x45
    258a:	481d      	ldr	r0, [pc, #116]	; (2600 <bus_fault.isra.0+0x9c>)
    258c:	f006 fc47 	bl	8e1e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2590:	4c18      	ldr	r4, [pc, #96]	; (25f4 <bus_fault.isra.0+0x90>)
    2592:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2594:	059b      	lsls	r3, r3, #22
    2596:	d510      	bpl.n	25ba <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2598:	481a      	ldr	r0, [pc, #104]	; (2604 <bus_fault.isra.0+0xa0>)
    259a:	2145      	movs	r1, #69	; 0x45
    259c:	f006 fc3f 	bl	8e1e <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    25a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    25a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25a4:	0418      	lsls	r0, r3, #16
    25a6:	d508      	bpl.n	25ba <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    25a8:	2145      	movs	r1, #69	; 0x45
    25aa:	4817      	ldr	r0, [pc, #92]	; (2608 <bus_fault.isra.0+0xa4>)
    25ac:	f006 fc37 	bl	8e1e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    25b0:	b11e      	cbz	r6, 25ba <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    25b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    25b8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    25ba:	4c0e      	ldr	r4, [pc, #56]	; (25f4 <bus_fault.isra.0+0x90>)
    25bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25be:	0559      	lsls	r1, r3, #21
    25c0:	d503      	bpl.n	25ca <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    25c2:	2145      	movs	r1, #69	; 0x45
    25c4:	4811      	ldr	r0, [pc, #68]	; (260c <bus_fault.isra.0+0xa8>)
    25c6:	f006 fc2a 	bl	8e1e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    25ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25cc:	05da      	lsls	r2, r3, #23
    25ce:	d50b      	bpl.n	25e8 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    25d0:	2145      	movs	r1, #69	; 0x45
    25d2:	480f      	ldr	r0, [pc, #60]	; (2610 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    25d4:	f006 fc23 	bl	8e1e <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    25d8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25da:	4a06      	ldr	r2, [pc, #24]	; (25f4 <bus_fault.isra.0+0x90>)
    25dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    25de:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    25e2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    25e4:	7028      	strb	r0, [r5, #0]

	return reason;
}
    25e6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    25e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25ea:	049b      	lsls	r3, r3, #18
    25ec:	d5f4      	bpl.n	25d8 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    25ee:	2145      	movs	r1, #69	; 0x45
    25f0:	4808      	ldr	r0, [pc, #32]	; (2614 <bus_fault.isra.0+0xb0>)
    25f2:	e7ef      	b.n	25d4 <bus_fault.isra.0+0x70>
    25f4:	e000ed00 	.word	0xe000ed00
    25f8:	0000a259 	.word	0x0000a259
    25fc:	0000a274 	.word	0x0000a274
    2600:	0000a177 	.word	0x0000a177
    2604:	0000a28a 	.word	0x0000a28a
    2608:	0000a2a8 	.word	0x0000a2a8
    260c:	0000a2c2 	.word	0x0000a2c2
    2610:	0000a2e2 	.word	0x0000a2e2
    2614:	0000a1eb 	.word	0x0000a1eb

00002618 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2618:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    261a:	4c21      	ldr	r4, [pc, #132]	; (26a0 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    261c:	2145      	movs	r1, #69	; 0x45
    261e:	4821      	ldr	r0, [pc, #132]	; (26a4 <usage_fault.isra.0+0x8c>)
    2620:	f006 fbfd 	bl	8e1e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2624:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2626:	0195      	lsls	r5, r2, #6
    2628:	d503      	bpl.n	2632 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    262a:	2145      	movs	r1, #69	; 0x45
    262c:	481e      	ldr	r0, [pc, #120]	; (26a8 <usage_fault.isra.0+0x90>)
    262e:	f006 fbf6 	bl	8e1e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2632:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2634:	01dc      	lsls	r4, r3, #7
    2636:	d503      	bpl.n	2640 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2638:	2145      	movs	r1, #69	; 0x45
    263a:	481c      	ldr	r0, [pc, #112]	; (26ac <usage_fault.isra.0+0x94>)
    263c:	f006 fbef 	bl	8e1e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2640:	4d17      	ldr	r5, [pc, #92]	; (26a0 <usage_fault.isra.0+0x88>)
    2642:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2644:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2648:	d004      	beq.n	2654 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    264a:	2145      	movs	r1, #69	; 0x45
    264c:	4818      	ldr	r0, [pc, #96]	; (26b0 <usage_fault.isra.0+0x98>)
    264e:	f006 fbe6 	bl	8e1e <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2652:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2654:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2656:	0318      	lsls	r0, r3, #12
    2658:	d503      	bpl.n	2662 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    265a:	2145      	movs	r1, #69	; 0x45
    265c:	4815      	ldr	r0, [pc, #84]	; (26b4 <usage_fault.isra.0+0x9c>)
    265e:	f006 fbde 	bl	8e1e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2662:	4d0f      	ldr	r5, [pc, #60]	; (26a0 <usage_fault.isra.0+0x88>)
    2664:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2666:	0351      	lsls	r1, r2, #13
    2668:	d503      	bpl.n	2672 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    266a:	2145      	movs	r1, #69	; 0x45
    266c:	4812      	ldr	r0, [pc, #72]	; (26b8 <usage_fault.isra.0+0xa0>)
    266e:	f006 fbd6 	bl	8e1e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2672:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2674:	039a      	lsls	r2, r3, #14
    2676:	d503      	bpl.n	2680 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2678:	2145      	movs	r1, #69	; 0x45
    267a:	4810      	ldr	r0, [pc, #64]	; (26bc <usage_fault.isra.0+0xa4>)
    267c:	f006 fbcf 	bl	8e1e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2680:	4d07      	ldr	r5, [pc, #28]	; (26a0 <usage_fault.isra.0+0x88>)
    2682:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2684:	03db      	lsls	r3, r3, #15
    2686:	d503      	bpl.n	2690 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2688:	2145      	movs	r1, #69	; 0x45
    268a:	480d      	ldr	r0, [pc, #52]	; (26c0 <usage_fault.isra.0+0xa8>)
    268c:	f006 fbc7 	bl	8e1e <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2690:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2692:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2694:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2698:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    269c:	62ab      	str	r3, [r5, #40]	; 0x28
}
    269e:	bd38      	pop	{r3, r4, r5, pc}
    26a0:	e000ed00 	.word	0xe000ed00
    26a4:	0000a2ff 	.word	0x0000a2ff
    26a8:	0000a31c 	.word	0x0000a31c
    26ac:	0000a334 	.word	0x0000a334
    26b0:	0000a353 	.word	0x0000a353
    26b4:	0000a382 	.word	0x0000a382
    26b8:	0000a3a5 	.word	0x0000a3a5
    26bc:	0000a3cf 	.word	0x0000a3cf
    26c0:	0000a3ee 	.word	0x0000a3ee

000026c4 <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    26c4:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    26c6:	4c1e      	ldr	r4, [pc, #120]	; (2740 <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    26c8:	481e      	ldr	r0, [pc, #120]	; (2744 <secure_fault.isra.0+0x80>)
    26ca:	2145      	movs	r1, #69	; 0x45
    26cc:	f006 fba7 	bl	8e1e <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    26d0:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    26d2:	6963      	ldr	r3, [r4, #20]
    26d4:	0658      	lsls	r0, r3, #25
    26d6:	d503      	bpl.n	26e0 <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
    26d8:	2145      	movs	r1, #69	; 0x45
    26da:	481b      	ldr	r0, [pc, #108]	; (2748 <secure_fault.isra.0+0x84>)
    26dc:	f006 fb9f 	bl	8e1e <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    26e0:	6963      	ldr	r3, [r4, #20]
    26e2:	07d9      	lsls	r1, r3, #31
    26e4:	d508      	bpl.n	26f8 <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
    26e6:	2145      	movs	r1, #69	; 0x45
    26e8:	4818      	ldr	r0, [pc, #96]	; (274c <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    26ea:	f006 fb98 	bl	8e1e <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    26ee:	6963      	ldr	r3, [r4, #20]
    26f0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    26f4:	6163      	str	r3, [r4, #20]
}
    26f6:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    26f8:	6963      	ldr	r3, [r4, #20]
    26fa:	079a      	lsls	r2, r3, #30
    26fc:	d502      	bpl.n	2704 <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
    26fe:	2145      	movs	r1, #69	; 0x45
    2700:	4813      	ldr	r0, [pc, #76]	; (2750 <secure_fault.isra.0+0x8c>)
    2702:	e7f2      	b.n	26ea <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    2704:	6963      	ldr	r3, [r4, #20]
    2706:	075b      	lsls	r3, r3, #29
    2708:	d502      	bpl.n	2710 <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
    270a:	2145      	movs	r1, #69	; 0x45
    270c:	4811      	ldr	r0, [pc, #68]	; (2754 <secure_fault.isra.0+0x90>)
    270e:	e7ec      	b.n	26ea <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    2710:	6963      	ldr	r3, [r4, #20]
    2712:	0718      	lsls	r0, r3, #28
    2714:	d502      	bpl.n	271c <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
    2716:	2145      	movs	r1, #69	; 0x45
    2718:	480f      	ldr	r0, [pc, #60]	; (2758 <secure_fault.isra.0+0x94>)
    271a:	e7e6      	b.n	26ea <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    271c:	6963      	ldr	r3, [r4, #20]
    271e:	06d9      	lsls	r1, r3, #27
    2720:	d502      	bpl.n	2728 <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
    2722:	2145      	movs	r1, #69	; 0x45
    2724:	480d      	ldr	r0, [pc, #52]	; (275c <secure_fault.isra.0+0x98>)
    2726:	e7e0      	b.n	26ea <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    2728:	6963      	ldr	r3, [r4, #20]
    272a:	069a      	lsls	r2, r3, #26
    272c:	d502      	bpl.n	2734 <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
    272e:	2145      	movs	r1, #69	; 0x45
    2730:	480b      	ldr	r0, [pc, #44]	; (2760 <secure_fault.isra.0+0x9c>)
    2732:	e7da      	b.n	26ea <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    2734:	6963      	ldr	r3, [r4, #20]
    2736:	061b      	lsls	r3, r3, #24
    2738:	d5d9      	bpl.n	26ee <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
    273a:	2145      	movs	r1, #69	; 0x45
    273c:	4809      	ldr	r0, [pc, #36]	; (2764 <secure_fault.isra.0+0xa0>)
    273e:	e7d4      	b.n	26ea <secure_fault.isra.0+0x26>
    2740:	e000edd0 	.word	0xe000edd0
    2744:	0000a41e 	.word	0x0000a41e
    2748:	0000a43c 	.word	0x0000a43c
    274c:	0000a451 	.word	0x0000a451
    2750:	0000a46c 	.word	0x0000a46c
    2754:	0000a48f 	.word	0x0000a48f
    2758:	0000a4af 	.word	0x0000a4af
    275c:	0000a4d1 	.word	0x0000a4d1
    2760:	0000a4eb 	.word	0x0000a4eb
    2764:	0000a50a 	.word	0x0000a50a

00002768 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    276c:	4b62      	ldr	r3, [pc, #392]	; (28f8 <z_arm_fault+0x190>)
{
    276e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2770:	685c      	ldr	r4, [r3, #4]
    2772:	2600      	movs	r6, #0
{
    2774:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2776:	f3c4 0708 	ubfx	r7, r4, #0, #9
    277a:	f386 8811 	msr	BASEPRI, r6
    277e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2782:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2786:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    278a:	d11e      	bne.n	27ca <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    278c:	f012 0301 	ands.w	r3, r2, #1
    2790:	d039      	beq.n	2806 <z_arm_fault+0x9e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    2792:	f012 0340 	ands.w	r3, r2, #64	; 0x40
    2796:	f002 0808 	and.w	r8, r2, #8
    279a:	f040 80a6 	bne.w	28ea <z_arm_fault+0x182>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    279e:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    27a0:	bf54      	ite	pl
    27a2:	4605      	movpl	r5, r0
	*nested_exc = false;
    27a4:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    27a6:	682a      	ldr	r2, [r5, #0]
    27a8:	4b54      	ldr	r3, [pc, #336]	; (28fc <z_arm_fault+0x194>)
			*nested_exc = true;
    27aa:	bf58      	it	pl
    27ac:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    27ae:	4413      	add	r3, r2
    27b0:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    27b2:	bf98      	it	ls
    27b4:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    27b6:	2145      	movs	r1, #69	; 0x45
    27b8:	4851      	ldr	r0, [pc, #324]	; (2900 <z_arm_fault+0x198>)
    27ba:	f006 fb30 	bl	8e1e <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    27be:	f1b8 0f00 	cmp.w	r8, #0
    27c2:	d01d      	beq.n	2800 <z_arm_fault+0x98>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    27c4:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    27c8:	b95d      	cbnz	r5, 27e2 <z_arm_fault+0x7a>
    27ca:	f240 32e1 	movw	r2, #993	; 0x3e1
    27ce:	494d      	ldr	r1, [pc, #308]	; (2904 <z_arm_fault+0x19c>)
    27d0:	484d      	ldr	r0, [pc, #308]	; (2908 <z_arm_fault+0x1a0>)
    27d2:	f006 fa43 	bl	8c5c <printk>
    27d6:	f240 31e1 	movw	r1, #993	; 0x3e1
    27da:	484a      	ldr	r0, [pc, #296]	; (2904 <z_arm_fault+0x19c>)
    27dc:	f006 fb0a 	bl	8df4 <assert_post_action>
    27e0:	2500      	movs	r5, #0
	*recoverable = false;
    27e2:	2300      	movs	r3, #0
    27e4:	1efa      	subs	r2, r7, #3
    27e6:	4698      	mov	r8, r3
    27e8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    27ec:	4613      	mov	r3, r2
    27ee:	2b09      	cmp	r3, #9
    27f0:	d869      	bhi.n	28c6 <z_arm_fault+0x15e>
    27f2:	e8df f003 	tbb	[pc, r3]
    27f6:	590a      	.short	0x590a
    27f8:	6861385d 	.word	0x6861385d
    27fc:	65686868 	.word	0x65686868
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    2800:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    2804:	e7e0      	b.n	27c8 <z_arm_fault+0x60>
	*nested_exc = false;
    2806:	461e      	mov	r6, r3
    2808:	e7df      	b.n	27ca <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
    280a:	2145      	movs	r1, #69	; 0x45
    280c:	483f      	ldr	r0, [pc, #252]	; (290c <z_arm_fault+0x1a4>)
    280e:	f006 fb06 	bl	8e1e <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2812:	4b39      	ldr	r3, [pc, #228]	; (28f8 <z_arm_fault+0x190>)
	*recoverable = false;
    2814:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2818:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    281a:	f014 0402 	ands.w	r4, r4, #2
    281e:	d004      	beq.n	282a <z_arm_fault+0xc2>
		PR_EXC("  Bus fault on vector table read");
    2820:	2145      	movs	r1, #69	; 0x45
    2822:	483b      	ldr	r0, [pc, #236]	; (2910 <z_arm_fault+0x1a8>)
	PR_FAULT_INFO(
    2824:	f006 fafb 	bl	8e1e <z_log_minimal_printk>
    2828:	e048      	b.n	28bc <z_arm_fault+0x154>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    282c:	005b      	lsls	r3, r3, #1
    282e:	d522      	bpl.n	2876 <z_arm_fault+0x10e>
		PR_EXC("  Fault escalation (see below)");
    2830:	2145      	movs	r1, #69	; 0x45
    2832:	4838      	ldr	r0, [pc, #224]	; (2914 <z_arm_fault+0x1ac>)
    2834:	f006 faf3 	bl	8e1e <z_log_minimal_printk>
		if (SCB_MMFSR != 0) {
    2838:	4b37      	ldr	r3, [pc, #220]	; (2918 <z_arm_fault+0x1b0>)
    283a:	781b      	ldrb	r3, [r3, #0]
    283c:	b133      	cbz	r3, 284c <z_arm_fault+0xe4>
			reason = mem_manage_fault(esf, 1, recoverable);
    283e:	2001      	movs	r0, #1
    2840:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2844:	f7ff fe22 	bl	248c <mem_manage_fault.isra.0>
    2848:	4604      	mov	r4, r0
		break;
    284a:	e014      	b.n	2876 <z_arm_fault+0x10e>
		} else if (SCB_BFSR != 0) {
    284c:	4b33      	ldr	r3, [pc, #204]	; (291c <z_arm_fault+0x1b4>)
    284e:	781b      	ldrb	r3, [r3, #0]
    2850:	b12b      	cbz	r3, 285e <z_arm_fault+0xf6>
			reason = bus_fault(esf, 1, recoverable);
    2852:	2001      	movs	r0, #1
    2854:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2858:	f7ff fe84 	bl	2564 <bus_fault.isra.0>
    285c:	e7f4      	b.n	2848 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
    285e:	4b30      	ldr	r3, [pc, #192]	; (2920 <z_arm_fault+0x1b8>)
    2860:	881b      	ldrh	r3, [r3, #0]
    2862:	b29b      	uxth	r3, r3
    2864:	b113      	cbz	r3, 286c <z_arm_fault+0x104>
		reason = usage_fault(esf);
    2866:	f7ff fed7 	bl	2618 <usage_fault.isra.0>
    286a:	e7ed      	b.n	2848 <z_arm_fault+0xe0>
		} else if (SAU->SFSR != 0) {
    286c:	4b2d      	ldr	r3, [pc, #180]	; (2924 <z_arm_fault+0x1bc>)
    286e:	695b      	ldr	r3, [r3, #20]
    2870:	b10b      	cbz	r3, 2876 <z_arm_fault+0x10e>
			secure_fault(esf);
    2872:	f7ff ff27 	bl	26c4 <secure_fault.isra.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2876:	f89d 3007 	ldrb.w	r3, [sp, #7]
    287a:	b993      	cbnz	r3, 28a2 <z_arm_fault+0x13a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    287c:	2220      	movs	r2, #32
    287e:	4629      	mov	r1, r5
    2880:	a802      	add	r0, sp, #8
    2882:	f006 fc01 	bl	9088 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2886:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2888:	b356      	cbz	r6, 28e0 <z_arm_fault+0x178>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    288a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    288e:	b922      	cbnz	r2, 289a <z_arm_fault+0x132>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2890:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2894:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2898:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    289a:	4620      	mov	r0, r4
    289c:	a902      	add	r1, sp, #8
    289e:	f7ff fd4d 	bl	233c <z_arm_fatal_error>
}
    28a2:	b00a      	add	sp, #40	; 0x28
    28a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    28a8:	2000      	movs	r0, #0
    28aa:	f10d 0107 	add.w	r1, sp, #7
    28ae:	e7c9      	b.n	2844 <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    28b0:	2000      	movs	r0, #0
    28b2:	f10d 0107 	add.w	r1, sp, #7
    28b6:	e7cf      	b.n	2858 <z_arm_fault+0xf0>
		secure_fault(esf);
    28b8:	f7ff ff04 	bl	26c4 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    28bc:	2400      	movs	r4, #0
}
    28be:	e7da      	b.n	2876 <z_arm_fault+0x10e>
	PR_FAULT_INFO(
    28c0:	2145      	movs	r1, #69	; 0x45
    28c2:	4819      	ldr	r0, [pc, #100]	; (2928 <z_arm_fault+0x1c0>)
    28c4:	e7ae      	b.n	2824 <z_arm_fault+0xbc>
	PR_FAULT_INFO("***** %s %d) *****",
    28c6:	4919      	ldr	r1, [pc, #100]	; (292c <z_arm_fault+0x1c4>)
    28c8:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    28cc:	4a18      	ldr	r2, [pc, #96]	; (2930 <z_arm_fault+0x1c8>)
    28ce:	4819      	ldr	r0, [pc, #100]	; (2934 <z_arm_fault+0x1cc>)
    28d0:	bf08      	it	eq
    28d2:	460a      	moveq	r2, r1
    28d4:	f1a7 0310 	sub.w	r3, r7, #16
    28d8:	2145      	movs	r1, #69	; 0x45
    28da:	f006 faa0 	bl	8e1e <z_log_minimal_printk>
    28de:	e7ed      	b.n	28bc <z_arm_fault+0x154>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    28e0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    28e4:	f023 0301 	bic.w	r3, r3, #1
    28e8:	e7d6      	b.n	2898 <z_arm_fault+0x130>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    28ea:	f1b8 0f00 	cmp.w	r8, #0
    28ee:	f47f af6b 	bne.w	27c8 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    28f2:	4605      	mov	r5, r0
			*nested_exc = true;
    28f4:	2601      	movs	r6, #1
    28f6:	e767      	b.n	27c8 <z_arm_fault+0x60>
    28f8:	e000ed00 	.word	0xe000ed00
    28fc:	0105eda6 	.word	0x0105eda6
    2900:	0000a550 	.word	0x0000a550
    2904:	0000a21f 	.word	0x0000a21f
    2908:	00009b92 	.word	0x00009b92
    290c:	0000a574 	.word	0x0000a574
    2910:	0000a590 	.word	0x0000a590
    2914:	0000a5b6 	.word	0x0000a5b6
    2918:	e000ed28 	.word	0xe000ed28
    291c:	e000ed29 	.word	0xe000ed29
    2920:	e000ed2a 	.word	0xe000ed2a
    2924:	e000edd0 	.word	0xe000edd0
    2928:	0000a5da 	.word	0x0000a5da
    292c:	0000a522 	.word	0x0000a522
    2930:	0000a537 	.word	0x0000a537
    2934:	0000a603 	.word	0x0000a603

00002938 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2938:	4b04      	ldr	r3, [pc, #16]	; (294c <z_arm_fault_init+0x14>)
    293a:	695a      	ldr	r2, [r3, #20]
    293c:	f042 0210 	orr.w	r2, r2, #16
    2940:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2942:	695a      	ldr	r2, [r3, #20]
    2944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2948:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    294a:	4770      	bx	lr
    294c:	e000ed00 	.word	0xe000ed00

00002950 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2950:	4b04      	ldr	r3, [pc, #16]	; (2964 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2952:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2954:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    2956:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2958:	d003      	beq.n	2962 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    295a:	4903      	ldr	r1, [pc, #12]	; (2968 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    295c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2960:	600a      	str	r2, [r1, #0]

00002962 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2962:	4770      	bx	lr
	ldr r3, =_kernel
    2964:	20000c88 	.word	0x20000c88
	ldr r1, =_SCS_ICSR
    2968:	e000ed04 	.word	0xe000ed04

0000296c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    296c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2970:	4905      	ldr	r1, [pc, #20]	; (2988 <sys_arch_reboot+0x1c>)
    2972:	4b06      	ldr	r3, [pc, #24]	; (298c <sys_arch_reboot+0x20>)
    2974:	68ca      	ldr	r2, [r1, #12]
    2976:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    297a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    297c:	60cb      	str	r3, [r1, #12]
    297e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2982:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2984:	e7fd      	b.n	2982 <sys_arch_reboot+0x16>
    2986:	bf00      	nop
    2988:	e000ed00 	.word	0xe000ed00
    298c:	05fa0004 	.word	0x05fa0004

00002990 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2990:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2992:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2994:	4a05      	ldr	r2, [pc, #20]	; (29ac <z_arm_clear_arm_mpu_config+0x1c>)
    2996:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    2998:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    299c:	428b      	cmp	r3, r1
    299e:	d100      	bne.n	29a2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    29a0:	4770      	bx	lr
  mpu->RNR = rnr;
    29a2:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    29a4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    29a6:	3301      	adds	r3, #1
    29a8:	e7f8      	b.n	299c <z_arm_clear_arm_mpu_config+0xc>
    29aa:	bf00      	nop
    29ac:	e000ed90 	.word	0xe000ed90

000029b0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    29b0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    29b2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    29b4:	2400      	movs	r4, #0
    29b6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    29ba:	f7ff ffe9 	bl	2990 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    29be:	4a0e      	ldr	r2, [pc, #56]	; (29f8 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    29c0:	4623      	mov	r3, r4
    29c2:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    29c4:	f04f 34ff 	mov.w	r4, #4294967295
    29c8:	f103 0020 	add.w	r0, r3, #32
    29cc:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    29ce:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    29d0:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    29d4:	d1f8      	bne.n	29c8 <z_arm_init_arch_hw_at_boot+0x18>
    29d6:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    29d8:	f04f 30ff 	mov.w	r0, #4294967295
    29dc:	f103 0260 	add.w	r2, r3, #96	; 0x60
    29e0:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    29e2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    29e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    29e8:	d1f8      	bne.n	29dc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    29ea:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    29ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29f0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    29f4:	bd10      	pop	{r4, pc}
    29f6:	bf00      	nop
    29f8:	e000e100 	.word	0xe000e100

000029fc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    29fc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    29fe:	2120      	movs	r1, #32
    2a00:	4803      	ldr	r0, [pc, #12]	; (2a10 <z_arm_interrupt_init+0x14>)
    2a02:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2a04:	3301      	adds	r3, #1
    2a06:	2b41      	cmp	r3, #65	; 0x41
    2a08:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2a0c:	d1f9      	bne.n	2a02 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2a0e:	4770      	bx	lr
    2a10:	e000e100 	.word	0xe000e100

00002a14 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2a14:	4b06      	ldr	r3, [pc, #24]	; (2a30 <z_impl_k_thread_abort+0x1c>)
    2a16:	689b      	ldr	r3, [r3, #8]
    2a18:	4283      	cmp	r3, r0
    2a1a:	d107      	bne.n	2a2c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2a1c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2a20:	b123      	cbz	r3, 2a2c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2a22:	4a04      	ldr	r2, [pc, #16]	; (2a34 <z_impl_k_thread_abort+0x20>)
    2a24:	6853      	ldr	r3, [r2, #4]
    2a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2a2a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2a2c:	f003 b8ba 	b.w	5ba4 <z_thread_abort>
    2a30:	20000c88 	.word	0x20000c88
    2a34:	e000ed00 	.word	0xe000ed00

00002a38 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    2a38:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    2a3a:	4b0c      	ldr	r3, [pc, #48]	; (2a6c <tz_nonsecure_state_setup+0x34>)
    2a3c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    2a3e:	6803      	ldr	r3, [r0, #0]
    2a40:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    2a44:	6843      	ldr	r3, [r0, #4]
    2a46:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    2a4a:	7b02      	ldrb	r2, [r0, #12]
    2a4c:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    2a50:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    2a54:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    2a58:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    2a5a:	bf48      	it	mi
    2a5c:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    2a60:	b109      	cbz	r1, 2a66 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    2a62:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    2a66:	f383 8894 	msr	CONTROL_NS, r3
}
    2a6a:	4770      	bx	lr
    2a6c:	e002ed00 	.word	0xe002ed00

00002a70 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a70:	4a08      	ldr	r2, [pc, #32]	; (2a94 <tz_nbanked_exception_target_state_set+0x24>)
    2a72:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    2a74:	b148      	cbz	r0, 2a8a <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    2a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2a7a:	041b      	lsls	r3, r3, #16
    2a7c:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2a7e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2a86:	60d3      	str	r3, [r2, #12]
}
    2a88:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a8a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    2a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2a90:	e7f5      	b.n	2a7e <tz_nbanked_exception_target_state_set+0xe>
    2a92:	bf00      	nop
    2a94:	e000ed00 	.word	0xe000ed00

00002a98 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a98:	4a08      	ldr	r2, [pc, #32]	; (2abc <tz_nonsecure_exception_prio_config+0x24>)
    2a9a:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    2a9c:	b140      	cbz	r0, 2ab0 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a9e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    2aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2aac:	60d3      	str	r3, [r2, #12]
}
    2aae:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    2ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    2ab4:	041b      	lsls	r3, r3, #16
    2ab6:	0c1b      	lsrs	r3, r3, #16
    2ab8:	e7f4      	b.n	2aa4 <tz_nonsecure_exception_prio_config+0xc>
    2aba:	bf00      	nop
    2abc:	e000ed00 	.word	0xe000ed00

00002ac0 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2ac0:	4a08      	ldr	r2, [pc, #32]	; (2ae4 <tz_nonsecure_system_reset_req_block+0x24>)
    2ac2:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    2ac4:	b140      	cbz	r0, 2ad8 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2ac6:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    2ac8:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    2ad4:	60d3      	str	r3, [r2, #12]
}
    2ad6:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    2ad8:	f023 0308 	bic.w	r3, r3, #8
    2adc:	041b      	lsls	r3, r3, #16
    2ade:	0c1b      	lsrs	r3, r3, #16
    2ae0:	e7f4      	b.n	2acc <tz_nonsecure_system_reset_req_block+0xc>
    2ae2:	bf00      	nop
    2ae4:	e000ed00 	.word	0xe000ed00

00002ae8 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    2ae8:	4a03      	ldr	r2, [pc, #12]	; (2af8 <tz_nonsecure_fpu_access_enable+0x10>)
    2aea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2aee:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2af2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    2af6:	4770      	bx	lr
    2af8:	e000ed00 	.word	0xe000ed00

00002afc <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    2afc:	4b08      	ldr	r3, [pc, #32]	; (2b20 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    2afe:	681a      	ldr	r2, [r3, #0]
    2b00:	b118      	cbz	r0, 2b0a <tz_sau_configure+0xe>
    2b02:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2b06:	601a      	str	r2, [r3, #0]
		}
	}
}
    2b08:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    2b0a:	f022 0201 	bic.w	r2, r2, #1
    2b0e:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2b10:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    2b12:	b111      	cbz	r1, 2b1a <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2b14:	f042 0202 	orr.w	r2, r2, #2
    2b18:	e7f5      	b.n	2b06 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2b1a:	f022 0202 	bic.w	r2, r2, #2
    2b1e:	e7f2      	b.n	2b06 <tz_sau_configure+0xa>
    2b20:	e000edd0 	.word	0xe000edd0

00002b24 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2b26:	4c09      	ldr	r4, [pc, #36]	; (2b4c <z_arm_configure_static_mpu_regions+0x28>)
    2b28:	4a09      	ldr	r2, [pc, #36]	; (2b50 <z_arm_configure_static_mpu_regions+0x2c>)
    2b2a:	4623      	mov	r3, r4
    2b2c:	2101      	movs	r1, #1
    2b2e:	4809      	ldr	r0, [pc, #36]	; (2b54 <z_arm_configure_static_mpu_regions+0x30>)
    2b30:	f000 f91a 	bl	2d68 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2b34:	2300      	movs	r3, #0
    2b36:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    2b38:	4b07      	ldr	r3, [pc, #28]	; (2b58 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2b3a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    2b3c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2b3e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2b40:	9301      	str	r3, [sp, #4]
    2b42:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2b44:	f000 f92c 	bl	2da0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2b48:	b004      	add	sp, #16
    2b4a:	bd10      	pop	{r4, pc}
    2b4c:	20010000 	.word	0x20010000
    2b50:	20000000 	.word	0x20000000
    2b54:	00009930 	.word	0x00009930
    2b58:	200001e0 	.word	0x200001e0

00002b5c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2b5c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2b5e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2b60:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2b62:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2b66:	f004 031f 	and.w	r3, r4, #31
    2b6a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2b6c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2b6e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2b70:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2b74:	4904      	ldr	r1, [pc, #16]	; (2b88 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2b76:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2b7a:	f043 0301 	orr.w	r3, r3, #1
    2b7e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2b80:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    2b82:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2b84:	bd10      	pop	{r4, pc}
    2b86:	bf00      	nop
    2b88:	e000ed90 	.word	0xe000ed90

00002b8c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2b8c:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2b8e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2b90:	680c      	ldr	r4, [r1, #0]
{
    2b92:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2b94:	890a      	ldrh	r2, [r1, #8]
    2b96:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    2b98:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2b9a:	3b01      	subs	r3, #1
    2b9c:	f024 041f 	bic.w	r4, r4, #31
    2ba0:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    2ba2:	f002 021f 	and.w	r2, r2, #31
    2ba6:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2baa:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2bae:	280f      	cmp	r0, #15
    2bb0:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    2bb2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2bb6:	9303      	str	r3, [sp, #12]
    2bb8:	d909      	bls.n	2bce <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2bba:	4602      	mov	r2, r0
    2bbc:	2145      	movs	r1, #69	; 0x45
    2bbe:	4806      	ldr	r0, [pc, #24]	; (2bd8 <mpu_configure_region+0x4c>)
    2bc0:	f006 f92d 	bl	8e1e <z_log_minimal_printk>
    2bc4:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2bc8:	4620      	mov	r0, r4
    2bca:	b005      	add	sp, #20
    2bcc:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    2bce:	4669      	mov	r1, sp
    2bd0:	f7ff ffc4 	bl	2b5c <region_init>
	return region_allocate_and_init(index,
    2bd4:	e7f8      	b.n	2bc8 <mpu_configure_region+0x3c>
    2bd6:	bf00      	nop
    2bd8:	0000a61f 	.word	0x0000a61f

00002bdc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2be0:	4689      	mov	r9, r1
    2be2:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2be4:	4606      	mov	r6, r0
    2be6:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2bea:	4d52      	ldr	r5, [pc, #328]	; (2d34 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2bec:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    2bee:	45c8      	cmp	r8, r9
    2bf0:	da23      	bge.n	2c3a <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    2bf2:	6877      	ldr	r7, [r6, #4]
    2bf4:	2f00      	cmp	r7, #0
    2bf6:	d042      	beq.n	2c7e <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    2bf8:	2f1f      	cmp	r7, #31
    2bfa:	d917      	bls.n	2c2c <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    2bfc:	06fb      	lsls	r3, r7, #27
    2bfe:	d115      	bne.n	2c2c <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    2c00:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    2c04:	f01a 0f1f 	tst.w	sl, #31
    2c08:	d110      	bne.n	2c2c <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2c0a:	4650      	mov	r0, sl
    2c0c:	f006 f9eb 	bl	8fe6 <arm_cmse_mpu_region_get>
    2c10:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2c12:	eb07 000a 	add.w	r0, r7, sl
    2c16:	3801      	subs	r0, #1
    2c18:	f006 f9e5 	bl	8fe6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2c1c:	4583      	cmp	fp, r0
    2c1e:	d010      	beq.n	2c42 <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    2c20:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2c24:	465a      	mov	r2, fp
    2c26:	2145      	movs	r1, #69	; 0x45
    2c28:	4843      	ldr	r0, [pc, #268]	; (2d38 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    2c2a:	e002      	b.n	2c32 <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2c2c:	4642      	mov	r2, r8
    2c2e:	2145      	movs	r1, #69	; 0x45
    2c30:	4842      	ldr	r0, [pc, #264]	; (2d3c <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2c32:	f006 f8f4 	bl	8e1e <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2c36:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2c3a:	4620      	mov	r0, r4
    2c3c:	b005      	add	sp, #20
    2c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2c42:	f11b 0f16 	cmn.w	fp, #22
    2c46:	d0ed      	beq.n	2c24 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    2c48:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2c4a:	455b      	cmp	r3, fp
    2c4c:	dbea      	blt.n	2c24 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    2c4e:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2c52:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    2c54:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2c58:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2c5a:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2c5e:	e9d6 3200 	ldrd	r3, r2, [r6]
    2c62:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2c64:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2c66:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2c6a:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    2c6e:	d11c      	bne.n	2caa <mpu_configure_regions_and_partition.constprop.0+0xce>
    2c70:	4557      	cmp	r7, sl
    2c72:	d108      	bne.n	2c86 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    2c74:	4631      	mov	r1, r6
    2c76:	fa5f f08b 	uxtb.w	r0, fp
    2c7a:	f7ff ff87 	bl	2b8c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    2c7e:	f108 0801 	add.w	r8, r8, #1
    2c82:	360c      	adds	r6, #12
    2c84:	e7b3      	b.n	2bee <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    2c86:	4631      	mov	r1, r6
	MPU->RNR = index;
    2c88:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2c8c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    2c8e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2c92:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2c96:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2c98:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    2c9a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    2c9c:	f7ff ff76 	bl	2b8c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2ca0:	f110 0f16 	cmn.w	r0, #22
    2ca4:	d0c7      	beq.n	2c36 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    2ca6:	1c44      	adds	r4, r0, #1
    2ca8:	e7e9      	b.n	2c7e <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    2caa:	3b01      	subs	r3, #1
    2cac:	4557      	cmp	r7, sl
    2cae:	b2e0      	uxtb	r0, r4
    2cb0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    2cb4:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    2cb8:	d106      	bne.n	2cc8 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2cba:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2cbc:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2cbe:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2cc2:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2cc4:	612b      	str	r3, [r5, #16]
			reg_index =
    2cc6:	e7e9      	b.n	2c9c <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2cc8:	6929      	ldr	r1, [r5, #16]
    2cca:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2cce:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2cd0:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2cd2:	4631      	mov	r1, r6
    2cd4:	f7ff ff5a 	bl	2b8c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2cd8:	f110 0f16 	cmn.w	r0, #22
    2cdc:	d0ab      	beq.n	2c36 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    2cde:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    2ce2:	68ea      	ldr	r2, [r5, #12]
    2ce4:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    2ce8:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    2cea:	f362 0304 	bfi	r3, r2, #0, #5
    2cee:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2cf2:	692b      	ldr	r3, [r5, #16]
    2cf4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2cf8:	085b      	lsrs	r3, r3, #1
    2cfa:	f363 1247 	bfi	r2, r3, #5, #3
    2cfe:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    2d02:	e9d6 3200 	ldrd	r3, r2, [r6]
    2d06:	4413      	add	r3, r2
    2d08:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    2d0a:	f023 031f 	bic.w	r3, r3, #31
    2d0e:	443b      	add	r3, r7
			reg_index++;
    2d10:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2d12:	eba3 0a0a 	sub.w	sl, r3, sl
    2d16:	b2e0      	uxtb	r0, r4
    2d18:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    2d1c:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    2d1e:	9303      	str	r3, [sp, #12]
    2d20:	d903      	bls.n	2d2a <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2d22:	4602      	mov	r2, r0
    2d24:	2145      	movs	r1, #69	; 0x45
    2d26:	4806      	ldr	r0, [pc, #24]	; (2d40 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    2d28:	e783      	b.n	2c32 <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    2d2a:	4669      	mov	r1, sp
    2d2c:	f7ff ff16 	bl	2b5c <region_init>
    2d30:	e7b9      	b.n	2ca6 <mpu_configure_regions_and_partition.constprop.0+0xca>
    2d32:	bf00      	nop
    2d34:	e000ed90 	.word	0xe000ed90
    2d38:	0000a672 	.word	0x0000a672
    2d3c:	0000a64a 	.word	0x0000a64a
    2d40:	0000a61f 	.word	0x0000a61f

00002d44 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2d44:	2205      	movs	r2, #5
    2d46:	4b03      	ldr	r3, [pc, #12]	; (2d54 <arm_core_mpu_enable+0x10>)
    2d48:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2d4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d4e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2d52:	4770      	bx	lr
    2d54:	e000ed90 	.word	0xe000ed90

00002d58 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2d58:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2d5c:	2200      	movs	r2, #0
    2d5e:	4b01      	ldr	r3, [pc, #4]	; (2d64 <arm_core_mpu_disable+0xc>)
    2d60:	605a      	str	r2, [r3, #4]
}
    2d62:	4770      	bx	lr
    2d64:	e000ed90 	.word	0xe000ed90

00002d68 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2d68:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2d6a:	4c0a      	ldr	r4, [pc, #40]	; (2d94 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2d6c:	7822      	ldrb	r2, [r4, #0]
    2d6e:	f7ff ff35 	bl	2bdc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2d72:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2d74:	3016      	adds	r0, #22
    2d76:	d10c      	bne.n	2d92 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2d78:	4907      	ldr	r1, [pc, #28]	; (2d98 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    2d7a:	4808      	ldr	r0, [pc, #32]	; (2d9c <arm_core_mpu_configure_static_mpu_regions+0x34>)
    2d7c:	f240 1205 	movw	r2, #261	; 0x105
    2d80:	f005 ff6c 	bl	8c5c <printk>
			regions_num);
	}
}
    2d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2d88:	f240 1105 	movw	r1, #261	; 0x105
    2d8c:	4802      	ldr	r0, [pc, #8]	; (2d98 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    2d8e:	f006 b831 	b.w	8df4 <assert_post_action>
}
    2d92:	bd10      	pop	{r4, pc}
    2d94:	20001794 	.word	0x20001794
    2d98:	0000a69a 	.word	0x0000a69a
    2d9c:	00009b92 	.word	0x00009b92

00002da0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    2da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2da4:	4d2d      	ldr	r5, [pc, #180]	; (2e5c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
    2da6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2da8:	4606      	mov	r6, r0
    2daa:	f04f 0800 	mov.w	r8, #0
    2dae:	46ab      	mov	fp, r5
	MPU->RNR = index;
    2db0:	4f2b      	ldr	r7, [pc, #172]	; (2e60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2db2:	45d0      	cmp	r8, sl
    2db4:	db02      	blt.n	2dbc <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    2db6:	b003      	add	sp, #12
    2db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    2dbc:	f8d6 9004 	ldr.w	r9, [r6, #4]
    2dc0:	f1b9 0f00 	cmp.w	r9, #0
    2dc4:	d044      	beq.n	2e50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2dc6:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2dc8:	4608      	mov	r0, r1
    2dca:	9101      	str	r1, [sp, #4]
    2dcc:	f006 f90b 	bl	8fe6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2dd0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2dd2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2dd4:	eb09 0001 	add.w	r0, r9, r1
    2dd8:	3801      	subs	r0, #1
    2dda:	f006 f904 	bl	8fe6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2dde:	4284      	cmp	r4, r0
    2de0:	f04f 0214 	mov.w	r2, #20
    2de4:	4b1f      	ldr	r3, [pc, #124]	; (2e64 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    2de6:	d013      	beq.n	2e10 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    2de8:	f06f 0315 	mvn.w	r3, #21
    2dec:	fb02 f808 	mul.w	r8, r2, r8
    2df0:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2df4:	f240 1215 	movw	r2, #277	; 0x115
    2df8:	491b      	ldr	r1, [pc, #108]	; (2e68 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    2dfa:	481c      	ldr	r0, [pc, #112]	; (2e6c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    2dfc:	f005 ff2e 	bl	8c5c <printk>
    2e00:	f240 1115 	movw	r1, #277	; 0x115
    2e04:	4818      	ldr	r0, [pc, #96]	; (2e68 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
    2e06:	b003      	add	sp, #12
    2e08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2e0c:	f005 bff2 	b.w	8df4 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    2e10:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2e14:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2e16:	d0ed      	beq.n	2df4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2e18:	7819      	ldrb	r1, [r3, #0]
    2e1a:	42a1      	cmp	r1, r4
    2e1c:	ddea      	ble.n	2df4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    2e1e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    2e22:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    2e24:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    2e26:	68fc      	ldr	r4, [r7, #12]
    2e28:	f100 0108 	add.w	r1, r0, #8
    2e2c:	7b00      	ldrb	r0, [r0, #12]
    2e2e:	f364 0004 	bfi	r0, r4, #0, #5
    2e32:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2e34:	6938      	ldr	r0, [r7, #16]
    2e36:	790c      	ldrb	r4, [r1, #4]
    2e38:	0840      	lsrs	r0, r0, #1
    2e3a:	f360 1447 	bfi	r4, r0, #5, #3
    2e3e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    2e40:	68f9      	ldr	r1, [r7, #12]
    2e42:	f021 011f 	bic.w	r1, r1, #31
    2e46:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    2e48:	6939      	ldr	r1, [r7, #16]
    2e4a:	f021 011f 	bic.w	r1, r1, #31
    2e4e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2e50:	f108 0801 	add.w	r8, r8, #1
    2e54:	3514      	adds	r5, #20
    2e56:	360c      	adds	r6, #12
    2e58:	e7ab      	b.n	2db2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    2e5a:	bf00      	nop
    2e5c:	20000a6c 	.word	0x20000a6c
    2e60:	e000ed90 	.word	0xe000ed90
    2e64:	20001794 	.word	0x20001794
    2e68:	0000a69a 	.word	0x0000a69a
    2e6c:	00009b92 	.word	0x00009b92

00002e70 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2e70:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2e72:	4d1b      	ldr	r5, [pc, #108]	; (2ee0 <z_arm_mpu_init+0x70>)
    2e74:	682e      	ldr	r6, [r5, #0]
    2e76:	2e10      	cmp	r6, #16
    2e78:	d90d      	bls.n	2e96 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2e7a:	f44f 729e 	mov.w	r2, #316	; 0x13c
    2e7e:	4919      	ldr	r1, [pc, #100]	; (2ee4 <z_arm_mpu_init+0x74>)
    2e80:	4819      	ldr	r0, [pc, #100]	; (2ee8 <z_arm_mpu_init+0x78>)
    2e82:	f005 feeb 	bl	8c5c <printk>
    2e86:	4817      	ldr	r0, [pc, #92]	; (2ee4 <z_arm_mpu_init+0x74>)
    2e88:	f44f 719e 	mov.w	r1, #316	; 0x13c
    2e8c:	f005 ffb2 	bl	8df4 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2e90:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2e94:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    2e96:	f7ff ff5f 	bl	2d58 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2e9a:	2000      	movs	r0, #0
	MPU->MAIR0 =
    2e9c:	4c13      	ldr	r4, [pc, #76]	; (2eec <z_arm_mpu_init+0x7c>)
    2e9e:	4a14      	ldr	r2, [pc, #80]	; (2ef0 <z_arm_mpu_init+0x80>)
    2ea0:	6322      	str	r2, [r4, #48]	; 0x30
    2ea2:	4286      	cmp	r6, r0
    2ea4:	d115      	bne.n	2ed2 <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
    2ea6:	4b13      	ldr	r3, [pc, #76]	; (2ef4 <z_arm_mpu_init+0x84>)
    2ea8:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    2eaa:	f7ff ff4b 	bl	2d44 <arm_core_mpu_enable>
	__ASSERT(
    2eae:	6823      	ldr	r3, [r4, #0]
    2eb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2eb4:	2b10      	cmp	r3, #16
    2eb6:	d00a      	beq.n	2ece <z_arm_mpu_init+0x5e>
    2eb8:	490a      	ldr	r1, [pc, #40]	; (2ee4 <z_arm_mpu_init+0x74>)
    2eba:	480b      	ldr	r0, [pc, #44]	; (2ee8 <z_arm_mpu_init+0x78>)
    2ebc:	f44f 72cf 	mov.w	r2, #414	; 0x19e
    2ec0:	f005 fecc 	bl	8c5c <printk>
    2ec4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    2ec8:	4806      	ldr	r0, [pc, #24]	; (2ee4 <z_arm_mpu_init+0x74>)
    2eca:	f005 ff93 	bl	8df4 <assert_post_action>
	return 0;
    2ece:	2000      	movs	r0, #0
    2ed0:	e7e0      	b.n	2e94 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2ed2:	6869      	ldr	r1, [r5, #4]
    2ed4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2ed8:	f7ff fe40 	bl	2b5c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2edc:	3001      	adds	r0, #1
    2ede:	e7e0      	b.n	2ea2 <z_arm_mpu_init+0x32>
    2ee0:	0000993c 	.word	0x0000993c
    2ee4:	0000a69a 	.word	0x0000a69a
    2ee8:	00009b92 	.word	0x00009b92
    2eec:	e000ed90 	.word	0xe000ed90
    2ef0:	0044ffaa 	.word	0x0044ffaa
    2ef4:	20001794 	.word	0x20001794

00002ef8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2ef8:	4b01      	ldr	r3, [pc, #4]	; (2f00 <__stdout_hook_install+0x8>)
    2efa:	6018      	str	r0, [r3, #0]
}
    2efc:	4770      	bx	lr
    2efe:	bf00      	nop
    2f00:	20000028 	.word	0x20000028

00002f04 <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
    2f04:	b510      	push	{r4, lr}
	err = adp536x_init(ADP536X_I2C_DEV_NAME);
    2f06:	482a      	ldr	r0, [pc, #168]	; (2fb0 <thingy91_board_init+0xac>)
    2f08:	f7fe fdf4 	bl	1af4 <adp536x_init>
	if (err) {
    2f0c:	4604      	mov	r4, r0
    2f0e:	b158      	cbz	r0, 2f28 <thingy91_board_init+0x24>
		LOG_ERR("ADP536X failed to initialize, error: %d\n", err);
    2f10:	2145      	movs	r1, #69	; 0x45
    2f12:	4602      	mov	r2, r0
    2f14:	4827      	ldr	r0, [pc, #156]	; (2fb4 <thingy91_board_init+0xb0>)
		LOG_ERR("Could not enable charging: %d\n", err);
    2f16:	f005 ff82 	bl	8e1e <z_log_minimal_printk>
	int err;

	err = power_mgmt_init();
	if (err) {
		LOG_ERR("power_mgmt_init failed with error: %d", err);
    2f1a:	4622      	mov	r2, r4
    2f1c:	2145      	movs	r1, #69	; 0x45
    2f1e:	4826      	ldr	r0, [pc, #152]	; (2fb8 <thingy91_board_init+0xb4>)
    2f20:	f005 ff7d 	bl	8e1e <z_log_minimal_printk>
		return err;
	}

	return 0;
}
    2f24:	4620      	mov	r0, r4
    2f26:	bd10      	pop	{r4, pc}
	err = adp536x_buck_1v8_set();
    2f28:	f006 f802 	bl	8f30 <adp536x_buck_1v8_set>
	if (err) {
    2f2c:	4604      	mov	r4, r0
    2f2e:	b118      	cbz	r0, 2f38 <thingy91_board_init+0x34>
		LOG_ERR("Could not set buck to 1.8 V, error: %d\n", err);
    2f30:	4602      	mov	r2, r0
    2f32:	2145      	movs	r1, #69	; 0x45
    2f34:	4821      	ldr	r0, [pc, #132]	; (2fbc <thingy91_board_init+0xb8>)
    2f36:	e7ee      	b.n	2f16 <thingy91_board_init+0x12>
	err = adp536x_buckbst_3v3_set();
    2f38:	f006 f806 	bl	8f48 <adp536x_buckbst_3v3_set>
	if (err) {
    2f3c:	4604      	mov	r4, r0
    2f3e:	b118      	cbz	r0, 2f48 <thingy91_board_init+0x44>
		LOG_ERR("Could not set buck/boost to 3.3 V, error: %d\n", err);
    2f40:	4602      	mov	r2, r0
    2f42:	2145      	movs	r1, #69	; 0x45
    2f44:	481e      	ldr	r0, [pc, #120]	; (2fc0 <thingy91_board_init+0xbc>)
    2f46:	e7e6      	b.n	2f16 <thingy91_board_init+0x12>
	err = adp536x_buckbst_enable(true);
    2f48:	2001      	movs	r0, #1
    2f4a:	f006 f802 	bl	8f52 <adp536x_buckbst_enable>
	if (err) {
    2f4e:	4604      	mov	r4, r0
    2f50:	b118      	cbz	r0, 2f5a <thingy91_board_init+0x56>
		LOG_ERR("Could not enable buck/boost output, error: %d\n", err);
    2f52:	4602      	mov	r2, r0
    2f54:	2145      	movs	r1, #69	; 0x45
    2f56:	481b      	ldr	r0, [pc, #108]	; (2fc4 <thingy91_board_init+0xc0>)
    2f58:	e7dd      	b.n	2f16 <thingy91_board_init+0x12>
	err = adp536x_buck_discharge_set(true);
    2f5a:	2001      	movs	r0, #1
    2f5c:	f005 ffed 	bl	8f3a <adp536x_buck_discharge_set>
	if (err) {
    2f60:	4604      	mov	r4, r0
    2f62:	2800      	cmp	r0, #0
    2f64:	d1d9      	bne.n	2f1a <thingy91_board_init+0x16>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
    2f66:	2007      	movs	r0, #7
    2f68:	f005 ffd0 	bl	8f0c <adp536x_vbus_current_set>
	if (err) {
    2f6c:	4604      	mov	r4, r0
    2f6e:	b118      	cbz	r0, 2f78 <thingy91_board_init+0x74>
		LOG_ERR("Could not set VBUS current limit, error: %d\n", err);
    2f70:	4602      	mov	r2, r0
    2f72:	2145      	movs	r1, #69	; 0x45
    2f74:	4814      	ldr	r0, [pc, #80]	; (2fc8 <thingy91_board_init+0xc4>)
    2f76:	e7ce      	b.n	2f16 <thingy91_board_init+0x12>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
    2f78:	201f      	movs	r0, #31
    2f7a:	f005 ffc1 	bl	8f00 <adp536x_charger_current_set>
	if (err) {
    2f7e:	4604      	mov	r4, r0
    2f80:	b118      	cbz	r0, 2f8a <thingy91_board_init+0x86>
		LOG_ERR("Could not set charging current, error: %d\n", err);
    2f82:	4602      	mov	r2, r0
    2f84:	2145      	movs	r1, #69	; 0x45
    2f86:	4811      	ldr	r0, [pc, #68]	; (2fcc <thingy91_board_init+0xc8>)
    2f88:	e7c5      	b.n	2f16 <thingy91_board_init+0x12>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
    2f8a:	2007      	movs	r0, #7
    2f8c:	f005 ffc9 	bl	8f22 <adp536x_oc_chg_current_set>
	if (err) {
    2f90:	4604      	mov	r4, r0
    2f92:	b118      	cbz	r0, 2f9c <thingy91_board_init+0x98>
		LOG_ERR("Could not set charge current protection, error: %d\n",
    2f94:	4602      	mov	r2, r0
    2f96:	2145      	movs	r1, #69	; 0x45
    2f98:	480d      	ldr	r0, [pc, #52]	; (2fd0 <thingy91_board_init+0xcc>)
    2f9a:	e7bc      	b.n	2f16 <thingy91_board_init+0x12>
	err = adp536x_charging_enable(true);
    2f9c:	2001      	movs	r0, #1
    2f9e:	f005 ffbb 	bl	8f18 <adp536x_charging_enable>
	if (err) {
    2fa2:	4604      	mov	r4, r0
    2fa4:	2800      	cmp	r0, #0
    2fa6:	d0bd      	beq.n	2f24 <thingy91_board_init+0x20>
		LOG_ERR("Could not enable charging: %d\n", err);
    2fa8:	4602      	mov	r2, r0
    2faa:	2145      	movs	r1, #69	; 0x45
    2fac:	4809      	ldr	r0, [pc, #36]	; (2fd4 <thingy91_board_init+0xd0>)
    2fae:	e7b2      	b.n	2f16 <thingy91_board_init+0x12>
    2fb0:	0000a6e0 	.word	0x0000a6e0
    2fb4:	0000a6e6 	.word	0x0000a6e6
    2fb8:	0000a867 	.word	0x0000a867
    2fbc:	0000a714 	.word	0x0000a714
    2fc0:	0000a741 	.word	0x0000a741
    2fc4:	0000a774 	.word	0x0000a774
    2fc8:	0000a7a8 	.word	0x0000a7a8
    2fcc:	0000a7da 	.word	0x0000a7da
    2fd0:	0000a80a 	.word	0x0000a80a
    2fd4:	0000a843 	.word	0x0000a843

00002fd8 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
    2fd8:	b510      	push	{r4, lr}
    2fda:	4604      	mov	r4, r0
    2fdc:	2200      	movs	r2, #0
    2fde:	2101      	movs	r1, #1
    2fe0:	200a      	movs	r0, #10
    2fe2:	f7ff f937 	bl	2254 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    2fe6:	6860      	ldr	r0, [r4, #4]
    2fe8:	6923      	ldr	r3, [r4, #16]
    2fea:	4a09      	ldr	r2, [pc, #36]	; (3010 <twim_2_init+0x38>)
    2fec:	f100 0108 	add.w	r1, r0, #8
    2ff0:	f000 fd8e 	bl	3b10 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    2ff4:	4b07      	ldr	r3, [pc, #28]	; (3014 <twim_2_init+0x3c>)
    2ff6:	4298      	cmp	r0, r3
    2ff8:	d007      	beq.n	300a <twim_2_init+0x32>
		LOG_ERR("Failed to initialize device: %s",
    2ffa:	4807      	ldr	r0, [pc, #28]	; (3018 <twim_2_init+0x40>)
    2ffc:	2145      	movs	r1, #69	; 0x45
    2ffe:	6822      	ldr	r2, [r4, #0]
    3000:	f005 ff0d 	bl	8e1e <z_log_minimal_printk>
		return -EBUSY;
    3004:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(2);
    3008:	bd10      	pop	{r4, pc}
	return 0;
    300a:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(2);
    300c:	e7fc      	b.n	3008 <twim_2_init+0x30>
    300e:	bf00      	nop
    3010:	0000305d 	.word	0x0000305d
    3014:	0bad0000 	.word	0x0bad0000
    3018:	0000a8a3 	.word	0x0000a8a3

0000301c <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    301c:	07ca      	lsls	r2, r1, #31
{
    301e:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
    3020:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    3022:	d409      	bmi.n	3038 <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(dev_config)) {
    3024:	f3c1 0242 	ubfx	r2, r1, #1, #3
    3028:	2a01      	cmp	r2, #1
    302a:	d008      	beq.n	303e <i2c_nrfx_twim_configure+0x22>
    302c:	2a02      	cmp	r2, #2
    302e:	d00f      	beq.n	3050 <i2c_nrfx_twim_configure+0x34>
		LOG_ERR("unsupported speed");
    3030:	2145      	movs	r1, #69	; 0x45
    3032:	4809      	ldr	r0, [pc, #36]	; (3058 <i2c_nrfx_twim_configure+0x3c>)
    3034:	f005 fef3 	bl	8e1e <z_log_minimal_printk>
		return -EINVAL;
    3038:	f06f 0015 	mvn.w	r0, #21
    303c:	e007      	b.n	304e <i2c_nrfx_twim_configure+0x32>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    303e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    3048:	6903      	ldr	r3, [r0, #16]
	return 0;
    304a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    304c:	6259      	str	r1, [r3, #36]	; 0x24
}
    304e:	bd08      	pop	{r3, pc}
    3050:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    3054:	681b      	ldr	r3, [r3, #0]
    3056:	e7f5      	b.n	3044 <i2c_nrfx_twim_configure+0x28>
    3058:	0000a8c8 	.word	0x0000a8c8

0000305c <event_handler>:
	switch (p_event->type) {
    305c:	7803      	ldrb	r3, [r0, #0]
    305e:	2b01      	cmp	r3, #1
    3060:	d008      	beq.n	3074 <event_handler+0x18>
    3062:	2b02      	cmp	r3, #2
    3064:	d008      	beq.n	3078 <event_handler+0x1c>
    3066:	b94b      	cbnz	r3, 307c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    3068:	4b05      	ldr	r3, [pc, #20]	; (3080 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    306a:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    306c:	f101 0010 	add.w	r0, r1, #16
    3070:	f001 be2a 	b.w	4cc8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3074:	4b03      	ldr	r3, [pc, #12]	; (3084 <event_handler+0x28>)
    3076:	e7f8      	b.n	306a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3078:	4b03      	ldr	r3, [pc, #12]	; (3088 <event_handler+0x2c>)
    307a:	e7f6      	b.n	306a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    307c:	4b03      	ldr	r3, [pc, #12]	; (308c <event_handler+0x30>)
    307e:	e7f4      	b.n	306a <event_handler+0xe>
    3080:	0bad0000 	.word	0x0bad0000
    3084:	0bae0001 	.word	0x0bae0001
    3088:	0bae0002 	.word	0x0bae0002
    308c:	0bad0001 	.word	0x0bad0001

00003090 <i2c_nrfx_twim_transfer>:
{
    3090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3094:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    3096:	2214      	movs	r2, #20
{
    3098:	461e      	mov	r6, r3
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
    309a:	6904      	ldr	r4, [r0, #16]
{
    309c:	b08b      	sub	sp, #44	; 0x2c
    309e:	4605      	mov	r5, r0
    30a0:	4689      	mov	r9, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    30a2:	eb0d 0002 	add.w	r0, sp, r2
    30a6:	2100      	movs	r1, #0
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
    30a8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
    30ac:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
	nrfx_twim_xfer_desc_t cur_xfer = {
    30b0:	f006 f815 	bl	90de <memset>
    30b4:	f88d 6015 	strb.w	r6, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
    30b8:	f04f 32ff 	mov.w	r2, #4294967295
    30bc:	f04f 33ff 	mov.w	r3, #4294967295
    30c0:	4620      	mov	r0, r4
    30c2:	f001 fe37 	bl	4d34 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    30c6:	6928      	ldr	r0, [r5, #16]
    30c8:	3010      	adds	r0, #16
	for (size_t i = 0; i < num_msgs; i++) {
    30ca:	2700      	movs	r7, #0
    30cc:	2200      	movs	r2, #0
    30ce:	2300      	movs	r3, #0
    30d0:	f001 fe30 	bl	4d34 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    30d4:	6868      	ldr	r0, [r5, #4]
    30d6:	f000 fd8f 	bl	3bf8 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    30da:	464e      	mov	r6, r9
	uint32_t concat_len = 0;
    30dc:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
    30de:	455f      	cmp	r7, fp
    30e0:	d301      	bcc.n	30e6 <i2c_nrfx_twim_transfer+0x56>
    30e2:	2400      	movs	r4, #0
    30e4:	e043      	b.n	316e <i2c_nrfx_twim_transfer+0xde>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    30e6:	7a31      	ldrb	r1, [r6, #8]
    30e8:	070b      	lsls	r3, r1, #28
    30ea:	f100 809b 	bmi.w	3224 <i2c_nrfx_twim_transfer+0x194>
			&& ((msgs[i].flags & I2C_MSG_READ)
    30ee:	f1ba 0f00 	cmp.w	sl, #0
    30f2:	d00d      	beq.n	3110 <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
    30f4:	1c7b      	adds	r3, r7, #1
    30f6:	455b      	cmp	r3, fp
    30f8:	d20a      	bcs.n	3110 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
    30fa:	0788      	lsls	r0, r1, #30
    30fc:	d408      	bmi.n	3110 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    30fe:	7d33      	ldrb	r3, [r6, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
    3100:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
    3104:	f002 0201 	and.w	r2, r2, #1
    3108:	f003 0304 	and.w	r3, r3, #4
    310c:	4313      	orrs	r3, r2
    310e:	d01f      	beq.n	3150 <i2c_nrfx_twim_transfer+0xc0>
		if (concat_next || (concat_len != 0)) {
    3110:	2c00      	cmp	r4, #0
    3112:	d136      	bne.n	3182 <i2c_nrfx_twim_transfer+0xf2>
			cur_xfer.p_primary_buf = msgs[i].buf;
    3114:	2400      	movs	r4, #0
    3116:	6833      	ldr	r3, [r6, #0]
    3118:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
    311a:	6873      	ldr	r3, [r6, #4]
    311c:	9306      	str	r3, [sp, #24]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    311e:	7a33      	ldrb	r3, [r6, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    3120:	6868      	ldr	r0, [r5, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    3122:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    3126:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    312a:	f88d 2014 	strb.w	r2, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    312e:	a905      	add	r1, sp, #20
    3130:	bf0c      	ite	eq
    3132:	2220      	moveq	r2, #32
    3134:	2200      	movne	r2, #0
    3136:	f000 fdbb 	bl	3cb0 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    313a:	4b3c      	ldr	r3, [pc, #240]	; (322c <i2c_nrfx_twim_transfer+0x19c>)
    313c:	4298      	cmp	r0, r3
    313e:	d034      	beq.n	31aa <i2c_nrfx_twim_transfer+0x11a>
			if (res == NRFX_ERROR_BUSY) {
    3140:	330b      	adds	r3, #11
				ret = -EIO;
    3142:	4298      	cmp	r0, r3
    3144:	bf0c      	ite	eq
    3146:	f06f 040f 	mvneq.w	r4, #15
    314a:	f06f 0404 	mvnne.w	r4, #4
    314e:	e00e      	b.n	316e <i2c_nrfx_twim_transfer+0xde>
			&& ((msgs[i].flags & I2C_MSG_READ)
    3150:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
    3152:	6872      	ldr	r2, [r6, #4]
    3154:	1910      	adds	r0, r2, r4
    3156:	4550      	cmp	r0, sl
    3158:	d915      	bls.n	3186 <i2c_nrfx_twim_transfer+0xf6>
				LOG_ERR("concat-buf overflow: %u + %u > %u",
    315a:	4613      	mov	r3, r2
    315c:	2145      	movs	r1, #69	; 0x45
    315e:	4622      	mov	r2, r4
    3160:	4833      	ldr	r0, [pc, #204]	; (3230 <i2c_nrfx_twim_transfer+0x1a0>)
    3162:	f8cd a000 	str.w	sl, [sp]
    3166:	f005 fe5a 	bl	8e1e <z_log_minimal_printk>
				ret = -ENOSPC;
    316a:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&get_dev_config(dev)->twim);
    316e:	6868      	ldr	r0, [r5, #4]
    3170:	f000 fd6a 	bl	3c48 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    3174:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
    3176:	f001 fda7 	bl	4cc8 <z_impl_k_sem_give>
}
    317a:	4620      	mov	r0, r4
    317c:	b00b      	add	sp, #44	; 0x2c
    317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
    3182:	2300      	movs	r3, #0
    3184:	e7e5      	b.n	3152 <i2c_nrfx_twim_transfer+0xc2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    3186:	07c9      	lsls	r1, r1, #31
    3188:	d406      	bmi.n	3198 <i2c_nrfx_twim_transfer+0x108>
				memcpy(concat_buf + concat_len,
    318a:	6831      	ldr	r1, [r6, #0]
    318c:	eb08 0004 	add.w	r0, r8, r4
    3190:	9303      	str	r3, [sp, #12]
    3192:	f005 ff79 	bl	9088 <memcpy>
    3196:	9b03      	ldr	r3, [sp, #12]
			concat_len += msgs[i].len;
    3198:	6872      	ldr	r2, [r6, #4]
    319a:	4414      	add	r4, r2
		if (concat_next) {
    319c:	bb63      	cbnz	r3, 31f8 <i2c_nrfx_twim_transfer+0x168>
		if (concat_len == 0) {
    319e:	2c00      	cmp	r4, #0
    31a0:	d0b8      	beq.n	3114 <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
    31a2:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = concat_len;
    31a6:	9406      	str	r4, [sp, #24]
    31a8:	e7b9      	b.n	311e <i2c_nrfx_twim_transfer+0x8e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    31aa:	6928      	ldr	r0, [r5, #16]
    31ac:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    31ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    31b2:	2300      	movs	r3, #0
    31b4:	f001 fdbe 	bl	4d34 <z_impl_k_sem_take>
		if (ret != 0) {
    31b8:	b178      	cbz	r0, 31da <i2c_nrfx_twim_transfer+0x14a>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    31ba:	2145      	movs	r1, #69	; 0x45
    31bc:	463a      	mov	r2, r7
    31be:	481d      	ldr	r0, [pc, #116]	; (3234 <i2c_nrfx_twim_transfer+0x1a4>)
    31c0:	f005 fe2d 	bl	8e1e <z_log_minimal_printk>
			nrfx_twim_disable(&get_dev_config(dev)->twim);
    31c4:	6868      	ldr	r0, [r5, #4]
    31c6:	f000 fd3f 	bl	3c48 <nrfx_twim_disable>
			nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
    31ca:	686b      	ldr	r3, [r5, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    31cc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    31d0:	f001 f85e 	bl	4290 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
    31d4:	f06f 0404 	mvn.w	r4, #4
			break;
    31d8:	e7c9      	b.n	316e <i2c_nrfx_twim_transfer+0xde>
		res = get_dev_data(dev)->res;
    31da:	692b      	ldr	r3, [r5, #16]
    31dc:	6a1a      	ldr	r2, [r3, #32]
		if (res != NRFX_SUCCESS) {
    31de:	4b13      	ldr	r3, [pc, #76]	; (322c <i2c_nrfx_twim_transfer+0x19c>)
    31e0:	429a      	cmp	r2, r3
    31e2:	d005      	beq.n	31f0 <i2c_nrfx_twim_transfer+0x160>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    31e4:	463b      	mov	r3, r7
    31e6:	2145      	movs	r1, #69	; 0x45
    31e8:	4813      	ldr	r0, [pc, #76]	; (3238 <i2c_nrfx_twim_transfer+0x1a8>)
    31ea:	f005 fe18 	bl	8e1e <z_log_minimal_printk>
    31ee:	e7f1      	b.n	31d4 <i2c_nrfx_twim_transfer+0x144>
		if ((msgs[i].flags & I2C_MSG_READ)
    31f0:	7a33      	ldrb	r3, [r6, #8]
    31f2:	07db      	lsls	r3, r3, #31
    31f4:	d403      	bmi.n	31fe <i2c_nrfx_twim_transfer+0x16e>
		concat_len = 0;
    31f6:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
    31f8:	3701      	adds	r7, #1
    31fa:	360c      	adds	r6, #12
    31fc:	e76f      	b.n	30de <i2c_nrfx_twim_transfer+0x4e>
		    && cur_xfer.p_primary_buf == concat_buf) {
    31fe:	9b08      	ldr	r3, [sp, #32]
    3200:	4598      	cmp	r8, r3
    3202:	d1f8      	bne.n	31f6 <i2c_nrfx_twim_transfer+0x166>
			while (concat_len >= msgs[j].len) {
    3204:	230c      	movs	r3, #12
    3206:	fb03 9307 	mla	r3, r3, r7, r9
    320a:	685a      	ldr	r2, [r3, #4]
    320c:	3b0c      	subs	r3, #12
    320e:	4294      	cmp	r4, r2
    3210:	d3f1      	bcc.n	31f6 <i2c_nrfx_twim_transfer+0x166>
				concat_len -= msgs[j].len;
    3212:	1aa4      	subs	r4, r4, r2
				memcpy(msgs[j].buf,
    3214:	68d8      	ldr	r0, [r3, #12]
    3216:	eb08 0104 	add.w	r1, r8, r4
    321a:	9303      	str	r3, [sp, #12]
    321c:	f005 ff34 	bl	9088 <memcpy>
    3220:	9b03      	ldr	r3, [sp, #12]
				j--;
    3222:	e7f2      	b.n	320a <i2c_nrfx_twim_transfer+0x17a>
			ret = -ENOTSUP;
    3224:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3228:	e7a1      	b.n	316e <i2c_nrfx_twim_transfer+0xde>
    322a:	bf00      	nop
    322c:	0bad0000 	.word	0x0bad0000
    3230:	0000a8df 	.word	0x0000a8df
    3234:	0000a906 	.word	0x0000a906
    3238:	0000a935 	.word	0x0000a935

0000323c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    323c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    323e:	794b      	ldrb	r3, [r1, #5]
    3240:	2b01      	cmp	r3, #1
    3242:	d02a      	beq.n	329a <uarte_nrfx_configure+0x5e>
    3244:	2b03      	cmp	r3, #3
    3246:	d125      	bne.n	3294 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3248:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    324a:	798b      	ldrb	r3, [r1, #6]
    324c:	2b03      	cmp	r3, #3
    324e:	d121      	bne.n	3294 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3250:	79cc      	ldrb	r4, [r1, #7]
    3252:	b12c      	cbz	r4, 3260 <uarte_nrfx_configure+0x24>
    3254:	2c01      	cmp	r4, #1
    3256:	d11d      	bne.n	3294 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    3258:	6843      	ldr	r3, [r0, #4]
    325a:	685b      	ldr	r3, [r3, #4]
    325c:	079b      	lsls	r3, r3, #30
    325e:	d019      	beq.n	3294 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3260:	790a      	ldrb	r2, [r1, #4]
    3262:	b112      	cbz	r2, 326a <uarte_nrfx_configure+0x2e>
    3264:	2a02      	cmp	r2, #2
    3266:	d115      	bne.n	3294 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3268:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    326a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    326c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    326e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3272:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3274:	d065      	beq.n	3342 <uarte_nrfx_configure+0x106>
    3276:	d82d      	bhi.n	32d4 <uarte_nrfx_configure+0x98>
    3278:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    327c:	d064      	beq.n	3348 <uarte_nrfx_configure+0x10c>
    327e:	d816      	bhi.n	32ae <uarte_nrfx_configure+0x72>
    3280:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3284:	d062      	beq.n	334c <uarte_nrfx_configure+0x110>
    3286:	d80a      	bhi.n	329e <uarte_nrfx_configure+0x62>
    3288:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    328c:	d061      	beq.n	3352 <uarte_nrfx_configure+0x116>
    328e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3292:	d061      	beq.n	3358 <uarte_nrfx_configure+0x11c>
    3294:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3298:	e052      	b.n	3340 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    329a:	2600      	movs	r6, #0
    329c:	e7d5      	b.n	324a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    329e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    32a2:	d05c      	beq.n	335e <uarte_nrfx_configure+0x122>
    32a4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    32a8:	d1f4      	bne.n	3294 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    32aa:	4b37      	ldr	r3, [pc, #220]	; (3388 <uarte_nrfx_configure+0x14c>)
    32ac:	e03c      	b.n	3328 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    32ae:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    32b2:	d057      	beq.n	3364 <uarte_nrfx_configure+0x128>
    32b4:	d807      	bhi.n	32c6 <uarte_nrfx_configure+0x8a>
    32b6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    32ba:	d055      	beq.n	3368 <uarte_nrfx_configure+0x12c>
    32bc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    32c0:	d1e8      	bne.n	3294 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    32c2:	4b32      	ldr	r3, [pc, #200]	; (338c <uarte_nrfx_configure+0x150>)
    32c4:	e030      	b.n	3328 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    32c6:	f647 2712 	movw	r7, #31250	; 0x7a12
    32ca:	42bb      	cmp	r3, r7
    32cc:	d1e2      	bne.n	3294 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    32ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    32d2:	e029      	b.n	3328 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    32d4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    32d8:	d048      	beq.n	336c <uarte_nrfx_configure+0x130>
    32da:	d813      	bhi.n	3304 <uarte_nrfx_configure+0xc8>
    32dc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    32e0:	d047      	beq.n	3372 <uarte_nrfx_configure+0x136>
    32e2:	d809      	bhi.n	32f8 <uarte_nrfx_configure+0xbc>
    32e4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    32e8:	42bb      	cmp	r3, r7
    32ea:	d044      	beq.n	3376 <uarte_nrfx_configure+0x13a>
    32ec:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    32f0:	d1d0      	bne.n	3294 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    32f2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    32f6:	e017      	b.n	3328 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    32f8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    32fc:	d1ca      	bne.n	3294 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    32fe:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3302:	e011      	b.n	3328 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    3304:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3308:	d038      	beq.n	337c <uarte_nrfx_configure+0x140>
    330a:	d808      	bhi.n	331e <uarte_nrfx_configure+0xe2>
    330c:	4f20      	ldr	r7, [pc, #128]	; (3390 <uarte_nrfx_configure+0x154>)
    330e:	42bb      	cmp	r3, r7
    3310:	d037      	beq.n	3382 <uarte_nrfx_configure+0x146>
    3312:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3316:	d1bd      	bne.n	3294 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3318:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    331c:	e004      	b.n	3328 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    331e:	4f1d      	ldr	r7, [pc, #116]	; (3394 <uarte_nrfx_configure+0x158>)
    3320:	42bb      	cmp	r3, r7
    3322:	d1b7      	bne.n	3294 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3324:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3328:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    332c:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    332e:	4334      	orrs	r4, r6
    3330:	4322      	orrs	r2, r4
    3332:	3304      	adds	r3, #4
    3334:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3336:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    333a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    333e:	2000      	movs	r0, #0
}
    3340:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3342:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3346:	e7ef      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3348:	4b13      	ldr	r3, [pc, #76]	; (3398 <uarte_nrfx_configure+0x15c>)
    334a:	e7ed      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    334c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3350:	e7ea      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    3352:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3356:	e7e7      	b.n	3328 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    3358:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    335c:	e7e4      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    335e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3362:	e7e1      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3364:	4b0d      	ldr	r3, [pc, #52]	; (339c <uarte_nrfx_configure+0x160>)
    3366:	e7df      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3368:	4b0d      	ldr	r3, [pc, #52]	; (33a0 <uarte_nrfx_configure+0x164>)
    336a:	e7dd      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    336c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3370:	e7da      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3372:	4b0c      	ldr	r3, [pc, #48]	; (33a4 <uarte_nrfx_configure+0x168>)
    3374:	e7d8      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3376:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    337a:	e7d5      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    337c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3380:	e7d2      	b.n	3328 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3382:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3386:	e7cf      	b.n	3328 <uarte_nrfx_configure+0xec>
    3388:	0013b000 	.word	0x0013b000
    338c:	004ea000 	.word	0x004ea000
    3390:	0003d090 	.word	0x0003d090
    3394:	000f4240 	.word	0x000f4240
    3398:	00275000 	.word	0x00275000
    339c:	0075c000 	.word	0x0075c000
    33a0:	003af000 	.word	0x003af000
    33a4:	013a9000 	.word	0x013a9000

000033a8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33a8:	6803      	ldr	r3, [r0, #0]
{
    33aa:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    33ac:	095a      	lsrs	r2, r3, #5
    33ae:	bf0c      	ite	eq
    33b0:	f04f 32ff 	moveq.w	r2, #4294967295
    33b4:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    33b6:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
    33ba:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33be:	07db      	lsls	r3, r3, #31
{
    33c0:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33c2:	d40a      	bmi.n	33da <nrf_gpio_pin_port_decode+0x32>
    33c4:	490e      	ldr	r1, [pc, #56]	; (3400 <nrf_gpio_pin_port_decode+0x58>)
    33c6:	480f      	ldr	r0, [pc, #60]	; (3404 <nrf_gpio_pin_port_decode+0x5c>)
    33c8:	f44f 7205 	mov.w	r2, #532	; 0x214
    33cc:	f005 fc46 	bl	8c5c <printk>
    33d0:	f44f 7105 	mov.w	r1, #532	; 0x214
    33d4:	480a      	ldr	r0, [pc, #40]	; (3400 <nrf_gpio_pin_port_decode+0x58>)
    33d6:	f005 fd0d 	bl	8df4 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    33da:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    33dc:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33e0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    33e2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33e4:	d00a      	beq.n	33fc <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    33e6:	4906      	ldr	r1, [pc, #24]	; (3400 <nrf_gpio_pin_port_decode+0x58>)
    33e8:	4806      	ldr	r0, [pc, #24]	; (3404 <nrf_gpio_pin_port_decode+0x5c>)
    33ea:	f240 2219 	movw	r2, #537	; 0x219
    33ee:	f005 fc35 	bl	8c5c <printk>
    33f2:	f240 2119 	movw	r1, #537	; 0x219
    33f6:	4802      	ldr	r0, [pc, #8]	; (3400 <nrf_gpio_pin_port_decode+0x58>)
    33f8:	f005 fcfc 	bl	8df4 <assert_post_action>
}
    33fc:	4802      	ldr	r0, [pc, #8]	; (3408 <nrf_gpio_pin_port_decode+0x60>)
    33fe:	bd10      	pop	{r4, pc}
    3400:	0000a96d 	.word	0x0000a96d
    3404:	00009b92 	.word	0x00009b92
    3408:	50842500 	.word	0x50842500

0000340c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    340e:	4605      	mov	r5, r0
    3410:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3412:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3414:	f005 ffee 	bl	93f4 <k_is_in_isr>
    3418:	b910      	cbnz	r0, 3420 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    341a:	4b2c      	ldr	r3, [pc, #176]	; (34cc <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    341c:	781b      	ldrb	r3, [r3, #0]
    341e:	b983      	cbnz	r3, 3442 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3420:	f04f 0320 	mov.w	r3, #32
    3424:	f3ef 8411 	mrs	r4, BASEPRI
    3428:	f383 8811 	msr	BASEPRI, r3
    342c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3430:	4628      	mov	r0, r5
    3432:	f005 fec3 	bl	91bc <is_tx_ready>
    3436:	bb28      	cbnz	r0, 3484 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3438:	f384 8811 	msr	BASEPRI, r4
    343c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3440:	e7ee      	b.n	3420 <uarte_nrfx_poll_out+0x14>
{
    3442:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3444:	4628      	mov	r0, r5
    3446:	f005 feb9 	bl	91bc <is_tx_ready>
    344a:	b970      	cbnz	r0, 346a <uarte_nrfx_poll_out+0x5e>
    344c:	2001      	movs	r0, #1
    344e:	f005 ff6d 	bl	932c <nrfx_busy_wait>
    3452:	3c01      	subs	r4, #1
    3454:	d1f6      	bne.n	3444 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    3456:	2100      	movs	r1, #0
    3458:	2021      	movs	r0, #33	; 0x21
    345a:	f002 fb6d 	bl	5b38 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    345e:	e7f0      	b.n	3442 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3460:	f384 8811 	msr	BASEPRI, r4
    3464:	f3bf 8f6f 	isb	sy
}
    3468:	e7f5      	b.n	3456 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    346a:	f04f 0320 	mov.w	r3, #32
    346e:	f3ef 8411 	mrs	r4, BASEPRI
    3472:	f383 8811 	msr	BASEPRI, r3
    3476:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    347a:	4628      	mov	r0, r5
    347c:	f005 fe9e 	bl	91bc <is_tx_ready>
    3480:	2800      	cmp	r0, #0
    3482:	d0ed      	beq.n	3460 <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3484:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3486:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    348a:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    348c:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    348e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3492:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3496:	2200      	movs	r2, #0
    3498:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    349c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    34a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    34a4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    34a8:	684a      	ldr	r2, [r1, #4]
    34aa:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    34ac:	bf41      	itttt	mi
    34ae:	2208      	movmi	r2, #8
    34b0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    34b4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    34b8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34bc:	2201      	movs	r2, #1
    34be:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    34c0:	f384 8811 	msr	BASEPRI, r4
    34c4:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    34c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34ca:	bf00      	nop
    34cc:	20001795 	.word	0x20001795

000034d0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    34d0:	b530      	push	{r4, r5, lr}
    34d2:	b085      	sub	sp, #20
    34d4:	466c      	mov	r4, sp
    34d6:	4605      	mov	r5, r0
    34d8:	4b08      	ldr	r3, [pc, #32]	; (34fc <uarte_0_init+0x2c>)
    34da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    34dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    34e0:	2200      	movs	r2, #0
    34e2:	2101      	movs	r1, #1
    34e4:	2008      	movs	r0, #8
    34e6:	f7fe feb5 	bl	2254 <z_arm_irq_priority_set>
    34ea:	2008      	movs	r0, #8
    34ec:	f7fe fe94 	bl	2218 <arch_irq_enable>
    34f0:	4621      	mov	r1, r4
    34f2:	4628      	mov	r0, r5
    34f4:	f005 fe85 	bl	9202 <uarte_instance_init.isra.0>
    34f8:	b005      	add	sp, #20
    34fa:	bd30      	pop	{r4, r5, pc}
    34fc:	0000978c 	.word	0x0000978c

00003500 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    3500:	b530      	push	{r4, r5, lr}
    3502:	b085      	sub	sp, #20
    3504:	466c      	mov	r4, sp
    3506:	4605      	mov	r5, r0
    3508:	4b08      	ldr	r3, [pc, #32]	; (352c <uarte_1_init+0x2c>)
    350a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    350c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3510:	2200      	movs	r2, #0
    3512:	2101      	movs	r1, #1
    3514:	2009      	movs	r0, #9
    3516:	f7fe fe9d 	bl	2254 <z_arm_irq_priority_set>
    351a:	2009      	movs	r0, #9
    351c:	f7fe fe7c 	bl	2218 <arch_irq_enable>
    3520:	4621      	mov	r1, r4
    3522:	4628      	mov	r0, r5
    3524:	f005 fe6d 	bl	9202 <uarte_instance_init.isra.0>
    3528:	b005      	add	sp, #20
    352a:	bd30      	pop	{r4, r5, pc}
    352c:	0000979c 	.word	0x0000979c

00003530 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    3530:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3534:	460f      	mov	r7, r1
    3536:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    3538:	b940      	cbnz	r0, 354c <entropy_cc3xx_rng_get_entropy+0x1c>
    353a:	491a      	ldr	r1, [pc, #104]	; (35a4 <entropy_cc3xx_rng_get_entropy+0x74>)
    353c:	481a      	ldr	r0, [pc, #104]	; (35a8 <entropy_cc3xx_rng_get_entropy+0x78>)
    353e:	2226      	movs	r2, #38	; 0x26
    3540:	f005 fb8c 	bl	8c5c <printk>
    3544:	2126      	movs	r1, #38	; 0x26
    3546:	4817      	ldr	r0, [pc, #92]	; (35a4 <entropy_cc3xx_rng_get_entropy+0x74>)
    3548:	f005 fc54 	bl	8df4 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    354c:	b947      	cbnz	r7, 3560 <entropy_cc3xx_rng_get_entropy+0x30>
    354e:	4915      	ldr	r1, [pc, #84]	; (35a4 <entropy_cc3xx_rng_get_entropy+0x74>)
    3550:	4815      	ldr	r0, [pc, #84]	; (35a8 <entropy_cc3xx_rng_get_entropy+0x78>)
    3552:	2227      	movs	r2, #39	; 0x27
    3554:	f005 fb82 	bl	8c5c <printk>
    3558:	2127      	movs	r1, #39	; 0x27
    355a:	4812      	ldr	r0, [pc, #72]	; (35a4 <entropy_cc3xx_rng_get_entropy+0x74>)
    355c:	f005 fc4a 	bl	8df4 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    3560:	f44f 6580 	mov.w	r5, #1024	; 0x400
    3564:	2400      	movs	r4, #0
    3566:	f06f 0015 	mvn.w	r0, #21
			/** This is a call from a secure app, in which
			 * case entropy is gathered using CC3xx HW
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx,
    356a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 35ac <entropy_cc3xx_rng_get_entropy+0x7c>
	while (offset < length) {
    356e:	42a6      	cmp	r6, r4
    3570:	d802      	bhi.n	3578 <entropy_cc3xx_rng_get_entropy+0x48>
		offset += chunk_size;
	}
#endif

	return res;
}
    3572:	b002      	add	sp, #8
    3574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    3578:	1b33      	subs	r3, r6, r4
    357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    357e:	bf38      	it	cc
    3580:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx,
    3582:	4640      	mov	r0, r8
    3584:	ab01      	add	r3, sp, #4
    3586:	462a      	mov	r2, r5
    3588:	1939      	adds	r1, r7, r4
    358a:	f002 fefd 	bl	6388 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    358e:	9b01      	ldr	r3, [sp, #4]
    3590:	42ab      	cmp	r3, r5
    3592:	d103      	bne.n	359c <entropy_cc3xx_rng_get_entropy+0x6c>
		if (res != 0) {
    3594:	2800      	cmp	r0, #0
    3596:	d1ec      	bne.n	3572 <entropy_cc3xx_rng_get_entropy+0x42>
		offset += chunk_size;
    3598:	442c      	add	r4, r5
    359a:	e7e8      	b.n	356e <entropy_cc3xx_rng_get_entropy+0x3e>
			return -EINVAL;
    359c:	f06f 0015 	mvn.w	r0, #21
    35a0:	e7e7      	b.n	3572 <entropy_cc3xx_rng_get_entropy+0x42>
    35a2:	bf00      	nop
    35a4:	0000a9b7 	.word	0x0000a9b7
    35a8:	00009b92 	.word	0x00009b92
    35ac:	20000a90 	.word	0x20000a90

000035b0 <entropy_cc3xx_rng_init>:
		}

	#elif !defined(CONFIG_SPM)
		int ret = 0;

		ret = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    35b0:	2200      	movs	r2, #0
{
    35b2:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    35b4:	4611      	mov	r1, r2
    35b6:	4804      	ldr	r0, [pc, #16]	; (35c8 <entropy_cc3xx_rng_init+0x18>)
    35b8:	f002 feb2 	bl	6320 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
    35bc:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
    35be:	bf18      	it	ne
    35c0:	f06f 0015 	mvnne.w	r0, #21
    35c4:	bd08      	pop	{r3, pc}
    35c6:	bf00      	nop
    35c8:	20000a90 	.word	0x20000a90

000035cc <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    35cc:	4803      	ldr	r0, [pc, #12]	; (35dc <k_sys_fatal_error_handler+0x10>)
    35ce:	2145      	movs	r1, #69	; 0x45
{
    35d0:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    35d2:	f005 fc24 	bl	8e1e <z_log_minimal_printk>
		sys_arch_reboot(0);
    35d6:	2000      	movs	r0, #0
    35d8:	f7ff f9c8 	bl	296c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    35dc:	0000a9f2 	.word	0x0000a9f2

000035e0 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    35e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    35e4:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    35e6:	4c21      	ldr	r4, [pc, #132]	; (366c <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    35e8:	4e21      	ldr	r6, [pc, #132]	; (3670 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    35ea:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    35ee:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3678 <check_ext_api_requests+0x98>
{
    35f2:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    35f4:	45a8      	cmp	r8, r5
    35f6:	d803      	bhi.n	3600 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    35f8:	2000      	movs	r0, #0
    35fa:	b005      	add	sp, #20
    35fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    3600:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3602:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3606:	681f      	ldr	r7, [r3, #0]
    3608:	ab01      	add	r3, sp, #4
    360a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    360e:	220c      	movs	r2, #12
    3610:	4619      	mov	r1, r3
    3612:	4638      	mov	r0, r7
    3614:	f005 fd11 	bl	903a <memcmp>
    3618:	b990      	cbnz	r0, 3640 <check_ext_api_requests+0x60>
    361a:	b18f      	cbz	r7, 3640 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    361c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    361e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    3620:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    3622:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    3624:	4291      	cmp	r1, r2
    3626:	d10b      	bne.n	3640 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    3628:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    362a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    362c:	4291      	cmp	r1, r2
    362e:	d807      	bhi.n	3640 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    3630:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    3632:	4291      	cmp	r1, r2
    3634:	d904      	bls.n	3640 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    3636:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    3638:	695b      	ldr	r3, [r3, #20]
    363a:	ea32 0303 	bics.w	r3, r2, r3
    363e:	d00a      	beq.n	3656 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    3640:	6a27      	ldr	r7, [r4, #32]
    3642:	b167      	cbz	r7, 365e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    3644:	480b      	ldr	r0, [pc, #44]	; (3674 <check_ext_api_requests+0x94>)
    3646:	f005 fb09 	bl	8c5c <printk>
			k_panic();
    364a:	4040      	eors	r0, r0
    364c:	f380 8811 	msr	BASEPRI, r0
    3650:	f04f 0004 	mov.w	r0, #4
    3654:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    3656:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3658:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    365a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    365c:	e7ca      	b.n	35f4 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    365e:	4648      	mov	r0, r9
    3660:	f005 fafc 	bl	8c5c <printk>
			*ext_api_req->ext_api = NULL;
    3664:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3666:	601f      	str	r7, [r3, #0]
    3668:	e7f5      	b.n	3656 <check_ext_api_requests+0x76>
    366a:	bf00      	nop
    366c:	0000023c 	.word	0x0000023c
    3670:	000097ac 	.word	0x000097ac
    3674:	0000aa14 	.word	0x0000aa14
    3678:	0000aa3d 	.word	0x0000aa3d

0000367c <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    367c:	4b05      	ldr	r3, [pc, #20]	; (3694 <nrf91_errata_14+0x18>)
    367e:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3680:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3682:	681b      	ldr	r3, [r3, #0]
    3684:	2b09      	cmp	r3, #9
    3686:	d103      	bne.n	3690 <nrf91_errata_14+0x14>
            {
                switch(var2)
    3688:	1e43      	subs	r3, r0, #1
    368a:	4258      	negs	r0, r3
    368c:	4158      	adcs	r0, r3
    368e:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3690:	2000      	movs	r0, #0
    #endif
}
    3692:	4770      	bx	lr
    3694:	00ff0134 	.word	0x00ff0134

00003698 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    3698:	4a4a      	ldr	r2, [pc, #296]	; (37c4 <SystemInit+0x12c>)
{
    369a:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    369c:	6813      	ldr	r3, [r2, #0]
    369e:	f043 0302 	orr.w	r3, r3, #2
    36a2:	6013      	str	r3, [r2, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    36a4:	4b48      	ldr	r3, [pc, #288]	; (37c8 <SystemInit+0x130>)
            if (var1 == 0x09)
    36a6:	681b      	ldr	r3, [r3, #0]
    36a8:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    36aa:	bf01      	itttt	eq
    36ac:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    36b0:	2200      	moveq	r2, #0
    36b2:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    36b6:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    36ba:	f7ff ffdf 	bl	367c <nrf91_errata_14>
    36be:	b130      	cbz	r0, 36ce <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    36c0:	2301      	movs	r3, #1
    36c2:	4a42      	ldr	r2, [pc, #264]	; (37cc <SystemInit+0x134>)
    36c4:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    36c6:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    36ca:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    36ce:	4b3e      	ldr	r3, [pc, #248]	; (37c8 <SystemInit+0x130>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    36d0:	681b      	ldr	r3, [r3, #0]
    36d2:	2b09      	cmp	r3, #9
    36d4:	d107      	bne.n	36e6 <SystemInit+0x4e>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    36d6:	4b3e      	ldr	r3, [pc, #248]	; (37d0 <SystemInit+0x138>)
            {
                switch(var2)
    36d8:	681b      	ldr	r3, [r3, #0]
    36da:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    36dc:	bf1e      	ittt	ne
    36de:	2201      	movne	r2, #1
    36e0:	4b3c      	ldrne	r3, [pc, #240]	; (37d4 <SystemInit+0x13c>)
    36e2:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    36e6:	f7ff ffc9 	bl	367c <nrf91_errata_14>
    36ea:	b110      	cbz	r0, 36f2 <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    36ec:	220e      	movs	r2, #14
    36ee:	4b3a      	ldr	r3, [pc, #232]	; (37d8 <SystemInit+0x140>)
    36f0:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    36f2:	4b35      	ldr	r3, [pc, #212]	; (37c8 <SystemInit+0x130>)
            if (var1 == 0x09)
    36f4:	681b      	ldr	r3, [r3, #0]
    36f6:	2b09      	cmp	r3, #9
    36f8:	d104      	bne.n	3704 <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    36fa:	2200      	movs	r2, #0
    36fc:	4b37      	ldr	r3, [pc, #220]	; (37dc <SystemInit+0x144>)
    36fe:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    3700:	2201      	movs	r2, #1
    3702:	605a      	str	r2, [r3, #4]
{
    3704:	2200      	movs	r2, #0
    3706:	00d3      	lsls	r3, r2, #3
    3708:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    370c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3710:	3101      	adds	r1, #1
    3712:	d008      	beq.n	3726 <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3714:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3718:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    371a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    371e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3722:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3724:	d1ef      	bne.n	3706 <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    3726:	4b2e      	ldr	r3, [pc, #184]	; (37e0 <SystemInit+0x148>)
    3728:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    372a:	07d1      	lsls	r1, r2, #31
    372c:	d53b      	bpl.n	37a6 <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    372e:	4b2d      	ldr	r3, [pc, #180]	; (37e4 <SystemInit+0x14c>)
    3730:	4619      	mov	r1, r3
    3732:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3736:	2a01      	cmp	r2, #1
    3738:	d1fb      	bne.n	3732 <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    373a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    373e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    3742:	2b01      	cmp	r3, #1
    3744:	d1fb      	bne.n	373e <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    3746:	4b26      	ldr	r3, [pc, #152]	; (37e0 <SystemInit+0x148>)
    3748:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    374a:	07d2      	lsls	r2, r2, #31
    374c:	d508      	bpl.n	3760 <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    374e:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3750:	4924      	ldr	r1, [pc, #144]	; (37e4 <SystemInit+0x14c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    3752:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    3756:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3758:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    375c:	2a01      	cmp	r2, #1
    375e:	d1fb      	bne.n	3758 <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    3760:	6a1a      	ldr	r2, [r3, #32]
    3762:	3201      	adds	r2, #1
    3764:	d10a      	bne.n	377c <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    3766:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    3768:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    376c:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    3770:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3772:	4a1c      	ldr	r2, [pc, #112]	; (37e4 <SystemInit+0x14c>)
    3774:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3778:	2b01      	cmp	r3, #1
    377a:	d1fb      	bne.n	3774 <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    377c:	2200      	movs	r2, #0
    377e:	4b19      	ldr	r3, [pc, #100]	; (37e4 <SystemInit+0x14c>)
    3780:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3784:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3788:	2a01      	cmp	r2, #1
    378a:	d1fb      	bne.n	3784 <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
    378c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3790:	4915      	ldr	r1, [pc, #84]	; (37e8 <SystemInit+0x150>)
    3792:	4b16      	ldr	r3, [pc, #88]	; (37ec <SystemInit+0x154>)
    3794:	68ca      	ldr	r2, [r1, #12]
    3796:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    379a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    379c:	60cb      	str	r3, [r1, #12]
    379e:	f3bf 8f4f 	dsb	sy
    __NOP();
    37a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    37a4:	e7fd      	b.n	37a2 <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    37a6:	6a1b      	ldr	r3, [r3, #32]
    37a8:	3301      	adds	r3, #1
    37aa:	d0c0      	beq.n	372e <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
    37ac:	4a0e      	ldr	r2, [pc, #56]	; (37e8 <SystemInit+0x150>)
    37ae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    37b2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    37b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    37ba:	4b0d      	ldr	r3, [pc, #52]	; (37f0 <SystemInit+0x158>)
    37bc:	4a0d      	ldr	r2, [pc, #52]	; (37f4 <SystemInit+0x15c>)
    37be:	601a      	str	r2, [r3, #0]
}
    37c0:	bd08      	pop	{r3, pc}
    37c2:	bf00      	nop
    37c4:	e000edd0 	.word	0xe000edd0
    37c8:	00ff0130 	.word	0x00ff0130
    37cc:	50004a38 	.word	0x50004a38
    37d0:	00ff0134 	.word	0x00ff0134
    37d4:	50004000 	.word	0x50004000
    37d8:	5003aee4 	.word	0x5003aee4
    37dc:	5000470c 	.word	0x5000470c
    37e0:	00ff8000 	.word	0x00ff8000
    37e4:	50039000 	.word	0x50039000
    37e8:	e000ed00 	.word	0xe000ed00
    37ec:	05fa0004 	.word	0x05fa0004
    37f0:	20000084 	.word	0x20000084
    37f4:	03d09000 	.word	0x03d09000

000037f8 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    37f8:	b508      	push	{r3, lr}
    switch (domain)
    37fa:	b170      	cbz	r0, 381a <nrf_clock_is_running.constprop.0+0x22>
    37fc:	2801      	cmp	r0, #1
    37fe:	d01b      	beq.n	3838 <nrf_clock_is_running.constprop.0+0x40>
            NRFX_ASSERT(0);
    3800:	f44f 724f 	mov.w	r2, #828	; 0x33c
    3804:	4913      	ldr	r1, [pc, #76]	; (3854 <nrf_clock_is_running.constprop.0+0x5c>)
    3806:	4814      	ldr	r0, [pc, #80]	; (3858 <nrf_clock_is_running.constprop.0+0x60>)
    3808:	f005 fa28 	bl	8c5c <printk>
    380c:	4811      	ldr	r0, [pc, #68]	; (3854 <nrf_clock_is_running.constprop.0+0x5c>)
    380e:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3812:	f005 faef 	bl	8df4 <assert_post_action>
            return false;
    3816:	2000      	movs	r0, #0
    3818:	e00d      	b.n	3836 <nrf_clock_is_running.constprop.0+0x3e>
            if (p_clk_src != NULL)
    381a:	b131      	cbz	r1, 382a <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    381c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3820:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3824:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3828:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    382a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    382e:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3832:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    3836:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3838:	b131      	cbz	r1, 3848 <nrf_clock_is_running.constprop.0+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    383a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    383e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3842:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3846:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3848:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    384c:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    3850:	e7ef      	b.n	3832 <nrf_clock_is_running.constprop.0+0x3a>
    3852:	bf00      	nop
    3854:	0000aa70 	.word	0x0000aa70
    3858:	00009b92 	.word	0x00009b92

0000385c <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    385c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    385e:	4604      	mov	r4, r0
    3860:	b940      	cbnz	r0, 3874 <nrfx_clock_init+0x18>
    3862:	4909      	ldr	r1, [pc, #36]	; (3888 <nrfx_clock_init+0x2c>)
    3864:	4809      	ldr	r0, [pc, #36]	; (388c <nrfx_clock_init+0x30>)
    3866:	22b5      	movs	r2, #181	; 0xb5
    3868:	f005 f9f8 	bl	8c5c <printk>
    386c:	21b5      	movs	r1, #181	; 0xb5
    386e:	4806      	ldr	r0, [pc, #24]	; (3888 <nrfx_clock_init+0x2c>)
    3870:	f005 fac0 	bl	8df4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3874:	4b06      	ldr	r3, [pc, #24]	; (3890 <nrfx_clock_init+0x34>)
    3876:	791a      	ldrb	r2, [r3, #4]
    3878:	b922      	cbnz	r2, 3884 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    387a:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    387c:	4805      	ldr	r0, [pc, #20]	; (3894 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    387e:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3880:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3882:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3884:	4804      	ldr	r0, [pc, #16]	; (3898 <nrfx_clock_init+0x3c>)
    return err_code;
    3886:	e7fc      	b.n	3882 <nrfx_clock_init+0x26>
    3888:	0000aaa4 	.word	0x0000aaa4
    388c:	00009b92 	.word	0x00009b92
    3890:	20000c4c 	.word	0x20000c4c
    3894:	0bad0000 	.word	0x0bad0000
    3898:	0bad000c 	.word	0x0bad000c

0000389c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    389c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    389e:	4b0b      	ldr	r3, [pc, #44]	; (38cc <nrfx_clock_enable+0x30>)
    38a0:	791b      	ldrb	r3, [r3, #4]
    38a2:	b943      	cbnz	r3, 38b6 <nrfx_clock_enable+0x1a>
    38a4:	490a      	ldr	r1, [pc, #40]	; (38d0 <nrfx_clock_enable+0x34>)
    38a6:	480b      	ldr	r0, [pc, #44]	; (38d4 <nrfx_clock_enable+0x38>)
    38a8:	22ce      	movs	r2, #206	; 0xce
    38aa:	f005 f9d7 	bl	8c5c <printk>
    38ae:	21ce      	movs	r1, #206	; 0xce
    38b0:	4807      	ldr	r0, [pc, #28]	; (38d0 <nrfx_clock_enable+0x34>)
    38b2:	f005 fa9f 	bl	8df4 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    38b6:	2005      	movs	r0, #5
    38b8:	f7fe fcbe 	bl	2238 <arch_irq_is_enabled>
    38bc:	b920      	cbnz	r0, 38c8 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    38be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    38c2:	2005      	movs	r0, #5
    38c4:	f7fe bca8 	b.w	2218 <arch_irq_enable>
    38c8:	bd08      	pop	{r3, pc}
    38ca:	bf00      	nop
    38cc:	20000c4c 	.word	0x20000c4c
    38d0:	0000aaa4 	.word	0x0000aaa4
    38d4:	00009b92 	.word	0x00009b92

000038d8 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    38d8:	4b22      	ldr	r3, [pc, #136]	; (3964 <nrfx_clock_start+0x8c>)
{
    38da:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    38dc:	791b      	ldrb	r3, [r3, #4]
{
    38de:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    38e0:	b953      	cbnz	r3, 38f8 <nrfx_clock_start+0x20>
    38e2:	4921      	ldr	r1, [pc, #132]	; (3968 <nrfx_clock_start+0x90>)
    38e4:	4821      	ldr	r0, [pc, #132]	; (396c <nrfx_clock_start+0x94>)
    38e6:	f44f 7285 	mov.w	r2, #266	; 0x10a
    38ea:	f005 f9b7 	bl	8c5c <printk>
    38ee:	f44f 7185 	mov.w	r1, #266	; 0x10a
    38f2:	481d      	ldr	r0, [pc, #116]	; (3968 <nrfx_clock_start+0x90>)
    38f4:	f005 fa7e 	bl	8df4 <assert_post_action>
    switch (domain)
    38f8:	b16c      	cbz	r4, 3916 <nrfx_clock_start+0x3e>
    38fa:	2c01      	cmp	r4, #1
    38fc:	d028      	beq.n	3950 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    38fe:	f44f 729e 	mov.w	r2, #316	; 0x13c
    3902:	4919      	ldr	r1, [pc, #100]	; (3968 <nrfx_clock_start+0x90>)
    3904:	4819      	ldr	r0, [pc, #100]	; (396c <nrfx_clock_start+0x94>)
    3906:	f005 f9a9 	bl	8c5c <printk>
    390a:	f44f 719e 	mov.w	r1, #316	; 0x13c
    390e:	4816      	ldr	r0, [pc, #88]	; (3968 <nrfx_clock_start+0x90>)
    3910:	f005 fa70 	bl	8df4 <assert_post_action>
            break;
    }
}
    3914:	e018      	b.n	3948 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3916:	4620      	mov	r0, r4
    3918:	f10d 0107 	add.w	r1, sp, #7
    391c:	f7ff ff6c 	bl	37f8 <nrf_clock_is_running.constprop.0>
    3920:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3924:	b190      	cbz	r0, 394c <nrfx_clock_start+0x74>
    3926:	f89d 2007 	ldrb.w	r2, [sp, #7]
    392a:	2a02      	cmp	r2, #2
    392c:	d10e      	bne.n	394c <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    392e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3932:	2200      	movs	r2, #0
    3934:	4b0e      	ldr	r3, [pc, #56]	; (3970 <nrfx_clock_start+0x98>)
    3936:	601a      	str	r2, [r3, #0]
    3938:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    393a:	2202      	movs	r2, #2
    393c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3940:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3944:	2201      	movs	r2, #1
    3946:	609a      	str	r2, [r3, #8]
}
    3948:	b002      	add	sp, #8
    394a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    394c:	2201      	movs	r2, #1
    394e:	e7ee      	b.n	392e <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3950:	2200      	movs	r2, #0
    3952:	4b08      	ldr	r3, [pc, #32]	; (3974 <nrfx_clock_start+0x9c>)
    3954:	601a      	str	r2, [r3, #0]
    3956:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3958:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    395c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3960:	601c      	str	r4, [r3, #0]
}
    3962:	e7f1      	b.n	3948 <nrfx_clock_start+0x70>
    3964:	20000c4c 	.word	0x20000c4c
    3968:	0000aaa4 	.word	0x0000aaa4
    396c:	00009b92 	.word	0x00009b92
    3970:	50005104 	.word	0x50005104
    3974:	50005100 	.word	0x50005100

00003978 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3978:	4b2d      	ldr	r3, [pc, #180]	; (3a30 <nrfx_clock_stop+0xb8>)
{
    397a:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    397c:	791b      	ldrb	r3, [r3, #4]
{
    397e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3980:	b953      	cbnz	r3, 3998 <nrfx_clock_stop+0x20>
    3982:	492c      	ldr	r1, [pc, #176]	; (3a34 <nrfx_clock_stop+0xbc>)
    3984:	482c      	ldr	r0, [pc, #176]	; (3a38 <nrfx_clock_stop+0xc0>)
    3986:	f240 1243 	movw	r2, #323	; 0x143
    398a:	f005 f967 	bl	8c5c <printk>
    398e:	f240 1143 	movw	r1, #323	; 0x143
    3992:	4828      	ldr	r0, [pc, #160]	; (3a34 <nrfx_clock_stop+0xbc>)
    3994:	f005 fa2e 	bl	8df4 <assert_post_action>
    switch (domain)
    3998:	b174      	cbz	r4, 39b8 <nrfx_clock_stop+0x40>
    399a:	2c01      	cmp	r4, #1
    399c:	d027      	beq.n	39ee <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    399e:	4925      	ldr	r1, [pc, #148]	; (3a34 <nrfx_clock_stop+0xbc>)
    39a0:	4825      	ldr	r0, [pc, #148]	; (3a38 <nrfx_clock_stop+0xc0>)
    39a2:	f240 125f 	movw	r2, #351	; 0x15f
    39a6:	f005 f959 	bl	8c5c <printk>
    39aa:	f240 115f 	movw	r1, #351	; 0x15f
    39ae:	4821      	ldr	r0, [pc, #132]	; (3a34 <nrfx_clock_stop+0xbc>)
    39b0:	f005 fa20 	bl	8df4 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    39b4:	b002      	add	sp, #8
    39b6:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    39b8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    39bc:	2202      	movs	r2, #2
    39be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39c2:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39c4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39c8:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39cc:	f503 7382 	add.w	r3, r3, #260	; 0x104
    39d0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39d2:	4b1a      	ldr	r3, [pc, #104]	; (3a3c <nrfx_clock_stop+0xc4>)
    39d4:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    39d6:	2100      	movs	r1, #0
    39d8:	4608      	mov	r0, r1
    39da:	f7ff ff0d 	bl	37f8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    39de:	2800      	cmp	r0, #0
    39e0:	d0e8      	beq.n	39b4 <nrfx_clock_stop+0x3c>
    39e2:	2001      	movs	r0, #1
    39e4:	f005 fca2 	bl	932c <nrfx_busy_wait>
    39e8:	3c01      	subs	r4, #1
    39ea:	d1f4      	bne.n	39d6 <nrfx_clock_stop+0x5e>
    39ec:	e7e2      	b.n	39b4 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
    39ee:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39f2:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    39f4:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    39fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3a00:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a02:	4b0f      	ldr	r3, [pc, #60]	; (3a40 <nrfx_clock_stop+0xc8>)
    3a04:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3a06:	f88d 4007 	strb.w	r4, [sp, #7]
    3a0a:	f242 7410 	movw	r4, #10000	; 0x2710
    3a0e:	2001      	movs	r0, #1
    3a10:	f10d 0107 	add.w	r1, sp, #7
    3a14:	f7ff fef0 	bl	37f8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3a18:	2800      	cmp	r0, #0
    3a1a:	d0cb      	beq.n	39b4 <nrfx_clock_stop+0x3c>
    3a1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3a20:	2801      	cmp	r0, #1
    3a22:	d1c7      	bne.n	39b4 <nrfx_clock_stop+0x3c>
    3a24:	f005 fc82 	bl	932c <nrfx_busy_wait>
    3a28:	3c01      	subs	r4, #1
    3a2a:	d1f0      	bne.n	3a0e <nrfx_clock_stop+0x96>
    3a2c:	e7c2      	b.n	39b4 <nrfx_clock_stop+0x3c>
    3a2e:	bf00      	nop
    3a30:	20000c4c 	.word	0x20000c4c
    3a34:	0000aaa4 	.word	0x0000aaa4
    3a38:	00009b92 	.word	0x00009b92
    3a3c:	5000500c 	.word	0x5000500c
    3a40:	50005004 	.word	0x50005004

00003a44 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a44:	4b16      	ldr	r3, [pc, #88]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3a46:	b507      	push	{r0, r1, r2, lr}
    3a48:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3a4a:	b152      	cbz	r2, 3a62 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a4c:	2000      	movs	r0, #0
    3a4e:	6018      	str	r0, [r3, #0]
    3a50:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3a52:	2201      	movs	r2, #1
    3a54:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3a5c:	4b11      	ldr	r3, [pc, #68]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a62:	4b11      	ldr	r3, [pc, #68]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a64:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3a66:	b18a      	cbz	r2, 3a8c <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a68:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    3a6a:	f10d 0107 	add.w	r1, sp, #7
    3a6e:	6018      	str	r0, [r3, #0]
    3a70:	681b      	ldr	r3, [r3, #0]
    3a72:	f7ff fec1 	bl	37f8 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3a76:	f89d 1007 	ldrb.w	r1, [sp, #7]
    3a7a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a7e:	2901      	cmp	r1, #1
    3a80:	f04f 0202 	mov.w	r2, #2
    3a84:	d105      	bne.n	3a92 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a86:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a8a:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3a8c:	b003      	add	sp, #12
    3a8e:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    3a92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a96:	4b03      	ldr	r3, [pc, #12]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a98:	2001      	movs	r0, #1
    3a9a:	681b      	ldr	r3, [r3, #0]
    3a9c:	4798      	blx	r3
}
    3a9e:	e7f5      	b.n	3a8c <nrfx_power_clock_irq_handler+0x48>
    3aa0:	50005100 	.word	0x50005100
    3aa4:	20000c4c 	.word	0x20000c4c
    3aa8:	50005104 	.word	0x50005104

00003aac <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3aac:	6803      	ldr	r3, [r0, #0]
{
    3aae:	b510      	push	{r4, lr}
    switch (port)
    3ab0:	095a      	lsrs	r2, r3, #5
    3ab2:	bf0c      	ite	eq
    3ab4:	f04f 32ff 	moveq.w	r2, #4294967295
    3ab8:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    3aba:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3abe:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3ac2:	07db      	lsls	r3, r3, #31
{
    3ac4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3ac6:	d40a      	bmi.n	3ade <nrf_gpio_pin_port_decode+0x32>
    3ac8:	490e      	ldr	r1, [pc, #56]	; (3b04 <nrf_gpio_pin_port_decode+0x58>)
    3aca:	480f      	ldr	r0, [pc, #60]	; (3b08 <nrf_gpio_pin_port_decode+0x5c>)
    3acc:	f44f 7205 	mov.w	r2, #532	; 0x214
    3ad0:	f005 f8c4 	bl	8c5c <printk>
    3ad4:	f44f 7105 	mov.w	r1, #532	; 0x214
    3ad8:	480a      	ldr	r0, [pc, #40]	; (3b04 <nrf_gpio_pin_port_decode+0x58>)
    3ada:	f005 f98b 	bl	8df4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3ade:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3ae0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ae4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3ae6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ae8:	d00a      	beq.n	3b00 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    3aea:	4906      	ldr	r1, [pc, #24]	; (3b04 <nrf_gpio_pin_port_decode+0x58>)
    3aec:	4806      	ldr	r0, [pc, #24]	; (3b08 <nrf_gpio_pin_port_decode+0x5c>)
    3aee:	f240 2219 	movw	r2, #537	; 0x219
    3af2:	f005 f8b3 	bl	8c5c <printk>
    3af6:	f240 2119 	movw	r1, #537	; 0x219
    3afa:	4802      	ldr	r0, [pc, #8]	; (3b04 <nrf_gpio_pin_port_decode+0x58>)
    3afc:	f005 f97a 	bl	8df4 <assert_post_action>
}
    3b00:	4802      	ldr	r0, [pc, #8]	; (3b0c <nrf_gpio_pin_port_decode+0x60>)
    3b02:	bd10      	pop	{r4, pc}
    3b04:	0000a96d 	.word	0x0000a96d
    3b08:	00009b92 	.word	0x00009b92
    3b0c:	50842500 	.word	0x50842500

00003b10 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    3b10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    3b14:	4606      	mov	r6, r0
    3b16:	4692      	mov	sl, r2
    3b18:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
    3b1a:	460c      	mov	r4, r1
    3b1c:	b951      	cbnz	r1, 3b34 <nrfx_twim_init+0x24>
    3b1e:	4931      	ldr	r1, [pc, #196]	; (3be4 <nrfx_twim_init+0xd4>)
    3b20:	4831      	ldr	r0, [pc, #196]	; (3be8 <nrfx_twim_init+0xd8>)
    3b22:	f44f 7283 	mov.w	r2, #262	; 0x106
    3b26:	f005 f899 	bl	8c5c <printk>
    3b2a:	f44f 7183 	mov.w	r1, #262	; 0x106
    3b2e:	482d      	ldr	r0, [pc, #180]	; (3be4 <nrfx_twim_init+0xd4>)
    3b30:	f005 f960 	bl	8df4 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
    3b34:	e9d4 2300 	ldrd	r2, r3, [r4]
    3b38:	429a      	cmp	r2, r3
    3b3a:	d10a      	bne.n	3b52 <nrfx_twim_init+0x42>
    3b3c:	4929      	ldr	r1, [pc, #164]	; (3be4 <nrfx_twim_init+0xd4>)
    3b3e:	482a      	ldr	r0, [pc, #168]	; (3be8 <nrfx_twim_init+0xd8>)
    3b40:	f240 1207 	movw	r2, #263	; 0x107
    3b44:	f005 f88a 	bl	8c5c <printk>
    3b48:	f240 1107 	movw	r1, #263	; 0x107
    3b4c:	4825      	ldr	r0, [pc, #148]	; (3be4 <nrfx_twim_init+0xd4>)
    3b4e:	f005 f951 	bl	8df4 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3b52:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3b54:	f896 8004 	ldrb.w	r8, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3b58:	4d24      	ldr	r5, [pc, #144]	; (3bec <nrfx_twim_init+0xdc>)
    3b5a:	fb07 f708 	mul.w	r7, r7, r8
    3b5e:	19e9      	adds	r1, r5, r7
    3b60:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    3b64:	2b00      	cmp	r3, #0
    3b66:	d13b      	bne.n	3be0 <nrfx_twim_init+0xd0>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    3b68:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
    3b6a:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
    3b6e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    3b72:	7b63      	ldrb	r3, [r4, #13]
    p_cb->p_context       = p_context;
    3b74:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    3b78:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    3b7c:	6823      	ldr	r3, [r4, #0]
    p_cb->handler         = event_handler;
    3b7e:	f845 a007 	str.w	sl, [r5, r7]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b82:	a801      	add	r0, sp, #4
#if NRFX_CHECK(NRFX_TWIM_NRF52_ANOMALY_109_WORKAROUND_ENABLED)
    p_cb->bus_frequency   = (nrf_twim_frequency_t)p_config->frequency;
#endif

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    3b84:	f8d6 9000 	ldr.w	r9, [r6]
    reg->PIN_CNF[pin_number] = cnf;
    3b88:	f240 6a0c 	movw	sl, #1548	; 0x60c
    3b8c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b8e:	f7ff ff8d 	bl	3aac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3b92:	9b01      	ldr	r3, [sp, #4]
    3b94:	3380      	adds	r3, #128	; 0x80
    3b96:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
    3b9a:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b9c:	a801      	add	r0, sp, #4
    3b9e:	9301      	str	r3, [sp, #4]
    3ba0:	f7ff ff84 	bl	3aac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3ba4:	9b01      	ldr	r3, [sp, #4]
    3ba6:	3380      	adds	r3, #128	; 0x80
    3ba8:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    3bac:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
    3bb0:	f8c9 2508 	str.w	r2, [r9, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    3bb4:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    3bb8:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
    3bba:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524

    if (p_cb->handler)
    3bbe:	59eb      	ldr	r3, [r5, r7]
    3bc0:	b123      	cbz	r3, 3bcc <nrfx_twim_init+0xbc>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    3bc2:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    3bc4:	f340 3007 	sbfx	r0, r0, #12, #8
    3bc8:	f7fe fb26 	bl	2218 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3bcc:	2334      	movs	r3, #52	; 0x34
    3bce:	fb03 5508 	mla	r5, r3, r8, r5
    3bd2:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    3bd4:	4806      	ldr	r0, [pc, #24]	; (3bf0 <nrfx_twim_init+0xe0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3bd6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    3bda:	b002      	add	sp, #8
    3bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
    3be0:	4804      	ldr	r0, [pc, #16]	; (3bf4 <nrfx_twim_init+0xe4>)
    3be2:	e7fa      	b.n	3bda <nrfx_twim_init+0xca>
    3be4:	0000aae1 	.word	0x0000aae1
    3be8:	00009b92 	.word	0x00009b92
    3bec:	20000c54 	.word	0x20000c54
    3bf0:	0bad0000 	.word	0x0bad0000
    3bf4:	0bad0005 	.word	0x0bad0005

00003bf8 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    3bf8:	2234      	movs	r2, #52	; 0x34
{
    3bfa:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    3bfc:	4d0f      	ldr	r5, [pc, #60]	; (3c3c <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3bfe:	7904      	ldrb	r4, [r0, #4]
{
    3c00:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    3c02:	fb02 5204 	mla	r2, r2, r4, r5
    3c06:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
    3c0a:	2a01      	cmp	r2, #1
    3c0c:	d00a      	beq.n	3c24 <nrfx_twim_enable+0x2c>
    3c0e:	490c      	ldr	r1, [pc, #48]	; (3c40 <nrfx_twim_enable+0x48>)
    3c10:	480c      	ldr	r0, [pc, #48]	; (3c44 <nrfx_twim_enable+0x4c>)
    3c12:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    3c16:	f005 f821 	bl	8c5c <printk>
    3c1a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    3c1e:	4808      	ldr	r0, [pc, #32]	; (3c40 <nrfx_twim_enable+0x48>)
    3c20:	f005 f8e8 	bl	8df4 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    3c24:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
    3c26:	6833      	ldr	r3, [r6, #0]
    3c28:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    3c2c:	2334      	movs	r3, #52	; 0x34
    3c2e:	fb03 5404 	mla	r4, r3, r4, r5
    3c32:	2302      	movs	r3, #2
    3c34:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    3c38:	bd70      	pop	{r4, r5, r6, pc}
    3c3a:	bf00      	nop
    3c3c:	20000c54 	.word	0x20000c54
    3c40:	0000aae1 	.word	0x0000aae1
    3c44:	00009b92 	.word	0x00009b92

00003c48 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    3c48:	2234      	movs	r2, #52	; 0x34
{
    3c4a:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    3c4c:	4d14      	ldr	r5, [pc, #80]	; (3ca0 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3c4e:	7904      	ldrb	r4, [r0, #4]
{
    3c50:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    3c52:	fb02 5204 	mla	r2, r2, r4, r5
    3c56:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
    3c5a:	b952      	cbnz	r2, 3c72 <nrfx_twim_disable+0x2a>
    3c5c:	4911      	ldr	r1, [pc, #68]	; (3ca4 <nrfx_twim_disable+0x5c>)
    3c5e:	4812      	ldr	r0, [pc, #72]	; (3ca8 <nrfx_twim_disable+0x60>)
    3c60:	f240 1275 	movw	r2, #373	; 0x175
    3c64:	f004 fffa 	bl	8c5c <printk>
    3c68:	f240 1175 	movw	r1, #373	; 0x175
    3c6c:	480d      	ldr	r0, [pc, #52]	; (3ca4 <nrfx_twim_disable+0x5c>)
    3c6e:	f005 f8c1 	bl	8df4 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    3c72:	2334      	movs	r3, #52	; 0x34
    3c74:	2100      	movs	r1, #0
    3c76:	fb03 5304 	mla	r3, r3, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    3c7a:	6832      	ldr	r2, [r6, #0]
    p_reg->INTENCLR = mask;
    3c7c:	480b      	ldr	r0, [pc, #44]	; (3cac <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
    3c7e:	6099      	str	r1, [r3, #8]
    3c80:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    3c84:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    3c88:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    3c8c:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    3c90:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3c94:	2201      	movs	r2, #1
    p_cb->busy = false;
    3c96:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3c9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    3c9e:	bd70      	pop	{r4, r5, r6, pc}
    3ca0:	20000c54 	.word	0x20000c54
    3ca4:	0000aae1 	.word	0x0000aae1
    3ca8:	00009b92 	.word	0x00009b92
    3cac:	019c0202 	.word	0x019c0202

00003cb0 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    3cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    3cb4:	7903      	ldrb	r3, [r0, #4]
{
    3cb6:	4680      	mov	r8, r0
    3cb8:	460d      	mov	r5, r1
    3cba:	4617      	mov	r7, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    3cbc:	b93b      	cbnz	r3, 3cce <nrfx_twim_xfer+0x1e>
    3cbe:	684b      	ldr	r3, [r1, #4]
    3cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    3cc4:	d203      	bcs.n	3cce <nrfx_twim_xfer+0x1e>
    3cc6:	688b      	ldr	r3, [r1, #8]
    3cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    3ccc:	d30a      	bcc.n	3ce4 <nrfx_twim_xfer+0x34>
    3cce:	49bc      	ldr	r1, [pc, #752]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3cd0:	48bc      	ldr	r0, [pc, #752]	; (3fc4 <nrfx_twim_xfer+0x314>)
    3cd2:	f240 228a 	movw	r2, #650	; 0x28a
    3cd6:	f004 ffc1 	bl	8c5c <printk>
    3cda:	f240 218a 	movw	r1, #650	; 0x28a
    3cde:	48b8      	ldr	r0, [pc, #736]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3ce0:	f005 f888 	bl	8df4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    3ce4:	2434      	movs	r4, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3ce6:	f898 9004 	ldrb.w	r9, [r8, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    3cea:	4eb7      	ldr	r6, [pc, #732]	; (3fc8 <nrfx_twim_xfer+0x318>)
    3cec:	fb04 f409 	mul.w	r4, r4, r9
    3cf0:	5933      	ldr	r3, [r6, r4]
    3cf2:	b9fb      	cbnz	r3, 3d34 <nrfx_twim_xfer+0x84>
    3cf4:	782b      	ldrb	r3, [r5, #0]
    3cf6:	2b02      	cmp	r3, #2
    3cf8:	d00e      	beq.n	3d18 <nrfx_twim_xfer+0x68>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    3cfa:	782b      	ldrb	r3, [r5, #0]
    3cfc:	2b03      	cmp	r3, #3
    3cfe:	d119      	bne.n	3d34 <nrfx_twim_xfer+0x84>
    3d00:	f240 2293 	movw	r2, #659	; 0x293
    3d04:	49ae      	ldr	r1, [pc, #696]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3d06:	48af      	ldr	r0, [pc, #700]	; (3fc4 <nrfx_twim_xfer+0x314>)
    3d08:	f004 ffa8 	bl	8c5c <printk>
    3d0c:	f240 2193 	movw	r1, #659	; 0x293
    3d10:	48ab      	ldr	r0, [pc, #684]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3d12:	f005 f86f 	bl	8df4 <assert_post_action>
    3d16:	e00d      	b.n	3d34 <nrfx_twim_xfer+0x84>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    3d18:	f240 2292 	movw	r2, #658	; 0x292
    3d1c:	49a8      	ldr	r1, [pc, #672]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3d1e:	48a9      	ldr	r0, [pc, #676]	; (3fc4 <nrfx_twim_xfer+0x314>)
    3d20:	f004 ff9c 	bl	8c5c <printk>
    3d24:	f240 2192 	movw	r1, #658	; 0x292
    3d28:	48a5      	ldr	r0, [pc, #660]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3d2a:	f005 f863 	bl	8df4 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    3d2e:	5933      	ldr	r3, [r6, r4]
    3d30:	2b00      	cmp	r3, #0
    3d32:	d0e2      	beq.n	3cfa <nrfx_twim_xfer+0x4a>
    p_cb->error = false;
    3d34:	2334      	movs	r3, #52	; 0x34
    3d36:	2200      	movs	r2, #0
    3d38:	fb03 6309 	mla	r3, r3, r9, r6
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    3d3c:	f8d8 4000 	ldr.w	r4, [r8]
    p_cb->error = false;
    3d40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    3d44:	686b      	ldr	r3, [r5, #4]
    3d46:	b153      	cbz	r3, 3d5e <nrfx_twim_xfer+0xae>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3d48:	68eb      	ldr	r3, [r5, #12]
    3d4a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    3d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3d52:	d004      	beq.n	3d5e <nrfx_twim_xfer+0xae>
        return err_code;
    3d54:	f8df 8278 	ldr.w	r8, [pc, #632]	; 3fd0 <nrfx_twim_xfer+0x320>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3d58:	4640      	mov	r0, r8
    3d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    3d5e:	f04f 0c34 	mov.w	ip, #52	; 0x34
    3d62:	fb0c 6c09 	mla	ip, ip, r9, r6
    p_reg->INTENCLR = mask;
    3d66:	4b99      	ldr	r3, [pc, #612]	; (3fcc <nrfx_twim_xfer+0x31c>)
    3d68:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    3d6c:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
    3d70:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    3d74:	b133      	cbz	r3, 3d84 <nrfx_twim_xfer+0xd4>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3d76:	f8dc 3008 	ldr.w	r3, [ip, #8]
        return err_code;
    3d7a:	f8df 8258 	ldr.w	r8, [pc, #600]	; 3fd4 <nrfx_twim_xfer+0x324>
    p_reg->INTENSET = mask;
    3d7e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    3d82:	e7e9      	b.n	3d58 <nrfx_twim_xfer+0xa8>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    3d84:	f017 0f14 	tst.w	r7, #20
    3d88:	bf0c      	ite	eq
    3d8a:	2301      	moveq	r3, #1
    3d8c:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    3d8e:	46a8      	mov	r8, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    3d90:	f88c 302f 	strb.w	r3, [ip, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    3d94:	f10c 0e0c 	add.w	lr, ip, #12
    3d98:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    3d9c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3da0:	f8d8 3000 	ldr.w	r3, [r8]
    p_cb->flags = flags;
    3da4:	f8cc 7020 	str.w	r7, [ip, #32]
    p_cb->xfer_desc = *p_xfer_desc;
    3da8:	f8ce 3000 	str.w	r3, [lr]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    3dac:	f3c7 1300 	ubfx	r3, r7, #4, #1
    3db0:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    3db4:	786b      	ldrb	r3, [r5, #1]
    3db6:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3dba:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    3dbe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3dc2:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    3dc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    3dca:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    3dce:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    3dd2:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    3dd6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    3dda:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    3dde:	bf18      	it	ne
    3de0:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    3de2:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    3de6:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    3dea:	bf18      	it	ne
    3dec:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    3dee:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    3df2:	782b      	ldrb	r3, [r5, #0]
    3df4:	2b03      	cmp	r3, #3
    3df6:	f200 80df 	bhi.w	3fb8 <nrfx_twim_xfer+0x308>
    3dfa:	e8df f003 	tbb	[pc, r3]
    3dfe:	caae      	.short	0xcaae
    3e00:	0293      	.short	0x0293
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    3e02:	06f9      	lsls	r1, r7, #27
    3e04:	d50a      	bpl.n	3e1c <nrfx_twim_xfer+0x16c>
    3e06:	496e      	ldr	r1, [pc, #440]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3e08:	486e      	ldr	r0, [pc, #440]	; (3fc4 <nrfx_twim_xfer+0x314>)
    3e0a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
    3e0e:	f004 ff25 	bl	8c5c <printk>
    3e12:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    3e16:	486a      	ldr	r0, [pc, #424]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3e18:	f004 ffec 	bl	8df4 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    3e1c:	073a      	lsls	r2, r7, #28
    3e1e:	d50a      	bpl.n	3e36 <nrfx_twim_xfer+0x186>
    3e20:	4967      	ldr	r1, [pc, #412]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3e22:	4868      	ldr	r0, [pc, #416]	; (3fc4 <nrfx_twim_xfer+0x314>)
    3e24:	f240 12cf 	movw	r2, #463	; 0x1cf
    3e28:	f004 ff18 	bl	8c5c <printk>
    3e2c:	f240 11cf 	movw	r1, #463	; 0x1cf
    3e30:	4863      	ldr	r0, [pc, #396]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3e32:	f004 ffdf 	bl	8df4 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    3e36:	077b      	lsls	r3, r7, #29
    3e38:	d50a      	bpl.n	3e50 <nrfx_twim_xfer+0x1a0>
    3e3a:	4961      	ldr	r1, [pc, #388]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3e3c:	4861      	ldr	r0, [pc, #388]	; (3fc4 <nrfx_twim_xfer+0x314>)
    3e3e:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    3e42:	f004 ff0b 	bl	8c5c <printk>
    3e46:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    3e4a:	485d      	ldr	r0, [pc, #372]	; (3fc0 <nrfx_twim_xfer+0x310>)
    3e4c:	f004 ffd2 	bl	8df4 <assert_post_action>
    3e50:	692a      	ldr	r2, [r5, #16]
    3e52:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    3e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3e5a:	f47f af7b 	bne.w	3d54 <nrfx_twim_xfer+0xa4>
    p_reg->SHORTS = mask;
    3e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e62:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
    3e64:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3e68:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e6a:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e6e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e72:	2300      	movs	r3, #0
    3e74:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    3e78:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e7c:	2101      	movs	r1, #1
    3e7e:	6221      	str	r1, [r4, #32]
    3e80:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e82:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    3e86:	2900      	cmp	r1, #0
    3e88:	d0fb      	beq.n	3e82 <nrfx_twim_xfer+0x1d2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e8a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    3e8e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    3e92:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e94:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e98:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3e9c:	2334      	movs	r3, #52	; 0x34
    3e9e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3ea2:	fb03 6309 	mla	r3, r3, r9, r6
    3ea6:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    3ea8:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    3eaa:	f8df 812c 	ldr.w	r8, [pc, #300]	; 3fd8 <nrfx_twim_xfer+0x328>
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    3eae:	0738      	lsls	r0, r7, #28
    3eb0:	d407      	bmi.n	3ec2 <nrfx_twim_xfer+0x212>
    3eb2:	782a      	ldrb	r2, [r5, #0]
    3eb4:	2a03      	cmp	r2, #3
    3eb6:	d004      	beq.n	3ec2 <nrfx_twim_xfer+0x212>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3eb8:	2201      	movs	r2, #1
    3eba:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    3ebc:	686b      	ldr	r3, [r5, #4]
    3ebe:	b903      	cbnz	r3, 3ec2 <nrfx_twim_xfer+0x212>
    3ec0:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    3ec2:	2334      	movs	r3, #52	; 0x34
    3ec4:	fb03 f309 	mul.w	r3, r3, r9
    3ec8:	18f2      	adds	r2, r6, r3
    3eca:	58f3      	ldr	r3, [r6, r3]
    3ecc:	2b00      	cmp	r3, #0
    3ece:	f040 8087 	bne.w	3fe0 <nrfx_twim_xfer+0x330>
                transmission_finished = true;
    3ed2:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ed4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3ed8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3edc:	2900      	cmp	r1, #0
    3ede:	f040 8097 	bne.w	4010 <nrfx_twim_xfer+0x360>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    3ee2:	3a00      	subs	r2, #0
    3ee4:	bf18      	it	ne
    3ee6:	2201      	movne	r2, #1
    3ee8:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    3eec:	2900      	cmp	r1, #0
    3eee:	f000 8095 	beq.w	401c <nrfx_twim_xfer+0x36c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ef2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    3ef6:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3efa:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    3efe:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    3f02:	b110      	cbz	r0, 3f0a <nrfx_twim_xfer+0x25a>
    3f04:	f411 7f00 	tst.w	r1, #512	; 0x200
    3f08:	d104      	bne.n	3f14 <nrfx_twim_xfer+0x264>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f0a:	6225      	str	r5, [r4, #32]
    3f0c:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    3f0e:	2800      	cmp	r0, #0
    3f10:	d0e0      	beq.n	3ed4 <nrfx_twim_xfer+0x224>
                    transmission_finished = false;
    3f12:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    3f14:	05c9      	lsls	r1, r1, #23
    3f16:	f140 8081 	bpl.w	401c <nrfx_twim_xfer+0x36c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f1a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3f1e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
    3f22:	e7d7      	b.n	3ed4 <nrfx_twim_xfer+0x224>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3f24:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3f26:	68ea      	ldr	r2, [r5, #12]
    3f28:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3f2c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    3f30:	692b      	ldr	r3, [r5, #16]
    3f32:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    3f36:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    3f3a:	f47f af0b 	bne.w	3d54 <nrfx_twim_xfer+0xa4>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    3f3e:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3f40:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    3f44:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    3f48:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    3f4c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3f50:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3f52:	2202      	movs	r2, #2
    3f54:	fb03 6309 	mla	r3, r3, r9, r6
    3f58:	e012      	b.n	3f80 <nrfx_twim_xfer+0x2d0>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3f5a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3f5c:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    3f5e:	f017 0f20 	tst.w	r7, #32
    3f62:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3f66:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    3f6a:	f04f 0334 	mov.w	r3, #52	; 0x34
    3f6e:	d00b      	beq.n	3f88 <nrfx_twim_xfer+0x2d8>
    p_reg->SHORTS = mask;
    3f70:	f44f 7280 	mov.w	r2, #256	; 0x100
    3f74:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3f78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3f7c:	fb03 6309 	mla	r3, r3, r9, r6
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3f80:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f82:	2301      	movs	r3, #1
    3f84:	6223      	str	r3, [r4, #32]
    3f86:	e78f      	b.n	3ea8 <nrfx_twim_xfer+0x1f8>
    p_reg->SHORTS = mask;
    3f88:	f44f 7200 	mov.w	r2, #512	; 0x200
    3f8c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    3f90:	e7df      	b.n	3f52 <nrfx_twim_xfer+0x2a2>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3f92:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3f94:	68ea      	ldr	r2, [r5, #12]
    3f96:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3f9a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    3f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3fa2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3fa6:	2334      	movs	r3, #52	; 0x34
    3fa8:	2202      	movs	r2, #2
    3faa:	fb03 6309 	mla	r3, r3, r9, r6
    3fae:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fb0:	2301      	movs	r3, #1
    3fb2:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    3fb4:	2300      	movs	r3, #0
    3fb6:	e778      	b.n	3eaa <nrfx_twim_xfer+0x1fa>
    switch (p_xfer_desc->type)
    3fb8:	2308      	movs	r3, #8
    3fba:	f8df 8020 	ldr.w	r8, [pc, #32]	; 3fdc <nrfx_twim_xfer+0x32c>
    3fbe:	e776      	b.n	3eae <nrfx_twim_xfer+0x1fe>
    3fc0:	0000aae1 	.word	0x0000aae1
    3fc4:	00009b92 	.word	0x00009b92
    3fc8:	20000c54 	.word	0x20000c54
    3fcc:	019c0202 	.word	0x019c0202
    3fd0:	0bad000a 	.word	0x0bad000a
    3fd4:	0bad000b 	.word	0x0bad000b
    3fd8:	0bad0000 	.word	0x0bad0000
    3fdc:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    3fe0:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    3fe2:	bf44      	itt	mi
    3fe4:	2300      	movmi	r3, #0
    3fe6:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    3fe8:	067b      	lsls	r3, r7, #25
    3fea:	d406      	bmi.n	3ffa <nrfx_twim_xfer+0x34a>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    3fec:	2334      	movs	r3, #52	; 0x34
    3fee:	fb03 6309 	mla	r3, r3, r9, r6
    3ff2:	689a      	ldr	r2, [r3, #8]
    3ff4:	f042 0202 	orr.w	r2, r2, #2
    3ff8:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    3ffa:	2334      	movs	r3, #52	; 0x34
    3ffc:	fb03 6609 	mla	r6, r3, r9, r6
    4000:	68b3      	ldr	r3, [r6, #8]
    4002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4006:	60b3      	str	r3, [r6, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4008:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    400a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    400e:	e6a3      	b.n	3d58 <nrfx_twim_xfer+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4010:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4014:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
    4018:	2201      	movs	r2, #1
    401a:	e765      	b.n	3ee8 <nrfx_twim_xfer+0x238>
        } while (!transmission_finished);
    401c:	2a00      	cmp	r2, #0
    401e:	f43f af59 	beq.w	3ed4 <nrfx_twim_xfer+0x224>
        p_cb->busy = false;
    4022:	2134      	movs	r1, #52	; 0x34
    4024:	2000      	movs	r0, #0
    4026:	fb01 6209 	mla	r2, r1, r9, r6
    uint32_t error_source = p_reg->ERRORSRC;
    402a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    402e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    4032:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    4036:	b18b      	cbz	r3, 405c <nrfx_twim_xfer+0x3ac>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4038:	4a0f      	ldr	r2, [pc, #60]	; (4078 <nrfx_twim_xfer+0x3c8>)
    403a:	4910      	ldr	r1, [pc, #64]	; (407c <nrfx_twim_xfer+0x3cc>)
    403c:	f013 0f01 	tst.w	r3, #1
    4040:	bf14      	ite	ne
    4042:	4690      	movne	r8, r2
    4044:	4688      	moveq	r8, r1
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4046:	3201      	adds	r2, #1
    4048:	f013 0f02 	tst.w	r3, #2
    404c:	bf18      	it	ne
    404e:	4690      	movne	r8, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4050:	f013 0f04 	tst.w	r3, #4
    4054:	4b0a      	ldr	r3, [pc, #40]	; (4080 <nrfx_twim_xfer+0x3d0>)
    4056:	bf18      	it	ne
    4058:	4698      	movne	r8, r3
    405a:	e67d      	b.n	3d58 <nrfx_twim_xfer+0xa8>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    405c:	067b      	lsls	r3, r7, #25
    405e:	f53f ae7b 	bmi.w	3d58 <nrfx_twim_xfer+0xa8>
                !xfer_completeness_check(p_twim, p_cb))
    4062:	4620      	mov	r0, r4
    4064:	fb09 6101 	mla	r1, r9, r1, r6
    4068:	f005 f962 	bl	9330 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    406c:	4b03      	ldr	r3, [pc, #12]	; (407c <nrfx_twim_xfer+0x3cc>)
    406e:	2800      	cmp	r0, #0
    4070:	bf08      	it	eq
    4072:	4698      	moveq	r8, r3
    4074:	e670      	b.n	3d58 <nrfx_twim_xfer+0xa8>
    4076:	bf00      	nop
    4078:	0bae0000 	.word	0x0bae0000
    407c:	0bad0001 	.word	0x0bad0001
    4080:	0bae0002 	.word	0x0bae0002

00004084 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
    4084:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
    4086:	4c62      	ldr	r4, [pc, #392]	; (4210 <nrfx_twim_2_irq_handler+0x18c>)
{
    4088:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
    408a:	6823      	ldr	r3, [r4, #0]
    408c:	b953      	cbnz	r3, 40a4 <nrfx_twim_2_irq_handler+0x20>
    408e:	4961      	ldr	r1, [pc, #388]	; (4214 <nrfx_twim_2_irq_handler+0x190>)
    4090:	4861      	ldr	r0, [pc, #388]	; (4218 <nrfx_twim_2_irq_handler+0x194>)
    4092:	f240 22cd 	movw	r2, #717	; 0x2cd
    4096:	f004 fde1 	bl	8c5c <printk>
    409a:	f240 21cd 	movw	r1, #717	; 0x2cd
    409e:	485d      	ldr	r0, [pc, #372]	; (4214 <nrfx_twim_2_irq_handler+0x190>)
    40a0:	f004 fea8 	bl	8df4 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40a4:	4b5d      	ldr	r3, [pc, #372]	; (421c <nrfx_twim_2_irq_handler+0x198>)
    40a6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    40aa:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    40ac:	b1fa      	cbz	r2, 40ee <nrfx_twim_2_irq_handler+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40ae:	2200      	movs	r2, #0
    40b0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    40b4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40b8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    40bc:	b9ba      	cbnz	r2, 40ee <nrfx_twim_2_irq_handler+0x6a>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    40be:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    40c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    40c4:	2202      	movs	r2, #2
    40c6:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    40c8:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
    40ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40ce:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    40d2:	b11a      	cbz	r2, 40dc <nrfx_twim_2_irq_handler+0x58>
    return p_reg->SHORTS;
    40d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    40d8:	059e      	lsls	r6, r3, #22
    40da:	d403      	bmi.n	40e4 <nrfx_twim_2_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40dc:	2201      	movs	r2, #1
    40de:	4b4f      	ldr	r3, [pc, #316]	; (421c <nrfx_twim_2_irq_handler+0x198>)
    40e0:	621a      	str	r2, [r3, #32]
    40e2:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    40e4:	2301      	movs	r3, #1
    40e6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
    40ea:	b007      	add	sp, #28
    40ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40ee:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    40f2:	2b00      	cmp	r3, #0
    40f4:	d054      	beq.n	41a0 <nrfx_twim_2_irq_handler+0x11c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40f6:	2300      	movs	r3, #0
    40f8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    40fc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    4100:	6a23      	ldr	r3, [r4, #32]
    4102:	065d      	lsls	r5, r3, #25
    4104:	d40a      	bmi.n	411c <nrfx_twim_2_irq_handler+0x98>
    4106:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    410a:	b93b      	cbnz	r3, 411c <nrfx_twim_2_irq_handler+0x98>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    410c:	4940      	ldr	r1, [pc, #256]	; (4210 <nrfx_twim_2_irq_handler+0x18c>)
    410e:	4843      	ldr	r0, [pc, #268]	; (421c <nrfx_twim_2_irq_handler+0x198>)
    4110:	f005 f90e 	bl	9330 <xfer_completeness_check>
    4114:	f080 0001 	eor.w	r0, r0, #1
    4118:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    411c:	6a23      	ldr	r3, [r4, #32]
    411e:	f013 0704 	ands.w	r7, r3, #4
    4122:	d122      	bne.n	416a <nrfx_twim_2_irq_handler+0xe6>
            event.xfer_desc = p_cb->xfer_desc;
    4124:	4e3e      	ldr	r6, [pc, #248]	; (4220 <nrfx_twim_2_irq_handler+0x19c>)
    4126:	ad01      	add	r5, sp, #4
    4128:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    412a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    412c:	6833      	ldr	r3, [r6, #0]
    412e:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
    4132:	602b      	str	r3, [r5, #0]
    4134:	4b39      	ldr	r3, [pc, #228]	; (421c <nrfx_twim_2_irq_handler+0x198>)
    4136:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    413a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    413e:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    4142:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    4146:	f1bc 0f00 	cmp.w	ip, #0
    414a:	d002      	beq.n	4152 <nrfx_twim_2_irq_handler+0xce>
    414c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    4150:	b15a      	cbz	r2, 416a <nrfx_twim_2_irq_handler+0xe6>
    p_reg->SHORTS = mask;
    4152:	2200      	movs	r2, #0
    4154:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    4158:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    415a:	4a32      	ldr	r2, [pc, #200]	; (4224 <nrfx_twim_2_irq_handler+0x1a0>)
    415c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4160:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4164:	4b30      	ldr	r3, [pc, #192]	; (4228 <nrfx_twim_2_irq_handler+0x1a4>)
    4166:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    416a:	4a2c      	ldr	r2, [pc, #176]	; (421c <nrfx_twim_2_irq_handler+0x198>)
    416c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    4170:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
    4172:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    4176:	d53c      	bpl.n	41f2 <nrfx_twim_2_irq_handler+0x16e>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    4178:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    417a:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    417e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    4182:	b90b      	cbnz	r3, 4188 <nrfx_twim_2_irq_handler+0x104>
        p_cb->busy = false;
    4184:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    4188:	6a23      	ldr	r3, [r4, #32]
    418a:	075b      	lsls	r3, r3, #29
    418c:	d503      	bpl.n	4196 <nrfx_twim_2_irq_handler+0x112>
    418e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    4192:	2b00      	cmp	r3, #0
    4194:	d0a9      	beq.n	40ea <nrfx_twim_2_irq_handler+0x66>
        p_cb->handler(&event, p_cb->p_context);
    4196:	e9d4 3100 	ldrd	r3, r1, [r4]
    419a:	4668      	mov	r0, sp
    419c:	4798      	blx	r3
}
    419e:	e7a4      	b.n	40ea <nrfx_twim_2_irq_handler+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41a0:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    41a4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    41a8:	7b23      	ldrb	r3, [r4, #12]
    41aa:	b983      	cbnz	r3, 41ce <nrfx_twim_2_irq_handler+0x14a>
            event.xfer_desc = p_cb->xfer_desc;
    41ac:	4f1c      	ldr	r7, [pc, #112]	; (4220 <nrfx_twim_2_irq_handler+0x19c>)
    41ae:	ae01      	add	r6, sp, #4
    41b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    41b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    41b4:	683b      	ldr	r3, [r7, #0]
    41b6:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    41b8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    41bc:	2b00      	cmp	r3, #0
    41be:	d1d4      	bne.n	416a <nrfx_twim_2_irq_handler+0xe6>
    p_reg->SHORTS = mask;
    41c0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    41c4:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    41c6:	4b17      	ldr	r3, [pc, #92]	; (4224 <nrfx_twim_2_irq_handler+0x1a0>)
    41c8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    41cc:	e7c8      	b.n	4160 <nrfx_twim_2_irq_handler+0xdc>
    p_reg->SHORTS = mask;
    41ce:	f44f 7300 	mov.w	r3, #512	; 0x200
    41d2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    41d6:	f240 2302 	movw	r3, #514	; 0x202
    41da:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    41dc:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    41e0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    41e4:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    41e6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41ea:	2301      	movs	r3, #1
    41ec:	60ab      	str	r3, [r5, #8]
    41ee:	622b      	str	r3, [r5, #32]
            return;
    41f0:	e77b      	b.n	40ea <nrfx_twim_2_irq_handler+0x66>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    41f2:	0759      	lsls	r1, r3, #29
    41f4:	d501      	bpl.n	41fa <nrfx_twim_2_irq_handler+0x176>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    41f6:	2302      	movs	r3, #2
    41f8:	e7bf      	b.n	417a <nrfx_twim_2_irq_handler+0xf6>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    41fa:	07da      	lsls	r2, r3, #31
    41fc:	d501      	bpl.n	4202 <nrfx_twim_2_irq_handler+0x17e>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    41fe:	2303      	movs	r3, #3
    4200:	e7bb      	b.n	417a <nrfx_twim_2_irq_handler+0xf6>
    else if (p_cb->error)
    4202:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    4206:	2b00      	cmp	r3, #0
    4208:	d0b7      	beq.n	417a <nrfx_twim_2_irq_handler+0xf6>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    420a:	2304      	movs	r3, #4
    420c:	e7b5      	b.n	417a <nrfx_twim_2_irq_handler+0xf6>
    420e:	bf00      	nop
    4210:	20000c54 	.word	0x20000c54
    4214:	0000aae1 	.word	0x0000aae1
    4218:	00009b92 	.word	0x00009b92
    421c:	5000a000 	.word	0x5000a000
    4220:	20000c60 	.word	0x20000c60
    4224:	019c0202 	.word	0x019c0202
    4228:	e000e100 	.word	0xe000e100

0000422c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    422c:	6803      	ldr	r3, [r0, #0]
{
    422e:	b510      	push	{r4, lr}
    switch (port)
    4230:	095a      	lsrs	r2, r3, #5
    4232:	bf0c      	ite	eq
    4234:	f04f 32ff 	moveq.w	r2, #4294967295
    4238:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    423a:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    423e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4242:	07db      	lsls	r3, r3, #31
{
    4244:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4246:	d40a      	bmi.n	425e <nrf_gpio_pin_port_decode+0x32>
    4248:	490e      	ldr	r1, [pc, #56]	; (4284 <nrf_gpio_pin_port_decode+0x58>)
    424a:	480f      	ldr	r0, [pc, #60]	; (4288 <nrf_gpio_pin_port_decode+0x5c>)
    424c:	f44f 7205 	mov.w	r2, #532	; 0x214
    4250:	f004 fd04 	bl	8c5c <printk>
    4254:	f44f 7105 	mov.w	r1, #532	; 0x214
    4258:	480a      	ldr	r0, [pc, #40]	; (4284 <nrf_gpio_pin_port_decode+0x58>)
    425a:	f004 fdcb 	bl	8df4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    425e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4260:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4264:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4266:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4268:	d00a      	beq.n	4280 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    426a:	4906      	ldr	r1, [pc, #24]	; (4284 <nrf_gpio_pin_port_decode+0x58>)
    426c:	4806      	ldr	r0, [pc, #24]	; (4288 <nrf_gpio_pin_port_decode+0x5c>)
    426e:	f240 2219 	movw	r2, #537	; 0x219
    4272:	f004 fcf3 	bl	8c5c <printk>
    4276:	f240 2119 	movw	r1, #537	; 0x219
    427a:	4802      	ldr	r0, [pc, #8]	; (4284 <nrf_gpio_pin_port_decode+0x58>)
    427c:	f004 fdba 	bl	8df4 <assert_post_action>
}
    4280:	4802      	ldr	r0, [pc, #8]	; (428c <nrf_gpio_pin_port_decode+0x60>)
    4282:	bd10      	pop	{r4, pc}
    4284:	0000a96d 	.word	0x0000a96d
    4288:	00009b92 	.word	0x00009b92
    428c:	50842500 	.word	0x50842500

00004290 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    4290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4292:	460c      	mov	r4, r1
    4294:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    4296:	f005 f87b 	bl	9390 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    429a:	4620      	mov	r0, r4
    429c:	f005 f878 	bl	9390 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    42a0:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
    42a2:	f240 650d 	movw	r5, #1549	; 0x60d
    42a6:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    42a8:	f7ff ffc0 	bl	422c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    42ac:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    42ae:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
    42b0:	3380      	adds	r3, #128	; 0x80
    42b2:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    42b6:	a801      	add	r0, sp, #4
    42b8:	9401      	str	r4, [sp, #4]
    42ba:	f7ff ffb7 	bl	422c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    42be:	9b01      	ldr	r3, [sp, #4]
    42c0:	3380      	adds	r3, #128	; 0x80
    42c2:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    42c6:	2004      	movs	r0, #4
    42c8:	f005 f830 	bl	932c <nrfx_busy_wait>
    42cc:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    42ce:	a801      	add	r0, sp, #4
    42d0:	9401      	str	r4, [sp, #4]
    42d2:	f7ff ffab 	bl	422c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    42d6:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    42d8:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    42da:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    42dc:	07db      	lsls	r3, r3, #31
    42de:	d414      	bmi.n	430a <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    42e0:	a801      	add	r0, sp, #4
    42e2:	9601      	str	r6, [sp, #4]
    42e4:	f7ff ffa2 	bl	422c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    42e8:	9b01      	ldr	r3, [sp, #4]
    42ea:	3d01      	subs	r5, #1
    42ec:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    42f0:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    42f2:	2004      	movs	r0, #4
    42f4:	f005 f81a 	bl	932c <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    42f8:	4630      	mov	r0, r6
    42fa:	f005 f849 	bl	9390 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
    42fe:	2004      	movs	r0, #4
    4300:	f005 f814 	bl	932c <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4304:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4308:	d1e1      	bne.n	42ce <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    430a:	a801      	add	r0, sp, #4
    430c:	9401      	str	r4, [sp, #4]
    430e:	f7ff ff8d 	bl	422c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4312:	2301      	movs	r3, #1
    4314:	9a01      	ldr	r2, [sp, #4]
    4316:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    4318:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    431a:	2004      	movs	r0, #4
    431c:	f005 f806 	bl	932c <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    4320:	4620      	mov	r0, r4
    4322:	f005 f835 	bl	9390 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    4326:	2004      	movs	r0, #4
    4328:	f005 f800 	bl	932c <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    432c:	a801      	add	r0, sp, #4
    432e:	9401      	str	r4, [sp, #4]
    4330:	f7ff ff7c 	bl	422c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4334:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    4336:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    4338:	4803      	ldr	r0, [pc, #12]	; (4348 <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    433a:	40d3      	lsrs	r3, r2
    433c:	f003 0301 	and.w	r3, r3, #1
    4340:	1ac0      	subs	r0, r0, r3
    4342:	b003      	add	sp, #12
    4344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4346:	bf00      	nop
    4348:	0bad0001 	.word	0x0bad0001

0000434c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    434c:	4b0e      	ldr	r3, [pc, #56]	; (4388 <z_sys_init_run_level+0x3c>)
{
    434e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4350:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4354:	3001      	adds	r0, #1
    4356:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    435a:	42a6      	cmp	r6, r4
    435c:	d800      	bhi.n	4360 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    435e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4360:	e9d4 3500 	ldrd	r3, r5, [r4]
    4364:	4628      	mov	r0, r5
    4366:	4798      	blx	r3
		if (dev != NULL) {
    4368:	b165      	cbz	r5, 4384 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    436a:	68eb      	ldr	r3, [r5, #12]
    436c:	b130      	cbz	r0, 437c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    436e:	2800      	cmp	r0, #0
    4370:	bfb8      	it	lt
    4372:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4374:	28ff      	cmp	r0, #255	; 0xff
    4376:	bfa8      	it	ge
    4378:	20ff      	movge	r0, #255	; 0xff
    437a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    437c:	785a      	ldrb	r2, [r3, #1]
    437e:	f042 0201 	orr.w	r2, r2, #1
    4382:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4384:	3408      	adds	r4, #8
    4386:	e7e8      	b.n	435a <z_sys_init_run_level+0xe>
    4388:	000099bc 	.word	0x000099bc

0000438c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    438c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    438e:	4605      	mov	r5, r0
    4390:	b910      	cbnz	r0, 4398 <z_impl_device_get_binding+0xc>
		return NULL;
    4392:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4394:	4620      	mov	r0, r4
    4396:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4398:	7803      	ldrb	r3, [r0, #0]
    439a:	2b00      	cmp	r3, #0
    439c:	d0f9      	beq.n	4392 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    439e:	4a0f      	ldr	r2, [pc, #60]	; (43dc <z_impl_device_get_binding+0x50>)
    43a0:	4c0f      	ldr	r4, [pc, #60]	; (43e0 <z_impl_device_get_binding+0x54>)
    43a2:	4616      	mov	r6, r2
    43a4:	4294      	cmp	r4, r2
    43a6:	d108      	bne.n	43ba <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    43a8:	4c0d      	ldr	r4, [pc, #52]	; (43e0 <z_impl_device_get_binding+0x54>)
    43aa:	42b4      	cmp	r4, r6
    43ac:	d0f1      	beq.n	4392 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    43ae:	4620      	mov	r0, r4
    43b0:	f004 fffb 	bl	93aa <z_device_ready>
    43b4:	b950      	cbnz	r0, 43cc <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    43b6:	3418      	adds	r4, #24
    43b8:	e7f7      	b.n	43aa <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    43ba:	4620      	mov	r0, r4
    43bc:	f004 fff5 	bl	93aa <z_device_ready>
    43c0:	b110      	cbz	r0, 43c8 <z_impl_device_get_binding+0x3c>
    43c2:	6823      	ldr	r3, [r4, #0]
    43c4:	42ab      	cmp	r3, r5
    43c6:	d0e5      	beq.n	4394 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    43c8:	3418      	adds	r4, #24
    43ca:	e7eb      	b.n	43a4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    43cc:	4628      	mov	r0, r5
    43ce:	6821      	ldr	r1, [r4, #0]
    43d0:	f004 fe27 	bl	9022 <strcmp>
    43d4:	2800      	cmp	r0, #0
    43d6:	d1ee      	bne.n	43b6 <z_impl_device_get_binding+0x2a>
    43d8:	e7dc      	b.n	4394 <z_impl_device_get_binding+0x8>
    43da:	bf00      	nop
    43dc:	20000190 	.word	0x20000190
    43e0:	20000100 	.word	0x20000100

000043e4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    43e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    43e6:	4604      	mov	r4, r0
    43e8:	460e      	mov	r6, r1
	__asm__ volatile(
    43ea:	f04f 0320 	mov.w	r3, #32
    43ee:	f3ef 8711 	mrs	r7, BASEPRI
    43f2:	f383 8811 	msr	BASEPRI, r3
    43f6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    43fa:	f001 fbcd 	bl	5b98 <z_impl_k_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    43fe:	2200      	movs	r2, #0
    4400:	2c04      	cmp	r4, #4
    4402:	bf98      	it	ls
    4404:	4b1d      	ldrls	r3, [pc, #116]	; (447c <z_fatal_error+0x98>)
    4406:	4605      	mov	r5, r0
	switch (reason) {
    4408:	bf94      	ite	ls
    440a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    440e:	4b1c      	ldrhi	r3, [pc, #112]	; (4480 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4410:	9200      	str	r2, [sp, #0]
    4412:	2145      	movs	r1, #69	; 0x45
    4414:	4622      	mov	r2, r4
    4416:	481b      	ldr	r0, [pc, #108]	; (4484 <z_fatal_error+0xa0>)
    4418:	f004 fd01 	bl	8e1e <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    441c:	b13e      	cbz	r6, 442e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    441e:	69f3      	ldr	r3, [r6, #28]
    4420:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4424:	b11b      	cbz	r3, 442e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    4426:	2145      	movs	r1, #69	; 0x45
    4428:	4817      	ldr	r0, [pc, #92]	; (4488 <z_fatal_error+0xa4>)
    442a:	f004 fcf8 	bl	8e1e <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    442e:	b135      	cbz	r5, 443e <z_fatal_error+0x5a>
    4430:	4628      	mov	r0, r5
    4432:	f004 ffe5 	bl	9400 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4436:	4603      	mov	r3, r0
    4438:	b108      	cbz	r0, 443e <z_fatal_error+0x5a>
    443a:	7802      	ldrb	r2, [r0, #0]
    443c:	b902      	cbnz	r2, 4440 <z_fatal_error+0x5c>
		thread_name = "unknown";
    443e:	4b13      	ldr	r3, [pc, #76]	; (448c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4440:	462a      	mov	r2, r5
    4442:	2145      	movs	r1, #69	; 0x45
    4444:	4812      	ldr	r0, [pc, #72]	; (4490 <z_fatal_error+0xac>)
    4446:	f004 fcea 	bl	8e1e <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    444a:	4631      	mov	r1, r6
    444c:	4620      	mov	r0, r4
    444e:	f7ff f8bd 	bl	35cc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    4452:	2c04      	cmp	r4, #4
    4454:	d108      	bne.n	4468 <z_fatal_error+0x84>
    4456:	490f      	ldr	r1, [pc, #60]	; (4494 <z_fatal_error+0xb0>)
    4458:	480f      	ldr	r0, [pc, #60]	; (4498 <z_fatal_error+0xb4>)
    445a:	228f      	movs	r2, #143	; 0x8f
    445c:	f004 fbfe 	bl	8c5c <printk>
    4460:	218f      	movs	r1, #143	; 0x8f
    4462:	480c      	ldr	r0, [pc, #48]	; (4494 <z_fatal_error+0xb0>)
    4464:	f004 fcc6 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    4468:	f387 8811 	msr	BASEPRI, r7
    446c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4470:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4472:	b003      	add	sp, #12
    4474:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4478:	f7fe bacc 	b.w	2a14 <z_impl_k_thread_abort>
    447c:	000099d4 	.word	0x000099d4
    4480:	0000ab1d 	.word	0x0000ab1d
    4484:	0000ab33 	.word	0x0000ab33
    4488:	0000ab60 	.word	0x0000ab60
    448c:	0000ab2b 	.word	0x0000ab2b
    4490:	0000ab86 	.word	0x0000ab86
    4494:	0000aba3 	.word	0x0000aba3
    4498:	00009b92 	.word	0x00009b92

0000449c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    449c:	4802      	ldr	r0, [pc, #8]	; (44a8 <z_bss_zero+0xc>)
    449e:	4a03      	ldr	r2, [pc, #12]	; (44ac <z_bss_zero+0x10>)
    44a0:	2100      	movs	r1, #0
    44a2:	1a12      	subs	r2, r2, r0
    44a4:	f004 be1b 	b.w	90de <memset>
    44a8:	200001e0 	.word	0x200001e0
    44ac:	20001798 	.word	0x20001798

000044b0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    44b0:	2201      	movs	r2, #1
{
    44b2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    44b4:	4b09      	ldr	r3, [pc, #36]	; (44dc <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    44b6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    44b8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    44ba:	f7ff ff47 	bl	434c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    44be:	f001 fecb 	bl	6258 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    44c2:	2003      	movs	r0, #3
    44c4:	f7ff ff42 	bl	434c <z_sys_init_run_level>

	z_init_static_threads();
    44c8:	f000 f9d6 	bl	4878 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    44cc:	f004 fbac 	bl	8c28 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    44d0:	4a03      	ldr	r2, [pc, #12]	; (44e0 <bg_thread_main+0x30>)
    44d2:	7b13      	ldrb	r3, [r2, #12]
    44d4:	f023 0301 	bic.w	r3, r3, #1
    44d8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    44da:	bd08      	pop	{r3, pc}
    44dc:	20001795 	.word	0x20001795
    44e0:	20000260 	.word	0x20000260

000044e4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    44e4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    44e8:	4b3f      	ldr	r3, [pc, #252]	; (45e8 <z_cstart+0x104>)
    44ea:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    44ec:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    44f0:	f387 8808 	msr	MSP, r7
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    44f4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44f8:	2400      	movs	r4, #0
    44fa:	23e0      	movs	r3, #224	; 0xe0
    44fc:	4d3b      	ldr	r5, [pc, #236]	; (45ec <z_cstart+0x108>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    44fe:	f04f 0b01 	mov.w	fp, #1
    4502:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4506:	77ec      	strb	r4, [r5, #31]
    4508:	762c      	strb	r4, [r5, #24]
    450a:	766c      	strb	r4, [r5, #25]
    450c:	76ac      	strb	r4, [r5, #26]
    450e:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4510:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    4512:	4e37      	ldr	r6, [pc, #220]	; (45f0 <z_cstart+0x10c>)
    4514:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4518:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    451a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    451c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 4608 <z_cstart+0x124>
    4520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    4524:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    4526:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
    4528:	68eb      	ldr	r3, [r5, #12]
	z_setup_new_thread(thread, stack,
    452a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 460c <z_cstart+0x128>
    452e:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
    4530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    4534:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
    4538:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    453a:	f7fe f9fd 	bl	2938 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    453e:	f7fd fedf 	bl	2300 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4542:	f04f 33ff 	mov.w	r3, #4294967295
    4546:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4548:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    454a:	f7fe fc91 	bl	2e70 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    454e:	f7fe fae9 	bl	2b24 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    4552:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4556:	4d27      	ldr	r5, [pc, #156]	; (45f4 <z_cstart+0x110>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    4558:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    455c:	ab06      	add	r3, sp, #24
    455e:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    4560:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4564:	f004 ff20 	bl	93a8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4568:	4620      	mov	r0, r4
    456a:	f7ff feef 	bl	434c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    456e:	2001      	movs	r0, #1
    4570:	f7ff feec 	bl	434c <z_sys_init_run_level>
	z_sched_init();
    4574:	f001 f9c0 	bl	58f8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4578:	4b1f      	ldr	r3, [pc, #124]	; (45f8 <z_cstart+0x114>)
	_kernel.ready_q.cache = &z_main_thread;
    457a:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    457c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4580:	491e      	ldr	r1, [pc, #120]	; (45fc <z_cstart+0x118>)
    4582:	9305      	str	r3, [sp, #20]
    4584:	4630      	mov	r0, r6
    4586:	4653      	mov	r3, sl
    4588:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    458c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4590:	9400      	str	r4, [sp, #0]
    4592:	f000 f91d 	bl	47d0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4596:	7b73      	ldrb	r3, [r6, #13]
    4598:	4681      	mov	r9, r0
    459a:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    459e:	4630      	mov	r0, r6
    45a0:	7373      	strb	r3, [r6, #13]
    45a2:	f001 f821 	bl	55e8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    45a6:	230f      	movs	r3, #15
    45a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    45ac:	e9cd 4302 	strd	r4, r3, [sp, #8]
    45b0:	4913      	ldr	r1, [pc, #76]	; (4600 <z_cstart+0x11c>)
    45b2:	4b14      	ldr	r3, [pc, #80]	; (4604 <z_cstart+0x120>)
    45b4:	4640      	mov	r0, r8
    45b6:	e9cd b404 	strd	fp, r4, [sp, #16]
    45ba:	e9cd 5400 	strd	r5, r4, [sp]
    45be:	f000 f907 	bl	47d0 <z_setup_new_thread>
    45c2:	f898 300d 	ldrb.w	r3, [r8, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    45c6:	4652      	mov	r2, sl
    45c8:	f023 0304 	bic.w	r3, r3, #4
    45cc:	f888 300d 	strb.w	r3, [r8, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    45d0:	f105 0318 	add.w	r3, r5, #24
    45d4:	4649      	mov	r1, r9
    45d6:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    45d8:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    45dc:	f8c5 800c 	str.w	r8, [r5, #12]
		_kernel.cpus[i].id = i;
    45e0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    45e2:	606f      	str	r7, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    45e4:	f7fd fe78 	bl	22d8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    45e8:	200028d8 	.word	0x200028d8
    45ec:	e000ed00 	.word	0xe000ed00
    45f0:	20000260 	.word	0x20000260
    45f4:	20000c88 	.word	0x20000c88
    45f8:	0000ac0f 	.word	0x0000ac0f
    45fc:	20001798 	.word	0x20001798
    4600:	20002798 	.word	0x20002798
    4604:	000049c1 	.word	0x000049c1
    4608:	000044b1 	.word	0x000044b1
    460c:	200001e0 	.word	0x200001e0

00004610 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    4610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4614:	4d14      	ldr	r5, [pc, #80]	; (4668 <init_mem_slab_module+0x58>)
    4616:	4c15      	ldr	r4, [pc, #84]	; (466c <init_mem_slab_module+0x5c>)
    4618:	46a8      	mov	r8, r5
    461a:	4e15      	ldr	r6, [pc, #84]	; (4670 <init_mem_slab_module+0x60>)
    461c:	42ac      	cmp	r4, r5
    461e:	d908      	bls.n	4632 <init_mem_slab_module+0x22>
    4620:	4631      	mov	r1, r6
    4622:	4814      	ldr	r0, [pc, #80]	; (4674 <init_mem_slab_module+0x64>)
    4624:	223c      	movs	r2, #60	; 0x3c
    4626:	f004 fb19 	bl	8c5c <printk>
    462a:	213c      	movs	r1, #60	; 0x3c
    462c:	4630      	mov	r0, r6
    462e:	f004 fbe1 	bl	8df4 <assert_post_action>
    4632:	4544      	cmp	r4, r8
    4634:	d302      	bcc.n	463c <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4636:	2000      	movs	r0, #0
	return rc;
}
    4638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    463c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    4640:	ea42 0301 	orr.w	r3, r2, r1
    4644:	f013 0303 	ands.w	r3, r3, #3
    4648:	d10b      	bne.n	4662 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
    464a:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    464c:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    464e:	4283      	cmp	r3, r0
    4650:	d101      	bne.n	4656 <init_mem_slab_module+0x46>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4652:	3420      	adds	r4, #32
    4654:	e7e2      	b.n	461c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    4656:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4658:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    465a:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
    465c:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    465e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    4660:	e7f5      	b.n	464e <init_mem_slab_module+0x3e>
		return -EINVAL;
    4662:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4666:	e7e7      	b.n	4638 <init_mem_slab_module+0x28>
    4668:	20000190 	.word	0x20000190
    466c:	20000190 	.word	0x20000190
    4670:	0000ac17 	.word	0x0000ac17
    4674:	00009b92 	.word	0x00009b92

00004678 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    467c:	4604      	mov	r4, r0
    467e:	460d      	mov	r5, r1
    4680:	4690      	mov	r8, r2
    4682:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4684:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    4688:	f04f 0320 	mov.w	r3, #32
    468c:	f3ef 8711 	mrs	r7, BASEPRI
    4690:	f383 8811 	msr	BASEPRI, r3
    4694:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4698:	4630      	mov	r0, r6
    469a:	f000 f96d 	bl	4978 <z_spin_lock_valid>
    469e:	b940      	cbnz	r0, 46b2 <k_mem_slab_alloc+0x3a>
    46a0:	491f      	ldr	r1, [pc, #124]	; (4720 <k_mem_slab_alloc+0xa8>)
    46a2:	4820      	ldr	r0, [pc, #128]	; (4724 <k_mem_slab_alloc+0xac>)
    46a4:	2281      	movs	r2, #129	; 0x81
    46a6:	f004 fad9 	bl	8c5c <printk>
    46aa:	2181      	movs	r1, #129	; 0x81
    46ac:	481c      	ldr	r0, [pc, #112]	; (4720 <k_mem_slab_alloc+0xa8>)
    46ae:	f004 fba1 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    46b2:	4630      	mov	r0, r6
    46b4:	f000 f97c 	bl	49b0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    46b8:	69a3      	ldr	r3, [r4, #24]
    46ba:	b1c3      	cbz	r3, 46ee <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    46bc:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    46be:	681b      	ldr	r3, [r3, #0]
    46c0:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    46c2:	69e3      	ldr	r3, [r4, #28]
    46c4:	3301      	adds	r3, #1
    46c6:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    46c8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    46ca:	4630      	mov	r0, r6
    46cc:	f000 f962 	bl	4994 <z_spin_unlock_valid>
    46d0:	b940      	cbnz	r0, 46e4 <k_mem_slab_alloc+0x6c>
    46d2:	4913      	ldr	r1, [pc, #76]	; (4720 <k_mem_slab_alloc+0xa8>)
    46d4:	4813      	ldr	r0, [pc, #76]	; (4724 <k_mem_slab_alloc+0xac>)
    46d6:	22ac      	movs	r2, #172	; 0xac
    46d8:	f004 fac0 	bl	8c5c <printk>
    46dc:	21ac      	movs	r1, #172	; 0xac
    46de:	4810      	ldr	r0, [pc, #64]	; (4720 <k_mem_slab_alloc+0xa8>)
    46e0:	f004 fb88 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    46e4:	f387 8811 	msr	BASEPRI, r7
    46e8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    46ec:	e013      	b.n	4716 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    46ee:	ea58 0209 	orrs.w	r2, r8, r9
    46f2:	d103      	bne.n	46fc <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
    46f4:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    46f8:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    46fa:	e7e6      	b.n	46ca <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    46fc:	4622      	mov	r2, r4
    46fe:	4639      	mov	r1, r7
    4700:	4630      	mov	r0, r6
    4702:	e9cd 8900 	strd	r8, r9, [sp]
    4706:	f000 fd89 	bl	521c <z_pend_curr>
		if (result == 0) {
    470a:	4604      	mov	r4, r0
    470c:	b918      	cbnz	r0, 4716 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
    470e:	4b06      	ldr	r3, [pc, #24]	; (4728 <k_mem_slab_alloc+0xb0>)
    4710:	689b      	ldr	r3, [r3, #8]
    4712:	695b      	ldr	r3, [r3, #20]
    4714:	602b      	str	r3, [r5, #0]
}
    4716:	4620      	mov	r0, r4
    4718:	b003      	add	sp, #12
    471a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    471e:	bf00      	nop
    4720:	00009bcc 	.word	0x00009bcc
    4724:	00009b92 	.word	0x00009b92
    4728:	20000c88 	.word	0x20000c88

0000472c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4730:	4604      	mov	r4, r0
    4732:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4734:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    4738:	f04f 0320 	mov.w	r3, #32
    473c:	f3ef 8711 	mrs	r7, BASEPRI
    4740:	f383 8811 	msr	BASEPRI, r3
    4744:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4748:	4630      	mov	r0, r6
    474a:	f000 f915 	bl	4978 <z_spin_lock_valid>
    474e:	b940      	cbnz	r0, 4762 <k_mem_slab_free+0x36>
    4750:	491d      	ldr	r1, [pc, #116]	; (47c8 <k_mem_slab_free+0x9c>)
    4752:	481e      	ldr	r0, [pc, #120]	; (47cc <k_mem_slab_free+0xa0>)
    4754:	2281      	movs	r2, #129	; 0x81
    4756:	f004 fa81 	bl	8c5c <printk>
    475a:	2181      	movs	r1, #129	; 0x81
    475c:	481a      	ldr	r0, [pc, #104]	; (47c8 <k_mem_slab_free+0x9c>)
    475e:	f004 fb49 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4762:	4630      	mov	r0, r6
    4764:	f000 f924 	bl	49b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4768:	f8d4 8018 	ldr.w	r8, [r4, #24]
    476c:	f1b8 0f00 	cmp.w	r8, #0
    4770:	d10f      	bne.n	4792 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4772:	4620      	mov	r0, r4
    4774:	f001 f882 	bl	587c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4778:	b158      	cbz	r0, 4792 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    477a:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    477c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4780:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    4782:	f000 ff31 	bl	55e8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4786:	4639      	mov	r1, r7
    4788:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    478a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    478e:	f000 bba5 	b.w	4edc <z_reschedule>
	**(char ***) mem = slab->free_list;
    4792:	682b      	ldr	r3, [r5, #0]
    4794:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4796:	4630      	mov	r0, r6
    4798:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    479a:	682b      	ldr	r3, [r5, #0]
    479c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    479e:	69e3      	ldr	r3, [r4, #28]
    47a0:	3b01      	subs	r3, #1
    47a2:	61e3      	str	r3, [r4, #28]
    47a4:	f000 f8f6 	bl	4994 <z_spin_unlock_valid>
    47a8:	b940      	cbnz	r0, 47bc <k_mem_slab_free+0x90>
    47aa:	4907      	ldr	r1, [pc, #28]	; (47c8 <k_mem_slab_free+0x9c>)
    47ac:	4807      	ldr	r0, [pc, #28]	; (47cc <k_mem_slab_free+0xa0>)
    47ae:	22ac      	movs	r2, #172	; 0xac
    47b0:	f004 fa54 	bl	8c5c <printk>
    47b4:	21ac      	movs	r1, #172	; 0xac
    47b6:	4804      	ldr	r0, [pc, #16]	; (47c8 <k_mem_slab_free+0x9c>)
    47b8:	f004 fb1c 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    47bc:	f387 8811 	msr	BASEPRI, r7
    47c0:	f3bf 8f6f 	isb	sy
}
    47c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47c8:	00009bcc 	.word	0x00009bcc
    47cc:	00009b92 	.word	0x00009b92

000047d0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    47d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    47d4:	b085      	sub	sp, #20
    47d6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    47da:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    47dc:	f1b9 0f0f 	cmp.w	r9, #15
{
    47e0:	460f      	mov	r7, r1
    47e2:	4615      	mov	r5, r2
    47e4:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    47e6:	d12e      	bne.n	4846 <z_setup_new_thread+0x76>
    47e8:	4b1f      	ldr	r3, [pc, #124]	; (4868 <z_setup_new_thread+0x98>)
    47ea:	4598      	cmp	r8, r3
    47ec:	d12f      	bne.n	484e <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    47ee:	f104 0358 	add.w	r3, r4, #88	; 0x58
    47f2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    47f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
    47f8:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    47fa:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    47fc:	2304      	movs	r3, #4
    47fe:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4802:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4804:	9302      	str	r3, [sp, #8]
    4806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4808:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    480c:	9301      	str	r3, [sp, #4]
    480e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
    4810:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
    4812:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4816:	9300      	str	r3, [sp, #0]
    4818:	462a      	mov	r2, r5
    481a:	4643      	mov	r3, r8
    481c:	4639      	mov	r1, r7
    481e:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4820:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    4824:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
    4826:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
    482a:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    482c:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    482e:	f7fd fd37 	bl	22a0 <arch_new_thread>
	if (!_current) {
    4832:	4b0e      	ldr	r3, [pc, #56]	; (486c <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
    4834:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    4836:	689b      	ldr	r3, [r3, #8]
    4838:	b103      	cbz	r3, 483c <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
    483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    483c:	4628      	mov	r0, r5
    483e:	6723      	str	r3, [r4, #112]	; 0x70
    4840:	b005      	add	sp, #20
    4842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    4846:	f109 0310 	add.w	r3, r9, #16
    484a:	2b1e      	cmp	r3, #30
    484c:	d9cf      	bls.n	47ee <z_setup_new_thread+0x1e>
    484e:	f44f 7202 	mov.w	r2, #520	; 0x208
    4852:	4907      	ldr	r1, [pc, #28]	; (4870 <z_setup_new_thread+0xa0>)
    4854:	4807      	ldr	r0, [pc, #28]	; (4874 <z_setup_new_thread+0xa4>)
    4856:	f004 fa01 	bl	8c5c <printk>
    485a:	f44f 7102 	mov.w	r1, #520	; 0x208
    485e:	4804      	ldr	r0, [pc, #16]	; (4870 <z_setup_new_thread+0xa0>)
    4860:	f004 fac8 	bl	8df4 <assert_post_action>
    4864:	e7c3      	b.n	47ee <z_setup_new_thread+0x1e>
    4866:	bf00      	nop
    4868:	000049c1 	.word	0x000049c1
    486c:	20000c88 	.word	0x20000c88
    4870:	0000ac3c 	.word	0x0000ac3c
    4874:	00009b92 	.word	0x00009b92

00004878 <z_init_static_threads>:
{
    4878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    487c:	4f39      	ldr	r7, [pc, #228]	; (4964 <z_init_static_threads+0xec>)
    487e:	4d3a      	ldr	r5, [pc, #232]	; (4968 <z_init_static_threads+0xf0>)
    4880:	463e      	mov	r6, r7
    4882:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4970 <z_init_static_threads+0xf8>
{
    4886:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    4888:	42bd      	cmp	r5, r7
    488a:	d90a      	bls.n	48a2 <z_init_static_threads+0x2a>
    488c:	4641      	mov	r1, r8
    488e:	4837      	ldr	r0, [pc, #220]	; (496c <z_init_static_threads+0xf4>)
    4890:	f44f 7236 	mov.w	r2, #728	; 0x2d8
    4894:	f004 f9e2 	bl	8c5c <printk>
    4898:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    489c:	4640      	mov	r0, r8
    489e:	f004 faa9 	bl	8df4 <assert_post_action>
    48a2:	42b5      	cmp	r5, r6
    48a4:	f105 0430 	add.w	r4, r5, #48	; 0x30
    48a8:	d31d      	bcc.n	48e6 <z_init_static_threads+0x6e>
	k_sched_lock();
    48aa:	f000 fb4d 	bl	4f48 <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
    48ae:	f240 38e7 	movw	r8, #999	; 0x3e7
    48b2:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    48b6:	4c2c      	ldr	r4, [pc, #176]	; (4968 <z_init_static_threads+0xf0>)
    48b8:	4d2d      	ldr	r5, [pc, #180]	; (4970 <z_init_static_threads+0xf8>)
    48ba:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 496c <z_init_static_threads+0xf4>
    48be:	42b4      	cmp	r4, r6
    48c0:	d90a      	bls.n	48d8 <z_init_static_threads+0x60>
    48c2:	4629      	mov	r1, r5
    48c4:	4650      	mov	r0, sl
    48c6:	f240 22f7 	movw	r2, #759	; 0x2f7
    48ca:	f004 f9c7 	bl	8c5c <printk>
    48ce:	f240 21f7 	movw	r1, #759	; 0x2f7
    48d2:	4628      	mov	r0, r5
    48d4:	f004 fa8e 	bl	8df4 <assert_post_action>
    48d8:	42b4      	cmp	r4, r6
    48da:	d321      	bcc.n	4920 <z_init_static_threads+0xa8>
}
    48dc:	b006      	add	sp, #24
    48de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    48e2:	f000 bd19 	b.w	5318 <k_sched_unlock>
		z_setup_new_thread(
    48e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    48ea:	9305      	str	r3, [sp, #20]
    48ec:	f854 3c10 	ldr.w	r3, [r4, #-16]
    48f0:	9304      	str	r3, [sp, #16]
    48f2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    48f6:	9303      	str	r3, [sp, #12]
    48f8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    48fc:	9302      	str	r3, [sp, #8]
    48fe:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4902:	9301      	str	r3, [sp, #4]
    4904:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4908:	9300      	str	r3, [sp, #0]
    490a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    490e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4912:	f7ff ff5d 	bl	47d0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4916:	f854 3c30 	ldr.w	r3, [r4, #-48]
    491a:	655d      	str	r5, [r3, #84]	; 0x54
    491c:	4625      	mov	r5, r4
    491e:	e7b3      	b.n	4888 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4920:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4922:	1c5a      	adds	r2, r3, #1
    4924:	d00f      	beq.n	4946 <z_init_static_threads+0xce>
    4926:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    492a:	4640      	mov	r0, r8
    492c:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
    492e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4932:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4936:	4549      	cmp	r1, r9
    4938:	bf08      	it	eq
    493a:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
    493c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    493e:	d104      	bne.n	494a <z_init_static_threads+0xd2>
	z_sched_start(thread);
    4940:	4638      	mov	r0, r7
    4942:	f000 fe87 	bl	5654 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4946:	3430      	adds	r4, #48	; 0x30
    4948:	e7b9      	b.n	48be <z_init_static_threads+0x46>
    494a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    494e:	2300      	movs	r3, #0
    4950:	f7fb fc74 	bl	23c <__aeabi_uldivmod>
    4954:	4602      	mov	r2, r0
    4956:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4958:	f107 0018 	add.w	r0, r7, #24
    495c:	4905      	ldr	r1, [pc, #20]	; (4974 <z_init_static_threads+0xfc>)
    495e:	f001 fa1f 	bl	5da0 <z_add_timeout>
    4962:	e7f0      	b.n	4946 <z_init_static_threads+0xce>
    4964:	20000190 	.word	0x20000190
    4968:	20000190 	.word	0x20000190
    496c:	00009b92 	.word	0x00009b92
    4970:	0000ac3c 	.word	0x0000ac3c
    4974:	000056d9 	.word	0x000056d9

00004978 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    4978:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    497a:	b138      	cbz	r0, 498c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    497c:	4b04      	ldr	r3, [pc, #16]	; (4990 <z_spin_lock_valid+0x18>)
    497e:	f000 0003 	and.w	r0, r0, #3
    4982:	7d1b      	ldrb	r3, [r3, #20]
    4984:	1ac0      	subs	r0, r0, r3
    4986:	bf18      	it	ne
    4988:	2001      	movne	r0, #1
    498a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    498c:	2001      	movs	r0, #1
}
    498e:	4770      	bx	lr
    4990:	20000c88 	.word	0x20000c88

00004994 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4994:	4905      	ldr	r1, [pc, #20]	; (49ac <z_spin_unlock_valid+0x18>)
{
    4996:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4998:	688a      	ldr	r2, [r1, #8]
    499a:	7d08      	ldrb	r0, [r1, #20]
    499c:	6819      	ldr	r1, [r3, #0]
    499e:	4302      	orrs	r2, r0
    49a0:	2000      	movs	r0, #0
    49a2:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    49a4:	bf04      	itt	eq
    49a6:	6018      	streq	r0, [r3, #0]
	return true;
    49a8:	2001      	moveq	r0, #1
}
    49aa:	4770      	bx	lr
    49ac:	20000c88 	.word	0x20000c88

000049b0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    49b0:	4a02      	ldr	r2, [pc, #8]	; (49bc <z_spin_lock_set_owner+0xc>)
    49b2:	7d11      	ldrb	r1, [r2, #20]
    49b4:	6893      	ldr	r3, [r2, #8]
    49b6:	430b      	orrs	r3, r1
    49b8:	6003      	str	r3, [r0, #0]
}
    49ba:	4770      	bx	lr
    49bc:	20000c88 	.word	0x20000c88

000049c0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    49c0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    49c2:	4c09      	ldr	r4, [pc, #36]	; (49e8 <idle+0x28>)
	__asm__ volatile(
    49c4:	f04f 0220 	mov.w	r2, #32
    49c8:	f3ef 8311 	mrs	r3, BASEPRI
    49cc:	f382 8811 	msr	BASEPRI, r2
    49d0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    49d4:	f001 fada 	bl	5f8c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    49d8:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    49da:	f7fc fccd 	bl	1378 <pm_system_suspend>
    49de:	2800      	cmp	r0, #0
    49e0:	d1f0      	bne.n	49c4 <idle+0x4>
	arch_cpu_idle();
    49e2:	f7fd fc93 	bl	230c <arch_cpu_idle>
}
    49e6:	e7ed      	b.n	49c4 <idle+0x4>
    49e8:	20000c88 	.word	0x20000c88

000049ec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    49ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    49f0:	4604      	mov	r4, r0
    49f2:	4616      	mov	r6, r2
    49f4:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    49f6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    49fa:	b143      	cbz	r3, 4a0e <z_impl_k_mutex_lock+0x22>
    49fc:	495f      	ldr	r1, [pc, #380]	; (4b7c <z_impl_k_mutex_lock+0x190>)
    49fe:	4860      	ldr	r0, [pc, #384]	; (4b80 <z_impl_k_mutex_lock+0x194>)
    4a00:	2265      	movs	r2, #101	; 0x65
    4a02:	f004 f92b 	bl	8c5c <printk>
    4a06:	2165      	movs	r1, #101	; 0x65
    4a08:	485c      	ldr	r0, [pc, #368]	; (4b7c <z_impl_k_mutex_lock+0x190>)
    4a0a:	f004 f9f3 	bl	8df4 <assert_post_action>
    4a0e:	f04f 0320 	mov.w	r3, #32
    4a12:	f3ef 8811 	mrs	r8, BASEPRI
    4a16:	f383 8811 	msr	BASEPRI, r3
    4a1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a1e:	4859      	ldr	r0, [pc, #356]	; (4b84 <z_impl_k_mutex_lock+0x198>)
    4a20:	f7ff ffaa 	bl	4978 <z_spin_lock_valid>
    4a24:	b940      	cbnz	r0, 4a38 <z_impl_k_mutex_lock+0x4c>
    4a26:	4958      	ldr	r1, [pc, #352]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4a28:	4855      	ldr	r0, [pc, #340]	; (4b80 <z_impl_k_mutex_lock+0x194>)
    4a2a:	2281      	movs	r2, #129	; 0x81
    4a2c:	f004 f916 	bl	8c5c <printk>
    4a30:	2181      	movs	r1, #129	; 0x81
    4a32:	4855      	ldr	r0, [pc, #340]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4a34:	f004 f9de 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a38:	4852      	ldr	r0, [pc, #328]	; (4b84 <z_impl_k_mutex_lock+0x198>)
    4a3a:	f7ff ffb9 	bl	49b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4a3e:	68e3      	ldr	r3, [r4, #12]
    4a40:	4a52      	ldr	r2, [pc, #328]	; (4b8c <z_impl_k_mutex_lock+0x1a0>)
    4a42:	b1d3      	cbz	r3, 4a7a <z_impl_k_mutex_lock+0x8e>
    4a44:	68a0      	ldr	r0, [r4, #8]
    4a46:	6891      	ldr	r1, [r2, #8]
    4a48:	4288      	cmp	r0, r1
    4a4a:	d033      	beq.n	4ab4 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4a4c:	ea56 0307 	orrs.w	r3, r6, r7
    4a50:	d132      	bne.n	4ab8 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a52:	484c      	ldr	r0, [pc, #304]	; (4b84 <z_impl_k_mutex_lock+0x198>)
    4a54:	f7ff ff9e 	bl	4994 <z_spin_unlock_valid>
    4a58:	b940      	cbnz	r0, 4a6c <z_impl_k_mutex_lock+0x80>
    4a5a:	494b      	ldr	r1, [pc, #300]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4a5c:	4848      	ldr	r0, [pc, #288]	; (4b80 <z_impl_k_mutex_lock+0x194>)
    4a5e:	22ac      	movs	r2, #172	; 0xac
    4a60:	f004 f8fc 	bl	8c5c <printk>
    4a64:	21ac      	movs	r1, #172	; 0xac
    4a66:	4848      	ldr	r0, [pc, #288]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4a68:	f004 f9c4 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    4a6c:	f388 8811 	msr	BASEPRI, r8
    4a70:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4a74:	f06f 000f 	mvn.w	r0, #15
    4a78:	e019      	b.n	4aae <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    4a7a:	6891      	ldr	r1, [r2, #8]
    4a7c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    4a80:	3301      	adds	r3, #1
    4a82:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4a84:	6893      	ldr	r3, [r2, #8]
    4a86:	483f      	ldr	r0, [pc, #252]	; (4b84 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4a88:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    4a8a:	60a3      	str	r3, [r4, #8]
    4a8c:	f7ff ff82 	bl	4994 <z_spin_unlock_valid>
    4a90:	b940      	cbnz	r0, 4aa4 <z_impl_k_mutex_lock+0xb8>
    4a92:	493d      	ldr	r1, [pc, #244]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4a94:	483a      	ldr	r0, [pc, #232]	; (4b80 <z_impl_k_mutex_lock+0x194>)
    4a96:	22ac      	movs	r2, #172	; 0xac
    4a98:	f004 f8e0 	bl	8c5c <printk>
    4a9c:	21ac      	movs	r1, #172	; 0xac
    4a9e:	483a      	ldr	r0, [pc, #232]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4aa0:	f004 f9a8 	bl	8df4 <assert_post_action>
    4aa4:	f388 8811 	msr	BASEPRI, r8
    4aa8:	f3bf 8f6f 	isb	sy
		return 0;
    4aac:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4aae:	b002      	add	sp, #8
    4ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4ab4:	6921      	ldr	r1, [r4, #16]
    4ab6:	e7e3      	b.n	4a80 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4ab8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4abc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4ac0:	4299      	cmp	r1, r3
    4ac2:	bfa8      	it	ge
    4ac4:	4619      	movge	r1, r3
    4ac6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4aca:	428b      	cmp	r3, r1
    4acc:	dd3c      	ble.n	4b48 <z_impl_k_mutex_lock+0x15c>
		return z_set_prio(mutex->owner, new_prio);
    4ace:	f000 fe4b 	bl	5768 <z_set_prio>
    4ad2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4ad4:	4622      	mov	r2, r4
    4ad6:	4641      	mov	r1, r8
    4ad8:	e9cd 6700 	strd	r6, r7, [sp]
    4adc:	4829      	ldr	r0, [pc, #164]	; (4b84 <z_impl_k_mutex_lock+0x198>)
    4ade:	f000 fb9d 	bl	521c <z_pend_curr>
	if (got_mutex == 0) {
    4ae2:	2800      	cmp	r0, #0
    4ae4:	d0e3      	beq.n	4aae <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    4ae6:	f04f 0320 	mov.w	r3, #32
    4aea:	f3ef 8611 	mrs	r6, BASEPRI
    4aee:	f383 8811 	msr	BASEPRI, r3
    4af2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4af6:	4823      	ldr	r0, [pc, #140]	; (4b84 <z_impl_k_mutex_lock+0x198>)
    4af8:	f7ff ff3e 	bl	4978 <z_spin_lock_valid>
    4afc:	b940      	cbnz	r0, 4b10 <z_impl_k_mutex_lock+0x124>
    4afe:	4922      	ldr	r1, [pc, #136]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4b00:	481f      	ldr	r0, [pc, #124]	; (4b80 <z_impl_k_mutex_lock+0x194>)
    4b02:	2281      	movs	r2, #129	; 0x81
    4b04:	f004 f8aa 	bl	8c5c <printk>
    4b08:	2181      	movs	r1, #129	; 0x81
    4b0a:	481f      	ldr	r0, [pc, #124]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4b0c:	f004 f972 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4b10:	481c      	ldr	r0, [pc, #112]	; (4b84 <z_impl_k_mutex_lock+0x198>)
    4b12:	f7ff ff4d 	bl	49b0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4b16:	6823      	ldr	r3, [r4, #0]
    4b18:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b1a:	429c      	cmp	r4, r3
    4b1c:	d007      	beq.n	4b2e <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4b1e:	b133      	cbz	r3, 4b2e <z_impl_k_mutex_lock+0x142>
    4b20:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4b24:	4299      	cmp	r1, r3
    4b26:	bfa8      	it	ge
    4b28:	4619      	movge	r1, r3
    4b2a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4b2e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4b30:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4b34:	4299      	cmp	r1, r3
    4b36:	d109      	bne.n	4b4c <z_impl_k_mutex_lock+0x160>
	if (resched) {
    4b38:	b16d      	cbz	r5, 4b56 <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
    4b3a:	4631      	mov	r1, r6
    4b3c:	4811      	ldr	r0, [pc, #68]	; (4b84 <z_impl_k_mutex_lock+0x198>)
    4b3e:	f000 f9cd 	bl	4edc <z_reschedule>
	return -EAGAIN;
    4b42:	f06f 000a 	mvn.w	r0, #10
    4b46:	e7b2      	b.n	4aae <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    4b48:	2500      	movs	r5, #0
    4b4a:	e7c3      	b.n	4ad4 <z_impl_k_mutex_lock+0xe8>
		return z_set_prio(mutex->owner, new_prio);
    4b4c:	f000 fe0c 	bl	5768 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4b50:	2800      	cmp	r0, #0
    4b52:	d1f2      	bne.n	4b3a <z_impl_k_mutex_lock+0x14e>
    4b54:	e7f0      	b.n	4b38 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b56:	480b      	ldr	r0, [pc, #44]	; (4b84 <z_impl_k_mutex_lock+0x198>)
    4b58:	f7ff ff1c 	bl	4994 <z_spin_unlock_valid>
    4b5c:	b940      	cbnz	r0, 4b70 <z_impl_k_mutex_lock+0x184>
    4b5e:	490a      	ldr	r1, [pc, #40]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4b60:	4807      	ldr	r0, [pc, #28]	; (4b80 <z_impl_k_mutex_lock+0x194>)
    4b62:	22ac      	movs	r2, #172	; 0xac
    4b64:	f004 f87a 	bl	8c5c <printk>
    4b68:	21ac      	movs	r1, #172	; 0xac
    4b6a:	4807      	ldr	r0, [pc, #28]	; (4b88 <z_impl_k_mutex_lock+0x19c>)
    4b6c:	f004 f942 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    4b70:	f386 8811 	msr	BASEPRI, r6
    4b74:	f3bf 8f6f 	isb	sy
    4b78:	e7e3      	b.n	4b42 <z_impl_k_mutex_lock+0x156>
    4b7a:	bf00      	nop
    4b7c:	0000ac5f 	.word	0x0000ac5f
    4b80:	00009b92 	.word	0x00009b92
    4b84:	20000cb8 	.word	0x20000cb8
    4b88:	00009bcc 	.word	0x00009bcc
    4b8c:	20000c88 	.word	0x20000c88

00004b90 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4b90:	b538      	push	{r3, r4, r5, lr}
    4b92:	4604      	mov	r4, r0
    4b94:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4b98:	b143      	cbz	r3, 4bac <z_impl_k_mutex_unlock+0x1c>
    4b9a:	4945      	ldr	r1, [pc, #276]	; (4cb0 <z_impl_k_mutex_unlock+0x120>)
    4b9c:	4845      	ldr	r0, [pc, #276]	; (4cb4 <z_impl_k_mutex_unlock+0x124>)
    4b9e:	22c7      	movs	r2, #199	; 0xc7
    4ba0:	f004 f85c 	bl	8c5c <printk>
    4ba4:	21c7      	movs	r1, #199	; 0xc7
    4ba6:	4842      	ldr	r0, [pc, #264]	; (4cb0 <z_impl_k_mutex_unlock+0x120>)
    4ba8:	f004 f924 	bl	8df4 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4bac:	68a3      	ldr	r3, [r4, #8]
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d078      	beq.n	4ca4 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4bb2:	4d41      	ldr	r5, [pc, #260]	; (4cb8 <z_impl_k_mutex_unlock+0x128>)
    4bb4:	68aa      	ldr	r2, [r5, #8]
    4bb6:	4293      	cmp	r3, r2
    4bb8:	d177      	bne.n	4caa <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    4bba:	68e3      	ldr	r3, [r4, #12]
    4bbc:	b943      	cbnz	r3, 4bd0 <z_impl_k_mutex_unlock+0x40>
    4bbe:	493c      	ldr	r1, [pc, #240]	; (4cb0 <z_impl_k_mutex_unlock+0x120>)
    4bc0:	483c      	ldr	r0, [pc, #240]	; (4cb4 <z_impl_k_mutex_unlock+0x124>)
    4bc2:	22df      	movs	r2, #223	; 0xdf
    4bc4:	f004 f84a 	bl	8c5c <printk>
    4bc8:	21df      	movs	r1, #223	; 0xdf
    4bca:	4839      	ldr	r0, [pc, #228]	; (4cb0 <z_impl_k_mutex_unlock+0x120>)
    4bcc:	f004 f912 	bl	8df4 <assert_post_action>
    4bd0:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    4bd4:	b143      	cbz	r3, 4be8 <z_impl_k_mutex_unlock+0x58>
    4bd6:	4939      	ldr	r1, [pc, #228]	; (4cbc <z_impl_k_mutex_unlock+0x12c>)
    4bd8:	4836      	ldr	r0, [pc, #216]	; (4cb4 <z_impl_k_mutex_unlock+0x124>)
    4bda:	22fe      	movs	r2, #254	; 0xfe
    4bdc:	f004 f83e 	bl	8c5c <printk>
    4be0:	21fe      	movs	r1, #254	; 0xfe
    4be2:	4836      	ldr	r0, [pc, #216]	; (4cbc <z_impl_k_mutex_unlock+0x12c>)
    4be4:	f004 f906 	bl	8df4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4be8:	68ab      	ldr	r3, [r5, #8]
    4bea:	7bdb      	ldrb	r3, [r3, #15]
    4bec:	2b01      	cmp	r3, #1
    4bee:	d108      	bne.n	4c02 <z_impl_k_mutex_unlock+0x72>
    4bf0:	4932      	ldr	r1, [pc, #200]	; (4cbc <z_impl_k_mutex_unlock+0x12c>)
    4bf2:	4830      	ldr	r0, [pc, #192]	; (4cb4 <z_impl_k_mutex_unlock+0x124>)
    4bf4:	22ff      	movs	r2, #255	; 0xff
    4bf6:	f004 f831 	bl	8c5c <printk>
    4bfa:	21ff      	movs	r1, #255	; 0xff
    4bfc:	482f      	ldr	r0, [pc, #188]	; (4cbc <z_impl_k_mutex_unlock+0x12c>)
    4bfe:	f004 f8f9 	bl	8df4 <assert_post_action>

	--_current->base.sched_locked;
    4c02:	68aa      	ldr	r2, [r5, #8]
    4c04:	7bd3      	ldrb	r3, [r2, #15]
    4c06:	3b01      	subs	r3, #1
    4c08:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    4c0a:	68e3      	ldr	r3, [r4, #12]
    4c0c:	2b01      	cmp	r3, #1
    4c0e:	d005      	beq.n	4c1c <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
    4c10:	3b01      	subs	r3, #1
    4c12:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    4c14:	f000 fb80 	bl	5318 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    4c18:	2000      	movs	r0, #0
}
    4c1a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4c1c:	f04f 0320 	mov.w	r3, #32
    4c20:	f3ef 8511 	mrs	r5, BASEPRI
    4c24:	f383 8811 	msr	BASEPRI, r3
    4c28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c2c:	4824      	ldr	r0, [pc, #144]	; (4cc0 <z_impl_k_mutex_unlock+0x130>)
    4c2e:	f7ff fea3 	bl	4978 <z_spin_lock_valid>
    4c32:	b940      	cbnz	r0, 4c46 <z_impl_k_mutex_unlock+0xb6>
    4c34:	4923      	ldr	r1, [pc, #140]	; (4cc4 <z_impl_k_mutex_unlock+0x134>)
    4c36:	481f      	ldr	r0, [pc, #124]	; (4cb4 <z_impl_k_mutex_unlock+0x124>)
    4c38:	2281      	movs	r2, #129	; 0x81
    4c3a:	f004 f80f 	bl	8c5c <printk>
    4c3e:	2181      	movs	r1, #129	; 0x81
    4c40:	4820      	ldr	r0, [pc, #128]	; (4cc4 <z_impl_k_mutex_unlock+0x134>)
    4c42:	f004 f8d7 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c46:	481e      	ldr	r0, [pc, #120]	; (4cc0 <z_impl_k_mutex_unlock+0x130>)
    4c48:	f7ff feb2 	bl	49b0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4c4c:	68a0      	ldr	r0, [r4, #8]
    4c4e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    4c50:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4c54:	4299      	cmp	r1, r3
    4c56:	d001      	beq.n	4c5c <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
    4c58:	f000 fd86 	bl	5768 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4c5c:	4620      	mov	r0, r4
    4c5e:	f000 fe0d 	bl	587c <z_unpend_first_thread>
	mutex->owner = new_owner;
    4c62:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4c64:	b158      	cbz	r0, 4c7e <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
    4c66:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4c6a:	6122      	str	r2, [r4, #16]
    4c6c:	2200      	movs	r2, #0
    4c6e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4c70:	f000 fcba 	bl	55e8 <z_ready_thread>
		z_reschedule(&lock, key);
    4c74:	4629      	mov	r1, r5
    4c76:	4812      	ldr	r0, [pc, #72]	; (4cc0 <z_impl_k_mutex_unlock+0x130>)
    4c78:	f000 f930 	bl	4edc <z_reschedule>
    4c7c:	e7ca      	b.n	4c14 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
    4c7e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c80:	480f      	ldr	r0, [pc, #60]	; (4cc0 <z_impl_k_mutex_unlock+0x130>)
    4c82:	f7ff fe87 	bl	4994 <z_spin_unlock_valid>
    4c86:	b940      	cbnz	r0, 4c9a <z_impl_k_mutex_unlock+0x10a>
    4c88:	490e      	ldr	r1, [pc, #56]	; (4cc4 <z_impl_k_mutex_unlock+0x134>)
    4c8a:	480a      	ldr	r0, [pc, #40]	; (4cb4 <z_impl_k_mutex_unlock+0x124>)
    4c8c:	22ac      	movs	r2, #172	; 0xac
    4c8e:	f003 ffe5 	bl	8c5c <printk>
    4c92:	21ac      	movs	r1, #172	; 0xac
    4c94:	480b      	ldr	r0, [pc, #44]	; (4cc4 <z_impl_k_mutex_unlock+0x134>)
    4c96:	f004 f8ad 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    4c9a:	f385 8811 	msr	BASEPRI, r5
    4c9e:	f3bf 8f6f 	isb	sy
    4ca2:	e7b7      	b.n	4c14 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
    4ca4:	f06f 0015 	mvn.w	r0, #21
    4ca8:	e7b7      	b.n	4c1a <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
    4caa:	f04f 30ff 	mov.w	r0, #4294967295
    4cae:	e7b4      	b.n	4c1a <z_impl_k_mutex_unlock+0x8a>
    4cb0:	0000ac5f 	.word	0x0000ac5f
    4cb4:	00009b92 	.word	0x00009b92
    4cb8:	20000c88 	.word	0x20000c88
    4cbc:	0000ac81 	.word	0x0000ac81
    4cc0:	20000cb8 	.word	0x20000cb8
    4cc4:	00009bcc 	.word	0x00009bcc

00004cc8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4cc8:	b538      	push	{r3, r4, r5, lr}
    4cca:	4604      	mov	r4, r0
	__asm__ volatile(
    4ccc:	f04f 0320 	mov.w	r3, #32
    4cd0:	f3ef 8511 	mrs	r5, BASEPRI
    4cd4:	f383 8811 	msr	BASEPRI, r3
    4cd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4cdc:	4812      	ldr	r0, [pc, #72]	; (4d28 <z_impl_k_sem_give+0x60>)
    4cde:	f7ff fe4b 	bl	4978 <z_spin_lock_valid>
    4ce2:	b940      	cbnz	r0, 4cf6 <z_impl_k_sem_give+0x2e>
    4ce4:	4911      	ldr	r1, [pc, #68]	; (4d2c <z_impl_k_sem_give+0x64>)
    4ce6:	4812      	ldr	r0, [pc, #72]	; (4d30 <z_impl_k_sem_give+0x68>)
    4ce8:	2281      	movs	r2, #129	; 0x81
    4cea:	f003 ffb7 	bl	8c5c <printk>
    4cee:	2181      	movs	r1, #129	; 0x81
    4cf0:	480e      	ldr	r0, [pc, #56]	; (4d2c <z_impl_k_sem_give+0x64>)
    4cf2:	f004 f87f 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4cf6:	480c      	ldr	r0, [pc, #48]	; (4d28 <z_impl_k_sem_give+0x60>)
    4cf8:	f7ff fe5a 	bl	49b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4cfc:	4620      	mov	r0, r4
    4cfe:	f000 fdbd 	bl	587c <z_unpend_first_thread>

	if (thread != NULL) {
    4d02:	b148      	cbz	r0, 4d18 <z_impl_k_sem_give+0x50>
    4d04:	2200      	movs	r2, #0
    4d06:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4d08:	f000 fc6e 	bl	55e8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4d0c:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4d12:	4805      	ldr	r0, [pc, #20]	; (4d28 <z_impl_k_sem_give+0x60>)
    4d14:	f000 b8e2 	b.w	4edc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4d18:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4d1c:	429a      	cmp	r2, r3
    4d1e:	bf18      	it	ne
    4d20:	3301      	addne	r3, #1
    4d22:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    4d24:	e7f2      	b.n	4d0c <z_impl_k_sem_give+0x44>
    4d26:	bf00      	nop
    4d28:	20000cbc 	.word	0x20000cbc
    4d2c:	00009bcc 	.word	0x00009bcc
    4d30:	00009b92 	.word	0x00009b92

00004d34 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d36:	4604      	mov	r4, r0
    4d38:	4616      	mov	r6, r2
    4d3a:	461f      	mov	r7, r3
    4d3c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    4d40:	b15b      	cbz	r3, 4d5a <z_impl_k_sem_take+0x26>
    4d42:	ea56 0307 	orrs.w	r3, r6, r7
    4d46:	d008      	beq.n	4d5a <z_impl_k_sem_take+0x26>
    4d48:	492b      	ldr	r1, [pc, #172]	; (4df8 <z_impl_k_sem_take+0xc4>)
    4d4a:	482c      	ldr	r0, [pc, #176]	; (4dfc <z_impl_k_sem_take+0xc8>)
    4d4c:	2279      	movs	r2, #121	; 0x79
    4d4e:	f003 ff85 	bl	8c5c <printk>
    4d52:	2179      	movs	r1, #121	; 0x79
    4d54:	4828      	ldr	r0, [pc, #160]	; (4df8 <z_impl_k_sem_take+0xc4>)
    4d56:	f004 f84d 	bl	8df4 <assert_post_action>
    4d5a:	f04f 0320 	mov.w	r3, #32
    4d5e:	f3ef 8511 	mrs	r5, BASEPRI
    4d62:	f383 8811 	msr	BASEPRI, r3
    4d66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d6a:	4825      	ldr	r0, [pc, #148]	; (4e00 <z_impl_k_sem_take+0xcc>)
    4d6c:	f7ff fe04 	bl	4978 <z_spin_lock_valid>
    4d70:	b940      	cbnz	r0, 4d84 <z_impl_k_sem_take+0x50>
    4d72:	4924      	ldr	r1, [pc, #144]	; (4e04 <z_impl_k_sem_take+0xd0>)
    4d74:	4821      	ldr	r0, [pc, #132]	; (4dfc <z_impl_k_sem_take+0xc8>)
    4d76:	2281      	movs	r2, #129	; 0x81
    4d78:	f003 ff70 	bl	8c5c <printk>
    4d7c:	2181      	movs	r1, #129	; 0x81
    4d7e:	4821      	ldr	r0, [pc, #132]	; (4e04 <z_impl_k_sem_take+0xd0>)
    4d80:	f004 f838 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4d84:	481e      	ldr	r0, [pc, #120]	; (4e00 <z_impl_k_sem_take+0xcc>)
    4d86:	f7ff fe13 	bl	49b0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4d8a:	68a3      	ldr	r3, [r4, #8]
    4d8c:	b1ab      	cbz	r3, 4dba <z_impl_k_sem_take+0x86>
		sem->count--;
    4d8e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d90:	481b      	ldr	r0, [pc, #108]	; (4e00 <z_impl_k_sem_take+0xcc>)
    4d92:	60a3      	str	r3, [r4, #8]
    4d94:	f7ff fdfe 	bl	4994 <z_spin_unlock_valid>
    4d98:	b940      	cbnz	r0, 4dac <z_impl_k_sem_take+0x78>
    4d9a:	491a      	ldr	r1, [pc, #104]	; (4e04 <z_impl_k_sem_take+0xd0>)
    4d9c:	4817      	ldr	r0, [pc, #92]	; (4dfc <z_impl_k_sem_take+0xc8>)
    4d9e:	22ac      	movs	r2, #172	; 0xac
    4da0:	f003 ff5c 	bl	8c5c <printk>
    4da4:	21ac      	movs	r1, #172	; 0xac
    4da6:	4817      	ldr	r0, [pc, #92]	; (4e04 <z_impl_k_sem_take+0xd0>)
    4da8:	f004 f824 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    4dac:	f385 8811 	msr	BASEPRI, r5
    4db0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4db4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4db6:	b003      	add	sp, #12
    4db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4dba:	ea56 0307 	orrs.w	r3, r6, r7
    4dbe:	d113      	bne.n	4de8 <z_impl_k_sem_take+0xb4>
    4dc0:	480f      	ldr	r0, [pc, #60]	; (4e00 <z_impl_k_sem_take+0xcc>)
    4dc2:	f7ff fde7 	bl	4994 <z_spin_unlock_valid>
    4dc6:	b940      	cbnz	r0, 4dda <z_impl_k_sem_take+0xa6>
    4dc8:	490e      	ldr	r1, [pc, #56]	; (4e04 <z_impl_k_sem_take+0xd0>)
    4dca:	480c      	ldr	r0, [pc, #48]	; (4dfc <z_impl_k_sem_take+0xc8>)
    4dcc:	22ac      	movs	r2, #172	; 0xac
    4dce:	f003 ff45 	bl	8c5c <printk>
    4dd2:	21ac      	movs	r1, #172	; 0xac
    4dd4:	480b      	ldr	r0, [pc, #44]	; (4e04 <z_impl_k_sem_take+0xd0>)
    4dd6:	f004 f80d 	bl	8df4 <assert_post_action>
    4dda:	f385 8811 	msr	BASEPRI, r5
    4dde:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4de2:	f06f 000f 	mvn.w	r0, #15
    4de6:	e7e6      	b.n	4db6 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4de8:	4622      	mov	r2, r4
    4dea:	4629      	mov	r1, r5
    4dec:	e9cd 6700 	strd	r6, r7, [sp]
    4df0:	4803      	ldr	r0, [pc, #12]	; (4e00 <z_impl_k_sem_take+0xcc>)
    4df2:	f000 fa13 	bl	521c <z_pend_curr>
	return ret;
    4df6:	e7de      	b.n	4db6 <z_impl_k_sem_take+0x82>
    4df8:	0000acac 	.word	0x0000acac
    4dfc:	00009b92 	.word	0x00009b92
    4e00:	20000cbc 	.word	0x20000cbc
    4e04:	00009bcc 	.word	0x00009bcc

00004e08 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4e08:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    4e0a:	4c08      	ldr	r4, [pc, #32]	; (4e2c <z_reset_time_slice+0x24>)
    4e0c:	6823      	ldr	r3, [r4, #0]
    4e0e:	b15b      	cbz	r3, 4e28 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4e10:	f7fc fe1c 	bl	1a4c <sys_clock_elapsed>
    4e14:	4603      	mov	r3, r0
    4e16:	6820      	ldr	r0, [r4, #0]
    4e18:	4a05      	ldr	r2, [pc, #20]	; (4e30 <z_reset_time_slice+0x28>)
    4e1a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    4e1c:	2100      	movs	r1, #0
	}
}
    4e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4e22:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4e24:	f001 b8e8 	b.w	5ff8 <z_set_timeout_expiry>
}
    4e28:	bd10      	pop	{r4, pc}
    4e2a:	bf00      	nop
    4e2c:	20000ccc 	.word	0x20000ccc
    4e30:	20000c88 	.word	0x20000c88

00004e34 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e36:	4604      	mov	r4, r0
    4e38:	460d      	mov	r5, r1
	__asm__ volatile(
    4e3a:	f04f 0320 	mov.w	r3, #32
    4e3e:	f3ef 8611 	mrs	r6, BASEPRI
    4e42:	f383 8811 	msr	BASEPRI, r3
    4e46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e4a:	481e      	ldr	r0, [pc, #120]	; (4ec4 <k_sched_time_slice_set+0x90>)
    4e4c:	f7ff fd94 	bl	4978 <z_spin_lock_valid>
    4e50:	b940      	cbnz	r0, 4e64 <k_sched_time_slice_set+0x30>
    4e52:	491d      	ldr	r1, [pc, #116]	; (4ec8 <k_sched_time_slice_set+0x94>)
    4e54:	481d      	ldr	r0, [pc, #116]	; (4ecc <k_sched_time_slice_set+0x98>)
    4e56:	2281      	movs	r2, #129	; 0x81
    4e58:	f003 ff00 	bl	8c5c <printk>
    4e5c:	2181      	movs	r1, #129	; 0x81
    4e5e:	481a      	ldr	r0, [pc, #104]	; (4ec8 <k_sched_time_slice_set+0x94>)
    4e60:	f003 ffc8 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4e64:	4817      	ldr	r0, [pc, #92]	; (4ec4 <k_sched_time_slice_set+0x90>)
    4e66:	f7ff fda3 	bl	49b0 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
    4e6a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4e6e:	2200      	movs	r2, #0
    4e70:	f240 30e7 	movw	r0, #999	; 0x3e7
    4e74:	2100      	movs	r1, #0
    4e76:	4b16      	ldr	r3, [pc, #88]	; (4ed0 <k_sched_time_slice_set+0x9c>)
    4e78:	fbe7 0104 	umlal	r0, r1, r7, r4
    4e7c:	611a      	str	r2, [r3, #16]
    4e7e:	2300      	movs	r3, #0
    4e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e84:	f7fb f9da 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4e88:	2c00      	cmp	r4, #0
    4e8a:	4b12      	ldr	r3, [pc, #72]	; (4ed4 <k_sched_time_slice_set+0xa0>)
    4e8c:	dc16      	bgt.n	4ebc <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    4e8e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    4e90:	4b11      	ldr	r3, [pc, #68]	; (4ed8 <k_sched_time_slice_set+0xa4>)
    4e92:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    4e94:	f7ff ffb8 	bl	4e08 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e98:	480a      	ldr	r0, [pc, #40]	; (4ec4 <k_sched_time_slice_set+0x90>)
    4e9a:	f7ff fd7b 	bl	4994 <z_spin_unlock_valid>
    4e9e:	b940      	cbnz	r0, 4eb2 <k_sched_time_slice_set+0x7e>
    4ea0:	4909      	ldr	r1, [pc, #36]	; (4ec8 <k_sched_time_slice_set+0x94>)
    4ea2:	480a      	ldr	r0, [pc, #40]	; (4ecc <k_sched_time_slice_set+0x98>)
    4ea4:	22ac      	movs	r2, #172	; 0xac
    4ea6:	f003 fed9 	bl	8c5c <printk>
    4eaa:	21ac      	movs	r1, #172	; 0xac
    4eac:	4806      	ldr	r0, [pc, #24]	; (4ec8 <k_sched_time_slice_set+0x94>)
    4eae:	f003 ffa1 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    4eb2:	f386 8811 	msr	BASEPRI, r6
    4eb6:	f3bf 8f6f 	isb	sy
	}
}
    4eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    4ebc:	2802      	cmp	r0, #2
    4ebe:	bfb8      	it	lt
    4ec0:	2002      	movlt	r0, #2
    4ec2:	e7e4      	b.n	4e8e <k_sched_time_slice_set+0x5a>
    4ec4:	20000cc4 	.word	0x20000cc4
    4ec8:	00009bcc 	.word	0x00009bcc
    4ecc:	00009b92 	.word	0x00009b92
    4ed0:	20000c88 	.word	0x20000c88
    4ed4:	20000ccc 	.word	0x20000ccc
    4ed8:	20000cc8 	.word	0x20000cc8

00004edc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4edc:	b510      	push	{r4, lr}
    4ede:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4ee0:	460c      	mov	r4, r1
    4ee2:	b9c1      	cbnz	r1, 4f16 <z_reschedule+0x3a>
    4ee4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    4ee8:	b9aa      	cbnz	r2, 4f16 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    4eea:	4a14      	ldr	r2, [pc, #80]	; (4f3c <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    4eec:	6a51      	ldr	r1, [r2, #36]	; 0x24
    4eee:	6892      	ldr	r2, [r2, #8]
    4ef0:	4291      	cmp	r1, r2
    4ef2:	d010      	beq.n	4f16 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ef4:	f7ff fd4e 	bl	4994 <z_spin_unlock_valid>
    4ef8:	b940      	cbnz	r0, 4f0c <z_reschedule+0x30>
    4efa:	4911      	ldr	r1, [pc, #68]	; (4f40 <z_reschedule+0x64>)
    4efc:	4811      	ldr	r0, [pc, #68]	; (4f44 <z_reschedule+0x68>)
    4efe:	22c3      	movs	r2, #195	; 0xc3
    4f00:	f003 feac 	bl	8c5c <printk>
    4f04:	21c3      	movs	r1, #195	; 0xc3
    4f06:	480e      	ldr	r0, [pc, #56]	; (4f40 <z_reschedule+0x64>)
    4f08:	f003 ff74 	bl	8df4 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    4f10:	2000      	movs	r0, #0
    4f12:	f7fd b92b 	b.w	216c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f16:	4618      	mov	r0, r3
    4f18:	f7ff fd3c 	bl	4994 <z_spin_unlock_valid>
    4f1c:	b940      	cbnz	r0, 4f30 <z_reschedule+0x54>
    4f1e:	4908      	ldr	r1, [pc, #32]	; (4f40 <z_reschedule+0x64>)
    4f20:	4808      	ldr	r0, [pc, #32]	; (4f44 <z_reschedule+0x68>)
    4f22:	22ac      	movs	r2, #172	; 0xac
    4f24:	f003 fe9a 	bl	8c5c <printk>
    4f28:	21ac      	movs	r1, #172	; 0xac
    4f2a:	4805      	ldr	r0, [pc, #20]	; (4f40 <z_reschedule+0x64>)
    4f2c:	f003 ff62 	bl	8df4 <assert_post_action>
    4f30:	f384 8811 	msr	BASEPRI, r4
    4f34:	f3bf 8f6f 	isb	sy
    4f38:	bd10      	pop	{r4, pc}
    4f3a:	bf00      	nop
    4f3c:	20000c88 	.word	0x20000c88
    4f40:	00009bcc 	.word	0x00009bcc
    4f44:	00009b92 	.word	0x00009b92

00004f48 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4f48:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4f4a:	f04f 0320 	mov.w	r3, #32
    4f4e:	f3ef 8511 	mrs	r5, BASEPRI
    4f52:	f383 8811 	msr	BASEPRI, r3
    4f56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f5a:	4820      	ldr	r0, [pc, #128]	; (4fdc <k_sched_lock+0x94>)
    4f5c:	f7ff fd0c 	bl	4978 <z_spin_lock_valid>
    4f60:	b940      	cbnz	r0, 4f74 <k_sched_lock+0x2c>
    4f62:	491f      	ldr	r1, [pc, #124]	; (4fe0 <k_sched_lock+0x98>)
    4f64:	481f      	ldr	r0, [pc, #124]	; (4fe4 <k_sched_lock+0x9c>)
    4f66:	2281      	movs	r2, #129	; 0x81
    4f68:	f003 fe78 	bl	8c5c <printk>
    4f6c:	2181      	movs	r1, #129	; 0x81
    4f6e:	481c      	ldr	r0, [pc, #112]	; (4fe0 <k_sched_lock+0x98>)
    4f70:	f003 ff40 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4f74:	4819      	ldr	r0, [pc, #100]	; (4fdc <k_sched_lock+0x94>)
    4f76:	f7ff fd1b 	bl	49b0 <z_spin_lock_set_owner>
    4f7a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4f7e:	b143      	cbz	r3, 4f92 <k_sched_lock+0x4a>
    4f80:	4919      	ldr	r1, [pc, #100]	; (4fe8 <k_sched_lock+0xa0>)
    4f82:	4818      	ldr	r0, [pc, #96]	; (4fe4 <k_sched_lock+0x9c>)
    4f84:	22fe      	movs	r2, #254	; 0xfe
    4f86:	f003 fe69 	bl	8c5c <printk>
    4f8a:	21fe      	movs	r1, #254	; 0xfe
    4f8c:	4816      	ldr	r0, [pc, #88]	; (4fe8 <k_sched_lock+0xa0>)
    4f8e:	f003 ff31 	bl	8df4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4f92:	4c16      	ldr	r4, [pc, #88]	; (4fec <k_sched_lock+0xa4>)
    4f94:	68a2      	ldr	r2, [r4, #8]
    4f96:	7bd2      	ldrb	r2, [r2, #15]
    4f98:	2a01      	cmp	r2, #1
    4f9a:	d108      	bne.n	4fae <k_sched_lock+0x66>
    4f9c:	4912      	ldr	r1, [pc, #72]	; (4fe8 <k_sched_lock+0xa0>)
    4f9e:	4811      	ldr	r0, [pc, #68]	; (4fe4 <k_sched_lock+0x9c>)
    4fa0:	22ff      	movs	r2, #255	; 0xff
    4fa2:	f003 fe5b 	bl	8c5c <printk>
    4fa6:	21ff      	movs	r1, #255	; 0xff
    4fa8:	480f      	ldr	r0, [pc, #60]	; (4fe8 <k_sched_lock+0xa0>)
    4faa:	f003 ff23 	bl	8df4 <assert_post_action>
	--_current->base.sched_locked;
    4fae:	68a2      	ldr	r2, [r4, #8]
    4fb0:	7bd3      	ldrb	r3, [r2, #15]
    4fb2:	3b01      	subs	r3, #1
    4fb4:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fb6:	4809      	ldr	r0, [pc, #36]	; (4fdc <k_sched_lock+0x94>)
    4fb8:	f7ff fcec 	bl	4994 <z_spin_unlock_valid>
    4fbc:	b940      	cbnz	r0, 4fd0 <k_sched_lock+0x88>
    4fbe:	4908      	ldr	r1, [pc, #32]	; (4fe0 <k_sched_lock+0x98>)
    4fc0:	4808      	ldr	r0, [pc, #32]	; (4fe4 <k_sched_lock+0x9c>)
    4fc2:	22ac      	movs	r2, #172	; 0xac
    4fc4:	f003 fe4a 	bl	8c5c <printk>
    4fc8:	21ac      	movs	r1, #172	; 0xac
    4fca:	4805      	ldr	r0, [pc, #20]	; (4fe0 <k_sched_lock+0x98>)
    4fcc:	f003 ff12 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    4fd0:	f385 8811 	msr	BASEPRI, r5
    4fd4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4fd8:	bd38      	pop	{r3, r4, r5, pc}
    4fda:	bf00      	nop
    4fdc:	20000cc4 	.word	0x20000cc4
    4fe0:	00009bcc 	.word	0x00009bcc
    4fe4:	00009b92 	.word	0x00009b92
    4fe8:	0000ac81 	.word	0x0000ac81
    4fec:	20000c88 	.word	0x20000c88

00004ff0 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4ff0:	4b0b      	ldr	r3, [pc, #44]	; (5020 <z_priq_dumb_remove+0x30>)
{
    4ff2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4ff4:	4299      	cmp	r1, r3
{
    4ff6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4ff8:	d10a      	bne.n	5010 <z_priq_dumb_remove+0x20>
    4ffa:	490a      	ldr	r1, [pc, #40]	; (5024 <z_priq_dumb_remove+0x34>)
    4ffc:	480a      	ldr	r0, [pc, #40]	; (5028 <z_priq_dumb_remove+0x38>)
    4ffe:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    5002:	f003 fe2b 	bl	8c5c <printk>
    5006:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    500a:	4806      	ldr	r0, [pc, #24]	; (5024 <z_priq_dumb_remove+0x34>)
    500c:	f003 fef2 	bl	8df4 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    5010:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    5014:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5016:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5018:	2300      	movs	r3, #0
	node->prev = NULL;
    501a:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    501e:	bd10      	pop	{r4, pc}
    5020:	200001e0 	.word	0x200001e0
    5024:	0000accc 	.word	0x0000accc
    5028:	00009b92 	.word	0x00009b92

0000502c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    502c:	6883      	ldr	r3, [r0, #8]
{
    502e:	b510      	push	{r4, lr}
    5030:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    5032:	b953      	cbnz	r3, 504a <unpend_thread_no_timeout+0x1e>
    5034:	490a      	ldr	r1, [pc, #40]	; (5060 <unpend_thread_no_timeout+0x34>)
    5036:	480b      	ldr	r0, [pc, #44]	; (5064 <unpend_thread_no_timeout+0x38>)
    5038:	f240 224f 	movw	r2, #591	; 0x24f
    503c:	f003 fe0e 	bl	8c5c <printk>
    5040:	f240 214f 	movw	r1, #591	; 0x24f
    5044:	4806      	ldr	r0, [pc, #24]	; (5060 <unpend_thread_no_timeout+0x34>)
    5046:	f003 fed5 	bl	8df4 <assert_post_action>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    504a:	4621      	mov	r1, r4
    504c:	68a0      	ldr	r0, [r4, #8]
    504e:	f7ff ffcf 	bl	4ff0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5052:	7b63      	ldrb	r3, [r4, #13]
    5054:	f023 0302 	bic.w	r3, r3, #2
    5058:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    505a:	2300      	movs	r3, #0
    505c:	60a3      	str	r3, [r4, #8]
}
    505e:	bd10      	pop	{r4, pc}
    5060:	0000accc 	.word	0x0000accc
    5064:	00009b92 	.word	0x00009b92

00005068 <update_cache>:
{
    5068:	b538      	push	{r3, r4, r5, lr}
    506a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    506c:	4812      	ldr	r0, [pc, #72]	; (50b8 <update_cache+0x50>)
    506e:	f004 f9ed 	bl	944c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5072:	4d12      	ldr	r5, [pc, #72]	; (50bc <update_cache+0x54>)
    5074:	4604      	mov	r4, r0
    5076:	b900      	cbnz	r0, 507a <update_cache+0x12>
    5078:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    507a:	b9aa      	cbnz	r2, 50a8 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    507c:	68ab      	ldr	r3, [r5, #8]
    507e:	b943      	cbnz	r3, 5092 <update_cache+0x2a>
    5080:	490f      	ldr	r1, [pc, #60]	; (50c0 <update_cache+0x58>)
    5082:	4810      	ldr	r0, [pc, #64]	; (50c4 <update_cache+0x5c>)
    5084:	2285      	movs	r2, #133	; 0x85
    5086:	f003 fde9 	bl	8c5c <printk>
    508a:	2185      	movs	r1, #133	; 0x85
    508c:	480c      	ldr	r0, [pc, #48]	; (50c0 <update_cache+0x58>)
    508e:	f003 feb1 	bl	8df4 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5092:	68ab      	ldr	r3, [r5, #8]
    5094:	7b5a      	ldrb	r2, [r3, #13]
    5096:	06d2      	lsls	r2, r2, #27
    5098:	d106      	bne.n	50a8 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    509a:	69a2      	ldr	r2, [r4, #24]
    509c:	b922      	cbnz	r2, 50a8 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    509e:	89da      	ldrh	r2, [r3, #14]
    50a0:	2a7f      	cmp	r2, #127	; 0x7f
    50a2:	d901      	bls.n	50a8 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    50a4:	626b      	str	r3, [r5, #36]	; 0x24
}
    50a6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    50a8:	68ab      	ldr	r3, [r5, #8]
    50aa:	42a3      	cmp	r3, r4
    50ac:	d001      	beq.n	50b2 <update_cache+0x4a>
			z_reset_time_slice();
    50ae:	f7ff feab 	bl	4e08 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    50b2:	626c      	str	r4, [r5, #36]	; 0x24
}
    50b4:	e7f7      	b.n	50a6 <update_cache+0x3e>
    50b6:	bf00      	nop
    50b8:	20000cb0 	.word	0x20000cb0
    50bc:	20000c88 	.word	0x20000c88
    50c0:	0000accc 	.word	0x0000accc
    50c4:	00009b92 	.word	0x00009b92

000050c8 <unready_thread>:
{
    50c8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    50ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    50ce:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    50d0:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    50d2:	7b43      	ldrb	r3, [r0, #13]
    50d4:	da06      	bge.n	50e4 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    50d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    50da:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    50dc:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    50de:	4806      	ldr	r0, [pc, #24]	; (50f8 <unready_thread+0x30>)
    50e0:	f7ff ff86 	bl	4ff0 <z_priq_dumb_remove>
	update_cache(thread == _current);
    50e4:	4b05      	ldr	r3, [pc, #20]	; (50fc <unready_thread+0x34>)
    50e6:	6898      	ldr	r0, [r3, #8]
    50e8:	1b03      	subs	r3, r0, r4
    50ea:	4258      	negs	r0, r3
    50ec:	4158      	adcs	r0, r3
}
    50ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    50f2:	f7ff bfb9 	b.w	5068 <update_cache>
    50f6:	bf00      	nop
    50f8:	20000cb0 	.word	0x20000cb0
    50fc:	20000c88 	.word	0x20000c88

00005100 <add_to_waitq_locked>:
{
    5100:	b538      	push	{r3, r4, r5, lr}
    5102:	4604      	mov	r4, r0
    5104:	460d      	mov	r5, r1
	unready_thread(thread);
    5106:	f7ff ffdf 	bl	50c8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    510a:	7b63      	ldrb	r3, [r4, #13]
    510c:	f043 0302 	orr.w	r3, r3, #2
    5110:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5112:	b325      	cbz	r5, 515e <add_to_waitq_locked+0x5e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5114:	4b18      	ldr	r3, [pc, #96]	; (5178 <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
    5116:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5118:	429c      	cmp	r4, r3
    511a:	d10a      	bne.n	5132 <add_to_waitq_locked+0x32>
    511c:	4917      	ldr	r1, [pc, #92]	; (517c <add_to_waitq_locked+0x7c>)
    511e:	4818      	ldr	r0, [pc, #96]	; (5180 <add_to_waitq_locked+0x80>)
    5120:	f240 32b5 	movw	r2, #949	; 0x3b5
    5124:	f003 fd9a 	bl	8c5c <printk>
    5128:	f240 31b5 	movw	r1, #949	; 0x3b5
    512c:	4813      	ldr	r0, [pc, #76]	; (517c <add_to_waitq_locked+0x7c>)
    512e:	f003 fe61 	bl	8df4 <assert_post_action>
	return list->head == list;
    5132:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5134:	429d      	cmp	r5, r3
    5136:	bf08      	it	eq
    5138:	2300      	moveq	r3, #0
    513a:	2b00      	cmp	r3, #0
    513c:	bf38      	it	cc
    513e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5140:	b19b      	cbz	r3, 516a <add_to_waitq_locked+0x6a>
	int32_t b1 = thread_1->base.prio;
    5142:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5146:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    514a:	4291      	cmp	r1, r2
    514c:	d008      	beq.n	5160 <add_to_waitq_locked+0x60>
		return b2 - b1;
    514e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5150:	2a00      	cmp	r2, #0
    5152:	dd05      	ble.n	5160 <add_to_waitq_locked+0x60>
	sys_dnode_t *const prev = successor->prev;
    5154:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5156:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    515a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    515c:	605c      	str	r4, [r3, #4]
}
    515e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5160:	686a      	ldr	r2, [r5, #4]
    5162:	4293      	cmp	r3, r2
    5164:	d001      	beq.n	516a <add_to_waitq_locked+0x6a>
    5166:	681b      	ldr	r3, [r3, #0]
    5168:	e7ea      	b.n	5140 <add_to_waitq_locked+0x40>
	sys_dnode_t *const tail = list->tail;
    516a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    516c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5170:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5172:	606c      	str	r4, [r5, #4]
    5174:	e7f3      	b.n	515e <add_to_waitq_locked+0x5e>
    5176:	bf00      	nop
    5178:	200001e0 	.word	0x200001e0
    517c:	0000accc 	.word	0x0000accc
    5180:	00009b92 	.word	0x00009b92

00005184 <pend>:
{
    5184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5188:	4604      	mov	r4, r0
    518a:	460d      	mov	r5, r1
    518c:	4616      	mov	r6, r2
    518e:	461f      	mov	r7, r3
	__asm__ volatile(
    5190:	f04f 0320 	mov.w	r3, #32
    5194:	f3ef 8811 	mrs	r8, BASEPRI
    5198:	f383 8811 	msr	BASEPRI, r3
    519c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51a0:	481a      	ldr	r0, [pc, #104]	; (520c <pend+0x88>)
    51a2:	f7ff fbe9 	bl	4978 <z_spin_lock_valid>
    51a6:	b940      	cbnz	r0, 51ba <pend+0x36>
    51a8:	4919      	ldr	r1, [pc, #100]	; (5210 <pend+0x8c>)
    51aa:	481a      	ldr	r0, [pc, #104]	; (5214 <pend+0x90>)
    51ac:	2281      	movs	r2, #129	; 0x81
    51ae:	f003 fd55 	bl	8c5c <printk>
    51b2:	2181      	movs	r1, #129	; 0x81
    51b4:	4816      	ldr	r0, [pc, #88]	; (5210 <pend+0x8c>)
    51b6:	f003 fe1d 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    51ba:	4814      	ldr	r0, [pc, #80]	; (520c <pend+0x88>)
    51bc:	f7ff fbf8 	bl	49b0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    51c0:	4620      	mov	r0, r4
    51c2:	4629      	mov	r1, r5
    51c4:	f7ff ff9c 	bl	5100 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    51c8:	4810      	ldr	r0, [pc, #64]	; (520c <pend+0x88>)
    51ca:	f7ff fbe3 	bl	4994 <z_spin_unlock_valid>
    51ce:	b940      	cbnz	r0, 51e2 <pend+0x5e>
    51d0:	490f      	ldr	r1, [pc, #60]	; (5210 <pend+0x8c>)
    51d2:	4810      	ldr	r0, [pc, #64]	; (5214 <pend+0x90>)
    51d4:	22ac      	movs	r2, #172	; 0xac
    51d6:	f003 fd41 	bl	8c5c <printk>
    51da:	21ac      	movs	r1, #172	; 0xac
    51dc:	480c      	ldr	r0, [pc, #48]	; (5210 <pend+0x8c>)
    51de:	f003 fe09 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    51e2:	f388 8811 	msr	BASEPRI, r8
    51e6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    51ea:	1c7b      	adds	r3, r7, #1
    51ec:	bf08      	it	eq
    51ee:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    51f2:	d008      	beq.n	5206 <pend+0x82>
    51f4:	4632      	mov	r2, r6
    51f6:	463b      	mov	r3, r7
    51f8:	f104 0018 	add.w	r0, r4, #24
    51fc:	4906      	ldr	r1, [pc, #24]	; (5218 <pend+0x94>)
}
    51fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5202:	f000 bdcd 	b.w	5da0 <z_add_timeout>
    5206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    520a:	bf00      	nop
    520c:	20000cc4 	.word	0x20000cc4
    5210:	00009bcc 	.word	0x00009bcc
    5214:	00009b92 	.word	0x00009b92
    5218:	000056d9 	.word	0x000056d9

0000521c <z_pend_curr>:
{
    521c:	b538      	push	{r3, r4, r5, lr}
    521e:	4605      	mov	r5, r0
	pending_current = _current;
    5220:	4b0d      	ldr	r3, [pc, #52]	; (5258 <z_pend_curr+0x3c>)
{
    5222:	460c      	mov	r4, r1
	pending_current = _current;
    5224:	6898      	ldr	r0, [r3, #8]
    5226:	4b0d      	ldr	r3, [pc, #52]	; (525c <z_pend_curr+0x40>)
{
    5228:	4611      	mov	r1, r2
	pending_current = _current;
    522a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    522c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5230:	f7ff ffa8 	bl	5184 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5234:	4628      	mov	r0, r5
    5236:	f7ff fbad 	bl	4994 <z_spin_unlock_valid>
    523a:	b940      	cbnz	r0, 524e <z_pend_curr+0x32>
    523c:	4908      	ldr	r1, [pc, #32]	; (5260 <z_pend_curr+0x44>)
    523e:	4809      	ldr	r0, [pc, #36]	; (5264 <z_pend_curr+0x48>)
    5240:	22c3      	movs	r2, #195	; 0xc3
    5242:	f003 fd0b 	bl	8c5c <printk>
    5246:	21c3      	movs	r1, #195	; 0xc3
    5248:	4805      	ldr	r0, [pc, #20]	; (5260 <z_pend_curr+0x44>)
    524a:	f003 fdd3 	bl	8df4 <assert_post_action>
    524e:	4620      	mov	r0, r4
}
    5250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5254:	f7fc bf8a 	b.w	216c <arch_swap>
    5258:	20000c88 	.word	0x20000c88
    525c:	20000cc0 	.word	0x20000cc0
    5260:	00009bcc 	.word	0x00009bcc
    5264:	00009b92 	.word	0x00009b92

00005268 <z_impl_k_thread_suspend>:
{
    5268:	b570      	push	{r4, r5, r6, lr}
    526a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    526c:	3018      	adds	r0, #24
    526e:	f000 fe51 	bl	5f14 <z_abort_timeout>
	__asm__ volatile(
    5272:	f04f 0320 	mov.w	r3, #32
    5276:	f3ef 8611 	mrs	r6, BASEPRI
    527a:	f383 8811 	msr	BASEPRI, r3
    527e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5282:	4820      	ldr	r0, [pc, #128]	; (5304 <z_impl_k_thread_suspend+0x9c>)
    5284:	f7ff fb78 	bl	4978 <z_spin_lock_valid>
    5288:	b940      	cbnz	r0, 529c <z_impl_k_thread_suspend+0x34>
    528a:	491f      	ldr	r1, [pc, #124]	; (5308 <z_impl_k_thread_suspend+0xa0>)
    528c:	481f      	ldr	r0, [pc, #124]	; (530c <z_impl_k_thread_suspend+0xa4>)
    528e:	2281      	movs	r2, #129	; 0x81
    5290:	f003 fce4 	bl	8c5c <printk>
    5294:	2181      	movs	r1, #129	; 0x81
    5296:	481c      	ldr	r0, [pc, #112]	; (5308 <z_impl_k_thread_suspend+0xa0>)
    5298:	f003 fdac 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    529c:	4819      	ldr	r0, [pc, #100]	; (5304 <z_impl_k_thread_suspend+0x9c>)
    529e:	f7ff fb87 	bl	49b0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    52a2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    52a6:	7b63      	ldrb	r3, [r4, #13]
    52a8:	2a00      	cmp	r2, #0
    52aa:	da06      	bge.n	52ba <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    52ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    52b0:	4621      	mov	r1, r4
    52b2:	4817      	ldr	r0, [pc, #92]	; (5310 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    52b4:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    52b6:	f7ff fe9b 	bl	4ff0 <z_priq_dumb_remove>
		update_cache(thread == _current);
    52ba:	4d16      	ldr	r5, [pc, #88]	; (5314 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    52bc:	7b63      	ldrb	r3, [r4, #13]
    52be:	68a8      	ldr	r0, [r5, #8]
    52c0:	f043 0310 	orr.w	r3, r3, #16
    52c4:	7363      	strb	r3, [r4, #13]
    52c6:	1b03      	subs	r3, r0, r4
    52c8:	4258      	negs	r0, r3
    52ca:	4158      	adcs	r0, r3
    52cc:	f7ff fecc 	bl	5068 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52d0:	480c      	ldr	r0, [pc, #48]	; (5304 <z_impl_k_thread_suspend+0x9c>)
    52d2:	f7ff fb5f 	bl	4994 <z_spin_unlock_valid>
    52d6:	b940      	cbnz	r0, 52ea <z_impl_k_thread_suspend+0x82>
    52d8:	490b      	ldr	r1, [pc, #44]	; (5308 <z_impl_k_thread_suspend+0xa0>)
    52da:	480c      	ldr	r0, [pc, #48]	; (530c <z_impl_k_thread_suspend+0xa4>)
    52dc:	22ac      	movs	r2, #172	; 0xac
    52de:	f003 fcbd 	bl	8c5c <printk>
    52e2:	21ac      	movs	r1, #172	; 0xac
    52e4:	4808      	ldr	r0, [pc, #32]	; (5308 <z_impl_k_thread_suspend+0xa0>)
    52e6:	f003 fd85 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    52ea:	f386 8811 	msr	BASEPRI, r6
    52ee:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    52f2:	68ab      	ldr	r3, [r5, #8]
    52f4:	42a3      	cmp	r3, r4
    52f6:	d103      	bne.n	5300 <z_impl_k_thread_suspend+0x98>
}
    52f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    52fc:	f004 b89c 	b.w	9438 <z_reschedule_unlocked>
}
    5300:	bd70      	pop	{r4, r5, r6, pc}
    5302:	bf00      	nop
    5304:	20000cc4 	.word	0x20000cc4
    5308:	00009bcc 	.word	0x00009bcc
    530c:	00009b92 	.word	0x00009b92
    5310:	20000cb0 	.word	0x20000cb0
    5314:	20000c88 	.word	0x20000c88

00005318 <k_sched_unlock>:
{
    5318:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    531a:	f04f 0320 	mov.w	r3, #32
    531e:	f3ef 8511 	mrs	r5, BASEPRI
    5322:	f383 8811 	msr	BASEPRI, r3
    5326:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    532a:	4824      	ldr	r0, [pc, #144]	; (53bc <k_sched_unlock+0xa4>)
    532c:	f7ff fb24 	bl	4978 <z_spin_lock_valid>
    5330:	b940      	cbnz	r0, 5344 <k_sched_unlock+0x2c>
    5332:	4923      	ldr	r1, [pc, #140]	; (53c0 <k_sched_unlock+0xa8>)
    5334:	4823      	ldr	r0, [pc, #140]	; (53c4 <k_sched_unlock+0xac>)
    5336:	2281      	movs	r2, #129	; 0x81
    5338:	f003 fc90 	bl	8c5c <printk>
    533c:	2181      	movs	r1, #129	; 0x81
    533e:	4820      	ldr	r0, [pc, #128]	; (53c0 <k_sched_unlock+0xa8>)
    5340:	f003 fd58 	bl	8df4 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    5344:	4c20      	ldr	r4, [pc, #128]	; (53c8 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    5346:	481d      	ldr	r0, [pc, #116]	; (53bc <k_sched_unlock+0xa4>)
    5348:	f7ff fb32 	bl	49b0 <z_spin_lock_set_owner>
    534c:	68a2      	ldr	r2, [r4, #8]
    534e:	7bd2      	ldrb	r2, [r2, #15]
    5350:	b952      	cbnz	r2, 5368 <k_sched_unlock+0x50>
    5352:	491e      	ldr	r1, [pc, #120]	; (53cc <k_sched_unlock+0xb4>)
    5354:	481b      	ldr	r0, [pc, #108]	; (53c4 <k_sched_unlock+0xac>)
    5356:	f240 3252 	movw	r2, #850	; 0x352
    535a:	f003 fc7f 	bl	8c5c <printk>
    535e:	f240 3152 	movw	r1, #850	; 0x352
    5362:	481a      	ldr	r0, [pc, #104]	; (53cc <k_sched_unlock+0xb4>)
    5364:	f003 fd46 	bl	8df4 <assert_post_action>
    5368:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    536c:	b153      	cbz	r3, 5384 <k_sched_unlock+0x6c>
    536e:	4917      	ldr	r1, [pc, #92]	; (53cc <k_sched_unlock+0xb4>)
    5370:	4814      	ldr	r0, [pc, #80]	; (53c4 <k_sched_unlock+0xac>)
    5372:	f240 3253 	movw	r2, #851	; 0x353
    5376:	f003 fc71 	bl	8c5c <printk>
    537a:	f240 3153 	movw	r1, #851	; 0x353
    537e:	4813      	ldr	r0, [pc, #76]	; (53cc <k_sched_unlock+0xb4>)
    5380:	f003 fd38 	bl	8df4 <assert_post_action>
		++_current->base.sched_locked;
    5384:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    5386:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5388:	7bd3      	ldrb	r3, [r2, #15]
    538a:	3301      	adds	r3, #1
    538c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    538e:	f7ff fe6b 	bl	5068 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5392:	480a      	ldr	r0, [pc, #40]	; (53bc <k_sched_unlock+0xa4>)
    5394:	f7ff fafe 	bl	4994 <z_spin_unlock_valid>
    5398:	b940      	cbnz	r0, 53ac <k_sched_unlock+0x94>
    539a:	4909      	ldr	r1, [pc, #36]	; (53c0 <k_sched_unlock+0xa8>)
    539c:	4809      	ldr	r0, [pc, #36]	; (53c4 <k_sched_unlock+0xac>)
    539e:	22ac      	movs	r2, #172	; 0xac
    53a0:	f003 fc5c 	bl	8c5c <printk>
    53a4:	21ac      	movs	r1, #172	; 0xac
    53a6:	4806      	ldr	r0, [pc, #24]	; (53c0 <k_sched_unlock+0xa8>)
    53a8:	f003 fd24 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    53ac:	f385 8811 	msr	BASEPRI, r5
    53b0:	f3bf 8f6f 	isb	sy
}
    53b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    53b8:	f004 b83e 	b.w	9438 <z_reschedule_unlocked>
    53bc:	20000cc4 	.word	0x20000cc4
    53c0:	00009bcc 	.word	0x00009bcc
    53c4:	00009b92 	.word	0x00009b92
    53c8:	20000c88 	.word	0x20000c88
    53cc:	0000accc 	.word	0x0000accc

000053d0 <move_thread_to_end_of_prio_q>:
{
    53d0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    53d2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    53d6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    53d8:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    53da:	7b43      	ldrb	r3, [r0, #13]
    53dc:	da06      	bge.n	53ec <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    53de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    53e2:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    53e4:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    53e6:	4820      	ldr	r0, [pc, #128]	; (5468 <move_thread_to_end_of_prio_q+0x98>)
    53e8:	f7ff fe02 	bl	4ff0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    53ec:	7b63      	ldrb	r3, [r4, #13]
    53ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    53f2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    53f4:	4b1d      	ldr	r3, [pc, #116]	; (546c <move_thread_to_end_of_prio_q+0x9c>)
    53f6:	429c      	cmp	r4, r3
    53f8:	d10a      	bne.n	5410 <move_thread_to_end_of_prio_q+0x40>
    53fa:	491d      	ldr	r1, [pc, #116]	; (5470 <move_thread_to_end_of_prio_q+0xa0>)
    53fc:	481d      	ldr	r0, [pc, #116]	; (5474 <move_thread_to_end_of_prio_q+0xa4>)
    53fe:	f240 32b5 	movw	r2, #949	; 0x3b5
    5402:	f003 fc2b 	bl	8c5c <printk>
    5406:	f240 31b5 	movw	r1, #949	; 0x3b5
    540a:	4819      	ldr	r0, [pc, #100]	; (5470 <move_thread_to_end_of_prio_q+0xa0>)
    540c:	f003 fcf2 	bl	8df4 <assert_post_action>
	return list->head == list;
    5410:	4a19      	ldr	r2, [pc, #100]	; (5478 <move_thread_to_end_of_prio_q+0xa8>)
    5412:	4611      	mov	r1, r2
    5414:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5418:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    541a:	428b      	cmp	r3, r1
    541c:	bf08      	it	eq
    541e:	2300      	moveq	r3, #0
    5420:	2b00      	cmp	r3, #0
    5422:	bf38      	it	cc
    5424:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5426:	b1cb      	cbz	r3, 545c <move_thread_to_end_of_prio_q+0x8c>
	int32_t b1 = thread_1->base.prio;
    5428:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    542c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5430:	4286      	cmp	r6, r0
    5432:	d00f      	beq.n	5454 <move_thread_to_end_of_prio_q+0x84>
		return b2 - b1;
    5434:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5436:	2800      	cmp	r0, #0
    5438:	dd0c      	ble.n	5454 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    543a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    543c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5440:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5442:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    5444:	6890      	ldr	r0, [r2, #8]
    5446:	1b03      	subs	r3, r0, r4
    5448:	4258      	negs	r0, r3
    544a:	4158      	adcs	r0, r3
}
    544c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5450:	f7ff be0a 	b.w	5068 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5454:	42ab      	cmp	r3, r5
    5456:	d001      	beq.n	545c <move_thread_to_end_of_prio_q+0x8c>
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	e7e4      	b.n	5426 <move_thread_to_end_of_prio_q+0x56>
	node->prev = tail;
    545c:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    5460:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5462:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    5464:	e7ee      	b.n	5444 <move_thread_to_end_of_prio_q+0x74>
    5466:	bf00      	nop
    5468:	20000cb0 	.word	0x20000cb0
    546c:	200001e0 	.word	0x200001e0
    5470:	0000accc 	.word	0x0000accc
    5474:	00009b92 	.word	0x00009b92
    5478:	20000c88 	.word	0x20000c88

0000547c <z_time_slice>:
{
    547c:	b570      	push	{r4, r5, r6, lr}
    547e:	4604      	mov	r4, r0
	__asm__ volatile(
    5480:	f04f 0320 	mov.w	r3, #32
    5484:	f3ef 8511 	mrs	r5, BASEPRI
    5488:	f383 8811 	msr	BASEPRI, r3
    548c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5490:	4825      	ldr	r0, [pc, #148]	; (5528 <z_time_slice+0xac>)
    5492:	f7ff fa71 	bl	4978 <z_spin_lock_valid>
    5496:	b940      	cbnz	r0, 54aa <z_time_slice+0x2e>
    5498:	4924      	ldr	r1, [pc, #144]	; (552c <z_time_slice+0xb0>)
    549a:	4825      	ldr	r0, [pc, #148]	; (5530 <z_time_slice+0xb4>)
    549c:	2281      	movs	r2, #129	; 0x81
    549e:	f003 fbdd 	bl	8c5c <printk>
    54a2:	2181      	movs	r1, #129	; 0x81
    54a4:	4821      	ldr	r0, [pc, #132]	; (552c <z_time_slice+0xb0>)
    54a6:	f003 fca5 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    54aa:	481f      	ldr	r0, [pc, #124]	; (5528 <z_time_slice+0xac>)
    54ac:	f7ff fa80 	bl	49b0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    54b0:	4b20      	ldr	r3, [pc, #128]	; (5534 <z_time_slice+0xb8>)
    54b2:	4a21      	ldr	r2, [pc, #132]	; (5538 <z_time_slice+0xbc>)
    54b4:	6898      	ldr	r0, [r3, #8]
    54b6:	6811      	ldr	r1, [r2, #0]
    54b8:	4288      	cmp	r0, r1
    54ba:	4619      	mov	r1, r3
    54bc:	d113      	bne.n	54e6 <z_time_slice+0x6a>
			z_reset_time_slice();
    54be:	f7ff fca3 	bl	4e08 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54c2:	4819      	ldr	r0, [pc, #100]	; (5528 <z_time_slice+0xac>)
    54c4:	f7ff fa66 	bl	4994 <z_spin_unlock_valid>
    54c8:	b940      	cbnz	r0, 54dc <z_time_slice+0x60>
    54ca:	4918      	ldr	r1, [pc, #96]	; (552c <z_time_slice+0xb0>)
    54cc:	4818      	ldr	r0, [pc, #96]	; (5530 <z_time_slice+0xb4>)
    54ce:	22ac      	movs	r2, #172	; 0xac
    54d0:	f003 fbc4 	bl	8c5c <printk>
    54d4:	21ac      	movs	r1, #172	; 0xac
    54d6:	4815      	ldr	r0, [pc, #84]	; (552c <z_time_slice+0xb0>)
    54d8:	f003 fc8c 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    54dc:	f385 8811 	msr	BASEPRI, r5
    54e0:	f3bf 8f6f 	isb	sy
}
    54e4:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    54e6:	2600      	movs	r6, #0
    54e8:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    54ea:	4a14      	ldr	r2, [pc, #80]	; (553c <z_time_slice+0xc0>)
    54ec:	6812      	ldr	r2, [r2, #0]
    54ee:	b1ba      	cbz	r2, 5520 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    54f0:	89c2      	ldrh	r2, [r0, #14]
    54f2:	2a7f      	cmp	r2, #127	; 0x7f
    54f4:	d814      	bhi.n	5520 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
    54f6:	7b42      	ldrb	r2, [r0, #13]
    54f8:	06d2      	lsls	r2, r2, #27
    54fa:	d111      	bne.n	5520 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    54fc:	4a10      	ldr	r2, [pc, #64]	; (5540 <z_time_slice+0xc4>)
    54fe:	f990 600e 	ldrsb.w	r6, [r0, #14]
    5502:	6812      	ldr	r2, [r2, #0]
    5504:	4296      	cmp	r6, r2
    5506:	db0b      	blt.n	5520 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    5508:	4a0e      	ldr	r2, [pc, #56]	; (5544 <z_time_slice+0xc8>)
    550a:	4290      	cmp	r0, r2
    550c:	d008      	beq.n	5520 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
    550e:	691a      	ldr	r2, [r3, #16]
    5510:	42a2      	cmp	r2, r4
    5512:	dc02      	bgt.n	551a <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
    5514:	f7ff ff5c 	bl	53d0 <move_thread_to_end_of_prio_q>
    5518:	e7d1      	b.n	54be <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
    551a:	1b12      	subs	r2, r2, r4
    551c:	611a      	str	r2, [r3, #16]
    551e:	e7d0      	b.n	54c2 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
    5520:	2300      	movs	r3, #0
    5522:	610b      	str	r3, [r1, #16]
    5524:	e7cd      	b.n	54c2 <z_time_slice+0x46>
    5526:	bf00      	nop
    5528:	20000cc4 	.word	0x20000cc4
    552c:	00009bcc 	.word	0x00009bcc
    5530:	00009b92 	.word	0x00009b92
    5534:	20000c88 	.word	0x20000c88
    5538:	20000cc0 	.word	0x20000cc0
    553c:	20000ccc 	.word	0x20000ccc
    5540:	20000cc8 	.word	0x20000cc8
    5544:	200001e0 	.word	0x200001e0

00005548 <ready_thread>:
{
    5548:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    554a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    554e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5550:	2a00      	cmp	r2, #0
    5552:	7b43      	ldrb	r3, [r0, #13]
    5554:	db3f      	blt.n	55d6 <ready_thread+0x8e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5556:	06da      	lsls	r2, r3, #27
    5558:	d13d      	bne.n	55d6 <ready_thread+0x8e>
	return !sys_dnode_is_linked(&to->node);
    555a:	6985      	ldr	r5, [r0, #24]
    555c:	2d00      	cmp	r5, #0
    555e:	d13a      	bne.n	55d6 <ready_thread+0x8e>
	thread->base.thread_state |= _THREAD_QUEUED;
    5560:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5564:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5566:	4b1c      	ldr	r3, [pc, #112]	; (55d8 <ready_thread+0x90>)
    5568:	4298      	cmp	r0, r3
    556a:	d10a      	bne.n	5582 <ready_thread+0x3a>
    556c:	491b      	ldr	r1, [pc, #108]	; (55dc <ready_thread+0x94>)
    556e:	481c      	ldr	r0, [pc, #112]	; (55e0 <ready_thread+0x98>)
    5570:	f240 32b5 	movw	r2, #949	; 0x3b5
    5574:	f003 fb72 	bl	8c5c <printk>
    5578:	f240 31b5 	movw	r1, #949	; 0x3b5
    557c:	4817      	ldr	r0, [pc, #92]	; (55dc <ready_thread+0x94>)
    557e:	f003 fc39 	bl	8df4 <assert_post_action>
	return list->head == list;
    5582:	4918      	ldr	r1, [pc, #96]	; (55e4 <ready_thread+0x9c>)
    5584:	460b      	mov	r3, r1
    5586:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    558a:	4298      	cmp	r0, r3
    558c:	bf18      	it	ne
    558e:	4605      	movne	r5, r0
    5590:	2d00      	cmp	r5, #0
    5592:	461a      	mov	r2, r3
    5594:	462b      	mov	r3, r5
    5596:	bf38      	it	cc
    5598:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    559a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    559c:	b1b3      	cbz	r3, 55cc <ready_thread+0x84>
	int32_t b1 = thread_1->base.prio;
    559e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    55a2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    55a6:	4286      	cmp	r6, r0
    55a8:	d00c      	beq.n	55c4 <ready_thread+0x7c>
		return b2 - b1;
    55aa:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    55ac:	2800      	cmp	r0, #0
    55ae:	dd09      	ble.n	55c4 <ready_thread+0x7c>
	sys_dnode_t *const prev = successor->prev;
    55b0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    55b2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    55b6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    55b8:	605c      	str	r4, [r3, #4]
		update_cache(0);
    55ba:	2000      	movs	r0, #0
}
    55bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    55c0:	f7ff bd52 	b.w	5068 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    55c4:	42ab      	cmp	r3, r5
    55c6:	d001      	beq.n	55cc <ready_thread+0x84>
    55c8:	681b      	ldr	r3, [r3, #0]
    55ca:	e7e7      	b.n	559c <ready_thread+0x54>
	node->prev = tail;
    55cc:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    55d0:	602c      	str	r4, [r5, #0]
	list->tail = node;
    55d2:	62cc      	str	r4, [r1, #44]	; 0x2c
}
    55d4:	e7f1      	b.n	55ba <ready_thread+0x72>
}
    55d6:	bd70      	pop	{r4, r5, r6, pc}
    55d8:	200001e0 	.word	0x200001e0
    55dc:	0000accc 	.word	0x0000accc
    55e0:	00009b92 	.word	0x00009b92
    55e4:	20000c88 	.word	0x20000c88

000055e8 <z_ready_thread>:
{
    55e8:	b538      	push	{r3, r4, r5, lr}
    55ea:	4604      	mov	r4, r0
	__asm__ volatile(
    55ec:	f04f 0320 	mov.w	r3, #32
    55f0:	f3ef 8511 	mrs	r5, BASEPRI
    55f4:	f383 8811 	msr	BASEPRI, r3
    55f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55fc:	4812      	ldr	r0, [pc, #72]	; (5648 <z_ready_thread+0x60>)
    55fe:	f7ff f9bb 	bl	4978 <z_spin_lock_valid>
    5602:	b940      	cbnz	r0, 5616 <z_ready_thread+0x2e>
    5604:	4911      	ldr	r1, [pc, #68]	; (564c <z_ready_thread+0x64>)
    5606:	4812      	ldr	r0, [pc, #72]	; (5650 <z_ready_thread+0x68>)
    5608:	2281      	movs	r2, #129	; 0x81
    560a:	f003 fb27 	bl	8c5c <printk>
    560e:	2181      	movs	r1, #129	; 0x81
    5610:	480e      	ldr	r0, [pc, #56]	; (564c <z_ready_thread+0x64>)
    5612:	f003 fbef 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5616:	480c      	ldr	r0, [pc, #48]	; (5648 <z_ready_thread+0x60>)
    5618:	f7ff f9ca 	bl	49b0 <z_spin_lock_set_owner>
			ready_thread(thread);
    561c:	4620      	mov	r0, r4
    561e:	f7ff ff93 	bl	5548 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5622:	4809      	ldr	r0, [pc, #36]	; (5648 <z_ready_thread+0x60>)
    5624:	f7ff f9b6 	bl	4994 <z_spin_unlock_valid>
    5628:	b940      	cbnz	r0, 563c <z_ready_thread+0x54>
    562a:	4908      	ldr	r1, [pc, #32]	; (564c <z_ready_thread+0x64>)
    562c:	4808      	ldr	r0, [pc, #32]	; (5650 <z_ready_thread+0x68>)
    562e:	22ac      	movs	r2, #172	; 0xac
    5630:	f003 fb14 	bl	8c5c <printk>
    5634:	21ac      	movs	r1, #172	; 0xac
    5636:	4805      	ldr	r0, [pc, #20]	; (564c <z_ready_thread+0x64>)
    5638:	f003 fbdc 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    563c:	f385 8811 	msr	BASEPRI, r5
    5640:	f3bf 8f6f 	isb	sy
}
    5644:	bd38      	pop	{r3, r4, r5, pc}
    5646:	bf00      	nop
    5648:	20000cc4 	.word	0x20000cc4
    564c:	00009bcc 	.word	0x00009bcc
    5650:	00009b92 	.word	0x00009b92

00005654 <z_sched_start>:
{
    5654:	b538      	push	{r3, r4, r5, lr}
    5656:	4604      	mov	r4, r0
	__asm__ volatile(
    5658:	f04f 0320 	mov.w	r3, #32
    565c:	f3ef 8511 	mrs	r5, BASEPRI
    5660:	f383 8811 	msr	BASEPRI, r3
    5664:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5668:	4818      	ldr	r0, [pc, #96]	; (56cc <z_sched_start+0x78>)
    566a:	f7ff f985 	bl	4978 <z_spin_lock_valid>
    566e:	b940      	cbnz	r0, 5682 <z_sched_start+0x2e>
    5670:	4917      	ldr	r1, [pc, #92]	; (56d0 <z_sched_start+0x7c>)
    5672:	4818      	ldr	r0, [pc, #96]	; (56d4 <z_sched_start+0x80>)
    5674:	2281      	movs	r2, #129	; 0x81
    5676:	f003 faf1 	bl	8c5c <printk>
    567a:	2181      	movs	r1, #129	; 0x81
    567c:	4814      	ldr	r0, [pc, #80]	; (56d0 <z_sched_start+0x7c>)
    567e:	f003 fbb9 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5682:	4812      	ldr	r0, [pc, #72]	; (56cc <z_sched_start+0x78>)
    5684:	f7ff f994 	bl	49b0 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    5688:	7b63      	ldrb	r3, [r4, #13]
    568a:	075a      	lsls	r2, r3, #29
    568c:	d411      	bmi.n	56b2 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    568e:	480f      	ldr	r0, [pc, #60]	; (56cc <z_sched_start+0x78>)
    5690:	f7ff f980 	bl	4994 <z_spin_unlock_valid>
    5694:	b940      	cbnz	r0, 56a8 <z_sched_start+0x54>
    5696:	490e      	ldr	r1, [pc, #56]	; (56d0 <z_sched_start+0x7c>)
    5698:	480e      	ldr	r0, [pc, #56]	; (56d4 <z_sched_start+0x80>)
    569a:	22ac      	movs	r2, #172	; 0xac
    569c:	f003 fade 	bl	8c5c <printk>
    56a0:	21ac      	movs	r1, #172	; 0xac
    56a2:	480b      	ldr	r0, [pc, #44]	; (56d0 <z_sched_start+0x7c>)
    56a4:	f003 fba6 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    56a8:	f385 8811 	msr	BASEPRI, r5
    56ac:	f3bf 8f6f 	isb	sy
}
    56b0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    56b2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    56b6:	4620      	mov	r0, r4
    56b8:	7363      	strb	r3, [r4, #13]
    56ba:	f7ff ff45 	bl	5548 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    56be:	4629      	mov	r1, r5
}
    56c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    56c4:	4801      	ldr	r0, [pc, #4]	; (56cc <z_sched_start+0x78>)
    56c6:	f7ff bc09 	b.w	4edc <z_reschedule>
    56ca:	bf00      	nop
    56cc:	20000cc4 	.word	0x20000cc4
    56d0:	00009bcc 	.word	0x00009bcc
    56d4:	00009b92 	.word	0x00009b92

000056d8 <z_thread_timeout>:
{
    56d8:	b570      	push	{r4, r5, r6, lr}
    56da:	4604      	mov	r4, r0
	__asm__ volatile(
    56dc:	f04f 0320 	mov.w	r3, #32
    56e0:	f3ef 8611 	mrs	r6, BASEPRI
    56e4:	f383 8811 	msr	BASEPRI, r3
    56e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56ec:	481b      	ldr	r0, [pc, #108]	; (575c <z_thread_timeout+0x84>)
    56ee:	f7ff f943 	bl	4978 <z_spin_lock_valid>
    56f2:	b940      	cbnz	r0, 5706 <z_thread_timeout+0x2e>
    56f4:	491a      	ldr	r1, [pc, #104]	; (5760 <z_thread_timeout+0x88>)
    56f6:	481b      	ldr	r0, [pc, #108]	; (5764 <z_thread_timeout+0x8c>)
    56f8:	2281      	movs	r2, #129	; 0x81
    56fa:	f003 faaf 	bl	8c5c <printk>
    56fe:	2181      	movs	r1, #129	; 0x81
    5700:	4817      	ldr	r0, [pc, #92]	; (5760 <z_thread_timeout+0x88>)
    5702:	f003 fb77 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5706:	4815      	ldr	r0, [pc, #84]	; (575c <z_thread_timeout+0x84>)
    5708:	f7ff f952 	bl	49b0 <z_spin_lock_set_owner>
		if (!killed) {
    570c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5710:	f013 0f28 	tst.w	r3, #40	; 0x28
    5714:	d110      	bne.n	5738 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    5716:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    571a:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    571e:	b113      	cbz	r3, 5726 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    5720:	4628      	mov	r0, r5
    5722:	f7ff fc83 	bl	502c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5726:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    572a:	4628      	mov	r0, r5
    572c:	f023 0314 	bic.w	r3, r3, #20
    5730:	f804 3c0b 	strb.w	r3, [r4, #-11]
    5734:	f7ff ff08 	bl	5548 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5738:	4808      	ldr	r0, [pc, #32]	; (575c <z_thread_timeout+0x84>)
    573a:	f7ff f92b 	bl	4994 <z_spin_unlock_valid>
    573e:	b940      	cbnz	r0, 5752 <z_thread_timeout+0x7a>
    5740:	4907      	ldr	r1, [pc, #28]	; (5760 <z_thread_timeout+0x88>)
    5742:	4808      	ldr	r0, [pc, #32]	; (5764 <z_thread_timeout+0x8c>)
    5744:	22ac      	movs	r2, #172	; 0xac
    5746:	f003 fa89 	bl	8c5c <printk>
    574a:	21ac      	movs	r1, #172	; 0xac
    574c:	4804      	ldr	r0, [pc, #16]	; (5760 <z_thread_timeout+0x88>)
    574e:	f003 fb51 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    5752:	f386 8811 	msr	BASEPRI, r6
    5756:	f3bf 8f6f 	isb	sy
}
    575a:	bd70      	pop	{r4, r5, r6, pc}
    575c:	20000cc4 	.word	0x20000cc4
    5760:	00009bcc 	.word	0x00009bcc
    5764:	00009b92 	.word	0x00009b92

00005768 <z_set_prio>:
{
    5768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    576a:	4604      	mov	r4, r0
    576c:	460e      	mov	r6, r1
	__asm__ volatile(
    576e:	f04f 0320 	mov.w	r3, #32
    5772:	f3ef 8711 	mrs	r7, BASEPRI
    5776:	f383 8811 	msr	BASEPRI, r3
    577a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    577e:	4838      	ldr	r0, [pc, #224]	; (5860 <z_set_prio+0xf8>)
    5780:	f7ff f8fa 	bl	4978 <z_spin_lock_valid>
    5784:	b940      	cbnz	r0, 5798 <z_set_prio+0x30>
    5786:	4937      	ldr	r1, [pc, #220]	; (5864 <z_set_prio+0xfc>)
    5788:	4837      	ldr	r0, [pc, #220]	; (5868 <z_set_prio+0x100>)
    578a:	2281      	movs	r2, #129	; 0x81
    578c:	f003 fa66 	bl	8c5c <printk>
    5790:	2181      	movs	r1, #129	; 0x81
    5792:	4834      	ldr	r0, [pc, #208]	; (5864 <z_set_prio+0xfc>)
    5794:	f003 fb2e 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5798:	4831      	ldr	r0, [pc, #196]	; (5860 <z_set_prio+0xf8>)
    579a:	f7ff f909 	bl	49b0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    579e:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    57a0:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    57a2:	06da      	lsls	r2, r3, #27
    57a4:	d158      	bne.n	5858 <z_set_prio+0xf0>
    57a6:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    57a8:	2d00      	cmp	r5, #0
    57aa:	d155      	bne.n	5858 <z_set_prio+0xf0>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    57ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    57b0:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    57b2:	4621      	mov	r1, r4
    57b4:	482d      	ldr	r0, [pc, #180]	; (586c <z_set_prio+0x104>)
    57b6:	f7ff fc1b 	bl	4ff0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    57ba:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    57bc:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    57be:	f063 037f 	orn	r3, r3, #127	; 0x7f
    57c2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    57c4:	4b2a      	ldr	r3, [pc, #168]	; (5870 <z_set_prio+0x108>)
    57c6:	429c      	cmp	r4, r3
    57c8:	d10a      	bne.n	57e0 <z_set_prio+0x78>
    57ca:	492a      	ldr	r1, [pc, #168]	; (5874 <z_set_prio+0x10c>)
    57cc:	4826      	ldr	r0, [pc, #152]	; (5868 <z_set_prio+0x100>)
    57ce:	f240 32b5 	movw	r2, #949	; 0x3b5
    57d2:	f003 fa43 	bl	8c5c <printk>
    57d6:	f240 31b5 	movw	r1, #949	; 0x3b5
    57da:	4826      	ldr	r0, [pc, #152]	; (5874 <z_set_prio+0x10c>)
    57dc:	f003 fb0a 	bl	8df4 <assert_post_action>
	return list->head == list;
    57e0:	4925      	ldr	r1, [pc, #148]	; (5878 <z_set_prio+0x110>)
    57e2:	460b      	mov	r3, r1
    57e4:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57e8:	4298      	cmp	r0, r3
    57ea:	bf18      	it	ne
    57ec:	4605      	movne	r5, r0
    57ee:	2d00      	cmp	r5, #0
    57f0:	461a      	mov	r2, r3
    57f2:	462b      	mov	r3, r5
    57f4:	bf38      	it	cc
    57f6:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    57f8:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    57fa:	b343      	cbz	r3, 584e <z_set_prio+0xe6>
	int32_t b1 = thread_1->base.prio;
    57fc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5800:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5804:	4286      	cmp	r6, r0
    5806:	d01e      	beq.n	5846 <z_set_prio+0xde>
		return b2 - b1;
    5808:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    580a:	2800      	cmp	r0, #0
    580c:	dd1b      	ble.n	5846 <z_set_prio+0xde>
	sys_dnode_t *const prev = successor->prev;
    580e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5810:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5814:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5816:	605c      	str	r4, [r3, #4]
			update_cache(1);
    5818:	2001      	movs	r0, #1
    581a:	f7ff fc25 	bl	5068 <update_cache>
    581e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5820:	480f      	ldr	r0, [pc, #60]	; (5860 <z_set_prio+0xf8>)
    5822:	f7ff f8b7 	bl	4994 <z_spin_unlock_valid>
    5826:	b940      	cbnz	r0, 583a <z_set_prio+0xd2>
    5828:	490e      	ldr	r1, [pc, #56]	; (5864 <z_set_prio+0xfc>)
    582a:	480f      	ldr	r0, [pc, #60]	; (5868 <z_set_prio+0x100>)
    582c:	22ac      	movs	r2, #172	; 0xac
    582e:	f003 fa15 	bl	8c5c <printk>
    5832:	21ac      	movs	r1, #172	; 0xac
    5834:	480b      	ldr	r0, [pc, #44]	; (5864 <z_set_prio+0xfc>)
    5836:	f003 fadd 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    583a:	f387 8811 	msr	BASEPRI, r7
    583e:	f3bf 8f6f 	isb	sy
}
    5842:	4620      	mov	r0, r4
    5844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5846:	42ab      	cmp	r3, r5
    5848:	d001      	beq.n	584e <z_set_prio+0xe6>
    584a:	681b      	ldr	r3, [r3, #0]
    584c:	e7d5      	b.n	57fa <z_set_prio+0x92>
	node->prev = tail;
    584e:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5852:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5854:	62cc      	str	r4, [r1, #44]	; 0x2c
}
    5856:	e7df      	b.n	5818 <z_set_prio+0xb0>
			thread->base.prio = prio;
    5858:	73a6      	strb	r6, [r4, #14]
    585a:	2400      	movs	r4, #0
    585c:	e7e0      	b.n	5820 <z_set_prio+0xb8>
    585e:	bf00      	nop
    5860:	20000cc4 	.word	0x20000cc4
    5864:	00009bcc 	.word	0x00009bcc
    5868:	00009b92 	.word	0x00009b92
    586c:	20000cb0 	.word	0x20000cb0
    5870:	200001e0 	.word	0x200001e0
    5874:	0000accc 	.word	0x0000accc
    5878:	20000c88 	.word	0x20000c88

0000587c <z_unpend_first_thread>:
{
    587c:	b538      	push	{r3, r4, r5, lr}
    587e:	4604      	mov	r4, r0
	__asm__ volatile(
    5880:	f04f 0320 	mov.w	r3, #32
    5884:	f3ef 8511 	mrs	r5, BASEPRI
    5888:	f383 8811 	msr	BASEPRI, r3
    588c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5890:	4816      	ldr	r0, [pc, #88]	; (58ec <z_unpend_first_thread+0x70>)
    5892:	f7ff f871 	bl	4978 <z_spin_lock_valid>
    5896:	b940      	cbnz	r0, 58aa <z_unpend_first_thread+0x2e>
    5898:	4915      	ldr	r1, [pc, #84]	; (58f0 <z_unpend_first_thread+0x74>)
    589a:	4816      	ldr	r0, [pc, #88]	; (58f4 <z_unpend_first_thread+0x78>)
    589c:	2281      	movs	r2, #129	; 0x81
    589e:	f003 f9dd 	bl	8c5c <printk>
    58a2:	2181      	movs	r1, #129	; 0x81
    58a4:	4812      	ldr	r0, [pc, #72]	; (58f0 <z_unpend_first_thread+0x74>)
    58a6:	f003 faa5 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    58aa:	4810      	ldr	r0, [pc, #64]	; (58ec <z_unpend_first_thread+0x70>)
    58ac:	f7ff f880 	bl	49b0 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    58b0:	4620      	mov	r0, r4
    58b2:	f003 fdcb 	bl	944c <z_priq_dumb_best>
		if (thread != NULL) {
    58b6:	4604      	mov	r4, r0
    58b8:	b128      	cbz	r0, 58c6 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    58ba:	f7ff fbb7 	bl	502c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    58be:	f104 0018 	add.w	r0, r4, #24
    58c2:	f000 fb27 	bl	5f14 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58c6:	4809      	ldr	r0, [pc, #36]	; (58ec <z_unpend_first_thread+0x70>)
    58c8:	f7ff f864 	bl	4994 <z_spin_unlock_valid>
    58cc:	b940      	cbnz	r0, 58e0 <z_unpend_first_thread+0x64>
    58ce:	4908      	ldr	r1, [pc, #32]	; (58f0 <z_unpend_first_thread+0x74>)
    58d0:	4808      	ldr	r0, [pc, #32]	; (58f4 <z_unpend_first_thread+0x78>)
    58d2:	22ac      	movs	r2, #172	; 0xac
    58d4:	f003 f9c2 	bl	8c5c <printk>
    58d8:	21ac      	movs	r1, #172	; 0xac
    58da:	4805      	ldr	r0, [pc, #20]	; (58f0 <z_unpend_first_thread+0x74>)
    58dc:	f003 fa8a 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    58e0:	f385 8811 	msr	BASEPRI, r5
    58e4:	f3bf 8f6f 	isb	sy
}
    58e8:	4620      	mov	r0, r4
    58ea:	bd38      	pop	{r3, r4, r5, pc}
    58ec:	20000cc4 	.word	0x20000cc4
    58f0:	00009bcc 	.word	0x00009bcc
    58f4:	00009b92 	.word	0x00009b92

000058f8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    58f8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    58fa:	4b04      	ldr	r3, [pc, #16]	; (590c <z_sched_init+0x14>)
    58fc:	4608      	mov	r0, r1
    58fe:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    5902:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    5906:	f7ff ba95 	b.w	4e34 <k_sched_time_slice_set>
    590a:	bf00      	nop
    590c:	20000c88 	.word	0x20000c88

00005910 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5912:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5916:	b153      	cbz	r3, 592e <z_impl_k_yield+0x1e>
    5918:	4940      	ldr	r1, [pc, #256]	; (5a1c <z_impl_k_yield+0x10c>)
    591a:	4841      	ldr	r0, [pc, #260]	; (5a20 <z_impl_k_yield+0x110>)
    591c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    5920:	f003 f99c 	bl	8c5c <printk>
    5924:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
    5928:	483c      	ldr	r0, [pc, #240]	; (5a1c <z_impl_k_yield+0x10c>)
    592a:	f003 fa63 	bl	8df4 <assert_post_action>

	SYS_PORT_TRACING_FUNC(k_thread, yield);

	if (!z_is_idle_thread_object(_current)) {
    592e:	4d3d      	ldr	r5, [pc, #244]	; (5a24 <z_impl_k_yield+0x114>)
    5930:	4e3d      	ldr	r6, [pc, #244]	; (5a28 <z_impl_k_yield+0x118>)
    5932:	68ab      	ldr	r3, [r5, #8]
    5934:	42b3      	cmp	r3, r6
    5936:	d067      	beq.n	5a08 <z_impl_k_yield+0xf8>
	__asm__ volatile(
    5938:	f04f 0320 	mov.w	r3, #32
    593c:	f3ef 8711 	mrs	r7, BASEPRI
    5940:	f383 8811 	msr	BASEPRI, r3
    5944:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5948:	4838      	ldr	r0, [pc, #224]	; (5a2c <z_impl_k_yield+0x11c>)
    594a:	f7ff f815 	bl	4978 <z_spin_lock_valid>
    594e:	b940      	cbnz	r0, 5962 <z_impl_k_yield+0x52>
    5950:	4937      	ldr	r1, [pc, #220]	; (5a30 <z_impl_k_yield+0x120>)
    5952:	4833      	ldr	r0, [pc, #204]	; (5a20 <z_impl_k_yield+0x110>)
    5954:	2281      	movs	r2, #129	; 0x81
    5956:	f003 f981 	bl	8c5c <printk>
    595a:	2181      	movs	r1, #129	; 0x81
    595c:	4834      	ldr	r0, [pc, #208]	; (5a30 <z_impl_k_yield+0x120>)
    595e:	f003 fa49 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5962:	4832      	ldr	r0, [pc, #200]	; (5a2c <z_impl_k_yield+0x11c>)
    5964:	f7ff f824 	bl	49b0 <z_spin_lock_set_owner>
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
    5968:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
    596a:	4832      	ldr	r0, [pc, #200]	; (5a34 <z_impl_k_yield+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    596c:	7b4b      	ldrb	r3, [r1, #13]
    596e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5972:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    5974:	f7ff fb3c 	bl	4ff0 <z_priq_dumb_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
    5978:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    597a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    597c:	42b4      	cmp	r4, r6
	thread->base.thread_state |= _THREAD_QUEUED;
    597e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5982:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5984:	d10a      	bne.n	599c <z_impl_k_yield+0x8c>
    5986:	4925      	ldr	r1, [pc, #148]	; (5a1c <z_impl_k_yield+0x10c>)
    5988:	4825      	ldr	r0, [pc, #148]	; (5a20 <z_impl_k_yield+0x110>)
    598a:	f240 32b5 	movw	r2, #949	; 0x3b5
    598e:	f003 f965 	bl	8c5c <printk>
    5992:	f240 31b5 	movw	r1, #949	; 0x3b5
    5996:	4821      	ldr	r0, [pc, #132]	; (5a1c <z_impl_k_yield+0x10c>)
    5998:	f003 fa2c 	bl	8df4 <assert_post_action>
	return list->head == list;
    599c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    599e:	4825      	ldr	r0, [pc, #148]	; (5a34 <z_impl_k_yield+0x124>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    59a0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    59a2:	4283      	cmp	r3, r0
    59a4:	bf08      	it	eq
    59a6:	2300      	moveq	r3, #0
    59a8:	2b00      	cmp	r3, #0
    59aa:	bf38      	it	cc
    59ac:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    59ae:	b333      	cbz	r3, 59fe <z_impl_k_yield+0xee>
	int32_t b1 = thread_1->base.prio;
    59b0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    59b4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    59b8:	4296      	cmp	r6, r2
    59ba:	d01c      	beq.n	59f6 <z_impl_k_yield+0xe6>
		return b2 - b1;
    59bc:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    59be:	2a00      	cmp	r2, #0
    59c0:	dd19      	ble.n	59f6 <z_impl_k_yield+0xe6>
	sys_dnode_t *const prev = successor->prev;
    59c2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    59c4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    59c8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    59ca:	605c      	str	r4, [r3, #4]
		update_cache(1);
    59cc:	2001      	movs	r0, #1
    59ce:	f7ff fb4b 	bl	5068 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59d2:	4816      	ldr	r0, [pc, #88]	; (5a2c <z_impl_k_yield+0x11c>)
    59d4:	f7fe ffde 	bl	4994 <z_spin_unlock_valid>
    59d8:	b940      	cbnz	r0, 59ec <z_impl_k_yield+0xdc>
    59da:	4915      	ldr	r1, [pc, #84]	; (5a30 <z_impl_k_yield+0x120>)
    59dc:	4810      	ldr	r0, [pc, #64]	; (5a20 <z_impl_k_yield+0x110>)
    59de:	22c3      	movs	r2, #195	; 0xc3
    59e0:	f003 f93c 	bl	8c5c <printk>
    59e4:	21c3      	movs	r1, #195	; 0xc3
    59e6:	4812      	ldr	r0, [pc, #72]	; (5a30 <z_impl_k_yield+0x120>)
    59e8:	f003 fa04 	bl	8df4 <assert_post_action>
    59ec:	4638      	mov	r0, r7
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
    59ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    59f2:	f7fc bbbb 	b.w	216c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    59f6:	428b      	cmp	r3, r1
    59f8:	d001      	beq.n	59fe <z_impl_k_yield+0xee>
    59fa:	681b      	ldr	r3, [r3, #0]
    59fc:	e7d7      	b.n	59ae <z_impl_k_yield+0x9e>
	node->prev = tail;
    59fe:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    5a02:	600c      	str	r4, [r1, #0]
	list->tail = node;
    5a04:	62ec      	str	r4, [r5, #44]	; 0x2c
}
    5a06:	e7e1      	b.n	59cc <z_impl_k_yield+0xbc>
    5a08:	f04f 0320 	mov.w	r3, #32
    5a0c:	f3ef 8011 	mrs	r0, BASEPRI
    5a10:	f383 8811 	msr	BASEPRI, r3
    5a14:	f3bf 8f6f 	isb	sy
    5a18:	e7e9      	b.n	59ee <z_impl_k_yield+0xde>
    5a1a:	bf00      	nop
    5a1c:	0000accc 	.word	0x0000accc
    5a20:	00009b92 	.word	0x00009b92
    5a24:	20000c88 	.word	0x20000c88
    5a28:	200001e0 	.word	0x200001e0
    5a2c:	20000cc4 	.word	0x20000cc4
    5a30:	00009bcc 	.word	0x00009bcc
    5a34:	20000cb0 	.word	0x20000cb0

00005a38 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    5a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a3c:	4606      	mov	r6, r0
    5a3e:	460f      	mov	r7, r1
    5a40:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5a44:	b153      	cbz	r3, 5a5c <z_tick_sleep+0x24>
    5a46:	4935      	ldr	r1, [pc, #212]	; (5b1c <z_tick_sleep+0xe4>)
    5a48:	4835      	ldr	r0, [pc, #212]	; (5b20 <z_tick_sleep+0xe8>)
    5a4a:	f240 42d1 	movw	r2, #1233	; 0x4d1
    5a4e:	f003 f905 	bl	8c5c <printk>
    5a52:	f240 41d1 	movw	r1, #1233	; 0x4d1
    5a56:	4831      	ldr	r0, [pc, #196]	; (5b1c <z_tick_sleep+0xe4>)
    5a58:	f003 f9cc 	bl	8df4 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5a5c:	ea56 0307 	orrs.w	r3, r6, r7
    5a60:	d104      	bne.n	5a6c <z_tick_sleep+0x34>
	z_impl_k_yield();
    5a62:	f7ff ff55 	bl	5910 <z_impl_k_yield>
		k_yield();
		return 0;
    5a66:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    5a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5a6c:	f003 fcf8 	bl	9460 <sys_clock_tick_get_32>
    5a70:	1984      	adds	r4, r0, r6
    5a72:	f04f 0320 	mov.w	r3, #32
    5a76:	f3ef 8811 	mrs	r8, BASEPRI
    5a7a:	f383 8811 	msr	BASEPRI, r3
    5a7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a82:	4828      	ldr	r0, [pc, #160]	; (5b24 <z_tick_sleep+0xec>)
    5a84:	f7fe ff78 	bl	4978 <z_spin_lock_valid>
    5a88:	b940      	cbnz	r0, 5a9c <z_tick_sleep+0x64>
    5a8a:	4927      	ldr	r1, [pc, #156]	; (5b28 <z_tick_sleep+0xf0>)
    5a8c:	4824      	ldr	r0, [pc, #144]	; (5b20 <z_tick_sleep+0xe8>)
    5a8e:	2281      	movs	r2, #129	; 0x81
    5a90:	f003 f8e4 	bl	8c5c <printk>
    5a94:	2181      	movs	r1, #129	; 0x81
    5a96:	4824      	ldr	r0, [pc, #144]	; (5b28 <z_tick_sleep+0xf0>)
    5a98:	f003 f9ac 	bl	8df4 <assert_post_action>
	pending_current = _current;
    5a9c:	4d23      	ldr	r5, [pc, #140]	; (5b2c <z_tick_sleep+0xf4>)
	z_spin_lock_set_owner(l);
    5a9e:	4821      	ldr	r0, [pc, #132]	; (5b24 <z_tick_sleep+0xec>)
    5aa0:	f7fe ff86 	bl	49b0 <z_spin_lock_set_owner>
    5aa4:	68a8      	ldr	r0, [r5, #8]
    5aa6:	4b22      	ldr	r3, [pc, #136]	; (5b30 <z_tick_sleep+0xf8>)
    5aa8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5aaa:	f7ff fb0d 	bl	50c8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5aae:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5ab0:	4632      	mov	r2, r6
    5ab2:	463b      	mov	r3, r7
    5ab4:	3018      	adds	r0, #24
    5ab6:	491f      	ldr	r1, [pc, #124]	; (5b34 <z_tick_sleep+0xfc>)
    5ab8:	f000 f972 	bl	5da0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5abc:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5abe:	4819      	ldr	r0, [pc, #100]	; (5b24 <z_tick_sleep+0xec>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5ac0:	7b53      	ldrb	r3, [r2, #13]
    5ac2:	f043 0310 	orr.w	r3, r3, #16
    5ac6:	7353      	strb	r3, [r2, #13]
    5ac8:	f7fe ff64 	bl	4994 <z_spin_unlock_valid>
    5acc:	b940      	cbnz	r0, 5ae0 <z_tick_sleep+0xa8>
    5ace:	4916      	ldr	r1, [pc, #88]	; (5b28 <z_tick_sleep+0xf0>)
    5ad0:	4813      	ldr	r0, [pc, #76]	; (5b20 <z_tick_sleep+0xe8>)
    5ad2:	22c3      	movs	r2, #195	; 0xc3
    5ad4:	f003 f8c2 	bl	8c5c <printk>
    5ad8:	21c3      	movs	r1, #195	; 0xc3
    5ada:	4813      	ldr	r0, [pc, #76]	; (5b28 <z_tick_sleep+0xf0>)
    5adc:	f003 f98a 	bl	8df4 <assert_post_action>
    5ae0:	4640      	mov	r0, r8
    5ae2:	f7fc fb43 	bl	216c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    5ae6:	68ab      	ldr	r3, [r5, #8]
    5ae8:	7b5b      	ldrb	r3, [r3, #13]
    5aea:	06db      	lsls	r3, r3, #27
    5aec:	d50a      	bpl.n	5b04 <z_tick_sleep+0xcc>
    5aee:	490b      	ldr	r1, [pc, #44]	; (5b1c <z_tick_sleep+0xe4>)
    5af0:	480b      	ldr	r0, [pc, #44]	; (5b20 <z_tick_sleep+0xe8>)
    5af2:	f240 42ef 	movw	r2, #1263	; 0x4ef
    5af6:	f003 f8b1 	bl	8c5c <printk>
    5afa:	f240 41ef 	movw	r1, #1263	; 0x4ef
    5afe:	4807      	ldr	r0, [pc, #28]	; (5b1c <z_tick_sleep+0xe4>)
    5b00:	f003 f978 	bl	8df4 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5b04:	f003 fcac 	bl	9460 <sys_clock_tick_get_32>
    5b08:	1a20      	subs	r0, r4, r0
    5b0a:	eb64 0104 	sbc.w	r1, r4, r4
    5b0e:	2800      	cmp	r0, #0
    5b10:	f171 0300 	sbcs.w	r3, r1, #0
    5b14:	bfb8      	it	lt
    5b16:	2000      	movlt	r0, #0
    5b18:	e7a6      	b.n	5a68 <z_tick_sleep+0x30>
    5b1a:	bf00      	nop
    5b1c:	0000accc 	.word	0x0000accc
    5b20:	00009b92 	.word	0x00009b92
    5b24:	20000cc4 	.word	0x20000cc4
    5b28:	00009bcc 	.word	0x00009bcc
    5b2c:	20000c88 	.word	0x20000c88
    5b30:	20000cc0 	.word	0x20000cc0
    5b34:	000056d9 	.word	0x000056d9

00005b38 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    5b38:	b538      	push	{r3, r4, r5, lr}
    5b3a:	4604      	mov	r4, r0
    5b3c:	460d      	mov	r5, r1
    5b3e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5b42:	b153      	cbz	r3, 5b5a <z_impl_k_sleep+0x22>
    5b44:	4911      	ldr	r1, [pc, #68]	; (5b8c <z_impl_k_sleep+0x54>)
    5b46:	4812      	ldr	r0, [pc, #72]	; (5b90 <z_impl_k_sleep+0x58>)
    5b48:	f240 42fe 	movw	r2, #1278	; 0x4fe
    5b4c:	f003 f886 	bl	8c5c <printk>
    5b50:	f240 41fe 	movw	r1, #1278	; 0x4fe
    5b54:	480d      	ldr	r0, [pc, #52]	; (5b8c <z_impl_k_sleep+0x54>)
    5b56:	f003 f94d 	bl	8df4 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5b5a:	1c6b      	adds	r3, r5, #1
    5b5c:	bf08      	it	eq
    5b5e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    5b62:	d106      	bne.n	5b72 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
    5b64:	4b0b      	ldr	r3, [pc, #44]	; (5b94 <z_impl_k_sleep+0x5c>)
    5b66:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5b68:	f7ff fb7e 	bl	5268 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5b6c:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5b70:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    5b72:	4620      	mov	r0, r4
    5b74:	4629      	mov	r1, r5
    5b76:	f7ff ff5f 	bl	5a38 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    5b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5b7e:	fb80 3403 	smull	r3, r4, r0, r3
    5b82:	0bd8      	lsrs	r0, r3, #15
    5b84:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    5b88:	e7f2      	b.n	5b70 <z_impl_k_sleep+0x38>
    5b8a:	bf00      	nop
    5b8c:	0000accc 	.word	0x0000accc
    5b90:	00009b92 	.word	0x00009b92
    5b94:	20000c88 	.word	0x20000c88

00005b98 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5b98:	4b01      	ldr	r3, [pc, #4]	; (5ba0 <z_impl_k_current_get+0x8>)
    5b9a:	6898      	ldr	r0, [r3, #8]
    5b9c:	4770      	bx	lr
    5b9e:	bf00      	nop
    5ba0:	20000c88 	.word	0x20000c88

00005ba4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ba8:	4604      	mov	r4, r0
    5baa:	f04f 0320 	mov.w	r3, #32
    5bae:	f3ef 8611 	mrs	r6, BASEPRI
    5bb2:	f383 8811 	msr	BASEPRI, r3
    5bb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5bba:	483e      	ldr	r0, [pc, #248]	; (5cb4 <z_thread_abort+0x110>)
    5bbc:	f7fe fedc 	bl	4978 <z_spin_lock_valid>
    5bc0:	b940      	cbnz	r0, 5bd4 <z_thread_abort+0x30>
    5bc2:	493d      	ldr	r1, [pc, #244]	; (5cb8 <z_thread_abort+0x114>)
    5bc4:	483d      	ldr	r0, [pc, #244]	; (5cbc <z_thread_abort+0x118>)
    5bc6:	2281      	movs	r2, #129	; 0x81
    5bc8:	f003 f848 	bl	8c5c <printk>
    5bcc:	2181      	movs	r1, #129	; 0x81
    5bce:	483a      	ldr	r0, [pc, #232]	; (5cb8 <z_thread_abort+0x114>)
    5bd0:	f003 f910 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5bd4:	4837      	ldr	r0, [pc, #220]	; (5cb4 <z_thread_abort+0x110>)
    5bd6:	f7fe feeb 	bl	49b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5bda:	7b63      	ldrb	r3, [r4, #13]
    5bdc:	071a      	lsls	r2, r3, #28
    5bde:	d512      	bpl.n	5c06 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5be0:	4834      	ldr	r0, [pc, #208]	; (5cb4 <z_thread_abort+0x110>)
    5be2:	f7fe fed7 	bl	4994 <z_spin_unlock_valid>
    5be6:	b940      	cbnz	r0, 5bfa <z_thread_abort+0x56>
    5be8:	4933      	ldr	r1, [pc, #204]	; (5cb8 <z_thread_abort+0x114>)
    5bea:	4834      	ldr	r0, [pc, #208]	; (5cbc <z_thread_abort+0x118>)
    5bec:	22ac      	movs	r2, #172	; 0xac
    5bee:	f003 f835 	bl	8c5c <printk>
    5bf2:	21ac      	movs	r1, #172	; 0xac
    5bf4:	4830      	ldr	r0, [pc, #192]	; (5cb8 <z_thread_abort+0x114>)
    5bf6:	f003 f8fd 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    5bfa:	f386 8811 	msr	BASEPRI, r6
    5bfe:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5c06:	f023 0220 	bic.w	r2, r3, #32
    5c0a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5c0e:	09d2      	lsrs	r2, r2, #7
    5c10:	d138      	bne.n	5c84 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5c12:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    5c14:	68a3      	ldr	r3, [r4, #8]
    5c16:	b113      	cbz	r3, 5c1e <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    5c18:	4620      	mov	r0, r4
    5c1a:	f7ff fa07 	bl	502c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5c1e:	f104 0018 	add.w	r0, r4, #24
    5c22:	f000 f977 	bl	5f14 <z_abort_timeout>
    5c26:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5c2a:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    5c2e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c30:	42bd      	cmp	r5, r7
    5c32:	d000      	beq.n	5c36 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5c34:	bb85      	cbnz	r5, 5c98 <z_thread_abort+0xf4>
		update_cache(1);
    5c36:	2001      	movs	r0, #1
    5c38:	f7ff fa16 	bl	5068 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5c3c:	4b20      	ldr	r3, [pc, #128]	; (5cc0 <z_thread_abort+0x11c>)
    5c3e:	689b      	ldr	r3, [r3, #8]
    5c40:	42a3      	cmp	r3, r4
    5c42:	d1cd      	bne.n	5be0 <z_thread_abort+0x3c>
    5c44:	f3ef 8305 	mrs	r3, IPSR
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d1c9      	bne.n	5be0 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c4c:	4819      	ldr	r0, [pc, #100]	; (5cb4 <z_thread_abort+0x110>)
    5c4e:	f7fe fea1 	bl	4994 <z_spin_unlock_valid>
    5c52:	b940      	cbnz	r0, 5c66 <z_thread_abort+0xc2>
    5c54:	4918      	ldr	r1, [pc, #96]	; (5cb8 <z_thread_abort+0x114>)
    5c56:	4819      	ldr	r0, [pc, #100]	; (5cbc <z_thread_abort+0x118>)
    5c58:	22c3      	movs	r2, #195	; 0xc3
    5c5a:	f002 ffff 	bl	8c5c <printk>
    5c5e:	21c3      	movs	r1, #195	; 0xc3
    5c60:	4815      	ldr	r0, [pc, #84]	; (5cb8 <z_thread_abort+0x114>)
    5c62:	f003 f8c7 	bl	8df4 <assert_post_action>
    5c66:	4630      	mov	r0, r6
    5c68:	f7fc fa80 	bl	216c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    5c6c:	f240 6211 	movw	r2, #1553	; 0x611
    5c70:	4914      	ldr	r1, [pc, #80]	; (5cc4 <z_thread_abort+0x120>)
    5c72:	4812      	ldr	r0, [pc, #72]	; (5cbc <z_thread_abort+0x118>)
    5c74:	f002 fff2 	bl	8c5c <printk>
    5c78:	f240 6111 	movw	r1, #1553	; 0x611
    5c7c:	4811      	ldr	r0, [pc, #68]	; (5cc4 <z_thread_abort+0x120>)
    5c7e:	f003 f8b9 	bl	8df4 <assert_post_action>
    5c82:	e7ad      	b.n	5be0 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c84:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5c88:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    5c8c:	4621      	mov	r1, r4
    5c8e:	480e      	ldr	r0, [pc, #56]	; (5cc8 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c90:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    5c92:	f7ff f9ad 	bl	4ff0 <z_priq_dumb_remove>
}
    5c96:	e7bd      	b.n	5c14 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    5c98:	4628      	mov	r0, r5
    5c9a:	f7ff f9c7 	bl	502c <unpend_thread_no_timeout>
    5c9e:	f105 0018 	add.w	r0, r5, #24
    5ca2:	f000 f937 	bl	5f14 <z_abort_timeout>
		ready_thread(thread);
    5ca6:	4628      	mov	r0, r5
    5ca8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    5cac:	f7ff fc4c 	bl	5548 <ready_thread>
    5cb0:	e7bd      	b.n	5c2e <z_thread_abort+0x8a>
    5cb2:	bf00      	nop
    5cb4:	20000cc4 	.word	0x20000cc4
    5cb8:	00009bcc 	.word	0x00009bcc
    5cbc:	00009b92 	.word	0x00009b92
    5cc0:	20000c88 	.word	0x20000c88
    5cc4:	0000accc 	.word	0x0000accc
    5cc8:	20000cb0 	.word	0x20000cb0

00005ccc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5ccc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    5cce:	4806      	ldr	r0, [pc, #24]	; (5ce8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    5cd0:	4a06      	ldr	r2, [pc, #24]	; (5cec <z_data_copy+0x20>)
    5cd2:	4907      	ldr	r1, [pc, #28]	; (5cf0 <z_data_copy+0x24>)
    5cd4:	1a12      	subs	r2, r2, r0
    5cd6:	f003 f9d7 	bl	9088 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    5cde:	4a05      	ldr	r2, [pc, #20]	; (5cf4 <z_data_copy+0x28>)
    5ce0:	4905      	ldr	r1, [pc, #20]	; (5cf8 <z_data_copy+0x2c>)
    5ce2:	4806      	ldr	r0, [pc, #24]	; (5cfc <z_data_copy+0x30>)
    5ce4:	f003 b9d0 	b.w	9088 <memcpy>
    5ce8:	20000000 	.word	0x20000000
    5cec:	200001e0 	.word	0x200001e0
    5cf0:	0000ad64 	.word	0x0000ad64
    5cf4:	00000000 	.word	0x00000000
    5cf8:	0000ad64 	.word	0x0000ad64
    5cfc:	20000000 	.word	0x20000000

00005d00 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5d00:	4b03      	ldr	r3, [pc, #12]	; (5d10 <elapsed+0x10>)
    5d02:	681b      	ldr	r3, [r3, #0]
    5d04:	b90b      	cbnz	r3, 5d0a <elapsed+0xa>
    5d06:	f7fb bea1 	b.w	1a4c <sys_clock_elapsed>
}
    5d0a:	2000      	movs	r0, #0
    5d0c:	4770      	bx	lr
    5d0e:	bf00      	nop
    5d10:	20000cd0 	.word	0x20000cd0

00005d14 <remove_timeout>:
{
    5d14:	b530      	push	{r4, r5, lr}
    5d16:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5d18:	b168      	cbz	r0, 5d36 <remove_timeout+0x22>
    5d1a:	4a0a      	ldr	r2, [pc, #40]	; (5d44 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    5d1c:	6852      	ldr	r2, [r2, #4]
    5d1e:	4290      	cmp	r0, r2
    5d20:	d009      	beq.n	5d36 <remove_timeout+0x22>
	if (next(t) != NULL) {
    5d22:	b143      	cbz	r3, 5d36 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5d24:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5d28:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5d2c:	1912      	adds	r2, r2, r4
    5d2e:	eb45 0101 	adc.w	r1, r5, r1
    5d32:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    5d36:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    5d38:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5d3a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5d3c:	2300      	movs	r3, #0
	node->prev = NULL;
    5d3e:	e9c0 3300 	strd	r3, r3, [r0]
}
    5d42:	bd30      	pop	{r4, r5, pc}
    5d44:	20000088 	.word	0x20000088

00005d48 <next_timeout>:

static int32_t next_timeout(void)
{
    5d48:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5d4a:	4b13      	ldr	r3, [pc, #76]	; (5d98 <next_timeout+0x50>)
    5d4c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5d4e:	429c      	cmp	r4, r3
    5d50:	bf08      	it	eq
    5d52:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5d54:	f7ff ffd4 	bl	5d00 <elapsed>
    5d58:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    5d5a:	b1bc      	cbz	r4, 5d8c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5d5c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5d60:	1b40      	subs	r0, r0, r5
    5d62:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5d66:	2801      	cmp	r0, #1
    5d68:	f171 0300 	sbcs.w	r3, r1, #0
    5d6c:	db11      	blt.n	5d92 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5d6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5d72:	2300      	movs	r3, #0
    5d74:	4282      	cmp	r2, r0
    5d76:	eb73 0401 	sbcs.w	r4, r3, r1
    5d7a:	da00      	bge.n	5d7e <next_timeout+0x36>
    5d7c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5d7e:	4b07      	ldr	r3, [pc, #28]	; (5d9c <next_timeout+0x54>)
    5d80:	691b      	ldr	r3, [r3, #16]
    5d82:	b113      	cbz	r3, 5d8a <next_timeout+0x42>
    5d84:	4298      	cmp	r0, r3
    5d86:	bfa8      	it	ge
    5d88:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5d8a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    5d8c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5d90:	e7f5      	b.n	5d7e <next_timeout+0x36>
    5d92:	2000      	movs	r0, #0
    5d94:	e7f3      	b.n	5d7e <next_timeout+0x36>
    5d96:	bf00      	nop
    5d98:	20000088 	.word	0x20000088
    5d9c:	20000c88 	.word	0x20000c88

00005da0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    5da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5da4:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5da6:	1c6b      	adds	r3, r5, #1
    5da8:	bf08      	it	eq
    5daa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    5dae:	4682      	mov	sl, r0
    5db0:	468b      	mov	fp, r1
    5db2:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5db4:	f000 809c 	beq.w	5ef0 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    5db8:	6803      	ldr	r3, [r0, #0]
    5dba:	b143      	cbz	r3, 5dce <z_add_timeout+0x2e>
    5dbc:	494e      	ldr	r1, [pc, #312]	; (5ef8 <z_add_timeout+0x158>)
    5dbe:	484f      	ldr	r0, [pc, #316]	; (5efc <z_add_timeout+0x15c>)
    5dc0:	225d      	movs	r2, #93	; 0x5d
    5dc2:	f002 ff4b 	bl	8c5c <printk>
    5dc6:	215d      	movs	r1, #93	; 0x5d
    5dc8:	484b      	ldr	r0, [pc, #300]	; (5ef8 <z_add_timeout+0x158>)
    5dca:	f003 f813 	bl	8df4 <assert_post_action>
	to->fn = fn;
    5dce:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    5dd2:	f04f 0320 	mov.w	r3, #32
    5dd6:	f3ef 8b11 	mrs	fp, BASEPRI
    5dda:	f383 8811 	msr	BASEPRI, r3
    5dde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5de2:	4847      	ldr	r0, [pc, #284]	; (5f00 <z_add_timeout+0x160>)
    5de4:	f7fe fdc8 	bl	4978 <z_spin_lock_valid>
    5de8:	b940      	cbnz	r0, 5dfc <z_add_timeout+0x5c>
    5dea:	4946      	ldr	r1, [pc, #280]	; (5f04 <z_add_timeout+0x164>)
    5dec:	4843      	ldr	r0, [pc, #268]	; (5efc <z_add_timeout+0x15c>)
    5dee:	2281      	movs	r2, #129	; 0x81
    5df0:	f002 ff34 	bl	8c5c <printk>
    5df4:	2181      	movs	r1, #129	; 0x81
    5df6:	4843      	ldr	r0, [pc, #268]	; (5f04 <z_add_timeout+0x164>)
    5df8:	f002 fffc 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5dfc:	4840      	ldr	r0, [pc, #256]	; (5f00 <z_add_timeout+0x160>)
    5dfe:	f7fe fdd7 	bl	49b0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5e02:	f06f 0301 	mvn.w	r3, #1
    5e06:	f04f 32ff 	mov.w	r2, #4294967295
    5e0a:	ebb3 0804 	subs.w	r8, r3, r4
    5e0e:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5e12:	f1b8 0f00 	cmp.w	r8, #0
    5e16:	f179 0100 	sbcs.w	r1, r9, #0
    5e1a:	db1c      	blt.n	5e56 <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5e1c:	483a      	ldr	r0, [pc, #232]	; (5f08 <z_add_timeout+0x168>)
    5e1e:	e9d0 1000 	ldrd	r1, r0, [r0]
    5e22:	1a5b      	subs	r3, r3, r1
    5e24:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    5e28:	1b1e      	subs	r6, r3, r4
    5e2a:	eb62 0705 	sbc.w	r7, r2, r5
    5e2e:	2e01      	cmp	r6, #1
    5e30:	f177 0300 	sbcs.w	r3, r7, #0
    5e34:	bfbc      	itt	lt
    5e36:	2601      	movlt	r6, #1
    5e38:	2700      	movlt	r7, #0
    5e3a:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    5e3e:	4a33      	ldr	r2, [pc, #204]	; (5f0c <z_add_timeout+0x16c>)
    5e40:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e44:	4293      	cmp	r3, r2
    5e46:	d11d      	bne.n	5e84 <z_add_timeout+0xe4>
	node->prev = tail;
    5e48:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    5e4c:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    5e50:	f8c2 a004 	str.w	sl, [r2, #4]
}
    5e54:	e02c      	b.n	5eb0 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5e56:	f7ff ff53 	bl	5d00 <elapsed>
    5e5a:	1c63      	adds	r3, r4, #1
    5e5c:	9300      	str	r3, [sp, #0]
    5e5e:	f145 0300 	adc.w	r3, r5, #0
    5e62:	9301      	str	r3, [sp, #4]
    5e64:	e9dd 2300 	ldrd	r2, r3, [sp]
    5e68:	1812      	adds	r2, r2, r0
    5e6a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    5e6e:	e9ca 2304 	strd	r2, r3, [sl, #16]
    5e72:	e7e4      	b.n	5e3e <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5e74:	1be0      	subs	r0, r4, r7
    5e76:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    5e7a:	42b3      	cmp	r3, r6
    5e7c:	e9ca 0104 	strd	r0, r1, [sl, #16]
    5e80:	d0e2      	beq.n	5e48 <z_add_timeout+0xa8>
    5e82:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5e84:	2b00      	cmp	r3, #0
    5e86:	d0df      	beq.n	5e48 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    5e88:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    5e8c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    5e90:	42bc      	cmp	r4, r7
    5e92:	eb75 0108 	sbcs.w	r1, r5, r8
    5e96:	daed      	bge.n	5e74 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    5e98:	1b38      	subs	r0, r7, r4
    5e9a:	eb68 0105 	sbc.w	r1, r8, r5
    5e9e:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5ea2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5ea4:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    5ea8:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5eac:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    5eb0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5eb2:	4293      	cmp	r3, r2
    5eb4:	d00b      	beq.n	5ece <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5eb6:	459a      	cmp	sl, r3
    5eb8:	d109      	bne.n	5ece <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5eba:	f7ff ff45 	bl	5d48 <next_timeout>

			if (next_time == 0 ||
    5ebe:	b118      	cbz	r0, 5ec8 <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
    5ec0:	4b13      	ldr	r3, [pc, #76]	; (5f10 <z_add_timeout+0x170>)
			if (next_time == 0 ||
    5ec2:	691b      	ldr	r3, [r3, #16]
    5ec4:	4283      	cmp	r3, r0
    5ec6:	d002      	beq.n	5ece <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
    5ec8:	2100      	movs	r1, #0
    5eca:	f7fb fd8d 	bl	19e8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ece:	480c      	ldr	r0, [pc, #48]	; (5f00 <z_add_timeout+0x160>)
    5ed0:	f7fe fd60 	bl	4994 <z_spin_unlock_valid>
    5ed4:	b940      	cbnz	r0, 5ee8 <z_add_timeout+0x148>
    5ed6:	490b      	ldr	r1, [pc, #44]	; (5f04 <z_add_timeout+0x164>)
    5ed8:	4808      	ldr	r0, [pc, #32]	; (5efc <z_add_timeout+0x15c>)
    5eda:	22ac      	movs	r2, #172	; 0xac
    5edc:	f002 febe 	bl	8c5c <printk>
    5ee0:	21ac      	movs	r1, #172	; 0xac
    5ee2:	4808      	ldr	r0, [pc, #32]	; (5f04 <z_add_timeout+0x164>)
    5ee4:	f002 ff86 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    5ee8:	f38b 8811 	msr	BASEPRI, fp
    5eec:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5ef0:	b003      	add	sp, #12
    5ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ef6:	bf00      	nop
    5ef8:	0000acee 	.word	0x0000acee
    5efc:	00009b92 	.word	0x00009b92
    5f00:	20000cd4 	.word	0x20000cd4
    5f04:	00009bcc 	.word	0x00009bcc
    5f08:	200002e0 	.word	0x200002e0
    5f0c:	20000088 	.word	0x20000088
    5f10:	20000c88 	.word	0x20000c88

00005f14 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    5f14:	b538      	push	{r3, r4, r5, lr}
    5f16:	4604      	mov	r4, r0
	__asm__ volatile(
    5f18:	f04f 0320 	mov.w	r3, #32
    5f1c:	f3ef 8511 	mrs	r5, BASEPRI
    5f20:	f383 8811 	msr	BASEPRI, r3
    5f24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f28:	4815      	ldr	r0, [pc, #84]	; (5f80 <z_abort_timeout+0x6c>)
    5f2a:	f7fe fd25 	bl	4978 <z_spin_lock_valid>
    5f2e:	b940      	cbnz	r0, 5f42 <z_abort_timeout+0x2e>
    5f30:	4914      	ldr	r1, [pc, #80]	; (5f84 <z_abort_timeout+0x70>)
    5f32:	4815      	ldr	r0, [pc, #84]	; (5f88 <z_abort_timeout+0x74>)
    5f34:	2281      	movs	r2, #129	; 0x81
    5f36:	f002 fe91 	bl	8c5c <printk>
    5f3a:	2181      	movs	r1, #129	; 0x81
    5f3c:	4811      	ldr	r0, [pc, #68]	; (5f84 <z_abort_timeout+0x70>)
    5f3e:	f002 ff59 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5f42:	480f      	ldr	r0, [pc, #60]	; (5f80 <z_abort_timeout+0x6c>)
    5f44:	f7fe fd34 	bl	49b0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    5f48:	6823      	ldr	r3, [r4, #0]
    5f4a:	b1b3      	cbz	r3, 5f7a <z_abort_timeout+0x66>
			remove_timeout(to);
    5f4c:	4620      	mov	r0, r4
    5f4e:	f7ff fee1 	bl	5d14 <remove_timeout>
			ret = 0;
    5f52:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f54:	480a      	ldr	r0, [pc, #40]	; (5f80 <z_abort_timeout+0x6c>)
    5f56:	f7fe fd1d 	bl	4994 <z_spin_unlock_valid>
    5f5a:	b940      	cbnz	r0, 5f6e <z_abort_timeout+0x5a>
    5f5c:	4909      	ldr	r1, [pc, #36]	; (5f84 <z_abort_timeout+0x70>)
    5f5e:	480a      	ldr	r0, [pc, #40]	; (5f88 <z_abort_timeout+0x74>)
    5f60:	22ac      	movs	r2, #172	; 0xac
    5f62:	f002 fe7b 	bl	8c5c <printk>
    5f66:	21ac      	movs	r1, #172	; 0xac
    5f68:	4806      	ldr	r0, [pc, #24]	; (5f84 <z_abort_timeout+0x70>)
    5f6a:	f002 ff43 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    5f6e:	f385 8811 	msr	BASEPRI, r5
    5f72:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    5f76:	4620      	mov	r0, r4
    5f78:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    5f7a:	f06f 0415 	mvn.w	r4, #21
    5f7e:	e7e9      	b.n	5f54 <z_abort_timeout+0x40>
    5f80:	20000cd4 	.word	0x20000cd4
    5f84:	00009bcc 	.word	0x00009bcc
    5f88:	00009b92 	.word	0x00009b92

00005f8c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    5f8c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5f8e:	f04f 0320 	mov.w	r3, #32
    5f92:	f3ef 8511 	mrs	r5, BASEPRI
    5f96:	f383 8811 	msr	BASEPRI, r3
    5f9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f9e:	4813      	ldr	r0, [pc, #76]	; (5fec <z_get_next_timeout_expiry+0x60>)
    5fa0:	f7fe fcea 	bl	4978 <z_spin_lock_valid>
    5fa4:	b940      	cbnz	r0, 5fb8 <z_get_next_timeout_expiry+0x2c>
    5fa6:	4912      	ldr	r1, [pc, #72]	; (5ff0 <z_get_next_timeout_expiry+0x64>)
    5fa8:	4812      	ldr	r0, [pc, #72]	; (5ff4 <z_get_next_timeout_expiry+0x68>)
    5faa:	2281      	movs	r2, #129	; 0x81
    5fac:	f002 fe56 	bl	8c5c <printk>
    5fb0:	2181      	movs	r1, #129	; 0x81
    5fb2:	480f      	ldr	r0, [pc, #60]	; (5ff0 <z_get_next_timeout_expiry+0x64>)
    5fb4:	f002 ff1e 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5fb8:	480c      	ldr	r0, [pc, #48]	; (5fec <z_get_next_timeout_expiry+0x60>)
    5fba:	f7fe fcf9 	bl	49b0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    5fbe:	f7ff fec3 	bl	5d48 <next_timeout>
    5fc2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5fc4:	4809      	ldr	r0, [pc, #36]	; (5fec <z_get_next_timeout_expiry+0x60>)
    5fc6:	f7fe fce5 	bl	4994 <z_spin_unlock_valid>
    5fca:	b940      	cbnz	r0, 5fde <z_get_next_timeout_expiry+0x52>
    5fcc:	4908      	ldr	r1, [pc, #32]	; (5ff0 <z_get_next_timeout_expiry+0x64>)
    5fce:	4809      	ldr	r0, [pc, #36]	; (5ff4 <z_get_next_timeout_expiry+0x68>)
    5fd0:	22ac      	movs	r2, #172	; 0xac
    5fd2:	f002 fe43 	bl	8c5c <printk>
    5fd6:	21ac      	movs	r1, #172	; 0xac
    5fd8:	4805      	ldr	r0, [pc, #20]	; (5ff0 <z_get_next_timeout_expiry+0x64>)
    5fda:	f002 ff0b 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    5fde:	f385 8811 	msr	BASEPRI, r5
    5fe2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    5fe6:	4620      	mov	r0, r4
    5fe8:	bd38      	pop	{r3, r4, r5, pc}
    5fea:	bf00      	nop
    5fec:	20000cd4 	.word	0x20000cd4
    5ff0:	00009bcc 	.word	0x00009bcc
    5ff4:	00009b92 	.word	0x00009b92

00005ff8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    5ff8:	b570      	push	{r4, r5, r6, lr}
    5ffa:	4604      	mov	r4, r0
    5ffc:	460d      	mov	r5, r1
	__asm__ volatile(
    5ffe:	f04f 0320 	mov.w	r3, #32
    6002:	f3ef 8611 	mrs	r6, BASEPRI
    6006:	f383 8811 	msr	BASEPRI, r3
    600a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    600e:	4816      	ldr	r0, [pc, #88]	; (6068 <z_set_timeout_expiry+0x70>)
    6010:	f7fe fcb2 	bl	4978 <z_spin_lock_valid>
    6014:	b940      	cbnz	r0, 6028 <z_set_timeout_expiry+0x30>
    6016:	4915      	ldr	r1, [pc, #84]	; (606c <z_set_timeout_expiry+0x74>)
    6018:	4815      	ldr	r0, [pc, #84]	; (6070 <z_set_timeout_expiry+0x78>)
    601a:	2281      	movs	r2, #129	; 0x81
    601c:	f002 fe1e 	bl	8c5c <printk>
    6020:	2181      	movs	r1, #129	; 0x81
    6022:	4812      	ldr	r0, [pc, #72]	; (606c <z_set_timeout_expiry+0x74>)
    6024:	f002 fee6 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6028:	480f      	ldr	r0, [pc, #60]	; (6068 <z_set_timeout_expiry+0x70>)
    602a:	f7fe fcc1 	bl	49b0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    602e:	f7ff fe8b 	bl	5d48 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6032:	2801      	cmp	r0, #1
    6034:	dd05      	ble.n	6042 <z_set_timeout_expiry+0x4a>
    6036:	42a0      	cmp	r0, r4
    6038:	db03      	blt.n	6042 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    603a:	4629      	mov	r1, r5
    603c:	4620      	mov	r0, r4
    603e:	f7fb fcd3 	bl	19e8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6042:	4809      	ldr	r0, [pc, #36]	; (6068 <z_set_timeout_expiry+0x70>)
    6044:	f7fe fca6 	bl	4994 <z_spin_unlock_valid>
    6048:	b940      	cbnz	r0, 605c <z_set_timeout_expiry+0x64>
    604a:	4908      	ldr	r1, [pc, #32]	; (606c <z_set_timeout_expiry+0x74>)
    604c:	4808      	ldr	r0, [pc, #32]	; (6070 <z_set_timeout_expiry+0x78>)
    604e:	22ac      	movs	r2, #172	; 0xac
    6050:	f002 fe04 	bl	8c5c <printk>
    6054:	21ac      	movs	r1, #172	; 0xac
    6056:	4805      	ldr	r0, [pc, #20]	; (606c <z_set_timeout_expiry+0x74>)
    6058:	f002 fecc 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    605c:	f386 8811 	msr	BASEPRI, r6
    6060:	f3bf 8f6f 	isb	sy
		}
	}
}
    6064:	bd70      	pop	{r4, r5, r6, pc}
    6066:	bf00      	nop
    6068:	20000cd4 	.word	0x20000cd4
    606c:	00009bcc 	.word	0x00009bcc
    6070:	00009b92 	.word	0x00009b92

00006074 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    6074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6078:	b085      	sub	sp, #20
    607a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    607c:	f7ff f9fe 	bl	547c <z_time_slice>
	__asm__ volatile(
    6080:	f04f 0320 	mov.w	r3, #32
    6084:	f3ef 8911 	mrs	r9, BASEPRI
    6088:	f383 8811 	msr	BASEPRI, r3
    608c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6090:	484c      	ldr	r0, [pc, #304]	; (61c4 <sys_clock_announce+0x150>)
    6092:	f7fe fc71 	bl	4978 <z_spin_lock_valid>
    6096:	b940      	cbnz	r0, 60aa <sys_clock_announce+0x36>
    6098:	494b      	ldr	r1, [pc, #300]	; (61c8 <sys_clock_announce+0x154>)
    609a:	484c      	ldr	r0, [pc, #304]	; (61cc <sys_clock_announce+0x158>)
    609c:	2281      	movs	r2, #129	; 0x81
    609e:	f002 fddd 	bl	8c5c <printk>
    60a2:	2181      	movs	r1, #129	; 0x81
    60a4:	4848      	ldr	r0, [pc, #288]	; (61c8 <sys_clock_announce+0x154>)
    60a6:	f002 fea5 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    60aa:	4f49      	ldr	r7, [pc, #292]	; (61d0 <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    60ac:	4e49      	ldr	r6, [pc, #292]	; (61d4 <sys_clock_announce+0x160>)
    60ae:	46bb      	mov	fp, r7
    60b0:	4844      	ldr	r0, [pc, #272]	; (61c4 <sys_clock_announce+0x150>)
	return list->head == list;
    60b2:	f8df a124 	ldr.w	sl, [pc, #292]	; 61d8 <sys_clock_announce+0x164>
    60b6:	f7fe fc7b 	bl	49b0 <z_spin_lock_set_owner>
    60ba:	6034      	str	r4, [r6, #0]
    60bc:	f8d6 c000 	ldr.w	ip, [r6]
    60c0:	f8da 8000 	ldr.w	r8, [sl]
    60c4:	4662      	mov	r2, ip
    60c6:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60ca:	45d0      	cmp	r8, sl
    60cc:	e9cd 3402 	strd	r3, r4, [sp, #8]
    60d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
    60d4:	e9cd 2300 	strd	r2, r3, [sp]
    60d8:	d011      	beq.n	60fe <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    60da:	f1b8 0f00 	cmp.w	r8, #0
    60de:	d00e      	beq.n	60fe <sys_clock_announce+0x8a>
    60e0:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    60e4:	e9dd 3400 	ldrd	r3, r4, [sp]
    60e8:	428b      	cmp	r3, r1
    60ea:	eb74 0302 	sbcs.w	r3, r4, r2
    60ee:	da2a      	bge.n	6146 <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    60f0:	9b00      	ldr	r3, [sp, #0]
    60f2:	1ac8      	subs	r0, r1, r3
    60f4:	9b01      	ldr	r3, [sp, #4]
    60f6:	eb62 0103 	sbc.w	r1, r2, r3
    60fa:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    60fe:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6100:	9b00      	ldr	r3, [sp, #0]
    6102:	9a02      	ldr	r2, [sp, #8]
    6104:	9903      	ldr	r1, [sp, #12]
    6106:	189a      	adds	r2, r3, r2
    6108:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    610a:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
    610c:	eb41 0303 	adc.w	r3, r1, r3
    6110:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
    6114:	f7ff fe18 	bl	5d48 <next_timeout>
    6118:	4621      	mov	r1, r4
    611a:	f7fb fc65 	bl	19e8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    611e:	4829      	ldr	r0, [pc, #164]	; (61c4 <sys_clock_announce+0x150>)
    6120:	f7fe fc38 	bl	4994 <z_spin_unlock_valid>
    6124:	b940      	cbnz	r0, 6138 <sys_clock_announce+0xc4>
    6126:	4928      	ldr	r1, [pc, #160]	; (61c8 <sys_clock_announce+0x154>)
    6128:	4828      	ldr	r0, [pc, #160]	; (61cc <sys_clock_announce+0x158>)
    612a:	22ac      	movs	r2, #172	; 0xac
    612c:	f002 fd96 	bl	8c5c <printk>
    6130:	21ac      	movs	r1, #172	; 0xac
    6132:	4825      	ldr	r0, [pc, #148]	; (61c8 <sys_clock_announce+0x154>)
    6134:	f002 fe5e 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    6138:	f389 8811 	msr	BASEPRI, r9
    613c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6140:	b005      	add	sp, #20
    6142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    6146:	2200      	movs	r2, #0
		curr_tick += dt;
    6148:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
    614c:	2300      	movs	r3, #0
		curr_tick += dt;
    614e:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
    6150:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    6154:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
    6158:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
    615a:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
    615e:	4640      	mov	r0, r8
		curr_tick += dt;
    6160:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
    6164:	f7ff fdd6 	bl	5d14 <remove_timeout>
    6168:	4816      	ldr	r0, [pc, #88]	; (61c4 <sys_clock_announce+0x150>)
    616a:	f7fe fc13 	bl	4994 <z_spin_unlock_valid>
    616e:	b940      	cbnz	r0, 6182 <sys_clock_announce+0x10e>
    6170:	4915      	ldr	r1, [pc, #84]	; (61c8 <sys_clock_announce+0x154>)
    6172:	4816      	ldr	r0, [pc, #88]	; (61cc <sys_clock_announce+0x158>)
    6174:	22ac      	movs	r2, #172	; 0xac
    6176:	f002 fd71 	bl	8c5c <printk>
    617a:	21ac      	movs	r1, #172	; 0xac
    617c:	4812      	ldr	r0, [pc, #72]	; (61c8 <sys_clock_announce+0x154>)
    617e:	f002 fe39 	bl	8df4 <assert_post_action>
    6182:	f389 8811 	msr	BASEPRI, r9
    6186:	f3bf 8f6f 	isb	sy
		t->fn(t);
    618a:	4640      	mov	r0, r8
    618c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6190:	4798      	blx	r3
	__asm__ volatile(
    6192:	f04f 0320 	mov.w	r3, #32
    6196:	f3ef 8911 	mrs	r9, BASEPRI
    619a:	f383 8811 	msr	BASEPRI, r3
    619e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    61a2:	4808      	ldr	r0, [pc, #32]	; (61c4 <sys_clock_announce+0x150>)
    61a4:	f7fe fbe8 	bl	4978 <z_spin_lock_valid>
    61a8:	b940      	cbnz	r0, 61bc <sys_clock_announce+0x148>
    61aa:	4907      	ldr	r1, [pc, #28]	; (61c8 <sys_clock_announce+0x154>)
    61ac:	4807      	ldr	r0, [pc, #28]	; (61cc <sys_clock_announce+0x158>)
    61ae:	2281      	movs	r2, #129	; 0x81
    61b0:	f002 fd54 	bl	8c5c <printk>
    61b4:	2181      	movs	r1, #129	; 0x81
    61b6:	4804      	ldr	r0, [pc, #16]	; (61c8 <sys_clock_announce+0x154>)
    61b8:	f002 fe1c 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    61bc:	4801      	ldr	r0, [pc, #4]	; (61c4 <sys_clock_announce+0x150>)
    61be:	f7fe fbf7 	bl	49b0 <z_spin_lock_set_owner>
	return k;
    61c2:	e77b      	b.n	60bc <sys_clock_announce+0x48>
    61c4:	20000cd4 	.word	0x20000cd4
    61c8:	00009bcc 	.word	0x00009bcc
    61cc:	00009b92 	.word	0x00009b92
    61d0:	200002e0 	.word	0x200002e0
    61d4:	20000cd0 	.word	0x20000cd0
    61d8:	20000088 	.word	0x20000088

000061dc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    61dc:	b570      	push	{r4, r5, r6, lr}
    61de:	f04f 0320 	mov.w	r3, #32
    61e2:	f3ef 8611 	mrs	r6, BASEPRI
    61e6:	f383 8811 	msr	BASEPRI, r3
    61ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    61ee:	4816      	ldr	r0, [pc, #88]	; (6248 <sys_clock_tick_get+0x6c>)
    61f0:	f7fe fbc2 	bl	4978 <z_spin_lock_valid>
    61f4:	b940      	cbnz	r0, 6208 <sys_clock_tick_get+0x2c>
    61f6:	4915      	ldr	r1, [pc, #84]	; (624c <sys_clock_tick_get+0x70>)
    61f8:	4815      	ldr	r0, [pc, #84]	; (6250 <sys_clock_tick_get+0x74>)
    61fa:	2281      	movs	r2, #129	; 0x81
    61fc:	f002 fd2e 	bl	8c5c <printk>
    6200:	2181      	movs	r1, #129	; 0x81
    6202:	4812      	ldr	r0, [pc, #72]	; (624c <sys_clock_tick_get+0x70>)
    6204:	f002 fdf6 	bl	8df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6208:	480f      	ldr	r0, [pc, #60]	; (6248 <sys_clock_tick_get+0x6c>)
    620a:	f7fe fbd1 	bl	49b0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    620e:	f7fb fc1d 	bl	1a4c <sys_clock_elapsed>
    6212:	4b10      	ldr	r3, [pc, #64]	; (6254 <sys_clock_tick_get+0x78>)
    6214:	e9d3 4500 	ldrd	r4, r5, [r3]
    6218:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    621a:	480b      	ldr	r0, [pc, #44]	; (6248 <sys_clock_tick_get+0x6c>)
    621c:	f145 0500 	adc.w	r5, r5, #0
    6220:	f7fe fbb8 	bl	4994 <z_spin_unlock_valid>
    6224:	b940      	cbnz	r0, 6238 <sys_clock_tick_get+0x5c>
    6226:	4909      	ldr	r1, [pc, #36]	; (624c <sys_clock_tick_get+0x70>)
    6228:	4809      	ldr	r0, [pc, #36]	; (6250 <sys_clock_tick_get+0x74>)
    622a:	22ac      	movs	r2, #172	; 0xac
    622c:	f002 fd16 	bl	8c5c <printk>
    6230:	21ac      	movs	r1, #172	; 0xac
    6232:	4806      	ldr	r0, [pc, #24]	; (624c <sys_clock_tick_get+0x70>)
    6234:	f002 fdde 	bl	8df4 <assert_post_action>
	__asm__ volatile(
    6238:	f386 8811 	msr	BASEPRI, r6
    623c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6240:	4620      	mov	r0, r4
    6242:	4629      	mov	r1, r5
    6244:	bd70      	pop	{r4, r5, r6, pc}
    6246:	bf00      	nop
    6248:	20000cd4 	.word	0x20000cd4
    624c:	00009bcc 	.word	0x00009bcc
    6250:	00009b92 	.word	0x00009b92
    6254:	200002e0 	.word	0x200002e0

00006258 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6258:	4a02      	ldr	r2, [pc, #8]	; (6264 <boot_banner+0xc>)
    625a:	4903      	ldr	r1, [pc, #12]	; (6268 <boot_banner+0x10>)
    625c:	4803      	ldr	r0, [pc, #12]	; (626c <boot_banner+0x14>)
    625e:	f002 bcfd 	b.w	8c5c <printk>
    6262:	bf00      	nop
    6264:	00009cf2 	.word	0x00009cf2
    6268:	0000ad12 	.word	0x0000ad12
    626c:	0000ad37 	.word	0x0000ad37

00006270 <nrf_cc3xx_platform_init>:
    6270:	b510      	push	{r4, lr}
    6272:	4c0c      	ldr	r4, [pc, #48]	; (62a4 <nrf_cc3xx_platform_init+0x34>)
    6274:	6823      	ldr	r3, [r4, #0]
    6276:	b113      	cbz	r3, 627e <nrf_cc3xx_platform_init+0xe>
    6278:	4b0b      	ldr	r3, [pc, #44]	; (62a8 <nrf_cc3xx_platform_init+0x38>)
    627a:	681b      	ldr	r3, [r3, #0]
    627c:	b92b      	cbnz	r3, 628a <nrf_cc3xx_platform_init+0x1a>
    627e:	f000 fa99 	bl	67b4 <CC_LibInit>
    6282:	b930      	cbnz	r0, 6292 <nrf_cc3xx_platform_init+0x22>
    6284:	2201      	movs	r2, #1
    6286:	4b08      	ldr	r3, [pc, #32]	; (62a8 <nrf_cc3xx_platform_init+0x38>)
    6288:	601a      	str	r2, [r3, #0]
    628a:	2301      	movs	r3, #1
    628c:	2000      	movs	r0, #0
    628e:	6023      	str	r3, [r4, #0]
    6290:	bd10      	pop	{r4, pc}
    6292:	3801      	subs	r0, #1
    6294:	2806      	cmp	r0, #6
    6296:	d901      	bls.n	629c <nrf_cc3xx_platform_init+0x2c>
    6298:	4804      	ldr	r0, [pc, #16]	; (62ac <nrf_cc3xx_platform_init+0x3c>)
    629a:	bd10      	pop	{r4, pc}
    629c:	4b04      	ldr	r3, [pc, #16]	; (62b0 <nrf_cc3xx_platform_init+0x40>)
    629e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    62a2:	bd10      	pop	{r4, pc}
    62a4:	20000cd8 	.word	0x20000cd8
    62a8:	20000cdc 	.word	0x20000cdc
    62ac:	ffff8ffe 	.word	0xffff8ffe
    62b0:	000099e8 	.word	0x000099e8

000062b4 <nrf_cc3xx_platform_abort>:
    62b4:	f3bf 8f4f 	dsb	sy
    62b8:	4905      	ldr	r1, [pc, #20]	; (62d0 <nrf_cc3xx_platform_abort+0x1c>)
    62ba:	4b06      	ldr	r3, [pc, #24]	; (62d4 <nrf_cc3xx_platform_abort+0x20>)
    62bc:	68ca      	ldr	r2, [r1, #12]
    62be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    62c2:	4313      	orrs	r3, r2
    62c4:	60cb      	str	r3, [r1, #12]
    62c6:	f3bf 8f4f 	dsb	sy
    62ca:	bf00      	nop
    62cc:	e7fd      	b.n	62ca <nrf_cc3xx_platform_abort+0x16>
    62ce:	bf00      	nop
    62d0:	e000ed00 	.word	0xe000ed00
    62d4:	05fa0004 	.word	0x05fa0004

000062d8 <CC_PalAbort>:
    62d8:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    62dc:	2100      	movs	r1, #0
    62de:	b430      	push	{r4, r5}
    62e0:	4a06      	ldr	r2, [pc, #24]	; (62fc <CC_PalAbort+0x24>)
    62e2:	4d07      	ldr	r5, [pc, #28]	; (6300 <CC_PalAbort+0x28>)
    62e4:	4c07      	ldr	r4, [pc, #28]	; (6304 <CC_PalAbort+0x2c>)
    62e6:	602b      	str	r3, [r5, #0]
    62e8:	6013      	str	r3, [r2, #0]
    62ea:	6023      	str	r3, [r4, #0]
    62ec:	4a06      	ldr	r2, [pc, #24]	; (6308 <CC_PalAbort+0x30>)
    62ee:	4c07      	ldr	r4, [pc, #28]	; (630c <CC_PalAbort+0x34>)
    62f0:	60eb      	str	r3, [r5, #12]
    62f2:	6863      	ldr	r3, [r4, #4]
    62f4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    62f8:	bc30      	pop	{r4, r5}
    62fa:	4718      	bx	r3
    62fc:	50841404 	.word	0x50841404
    6300:	50841400 	.word	0x50841400
    6304:	50841408 	.word	0x50841408
    6308:	50840000 	.word	0x50840000
    630c:	20000090 	.word	0x20000090

00006310 <nrf_cc3xx_platform_set_abort>:
    6310:	4b02      	ldr	r3, [pc, #8]	; (631c <nrf_cc3xx_platform_set_abort+0xc>)
    6312:	e9d0 1200 	ldrd	r1, r2, [r0]
    6316:	e9c3 1200 	strd	r1, r2, [r3]
    631a:	4770      	bx	lr
    631c:	20000090 	.word	0x20000090

00006320 <nrf_cc3xx_platform_ctr_drbg_init>:
    6320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6324:	4c15      	ldr	r4, [pc, #84]	; (637c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    6326:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6384 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
    632a:	2800      	cmp	r0, #0
    632c:	bf18      	it	ne
    632e:	4604      	movne	r4, r0
    6330:	6820      	ldr	r0, [r4, #0]
    6332:	b083      	sub	sp, #12
    6334:	4540      	cmp	r0, r8
    6336:	d01d      	beq.n	6374 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
    6338:	4616      	mov	r6, r2
    633a:	460d      	mov	r5, r1
    633c:	4620      	mov	r0, r4
    633e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    6342:	f104 0904 	add.w	r9, r4, #4
    6346:	f000 fe79 	bl	703c <mbedtls_platform_zeroize>
    634a:	f504 778c 	add.w	r7, r4, #280	; 0x118
    634e:	4648      	mov	r0, r9
    6350:	f000 f91c 	bl	658c <cc_mbedtls_entropy_init>
    6354:	4638      	mov	r0, r7
    6356:	f001 fa47 	bl	77e8 <cc_mbedtls_ctr_drbg_init>
    635a:	464a      	mov	r2, r9
    635c:	4638      	mov	r0, r7
    635e:	462b      	mov	r3, r5
    6360:	4907      	ldr	r1, [pc, #28]	; (6380 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
    6362:	9600      	str	r6, [sp, #0]
    6364:	f001 fa52 	bl	780c <cc_mbedtls_ctr_drbg_seed>
    6368:	b908      	cbnz	r0, 636e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
    636a:	f8c4 8000 	str.w	r8, [r4]
    636e:	b003      	add	sp, #12
    6370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6374:	2000      	movs	r0, #0
    6376:	b003      	add	sp, #12
    6378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    637c:	20000ce0 	.word	0x20000ce0
    6380:	0000660d 	.word	0x0000660d
    6384:	5ac9bca5 	.word	0x5ac9bca5

00006388 <nrf_cc3xx_platform_ctr_drbg_get>:
    6388:	b5f0      	push	{r4, r5, r6, r7, lr}
    638a:	4c0d      	ldr	r4, [pc, #52]	; (63c0 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    638c:	4e0d      	ldr	r6, [pc, #52]	; (63c4 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    638e:	2800      	cmp	r0, #0
    6390:	bf08      	it	eq
    6392:	4620      	moveq	r0, r4
    6394:	6807      	ldr	r7, [r0, #0]
    6396:	b083      	sub	sp, #12
    6398:	42b7      	cmp	r7, r6
    639a:	d10e      	bne.n	63ba <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    639c:	2600      	movs	r6, #0
    639e:	461d      	mov	r5, r3
    63a0:	f500 708c 	add.w	r0, r0, #280	; 0x118
    63a4:	4633      	mov	r3, r6
    63a6:	9600      	str	r6, [sp, #0]
    63a8:	4614      	mov	r4, r2
    63aa:	f001 fa7f 	bl	78ac <cc_mbedtls_ctr_drbg_random_with_add>
    63ae:	2800      	cmp	r0, #0
    63b0:	bf18      	it	ne
    63b2:	4634      	movne	r4, r6
    63b4:	602c      	str	r4, [r5, #0]
    63b6:	b003      	add	sp, #12
    63b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63ba:	4803      	ldr	r0, [pc, #12]	; (63c8 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    63bc:	e7fb      	b.n	63b6 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    63be:	bf00      	nop
    63c0:	20000ce0 	.word	0x20000ce0
    63c4:	5ac9bca5 	.word	0x5ac9bca5
    63c8:	ffff8fe8 	.word	0xffff8fe8

000063cc <mutex_unlock>:
    63cc:	b148      	cbz	r0, 63e2 <mutex_unlock+0x16>
    63ce:	6843      	ldr	r3, [r0, #4]
    63d0:	b12b      	cbz	r3, 63de <mutex_unlock+0x12>
    63d2:	f3bf 8f5f 	dmb	sy
    63d6:	2300      	movs	r3, #0
    63d8:	6003      	str	r3, [r0, #0]
    63da:	4618      	mov	r0, r3
    63dc:	4770      	bx	lr
    63de:	4802      	ldr	r0, [pc, #8]	; (63e8 <mutex_unlock+0x1c>)
    63e0:	4770      	bx	lr
    63e2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    63e6:	4770      	bx	lr
    63e8:	ffff8fea 	.word	0xffff8fea

000063ec <mutex_free>:
    63ec:	b510      	push	{r4, lr}
    63ee:	4604      	mov	r4, r0
    63f0:	b128      	cbz	r0, 63fe <mutex_free+0x12>
    63f2:	6863      	ldr	r3, [r4, #4]
    63f4:	b113      	cbz	r3, 63fc <mutex_free+0x10>
    63f6:	2300      	movs	r3, #0
    63f8:	6023      	str	r3, [r4, #0]
    63fa:	6063      	str	r3, [r4, #4]
    63fc:	bd10      	pop	{r4, pc}
    63fe:	4b02      	ldr	r3, [pc, #8]	; (6408 <mutex_free+0x1c>)
    6400:	4802      	ldr	r0, [pc, #8]	; (640c <mutex_free+0x20>)
    6402:	685b      	ldr	r3, [r3, #4]
    6404:	4798      	blx	r3
    6406:	e7f4      	b.n	63f2 <mutex_free+0x6>
    6408:	20000090 	.word	0x20000090
    640c:	00009a04 	.word	0x00009a04

00006410 <mutex_init>:
    6410:	b510      	push	{r4, lr}
    6412:	4604      	mov	r4, r0
    6414:	b130      	cbz	r0, 6424 <mutex_init+0x14>
    6416:	2200      	movs	r2, #0
    6418:	6863      	ldr	r3, [r4, #4]
    641a:	6022      	str	r2, [r4, #0]
    641c:	f043 0301 	orr.w	r3, r3, #1
    6420:	6063      	str	r3, [r4, #4]
    6422:	bd10      	pop	{r4, pc}
    6424:	4801      	ldr	r0, [pc, #4]	; (642c <mutex_init+0x1c>)
    6426:	f7ff ff57 	bl	62d8 <CC_PalAbort>
    642a:	e7f4      	b.n	6416 <mutex_init+0x6>
    642c:	00009a2c 	.word	0x00009a2c

00006430 <mutex_lock>:
    6430:	b180      	cbz	r0, 6454 <mutex_lock+0x24>
    6432:	6843      	ldr	r3, [r0, #4]
    6434:	b163      	cbz	r3, 6450 <mutex_lock+0x20>
    6436:	2201      	movs	r2, #1
    6438:	e8d0 3fef 	ldaex	r3, [r0]
    643c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    6440:	2900      	cmp	r1, #0
    6442:	d1f9      	bne.n	6438 <mutex_lock+0x8>
    6444:	2b01      	cmp	r3, #1
    6446:	d0f7      	beq.n	6438 <mutex_lock+0x8>
    6448:	f3bf 8f5f 	dmb	sy
    644c:	2000      	movs	r0, #0
    644e:	4770      	bx	lr
    6450:	4802      	ldr	r0, [pc, #8]	; (645c <mutex_lock+0x2c>)
    6452:	4770      	bx	lr
    6454:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6458:	4770      	bx	lr
    645a:	bf00      	nop
    645c:	ffff8fea 	.word	0xffff8fea

00006460 <nrf_cc3xx_platform_set_mutexes>:
    6460:	b470      	push	{r4, r5, r6}
    6462:	4b0b      	ldr	r3, [pc, #44]	; (6490 <nrf_cc3xx_platform_set_mutexes+0x30>)
    6464:	6806      	ldr	r6, [r0, #0]
    6466:	68c2      	ldr	r2, [r0, #12]
    6468:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    646c:	e9c3 4202 	strd	r4, r2, [r3, #8]
    6470:	e9c3 6500 	strd	r6, r5, [r3]
    6474:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    6478:	680e      	ldr	r6, [r1, #0]
    647a:	4b06      	ldr	r3, [pc, #24]	; (6494 <nrf_cc3xx_platform_set_mutexes+0x34>)
    647c:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    6480:	e9c3 6500 	strd	r6, r5, [r3]
    6484:	e9c3 4002 	strd	r4, r0, [r3, #8]
    6488:	611a      	str	r2, [r3, #16]
    648a:	bc70      	pop	{r4, r5, r6}
    648c:	4770      	bx	lr
    648e:	bf00      	nop
    6490:	200000a0 	.word	0x200000a0
    6494:	200000b0 	.word	0x200000b0

00006498 <entropy_update>:
    6498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    649c:	2b20      	cmp	r3, #32
    649e:	461d      	mov	r5, r3
    64a0:	4606      	mov	r6, r0
    64a2:	4689      	mov	r9, r1
    64a4:	4690      	mov	r8, r2
    64a6:	b08b      	sub	sp, #44	; 0x2c
    64a8:	d826      	bhi.n	64f8 <entropy_update+0x60>
    64aa:	b2db      	uxtb	r3, r3
    64ac:	af02      	add	r7, sp, #8
    64ae:	6831      	ldr	r1, [r6, #0]
    64b0:	f88d 9004 	strb.w	r9, [sp, #4]
    64b4:	f88d 3005 	strb.w	r3, [sp, #5]
    64b8:	f106 0904 	add.w	r9, r6, #4
    64bc:	b921      	cbnz	r1, 64c8 <entropy_update+0x30>
    64be:	4648      	mov	r0, r9
    64c0:	f000 fe62 	bl	7188 <cc_mbedtls_sha256_starts_ret>
    64c4:	4604      	mov	r4, r0
    64c6:	b940      	cbnz	r0, 64da <entropy_update+0x42>
    64c8:	2301      	movs	r3, #1
    64ca:	2202      	movs	r2, #2
    64cc:	4648      	mov	r0, r9
    64ce:	6033      	str	r3, [r6, #0]
    64d0:	a901      	add	r1, sp, #4
    64d2:	f000 fe6d 	bl	71b0 <cc_mbedtls_sha256_update_ret>
    64d6:	4604      	mov	r4, r0
    64d8:	b138      	cbz	r0, 64ea <entropy_update+0x52>
    64da:	4638      	mov	r0, r7
    64dc:	2120      	movs	r1, #32
    64de:	f000 fdad 	bl	703c <mbedtls_platform_zeroize>
    64e2:	4620      	mov	r0, r4
    64e4:	b00b      	add	sp, #44	; 0x2c
    64e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    64ea:	462a      	mov	r2, r5
    64ec:	4641      	mov	r1, r8
    64ee:	4648      	mov	r0, r9
    64f0:	f000 fe5e 	bl	71b0 <cc_mbedtls_sha256_update_ret>
    64f4:	4604      	mov	r4, r0
    64f6:	e7f0      	b.n	64da <entropy_update+0x42>
    64f8:	af02      	add	r7, sp, #8
    64fa:	4619      	mov	r1, r3
    64fc:	4610      	mov	r0, r2
    64fe:	2300      	movs	r3, #0
    6500:	463a      	mov	r2, r7
    6502:	f001 faad 	bl	7a60 <cc_mbedtls_sha256_ret>
    6506:	4604      	mov	r4, r0
    6508:	2800      	cmp	r0, #0
    650a:	d1e6      	bne.n	64da <entropy_update+0x42>
    650c:	2320      	movs	r3, #32
    650e:	46b8      	mov	r8, r7
    6510:	461d      	mov	r5, r3
    6512:	e7cc      	b.n	64ae <entropy_update+0x16>

00006514 <entropy_gather_internal.part.0>:
    6514:	b5f0      	push	{r4, r5, r6, r7, lr}
    6516:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    651a:	b0a7      	sub	sp, #156	; 0x9c
    651c:	2b00      	cmp	r3, #0
    651e:	bfd8      	it	le
    6520:	ae02      	addle	r6, sp, #8
    6522:	dd2c      	ble.n	657e <entropy_gather_internal.part.0+0x6a>
    6524:	4605      	mov	r5, r0
    6526:	2300      	movs	r3, #0
    6528:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    652c:	ae02      	add	r6, sp, #8
    652e:	9301      	str	r3, [sp, #4]
    6530:	f1a4 0701 	sub.w	r7, r4, #1
    6534:	4631      	mov	r1, r6
    6536:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
    653a:	2290      	movs	r2, #144	; 0x90
    653c:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
    6540:	ab01      	add	r3, sp, #4
    6542:	fab7 f787 	clz	r7, r7
    6546:	47a0      	blx	r4
    6548:	097f      	lsrs	r7, r7, #5
    654a:	4604      	mov	r4, r0
    654c:	b910      	cbnz	r0, 6554 <entropy_gather_internal.part.0+0x40>
    654e:	9b01      	ldr	r3, [sp, #4]
    6550:	b93b      	cbnz	r3, 6562 <entropy_gather_internal.part.0+0x4e>
    6552:	b1a7      	cbz	r7, 657e <entropy_gather_internal.part.0+0x6a>
    6554:	4630      	mov	r0, r6
    6556:	2190      	movs	r1, #144	; 0x90
    6558:	f000 fd70 	bl	703c <mbedtls_platform_zeroize>
    655c:	4620      	mov	r0, r4
    655e:	b027      	add	sp, #156	; 0x9c
    6560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6562:	4601      	mov	r1, r0
    6564:	4632      	mov	r2, r6
    6566:	4628      	mov	r0, r5
    6568:	f7ff ff96 	bl	6498 <entropy_update>
    656c:	b950      	cbnz	r0, 6584 <entropy_gather_internal.part.0+0x70>
    656e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    6572:	9a01      	ldr	r2, [sp, #4]
    6574:	4413      	add	r3, r2
    6576:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    657a:	2f00      	cmp	r7, #0
    657c:	d1ea      	bne.n	6554 <entropy_gather_internal.part.0+0x40>
    657e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
    6582:	e7e7      	b.n	6554 <entropy_gather_internal.part.0+0x40>
    6584:	4604      	mov	r4, r0
    6586:	4620      	mov	r0, r4
    6588:	b027      	add	sp, #156	; 0x9c
    658a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000658c <cc_mbedtls_entropy_init>:
    658c:	b570      	push	{r4, r5, r6, lr}
    658e:	2500      	movs	r5, #0
    6590:	4604      	mov	r4, r0
    6592:	4629      	mov	r1, r5
    6594:	2214      	movs	r2, #20
    6596:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
    659a:	30f8      	adds	r0, #248	; 0xf8
    659c:	f002 fd9f 	bl	90de <memset>
    65a0:	4b16      	ldr	r3, [pc, #88]	; (65fc <cc_mbedtls_entropy_init+0x70>)
    65a2:	f504 7686 	add.w	r6, r4, #268	; 0x10c
    65a6:	681b      	ldr	r3, [r3, #0]
    65a8:	4630      	mov	r0, r6
    65aa:	4798      	blx	r3
    65ac:	4620      	mov	r0, r4
    65ae:	f840 5b04 	str.w	r5, [r0], #4
    65b2:	f000 fdcf 	bl	7154 <cc_mbedtls_sha256_init>
    65b6:	4b12      	ldr	r3, [pc, #72]	; (6600 <cc_mbedtls_entropy_init+0x74>)
    65b8:	4630      	mov	r0, r6
    65ba:	681b      	ldr	r3, [r3, #0]
    65bc:	4798      	blx	r3
    65be:	b9d8      	cbnz	r0, 65f8 <cc_mbedtls_entropy_init+0x6c>
    65c0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    65c4:	42ab      	cmp	r3, r5
    65c6:	dc11      	bgt.n	65ec <cc_mbedtls_entropy_init+0x60>
    65c8:	2101      	movs	r1, #1
    65ca:	2520      	movs	r5, #32
    65cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    65d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    65d4:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    65d8:	480a      	ldr	r0, [pc, #40]	; (6604 <cc_mbedtls_entropy_init+0x78>)
    65da:	440b      	add	r3, r1
    65dc:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
    65e0:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
    65e4:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    65e8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    65ec:	4b06      	ldr	r3, [pc, #24]	; (6608 <cc_mbedtls_entropy_init+0x7c>)
    65ee:	4630      	mov	r0, r6
    65f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65f4:	681b      	ldr	r3, [r3, #0]
    65f6:	4718      	bx	r3
    65f8:	bd70      	pop	{r4, r5, r6, pc}
    65fa:	bf00      	nop
    65fc:	200000f4 	.word	0x200000f4
    6600:	200000f8 	.word	0x200000f8
    6604:	00007051 	.word	0x00007051
    6608:	200000fc 	.word	0x200000fc

0000660c <cc_mbedtls_entropy_func>:
    660c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6610:	2a20      	cmp	r2, #32
    6612:	b088      	sub	sp, #32
    6614:	d878      	bhi.n	6708 <cc_mbedtls_entropy_func+0xfc>
    6616:	4b3e      	ldr	r3, [pc, #248]	; (6710 <cc_mbedtls_entropy_func+0x104>)
    6618:	f500 7986 	add.w	r9, r0, #268	; 0x10c
    661c:	4604      	mov	r4, r0
    661e:	681b      	ldr	r3, [r3, #0]
    6620:	4648      	mov	r0, r9
    6622:	4617      	mov	r7, r2
    6624:	4688      	mov	r8, r1
    6626:	4798      	blx	r3
    6628:	4605      	mov	r5, r0
    662a:	bb40      	cbnz	r0, 667e <cc_mbedtls_entropy_func+0x72>
    662c:	f240 1601 	movw	r6, #257	; 0x101
    6630:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    6634:	2b00      	cmp	r3, #0
    6636:	d063      	beq.n	6700 <cc_mbedtls_entropy_func+0xf4>
    6638:	4620      	mov	r0, r4
    663a:	f7ff ff6b 	bl	6514 <entropy_gather_internal.part.0>
    663e:	4605      	mov	r5, r0
    6640:	2800      	cmp	r0, #0
    6642:	d15f      	bne.n	6704 <cc_mbedtls_entropy_func+0xf8>
    6644:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    6648:	2b00      	cmp	r3, #0
    664a:	dd07      	ble.n	665c <cc_mbedtls_entropy_func+0x50>
    664c:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
    6650:	4290      	cmp	r0, r2
    6652:	d303      	bcc.n	665c <cc_mbedtls_entropy_func+0x50>
    6654:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    6658:	2a01      	cmp	r2, #1
    665a:	d014      	beq.n	6686 <cc_mbedtls_entropy_func+0x7a>
    665c:	3e01      	subs	r6, #1
    665e:	d1e9      	bne.n	6634 <cc_mbedtls_entropy_func+0x28>
    6660:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    6664:	466e      	mov	r6, sp
    6666:	4630      	mov	r0, r6
    6668:	2120      	movs	r1, #32
    666a:	f000 fce7 	bl	703c <mbedtls_platform_zeroize>
    666e:	4b29      	ldr	r3, [pc, #164]	; (6714 <cc_mbedtls_entropy_func+0x108>)
    6670:	4648      	mov	r0, r9
    6672:	681b      	ldr	r3, [r3, #0]
    6674:	4798      	blx	r3
    6676:	2800      	cmp	r0, #0
    6678:	bf18      	it	ne
    667a:	f06f 051d 	mvnne.w	r5, #29
    667e:	4628      	mov	r0, r5
    6680:	b008      	add	sp, #32
    6682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6686:	281f      	cmp	r0, #31
    6688:	d9e8      	bls.n	665c <cc_mbedtls_entropy_func+0x50>
    668a:	466e      	mov	r6, sp
    668c:	4629      	mov	r1, r5
    668e:	2220      	movs	r2, #32
    6690:	4630      	mov	r0, r6
    6692:	f104 0a04 	add.w	sl, r4, #4
    6696:	f002 fd22 	bl	90de <memset>
    669a:	4631      	mov	r1, r6
    669c:	4650      	mov	r0, sl
    669e:	f000 fd8f 	bl	71c0 <cc_mbedtls_sha256_finish_ret>
    66a2:	4605      	mov	r5, r0
    66a4:	2800      	cmp	r0, #0
    66a6:	d1de      	bne.n	6666 <cc_mbedtls_entropy_func+0x5a>
    66a8:	4650      	mov	r0, sl
    66aa:	f000 fd67 	bl	717c <cc_mbedtls_sha256_free>
    66ae:	4650      	mov	r0, sl
    66b0:	f000 fd50 	bl	7154 <cc_mbedtls_sha256_init>
    66b4:	4629      	mov	r1, r5
    66b6:	4650      	mov	r0, sl
    66b8:	f000 fd66 	bl	7188 <cc_mbedtls_sha256_starts_ret>
    66bc:	4605      	mov	r5, r0
    66be:	2800      	cmp	r0, #0
    66c0:	d1d1      	bne.n	6666 <cc_mbedtls_entropy_func+0x5a>
    66c2:	4650      	mov	r0, sl
    66c4:	2220      	movs	r2, #32
    66c6:	4631      	mov	r1, r6
    66c8:	f000 fd72 	bl	71b0 <cc_mbedtls_sha256_update_ret>
    66cc:	4605      	mov	r5, r0
    66ce:	2800      	cmp	r0, #0
    66d0:	d1c9      	bne.n	6666 <cc_mbedtls_entropy_func+0x5a>
    66d2:	4603      	mov	r3, r0
    66d4:	4632      	mov	r2, r6
    66d6:	2120      	movs	r1, #32
    66d8:	4630      	mov	r0, r6
    66da:	f001 f9c1 	bl	7a60 <cc_mbedtls_sha256_ret>
    66de:	4605      	mov	r5, r0
    66e0:	2800      	cmp	r0, #0
    66e2:	d1c0      	bne.n	6666 <cc_mbedtls_entropy_func+0x5a>
    66e4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    66e8:	463a      	mov	r2, r7
    66ea:	2b00      	cmp	r3, #0
    66ec:	bfc8      	it	gt
    66ee:	2300      	movgt	r3, #0
    66f0:	4640      	mov	r0, r8
    66f2:	4631      	mov	r1, r6
    66f4:	bfc8      	it	gt
    66f6:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
    66fa:	f002 fcc5 	bl	9088 <memcpy>
    66fe:	e7b2      	b.n	6666 <cc_mbedtls_entropy_func+0x5a>
    6700:	f06f 053f 	mvn.w	r5, #63	; 0x3f
    6704:	466e      	mov	r6, sp
    6706:	e7ae      	b.n	6666 <cc_mbedtls_entropy_func+0x5a>
    6708:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    670c:	e7b7      	b.n	667e <cc_mbedtls_entropy_func+0x72>
    670e:	bf00      	nop
    6710:	200000f8 	.word	0x200000f8
    6714:	200000fc 	.word	0x200000fc

00006718 <RndStartupTest.constprop.0>:
    6718:	2100      	movs	r1, #0
    671a:	b530      	push	{r4, r5, lr}
    671c:	b08d      	sub	sp, #52	; 0x34
    671e:	2228      	movs	r2, #40	; 0x28
    6720:	a802      	add	r0, sp, #8
    6722:	9101      	str	r1, [sp, #4]
    6724:	f002 fcdb 	bl	90de <memset>
    6728:	a802      	add	r0, sp, #8
    672a:	f001 f9c1 	bl	7ab0 <RNG_PLAT_SetUserRngParameters>
    672e:	4604      	mov	r4, r0
    6730:	b110      	cbz	r0, 6738 <RndStartupTest.constprop.0+0x20>
    6732:	4620      	mov	r0, r4
    6734:	b00d      	add	sp, #52	; 0x34
    6736:	bd30      	pop	{r4, r5, pc}
    6738:	4d18      	ldr	r5, [pc, #96]	; (679c <RndStartupTest.constprop.0+0x84>)
    673a:	f04f 31ff 	mov.w	r1, #4294967295
    673e:	6828      	ldr	r0, [r5, #0]
    6740:	f000 f93a 	bl	69b8 <CC_PalMutexLock>
    6744:	4604      	mov	r4, r0
    6746:	b9c0      	cbnz	r0, 677a <RndStartupTest.constprop.0+0x62>
    6748:	2000      	movs	r0, #0
    674a:	f000 f965 	bl	6a18 <CC_PalPowerSaveModeSelect>
    674e:	bb00      	cbnz	r0, 6792 <RndStartupTest.constprop.0+0x7a>
    6750:	4a13      	ldr	r2, [pc, #76]	; (67a0 <RndStartupTest.constprop.0+0x88>)
    6752:	a902      	add	r1, sp, #8
    6754:	a801      	add	r0, sp, #4
    6756:	f000 fc63 	bl	7020 <LLF_RND_RunTrngStartupTest>
    675a:	4604      	mov	r4, r0
    675c:	2001      	movs	r0, #1
    675e:	f000 f95b 	bl	6a18 <CC_PalPowerSaveModeSelect>
    6762:	b990      	cbnz	r0, 678a <RndStartupTest.constprop.0+0x72>
    6764:	6828      	ldr	r0, [r5, #0]
    6766:	f000 f92f 	bl	69c8 <CC_PalMutexUnlock>
    676a:	2800      	cmp	r0, #0
    676c:	d0e1      	beq.n	6732 <RndStartupTest.constprop.0+0x1a>
    676e:	480d      	ldr	r0, [pc, #52]	; (67a4 <RndStartupTest.constprop.0+0x8c>)
    6770:	f7ff fdb2 	bl	62d8 <CC_PalAbort>
    6774:	4620      	mov	r0, r4
    6776:	b00d      	add	sp, #52	; 0x34
    6778:	bd30      	pop	{r4, r5, pc}
    677a:	480b      	ldr	r0, [pc, #44]	; (67a8 <RndStartupTest.constprop.0+0x90>)
    677c:	f7ff fdac 	bl	62d8 <CC_PalAbort>
    6780:	2c01      	cmp	r4, #1
    6782:	bf08      	it	eq
    6784:	2405      	moveq	r4, #5
    6786:	d0ed      	beq.n	6764 <RndStartupTest.constprop.0+0x4c>
    6788:	e7de      	b.n	6748 <RndStartupTest.constprop.0+0x30>
    678a:	4808      	ldr	r0, [pc, #32]	; (67ac <RndStartupTest.constprop.0+0x94>)
    678c:	f7ff fda4 	bl	62d8 <CC_PalAbort>
    6790:	e7e8      	b.n	6764 <RndStartupTest.constprop.0+0x4c>
    6792:	4807      	ldr	r0, [pc, #28]	; (67b0 <RndStartupTest.constprop.0+0x98>)
    6794:	f7ff fda0 	bl	62d8 <CC_PalAbort>
    6798:	e7da      	b.n	6750 <RndStartupTest.constprop.0+0x38>
    679a:	bf00      	nop
    679c:	200000f0 	.word	0x200000f0
    67a0:	20000f14 	.word	0x20000f14
    67a4:	00009aa8 	.word	0x00009aa8
    67a8:	00009a50 	.word	0x00009a50
    67ac:	00009a88 	.word	0x00009a88
    67b0:	00009a68 	.word	0x00009a68

000067b4 <CC_LibInit>:
    67b4:	b510      	push	{r4, lr}
    67b6:	b082      	sub	sp, #8
    67b8:	f000 f854 	bl	6864 <CC_HalInit>
    67bc:	b128      	cbz	r0, 67ca <CC_LibInit+0x16>
    67be:	f000 f8a3 	bl	6908 <CC_PalTerminate>
    67c2:	2403      	movs	r4, #3
    67c4:	4620      	mov	r0, r4
    67c6:	b002      	add	sp, #8
    67c8:	bd10      	pop	{r4, pc}
    67ca:	f000 f86f 	bl	68ac <CC_PalInit>
    67ce:	b9d0      	cbnz	r0, 6806 <CC_LibInit+0x52>
    67d0:	f000 f922 	bl	6a18 <CC_PalPowerSaveModeSelect>
    67d4:	b9d8      	cbnz	r0, 680e <CC_LibInit+0x5a>
    67d6:	4b1e      	ldr	r3, [pc, #120]	; (6850 <CC_LibInit+0x9c>)
    67d8:	681b      	ldr	r3, [r3, #0]
    67da:	0e1b      	lsrs	r3, r3, #24
    67dc:	2bf0      	cmp	r3, #240	; 0xf0
    67de:	d10a      	bne.n	67f6 <CC_LibInit+0x42>
    67e0:	4a1c      	ldr	r2, [pc, #112]	; (6854 <CC_LibInit+0xa0>)
    67e2:	4b1d      	ldr	r3, [pc, #116]	; (6858 <CC_LibInit+0xa4>)
    67e4:	6812      	ldr	r2, [r2, #0]
    67e6:	429a      	cmp	r2, r3
    67e8:	d029      	beq.n	683e <CC_LibInit+0x8a>
    67ea:	f000 f83d 	bl	6868 <CC_HalTerminate>
    67ee:	2407      	movs	r4, #7
    67f0:	f000 f88a 	bl	6908 <CC_PalTerminate>
    67f4:	e7e6      	b.n	67c4 <CC_LibInit+0x10>
    67f6:	2406      	movs	r4, #6
    67f8:	f000 f836 	bl	6868 <CC_HalTerminate>
    67fc:	f000 f884 	bl	6908 <CC_PalTerminate>
    6800:	4620      	mov	r0, r4
    6802:	b002      	add	sp, #8
    6804:	bd10      	pop	{r4, pc}
    6806:	2404      	movs	r4, #4
    6808:	4620      	mov	r0, r4
    680a:	b002      	add	sp, #8
    680c:	bd10      	pop	{r4, pc}
    680e:	f000 f82b 	bl	6868 <CC_HalTerminate>
    6812:	f000 f879 	bl	6908 <CC_PalTerminate>
    6816:	f7ff ff7f 	bl	6718 <RndStartupTest.constprop.0>
    681a:	4604      	mov	r4, r0
    681c:	b958      	cbnz	r0, 6836 <CC_LibInit+0x82>
    681e:	4602      	mov	r2, r0
    6820:	4601      	mov	r1, r0
    6822:	f7ff fd7d 	bl	6320 <nrf_cc3xx_platform_ctr_drbg_init>
    6826:	b930      	cbnz	r0, 6836 <CC_LibInit+0x82>
    6828:	2268      	movs	r2, #104	; 0x68
    682a:	490c      	ldr	r1, [pc, #48]	; (685c <CC_LibInit+0xa8>)
    682c:	ab01      	add	r3, sp, #4
    682e:	f7ff fdab 	bl	6388 <nrf_cc3xx_platform_ctr_drbg_get>
    6832:	2800      	cmp	r0, #0
    6834:	d0c6      	beq.n	67c4 <CC_LibInit+0x10>
    6836:	2405      	movs	r4, #5
    6838:	4620      	mov	r0, r4
    683a:	b002      	add	sp, #8
    683c:	bd10      	pop	{r4, pc}
    683e:	2001      	movs	r0, #1
    6840:	f000 f8ea 	bl	6a18 <CC_PalPowerSaveModeSelect>
    6844:	2800      	cmp	r0, #0
    6846:	d1e2      	bne.n	680e <CC_LibInit+0x5a>
    6848:	4b05      	ldr	r3, [pc, #20]	; (6860 <CC_LibInit+0xac>)
    684a:	6018      	str	r0, [r3, #0]
    684c:	e7e3      	b.n	6816 <CC_LibInit+0x62>
    684e:	bf00      	nop
    6850:	50841928 	.word	0x50841928
    6854:	50841a24 	.word	0x50841a24
    6858:	20e00000 	.word	0x20e00000
    685c:	20000eac 	.word	0x20000eac
    6860:	50841a0c 	.word	0x50841a0c

00006864 <CC_HalInit>:
    6864:	2000      	movs	r0, #0
    6866:	4770      	bx	lr

00006868 <CC_HalTerminate>:
    6868:	2000      	movs	r0, #0
    686a:	4770      	bx	lr

0000686c <CC_HalClearInterruptBit>:
    686c:	0543      	lsls	r3, r0, #21
    686e:	d503      	bpl.n	6878 <CC_HalClearInterruptBit+0xc>
    6870:	f04f 32ff 	mov.w	r2, #4294967295
    6874:	4b02      	ldr	r3, [pc, #8]	; (6880 <CC_HalClearInterruptBit+0x14>)
    6876:	601a      	str	r2, [r3, #0]
    6878:	4b02      	ldr	r3, [pc, #8]	; (6884 <CC_HalClearInterruptBit+0x18>)
    687a:	6018      	str	r0, [r3, #0]
    687c:	4770      	bx	lr
    687e:	bf00      	nop
    6880:	50841108 	.word	0x50841108
    6884:	50841a08 	.word	0x50841a08

00006888 <CC_HalMaskInterrupt>:
    6888:	4b01      	ldr	r3, [pc, #4]	; (6890 <CC_HalMaskInterrupt+0x8>)
    688a:	6018      	str	r0, [r3, #0]
    688c:	4770      	bx	lr
    688e:	bf00      	nop
    6890:	50841a04 	.word	0x50841a04

00006894 <CC_HalWaitInterrupt>:
    6894:	b108      	cbz	r0, 689a <CC_HalWaitInterrupt+0x6>
    6896:	f000 b86d 	b.w	6974 <CC_PalWaitInterrupt>
    689a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    689e:	4770      	bx	lr

000068a0 <CC_HalWaitInterruptRND>:
    68a0:	b108      	cbz	r0, 68a6 <CC_HalWaitInterruptRND+0x6>
    68a2:	f000 b84f 	b.w	6944 <CC_PalWaitInterruptRND>
    68a6:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    68aa:	4770      	bx	lr

000068ac <CC_PalInit>:
    68ac:	b510      	push	{r4, lr}
    68ae:	4811      	ldr	r0, [pc, #68]	; (68f4 <CC_PalInit+0x48>)
    68b0:	f000 f86e 	bl	6990 <CC_PalMutexCreate>
    68b4:	b100      	cbz	r0, 68b8 <CC_PalInit+0xc>
    68b6:	bd10      	pop	{r4, pc}
    68b8:	480f      	ldr	r0, [pc, #60]	; (68f8 <CC_PalInit+0x4c>)
    68ba:	f000 f869 	bl	6990 <CC_PalMutexCreate>
    68be:	2800      	cmp	r0, #0
    68c0:	d1f9      	bne.n	68b6 <CC_PalInit+0xa>
    68c2:	4c0e      	ldr	r4, [pc, #56]	; (68fc <CC_PalInit+0x50>)
    68c4:	4620      	mov	r0, r4
    68c6:	f000 f863 	bl	6990 <CC_PalMutexCreate>
    68ca:	2800      	cmp	r0, #0
    68cc:	d1f3      	bne.n	68b6 <CC_PalInit+0xa>
    68ce:	4b0c      	ldr	r3, [pc, #48]	; (6900 <CC_PalInit+0x54>)
    68d0:	480c      	ldr	r0, [pc, #48]	; (6904 <CC_PalInit+0x58>)
    68d2:	601c      	str	r4, [r3, #0]
    68d4:	f000 f85c 	bl	6990 <CC_PalMutexCreate>
    68d8:	4601      	mov	r1, r0
    68da:	2800      	cmp	r0, #0
    68dc:	d1eb      	bne.n	68b6 <CC_PalInit+0xa>
    68de:	f000 f82d 	bl	693c <CC_PalDmaInit>
    68e2:	4604      	mov	r4, r0
    68e4:	b108      	cbz	r0, 68ea <CC_PalInit+0x3e>
    68e6:	4620      	mov	r0, r4
    68e8:	bd10      	pop	{r4, pc}
    68ea:	f000 f877 	bl	69dc <CC_PalPowerSaveModeInit>
    68ee:	4620      	mov	r0, r4
    68f0:	e7fa      	b.n	68e8 <CC_PalInit+0x3c>
    68f2:	bf00      	nop
    68f4:	200000ec 	.word	0x200000ec
    68f8:	200000e0 	.word	0x200000e0
    68fc:	200000e8 	.word	0x200000e8
    6900:	200000f0 	.word	0x200000f0
    6904:	200000e4 	.word	0x200000e4

00006908 <CC_PalTerminate>:
    6908:	b508      	push	{r3, lr}
    690a:	4808      	ldr	r0, [pc, #32]	; (692c <CC_PalTerminate+0x24>)
    690c:	f000 f84a 	bl	69a4 <CC_PalMutexDestroy>
    6910:	4807      	ldr	r0, [pc, #28]	; (6930 <CC_PalTerminate+0x28>)
    6912:	f000 f847 	bl	69a4 <CC_PalMutexDestroy>
    6916:	4807      	ldr	r0, [pc, #28]	; (6934 <CC_PalTerminate+0x2c>)
    6918:	f000 f844 	bl	69a4 <CC_PalMutexDestroy>
    691c:	4806      	ldr	r0, [pc, #24]	; (6938 <CC_PalTerminate+0x30>)
    691e:	f000 f841 	bl	69a4 <CC_PalMutexDestroy>
    6922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6926:	f000 b80b 	b.w	6940 <CC_PalDmaTerminate>
    692a:	bf00      	nop
    692c:	200000ec 	.word	0x200000ec
    6930:	200000e0 	.word	0x200000e0
    6934:	200000e8 	.word	0x200000e8
    6938:	200000e4 	.word	0x200000e4

0000693c <CC_PalDmaInit>:
    693c:	2000      	movs	r0, #0
    693e:	4770      	bx	lr

00006940 <CC_PalDmaTerminate>:
    6940:	4770      	bx	lr
    6942:	bf00      	nop

00006944 <CC_PalWaitInterruptRND>:
    6944:	4602      	mov	r2, r0
    6946:	4807      	ldr	r0, [pc, #28]	; (6964 <CC_PalWaitInterruptRND+0x20>)
    6948:	6803      	ldr	r3, [r0, #0]
    694a:	4213      	tst	r3, r2
    694c:	d0fc      	beq.n	6948 <CC_PalWaitInterruptRND+0x4>
    694e:	b121      	cbz	r1, 695a <CC_PalWaitInterruptRND+0x16>
    6950:	4b05      	ldr	r3, [pc, #20]	; (6968 <CC_PalWaitInterruptRND+0x24>)
    6952:	4806      	ldr	r0, [pc, #24]	; (696c <CC_PalWaitInterruptRND+0x28>)
    6954:	681b      	ldr	r3, [r3, #0]
    6956:	600b      	str	r3, [r1, #0]
    6958:	6003      	str	r3, [r0, #0]
    695a:	4b05      	ldr	r3, [pc, #20]	; (6970 <CC_PalWaitInterruptRND+0x2c>)
    695c:	2000      	movs	r0, #0
    695e:	601a      	str	r2, [r3, #0]
    6960:	4770      	bx	lr
    6962:	bf00      	nop
    6964:	50841a00 	.word	0x50841a00
    6968:	50841104 	.word	0x50841104
    696c:	50841108 	.word	0x50841108
    6970:	50841a08 	.word	0x50841a08

00006974 <CC_PalWaitInterrupt>:
    6974:	4602      	mov	r2, r0
    6976:	4904      	ldr	r1, [pc, #16]	; (6988 <CC_PalWaitInterrupt+0x14>)
    6978:	680b      	ldr	r3, [r1, #0]
    697a:	421a      	tst	r2, r3
    697c:	d0fc      	beq.n	6978 <CC_PalWaitInterrupt+0x4>
    697e:	4b03      	ldr	r3, [pc, #12]	; (698c <CC_PalWaitInterrupt+0x18>)
    6980:	2000      	movs	r0, #0
    6982:	601a      	str	r2, [r3, #0]
    6984:	4770      	bx	lr
    6986:	bf00      	nop
    6988:	50841a00 	.word	0x50841a00
    698c:	50841a08 	.word	0x50841a08

00006990 <CC_PalMutexCreate>:
    6990:	b508      	push	{r3, lr}
    6992:	4b03      	ldr	r3, [pc, #12]	; (69a0 <CC_PalMutexCreate+0x10>)
    6994:	6802      	ldr	r2, [r0, #0]
    6996:	681b      	ldr	r3, [r3, #0]
    6998:	6810      	ldr	r0, [r2, #0]
    699a:	4798      	blx	r3
    699c:	2000      	movs	r0, #0
    699e:	bd08      	pop	{r3, pc}
    69a0:	200000a0 	.word	0x200000a0

000069a4 <CC_PalMutexDestroy>:
    69a4:	b508      	push	{r3, lr}
    69a6:	4b03      	ldr	r3, [pc, #12]	; (69b4 <CC_PalMutexDestroy+0x10>)
    69a8:	6802      	ldr	r2, [r0, #0]
    69aa:	685b      	ldr	r3, [r3, #4]
    69ac:	6810      	ldr	r0, [r2, #0]
    69ae:	4798      	blx	r3
    69b0:	2000      	movs	r0, #0
    69b2:	bd08      	pop	{r3, pc}
    69b4:	200000a0 	.word	0x200000a0

000069b8 <CC_PalMutexLock>:
    69b8:	4b02      	ldr	r3, [pc, #8]	; (69c4 <CC_PalMutexLock+0xc>)
    69ba:	6802      	ldr	r2, [r0, #0]
    69bc:	689b      	ldr	r3, [r3, #8]
    69be:	6810      	ldr	r0, [r2, #0]
    69c0:	4718      	bx	r3
    69c2:	bf00      	nop
    69c4:	200000a0 	.word	0x200000a0

000069c8 <CC_PalMutexUnlock>:
    69c8:	b508      	push	{r3, lr}
    69ca:	4b03      	ldr	r3, [pc, #12]	; (69d8 <CC_PalMutexUnlock+0x10>)
    69cc:	6802      	ldr	r2, [r0, #0]
    69ce:	68db      	ldr	r3, [r3, #12]
    69d0:	6810      	ldr	r0, [r2, #0]
    69d2:	4798      	blx	r3
    69d4:	2000      	movs	r0, #0
    69d6:	bd08      	pop	{r3, pc}
    69d8:	200000a0 	.word	0x200000a0

000069dc <CC_PalPowerSaveModeInit>:
    69dc:	b570      	push	{r4, r5, r6, lr}
    69de:	4c09      	ldr	r4, [pc, #36]	; (6a04 <CC_PalPowerSaveModeInit+0x28>)
    69e0:	4d09      	ldr	r5, [pc, #36]	; (6a08 <CC_PalPowerSaveModeInit+0x2c>)
    69e2:	6920      	ldr	r0, [r4, #16]
    69e4:	68ab      	ldr	r3, [r5, #8]
    69e6:	4798      	blx	r3
    69e8:	b118      	cbz	r0, 69f2 <CC_PalPowerSaveModeInit+0x16>
    69ea:	4b08      	ldr	r3, [pc, #32]	; (6a0c <CC_PalPowerSaveModeInit+0x30>)
    69ec:	4808      	ldr	r0, [pc, #32]	; (6a10 <CC_PalPowerSaveModeInit+0x34>)
    69ee:	685b      	ldr	r3, [r3, #4]
    69f0:	4798      	blx	r3
    69f2:	2100      	movs	r1, #0
    69f4:	4a07      	ldr	r2, [pc, #28]	; (6a14 <CC_PalPowerSaveModeInit+0x38>)
    69f6:	68eb      	ldr	r3, [r5, #12]
    69f8:	6011      	str	r1, [r2, #0]
    69fa:	6920      	ldr	r0, [r4, #16]
    69fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a00:	4718      	bx	r3
    6a02:	bf00      	nop
    6a04:	200000b0 	.word	0x200000b0
    6a08:	200000a0 	.word	0x200000a0
    6a0c:	20000090 	.word	0x20000090
    6a10:	00009ac0 	.word	0x00009ac0
    6a14:	20001134 	.word	0x20001134

00006a18 <CC_PalPowerSaveModeSelect>:
    6a18:	b570      	push	{r4, r5, r6, lr}
    6a1a:	4d1a      	ldr	r5, [pc, #104]	; (6a84 <CC_PalPowerSaveModeSelect+0x6c>)
    6a1c:	4e1a      	ldr	r6, [pc, #104]	; (6a88 <CC_PalPowerSaveModeSelect+0x70>)
    6a1e:	4604      	mov	r4, r0
    6a20:	68b2      	ldr	r2, [r6, #8]
    6a22:	6928      	ldr	r0, [r5, #16]
    6a24:	4790      	blx	r2
    6a26:	b9f0      	cbnz	r0, 6a66 <CC_PalPowerSaveModeSelect+0x4e>
    6a28:	b15c      	cbz	r4, 6a42 <CC_PalPowerSaveModeSelect+0x2a>
    6a2a:	4c18      	ldr	r4, [pc, #96]	; (6a8c <CC_PalPowerSaveModeSelect+0x74>)
    6a2c:	6823      	ldr	r3, [r4, #0]
    6a2e:	b1ab      	cbz	r3, 6a5c <CC_PalPowerSaveModeSelect+0x44>
    6a30:	2b01      	cmp	r3, #1
    6a32:	d01a      	beq.n	6a6a <CC_PalPowerSaveModeSelect+0x52>
    6a34:	3b01      	subs	r3, #1
    6a36:	6023      	str	r3, [r4, #0]
    6a38:	6928      	ldr	r0, [r5, #16]
    6a3a:	68f3      	ldr	r3, [r6, #12]
    6a3c:	4798      	blx	r3
    6a3e:	2000      	movs	r0, #0
    6a40:	bd70      	pop	{r4, r5, r6, pc}
    6a42:	4c12      	ldr	r4, [pc, #72]	; (6a8c <CC_PalPowerSaveModeSelect+0x74>)
    6a44:	6821      	ldr	r1, [r4, #0]
    6a46:	b939      	cbnz	r1, 6a58 <CC_PalPowerSaveModeSelect+0x40>
    6a48:	2001      	movs	r0, #1
    6a4a:	4b11      	ldr	r3, [pc, #68]	; (6a90 <CC_PalPowerSaveModeSelect+0x78>)
    6a4c:	4a11      	ldr	r2, [pc, #68]	; (6a94 <CC_PalPowerSaveModeSelect+0x7c>)
    6a4e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    6a52:	6813      	ldr	r3, [r2, #0]
    6a54:	2b00      	cmp	r3, #0
    6a56:	d1fc      	bne.n	6a52 <CC_PalPowerSaveModeSelect+0x3a>
    6a58:	3101      	adds	r1, #1
    6a5a:	6021      	str	r1, [r4, #0]
    6a5c:	68f3      	ldr	r3, [r6, #12]
    6a5e:	6928      	ldr	r0, [r5, #16]
    6a60:	4798      	blx	r3
    6a62:	2000      	movs	r0, #0
    6a64:	bd70      	pop	{r4, r5, r6, pc}
    6a66:	480c      	ldr	r0, [pc, #48]	; (6a98 <CC_PalPowerSaveModeSelect+0x80>)
    6a68:	bd70      	pop	{r4, r5, r6, pc}
    6a6a:	4a0a      	ldr	r2, [pc, #40]	; (6a94 <CC_PalPowerSaveModeSelect+0x7c>)
    6a6c:	6813      	ldr	r3, [r2, #0]
    6a6e:	2b00      	cmp	r3, #0
    6a70:	d1fc      	bne.n	6a6c <CC_PalPowerSaveModeSelect+0x54>
    6a72:	4a07      	ldr	r2, [pc, #28]	; (6a90 <CC_PalPowerSaveModeSelect+0x78>)
    6a74:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6a78:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6a7c:	f7ff ff04 	bl	6888 <CC_HalMaskInterrupt>
    6a80:	6823      	ldr	r3, [r4, #0]
    6a82:	e7d7      	b.n	6a34 <CC_PalPowerSaveModeSelect+0x1c>
    6a84:	200000b0 	.word	0x200000b0
    6a88:	200000a0 	.word	0x200000a0
    6a8c:	20001134 	.word	0x20001134
    6a90:	50840000 	.word	0x50840000
    6a94:	50841910 	.word	0x50841910
    6a98:	ffff8fe9 	.word	0xffff8fe9

00006a9c <mutex_init>:
    6a9c:	4b01      	ldr	r3, [pc, #4]	; (6aa4 <mutex_init+0x8>)
    6a9e:	681b      	ldr	r3, [r3, #0]
    6aa0:	4718      	bx	r3
    6aa2:	bf00      	nop
    6aa4:	200000a0 	.word	0x200000a0

00006aa8 <mutex_lock>:
    6aa8:	4b01      	ldr	r3, [pc, #4]	; (6ab0 <mutex_lock+0x8>)
    6aaa:	689b      	ldr	r3, [r3, #8]
    6aac:	4718      	bx	r3
    6aae:	bf00      	nop
    6ab0:	200000a0 	.word	0x200000a0

00006ab4 <mutex_unlock>:
    6ab4:	4b01      	ldr	r3, [pc, #4]	; (6abc <mutex_unlock+0x8>)
    6ab6:	68db      	ldr	r3, [r3, #12]
    6ab8:	4718      	bx	r3
    6aba:	bf00      	nop
    6abc:	200000a0 	.word	0x200000a0

00006ac0 <startTrngHW>:
    6ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ac4:	2800      	cmp	r0, #0
    6ac6:	d078      	beq.n	6bba <startTrngHW+0xfa>
    6ac8:	460c      	mov	r4, r1
    6aca:	2900      	cmp	r1, #0
    6acc:	d075      	beq.n	6bba <startTrngHW+0xfa>
    6ace:	461d      	mov	r5, r3
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d072      	beq.n	6bba <startTrngHW+0xfa>
    6ad4:	4606      	mov	r6, r0
    6ad6:	b11a      	cbz	r2, 6ae0 <startTrngHW+0x20>
    6ad8:	2201      	movs	r2, #1
    6ada:	2300      	movs	r3, #0
    6adc:	602a      	str	r2, [r5, #0]
    6ade:	6003      	str	r3, [r0, #0]
    6ae0:	682b      	ldr	r3, [r5, #0]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d065      	beq.n	6bb2 <startTrngHW+0xf2>
    6ae6:	4629      	mov	r1, r5
    6ae8:	4620      	mov	r0, r4
    6aea:	f001 f8dd 	bl	7ca8 <LLF_RND_GetFastestRosc>
    6aee:	4607      	mov	r7, r0
    6af0:	2800      	cmp	r0, #0
    6af2:	d15f      	bne.n	6bb4 <startTrngHW+0xf4>
    6af4:	4621      	mov	r1, r4
    6af6:	6828      	ldr	r0, [r5, #0]
    6af8:	f001 f8b8 	bl	7c6c <LLF_RND_GetRoscSampleCnt>
    6afc:	4607      	mov	r7, r0
    6afe:	2800      	cmp	r0, #0
    6b00:	d158      	bne.n	6bb4 <startTrngHW+0xf4>
    6b02:	682b      	ldr	r3, [r5, #0]
    6b04:	2b08      	cmp	r3, #8
    6b06:	d067      	beq.n	6bd8 <startTrngHW+0x118>
    6b08:	2b04      	cmp	r3, #4
    6b0a:	d068      	beq.n	6bde <startTrngHW+0x11e>
    6b0c:	f1a3 0802 	sub.w	r8, r3, #2
    6b10:	fab8 f888 	clz	r8, r8
    6b14:	ea4f 1858 	mov.w	r8, r8, lsr #5
    6b18:	2301      	movs	r3, #1
    6b1a:	469c      	mov	ip, r3
    6b1c:	4a31      	ldr	r2, [pc, #196]	; (6be4 <startTrngHW+0x124>)
    6b1e:	4932      	ldr	r1, [pc, #200]	; (6be8 <startTrngHW+0x128>)
    6b20:	6013      	str	r3, [r2, #0]
    6b22:	4610      	mov	r0, r2
    6b24:	600b      	str	r3, [r1, #0]
    6b26:	3a94      	subs	r2, #148	; 0x94
    6b28:	f8c0 c000 	str.w	ip, [r0]
    6b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6b2e:	6013      	str	r3, [r2, #0]
    6b30:	6811      	ldr	r1, [r2, #0]
    6b32:	428b      	cmp	r3, r1
    6b34:	d1f8      	bne.n	6b28 <startTrngHW+0x68>
    6b36:	f04f 0900 	mov.w	r9, #0
    6b3a:	4b2c      	ldr	r3, [pc, #176]	; (6bec <startTrngHW+0x12c>)
    6b3c:	f04f 30ff 	mov.w	r0, #4294967295
    6b40:	f8c3 9000 	str.w	r9, [r3]
    6b44:	f7ff fe92 	bl	686c <CC_HalClearInterruptBit>
    6b48:	f06f 021b 	mvn.w	r2, #27
    6b4c:	4b28      	ldr	r3, [pc, #160]	; (6bf0 <startTrngHW+0x130>)
    6b4e:	4648      	mov	r0, r9
    6b50:	601a      	str	r2, [r3, #0]
    6b52:	f7ff fe99 	bl	6888 <CC_HalMaskInterrupt>
    6b56:	4a27      	ldr	r2, [pc, #156]	; (6bf4 <startTrngHW+0x134>)
    6b58:	4b27      	ldr	r3, [pc, #156]	; (6bf8 <startTrngHW+0x138>)
    6b5a:	f8c2 8000 	str.w	r8, [r2]
    6b5e:	6818      	ldr	r0, [r3, #0]
    6b60:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6b64:	f7ff fe90 	bl	6888 <CC_HalMaskInterrupt>
    6b68:	220a      	movs	r2, #10
    6b6a:	4b24      	ldr	r3, [pc, #144]	; (6bfc <startTrngHW+0x13c>)
    6b6c:	601a      	str	r2, [r3, #0]
    6b6e:	9a08      	ldr	r2, [sp, #32]
    6b70:	6923      	ldr	r3, [r4, #16]
    6b72:	2a01      	cmp	r2, #1
    6b74:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6b76:	d024      	beq.n	6bc2 <startTrngHW+0x102>
    6b78:	4a21      	ldr	r2, [pc, #132]	; (6c00 <startTrngHW+0x140>)
    6b7a:	fba2 2303 	umull	r2, r3, r2, r3
    6b7e:	091b      	lsrs	r3, r3, #4
    6b80:	2201      	movs	r2, #1
    6b82:	fb03 f301 	mul.w	r3, r3, r1
    6b86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6b8a:	491e      	ldr	r1, [pc, #120]	; (6c04 <startTrngHW+0x144>)
    6b8c:	03db      	lsls	r3, r3, #15
    6b8e:	099b      	lsrs	r3, r3, #6
    6b90:	600b      	str	r3, [r1, #0]
    6b92:	4b16      	ldr	r3, [pc, #88]	; (6bec <startTrngHW+0x12c>)
    6b94:	4638      	mov	r0, r7
    6b96:	601a      	str	r2, [r3, #0]
    6b98:	6833      	ldr	r3, [r6, #0]
    6b9a:	682a      	ldr	r2, [r5, #0]
    6b9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6ba0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    6ba4:	6033      	str	r3, [r6, #0]
    6ba6:	682a      	ldr	r2, [r5, #0]
    6ba8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6bac:	6033      	str	r3, [r6, #0]
    6bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6bb2:	4f15      	ldr	r7, [pc, #84]	; (6c08 <startTrngHW+0x148>)
    6bb4:	4638      	mov	r0, r7
    6bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6bba:	4f14      	ldr	r7, [pc, #80]	; (6c0c <startTrngHW+0x14c>)
    6bbc:	4638      	mov	r0, r7
    6bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6bc2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6bc6:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    6bca:	3201      	adds	r2, #1
    6bcc:	d002      	beq.n	6bd4 <startTrngHW+0x114>
    6bce:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    6bd2:	e7d1      	b.n	6b78 <startTrngHW+0xb8>
    6bd4:	2316      	movs	r3, #22
    6bd6:	e7d3      	b.n	6b80 <startTrngHW+0xc0>
    6bd8:	f04f 0803 	mov.w	r8, #3
    6bdc:	e79c      	b.n	6b18 <startTrngHW+0x58>
    6bde:	f04f 0802 	mov.w	r8, #2
    6be2:	e799      	b.n	6b18 <startTrngHW+0x58>
    6be4:	508411c4 	.word	0x508411c4
    6be8:	50841140 	.word	0x50841140
    6bec:	5084112c 	.word	0x5084112c
    6bf0:	50841100 	.word	0x50841100
    6bf4:	5084110c 	.word	0x5084110c
    6bf8:	50841a04 	.word	0x50841a04
    6bfc:	50841138 	.word	0x50841138
    6c00:	aaaaaaab 	.word	0xaaaaaaab
    6c04:	508411d8 	.word	0x508411d8
    6c08:	00f10c31 	.word	0x00f10c31
    6c0c:	00f10c35 	.word	0x00f10c35

00006c10 <LLF_RND_RepetitionCounterTest.part.0>:
    6c10:	b4f0      	push	{r4, r5, r6, r7}
    6c12:	2400      	movs	r4, #0
    6c14:	00c9      	lsls	r1, r1, #3
    6c16:	4626      	mov	r6, r4
    6c18:	4627      	mov	r7, r4
    6c1a:	f101 3cff 	add.w	ip, r1, #4294967295
    6c1e:	e006      	b.n	6c2e <LLF_RND_RepetitionCounterTest.part.0+0x1e>
    6c20:	429f      	cmp	r7, r3
    6c22:	d015      	beq.n	6c50 <LLF_RND_RepetitionCounterTest.part.0+0x40>
    6c24:	2601      	movs	r6, #1
    6c26:	4565      	cmp	r5, ip
    6c28:	d818      	bhi.n	6c5c <LLF_RND_RepetitionCounterTest.part.0+0x4c>
    6c2a:	462c      	mov	r4, r5
    6c2c:	461f      	mov	r7, r3
    6c2e:	0963      	lsrs	r3, r4, #5
    6c30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6c34:	f004 011f 	and.w	r1, r4, #31
    6c38:	40cb      	lsrs	r3, r1
    6c3a:	291f      	cmp	r1, #31
    6c3c:	f104 0501 	add.w	r5, r4, #1
    6c40:	bf18      	it	ne
    6c42:	f003 0301 	andne.w	r3, r3, #1
    6c46:	2c00      	cmp	r4, #0
    6c48:	d1ea      	bne.n	6c20 <LLF_RND_RepetitionCounterTest.part.0+0x10>
    6c4a:	2601      	movs	r6, #1
    6c4c:	4635      	mov	r5, r6
    6c4e:	e7ec      	b.n	6c2a <LLF_RND_RepetitionCounterTest.part.0+0x1a>
    6c50:	3601      	adds	r6, #1
    6c52:	4296      	cmp	r6, r2
    6c54:	d1e7      	bne.n	6c26 <LLF_RND_RepetitionCounterTest.part.0+0x16>
    6c56:	4803      	ldr	r0, [pc, #12]	; (6c64 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
    6c58:	bcf0      	pop	{r4, r5, r6, r7}
    6c5a:	4770      	bx	lr
    6c5c:	2000      	movs	r0, #0
    6c5e:	bcf0      	pop	{r4, r5, r6, r7}
    6c60:	4770      	bx	lr
    6c62:	bf00      	nop
    6c64:	00f10c36 	.word	0x00f10c36

00006c68 <LLF_RND_AdaptiveProportionTest>:
    6c68:	2800      	cmp	r0, #0
    6c6a:	d05f      	beq.n	6d2c <LLF_RND_AdaptiveProportionTest+0xc4>
    6c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c70:	1e4c      	subs	r4, r1, #1
    6c72:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    6c76:	d226      	bcs.n	6cc6 <LLF_RND_AdaptiveProportionTest+0x5e>
    6c78:	b32b      	cbz	r3, 6cc6 <LLF_RND_AdaptiveProportionTest+0x5e>
    6c7a:	b322      	cbz	r2, 6cc6 <LLF_RND_AdaptiveProportionTest+0x5e>
    6c7c:	00cc      	lsls	r4, r1, #3
    6c7e:	2b01      	cmp	r3, #1
    6c80:	f104 3eff 	add.w	lr, r4, #4294967295
    6c84:	d02f      	beq.n	6ce6 <LLF_RND_AdaptiveProportionTest+0x7e>
    6c86:	2100      	movs	r1, #0
    6c88:	468c      	mov	ip, r1
    6c8a:	460f      	mov	r7, r1
    6c8c:	460d      	mov	r5, r1
    6c8e:	f103 38ff 	add.w	r8, r3, #4294967295
    6c92:	094c      	lsrs	r4, r1, #5
    6c94:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    6c98:	f001 061f 	and.w	r6, r1, #31
    6c9c:	40f4      	lsrs	r4, r6
    6c9e:	2e1f      	cmp	r6, #31
    6ca0:	bf18      	it	ne
    6ca2:	f004 0401 	andne.w	r4, r4, #1
    6ca6:	b921      	cbnz	r1, 6cb2 <LLF_RND_AdaptiveProportionTest+0x4a>
    6ca8:	2501      	movs	r5, #1
    6caa:	46ac      	mov	ip, r5
    6cac:	4629      	mov	r1, r5
    6cae:	4627      	mov	r7, r4
    6cb0:	e7ef      	b.n	6c92 <LLF_RND_AdaptiveProportionTest+0x2a>
    6cb2:	42ab      	cmp	r3, r5
    6cb4:	d013      	beq.n	6cde <LLF_RND_AdaptiveProportionTest+0x76>
    6cb6:	42a7      	cmp	r7, r4
    6cb8:	d101      	bne.n	6cbe <LLF_RND_AdaptiveProportionTest+0x56>
    6cba:	f10c 0c01 	add.w	ip, ip, #1
    6cbe:	4545      	cmp	r5, r8
    6cc0:	d104      	bne.n	6ccc <LLF_RND_AdaptiveProportionTest+0x64>
    6cc2:	4562      	cmp	r2, ip
    6cc4:	d202      	bcs.n	6ccc <LLF_RND_AdaptiveProportionTest+0x64>
    6cc6:	481a      	ldr	r0, [pc, #104]	; (6d30 <LLF_RND_AdaptiveProportionTest+0xc8>)
    6cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ccc:	463c      	mov	r4, r7
    6cce:	3101      	adds	r1, #1
    6cd0:	458e      	cmp	lr, r1
    6cd2:	f105 0501 	add.w	r5, r5, #1
    6cd6:	d2ea      	bcs.n	6cae <LLF_RND_AdaptiveProportionTest+0x46>
    6cd8:	2000      	movs	r0, #0
    6cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cde:	2500      	movs	r5, #0
    6ce0:	f04f 0c01 	mov.w	ip, #1
    6ce4:	e7f3      	b.n	6cce <LLF_RND_AdaptiveProportionTest+0x66>
    6ce6:	2600      	movs	r6, #0
    6ce8:	46b4      	mov	ip, r6
    6cea:	4637      	mov	r7, r6
    6cec:	4631      	mov	r1, r6
    6cee:	094b      	lsrs	r3, r1, #5
    6cf0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6cf4:	f001 051f 	and.w	r5, r1, #31
    6cf8:	40eb      	lsrs	r3, r5
    6cfa:	2d1f      	cmp	r5, #31
    6cfc:	bf18      	it	ne
    6cfe:	f003 0301 	andne.w	r3, r3, #1
    6d02:	b139      	cbz	r1, 6d14 <LLF_RND_AdaptiveProportionTest+0xac>
    6d04:	b95f      	cbnz	r7, 6d1e <LLF_RND_AdaptiveProportionTest+0xb6>
    6d06:	459c      	cmp	ip, r3
    6d08:	d001      	beq.n	6d0e <LLF_RND_AdaptiveProportionTest+0xa6>
    6d0a:	4663      	mov	r3, ip
    6d0c:	e008      	b.n	6d20 <LLF_RND_AdaptiveProportionTest+0xb8>
    6d0e:	4663      	mov	r3, ip
    6d10:	3601      	adds	r6, #1
    6d12:	e005      	b.n	6d20 <LLF_RND_AdaptiveProportionTest+0xb8>
    6d14:	2601      	movs	r6, #1
    6d16:	4631      	mov	r1, r6
    6d18:	469c      	mov	ip, r3
    6d1a:	2701      	movs	r7, #1
    6d1c:	e7e7      	b.n	6cee <LLF_RND_AdaptiveProportionTest+0x86>
    6d1e:	463e      	mov	r6, r7
    6d20:	42b2      	cmp	r2, r6
    6d22:	d3d0      	bcc.n	6cc6 <LLF_RND_AdaptiveProportionTest+0x5e>
    6d24:	3101      	adds	r1, #1
    6d26:	42a1      	cmp	r1, r4
    6d28:	d1f6      	bne.n	6d18 <LLF_RND_AdaptiveProportionTest+0xb0>
    6d2a:	e7d5      	b.n	6cd8 <LLF_RND_AdaptiveProportionTest+0x70>
    6d2c:	4800      	ldr	r0, [pc, #0]	; (6d30 <LLF_RND_AdaptiveProportionTest+0xc8>)
    6d2e:	4770      	bx	lr
    6d30:	00f10c37 	.word	0x00f10c37

00006d34 <getTrngSource>:
    6d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d38:	b08d      	sub	sp, #52	; 0x34
    6d3a:	9e18      	ldr	r6, [sp, #96]	; 0x60
    6d3c:	4607      	mov	r7, r0
    6d3e:	460c      	mov	r4, r1
    6d40:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    6d42:	2e00      	cmp	r6, #0
    6d44:	d14c      	bne.n	6de0 <getTrngSource+0xac>
    6d46:	f8d1 b010 	ldr.w	fp, [r1, #16]
    6d4a:	2100      	movs	r1, #0
    6d4c:	601d      	str	r5, [r3, #0]
    6d4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6d50:	6019      	str	r1, [r3, #0]
    6d52:	2a00      	cmp	r2, #0
    6d54:	f000 8122 	beq.w	6f9c <getTrngSource+0x268>
    6d58:	4a9c      	ldr	r2, [pc, #624]	; (6fcc <getTrngSource+0x298>)
    6d5a:	4b9d      	ldr	r3, [pc, #628]	; (6fd0 <getTrngSource+0x29c>)
    6d5c:	6811      	ldr	r1, [r2, #0]
    6d5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6d60:	681b      	ldr	r3, [r3, #0]
    6d62:	429a      	cmp	r2, r3
    6d64:	d147      	bne.n	6df6 <getTrngSource+0xc2>
    6d66:	290a      	cmp	r1, #10
    6d68:	d145      	bne.n	6df6 <getTrngSource+0xc2>
    6d6a:	78fb      	ldrb	r3, [r7, #3]
    6d6c:	9304      	str	r3, [sp, #16]
    6d6e:	2304      	movs	r3, #4
    6d70:	46b8      	mov	r8, r7
    6d72:	9302      	str	r3, [sp, #8]
    6d74:	4b97      	ldr	r3, [pc, #604]	; (6fd4 <getTrngSource+0x2a0>)
    6d76:	fba3 230b 	umull	r2, r3, r3, fp
    6d7a:	ea4f 0a93 	mov.w	sl, r3, lsr #2
    6d7e:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    6d82:	f105 0208 	add.w	r2, r5, #8
    6d86:	9203      	str	r2, [sp, #12]
    6d88:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
    6d8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6d8e:	f8c3 b000 	str.w	fp, [r3]
    6d92:	f1bb 0f00 	cmp.w	fp, #0
    6d96:	f000 80c7 	beq.w	6f28 <getTrngSource+0x1f4>
    6d9a:	465d      	mov	r5, fp
    6d9c:	f04f 0900 	mov.w	r9, #0
    6da0:	9e03      	ldr	r6, [sp, #12]
    6da2:	f000 ff91 	bl	7cc8 <LLF_RND_TurnOffTrng>
    6da6:	2300      	movs	r3, #0
    6da8:	9305      	str	r3, [sp, #20]
    6daa:	f1b8 0f00 	cmp.w	r8, #0
    6dae:	f000 80e9 	beq.w	6f84 <getTrngSource+0x250>
    6db2:	2c00      	cmp	r4, #0
    6db4:	f000 80e6 	beq.w	6f84 <getTrngSource+0x250>
    6db8:	9b04      	ldr	r3, [sp, #16]
    6dba:	2b00      	cmp	r3, #0
    6dbc:	f000 80e0 	beq.w	6f80 <getTrngSource+0x24c>
    6dc0:	4620      	mov	r0, r4
    6dc2:	a904      	add	r1, sp, #16
    6dc4:	f000 ff70 	bl	7ca8 <LLF_RND_GetFastestRosc>
    6dc8:	b1b8      	cbz	r0, 6dfa <getTrngSource+0xc6>
    6dca:	4b83      	ldr	r3, [pc, #524]	; (6fd8 <getTrngSource+0x2a4>)
    6dcc:	4298      	cmp	r0, r3
    6dce:	f040 80ab 	bne.w	6f28 <getTrngSource+0x1f4>
    6dd2:	9002      	str	r0, [sp, #8]
    6dd4:	f000 ff78 	bl	7cc8 <LLF_RND_TurnOffTrng>
    6dd8:	9802      	ldr	r0, [sp, #8]
    6dda:	b00d      	add	sp, #52	; 0x34
    6ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6de0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    6de4:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    6de8:	3001      	adds	r0, #1
    6dea:	bf0c      	ite	eq
    6dec:	f44f 7b04 	moveq.w	fp, #528	; 0x210
    6df0:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
    6df4:	e7a9      	b.n	6d4a <getTrngSource+0x16>
    6df6:	4879      	ldr	r0, [pc, #484]	; (6fdc <getTrngSource+0x2a8>)
    6df8:	e7eb      	b.n	6dd2 <getTrngSource+0x9e>
    6dfa:	4621      	mov	r1, r4
    6dfc:	9804      	ldr	r0, [sp, #16]
    6dfe:	f000 ff35 	bl	7c6c <LLF_RND_GetRoscSampleCnt>
    6e02:	2800      	cmp	r0, #0
    6e04:	d1e1      	bne.n	6dca <getTrngSource+0x96>
    6e06:	9f04      	ldr	r7, [sp, #16]
    6e08:	2f08      	cmp	r7, #8
    6e0a:	f000 80bd 	beq.w	6f88 <getTrngSource+0x254>
    6e0e:	2f04      	cmp	r7, #4
    6e10:	f000 80bc 	beq.w	6f8c <getTrngSource+0x258>
    6e14:	f1a7 0702 	sub.w	r7, r7, #2
    6e18:	fab7 f787 	clz	r7, r7
    6e1c:	097f      	lsrs	r7, r7, #5
    6e1e:	2301      	movs	r3, #1
    6e20:	4619      	mov	r1, r3
    6e22:	486f      	ldr	r0, [pc, #444]	; (6fe0 <getTrngSource+0x2ac>)
    6e24:	6003      	str	r3, [r0, #0]
    6e26:	f840 3c84 	str.w	r3, [r0, #-132]
    6e2a:	4b6d      	ldr	r3, [pc, #436]	; (6fe0 <getTrngSource+0x2ac>)
    6e2c:	4868      	ldr	r0, [pc, #416]	; (6fd0 <getTrngSource+0x29c>)
    6e2e:	6019      	str	r1, [r3, #0]
    6e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e32:	6003      	str	r3, [r0, #0]
    6e34:	6800      	ldr	r0, [r0, #0]
    6e36:	4283      	cmp	r3, r0
    6e38:	d1f7      	bne.n	6e2a <getTrngSource+0xf6>
    6e3a:	2300      	movs	r3, #0
    6e3c:	4a69      	ldr	r2, [pc, #420]	; (6fe4 <getTrngSource+0x2b0>)
    6e3e:	f04f 30ff 	mov.w	r0, #4294967295
    6e42:	6013      	str	r3, [r2, #0]
    6e44:	f7ff fd12 	bl	686c <CC_HalClearInterruptBit>
    6e48:	2300      	movs	r3, #0
    6e4a:	f06f 011b 	mvn.w	r1, #27
    6e4e:	4618      	mov	r0, r3
    6e50:	4b65      	ldr	r3, [pc, #404]	; (6fe8 <getTrngSource+0x2b4>)
    6e52:	6019      	str	r1, [r3, #0]
    6e54:	f7ff fd18 	bl	6888 <CC_HalMaskInterrupt>
    6e58:	4964      	ldr	r1, [pc, #400]	; (6fec <getTrngSource+0x2b8>)
    6e5a:	4b65      	ldr	r3, [pc, #404]	; (6ff0 <getTrngSource+0x2bc>)
    6e5c:	600f      	str	r7, [r1, #0]
    6e5e:	6818      	ldr	r0, [r3, #0]
    6e60:	4f5c      	ldr	r7, [pc, #368]	; (6fd4 <getTrngSource+0x2a0>)
    6e62:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6e66:	f7ff fd0f 	bl	6888 <CC_HalMaskInterrupt>
    6e6a:	210a      	movs	r1, #10
    6e6c:	2201      	movs	r2, #1
    6e6e:	4b57      	ldr	r3, [pc, #348]	; (6fcc <getTrngSource+0x298>)
    6e70:	4860      	ldr	r0, [pc, #384]	; (6ff4 <getTrngSource+0x2c0>)
    6e72:	6019      	str	r1, [r3, #0]
    6e74:	6921      	ldr	r1, [r4, #16]
    6e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e78:	fba7 c101 	umull	ip, r1, r7, r1
    6e7c:	0909      	lsrs	r1, r1, #4
    6e7e:	fb03 f301 	mul.w	r3, r3, r1
    6e82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6e86:	03db      	lsls	r3, r3, #15
    6e88:	099b      	lsrs	r3, r3, #6
    6e8a:	6003      	str	r3, [r0, #0]
    6e8c:	4b55      	ldr	r3, [pc, #340]	; (6fe4 <getTrngSource+0x2b0>)
    6e8e:	a805      	add	r0, sp, #20
    6e90:	601a      	str	r2, [r3, #0]
    6e92:	9904      	ldr	r1, [sp, #16]
    6e94:	f8d8 2000 	ldr.w	r2, [r8]
    6e98:	020b      	lsls	r3, r1, #8
    6e9a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    6e9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6ea2:	4313      	orrs	r3, r2
    6ea4:	f8c8 3000 	str.w	r3, [r8]
    6ea8:	f000 fed0 	bl	7c4c <LLF_RND_WaitRngInterrupt>
    6eac:	9b05      	ldr	r3, [sp, #20]
    6eae:	f003 031a 	and.w	r3, r3, #26
    6eb2:	4303      	orrs	r3, r0
    6eb4:	d138      	bne.n	6f28 <getTrngSource+0x1f4>
    6eb6:	4b50      	ldr	r3, [pc, #320]	; (6ff8 <getTrngSource+0x2c4>)
    6eb8:	fba7 2705 	umull	r2, r7, r7, r5
    6ebc:	681a      	ldr	r2, [r3, #0]
    6ebe:	3314      	adds	r3, #20
    6ec0:	9206      	str	r2, [sp, #24]
    6ec2:	f853 2c10 	ldr.w	r2, [r3, #-16]
    6ec6:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    6eca:	9207      	str	r2, [sp, #28]
    6ecc:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    6ed0:	9208      	str	r2, [sp, #32]
    6ed2:	f853 2c08 	ldr.w	r2, [r3, #-8]
    6ed6:	9209      	str	r2, [sp, #36]	; 0x24
    6ed8:	f853 2c04 	ldr.w	r2, [r3, #-4]
    6edc:	920a      	str	r2, [sp, #40]	; 0x28
    6ede:	681b      	ldr	r3, [r3, #0]
    6ee0:	930b      	str	r3, [sp, #44]	; 0x2c
    6ee2:	d102      	bne.n	6eea <getTrngSource+0x1b6>
    6ee4:	f1ba 0f00 	cmp.w	sl, #0
    6ee8:	d141      	bne.n	6f6e <getTrngSource+0x23a>
    6eea:	2218      	movs	r2, #24
    6eec:	4630      	mov	r0, r6
    6eee:	eb0d 0102 	add.w	r1, sp, r2
    6ef2:	f000 fe1b 	bl	7b2c <CC_PalMemCopyPlat>
    6ef6:	3d18      	subs	r5, #24
    6ef8:	3618      	adds	r6, #24
    6efa:	f109 0901 	add.w	r9, r9, #1
    6efe:	2d00      	cmp	r5, #0
    6f00:	f47f af4f 	bne.w	6da2 <getTrngSource+0x6e>
    6f04:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
    6f08:	d85d      	bhi.n	6fc6 <getTrngSource+0x292>
    6f0a:	9d03      	ldr	r5, [sp, #12]
    6f0c:	4659      	mov	r1, fp
    6f0e:	4628      	mov	r0, r5
    6f10:	6962      	ldr	r2, [r4, #20]
    6f12:	f7ff fe7d 	bl	6c10 <LLF_RND_RepetitionCounterTest.part.0>
    6f16:	2800      	cmp	r0, #0
    6f18:	d04b      	beq.n	6fb2 <getTrngSource+0x27e>
    6f1a:	2300      	movs	r3, #0
    6f1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6f1e:	6013      	str	r3, [r2, #0]
    6f20:	4b2d      	ldr	r3, [pc, #180]	; (6fd8 <getTrngSource+0x2a4>)
    6f22:	4298      	cmp	r0, r3
    6f24:	f43f af55 	beq.w	6dd2 <getTrngSource+0x9e>
    6f28:	9d04      	ldr	r5, [sp, #16]
    6f2a:	2d08      	cmp	r5, #8
    6f2c:	d034      	beq.n	6f98 <getTrngSource+0x264>
    6f2e:	2200      	movs	r2, #0
    6f30:	ab04      	add	r3, sp, #16
    6f32:	4621      	mov	r1, r4
    6f34:	4640      	mov	r0, r8
    6f36:	006d      	lsls	r5, r5, #1
    6f38:	9200      	str	r2, [sp, #0]
    6f3a:	9504      	str	r5, [sp, #16]
    6f3c:	f7ff fdc0 	bl	6ac0 <startTrngHW>
    6f40:	4b2e      	ldr	r3, [pc, #184]	; (6ffc <getTrngSource+0x2c8>)
    6f42:	4298      	cmp	r0, r3
    6f44:	d024      	beq.n	6f90 <getTrngSource+0x25c>
    6f46:	2800      	cmp	r0, #0
    6f48:	f47f af43 	bne.w	6dd2 <getTrngSource+0x9e>
    6f4c:	f8d8 2000 	ldr.w	r2, [r8]
    6f50:	0a13      	lsrs	r3, r2, #8
    6f52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    6f56:	4313      	orrs	r3, r2
    6f58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6f5c:	f8c8 3000 	str.w	r3, [r8]
    6f60:	9b02      	ldr	r3, [sp, #8]
    6f62:	3b01      	subs	r3, #1
    6f64:	9302      	str	r3, [sp, #8]
    6f66:	f47f af11 	bne.w	6d8c <getTrngSource+0x58>
    6f6a:	2000      	movs	r0, #0
    6f6c:	e731      	b.n	6dd2 <getTrngSource+0x9e>
    6f6e:	4630      	mov	r0, r6
    6f70:	4652      	mov	r2, sl
    6f72:	a906      	add	r1, sp, #24
    6f74:	f000 fdda 	bl	7b2c <CC_PalMemCopyPlat>
    6f78:	eba5 050a 	sub.w	r5, r5, sl
    6f7c:	4456      	add	r6, sl
    6f7e:	e7bc      	b.n	6efa <getTrngSource+0x1c6>
    6f80:	481e      	ldr	r0, [pc, #120]	; (6ffc <getTrngSource+0x2c8>)
    6f82:	e722      	b.n	6dca <getTrngSource+0x96>
    6f84:	481e      	ldr	r0, [pc, #120]	; (7000 <getTrngSource+0x2cc>)
    6f86:	e720      	b.n	6dca <getTrngSource+0x96>
    6f88:	2703      	movs	r7, #3
    6f8a:	e748      	b.n	6e1e <getTrngSource+0xea>
    6f8c:	2702      	movs	r7, #2
    6f8e:	e746      	b.n	6e1e <getTrngSource+0xea>
    6f90:	6a23      	ldr	r3, [r4, #32]
    6f92:	2b00      	cmp	r3, #0
    6f94:	f43f af1d 	beq.w	6dd2 <getTrngSource+0x9e>
    6f98:	481a      	ldr	r0, [pc, #104]	; (7004 <getTrngSource+0x2d0>)
    6f9a:	e71a      	b.n	6dd2 <getTrngSource+0x9e>
    6f9c:	2201      	movs	r2, #1
    6f9e:	4621      	mov	r1, r4
    6fa0:	4638      	mov	r0, r7
    6fa2:	9600      	str	r6, [sp, #0]
    6fa4:	ab04      	add	r3, sp, #16
    6fa6:	f7ff fd8b 	bl	6ac0 <startTrngHW>
    6faa:	2800      	cmp	r0, #0
    6fac:	f43f aedf 	beq.w	6d6e <getTrngSource+0x3a>
    6fb0:	e70f      	b.n	6dd2 <getTrngSource+0x9e>
    6fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6fb6:	4659      	mov	r1, fp
    6fb8:	4628      	mov	r0, r5
    6fba:	69a2      	ldr	r2, [r4, #24]
    6fbc:	f7ff fe54 	bl	6c68 <LLF_RND_AdaptiveProportionTest>
    6fc0:	2800      	cmp	r0, #0
    6fc2:	d1aa      	bne.n	6f1a <getTrngSource+0x1e6>
    6fc4:	e7d1      	b.n	6f6a <getTrngSource+0x236>
    6fc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6fc8:	601d      	str	r5, [r3, #0]
    6fca:	e7ad      	b.n	6f28 <getTrngSource+0x1f4>
    6fcc:	50841138 	.word	0x50841138
    6fd0:	50841130 	.word	0x50841130
    6fd4:	aaaaaaab 	.word	0xaaaaaaab
    6fd8:	00f10c02 	.word	0x00f10c02
    6fdc:	00f10c30 	.word	0x00f10c30
    6fe0:	508411c4 	.word	0x508411c4
    6fe4:	5084112c 	.word	0x5084112c
    6fe8:	50841100 	.word	0x50841100
    6fec:	5084110c 	.word	0x5084110c
    6ff0:	50841a04 	.word	0x50841a04
    6ff4:	508411d8 	.word	0x508411d8
    6ff8:	50841114 	.word	0x50841114
    6ffc:	00f10c31 	.word	0x00f10c31
    7000:	00f10c35 	.word	0x00f10c35
    7004:	00f10c32 	.word	0x00f10c32

00007008 <LLF_RND_GetTrngSource>:
    7008:	2300      	movs	r3, #0
    700a:	b430      	push	{r4, r5}
    700c:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
    7010:	9304      	str	r3, [sp, #16]
    7012:	9b02      	ldr	r3, [sp, #8]
    7014:	e9cd 4502 	strd	r4, r5, [sp, #8]
    7018:	bc30      	pop	{r4, r5}
    701a:	f7ff be8b 	b.w	6d34 <getTrngSource>
    701e:	bf00      	nop

00007020 <LLF_RND_RunTrngStartupTest>:
    7020:	b510      	push	{r4, lr}
    7022:	2401      	movs	r4, #1
    7024:	b086      	sub	sp, #24
    7026:	ab05      	add	r3, sp, #20
    7028:	e9cd 2401 	strd	r2, r4, [sp, #4]
    702c:	9300      	str	r3, [sp, #0]
    702e:	2200      	movs	r2, #0
    7030:	ab04      	add	r3, sp, #16
    7032:	f7ff fe7f 	bl	6d34 <getTrngSource>
    7036:	b006      	add	sp, #24
    7038:	bd10      	pop	{r4, pc}
    703a:	bf00      	nop

0000703c <mbedtls_platform_zeroize>:
    703c:	b138      	cbz	r0, 704e <mbedtls_platform_zeroize+0x12>
    703e:	b131      	cbz	r1, 704e <mbedtls_platform_zeroize+0x12>
    7040:	2200      	movs	r2, #0
    7042:	4401      	add	r1, r0
    7044:	4603      	mov	r3, r0
    7046:	3001      	adds	r0, #1
    7048:	4281      	cmp	r1, r0
    704a:	701a      	strb	r2, [r3, #0]
    704c:	d1fa      	bne.n	7044 <mbedtls_platform_zeroize+0x8>
    704e:	4770      	bx	lr

00007050 <mbedtls_hardware_poll>:
    7050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7054:	b088      	sub	sp, #32
    7056:	9205      	str	r2, [sp, #20]
    7058:	2900      	cmp	r1, #0
    705a:	d068      	beq.n	712e <mbedtls_hardware_poll+0xde>
    705c:	461c      	mov	r4, r3
    705e:	2b00      	cmp	r3, #0
    7060:	d065      	beq.n	712e <mbedtls_hardware_poll+0xde>
    7062:	4615      	mov	r5, r2
    7064:	2a00      	cmp	r2, #0
    7066:	d062      	beq.n	712e <mbedtls_hardware_poll+0xde>
    7068:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 7150 <mbedtls_hardware_poll+0x100>
    706c:	460e      	mov	r6, r1
    706e:	f8d8 0000 	ldr.w	r0, [r8]
    7072:	f04f 31ff 	mov.w	r1, #4294967295
    7076:	f7ff fc9f 	bl	69b8 <CC_PalMutexLock>
    707a:	2800      	cmp	r0, #0
    707c:	d14c      	bne.n	7118 <mbedtls_hardware_poll+0xc8>
    707e:	2000      	movs	r0, #0
    7080:	f7ff fcca 	bl	6a18 <CC_PalPowerSaveModeSelect>
    7084:	2800      	cmp	r0, #0
    7086:	d143      	bne.n	7110 <mbedtls_hardware_poll+0xc0>
    7088:	482a      	ldr	r0, [pc, #168]	; (7134 <mbedtls_hardware_poll+0xe4>)
    708a:	f000 fd11 	bl	7ab0 <RNG_PLAT_SetUserRngParameters>
    708e:	b1e8      	cbz	r0, 70cc <mbedtls_hardware_poll+0x7c>
    7090:	2001      	movs	r0, #1
    7092:	f04f 37ff 	mov.w	r7, #4294967295
    7096:	f7ff fcbf 	bl	6a18 <CC_PalPowerSaveModeSelect>
    709a:	2800      	cmp	r0, #0
    709c:	d134      	bne.n	7108 <mbedtls_hardware_poll+0xb8>
    709e:	f44f 7108 	mov.w	r1, #544	; 0x220
    70a2:	4825      	ldr	r0, [pc, #148]	; (7138 <mbedtls_hardware_poll+0xe8>)
    70a4:	f7ff ffca 	bl	703c <mbedtls_platform_zeroize>
    70a8:	2104      	movs	r1, #4
    70aa:	4824      	ldr	r0, [pc, #144]	; (713c <mbedtls_hardware_poll+0xec>)
    70ac:	f7ff ffc6 	bl	703c <mbedtls_platform_zeroize>
    70b0:	4820      	ldr	r0, [pc, #128]	; (7134 <mbedtls_hardware_poll+0xe4>)
    70b2:	2128      	movs	r1, #40	; 0x28
    70b4:	f7ff ffc2 	bl	703c <mbedtls_platform_zeroize>
    70b8:	f8d8 0000 	ldr.w	r0, [r8]
    70bc:	f7ff fc84 	bl	69c8 <CC_PalMutexUnlock>
    70c0:	2800      	cmp	r0, #0
    70c2:	d12d      	bne.n	7120 <mbedtls_hardware_poll+0xd0>
    70c4:	4638      	mov	r0, r7
    70c6:	b008      	add	sp, #32
    70c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70cc:	491a      	ldr	r1, [pc, #104]	; (7138 <mbedtls_hardware_poll+0xe8>)
    70ce:	ab07      	add	r3, sp, #28
    70d0:	4602      	mov	r2, r0
    70d2:	9003      	str	r0, [sp, #12]
    70d4:	9102      	str	r1, [sp, #8]
    70d6:	9300      	str	r3, [sp, #0]
    70d8:	4916      	ldr	r1, [pc, #88]	; (7134 <mbedtls_hardware_poll+0xe4>)
    70da:	4818      	ldr	r0, [pc, #96]	; (713c <mbedtls_hardware_poll+0xec>)
    70dc:	9401      	str	r4, [sp, #4]
    70de:	ab05      	add	r3, sp, #20
    70e0:	f7ff ff92 	bl	7008 <LLF_RND_GetTrngSource>
    70e4:	2800      	cmp	r0, #0
    70e6:	d1d3      	bne.n	7090 <mbedtls_hardware_poll+0x40>
    70e8:	6823      	ldr	r3, [r4, #0]
    70ea:	42ab      	cmp	r3, r5
    70ec:	d3d0      	bcc.n	7090 <mbedtls_hardware_poll+0x40>
    70ee:	9907      	ldr	r1, [sp, #28]
    70f0:	4607      	mov	r7, r0
    70f2:	462a      	mov	r2, r5
    70f4:	4630      	mov	r0, r6
    70f6:	3108      	adds	r1, #8
    70f8:	f000 fd18 	bl	7b2c <CC_PalMemCopyPlat>
    70fc:	2001      	movs	r0, #1
    70fe:	6025      	str	r5, [r4, #0]
    7100:	f7ff fc8a 	bl	6a18 <CC_PalPowerSaveModeSelect>
    7104:	2800      	cmp	r0, #0
    7106:	d0ca      	beq.n	709e <mbedtls_hardware_poll+0x4e>
    7108:	480d      	ldr	r0, [pc, #52]	; (7140 <mbedtls_hardware_poll+0xf0>)
    710a:	f7ff f8e5 	bl	62d8 <CC_PalAbort>
    710e:	e7c6      	b.n	709e <mbedtls_hardware_poll+0x4e>
    7110:	480c      	ldr	r0, [pc, #48]	; (7144 <mbedtls_hardware_poll+0xf4>)
    7112:	f7ff f8e1 	bl	62d8 <CC_PalAbort>
    7116:	e7b7      	b.n	7088 <mbedtls_hardware_poll+0x38>
    7118:	480b      	ldr	r0, [pc, #44]	; (7148 <mbedtls_hardware_poll+0xf8>)
    711a:	f7ff f8dd 	bl	62d8 <CC_PalAbort>
    711e:	e7ae      	b.n	707e <mbedtls_hardware_poll+0x2e>
    7120:	480a      	ldr	r0, [pc, #40]	; (714c <mbedtls_hardware_poll+0xfc>)
    7122:	f7ff f8d9 	bl	62d8 <CC_PalAbort>
    7126:	4638      	mov	r0, r7
    7128:	b008      	add	sp, #32
    712a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    712e:	f04f 37ff 	mov.w	r7, #4294967295
    7132:	e7c7      	b.n	70c4 <mbedtls_hardware_poll+0x74>
    7134:	2000135c 	.word	0x2000135c
    7138:	2000113c 	.word	0x2000113c
    713c:	20001138 	.word	0x20001138
    7140:	00009a88 	.word	0x00009a88
    7144:	00009a68 	.word	0x00009a68
    7148:	00009a50 	.word	0x00009a50
    714c:	00009ae0 	.word	0x00009ae0
    7150:	200000f0 	.word	0x200000f0

00007154 <cc_mbedtls_sha256_init>:
    7154:	b510      	push	{r4, lr}
    7156:	4604      	mov	r4, r0
    7158:	b128      	cbz	r0, 7166 <cc_mbedtls_sha256_init+0x12>
    715a:	4620      	mov	r0, r4
    715c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7160:	21f0      	movs	r1, #240	; 0xf0
    7162:	f000 bce7 	b.w	7b34 <CC_PalMemSetZeroPlat>
    7166:	4804      	ldr	r0, [pc, #16]	; (7178 <cc_mbedtls_sha256_init+0x24>)
    7168:	f7ff f8b6 	bl	62d8 <CC_PalAbort>
    716c:	4620      	mov	r0, r4
    716e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7172:	21f0      	movs	r1, #240	; 0xf0
    7174:	f000 bcde 	b.w	7b34 <CC_PalMemSetZeroPlat>
    7178:	00009af8 	.word	0x00009af8

0000717c <cc_mbedtls_sha256_free>:
    717c:	b110      	cbz	r0, 7184 <cc_mbedtls_sha256_free+0x8>
    717e:	21f0      	movs	r1, #240	; 0xf0
    7180:	f7ff bf5c 	b.w	703c <mbedtls_platform_zeroize>
    7184:	4770      	bx	lr
    7186:	bf00      	nop

00007188 <cc_mbedtls_sha256_starts_ret>:
    7188:	b508      	push	{r3, lr}
    718a:	b161      	cbz	r1, 71a6 <cc_mbedtls_sha256_starts_ret+0x1e>
    718c:	2901      	cmp	r1, #1
    718e:	d107      	bne.n	71a0 <cc_mbedtls_sha256_starts_ret+0x18>
    7190:	2102      	movs	r1, #2
    7192:	f000 f839 	bl	7208 <mbedtls_sha_starts_internal>
    7196:	2800      	cmp	r0, #0
    7198:	bf18      	it	ne
    719a:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    719e:	bd08      	pop	{r3, pc}
    71a0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    71a4:	bd08      	pop	{r3, pc}
    71a6:	2101      	movs	r1, #1
    71a8:	f000 f82e 	bl	7208 <mbedtls_sha_starts_internal>
    71ac:	e7f3      	b.n	7196 <cc_mbedtls_sha256_starts_ret+0xe>
    71ae:	bf00      	nop

000071b0 <cc_mbedtls_sha256_update_ret>:
    71b0:	b508      	push	{r3, lr}
    71b2:	f000 f86b 	bl	728c <mbedtls_sha_update_internal>
    71b6:	2800      	cmp	r0, #0
    71b8:	bf18      	it	ne
    71ba:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    71be:	bd08      	pop	{r3, pc}

000071c0 <cc_mbedtls_sha256_finish_ret>:
    71c0:	b570      	push	{r4, r5, r6, lr}
    71c2:	b1e8      	cbz	r0, 7200 <cc_mbedtls_sha256_finish_ret+0x40>
    71c4:	460e      	mov	r6, r1
    71c6:	b1d9      	cbz	r1, 7200 <cc_mbedtls_sha256_finish_ret+0x40>
    71c8:	4604      	mov	r4, r0
    71ca:	f000 f831 	bl	7230 <mbedtls_sha_finish_internal>
    71ce:	4605      	mov	r5, r0
    71d0:	b9b0      	cbnz	r0, 7200 <cc_mbedtls_sha256_finish_ret+0x40>
    71d2:	6823      	ldr	r3, [r4, #0]
    71d4:	2b01      	cmp	r3, #1
    71d6:	d00b      	beq.n	71f0 <cc_mbedtls_sha256_finish_ret+0x30>
    71d8:	2b02      	cmp	r3, #2
    71da:	d001      	beq.n	71e0 <cc_mbedtls_sha256_finish_ret+0x20>
    71dc:	4628      	mov	r0, r5
    71de:	bd70      	pop	{r4, r5, r6, pc}
    71e0:	4630      	mov	r0, r6
    71e2:	221c      	movs	r2, #28
    71e4:	f104 0108 	add.w	r1, r4, #8
    71e8:	f000 fca0 	bl	7b2c <CC_PalMemCopyPlat>
    71ec:	4628      	mov	r0, r5
    71ee:	bd70      	pop	{r4, r5, r6, pc}
    71f0:	4630      	mov	r0, r6
    71f2:	2220      	movs	r2, #32
    71f4:	f104 0108 	add.w	r1, r4, #8
    71f8:	f000 fc98 	bl	7b2c <CC_PalMemCopyPlat>
    71fc:	4628      	mov	r0, r5
    71fe:	bd70      	pop	{r4, r5, r6, pc}
    7200:	f06f 0536 	mvn.w	r5, #54	; 0x36
    7204:	e7ea      	b.n	71dc <cc_mbedtls_sha256_finish_ret+0x1c>
    7206:	bf00      	nop

00007208 <mbedtls_sha_starts_internal>:
    7208:	b178      	cbz	r0, 722a <mbedtls_sha_starts_internal+0x22>
    720a:	b538      	push	{r3, r4, r5, lr}
    720c:	460d      	mov	r5, r1
    720e:	21f0      	movs	r1, #240	; 0xf0
    7210:	4604      	mov	r4, r0
    7212:	f000 fc8f 	bl	7b34 <CC_PalMemSetZeroPlat>
    7216:	2340      	movs	r3, #64	; 0x40
    7218:	4620      	mov	r0, r4
    721a:	6025      	str	r5, [r4, #0]
    721c:	65e3      	str	r3, [r4, #92]	; 0x5c
    721e:	f000 fd99 	bl	7d54 <InitHashDrv>
    7222:	3800      	subs	r0, #0
    7224:	bf18      	it	ne
    7226:	2001      	movne	r0, #1
    7228:	bd38      	pop	{r3, r4, r5, pc}
    722a:	2001      	movs	r0, #1
    722c:	4770      	bx	lr
    722e:	bf00      	nop

00007230 <mbedtls_sha_finish_internal>:
    7230:	b570      	push	{r4, r5, r6, lr}
    7232:	6e05      	ldr	r5, [r0, #96]	; 0x60
    7234:	b0a4      	sub	sp, #144	; 0x90
    7236:	4604      	mov	r4, r0
    7238:	ae04      	add	r6, sp, #16
    723a:	b9e5      	cbnz	r5, 7276 <mbedtls_sha_finish_internal+0x46>
    723c:	2201      	movs	r2, #1
    723e:	2300      	movs	r3, #0
    7240:	6062      	str	r2, [r4, #4]
    7242:	4630      	mov	r0, r6
    7244:	4629      	mov	r1, r5
    7246:	e9cd 3300 	strd	r3, r3, [sp]
    724a:	aa02      	add	r2, sp, #8
    724c:	f000 fd4a 	bl	7ce4 <SetDataBuffersInfo>
    7250:	b110      	cbz	r0, 7258 <mbedtls_sha_finish_internal+0x28>
    7252:	2001      	movs	r0, #1
    7254:	b024      	add	sp, #144	; 0x90
    7256:	bd70      	pop	{r4, r5, r6, pc}
    7258:	462a      	mov	r2, r5
    725a:	4620      	mov	r0, r4
    725c:	a902      	add	r1, sp, #8
    725e:	f000 fda3 	bl	7da8 <ProcessHashDrv>
    7262:	2800      	cmp	r0, #0
    7264:	d1f5      	bne.n	7252 <mbedtls_sha_finish_internal+0x22>
    7266:	4620      	mov	r0, r4
    7268:	f000 fec8 	bl	7ffc <FinishHashDrv>
    726c:	2800      	cmp	r0, #0
    726e:	d1f0      	bne.n	7252 <mbedtls_sha_finish_internal+0x22>
    7270:	6620      	str	r0, [r4, #96]	; 0x60
    7272:	b024      	add	sp, #144	; 0x90
    7274:	bd70      	pop	{r4, r5, r6, pc}
    7276:	2d80      	cmp	r5, #128	; 0x80
    7278:	462a      	mov	r2, r5
    727a:	4630      	mov	r0, r6
    727c:	bf28      	it	cs
    727e:	2280      	movcs	r2, #128	; 0x80
    7280:	f104 0164 	add.w	r1, r4, #100	; 0x64
    7284:	f000 fc52 	bl	7b2c <CC_PalMemCopyPlat>
    7288:	6e25      	ldr	r5, [r4, #96]	; 0x60
    728a:	e7d7      	b.n	723c <mbedtls_sha_finish_internal+0xc>

0000728c <mbedtls_sha_update_internal>:
    728c:	2800      	cmp	r0, #0
    728e:	d055      	beq.n	733c <mbedtls_sha_update_internal+0xb0>
    7290:	b5f0      	push	{r4, r5, r6, r7, lr}
    7292:	4615      	mov	r5, r2
    7294:	b0a5      	sub	sp, #148	; 0x94
    7296:	b1b2      	cbz	r2, 72c6 <mbedtls_sha_update_internal+0x3a>
    7298:	460e      	mov	r6, r1
    729a:	b351      	cbz	r1, 72f2 <mbedtls_sha_update_internal+0x66>
    729c:	4604      	mov	r4, r0
    729e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
    72a2:	1a1a      	subs	r2, r3, r0
    72a4:	fbb2 f7f3 	udiv	r7, r2, r3
    72a8:	fb03 2717 	mls	r7, r3, r7, r2
    72ac:	42af      	cmp	r7, r5
    72ae:	bf28      	it	cs
    72b0:	462f      	movcs	r7, r5
    72b2:	2f00      	cmp	r7, #0
    72b4:	d144      	bne.n	7340 <mbedtls_sha_update_internal+0xb4>
    72b6:	4283      	cmp	r3, r0
    72b8:	d008      	beq.n	72cc <mbedtls_sha_update_internal+0x40>
    72ba:	fbb5 f7f3 	udiv	r7, r5, r3
    72be:	fb03 f707 	mul.w	r7, r3, r7
    72c2:	b9cf      	cbnz	r7, 72f8 <mbedtls_sha_update_internal+0x6c>
    72c4:	bb6d      	cbnz	r5, 7322 <mbedtls_sha_update_internal+0x96>
    72c6:	4628      	mov	r0, r5
    72c8:	b025      	add	sp, #148	; 0x94
    72ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72cc:	2b80      	cmp	r3, #128	; 0x80
    72ce:	bf28      	it	cs
    72d0:	2380      	movcs	r3, #128	; 0x80
    72d2:	f104 0164 	add.w	r1, r4, #100	; 0x64
    72d6:	461a      	mov	r2, r3
    72d8:	a804      	add	r0, sp, #16
    72da:	f000 fc27 	bl	7b2c <CC_PalMemCopyPlat>
    72de:	2300      	movs	r3, #0
    72e0:	e9cd 3300 	strd	r3, r3, [sp]
    72e4:	a804      	add	r0, sp, #16
    72e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    72e8:	aa02      	add	r2, sp, #8
    72ea:	f000 fcfb 	bl	7ce4 <SetDataBuffersInfo>
    72ee:	2800      	cmp	r0, #0
    72f0:	d033      	beq.n	735a <mbedtls_sha_update_internal+0xce>
    72f2:	2001      	movs	r0, #1
    72f4:	b025      	add	sp, #148	; 0x94
    72f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72f8:	2300      	movs	r3, #0
    72fa:	4639      	mov	r1, r7
    72fc:	4630      	mov	r0, r6
    72fe:	e9cd 3300 	strd	r3, r3, [sp]
    7302:	aa02      	add	r2, sp, #8
    7304:	f000 fcee 	bl	7ce4 <SetDataBuffersInfo>
    7308:	2800      	cmp	r0, #0
    730a:	d1f2      	bne.n	72f2 <mbedtls_sha_update_internal+0x66>
    730c:	463a      	mov	r2, r7
    730e:	4620      	mov	r0, r4
    7310:	a902      	add	r1, sp, #8
    7312:	f000 fd49 	bl	7da8 <ProcessHashDrv>
    7316:	2800      	cmp	r0, #0
    7318:	d1eb      	bne.n	72f2 <mbedtls_sha_update_internal+0x66>
    731a:	1bed      	subs	r5, r5, r7
    731c:	443e      	add	r6, r7
    731e:	2d00      	cmp	r5, #0
    7320:	d0d1      	beq.n	72c6 <mbedtls_sha_update_internal+0x3a>
    7322:	6e20      	ldr	r0, [r4, #96]	; 0x60
    7324:	462a      	mov	r2, r5
    7326:	3019      	adds	r0, #25
    7328:	4631      	mov	r1, r6
    732a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    732e:	f000 fbfd 	bl	7b2c <CC_PalMemCopyPlat>
    7332:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7334:	2000      	movs	r0, #0
    7336:	442a      	add	r2, r5
    7338:	6622      	str	r2, [r4, #96]	; 0x60
    733a:	e7c5      	b.n	72c8 <mbedtls_sha_update_internal+0x3c>
    733c:	2001      	movs	r0, #1
    733e:	4770      	bx	lr
    7340:	f104 0364 	add.w	r3, r4, #100	; 0x64
    7344:	4418      	add	r0, r3
    7346:	463a      	mov	r2, r7
    7348:	f000 fbf0 	bl	7b2c <CC_PalMemCopyPlat>
    734c:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
    7350:	4438      	add	r0, r7
    7352:	443e      	add	r6, r7
    7354:	1bed      	subs	r5, r5, r7
    7356:	6620      	str	r0, [r4, #96]	; 0x60
    7358:	e7ad      	b.n	72b6 <mbedtls_sha_update_internal+0x2a>
    735a:	4620      	mov	r0, r4
    735c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    735e:	a902      	add	r1, sp, #8
    7360:	f000 fd22 	bl	7da8 <ProcessHashDrv>
    7364:	2800      	cmp	r0, #0
    7366:	d1c4      	bne.n	72f2 <mbedtls_sha_update_internal+0x66>
    7368:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    736a:	6620      	str	r0, [r4, #96]	; 0x60
    736c:	e7a5      	b.n	72ba <mbedtls_sha_update_internal+0x2e>
    736e:	bf00      	nop

00007370 <ctr_drbg_update_internal>:
    7370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7374:	2220      	movs	r2, #32
    7376:	4604      	mov	r4, r0
    7378:	b088      	sub	sp, #32
    737a:	460d      	mov	r5, r1
    737c:	4668      	mov	r0, sp
    737e:	2100      	movs	r1, #0
    7380:	18a6      	adds	r6, r4, r2
    7382:	466f      	mov	r7, sp
    7384:	f001 feab 	bl	90de <memset>
    7388:	7be2      	ldrb	r2, [r4, #15]
    738a:	3201      	adds	r2, #1
    738c:	b2d2      	uxtb	r2, r2
    738e:	73e2      	strb	r2, [r4, #15]
    7390:	2a00      	cmp	r2, #0
    7392:	d14d      	bne.n	7430 <ctr_drbg_update_internal+0xc0>
    7394:	7ba2      	ldrb	r2, [r4, #14]
    7396:	3201      	adds	r2, #1
    7398:	b2d2      	uxtb	r2, r2
    739a:	73a2      	strb	r2, [r4, #14]
    739c:	2a00      	cmp	r2, #0
    739e:	d147      	bne.n	7430 <ctr_drbg_update_internal+0xc0>
    73a0:	7b63      	ldrb	r3, [r4, #13]
    73a2:	3301      	adds	r3, #1
    73a4:	b2db      	uxtb	r3, r3
    73a6:	7363      	strb	r3, [r4, #13]
    73a8:	2b00      	cmp	r3, #0
    73aa:	d141      	bne.n	7430 <ctr_drbg_update_internal+0xc0>
    73ac:	7b23      	ldrb	r3, [r4, #12]
    73ae:	3301      	adds	r3, #1
    73b0:	b2db      	uxtb	r3, r3
    73b2:	7323      	strb	r3, [r4, #12]
    73b4:	2b00      	cmp	r3, #0
    73b6:	d13b      	bne.n	7430 <ctr_drbg_update_internal+0xc0>
    73b8:	7ae3      	ldrb	r3, [r4, #11]
    73ba:	3301      	adds	r3, #1
    73bc:	b2db      	uxtb	r3, r3
    73be:	72e3      	strb	r3, [r4, #11]
    73c0:	2b00      	cmp	r3, #0
    73c2:	d135      	bne.n	7430 <ctr_drbg_update_internal+0xc0>
    73c4:	7aa3      	ldrb	r3, [r4, #10]
    73c6:	3301      	adds	r3, #1
    73c8:	b2db      	uxtb	r3, r3
    73ca:	72a3      	strb	r3, [r4, #10]
    73cc:	2b00      	cmp	r3, #0
    73ce:	d12f      	bne.n	7430 <ctr_drbg_update_internal+0xc0>
    73d0:	7a63      	ldrb	r3, [r4, #9]
    73d2:	3301      	adds	r3, #1
    73d4:	b2db      	uxtb	r3, r3
    73d6:	7263      	strb	r3, [r4, #9]
    73d8:	bb53      	cbnz	r3, 7430 <ctr_drbg_update_internal+0xc0>
    73da:	7a23      	ldrb	r3, [r4, #8]
    73dc:	3301      	adds	r3, #1
    73de:	b2db      	uxtb	r3, r3
    73e0:	7223      	strb	r3, [r4, #8]
    73e2:	bb2b      	cbnz	r3, 7430 <ctr_drbg_update_internal+0xc0>
    73e4:	79e3      	ldrb	r3, [r4, #7]
    73e6:	3301      	adds	r3, #1
    73e8:	b2db      	uxtb	r3, r3
    73ea:	71e3      	strb	r3, [r4, #7]
    73ec:	bb03      	cbnz	r3, 7430 <ctr_drbg_update_internal+0xc0>
    73ee:	79a3      	ldrb	r3, [r4, #6]
    73f0:	3301      	adds	r3, #1
    73f2:	b2db      	uxtb	r3, r3
    73f4:	71a3      	strb	r3, [r4, #6]
    73f6:	b9db      	cbnz	r3, 7430 <ctr_drbg_update_internal+0xc0>
    73f8:	7963      	ldrb	r3, [r4, #5]
    73fa:	3301      	adds	r3, #1
    73fc:	b2db      	uxtb	r3, r3
    73fe:	7163      	strb	r3, [r4, #5]
    7400:	b9b3      	cbnz	r3, 7430 <ctr_drbg_update_internal+0xc0>
    7402:	7923      	ldrb	r3, [r4, #4]
    7404:	3301      	adds	r3, #1
    7406:	b2db      	uxtb	r3, r3
    7408:	7123      	strb	r3, [r4, #4]
    740a:	b98b      	cbnz	r3, 7430 <ctr_drbg_update_internal+0xc0>
    740c:	78e3      	ldrb	r3, [r4, #3]
    740e:	3301      	adds	r3, #1
    7410:	b2db      	uxtb	r3, r3
    7412:	70e3      	strb	r3, [r4, #3]
    7414:	b963      	cbnz	r3, 7430 <ctr_drbg_update_internal+0xc0>
    7416:	78a3      	ldrb	r3, [r4, #2]
    7418:	3301      	adds	r3, #1
    741a:	b2db      	uxtb	r3, r3
    741c:	70a3      	strb	r3, [r4, #2]
    741e:	b93b      	cbnz	r3, 7430 <ctr_drbg_update_internal+0xc0>
    7420:	7863      	ldrb	r3, [r4, #1]
    7422:	3301      	adds	r3, #1
    7424:	b2db      	uxtb	r3, r3
    7426:	7063      	strb	r3, [r4, #1]
    7428:	b913      	cbnz	r3, 7430 <ctr_drbg_update_internal+0xc0>
    742a:	7823      	ldrb	r3, [r4, #0]
    742c:	3301      	adds	r3, #1
    742e:	7023      	strb	r3, [r4, #0]
    7430:	463b      	mov	r3, r7
    7432:	4622      	mov	r2, r4
    7434:	2101      	movs	r1, #1
    7436:	4630      	mov	r0, r6
    7438:	f000 fe50 	bl	80dc <cc_mbedtls_aes_crypt_ecb>
    743c:	4680      	mov	r8, r0
    743e:	2800      	cmp	r0, #0
    7440:	d12a      	bne.n	7498 <ctr_drbg_update_internal+0x128>
    7442:	3710      	adds	r7, #16
    7444:	ab08      	add	r3, sp, #32
    7446:	429f      	cmp	r7, r3
    7448:	d19e      	bne.n	7388 <ctr_drbg_update_internal+0x18>
    744a:	9900      	ldr	r1, [sp, #0]
    744c:	682b      	ldr	r3, [r5, #0]
    744e:	686a      	ldr	r2, [r5, #4]
    7450:	404b      	eors	r3, r1
    7452:	9901      	ldr	r1, [sp, #4]
    7454:	4630      	mov	r0, r6
    7456:	404a      	eors	r2, r1
    7458:	68ae      	ldr	r6, [r5, #8]
    745a:	9902      	ldr	r1, [sp, #8]
    745c:	9300      	str	r3, [sp, #0]
    745e:	4071      	eors	r1, r6
    7460:	68eb      	ldr	r3, [r5, #12]
    7462:	9e03      	ldr	r6, [sp, #12]
    7464:	9201      	str	r2, [sp, #4]
    7466:	4073      	eors	r3, r6
    7468:	692a      	ldr	r2, [r5, #16]
    746a:	9e04      	ldr	r6, [sp, #16]
    746c:	9102      	str	r1, [sp, #8]
    746e:	4056      	eors	r6, r2
    7470:	9905      	ldr	r1, [sp, #20]
    7472:	696a      	ldr	r2, [r5, #20]
    7474:	9303      	str	r3, [sp, #12]
    7476:	4051      	eors	r1, r2
    7478:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
    747c:	9d06      	ldr	r5, [sp, #24]
    747e:	9105      	str	r1, [sp, #20]
    7480:	4055      	eors	r5, r2
    7482:	9a07      	ldr	r2, [sp, #28]
    7484:	4669      	mov	r1, sp
    7486:	4053      	eors	r3, r2
    7488:	2280      	movs	r2, #128	; 0x80
    748a:	e9cd 5306 	strd	r5, r3, [sp, #24]
    748e:	9604      	str	r6, [sp, #16]
    7490:	f000 fe0a 	bl	80a8 <cc_mbedtls_aes_setkey_enc>
    7494:	4680      	mov	r8, r0
    7496:	b138      	cbz	r0, 74a8 <ctr_drbg_update_internal+0x138>
    7498:	4668      	mov	r0, sp
    749a:	2120      	movs	r1, #32
    749c:	f7ff fdce 	bl	703c <mbedtls_platform_zeroize>
    74a0:	4640      	mov	r0, r8
    74a2:	b008      	add	sp, #32
    74a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74a8:	2210      	movs	r2, #16
    74aa:	4620      	mov	r0, r4
    74ac:	eb0d 0102 	add.w	r1, sp, r2
    74b0:	f001 fdea 	bl	9088 <memcpy>
    74b4:	e7f0      	b.n	7498 <ctr_drbg_update_internal+0x128>
    74b6:	bf00      	nop

000074b8 <mbedtls_ctr_drbg_reseed_internal>:
    74b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74bc:	4606      	mov	r6, r0
    74be:	6980      	ldr	r0, [r0, #24]
    74c0:	b0af      	sub	sp, #188	; 0xbc
    74c2:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    74c6:	f200 817c 	bhi.w	77c2 <mbedtls_ctr_drbg_reseed_internal+0x30a>
    74ca:	461d      	mov	r5, r3
    74cc:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    74d0:	42ab      	cmp	r3, r5
    74d2:	f0c0 8176 	bcc.w	77c2 <mbedtls_ctr_drbg_reseed_internal+0x30a>
    74d6:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    74da:	1a18      	subs	r0, r3, r0
    74dc:	4290      	cmp	r0, r2
    74de:	4617      	mov	r7, r2
    74e0:	f0c0 816f 	bcc.w	77c2 <mbedtls_ctr_drbg_reseed_internal+0x30a>
    74e4:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 77d0 <mbedtls_ctr_drbg_reseed_internal+0x318>
    74e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
    74ec:	4688      	mov	r8, r1
    74ee:	4648      	mov	r0, r9
    74f0:	2100      	movs	r1, #0
    74f2:	f001 fdf4 	bl	90de <memset>
    74f6:	4649      	mov	r1, r9
    74f8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
    74fc:	69b2      	ldr	r2, [r6, #24]
    74fe:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
    7502:	4798      	blx	r3
    7504:	2800      	cmp	r0, #0
    7506:	f040 815f 	bne.w	77c8 <mbedtls_ctr_drbg_reseed_internal+0x310>
    750a:	69b4      	ldr	r4, [r6, #24]
    750c:	b155      	cbz	r5, 7524 <mbedtls_ctr_drbg_reseed_internal+0x6c>
    750e:	462a      	mov	r2, r5
    7510:	4649      	mov	r1, r9
    7512:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
    7516:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
    751a:	4798      	blx	r3
    751c:	2800      	cmp	r0, #0
    751e:	f040 8153 	bne.w	77c8 <mbedtls_ctr_drbg_reseed_internal+0x310>
    7522:	442c      	add	r4, r5
    7524:	f1b8 0f00 	cmp.w	r8, #0
    7528:	d002      	beq.n	7530 <mbedtls_ctr_drbg_reseed_internal+0x78>
    752a:	2f00      	cmp	r7, #0
    752c:	f040 8122 	bne.w	7774 <mbedtls_ctr_drbg_reseed_internal+0x2bc>
    7530:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
    7534:	bf88      	it	hi
    7536:	f06f 0537 	mvnhi.w	r5, #55	; 0x37
    753a:	f200 8112 	bhi.w	7762 <mbedtls_ctr_drbg_reseed_internal+0x2aa>
    753e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 77e4 <mbedtls_ctr_drbg_reseed_internal+0x32c>
    7542:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    7546:	2100      	movs	r1, #0
    7548:	4640      	mov	r0, r8
    754a:	f001 fdc8 	bl	90de <memset>
    754e:	a811      	add	r0, sp, #68	; 0x44
    7550:	f000 fd94 	bl	807c <cc_mbedtls_aes_init>
    7554:	2320      	movs	r3, #32
    7556:	2100      	movs	r1, #0
    7558:	ba65      	rev16	r5, r4
    755a:	4622      	mov	r2, r4
    755c:	f8a8 1010 	strh.w	r1, [r8, #16]
    7560:	f8a8 5012 	strh.w	r5, [r8, #18]
    7564:	499a      	ldr	r1, [pc, #616]	; (77d0 <mbedtls_ctr_drbg_reseed_internal+0x318>)
    7566:	f888 3017 	strb.w	r3, [r8, #23]
    756a:	f108 0018 	add.w	r0, r8, #24
    756e:	f001 fd8b 	bl	9088 <memcpy>
    7572:	2280      	movs	r2, #128	; 0x80
    7574:	4b97      	ldr	r3, [pc, #604]	; (77d4 <mbedtls_ctr_drbg_reseed_internal+0x31c>)
    7576:	4d98      	ldr	r5, [pc, #608]	; (77d8 <mbedtls_ctr_drbg_reseed_internal+0x320>)
    7578:	4998      	ldr	r1, [pc, #608]	; (77dc <mbedtls_ctr_drbg_reseed_internal+0x324>)
    757a:	eb08 0004 	add.w	r0, r8, r4
    757e:	e9cd 5102 	strd	r5, r1, [sp, #8]
    7582:	7602      	strb	r2, [r0, #24]
    7584:	9301      	str	r3, [sp, #4]
    7586:	a811      	add	r0, sp, #68	; 0x44
    7588:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
    758c:	a901      	add	r1, sp, #4
    758e:	9304      	str	r3, [sp, #16]
    7590:	f000 fd8a 	bl	80a8 <cc_mbedtls_aes_setkey_enc>
    7594:	4605      	mov	r5, r0
    7596:	2800      	cmp	r0, #0
    7598:	f040 80f4 	bne.w	7784 <mbedtls_ctr_drbg_reseed_internal+0x2cc>
    759c:	f104 0719 	add.w	r7, r4, #25
    75a0:	f10d 0914 	add.w	r9, sp, #20
    75a4:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    75a8:	2210      	movs	r2, #16
    75aa:	2100      	movs	r1, #0
    75ac:	4648      	mov	r0, r9
    75ae:	f001 fd96 	bl	90de <memset>
    75b2:	46ba      	mov	sl, r7
    75b4:	4c8a      	ldr	r4, [pc, #552]	; (77e0 <mbedtls_ctr_drbg_reseed_internal+0x328>)
    75b6:	f89d 2014 	ldrb.w	r2, [sp, #20]
    75ba:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    75be:	f89d c015 	ldrb.w	ip, [sp, #21]
    75c2:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
    75c6:	f89d 0016 	ldrb.w	r0, [sp, #22]
    75ca:	4053      	eors	r3, r2
    75cc:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    75d0:	ea8c 0c01 	eor.w	ip, ip, r1
    75d4:	4050      	eors	r0, r2
    75d6:	f89d 1017 	ldrb.w	r1, [sp, #23]
    75da:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
    75de:	f89d e018 	ldrb.w	lr, [sp, #24]
    75e2:	4051      	eors	r1, r2
    75e4:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
    75e8:	f88d 3014 	strb.w	r3, [sp, #20]
    75ec:	ea8e 0202 	eor.w	r2, lr, r2
    75f0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    75f4:	f89d e019 	ldrb.w	lr, [sp, #25]
    75f8:	f88d c015 	strb.w	ip, [sp, #21]
    75fc:	ea8e 0303 	eor.w	r3, lr, r3
    7600:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
    7604:	f89d e01a 	ldrb.w	lr, [sp, #26]
    7608:	f88d 0016 	strb.w	r0, [sp, #22]
    760c:	ea8e 0c0c 	eor.w	ip, lr, ip
    7610:	f814 0c09 	ldrb.w	r0, [r4, #-9]
    7614:	f89d e01b 	ldrb.w	lr, [sp, #27]
    7618:	f88d 1017 	strb.w	r1, [sp, #23]
    761c:	ea8e 0000 	eor.w	r0, lr, r0
    7620:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    7624:	f89d e01c 	ldrb.w	lr, [sp, #28]
    7628:	f88d 2018 	strb.w	r2, [sp, #24]
    762c:	ea8e 0101 	eor.w	r1, lr, r1
    7630:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    7634:	f89d e01d 	ldrb.w	lr, [sp, #29]
    7638:	f88d 3019 	strb.w	r3, [sp, #25]
    763c:	ea8e 0202 	eor.w	r2, lr, r2
    7640:	f89d 301e 	ldrb.w	r3, [sp, #30]
    7644:	f814 ec06 	ldrb.w	lr, [r4, #-6]
    7648:	f88d c01a 	strb.w	ip, [sp, #26]
    764c:	ea83 030e 	eor.w	r3, r3, lr
    7650:	f88d 001b 	strb.w	r0, [sp, #27]
    7654:	f88d 101c 	strb.w	r1, [sp, #28]
    7658:	f88d 201d 	strb.w	r2, [sp, #29]
    765c:	f88d 301e 	strb.w	r3, [sp, #30]
    7660:	f89d 101f 	ldrb.w	r1, [sp, #31]
    7664:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    7668:	f89d c020 	ldrb.w	ip, [sp, #32]
    766c:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    7670:	404b      	eors	r3, r1
    7672:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    7676:	f814 1c03 	ldrb.w	r1, [r4, #-3]
    767a:	ea8c 0202 	eor.w	r2, ip, r2
    767e:	4041      	eors	r1, r0
    7680:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
    7684:	f814 0c02 	ldrb.w	r0, [r4, #-2]
    7688:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
    768c:	ea8c 0000 	eor.w	r0, ip, r0
    7690:	f814 cc01 	ldrb.w	ip, [r4, #-1]
    7694:	f88d 301f 	strb.w	r3, [sp, #31]
    7698:	ea8e 0c0c 	eor.w	ip, lr, ip
    769c:	f88d 2020 	strb.w	r2, [sp, #32]
    76a0:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    76a4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    76a8:	464b      	mov	r3, r9
    76aa:	464a      	mov	r2, r9
    76ac:	2101      	movs	r1, #1
    76ae:	a811      	add	r0, sp, #68	; 0x44
    76b0:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
    76b4:	f000 fd12 	bl	80dc <cc_mbedtls_aes_crypt_ecb>
    76b8:	f1ba 0f10 	cmp.w	sl, #16
    76bc:	bf94      	ite	ls
    76be:	ebaa 0a0a 	subls.w	sl, sl, sl
    76c2:	f1aa 0a10 	subhi.w	sl, sl, #16
    76c6:	2800      	cmp	r0, #0
    76c8:	d179      	bne.n	77be <mbedtls_ctr_drbg_reseed_internal+0x306>
    76ca:	3410      	adds	r4, #16
    76cc:	f1ba 0f00 	cmp.w	sl, #0
    76d0:	f47f af71 	bne.w	75b6 <mbedtls_ctr_drbg_reseed_internal+0xfe>
    76d4:	eb0b 0005 	add.w	r0, fp, r5
    76d8:	2210      	movs	r2, #16
    76da:	4649      	mov	r1, r9
    76dc:	f001 fcd4 	bl	9088 <memcpy>
    76e0:	f898 3003 	ldrb.w	r3, [r8, #3]
    76e4:	3510      	adds	r5, #16
    76e6:	3301      	adds	r3, #1
    76e8:	2d20      	cmp	r5, #32
    76ea:	f888 3003 	strb.w	r3, [r8, #3]
    76ee:	f47f af5b 	bne.w	75a8 <mbedtls_ctr_drbg_reseed_internal+0xf0>
    76f2:	2280      	movs	r2, #128	; 0x80
    76f4:	4659      	mov	r1, fp
    76f6:	a811      	add	r0, sp, #68	; 0x44
    76f8:	f000 fcd6 	bl	80a8 <cc_mbedtls_aes_setkey_enc>
    76fc:	4605      	mov	r5, r0
    76fe:	2800      	cmp	r0, #0
    7700:	d144      	bne.n	778c <mbedtls_ctr_drbg_reseed_internal+0x2d4>
    7702:	4c33      	ldr	r4, [pc, #204]	; (77d0 <mbedtls_ctr_drbg_reseed_internal+0x318>)
    7704:	f104 0720 	add.w	r7, r4, #32
    7708:	ab0d      	add	r3, sp, #52	; 0x34
    770a:	461a      	mov	r2, r3
    770c:	2101      	movs	r1, #1
    770e:	a811      	add	r0, sp, #68	; 0x44
    7710:	f000 fce4 	bl	80dc <cc_mbedtls_aes_crypt_ecb>
    7714:	4605      	mov	r5, r0
    7716:	2800      	cmp	r0, #0
    7718:	d138      	bne.n	778c <mbedtls_ctr_drbg_reseed_internal+0x2d4>
    771a:	2210      	movs	r2, #16
    771c:	4620      	mov	r0, r4
    771e:	a90d      	add	r1, sp, #52	; 0x34
    7720:	4414      	add	r4, r2
    7722:	f001 fcb1 	bl	9088 <memcpy>
    7726:	42bc      	cmp	r4, r7
    7728:	d1ee      	bne.n	7708 <mbedtls_ctr_drbg_reseed_internal+0x250>
    772a:	a811      	add	r0, sp, #68	; 0x44
    772c:	f000 fcb6 	bl	809c <cc_mbedtls_aes_free>
    7730:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    7734:	482b      	ldr	r0, [pc, #172]	; (77e4 <mbedtls_ctr_drbg_reseed_internal+0x32c>)
    7736:	f7ff fc81 	bl	703c <mbedtls_platform_zeroize>
    773a:	4658      	mov	r0, fp
    773c:	2120      	movs	r1, #32
    773e:	f7ff fc7d 	bl	703c <mbedtls_platform_zeroize>
    7742:	2110      	movs	r1, #16
    7744:	a801      	add	r0, sp, #4
    7746:	f7ff fc79 	bl	703c <mbedtls_platform_zeroize>
    774a:	4648      	mov	r0, r9
    774c:	2110      	movs	r1, #16
    774e:	f7ff fc75 	bl	703c <mbedtls_platform_zeroize>
    7752:	4630      	mov	r0, r6
    7754:	491e      	ldr	r1, [pc, #120]	; (77d0 <mbedtls_ctr_drbg_reseed_internal+0x318>)
    7756:	f7ff fe0b 	bl	7370 <ctr_drbg_update_internal>
    775a:	4605      	mov	r5, r0
    775c:	b908      	cbnz	r0, 7762 <mbedtls_ctr_drbg_reseed_internal+0x2aa>
    775e:	2301      	movs	r3, #1
    7760:	6133      	str	r3, [r6, #16]
    7762:	f44f 71c0 	mov.w	r1, #384	; 0x180
    7766:	481a      	ldr	r0, [pc, #104]	; (77d0 <mbedtls_ctr_drbg_reseed_internal+0x318>)
    7768:	f7ff fc68 	bl	703c <mbedtls_platform_zeroize>
    776c:	4628      	mov	r0, r5
    776e:	b02f      	add	sp, #188	; 0xbc
    7770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7774:	eb09 0004 	add.w	r0, r9, r4
    7778:	4641      	mov	r1, r8
    777a:	463a      	mov	r2, r7
    777c:	f001 fc84 	bl	9088 <memcpy>
    7780:	443c      	add	r4, r7
    7782:	e6d5      	b.n	7530 <mbedtls_ctr_drbg_reseed_internal+0x78>
    7784:	f10d 0914 	add.w	r9, sp, #20
    7788:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    778c:	a811      	add	r0, sp, #68	; 0x44
    778e:	f000 fc85 	bl	809c <cc_mbedtls_aes_free>
    7792:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    7796:	4813      	ldr	r0, [pc, #76]	; (77e4 <mbedtls_ctr_drbg_reseed_internal+0x32c>)
    7798:	f7ff fc50 	bl	703c <mbedtls_platform_zeroize>
    779c:	4658      	mov	r0, fp
    779e:	2120      	movs	r1, #32
    77a0:	f7ff fc4c 	bl	703c <mbedtls_platform_zeroize>
    77a4:	a801      	add	r0, sp, #4
    77a6:	2110      	movs	r1, #16
    77a8:	f7ff fc48 	bl	703c <mbedtls_platform_zeroize>
    77ac:	4648      	mov	r0, r9
    77ae:	2110      	movs	r1, #16
    77b0:	f7ff fc44 	bl	703c <mbedtls_platform_zeroize>
    77b4:	2120      	movs	r1, #32
    77b6:	4806      	ldr	r0, [pc, #24]	; (77d0 <mbedtls_ctr_drbg_reseed_internal+0x318>)
    77b8:	f7ff fc40 	bl	703c <mbedtls_platform_zeroize>
    77bc:	e7d1      	b.n	7762 <mbedtls_ctr_drbg_reseed_internal+0x2aa>
    77be:	4605      	mov	r5, r0
    77c0:	e7e4      	b.n	778c <mbedtls_ctr_drbg_reseed_internal+0x2d4>
    77c2:	f06f 0537 	mvn.w	r5, #55	; 0x37
    77c6:	e7d1      	b.n	776c <mbedtls_ctr_drbg_reseed_internal+0x2b4>
    77c8:	f06f 0533 	mvn.w	r5, #51	; 0x33
    77cc:	e7ce      	b.n	776c <mbedtls_ctr_drbg_reseed_internal+0x2b4>
    77ce:	bf00      	nop
    77d0:	20001524 	.word	0x20001524
    77d4:	03020100 	.word	0x03020100
    77d8:	07060504 	.word	0x07060504
    77dc:	0b0a0908 	.word	0x0b0a0908
    77e0:	20001394 	.word	0x20001394
    77e4:	20001384 	.word	0x20001384

000077e8 <cc_mbedtls_ctr_drbg_init>:
    77e8:	b510      	push	{r4, lr}
    77ea:	22a4      	movs	r2, #164	; 0xa4
    77ec:	2100      	movs	r1, #0
    77ee:	4604      	mov	r4, r0
    77f0:	f001 fc75 	bl	90de <memset>
    77f4:	f04f 32ff 	mov.w	r2, #4294967295
    77f8:	4b03      	ldr	r3, [pc, #12]	; (7808 <cc_mbedtls_ctr_drbg_init+0x20>)
    77fa:	6122      	str	r2, [r4, #16]
    77fc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    7800:	681b      	ldr	r3, [r3, #0]
    7802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7806:	4718      	bx	r3
    7808:	200000f4 	.word	0x200000f4

0000780c <cc_mbedtls_ctr_drbg_seed>:
    780c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7810:	4604      	mov	r4, r0
    7812:	460e      	mov	r6, r1
    7814:	4615      	mov	r5, r2
    7816:	b084      	sub	sp, #16
    7818:	2210      	movs	r2, #16
    781a:	2100      	movs	r1, #0
    781c:	f100 0820 	add.w	r8, r0, #32
    7820:	4668      	mov	r0, sp
    7822:	461f      	mov	r7, r3
    7824:	f001 fc5b 	bl	90de <memset>
    7828:	4640      	mov	r0, r8
    782a:	f000 fc27 	bl	807c <cc_mbedtls_aes_init>
    782e:	69a2      	ldr	r2, [r4, #24]
    7830:	e9c4 6525 	strd	r6, r5, [r4, #148]	; 0x94
    7834:	b9d2      	cbnz	r2, 786c <cc_mbedtls_ctr_drbg_seed+0x60>
    7836:	2220      	movs	r2, #32
    7838:	6926      	ldr	r6, [r4, #16]
    783a:	61a2      	str	r2, [r4, #24]
    783c:	2e00      	cmp	r6, #0
    783e:	db2f      	blt.n	78a0 <cc_mbedtls_ctr_drbg_seed+0x94>
    7840:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    7844:	4669      	mov	r1, sp
    7846:	4640      	mov	r0, r8
    7848:	2280      	movs	r2, #128	; 0x80
    784a:	61e3      	str	r3, [r4, #28]
    784c:	f000 fc2c 	bl	80a8 <cc_mbedtls_aes_setkey_enc>
    7850:	4605      	mov	r5, r0
    7852:	b938      	cbnz	r0, 7864 <cc_mbedtls_ctr_drbg_seed+0x58>
    7854:	4b13      	ldr	r3, [pc, #76]	; (78a4 <cc_mbedtls_ctr_drbg_seed+0x98>)
    7856:	f104 089c 	add.w	r8, r4, #156	; 0x9c
    785a:	4640      	mov	r0, r8
    785c:	681b      	ldr	r3, [r3, #0]
    785e:	4798      	blx	r3
    7860:	4605      	mov	r5, r0
    7862:	b158      	cbz	r0, 787c <cc_mbedtls_ctr_drbg_seed+0x70>
    7864:	4628      	mov	r0, r5
    7866:	b004      	add	sp, #16
    7868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    786c:	6926      	ldr	r6, [r4, #16]
    786e:	2e00      	cmp	r6, #0
    7870:	dae6      	bge.n	7840 <cc_mbedtls_ctr_drbg_seed+0x34>
    7872:	2a17      	cmp	r2, #23
    7874:	d814      	bhi.n	78a0 <cc_mbedtls_ctr_drbg_seed+0x94>
    7876:	3201      	adds	r2, #1
    7878:	0856      	lsrs	r6, r2, #1
    787a:	e7e1      	b.n	7840 <cc_mbedtls_ctr_drbg_seed+0x34>
    787c:	4633      	mov	r3, r6
    787e:	4639      	mov	r1, r7
    7880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7882:	4620      	mov	r0, r4
    7884:	f7ff fe18 	bl	74b8 <mbedtls_ctr_drbg_reseed_internal>
    7888:	4b07      	ldr	r3, [pc, #28]	; (78a8 <cc_mbedtls_ctr_drbg_seed+0x9c>)
    788a:	4605      	mov	r5, r0
    788c:	681b      	ldr	r3, [r3, #0]
    788e:	4640      	mov	r0, r8
    7890:	4798      	blx	r3
    7892:	2800      	cmp	r0, #0
    7894:	bf18      	it	ne
    7896:	4605      	movne	r5, r0
    7898:	4628      	mov	r0, r5
    789a:	b004      	add	sp, #16
    789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78a0:	2600      	movs	r6, #0
    78a2:	e7cd      	b.n	7840 <cc_mbedtls_ctr_drbg_seed+0x34>
    78a4:	200000f8 	.word	0x200000f8
    78a8:	200000fc 	.word	0x200000fc

000078ac <cc_mbedtls_ctr_drbg_random_with_add>:
    78ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78b0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    78b4:	b08c      	sub	sp, #48	; 0x30
    78b6:	9f14      	ldr	r7, [sp, #80]	; 0x50
    78b8:	f200 80cb 	bhi.w	7a52 <cc_mbedtls_ctr_drbg_random_with_add+0x1a6>
    78bc:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    78c0:	f200 80c4 	bhi.w	7a4c <cc_mbedtls_ctr_drbg_random_with_add+0x1a0>
    78c4:	4604      	mov	r4, r0
    78c6:	4615      	mov	r5, r2
    78c8:	460e      	mov	r6, r1
    78ca:	2220      	movs	r2, #32
    78cc:	2100      	movs	r1, #0
    78ce:	a804      	add	r0, sp, #16
    78d0:	4698      	mov	r8, r3
    78d2:	f001 fc04 	bl	90de <memset>
    78d6:	6921      	ldr	r1, [r4, #16]
    78d8:	69e2      	ldr	r2, [r4, #28]
    78da:	4291      	cmp	r1, r2
    78dc:	f300 8087 	bgt.w	79ee <cc_mbedtls_ctr_drbg_random_with_add+0x142>
    78e0:	6963      	ldr	r3, [r4, #20]
    78e2:	2b00      	cmp	r3, #0
    78e4:	f040 8083 	bne.w	79ee <cc_mbedtls_ctr_drbg_random_with_add+0x142>
    78e8:	2f00      	cmp	r7, #0
    78ea:	f040 80a7 	bne.w	7a3c <cc_mbedtls_ctr_drbg_random_with_add+0x190>
    78ee:	466f      	mov	r7, sp
    78f0:	2d00      	cmp	r5, #0
    78f2:	f000 8098 	beq.w	7a26 <cc_mbedtls_ctr_drbg_random_with_add+0x17a>
    78f6:	466f      	mov	r7, sp
    78f8:	f104 0820 	add.w	r8, r4, #32
    78fc:	e00e      	b.n	791c <cc_mbedtls_ctr_drbg_random_with_add+0x70>
    78fe:	2d10      	cmp	r5, #16
    7900:	46a9      	mov	r9, r5
    7902:	bf28      	it	cs
    7904:	f04f 0910 	movcs.w	r9, #16
    7908:	4630      	mov	r0, r6
    790a:	4639      	mov	r1, r7
    790c:	464a      	mov	r2, r9
    790e:	f001 fbbb 	bl	9088 <memcpy>
    7912:	ebb5 0509 	subs.w	r5, r5, r9
    7916:	444e      	add	r6, r9
    7918:	f000 8085 	beq.w	7a26 <cc_mbedtls_ctr_drbg_random_with_add+0x17a>
    791c:	7be3      	ldrb	r3, [r4, #15]
    791e:	3301      	adds	r3, #1
    7920:	b2db      	uxtb	r3, r3
    7922:	73e3      	strb	r3, [r4, #15]
    7924:	2b00      	cmp	r3, #0
    7926:	d14d      	bne.n	79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    7928:	7ba3      	ldrb	r3, [r4, #14]
    792a:	3301      	adds	r3, #1
    792c:	b2db      	uxtb	r3, r3
    792e:	73a3      	strb	r3, [r4, #14]
    7930:	2b00      	cmp	r3, #0
    7932:	d147      	bne.n	79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    7934:	7b63      	ldrb	r3, [r4, #13]
    7936:	3301      	adds	r3, #1
    7938:	b2db      	uxtb	r3, r3
    793a:	7363      	strb	r3, [r4, #13]
    793c:	2b00      	cmp	r3, #0
    793e:	d141      	bne.n	79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    7940:	7b23      	ldrb	r3, [r4, #12]
    7942:	3301      	adds	r3, #1
    7944:	b2db      	uxtb	r3, r3
    7946:	7323      	strb	r3, [r4, #12]
    7948:	2b00      	cmp	r3, #0
    794a:	d13b      	bne.n	79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    794c:	7ae3      	ldrb	r3, [r4, #11]
    794e:	3301      	adds	r3, #1
    7950:	b2db      	uxtb	r3, r3
    7952:	72e3      	strb	r3, [r4, #11]
    7954:	2b00      	cmp	r3, #0
    7956:	d135      	bne.n	79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    7958:	7aa3      	ldrb	r3, [r4, #10]
    795a:	3301      	adds	r3, #1
    795c:	b2db      	uxtb	r3, r3
    795e:	72a3      	strb	r3, [r4, #10]
    7960:	2b00      	cmp	r3, #0
    7962:	d12f      	bne.n	79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    7964:	7a63      	ldrb	r3, [r4, #9]
    7966:	3301      	adds	r3, #1
    7968:	b2db      	uxtb	r3, r3
    796a:	7263      	strb	r3, [r4, #9]
    796c:	bb53      	cbnz	r3, 79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    796e:	7a23      	ldrb	r3, [r4, #8]
    7970:	3301      	adds	r3, #1
    7972:	b2db      	uxtb	r3, r3
    7974:	7223      	strb	r3, [r4, #8]
    7976:	bb2b      	cbnz	r3, 79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    7978:	79e3      	ldrb	r3, [r4, #7]
    797a:	3301      	adds	r3, #1
    797c:	b2db      	uxtb	r3, r3
    797e:	71e3      	strb	r3, [r4, #7]
    7980:	bb03      	cbnz	r3, 79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    7982:	79a3      	ldrb	r3, [r4, #6]
    7984:	3301      	adds	r3, #1
    7986:	b2db      	uxtb	r3, r3
    7988:	71a3      	strb	r3, [r4, #6]
    798a:	b9db      	cbnz	r3, 79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    798c:	7963      	ldrb	r3, [r4, #5]
    798e:	3301      	adds	r3, #1
    7990:	b2db      	uxtb	r3, r3
    7992:	7163      	strb	r3, [r4, #5]
    7994:	b9b3      	cbnz	r3, 79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    7996:	7923      	ldrb	r3, [r4, #4]
    7998:	3301      	adds	r3, #1
    799a:	b2db      	uxtb	r3, r3
    799c:	7123      	strb	r3, [r4, #4]
    799e:	b98b      	cbnz	r3, 79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    79a0:	78e3      	ldrb	r3, [r4, #3]
    79a2:	3301      	adds	r3, #1
    79a4:	b2db      	uxtb	r3, r3
    79a6:	70e3      	strb	r3, [r4, #3]
    79a8:	b963      	cbnz	r3, 79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    79aa:	78a3      	ldrb	r3, [r4, #2]
    79ac:	3301      	adds	r3, #1
    79ae:	b2db      	uxtb	r3, r3
    79b0:	70a3      	strb	r3, [r4, #2]
    79b2:	b93b      	cbnz	r3, 79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    79b4:	7863      	ldrb	r3, [r4, #1]
    79b6:	3301      	adds	r3, #1
    79b8:	b2db      	uxtb	r3, r3
    79ba:	7063      	strb	r3, [r4, #1]
    79bc:	b913      	cbnz	r3, 79c4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    79be:	7823      	ldrb	r3, [r4, #0]
    79c0:	3301      	adds	r3, #1
    79c2:	7023      	strb	r3, [r4, #0]
    79c4:	463b      	mov	r3, r7
    79c6:	4622      	mov	r2, r4
    79c8:	2101      	movs	r1, #1
    79ca:	4640      	mov	r0, r8
    79cc:	f000 fb86 	bl	80dc <cc_mbedtls_aes_crypt_ecb>
    79d0:	4681      	mov	r9, r0
    79d2:	2800      	cmp	r0, #0
    79d4:	d093      	beq.n	78fe <cc_mbedtls_ctr_drbg_random_with_add+0x52>
    79d6:	2120      	movs	r1, #32
    79d8:	a804      	add	r0, sp, #16
    79da:	f7ff fb2f 	bl	703c <mbedtls_platform_zeroize>
    79de:	4638      	mov	r0, r7
    79e0:	2110      	movs	r1, #16
    79e2:	f7ff fb2b 	bl	703c <mbedtls_platform_zeroize>
    79e6:	4648      	mov	r0, r9
    79e8:	b00c      	add	sp, #48	; 0x30
    79ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79ee:	4b1a      	ldr	r3, [pc, #104]	; (7a58 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>)
    79f0:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
    79f4:	4650      	mov	r0, sl
    79f6:	681b      	ldr	r3, [r3, #0]
    79f8:	4798      	blx	r3
    79fa:	4681      	mov	r9, r0
    79fc:	2800      	cmp	r0, #0
    79fe:	d1f2      	bne.n	79e6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    7a00:	4603      	mov	r3, r0
    7a02:	463a      	mov	r2, r7
    7a04:	4641      	mov	r1, r8
    7a06:	4620      	mov	r0, r4
    7a08:	f7ff fd56 	bl	74b8 <mbedtls_ctr_drbg_reseed_internal>
    7a0c:	4b13      	ldr	r3, [pc, #76]	; (7a5c <cc_mbedtls_ctr_drbg_random_with_add+0x1b0>)
    7a0e:	4607      	mov	r7, r0
    7a10:	681b      	ldr	r3, [r3, #0]
    7a12:	4650      	mov	r0, sl
    7a14:	4798      	blx	r3
    7a16:	4681      	mov	r9, r0
    7a18:	2800      	cmp	r0, #0
    7a1a:	d1e4      	bne.n	79e6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    7a1c:	2f00      	cmp	r7, #0
    7a1e:	f43f af66 	beq.w	78ee <cc_mbedtls_ctr_drbg_random_with_add+0x42>
    7a22:	46b9      	mov	r9, r7
    7a24:	e7df      	b.n	79e6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    7a26:	4620      	mov	r0, r4
    7a28:	a904      	add	r1, sp, #16
    7a2a:	f7ff fca1 	bl	7370 <ctr_drbg_update_internal>
    7a2e:	4681      	mov	r9, r0
    7a30:	2800      	cmp	r0, #0
    7a32:	d1d0      	bne.n	79d6 <cc_mbedtls_ctr_drbg_random_with_add+0x12a>
    7a34:	6923      	ldr	r3, [r4, #16]
    7a36:	3301      	adds	r3, #1
    7a38:	6123      	str	r3, [r4, #16]
    7a3a:	e7cc      	b.n	79d6 <cc_mbedtls_ctr_drbg_random_with_add+0x12a>
    7a3c:	4b06      	ldr	r3, [pc, #24]	; (7a58 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>)
    7a3e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    7a42:	681b      	ldr	r3, [r3, #0]
    7a44:	4798      	blx	r3
    7a46:	466f      	mov	r7, sp
    7a48:	4681      	mov	r9, r0
    7a4a:	e7c4      	b.n	79d6 <cc_mbedtls_ctr_drbg_random_with_add+0x12a>
    7a4c:	f06f 0937 	mvn.w	r9, #55	; 0x37
    7a50:	e7c9      	b.n	79e6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    7a52:	f06f 0935 	mvn.w	r9, #53	; 0x35
    7a56:	e7c6      	b.n	79e6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    7a58:	200000f8 	.word	0x200000f8
    7a5c:	200000fc 	.word	0x200000fc

00007a60 <cc_mbedtls_sha256_ret>:
    7a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a62:	461c      	mov	r4, r3
    7a64:	4605      	mov	r5, r0
    7a66:	4811      	ldr	r0, [pc, #68]	; (7aac <cc_mbedtls_sha256_ret+0x4c>)
    7a68:	460e      	mov	r6, r1
    7a6a:	4617      	mov	r7, r2
    7a6c:	f7ff fb72 	bl	7154 <cc_mbedtls_sha256_init>
    7a70:	4621      	mov	r1, r4
    7a72:	480e      	ldr	r0, [pc, #56]	; (7aac <cc_mbedtls_sha256_ret+0x4c>)
    7a74:	f7ff fb88 	bl	7188 <cc_mbedtls_sha256_starts_ret>
    7a78:	4604      	mov	r4, r0
    7a7a:	b120      	cbz	r0, 7a86 <cc_mbedtls_sha256_ret+0x26>
    7a7c:	480b      	ldr	r0, [pc, #44]	; (7aac <cc_mbedtls_sha256_ret+0x4c>)
    7a7e:	f7ff fb7d 	bl	717c <cc_mbedtls_sha256_free>
    7a82:	4620      	mov	r0, r4
    7a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a86:	4632      	mov	r2, r6
    7a88:	4629      	mov	r1, r5
    7a8a:	4808      	ldr	r0, [pc, #32]	; (7aac <cc_mbedtls_sha256_ret+0x4c>)
    7a8c:	f7ff fb90 	bl	71b0 <cc_mbedtls_sha256_update_ret>
    7a90:	4604      	mov	r4, r0
    7a92:	2800      	cmp	r0, #0
    7a94:	d1f2      	bne.n	7a7c <cc_mbedtls_sha256_ret+0x1c>
    7a96:	4639      	mov	r1, r7
    7a98:	4804      	ldr	r0, [pc, #16]	; (7aac <cc_mbedtls_sha256_ret+0x4c>)
    7a9a:	f7ff fb91 	bl	71c0 <cc_mbedtls_sha256_finish_ret>
    7a9e:	4604      	mov	r4, r0
    7aa0:	4802      	ldr	r0, [pc, #8]	; (7aac <cc_mbedtls_sha256_ret+0x4c>)
    7aa2:	f7ff fb6b 	bl	717c <cc_mbedtls_sha256_free>
    7aa6:	4620      	mov	r0, r4
    7aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7aaa:	bf00      	nop
    7aac:	200016a4 	.word	0x200016a4

00007ab0 <RNG_PLAT_SetUserRngParameters>:
    7ab0:	231c      	movs	r3, #28
    7ab2:	b530      	push	{r4, r5, lr}
    7ab4:	b083      	sub	sp, #12
    7ab6:	a901      	add	r1, sp, #4
    7ab8:	4604      	mov	r4, r0
    7aba:	9301      	str	r3, [sp, #4]
    7abc:	f000 f83e 	bl	7b3c <CC_PalTrngParamGet>
    7ac0:	4605      	mov	r5, r0
    7ac2:	b938      	cbnz	r0, 7ad4 <RNG_PLAT_SetUserRngParameters+0x24>
    7ac4:	9b01      	ldr	r3, [sp, #4]
    7ac6:	2b1c      	cmp	r3, #28
    7ac8:	d007      	beq.n	7ada <RNG_PLAT_SetUserRngParameters+0x2a>
    7aca:	4d16      	ldr	r5, [pc, #88]	; (7b24 <RNG_PLAT_SetUserRngParameters+0x74>)
    7acc:	4620      	mov	r0, r4
    7ace:	211c      	movs	r1, #28
    7ad0:	f000 f830 	bl	7b34 <CC_PalMemSetZeroPlat>
    7ad4:	4628      	mov	r0, r5
    7ad6:	b003      	add	sp, #12
    7ad8:	bd30      	pop	{r4, r5, pc}
    7ada:	2101      	movs	r1, #1
    7adc:	e9d4 3200 	ldrd	r3, r2, [r4]
    7ae0:	3b00      	subs	r3, #0
    7ae2:	bf18      	it	ne
    7ae4:	2301      	movne	r3, #1
    7ae6:	61e1      	str	r1, [r4, #28]
    7ae8:	b10a      	cbz	r2, 7aee <RNG_PLAT_SetUserRngParameters+0x3e>
    7aea:	f043 0302 	orr.w	r3, r3, #2
    7aee:	68a2      	ldr	r2, [r4, #8]
    7af0:	b932      	cbnz	r2, 7b00 <RNG_PLAT_SetUserRngParameters+0x50>
    7af2:	68e2      	ldr	r2, [r4, #12]
    7af4:	b942      	cbnz	r2, 7b08 <RNG_PLAT_SetUserRngParameters+0x58>
    7af6:	e9c4 3208 	strd	r3, r2, [r4, #32]
    7afa:	b98b      	cbnz	r3, 7b20 <RNG_PLAT_SetUserRngParameters+0x70>
    7afc:	4d0a      	ldr	r5, [pc, #40]	; (7b28 <RNG_PLAT_SetUserRngParameters+0x78>)
    7afe:	e7e5      	b.n	7acc <RNG_PLAT_SetUserRngParameters+0x1c>
    7b00:	68e2      	ldr	r2, [r4, #12]
    7b02:	f043 0304 	orr.w	r3, r3, #4
    7b06:	b13a      	cbz	r2, 7b18 <RNG_PLAT_SetUserRngParameters+0x68>
    7b08:	2200      	movs	r2, #0
    7b0a:	4628      	mov	r0, r5
    7b0c:	f043 0308 	orr.w	r3, r3, #8
    7b10:	e9c4 3208 	strd	r3, r2, [r4, #32]
    7b14:	b003      	add	sp, #12
    7b16:	bd30      	pop	{r4, r5, pc}
    7b18:	4615      	mov	r5, r2
    7b1a:	e9c4 3208 	strd	r3, r2, [r4, #32]
    7b1e:	e7d9      	b.n	7ad4 <RNG_PLAT_SetUserRngParameters+0x24>
    7b20:	4615      	mov	r5, r2
    7b22:	e7d7      	b.n	7ad4 <RNG_PLAT_SetUserRngParameters+0x24>
    7b24:	00f00c37 	.word	0x00f00c37
    7b28:	00f00c0e 	.word	0x00f00c0e

00007b2c <CC_PalMemCopyPlat>:
    7b2c:	f001 ba95 	b.w	905a <memmove>

00007b30 <CC_PalMemSetPlat>:
    7b30:	f001 bad5 	b.w	90de <memset>

00007b34 <CC_PalMemSetZeroPlat>:
    7b34:	460a      	mov	r2, r1
    7b36:	2100      	movs	r1, #0
    7b38:	f001 bad1 	b.w	90de <memset>

00007b3c <CC_PalTrngParamGet>:
    7b3c:	2800      	cmp	r0, #0
    7b3e:	d066      	beq.n	7c0e <CC_PalTrngParamGet+0xd2>
    7b40:	2900      	cmp	r1, #0
    7b42:	d064      	beq.n	7c0e <CC_PalTrngParamGet+0xd2>
    7b44:	680b      	ldr	r3, [r1, #0]
    7b46:	2b1c      	cmp	r3, #28
    7b48:	d161      	bne.n	7c0e <CC_PalTrngParamGet+0xd2>
    7b4a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7b4e:	4a3b      	ldr	r2, [pc, #236]	; (7c3c <CC_PalTrngParamGet+0x100>)
    7b50:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    7b54:	4291      	cmp	r1, r2
    7b56:	d05c      	beq.n	7c12 <CC_PalTrngParamGet+0xd6>
    7b58:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    7b5c:	3201      	adds	r2, #1
    7b5e:	d058      	beq.n	7c12 <CC_PalTrngParamGet+0xd6>
    7b60:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    7b64:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7b68:	6002      	str	r2, [r0, #0]
    7b6a:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    7b6e:	4a34      	ldr	r2, [pc, #208]	; (7c40 <CC_PalTrngParamGet+0x104>)
    7b70:	4291      	cmp	r1, r2
    7b72:	d060      	beq.n	7c36 <CC_PalTrngParamGet+0xfa>
    7b74:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    7b78:	3201      	adds	r2, #1
    7b7a:	d05c      	beq.n	7c36 <CC_PalTrngParamGet+0xfa>
    7b7c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    7b80:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7b84:	6042      	str	r2, [r0, #4]
    7b86:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    7b8a:	f512 7f94 	cmn.w	r2, #296	; 0x128
    7b8e:	d04f      	beq.n	7c30 <CC_PalTrngParamGet+0xf4>
    7b90:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    7b94:	3201      	adds	r2, #1
    7b96:	d04b      	beq.n	7c30 <CC_PalTrngParamGet+0xf4>
    7b98:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    7b9c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7ba0:	6082      	str	r2, [r0, #8]
    7ba2:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    7ba6:	4a27      	ldr	r2, [pc, #156]	; (7c44 <CC_PalTrngParamGet+0x108>)
    7ba8:	4291      	cmp	r1, r2
    7baa:	d03e      	beq.n	7c2a <CC_PalTrngParamGet+0xee>
    7bac:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    7bb0:	3201      	adds	r2, #1
    7bb2:	d03a      	beq.n	7c2a <CC_PalTrngParamGet+0xee>
    7bb4:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    7bb8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7bbc:	60c2      	str	r2, [r0, #12]
    7bbe:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    7bc2:	3270      	adds	r2, #112	; 0x70
    7bc4:	d02f      	beq.n	7c26 <CC_PalTrngParamGet+0xea>
    7bc6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    7bca:	3201      	adds	r2, #1
    7bcc:	d02b      	beq.n	7c26 <CC_PalTrngParamGet+0xea>
    7bce:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    7bd2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7bd6:	6102      	str	r2, [r0, #16]
    7bd8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    7bdc:	32af      	adds	r2, #175	; 0xaf
    7bde:	d020      	beq.n	7c22 <CC_PalTrngParamGet+0xe6>
    7be0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    7be4:	3201      	adds	r2, #1
    7be6:	d01c      	beq.n	7c22 <CC_PalTrngParamGet+0xe6>
    7be8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    7bec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7bf0:	6142      	str	r2, [r0, #20]
    7bf2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    7bf6:	4a14      	ldr	r2, [pc, #80]	; (7c48 <CC_PalTrngParamGet+0x10c>)
    7bf8:	4291      	cmp	r1, r2
    7bfa:	d00d      	beq.n	7c18 <CC_PalTrngParamGet+0xdc>
    7bfc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    7c00:	3201      	adds	r2, #1
    7c02:	d009      	beq.n	7c18 <CC_PalTrngParamGet+0xdc>
    7c04:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    7c08:	6183      	str	r3, [r0, #24]
    7c0a:	2000      	movs	r0, #0
    7c0c:	4770      	bx	lr
    7c0e:	2001      	movs	r0, #1
    7c10:	4770      	bx	lr
    7c12:	f640 02fc 	movw	r2, #2300	; 0x8fc
    7c16:	e7a5      	b.n	7b64 <CC_PalTrngParamGet+0x28>
    7c18:	f240 3337 	movw	r3, #823	; 0x337
    7c1c:	6183      	str	r3, [r0, #24]
    7c1e:	2000      	movs	r0, #0
    7c20:	4770      	bx	lr
    7c22:	2251      	movs	r2, #81	; 0x51
    7c24:	e7e2      	b.n	7bec <CC_PalTrngParamGet+0xb0>
    7c26:	2290      	movs	r2, #144	; 0x90
    7c28:	e7d3      	b.n	7bd2 <CC_PalTrngParamGet+0x96>
    7c2a:	f642 1204 	movw	r2, #10500	; 0x2904
    7c2e:	e7c3      	b.n	7bb8 <CC_PalTrngParamGet+0x7c>
    7c30:	f640 62d8 	movw	r2, #3800	; 0xed8
    7c34:	e7b2      	b.n	7b9c <CC_PalTrngParamGet+0x60>
    7c36:	f242 02d0 	movw	r2, #8400	; 0x20d0
    7c3a:	e7a1      	b.n	7b80 <CC_PalTrngParamGet+0x44>
    7c3c:	fffff8fc 	.word	0xfffff8fc
    7c40:	ffff20d0 	.word	0xffff20d0
    7c44:	ffff2904 	.word	0xffff2904
    7c48:	fffff337 	.word	0xfffff337

00007c4c <LLF_RND_WaitRngInterrupt>:
    7c4c:	4601      	mov	r1, r0
    7c4e:	b508      	push	{r3, lr}
    7c50:	f44f 6080 	mov.w	r0, #1024	; 0x400
    7c54:	f7fe fe24 	bl	68a0 <CC_HalWaitInterruptRND>
    7c58:	2300      	movs	r3, #0
    7c5a:	4902      	ldr	r1, [pc, #8]	; (7c64 <LLF_RND_WaitRngInterrupt+0x18>)
    7c5c:	4a02      	ldr	r2, [pc, #8]	; (7c68 <LLF_RND_WaitRngInterrupt+0x1c>)
    7c5e:	600b      	str	r3, [r1, #0]
    7c60:	6013      	str	r3, [r2, #0]
    7c62:	bd08      	pop	{r3, pc}
    7c64:	508411c8 	.word	0x508411c8
    7c68:	5084112c 	.word	0x5084112c

00007c6c <LLF_RND_GetRoscSampleCnt>:
    7c6c:	3801      	subs	r0, #1
    7c6e:	2807      	cmp	r0, #7
    7c70:	d805      	bhi.n	7c7e <LLF_RND_GetRoscSampleCnt+0x12>
    7c72:	e8df f000 	tbb	[pc, r0]
    7c76:	0e0a      	.short	0x0e0a
    7c78:	04041204 	.word	0x04041204
    7c7c:	0604      	.short	0x0604
    7c7e:	4809      	ldr	r0, [pc, #36]	; (7ca4 <LLF_RND_GetRoscSampleCnt+0x38>)
    7c80:	4770      	bx	lr
    7c82:	68cb      	ldr	r3, [r1, #12]
    7c84:	2000      	movs	r0, #0
    7c86:	624b      	str	r3, [r1, #36]	; 0x24
    7c88:	4770      	bx	lr
    7c8a:	680b      	ldr	r3, [r1, #0]
    7c8c:	2000      	movs	r0, #0
    7c8e:	624b      	str	r3, [r1, #36]	; 0x24
    7c90:	4770      	bx	lr
    7c92:	684b      	ldr	r3, [r1, #4]
    7c94:	2000      	movs	r0, #0
    7c96:	624b      	str	r3, [r1, #36]	; 0x24
    7c98:	4770      	bx	lr
    7c9a:	688b      	ldr	r3, [r1, #8]
    7c9c:	2000      	movs	r0, #0
    7c9e:	624b      	str	r3, [r1, #36]	; 0x24
    7ca0:	4770      	bx	lr
    7ca2:	bf00      	nop
    7ca4:	00f10c31 	.word	0x00f10c31

00007ca8 <LLF_RND_GetFastestRosc>:
    7ca8:	680b      	ldr	r3, [r1, #0]
    7caa:	e002      	b.n	7cb2 <LLF_RND_GetFastestRosc+0xa>
    7cac:	2b08      	cmp	r3, #8
    7cae:	600b      	str	r3, [r1, #0]
    7cb0:	d806      	bhi.n	7cc0 <LLF_RND_GetFastestRosc+0x18>
    7cb2:	6a02      	ldr	r2, [r0, #32]
    7cb4:	4213      	tst	r3, r2
    7cb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7cba:	d0f7      	beq.n	7cac <LLF_RND_GetFastestRosc+0x4>
    7cbc:	2000      	movs	r0, #0
    7cbe:	4770      	bx	lr
    7cc0:	4800      	ldr	r0, [pc, #0]	; (7cc4 <LLF_RND_GetFastestRosc+0x1c>)
    7cc2:	4770      	bx	lr
    7cc4:	00f10c31 	.word	0x00f10c31

00007cc8 <LLF_RND_TurnOffTrng>:
    7cc8:	2300      	movs	r3, #0
    7cca:	4904      	ldr	r1, [pc, #16]	; (7cdc <LLF_RND_TurnOffTrng+0x14>)
    7ccc:	4a04      	ldr	r2, [pc, #16]	; (7ce0 <LLF_RND_TurnOffTrng+0x18>)
    7cce:	600b      	str	r3, [r1, #0]
    7cd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    7cd4:	6013      	str	r3, [r2, #0]
    7cd6:	f7fe bdc9 	b.w	686c <CC_HalClearInterruptBit>
    7cda:	bf00      	nop
    7cdc:	5084112c 	.word	0x5084112c
    7ce0:	508411c4 	.word	0x508411c4

00007ce4 <SetDataBuffersInfo>:
    7ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ce8:	2600      	movs	r6, #0
    7cea:	b082      	sub	sp, #8
    7cec:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    7cf0:	f88d 6007 	strb.w	r6, [sp, #7]
    7cf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    7cf6:	d327      	bcc.n	7d48 <SetDataBuffersInfo+0x64>
    7cf8:	460c      	mov	r4, r1
    7cfa:	4404      	add	r4, r0
    7cfc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    7d00:	4605      	mov	r5, r0
    7d02:	d821      	bhi.n	7d48 <SetDataBuffersInfo+0x64>
    7d04:	4617      	mov	r7, r2
    7d06:	4698      	mov	r8, r3
    7d08:	2201      	movs	r2, #1
    7d0a:	f10d 0307 	add.w	r3, sp, #7
    7d0e:	f000 fa0f 	bl	8130 <CC_PalDataBufferAttrGet>
    7d12:	4604      	mov	r4, r0
    7d14:	b9c0      	cbnz	r0, 7d48 <SetDataBuffersInfo+0x64>
    7d16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d1a:	603d      	str	r5, [r7, #0]
    7d1c:	713b      	strb	r3, [r7, #4]
    7d1e:	b1ae      	cbz	r6, 7d4c <SetDataBuffersInfo+0x68>
    7d20:	f1b8 0f00 	cmp.w	r8, #0
    7d24:	d009      	beq.n	7d3a <SetDataBuffersInfo+0x56>
    7d26:	4602      	mov	r2, r0
    7d28:	9908      	ldr	r1, [sp, #32]
    7d2a:	4640      	mov	r0, r8
    7d2c:	f10d 0307 	add.w	r3, sp, #7
    7d30:	f000 f9fe 	bl	8130 <CC_PalDataBufferAttrGet>
    7d34:	b940      	cbnz	r0, 7d48 <SetDataBuffersInfo+0x64>
    7d36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d3a:	4620      	mov	r0, r4
    7d3c:	f8c6 8000 	str.w	r8, [r6]
    7d40:	7133      	strb	r3, [r6, #4]
    7d42:	b002      	add	sp, #8
    7d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d48:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
    7d4c:	4620      	mov	r0, r4
    7d4e:	b002      	add	sp, #8
    7d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007d54 <InitHashDrv>:
    7d54:	b1e8      	cbz	r0, 7d92 <InitHashDrv+0x3e>
    7d56:	b510      	push	{r4, lr}
    7d58:	6804      	ldr	r4, [r0, #0]
    7d5a:	2c01      	cmp	r4, #1
    7d5c:	d004      	beq.n	7d68 <InitHashDrv+0x14>
    7d5e:	2c02      	cmp	r4, #2
    7d60:	d010      	beq.n	7d84 <InitHashDrv+0x30>
    7d62:	b144      	cbz	r4, 7d76 <InitHashDrv+0x22>
    7d64:	480c      	ldr	r0, [pc, #48]	; (7d98 <InitHashDrv+0x44>)
    7d66:	bd10      	pop	{r4, pc}
    7d68:	2220      	movs	r2, #32
    7d6a:	490c      	ldr	r1, [pc, #48]	; (7d9c <InitHashDrv+0x48>)
    7d6c:	3008      	adds	r0, #8
    7d6e:	f7ff fedd 	bl	7b2c <CC_PalMemCopyPlat>
    7d72:	2000      	movs	r0, #0
    7d74:	bd10      	pop	{r4, pc}
    7d76:	2214      	movs	r2, #20
    7d78:	4909      	ldr	r1, [pc, #36]	; (7da0 <InitHashDrv+0x4c>)
    7d7a:	3008      	adds	r0, #8
    7d7c:	f7ff fed6 	bl	7b2c <CC_PalMemCopyPlat>
    7d80:	4620      	mov	r0, r4
    7d82:	bd10      	pop	{r4, pc}
    7d84:	2220      	movs	r2, #32
    7d86:	4907      	ldr	r1, [pc, #28]	; (7da4 <InitHashDrv+0x50>)
    7d88:	3008      	adds	r0, #8
    7d8a:	f7ff fecf 	bl	7b2c <CC_PalMemCopyPlat>
    7d8e:	2000      	movs	r0, #0
    7d90:	bd10      	pop	{r4, pc}
    7d92:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    7d96:	4770      	bx	lr
    7d98:	00f30001 	.word	0x00f30001
    7d9c:	00009b3c 	.word	0x00009b3c
    7da0:	00009b08 	.word	0x00009b08
    7da4:	00009b1c 	.word	0x00009b1c

00007da8 <ProcessHashDrv>:
    7da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dac:	2900      	cmp	r1, #0
    7dae:	f000 80ef 	beq.w	7f90 <ProcessHashDrv+0x1e8>
    7db2:	4604      	mov	r4, r0
    7db4:	2800      	cmp	r0, #0
    7db6:	f000 80ef 	beq.w	7f98 <ProcessHashDrv+0x1f0>
    7dba:	6803      	ldr	r3, [r0, #0]
    7dbc:	4617      	mov	r7, r2
    7dbe:	460e      	mov	r6, r1
    7dc0:	2b00      	cmp	r3, #0
    7dc2:	f000 80b9 	beq.w	7f38 <ProcessHashDrv+0x190>
    7dc6:	3b01      	subs	r3, #1
    7dc8:	2b01      	cmp	r3, #1
    7dca:	f200 80cd 	bhi.w	7f68 <ProcessHashDrv+0x1c0>
    7dce:	f04f 31ff 	mov.w	r1, #4294967295
    7dd2:	4873      	ldr	r0, [pc, #460]	; (7fa0 <ProcessHashDrv+0x1f8>)
    7dd4:	f04f 0802 	mov.w	r8, #2
    7dd8:	f7fe fdee 	bl	69b8 <CC_PalMutexLock>
    7ddc:	2800      	cmp	r0, #0
    7dde:	f040 80b5 	bne.w	7f4c <ProcessHashDrv+0x1a4>
    7de2:	2000      	movs	r0, #0
    7de4:	f7fe fe18 	bl	6a18 <CC_PalPowerSaveModeSelect>
    7de8:	4605      	mov	r5, r0
    7dea:	2800      	cmp	r0, #0
    7dec:	f040 80b8 	bne.w	7f60 <ProcessHashDrv+0x1b8>
    7df0:	4a6c      	ldr	r2, [pc, #432]	; (7fa4 <ProcessHashDrv+0x1fc>)
    7df2:	6813      	ldr	r3, [r2, #0]
    7df4:	2b00      	cmp	r3, #0
    7df6:	d1fc      	bne.n	7df2 <ProcessHashDrv+0x4a>
    7df8:	486b      	ldr	r0, [pc, #428]	; (7fa8 <ProcessHashDrv+0x200>)
    7dfa:	6803      	ldr	r3, [r0, #0]
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	d1fc      	bne.n	7dfa <ProcessHashDrv+0x52>
    7e00:	f04f 30ff 	mov.w	r0, #4294967295
    7e04:	f7fe fd32 	bl	686c <CC_HalClearInterruptBit>
    7e08:	4b68      	ldr	r3, [pc, #416]	; (7fac <ProcessHashDrv+0x204>)
    7e0a:	6818      	ldr	r0, [r3, #0]
    7e0c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    7e10:	f7fe fd3a 	bl	6888 <CC_HalMaskInterrupt>
    7e14:	2301      	movs	r3, #1
    7e16:	2007      	movs	r0, #7
    7e18:	4a65      	ldr	r2, [pc, #404]	; (7fb0 <ProcessHashDrv+0x208>)
    7e1a:	4966      	ldr	r1, [pc, #408]	; (7fb4 <ProcessHashDrv+0x20c>)
    7e1c:	6013      	str	r3, [r2, #0]
    7e1e:	6008      	str	r0, [r1, #0]
    7e20:	f842 3c54 	str.w	r3, [r2, #-84]
    7e24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7e26:	4b64      	ldr	r3, [pc, #400]	; (7fb8 <ProcessHashDrv+0x210>)
    7e28:	3a48      	subs	r2, #72	; 0x48
    7e2a:	6019      	str	r1, [r3, #0]
    7e2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7e2e:	6011      	str	r1, [r2, #0]
    7e30:	f843 8c0c 	str.w	r8, [r3, #-12]
    7e34:	6823      	ldr	r3, [r4, #0]
    7e36:	b163      	cbz	r3, 7e52 <ProcessHashDrv+0xaa>
    7e38:	3b01      	subs	r3, #1
    7e3a:	2b01      	cmp	r3, #1
    7e3c:	d818      	bhi.n	7e70 <ProcessHashDrv+0xc8>
    7e3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7e40:	4b5e      	ldr	r3, [pc, #376]	; (7fbc <ProcessHashDrv+0x214>)
    7e42:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
    7e46:	6019      	str	r1, [r3, #0]
    7e48:	6a21      	ldr	r1, [r4, #32]
    7e4a:	6011      	str	r1, [r2, #0]
    7e4c:	69e2      	ldr	r2, [r4, #28]
    7e4e:	f843 2c08 	str.w	r2, [r3, #-8]
    7e52:	69a1      	ldr	r1, [r4, #24]
    7e54:	4b5a      	ldr	r3, [pc, #360]	; (7fc0 <ProcessHashDrv+0x218>)
    7e56:	4a5b      	ldr	r2, [pc, #364]	; (7fc4 <ProcessHashDrv+0x21c>)
    7e58:	6019      	str	r1, [r3, #0]
    7e5a:	6961      	ldr	r1, [r4, #20]
    7e5c:	6011      	str	r1, [r2, #0]
    7e5e:	6921      	ldr	r1, [r4, #16]
    7e60:	f843 1c08 	str.w	r1, [r3, #-8]
    7e64:	68e1      	ldr	r1, [r4, #12]
    7e66:	f842 1c08 	str.w	r1, [r2, #-8]
    7e6a:	68a2      	ldr	r2, [r4, #8]
    7e6c:	f843 2c10 	str.w	r2, [r3, #-16]
    7e70:	4a55      	ldr	r2, [pc, #340]	; (7fc8 <ProcessHashDrv+0x220>)
    7e72:	6813      	ldr	r3, [r2, #0]
    7e74:	2b00      	cmp	r3, #0
    7e76:	d1fc      	bne.n	7e72 <ProcessHashDrv+0xca>
    7e78:	2f00      	cmp	r7, #0
    7e7a:	d059      	beq.n	7f30 <ProcessHashDrv+0x188>
    7e7c:	6863      	ldr	r3, [r4, #4]
    7e7e:	2040      	movs	r0, #64	; 0x40
    7e80:	2b01      	cmp	r3, #1
    7e82:	bf04      	itt	eq
    7e84:	4a51      	ldreq	r2, [pc, #324]	; (7fcc <ProcessHashDrv+0x224>)
    7e86:	6013      	streq	r3, [r2, #0]
    7e88:	6831      	ldr	r1, [r6, #0]
    7e8a:	4a51      	ldr	r2, [pc, #324]	; (7fd0 <ProcessHashDrv+0x228>)
    7e8c:	4b51      	ldr	r3, [pc, #324]	; (7fd4 <ProcessHashDrv+0x22c>)
    7e8e:	6011      	str	r1, [r2, #0]
    7e90:	601f      	str	r7, [r3, #0]
    7e92:	f7fe fcff 	bl	6894 <CC_HalWaitInterrupt>
    7e96:	4605      	mov	r5, r0
    7e98:	4a4b      	ldr	r2, [pc, #300]	; (7fc8 <ProcessHashDrv+0x220>)
    7e9a:	6813      	ldr	r3, [r2, #0]
    7e9c:	2b00      	cmp	r3, #0
    7e9e:	d1fc      	bne.n	7e9a <ProcessHashDrv+0xf2>
    7ea0:	4a41      	ldr	r2, [pc, #260]	; (7fa8 <ProcessHashDrv+0x200>)
    7ea2:	6813      	ldr	r3, [r2, #0]
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d1fc      	bne.n	7ea2 <ProcessHashDrv+0xfa>
    7ea8:	6823      	ldr	r3, [r4, #0]
    7eaa:	b15b      	cbz	r3, 7ec4 <ProcessHashDrv+0x11c>
    7eac:	3b01      	subs	r3, #1
    7eae:	2b01      	cmp	r3, #1
    7eb0:	d816      	bhi.n	7ee0 <ProcessHashDrv+0x138>
    7eb2:	4b42      	ldr	r3, [pc, #264]	; (7fbc <ProcessHashDrv+0x214>)
    7eb4:	4a48      	ldr	r2, [pc, #288]	; (7fd8 <ProcessHashDrv+0x230>)
    7eb6:	6819      	ldr	r1, [r3, #0]
    7eb8:	3b08      	subs	r3, #8
    7eba:	6261      	str	r1, [r4, #36]	; 0x24
    7ebc:	6812      	ldr	r2, [r2, #0]
    7ebe:	6222      	str	r2, [r4, #32]
    7ec0:	681b      	ldr	r3, [r3, #0]
    7ec2:	61e3      	str	r3, [r4, #28]
    7ec4:	4b3e      	ldr	r3, [pc, #248]	; (7fc0 <ProcessHashDrv+0x218>)
    7ec6:	4a3f      	ldr	r2, [pc, #252]	; (7fc4 <ProcessHashDrv+0x21c>)
    7ec8:	6819      	ldr	r1, [r3, #0]
    7eca:	3a08      	subs	r2, #8
    7ecc:	61a1      	str	r1, [r4, #24]
    7ece:	6891      	ldr	r1, [r2, #8]
    7ed0:	3b10      	subs	r3, #16
    7ed2:	6161      	str	r1, [r4, #20]
    7ed4:	6899      	ldr	r1, [r3, #8]
    7ed6:	6121      	str	r1, [r4, #16]
    7ed8:	6812      	ldr	r2, [r2, #0]
    7eda:	60e2      	str	r2, [r4, #12]
    7edc:	681b      	ldr	r3, [r3, #0]
    7ede:	60a3      	str	r3, [r4, #8]
    7ee0:	2101      	movs	r1, #1
    7ee2:	2300      	movs	r3, #0
    7ee4:	4834      	ldr	r0, [pc, #208]	; (7fb8 <ProcessHashDrv+0x210>)
    7ee6:	4a3d      	ldr	r2, [pc, #244]	; (7fdc <ProcessHashDrv+0x234>)
    7ee8:	6800      	ldr	r0, [r0, #0]
    7eea:	64a0      	str	r0, [r4, #72]	; 0x48
    7eec:	6810      	ldr	r0, [r2, #0]
    7eee:	64e0      	str	r0, [r4, #76]	; 0x4c
    7ef0:	f842 1c0c 	str.w	r1, [r2, #-12]
    7ef4:	4835      	ldr	r0, [pc, #212]	; (7fcc <ProcessHashDrv+0x224>)
    7ef6:	493a      	ldr	r1, [pc, #232]	; (7fe0 <ProcessHashDrv+0x238>)
    7ef8:	6003      	str	r3, [r0, #0]
    7efa:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    7efe:	600b      	str	r3, [r1, #0]
    7f00:	6813      	ldr	r3, [r2, #0]
    7f02:	2b00      	cmp	r3, #0
    7f04:	d1fc      	bne.n	7f00 <ProcessHashDrv+0x158>
    7f06:	4a2a      	ldr	r2, [pc, #168]	; (7fb0 <ProcessHashDrv+0x208>)
    7f08:	6013      	str	r3, [r2, #0]
    7f0a:	2d00      	cmp	r5, #0
    7f0c:	d13a      	bne.n	7f84 <ProcessHashDrv+0x1dc>
    7f0e:	4b27      	ldr	r3, [pc, #156]	; (7fac <ProcessHashDrv+0x204>)
    7f10:	6818      	ldr	r0, [r3, #0]
    7f12:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7f16:	f7fe fcb7 	bl	6888 <CC_HalMaskInterrupt>
    7f1a:	2001      	movs	r0, #1
    7f1c:	f7fe fd7c 	bl	6a18 <CC_PalPowerSaveModeSelect>
    7f20:	bb60      	cbnz	r0, 7f7c <ProcessHashDrv+0x1d4>
    7f22:	481f      	ldr	r0, [pc, #124]	; (7fa0 <ProcessHashDrv+0x1f8>)
    7f24:	f7fe fd50 	bl	69c8 <CC_PalMutexUnlock>
    7f28:	bb10      	cbnz	r0, 7f70 <ProcessHashDrv+0x1c8>
    7f2a:	4628      	mov	r0, r5
    7f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f30:	2204      	movs	r2, #4
    7f32:	4b2b      	ldr	r3, [pc, #172]	; (7fe0 <ProcessHashDrv+0x238>)
    7f34:	601a      	str	r2, [r3, #0]
    7f36:	e7af      	b.n	7e98 <ProcessHashDrv+0xf0>
    7f38:	f04f 31ff 	mov.w	r1, #4294967295
    7f3c:	4818      	ldr	r0, [pc, #96]	; (7fa0 <ProcessHashDrv+0x1f8>)
    7f3e:	f04f 0801 	mov.w	r8, #1
    7f42:	f7fe fd39 	bl	69b8 <CC_PalMutexLock>
    7f46:	2800      	cmp	r0, #0
    7f48:	f43f af4b 	beq.w	7de2 <ProcessHashDrv+0x3a>
    7f4c:	4825      	ldr	r0, [pc, #148]	; (7fe4 <ProcessHashDrv+0x23c>)
    7f4e:	f7fe f9c3 	bl	62d8 <CC_PalAbort>
    7f52:	2000      	movs	r0, #0
    7f54:	f7fe fd60 	bl	6a18 <CC_PalPowerSaveModeSelect>
    7f58:	4605      	mov	r5, r0
    7f5a:	2800      	cmp	r0, #0
    7f5c:	f43f af48 	beq.w	7df0 <ProcessHashDrv+0x48>
    7f60:	4821      	ldr	r0, [pc, #132]	; (7fe8 <ProcessHashDrv+0x240>)
    7f62:	f7fe f9b9 	bl	62d8 <CC_PalAbort>
    7f66:	e743      	b.n	7df0 <ProcessHashDrv+0x48>
    7f68:	4d20      	ldr	r5, [pc, #128]	; (7fec <ProcessHashDrv+0x244>)
    7f6a:	4628      	mov	r0, r5
    7f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f70:	481f      	ldr	r0, [pc, #124]	; (7ff0 <ProcessHashDrv+0x248>)
    7f72:	f7fe f9b1 	bl	62d8 <CC_PalAbort>
    7f76:	4628      	mov	r0, r5
    7f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f7c:	481d      	ldr	r0, [pc, #116]	; (7ff4 <ProcessHashDrv+0x24c>)
    7f7e:	f7fe f9ab 	bl	62d8 <CC_PalAbort>
    7f82:	e7ce      	b.n	7f22 <ProcessHashDrv+0x17a>
    7f84:	2110      	movs	r1, #16
    7f86:	f104 0008 	add.w	r0, r4, #8
    7f8a:	f7ff fdd3 	bl	7b34 <CC_PalMemSetZeroPlat>
    7f8e:	e7be      	b.n	7f0e <ProcessHashDrv+0x166>
    7f90:	4d19      	ldr	r5, [pc, #100]	; (7ff8 <ProcessHashDrv+0x250>)
    7f92:	4628      	mov	r0, r5
    7f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f98:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
    7f9c:	e7c5      	b.n	7f2a <ProcessHashDrv+0x182>
    7f9e:	bf00      	nop
    7fa0:	200000ec 	.word	0x200000ec
    7fa4:	5084191c 	.word	0x5084191c
    7fa8:	50841c20 	.word	0x50841c20
    7fac:	50841a04 	.word	0x50841a04
    7fb0:	50841818 	.word	0x50841818
    7fb4:	50841900 	.word	0x50841900
    7fb8:	508417cc 	.word	0x508417cc
    7fbc:	5084165c 	.word	0x5084165c
    7fc0:	50841650 	.word	0x50841650
    7fc4:	5084164c 	.word	0x5084164c
    7fc8:	50841910 	.word	0x50841910
    7fcc:	50841684 	.word	0x50841684
    7fd0:	50841c28 	.word	0x50841c28
    7fd4:	50841c2c 	.word	0x50841c2c
    7fd8:	50841658 	.word	0x50841658
    7fdc:	508417d0 	.word	0x508417d0
    7fe0:	508417c8 	.word	0x508417c8
    7fe4:	00009a50 	.word	0x00009a50
    7fe8:	00009a68 	.word	0x00009a68
    7fec:	00f30001 	.word	0x00f30001
    7ff0:	00009aa8 	.word	0x00009aa8
    7ff4:	00009a88 	.word	0x00009a88
    7ff8:	00f30003 	.word	0x00f30003

00007ffc <FinishHashDrv>:
    7ffc:	2800      	cmp	r0, #0
    7ffe:	d03a      	beq.n	8076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    8000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8004:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
    8008:	fa92 f882 	rev.w	r8, r2
    800c:	fa93 fe83 	rev.w	lr, r3
    8010:	6a02      	ldr	r2, [r0, #32]
    8012:	6a43      	ldr	r3, [r0, #36]	; 0x24
    8014:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
    8018:	ba12      	rev	r2, r2
    801a:	ba24      	rev	r4, r4
    801c:	ba1b      	rev	r3, r3
    801e:	6104      	str	r4, [r0, #16]
    8020:	6202      	str	r2, [r0, #32]
    8022:	6a84      	ldr	r4, [r0, #40]	; 0x28
    8024:	6b82      	ldr	r2, [r0, #56]	; 0x38
    8026:	6243      	str	r3, [r0, #36]	; 0x24
    8028:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    802a:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
    802e:	ba09      	rev	r1, r1
    8030:	ba36      	rev	r6, r6
    8032:	ba2d      	rev	r5, r5
    8034:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    8036:	6086      	str	r6, [r0, #8]
    8038:	60c5      	str	r5, [r0, #12]
    803a:	6b06      	ldr	r6, [r0, #48]	; 0x30
    803c:	6b45      	ldr	r5, [r0, #52]	; 0x34
    803e:	6141      	str	r1, [r0, #20]
    8040:	fa94 fc84 	rev.w	ip, r4
    8044:	ba19      	rev	r1, r3
    8046:	ba14      	rev	r4, r2
    8048:	6c43      	ldr	r3, [r0, #68]	; 0x44
    804a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    804c:	ba3f      	rev	r7, r7
    804e:	ba36      	rev	r6, r6
    8050:	ba2d      	rev	r5, r5
    8052:	ba12      	rev	r2, r2
    8054:	ba1b      	rev	r3, r3
    8056:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
    805a:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    805e:	f8c0 8018 	str.w	r8, [r0, #24]
    8062:	f8c0 e01c 	str.w	lr, [r0, #28]
    8066:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    806a:	62c7      	str	r7, [r0, #44]	; 0x2c
    806c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    8070:	2000      	movs	r0, #0
    8072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8076:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    807a:	4770      	bx	lr

0000807c <cc_mbedtls_aes_init>:
    807c:	b510      	push	{r4, lr}
    807e:	4604      	mov	r4, r0
    8080:	b130      	cbz	r0, 8090 <cc_mbedtls_aes_init+0x14>
    8082:	2200      	movs	r2, #0
    8084:	2301      	movs	r3, #1
    8086:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
    808a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    808e:	bd10      	pop	{r4, pc}
    8090:	4801      	ldr	r0, [pc, #4]	; (8098 <cc_mbedtls_aes_init+0x1c>)
    8092:	f7fe f921 	bl	62d8 <CC_PalAbort>
    8096:	e7f4      	b.n	8082 <cc_mbedtls_aes_init+0x6>
    8098:	00009b5c 	.word	0x00009b5c

0000809c <cc_mbedtls_aes_free>:
    809c:	b118      	cbz	r0, 80a6 <cc_mbedtls_aes_free+0xa>
    809e:	2274      	movs	r2, #116	; 0x74
    80a0:	2100      	movs	r1, #0
    80a2:	f7ff bd45 	b.w	7b30 <CC_PalMemSetPlat>
    80a6:	4770      	bx	lr

000080a8 <cc_mbedtls_aes_setkey_enc>:
    80a8:	b188      	cbz	r0, 80ce <cc_mbedtls_aes_setkey_enc+0x26>
    80aa:	b199      	cbz	r1, 80d4 <cc_mbedtls_aes_setkey_enc+0x2c>
    80ac:	b510      	push	{r4, lr}
    80ae:	2400      	movs	r4, #0
    80b0:	2a80      	cmp	r2, #128	; 0x80
    80b2:	6384      	str	r4, [r0, #56]	; 0x38
    80b4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    80b8:	d106      	bne.n	80c8 <cc_mbedtls_aes_setkey_enc+0x20>
    80ba:	6304      	str	r4, [r0, #48]	; 0x30
    80bc:	2210      	movs	r2, #16
    80be:	3010      	adds	r0, #16
    80c0:	f7ff fd34 	bl	7b2c <CC_PalMemCopyPlat>
    80c4:	4620      	mov	r0, r4
    80c6:	bd10      	pop	{r4, pc}
    80c8:	f06f 001f 	mvn.w	r0, #31
    80cc:	bd10      	pop	{r4, pc}
    80ce:	f06f 0021 	mvn.w	r0, #33	; 0x21
    80d2:	4770      	bx	lr
    80d4:	f06f 001f 	mvn.w	r0, #31
    80d8:	4770      	bx	lr
    80da:	bf00      	nop

000080dc <cc_mbedtls_aes_crypt_ecb>:
    80dc:	b328      	cbz	r0, 812a <cc_mbedtls_aes_crypt_ecb+0x4e>
    80de:	b322      	cbz	r2, 812a <cc_mbedtls_aes_crypt_ecb+0x4e>
    80e0:	b31b      	cbz	r3, 812a <cc_mbedtls_aes_crypt_ecb+0x4e>
    80e2:	2901      	cmp	r1, #1
    80e4:	d821      	bhi.n	812a <cc_mbedtls_aes_crypt_ecb+0x4e>
    80e6:	b570      	push	{r4, r5, r6, lr}
    80e8:	4604      	mov	r4, r0
    80ea:	6b81      	ldr	r1, [r0, #56]	; 0x38
    80ec:	b086      	sub	sp, #24
    80ee:	d017      	beq.n	8120 <cc_mbedtls_aes_crypt_ecb+0x44>
    80f0:	2901      	cmp	r1, #1
    80f2:	d117      	bne.n	8124 <cc_mbedtls_aes_crypt_ecb+0x48>
    80f4:	2510      	movs	r5, #16
    80f6:	2100      	movs	r1, #0
    80f8:	eb0d 0605 	add.w	r6, sp, r5
    80fc:	6361      	str	r1, [r4, #52]	; 0x34
    80fe:	4610      	mov	r0, r2
    8100:	4629      	mov	r1, r5
    8102:	9500      	str	r5, [sp, #0]
    8104:	aa02      	add	r2, sp, #8
    8106:	9601      	str	r6, [sp, #4]
    8108:	f7ff fdec 	bl	7ce4 <SetDataBuffersInfo>
    810c:	b950      	cbnz	r0, 8124 <cc_mbedtls_aes_crypt_ecb+0x48>
    810e:	462b      	mov	r3, r5
    8110:	4632      	mov	r2, r6
    8112:	4620      	mov	r0, r4
    8114:	a902      	add	r1, sp, #8
    8116:	f000 f8eb 	bl	82f0 <ProcessAesDrv>
    811a:	b918      	cbnz	r0, 8124 <cc_mbedtls_aes_crypt_ecb+0x48>
    811c:	b006      	add	sp, #24
    811e:	bd70      	pop	{r4, r5, r6, pc}
    8120:	2900      	cmp	r1, #0
    8122:	d0e7      	beq.n	80f4 <cc_mbedtls_aes_crypt_ecb+0x18>
    8124:	f06f 0021 	mvn.w	r0, #33	; 0x21
    8128:	e7f8      	b.n	811c <cc_mbedtls_aes_crypt_ecb+0x40>
    812a:	f06f 0021 	mvn.w	r0, #33	; 0x21
    812e:	4770      	bx	lr

00008130 <CC_PalDataBufferAttrGet>:
    8130:	2000      	movs	r0, #0
    8132:	7018      	strb	r0, [r3, #0]
    8134:	4770      	bx	lr
    8136:	bf00      	nop

00008138 <LoadAesKey>:
    8138:	2800      	cmp	r0, #0
    813a:	d04d      	beq.n	81d8 <LoadAesKey+0xa0>
    813c:	b538      	push	{r3, r4, r5, lr}
    813e:	4604      	mov	r4, r0
    8140:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    8144:	2802      	cmp	r0, #2
    8146:	d016      	beq.n	8176 <LoadAesKey+0x3e>
    8148:	2803      	cmp	r0, #3
    814a:	d03d      	beq.n	81c8 <LoadAesKey+0x90>
    814c:	2800      	cmp	r0, #0
    814e:	d030      	beq.n	81b2 <LoadAesKey+0x7a>
    8150:	4823      	ldr	r0, [pc, #140]	; (81e0 <LoadAesKey+0xa8>)
    8152:	4d24      	ldr	r5, [pc, #144]	; (81e4 <LoadAesKey+0xac>)
    8154:	682a      	ldr	r2, [r5, #0]
    8156:	4b24      	ldr	r3, [pc, #144]	; (81e8 <LoadAesKey+0xb0>)
    8158:	6812      	ldr	r2, [r2, #0]
    815a:	4924      	ldr	r1, [pc, #144]	; (81ec <LoadAesKey+0xb4>)
    815c:	601a      	str	r2, [r3, #0]
    815e:	682b      	ldr	r3, [r5, #0]
    8160:	4a23      	ldr	r2, [pc, #140]	; (81f0 <LoadAesKey+0xb8>)
    8162:	685c      	ldr	r4, [r3, #4]
    8164:	4b23      	ldr	r3, [pc, #140]	; (81f4 <LoadAesKey+0xbc>)
    8166:	600c      	str	r4, [r1, #0]
    8168:	6829      	ldr	r1, [r5, #0]
    816a:	6889      	ldr	r1, [r1, #8]
    816c:	6011      	str	r1, [r2, #0]
    816e:	682a      	ldr	r2, [r5, #0]
    8170:	68d2      	ldr	r2, [r2, #12]
    8172:	601a      	str	r2, [r3, #0]
    8174:	bd38      	pop	{r3, r4, r5, pc}
    8176:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8178:	6c20      	ldr	r0, [r4, #64]	; 0x40
    817a:	f000 fbcb 	bl	8914 <kmu_validate_slot_and_size_no_kdr>
    817e:	4d19      	ldr	r5, [pc, #100]	; (81e4 <LoadAesKey+0xac>)
    8180:	2800      	cmp	r0, #0
    8182:	d1e7      	bne.n	8154 <LoadAesKey+0x1c>
    8184:	682a      	ldr	r2, [r5, #0]
    8186:	4b18      	ldr	r3, [pc, #96]	; (81e8 <LoadAesKey+0xb0>)
    8188:	6810      	ldr	r0, [r2, #0]
    818a:	4918      	ldr	r1, [pc, #96]	; (81ec <LoadAesKey+0xb4>)
    818c:	6018      	str	r0, [r3, #0]
    818e:	6828      	ldr	r0, [r5, #0]
    8190:	4a17      	ldr	r2, [pc, #92]	; (81f0 <LoadAesKey+0xb8>)
    8192:	6840      	ldr	r0, [r0, #4]
    8194:	6008      	str	r0, [r1, #0]
    8196:	6829      	ldr	r1, [r5, #0]
    8198:	6889      	ldr	r1, [r1, #8]
    819a:	6011      	str	r1, [r2, #0]
    819c:	682a      	ldr	r2, [r5, #0]
    819e:	68d2      	ldr	r2, [r2, #12]
    81a0:	60da      	str	r2, [r3, #12]
    81a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    81a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
    81a6:	f000 fbd9 	bl	895c <kmu_load_key_aes>
    81aa:	2800      	cmp	r0, #0
    81ac:	d1d2      	bne.n	8154 <LoadAesKey+0x1c>
    81ae:	2000      	movs	r0, #0
    81b0:	bd38      	pop	{r3, r4, r5, pc}
    81b2:	6921      	ldr	r1, [r4, #16]
    81b4:	4a0c      	ldr	r2, [pc, #48]	; (81e8 <LoadAesKey+0xb0>)
    81b6:	4b0d      	ldr	r3, [pc, #52]	; (81ec <LoadAesKey+0xb4>)
    81b8:	6011      	str	r1, [r2, #0]
    81ba:	6961      	ldr	r1, [r4, #20]
    81bc:	6019      	str	r1, [r3, #0]
    81be:	69a1      	ldr	r1, [r4, #24]
    81c0:	6091      	str	r1, [r2, #8]
    81c2:	69e2      	ldr	r2, [r4, #28]
    81c4:	609a      	str	r2, [r3, #8]
    81c6:	bd38      	pop	{r3, r4, r5, pc}
    81c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    81ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
    81cc:	f000 fbb8 	bl	8940 <kmu_validate_kdr_slot_and_size>
    81d0:	2800      	cmp	r0, #0
    81d2:	d1be      	bne.n	8152 <LoadAesKey+0x1a>
    81d4:	4d03      	ldr	r5, [pc, #12]	; (81e4 <LoadAesKey+0xac>)
    81d6:	e7d5      	b.n	8184 <LoadAesKey+0x4c>
    81d8:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
    81dc:	4770      	bx	lr
    81de:	bf00      	nop
    81e0:	00f10009 	.word	0x00f10009
    81e4:	200000dc 	.word	0x200000dc
    81e8:	50841400 	.word	0x50841400
    81ec:	50841404 	.word	0x50841404
    81f0:	50841408 	.word	0x50841408
    81f4:	5084140c 	.word	0x5084140c

000081f8 <InitAes.part.0>:
    81f8:	b510      	push	{r4, lr}
    81fa:	4604      	mov	r4, r0
    81fc:	4a31      	ldr	r2, [pc, #196]	; (82c4 <InitAes.part.0+0xcc>)
    81fe:	6813      	ldr	r3, [r2, #0]
    8200:	2b00      	cmp	r3, #0
    8202:	d1fc      	bne.n	81fe <InitAes.part.0+0x6>
    8204:	4a30      	ldr	r2, [pc, #192]	; (82c8 <InitAes.part.0+0xd0>)
    8206:	6813      	ldr	r3, [r2, #0]
    8208:	2b00      	cmp	r3, #0
    820a:	d1fc      	bne.n	8206 <InitAes.part.0+0xe>
    820c:	4a2f      	ldr	r2, [pc, #188]	; (82cc <InitAes.part.0+0xd4>)
    820e:	6813      	ldr	r3, [r2, #0]
    8210:	2b00      	cmp	r3, #0
    8212:	d1fc      	bne.n	820e <InitAes.part.0+0x16>
    8214:	4a2e      	ldr	r2, [pc, #184]	; (82d0 <InitAes.part.0+0xd8>)
    8216:	6813      	ldr	r3, [r2, #0]
    8218:	2b00      	cmp	r3, #0
    821a:	d1fc      	bne.n	8216 <InitAes.part.0+0x1e>
    821c:	4a2d      	ldr	r2, [pc, #180]	; (82d4 <InitAes.part.0+0xdc>)
    821e:	6813      	ldr	r3, [r2, #0]
    8220:	2b00      	cmp	r3, #0
    8222:	d1fc      	bne.n	821e <InitAes.part.0+0x26>
    8224:	4a2c      	ldr	r2, [pc, #176]	; (82d8 <InitAes.part.0+0xe0>)
    8226:	6813      	ldr	r3, [r2, #0]
    8228:	2b00      	cmp	r3, #0
    822a:	d1fc      	bne.n	8226 <InitAes.part.0+0x2e>
    822c:	f04f 30ff 	mov.w	r0, #4294967295
    8230:	f7fe fb1c 	bl	686c <CC_HalClearInterruptBit>
    8234:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8236:	f023 0304 	bic.w	r3, r3, #4
    823a:	2b03      	cmp	r3, #3
    823c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    823e:	d036      	beq.n	82ae <InitAes.part.0+0xb6>
    8240:	2b01      	cmp	r3, #1
    8242:	4b26      	ldr	r3, [pc, #152]	; (82dc <InitAes.part.0+0xe4>)
    8244:	6818      	ldr	r0, [r3, #0]
    8246:	bf0c      	ite	eq
    8248:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
    824c:	f020 0020 	bicne.w	r0, r0, #32
    8250:	f7fe fb1a 	bl	6888 <CC_HalMaskInterrupt>
    8254:	2101      	movs	r1, #1
    8256:	4b22      	ldr	r3, [pc, #136]	; (82e0 <InitAes.part.0+0xe8>)
    8258:	4a1a      	ldr	r2, [pc, #104]	; (82c4 <InitAes.part.0+0xcc>)
    825a:	6019      	str	r1, [r3, #0]
    825c:	6813      	ldr	r3, [r2, #0]
    825e:	2b00      	cmp	r3, #0
    8260:	d1fc      	bne.n	825c <InitAes.part.0+0x64>
    8262:	4a19      	ldr	r2, [pc, #100]	; (82c8 <InitAes.part.0+0xd0>)
    8264:	6813      	ldr	r3, [r2, #0]
    8266:	2b00      	cmp	r3, #0
    8268:	d1fc      	bne.n	8264 <InitAes.part.0+0x6c>
    826a:	491e      	ldr	r1, [pc, #120]	; (82e4 <InitAes.part.0+0xec>)
    826c:	4a15      	ldr	r2, [pc, #84]	; (82c4 <InitAes.part.0+0xcc>)
    826e:	600b      	str	r3, [r1, #0]
    8270:	6813      	ldr	r3, [r2, #0]
    8272:	2b00      	cmp	r3, #0
    8274:	d1fc      	bne.n	8270 <InitAes.part.0+0x78>
    8276:	4a14      	ldr	r2, [pc, #80]	; (82c8 <InitAes.part.0+0xd0>)
    8278:	6813      	ldr	r3, [r2, #0]
    827a:	2b00      	cmp	r3, #0
    827c:	d1fc      	bne.n	8278 <InitAes.part.0+0x80>
    827e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8280:	f022 0104 	bic.w	r1, r2, #4
    8284:	2903      	cmp	r1, #3
    8286:	bf18      	it	ne
    8288:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
    828a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    828e:	bf18      	it	ne
    8290:	f003 0301 	andne.w	r3, r3, #1
    8294:	4914      	ldr	r1, [pc, #80]	; (82e8 <InitAes.part.0+0xf0>)
    8296:	f002 021c 	and.w	r2, r2, #28
    829a:	4313      	orrs	r3, r2
    829c:	600b      	str	r3, [r1, #0]
    829e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    82a0:	2b07      	cmp	r3, #7
    82a2:	d102      	bne.n	82aa <InitAes.part.0+0xb2>
    82a4:	2201      	movs	r2, #1
    82a6:	4b11      	ldr	r3, [pc, #68]	; (82ec <InitAes.part.0+0xf4>)
    82a8:	601a      	str	r2, [r3, #0]
    82aa:	2000      	movs	r0, #0
    82ac:	bd10      	pop	{r4, pc}
    82ae:	2b01      	cmp	r3, #1
    82b0:	4b0a      	ldr	r3, [pc, #40]	; (82dc <InitAes.part.0+0xe4>)
    82b2:	6818      	ldr	r0, [r3, #0]
    82b4:	bf0c      	ite	eq
    82b6:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
    82ba:	f020 0010 	bicne.w	r0, r0, #16
    82be:	f7fe fae3 	bl	6888 <CC_HalMaskInterrupt>
    82c2:	e7c7      	b.n	8254 <InitAes.part.0+0x5c>
    82c4:	50841910 	.word	0x50841910
    82c8:	50841470 	.word	0x50841470
    82cc:	50841d20 	.word	0x50841d20
    82d0:	50841c20 	.word	0x50841c20
    82d4:	50841d38 	.word	0x50841d38
    82d8:	50841c38 	.word	0x50841c38
    82dc:	50841a04 	.word	0x50841a04
    82e0:	50841900 	.word	0x50841900
    82e4:	508414bc 	.word	0x508414bc
    82e8:	508414c0 	.word	0x508414c0
    82ec:	5084147c 	.word	0x5084147c

000082f0 <ProcessAesDrv>:
    82f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82f4:	b087      	sub	sp, #28
    82f6:	2900      	cmp	r1, #0
    82f8:	f000 80a5 	beq.w	8446 <ProcessAesDrv+0x156>
    82fc:	4616      	mov	r6, r2
    82fe:	2a00      	cmp	r2, #0
    8300:	f000 80a1 	beq.w	8446 <ProcessAesDrv+0x156>
    8304:	4604      	mov	r4, r0
    8306:	2800      	cmp	r0, #0
    8308:	f000 8141 	beq.w	858e <ProcessAesDrv+0x29e>
    830c:	461f      	mov	r7, r3
    830e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    8310:	460d      	mov	r5, r1
    8312:	2b00      	cmp	r3, #0
    8314:	d150      	bne.n	83b8 <ProcessAesDrv+0xc8>
    8316:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    831a:	d252      	bcs.n	83c2 <ProcessAesDrv+0xd2>
    831c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    8320:	2b04      	cmp	r3, #4
    8322:	f000 810b 	beq.w	853c <ProcessAesDrv+0x24c>
    8326:	f04f 0800 	mov.w	r8, #0
    832a:	f04f 31ff 	mov.w	r1, #4294967295
    832e:	48a9      	ldr	r0, [pc, #676]	; (85d4 <ProcessAesDrv+0x2e4>)
    8330:	f7fe fb42 	bl	69b8 <CC_PalMutexLock>
    8334:	2800      	cmp	r0, #0
    8336:	f040 80e0 	bne.w	84fa <ProcessAesDrv+0x20a>
    833a:	2000      	movs	r0, #0
    833c:	f7fe fb6c 	bl	6a18 <CC_PalPowerSaveModeSelect>
    8340:	2800      	cmp	r0, #0
    8342:	f040 80e3 	bne.w	850c <ProcessAesDrv+0x21c>
    8346:	2101      	movs	r1, #1
    8348:	4ba3      	ldr	r3, [pc, #652]	; (85d8 <ProcessAesDrv+0x2e8>)
    834a:	4aa4      	ldr	r2, [pc, #656]	; (85dc <ProcessAesDrv+0x2ec>)
    834c:	6019      	str	r1, [r3, #0]
    834e:	6813      	ldr	r3, [r2, #0]
    8350:	2b00      	cmp	r3, #0
    8352:	d1fc      	bne.n	834e <ProcessAesDrv+0x5e>
    8354:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8356:	2b03      	cmp	r3, #3
    8358:	dc39      	bgt.n	83ce <ProcessAesDrv+0xde>
    835a:	2b00      	cmp	r3, #0
    835c:	da3a      	bge.n	83d4 <ProcessAesDrv+0xe4>
    835e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8628 <ProcessAesDrv+0x338>
    8362:	4a9e      	ldr	r2, [pc, #632]	; (85dc <ProcessAesDrv+0x2ec>)
    8364:	6813      	ldr	r3, [r2, #0]
    8366:	2b00      	cmp	r3, #0
    8368:	d1fc      	bne.n	8364 <ProcessAesDrv+0x74>
    836a:	f1b8 0f00 	cmp.w	r8, #0
    836e:	f040 80dc 	bne.w	852a <ProcessAesDrv+0x23a>
    8372:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8374:	f023 0304 	bic.w	r3, r3, #4
    8378:	2b03      	cmp	r3, #3
    837a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    837c:	d058      	beq.n	8430 <ProcessAesDrv+0x140>
    837e:	2b01      	cmp	r3, #1
    8380:	4b97      	ldr	r3, [pc, #604]	; (85e0 <ProcessAesDrv+0x2f0>)
    8382:	6818      	ldr	r0, [r3, #0]
    8384:	bf0c      	ite	eq
    8386:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
    838a:	f040 0020 	orrne.w	r0, r0, #32
    838e:	f7fe fa7b 	bl	6888 <CC_HalMaskInterrupt>
    8392:	2200      	movs	r2, #0
    8394:	4b90      	ldr	r3, [pc, #576]	; (85d8 <ProcessAesDrv+0x2e8>)
    8396:	2001      	movs	r0, #1
    8398:	601a      	str	r2, [r3, #0]
    839a:	f7fe fb3d 	bl	6a18 <CC_PalPowerSaveModeSelect>
    839e:	2800      	cmp	r0, #0
    83a0:	f040 80bf 	bne.w	8522 <ProcessAesDrv+0x232>
    83a4:	488b      	ldr	r0, [pc, #556]	; (85d4 <ProcessAesDrv+0x2e4>)
    83a6:	f7fe fb0f 	bl	69c8 <CC_PalMutexUnlock>
    83aa:	2800      	cmp	r0, #0
    83ac:	f040 80b2 	bne.w	8514 <ProcessAesDrv+0x224>
    83b0:	4648      	mov	r0, r9
    83b2:	b007      	add	sp, #28
    83b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83b8:	2b01      	cmp	r3, #1
    83ba:	d1af      	bne.n	831c <ProcessAesDrv+0x2c>
    83bc:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    83c0:	d3ac      	bcc.n	831c <ProcessAesDrv+0x2c>
    83c2:	f8df 9268 	ldr.w	r9, [pc, #616]	; 862c <ProcessAesDrv+0x33c>
    83c6:	4648      	mov	r0, r9
    83c8:	b007      	add	sp, #28
    83ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83ce:	3b06      	subs	r3, #6
    83d0:	2b01      	cmp	r3, #1
    83d2:	d8c4      	bhi.n	835e <ProcessAesDrv+0x6e>
    83d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    83d6:	2b01      	cmp	r3, #1
    83d8:	f200 80d6 	bhi.w	8588 <ProcessAesDrv+0x298>
    83dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    83de:	2b01      	cmp	r3, #1
    83e0:	d837      	bhi.n	8452 <ProcessAesDrv+0x162>
    83e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    83e4:	2b01      	cmp	r3, #1
    83e6:	f200 8134 	bhi.w	8652 <ProcessAesDrv+0x362>
    83ea:	4620      	mov	r0, r4
    83ec:	f7ff ff04 	bl	81f8 <InitAes.part.0>
    83f0:	4681      	mov	r9, r0
    83f2:	2800      	cmp	r0, #0
    83f4:	d1b5      	bne.n	8362 <ProcessAesDrv+0x72>
    83f6:	4620      	mov	r0, r4
    83f8:	f7ff fe9e 	bl	8138 <LoadAesKey>
    83fc:	4681      	mov	r9, r0
    83fe:	2800      	cmp	r0, #0
    8400:	d1af      	bne.n	8362 <ProcessAesDrv+0x72>
    8402:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8404:	2b07      	cmp	r3, #7
    8406:	d8aa      	bhi.n	835e <ProcessAesDrv+0x6e>
    8408:	a201      	add	r2, pc, #4	; (adr r2, 8410 <ProcessAesDrv+0x120>)
    840a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    840e:	bf00      	nop
    8410:	0000846f 	.word	0x0000846f
    8414:	00008459 	.word	0x00008459
    8418:	000085cb 	.word	0x000085cb
    841c:	00008459 	.word	0x00008459
    8420:	0000835f 	.word	0x0000835f
    8424:	0000835f 	.word	0x0000835f
    8428:	000085cb 	.word	0x000085cb
    842c:	00008459 	.word	0x00008459
    8430:	2b01      	cmp	r3, #1
    8432:	4b6b      	ldr	r3, [pc, #428]	; (85e0 <ProcessAesDrv+0x2f0>)
    8434:	6818      	ldr	r0, [r3, #0]
    8436:	bf0c      	ite	eq
    8438:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
    843c:	f040 0010 	orrne.w	r0, r0, #16
    8440:	f7fe fa22 	bl	6888 <CC_HalMaskInterrupt>
    8444:	e7a5      	b.n	8392 <ProcessAesDrv+0xa2>
    8446:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8630 <ProcessAesDrv+0x340>
    844a:	4648      	mov	r0, r9
    844c:	b007      	add	sp, #28
    844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8452:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8634 <ProcessAesDrv+0x344>
    8456:	e784      	b.n	8362 <ProcessAesDrv+0x72>
    8458:	6821      	ldr	r1, [r4, #0]
    845a:	4a62      	ldr	r2, [pc, #392]	; (85e4 <ProcessAesDrv+0x2f4>)
    845c:	4b62      	ldr	r3, [pc, #392]	; (85e8 <ProcessAesDrv+0x2f8>)
    845e:	6011      	str	r1, [r2, #0]
    8460:	6861      	ldr	r1, [r4, #4]
    8462:	6019      	str	r1, [r3, #0]
    8464:	68a1      	ldr	r1, [r4, #8]
    8466:	6091      	str	r1, [r2, #8]
    8468:	68e2      	ldr	r2, [r4, #12]
    846a:	609a      	str	r2, [r3, #8]
    846c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    846e:	f023 0304 	bic.w	r3, r3, #4
    8472:	2b03      	cmp	r3, #3
    8474:	682a      	ldr	r2, [r5, #0]
    8476:	d009      	beq.n	848c <ProcessAesDrv+0x19c>
    8478:	6e21      	ldr	r1, [r4, #96]	; 0x60
    847a:	6833      	ldr	r3, [r6, #0]
    847c:	2901      	cmp	r1, #1
    847e:	bf07      	ittee	eq
    8480:	485a      	ldreq	r0, [pc, #360]	; (85ec <ProcessAesDrv+0x2fc>)
    8482:	495b      	ldreq	r1, [pc, #364]	; (85f0 <ProcessAesDrv+0x300>)
    8484:	485b      	ldrne	r0, [pc, #364]	; (85f4 <ProcessAesDrv+0x304>)
    8486:	495c      	ldrne	r1, [pc, #368]	; (85f8 <ProcessAesDrv+0x308>)
    8488:	6003      	str	r3, [r0, #0]
    848a:	600f      	str	r7, [r1, #0]
    848c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    848e:	2b01      	cmp	r3, #1
    8490:	bf0b      	itete	eq
    8492:	4b5a      	ldreq	r3, [pc, #360]	; (85fc <ProcessAesDrv+0x30c>)
    8494:	4b5a      	ldrne	r3, [pc, #360]	; (8600 <ProcessAesDrv+0x310>)
    8496:	495b      	ldreq	r1, [pc, #364]	; (8604 <ProcessAesDrv+0x314>)
    8498:	495b      	ldrne	r1, [pc, #364]	; (8608 <ProcessAesDrv+0x318>)
    849a:	600a      	str	r2, [r1, #0]
    849c:	601f      	str	r7, [r3, #0]
    849e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    84a0:	f023 0304 	bic.w	r3, r3, #4
    84a4:	2b03      	cmp	r3, #3
    84a6:	d075      	beq.n	8594 <ProcessAesDrv+0x2a4>
    84a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    84aa:	2b01      	cmp	r3, #1
    84ac:	bf0c      	ite	eq
    84ae:	2080      	moveq	r0, #128	; 0x80
    84b0:	2020      	movne	r0, #32
    84b2:	f7fe f9ef 	bl	6894 <CC_HalWaitInterrupt>
    84b6:	4681      	mov	r9, r0
    84b8:	2800      	cmp	r0, #0
    84ba:	f47f af52 	bne.w	8362 <ProcessAesDrv+0x72>
    84be:	4b47      	ldr	r3, [pc, #284]	; (85dc <ProcessAesDrv+0x2ec>)
    84c0:	681a      	ldr	r2, [r3, #0]
    84c2:	2a00      	cmp	r2, #0
    84c4:	d1fc      	bne.n	84c0 <ProcessAesDrv+0x1d0>
    84c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    84c8:	4691      	mov	r9, r2
    84ca:	3b01      	subs	r3, #1
    84cc:	2b06      	cmp	r3, #6
    84ce:	d811      	bhi.n	84f4 <ProcessAesDrv+0x204>
    84d0:	e8df f003 	tbb	[pc, r3]
    84d4:	1004bc04 	.word	0x1004bc04
    84d8:	bc10      	.short	0xbc10
    84da:	04          	.byte	0x04
    84db:	00          	.byte	0x00
    84dc:	4a41      	ldr	r2, [pc, #260]	; (85e4 <ProcessAesDrv+0x2f4>)
    84de:	4b42      	ldr	r3, [pc, #264]	; (85e8 <ProcessAesDrv+0x2f8>)
    84e0:	6811      	ldr	r1, [r2, #0]
    84e2:	3208      	adds	r2, #8
    84e4:	6021      	str	r1, [r4, #0]
    84e6:	6819      	ldr	r1, [r3, #0]
    84e8:	3308      	adds	r3, #8
    84ea:	6061      	str	r1, [r4, #4]
    84ec:	6812      	ldr	r2, [r2, #0]
    84ee:	60a2      	str	r2, [r4, #8]
    84f0:	681b      	ldr	r3, [r3, #0]
    84f2:	60e3      	str	r3, [r4, #12]
    84f4:	2301      	movs	r3, #1
    84f6:	65a3      	str	r3, [r4, #88]	; 0x58
    84f8:	e733      	b.n	8362 <ProcessAesDrv+0x72>
    84fa:	4844      	ldr	r0, [pc, #272]	; (860c <ProcessAesDrv+0x31c>)
    84fc:	f7fd feec 	bl	62d8 <CC_PalAbort>
    8500:	2000      	movs	r0, #0
    8502:	f7fe fa89 	bl	6a18 <CC_PalPowerSaveModeSelect>
    8506:	2800      	cmp	r0, #0
    8508:	f43f af1d 	beq.w	8346 <ProcessAesDrv+0x56>
    850c:	4840      	ldr	r0, [pc, #256]	; (8610 <ProcessAesDrv+0x320>)
    850e:	f7fd fee3 	bl	62d8 <CC_PalAbort>
    8512:	e718      	b.n	8346 <ProcessAesDrv+0x56>
    8514:	483f      	ldr	r0, [pc, #252]	; (8614 <ProcessAesDrv+0x324>)
    8516:	f7fd fedf 	bl	62d8 <CC_PalAbort>
    851a:	4648      	mov	r0, r9
    851c:	b007      	add	sp, #28
    851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8522:	483d      	ldr	r0, [pc, #244]	; (8618 <ProcessAesDrv+0x328>)
    8524:	f7fd fed8 	bl	62d8 <CC_PalAbort>
    8528:	e73c      	b.n	83a4 <ProcessAesDrv+0xb4>
    852a:	2304      	movs	r3, #4
    852c:	2120      	movs	r1, #32
    852e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    8532:	f104 0010 	add.w	r0, r4, #16
    8536:	f7ff fafd 	bl	7b34 <CC_PalMemSetZeroPlat>
    853a:	e71a      	b.n	8372 <ProcessAesDrv+0x82>
    853c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    853e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    8540:	f000 f9d2 	bl	88e8 <kmu_validate_slot_and_size>
    8544:	b9e8      	cbnz	r0, 8582 <ProcessAesDrv+0x292>
    8546:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8638 <ProcessAesDrv+0x348>
    854a:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 863c <ProcessAesDrv+0x34c>
    854e:	f8d8 3000 	ldr.w	r3, [r8]
    8552:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8640 <ProcessAesDrv+0x350>
    8556:	681b      	ldr	r3, [r3, #0]
    8558:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8644 <ProcessAesDrv+0x354>
    855c:	f8cb 3000 	str.w	r3, [fp]
    8560:	f8d8 3000 	ldr.w	r3, [r8]
    8564:	4a2d      	ldr	r2, [pc, #180]	; (861c <ProcessAesDrv+0x32c>)
    8566:	685b      	ldr	r3, [r3, #4]
    8568:	f8ca 3000 	str.w	r3, [sl]
    856c:	f8d8 3000 	ldr.w	r3, [r8]
    8570:	689b      	ldr	r3, [r3, #8]
    8572:	f8c9 3000 	str.w	r3, [r9]
    8576:	f8d8 3000 	ldr.w	r3, [r8]
    857a:	68db      	ldr	r3, [r3, #12]
    857c:	6013      	str	r3, [r2, #0]
    857e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8580:	b171      	cbz	r1, 85a0 <ProcessAesDrv+0x2b0>
    8582:	f04f 0801 	mov.w	r8, #1
    8586:	e6d0      	b.n	832a <ProcessAesDrv+0x3a>
    8588:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8648 <ProcessAesDrv+0x358>
    858c:	e6e9      	b.n	8362 <ProcessAesDrv+0x72>
    858e:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
    8592:	e70d      	b.n	83b0 <ProcessAesDrv+0xc0>
    8594:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    8596:	2b01      	cmp	r3, #1
    8598:	bf0c      	ite	eq
    859a:	2040      	moveq	r0, #64	; 0x40
    859c:	2010      	movne	r0, #16
    859e:	e788      	b.n	84b2 <ProcessAesDrv+0x1c2>
    85a0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
    85a4:	9300      	str	r3, [sp, #0]
    85a6:	2310      	movs	r3, #16
    85a8:	f104 0010 	add.w	r0, r4, #16
    85ac:	e9cd 2001 	strd	r2, r0, [sp, #4]
    85b0:	9303      	str	r3, [sp, #12]
    85b2:	9005      	str	r0, [sp, #20]
    85b4:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    85b8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    85ba:	f000 fa4d 	bl	8a58 <kmu_derive_cmac>
    85be:	2800      	cmp	r0, #0
    85c0:	d14a      	bne.n	8658 <ProcessAesDrv+0x368>
    85c2:	2300      	movs	r3, #0
    85c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    85c8:	e7db      	b.n	8582 <ProcessAesDrv+0x292>
    85ca:	6821      	ldr	r1, [r4, #0]
    85cc:	4a14      	ldr	r2, [pc, #80]	; (8620 <ProcessAesDrv+0x330>)
    85ce:	4b15      	ldr	r3, [pc, #84]	; (8624 <ProcessAesDrv+0x334>)
    85d0:	e745      	b.n	845e <ProcessAesDrv+0x16e>
    85d2:	bf00      	nop
    85d4:	200000ec 	.word	0x200000ec
    85d8:	50841810 	.word	0x50841810
    85dc:	50841910 	.word	0x50841910
    85e0:	50841a04 	.word	0x50841a04
    85e4:	50841440 	.word	0x50841440
    85e8:	50841444 	.word	0x50841444
    85ec:	50841d28 	.word	0x50841d28
    85f0:	50841d2c 	.word	0x50841d2c
    85f4:	50841d30 	.word	0x50841d30
    85f8:	50841d34 	.word	0x50841d34
    85fc:	50841c2c 	.word	0x50841c2c
    8600:	50841c34 	.word	0x50841c34
    8604:	50841c28 	.word	0x50841c28
    8608:	50841c30 	.word	0x50841c30
    860c:	00009a50 	.word	0x00009a50
    8610:	00009a68 	.word	0x00009a68
    8614:	00009aa8 	.word	0x00009aa8
    8618:	00009a88 	.word	0x00009a88
    861c:	5084140c 	.word	0x5084140c
    8620:	50841460 	.word	0x50841460
    8624:	50841464 	.word	0x50841464
    8628:	00f10001 	.word	0x00f10001
    862c:	00f10005 	.word	0x00f10005
    8630:	00f1000b 	.word	0x00f1000b
    8634:	00f10003 	.word	0x00f10003
    8638:	200000dc 	.word	0x200000dc
    863c:	50841400 	.word	0x50841400
    8640:	50841404 	.word	0x50841404
    8644:	50841408 	.word	0x50841408
    8648:	00f10002 	.word	0x00f10002
    864c:	4a0f      	ldr	r2, [pc, #60]	; (868c <ProcessAesDrv+0x39c>)
    864e:	4b10      	ldr	r3, [pc, #64]	; (8690 <ProcessAesDrv+0x3a0>)
    8650:	e746      	b.n	84e0 <ProcessAesDrv+0x1f0>
    8652:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8698 <ProcessAesDrv+0x3a8>
    8656:	e684      	b.n	8362 <ProcessAesDrv+0x72>
    8658:	f8d8 3000 	ldr.w	r3, [r8]
    865c:	9805      	ldr	r0, [sp, #20]
    865e:	681b      	ldr	r3, [r3, #0]
    8660:	4a0c      	ldr	r2, [pc, #48]	; (8694 <ProcessAesDrv+0x3a4>)
    8662:	f8cb 3000 	str.w	r3, [fp]
    8666:	f8d8 3000 	ldr.w	r3, [r8]
    866a:	2110      	movs	r1, #16
    866c:	685b      	ldr	r3, [r3, #4]
    866e:	f8ca 3000 	str.w	r3, [sl]
    8672:	f8d8 3000 	ldr.w	r3, [r8]
    8676:	689b      	ldr	r3, [r3, #8]
    8678:	f8c9 3000 	str.w	r3, [r9]
    867c:	f8d8 3000 	ldr.w	r3, [r8]
    8680:	68db      	ldr	r3, [r3, #12]
    8682:	6013      	str	r3, [r2, #0]
    8684:	f7ff fa56 	bl	7b34 <CC_PalMemSetZeroPlat>
    8688:	e79b      	b.n	85c2 <ProcessAesDrv+0x2d2>
    868a:	bf00      	nop
    868c:	50841460 	.word	0x50841460
    8690:	50841464 	.word	0x50841464
    8694:	5084140c 	.word	0x5084140c
    8698:	00f10004 	.word	0x00f10004

0000869c <FinishAesDrv>:
    869c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86a0:	b301      	cbz	r1, 86e4 <FinishAesDrv+0x48>
    86a2:	b1fa      	cbz	r2, 86e4 <FinishAesDrv+0x48>
    86a4:	4604      	mov	r4, r0
    86a6:	2800      	cmp	r0, #0
    86a8:	d07a      	beq.n	87a0 <FinishAesDrv+0x104>
    86aa:	461d      	mov	r5, r3
    86ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
    86ae:	460e      	mov	r6, r1
    86b0:	2b07      	cmp	r3, #7
    86b2:	d01b      	beq.n	86ec <FinishAesDrv+0x50>
    86b4:	b95d      	cbnz	r5, 86ce <FinishAesDrv+0x32>
    86b6:	2b03      	cmp	r3, #3
    86b8:	d110      	bne.n	86dc <FinishAesDrv+0x40>
    86ba:	6d83      	ldr	r3, [r0, #88]	; 0x58
    86bc:	b973      	cbnz	r3, 86dc <FinishAesDrv+0x40>
    86be:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
    86c2:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
    86c6:	2510      	movs	r5, #16
    86c8:	f100 0364 	add.w	r3, r0, #100	; 0x64
    86cc:	600b      	str	r3, [r1, #0]
    86ce:	462b      	mov	r3, r5
    86d0:	4631      	mov	r1, r6
    86d2:	4620      	mov	r0, r4
    86d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    86d8:	f7ff be0a 	b.w	82f0 <ProcessAesDrv>
    86dc:	462f      	mov	r7, r5
    86de:	4638      	mov	r0, r7
    86e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86e4:	4f68      	ldr	r7, [pc, #416]	; (8888 <FinishAesDrv+0x1ec>)
    86e6:	4638      	mov	r0, r7
    86e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86ec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    86ee:	2b00      	cmp	r3, #0
    86f0:	d159      	bne.n	87a6 <FinishAesDrv+0x10a>
    86f2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    86f6:	d25b      	bcs.n	87b0 <FinishAesDrv+0x114>
    86f8:	b915      	cbnz	r5, 8700 <FinishAesDrv+0x64>
    86fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
    86fc:	2b00      	cmp	r3, #0
    86fe:	d157      	bne.n	87b0 <FinishAesDrv+0x114>
    8700:	f04f 31ff 	mov.w	r1, #4294967295
    8704:	4861      	ldr	r0, [pc, #388]	; (888c <FinishAesDrv+0x1f0>)
    8706:	f7fe f957 	bl	69b8 <CC_PalMutexLock>
    870a:	2800      	cmp	r0, #0
    870c:	f040 809a 	bne.w	8844 <FinishAesDrv+0x1a8>
    8710:	2000      	movs	r0, #0
    8712:	f7fe f981 	bl	6a18 <CC_PalPowerSaveModeSelect>
    8716:	2800      	cmp	r0, #0
    8718:	f040 8090 	bne.w	883c <FinishAesDrv+0x1a0>
    871c:	2101      	movs	r1, #1
    871e:	4b5c      	ldr	r3, [pc, #368]	; (8890 <FinishAesDrv+0x1f4>)
    8720:	4a5c      	ldr	r2, [pc, #368]	; (8894 <FinishAesDrv+0x1f8>)
    8722:	6019      	str	r1, [r3, #0]
    8724:	6813      	ldr	r3, [r2, #0]
    8726:	2b00      	cmp	r3, #0
    8728:	d1fc      	bne.n	8724 <FinishAesDrv+0x88>
    872a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    872c:	2b03      	cmp	r3, #3
    872e:	dd20      	ble.n	8772 <FinishAesDrv+0xd6>
    8730:	3b06      	subs	r3, #6
    8732:	2b01      	cmp	r3, #1
    8734:	d81f      	bhi.n	8776 <FinishAesDrv+0xda>
    8736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8738:	2b01      	cmp	r3, #1
    873a:	d83b      	bhi.n	87b4 <FinishAesDrv+0x118>
    873c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    873e:	2b01      	cmp	r3, #1
    8740:	f200 8088 	bhi.w	8854 <FinishAesDrv+0x1b8>
    8744:	6e23      	ldr	r3, [r4, #96]	; 0x60
    8746:	2b01      	cmp	r3, #1
    8748:	f200 8086 	bhi.w	8858 <FinishAesDrv+0x1bc>
    874c:	4620      	mov	r0, r4
    874e:	f7ff fd53 	bl	81f8 <InitAes.part.0>
    8752:	4607      	mov	r7, r0
    8754:	b980      	cbnz	r0, 8778 <FinishAesDrv+0xdc>
    8756:	4620      	mov	r0, r4
    8758:	f7ff fcee 	bl	8138 <LoadAesKey>
    875c:	4607      	mov	r7, r0
    875e:	b958      	cbnz	r0, 8778 <FinishAesDrv+0xdc>
    8760:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8762:	2b07      	cmp	r3, #7
    8764:	d807      	bhi.n	8776 <FinishAesDrv+0xda>
    8766:	e8df f003 	tbb	[pc, r3]
    876a:	2731      	.short	0x2731
    876c:	06062755 	.word	0x06062755
    8770:	2755      	.short	0x2755
    8772:	2b00      	cmp	r3, #0
    8774:	dadf      	bge.n	8736 <FinishAesDrv+0x9a>
    8776:	4f48      	ldr	r7, [pc, #288]	; (8898 <FinishAesDrv+0x1fc>)
    8778:	4a46      	ldr	r2, [pc, #280]	; (8894 <FinishAesDrv+0x1f8>)
    877a:	6813      	ldr	r3, [r2, #0]
    877c:	2b00      	cmp	r3, #0
    877e:	d1fc      	bne.n	877a <FinishAesDrv+0xde>
    8780:	4a43      	ldr	r2, [pc, #268]	; (8890 <FinishAesDrv+0x1f4>)
    8782:	2001      	movs	r0, #1
    8784:	6013      	str	r3, [r2, #0]
    8786:	f7fe f947 	bl	6a18 <CC_PalPowerSaveModeSelect>
    878a:	2800      	cmp	r0, #0
    878c:	d15e      	bne.n	884c <FinishAesDrv+0x1b0>
    878e:	483f      	ldr	r0, [pc, #252]	; (888c <FinishAesDrv+0x1f0>)
    8790:	f7fe f91a 	bl	69c8 <CC_PalMutexUnlock>
    8794:	2800      	cmp	r0, #0
    8796:	d0a2      	beq.n	86de <FinishAesDrv+0x42>
    8798:	4840      	ldr	r0, [pc, #256]	; (889c <FinishAesDrv+0x200>)
    879a:	f7fd fd9d 	bl	62d8 <CC_PalAbort>
    879e:	e79e      	b.n	86de <FinishAesDrv+0x42>
    87a0:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
    87a4:	e79b      	b.n	86de <FinishAesDrv+0x42>
    87a6:	2b01      	cmp	r3, #1
    87a8:	d1a6      	bne.n	86f8 <FinishAesDrv+0x5c>
    87aa:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    87ae:	d3a3      	bcc.n	86f8 <FinishAesDrv+0x5c>
    87b0:	4f3b      	ldr	r7, [pc, #236]	; (88a0 <FinishAesDrv+0x204>)
    87b2:	e794      	b.n	86de <FinishAesDrv+0x42>
    87b4:	4f3b      	ldr	r7, [pc, #236]	; (88a4 <FinishAesDrv+0x208>)
    87b6:	e7df      	b.n	8778 <FinishAesDrv+0xdc>
    87b8:	6821      	ldr	r1, [r4, #0]
    87ba:	4a3b      	ldr	r2, [pc, #236]	; (88a8 <FinishAesDrv+0x20c>)
    87bc:	4b3b      	ldr	r3, [pc, #236]	; (88ac <FinishAesDrv+0x210>)
    87be:	6011      	str	r1, [r2, #0]
    87c0:	6861      	ldr	r1, [r4, #4]
    87c2:	6019      	str	r1, [r3, #0]
    87c4:	68a1      	ldr	r1, [r4, #8]
    87c6:	6091      	str	r1, [r2, #8]
    87c8:	68e2      	ldr	r2, [r4, #12]
    87ca:	609a      	str	r2, [r3, #8]
    87cc:	2301      	movs	r3, #1
    87ce:	4938      	ldr	r1, [pc, #224]	; (88b0 <FinishAesDrv+0x214>)
    87d0:	4a38      	ldr	r2, [pc, #224]	; (88b4 <FinishAesDrv+0x218>)
    87d2:	600b      	str	r3, [r1, #0]
    87d4:	6015      	str	r5, [r2, #0]
    87d6:	2d00      	cmp	r5, #0
    87d8:	d140      	bne.n	885c <FinishAesDrv+0x1c0>
    87da:	6da2      	ldr	r2, [r4, #88]	; 0x58
    87dc:	b90a      	cbnz	r2, 87e2 <FinishAesDrv+0x146>
    87de:	4a36      	ldr	r2, [pc, #216]	; (88b8 <FinishAesDrv+0x21c>)
    87e0:	6013      	str	r3, [r2, #0]
    87e2:	4b2c      	ldr	r3, [pc, #176]	; (8894 <FinishAesDrv+0x1f8>)
    87e4:	681f      	ldr	r7, [r3, #0]
    87e6:	2f00      	cmp	r7, #0
    87e8:	d1fc      	bne.n	87e4 <FinishAesDrv+0x148>
    87ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    87ec:	3b01      	subs	r3, #1
    87ee:	2b06      	cmp	r3, #6
    87f0:	d8c2      	bhi.n	8778 <FinishAesDrv+0xdc>
    87f2:	a201      	add	r2, pc, #4	; (adr r2, 87f8 <FinishAesDrv+0x15c>)
    87f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    87f8:	0000881d 	.word	0x0000881d
    87fc:	00008837 	.word	0x00008837
    8800:	0000881d 	.word	0x0000881d
    8804:	00008779 	.word	0x00008779
    8808:	00008779 	.word	0x00008779
    880c:	00008837 	.word	0x00008837
    8810:	0000881d 	.word	0x0000881d
    8814:	6821      	ldr	r1, [r4, #0]
    8816:	4a29      	ldr	r2, [pc, #164]	; (88bc <FinishAesDrv+0x220>)
    8818:	4b29      	ldr	r3, [pc, #164]	; (88c0 <FinishAesDrv+0x224>)
    881a:	e7d0      	b.n	87be <FinishAesDrv+0x122>
    881c:	4a22      	ldr	r2, [pc, #136]	; (88a8 <FinishAesDrv+0x20c>)
    881e:	4b23      	ldr	r3, [pc, #140]	; (88ac <FinishAesDrv+0x210>)
    8820:	6811      	ldr	r1, [r2, #0]
    8822:	3208      	adds	r2, #8
    8824:	6021      	str	r1, [r4, #0]
    8826:	6819      	ldr	r1, [r3, #0]
    8828:	3308      	adds	r3, #8
    882a:	6061      	str	r1, [r4, #4]
    882c:	6812      	ldr	r2, [r2, #0]
    882e:	60a2      	str	r2, [r4, #8]
    8830:	681b      	ldr	r3, [r3, #0]
    8832:	60e3      	str	r3, [r4, #12]
    8834:	e7a0      	b.n	8778 <FinishAesDrv+0xdc>
    8836:	4a21      	ldr	r2, [pc, #132]	; (88bc <FinishAesDrv+0x220>)
    8838:	4b21      	ldr	r3, [pc, #132]	; (88c0 <FinishAesDrv+0x224>)
    883a:	e7f1      	b.n	8820 <FinishAesDrv+0x184>
    883c:	4821      	ldr	r0, [pc, #132]	; (88c4 <FinishAesDrv+0x228>)
    883e:	f7fd fd4b 	bl	62d8 <CC_PalAbort>
    8842:	e76b      	b.n	871c <FinishAesDrv+0x80>
    8844:	4820      	ldr	r0, [pc, #128]	; (88c8 <FinishAesDrv+0x22c>)
    8846:	f7fd fd47 	bl	62d8 <CC_PalAbort>
    884a:	e761      	b.n	8710 <FinishAesDrv+0x74>
    884c:	481f      	ldr	r0, [pc, #124]	; (88cc <FinishAesDrv+0x230>)
    884e:	f7fd fd43 	bl	62d8 <CC_PalAbort>
    8852:	e79c      	b.n	878e <FinishAesDrv+0xf2>
    8854:	4f1e      	ldr	r7, [pc, #120]	; (88d0 <FinishAesDrv+0x234>)
    8856:	e78f      	b.n	8778 <FinishAesDrv+0xdc>
    8858:	4f1e      	ldr	r7, [pc, #120]	; (88d4 <FinishAesDrv+0x238>)
    885a:	e78d      	b.n	8778 <FinishAesDrv+0xdc>
    885c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    885e:	6833      	ldr	r3, [r6, #0]
    8860:	2a01      	cmp	r2, #1
    8862:	d00a      	beq.n	887a <FinishAesDrv+0x1de>
    8864:	2010      	movs	r0, #16
    8866:	491c      	ldr	r1, [pc, #112]	; (88d8 <FinishAesDrv+0x23c>)
    8868:	4a1c      	ldr	r2, [pc, #112]	; (88dc <FinishAesDrv+0x240>)
    886a:	600b      	str	r3, [r1, #0]
    886c:	6015      	str	r5, [r2, #0]
    886e:	f7fe f811 	bl	6894 <CC_HalWaitInterrupt>
    8872:	4607      	mov	r7, r0
    8874:	2800      	cmp	r0, #0
    8876:	d0b4      	beq.n	87e2 <FinishAesDrv+0x146>
    8878:	e77e      	b.n	8778 <FinishAesDrv+0xdc>
    887a:	4919      	ldr	r1, [pc, #100]	; (88e0 <FinishAesDrv+0x244>)
    887c:	4a19      	ldr	r2, [pc, #100]	; (88e4 <FinishAesDrv+0x248>)
    887e:	600b      	str	r3, [r1, #0]
    8880:	2040      	movs	r0, #64	; 0x40
    8882:	6015      	str	r5, [r2, #0]
    8884:	e7f3      	b.n	886e <FinishAesDrv+0x1d2>
    8886:	bf00      	nop
    8888:	00f1000b 	.word	0x00f1000b
    888c:	200000ec 	.word	0x200000ec
    8890:	50841810 	.word	0x50841810
    8894:	50841910 	.word	0x50841910
    8898:	00f10001 	.word	0x00f10001
    889c:	00009aa8 	.word	0x00009aa8
    88a0:	00f10005 	.word	0x00f10005
    88a4:	00f10002 	.word	0x00f10002
    88a8:	50841440 	.word	0x50841440
    88ac:	50841444 	.word	0x50841444
    88b0:	5084147c 	.word	0x5084147c
    88b4:	508414bc 	.word	0x508414bc
    88b8:	50841524 	.word	0x50841524
    88bc:	50841460 	.word	0x50841460
    88c0:	50841464 	.word	0x50841464
    88c4:	00009a68 	.word	0x00009a68
    88c8:	00009a50 	.word	0x00009a50
    88cc:	00009a88 	.word	0x00009a88
    88d0:	00f10003 	.word	0x00f10003
    88d4:	00f10004 	.word	0x00f10004
    88d8:	50841c30 	.word	0x50841c30
    88dc:	50841c34 	.word	0x50841c34
    88e0:	50841c28 	.word	0x50841c28
    88e4:	50841c2c 	.word	0x50841c2c

000088e8 <kmu_validate_slot_and_size>:
    88e8:	287f      	cmp	r0, #127	; 0x7f
    88ea:	d80c      	bhi.n	8906 <kmu_validate_slot_and_size+0x1e>
    88ec:	b149      	cbz	r1, 8902 <kmu_validate_slot_and_size+0x1a>
    88ee:	2903      	cmp	r1, #3
    88f0:	d001      	beq.n	88f6 <kmu_validate_slot_and_size+0xe>
    88f2:	4806      	ldr	r0, [pc, #24]	; (890c <kmu_validate_slot_and_size+0x24>)
    88f4:	4770      	bx	lr
    88f6:	4906      	ldr	r1, [pc, #24]	; (8910 <kmu_validate_slot_and_size+0x28>)
    88f8:	287f      	cmp	r0, #127	; 0x7f
    88fa:	bf0c      	ite	eq
    88fc:	4608      	moveq	r0, r1
    88fe:	2000      	movne	r0, #0
    8900:	4770      	bx	lr
    8902:	4608      	mov	r0, r1
    8904:	4770      	bx	lr
    8906:	4802      	ldr	r0, [pc, #8]	; (8910 <kmu_validate_slot_and_size+0x28>)
    8908:	4770      	bx	lr
    890a:	bf00      	nop
    890c:	00f70003 	.word	0x00f70003
    8910:	00f70001 	.word	0x00f70001

00008914 <kmu_validate_slot_and_size_no_kdr>:
    8914:	1e83      	subs	r3, r0, #2
    8916:	2b7d      	cmp	r3, #125	; 0x7d
    8918:	d80c      	bhi.n	8934 <kmu_validate_slot_and_size_no_kdr+0x20>
    891a:	b149      	cbz	r1, 8930 <kmu_validate_slot_and_size_no_kdr+0x1c>
    891c:	2903      	cmp	r1, #3
    891e:	d001      	beq.n	8924 <kmu_validate_slot_and_size_no_kdr+0x10>
    8920:	4805      	ldr	r0, [pc, #20]	; (8938 <kmu_validate_slot_and_size_no_kdr+0x24>)
    8922:	4770      	bx	lr
    8924:	4905      	ldr	r1, [pc, #20]	; (893c <kmu_validate_slot_and_size_no_kdr+0x28>)
    8926:	287f      	cmp	r0, #127	; 0x7f
    8928:	bf0c      	ite	eq
    892a:	4608      	moveq	r0, r1
    892c:	2000      	movne	r0, #0
    892e:	4770      	bx	lr
    8930:	4608      	mov	r0, r1
    8932:	4770      	bx	lr
    8934:	4801      	ldr	r0, [pc, #4]	; (893c <kmu_validate_slot_and_size_no_kdr+0x28>)
    8936:	4770      	bx	lr
    8938:	00f70003 	.word	0x00f70003
    893c:	00f70001 	.word	0x00f70001

00008940 <kmu_validate_kdr_slot_and_size>:
    8940:	b928      	cbnz	r0, 894e <kmu_validate_kdr_slot_and_size+0xe>
    8942:	4b04      	ldr	r3, [pc, #16]	; (8954 <kmu_validate_kdr_slot_and_size+0x14>)
    8944:	2900      	cmp	r1, #0
    8946:	bf18      	it	ne
    8948:	4619      	movne	r1, r3
    894a:	4608      	mov	r0, r1
    894c:	4770      	bx	lr
    894e:	4902      	ldr	r1, [pc, #8]	; (8958 <kmu_validate_kdr_slot_and_size+0x18>)
    8950:	4608      	mov	r0, r1
    8952:	4770      	bx	lr
    8954:	00f70003 	.word	0x00f70003
    8958:	00f70001 	.word	0x00f70001

0000895c <kmu_load_key_aes>:
    895c:	2800      	cmp	r0, #0
    895e:	d058      	beq.n	8a12 <kmu_load_key_aes+0xb6>
    8960:	b109      	cbz	r1, 8966 <kmu_load_key_aes+0xa>
    8962:	4833      	ldr	r0, [pc, #204]	; (8a30 <kmu_load_key_aes+0xd4>)
    8964:	4770      	bx	lr
    8966:	b430      	push	{r4, r5}
    8968:	2401      	movs	r4, #1
    896a:	4b32      	ldr	r3, [pc, #200]	; (8a34 <kmu_load_key_aes+0xd8>)
    896c:	4a32      	ldr	r2, [pc, #200]	; (8a38 <kmu_load_key_aes+0xdc>)
    896e:	b084      	sub	sp, #16
    8970:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    8974:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    8978:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    897c:	1905      	adds	r5, r0, r4
    897e:	9202      	str	r2, [sp, #8]
    8980:	9a02      	ldr	r2, [sp, #8]
    8982:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    8986:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    898a:	3080      	adds	r0, #128	; 0x80
    898c:	9202      	str	r2, [sp, #8]
    898e:	9a02      	ldr	r2, [sp, #8]
    8990:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    8994:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    8998:	4a28      	ldr	r2, [pc, #160]	; (8a3c <kmu_load_key_aes+0xe0>)
    899a:	9102      	str	r1, [sp, #8]
    899c:	9902      	ldr	r1, [sp, #8]
    899e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    89a2:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
    89a6:	4a26      	ldr	r2, [pc, #152]	; (8a40 <kmu_load_key_aes+0xe4>)
    89a8:	9103      	str	r1, [sp, #12]
    89aa:	9903      	ldr	r1, [sp, #12]
    89ac:	4291      	cmp	r1, r2
    89ae:	d136      	bne.n	8a1e <kmu_load_key_aes+0xc2>
    89b0:	461a      	mov	r2, r3
    89b2:	601c      	str	r4, [r3, #0]
    89b4:	e005      	b.n	89c2 <kmu_load_key_aes+0x66>
    89b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    89ba:	b9db      	cbnz	r3, 89f4 <kmu_load_key_aes+0x98>
    89bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89c0:	b9c3      	cbnz	r3, 89f4 <kmu_load_key_aes+0x98>
    89c2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    89c6:	3b00      	subs	r3, #0
    89c8:	bf18      	it	ne
    89ca:	2301      	movne	r3, #1
    89cc:	f88d 3005 	strb.w	r3, [sp, #5]
    89d0:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    89d4:	3b00      	subs	r3, #0
    89d6:	bf18      	it	ne
    89d8:	2301      	movne	r3, #1
    89da:	f88d 3006 	strb.w	r3, [sp, #6]
    89de:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    89e2:	3b00      	subs	r3, #0
    89e4:	bf18      	it	ne
    89e6:	2301      	movne	r3, #1
    89e8:	f88d 3007 	strb.w	r3, [sp, #7]
    89ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
    89f0:	2b00      	cmp	r3, #0
    89f2:	d0e0      	beq.n	89b6 <kmu_load_key_aes+0x5a>
    89f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    89f8:	b9ab      	cbnz	r3, 8a26 <kmu_load_key_aes+0xca>
    89fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    8a02:	b993      	cbnz	r3, 8a2a <kmu_load_key_aes+0xce>
    8a04:	4610      	mov	r0, r2
    8a06:	4b0b      	ldr	r3, [pc, #44]	; (8a34 <kmu_load_key_aes+0xd8>)
    8a08:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    8a0c:	b004      	add	sp, #16
    8a0e:	bc30      	pop	{r4, r5}
    8a10:	4770      	bx	lr
    8a12:	2201      	movs	r2, #1
    8a14:	490b      	ldr	r1, [pc, #44]	; (8a44 <kmu_load_key_aes+0xe8>)
    8a16:	4b0c      	ldr	r3, [pc, #48]	; (8a48 <kmu_load_key_aes+0xec>)
    8a18:	6008      	str	r0, [r1, #0]
    8a1a:	601a      	str	r2, [r3, #0]
    8a1c:	4770      	bx	lr
    8a1e:	480b      	ldr	r0, [pc, #44]	; (8a4c <kmu_load_key_aes+0xf0>)
    8a20:	b004      	add	sp, #16
    8a22:	bc30      	pop	{r4, r5}
    8a24:	4770      	bx	lr
    8a26:	480a      	ldr	r0, [pc, #40]	; (8a50 <kmu_load_key_aes+0xf4>)
    8a28:	e7f0      	b.n	8a0c <kmu_load_key_aes+0xb0>
    8a2a:	480a      	ldr	r0, [pc, #40]	; (8a54 <kmu_load_key_aes+0xf8>)
    8a2c:	e7ee      	b.n	8a0c <kmu_load_key_aes+0xb0>
    8a2e:	bf00      	nop
    8a30:	00f1000c 	.word	0x00f1000c
    8a34:	50039000 	.word	0x50039000
    8a38:	50840000 	.word	0x50840000
    8a3c:	00ff8000 	.word	0x00ff8000
    8a40:	50841400 	.word	0x50841400
    8a44:	50841a38 	.word	0x50841a38
    8a48:	50841478 	.word	0x50841478
    8a4c:	00f70006 	.word	0x00f70006
    8a50:	00f70001 	.word	0x00f70001
    8a54:	00f70002 	.word	0x00f70002

00008a58 <kmu_derive_cmac>:
    8a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a5c:	2400      	movs	r4, #0
    8a5e:	b0cd      	sub	sp, #308	; 0x134
    8a60:	4605      	mov	r5, r0
    8a62:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
    8a66:	4688      	mov	r8, r1
    8a68:	4617      	mov	r7, r2
    8a6a:	4621      	mov	r1, r4
    8a6c:	2274      	movs	r2, #116	; 0x74
    8a6e:	a80e      	add	r0, sp, #56	; 0x38
    8a70:	469b      	mov	fp, r3
    8a72:	f000 fb34 	bl	90de <memset>
    8a76:	4621      	mov	r1, r4
    8a78:	2280      	movs	r2, #128	; 0x80
    8a7a:	a82c      	add	r0, sp, #176	; 0xb0
    8a7c:	942b      	str	r4, [sp, #172]	; 0xac
    8a7e:	f000 fb2e 	bl	90de <memset>
    8a82:	2384      	movs	r3, #132	; 0x84
    8a84:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
    8a88:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    8a8c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    8a90:	9305      	str	r3, [sp, #20]
    8a92:	d85d      	bhi.n	8b50 <kmu_derive_cmac+0xf8>
    8a94:	ab05      	add	r3, sp, #20
    8a96:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
    8a9a:	9301      	str	r3, [sp, #4]
    8a9c:	4659      	mov	r1, fp
    8a9e:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
    8aa2:	4638      	mov	r0, r7
    8aa4:	9602      	str	r6, [sp, #8]
    8aa6:	f8cd a000 	str.w	sl, [sp]
    8aaa:	f000 f861 	bl	8b70 <UtilCmacBuildDataForDerivation>
    8aae:	2800      	cmp	r0, #0
    8ab0:	d155      	bne.n	8b5e <kmu_derive_cmac+0x106>
    8ab2:	42a5      	cmp	r5, r4
    8ab4:	bf0c      	ite	eq
    8ab6:	f04f 0c03 	moveq.w	ip, #3
    8aba:	f04f 0c02 	movne.w	ip, #2
    8abe:	2200      	movs	r2, #0
    8ac0:	2301      	movs	r3, #1
    8ac2:	2707      	movs	r7, #7
    8ac4:	2401      	movs	r4, #1
    8ac6:	2110      	movs	r1, #16
    8ac8:	901c      	str	r0, [sp, #112]	; 0x70
    8aca:	a80e      	add	r0, sp, #56	; 0x38
    8acc:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
    8ad0:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
    8ad4:	f88d c074 	strb.w	ip, [sp, #116]	; 0x74
    8ad8:	971b      	str	r7, [sp, #108]	; 0x6c
    8ada:	951e      	str	r5, [sp, #120]	; 0x78
    8adc:	9426      	str	r4, [sp, #152]	; 0x98
    8ade:	f7ff f829 	bl	7b34 <CC_PalMemSetZeroPlat>
    8ae2:	2210      	movs	r2, #16
    8ae4:	f10d 0820 	add.w	r8, sp, #32
    8ae8:	9200      	str	r2, [sp, #0]
    8aea:	4650      	mov	r0, sl
    8aec:	9905      	ldr	r1, [sp, #20]
    8aee:	ab0a      	add	r3, sp, #40	; 0x28
    8af0:	aa06      	add	r2, sp, #24
    8af2:	f8cd 8004 	str.w	r8, [sp, #4]
    8af6:	f7ff f8f5 	bl	7ce4 <SetDataBuffersInfo>
    8afa:	4607      	mov	r7, r0
    8afc:	b1c8      	cbz	r0, 8b32 <kmu_derive_cmac+0xda>
    8afe:	a80e      	add	r0, sp, #56	; 0x38
    8b00:	2274      	movs	r2, #116	; 0x74
    8b02:	2100      	movs	r1, #0
    8b04:	f7ff f814 	bl	7b30 <CC_PalMemSetPlat>
    8b08:	4638      	mov	r0, r7
    8b0a:	b04d      	add	sp, #308	; 0x134
    8b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b10:	2e10      	cmp	r6, #16
    8b12:	4635      	mov	r5, r6
    8b14:	bf28      	it	cs
    8b16:	2510      	movcs	r5, #16
    8b18:	a90e      	add	r1, sp, #56	; 0x38
    8b1a:	462a      	mov	r2, r5
    8b1c:	f7ff f806 	bl	7b2c <CC_PalMemCopyPlat>
    8b20:	2110      	movs	r1, #16
    8b22:	a80e      	add	r0, sp, #56	; 0x38
    8b24:	f7ff f806 	bl	7b34 <CC_PalMemSetZeroPlat>
    8b28:	3401      	adds	r4, #1
    8b2a:	1b76      	subs	r6, r6, r5
    8b2c:	442f      	add	r7, r5
    8b2e:	b2e4      	uxtb	r4, r4
    8b30:	d013      	beq.n	8b5a <kmu_derive_cmac+0x102>
    8b32:	9b05      	ldr	r3, [sp, #20]
    8b34:	4642      	mov	r2, r8
    8b36:	a906      	add	r1, sp, #24
    8b38:	a80e      	add	r0, sp, #56	; 0x38
    8b3a:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
    8b3e:	f7ff fdad 	bl	869c <FinishAesDrv>
    8b42:	4603      	mov	r3, r0
    8b44:	eb09 0007 	add.w	r0, r9, r7
    8b48:	2b00      	cmp	r3, #0
    8b4a:	d0e1      	beq.n	8b10 <kmu_derive_cmac+0xb8>
    8b4c:	461f      	mov	r7, r3
    8b4e:	e7d6      	b.n	8afe <kmu_derive_cmac+0xa6>
    8b50:	4f05      	ldr	r7, [pc, #20]	; (8b68 <kmu_derive_cmac+0x110>)
    8b52:	4638      	mov	r0, r7
    8b54:	b04d      	add	sp, #308	; 0x134
    8b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b5a:	4637      	mov	r7, r6
    8b5c:	e7cf      	b.n	8afe <kmu_derive_cmac+0xa6>
    8b5e:	4f03      	ldr	r7, [pc, #12]	; (8b6c <kmu_derive_cmac+0x114>)
    8b60:	4638      	mov	r0, r7
    8b62:	b04d      	add	sp, #308	; 0x134
    8b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b68:	00f1000f 	.word	0x00f1000f
    8b6c:	00f1000e 	.word	0x00f1000e

00008b70 <UtilCmacBuildDataForDerivation>:
    8b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b74:	2600      	movs	r6, #0
    8b76:	b082      	sub	sp, #8
    8b78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    8b7a:	9601      	str	r6, [sp, #4]
    8b7c:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    8b80:	d83b      	bhi.n	8bfa <UtilCmacBuildDataForDerivation+0x8a>
    8b82:	00ee      	lsls	r6, r5, #3
    8b84:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    8b88:	461f      	mov	r7, r3
    8b8a:	bf34      	ite	cc
    8b8c:	2303      	movcc	r3, #3
    8b8e:	2304      	movcs	r3, #4
    8b90:	1e4d      	subs	r5, r1, #1
    8b92:	2d3f      	cmp	r5, #63	; 0x3f
    8b94:	460c      	mov	r4, r1
    8b96:	9300      	str	r3, [sp, #0]
    8b98:	d82f      	bhi.n	8bfa <UtilCmacBuildDataForDerivation+0x8a>
    8b9a:	b370      	cbz	r0, 8bfa <UtilCmacBuildDataForDerivation+0x8a>
    8b9c:	4690      	mov	r8, r2
    8b9e:	b117      	cbz	r7, 8ba6 <UtilCmacBuildDataForDerivation+0x36>
    8ba0:	b35a      	cbz	r2, 8bfa <UtilCmacBuildDataForDerivation+0x8a>
    8ba2:	2f40      	cmp	r7, #64	; 0x40
    8ba4:	d829      	bhi.n	8bfa <UtilCmacBuildDataForDerivation+0x8a>
    8ba6:	9a08      	ldr	r2, [sp, #32]
    8ba8:	b33a      	cbz	r2, 8bfa <UtilCmacBuildDataForDerivation+0x8a>
    8baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8bac:	6811      	ldr	r1, [r2, #0]
    8bae:	b321      	cbz	r1, 8bfa <UtilCmacBuildDataForDerivation+0x8a>
    8bb0:	19e2      	adds	r2, r4, r7
    8bb2:	4413      	add	r3, r2
    8bb4:	4299      	cmp	r1, r3
    8bb6:	d320      	bcc.n	8bfa <UtilCmacBuildDataForDerivation+0x8a>
    8bb8:	9b08      	ldr	r3, [sp, #32]
    8bba:	4622      	mov	r2, r4
    8bbc:	4601      	mov	r1, r0
    8bbe:	1c58      	adds	r0, r3, #1
    8bc0:	f7fe ffb4 	bl	7b2c <CC_PalMemCopyPlat>
    8bc4:	2200      	movs	r2, #0
    8bc6:	9b08      	ldr	r3, [sp, #32]
    8bc8:	4423      	add	r3, r4
    8bca:	705a      	strb	r2, [r3, #1]
    8bcc:	3402      	adds	r4, #2
    8bce:	bb07      	cbnz	r7, 8c12 <UtilCmacBuildDataForDerivation+0xa2>
    8bd0:	2eff      	cmp	r6, #255	; 0xff
    8bd2:	9600      	str	r6, [sp, #0]
    8bd4:	d915      	bls.n	8c02 <UtilCmacBuildDataForDerivation+0x92>
    8bd6:	9b08      	ldr	r3, [sp, #32]
    8bd8:	0235      	lsls	r5, r6, #8
    8bda:	b2ad      	uxth	r5, r5
    8bdc:	1918      	adds	r0, r3, r4
    8bde:	2202      	movs	r2, #2
    8be0:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
    8be4:	a901      	add	r1, sp, #4
    8be6:	9501      	str	r5, [sp, #4]
    8be8:	f7fe ffa0 	bl	7b2c <CC_PalMemCopyPlat>
    8bec:	3402      	adds	r4, #2
    8bee:	2000      	movs	r0, #0
    8bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8bf2:	601c      	str	r4, [r3, #0]
    8bf4:	b002      	add	sp, #8
    8bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bfa:	480a      	ldr	r0, [pc, #40]	; (8c24 <UtilCmacBuildDataForDerivation+0xb4>)
    8bfc:	b002      	add	sp, #8
    8bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c02:	9b08      	ldr	r3, [sp, #32]
    8c04:	2201      	movs	r2, #1
    8c06:	1918      	adds	r0, r3, r4
    8c08:	4669      	mov	r1, sp
    8c0a:	f7fe ff8f 	bl	7b2c <CC_PalMemCopyPlat>
    8c0e:	3401      	adds	r4, #1
    8c10:	e7ed      	b.n	8bee <UtilCmacBuildDataForDerivation+0x7e>
    8c12:	9b08      	ldr	r3, [sp, #32]
    8c14:	4641      	mov	r1, r8
    8c16:	1918      	adds	r0, r3, r4
    8c18:	463a      	mov	r2, r7
    8c1a:	f7fe ff87 	bl	7b2c <CC_PalMemCopyPlat>
    8c1e:	443c      	add	r4, r7
    8c20:	e7d6      	b.n	8bd0 <UtilCmacBuildDataForDerivation+0x60>
    8c22:	bf00      	nop
    8c24:	80000006 	.word	0x80000006

00008c28 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    8c28:	b508      	push	{r3, lr}
	spm_config();
    8c2a:	f7f9 f851 	bl	1cd0 <spm_config>
	spm_jump();
}
    8c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    8c32:	f7f8 bfed 	b.w	1c10 <spm_jump>

00008c36 <sys_notify_validate>:
	if (notify == NULL) {
    8c36:	4603      	mov	r3, r0
    8c38:	b158      	cbz	r0, 8c52 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8c3a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8c3c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    8c40:	2a01      	cmp	r2, #1
    8c42:	d003      	beq.n	8c4c <sys_notify_validate+0x16>
    8c44:	2a03      	cmp	r2, #3
    8c46:	d104      	bne.n	8c52 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    8c48:	6802      	ldr	r2, [r0, #0]
    8c4a:	b112      	cbz	r2, 8c52 <sys_notify_validate+0x1c>
		notify->result = 0;
    8c4c:	2000      	movs	r0, #0
    8c4e:	6098      	str	r0, [r3, #8]
    8c50:	4770      	bx	lr
		return -EINVAL;
    8c52:	f06f 0015 	mvn.w	r0, #21
}
    8c56:	4770      	bx	lr

00008c58 <arch_printk_char_out>:
}
    8c58:	2000      	movs	r0, #0
    8c5a:	4770      	bx	lr

00008c5c <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    8c5c:	b40f      	push	{r0, r1, r2, r3}
    8c5e:	b507      	push	{r0, r1, r2, lr}
    8c60:	a904      	add	r1, sp, #16
    8c62:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8c66:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    8c68:	f7f7 fca8 	bl	5bc <vprintk>
	}
	va_end(ap);
}
    8c6c:	b003      	add	sp, #12
    8c6e:	f85d eb04 	ldr.w	lr, [sp], #4
    8c72:	b004      	add	sp, #16
    8c74:	4770      	bx	lr

00008c76 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8c76:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8c78:	f013 0307 	ands.w	r3, r3, #7
    8c7c:	d105      	bne.n	8c8a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8c7e:	6803      	ldr	r3, [r0, #0]
    8c80:	2b00      	cmp	r3, #0
		evt = EVT_START;
    8c82:	bf0c      	ite	eq
    8c84:	2000      	moveq	r0, #0
    8c86:	2003      	movne	r0, #3
    8c88:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8c8a:	2b02      	cmp	r3, #2
    8c8c:	d105      	bne.n	8c9a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8c8e:	8bc3      	ldrh	r3, [r0, #30]
    8c90:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    8c92:	bf14      	ite	ne
    8c94:	2000      	movne	r0, #0
    8c96:	2004      	moveq	r0, #4
    8c98:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8c9a:	2b01      	cmp	r3, #1
    8c9c:	d105      	bne.n	8caa <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8c9e:	6803      	ldr	r3, [r0, #0]
    8ca0:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    8ca2:	bf0c      	ite	eq
    8ca4:	2000      	moveq	r0, #0
    8ca6:	2005      	movne	r0, #5
    8ca8:	4770      	bx	lr
	int evt = EVT_NOP;
    8caa:	2000      	movs	r0, #0
}
    8cac:	4770      	bx	lr

00008cae <notify_one>:
{
    8cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cb2:	460d      	mov	r5, r1
    8cb4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8cb6:	4619      	mov	r1, r3
    8cb8:	1d28      	adds	r0, r5, #4
{
    8cba:	4690      	mov	r8, r2
    8cbc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8cbe:	f7f7 fc51 	bl	564 <sys_notify_finalize>
	if (cb) {
    8cc2:	4604      	mov	r4, r0
    8cc4:	b138      	cbz	r0, 8cd6 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8cc6:	4633      	mov	r3, r6
    8cc8:	4642      	mov	r2, r8
    8cca:	4629      	mov	r1, r5
    8ccc:	4638      	mov	r0, r7
    8cce:	46a4      	mov	ip, r4
}
    8cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8cd4:	4760      	bx	ip
}
    8cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008cda <validate_args>:
{
    8cda:	b510      	push	{r4, lr}
    8cdc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8cde:	b140      	cbz	r0, 8cf2 <validate_args+0x18>
    8ce0:	b139      	cbz	r1, 8cf2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8ce2:	1d08      	adds	r0, r1, #4
    8ce4:	f7ff ffa7 	bl	8c36 <sys_notify_validate>
	if ((rv == 0)
    8ce8:	b928      	cbnz	r0, 8cf6 <validate_args+0x1c>
	    && ((cli->notify.flags
    8cea:	68a3      	ldr	r3, [r4, #8]
    8cec:	f033 0303 	bics.w	r3, r3, #3
    8cf0:	d001      	beq.n	8cf6 <validate_args+0x1c>
		rv = -EINVAL;
    8cf2:	f06f 0015 	mvn.w	r0, #21
}
    8cf6:	bd10      	pop	{r4, pc}

00008cf8 <onoff_manager_init>:
{
    8cf8:	b538      	push	{r3, r4, r5, lr}
    8cfa:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8cfc:	4605      	mov	r5, r0
    8cfe:	b158      	cbz	r0, 8d18 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8d00:	b151      	cbz	r1, 8d18 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8d02:	680b      	ldr	r3, [r1, #0]
    8d04:	b143      	cbz	r3, 8d18 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8d06:	684b      	ldr	r3, [r1, #4]
    8d08:	b133      	cbz	r3, 8d18 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8d0a:	2220      	movs	r2, #32
    8d0c:	2100      	movs	r1, #0
    8d0e:	f000 f9e6 	bl	90de <memset>
	return 0;
    8d12:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8d14:	612c      	str	r4, [r5, #16]
}
    8d16:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8d18:	f06f 0015 	mvn.w	r0, #21
    8d1c:	e7fb      	b.n	8d16 <onoff_manager_init+0x1e>

00008d1e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8d1e:	4604      	mov	r4, r0
    8d20:	b508      	push	{r3, lr}
    8d22:	4608      	mov	r0, r1
    8d24:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    8d26:	461a      	mov	r2, r3
    8d28:	47a0      	blx	r4
	return z_impl_k_current_get();
    8d2a:	f7fc ff35 	bl	5b98 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    8d2e:	f7f9 fe71 	bl	2a14 <z_impl_k_thread_abort>

00008d32 <encode_uint>:
{
    8d32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d36:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    8d38:	78d3      	ldrb	r3, [r2, #3]
{
    8d3a:	4614      	mov	r4, r2
	switch (specifier) {
    8d3c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8d3e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    8d42:	4606      	mov	r6, r0
    8d44:	460f      	mov	r7, r1
    8d46:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    8d48:	d02d      	beq.n	8da6 <encode_uint+0x74>
    8d4a:	d828      	bhi.n	8d9e <encode_uint+0x6c>
		return 16;
    8d4c:	2b58      	cmp	r3, #88	; 0x58
    8d4e:	bf14      	ite	ne
    8d50:	250a      	movne	r5, #10
    8d52:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    8d54:	46aa      	mov	sl, r5
    8d56:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    8d5a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    8d5e:	4652      	mov	r2, sl
    8d60:	465b      	mov	r3, fp
    8d62:	4630      	mov	r0, r6
    8d64:	4639      	mov	r1, r7
    8d66:	f7f7 fa69 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8d6a:	2a09      	cmp	r2, #9
    8d6c:	b2d3      	uxtb	r3, r2
    8d6e:	d81f      	bhi.n	8db0 <encode_uint+0x7e>
    8d70:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8d72:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8d74:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    8d76:	bf08      	it	eq
    8d78:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8d7a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    8d7e:	d301      	bcc.n	8d84 <encode_uint+0x52>
    8d80:	45c8      	cmp	r8, r9
    8d82:	d812      	bhi.n	8daa <encode_uint+0x78>
	if (conv->flag_hash) {
    8d84:	7823      	ldrb	r3, [r4, #0]
    8d86:	069b      	lsls	r3, r3, #26
    8d88:	d505      	bpl.n	8d96 <encode_uint+0x64>
		if (radix == 8) {
    8d8a:	2d08      	cmp	r5, #8
    8d8c:	d116      	bne.n	8dbc <encode_uint+0x8a>
			conv->altform_0 = true;
    8d8e:	78a3      	ldrb	r3, [r4, #2]
    8d90:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8d94:	70a3      	strb	r3, [r4, #2]
}
    8d96:	4640      	mov	r0, r8
    8d98:	b003      	add	sp, #12
    8d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8d9e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    8da2:	2b70      	cmp	r3, #112	; 0x70
    8da4:	e7d3      	b.n	8d4e <encode_uint+0x1c>
	switch (specifier) {
    8da6:	2508      	movs	r5, #8
    8da8:	e7d4      	b.n	8d54 <encode_uint+0x22>
		value /= radix;
    8daa:	4606      	mov	r6, r0
    8dac:	460f      	mov	r7, r1
    8dae:	e7d6      	b.n	8d5e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8db0:	9a01      	ldr	r2, [sp, #4]
    8db2:	2a19      	cmp	r2, #25
    8db4:	bf94      	ite	ls
    8db6:	3337      	addls	r3, #55	; 0x37
    8db8:	3357      	addhi	r3, #87	; 0x57
    8dba:	e7da      	b.n	8d72 <encode_uint+0x40>
		} else if (radix == 16) {
    8dbc:	2d10      	cmp	r5, #16
    8dbe:	d1ea      	bne.n	8d96 <encode_uint+0x64>
			conv->altform_0c = true;
    8dc0:	78a3      	ldrb	r3, [r4, #2]
    8dc2:	f043 0310 	orr.w	r3, r3, #16
    8dc6:	e7e5      	b.n	8d94 <encode_uint+0x62>

00008dc8 <outs>:
{
    8dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dcc:	4607      	mov	r7, r0
    8dce:	4688      	mov	r8, r1
    8dd0:	4615      	mov	r5, r2
    8dd2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8dd4:	4614      	mov	r4, r2
    8dd6:	42b4      	cmp	r4, r6
    8dd8:	eba4 0005 	sub.w	r0, r4, r5
    8ddc:	d302      	bcc.n	8de4 <outs+0x1c>
    8dde:	b93e      	cbnz	r6, 8df0 <outs+0x28>
    8de0:	7823      	ldrb	r3, [r4, #0]
    8de2:	b12b      	cbz	r3, 8df0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8de4:	4641      	mov	r1, r8
    8de6:	f814 0b01 	ldrb.w	r0, [r4], #1
    8dea:	47b8      	blx	r7
		if (rc < 0) {
    8dec:	2800      	cmp	r0, #0
    8dee:	daf2      	bge.n	8dd6 <outs+0xe>
}
    8df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008df4 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8df4:	4040      	eors	r0, r0
    8df6:	f380 8811 	msr	BASEPRI, r0
    8dfa:	f04f 0004 	mov.w	r0, #4
    8dfe:	df02      	svc	2
}
    8e00:	4770      	bx	lr

00008e02 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8e02:	4770      	bx	lr

00008e04 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    8e04:	f7fa bc48 	b.w	3698 <SystemInit>

00008e08 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    8e08:	b084      	sub	sp, #16
    8e0a:	ab04      	add	r3, sp, #16
    8e0c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8e10:	2300      	movs	r3, #0
    8e12:	f383 8811 	msr	BASEPRI, r3
    8e16:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8e1a:	b004      	add	sp, #16
    8e1c:	4770      	bx	lr

00008e1e <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    8e1e:	b40f      	push	{r0, r1, r2, r3}
    8e20:	b507      	push	{r0, r1, r2, lr}
    8e22:	a904      	add	r1, sp, #16
    8e24:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8e28:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    8e2a:	f7f7 fbc7 	bl	5bc <vprintk>
	va_end(ap);
}
    8e2e:	b003      	add	sp, #12
    8e30:	f85d eb04 	ldr.w	lr, [sp], #4
    8e34:	b004      	add	sp, #16
    8e36:	4770      	bx	lr

00008e38 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    8e38:	2200      	movs	r2, #0
    8e3a:	e9c0 2200 	strd	r2, r2, [r0]
    8e3e:	6082      	str	r2, [r0, #8]
}
    8e40:	4770      	bx	lr

00008e42 <set_starting_state>:
{
    8e42:	b510      	push	{r4, lr}
	__asm__ volatile(
    8e44:	f04f 0320 	mov.w	r3, #32
    8e48:	f3ef 8211 	mrs	r2, BASEPRI
    8e4c:	f383 8811 	msr	BASEPRI, r3
    8e50:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8e54:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8e56:	f003 0407 	and.w	r4, r3, #7
    8e5a:	2c01      	cmp	r4, #1
    8e5c:	d106      	bne.n	8e6c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8e5e:	6001      	str	r1, [r0, #0]
	int err = 0;
    8e60:	2000      	movs	r0, #0
	__asm__ volatile(
    8e62:	f382 8811 	msr	BASEPRI, r2
    8e66:	f3bf 8f6f 	isb	sy
}
    8e6a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8e6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    8e70:	428b      	cmp	r3, r1
		err = -EALREADY;
    8e72:	bf14      	ite	ne
    8e74:	f04f 30ff 	movne.w	r0, #4294967295
    8e78:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    8e7c:	e7f1      	b.n	8e62 <set_starting_state+0x20>

00008e7e <set_on_state>:
	__asm__ volatile(
    8e7e:	f04f 0320 	mov.w	r3, #32
    8e82:	f3ef 8211 	mrs	r2, BASEPRI
    8e86:	f383 8811 	msr	BASEPRI, r3
    8e8a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8e8e:	6803      	ldr	r3, [r0, #0]
    8e90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8e94:	f043 0302 	orr.w	r3, r3, #2
    8e98:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8e9a:	f382 8811 	msr	BASEPRI, r2
    8e9e:	f3bf 8f6f 	isb	sy
}
    8ea2:	4770      	bx	lr

00008ea4 <onoff_started_callback>:
	return &data->mgr[type];
    8ea4:	6900      	ldr	r0, [r0, #16]
    8ea6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8ea8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8eac:	2100      	movs	r1, #0
    8eae:	4710      	bx	r2

00008eb0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8eb0:	2000      	movs	r0, #0
    8eb2:	f7fa bd11 	b.w	38d8 <nrfx_clock_start>

00008eb6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8eb6:	2000      	movs	r0, #0
    8eb8:	f7fa bd5e 	b.w	3978 <nrfx_clock_stop>

00008ebc <api_stop>:
	return stop(dev, subsys, CTX_API);
    8ebc:	2280      	movs	r2, #128	; 0x80
    8ebe:	f7f8 bb0f 	b.w	14e0 <stop>

00008ec2 <blocking_start_callback>:
{
    8ec2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8ec4:	f7fb bf00 	b.w	4cc8 <z_impl_k_sem_give>

00008ec8 <api_start>:
{
    8ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    8ecc:	240c      	movs	r4, #12
    8ece:	b2c9      	uxtb	r1, r1
    8ed0:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    8ed2:	6905      	ldr	r5, [r0, #16]
{
    8ed4:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8ed6:	f104 0048 	add.w	r0, r4, #72	; 0x48
    8eda:	2180      	movs	r1, #128	; 0x80
    8edc:	4428      	add	r0, r5
{
    8ede:	4690      	mov	r8, r2
    8ee0:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    8ee2:	f7ff ffae 	bl	8e42 <set_starting_state>
	if (err < 0) {
    8ee6:	2800      	cmp	r0, #0
    8ee8:	db06      	blt.n	8ef8 <api_start+0x30>
	subdata->cb = cb;
    8eea:	4425      	add	r5, r4
	subdata->user_data = user_data;
    8eec:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    8ef0:	6873      	ldr	r3, [r6, #4]
    8ef2:	591b      	ldr	r3, [r3, r4]
    8ef4:	4798      	blx	r3
	return 0;
    8ef6:	2000      	movs	r0, #0
}
    8ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008efc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    8efc:	4770      	bx	lr

00008efe <sys_clock_disable>:
    8efe:	4770      	bx	lr

00008f00 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
    8f00:	f000 021f 	and.w	r2, r0, #31
    8f04:	211f      	movs	r1, #31
    8f06:	2004      	movs	r0, #4
    8f08:	f7f8 bdcc 	b.w	1aa4 <adp536x_reg_write_mask>

00008f0c <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
    8f0c:	f000 0207 	and.w	r2, r0, #7
    8f10:	2107      	movs	r1, #7
    8f12:	2002      	movs	r0, #2
    8f14:	f7f8 bdc6 	b.w	1aa4 <adp536x_reg_write_mask>

00008f18 <adp536x_charging_enable>:
{
    8f18:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
    8f1a:	2101      	movs	r1, #1
    8f1c:	2007      	movs	r0, #7
    8f1e:	f7f8 bdc1 	b.w	1aa4 <adp536x_reg_write_mask>

00008f22 <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
    8f22:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
    8f24:	21e0      	movs	r1, #224	; 0xe0
    8f26:	2015      	movs	r0, #21
    8f28:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
    8f2c:	f7f8 bdba 	b.w	1aa4 <adp536x_reg_write_mask>

00008f30 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
    8f30:	2218      	movs	r2, #24
    8f32:	213f      	movs	r1, #63	; 0x3f
    8f34:	202a      	movs	r0, #42	; 0x2a
    8f36:	f7f8 bdb5 	b.w	1aa4 <adp536x_reg_write_mask>

00008f3a <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
    8f3a:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
    8f3c:	2102      	movs	r1, #2
    8f3e:	2029      	movs	r0, #41	; 0x29
    8f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    8f44:	f7f8 bdae 	b.w	1aa4 <adp536x_reg_write_mask>

00008f48 <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
    8f48:	2213      	movs	r2, #19
    8f4a:	213f      	movs	r1, #63	; 0x3f
    8f4c:	202c      	movs	r0, #44	; 0x2c
    8f4e:	f7f8 bda9 	b.w	1aa4 <adp536x_reg_write_mask>

00008f52 <adp536x_buckbst_enable>:
{
    8f52:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
    8f54:	2101      	movs	r1, #1
    8f56:	202b      	movs	r0, #43	; 0x2b
    8f58:	f7f8 bda4 	b.w	1aa4 <adp536x_reg_write_mask>

00008f5c <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    8f5c:	2000      	movs	r0, #0
    8f5e:	f7f8 b963 	b.w	1228 <sys_reboot>

00008f62 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8f62:	2100      	movs	r1, #0
    8f64:	2001      	movs	r0, #1
    8f66:	f7f9 b9e9 	b.w	233c <z_arm_fatal_error>

00008f6a <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
    8f6a:	4602      	mov	r2, r0
    8f6c:	b243      	sxtb	r3, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    8f6e:	4608      	mov	r0, r1
    8f70:	b9c1      	cbnz	r1, 8fa4 <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
    8f72:	2b00      	cmp	r3, #0
    8f74:	db27      	blt.n	8fc6 <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    8f76:	2001      	movs	r0, #1
    8f78:	095b      	lsrs	r3, r3, #5
    8f7a:	009b      	lsls	r3, r3, #2
    8f7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8f80:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    8f84:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    8f88:	f002 021f 	and.w	r2, r2, #31
    8f8c:	4090      	lsls	r0, r2
    8f8e:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    8f92:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    8f96:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    8f9a:	40d0      	lsrs	r0, r2
    8f9c:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    8fa0:	b2c0      	uxtb	r0, r0
    8fa2:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	db0d      	blt.n	8fc4 <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    8fa8:	2101      	movs	r1, #1
    8faa:	095b      	lsrs	r3, r3, #5
    8fac:	009b      	lsls	r3, r3, #2
    8fae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8fb2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    8fb6:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    8fba:	f002 021f 	and.w	r2, r2, #31
    8fbe:	4091      	lsls	r1, r2
    8fc0:	4301      	orrs	r1, r0
    8fc2:	e7e6      	b.n	8f92 <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
    8fc4:	2000      	movs	r0, #0
	}
}
    8fc6:	4770      	bx	lr

00008fc8 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    8fc8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    8fca:	f383 880b 	msr	PSPLIM, r3
}
    8fce:	4770      	bx	lr

00008fd0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8fd0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    8fd2:	6800      	ldr	r0, [r0, #0]
    8fd4:	f7f9 b9b2 	b.w	233c <z_arm_fatal_error>

00008fd8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    8fd8:	b508      	push	{r3, lr}
	handler();
    8fda:	f7f9 f9dd 	bl	2398 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    8fe2:	f7f9 bcb5 	b.w	2950 <z_arm_exc_exit>

00008fe6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    8fe6:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    8fea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8fee:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    8ff0:	bf08      	it	eq
    8ff2:	f06f 0015 	mvneq.w	r0, #21
    8ff6:	4770      	bx	lr

00008ff8 <arm_cmse_addr_is_secure>:
    8ff8:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
    8ffc:	f3c0 5080 	ubfx	r0, r0, #22, #1
    9000:	4770      	bx	lr

00009002 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    9002:	4603      	mov	r3, r0
	size_t n = 0;
    9004:	2000      	movs	r0, #0

	while (*s != '\0') {
    9006:	5c1a      	ldrb	r2, [r3, r0]
    9008:	b902      	cbnz	r2, 900c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    900a:	4770      	bx	lr
		n++;
    900c:	3001      	adds	r0, #1
    900e:	e7fa      	b.n	9006 <strlen+0x4>

00009010 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    9010:	4603      	mov	r3, r0
	size_t n = 0;
    9012:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    9014:	5c1a      	ldrb	r2, [r3, r0]
    9016:	b10a      	cbz	r2, 901c <strnlen+0xc>
    9018:	4288      	cmp	r0, r1
    901a:	d100      	bne.n	901e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    901c:	4770      	bx	lr
		n++;
    901e:	3001      	adds	r0, #1
    9020:	e7f8      	b.n	9014 <strnlen+0x4>

00009022 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    9022:	1e43      	subs	r3, r0, #1
    9024:	3901      	subs	r1, #1
    9026:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    902a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    902e:	4282      	cmp	r2, r0
    9030:	d101      	bne.n	9036 <strcmp+0x14>
    9032:	2a00      	cmp	r2, #0
    9034:	d1f7      	bne.n	9026 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    9036:	1a10      	subs	r0, r2, r0
    9038:	4770      	bx	lr

0000903a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    903a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    903c:	b15a      	cbz	r2, 9056 <memcmp+0x1c>
    903e:	3901      	subs	r1, #1
    9040:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    9042:	f810 2b01 	ldrb.w	r2, [r0], #1
    9046:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    904a:	42a0      	cmp	r0, r4
    904c:	d001      	beq.n	9052 <memcmp+0x18>
    904e:	429a      	cmp	r2, r3
    9050:	d0f7      	beq.n	9042 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    9052:	1ad0      	subs	r0, r2, r3
}
    9054:	bd10      	pop	{r4, pc}
		return 0;
    9056:	4610      	mov	r0, r2
    9058:	e7fc      	b.n	9054 <memcmp+0x1a>

0000905a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    905a:	1a43      	subs	r3, r0, r1
    905c:	4293      	cmp	r3, r2
{
    905e:	b510      	push	{r4, lr}
    9060:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    9064:	d308      	bcc.n	9078 <memmove+0x1e>
	char *dest = d;
    9066:	4602      	mov	r2, r0
    9068:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    906a:	429a      	cmp	r2, r3
    906c:	d00b      	beq.n	9086 <memmove+0x2c>
			*dest = *src;
    906e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    9072:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    9076:	e7f8      	b.n	906a <memmove+0x10>
    9078:	440a      	add	r2, r1
			dest[n] = src[n];
    907a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    907e:	428a      	cmp	r2, r1
			dest[n] = src[n];
    9080:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    9084:	d1f9      	bne.n	907a <memmove+0x20>
		}
	}

	return d;
}
    9086:	bd10      	pop	{r4, pc}

00009088 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    9088:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    908a:	ea81 0400 	eor.w	r4, r1, r0
    908e:	07a5      	lsls	r5, r4, #30
    9090:	4603      	mov	r3, r0
    9092:	d00b      	beq.n	90ac <memcpy+0x24>
    9094:	3b01      	subs	r3, #1
    9096:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    9098:	4291      	cmp	r1, r2
    909a:	d11b      	bne.n	90d4 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    909c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    909e:	2a00      	cmp	r2, #0
    90a0:	d0fc      	beq.n	909c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    90a2:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    90a6:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    90a8:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    90ac:	079c      	lsls	r4, r3, #30
    90ae:	d1f6      	bne.n	909e <memcpy+0x16>
    90b0:	f022 0403 	bic.w	r4, r2, #3
    90b4:	1f1d      	subs	r5, r3, #4
    90b6:	0896      	lsrs	r6, r2, #2
    90b8:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    90ba:	42b9      	cmp	r1, r7
    90bc:	d105      	bne.n	90ca <memcpy+0x42>
    90be:	f06f 0503 	mvn.w	r5, #3
    90c2:	4423      	add	r3, r4
    90c4:	fb05 2206 	mla	r2, r5, r6, r2
    90c8:	e7e4      	b.n	9094 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    90ca:	f851 cb04 	ldr.w	ip, [r1], #4
    90ce:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    90d2:	e7f2      	b.n	90ba <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    90d4:	f811 4b01 	ldrb.w	r4, [r1], #1
    90d8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    90dc:	e7dc      	b.n	9098 <memcpy+0x10>

000090de <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    90de:	4603      	mov	r3, r0
{
    90e0:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    90e2:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    90e4:	079c      	lsls	r4, r3, #30
    90e6:	d111      	bne.n	910c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    90e8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    90ec:	f022 0603 	bic.w	r6, r2, #3
    90f0:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    90f4:	441e      	add	r6, r3
    90f6:	0894      	lsrs	r4, r2, #2
    90f8:	42b3      	cmp	r3, r6
    90fa:	d10d      	bne.n	9118 <memset+0x3a>
    90fc:	f06f 0503 	mvn.w	r5, #3
    9100:	fb05 2204 	mla	r2, r5, r4, r2
    9104:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    9106:	4293      	cmp	r3, r2
    9108:	d109      	bne.n	911e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    910a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    910c:	2a00      	cmp	r2, #0
    910e:	d0fc      	beq.n	910a <memset+0x2c>
		*(d_byte++) = c_byte;
    9110:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9114:	3a01      	subs	r2, #1
    9116:	e7e5      	b.n	90e4 <memset+0x6>
		*(d_word++) = c_word;
    9118:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    911c:	e7ec      	b.n	90f8 <memset+0x1a>
		*(d_byte++) = c_byte;
    911e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9122:	e7f0      	b.n	9106 <memset+0x28>

00009124 <_stdout_hook_default>:
}
    9124:	f04f 30ff 	mov.w	r0, #4294967295
    9128:	4770      	bx	lr

0000912a <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    912a:	6843      	ldr	r3, [r0, #4]
    912c:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    912e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9132:	05d1      	lsls	r1, r2, #23
    9134:	d518      	bpl.n	9168 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9136:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    913a:	b1aa      	cbz	r2, 9168 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    913c:	f04f 0120 	mov.w	r1, #32
    9140:	f3ef 8211 	mrs	r2, BASEPRI
    9144:	f381 8811 	msr	BASEPRI, r1
    9148:	f3bf 8f6f 	isb	sy
    914c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9150:	b131      	cbz	r1, 9160 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9152:	2100      	movs	r1, #0
    9154:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    9158:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    915c:	2101      	movs	r1, #1
    915e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    9160:	f382 8811 	msr	BASEPRI, r2
    9164:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9168:	6842      	ldr	r2, [r0, #4]
    916a:	6852      	ldr	r2, [r2, #4]
    916c:	06d2      	lsls	r2, r2, #27
    916e:	d515      	bpl.n	919c <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    9170:	f04f 0120 	mov.w	r1, #32
    9174:	f3ef 8211 	mrs	r2, BASEPRI
    9178:	f381 8811 	msr	BASEPRI, r1
    917c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9180:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9184:	b111      	cbz	r1, 918c <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9186:	2100      	movs	r1, #0
    9188:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    918c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    9190:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    9194:	f382 8811 	msr	BASEPRI, r2
    9198:	f3bf 8f6f 	isb	sy
}
    919c:	4770      	bx	lr

0000919e <uarte_nrfx_config_get>:
{
    919e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    91a0:	6902      	ldr	r2, [r0, #16]
    91a2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    91a6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    91aa:	2000      	movs	r0, #0
    91ac:	4770      	bx	lr

000091ae <uarte_nrfx_err_check>:
	return config->uarte_regs;
    91ae:	6843      	ldr	r3, [r0, #4]
    91b0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    91b2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    91b6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    91ba:	4770      	bx	lr

000091bc <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    91bc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    91be:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    91c0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    91c4:	b940      	cbnz	r0, 91d8 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    91c6:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    91c8:	0712      	lsls	r2, r2, #28
    91ca:	d406      	bmi.n	91da <is_tx_ready+0x1e>
    91cc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    91d0:	3800      	subs	r0, #0
    91d2:	bf18      	it	ne
    91d4:	2001      	movne	r0, #1
    91d6:	4770      	bx	lr
    91d8:	2001      	movs	r0, #1
}
    91da:	4770      	bx	lr

000091dc <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    91dc:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    91de:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    91e0:	681b      	ldr	r3, [r3, #0]
    91e2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    91e6:	b148      	cbz	r0, 91fc <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    91e8:	2000      	movs	r0, #0
	*c = data->rx_data;
    91ea:	7c52      	ldrb	r2, [r2, #17]
    91ec:	700a      	strb	r2, [r1, #0]
    91ee:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    91f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    91f6:	2201      	movs	r2, #1
    91f8:	601a      	str	r2, [r3, #0]
	return 0;
    91fa:	4770      	bx	lr
		return -1;
    91fc:	f04f 30ff 	mov.w	r0, #4294967295
}
    9200:	4770      	bx	lr

00009202 <uarte_instance_init.isra.0>:
static int uarte_instance_init(const struct device *dev,
    9202:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9206:	f04f 0800 	mov.w	r8, #0
	return config->uarte_regs;
    920a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    920c:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    920e:	681c      	ldr	r4, [r3, #0]
    9210:	680b      	ldr	r3, [r1, #0]
    9212:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    9216:	4606      	mov	r6, r0
	data->dev = dev;
    9218:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    921a:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
    921c:	460d      	mov	r5, r1
    921e:	9301      	str	r3, [sp, #4]
    9220:	f7fa f8c2 	bl	33a8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9224:	2301      	movs	r3, #1
    9226:	9a01      	ldr	r2, [sp, #4]
    9228:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    922a:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    922c:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    922e:	a801      	add	r0, sp, #4
    9230:	9301      	str	r3, [sp, #4]
    9232:	f7fa f8b9 	bl	33a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9236:	2203      	movs	r2, #3
    9238:	9b01      	ldr	r3, [sp, #4]
    923a:	3380      	adds	r3, #128	; 0x80
    923c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    9240:	686b      	ldr	r3, [r5, #4]
    9242:	1c5a      	adds	r2, r3, #1
    9244:	d007      	beq.n	9256 <uarte_instance_init.isra.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9246:	a801      	add	r0, sp, #4
    9248:	9301      	str	r3, [sp, #4]
    924a:	f7fa f8ad 	bl	33a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    924e:	9b01      	ldr	r3, [sp, #4]
    9250:	3380      	adds	r3, #128	; 0x80
    9252:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
    9256:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
    925a:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    925e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    9262:	68ab      	ldr	r3, [r5, #8]
    9264:	1c58      	adds	r0, r3, #1
    9266:	d008      	beq.n	927a <uarte_instance_init.isra.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9268:	a801      	add	r0, sp, #4
    926a:	9301      	str	r3, [sp, #4]
    926c:	f7fa f89c 	bl	33a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9270:	2200      	movs	r2, #0
    9272:	9b01      	ldr	r3, [sp, #4]
    9274:	3380      	adds	r3, #128	; 0x80
    9276:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    927a:	68eb      	ldr	r3, [r5, #12]
    927c:	1c59      	adds	r1, r3, #1
    927e:	d011      	beq.n	92a4 <uarte_instance_init.isra.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9280:	a801      	add	r0, sp, #4
    9282:	9301      	str	r3, [sp, #4]
    9284:	f7fa f890 	bl	33a8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9288:	2301      	movs	r3, #1
    928a:	9a01      	ldr	r2, [sp, #4]
    928c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    928e:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    9290:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9292:	a801      	add	r0, sp, #4
    9294:	9301      	str	r3, [sp, #4]
    9296:	f7fa f887 	bl	33a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    929a:	2203      	movs	r2, #3
    929c:	9b01      	ldr	r3, [sp, #4]
    929e:	3380      	adds	r3, #128	; 0x80
    92a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    92a4:	6931      	ldr	r1, [r6, #16]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
    92a6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    92aa:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
    92ac:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    92b0:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
    92b2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    92b6:	f7f9 ffc1 	bl	323c <uarte_nrfx_configure>
	if (err) {
    92ba:	bb40      	cbnz	r0, 930e <uarte_instance_init.isra.0+0x10c>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    92bc:	2308      	movs	r3, #8
    92be:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    92c2:	686b      	ldr	r3, [r5, #4]
    92c4:	3301      	adds	r3, #1
    92c6:	d00b      	beq.n	92e0 <uarte_instance_init.isra.0+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    92c8:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    92cc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    92d0:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    92d4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    92d8:	2301      	movs	r3, #1
    92da:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    92de:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    92e0:	6873      	ldr	r3, [r6, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    92e2:	3710      	adds	r7, #16
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    92e4:	685b      	ldr	r3, [r3, #4]
    92e6:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    92e8:	bf5c      	itt	pl
    92ea:	f44f 7280 	movpl.w	r2, #256	; 0x100
    92ee:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    92f2:	06db      	lsls	r3, r3, #27
    92f4:	bf44      	itt	mi
    92f6:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    92fa:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    92fe:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9300:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9304:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9308:	2301      	movs	r3, #1
    930a:	60a3      	str	r3, [r4, #8]
    930c:	60e3      	str	r3, [r4, #12]
}
    930e:	b002      	add	sp, #8
    9310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009314 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
    9314:	f7fc bfac 	b.w	6270 <nrf_cc3xx_platform_init>

00009318 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    9318:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    931a:	f7f8 fe65 	bl	1fe8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    931e:	f7f8 ff0f 	bl	2140 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    9322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
    9326:	f7fc bfa3 	b.w	6270 <nrf_cc3xx_platform_init>

0000932a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    932a:	4700      	bx	r0

0000932c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    932c:	f000 b89c 	b.w	9468 <z_impl_k_busy_wait>

00009330 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    9330:	7b0a      	ldrb	r2, [r1, #12]
{
    9332:	4603      	mov	r3, r0
    9334:	2a03      	cmp	r2, #3
    9336:	d829      	bhi.n	938c <xfer_completeness_check+0x5c>
    9338:	e8df f002 	tbb	[pc, r2]
    933c:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    9340:	688a      	ldr	r2, [r1, #8]
    9342:	0350      	lsls	r0, r2, #13
    9344:	d504      	bpl.n	9350 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    9346:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    934a:	6908      	ldr	r0, [r1, #16]
    934c:	4290      	cmp	r0, r2
    934e:	d107      	bne.n	9360 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    9350:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    9352:	0352      	lsls	r2, r2, #13
    9354:	d41a      	bmi.n	938c <xfer_completeness_check+0x5c>
    9356:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    935a:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    935c:	4291      	cmp	r1, r2
    935e:	d015      	beq.n	938c <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    9360:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    9362:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    9364:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    9368:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    936c:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    936e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    9372:	6908      	ldr	r0, [r1, #16]
    9374:	4290      	cmp	r0, r2
    9376:	d1f3      	bne.n	9360 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    9378:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    937c:	e7ed      	b.n	935a <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    937e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    9382:	6909      	ldr	r1, [r1, #16]
    9384:	e7ea      	b.n	935c <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    9386:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    938a:	e7fa      	b.n	9382 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    938c:	2001      	movs	r0, #1
}
    938e:	4770      	bx	lr

00009390 <nrf_gpio_pin_set>:
{
    9390:	b507      	push	{r0, r1, r2, lr}
    9392:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9394:	a801      	add	r0, sp, #4
    9396:	f7fa ff49 	bl	422c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    939a:	2301      	movs	r3, #1
    939c:	9a01      	ldr	r2, [sp, #4]
    939e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    93a0:	6083      	str	r3, [r0, #8]
}
    93a2:	b003      	add	sp, #12
    93a4:	f85d fb04 	ldr.w	pc, [sp], #4

000093a8 <z_device_state_init>:
}
    93a8:	4770      	bx	lr

000093aa <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
    93aa:	68c3      	ldr	r3, [r0, #12]
    93ac:	8818      	ldrh	r0, [r3, #0]
    93ae:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
    93b2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    93b6:	4258      	negs	r0, r3
    93b8:	4158      	adcs	r0, r3
    93ba:	4770      	bx	lr

000093bc <k_mem_slab_init>:
{
    93bc:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    93be:	2400      	movs	r4, #0
    93c0:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    93c2:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    93c4:	ea41 0402 	orr.w	r4, r1, r2
    93c8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    93cc:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    93d0:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    93d2:	d10c      	bne.n	93ee <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    93d4:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    93d6:	42a3      	cmp	r3, r4
    93d8:	d103      	bne.n	93e2 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    93da:	e9c0 0000 	strd	r0, r0, [r0]
}
    93de:	2000      	movs	r0, #0
}
    93e0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    93e2:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    93e4:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    93e6:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    93e8:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    93ea:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    93ec:	e7f3      	b.n	93d6 <k_mem_slab_init+0x1a>
		return -EINVAL;
    93ee:	f06f 0015 	mvn.w	r0, #21
	return rc;
    93f2:	e7f5      	b.n	93e0 <k_mem_slab_init+0x24>

000093f4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    93f4:	f3ef 8005 	mrs	r0, IPSR
}
    93f8:	3800      	subs	r0, #0
    93fa:	bf18      	it	ne
    93fc:	2001      	movne	r0, #1
    93fe:	4770      	bx	lr

00009400 <k_thread_name_get>:
}
    9400:	2000      	movs	r0, #0
    9402:	4770      	bx	lr

00009404 <z_pm_save_idle_exit>:
{
    9404:	b508      	push	{r3, lr}
	pm_system_resume();
    9406:	f7f7 ffa1 	bl	134c <pm_system_resume>
}
    940a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    940e:	f7ff bd75 	b.w	8efc <sys_clock_idle_exit>

00009412 <z_impl_k_mutex_init>:
{
    9412:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9414:	2000      	movs	r0, #0
    9416:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    941a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    941e:	4770      	bx	lr

00009420 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9420:	4603      	mov	r3, r0
    9422:	b920      	cbnz	r0, 942e <z_reschedule_irqlock+0xe>
    9424:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    9428:	b90a      	cbnz	r2, 942e <z_reschedule_irqlock+0xe>
    942a:	f7f8 be9f 	b.w	216c <arch_swap>
    942e:	f383 8811 	msr	BASEPRI, r3
    9432:	f3bf 8f6f 	isb	sy
}
    9436:	4770      	bx	lr

00009438 <z_reschedule_unlocked>:
	__asm__ volatile(
    9438:	f04f 0320 	mov.w	r3, #32
    943c:	f3ef 8011 	mrs	r0, BASEPRI
    9440:	f383 8811 	msr	BASEPRI, r3
    9444:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9448:	f7ff bfea 	b.w	9420 <z_reschedule_irqlock>

0000944c <z_priq_dumb_best>:
{
    944c:	4603      	mov	r3, r0
	return list->head == list;
    944e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9450:	4283      	cmp	r3, r0
    9452:	d003      	beq.n	945c <z_priq_dumb_best+0x10>
	if (n != NULL) {
    9454:	2800      	cmp	r0, #0
    9456:	bf38      	it	cc
    9458:	2000      	movcc	r0, #0
    945a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    945c:	2000      	movs	r0, #0
}
    945e:	4770      	bx	lr

00009460 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    9460:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9462:	f7fc febb 	bl	61dc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9466:	bd08      	pop	{r3, pc}

00009468 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9468:	b108      	cbz	r0, 946e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    946a:	f7f7 bf09 	b.w	1280 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    946e:	4770      	bx	lr

00009470 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    9470:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0000af60 <spm_firmware_info_nse-0x5080>:
	...

0000ffe0 <spm_firmware_info_nse>:
    ffe0:	e97f e97f 	sg
    ffe4:	f7f1 bfbc 	b.w	1f60 <__acle_se_spm_firmware_info_nse>

0000ffe8 <spm_request_random_number_nse>:
    ffe8:	e97f e97f 	sg
    ffec:	f7f1 bf94 	b.w	1f18 <__acle_se_spm_request_random_number_nse>

0000fff0 <spm_request_read_nse>:
    fff0:	e97f e97f 	sg
    fff4:	f7f1 bf5a 	b.w	1eac <__acle_se_spm_request_read_nse>
	...
