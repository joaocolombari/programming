
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	200230f0 	.word	0x200230f0
   10004:	000178bd 	.word	0x000178bd
   10008:	00032419 	.word	0x00032419
   1000c:	000178ed 	.word	0x000178ed
   10010:	000178ed 	.word	0x000178ed
   10014:	000178ed 	.word	0x000178ed
   10018:	000178ed 	.word	0x000178ed
   1001c:	000178ed 	.word	0x000178ed
	...
   1002c:	00017819 	.word	0x00017819
   10030:	000178ed 	.word	0x000178ed
   10034:	00000000 	.word	0x00000000
   10038:	000177c1 	.word	0x000177c1
   1003c:	000169e1 	.word	0x000169e1

00010040 <_irq_vector_table>:
   10040:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10050:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10060:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10070:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10080:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10090:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   100a0:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   100b0:	000209dd 0003535d 0001787d 0001787d     ....]S..}x..}x..
   100c0:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   100d0:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   100e0:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   100f0:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10100:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10110:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10120:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10130:	0001787d 0001787d 0001787d 0001787d     }x..}x..}x..}x..
   10140:	0001787d                                }x..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10210:	0003241c 00000001 00010000 00010000     .$..............
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00010240 <__aeabi_drsub>:
   10240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10244:	e002      	b.n	1024c <__adddf3>
   10246:	bf00      	nop

00010248 <__aeabi_dsub>:
   10248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001024c <__adddf3>:
   1024c:	b530      	push	{r4, r5, lr}
   1024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10252:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10256:	ea94 0f05 	teq	r4, r5
   1025a:	bf08      	it	eq
   1025c:	ea90 0f02 	teqeq	r0, r2
   10260:	bf1f      	itttt	ne
   10262:	ea54 0c00 	orrsne.w	ip, r4, r0
   10266:	ea55 0c02 	orrsne.w	ip, r5, r2
   1026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10272:	f000 80e2 	beq.w	1043a <__adddf3+0x1ee>
   10276:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1027e:	bfb8      	it	lt
   10280:	426d      	neglt	r5, r5
   10282:	dd0c      	ble.n	1029e <__adddf3+0x52>
   10284:	442c      	add	r4, r5
   10286:	ea80 0202 	eor.w	r2, r0, r2
   1028a:	ea81 0303 	eor.w	r3, r1, r3
   1028e:	ea82 0000 	eor.w	r0, r2, r0
   10292:	ea83 0101 	eor.w	r1, r3, r1
   10296:	ea80 0202 	eor.w	r2, r0, r2
   1029a:	ea81 0303 	eor.w	r3, r1, r3
   1029e:	2d36      	cmp	r5, #54	; 0x36
   102a0:	bf88      	it	hi
   102a2:	bd30      	pophi	{r4, r5, pc}
   102a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   102a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   102ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   102b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   102b4:	d002      	beq.n	102bc <__adddf3+0x70>
   102b6:	4240      	negs	r0, r0
   102b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   102bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   102c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   102c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   102c8:	d002      	beq.n	102d0 <__adddf3+0x84>
   102ca:	4252      	negs	r2, r2
   102cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102d0:	ea94 0f05 	teq	r4, r5
   102d4:	f000 80a7 	beq.w	10426 <__adddf3+0x1da>
   102d8:	f1a4 0401 	sub.w	r4, r4, #1
   102dc:	f1d5 0e20 	rsbs	lr, r5, #32
   102e0:	db0d      	blt.n	102fe <__adddf3+0xb2>
   102e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   102e6:	fa22 f205 	lsr.w	r2, r2, r5
   102ea:	1880      	adds	r0, r0, r2
   102ec:	f141 0100 	adc.w	r1, r1, #0
   102f0:	fa03 f20e 	lsl.w	r2, r3, lr
   102f4:	1880      	adds	r0, r0, r2
   102f6:	fa43 f305 	asr.w	r3, r3, r5
   102fa:	4159      	adcs	r1, r3
   102fc:	e00e      	b.n	1031c <__adddf3+0xd0>
   102fe:	f1a5 0520 	sub.w	r5, r5, #32
   10302:	f10e 0e20 	add.w	lr, lr, #32
   10306:	2a01      	cmp	r2, #1
   10308:	fa03 fc0e 	lsl.w	ip, r3, lr
   1030c:	bf28      	it	cs
   1030e:	f04c 0c02 	orrcs.w	ip, ip, #2
   10312:	fa43 f305 	asr.w	r3, r3, r5
   10316:	18c0      	adds	r0, r0, r3
   10318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10320:	d507      	bpl.n	10332 <__adddf3+0xe6>
   10322:	f04f 0e00 	mov.w	lr, #0
   10326:	f1dc 0c00 	rsbs	ip, ip, #0
   1032a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1032e:	eb6e 0101 	sbc.w	r1, lr, r1
   10332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10336:	d31b      	bcc.n	10370 <__adddf3+0x124>
   10338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1033c:	d30c      	bcc.n	10358 <__adddf3+0x10c>
   1033e:	0849      	lsrs	r1, r1, #1
   10340:	ea5f 0030 	movs.w	r0, r0, rrx
   10344:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10348:	f104 0401 	add.w	r4, r4, #1
   1034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10354:	f080 809a 	bcs.w	1048c <__adddf3+0x240>
   10358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1035c:	bf08      	it	eq
   1035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10362:	f150 0000 	adcs.w	r0, r0, #0
   10366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1036a:	ea41 0105 	orr.w	r1, r1, r5
   1036e:	bd30      	pop	{r4, r5, pc}
   10370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10374:	4140      	adcs	r0, r0
   10376:	eb41 0101 	adc.w	r1, r1, r1
   1037a:	3c01      	subs	r4, #1
   1037c:	bf28      	it	cs
   1037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   10382:	d2e9      	bcs.n	10358 <__adddf3+0x10c>
   10384:	f091 0f00 	teq	r1, #0
   10388:	bf04      	itt	eq
   1038a:	4601      	moveq	r1, r0
   1038c:	2000      	moveq	r0, #0
   1038e:	fab1 f381 	clz	r3, r1
   10392:	bf08      	it	eq
   10394:	3320      	addeq	r3, #32
   10396:	f1a3 030b 	sub.w	r3, r3, #11
   1039a:	f1b3 0220 	subs.w	r2, r3, #32
   1039e:	da0c      	bge.n	103ba <__adddf3+0x16e>
   103a0:	320c      	adds	r2, #12
   103a2:	dd08      	ble.n	103b6 <__adddf3+0x16a>
   103a4:	f102 0c14 	add.w	ip, r2, #20
   103a8:	f1c2 020c 	rsb	r2, r2, #12
   103ac:	fa01 f00c 	lsl.w	r0, r1, ip
   103b0:	fa21 f102 	lsr.w	r1, r1, r2
   103b4:	e00c      	b.n	103d0 <__adddf3+0x184>
   103b6:	f102 0214 	add.w	r2, r2, #20
   103ba:	bfd8      	it	le
   103bc:	f1c2 0c20 	rsble	ip, r2, #32
   103c0:	fa01 f102 	lsl.w	r1, r1, r2
   103c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   103c8:	bfdc      	itt	le
   103ca:	ea41 010c 	orrle.w	r1, r1, ip
   103ce:	4090      	lslle	r0, r2
   103d0:	1ae4      	subs	r4, r4, r3
   103d2:	bfa2      	ittt	ge
   103d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   103d8:	4329      	orrge	r1, r5
   103da:	bd30      	popge	{r4, r5, pc}
   103dc:	ea6f 0404 	mvn.w	r4, r4
   103e0:	3c1f      	subs	r4, #31
   103e2:	da1c      	bge.n	1041e <__adddf3+0x1d2>
   103e4:	340c      	adds	r4, #12
   103e6:	dc0e      	bgt.n	10406 <__adddf3+0x1ba>
   103e8:	f104 0414 	add.w	r4, r4, #20
   103ec:	f1c4 0220 	rsb	r2, r4, #32
   103f0:	fa20 f004 	lsr.w	r0, r0, r4
   103f4:	fa01 f302 	lsl.w	r3, r1, r2
   103f8:	ea40 0003 	orr.w	r0, r0, r3
   103fc:	fa21 f304 	lsr.w	r3, r1, r4
   10400:	ea45 0103 	orr.w	r1, r5, r3
   10404:	bd30      	pop	{r4, r5, pc}
   10406:	f1c4 040c 	rsb	r4, r4, #12
   1040a:	f1c4 0220 	rsb	r2, r4, #32
   1040e:	fa20 f002 	lsr.w	r0, r0, r2
   10412:	fa01 f304 	lsl.w	r3, r1, r4
   10416:	ea40 0003 	orr.w	r0, r0, r3
   1041a:	4629      	mov	r1, r5
   1041c:	bd30      	pop	{r4, r5, pc}
   1041e:	fa21 f004 	lsr.w	r0, r1, r4
   10422:	4629      	mov	r1, r5
   10424:	bd30      	pop	{r4, r5, pc}
   10426:	f094 0f00 	teq	r4, #0
   1042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1042e:	bf06      	itte	eq
   10430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10434:	3401      	addeq	r4, #1
   10436:	3d01      	subne	r5, #1
   10438:	e74e      	b.n	102d8 <__adddf3+0x8c>
   1043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1043e:	bf18      	it	ne
   10440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10444:	d029      	beq.n	1049a <__adddf3+0x24e>
   10446:	ea94 0f05 	teq	r4, r5
   1044a:	bf08      	it	eq
   1044c:	ea90 0f02 	teqeq	r0, r2
   10450:	d005      	beq.n	1045e <__adddf3+0x212>
   10452:	ea54 0c00 	orrs.w	ip, r4, r0
   10456:	bf04      	itt	eq
   10458:	4619      	moveq	r1, r3
   1045a:	4610      	moveq	r0, r2
   1045c:	bd30      	pop	{r4, r5, pc}
   1045e:	ea91 0f03 	teq	r1, r3
   10462:	bf1e      	ittt	ne
   10464:	2100      	movne	r1, #0
   10466:	2000      	movne	r0, #0
   10468:	bd30      	popne	{r4, r5, pc}
   1046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1046e:	d105      	bne.n	1047c <__adddf3+0x230>
   10470:	0040      	lsls	r0, r0, #1
   10472:	4149      	adcs	r1, r1
   10474:	bf28      	it	cs
   10476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1047a:	bd30      	pop	{r4, r5, pc}
   1047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10480:	bf3c      	itt	cc
   10482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10486:	bd30      	popcc	{r4, r5, pc}
   10488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10494:	f04f 0000 	mov.w	r0, #0
   10498:	bd30      	pop	{r4, r5, pc}
   1049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1049e:	bf1a      	itte	ne
   104a0:	4619      	movne	r1, r3
   104a2:	4610      	movne	r0, r2
   104a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   104a8:	bf1c      	itt	ne
   104aa:	460b      	movne	r3, r1
   104ac:	4602      	movne	r2, r0
   104ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   104b2:	bf06      	itte	eq
   104b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   104b8:	ea91 0f03 	teqeq	r1, r3
   104bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   104c0:	bd30      	pop	{r4, r5, pc}
   104c2:	bf00      	nop

000104c4 <__aeabi_ui2d>:
   104c4:	f090 0f00 	teq	r0, #0
   104c8:	bf04      	itt	eq
   104ca:	2100      	moveq	r1, #0
   104cc:	4770      	bxeq	lr
   104ce:	b530      	push	{r4, r5, lr}
   104d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104d8:	f04f 0500 	mov.w	r5, #0
   104dc:	f04f 0100 	mov.w	r1, #0
   104e0:	e750      	b.n	10384 <__adddf3+0x138>
   104e2:	bf00      	nop

000104e4 <__aeabi_i2d>:
   104e4:	f090 0f00 	teq	r0, #0
   104e8:	bf04      	itt	eq
   104ea:	2100      	moveq	r1, #0
   104ec:	4770      	bxeq	lr
   104ee:	b530      	push	{r4, r5, lr}
   104f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   104fc:	bf48      	it	mi
   104fe:	4240      	negmi	r0, r0
   10500:	f04f 0100 	mov.w	r1, #0
   10504:	e73e      	b.n	10384 <__adddf3+0x138>
   10506:	bf00      	nop

00010508 <__aeabi_f2d>:
   10508:	0042      	lsls	r2, r0, #1
   1050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1050e:	ea4f 0131 	mov.w	r1, r1, rrx
   10512:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10516:	bf1f      	itttt	ne
   10518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10524:	4770      	bxne	lr
   10526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1052a:	bf08      	it	eq
   1052c:	4770      	bxeq	lr
   1052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   10532:	bf04      	itt	eq
   10534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   10538:	4770      	bxeq	lr
   1053a:	b530      	push	{r4, r5, lr}
   1053c:	f44f 7460 	mov.w	r4, #896	; 0x380
   10540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10548:	e71c      	b.n	10384 <__adddf3+0x138>
   1054a:	bf00      	nop

0001054c <__aeabi_ul2d>:
   1054c:	ea50 0201 	orrs.w	r2, r0, r1
   10550:	bf08      	it	eq
   10552:	4770      	bxeq	lr
   10554:	b530      	push	{r4, r5, lr}
   10556:	f04f 0500 	mov.w	r5, #0
   1055a:	e00a      	b.n	10572 <__aeabi_l2d+0x16>

0001055c <__aeabi_l2d>:
   1055c:	ea50 0201 	orrs.w	r2, r0, r1
   10560:	bf08      	it	eq
   10562:	4770      	bxeq	lr
   10564:	b530      	push	{r4, r5, lr}
   10566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1056a:	d502      	bpl.n	10572 <__aeabi_l2d+0x16>
   1056c:	4240      	negs	r0, r0
   1056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10572:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10576:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1057e:	f43f aed8 	beq.w	10332 <__adddf3+0xe6>
   10582:	f04f 0203 	mov.w	r2, #3
   10586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1058a:	bf18      	it	ne
   1058c:	3203      	addne	r2, #3
   1058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10592:	bf18      	it	ne
   10594:	3203      	addne	r2, #3
   10596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1059a:	f1c2 0320 	rsb	r3, r2, #32
   1059e:	fa00 fc03 	lsl.w	ip, r0, r3
   105a2:	fa20 f002 	lsr.w	r0, r0, r2
   105a6:	fa01 fe03 	lsl.w	lr, r1, r3
   105aa:	ea40 000e 	orr.w	r0, r0, lr
   105ae:	fa21 f102 	lsr.w	r1, r1, r2
   105b2:	4414      	add	r4, r2
   105b4:	e6bd      	b.n	10332 <__adddf3+0xe6>
   105b6:	bf00      	nop

000105b8 <__aeabi_dmul>:
   105b8:	b570      	push	{r4, r5, r6, lr}
   105ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   105be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   105c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   105c6:	bf1d      	ittte	ne
   105c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   105cc:	ea94 0f0c 	teqne	r4, ip
   105d0:	ea95 0f0c 	teqne	r5, ip
   105d4:	f000 f8de 	bleq	10794 <__aeabi_dmul+0x1dc>
   105d8:	442c      	add	r4, r5
   105da:	ea81 0603 	eor.w	r6, r1, r3
   105de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   105e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   105e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   105ea:	bf18      	it	ne
   105ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   105f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   105f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   105f8:	d038      	beq.n	1066c <__aeabi_dmul+0xb4>
   105fa:	fba0 ce02 	umull	ip, lr, r0, r2
   105fe:	f04f 0500 	mov.w	r5, #0
   10602:	fbe1 e502 	umlal	lr, r5, r1, r2
   10606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1060a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1060e:	f04f 0600 	mov.w	r6, #0
   10612:	fbe1 5603 	umlal	r5, r6, r1, r3
   10616:	f09c 0f00 	teq	ip, #0
   1061a:	bf18      	it	ne
   1061c:	f04e 0e01 	orrne.w	lr, lr, #1
   10620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1062c:	d204      	bcs.n	10638 <__aeabi_dmul+0x80>
   1062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10632:	416d      	adcs	r5, r5
   10634:	eb46 0606 	adc.w	r6, r6, r6
   10638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   10648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10650:	bf88      	it	hi
   10652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10656:	d81e      	bhi.n	10696 <__aeabi_dmul+0xde>
   10658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1065c:	bf08      	it	eq
   1065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10662:	f150 0000 	adcs.w	r0, r0, #0
   10666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1066a:	bd70      	pop	{r4, r5, r6, pc}
   1066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10670:	ea46 0101 	orr.w	r1, r6, r1
   10674:	ea40 0002 	orr.w	r0, r0, r2
   10678:	ea81 0103 	eor.w	r1, r1, r3
   1067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10680:	bfc2      	ittt	gt
   10682:	ebd4 050c 	rsbsgt	r5, r4, ip
   10686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1068a:	bd70      	popgt	{r4, r5, r6, pc}
   1068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10690:	f04f 0e00 	mov.w	lr, #0
   10694:	3c01      	subs	r4, #1
   10696:	f300 80ab 	bgt.w	107f0 <__aeabi_dmul+0x238>
   1069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1069e:	bfde      	ittt	le
   106a0:	2000      	movle	r0, #0
   106a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   106a6:	bd70      	pople	{r4, r5, r6, pc}
   106a8:	f1c4 0400 	rsb	r4, r4, #0
   106ac:	3c20      	subs	r4, #32
   106ae:	da35      	bge.n	1071c <__aeabi_dmul+0x164>
   106b0:	340c      	adds	r4, #12
   106b2:	dc1b      	bgt.n	106ec <__aeabi_dmul+0x134>
   106b4:	f104 0414 	add.w	r4, r4, #20
   106b8:	f1c4 0520 	rsb	r5, r4, #32
   106bc:	fa00 f305 	lsl.w	r3, r0, r5
   106c0:	fa20 f004 	lsr.w	r0, r0, r4
   106c4:	fa01 f205 	lsl.w	r2, r1, r5
   106c8:	ea40 0002 	orr.w	r0, r0, r2
   106cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   106d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   106d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   106d8:	fa21 f604 	lsr.w	r6, r1, r4
   106dc:	eb42 0106 	adc.w	r1, r2, r6
   106e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   106e4:	bf08      	it	eq
   106e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   106ea:	bd70      	pop	{r4, r5, r6, pc}
   106ec:	f1c4 040c 	rsb	r4, r4, #12
   106f0:	f1c4 0520 	rsb	r5, r4, #32
   106f4:	fa00 f304 	lsl.w	r3, r0, r4
   106f8:	fa20 f005 	lsr.w	r0, r0, r5
   106fc:	fa01 f204 	lsl.w	r2, r1, r4
   10700:	ea40 0002 	orr.w	r0, r0, r2
   10704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1070c:	f141 0100 	adc.w	r1, r1, #0
   10710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10714:	bf08      	it	eq
   10716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1071a:	bd70      	pop	{r4, r5, r6, pc}
   1071c:	f1c4 0520 	rsb	r5, r4, #32
   10720:	fa00 f205 	lsl.w	r2, r0, r5
   10724:	ea4e 0e02 	orr.w	lr, lr, r2
   10728:	fa20 f304 	lsr.w	r3, r0, r4
   1072c:	fa01 f205 	lsl.w	r2, r1, r5
   10730:	ea43 0302 	orr.w	r3, r3, r2
   10734:	fa21 f004 	lsr.w	r0, r1, r4
   10738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1073c:	fa21 f204 	lsr.w	r2, r1, r4
   10740:	ea20 0002 	bic.w	r0, r0, r2
   10744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   10748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1074c:	bf08      	it	eq
   1074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10752:	bd70      	pop	{r4, r5, r6, pc}
   10754:	f094 0f00 	teq	r4, #0
   10758:	d10f      	bne.n	1077a <__aeabi_dmul+0x1c2>
   1075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1075e:	0040      	lsls	r0, r0, #1
   10760:	eb41 0101 	adc.w	r1, r1, r1
   10764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10768:	bf08      	it	eq
   1076a:	3c01      	subeq	r4, #1
   1076c:	d0f7      	beq.n	1075e <__aeabi_dmul+0x1a6>
   1076e:	ea41 0106 	orr.w	r1, r1, r6
   10772:	f095 0f00 	teq	r5, #0
   10776:	bf18      	it	ne
   10778:	4770      	bxne	lr
   1077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1077e:	0052      	lsls	r2, r2, #1
   10780:	eb43 0303 	adc.w	r3, r3, r3
   10784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   10788:	bf08      	it	eq
   1078a:	3d01      	subeq	r5, #1
   1078c:	d0f7      	beq.n	1077e <__aeabi_dmul+0x1c6>
   1078e:	ea43 0306 	orr.w	r3, r3, r6
   10792:	4770      	bx	lr
   10794:	ea94 0f0c 	teq	r4, ip
   10798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1079c:	bf18      	it	ne
   1079e:	ea95 0f0c 	teqne	r5, ip
   107a2:	d00c      	beq.n	107be <__aeabi_dmul+0x206>
   107a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107a8:	bf18      	it	ne
   107aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107ae:	d1d1      	bne.n	10754 <__aeabi_dmul+0x19c>
   107b0:	ea81 0103 	eor.w	r1, r1, r3
   107b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107b8:	f04f 0000 	mov.w	r0, #0
   107bc:	bd70      	pop	{r4, r5, r6, pc}
   107be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107c2:	bf06      	itte	eq
   107c4:	4610      	moveq	r0, r2
   107c6:	4619      	moveq	r1, r3
   107c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107cc:	d019      	beq.n	10802 <__aeabi_dmul+0x24a>
   107ce:	ea94 0f0c 	teq	r4, ip
   107d2:	d102      	bne.n	107da <__aeabi_dmul+0x222>
   107d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   107d8:	d113      	bne.n	10802 <__aeabi_dmul+0x24a>
   107da:	ea95 0f0c 	teq	r5, ip
   107de:	d105      	bne.n	107ec <__aeabi_dmul+0x234>
   107e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   107e4:	bf1c      	itt	ne
   107e6:	4610      	movne	r0, r2
   107e8:	4619      	movne	r1, r3
   107ea:	d10a      	bne.n	10802 <__aeabi_dmul+0x24a>
   107ec:	ea81 0103 	eor.w	r1, r1, r3
   107f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   107f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   107fc:	f04f 0000 	mov.w	r0, #0
   10800:	bd70      	pop	{r4, r5, r6, pc}
   10802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1080a:	bd70      	pop	{r4, r5, r6, pc}

0001080c <__aeabi_ddiv>:
   1080c:	b570      	push	{r4, r5, r6, lr}
   1080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1081a:	bf1d      	ittte	ne
   1081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10820:	ea94 0f0c 	teqne	r4, ip
   10824:	ea95 0f0c 	teqne	r5, ip
   10828:	f000 f8a7 	bleq	1097a <__aeabi_ddiv+0x16e>
   1082c:	eba4 0405 	sub.w	r4, r4, r5
   10830:	ea81 0e03 	eor.w	lr, r1, r3
   10834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10838:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1083c:	f000 8088 	beq.w	10950 <__aeabi_ddiv+0x144>
   10840:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   10848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10850:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   10858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10864:	429d      	cmp	r5, r3
   10866:	bf08      	it	eq
   10868:	4296      	cmpeq	r6, r2
   1086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   10872:	d202      	bcs.n	1087a <__aeabi_ddiv+0x6e>
   10874:	085b      	lsrs	r3, r3, #1
   10876:	ea4f 0232 	mov.w	r2, r2, rrx
   1087a:	1ab6      	subs	r6, r6, r2
   1087c:	eb65 0503 	sbc.w	r5, r5, r3
   10880:	085b      	lsrs	r3, r3, #1
   10882:	ea4f 0232 	mov.w	r2, r2, rrx
   10886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1088e:	ebb6 0e02 	subs.w	lr, r6, r2
   10892:	eb75 0e03 	sbcs.w	lr, r5, r3
   10896:	bf22      	ittt	cs
   10898:	1ab6      	subcs	r6, r6, r2
   1089a:	4675      	movcs	r5, lr
   1089c:	ea40 000c 	orrcs.w	r0, r0, ip
   108a0:	085b      	lsrs	r3, r3, #1
   108a2:	ea4f 0232 	mov.w	r2, r2, rrx
   108a6:	ebb6 0e02 	subs.w	lr, r6, r2
   108aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   108ae:	bf22      	ittt	cs
   108b0:	1ab6      	subcs	r6, r6, r2
   108b2:	4675      	movcs	r5, lr
   108b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   108b8:	085b      	lsrs	r3, r3, #1
   108ba:	ea4f 0232 	mov.w	r2, r2, rrx
   108be:	ebb6 0e02 	subs.w	lr, r6, r2
   108c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   108c6:	bf22      	ittt	cs
   108c8:	1ab6      	subcs	r6, r6, r2
   108ca:	4675      	movcs	r5, lr
   108cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   108d0:	085b      	lsrs	r3, r3, #1
   108d2:	ea4f 0232 	mov.w	r2, r2, rrx
   108d6:	ebb6 0e02 	subs.w	lr, r6, r2
   108da:	eb75 0e03 	sbcs.w	lr, r5, r3
   108de:	bf22      	ittt	cs
   108e0:	1ab6      	subcs	r6, r6, r2
   108e2:	4675      	movcs	r5, lr
   108e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   108e8:	ea55 0e06 	orrs.w	lr, r5, r6
   108ec:	d018      	beq.n	10920 <__aeabi_ddiv+0x114>
   108ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   108f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   108f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   108fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   108fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1090a:	d1c0      	bne.n	1088e <__aeabi_ddiv+0x82>
   1090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10910:	d10b      	bne.n	1092a <__aeabi_ddiv+0x11e>
   10912:	ea41 0100 	orr.w	r1, r1, r0
   10916:	f04f 0000 	mov.w	r0, #0
   1091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1091e:	e7b6      	b.n	1088e <__aeabi_ddiv+0x82>
   10920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10924:	bf04      	itt	eq
   10926:	4301      	orreq	r1, r0
   10928:	2000      	moveq	r0, #0
   1092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1092e:	bf88      	it	hi
   10930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10934:	f63f aeaf 	bhi.w	10696 <__aeabi_dmul+0xde>
   10938:	ebb5 0c03 	subs.w	ip, r5, r3
   1093c:	bf04      	itt	eq
   1093e:	ebb6 0c02 	subseq.w	ip, r6, r2
   10942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10946:	f150 0000 	adcs.w	r0, r0, #0
   1094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1094e:	bd70      	pop	{r4, r5, r6, pc}
   10950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1095c:	bfc2      	ittt	gt
   1095e:	ebd4 050c 	rsbsgt	r5, r4, ip
   10962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10966:	bd70      	popgt	{r4, r5, r6, pc}
   10968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1096c:	f04f 0e00 	mov.w	lr, #0
   10970:	3c01      	subs	r4, #1
   10972:	e690      	b.n	10696 <__aeabi_dmul+0xde>
   10974:	ea45 0e06 	orr.w	lr, r5, r6
   10978:	e68d      	b.n	10696 <__aeabi_dmul+0xde>
   1097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1097e:	ea94 0f0c 	teq	r4, ip
   10982:	bf08      	it	eq
   10984:	ea95 0f0c 	teqeq	r5, ip
   10988:	f43f af3b 	beq.w	10802 <__aeabi_dmul+0x24a>
   1098c:	ea94 0f0c 	teq	r4, ip
   10990:	d10a      	bne.n	109a8 <__aeabi_ddiv+0x19c>
   10992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10996:	f47f af34 	bne.w	10802 <__aeabi_dmul+0x24a>
   1099a:	ea95 0f0c 	teq	r5, ip
   1099e:	f47f af25 	bne.w	107ec <__aeabi_dmul+0x234>
   109a2:	4610      	mov	r0, r2
   109a4:	4619      	mov	r1, r3
   109a6:	e72c      	b.n	10802 <__aeabi_dmul+0x24a>
   109a8:	ea95 0f0c 	teq	r5, ip
   109ac:	d106      	bne.n	109bc <__aeabi_ddiv+0x1b0>
   109ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   109b2:	f43f aefd 	beq.w	107b0 <__aeabi_dmul+0x1f8>
   109b6:	4610      	mov	r0, r2
   109b8:	4619      	mov	r1, r3
   109ba:	e722      	b.n	10802 <__aeabi_dmul+0x24a>
   109bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   109c0:	bf18      	it	ne
   109c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   109c6:	f47f aec5 	bne.w	10754 <__aeabi_dmul+0x19c>
   109ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   109ce:	f47f af0d 	bne.w	107ec <__aeabi_dmul+0x234>
   109d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   109d6:	f47f aeeb 	bne.w	107b0 <__aeabi_dmul+0x1f8>
   109da:	e712      	b.n	10802 <__aeabi_dmul+0x24a>

000109dc <__gedf2>:
   109dc:	f04f 3cff 	mov.w	ip, #4294967295
   109e0:	e006      	b.n	109f0 <__cmpdf2+0x4>
   109e2:	bf00      	nop

000109e4 <__ledf2>:
   109e4:	f04f 0c01 	mov.w	ip, #1
   109e8:	e002      	b.n	109f0 <__cmpdf2+0x4>
   109ea:	bf00      	nop

000109ec <__cmpdf2>:
   109ec:	f04f 0c01 	mov.w	ip, #1
   109f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   109f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   109f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   109fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10a00:	bf18      	it	ne
   10a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   10a06:	d01b      	beq.n	10a40 <__cmpdf2+0x54>
   10a08:	b001      	add	sp, #4
   10a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   10a0e:	bf0c      	ite	eq
   10a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10a14:	ea91 0f03 	teqne	r1, r3
   10a18:	bf02      	ittt	eq
   10a1a:	ea90 0f02 	teqeq	r0, r2
   10a1e:	2000      	moveq	r0, #0
   10a20:	4770      	bxeq	lr
   10a22:	f110 0f00 	cmn.w	r0, #0
   10a26:	ea91 0f03 	teq	r1, r3
   10a2a:	bf58      	it	pl
   10a2c:	4299      	cmppl	r1, r3
   10a2e:	bf08      	it	eq
   10a30:	4290      	cmpeq	r0, r2
   10a32:	bf2c      	ite	cs
   10a34:	17d8      	asrcs	r0, r3, #31
   10a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   10a3a:	f040 0001 	orr.w	r0, r0, #1
   10a3e:	4770      	bx	lr
   10a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10a48:	d102      	bne.n	10a50 <__cmpdf2+0x64>
   10a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10a4e:	d107      	bne.n	10a60 <__cmpdf2+0x74>
   10a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10a58:	d1d6      	bne.n	10a08 <__cmpdf2+0x1c>
   10a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10a5e:	d0d3      	beq.n	10a08 <__cmpdf2+0x1c>
   10a60:	f85d 0b04 	ldr.w	r0, [sp], #4
   10a64:	4770      	bx	lr
   10a66:	bf00      	nop

00010a68 <__aeabi_cdrcmple>:
   10a68:	4684      	mov	ip, r0
   10a6a:	4610      	mov	r0, r2
   10a6c:	4662      	mov	r2, ip
   10a6e:	468c      	mov	ip, r1
   10a70:	4619      	mov	r1, r3
   10a72:	4663      	mov	r3, ip
   10a74:	e000      	b.n	10a78 <__aeabi_cdcmpeq>
   10a76:	bf00      	nop

00010a78 <__aeabi_cdcmpeq>:
   10a78:	b501      	push	{r0, lr}
   10a7a:	f7ff ffb7 	bl	109ec <__cmpdf2>
   10a7e:	2800      	cmp	r0, #0
   10a80:	bf48      	it	mi
   10a82:	f110 0f00 	cmnmi.w	r0, #0
   10a86:	bd01      	pop	{r0, pc}

00010a88 <__aeabi_dcmpeq>:
   10a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   10a8c:	f7ff fff4 	bl	10a78 <__aeabi_cdcmpeq>
   10a90:	bf0c      	ite	eq
   10a92:	2001      	moveq	r0, #1
   10a94:	2000      	movne	r0, #0
   10a96:	f85d fb08 	ldr.w	pc, [sp], #8
   10a9a:	bf00      	nop

00010a9c <__aeabi_dcmplt>:
   10a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10aa0:	f7ff ffea 	bl	10a78 <__aeabi_cdcmpeq>
   10aa4:	bf34      	ite	cc
   10aa6:	2001      	movcc	r0, #1
   10aa8:	2000      	movcs	r0, #0
   10aaa:	f85d fb08 	ldr.w	pc, [sp], #8
   10aae:	bf00      	nop

00010ab0 <__aeabi_dcmple>:
   10ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ab4:	f7ff ffe0 	bl	10a78 <__aeabi_cdcmpeq>
   10ab8:	bf94      	ite	ls
   10aba:	2001      	movls	r0, #1
   10abc:	2000      	movhi	r0, #0
   10abe:	f85d fb08 	ldr.w	pc, [sp], #8
   10ac2:	bf00      	nop

00010ac4 <__aeabi_dcmpge>:
   10ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ac8:	f7ff ffce 	bl	10a68 <__aeabi_cdrcmple>
   10acc:	bf94      	ite	ls
   10ace:	2001      	movls	r0, #1
   10ad0:	2000      	movhi	r0, #0
   10ad2:	f85d fb08 	ldr.w	pc, [sp], #8
   10ad6:	bf00      	nop

00010ad8 <__aeabi_dcmpgt>:
   10ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
   10adc:	f7ff ffc4 	bl	10a68 <__aeabi_cdrcmple>
   10ae0:	bf34      	ite	cc
   10ae2:	2001      	movcc	r0, #1
   10ae4:	2000      	movcs	r0, #0
   10ae6:	f85d fb08 	ldr.w	pc, [sp], #8
   10aea:	bf00      	nop

00010aec <__aeabi_dcmpun>:
   10aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10af4:	d102      	bne.n	10afc <__aeabi_dcmpun+0x10>
   10af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10afa:	d10a      	bne.n	10b12 <__aeabi_dcmpun+0x26>
   10afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10b04:	d102      	bne.n	10b0c <__aeabi_dcmpun+0x20>
   10b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10b0a:	d102      	bne.n	10b12 <__aeabi_dcmpun+0x26>
   10b0c:	f04f 0000 	mov.w	r0, #0
   10b10:	4770      	bx	lr
   10b12:	f04f 0001 	mov.w	r0, #1
   10b16:	4770      	bx	lr

00010b18 <__aeabi_d2iz>:
   10b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   10b20:	d215      	bcs.n	10b4e <__aeabi_d2iz+0x36>
   10b22:	d511      	bpl.n	10b48 <__aeabi_d2iz+0x30>
   10b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   10b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10b2c:	d912      	bls.n	10b54 <__aeabi_d2iz+0x3c>
   10b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10b3e:	fa23 f002 	lsr.w	r0, r3, r2
   10b42:	bf18      	it	ne
   10b44:	4240      	negne	r0, r0
   10b46:	4770      	bx	lr
   10b48:	f04f 0000 	mov.w	r0, #0
   10b4c:	4770      	bx	lr
   10b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10b52:	d105      	bne.n	10b60 <__aeabi_d2iz+0x48>
   10b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   10b58:	bf08      	it	eq
   10b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   10b5e:	4770      	bx	lr
   10b60:	f04f 0000 	mov.w	r0, #0
   10b64:	4770      	bx	lr
   10b66:	bf00      	nop

00010b68 <__aeabi_d2f>:
   10b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   10b70:	bf24      	itt	cs
   10b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   10b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10b7a:	d90d      	bls.n	10b98 <__aeabi_d2f+0x30>
   10b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   10b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10b90:	bf08      	it	eq
   10b92:	f020 0001 	biceq.w	r0, r0, #1
   10b96:	4770      	bx	lr
   10b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10b9c:	d121      	bne.n	10be2 <__aeabi_d2f+0x7a>
   10b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10ba2:	bfbc      	itt	lt
   10ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10ba8:	4770      	bxlt	lr
   10baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10bb2:	f1c2 0218 	rsb	r2, r2, #24
   10bb6:	f1c2 0c20 	rsb	ip, r2, #32
   10bba:	fa10 f30c 	lsls.w	r3, r0, ip
   10bbe:	fa20 f002 	lsr.w	r0, r0, r2
   10bc2:	bf18      	it	ne
   10bc4:	f040 0001 	orrne.w	r0, r0, #1
   10bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
   10bd4:	ea40 000c 	orr.w	r0, r0, ip
   10bd8:	fa23 f302 	lsr.w	r3, r3, r2
   10bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10be0:	e7cc      	b.n	10b7c <__aeabi_d2f+0x14>
   10be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10be6:	d107      	bne.n	10bf8 <__aeabi_d2f+0x90>
   10be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10bec:	bf1e      	ittt	ne
   10bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10bf6:	4770      	bxne	lr
   10bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10c04:	4770      	bx	lr
   10c06:	bf00      	nop

00010c08 <__aeabi_frsub>:
   10c08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   10c0c:	e002      	b.n	10c14 <__addsf3>
   10c0e:	bf00      	nop

00010c10 <__aeabi_fsub>:
   10c10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00010c14 <__addsf3>:
   10c14:	0042      	lsls	r2, r0, #1
   10c16:	bf1f      	itttt	ne
   10c18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10c1c:	ea92 0f03 	teqne	r2, r3
   10c20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   10c24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10c28:	d06a      	beq.n	10d00 <__addsf3+0xec>
   10c2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   10c2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   10c32:	bfc1      	itttt	gt
   10c34:	18d2      	addgt	r2, r2, r3
   10c36:	4041      	eorgt	r1, r0
   10c38:	4048      	eorgt	r0, r1
   10c3a:	4041      	eorgt	r1, r0
   10c3c:	bfb8      	it	lt
   10c3e:	425b      	neglt	r3, r3
   10c40:	2b19      	cmp	r3, #25
   10c42:	bf88      	it	hi
   10c44:	4770      	bxhi	lr
   10c46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10c4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10c52:	bf18      	it	ne
   10c54:	4240      	negne	r0, r0
   10c56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10c5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   10c5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   10c62:	bf18      	it	ne
   10c64:	4249      	negne	r1, r1
   10c66:	ea92 0f03 	teq	r2, r3
   10c6a:	d03f      	beq.n	10cec <__addsf3+0xd8>
   10c6c:	f1a2 0201 	sub.w	r2, r2, #1
   10c70:	fa41 fc03 	asr.w	ip, r1, r3
   10c74:	eb10 000c 	adds.w	r0, r0, ip
   10c78:	f1c3 0320 	rsb	r3, r3, #32
   10c7c:	fa01 f103 	lsl.w	r1, r1, r3
   10c80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10c84:	d502      	bpl.n	10c8c <__addsf3+0x78>
   10c86:	4249      	negs	r1, r1
   10c88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10c8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10c90:	d313      	bcc.n	10cba <__addsf3+0xa6>
   10c92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   10c96:	d306      	bcc.n	10ca6 <__addsf3+0x92>
   10c98:	0840      	lsrs	r0, r0, #1
   10c9a:	ea4f 0131 	mov.w	r1, r1, rrx
   10c9e:	f102 0201 	add.w	r2, r2, #1
   10ca2:	2afe      	cmp	r2, #254	; 0xfe
   10ca4:	d251      	bcs.n	10d4a <__addsf3+0x136>
   10ca6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   10caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10cae:	bf08      	it	eq
   10cb0:	f020 0001 	biceq.w	r0, r0, #1
   10cb4:	ea40 0003 	orr.w	r0, r0, r3
   10cb8:	4770      	bx	lr
   10cba:	0049      	lsls	r1, r1, #1
   10cbc:	eb40 0000 	adc.w	r0, r0, r0
   10cc0:	3a01      	subs	r2, #1
   10cc2:	bf28      	it	cs
   10cc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   10cc8:	d2ed      	bcs.n	10ca6 <__addsf3+0x92>
   10cca:	fab0 fc80 	clz	ip, r0
   10cce:	f1ac 0c08 	sub.w	ip, ip, #8
   10cd2:	ebb2 020c 	subs.w	r2, r2, ip
   10cd6:	fa00 f00c 	lsl.w	r0, r0, ip
   10cda:	bfaa      	itet	ge
   10cdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   10ce0:	4252      	neglt	r2, r2
   10ce2:	4318      	orrge	r0, r3
   10ce4:	bfbc      	itt	lt
   10ce6:	40d0      	lsrlt	r0, r2
   10ce8:	4318      	orrlt	r0, r3
   10cea:	4770      	bx	lr
   10cec:	f092 0f00 	teq	r2, #0
   10cf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   10cf4:	bf06      	itte	eq
   10cf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   10cfa:	3201      	addeq	r2, #1
   10cfc:	3b01      	subne	r3, #1
   10cfe:	e7b5      	b.n	10c6c <__addsf3+0x58>
   10d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
   10d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10d08:	bf18      	it	ne
   10d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10d0e:	d021      	beq.n	10d54 <__addsf3+0x140>
   10d10:	ea92 0f03 	teq	r2, r3
   10d14:	d004      	beq.n	10d20 <__addsf3+0x10c>
   10d16:	f092 0f00 	teq	r2, #0
   10d1a:	bf08      	it	eq
   10d1c:	4608      	moveq	r0, r1
   10d1e:	4770      	bx	lr
   10d20:	ea90 0f01 	teq	r0, r1
   10d24:	bf1c      	itt	ne
   10d26:	2000      	movne	r0, #0
   10d28:	4770      	bxne	lr
   10d2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   10d2e:	d104      	bne.n	10d3a <__addsf3+0x126>
   10d30:	0040      	lsls	r0, r0, #1
   10d32:	bf28      	it	cs
   10d34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10d38:	4770      	bx	lr
   10d3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   10d3e:	bf3c      	itt	cc
   10d40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   10d44:	4770      	bxcc	lr
   10d46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10d4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   10d4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10d52:	4770      	bx	lr
   10d54:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10d58:	bf16      	itet	ne
   10d5a:	4608      	movne	r0, r1
   10d5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   10d60:	4601      	movne	r1, r0
   10d62:	0242      	lsls	r2, r0, #9
   10d64:	bf06      	itte	eq
   10d66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10d6a:	ea90 0f01 	teqeq	r0, r1
   10d6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   10d72:	4770      	bx	lr

00010d74 <__aeabi_ui2f>:
   10d74:	f04f 0300 	mov.w	r3, #0
   10d78:	e004      	b.n	10d84 <__aeabi_i2f+0x8>
   10d7a:	bf00      	nop

00010d7c <__aeabi_i2f>:
   10d7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   10d80:	bf48      	it	mi
   10d82:	4240      	negmi	r0, r0
   10d84:	ea5f 0c00 	movs.w	ip, r0
   10d88:	bf08      	it	eq
   10d8a:	4770      	bxeq	lr
   10d8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   10d90:	4601      	mov	r1, r0
   10d92:	f04f 0000 	mov.w	r0, #0
   10d96:	e01c      	b.n	10dd2 <__aeabi_l2f+0x2a>

00010d98 <__aeabi_ul2f>:
   10d98:	ea50 0201 	orrs.w	r2, r0, r1
   10d9c:	bf08      	it	eq
   10d9e:	4770      	bxeq	lr
   10da0:	f04f 0300 	mov.w	r3, #0
   10da4:	e00a      	b.n	10dbc <__aeabi_l2f+0x14>
   10da6:	bf00      	nop

00010da8 <__aeabi_l2f>:
   10da8:	ea50 0201 	orrs.w	r2, r0, r1
   10dac:	bf08      	it	eq
   10dae:	4770      	bxeq	lr
   10db0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   10db4:	d502      	bpl.n	10dbc <__aeabi_l2f+0x14>
   10db6:	4240      	negs	r0, r0
   10db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10dbc:	ea5f 0c01 	movs.w	ip, r1
   10dc0:	bf02      	ittt	eq
   10dc2:	4684      	moveq	ip, r0
   10dc4:	4601      	moveq	r1, r0
   10dc6:	2000      	moveq	r0, #0
   10dc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   10dcc:	bf08      	it	eq
   10dce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   10dd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   10dd6:	fabc f28c 	clz	r2, ip
   10dda:	3a08      	subs	r2, #8
   10ddc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   10de0:	db10      	blt.n	10e04 <__aeabi_l2f+0x5c>
   10de2:	fa01 fc02 	lsl.w	ip, r1, r2
   10de6:	4463      	add	r3, ip
   10de8:	fa00 fc02 	lsl.w	ip, r0, r2
   10dec:	f1c2 0220 	rsb	r2, r2, #32
   10df0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10df4:	fa20 f202 	lsr.w	r2, r0, r2
   10df8:	eb43 0002 	adc.w	r0, r3, r2
   10dfc:	bf08      	it	eq
   10dfe:	f020 0001 	biceq.w	r0, r0, #1
   10e02:	4770      	bx	lr
   10e04:	f102 0220 	add.w	r2, r2, #32
   10e08:	fa01 fc02 	lsl.w	ip, r1, r2
   10e0c:	f1c2 0220 	rsb	r2, r2, #32
   10e10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   10e14:	fa21 f202 	lsr.w	r2, r1, r2
   10e18:	eb43 0002 	adc.w	r0, r3, r2
   10e1c:	bf08      	it	eq
   10e1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10e22:	4770      	bx	lr

00010e24 <__aeabi_fmul>:
   10e24:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10e28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   10e2c:	bf1e      	ittt	ne
   10e2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   10e32:	ea92 0f0c 	teqne	r2, ip
   10e36:	ea93 0f0c 	teqne	r3, ip
   10e3a:	d06f      	beq.n	10f1c <__aeabi_fmul+0xf8>
   10e3c:	441a      	add	r2, r3
   10e3e:	ea80 0c01 	eor.w	ip, r0, r1
   10e42:	0240      	lsls	r0, r0, #9
   10e44:	bf18      	it	ne
   10e46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   10e4a:	d01e      	beq.n	10e8a <__aeabi_fmul+0x66>
   10e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   10e50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   10e54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   10e58:	fba0 3101 	umull	r3, r1, r0, r1
   10e5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   10e60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   10e64:	bf3e      	ittt	cc
   10e66:	0049      	lslcc	r1, r1, #1
   10e68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   10e6c:	005b      	lslcc	r3, r3, #1
   10e6e:	ea40 0001 	orr.w	r0, r0, r1
   10e72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   10e76:	2afd      	cmp	r2, #253	; 0xfd
   10e78:	d81d      	bhi.n	10eb6 <__aeabi_fmul+0x92>
   10e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   10e7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10e82:	bf08      	it	eq
   10e84:	f020 0001 	biceq.w	r0, r0, #1
   10e88:	4770      	bx	lr
   10e8a:	f090 0f00 	teq	r0, #0
   10e8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   10e92:	bf08      	it	eq
   10e94:	0249      	lsleq	r1, r1, #9
   10e96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   10e9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   10e9e:	3a7f      	subs	r2, #127	; 0x7f
   10ea0:	bfc2      	ittt	gt
   10ea2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   10ea6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   10eaa:	4770      	bxgt	lr
   10eac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10eb0:	f04f 0300 	mov.w	r3, #0
   10eb4:	3a01      	subs	r2, #1
   10eb6:	dc5d      	bgt.n	10f74 <__aeabi_fmul+0x150>
   10eb8:	f112 0f19 	cmn.w	r2, #25
   10ebc:	bfdc      	itt	le
   10ebe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   10ec2:	4770      	bxle	lr
   10ec4:	f1c2 0200 	rsb	r2, r2, #0
   10ec8:	0041      	lsls	r1, r0, #1
   10eca:	fa21 f102 	lsr.w	r1, r1, r2
   10ece:	f1c2 0220 	rsb	r2, r2, #32
   10ed2:	fa00 fc02 	lsl.w	ip, r0, r2
   10ed6:	ea5f 0031 	movs.w	r0, r1, rrx
   10eda:	f140 0000 	adc.w	r0, r0, #0
   10ede:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   10ee2:	bf08      	it	eq
   10ee4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10ee8:	4770      	bx	lr
   10eea:	f092 0f00 	teq	r2, #0
   10eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   10ef2:	bf02      	ittt	eq
   10ef4:	0040      	lsleq	r0, r0, #1
   10ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   10efa:	3a01      	subeq	r2, #1
   10efc:	d0f9      	beq.n	10ef2 <__aeabi_fmul+0xce>
   10efe:	ea40 000c 	orr.w	r0, r0, ip
   10f02:	f093 0f00 	teq	r3, #0
   10f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10f0a:	bf02      	ittt	eq
   10f0c:	0049      	lsleq	r1, r1, #1
   10f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   10f12:	3b01      	subeq	r3, #1
   10f14:	d0f9      	beq.n	10f0a <__aeabi_fmul+0xe6>
   10f16:	ea41 010c 	orr.w	r1, r1, ip
   10f1a:	e78f      	b.n	10e3c <__aeabi_fmul+0x18>
   10f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   10f20:	ea92 0f0c 	teq	r2, ip
   10f24:	bf18      	it	ne
   10f26:	ea93 0f0c 	teqne	r3, ip
   10f2a:	d00a      	beq.n	10f42 <__aeabi_fmul+0x11e>
   10f2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   10f30:	bf18      	it	ne
   10f32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   10f36:	d1d8      	bne.n	10eea <__aeabi_fmul+0xc6>
   10f38:	ea80 0001 	eor.w	r0, r0, r1
   10f3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10f40:	4770      	bx	lr
   10f42:	f090 0f00 	teq	r0, #0
   10f46:	bf17      	itett	ne
   10f48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   10f4c:	4608      	moveq	r0, r1
   10f4e:	f091 0f00 	teqne	r1, #0
   10f52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   10f56:	d014      	beq.n	10f82 <__aeabi_fmul+0x15e>
   10f58:	ea92 0f0c 	teq	r2, ip
   10f5c:	d101      	bne.n	10f62 <__aeabi_fmul+0x13e>
   10f5e:	0242      	lsls	r2, r0, #9
   10f60:	d10f      	bne.n	10f82 <__aeabi_fmul+0x15e>
   10f62:	ea93 0f0c 	teq	r3, ip
   10f66:	d103      	bne.n	10f70 <__aeabi_fmul+0x14c>
   10f68:	024b      	lsls	r3, r1, #9
   10f6a:	bf18      	it	ne
   10f6c:	4608      	movne	r0, r1
   10f6e:	d108      	bne.n	10f82 <__aeabi_fmul+0x15e>
   10f70:	ea80 0001 	eor.w	r0, r0, r1
   10f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10f78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10f7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10f80:	4770      	bx	lr
   10f82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10f86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   10f8a:	4770      	bx	lr

00010f8c <__aeabi_fdiv>:
   10f8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10f90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   10f94:	bf1e      	ittt	ne
   10f96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   10f9a:	ea92 0f0c 	teqne	r2, ip
   10f9e:	ea93 0f0c 	teqne	r3, ip
   10fa2:	d069      	beq.n	11078 <__aeabi_fdiv+0xec>
   10fa4:	eba2 0203 	sub.w	r2, r2, r3
   10fa8:	ea80 0c01 	eor.w	ip, r0, r1
   10fac:	0249      	lsls	r1, r1, #9
   10fae:	ea4f 2040 	mov.w	r0, r0, lsl #9
   10fb2:	d037      	beq.n	11024 <__aeabi_fdiv+0x98>
   10fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10fb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   10fbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   10fc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   10fc4:	428b      	cmp	r3, r1
   10fc6:	bf38      	it	cc
   10fc8:	005b      	lslcc	r3, r3, #1
   10fca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   10fce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   10fd2:	428b      	cmp	r3, r1
   10fd4:	bf24      	itt	cs
   10fd6:	1a5b      	subcs	r3, r3, r1
   10fd8:	ea40 000c 	orrcs.w	r0, r0, ip
   10fdc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   10fe0:	bf24      	itt	cs
   10fe2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   10fe6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10fea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   10fee:	bf24      	itt	cs
   10ff0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   10ff4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10ff8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   10ffc:	bf24      	itt	cs
   10ffe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   11002:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   11006:	011b      	lsls	r3, r3, #4
   11008:	bf18      	it	ne
   1100a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1100e:	d1e0      	bne.n	10fd2 <__aeabi_fdiv+0x46>
   11010:	2afd      	cmp	r2, #253	; 0xfd
   11012:	f63f af50 	bhi.w	10eb6 <__aeabi_fmul+0x92>
   11016:	428b      	cmp	r3, r1
   11018:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1101c:	bf08      	it	eq
   1101e:	f020 0001 	biceq.w	r0, r0, #1
   11022:	4770      	bx	lr
   11024:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   11028:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1102c:	327f      	adds	r2, #127	; 0x7f
   1102e:	bfc2      	ittt	gt
   11030:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   11034:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   11038:	4770      	bxgt	lr
   1103a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1103e:	f04f 0300 	mov.w	r3, #0
   11042:	3a01      	subs	r2, #1
   11044:	e737      	b.n	10eb6 <__aeabi_fmul+0x92>
   11046:	f092 0f00 	teq	r2, #0
   1104a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1104e:	bf02      	ittt	eq
   11050:	0040      	lsleq	r0, r0, #1
   11052:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   11056:	3a01      	subeq	r2, #1
   11058:	d0f9      	beq.n	1104e <__aeabi_fdiv+0xc2>
   1105a:	ea40 000c 	orr.w	r0, r0, ip
   1105e:	f093 0f00 	teq	r3, #0
   11062:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   11066:	bf02      	ittt	eq
   11068:	0049      	lsleq	r1, r1, #1
   1106a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1106e:	3b01      	subeq	r3, #1
   11070:	d0f9      	beq.n	11066 <__aeabi_fdiv+0xda>
   11072:	ea41 010c 	orr.w	r1, r1, ip
   11076:	e795      	b.n	10fa4 <__aeabi_fdiv+0x18>
   11078:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1107c:	ea92 0f0c 	teq	r2, ip
   11080:	d108      	bne.n	11094 <__aeabi_fdiv+0x108>
   11082:	0242      	lsls	r2, r0, #9
   11084:	f47f af7d 	bne.w	10f82 <__aeabi_fmul+0x15e>
   11088:	ea93 0f0c 	teq	r3, ip
   1108c:	f47f af70 	bne.w	10f70 <__aeabi_fmul+0x14c>
   11090:	4608      	mov	r0, r1
   11092:	e776      	b.n	10f82 <__aeabi_fmul+0x15e>
   11094:	ea93 0f0c 	teq	r3, ip
   11098:	d104      	bne.n	110a4 <__aeabi_fdiv+0x118>
   1109a:	024b      	lsls	r3, r1, #9
   1109c:	f43f af4c 	beq.w	10f38 <__aeabi_fmul+0x114>
   110a0:	4608      	mov	r0, r1
   110a2:	e76e      	b.n	10f82 <__aeabi_fmul+0x15e>
   110a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   110a8:	bf18      	it	ne
   110aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   110ae:	d1ca      	bne.n	11046 <__aeabi_fdiv+0xba>
   110b0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   110b4:	f47f af5c 	bne.w	10f70 <__aeabi_fmul+0x14c>
   110b8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   110bc:	f47f af3c 	bne.w	10f38 <__aeabi_fmul+0x114>
   110c0:	e75f      	b.n	10f82 <__aeabi_fmul+0x15e>
   110c2:	bf00      	nop

000110c4 <__aeabi_f2iz>:
   110c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   110c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   110cc:	d30f      	bcc.n	110ee <__aeabi_f2iz+0x2a>
   110ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
   110d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   110d6:	d90d      	bls.n	110f4 <__aeabi_f2iz+0x30>
   110d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   110dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   110e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   110e4:	fa23 f002 	lsr.w	r0, r3, r2
   110e8:	bf18      	it	ne
   110ea:	4240      	negne	r0, r0
   110ec:	4770      	bx	lr
   110ee:	f04f 0000 	mov.w	r0, #0
   110f2:	4770      	bx	lr
   110f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   110f8:	d101      	bne.n	110fe <__aeabi_f2iz+0x3a>
   110fa:	0242      	lsls	r2, r0, #9
   110fc:	d105      	bne.n	1110a <__aeabi_f2iz+0x46>
   110fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   11102:	bf08      	it	eq
   11104:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   11108:	4770      	bx	lr
   1110a:	f04f 0000 	mov.w	r0, #0
   1110e:	4770      	bx	lr

00011110 <__aeabi_f2uiz>:
   11110:	0042      	lsls	r2, r0, #1
   11112:	d20e      	bcs.n	11132 <__aeabi_f2uiz+0x22>
   11114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   11118:	d30b      	bcc.n	11132 <__aeabi_f2uiz+0x22>
   1111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   11122:	d409      	bmi.n	11138 <__aeabi_f2uiz+0x28>
   11124:	ea4f 2300 	mov.w	r3, r0, lsl #8
   11128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1112c:	fa23 f002 	lsr.w	r0, r3, r2
   11130:	4770      	bx	lr
   11132:	f04f 0000 	mov.w	r0, #0
   11136:	4770      	bx	lr
   11138:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1113c:	d101      	bne.n	11142 <__aeabi_f2uiz+0x32>
   1113e:	0242      	lsls	r2, r0, #9
   11140:	d102      	bne.n	11148 <__aeabi_f2uiz+0x38>
   11142:	f04f 30ff 	mov.w	r0, #4294967295
   11146:	4770      	bx	lr
   11148:	f04f 0000 	mov.w	r0, #0
   1114c:	4770      	bx	lr
   1114e:	bf00      	nop

00011150 <__aeabi_ldivmod>:
   11150:	b97b      	cbnz	r3, 11172 <__aeabi_ldivmod+0x22>
   11152:	b972      	cbnz	r2, 11172 <__aeabi_ldivmod+0x22>
   11154:	2900      	cmp	r1, #0
   11156:	bfbe      	ittt	lt
   11158:	2000      	movlt	r0, #0
   1115a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1115e:	e006      	blt.n	1116e <__aeabi_ldivmod+0x1e>
   11160:	bf08      	it	eq
   11162:	2800      	cmpeq	r0, #0
   11164:	bf1c      	itt	ne
   11166:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1116a:	f04f 30ff 	movne.w	r0, #4294967295
   1116e:	f000 b9bb 	b.w	114e8 <__aeabi_idiv0>
   11172:	f1ad 0c08 	sub.w	ip, sp, #8
   11176:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1117a:	2900      	cmp	r1, #0
   1117c:	db09      	blt.n	11192 <__aeabi_ldivmod+0x42>
   1117e:	2b00      	cmp	r3, #0
   11180:	db1a      	blt.n	111b8 <__aeabi_ldivmod+0x68>
   11182:	f000 f84d 	bl	11220 <__udivmoddi4>
   11186:	f8dd e004 	ldr.w	lr, [sp, #4]
   1118a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1118e:	b004      	add	sp, #16
   11190:	4770      	bx	lr
   11192:	4240      	negs	r0, r0
   11194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11198:	2b00      	cmp	r3, #0
   1119a:	db1b      	blt.n	111d4 <__aeabi_ldivmod+0x84>
   1119c:	f000 f840 	bl	11220 <__udivmoddi4>
   111a0:	f8dd e004 	ldr.w	lr, [sp, #4]
   111a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   111a8:	b004      	add	sp, #16
   111aa:	4240      	negs	r0, r0
   111ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   111b0:	4252      	negs	r2, r2
   111b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   111b6:	4770      	bx	lr
   111b8:	4252      	negs	r2, r2
   111ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   111be:	f000 f82f 	bl	11220 <__udivmoddi4>
   111c2:	f8dd e004 	ldr.w	lr, [sp, #4]
   111c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   111ca:	b004      	add	sp, #16
   111cc:	4240      	negs	r0, r0
   111ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   111d2:	4770      	bx	lr
   111d4:	4252      	negs	r2, r2
   111d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   111da:	f000 f821 	bl	11220 <__udivmoddi4>
   111de:	f8dd e004 	ldr.w	lr, [sp, #4]
   111e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   111e6:	b004      	add	sp, #16
   111e8:	4252      	negs	r2, r2
   111ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   111ee:	4770      	bx	lr

000111f0 <__aeabi_uldivmod>:
   111f0:	b953      	cbnz	r3, 11208 <__aeabi_uldivmod+0x18>
   111f2:	b94a      	cbnz	r2, 11208 <__aeabi_uldivmod+0x18>
   111f4:	2900      	cmp	r1, #0
   111f6:	bf08      	it	eq
   111f8:	2800      	cmpeq	r0, #0
   111fa:	bf1c      	itt	ne
   111fc:	f04f 31ff 	movne.w	r1, #4294967295
   11200:	f04f 30ff 	movne.w	r0, #4294967295
   11204:	f000 b970 	b.w	114e8 <__aeabi_idiv0>
   11208:	f1ad 0c08 	sub.w	ip, sp, #8
   1120c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   11210:	f000 f806 	bl	11220 <__udivmoddi4>
   11214:	f8dd e004 	ldr.w	lr, [sp, #4]
   11218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1121c:	b004      	add	sp, #16
   1121e:	4770      	bx	lr

00011220 <__udivmoddi4>:
   11220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11224:	9e08      	ldr	r6, [sp, #32]
   11226:	460d      	mov	r5, r1
   11228:	4604      	mov	r4, r0
   1122a:	468a      	mov	sl, r1
   1122c:	2b00      	cmp	r3, #0
   1122e:	d17f      	bne.n	11330 <__udivmoddi4+0x110>
   11230:	428a      	cmp	r2, r1
   11232:	4617      	mov	r7, r2
   11234:	d941      	bls.n	112ba <__udivmoddi4+0x9a>
   11236:	fab2 f282 	clz	r2, r2
   1123a:	b14a      	cbz	r2, 11250 <__udivmoddi4+0x30>
   1123c:	f1c2 0120 	rsb	r1, r2, #32
   11240:	fa05 f302 	lsl.w	r3, r5, r2
   11244:	4097      	lsls	r7, r2
   11246:	4094      	lsls	r4, r2
   11248:	fa20 f101 	lsr.w	r1, r0, r1
   1124c:	ea41 0a03 	orr.w	sl, r1, r3
   11250:	ea4f 4817 	mov.w	r8, r7, lsr #16
   11254:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   11258:	fa1f f987 	uxth.w	r9, r7
   1125c:	fbba fef8 	udiv	lr, sl, r8
   11260:	fb08 a31e 	mls	r3, r8, lr, sl
   11264:	fb0e f109 	mul.w	r1, lr, r9
   11268:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   1126c:	4299      	cmp	r1, r3
   1126e:	d906      	bls.n	1127e <__udivmoddi4+0x5e>
   11270:	18fb      	adds	r3, r7, r3
   11272:	d202      	bcs.n	1127a <__udivmoddi4+0x5a>
   11274:	4299      	cmp	r1, r3
   11276:	f200 8124 	bhi.w	114c2 <__udivmoddi4+0x2a2>
   1127a:	f10e 3eff 	add.w	lr, lr, #4294967295
   1127e:	1a59      	subs	r1, r3, r1
   11280:	b2a3      	uxth	r3, r4
   11282:	fbb1 f0f8 	udiv	r0, r1, r8
   11286:	fb08 1110 	mls	r1, r8, r0, r1
   1128a:	fb00 f909 	mul.w	r9, r0, r9
   1128e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   11292:	45a1      	cmp	r9, r4
   11294:	d905      	bls.n	112a2 <__udivmoddi4+0x82>
   11296:	193c      	adds	r4, r7, r4
   11298:	d202      	bcs.n	112a0 <__udivmoddi4+0x80>
   1129a:	45a1      	cmp	r9, r4
   1129c:	f200 810e 	bhi.w	114bc <__udivmoddi4+0x29c>
   112a0:	3801      	subs	r0, #1
   112a2:	eba4 0409 	sub.w	r4, r4, r9
   112a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   112aa:	2100      	movs	r1, #0
   112ac:	b11e      	cbz	r6, 112b6 <__udivmoddi4+0x96>
   112ae:	40d4      	lsrs	r4, r2
   112b0:	2300      	movs	r3, #0
   112b2:	e9c6 4300 	strd	r4, r3, [r6]
   112b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112ba:	b902      	cbnz	r2, 112be <__udivmoddi4+0x9e>
   112bc:	deff      	udf	#255	; 0xff
   112be:	fab2 f282 	clz	r2, r2
   112c2:	2a00      	cmp	r2, #0
   112c4:	d14f      	bne.n	11366 <__udivmoddi4+0x146>
   112c6:	1bcb      	subs	r3, r1, r7
   112c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   112cc:	fa1f f887 	uxth.w	r8, r7
   112d0:	2101      	movs	r1, #1
   112d2:	0c25      	lsrs	r5, r4, #16
   112d4:	fbb3 fcfe 	udiv	ip, r3, lr
   112d8:	fb0e 301c 	mls	r0, lr, ip, r3
   112dc:	462b      	mov	r3, r5
   112de:	fb08 f90c 	mul.w	r9, r8, ip
   112e2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   112e6:	45a9      	cmp	r9, r5
   112e8:	d90a      	bls.n	11300 <__udivmoddi4+0xe0>
   112ea:	197d      	adds	r5, r7, r5
   112ec:	bf2c      	ite	cs
   112ee:	2301      	movcs	r3, #1
   112f0:	2300      	movcc	r3, #0
   112f2:	45a9      	cmp	r9, r5
   112f4:	d902      	bls.n	112fc <__udivmoddi4+0xdc>
   112f6:	2b00      	cmp	r3, #0
   112f8:	f000 80d9 	beq.w	114ae <__udivmoddi4+0x28e>
   112fc:	f10c 3cff 	add.w	ip, ip, #4294967295
   11300:	eba5 0509 	sub.w	r5, r5, r9
   11304:	b2a3      	uxth	r3, r4
   11306:	fbb5 f0fe 	udiv	r0, r5, lr
   1130a:	fb0e 5510 	mls	r5, lr, r0, r5
   1130e:	fb08 f800 	mul.w	r8, r8, r0
   11312:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   11316:	45a0      	cmp	r8, r4
   11318:	d905      	bls.n	11326 <__udivmoddi4+0x106>
   1131a:	193c      	adds	r4, r7, r4
   1131c:	d202      	bcs.n	11324 <__udivmoddi4+0x104>
   1131e:	45a0      	cmp	r8, r4
   11320:	f200 80c9 	bhi.w	114b6 <__udivmoddi4+0x296>
   11324:	3801      	subs	r0, #1
   11326:	eba4 0408 	sub.w	r4, r4, r8
   1132a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1132e:	e7bd      	b.n	112ac <__udivmoddi4+0x8c>
   11330:	428b      	cmp	r3, r1
   11332:	d908      	bls.n	11346 <__udivmoddi4+0x126>
   11334:	2e00      	cmp	r6, #0
   11336:	f000 80b1 	beq.w	1149c <__udivmoddi4+0x27c>
   1133a:	2100      	movs	r1, #0
   1133c:	e9c6 0500 	strd	r0, r5, [r6]
   11340:	4608      	mov	r0, r1
   11342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11346:	fab3 f183 	clz	r1, r3
   1134a:	2900      	cmp	r1, #0
   1134c:	d146      	bne.n	113dc <__udivmoddi4+0x1bc>
   1134e:	42ab      	cmp	r3, r5
   11350:	f0c0 80a7 	bcc.w	114a2 <__udivmoddi4+0x282>
   11354:	4282      	cmp	r2, r0
   11356:	f240 80a4 	bls.w	114a2 <__udivmoddi4+0x282>
   1135a:	4608      	mov	r0, r1
   1135c:	2e00      	cmp	r6, #0
   1135e:	d0aa      	beq.n	112b6 <__udivmoddi4+0x96>
   11360:	e9c6 4a00 	strd	r4, sl, [r6]
   11364:	e7a7      	b.n	112b6 <__udivmoddi4+0x96>
   11366:	f1c2 0020 	rsb	r0, r2, #32
   1136a:	4097      	lsls	r7, r2
   1136c:	fa01 f302 	lsl.w	r3, r1, r2
   11370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   11374:	40c1      	lsrs	r1, r0
   11376:	fa24 f500 	lsr.w	r5, r4, r0
   1137a:	fa1f f887 	uxth.w	r8, r7
   1137e:	4094      	lsls	r4, r2
   11380:	431d      	orrs	r5, r3
   11382:	fbb1 f0fe 	udiv	r0, r1, lr
   11386:	0c2b      	lsrs	r3, r5, #16
   11388:	fb0e 1110 	mls	r1, lr, r0, r1
   1138c:	fb00 fc08 	mul.w	ip, r0, r8
   11390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   11394:	459c      	cmp	ip, r3
   11396:	d909      	bls.n	113ac <__udivmoddi4+0x18c>
   11398:	18fb      	adds	r3, r7, r3
   1139a:	bf2c      	ite	cs
   1139c:	2101      	movcs	r1, #1
   1139e:	2100      	movcc	r1, #0
   113a0:	459c      	cmp	ip, r3
   113a2:	d902      	bls.n	113aa <__udivmoddi4+0x18a>
   113a4:	2900      	cmp	r1, #0
   113a6:	f000 8095 	beq.w	114d4 <__udivmoddi4+0x2b4>
   113aa:	3801      	subs	r0, #1
   113ac:	eba3 030c 	sub.w	r3, r3, ip
   113b0:	b2ad      	uxth	r5, r5
   113b2:	fbb3 f1fe 	udiv	r1, r3, lr
   113b6:	fb0e 3311 	mls	r3, lr, r1, r3
   113ba:	fb01 fc08 	mul.w	ip, r1, r8
   113be:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   113c2:	45ac      	cmp	ip, r5
   113c4:	d905      	bls.n	113d2 <__udivmoddi4+0x1b2>
   113c6:	197d      	adds	r5, r7, r5
   113c8:	d202      	bcs.n	113d0 <__udivmoddi4+0x1b0>
   113ca:	45ac      	cmp	ip, r5
   113cc:	f200 8089 	bhi.w	114e2 <__udivmoddi4+0x2c2>
   113d0:	3901      	subs	r1, #1
   113d2:	eba5 030c 	sub.w	r3, r5, ip
   113d6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   113da:	e77a      	b.n	112d2 <__udivmoddi4+0xb2>
   113dc:	f1c1 0420 	rsb	r4, r1, #32
   113e0:	408b      	lsls	r3, r1
   113e2:	fa02 f701 	lsl.w	r7, r2, r1
   113e6:	fa05 fc01 	lsl.w	ip, r5, r1
   113ea:	40e2      	lsrs	r2, r4
   113ec:	fa20 f804 	lsr.w	r8, r0, r4
   113f0:	40e5      	lsrs	r5, r4
   113f2:	fa00 fe01 	lsl.w	lr, r0, r1
   113f6:	4313      	orrs	r3, r2
   113f8:	ea48 020c 	orr.w	r2, r8, ip
   113fc:	ea4f 4813 	mov.w	r8, r3, lsr #16
   11400:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   11404:	fa1f f983 	uxth.w	r9, r3
   11408:	fbb5 faf8 	udiv	sl, r5, r8
   1140c:	fb08 551a 	mls	r5, r8, sl, r5
   11410:	fb0a f009 	mul.w	r0, sl, r9
   11414:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   11418:	4560      	cmp	r0, ip
   1141a:	d90a      	bls.n	11432 <__udivmoddi4+0x212>
   1141c:	eb13 0c0c 	adds.w	ip, r3, ip
   11420:	bf2c      	ite	cs
   11422:	2501      	movcs	r5, #1
   11424:	2500      	movcc	r5, #0
   11426:	4560      	cmp	r0, ip
   11428:	d901      	bls.n	1142e <__udivmoddi4+0x20e>
   1142a:	2d00      	cmp	r5, #0
   1142c:	d055      	beq.n	114da <__udivmoddi4+0x2ba>
   1142e:	f10a 3aff 	add.w	sl, sl, #4294967295
   11432:	ebac 0c00 	sub.w	ip, ip, r0
   11436:	b292      	uxth	r2, r2
   11438:	fbbc f0f8 	udiv	r0, ip, r8
   1143c:	fb08 cc10 	mls	ip, r8, r0, ip
   11440:	fb00 f909 	mul.w	r9, r0, r9
   11444:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   11448:	45e1      	cmp	r9, ip
   1144a:	d905      	bls.n	11458 <__udivmoddi4+0x238>
   1144c:	eb13 0c0c 	adds.w	ip, r3, ip
   11450:	d201      	bcs.n	11456 <__udivmoddi4+0x236>
   11452:	45e1      	cmp	r9, ip
   11454:	d83b      	bhi.n	114ce <__udivmoddi4+0x2ae>
   11456:	3801      	subs	r0, #1
   11458:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1145c:	ebac 0c09 	sub.w	ip, ip, r9
   11460:	fba0 8907 	umull	r8, r9, r0, r7
   11464:	45cc      	cmp	ip, r9
   11466:	4645      	mov	r5, r8
   11468:	464a      	mov	r2, r9
   1146a:	d302      	bcc.n	11472 <__udivmoddi4+0x252>
   1146c:	d106      	bne.n	1147c <__udivmoddi4+0x25c>
   1146e:	45c6      	cmp	lr, r8
   11470:	d204      	bcs.n	1147c <__udivmoddi4+0x25c>
   11472:	3801      	subs	r0, #1
   11474:	ebb8 0507 	subs.w	r5, r8, r7
   11478:	eb69 0203 	sbc.w	r2, r9, r3
   1147c:	b32e      	cbz	r6, 114ca <__udivmoddi4+0x2aa>
   1147e:	ebbe 0305 	subs.w	r3, lr, r5
   11482:	eb6c 0c02 	sbc.w	ip, ip, r2
   11486:	fa23 f201 	lsr.w	r2, r3, r1
   1148a:	fa0c f404 	lsl.w	r4, ip, r4
   1148e:	fa2c f301 	lsr.w	r3, ip, r1
   11492:	2100      	movs	r1, #0
   11494:	4314      	orrs	r4, r2
   11496:	e9c6 4300 	strd	r4, r3, [r6]
   1149a:	e70c      	b.n	112b6 <__udivmoddi4+0x96>
   1149c:	4631      	mov	r1, r6
   1149e:	4630      	mov	r0, r6
   114a0:	e709      	b.n	112b6 <__udivmoddi4+0x96>
   114a2:	1a84      	subs	r4, r0, r2
   114a4:	eb65 0303 	sbc.w	r3, r5, r3
   114a8:	2001      	movs	r0, #1
   114aa:	469a      	mov	sl, r3
   114ac:	e756      	b.n	1135c <__udivmoddi4+0x13c>
   114ae:	f1ac 0c02 	sub.w	ip, ip, #2
   114b2:	443d      	add	r5, r7
   114b4:	e724      	b.n	11300 <__udivmoddi4+0xe0>
   114b6:	3802      	subs	r0, #2
   114b8:	443c      	add	r4, r7
   114ba:	e734      	b.n	11326 <__udivmoddi4+0x106>
   114bc:	3802      	subs	r0, #2
   114be:	443c      	add	r4, r7
   114c0:	e6ef      	b.n	112a2 <__udivmoddi4+0x82>
   114c2:	f1ae 0e02 	sub.w	lr, lr, #2
   114c6:	443b      	add	r3, r7
   114c8:	e6d9      	b.n	1127e <__udivmoddi4+0x5e>
   114ca:	4631      	mov	r1, r6
   114cc:	e6f3      	b.n	112b6 <__udivmoddi4+0x96>
   114ce:	3802      	subs	r0, #2
   114d0:	449c      	add	ip, r3
   114d2:	e7c1      	b.n	11458 <__udivmoddi4+0x238>
   114d4:	3802      	subs	r0, #2
   114d6:	443b      	add	r3, r7
   114d8:	e768      	b.n	113ac <__udivmoddi4+0x18c>
   114da:	f1aa 0a02 	sub.w	sl, sl, #2
   114de:	449c      	add	ip, r3
   114e0:	e7a7      	b.n	11432 <__udivmoddi4+0x212>
   114e2:	3902      	subs	r1, #2
   114e4:	443d      	add	r5, r7
   114e6:	e774      	b.n	113d2 <__udivmoddi4+0x1b2>

000114e8 <__aeabi_idiv0>:
   114e8:	4770      	bx	lr
   114ea:	bf00      	nop

000114ec <strcmp>:
   114ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   114f0:	f811 3b01 	ldrb.w	r3, [r1], #1
   114f4:	2a01      	cmp	r2, #1
   114f6:	bf28      	it	cs
   114f8:	429a      	cmpcs	r2, r3
   114fa:	d0f7      	beq.n	114ec <strcmp>
   114fc:	1ad0      	subs	r0, r2, r3
   114fe:	4770      	bx	lr

00011500 <strlen>:
   11500:	4603      	mov	r3, r0
   11502:	f813 2b01 	ldrb.w	r2, [r3], #1
   11506:	2a00      	cmp	r2, #0
   11508:	d1fb      	bne.n	11502 <strlen+0x2>
   1150a:	1a18      	subs	r0, r3, r0
   1150c:	3801      	subs	r0, #1
   1150e:	4770      	bx	lr

00011510 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   11510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11514:	4604      	mov	r4, r0
   11516:	b09b      	sub	sp, #108	; 0x6c
   11518:	460f      	mov	r7, r1
   1151a:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   1151c:	2100      	movs	r1, #0
   1151e:	2230      	movs	r2, #48	; 0x30
   11520:	a802      	add	r0, sp, #8
   11522:	f026 f94e 	bl	377c2 <memset>
	int ret = 0;

	if (!ctx || !time) {
   11526:	2c00      	cmp	r4, #0
   11528:	f000 8087 	beq.w	1163a <sntp_query+0x12a>
   1152c:	2e00      	cmp	r6, #0
   1152e:	f000 8084 	beq.w	1163a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   11532:	231b      	movs	r3, #27
   11534:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   11538:	f026 f847 	bl	375ca <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11540:	2500      	movs	r5, #0
   11542:	fba0 8903 	umull	r8, r9, r0, r3
   11546:	fb03 9901 	mla	r9, r3, r1, r9
   1154a:	ea4f 30d8 	mov.w	r0, r8, lsr #15
	return time / MSEC_PER_SEC;
   1154e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11552:	2300      	movs	r3, #0
   11554:	4629      	mov	r1, r5
   11556:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
   1155a:	f7ff fe49 	bl	111f0 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1155e:	4a3c      	ldr	r2, [pc, #240]	; (11650 <sntp_query+0x140>)
   11560:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   11562:	0a13      	lsrs	r3, r2, #8
   11564:	0211      	lsls	r1, r2, #8
   11566:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1156a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1156e:	430b      	orrs	r3, r1
   11570:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   11574:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   11578:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1157a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1157c:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1157e:	2230      	movs	r2, #48	; 0x30
   11580:	462b      	mov	r3, r5
   11582:	e9cd 5500 	strd	r5, r5, [sp]
   11586:	a902      	add	r1, sp, #8
   11588:	f01f fa17 	bl	309ba <z_impl_zsock_sendto>
	if (ret < 0) {
   1158c:	2800      	cmp	r0, #0
   1158e:	db0f      	blt.n	115b0 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   11590:	4629      	mov	r1, r5
   11592:	2230      	movs	r2, #48	; 0x30
   11594:	a80e      	add	r0, sp, #56	; 0x38
   11596:	f026 f914 	bl	377c2 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   1159a:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1159c:	463a      	mov	r2, r7
   1159e:	4620      	mov	r0, r4
   115a0:	f004 fab4 	bl	15b0c <z_impl_zsock_poll>
	if (status < 0) {
   115a4:	42a8      	cmp	r0, r5
   115a6:	da06      	bge.n	115b6 <sntp_query+0xa6>
		return -errno;
   115a8:	f020 ff64 	bl	32474 <__errno>
   115ac:	6800      	ldr	r0, [r0, #0]
   115ae:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   115b0:	b01b      	add	sp, #108	; 0x6c
   115b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status == 0) {
   115b6:	d037      	beq.n	11628 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   115b8:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   115ba:	2230      	movs	r2, #48	; 0x30
   115bc:	462b      	mov	r3, r5
   115be:	e9cd 5500 	strd	r5, r5, [sp]
   115c2:	a90e      	add	r1, sp, #56	; 0x38
   115c4:	f01f fa50 	bl	30a68 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   115c8:	2800      	cmp	r0, #0
   115ca:	dbed      	blt.n	115a8 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   115cc:	2830      	cmp	r0, #48	; 0x30
   115ce:	d12e      	bne.n	1162e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   115d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   115d2:	6922      	ldr	r2, [r4, #16]
   115d4:	ba1b      	rev	r3, r3
   115d6:	429a      	cmp	r2, r3
   115d8:	d002      	beq.n	115e0 <sntp_query+0xd0>
		return -EINVAL;
   115da:	f06f 0015 	mvn.w	r0, #21
   115de:	e7e7      	b.n	115b0 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   115e0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   115e4:	f003 0307 	and.w	r3, r3, #7
   115e8:	2b04      	cmp	r3, #4
   115ea:	d1f6      	bne.n	115da <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   115ec:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   115f0:	b303      	cbz	r3, 11634 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   115f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   115f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   115f6:	ba1b      	rev	r3, r3
   115f8:	ba12      	rev	r2, r2
   115fa:	ea53 0102 	orrs.w	r1, r3, r2
   115fe:	d0ec      	beq.n	115da <sntp_query+0xca>
	if (ts & 0x80000000) {
   11600:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   11602:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   11604:	da0c      	bge.n	11620 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   11606:	4a13      	ldr	r2, [pc, #76]	; (11654 <sntp_query+0x144>)
   11608:	4293      	cmp	r3, r2
   1160a:	d9e6      	bls.n	115da <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1160c:	a10c      	add	r1, pc, #48	; (adr r1, 11640 <sntp_query+0x130>)
   1160e:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   11612:	18c0      	adds	r0, r0, r3
   11614:	f141 0100 	adc.w	r1, r1, #0
   11618:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
   1161c:	2000      	movs	r0, #0
   1161e:	e7c7      	b.n	115b0 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   11620:	a109      	add	r1, pc, #36	; (adr r1, 11648 <sntp_query+0x138>)
   11622:	e9d1 0100 	ldrd	r0, r1, [r1]
   11626:	e7f4      	b.n	11612 <sntp_query+0x102>
		return -ETIMEDOUT;
   11628:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1162c:	e7c0      	b.n	115b0 <sntp_query+0xa0>
		return -EMSGSIZE;
   1162e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   11632:	e7bd      	b.n	115b0 <sntp_query+0xa0>
		return -EBUSY;
   11634:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   11638:	e7ba      	b.n	115b0 <sntp_query+0xa0>
		return -EFAULT;
   1163a:	f06f 000d 	mvn.w	r0, #13
   1163e:	e7b7      	b.n	115b0 <sntp_query+0xa0>
   11640:	7c558180 	.word	0x7c558180
   11644:	ffffffff 	.word	0xffffffff
   11648:	7c558180 	.word	0x7c558180
   1164c:	00000000 	.word	0x00000000
   11650:	83aa7e80 	.word	0x83aa7e80
   11654:	83aa7e7f 	.word	0x83aa7e7f

00011658 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   11658:	2300      	movs	r3, #0
{
   1165a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1165e:	b08c      	sub	sp, #48	; 0x30
	struct at_param_list resp_list = {0};
   11660:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   11664:	2304      	movs	r3, #4
{
   11666:	460e      	mov	r6, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   11668:	4607      	mov	r7, r0
	size_t len = sizeof(tmp_buf) - 1;
   1166a:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   1166c:	2800      	cmp	r0, #0
   1166e:	f000 80e8 	beq.w	11842 <parse_edrx+0x1ea>
   11672:	2900      	cmp	r1, #0
   11674:	f000 80e5 	beq.w	11842 <parse_edrx+0x1ea>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   11678:	2106      	movs	r1, #6
   1167a:	a804      	add	r0, sp, #16
   1167c:	f024 f917 	bl	358ae <at_params_list_init>
	if (err) {
   11680:	4d73      	ldr	r5, [pc, #460]	; (11850 <parse_edrx+0x1f8>)
   11682:	4b74      	ldr	r3, [pc, #464]	; (11854 <parse_edrx+0x1fc>)
   11684:	4604      	mov	r4, r0
   11686:	1aed      	subs	r5, r5, r3
   11688:	08ed      	lsrs	r5, r5, #3
   1168a:	01ad      	lsls	r5, r5, #6
   1168c:	b148      	cbz	r0, 116a2 <parse_edrx+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1168e:	4601      	mov	r1, r0
   11690:	f045 0201 	orr.w	r2, r5, #1
   11694:	4870      	ldr	r0, [pc, #448]	; (11858 <parse_edrx+0x200>)
   11696:	f01e fe2c 	bl	302f2 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1169a:	4620      	mov	r0, r4
   1169c:	b00c      	add	sp, #48	; 0x30
   1169e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   116a2:	4601      	mov	r1, r0
   116a4:	aa04      	add	r2, sp, #16
   116a6:	4638      	mov	r0, r7
   116a8:	f024 f8fe 	bl	358a8 <at_parser_params_from_str>
	if (err) {
   116ac:	4604      	mov	r4, r0
   116ae:	b148      	cbz	r0, 116c4 <parse_edrx+0x6c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   116b0:	4601      	mov	r1, r0
   116b2:	486a      	ldr	r0, [pc, #424]	; (1185c <parse_edrx+0x204>)
   116b4:	f045 0201 	orr.w	r2, r5, #1
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   116b8:	f01e fe1b 	bl	302f2 <log_1>
	at_params_list_free(&resp_list);
   116bc:	a804      	add	r0, sp, #16
   116be:	f024 f909 	bl	358d4 <at_params_list_free>
	return err;
   116c2:	e7ea      	b.n	1169a <parse_edrx+0x42>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   116c4:	2103      	movs	r1, #3
   116c6:	ab01      	add	r3, sp, #4
   116c8:	aa02      	add	r2, sp, #8
   116ca:	a804      	add	r0, sp, #16
   116cc:	f024 f9fd 	bl	35aca <at_params_string_get>
	if (err) {
   116d0:	4604      	mov	r4, r0
   116d2:	b120      	cbz	r0, 116de <parse_edrx+0x86>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   116d4:	4601      	mov	r1, r0
   116d6:	f045 0201 	orr.w	r2, r5, #1
   116da:	4861      	ldr	r0, [pc, #388]	; (11860 <parse_edrx+0x208>)
   116dc:	e7ec      	b.n	116b8 <parse_edrx+0x60>
	tmp_buf[len] = '\0';
   116de:	9b01      	ldr	r3, [sp, #4]
   116e0:	aa0c      	add	r2, sp, #48	; 0x30
   116e2:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   116e4:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   116e6:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   116ea:	2202      	movs	r2, #2
   116ec:	a802      	add	r0, sp, #8
   116ee:	f01d fe39 	bl	2f364 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   116f2:	466a      	mov	r2, sp
	idx = strtoul(tmp_buf, NULL, 2);
   116f4:	4680      	mov	r8, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   116f6:	2101      	movs	r1, #1
   116f8:	a804      	add	r0, sp, #16
   116fa:	f024 f9af 	bl	35a5c <at_params_int_get>
	if (err) {
   116fe:	4604      	mov	r4, r0
   11700:	b120      	cbz	r0, 1170c <parse_edrx+0xb4>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   11702:	4601      	mov	r1, r0
   11704:	f045 0201 	orr.w	r2, r5, #1
   11708:	4856      	ldr	r0, [pc, #344]	; (11864 <parse_edrx+0x20c>)
   1170a:	e7d5      	b.n	116b8 <parse_edrx+0x60>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1170c:	9b00      	ldr	r3, [sp, #0]
   1170e:	2b04      	cmp	r3, #4
   11710:	d01e      	beq.n	11750 <parse_edrx+0xf8>
   11712:	2b05      	cmp	r3, #5
   11714:	d008      	beq.n	11728 <parse_edrx+0xd0>
   11716:	7030      	strb	r0, [r6, #0]
		LOG_WRN("Active LTE mode could not be determined");
   11718:	f045 0102 	orr.w	r1, r5, #2
   1171c:	4852      	ldr	r0, [pc, #328]	; (11868 <parse_edrx+0x210>)
   1171e:	f01e fddb 	bl	302d8 <log_0>
		return -ENOTCONN;
   11722:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   11726:	e7c9      	b.n	116bc <parse_edrx+0x64>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11728:	2309      	movs	r3, #9
		*ptw_multiplier = 2.56;
   1172a:	4f50      	ldr	r7, [pc, #320]	; (1186c <parse_edrx+0x214>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1172c:	7033      	strb	r3, [r6, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1172e:	1d32      	adds	r2, r6, #4
   11730:	d033      	beq.n	1179a <parse_edrx+0x142>
   11732:	fa5f f088 	uxtb.w	r0, r8
   11736:	280f      	cmp	r0, #15
   11738:	d82f      	bhi.n	1179a <parse_edrx+0x142>
	switch (lte_mode) {
   1173a:	2b07      	cmp	r3, #7
   1173c:	d00c      	beq.n	11758 <parse_edrx+0x100>
   1173e:	2b09      	cmp	r3, #9
   11740:	d027      	beq.n	11792 <parse_edrx+0x13a>
   11742:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   11746:	4621      	mov	r1, r4
   11748:	4849      	ldr	r0, [pc, #292]	; (11870 <parse_edrx+0x218>)
   1174a:	f045 0201 	orr.w	r2, r5, #1
   1174e:	e7b3      	b.n	116b8 <parse_edrx+0x60>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11750:	2307      	movs	r3, #7
		*ptw_multiplier = 1.28;
   11752:	4f48      	ldr	r7, [pc, #288]	; (11874 <parse_edrx+0x21c>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11754:	7033      	strb	r3, [r6, #0]
	if (err) {
   11756:	e7ea      	b.n	1172e <parse_edrx+0xd6>
		multiplier = edrx_lookup_ltem[idx];
   11758:	4b47      	ldr	r3, [pc, #284]	; (11878 <parse_edrx+0x220>)
		multiplier = edrx_lookup_nbiot[idx];
   1175a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1175e:	b1d0      	cbz	r0, 11796 <parse_edrx+0x13e>
   11760:	f7fe fec0 	bl	104e4 <__aeabi_i2d>
   11764:	a338      	add	r3, pc, #224	; (adr r3, 11848 <parse_edrx+0x1f0>)
   11766:	e9d3 2300 	ldrd	r2, r3, [r3]
   1176a:	f7fe ff25 	bl	105b8 <__aeabi_dmul>
   1176e:	f7ff f9fb 	bl	10b68 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   11772:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   11774:	6070      	str	r0, [r6, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   11776:	eb0d 0301 	add.w	r3, sp, r1
   1177a:	aa02      	add	r2, sp, #8
   1177c:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   1177e:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   11780:	f024 f9a3 	bl	35aca <at_params_string_get>
	if (err) {
   11784:	4604      	mov	r4, r0
   11786:	b158      	cbz	r0, 117a0 <parse_edrx+0x148>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   11788:	4601      	mov	r1, r0
   1178a:	f045 0201 	orr.w	r2, r5, #1
   1178e:	483b      	ldr	r0, [pc, #236]	; (1187c <parse_edrx+0x224>)
   11790:	e792      	b.n	116b8 <parse_edrx+0x60>
		multiplier = edrx_lookup_nbiot[idx];
   11792:	4b3b      	ldr	r3, [pc, #236]	; (11880 <parse_edrx+0x228>)
   11794:	e7e1      	b.n	1175a <parse_edrx+0x102>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   11796:	483b      	ldr	r0, [pc, #236]	; (11884 <parse_edrx+0x22c>)
   11798:	e7eb      	b.n	11772 <parse_edrx+0x11a>
		return -EINVAL;
   1179a:	f06f 0415 	mvn.w	r4, #21
   1179e:	e7d2      	b.n	11746 <parse_edrx+0xee>
	tmp_buf[len] = '\0';
   117a0:	9b01      	ldr	r3, [sp, #4]
   117a2:	aa0c      	add	r2, sp, #48	; 0x30
   117a4:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   117a6:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   117a8:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   117ac:	2202      	movs	r2, #2
   117ae:	a802      	add	r0, sp, #8
   117b0:	f01d fdd8 	bl	2f364 <strtoul>
	if (idx > 15) {
   117b4:	b2c1      	uxtb	r1, r0
   117b6:	290f      	cmp	r1, #15
   117b8:	d907      	bls.n	117ca <parse_edrx+0x172>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   117ba:	4833      	ldr	r0, [pc, #204]	; (11888 <parse_edrx+0x230>)
   117bc:	f045 0201 	orr.w	r2, r5, #1
   117c0:	f01e fd97 	bl	302f2 <log_1>
		err = -EINVAL;
   117c4:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   117c8:	e778      	b.n	116bc <parse_edrx+0x64>
	idx += 1;
   117ca:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   117cc:	b2c0      	uxtb	r0, r0
   117ce:	f7ff fad5 	bl	10d7c <__aeabi_i2f>
   117d2:	4639      	mov	r1, r7
   117d4:	f7ff fb26 	bl	10e24 <__aeabi_fmul>
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   117d8:	4b2c      	ldr	r3, [pc, #176]	; (1188c <parse_edrx+0x234>)
   117da:	7831      	ldrb	r1, [r6, #0]
   117dc:	9306      	str	r3, [sp, #24]
   117de:	4a2c      	ldr	r2, [pc, #176]	; (11890 <parse_edrx+0x238>)
   117e0:	4b2c      	ldr	r3, [pc, #176]	; (11894 <parse_edrx+0x23c>)
	cfg->ptw = idx * ptw_multiplier;
   117e2:	60b0      	str	r0, [r6, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   117e4:	2907      	cmp	r1, #7
   117e6:	bf08      	it	eq
   117e8:	461a      	moveq	r2, r3
   117ea:	6876      	ldr	r6, [r6, #4]
	cfg->ptw = idx * ptw_multiplier;
   117ec:	4607      	mov	r7, r0
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   117ee:	4630      	mov	r0, r6
   117f0:	9207      	str	r2, [sp, #28]
   117f2:	f7ff fc67 	bl	110c4 <__aeabi_f2iz>
   117f6:	9008      	str	r0, [sp, #32]
   117f8:	f7ff fac0 	bl	10d7c <__aeabi_i2f>
   117fc:	4601      	mov	r1, r0
   117fe:	4630      	mov	r0, r6
   11800:	f7ff fa06 	bl	10c10 <__aeabi_fsub>
   11804:	4924      	ldr	r1, [pc, #144]	; (11898 <parse_edrx+0x240>)
   11806:	f7ff fb0d 	bl	10e24 <__aeabi_fmul>
   1180a:	f7ff fc5b 	bl	110c4 <__aeabi_f2iz>
   1180e:	9009      	str	r0, [sp, #36]	; 0x24
   11810:	4638      	mov	r0, r7
   11812:	f7ff fc57 	bl	110c4 <__aeabi_f2iz>
   11816:	900a      	str	r0, [sp, #40]	; 0x28
   11818:	f7ff fab0 	bl	10d7c <__aeabi_i2f>
   1181c:	4601      	mov	r1, r0
   1181e:	4638      	mov	r0, r7
   11820:	f7ff f9f6 	bl	10c10 <__aeabi_fsub>
   11824:	491c      	ldr	r1, [pc, #112]	; (11898 <parse_edrx+0x240>)
   11826:	f7ff fafd 	bl	10e24 <__aeabi_fmul>
   1182a:	f7ff fc4b 	bl	110c4 <__aeabi_f2iz>
   1182e:	f045 0504 	orr.w	r5, r5, #4
   11832:	900b      	str	r0, [sp, #44]	; 0x2c
   11834:	462b      	mov	r3, r5
   11836:	2206      	movs	r2, #6
   11838:	4818      	ldr	r0, [pc, #96]	; (1189c <parse_edrx+0x244>)
   1183a:	a906      	add	r1, sp, #24
   1183c:	f01e fda2 	bl	30384 <log_n>
clean_exit:
   11840:	e73c      	b.n	116bc <parse_edrx+0x64>
		return -EINVAL;
   11842:	f06f 0415 	mvn.w	r4, #21
   11846:	e728      	b.n	1169a <parse_edrx+0x42>
   11848:	47ae147b 	.word	0x47ae147b
   1184c:	40247ae1 	.word	0x40247ae1
   11850:	00038888 	.word	0x00038888
   11854:	000387c0 	.word	0x000387c0
   11858:	0003e6eb 	.word	0x0003e6eb
   1185c:	0003e714 	.word	0x0003e714
   11860:	0003e740 	.word	0x0003e740
   11864:	0003e76c 	.word	0x0003e76c
   11868:	0003e78e 	.word	0x0003e78e
   1186c:	4023d70a 	.word	0x4023d70a
   11870:	0003e7b6 	.word	0x0003e7b6
   11874:	3fa3d70a 	.word	0x3fa3d70a
   11878:	000396aa 	.word	0x000396aa
   1187c:	0003e7da 	.word	0x0003e7da
   11880:	000396ca 	.word	0x000396ca
   11884:	40a3d70a 	.word	0x40a3d70a
   11888:	0003e805 	.word	0x0003e805
   1188c:	0003ec74 	.word	0x0003ec74
   11890:	0003e828 	.word	0x0003e828
   11894:	0003e822 	.word	0x0003e822
   11898:	42c80000 	.word	0x42c80000
   1189c:	0003e82f 	.word	0x0003e82f

000118a0 <_dtoa_r>:
   118a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118a4:	4616      	mov	r6, r2
   118a6:	b099      	sub	sp, #100	; 0x64
   118a8:	461f      	mov	r7, r3
   118aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
   118ac:	4605      	mov	r5, r0
   118ae:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
   118b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
   118b6:	b93c      	cbnz	r4, 118c8 <_dtoa_r+0x28>
   118b8:	2010      	movs	r0, #16
   118ba:	f01c fd49 	bl	2e350 <malloc>
   118be:	6268      	str	r0, [r5, #36]	; 0x24
   118c0:	6004      	str	r4, [r0, #0]
   118c2:	60c4      	str	r4, [r0, #12]
   118c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   118c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   118ca:	6819      	ldr	r1, [r3, #0]
   118cc:	b151      	cbz	r1, 118e4 <_dtoa_r+0x44>
   118ce:	685a      	ldr	r2, [r3, #4]
   118d0:	2301      	movs	r3, #1
   118d2:	4628      	mov	r0, r5
   118d4:	4093      	lsls	r3, r2
   118d6:	604a      	str	r2, [r1, #4]
   118d8:	608b      	str	r3, [r1, #8]
   118da:	f026 f9c3 	bl	37c64 <_Bfree>
   118de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   118e0:	2200      	movs	r2, #0
   118e2:	601a      	str	r2, [r3, #0]
   118e4:	1e3b      	subs	r3, r7, #0
   118e6:	bfb7      	itett	lt
   118e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   118ec:	2300      	movge	r3, #0
   118ee:	2201      	movlt	r2, #1
   118f0:	9305      	strlt	r3, [sp, #20]
   118f2:	bfa8      	it	ge
   118f4:	f8c8 3000 	strge.w	r3, [r8]
   118f8:	f8dd 9014 	ldr.w	r9, [sp, #20]
   118fc:	4bac      	ldr	r3, [pc, #688]	; (11bb0 <_dtoa_r+0x310>)
   118fe:	bfb8      	it	lt
   11900:	f8c8 2000 	strlt.w	r2, [r8]
   11904:	ea33 0309 	bics.w	r3, r3, r9
   11908:	d119      	bne.n	1193e <_dtoa_r+0x9e>
   1190a:	f242 730f 	movw	r3, #9999	; 0x270f
   1190e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11910:	6013      	str	r3, [r2, #0]
   11912:	f3c9 0313 	ubfx	r3, r9, #0, #20
   11916:	4333      	orrs	r3, r6
   11918:	f000 856a 	beq.w	123f0 <_dtoa_r+0xb50>
   1191c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1191e:	b953      	cbnz	r3, 11936 <_dtoa_r+0x96>
   11920:	4ba4      	ldr	r3, [pc, #656]	; (11bb4 <_dtoa_r+0x314>)
   11922:	e023      	b.n	1196c <_dtoa_r+0xcc>
   11924:	4ba4      	ldr	r3, [pc, #656]	; (11bb8 <_dtoa_r+0x318>)
   11926:	9303      	str	r3, [sp, #12]
   11928:	3308      	adds	r3, #8
   1192a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1192c:	6013      	str	r3, [r2, #0]
   1192e:	9803      	ldr	r0, [sp, #12]
   11930:	b019      	add	sp, #100	; 0x64
   11932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11936:	4b9f      	ldr	r3, [pc, #636]	; (11bb4 <_dtoa_r+0x314>)
   11938:	9303      	str	r3, [sp, #12]
   1193a:	3303      	adds	r3, #3
   1193c:	e7f5      	b.n	1192a <_dtoa_r+0x8a>
   1193e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11942:	2200      	movs	r2, #0
   11944:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   11948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1194c:	2300      	movs	r3, #0
   1194e:	f7ff f89b 	bl	10a88 <__aeabi_dcmpeq>
   11952:	4680      	mov	r8, r0
   11954:	b160      	cbz	r0, 11970 <_dtoa_r+0xd0>
   11956:	2301      	movs	r3, #1
   11958:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1195a:	6013      	str	r3, [r2, #0]
   1195c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1195e:	2b00      	cmp	r3, #0
   11960:	f000 8543 	beq.w	123ea <_dtoa_r+0xb4a>
   11964:	4b95      	ldr	r3, [pc, #596]	; (11bbc <_dtoa_r+0x31c>)
   11966:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11968:	6013      	str	r3, [r2, #0]
   1196a:	3b01      	subs	r3, #1
   1196c:	9303      	str	r3, [sp, #12]
   1196e:	e7de      	b.n	1192e <_dtoa_r+0x8e>
   11970:	ab16      	add	r3, sp, #88	; 0x58
   11972:	f3c9 540a 	ubfx	r4, r9, #20, #11
   11976:	4628      	mov	r0, r5
   11978:	9301      	str	r3, [sp, #4]
   1197a:	ab17      	add	r3, sp, #92	; 0x5c
   1197c:	9300      	str	r3, [sp, #0]
   1197e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   11982:	f026 fbae 	bl	380e2 <__d2b>
   11986:	4683      	mov	fp, r0
   11988:	2c00      	cmp	r4, #0
   1198a:	d07c      	beq.n	11a86 <_dtoa_r+0x1e6>
   1198c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1198e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
   11992:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   11996:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1199a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1199e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   119a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   119a6:	2200      	movs	r2, #0
   119a8:	4b85      	ldr	r3, [pc, #532]	; (11bc0 <_dtoa_r+0x320>)
   119aa:	f7fe fc4d 	bl	10248 <__aeabi_dsub>
   119ae:	a37a      	add	r3, pc, #488	; (adr r3, 11b98 <_dtoa_r+0x2f8>)
   119b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   119b4:	f7fe fe00 	bl	105b8 <__aeabi_dmul>
   119b8:	a379      	add	r3, pc, #484	; (adr r3, 11ba0 <_dtoa_r+0x300>)
   119ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   119be:	f7fe fc45 	bl	1024c <__adddf3>
   119c2:	4606      	mov	r6, r0
   119c4:	460f      	mov	r7, r1
   119c6:	4620      	mov	r0, r4
   119c8:	f7fe fd8c 	bl	104e4 <__aeabi_i2d>
   119cc:	a376      	add	r3, pc, #472	; (adr r3, 11ba8 <_dtoa_r+0x308>)
   119ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   119d2:	f7fe fdf1 	bl	105b8 <__aeabi_dmul>
   119d6:	4602      	mov	r2, r0
   119d8:	460b      	mov	r3, r1
   119da:	4630      	mov	r0, r6
   119dc:	4639      	mov	r1, r7
   119de:	f7fe fc35 	bl	1024c <__adddf3>
   119e2:	4606      	mov	r6, r0
   119e4:	460f      	mov	r7, r1
   119e6:	f7ff f897 	bl	10b18 <__aeabi_d2iz>
   119ea:	2200      	movs	r2, #0
   119ec:	4682      	mov	sl, r0
   119ee:	2300      	movs	r3, #0
   119f0:	4630      	mov	r0, r6
   119f2:	4639      	mov	r1, r7
   119f4:	f7ff f852 	bl	10a9c <__aeabi_dcmplt>
   119f8:	b148      	cbz	r0, 11a0e <_dtoa_r+0x16e>
   119fa:	4650      	mov	r0, sl
   119fc:	f7fe fd72 	bl	104e4 <__aeabi_i2d>
   11a00:	4632      	mov	r2, r6
   11a02:	463b      	mov	r3, r7
   11a04:	f7ff f840 	bl	10a88 <__aeabi_dcmpeq>
   11a08:	b908      	cbnz	r0, 11a0e <_dtoa_r+0x16e>
   11a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
   11a0e:	f1ba 0f16 	cmp.w	sl, #22
   11a12:	d856      	bhi.n	11ac2 <_dtoa_r+0x222>
   11a14:	4b6b      	ldr	r3, [pc, #428]	; (11bc4 <_dtoa_r+0x324>)
   11a16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   11a1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   11a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a22:	f7ff f83b 	bl	10a9c <__aeabi_dcmplt>
   11a26:	2800      	cmp	r0, #0
   11a28:	d04d      	beq.n	11ac6 <_dtoa_r+0x226>
   11a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
   11a2e:	2300      	movs	r3, #0
   11a30:	930f      	str	r3, [sp, #60]	; 0x3c
   11a32:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11a34:	1b1c      	subs	r4, r3, r4
   11a36:	1e63      	subs	r3, r4, #1
   11a38:	9309      	str	r3, [sp, #36]	; 0x24
   11a3a:	bf49      	itett	mi
   11a3c:	f1c4 0301 	rsbmi	r3, r4, #1
   11a40:	2300      	movpl	r3, #0
   11a42:	9306      	strmi	r3, [sp, #24]
   11a44:	2300      	movmi	r3, #0
   11a46:	bf54      	ite	pl
   11a48:	9306      	strpl	r3, [sp, #24]
   11a4a:	9309      	strmi	r3, [sp, #36]	; 0x24
   11a4c:	f1ba 0f00 	cmp.w	sl, #0
   11a50:	db3b      	blt.n	11aca <_dtoa_r+0x22a>
   11a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11a54:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   11a58:	4453      	add	r3, sl
   11a5a:	9309      	str	r3, [sp, #36]	; 0x24
   11a5c:	2300      	movs	r3, #0
   11a5e:	930a      	str	r3, [sp, #40]	; 0x28
   11a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a62:	2b09      	cmp	r3, #9
   11a64:	f200 80b4 	bhi.w	11bd0 <_dtoa_r+0x330>
   11a68:	2b05      	cmp	r3, #5
   11a6a:	bfc5      	ittet	gt
   11a6c:	3b04      	subgt	r3, #4
   11a6e:	2400      	movgt	r4, #0
   11a70:	2401      	movle	r4, #1
   11a72:	9322      	strgt	r3, [sp, #136]	; 0x88
   11a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a76:	3b02      	subs	r3, #2
   11a78:	2b03      	cmp	r3, #3
   11a7a:	f200 80b5 	bhi.w	11be8 <_dtoa_r+0x348>
   11a7e:	e8df f003 	tbb	[pc, r3]
   11a82:	7d2e      	.short	0x7d2e
   11a84:	a57b      	.short	0xa57b
   11a86:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
   11a8a:	441c      	add	r4, r3
   11a8c:	f204 4332 	addw	r3, r4, #1074	; 0x432
   11a90:	2b20      	cmp	r3, #32
   11a92:	bfc6      	itte	gt
   11a94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   11a98:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
   11a9c:	f1c3 0320 	rsble	r3, r3, #32
   11aa0:	f104 34ff 	add.w	r4, r4, #4294967295
   11aa4:	bfc5      	ittet	gt
   11aa6:	fa09 f303 	lslgt.w	r3, r9, r3
   11aaa:	fa26 f000 	lsrgt.w	r0, r6, r0
   11aae:	fa06 f003 	lslle.w	r0, r6, r3
   11ab2:	4318      	orrgt	r0, r3
   11ab4:	f7fe fd06 	bl	104c4 <__aeabi_ui2d>
   11ab8:	2301      	movs	r3, #1
   11aba:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   11abe:	9313      	str	r3, [sp, #76]	; 0x4c
   11ac0:	e771      	b.n	119a6 <_dtoa_r+0x106>
   11ac2:	2301      	movs	r3, #1
   11ac4:	e7b4      	b.n	11a30 <_dtoa_r+0x190>
   11ac6:	900f      	str	r0, [sp, #60]	; 0x3c
   11ac8:	e7b3      	b.n	11a32 <_dtoa_r+0x192>
   11aca:	9b06      	ldr	r3, [sp, #24]
   11acc:	eba3 030a 	sub.w	r3, r3, sl
   11ad0:	9306      	str	r3, [sp, #24]
   11ad2:	f1ca 0300 	rsb	r3, sl, #0
   11ad6:	930a      	str	r3, [sp, #40]	; 0x28
   11ad8:	2300      	movs	r3, #0
   11ada:	930e      	str	r3, [sp, #56]	; 0x38
   11adc:	e7c0      	b.n	11a60 <_dtoa_r+0x1c0>
   11ade:	2300      	movs	r3, #0
   11ae0:	930b      	str	r3, [sp, #44]	; 0x2c
   11ae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11ae4:	2b00      	cmp	r3, #0
   11ae6:	f300 8082 	bgt.w	11bee <_dtoa_r+0x34e>
   11aea:	f04f 0901 	mov.w	r9, #1
   11aee:	464b      	mov	r3, r9
   11af0:	f8cd 9020 	str.w	r9, [sp, #32]
   11af4:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   11af8:	2200      	movs	r2, #0
   11afa:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   11afc:	6072      	str	r2, [r6, #4]
   11afe:	2204      	movs	r2, #4
   11b00:	f102 0014 	add.w	r0, r2, #20
   11b04:	6871      	ldr	r1, [r6, #4]
   11b06:	4298      	cmp	r0, r3
   11b08:	d977      	bls.n	11bfa <_dtoa_r+0x35a>
   11b0a:	4628      	mov	r0, r5
   11b0c:	f026 f876 	bl	37bfc <_Balloc>
   11b10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11b12:	6030      	str	r0, [r6, #0]
   11b14:	681b      	ldr	r3, [r3, #0]
   11b16:	9303      	str	r3, [sp, #12]
   11b18:	9b08      	ldr	r3, [sp, #32]
   11b1a:	2b0e      	cmp	r3, #14
   11b1c:	f200 80ee 	bhi.w	11cfc <_dtoa_r+0x45c>
   11b20:	2c00      	cmp	r4, #0
   11b22:	f000 80eb 	beq.w	11cfc <_dtoa_r+0x45c>
   11b26:	f1ba 0f00 	cmp.w	sl, #0
   11b2a:	dd7a      	ble.n	11c22 <_dtoa_r+0x382>
   11b2c:	f00a 030f 	and.w	r3, sl, #15
   11b30:	4a24      	ldr	r2, [pc, #144]	; (11bc4 <_dtoa_r+0x324>)
   11b32:	f41a 7f80 	tst.w	sl, #256	; 0x100
   11b36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11b3a:	e9d3 3400 	ldrd	r3, r4, [r3]
   11b3e:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   11b42:	ea4f 142a 	mov.w	r4, sl, asr #4
   11b46:	d05c      	beq.n	11c02 <_dtoa_r+0x362>
   11b48:	4b1f      	ldr	r3, [pc, #124]	; (11bc8 <_dtoa_r+0x328>)
   11b4a:	f004 040f 	and.w	r4, r4, #15
   11b4e:	2703      	movs	r7, #3
   11b50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   11b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   11b58:	f7fe fe58 	bl	1080c <__aeabi_ddiv>
   11b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11b60:	4e19      	ldr	r6, [pc, #100]	; (11bc8 <_dtoa_r+0x328>)
   11b62:	2c00      	cmp	r4, #0
   11b64:	d14f      	bne.n	11c06 <_dtoa_r+0x366>
   11b66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11b6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11b6e:	f7fe fe4d 	bl	1080c <__aeabi_ddiv>
   11b72:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11b76:	e06e      	b.n	11c56 <_dtoa_r+0x3b6>
   11b78:	2301      	movs	r3, #1
   11b7a:	e7b1      	b.n	11ae0 <_dtoa_r+0x240>
   11b7c:	2300      	movs	r3, #0
   11b7e:	930b      	str	r3, [sp, #44]	; 0x2c
   11b80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11b82:	eb0a 0903 	add.w	r9, sl, r3
   11b86:	f109 0301 	add.w	r3, r9, #1
   11b8a:	2b01      	cmp	r3, #1
   11b8c:	9308      	str	r3, [sp, #32]
   11b8e:	bfb8      	it	lt
   11b90:	2301      	movlt	r3, #1
   11b92:	e7b1      	b.n	11af8 <_dtoa_r+0x258>
   11b94:	f3af 8000 	nop.w
   11b98:	636f4361 	.word	0x636f4361
   11b9c:	3fd287a7 	.word	0x3fd287a7
   11ba0:	8b60c8b3 	.word	0x8b60c8b3
   11ba4:	3fc68a28 	.word	0x3fc68a28
   11ba8:	509f79fb 	.word	0x509f79fb
   11bac:	3fd34413 	.word	0x3fd34413
   11bb0:	7ff00000 	.word	0x7ff00000
   11bb4:	000416ca 	.word	0x000416ca
   11bb8:	000416c1 	.word	0x000416c1
   11bbc:	00040e82 	.word	0x00040e82
   11bc0:	3ff80000 	.word	0x3ff80000
   11bc4:	00038a40 	.word	0x00038a40
   11bc8:	00038a18 	.word	0x00038a18
   11bcc:	2301      	movs	r3, #1
   11bce:	e7d6      	b.n	11b7e <_dtoa_r+0x2de>
   11bd0:	2401      	movs	r4, #1
   11bd2:	2300      	movs	r3, #0
   11bd4:	940b      	str	r4, [sp, #44]	; 0x2c
   11bd6:	9322      	str	r3, [sp, #136]	; 0x88
   11bd8:	f04f 39ff 	mov.w	r9, #4294967295
   11bdc:	2200      	movs	r2, #0
   11bde:	2312      	movs	r3, #18
   11be0:	f8cd 9020 	str.w	r9, [sp, #32]
   11be4:	9223      	str	r2, [sp, #140]	; 0x8c
   11be6:	e787      	b.n	11af8 <_dtoa_r+0x258>
   11be8:	2301      	movs	r3, #1
   11bea:	930b      	str	r3, [sp, #44]	; 0x2c
   11bec:	e7f4      	b.n	11bd8 <_dtoa_r+0x338>
   11bee:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
   11bf2:	464b      	mov	r3, r9
   11bf4:	f8cd 9020 	str.w	r9, [sp, #32]
   11bf8:	e77e      	b.n	11af8 <_dtoa_r+0x258>
   11bfa:	3101      	adds	r1, #1
   11bfc:	0052      	lsls	r2, r2, #1
   11bfe:	6071      	str	r1, [r6, #4]
   11c00:	e77e      	b.n	11b00 <_dtoa_r+0x260>
   11c02:	2702      	movs	r7, #2
   11c04:	e7ac      	b.n	11b60 <_dtoa_r+0x2c0>
   11c06:	07e1      	lsls	r1, r4, #31
   11c08:	d508      	bpl.n	11c1c <_dtoa_r+0x37c>
   11c0a:	3701      	adds	r7, #1
   11c0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11c10:	e9d6 2300 	ldrd	r2, r3, [r6]
   11c14:	f7fe fcd0 	bl	105b8 <__aeabi_dmul>
   11c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11c1c:	1064      	asrs	r4, r4, #1
   11c1e:	3608      	adds	r6, #8
   11c20:	e79f      	b.n	11b62 <_dtoa_r+0x2c2>
   11c22:	f000 80a5 	beq.w	11d70 <_dtoa_r+0x4d0>
   11c26:	f1ca 0400 	rsb	r4, sl, #0
   11c2a:	4ba3      	ldr	r3, [pc, #652]	; (11eb8 <_dtoa_r+0x618>)
   11c2c:	4ea3      	ldr	r6, [pc, #652]	; (11ebc <_dtoa_r+0x61c>)
   11c2e:	2702      	movs	r7, #2
   11c30:	f004 020f 	and.w	r2, r4, #15
   11c34:	1124      	asrs	r4, r4, #4
   11c36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11c3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   11c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c42:	f7fe fcb9 	bl	105b8 <__aeabi_dmul>
   11c46:	2300      	movs	r3, #0
   11c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11c4c:	2c00      	cmp	r4, #0
   11c4e:	f040 8084 	bne.w	11d5a <_dtoa_r+0x4ba>
   11c52:	2b00      	cmp	r3, #0
   11c54:	d18d      	bne.n	11b72 <_dtoa_r+0x2d2>
   11c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11c58:	2b00      	cmp	r3, #0
   11c5a:	f000 808b 	beq.w	11d74 <_dtoa_r+0x4d4>
   11c5e:	2200      	movs	r2, #0
   11c60:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11c64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   11c68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11c6c:	4b94      	ldr	r3, [pc, #592]	; (11ec0 <_dtoa_r+0x620>)
   11c6e:	f7fe ff15 	bl	10a9c <__aeabi_dcmplt>
   11c72:	2800      	cmp	r0, #0
   11c74:	d07e      	beq.n	11d74 <_dtoa_r+0x4d4>
   11c76:	9b08      	ldr	r3, [sp, #32]
   11c78:	2b00      	cmp	r3, #0
   11c7a:	d07b      	beq.n	11d74 <_dtoa_r+0x4d4>
   11c7c:	f1b9 0f00 	cmp.w	r9, #0
   11c80:	dd38      	ble.n	11cf4 <_dtoa_r+0x454>
   11c82:	f10a 38ff 	add.w	r8, sl, #4294967295
   11c86:	3701      	adds	r7, #1
   11c88:	464c      	mov	r4, r9
   11c8a:	2200      	movs	r2, #0
   11c8c:	4b8d      	ldr	r3, [pc, #564]	; (11ec4 <_dtoa_r+0x624>)
   11c8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11c92:	f7fe fc91 	bl	105b8 <__aeabi_dmul>
   11c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11c9a:	4638      	mov	r0, r7
   11c9c:	f7fe fc22 	bl	104e4 <__aeabi_i2d>
   11ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11ca4:	f7fe fc88 	bl	105b8 <__aeabi_dmul>
   11ca8:	2200      	movs	r2, #0
   11caa:	4b87      	ldr	r3, [pc, #540]	; (11ec8 <_dtoa_r+0x628>)
   11cac:	f7fe face 	bl	1024c <__adddf3>
   11cb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   11cb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11cb8:	9611      	str	r6, [sp, #68]	; 0x44
   11cba:	2c00      	cmp	r4, #0
   11cbc:	d15d      	bne.n	11d7a <_dtoa_r+0x4da>
   11cbe:	2200      	movs	r2, #0
   11cc0:	4b82      	ldr	r3, [pc, #520]	; (11ecc <_dtoa_r+0x62c>)
   11cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11cc6:	f7fe fabf 	bl	10248 <__aeabi_dsub>
   11cca:	4602      	mov	r2, r0
   11ccc:	460b      	mov	r3, r1
   11cce:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11cd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11cd4:	4633      	mov	r3, r6
   11cd6:	f7fe feff 	bl	10ad8 <__aeabi_dcmpgt>
   11cda:	2800      	cmp	r0, #0
   11cdc:	f040 8294 	bne.w	12208 <_dtoa_r+0x968>
   11ce0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11ce2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   11ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11cea:	f7fe fed7 	bl	10a9c <__aeabi_dcmplt>
   11cee:	2800      	cmp	r0, #0
   11cf0:	f040 8288 	bne.w	12204 <_dtoa_r+0x964>
   11cf4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   11cf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
   11cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11cfe:	2b00      	cmp	r3, #0
   11d00:	f2c0 814f 	blt.w	11fa2 <_dtoa_r+0x702>
   11d04:	f1ba 0f0e 	cmp.w	sl, #14
   11d08:	f300 814b 	bgt.w	11fa2 <_dtoa_r+0x702>
   11d0c:	4b6a      	ldr	r3, [pc, #424]	; (11eb8 <_dtoa_r+0x618>)
   11d0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   11d12:	e9d3 3400 	ldrd	r3, r4, [r3]
   11d16:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11d1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11d1c:	2b00      	cmp	r3, #0
   11d1e:	f280 80d9 	bge.w	11ed4 <_dtoa_r+0x634>
   11d22:	9b08      	ldr	r3, [sp, #32]
   11d24:	2b00      	cmp	r3, #0
   11d26:	f300 80d5 	bgt.w	11ed4 <_dtoa_r+0x634>
   11d2a:	f040 826a 	bne.w	12202 <_dtoa_r+0x962>
   11d2e:	2200      	movs	r2, #0
   11d30:	4b66      	ldr	r3, [pc, #408]	; (11ecc <_dtoa_r+0x62c>)
   11d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   11d36:	f7fe fc3f 	bl	105b8 <__aeabi_dmul>
   11d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11d3e:	f7fe fec1 	bl	10ac4 <__aeabi_dcmpge>
   11d42:	9c08      	ldr	r4, [sp, #32]
   11d44:	4626      	mov	r6, r4
   11d46:	2800      	cmp	r0, #0
   11d48:	f040 8240 	bne.w	121cc <_dtoa_r+0x92c>
   11d4c:	9f03      	ldr	r7, [sp, #12]
   11d4e:	2331      	movs	r3, #49	; 0x31
   11d50:	f10a 0a01 	add.w	sl, sl, #1
   11d54:	f807 3b01 	strb.w	r3, [r7], #1
   11d58:	e23c      	b.n	121d4 <_dtoa_r+0x934>
   11d5a:	07e2      	lsls	r2, r4, #31
   11d5c:	d505      	bpl.n	11d6a <_dtoa_r+0x4ca>
   11d5e:	3701      	adds	r7, #1
   11d60:	e9d6 2300 	ldrd	r2, r3, [r6]
   11d64:	f7fe fc28 	bl	105b8 <__aeabi_dmul>
   11d68:	2301      	movs	r3, #1
   11d6a:	1064      	asrs	r4, r4, #1
   11d6c:	3608      	adds	r6, #8
   11d6e:	e76d      	b.n	11c4c <_dtoa_r+0x3ac>
   11d70:	2702      	movs	r7, #2
   11d72:	e770      	b.n	11c56 <_dtoa_r+0x3b6>
   11d74:	46d0      	mov	r8, sl
   11d76:	9c08      	ldr	r4, [sp, #32]
   11d78:	e78f      	b.n	11c9a <_dtoa_r+0x3fa>
   11d7a:	9903      	ldr	r1, [sp, #12]
   11d7c:	4b4e      	ldr	r3, [pc, #312]	; (11eb8 <_dtoa_r+0x618>)
   11d7e:	4421      	add	r1, r4
   11d80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   11d84:	9112      	str	r1, [sp, #72]	; 0x48
   11d86:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11d88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   11d8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   11d90:	2900      	cmp	r1, #0
   11d92:	d046      	beq.n	11e22 <_dtoa_r+0x582>
   11d94:	2000      	movs	r0, #0
   11d96:	494e      	ldr	r1, [pc, #312]	; (11ed0 <_dtoa_r+0x630>)
   11d98:	f7fe fd38 	bl	1080c <__aeabi_ddiv>
   11d9c:	463b      	mov	r3, r7
   11d9e:	4632      	mov	r2, r6
   11da0:	f7fe fa52 	bl	10248 <__aeabi_dsub>
   11da4:	9f03      	ldr	r7, [sp, #12]
   11da6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11dae:	f7fe feb3 	bl	10b18 <__aeabi_d2iz>
   11db2:	4604      	mov	r4, r0
   11db4:	f7fe fb96 	bl	104e4 <__aeabi_i2d>
   11db8:	4602      	mov	r2, r0
   11dba:	460b      	mov	r3, r1
   11dbc:	3430      	adds	r4, #48	; 0x30
   11dbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11dc2:	f7fe fa41 	bl	10248 <__aeabi_dsub>
   11dc6:	4602      	mov	r2, r0
   11dc8:	460b      	mov	r3, r1
   11dca:	f807 4b01 	strb.w	r4, [r7], #1
   11dce:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11dd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11dd6:	f7fe fe61 	bl	10a9c <__aeabi_dcmplt>
   11dda:	2800      	cmp	r0, #0
   11ddc:	d164      	bne.n	11ea8 <_dtoa_r+0x608>
   11dde:	2000      	movs	r0, #0
   11de0:	4937      	ldr	r1, [pc, #220]	; (11ec0 <_dtoa_r+0x620>)
   11de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11de6:	f7fe fa2f 	bl	10248 <__aeabi_dsub>
   11dea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11dee:	f7fe fe55 	bl	10a9c <__aeabi_dcmplt>
   11df2:	2800      	cmp	r0, #0
   11df4:	f040 80b4 	bne.w	11f60 <_dtoa_r+0x6c0>
   11df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11dfa:	429f      	cmp	r7, r3
   11dfc:	f43f af7a 	beq.w	11cf4 <_dtoa_r+0x454>
   11e00:	2200      	movs	r2, #0
   11e02:	4b30      	ldr	r3, [pc, #192]	; (11ec4 <_dtoa_r+0x624>)
   11e04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11e08:	f7fe fbd6 	bl	105b8 <__aeabi_dmul>
   11e0c:	2200      	movs	r2, #0
   11e0e:	4b2d      	ldr	r3, [pc, #180]	; (11ec4 <_dtoa_r+0x624>)
   11e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11e18:	f7fe fbce 	bl	105b8 <__aeabi_dmul>
   11e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11e20:	e7c3      	b.n	11daa <_dtoa_r+0x50a>
   11e22:	4630      	mov	r0, r6
   11e24:	4639      	mov	r1, r7
   11e26:	f7fe fbc7 	bl	105b8 <__aeabi_dmul>
   11e2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e2c:	9c03      	ldr	r4, [sp, #12]
   11e2e:	9314      	str	r3, [sp, #80]	; 0x50
   11e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11e38:	f7fe fe6e 	bl	10b18 <__aeabi_d2iz>
   11e3c:	9015      	str	r0, [sp, #84]	; 0x54
   11e3e:	f7fe fb51 	bl	104e4 <__aeabi_i2d>
   11e42:	4602      	mov	r2, r0
   11e44:	460b      	mov	r3, r1
   11e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11e4a:	f7fe f9fd 	bl	10248 <__aeabi_dsub>
   11e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11e50:	4606      	mov	r6, r0
   11e52:	460f      	mov	r7, r1
   11e54:	3330      	adds	r3, #48	; 0x30
   11e56:	2200      	movs	r2, #0
   11e58:	f804 3b01 	strb.w	r3, [r4], #1
   11e5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e5e:	429c      	cmp	r4, r3
   11e60:	d124      	bne.n	11eac <_dtoa_r+0x60c>
   11e62:	4b1b      	ldr	r3, [pc, #108]	; (11ed0 <_dtoa_r+0x630>)
   11e64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11e68:	f7fe f9f0 	bl	1024c <__adddf3>
   11e6c:	4602      	mov	r2, r0
   11e6e:	460b      	mov	r3, r1
   11e70:	4630      	mov	r0, r6
   11e72:	4639      	mov	r1, r7
   11e74:	f7fe fe30 	bl	10ad8 <__aeabi_dcmpgt>
   11e78:	2800      	cmp	r0, #0
   11e7a:	d170      	bne.n	11f5e <_dtoa_r+0x6be>
   11e7c:	2000      	movs	r0, #0
   11e7e:	4914      	ldr	r1, [pc, #80]	; (11ed0 <_dtoa_r+0x630>)
   11e80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11e84:	f7fe f9e0 	bl	10248 <__aeabi_dsub>
   11e88:	4602      	mov	r2, r0
   11e8a:	460b      	mov	r3, r1
   11e8c:	4630      	mov	r0, r6
   11e8e:	4639      	mov	r1, r7
   11e90:	f7fe fe04 	bl	10a9c <__aeabi_dcmplt>
   11e94:	2800      	cmp	r0, #0
   11e96:	f43f af2d 	beq.w	11cf4 <_dtoa_r+0x454>
   11e9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
   11e9c:	1e7b      	subs	r3, r7, #1
   11e9e:	9314      	str	r3, [sp, #80]	; 0x50
   11ea0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   11ea4:	2b30      	cmp	r3, #48	; 0x30
   11ea6:	d0f8      	beq.n	11e9a <_dtoa_r+0x5fa>
   11ea8:	46c2      	mov	sl, r8
   11eaa:	e048      	b.n	11f3e <_dtoa_r+0x69e>
   11eac:	4b05      	ldr	r3, [pc, #20]	; (11ec4 <_dtoa_r+0x624>)
   11eae:	f7fe fb83 	bl	105b8 <__aeabi_dmul>
   11eb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11eb6:	e7bd      	b.n	11e34 <_dtoa_r+0x594>
   11eb8:	00038a40 	.word	0x00038a40
   11ebc:	00038a18 	.word	0x00038a18
   11ec0:	3ff00000 	.word	0x3ff00000
   11ec4:	40240000 	.word	0x40240000
   11ec8:	401c0000 	.word	0x401c0000
   11ecc:	40140000 	.word	0x40140000
   11ed0:	3fe00000 	.word	0x3fe00000
   11ed4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   11ed8:	9f03      	ldr	r7, [sp, #12]
   11eda:	4640      	mov	r0, r8
   11edc:	4649      	mov	r1, r9
   11ede:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11ee2:	f7fe fc93 	bl	1080c <__aeabi_ddiv>
   11ee6:	f7fe fe17 	bl	10b18 <__aeabi_d2iz>
   11eea:	4604      	mov	r4, r0
   11eec:	f7fe fafa 	bl	104e4 <__aeabi_i2d>
   11ef0:	f104 0630 	add.w	r6, r4, #48	; 0x30
   11ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11ef8:	f7fe fb5e 	bl	105b8 <__aeabi_dmul>
   11efc:	460b      	mov	r3, r1
   11efe:	4602      	mov	r2, r0
   11f00:	4649      	mov	r1, r9
   11f02:	4640      	mov	r0, r8
   11f04:	f7fe f9a0 	bl	10248 <__aeabi_dsub>
   11f08:	f807 6b01 	strb.w	r6, [r7], #1
   11f0c:	9e03      	ldr	r6, [sp, #12]
   11f0e:	9b08      	ldr	r3, [sp, #32]
   11f10:	1bbe      	subs	r6, r7, r6
   11f12:	42b3      	cmp	r3, r6
   11f14:	d138      	bne.n	11f88 <_dtoa_r+0x6e8>
   11f16:	4602      	mov	r2, r0
   11f18:	460b      	mov	r3, r1
   11f1a:	f7fe f997 	bl	1024c <__adddf3>
   11f1e:	4680      	mov	r8, r0
   11f20:	4689      	mov	r9, r1
   11f22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11f26:	f7fe fdd7 	bl	10ad8 <__aeabi_dcmpgt>
   11f2a:	bb58      	cbnz	r0, 11f84 <_dtoa_r+0x6e4>
   11f2c:	4640      	mov	r0, r8
   11f2e:	4649      	mov	r1, r9
   11f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11f34:	f7fe fda8 	bl	10a88 <__aeabi_dcmpeq>
   11f38:	b108      	cbz	r0, 11f3e <_dtoa_r+0x69e>
   11f3a:	07e1      	lsls	r1, r4, #31
   11f3c:	d422      	bmi.n	11f84 <_dtoa_r+0x6e4>
   11f3e:	4628      	mov	r0, r5
   11f40:	4659      	mov	r1, fp
   11f42:	f025 fe8f 	bl	37c64 <_Bfree>
   11f46:	2300      	movs	r3, #0
   11f48:	f10a 0001 	add.w	r0, sl, #1
   11f4c:	703b      	strb	r3, [r7, #0]
   11f4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11f50:	6018      	str	r0, [r3, #0]
   11f52:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11f54:	2b00      	cmp	r3, #0
   11f56:	f43f acea 	beq.w	1192e <_dtoa_r+0x8e>
   11f5a:	601f      	str	r7, [r3, #0]
   11f5c:	e4e7      	b.n	1192e <_dtoa_r+0x8e>
   11f5e:	4627      	mov	r7, r4
   11f60:	463b      	mov	r3, r7
   11f62:	461f      	mov	r7, r3
   11f64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   11f68:	2a39      	cmp	r2, #57	; 0x39
   11f6a:	d107      	bne.n	11f7c <_dtoa_r+0x6dc>
   11f6c:	9a03      	ldr	r2, [sp, #12]
   11f6e:	429a      	cmp	r2, r3
   11f70:	d1f7      	bne.n	11f62 <_dtoa_r+0x6c2>
   11f72:	2230      	movs	r2, #48	; 0x30
   11f74:	9903      	ldr	r1, [sp, #12]
   11f76:	f108 0801 	add.w	r8, r8, #1
   11f7a:	700a      	strb	r2, [r1, #0]
   11f7c:	781a      	ldrb	r2, [r3, #0]
   11f7e:	3201      	adds	r2, #1
   11f80:	701a      	strb	r2, [r3, #0]
   11f82:	e791      	b.n	11ea8 <_dtoa_r+0x608>
   11f84:	46d0      	mov	r8, sl
   11f86:	e7eb      	b.n	11f60 <_dtoa_r+0x6c0>
   11f88:	2200      	movs	r2, #0
   11f8a:	4ba1      	ldr	r3, [pc, #644]	; (12210 <_dtoa_r+0x970>)
   11f8c:	f7fe fb14 	bl	105b8 <__aeabi_dmul>
   11f90:	2200      	movs	r2, #0
   11f92:	2300      	movs	r3, #0
   11f94:	4680      	mov	r8, r0
   11f96:	4689      	mov	r9, r1
   11f98:	f7fe fd76 	bl	10a88 <__aeabi_dcmpeq>
   11f9c:	2800      	cmp	r0, #0
   11f9e:	d09c      	beq.n	11eda <_dtoa_r+0x63a>
   11fa0:	e7cd      	b.n	11f3e <_dtoa_r+0x69e>
   11fa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11fa4:	2a00      	cmp	r2, #0
   11fa6:	f000 80cc 	beq.w	12142 <_dtoa_r+0x8a2>
   11faa:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11fac:	2a01      	cmp	r2, #1
   11fae:	f300 80af 	bgt.w	12110 <_dtoa_r+0x870>
   11fb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11fb4:	2a00      	cmp	r2, #0
   11fb6:	f000 80a7 	beq.w	12108 <_dtoa_r+0x868>
   11fba:	f203 4333 	addw	r3, r3, #1075	; 0x433
   11fbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11fc0:	9f06      	ldr	r7, [sp, #24]
   11fc2:	9a06      	ldr	r2, [sp, #24]
   11fc4:	2101      	movs	r1, #1
   11fc6:	4628      	mov	r0, r5
   11fc8:	441a      	add	r2, r3
   11fca:	9206      	str	r2, [sp, #24]
   11fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11fce:	441a      	add	r2, r3
   11fd0:	9209      	str	r2, [sp, #36]	; 0x24
   11fd2:	f025 feeb 	bl	37dac <__i2b>
   11fd6:	4606      	mov	r6, r0
   11fd8:	2f00      	cmp	r7, #0
   11fda:	dd0c      	ble.n	11ff6 <_dtoa_r+0x756>
   11fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11fde:	2b00      	cmp	r3, #0
   11fe0:	dd09      	ble.n	11ff6 <_dtoa_r+0x756>
   11fe2:	42bb      	cmp	r3, r7
   11fe4:	9a06      	ldr	r2, [sp, #24]
   11fe6:	bfa8      	it	ge
   11fe8:	463b      	movge	r3, r7
   11fea:	1ad2      	subs	r2, r2, r3
   11fec:	1aff      	subs	r7, r7, r3
   11fee:	9206      	str	r2, [sp, #24]
   11ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11ff2:	1ad3      	subs	r3, r2, r3
   11ff4:	9309      	str	r3, [sp, #36]	; 0x24
   11ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ff8:	b1f3      	cbz	r3, 12038 <_dtoa_r+0x798>
   11ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ffc:	2b00      	cmp	r3, #0
   11ffe:	f000 80a4 	beq.w	1214a <_dtoa_r+0x8aa>
   12002:	2c00      	cmp	r4, #0
   12004:	dd10      	ble.n	12028 <_dtoa_r+0x788>
   12006:	4631      	mov	r1, r6
   12008:	4622      	mov	r2, r4
   1200a:	4628      	mov	r0, r5
   1200c:	f01d f9c4 	bl	2f398 <__pow5mult>
   12010:	465a      	mov	r2, fp
   12012:	4601      	mov	r1, r0
   12014:	4606      	mov	r6, r0
   12016:	4628      	mov	r0, r5
   12018:	f025 fed1 	bl	37dbe <__multiply>
   1201c:	4680      	mov	r8, r0
   1201e:	4659      	mov	r1, fp
   12020:	4628      	mov	r0, r5
   12022:	46c3      	mov	fp, r8
   12024:	f025 fe1e 	bl	37c64 <_Bfree>
   12028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1202a:	1b1a      	subs	r2, r3, r4
   1202c:	d004      	beq.n	12038 <_dtoa_r+0x798>
   1202e:	4659      	mov	r1, fp
   12030:	4628      	mov	r0, r5
   12032:	f01d f9b1 	bl	2f398 <__pow5mult>
   12036:	4683      	mov	fp, r0
   12038:	2101      	movs	r1, #1
   1203a:	4628      	mov	r0, r5
   1203c:	f025 feb6 	bl	37dac <__i2b>
   12040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12042:	4604      	mov	r4, r0
   12044:	2b00      	cmp	r3, #0
   12046:	f340 8082 	ble.w	1214e <_dtoa_r+0x8ae>
   1204a:	461a      	mov	r2, r3
   1204c:	4601      	mov	r1, r0
   1204e:	4628      	mov	r0, r5
   12050:	f01d f9a2 	bl	2f398 <__pow5mult>
   12054:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12056:	4604      	mov	r4, r0
   12058:	2b01      	cmp	r3, #1
   1205a:	dd7b      	ble.n	12154 <_dtoa_r+0x8b4>
   1205c:	f04f 0800 	mov.w	r8, #0
   12060:	6923      	ldr	r3, [r4, #16]
   12062:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   12066:	6918      	ldr	r0, [r3, #16]
   12068:	f025 fe52 	bl	37d10 <__hi0bits>
   1206c:	f1c0 0020 	rsb	r0, r0, #32
   12070:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12072:	4418      	add	r0, r3
   12074:	f010 001f 	ands.w	r0, r0, #31
   12078:	f000 808d 	beq.w	12196 <_dtoa_r+0x8f6>
   1207c:	f1c0 0320 	rsb	r3, r0, #32
   12080:	2b04      	cmp	r3, #4
   12082:	f340 8086 	ble.w	12192 <_dtoa_r+0x8f2>
   12086:	f1c0 001c 	rsb	r0, r0, #28
   1208a:	9b06      	ldr	r3, [sp, #24]
   1208c:	4407      	add	r7, r0
   1208e:	4403      	add	r3, r0
   12090:	9306      	str	r3, [sp, #24]
   12092:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12094:	4403      	add	r3, r0
   12096:	9309      	str	r3, [sp, #36]	; 0x24
   12098:	9b06      	ldr	r3, [sp, #24]
   1209a:	2b00      	cmp	r3, #0
   1209c:	dd05      	ble.n	120aa <_dtoa_r+0x80a>
   1209e:	4659      	mov	r1, fp
   120a0:	461a      	mov	r2, r3
   120a2:	4628      	mov	r0, r5
   120a4:	f025 ff26 	bl	37ef4 <__lshift>
   120a8:	4683      	mov	fp, r0
   120aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   120ac:	2b00      	cmp	r3, #0
   120ae:	dd05      	ble.n	120bc <_dtoa_r+0x81c>
   120b0:	4621      	mov	r1, r4
   120b2:	461a      	mov	r2, r3
   120b4:	4628      	mov	r0, r5
   120b6:	f025 ff1d 	bl	37ef4 <__lshift>
   120ba:	4604      	mov	r4, r0
   120bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120be:	2b00      	cmp	r3, #0
   120c0:	d06b      	beq.n	1219a <_dtoa_r+0x8fa>
   120c2:	4621      	mov	r1, r4
   120c4:	4658      	mov	r0, fp
   120c6:	f025 ff74 	bl	37fb2 <__mcmp>
   120ca:	2800      	cmp	r0, #0
   120cc:	da65      	bge.n	1219a <_dtoa_r+0x8fa>
   120ce:	2300      	movs	r3, #0
   120d0:	4659      	mov	r1, fp
   120d2:	220a      	movs	r2, #10
   120d4:	4628      	mov	r0, r5
   120d6:	f025 fddc 	bl	37c92 <__multadd>
   120da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   120dc:	f10a 3aff 	add.w	sl, sl, #4294967295
   120e0:	4683      	mov	fp, r0
   120e2:	2b00      	cmp	r3, #0
   120e4:	f000 818b 	beq.w	123fe <_dtoa_r+0xb5e>
   120e8:	4631      	mov	r1, r6
   120ea:	2300      	movs	r3, #0
   120ec:	220a      	movs	r2, #10
   120ee:	4628      	mov	r0, r5
   120f0:	f025 fdcf 	bl	37c92 <__multadd>
   120f4:	f1b9 0f00 	cmp.w	r9, #0
   120f8:	4606      	mov	r6, r0
   120fa:	f300 8091 	bgt.w	12220 <_dtoa_r+0x980>
   120fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12100:	2b02      	cmp	r3, #2
   12102:	f340 808d 	ble.w	12220 <_dtoa_r+0x980>
   12106:	e050      	b.n	121aa <_dtoa_r+0x90a>
   12108:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1210a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1210e:	e756      	b.n	11fbe <_dtoa_r+0x71e>
   12110:	9b08      	ldr	r3, [sp, #32]
   12112:	1e5c      	subs	r4, r3, #1
   12114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12116:	42a3      	cmp	r3, r4
   12118:	bfb7      	itett	lt
   1211a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
   1211c:	1b1c      	subge	r4, r3, r4
   1211e:	940a      	strlt	r4, [sp, #40]	; 0x28
   12120:	1ae2      	sublt	r2, r4, r3
   12122:	bfbf      	itttt	lt
   12124:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   12126:	2400      	movlt	r4, #0
   12128:	189b      	addlt	r3, r3, r2
   1212a:	930e      	strlt	r3, [sp, #56]	; 0x38
   1212c:	9b08      	ldr	r3, [sp, #32]
   1212e:	2b00      	cmp	r3, #0
   12130:	bfbb      	ittet	lt
   12132:	9b06      	ldrlt	r3, [sp, #24]
   12134:	9a08      	ldrlt	r2, [sp, #32]
   12136:	9f06      	ldrge	r7, [sp, #24]
   12138:	1a9f      	sublt	r7, r3, r2
   1213a:	bfac      	ite	ge
   1213c:	9b08      	ldrge	r3, [sp, #32]
   1213e:	2300      	movlt	r3, #0
   12140:	e73f      	b.n	11fc2 <_dtoa_r+0x722>
   12142:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12144:	9f06      	ldr	r7, [sp, #24]
   12146:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12148:	e746      	b.n	11fd8 <_dtoa_r+0x738>
   1214a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1214c:	e76f      	b.n	1202e <_dtoa_r+0x78e>
   1214e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12150:	2b01      	cmp	r3, #1
   12152:	dc19      	bgt.n	12188 <_dtoa_r+0x8e8>
   12154:	9b04      	ldr	r3, [sp, #16]
   12156:	b9bb      	cbnz	r3, 12188 <_dtoa_r+0x8e8>
   12158:	9b05      	ldr	r3, [sp, #20]
   1215a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1215e:	b99b      	cbnz	r3, 12188 <_dtoa_r+0x8e8>
   12160:	9b05      	ldr	r3, [sp, #20]
   12162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12166:	0d1b      	lsrs	r3, r3, #20
   12168:	051b      	lsls	r3, r3, #20
   1216a:	b183      	cbz	r3, 1218e <_dtoa_r+0x8ee>
   1216c:	9b06      	ldr	r3, [sp, #24]
   1216e:	f04f 0801 	mov.w	r8, #1
   12172:	3301      	adds	r3, #1
   12174:	9306      	str	r3, [sp, #24]
   12176:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12178:	3301      	adds	r3, #1
   1217a:	9309      	str	r3, [sp, #36]	; 0x24
   1217c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1217e:	2b00      	cmp	r3, #0
   12180:	f47f af6e 	bne.w	12060 <_dtoa_r+0x7c0>
   12184:	2001      	movs	r0, #1
   12186:	e773      	b.n	12070 <_dtoa_r+0x7d0>
   12188:	f04f 0800 	mov.w	r8, #0
   1218c:	e7f6      	b.n	1217c <_dtoa_r+0x8dc>
   1218e:	4698      	mov	r8, r3
   12190:	e7f4      	b.n	1217c <_dtoa_r+0x8dc>
   12192:	d081      	beq.n	12098 <_dtoa_r+0x7f8>
   12194:	4618      	mov	r0, r3
   12196:	301c      	adds	r0, #28
   12198:	e777      	b.n	1208a <_dtoa_r+0x7ea>
   1219a:	9b08      	ldr	r3, [sp, #32]
   1219c:	2b00      	cmp	r3, #0
   1219e:	dc39      	bgt.n	12214 <_dtoa_r+0x974>
   121a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   121a2:	2b02      	cmp	r3, #2
   121a4:	dd36      	ble.n	12214 <_dtoa_r+0x974>
   121a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
   121aa:	f1b9 0f00 	cmp.w	r9, #0
   121ae:	d10d      	bne.n	121cc <_dtoa_r+0x92c>
   121b0:	4621      	mov	r1, r4
   121b2:	464b      	mov	r3, r9
   121b4:	2205      	movs	r2, #5
   121b6:	4628      	mov	r0, r5
   121b8:	f025 fd6b 	bl	37c92 <__multadd>
   121bc:	4601      	mov	r1, r0
   121be:	4604      	mov	r4, r0
   121c0:	4658      	mov	r0, fp
   121c2:	f025 fef6 	bl	37fb2 <__mcmp>
   121c6:	2800      	cmp	r0, #0
   121c8:	f73f adc0 	bgt.w	11d4c <_dtoa_r+0x4ac>
   121cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   121ce:	9f03      	ldr	r7, [sp, #12]
   121d0:	ea6f 0a03 	mvn.w	sl, r3
   121d4:	f04f 0800 	mov.w	r8, #0
   121d8:	4621      	mov	r1, r4
   121da:	4628      	mov	r0, r5
   121dc:	f025 fd42 	bl	37c64 <_Bfree>
   121e0:	2e00      	cmp	r6, #0
   121e2:	f43f aeac 	beq.w	11f3e <_dtoa_r+0x69e>
   121e6:	f1b8 0f00 	cmp.w	r8, #0
   121ea:	d005      	beq.n	121f8 <_dtoa_r+0x958>
   121ec:	45b0      	cmp	r8, r6
   121ee:	d003      	beq.n	121f8 <_dtoa_r+0x958>
   121f0:	4641      	mov	r1, r8
   121f2:	4628      	mov	r0, r5
   121f4:	f025 fd36 	bl	37c64 <_Bfree>
   121f8:	4631      	mov	r1, r6
   121fa:	4628      	mov	r0, r5
   121fc:	f025 fd32 	bl	37c64 <_Bfree>
   12200:	e69d      	b.n	11f3e <_dtoa_r+0x69e>
   12202:	2400      	movs	r4, #0
   12204:	4626      	mov	r6, r4
   12206:	e7e1      	b.n	121cc <_dtoa_r+0x92c>
   12208:	46c2      	mov	sl, r8
   1220a:	4626      	mov	r6, r4
   1220c:	e59e      	b.n	11d4c <_dtoa_r+0x4ac>
   1220e:	bf00      	nop
   12210:	40240000 	.word	0x40240000
   12214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12216:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1221a:	2b00      	cmp	r3, #0
   1221c:	f000 80f6 	beq.w	1240c <_dtoa_r+0xb6c>
   12220:	2f00      	cmp	r7, #0
   12222:	dd05      	ble.n	12230 <_dtoa_r+0x990>
   12224:	4631      	mov	r1, r6
   12226:	463a      	mov	r2, r7
   12228:	4628      	mov	r0, r5
   1222a:	f025 fe63 	bl	37ef4 <__lshift>
   1222e:	4606      	mov	r6, r0
   12230:	f1b8 0f00 	cmp.w	r8, #0
   12234:	d055      	beq.n	122e2 <_dtoa_r+0xa42>
   12236:	6871      	ldr	r1, [r6, #4]
   12238:	4628      	mov	r0, r5
   1223a:	f025 fcdf 	bl	37bfc <_Balloc>
   1223e:	6932      	ldr	r2, [r6, #16]
   12240:	4607      	mov	r7, r0
   12242:	f106 010c 	add.w	r1, r6, #12
   12246:	3202      	adds	r2, #2
   12248:	300c      	adds	r0, #12
   1224a:	0092      	lsls	r2, r2, #2
   1224c:	f025 fa99 	bl	37782 <memcpy>
   12250:	2201      	movs	r2, #1
   12252:	4639      	mov	r1, r7
   12254:	4628      	mov	r0, r5
   12256:	f025 fe4d 	bl	37ef4 <__lshift>
   1225a:	9b03      	ldr	r3, [sp, #12]
   1225c:	46b0      	mov	r8, r6
   1225e:	4606      	mov	r6, r0
   12260:	3301      	adds	r3, #1
   12262:	9308      	str	r3, [sp, #32]
   12264:	9b03      	ldr	r3, [sp, #12]
   12266:	444b      	add	r3, r9
   12268:	930a      	str	r3, [sp, #40]	; 0x28
   1226a:	9b04      	ldr	r3, [sp, #16]
   1226c:	f003 0301 	and.w	r3, r3, #1
   12270:	9309      	str	r3, [sp, #36]	; 0x24
   12272:	9b08      	ldr	r3, [sp, #32]
   12274:	4621      	mov	r1, r4
   12276:	4658      	mov	r0, fp
   12278:	3b01      	subs	r3, #1
   1227a:	9304      	str	r3, [sp, #16]
   1227c:	f025 fc1d 	bl	37aba <quorem>
   12280:	4603      	mov	r3, r0
   12282:	4641      	mov	r1, r8
   12284:	9006      	str	r0, [sp, #24]
   12286:	4658      	mov	r0, fp
   12288:	3330      	adds	r3, #48	; 0x30
   1228a:	930b      	str	r3, [sp, #44]	; 0x2c
   1228c:	f025 fe91 	bl	37fb2 <__mcmp>
   12290:	4632      	mov	r2, r6
   12292:	4681      	mov	r9, r0
   12294:	4621      	mov	r1, r4
   12296:	4628      	mov	r0, r5
   12298:	f025 fea6 	bl	37fe8 <__mdiff>
   1229c:	68c2      	ldr	r2, [r0, #12]
   1229e:	4607      	mov	r7, r0
   122a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   122a2:	bb02      	cbnz	r2, 122e6 <_dtoa_r+0xa46>
   122a4:	4601      	mov	r1, r0
   122a6:	4658      	mov	r0, fp
   122a8:	f025 fe83 	bl	37fb2 <__mcmp>
   122ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   122ae:	4602      	mov	r2, r0
   122b0:	4639      	mov	r1, r7
   122b2:	4628      	mov	r0, r5
   122b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   122b8:	f025 fcd4 	bl	37c64 <_Bfree>
   122bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   122be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   122c0:	9f08      	ldr	r7, [sp, #32]
   122c2:	ea43 0102 	orr.w	r1, r3, r2
   122c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122c8:	430b      	orrs	r3, r1
   122ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   122cc:	d10d      	bne.n	122ea <_dtoa_r+0xa4a>
   122ce:	2b39      	cmp	r3, #57	; 0x39
   122d0:	d029      	beq.n	12326 <_dtoa_r+0xa86>
   122d2:	f1b9 0f00 	cmp.w	r9, #0
   122d6:	dd01      	ble.n	122dc <_dtoa_r+0xa3c>
   122d8:	9b06      	ldr	r3, [sp, #24]
   122da:	3331      	adds	r3, #49	; 0x31
   122dc:	9a04      	ldr	r2, [sp, #16]
   122de:	7013      	strb	r3, [r2, #0]
   122e0:	e77a      	b.n	121d8 <_dtoa_r+0x938>
   122e2:	4630      	mov	r0, r6
   122e4:	e7b9      	b.n	1225a <_dtoa_r+0x9ba>
   122e6:	2201      	movs	r2, #1
   122e8:	e7e2      	b.n	122b0 <_dtoa_r+0xa10>
   122ea:	f1b9 0f00 	cmp.w	r9, #0
   122ee:	db06      	blt.n	122fe <_dtoa_r+0xa5e>
   122f0:	9922      	ldr	r1, [sp, #136]	; 0x88
   122f2:	ea41 0909 	orr.w	r9, r1, r9
   122f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   122f8:	ea59 0101 	orrs.w	r1, r9, r1
   122fc:	d120      	bne.n	12340 <_dtoa_r+0xaa0>
   122fe:	2a00      	cmp	r2, #0
   12300:	ddec      	ble.n	122dc <_dtoa_r+0xa3c>
   12302:	4659      	mov	r1, fp
   12304:	2201      	movs	r2, #1
   12306:	4628      	mov	r0, r5
   12308:	9308      	str	r3, [sp, #32]
   1230a:	f025 fdf3 	bl	37ef4 <__lshift>
   1230e:	4621      	mov	r1, r4
   12310:	4683      	mov	fp, r0
   12312:	f025 fe4e 	bl	37fb2 <__mcmp>
   12316:	2800      	cmp	r0, #0
   12318:	9b08      	ldr	r3, [sp, #32]
   1231a:	dc02      	bgt.n	12322 <_dtoa_r+0xa82>
   1231c:	d1de      	bne.n	122dc <_dtoa_r+0xa3c>
   1231e:	07da      	lsls	r2, r3, #31
   12320:	d5dc      	bpl.n	122dc <_dtoa_r+0xa3c>
   12322:	2b39      	cmp	r3, #57	; 0x39
   12324:	d1d8      	bne.n	122d8 <_dtoa_r+0xa38>
   12326:	2339      	movs	r3, #57	; 0x39
   12328:	9a04      	ldr	r2, [sp, #16]
   1232a:	7013      	strb	r3, [r2, #0]
   1232c:	463b      	mov	r3, r7
   1232e:	461f      	mov	r7, r3
   12330:	3b01      	subs	r3, #1
   12332:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   12336:	2a39      	cmp	r2, #57	; 0x39
   12338:	d050      	beq.n	123dc <_dtoa_r+0xb3c>
   1233a:	3201      	adds	r2, #1
   1233c:	701a      	strb	r2, [r3, #0]
   1233e:	e74b      	b.n	121d8 <_dtoa_r+0x938>
   12340:	2a00      	cmp	r2, #0
   12342:	dd03      	ble.n	1234c <_dtoa_r+0xaac>
   12344:	2b39      	cmp	r3, #57	; 0x39
   12346:	d0ee      	beq.n	12326 <_dtoa_r+0xa86>
   12348:	3301      	adds	r3, #1
   1234a:	e7c7      	b.n	122dc <_dtoa_r+0xa3c>
   1234c:	9a08      	ldr	r2, [sp, #32]
   1234e:	990a      	ldr	r1, [sp, #40]	; 0x28
   12350:	f802 3c01 	strb.w	r3, [r2, #-1]
   12354:	428a      	cmp	r2, r1
   12356:	d02a      	beq.n	123ae <_dtoa_r+0xb0e>
   12358:	4659      	mov	r1, fp
   1235a:	2300      	movs	r3, #0
   1235c:	220a      	movs	r2, #10
   1235e:	4628      	mov	r0, r5
   12360:	f025 fc97 	bl	37c92 <__multadd>
   12364:	45b0      	cmp	r8, r6
   12366:	4683      	mov	fp, r0
   12368:	f04f 0300 	mov.w	r3, #0
   1236c:	f04f 020a 	mov.w	r2, #10
   12370:	4641      	mov	r1, r8
   12372:	4628      	mov	r0, r5
   12374:	d107      	bne.n	12386 <_dtoa_r+0xae6>
   12376:	f025 fc8c 	bl	37c92 <__multadd>
   1237a:	4680      	mov	r8, r0
   1237c:	4606      	mov	r6, r0
   1237e:	9b08      	ldr	r3, [sp, #32]
   12380:	3301      	adds	r3, #1
   12382:	9308      	str	r3, [sp, #32]
   12384:	e775      	b.n	12272 <_dtoa_r+0x9d2>
   12386:	f025 fc84 	bl	37c92 <__multadd>
   1238a:	4631      	mov	r1, r6
   1238c:	4680      	mov	r8, r0
   1238e:	2300      	movs	r3, #0
   12390:	220a      	movs	r2, #10
   12392:	4628      	mov	r0, r5
   12394:	f025 fc7d 	bl	37c92 <__multadd>
   12398:	4606      	mov	r6, r0
   1239a:	e7f0      	b.n	1237e <_dtoa_r+0xade>
   1239c:	f1b9 0f00 	cmp.w	r9, #0
   123a0:	9a03      	ldr	r2, [sp, #12]
   123a2:	f04f 0800 	mov.w	r8, #0
   123a6:	bfcc      	ite	gt
   123a8:	464f      	movgt	r7, r9
   123aa:	2701      	movle	r7, #1
   123ac:	4417      	add	r7, r2
   123ae:	4659      	mov	r1, fp
   123b0:	2201      	movs	r2, #1
   123b2:	4628      	mov	r0, r5
   123b4:	9308      	str	r3, [sp, #32]
   123b6:	f025 fd9d 	bl	37ef4 <__lshift>
   123ba:	4621      	mov	r1, r4
   123bc:	4683      	mov	fp, r0
   123be:	f025 fdf8 	bl	37fb2 <__mcmp>
   123c2:	2800      	cmp	r0, #0
   123c4:	dcb2      	bgt.n	1232c <_dtoa_r+0xa8c>
   123c6:	d102      	bne.n	123ce <_dtoa_r+0xb2e>
   123c8:	9b08      	ldr	r3, [sp, #32]
   123ca:	07db      	lsls	r3, r3, #31
   123cc:	d4ae      	bmi.n	1232c <_dtoa_r+0xa8c>
   123ce:	463b      	mov	r3, r7
   123d0:	461f      	mov	r7, r3
   123d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   123d6:	2a30      	cmp	r2, #48	; 0x30
   123d8:	d0fa      	beq.n	123d0 <_dtoa_r+0xb30>
   123da:	e6fd      	b.n	121d8 <_dtoa_r+0x938>
   123dc:	9a03      	ldr	r2, [sp, #12]
   123de:	429a      	cmp	r2, r3
   123e0:	d1a5      	bne.n	1232e <_dtoa_r+0xa8e>
   123e2:	f10a 0a01 	add.w	sl, sl, #1
   123e6:	2331      	movs	r3, #49	; 0x31
   123e8:	e779      	b.n	122de <_dtoa_r+0xa3e>
   123ea:	4b13      	ldr	r3, [pc, #76]	; (12438 <_dtoa_r+0xb98>)
   123ec:	f7ff babe 	b.w	1196c <_dtoa_r+0xcc>
   123f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   123f2:	2b00      	cmp	r3, #0
   123f4:	f47f aa96 	bne.w	11924 <_dtoa_r+0x84>
   123f8:	4b10      	ldr	r3, [pc, #64]	; (1243c <_dtoa_r+0xb9c>)
   123fa:	f7ff bab7 	b.w	1196c <_dtoa_r+0xcc>
   123fe:	f1b9 0f00 	cmp.w	r9, #0
   12402:	dc03      	bgt.n	1240c <_dtoa_r+0xb6c>
   12404:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12406:	2b02      	cmp	r3, #2
   12408:	f73f aecf 	bgt.w	121aa <_dtoa_r+0x90a>
   1240c:	9f03      	ldr	r7, [sp, #12]
   1240e:	4621      	mov	r1, r4
   12410:	4658      	mov	r0, fp
   12412:	f025 fb52 	bl	37aba <quorem>
   12416:	9a03      	ldr	r2, [sp, #12]
   12418:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1241c:	f807 3b01 	strb.w	r3, [r7], #1
   12420:	1aba      	subs	r2, r7, r2
   12422:	4591      	cmp	r9, r2
   12424:	ddba      	ble.n	1239c <_dtoa_r+0xafc>
   12426:	4659      	mov	r1, fp
   12428:	2300      	movs	r3, #0
   1242a:	220a      	movs	r2, #10
   1242c:	4628      	mov	r0, r5
   1242e:	f025 fc30 	bl	37c92 <__multadd>
   12432:	4683      	mov	fp, r0
   12434:	e7eb      	b.n	1240e <_dtoa_r+0xb6e>
   12436:	bf00      	nop
   12438:	00040e81 	.word	0x00040e81
   1243c:	000416c1 	.word	0x000416c1

00012440 <scan_connecting_error>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   12440:	4904      	ldr	r1, [pc, #16]	; (12454 <scan_connecting_error+0x14>)
   12442:	4b05      	ldr	r3, [pc, #20]	; (12458 <scan_connecting_error+0x18>)
	}
}

void scan_connecting_error(struct bt_scan_device_info *device_info)
{
	LOG_ERR("Connection to peer failed!");
   12444:	4805      	ldr	r0, [pc, #20]	; (1245c <scan_connecting_error+0x1c>)
   12446:	1ac9      	subs	r1, r1, r3
   12448:	08c9      	lsrs	r1, r1, #3
   1244a:	0189      	lsls	r1, r1, #6
   1244c:	f041 0101 	orr.w	r1, r1, #1
   12450:	f01d bf42 	b.w	302d8 <log_0>
   12454:	00038858 	.word	0x00038858
   12458:	000387c0 	.word	0x000387c0
   1245c:	000396ea 	.word	0x000396ea

00012460 <bt_parse_cb>:
bool bt_parse_cb(struct bt_data *data, void *user_data) {
   12460:	b508      	push	{r3, lr}
   12462:	4a06      	ldr	r2, [pc, #24]	; (1247c <bt_parse_cb+0x1c>)
   12464:	4b06      	ldr	r3, [pc, #24]	; (12480 <bt_parse_cb+0x20>)
	LOG_INF("Parsed adv -- Type: %d", data->type);
   12466:	7801      	ldrb	r1, [r0, #0]
   12468:	1ad2      	subs	r2, r2, r3
   1246a:	08d2      	lsrs	r2, r2, #3
   1246c:	0192      	lsls	r2, r2, #6
   1246e:	4805      	ldr	r0, [pc, #20]	; (12484 <bt_parse_cb+0x24>)
   12470:	f042 0203 	orr.w	r2, r2, #3
   12474:	f01d ff3d 	bl	302f2 <log_1>
}
   12478:	2001      	movs	r0, #1
   1247a:	bd08      	pop	{r3, pc}
   1247c:	00038858 	.word	0x00038858
   12480:	000387c0 	.word	0x000387c0
   12484:	00039705 	.word	0x00039705

00012488 <scan_filter_no_match>:
}

void scan_filter_no_match(struct bt_scan_device_info *device_info,bool connectable) {

	
	bt_data_parse(device_info->adv_data, bt_parse_cb_nomatch, (void *)device_info->recv_info->addr);
   12488:	6803      	ldr	r3, [r0, #0]
   1248a:	4902      	ldr	r1, [pc, #8]	; (12494 <scan_filter_no_match+0xc>)
   1248c:	681a      	ldr	r2, [r3, #0]
   1248e:	6880      	ldr	r0, [r0, #8]
   12490:	f008 b87a 	b.w	1a588 <bt_data_parse>
   12494:	00012511 	.word	0x00012511

00012498 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   12498:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1249a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1249c:	b08a      	sub	sp, #40	; 0x28
   1249e:	4604      	mov	r4, r0
   124a0:	460e      	mov	r6, r1
   124a2:	ad07      	add	r5, sp, #28
   124a4:	2b03      	cmp	r3, #3
   124a6:	d820      	bhi.n	124ea <bt_addr_le_to_str.constprop.0+0x52>
   124a8:	e8df f003 	tbb	[pc, r3]
   124ac:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   124b0:	4911      	ldr	r1, [pc, #68]	; (124f8 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   124b2:	4628      	mov	r0, r5
   124b4:	f025 faaa 	bl	37a0c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   124b8:	7863      	ldrb	r3, [r4, #1]
   124ba:	211e      	movs	r1, #30
   124bc:	9304      	str	r3, [sp, #16]
   124be:	78a3      	ldrb	r3, [r4, #2]
   124c0:	4630      	mov	r0, r6
   124c2:	9303      	str	r3, [sp, #12]
   124c4:	78e3      	ldrb	r3, [r4, #3]
   124c6:	4a0d      	ldr	r2, [pc, #52]	; (124fc <bt_addr_le_to_str.constprop.0+0x64>)
   124c8:	9302      	str	r3, [sp, #8]
   124ca:	7923      	ldrb	r3, [r4, #4]
   124cc:	9505      	str	r5, [sp, #20]
   124ce:	9301      	str	r3, [sp, #4]
   124d0:	7963      	ldrb	r3, [r4, #5]
   124d2:	9300      	str	r3, [sp, #0]
   124d4:	79a3      	ldrb	r3, [r4, #6]
   124d6:	f01d fbd8 	bl	2fc8a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   124da:	b00a      	add	sp, #40	; 0x28
   124dc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   124de:	4908      	ldr	r1, [pc, #32]	; (12500 <bt_addr_le_to_str.constprop.0+0x68>)
   124e0:	e7e7      	b.n	124b2 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   124e2:	4908      	ldr	r1, [pc, #32]	; (12504 <bt_addr_le_to_str.constprop.0+0x6c>)
   124e4:	e7e5      	b.n	124b2 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   124e6:	4908      	ldr	r1, [pc, #32]	; (12508 <bt_addr_le_to_str.constprop.0+0x70>)
   124e8:	e7e3      	b.n	124b2 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   124ea:	210a      	movs	r1, #10
   124ec:	4628      	mov	r0, r5
   124ee:	4a07      	ldr	r2, [pc, #28]	; (1250c <bt_addr_le_to_str.constprop.0+0x74>)
   124f0:	f01d fbcb 	bl	2fc8a <snprintk>
		break;
   124f4:	e7e0      	b.n	124b8 <bt_addr_le_to_str.constprop.0+0x20>
   124f6:	bf00      	nop
   124f8:	0003971c 	.word	0x0003971c
   124fc:	0003973e 	.word	0x0003973e
   12500:	00039723 	.word	0x00039723
   12504:	0003972a 	.word	0x0003972a
   12508:	00039734 	.word	0x00039734
   1250c:	0003c998 	.word	0x0003c998

00012510 <bt_parse_cb_nomatch>:
bool bt_parse_cb_nomatch(struct bt_data *data, void *user_data) {
   12510:	b530      	push	{r4, r5, lr}
	switch(data->type) 
   12512:	7803      	ldrb	r3, [r0, #0]
bool bt_parse_cb_nomatch(struct bt_data *data, void *user_data) {
   12514:	460c      	mov	r4, r1
	switch(data->type) 
   12516:	2b09      	cmp	r3, #9
bool bt_parse_cb_nomatch(struct bt_data *data, void *user_data) {
   12518:	b0a9      	sub	sp, #164	; 0xa4
	switch(data->type) 
   1251a:	d11f      	bne.n	1255c <bt_parse_cb_nomatch+0x4c>
			memcpy(buffer, data->data, data->data_len);
   1251c:	7845      	ldrb	r5, [r0, #1]
   1251e:	6841      	ldr	r1, [r0, #4]
   12520:	462a      	mov	r2, r5
   12522:	2380      	movs	r3, #128	; 0x80
   12524:	a808      	add	r0, sp, #32
   12526:	f025 f939 	bl	3779c <__memcpy_chk>
			if(!strncmp("47:05:9B",buffer,data->data_len)) {
   1252a:	462a      	mov	r2, r5
   1252c:	480d      	ldr	r0, [pc, #52]	; (12564 <bt_parse_cb_nomatch+0x54>)
   1252e:	a908      	add	r1, sp, #32
   12530:	f025 fa74 	bl	37a1c <strncmp>
   12534:	b990      	cbnz	r0, 1255c <bt_parse_cb_nomatch+0x4c>
				bt_addr_le_to_str(user_data, addr_str_le, BT_ADDR_LE_STR_LEN);
   12536:	4669      	mov	r1, sp
   12538:	4620      	mov	r0, r4
   1253a:	f7ff ffad 	bl	12498 <bt_addr_le_to_str.constprop.0>
   1253e:	4c0a      	ldr	r4, [pc, #40]	; (12568 <bt_parse_cb_nomatch+0x58>)
   12540:	4a0a      	ldr	r2, [pc, #40]	; (1256c <bt_parse_cb_nomatch+0x5c>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   12542:	4668      	mov	r0, sp
   12544:	1aa4      	subs	r4, r4, r2
   12546:	f002 fd29 	bl	14f9c <z_log_strdup>
   1254a:	08e4      	lsrs	r4, r4, #3
				LOG_INF("Got LE address: %s ", log_strdup(addr_str_le));
   1254c:	01a4      	lsls	r4, r4, #6
   1254e:	f044 0403 	orr.w	r4, r4, #3
   12552:	4601      	mov	r1, r0
   12554:	4622      	mov	r2, r4
   12556:	4806      	ldr	r0, [pc, #24]	; (12570 <bt_parse_cb_nomatch+0x60>)
   12558:	f01d fecb 	bl	302f2 <log_1>
}
   1255c:	2001      	movs	r0, #1
   1255e:	b029      	add	sp, #164	; 0xa4
   12560:	bd30      	pop	{r4, r5, pc}
   12562:	bf00      	nop
   12564:	00039761 	.word	0x00039761
   12568:	00038858 	.word	0x00038858
   1256c:	000387c0 	.word	0x000387c0
   12570:	0003976a 	.word	0x0003976a

00012574 <bt_ready>:

	LOG_INF("Scanning...");
}

static void bt_ready(int err)
{
   12574:	b530      	push	{r4, r5, lr}
   12576:	4b2c      	ldr	r3, [pc, #176]	; (12628 <bt_ready+0xb4>)
   12578:	4c2c      	ldr	r4, [pc, #176]	; (1262c <bt_ready+0xb8>)
	if (err) {
   1257a:	4605      	mov	r5, r0
   1257c:	1ae4      	subs	r4, r4, r3
   1257e:	08e4      	lsrs	r4, r4, #3
{
   12580:	b08b      	sub	sp, #44	; 0x2c
   12582:	01a4      	lsls	r4, r4, #6
	if (err) {
   12584:	b140      	cbz	r0, 12598 <bt_ready+0x24>
		LOG_ERR("%s: %d", __func__, err);
   12586:	4602      	mov	r2, r0
   12588:	4929      	ldr	r1, [pc, #164]	; (12630 <bt_ready+0xbc>)
   1258a:	482a      	ldr	r0, [pc, #168]	; (12634 <bt_ready+0xc0>)
   1258c:	f044 0301 	orr.w	r3, r4, #1
   12590:	f01d fec3 	bl	3031a <log_2>
	k_sem_give(&ble_ready);

	//Wait for cloud connection
    k_sem_take(&connected_to_cloud, K_FOREVER);
	scan_start();
}
   12594:	b00b      	add	sp, #44	; 0x2c
   12596:	bd30      	pop	{r4, r5, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   12598:	4827      	ldr	r0, [pc, #156]	; (12638 <bt_ready+0xc4>)
   1259a:	f018 fe31 	bl	2b200 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1259e:	f04f 32ff 	mov.w	r2, #4294967295
   125a2:	f04f 33ff 	mov.w	r3, #4294967295
   125a6:	4825      	ldr	r0, [pc, #148]	; (1263c <bt_ready+0xc8>)
   125a8:	f018 fe6e 	bl	2b288 <z_impl_k_sem_take>
	struct bt_le_scan_param scan_param = {
   125ac:	ab05      	add	r3, sp, #20
   125ae:	4629      	mov	r1, r5
   125b0:	4618      	mov	r0, r3
   125b2:	2214      	movs	r2, #20
   125b4:	f025 f905 	bl	377c2 <memset>
   125b8:	2201      	movs	r2, #1
   125ba:	f88d 2014 	strb.w	r2, [sp, #20]
   125be:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
	struct bt_scan_init_param scan_init = {
   125c2:	9002      	str	r0, [sp, #8]
	bt_scan_init(&scan_init);
   125c4:	a802      	add	r0, sp, #8
	struct bt_le_scan_param scan_param = {
   125c6:	9207      	str	r2, [sp, #28]
	struct bt_scan_init_param scan_init = {
   125c8:	f88d 500c 	strb.w	r5, [sp, #12]
   125cc:	9504      	str	r5, [sp, #16]
	bt_scan_init(&scan_init);
   125ce:	f004 fcd5 	bl	16f7c <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   125d2:	481b      	ldr	r0, [pc, #108]	; (12640 <bt_ready+0xcc>)
   125d4:	f004 fba6 	bl	16d24 <bt_scan_cb_register>
    id_filter.data = (uint8_t*) &manufacturer_id;
   125d8:	4b1a      	ldr	r3, [pc, #104]	; (12644 <bt_ready+0xd0>)
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_MANUFACTURER_DATA, &id_filter);
   125da:	4669      	mov	r1, sp
    id_filter.data = (uint8_t*) &manufacturer_id;
   125dc:	9300      	str	r3, [sp, #0]
    id_filter.data_len = 2;
   125de:	2302      	movs	r3, #2
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_MANUFACTURER_DATA, &id_filter);
   125e0:	2005      	movs	r0, #5
    id_filter.data_len = 2;
   125e2:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_MANUFACTURER_DATA, &id_filter);
   125e6:	f004 fbad 	bl	16d44 <bt_scan_filter_add>
	if (err) {
   125ea:	4601      	mov	r1, r0
   125ec:	b128      	cbz	r0, 125fa <bt_ready+0x86>
		LOG_ERR("MANUFACTURER scanning filters cannot be set");
   125ee:	4816      	ldr	r0, [pc, #88]	; (12648 <bt_ready+0xd4>)
   125f0:	f044 0101 	orr.w	r1, r4, #1
	LOG_INF("Scanning...");
   125f4:	f01d fe70 	bl	302d8 <log_0>
   125f8:	e7cc      	b.n	12594 <bt_ready+0x20>
	err = bt_scan_filter_enable(BT_SCAN_MANUFACTURER_DATA_FILTER, false);
   125fa:	2020      	movs	r0, #32
   125fc:	f004 fbe6 	bl	16dcc <bt_scan_filter_enable>
	if (err) {
   12600:	b120      	cbz	r0, 1260c <bt_ready+0x98>
		LOG_ERR("Filters cannot be turned on");
   12602:	4812      	ldr	r0, [pc, #72]	; (1264c <bt_ready+0xd8>)
   12604:	f044 0101 	orr.w	r1, r4, #1
   12608:	f01d fe66 	bl	302d8 <log_0>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   1260c:	2001      	movs	r0, #1
   1260e:	f004 fcef 	bl	16ff0 <bt_scan_start>
	if (err) {
   12612:	4601      	mov	r1, r0
   12614:	b120      	cbz	r0, 12620 <bt_ready+0xac>
		LOG_ERR("Scanning failed to start, err %d", err);
   12616:	480e      	ldr	r0, [pc, #56]	; (12650 <bt_ready+0xdc>)
   12618:	f044 0201 	orr.w	r2, r4, #1
   1261c:	f01d fe69 	bl	302f2 <log_1>
	LOG_INF("Scanning...");
   12620:	480c      	ldr	r0, [pc, #48]	; (12654 <bt_ready+0xe0>)
   12622:	f044 0103 	orr.w	r1, r4, #3
   12626:	e7e5      	b.n	125f4 <bt_ready+0x80>
   12628:	000387c0 	.word	0x000387c0
   1262c:	00038858 	.word	0x00038858
   12630:	00039a43 	.word	0x00039a43
   12634:	0003977e 	.word	0x0003977e
   12638:	20014fe8 	.word	0x20014fe8
   1263c:	20015000 	.word	0x20015000
   12640:	200146f0 	.word	0x200146f0
   12644:	000396a8 	.word	0x000396a8
   12648:	00039785 	.word	0x00039785
   1264c:	000397b1 	.word	0x000397b1
   12650:	000397cd 	.word	0x000397cd
   12654:	000397ee 	.word	0x000397ee

00012658 <date_time_handler>:
void date_time_handler(const struct date_time_evt *evt) {
   12658:	b508      	push	{r3, lr}
   1265a:	7803      	ldrb	r3, [r0, #0]
   1265c:	2b03      	cmp	r3, #3
   1265e:	d831      	bhi.n	126c4 <date_time_handler+0x6c>
   12660:	e8df f003 	tbb	[pc, r3]
   12664:	261c1202 	.word	0x261c1202
   12668:	4a17      	ldr	r2, [pc, #92]	; (126c8 <date_time_handler+0x70>)
   1266a:	4b18      	ldr	r3, [pc, #96]	; (126cc <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from modem.\n");
   1266c:	4918      	ldr	r1, [pc, #96]	; (126d0 <date_time_handler+0x78>)
   1266e:	1ad2      	subs	r2, r2, r3
   12670:	08d2      	lsrs	r2, r2, #3
   12672:	0192      	lsls	r2, r2, #6
   12674:	4817      	ldr	r0, [pc, #92]	; (126d4 <date_time_handler+0x7c>)
   12676:	f042 0204 	orr.w	r2, r2, #4
		LOG_DBG("DATE_TIME: failed to get time.\n");
   1267a:	f01d fe3a 	bl	302f2 <log_1>
}
   1267e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   12682:	4815      	ldr	r0, [pc, #84]	; (126d8 <date_time_handler+0x80>)
   12684:	f018 bdbc 	b.w	2b200 <z_impl_k_sem_give>
   12688:	4a0f      	ldr	r2, [pc, #60]	; (126c8 <date_time_handler+0x70>)
   1268a:	4b10      	ldr	r3, [pc, #64]	; (126cc <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from NTP.\n");
   1268c:	4910      	ldr	r1, [pc, #64]	; (126d0 <date_time_handler+0x78>)
   1268e:	1ad2      	subs	r2, r2, r3
   12690:	08d2      	lsrs	r2, r2, #3
   12692:	0192      	lsls	r2, r2, #6
   12694:	4811      	ldr	r0, [pc, #68]	; (126dc <date_time_handler+0x84>)
   12696:	f042 0204 	orr.w	r2, r2, #4
   1269a:	e7ee      	b.n	1267a <date_time_handler+0x22>
   1269c:	4a0a      	ldr	r2, [pc, #40]	; (126c8 <date_time_handler+0x70>)
   1269e:	4b0b      	ldr	r3, [pc, #44]	; (126cc <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from external.\n");
   126a0:	490b      	ldr	r1, [pc, #44]	; (126d0 <date_time_handler+0x78>)
   126a2:	1ad2      	subs	r2, r2, r3
   126a4:	08d2      	lsrs	r2, r2, #3
   126a6:	0192      	lsls	r2, r2, #6
   126a8:	480d      	ldr	r0, [pc, #52]	; (126e0 <date_time_handler+0x88>)
   126aa:	f042 0204 	orr.w	r2, r2, #4
   126ae:	e7e4      	b.n	1267a <date_time_handler+0x22>
   126b0:	4a05      	ldr	r2, [pc, #20]	; (126c8 <date_time_handler+0x70>)
   126b2:	4b06      	ldr	r3, [pc, #24]	; (126cc <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: failed to get time.\n");
   126b4:	4906      	ldr	r1, [pc, #24]	; (126d0 <date_time_handler+0x78>)
   126b6:	1ad2      	subs	r2, r2, r3
   126b8:	08d2      	lsrs	r2, r2, #3
   126ba:	0192      	lsls	r2, r2, #6
   126bc:	4809      	ldr	r0, [pc, #36]	; (126e4 <date_time_handler+0x8c>)
   126be:	f042 0204 	orr.w	r2, r2, #4
   126c2:	e7da      	b.n	1267a <date_time_handler+0x22>
}
   126c4:	bd08      	pop	{r3, pc}
   126c6:	bf00      	nop
   126c8:	00038858 	.word	0x00038858
   126cc:	000387c0 	.word	0x000387c0
   126d0:	00039a31 	.word	0x00039a31
   126d4:	000397fa 	.word	0x000397fa
   126d8:	20015018 	.word	0x20015018
   126dc:	0003981f 	.word	0x0003981f
   126e0:	00039842 	.word	0x00039842
   126e4:	0003986a 	.word	0x0003986a

000126e8 <create_message>:
void create_message(struct app_message* destination, uint8_t *data, size_t len, int64_t *timestamp) {
   126e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   126ec:	b087      	sub	sp, #28
   126ee:	af02      	add	r7, sp, #8
   126f0:	460e      	mov	r6, r1
   126f2:	4690      	mov	r8, r2
   126f4:	4605      	mov	r5, r0
   126f6:	4699      	mov	r9, r3
	message = cJSON_CreateObject();
   126f8:	f012 f9b6 	bl	24a68 <cJSON_CreateObject>
   126fc:	4604      	mov	r4, r0
    cJSON_AddStringToObject(message, "type", "test message");
   126fe:	4a1c      	ldr	r2, [pc, #112]	; (12770 <create_message+0x88>)
   12700:	491c      	ldr	r1, [pc, #112]	; (12774 <create_message+0x8c>)
   12702:	f023 faea 	bl	35cda <cJSON_AddStringToObject>
	snprintf(time_str, 16, "%lld", *timestamp);
   12706:	e9d9 2300 	ldrd	r2, r3, [r9]
   1270a:	2110      	movs	r1, #16
   1270c:	e9cd 2300 	strd	r2, r3, [sp]
   12710:	4638      	mov	r0, r7
   12712:	4a19      	ldr	r2, [pc, #100]	; (12778 <create_message+0x90>)
   12714:	f01c fa3c 	bl	2eb90 <sniprintf>
	char data_str[len];
   12718:	f108 0307 	add.w	r3, r8, #7
   1271c:	f023 0307 	bic.w	r3, r3, #7
   12720:	ebad 0d03 	sub.w	sp, sp, r3
	snprintf(data_str, len, "%s", data);
   12724:	4641      	mov	r1, r8
   12726:	4633      	mov	r3, r6
   12728:	4a14      	ldr	r2, [pc, #80]	; (1277c <create_message+0x94>)
   1272a:	a802      	add	r0, sp, #8
   1272c:	f01c fa30 	bl	2eb90 <sniprintf>
	cJSON_AddStringToObject(message, "timestamp", time_str);
   12730:	463a      	mov	r2, r7
   12732:	4620      	mov	r0, r4
   12734:	4912      	ldr	r1, [pc, #72]	; (12780 <create_message+0x98>)
   12736:	f023 fad0 	bl	35cda <cJSON_AddStringToObject>
	cJSON_AddStringToObject(message, "data", data);
   1273a:	4632      	mov	r2, r6
   1273c:	4911      	ldr	r1, [pc, #68]	; (12784 <create_message+0x9c>)
   1273e:	4620      	mov	r0, r4
   12740:	f023 facb 	bl	35cda <cJSON_AddStringToObject>
	destination->len = strlen(cJSON_Print(message));
   12744:	4620      	mov	r0, r4
   12746:	f023 fac5 	bl	35cd4 <cJSON_Print>
   1274a:	f7fe fed9 	bl	11500 <strlen>
   1274e:	f8c5 0100 	str.w	r0, [r5, #256]	; 0x100
	strcpy(destination->data, cJSON_Print(message));
   12752:	4620      	mov	r0, r4
   12754:	f023 fabe 	bl	35cd4 <cJSON_Print>
   12758:	4601      	mov	r1, r0
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1275a:	4628      	mov	r0, r5
   1275c:	f025 f956 	bl	37a0c <strcpy>
	cJSON_Delete(message);
   12760:	4620      	mov	r0, r4
   12762:	f012 f945 	bl	249f0 <cJSON_Delete>
}
   12766:	3714      	adds	r7, #20
   12768:	46bd      	mov	sp, r7
   1276a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1276e:	bf00      	nop
   12770:	0003988e 	.word	0x0003988e
   12774:	0003aeba 	.word	0x0003aeba
   12778:	0003989b 	.word	0x0003989b
   1277c:	0003de32 	.word	0x0003de32
   12780:	000398a0 	.word	0x000398a0
   12784:	0003c33f 	.word	0x0003c33f

00012788 <scan_filter_match>:
{
   12788:	b530      	push	{r4, r5, lr}
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   1278a:	6803      	ldr	r3, [r0, #0]
{
   1278c:	b0cd      	sub	sp, #308	; 0x134
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   1278e:	a903      	add	r1, sp, #12
{
   12790:	4605      	mov	r5, r0
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   12792:	6818      	ldr	r0, [r3, #0]
   12794:	f7ff fe80 	bl	12498 <bt_addr_le_to_str.constprop.0>
	int ret = !strncmp(BT_ADDR, addr, 9);
   12798:	2209      	movs	r2, #9
   1279a:	481a      	ldr	r0, [pc, #104]	; (12804 <scan_filter_match+0x7c>)
   1279c:	a903      	add	r1, sp, #12
   1279e:	f025 f93d 	bl	37a1c <strncmp>
	if(!ret) {
   127a2:	4c19      	ldr	r4, [pc, #100]	; (12808 <scan_filter_match+0x80>)
   127a4:	4a19      	ldr	r2, [pc, #100]	; (1280c <scan_filter_match+0x84>)
   127a6:	1b12      	subs	r2, r2, r4
   127a8:	08d2      	lsrs	r2, r2, #3
   127aa:	0192      	lsls	r2, r2, #6
   127ac:	b318      	cbz	r0, 127f6 <scan_filter_match+0x6e>
   127ae:	a803      	add	r0, sp, #12
		LOG_INF("Device found: %s", log_strdup(addr));
   127b0:	f042 0403 	orr.w	r4, r2, #3
   127b4:	f002 fbf2 	bl	14f9c <z_log_strdup>
   127b8:	4622      	mov	r2, r4
   127ba:	4601      	mov	r1, r0
   127bc:	4814      	ldr	r0, [pc, #80]	; (12810 <scan_filter_match+0x88>)
   127be:	f01d fd98 	bl	302f2 <log_1>
		bt_data_parse(device_info->adv_data, bt_parse_cb, (void *)addr);
   127c2:	4914      	ldr	r1, [pc, #80]	; (12814 <scan_filter_match+0x8c>)
   127c4:	aa03      	add	r2, sp, #12
   127c6:	68a8      	ldr	r0, [r5, #8]
   127c8:	f007 fede 	bl	1a588 <bt_data_parse>
		date_time_now(&curr_time);
   127cc:	4668      	mov	r0, sp
   127ce:	f011 fd21 	bl	24214 <date_time_now>
		create_message(&message, addr, sizeof(addr), &curr_time);
   127d2:	221e      	movs	r2, #30
   127d4:	a903      	add	r1, sp, #12
   127d6:	a80b      	add	r0, sp, #44	; 0x2c
   127d8:	466b      	mov	r3, sp
   127da:	f7ff ff85 	bl	126e8 <create_message>
		pub_success = gcloud_publish(message.data, message.len, MQTT_QOS_1_AT_LEAST_ONCE);
   127de:	2201      	movs	r2, #1
   127e0:	994b      	ldr	r1, [sp, #300]	; 0x12c
   127e2:	a80b      	add	r0, sp, #44	; 0x2c
   127e4:	f000 f9f2 	bl	12bcc <gcloud_publish>
		if (pub_success != 0)
   127e8:	b118      	cbz	r0, 127f2 <scan_filter_match+0x6a>
			LOG_INF("JSON data Publish failed\n");
   127ea:	4621      	mov	r1, r4
   127ec:	480a      	ldr	r0, [pc, #40]	; (12818 <scan_filter_match+0x90>)
   127ee:	f01d fd73 	bl	302d8 <log_0>
}
   127f2:	b04d      	add	sp, #308	; 0x134
   127f4:	bd30      	pop	{r4, r5, pc}
		LOG_INF("Not a relevant address: %d", ret);
   127f6:	2101      	movs	r1, #1
   127f8:	4808      	ldr	r0, [pc, #32]	; (1281c <scan_filter_match+0x94>)
   127fa:	f042 0203 	orr.w	r2, r2, #3
   127fe:	f01d fd78 	bl	302f2 <log_1>
}
   12802:	e7f6      	b.n	127f2 <scan_filter_match+0x6a>
   12804:	000398aa 	.word	0x000398aa
   12808:	000387c0 	.word	0x000387c0
   1280c:	00038858 	.word	0x00038858
   12810:	000398b3 	.word	0x000398b3
   12814:	00012461 	.word	0x00012461
   12818:	000398c4 	.word	0x000398c4
   1281c:	000398de 	.word	0x000398de

00012820 <main>:

#endif

/**@brief Thread initialisation */
void main(void)
{
   12820:	b570      	push	{r4, r5, r6, lr}
   12822:	4b45      	ldr	r3, [pc, #276]	; (12938 <main+0x118>)
   12824:	4c45      	ldr	r4, [pc, #276]	; (1293c <main+0x11c>)
    int err;

    LOG_INF("Google Cloud BLE app started");
   12826:	4846      	ldr	r0, [pc, #280]	; (12940 <main+0x120>)
   12828:	1ae4      	subs	r4, r4, r3
   1282a:	08e4      	lsrs	r4, r4, #3
   1282c:	01a4      	lsls	r4, r4, #6
   1282e:	f044 0103 	orr.w	r1, r4, #3
{
   12832:	b088      	sub	sp, #32
    LOG_INF("Google Cloud BLE app started");
   12834:	f01d fd50 	bl	302d8 <log_0>

    #ifdef WITH_BLE
		err = bt_enable(bt_ready);
   12838:	4842      	ldr	r0, [pc, #264]	; (12944 <main+0x124>)
   1283a:	f007 fb67 	bl	19f0c <bt_enable>
		if (err) {
   1283e:	4601      	mov	r1, r0
   12840:	b120      	cbz	r0, 1284c <main+0x2c>
			LOG_ERR("bt_enable: %d", err);
   12842:	4841      	ldr	r0, [pc, #260]	; (12948 <main+0x128>)
   12844:	f044 0201 	orr.w	r2, r4, #1
   12848:	f01d fd53 	bl	302f2 <log_1>
	return z_impl_k_sem_take(sem, timeout);
   1284c:	f04f 32ff 	mov.w	r2, #4294967295
   12850:	f04f 33ff 	mov.w	r3, #4294967295
   12854:	483d      	ldr	r0, [pc, #244]	; (1294c <main+0x12c>)
   12856:	f018 fd17 	bl	2b288 <z_impl_k_sem_take>
		}

	k_sem_take(&ble_ready, K_FOREVER);
	#endif

    err = gcloud_provision();
   1285a:	f000 fba7 	bl	12fac <gcloud_provision>
    if (err)
   1285e:	4605      	mov	r5, r0
   12860:	b140      	cbz	r0, 12874 <main+0x54>
    {
        LOG_ERR("Provisioning failed, error: %d", err);
   12862:	4601      	mov	r1, r0
   12864:	483a      	ldr	r0, [pc, #232]	; (12950 <main+0x130>)
   12866:	f044 0201 	orr.w	r2, r4, #1
	//Sleeping main
    while (true)
    {
        k_sleep(K_SECONDS(1));
    }
   1286a:	b008      	add	sp, #32
   1286c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        LOG_ERR("Provisioning failed, error: %d", err);
   12870:	f01d bd3f 	b.w	302f2 <log_1>
    LOG_INF("Initializing modem");
   12874:	f044 0603 	orr.w	r6, r4, #3
   12878:	4631      	mov	r1, r6
   1287a:	4836      	ldr	r0, [pc, #216]	; (12954 <main+0x134>)
   1287c:	f01d fd2c 	bl	302d8 <log_0>
	LOG_INF("Disabling PSM and eDRX");
   12880:	4631      	mov	r1, r6
   12882:	4835      	ldr	r0, [pc, #212]	; (12958 <main+0x138>)
   12884:	f01d fd28 	bl	302d8 <log_0>
	lte_lc_psm_req(false);
   12888:	4628      	mov	r0, r5
   1288a:	f010 f87b 	bl	22984 <lte_lc_psm_req>
	lte_lc_edrx_req(false);
   1288e:	4628      	mov	r0, r5
   12890:	f010 f8c6 	bl	22a20 <lte_lc_edrx_req>
        LOG_INF("Establishing LTE link\n");
   12894:	4631      	mov	r1, r6
   12896:	4831      	ldr	r0, [pc, #196]	; (1295c <main+0x13c>)
   12898:	f01d fd1e 	bl	302d8 <log_0>
        err = lte_lc_init_and_connect();
   1289c:	f023 f953 	bl	35b46 <lte_lc_init_and_connect>
        if (err) {
   128a0:	4601      	mov	r1, r0
   128a2:	b118      	cbz	r0, 128ac <main+0x8c>
			LOG_INF("Failed to establish LTE connection: %d", err);
   128a4:	4632      	mov	r2, r6
   128a6:	482e      	ldr	r0, [pc, #184]	; (12960 <main+0x140>)
   128a8:	f01d fd23 	bl	302f2 <log_1>
    LOG_INF("Initializing modem info");
   128ac:	f044 0603 	orr.w	r6, r4, #3
   128b0:	4631      	mov	r1, r6
   128b2:	482c      	ldr	r0, [pc, #176]	; (12964 <main+0x144>)
   128b4:	f01d fd10 	bl	302d8 <log_0>
    modem_info_init();
   128b8:	f011 f938 	bl	23b2c <modem_info_init>
    date_time_update_async(date_time_handler);
   128bc:	482a      	ldr	r0, [pc, #168]	; (12968 <main+0x148>)
   128be:	f011 fcdd 	bl	2427c <date_time_update_async>
   128c2:	f04f 32ff 	mov.w	r2, #4294967295
   128c6:	f04f 33ff 	mov.w	r3, #4294967295
   128ca:	4828      	ldr	r0, [pc, #160]	; (1296c <main+0x14c>)
   128cc:	f018 fcdc 	bl	2b288 <z_impl_k_sem_take>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   128d0:	2200      	movs	r2, #0
   128d2:	2300      	movs	r3, #0
   128d4:	2500      	movs	r5, #0
   128d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   128da:	2307      	movs	r3, #7
   128dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   128e0:	e9cd 3503 	strd	r3, r5, [sp, #12]
   128e4:	4922      	ldr	r1, [pc, #136]	; (12970 <main+0x150>)
   128e6:	4b23      	ldr	r3, [pc, #140]	; (12974 <main+0x154>)
   128e8:	e9cd 5501 	strd	r5, r5, [sp, #4]
   128ec:	4822      	ldr	r0, [pc, #136]	; (12978 <main+0x158>)
   128ee:	9500      	str	r5, [sp, #0]
   128f0:	f017 feb2 	bl	2a658 <z_impl_k_thread_create>
    gc_tid = k_thread_create(&gc_thread, gc_stack_area, K_THREAD_STACK_SIZEOF(gc_stack_area),
   128f4:	4b21      	ldr	r3, [pc, #132]	; (1297c <main+0x15c>)
    LOG_INF("Connecting to Google Cloud");
   128f6:	4631      	mov	r1, r6
    gc_tid = k_thread_create(&gc_thread, gc_stack_area, K_THREAD_STACK_SIZEOF(gc_stack_area),
   128f8:	6018      	str	r0, [r3, #0]
    LOG_INF("Connecting to Google Cloud");
   128fa:	4821      	ldr	r0, [pc, #132]	; (12980 <main+0x160>)
   128fc:	f01d fcec 	bl	302d8 <log_0>
    err = gcloud_connect(NULL);
   12900:	4628      	mov	r0, r5
   12902:	f000 f941 	bl	12b88 <gcloud_connect>
    if (err)
   12906:	4601      	mov	r1, r0
   12908:	b168      	cbz	r0, 12926 <main+0x106>
        LOG_ERR("Failed to connect to Google Cloud, error: %d", err);
   1290a:	481e      	ldr	r0, [pc, #120]	; (12984 <main+0x164>)
   1290c:	f044 0201 	orr.w	r2, r4, #1
   12910:	f01d fcef 	bl	302f2 <log_1>
        sys_reboot(0); //TODO: Handle error
   12914:	4628      	mov	r0, r5
   12916:	f002 f9b7 	bl	14c88 <sys_reboot>
	return z_impl_k_sleep(timeout);
   1291a:	2100      	movs	r1, #0
   1291c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12920:	f01a fb2e 	bl	2cf80 <z_impl_k_sleep>
    while (true)
   12924:	e7f9      	b.n	1291a <main+0xfa>
        LOG_INF("Connected to Google Cloud");
   12926:	4631      	mov	r1, r6
   12928:	4817      	ldr	r0, [pc, #92]	; (12988 <main+0x168>)
   1292a:	f01d fcd5 	bl	302d8 <log_0>
	z_impl_k_sem_give(sem);
   1292e:	4817      	ldr	r0, [pc, #92]	; (1298c <main+0x16c>)
   12930:	f018 fc66 	bl	2b200 <z_impl_k_sem_give>
}
   12934:	e7f1      	b.n	1291a <main+0xfa>
   12936:	bf00      	nop
   12938:	000387c0 	.word	0x000387c0
   1293c:	00038858 	.word	0x00038858
   12940:	000398f9 	.word	0x000398f9
   12944:	00012575 	.word	0x00012575
   12948:	00039916 	.word	0x00039916
   1294c:	20014fe8 	.word	0x20014fe8
   12950:	00039924 	.word	0x00039924
   12954:	00039943 	.word	0x00039943
   12958:	00039956 	.word	0x00039956
   1295c:	0003996d 	.word	0x0003996d
   12960:	00039984 	.word	0x00039984
   12964:	000399ab 	.word	0x000399ab
   12968:	00012659 	.word	0x00012659
   1296c:	20015018 	.word	0x20015018
   12970:	2001dcd8 	.word	0x2001dcd8
   12974:	000130b5 	.word	0x000130b5
   12978:	20015200 	.word	0x20015200
   1297c:	20015f10 	.word	0x20015f10
   12980:	000399c3 	.word	0x000399c3
   12984:	000399de 	.word	0x000399de
   12988:	00039a0b 	.word	0x00039a0b
   1298c:	20015000 	.word	0x20015000

00012990 <reconnect_timer_handler>:
    int temp = k_msgq_put(q,data, timeout);
    irq_unlock(key);
    return temp;
}

void reconnect_timer_handler(struct k_timer *timer_id) {
   12990:	b530      	push	{r4, r5, lr}
   12992:	b087      	sub	sp, #28
    struct gcloud_event cmd = {
   12994:	2218      	movs	r2, #24
   12996:	2100      	movs	r1, #0
   12998:	4668      	mov	r0, sp
   1299a:	f024 ff12 	bl	377c2 <memset>
   1299e:	2303      	movs	r3, #3
   129a0:	f88d 3000 	strb.w	r3, [sp]
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   129a4:	2200      	movs	r2, #0
   129a6:	2300      	movs	r3, #0
   129a8:	4669      	mov	r1, sp
   129aa:	480b      	ldr	r0, [pc, #44]	; (129d8 <reconnect_timer_handler+0x48>)
   129ac:	f017 ff6c 	bl	2a888 <z_impl_k_msgq_put>
        .type = RECONNECT_TIMEOUT,
        .param = {}
    };
    int err = k_msgq_put(&gcloud_msgq, &cmd, K_NO_WAIT);

    if (err) {
   129b0:	4605      	mov	r5, r0
   129b2:	b170      	cbz	r0, 129d2 <reconnect_timer_handler+0x42>
   129b4:	4b09      	ldr	r3, [pc, #36]	; (129dc <reconnect_timer_handler+0x4c>)
   129b6:	4c0a      	ldr	r4, [pc, #40]	; (129e0 <reconnect_timer_handler+0x50>)
   129b8:	1ae4      	subs	r4, r4, r3
        LOG_ERR("k_msgq_put (reconnect_timeout) failed: [%d] %s", err, strerror(err));
   129ba:	f01c fb2d 	bl	2f018 <strerror>
   129be:	08e4      	lsrs	r4, r4, #3
   129c0:	01a4      	lsls	r4, r4, #6
   129c2:	f044 0401 	orr.w	r4, r4, #1
   129c6:	4602      	mov	r2, r0
   129c8:	4623      	mov	r3, r4
   129ca:	4629      	mov	r1, r5
   129cc:	4805      	ldr	r0, [pc, #20]	; (129e4 <reconnect_timer_handler+0x54>)
   129ce:	f01d fca4 	bl	3031a <log_2>
        // TODO: Find a way to report this error to the application.
    }
}
   129d2:	b007      	add	sp, #28
   129d4:	bd30      	pop	{r4, r5, pc}
   129d6:	bf00      	nop
   129d8:	20014f80 	.word	0x20014f80
   129dc:	000387c0 	.word	0x000387c0
   129e0:	00038850 	.word	0x00038850
   129e4:	00039a4c 	.word	0x00039a4c

000129e8 <make_jwt.constprop.0>:
static int make_jwt(char *buffer, size_t buffer_size) {
   129e8:	b530      	push	{r4, r5, lr}
   129ea:	b089      	sub	sp, #36	; 0x24
    err = jwt_init_builder(&jb, buffer, buffer_size);
   129ec:	f44f 7280 	mov.w	r2, #256	; 0x100
   129f0:	4924      	ldr	r1, [pc, #144]	; (12a84 <make_jwt.constprop.0+0x9c>)
   129f2:	a803      	add	r0, sp, #12
   129f4:	f00b ff82 	bl	1e8fc <jwt_init_builder>
    if (err != 0) {
   129f8:	4d23      	ldr	r5, [pc, #140]	; (12a88 <make_jwt.constprop.0+0xa0>)
   129fa:	4b24      	ldr	r3, [pc, #144]	; (12a8c <make_jwt.constprop.0+0xa4>)
   129fc:	4604      	mov	r4, r0
   129fe:	1aed      	subs	r5, r5, r3
   12a00:	08ed      	lsrs	r5, r5, #3
   12a02:	01ad      	lsls	r5, r5, #6
   12a04:	b140      	cbz	r0, 12a18 <make_jwt.constprop.0+0x30>
        LOG_ERR("Unable to init JWT builder: %d", err);
   12a06:	4601      	mov	r1, r0
   12a08:	4821      	ldr	r0, [pc, #132]	; (12a90 <make_jwt.constprop.0+0xa8>)
   12a0a:	f045 0201 	orr.w	r2, r5, #1
        LOG_ERR("Unable to add JWT payload: %d", err);
   12a0e:	f01d fc70 	bl	302f2 <log_1>
}
   12a12:	4620      	mov	r0, r4
   12a14:	b009      	add	sp, #36	; 0x24
   12a16:	bd30      	pop	{r4, r5, pc}
    date_time_now(&ntp);
   12a18:	4668      	mov	r0, sp
   12a1a:	f011 fbfb 	bl	24214 <date_time_now>
    int64_t unixtime = (ntp/1000);    //TODO: Is unix time valid as jwt timestamp?
   12a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
   12a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12a26:	2300      	movs	r3, #0
   12a28:	f7fe fb92 	bl	11150 <__aeabi_ldivmod>
   12a2c:	4604      	mov	r4, r0
    LOG_DBG("Unix Timestamp: %d\n", y);
   12a2e:	4602      	mov	r2, r0
   12a30:	4918      	ldr	r1, [pc, #96]	; (12a94 <make_jwt.constprop.0+0xac>)
   12a32:	4819      	ldr	r0, [pc, #100]	; (12a98 <make_jwt.constprop.0+0xb0>)
   12a34:	f045 0304 	orr.w	r3, r5, #4
   12a38:	f01d fc6f 	bl	3031a <log_2>
    err = jwt_add_payload(&jb, expiry_time, issue_time, CONFIG_GCLOUD_PROJECT_NAME);
   12a3c:	f504 4128 	add.w	r1, r4, #43008	; 0xa800
   12a40:	4622      	mov	r2, r4
   12a42:	4b16      	ldr	r3, [pc, #88]	; (12a9c <make_jwt.constprop.0+0xb4>)
   12a44:	31c0      	adds	r1, #192	; 0xc0
   12a46:	a803      	add	r0, sp, #12
   12a48:	f00b feea 	bl	1e820 <jwt_add_payload>
    if (err != 0) {
   12a4c:	4604      	mov	r4, r0
   12a4e:	b120      	cbz	r0, 12a5a <make_jwt.constprop.0+0x72>
        LOG_ERR("Unable to add JWT payload: %d", err);
   12a50:	4621      	mov	r1, r4
   12a52:	4813      	ldr	r0, [pc, #76]	; (12aa0 <make_jwt.constprop.0+0xb8>)
   12a54:	f045 0201 	orr.w	r2, r5, #1
   12a58:	e7d9      	b.n	12a0e <make_jwt.constprop.0+0x26>
    err = jwt_sign(&jb, zepfull_private_der, zepfull_private_der_len);
   12a5a:	4b12      	ldr	r3, [pc, #72]	; (12aa4 <make_jwt.constprop.0+0xbc>)
   12a5c:	4912      	ldr	r1, [pc, #72]	; (12aa8 <make_jwt.constprop.0+0xc0>)
   12a5e:	681a      	ldr	r2, [r3, #0]
   12a60:	a803      	add	r0, sp, #12
   12a62:	f00b fef9 	bl	1e858 <jwt_sign>
    if (err != 0) {
   12a66:	4604      	mov	r4, r0
   12a68:	2800      	cmp	r0, #0
   12a6a:	d1f1      	bne.n	12a50 <make_jwt.constprop.0+0x68>
    if (jb.overflowed != 0) {
   12a6c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12a70:	2b00      	cmp	r3, #0
   12a72:	d0ce      	beq.n	12a12 <make_jwt.constprop.0+0x2a>
        LOG_ERR("JWT buffer overflowed");
   12a74:	480d      	ldr	r0, [pc, #52]	; (12aac <make_jwt.constprop.0+0xc4>)
   12a76:	f045 0101 	orr.w	r1, r5, #1
   12a7a:	f01d fc2d 	bl	302d8 <log_0>
        return -ENOMEM;
   12a7e:	f06f 040b 	mvn.w	r4, #11
   12a82:	e7c6      	b.n	12a12 <make_jwt.constprop.0+0x2a>
   12a84:	2001ad6c 	.word	0x2001ad6c
   12a88:	00038850 	.word	0x00038850
   12a8c:	000387c0 	.word	0x000387c0
   12a90:	00039a7b 	.word	0x00039a7b
   12a94:	0003a501 	.word	0x0003a501
   12a98:	00039a9a 	.word	0x00039a9a
   12a9c:	00039ab2 	.word	0x00039ab2
   12aa0:	00039ac1 	.word	0x00039ac1
   12aa4:	20014714 	.word	0x20014714
   12aa8:	20014c48 	.word	0x20014c48
   12aac:	00039adf 	.word	0x00039adf

00012ab0 <mqtt_thread_func>:
	fds.events = POLLIN;

	return 0;
}

void mqtt_thread_func(void *unused1, void *unused2, void *unused3) {
   12ab0:	b538      	push	{r3, r4, r5, lr}
    int err;

    while(1) {
            err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   12ab2:	4c2c      	ldr	r4, [pc, #176]	; (12b64 <mqtt_thread_func+0xb4>)
	return z_impl_zsock_poll(fds, nfds, timeout);
   12ab4:	4d2c      	ldr	r5, [pc, #176]	; (12b68 <mqtt_thread_func+0xb8>)
   12ab6:	4620      	mov	r0, r4
   12ab8:	f021 fb98 	bl	341ec <mqtt_keepalive_time_left>
   12abc:	4602      	mov	r2, r0
   12abe:	2101      	movs	r1, #1
   12ac0:	4628      	mov	r0, r5
   12ac2:	f003 f823 	bl	15b0c <z_impl_zsock_poll>
            if (err < 0) {
   12ac6:	2800      	cmp	r0, #0
   12ac8:	da0f      	bge.n	12aea <mqtt_thread_func+0x3a>
   12aca:	4a28      	ldr	r2, [pc, #160]	; (12b6c <mqtt_thread_func+0xbc>)
   12acc:	4c28      	ldr	r4, [pc, #160]	; (12b70 <mqtt_thread_func+0xc0>)
   12ace:	1aa4      	subs	r4, r4, r2
   12ad0:	08e4      	lsrs	r4, r4, #3
                LOG_ERR("poll: %d", errno);
   12ad2:	f01f fccf 	bl	32474 <__errno>
   12ad6:	01a4      	lsls	r4, r4, #6
   12ad8:	f044 0401 	orr.w	r4, r4, #1
   12adc:	4622      	mov	r2, r4
   12ade:	6801      	ldr	r1, [r0, #0]
   12ae0:	4824      	ldr	r0, [pc, #144]	; (12b74 <mqtt_thread_func+0xc4>)
            if ((fds.revents & POLLNVAL) == POLLNVAL) {
                LOG_ERR("POLLNVAL");
                break;
            }
        }
}
   12ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                LOG_ERR("ERROR: mqtt_live: %d", err);
   12ae6:	f01d bc04 	b.w	302f2 <log_1>
            err = mqtt_live(&client);
   12aea:	4620      	mov	r0, r4
   12aec:	f021 fb57 	bl	3419e <mqtt_live>
            if ((err != 0) && (err != -EAGAIN)) {
   12af0:	4601      	mov	r1, r0
   12af2:	b158      	cbz	r0, 12b0c <mqtt_thread_func+0x5c>
   12af4:	f110 0f0b 	cmn.w	r0, #11
   12af8:	d008      	beq.n	12b0c <mqtt_thread_func+0x5c>
   12afa:	4a1d      	ldr	r2, [pc, #116]	; (12b70 <mqtt_thread_func+0xc0>)
   12afc:	4b1b      	ldr	r3, [pc, #108]	; (12b6c <mqtt_thread_func+0xbc>)
                LOG_ERR("ERROR: mqtt_live: %d", err);
   12afe:	481e      	ldr	r0, [pc, #120]	; (12b78 <mqtt_thread_func+0xc8>)
   12b00:	1ad2      	subs	r2, r2, r3
   12b02:	08d2      	lsrs	r2, r2, #3
   12b04:	0192      	lsls	r2, r2, #6
   12b06:	f042 0201 	orr.w	r2, r2, #1
   12b0a:	e7ea      	b.n	12ae2 <mqtt_thread_func+0x32>
            if ((fds.revents & POLLIN) == POLLIN) {
   12b0c:	88eb      	ldrh	r3, [r5, #6]
   12b0e:	07d9      	lsls	r1, r3, #31
   12b10:	d50d      	bpl.n	12b2e <mqtt_thread_func+0x7e>
                err = mqtt_input(&client);
   12b12:	4620      	mov	r0, r4
   12b14:	f021 fb81 	bl	3421a <mqtt_input>
                if (err != 0) {
   12b18:	4601      	mov	r1, r0
   12b1a:	b140      	cbz	r0, 12b2e <mqtt_thread_func+0x7e>
   12b1c:	4a14      	ldr	r2, [pc, #80]	; (12b70 <mqtt_thread_func+0xc0>)
   12b1e:	4b13      	ldr	r3, [pc, #76]	; (12b6c <mqtt_thread_func+0xbc>)
                    LOG_ERR("mqtt_input: %d", err);
   12b20:	4816      	ldr	r0, [pc, #88]	; (12b7c <mqtt_thread_func+0xcc>)
   12b22:	1ad2      	subs	r2, r2, r3
   12b24:	08d2      	lsrs	r2, r2, #3
   12b26:	0192      	lsls	r2, r2, #6
   12b28:	f042 0201 	orr.w	r2, r2, #1
   12b2c:	e7d9      	b.n	12ae2 <mqtt_thread_func+0x32>
            if ((fds.revents & POLLERR) == POLLERR) {
   12b2e:	88eb      	ldrh	r3, [r5, #6]
   12b30:	071a      	lsls	r2, r3, #28
   12b32:	d50b      	bpl.n	12b4c <mqtt_thread_func+0x9c>
   12b34:	490e      	ldr	r1, [pc, #56]	; (12b70 <mqtt_thread_func+0xc0>)
   12b36:	4b0d      	ldr	r3, [pc, #52]	; (12b6c <mqtt_thread_func+0xbc>)
                LOG_ERR("POLLERR");
   12b38:	4811      	ldr	r0, [pc, #68]	; (12b80 <mqtt_thread_func+0xd0>)
   12b3a:	1ac9      	subs	r1, r1, r3
   12b3c:	08c9      	lsrs	r1, r1, #3
   12b3e:	0189      	lsls	r1, r1, #6
   12b40:	f041 0101 	orr.w	r1, r1, #1
}
   12b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                LOG_ERR("POLLNVAL");
   12b48:	f01d bbc6 	b.w	302d8 <log_0>
            if ((fds.revents & POLLNVAL) == POLLNVAL) {
   12b4c:	069b      	lsls	r3, r3, #26
   12b4e:	d5b2      	bpl.n	12ab6 <mqtt_thread_func+0x6>
   12b50:	4907      	ldr	r1, [pc, #28]	; (12b70 <mqtt_thread_func+0xc0>)
   12b52:	4b06      	ldr	r3, [pc, #24]	; (12b6c <mqtt_thread_func+0xbc>)
                LOG_ERR("POLLNVAL");
   12b54:	480b      	ldr	r0, [pc, #44]	; (12b84 <mqtt_thread_func+0xd4>)
   12b56:	1ac9      	subs	r1, r1, r3
   12b58:	08c9      	lsrs	r1, r1, #3
   12b5a:	0189      	lsls	r1, r1, #6
   12b5c:	f041 0101 	orr.w	r1, r1, #1
   12b60:	e7f0      	b.n	12b44 <mqtt_thread_func+0x94>
   12b62:	bf00      	nop
   12b64:	20015f14 	.word	0x20015f14
   12b68:	20015f94 	.word	0x20015f94
   12b6c:	000387c0 	.word	0x000387c0
   12b70:	00038850 	.word	0x00038850
   12b74:	00039af5 	.word	0x00039af5
   12b78:	00039afe 	.word	0x00039afe
   12b7c:	00039b13 	.word	0x00039b13
   12b80:	00039b22 	.word	0x00039b22
   12b84:	00039b2a 	.word	0x00039b2a

00012b88 <gcloud_connect>:
int gcloud_connect(received_config_handler_t received_config_cb) {
   12b88:	b5d0      	push	{r4, r6, r7, lr}
    err = k_msgq_put_atomic(&gcloud_msgq, &msg, K_FOREVER);
   12b8a:	f04f 36ff 	mov.w	r6, #4294967295
   12b8e:	f04f 37ff 	mov.w	r7, #4294967295
    received_config_handler = received_config_cb;
   12b92:	4b0b      	ldr	r3, [pc, #44]	; (12bc0 <gcloud_connect+0x38>)
int gcloud_connect(received_config_handler_t received_config_cb) {
   12b94:	b086      	sub	sp, #24
    received_config_handler = received_config_cb;
   12b96:	6018      	str	r0, [r3, #0]
    struct gcloud_event msg = {
   12b98:	2218      	movs	r2, #24
   12b9a:	2100      	movs	r1, #0
   12b9c:	4668      	mov	r0, sp
   12b9e:	f024 fe10 	bl	377c2 <memset>
    err = k_msgq_put_atomic(&gcloud_msgq, &msg, K_FOREVER);
   12ba2:	4632      	mov	r2, r6
   12ba4:	463b      	mov	r3, r7
   12ba6:	4669      	mov	r1, sp
   12ba8:	4806      	ldr	r0, [pc, #24]	; (12bc4 <gcloud_connect+0x3c>)
   12baa:	f01d f819 	bl	2fbe0 <k_msgq_put_atomic>
   12bae:	4604      	mov	r4, r0
	return z_impl_k_sem_take(sem, timeout);
   12bb0:	4805      	ldr	r0, [pc, #20]	; (12bc8 <gcloud_connect+0x40>)
   12bb2:	4632      	mov	r2, r6
   12bb4:	463b      	mov	r3, r7
   12bb6:	f018 fb67 	bl	2b288 <z_impl_k_sem_take>
}
   12bba:	4620      	mov	r0, r4
   12bbc:	b006      	add	sp, #24
   12bbe:	bdd0      	pop	{r4, r6, r7, pc}
   12bc0:	20015fa0 	.word	0x20015fa0
   12bc4:	20014f80 	.word	0x20014f80
   12bc8:	20015030 	.word	0x20015030

00012bcc <gcloud_publish>:
{
   12bcc:	b570      	push	{r4, r5, r6, lr}
    if (!connected) {
   12bce:	4b15      	ldr	r3, [pc, #84]	; (12c24 <gcloud_publish+0x58>)
{
   12bd0:	4605      	mov	r5, r0
    if (!connected) {
   12bd2:	781b      	ldrb	r3, [r3, #0]
{
   12bd4:	460c      	mov	r4, r1
   12bd6:	4616      	mov	r6, r2
   12bd8:	b086      	sub	sp, #24
    if (!connected) {
   12bda:	b96b      	cbnz	r3, 12bf8 <gcloud_publish+0x2c>
   12bdc:	4b12      	ldr	r3, [pc, #72]	; (12c28 <gcloud_publish+0x5c>)
   12bde:	4913      	ldr	r1, [pc, #76]	; (12c2c <gcloud_publish+0x60>)
        LOG_WRN("Cannot publish data while not connected to Google Cloud");
   12be0:	4813      	ldr	r0, [pc, #76]	; (12c30 <gcloud_publish+0x64>)
   12be2:	1ac9      	subs	r1, r1, r3
   12be4:	08c9      	lsrs	r1, r1, #3
   12be6:	0189      	lsls	r1, r1, #6
   12be8:	f041 0102 	orr.w	r1, r1, #2
   12bec:	f01d fb74 	bl	302d8 <log_0>
        return -ENOTCONN;
   12bf0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   12bf4:	b006      	add	sp, #24
   12bf6:	bd70      	pop	{r4, r5, r6, pc}
    struct gcloud_event cmd = {
   12bf8:	2302      	movs	r3, #2
   12bfa:	480e      	ldr	r0, [pc, #56]	; (12c34 <gcloud_publish+0x68>)
   12bfc:	f88d 3000 	strb.w	r3, [sp]
   12c00:	9001      	str	r0, [sp, #4]
                    .size = strlen(GCLOUD_TOPIC)
   12c02:	f7fe fc7d 	bl	11500 <strlen>
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   12c06:	f04f 32ff 	mov.w	r2, #4294967295
    struct gcloud_event cmd = {
   12c0a:	9002      	str	r0, [sp, #8]
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   12c0c:	f04f 33ff 	mov.w	r3, #4294967295
   12c10:	4669      	mov	r1, sp
   12c12:	4809      	ldr	r0, [pc, #36]	; (12c38 <gcloud_publish+0x6c>)
    struct gcloud_event cmd = {
   12c14:	e9cd 5404 	strd	r5, r4, [sp, #16]
   12c18:	f88d 600c 	strb.w	r6, [sp, #12]
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   12c1c:	f01c ffe0 	bl	2fbe0 <k_msgq_put_atomic>
    return err;
   12c20:	e7e8      	b.n	12bf4 <gcloud_publish+0x28>
   12c22:	bf00      	nop
   12c24:	2001ad6a 	.word	0x2001ad6a
   12c28:	000387c0 	.word	0x000387c0
   12c2c:	00038850 	.word	0x00038850
   12c30:	00039b33 	.word	0x00039b33
   12c34:	00039b6b 	.word	0x00039b6b
   12c38:	20014f80 	.word	0x20014f80

00012c3c <mqtt_event_handler>:
{
   12c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12c40:	b089      	sub	sp, #36	; 0x24
   12c42:	460d      	mov	r5, r1
   12c44:	4cb0      	ldr	r4, [pc, #704]	; (12f08 <mqtt_event_handler+0x2cc>)
   12c46:	4bb1      	ldr	r3, [pc, #708]	; (12f0c <mqtt_event_handler+0x2d0>)
    LOG_INF("MQTT event: %d", evt->type);
   12c48:	7809      	ldrb	r1, [r1, #0]
   12c4a:	1b1b      	subs	r3, r3, r4
   12c4c:	08db      	lsrs	r3, r3, #3
   12c4e:	019c      	lsls	r4, r3, #6
   12c50:	48af      	ldr	r0, [pc, #700]	; (12f10 <mqtt_event_handler+0x2d4>)
{
   12c52:	af02      	add	r7, sp, #8
    LOG_INF("MQTT event: %d", evt->type);
   12c54:	f044 0203 	orr.w	r2, r4, #3
   12c58:	f01d fb4b 	bl	302f2 <log_1>
    switch (evt->type) {
   12c5c:	782b      	ldrb	r3, [r5, #0]
   12c5e:	2b08      	cmp	r3, #8
   12c60:	f200 814d 	bhi.w	12efe <mqtt_event_handler+0x2c2>
   12c64:	e8df f013 	tbh	[pc, r3, lsl #1]
   12c68:	00ba0009 	.word	0x00ba0009
   12c6c:	00e7004a 	.word	0x00e7004a
   12c70:	011500f5 	.word	0x011500f5
   12c74:	012f0123 	.word	0x012f0123
   12c78:	013d      	.short	0x013d
            LOG_DBG("Got CONNACK");
   12c7a:	49a6      	ldr	r1, [pc, #664]	; (12f14 <mqtt_event_handler+0x2d8>)
   12c7c:	48a6      	ldr	r0, [pc, #664]	; (12f18 <mqtt_event_handler+0x2dc>)
   12c7e:	f044 0204 	orr.w	r2, r4, #4
   12c82:	f01d fb36 	bl	302f2 <log_1>
            if (evt->result != 0) {
   12c86:	69ed      	ldr	r5, [r5, #28]
   12c88:	b175      	cbz	r5, 12ca8 <mqtt_event_handler+0x6c>
                LOG_ERR("MQTT connect failed: [%d] %s", evt->result, strerror(evt->result));
   12c8a:	4628      	mov	r0, r5
   12c8c:	f01c f9c4 	bl	2f018 <strerror>
   12c90:	f044 0401 	orr.w	r4, r4, #1
   12c94:	4623      	mov	r3, r4
   12c96:	4629      	mov	r1, r5
   12c98:	4602      	mov	r2, r0
   12c9a:	48a0      	ldr	r0, [pc, #640]	; (12f1c <mqtt_event_handler+0x2e0>)
                LOG_ERR("k_msgq_put_atomic (subscribe) failed: [%d] %s", err, strerror(err));
   12c9c:	f01d fb3d 	bl	3031a <log_2>
}
   12ca0:	371c      	adds	r7, #28
   12ca2:	46bd      	mov	sp, r7
   12ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_sem_give(sem);
   12ca8:	489d      	ldr	r0, [pc, #628]	; (12f20 <mqtt_event_handler+0x2e4>)
   12caa:	f018 faa9 	bl	2b200 <z_impl_k_sem_give>
            connected = true;
   12cae:	2201      	movs	r2, #1
   12cb0:	4b9c      	ldr	r3, [pc, #624]	; (12f24 <mqtt_event_handler+0x2e8>)
   12cb2:	701a      	strb	r2, [r3, #0]
            connecting = false;
   12cb4:	4b9c      	ldr	r3, [pc, #624]	; (12f28 <mqtt_event_handler+0x2ec>)
   12cb6:	4a9d      	ldr	r2, [pc, #628]	; (12f2c <mqtt_event_handler+0x2f0>)
   12cb8:	701d      	strb	r5, [r3, #0]
   12cba:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   12cbc:	489c      	ldr	r0, [pc, #624]	; (12f30 <mqtt_event_handler+0x2f4>)
   12cbe:	e9cd 2300 	strd	r2, r3, [sp]
   12cc2:	f01a fe2f 	bl	2d924 <z_impl_k_timer_start>
            struct gcloud_event cmd = {
   12cc6:	4629      	mov	r1, r5
   12cc8:	2218      	movs	r2, #24
   12cca:	4638      	mov	r0, r7
   12ccc:	f024 fd79 	bl	377c2 <memset>
   12cd0:	2305      	movs	r3, #5
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   12cd2:	f04f 32ff 	mov.w	r2, #4294967295
            struct gcloud_event cmd = {
   12cd6:	703b      	strb	r3, [r7, #0]
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   12cd8:	4639      	mov	r1, r7
   12cda:	f04f 33ff 	mov.w	r3, #4294967295
   12cde:	4895      	ldr	r0, [pc, #596]	; (12f34 <mqtt_event_handler+0x2f8>)
   12ce0:	f01c ff7e 	bl	2fbe0 <k_msgq_put_atomic>
            if (err) {
   12ce4:	4605      	mov	r5, r0
   12ce6:	2800      	cmp	r0, #0
   12ce8:	d0da      	beq.n	12ca0 <mqtt_event_handler+0x64>
                LOG_ERR("k_msgq_put_atomic (subscribe) failed: [%d] %s", err, strerror(err));
   12cea:	f01c f995 	bl	2f018 <strerror>
   12cee:	f044 0401 	orr.w	r4, r4, #1
   12cf2:	4602      	mov	r2, r0
   12cf4:	4623      	mov	r3, r4
   12cf6:	4629      	mov	r1, r5
   12cf8:	488f      	ldr	r0, [pc, #572]	; (12f38 <mqtt_event_handler+0x2fc>)
   12cfa:	e7cf      	b.n	12c9c <mqtt_event_handler+0x60>
            LOG_DBG("MQTT PUBLISH event");
   12cfc:	4985      	ldr	r1, [pc, #532]	; (12f14 <mqtt_event_handler+0x2d8>)
   12cfe:	488f      	ldr	r0, [pc, #572]	; (12f3c <mqtt_event_handler+0x300>)
   12d00:	f044 0204 	orr.w	r2, r4, #4
   12d04:	f01d faf5 	bl	302f2 <log_1>
            if (evt->result != 0) {
   12d08:	69ee      	ldr	r6, [r5, #28]
   12d0a:	b156      	cbz	r6, 12d22 <mqtt_event_handler+0xe6>
                LOG_ERR("Publish event error: [%d] %s", evt->result, strerror(-evt->result));
   12d0c:	4270      	negs	r0, r6
   12d0e:	f01c f983 	bl	2f018 <strerror>
   12d12:	f044 0801 	orr.w	r8, r4, #1
   12d16:	4602      	mov	r2, r0
   12d18:	4643      	mov	r3, r8
   12d1a:	4631      	mov	r1, r6
   12d1c:	4888      	ldr	r0, [pc, #544]	; (12f40 <mqtt_event_handler+0x304>)
   12d1e:	f01d fafc 	bl	3031a <log_2>
            if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   12d22:	7b2b      	ldrb	r3, [r5, #12]
   12d24:	2b01      	cmp	r3, #1
   12d26:	d10b      	bne.n	12d40 <mqtt_event_handler+0x104>
                const struct mqtt_puback_param ack = {
   12d28:	8b2b      	ldrh	r3, [r5, #24]
                mqtt_publish_qos1_ack(&client, &ack);
   12d2a:	4639      	mov	r1, r7
   12d2c:	4885      	ldr	r0, [pc, #532]	; (12f44 <mqtt_event_handler+0x308>)
                const struct mqtt_puback_param ack = {
   12d2e:	803b      	strh	r3, [r7, #0]
                mqtt_publish_qos1_ack(&client, &ack);
   12d30:	f021 f96c 	bl	3400c <mqtt_publish_qos1_ack>
                LOG_INF("Send acknowledgement for message with ID: %d", p->message_id);
   12d34:	8b29      	ldrh	r1, [r5, #24]
   12d36:	4884      	ldr	r0, [pc, #528]	; (12f48 <mqtt_event_handler+0x30c>)
   12d38:	f044 0203 	orr.w	r2, r4, #3
   12d3c:	f01d fad9 	bl	302f2 <log_1>
            if(p->message.payload.len <= 2) {
   12d40:	696a      	ldr	r2, [r5, #20]
   12d42:	2a02      	cmp	r2, #2
   12d44:	d805      	bhi.n	12d52 <mqtt_event_handler+0x116>
                LOG_WRN("Received empty payload");
   12d46:	4881      	ldr	r0, [pc, #516]	; (12f4c <mqtt_event_handler+0x310>)
   12d48:	f044 0102 	orr.w	r1, r4, #2
            LOG_ERR("Unknown mqtt event type");
   12d4c:	f01d fac4 	bl	302d8 <log_0>
   12d50:	e7a6      	b.n	12ca0 <mqtt_event_handler+0x64>
            LOG_DBG("Length of payload: %d", p->message.payload.len);
   12d52:	f044 0604 	orr.w	r6, r4, #4
            mqtt_readall_publish_payload(&client, payload_buffer, p->message.payload.len);
   12d56:	497e      	ldr	r1, [pc, #504]	; (12f50 <mqtt_event_handler+0x314>)
   12d58:	487a      	ldr	r0, [pc, #488]	; (12f44 <mqtt_event_handler+0x308>)
   12d5a:	f021 fa82 	bl	34262 <mqtt_readall_publish_payload>
            LOG_DBG("Length of payload: %d", p->message.payload.len);
   12d5e:	4633      	mov	r3, r6
   12d60:	696a      	ldr	r2, [r5, #20]
   12d62:	496c      	ldr	r1, [pc, #432]	; (12f14 <mqtt_event_handler+0x2d8>)
   12d64:	487b      	ldr	r0, [pc, #492]	; (12f54 <mqtt_event_handler+0x318>)
   12d66:	f01d fad8 	bl	3031a <log_2>
   12d6a:	6868      	ldr	r0, [r5, #4]
   12d6c:	f002 f916 	bl	14f9c <z_log_strdup>
            LOG_DBG("Topic: %s", log_strdup(p->message.topic.topic.utf8));
   12d70:	4633      	mov	r3, r6
   12d72:	4602      	mov	r2, r0
   12d74:	4967      	ldr	r1, [pc, #412]	; (12f14 <mqtt_event_handler+0x2d8>)
   12d76:	4878      	ldr	r0, [pc, #480]	; (12f58 <mqtt_event_handler+0x31c>)
   12d78:	f01d facf 	bl	3031a <log_2>
            LOG_DBG("QoS: %d", p->message.topic.qos);
   12d7c:	4633      	mov	r3, r6
   12d7e:	7b2a      	ldrb	r2, [r5, #12]
   12d80:	4964      	ldr	r1, [pc, #400]	; (12f14 <mqtt_event_handler+0x2d8>)
   12d82:	4876      	ldr	r0, [pc, #472]	; (12f5c <mqtt_event_handler+0x320>)
   12d84:	f01d fac9 	bl	3031a <log_2>
            data_print("Received: ", payload_buffer,
   12d88:	696e      	ldr	r6, [r5, #20]
{
   12d8a:	46e9      	mov	r9, sp
	char buf[len + 1];
   12d8c:	f106 0308 	add.w	r3, r6, #8
   12d90:	f023 0307 	bic.w	r3, r3, #7
   12d94:	ebad 0d03 	sub.w	sp, sp, r3
   12d98:	f10d 0808 	add.w	r8, sp, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12d9c:	4632      	mov	r2, r6
   12d9e:	496c      	ldr	r1, [pc, #432]	; (12f50 <mqtt_event_handler+0x314>)
   12da0:	4640      	mov	r0, r8
   12da2:	f024 fcee 	bl	37782 <memcpy>
	buf[len] = 0;
   12da6:	2300      	movs	r3, #0
   12da8:	486d      	ldr	r0, [pc, #436]	; (12f60 <mqtt_event_handler+0x324>)
   12daa:	f808 3006 	strb.w	r3, [r8, r6]
   12dae:	f002 f8f5 	bl	14f9c <z_log_strdup>
   12db2:	4606      	mov	r6, r0
   12db4:	4640      	mov	r0, r8
   12db6:	f002 f8f1 	bl	14f9c <z_log_strdup>
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   12dba:	f044 0403 	orr.w	r4, r4, #3
   12dbe:	4602      	mov	r2, r0
   12dc0:	4623      	mov	r3, r4
   12dc2:	4631      	mov	r1, r6
   12dc4:	4867      	ldr	r0, [pc, #412]	; (12f64 <mqtt_event_handler+0x328>)
   12dc6:	f01d faa8 	bl	3031a <log_2>
            if (received_config_handler != NULL) {
   12dca:	4b67      	ldr	r3, [pc, #412]	; (12f68 <mqtt_event_handler+0x32c>)
   12dcc:	46cd      	mov	sp, r9
   12dce:	681b      	ldr	r3, [r3, #0]
   12dd0:	2b00      	cmp	r3, #0
   12dd2:	f43f af65 	beq.w	12ca0 <mqtt_event_handler+0x64>
                received_config_handler(&p->message);
   12dd6:	1d28      	adds	r0, r5, #4
   12dd8:	4798      	blx	r3
   12dda:	e761      	b.n	12ca0 <mqtt_event_handler+0x64>
            LOG_DBG("MQTT client disconnected: [%d] %s", evt->result, strerror(-evt->result));
   12ddc:	69ed      	ldr	r5, [r5, #28]
   12dde:	f044 0604 	orr.w	r6, r4, #4
   12de2:	4268      	negs	r0, r5
   12de4:	f01c f918 	bl	2f018 <strerror>
   12de8:	462a      	mov	r2, r5
   12dea:	4603      	mov	r3, r0
   12dec:	4949      	ldr	r1, [pc, #292]	; (12f14 <mqtt_event_handler+0x2d8>)
   12dee:	485f      	ldr	r0, [pc, #380]	; (12f6c <mqtt_event_handler+0x330>)
   12df0:	f8ad 6000 	strh.w	r6, [sp]
   12df4:	f01d faaa 	bl	3034c <log_3>
	z_impl_k_timer_stop(timer);
   12df8:	484d      	ldr	r0, [pc, #308]	; (12f30 <mqtt_event_handler+0x2f4>)
   12dfa:	f024 fc21 	bl	37640 <z_impl_k_timer_stop>
		arch_syscall_invoke1(*(uintptr_t *)&msgq, K_SYSCALL_K_MSGQ_PURGE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_msgq_purge(msgq);
   12dfe:	484d      	ldr	r0, [pc, #308]	; (12f34 <mqtt_event_handler+0x2f8>)
   12e00:	f017 fe98 	bl	2ab34 <z_impl_k_msgq_purge>
            if (connected || connecting) {
   12e04:	4b47      	ldr	r3, [pc, #284]	; (12f24 <mqtt_event_handler+0x2e8>)
   12e06:	781b      	ldrb	r3, [r3, #0]
   12e08:	b923      	cbnz	r3, 12e14 <mqtt_event_handler+0x1d8>
   12e0a:	4b47      	ldr	r3, [pc, #284]	; (12f28 <mqtt_event_handler+0x2ec>)
   12e0c:	781b      	ldrb	r3, [r3, #0]
   12e0e:	2b00      	cmp	r3, #0
   12e10:	f43f af46 	beq.w	12ca0 <mqtt_event_handler+0x64>
                err = gcloud_connect(received_config_handler);
   12e14:	4b54      	ldr	r3, [pc, #336]	; (12f68 <mqtt_event_handler+0x32c>)
   12e16:	6818      	ldr	r0, [r3, #0]
   12e18:	f7ff feb6 	bl	12b88 <gcloud_connect>
                if (err) {
   12e1c:	4605      	mov	r5, r0
   12e1e:	2800      	cmp	r0, #0
   12e20:	f43f af3e 	beq.w	12ca0 <mqtt_event_handler+0x64>
                    LOG_ERR("k_msgq_put_atomic (reconnect) [%d] %s", err, strerror(err));
   12e24:	f01c f8f8 	bl	2f018 <strerror>
   12e28:	f044 0401 	orr.w	r4, r4, #1
   12e2c:	4602      	mov	r2, r0
   12e2e:	4623      	mov	r3, r4
   12e30:	4629      	mov	r1, r5
   12e32:	484f      	ldr	r0, [pc, #316]	; (12f70 <mqtt_event_handler+0x334>)
   12e34:	e732      	b.n	12c9c <mqtt_event_handler+0x60>
            if (evt->result != 0) {
   12e36:	69e9      	ldr	r1, [r5, #28]
   12e38:	b129      	cbz	r1, 12e46 <mqtt_event_handler+0x20a>
                LOG_ERR("MQTT PUBACK error: %d", evt->result);
   12e3a:	484e      	ldr	r0, [pc, #312]	; (12f74 <mqtt_event_handler+0x338>)
   12e3c:	f044 0201 	orr.w	r2, r4, #1
                LOG_ERR("MQTT UNSUBACK error: %d", evt->result);
   12e40:	f01d fa57 	bl	302f2 <log_1>
   12e44:	e72c      	b.n	12ca0 <mqtt_event_handler+0x64>
            LOG_DBG("PUBACK packet id: %d\n", evt->param.puback.message_id);
   12e46:	88aa      	ldrh	r2, [r5, #4]
   12e48:	4932      	ldr	r1, [pc, #200]	; (12f14 <mqtt_event_handler+0x2d8>)
   12e4a:	484b      	ldr	r0, [pc, #300]	; (12f78 <mqtt_event_handler+0x33c>)
   12e4c:	f044 0304 	orr.w	r3, r4, #4
   12e50:	e724      	b.n	12c9c <mqtt_event_handler+0x60>
            if (evt->result != 0) {
   12e52:	69e9      	ldr	r1, [r5, #28]
   12e54:	b119      	cbz	r1, 12e5e <mqtt_event_handler+0x222>
                LOG_ERR("MQTT PUBREC error: %d", evt->result);
   12e56:	4849      	ldr	r0, [pc, #292]	; (12f7c <mqtt_event_handler+0x340>)
   12e58:	f044 0201 	orr.w	r2, r4, #1
   12e5c:	e7f0      	b.n	12e40 <mqtt_event_handler+0x204>
            LOG_DBG("PUBREC packet id: %u", evt->param.pubrec.message_id);
   12e5e:	88aa      	ldrh	r2, [r5, #4]
   12e60:	492c      	ldr	r1, [pc, #176]	; (12f14 <mqtt_event_handler+0x2d8>)
   12e62:	4847      	ldr	r0, [pc, #284]	; (12f80 <mqtt_event_handler+0x344>)
   12e64:	f044 0304 	orr.w	r3, r4, #4
   12e68:	f01d fa57 	bl	3031a <log_2>
            const struct mqtt_pubrel_param rel_param = {
   12e6c:	88ab      	ldrh	r3, [r5, #4]
            err = mqtt_publish_qos2_release(&client, &rel_param);
   12e6e:	4639      	mov	r1, r7
   12e70:	4834      	ldr	r0, [pc, #208]	; (12f44 <mqtt_event_handler+0x308>)
            const struct mqtt_pubrel_param rel_param = {
   12e72:	803b      	strh	r3, [r7, #0]
            err = mqtt_publish_qos2_release(&client, &rel_param);
   12e74:	f021 f8f1 	bl	3405a <mqtt_publish_qos2_release>
            if (err != 0) {
   12e78:	4605      	mov	r5, r0
   12e7a:	2800      	cmp	r0, #0
   12e7c:	f43f af10 	beq.w	12ca0 <mqtt_event_handler+0x64>
                LOG_ERR("Failed to send MQTT PUBREL: [%d] %s", err, strerror(err));
   12e80:	f01c f8ca 	bl	2f018 <strerror>
   12e84:	f044 0401 	orr.w	r4, r4, #1
   12e88:	4602      	mov	r2, r0
   12e8a:	4623      	mov	r3, r4
   12e8c:	4629      	mov	r1, r5
   12e8e:	483d      	ldr	r0, [pc, #244]	; (12f84 <mqtt_event_handler+0x348>)
   12e90:	e704      	b.n	12c9c <mqtt_event_handler+0x60>
            LOG_DBG("MQTT PUBREL event");
   12e92:	4920      	ldr	r1, [pc, #128]	; (12f14 <mqtt_event_handler+0x2d8>)
   12e94:	483c      	ldr	r0, [pc, #240]	; (12f88 <mqtt_event_handler+0x34c>)
   12e96:	f044 0204 	orr.w	r2, r4, #4
   12e9a:	f01d fa2a 	bl	302f2 <log_1>
            if (evt->result != 0) {
   12e9e:	69e9      	ldr	r1, [r5, #28]
   12ea0:	2900      	cmp	r1, #0
   12ea2:	f43f aefd 	beq.w	12ca0 <mqtt_event_handler+0x64>
                LOG_ERR("PUBREL error: %d", evt->result);
   12ea6:	4839      	ldr	r0, [pc, #228]	; (12f8c <mqtt_event_handler+0x350>)
   12ea8:	f044 0201 	orr.w	r2, r4, #1
   12eac:	e7c8      	b.n	12e40 <mqtt_event_handler+0x204>
            if (evt->result != 0) {
   12eae:	69e9      	ldr	r1, [r5, #28]
   12eb0:	b119      	cbz	r1, 12eba <mqtt_event_handler+0x27e>
                LOG_ERR("MQTT PUBCOMP error: %d", evt->result);
   12eb2:	4837      	ldr	r0, [pc, #220]	; (12f90 <mqtt_event_handler+0x354>)
   12eb4:	f044 0201 	orr.w	r2, r4, #1
   12eb8:	e7c2      	b.n	12e40 <mqtt_event_handler+0x204>
            LOG_DBG("PUBCOMP packet id: %u", evt->param.pubcomp.message_id);
   12eba:	88aa      	ldrh	r2, [r5, #4]
   12ebc:	4915      	ldr	r1, [pc, #84]	; (12f14 <mqtt_event_handler+0x2d8>)
   12ebe:	4835      	ldr	r0, [pc, #212]	; (12f94 <mqtt_event_handler+0x358>)
   12ec0:	f044 0304 	orr.w	r3, r4, #4
   12ec4:	e6ea      	b.n	12c9c <mqtt_event_handler+0x60>
            LOG_DBG("Got SUBACK");
   12ec6:	4913      	ldr	r1, [pc, #76]	; (12f14 <mqtt_event_handler+0x2d8>)
   12ec8:	4833      	ldr	r0, [pc, #204]	; (12f98 <mqtt_event_handler+0x35c>)
   12eca:	f044 0204 	orr.w	r2, r4, #4
   12ece:	f01d fa10 	bl	302f2 <log_1>
            if (evt->result != 0) {
   12ed2:	69e9      	ldr	r1, [r5, #28]
   12ed4:	2900      	cmp	r1, #0
   12ed6:	f43f aee3 	beq.w	12ca0 <mqtt_event_handler+0x64>
                LOG_ERR("MQTT SUBACK error: %d", evt->result);
   12eda:	4830      	ldr	r0, [pc, #192]	; (12f9c <mqtt_event_handler+0x360>)
   12edc:	f044 0201 	orr.w	r2, r4, #1
   12ee0:	e7ae      	b.n	12e40 <mqtt_event_handler+0x204>
            LOG_DBG("MQTT UNSUBACK event");
   12ee2:	490c      	ldr	r1, [pc, #48]	; (12f14 <mqtt_event_handler+0x2d8>)
   12ee4:	482e      	ldr	r0, [pc, #184]	; (12fa0 <mqtt_event_handler+0x364>)
   12ee6:	f044 0204 	orr.w	r2, r4, #4
   12eea:	f01d fa02 	bl	302f2 <log_1>
            if (evt->result != 0) {
   12eee:	69e9      	ldr	r1, [r5, #28]
   12ef0:	2900      	cmp	r1, #0
   12ef2:	f43f aed5 	beq.w	12ca0 <mqtt_event_handler+0x64>
                LOG_ERR("MQTT UNSUBACK error: %d", evt->result);
   12ef6:	482b      	ldr	r0, [pc, #172]	; (12fa4 <mqtt_event_handler+0x368>)
   12ef8:	f044 0201 	orr.w	r2, r4, #1
   12efc:	e7a0      	b.n	12e40 <mqtt_event_handler+0x204>
            LOG_ERR("Unknown mqtt event type");
   12efe:	482a      	ldr	r0, [pc, #168]	; (12fa8 <mqtt_event_handler+0x36c>)
   12f00:	f044 0101 	orr.w	r1, r4, #1
   12f04:	e722      	b.n	12d4c <mqtt_event_handler+0x110>
   12f06:	bf00      	nop
   12f08:	000387c0 	.word	0x000387c0
   12f0c:	00038850 	.word	0x00038850
   12f10:	00039b8f 	.word	0x00039b8f
   12f14:	0003a527 	.word	0x0003a527
   12f18:	00039b9e 	.word	0x00039b9e
   12f1c:	00039bae 	.word	0x00039bae
   12f20:	20015030 	.word	0x20015030
   12f24:	2001ad6a 	.word	0x2001ad6a
   12f28:	2001ad6b 	.word	0x2001ad6b
   12f2c:	54600000 	.word	0x54600000
   12f30:	20014da8 	.word	0x20014da8
   12f34:	20014f80 	.word	0x20014f80
   12f38:	00039bcb 	.word	0x00039bcb
   12f3c:	00039bf9 	.word	0x00039bf9
   12f40:	00039c10 	.word	0x00039c10
   12f44:	20015f14 	.word	0x20015f14
   12f48:	00039c2d 	.word	0x00039c2d
   12f4c:	00039c5a 	.word	0x00039c5a
   12f50:	2001ae6c 	.word	0x2001ae6c
   12f54:	00039c71 	.word	0x00039c71
   12f58:	00039c8b 	.word	0x00039c8b
   12f5c:	00039c99 	.word	0x00039c99
   12f60:	00039ca5 	.word	0x00039ca5
   12f64:	00039cb0 	.word	0x00039cb0
   12f68:	20015fa0 	.word	0x20015fa0
   12f6c:	00039cb5 	.word	0x00039cb5
   12f70:	00039cdb 	.word	0x00039cdb
   12f74:	00039d01 	.word	0x00039d01
   12f78:	00039d17 	.word	0x00039d17
   12f7c:	00039d31 	.word	0x00039d31
   12f80:	00039d47 	.word	0x00039d47
   12f84:	00039d60 	.word	0x00039d60
   12f88:	00039d84 	.word	0x00039d84
   12f8c:	00039d9a 	.word	0x00039d9a
   12f90:	00039dab 	.word	0x00039dab
   12f94:	00039dc2 	.word	0x00039dc2
   12f98:	00039ddc 	.word	0x00039ddc
   12f9c:	00039deb 	.word	0x00039deb
   12fa0:	00039e01 	.word	0x00039e01
   12fa4:	00039e19 	.word	0x00039e19
   12fa8:	00039e31 	.word	0x00039e31

00012fac <gcloud_provision>:
int gcloud_provision(void) {
   12fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool cert_exists = false;
   12fb0:	2600      	movs	r6, #0
    err = modem_key_mgmt_exists(GCLOUD_SEC_TAG, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &cert_exists, &flags);
   12fb2:	f10d 0307 	add.w	r3, sp, #7
   12fb6:	4631      	mov	r1, r6
   12fb8:	4833      	ldr	r0, [pc, #204]	; (13088 <gcloud_provision+0xdc>)
   12fba:	f10d 0206 	add.w	r2, sp, #6
    bool cert_exists = false;
   12fbe:	f88d 6006 	strb.w	r6, [sp, #6]
    err = modem_key_mgmt_exists(GCLOUD_SEC_TAG, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &cert_exists, &flags);
   12fc2:	f010 fe89 	bl	23cd8 <modem_key_mgmt_exists>
    if(err) {
   12fc6:	4c31      	ldr	r4, [pc, #196]	; (1308c <gcloud_provision+0xe0>)
   12fc8:	4b31      	ldr	r3, [pc, #196]	; (13090 <gcloud_provision+0xe4>)
   12fca:	4605      	mov	r5, r0
   12fcc:	1ae4      	subs	r4, r4, r3
   12fce:	08e4      	lsrs	r4, r4, #3
   12fd0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 13098 <gcloud_provision+0xec>
   12fd4:	01a4      	lsls	r4, r4, #6
   12fd6:	2800      	cmp	r0, #0
   12fd8:	d03a      	beq.n	13050 <gcloud_provision+0xa4>
        LOG_ERR("Could not check if key exists. Will delete and try to write. Err: %d", err);
   12fda:	4601      	mov	r1, r0
   12fdc:	f044 0201 	orr.w	r2, r4, #1
   12fe0:	482c      	ldr	r0, [pc, #176]	; (13094 <gcloud_provision+0xe8>)
   12fe2:	f01d f986 	bl	302f2 <log_1>
        cert_exists = false;
   12fe6:	f88d 6006 	strb.w	r6, [sp, #6]
        LOG_DBG("No certificates present. Deleteting and writing new.");
   12fea:	492b      	ldr	r1, [pc, #172]	; (13098 <gcloud_provision+0xec>)
   12fec:	482b      	ldr	r0, [pc, #172]	; (1309c <gcloud_provision+0xf0>)
   12fee:	f044 0204 	orr.w	r2, r4, #4
   12ff2:	f01d f97e 	bl	302f2 <log_1>
        for (enum modem_key_mgmt_cred_type type = 0; type < 5; type++) {
   12ff6:	2600      	movs	r6, #0
            err = modem_key_mgmt_delete(sec_tag, type);
   12ff8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 13088 <gcloud_provision+0xdc>
                LOG_ERR("key delete err: [%d] %s", err, strerror(err));
   12ffc:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 130ac <gcloud_provision+0x100>
                LOG_DBG("No key present. Ignore and continue.");
   13000:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 130b0 <gcloud_provision+0x104>
            err = modem_key_mgmt_delete(sec_tag, type);
   13004:	4648      	mov	r0, r9
   13006:	b2f1      	uxtb	r1, r6
   13008:	f010 fe48 	bl	23c9c <modem_key_mgmt_delete>
            if (err == -ENOENT) {
   1300c:	1c83      	adds	r3, r0, #2
            err = modem_key_mgmt_delete(sec_tag, type);
   1300e:	4605      	mov	r5, r0
            if (err == -ENOENT) {
   13010:	d12c      	bne.n	1306c <gcloud_provision+0xc0>
                LOG_DBG("No key present. Ignore and continue.");
   13012:	4641      	mov	r1, r8
   13014:	4658      	mov	r0, fp
   13016:	f044 0204 	orr.w	r2, r4, #4
   1301a:	f01d f96a 	bl	302f2 <log_1>
        for (enum modem_key_mgmt_cred_type type = 0; type < 5; type++) {
   1301e:	3601      	adds	r6, #1
   13020:	2e05      	cmp	r6, #5
   13022:	d1ef      	bne.n	13004 <gcloud_provision+0x58>
        err = modem_key_mgmt_write(
   13024:	481e      	ldr	r0, [pc, #120]	; (130a0 <gcloud_provision+0xf4>)
   13026:	f7fe fa6b 	bl	11500 <strlen>
   1302a:	2100      	movs	r1, #0
   1302c:	4603      	mov	r3, r0
   1302e:	4a1c      	ldr	r2, [pc, #112]	; (130a0 <gcloud_provision+0xf4>)
   13030:	4815      	ldr	r0, [pc, #84]	; (13088 <gcloud_provision+0xdc>)
   13032:	f010 fe07 	bl	23c44 <modem_key_mgmt_write>
        if (err != 0) {
   13036:	4605      	mov	r5, r0
   13038:	b1a0      	cbz	r0, 13064 <gcloud_provision+0xb8>
            LOG_ERR("GCLOUD_CA_CERTIFICATE err: [%d] %s\n", err, strerror(err));
   1303a:	f01b ffed 	bl	2f018 <strerror>
   1303e:	f044 0401 	orr.w	r4, r4, #1
   13042:	4602      	mov	r2, r0
   13044:	4623      	mov	r3, r4
   13046:	4629      	mov	r1, r5
   13048:	4816      	ldr	r0, [pc, #88]	; (130a4 <gcloud_provision+0xf8>)
   1304a:	f01d f966 	bl	3031a <log_2>
            return err;
   1304e:	e009      	b.n	13064 <gcloud_provision+0xb8>
    if(cert_exists) {
   13050:	f89d 3006 	ldrb.w	r3, [sp, #6]
   13054:	2b00      	cmp	r3, #0
   13056:	d0c8      	beq.n	12fea <gcloud_provision+0x3e>
        LOG_DBG("CA Certificate is already present and we can continue.");
   13058:	4641      	mov	r1, r8
   1305a:	4813      	ldr	r0, [pc, #76]	; (130a8 <gcloud_provision+0xfc>)
   1305c:	f044 0204 	orr.w	r2, r4, #4
   13060:	f01d f947 	bl	302f2 <log_1>
}
   13064:	4628      	mov	r0, r5
   13066:	b003      	add	sp, #12
   13068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if (err) {
   1306c:	2800      	cmp	r0, #0
   1306e:	d0d6      	beq.n	1301e <gcloud_provision+0x72>
                LOG_ERR("key delete err: [%d] %s", err, strerror(err));
   13070:	f01b ffd2 	bl	2f018 <strerror>
   13074:	f044 0701 	orr.w	r7, r4, #1
   13078:	4602      	mov	r2, r0
   1307a:	463b      	mov	r3, r7
   1307c:	4629      	mov	r1, r5
   1307e:	4650      	mov	r0, sl
   13080:	f01d f94b 	bl	3031a <log_2>
   13084:	e7cb      	b.n	1301e <gcloud_provision+0x72>
   13086:	bf00      	nop
   13088:	01010000 	.word	0x01010000
   1308c:	00038850 	.word	0x00038850
   13090:	000387c0 	.word	0x000387c0
   13094:	00039e49 	.word	0x00039e49
   13098:	0003a516 	.word	0x0003a516
   1309c:	00039ec9 	.word	0x00039ec9
   130a0:	00039f43 	.word	0x00039f43
   130a4:	0003a179 	.word	0x0003a179
   130a8:	00039e8e 	.word	0x00039e8e
   130ac:	00039f2b 	.word	0x00039f2b
   130b0:	00039f02 	.word	0x00039f02

000130b4 <gcloud_thread>:

extern void gcloud_thread(void *unused1, void *unused2, void *unused3) 
{
   130b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bool sent_flag = false;

    struct gcloud_event event;
    struct mqtt_publish_param msg;

    k_timer_init(&reconnect_timer, reconnect_timer_handler, NULL);
   130b8:	2200      	movs	r2, #0
   130ba:	49b1      	ldr	r1, [pc, #708]	; (13380 <gcloud_thread+0x2cc>)
   130bc:	48b1      	ldr	r0, [pc, #708]	; (13384 <gcloud_thread+0x2d0>)
{
   130be:	b0ab      	sub	sp, #172	; 0xac
    k_timer_init(&reconnect_timer, reconnect_timer_handler, NULL);
   130c0:	f024 fab2 	bl	37628 <k_timer_init>
   130c4:	4cb0      	ldr	r4, [pc, #704]	; (13388 <gcloud_thread+0x2d4>)
   130c6:	4bb1      	ldr	r3, [pc, #708]	; (1338c <gcloud_thread+0x2d8>)

    LOG_INF("Google Cloud Thread Running\n");
   130c8:	48b1      	ldr	r0, [pc, #708]	; (13390 <gcloud_thread+0x2dc>)
   130ca:	1ae4      	subs	r4, r4, r3
   130cc:	08e4      	lsrs	r4, r4, #3
   130ce:	01a4      	lsls	r4, r4, #6
   130d0:	f044 0103 	orr.w	r1, r4, #3
   130d4:	f01d f900 	bl	302d8 <log_0>
    while (true) {

        k_msgq_get_atomic(&gcloud_msgq, &event, K_FOREVER);
   130d8:	f8df 8348 	ldr.w	r8, [pc, #840]	; 13424 <gcloud_thread+0x370>
                }

            };
            break;
            case SUBSCRIBE:
            if (connected) {
   130dc:	4fad      	ldr	r7, [pc, #692]	; (13394 <gcloud_thread+0x2e0>)
        k_msgq_get_atomic(&gcloud_msgq, &event, K_FOREVER);
   130de:	f04f 33ff 	mov.w	r3, #4294967295
   130e2:	f04f 32ff 	mov.w	r2, #4294967295
   130e6:	4640      	mov	r0, r8
   130e8:	a90a      	add	r1, sp, #40	; 0x28
   130ea:	f01c fd69 	bl	2fbc0 <k_msgq_get_atomic>
        switch (event.type) {
   130ee:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   130f2:	2b05      	cmp	r3, #5
   130f4:	f200 81fa 	bhi.w	134ec <gcloud_thread+0x438>
   130f8:	e8df f013 	tbh	[pc, r3, lsl #1]
   130fc:	00de0006 	.word	0x00de0006
   13100:	01960111 	.word	0x01960111
   13104:	01d8019c 	.word	0x01d8019c
    struct addrinfo hints = {
   13108:	2601      	movs	r6, #1
                LOG_INF("Got CONNECT command");
   1310a:	48a3      	ldr	r0, [pc, #652]	; (13398 <gcloud_thread+0x2e4>)
   1310c:	f044 0103 	orr.w	r1, r4, #3
                LOG_DBG("Initiating broker");
   13110:	f044 0904 	orr.w	r9, r4, #4
                LOG_INF("Got CONNECT command");
   13114:	f01d f8e0 	bl	302d8 <log_0>
                LOG_DBG("Initiating broker");
   13118:	464a      	mov	r2, r9
   1311a:	49a0      	ldr	r1, [pc, #640]	; (1339c <gcloud_thread+0x2e8>)
   1311c:	48a0      	ldr	r0, [pc, #640]	; (133a0 <gcloud_thread+0x2ec>)
   1311e:	f01d f8e8 	bl	302f2 <log_1>
    struct addrinfo hints = {
   13122:	2250      	movs	r2, #80	; 0x50
   13124:	2100      	movs	r1, #0
   13126:	a816      	add	r0, sp, #88	; 0x58
   13128:	f024 fb4b 	bl	377c2 <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   1312c:	2100      	movs	r1, #0
   1312e:	489d      	ldr	r0, [pc, #628]	; (133a4 <gcloud_thread+0x2f0>)
   13130:	ab09      	add	r3, sp, #36	; 0x24
   13132:	aa16      	add	r2, sp, #88	; 0x58
   13134:	e9cd 6618 	strd	r6, r6, [sp, #96]	; 0x60
   13138:	f01d fbdd 	bl	308f6 <zsock_getaddrinfo>
    if (err) {
   1313c:	4605      	mov	r5, r0
   1313e:	2800      	cmp	r0, #0
   13140:	d05d      	beq.n	131fe <gcloud_thread+0x14a>
        LOG_ERR("ERROR: getaddrinfo failed [%d] %s", err, strerror(err));
   13142:	f01b ff69 	bl	2f018 <strerror>
   13146:	4326      	orrs	r6, r4
   13148:	4602      	mov	r2, r0
   1314a:	4633      	mov	r3, r6
   1314c:	4629      	mov	r1, r5
   1314e:	4896      	ldr	r0, [pc, #600]	; (133a8 <gcloud_thread+0x2f4>)
   13150:	f01d f8e3 	bl	3031a <log_2>
                LOG_DBG("Making JWT");
   13154:	f044 0904 	orr.w	r9, r4, #4
   13158:	464a      	mov	r2, r9
   1315a:	4990      	ldr	r1, [pc, #576]	; (1339c <gcloud_thread+0x2e8>)
   1315c:	4893      	ldr	r0, [pc, #588]	; (133ac <gcloud_thread+0x2f8>)
    mqtt_client_init(&client);
   1315e:	4d94      	ldr	r5, [pc, #592]	; (133b0 <gcloud_thread+0x2fc>)
                LOG_DBG("Making JWT");
   13160:	f01d f8c7 	bl	302f2 <log_1>
                make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   13164:	f7ff fc40 	bl	129e8 <make_jwt.constprop.0>
                LOG_DBG("Initiating client");
   13168:	464a      	mov	r2, r9
   1316a:	498c      	ldr	r1, [pc, #560]	; (1339c <gcloud_thread+0x2e8>)
   1316c:	4891      	ldr	r0, [pc, #580]	; (133b4 <gcloud_thread+0x300>)
   1316e:	f01d f8c0 	bl	302f2 <log_1>
    mqtt_client_init(&client);
   13172:	4628      	mov	r0, r5
   13174:	f020 fea9 	bl	33eca <mqtt_client_init>
    int err = make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   13178:	f7ff fc36 	bl	129e8 <make_jwt.constprop.0>
    if (err != 0) {
   1317c:	4606      	mov	r6, r0
   1317e:	2800      	cmp	r0, #0
   13180:	d05d      	beq.n	1323e <gcloud_thread+0x18a>
        LOG_ERR("Unable to make jwt: [%d] %s", err, strerror(-err));
   13182:	4240      	negs	r0, r0
   13184:	f01b ff48 	bl	2f018 <strerror>
   13188:	f044 0901 	orr.w	r9, r4, #1
   1318c:	4602      	mov	r2, r0
   1318e:	464b      	mov	r3, r9
   13190:	4631      	mov	r1, r6
   13192:	4889      	ldr	r0, [pc, #548]	; (133b8 <gcloud_thread+0x304>)
   13194:	f01d f8c1 	bl	3031a <log_2>
                LOG_DBG("Connecting mqtt");
   13198:	4980      	ldr	r1, [pc, #512]	; (1339c <gcloud_thread+0x2e8>)
   1319a:	4888      	ldr	r0, [pc, #544]	; (133bc <gcloud_thread+0x308>)
   1319c:	f044 0204 	orr.w	r2, r4, #4
   131a0:	f01d f8a7 	bl	302f2 <log_1>
                connecting = true;
   131a4:	2201      	movs	r2, #1
   131a6:	4b86      	ldr	r3, [pc, #536]	; (133c0 <gcloud_thread+0x30c>)
                err = mqtt_connect(&client);
   131a8:	4881      	ldr	r0, [pc, #516]	; (133b0 <gcloud_thread+0x2fc>)
                connecting = true;
   131aa:	701a      	strb	r2, [r3, #0]
                err = mqtt_connect(&client);
   131ac:	f020 fea6 	bl	33efc <mqtt_connect>
                if (err) {
   131b0:	4606      	mov	r6, r0
   131b2:	b150      	cbz	r0, 131ca <gcloud_thread+0x116>
                    LOG_ERR("mqtt_connect failed: [%d] %s", err, strerror(-err));
   131b4:	4240      	negs	r0, r0
   131b6:	f01b ff2f 	bl	2f018 <strerror>
   131ba:	f044 0901 	orr.w	r9, r4, #1
   131be:	4602      	mov	r2, r0
   131c0:	464b      	mov	r3, r9
   131c2:	4631      	mov	r1, r6
   131c4:	487f      	ldr	r0, [pc, #508]	; (133c4 <gcloud_thread+0x310>)
   131c6:	f01d f8a8 	bl	3031a <log_2>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   131ca:	4b7f      	ldr	r3, [pc, #508]	; (133c8 <gcloud_thread+0x314>)
   131cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   131ce:	601a      	str	r2, [r3, #0]
	fds.events = POLLIN;
   131d0:	2201      	movs	r2, #1
   131d2:	809a      	strh	r2, [r3, #4]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   131d4:	2200      	movs	r2, #0
   131d6:	2300      	movs	r3, #0
   131d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   131dc:	2300      	movs	r3, #0
   131de:	2207      	movs	r2, #7
   131e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   131e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   131e8:	9300      	str	r3, [sp, #0]
   131ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   131ee:	4b77      	ldr	r3, [pc, #476]	; (133cc <gcloud_thread+0x318>)
   131f0:	4977      	ldr	r1, [pc, #476]	; (133d0 <gcloud_thread+0x31c>)
   131f2:	4878      	ldr	r0, [pc, #480]	; (133d4 <gcloud_thread+0x320>)
   131f4:	f017 fa30 	bl	2a658 <z_impl_k_thread_create>
                mqtt_tid = k_thread_create(&mqtt_thread, mqtt_stack_area, K_THREAD_STACK_SIZEOF(mqtt_stack_area),
   131f8:	4b77      	ldr	r3, [pc, #476]	; (133d8 <gcloud_thread+0x324>)
   131fa:	6018      	str	r0, [r3, #0]
                break;
   131fc:	e76f      	b.n	130de <gcloud_thread+0x2a>
    addr = result;
   131fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    while (addr != NULL) {
   13200:	b17b      	cbz	r3, 13222 <gcloud_thread+0x16e>
        if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   13202:	6959      	ldr	r1, [r3, #20]
   13204:	2908      	cmp	r1, #8
   13206:	d110      	bne.n	1322a <gcloud_thread+0x176>
            broker4->sin_port = htons(BROKER_PORT);
   13208:	f24b 3122 	movw	r1, #45858	; 0xb322
                ->sin_addr.s_addr;
   1320c:	699b      	ldr	r3, [r3, #24]
            LOG_DBG("IPv4 Address found 0x%08x",
   1320e:	4873      	ldr	r0, [pc, #460]	; (133dc <gcloud_thread+0x328>)
                ->sin_addr.s_addr;
   13210:	685a      	ldr	r2, [r3, #4]
            broker4->sin_addr.s_addr =
   13212:	4b73      	ldr	r3, [pc, #460]	; (133e0 <gcloud_thread+0x32c>)
            broker4->sin_port = htons(BROKER_PORT);
   13214:	8059      	strh	r1, [r3, #2]
            broker4->sin_addr.s_addr =
   13216:	605a      	str	r2, [r3, #4]
            broker4->sin_family = AF_INET;
   13218:	801e      	strh	r6, [r3, #0]
            LOG_DBG("IPv4 Address found 0x%08x",
   1321a:	4972      	ldr	r1, [pc, #456]	; (133e4 <gcloud_thread+0x330>)
   1321c:	464b      	mov	r3, r9
   1321e:	f01d f87c 	bl	3031a <log_2>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   13222:	9809      	ldr	r0, [sp, #36]	; 0x24
   13224:	f01d fb69 	bl	308fa <zsock_freeaddrinfo>
   13228:	e794      	b.n	13154 <gcloud_thread+0xa0>
            LOG_ERR("ai_addrlen = %u should be %u or %u",
   1322a:	f044 0301 	orr.w	r3, r4, #1
   1322e:	f8ad 3000 	strh.w	r3, [sp]
   13232:	2208      	movs	r2, #8
   13234:	2318      	movs	r3, #24
   13236:	486c      	ldr	r0, [pc, #432]	; (133e8 <gcloud_thread+0x334>)
   13238:	f01d f888 	bl	3034c <log_3>
        break;
   1323c:	e7f1      	b.n	13222 <gcloud_thread+0x16e>
   1323e:	486b      	ldr	r0, [pc, #428]	; (133ec <gcloud_thread+0x338>)
   13240:	f001 feac 	bl	14f9c <z_log_strdup>
    LOG_DBG("JWT:\n%s\n", log_strdup(jwt_buffer));
   13244:	464b      	mov	r3, r9
   13246:	4602      	mov	r2, r0
   13248:	4969      	ldr	r1, [pc, #420]	; (133f0 <gcloud_thread+0x33c>)
   1324a:	486a      	ldr	r0, [pc, #424]	; (133f4 <gcloud_thread+0x340>)
   1324c:	f01d f865 	bl	3031a <log_2>
    LOG_DBG("JWT length: %d\n", strlen(jwt_buffer));
   13250:	4866      	ldr	r0, [pc, #408]	; (133ec <gcloud_thread+0x338>)
   13252:	f7fe f955 	bl	11500 <strlen>
   13256:	464b      	mov	r3, r9
   13258:	4602      	mov	r2, r0
   1325a:	4965      	ldr	r1, [pc, #404]	; (133f0 <gcloud_thread+0x33c>)
   1325c:	4866      	ldr	r0, [pc, #408]	; (133f8 <gcloud_thread+0x344>)
   1325e:	f01d f85c 	bl	3031a <log_2>
    jwt_token.size = strlen(jwt_buffer);
   13262:	4862      	ldr	r0, [pc, #392]	; (133ec <gcloud_thread+0x338>)
   13264:	f7fe f94c 	bl	11500 <strlen>
   13268:	4e64      	ldr	r6, [pc, #400]	; (133fc <gcloud_thread+0x348>)
    client.broker = &mqtt_broker;
   1326a:	4b5d      	ldr	r3, [pc, #372]	; (133e0 <gcloud_thread+0x32c>)
    jwt_token.size = strlen(jwt_buffer);
   1326c:	6070      	str	r0, [r6, #4]
    client.broker = &mqtt_broker;
   1326e:	652b      	str	r3, [r5, #80]	; 0x50
    client.client_id.utf8 = (uint8_t *)GCLOUD_ID;
   13270:	4863      	ldr	r0, [pc, #396]	; (13400 <gcloud_thread+0x34c>)
    client.evt_cb = mqtt_event_handler;
   13272:	4b64      	ldr	r3, [pc, #400]	; (13404 <gcloud_thread+0x350>)
    client.client_id.utf8 = (uint8_t *)GCLOUD_ID;
   13274:	64a8      	str	r0, [r5, #72]	; 0x48
    client.evt_cb = mqtt_event_handler;
   13276:	666b      	str	r3, [r5, #100]	; 0x64
    client.client_id.size = strlen(GCLOUD_ID);
   13278:	f7fe f942 	bl	11500 <strlen>
	client.user_name = &username;
   1327c:	4b62      	ldr	r3, [pc, #392]	; (13408 <gcloud_thread+0x354>)
    client.client_id.size = strlen(GCLOUD_ID);
   1327e:	64e8      	str	r0, [r5, #76]	; 0x4c
	client.user_name = &username;
   13280:	656b      	str	r3, [r5, #84]	; 0x54
    client.protocol_version = MQTT_VERSION_3_1_1;
   13282:	2304      	movs	r3, #4
   13284:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
	client.rx_buf = rx_buffer;
   13288:	4b60      	ldr	r3, [pc, #384]	; (1340c <gcloud_thread+0x358>)
	client.password = &jwt_token;
   1328a:	65ae      	str	r6, [r5, #88]	; 0x58
	client.rx_buf = rx_buffer;
   1328c:	66ab      	str	r3, [r5, #104]	; 0x68
    client.rx_buf_size = 512;
   1328e:	f44f 7300 	mov.w	r3, #512	; 0x200
   13292:	66eb      	str	r3, [r5, #108]	; 0x6c
	client.tx_buf = tx_buffer;
   13294:	4b5e      	ldr	r3, [pc, #376]	; (13410 <gcloud_thread+0x35c>)
   13296:	672b      	str	r3, [r5, #112]	; 0x70
    client.tx_buf_size = 1024;
   13298:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1329c:	676b      	str	r3, [r5, #116]	; 0x74
	client.transport.type = MQTT_TRANSPORT_SECURE;
   1329e:	2301      	movs	r3, #1
   132a0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    client.clean_session = 1;
   132a4:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   132a8:	f043 0302 	orr.w	r3, r3, #2
   132ac:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
    client.keepalive = 120;
   132b0:	2378      	movs	r3, #120	; 0x78
   132b2:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
    return 0;
   132b6:	e76f      	b.n	13198 <gcloud_thread+0xe4>
            if (connected) {
   132b8:	783b      	ldrb	r3, [r7, #0]
   132ba:	2b00      	cmp	r3, #0
   132bc:	f43f af0f 	beq.w	130de <gcloud_thread+0x2a>
                LOG_DBG("Got PUBLISH_STATE command");
   132c0:	f044 0204 	orr.w	r2, r4, #4
   132c4:	4935      	ldr	r1, [pc, #212]	; (1339c <gcloud_thread+0x2e8>)
   132c6:	4853      	ldr	r0, [pc, #332]	; (13414 <gcloud_thread+0x360>)
                msg.message = event.param.publish_state;
   132c8:	ad10      	add	r5, sp, #64	; 0x40
   132ca:	ae0b      	add	r6, sp, #44	; 0x2c
                LOG_DBG("Got PUBLISH_STATE command");
   132cc:	f01d f811 	bl	302f2 <log_1>
                msg.message = event.param.publish_state;
   132d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   132d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   132d4:	6833      	ldr	r3, [r6, #0]
   132d6:	602b      	str	r3, [r5, #0]
	return z_impl_k_uptime_ticks();
   132d8:	f024 f977 	bl	375ca <z_impl_k_uptime_ticks>
   132dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   132e0:	fba0 0103 	umull	r0, r1, r0, r3
                msg.dup_flag = 0;
   132e4:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
   132e8:	0bc0      	lsrs	r0, r0, #15
                msg.message_id = k_uptime_get_32();
   132ea:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
                msg.dup_flag = 0;
   132ee:	f023 0303 	bic.w	r3, r3, #3
                err = mqtt_publish(&client, &msg);
   132f2:	482f      	ldr	r0, [pc, #188]	; (133b0 <gcloud_thread+0x2fc>)
   132f4:	a910      	add	r1, sp, #64	; 0x40
                msg.dup_flag = 0;
   132f6:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
                err = mqtt_publish(&client, &msg);
   132fa:	f020 fe42 	bl	33f82 <mqtt_publish>
                if (err) {
   132fe:	4605      	mov	r5, r0
   13300:	2800      	cmp	r0, #0
   13302:	f43f aeec 	beq.w	130de <gcloud_thread+0x2a>
                    LOG_ERR("mqtt_publish (state) failed: [%d] %s", err, strerror(-err));
   13306:	4240      	negs	r0, r0
   13308:	f01b fe86 	bl	2f018 <strerror>
   1330c:	f044 0601 	orr.w	r6, r4, #1
   13310:	4633      	mov	r3, r6
   13312:	4629      	mov	r1, r5
   13314:	4602      	mov	r2, r0
   13316:	4840      	ldr	r0, [pc, #256]	; (13418 <gcloud_thread+0x364>)
                LOG_DBG("Got SUBSCRIBE command");
                err = gcloud_subscribe();
                if (err) {
                    LOG_ERR("gcloud_subscribe failed: [%d] %s", err, strerror(-err));
   13318:	f01c ffff 	bl	3031a <log_2>
   1331c:	e6df      	b.n	130de <gcloud_thread+0x2a>
            if (connected) {
   1331e:	783b      	ldrb	r3, [r7, #0]
   13320:	2b00      	cmp	r3, #0
   13322:	f43f aedc 	beq.w	130de <gcloud_thread+0x2a>
                LOG_DBG("Got PUBLISH command");
   13326:	f044 0204 	orr.w	r2, r4, #4
   1332a:	491c      	ldr	r1, [pc, #112]	; (1339c <gcloud_thread+0x2e8>)
   1332c:	483b      	ldr	r0, [pc, #236]	; (1341c <gcloud_thread+0x368>)
                msg.message = event.param.publish;
   1332e:	ad10      	add	r5, sp, #64	; 0x40
   13330:	ae0b      	add	r6, sp, #44	; 0x2c
                LOG_DBG("Got PUBLISH command");
   13332:	f01c ffde 	bl	302f2 <log_1>
                msg.message = event.param.publish;
   13336:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1333a:	6833      	ldr	r3, [r6, #0]
   1333c:	602b      	str	r3, [r5, #0]
   1333e:	f024 f944 	bl	375ca <z_impl_k_uptime_ticks>
   13342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   13346:	fba0 0103 	umull	r0, r1, r0, r3
                msg.dup_flag = 0;
   1334a:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
   1334e:	0bc0      	lsrs	r0, r0, #15
                msg.message_id = k_uptime_get_32();
   13350:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
                msg.dup_flag = 0;
   13354:	f023 0303 	bic.w	r3, r3, #3
                err = mqtt_publish(&client, &msg);
   13358:	4815      	ldr	r0, [pc, #84]	; (133b0 <gcloud_thread+0x2fc>)
   1335a:	a910      	add	r1, sp, #64	; 0x40
                msg.dup_flag = 0;
   1335c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
                err = mqtt_publish(&client, &msg);
   13360:	f020 fe0f 	bl	33f82 <mqtt_publish>
                if (err) {
   13364:	4605      	mov	r5, r0
   13366:	2800      	cmp	r0, #0
   13368:	f43f aeb9 	beq.w	130de <gcloud_thread+0x2a>
                    LOG_ERR("mqtt_publish failed: [%d] %s", err, strerror(-err));
   1336c:	4240      	negs	r0, r0
   1336e:	f01b fe53 	bl	2f018 <strerror>
   13372:	f044 0601 	orr.w	r6, r4, #1
   13376:	4602      	mov	r2, r0
   13378:	4633      	mov	r3, r6
   1337a:	4629      	mov	r1, r5
   1337c:	4828      	ldr	r0, [pc, #160]	; (13420 <gcloud_thread+0x36c>)
   1337e:	e7cb      	b.n	13318 <gcloud_thread+0x264>
   13380:	00012991 	.word	0x00012991
   13384:	20014da8 	.word	0x20014da8
   13388:	00038850 	.word	0x00038850
   1338c:	000387c0 	.word	0x000387c0
   13390:	0003a19d 	.word	0x0003a19d
   13394:	2001ad6a 	.word	0x2001ad6a
   13398:	0003a1ba 	.word	0x0003a1ba
   1339c:	0003a53a 	.word	0x0003a53a
   133a0:	0003a1ce 	.word	0x0003a1ce
   133a4:	0003a1e4 	.word	0x0003a1e4
   133a8:	0003a1f8 	.word	0x0003a1f8
   133ac:	0003a25b 	.word	0x0003a25b
   133b0:	20015f14 	.word	0x20015f14
   133b4:	0003a26a 	.word	0x0003a26a
   133b8:	0003a280 	.word	0x0003a280
   133bc:	0003a323 	.word	0x0003a323
   133c0:	2001ad6b 	.word	0x2001ad6b
   133c4:	0003a337 	.word	0x0003a337
   133c8:	20015f94 	.word	0x20015f94
   133cc:	00012ab1 	.word	0x00012ab1
   133d0:	2001ecd8 	.word	0x2001ecd8
   133d4:	20015280 	.word	0x20015280
   133d8:	20015f9c 	.word	0x20015f9c
   133dc:	0003a21a 	.word	0x0003a21a
   133e0:	2001ad38 	.word	0x2001ad38
   133e4:	0003a4f5 	.word	0x0003a4f5
   133e8:	0003a238 	.word	0x0003a238
   133ec:	2001ad6c 	.word	0x2001ad6c
   133f0:	0003a50a 	.word	0x0003a50a
   133f4:	0003a29c 	.word	0x0003a29c
   133f8:	0003a2a9 	.word	0x0003a2a9
   133fc:	20014704 	.word	0x20014704
   13400:	0003a2bd 	.word	0x0003a2bd
   13404:	00012c3d 	.word	0x00012c3d
   13408:	2001470c 	.word	0x2001470c
   1340c:	2001b26c 	.word	0x2001b26c
   13410:	2001b66c 	.word	0x2001b66c
   13414:	0003a354 	.word	0x0003a354
   13418:	0003a372 	.word	0x0003a372
   1341c:	0003a397 	.word	0x0003a397
   13420:	0003a3af 	.word	0x0003a3af
   13424:	20014f80 	.word	0x20014f80
                LOG_DBG("Got RECONNECT_TIMEOUT command");
   13428:	4933      	ldr	r1, [pc, #204]	; (134f8 <gcloud_thread+0x444>)
   1342a:	4834      	ldr	r0, [pc, #208]	; (134fc <gcloud_thread+0x448>)
   1342c:	f044 0204 	orr.w	r2, r4, #4
   13430:	f01c ff5f 	bl	302f2 <log_1>
                LOG_DBG("Got DISCONNECT command");
   13434:	f044 0504 	orr.w	r5, r4, #4
   13438:	462a      	mov	r2, r5
   1343a:	492f      	ldr	r1, [pc, #188]	; (134f8 <gcloud_thread+0x444>)
   1343c:	4830      	ldr	r0, [pc, #192]	; (13500 <gcloud_thread+0x44c>)
   1343e:	f01c ff58 	bl	302f2 <log_1>
            if (connected) {
   13442:	783b      	ldrb	r3, [r7, #0]
   13444:	2b00      	cmp	r3, #0
   13446:	f43f ae4a 	beq.w	130de <gcloud_thread+0x2a>
	z_impl_k_timer_stop(timer);
   1344a:	482e      	ldr	r0, [pc, #184]	; (13504 <gcloud_thread+0x450>)
   1344c:	f024 f8f8 	bl	37640 <z_impl_k_timer_stop>
                LOG_DBG("Disconnecting mqtt");
   13450:	462a      	mov	r2, r5
   13452:	4929      	ldr	r1, [pc, #164]	; (134f8 <gcloud_thread+0x444>)
   13454:	482c      	ldr	r0, [pc, #176]	; (13508 <gcloud_thread+0x454>)
   13456:	f01c ff4c 	bl	302f2 <log_1>
                err = mqtt_disconnect(&client);
   1345a:	482c      	ldr	r0, [pc, #176]	; (1350c <gcloud_thread+0x458>)
   1345c:	f020 fe24 	bl	340a8 <mqtt_disconnect>
                if (err) {
   13460:	4605      	mov	r5, r0
   13462:	b150      	cbz	r0, 1347a <gcloud_thread+0x3c6>
                    LOG_ERR("mqtt_disconnect (reconnect) failed: [%d] %s", err, strerror(-err));
   13464:	4240      	negs	r0, r0
   13466:	f01b fdd7 	bl	2f018 <strerror>
   1346a:	f044 0601 	orr.w	r6, r4, #1
   1346e:	4602      	mov	r2, r0
   13470:	4633      	mov	r3, r6
   13472:	4629      	mov	r1, r5
   13474:	4826      	ldr	r0, [pc, #152]	; (13510 <gcloud_thread+0x45c>)
   13476:	f01c ff50 	bl	3031a <log_2>
	z_impl_k_msgq_purge(msgq);
   1347a:	4640      	mov	r0, r8
   1347c:	f017 fb5a 	bl	2ab34 <z_impl_k_msgq_purge>
                k_thread_abort(mqtt_tid);
   13480:	4b24      	ldr	r3, [pc, #144]	; (13514 <gcloud_thread+0x460>)
   13482:	6818      	ldr	r0, [r3, #0]
                connected = false;
   13484:	2600      	movs	r6, #0
	z_impl_k_thread_abort(thread);
   13486:	f004 fcc1 	bl	17e0c <z_impl_k_thread_abort>
                if (event.type == DISCONNECT) {
   1348a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1348e:	4d22      	ldr	r5, [pc, #136]	; (13518 <gcloud_thread+0x464>)
   13490:	2b04      	cmp	r3, #4
                connected = false;
   13492:	703e      	strb	r6, [r7, #0]
                if (event.type == DISCONNECT) {
   13494:	d107      	bne.n	134a6 <gcloud_thread+0x3f2>
                    LOG_DBG("Not setting connecting flag");
   13496:	4918      	ldr	r1, [pc, #96]	; (134f8 <gcloud_thread+0x444>)
   13498:	4820      	ldr	r0, [pc, #128]	; (1351c <gcloud_thread+0x468>)
   1349a:	f044 0204 	orr.w	r2, r4, #4
   1349e:	f01c ff28 	bl	302f2 <log_1>
                    connecting = false;
   134a2:	702e      	strb	r6, [r5, #0]
   134a4:	e61b      	b.n	130de <gcloud_thread+0x2a>
                    connecting = true;
   134a6:	2301      	movs	r3, #1
   134a8:	702b      	strb	r3, [r5, #0]
   134aa:	e618      	b.n	130de <gcloud_thread+0x2a>
            if (connected) {
   134ac:	783b      	ldrb	r3, [r7, #0]
   134ae:	2b00      	cmp	r3, #0
   134b0:	f43f ae15 	beq.w	130de <gcloud_thread+0x2a>
                LOG_DBG("Got SUBSCRIBE command");
   134b4:	4910      	ldr	r1, [pc, #64]	; (134f8 <gcloud_thread+0x444>)
   134b6:	481a      	ldr	r0, [pc, #104]	; (13520 <gcloud_thread+0x46c>)
   134b8:	f044 0204 	orr.w	r2, r4, #4
   134bc:	f01c ff19 	bl	302f2 <log_1>
    const struct mqtt_subscription_list subscriptions = {
   134c0:	4b18      	ldr	r3, [pc, #96]	; (13524 <gcloud_thread+0x470>)
    return mqtt_subscribe(&client, &subscriptions);
   134c2:	4812      	ldr	r0, [pc, #72]	; (1350c <gcloud_thread+0x458>)
    const struct mqtt_subscription_list subscriptions = {
   134c4:	9316      	str	r3, [sp, #88]	; 0x58
   134c6:	4b18      	ldr	r3, [pc, #96]	; (13528 <gcloud_thread+0x474>)
    return mqtt_subscribe(&client, &subscriptions);
   134c8:	a916      	add	r1, sp, #88	; 0x58
    const struct mqtt_subscription_list subscriptions = {
   134ca:	9317      	str	r3, [sp, #92]	; 0x5c
    return mqtt_subscribe(&client, &subscriptions);
   134cc:	f020 fe15 	bl	340fa <mqtt_subscribe>
                if (err) {
   134d0:	4605      	mov	r5, r0
   134d2:	2800      	cmp	r0, #0
   134d4:	f43f ae03 	beq.w	130de <gcloud_thread+0x2a>
                    LOG_ERR("gcloud_subscribe failed: [%d] %s", err, strerror(-err));
   134d8:	4240      	negs	r0, r0
   134da:	f01b fd9d 	bl	2f018 <strerror>
   134de:	f044 0601 	orr.w	r6, r4, #1
   134e2:	4602      	mov	r2, r0
   134e4:	4633      	mov	r3, r6
   134e6:	4629      	mov	r1, r5
   134e8:	4810      	ldr	r0, [pc, #64]	; (1352c <gcloud_thread+0x478>)
   134ea:	e715      	b.n	13318 <gcloud_thread+0x264>
                    // TODO: Find a way to report this error to the application.
                }
            };
            break;
            default:
                LOG_ERR("Unknown event type received");
   134ec:	4810      	ldr	r0, [pc, #64]	; (13530 <gcloud_thread+0x47c>)
   134ee:	f044 0101 	orr.w	r1, r4, #1
   134f2:	f01c fef1 	bl	302d8 <log_0>
    while (true) {
   134f6:	e5f2      	b.n	130de <gcloud_thread+0x2a>
   134f8:	0003a53a 	.word	0x0003a53a
   134fc:	0003a3cc 	.word	0x0003a3cc
   13500:	0003a3ee 	.word	0x0003a3ee
   13504:	20014da8 	.word	0x20014da8
   13508:	0003a409 	.word	0x0003a409
   1350c:	20015f14 	.word	0x20015f14
   13510:	0003a420 	.word	0x0003a420
   13514:	20015f9c 	.word	0x20015f9c
   13518:	2001ad6b 	.word	0x2001ad6b
   1351c:	0003a44c 	.word	0x0003a44c
   13520:	0003a46c 	.word	0x0003a46c
   13524:	200146f8 	.word	0x200146f8
   13528:	002a0001 	.word	0x002a0001
   1352c:	0003a486 	.word	0x0003a486
   13530:	0003a4a7 	.word	0x0003a4a7

00013534 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   13534:	2803      	cmp	r0, #3
{
   13536:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   13538:	d906      	bls.n	13548 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   1353a:	f01e ff9b 	bl	32474 <__errno>
   1353e:	2309      	movs	r3, #9
   13540:	6003      	str	r3, [r0, #0]
   13542:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   13546:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13548:	4b04      	ldr	r3, [pc, #16]	; (1355c <_check_fd+0x28>)
   1354a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1354e:	3008      	adds	r0, #8
   13550:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   13554:	2b00      	cmp	r3, #0
   13556:	d0f0      	beq.n	1353a <_check_fd+0x6>
	return 0;
   13558:	2000      	movs	r0, #0
   1355a:	e7f4      	b.n	13546 <_check_fd+0x12>
   1355c:	20015fa4 	.word	0x20015fa4

00013560 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   13560:	b570      	push	{r4, r5, r6, lr}
   13562:	4604      	mov	r4, r0
   13564:	460d      	mov	r5, r1
   13566:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   13568:	f7ff ffe4 	bl	13534 <_check_fd>
   1356c:	2800      	cmp	r0, #0
   1356e:	db09      	blt.n	13584 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   13570:	4b06      	ldr	r3, [pc, #24]	; (1358c <z_get_fd_obj+0x2c>)
   13572:	0160      	lsls	r0, r4, #5
   13574:	b145      	cbz	r5, 13588 <z_get_fd_obj+0x28>
   13576:	181a      	adds	r2, r3, r0
   13578:	6852      	ldr	r2, [r2, #4]
   1357a:	42aa      	cmp	r2, r5
   1357c:	d004      	beq.n	13588 <z_get_fd_obj+0x28>
		errno = err;
   1357e:	f01e ff79 	bl	32474 <__errno>
   13582:	6006      	str	r6, [r0, #0]
		return NULL;
   13584:	2000      	movs	r0, #0
   13586:	e000      	b.n	1358a <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   13588:	5818      	ldr	r0, [r3, r0]
}
   1358a:	bd70      	pop	{r4, r5, r6, pc}
   1358c:	20015fa4 	.word	0x20015fa4

00013590 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   13590:	b570      	push	{r4, r5, r6, lr}
   13592:	4604      	mov	r4, r0
   13594:	460e      	mov	r6, r1
   13596:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   13598:	f7ff ffcc 	bl	13534 <_check_fd>
   1359c:	2800      	cmp	r0, #0
   1359e:	db0c      	blt.n	135ba <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   135a0:	4b07      	ldr	r3, [pc, #28]	; (135c0 <z_get_fd_obj_and_vtable+0x30>)
   135a2:	0161      	lsls	r1, r4, #5
   135a4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   135a8:	6862      	ldr	r2, [r4, #4]
   135aa:	6032      	str	r2, [r6, #0]

	if (lock) {
   135ac:	b11d      	cbz	r5, 135b6 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   135ae:	f101 020c 	add.w	r2, r1, #12
   135b2:	441a      	add	r2, r3
   135b4:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   135b6:	5858      	ldr	r0, [r3, r1]
}
   135b8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   135ba:	2000      	movs	r0, #0
   135bc:	e7fc      	b.n	135b8 <z_get_fd_obj_and_vtable+0x28>
   135be:	bf00      	nop
   135c0:	20015fa4 	.word	0x20015fa4

000135c4 <z_reserve_fd>:

int z_reserve_fd(void)
{
   135c4:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   135c6:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   135c8:	f04f 32ff 	mov.w	r2, #4294967295
   135cc:	f04f 33ff 	mov.w	r3, #4294967295
   135d0:	4814      	ldr	r0, [pc, #80]	; (13624 <z_reserve_fd+0x60>)
   135d2:	f017 faed 	bl	2abb0 <z_impl_k_mutex_lock>
   135d6:	4a14      	ldr	r2, [pc, #80]	; (13628 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   135d8:	0163      	lsls	r3, r4, #5
   135da:	e8d2 1faf 	lda	r1, [r2]
   135de:	b179      	cbz	r1, 13600 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   135e0:	3401      	adds	r4, #1
   135e2:	2c04      	cmp	r4, #4
   135e4:	f102 0220 	add.w	r2, r2, #32
   135e8:	d1f6      	bne.n	135d8 <z_reserve_fd+0x14>
	errno = ENFILE;
   135ea:	f01e ff43 	bl	32474 <__errno>
   135ee:	2317      	movs	r3, #23
	return -1;
   135f0:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   135f4:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   135f6:	480b      	ldr	r0, [pc, #44]	; (13624 <z_reserve_fd+0x60>)
   135f8:	f017 fbd4 	bl	2ada4 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   135fc:	4620      	mov	r0, r4
   135fe:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13600:	e8d2 0fef 	ldaex	r0, [r2]
   13604:	3001      	adds	r0, #1
   13606:	e8c2 0fec 	stlex	ip, r0, [r2]
   1360a:	f1bc 0f00 	cmp.w	ip, #0
   1360e:	d1f7      	bne.n	13600 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   13610:	4806      	ldr	r0, [pc, #24]	; (1362c <z_reserve_fd+0x68>)
   13612:	18c2      	adds	r2, r0, r3
   13614:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   13616:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   13618:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   1361a:	4418      	add	r0, r3
   1361c:	f023 ff0b 	bl	37436 <z_impl_k_mutex_init>
   13620:	e7e9      	b.n	135f6 <z_reserve_fd+0x32>
   13622:	bf00      	nop
   13624:	20014eac 	.word	0x20014eac
   13628:	20015fac 	.word	0x20015fac
   1362c:	20015fa4 	.word	0x20015fa4

00013630 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   13630:	b410      	push	{r4}
   13632:	4614      	mov	r4, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   13634:	4b09      	ldr	r3, [pc, #36]	; (1365c <z_finalize_fd+0x2c>)
   13636:	0142      	lsls	r2, r0, #5
   13638:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1363c:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   1363e:	6044      	str	r4, [r0, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   13640:	b14c      	cbz	r4, 13656 <z_finalize_fd+0x26>
   13642:	68e0      	ldr	r0, [r4, #12]
   13644:	b138      	cbz	r0, 13656 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   13646:	320c      	adds	r2, #12
   13648:	4620      	mov	r0, r4
   1364a:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   1364c:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1364e:	f240 1205 	movw	r2, #261	; 0x105
   13652:	f01c bad5 	b.w	2fc00 <z_fdtable_call_ioctl.constprop.0>
}
   13656:	bc10      	pop	{r4}
   13658:	4770      	bx	lr
   1365a:	bf00      	nop
   1365c:	20015fa4 	.word	0x20015fa4

00013660 <z_free_fd>:

void z_free_fd(int fd)
{
   13660:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   13662:	4b0d      	ldr	r3, [pc, #52]	; (13698 <z_free_fd+0x38>)
   13664:	0140      	lsls	r0, r0, #5
   13666:	f100 0208 	add.w	r2, r0, #8
   1366a:	441a      	add	r2, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1366c:	e8d2 1faf 	lda	r1, [r2]
		if (!old_rc) {
   13670:	b181      	cbz	r1, 13694 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   13672:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13674:	e8d2 5fef 	ldaex	r5, [r2]
   13678:	428d      	cmp	r5, r1
   1367a:	d104      	bne.n	13686 <z_free_fd+0x26>
   1367c:	e8c2 4fec 	stlex	ip, r4, [r2]
   13680:	f1bc 0f00 	cmp.w	ip, #0
   13684:	d1f6      	bne.n	13674 <z_free_fd+0x14>
   13686:	d1f1      	bne.n	1366c <z_free_fd+0xc>
	if (old_rc != 1) {
   13688:	2901      	cmp	r1, #1
	fdtable[fd].obj = NULL;
   1368a:	bf01      	itttt	eq
   1368c:	2200      	moveq	r2, #0
   1368e:	1819      	addeq	r1, r3, r0
   13690:	501a      	streq	r2, [r3, r0]
	fdtable[fd].vtable = NULL;
   13692:	604a      	streq	r2, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   13694:	bd30      	pop	{r4, r5, pc}
   13696:	bf00      	nop
   13698:	20015fa4 	.word	0x20015fa4

0001369c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1369c:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1369e:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   136a0:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   136a4:	2b02      	cmp	r3, #2
{
   136a6:	4604      	mov	r4, r0
   136a8:	460e      	mov	r6, r1
	notify->result = res;
   136aa:	6081      	str	r1, [r0, #8]
	switch (method) {
   136ac:	d010      	beq.n	136d0 <sys_notify_finalize+0x34>
   136ae:	2b03      	cmp	r3, #3
   136b0:	d004      	beq.n	136bc <sys_notify_finalize+0x20>
   136b2:	2b01      	cmp	r3, #1
   136b4:	d10f      	bne.n	136d6 <sys_notify_finalize+0x3a>
   136b6:	2500      	movs	r5, #0
   136b8:	4628      	mov	r0, r5
   136ba:	e001      	b.n	136c0 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   136bc:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   136be:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   136c0:	2300      	movs	r3, #0
   136c2:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   136c4:	b110      	cbz	r0, 136cc <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   136c6:	4631      	mov	r1, r6
   136c8:	f01a fd4e 	bl	2e168 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   136cc:	4628      	mov	r0, r5
   136ce:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   136d0:	2500      	movs	r5, #0
		sig = notify->method.signal;
   136d2:	6800      	ldr	r0, [r0, #0]
		break;
   136d4:	e7f4      	b.n	136c0 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   136d6:	2345      	movs	r3, #69	; 0x45
   136d8:	4a05      	ldr	r2, [pc, #20]	; (136f0 <sys_notify_finalize+0x54>)
   136da:	4906      	ldr	r1, [pc, #24]	; (136f4 <sys_notify_finalize+0x58>)
   136dc:	4806      	ldr	r0, [pc, #24]	; (136f8 <sys_notify_finalize+0x5c>)
   136de:	f01c fac7 	bl	2fc70 <printk>
   136e2:	2145      	movs	r1, #69	; 0x45
   136e4:	4802      	ldr	r0, [pc, #8]	; (136f0 <sys_notify_finalize+0x54>)
   136e6:	f01c fda9 	bl	3023c <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   136ea:	2500      	movs	r5, #0
   136ec:	e7e7      	b.n	136be <sys_notify_finalize+0x22>
   136ee:	bf00      	nop
   136f0:	0003a548 	.word	0x0003a548
   136f4:	00040e81 	.word	0x00040e81
   136f8:	0003a56b 	.word	0x0003a56b

000136fc <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   136fc:	4b01      	ldr	r3, [pc, #4]	; (13704 <__printk_hook_install+0x8>)
   136fe:	6018      	str	r0, [r3, #0]
}
   13700:	4770      	bx	lr
   13702:	bf00      	nop
   13704:	20014718 	.word	0x20014718

00013708 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   13708:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   1370a:	2500      	movs	r5, #0
{
   1370c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   1370e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   13712:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   13714:	a901      	add	r1, sp, #4
   13716:	4805      	ldr	r0, [pc, #20]	; (1372c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   13718:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   1371a:	f000 fe15 	bl	14348 <cbvprintf>

	if (ctx.count < ctx.max) {
   1371e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   13722:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   13724:	bfb8      	it	lt
   13726:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   13728:	b005      	add	sp, #20
   1372a:	bd30      	pop	{r4, r5, pc}
   1372c:	0002fc4b 	.word	0x0002fc4b

00013730 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   13730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13734:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   13738:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1373a:	f019 0f08 	tst.w	r9, #8
{
   1373e:	4604      	mov	r4, r0
   13740:	9203      	str	r2, [sp, #12]
	if (processing) {
   13742:	d022      	beq.n	1378a <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   13744:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   13746:	bf0c      	ite	eq
   13748:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1374c:	f049 0920 	orrne.w	r9, r9, #32
   13750:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   13754:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13756:	4620      	mov	r0, r4
   13758:	f017 f86a 	bl	2a830 <z_spin_unlock_valid>
   1375c:	b968      	cbnz	r0, 1377a <process_event+0x4a>
   1375e:	23ac      	movs	r3, #172	; 0xac
   13760:	4a9e      	ldr	r2, [pc, #632]	; (139dc <process_event+0x2ac>)
   13762:	499f      	ldr	r1, [pc, #636]	; (139e0 <process_event+0x2b0>)
   13764:	489f      	ldr	r0, [pc, #636]	; (139e4 <process_event+0x2b4>)
   13766:	f01c fa83 	bl	2fc70 <printk>
   1376a:	4621      	mov	r1, r4
   1376c:	489e      	ldr	r0, [pc, #632]	; (139e8 <process_event+0x2b8>)
   1376e:	f01c fa7f 	bl	2fc70 <printk>
   13772:	21ac      	movs	r1, #172	; 0xac
   13774:	4899      	ldr	r0, [pc, #612]	; (139dc <process_event+0x2ac>)
   13776:	f01c fd61 	bl	3023c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1377a:	9b03      	ldr	r3, [sp, #12]
   1377c:	f383 8811 	msr	BASEPRI, r3
   13780:	f3bf 8f6f 	isb	sy
}
   13784:	b005      	add	sp, #20
   13786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   1378a:	4f98      	ldr	r7, [pc, #608]	; (139ec <process_event+0x2bc>)
   1378c:	f8df 8254 	ldr.w	r8, [pc, #596]	; 139e4 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13790:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   13794:	2902      	cmp	r1, #2
   13796:	d106      	bne.n	137a6 <process_event+0x76>
			evt = process_recheck(mgr);
   13798:	4620      	mov	r0, r4
   1379a:	f01c fa9e 	bl	2fcda <process_recheck>
		if (evt == EVT_NOP) {
   1379e:	2800      	cmp	r0, #0
   137a0:	d0d8      	beq.n	13754 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   137a2:	2801      	cmp	r0, #1
   137a4:	d168      	bne.n	13878 <process_event+0x148>
			res = mgr->last_res;
   137a6:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   137aa:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   137ac:	f1bb 0f00 	cmp.w	fp, #0
   137b0:	da0a      	bge.n	137c8 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   137b2:	2600      	movs	r6, #0
		*clients = mgr->clients;
   137b4:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   137b6:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   137ba:	e9c4 6600 	strd	r6, r6, [r4]
   137be:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   137c2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   137c4:	9601      	str	r6, [sp, #4]
   137c6:	e027      	b.n	13818 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   137c8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   137cc:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   137ce:	2901      	cmp	r1, #1
   137d0:	d834      	bhi.n	1383c <process_event+0x10c>
	list->head = NULL;
   137d2:	2100      	movs	r1, #0
   137d4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   137d8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   137da:	6825      	ldr	r5, [r4, #0]
   137dc:	b29b      	uxth	r3, r3
	list->tail = NULL;
   137de:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   137e2:	d10c      	bne.n	137fe <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   137e4:	428d      	cmp	r5, r1
   137e6:	462a      	mov	r2, r5
   137e8:	bf38      	it	cc
   137ea:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   137ec:	b12a      	cbz	r2, 137fa <process_event+0xca>
				mgr->refs += 1U;
   137ee:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   137f0:	6812      	ldr	r2, [r2, #0]
   137f2:	3101      	adds	r1, #1
   137f4:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   137f6:	2a00      	cmp	r2, #0
   137f8:	d1f8      	bne.n	137ec <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   137fa:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   137fe:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   13800:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   13802:	f01c fa6a 	bl	2fcda <process_recheck>
   13806:	4606      	mov	r6, r0
   13808:	2800      	cmp	r0, #0
   1380a:	d0db      	beq.n	137c4 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1380c:	8ba3      	ldrh	r3, [r4, #28]
   1380e:	f043 0320 	orr.w	r3, r3, #32
   13812:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   13814:	2300      	movs	r3, #0
   13816:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13818:	8ba3      	ldrh	r3, [r4, #28]
   1381a:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1381e:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13820:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   13822:	d003      	beq.n	1382c <process_event+0xfc>
		if (do_monitors
   13824:	68a2      	ldr	r2, [r4, #8]
   13826:	2a00      	cmp	r2, #0
   13828:	f040 80f0 	bne.w	13a0c <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   1382c:	b91d      	cbnz	r5, 13836 <process_event+0x106>
		    || (transit != NULL)) {
   1382e:	9a01      	ldr	r2, [sp, #4]
   13830:	2a00      	cmp	r2, #0
   13832:	f000 8136 	beq.w	13aa2 <process_event+0x372>
   13836:	f04f 0900 	mov.w	r9, #0
   1383a:	e0e9      	b.n	13a10 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1383c:	2a04      	cmp	r2, #4
   1383e:	d10e      	bne.n	1385e <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13840:	f023 0307 	bic.w	r3, r3, #7
   13844:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   13846:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   13848:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1384a:	f01c fa46 	bl	2fcda <process_recheck>
   1384e:	4605      	mov	r5, r0
   13850:	b118      	cbz	r0, 1385a <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13852:	f042 0220 	orr.w	r2, r2, #32
   13856:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   13858:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1385a:	9501      	str	r5, [sp, #4]
   1385c:	e7dc      	b.n	13818 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   1385e:	4640      	mov	r0, r8
   13860:	f240 131b 	movw	r3, #283	; 0x11b
   13864:	463a      	mov	r2, r7
   13866:	4962      	ldr	r1, [pc, #392]	; (139f0 <process_event+0x2c0>)
   13868:	f01c fa02 	bl	2fc70 <printk>
   1386c:	f240 111b 	movw	r1, #283	; 0x11b
   13870:	4638      	mov	r0, r7
   13872:	f01c fce3 	bl	3023c <assert_post_action>
   13876:	e7ef      	b.n	13858 <process_event+0x128>
		} else if (evt == EVT_START) {
   13878:	2803      	cmp	r0, #3
   1387a:	d135      	bne.n	138e8 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1387c:	f1b9 0f00 	cmp.w	r9, #0
   13880:	d00b      	beq.n	1389a <process_event+0x16a>
   13882:	4640      	mov	r0, r8
   13884:	495b      	ldr	r1, [pc, #364]	; (139f4 <process_event+0x2c4>)
   13886:	f44f 73ab 	mov.w	r3, #342	; 0x156
   1388a:	463a      	mov	r2, r7
   1388c:	f01c f9f0 	bl	2fc70 <printk>
   13890:	f44f 71ab 	mov.w	r1, #342	; 0x156
   13894:	4638      	mov	r0, r7
   13896:	f01c fcd1 	bl	3023c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1389a:	6823      	ldr	r3, [r4, #0]
   1389c:	b95b      	cbnz	r3, 138b6 <process_event+0x186>
   1389e:	4640      	mov	r0, r8
   138a0:	4955      	ldr	r1, [pc, #340]	; (139f8 <process_event+0x2c8>)
   138a2:	f240 1357 	movw	r3, #343	; 0x157
   138a6:	463a      	mov	r2, r7
   138a8:	f01c f9e2 	bl	2fc70 <printk>
   138ac:	f240 1157 	movw	r1, #343	; 0x157
   138b0:	4638      	mov	r0, r7
   138b2:	f01c fcc3 	bl	3023c <assert_post_action>
			transit = mgr->transitions->start;
   138b6:	6923      	ldr	r3, [r4, #16]
   138b8:	681b      	ldr	r3, [r3, #0]
   138ba:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   138bc:	b95b      	cbnz	r3, 138d6 <process_event+0x1a6>
   138be:	4640      	mov	r0, r8
   138c0:	494e      	ldr	r1, [pc, #312]	; (139fc <process_event+0x2cc>)
   138c2:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   138c6:	463a      	mov	r2, r7
   138c8:	f01c f9d2 	bl	2fc70 <printk>
   138cc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   138d0:	4638      	mov	r0, r7
   138d2:	f01c fcb3 	bl	3023c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   138d6:	8ba3      	ldrh	r3, [r4, #28]
   138d8:	f023 0307 	bic.w	r3, r3, #7
   138dc:	f043 0306 	orr.w	r3, r3, #6
}
   138e0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   138e2:	83a3      	strh	r3, [r4, #28]
		res = 0;
   138e4:	46ab      	mov	fp, r5
}
   138e6:	e797      	b.n	13818 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   138e8:	2804      	cmp	r0, #4
   138ea:	d132      	bne.n	13952 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   138ec:	f1b9 0f02 	cmp.w	r9, #2
   138f0:	d00b      	beq.n	1390a <process_event+0x1da>
   138f2:	4640      	mov	r0, r8
   138f4:	4942      	ldr	r1, [pc, #264]	; (13a00 <process_event+0x2d0>)
   138f6:	f240 135d 	movw	r3, #349	; 0x15d
   138fa:	463a      	mov	r2, r7
   138fc:	f01c f9b8 	bl	2fc70 <printk>
   13900:	f240 115d 	movw	r1, #349	; 0x15d
   13904:	4638      	mov	r0, r7
   13906:	f01c fc99 	bl	3023c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1390a:	8be3      	ldrh	r3, [r4, #30]
   1390c:	b15b      	cbz	r3, 13926 <process_event+0x1f6>
   1390e:	4640      	mov	r0, r8
   13910:	493c      	ldr	r1, [pc, #240]	; (13a04 <process_event+0x2d4>)
   13912:	f44f 73af 	mov.w	r3, #350	; 0x15e
   13916:	463a      	mov	r2, r7
   13918:	f01c f9aa 	bl	2fc70 <printk>
   1391c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   13920:	4638      	mov	r0, r7
   13922:	f01c fc8b 	bl	3023c <assert_post_action>
			transit = mgr->transitions->stop;
   13926:	6923      	ldr	r3, [r4, #16]
   13928:	685b      	ldr	r3, [r3, #4]
   1392a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1392c:	b95b      	cbnz	r3, 13946 <process_event+0x216>
   1392e:	4640      	mov	r0, r8
   13930:	4932      	ldr	r1, [pc, #200]	; (139fc <process_event+0x2cc>)
   13932:	f240 1361 	movw	r3, #353	; 0x161
   13936:	463a      	mov	r2, r7
   13938:	f01c f99a 	bl	2fc70 <printk>
   1393c:	f240 1161 	movw	r1, #353	; 0x161
   13940:	4638      	mov	r0, r7
   13942:	f01c fc7b 	bl	3023c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13946:	8ba3      	ldrh	r3, [r4, #28]
   13948:	f023 0307 	bic.w	r3, r3, #7
   1394c:	f043 0304 	orr.w	r3, r3, #4
   13950:	e7c6      	b.n	138e0 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   13952:	2805      	cmp	r0, #5
   13954:	d132      	bne.n	139bc <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   13956:	f1b9 0f01 	cmp.w	r9, #1
   1395a:	d00b      	beq.n	13974 <process_event+0x244>
   1395c:	4640      	mov	r0, r8
   1395e:	492a      	ldr	r1, [pc, #168]	; (13a08 <process_event+0x2d8>)
   13960:	f44f 73b2 	mov.w	r3, #356	; 0x164
   13964:	463a      	mov	r2, r7
   13966:	f01c f983 	bl	2fc70 <printk>
   1396a:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1396e:	4638      	mov	r0, r7
   13970:	f01c fc64 	bl	3023c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   13974:	6823      	ldr	r3, [r4, #0]
   13976:	b95b      	cbnz	r3, 13990 <process_event+0x260>
   13978:	4640      	mov	r0, r8
   1397a:	491f      	ldr	r1, [pc, #124]	; (139f8 <process_event+0x2c8>)
   1397c:	f240 1365 	movw	r3, #357	; 0x165
   13980:	463a      	mov	r2, r7
   13982:	f01c f975 	bl	2fc70 <printk>
   13986:	f240 1165 	movw	r1, #357	; 0x165
   1398a:	4638      	mov	r0, r7
   1398c:	f01c fc56 	bl	3023c <assert_post_action>
			transit = mgr->transitions->reset;
   13990:	6923      	ldr	r3, [r4, #16]
   13992:	689b      	ldr	r3, [r3, #8]
   13994:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   13996:	b95b      	cbnz	r3, 139b0 <process_event+0x280>
   13998:	4640      	mov	r0, r8
   1399a:	4918      	ldr	r1, [pc, #96]	; (139fc <process_event+0x2cc>)
   1399c:	f44f 73b4 	mov.w	r3, #360	; 0x168
   139a0:	463a      	mov	r2, r7
   139a2:	f01c f965 	bl	2fc70 <printk>
   139a6:	f44f 71b4 	mov.w	r1, #360	; 0x168
   139aa:	4638      	mov	r0, r7
   139ac:	f01c fc46 	bl	3023c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   139b0:	8ba3      	ldrh	r3, [r4, #28]
   139b2:	f023 0307 	bic.w	r3, r3, #7
   139b6:	f043 0305 	orr.w	r3, r3, #5
   139ba:	e791      	b.n	138e0 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   139bc:	2500      	movs	r5, #0
   139be:	f240 136b 	movw	r3, #363	; 0x16b
   139c2:	463a      	mov	r2, r7
   139c4:	4640      	mov	r0, r8
   139c6:	490a      	ldr	r1, [pc, #40]	; (139f0 <process_event+0x2c0>)
   139c8:	f01c f952 	bl	2fc70 <printk>
   139cc:	f240 116b 	movw	r1, #363	; 0x16b
   139d0:	4638      	mov	r0, r7
   139d2:	f01c fc33 	bl	3023c <assert_post_action>
		onoff_transition_fn transit = NULL;
   139d6:	9501      	str	r5, [sp, #4]
   139d8:	e784      	b.n	138e4 <process_event+0x1b4>
   139da:	bf00      	nop
   139dc:	0003a62b 	.word	0x0003a62b
   139e0:	0003a651 	.word	0x0003a651
   139e4:	0003a56b 	.word	0x0003a56b
   139e8:	0003a668 	.word	0x0003a668
   139ec:	0003a588 	.word	0x0003a588
   139f0:	00040e81 	.word	0x00040e81
   139f4:	0003a5aa 	.word	0x0003a5aa
   139f8:	0003a5b6 	.word	0x0003a5b6
   139fc:	0003a5d9 	.word	0x0003a5d9
   13a00:	0003a5f0 	.word	0x0003a5f0
   13a04:	0003a606 	.word	0x0003a606
   13a08:	0003a615 	.word	0x0003a615
				   && !sys_slist_is_empty(&mgr->monitors);
   13a0c:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13a10:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   13a14:	f104 0a14 	add.w	sl, r4, #20
   13a18:	4650      	mov	r0, sl
			mgr->flags = flags;
   13a1a:	83a3      	strh	r3, [r4, #28]
   13a1c:	f016 ff08 	bl	2a830 <z_spin_unlock_valid>
   13a20:	b968      	cbnz	r0, 13a3e <process_event+0x30e>
   13a22:	23ac      	movs	r3, #172	; 0xac
   13a24:	4640      	mov	r0, r8
   13a26:	4a39      	ldr	r2, [pc, #228]	; (13b0c <process_event+0x3dc>)
   13a28:	4939      	ldr	r1, [pc, #228]	; (13b10 <process_event+0x3e0>)
   13a2a:	f01c f921 	bl	2fc70 <printk>
   13a2e:	4651      	mov	r1, sl
   13a30:	4838      	ldr	r0, [pc, #224]	; (13b14 <process_event+0x3e4>)
   13a32:	f01c f91d 	bl	2fc70 <printk>
   13a36:	21ac      	movs	r1, #172	; 0xac
   13a38:	4834      	ldr	r0, [pc, #208]	; (13b0c <process_event+0x3dc>)
   13a3a:	f01c fbff 	bl	3023c <assert_post_action>
   13a3e:	9b03      	ldr	r3, [sp, #12]
   13a40:	f383 8811 	msr	BASEPRI, r3
   13a44:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13a48:	f1b9 0f00 	cmp.w	r9, #0
   13a4c:	d138      	bne.n	13ac0 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   13a4e:	2d00      	cmp	r5, #0
   13a50:	d14b      	bne.n	13aea <process_event+0x3ba>
			if (transit != NULL) {
   13a52:	9b01      	ldr	r3, [sp, #4]
   13a54:	b113      	cbz	r3, 13a5c <process_event+0x32c>
				transit(mgr, transition_complete);
   13a56:	4620      	mov	r0, r4
   13a58:	492f      	ldr	r1, [pc, #188]	; (13b18 <process_event+0x3e8>)
   13a5a:	4798      	blx	r3
	__asm__ volatile(
   13a5c:	f04f 0320 	mov.w	r3, #32
   13a60:	f3ef 8b11 	mrs	fp, BASEPRI
   13a64:	f383 8811 	msr	BASEPRI, r3
   13a68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13a6c:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   13a6e:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13a72:	f016 fecf 	bl	2a814 <z_spin_lock_valid>
   13a76:	b968      	cbnz	r0, 13a94 <process_event+0x364>
   13a78:	2381      	movs	r3, #129	; 0x81
   13a7a:	4640      	mov	r0, r8
   13a7c:	4a23      	ldr	r2, [pc, #140]	; (13b0c <process_event+0x3dc>)
   13a7e:	4927      	ldr	r1, [pc, #156]	; (13b1c <process_event+0x3ec>)
   13a80:	f01c f8f6 	bl	2fc70 <printk>
   13a84:	4651      	mov	r1, sl
   13a86:	4826      	ldr	r0, [pc, #152]	; (13b20 <process_event+0x3f0>)
   13a88:	f01c f8f2 	bl	2fc70 <printk>
   13a8c:	2181      	movs	r1, #129	; 0x81
   13a8e:	481f      	ldr	r0, [pc, #124]	; (13b0c <process_event+0x3dc>)
   13a90:	f01c fbd4 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   13a94:	4650      	mov	r0, sl
   13a96:	f016 fed9 	bl	2a84c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13a9a:	8ba3      	ldrh	r3, [r4, #28]
   13a9c:	f023 0308 	bic.w	r3, r3, #8
   13aa0:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   13aa2:	8ba3      	ldrh	r3, [r4, #28]
   13aa4:	06da      	lsls	r2, r3, #27
   13aa6:	d528      	bpl.n	13afa <process_event+0x3ca>
			evt = EVT_COMPLETE;
   13aa8:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13aaa:	f023 0310 	bic.w	r3, r3, #16
   13aae:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   13ab0:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   13ab4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   13ab8:	2900      	cmp	r1, #0
   13aba:	f47f ae6b 	bne.w	13794 <process_event+0x64>
out:
   13abe:	e649      	b.n	13754 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13ac0:	68a1      	ldr	r1, [r4, #8]
   13ac2:	2900      	cmp	r1, #0
   13ac4:	d0c3      	beq.n	13a4e <process_event+0x31e>
	return node->next;
   13ac6:	680b      	ldr	r3, [r1, #0]
   13ac8:	2b00      	cmp	r3, #0
   13aca:	bf38      	it	cc
   13acc:	2300      	movcc	r3, #0
   13ace:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   13ad0:	684b      	ldr	r3, [r1, #4]
   13ad2:	4620      	mov	r0, r4
   13ad4:	461e      	mov	r6, r3
   13ad6:	9a02      	ldr	r2, [sp, #8]
   13ad8:	465b      	mov	r3, fp
   13ada:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13adc:	f1b9 0f00 	cmp.w	r9, #0
   13ae0:	d0b5      	beq.n	13a4e <process_event+0x31e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13ae2:	4649      	mov	r1, r9
   13ae4:	f8d9 3000 	ldr.w	r3, [r9]
   13ae8:	e7ee      	b.n	13ac8 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13aea:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   13aec:	465b      	mov	r3, fp
   13aee:	4620      	mov	r0, r4
   13af0:	9a02      	ldr	r2, [sp, #8]
   13af2:	682d      	ldr	r5, [r5, #0]
   13af4:	f01c f90d 	bl	2fd12 <notify_one>
   13af8:	e7a9      	b.n	13a4e <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   13afa:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13afe:	bf1e      	ittt	ne
   13b00:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   13b04:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13b06:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   13b08:	e7d2      	b.n	13ab0 <process_event+0x380>
   13b0a:	bf00      	nop
   13b0c:	0003a62b 	.word	0x0003a62b
   13b10:	0003a651 	.word	0x0003a651
   13b14:	0003a668 	.word	0x0003a668
   13b18:	00013b25 	.word	0x00013b25
   13b1c:	0003a67d 	.word	0x0003a67d
   13b20:	0003a692 	.word	0x0003a692

00013b24 <transition_complete>:
{
   13b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b26:	4604      	mov	r4, r0
   13b28:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13b2a:	f100 0614 	add.w	r6, r0, #20
   13b2e:	f04f 0320 	mov.w	r3, #32
   13b32:	f3ef 8711 	mrs	r7, BASEPRI
   13b36:	f383 8811 	msr	BASEPRI, r3
   13b3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13b3e:	4630      	mov	r0, r6
   13b40:	f016 fe68 	bl	2a814 <z_spin_lock_valid>
   13b44:	b968      	cbnz	r0, 13b62 <transition_complete+0x3e>
   13b46:	2381      	movs	r3, #129	; 0x81
   13b48:	4a0b      	ldr	r2, [pc, #44]	; (13b78 <transition_complete+0x54>)
   13b4a:	490c      	ldr	r1, [pc, #48]	; (13b7c <transition_complete+0x58>)
   13b4c:	480c      	ldr	r0, [pc, #48]	; (13b80 <transition_complete+0x5c>)
   13b4e:	f01c f88f 	bl	2fc70 <printk>
   13b52:	4631      	mov	r1, r6
   13b54:	480b      	ldr	r0, [pc, #44]	; (13b84 <transition_complete+0x60>)
   13b56:	f01c f88b 	bl	2fc70 <printk>
   13b5a:	2181      	movs	r1, #129	; 0x81
   13b5c:	4806      	ldr	r0, [pc, #24]	; (13b78 <transition_complete+0x54>)
   13b5e:	f01c fb6d 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   13b62:	4630      	mov	r0, r6
   13b64:	f016 fe72 	bl	2a84c <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   13b68:	463a      	mov	r2, r7
   13b6a:	4620      	mov	r0, r4
	mgr->last_res = res;
   13b6c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   13b6e:	2101      	movs	r1, #1
}
   13b70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   13b74:	f7ff bddc 	b.w	13730 <process_event>
   13b78:	0003a62b 	.word	0x0003a62b
   13b7c:	0003a67d 	.word	0x0003a67d
   13b80:	0003a56b 	.word	0x0003a56b
   13b84:	0003a692 	.word	0x0003a692

00013b88 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   13b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b8c:	4604      	mov	r4, r0
   13b8e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   13b90:	f01c f8d5 	bl	2fd3e <validate_args>

	if (rv < 0) {
   13b94:	1e05      	subs	r5, r0, #0
   13b96:	db5e      	blt.n	13c56 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13b98:	f104 0914 	add.w	r9, r4, #20
   13b9c:	f04f 0320 	mov.w	r3, #32
   13ba0:	f3ef 8a11 	mrs	sl, BASEPRI
   13ba4:	f383 8811 	msr	BASEPRI, r3
   13ba8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13bac:	4648      	mov	r0, r9
   13bae:	f016 fe31 	bl	2a814 <z_spin_lock_valid>
   13bb2:	b968      	cbnz	r0, 13bd0 <onoff_request+0x48>
   13bb4:	2381      	movs	r3, #129	; 0x81
   13bb6:	4a38      	ldr	r2, [pc, #224]	; (13c98 <onoff_request+0x110>)
   13bb8:	4938      	ldr	r1, [pc, #224]	; (13c9c <onoff_request+0x114>)
   13bba:	4839      	ldr	r0, [pc, #228]	; (13ca0 <onoff_request+0x118>)
   13bbc:	f01c f858 	bl	2fc70 <printk>
   13bc0:	4649      	mov	r1, r9
   13bc2:	4838      	ldr	r0, [pc, #224]	; (13ca4 <onoff_request+0x11c>)
   13bc4:	f01c f854 	bl	2fc70 <printk>
   13bc8:	2181      	movs	r1, #129	; 0x81
   13bca:	4833      	ldr	r0, [pc, #204]	; (13c98 <onoff_request+0x110>)
   13bcc:	f01c fb36 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   13bd0:	4648      	mov	r0, r9
   13bd2:	f016 fe3b 	bl	2a84c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   13bd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13bda:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13bdc:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   13bde:	428b      	cmp	r3, r1
   13be0:	f002 0607 	and.w	r6, r2, #7
   13be4:	d050      	beq.n	13c88 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   13be6:	2e02      	cmp	r6, #2
   13be8:	d124      	bne.n	13c34 <onoff_request+0xac>
	rv = state;
   13bea:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   13bec:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   13bf0:	3301      	adds	r3, #1
   13bf2:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13bf4:	4648      	mov	r0, r9
   13bf6:	f016 fe1b 	bl	2a830 <z_spin_unlock_valid>
   13bfa:	b968      	cbnz	r0, 13c18 <onoff_request+0x90>
   13bfc:	23ac      	movs	r3, #172	; 0xac
   13bfe:	4a26      	ldr	r2, [pc, #152]	; (13c98 <onoff_request+0x110>)
   13c00:	4929      	ldr	r1, [pc, #164]	; (13ca8 <onoff_request+0x120>)
   13c02:	4827      	ldr	r0, [pc, #156]	; (13ca0 <onoff_request+0x118>)
   13c04:	f01c f834 	bl	2fc70 <printk>
   13c08:	4649      	mov	r1, r9
   13c0a:	4828      	ldr	r0, [pc, #160]	; (13cac <onoff_request+0x124>)
   13c0c:	f01c f830 	bl	2fc70 <printk>
   13c10:	21ac      	movs	r1, #172	; 0xac
   13c12:	4821      	ldr	r0, [pc, #132]	; (13c98 <onoff_request+0x110>)
   13c14:	f01c fb12 	bl	3023c <assert_post_action>
	__asm__ volatile(
   13c18:	f38a 8811 	msr	BASEPRI, sl
   13c1c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   13c20:	f1b8 0f00 	cmp.w	r8, #0
   13c24:	d017      	beq.n	13c56 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   13c26:	2300      	movs	r3, #0
   13c28:	4632      	mov	r2, r6
   13c2a:	4639      	mov	r1, r7
   13c2c:	4620      	mov	r0, r4
   13c2e:	f01c f870 	bl	2fd12 <notify_one>
   13c32:	e010      	b.n	13c56 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   13c34:	0793      	lsls	r3, r2, #30
   13c36:	d001      	beq.n	13c3c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   13c38:	2e06      	cmp	r6, #6
   13c3a:	d10f      	bne.n	13c5c <onoff_request+0xd4>
	parent->next = child;
   13c3c:	2300      	movs	r3, #0
   13c3e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   13c40:	6863      	ldr	r3, [r4, #4]
   13c42:	b9f3      	cbnz	r3, 13c82 <onoff_request+0xfa>
	list->head = node;
   13c44:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   13c48:	4635      	mov	r5, r6
   13c4a:	b9fe      	cbnz	r6, 13c8c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   13c4c:	4652      	mov	r2, sl
   13c4e:	2102      	movs	r1, #2
   13c50:	4620      	mov	r0, r4
   13c52:	f7ff fd6d 	bl	13730 <process_event>
		}
	}

	return rv;
}
   13c56:	4628      	mov	r0, r5
   13c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   13c5c:	2e05      	cmp	r6, #5
   13c5e:	d018      	beq.n	13c92 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   13c60:	2e01      	cmp	r6, #1
   13c62:	d00b      	beq.n	13c7c <onoff_request+0xf4>
   13c64:	4912      	ldr	r1, [pc, #72]	; (13cb0 <onoff_request+0x128>)
   13c66:	480e      	ldr	r0, [pc, #56]	; (13ca0 <onoff_request+0x118>)
   13c68:	f240 13c9 	movw	r3, #457	; 0x1c9
   13c6c:	4a11      	ldr	r2, [pc, #68]	; (13cb4 <onoff_request+0x12c>)
   13c6e:	f01b ffff 	bl	2fc70 <printk>
   13c72:	f240 11c9 	movw	r1, #457	; 0x1c9
   13c76:	480f      	ldr	r0, [pc, #60]	; (13cb4 <onoff_request+0x12c>)
   13c78:	f01c fae0 	bl	3023c <assert_post_action>
		rv = -EIO;
   13c7c:	f06f 0504 	mvn.w	r5, #4
   13c80:	e004      	b.n	13c8c <onoff_request+0x104>
	parent->next = child;
   13c82:	601f      	str	r7, [r3, #0]
	list->tail = node;
   13c84:	6067      	str	r7, [r4, #4]
}
   13c86:	e7df      	b.n	13c48 <onoff_request+0xc0>
		rv = -EAGAIN;
   13c88:	f06f 050a 	mvn.w	r5, #10
   13c8c:	f04f 0800 	mov.w	r8, #0
   13c90:	e7b0      	b.n	13bf4 <onoff_request+0x6c>
		rv = -ENOTSUP;
   13c92:	f06f 0585 	mvn.w	r5, #133	; 0x85
   13c96:	e7f9      	b.n	13c8c <onoff_request+0x104>
   13c98:	0003a62b 	.word	0x0003a62b
   13c9c:	0003a67d 	.word	0x0003a67d
   13ca0:	0003a56b 	.word	0x0003a56b
   13ca4:	0003a692 	.word	0x0003a692
   13ca8:	0003a651 	.word	0x0003a651
   13cac:	0003a668 	.word	0x0003a668
   13cb0:	0003a615 	.word	0x0003a615
   13cb4:	0003a588 	.word	0x0003a588

00013cb8 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   13cb8:	b570      	push	{r4, r5, r6, lr}
   13cba:	4604      	mov	r4, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13cbc:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   13cc0:	f04f 0320 	mov.w	r3, #32
   13cc4:	f3ef 8611 	mrs	r6, BASEPRI
   13cc8:	f383 8811 	msr	BASEPRI, r3
   13ccc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13cd0:	4628      	mov	r0, r5
   13cd2:	f016 fd9f 	bl	2a814 <z_spin_lock_valid>
   13cd6:	b968      	cbnz	r0, 13cf4 <onoff_release+0x3c>
   13cd8:	2381      	movs	r3, #129	; 0x81
   13cda:	4a27      	ldr	r2, [pc, #156]	; (13d78 <onoff_release+0xc0>)
   13cdc:	4927      	ldr	r1, [pc, #156]	; (13d7c <onoff_release+0xc4>)
   13cde:	4828      	ldr	r0, [pc, #160]	; (13d80 <onoff_release+0xc8>)
   13ce0:	f01b ffc6 	bl	2fc70 <printk>
   13ce4:	4629      	mov	r1, r5
   13ce6:	4827      	ldr	r0, [pc, #156]	; (13d84 <onoff_release+0xcc>)
   13ce8:	f01b ffc2 	bl	2fc70 <printk>
   13cec:	2181      	movs	r1, #129	; 0x81
   13cee:	4822      	ldr	r0, [pc, #136]	; (13d78 <onoff_release+0xc0>)
   13cf0:	f01c faa4 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   13cf4:	4628      	mov	r0, r5
   13cf6:	f016 fda9 	bl	2a84c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13cfa:	8ba3      	ldrh	r3, [r4, #28]
   13cfc:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   13d00:	2b02      	cmp	r3, #2
   13d02:	d01c      	beq.n	13d3e <onoff_release+0x86>
		if (state == ONOFF_STATE_ERROR) {
   13d04:	2b01      	cmp	r3, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   13d06:	bf0c      	ite	eq
   13d08:	f06f 0404 	mvneq.w	r4, #4
   13d0c:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13d10:	4628      	mov	r0, r5
   13d12:	f016 fd8d 	bl	2a830 <z_spin_unlock_valid>
   13d16:	b968      	cbnz	r0, 13d34 <onoff_release+0x7c>
   13d18:	23ac      	movs	r3, #172	; 0xac
   13d1a:	4a17      	ldr	r2, [pc, #92]	; (13d78 <onoff_release+0xc0>)
   13d1c:	491a      	ldr	r1, [pc, #104]	; (13d88 <onoff_release+0xd0>)
   13d1e:	4818      	ldr	r0, [pc, #96]	; (13d80 <onoff_release+0xc8>)
   13d20:	f01b ffa6 	bl	2fc70 <printk>
   13d24:	4629      	mov	r1, r5
   13d26:	4819      	ldr	r0, [pc, #100]	; (13d8c <onoff_release+0xd4>)
   13d28:	f01b ffa2 	bl	2fc70 <printk>
   13d2c:	21ac      	movs	r1, #172	; 0xac
   13d2e:	4812      	ldr	r0, [pc, #72]	; (13d78 <onoff_release+0xc0>)
   13d30:	f01c fa84 	bl	3023c <assert_post_action>
	__asm__ volatile(
   13d34:	f386 8811 	msr	BASEPRI, r6
   13d38:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   13d3c:	e018      	b.n	13d70 <onoff_release+0xb8>
	__ASSERT_NO_MSG(mgr->refs > 0);
   13d3e:	8be3      	ldrh	r3, [r4, #30]
   13d40:	b95b      	cbnz	r3, 13d5a <onoff_release+0xa2>
   13d42:	4913      	ldr	r1, [pc, #76]	; (13d90 <onoff_release+0xd8>)
   13d44:	480e      	ldr	r0, [pc, #56]	; (13d80 <onoff_release+0xc8>)
   13d46:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
   13d4a:	4a12      	ldr	r2, [pc, #72]	; (13d94 <onoff_release+0xdc>)
   13d4c:	f01b ff90 	bl	2fc70 <printk>
   13d50:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   13d54:	480f      	ldr	r0, [pc, #60]	; (13d94 <onoff_release+0xdc>)
   13d56:	f01c fa71 	bl	3023c <assert_post_action>
	mgr->refs -= 1U;
   13d5a:	8be3      	ldrh	r3, [r4, #30]
   13d5c:	3b01      	subs	r3, #1
   13d5e:	b29b      	uxth	r3, r3
   13d60:	83e3      	strh	r3, [r4, #30]
	if (stop) {
   13d62:	b93b      	cbnz	r3, 13d74 <onoff_release+0xbc>
		process_event(mgr, EVT_RECHECK, key);
   13d64:	4620      	mov	r0, r4
   13d66:	4632      	mov	r2, r6
   13d68:	2102      	movs	r1, #2
   13d6a:	f7ff fce1 	bl	13730 <process_event>
	int rv = state;
   13d6e:	2402      	movs	r4, #2
}
   13d70:	4620      	mov	r0, r4
   13d72:	bd70      	pop	{r4, r5, r6, pc}
	int rv = state;
   13d74:	2402      	movs	r4, #2
   13d76:	e7cb      	b.n	13d10 <onoff_release+0x58>
   13d78:	0003a62b 	.word	0x0003a62b
   13d7c:	0003a67d 	.word	0x0003a67d
   13d80:	0003a56b 	.word	0x0003a56b
   13d84:	0003a692 	.word	0x0003a692
   13d88:	0003a651 	.word	0x0003a651
   13d8c:	0003a668 	.word	0x0003a668
   13d90:	0003a6aa 	.word	0x0003a6aa
   13d94:	0003a588 	.word	0x0003a588

00013d98 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   13d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d9c:	460f      	mov	r7, r1
	if ((mgr == NULL) || (cli == NULL)) {
   13d9e:	4605      	mov	r5, r0
   13da0:	2800      	cmp	r0, #0
   13da2:	d053      	beq.n	13e4c <onoff_cancel+0xb4>
   13da4:	2900      	cmp	r1, #0
   13da6:	d051      	beq.n	13e4c <onoff_cancel+0xb4>
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13da8:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   13dac:	f04f 0320 	mov.w	r3, #32
   13db0:	f3ef 8811 	mrs	r8, BASEPRI
   13db4:	f383 8811 	msr	BASEPRI, r3
   13db8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13dbc:	4630      	mov	r0, r6
   13dbe:	f016 fd29 	bl	2a814 <z_spin_lock_valid>
   13dc2:	b968      	cbnz	r0, 13de0 <onoff_cancel+0x48>
   13dc4:	2381      	movs	r3, #129	; 0x81
   13dc6:	4a23      	ldr	r2, [pc, #140]	; (13e54 <onoff_cancel+0xbc>)
   13dc8:	4923      	ldr	r1, [pc, #140]	; (13e58 <onoff_cancel+0xc0>)
   13dca:	4824      	ldr	r0, [pc, #144]	; (13e5c <onoff_cancel+0xc4>)
   13dcc:	f01b ff50 	bl	2fc70 <printk>
   13dd0:	4631      	mov	r1, r6
   13dd2:	4823      	ldr	r0, [pc, #140]	; (13e60 <onoff_cancel+0xc8>)
   13dd4:	f01b ff4c 	bl	2fc70 <printk>
   13dd8:	2181      	movs	r1, #129	; 0x81
   13dda:	481e      	ldr	r0, [pc, #120]	; (13e54 <onoff_cancel+0xbc>)
   13ddc:	f01c fa2e 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   13de0:	4630      	mov	r0, r6
   13de2:	f016 fd33 	bl	2a84c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   13de6:	4639      	mov	r1, r7
   13de8:	4628      	mov	r0, r5
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13dea:	8bac      	ldrh	r4, [r5, #28]
	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   13dec:	f01b ff5a 	bl	2fca4 <sys_slist_find_and_remove>
   13df0:	b348      	cbz	r0, 13e46 <onoff_cancel+0xae>
   13df2:	f004 0407 	and.w	r4, r4, #7
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
   13df6:	1f23      	subs	r3, r4, #4
   13df8:	2b02      	cmp	r3, #2
   13dfa:	d90b      	bls.n	13e14 <onoff_cancel+0x7c>
   13dfc:	4919      	ldr	r1, [pc, #100]	; (13e64 <onoff_cancel+0xcc>)
   13dfe:	4817      	ldr	r0, [pc, #92]	; (13e5c <onoff_cancel+0xc4>)
   13e00:	f240 232e 	movw	r3, #558	; 0x22e
   13e04:	4a18      	ldr	r2, [pc, #96]	; (13e68 <onoff_cancel+0xd0>)
   13e06:	f01b ff33 	bl	2fc70 <printk>
   13e0a:	f240 212e 	movw	r1, #558	; 0x22e
   13e0e:	4816      	ldr	r0, [pc, #88]	; (13e68 <onoff_cancel+0xd0>)
   13e10:	f01c fa14 	bl	3023c <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13e14:	4630      	mov	r0, r6
   13e16:	f016 fd0b 	bl	2a830 <z_spin_unlock_valid>
   13e1a:	b968      	cbnz	r0, 13e38 <onoff_cancel+0xa0>
   13e1c:	23ac      	movs	r3, #172	; 0xac
   13e1e:	4a0d      	ldr	r2, [pc, #52]	; (13e54 <onoff_cancel+0xbc>)
   13e20:	4912      	ldr	r1, [pc, #72]	; (13e6c <onoff_cancel+0xd4>)
   13e22:	480e      	ldr	r0, [pc, #56]	; (13e5c <onoff_cancel+0xc4>)
   13e24:	f01b ff24 	bl	2fc70 <printk>
   13e28:	4631      	mov	r1, r6
   13e2a:	4811      	ldr	r0, [pc, #68]	; (13e70 <onoff_cancel+0xd8>)
   13e2c:	f01b ff20 	bl	2fc70 <printk>
   13e30:	21ac      	movs	r1, #172	; 0xac
   13e32:	4808      	ldr	r0, [pc, #32]	; (13e54 <onoff_cancel+0xbc>)
   13e34:	f01c fa02 	bl	3023c <assert_post_action>
	__asm__ volatile(
   13e38:	f388 8811 	msr	BASEPRI, r8
   13e3c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   13e40:	4620      	mov	r0, r4
   13e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int rv = -EALREADY;
   13e46:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13e4a:	e7e3      	b.n	13e14 <onoff_cancel+0x7c>
		return -EINVAL;
   13e4c:	f06f 0415 	mvn.w	r4, #21
   13e50:	e7f6      	b.n	13e40 <onoff_cancel+0xa8>
   13e52:	bf00      	nop
   13e54:	0003a62b 	.word	0x0003a62b
   13e58:	0003a67d 	.word	0x0003a67d
   13e5c:	0003a56b 	.word	0x0003a56b
   13e60:	0003a692 	.word	0x0003a692
   13e64:	0003a6b8 	.word	0x0003a6b8
   13e68:	0003a588 	.word	0x0003a588
   13e6c:	0003a651 	.word	0x0003a651
   13e70:	0003a668 	.word	0x0003a668

00013e74 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   13e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   13e78:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   13e7a:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   13e7c:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   13e80:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   13e82:	f240 746c 	movw	r4, #1900	; 0x76c
   13e86:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   13e88:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   13e8a:	6943      	ldr	r3, [r0, #20]
{
   13e8c:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   13e8e:	18e4      	adds	r4, r4, r3
   13e90:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   13e94:	f1b9 0f02 	cmp.w	r9, #2
   13e98:	bf8c      	ite	hi
   13e9a:	2300      	movhi	r3, #0
   13e9c:	2301      	movls	r3, #1
   13e9e:	1ae4      	subs	r4, r4, r3
   13ea0:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   13ea4:	2c00      	cmp	r4, #0
   13ea6:	f175 0300 	sbcs.w	r3, r5, #0
   13eaa:	da57      	bge.n	13f5c <timeutil_timegm64+0xe8>
   13eac:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   13eb0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   13eb4:	2300      	movs	r3, #0
   13eb6:	1820      	adds	r0, r4, r0
   13eb8:	f145 31ff 	adc.w	r1, r5, #4294967295
   13ebc:	f7fd f948 	bl	11150 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   13ec0:	4b29      	ldr	r3, [pc, #164]	; (13f68 <timeutil_timegm64+0xf4>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   13ec2:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   13ec6:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   13eca:	e9d8 5300 	ldrd	r5, r3, [r8]
   13ece:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13ed0:	f1b9 0f02 	cmp.w	r9, #2
   13ed4:	bf8c      	ite	hi
   13ed6:	f06f 0e02 	mvnhi.w	lr, #2
   13eda:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   13ede:	ea4f 7be3 	mov.w	fp, r3, asr #31
   13ee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13ee6:	44f1      	add	r9, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   13ee8:	fbcc ab03 	smlal	sl, fp, ip, r3
   13eec:	fbaa 230c 	umull	r2, r3, sl, ip
   13ef0:	fb0c 330b 	mla	r3, ip, fp, r3
   13ef4:	1952      	adds	r2, r2, r5
   13ef6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13efa:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13efe:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13f02:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   13f06:	fb05 cc04 	mla	ip, r5, r4, ip
   13f0a:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13f0c:	fb0e fe09 	mul.w	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13f10:	4465      	add	r5, ip
   13f12:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13f16:	f04f 0905 	mov.w	r9, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13f1a:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13f1e:	f10e 0e02 	add.w	lr, lr, #2
   13f22:	fbbe fef9 	udiv	lr, lr, r9
	return era * 146097 + (time_t)doe - 719468;
   13f26:	f8df c04c 	ldr.w	ip, [pc, #76]	; 13f74 <timeutil_timegm64+0x100>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13f2a:	1b2c      	subs	r4, r5, r4
   13f2c:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   13f2e:	fba0 450c 	umull	r4, r5, r0, ip
   13f32:	fb0c 5501 	mla	r5, ip, r1, r5
   13f36:	490d      	ldr	r1, [pc, #52]	; (13f6c <timeutil_timegm64+0xf8>)
   13f38:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
   13f3a:	490d      	ldr	r1, [pc, #52]	; (13f70 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   13f3c:	f145 37ff 	adc.w	r7, r5, #4294967295
   13f40:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   13f44:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   13f48:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   13f4c:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   13f50:	18a0      	adds	r0, r4, r2
   13f52:	eb45 0103 	adc.w	r1, r5, r3
   13f56:	b003      	add	sp, #12
   13f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   13f5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   13f60:	2300      	movs	r3, #0
   13f62:	4620      	mov	r0, r4
   13f64:	4629      	mov	r1, r5
   13f66:	e7a9      	b.n	13ebc <timeutil_timegm64+0x48>
   13f68:	fffffe70 	.word	0xfffffe70
   13f6c:	fff50594 	.word	0xfff50594
   13f70:	00015180 	.word	0x00015180
   13f74:	00023ab1 	.word	0x00023ab1

00013f78 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   13f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   13f7a:	460e      	mov	r6, r1
   13f7c:	2900      	cmp	r1, #0
   13f7e:	d043      	beq.n	14008 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   13f80:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   13f82:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   13f84:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   13f86:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   13f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   13f8c:	bf2c      	ite	cs
   13f8e:	2408      	movcs	r4, #8
   13f90:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   13f92:	1b0c      	subs	r4, r1, r4
   13f94:	1b64      	subs	r4, r4, r5
   13f96:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   13f98:	4621      	mov	r1, r4
   13f9a:	f01b ff10 	bl	2fdbe <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   13f9e:	07c3      	lsls	r3, r0, #31
   13fa0:	d40d      	bmi.n	13fbe <sys_heap_free+0x46>
   13fa2:	239a      	movs	r3, #154	; 0x9a
   13fa4:	4a19      	ldr	r2, [pc, #100]	; (1400c <sys_heap_free+0x94>)
   13fa6:	491a      	ldr	r1, [pc, #104]	; (14010 <sys_heap_free+0x98>)
   13fa8:	481a      	ldr	r0, [pc, #104]	; (14014 <sys_heap_free+0x9c>)
   13faa:	f01b fe61 	bl	2fc70 <printk>
   13fae:	4631      	mov	r1, r6
   13fb0:	4819      	ldr	r0, [pc, #100]	; (14018 <sys_heap_free+0xa0>)
   13fb2:	f01b fe5d 	bl	2fc70 <printk>
   13fb6:	219a      	movs	r1, #154	; 0x9a
   13fb8:	4814      	ldr	r0, [pc, #80]	; (1400c <sys_heap_free+0x94>)
   13fba:	f01c f93f 	bl	3023c <assert_post_action>
	return c + chunk_size(h, c);
   13fbe:	4621      	mov	r1, r4
   13fc0:	4628      	mov	r0, r5
   13fc2:	f01b ff12 	bl	2fdea <chunk_size>
   13fc6:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   13fc8:	4639      	mov	r1, r7
   13fca:	2200      	movs	r2, #0
   13fcc:	4628      	mov	r0, r5
   13fce:	f01b fef6 	bl	2fdbe <chunk_field>
   13fd2:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   13fd4:	42bc      	cmp	r4, r7
   13fd6:	d00d      	beq.n	13ff4 <sys_heap_free+0x7c>
   13fd8:	23a2      	movs	r3, #162	; 0xa2
   13fda:	4a0c      	ldr	r2, [pc, #48]	; (1400c <sys_heap_free+0x94>)
   13fdc:	490f      	ldr	r1, [pc, #60]	; (1401c <sys_heap_free+0xa4>)
   13fde:	480d      	ldr	r0, [pc, #52]	; (14014 <sys_heap_free+0x9c>)
   13fe0:	f01b fe46 	bl	2fc70 <printk>
   13fe4:	4631      	mov	r1, r6
   13fe6:	480e      	ldr	r0, [pc, #56]	; (14020 <sys_heap_free+0xa8>)
   13fe8:	f01b fe42 	bl	2fc70 <printk>
   13fec:	21a2      	movs	r1, #162	; 0xa2
   13fee:	4807      	ldr	r0, [pc, #28]	; (1400c <sys_heap_free+0x94>)
   13ff0:	f01c f924 	bl	3023c <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   13ff4:	4621      	mov	r1, r4
   13ff6:	4628      	mov	r0, r5
   13ff8:	2200      	movs	r2, #0
   13ffa:	f01b fefc 	bl	2fdf6 <set_chunk_used>
	free_chunk(h, c);
   13ffe:	4621      	mov	r1, r4
}
   14000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   14004:	f01c b832 	b.w	3006c <free_chunk>
}
   14008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1400a:	bf00      	nop
   1400c:	0003a72f 	.word	0x0003a72f
   14010:	0003a750 	.word	0x0003a750
   14014:	0003a56b 	.word	0x0003a56b
   14018:	0003a761 	.word	0x0003a761
   1401c:	0003a799 	.word	0x0003a799
   14020:	0003a7bf 	.word	0x0003a7bf

00014024 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   14024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   14028:	6806      	ldr	r6, [r0, #0]
{
   1402a:	4614      	mov	r4, r2
   1402c:	68b3      	ldr	r3, [r6, #8]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1402e:	424a      	negs	r2, r1
	return big_heap(h) ? 8 : 4;
   14030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14034:	bf2c      	ite	cs
   14036:	2508      	movcs	r5, #8
   14038:	2504      	movcc	r5, #4
   1403a:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1403e:	ea31 0202 	bics.w	r2, r1, r2
   14042:	d01e      	beq.n	14082 <sys_heap_aligned_alloc+0x5e>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   14044:	42bd      	cmp	r5, r7
   14046:	bf28      	it	cs
   14048:	463d      	movcs	r5, r7
   1404a:	46b9      	mov	r9, r7
		align -= rew;
   1404c:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1404e:	f107 3aff 	add.w	sl, r7, #4294967295
   14052:	ea1a 0f07 	tst.w	sl, r7
   14056:	d00e      	beq.n	14076 <sys_heap_aligned_alloc+0x52>
   14058:	4935      	ldr	r1, [pc, #212]	; (14130 <sys_heap_aligned_alloc+0x10c>)
   1405a:	f240 130d 	movw	r3, #269	; 0x10d
   1405e:	4a35      	ldr	r2, [pc, #212]	; (14134 <sys_heap_aligned_alloc+0x110>)
   14060:	4835      	ldr	r0, [pc, #212]	; (14138 <sys_heap_aligned_alloc+0x114>)
   14062:	f01b fe05 	bl	2fc70 <printk>
   14066:	4835      	ldr	r0, [pc, #212]	; (1413c <sys_heap_aligned_alloc+0x118>)
   14068:	f01b fe02 	bl	2fc70 <printk>
   1406c:	f240 110d 	movw	r1, #269	; 0x10d
   14070:	4830      	ldr	r0, [pc, #192]	; (14134 <sys_heap_aligned_alloc+0x110>)
   14072:	f01c f8e3 	bl	3023c <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   14076:	b974      	cbnz	r4, 14096 <sys_heap_aligned_alloc+0x72>
		return NULL;
   14078:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1407c:	4648      	mov	r0, r9
   1407e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   14082:	42a9      	cmp	r1, r5
   14084:	d804      	bhi.n	14090 <sys_heap_aligned_alloc+0x6c>
			return sys_heap_alloc(heap, bytes);
   14086:	4621      	mov	r1, r4
}
   14088:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   1408c:	f01c b830 	b.w	300f0 <sys_heap_alloc>
		rew = 0;
   14090:	f04f 0900 	mov.w	r9, #0
   14094:	e7db      	b.n	1404e <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   14096:	68b3      	ldr	r3, [r6, #8]
   14098:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1409c:	d9ec      	bls.n	14078 <sys_heap_aligned_alloc+0x54>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1409e:	1939      	adds	r1, r7, r4
   140a0:	1b49      	subs	r1, r1, r5
   140a2:	4630      	mov	r0, r6
   140a4:	f01b fec3 	bl	2fe2e <bytes_to_chunksz>
   140a8:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   140aa:	4630      	mov	r0, r6
   140ac:	f01b ff49 	bl	2ff42 <alloc_chunk>
	if (c0 == 0) {
   140b0:	4680      	mov	r8, r0
   140b2:	2800      	cmp	r0, #0
   140b4:	d0e0      	beq.n	14078 <sys_heap_aligned_alloc+0x54>
	return big_heap(h) ? 8 : 4;
   140b6:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   140b8:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   140bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   140c0:	bf2c      	ite	cs
   140c2:	2308      	movcs	r3, #8
   140c4:	2304      	movcc	r3, #4
   140c6:	441d      	add	r5, r3
   140c8:	4435      	add	r5, r6
   140ca:	4455      	add	r5, sl
   140cc:	427f      	negs	r7, r7
   140ce:	402f      	ands	r7, r5
   140d0:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   140d4:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   140d6:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   140da:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   140dc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   140de:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   140e2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   140e4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   140e8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   140ec:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   140f0:	d208      	bcs.n	14104 <sys_heap_aligned_alloc+0xe0>
		split_chunks(h, c0, c);
   140f2:	4601      	mov	r1, r0
   140f4:	463a      	mov	r2, r7
   140f6:	4630      	mov	r0, r6
   140f8:	f01b fecd 	bl	2fe96 <split_chunks>
		free_list_add(h, c0);
   140fc:	4641      	mov	r1, r8
   140fe:	4630      	mov	r0, r6
   14100:	f01b ff58 	bl	2ffb4 <free_list_add>
	return c + chunk_size(h, c);
   14104:	4639      	mov	r1, r7
   14106:	4630      	mov	r0, r6
   14108:	f01b fe6f 	bl	2fdea <chunk_size>
   1410c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1410e:	4284      	cmp	r4, r0
   14110:	d208      	bcs.n	14124 <sys_heap_aligned_alloc+0x100>
		split_chunks(h, c, c_end);
   14112:	4639      	mov	r1, r7
   14114:	4630      	mov	r0, r6
   14116:	4622      	mov	r2, r4
   14118:	f01b febd 	bl	2fe96 <split_chunks>
		free_list_add(h, c_end);
   1411c:	4621      	mov	r1, r4
   1411e:	4630      	mov	r0, r6
   14120:	f01b ff48 	bl	2ffb4 <free_list_add>
	set_chunk_used(h, c, true);
   14124:	2201      	movs	r2, #1
   14126:	4639      	mov	r1, r7
   14128:	4630      	mov	r0, r6
   1412a:	f01b fe64 	bl	2fdf6 <set_chunk_used>
	return mem;
   1412e:	e7a5      	b.n	1407c <sys_heap_aligned_alloc+0x58>
   14130:	0003a7fb 	.word	0x0003a7fb
   14134:	0003a72f 	.word	0x0003a72f
   14138:	0003a56b 	.word	0x0003a56b
   1413c:	0003a816 	.word	0x0003a816

00014140 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   14140:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   14144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14146:	4607      	mov	r7, r0
   14148:	460d      	mov	r5, r1
   1414a:	4616      	mov	r6, r2
   1414c:	d212      	bcs.n	14174 <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1414e:	2a04      	cmp	r2, #4
   14150:	d80e      	bhi.n	14170 <sys_heap_init+0x30>
   14152:	4944      	ldr	r1, [pc, #272]	; (14264 <sys_heap_init+0x124>)
   14154:	f44f 73c1 	mov.w	r3, #386	; 0x182
   14158:	4a43      	ldr	r2, [pc, #268]	; (14268 <sys_heap_init+0x128>)
   1415a:	4844      	ldr	r0, [pc, #272]	; (1426c <sys_heap_init+0x12c>)
   1415c:	f01b fd88 	bl	2fc70 <printk>
   14160:	4843      	ldr	r0, [pc, #268]	; (14270 <sys_heap_init+0x130>)
   14162:	f01b fd85 	bl	2fc70 <printk>
   14166:	f44f 71c1 	mov.w	r1, #386	; 0x182
   1416a:	483f      	ldr	r0, [pc, #252]	; (14268 <sys_heap_init+0x128>)
   1416c:	f01c f866 	bl	3023c <assert_post_action>
   14170:	2204      	movs	r2, #4
   14172:	e000      	b.n	14176 <sys_heap_init+0x36>
   14174:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   14176:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   14178:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1417a:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1417c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   14180:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   14184:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   14186:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   14188:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1418c:	d80e      	bhi.n	141ac <sys_heap_init+0x6c>
   1418e:	4939      	ldr	r1, [pc, #228]	; (14274 <sys_heap_init+0x134>)
   14190:	f240 138b 	movw	r3, #395	; 0x18b
   14194:	4a34      	ldr	r2, [pc, #208]	; (14268 <sys_heap_init+0x128>)
   14196:	4835      	ldr	r0, [pc, #212]	; (1426c <sys_heap_init+0x12c>)
   14198:	f01b fd6a 	bl	2fc70 <printk>
   1419c:	4834      	ldr	r0, [pc, #208]	; (14270 <sys_heap_init+0x130>)
   1419e:	f01b fd67 	bl	2fc70 <printk>
   141a2:	f240 118b 	movw	r1, #395	; 0x18b
   141a6:	4830      	ldr	r0, [pc, #192]	; (14268 <sys_heap_init+0x128>)
   141a8:	f01c f848 	bl	3023c <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   141ac:	2300      	movs	r3, #0
	heap->heap = h;
   141ae:	603c      	str	r4, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   141b0:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   141b2:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   141b4:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
   141b6:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   141b8:	f01b fe43 	bl	2fe42 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   141bc:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   141be:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   141c0:	1c47      	adds	r7, r0, #1
   141c2:	4620      	mov	r0, r4
   141c4:	f01b fe33 	bl	2fe2e <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   141c8:	351b      	adds	r5, #27
   141ca:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");
   141cc:	4428      	add	r0, r5
   141ce:	42b0      	cmp	r0, r6
   141d0:	d30e      	bcc.n	141f0 <sys_heap_init+0xb0>
   141d2:	4929      	ldr	r1, [pc, #164]	; (14278 <sys_heap_init+0x138>)
   141d4:	f44f 73cb 	mov.w	r3, #406	; 0x196
   141d8:	4a23      	ldr	r2, [pc, #140]	; (14268 <sys_heap_init+0x128>)
   141da:	4824      	ldr	r0, [pc, #144]	; (1426c <sys_heap_init+0x12c>)
   141dc:	f01b fd48 	bl	2fc70 <printk>
   141e0:	4823      	ldr	r0, [pc, #140]	; (14270 <sys_heap_init+0x130>)
   141e2:	f01b fd45 	bl	2fc70 <printk>
   141e6:	f44f 71cb 	mov.w	r1, #406	; 0x196
   141ea:	481f      	ldr	r0, [pc, #124]	; (14268 <sys_heap_init+0x128>)
   141ec:	f01c f826 	bl	3023c <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   141f0:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   141f2:	4619      	mov	r1, r3
   141f4:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   141f8:	42bb      	cmp	r3, r7
   141fa:	db2f      	blt.n	1425c <sys_heap_init+0x11c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   141fc:	462a      	mov	r2, r5
   141fe:	4620      	mov	r0, r4
   14200:	2100      	movs	r1, #0
   14202:	f01b fe10 	bl	2fe26 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   14206:	2300      	movs	r3, #0
   14208:	4620      	mov	r0, r4
   1420a:	461a      	mov	r2, r3
   1420c:	4619      	mov	r1, r3
   1420e:	f01b fde1 	bl	2fdd4 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   14212:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   14214:	4620      	mov	r0, r4
   14216:	2201      	movs	r2, #1
   14218:	2100      	movs	r1, #0
   1421a:	f01b fdec 	bl	2fdf6 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1421e:	463a      	mov	r2, r7
   14220:	4629      	mov	r1, r5
   14222:	f01b fe00 	bl	2fe26 <set_chunk_size>
   14226:	462b      	mov	r3, r5
   14228:	4629      	mov	r1, r5
   1422a:	4620      	mov	r0, r4
   1422c:	2200      	movs	r2, #0
   1422e:	f01b fdd1 	bl	2fdd4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   14232:	4631      	mov	r1, r6
   14234:	4620      	mov	r0, r4
   14236:	2200      	movs	r2, #0
   14238:	f01b fdf5 	bl	2fe26 <set_chunk_size>
   1423c:	463b      	mov	r3, r7
   1423e:	4631      	mov	r1, r6
   14240:	4620      	mov	r0, r4
   14242:	2200      	movs	r2, #0
   14244:	f01b fdc6 	bl	2fdd4 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   14248:	4631      	mov	r1, r6
   1424a:	4620      	mov	r0, r4
   1424c:	2201      	movs	r2, #1
   1424e:	f01b fdd2 	bl	2fdf6 <set_chunk_used>

	free_list_add(h, chunk0_size);
   14252:	4629      	mov	r1, r5
}
   14254:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   14258:	f01b beac 	b.w	2ffb4 <free_list_add>
		h->buckets[i].next = 0;
   1425c:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   14260:	3301      	adds	r3, #1
   14262:	e7c9      	b.n	141f8 <sys_heap_init+0xb8>
   14264:	0003a833 	.word	0x0003a833
   14268:	0003a72f 	.word	0x0003a72f
   1426c:	0003a56b 	.word	0x0003a56b
   14270:	0003a854 	.word	0x0003a854
   14274:	0003a86d 	.word	0x0003a86d
   14278:	0003a896 	.word	0x0003a896

0001427c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   1427c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1427e:	4602      	mov	r2, r0
   14280:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   14282:	270a      	movs	r7, #10
	size_t val = 0;
   14284:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   14286:	4e07      	ldr	r6, [pc, #28]	; (142a4 <extract_decimal+0x28>)
   14288:	460c      	mov	r4, r1
   1428a:	7823      	ldrb	r3, [r4, #0]
   1428c:	3101      	adds	r1, #1
   1428e:	5d9d      	ldrb	r5, [r3, r6]
   14290:	076d      	lsls	r5, r5, #29
   14292:	d401      	bmi.n	14298 <extract_decimal+0x1c>
	}
	*str = sp;
   14294:	6014      	str	r4, [r2, #0]
	return val;
}
   14296:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   14298:	fb07 3300 	mla	r3, r7, r0, r3
   1429c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   142a0:	e7f2      	b.n	14288 <extract_decimal+0xc>
   142a2:	bf00      	nop
   142a4:	00040efd 	.word	0x00040efd

000142a8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   142a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142ac:	4614      	mov	r4, r2
   142ae:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   142b0:	78d3      	ldrb	r3, [r2, #3]
   142b2:	4a24      	ldr	r2, [pc, #144]	; (14344 <encode_uint+0x9c>)
	switch (specifier) {
   142b4:	2b6f      	cmp	r3, #111	; 0x6f
   142b6:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   142ba:	4606      	mov	r6, r0
   142bc:	f00a 0203 	and.w	r2, sl, #3
   142c0:	460f      	mov	r7, r1
   142c2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   142c4:	d02d      	beq.n	14322 <encode_uint+0x7a>
   142c6:	d828      	bhi.n	1431a <encode_uint+0x72>
		return 16;
   142c8:	2b58      	cmp	r3, #88	; 0x58
   142ca:	bf14      	ite	ne
   142cc:	250a      	movne	r5, #10
   142ce:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   142d0:	46aa      	mov	sl, r5
   142d2:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   142d6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   142da:	4652      	mov	r2, sl
   142dc:	465b      	mov	r3, fp
   142de:	4630      	mov	r0, r6
   142e0:	4639      	mov	r1, r7
   142e2:	f7fc ff85 	bl	111f0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   142e6:	2a09      	cmp	r2, #9
   142e8:	b2d3      	uxtb	r3, r2
   142ea:	d81f      	bhi.n	1432c <encode_uint+0x84>
   142ec:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   142ee:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   142f0:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   142f2:	bf08      	it	eq
   142f4:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   142f6:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   142fa:	d301      	bcc.n	14300 <encode_uint+0x58>
   142fc:	45c8      	cmp	r8, r9
   142fe:	d812      	bhi.n	14326 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   14300:	7823      	ldrb	r3, [r4, #0]
   14302:	069b      	lsls	r3, r3, #26
   14304:	d505      	bpl.n	14312 <encode_uint+0x6a>
		if (radix == 8) {
   14306:	2d08      	cmp	r5, #8
   14308:	d116      	bne.n	14338 <encode_uint+0x90>
			conv->altform_0 = true;
   1430a:	78a3      	ldrb	r3, [r4, #2]
   1430c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   14310:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   14312:	4640      	mov	r0, r8
   14314:	b003      	add	sp, #12
   14316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1431a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1431e:	2b70      	cmp	r3, #112	; 0x70
   14320:	e7d3      	b.n	142ca <encode_uint+0x22>
	switch (specifier) {
   14322:	2508      	movs	r5, #8
   14324:	e7d4      	b.n	142d0 <encode_uint+0x28>
		value /= radix;
   14326:	4606      	mov	r6, r0
   14328:	460f      	mov	r7, r1
   1432a:	e7d6      	b.n	142da <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1432c:	9a01      	ldr	r2, [sp, #4]
   1432e:	2a01      	cmp	r2, #1
   14330:	bf0c      	ite	eq
   14332:	3337      	addeq	r3, #55	; 0x37
   14334:	3357      	addne	r3, #87	; 0x57
   14336:	e7da      	b.n	142ee <encode_uint+0x46>
		} else if (radix == 16) {
   14338:	2d10      	cmp	r5, #16
   1433a:	d1ea      	bne.n	14312 <encode_uint+0x6a>
			conv->altform_0c = true;
   1433c:	78a3      	ldrb	r3, [r4, #2]
   1433e:	f043 0310 	orr.w	r3, r3, #16
   14342:	e7e5      	b.n	14310 <encode_uint+0x68>
   14344:	00040efd 	.word	0x00040efd

00014348 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   14348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1434c:	4682      	mov	sl, r0
   1434e:	468b      	mov	fp, r1
   14350:	4691      	mov	r9, r2
   14352:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   14354:	2500      	movs	r5, #0
{
   14356:	b093      	sub	sp, #76	; 0x4c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   14358:	f899 0000 	ldrb.w	r0, [r9]
   1435c:	b908      	cbnz	r0, 14362 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1435e:	4628      	mov	r0, r5
   14360:	e33a      	b.n	149d8 <cbvprintf+0x690>
		if (*fp != '%') {
   14362:	f109 0301 	add.w	r3, r9, #1
   14366:	2825      	cmp	r0, #37	; 0x25
   14368:	9302      	str	r3, [sp, #8]
   1436a:	d006      	beq.n	1437a <cbvprintf+0x32>
			OUTC('%');
   1436c:	4659      	mov	r1, fp
   1436e:	47d0      	blx	sl
   14370:	2800      	cmp	r0, #0
   14372:	f2c0 8331 	blt.w	149d8 <cbvprintf+0x690>
   14376:	3501      	adds	r5, #1
			break;
   14378:	e1f1      	b.n	1475e <cbvprintf+0x416>
		} state = {
   1437a:	2218      	movs	r2, #24
   1437c:	2100      	movs	r1, #0
   1437e:	a80c      	add	r0, sp, #48	; 0x30
   14380:	f023 fa1f 	bl	377c2 <memset>
	if (*sp == '%') {
   14384:	f899 3001 	ldrb.w	r3, [r9, #1]
   14388:	2b25      	cmp	r3, #37	; 0x25
   1438a:	d059      	beq.n	14440 <cbvprintf+0xf8>
   1438c:	9a02      	ldr	r2, [sp, #8]
   1438e:	4616      	mov	r6, r2
		switch (*sp) {
   14390:	f812 3b01 	ldrb.w	r3, [r2], #1
   14394:	2b2b      	cmp	r3, #43	; 0x2b
   14396:	f000 808b 	beq.w	144b0 <cbvprintf+0x168>
   1439a:	d879      	bhi.n	14490 <cbvprintf+0x148>
   1439c:	2b20      	cmp	r3, #32
   1439e:	f000 808c 	beq.w	144ba <cbvprintf+0x172>
   143a2:	2b23      	cmp	r3, #35	; 0x23
   143a4:	f000 808e 	beq.w	144c4 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   143a8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   143ac:	f003 0244 	and.w	r2, r3, #68	; 0x44
   143b0:	2a44      	cmp	r2, #68	; 0x44
   143b2:	d103      	bne.n	143bc <cbvprintf+0x74>
		conv->flag_zero = false;
   143b4:	f36f 1386 	bfc	r3, #6, #1
   143b8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   143bc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   143c0:	9605      	str	r6, [sp, #20]
   143c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   143c6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   143ca:	7833      	ldrb	r3, [r6, #0]
   143cc:	2b2a      	cmp	r3, #42	; 0x2a
   143ce:	d17e      	bne.n	144ce <cbvprintf+0x186>
		conv->width_star = true;
   143d0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   143d4:	f043 0301 	orr.w	r3, r3, #1
   143d8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   143dc:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   143de:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   143e0:	781a      	ldrb	r2, [r3, #0]
   143e2:	2a2e      	cmp	r2, #46	; 0x2e
   143e4:	bf0c      	ite	eq
   143e6:	2101      	moveq	r1, #1
   143e8:	2100      	movne	r1, #0
   143ea:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   143ee:	f361 0241 	bfi	r2, r1, #1, #1
   143f2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   143f6:	d10b      	bne.n	14410 <cbvprintf+0xc8>
	++sp;
   143f8:	1c5a      	adds	r2, r3, #1
   143fa:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   143fc:	785a      	ldrb	r2, [r3, #1]
   143fe:	2a2a      	cmp	r2, #42	; 0x2a
   14400:	d17b      	bne.n	144fa <cbvprintf+0x1b2>
		conv->prec_star = true;
   14402:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   14406:	3302      	adds	r3, #2
		conv->prec_star = true;
   14408:	f042 0204 	orr.w	r2, r2, #4
   1440c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
   14410:	4619      	mov	r1, r3
   14412:	f811 0b01 	ldrb.w	r0, [r1], #1
   14416:	286c      	cmp	r0, #108	; 0x6c
   14418:	f000 80b6 	beq.w	14588 <cbvprintf+0x240>
   1441c:	d87d      	bhi.n	1451a <cbvprintf+0x1d2>
   1441e:	2868      	cmp	r0, #104	; 0x68
   14420:	f000 8084 	beq.w	1452c <cbvprintf+0x1e4>
   14424:	286a      	cmp	r0, #106	; 0x6a
   14426:	f000 80b9 	beq.w	1459c <cbvprintf+0x254>
   1442a:	284c      	cmp	r0, #76	; 0x4c
   1442c:	f000 80bd 	beq.w	145aa <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   14430:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
   14434:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   14436:	f36f 02c6 	bfc	r2, #3, #4
   1443a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   1443e:	e080      	b.n	14542 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   14440:	f109 0202 	add.w	r2, r9, #2
   14444:	9202      	str	r2, [sp, #8]
   14446:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1444a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1444e:	07d9      	lsls	r1, r3, #31
   14450:	f140 8149 	bpl.w	146e6 <cbvprintf+0x39e>
			width = va_arg(ap, int);
   14454:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   14458:	f1b8 0f00 	cmp.w	r8, #0
   1445c:	da07      	bge.n	1446e <cbvprintf+0x126>
				conv->flag_dash = true;
   1445e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
   14462:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
   14466:	f042 0204 	orr.w	r2, r2, #4
   1446a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
   1446e:	075a      	lsls	r2, r3, #29
   14470:	f140 8142 	bpl.w	146f8 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   14474:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   14478:	2f00      	cmp	r7, #0
   1447a:	f280 8141 	bge.w	14700 <cbvprintf+0x3b8>
				conv->prec_present = false;
   1447e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   14482:	f36f 0341 	bfc	r3, #1, #1
   14486:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1448a:	f04f 37ff 	mov.w	r7, #4294967295
   1448e:	e137      	b.n	14700 <cbvprintf+0x3b8>
		switch (*sp) {
   14490:	2b2d      	cmp	r3, #45	; 0x2d
   14492:	d006      	beq.n	144a2 <cbvprintf+0x15a>
   14494:	2b30      	cmp	r3, #48	; 0x30
   14496:	d187      	bne.n	143a8 <cbvprintf+0x60>
			conv->flag_zero = true;
   14498:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1449c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   144a0:	e003      	b.n	144aa <cbvprintf+0x162>
			conv->flag_dash = true;
   144a2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   144a6:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   144aa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   144ae:	e76e      	b.n	1438e <cbvprintf+0x46>
			conv->flag_plus = true;
   144b0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   144b4:	f043 0308 	orr.w	r3, r3, #8
   144b8:	e7f7      	b.n	144aa <cbvprintf+0x162>
			conv->flag_space = true;
   144ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   144be:	f043 0310 	orr.w	r3, r3, #16
   144c2:	e7f2      	b.n	144aa <cbvprintf+0x162>
			conv->flag_hash = true;
   144c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   144c8:	f043 0320 	orr.w	r3, r3, #32
   144cc:	e7ed      	b.n	144aa <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   144ce:	a805      	add	r0, sp, #20
   144d0:	f7ff fed4 	bl	1427c <extract_decimal>
	if (sp != wp) {
   144d4:	9b05      	ldr	r3, [sp, #20]
   144d6:	42b3      	cmp	r3, r6
   144d8:	d081      	beq.n	143de <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   144da:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   144de:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   144e0:	f3c1 0240 	ubfx	r2, r1, #1, #1
   144e4:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   144e8:	0052      	lsls	r2, r2, #1
   144ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
   144ee:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   144f2:	430a      	orrs	r2, r1
   144f4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   144f8:	e771      	b.n	143de <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   144fa:	a805      	add	r0, sp, #20
   144fc:	f7ff febe 	bl	1427c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   14500:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   14504:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   14506:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1450a:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1450e:	f360 0341 	bfi	r3, r0, #1, #1
   14512:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   14516:	9b05      	ldr	r3, [sp, #20]
   14518:	e77a      	b.n	14410 <cbvprintf+0xc8>
	switch (*sp) {
   1451a:	2874      	cmp	r0, #116	; 0x74
   1451c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14520:	d040      	beq.n	145a4 <cbvprintf+0x25c>
   14522:	287a      	cmp	r0, #122	; 0x7a
   14524:	d184      	bne.n	14430 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   14526:	4613      	mov	r3, r2
   14528:	2206      	movs	r2, #6
   1452a:	e028      	b.n	1457e <cbvprintf+0x236>
		if (*++sp == 'h') {
   1452c:	785a      	ldrb	r2, [r3, #1]
   1452e:	2a68      	cmp	r2, #104	; 0x68
   14530:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14534:	d121      	bne.n	1457a <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   14536:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   14538:	f361 02c6 	bfi	r2, r1, #3, #4
   1453c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   14540:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   14542:	460b      	mov	r3, r1
   14544:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   14548:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1454a:	9302      	str	r3, [sp, #8]
   1454c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   14550:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   14554:	f200 80bf 	bhi.w	146d6 <cbvprintf+0x38e>
   14558:	2a57      	cmp	r2, #87	; 0x57
   1455a:	d833      	bhi.n	145c4 <cbvprintf+0x27c>
   1455c:	2a41      	cmp	r2, #65	; 0x41
   1455e:	d003      	beq.n	14568 <cbvprintf+0x220>
   14560:	3a45      	subs	r2, #69	; 0x45
   14562:	2a02      	cmp	r2, #2
   14564:	f200 80b7 	bhi.w	146d6 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   14568:	2204      	movs	r2, #4
   1456a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1456e:	f362 0302 	bfi	r3, r2, #0, #3
   14572:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   14576:	2301      	movs	r3, #1
			break;
   14578:	e084      	b.n	14684 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   1457a:	4613      	mov	r3, r2
   1457c:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1457e:	f362 03c6 	bfi	r3, r2, #3, #4
   14582:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   14586:	e7dc      	b.n	14542 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   14588:	785a      	ldrb	r2, [r3, #1]
   1458a:	2a6c      	cmp	r2, #108	; 0x6c
   1458c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14590:	d101      	bne.n	14596 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   14592:	2104      	movs	r1, #4
   14594:	e7d0      	b.n	14538 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   14596:	4613      	mov	r3, r2
   14598:	2203      	movs	r2, #3
   1459a:	e7f0      	b.n	1457e <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   1459c:	2205      	movs	r2, #5
   1459e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   145a2:	e7ec      	b.n	1457e <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   145a4:	4613      	mov	r3, r2
   145a6:	2207      	movs	r2, #7
   145a8:	e7e9      	b.n	1457e <cbvprintf+0x236>
		conv->unsupported = true;
   145aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   145ae:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   145b2:	f023 0302 	bic.w	r3, r3, #2
   145b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   145ba:	f043 0302 	orr.w	r3, r3, #2
   145be:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   145c2:	e7be      	b.n	14542 <cbvprintf+0x1fa>
   145c4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   145c8:	2920      	cmp	r1, #32
   145ca:	f200 8084 	bhi.w	146d6 <cbvprintf+0x38e>
   145ce:	a001      	add	r0, pc, #4	; (adr r0, 145d4 <cbvprintf+0x28c>)
   145d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   145d4:	00014699 	.word	0x00014699
   145d8:	000146d7 	.word	0x000146d7
   145dc:	000146d7 	.word	0x000146d7
   145e0:	000146d7 	.word	0x000146d7
   145e4:	000146d7 	.word	0x000146d7
   145e8:	000146d7 	.word	0x000146d7
   145ec:	000146d7 	.word	0x000146d7
   145f0:	000146d7 	.word	0x000146d7
   145f4:	000146d7 	.word	0x000146d7
   145f8:	00014569 	.word	0x00014569
   145fc:	000146d7 	.word	0x000146d7
   14600:	00014699 	.word	0x00014699
   14604:	00014659 	.word	0x00014659
   14608:	00014569 	.word	0x00014569
   1460c:	00014569 	.word	0x00014569
   14610:	00014569 	.word	0x00014569
   14614:	000146d7 	.word	0x000146d7
   14618:	00014659 	.word	0x00014659
   1461c:	000146d7 	.word	0x000146d7
   14620:	000146d7 	.word	0x000146d7
   14624:	000146d7 	.word	0x000146d7
   14628:	000146d7 	.word	0x000146d7
   1462c:	000146a1 	.word	0x000146a1
   14630:	00014699 	.word	0x00014699
   14634:	000146bd 	.word	0x000146bd
   14638:	000146d7 	.word	0x000146d7
   1463c:	000146d7 	.word	0x000146d7
   14640:	000146bd 	.word	0x000146bd
   14644:	000146d7 	.word	0x000146d7
   14648:	00014699 	.word	0x00014699
   1464c:	000146d7 	.word	0x000146d7
   14650:	000146d7 	.word	0x000146d7
   14654:	00014699 	.word	0x00014699
		conv->specifier_cat = SPECIFIER_SINT;
   14658:	2001      	movs	r0, #1
   1465a:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1465e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   14662:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   14666:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   14668:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   1466c:	bf02      	ittt	eq
   1466e:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   14672:	f041 0101 	orreq.w	r1, r1, #1
   14676:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   1467a:	2a63      	cmp	r2, #99	; 0x63
   1467c:	d131      	bne.n	146e2 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1467e:	3b00      	subs	r3, #0
   14680:	bf18      	it	ne
   14682:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   14684:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   14688:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1468c:	430b      	orrs	r3, r1
   1468e:	f363 0241 	bfi	r2, r3, #1, #1
   14692:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   14696:	e6d8      	b.n	1444a <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   14698:	2002      	movs	r0, #2
   1469a:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   1469e:	e7de      	b.n	1465e <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   146a0:	2103      	movs	r1, #3
   146a2:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   146a6:	f003 0378 	and.w	r3, r3, #120	; 0x78
   146aa:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   146ae:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   146b2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   146b4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   146b8:	4143      	adcs	r3, r0
   146ba:	e7e3      	b.n	14684 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   146bc:	2103      	movs	r1, #3
   146be:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   146c2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   146c6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   146ca:	bf14      	ite	ne
   146cc:	2301      	movne	r3, #1
   146ce:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   146d0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   146d4:	e7d6      	b.n	14684 <cbvprintf+0x33c>
		conv->invalid = true;
   146d6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   146da:	f043 0301 	orr.w	r3, r3, #1
   146de:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   146e2:	2300      	movs	r3, #0
   146e4:	e7ce      	b.n	14684 <cbvprintf+0x33c>
		} else if (conv->width_present) {
   146e6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   146ea:	2a00      	cmp	r2, #0
		int width = -1;
   146ec:	bfac      	ite	ge
   146ee:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
   146f2:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
   146f6:	e6ba      	b.n	1446e <cbvprintf+0x126>
		} else if (conv->prec_present) {
   146f8:	079f      	lsls	r7, r3, #30
   146fa:	f57f aec6 	bpl.w	1448a <cbvprintf+0x142>
			precision = conv->prec_value;
   146fe:	9f10      	ldr	r7, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   14700:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   14702:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   14706:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			= (enum length_mod_enum)conv->length_mod;
   1470a:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		enum specifier_cat_enum specifier_cat
   1470e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   14712:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   14714:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   14718:	d137      	bne.n	1478a <cbvprintf+0x442>
			switch (length_mod) {
   1471a:	1ecb      	subs	r3, r1, #3
   1471c:	2b04      	cmp	r3, #4
   1471e:	d821      	bhi.n	14764 <cbvprintf+0x41c>
   14720:	e8df f003 	tbb	[pc, r3]
   14724:	20070703 	.word	0x20070703
   14728:	20          	.byte	0x20
   14729:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1472a:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   1472e:	17d3      	asrs	r3, r2, #31
   14730:	e004      	b.n	1473c <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   14732:	3407      	adds	r4, #7
   14734:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   14738:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   1473c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   14740:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14744:	f013 0603 	ands.w	r6, r3, #3
   14748:	d055      	beq.n	147f6 <cbvprintf+0x4ae>
			OUTS(sp, fp);
   1474a:	464a      	mov	r2, r9
   1474c:	4659      	mov	r1, fp
   1474e:	4650      	mov	r0, sl
   14750:	9b02      	ldr	r3, [sp, #8]
   14752:	f01b fd00 	bl	30156 <outs>
   14756:	2800      	cmp	r0, #0
   14758:	f2c0 813e 	blt.w	149d8 <cbvprintf+0x690>
   1475c:	4405      	add	r5, r0
			OUTS(bps, bpe);
   1475e:	f8dd 9008 	ldr.w	r9, [sp, #8]
   14762:	e5f9      	b.n	14358 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   14764:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   14768:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1476a:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1476e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   14772:	d105      	bne.n	14780 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   14774:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   14778:	930c      	str	r3, [sp, #48]	; 0x30
   1477a:	2300      	movs	r3, #0
   1477c:	930d      	str	r3, [sp, #52]	; 0x34
   1477e:	e7df      	b.n	14740 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   14780:	2902      	cmp	r1, #2
   14782:	d1dd      	bne.n	14740 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   14784:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   14788:	e7d1      	b.n	1472e <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1478a:	2b02      	cmp	r3, #2
   1478c:	d123      	bne.n	147d6 <cbvprintf+0x48e>
			switch (length_mod) {
   1478e:	1ecb      	subs	r3, r1, #3
   14790:	2b04      	cmp	r3, #4
   14792:	d813      	bhi.n	147bc <cbvprintf+0x474>
   14794:	e8df f003 	tbb	[pc, r3]
   14798:	120a0a03 	.word	0x120a0a03
   1479c:	12          	.byte	0x12
   1479d:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1479e:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   147a0:	6822      	ldr	r2, [r4, #0]
   147a2:	1d20      	adds	r0, r4, #4
   147a4:	920c      	str	r2, [sp, #48]	; 0x30
   147a6:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   147a8:	4604      	mov	r4, r0
   147aa:	e7c9      	b.n	14740 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   147ac:	3407      	adds	r4, #7
   147ae:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   147b2:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   147b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   147ba:	e7f5      	b.n	147a8 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   147bc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   147c0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   147c2:	930c      	str	r3, [sp, #48]	; 0x30
   147c4:	f04f 0300 	mov.w	r3, #0
   147c8:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   147ca:	d0d3      	beq.n	14774 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   147cc:	2902      	cmp	r1, #2
   147ce:	d1b7      	bne.n	14740 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   147d0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   147d4:	e7d0      	b.n	14778 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   147d6:	2b04      	cmp	r3, #4
   147d8:	d107      	bne.n	147ea <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   147da:	3407      	adds	r4, #7
   147dc:	f024 0407 	bic.w	r4, r4, #7
   147e0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   147e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   147e8:	e7aa      	b.n	14740 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   147ea:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   147ec:	bf04      	itt	eq
   147ee:	f854 3b04 	ldreq.w	r3, [r4], #4
   147f2:	930c      	streq	r3, [sp, #48]	; 0x30
   147f4:	e7a4      	b.n	14740 <cbvprintf+0x3f8>
		switch (conv->specifier) {
   147f6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   147fa:	2878      	cmp	r0, #120	; 0x78
   147fc:	d8af      	bhi.n	1475e <cbvprintf+0x416>
   147fe:	2862      	cmp	r0, #98	; 0x62
   14800:	d820      	bhi.n	14844 <cbvprintf+0x4fc>
   14802:	2825      	cmp	r0, #37	; 0x25
   14804:	f43f adb2 	beq.w	1436c <cbvprintf+0x24>
   14808:	2858      	cmp	r0, #88	; 0x58
   1480a:	d1a8      	bne.n	1475e <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1480c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   14810:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   14814:	9300      	str	r3, [sp, #0]
   14816:	aa0e      	add	r2, sp, #56	; 0x38
   14818:	ab06      	add	r3, sp, #24
   1481a:	f7ff fd45 	bl	142a8 <encode_uint>
   1481e:	4681      	mov	r9, r0
			if (precision >= 0) {
   14820:	2f00      	cmp	r7, #0
   14822:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   14826:	db0b      	blt.n	14840 <cbvprintf+0x4f8>
				conv->flag_zero = false;
   14828:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   1482c:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   14830:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   14834:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   14836:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   1483a:	d901      	bls.n	14840 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   1483c:	1aff      	subs	r7, r7, r3
   1483e:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   14840:	4607      	mov	r7, r0
   14842:	e03c      	b.n	148be <cbvprintf+0x576>
   14844:	3863      	subs	r0, #99	; 0x63
   14846:	2815      	cmp	r0, #21
   14848:	d889      	bhi.n	1475e <cbvprintf+0x416>
   1484a:	a201      	add	r2, pc, #4	; (adr r2, 14850 <cbvprintf+0x508>)
   1484c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   14850:	000148cf 	.word	0x000148cf
   14854:	00014931 	.word	0x00014931
   14858:	0001475f 	.word	0x0001475f
   1485c:	0001475f 	.word	0x0001475f
   14860:	0001475f 	.word	0x0001475f
   14864:	0001475f 	.word	0x0001475f
   14868:	00014931 	.word	0x00014931
   1486c:	0001475f 	.word	0x0001475f
   14870:	0001475f 	.word	0x0001475f
   14874:	0001475f 	.word	0x0001475f
   14878:	0001475f 	.word	0x0001475f
   1487c:	0001498f 	.word	0x0001498f
   14880:	0001495d 	.word	0x0001495d
   14884:	00014961 	.word	0x00014961
   14888:	0001475f 	.word	0x0001475f
   1488c:	0001475f 	.word	0x0001475f
   14890:	000148a9 	.word	0x000148a9
   14894:	0001475f 	.word	0x0001475f
   14898:	0001495d 	.word	0x0001495d
   1489c:	0001475f 	.word	0x0001475f
   148a0:	0001475f 	.word	0x0001475f
   148a4:	0001495d 	.word	0x0001495d
			if (precision >= 0) {
   148a8:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   148aa:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   148ae:	db0a      	blt.n	148c6 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   148b0:	4639      	mov	r1, r7
   148b2:	4648      	mov	r0, r9
   148b4:	f023 f8d7 	bl	37a66 <strnlen>
		char sign = 0;
   148b8:	2600      	movs	r6, #0
			bpe = bps + len;
   148ba:	eb09 0700 	add.w	r7, r9, r0
		if (bps == NULL) {
   148be:	f1b9 0f00 	cmp.w	r9, #0
   148c2:	d10c      	bne.n	148de <cbvprintf+0x596>
   148c4:	e74b      	b.n	1475e <cbvprintf+0x416>
				len = strlen(bps);
   148c6:	4648      	mov	r0, r9
   148c8:	f7fc fe1a 	bl	11500 <strlen>
   148cc:	e7f4      	b.n	148b8 <cbvprintf+0x570>
			break;
   148ce:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   148d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
   148d2:	f10d 0719 	add.w	r7, sp, #25
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   148d6:	f88d 3018 	strb.w	r3, [sp, #24]
			bps = buf;
   148da:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   148de:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   148e2:	b106      	cbz	r6, 148e6 <cbvprintf+0x59e>
			nj_len += 1U;
   148e4:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   148e6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   148ea:	06d0      	lsls	r0, r2, #27
   148ec:	d569      	bpl.n	149c2 <cbvprintf+0x67a>
			nj_len += 2U;
   148ee:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   148f0:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   148f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   148f4:	bf48      	it	mi
   148f6:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   148f8:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   148fa:	bf48      	it	mi
   148fc:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   148fe:	f1b8 0f00 	cmp.w	r8, #0
   14902:	dd76      	ble.n	149f2 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   14904:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   14908:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   1490c:	f3c2 0380 	ubfx	r3, r2, #2, #1
   14910:	9303      	str	r3, [sp, #12]
   14912:	0753      	lsls	r3, r2, #29
   14914:	d46d      	bmi.n	149f2 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   14916:	0650      	lsls	r0, r2, #25
   14918:	d561      	bpl.n	149de <cbvprintf+0x696>
					if (sign != 0) {
   1491a:	b13e      	cbz	r6, 1492c <cbvprintf+0x5e4>
						OUTC(sign);
   1491c:	4659      	mov	r1, fp
   1491e:	4630      	mov	r0, r6
   14920:	47d0      	blx	sl
   14922:	2800      	cmp	r0, #0
   14924:	db58      	blt.n	149d8 <cbvprintf+0x690>
						sign = 0;
   14926:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   14928:	3501      	adds	r5, #1
						sign = 0;
   1492a:	461e      	mov	r6, r3
					pad = '0';
   1492c:	2330      	movs	r3, #48	; 0x30
   1492e:	e057      	b.n	149e0 <cbvprintf+0x698>
			if (conv->flag_plus) {
   14930:	071e      	lsls	r6, r3, #28
   14932:	d411      	bmi.n	14958 <cbvprintf+0x610>
				sign = ' ';
   14934:	f013 0610 	ands.w	r6, r3, #16
   14938:	bf18      	it	ne
   1493a:	2620      	movne	r6, #32
			sint = value->sint;
   1493c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   14940:	2a00      	cmp	r2, #0
   14942:	f173 0100 	sbcs.w	r1, r3, #0
   14946:	f6bf af61 	bge.w	1480c <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   1494a:	4252      	negs	r2, r2
   1494c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   14950:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   14952:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   14956:	e759      	b.n	1480c <cbvprintf+0x4c4>
				sign = '+';
   14958:	262b      	movs	r6, #43	; 0x2b
   1495a:	e7ef      	b.n	1493c <cbvprintf+0x5f4>
		switch (conv->specifier) {
   1495c:	2600      	movs	r6, #0
   1495e:	e755      	b.n	1480c <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   14960:	980c      	ldr	r0, [sp, #48]	; 0x30
   14962:	b348      	cbz	r0, 149b8 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   14964:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   14968:	9300      	str	r3, [sp, #0]
   1496a:	2100      	movs	r1, #0
   1496c:	ab06      	add	r3, sp, #24
   1496e:	aa0e      	add	r2, sp, #56	; 0x38
   14970:	f7ff fc9a 	bl	142a8 <encode_uint>
				conv->altform_0c = true;
   14974:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   14978:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1497a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1497e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   14982:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   14986:	2600      	movs	r6, #0
				conv->altform_0c = true;
   14988:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
   1498c:	e748      	b.n	14820 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   1498e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   14990:	2907      	cmp	r1, #7
   14992:	f63f aee4 	bhi.w	1475e <cbvprintf+0x416>
   14996:	e8df f001 	tbb	[pc, r1]
   1499a:	040d      	.short	0x040d
   1499c:	08080d06 	.word	0x08080d06
   149a0:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   149a2:	701d      	strb	r5, [r3, #0]
		break;
   149a4:	e6db      	b.n	1475e <cbvprintf+0x416>
		*(short *)dp = (short)count;
   149a6:	801d      	strh	r5, [r3, #0]
		break;
   149a8:	e6d9      	b.n	1475e <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   149aa:	4628      	mov	r0, r5
   149ac:	17e9      	asrs	r1, r5, #31
   149ae:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   149b2:	e6d4      	b.n	1475e <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   149b4:	601d      	str	r5, [r3, #0]
		break;
   149b6:	e6d2      	b.n	1475e <cbvprintf+0x416>
			bpe = bps + 5;
   149b8:	4f2e      	ldr	r7, [pc, #184]	; (14a74 <cbvprintf+0x72c>)
   149ba:	4606      	mov	r6, r0
			bps = "(nil)";
   149bc:	f1a7 0905 	sub.w	r9, r7, #5
   149c0:	e78d      	b.n	148de <cbvprintf+0x596>
		} else if (conv->altform_0) {
   149c2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   149c4:	bf48      	it	mi
   149c6:	3301      	addmi	r3, #1
   149c8:	e792      	b.n	148f0 <cbvprintf+0x5a8>
					OUTC(pad);
   149ca:	4618      	mov	r0, r3
   149cc:	4659      	mov	r1, fp
   149ce:	9303      	str	r3, [sp, #12]
   149d0:	47d0      	blx	sl
   149d2:	2800      	cmp	r0, #0
   149d4:	9b03      	ldr	r3, [sp, #12]
   149d6:	da04      	bge.n	149e2 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   149d8:	b013      	add	sp, #76	; 0x4c
   149da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   149de:	2320      	movs	r3, #32
   149e0:	4445      	add	r5, r8
   149e2:	4642      	mov	r2, r8
				while (width-- > 0) {
   149e4:	2a00      	cmp	r2, #0
   149e6:	eba5 0108 	sub.w	r1, r5, r8
   149ea:	f108 38ff 	add.w	r8, r8, #4294967295
   149ee:	dcec      	bgt.n	149ca <cbvprintf+0x682>
   149f0:	460d      	mov	r5, r1
		if (sign != 0) {
   149f2:	b12e      	cbz	r6, 14a00 <cbvprintf+0x6b8>
			OUTC(sign);
   149f4:	4659      	mov	r1, fp
   149f6:	4630      	mov	r0, r6
   149f8:	47d0      	blx	sl
   149fa:	2800      	cmp	r0, #0
   149fc:	dbec      	blt.n	149d8 <cbvprintf+0x690>
   149fe:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   14a00:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   14a04:	06d9      	lsls	r1, r3, #27
   14a06:	d401      	bmi.n	14a0c <cbvprintf+0x6c4>
   14a08:	071a      	lsls	r2, r3, #28
   14a0a:	d505      	bpl.n	14a18 <cbvprintf+0x6d0>
				OUTC('0');
   14a0c:	4659      	mov	r1, fp
   14a0e:	2030      	movs	r0, #48	; 0x30
   14a10:	47d0      	blx	sl
   14a12:	2800      	cmp	r0, #0
   14a14:	dbe0      	blt.n	149d8 <cbvprintf+0x690>
   14a16:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   14a18:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   14a1c:	06db      	lsls	r3, r3, #27
   14a1e:	d506      	bpl.n	14a2e <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   14a20:	4659      	mov	r1, fp
   14a22:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14a26:	47d0      	blx	sl
   14a28:	2800      	cmp	r0, #0
   14a2a:	dbd5      	blt.n	149d8 <cbvprintf+0x690>
   14a2c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   14a2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   14a30:	442e      	add	r6, r5
   14a32:	1b73      	subs	r3, r6, r5
   14a34:	2b00      	cmp	r3, #0
   14a36:	dc15      	bgt.n	14a64 <cbvprintf+0x71c>
			OUTS(bps, bpe);
   14a38:	463b      	mov	r3, r7
   14a3a:	464a      	mov	r2, r9
   14a3c:	4659      	mov	r1, fp
   14a3e:	4650      	mov	r0, sl
   14a40:	f01b fb89 	bl	30156 <outs>
   14a44:	2800      	cmp	r0, #0
   14a46:	dbc7      	blt.n	149d8 <cbvprintf+0x690>
   14a48:	4405      	add	r5, r0
		while (width > 0) {
   14a4a:	44a8      	add	r8, r5
   14a4c:	eba8 0305 	sub.w	r3, r8, r5
   14a50:	2b00      	cmp	r3, #0
   14a52:	f77f ae84 	ble.w	1475e <cbvprintf+0x416>
			OUTC(' ');
   14a56:	4659      	mov	r1, fp
   14a58:	2020      	movs	r0, #32
   14a5a:	47d0      	blx	sl
   14a5c:	2800      	cmp	r0, #0
   14a5e:	dbbb      	blt.n	149d8 <cbvprintf+0x690>
   14a60:	3501      	adds	r5, #1
			--width;
   14a62:	e7f3      	b.n	14a4c <cbvprintf+0x704>
				OUTC('0');
   14a64:	4659      	mov	r1, fp
   14a66:	2030      	movs	r0, #48	; 0x30
   14a68:	47d0      	blx	sl
   14a6a:	2800      	cmp	r0, #0
   14a6c:	dbb4      	blt.n	149d8 <cbvprintf+0x690>
   14a6e:	3501      	adds	r5, #1
   14a70:	e7df      	b.n	14a32 <cbvprintf+0x6ea>
   14a72:	bf00      	nop
   14a74:	0003a8c5 	.word	0x0003a8c5

00014a78 <str_encode>:
	return append_bytes("]", 1, data);
}

static int str_encode(const char **str, json_append_bytes_t append_bytes,
		      void *data)
{
   14a78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14a7c:	460c      	mov	r4, r1
   14a7e:	4606      	mov	r6, r0
	int ret;

	ret = append_bytes("\"", 1, data);
   14a80:	2101      	movs	r1, #1
   14a82:	4812      	ldr	r0, [pc, #72]	; (14acc <str_encode+0x54>)
{
   14a84:	4615      	mov	r5, r2
	ret = append_bytes("\"", 1, data);
   14a86:	47a0      	blx	r4
	if (ret < 0) {
   14a88:	2800      	cmp	r0, #0
   14a8a:	db17      	blt.n	14abc <str_encode+0x44>
			char bytes[2] = { '\\', escaped };
   14a8c:	275c      	movs	r7, #92	; 0x5c
   14a8e:	6836      	ldr	r6, [r6, #0]
   14a90:	46b0      	mov	r8, r6
	for (cur = str; ret == 0 && *cur; cur++) {
   14a92:	f816 0b01 	ldrb.w	r0, [r6], #1
   14a96:	b920      	cbnz	r0, 14aa2 <str_encode+0x2a>
		return ret;
	}

	ret = json_escape_internal(*str, append_bytes, data);
	if (!ret) {
		return append_bytes("\"", 1, data);
   14a98:	462a      	mov	r2, r5
   14a9a:	2101      	movs	r1, #1
   14a9c:	480b      	ldr	r0, [pc, #44]	; (14acc <str_encode+0x54>)
   14a9e:	47a0      	blx	r4
   14aa0:	e00c      	b.n	14abc <str_encode+0x44>
		char escaped = escape_as(*cur);
   14aa2:	f01b fbad 	bl	30200 <escape_as>
		if (escaped) {
   14aa6:	b160      	cbz	r0, 14ac2 <str_encode+0x4a>
			ret = append_bytes(bytes, 2, data);
   14aa8:	462a      	mov	r2, r5
   14aaa:	2102      	movs	r1, #2
			char bytes[2] = { '\\', escaped };
   14aac:	f88d 0005 	strb.w	r0, [sp, #5]
   14ab0:	f88d 7004 	strb.w	r7, [sp, #4]
			ret = append_bytes(bytes, 2, data);
   14ab4:	a801      	add	r0, sp, #4
			ret = append_bytes(cur, 1, data);
   14ab6:	47a0      	blx	r4
	for (cur = str; ret == 0 && *cur; cur++) {
   14ab8:	2800      	cmp	r0, #0
   14aba:	d0e9      	beq.n	14a90 <str_encode+0x18>
	}

	return ret;
}
   14abc:	b002      	add	sp, #8
   14abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ret = append_bytes(cur, 1, data);
   14ac2:	462a      	mov	r2, r5
   14ac4:	2101      	movs	r1, #1
   14ac6:	4640      	mov	r0, r8
   14ac8:	e7f5      	b.n	14ab6 <str_encode+0x3e>
   14aca:	bf00      	nop
   14acc:	0003f5b2 	.word	0x0003f5b2

00014ad0 <json_obj_encode>:
}

int json_obj_encode(const struct json_obj_descr *descr, size_t descr_len,
		    const void *val, json_append_bytes_t append_bytes,
		    void *data)
{
   14ad0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ad4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   14ad8:	4605      	mov	r5, r0
   14ada:	460f      	mov	r7, r1
   14adc:	4690      	mov	r8, r2
	size_t i;
	int ret;

	ret = append_bytes("{", 1, data);
   14ade:	2101      	movs	r1, #1
   14ae0:	465a      	mov	r2, fp
   14ae2:	481b      	ldr	r0, [pc, #108]	; (14b50 <json_obj_encode+0x80>)
{
   14ae4:	461c      	mov	r4, r3
	ret = append_bytes("{", 1, data);
   14ae6:	4798      	blx	r3
	if (ret < 0) {
   14ae8:	2800      	cmp	r0, #0
   14aea:	db2e      	blt.n	14b4a <json_obj_encode+0x7a>
		return ret;
	}

	for (i = 0; i < descr_len; i++) {
   14aec:	2600      	movs	r6, #0
				 append_bytes, data);
		if (ret < 0) {
			return ret;
		}

		ret = append_bytes(":", 1, data);
   14aee:	f8df 9068 	ldr.w	r9, [pc, #104]	; 14b58 <json_obj_encode+0x88>
		if (ret < 0) {
			return ret;
		}

		if (i < descr_len - 1) {
			ret = append_bytes(",", 1, data);
   14af2:	f8df a068 	ldr.w	sl, [pc, #104]	; 14b5c <json_obj_encode+0x8c>
	for (i = 0; i < descr_len; i++) {
   14af6:	42b7      	cmp	r7, r6
		ret = str_encode((const char **)&descr[i].field_name,
   14af8:	465a      	mov	r2, fp
	for (i = 0; i < descr_len; i++) {
   14afa:	d106      	bne.n	14b0a <json_obj_encode+0x3a>
				return ret;
			}
		}
	}

	return append_bytes("}", 1, data);
   14afc:	2101      	movs	r1, #1
   14afe:	4623      	mov	r3, r4
   14b00:	4814      	ldr	r0, [pc, #80]	; (14b54 <json_obj_encode+0x84>)
}
   14b02:	b001      	add	sp, #4
   14b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return append_bytes("}", 1, data);
   14b08:	4718      	bx	r3
		ret = str_encode((const char **)&descr[i].field_name,
   14b0a:	4621      	mov	r1, r4
   14b0c:	4628      	mov	r0, r5
   14b0e:	f7ff ffb3 	bl	14a78 <str_encode>
		if (ret < 0) {
   14b12:	2800      	cmp	r0, #0
   14b14:	db19      	blt.n	14b4a <json_obj_encode+0x7a>
		ret = append_bytes(":", 1, data);
   14b16:	465a      	mov	r2, fp
   14b18:	2101      	movs	r1, #1
   14b1a:	4648      	mov	r0, r9
   14b1c:	47a0      	blx	r4
		if (ret < 0) {
   14b1e:	2800      	cmp	r0, #0
   14b20:	db13      	blt.n	14b4a <json_obj_encode+0x7a>
		ret = encode(&descr[i], val, append_bytes, data);
   14b22:	465b      	mov	r3, fp
   14b24:	4622      	mov	r2, r4
   14b26:	4641      	mov	r1, r8
   14b28:	4628      	mov	r0, r5
   14b2a:	f000 f819 	bl	14b60 <encode>
		if (ret < 0) {
   14b2e:	2800      	cmp	r0, #0
   14b30:	db0b      	blt.n	14b4a <json_obj_encode+0x7a>
		if (i < descr_len - 1) {
   14b32:	1e7b      	subs	r3, r7, #1
   14b34:	429e      	cmp	r6, r3
   14b36:	d302      	bcc.n	14b3e <json_obj_encode+0x6e>
	for (i = 0; i < descr_len; i++) {
   14b38:	3601      	adds	r6, #1
   14b3a:	3510      	adds	r5, #16
   14b3c:	e7db      	b.n	14af6 <json_obj_encode+0x26>
			ret = append_bytes(",", 1, data);
   14b3e:	465a      	mov	r2, fp
   14b40:	2101      	movs	r1, #1
   14b42:	4650      	mov	r0, sl
   14b44:	47a0      	blx	r4
			if (ret < 0) {
   14b46:	2800      	cmp	r0, #0
   14b48:	daf6      	bge.n	14b38 <json_obj_encode+0x68>
}
   14b4a:	b001      	add	sp, #4
   14b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b50:	0003a8c6 	.word	0x0003a8c6
   14b54:	0003a8c8 	.word	0x0003a8c8
   14b58:	000404a9 	.word	0x000404a9
   14b5c:	00040463 	.word	0x00040463

00014b60 <encode>:
{
   14b60:	b570      	push	{r4, r5, r6, lr}
   14b62:	4606      	mov	r6, r0
   14b64:	461d      	mov	r5, r3
	switch (descr->type) {
   14b66:	7973      	ldrb	r3, [r6, #5]
{
   14b68:	4614      	mov	r4, r2
	switch (descr->type) {
   14b6a:	085b      	lsrs	r3, r3, #1
	void *ptr = (char *)val + descr->offset;
   14b6c:	88c2      	ldrh	r2, [r0, #6]
	switch (descr->type) {
   14b6e:	2b5b      	cmp	r3, #91	; 0x5b
{
   14b70:	b086      	sub	sp, #24
	void *ptr = (char *)val + descr->offset;
   14b72:	eb01 0002 	add.w	r0, r1, r2
	switch (descr->type) {
   14b76:	d01d      	beq.n	14bb4 <encode+0x54>
   14b78:	d806      	bhi.n	14b88 <encode+0x28>
   14b7a:	2b22      	cmp	r3, #34	; 0x22
   14b7c:	d014      	beq.n	14ba8 <encode+0x48>
   14b7e:	2b30      	cmp	r3, #48	; 0x30
   14b80:	d028      	beq.n	14bd4 <encode+0x74>
   14b82:	f06f 0015 	mvn.w	r0, #21
   14b86:	e013      	b.n	14bb0 <encode+0x50>
   14b88:	2b74      	cmp	r3, #116	; 0x74
   14b8a:	d003      	beq.n	14b94 <encode+0x34>
   14b8c:	2b7b      	cmp	r3, #123	; 0x7b
   14b8e:	d019      	beq.n	14bc4 <encode+0x64>
   14b90:	2b66      	cmp	r3, #102	; 0x66
   14b92:	d1f6      	bne.n	14b82 <encode+0x22>
	if (*value) {
   14b94:	5c8b      	ldrb	r3, [r1, r2]
		return append_bytes("true", 4, data);
   14b96:	462a      	mov	r2, r5
	if (*value) {
   14b98:	b11b      	cbz	r3, 14ba2 <encode+0x42>
		return append_bytes("true", 4, data);
   14b9a:	2104      	movs	r1, #4
   14b9c:	4816      	ldr	r0, [pc, #88]	; (14bf8 <encode+0x98>)
	return append_bytes(buf, (size_t)ret, data);
   14b9e:	47a0      	blx	r4
   14ba0:	e006      	b.n	14bb0 <encode+0x50>
	return append_bytes("false", 5, data);
   14ba2:	2105      	movs	r1, #5
   14ba4:	4815      	ldr	r0, [pc, #84]	; (14bfc <encode+0x9c>)
   14ba6:	e7fa      	b.n	14b9e <encode+0x3e>
		return str_encode(ptr, append_bytes, data);
   14ba8:	462a      	mov	r2, r5
   14baa:	4621      	mov	r1, r4
   14bac:	f7ff ff64 	bl	14a78 <str_encode>
}
   14bb0:	b006      	add	sp, #24
   14bb2:	bd70      	pop	{r4, r5, r6, pc}
		return arr_encode(descr->array.element_descr, ptr,
   14bb4:	460a      	mov	r2, r1
   14bb6:	4623      	mov	r3, r4
   14bb8:	4601      	mov	r1, r0
   14bba:	9500      	str	r5, [sp, #0]
   14bbc:	68b0      	ldr	r0, [r6, #8]
   14bbe:	f000 f821 	bl	14c04 <arr_encode>
   14bc2:	e7f5      	b.n	14bb0 <encode+0x50>
		return json_obj_encode(descr->object.sub_descr,
   14bc4:	4602      	mov	r2, r0
   14bc6:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   14bca:	4623      	mov	r3, r4
   14bcc:	9500      	str	r5, [sp, #0]
   14bce:	f7ff ff7f 	bl	14ad0 <json_obj_encode>
   14bd2:	e7ed      	b.n	14bb0 <encode+0x50>
	ret = snprintk(buf, sizeof(buf), "%d", *num);
   14bd4:	588b      	ldr	r3, [r1, r2]
   14bd6:	210c      	movs	r1, #12
   14bd8:	4a09      	ldr	r2, [pc, #36]	; (14c00 <encode+0xa0>)
   14bda:	eb0d 0001 	add.w	r0, sp, r1
   14bde:	f01b f854 	bl	2fc8a <snprintk>
	if (ret < 0) {
   14be2:	2800      	cmp	r0, #0
   14be4:	dbe4      	blt.n	14bb0 <encode+0x50>
	if (ret >= (int)sizeof(buf)) {
   14be6:	280b      	cmp	r0, #11
   14be8:	dc03      	bgt.n	14bf2 <encode+0x92>
	return append_bytes(buf, (size_t)ret, data);
   14bea:	4601      	mov	r1, r0
   14bec:	462a      	mov	r2, r5
   14bee:	a803      	add	r0, sp, #12
   14bf0:	e7d5      	b.n	14b9e <encode+0x3e>
		return -ENOMEM;
   14bf2:	f06f 000b 	mvn.w	r0, #11
		return num_encode(ptr, append_bytes, data);
   14bf6:	e7db      	b.n	14bb0 <encode+0x50>
   14bf8:	0003a8ca 	.word	0x0003a8ca
   14bfc:	0003a8cf 	.word	0x0003a8cf
   14c00:	00039c57 	.word	0x00039c57

00014c04 <arr_encode>:
{
   14c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c08:	4605      	mov	r5, r0
   14c0a:	461c      	mov	r4, r3
   14c0c:	460e      	mov	r6, r1
   14c0e:	4611      	mov	r1, r2
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   14c10:	f01b fab7 	bl	30182 <get_elem_size>
{
   14c14:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   14c18:	88ea      	ldrh	r2, [r5, #6]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   14c1a:	9001      	str	r0, [sp, #4]
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   14c1c:	f851 9002 	ldr.w	r9, [r1, r2]
	ret = append_bytes("[", 1, data);
   14c20:	4816      	ldr	r0, [pc, #88]	; (14c7c <arr_encode+0x78>)
   14c22:	4642      	mov	r2, r8
   14c24:	2101      	movs	r1, #1
   14c26:	47a0      	blx	r4
	if (ret < 0) {
   14c28:	2800      	cmp	r0, #0
   14c2a:	db23      	blt.n	14c74 <arr_encode+0x70>
	for (i = 0; i < n_elem; i++) {
   14c2c:	2700      	movs	r7, #0
			ret = append_bytes(",", 1, data);
   14c2e:	f8df b054 	ldr.w	fp, [pc, #84]	; 14c84 <arr_encode+0x80>
		if (i < n_elem - 1) {
   14c32:	f109 3aff 	add.w	sl, r9, #4294967295
	for (i = 0; i < n_elem; i++) {
   14c36:	454f      	cmp	r7, r9
   14c38:	d107      	bne.n	14c4a <arr_encode+0x46>
	return append_bytes("]", 1, data);
   14c3a:	4642      	mov	r2, r8
   14c3c:	2101      	movs	r1, #1
   14c3e:	4623      	mov	r3, r4
   14c40:	480f      	ldr	r0, [pc, #60]	; (14c80 <arr_encode+0x7c>)
}
   14c42:	b003      	add	sp, #12
   14c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return append_bytes("]", 1, data);
   14c48:	4718      	bx	r3
		ret = encode(elem_descr, (char *)field - elem_descr->offset,
   14c4a:	88e9      	ldrh	r1, [r5, #6]
   14c4c:	4643      	mov	r3, r8
   14c4e:	4622      	mov	r2, r4
   14c50:	4628      	mov	r0, r5
   14c52:	1a71      	subs	r1, r6, r1
   14c54:	f7ff ff84 	bl	14b60 <encode>
		if (ret < 0) {
   14c58:	2800      	cmp	r0, #0
   14c5a:	db0b      	blt.n	14c74 <arr_encode+0x70>
		if (i < n_elem - 1) {
   14c5c:	45ba      	cmp	sl, r7
   14c5e:	d803      	bhi.n	14c68 <arr_encode+0x64>
		field = (char *)field + elem_size;
   14c60:	9b01      	ldr	r3, [sp, #4]
	for (i = 0; i < n_elem; i++) {
   14c62:	3701      	adds	r7, #1
		field = (char *)field + elem_size;
   14c64:	441e      	add	r6, r3
	for (i = 0; i < n_elem; i++) {
   14c66:	e7e6      	b.n	14c36 <arr_encode+0x32>
			ret = append_bytes(",", 1, data);
   14c68:	4642      	mov	r2, r8
   14c6a:	2101      	movs	r1, #1
   14c6c:	4658      	mov	r0, fp
   14c6e:	47a0      	blx	r4
			if (ret < 0) {
   14c70:	2800      	cmp	r0, #0
   14c72:	daf5      	bge.n	14c60 <arr_encode+0x5c>
}
   14c74:	b003      	add	sp, #12
   14c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c7a:	bf00      	nop
   14c7c:	0003a8d5 	.word	0x0003a8d5
   14c80:	000416fe 	.word	0x000416fe
   14c84:	00040463 	.word	0x00040463

00014c88 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   14c88:	4604      	mov	r4, r0
   14c8a:	b508      	push	{r3, lr}
	__asm__ volatile(
   14c8c:	f04f 0220 	mov.w	r2, #32
   14c90:	f3ef 8311 	mrs	r3, BASEPRI
   14c94:	f382 8811 	msr	BASEPRI, r2
   14c98:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   14c9c:	f01b ffba 	bl	30c14 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   14ca0:	4620      	mov	r0, r4
   14ca2:	f003 f895 	bl	17dd0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   14ca6:	4803      	ldr	r0, [pc, #12]	; (14cb4 <sys_reboot+0x2c>)
   14ca8:	f01a ffe2 	bl	2fc70 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   14cac:	f002 fdca 	bl	17844 <arch_cpu_idle>
   14cb0:	e7fc      	b.n	14cac <sys_reboot+0x24>
   14cb2:	bf00      	nop
   14cb4:	0003a8d7 	.word	0x0003a8d7

00014cb8 <nordicsemi_nrf91_init>:
   14cb8:	f04f 0220 	mov.w	r2, #32
   14cbc:	f3ef 8311 	mrs	r3, BASEPRI
   14cc0:	f382 8811 	msr	BASEPRI, r2
   14cc4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14cc8:	2101      	movs	r1, #1
   14cca:	4a04      	ldr	r2, [pc, #16]	; (14cdc <nordicsemi_nrf91_init+0x24>)
   14ccc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   14cd0:	f383 8811 	msr	BASEPRI, r3
   14cd4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14cd8:	2000      	movs	r0, #0
   14cda:	4770      	bx	lr
   14cdc:	40039000 	.word	0x40039000

00014ce0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14ce0:	b120      	cbz	r0, 14cec <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   14ce2:	4b03      	ldr	r3, [pc, #12]	; (14cf0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14ce4:	0180      	lsls	r0, r0, #6
   14ce6:	f043 0301 	orr.w	r3, r3, #1
   14cea:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14cec:	4770      	bx	lr
   14cee:	bf00      	nop
   14cf0:	00038a10 	.word	0x00038a10

00014cf4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   14cf4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   14cf6:	2200      	movs	r2, #0
{
   14cf8:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   14cfa:	490f      	ldr	r1, [pc, #60]	; (14d38 <enable_logger+0x44>)
   14cfc:	480f      	ldr	r0, [pc, #60]	; (14d3c <enable_logger+0x48>)
   14cfe:	f022 fc93 	bl	37628 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14d02:	2200      	movs	r2, #0
   14d04:	2300      	movs	r3, #0
   14d06:	2400      	movs	r4, #0
   14d08:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14d0c:	230e      	movs	r3, #14
   14d0e:	4d0c      	ldr	r5, [pc, #48]	; (14d40 <enable_logger+0x4c>)
   14d10:	e9cd 3403 	strd	r3, r4, [sp, #12]
   14d14:	f44f 7240 	mov.w	r2, #768	; 0x300
   14d18:	4628      	mov	r0, r5
   14d1a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14d1e:	4b09      	ldr	r3, [pc, #36]	; (14d44 <enable_logger+0x50>)
   14d20:	4909      	ldr	r1, [pc, #36]	; (14d48 <enable_logger+0x54>)
   14d22:	9400      	str	r4, [sp, #0]
   14d24:	f015 fc98 	bl	2a658 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14d28:	4908      	ldr	r1, [pc, #32]	; (14d4c <enable_logger+0x58>)
   14d2a:	4628      	mov	r0, r5
   14d2c:	f022 fb75 	bl	3741a <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   14d30:	4620      	mov	r0, r4
   14d32:	b009      	add	sp, #36	; 0x24
   14d34:	bd30      	pop	{r4, r5, pc}
   14d36:	bf00      	nop
   14d38:	00014d51 	.word	0x00014d51
   14d3c:	20015300 	.word	0x20015300
   14d40:	20015338 	.word	0x20015338
   14d44:	0001523d 	.word	0x0001523d
   14d48:	2001fcd8 	.word	0x2001fcd8
   14d4c:	0003a904 	.word	0x0003a904

00014d50 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   14d50:	4801      	ldr	r0, [pc, #4]	; (14d58 <log_process_thread_timer_expiry_fn+0x8>)
   14d52:	f016 ba55 	b.w	2b200 <z_impl_k_sem_give>
   14d56:	bf00      	nop
   14d58:	20015060 	.word	0x20015060

00014d5c <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   14d5c:	2920      	cmp	r1, #32
{
   14d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d60:	4605      	mov	r5, r0
   14d62:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   14d64:	d909      	bls.n	14d7a <z_log_get_s_mask+0x1e>
   14d66:	4914      	ldr	r1, [pc, #80]	; (14db8 <z_log_get_s_mask+0x5c>)
   14d68:	4814      	ldr	r0, [pc, #80]	; (14dbc <z_log_get_s_mask+0x60>)
   14d6a:	2380      	movs	r3, #128	; 0x80
   14d6c:	4a14      	ldr	r2, [pc, #80]	; (14dc0 <z_log_get_s_mask+0x64>)
   14d6e:	f01a ff7f 	bl	2fc70 <printk>
   14d72:	2180      	movs	r1, #128	; 0x80
   14d74:	4812      	ldr	r0, [pc, #72]	; (14dc0 <z_log_get_s_mask+0x64>)
   14d76:	f01b fa61 	bl	3023c <assert_post_action>
			arm = false;
   14d7a:	2000      	movs	r0, #0
				mask |= BIT(arg);
   14d7c:	2701      	movs	r7, #1
			arm = false;
   14d7e:	4603      	mov	r3, r0
   14d80:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   14d82:	4e10      	ldr	r6, [pc, #64]	; (14dc4 <z_log_get_s_mask+0x68>)
	while ((curr = *str++) && arg < nargs) {
   14d84:	f815 1b01 	ldrb.w	r1, [r5], #1
   14d88:	b109      	cbz	r1, 14d8e <z_log_get_s_mask+0x32>
   14d8a:	42a3      	cmp	r3, r4
   14d8c:	d300      	bcc.n	14d90 <z_log_get_s_mask+0x34>
}
   14d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   14d90:	2925      	cmp	r1, #37	; 0x25
   14d92:	d102      	bne.n	14d9a <z_log_get_s_mask+0x3e>
			arm = !arm;
   14d94:	f082 0201 	eor.w	r2, r2, #1
   14d98:	e7f4      	b.n	14d84 <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
   14d9a:	2a00      	cmp	r2, #0
   14d9c:	d0f2      	beq.n	14d84 <z_log_get_s_mask+0x28>
   14d9e:	f811 c006 	ldrb.w	ip, [r1, r6]
   14da2:	f01c 0f03 	tst.w	ip, #3
   14da6:	d0ed      	beq.n	14d84 <z_log_get_s_mask+0x28>
			if (curr == 's') {
   14da8:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   14daa:	bf04      	itt	eq
   14dac:	fa07 f203 	lsleq.w	r2, r7, r3
   14db0:	4310      	orreq	r0, r2
			arg++;
   14db2:	3301      	adds	r3, #1
			arm = false;
   14db4:	2200      	movs	r2, #0
   14db6:	e7e5      	b.n	14d84 <z_log_get_s_mask+0x28>
   14db8:	0003a939 	.word	0x0003a939
   14dbc:	0003a56b 	.word	0x0003a56b
   14dc0:	0003a90c 	.word	0x0003a90c
   14dc4:	00040efd 	.word	0x00040efd

00014dc8 <log_core_init>:
	panic_mode = false;
   14dc8:	2200      	movs	r2, #0
{
   14dca:	b510      	push	{r4, lr}
	panic_mode = false;
   14dcc:	4b0b      	ldr	r3, [pc, #44]	; (14dfc <log_core_init+0x34>)
	log_output_timestamp_freq_set(freq);
   14dce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
   14dd2:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   14dd4:	4b0a      	ldr	r3, [pc, #40]	; (14e00 <log_core_init+0x38>)
   14dd6:	4a0b      	ldr	r2, [pc, #44]	; (14e04 <log_core_init+0x3c>)
   14dd8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   14dda:	f000 fda1 	bl	15920 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   14dde:	f000 faa7 	bl	15330 <log_msg_pool_init>
		log_list_init(&list);
   14de2:	4809      	ldr	r0, [pc, #36]	; (14e08 <log_core_init+0x40>)
   14de4:	f01b fa52 	bl	3028c <log_list_init>
}
   14de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   14dec:	230c      	movs	r3, #12
   14dee:	f44f 7284 	mov.w	r2, #264	; 0x108
   14df2:	4906      	ldr	r1, [pc, #24]	; (14e0c <log_core_init+0x44>)
   14df4:	4806      	ldr	r0, [pc, #24]	; (14e10 <log_core_init+0x48>)
   14df6:	f022 baee 	b.w	373d6 <k_mem_slab_init>
   14dfa:	bf00      	nop
   14dfc:	2001ba6d 	.word	0x2001ba6d
   14e00:	2001471c 	.word	0x2001471c
   14e04:	000302d1 	.word	0x000302d1
   14e08:	20016030 	.word	0x20016030
   14e0c:	20025a78 	.word	0x20025a78
   14e10:	20016038 	.word	0x20016038

00014e14 <get_msg>:
{
   14e14:	b510      	push	{r4, lr}
	__asm__ volatile(
   14e16:	f04f 0320 	mov.w	r3, #32
   14e1a:	f3ef 8411 	mrs	r4, BASEPRI
   14e1e:	f383 8811 	msr	BASEPRI, r3
   14e22:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   14e26:	4804      	ldr	r0, [pc, #16]	; (14e38 <get_msg+0x24>)
   14e28:	f01b fa40 	bl	302ac <log_list_head_get>
	__asm__ volatile(
   14e2c:	f384 8811 	msr	BASEPRI, r4
   14e30:	f3bf 8f6f 	isb	sy
}
   14e34:	bd10      	pop	{r4, pc}
   14e36:	bf00      	nop
   14e38:	20016030 	.word	0x20016030

00014e3c <z_log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14e3c:	4b04      	ldr	r3, [pc, #16]	; (14e50 <z_log_dropped+0x14>)
   14e3e:	e8d3 2fef 	ldaex	r2, [r3]
   14e42:	3201      	adds	r2, #1
   14e44:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14e48:	2900      	cmp	r1, #0
   14e4a:	d1f8      	bne.n	14e3e <z_log_dropped+0x2>
}
   14e4c:	4770      	bx	lr
   14e4e:	bf00      	nop
   14e50:	20016028 	.word	0x20016028

00014e54 <z_log_dropped_read_and_clear>:
}
   14e54:	2000      	movs	r0, #0
   14e56:	4602      	mov	r2, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14e58:	4b03      	ldr	r3, [pc, #12]	; (14e68 <z_log_dropped_read_and_clear+0x14>)
   14e5a:	e8d3 0fef 	ldaex	r0, [r3]
   14e5e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14e62:	2900      	cmp	r1, #0
   14e64:	d1f9      	bne.n	14e5a <z_log_dropped_read_and_clear+0x6>
   14e66:	4770      	bx	lr
   14e68:	20016028 	.word	0x20016028

00014e6c <dropped_notify>:
{
   14e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   14e6e:	f7ff fff1 	bl	14e54 <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
   14e72:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
   14e74:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   14e76:	4c0a      	ldr	r4, [pc, #40]	; (14ea0 <dropped_notify+0x34>)
   14e78:	4d0a      	ldr	r5, [pc, #40]	; (14ea4 <dropped_notify+0x38>)
   14e7a:	1b2d      	subs	r5, r5, r4
   14e7c:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   14e7e:	42ae      	cmp	r6, r5
   14e80:	db00      	blt.n	14e84 <dropped_notify+0x18>
}
   14e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   14e84:	4620      	mov	r0, r4
   14e86:	f01b fa17 	bl	302b8 <log_backend_is_active>
   14e8a:	b128      	cbz	r0, 14e98 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   14e8c:	6823      	ldr	r3, [r4, #0]
   14e8e:	691b      	ldr	r3, [r3, #16]
   14e90:	b113      	cbz	r3, 14e98 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
   14e92:	4639      	mov	r1, r7
   14e94:	4620      	mov	r0, r4
   14e96:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   14e98:	3601      	adds	r6, #1
   14e9a:	3410      	adds	r4, #16
   14e9c:	e7ef      	b.n	14e7e <dropped_notify+0x12>
   14e9e:	bf00      	nop
   14ea0:	00038900 	.word	0x00038900
   14ea4:	00038910 	.word	0x00038910

00014ea8 <log_source_name_get>:
   14ea8:	4a04      	ldr	r2, [pc, #16]	; (14ebc <log_source_name_get+0x14>)
   14eaa:	4b05      	ldr	r3, [pc, #20]	; (14ec0 <log_source_name_get+0x18>)
   14eac:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   14eae:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   14eb2:	bf34      	ite	cc
   14eb4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   14eb8:	2000      	movcs	r0, #0
}
   14eba:	4770      	bx	lr
   14ebc:	000387c0 	.word	0x000387c0
   14ec0:	00038900 	.word	0x00038900

00014ec4 <log_backend_enable>:
{
   14ec4:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   14ec6:	4c10      	ldr	r4, [pc, #64]	; (14f08 <log_backend_enable+0x44>)
{
   14ec8:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   14eca:	1b04      	subs	r4, r0, r4
   14ecc:	1124      	asrs	r4, r4, #4
   14ece:	3401      	adds	r4, #1
{
   14ed0:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
   14ed2:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   14ed4:	b948      	cbnz	r0, 14eea <log_backend_enable+0x26>
   14ed6:	490d      	ldr	r1, [pc, #52]	; (14f0c <log_backend_enable+0x48>)
   14ed8:	480d      	ldr	r0, [pc, #52]	; (14f10 <log_backend_enable+0x4c>)
   14eda:	23d1      	movs	r3, #209	; 0xd1
   14edc:	4a0d      	ldr	r2, [pc, #52]	; (14f14 <log_backend_enable+0x50>)
   14ede:	f01a fec7 	bl	2fc70 <printk>
   14ee2:	21d1      	movs	r1, #209	; 0xd1
   14ee4:	480b      	ldr	r0, [pc, #44]	; (14f14 <log_backend_enable+0x50>)
   14ee6:	f01b f9a9 	bl	3023c <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   14eea:	2201      	movs	r2, #1
	backend->cb->id = id;
   14eec:	686b      	ldr	r3, [r5, #4]
   14eee:	711c      	strb	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   14ef0:	4c09      	ldr	r4, [pc, #36]	; (14f18 <log_backend_enable+0x54>)
	backend->cb->active = true;
   14ef2:	715a      	strb	r2, [r3, #5]
   14ef4:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   14ef6:	601e      	str	r6, [r3, #0]
   14ef8:	b912      	cbnz	r2, 14f00 <log_backend_enable+0x3c>
   14efa:	4808      	ldr	r0, [pc, #32]	; (14f1c <log_backend_enable+0x58>)
   14efc:	f016 f980 	bl	2b200 <z_impl_k_sem_give>
	backend_attached = true;
   14f00:	2301      	movs	r3, #1
   14f02:	7023      	strb	r3, [r4, #0]
}
   14f04:	bd70      	pop	{r4, r5, r6, pc}
   14f06:	bf00      	nop
   14f08:	00038900 	.word	0x00038900
   14f0c:	0003a982 	.word	0x0003a982
   14f10:	0003a56b 	.word	0x0003a56b
   14f14:	0003a951 	.word	0x0003a951
   14f18:	2001ba6c 	.word	0x2001ba6c
   14f1c:	20015060 	.word	0x20015060

00014f20 <log_init>:
	return __log_backends_end - __log_backends_start;
   14f20:	4b18      	ldr	r3, [pc, #96]	; (14f84 <log_init+0x64>)
   14f22:	4a19      	ldr	r2, [pc, #100]	; (14f88 <log_init+0x68>)
{
   14f24:	b570      	push	{r4, r5, r6, lr}
   14f26:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   14f28:	2b9f      	cmp	r3, #159	; 0x9f
   14f2a:	ea4f 1623 	mov.w	r6, r3, asr #4
   14f2e:	d90b      	bls.n	14f48 <log_init+0x28>
   14f30:	4916      	ldr	r1, [pc, #88]	; (14f8c <log_init+0x6c>)
   14f32:	4817      	ldr	r0, [pc, #92]	; (14f90 <log_init+0x70>)
   14f34:	f240 234d 	movw	r3, #589	; 0x24d
   14f38:	4a16      	ldr	r2, [pc, #88]	; (14f94 <log_init+0x74>)
   14f3a:	f01a fe99 	bl	2fc70 <printk>
   14f3e:	f240 214d 	movw	r1, #589	; 0x24d
   14f42:	4814      	ldr	r0, [pc, #80]	; (14f94 <log_init+0x74>)
   14f44:	f01b f97a 	bl	3023c <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14f48:	4b13      	ldr	r3, [pc, #76]	; (14f98 <log_init+0x78>)
   14f4a:	e8d3 5fef 	ldaex	r5, [r3]
   14f4e:	1c6a      	adds	r2, r5, #1
   14f50:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14f54:	2900      	cmp	r1, #0
   14f56:	d1f8      	bne.n	14f4a <log_init+0x2a>
	if (atomic_inc(&initialized) != 0) {
   14f58:	b915      	cbnz	r5, 14f60 <log_init+0x40>
   14f5a:	4c0b      	ldr	r4, [pc, #44]	; (14f88 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
   14f5c:	42b5      	cmp	r5, r6
   14f5e:	db00      	blt.n	14f62 <log_init+0x42>
}
   14f60:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   14f62:	7b23      	ldrb	r3, [r4, #12]
   14f64:	b153      	cbz	r3, 14f7c <log_init+0x5c>
			if (backend->api->init != NULL) {
   14f66:	6823      	ldr	r3, [r4, #0]
   14f68:	699b      	ldr	r3, [r3, #24]
   14f6a:	b10b      	cbz	r3, 14f70 <log_init+0x50>
				backend->api->init(backend);
   14f6c:	4620      	mov	r0, r4
   14f6e:	4798      	blx	r3
			log_backend_enable(backend,
   14f70:	6863      	ldr	r3, [r4, #4]
   14f72:	2204      	movs	r2, #4
   14f74:	4620      	mov	r0, r4
   14f76:	6819      	ldr	r1, [r3, #0]
   14f78:	f7ff ffa4 	bl	14ec4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   14f7c:	3501      	adds	r5, #1
   14f7e:	3410      	adds	r4, #16
   14f80:	e7ec      	b.n	14f5c <log_init+0x3c>
   14f82:	bf00      	nop
   14f84:	00038910 	.word	0x00038910
   14f88:	00038900 	.word	0x00038900
   14f8c:	0003a999 	.word	0x0003a999
   14f90:	0003a56b 	.word	0x0003a56b
   14f94:	0003a90c 	.word	0x0003a90c
   14f98:	2001602c 	.word	0x2001602c

00014f9c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   14f9c:	4b15      	ldr	r3, [pc, #84]	; (14ff4 <z_log_strdup+0x58>)
{
   14f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   14fa0:	4298      	cmp	r0, r3
{
   14fa2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   14fa4:	d302      	bcc.n	14fac <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   14fa6:	4b14      	ldr	r3, [pc, #80]	; (14ff8 <z_log_strdup+0x5c>)
   14fa8:	4298      	cmp	r0, r3
   14faa:	d31d      	bcc.n	14fe8 <z_log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   14fac:	2200      	movs	r2, #0
   14fae:	2300      	movs	r3, #0
   14fb0:	4812      	ldr	r0, [pc, #72]	; (14ffc <z_log_strdup+0x60>)
   14fb2:	a901      	add	r1, sp, #4
   14fb4:	f015 fa20 	bl	2a3f8 <k_mem_slab_alloc>
	if (err != 0) {
   14fb8:	4605      	mov	r5, r0
   14fba:	b9c0      	cbnz	r0, 14fee <z_log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14fbc:	2201      	movs	r2, #1
   14fbe:	9b01      	ldr	r3, [sp, #4]
   14fc0:	e8d3 1fef 	ldaex	r1, [r3]
   14fc4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   14fc8:	2800      	cmp	r0, #0
   14fca:	d1f9      	bne.n	14fc0 <z_log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   14fcc:	9e01      	ldr	r6, [sp, #4]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   14fce:	22ff      	movs	r2, #255	; 0xff
   14fd0:	1d33      	adds	r3, r6, #4
   14fd2:	4618      	mov	r0, r3
   14fd4:	4621      	mov	r1, r4
   14fd6:	f022 fd33 	bl	37a40 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   14fda:	227e      	movs	r2, #126	; 0x7e
   14fdc:	4603      	mov	r3, r0
   14fde:	f886 2103 	strb.w	r2, [r6, #259]	; 0x103
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   14fe2:	f886 5104 	strb.w	r5, [r6, #260]	; 0x104
	return dup->buf;
   14fe6:	461c      	mov	r4, r3
}
   14fe8:	4620      	mov	r0, r4
   14fea:	b002      	add	sp, #8
   14fec:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   14fee:	4b04      	ldr	r3, [pc, #16]	; (15000 <z_log_strdup+0x64>)
   14ff0:	e7f9      	b.n	14fe6 <z_log_strdup+0x4a>
   14ff2:	bf00      	nop
   14ff4:	0003849c 	.word	0x0003849c
   14ff8:	00041704 	.word	0x00041704
   14ffc:	20016038 	.word	0x20016038
   15000:	0003a9bd 	.word	0x0003a9bd

00015004 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   15004:	b150      	cbz	r0, 1501c <log_is_strdup+0x18>
   15006:	4b06      	ldr	r3, [pc, #24]	; (15020 <log_is_strdup+0x1c>)
   15008:	4298      	cmp	r0, r3
   1500a:	d306      	bcc.n	1501a <log_is_strdup+0x16>
   1500c:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
   15010:	4298      	cmp	r0, r3
   15012:	bf2c      	ite	cs
   15014:	2000      	movcs	r0, #0
   15016:	2001      	movcc	r0, #1
   15018:	4770      	bx	lr
   1501a:	2000      	movs	r0, #0
}
   1501c:	4770      	bx	lr
   1501e:	bf00      	nop
   15020:	20025a78 	.word	0x20025a78

00015024 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   15024:	4b46      	ldr	r3, [pc, #280]	; (15140 <z_impl_log_process+0x11c>)
{
   15026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   1502a:	781b      	ldrb	r3, [r3, #0]
{
   1502c:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   1502e:	b903      	cbnz	r3, 15032 <z_impl_log_process+0xe>
   15030:	b1e0      	cbz	r0, 1506c <z_impl_log_process+0x48>
	msg = get_msg();
   15032:	f7ff feef 	bl	14e14 <get_msg>
	if (msg.msg) {
   15036:	4605      	mov	r5, r0
   15038:	b158      	cbz	r0, 15052 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1503a:	4b42      	ldr	r3, [pc, #264]	; (15144 <z_impl_log_process+0x120>)
   1503c:	e8d3 2fef 	ldaex	r2, [r3]
   15040:	3a01      	subs	r2, #1
   15042:	e8c3 2fe1 	stlex	r1, r2, [r3]
   15046:	2900      	cmp	r1, #0
   15048:	d1f8      	bne.n	1503c <z_impl_log_process+0x18>
	if (!bypass) {
   1504a:	b19c      	cbz	r4, 15074 <z_impl_log_process+0x50>
			log_msg_put(msg.msg);
   1504c:	4628      	mov	r0, r5
   1504e:	f01b fa3d 	bl	304cc <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   15052:	b92c      	cbnz	r4, 15060 <z_impl_log_process+0x3c>
	return dropped_cnt > 0;
   15054:	4b3c      	ldr	r3, [pc, #240]	; (15148 <z_impl_log_process+0x124>)
	if (!bypass && z_log_dropped_pending()) {
   15056:	681b      	ldr	r3, [r3, #0]
   15058:	2b00      	cmp	r3, #0
   1505a:	dd01      	ble.n	15060 <z_impl_log_process+0x3c>
		dropped_notify();
   1505c:	f7ff ff06 	bl	14e6c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   15060:	483a      	ldr	r0, [pc, #232]	; (1514c <z_impl_log_process+0x128>)
   15062:	f01b f921 	bl	302a8 <log_list_head_peek>
   15066:	1e04      	subs	r4, r0, #0
   15068:	bf18      	it	ne
   1506a:	2401      	movne	r4, #1
}
   1506c:	4620      	mov	r0, r4
   1506e:	b003      	add	sp, #12
   15070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   15074:	4b36      	ldr	r3, [pc, #216]	; (15150 <z_impl_log_process+0x12c>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   15076:	781b      	ldrb	r3, [r3, #0]
   15078:	b9b3      	cbnz	r3, 150a8 <z_impl_log_process+0x84>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1507a:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   1507c:	07db      	lsls	r3, r3, #31
   1507e:	d413      	bmi.n	150a8 <z_impl_log_process+0x84>
	msg_str = log_msg_str_get(msg);
   15080:	f01b fa33 	bl	304ea <log_msg_str_get>
   15084:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   15086:	4628      	mov	r0, r5
   15088:	f01b f9fe 	bl	30488 <log_msg_nargs_get>
   1508c:	4601      	mov	r1, r0
   1508e:	4648      	mov	r0, r9
   15090:	f7ff fe64 	bl	14d5c <z_log_get_s_mask>
   15094:	4607      	mov	r7, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   15096:	4a2f      	ldr	r2, [pc, #188]	; (15154 <z_impl_log_process+0x130>)
   15098:	4b2f      	ldr	r3, [pc, #188]	; (15158 <z_impl_log_process+0x134>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   1509a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1517c <z_impl_log_process+0x158>
   1509e:	1a9b      	subs	r3, r3, r2
   150a0:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
   150a4:	9201      	str	r2, [sp, #4]
	while (mask) {
   150a6:	b937      	cbnz	r7, 150b6 <z_impl_log_process+0x92>
   150a8:	4e2c      	ldr	r6, [pc, #176]	; (1515c <z_impl_log_process+0x138>)
   150aa:	4f2d      	ldr	r7, [pc, #180]	; (15160 <z_impl_log_process+0x13c>)
   150ac:	f04f 0800 	mov.w	r8, #0
   150b0:	1bbf      	subs	r7, r7, r6
   150b2:	113f      	asrs	r7, r7, #4
   150b4:	e041      	b.n	1513a <z_impl_log_process+0x116>
		idx = 31 - __builtin_clz(mask);
   150b6:	fab7 f887 	clz	r8, r7
   150ba:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   150be:	4641      	mov	r1, r8
   150c0:	4628      	mov	r0, r5
   150c2:	f01b f9e4 	bl	3048e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   150c6:	4b27      	ldr	r3, [pc, #156]	; (15164 <z_impl_log_process+0x140>)
		str = (const char *)log_msg_arg_get(msg, idx);
   150c8:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   150ca:	4298      	cmp	r0, r3
   150cc:	d302      	bcc.n	150d4 <z_impl_log_process+0xb0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   150ce:	4b26      	ldr	r3, [pc, #152]	; (15168 <z_impl_log_process+0x144>)
   150d0:	4298      	cmp	r0, r3
   150d2:	d320      	bcc.n	15116 <z_impl_log_process+0xf2>
   150d4:	4610      	mov	r0, r2
   150d6:	f7ff ff95 	bl	15004 <log_is_strdup>
   150da:	4606      	mov	r6, r0
   150dc:	b9d8      	cbnz	r0, 15116 <z_impl_log_process+0xf2>
   150de:	4b23      	ldr	r3, [pc, #140]	; (1516c <z_impl_log_process+0x148>)
   150e0:	429a      	cmp	r2, r3
   150e2:	d018      	beq.n	15116 <z_impl_log_process+0xf2>
	return msg->hdr.ids.source_id;
   150e4:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   150e6:	4922      	ldr	r1, [pc, #136]	; (15170 <z_impl_log_process+0x14c>)
   150e8:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   150ec:	455b      	cmp	r3, fp
	return __log_const_start[source_id].name;
   150ee:	bf38      	it	cc
   150f0:	9a01      	ldrcc	r2, [sp, #4]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   150f2:	4820      	ldr	r0, [pc, #128]	; (15174 <z_impl_log_process+0x150>)
   150f4:	bf38      	it	cc
   150f6:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
   150fa:	23d0      	movs	r3, #208	; 0xd0
   150fc:	4652      	mov	r2, sl
   150fe:	f01a fdb7 	bl	2fc70 <printk>
   15102:	4641      	mov	r1, r8
   15104:	481c      	ldr	r0, [pc, #112]	; (15178 <z_impl_log_process+0x154>)
   15106:	464b      	mov	r3, r9
   15108:	4632      	mov	r2, r6
   1510a:	f01a fdb1 	bl	2fc70 <printk>
   1510e:	21d0      	movs	r1, #208	; 0xd0
   15110:	4650      	mov	r0, sl
   15112:	f01b f893 	bl	3023c <assert_post_action>
		mask &= ~BIT(idx);
   15116:	2301      	movs	r3, #1
   15118:	fa03 f808 	lsl.w	r8, r3, r8
   1511c:	ea27 0708 	bic.w	r7, r7, r8
   15120:	e7c1      	b.n	150a6 <z_impl_log_process+0x82>
			if (log_backend_is_active(backend) &&
   15122:	4630      	mov	r0, r6
   15124:	f01b f8c8 	bl	302b8 <log_backend_is_active>
   15128:	b120      	cbz	r0, 15134 <z_impl_log_process+0x110>
	backend->api->put(backend, msg);
   1512a:	6833      	ldr	r3, [r6, #0]
   1512c:	4629      	mov	r1, r5
   1512e:	4630      	mov	r0, r6
   15130:	685b      	ldr	r3, [r3, #4]
   15132:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   15134:	f108 0801 	add.w	r8, r8, #1
   15138:	3610      	adds	r6, #16
   1513a:	45b8      	cmp	r8, r7
   1513c:	dbf1      	blt.n	15122 <z_impl_log_process+0xfe>
   1513e:	e785      	b.n	1504c <z_impl_log_process+0x28>
   15140:	2001ba6c 	.word	0x2001ba6c
   15144:	20016024 	.word	0x20016024
   15148:	20016028 	.word	0x20016028
   1514c:	20016030 	.word	0x20016030
   15150:	2001ba6d 	.word	0x2001ba6d
   15154:	000387c0 	.word	0x000387c0
   15158:	00038900 	.word	0x00038900
   1515c:	00038900 	.word	0x00038900
   15160:	00038910 	.word	0x00038910
   15164:	0003849c 	.word	0x0003849c
   15168:	00041704 	.word	0x00041704
   1516c:	0003a9bd 	.word	0x0003a9bd
   15170:	00040e81 	.word	0x00040e81
   15174:	0003a56b 	.word	0x0003a56b
   15178:	0003a9d7 	.word	0x0003a9d7
   1517c:	0003a90c 	.word	0x0003a90c

00015180 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   15180:	4b27      	ldr	r3, [pc, #156]	; (15220 <msg_finalize+0xa0>)
{
   15182:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   15184:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   15186:	8141      	strh	r1, [r0, #10]
{
   15188:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1518a:	4798      	blx	r3
   1518c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1518e:	f04f 0320 	mov.w	r3, #32
   15192:	f3ef 8511 	mrs	r5, BASEPRI
   15196:	f383 8811 	msr	BASEPRI, r3
   1519a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1519e:	4821      	ldr	r0, [pc, #132]	; (15224 <msg_finalize+0xa4>)
   151a0:	4621      	mov	r1, r4
   151a2:	f01b f877 	bl	30294 <log_list_add_tail>
	__asm__ volatile(
   151a6:	f385 8811 	msr	BASEPRI, r5
   151aa:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   151ae:	4b1e      	ldr	r3, [pc, #120]	; (15228 <msg_finalize+0xa8>)
   151b0:	e8d3 2fef 	ldaex	r2, [r3]
   151b4:	3201      	adds	r2, #1
   151b6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   151ba:	2900      	cmp	r1, #0
   151bc:	d1f8      	bne.n	151b0 <msg_finalize+0x30>
	if (panic_mode) {
   151be:	4a1b      	ldr	r2, [pc, #108]	; (1522c <msg_finalize+0xac>)
   151c0:	7812      	ldrb	r2, [r2, #0]
   151c2:	b182      	cbz	r2, 151e6 <msg_finalize+0x66>
	__asm__ volatile(
   151c4:	f04f 0320 	mov.w	r3, #32
   151c8:	f3ef 8411 	mrs	r4, BASEPRI
   151cc:	f383 8811 	msr	BASEPRI, r3
   151d0:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   151d4:	2000      	movs	r0, #0
   151d6:	f7ff ff25 	bl	15024 <z_impl_log_process>
	__asm__ volatile(
   151da:	f384 8811 	msr	BASEPRI, r4
   151de:	f3bf 8f6f 	isb	sy
}
   151e2:	b003      	add	sp, #12
   151e4:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   151e6:	4a12      	ldr	r2, [pc, #72]	; (15230 <msg_finalize+0xb0>)
   151e8:	681b      	ldr	r3, [r3, #0]
   151ea:	6812      	ldr	r2, [r2, #0]
   151ec:	2a00      	cmp	r2, #0
   151ee:	d0f8      	beq.n	151e2 <msg_finalize+0x62>
   151f0:	2b01      	cmp	r3, #1
   151f2:	d10a      	bne.n	1520a <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   151f4:	2200      	movs	r2, #0
   151f6:	2300      	movs	r3, #0
   151f8:	480e      	ldr	r0, [pc, #56]	; (15234 <msg_finalize+0xb4>)
   151fa:	e9cd 2300 	strd	r2, r3, [sp]
   151fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   15202:	2300      	movs	r3, #0
   15204:	f018 fb8e 	bl	2d924 <z_impl_k_timer_start>
   15208:	e7eb      	b.n	151e2 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1520a:	2b0a      	cmp	r3, #10
   1520c:	d1e9      	bne.n	151e2 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   1520e:	4809      	ldr	r0, [pc, #36]	; (15234 <msg_finalize+0xb4>)
   15210:	f022 fa16 	bl	37640 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   15214:	4808      	ldr	r0, [pc, #32]	; (15238 <msg_finalize+0xb8>)
}
   15216:	b003      	add	sp, #12
   15218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1521c:	f015 bff0 	b.w	2b200 <z_impl_k_sem_give>
   15220:	2001471c 	.word	0x2001471c
   15224:	20016030 	.word	0x20016030
   15228:	20016024 	.word	0x20016024
   1522c:	2001ba6d 	.word	0x2001ba6d
   15230:	20016058 	.word	0x20016058
   15234:	20015300 	.word	0x20015300
   15238:	20015060 	.word	0x20015060

0001523c <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   1523c:	4b16      	ldr	r3, [pc, #88]	; (15298 <log_process_thread_func+0x5c>)
   1523e:	4a17      	ldr	r2, [pc, #92]	; (1529c <log_process_thread_func+0x60>)
{
   15240:	b510      	push	{r4, lr}
   15242:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   15244:	2b00      	cmp	r3, #0
   15246:	dc0b      	bgt.n	15260 <log_process_thread_func+0x24>
   15248:	4915      	ldr	r1, [pc, #84]	; (152a0 <log_process_thread_func+0x64>)
   1524a:	4816      	ldr	r0, [pc, #88]	; (152a4 <log_process_thread_func+0x68>)
   1524c:	f240 536d 	movw	r3, #1389	; 0x56d
   15250:	4a15      	ldr	r2, [pc, #84]	; (152a8 <log_process_thread_func+0x6c>)
   15252:	f01a fd0d 	bl	2fc70 <printk>
   15256:	f240 516d 	movw	r1, #1389	; 0x56d
   1525a:	4813      	ldr	r0, [pc, #76]	; (152a8 <log_process_thread_func+0x6c>)
   1525c:	f01a ffee 	bl	3023c <assert_post_action>
	log_init();
   15260:	f7ff fe5e 	bl	14f20 <log_init>
	return z_impl_k_current_get();
   15264:	f017 fec4 	bl	2cff0 <z_impl_k_current_get>
	proc_tid = process_tid;
   15268:	4b10      	ldr	r3, [pc, #64]	; (152ac <log_process_thread_func+0x70>)
   1526a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1526c:	b130      	cbz	r0, 1527c <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1526e:	4b10      	ldr	r3, [pc, #64]	; (152b0 <log_process_thread_func+0x74>)
	    process_tid &&
   15270:	681b      	ldr	r3, [r3, #0]
   15272:	2b09      	cmp	r3, #9
   15274:	dd02      	ble.n	1527c <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   15276:	480f      	ldr	r0, [pc, #60]	; (152b4 <log_process_thread_func+0x78>)
   15278:	f015 ffc2 	bl	2b200 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1527c:	4c0d      	ldr	r4, [pc, #52]	; (152b4 <log_process_thread_func+0x78>)
   1527e:	2000      	movs	r0, #0
   15280:	f7ff fed0 	bl	15024 <z_impl_log_process>
		if (log_process(false) == false) {
   15284:	2800      	cmp	r0, #0
   15286:	d1fa      	bne.n	1527e <log_process_thread_func+0x42>
   15288:	f04f 32ff 	mov.w	r2, #4294967295
   1528c:	f04f 33ff 	mov.w	r3, #4294967295
   15290:	4620      	mov	r0, r4
   15292:	f015 fff9 	bl	2b288 <z_impl_k_sem_take>
   15296:	e7f2      	b.n	1527e <log_process_thread_func+0x42>
   15298:	00038910 	.word	0x00038910
   1529c:	00038900 	.word	0x00038900
   152a0:	0003aa18 	.word	0x0003aa18
   152a4:	0003a56b 	.word	0x0003a56b
   152a8:	0003a90c 	.word	0x0003a90c
   152ac:	20016058 	.word	0x20016058
   152b0:	20016024 	.word	0x20016024
   152b4:	20015060 	.word	0x20015060

000152b8 <z_impl_log_panic>:
{
   152b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   152ba:	4f0f      	ldr	r7, [pc, #60]	; (152f8 <z_impl_log_panic+0x40>)
   152bc:	783d      	ldrb	r5, [r7, #0]
   152be:	b975      	cbnz	r5, 152de <z_impl_log_panic+0x26>
	log_init();
   152c0:	f7ff fe2e 	bl	14f20 <log_init>
   152c4:	4c0d      	ldr	r4, [pc, #52]	; (152fc <z_impl_log_panic+0x44>)
   152c6:	4e0e      	ldr	r6, [pc, #56]	; (15300 <z_impl_log_panic+0x48>)
   152c8:	1b36      	subs	r6, r6, r4
   152ca:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   152cc:	42b5      	cmp	r5, r6
   152ce:	db07      	blt.n	152e0 <z_impl_log_panic+0x28>
   152d0:	2000      	movs	r0, #0
   152d2:	f7ff fea7 	bl	15024 <z_impl_log_process>
		while (log_process(false) == true) {
   152d6:	2800      	cmp	r0, #0
   152d8:	d1fa      	bne.n	152d0 <z_impl_log_panic+0x18>
	panic_mode = true;
   152da:	2301      	movs	r3, #1
   152dc:	703b      	strb	r3, [r7, #0]
}
   152de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   152e0:	4620      	mov	r0, r4
   152e2:	f01a ffe9 	bl	302b8 <log_backend_is_active>
   152e6:	b118      	cbz	r0, 152f0 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   152e8:	6823      	ldr	r3, [r4, #0]
   152ea:	4620      	mov	r0, r4
   152ec:	695b      	ldr	r3, [r3, #20]
   152ee:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   152f0:	3501      	adds	r5, #1
   152f2:	3410      	adds	r4, #16
   152f4:	e7ea      	b.n	152cc <z_impl_log_panic+0x14>
   152f6:	bf00      	nop
   152f8:	2001ba6d 	.word	0x2001ba6d
   152fc:	00038900 	.word	0x00038900
   15300:	00038910 	.word	0x00038910

00015304 <log_free>:
{
   15304:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   15306:	3804      	subs	r0, #4
   15308:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1530a:	e8d0 3fef 	ldaex	r3, [r0]
   1530e:	1e5a      	subs	r2, r3, #1
   15310:	e8c0 2fe1 	stlex	r1, r2, [r0]
   15314:	2900      	cmp	r1, #0
   15316:	d1f8      	bne.n	1530a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   15318:	2b01      	cmp	r3, #1
   1531a:	d103      	bne.n	15324 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   1531c:	4803      	ldr	r0, [pc, #12]	; (1532c <log_free+0x28>)
   1531e:	a901      	add	r1, sp, #4
   15320:	f015 f8d6 	bl	2a4d0 <k_mem_slab_free>
}
   15324:	b003      	add	sp, #12
   15326:	f85d fb04 	ldr.w	pc, [sp], #4
   1532a:	bf00      	nop
   1532c:	20016038 	.word	0x20016038

00015330 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   15330:	2320      	movs	r3, #32
   15332:	4902      	ldr	r1, [pc, #8]	; (1533c <log_msg_pool_init+0xc>)
   15334:	461a      	mov	r2, r3
   15336:	4802      	ldr	r0, [pc, #8]	; (15340 <log_msg_pool_init+0x10>)
   15338:	f022 b84d 	b.w	373d6 <k_mem_slab_init>
   1533c:	200266d8 	.word	0x200266d8
   15340:	2001605c 	.word	0x2001605c

00015344 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   15344:	2300      	movs	r3, #0
{
   15346:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   15348:	4d09      	ldr	r5, [pc, #36]	; (15370 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   1534a:	9301      	str	r3, [sp, #4]
   1534c:	2001      	movs	r0, #1
   1534e:	f7ff fe69 	bl	15024 <z_impl_log_process>
   15352:	4604      	mov	r4, r0
			z_log_dropped();
   15354:	f7ff fd72 	bl	14e3c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   15358:	2200      	movs	r2, #0
   1535a:	2300      	movs	r3, #0
   1535c:	4628      	mov	r0, r5
   1535e:	a901      	add	r1, sp, #4
   15360:	f015 f84a 	bl	2a3f8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   15364:	b108      	cbz	r0, 1536a <log_msg_no_space_handle+0x26>
   15366:	2c00      	cmp	r4, #0
   15368:	d1f0      	bne.n	1534c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   1536a:	9801      	ldr	r0, [sp, #4]
   1536c:	b003      	add	sp, #12
   1536e:	bd30      	pop	{r4, r5, pc}
   15370:	2001605c 	.word	0x2001605c

00015374 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   15374:	2300      	movs	r3, #0
{
   15376:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   15378:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   1537a:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1537c:	4806      	ldr	r0, [pc, #24]	; (15398 <log_msg_chunk_alloc+0x24>)
   1537e:	2300      	movs	r3, #0
   15380:	a901      	add	r1, sp, #4
   15382:	f015 f839 	bl	2a3f8 <k_mem_slab_alloc>
	if (err != 0) {
   15386:	b110      	cbz	r0, 1538e <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   15388:	f7ff ffdc 	bl	15344 <log_msg_no_space_handle>
   1538c:	9001      	str	r0, [sp, #4]
}
   1538e:	9801      	ldr	r0, [sp, #4]
   15390:	b003      	add	sp, #12
   15392:	f85d fb04 	ldr.w	pc, [sp], #4
   15396:	bf00      	nop
   15398:	2001605c 	.word	0x2001605c

0001539c <msg_free>:
{
   1539c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1539e:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   153a0:	7a45      	ldrb	r5, [r0, #9]
{
   153a2:	b085      	sub	sp, #20
   153a4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   153a6:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   153a8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   153ac:	d41c      	bmi.n	153e8 <msg_free+0x4c>
   153ae:	b1dd      	cbz	r5, 153e8 <msg_free+0x4c>
		uint32_t smask = 0U;
   153b0:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   153b2:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   153b4:	4631      	mov	r1, r6
   153b6:	9801      	ldr	r0, [sp, #4]
   153b8:	f01b f869 	bl	3048e <log_msg_arg_get>
   153bc:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   153be:	f7ff fe21 	bl	15004 <log_is_strdup>
   153c2:	b170      	cbz	r0, 153e2 <msg_free+0x46>
				if (smask == 0U) {
   153c4:	b934      	cbnz	r4, 153d4 <msg_free+0x38>
					smask = z_log_get_s_mask(
   153c6:	9b01      	ldr	r3, [sp, #4]
   153c8:	4629      	mov	r1, r5
   153ca:	6918      	ldr	r0, [r3, #16]
   153cc:	f7ff fcc6 	bl	14d5c <z_log_get_s_mask>
					if (smask == 0U) {
   153d0:	4604      	mov	r4, r0
   153d2:	b148      	cbz	r0, 153e8 <msg_free+0x4c>
				if (smask & BIT(i)) {
   153d4:	fa24 f306 	lsr.w	r3, r4, r6
   153d8:	07d9      	lsls	r1, r3, #31
   153da:	d502      	bpl.n	153e2 <msg_free+0x46>
					log_free(buf);
   153dc:	4638      	mov	r0, r7
   153de:	f7ff ff91 	bl	15304 <log_free>
		for (i = 0U; i < nargs; i++) {
   153e2:	3601      	adds	r6, #1
   153e4:	42ae      	cmp	r6, r5
   153e6:	d3e5      	bcc.n	153b4 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   153e8:	9b01      	ldr	r3, [sp, #4]
   153ea:	7a1a      	ldrb	r2, [r3, #8]
   153ec:	0792      	lsls	r2, r2, #30
   153ee:	d504      	bpl.n	153fa <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   153f0:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   153f2:	4c08      	ldr	r4, [pc, #32]	; (15414 <msg_free+0x78>)
   153f4:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   153f6:	9b03      	ldr	r3, [sp, #12]
   153f8:	b92b      	cbnz	r3, 15406 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   153fa:	4806      	ldr	r0, [pc, #24]	; (15414 <msg_free+0x78>)
   153fc:	a901      	add	r1, sp, #4
   153fe:	f015 f867 	bl	2a4d0 <k_mem_slab_free>
}
   15402:	b005      	add	sp, #20
   15404:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   15406:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   15408:	4620      	mov	r0, r4
   1540a:	a903      	add	r1, sp, #12
   1540c:	f015 f860 	bl	2a4d0 <k_mem_slab_free>
		cont = next;
   15410:	9503      	str	r5, [sp, #12]
   15412:	e7f0      	b.n	153f6 <msg_free+0x5a>
   15414:	2001605c 	.word	0x2001605c

00015418 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   15418:	2a0e      	cmp	r2, #14
{
   1541a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1541e:	4681      	mov	r9, r0
   15420:	4688      	mov	r8, r1
   15422:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   15424:	d90b      	bls.n	1543e <log_msg_create_n+0x26>
   15426:	492d      	ldr	r1, [pc, #180]	; (154dc <log_msg_create_n+0xc4>)
   15428:	482d      	ldr	r0, [pc, #180]	; (154e0 <log_msg_create_n+0xc8>)
   1542a:	f240 1337 	movw	r3, #311	; 0x137
   1542e:	4a2d      	ldr	r2, [pc, #180]	; (154e4 <log_msg_create_n+0xcc>)
   15430:	f01a fc1e 	bl	2fc70 <printk>
   15434:	f240 1137 	movw	r1, #311	; 0x137
   15438:	482a      	ldr	r0, [pc, #168]	; (154e4 <log_msg_create_n+0xcc>)
   1543a:	f01a feff 	bl	3023c <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1543e:	f7ff ff99 	bl	15374 <log_msg_chunk_alloc>

	if (msg != NULL) {
   15442:	4604      	mov	r4, r0
   15444:	b330      	cbz	r0, 15494 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   15446:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   15448:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1544a:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1544c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1544e:	8107      	strh	r7, [r0, #8]
   15450:	d909      	bls.n	15466 <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   15452:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   15454:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   15458:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1545a:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1545e:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   15460:	f1ba 0f00 	cmp.w	sl, #0
   15464:	dc0e      	bgt.n	15484 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   15466:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   15468:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1546a:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1546e:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   15472:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   15474:	d818      	bhi.n	154a8 <log_msg_create_n+0x90>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15476:	4641      	mov	r1, r8
   15478:	00aa      	lsls	r2, r5, #2
   1547a:	f104 0014 	add.w	r0, r4, #20
   1547e:	f022 f980 	bl	37782 <memcpy>
	while (nargs != 0U) {
   15482:	e007      	b.n	15494 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   15484:	f7ff ff76 	bl	15374 <log_msg_chunk_alloc>
		if (cont == NULL) {
   15488:	4606      	mov	r6, r0
   1548a:	b930      	cbnz	r0, 1549a <log_msg_create_n+0x82>
			msg_free(msg);
   1548c:	4620      	mov	r0, r4
   1548e:	f7ff ff85 	bl	1539c <msg_free>
			return NULL;
   15492:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   15494:	4620      	mov	r0, r4
   15496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1549a:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1549e:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   154a2:	4683      	mov	fp, r0
		cont->next = NULL;
   154a4:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   154a6:	e7db      	b.n	15460 <log_msg_create_n+0x48>
   154a8:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   154ac:	6967      	ldr	r7, [r4, #20]
   154ae:	61a3      	str	r3, [r4, #24]
   154b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   154b4:	3d02      	subs	r5, #2
   154b6:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   154b8:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   154bc:	2d07      	cmp	r5, #7
   154be:	462e      	mov	r6, r5
   154c0:	bf28      	it	cs
   154c2:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   154c4:	ea4f 0986 	mov.w	r9, r6, lsl #2
   154c8:	4641      	mov	r1, r8
   154ca:	1d38      	adds	r0, r7, #4
   154cc:	464a      	mov	r2, r9
   154ce:	f022 f958 	bl	37782 <memcpy>
	while (nargs != 0U) {
   154d2:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   154d4:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   154d6:	44c8      	add	r8, r9
	while (nargs != 0U) {
   154d8:	d1f0      	bne.n	154bc <log_msg_create_n+0xa4>
   154da:	e7db      	b.n	15494 <log_msg_create_n+0x7c>
   154dc:	0003aa64 	.word	0x0003aa64
   154e0:	0003a56b 	.word	0x0003a56b
   154e4:	0003aa38 	.word	0x0003aa38

000154e8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   154e8:	b40e      	push	{r1, r2, r3}
   154ea:	b503      	push	{r0, r1, lr}
   154ec:	ab03      	add	r3, sp, #12
   154ee:	f853 2b04 	ldr.w	r2, [r3], #4
   154f2:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   154f4:	4804      	ldr	r0, [pc, #16]	; (15508 <print_formatted+0x20>)
	va_start(args, fmt);
   154f6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   154f8:	f7fe ff26 	bl	14348 <cbvprintf>
	va_end(args);

	return length;
}
   154fc:	b002      	add	sp, #8
   154fe:	f85d eb04 	ldr.w	lr, [sp], #4
   15502:	b003      	add	sp, #12
   15504:	4770      	bx	lr
   15506:	bf00      	nop
   15508:	0001574d 	.word	0x0001574d

0001550c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   1550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   15510:	f011 0602 	ands.w	r6, r1, #2
{
   15514:	b087      	sub	sp, #28
   15516:	9205      	str	r2, [sp, #20]
   15518:	4607      	mov	r7, r0
   1551a:	461a      	mov	r2, r3
   1551c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   15520:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   15524:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   15528:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1552c:	d006      	beq.n	1553c <prefix_print+0x30>
	if (!format) {
   1552e:	f011 0f44 	tst.w	r1, #68	; 0x44
   15532:	d138      	bne.n	155a6 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   15534:	4932      	ldr	r1, [pc, #200]	; (15600 <prefix_print+0xf4>)
   15536:	f7ff ffd7 	bl	154e8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1553a:	4606      	mov	r6, r0
	if (color) {
   1553c:	f1ba 0f00 	cmp.w	sl, #0
   15540:	d00a      	beq.n	15558 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   15542:	4b30      	ldr	r3, [pc, #192]	; (15604 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
   15544:	4638      	mov	r0, r7
		const char *log_color = start && (colors[level] != NULL) ?
   15546:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   1554a:	4b2f      	ldr	r3, [pc, #188]	; (15608 <prefix_print+0xfc>)
   1554c:	492f      	ldr	r1, [pc, #188]	; (1560c <prefix_print+0x100>)
   1554e:	2a00      	cmp	r2, #0
   15550:	bf08      	it	eq
   15552:	461a      	moveq	r2, r3
   15554:	f7ff ffc8 	bl	154e8 <print_formatted>
	if (level_on) {
   15558:	b13d      	cbz	r5, 1556a <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   1555a:	4b2d      	ldr	r3, [pc, #180]	; (15610 <prefix_print+0x104>)
   1555c:	4638      	mov	r0, r7
   1555e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   15562:	492c      	ldr	r1, [pc, #176]	; (15614 <prefix_print+0x108>)
   15564:	f7ff ffc0 	bl	154e8 <print_formatted>
   15568:	4605      	mov	r5, r0
	if (source_id >= 0) {
   1556a:	f1b9 0f00 	cmp.w	r9, #0
   1556e:	db16      	blt.n	1559e <prefix_print+0x92>
		total += print_formatted(output,
   15570:	9b05      	ldr	r3, [sp, #20]
   15572:	2b00      	cmp	r3, #0
   15574:	d041      	beq.n	155fa <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   15576:	2301      	movs	r3, #1
   15578:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
   1557c:	4b26      	ldr	r3, [pc, #152]	; (15618 <prefix_print+0x10c>)
   1557e:	f018 0f10 	tst.w	r8, #16
   15582:	4c26      	ldr	r4, [pc, #152]	; (1561c <prefix_print+0x110>)
   15584:	bf18      	it	ne
   15586:	461c      	movne	r4, r3
   15588:	4649      	mov	r1, r9
   1558a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1558e:	f7ff fc8b 	bl	14ea8 <log_source_name_get>
   15592:	4621      	mov	r1, r4
   15594:	4602      	mov	r2, r0
   15596:	4638      	mov	r0, r7
   15598:	f7ff ffa6 	bl	154e8 <print_formatted>
   1559c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   1559e:	19a8      	adds	r0, r5, r6
   155a0:	b007      	add	sp, #28
   155a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   155a6:	4b1e      	ldr	r3, [pc, #120]	; (15620 <prefix_print+0x114>)
   155a8:	6819      	ldr	r1, [r3, #0]
   155aa:	b321      	cbz	r1, 155f6 <prefix_print+0xea>
		timestamp /= timestamp_div;
   155ac:	4b1d      	ldr	r3, [pc, #116]	; (15624 <prefix_print+0x118>)
   155ae:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   155b2:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
   155b4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		timestamp /= timestamp_div;
   155b8:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
   155bc:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   155c0:	fbb4 f2fc 	udiv	r2, r4, ip
   155c4:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
   155c8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   155cc:	4374      	muls	r4, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   155ce:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   155d2:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   155d6:	fb01 441b 	mls	r4, r1, fp, r4
   155da:	4374      	muls	r4, r6
		mins = seconds / 60U;
   155dc:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   155e0:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
   155e4:	e9cd b101 	strd	fp, r1, [sp, #4]
   155e8:	fb0e c113 	mls	r1, lr, r3, ip
   155ec:	9100      	str	r1, [sp, #0]
   155ee:	490e      	ldr	r1, [pc, #56]	; (15628 <prefix_print+0x11c>)
   155f0:	f7ff ff7a 	bl	154e8 <print_formatted>
   155f4:	e7a1      	b.n	1553a <prefix_print+0x2e>
		length = 0;
   155f6:	4608      	mov	r0, r1
   155f8:	e79f      	b.n	1553a <prefix_print+0x2e>
		total += print_formatted(output,
   155fa:	4c08      	ldr	r4, [pc, #32]	; (1561c <prefix_print+0x110>)
   155fc:	e7c4      	b.n	15588 <prefix_print+0x7c>
   155fe:	bf00      	nop
   15600:	0003aa7d 	.word	0x0003aa7d
   15604:	00038b18 	.word	0x00038b18
   15608:	0003aa6f 	.word	0x0003aa6f
   1560c:	0003de32 	.word	0x0003de32
   15610:	00038b2c 	.word	0x00038b2c
   15614:	0003aaa2 	.word	0x0003aaa2
   15618:	0003aa79 	.word	0x0003aa79
   1561c:	0003aa74 	.word	0x0003aa74
   15620:	2001607c 	.word	0x2001607c
   15624:	20016080 	.word	0x20016080
   15628:	0003aa86 	.word	0x0003aa86

0001562c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   1562c:	b538      	push	{r3, r4, r5, lr}
   1562e:	460c      	mov	r4, r1
	if (color) {
   15630:	07e1      	lsls	r1, r4, #31
{
   15632:	4605      	mov	r5, r0
	if (color) {
   15634:	d503      	bpl.n	1563e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   15636:	4a08      	ldr	r2, [pc, #32]	; (15658 <postfix_print+0x2c>)
   15638:	4908      	ldr	r1, [pc, #32]	; (1565c <postfix_print+0x30>)
   1563a:	f7ff ff55 	bl	154e8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1563e:	06e2      	lsls	r2, r4, #27
   15640:	d408      	bmi.n	15654 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   15642:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   15644:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   15646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1564a:	bf4c      	ite	mi
   1564c:	4904      	ldrmi	r1, [pc, #16]	; (15660 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1564e:	4905      	ldrpl	r1, [pc, #20]	; (15664 <postfix_print+0x38>)
   15650:	f7ff bf4a 	b.w	154e8 <print_formatted>
}
   15654:	bd38      	pop	{r3, r4, r5, pc}
   15656:	bf00      	nop
   15658:	0003aa6f 	.word	0x0003aa6f
   1565c:	0003de32 	.word	0x0003de32
   15660:	0003aba8 	.word	0x0003aba8
   15664:	0003f5a8 	.word	0x0003f5a8

00015668 <hexdump_line_print>:
{
   15668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1566c:	461d      	mov	r5, r3
   1566e:	9b08      	ldr	r3, [sp, #32]
   15670:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   15672:	06da      	lsls	r2, r3, #27
{
   15674:	4604      	mov	r4, r0
   15676:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   15678:	d405      	bmi.n	15686 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1567a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   1567c:	bf4c      	ite	mi
   1567e:	492b      	ldrmi	r1, [pc, #172]	; (1572c <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   15680:	492b      	ldrpl	r1, [pc, #172]	; (15730 <hexdump_line_print+0xc8>)
   15682:	f7ff ff31 	bl	154e8 <print_formatted>
{
   15686:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
   1568a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 15738 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   1568e:	45a8      	cmp	r8, r5
   15690:	db2d      	blt.n	156ee <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   15692:	2500      	movs	r5, #0
			print_formatted(output, "   ");
   15694:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1573c <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
   15698:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 15740 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
   1569c:	f8df a098 	ldr.w	sl, [pc, #152]	; 15738 <hexdump_line_print+0xd0>
		if (i < length) {
   156a0:	42bd      	cmp	r5, r7
   156a2:	d232      	bcs.n	1570a <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
   156a4:	4649      	mov	r1, r9
   156a6:	4620      	mov	r0, r4
   156a8:	5d72      	ldrb	r2, [r6, r5]
   156aa:	f7ff ff1d 	bl	154e8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   156ae:	3501      	adds	r5, #1
   156b0:	2d10      	cmp	r5, #16
   156b2:	d123      	bne.n	156fc <hexdump_line_print+0x94>
	print_formatted(output, "|");
   156b4:	4620      	mov	r0, r4
   156b6:	491f      	ldr	r1, [pc, #124]	; (15734 <hexdump_line_print+0xcc>)
   156b8:	f7ff ff16 	bl	154e8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   156bc:	2500      	movs	r5, #0
			print_formatted(output, " ");
   156be:	f8df 8078 	ldr.w	r8, [pc, #120]	; 15738 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   156c2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 15744 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
   156c6:	f8df a080 	ldr.w	sl, [pc, #128]	; 15748 <hexdump_line_print+0xe0>
		if (i < length) {
   156ca:	42af      	cmp	r7, r5
   156cc:	d929      	bls.n	15722 <hexdump_line_print+0xba>
			char c = (char)data[i];
   156ce:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   156d0:	4651      	mov	r1, sl
   156d2:	f812 3009 	ldrb.w	r3, [r2, r9]
   156d6:	4620      	mov	r0, r4
   156d8:	f013 0f97 	tst.w	r3, #151	; 0x97
   156dc:	bf08      	it	eq
   156de:	222e      	moveq	r2, #46	; 0x2e
   156e0:	f7ff ff02 	bl	154e8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   156e4:	3501      	adds	r5, #1
   156e6:	2d10      	cmp	r5, #16
   156e8:	d114      	bne.n	15714 <hexdump_line_print+0xac>
}
   156ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   156ee:	4649      	mov	r1, r9
   156f0:	4620      	mov	r0, r4
   156f2:	f7ff fef9 	bl	154e8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   156f6:	f108 0801 	add.w	r8, r8, #1
   156fa:	e7c8      	b.n	1568e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   156fc:	076a      	lsls	r2, r5, #29
   156fe:	d1cf      	bne.n	156a0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   15700:	4651      	mov	r1, sl
   15702:	4620      	mov	r0, r4
   15704:	f7ff fef0 	bl	154e8 <print_formatted>
   15708:	e7ca      	b.n	156a0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   1570a:	4641      	mov	r1, r8
   1570c:	4620      	mov	r0, r4
   1570e:	f7ff feeb 	bl	154e8 <print_formatted>
   15712:	e7cc      	b.n	156ae <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   15714:	076b      	lsls	r3, r5, #29
   15716:	d1d8      	bne.n	156ca <hexdump_line_print+0x62>
			print_formatted(output, " ");
   15718:	4641      	mov	r1, r8
   1571a:	4620      	mov	r0, r4
   1571c:	f7ff fee4 	bl	154e8 <print_formatted>
   15720:	e7d3      	b.n	156ca <hexdump_line_print+0x62>
			print_formatted(output, " ");
   15722:	4641      	mov	r1, r8
   15724:	4620      	mov	r0, r4
   15726:	f7ff fedf 	bl	154e8 <print_formatted>
   1572a:	e7db      	b.n	156e4 <hexdump_line_print+0x7c>
   1572c:	0003aba8 	.word	0x0003aba8
   15730:	0003f5a8 	.word	0x0003f5a8
   15734:	0003aab2 	.word	0x0003aab2
   15738:	0003aab0 	.word	0x0003aab0
   1573c:	0003aaae 	.word	0x0003aaae
   15740:	0003aaa8 	.word	0x0003aaa8
   15744:	00040efd 	.word	0x00040efd
   15748:	0003e17a 	.word	0x0003e17a

0001574c <out_func>:
{
   1574c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1574e:	684b      	ldr	r3, [r1, #4]
{
   15750:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   15752:	681a      	ldr	r2, [r3, #0]
   15754:	68cb      	ldr	r3, [r1, #12]
{
   15756:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   15758:	429a      	cmp	r2, r3
   1575a:	d102      	bne.n	15762 <out_func+0x16>
		log_output_flush(out_ctx);
   1575c:	4608      	mov	r0, r1
   1575e:	f01b f889 	bl	30874 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15762:	6863      	ldr	r3, [r4, #4]
   15764:	e8d3 2fef 	ldaex	r2, [r3]
   15768:	1c51      	adds	r1, r2, #1
   1576a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1576e:	2800      	cmp	r0, #0
   15770:	d1f8      	bne.n	15764 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   15772:	68a3      	ldr	r3, [r4, #8]
   15774:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   15776:	6863      	ldr	r3, [r4, #4]
   15778:	681a      	ldr	r2, [r3, #0]
   1577a:	68e3      	ldr	r3, [r4, #12]
   1577c:	429a      	cmp	r2, r3
   1577e:	d909      	bls.n	15794 <out_func+0x48>
   15780:	4905      	ldr	r1, [pc, #20]	; (15798 <out_func+0x4c>)
   15782:	4806      	ldr	r0, [pc, #24]	; (1579c <out_func+0x50>)
   15784:	2373      	movs	r3, #115	; 0x73
   15786:	4a06      	ldr	r2, [pc, #24]	; (157a0 <out_func+0x54>)
   15788:	f01a fa72 	bl	2fc70 <printk>
   1578c:	2173      	movs	r1, #115	; 0x73
   1578e:	4804      	ldr	r0, [pc, #16]	; (157a0 <out_func+0x54>)
   15790:	f01a fd54 	bl	3023c <assert_post_action>
}
   15794:	2000      	movs	r0, #0
   15796:	bd38      	pop	{r3, r4, r5, pc}
   15798:	0003aae3 	.word	0x0003aae3
   1579c:	0003a56b 	.word	0x0003a56b
   157a0:	0003aab4 	.word	0x0003aab4

000157a4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   157a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   157a8:	7a8b      	ldrb	r3, [r1, #10]
   157aa:	4616      	mov	r6, r2
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   157ac:	f013 0707 	ands.w	r7, r3, #7
{
   157b0:	4604      	mov	r4, r0
   157b2:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   157b4:	7a0a      	ldrb	r2, [r1, #8]
   157b6:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(output, flags, std_msg, timestamp,
   157b8:	d020      	beq.n	157fc <log_output_msg_process+0x58>
   157ba:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   157bc:	8949      	ldrh	r1, [r1, #10]
   157be:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   157c2:	f3c1 1189 	ubfx	r1, r1, #6, #10
   157c6:	e9cd 7300 	strd	r7, r3, [sp]
   157ca:	9102      	str	r1, [sp, #8]
   157cc:	68eb      	ldr	r3, [r5, #12]
   157ce:	4631      	mov	r1, r6
   157d0:	f002 0201 	and.w	r2, r2, #1
   157d4:	f7ff fe9a 	bl	1550c <prefix_print>
   157d8:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   157da:	7a2b      	ldrb	r3, [r5, #8]
   157dc:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   157de:	f013 0801 	ands.w	r8, r3, #1
   157e2:	d00d      	beq.n	15800 <log_output_msg_process+0x5c>
		std_print(msg, output);
   157e4:	4621      	mov	r1, r4
   157e6:	4628      	mov	r0, r5
   157e8:	f01a fee7 	bl	305ba <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   157ec:	2f00      	cmp	r7, #0
   157ee:	d03c      	beq.n	1586a <log_output_msg_process+0xc6>
		postfix_print(output, flags, level);
   157f0:	463a      	mov	r2, r7
   157f2:	4631      	mov	r1, r6
   157f4:	4620      	mov	r0, r4
   157f6:	f7ff ff19 	bl	1562c <postfix_print>
   157fa:	e036      	b.n	1586a <log_output_msg_process+0xc6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   157fc:	46b9      	mov	r9, r7
   157fe:	e7ec      	b.n	157da <log_output_msg_process+0x36>
	} else if (raw_string) {
   15800:	2f00      	cmp	r7, #0
   15802:	d138      	bne.n	15876 <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(output->size);
   15804:	68e3      	ldr	r3, [r4, #12]
   15806:	b95b      	cbnz	r3, 15820 <log_output_msg_process+0x7c>
   15808:	492a      	ldr	r1, [pc, #168]	; (158b4 <log_output_msg_process+0x110>)
   1580a:	482b      	ldr	r0, [pc, #172]	; (158b8 <log_output_msg_process+0x114>)
   1580c:	f240 13cf 	movw	r3, #463	; 0x1cf
   15810:	4a2a      	ldr	r2, [pc, #168]	; (158bc <log_output_msg_process+0x118>)
   15812:	f01a fa2d 	bl	2fc70 <printk>
   15816:	f240 11cf 	movw	r1, #463	; 0x1cf
   1581a:	4828      	ldr	r0, [pc, #160]	; (158bc <log_output_msg_process+0x118>)
   1581c:	f01a fd0e 	bl	3023c <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
   15820:	2600      	movs	r6, #0
		length = output->size;
   15822:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   15824:	aa06      	add	r2, sp, #24
		length = output->size;
   15826:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   15828:	4628      	mov	r0, r5
   1582a:	4633      	mov	r3, r6
   1582c:	68a1      	ldr	r1, [r4, #8]
   1582e:	f01a feb0 	bl	30592 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   15832:	9a06      	ldr	r2, [sp, #24]
   15834:	6863      	ldr	r3, [r4, #4]
   15836:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   15838:	b14a      	cbz	r2, 1584e <log_output_msg_process+0xaa>
			eol = (output->buf[length - 1] == '\n');
   1583a:	68a3      	ldr	r3, [r4, #8]
   1583c:	4413      	add	r3, r2
   1583e:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   15842:	f1a8 030a 	sub.w	r3, r8, #10
   15846:	f1d3 0800 	rsbs	r8, r3, #0
   1584a:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
   1584e:	4620      	mov	r0, r4
   15850:	f01b f810 	bl	30874 <log_output_flush>
		offset += length;
   15854:	9b06      	ldr	r3, [sp, #24]
   15856:	441e      	add	r6, r3
	} while (length > 0);
   15858:	2b00      	cmp	r3, #0
   1585a:	d1e2      	bne.n	15822 <log_output_msg_process+0x7e>
	if (eol) {
   1585c:	f1b8 0f00 	cmp.w	r8, #0
   15860:	d003      	beq.n	1586a <log_output_msg_process+0xc6>
		print_formatted(output, "\r");
   15862:	4620      	mov	r0, r4
   15864:	4916      	ldr	r1, [pc, #88]	; (158c0 <log_output_msg_process+0x11c>)
   15866:	f7ff fe3f 	bl	154e8 <print_formatted>
	}

	log_output_flush(output);
   1586a:	4620      	mov	r0, r4
   1586c:	f01b f802 	bl	30874 <log_output_flush>
}
   15870:	b00a      	add	sp, #40	; 0x28
   15872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   15876:	4628      	mov	r0, r5
   15878:	f01a fe37 	bl	304ea <log_msg_str_get>
   1587c:	4911      	ldr	r1, [pc, #68]	; (158c4 <log_output_msg_process+0x120>)
   1587e:	4602      	mov	r2, r0
   15880:	4620      	mov	r0, r4
   15882:	f7ff fe31 	bl	154e8 <print_formatted>
		length = sizeof(buf);
   15886:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1588a:	aa05      	add	r2, sp, #20
   1588c:	4643      	mov	r3, r8
   1588e:	4628      	mov	r0, r5
   15890:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   15892:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   15896:	f01a fe7c 	bl	30592 <log_msg_hexdump_data_get>
		if (length) {
   1589a:	9a05      	ldr	r2, [sp, #20]
   1589c:	2a00      	cmp	r2, #0
   1589e:	d0a7      	beq.n	157f0 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
   158a0:	464b      	mov	r3, r9
   158a2:	4620      	mov	r0, r4
   158a4:	9600      	str	r6, [sp, #0]
   158a6:	a906      	add	r1, sp, #24
   158a8:	f7ff fede 	bl	15668 <hexdump_line_print>
			offset += length;
   158ac:	9b05      	ldr	r3, [sp, #20]
   158ae:	4498      	add	r8, r3
		length = sizeof(buf);
   158b0:	e7eb      	b.n	1588a <log_output_msg_process+0xe6>
   158b2:	bf00      	nop
   158b4:	0003ab13 	.word	0x0003ab13
   158b8:	0003a56b 	.word	0x0003a56b
   158bc:	0003aab4 	.word	0x0003aab4
   158c0:	0003ab20 	.word	0x0003ab20
   158c4:	0003de32 	.word	0x0003de32

000158c8 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   158c8:	f242 730f 	movw	r3, #9999	; 0x270f
{
   158cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   158ce:	428b      	cmp	r3, r1
   158d0:	bf28      	it	cs
   158d2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   158d4:	6805      	ldr	r5, [r0, #0]
{
   158d6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   158d8:	2105      	movs	r1, #5
   158da:	4668      	mov	r0, sp
   158dc:	4a0d      	ldr	r2, [pc, #52]	; (15914 <log_output_dropped_process+0x4c>)
   158de:	f01a f9d4 	bl	2fc8a <snprintk>
   158e2:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   158e4:	6863      	ldr	r3, [r4, #4]
   158e6:	4628      	mov	r0, r5
   158e8:	220b      	movs	r2, #11
   158ea:	685b      	ldr	r3, [r3, #4]
   158ec:	490a      	ldr	r1, [pc, #40]	; (15918 <log_output_dropped_process+0x50>)
   158ee:	f01a fe57 	bl	305a0 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   158f2:	6863      	ldr	r3, [r4, #4]
   158f4:	4632      	mov	r2, r6
   158f6:	4669      	mov	r1, sp
   158f8:	4628      	mov	r0, r5
   158fa:	685b      	ldr	r3, [r3, #4]
   158fc:	f01a fe50 	bl	305a0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   15900:	6863      	ldr	r3, [r4, #4]
   15902:	221b      	movs	r2, #27
   15904:	4628      	mov	r0, r5
   15906:	685b      	ldr	r3, [r3, #4]
   15908:	4904      	ldr	r1, [pc, #16]	; (1591c <log_output_dropped_process+0x54>)
   1590a:	f01a fe49 	bl	305a0 <buffer_write>
		     output->control_block->ctx);
}
   1590e:	b002      	add	sp, #8
   15910:	bd70      	pop	{r4, r5, r6, pc}
   15912:	bf00      	nop
   15914:	00039c57 	.word	0x00039c57
   15918:	0003ab5e 	.word	0x0003ab5e
   1591c:	0003ab42 	.word	0x0003ab42

00015920 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   15920:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   15922:	2100      	movs	r1, #0
	timestamp_div = 1U;
   15924:	4a07      	ldr	r2, [pc, #28]	; (15944 <log_output_timestamp_freq_set+0x24>)
{
   15926:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   15928:	4c07      	ldr	r4, [pc, #28]	; (15948 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1592a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1592c:	42a0      	cmp	r0, r4
   1592e:	d804      	bhi.n	1593a <log_output_timestamp_freq_set+0x1a>
   15930:	b101      	cbz	r1, 15934 <log_output_timestamp_freq_set+0x14>
   15932:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   15934:	4b05      	ldr	r3, [pc, #20]	; (1594c <log_output_timestamp_freq_set+0x2c>)
   15936:	6018      	str	r0, [r3, #0]
}
   15938:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   1593a:	2101      	movs	r1, #1
		frequency /= 2U;
   1593c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1593e:	005b      	lsls	r3, r3, #1
   15940:	e7f4      	b.n	1592c <log_output_timestamp_freq_set+0xc>
   15942:	bf00      	nop
   15944:	20016080 	.word	0x20016080
   15948:	000f4240 	.word	0x000f4240
   1594c:	2001607c 	.word	0x2001607c

00015950 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   15950:	2201      	movs	r2, #1
   15952:	4b01      	ldr	r3, [pc, #4]	; (15958 <log_backend_rtt_init+0x8>)
   15954:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   15956:	4770      	bx	lr
   15958:	2001ba7e 	.word	0x2001ba7e

0001595c <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   1595c:	2201      	movs	r2, #1
   1595e:	4b02      	ldr	r3, [pc, #8]	; (15968 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   15960:	4802      	ldr	r0, [pc, #8]	; (1596c <panic+0x10>)
   15962:	701a      	strb	r2, [r3, #0]
   15964:	f01a bf86 	b.w	30874 <log_output_flush>
   15968:	2001ba7f 	.word	0x2001ba7f
   1596c:	00038b5c 	.word	0x00038b5c

00015970 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   15970:	4801      	ldr	r0, [pc, #4]	; (15978 <dropped+0x8>)
   15972:	f7ff bfa9 	b.w	158c8 <log_output_dropped_process>
   15976:	bf00      	nop
   15978:	00038b5c 	.word	0x00038b5c

0001597c <put>:
{
   1597c:	b510      	push	{r4, lr}
   1597e:	460c      	mov	r4, r1
	log_msg_get(msg);
   15980:	4608      	mov	r0, r1
   15982:	f01a fd78 	bl	30476 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   15986:	4621      	mov	r1, r4
   15988:	4804      	ldr	r0, [pc, #16]	; (1599c <put+0x20>)
   1598a:	220f      	movs	r2, #15
   1598c:	f7ff ff0a 	bl	157a4 <log_output_msg_process>
	log_msg_put(msg);
   15990:	4620      	mov	r0, r4
}
   15992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15996:	f01a bd99 	b.w	304cc <log_msg_put>
   1599a:	bf00      	nop
   1599c:	00038b5c 	.word	0x00038b5c

000159a0 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   159a0:	4b05      	ldr	r3, [pc, #20]	; (159b8 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   159a2:	781b      	ldrb	r3, [r3, #0]
   159a4:	b11b      	cbz	r3, 159ae <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   159a6:	f241 3088 	movw	r0, #5000	; 0x1388
   159aa:	f021 be10 	b.w	375ce <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   159ae:	20a4      	movs	r0, #164	; 0xa4
   159b0:	2100      	movs	r1, #0
   159b2:	f017 bae5 	b.w	2cf80 <z_impl_k_sleep>
   159b6:	bf00      	nop
   159b8:	2001ba7f 	.word	0x2001ba7f

000159bc <data_out_block_mode>:
{
   159bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   159c0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 15a58 <data_out_block_mode+0x9c>
{
   159c4:	4680      	mov	r8, r0
   159c6:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   159c8:	2404      	movs	r4, #4
   159ca:	46cb      	mov	fp, r9
	return z_impl_k_mutex_lock(mutex, timeout);
   159cc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 15a5c <data_out_block_mode+0xa0>
		if (!is_sync_mode()) {
   159d0:	f899 5000 	ldrb.w	r5, [r9]
   159d4:	b9cd      	cbnz	r5, 15a0a <data_out_block_mode+0x4e>
   159d6:	f04f 33ff 	mov.w	r3, #4294967295
   159da:	f04f 32ff 	mov.w	r2, #4294967295
   159de:	4650      	mov	r0, sl
   159e0:	f015 f8e6 	bl	2abb0 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   159e4:	463a      	mov	r2, r7
   159e6:	4641      	mov	r1, r8
   159e8:	4628      	mov	r0, r5
   159ea:	f010 fba5 	bl	26138 <SEGGER_RTT_WriteSkipNoLock>
   159ee:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   159f0:	4650      	mov	r0, sl
   159f2:	f015 f9d7 	bl	2ada4 <z_impl_k_mutex_unlock>
		if (ret) {
   159f6:	4d17      	ldr	r5, [pc, #92]	; (15a54 <data_out_block_mode+0x98>)
   159f8:	b1fe      	cbz	r6, 15a3a <data_out_block_mode+0x7e>
	host_present = true;
   159fa:	2301      	movs	r3, #1
   159fc:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   159fe:	f89b 3000 	ldrb.w	r3, [fp]
   15a02:	b96b      	cbnz	r3, 15a20 <data_out_block_mode+0x64>
}
   15a04:	4638      	mov	r0, r7
   15a06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   15a0a:	463a      	mov	r2, r7
   15a0c:	4641      	mov	r1, r8
   15a0e:	2000      	movs	r0, #0
   15a10:	f010 fb92 	bl	26138 <SEGGER_RTT_WriteSkipNoLock>
   15a14:	4606      	mov	r6, r0
   15a16:	e7ee      	b.n	159f6 <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   15a18:	b95c      	cbnz	r4, 15a32 <data_out_block_mode+0x76>
		host_present = false;
   15a1a:	702c      	strb	r4, [r5, #0]
   15a1c:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   15a20:	2000      	movs	r0, #0
   15a22:	f010 fc09 	bl	26238 <SEGGER_RTT_HasDataUp>
   15a26:	2800      	cmp	r0, #0
   15a28:	d0ec      	beq.n	15a04 <data_out_block_mode+0x48>
   15a2a:	782b      	ldrb	r3, [r5, #0]
   15a2c:	2b00      	cmp	r3, #0
   15a2e:	d1f3      	bne.n	15a18 <data_out_block_mode+0x5c>
   15a30:	e7e8      	b.n	15a04 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   15a32:	3c01      	subs	r4, #1
   15a34:	f7ff ffb4 	bl	159a0 <on_failed_write.part.0>
   15a38:	e7f2      	b.n	15a20 <data_out_block_mode+0x64>
		} else if (host_present) {
   15a3a:	782b      	ldrb	r3, [r5, #0]
   15a3c:	b113      	cbz	r3, 15a44 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   15a3e:	3c01      	subs	r4, #1
   15a40:	d104      	bne.n	15a4c <data_out_block_mode+0x90>
		host_present = false;
   15a42:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   15a44:	782b      	ldrb	r3, [r5, #0]
   15a46:	2b00      	cmp	r3, #0
   15a48:	d1c2      	bne.n	159d0 <data_out_block_mode+0x14>
   15a4a:	e7db      	b.n	15a04 <data_out_block_mode+0x48>
   15a4c:	f7ff ffa8 	bl	159a0 <on_failed_write.part.0>
   15a50:	e7f8      	b.n	15a44 <data_out_block_mode+0x88>
   15a52:	bf00      	nop
   15a54:	2001ba7e 	.word	0x2001ba7e
   15a58:	2001ba7f 	.word	0x2001ba7f
   15a5c:	20014f10 	.word	0x20014f10

00015a60 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   15a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   15a64:	f8df 909c 	ldr.w	r9, [pc, #156]	; 15b04 <z_impl_zsock_socket+0xa4>
{
   15a68:	4605      	mov	r5, r0
   15a6a:	460e      	mov	r6, r1
   15a6c:	4617      	mov	r7, r2
   15a6e:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   15a70:	4c1e      	ldr	r4, [pc, #120]	; (15aec <z_impl_zsock_socket+0x8c>)
   15a72:	f8df 8094 	ldr.w	r8, [pc, #148]	; 15b08 <z_impl_zsock_socket+0xa8>
   15a76:	454c      	cmp	r4, r9
   15a78:	d90c      	bls.n	15a94 <z_impl_zsock_socket+0x34>
   15a7a:	491d      	ldr	r1, [pc, #116]	; (15af0 <z_impl_zsock_socket+0x90>)
   15a7c:	23d4      	movs	r3, #212	; 0xd4
   15a7e:	4642      	mov	r2, r8
   15a80:	481c      	ldr	r0, [pc, #112]	; (15af4 <z_impl_zsock_socket+0x94>)
   15a82:	f01a f8f5 	bl	2fc70 <printk>
   15a86:	481c      	ldr	r0, [pc, #112]	; (15af8 <z_impl_zsock_socket+0x98>)
   15a88:	f01a f8f2 	bl	2fc70 <printk>
   15a8c:	21d4      	movs	r1, #212	; 0xd4
   15a8e:	4640      	mov	r0, r8
   15a90:	f01a fbd4 	bl	3023c <assert_post_action>
   15a94:	4554      	cmp	r4, sl
   15a96:	d307      	bcc.n	15aa8 <z_impl_zsock_socket+0x48>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   15a98:	f01c fcec 	bl	32474 <__errno>
   15a9c:	236a      	movs	r3, #106	; 0x6a
   15a9e:	6003      	str	r3, [r0, #0]
	return -1;
}
   15aa0:	f04f 30ff 	mov.w	r0, #4294967295
   15aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   15aa8:	6823      	ldr	r3, [r4, #0]
   15aaa:	42ab      	cmp	r3, r5
   15aac:	d000      	beq.n	15ab0 <z_impl_zsock_socket+0x50>
   15aae:	b9db      	cbnz	r3, 15ae8 <z_impl_zsock_socket+0x88>
		NET_ASSERT(sock_family->is_supported);
   15ab0:	6863      	ldr	r3, [r4, #4]
   15ab2:	b963      	cbnz	r3, 15ace <z_impl_zsock_socket+0x6e>
   15ab4:	4911      	ldr	r1, [pc, #68]	; (15afc <z_impl_zsock_socket+0x9c>)
   15ab6:	23da      	movs	r3, #218	; 0xda
   15ab8:	4642      	mov	r2, r8
   15aba:	480e      	ldr	r0, [pc, #56]	; (15af4 <z_impl_zsock_socket+0x94>)
   15abc:	f01a f8d8 	bl	2fc70 <printk>
   15ac0:	480f      	ldr	r0, [pc, #60]	; (15b00 <z_impl_zsock_socket+0xa0>)
   15ac2:	f01a f8d5 	bl	2fc70 <printk>
   15ac6:	21da      	movs	r1, #218	; 0xda
   15ac8:	4640      	mov	r0, r8
   15aca:	f01a fbb7 	bl	3023c <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   15ace:	463a      	mov	r2, r7
   15ad0:	4631      	mov	r1, r6
   15ad2:	4628      	mov	r0, r5
   15ad4:	6863      	ldr	r3, [r4, #4]
   15ad6:	4798      	blx	r3
   15ad8:	b130      	cbz	r0, 15ae8 <z_impl_zsock_socket+0x88>
		return sock_family->handler(family, type, proto);
   15ada:	463a      	mov	r2, r7
   15adc:	4631      	mov	r1, r6
   15ade:	4628      	mov	r0, r5
   15ae0:	68a3      	ldr	r3, [r4, #8]
}
   15ae2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   15ae6:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   15ae8:	340c      	adds	r4, #12
   15aea:	e7c4      	b.n	15a76 <z_impl_zsock_socket+0x16>
   15aec:	0003876c 	.word	0x0003876c
   15af0:	0003abf8 	.word	0x0003abf8
   15af4:	0003a56b 	.word	0x0003a56b
   15af8:	0003ac25 	.word	0x0003ac25
   15afc:	0003abde 	.word	0x0003abde
   15b00:	0003aba7 	.word	0x0003aba7
   15b04:	00038778 	.word	0x00038778
   15b08:	0003abaa 	.word	0x0003abaa

00015b0c <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   15b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   15b10:	1e14      	subs	r4, r2, #0
{
   15b12:	b09b      	sub	sp, #108	; 0x6c
   15b14:	4605      	mov	r5, r0
   15b16:	9104      	str	r1, [sp, #16]
	if (poll_timeout < 0) {
   15b18:	db2f      	blt.n	15b7a <z_impl_zsock_poll+0x6e>
   15b1a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   15b1e:	f240 30e7 	movw	r0, #999	; 0x3e7
   15b22:	2100      	movs	r1, #0
   15b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15b28:	2300      	movs	r3, #0
   15b2a:	fbc6 0104 	smlal	r0, r1, r6, r4
   15b2e:	f7fb fb5f 	bl	111f0 <__aeabi_uldivmod>
   15b32:	4682      	mov	sl, r0
   15b34:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   15b36:	2600      	movs	r6, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = sys_clock_timeout_end_calc(timeout);
   15b38:	4650      	mov	r0, sl
   15b3a:	4659      	mov	r1, fp
   15b3c:	f021 fd4b 	bl	375d6 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   15b40:	462f      	mov	r7, r5
	const struct fd_op_vtable *offl_vtable = NULL;
   15b42:	46b0      	mov	r8, r6
	pev = poll_events;
   15b44:	ab0b      	add	r3, sp, #44	; 0x2c
   15b46:	9308      	str	r3, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   15b48:	e9cd 0105 	strd	r0, r1, [sp, #20]
	for (pfd = fds, i = nfds; i--; pfd++) {
   15b4c:	9b04      	ldr	r3, [sp, #16]
	bool offload = false;
   15b4e:	9602      	str	r6, [sp, #8]
	for (pfd = fds, i = nfds; i--; pfd++) {
   15b50:	9303      	str	r3, [sp, #12]
   15b52:	9b03      	ldr	r3, [sp, #12]
   15b54:	b9c3      	cbnz	r3, 15b88 <z_impl_zsock_poll+0x7c>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   15b56:	9b02      	ldr	r3, [sp, #8]
   15b58:	2b00      	cmp	r3, #0
   15b5a:	d05b      	beq.n	15c14 <z_impl_zsock_poll+0x108>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   15b5c:	9b04      	ldr	r3, [sp, #16]
   15b5e:	9401      	str	r4, [sp, #4]
   15b60:	9300      	str	r3, [sp, #0]
   15b62:	f44f 7282 	mov.w	r2, #260	; 0x104
   15b66:	462b      	mov	r3, r5
   15b68:	4631      	mov	r1, r6
   15b6a:	4640      	mov	r0, r8
   15b6c:	f01a fec9 	bl	30902 <z_fdtable_call_ioctl>
   15b70:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   15b72:	4620      	mov	r0, r4
   15b74:	b01b      	add	sp, #108	; 0x6c
   15b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   15b7a:	f04f 3aff 	mov.w	sl, #4294967295
   15b7e:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   15b82:	f04f 34ff 	mov.w	r4, #4294967295
   15b86:	e7d6      	b.n	15b36 <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   15b88:	6838      	ldr	r0, [r7, #0]
   15b8a:	2800      	cmp	r0, #0
   15b8c:	db3d      	blt.n	15c0a <z_impl_zsock_poll+0xfe>
	ctx = z_get_fd_obj_and_vtable(sock,
   15b8e:	aa0a      	add	r2, sp, #40	; 0x28
   15b90:	a909      	add	r1, sp, #36	; 0x24
   15b92:	f7fd fcfd 	bl	13590 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   15b96:	9007      	str	r0, [sp, #28]
   15b98:	2800      	cmp	r0, #0
   15b9a:	d036      	beq.n	15c0a <z_impl_zsock_poll+0xfe>
		(void)k_mutex_lock(lock, K_FOREVER);
   15b9c:	f04f 32ff 	mov.w	r2, #4294967295
   15ba0:	f04f 33ff 	mov.w	r3, #4294967295
   15ba4:	980a      	ldr	r0, [sp, #40]	; 0x28
   15ba6:	f01a febb 	bl	30920 <k_mutex_lock.constprop.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   15baa:	ab1a      	add	r3, sp, #104	; 0x68
   15bac:	9301      	str	r3, [sp, #4]
   15bae:	ab08      	add	r3, sp, #32
   15bb0:	9300      	str	r3, [sp, #0]
   15bb2:	f44f 7281 	mov.w	r2, #258	; 0x102
   15bb6:	463b      	mov	r3, r7
   15bb8:	9907      	ldr	r1, [sp, #28]
   15bba:	9809      	ldr	r0, [sp, #36]	; 0x24
   15bbc:	f01a fea1 	bl	30902 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   15bc0:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   15bc4:	4681      	mov	r9, r0
		if (result == -EALREADY) {
   15bc6:	d00e      	beq.n	15be6 <z_impl_zsock_poll+0xda>
		} else if (result == -EXDEV) {
   15bc8:	f110 0f12 	cmn.w	r0, #18
   15bcc:	9907      	ldr	r1, [sp, #28]
   15bce:	d110      	bne.n	15bf2 <z_impl_zsock_poll+0xe6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   15bd0:	f1b8 0f00 	cmp.w	r8, #0
   15bd4:	d102      	bne.n	15bdc <z_impl_zsock_poll+0xd0>
				offl_vtable = vtable;
   15bd6:	460e      	mov	r6, r1
   15bd8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
			offload = true;
   15bdc:	2301      	movs	r3, #1
			result = 0;
   15bde:	f04f 0900 	mov.w	r9, #0
			offload = true;
   15be2:	9302      	str	r3, [sp, #8]
   15be4:	e005      	b.n	15bf2 <z_impl_zsock_poll+0xe6>
			timeout = K_NO_WAIT;
   15be6:	f04f 0a00 	mov.w	sl, #0
   15bea:	f04f 0b00 	mov.w	fp, #0
			result = 0;
   15bee:	f04f 0900 	mov.w	r9, #0
		k_mutex_unlock(lock);
   15bf2:	980a      	ldr	r0, [sp, #40]	; 0x28
   15bf4:	f01a fe83 	bl	308fe <k_mutex_unlock>
		if (result < 0) {
   15bf8:	f1b9 0f00 	cmp.w	r9, #0
   15bfc:	da05      	bge.n	15c0a <z_impl_zsock_poll+0xfe>
				errno = -result;
   15bfe:	f01c fc39 	bl	32474 <__errno>
   15c02:	f1c9 0300 	rsb	r3, r9, #0
   15c06:	6003      	str	r3, [r0, #0]
				return -1;
   15c08:	e039      	b.n	15c7e <z_impl_zsock_poll+0x172>
	for (pfd = fds, i = nfds; i--; pfd++) {
   15c0a:	9b03      	ldr	r3, [sp, #12]
   15c0c:	3708      	adds	r7, #8
   15c0e:	3b01      	subs	r3, #1
   15c10:	9303      	str	r3, [sp, #12]
   15c12:	e79e      	b.n	15b52 <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15c14:	ea5a 030b 	orrs.w	r3, sl, fp
   15c18:	d016      	beq.n	15c48 <z_impl_zsock_poll+0x13c>
   15c1a:	f1bb 3fff 	cmp.w	fp, #4294967295
   15c1e:	bf08      	it	eq
   15c20:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   15c24:	d010      	beq.n	15c48 <z_impl_zsock_poll+0x13c>
		int64_t remaining = end - sys_clock_tick_get();
   15c26:	f017 fe05 	bl	2d834 <sys_clock_tick_get>
   15c2a:	9b05      	ldr	r3, [sp, #20]
   15c2c:	ebb3 0a00 	subs.w	sl, r3, r0
   15c30:	9b06      	ldr	r3, [sp, #24]
   15c32:	eb63 0b01 	sbc.w	fp, r3, r1
   15c36:	f1ba 0f00 	cmp.w	sl, #0
   15c3a:	f17b 0300 	sbcs.w	r3, fp, #0
   15c3e:	bfbc      	itt	lt
   15c40:	f04f 0a00 	movlt.w	sl, #0
   15c44:	f04f 0b00 	movlt.w	fp, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   15c48:	9908      	ldr	r1, [sp, #32]
   15c4a:	ac0b      	add	r4, sp, #44	; 0x2c
   15c4c:	4b3b      	ldr	r3, [pc, #236]	; (15d3c <z_impl_zsock_poll+0x230>)
   15c4e:	1b09      	subs	r1, r1, r4
   15c50:	1089      	asrs	r1, r1, #2
   15c52:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   15c54:	465b      	mov	r3, fp
   15c56:	4652      	mov	r2, sl
   15c58:	4620      	mov	r0, r4
   15c5a:	f018 f977 	bl	2df4c <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   15c5e:	f100 030b 	add.w	r3, r0, #11
   15c62:	2b0b      	cmp	r3, #11
   15c64:	4607      	mov	r7, r0
   15c66:	d806      	bhi.n	15c76 <z_impl_zsock_poll+0x16a>
   15c68:	f640 0681 	movw	r6, #2177	; 0x881
   15c6c:	40de      	lsrs	r6, r3
   15c6e:	43f6      	mvns	r6, r6
   15c70:	f016 0601 	ands.w	r6, r6, #1
   15c74:	d006      	beq.n	15c84 <z_impl_zsock_poll+0x178>
			errno = -ret;
   15c76:	f01c fbfd 	bl	32474 <__errno>
   15c7a:	427f      	negs	r7, r7
   15c7c:	6007      	str	r7, [r0, #0]
			return -1;
   15c7e:	f04f 34ff 	mov.w	r4, #4294967295
   15c82:	e776      	b.n	15b72 <z_impl_zsock_poll+0x66>
		pev = poll_events;
   15c84:	9408      	str	r4, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   15c86:	462f      	mov	r7, r5
		ret = 0;
   15c88:	4634      	mov	r4, r6
		for (pfd = fds, i = nfds; i--; pfd++) {
   15c8a:	f8dd 8010 	ldr.w	r8, [sp, #16]
   15c8e:	f1b8 0f00 	cmp.w	r8, #0
   15c92:	d11d      	bne.n	15cd0 <z_impl_zsock_poll+0x1c4>
		if (retry) {
   15c94:	2e00      	cmp	r6, #0
   15c96:	f43f af6c 	beq.w	15b72 <z_impl_zsock_poll+0x66>
			if (ret > 0) {
   15c9a:	2c00      	cmp	r4, #0
   15c9c:	f73f af69 	bgt.w	15b72 <z_impl_zsock_poll+0x66>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15ca0:	ea5a 030b 	orrs.w	r3, sl, fp
   15ca4:	f43f af65 	beq.w	15b72 <z_impl_zsock_poll+0x66>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15ca8:	f1bb 3fff 	cmp.w	fp, #4294967295
   15cac:	bf08      	it	eq
   15cae:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   15cb2:	d0c9      	beq.n	15c48 <z_impl_zsock_poll+0x13c>
				int64_t remaining = end - sys_clock_tick_get();
   15cb4:	f017 fdbe 	bl	2d834 <sys_clock_tick_get>
   15cb8:	9b05      	ldr	r3, [sp, #20]
   15cba:	ebb3 0a00 	subs.w	sl, r3, r0
   15cbe:	9b06      	ldr	r3, [sp, #24]
   15cc0:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   15cc4:	f1ba 0f01 	cmp.w	sl, #1
   15cc8:	f17b 0300 	sbcs.w	r3, fp, #0
   15ccc:	dabc      	bge.n	15c48 <z_impl_zsock_poll+0x13c>
   15cce:	e750      	b.n	15b72 <z_impl_zsock_poll+0x66>
			pfd->revents = 0;
   15cd0:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   15cd4:	6838      	ldr	r0, [r7, #0]
			pfd->revents = 0;
   15cd6:	80fb      	strh	r3, [r7, #6]
			if (pfd->fd < 0) {
   15cd8:	2800      	cmp	r0, #0
   15cda:	db28      	blt.n	15d2e <z_impl_zsock_poll+0x222>
	ctx = z_get_fd_obj_and_vtable(sock,
   15cdc:	aa0a      	add	r2, sp, #40	; 0x28
   15cde:	a909      	add	r1, sp, #36	; 0x24
   15ce0:	f7fd fc56 	bl	13590 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   15ce4:	4681      	mov	r9, r0
   15ce6:	b918      	cbnz	r0, 15cf0 <z_impl_zsock_poll+0x1e4>
				pfd->revents = ZSOCK_POLLNVAL;
   15ce8:	2320      	movs	r3, #32
   15cea:	80fb      	strh	r3, [r7, #6]
				ret++;
   15cec:	3401      	adds	r4, #1
   15cee:	e01e      	b.n	15d2e <z_impl_zsock_poll+0x222>
			(void)k_mutex_lock(lock, K_FOREVER);
   15cf0:	f04f 32ff 	mov.w	r2, #4294967295
   15cf4:	f04f 33ff 	mov.w	r3, #4294967295
   15cf8:	980a      	ldr	r0, [sp, #40]	; 0x28
   15cfa:	f01a fe11 	bl	30920 <k_mutex_lock.constprop.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   15cfe:	ab08      	add	r3, sp, #32
   15d00:	4649      	mov	r1, r9
   15d02:	f240 1203 	movw	r2, #259	; 0x103
   15d06:	9300      	str	r3, [sp, #0]
   15d08:	9809      	ldr	r0, [sp, #36]	; 0x24
   15d0a:	463b      	mov	r3, r7
   15d0c:	f01a fdf9 	bl	30902 <z_fdtable_call_ioctl>
   15d10:	4681      	mov	r9, r0
			k_mutex_unlock(lock);
   15d12:	980a      	ldr	r0, [sp, #40]	; 0x28
   15d14:	f01a fdf3 	bl	308fe <k_mutex_unlock>
			if (result == -EAGAIN) {
   15d18:	f119 0f0b 	cmn.w	r9, #11
   15d1c:	d00b      	beq.n	15d36 <z_impl_zsock_poll+0x22a>
			} else if (result != 0) {
   15d1e:	f1b9 0f00 	cmp.w	r9, #0
   15d22:	f47f af6c 	bne.w	15bfe <z_impl_zsock_poll+0xf2>
			if (pfd->revents != 0) {
   15d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15d2a:	2b00      	cmp	r3, #0
   15d2c:	d1de      	bne.n	15cec <z_impl_zsock_poll+0x1e0>
		for (pfd = fds, i = nfds; i--; pfd++) {
   15d2e:	3708      	adds	r7, #8
   15d30:	f108 38ff 	add.w	r8, r8, #4294967295
   15d34:	e7ab      	b.n	15c8e <z_impl_zsock_poll+0x182>
				retry = true;
   15d36:	2601      	movs	r6, #1
   15d38:	e7f9      	b.n	15d2e <z_impl_zsock_poll+0x222>
   15d3a:	bf00      	nop
   15d3c:	cccccccd 	.word	0xcccccccd

00015d40 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   15d40:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   15d42:	4605      	mov	r5, r0
   15d44:	b948      	cbnz	r0, 15d5a <socket_offload_dns_register+0x1a>
   15d46:	490c      	ldr	r1, [pc, #48]	; (15d78 <socket_offload_dns_register+0x38>)
   15d48:	480c      	ldr	r0, [pc, #48]	; (15d7c <socket_offload_dns_register+0x3c>)
   15d4a:	2313      	movs	r3, #19
   15d4c:	4a0c      	ldr	r2, [pc, #48]	; (15d80 <socket_offload_dns_register+0x40>)
   15d4e:	f019 ff8f 	bl	2fc70 <printk>
   15d52:	2113      	movs	r1, #19
   15d54:	480a      	ldr	r0, [pc, #40]	; (15d80 <socket_offload_dns_register+0x40>)
   15d56:	f01a fa71 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   15d5a:	4c0a      	ldr	r4, [pc, #40]	; (15d84 <socket_offload_dns_register+0x44>)
   15d5c:	6822      	ldr	r2, [r4, #0]
   15d5e:	b14a      	cbz	r2, 15d74 <socket_offload_dns_register+0x34>
   15d60:	4909      	ldr	r1, [pc, #36]	; (15d88 <socket_offload_dns_register+0x48>)
   15d62:	4806      	ldr	r0, [pc, #24]	; (15d7c <socket_offload_dns_register+0x3c>)
   15d64:	2314      	movs	r3, #20
   15d66:	4a06      	ldr	r2, [pc, #24]	; (15d80 <socket_offload_dns_register+0x40>)
   15d68:	f019 ff82 	bl	2fc70 <printk>
   15d6c:	2114      	movs	r1, #20
   15d6e:	4804      	ldr	r0, [pc, #16]	; (15d80 <socket_offload_dns_register+0x40>)
   15d70:	f01a fa64 	bl	3023c <assert_post_action>

	dns_offload = ops;
   15d74:	6025      	str	r5, [r4, #0]
}
   15d76:	bd38      	pop	{r3, r4, r5, pc}
   15d78:	000405ed 	.word	0x000405ed
   15d7c:	0003a56b 	.word	0x0003a56b
   15d80:	0003ac44 	.word	0x0003ac44
   15d84:	20016098 	.word	0x20016098
   15d88:	0003ac7f 	.word	0x0003ac7f

00015d8c <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   15d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   15d90:	4c13      	ldr	r4, [pc, #76]	; (15de0 <socket_offload_getaddrinfo+0x54>)
{
   15d92:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   15d94:	6823      	ldr	r3, [r4, #0]
{
   15d96:	4605      	mov	r5, r0
   15d98:	460e      	mov	r6, r1
   15d9a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   15d9c:	b94b      	cbnz	r3, 15db2 <socket_offload_getaddrinfo+0x26>
   15d9e:	4911      	ldr	r1, [pc, #68]	; (15de4 <socket_offload_getaddrinfo+0x58>)
   15da0:	4811      	ldr	r0, [pc, #68]	; (15de8 <socket_offload_getaddrinfo+0x5c>)
   15da2:	231d      	movs	r3, #29
   15da4:	4a11      	ldr	r2, [pc, #68]	; (15dec <socket_offload_getaddrinfo+0x60>)
   15da6:	f019 ff63 	bl	2fc70 <printk>
   15daa:	211d      	movs	r1, #29
   15dac:	480f      	ldr	r0, [pc, #60]	; (15dec <socket_offload_getaddrinfo+0x60>)
   15dae:	f01a fa45 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   15db2:	6823      	ldr	r3, [r4, #0]
   15db4:	681b      	ldr	r3, [r3, #0]
   15db6:	b94b      	cbnz	r3, 15dcc <socket_offload_getaddrinfo+0x40>
   15db8:	490d      	ldr	r1, [pc, #52]	; (15df0 <socket_offload_getaddrinfo+0x64>)
   15dba:	480b      	ldr	r0, [pc, #44]	; (15de8 <socket_offload_getaddrinfo+0x5c>)
   15dbc:	231e      	movs	r3, #30
   15dbe:	4a0b      	ldr	r2, [pc, #44]	; (15dec <socket_offload_getaddrinfo+0x60>)
   15dc0:	f019 ff56 	bl	2fc70 <printk>
   15dc4:	211e      	movs	r1, #30
   15dc6:	4809      	ldr	r0, [pc, #36]	; (15dec <socket_offload_getaddrinfo+0x60>)
   15dc8:	f01a fa38 	bl	3023c <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   15dcc:	6823      	ldr	r3, [r4, #0]
   15dce:	463a      	mov	r2, r7
   15dd0:	681c      	ldr	r4, [r3, #0]
   15dd2:	4631      	mov	r1, r6
   15dd4:	4643      	mov	r3, r8
   15dd6:	4628      	mov	r0, r5
   15dd8:	46a4      	mov	ip, r4
}
   15dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   15dde:	4760      	bx	ip
   15de0:	20016098 	.word	0x20016098
   15de4:	0003ac9a 	.word	0x0003ac9a
   15de8:	0003a56b 	.word	0x0003a56b
   15dec:	0003ac44 	.word	0x0003ac44
   15df0:	0003aca6 	.word	0x0003aca6

00015df4 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   15df4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   15df6:	4c10      	ldr	r4, [pc, #64]	; (15e38 <socket_offload_freeaddrinfo+0x44>)
{
   15df8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   15dfa:	6823      	ldr	r3, [r4, #0]
   15dfc:	b94b      	cbnz	r3, 15e12 <socket_offload_freeaddrinfo+0x1e>
   15dfe:	490f      	ldr	r1, [pc, #60]	; (15e3c <socket_offload_freeaddrinfo+0x48>)
   15e00:	480f      	ldr	r0, [pc, #60]	; (15e40 <socket_offload_freeaddrinfo+0x4c>)
   15e02:	2325      	movs	r3, #37	; 0x25
   15e04:	4a0f      	ldr	r2, [pc, #60]	; (15e44 <socket_offload_freeaddrinfo+0x50>)
   15e06:	f019 ff33 	bl	2fc70 <printk>
   15e0a:	2125      	movs	r1, #37	; 0x25
   15e0c:	480d      	ldr	r0, [pc, #52]	; (15e44 <socket_offload_freeaddrinfo+0x50>)
   15e0e:	f01a fa15 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   15e12:	6823      	ldr	r3, [r4, #0]
   15e14:	685b      	ldr	r3, [r3, #4]
   15e16:	b94b      	cbnz	r3, 15e2c <socket_offload_freeaddrinfo+0x38>
   15e18:	490b      	ldr	r1, [pc, #44]	; (15e48 <socket_offload_freeaddrinfo+0x54>)
   15e1a:	4809      	ldr	r0, [pc, #36]	; (15e40 <socket_offload_freeaddrinfo+0x4c>)
   15e1c:	2326      	movs	r3, #38	; 0x26
   15e1e:	4a09      	ldr	r2, [pc, #36]	; (15e44 <socket_offload_freeaddrinfo+0x50>)
   15e20:	f019 ff26 	bl	2fc70 <printk>
   15e24:	2126      	movs	r1, #38	; 0x26
   15e26:	4807      	ldr	r0, [pc, #28]	; (15e44 <socket_offload_freeaddrinfo+0x50>)
   15e28:	f01a fa08 	bl	3023c <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   15e2c:	6823      	ldr	r3, [r4, #0]
   15e2e:	4628      	mov	r0, r5
}
   15e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   15e34:	685b      	ldr	r3, [r3, #4]
   15e36:	4718      	bx	r3
   15e38:	20016098 	.word	0x20016098
   15e3c:	0003ac9a 	.word	0x0003ac9a
   15e40:	0003a56b 	.word	0x0003a56b
   15e44:	0003ac44 	.word	0x0003ac44
   15e48:	0003acbf 	.word	0x0003acbf

00015e4c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   15e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e4e:	4605      	mov	r5, r0
	__asm__ volatile(
   15e50:	f04f 0320 	mov.w	r3, #32
   15e54:	f3ef 8611 	mrs	r6, BASEPRI
   15e58:	f383 8811 	msr	BASEPRI, r3
   15e5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15e60:	481e      	ldr	r0, [pc, #120]	; (15edc <pm_state_notify+0x90>)
   15e62:	f014 fcd7 	bl	2a814 <z_spin_lock_valid>
   15e66:	b968      	cbnz	r0, 15e84 <pm_state_notify+0x38>
   15e68:	2381      	movs	r3, #129	; 0x81
   15e6a:	4a1d      	ldr	r2, [pc, #116]	; (15ee0 <pm_state_notify+0x94>)
   15e6c:	491d      	ldr	r1, [pc, #116]	; (15ee4 <pm_state_notify+0x98>)
   15e6e:	481e      	ldr	r0, [pc, #120]	; (15ee8 <pm_state_notify+0x9c>)
   15e70:	f019 fefe 	bl	2fc70 <printk>
   15e74:	4919      	ldr	r1, [pc, #100]	; (15edc <pm_state_notify+0x90>)
   15e76:	481d      	ldr	r0, [pc, #116]	; (15eec <pm_state_notify+0xa0>)
   15e78:	f019 fefa 	bl	2fc70 <printk>
   15e7c:	2181      	movs	r1, #129	; 0x81
   15e7e:	4818      	ldr	r0, [pc, #96]	; (15ee0 <pm_state_notify+0x94>)
   15e80:	f01a f9dc 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   15e84:	4815      	ldr	r0, [pc, #84]	; (15edc <pm_state_notify+0x90>)
   15e86:	f014 fce1 	bl	2a84c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   15e8a:	4b19      	ldr	r3, [pc, #100]	; (15ef0 <pm_state_notify+0xa4>)
   15e8c:	681c      	ldr	r4, [r3, #0]
   15e8e:	2c00      	cmp	r4, #0
   15e90:	bf38      	it	cc
   15e92:	2400      	movcc	r4, #0
   15e94:	b15c      	cbz	r4, 15eae <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   15e96:	4f17      	ldr	r7, [pc, #92]	; (15ef4 <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
   15e98:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   15e9c:	2d00      	cmp	r5, #0
   15e9e:	bf08      	it	eq
   15ea0:	4613      	moveq	r3, r2
		if (callback) {
   15ea2:	b10b      	cbz	r3, 15ea8 <pm_state_notify+0x5c>
			callback(z_power_state.state);
   15ea4:	7838      	ldrb	r0, [r7, #0]
   15ea6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15ea8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   15eaa:	2c00      	cmp	r4, #0
   15eac:	d1f4      	bne.n	15e98 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15eae:	480b      	ldr	r0, [pc, #44]	; (15edc <pm_state_notify+0x90>)
   15eb0:	f014 fcbe 	bl	2a830 <z_spin_unlock_valid>
   15eb4:	b968      	cbnz	r0, 15ed2 <pm_state_notify+0x86>
   15eb6:	23ac      	movs	r3, #172	; 0xac
   15eb8:	4a09      	ldr	r2, [pc, #36]	; (15ee0 <pm_state_notify+0x94>)
   15eba:	490f      	ldr	r1, [pc, #60]	; (15ef8 <pm_state_notify+0xac>)
   15ebc:	480a      	ldr	r0, [pc, #40]	; (15ee8 <pm_state_notify+0x9c>)
   15ebe:	f019 fed7 	bl	2fc70 <printk>
   15ec2:	4906      	ldr	r1, [pc, #24]	; (15edc <pm_state_notify+0x90>)
   15ec4:	480d      	ldr	r0, [pc, #52]	; (15efc <pm_state_notify+0xb0>)
   15ec6:	f019 fed3 	bl	2fc70 <printk>
   15eca:	21ac      	movs	r1, #172	; 0xac
   15ecc:	4804      	ldr	r0, [pc, #16]	; (15ee0 <pm_state_notify+0x94>)
   15ece:	f01a f9b5 	bl	3023c <assert_post_action>
	__asm__ volatile(
   15ed2:	f386 8811 	msr	BASEPRI, r6
   15ed6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   15eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15edc:	2001609c 	.word	0x2001609c
   15ee0:	0003a62b 	.word	0x0003a62b
   15ee4:	0003a67d 	.word	0x0003a67d
   15ee8:	0003a56b 	.word	0x0003a56b
   15eec:	0003a692 	.word	0x0003a692
   15ef0:	200160a0 	.word	0x200160a0
   15ef4:	200160a8 	.word	0x200160a8
   15ef8:	0003a651 	.word	0x0003a651
   15efc:	0003a668 	.word	0x0003a668

00015f00 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   15f00:	4b08      	ldr	r3, [pc, #32]	; (15f24 <pm_system_resume+0x24>)
{
   15f02:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   15f04:	681c      	ldr	r4, [r3, #0]
   15f06:	b95c      	cbnz	r4, 15f20 <pm_system_resume+0x20>
		post_ops_done = 1;
   15f08:	2201      	movs	r2, #1
   15f0a:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   15f0c:	4b06      	ldr	r3, [pc, #24]	; (15f28 <pm_system_resume+0x28>)
   15f0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   15f12:	f01a f9b0 	bl	30276 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   15f16:	4620      	mov	r0, r4
	}
}
   15f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   15f1c:	f7ff bf96 	b.w	15e4c <pm_state_notify>
}
   15f20:	bd10      	pop	{r4, pc}
   15f22:	bf00      	nop
   15f24:	20014720 	.word	0x20014720
   15f28:	200160a8 	.word	0x200160a8

00015f2c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   15f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f2e:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
   15f30:	466e      	mov	r6, sp
   15f32:	4c1f      	ldr	r4, [pc, #124]	; (15fb0 <pm_system_suspend+0x84>)
   15f34:	4601      	mov	r1, r0
{
   15f36:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   15f38:	4630      	mov	r0, r6
   15f3a:	f01a fdf3 	bl	30b24 <pm_policy_next_state>
   15f3e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   15f46:	7820      	ldrb	r0, [r4, #0]
   15f48:	b380      	cbz	r0, 15fac <pm_system_suspend+0x80>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   15f4a:	2000      	movs	r0, #0
   15f4c:	4b19      	ldr	r3, [pc, #100]	; (15fb4 <pm_system_suspend+0x88>)
   15f4e:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   15f50:	1c6b      	adds	r3, r5, #1
   15f52:	d01d      	beq.n	15f90 <pm_system_suspend+0x64>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   15f54:	4291      	cmp	r1, r2
   15f56:	d20c      	bcs.n	15f72 <pm_system_suspend+0x46>
   15f58:	4917      	ldr	r1, [pc, #92]	; (15fb8 <pm_system_suspend+0x8c>)
   15f5a:	23bd      	movs	r3, #189	; 0xbd
   15f5c:	4a17      	ldr	r2, [pc, #92]	; (15fbc <pm_system_suspend+0x90>)
   15f5e:	4818      	ldr	r0, [pc, #96]	; (15fc0 <pm_system_suspend+0x94>)
   15f60:	f019 fe86 	bl	2fc70 <printk>
   15f64:	4817      	ldr	r0, [pc, #92]	; (15fc4 <pm_system_suspend+0x98>)
   15f66:	f019 fe83 	bl	2fc70 <printk>
   15f6a:	21bd      	movs	r1, #189	; 0xbd
   15f6c:	4813      	ldr	r0, [pc, #76]	; (15fbc <pm_system_suspend+0x90>)
   15f6e:	f01a f965 	bl	3023c <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   15f72:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   15f76:	2100      	movs	r1, #0
   15f78:	68a7      	ldr	r7, [r4, #8]
   15f7a:	4813      	ldr	r0, [pc, #76]	; (15fc8 <pm_system_suspend+0x9c>)
   15f7c:	2300      	movs	r3, #0
   15f7e:	fbe6 0107 	umlal	r0, r1, r6, r7
   15f82:	4a12      	ldr	r2, [pc, #72]	; (15fcc <pm_system_suspend+0xa0>)
   15f84:	f7fb f934 	bl	111f0 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   15f88:	2101      	movs	r1, #1
   15f8a:	1a28      	subs	r0, r5, r0
   15f8c:	f017 fb38 	bl	2d600 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   15f90:	f016 f836 	bl	2c000 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   15f94:	2001      	movs	r0, #1
   15f96:	f7ff ff59 	bl	15e4c <pm_state_notify>
	pm_power_state_set(z_power_state);
   15f9a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   15f9e:	f01a f957 	bl	30250 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   15fa2:	f7ff ffad 	bl	15f00 <pm_system_resume>
	k_sched_unlock();
   15fa6:	f016 fabf 	bl	2c528 <k_sched_unlock>

	return z_power_state.state;
   15faa:	7820      	ldrb	r0, [r4, #0]
}
   15fac:	b005      	add	sp, #20
   15fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15fb0:	200160a8 	.word	0x200160a8
   15fb4:	20014720 	.word	0x20014720
   15fb8:	0003ad58 	.word	0x0003ad58
   15fbc:	0003ace2 	.word	0x0003ace2
   15fc0:	0003a56b 	.word	0x0003a56b
   15fc4:	0003ad98 	.word	0x0003ad98
   15fc8:	000f423f 	.word	0x000f423f
   15fcc:	000f4240 	.word	0x000f4240

00015fd0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   15fd0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   15fd2:	4c04      	ldr	r4, [pc, #16]	; (15fe4 <rtt_console_init+0x14>)
   15fd4:	4620      	mov	r0, r4
   15fd6:	f7fd fb91 	bl	136fc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   15fda:	4620      	mov	r0, r4
   15fdc:	f002 f92e 	bl	1823c <__stdout_hook_install>

	return 0;
}
   15fe0:	2000      	movs	r0, #0
   15fe2:	bd10      	pop	{r4, pc}
   15fe4:	00015fe9 	.word	0x00015fe9

00015fe8 <rtt_console_out>:
{
   15fe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15fec:	4604      	mov	r4, r0
	char c = (char)character;
   15fee:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
   15ff0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 16050 <rtt_console_out+0x68>
   15ff4:	4e15      	ldr	r6, [pc, #84]	; (1604c <rtt_console_out+0x64>)
   15ff6:	f88d 0007 	strb.w	r0, [sp, #7]
   15ffa:	f04f 33ff 	mov.w	r3, #4294967295
   15ffe:	f04f 32ff 	mov.w	r2, #4294967295
   16002:	4640      	mov	r0, r8
   16004:	f014 fdd4 	bl	2abb0 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   16008:	2201      	movs	r2, #1
   1600a:	f10d 0107 	add.w	r1, sp, #7
   1600e:	2000      	movs	r0, #0
   16010:	f010 f8de 	bl	261d0 <SEGGER_RTT_WriteNoLock>
   16014:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   16016:	4640      	mov	r0, r8
   16018:	f014 fec4 	bl	2ada4 <z_impl_k_mutex_unlock>
		if (cnt) {
   1601c:	b12f      	cbz	r7, 1602a <rtt_console_out+0x42>
			host_present = true;
   1601e:	2301      	movs	r3, #1
   16020:	7033      	strb	r3, [r6, #0]
}
   16022:	4620      	mov	r0, r4
   16024:	b002      	add	sp, #8
   16026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   1602a:	7833      	ldrb	r3, [r6, #0]
   1602c:	2b00      	cmp	r3, #0
   1602e:	d0f8      	beq.n	16022 <rtt_console_out+0x3a>
			if (max_cnt) {
   16030:	3d01      	subs	r5, #1
   16032:	d008      	beq.n	16046 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   16034:	f021 f9eb 	bl	3740e <k_is_in_isr>
   16038:	2800      	cmp	r0, #0
   1603a:	d1de      	bne.n	15ffa <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   1603c:	2100      	movs	r1, #0
   1603e:	2042      	movs	r0, #66	; 0x42
   16040:	f016 ff9e 	bl	2cf80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16044:	e7d9      	b.n	15ffa <rtt_console_out+0x12>
				host_present = false;
   16046:	7035      	strb	r5, [r6, #0]
   16048:	e7eb      	b.n	16022 <rtt_console_out+0x3a>
   1604a:	bf00      	nop
   1604c:	2001ba80 	.word	0x2001ba80
   16050:	20014f10 	.word	0x20014f10

00016054 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   16054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   16058:	4c0e      	ldr	r4, [pc, #56]	; (16094 <onoff_start+0x40>)
{
   1605a:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1605c:	1b05      	subs	r5, r0, r4
   1605e:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   16062:	250c      	movs	r5, #12
   16064:	435d      	muls	r5, r3
   16066:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   1606a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   1606c:	4420      	add	r0, r4
   1606e:	2140      	movs	r1, #64	; 0x40
   16070:	f01a fd5d 	bl	30b2e <set_starting_state>
	if (err < 0) {
   16074:	1e01      	subs	r1, r0, #0
   16076:	db08      	blt.n	1608a <onoff_start+0x36>
	subdata->cb = cb;
   16078:	4b07      	ldr	r3, [pc, #28]	; (16098 <onoff_start+0x44>)
   1607a:	442c      	add	r4, r5
	subdata->user_data = user_data;
   1607c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   16080:	4b06      	ldr	r3, [pc, #24]	; (1609c <onoff_start+0x48>)
   16082:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   16084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   16088:	4718      	bx	r3
		notify(mgr, err);
   1608a:	4638      	mov	r0, r7
   1608c:	4633      	mov	r3, r6
}
   1608e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   16092:	4718      	bx	r3
   16094:	200160c8 	.word	0x200160c8
   16098:	00030b91 	.word	0x00030b91
   1609c:	00038b80 	.word	0x00038b80

000160a0 <get_status>:
{
   160a0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   160a2:	b2cc      	uxtb	r4, r1
   160a4:	2c01      	cmp	r4, #1
{
   160a6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   160a8:	d909      	bls.n	160be <get_status+0x1e>
   160aa:	4909      	ldr	r1, [pc, #36]	; (160d0 <get_status+0x30>)
   160ac:	4809      	ldr	r0, [pc, #36]	; (160d4 <get_status+0x34>)
   160ae:	237e      	movs	r3, #126	; 0x7e
   160b0:	4a09      	ldr	r2, [pc, #36]	; (160d8 <get_status+0x38>)
   160b2:	f019 fddd 	bl	2fc70 <printk>
   160b6:	217e      	movs	r1, #126	; 0x7e
   160b8:	4807      	ldr	r0, [pc, #28]	; (160d8 <get_status+0x38>)
   160ba:	f01a f8bf 	bl	3023c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   160be:	210c      	movs	r1, #12
   160c0:	692b      	ldr	r3, [r5, #16]
   160c2:	fb04 3401 	mla	r4, r4, r1, r3
   160c6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   160c8:	f000 0007 	and.w	r0, r0, #7
   160cc:	bd38      	pop	{r3, r4, r5, pc}
   160ce:	bf00      	nop
   160d0:	0003ae00 	.word	0x0003ae00
   160d4:	0003a56b 	.word	0x0003a56b
   160d8:	0003adc3 	.word	0x0003adc3

000160dc <stop>:
{
   160dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160de:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   160e0:	2c01      	cmp	r4, #1
{
   160e2:	4605      	mov	r5, r0
   160e4:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   160e6:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   160e8:	d90b      	bls.n	16102 <stop+0x26>
   160ea:	4919      	ldr	r1, [pc, #100]	; (16150 <stop+0x74>)
   160ec:	4819      	ldr	r0, [pc, #100]	; (16154 <stop+0x78>)
   160ee:	f240 1353 	movw	r3, #339	; 0x153
   160f2:	4a19      	ldr	r2, [pc, #100]	; (16158 <stop+0x7c>)
   160f4:	f019 fdbc 	bl	2fc70 <printk>
   160f8:	f240 1153 	movw	r1, #339	; 0x153
   160fc:	4816      	ldr	r0, [pc, #88]	; (16158 <stop+0x7c>)
   160fe:	f01a f89d 	bl	3023c <assert_post_action>
	__asm__ volatile(
   16102:	f04f 0320 	mov.w	r3, #32
   16106:	f3ef 8211 	mrs	r2, BASEPRI
   1610a:	f383 8811 	msr	BASEPRI, r3
   1610e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   16112:	230c      	movs	r3, #12
   16114:	fb03 7104 	mla	r1, r3, r4, r7
   16118:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1611a:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   1611e:	d001      	beq.n	16124 <stop+0x48>
   16120:	428e      	cmp	r6, r1
   16122:	d111      	bne.n	16148 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   16124:	2101      	movs	r1, #1
	int err = 0;
   16126:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   16128:	fb03 7304 	mla	r3, r3, r4, r7
   1612c:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   1612e:	f382 8811 	msr	BASEPRI, r2
   16132:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   16136:	b930      	cbnz	r0, 16146 <stop+0x6a>
	get_sub_config(dev, type)->stop();
   16138:	230c      	movs	r3, #12
   1613a:	6869      	ldr	r1, [r5, #4]
   1613c:	fb03 1404 	mla	r4, r3, r4, r1
   16140:	6863      	ldr	r3, [r4, #4]
   16142:	4798      	blx	r3
	return 0;
   16144:	2000      	movs	r0, #0
}
   16146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   16148:	f04f 30ff 	mov.w	r0, #4294967295
   1614c:	e7ef      	b.n	1612e <stop+0x52>
   1614e:	bf00      	nop
   16150:	0003ae00 	.word	0x0003ae00
   16154:	0003a56b 	.word	0x0003a56b
   16158:	0003adc3 	.word	0x0003adc3

0001615c <onoff_stop>:
{
   1615c:	b570      	push	{r4, r5, r6, lr}
   1615e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   16160:	4906      	ldr	r1, [pc, #24]	; (1617c <onoff_stop+0x20>)
{
   16162:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   16164:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   16166:	1149      	asrs	r1, r1, #5
   16168:	2240      	movs	r2, #64	; 0x40
   1616a:	4805      	ldr	r0, [pc, #20]	; (16180 <onoff_stop+0x24>)
   1616c:	f7ff ffb6 	bl	160dc <stop>
	notify(mgr, res);
   16170:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   16172:	4601      	mov	r1, r0
	notify(mgr, res);
   16174:	4620      	mov	r0, r4
}
   16176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1617a:	4718      	bx	r3
   1617c:	200160c8 	.word	0x200160c8
   16180:	20014c88 	.word	0x20014c88

00016184 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   16184:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16186:	2200      	movs	r2, #0
   16188:	2101      	movs	r1, #1
{
   1618a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1618c:	2005      	movs	r0, #5
   1618e:	f001 fa4d 	bl	1762c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   16192:	2005      	movs	r0, #5
   16194:	f001 fa18 	bl	175c8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   16198:	480f      	ldr	r0, [pc, #60]	; (161d8 <clk_init+0x54>)
   1619a:	f00e fca9 	bl	24af0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1619e:	4b0f      	ldr	r3, [pc, #60]	; (161dc <clk_init+0x58>)
   161a0:	4298      	cmp	r0, r3
   161a2:	d115      	bne.n	161d0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   161a4:	f00e fcc8 	bl	24b38 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   161a8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   161aa:	490d      	ldr	r1, [pc, #52]	; (161e0 <clk_init+0x5c>)
   161ac:	4630      	mov	r0, r6
   161ae:	f019 fdd5 	bl	2fd5c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   161b2:	2800      	cmp	r0, #0
   161b4:	db0b      	blt.n	161ce <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   161b6:	2501      	movs	r5, #1
   161b8:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   161ba:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   161bc:	4908      	ldr	r1, [pc, #32]	; (161e0 <clk_init+0x5c>)
   161be:	f104 0020 	add.w	r0, r4, #32
   161c2:	f019 fdcb 	bl	2fd5c <onoff_manager_init>
		if (err < 0) {
   161c6:	2800      	cmp	r0, #0
   161c8:	db01      	blt.n	161ce <clk_init+0x4a>
	}

	return 0;
   161ca:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   161cc:	6565      	str	r5, [r4, #84]	; 0x54
}
   161ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   161d0:	f06f 0004 	mvn.w	r0, #4
   161d4:	e7fb      	b.n	161ce <clk_init+0x4a>
   161d6:	bf00      	nop
   161d8:	00016219 	.word	0x00016219
   161dc:	0bad0000 	.word	0x0bad0000
   161e0:	00038b98 	.word	0x00038b98

000161e4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   161e4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   161e6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   161e8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   161ea:	434b      	muls	r3, r1
   161ec:	4808      	ldr	r0, [pc, #32]	; (16210 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   161ee:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   161f0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   161f2:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   161f4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   161f8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   161fa:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   161fc:	f01a fcb5 	bl	30b6a <set_on_state>
	if (callback) {
   16200:	b12d      	cbz	r5, 1620e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   16202:	4632      	mov	r2, r6
   16204:	462b      	mov	r3, r5
}
   16206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1620a:	4802      	ldr	r0, [pc, #8]	; (16214 <clkstarted_handle.constprop.0+0x30>)
   1620c:	4718      	bx	r3
}
   1620e:	bd70      	pop	{r4, r5, r6, pc}
   16210:	200160c8 	.word	0x200160c8
   16214:	20014c88 	.word	0x20014c88

00016218 <clock_event_handler>:
	switch (event) {
   16218:	2801      	cmp	r0, #1
{
   1621a:	b508      	push	{r3, lr}
	switch (event) {
   1621c:	d006      	beq.n	1622c <clock_event_handler+0x14>
   1621e:	2803      	cmp	r0, #3
   16220:	d008      	beq.n	16234 <clock_event_handler+0x1c>
   16222:	b9a8      	cbnz	r0, 16250 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   16224:	4b10      	ldr	r3, [pc, #64]	; (16268 <clock_event_handler+0x50>)
   16226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16228:	075b      	lsls	r3, r3, #29
   1622a:	d11b      	bne.n	16264 <clock_event_handler+0x4c>
}
   1622c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   16230:	f7ff bfd8 	b.w	161e4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   16234:	490d      	ldr	r1, [pc, #52]	; (1626c <clock_event_handler+0x54>)
   16236:	f240 2366 	movw	r3, #614	; 0x266
   1623a:	4a0d      	ldr	r2, [pc, #52]	; (16270 <clock_event_handler+0x58>)
   1623c:	480d      	ldr	r0, [pc, #52]	; (16274 <clock_event_handler+0x5c>)
   1623e:	f019 fd17 	bl	2fc70 <printk>
   16242:	f240 2166 	movw	r1, #614	; 0x266
}
   16246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1624a:	4809      	ldr	r0, [pc, #36]	; (16270 <clock_event_handler+0x58>)
   1624c:	f019 bff6 	b.w	3023c <assert_post_action>
   16250:	4906      	ldr	r1, [pc, #24]	; (1626c <clock_event_handler+0x54>)
   16252:	f240 236a 	movw	r3, #618	; 0x26a
   16256:	4a06      	ldr	r2, [pc, #24]	; (16270 <clock_event_handler+0x58>)
   16258:	4806      	ldr	r0, [pc, #24]	; (16274 <clock_event_handler+0x5c>)
   1625a:	f019 fd09 	bl	2fc70 <printk>
   1625e:	f240 216a 	movw	r1, #618	; 0x26a
   16262:	e7f0      	b.n	16246 <clock_event_handler+0x2e>
}
   16264:	bd08      	pop	{r3, pc}
   16266:	bf00      	nop
   16268:	200160c8 	.word	0x200160c8
   1626c:	00040e81 	.word	0x00040e81
   16270:	0003adc3 	.word	0x0003adc3
   16274:	0003a56b 	.word	0x0003a56b

00016278 <generic_hfclk_start>:
{
   16278:	b508      	push	{r3, lr}
	__asm__ volatile(
   1627a:	f04f 0320 	mov.w	r3, #32
   1627e:	f3ef 8111 	mrs	r1, BASEPRI
   16282:	f383 8811 	msr	BASEPRI, r3
   16286:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1628a:	4a11      	ldr	r2, [pc, #68]	; (162d0 <generic_hfclk_start+0x58>)
   1628c:	6813      	ldr	r3, [r2, #0]
   1628e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   16292:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   16296:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   16298:	d00b      	beq.n	162b2 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1629a:	4a0e      	ldr	r2, [pc, #56]	; (162d4 <generic_hfclk_start+0x5c>)
   1629c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   162a0:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   162a4:	f013 0301 	ands.w	r3, r3, #1
   162a8:	d003      	beq.n	162b2 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   162aa:	480b      	ldr	r0, [pc, #44]	; (162d8 <generic_hfclk_start+0x60>)
   162ac:	f01a fc5d 	bl	30b6a <set_on_state>
			already_started = true;
   162b0:	2301      	movs	r3, #1
	__asm__ volatile(
   162b2:	f381 8811 	msr	BASEPRI, r1
   162b6:	f3bf 8f6f 	isb	sy
	if (already_started) {
   162ba:	b123      	cbz	r3, 162c6 <generic_hfclk_start+0x4e>
}
   162bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   162c0:	2000      	movs	r0, #0
   162c2:	f7ff bf8f 	b.w	161e4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   162c6:	2001      	movs	r0, #1
}
   162c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   162cc:	f00e bc54 	b.w	24b78 <nrfx_clock_start>
   162d0:	20016120 	.word	0x20016120
   162d4:	40005000 	.word	0x40005000
   162d8:	20016110 	.word	0x20016110

000162dc <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   162dc:	4b07      	ldr	r3, [pc, #28]	; (162fc <generic_hfclk_stop+0x20>)
   162de:	e8d3 2fef 	ldaex	r2, [r3]
   162e2:	f022 0102 	bic.w	r1, r2, #2
   162e6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   162ea:	2800      	cmp	r0, #0
   162ec:	d1f7      	bne.n	162de <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   162ee:	07d3      	lsls	r3, r2, #31
   162f0:	d402      	bmi.n	162f8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   162f2:	2001      	movs	r0, #1
   162f4:	f00e bc96 	b.w	24c24 <nrfx_clock_stop>
}
   162f8:	4770      	bx	lr
   162fa:	bf00      	nop
   162fc:	20016120 	.word	0x20016120

00016300 <api_blocking_start>:
{
   16300:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16302:	2200      	movs	r2, #0
   16304:	2301      	movs	r3, #1
   16306:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1630a:	ab04      	add	r3, sp, #16
   1630c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16310:	4a09      	ldr	r2, [pc, #36]	; (16338 <api_blocking_start+0x38>)
   16312:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16314:	f8cd d000 	str.w	sp, [sp]
   16318:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1631c:	f01a fc4a 	bl	30bb4 <api_start>
	if (err < 0) {
   16320:	2800      	cmp	r0, #0
   16322:	db05      	blt.n	16330 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   16324:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   16328:	2300      	movs	r3, #0
   1632a:	4668      	mov	r0, sp
   1632c:	f014 ffac 	bl	2b288 <z_impl_k_sem_take>
}
   16330:	b007      	add	sp, #28
   16332:	f85d fb04 	ldr.w	pc, [sp], #4
   16336:	bf00      	nop
   16338:	00030baf 	.word	0x00030baf

0001633c <z_nrf_clock_control_get_onoff>:
}
   1633c:	4b02      	ldr	r3, [pc, #8]	; (16348 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1633e:	b2c0      	uxtb	r0, r0
}
   16340:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   16344:	4770      	bx	lr
   16346:	bf00      	nop
   16348:	200160c8 	.word	0x200160c8

0001634c <z_nrf_clock_control_lf_on>:
{
   1634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16350:	2201      	movs	r2, #1
   16352:	4606      	mov	r6, r0
   16354:	4945      	ldr	r1, [pc, #276]	; (1646c <z_nrf_clock_control_lf_on+0x120>)
   16356:	e8d1 3fef 	ldaex	r3, [r1]
   1635a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1635e:	2800      	cmp	r0, #0
   16360:	d1f9      	bne.n	16356 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   16362:	b9a3      	cbnz	r3, 1638e <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   16364:	4942      	ldr	r1, [pc, #264]	; (16470 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   16366:	4843      	ldr	r0, [pc, #268]	; (16474 <z_nrf_clock_control_lf_on+0x128>)
   16368:	604b      	str	r3, [r1, #4]
   1636a:	60cb      	str	r3, [r1, #12]
   1636c:	608a      	str	r2, [r1, #8]
   1636e:	f7fd fc0b 	bl	13b88 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   16372:	2800      	cmp	r0, #0
   16374:	da0b      	bge.n	1638e <z_nrf_clock_control_lf_on+0x42>
   16376:	4940      	ldr	r1, [pc, #256]	; (16478 <z_nrf_clock_control_lf_on+0x12c>)
   16378:	4840      	ldr	r0, [pc, #256]	; (1647c <z_nrf_clock_control_lf_on+0x130>)
   1637a:	f240 2326 	movw	r3, #550	; 0x226
   1637e:	4a40      	ldr	r2, [pc, #256]	; (16480 <z_nrf_clock_control_lf_on+0x134>)
   16380:	f019 fc76 	bl	2fc70 <printk>
   16384:	f240 2126 	movw	r1, #550	; 0x226
   16388:	483d      	ldr	r0, [pc, #244]	; (16480 <z_nrf_clock_control_lf_on+0x134>)
   1638a:	f019 ff57 	bl	3023c <assert_post_action>
	switch (start_mode) {
   1638e:	b38e      	cbz	r6, 163f4 <z_nrf_clock_control_lf_on+0xa8>
   16390:	1e73      	subs	r3, r6, #1
   16392:	2b01      	cmp	r3, #1
   16394:	d855      	bhi.n	16442 <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   16396:	2e01      	cmp	r6, #1
   16398:	d106      	bne.n	163a8 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1639a:	4b3a      	ldr	r3, [pc, #232]	; (16484 <z_nrf_clock_control_lf_on+0x138>)
   1639c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   163a0:	f003 0303 	and.w	r3, r3, #3
   163a4:	2b02      	cmp	r3, #2
   163a6:	d025      	beq.n	163f4 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   163a8:	f021 f831 	bl	3740e <k_is_in_isr>
   163ac:	4604      	mov	r4, r0
   163ae:	b918      	cbnz	r0, 163b8 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   163b0:	4b35      	ldr	r3, [pc, #212]	; (16488 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   163b2:	781b      	ldrb	r3, [r3, #0]
   163b4:	2b00      	cmp	r3, #0
   163b6:	d152      	bne.n	1645e <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   163b8:	f04f 0320 	mov.w	r3, #32
   163bc:	f3ef 8711 	mrs	r7, BASEPRI
   163c0:	f383 8811 	msr	BASEPRI, r3
   163c4:	f3bf 8f6f 	isb	sy
   163c8:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   163ca:	4d2e      	ldr	r5, [pc, #184]	; (16484 <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   163cc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 16498 <z_nrf_clock_control_lf_on+0x14c>
   163d0:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   163d2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   163d6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   163da:	03d2      	lsls	r2, r2, #15
   163dc:	d50c      	bpl.n	163f8 <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   163de:	f003 0303 	and.w	r3, r3, #3
   163e2:	2b02      	cmp	r3, #2
   163e4:	d001      	beq.n	163ea <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   163e6:	2e01      	cmp	r6, #1
   163e8:	d106      	bne.n	163f8 <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   163ea:	b334      	cbz	r4, 1643a <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   163ec:	f387 8811 	msr	BASEPRI, r7
   163f0:	f3bf 8f6f 	isb	sy
}
   163f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   163f8:	b1d4      	cbz	r4, 16430 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   163fa:	4638      	mov	r0, r7
   163fc:	f001 fa30 	bl	17860 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   16400:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   16404:	b2db      	uxtb	r3, r3
   16406:	2b01      	cmp	r3, #1
   16408:	d1e3      	bne.n	163d2 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1640a:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   1640e:	2a00      	cmp	r2, #0
   16410:	d0df      	beq.n	163d2 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16412:	2200      	movs	r2, #0
   16414:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   16418:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1641c:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1641e:	2120      	movs	r1, #32
   16420:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   16424:	4a19      	ldr	r2, [pc, #100]	; (1648c <z_nrf_clock_control_lf_on+0x140>)
   16426:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1642a:	4a19      	ldr	r2, [pc, #100]	; (16490 <z_nrf_clock_control_lf_on+0x144>)
   1642c:	6013      	str	r3, [r2, #0]
}
   1642e:	e7d0      	b.n	163d2 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   16430:	2100      	movs	r1, #0
   16432:	2021      	movs	r0, #33	; 0x21
   16434:	f016 fda4 	bl	2cf80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16438:	e7e2      	b.n	16400 <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   1643a:	2302      	movs	r3, #2
   1643c:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   16440:	e7d8      	b.n	163f4 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   16442:	f44f 730e 	mov.w	r3, #568	; 0x238
   16446:	4913      	ldr	r1, [pc, #76]	; (16494 <z_nrf_clock_control_lf_on+0x148>)
   16448:	480c      	ldr	r0, [pc, #48]	; (1647c <z_nrf_clock_control_lf_on+0x130>)
   1644a:	4a0d      	ldr	r2, [pc, #52]	; (16480 <z_nrf_clock_control_lf_on+0x134>)
   1644c:	f019 fc10 	bl	2fc70 <printk>
}
   16450:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   16454:	f44f 710e 	mov.w	r1, #568	; 0x238
   16458:	4809      	ldr	r0, [pc, #36]	; (16480 <z_nrf_clock_control_lf_on+0x134>)
   1645a:	f019 beef 	b.w	3023c <assert_post_action>
    p_reg->INTENCLR = mask;
   1645e:	2202      	movs	r2, #2
   16460:	4b08      	ldr	r3, [pc, #32]	; (16484 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   16462:	4607      	mov	r7, r0
   16464:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   16468:	e7af      	b.n	163ca <z_nrf_clock_control_lf_on+0x7e>
   1646a:	bf00      	nop
   1646c:	20016124 	.word	0x20016124
   16470:	200160b8 	.word	0x200160b8
   16474:	200160e8 	.word	0x200160e8
   16478:	0003ae24 	.word	0x0003ae24
   1647c:	0003a56b 	.word	0x0003a56b
   16480:	0003adc3 	.word	0x0003adc3
   16484:	40005000 	.word	0x40005000
   16488:	2001dcc7 	.word	0x2001dcc7
   1648c:	e000e100 	.word	0xe000e100
   16490:	40005008 	.word	0x40005008
   16494:	00040e81 	.word	0x00040e81
   16498:	40005104 	.word	0x40005104

0001649c <reset_rx>:
}

static void reset_rx(void)
{
	rx.type = H4_NONE;
	rx.remaining = 0U;
   1649c:	2200      	movs	r2, #0
   1649e:	4b02      	ldr	r3, [pc, #8]	; (164a8 <reset_rx+0xc>)
   164a0:	841a      	strh	r2, [r3, #32]
	rx.have_hdr = false;
   164a2:	625a      	str	r2, [r3, #36]	; 0x24
	rx.hdr_len = 0U;
	rx.discardable = false;
}
   164a4:	4770      	bx	lr
   164a6:	bf00      	nop
   164a8:	20014724 	.word	0x20014724

000164ac <h4_send>:
		}
	}
}

static int h4_send(struct net_buf *buf)
{
   164ac:	4601      	mov	r1, r0
   164ae:	b508      	push	{r3, lr}
	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	net_buf_put(&tx.fifo, buf);
   164b0:	4805      	ldr	r0, [pc, #20]	; (164c8 <h4_send+0x1c>)
   164b2:	f007 fdc5 	bl	1e040 <net_buf_put>
	uart_irq_tx_enable(h4_dev);
   164b6:	4b05      	ldr	r3, [pc, #20]	; (164cc <h4_send+0x20>)
   164b8:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_tx_enable != NULL) {
   164ba:	6883      	ldr	r3, [r0, #8]
   164bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   164be:	b103      	cbz	r3, 164c2 <h4_send+0x16>
		api->irq_tx_enable(dev);
   164c0:	4798      	blx	r3

	return 0;
}
   164c2:	2000      	movs	r0, #0
   164c4:	bd08      	pop	{r3, pc}
   164c6:	bf00      	nop
   164c8:	20014758 	.word	0x20014758
   164cc:	20016128 	.word	0x20016128

000164d0 <get_rx>:
{
   164d0:	4602      	mov	r2, r0
	switch (rx.type) {
   164d2:	4809      	ldr	r0, [pc, #36]	; (164f8 <get_rx+0x28>)
{
   164d4:	460b      	mov	r3, r1
	switch (rx.type) {
   164d6:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
   164da:	2902      	cmp	r1, #2
   164dc:	d007      	beq.n	164ee <get_rx+0x1e>
   164de:	2904      	cmp	r1, #4
   164e0:	d108      	bne.n	164f4 <get_rx+0x24>
		return bt_buf_get_evt(rx.evt.evt, rx.discardable, timeout);
   164e2:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
   164e6:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   164ea:	f002 b961 	b.w	187b0 <bt_buf_get_evt>
		return bt_buf_get_rx(BT_BUF_ACL_IN, timeout);
   164ee:	2003      	movs	r0, #3
   164f0:	f002 b904 	b.w	186fc <bt_buf_get_rx>
}
   164f4:	2000      	movs	r0, #0
   164f6:	4770      	bx	lr
   164f8:	20014724 	.word	0x20014724

000164fc <copy_hdr>:
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
   164fc:	4903      	ldr	r1, [pc, #12]	; (1650c <copy_hdr+0x10>)
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add_mem(struct net_buf *buf, const void *mem,
				    size_t len)
{
	return net_buf_simple_add_mem(&buf->b, mem, len);
   164fe:	3008      	adds	r0, #8
   16500:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   16504:	3128      	adds	r1, #40	; 0x28
   16506:	f01d b905 	b.w	33714 <net_buf_simple_add_mem>
   1650a:	bf00      	nop
   1650c:	20014724 	.word	0x20014724

00016510 <bt_uart_init>:
	.open		= h4_open,
	.send		= h4_send,
};

static int bt_uart_init(const struct device *unused)
{
   16510:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   16512:	4807      	ldr	r0, [pc, #28]	; (16530 <bt_uart_init+0x20>)
   16514:	f013 fcb0 	bl	29e78 <z_impl_device_get_binding>
	ARG_UNUSED(unused);

	h4_dev = device_get_binding(CONFIG_BT_UART_ON_DEV_NAME);
   16518:	4b06      	ldr	r3, [pc, #24]	; (16534 <bt_uart_init+0x24>)
   1651a:	6018      	str	r0, [r3, #0]
	if (!h4_dev) {
   1651c:	b120      	cbz	r0, 16528 <bt_uart_init+0x18>
		return -EINVAL;
	}

	bt_hci_driver_register(&drv);
   1651e:	4806      	ldr	r0, [pc, #24]	; (16538 <bt_uart_init+0x28>)
   16520:	f003 fcbc 	bl	19e9c <bt_hci_driver_register>

	return 0;
   16524:	2000      	movs	r0, #0
}
   16526:	bd08      	pop	{r3, pc}
		return -EINVAL;
   16528:	f06f 0015 	mvn.w	r0, #21
   1652c:	e7fb      	b.n	16526 <bt_uart_init+0x16>
   1652e:	bf00      	nop
   16530:	0003ae4d 	.word	0x0003ae4d
   16534:	20016128 	.word	0x20016128
   16538:	00038ba4 	.word	0x00038ba4

0001653c <rx_thread>:
{
   1653c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		uart_irq_rx_enable(h4_dev);
   16540:	4e24      	ldr	r6, [pc, #144]	; (165d4 <rx_thread+0x98>)
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   16542:	4d25      	ldr	r5, [pc, #148]	; (165d8 <rx_thread+0x9c>)
   16544:	4637      	mov	r7, r6
   16546:	4b25      	ldr	r3, [pc, #148]	; (165dc <rx_thread+0xa0>)
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   16548:	f8df 809c 	ldr.w	r8, [pc, #156]	; 165e8 <rx_thread+0xac>
   1654c:	1aed      	subs	r5, r5, r3
   1654e:	08ed      	lsrs	r5, r5, #3
		if (rx.have_hdr && !rx.buf) {
   16550:	4c23      	ldr	r4, [pc, #140]	; (165e0 <rx_thread+0xa4>)
   16552:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   16556:	b1cb      	cbz	r3, 1658c <rx_thread+0x50>
   16558:	6823      	ldr	r3, [r4, #0]
   1655a:	b9bb      	cbnz	r3, 1658c <rx_thread+0x50>
			rx.buf = get_rx(K_FOREVER);
   1655c:	f04f 31ff 	mov.w	r1, #4294967295
   16560:	f04f 30ff 	mov.w	r0, #4294967295
   16564:	f7ff ffb4 	bl	164d0 <get_rx>
   16568:	6020      	str	r0, [r4, #0]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1656a:	3008      	adds	r0, #8
			if (rx.remaining > net_buf_tailroom(rx.buf)) {
   1656c:	f8b4 9020 	ldrh.w	r9, [r4, #32]
   16570:	f01d f8c8 	bl	33704 <net_buf_simple_tailroom>
   16574:	4581      	cmp	r9, r0
   16576:	d928      	bls.n	165ca <rx_thread+0x8e>
				BT_ERR("Not enough space in buffer");
   16578:	01a9      	lsls	r1, r5, #6
   1657a:	481a      	ldr	r0, [pc, #104]	; (165e4 <rx_thread+0xa8>)
   1657c:	f041 0101 	orr.w	r1, r1, #1
   16580:	f019 feaa 	bl	302d8 <log_0>
				rx.discard = rx.remaining;
   16584:	8c23      	ldrh	r3, [r4, #32]
   16586:	8463      	strh	r3, [r4, #34]	; 0x22
				reset_rx();
   16588:	f7ff ff88 	bl	1649c <reset_rx>
		uart_irq_rx_enable(h4_dev);
   1658c:	6830      	ldr	r0, [r6, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   1658e:	f01a fb36 	bl	30bfe <z_impl_uart_irq_rx_enable>
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   16592:	f04f 32ff 	mov.w	r2, #4294967295
   16596:	f04f 33ff 	mov.w	r3, #4294967295
   1659a:	4640      	mov	r0, r8
   1659c:	f007 fcf2 	bl	1df84 <net_buf_get>
   165a0:	4604      	mov	r4, r0
			uart_irq_rx_enable(h4_dev);
   165a2:	6838      	ldr	r0, [r7, #0]
   165a4:	f01a fb2b 	bl	30bfe <z_impl_uart_irq_rx_enable>
			bt_recv(buf);
   165a8:	4620      	mov	r0, r4
   165aa:	f003 fbb5 	bl	19d18 <bt_recv>
	z_impl_k_yield();
   165ae:	f016 fb97 	bl	2cce0 <z_impl_k_yield>
			uart_irq_rx_disable(h4_dev);
   165b2:	6838      	ldr	r0, [r7, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
   165b4:	f01a fb28 	bl	30c08 <z_impl_uart_irq_rx_disable>
			buf = net_buf_get(&rx.fifo, K_NO_WAIT);
   165b8:	2200      	movs	r2, #0
   165ba:	2300      	movs	r3, #0
   165bc:	4640      	mov	r0, r8
   165be:	f007 fce1 	bl	1df84 <net_buf_get>
		} while (buf);
   165c2:	4604      	mov	r4, r0
   165c4:	2800      	cmp	r0, #0
   165c6:	d1ec      	bne.n	165a2 <rx_thread+0x66>
   165c8:	e7c2      	b.n	16550 <rx_thread+0x14>
				copy_hdr(rx.buf);
   165ca:	6820      	ldr	r0, [r4, #0]
   165cc:	f7ff ff96 	bl	164fc <copy_hdr>
   165d0:	e7dc      	b.n	1658c <rx_thread+0x50>
   165d2:	bf00      	nop
   165d4:	20016128 	.word	0x20016128
   165d8:	000387f8 	.word	0x000387f8
   165dc:	000387c0 	.word	0x000387c0
   165e0:	20014724 	.word	0x20014724
   165e4:	0003ae54 	.word	0x0003ae54
   165e8:	20014728 	.word	0x20014728

000165ec <bt_uart_isr>:
{
   165ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   165f0:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 16898 <bt_uart_isr+0x2ac>
   165f4:	4f9a      	ldr	r7, [pc, #616]	; (16860 <bt_uart_isr+0x274>)
   165f6:	4646      	mov	r6, r8
   165f8:	4b9a      	ldr	r3, [pc, #616]	; (16864 <bt_uart_isr+0x278>)
	if (!tx.buf) {
   165fa:	4d9b      	ldr	r5, [pc, #620]	; (16868 <bt_uart_isr+0x27c>)
   165fc:	1aff      	subs	r7, r7, r3
{
   165fe:	b08b      	sub	sp, #44	; 0x2c
   16600:	08ff      	lsrs	r7, r7, #3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   16602:	f8d8 0000 	ldr.w	r0, [r8]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   16606:	6883      	ldr	r3, [r0, #8]
   16608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1660a:	2b00      	cmp	r3, #0
   1660c:	f040 819e 	bne.w	1694c <bt_uart_isr+0x360>
   16610:	6830      	ldr	r0, [r6, #0]
	if (api->irq_is_pending == NULL) {
   16612:	6883      	ldr	r3, [r0, #8]
   16614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   16616:	2b00      	cmp	r3, #0
   16618:	f040 819f 	bne.w	1695a <bt_uart_isr+0x36e>
		if (uart_irq_tx_ready(h4_dev)) {
   1661c:	6830      	ldr	r0, [r6, #0]
	if (api->irq_tx_ready != NULL) {
   1661e:	6883      	ldr	r3, [r0, #8]
   16620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16622:	b353      	cbz	r3, 1667a <bt_uart_isr+0x8e>
		return api->irq_tx_ready(dev);
   16624:	4798      	blx	r3
   16626:	b340      	cbz	r0, 1667a <bt_uart_isr+0x8e>
	if (!tx.buf) {
   16628:	686b      	ldr	r3, [r5, #4]
   1662a:	b983      	cbnz	r3, 1664e <bt_uart_isr+0x62>
		tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   1662c:	2200      	movs	r2, #0
   1662e:	2300      	movs	r3, #0
   16630:	488e      	ldr	r0, [pc, #568]	; (1686c <bt_uart_isr+0x280>)
   16632:	f007 fca7 	bl	1df84 <net_buf_get>
   16636:	6068      	str	r0, [r5, #4]
		if (!tx.buf) {
   16638:	b948      	cbnz	r0, 1664e <bt_uart_isr+0x62>
			BT_ERR("TX interrupt but no pending buffer!");
   1663a:	01b9      	lsls	r1, r7, #6
   1663c:	488c      	ldr	r0, [pc, #560]	; (16870 <bt_uart_isr+0x284>)
   1663e:	f041 0101 	orr.w	r1, r1, #1
   16642:	f019 fe49 	bl	302d8 <log_0>
		uart_irq_tx_disable(h4_dev);
   16646:	6830      	ldr	r0, [r6, #0]
	z_impl_uart_irq_tx_disable(dev);
   16648:	f01a fad4 	bl	30bf4 <z_impl_uart_irq_tx_disable>
}
   1664c:	e015      	b.n	1667a <bt_uart_isr+0x8e>
	if (!tx.type) {
   1664e:	782b      	ldrb	r3, [r5, #0]
   16650:	2b00      	cmp	r3, #0
   16652:	d142      	bne.n	166da <bt_uart_isr+0xee>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16654:	686b      	ldr	r3, [r5, #4]
   16656:	7d1b      	ldrb	r3, [r3, #20]
		switch (bt_buf_get_type(tx.buf)) {
   16658:	b323      	cbz	r3, 166a4 <bt_uart_isr+0xb8>
   1665a:	2b02      	cmp	r3, #2
   1665c:	d124      	bne.n	166a8 <bt_uart_isr+0xbc>
		bytes = uart_fifo_fill(h4_dev, &tx.type, 1);
   1665e:	6830      	ldr	r0, [r6, #0]
			tx.type = H4_CMD;
   16660:	702b      	strb	r3, [r5, #0]
	if (api->fifo_fill != NULL) {
   16662:	6883      	ldr	r3, [r0, #8]
   16664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16666:	2b00      	cmp	r3, #0
   16668:	d132      	bne.n	166d0 <bt_uart_isr+0xe4>
			BT_WARN("Unable to send H:4 type");
   1666a:	01b9      	lsls	r1, r7, #6
   1666c:	4881      	ldr	r0, [pc, #516]	; (16874 <bt_uart_isr+0x288>)
   1666e:	f041 0102 	orr.w	r1, r1, #2
   16672:	f019 fe31 	bl	302d8 <log_0>
			tx.type = H4_NONE;
   16676:	2300      	movs	r3, #0
   16678:	702b      	strb	r3, [r5, #0]
		if (uart_irq_rx_ready(h4_dev)) {
   1667a:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
   1667c:	6883      	ldr	r3, [r0, #8]
   1667e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   16680:	2b00      	cmp	r3, #0
   16682:	d13e      	bne.n	16702 <bt_uart_isr+0x116>
	if (rx.discard) {
   16684:	4c7c      	ldr	r4, [pc, #496]	; (16878 <bt_uart_isr+0x28c>)
   16686:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   16688:	4621      	mov	r1, r4
   1668a:	2a00      	cmp	r2, #0
   1668c:	d03e      	beq.n	1670c <bt_uart_isr+0x120>
	return uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
   1668e:	2a21      	cmp	r2, #33	; 0x21
   16690:	bf28      	it	cs
   16692:	2221      	movcs	r2, #33	; 0x21
   16694:	6830      	ldr	r0, [r6, #0]
   16696:	a901      	add	r1, sp, #4
   16698:	f01a faa6 	bl	30be8 <uart_fifo_read>
		rx.discard -= h4_discard(h4_dev, rx.discard);
   1669c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1669e:	1a1b      	subs	r3, r3, r0
   166a0:	8463      	strh	r3, [r4, #34]	; 0x22
		return;
   166a2:	e7ae      	b.n	16602 <bt_uart_isr+0x16>
			tx.type = H4_CMD;
   166a4:	2301      	movs	r3, #1
   166a6:	e7da      	b.n	1665e <bt_uart_isr+0x72>
			BT_ERR("Unknown buffer type");
   166a8:	01b9      	lsls	r1, r7, #6
   166aa:	4874      	ldr	r0, [pc, #464]	; (1687c <bt_uart_isr+0x290>)
   166ac:	f041 0101 	orr.w	r1, r1, #1
   166b0:	f019 fe12 	bl	302d8 <log_0>
	tx.type = H4_NONE;
   166b4:	2300      	movs	r3, #0
	net_buf_unref(tx.buf);
   166b6:	6868      	ldr	r0, [r5, #4]
	tx.type = H4_NONE;
   166b8:	702b      	strb	r3, [r5, #0]
	net_buf_unref(tx.buf);
   166ba:	f007 fcf5 	bl	1e0a8 <net_buf_unref>
	tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   166be:	2200      	movs	r2, #0
   166c0:	2300      	movs	r3, #0
   166c2:	486a      	ldr	r0, [pc, #424]	; (1686c <bt_uart_isr+0x280>)
   166c4:	f007 fc5e 	bl	1df84 <net_buf_get>
   166c8:	6068      	str	r0, [r5, #4]
	if (!tx.buf) {
   166ca:	2800      	cmp	r0, #0
   166cc:	d1d5      	bne.n	1667a <bt_uart_isr+0x8e>
   166ce:	e7ba      	b.n	16646 <bt_uart_isr+0x5a>
		return api->fifo_fill(dev, tx_data, size);
   166d0:	2201      	movs	r2, #1
   166d2:	4629      	mov	r1, r5
   166d4:	4798      	blx	r3
		if (bytes != 1) {
   166d6:	2801      	cmp	r0, #1
   166d8:	d1c7      	bne.n	1666a <bt_uart_isr+0x7e>
	bytes = uart_fifo_fill(h4_dev, tx.buf->data, tx.buf->len);
   166da:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_fill != NULL) {
   166dc:	6883      	ldr	r3, [r0, #8]
   166de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   166e0:	b16b      	cbz	r3, 166fe <bt_uart_isr+0x112>
   166e2:	6869      	ldr	r1, [r5, #4]
		return api->fifo_fill(dev, tx_data, size);
   166e4:	898a      	ldrh	r2, [r1, #12]
   166e6:	6889      	ldr	r1, [r1, #8]
   166e8:	4798      	blx	r3
   166ea:	4601      	mov	r1, r0
	return net_buf_simple_pull(&buf->b, len);
   166ec:	6868      	ldr	r0, [r5, #4]
   166ee:	3008      	adds	r0, #8
   166f0:	f007 fdc8 	bl	1e284 <net_buf_simple_pull>
	if (tx.buf->len) {
   166f4:	686b      	ldr	r3, [r5, #4]
   166f6:	899b      	ldrh	r3, [r3, #12]
   166f8:	2b00      	cmp	r3, #0
   166fa:	d0db      	beq.n	166b4 <bt_uart_isr+0xc8>
   166fc:	e7bd      	b.n	1667a <bt_uart_isr+0x8e>
	return 0;
   166fe:	4619      	mov	r1, r3
   16700:	e7f4      	b.n	166ec <bt_uart_isr+0x100>
	return api->irq_rx_ready(dev);
   16702:	4798      	blx	r3
		if (uart_irq_rx_ready(h4_dev)) {
   16704:	2800      	cmp	r0, #0
   16706:	f43f af7c 	beq.w	16602 <bt_uart_isr+0x16>
   1670a:	e7bb      	b.n	16684 <bt_uart_isr+0x98>
	if (rx.have_hdr) {
   1670c:	f894 9024 	ldrb.w	r9, [r4, #36]	; 0x24
   16710:	f1b9 0f00 	cmp.w	r9, #0
   16714:	d078      	beq.n	16808 <bt_uart_isr+0x21c>
	if (!rx.buf) {
   16716:	6823      	ldr	r3, [r4, #0]
   16718:	bb7b      	cbnz	r3, 1677a <bt_uart_isr+0x18e>
		rx.buf = get_rx(K_NO_WAIT);
   1671a:	2000      	movs	r0, #0
   1671c:	2100      	movs	r1, #0
   1671e:	f7ff fed7 	bl	164d0 <get_rx>
   16722:	6020      	str	r0, [r4, #0]
		if (!rx.buf) {
   16724:	b9c0      	cbnz	r0, 16758 <bt_uart_isr+0x16c>
			if (rx.discardable) {
   16726:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1672a:	01ba      	lsls	r2, r7, #6
   1672c:	b15b      	cbz	r3, 16746 <bt_uart_isr+0x15a>
				BT_WARN("Discarding event 0x%02x", rx.evt.evt);
   1672e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   16732:	4853      	ldr	r0, [pc, #332]	; (16880 <bt_uart_isr+0x294>)
   16734:	f042 0202 	orr.w	r2, r2, #2
   16738:	f019 fddb 	bl	302f2 <log_1>
			rx.discard = rx.remaining;
   1673c:	8c23      	ldrh	r3, [r4, #32]
   1673e:	8463      	strh	r3, [r4, #34]	; 0x22
			reset_rx();
   16740:	f7ff feac 	bl	1649c <reset_rx>
   16744:	e75d      	b.n	16602 <bt_uart_isr+0x16>
			BT_WARN("Failed to allocate, deferring to rx_thread");
   16746:	484f      	ldr	r0, [pc, #316]	; (16884 <bt_uart_isr+0x298>)
   16748:	f042 0102 	orr.w	r1, r2, #2
   1674c:	f019 fdc4 	bl	302d8 <log_0>
			uart_irq_rx_disable(h4_dev);
   16750:	6830      	ldr	r0, [r6, #0]
	z_impl_uart_irq_rx_disable(dev);
   16752:	f01a fa59 	bl	30c08 <z_impl_uart_irq_rx_disable>
}
   16756:	e754      	b.n	16602 <bt_uart_isr+0x16>
	return net_buf_simple_tailroom(&buf->b);
   16758:	3008      	adds	r0, #8
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
   1675a:	f8b4 9020 	ldrh.w	r9, [r4, #32]
   1675e:	f01c ffd1 	bl	33704 <net_buf_simple_tailroom>
   16762:	4581      	cmp	r9, r0
   16764:	d906      	bls.n	16774 <bt_uart_isr+0x188>
			BT_ERR("Not enough space in buffer");
   16766:	01b9      	lsls	r1, r7, #6
   16768:	4847      	ldr	r0, [pc, #284]	; (16888 <bt_uart_isr+0x29c>)
   1676a:	f041 0101 	orr.w	r1, r1, #1
   1676e:	f019 fdb3 	bl	302d8 <log_0>
   16772:	e7e3      	b.n	1673c <bt_uart_isr+0x150>
		copy_hdr(rx.buf);
   16774:	6820      	ldr	r0, [r4, #0]
   16776:	f7ff fec1 	bl	164fc <copy_hdr>
	read = uart_fifo_read(h4_dev, net_buf_tail(rx.buf), rx.remaining);
   1677a:	6823      	ldr	r3, [r4, #0]
   1677c:	8c22      	ldrh	r2, [r4, #32]
	return buf->data + buf->len;
   1677e:	8999      	ldrh	r1, [r3, #12]
   16780:	689b      	ldr	r3, [r3, #8]
   16782:	6830      	ldr	r0, [r6, #0]
   16784:	4419      	add	r1, r3
   16786:	f01a fa2f 	bl	30be8 <uart_fifo_read>
   1678a:	4681      	mov	r9, r0
	return net_buf_simple_add(&buf->b, len);
   1678c:	6820      	ldr	r0, [r4, #0]
   1678e:	4649      	mov	r1, r9
   16790:	3008      	adds	r0, #8
   16792:	f007 fdb9 	bl	1e308 <net_buf_simple_add>
	rx.remaining -= read;
   16796:	8c23      	ldrh	r3, [r4, #32]
   16798:	eba3 0009 	sub.w	r0, r3, r9
   1679c:	b280      	uxth	r0, r0
   1679e:	8420      	strh	r0, [r4, #32]
	if (rx.remaining) {
   167a0:	2800      	cmp	r0, #0
   167a2:	f47f af2e 	bne.w	16602 <bt_uart_isr+0x16>
	if (rx.type == H4_EVT) {
   167a6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	buf = rx.buf;
   167aa:	f8d4 9000 	ldr.w	r9, [r4]
	if (rx.type == H4_EVT) {
   167ae:	2b04      	cmp	r3, #4
	rx.buf = NULL;
   167b0:	6020      	str	r0, [r4, #0]
	if (rx.type == H4_EVT) {
   167b2:	d124      	bne.n	167fe <bt_uart_isr+0x212>
		evt_flags = bt_hci_evt_get_flags(rx.evt.evt);
   167b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   167b8:	2b0f      	cmp	r3, #15
   167ba:	d817      	bhi.n	167ec <bt_uart_isr+0x200>
   167bc:	2b0d      	cmp	r3, #13
   167be:	d81c      	bhi.n	167fa <bt_uart_isr+0x20e>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   167c0:	2b05      	cmp	r3, #5
   167c2:	bf14      	ite	ne
   167c4:	2402      	movne	r4, #2
   167c6:	2403      	moveq	r4, #3
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   167c8:	2301      	movs	r3, #1
   167ca:	f889 3014 	strb.w	r3, [r9, #20]
	reset_rx();
   167ce:	f7ff fe65 	bl	1649c <reset_rx>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   167d2:	07e2      	lsls	r2, r4, #31
   167d4:	d502      	bpl.n	167dc <bt_uart_isr+0x1f0>
		bt_recv_prio(buf);
   167d6:	4648      	mov	r0, r9
   167d8:	f003 fb42 	bl	19e60 <bt_recv_prio>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   167dc:	07a3      	lsls	r3, r4, #30
   167de:	f57f af10 	bpl.w	16602 <bt_uart_isr+0x16>
		net_buf_put(&rx.fifo, buf);
   167e2:	4649      	mov	r1, r9
   167e4:	4829      	ldr	r0, [pc, #164]	; (1688c <bt_uart_isr+0x2a0>)
   167e6:	f007 fc2b 	bl	1e040 <net_buf_put>
   167ea:	e70a      	b.n	16602 <bt_uart_isr+0x16>
	switch (evt) {
   167ec:	2b13      	cmp	r3, #19
   167ee:	d004      	beq.n	167fa <bt_uart_isr+0x20e>
   167f0:	2b1a      	cmp	r3, #26
   167f2:	bf14      	ite	ne
   167f4:	2402      	movne	r4, #2
   167f6:	2401      	moveq	r4, #1
   167f8:	e7e6      	b.n	167c8 <bt_uart_isr+0x1dc>
   167fa:	2401      	movs	r4, #1
   167fc:	e7e4      	b.n	167c8 <bt_uart_isr+0x1dc>
   167fe:	2303      	movs	r3, #3
		evt_flags = BT_HCI_EVT_FLAG_RECV;
   16800:	2402      	movs	r4, #2
   16802:	f889 3014 	strb.w	r3, [r9, #20]
}
   16806:	e7e2      	b.n	167ce <bt_uart_isr+0x1e2>
	switch (rx.type) {
   16808:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1680c:	2b02      	cmp	r3, #2
   1680e:	f000 808a 	beq.w	16926 <bt_uart_isr+0x33a>
   16812:	2b04      	cmp	r3, #4
   16814:	d042      	beq.n	1689c <bt_uart_isr+0x2b0>
	if (uart_fifo_read(h4_dev, &rx.type, 1) != 1) {
   16816:	2201      	movs	r2, #1
   16818:	6830      	ldr	r0, [r6, #0]
   1681a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1681e:	f01a f9e3 	bl	30be8 <uart_fifo_read>
   16822:	2801      	cmp	r0, #1
   16824:	d008      	beq.n	16838 <bt_uart_isr+0x24c>
		BT_WARN("Unable to read H:4 packet type");
   16826:	01b9      	lsls	r1, r7, #6
   16828:	4819      	ldr	r0, [pc, #100]	; (16890 <bt_uart_isr+0x2a4>)
   1682a:	f041 0102 	orr.w	r1, r1, #2
   1682e:	f019 fd53 	bl	302d8 <log_0>
		rx.type = H4_NONE;
   16832:	f884 9027 	strb.w	r9, [r4, #39]	; 0x27
   16836:	e6e4      	b.n	16602 <bt_uart_isr+0x16>
	switch (rx.type) {
   16838:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
   1683c:	2902      	cmp	r1, #2
   1683e:	d006      	beq.n	1684e <bt_uart_isr+0x262>
   16840:	2904      	cmp	r1, #4
   16842:	d106      	bne.n	16852 <bt_uart_isr+0x266>
		rx.remaining = sizeof(rx.evt);
   16844:	2302      	movs	r3, #2
		rx.remaining = sizeof(rx.acl);
   16846:	8423      	strh	r3, [r4, #32]
		rx.hdr_len = rx.remaining;
   16848:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		break;
   1684c:	e6d9      	b.n	16602 <bt_uart_isr+0x16>
		rx.remaining = sizeof(rx.acl);
   1684e:	2304      	movs	r3, #4
   16850:	e7f9      	b.n	16846 <bt_uart_isr+0x25a>
		BT_ERR("Unknown H:4 type 0x%02x", rx.type);
   16852:	01ba      	lsls	r2, r7, #6
   16854:	480f      	ldr	r0, [pc, #60]	; (16894 <bt_uart_isr+0x2a8>)
   16856:	f042 0201 	orr.w	r2, r2, #1
   1685a:	f019 fd4a 	bl	302f2 <log_1>
   1685e:	e7e8      	b.n	16832 <bt_uart_isr+0x246>
   16860:	000387f8 	.word	0x000387f8
   16864:	000387c0 	.word	0x000387c0
   16868:	20014750 	.word	0x20014750
   1686c:	20014758 	.word	0x20014758
   16870:	0003ae6f 	.word	0x0003ae6f
   16874:	0003aea7 	.word	0x0003aea7
   16878:	20014724 	.word	0x20014724
   1687c:	0003ae93 	.word	0x0003ae93
   16880:	0003aebf 	.word	0x0003aebf
   16884:	0003aed7 	.word	0x0003aed7
   16888:	0003ae54 	.word	0x0003ae54
   1688c:	20014728 	.word	0x20014728
   16890:	0003af02 	.word	0x0003af02
   16894:	0003af21 	.word	0x0003af21
   16898:	20016128 	.word	0x20016128
	int to_read = rx.hdr_len - rx.remaining;
   1689c:	8c22      	ldrh	r2, [r4, #32]
   1689e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   168a2:	3128      	adds	r1, #40	; 0x28
	int to_read = rx.hdr_len - rx.remaining;
   168a4:	1a9b      	subs	r3, r3, r2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   168a6:	4419      	add	r1, r3
   168a8:	6830      	ldr	r0, [r6, #0]
   168aa:	f01a f99d 	bl	30be8 <uart_fifo_read>
   168ae:	8c23      	ldrh	r3, [r4, #32]
   168b0:	1a18      	subs	r0, r3, r0
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   168b2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   168b6:	b280      	uxth	r0, r0
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   168b8:	2b02      	cmp	r3, #2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   168ba:	8420      	strh	r0, [r4, #32]
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   168bc:	d10a      	bne.n	168d4 <bt_uart_isr+0x2e8>
   168be:	2801      	cmp	r0, #1
   168c0:	d808      	bhi.n	168d4 <bt_uart_isr+0x2e8>
		switch (rx.evt.evt) {
   168c2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   168c6:	2b3e      	cmp	r3, #62	; 0x3e
			rx.hdr_len++;
   168c8:	bf01      	itttt	eq
   168ca:	2303      	moveq	r3, #3
			rx.remaining++;
   168cc:	3001      	addeq	r0, #1
   168ce:	8420      	strheq	r0, [r4, #32]
			rx.hdr_len++;
   168d0:	f884 3026 	strbeq.w	r3, [r4, #38]	; 0x26
	if (!rx.remaining) {
   168d4:	8c23      	ldrh	r3, [r4, #32]
   168d6:	bb9b      	cbnz	r3, 16940 <bt_uart_isr+0x354>
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
   168d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   168dc:	2b3e      	cmp	r3, #62	; 0x3e
   168de:	d108      	bne.n	168f2 <bt_uart_isr+0x306>
		    (rx.hdr[sizeof(*hdr)] == BT_HCI_EVT_LE_ADVERTISING_REPORT ||
   168e0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
   168e4:	2b02      	cmp	r3, #2
   168e6:	d001      	beq.n	168ec <bt_uart_isr+0x300>
		    (rx.hdr[sizeof(*hdr)] == BT_HCI_EVT_LE_ADVERTISING_REPORT ||
   168e8:	2b0d      	cmp	r3, #13
   168ea:	d102      	bne.n	168f2 <bt_uart_isr+0x306>
			rx.discardable = true;
   168ec:	2301      	movs	r3, #1
   168ee:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		rx.remaining = hdr->len - (rx.hdr_len - sizeof(*hdr));
   168f2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   168f6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   168fa:	3302      	adds	r3, #2
   168fc:	1a9b      	subs	r3, r3, r2
		rx.remaining = sys_le16_to_cpu(hdr->len);
   168fe:	8423      	strh	r3, [r4, #32]
		rx.have_hdr = true;
   16900:	2301      	movs	r3, #1
   16902:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (rx.have_hdr && rx.buf) {
   16906:	6820      	ldr	r0, [r4, #0]
   16908:	2800      	cmp	r0, #0
   1690a:	f43f ae7a 	beq.w	16602 <bt_uart_isr+0x16>
	return net_buf_simple_tailroom(&buf->b);
   1690e:	3008      	adds	r0, #8
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
   16910:	f8b4 9020 	ldrh.w	r9, [r4, #32]
   16914:	f01c fef6 	bl	33704 <net_buf_simple_tailroom>
   16918:	4581      	cmp	r9, r0
   1691a:	f63f af24 	bhi.w	16766 <bt_uart_isr+0x17a>
			copy_hdr(rx.buf);
   1691e:	6820      	ldr	r0, [r4, #0]
   16920:	f7ff fdec 	bl	164fc <copy_hdr>
   16924:	e66d      	b.n	16602 <bt_uart_isr+0x16>
	int to_read = sizeof(*hdr) - rx.remaining;
   16926:	8c22      	ldrh	r2, [r4, #32]
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   16928:	6830      	ldr	r0, [r6, #0]
	int to_read = sizeof(*hdr) - rx.remaining;
   1692a:	1aa1      	subs	r1, r4, r2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   1692c:	312c      	adds	r1, #44	; 0x2c
   1692e:	f01a f95b 	bl	30be8 <uart_fifo_read>
   16932:	8c23      	ldrh	r3, [r4, #32]
   16934:	1a18      	subs	r0, r3, r0
   16936:	b280      	uxth	r0, r0
   16938:	8420      	strh	r0, [r4, #32]
	if (!rx.remaining) {
   1693a:	b908      	cbnz	r0, 16940 <bt_uart_isr+0x354>
		rx.remaining = sys_le16_to_cpu(hdr->len);
   1693c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1693e:	e7de      	b.n	168fe <bt_uart_isr+0x312>
	if (rx.have_hdr && rx.buf) {
   16940:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   16944:	2b00      	cmp	r3, #0
   16946:	f43f ae5c 	beq.w	16602 <bt_uart_isr+0x16>
   1694a:	e7dc      	b.n	16906 <bt_uart_isr+0x31a>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   1694c:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   1694e:	2800      	cmp	r0, #0
   16950:	f47f ae5e 	bne.w	16610 <bt_uart_isr+0x24>
}
   16954:	b00b      	add	sp, #44	; 0x2c
   16956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return api->irq_is_pending(dev);
   1695a:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   1695c:	2800      	cmp	r0, #0
   1695e:	f47f ae5d 	bne.w	1661c <bt_uart_isr+0x30>
   16962:	e7f7      	b.n	16954 <bt_uart_isr+0x368>

00016964 <h4_open>:
{
   16964:	b510      	push	{r4, lr}
	uart_irq_rx_disable(h4_dev);
   16966:	4c18      	ldr	r4, [pc, #96]	; (169c8 <h4_open+0x64>)
{
   16968:	b088      	sub	sp, #32
	uart_irq_rx_disable(h4_dev);
   1696a:	6820      	ldr	r0, [r4, #0]
	z_impl_uart_irq_rx_disable(dev);
   1696c:	f01a f94c 	bl	30c08 <z_impl_uart_irq_rx_disable>
	uart_irq_tx_disable(h4_dev);
   16970:	6820      	ldr	r0, [r4, #0]
	z_impl_uart_irq_tx_disable(dev);
   16972:	f01a f93f 	bl	30bf4 <z_impl_uart_irq_tx_disable>
	ret = bt_hci_transport_setup(h4_dev);
   16976:	6820      	ldr	r0, [r4, #0]
   16978:	f001 fdc2 	bl	18500 <bt_hci_transport_setup>
	if (ret < 0) {
   1697c:	2800      	cmp	r0, #0
   1697e:	db20      	blt.n	169c2 <h4_open+0x5e>
	uart_irq_callback_set(h4_dev, bt_uart_isr);
   16980:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   16982:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   16984:	b123      	cbz	r3, 16990 <h4_open+0x2c>
   16986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   16988:	b113      	cbz	r3, 16990 <h4_open+0x2c>
		api->irq_callback_set(dev, cb, user_data);
   1698a:	2200      	movs	r2, #0
   1698c:	490f      	ldr	r1, [pc, #60]	; (169cc <h4_open+0x68>)
   1698e:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16990:	2200      	movs	r2, #0
   16992:	2300      	movs	r3, #0
   16994:	2400      	movs	r4, #0
   16996:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1699a:	f06f 0307 	mvn.w	r3, #7
   1699e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   169a2:	e9cd 3403 	strd	r3, r4, [sp, #12]
   169a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   169aa:	4b09      	ldr	r3, [pc, #36]	; (169d0 <h4_open+0x6c>)
   169ac:	4909      	ldr	r1, [pc, #36]	; (169d4 <h4_open+0x70>)
   169ae:	9400      	str	r4, [sp, #0]
   169b0:	4809      	ldr	r0, [pc, #36]	; (169d8 <h4_open+0x74>)
   169b2:	f013 fe51 	bl	2a658 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   169b6:	4909      	ldr	r1, [pc, #36]	; (169dc <h4_open+0x78>)
   169b8:	f020 fd2f 	bl	3741a <z_impl_k_thread_name_set>
	return 0;
   169bc:	4620      	mov	r0, r4
}
   169be:	b008      	add	sp, #32
   169c0:	bd10      	pop	{r4, pc}
		return -EIO;
   169c2:	f06f 0004 	mvn.w	r0, #4
   169c6:	e7fa      	b.n	169be <h4_open+0x5a>
   169c8:	20016128 	.word	0x20016128
   169cc:	000165ed 	.word	0x000165ed
   169d0:	0001653d 	.word	0x0001653d
   169d4:	2001ffd8 	.word	0x2001ffd8
   169d8:	200153b8 	.word	0x200153b8
   169dc:	0003af39 	.word	0x0003af39

000169e0 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   169e0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   169e2:	4c06      	ldr	r4, [pc, #24]	; (169fc <sys_clock_isr+0x1c>)
   169e4:	4906      	ldr	r1, [pc, #24]	; (16a00 <sys_clock_isr+0x20>)
   169e6:	4622      	mov	r2, r4
   169e8:	4806      	ldr	r0, [pc, #24]	; (16a04 <sys_clock_isr+0x24>)
   169ea:	2317      	movs	r3, #23
   169ec:	f019 f940 	bl	2fc70 <printk>
   169f0:	4620      	mov	r0, r4
}
   169f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   169f6:	2117      	movs	r1, #23
   169f8:	f019 bc20 	b.w	3023c <assert_post_action>
   169fc:	0003af54 	.word	0x0003af54
   16a00:	00040e81 	.word	0x00040e81
   16a04:	0003a56b 	.word	0x0003a56b

00016a08 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   16a08:	4a04      	ldr	r2, [pc, #16]	; (16a1c <sys_clock_timeout_handler+0x14>)
   16a0a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   16a0c:	1ac8      	subs	r0, r1, r3
   16a0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   16a12:	4403      	add	r3, r0
   16a14:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   16a16:	f016 be43 	b.w	2d6a0 <sys_clock_announce>
   16a1a:	bf00      	nop
   16a1c:	2001613c 	.word	0x2001613c

00016a20 <set_absolute_alarm>:
{
   16a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16a24:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16a28:	f04f 0900 	mov.w	r9, #0
   16a2c:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   16a2e:	f100 0450 	add.w	r4, r0, #80	; 0x50
   16a32:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   16a36:	00a4      	lsls	r4, r4, #2
   16a38:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
   16a3c:	b2a4      	uxth	r4, r4
   16a3e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   16a42:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   16a46:	f8df 806c 	ldr.w	r8, [pc, #108]	; 16ab4 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   16a4a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16a4e:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16a52:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   16a54:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   16a58:	eba3 030a 	sub.w	r3, r3, sl
   16a5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   16a60:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   16a64:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   16a66:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   16a6a:	d102      	bne.n	16a72 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   16a6c:	2013      	movs	r0, #19
   16a6e:	f020 fdae 	bl	375ce <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   16a72:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   16a76:	1aab      	subs	r3, r5, r2
   16a78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   16a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   16a80:	bf88      	it	hi
   16a82:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16a84:	f8c4 9000 	str.w	r9, [r4]
   16a88:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   16a8a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   16a8e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   16a92:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   16a96:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   16a9a:	459a      	cmp	sl, r3
   16a9c:	d006      	beq.n	16aac <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   16a9e:	1aeb      	subs	r3, r5, r3
   16aa0:	3b02      	subs	r3, #2
   16aa2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   16aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   16aaa:	d801      	bhi.n	16ab0 <set_absolute_alarm+0x90>
}
   16aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   16ab0:	462b      	mov	r3, r5
   16ab2:	e7cf      	b.n	16a54 <set_absolute_alarm+0x34>
   16ab4:	40015000 	.word	0x40015000

00016ab8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   16ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16aba:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16abc:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16abe:	4e0f      	ldr	r6, [pc, #60]	; (16afc <rtc_nrf_isr+0x44>)
   16ac0:	4b0f      	ldr	r3, [pc, #60]	; (16b00 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
   16ac2:	4a10      	ldr	r2, [pc, #64]	; (16b04 <rtc_nrf_isr+0x4c>)
   16ac4:	4618      	mov	r0, r3
   16ac6:	681d      	ldr	r5, [r3, #0]
   16ac8:	b104      	cbz	r4, 16acc <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   16aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16acc:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   16ad0:	03c9      	lsls	r1, r1, #15
   16ad2:	d5fa      	bpl.n	16aca <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16ad4:	6831      	ldr	r1, [r6, #0]
   16ad6:	2900      	cmp	r1, #0
   16ad8:	d0f7      	beq.n	16aca <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16ada:	6034      	str	r4, [r6, #0]
   16adc:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   16ade:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   16ae2:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16ae6:	2401      	movs	r4, #1
    return p_reg->CC[ch];
   16ae8:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
   16aec:	b125      	cbz	r5, 16af8 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
   16aee:	2000      	movs	r0, #0
   16af0:	685a      	ldr	r2, [r3, #4]
   16af2:	601f      	str	r7, [r3, #0]
   16af4:	47a8      	blx	r5
   16af6:	e7e3      	b.n	16ac0 <rtc_nrf_isr+0x8>
   16af8:	6005      	str	r5, [r0, #0]
}
   16afa:	e7e6      	b.n	16aca <rtc_nrf_isr+0x12>
   16afc:	40015140 	.word	0x40015140
   16b00:	20016130 	.word	0x20016130
   16b04:	40015000 	.word	0x40015000

00016b08 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   16b08:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   16b0a:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   16b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16b10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   16b14:	4d0d      	ldr	r5, [pc, #52]	; (16b4c <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   16b16:	2101      	movs	r1, #1
   16b18:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   16b1c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   16b20:	4b0b      	ldr	r3, [pc, #44]	; (16b50 <sys_clock_driver_init+0x48>)
   16b22:	2015      	movs	r0, #21
   16b24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   16b28:	4622      	mov	r2, r4
   16b2a:	f000 fd7f 	bl	1762c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   16b2e:	2015      	movs	r0, #21
   16b30:	f000 fd4a 	bl	175c8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   16b34:	2301      	movs	r3, #1
   16b36:	4a07      	ldr	r2, [pc, #28]	; (16b54 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   16b38:	2002      	movs	r0, #2
   16b3a:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   16b3c:	4a06      	ldr	r2, [pc, #24]	; (16b58 <sys_clock_driver_init+0x50>)
   16b3e:	602b      	str	r3, [r5, #0]
   16b40:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   16b42:	f7ff fc03 	bl	1634c <z_nrf_clock_control_lf_on>

	return 0;
}
   16b46:	4620      	mov	r0, r4
   16b48:	bd38      	pop	{r3, r4, r5, pc}
   16b4a:	bf00      	nop
   16b4c:	40015000 	.word	0x40015000
   16b50:	e000e100 	.word	0xe000e100
   16b54:	40015008 	.word	0x40015008
   16b58:	20016138 	.word	0x20016138

00016b5c <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   16b5c:	4b13      	ldr	r3, [pc, #76]	; (16bac <sys_clock_set_timeout+0x50>)
   16b5e:	f1b0 3fff 	cmp.w	r0, #4294967295
   16b62:	bf08      	it	eq
   16b64:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   16b66:	3801      	subs	r0, #1
   16b68:	2800      	cmp	r0, #0
   16b6a:	dd1c      	ble.n	16ba6 <sys_clock_set_timeout+0x4a>
   16b6c:	4298      	cmp	r0, r3
   16b6e:	bfa8      	it	ge
   16b70:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   16b72:	4b0f      	ldr	r3, [pc, #60]	; (16bb0 <sys_clock_set_timeout+0x54>)
   16b74:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   16b78:	4b0e      	ldr	r3, [pc, #56]	; (16bb4 <sys_clock_set_timeout+0x58>)
   16b7a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   16b7c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   16b7e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   16b82:	bf18      	it	ne
   16b84:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   16b86:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   16b8a:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
   16b8c:	4a0a      	ldr	r2, [pc, #40]	; (16bb8 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   16b8e:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   16b90:	480a      	ldr	r0, [pc, #40]	; (16bbc <sys_clock_set_timeout+0x60>)
   16b92:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   16b94:	2000      	movs	r0, #0
   16b96:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   16b98:	4a04      	ldr	r2, [pc, #16]	; (16bac <sys_clock_set_timeout+0x50>)
   16b9a:	4293      	cmp	r3, r2
   16b9c:	bf94      	ite	ls
   16b9e:	18c9      	addls	r1, r1, r3
   16ba0:	1889      	addhi	r1, r1, r2
   16ba2:	f7ff bf3d 	b.w	16a20 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   16ba6:	2000      	movs	r0, #0
   16ba8:	e7e3      	b.n	16b72 <sys_clock_set_timeout+0x16>
   16baa:	bf00      	nop
   16bac:	007fffff 	.word	0x007fffff
   16bb0:	40015000 	.word	0x40015000
   16bb4:	2001613c 	.word	0x2001613c
   16bb8:	20016130 	.word	0x20016130
   16bbc:	00016a09 	.word	0x00016a09

00016bc0 <sys_clock_elapsed>:
   16bc0:	4b04      	ldr	r3, [pc, #16]	; (16bd4 <sys_clock_elapsed+0x14>)
   16bc2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   16bc6:	4b04      	ldr	r3, [pc, #16]	; (16bd8 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   16bc8:	681b      	ldr	r3, [r3, #0]
   16bca:	1ac0      	subs	r0, r0, r3
}
   16bcc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16bd0:	4770      	bx	lr
   16bd2:	bf00      	nop
   16bd4:	40015000 	.word	0x40015000
   16bd8:	2001613c 	.word	0x2001613c

00016bdc <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   16bdc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   16bde:	f04f 0320 	mov.w	r3, #32
   16be2:	f3ef 8511 	mrs	r5, BASEPRI
   16be6:	f383 8811 	msr	BASEPRI, r3
   16bea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16bee:	481b      	ldr	r0, [pc, #108]	; (16c5c <sys_clock_cycle_get_32+0x80>)
   16bf0:	f013 fe10 	bl	2a814 <z_spin_lock_valid>
   16bf4:	b968      	cbnz	r0, 16c12 <sys_clock_cycle_get_32+0x36>
   16bf6:	2381      	movs	r3, #129	; 0x81
   16bf8:	4a19      	ldr	r2, [pc, #100]	; (16c60 <sys_clock_cycle_get_32+0x84>)
   16bfa:	491a      	ldr	r1, [pc, #104]	; (16c64 <sys_clock_cycle_get_32+0x88>)
   16bfc:	481a      	ldr	r0, [pc, #104]	; (16c68 <sys_clock_cycle_get_32+0x8c>)
   16bfe:	f019 f837 	bl	2fc70 <printk>
   16c02:	4916      	ldr	r1, [pc, #88]	; (16c5c <sys_clock_cycle_get_32+0x80>)
   16c04:	4819      	ldr	r0, [pc, #100]	; (16c6c <sys_clock_cycle_get_32+0x90>)
   16c06:	f019 f833 	bl	2fc70 <printk>
   16c0a:	2181      	movs	r1, #129	; 0x81
   16c0c:	4814      	ldr	r0, [pc, #80]	; (16c60 <sys_clock_cycle_get_32+0x84>)
   16c0e:	f019 fb15 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   16c12:	4812      	ldr	r0, [pc, #72]	; (16c5c <sys_clock_cycle_get_32+0x80>)
   16c14:	f013 fe1a 	bl	2a84c <z_spin_lock_set_owner>
   16c18:	4b15      	ldr	r3, [pc, #84]	; (16c70 <sys_clock_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16c1a:	4810      	ldr	r0, [pc, #64]	; (16c5c <sys_clock_cycle_get_32+0x80>)
   16c1c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   16c20:	4b14      	ldr	r3, [pc, #80]	; (16c74 <sys_clock_cycle_get_32+0x98>)
   16c22:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   16c24:	1ae4      	subs	r4, r4, r3
   16c26:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   16c2a:	441c      	add	r4, r3
   16c2c:	f013 fe00 	bl	2a830 <z_spin_unlock_valid>
   16c30:	b968      	cbnz	r0, 16c4e <sys_clock_cycle_get_32+0x72>
   16c32:	23ac      	movs	r3, #172	; 0xac
   16c34:	4a0a      	ldr	r2, [pc, #40]	; (16c60 <sys_clock_cycle_get_32+0x84>)
   16c36:	4910      	ldr	r1, [pc, #64]	; (16c78 <sys_clock_cycle_get_32+0x9c>)
   16c38:	480b      	ldr	r0, [pc, #44]	; (16c68 <sys_clock_cycle_get_32+0x8c>)
   16c3a:	f019 f819 	bl	2fc70 <printk>
   16c3e:	4907      	ldr	r1, [pc, #28]	; (16c5c <sys_clock_cycle_get_32+0x80>)
   16c40:	480e      	ldr	r0, [pc, #56]	; (16c7c <sys_clock_cycle_get_32+0xa0>)
   16c42:	f019 f815 	bl	2fc70 <printk>
   16c46:	21ac      	movs	r1, #172	; 0xac
   16c48:	4805      	ldr	r0, [pc, #20]	; (16c60 <sys_clock_cycle_get_32+0x84>)
   16c4a:	f019 faf7 	bl	3023c <assert_post_action>
	__asm__ volatile(
   16c4e:	f385 8811 	msr	BASEPRI, r5
   16c52:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   16c56:	4620      	mov	r0, r4
   16c58:	bd38      	pop	{r3, r4, r5, pc}
   16c5a:	bf00      	nop
   16c5c:	20016140 	.word	0x20016140
   16c60:	0003a62b 	.word	0x0003a62b
   16c64:	0003a67d 	.word	0x0003a67d
   16c68:	0003a56b 	.word	0x0003a56b
   16c6c:	0003a692 	.word	0x0003a692
   16c70:	40015000 	.word	0x40015000
   16c74:	2001613c 	.word	0x2001613c
   16c78:	0003a651 	.word	0x0003a651
   16c7c:	0003a668 	.word	0x0003a668

00016c80 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   16c80:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   16c82:	4d06      	ldr	r5, [pc, #24]	; (16c9c <scan_default_param_set+0x1c>)
{
   16c84:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   16c86:	ac01      	add	r4, sp, #4
   16c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   16c8c:	4c04      	ldr	r4, [pc, #16]	; (16ca0 <scan_default_param_set+0x20>)
   16c8e:	ae01      	add	r6, sp, #4
   16c90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16c94:	682b      	ldr	r3, [r5, #0]
   16c96:	6023      	str	r3, [r4, #0]
}
   16c98:	b006      	add	sp, #24
   16c9a:	bd70      	pop	{r4, r5, r6, pc}
   16c9c:	00038970 	.word	0x00038970
   16ca0:	2001617c 	.word	0x2001617c

00016ca4 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
   16ca4:	b570      	push	{r4, r5, r6, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
   16ca6:	7803      	ldrb	r3, [r0, #0]
{
   16ca8:	460c      	mov	r4, r1
	switch (data->type) {
   16caa:	2bff      	cmp	r3, #255	; 0xff
   16cac:	d11e      	bne.n	16cec <adv_data_found+0x48>
		bt_scan.scan_filters.manufacturer_data.enabled;
   16cae:	4d10      	ldr	r5, [pc, #64]	; (16cf0 <adv_data_found+0x4c>)
	if (is_manufacturer_data_filter_enabled()) {
   16cb0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   16cb4:	b1d3      	cbz	r3, 16cec <adv_data_found+0x48>
	for (size_t i = 0; i < counter; i++) {
   16cb6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   16cba:	b1bb      	cbz	r3, 16cec <adv_data_found+0x48>
		if (adv_manufacturer_data_cmp(data->data,
   16cbc:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
	if (target_data_len > data_len) {
   16cc0:	7843      	ldrb	r3, [r0, #1]
   16cc2:	4293      	cmp	r3, r2
   16cc4:	d312      	bcc.n	16cec <adv_data_found+0x48>
	if (memcmp(target_data, data, target_data_len) != 0) {
   16cc6:	f105 060e 	add.w	r6, r5, #14
   16cca:	6841      	ldr	r1, [r0, #4]
   16ccc:	4630      	mov	r0, r6
   16cce:	f020 fd4a 	bl	37766 <memcmp>
   16cd2:	b958      	cbnz	r0, 16cec <adv_data_found+0x48>
			control->filter_status.manufacturer_data.len =
   16cd4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
			control->filter_status.manufacturer_data.data =
   16cd8:	64a6      	str	r6, [r4, #72]	; 0x48
			control->filter_status.manufacturer_data.len =
   16cda:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			control->filter_match_cnt++;
   16cde:	7863      	ldrb	r3, [r4, #1]
   16ce0:	3301      	adds	r3, #1
   16ce2:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
   16ce4:	2301      	movs	r3, #1
   16ce6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			control->filter_match = true;
   16cea:	70a3      	strb	r3, [r4, #2]
	default:
		break;
	}

	return true;
}
   16cec:	2001      	movs	r0, #1
   16cee:	bd70      	pop	{r4, r5, r6, pc}
   16cf0:	20016144 	.word	0x20016144

00016cf4 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   16cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cf6:	4605      	mov	r5, r0
   16cf8:	460e      	mov	r6, r1
   16cfa:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16cfc:	4b08      	ldr	r3, [pc, #32]	; (16d20 <notify_filter_matched.constprop.0+0x2c>)
   16cfe:	681c      	ldr	r4, [r3, #0]
   16d00:	b10c      	cbz	r4, 16d06 <notify_filter_matched.constprop.0+0x12>
   16d02:	3c04      	subs	r4, #4
   16d04:	b904      	cbnz	r4, 16d08 <notify_filter_matched.constprop.0+0x14>
}
   16d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
   16d08:	6823      	ldr	r3, [r4, #0]
   16d0a:	681b      	ldr	r3, [r3, #0]
   16d0c:	b11b      	cbz	r3, 16d16 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
   16d0e:	463a      	mov	r2, r7
   16d10:	4631      	mov	r1, r6
   16d12:	4628      	mov	r0, r5
   16d14:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16d16:	1d23      	adds	r3, r4, #4
   16d18:	d0f5      	beq.n	16d06 <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16d1a:	6864      	ldr	r4, [r4, #4]
   16d1c:	e7f0      	b.n	16d00 <notify_filter_matched.constprop.0+0xc>
   16d1e:	bf00      	nop
   16d20:	20016198 	.word	0x20016198

00016d24 <bt_scan_cb_register>:
	if (!cb) {
   16d24:	b150      	cbz	r0, 16d3c <bt_scan_cb_register+0x18>
	parent->next = child;
   16d26:	2300      	movs	r3, #0
   16d28:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   16d2a:	4b05      	ldr	r3, [pc, #20]	; (16d40 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
   16d2c:	1d02      	adds	r2, r0, #4
   16d2e:	6859      	ldr	r1, [r3, #4]
   16d30:	b911      	cbnz	r1, 16d38 <bt_scan_cb_register+0x14>
	list->head = node;
   16d32:	e9c3 2200 	strd	r2, r2, [r3]
}
   16d36:	4770      	bx	lr
	parent->next = child;
   16d38:	600a      	str	r2, [r1, #0]
	list->tail = node;
   16d3a:	605a      	str	r2, [r3, #4]
}
   16d3c:	4770      	bx	lr
   16d3e:	bf00      	nop
   16d40:	20016198 	.word	0x20016198

00016d44 <bt_scan_filter_add>:
{
   16d44:	b570      	push	{r4, r5, r6, lr}
   16d46:	4604      	mov	r4, r0
	if (!data) {
   16d48:	460d      	mov	r5, r1
   16d4a:	b359      	cbz	r1, 16da4 <bt_scan_filter_add+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
   16d4c:	f04f 32ff 	mov.w	r2, #4294967295
   16d50:	f04f 33ff 	mov.w	r3, #4294967295
   16d54:	4815      	ldr	r0, [pc, #84]	; (16dac <bt_scan_filter_add+0x68>)
   16d56:	f013 ff2b 	bl	2abb0 <z_impl_k_mutex_lock>
	switch (type) {
   16d5a:	2c04      	cmp	r4, #4
   16d5c:	d91c      	bls.n	16d98 <bt_scan_filter_add+0x54>
   16d5e:	2c05      	cmp	r4, #5
   16d60:	d11d      	bne.n	16d9e <bt_scan_filter_add+0x5a>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
   16d62:	4e13      	ldr	r6, [pc, #76]	; (16db0 <bt_scan_filter_add+0x6c>)
	if (counter >= CONFIG_BT_SCAN_MANUFACTURER_DATA_CNT) {
   16d64:	f896 402f 	ldrb.w	r4, [r6, #47]	; 0x2f
   16d68:	b9b4      	cbnz	r4, 16d98 <bt_scan_filter_add+0x54>
	if ((manufacturer_data->data_len == 0) ||
   16d6a:	792a      	ldrb	r2, [r5, #4]
   16d6c:	1e53      	subs	r3, r2, #1
   16d6e:	2b1f      	cmp	r3, #31
   16d70:	d815      	bhi.n	16d9e <bt_scan_filter_add+0x5a>
	memcpy(md_filter->manufacturer_data[counter].data,
   16d72:	2346      	movs	r3, #70	; 0x46
   16d74:	6829      	ldr	r1, [r5, #0]
   16d76:	f106 000e 	add.w	r0, r6, #14
   16d7a:	f020 fd0f 	bl	3779c <__memcpy_chk>
	md_filter->manufacturer_data[counter].data_len =
   16d7e:	792b      	ldrb	r3, [r5, #4]
   16d80:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
	bt_scan.scan_filters.manufacturer_data.cnt++;
   16d84:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   16d88:	3301      	adds	r3, #1
   16d8a:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
	return z_impl_k_mutex_unlock(mutex);
   16d8e:	4807      	ldr	r0, [pc, #28]	; (16dac <bt_scan_filter_add+0x68>)
   16d90:	f014 f808 	bl	2ada4 <z_impl_k_mutex_unlock>
}
   16d94:	4620      	mov	r0, r4
   16d96:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   16d98:	f06f 040b 	mvn.w	r4, #11
   16d9c:	e7f7      	b.n	16d8e <bt_scan_filter_add+0x4a>
		return -EINVAL;
   16d9e:	f06f 0415 	mvn.w	r4, #21
   16da2:	e7f4      	b.n	16d8e <bt_scan_filter_add+0x4a>
		return -EINVAL;
   16da4:	f06f 0415 	mvn.w	r4, #21
   16da8:	e7f4      	b.n	16d94 <bt_scan_filter_add+0x50>
   16daa:	bf00      	nop
   16dac:	20014f24 	.word	0x20014f24
   16db0:	20016144 	.word	0x20016144

00016db4 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
   16db4:	2200      	movs	r2, #0
   16db6:	4b04      	ldr	r3, [pc, #16]	; (16dc8 <bt_scan_filter_disable+0x14>)
   16db8:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   16dba:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   16dbc:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   16dbe:	725a      	strb	r2, [r3, #9]
	bt_scan.scan_filters.appearance.enabled = false;
   16dc0:	735a      	strb	r2, [r3, #13]
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   16dc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
   16dc6:	4770      	bx	lr
   16dc8:	20016144 	.word	0x20016144

00016dcc <bt_scan_filter_enable>:
{
   16dcc:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
   16dce:	0683      	lsls	r3, r0, #26
   16dd0:	d023      	beq.n	16e1a <bt_scan_filter_enable+0x4e>
	bt_scan_filter_disable();
   16dd2:	f7ff ffef 	bl	16db4 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
   16dd6:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   16dda:	bf18      	it	ne
   16ddc:	2201      	movne	r2, #1
   16dde:	4b10      	ldr	r3, [pc, #64]	; (16e20 <bt_scan_filter_enable+0x54>)
   16de0:	bf18      	it	ne
   16de2:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
   16de4:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   16de6:	bf44      	itt	mi
   16de8:	2201      	movmi	r2, #1
   16dea:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   16dec:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   16dee:	bf44      	itt	mi
   16df0:	2201      	movmi	r2, #1
   16df2:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
   16df4:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   16df6:	bf44      	itt	mi
   16df8:	2201      	movmi	r2, #1
   16dfa:	725a      	strbmi	r2, [r3, #9]
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   16dfc:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   16dfe:	bf44      	itt	mi
   16e00:	2201      	movmi	r2, #1
   16e02:	735a      	strbmi	r2, [r3, #13]
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   16e04:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   16e06:	bf48      	it	mi
   16e08:	2201      	movmi	r2, #1
	return 0;
   16e0a:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
   16e0e:	bf48      	it	mi
   16e10:	f883 2030 	strbmi.w	r2, [r3, #48]	; 0x30
	filters->all_mode = match_all;
   16e14:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
}
   16e18:	bd08      	pop	{r3, pc}
		return -EINVAL;
   16e1a:	f06f 0015 	mvn.w	r0, #21
   16e1e:	e7fb      	b.n	16e18 <bt_scan_filter_enable+0x4c>
   16e20:	20016144 	.word	0x20016144

00016e24 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   16e24:	b570      	push	{r4, r5, r6, lr}
   16e26:	460e      	mov	r6, r1
   16e28:	b086      	sub	sp, #24
   16e2a:	4605      	mov	r5, r0
	bt_scan_stop();
   16e2c:	f019 fef3 	bl	30c16 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   16e30:	4b18      	ldr	r3, [pc, #96]	; (16e94 <scan_connect_with_target.part.0+0x70>)
   16e32:	ac02      	add	r4, sp, #8
   16e34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   16e36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   16e3a:	4621      	mov	r1, r4
   16e3c:	ab01      	add	r3, sp, #4
   16e3e:	4630      	mov	r0, r6
   16e40:	4a15      	ldr	r2, [pc, #84]	; (16e98 <scan_connect_with_target.part.0+0x74>)
   16e42:	f004 fa6b 	bl	1b31c <bt_conn_le_create>
	if (err) {
   16e46:	4b15      	ldr	r3, [pc, #84]	; (16e9c <scan_connect_with_target.part.0+0x78>)
   16e48:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16e4a:	681c      	ldr	r4, [r3, #0]
	if (err) {
   16e4c:	b168      	cbz	r0, 16e6a <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16e4e:	b10c      	cbz	r4, 16e54 <scan_connect_with_target.part.0+0x30>
   16e50:	3c04      	subs	r4, #4
   16e52:	b90c      	cbnz	r4, 16e58 <scan_connect_with_target.part.0+0x34>
}
   16e54:	b006      	add	sp, #24
   16e56:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
   16e58:	6823      	ldr	r3, [r4, #0]
   16e5a:	689b      	ldr	r3, [r3, #8]
   16e5c:	b10b      	cbz	r3, 16e62 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
   16e5e:	4628      	mov	r0, r5
   16e60:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16e62:	1d22      	adds	r2, r4, #4
   16e64:	d0f6      	beq.n	16e54 <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16e66:	6864      	ldr	r4, [r4, #4]
   16e68:	e7f1      	b.n	16e4e <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16e6a:	b91c      	cbnz	r4, 16e74 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
   16e6c:	9801      	ldr	r0, [sp, #4]
   16e6e:	f004 f8b9 	bl	1afe4 <bt_conn_unref>
   16e72:	e7ef      	b.n	16e54 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
   16e74:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16e76:	3c04      	subs	r4, #4
   16e78:	2c00      	cmp	r4, #0
   16e7a:	d0f7      	beq.n	16e6c <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
   16e7c:	6823      	ldr	r3, [r4, #0]
   16e7e:	68db      	ldr	r3, [r3, #12]
   16e80:	b113      	cbz	r3, 16e88 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
   16e82:	4631      	mov	r1, r6
   16e84:	4628      	mov	r0, r5
   16e86:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16e88:	1d23      	adds	r3, r4, #4
   16e8a:	d0ef      	beq.n	16e6c <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16e8c:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16e8e:	2c00      	cmp	r4, #0
   16e90:	d1f1      	bne.n	16e76 <scan_connect_with_target.part.0+0x52>
   16e92:	e7eb      	b.n	16e6c <scan_connect_with_target.part.0+0x48>
   16e94:	00038984 	.word	0x00038984
   16e98:	20016190 	.word	0x20016190
   16e9c:	20016198 	.word	0x20016198

00016ea0 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   16ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   16ea4:	4f31      	ldr	r7, [pc, #196]	; (16f6c <scan_recv+0xcc>)
{
   16ea6:	b094      	sub	sp, #80	; 0x50
	memset(&scan_control, 0, sizeof(scan_control));
   16ea8:	2250      	movs	r2, #80	; 0x50
{
   16eaa:	4605      	mov	r5, r0
   16eac:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   16eae:	4668      	mov	r0, sp
   16eb0:	2100      	movs	r1, #0
   16eb2:	f020 fc86 	bl	377c2 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   16eb6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
   16eba:	f88d 2003 	strb.w	r2, [sp, #3]
	control->filter_cnt = 0;
   16ebe:	2200      	movs	r2, #0
   16ec0:	f88d 2000 	strb.w	r2, [sp]
	if (is_manufacturer_data_filter_enabled()) {
   16ec4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   16ec8:	b112      	cbz	r2, 16ed0 <scan_recv+0x30>
		control->filter_cnt++;
   16eca:	2301      	movs	r3, #1
   16ecc:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   16ed0:	7a2b      	ldrb	r3, [r5, #8]
	state->offset = net_buf_simple_headroom(buf);
   16ed2:	4620      	mov	r0, r4
   16ed4:	f003 0301 	and.w	r3, r3, #1
   16ed8:	f88d 3004 	strb.w	r3, [sp, #4]
   16edc:	f01c fc0e 	bl	336fc <net_buf_simple_headroom>
   16ee0:	4606      	mov	r6, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   16ee2:	466a      	mov	r2, sp
   16ee4:	4620      	mov	r0, r4
   16ee6:	4922      	ldr	r1, [pc, #136]	; (16f70 <scan_recv+0xd0>)
	state->len = buf->len;
   16ee8:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   16eec:	f003 fb4c 	bl	1a588 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   16ef0:	4b20      	ldr	r3, [pc, #128]	; (16f74 <scan_recv+0xd4>)
	buf->data = buf->__buf + state->offset;
   16ef2:	68a0      	ldr	r0, [r4, #8]
	scan_control.device_info.adv_data = ad;
   16ef4:	e9cd 3403 	strd	r3, r4, [sp, #12]
	if (control->all_mode &&
   16ef8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16efc:	fa10 f686 	uxtah	r6, r0, r6
   16f00:	6026      	str	r6, [r4, #0]
	buf->len = state->len;
   16f02:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.recv_info = info;
   16f06:	9502      	str	r5, [sp, #8]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   16f08:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   16f0a:	b1ab      	cbz	r3, 16f38 <scan_recv+0x98>
   16f0c:	f89d 2001 	ldrb.w	r2, [sp, #1]
   16f10:	f89d 3000 	ldrb.w	r3, [sp]
   16f14:	429a      	cmp	r2, r3
   16f16:	d113      	bne.n	16f40 <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   16f18:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16f1c:	a905      	add	r1, sp, #20
   16f1e:	a802      	add	r0, sp, #8
   16f20:	f7ff fee8 	bl	16cf4 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   16f24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   16f28:	b11b      	cbz	r3, 16f32 <scan_recv+0x92>
   16f2a:	4621      	mov	r1, r4
   16f2c:	4668      	mov	r0, sp
   16f2e:	f7ff ff79 	bl	16e24 <scan_connect_with_target.part.0>
}
   16f32:	b014      	add	sp, #80	; 0x50
   16f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   16f38:	f89d 3002 	ldrb.w	r3, [sp, #2]
   16f3c:	2b00      	cmp	r3, #0
   16f3e:	d1eb      	bne.n	16f18 <scan_recv+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16f40:	4b0d      	ldr	r3, [pc, #52]	; (16f78 <scan_recv+0xd8>)
   16f42:	681c      	ldr	r4, [r3, #0]
   16f44:	2c00      	cmp	r4, #0
   16f46:	d0f4      	beq.n	16f32 <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   16f48:	f89d 5004 	ldrb.w	r5, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16f4c:	3c04      	subs	r4, #4
   16f4e:	2c00      	cmp	r4, #0
   16f50:	d0ef      	beq.n	16f32 <scan_recv+0x92>
		if (cb->cb_addr->filter_no_match) {
   16f52:	6823      	ldr	r3, [r4, #0]
   16f54:	685b      	ldr	r3, [r3, #4]
   16f56:	b113      	cbz	r3, 16f5e <scan_recv+0xbe>
			cb->cb_addr->filter_no_match(device_info, connectable);
   16f58:	4629      	mov	r1, r5
   16f5a:	a802      	add	r0, sp, #8
   16f5c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16f5e:	1d23      	adds	r3, r4, #4
   16f60:	d0e7      	beq.n	16f32 <scan_recv+0x92>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16f62:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16f64:	2c00      	cmp	r4, #0
   16f66:	d1f1      	bne.n	16f4c <scan_recv+0xac>
   16f68:	e7e3      	b.n	16f32 <scan_recv+0x92>
   16f6a:	bf00      	nop
   16f6c:	20016144 	.word	0x20016144
   16f70:	00016ca5 	.word	0x00016ca5
   16f74:	20016190 	.word	0x20016190
   16f78:	20016198 	.word	0x20016198

00016f7c <bt_scan_init>:
{
   16f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f7e:	4605      	mov	r5, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   16f80:	4c17      	ldr	r4, [pc, #92]	; (16fe0 <bt_scan_init+0x64>)
	bt_le_scan_cb_register(&scan_cb);
   16f82:	4818      	ldr	r0, [pc, #96]	; (16fe4 <bt_scan_init+0x68>)
   16f84:	f003 fcc4 	bl	1a910 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   16f88:	2234      	movs	r2, #52	; 0x34
   16f8a:	2100      	movs	r1, #0
   16f8c:	4620      	mov	r0, r4
   16f8e:	f020 fc18 	bl	377c2 <memset>
	if (init) {
   16f92:	4627      	mov	r7, r4
   16f94:	b1d5      	cbz	r5, 16fcc <bt_scan_init+0x50>
		bt_scan.connect_if_match = init->connect_if_match;
   16f96:	792b      	ldrb	r3, [r5, #4]
   16f98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (init->scan_param) {
   16f9c:	682c      	ldr	r4, [r5, #0]
   16f9e:	b164      	cbz	r4, 16fba <bt_scan_init+0x3e>
			bt_scan.scan_param = *init->scan_param;
   16fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16fa2:	f107 0638 	add.w	r6, r7, #56	; 0x38
   16fa6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   16fa8:	6823      	ldr	r3, [r4, #0]
   16faa:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   16fac:	68aa      	ldr	r2, [r5, #8]
   16fae:	b13a      	cbz	r2, 16fc0 <bt_scan_init+0x44>
			bt_scan.conn_param = *init->conn_param;
   16fb0:	4b0d      	ldr	r3, [pc, #52]	; (16fe8 <bt_scan_init+0x6c>)
   16fb2:	6810      	ldr	r0, [r2, #0]
   16fb4:	6851      	ldr	r1, [r2, #4]
   16fb6:	c303      	stmia	r3!, {r0, r1}
}
   16fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
   16fba:	f7ff fe61 	bl	16c80 <scan_default_param_set>
   16fbe:	e7f5      	b.n	16fac <bt_scan_init+0x30>
	bt_scan.conn_param = *conn_param;
   16fc0:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   16fc4:	4909      	ldr	r1, [pc, #36]	; (16fec <bt_scan_init+0x70>)
   16fc6:	e9c7 1313 	strd	r1, r3, [r7, #76]	; 0x4c
}
   16fca:	e7f5      	b.n	16fb8 <bt_scan_init+0x3c>
		scan_default_param_set();
   16fcc:	f7ff fe58 	bl	16c80 <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
   16fd0:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   16fd4:	4a05      	ldr	r2, [pc, #20]	; (16fec <bt_scan_init+0x70>)
		bt_scan.connect_if_match = false;
   16fd6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
	bt_scan.conn_param = *conn_param;
   16fda:	e9c4 2313 	strd	r2, r3, [r4, #76]	; 0x4c
}
   16fde:	e7eb      	b.n	16fb8 <bt_scan_init+0x3c>
   16fe0:	20016144 	.word	0x20016144
   16fe4:	20014774 	.word	0x20014774
   16fe8:	20016190 	.word	0x20016190
   16fec:	00280018 	.word	0x00280018

00016ff0 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   16ff0:	b108      	cbz	r0, 16ff6 <bt_scan_start+0x6>
   16ff2:	2801      	cmp	r0, #1
   16ff4:	d106      	bne.n	17004 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   16ff6:	4b05      	ldr	r3, [pc, #20]	; (1700c <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   16ff8:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   16ffa:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   16ffe:	4804      	ldr	r0, [pc, #16]	; (17010 <bt_scan_start+0x20>)
   17000:	f003 bbf8 	b.w	1a7f4 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   17004:	f06f 0015 	mvn.w	r0, #21
   17008:	4770      	bx	lr
   1700a:	bf00      	nop
   1700c:	20016144 	.word	0x20016144
   17010:	2001617c 	.word	0x2001617c

00017014 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   17014:	b508      	push	{r3, lr}
	k_sched_lock();
   17016:	f014 fff3 	bl	2c000 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   1701a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   1701e:	4801      	ldr	r0, [pc, #4]	; (17024 <before_nse+0x10>)
   17020:	f01b ba01 	b.w	32426 <z_arm_save_fp_context>
   17024:	200161a0 	.word	0x200161a0

00017028 <after_nse>:

void after_nse(void)
{
   17028:	b508      	push	{r3, lr}
	k_sched_unlock();
   1702a:	f015 fa7d 	bl	2c528 <k_sched_unlock>
	z_arm_restore_fp_context(&context_buffer);
}
   1702e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   17032:	4801      	ldr	r0, [pc, #4]	; (17038 <after_nse+0x10>)
   17034:	f01b b9f8 	b.w	32428 <z_arm_restore_fp_context>
   17038:	200161a0 	.word	0x200161a0

0001703c <uECC_set_rng>:
static uECC_RNG_Function g_rng_function = 0;
#endif

void uECC_set_rng(uECC_RNG_Function rng_function)
{
	g_rng_function = rng_function;
   1703c:	4b01      	ldr	r3, [pc, #4]	; (17044 <uECC_set_rng+0x8>)
   1703e:	6018      	str	r0, [r3, #0]
}
   17040:	4770      	bx	lr
   17042:	bf00      	nop
   17044:	20014780 	.word	0x20014780

00017048 <uECC_get_rng>:

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   17048:	4b01      	ldr	r3, [pc, #4]	; (17050 <uECC_get_rng+0x8>)
   1704a:	6818      	ldr	r0, [r3, #0]
   1704c:	4770      	bx	lr
   1704e:	bf00      	nop
   17050:	20014780 	.word	0x20014780

00017054 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   17054:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   17056:	2208      	movs	r2, #8
{
   17058:	b089      	sub	sp, #36	; 0x24
   1705a:	460c      	mov	r4, r1
   1705c:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1705e:	f01a f826 	bl	310ae <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   17062:	2700      	movs	r7, #0
	tmp[3] = product[11];
   17064:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	tmp[4] = product[12];
	tmp[5] = product[13];
	tmp[6] = product[14];
	tmp[7] = product[15];
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   17066:	466a      	mov	r2, sp
	tmp[3] = product[11];
   17068:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   1706a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1706c:	4668      	mov	r0, sp
	tmp[4] = product[12];
   1706e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   17070:	6b4b      	ldr	r3, [r1, #52]	; 0x34
	tmp[0] = tmp[1] = tmp[2] = 0;
   17072:	e9cd 7701 	strd	r7, r7, [sp, #4]
	tmp[5] = product[13];
   17076:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   17078:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	tmp[0] = tmp[1] = tmp[2] = 0;
   1707a:	9700      	str	r7, [sp, #0]
	tmp[6] = product[14];
   1707c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1707e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   17080:	4669      	mov	r1, sp
	tmp[7] = product[15];
   17082:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   17084:	2308      	movs	r3, #8
   17086:	f019 ff14 	bl	30eb2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1708a:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1708c:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1708e:	466a      	mov	r2, sp
   17090:	4631      	mov	r1, r6
   17092:	4630      	mov	r0, r6
   17094:	f019 ff0d 	bl	30eb2 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   17098:	6b23      	ldr	r3, [r4, #48]	; 0x30
	tmp[4] = product[13];
	tmp[5] = product[14];
	tmp[6] = product[15];
	tmp[7] = 0;
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1709a:	466a      	mov	r2, sp
	tmp[3] = product[12];
   1709c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   1709e:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   170a0:	4669      	mov	r1, sp
	tmp[4] = product[13];
   170a2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   170a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   170a6:	4405      	add	r5, r0
	tmp[5] = product[14];
   170a8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   170aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   170ac:	4668      	mov	r0, sp
	tmp[7] = 0;
   170ae:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   170b2:	2308      	movs	r3, #8
   170b4:	f019 fefd 	bl	30eb2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   170b8:	4631      	mov	r1, r6
   170ba:	2308      	movs	r3, #8
   170bc:	466a      	mov	r2, sp
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   170be:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   170c0:	4630      	mov	r0, r6
   170c2:	f019 fef6 	bl	30eb2 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   170c6:	6a23      	ldr	r3, [r4, #32]
	tmp[1] = product[9];
	tmp[2] = product[10];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
	tmp[7] = product[15];
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   170c8:	466a      	mov	r2, sp
	tmp[0] = product[8];
   170ca:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   170cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   170ce:	4405      	add	r5, r0
	tmp[1] = product[9];
   170d0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   170d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   170d4:	4630      	mov	r0, r6
	tmp[2] = product[10];
   170d6:	9302      	str	r3, [sp, #8]
	tmp[6] = product[14];
   170d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	tmp[3] = tmp[4] = tmp[5] = 0;
   170da:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[14];
   170de:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   170e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = tmp[4] = tmp[5] = 0;
   170e2:	9703      	str	r7, [sp, #12]
	tmp[7] = product[15];
   170e4:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   170e6:	2308      	movs	r3, #8
   170e8:	f019 fee3 	bl	30eb2 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   170ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp[1] = product[10];
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   170ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[0] = product[9];
   170f0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   170f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[4] = product[14];
   170f4:	9204      	str	r2, [sp, #16]
	tmp[1] = product[10];
   170f6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   170f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[5] = product[15];
   170fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[2] = product[11];
   170fc:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   170fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   17100:	4405      	add	r5, r0
	tmp[6] = product[13];
   17102:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[3] = product[13];
   17106:	9303      	str	r3, [sp, #12]
	tmp[7] = product[8];
   17108:	6a23      	ldr	r3, [r4, #32]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1710a:	466a      	mov	r2, sp
	tmp[7] = product[8];
   1710c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1710e:	4630      	mov	r0, r6
   17110:	2308      	movs	r3, #8
   17112:	f019 fece 	bl	30eb2 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   17116:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[1] = product[12];
	tmp[2] = product[13];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
	tmp[7] = product[10];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   17118:	466a      	mov	r2, sp
	tmp[0] = product[11];
   1711a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   1711c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1711e:	4405      	add	r5, r0
	tmp[1] = product[12];
   17120:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   17122:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   17124:	4630      	mov	r0, r6
	tmp[2] = product[13];
   17126:	9302      	str	r3, [sp, #8]
	tmp[6] = product[8];
   17128:	6a23      	ldr	r3, [r4, #32]
	tmp[3] = tmp[4] = tmp[5] = 0;
   1712a:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[8];
   1712e:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   17130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[3] = tmp[4] = tmp[5] = 0;
   17132:	9703      	str	r7, [sp, #12]
	tmp[7] = product[10];
   17134:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   17136:	2308      	movs	r3, #8
   17138:	f019 ffdc 	bl	310f4 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   1713c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	tmp[2] = product[14];
	tmp[3] = product[15];
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
	tmp[7] = product[11];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1713e:	466a      	mov	r2, sp
	tmp[0] = product[12];
   17140:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   17142:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   17144:	1a2d      	subs	r5, r5, r0
	tmp[1] = product[13];
   17146:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   17148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1714a:	4630      	mov	r0, r6
	tmp[2] = product[14];
   1714c:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   1714e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[4] = tmp[5] = 0;
   17150:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[3] = product[15];
   17154:	9303      	str	r3, [sp, #12]
	tmp[6] = product[9];
   17156:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17158:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   1715a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1715c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1715e:	2308      	movs	r3, #8
   17160:	f019 ffc8 	bl	310f4 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   17164:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[3] = product[8];
	tmp[4] = product[9];
	tmp[5] = product[10];
	tmp[6] = 0;
	tmp[7] = product[12];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   17166:	466a      	mov	r2, sp
	tmp[0] = product[13];
   17168:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   1716a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1716c:	1a2d      	subs	r5, r5, r0
	tmp[1] = product[14];
   1716e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   17170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   17172:	4630      	mov	r0, r6
	tmp[2] = product[15];
   17174:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   17176:	6a23      	ldr	r3, [r4, #32]
   17178:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   1717a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1717c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   1717e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   17180:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   17184:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17186:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   17188:	2308      	movs	r3, #8
   1718a:	f019 ffb3 	bl	310f4 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   1718e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   17190:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[14];
   17192:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   17194:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = product[9];
	tmp[4] = product[10];
	tmp[5] = product[11];
	tmp[6] = 0;
	tmp[7] = product[13];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   17196:	466a      	mov	r2, sp
	tmp[2] = 0;
   17198:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   1719c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1719e:	4630      	mov	r0, r6
	tmp[3] = product[9];
   171a0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   171a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   171a4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   171a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   171a8:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   171ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
   171ae:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   171b0:	2308      	movs	r3, #8
   171b2:	f019 ff9f 	bl	310f4 <uECC_vli_sub>

	if (carry < 0) {
   171b6:	1a2d      	subs	r5, r5, r0
   171b8:	d410      	bmi.n	171dc <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   171ba:	4c0d      	ldr	r4, [pc, #52]	; (171f0 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   171bc:	b935      	cbnz	r5, 171cc <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   171be:	2208      	movs	r2, #8
   171c0:	4631      	mov	r1, r6
   171c2:	4620      	mov	r0, r4
   171c4:	f019 ff7f 	bl	310c6 <uECC_vli_cmp_unsafe>
		while (carry || 
   171c8:	2801      	cmp	r0, #1
   171ca:	d00f      	beq.n	171ec <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   171cc:	2308      	movs	r3, #8
   171ce:	4622      	mov	r2, r4
   171d0:	4631      	mov	r1, r6
   171d2:	4630      	mov	r0, r6
   171d4:	f019 ff8e 	bl	310f4 <uECC_vli_sub>
   171d8:	1a2d      	subs	r5, r5, r0
   171da:	e7ef      	b.n	171bc <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   171dc:	4a04      	ldr	r2, [pc, #16]	; (171f0 <vli_mmod_fast_secp256r1+0x19c>)
   171de:	2308      	movs	r3, #8
   171e0:	4631      	mov	r1, r6
   171e2:	4630      	mov	r0, r6
   171e4:	f019 fe65 	bl	30eb2 <uECC_vli_add>
		while (carry < 0);
   171e8:	182d      	adds	r5, r5, r0
   171ea:	d4f8      	bmi.n	171de <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   171ec:	b009      	add	sp, #36	; 0x24
   171ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   171f0:	00038bbc 	.word	0x00038bbc

000171f4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   171f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   171f6:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   171f8:	4e26      	ldr	r6, [pc, #152]	; (17294 <tc_aes128_set_encrypt_key+0xa0>)
{
   171fa:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   171fc:	ad01      	add	r5, sp, #4
{
   171fe:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   17200:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   17202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   17204:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   17206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   17208:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1720c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   17210:	4638      	mov	r0, r7
   17212:	2f00      	cmp	r7, #0
   17214:	d039      	beq.n	1728a <tc_aes128_set_encrypt_key+0x96>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   17216:	2c00      	cmp	r4, #0
   17218:	d039      	beq.n	1728e <tc_aes128_set_encrypt_key+0x9a>
   1721a:	1f38      	subs	r0, r7, #4
   1721c:	4602      	mov	r2, r0
   1721e:	4621      	mov	r1, r4
   17220:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   17222:	784b      	ldrb	r3, [r1, #1]
   17224:	780d      	ldrb	r5, [r1, #0]
   17226:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   17228:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1722c:	78cd      	ldrb	r5, [r1, #3]
   1722e:	3104      	adds	r1, #4
   17230:	432b      	orrs	r3, r5
   17232:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   17236:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   17238:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1723c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   17240:	d1ef      	bne.n	17222 <tc_aes128_set_encrypt_key+0x2e>
   17242:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   17244:	4c14      	ldr	r4, [pc, #80]	; (17298 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   17246:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   17248:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1724a:	d116      	bne.n	1727a <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1724c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   17250:	5ca5      	ldrb	r5, [r4, r2]
   17252:	0e1a      	lsrs	r2, r3, #24
   17254:	5ca2      	ldrb	r2, [r4, r2]
   17256:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1725a:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1725e:	5d65      	ldrb	r5, [r4, r5]
   17260:	b2db      	uxtb	r3, r3
   17262:	5ce3      	ldrb	r3, [r4, r3]
   17264:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   17268:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1726c:	ad0c      	add	r5, sp, #48	; 0x30
   1726e:	f021 0303 	bic.w	r3, r1, #3
   17272:	442b      	add	r3, r5
   17274:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   17278:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1727a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1727e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   17280:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   17282:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   17284:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   17286:	d1de      	bne.n	17246 <tc_aes128_set_encrypt_key+0x52>
	}

	return TC_CRYPTO_SUCCESS;
   17288:	2001      	movs	r0, #1
}
   1728a:	b00d      	add	sp, #52	; 0x34
   1728c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1728e:	4620      	mov	r0, r4
   17290:	e7fb      	b.n	1728a <tc_aes128_set_encrypt_key+0x96>
   17292:	bf00      	nop
   17294:	00038994 	.word	0x00038994
   17298:	0003afe7 	.word	0x0003afe7

0001729c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1729c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   172a0:	4615      	mov	r5, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   172a2:	4606      	mov	r6, r0
{
   172a4:	b089      	sub	sp, #36	; 0x24
	if (out == (uint8_t *) 0) {
   172a6:	2800      	cmp	r0, #0
   172a8:	d058      	beq.n	1735c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   172aa:	2900      	cmp	r1, #0
   172ac:	d059      	beq.n	17362 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   172ae:	2a00      	cmp	r2, #0
   172b0:	d059      	beq.n	17366 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   172b2:	2310      	movs	r3, #16
   172b4:	460a      	mov	r2, r1
   172b6:	4668      	mov	r0, sp
   172b8:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
   172ba:	4c2c      	ldr	r4, [pc, #176]	; (1736c <tc_aes_encrypt+0xd0>)
	(void)_copy(state, sizeof(state), in, sizeof(state));
   172bc:	f019 fcb9 	bl	30c32 <_copy>
	add_round_key(state, s->words);
   172c0:	4629      	mov	r1, r5
   172c2:	4668      	mov	r0, sp
   172c4:	f01a fbcc 	bl	31a60 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   172c8:	46a1      	mov	r9, r4
   172ca:	f105 0710 	add.w	r7, r5, #16
   172ce:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   172d0:	46e8      	mov	r8, sp
{
   172d2:	466a      	mov	r2, sp
   172d4:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   172d6:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   172d8:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   172da:	5c61      	ldrb	r1, [r4, r1]
   172dc:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   172e0:	d1f9      	bne.n	172d6 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   172e2:	4668      	mov	r0, sp
   172e4:	f01a fc01 	bl	31aea <shift_rows>
	mult_row_column(t, s);
   172e8:	4669      	mov	r1, sp
   172ea:	a804      	add	r0, sp, #16
   172ec:	f01a fc36 	bl	31b5c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   172f0:	a901      	add	r1, sp, #4
   172f2:	a805      	add	r0, sp, #20
   172f4:	f01a fc32 	bl	31b5c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   172f8:	a902      	add	r1, sp, #8
   172fa:	a806      	add	r0, sp, #24
   172fc:	f01a fc2e 	bl	31b5c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   17300:	a903      	add	r1, sp, #12
   17302:	a807      	add	r0, sp, #28
   17304:	f01a fc2a 	bl	31b5c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   17308:	2310      	movs	r3, #16
   1730a:	4668      	mov	r0, sp
   1730c:	4619      	mov	r1, r3
   1730e:	eb0d 0203 	add.w	r2, sp, r3
   17312:	f019 fc8e 	bl	30c32 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   17316:	4639      	mov	r1, r7
   17318:	4668      	mov	r0, sp
   1731a:	3710      	adds	r7, #16
   1731c:	f01a fba0 	bl	31a60 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   17320:	42af      	cmp	r7, r5
   17322:	d1d5      	bne.n	172d0 <tc_aes_encrypt+0x34>
   17324:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   17326:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   1732a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   1732c:	f819 3003 	ldrb.w	r3, [r9, r3]
   17330:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   17334:	d1f7      	bne.n	17326 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   17336:	4668      	mov	r0, sp
   17338:	f01a fbd7 	bl	31aea <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1733c:	4629      	mov	r1, r5
   1733e:	4668      	mov	r0, sp
   17340:	f01a fb8e 	bl	31a60 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   17344:	2310      	movs	r3, #16
   17346:	466a      	mov	r2, sp
   17348:	4619      	mov	r1, r3
   1734a:	4630      	mov	r0, r6
   1734c:	f019 fc71 	bl	30c32 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   17350:	4668      	mov	r0, sp
   17352:	2210      	movs	r2, #16
   17354:	4621      	mov	r1, r4
   17356:	f019 fc79 	bl	30c4c <_set>

	return TC_CRYPTO_SUCCESS;
   1735a:	2001      	movs	r0, #1
}
   1735c:	b009      	add	sp, #36	; 0x24
   1735e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   17362:	4608      	mov	r0, r1
   17364:	e7fa      	b.n	1735c <tc_aes_encrypt+0xc0>
   17366:	4610      	mov	r0, r2
   17368:	e7f8      	b.n	1735c <tc_aes_encrypt+0xc0>
   1736a:	bf00      	nop
   1736c:	0003afe7 	.word	0x0003afe7

00017370 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   17370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   17374:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   17376:	6803      	ldr	r3, [r0, #0]
{
   17378:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1737a:	9303      	str	r3, [sp, #12]
   1737c:	6843      	ldr	r3, [r0, #4]
   1737e:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 17538 <compress+0x1c8>
   17382:	9304      	str	r3, [sp, #16]
   17384:	6883      	ldr	r3, [r0, #8]
   17386:	9c03      	ldr	r4, [sp, #12]
   17388:	9305      	str	r3, [sp, #20]
   1738a:	68c3      	ldr	r3, [r0, #12]
{
   1738c:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1738e:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   17390:	6903      	ldr	r3, [r0, #16]
   17392:	9307      	str	r3, [sp, #28]
   17394:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   17396:	e9dd e206 	ldrd	lr, r2, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1739a:	9308      	str	r3, [sp, #32]
   1739c:	6983      	ldr	r3, [r0, #24]
   1739e:	9309      	str	r3, [sp, #36]	; 0x24
   173a0:	69c3      	ldr	r3, [r0, #28]
   173a2:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
   173a6:	4698      	mov	r8, r3
   173a8:	930a      	str	r3, [sp, #40]	; 0x28
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   173aa:	9b05      	ldr	r3, [sp, #20]
   173ac:	9301      	str	r3, [sp, #4]
   173ae:	9b04      	ldr	r3, [sp, #16]
   173b0:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
   173b2:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
   173b4:	9e01      	ldr	r6, [sp, #4]
   173b6:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
   173b8:	ab0c      	add	r3, sp, #48	; 0x30
   173ba:	ba2d      	rev	r5, r5
   173bc:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   173be:	f85a 3b04 	ldr.w	r3, [sl], #4
   173c2:	3704      	adds	r7, #4
   173c4:	eb05 0903 	add.w	r9, r5, r3
   173c8:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   173cc:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
   173d0:	ea85 6572 	eor.w	r5, r5, r2, ror #25
   173d4:	444d      	add	r5, r9
   173d6:	ea2b 0302 	bic.w	r3, fp, r2
   173da:	ea02 090c 	and.w	r9, r2, ip
   173de:	ea83 0309 	eor.w	r3, r3, r9
   173e2:	442b      	add	r3, r5
   173e4:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   173e6:	e9dd 1500 	ldrd	r1, r5, [sp]
	return (((a) >> n) | ((a) << (32 - n)));
   173ea:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   173ee:	404d      	eors	r5, r1
   173f0:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   173f4:	4025      	ands	r5, r4
   173f6:	ea01 0906 	and.w	r9, r1, r6
   173fa:	ea85 0509 	eor.w	r5, r5, r9
   173fe:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
   17402:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   17404:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   17406:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   1740a:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   1740c:	46b6      	mov	lr, r6
   1740e:	46d8      	mov	r8, fp
   17410:	f040 8081 	bne.w	17516 <compress+0x1a6>
   17414:	f04f 0a10 	mov.w	sl, #16
   17418:	4946      	ldr	r1, [pc, #280]	; (17534 <compress+0x1c4>)
   1741a:	910b      	str	r1, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   1741c:	4651      	mov	r1, sl
   1741e:	f10a 0a01 	add.w	sl, sl, #1
   17422:	ae1c      	add	r6, sp, #112	; 0x70
   17424:	f00a 070f 	and.w	r7, sl, #15
   17428:	eb06 0787 	add.w	r7, r6, r7, lsl #2
   1742c:	f857 6c40 	ldr.w	r6, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   17430:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   17434:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
   17438:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1743c:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
   1743e:	9602      	str	r6, [sp, #8]
		s0 = sigma0(s0);
   17440:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   17444:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
   17448:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1744a:	eb06 0989 	add.w	r9, r6, r9, lsl #2
   1744e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
   17452:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   17456:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
   1745a:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1745e:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
   17462:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   17466:	4431      	add	r1, r6
		s0 = sigma0(s0);
   17468:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
   1746a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
   1746e:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
   17472:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   17476:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1747a:	4441      	add	r1, r8
   1747c:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1747e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   17480:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   17484:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   17488:	ea05 0802 	and.w	r8, r5, r2
   1748c:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
   17490:	ea2c 0705 	bic.w	r7, ip, r5
   17494:	f856 eb04 	ldr.w	lr, [r6], #4
   17498:	ea87 0708 	eor.w	r7, r7, r8
   1749c:	ea89 6975 	eor.w	r9, r9, r5, ror #25
   174a0:	444f      	add	r7, r9
   174a2:	4477      	add	r7, lr
   174a4:	960b      	str	r6, [sp, #44]	; 0x2c
		t2 = Sigma0(a) + Maj(a, b, c);
   174a6:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   174a8:	4439      	add	r1, r7
   174aa:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
   174ac:	ea04 0e06 	and.w	lr, r4, r6
   174b0:	ea84 0b06 	eor.w	fp, r4, r6
		h = g; g = f; f = e; e = d + t1;
   174b4:	9e01      	ldr	r6, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
   174b6:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
   174ba:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
   174bc:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
   174c0:	ea0b 0b03 	and.w	fp, fp, r3
   174c4:	ea8b 0b0e 	eor.w	fp, fp, lr
		h = g; g = f; f = e; e = d + t1;
   174c8:	46b0      	mov	r8, r6
		t2 = Sigma0(a) + Maj(a, b, c);
   174ca:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
   174ce:	9e00      	ldr	r6, [sp, #0]
   174d0:	445f      	add	r7, fp
	for ( ; i < 64; ++i) {
   174d2:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   174d6:	46e3      	mov	fp, ip
		d = c; c = b; b = a; a = t1 + t2;
   174d8:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
   174da:	9601      	str	r6, [sp, #4]
   174dc:	d123      	bne.n	17526 <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   174de:	9e03      	ldr	r6, [sp, #12]
   174e0:	440e      	add	r6, r1
   174e2:	9904      	ldr	r1, [sp, #16]
   174e4:	6006      	str	r6, [r0, #0]
   174e6:	4419      	add	r1, r3
   174e8:	9b05      	ldr	r3, [sp, #20]
   174ea:	6041      	str	r1, [r0, #4]
   174ec:	4423      	add	r3, r4
   174ee:	9900      	ldr	r1, [sp, #0]
   174f0:	6083      	str	r3, [r0, #8]
   174f2:	9b06      	ldr	r3, [sp, #24]
   174f4:	440b      	add	r3, r1
   174f6:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   174f8:	9b07      	ldr	r3, [sp, #28]
   174fa:	4443      	add	r3, r8
   174fc:	6103      	str	r3, [r0, #16]
   174fe:	9b08      	ldr	r3, [sp, #32]
   17500:	442b      	add	r3, r5
   17502:	6143      	str	r3, [r0, #20]
   17504:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17506:	4413      	add	r3, r2
   17508:	6183      	str	r3, [r0, #24]
   1750a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1750c:	4463      	add	r3, ip
   1750e:	61c3      	str	r3, [r0, #28]
}
   17510:	b01d      	add	sp, #116	; 0x74
   17512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17516:	9900      	ldr	r1, [sp, #0]
   17518:	46e3      	mov	fp, ip
   1751a:	e9cd 4100 	strd	r4, r1, [sp]
   1751e:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   17520:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   17522:	462a      	mov	r2, r5
   17524:	e745      	b.n	173b2 <compress+0x42>
   17526:	4694      	mov	ip, r2
   17528:	9400      	str	r4, [sp, #0]
   1752a:	462a      	mov	r2, r5
   1752c:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   1752e:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
   17530:	460b      	mov	r3, r1
   17532:	e773      	b.n	1741c <compress+0xac>
   17534:	00038ca8 	.word	0x00038ca8
   17538:	00038c68 	.word	0x00038c68

0001753c <tc_sha256_init>:
{
   1753c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   1753e:	4604      	mov	r4, r0
   17540:	b1c8      	cbz	r0, 17576 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   17542:	2270      	movs	r2, #112	; 0x70
   17544:	2100      	movs	r1, #0
   17546:	f019 fb81 	bl	30c4c <_set>
	s->iv[1] = 0xbb67ae85;
   1754a:	4b0b      	ldr	r3, [pc, #44]	; (17578 <tc_sha256_init+0x3c>)
   1754c:	4a0b      	ldr	r2, [pc, #44]	; (1757c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   1754e:	490c      	ldr	r1, [pc, #48]	; (17580 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   17550:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   17554:	4b0b      	ldr	r3, [pc, #44]	; (17584 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   17556:	480c      	ldr	r0, [pc, #48]	; (17588 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   17558:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   1755c:	4b0b      	ldr	r3, [pc, #44]	; (1758c <tc_sha256_init+0x50>)
   1755e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   17562:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   17564:	4b0a      	ldr	r3, [pc, #40]	; (17590 <tc_sha256_init+0x54>)
   17566:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   17568:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1756c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   17570:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   17574:	61e3      	str	r3, [r4, #28]
}
   17576:	bd10      	pop	{r4, pc}
   17578:	bb67ae85 	.word	0xbb67ae85
   1757c:	6a09e667 	.word	0x6a09e667
   17580:	3c6ef372 	.word	0x3c6ef372
   17584:	a54ff53a 	.word	0xa54ff53a
   17588:	510e527f 	.word	0x510e527f
   1758c:	9b05688c 	.word	0x9b05688c
   17590:	1f83d9ab 	.word	0x1f83d9ab

00017594 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   17594:	4a09      	ldr	r2, [pc, #36]	; (175bc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   17596:	490a      	ldr	r1, [pc, #40]	; (175c0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   17598:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1759a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1759c:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1759e:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   175a0:	4908      	ldr	r1, [pc, #32]	; (175c4 <arch_swap+0x30>)
   175a2:	684b      	ldr	r3, [r1, #4]
   175a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   175a8:	604b      	str	r3, [r1, #4]
   175aa:	2300      	movs	r3, #0
   175ac:	f383 8811 	msr	BASEPRI, r3
   175b0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   175b4:	6893      	ldr	r3, [r2, #8]
}
   175b6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   175b8:	4770      	bx	lr
   175ba:	bf00      	nop
   175bc:	20016cd0 	.word	0x20016cd0
   175c0:	00039624 	.word	0x00039624
   175c4:	e000ed00 	.word	0xe000ed00

000175c8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   175c8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   175ca:	2b00      	cmp	r3, #0
   175cc:	db08      	blt.n	175e0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   175ce:	2201      	movs	r2, #1
   175d0:	f000 001f 	and.w	r0, r0, #31
   175d4:	fa02 f000 	lsl.w	r0, r2, r0
   175d8:	4a02      	ldr	r2, [pc, #8]	; (175e4 <arch_irq_enable+0x1c>)
   175da:	095b      	lsrs	r3, r3, #5
   175dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   175e0:	4770      	bx	lr
   175e2:	bf00      	nop
   175e4:	e000e100 	.word	0xe000e100

000175e8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   175e8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   175ea:	2b00      	cmp	r3, #0
   175ec:	db0d      	blt.n	1760a <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   175ee:	2201      	movs	r2, #1
   175f0:	f000 001f 	and.w	r0, r0, #31
   175f4:	fa02 f000 	lsl.w	r0, r2, r0
   175f8:	095b      	lsrs	r3, r3, #5
   175fa:	4a04      	ldr	r2, [pc, #16]	; (1760c <arch_irq_disable+0x24>)
   175fc:	3320      	adds	r3, #32
   175fe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   17602:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17606:	f3bf 8f6f 	isb	sy
}
   1760a:	4770      	bx	lr
   1760c:	e000e100 	.word	0xe000e100

00017610 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   17610:	4b05      	ldr	r3, [pc, #20]	; (17628 <arch_irq_is_enabled+0x18>)
   17612:	0942      	lsrs	r2, r0, #5
   17614:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17618:	2301      	movs	r3, #1
   1761a:	f000 001f 	and.w	r0, r0, #31
   1761e:	fa03 f000 	lsl.w	r0, r3, r0
}
   17622:	4010      	ands	r0, r2
   17624:	4770      	bx	lr
   17626:	bf00      	nop
   17628:	e000e100 	.word	0xe000e100

0001762c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1762c:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1762e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   17630:	2c07      	cmp	r4, #7
{
   17632:	4605      	mov	r5, r0
   17634:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   17636:	d90f      	bls.n	17658 <z_arm_irq_priority_set+0x2c>
   17638:	2358      	movs	r3, #88	; 0x58
   1763a:	4a10      	ldr	r2, [pc, #64]	; (1767c <z_arm_irq_priority_set+0x50>)
   1763c:	4910      	ldr	r1, [pc, #64]	; (17680 <z_arm_irq_priority_set+0x54>)
   1763e:	4811      	ldr	r0, [pc, #68]	; (17684 <z_arm_irq_priority_set+0x58>)
   17640:	f018 fb16 	bl	2fc70 <printk>
   17644:	4631      	mov	r1, r6
   17646:	4810      	ldr	r0, [pc, #64]	; (17688 <z_arm_irq_priority_set+0x5c>)
   17648:	2307      	movs	r3, #7
   1764a:	462a      	mov	r2, r5
   1764c:	f018 fb10 	bl	2fc70 <printk>
   17650:	2158      	movs	r1, #88	; 0x58
   17652:	480a      	ldr	r0, [pc, #40]	; (1767c <z_arm_irq_priority_set+0x50>)
   17654:	f018 fdf2 	bl	3023c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   17658:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1765a:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1765c:	bfac      	ite	ge
   1765e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17662:	4b0a      	ldrlt	r3, [pc, #40]	; (1768c <z_arm_irq_priority_set+0x60>)
   17664:	ea4f 1444 	mov.w	r4, r4, lsl #5
   17668:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1766a:	bfab      	itete	ge
   1766c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17670:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17674:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17678:	555c      	strblt	r4, [r3, r5]
}
   1767a:	bd70      	pop	{r4, r5, r6, pc}
   1767c:	0003b0e7 	.word	0x0003b0e7
   17680:	0003b11d 	.word	0x0003b11d
   17684:	0003a56b 	.word	0x0003a56b
   17688:	0003b138 	.word	0x0003b138
   1768c:	e000ed14 	.word	0xe000ed14

00017690 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   17690:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   17692:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   17694:	4b04      	ldr	r3, [pc, #16]	; (176a8 <_arch_isr_direct_pm+0x18>)
   17696:	6a18      	ldr	r0, [r3, #32]
   17698:	b118      	cbz	r0, 176a2 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1769a:	2200      	movs	r2, #0
   1769c:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   1769e:	f01f fec3 	bl	37428 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   176a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   176a4:	bd08      	pop	{r3, pc}
   176a6:	bf00      	nop
   176a8:	20016cd0 	.word	0x20016cd0

000176ac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   176ac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   176b0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   176b2:	490b      	ldr	r1, [pc, #44]	; (176e0 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   176b4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   176b8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   176ba:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   176be:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   176c2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   176c4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   176c8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   176cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   176d0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   176d4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   176d6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   176d8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   176da:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   176dc:	4770      	bx	lr
   176de:	bf00      	nop
   176e0:	0002fdab 	.word	0x0002fdab

000176e4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   176e4:	4b08      	ldr	r3, [pc, #32]	; (17708 <arch_switch_to_main_thread+0x24>)
   176e6:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   176e8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   176ea:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   176ee:	4610      	mov	r0, r2
   176f0:	f381 8809 	msr	PSP, r1
   176f4:	2100      	movs	r1, #0
   176f6:	b663      	cpsie	if
   176f8:	f381 8811 	msr	BASEPRI, r1
   176fc:	f3bf 8f6f 	isb	sy
   17700:	2200      	movs	r2, #0
   17702:	2300      	movs	r3, #0
   17704:	f018 fb51 	bl	2fdaa <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   17708:	20016cd0 	.word	0x20016cd0

0001770c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1770c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1770e:	4606      	mov	r6, r0

	if (esf != NULL) {
   17710:	460c      	mov	r4, r1
   17712:	b301      	cbz	r1, 17756 <z_arm_fatal_error+0x4a>
   17714:	4b13      	ldr	r3, [pc, #76]	; (17764 <z_arm_fatal_error+0x58>)
   17716:	4d14      	ldr	r5, [pc, #80]	; (17768 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   17718:	4814      	ldr	r0, [pc, #80]	; (1776c <z_arm_fatal_error+0x60>)
   1771a:	1aed      	subs	r5, r5, r3
   1771c:	08ed      	lsrs	r5, r5, #3
   1771e:	01ad      	lsls	r5, r5, #6
   17720:	f045 0501 	orr.w	r5, r5, #1
   17724:	f8ad 5000 	strh.w	r5, [sp]
   17728:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   1772c:	6809      	ldr	r1, [r1, #0]
   1772e:	f018 fe0d 	bl	3034c <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   17732:	f8ad 5000 	strh.w	r5, [sp]
   17736:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1773a:	68e1      	ldr	r1, [r4, #12]
   1773c:	480c      	ldr	r0, [pc, #48]	; (17770 <z_arm_fatal_error+0x64>)
   1773e:	f018 fe05 	bl	3034c <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   17742:	462a      	mov	r2, r5
   17744:	69e1      	ldr	r1, [r4, #28]
   17746:	480b      	ldr	r0, [pc, #44]	; (17774 <z_arm_fatal_error+0x68>)
   17748:	f018 fdd3 	bl	302f2 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1774c:	462a      	mov	r2, r5
   1774e:	69a1      	ldr	r1, [r4, #24]
   17750:	4809      	ldr	r0, [pc, #36]	; (17778 <z_arm_fatal_error+0x6c>)
   17752:	f018 fdce 	bl	302f2 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   17756:	4621      	mov	r1, r4
   17758:	4630      	mov	r0, r6
}
   1775a:	b002      	add	sp, #8
   1775c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   17760:	f012 bbbc 	b.w	29edc <z_fatal_error>
   17764:	000387c0 	.word	0x000387c0
   17768:	000388d0 	.word	0x000388d0
   1776c:	0003b178 	.word	0x0003b178
   17770:	0003b1a7 	.word	0x0003b1a7
   17774:	0003b1d6 	.word	0x0003b1d6
   17778:	0003b1e5 	.word	0x0003b1e5

0001777c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1777c:	4a0e      	ldr	r2, [pc, #56]	; (177b8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1777e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   17780:	4b0e      	ldr	r3, [pc, #56]	; (177bc <z_arm_prep_c+0x40>)
   17782:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   17786:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   17788:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1778c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   17790:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   17794:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   17798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1779c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   177a0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   177a4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   177a8:	f012 fc10 	bl	29fcc <z_bss_zero>
	z_data_copy();
   177ac:	f015 fd54 	bl	2d258 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   177b0:	f000 fb20 	bl	17df4 <z_arm_interrupt_init>
	z_cstart();
   177b4:	f012 fc2e 	bl	2a014 <z_cstart>
   177b8:	00010000 	.word	0x00010000
   177bc:	e000ed00 	.word	0xe000ed00

000177c0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   177c0:	4913      	ldr	r1, [pc, #76]	; (17810 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   177c2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   177c4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   177c8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   177ca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   177ce:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   177d2:	2020      	movs	r0, #32
    msr BASEPRI, r0
   177d4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   177d8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   177dc:	4f0d      	ldr	r7, [pc, #52]	; (17814 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   177de:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   177e2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   177e4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   177e6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   177e8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   177ea:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   177ec:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   177ee:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   177f2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   177f6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   177fa:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   177fe:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   17802:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   17804:	f01a fe00 	bl	32408 <configure_builtin_stack_guard>
    pop {r2, lr}
   17808:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1780c:	4770      	bx	lr
   1780e:	0000      	.short	0x0000
    ldr r1, =_kernel
   17810:	20016cd0 	.word	0x20016cd0
    ldr v4, =_SCS_ICSR
   17814:	e000ed04 	.word	0xe000ed04

00017818 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   17818:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1781c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1781e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   17822:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   17826:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   17828:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1782c:	2902      	cmp	r1, #2
    beq _oops
   1782e:	d0ff      	beq.n	17830 <_oops>

00017830 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   17830:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   17832:	f01a fded 	bl	32410 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   17836:	bd01      	pop	{r0, pc}

00017838 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   17838:	4901      	ldr	r1, [pc, #4]	; (17840 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1783a:	2210      	movs	r2, #16
	str	r2, [r1]
   1783c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1783e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   17840:	e000ed10 	.word	0xe000ed10

00017844 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   17844:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   17846:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   17848:	f380 8811 	msr	BASEPRI, r0
	isb
   1784c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   17850:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   17854:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   17856:	b662      	cpsie	i
	isb
   17858:	f3bf 8f6f 	isb	sy

	bx	lr
   1785c:	4770      	bx	lr
   1785e:	bf00      	nop

00017860 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   17860:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   17862:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   17864:	f381 8811 	msr	BASEPRI, r1

	wfe
   17868:	bf20      	wfe

	msr	BASEPRI, r0
   1786a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1786e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   17870:	4770      	bx	lr
   17872:	bf00      	nop

00017874 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   17874:	bf30      	wfi
    b z_SysNmiOnReset
   17876:	f7ff bffd 	b.w	17874 <z_SysNmiOnReset>
   1787a:	bf00      	nop

0001787c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1787c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1787e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   17880:	4a0b      	ldr	r2, [pc, #44]	; (178b0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   17882:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   17884:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   17886:	bf1e      	ittt	ne
	movne	r1, #0
   17888:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1788a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   1788c:	f01f fdcc 	blne	37428 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   17890:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   17892:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   17896:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1789a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1789e:	4905      	ldr	r1, [pc, #20]	; (178b4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   178a0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   178a2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   178a4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   178a6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   178aa:	4903      	ldr	r1, [pc, #12]	; (178b8 <_isr_wrapper+0x3c>)
	bx r1
   178ac:	4708      	bx	r1
   178ae:	0000      	.short	0x0000
	ldr r2, =_kernel
   178b0:	20016cd0 	.word	0x20016cd0
	ldr r1, =_sw_isr_table
   178b4:	00038564 	.word	0x00038564
	ldr r1, =z_arm_int_exit
   178b8:	00017901 	.word	0x00017901

000178bc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   178bc:	f018 fcc6 	bl	3024c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   178c0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   178c2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   178c6:	4808      	ldr	r0, [pc, #32]	; (178e8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   178c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   178cc:	1840      	adds	r0, r0, r1
    msr PSP, r0
   178ce:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   178d2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   178d6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   178d8:	4308      	orrs	r0, r1
    msr CONTROL, r0
   178da:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   178de:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   178e2:	f7ff ff4b 	bl	1777c <z_arm_prep_c>
   178e6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   178e8:	20023230 	.word	0x20023230

000178ec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   178ec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   178f0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   178f4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   178f6:	4672      	mov	r2, lr
	bl z_arm_fault
   178f8:	f000 f96c 	bl	17bd4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   178fc:	bd01      	pop	{r0, pc}
   178fe:	bf00      	nop

00017900 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   17900:	4b04      	ldr	r3, [pc, #16]	; (17914 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   17902:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   17904:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   17906:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   17908:	d003      	beq.n	17912 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1790a:	4903      	ldr	r1, [pc, #12]	; (17918 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1790c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   17910:	600a      	str	r2, [r1, #0]

00017912 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   17912:	4770      	bx	lr
	ldr r3, =_kernel
   17914:	20016cd0 	.word	0x20016cd0
	ldr r1, =_SCS_ICSR
   17918:	e000ed04 	.word	0xe000ed04

0001791c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1791c:	b570      	push	{r4, r5, r6, lr}
   1791e:	4b28      	ldr	r3, [pc, #160]	; (179c0 <usage_fault.isra.0+0xa4>)
   17920:	4c28      	ldr	r4, [pc, #160]	; (179c4 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   17922:	4d29      	ldr	r5, [pc, #164]	; (179c8 <usage_fault.isra.0+0xac>)
   17924:	1ae4      	subs	r4, r4, r3
   17926:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   17928:	01a4      	lsls	r4, r4, #6
   1792a:	f044 0601 	orr.w	r6, r4, #1
   1792e:	4631      	mov	r1, r6
   17930:	4826      	ldr	r0, [pc, #152]	; (179cc <usage_fault.isra.0+0xb0>)
   17932:	f018 fcd1 	bl	302d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   17936:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   17938:	0193      	lsls	r3, r2, #6
   1793a:	d503      	bpl.n	17944 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   1793c:	4631      	mov	r1, r6
   1793e:	4824      	ldr	r0, [pc, #144]	; (179d0 <usage_fault.isra.0+0xb4>)
   17940:	f018 fcca 	bl	302d8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   17944:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17946:	01dd      	lsls	r5, r3, #7
   17948:	d504      	bpl.n	17954 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   1794a:	4822      	ldr	r0, [pc, #136]	; (179d4 <usage_fault.isra.0+0xb8>)
   1794c:	f044 0101 	orr.w	r1, r4, #1
   17950:	f018 fcc2 	bl	302d8 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   17954:	4d1c      	ldr	r5, [pc, #112]	; (179c8 <usage_fault.isra.0+0xac>)
   17956:	6aae      	ldr	r6, [r5, #40]	; 0x28
   17958:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   1795c:	d005      	beq.n	1796a <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1795e:	481e      	ldr	r0, [pc, #120]	; (179d8 <usage_fault.isra.0+0xbc>)
   17960:	f044 0101 	orr.w	r1, r4, #1
   17964:	f018 fcb8 	bl	302d8 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   17968:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1796a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1796c:	0318      	lsls	r0, r3, #12
   1796e:	d504      	bpl.n	1797a <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   17970:	481a      	ldr	r0, [pc, #104]	; (179dc <usage_fault.isra.0+0xc0>)
   17972:	f044 0101 	orr.w	r1, r4, #1
   17976:	f018 fcaf 	bl	302d8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1797a:	4d13      	ldr	r5, [pc, #76]	; (179c8 <usage_fault.isra.0+0xac>)
   1797c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1797e:	0351      	lsls	r1, r2, #13
   17980:	d504      	bpl.n	1798c <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   17982:	4817      	ldr	r0, [pc, #92]	; (179e0 <usage_fault.isra.0+0xc4>)
   17984:	f044 0101 	orr.w	r1, r4, #1
   17988:	f018 fca6 	bl	302d8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1798c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1798e:	039a      	lsls	r2, r3, #14
   17990:	d504      	bpl.n	1799c <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   17992:	4814      	ldr	r0, [pc, #80]	; (179e4 <usage_fault.isra.0+0xc8>)
   17994:	f044 0101 	orr.w	r1, r4, #1
   17998:	f018 fc9e 	bl	302d8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1799c:	4d0a      	ldr	r5, [pc, #40]	; (179c8 <usage_fault.isra.0+0xac>)
   1799e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   179a0:	03db      	lsls	r3, r3, #15
   179a2:	d504      	bpl.n	179ae <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   179a4:	4810      	ldr	r0, [pc, #64]	; (179e8 <usage_fault.isra.0+0xcc>)
   179a6:	f044 0101 	orr.w	r1, r4, #1
   179aa:	f018 fc95 	bl	302d8 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   179ae:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   179b0:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   179b2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   179b6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   179ba:	62ab      	str	r3, [r5, #40]	; 0x28
}
   179bc:	bd70      	pop	{r4, r5, r6, pc}
   179be:	bf00      	nop
   179c0:	000387c0 	.word	0x000387c0
   179c4:	000388d0 	.word	0x000388d0
   179c8:	e000ed00 	.word	0xe000ed00
   179cc:	0003b213 	.word	0x0003b213
   179d0:	0003b22b 	.word	0x0003b22b
   179d4:	0003b23e 	.word	0x0003b23e
   179d8:	0003b258 	.word	0x0003b258
   179dc:	0003b282 	.word	0x0003b282
   179e0:	0003b2a0 	.word	0x0003b2a0
   179e4:	0003b2c5 	.word	0x0003b2c5
   179e8:	0003b2df 	.word	0x0003b2df

000179ec <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   179ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179f0:	4b33      	ldr	r3, [pc, #204]	; (17ac0 <mem_manage_fault.isra.0+0xd4>)
   179f2:	4c34      	ldr	r4, [pc, #208]	; (17ac4 <mem_manage_fault.isra.0+0xd8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   179f4:	4d34      	ldr	r5, [pc, #208]	; (17ac8 <mem_manage_fault.isra.0+0xdc>)
   179f6:	1ae4      	subs	r4, r4, r3
   179f8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   179fa:	01a4      	lsls	r4, r4, #6
   179fc:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   17a00:	4607      	mov	r7, r0
   17a02:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   17a04:	4831      	ldr	r0, [pc, #196]	; (17acc <mem_manage_fault.isra.0+0xe0>)
   17a06:	4641      	mov	r1, r8
   17a08:	f018 fc66 	bl	302d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   17a0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   17a0e:	06d0      	lsls	r0, r2, #27
   17a10:	d503      	bpl.n	17a1a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   17a12:	4641      	mov	r1, r8
   17a14:	482e      	ldr	r0, [pc, #184]	; (17ad0 <mem_manage_fault.isra.0+0xe4>)
   17a16:	f018 fc5f 	bl	302d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   17a1a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17a1c:	0719      	lsls	r1, r3, #28
   17a1e:	d504      	bpl.n	17a2a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   17a20:	482c      	ldr	r0, [pc, #176]	; (17ad4 <mem_manage_fault.isra.0+0xe8>)
   17a22:	f044 0101 	orr.w	r1, r4, #1
   17a26:	f018 fc57 	bl	302d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   17a2a:	4d27      	ldr	r5, [pc, #156]	; (17ac8 <mem_manage_fault.isra.0+0xdc>)
   17a2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17a2e:	079a      	lsls	r2, r3, #30
   17a30:	d512      	bpl.n	17a58 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   17a32:	f044 0801 	orr.w	r8, r4, #1
   17a36:	4641      	mov	r1, r8
   17a38:	4827      	ldr	r0, [pc, #156]	; (17ad8 <mem_manage_fault.isra.0+0xec>)
   17a3a:	f018 fc4d 	bl	302d8 <log_0>
		uint32_t temp = SCB->MMFAR;
   17a3e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   17a40:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17a42:	061b      	lsls	r3, r3, #24
   17a44:	d508      	bpl.n	17a58 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   17a46:	4642      	mov	r2, r8
   17a48:	4824      	ldr	r0, [pc, #144]	; (17adc <mem_manage_fault.isra.0+0xf0>)
   17a4a:	f018 fc52 	bl	302f2 <log_1>
			if (from_hard_fault != 0) {
   17a4e:	b11f      	cbz	r7, 17a58 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   17a50:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   17a56:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   17a58:	4d1b      	ldr	r5, [pc, #108]	; (17ac8 <mem_manage_fault.isra.0+0xdc>)
   17a5a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   17a5c:	07d7      	lsls	r7, r2, #31
   17a5e:	d504      	bpl.n	17a6a <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   17a60:	481f      	ldr	r0, [pc, #124]	; (17ae0 <mem_manage_fault.isra.0+0xf4>)
   17a62:	f044 0101 	orr.w	r1, r4, #1
   17a66:	f018 fc37 	bl	302d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   17a6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17a6c:	0698      	lsls	r0, r3, #26
   17a6e:	d504      	bpl.n	17a7a <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   17a70:	481c      	ldr	r0, [pc, #112]	; (17ae4 <mem_manage_fault.isra.0+0xf8>)
   17a72:	f044 0101 	orr.w	r1, r4, #1
   17a76:	f018 fc2f 	bl	302d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   17a7a:	4b13      	ldr	r3, [pc, #76]	; (17ac8 <mem_manage_fault.isra.0+0xdc>)
   17a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   17a7e:	06d1      	lsls	r1, r2, #27
   17a80:	d402      	bmi.n	17a88 <mem_manage_fault.isra.0+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   17a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   17a84:	0792      	lsls	r2, r2, #30
   17a86:	d511      	bpl.n	17aac <mem_manage_fault.isra.0+0xc0>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   17a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17a8a:	06db      	lsls	r3, r3, #27
   17a8c:	d50e      	bpl.n	17aac <mem_manage_fault.isra.0+0xc0>
   17a8e:	4916      	ldr	r1, [pc, #88]	; (17ae8 <mem_manage_fault.isra.0+0xfc>)
   17a90:	f240 134f 	movw	r3, #335	; 0x14f
   17a94:	4a15      	ldr	r2, [pc, #84]	; (17aec <mem_manage_fault.isra.0+0x100>)
   17a96:	4816      	ldr	r0, [pc, #88]	; (17af0 <mem_manage_fault.isra.0+0x104>)
   17a98:	f018 f8ea 	bl	2fc70 <printk>
   17a9c:	4815      	ldr	r0, [pc, #84]	; (17af4 <mem_manage_fault.isra.0+0x108>)
   17a9e:	f018 f8e7 	bl	2fc70 <printk>
   17aa2:	f240 114f 	movw	r1, #335	; 0x14f
   17aa6:	4811      	ldr	r0, [pc, #68]	; (17aec <mem_manage_fault.isra.0+0x100>)
   17aa8:	f018 fbc8 	bl	3023c <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   17aac:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   17aae:	4a06      	ldr	r2, [pc, #24]	; (17ac8 <mem_manage_fault.isra.0+0xdc>)
   17ab0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17ab2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   17ab6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   17ab8:	7030      	strb	r0, [r6, #0]
}
   17aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17abe:	bf00      	nop
   17ac0:	000387c0 	.word	0x000387c0
   17ac4:	000388d0 	.word	0x000388d0
   17ac8:	e000ed00 	.word	0xe000ed00
   17acc:	0003b30a 	.word	0x0003b30a
   17ad0:	0003b320 	.word	0x0003b320
   17ad4:	0003b353 	.word	0x0003b353
   17ad8:	0003b366 	.word	0x0003b366
   17adc:	0003b37e 	.word	0x0003b37e
   17ae0:	0003b394 	.word	0x0003b394
   17ae4:	0003b3b3 	.word	0x0003b3b3
   17ae8:	0003b41c 	.word	0x0003b41c
   17aec:	0003b3e2 	.word	0x0003b3e2
   17af0:	0003a56b 	.word	0x0003a56b
   17af4:	0003b466 	.word	0x0003b466

00017af8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   17af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17afc:	4b2a      	ldr	r3, [pc, #168]	; (17ba8 <bus_fault.isra.0+0xb0>)
   17afe:	4c2b      	ldr	r4, [pc, #172]	; (17bac <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   17b00:	4d2b      	ldr	r5, [pc, #172]	; (17bb0 <bus_fault.isra.0+0xb8>)
   17b02:	1ae4      	subs	r4, r4, r3
   17b04:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   17b06:	01a4      	lsls	r4, r4, #6
   17b08:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   17b0c:	4607      	mov	r7, r0
   17b0e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   17b10:	4828      	ldr	r0, [pc, #160]	; (17bb4 <bus_fault.isra.0+0xbc>)
   17b12:	4641      	mov	r1, r8
   17b14:	f018 fbe0 	bl	302d8 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   17b18:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   17b1a:	04d1      	lsls	r1, r2, #19
   17b1c:	d503      	bpl.n	17b26 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   17b1e:	4641      	mov	r1, r8
   17b20:	4825      	ldr	r0, [pc, #148]	; (17bb8 <bus_fault.isra.0+0xc0>)
   17b22:	f018 fbd9 	bl	302d8 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   17b26:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17b28:	051a      	lsls	r2, r3, #20
   17b2a:	d504      	bpl.n	17b36 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   17b2c:	4823      	ldr	r0, [pc, #140]	; (17bbc <bus_fault.isra.0+0xc4>)
   17b2e:	f044 0101 	orr.w	r1, r4, #1
   17b32:	f018 fbd1 	bl	302d8 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   17b36:	4d1e      	ldr	r5, [pc, #120]	; (17bb0 <bus_fault.isra.0+0xb8>)
   17b38:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17b3a:	059b      	lsls	r3, r3, #22
   17b3c:	d512      	bpl.n	17b64 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   17b3e:	f044 0801 	orr.w	r8, r4, #1
   17b42:	4641      	mov	r1, r8
   17b44:	481e      	ldr	r0, [pc, #120]	; (17bc0 <bus_fault.isra.0+0xc8>)
   17b46:	f018 fbc7 	bl	302d8 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   17b4a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   17b4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17b4e:	0418      	lsls	r0, r3, #16
   17b50:	d508      	bpl.n	17b64 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   17b52:	4642      	mov	r2, r8
   17b54:	481b      	ldr	r0, [pc, #108]	; (17bc4 <bus_fault.isra.0+0xcc>)
   17b56:	f018 fbcc 	bl	302f2 <log_1>
			if (from_hard_fault != 0) {
   17b5a:	b11f      	cbz	r7, 17b64 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   17b5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17b5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   17b62:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   17b64:	4d12      	ldr	r5, [pc, #72]	; (17bb0 <bus_fault.isra.0+0xb8>)
   17b66:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17b68:	0559      	lsls	r1, r3, #21
   17b6a:	d504      	bpl.n	17b76 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   17b6c:	4816      	ldr	r0, [pc, #88]	; (17bc8 <bus_fault.isra.0+0xd0>)
   17b6e:	f044 0101 	orr.w	r1, r4, #1
   17b72:	f018 fbb1 	bl	302d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   17b76:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17b78:	05da      	lsls	r2, r3, #23
   17b7a:	d50d      	bpl.n	17b98 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   17b7c:	4813      	ldr	r0, [pc, #76]	; (17bcc <bus_fault.isra.0+0xd4>)
   17b7e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   17b82:	f018 fba9 	bl	302d8 <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   17b86:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   17b88:	4a09      	ldr	r2, [pc, #36]	; (17bb0 <bus_fault.isra.0+0xb8>)
   17b8a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17b8c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   17b90:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   17b92:	7030      	strb	r0, [r6, #0]
}
   17b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   17b98:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17b9a:	049b      	lsls	r3, r3, #18
   17b9c:	d5f3      	bpl.n	17b86 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   17b9e:	480c      	ldr	r0, [pc, #48]	; (17bd0 <bus_fault.isra.0+0xd8>)
   17ba0:	f044 0101 	orr.w	r1, r4, #1
   17ba4:	e7ed      	b.n	17b82 <bus_fault.isra.0+0x8a>
   17ba6:	bf00      	nop
   17ba8:	000387c0 	.word	0x000387c0
   17bac:	000388d0 	.word	0x000388d0
   17bb0:	e000ed00 	.word	0xe000ed00
   17bb4:	0003b4ca 	.word	0x0003b4ca
   17bb8:	0003b4e0 	.word	0x0003b4e0
   17bbc:	0003b353 	.word	0x0003b353
   17bc0:	0003b4f1 	.word	0x0003b4f1
   17bc4:	0003b50a 	.word	0x0003b50a
   17bc8:	0003b51f 	.word	0x0003b51f
   17bcc:	0003b53a 	.word	0x0003b53a
   17bd0:	0003b3b3 	.word	0x0003b3b3

00017bd4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   17bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   17bd8:	4b65      	ldr	r3, [pc, #404]	; (17d70 <z_arm_fault+0x19c>)
{
   17bda:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   17bdc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   17be0:	4689      	mov	r9, r1
   17be2:	4614      	mov	r4, r2
   17be4:	2700      	movs	r7, #0
   17be6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   17be8:	f3c8 0608 	ubfx	r6, r8, #0, #9
   17bec:	f387 8811 	msr	BASEPRI, r7
   17bf0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   17bf4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   17bf8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   17bfc:	d117      	bne.n	17c2e <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   17bfe:	07d0      	lsls	r0, r2, #31
   17c00:	d415      	bmi.n	17c2e <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   17c02:	0651      	lsls	r1, r2, #25
   17c04:	d403      	bmi.n	17c0e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   17c06:	0722      	lsls	r2, r4, #28
   17c08:	d40e      	bmi.n	17c28 <z_arm_fault+0x54>
			*nested_exc = true;
   17c0a:	2701      	movs	r7, #1
   17c0c:	e00e      	b.n	17c2c <z_arm_fault+0x58>
   17c0e:	4959      	ldr	r1, [pc, #356]	; (17d74 <z_arm_fault+0x1a0>)
   17c10:	4a59      	ldr	r2, [pc, #356]	; (17d78 <z_arm_fault+0x1a4>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   17c12:	485a      	ldr	r0, [pc, #360]	; (17d7c <z_arm_fault+0x1a8>)
   17c14:	1a52      	subs	r2, r2, r1
   17c16:	08d2      	lsrs	r2, r2, #3
   17c18:	0192      	lsls	r2, r2, #6
   17c1a:	f042 0101 	orr.w	r1, r2, #1
   17c1e:	f018 fb5b 	bl	302d8 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   17c22:	f014 0704 	ands.w	r7, r4, #4
   17c26:	d001      	beq.n	17c2c <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   17c28:	464d      	mov	r5, r9
	*nested_exc = false;
   17c2a:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   17c2c:	b97d      	cbnz	r5, 17c4e <z_arm_fault+0x7a>
   17c2e:	f240 33e1 	movw	r3, #993	; 0x3e1
   17c32:	4a53      	ldr	r2, [pc, #332]	; (17d80 <z_arm_fault+0x1ac>)
   17c34:	4953      	ldr	r1, [pc, #332]	; (17d84 <z_arm_fault+0x1b0>)
   17c36:	4854      	ldr	r0, [pc, #336]	; (17d88 <z_arm_fault+0x1b4>)
   17c38:	f018 f81a 	bl	2fc70 <printk>
   17c3c:	4853      	ldr	r0, [pc, #332]	; (17d8c <z_arm_fault+0x1b8>)
   17c3e:	f018 f817 	bl	2fc70 <printk>
   17c42:	f240 31e1 	movw	r1, #993	; 0x3e1
   17c46:	484e      	ldr	r0, [pc, #312]	; (17d80 <z_arm_fault+0x1ac>)
   17c48:	f018 faf8 	bl	3023c <assert_post_action>
   17c4c:	2500      	movs	r5, #0
	*recoverable = false;
   17c4e:	2300      	movs	r3, #0
   17c50:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   17c54:	1ef3      	subs	r3, r6, #3
   17c56:	2b09      	cmp	r3, #9
   17c58:	d871      	bhi.n	17d3e <z_arm_fault+0x16a>
   17c5a:	e8df f003 	tbb	[pc, r3]
   17c5e:	5f05      	.short	0x5f05
   17c60:	70703c63 	.word	0x70703c63
   17c64:	67707070 	.word	0x67707070
	*recoverable = false;
   17c68:	f04f 0800 	mov.w	r8, #0
   17c6c:	4b41      	ldr	r3, [pc, #260]	; (17d74 <z_arm_fault+0x1a0>)
   17c6e:	4e42      	ldr	r6, [pc, #264]	; (17d78 <z_arm_fault+0x1a4>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   17c70:	4847      	ldr	r0, [pc, #284]	; (17d90 <z_arm_fault+0x1bc>)
   17c72:	1af6      	subs	r6, r6, r3
   17c74:	08f6      	lsrs	r6, r6, #3
   17c76:	01b6      	lsls	r6, r6, #6
   17c78:	f046 0601 	orr.w	r6, r6, #1
   17c7c:	4631      	mov	r1, r6
   17c7e:	f018 fb2b 	bl	302d8 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   17c82:	4b3b      	ldr	r3, [pc, #236]	; (17d70 <z_arm_fault+0x19c>)
	*recoverable = false;
   17c84:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   17c88:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   17c8a:	f014 0402 	ands.w	r4, r4, #2
   17c8e:	d005      	beq.n	17c9c <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   17c90:	4631      	mov	r1, r6
   17c92:	4840      	ldr	r0, [pc, #256]	; (17d94 <z_arm_fault+0x1c0>)
	PR_FAULT_INFO(
   17c94:	f018 fb20 	bl	302d8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   17c98:	2400      	movs	r4, #0
}
   17c9a:	e01f      	b.n	17cdc <z_arm_fault+0x108>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   17c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17c9e:	005b      	lsls	r3, r3, #1
   17ca0:	d51c      	bpl.n	17cdc <z_arm_fault+0x108>
		PR_EXC("  Fault escalation (see below)");
   17ca2:	4631      	mov	r1, r6
   17ca4:	483c      	ldr	r0, [pc, #240]	; (17d98 <z_arm_fault+0x1c4>)
   17ca6:	f018 fb17 	bl	302d8 <log_0>
		if (SCB_MMFSR != 0) {
   17caa:	4b3c      	ldr	r3, [pc, #240]	; (17d9c <z_arm_fault+0x1c8>)
   17cac:	781b      	ldrb	r3, [r3, #0]
   17cae:	b12b      	cbz	r3, 17cbc <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   17cb0:	2001      	movs	r0, #1
   17cb2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   17cb6:	f7ff fe99 	bl	179ec <mem_manage_fault.isra.0>
   17cba:	e00e      	b.n	17cda <z_arm_fault+0x106>
		} else if (SCB_BFSR != 0) {
   17cbc:	4b38      	ldr	r3, [pc, #224]	; (17da0 <z_arm_fault+0x1cc>)
   17cbe:	781b      	ldrb	r3, [r3, #0]
   17cc0:	b12b      	cbz	r3, 17cce <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   17cc2:	2001      	movs	r0, #1
   17cc4:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   17cc8:	f7ff ff16 	bl	17af8 <bus_fault.isra.0>
   17ccc:	e005      	b.n	17cda <z_arm_fault+0x106>
		} else if (SCB_UFSR != 0) {
   17cce:	4b35      	ldr	r3, [pc, #212]	; (17da4 <z_arm_fault+0x1d0>)
   17cd0:	881b      	ldrh	r3, [r3, #0]
   17cd2:	b29b      	uxth	r3, r3
   17cd4:	b113      	cbz	r3, 17cdc <z_arm_fault+0x108>
			reason = usage_fault(esf);
   17cd6:	f7ff fe21 	bl	1791c <usage_fault.isra.0>
   17cda:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   17cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17ce0:	b9cb      	cbnz	r3, 17d16 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   17ce2:	462b      	mov	r3, r5
   17ce4:	ad02      	add	r5, sp, #8
   17ce6:	f103 0620 	add.w	r6, r3, #32
   17cea:	462a      	mov	r2, r5
   17cec:	6818      	ldr	r0, [r3, #0]
   17cee:	6859      	ldr	r1, [r3, #4]
   17cf0:	3308      	adds	r3, #8
   17cf2:	c203      	stmia	r2!, {r0, r1}
   17cf4:	42b3      	cmp	r3, r6
   17cf6:	4615      	mov	r5, r2
   17cf8:	d1f7      	bne.n	17cea <z_arm_fault+0x116>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   17cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17cfc:	b39f      	cbz	r7, 17d66 <z_arm_fault+0x192>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   17cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
   17d02:	b922      	cbnz	r2, 17d0e <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   17d04:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   17d08:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   17d0c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   17d0e:	4620      	mov	r0, r4
   17d10:	a902      	add	r1, sp, #8
   17d12:	f7ff fcfb 	bl	1770c <z_arm_fatal_error>
}
   17d16:	b00b      	add	sp, #44	; 0x2c
   17d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   17d1c:	2000      	movs	r0, #0
   17d1e:	f10d 0107 	add.w	r1, sp, #7
   17d22:	e7c8      	b.n	17cb6 <z_arm_fault+0xe2>
		reason = bus_fault(esf, 0, recoverable);
   17d24:	2000      	movs	r0, #0
   17d26:	f10d 0107 	add.w	r1, sp, #7
   17d2a:	e7cd      	b.n	17cc8 <z_arm_fault+0xf4>
   17d2c:	4912      	ldr	r1, [pc, #72]	; (17d78 <z_arm_fault+0x1a4>)
   17d2e:	4b11      	ldr	r3, [pc, #68]	; (17d74 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO(
   17d30:	481d      	ldr	r0, [pc, #116]	; (17da8 <z_arm_fault+0x1d4>)
   17d32:	1ac9      	subs	r1, r1, r3
   17d34:	08c9      	lsrs	r1, r1, #3
   17d36:	0189      	lsls	r1, r1, #6
   17d38:	f041 0101 	orr.w	r1, r1, #1
   17d3c:	e7aa      	b.n	17c94 <z_arm_fault+0xc0>
   17d3e:	4a0d      	ldr	r2, [pc, #52]	; (17d74 <z_arm_fault+0x1a0>)
   17d40:	4b0d      	ldr	r3, [pc, #52]	; (17d78 <z_arm_fault+0x1a4>)
	PR_FAULT_INFO("***** %s %d) *****",
   17d42:	481a      	ldr	r0, [pc, #104]	; (17dac <z_arm_fault+0x1d8>)
   17d44:	1a9b      	subs	r3, r3, r2
   17d46:	08db      	lsrs	r3, r3, #3
   17d48:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   17d4c:	ea4f 1383 	mov.w	r3, r3, lsl #6
   17d50:	4917      	ldr	r1, [pc, #92]	; (17db0 <z_arm_fault+0x1dc>)
   17d52:	f043 0301 	orr.w	r3, r3, #1
   17d56:	bf18      	it	ne
   17d58:	4601      	movne	r1, r0
   17d5a:	f1a6 0210 	sub.w	r2, r6, #16
   17d5e:	4815      	ldr	r0, [pc, #84]	; (17db4 <z_arm_fault+0x1e0>)
   17d60:	f018 fadb 	bl	3031a <log_2>
   17d64:	e798      	b.n	17c98 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   17d66:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   17d6a:	f023 0301 	bic.w	r3, r3, #1
   17d6e:	e7cd      	b.n	17d0c <z_arm_fault+0x138>
   17d70:	e000ed00 	.word	0xe000ed00
   17d74:	000387c0 	.word	0x000387c0
   17d78:	000388d0 	.word	0x000388d0
   17d7c:	0003b552 	.word	0x0003b552
   17d80:	0003b3e2 	.word	0x0003b3e2
   17d84:	0003b575 	.word	0x0003b575
   17d88:	0003a56b 	.word	0x0003a56b
   17d8c:	0003b588 	.word	0x0003b588
   17d90:	0003b5c6 	.word	0x0003b5c6
   17d94:	0003b5dd 	.word	0x0003b5dd
   17d98:	0003b5fe 	.word	0x0003b5fe
   17d9c:	e000ed28 	.word	0xe000ed28
   17da0:	e000ed29 	.word	0xe000ed29
   17da4:	e000ed2a 	.word	0xe000ed2a
   17da8:	0003b61d 	.word	0x0003b61d
   17dac:	0003b656 	.word	0x0003b656
   17db0:	0003b641 	.word	0x0003b641
   17db4:	0003b66f 	.word	0x0003b66f

00017db8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   17db8:	4b04      	ldr	r3, [pc, #16]	; (17dcc <z_arm_fault_init+0x14>)
   17dba:	695a      	ldr	r2, [r3, #20]
   17dbc:	f042 0210 	orr.w	r2, r2, #16
   17dc0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   17dc2:	695a      	ldr	r2, [r3, #20]
   17dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   17dc8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   17dca:	4770      	bx	lr
   17dcc:	e000ed00 	.word	0xe000ed00

00017dd0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   17dd0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17dd4:	4905      	ldr	r1, [pc, #20]	; (17dec <sys_arch_reboot+0x1c>)
   17dd6:	4b06      	ldr	r3, [pc, #24]	; (17df0 <sys_arch_reboot+0x20>)
   17dd8:	68ca      	ldr	r2, [r1, #12]
   17dda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17dde:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17de0:	60cb      	str	r3, [r1, #12]
   17de2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   17de6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17de8:	e7fd      	b.n	17de6 <sys_arch_reboot+0x16>
   17dea:	bf00      	nop
   17dec:	e000ed00 	.word	0xe000ed00
   17df0:	05fa0004 	.word	0x05fa0004

00017df4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   17df4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17df6:	2120      	movs	r1, #32
   17df8:	4803      	ldr	r0, [pc, #12]	; (17e08 <z_arm_interrupt_init+0x14>)
   17dfa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   17dfc:	3301      	adds	r3, #1
   17dfe:	2b41      	cmp	r3, #65	; 0x41
   17e00:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   17e04:	d1f9      	bne.n	17dfa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   17e06:	4770      	bx	lr
   17e08:	e000e100 	.word	0xe000e100

00017e0c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   17e0c:	4b06      	ldr	r3, [pc, #24]	; (17e28 <z_impl_k_thread_abort+0x1c>)
   17e0e:	689b      	ldr	r3, [r3, #8]
   17e10:	4283      	cmp	r3, r0
   17e12:	d107      	bne.n	17e24 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17e14:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   17e18:	b123      	cbz	r3, 17e24 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   17e1a:	4a04      	ldr	r2, [pc, #16]	; (17e2c <z_impl_k_thread_abort+0x20>)
   17e1c:	6853      	ldr	r3, [r2, #4]
   17e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   17e22:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   17e24:	f015 b8fa 	b.w	2d01c <z_thread_abort>
   17e28:	20016cd0 	.word	0x20016cd0
   17e2c:	e000ed00 	.word	0xe000ed00

00017e30 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   17e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   17e32:	4c09      	ldr	r4, [pc, #36]	; (17e58 <z_arm_configure_static_mpu_regions+0x28>)
   17e34:	4a09      	ldr	r2, [pc, #36]	; (17e5c <z_arm_configure_static_mpu_regions+0x2c>)
   17e36:	4623      	mov	r3, r4
   17e38:	2101      	movs	r1, #1
   17e3a:	4809      	ldr	r0, [pc, #36]	; (17e60 <z_arm_configure_static_mpu_regions+0x30>)
   17e3c:	f000 f912 	bl	18064 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   17e40:	2300      	movs	r3, #0
   17e42:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   17e44:	4b07      	ldr	r3, [pc, #28]	; (17e64 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   17e46:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   17e48:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   17e4a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   17e4c:	9301      	str	r3, [sp, #4]
   17e4e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   17e50:	f000 f92e 	bl	180b0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   17e54:	b004      	add	sp, #16
   17e56:	bd10      	pop	{r4, pc}
   17e58:	20040000 	.word	0x20040000
   17e5c:	20014500 	.word	0x20014500
   17e60:	00038d68 	.word	0x00038d68
   17e64:	20015200 	.word	0x20015200

00017e68 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   17e68:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   17e6a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   17e6c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   17e6e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   17e72:	f004 031f 	and.w	r3, r4, #31
   17e76:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   17e78:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   17e7a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   17e7c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   17e80:	4904      	ldr	r1, [pc, #16]	; (17e94 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   17e82:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   17e86:	f043 0301 	orr.w	r3, r3, #1
   17e8a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   17e8c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   17e8e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   17e90:	bd10      	pop	{r4, pc}
   17e92:	bf00      	nop
   17e94:	e000ed90 	.word	0xe000ed90

00017e98 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   17e98:	280f      	cmp	r0, #15
{
   17e9a:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   17e9c:	d90d      	bls.n	17eba <region_allocate_and_init+0x22>
   17e9e:	4b08      	ldr	r3, [pc, #32]	; (17ec0 <region_allocate_and_init+0x28>)
   17ea0:	4a08      	ldr	r2, [pc, #32]	; (17ec4 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   17ea2:	4601      	mov	r1, r0
   17ea4:	1ad2      	subs	r2, r2, r3
   17ea6:	08d2      	lsrs	r2, r2, #3
   17ea8:	0192      	lsls	r2, r2, #6
   17eaa:	4807      	ldr	r0, [pc, #28]	; (17ec8 <region_allocate_and_init+0x30>)
   17eac:	f042 0201 	orr.w	r2, r2, #1
   17eb0:	f018 fa1f 	bl	302f2 <log_1>
		return -EINVAL;
   17eb4:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   17eb8:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   17eba:	f7ff ffd5 	bl	17e68 <region_init>
	return index;
   17ebe:	e7fb      	b.n	17eb8 <region_allocate_and_init+0x20>
   17ec0:	000387c0 	.word	0x000387c0
   17ec4:	000388b0 	.word	0x000388b0
   17ec8:	0003b686 	.word	0x0003b686

00017ecc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   17ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ed0:	4689      	mov	r9, r1
   17ed2:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   17ed4:	4606      	mov	r6, r0
   17ed6:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   17eda:	4d54      	ldr	r5, [pc, #336]	; (1802c <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   17edc:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   17ede:	45c8      	cmp	r8, r9
   17ee0:	da33      	bge.n	17f4a <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
   17ee2:	f8d6 a004 	ldr.w	sl, [r6, #4]
   17ee6:	f1ba 0f00 	cmp.w	sl, #0
   17eea:	d04d      	beq.n	17f88 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   17eec:	f1ba 0f1f 	cmp.w	sl, #31
   17ef0:	d91e      	bls.n	17f30 <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
   17ef2:	f01a 0f1f 	tst.w	sl, #31
   17ef6:	d11b      	bne.n	17f30 <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
   17ef8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   17efc:	f01b 0f1f 	tst.w	fp, #31
   17f00:	d116      	bne.n	17f30 <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   17f02:	4658      	mov	r0, fp
   17f04:	f01a fa91 	bl	3242a <arm_cmse_mpu_region_get>
   17f08:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   17f0a:	eb0a 000b 	add.w	r0, sl, fp
   17f0e:	3801      	subs	r0, #1
   17f10:	f01a fa8b 	bl	3242a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   17f14:	4287      	cmp	r7, r0
   17f16:	d01c      	beq.n	17f52 <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
   17f18:	f06f 0715 	mvn.w	r7, #21
   17f1c:	4a44      	ldr	r2, [pc, #272]	; (18030 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   17f1e:	4b45      	ldr	r3, [pc, #276]	; (18034 <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   17f20:	4639      	mov	r1, r7
   17f22:	1ad2      	subs	r2, r2, r3
   17f24:	08d2      	lsrs	r2, r2, #3
   17f26:	0192      	lsls	r2, r2, #6
   17f28:	4843      	ldr	r0, [pc, #268]	; (18038 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   17f2a:	f042 0201 	orr.w	r2, r2, #1
   17f2e:	e008      	b.n	17f42 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
   17f30:	4641      	mov	r1, r8
   17f32:	4a3f      	ldr	r2, [pc, #252]	; (18030 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   17f34:	4b3f      	ldr	r3, [pc, #252]	; (18034 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   17f36:	4841      	ldr	r0, [pc, #260]	; (1803c <mpu_configure_regions_and_partition.constprop.0+0x170>)
   17f38:	1ad2      	subs	r2, r2, r3
   17f3a:	08d2      	lsrs	r2, r2, #3
   17f3c:	0192      	lsls	r2, r2, #6
   17f3e:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   17f42:	f018 f9d6 	bl	302f2 <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   17f46:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   17f4a:	4620      	mov	r0, r4
   17f4c:	b005      	add	sp, #20
   17f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   17f52:	f117 0f16 	cmn.w	r7, #22
   17f56:	d0e1      	beq.n	17f1c <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   17f58:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   17f5a:	42bb      	cmp	r3, r7
   17f5c:	dbde      	blt.n	17f1c <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   17f5e:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   17f60:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   17f62:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   17f64:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   17f66:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   17f6a:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   17f6e:	e9d6 3200 	ldrd	r3, r2, [r6]
   17f72:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   17f74:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   17f76:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   17f7a:	d11a      	bne.n	17fb2 <mpu_configure_regions_and_partition.constprop.0+0xe6>
   17f7c:	45d3      	cmp	fp, sl
   17f7e:	d107      	bne.n	17f90 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
   17f80:	4631      	mov	r1, r6
   17f82:	b2f8      	uxtb	r0, r7
   17f84:	f01a fa5a 	bl	3243c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   17f88:	f108 0801 	add.w	r8, r8, #1
   17f8c:	360c      	adds	r6, #12
   17f8e:	e7a6      	b.n	17ede <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   17f90:	4631      	mov	r1, r6
	MPU->RNR = index;
   17f92:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   17f94:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   17f96:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   17f9a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   17f9e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   17fa0:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   17fa2:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   17fa4:	f01a fa4a 	bl	3243c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   17fa8:	f110 0f16 	cmn.w	r0, #22
   17fac:	d0cb      	beq.n	17f46 <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
   17fae:	1c44      	adds	r4, r0, #1
   17fb0:	e7ea      	b.n	17f88 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   17fb2:	3b01      	subs	r3, #1
   17fb4:	45d3      	cmp	fp, sl
   17fb6:	b2e0      	uxtb	r0, r4
   17fb8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   17fbc:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
   17fbe:	d106      	bne.n	17fce <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   17fc0:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   17fc2:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   17fc4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   17fc8:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   17fca:	612b      	str	r3, [r5, #16]
			reg_index =
   17fcc:	e7ea      	b.n	17fa4 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   17fce:	6929      	ldr	r1, [r5, #16]
   17fd0:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   17fd4:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   17fd6:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   17fd8:	4631      	mov	r1, r6
   17fda:	f01a fa2f 	bl	3243c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   17fde:	f110 0f16 	cmn.w	r0, #22
   17fe2:	d0b0      	beq.n	17f46 <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
   17fe4:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
   17fe6:	68ea      	ldr	r2, [r5, #12]
   17fe8:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   17fec:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   17ff0:	f362 0304 	bfi	r3, r2, #0, #5
   17ff4:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   17ff8:	692b      	ldr	r3, [r5, #16]
   17ffa:	f89d 2008 	ldrb.w	r2, [sp, #8]
   17ffe:	085b      	lsrs	r3, r3, #1
   18000:	f363 1247 	bfi	r2, r3, #5, #3
   18004:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   18008:	e9d6 3200 	ldrd	r3, r2, [r6]
   1800c:	4413      	add	r3, r2
   1800e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   18010:	f023 031f 	bic.w	r3, r3, #31
   18014:	445b      	add	r3, fp
   18016:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   1801a:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1801c:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   18020:	4669      	mov	r1, sp
   18022:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   18024:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   18026:	f7ff ff37 	bl	17e98 <region_allocate_and_init>
   1802a:	e7bd      	b.n	17fa8 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   1802c:	e000ed90 	.word	0xe000ed90
   18030:	000388b0 	.word	0x000388b0
   18034:	000387c0 	.word	0x000387c0
   18038:	0003b6cf 	.word	0x0003b6cf
   1803c:	0003b6ac 	.word	0x0003b6ac

00018040 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   18040:	2205      	movs	r2, #5
   18042:	4b03      	ldr	r3, [pc, #12]	; (18050 <arm_core_mpu_enable+0x10>)
   18044:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   18046:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1804a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1804e:	4770      	bx	lr
   18050:	e000ed90 	.word	0xe000ed90

00018054 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   18054:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   18058:	2200      	movs	r2, #0
   1805a:	4b01      	ldr	r3, [pc, #4]	; (18060 <arm_core_mpu_disable+0xc>)
   1805c:	605a      	str	r2, [r3, #4]
}
   1805e:	4770      	bx	lr
   18060:	e000ed90 	.word	0xe000ed90

00018064 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   18064:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   18066:	4d0d      	ldr	r5, [pc, #52]	; (1809c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   18068:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1806a:	782a      	ldrb	r2, [r5, #0]
   1806c:	f7ff ff2e 	bl	17ecc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   18070:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   18072:	3016      	adds	r0, #22
   18074:	d111      	bne.n	1809a <arm_core_mpu_configure_static_mpu_regions+0x36>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   18076:	f240 1305 	movw	r3, #261	; 0x105
   1807a:	4a09      	ldr	r2, [pc, #36]	; (180a0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   1807c:	4909      	ldr	r1, [pc, #36]	; (180a4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1807e:	480a      	ldr	r0, [pc, #40]	; (180a8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   18080:	f017 fdf6 	bl	2fc70 <printk>
   18084:	4621      	mov	r1, r4
   18086:	4809      	ldr	r0, [pc, #36]	; (180ac <arm_core_mpu_configure_static_mpu_regions+0x48>)
   18088:	f017 fdf2 	bl	2fc70 <printk>
			regions_num);
	}
}
   1808c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   18090:	f240 1105 	movw	r1, #261	; 0x105
   18094:	4802      	ldr	r0, [pc, #8]	; (180a0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   18096:	f018 b8d1 	b.w	3023c <assert_post_action>
}
   1809a:	bd38      	pop	{r3, r4, r5, pc}
   1809c:	2001ba81 	.word	0x2001ba81
   180a0:	0003b6f2 	.word	0x0003b6f2
   180a4:	00040e81 	.word	0x00040e81
   180a8:	0003a56b 	.word	0x0003a56b
   180ac:	0003b729 	.word	0x0003b729

000180b0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   180b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180b4:	4e2f      	ldr	r6, [pc, #188]	; (18174 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   180b6:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   180b8:	4605      	mov	r5, r0
   180ba:	f04f 0800 	mov.w	r8, #0
   180be:	46b3      	mov	fp, r6
	MPU->RNR = index;
   180c0:	4f2d      	ldr	r7, [pc, #180]	; (18178 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   180c2:	45c8      	cmp	r8, r9
   180c4:	db02      	blt.n	180cc <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   180c6:	b003      	add	sp, #12
   180c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   180cc:	f8d5 a004 	ldr.w	sl, [r5, #4]
   180d0:	f1ba 0f00 	cmp.w	sl, #0
   180d4:	d049      	beq.n	1816a <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   180d6:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   180d8:	4608      	mov	r0, r1
   180da:	9101      	str	r1, [sp, #4]
   180dc:	f01a f9a5 	bl	3242a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   180e0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   180e2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   180e4:	eb0a 0001 	add.w	r0, sl, r1
   180e8:	3801      	subs	r0, #1
   180ea:	f01a f99e 	bl	3242a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   180ee:	4284      	cmp	r4, r0
   180f0:	f04f 0214 	mov.w	r2, #20
   180f4:	4b21      	ldr	r3, [pc, #132]	; (1817c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   180f6:	d018      	beq.n	1812a <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   180f8:	f06f 0315 	mvn.w	r3, #21
   180fc:	fb02 f808 	mul.w	r8, r2, r8
   18100:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   18104:	f240 1315 	movw	r3, #277	; 0x115
   18108:	4a1d      	ldr	r2, [pc, #116]	; (18180 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   1810a:	491e      	ldr	r1, [pc, #120]	; (18184 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1810c:	481e      	ldr	r0, [pc, #120]	; (18188 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1810e:	f017 fdaf 	bl	2fc70 <printk>
   18112:	4649      	mov	r1, r9
   18114:	481d      	ldr	r0, [pc, #116]	; (1818c <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   18116:	f017 fdab 	bl	2fc70 <printk>
   1811a:	f240 1115 	movw	r1, #277	; 0x115
   1811e:	4818      	ldr	r0, [pc, #96]	; (18180 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   18120:	b003      	add	sp, #12
   18122:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   18126:	f018 b889 	b.w	3023c <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1812a:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1812e:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   18130:	d0e8      	beq.n	18104 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   18132:	7819      	ldrb	r1, [r3, #0]
   18134:	42a1      	cmp	r1, r4
   18136:	dde5      	ble.n	18104 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   18138:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   1813c:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   1813e:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   18140:	68fc      	ldr	r4, [r7, #12]
   18142:	f100 0108 	add.w	r1, r0, #8
   18146:	7b00      	ldrb	r0, [r0, #12]
   18148:	f364 0004 	bfi	r0, r4, #0, #5
   1814c:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1814e:	6938      	ldr	r0, [r7, #16]
   18150:	790c      	ldrb	r4, [r1, #4]
   18152:	0840      	lsrs	r0, r0, #1
   18154:	f360 1447 	bfi	r4, r0, #5, #3
   18158:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1815a:	68f9      	ldr	r1, [r7, #12]
   1815c:	f021 011f 	bic.w	r1, r1, #31
   18160:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   18162:	6939      	ldr	r1, [r7, #16]
   18164:	f021 011f 	bic.w	r1, r1, #31
   18168:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1816a:	f108 0801 	add.w	r8, r8, #1
   1816e:	3614      	adds	r6, #20
   18170:	350c      	adds	r5, #12
   18172:	e7a6      	b.n	180c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   18174:	20016228 	.word	0x20016228
   18178:	e000ed90 	.word	0xe000ed90
   1817c:	2001ba81 	.word	0x2001ba81
   18180:	0003b6f2 	.word	0x0003b6f2
   18184:	00040e81 	.word	0x00040e81
   18188:	0003a56b 	.word	0x0003a56b
   1818c:	0003b755 	.word	0x0003b755

00018190 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   18190:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   18192:	4e20      	ldr	r6, [pc, #128]	; (18214 <z_arm_mpu_init+0x84>)
   18194:	6835      	ldr	r5, [r6, #0]
   18196:	2d10      	cmp	r5, #16
   18198:	d913      	bls.n	181c2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1819a:	f44f 739e 	mov.w	r3, #316	; 0x13c
   1819e:	4a1e      	ldr	r2, [pc, #120]	; (18218 <z_arm_mpu_init+0x88>)
   181a0:	491e      	ldr	r1, [pc, #120]	; (1821c <z_arm_mpu_init+0x8c>)
   181a2:	481f      	ldr	r0, [pc, #124]	; (18220 <z_arm_mpu_init+0x90>)
   181a4:	f017 fd64 	bl	2fc70 <printk>
   181a8:	2210      	movs	r2, #16
   181aa:	4629      	mov	r1, r5
   181ac:	481d      	ldr	r0, [pc, #116]	; (18224 <z_arm_mpu_init+0x94>)
   181ae:	f017 fd5f 	bl	2fc70 <printk>
   181b2:	4819      	ldr	r0, [pc, #100]	; (18218 <z_arm_mpu_init+0x88>)
   181b4:	f44f 719e 	mov.w	r1, #316	; 0x13c
   181b8:	f018 f840 	bl	3023c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   181bc:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   181c0:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   181c2:	f7ff ff47 	bl	18054 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   181c6:	2000      	movs	r0, #0
	MPU->MAIR0 =
   181c8:	4c17      	ldr	r4, [pc, #92]	; (18228 <z_arm_mpu_init+0x98>)
   181ca:	4a18      	ldr	r2, [pc, #96]	; (1822c <z_arm_mpu_init+0x9c>)
   181cc:	6322      	str	r2, [r4, #48]	; 0x30
   181ce:	4285      	cmp	r5, r0
   181d0:	d119      	bne.n	18206 <z_arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   181d2:	4b17      	ldr	r3, [pc, #92]	; (18230 <z_arm_mpu_init+0xa0>)
   181d4:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   181d6:	f7ff ff33 	bl	18040 <arm_core_mpu_enable>
	__ASSERT(
   181da:	6823      	ldr	r3, [r4, #0]
   181dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   181e0:	2b10      	cmp	r3, #16
   181e2:	d00e      	beq.n	18202 <z_arm_mpu_init+0x72>
   181e4:	4913      	ldr	r1, [pc, #76]	; (18234 <z_arm_mpu_init+0xa4>)
   181e6:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   181ea:	4a0b      	ldr	r2, [pc, #44]	; (18218 <z_arm_mpu_init+0x88>)
   181ec:	480c      	ldr	r0, [pc, #48]	; (18220 <z_arm_mpu_init+0x90>)
   181ee:	f017 fd3f 	bl	2fc70 <printk>
   181f2:	4811      	ldr	r0, [pc, #68]	; (18238 <z_arm_mpu_init+0xa8>)
   181f4:	f017 fd3c 	bl	2fc70 <printk>
   181f8:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   181fc:	4806      	ldr	r0, [pc, #24]	; (18218 <z_arm_mpu_init+0x88>)
   181fe:	f018 f81d 	bl	3023c <assert_post_action>
	return 0;
   18202:	2000      	movs	r0, #0
   18204:	e7dc      	b.n	181c0 <z_arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   18206:	6871      	ldr	r1, [r6, #4]
   18208:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1820c:	f7ff fe2c 	bl	17e68 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   18210:	3001      	adds	r0, #1
   18212:	e7dc      	b.n	181ce <z_arm_mpu_init+0x3e>
   18214:	00038d74 	.word	0x00038d74
   18218:	0003b6f2 	.word	0x0003b6f2
   1821c:	00040e81 	.word	0x00040e81
   18220:	0003a56b 	.word	0x0003a56b
   18224:	0003b784 	.word	0x0003b784
   18228:	e000ed90 	.word	0xe000ed90
   1822c:	0044ffaa 	.word	0x0044ffaa
   18230:	2001ba81 	.word	0x2001ba81
   18234:	0003b7b8 	.word	0x0003b7b8
   18238:	0003b809 	.word	0x0003b809

0001823c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1823c:	4b01      	ldr	r3, [pc, #4]	; (18244 <__stdout_hook_install+0x8>)
   1823e:	6018      	str	r0, [r3, #0]
}
   18240:	4770      	bx	lr
   18242:	bf00      	nop
   18244:	20014784 	.word	0x20014784

00018248 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   18248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1824a:	460d      	mov	r5, r1
   1824c:	4f09      	ldr	r7, [pc, #36]	; (18274 <z_impl_zephyr_write_stdout+0x2c>)
   1824e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   18250:	f1c0 0401 	rsb	r4, r0, #1
   18254:	19a3      	adds	r3, r4, r6
   18256:	429d      	cmp	r5, r3
   18258:	dc01      	bgt.n	1825e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1825a:	4628      	mov	r0, r5
   1825c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1825e:	7873      	ldrb	r3, [r6, #1]
   18260:	2b0a      	cmp	r3, #10
   18262:	d102      	bne.n	1826a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   18264:	200d      	movs	r0, #13
   18266:	683b      	ldr	r3, [r7, #0]
   18268:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1826a:	683b      	ldr	r3, [r7, #0]
   1826c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   18270:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   18272:	e7ef      	b.n	18254 <z_impl_zephyr_write_stdout+0xc>
   18274:	20014784 	.word	0x20014784

00018278 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(intptr_t count)
{
   18278:	b510      	push	{r4, lr}
   1827a:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   1827c:	f04f 32ff 	mov.w	r2, #4294967295
   18280:	f04f 33ff 	mov.w	r3, #4294967295
   18284:	480a      	ldr	r0, [pc, #40]	; (182b0 <_sbrk+0x38>)
   18286:	f017 fd81 	bl	2fd8c <sys_sem_take>
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1828a:	490a      	ldr	r1, [pc, #40]	; (182b4 <_sbrk+0x3c>)
   1828c:	680b      	ldr	r3, [r1, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1828e:	18e0      	adds	r0, r4, r3
   18290:	4c09      	ldr	r4, [pc, #36]	; (182b8 <_sbrk+0x40>)
   18292:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   18296:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1829a:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   1829c:	bf2e      	itee	cs
   1829e:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   182a2:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   182a4:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   182a6:	4802      	ldr	r0, [pc, #8]	; (182b0 <_sbrk+0x38>)
   182a8:	f017 fd6b 	bl	2fd82 <sys_sem_give>

	return ret;
}
   182ac:	4620      	mov	r0, r4
   182ae:	bd10      	pop	{r4, pc}
   182b0:	20015048 	.word	0x20015048
   182b4:	2001623c 	.word	0x2001623c
   182b8:	2002739c 	.word	0x2002739c

000182bc <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   182bc:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   182be:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   182c0:	4804      	ldr	r0, [pc, #16]	; (182d4 <__chk_fail+0x18>)
   182c2:	f7ff ffc1 	bl	18248 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   182c6:	4040      	eors	r0, r0
   182c8:	f380 8811 	msr	BASEPRI, r0
   182cc:	f04f 0003 	mov.w	r0, #3
   182d0:	df02      	svc	2
	CODE_UNREACHABLE;
   182d2:	bf00      	nop
   182d4:	0003b82a 	.word	0x0003b82a

000182d8 <thingy91_board_init>:
#endif
	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
   182d8:	b530      	push	{r4, r5, lr}
   182da:	b0a3      	sub	sp, #140	; 0x8c
	return z_impl_zsock_socket(family, type, proto);
   182dc:	f240 2201 	movw	r2, #513	; 0x201
   182e0:	2102      	movs	r1, #2
   182e2:	2066      	movs	r0, #102	; 0x66
   182e4:	f7fd fbbc 	bl	15a60 <z_impl_zsock_socket>
	if (at_socket_fd == -1) {
   182e8:	1c43      	adds	r3, r0, #1
   182ea:	4604      	mov	r4, r0
   182ec:	d117      	bne.n	1831e <thingy91_board_init+0x46>
   182ee:	4b53      	ldr	r3, [pc, #332]	; (1843c <thingy91_board_init+0x164>)
   182f0:	4953      	ldr	r1, [pc, #332]	; (18440 <thingy91_board_init+0x168>)
		LOG_ERR("AT socket could not be opened");
   182f2:	4854      	ldr	r0, [pc, #336]	; (18444 <thingy91_board_init+0x16c>)
   182f4:	1ac9      	subs	r1, r1, r3
   182f6:	08c9      	lsrs	r1, r1, #3
   182f8:	0189      	lsls	r1, r1, #6
   182fa:	f041 0101 	orr.w	r1, r1, #1
   182fe:	f017 ffeb 	bl	302d8 <log_0>
		return -EFAULT;
   18302:	f06f 050d 	mvn.w	r5, #13
   18306:	4b4d      	ldr	r3, [pc, #308]	; (1843c <thingy91_board_init+0x164>)
   18308:	4a4d      	ldr	r2, [pc, #308]	; (18440 <thingy91_board_init+0x168>)
	int err;

	err = thingy91_magpio_configure();
	if (err) {
		LOG_ERR("thingy91_magpio_configure failed with error: %d", err);
   1830a:	4629      	mov	r1, r5
   1830c:	1ad2      	subs	r2, r2, r3
   1830e:	08d2      	lsrs	r2, r2, #3
   18310:	0192      	lsls	r2, r2, #6
   18312:	484d      	ldr	r0, [pc, #308]	; (18448 <thingy91_board_init+0x170>)
   18314:	f042 0201 	orr.w	r2, r2, #1
   18318:	f017 ffeb 	bl	302f2 <log_1>
		return err;
   1831c:	e08a      	b.n	18434 <thingy91_board_init+0x15c>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1831e:	2500      	movs	r5, #0
   18320:	2210      	movs	r2, #16
   18322:	462b      	mov	r3, r5
   18324:	e9cd 5500 	strd	r5, r5, [sp]
   18328:	4948      	ldr	r1, [pc, #288]	; (1844c <thingy91_board_init+0x174>)
   1832a:	f018 fb46 	bl	309ba <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_TRACE)) {
   1832e:	2810      	cmp	r0, #16
   18330:	d019      	beq.n	18366 <thingy91_board_init+0x8e>
   18332:	4b42      	ldr	r3, [pc, #264]	; (1843c <thingy91_board_init+0x164>)
   18334:	4942      	ldr	r1, [pc, #264]	; (18440 <thingy91_board_init+0x168>)
		LOG_ERR("XMODEMTRACE command failed");
   18336:	4846      	ldr	r0, [pc, #280]	; (18450 <thingy91_board_init+0x178>)
   18338:	1ac9      	subs	r1, r1, r3
   1833a:	08c9      	lsrs	r1, r1, #3
   1833c:	0189      	lsls	r1, r1, #6
   1833e:	f041 0101 	orr.w	r1, r1, #1
   18342:	f017 ffc9 	bl	302d8 <log_0>
		close(at_socket_fd);
   18346:	4620      	mov	r0, r4
   18348:	f01a f896 	bl	32478 <close>
		__ASSERT_NO_MSG(false);
   1834c:	4941      	ldr	r1, [pc, #260]	; (18454 <thingy91_board_init+0x17c>)
   1834e:	2335      	movs	r3, #53	; 0x35
   18350:	4a41      	ldr	r2, [pc, #260]	; (18458 <thingy91_board_init+0x180>)
   18352:	4842      	ldr	r0, [pc, #264]	; (1845c <thingy91_board_init+0x184>)
   18354:	f017 fc8c 	bl	2fc70 <printk>
   18358:	2135      	movs	r1, #53	; 0x35
		__ASSERT_NO_MSG(false);
   1835a:	483f      	ldr	r0, [pc, #252]	; (18458 <thingy91_board_init+0x180>)
   1835c:	f017 ff6e 	bl	3023c <assert_post_action>
		return -EIO;
   18360:	f06f 0504 	mvn.w	r5, #4
   18364:	e7cf      	b.n	18306 <thingy91_board_init+0x2e>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   18366:	2280      	movs	r2, #128	; 0x80
   18368:	462b      	mov	r3, r5
   1836a:	4620      	mov	r0, r4
   1836c:	e9cd 5500 	strd	r5, r5, [sp]
   18370:	a902      	add	r1, sp, #8
   18372:	f018 fb79 	bl	30a68 <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   18376:	2801      	cmp	r0, #1
   18378:	dc14      	bgt.n	183a4 <thingy91_board_init+0xcc>
   1837a:	4b30      	ldr	r3, [pc, #192]	; (1843c <thingy91_board_init+0x164>)
   1837c:	4930      	ldr	r1, [pc, #192]	; (18440 <thingy91_board_init+0x168>)
		LOG_ERR("XMODEMTRACE received unexpected response");
   1837e:	4838      	ldr	r0, [pc, #224]	; (18460 <thingy91_board_init+0x188>)
   18380:	1ac9      	subs	r1, r1, r3
   18382:	08c9      	lsrs	r1, r1, #3
   18384:	0189      	lsls	r1, r1, #6
   18386:	f041 0101 	orr.w	r1, r1, #1
   1838a:	f017 ffa5 	bl	302d8 <log_0>
		close(at_socket_fd);
   1838e:	4620      	mov	r0, r4
   18390:	f01a f872 	bl	32478 <close>
		__ASSERT_NO_MSG(false);
   18394:	492f      	ldr	r1, [pc, #188]	; (18454 <thingy91_board_init+0x17c>)
   18396:	233f      	movs	r3, #63	; 0x3f
   18398:	4a2f      	ldr	r2, [pc, #188]	; (18458 <thingy91_board_init+0x180>)
   1839a:	4830      	ldr	r0, [pc, #192]	; (1845c <thingy91_board_init+0x184>)
   1839c:	f017 fc68 	bl	2fc70 <printk>
   183a0:	213f      	movs	r1, #63	; 0x3f
   183a2:	e7da      	b.n	1835a <thingy91_board_init+0x82>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   183a4:	2201      	movs	r2, #1
   183a6:	482f      	ldr	r0, [pc, #188]	; (18464 <thingy91_board_init+0x18c>)
   183a8:	a902      	add	r1, sp, #8
   183aa:	f01f f9dc 	bl	37766 <memcmp>
	if ((buffer < 2) ||
   183ae:	4605      	mov	r5, r0
   183b0:	2800      	cmp	r0, #0
   183b2:	d1e2      	bne.n	1837a <thingy91_board_init+0xa2>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   183b4:	225c      	movs	r2, #92	; 0x5c
   183b6:	4603      	mov	r3, r0
   183b8:	e9cd 0000 	strd	r0, r0, [sp]
   183bc:	492a      	ldr	r1, [pc, #168]	; (18468 <thingy91_board_init+0x190>)
   183be:	4620      	mov	r0, r4
   183c0:	f018 fafb 	bl	309ba <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_MAGPIO)) {
   183c4:	285c      	cmp	r0, #92	; 0x5c
   183c6:	d008      	beq.n	183da <thingy91_board_init+0x102>
   183c8:	491d      	ldr	r1, [pc, #116]	; (18440 <thingy91_board_init+0x168>)
   183ca:	4b1c      	ldr	r3, [pc, #112]	; (1843c <thingy91_board_init+0x164>)
		LOG_ERR("MAGPIO command failed");
   183cc:	4827      	ldr	r0, [pc, #156]	; (1846c <thingy91_board_init+0x194>)
   183ce:	1ac9      	subs	r1, r1, r3
   183d0:	08c9      	lsrs	r1, r1, #3
   183d2:	0189      	lsls	r1, r1, #6
   183d4:	f041 0101 	orr.w	r1, r1, #1
   183d8:	e011      	b.n	183fe <thingy91_board_init+0x126>
   183da:	2217      	movs	r2, #23
   183dc:	462b      	mov	r3, r5
   183de:	4620      	mov	r0, r4
   183e0:	e9cd 5500 	strd	r5, r5, [sp]
   183e4:	4922      	ldr	r1, [pc, #136]	; (18470 <thingy91_board_init+0x198>)
   183e6:	f018 fae8 	bl	309ba <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_COEX0)) {
   183ea:	2817      	cmp	r0, #23
   183ec:	d00d      	beq.n	1840a <thingy91_board_init+0x132>
   183ee:	4914      	ldr	r1, [pc, #80]	; (18440 <thingy91_board_init+0x168>)
   183f0:	4b12      	ldr	r3, [pc, #72]	; (1843c <thingy91_board_init+0x164>)
		LOG_ERR("COEX0 command failed");
   183f2:	4820      	ldr	r0, [pc, #128]	; (18474 <thingy91_board_init+0x19c>)
   183f4:	1ac9      	subs	r1, r1, r3
   183f6:	08c9      	lsrs	r1, r1, #3
   183f8:	0189      	lsls	r1, r1, #6
   183fa:	f041 0101 	orr.w	r1, r1, #1
   183fe:	f017 ff6b 	bl	302d8 <log_0>
		close(at_socket_fd);
   18402:	4620      	mov	r0, r4
   18404:	f01a f838 	bl	32478 <close>
   18408:	e7aa      	b.n	18360 <thingy91_board_init+0x88>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1840a:	2280      	movs	r2, #128	; 0x80
   1840c:	462b      	mov	r3, r5
   1840e:	4620      	mov	r0, r4
   18410:	e9cd 5500 	strd	r5, r5, [sp]
   18414:	a902      	add	r1, sp, #8
   18416:	f018 fb27 	bl	30a68 <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   1841a:	2801      	cmp	r0, #1
   1841c:	ddd4      	ble.n	183c8 <thingy91_board_init+0xf0>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   1841e:	2201      	movs	r2, #1
   18420:	4810      	ldr	r0, [pc, #64]	; (18464 <thingy91_board_init+0x18c>)
   18422:	a902      	add	r1, sp, #8
   18424:	f01f f99f 	bl	37766 <memcmp>
	if ((buffer < 2) ||
   18428:	4605      	mov	r5, r0
   1842a:	2800      	cmp	r0, #0
   1842c:	d1cc      	bne.n	183c8 <thingy91_board_init+0xf0>
	close(at_socket_fd);
   1842e:	4620      	mov	r0, r4
   18430:	f01a f822 	bl	32478 <close>
	}

	return 0;
}
   18434:	4628      	mov	r0, r5
   18436:	b023      	add	sp, #140	; 0x8c
   18438:	bd30      	pop	{r4, r5, pc}
   1843a:	bf00      	nop
   1843c:	000387c0 	.word	0x000387c0
   18440:	000387d0 	.word	0x000387d0
   18444:	0003b857 	.word	0x0003b857
   18448:	0003b9ab 	.word	0x0003b9ab
   1844c:	0003b875 	.word	0x0003b875
   18450:	0003b886 	.word	0x0003b886
   18454:	00040e81 	.word	0x00040e81
   18458:	0003b8a1 	.word	0x0003b8a1
   1845c:	0003a56b 	.word	0x0003a56b
   18460:	0003b8df 	.word	0x0003b8df
   18464:	0003b908 	.word	0x0003b908
   18468:	0003b90b 	.word	0x0003b90b
   1846c:	0003b968 	.word	0x0003b968
   18470:	0003b97e 	.word	0x0003b97e
   18474:	0003b996 	.word	0x0003b996

00018478 <gpio_pin_set.constprop.0>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18478:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   1847a:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1847c:	681b      	ldr	r3, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   1847e:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18480:	02d9      	lsls	r1, r3, #11
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   18482:	4604      	mov	r4, r0
	const struct gpio_driver_data *const data =
   18484:	6906      	ldr	r6, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18486:	d40e      	bmi.n	184a6 <gpio_pin_set.constprop.0+0x2e>
   18488:	4919      	ldr	r1, [pc, #100]	; (184f0 <gpio_pin_set.constprop.0+0x78>)
   1848a:	f240 439f 	movw	r3, #1183	; 0x49f
   1848e:	4a19      	ldr	r2, [pc, #100]	; (184f4 <gpio_pin_set.constprop.0+0x7c>)
   18490:	4819      	ldr	r0, [pc, #100]	; (184f8 <gpio_pin_set.constprop.0+0x80>)
   18492:	f017 fbed 	bl	2fc70 <printk>
   18496:	4819      	ldr	r0, [pc, #100]	; (184fc <gpio_pin_set.constprop.0+0x84>)
   18498:	f017 fbea 	bl	2fc70 <printk>
   1849c:	f240 419f 	movw	r1, #1183	; 0x49f
   184a0:	4814      	ldr	r0, [pc, #80]	; (184f4 <gpio_pin_set.constprop.0+0x7c>)
   184a2:	f017 fecb 	bl	3023c <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   184a6:	6833      	ldr	r3, [r6, #0]
   184a8:	02da      	lsls	r2, r3, #11
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   184aa:	6863      	ldr	r3, [r4, #4]
   184ac:	bf48      	it	mi
   184ae:	f085 0501 	eormi.w	r5, r5, #1
   184b2:	681b      	ldr	r3, [r3, #0]
   184b4:	02db      	lsls	r3, r3, #11
   184b6:	d40e      	bmi.n	184d6 <gpio_pin_set.constprop.0+0x5e>
   184b8:	490d      	ldr	r1, [pc, #52]	; (184f0 <gpio_pin_set.constprop.0+0x78>)
   184ba:	f240 4375 	movw	r3, #1141	; 0x475
   184be:	4a0d      	ldr	r2, [pc, #52]	; (184f4 <gpio_pin_set.constprop.0+0x7c>)
   184c0:	480d      	ldr	r0, [pc, #52]	; (184f8 <gpio_pin_set.constprop.0+0x80>)
   184c2:	f017 fbd5 	bl	2fc70 <printk>
   184c6:	480d      	ldr	r0, [pc, #52]	; (184fc <gpio_pin_set.constprop.0+0x84>)
   184c8:	f017 fbd2 	bl	2fc70 <printk>
   184cc:	f240 4175 	movw	r1, #1141	; 0x475
   184d0:	4808      	ldr	r0, [pc, #32]	; (184f4 <gpio_pin_set.constprop.0+0x7c>)
   184d2:	f017 feb3 	bl	3023c <assert_post_action>
	if (value != 0)	{
   184d6:	b13d      	cbz	r5, 184e8 <gpio_pin_set.constprop.0+0x70>
	return api->port_set_bits_raw(port, pins);
   184d8:	68a3      	ldr	r3, [r4, #8]
   184da:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   184dc:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   184de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   184e2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   184e6:	4718      	bx	r3
   184e8:	68a3      	ldr	r3, [r4, #8]
   184ea:	691b      	ldr	r3, [r3, #16]
   184ec:	e7f6      	b.n	184dc <gpio_pin_set.constprop.0+0x64>
   184ee:	bf00      	nop
   184f0:	0003ba15 	.word	0x0003ba15
   184f4:	0003b9eb 	.word	0x0003b9eb
   184f8:	0003a56b 	.word	0x0003a56b
   184fc:	0003ba53 	.word	0x0003ba53

00018500 <bt_hci_transport_setup>:
#include <device.h>

#define RESET_PIN 20

int bt_hci_transport_setup(struct device *h4)
{
   18500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18502:	4606      	mov	r6, r0
   18504:	4825      	ldr	r0, [pc, #148]	; (1859c <bt_hci_transport_setup+0x9c>)
   18506:	f011 fcb7 	bl	29e78 <z_impl_device_get_binding>
	int err;
	char c;
	const struct device *port;

	port = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0)));
	if (!port) {
   1850a:	4605      	mov	r5, r0
   1850c:	2800      	cmp	r0, #0
   1850e:	d041      	beq.n	18594 <bt_hci_transport_setup+0x94>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18510:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
   18512:	6887      	ldr	r7, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18514:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   18516:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18518:	02db      	lsls	r3, r3, #11
   1851a:	d40e      	bmi.n	1853a <bt_hci_transport_setup+0x3a>
   1851c:	4920      	ldr	r1, [pc, #128]	; (185a0 <bt_hci_transport_setup+0xa0>)
   1851e:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   18522:	4a20      	ldr	r2, [pc, #128]	; (185a4 <bt_hci_transport_setup+0xa4>)
   18524:	4820      	ldr	r0, [pc, #128]	; (185a8 <bt_hci_transport_setup+0xa8>)
   18526:	f017 fba3 	bl	2fc70 <printk>
   1852a:	4820      	ldr	r0, [pc, #128]	; (185ac <bt_hci_transport_setup+0xac>)
   1852c:	f017 fba0 	bl	2fc70 <printk>
   18530:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   18534:	481b      	ldr	r0, [pc, #108]	; (185a4 <bt_hci_transport_setup+0xa4>)
   18536:	f017 fe81 	bl	3023c <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1853a:	6823      	ldr	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   1853c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   18540:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   18544:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   18546:	2114      	movs	r1, #20
   18548:	4628      	mov	r0, r5
   1854a:	683b      	ldr	r3, [r7, #0]
   1854c:	4798      	blx	r3
		return -EIO;
	}

	/* Configure pin as output and initialize it to low. */
	err = gpio_pin_configure(port, RESET_PIN, GPIO_OUTPUT_LOW);
	if (err) {
   1854e:	4604      	mov	r4, r0
   18550:	b9e8      	cbnz	r0, 1858e <bt_hci_transport_setup+0x8e>
	/* Reset the nRF52840 and let it wait until the pin is
	 * pulled low again before running to main to ensure
	 * that it won't send any data until the H4 device
	 * is setup and ready to receive.
	 */
	err = gpio_pin_set(port, RESET_PIN, 1);
   18552:	2101      	movs	r1, #1
   18554:	4628      	mov	r0, r5
   18556:	f7ff ff8f 	bl	18478 <gpio_pin_set.constprop.0>
	if (err) {
   1855a:	4604      	mov	r4, r0
   1855c:	b9b8      	cbnz	r0, 1858e <bt_hci_transport_setup+0x8e>
	return z_impl_k_sleep(timeout);
   1855e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   18562:	2100      	movs	r1, #0
   18564:	f014 fd0c 	bl	2cf80 <z_impl_k_sleep>
	if (api->fifo_read != NULL) {
   18568:	68b3      	ldr	r3, [r6, #8]
   1856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1856c:	b133      	cbz	r3, 1857c <bt_hci_transport_setup+0x7c>
		return api->fifo_read(dev, rx_data, size);
   1856e:	2201      	movs	r2, #1
   18570:	4630      	mov	r0, r6
   18572:	f10d 0107 	add.w	r1, sp, #7
   18576:	4798      	blx	r3
	 * on the lines are received and drained correctly.
	 */
	k_sleep(K_MSEC(10));

	/* Drain bytes */
	while (uart_fifo_read(h4, &c, 1)) {
   18578:	2800      	cmp	r0, #0
   1857a:	d1f5      	bne.n	18568 <bt_hci_transport_setup+0x68>
		continue;
	}

	/* We are ready, let the nRF52840 run to main */
	err = gpio_pin_set(port, RESET_PIN, 0);
   1857c:	2100      	movs	r1, #0
   1857e:	4628      	mov	r0, r5
   18580:	f7ff ff7a 	bl	18478 <gpio_pin_set.constprop.0>
	if (err) {
   18584:	4604      	mov	r4, r0
   18586:	b910      	cbnz	r0, 1858e <bt_hci_transport_setup+0x8e>
		return err;
	}
	printk("Reset of nRF52840 complete\n");
   18588:	4809      	ldr	r0, [pc, #36]	; (185b0 <bt_hci_transport_setup+0xb0>)
   1858a:	f017 fb71 	bl	2fc70 <printk>

	return 0;
}
   1858e:	4620      	mov	r0, r4
   18590:	b003      	add	sp, #12
   18592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EIO;
   18594:	f06f 0404 	mvn.w	r4, #4
   18598:	e7f9      	b.n	1858e <bt_hci_transport_setup+0x8e>
   1859a:	bf00      	nop
   1859c:	0003ba65 	.word	0x0003ba65
   185a0:	0003ba15 	.word	0x0003ba15
   185a4:	0003b9eb 	.word	0x0003b9eb
   185a8:	0003a56b 	.word	0x0003a56b
   185ac:	0003ba53 	.word	0x0003ba53
   185b0:	0003ba6c 	.word	0x0003ba6c

000185b4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   185b4:	4b0e      	ldr	r3, [pc, #56]	; (185f0 <bt_hex_real+0x3c>)
   185b6:	2940      	cmp	r1, #64	; 0x40
   185b8:	bf28      	it	cs
   185ba:	2140      	movcs	r1, #64	; 0x40
{
   185bc:	b570      	push	{r4, r5, r6, lr}
   185be:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   185c0:	4c0c      	ldr	r4, [pc, #48]	; (185f4 <bt_hex_real+0x40>)
   185c2:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   185c4:	42b0      	cmp	r0, r6
   185c6:	f103 0302 	add.w	r3, r3, #2
   185ca:	d104      	bne.n	185d6 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   185cc:	2300      	movs	r3, #0
   185ce:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   185d2:	4807      	ldr	r0, [pc, #28]	; (185f0 <bt_hex_real+0x3c>)
   185d4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   185d6:	7802      	ldrb	r2, [r0, #0]
   185d8:	0912      	lsrs	r2, r2, #4
   185da:	5ca2      	ldrb	r2, [r4, r2]
   185dc:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   185e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   185e4:	f002 020f 	and.w	r2, r2, #15
   185e8:	5ca2      	ldrb	r2, [r4, r2]
   185ea:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   185ee:	e7e9      	b.n	185c4 <bt_hex_real+0x10>
   185f0:	2001ba82 	.word	0x2001ba82
   185f4:	0003ba88 	.word	0x0003ba88

000185f8 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   185f8:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   185fa:	7803      	ldrb	r3, [r0, #0]
   185fc:	b08b      	sub	sp, #44	; 0x2c
   185fe:	4604      	mov	r4, r0
   18600:	ad07      	add	r5, sp, #28
   18602:	2b03      	cmp	r3, #3
   18604:	d821      	bhi.n	1864a <bt_addr_le_str_real+0x52>
   18606:	e8df f003 	tbb	[pc, r3]
   1860a:	1a02      	.short	0x1a02
   1860c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1860e:	4912      	ldr	r1, [pc, #72]	; (18658 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   18610:	4628      	mov	r0, r5
   18612:	f01f f9fb 	bl	37a0c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   18616:	7863      	ldrb	r3, [r4, #1]
   18618:	211e      	movs	r1, #30
   1861a:	9304      	str	r3, [sp, #16]
   1861c:	78a3      	ldrb	r3, [r4, #2]
   1861e:	4a0f      	ldr	r2, [pc, #60]	; (1865c <bt_addr_le_str_real+0x64>)
   18620:	9303      	str	r3, [sp, #12]
   18622:	78e3      	ldrb	r3, [r4, #3]
   18624:	9505      	str	r5, [sp, #20]
   18626:	9302      	str	r3, [sp, #8]
   18628:	7923      	ldrb	r3, [r4, #4]
   1862a:	480d      	ldr	r0, [pc, #52]	; (18660 <bt_addr_le_str_real+0x68>)
   1862c:	9301      	str	r3, [sp, #4]
   1862e:	7963      	ldrb	r3, [r4, #5]
   18630:	9300      	str	r3, [sp, #0]
   18632:	79a3      	ldrb	r3, [r4, #6]
   18634:	f017 fb29 	bl	2fc8a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   18638:	4809      	ldr	r0, [pc, #36]	; (18660 <bt_addr_le_str_real+0x68>)
   1863a:	b00b      	add	sp, #44	; 0x2c
   1863c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1863e:	4909      	ldr	r1, [pc, #36]	; (18664 <bt_addr_le_str_real+0x6c>)
   18640:	e7e6      	b.n	18610 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   18642:	4909      	ldr	r1, [pc, #36]	; (18668 <bt_addr_le_str_real+0x70>)
   18644:	e7e4      	b.n	18610 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   18646:	4909      	ldr	r1, [pc, #36]	; (1866c <bt_addr_le_str_real+0x74>)
   18648:	e7e2      	b.n	18610 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1864a:	210a      	movs	r1, #10
   1864c:	4628      	mov	r0, r5
   1864e:	4a08      	ldr	r2, [pc, #32]	; (18670 <bt_addr_le_str_real+0x78>)
   18650:	f017 fb1b 	bl	2fc8a <snprintk>
		break;
   18654:	e7df      	b.n	18616 <bt_addr_le_str_real+0x1e>
   18656:	bf00      	nop
   18658:	0003971c 	.word	0x0003971c
   1865c:	0003973e 	.word	0x0003973e
   18660:	2001bb03 	.word	0x2001bb03
   18664:	00039723 	.word	0x00039723
   18668:	0003972a 	.word	0x0003972a
   1866c:	00039734 	.word	0x00039734
   18670:	0003c998 	.word	0x0003c998

00018674 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   18674:	b5f0      	push	{r4, r5, r6, r7, lr}
   18676:	460b      	mov	r3, r1
	switch (src->type) {
   18678:	7801      	ldrb	r1, [r0, #0]
{
   1867a:	4602      	mov	r2, r0
	switch (src->type) {
   1867c:	2901      	cmp	r1, #1
   1867e:	d015      	beq.n	186ac <uuid_to_uuid128+0x38>
   18680:	2902      	cmp	r1, #2
   18682:	d02b      	beq.n	186dc <uuid_to_uuid128+0x68>
   18684:	b989      	cbnz	r1, 186aa <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   18686:	461d      	mov	r5, r3
   18688:	4c1b      	ldr	r4, [pc, #108]	; (186f8 <uuid_to_uuid128+0x84>)
   1868a:	f104 0710 	add.w	r7, r4, #16
   1868e:	462e      	mov	r6, r5
   18690:	6820      	ldr	r0, [r4, #0]
   18692:	6861      	ldr	r1, [r4, #4]
   18694:	3408      	adds	r4, #8
   18696:	c603      	stmia	r6!, {r0, r1}
   18698:	42bc      	cmp	r4, r7
   1869a:	4635      	mov	r5, r6
   1869c:	d1f7      	bne.n	1868e <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   1869e:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   186a0:	7821      	ldrb	r1, [r4, #0]
   186a2:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   186a4:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   186a6:	0a12      	lsrs	r2, r2, #8
   186a8:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   186aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   186ac:	461d      	mov	r5, r3
   186ae:	4c12      	ldr	r4, [pc, #72]	; (186f8 <uuid_to_uuid128+0x84>)
   186b0:	f104 0710 	add.w	r7, r4, #16
   186b4:	462e      	mov	r6, r5
   186b6:	6820      	ldr	r0, [r4, #0]
   186b8:	6861      	ldr	r1, [r4, #4]
   186ba:	3408      	adds	r4, #8
   186bc:	c603      	stmia	r6!, {r0, r1}
   186be:	42bc      	cmp	r4, r7
   186c0:	4635      	mov	r5, r6
   186c2:	d1f7      	bne.n	186b4 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   186c4:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   186c6:	7821      	ldrb	r1, [r4, #0]
   186c8:	7031      	strb	r1, [r6, #0]
   186ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   186ce:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   186d0:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   186d2:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   186d4:	0a12      	lsrs	r2, r2, #8
   186d6:	7399      	strb	r1, [r3, #14]
   186d8:	741a      	strb	r2, [r3, #16]
}
   186da:	e7e6      	b.n	186aa <uuid_to_uuid128+0x36>
   186dc:	f100 0510 	add.w	r5, r0, #16
   186e0:	461c      	mov	r4, r3
   186e2:	6810      	ldr	r0, [r2, #0]
   186e4:	6851      	ldr	r1, [r2, #4]
   186e6:	3208      	adds	r2, #8
   186e8:	c403      	stmia	r4!, {r0, r1}
   186ea:	42aa      	cmp	r2, r5
   186ec:	4623      	mov	r3, r4
   186ee:	d1f7      	bne.n	186e0 <uuid_to_uuid128+0x6c>
   186f0:	7812      	ldrb	r2, [r2, #0]
   186f2:	7022      	strb	r2, [r4, #0]
   186f4:	e7d9      	b.n	186aa <uuid_to_uuid128+0x36>
   186f6:	bf00      	nop
   186f8:	0003ba99 	.word	0x0003ba99

000186fc <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   186fc:	2801      	cmp	r0, #1
{
   186fe:	b570      	push	{r4, r5, r6, lr}
   18700:	4605      	mov	r5, r0
   18702:	4616      	mov	r6, r2
   18704:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   18706:	d014      	beq.n	18732 <bt_buf_get_rx+0x36>
   18708:	2803      	cmp	r0, #3
   1870a:	d00e      	beq.n	1872a <bt_buf_get_rx+0x2e>
   1870c:	2805      	cmp	r0, #5
   1870e:	d00c      	beq.n	1872a <bt_buf_get_rx+0x2e>
   18710:	490e      	ldr	r1, [pc, #56]	; (1874c <bt_buf_get_rx+0x50>)
   18712:	2338      	movs	r3, #56	; 0x38
   18714:	4a0e      	ldr	r2, [pc, #56]	; (18750 <bt_buf_get_rx+0x54>)
   18716:	480f      	ldr	r0, [pc, #60]	; (18754 <bt_buf_get_rx+0x58>)
   18718:	f017 faaa 	bl	2fc70 <printk>
   1871c:	480e      	ldr	r0, [pc, #56]	; (18758 <bt_buf_get_rx+0x5c>)
   1871e:	f017 faa7 	bl	2fc70 <printk>
   18722:	2138      	movs	r1, #56	; 0x38
   18724:	480a      	ldr	r0, [pc, #40]	; (18750 <bt_buf_get_rx+0x54>)
   18726:	f017 fd89 	bl	3023c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1872a:	4632      	mov	r2, r6
   1872c:	4623      	mov	r3, r4
   1872e:	480b      	ldr	r0, [pc, #44]	; (1875c <bt_buf_get_rx+0x60>)
   18730:	e000      	b.n	18734 <bt_buf_get_rx+0x38>
   18732:	480b      	ldr	r0, [pc, #44]	; (18760 <bt_buf_get_rx+0x64>)
   18734:	f01a ffc7 	bl	336c6 <net_buf_alloc_fixed>
   18738:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1873a:	b12c      	cbz	r4, 18748 <bt_buf_get_rx+0x4c>
	net_buf_simple_reserve(&buf->b, reserve);
   1873c:	2100      	movs	r1, #0
   1873e:	f104 0008 	add.w	r0, r4, #8
   18742:	f005 fc53 	bl	1dfec <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18746:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   18748:	4620      	mov	r0, r4
   1874a:	bd70      	pop	{r4, r5, r6, pc}
   1874c:	0003bad9 	.word	0x0003bad9
   18750:	0003baaa 	.word	0x0003baaa
   18754:	0003a56b 	.word	0x0003a56b
   18758:	0003bb1e 	.word	0x0003bb1e
   1875c:	200150ac 	.word	0x200150ac
   18760:	20015130 	.word	0x20015130

00018764 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   18764:	4602      	mov	r2, r0
   18766:	460b      	mov	r3, r1
   18768:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1876a:	f04f 0120 	mov.w	r1, #32
   1876e:	f3ef 8511 	mrs	r5, BASEPRI
   18772:	f381 8811 	msr	BASEPRI, r1
   18776:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
   1877a:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   1877c:	480b      	ldr	r0, [pc, #44]	; (187ac <bt_buf_get_cmd_complete+0x48>)
   1877e:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
   18782:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
   18786:	f385 8811 	msr	BASEPRI, r5
   1878a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   1878e:	b924      	cbnz	r4, 1879a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   18790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   18794:	2001      	movs	r0, #1
   18796:	f7ff bfb1 	b.w	186fc <bt_buf_get_rx>
   1879a:	2301      	movs	r3, #1
   1879c:	f104 0008 	add.w	r0, r4, #8
   187a0:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   187a2:	81a1      	strh	r1, [r4, #12]
   187a4:	f005 fc22 	bl	1dfec <net_buf_simple_reserve>
}
   187a8:	4620      	mov	r0, r4
   187aa:	bd70      	pop	{r4, r5, r6, pc}
   187ac:	20014500 	.word	0x20014500

000187b0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   187b0:	b570      	push	{r4, r5, r6, lr}
   187b2:	4604      	mov	r4, r0
	switch (evt) {
   187b4:	2c0f      	cmp	r4, #15
{
   187b6:	460d      	mov	r5, r1
   187b8:	4610      	mov	r0, r2
   187ba:	4619      	mov	r1, r3
	switch (evt) {
   187bc:	d805      	bhi.n	187ca <bt_buf_get_evt+0x1a>
   187be:	2c0d      	cmp	r4, #13
   187c0:	d912      	bls.n	187e8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   187c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   187c6:	f7ff bfcd 	b.w	18764 <bt_buf_get_cmd_complete>
	switch (evt) {
   187ca:	2c13      	cmp	r4, #19
   187cc:	d10c      	bne.n	187e8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   187ce:	480b      	ldr	r0, [pc, #44]	; (187fc <bt_buf_get_evt+0x4c>)
   187d0:	f01a ff79 	bl	336c6 <net_buf_alloc_fixed>
			if (buf) {
   187d4:	4604      	mov	r4, r0
   187d6:	b128      	cbz	r0, 187e4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   187d8:	2100      	movs	r1, #0
   187da:	3008      	adds	r0, #8
   187dc:	f005 fc06 	bl	1dfec <net_buf_simple_reserve>
   187e0:	2301      	movs	r3, #1
   187e2:	7523      	strb	r3, [r4, #20]
}
   187e4:	4620      	mov	r0, r4
   187e6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   187e8:	4602      	mov	r2, r0
   187ea:	460b      	mov	r3, r1
		if (discardable) {
   187ec:	b10d      	cbz	r5, 187f2 <bt_buf_get_evt+0x42>
   187ee:	4804      	ldr	r0, [pc, #16]	; (18800 <bt_buf_get_evt+0x50>)
   187f0:	e7ee      	b.n	187d0 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   187f2:	2001      	movs	r0, #1
}
   187f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   187f8:	f7ff bf80 	b.w	186fc <bt_buf_get_rx>
   187fc:	200151b4 	.word	0x200151b4
   18800:	20015104 	.word	0x20015104

00018804 <hci_data_buf_overflow>:
   18804:	4905      	ldr	r1, [pc, #20]	; (1881c <hci_data_buf_overflow+0x18>)
   18806:	4a06      	ldr	r2, [pc, #24]	; (18820 <hci_data_buf_overflow+0x1c>)
	bt_conn_unref(conn);
}

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   18808:	6883      	ldr	r3, [r0, #8]
   1880a:	1a52      	subs	r2, r2, r1
   1880c:	08d2      	lsrs	r2, r2, #3

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1880e:	0192      	lsls	r2, r2, #6
   18810:	7819      	ldrb	r1, [r3, #0]
   18812:	4804      	ldr	r0, [pc, #16]	; (18824 <hci_data_buf_overflow+0x20>)
   18814:	f042 0202 	orr.w	r2, r2, #2
   18818:	f017 bd6b 	b.w	302f2 <log_1>
   1881c:	000387c0 	.word	0x000387c0
   18820:	00038810 	.word	0x00038810
   18824:	0003bb45 	.word	0x0003bb45

00018828 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   18828:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1882a:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   1882c:	781a      	ldrb	r2, [r3, #0]
   1882e:	b972      	cbnz	r2, 1884e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18830:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   18834:	4620      	mov	r0, r4
   18836:	f002 fbfb 	bl	1b030 <bt_conn_lookup_handle>
	if (!conn) {
   1883a:	4605      	mov	r5, r0
   1883c:	b940      	cbnz	r0, 18850 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1883e:	4b08      	ldr	r3, [pc, #32]	; (18860 <hci_disconn_complete_prio+0x38>)
   18840:	881a      	ldrh	r2, [r3, #0]
   18842:	b922      	cbnz	r2, 1884e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   18844:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   18848:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1884c:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   1884e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18850:	2101      	movs	r1, #1
   18852:	f002 fbf9 	bl	1b048 <bt_conn_set_state>
	bt_conn_unref(conn);
   18856:	4628      	mov	r0, r5
}
   18858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1885c:	f002 bbc2 	b.w	1afe4 <bt_conn_unref>
   18860:	2001ad50 	.word	0x2001ad50

00018864 <le_data_len_change>:
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18864:	6883      	ldr	r3, [r0, #8]
{
   18866:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18868:	881c      	ldrh	r4, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
   1886a:	4620      	mov	r0, r4
   1886c:	f002 fbe0 	bl	1b030 <bt_conn_lookup_handle>
	if (!conn) {
   18870:	b960      	cbnz	r0, 1888c <le_data_len_change+0x28>
   18872:	4a08      	ldr	r2, [pc, #32]	; (18894 <le_data_len_change+0x30>)
   18874:	4b08      	ldr	r3, [pc, #32]	; (18898 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18876:	4621      	mov	r1, r4
	conn->le.data_len.rx_max_time = max_rx_time;
	notify_le_data_len_updated(conn);
#endif

	bt_conn_unref(conn);
}
   18878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1887c:	1ad2      	subs	r2, r2, r3
   1887e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18880:	0192      	lsls	r2, r2, #6
   18882:	4806      	ldr	r0, [pc, #24]	; (1889c <le_data_len_change+0x38>)
   18884:	f042 0201 	orr.w	r2, r2, #1
   18888:	f017 bd33 	b.w	302f2 <log_1>
}
   1888c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   18890:	f002 bba8 	b.w	1afe4 <bt_conn_unref>
   18894:	00038810 	.word	0x00038810
   18898:	000387c0 	.word	0x000387c0
   1889c:	0003bb6d 	.word	0x0003bb6d

000188a0 <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   188a0:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   188a2:	2101      	movs	r1, #1
   188a4:	3008      	adds	r0, #8
   188a6:	f005 fd0d 	bl	1e2c4 <net_buf_simple_pull_mem>
   188aa:	4b06      	ldr	r3, [pc, #24]	; (188c4 <hci_hardware_error+0x24>)
   188ac:	4a06      	ldr	r2, [pc, #24]	; (188c8 <hci_hardware_error+0x28>)
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   188ae:	7801      	ldrb	r1, [r0, #0]
   188b0:	1ad2      	subs	r2, r2, r3
   188b2:	08d2      	lsrs	r2, r2, #3
   188b4:	0192      	lsls	r2, r2, #6
   188b6:	4805      	ldr	r0, [pc, #20]	; (188cc <hci_hardware_error+0x2c>)
   188b8:	f042 0201 	orr.w	r2, r2, #1
}
   188bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   188c0:	f017 bd17 	b.w	302f2 <log_1>
   188c4:	000387c0 	.word	0x000387c0
   188c8:	00038810 	.word	0x00038810
   188cc:	0003bb91 	.word	0x0003bb91

000188d0 <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
   188d0:	b510      	push	{r4, lr}
   188d2:	4a0a      	ldr	r2, [pc, #40]	; (188fc <hci_vendor_event+0x2c>)
   188d4:	4c0a      	ldr	r4, [pc, #40]	; (18900 <hci_vendor_event+0x30>)
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
   188d6:	8981      	ldrh	r1, [r0, #12]
   188d8:	6880      	ldr	r0, [r0, #8]
   188da:	1aa4      	subs	r4, r4, r2
   188dc:	f7ff fe6a 	bl	185b4 <bt_hex_real>
   188e0:	f7fc fb5c 	bl	14f9c <z_log_strdup>
   188e4:	08e4      	lsrs	r4, r4, #3
   188e6:	01a4      	lsls	r4, r4, #6
   188e8:	f044 0402 	orr.w	r4, r4, #2
   188ec:	4601      	mov	r1, r0
   188ee:	4622      	mov	r2, r4
			bt_hex(buf->data, buf->len));
	}
}
   188f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   188f4:	4803      	ldr	r0, [pc, #12]	; (18904 <hci_vendor_event+0x34>)
   188f6:	f017 bcfc 	b.w	302f2 <log_1>
   188fa:	bf00      	nop
   188fc:	000387c0 	.word	0x000387c0
   18900:	00038810 	.word	0x00038810
   18904:	0003bbb3 	.word	0x0003bbb3

00018908 <handle_event>:
{
   18908:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1890a:	4605      	mov	r5, r0
   1890c:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   1890e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
   18912:	7811      	ldrb	r1, [r2, #0]
   18914:	42a9      	cmp	r1, r5
   18916:	d01a      	beq.n	1894e <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   18918:	3208      	adds	r2, #8
   1891a:	429a      	cmp	r2, r3
   1891c:	d1f9      	bne.n	18912 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   1891e:	8986      	ldrh	r6, [r0, #12]
   18920:	4b16      	ldr	r3, [pc, #88]	; (1897c <handle_event+0x74>)
   18922:	4c17      	ldr	r4, [pc, #92]	; (18980 <handle_event+0x78>)
   18924:	4631      	mov	r1, r6
   18926:	6880      	ldr	r0, [r0, #8]
   18928:	1ae4      	subs	r4, r4, r3
   1892a:	f7ff fe43 	bl	185b4 <bt_hex_real>
   1892e:	f7fc fb35 	bl	14f9c <z_log_strdup>
   18932:	08e4      	lsrs	r4, r4, #3
   18934:	01a4      	lsls	r4, r4, #6
   18936:	f044 0402 	orr.w	r4, r4, #2
   1893a:	4603      	mov	r3, r0
   1893c:	4632      	mov	r2, r6
   1893e:	4629      	mov	r1, r5
   18940:	4810      	ldr	r0, [pc, #64]	; (18984 <handle_event+0x7c>)
   18942:	f8ad 4000 	strh.w	r4, [sp]
   18946:	f017 fd01 	bl	3034c <log_3>
}
   1894a:	b002      	add	sp, #8
   1894c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   1894e:	8981      	ldrh	r1, [r0, #12]
   18950:	7853      	ldrb	r3, [r2, #1]
   18952:	428b      	cmp	r3, r1
   18954:	d90d      	bls.n	18972 <handle_event+0x6a>
   18956:	4a09      	ldr	r2, [pc, #36]	; (1897c <handle_event+0x74>)
   18958:	4b09      	ldr	r3, [pc, #36]	; (18980 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1895a:	480b      	ldr	r0, [pc, #44]	; (18988 <handle_event+0x80>)
   1895c:	1a9b      	subs	r3, r3, r2
   1895e:	462a      	mov	r2, r5
   18960:	08db      	lsrs	r3, r3, #3
   18962:	019b      	lsls	r3, r3, #6
   18964:	f043 0301 	orr.w	r3, r3, #1
}
   18968:	b002      	add	sp, #8
   1896a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1896e:	f017 bcd4 	b.w	3031a <log_2>
		handler->handler(buf);
   18972:	6853      	ldr	r3, [r2, #4]
}
   18974:	b002      	add	sp, #8
   18976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   1897a:	4718      	bx	r3
   1897c:	000387c0 	.word	0x000387c0
   18980:	00038810 	.word	0x00038810
   18984:	0003bbf9 	.word	0x0003bbf9
   18988:	0003bbd7 	.word	0x0003bbd7

0001898c <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_connectionless_iq_report)),
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
};

static void hci_le_meta_event(struct net_buf *buf)
{
   1898c:	b510      	push	{r4, lr}
   1898e:	2101      	movs	r1, #1
   18990:	4604      	mov	r4, r0
   18992:	3008      	adds	r0, #8
   18994:	f005 fc96 	bl	1e2c4 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   18998:	4621      	mov	r1, r4
}
   1899a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1899e:	2308      	movs	r3, #8
   189a0:	4a01      	ldr	r2, [pc, #4]	; (189a8 <hci_le_meta_event+0x1c>)
   189a2:	7800      	ldrb	r0, [r0, #0]
   189a4:	f7ff bfb0 	b.w	18908 <handle_event>
   189a8:	00038ddc 	.word	0x00038ddc

000189ac <hci_num_completed_packets>:
{
   189ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   189b0:	2600      	movs	r6, #0
			tx->pending_no_cb = 0U;
   189b2:	46b1      	mov	r9, r6
   189b4:	4d38      	ldr	r5, [pc, #224]	; (18a98 <hci_num_completed_packets+0xec>)
   189b6:	4b39      	ldr	r3, [pc, #228]	; (18a9c <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   189b8:	f8d0 8008 	ldr.w	r8, [r0, #8]
   189bc:	1aed      	subs	r5, r5, r3
				BT_ERR("packets count mismatch");
   189be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 18aa4 <hci_num_completed_packets+0xf8>
   189c2:	08ed      	lsrs	r5, r5, #3
	for (i = 0; i < evt->num_handles; i++) {
   189c4:	f898 3000 	ldrb.w	r3, [r8]
   189c8:	429e      	cmp	r6, r3
   189ca:	db01      	blt.n	189d0 <hci_num_completed_packets+0x24>
}
   189cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   189d0:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   189d4:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   189d8:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   189dc:	4658      	mov	r0, fp
   189de:	f002 fb27 	bl	1b030 <bt_conn_lookup_handle>
		if (!conn) {
   189e2:	4604      	mov	r4, r0
   189e4:	b1d8      	cbz	r0, 18a1e <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   189e6:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   189ea:	2f00      	cmp	r7, #0
   189ec:	d033      	beq.n	18a56 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   189ee:	f04f 0320 	mov.w	r3, #32
   189f2:	f3ef 8211 	mrs	r2, BASEPRI
   189f6:	f383 8811 	msr	BASEPRI, r3
   189fa:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   189fe:	69e3      	ldr	r3, [r4, #28]
   18a00:	b1b3      	cbz	r3, 18a30 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   18a02:	3b01      	subs	r3, #1
   18a04:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18a06:	f382 8811 	msr	BASEPRI, r2
   18a0a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   18a0e:	4620      	mov	r0, r4
   18a10:	f002 f8fc 	bl	1ac0c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   18a14:	3f01      	subs	r7, #1
   18a16:	f012 fbf3 	bl	2b200 <z_impl_k_sem_give>
   18a1a:	b2bf      	uxth	r7, r7
   18a1c:	e7e5      	b.n	189ea <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   18a1e:	01aa      	lsls	r2, r5, #6
   18a20:	4659      	mov	r1, fp
   18a22:	481f      	ldr	r0, [pc, #124]	; (18aa0 <hci_num_completed_packets+0xf4>)
   18a24:	f042 0201 	orr.w	r2, r2, #1
   18a28:	f017 fc63 	bl	302f2 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   18a2c:	3601      	adds	r6, #1
   18a2e:	e7c9      	b.n	189c4 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   18a30:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   18a32:	b12b      	cbz	r3, 18a40 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18a34:	69a1      	ldr	r1, [r4, #24]
   18a36:	6818      	ldr	r0, [r3, #0]
   18a38:	428b      	cmp	r3, r1
	list->head = node;
   18a3a:	6160      	str	r0, [r4, #20]
	list->tail = node;
   18a3c:	bf08      	it	eq
   18a3e:	61a0      	streq	r0, [r4, #24]
   18a40:	f382 8811 	msr	BASEPRI, r2
   18a44:	f3bf 8f6f 	isb	sy
			if (!node) {
   18a48:	b94b      	cbnz	r3, 18a5e <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   18a4a:	01a9      	lsls	r1, r5, #6
   18a4c:	4650      	mov	r0, sl
   18a4e:	f041 0101 	orr.w	r1, r1, #1
   18a52:	f017 fc41 	bl	302d8 <log_0>
		bt_conn_unref(conn);
   18a56:	4620      	mov	r0, r4
   18a58:	f002 fac4 	bl	1afe4 <bt_conn_unref>
   18a5c:	e7e6      	b.n	18a2c <hci_num_completed_packets+0x80>
	__asm__ volatile(
   18a5e:	f04f 0220 	mov.w	r2, #32
   18a62:	f3ef 8111 	mrs	r1, BASEPRI
   18a66:	f382 8811 	msr	BASEPRI, r2
   18a6a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   18a6e:	68da      	ldr	r2, [r3, #12]
   18a70:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   18a72:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   18a76:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   18a78:	f8c3 900c 	str.w	r9, [r3, #12]
   18a7c:	b94a      	cbnz	r2, 18a92 <hci_num_completed_packets+0xe6>
	list->head = node;
   18a7e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   18a82:	f381 8811 	msr	BASEPRI, r1
   18a86:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   18a8a:	4658      	mov	r0, fp
   18a8c:	f012 ff18 	bl	2b8c0 <k_work_submit>
   18a90:	e7bd      	b.n	18a0e <hci_num_completed_packets+0x62>
	parent->next = child;
   18a92:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18a94:	6263      	str	r3, [r4, #36]	; 0x24
}
   18a96:	e7f4      	b.n	18a82 <hci_num_completed_packets+0xd6>
   18a98:	00038810 	.word	0x00038810
   18a9c:	000387c0 	.word	0x000387c0
   18aa0:	0003bc1b 	.word	0x0003bc1b
   18aa4:	0003bc37 	.word	0x0003bc37

00018aa8 <hci_disconn_complete>:
{
   18aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   18aaa:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   18aac:	7835      	ldrb	r5, [r6, #0]
   18aae:	bb75      	cbnz	r5, 18b0e <hci_disconn_complete+0x66>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18ab0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   18ab4:	4638      	mov	r0, r7
   18ab6:	f002 fabb 	bl	1b030 <bt_conn_lookup_handle>
	if (!conn) {
   18aba:	4604      	mov	r4, r0
   18abc:	b960      	cbnz	r0, 18ad8 <hci_disconn_complete+0x30>
   18abe:	4b14      	ldr	r3, [pc, #80]	; (18b10 <hci_disconn_complete+0x68>)
   18ac0:	4a14      	ldr	r2, [pc, #80]	; (18b14 <hci_disconn_complete+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   18ac2:	4639      	mov	r1, r7
   18ac4:	1ad2      	subs	r2, r2, r3
   18ac6:	08d2      	lsrs	r2, r2, #3
   18ac8:	0192      	lsls	r2, r2, #6
   18aca:	4813      	ldr	r0, [pc, #76]	; (18b18 <hci_disconn_complete+0x70>)
   18acc:	f042 0201 	orr.w	r2, r2, #1
}
   18ad0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   18ad4:	f017 bc0d 	b.w	302f2 <log_1>
	conn->err = evt->reason;
   18ad8:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18ada:	4629      	mov	r1, r5
	conn->err = evt->reason;
   18adc:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18ade:	f002 fab3 	bl	1b048 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   18ae2:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
   18ae4:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
   18ae6:	2b01      	cmp	r3, #1
   18ae8:	d004      	beq.n	18af4 <hci_disconn_complete+0x4c>
	bt_conn_unref(conn);
   18aea:	4620      	mov	r0, r4
}
   18aec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   18af0:	f002 ba78 	b.w	1afe4 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18af4:	1d23      	adds	r3, r4, #4
   18af6:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   18afa:	07db      	lsls	r3, r3, #31
   18afc:	d5f5      	bpl.n	18aea <hci_disconn_complete+0x42>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   18afe:	4620      	mov	r0, r4
   18b00:	2102      	movs	r1, #2
   18b02:	f002 faa1 	bl	1b048 <bt_conn_set_state>
		bt_le_scan_update(false);
   18b06:	4628      	mov	r0, r5
   18b08:	f001 fd00 	bl	1a50c <bt_le_scan_update>
   18b0c:	e7ed      	b.n	18aea <hci_disconn_complete+0x42>
}
   18b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b10:	000387c0 	.word	0x000387c0
   18b14:	00038810 	.word	0x00038810
   18b18:	0003bc4e 	.word	0x0003bc4e

00018b1c <le_conn_update_complete>:
{
   18b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   18b1e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   18b20:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   18b24:	4630      	mov	r0, r6
   18b26:	f002 fa83 	bl	1b030 <bt_conn_lookup_handle>
	if (!conn) {
   18b2a:	4604      	mov	r4, r0
   18b2c:	b960      	cbnz	r0, 18b48 <le_conn_update_complete+0x2c>
   18b2e:	4a20      	ldr	r2, [pc, #128]	; (18bb0 <le_conn_update_complete+0x94>)
   18b30:	4b20      	ldr	r3, [pc, #128]	; (18bb4 <le_conn_update_complete+0x98>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18b32:	4631      	mov	r1, r6
   18b34:	1ad2      	subs	r2, r2, r3
   18b36:	08d2      	lsrs	r2, r2, #3
   18b38:	0192      	lsls	r2, r2, #6
   18b3a:	481f      	ldr	r0, [pc, #124]	; (18bb8 <le_conn_update_complete+0x9c>)
   18b3c:	f042 0201 	orr.w	r2, r2, #1
   18b40:	f017 fbd7 	bl	302f2 <log_1>
}
   18b44:	b002      	add	sp, #8
   18b46:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   18b48:	782b      	ldrb	r3, [r5, #0]
   18b4a:	b9bb      	cbnz	r3, 18b7c <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   18b4c:	792a      	ldrb	r2, [r5, #4]
   18b4e:	78eb      	ldrb	r3, [r5, #3]
   18b50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18b54:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   18b58:	79aa      	ldrb	r2, [r5, #6]
   18b5a:	796b      	ldrb	r3, [r5, #5]
   18b5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18b60:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18b64:	79eb      	ldrb	r3, [r5, #7]
   18b66:	7a2a      	ldrb	r2, [r5, #8]
   18b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18b6c:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   18b70:	f002 f850 	bl	1ac14 <notify_le_param_updated>
	bt_conn_unref(conn);
   18b74:	4620      	mov	r0, r4
   18b76:	f002 fa35 	bl	1afe4 <bt_conn_unref>
   18b7a:	e7e3      	b.n	18b44 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   18b7c:	2b1a      	cmp	r3, #26
   18b7e:	d1f9      	bne.n	18b74 <le_conn_update_complete+0x58>
   18b80:	78c3      	ldrb	r3, [r0, #3]
   18b82:	2b01      	cmp	r3, #1
   18b84:	d1f6      	bne.n	18b74 <le_conn_update_complete+0x58>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18b86:	1d03      	adds	r3, r0, #4
   18b88:	e8d3 2fef 	ldaex	r2, [r3]
   18b8c:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   18b90:	e8c3 1fe5 	stlex	r5, r1, [r3]
   18b94:	2d00      	cmp	r5, #0
   18b96:	d1f7      	bne.n	18b88 <le_conn_update_complete+0x6c>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   18b98:	0553      	lsls	r3, r2, #21
   18b9a:	d4eb      	bmi.n	18b74 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   18b9c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   18ba0:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
   18ba2:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
   18ba4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   18ba8:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   18baa:	f002 ffbb 	bl	1bb24 <bt_l2cap_update_conn_param>
   18bae:	e7e1      	b.n	18b74 <le_conn_update_complete+0x58>
   18bb0:	00038810 	.word	0x00038810
   18bb4:	000387c0 	.word	0x000387c0
   18bb8:	0003bb6d 	.word	0x0003bb6d

00018bbc <hci_cmd_done>:
{
   18bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18bc0:	4607      	mov	r7, r0
   18bc2:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   18bc4:	7990      	ldrb	r0, [r2, #6]
{
   18bc6:	4688      	mov	r8, r1
   18bc8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   18bca:	f005 f8cd 	bl	1dd68 <net_buf_pool_get>
   18bce:	4e3e      	ldr	r6, [pc, #248]	; (18cc8 <hci_cmd_done+0x10c>)
   18bd0:	4286      	cmp	r6, r0
   18bd2:	d016      	beq.n	18c02 <hci_cmd_done+0x46>
   18bd4:	4b3d      	ldr	r3, [pc, #244]	; (18ccc <hci_cmd_done+0x110>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   18bd6:	79a0      	ldrb	r0, [r4, #6]
   18bd8:	4d3d      	ldr	r5, [pc, #244]	; (18cd0 <hci_cmd_done+0x114>)
   18bda:	9700      	str	r7, [sp, #0]
   18bdc:	1aed      	subs	r5, r5, r3
   18bde:	9001      	str	r0, [sp, #4]
   18be0:	f005 f8c2 	bl	1dd68 <net_buf_pool_get>
   18be4:	08ed      	lsrs	r5, r5, #3
   18be6:	01ad      	lsls	r5, r5, #6
   18be8:	f045 0502 	orr.w	r5, r5, #2
   18bec:	e9cd 0602 	strd	r0, r6, [sp, #8]
   18bf0:	462b      	mov	r3, r5
   18bf2:	2204      	movs	r2, #4
   18bf4:	4669      	mov	r1, sp
   18bf6:	4837      	ldr	r0, [pc, #220]	; (18cd4 <hci_cmd_done+0x118>)
   18bf8:	f017 fbc4 	bl	30384 <log_n>
}
   18bfc:	b005      	add	sp, #20
   18bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   18c02:	4620      	mov	r0, r4
   18c04:	f005 f8b8 	bl	1dd78 <net_buf_id>
   18c08:	f04f 090c 	mov.w	r9, #12
   18c0c:	4d32      	ldr	r5, [pc, #200]	; (18cd8 <hci_cmd_done+0x11c>)
   18c0e:	fb09 5300 	mla	r3, r9, r0, r5
   18c12:	885b      	ldrh	r3, [r3, #2]
   18c14:	42bb      	cmp	r3, r7
   18c16:	d011      	beq.n	18c3c <hci_cmd_done+0x80>
   18c18:	4b2c      	ldr	r3, [pc, #176]	; (18ccc <hci_cmd_done+0x110>)
   18c1a:	4e2d      	ldr	r6, [pc, #180]	; (18cd0 <hci_cmd_done+0x114>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   18c1c:	4620      	mov	r0, r4
   18c1e:	1af6      	subs	r6, r6, r3
   18c20:	f005 f8aa 	bl	1dd78 <net_buf_id>
   18c24:	fb09 5000 	mla	r0, r9, r0, r5
   18c28:	08f6      	lsrs	r6, r6, #3
   18c2a:	01b6      	lsls	r6, r6, #6
   18c2c:	f046 0602 	orr.w	r6, r6, #2
   18c30:	8842      	ldrh	r2, [r0, #2]
   18c32:	4633      	mov	r3, r6
   18c34:	4639      	mov	r1, r7
   18c36:	4829      	ldr	r0, [pc, #164]	; (18cdc <hci_cmd_done+0x120>)
   18c38:	f017 fb6f 	bl	3031a <log_2>
	if (cmd(buf)->state && !status) {
   18c3c:	4620      	mov	r0, r4
   18c3e:	f005 f89b 	bl	1dd78 <net_buf_id>
   18c42:	260c      	movs	r6, #12
   18c44:	fb06 5000 	mla	r0, r6, r0, r5
   18c48:	6843      	ldr	r3, [r0, #4]
   18c4a:	b1d3      	cbz	r3, 18c82 <hci_cmd_done+0xc6>
   18c4c:	f1b8 0f00 	cmp.w	r8, #0
   18c50:	d117      	bne.n	18c82 <hci_cmd_done+0xc6>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   18c52:	4620      	mov	r0, r4
   18c54:	f005 f890 	bl	1dd78 <net_buf_id>
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   18c58:	2201      	movs	r2, #1
   18c5a:	fb06 5000 	mla	r0, r6, r0, r5
   18c5e:	6840      	ldr	r0, [r0, #4]
   18c60:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   18c64:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   18c66:	f001 061f 	and.w	r6, r1, #31
   18c6a:	40b2      	lsls	r2, r6
	if (val) {
   18c6c:	0949      	lsrs	r1, r1, #5
   18c6e:	b300      	cbz	r0, 18cb2 <hci_cmd_done+0xf6>
   18c70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   18c74:	e8d3 1fef 	ldaex	r1, [r3]
   18c78:	4311      	orrs	r1, r2
   18c7a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   18c7e:	2800      	cmp	r0, #0
   18c80:	d1f8      	bne.n	18c74 <hci_cmd_done+0xb8>
	if (cmd(buf)->sync) {
   18c82:	4620      	mov	r0, r4
   18c84:	f005 f878 	bl	1dd78 <net_buf_id>
   18c88:	260c      	movs	r6, #12
   18c8a:	fb06 5000 	mla	r0, r6, r0, r5
   18c8e:	6883      	ldr	r3, [r0, #8]
   18c90:	2b00      	cmp	r3, #0
   18c92:	d0b3      	beq.n	18bfc <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   18c94:	4620      	mov	r0, r4
   18c96:	f005 f86f 	bl	1dd78 <net_buf_id>
   18c9a:	4370      	muls	r0, r6
   18c9c:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   18ca0:	4620      	mov	r0, r4
   18ca2:	f005 f869 	bl	1dd78 <net_buf_id>
   18ca6:	fb06 5500 	mla	r5, r6, r0, r5
   18caa:	68a8      	ldr	r0, [r5, #8]
   18cac:	f012 faa8 	bl	2b200 <z_impl_k_sem_give>
}
   18cb0:	e7a4      	b.n	18bfc <hci_cmd_done+0x40>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18cb2:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18cb4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   18cb8:	e8d3 1fef 	ldaex	r1, [r3]
   18cbc:	4011      	ands	r1, r2
   18cbe:	e8c3 1fe0 	stlex	r0, r1, [r3]
   18cc2:	2800      	cmp	r0, #0
   18cc4:	d0dd      	beq.n	18c82 <hci_cmd_done+0xc6>
   18cc6:	e7f7      	b.n	18cb8 <hci_cmd_done+0xfc>
   18cc8:	20015188 	.word	0x20015188
   18ccc:	000387c0 	.word	0x000387c0
   18cd0:	00038810 	.word	0x00038810
   18cd4:	0003bc74 	.word	0x0003bc74
   18cd8:	20016240 	.word	0x20016240
   18cdc:	0003bca9 	.word	0x0003bca9

00018ce0 <hci_cmd_status>:
{
   18ce0:	b538      	push	{r3, r4, r5, lr}
   18ce2:	2104      	movs	r1, #4
   18ce4:	4604      	mov	r4, r0
   18ce6:	3008      	adds	r0, #8
   18ce8:	f005 faec 	bl	1e2c4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   18cec:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   18cee:	7801      	ldrb	r1, [r0, #0]
   18cf0:	4622      	mov	r2, r4
   18cf2:	8840      	ldrh	r0, [r0, #2]
   18cf4:	f7ff ff62 	bl	18bbc <hci_cmd_done>
	if (ncmd) {
   18cf8:	b125      	cbz	r5, 18d04 <hci_cmd_status+0x24>
}
   18cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   18cfe:	4802      	ldr	r0, [pc, #8]	; (18d08 <hci_cmd_status+0x28>)
   18d00:	f012 ba7e 	b.w	2b200 <z_impl_k_sem_give>
   18d04:	bd38      	pop	{r3, r4, r5, pc}
   18d06:	bf00      	nop
   18d08:	200145e8 	.word	0x200145e8

00018d0c <hci_cmd_complete>:
{
   18d0c:	b538      	push	{r3, r4, r5, lr}
   18d0e:	2103      	movs	r1, #3
   18d10:	4604      	mov	r4, r0
   18d12:	3008      	adds	r0, #8
   18d14:	f005 fad6 	bl	1e2c4 <net_buf_simple_pull_mem>
	status = buf->data[0];
   18d18:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   18d1a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   18d1c:	4622      	mov	r2, r4
   18d1e:	7819      	ldrb	r1, [r3, #0]
   18d20:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   18d24:	f7ff ff4a 	bl	18bbc <hci_cmd_done>
	if (ncmd) {
   18d28:	b125      	cbz	r5, 18d34 <hci_cmd_complete+0x28>
}
   18d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18d2e:	4802      	ldr	r0, [pc, #8]	; (18d38 <hci_cmd_complete+0x2c>)
   18d30:	f012 ba66 	b.w	2b200 <z_impl_k_sem_give>
   18d34:	bd38      	pop	{r3, r4, r5, pc}
   18d36:	bf00      	nop
   18d38:	200145e8 	.word	0x200145e8

00018d3c <bt_hci_cmd_state_set_init>:
{
   18d3c:	b510      	push	{r4, lr}
	state->bit = bit;
   18d3e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   18d42:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   18d46:	460c      	mov	r4, r1
	state->val = val;
   18d48:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   18d4a:	f005 f815 	bl	1dd78 <net_buf_id>
   18d4e:	220c      	movs	r2, #12
   18d50:	4b02      	ldr	r3, [pc, #8]	; (18d5c <bt_hci_cmd_state_set_init+0x20>)
   18d52:	fb02 3000 	mla	r0, r2, r0, r3
   18d56:	6044      	str	r4, [r0, #4]
}
   18d58:	bd10      	pop	{r4, pc}
   18d5a:	bf00      	nop
   18d5c:	20016240 	.word	0x20016240

00018d60 <bt_hci_cmd_create>:
{
   18d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   18d64:	f04f 32ff 	mov.w	r2, #4294967295
   18d68:	4605      	mov	r5, r0
   18d6a:	f04f 33ff 	mov.w	r3, #4294967295
   18d6e:	481b      	ldr	r0, [pc, #108]	; (18ddc <bt_hci_cmd_create+0x7c>)
   18d70:	460e      	mov	r6, r1
   18d72:	f01a fca8 	bl	336c6 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   18d76:	4604      	mov	r4, r0
   18d78:	b948      	cbnz	r0, 18d8e <bt_hci_cmd_create+0x2e>
   18d7a:	4919      	ldr	r1, [pc, #100]	; (18de0 <bt_hci_cmd_create+0x80>)
   18d7c:	4819      	ldr	r0, [pc, #100]	; (18de4 <bt_hci_cmd_create+0x84>)
   18d7e:	23e8      	movs	r3, #232	; 0xe8
   18d80:	4a19      	ldr	r2, [pc, #100]	; (18de8 <bt_hci_cmd_create+0x88>)
   18d82:	f016 ff75 	bl	2fc70 <printk>
   18d86:	21e8      	movs	r1, #232	; 0xe8
   18d88:	4817      	ldr	r0, [pc, #92]	; (18de8 <bt_hci_cmd_create+0x88>)
   18d8a:	f017 fa57 	bl	3023c <assert_post_action>
   18d8e:	2700      	movs	r7, #0
	net_buf_simple_reserve(&buf->b, reserve);
   18d90:	f104 0b08 	add.w	fp, r4, #8
   18d94:	2100      	movs	r1, #0
   18d96:	4658      	mov	r0, fp
   18d98:	f005 f928 	bl	1dfec <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   18d9c:	4620      	mov	r0, r4
   18d9e:	7527      	strb	r7, [r4, #20]
   18da0:	f004 ffea 	bl	1dd78 <net_buf_id>
   18da4:	f04f 0a0c 	mov.w	sl, #12
   18da8:	f8df 8040 	ldr.w	r8, [pc, #64]	; 18dec <bt_hci_cmd_create+0x8c>
   18dac:	fb0a 8000 	mla	r0, sl, r0, r8
   18db0:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   18db2:	4620      	mov	r0, r4
   18db4:	f004 ffe0 	bl	1dd78 <net_buf_id>
   18db8:	fb0a 8000 	mla	r0, sl, r0, r8
   18dbc:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   18dbe:	4620      	mov	r0, r4
   18dc0:	f004 ffda 	bl	1dd78 <net_buf_id>
   18dc4:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   18dc8:	2103      	movs	r1, #3
   18dca:	6047      	str	r7, [r0, #4]
   18dcc:	4658      	mov	r0, fp
   18dce:	f005 fa9b 	bl	1e308 <net_buf_simple_add>
	hdr->param_len = param_len;
   18dd2:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   18dd4:	8005      	strh	r5, [r0, #0]
}
   18dd6:	4620      	mov	r0, r4
   18dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ddc:	20015188 	.word	0x20015188
   18de0:	0003bb41 	.word	0x0003bb41
   18de4:	0003a56b 	.word	0x0003a56b
   18de8:	0003bcdc 	.word	0x0003bcdc
   18dec:	20016240 	.word	0x20016240

00018df0 <bt_hci_cmd_send_sync>:
{
   18df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18df4:	4607      	mov	r7, r0
   18df6:	4615      	mov	r5, r2
	if (!buf) {
   18df8:	460c      	mov	r4, r1
{
   18dfa:	b086      	sub	sp, #24
	if (!buf) {
   18dfc:	b921      	cbnz	r1, 18e08 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   18dfe:	f7ff ffaf 	bl	18d60 <bt_hci_cmd_create>
		if (!buf) {
   18e02:	4604      	mov	r4, r0
   18e04:	2800      	cmp	r0, #0
   18e06:	d055      	beq.n	18eb4 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18e08:	2201      	movs	r2, #1
   18e0a:	2100      	movs	r1, #0
   18e0c:	4668      	mov	r0, sp
   18e0e:	f01e fb47 	bl	374a0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   18e12:	4620      	mov	r0, r4
   18e14:	f004 ffb0 	bl	1dd78 <net_buf_id>
   18e18:	230c      	movs	r3, #12
   18e1a:	4e28      	ldr	r6, [pc, #160]	; (18ebc <bt_hci_cmd_send_sync+0xcc>)
   18e1c:	fb03 6000 	mla	r0, r3, r0, r6
   18e20:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   18e24:	4620      	mov	r0, r4
   18e26:	f005 f985 	bl	1e134 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   18e2a:	4621      	mov	r1, r4
   18e2c:	4824      	ldr	r0, [pc, #144]	; (18ec0 <bt_hci_cmd_send_sync+0xd0>)
   18e2e:	f005 f907 	bl	1e040 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   18e32:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   18e36:	2300      	movs	r3, #0
   18e38:	4668      	mov	r0, sp
   18e3a:	f012 fa25 	bl	2b288 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   18e3e:	4680      	mov	r8, r0
   18e40:	b180      	cbz	r0, 18e64 <bt_hci_cmd_send_sync+0x74>
   18e42:	f240 1333 	movw	r3, #307	; 0x133
   18e46:	4a1f      	ldr	r2, [pc, #124]	; (18ec4 <bt_hci_cmd_send_sync+0xd4>)
   18e48:	491f      	ldr	r1, [pc, #124]	; (18ec8 <bt_hci_cmd_send_sync+0xd8>)
   18e4a:	4820      	ldr	r0, [pc, #128]	; (18ecc <bt_hci_cmd_send_sync+0xdc>)
   18e4c:	f016 ff10 	bl	2fc70 <printk>
   18e50:	4641      	mov	r1, r8
   18e52:	481f      	ldr	r0, [pc, #124]	; (18ed0 <bt_hci_cmd_send_sync+0xe0>)
   18e54:	f016 ff0c 	bl	2fc70 <printk>
   18e58:	4040      	eors	r0, r0
   18e5a:	f380 8811 	msr	BASEPRI, r0
   18e5e:	f04f 0003 	mov.w	r0, #3
   18e62:	df02      	svc	2
	status = cmd(buf)->status;
   18e64:	4620      	mov	r0, r4
   18e66:	f004 ff87 	bl	1dd78 <net_buf_id>
   18e6a:	230c      	movs	r3, #12
   18e6c:	4343      	muls	r3, r0
   18e6e:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   18e70:	b1be      	cbz	r6, 18ea2 <bt_hci_cmd_send_sync+0xb2>
   18e72:	4a18      	ldr	r2, [pc, #96]	; (18ed4 <bt_hci_cmd_send_sync+0xe4>)
   18e74:	4b18      	ldr	r3, [pc, #96]	; (18ed8 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   18e76:	4639      	mov	r1, r7
   18e78:	1a9b      	subs	r3, r3, r2
   18e7a:	08db      	lsrs	r3, r3, #3
   18e7c:	019b      	lsls	r3, r3, #6
   18e7e:	4632      	mov	r2, r6
   18e80:	4816      	ldr	r0, [pc, #88]	; (18edc <bt_hci_cmd_send_sync+0xec>)
   18e82:	f043 0302 	orr.w	r3, r3, #2
   18e86:	f017 fa48 	bl	3031a <log_2>
		net_buf_unref(buf);
   18e8a:	4620      	mov	r0, r4
   18e8c:	f005 f90c 	bl	1e0a8 <net_buf_unref>
			return -EIO;
   18e90:	2e09      	cmp	r6, #9
   18e92:	bf0c      	ite	eq
   18e94:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   18e98:	f06f 0004 	mvnne.w	r0, #4
}
   18e9c:	b006      	add	sp, #24
   18e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   18ea2:	b115      	cbz	r5, 18eaa <bt_hci_cmd_send_sync+0xba>
	return 0;
   18ea4:	4630      	mov	r0, r6
		*rsp = buf;
   18ea6:	602c      	str	r4, [r5, #0]
   18ea8:	e7f8      	b.n	18e9c <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   18eaa:	4620      	mov	r0, r4
   18eac:	f005 f8fc 	bl	1e0a8 <net_buf_unref>
	return 0;
   18eb0:	4628      	mov	r0, r5
   18eb2:	e7f3      	b.n	18e9c <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   18eb4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18eb8:	e7f0      	b.n	18e9c <bt_hci_cmd_send_sync+0xac>
   18eba:	bf00      	nop
   18ebc:	20016240 	.word	0x20016240
   18ec0:	20014604 	.word	0x20014604
   18ec4:	0003bcdc 	.word	0x0003bcdc
   18ec8:	0003bd10 	.word	0x0003bd10
   18ecc:	0003a56b 	.word	0x0003a56b
   18ed0:	0003bd19 	.word	0x0003bd19
   18ed4:	000387c0 	.word	0x000387c0
   18ed8:	00038810 	.word	0x00038810
   18edc:	0003bd39 	.word	0x0003bd39

00018ee0 <hci_le_read_max_data_len>:
{
   18ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18ee2:	4606      	mov	r6, r0
   18ee4:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   18ee6:	f242 002f 	movw	r0, #8239	; 0x202f
   18eea:	2100      	movs	r1, #0
   18eec:	aa01      	add	r2, sp, #4
   18eee:	f7ff ff7f 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   18ef2:	4604      	mov	r4, r0
   18ef4:	b160      	cbz	r0, 18f10 <hci_le_read_max_data_len+0x30>
   18ef6:	490c      	ldr	r1, [pc, #48]	; (18f28 <hci_le_read_max_data_len+0x48>)
   18ef8:	4b0c      	ldr	r3, [pc, #48]	; (18f2c <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   18efa:	480d      	ldr	r0, [pc, #52]	; (18f30 <hci_le_read_max_data_len+0x50>)
   18efc:	1ac9      	subs	r1, r1, r3
   18efe:	08c9      	lsrs	r1, r1, #3
   18f00:	0189      	lsls	r1, r1, #6
   18f02:	f041 0101 	orr.w	r1, r1, #1
   18f06:	f017 f9e7 	bl	302d8 <log_0>
}
   18f0a:	4620      	mov	r0, r4
   18f0c:	b002      	add	sp, #8
   18f0e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   18f10:	9801      	ldr	r0, [sp, #4]
   18f12:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   18f14:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   18f18:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   18f1a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   18f1e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   18f20:	f005 f8c2 	bl	1e0a8 <net_buf_unref>
	return 0;
   18f24:	e7f1      	b.n	18f0a <hci_le_read_max_data_len+0x2a>
   18f26:	bf00      	nop
   18f28:	00038810 	.word	0x00038810
   18f2c:	000387c0 	.word	0x000387c0
   18f30:	0003bd55 	.word	0x0003bd55

00018f34 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
   18f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   18f36:	4d67      	ldr	r5, [pc, #412]	; (190d4 <hci_init+0x1a0>)
   18f38:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   18f3c:	6899      	ldr	r1, [r3, #8]
   18f3e:	f011 0101 	ands.w	r1, r1, #1
   18f42:	d11d      	bne.n	18f80 <hci_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   18f44:	f640 4003 	movw	r0, #3075	; 0xc03
   18f48:	aa01      	add	r2, sp, #4
   18f4a:	f7ff ff51 	bl	18df0 <bt_hci_cmd_send_sync>
		if (err) {
   18f4e:	4604      	mov	r4, r0
   18f50:	2800      	cmp	r0, #0
   18f52:	f040 80bc 	bne.w	190ce <hci_init+0x19a>
		hci_reset_complete(rsp);
   18f56:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   18f58:	689b      	ldr	r3, [r3, #8]
	if (status) {
   18f5a:	781b      	ldrb	r3, [r3, #0]
   18f5c:	b96b      	cbnz	r3, 18f7a <hci_init+0x46>
		bt_scan_reset();
   18f5e:	f001 facf 	bl	1a500 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18f62:	f105 0398 	add.w	r3, r5, #152	; 0x98
   18f66:	e8d3 2faf 	lda	r2, [r3]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   18f6a:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18f6e:	e8d3 1fef 	ldaex	r1, [r3]
   18f72:	e8c3 2fe0 	stlex	r0, r2, [r3]
   18f76:	2800      	cmp	r0, #0
   18f78:	d1f9      	bne.n	18f6e <hci_init+0x3a>
		net_buf_unref(rsp);
   18f7a:	9801      	ldr	r0, [sp, #4]
   18f7c:	f005 f894 	bl	1e0a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   18f80:	2100      	movs	r1, #0
   18f82:	f241 0003 	movw	r0, #4099	; 0x1003
   18f86:	aa01      	add	r2, sp, #4
   18f88:	f7ff ff32 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   18f8c:	4604      	mov	r4, r0
   18f8e:	2800      	cmp	r0, #0
   18f90:	f040 809d 	bne.w	190ce <hci_init+0x19a>
	read_local_features_complete(rsp);
   18f94:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   18f96:	4e50      	ldr	r6, [pc, #320]	; (190d8 <hci_init+0x1a4>)
   18f98:	6893      	ldr	r3, [r2, #8]
   18f9a:	f853 0f01 	ldr.w	r0, [r3, #1]!
   18f9e:	6859      	ldr	r1, [r3, #4]
   18fa0:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   18fa2:	4610      	mov	r0, r2
   18fa4:	f005 f880 	bl	1e0a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   18fa8:	4621      	mov	r1, r4
   18faa:	f241 0001 	movw	r0, #4097	; 0x1001
   18fae:	aa01      	add	r2, sp, #4
   18fb0:	f7ff ff1e 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   18fb4:	4604      	mov	r4, r0
   18fb6:	2800      	cmp	r0, #0
   18fb8:	f040 8089 	bne.w	190ce <hci_init+0x19a>
	read_local_ver_complete(rsp);
   18fbc:	9801      	ldr	r0, [sp, #4]
   18fbe:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   18fc0:	785a      	ldrb	r2, [r3, #1]
   18fc2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   18fc6:	78d9      	ldrb	r1, [r3, #3]
   18fc8:	789a      	ldrb	r2, [r3, #2]
   18fca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18fce:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   18fd0:	791a      	ldrb	r2, [r3, #4]
   18fd2:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   18fd6:	7a19      	ldrb	r1, [r3, #8]
   18fd8:	79da      	ldrb	r2, [r3, #7]
   18fda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18fde:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   18fe0:	795a      	ldrb	r2, [r3, #5]
   18fe2:	799b      	ldrb	r3, [r3, #6]
   18fe4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   18fe8:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   18fea:	f005 f85d 	bl	1e0a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   18fee:	4621      	mov	r1, r4
   18ff0:	f241 0002 	movw	r0, #4098	; 0x1002
   18ff4:	aa01      	add	r2, sp, #4
   18ff6:	f7ff fefb 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   18ffa:	4604      	mov	r4, r0
   18ffc:	2800      	cmp	r0, #0
   18ffe:	d166      	bne.n	190ce <hci_init+0x19a>
	read_supported_commands_complete(rsp);
   19000:	9f01      	ldr	r7, [sp, #4]
   19002:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   19004:	1c53      	adds	r3, r2, #1
   19006:	3241      	adds	r2, #65	; 0x41
   19008:	4634      	mov	r4, r6
   1900a:	6818      	ldr	r0, [r3, #0]
   1900c:	6859      	ldr	r1, [r3, #4]
   1900e:	3308      	adds	r3, #8
   19010:	c403      	stmia	r4!, {r0, r1}
   19012:	4293      	cmp	r3, r2
   19014:	4626      	mov	r6, r4
   19016:	d1f7      	bne.n	19008 <hci_init+0xd4>
	net_buf_unref(rsp);
   19018:	4638      	mov	r0, r7
   1901a:	f005 f845 	bl	1e0a8 <net_buf_unref>
		err = prng_init();
   1901e:	f001 fcd5 	bl	1a9cc <prng_init>
		if (err) {
   19022:	4604      	mov	r4, r0
   19024:	2800      	cmp	r0, #0
   19026:	d152      	bne.n	190ce <hci_init+0x19a>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   19028:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   1902c:	069f      	lsls	r7, r3, #26
   1902e:	d41a      	bmi.n	19066 <hci_init+0x132>
   19030:	492a      	ldr	r1, [pc, #168]	; (190dc <hci_init+0x1a8>)
   19032:	4b2b      	ldr	r3, [pc, #172]	; (190e0 <hci_init+0x1ac>)
		BT_WARN("Controller to host flow control not supported");
   19034:	482b      	ldr	r0, [pc, #172]	; (190e4 <hci_init+0x1b0>)
   19036:	1ac9      	subs	r1, r1, r3
   19038:	08c9      	lsrs	r1, r1, #3
   1903a:	0189      	lsls	r1, r1, #6
   1903c:	f041 0102 	orr.w	r1, r1, #2
   19040:	f017 f94a 	bl	302d8 <log_0>
	if (!BT_FEAT_LE(bt_dev.features)) {
   19044:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   19048:	065e      	lsls	r6, r3, #25
   1904a:	d44f      	bmi.n	190ec <hci_init+0x1b8>
   1904c:	4b24      	ldr	r3, [pc, #144]	; (190e0 <hci_init+0x1ac>)
   1904e:	4923      	ldr	r1, [pc, #140]	; (190dc <hci_init+0x1a8>)
		BT_ERR("Non-LE capable controller detected!");
   19050:	4825      	ldr	r0, [pc, #148]	; (190e8 <hci_init+0x1b4>)
   19052:	1ac9      	subs	r1, r1, r3
   19054:	08c9      	lsrs	r1, r1, #3
   19056:	0189      	lsls	r1, r1, #6
   19058:	f041 0101 	orr.w	r1, r1, #1
   1905c:	f017 f93c 	bl	302d8 <log_0>
		return -ENODEV;
   19060:	f06f 0412 	mvn.w	r4, #18
   19064:	e033      	b.n	190ce <hci_init+0x19a>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   19066:	2107      	movs	r1, #7
   19068:	f640 4033 	movw	r0, #3123	; 0xc33
   1906c:	f7ff fe78 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   19070:	4606      	mov	r6, r0
   19072:	b910      	cbnz	r0, 1907a <hci_init+0x146>
		return -ENOBUFS;
   19074:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19078:	e029      	b.n	190ce <hci_init+0x19a>
   1907a:	2107      	movs	r1, #7
   1907c:	3008      	adds	r0, #8
   1907e:	f005 f943 	bl	1e308 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   19082:	231b      	movs	r3, #27
   19084:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   19086:	2303      	movs	r3, #3
__ssp_bos_icheck3(memset, void *, int)
   19088:	f8c0 4002 	str.w	r4, [r0, #2]
   1908c:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   1908e:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   19090:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   19092:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   19094:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   19096:	4631      	mov	r1, r6
   19098:	f640 4033 	movw	r0, #3123	; 0xc33
   1909c:	f7ff fea8 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   190a0:	4604      	mov	r4, r0
   190a2:	b9a0      	cbnz	r0, 190ce <hci_init+0x19a>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   190a4:	2101      	movs	r1, #1
   190a6:	f640 4031 	movw	r0, #3121	; 0xc31
   190aa:	f7ff fe59 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   190ae:	4606      	mov	r6, r0
   190b0:	2800      	cmp	r0, #0
   190b2:	d0df      	beq.n	19074 <hci_init+0x140>
	return net_buf_simple_add_u8(&buf->b, val);
   190b4:	2101      	movs	r1, #1
   190b6:	3008      	adds	r0, #8
   190b8:	f01a fb38 	bl	3372c <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   190bc:	4622      	mov	r2, r4
   190be:	4631      	mov	r1, r6
   190c0:	f640 4031 	movw	r0, #3121	; 0xc31
   190c4:	f7ff fe94 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   190c8:	4604      	mov	r4, r0
   190ca:	2800      	cmp	r0, #0
   190cc:	d0ba      	beq.n	19044 <hci_init+0x110>
	if (err) {
		return err;
	}

	return 0;
}
   190ce:	4620      	mov	r0, r4
   190d0:	b003      	add	sp, #12
   190d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   190d4:	20014500 	.word	0x20014500
   190d8:	2001453c 	.word	0x2001453c
   190dc:	00038810 	.word	0x00038810
   190e0:	000387c0 	.word	0x000387c0
   190e4:	0003bd75 	.word	0x0003bd75
   190e8:	0003bda3 	.word	0x0003bda3
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   190ec:	2100      	movs	r1, #0
   190ee:	f242 0003 	movw	r0, #8195	; 0x2003
   190f2:	aa01      	add	r2, sp, #4
   190f4:	f7ff fe7c 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   190f8:	4604      	mov	r4, r0
   190fa:	2800      	cmp	r0, #0
   190fc:	d1e7      	bne.n	190ce <hci_init+0x19a>
	read_le_features_complete(rsp);
   190fe:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   19100:	4ea5      	ldr	r6, [pc, #660]	; (19398 <hci_init+0x464>)
   19102:	6893      	ldr	r3, [r2, #8]
   19104:	f853 0f01 	ldr.w	r0, [r3, #1]!
   19108:	6859      	ldr	r1, [r3, #4]
   1910a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   1910c:	4610      	mov	r0, r2
   1910e:	f004 ffcb 	bl	1e0a8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   19112:	4621      	mov	r1, r4
   19114:	f242 0002 	movw	r0, #8194	; 0x2002
   19118:	aa01      	add	r2, sp, #4
   1911a:	f7ff fe69 	bl	18df0 <bt_hci_cmd_send_sync>
		if (err) {
   1911e:	4604      	mov	r4, r0
   19120:	2800      	cmp	r0, #0
   19122:	d1d4      	bne.n	190ce <hci_init+0x19a>
		le_read_buffer_size_complete(rsp);
   19124:	9b01      	ldr	r3, [sp, #4]
   19126:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   19128:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1912c:	b291      	uxth	r1, r2
   1912e:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	if (!bt_dev.le.acl_mtu) {
   19132:	b129      	cbz	r1, 19140 <hci_init+0x20c>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   19134:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   19136:	4611      	mov	r1, r2
   19138:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1913c:	f01e f9b0 	bl	374a0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   19140:	9801      	ldr	r0, [sp, #4]
   19142:	f004 ffb1 	bl	1e0a8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   19146:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   1914a:	f016 0620 	ands.w	r6, r6, #32
   1914e:	f000 80cf 	beq.w	192f0 <hci_init+0x3bc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   19152:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   19156:	071c      	lsls	r4, r3, #28
   19158:	d511      	bpl.n	1917e <hci_init+0x24a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1915a:	2100      	movs	r1, #0
   1915c:	f242 001c 	movw	r0, #8220	; 0x201c
   19160:	aa01      	add	r2, sp, #4
   19162:	f7ff fe45 	bl	18df0 <bt_hci_cmd_send_sync>
		if (err) {
   19166:	4604      	mov	r4, r0
   19168:	2800      	cmp	r0, #0
   1916a:	d1b0      	bne.n	190ce <hci_init+0x19a>
		le_read_supp_states_complete(rsp);
   1916c:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1916e:	6883      	ldr	r3, [r0, #8]
   19170:	f853 2f01 	ldr.w	r2, [r3, #1]!
   19174:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   19176:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
   1917a:	f004 ff95 	bl	1e0a8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1917e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   19182:	0698      	lsls	r0, r3, #26
   19184:	d524      	bpl.n	191d0 <hci_init+0x29c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   19186:	4668      	mov	r0, sp
   19188:	f10d 0102 	add.w	r1, sp, #2
   1918c:	f7ff fea8 	bl	18ee0 <hci_le_read_max_data_len>
		if (err) {
   19190:	4604      	mov	r4, r0
   19192:	2800      	cmp	r0, #0
   19194:	d19b      	bne.n	190ce <hci_init+0x19a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   19196:	2104      	movs	r1, #4
   19198:	f242 0024 	movw	r0, #8228	; 0x2024
   1919c:	f7ff fde0 	bl	18d60 <bt_hci_cmd_create>
		if (!buf) {
   191a0:	4606      	mov	r6, r0
   191a2:	2800      	cmp	r0, #0
   191a4:	f43f af66 	beq.w	19074 <hci_init+0x140>
	return net_buf_simple_add(&buf->b, len);
   191a8:	2104      	movs	r1, #4
   191aa:	3008      	adds	r0, #8
   191ac:	f005 f8ac 	bl	1e308 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   191b0:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   191b4:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   191b6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   191b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   191bc:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   191be:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   191c0:	f242 0024 	movw	r0, #8228	; 0x2024
   191c4:	f7ff fe14 	bl	18df0 <bt_hci_cmd_send_sync>
		if (err) {
   191c8:	4604      	mov	r4, r0
   191ca:	2800      	cmp	r0, #0
   191cc:	f47f af7f 	bne.w	190ce <hci_init+0x19a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   191d0:	2108      	movs	r1, #8
   191d2:	f242 0001 	movw	r0, #8193	; 0x2001
   191d6:	f7ff fdc3 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   191da:	4604      	mov	r4, r0
   191dc:	2800      	cmp	r0, #0
   191de:	f43f af49 	beq.w	19074 <hci_init+0x140>
   191e2:	2108      	movs	r1, #8
   191e4:	4408      	add	r0, r1
   191e6:	f005 f88f 	bl	1e308 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   191ea:	f895 20a0 	ldrb.w	r2, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   191ee:	f012 0f02 	tst.w	r2, #2
   191f2:	bf14      	ite	ne
   191f4:	232f      	movne	r3, #47	; 0x2f
   191f6:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   191f8:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   191fa:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   191fe:	bf48      	it	mi
   19200:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   19204:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   19208:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1920c:	bf18      	it	ne
   1920e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   19212:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   19214:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   19218:	4621      	mov	r1, r4
   1921a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1921c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1921e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   19220:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   19222:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   19224:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   19226:	71c2      	strb	r2, [r0, #7]
   19228:	f242 0001 	movw	r0, #8193	; 0x2001
   1922c:	f7ff fde0 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   19230:	4604      	mov	r4, r0
   19232:	2800      	cmp	r0, #0
   19234:	f47f af4b 	bne.w	190ce <hci_init+0x19a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   19238:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1923c:	069a      	lsls	r2, r3, #26
   1923e:	d41e      	bmi.n	1927e <hci_init+0x34a>
	if (bt_dev.le.acl_mtu) {
   19240:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
   19244:	b9d9      	cbnz	r1, 1927e <hci_init+0x34a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   19246:	f241 0005 	movw	r0, #4101	; 0x1005
   1924a:	aa01      	add	r2, sp, #4
   1924c:	f7ff fdd0 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   19250:	4604      	mov	r4, r0
   19252:	2800      	cmp	r0, #0
   19254:	f47f af3b 	bne.w	190ce <hci_init+0x19a>
	if (bt_dev.le.acl_mtu) {
   19258:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
   1925c:	b963      	cbnz	r3, 19278 <hci_init+0x344>
	read_buffer_size_complete(rsp);
   1925e:	9b01      	ldr	r3, [sp, #4]
   19260:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   19262:	785a      	ldrb	r2, [r3, #1]
   19264:	7899      	ldrb	r1, [r3, #2]
   19266:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1926a:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1926e:	889a      	ldrh	r2, [r3, #4]
   19270:	484a      	ldr	r0, [pc, #296]	; (1939c <hci_init+0x468>)
   19272:	4611      	mov	r1, r2
   19274:	f01e f914 	bl	374a0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   19278:	9801      	ldr	r0, [sp, #4]
   1927a:	f004 ff15 	bl	1e0a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1927e:	2108      	movs	r1, #8
   19280:	f640 4001 	movw	r0, #3073	; 0xc01
   19284:	f7ff fd6c 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   19288:	4604      	mov	r4, r0
   1928a:	2800      	cmp	r0, #0
   1928c:	f43f aef2 	beq.w	19074 <hci_init+0x140>
   19290:	2108      	movs	r1, #8
   19292:	4408      	add	r0, r1
   19294:	f005 f838 	bl	1e308 <net_buf_simple_add>
	dst[0] = val;
   19298:	2310      	movs	r3, #16
   1929a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1929c:	2388      	movs	r3, #136	; 0x88
   1929e:	7043      	strb	r3, [r0, #1]
   192a0:	2302      	movs	r3, #2
	dst[0] = val;
   192a2:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   192a4:	70c3      	strb	r3, [r0, #3]
   192a6:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   192a8:	4621      	mov	r1, r4
	dst[0] = val;
   192aa:	7082      	strb	r2, [r0, #2]
   192ac:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   192ae:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   192b0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   192b2:	71c3      	strb	r3, [r0, #7]
   192b4:	f640 4001 	movw	r0, #3073	; 0xc01
   192b8:	f7ff fd9a 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   192bc:	4604      	mov	r4, r0
   192be:	2800      	cmp	r0, #0
   192c0:	f47f af05 	bne.w	190ce <hci_init+0x19a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   192c4:	4601      	mov	r1, r0
   192c6:	aa01      	add	r2, sp, #4
   192c8:	f64f 4001 	movw	r0, #64513	; 0xfc01
   192cc:	f7ff fd90 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   192d0:	4604      	mov	r4, r0
   192d2:	b340      	cbz	r0, 19326 <hci_init+0x3f2>
   192d4:	4932      	ldr	r1, [pc, #200]	; (193a0 <hci_init+0x46c>)
   192d6:	4b33      	ldr	r3, [pc, #204]	; (193a4 <hci_init+0x470>)
		BT_WARN("Vendor HCI extensions not available");
   192d8:	4833      	ldr	r0, [pc, #204]	; (193a8 <hci_init+0x474>)
   192da:	1ac9      	subs	r1, r1, r3
   192dc:	08c9      	lsrs	r1, r1, #3
   192de:	0189      	lsls	r1, r1, #6
   192e0:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Failed to read supported vendor features");
   192e4:	f016 fff8 	bl	302d8 <log_0>
	err = bt_id_init();
   192e8:	f001 f856 	bl	1a398 <bt_id_init>
   192ec:	4604      	mov	r4, r0
	if (err) {
   192ee:	e6ee      	b.n	190ce <hci_init+0x19a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   192f0:	2102      	movs	r1, #2
   192f2:	f640 406d 	movw	r0, #3181	; 0xc6d
   192f6:	f7ff fd33 	bl	18d60 <bt_hci_cmd_create>
		if (!buf) {
   192fa:	4604      	mov	r4, r0
   192fc:	2800      	cmp	r0, #0
   192fe:	f43f aeb9 	beq.w	19074 <hci_init+0x140>
   19302:	2102      	movs	r1, #2
   19304:	3008      	adds	r0, #8
   19306:	f004 ffff 	bl	1e308 <net_buf_simple_add>
		cp_le->le = 0x01;
   1930a:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1930c:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   1930e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   19310:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   19312:	4632      	mov	r2, r6
   19314:	f640 406d 	movw	r0, #3181	; 0xc6d
   19318:	f7ff fd6a 	bl	18df0 <bt_hci_cmd_send_sync>
		if (err) {
   1931c:	4604      	mov	r4, r0
   1931e:	2800      	cmp	r0, #0
   19320:	f43f af17 	beq.w	19152 <hci_init+0x21e>
   19324:	e6d3      	b.n	190ce <hci_init+0x19a>
	net_buf_unref(rsp);
   19326:	9801      	ldr	r0, [sp, #4]
   19328:	f004 febe 	bl	1e0a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1932c:	4621      	mov	r1, r4
   1932e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   19332:	aa01      	add	r2, sp, #4
   19334:	f7ff fd5c 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   19338:	4604      	mov	r4, r0
   1933a:	b140      	cbz	r0, 1934e <hci_init+0x41a>
   1933c:	4918      	ldr	r1, [pc, #96]	; (193a0 <hci_init+0x46c>)
   1933e:	4b19      	ldr	r3, [pc, #100]	; (193a4 <hci_init+0x470>)
		BT_WARN("Failed to read supported vendor commands");
   19340:	481a      	ldr	r0, [pc, #104]	; (193ac <hci_init+0x478>)
   19342:	1ac9      	subs	r1, r1, r3
   19344:	08c9      	lsrs	r1, r1, #3
   19346:	0189      	lsls	r1, r1, #6
   19348:	f041 0102 	orr.w	r1, r1, #2
   1934c:	e7ca      	b.n	192e4 <hci_init+0x3b0>
	rp.cmds = (void *)rsp->data;
   1934e:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   19350:	6883      	ldr	r3, [r0, #8]
   19352:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   19356:	f8a5 3085 	strh.w	r3, [r5, #133]	; 0x85
	net_buf_unref(rsp);
   1935a:	f004 fea5 	bl	1e0a8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1935e:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   19362:	075b      	lsls	r3, r3, #29
   19364:	d5c0      	bpl.n	192e8 <hci_init+0x3b4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   19366:	4621      	mov	r1, r4
   19368:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1936c:	aa01      	add	r2, sp, #4
   1936e:	f7ff fd3f 	bl	18df0 <bt_hci_cmd_send_sync>
		if (err) {
   19372:	b140      	cbz	r0, 19386 <hci_init+0x452>
   19374:	490a      	ldr	r1, [pc, #40]	; (193a0 <hci_init+0x46c>)
   19376:	4b0b      	ldr	r3, [pc, #44]	; (193a4 <hci_init+0x470>)
			BT_WARN("Failed to read supported vendor features");
   19378:	480d      	ldr	r0, [pc, #52]	; (193b0 <hci_init+0x47c>)
   1937a:	1ac9      	subs	r1, r1, r3
   1937c:	08c9      	lsrs	r1, r1, #3
   1937e:	0189      	lsls	r1, r1, #6
   19380:	f041 0102 	orr.w	r1, r1, #2
   19384:	e7ae      	b.n	192e4 <hci_init+0x3b0>
		rp.feat = (void *)rsp->data;
   19386:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   19388:	6883      	ldr	r3, [r0, #8]
   1938a:	785b      	ldrb	r3, [r3, #1]
   1938c:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
		net_buf_unref(rsp);
   19390:	f004 fe8a 	bl	1e0a8 <net_buf_unref>
   19394:	e7a8      	b.n	192e8 <hci_init+0x3b4>
   19396:	bf00      	nop
   19398:	200145a0 	.word	0x200145a0
   1939c:	200145d0 	.word	0x200145d0
   193a0:	00038810 	.word	0x00038810
   193a4:	000387c0 	.word	0x000387c0
   193a8:	0003bdc7 	.word	0x0003bdc7
   193ac:	0003bdeb 	.word	0x0003bdeb
   193b0:	0003be14 	.word	0x0003be14

000193b4 <bt_le_create_conn_legacy>:
{
   193b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   193b6:	b085      	sub	sp, #20
   193b8:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   193ba:	f10d 0103 	add.w	r1, sp, #3
   193be:	2000      	movs	r0, #0
   193c0:	f000 ffca 	bl	1a358 <bt_id_set_create_conn_own_addr>
	if (err) {
   193c4:	4604      	mov	r4, r0
   193c6:	2800      	cmp	r0, #0
   193c8:	d146      	bne.n	19458 <bt_le_create_conn_legacy+0xa4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   193ca:	2119      	movs	r1, #25
   193cc:	f242 000d 	movw	r0, #8205	; 0x200d
   193d0:	f7ff fcc6 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   193d4:	4607      	mov	r7, r0
   193d6:	2800      	cmp	r0, #0
   193d8:	d041      	beq.n	1945e <bt_le_create_conn_legacy+0xaa>
   193da:	2119      	movs	r1, #25
   193dc:	3008      	adds	r0, #8
   193de:	f004 ff93 	bl	1e308 <net_buf_simple_add>
   193e2:	4605      	mov	r5, r0
   193e4:	2219      	movs	r2, #25
   193e6:	4621      	mov	r1, r4
   193e8:	f01e f9eb 	bl	377c2 <memset>
	cp->own_addr_type = own_addr_type;
   193ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   193f0:	f106 0190 	add.w	r1, r6, #144	; 0x90
	cp->own_addr_type = own_addr_type;
   193f4:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   193f6:	1d68      	adds	r0, r5, #5
   193f8:	f019 f8b7 	bl	3256a <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   193fc:	4b19      	ldr	r3, [pc, #100]	; (19464 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
   193fe:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   19400:	899a      	ldrh	r2, [r3, #12]
	state->target = target;
   19402:	3398      	adds	r3, #152	; 0x98
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   19404:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   19406:	f833 2c8a 	ldrh.w	r2, [r3, #-138]
	cmd(buf)->state = state;
   1940a:	4638      	mov	r0, r7
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   1940c:	806a      	strh	r2, [r5, #2]
	state->target = target;
   1940e:	9301      	str	r3, [sp, #4]
	state->bit = bit;
   19410:	230b      	movs	r3, #11
   19412:	9302      	str	r3, [sp, #8]
	state->val = val;
   19414:	2301      	movs	r3, #1
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   19416:	f8b6 20a8 	ldrh.w	r2, [r6, #168]	; 0xa8
	state->val = val;
   1941a:	f88d 300c 	strb.w	r3, [sp, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   1941e:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   19422:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
   19426:	f8a5 200f 	strh.w	r2, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   1942a:	f8b6 20ac 	ldrh.w	r2, [r6, #172]	; 0xac
   1942e:	f8a5 2011 	strh.w	r2, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   19432:	f8b6 20ae 	ldrh.w	r2, [r6, #174]	; 0xae
   19436:	f8a5 2013 	strh.w	r2, [r5, #19]
	cmd(buf)->state = state;
   1943a:	f004 fc9d 	bl	1dd78 <net_buf_id>
   1943e:	220c      	movs	r2, #12
   19440:	4b09      	ldr	r3, [pc, #36]	; (19468 <bt_le_create_conn_legacy+0xb4>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   19442:	4639      	mov	r1, r7
	cmd(buf)->state = state;
   19444:	fb02 3300 	mla	r3, r2, r0, r3
   19448:	aa01      	add	r2, sp, #4
   1944a:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   1944c:	f242 000d 	movw	r0, #8205	; 0x200d
   19450:	4622      	mov	r2, r4
   19452:	f7ff fccd 	bl	18df0 <bt_hci_cmd_send_sync>
   19456:	4604      	mov	r4, r0
}
   19458:	4620      	mov	r0, r4
   1945a:	b005      	add	sp, #20
   1945c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1945e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19462:	e7f9      	b.n	19458 <bt_le_create_conn_legacy+0xa4>
   19464:	20014500 	.word	0x20014500
   19468:	20016240 	.word	0x20016240

0001946c <bt_le_create_conn_cancel>:
{
   1946c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   1946e:	2100      	movs	r1, #0
{
   19470:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   19472:	f242 000e 	movw	r0, #8206	; 0x200e
   19476:	f7ff fc73 	bl	18d60 <bt_hci_cmd_create>
	state->target = target;
   1947a:	4b0c      	ldr	r3, [pc, #48]	; (194ac <bt_le_create_conn_cancel+0x40>)
	state->val = val;
   1947c:	2500      	movs	r5, #0
	state->target = target;
   1947e:	9301      	str	r3, [sp, #4]
	state->bit = bit;
   19480:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   19482:	4604      	mov	r4, r0
	state->bit = bit;
   19484:	9302      	str	r3, [sp, #8]
	state->val = val;
   19486:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
   1948a:	f004 fc75 	bl	1dd78 <net_buf_id>
   1948e:	220c      	movs	r2, #12
   19490:	4b07      	ldr	r3, [pc, #28]	; (194b0 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   19492:	4621      	mov	r1, r4
	cmd(buf)->state = state;
   19494:	fb02 3000 	mla	r0, r2, r0, r3
   19498:	ab01      	add	r3, sp, #4
   1949a:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   1949c:	462a      	mov	r2, r5
   1949e:	f242 000e 	movw	r0, #8206	; 0x200e
   194a2:	f7ff fca5 	bl	18df0 <bt_hci_cmd_send_sync>
}
   194a6:	b005      	add	sp, #20
   194a8:	bd30      	pop	{r4, r5, pc}
   194aa:	bf00      	nop
   194ac:	20014598 	.word	0x20014598
   194b0:	20016240 	.word	0x20016240

000194b4 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
   194b4:	4b02      	ldr	r3, [pc, #8]	; (194c0 <bt_send+0xc>)
   194b6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   194ba:	691b      	ldr	r3, [r3, #16]
   194bc:	4718      	bx	r3
   194be:	bf00      	nop
   194c0:	20014500 	.word	0x20014500

000194c4 <bt_hci_cmd_send>:
{
   194c4:	b538      	push	{r3, r4, r5, lr}
   194c6:	4605      	mov	r5, r0
	if (!buf) {
   194c8:	460c      	mov	r4, r1
   194ca:	b919      	cbnz	r1, 194d4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   194cc:	f7ff fc48 	bl	18d60 <bt_hci_cmd_create>
		if (!buf) {
   194d0:	4604      	mov	r4, r0
   194d2:	b1f0      	cbz	r0, 19512 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   194d4:	f640 4335 	movw	r3, #3125	; 0xc35
   194d8:	429d      	cmp	r5, r3
   194da:	d114      	bne.n	19506 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
   194dc:	4620      	mov	r0, r4
   194de:	f7ff ffe9 	bl	194b4 <bt_send>
		if (err) {
   194e2:	4605      	mov	r5, r0
   194e4:	b168      	cbz	r0, 19502 <bt_hci_cmd_send+0x3e>
   194e6:	4b0c      	ldr	r3, [pc, #48]	; (19518 <bt_hci_cmd_send+0x54>)
   194e8:	4a0c      	ldr	r2, [pc, #48]	; (1951c <bt_hci_cmd_send+0x58>)
			BT_ERR("Unable to send to driver (err %d)", err);
   194ea:	4601      	mov	r1, r0
   194ec:	1ad2      	subs	r2, r2, r3
   194ee:	08d2      	lsrs	r2, r2, #3
   194f0:	0192      	lsls	r2, r2, #6
   194f2:	480b      	ldr	r0, [pc, #44]	; (19520 <bt_hci_cmd_send+0x5c>)
   194f4:	f042 0201 	orr.w	r2, r2, #1
   194f8:	f016 fefb 	bl	302f2 <log_1>
			net_buf_unref(buf);
   194fc:	4620      	mov	r0, r4
   194fe:	f004 fdd3 	bl	1e0a8 <net_buf_unref>
}
   19502:	4628      	mov	r0, r5
   19504:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   19506:	4621      	mov	r1, r4
   19508:	4806      	ldr	r0, [pc, #24]	; (19524 <bt_hci_cmd_send+0x60>)
   1950a:	f004 fd99 	bl	1e040 <net_buf_put>
	return 0;
   1950e:	2500      	movs	r5, #0
   19510:	e7f7      	b.n	19502 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   19512:	f06f 0568 	mvn.w	r5, #104	; 0x68
   19516:	e7f4      	b.n	19502 <bt_hci_cmd_send+0x3e>
   19518:	000387c0 	.word	0x000387c0
   1951c:	00038810 	.word	0x00038810
   19520:	0003be3d 	.word	0x0003be3d
   19524:	20014604 	.word	0x20014604

00019528 <bt_hci_host_num_completed_packets>:
{
   19528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1952a:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   1952c:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1952e:	7980      	ldrb	r0, [r0, #6]
   19530:	f004 fc1a 	bl	1dd68 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   19534:	4621      	mov	r1, r4
   19536:	f01d ffa9 	bl	3748c <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1953a:	4b2d      	ldr	r3, [pc, #180]	; (195f0 <bt_hci_host_num_completed_packets+0xc8>)
   1953c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   19540:	069b      	lsls	r3, r3, #26
   19542:	d553      	bpl.n	195ec <bt_hci_host_num_completed_packets+0xc4>
	conn = bt_conn_lookup_index(acl(buf)->index);
   19544:	7d60      	ldrb	r0, [r4, #21]
   19546:	f002 f8ed 	bl	1b724 <bt_conn_lookup_index>
	if (!conn) {
   1954a:	4605      	mov	r5, r0
   1954c:	b960      	cbnz	r0, 19568 <bt_hci_host_num_completed_packets+0x40>
   1954e:	4b29      	ldr	r3, [pc, #164]	; (195f4 <bt_hci_host_num_completed_packets+0xcc>)
   19550:	4a29      	ldr	r2, [pc, #164]	; (195f8 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Unable to look up conn with index 0x%02x",
   19552:	7d61      	ldrb	r1, [r4, #21]
   19554:	1ad2      	subs	r2, r2, r3
   19556:	08d2      	lsrs	r2, r2, #3
   19558:	0192      	lsls	r2, r2, #6
   1955a:	4828      	ldr	r0, [pc, #160]	; (195fc <bt_hci_host_num_completed_packets+0xd4>)
   1955c:	f042 0202 	orr.w	r2, r2, #2
}
   19560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
   19564:	f016 bec5 	b.w	302f2 <log_1>
	if (!bt_conn_is_handle_valid(conn)) {
   19568:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1956a:	2b01      	cmp	r3, #1
   1956c:	d002      	beq.n	19574 <bt_hci_host_num_completed_packets+0x4c>
   1956e:	3b07      	subs	r3, #7
   19570:	2b01      	cmp	r3, #1
   19572:	d815      	bhi.n	195a0 <bt_hci_host_num_completed_packets+0x78>
	bt_conn_unref(conn);
   19574:	4628      	mov	r0, r5
   19576:	f001 fd35 	bl	1afe4 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   1957a:	2105      	movs	r1, #5
   1957c:	f640 4035 	movw	r0, #3125	; 0xc35
   19580:	f7ff fbee 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   19584:	4604      	mov	r4, r0
   19586:	b9d0      	cbnz	r0, 195be <bt_hci_host_num_completed_packets+0x96>
   19588:	4b1a      	ldr	r3, [pc, #104]	; (195f4 <bt_hci_host_num_completed_packets+0xcc>)
   1958a:	491b      	ldr	r1, [pc, #108]	; (195f8 <bt_hci_host_num_completed_packets+0xd0>)
		BT_ERR("Unable to allocate new HCI command");
   1958c:	481c      	ldr	r0, [pc, #112]	; (19600 <bt_hci_host_num_completed_packets+0xd8>)
   1958e:	1ac9      	subs	r1, r1, r3
   19590:	08c9      	lsrs	r1, r1, #3
   19592:	0189      	lsls	r1, r1, #6
   19594:	f041 0101 	orr.w	r1, r1, #1
}
   19598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
   1959c:	f016 be9c 	b.w	302d8 <log_0>
   195a0:	4b14      	ldr	r3, [pc, #80]	; (195f4 <bt_hci_host_num_completed_packets+0xcc>)
   195a2:	4915      	ldr	r1, [pc, #84]	; (195f8 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Not reporting packet for non-connected conn");
   195a4:	4817      	ldr	r0, [pc, #92]	; (19604 <bt_hci_host_num_completed_packets+0xdc>)
   195a6:	1ac9      	subs	r1, r1, r3
   195a8:	08c9      	lsrs	r1, r1, #3
   195aa:	0189      	lsls	r1, r1, #6
   195ac:	f041 0102 	orr.w	r1, r1, #2
   195b0:	f016 fe92 	bl	302d8 <log_0>
		bt_conn_unref(conn);
   195b4:	4628      	mov	r0, r5
}
   195b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   195ba:	f001 bd13 	b.w	1afe4 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
   195be:	f100 0708 	add.w	r7, r0, #8
   195c2:	2101      	movs	r1, #1
   195c4:	4638      	mov	r0, r7
   195c6:	f004 fe9f 	bl	1e308 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   195ca:	2501      	movs	r5, #1
   195cc:	2104      	movs	r1, #4
   195ce:	7005      	strb	r5, [r0, #0]
   195d0:	4638      	mov	r0, r7
   195d2:	f004 fe99 	bl	1e308 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   195d6:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   195d8:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   195da:	7085      	strb	r5, [r0, #2]
   195dc:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   195de:	4621      	mov	r1, r4
}
   195e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   195e4:	f640 4035 	movw	r0, #3125	; 0xc35
   195e8:	f7ff bf6c 	b.w	194c4 <bt_hci_cmd_send>
}
   195ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   195ee:	bf00      	nop
   195f0:	20014500 	.word	0x20014500
   195f4:	000387c0 	.word	0x000387c0
   195f8:	00038810 	.word	0x00038810
   195fc:	0003be5f 	.word	0x0003be5f
   19600:	0003beb4 	.word	0x0003beb4
   19604:	0003be88 	.word	0x0003be88

00019608 <conn_auto_initiate>:
{
   19608:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1960a:	7a83      	ldrb	r3, [r0, #10]
{
   1960c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1960e:	2b07      	cmp	r3, #7
   19610:	d11d      	bne.n	1964e <conn_auto_initiate+0x46>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   19612:	1d06      	adds	r6, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19614:	e8d6 3faf 	lda	r3, [r6]
   19618:	049b      	lsls	r3, r3, #18
   1961a:	d41a      	bmi.n	19652 <conn_auto_initiate+0x4a>
   1961c:	78c3      	ldrb	r3, [r0, #3]
   1961e:	b123      	cbz	r3, 1962a <conn_auto_initiate+0x22>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   19620:	4b32      	ldr	r3, [pc, #200]	; (196ec <conn_auto_initiate+0xe4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   19622:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   19626:	071d      	lsls	r5, r3, #28
   19628:	d513      	bpl.n	19652 <conn_auto_initiate+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1962a:	2102      	movs	r1, #2
   1962c:	f242 0016 	movw	r0, #8214	; 0x2016
   19630:	f7ff fb96 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   19634:	4605      	mov	r5, r0
   19636:	b160      	cbz	r0, 19652 <conn_auto_initiate+0x4a>
   19638:	2102      	movs	r1, #2
   1963a:	3008      	adds	r0, #8
   1963c:	f004 fe64 	bl	1e308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   19640:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   19642:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
   19644:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   19646:	f242 0016 	movw	r0, #8214	; 0x2016
   1964a:	f7ff ff3b 	bl	194c4 <bt_hci_cmd_send>
}
   1964e:	b004      	add	sp, #16
   19650:	bd70      	pop	{r4, r5, r6, pc}
   19652:	e8d6 3faf 	lda	r3, [r6]
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   19656:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1965a:	4d24      	ldr	r5, [pc, #144]	; (196ec <conn_auto_initiate+0xe4>)
   1965c:	f3c3 3100 	ubfx	r1, r3, #12, #1
   19660:	d11e      	bne.n	196a0 <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   19662:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   19666:	07d8      	lsls	r0, r3, #31
   19668:	d51a      	bpl.n	196a0 <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1966a:	2302      	movs	r3, #2
   1966c:	9100      	str	r1, [sp, #0]
   1966e:	461a      	mov	r2, r3
   19670:	4620      	mov	r0, r4
   19672:	f018 ffe0 	bl	32636 <bt_le_set_phy>
		if (!err) {
   19676:	4601      	mov	r1, r0
   19678:	b940      	cbnz	r0, 1968c <conn_auto_initiate+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1967a:	e8d6 3fef 	ldaex	r3, [r6]
   1967e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19682:	e8c6 3fe2 	stlex	r2, r3, [r6]
   19686:	2a00      	cmp	r2, #0
   19688:	d0e1      	beq.n	1964e <conn_auto_initiate+0x46>
   1968a:	e7f6      	b.n	1967a <conn_auto_initiate+0x72>
   1968c:	4a18      	ldr	r2, [pc, #96]	; (196f0 <conn_auto_initiate+0xe8>)
   1968e:	4b19      	ldr	r3, [pc, #100]	; (196f4 <conn_auto_initiate+0xec>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   19690:	4819      	ldr	r0, [pc, #100]	; (196f8 <conn_auto_initiate+0xf0>)
   19692:	1ad2      	subs	r2, r2, r3
   19694:	08d2      	lsrs	r2, r2, #3
   19696:	0192      	lsls	r2, r2, #6
   19698:	f042 0201 	orr.w	r2, r2, #1
   1969c:	f016 fe29 	bl	302f2 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   196a0:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   196a4:	069a      	lsls	r2, r3, #26
   196a6:	d5d2      	bpl.n	1964e <conn_auto_initiate+0x46>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   196a8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   196ac:	689b      	ldr	r3, [r3, #8]
   196ae:	079b      	lsls	r3, r3, #30
   196b0:	d5cd      	bpl.n	1964e <conn_auto_initiate+0x46>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   196b2:	f10d 010e 	add.w	r1, sp, #14
   196b6:	a803      	add	r0, sp, #12
   196b8:	f7ff fc12 	bl	18ee0 <hci_le_read_max_data_len>
			if (!err) {
   196bc:	2800      	cmp	r0, #0
   196be:	d1c6      	bne.n	1964e <conn_auto_initiate+0x46>
				err = bt_le_set_data_len(conn,
   196c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   196c4:	4620      	mov	r0, r4
   196c6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   196ca:	f018 ff97 	bl	325fc <bt_le_set_data_len>
				if (err) {
   196ce:	4601      	mov	r1, r0
   196d0:	2800      	cmp	r0, #0
   196d2:	d0bc      	beq.n	1964e <conn_auto_initiate+0x46>
   196d4:	4b07      	ldr	r3, [pc, #28]	; (196f4 <conn_auto_initiate+0xec>)
   196d6:	4a06      	ldr	r2, [pc, #24]	; (196f0 <conn_auto_initiate+0xe8>)
					BT_ERR("Failed to set data len (%d)", err);
   196d8:	4808      	ldr	r0, [pc, #32]	; (196fc <conn_auto_initiate+0xf4>)
   196da:	1ad2      	subs	r2, r2, r3
   196dc:	08d2      	lsrs	r2, r2, #3
   196de:	0192      	lsls	r2, r2, #6
   196e0:	f042 0201 	orr.w	r2, r2, #1
   196e4:	f016 fe05 	bl	302f2 <log_1>
		}
   196e8:	e7b1      	b.n	1964e <conn_auto_initiate+0x46>
   196ea:	bf00      	nop
   196ec:	20014500 	.word	0x20014500
   196f0:	00038810 	.word	0x00038810
   196f4:	000387c0 	.word	0x000387c0
   196f8:	0003bed7 	.word	0x0003bed7
   196fc:	0003bef1 	.word	0x0003bef1

00019700 <bt_hci_le_enh_conn_complete>:
{
   19700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19704:	f8b0 9001 	ldrh.w	r9, [r0, #1]
   19708:	f04f 0800 	mov.w	r8, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   1970c:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   19710:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   19714:	4a6e      	ldr	r2, [pc, #440]	; (198d0 <bt_hci_le_enh_conn_complete+0x1d0>)
   19716:	b29b      	uxth	r3, r3
   19718:	8811      	ldrh	r1, [r2, #0]
	if (evt->status) {
   1971a:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   1971c:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   1971e:	bf08      	it	eq
   19720:	f8a2 8000 	strheq.w	r8, [r2]
{
   19724:	4605      	mov	r5, r0
			return true;
   19726:	bf08      	it	eq
   19728:	f04f 0801 	moveq.w	r8, #1
{
   1972c:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1972e:	fa1f f689 	uxth.w	r6, r9
	if (evt->status) {
   19732:	b3ac      	cbz	r4, 197a0 <bt_hci_le_enh_conn_complete+0xa0>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   19734:	2c02      	cmp	r4, #2
   19736:	d127      	bne.n	19788 <bt_hci_le_enh_conn_complete+0x88>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   19738:	2100      	movs	r1, #0
   1973a:	2206      	movs	r2, #6
   1973c:	4608      	mov	r0, r1
   1973e:	f001 fdcb 	bl	1b2d8 <bt_conn_lookup_state_le>
	if (!conn) {
   19742:	4605      	mov	r5, r0
   19744:	b978      	cbnz	r0, 19766 <bt_hci_le_enh_conn_complete+0x66>
   19746:	4963      	ldr	r1, [pc, #396]	; (198d4 <bt_hci_le_enh_conn_complete+0x1d4>)
   19748:	4b63      	ldr	r3, [pc, #396]	; (198d8 <bt_hci_le_enh_conn_complete+0x1d8>)
		BT_ERR("No pending master connection");
   1974a:	4864      	ldr	r0, [pc, #400]	; (198dc <bt_hci_le_enh_conn_complete+0x1dc>)
   1974c:	1ac9      	subs	r1, r1, r3
   1974e:	08c9      	lsrs	r1, r1, #3
   19750:	0189      	lsls	r1, r1, #6
   19752:	f041 0101 	orr.w	r1, r1, #1
   19756:	f016 fdbf 	bl	302d8 <log_0>
			bt_le_scan_update(false);
   1975a:	2000      	movs	r0, #0
   1975c:	f000 fed6 	bl	1a50c <bt_le_scan_update>
}
   19760:	b005      	add	sp, #20
   19762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19766:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   19768:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1976a:	f001 fc6d 	bl	1b048 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1976e:	1d2b      	adds	r3, r5, #4
   19770:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   19774:	07db      	lsls	r3, r3, #31
   19776:	d503      	bpl.n	19780 <bt_hci_le_enh_conn_complete+0x80>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   19778:	4621      	mov	r1, r4
   1977a:	4628      	mov	r0, r5
   1977c:	f001 fc64 	bl	1b048 <bt_conn_set_state>
	bt_conn_unref(conn);
   19780:	4628      	mov	r0, r5
   19782:	f001 fc2f 	bl	1afe4 <bt_conn_unref>
   19786:	e7e8      	b.n	1975a <bt_hci_le_enh_conn_complete+0x5a>
   19788:	4b53      	ldr	r3, [pc, #332]	; (198d8 <bt_hci_le_enh_conn_complete+0x1d8>)
   1978a:	4a52      	ldr	r2, [pc, #328]	; (198d4 <bt_hci_le_enh_conn_complete+0x1d4>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1978c:	4621      	mov	r1, r4
   1978e:	1ad2      	subs	r2, r2, r3
   19790:	08d2      	lsrs	r2, r2, #3
   19792:	0192      	lsls	r2, r2, #6
   19794:	4852      	ldr	r0, [pc, #328]	; (198e0 <bt_hci_le_enh_conn_complete+0x1e0>)
   19796:	f042 0202 	orr.w	r2, r2, #2
   1979a:	f016 fdaa 	bl	302f2 <log_1>
		return;
   1979e:	e7df      	b.n	19760 <bt_hci_le_enh_conn_complete+0x60>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   197a0:	7903      	ldrb	r3, [r0, #4]
   197a2:	1d07      	adds	r7, r0, #4
   197a4:	3b02      	subs	r3, #2
   197a6:	2b01      	cmp	r3, #1
   197a8:	d83a      	bhi.n	19820 <bt_hci_le_enh_conn_complete+0x120>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   197aa:	4639      	mov	r1, r7
   197ac:	a802      	add	r0, sp, #8
   197ae:	f018 fedc 	bl	3256a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   197b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   197b6:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   197ba:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   197bc:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   197c0:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   197c4:	f018 fed8 	bl	32578 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   197c8:	2301      	movs	r3, #1
   197ca:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   197ce:	78e8      	ldrb	r0, [r5, #3]
   197d0:	b980      	cbnz	r0, 197f4 <bt_hci_le_enh_conn_complete+0xf4>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   197d2:	2206      	movs	r2, #6
   197d4:	a902      	add	r1, sp, #8
   197d6:	f001 fd7f 	bl	1b2d8 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   197da:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   197dc:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   197de:	b943      	cbnz	r3, 197f2 <bt_hci_le_enh_conn_complete+0xf2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   197e0:	4b40      	ldr	r3, [pc, #256]	; (198e4 <bt_hci_le_enh_conn_complete+0x1e4>)
   197e2:	e8d3 2fef 	ldaex	r2, [r3]
   197e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   197ea:	e8c3 2fe1 	stlex	r1, r2, [r3]
   197ee:	2900      	cmp	r1, #0
   197f0:	d1f7      	bne.n	197e2 <bt_hci_le_enh_conn_complete+0xe2>
	if (!conn) {
   197f2:	bb44      	cbnz	r4, 19846 <bt_hci_le_enh_conn_complete+0x146>
   197f4:	4a38      	ldr	r2, [pc, #224]	; (198d8 <bt_hci_le_enh_conn_complete+0x1d8>)
   197f6:	4c37      	ldr	r4, [pc, #220]	; (198d4 <bt_hci_le_enh_conn_complete+0x1d4>)
		BT_ERR("No pending conn for peer %s",
   197f8:	4638      	mov	r0, r7
   197fa:	1aa4      	subs	r4, r4, r2
   197fc:	f7fe fefc 	bl	185f8 <bt_addr_le_str_real>
   19800:	f7fb fbcc 	bl	14f9c <z_log_strdup>
   19804:	08e4      	lsrs	r4, r4, #3
   19806:	01a4      	lsls	r4, r4, #6
   19808:	f044 0401 	orr.w	r4, r4, #1
   1980c:	4601      	mov	r1, r0
   1980e:	4622      	mov	r2, r4
   19810:	4835      	ldr	r0, [pc, #212]	; (198e8 <bt_hci_le_enh_conn_complete+0x1e8>)
   19812:	f016 fd6e 	bl	302f2 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   19816:	211f      	movs	r1, #31
   19818:	4630      	mov	r0, r6
   1981a:	f018 feb4 	bl	32586 <bt_hci_disconnect>
		return;
   1981e:	e79f      	b.n	19760 <bt_hci_le_enh_conn_complete+0x60>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   19820:	78c3      	ldrb	r3, [r0, #3]
		bt_addr_le_copy(&id_addr,
   19822:	4639      	mov	r1, r7
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   19824:	2b01      	cmp	r3, #1
   19826:	bf04      	itt	eq
   19828:	4b30      	ldreq	r3, [pc, #192]	; (198ec <bt_hci_le_enh_conn_complete+0x1ec>)
   1982a:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   1982e:	4620      	mov	r0, r4
   19830:	f018 ff70 	bl	32714 <bt_lookup_id_addr>
   19834:	4601      	mov	r1, r0
   19836:	a802      	add	r0, sp, #8
   19838:	f018 fe97 	bl	3256a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   1983c:	4639      	mov	r1, r7
   1983e:	4668      	mov	r0, sp
   19840:	f018 fe93 	bl	3256a <bt_addr_le_copy>
   19844:	e7c3      	b.n	197ce <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   19846:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   19848:	a902      	add	r1, sp, #8
	conn->handle = handle;
   1984a:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1984e:	f018 fe8c 	bl	3256a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   19852:	7e2a      	ldrb	r2, [r5, #24]
   19854:	7deb      	ldrb	r3, [r5, #23]
   19856:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1985a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1985e:	7eaa      	ldrb	r2, [r5, #26]
   19860:	7e6b      	ldrb	r3, [r5, #25]
   19862:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19866:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1986a:	7f2a      	ldrb	r2, [r5, #28]
   1986c:	7eeb      	ldrb	r3, [r5, #27]
   1986e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   19872:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   19874:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   19878:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   1987a:	7262      	strb	r2, [r4, #9]
	conn->role = evt->role;
   1987c:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1987e:	b96b      	cbnz	r3, 1989c <bt_hci_le_enh_conn_complete+0x19c>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   19880:	4669      	mov	r1, sp
   19882:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   19886:	f018 fe70 	bl	3256a <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   1988a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   1988c:	4b17      	ldr	r3, [pc, #92]	; (198ec <bt_hci_le_enh_conn_complete+0x1ec>)
					&bt_dev.id_addr[conn->id]);
   1988e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   19892:	4419      	add	r1, r3
   19894:	f104 0097 	add.w	r0, r4, #151	; 0x97
   19898:	f018 fe67 	bl	3256a <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1989c:	2107      	movs	r1, #7
   1989e:	4620      	mov	r0, r4
   198a0:	f001 fbd2 	bl	1b048 <bt_conn_set_state>
	if (is_disconnected) {
   198a4:	f1b8 0f00 	cmp.w	r8, #0
   198a8:	d003      	beq.n	198b2 <bt_hci_le_enh_conn_complete+0x1b2>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   198aa:	2101      	movs	r1, #1
   198ac:	4620      	mov	r0, r4
   198ae:	f001 fbcb 	bl	1b048 <bt_conn_set_state>
	bt_conn_connected(conn);
   198b2:	4620      	mov	r0, r4
   198b4:	f018 ffb4 	bl	32820 <bt_conn_connected>
	conn_auto_initiate(conn);
   198b8:	4620      	mov	r0, r4
   198ba:	f7ff fea5 	bl	19608 <conn_auto_initiate>
	bt_conn_unref(conn);
   198be:	4620      	mov	r0, r4
   198c0:	f001 fb90 	bl	1afe4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   198c4:	78e3      	ldrb	r3, [r4, #3]
   198c6:	2b00      	cmp	r3, #0
   198c8:	f47f af4a 	bne.w	19760 <bt_hci_le_enh_conn_complete+0x60>
   198cc:	e745      	b.n	1975a <bt_hci_le_enh_conn_complete+0x5a>
   198ce:	bf00      	nop
   198d0:	2001ad50 	.word	0x2001ad50
   198d4:	00038810 	.word	0x00038810
   198d8:	000387c0 	.word	0x000387c0
   198dc:	0003bf0d 	.word	0x0003bf0d
   198e0:	0003bf2a 	.word	0x0003bf2a
   198e4:	20014598 	.word	0x20014598
   198e8:	0003bf43 	.word	0x0003bf43
   198ec:	20014500 	.word	0x20014500

000198f0 <le_phy_update_complete>:
{
   198f0:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   198f2:	6883      	ldr	r3, [r0, #8]
   198f4:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   198f8:	4628      	mov	r0, r5
   198fa:	f001 fb99 	bl	1b030 <bt_conn_lookup_handle>
	if (!conn) {
   198fe:	4604      	mov	r4, r0
   19900:	b960      	cbnz	r0, 1991c <le_phy_update_complete+0x2c>
   19902:	4b13      	ldr	r3, [pc, #76]	; (19950 <le_phy_update_complete+0x60>)
   19904:	4a13      	ldr	r2, [pc, #76]	; (19954 <le_phy_update_complete+0x64>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19906:	4629      	mov	r1, r5
   19908:	1ad2      	subs	r2, r2, r3
   1990a:	08d2      	lsrs	r2, r2, #3
   1990c:	0192      	lsls	r2, r2, #6
   1990e:	4812      	ldr	r0, [pc, #72]	; (19958 <le_phy_update_complete+0x68>)
   19910:	f042 0201 	orr.w	r2, r2, #1
}
   19914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19918:	f016 bceb 	b.w	302f2 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1991c:	1d03      	adds	r3, r0, #4
   1991e:	e8d3 2fef 	ldaex	r2, [r3]
   19922:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   19926:	e8c3 1fe5 	stlex	r5, r1, [r3]
   1992a:	2d00      	cmp	r5, #0
   1992c:	d1f7      	bne.n	1991e <le_phy_update_complete+0x2e>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1992e:	0612      	lsls	r2, r2, #24
   19930:	d509      	bpl.n	19946 <le_phy_update_complete+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19932:	e8d3 2fef 	ldaex	r2, [r3]
   19936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1993a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1993e:	2900      	cmp	r1, #0
   19940:	d1f7      	bne.n	19932 <le_phy_update_complete+0x42>
		conn_auto_initiate(conn);
   19942:	f7ff fe61 	bl	19608 <conn_auto_initiate>
	bt_conn_unref(conn);
   19946:	4620      	mov	r0, r4
}
   19948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1994c:	f001 bb4a 	b.w	1afe4 <bt_conn_unref>
   19950:	000387c0 	.word	0x000387c0
   19954:	00038810 	.word	0x00038810
   19958:	0003bb6d 	.word	0x0003bb6d

0001995c <le_remote_feat_complete>:
{
   1995c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1995e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19960:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   19964:	4630      	mov	r0, r6
   19966:	f001 fb63 	bl	1b030 <bt_conn_lookup_handle>
	if (!conn) {
   1996a:	4604      	mov	r4, r0
   1996c:	b960      	cbnz	r0, 19988 <le_remote_feat_complete+0x2c>
   1996e:	4a13      	ldr	r2, [pc, #76]	; (199bc <le_remote_feat_complete+0x60>)
   19970:	4b13      	ldr	r3, [pc, #76]	; (199c0 <le_remote_feat_complete+0x64>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19972:	4631      	mov	r1, r6
}
   19974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19978:	1ad2      	subs	r2, r2, r3
   1997a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1997c:	0192      	lsls	r2, r2, #6
   1997e:	4811      	ldr	r0, [pc, #68]	; (199c4 <le_remote_feat_complete+0x68>)
   19980:	f042 0201 	orr.w	r2, r2, #1
   19984:	f016 bcb5 	b.w	302f2 <log_1>
	if (!evt->status) {
   19988:	782b      	ldrb	r3, [r5, #0]
   1998a:	b933      	cbnz	r3, 1999a <le_remote_feat_complete+0x3e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1998c:	f855 3f03 	ldr.w	r3, [r5, #3]!
   19990:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   19994:	686b      	ldr	r3, [r5, #4]
   19996:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   1999a:	1d23      	adds	r3, r4, #4
   1999c:	e8d3 2fef 	ldaex	r2, [r3]
   199a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   199a4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   199a8:	2900      	cmp	r1, #0
   199aa:	d1f7      	bne.n	1999c <le_remote_feat_complete+0x40>
	conn_auto_initiate(conn);
   199ac:	4620      	mov	r0, r4
   199ae:	f7ff fe2b 	bl	19608 <conn_auto_initiate>
	bt_conn_unref(conn);
   199b2:	4620      	mov	r0, r4
}
   199b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   199b8:	f001 bb14 	b.w	1afe4 <bt_conn_unref>
   199bc:	00038810 	.word	0x00038810
   199c0:	000387c0 	.word	0x000387c0
   199c4:	0003bb6d 	.word	0x0003bb6d

000199c8 <le_conn_param_neg_reply>:
{
   199c8:	b570      	push	{r4, r5, r6, lr}
   199ca:	4606      	mov	r6, r0
   199cc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   199ce:	f242 0021 	movw	r0, #8225	; 0x2021
   199d2:	2103      	movs	r1, #3
   199d4:	f7ff f9c4 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   199d8:	4604      	mov	r4, r0
   199da:	b958      	cbnz	r0, 199f4 <le_conn_param_neg_reply+0x2c>
}
   199dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   199e0:	490b      	ldr	r1, [pc, #44]	; (19a10 <le_conn_param_neg_reply+0x48>)
   199e2:	4b0c      	ldr	r3, [pc, #48]	; (19a14 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   199e4:	480c      	ldr	r0, [pc, #48]	; (19a18 <le_conn_param_neg_reply+0x50>)
   199e6:	1ac9      	subs	r1, r1, r3
   199e8:	08c9      	lsrs	r1, r1, #3
   199ea:	0189      	lsls	r1, r1, #6
   199ec:	f041 0101 	orr.w	r1, r1, #1
   199f0:	f016 bc72 	b.w	302d8 <log_0>
   199f4:	2103      	movs	r1, #3
   199f6:	3008      	adds	r0, #8
   199f8:	f004 fc86 	bl	1e308 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   199fc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   199fe:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   19a00:	4621      	mov	r1, r4
}
   19a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   19a06:	f242 0021 	movw	r0, #8225	; 0x2021
   19a0a:	f7ff bd5b 	b.w	194c4 <bt_hci_cmd_send>
   19a0e:	bf00      	nop
   19a10:	00038810 	.word	0x00038810
   19a14:	000387c0 	.word	0x000387c0
   19a18:	0003bf5f 	.word	0x0003bf5f

00019a1c <le_conn_param_req>:
{
   19a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   19a1e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   19a20:	78d9      	ldrb	r1, [r3, #3]
   19a22:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   19a24:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   19a26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19a2a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   19a2e:	7959      	ldrb	r1, [r3, #5]
   19a30:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   19a32:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   19a34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19a38:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   19a3c:	799a      	ldrb	r2, [r3, #6]
   19a3e:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   19a40:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   19a42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19a46:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19a4a:	7a1a      	ldrb	r2, [r3, #8]
   19a4c:	7a5b      	ldrb	r3, [r3, #9]
   19a4e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   19a52:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   19a56:	f001 faeb 	bl	1b030 <bt_conn_lookup_handle>
	if (!conn) {
   19a5a:	4606      	mov	r6, r0
   19a5c:	b980      	cbnz	r0, 19a80 <le_conn_param_req+0x64>
   19a5e:	4b20      	ldr	r3, [pc, #128]	; (19ae0 <le_conn_param_req+0xc4>)
   19a60:	4a20      	ldr	r2, [pc, #128]	; (19ae4 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19a62:	4621      	mov	r1, r4
   19a64:	1ad2      	subs	r2, r2, r3
   19a66:	08d2      	lsrs	r2, r2, #3
   19a68:	0192      	lsls	r2, r2, #6
   19a6a:	481f      	ldr	r0, [pc, #124]	; (19ae8 <le_conn_param_req+0xcc>)
   19a6c:	f042 0201 	orr.w	r2, r2, #1
   19a70:	f016 fc3f 	bl	302f2 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   19a74:	2102      	movs	r1, #2
   19a76:	4620      	mov	r0, r4
   19a78:	f7ff ffa6 	bl	199c8 <le_conn_param_neg_reply>
}
   19a7c:	b003      	add	sp, #12
   19a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   19a80:	4669      	mov	r1, sp
   19a82:	f001 f8f7 	bl	1ac74 <le_param_req>
   19a86:	b938      	cbnz	r0, 19a98 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   19a88:	211e      	movs	r1, #30
   19a8a:	4620      	mov	r0, r4
   19a8c:	f7ff ff9c 	bl	199c8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   19a90:	4630      	mov	r0, r6
   19a92:	f001 faa7 	bl	1afe4 <bt_conn_unref>
   19a96:	e7f1      	b.n	19a7c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   19a98:	210e      	movs	r1, #14
   19a9a:	f242 0020 	movw	r0, #8224	; 0x2020
   19a9e:	f7ff f95f 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   19aa2:	4605      	mov	r5, r0
   19aa4:	2800      	cmp	r0, #0
   19aa6:	d0f3      	beq.n	19a90 <le_conn_param_req+0x74>
   19aa8:	210e      	movs	r1, #14
   19aaa:	3008      	adds	r0, #8
   19aac:	f004 fc2c 	bl	1e308 <net_buf_simple_add>
   19ab0:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   19ab2:	220e      	movs	r2, #14
   19ab4:	2100      	movs	r1, #0
   19ab6:	f01d fe84 	bl	377c2 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   19aba:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   19abe:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   19ac0:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   19ac2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
   19ac6:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   19ac8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   19aca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   19ace:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
   19ad2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   19ad4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19ad8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   19ada:	f7ff fcf3 	bl	194c4 <bt_hci_cmd_send>
   19ade:	e7d7      	b.n	19a90 <le_conn_param_req+0x74>
   19ae0:	000387c0 	.word	0x000387c0
   19ae4:	00038810 	.word	0x00038810
   19ae8:	0003bb6d 	.word	0x0003bb6d

00019aec <hci_tx_thread>:
{
   19aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19af0:	4d51      	ldr	r5, [pc, #324]	; (19c38 <hci_tx_thread+0x14c>)
   19af2:	4b52      	ldr	r3, [pc, #328]	; (19c3c <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   19af4:	f8df 914c 	ldr.w	r9, [pc, #332]	; 19c44 <hci_tx_thread+0x158>
   19af8:	1aed      	subs	r5, r5, r3
		BT_ASSERT(err == 0);
   19afa:	f8df a174 	ldr.w	sl, [pc, #372]	; 19c70 <hci_tx_thread+0x184>
   19afe:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   19b00:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   19b04:	484e      	ldr	r0, [pc, #312]	; (19c40 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   19b06:	f36f 3352 	bfc	r3, #13, #6
   19b0a:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   19b0e:	f001 fa07 	bl	1af20 <bt_conn_prepare_events>
   19b12:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   19b14:	f04f 32ff 	mov.w	r2, #4294967295
   19b18:	f04f 33ff 	mov.w	r3, #4294967295
   19b1c:	4639      	mov	r1, r7
   19b1e:	4849      	ldr	r0, [pc, #292]	; (19c44 <hci_tx_thread+0x158>)
   19b20:	f014 fa14 	bl	2df4c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   19b24:	b160      	cbz	r0, 19b40 <hci_tx_thread+0x54>
   19b26:	f640 136f 	movw	r3, #2415	; 0x96f
   19b2a:	4652      	mov	r2, sl
   19b2c:	4946      	ldr	r1, [pc, #280]	; (19c48 <hci_tx_thread+0x15c>)
   19b2e:	4847      	ldr	r0, [pc, #284]	; (19c4c <hci_tx_thread+0x160>)
   19b30:	f016 f89e 	bl	2fc70 <printk>
   19b34:	4040      	eors	r0, r0
   19b36:	f380 8811 	msr	BASEPRI, r0
   19b3a:	f04f 0003 	mov.w	r0, #3
   19b3e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   19b40:	4e43      	ldr	r6, [pc, #268]	; (19c50 <hci_tx_thread+0x164>)
{
   19b42:	f8df 8100 	ldr.w	r8, [pc, #256]	; 19c44 <hci_tx_thread+0x158>
   19b46:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
   19b4a:	b917      	cbnz	r7, 19b52 <hci_tx_thread+0x66>
	z_impl_k_yield();
   19b4c:	f013 f8c8 	bl	2cce0 <z_impl_k_yield>
	while (1) {
   19b50:	e7d6      	b.n	19b00 <hci_tx_thread+0x14>
		switch (ev->state) {
   19b52:	f8d8 100c 	ldr.w	r1, [r8, #12]
   19b56:	f3c1 3145 	ubfx	r1, r1, #13, #6
   19b5a:	2901      	cmp	r1, #1
   19b5c:	d959      	bls.n	19c12 <hci_tx_thread+0x126>
   19b5e:	2904      	cmp	r1, #4
   19b60:	d163      	bne.n	19c2a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   19b62:	f898 300c 	ldrb.w	r3, [r8, #12]
   19b66:	2b00      	cmp	r3, #0
   19b68:	d157      	bne.n	19c1a <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   19b6a:	2200      	movs	r2, #0
   19b6c:	2300      	movs	r3, #0
   19b6e:	4839      	ldr	r0, [pc, #228]	; (19c54 <hci_tx_thread+0x168>)
   19b70:	f004 fa08 	bl	1df84 <net_buf_get>
	BT_ASSERT(buf);
   19b74:	4604      	mov	r4, r0
   19b76:	b960      	cbnz	r0, 19b92 <hci_tx_thread+0xa6>
   19b78:	f640 130c 	movw	r3, #2316	; 0x90c
   19b7c:	4652      	mov	r2, sl
   19b7e:	4936      	ldr	r1, [pc, #216]	; (19c58 <hci_tx_thread+0x16c>)
   19b80:	4832      	ldr	r0, [pc, #200]	; (19c4c <hci_tx_thread+0x160>)
   19b82:	f016 f875 	bl	2fc70 <printk>
   19b86:	4040      	eors	r0, r0
   19b88:	f380 8811 	msr	BASEPRI, r0
   19b8c:	f04f 0003 	mov.w	r0, #3
   19b90:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   19b92:	f04f 33ff 	mov.w	r3, #4294967295
   19b96:	f04f 32ff 	mov.w	r2, #4294967295
   19b9a:	4658      	mov	r0, fp
   19b9c:	f011 fb74 	bl	2b288 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   19ba0:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   19ba4:	b163      	cbz	r3, 19bc0 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   19ba6:	01a9      	lsls	r1, r5, #6
   19ba8:	482c      	ldr	r0, [pc, #176]	; (19c5c <hci_tx_thread+0x170>)
   19baa:	f041 0101 	orr.w	r1, r1, #1
   19bae:	f016 fb93 	bl	302d8 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   19bb2:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
   19bb6:	f004 fa77 	bl	1e0a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   19bba:	2300      	movs	r3, #0
   19bbc:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
   19bc0:	4620      	mov	r0, r4
   19bc2:	f004 fab7 	bl	1e134 <net_buf_ref>
   19bc6:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
	err = bt_send(buf);
   19bca:	4620      	mov	r0, r4
   19bcc:	f7ff fc72 	bl	194b4 <bt_send>
	if (err) {
   19bd0:	4601      	mov	r1, r0
   19bd2:	b1f0      	cbz	r0, 19c12 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   19bd4:	01aa      	lsls	r2, r5, #6
   19bd6:	4822      	ldr	r0, [pc, #136]	; (19c60 <hci_tx_thread+0x174>)
   19bd8:	f042 0201 	orr.w	r2, r2, #1
   19bdc:	f016 fb89 	bl	302f2 <log_1>
	z_impl_k_sem_give(sem);
   19be0:	4820      	ldr	r0, [pc, #128]	; (19c64 <hci_tx_thread+0x178>)
   19be2:	f011 fb0d 	bl	2b200 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   19be6:	4620      	mov	r0, r4
   19be8:	f004 f8c6 	bl	1dd78 <net_buf_id>
   19bec:	220c      	movs	r2, #12
   19bee:	4b1e      	ldr	r3, [pc, #120]	; (19c68 <hci_tx_thread+0x17c>)
   19bf0:	211f      	movs	r1, #31
   19bf2:	fb02 3000 	mla	r0, r2, r0, r3
   19bf6:	4622      	mov	r2, r4
   19bf8:	8840      	ldrh	r0, [r0, #2]
   19bfa:	f7fe ffdf 	bl	18bbc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   19bfe:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
   19c02:	f004 fa51 	bl	1e0a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   19c06:	2300      	movs	r3, #0
		net_buf_unref(buf);
   19c08:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   19c0a:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
   19c0e:	f004 fa4b 	bl	1e0a8 <net_buf_unref>
	for (; count; ev++, count--) {
   19c12:	f108 0814 	add.w	r8, r8, #20
   19c16:	3f01      	subs	r7, #1
   19c18:	e797      	b.n	19b4a <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   19c1a:	2b01      	cmp	r3, #1
   19c1c:	d1f9      	bne.n	19c12 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   19c1e:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   19c22:	3838      	subs	r0, #56	; 0x38
   19c24:	f001 fcf4 	bl	1b610 <bt_conn_process_tx>
   19c28:	e7f3      	b.n	19c12 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   19c2a:	01aa      	lsls	r2, r5, #6
   19c2c:	480f      	ldr	r0, [pc, #60]	; (19c6c <hci_tx_thread+0x180>)
   19c2e:	f042 0202 	orr.w	r2, r2, #2
   19c32:	f016 fb5e 	bl	302f2 <log_1>
   19c36:	e7ec      	b.n	19c12 <hci_tx_thread+0x126>
   19c38:	00038810 	.word	0x00038810
   19c3c:	000387c0 	.word	0x000387c0
   19c40:	2001479c 	.word	0x2001479c
   19c44:	20014788 	.word	0x20014788
   19c48:	0003bd10 	.word	0x0003bd10
   19c4c:	0003a56b 	.word	0x0003a56b
   19c50:	20014500 	.word	0x20014500
   19c54:	20014604 	.word	0x20014604
   19c58:	0003bb41 	.word	0x0003bb41
   19c5c:	0003bf79 	.word	0x0003bf79
   19c60:	0003be3d 	.word	0x0003be3d
   19c64:	200145e8 	.word	0x200145e8
   19c68:	20016240 	.word	0x20016240
   19c6c:	0003bf94 	.word	0x0003bf94
   19c70:	0003bcdc 	.word	0x0003bcdc

00019c74 <hci_event_prio>:

#endif /* CONFIG_BT_CONN */
};

void hci_event_prio(struct net_buf *buf)
{
   19c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c78:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
   19c7a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   19c7e:	4630      	mov	r0, r6
   19c80:	f019 fd3c 	bl	336fc <net_buf_simple_headroom>
	state->len = buf->len;
   19c84:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   19c88:	4605      	mov	r5, r0

	BT_ASSERT(buf->len >= sizeof(*hdr));
   19c8a:	f1b8 0f01 	cmp.w	r8, #1
   19c8e:	d80c      	bhi.n	19caa <hci_event_prio+0x36>
   19c90:	f640 43dc 	movw	r3, #3292	; 0xcdc
   19c94:	4a1b      	ldr	r2, [pc, #108]	; (19d04 <hci_event_prio+0x90>)
   19c96:	491c      	ldr	r1, [pc, #112]	; (19d08 <hci_event_prio+0x94>)
   19c98:	481c      	ldr	r0, [pc, #112]	; (19d0c <hci_event_prio+0x98>)
   19c9a:	f015 ffe9 	bl	2fc70 <printk>
   19c9e:	4040      	eors	r0, r0
   19ca0:	f380 8811 	msr	BASEPRI, r0
   19ca4:	f04f 0003 	mov.w	r0, #3
   19ca8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   19caa:	2102      	movs	r1, #2
   19cac:	4630      	mov	r0, r6
   19cae:	f004 fb09 	bl	1e2c4 <net_buf_simple_pull_mem>
   19cb2:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19cb4:	7800      	ldrb	r0, [r0, #0]
   19cb6:	f018 fc46 	bl	32546 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   19cba:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19cbc:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   19cbe:	d40c      	bmi.n	19cda <hci_event_prio+0x66>
   19cc0:	f44f 634e 	mov.w	r3, #3296	; 0xce0
   19cc4:	4a0f      	ldr	r2, [pc, #60]	; (19d04 <hci_event_prio+0x90>)
   19cc6:	4912      	ldr	r1, [pc, #72]	; (19d10 <hci_event_prio+0x9c>)
   19cc8:	4810      	ldr	r0, [pc, #64]	; (19d0c <hci_event_prio+0x98>)
   19cca:	f015 ffd1 	bl	2fc70 <printk>
   19cce:	4040      	eors	r0, r0
   19cd0:	f380 8811 	msr	BASEPRI, r0
   19cd4:	f04f 0003 	mov.w	r0, #3
   19cd8:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   19cda:	2305      	movs	r3, #5
   19cdc:	4621      	mov	r1, r4
   19cde:	4a0d      	ldr	r2, [pc, #52]	; (19d14 <hci_event_prio+0xa0>)
   19ce0:	7838      	ldrb	r0, [r7, #0]
   19ce2:	f7fe fe11 	bl	18908 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   19ce6:	07b3      	lsls	r3, r6, #30
   19ce8:	d507      	bpl.n	19cfa <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   19cea:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   19cec:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   19cf0:	fa10 f585 	uxtah	r5, r0, r5
   19cf4:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
   19cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   19cfa:	4620      	mov	r0, r4
}
   19cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   19d00:	f004 b9d2 	b.w	1e0a8 <net_buf_unref>
   19d04:	0003bcdc 	.word	0x0003bcdc
   19d08:	0003bfb5 	.word	0x0003bfb5
   19d0c:	0003a56b 	.word	0x0003a56b
   19d10:	0003bfce 	.word	0x0003bfce
   19d14:	00038e4c 	.word	0x00038e4c

00019d18 <bt_recv>:

int bt_recv(struct net_buf *buf)
{
   19d18:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   19d1a:	7d01      	ldrb	r1, [r0, #20]
   19d1c:	4604      	mov	r4, r0
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
   19d1e:	2901      	cmp	r1, #1
   19d20:	d04b      	beq.n	19dba <bt_recv+0xa2>
   19d22:	2903      	cmp	r1, #3
   19d24:	d178      	bne.n	19e18 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19d26:	8983      	ldrh	r3, [r0, #12]
   19d28:	2b03      	cmp	r3, #3
   19d2a:	d80c      	bhi.n	19d46 <bt_recv+0x2e>
   19d2c:	f240 1379 	movw	r3, #377	; 0x179
   19d30:	4a41      	ldr	r2, [pc, #260]	; (19e38 <bt_recv+0x120>)
   19d32:	4942      	ldr	r1, [pc, #264]	; (19e3c <bt_recv+0x124>)
   19d34:	4842      	ldr	r0, [pc, #264]	; (19e40 <bt_recv+0x128>)
   19d36:	f015 ff9b 	bl	2fc70 <printk>
   19d3a:	4040      	eors	r0, r0
   19d3c:	f380 8811 	msr	BASEPRI, r0
   19d40:	f04f 0003 	mov.w	r0, #3
   19d44:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   19d46:	2104      	movs	r1, #4
   19d48:	f104 0008 	add.w	r0, r4, #8
   19d4c:	f004 faba 	bl	1e2c4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   19d50:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   19d52:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   19d54:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   19d56:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   19d58:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   19d5c:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   19d5e:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   19d60:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   19d62:	d00d      	beq.n	19d80 <bt_recv+0x68>
   19d64:	4837      	ldr	r0, [pc, #220]	; (19e44 <bt_recv+0x12c>)
   19d66:	4b38      	ldr	r3, [pc, #224]	; (19e48 <bt_recv+0x130>)
   19d68:	1a1b      	subs	r3, r3, r0
   19d6a:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   19d6c:	019b      	lsls	r3, r3, #6
   19d6e:	4837      	ldr	r0, [pc, #220]	; (19e4c <bt_recv+0x134>)
   19d70:	f043 0301 	orr.w	r3, r3, #1
   19d74:	f016 fad1 	bl	3031a <log_2>
	net_buf_unref(buf);
   19d78:	4620      	mov	r0, r4
   19d7a:	f004 f995 	bl	1e0a8 <net_buf_unref>
   19d7e:	e01a      	b.n	19db6 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   19d80:	f001 f956 	bl	1b030 <bt_conn_lookup_handle>
	if (!conn) {
   19d84:	4605      	mov	r5, r0
   19d86:	b958      	cbnz	r0, 19da0 <bt_recv+0x88>
   19d88:	4b2e      	ldr	r3, [pc, #184]	; (19e44 <bt_recv+0x12c>)
   19d8a:	4a2f      	ldr	r2, [pc, #188]	; (19e48 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   19d8c:	8ae1      	ldrh	r1, [r4, #22]
   19d8e:	1ad2      	subs	r2, r2, r3
   19d90:	08d2      	lsrs	r2, r2, #3
   19d92:	0192      	lsls	r2, r2, #6
   19d94:	482e      	ldr	r0, [pc, #184]	; (19e50 <bt_recv+0x138>)
   19d96:	f042 0201 	orr.w	r2, r2, #1
   19d9a:	f016 faaa 	bl	302f2 <log_1>
		net_buf_unref(buf);
   19d9e:	e7eb      	b.n	19d78 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
   19da0:	f001 fc9a 	bl	1b6d8 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   19da4:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   19da6:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   19da8:	0b32      	lsrs	r2, r6, #12
   19daa:	4628      	mov	r0, r5
   19dac:	f000 ffca 	bl	1ad44 <bt_conn_recv>
	bt_conn_unref(conn);
   19db0:	4628      	mov	r0, r5
   19db2:	f001 f917 	bl	1afe4 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
   19db6:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
   19db8:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19dba:	8983      	ldrh	r3, [r0, #12]
   19dbc:	2b01      	cmp	r3, #1
   19dbe:	d80c      	bhi.n	19dda <bt_recv+0xc2>
   19dc0:	f640 03f9 	movw	r3, #2297	; 0x8f9
   19dc4:	4a1c      	ldr	r2, [pc, #112]	; (19e38 <bt_recv+0x120>)
   19dc6:	491d      	ldr	r1, [pc, #116]	; (19e3c <bt_recv+0x124>)
   19dc8:	481d      	ldr	r0, [pc, #116]	; (19e40 <bt_recv+0x128>)
   19dca:	f015 ff51 	bl	2fc70 <printk>
   19dce:	4040      	eors	r0, r0
   19dd0:	f380 8811 	msr	BASEPRI, r0
   19dd4:	f04f 0003 	mov.w	r0, #3
   19dd8:	df02      	svc	2
   19dda:	2102      	movs	r1, #2
   19ddc:	f104 0008 	add.w	r0, r4, #8
   19de0:	f004 fa70 	bl	1e2c4 <net_buf_simple_pull_mem>
   19de4:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   19de6:	7800      	ldrb	r0, [r0, #0]
   19de8:	f018 fbad 	bl	32546 <bt_hci_evt_get_flags>
   19dec:	0783      	lsls	r3, r0, #30
   19dee:	d40c      	bmi.n	19e0a <bt_recv+0xf2>
   19df0:	f640 03fd 	movw	r3, #2301	; 0x8fd
   19df4:	4a10      	ldr	r2, [pc, #64]	; (19e38 <bt_recv+0x120>)
   19df6:	4917      	ldr	r1, [pc, #92]	; (19e54 <bt_recv+0x13c>)
   19df8:	4811      	ldr	r0, [pc, #68]	; (19e40 <bt_recv+0x128>)
   19dfa:	f015 ff39 	bl	2fc70 <printk>
   19dfe:	4040      	eors	r0, r0
   19e00:	f380 8811 	msr	BASEPRI, r0
   19e04:	f04f 0003 	mov.w	r0, #3
   19e08:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   19e0a:	2304      	movs	r3, #4
   19e0c:	4621      	mov	r1, r4
   19e0e:	4a12      	ldr	r2, [pc, #72]	; (19e58 <bt_recv+0x140>)
   19e10:	7828      	ldrb	r0, [r5, #0]
   19e12:	f7fe fd79 	bl	18908 <handle_event>
   19e16:	e7af      	b.n	19d78 <bt_recv+0x60>
   19e18:	4b0a      	ldr	r3, [pc, #40]	; (19e44 <bt_recv+0x12c>)
   19e1a:	4a0b      	ldr	r2, [pc, #44]	; (19e48 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   19e1c:	480f      	ldr	r0, [pc, #60]	; (19e5c <bt_recv+0x144>)
   19e1e:	1ad2      	subs	r2, r2, r3
   19e20:	08d2      	lsrs	r2, r2, #3
   19e22:	0192      	lsls	r2, r2, #6
   19e24:	f042 0201 	orr.w	r2, r2, #1
   19e28:	f016 fa63 	bl	302f2 <log_1>
		net_buf_unref(buf);
   19e2c:	4620      	mov	r0, r4
   19e2e:	f004 f93b 	bl	1e0a8 <net_buf_unref>
		return -EINVAL;
   19e32:	f06f 0015 	mvn.w	r0, #21
   19e36:	e7bf      	b.n	19db8 <bt_recv+0xa0>
   19e38:	0003bcdc 	.word	0x0003bcdc
   19e3c:	0003bfb5 	.word	0x0003bfb5
   19e40:	0003a56b 	.word	0x0003a56b
   19e44:	000387c0 	.word	0x000387c0
   19e48:	00038810 	.word	0x00038810
   19e4c:	0003bfe7 	.word	0x0003bfe7
   19e50:	0003c00b 	.word	0x0003c00b
   19e54:	0003c02d 	.word	0x0003c02d
   19e58:	00038e2c 	.word	0x00038e2c
   19e5c:	0003c05b 	.word	0x0003c05b

00019e60 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
   19e60:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   19e62:	7d03      	ldrb	r3, [r0, #20]
{
   19e64:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   19e66:	2b01      	cmp	r3, #1
   19e68:	d00c      	beq.n	19e84 <bt_recv_prio+0x24>
   19e6a:	f640 5323 	movw	r3, #3363	; 0xd23
   19e6e:	4a08      	ldr	r2, [pc, #32]	; (19e90 <bt_recv_prio+0x30>)
   19e70:	4908      	ldr	r1, [pc, #32]	; (19e94 <bt_recv_prio+0x34>)
   19e72:	4809      	ldr	r0, [pc, #36]	; (19e98 <bt_recv_prio+0x38>)
   19e74:	f015 fefc 	bl	2fc70 <printk>
   19e78:	4040      	eors	r0, r0
   19e7a:	f380 8811 	msr	BASEPRI, r0
   19e7e:	f04f 0003 	mov.w	r0, #3
   19e82:	df02      	svc	2

	hci_event_prio(buf);
   19e84:	4620      	mov	r0, r4
   19e86:	f7ff fef5 	bl	19c74 <hci_event_prio>

	return 0;
}
   19e8a:	2000      	movs	r0, #0
   19e8c:	bd10      	pop	{r4, pc}
   19e8e:	bf00      	nop
   19e90:	0003bcdc 	.word	0x0003bcdc
   19e94:	0003c06f 	.word	0x0003c06f
   19e98:	0003a56b 	.word	0x0003a56b

00019e9c <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
   19e9c:	4a08      	ldr	r2, [pc, #32]	; (19ec0 <bt_hci_driver_register+0x24>)
{
   19e9e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   19ea0:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   19ea4:	b930      	cbnz	r0, 19eb4 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
   19ea6:	68d9      	ldr	r1, [r3, #12]
   19ea8:	b139      	cbz	r1, 19eba <bt_hci_driver_register+0x1e>
   19eaa:	6919      	ldr	r1, [r3, #16]
   19eac:	b129      	cbz	r1, 19eba <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
   19eae:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
   19eb2:	4770      	bx	lr
		return -EALREADY;
   19eb4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19eb8:	4770      	bx	lr
		return -EINVAL;
   19eba:	f06f 0015 	mvn.w	r0, #21
}
   19ebe:	4770      	bx	lr
   19ec0:	20014500 	.word	0x20014500

00019ec4 <bt_finalize_init>:
   19ec4:	4b05      	ldr	r3, [pc, #20]	; (19edc <bt_finalize_init+0x18>)
   19ec6:	e8d3 2fef 	ldaex	r2, [r3]
   19eca:	f042 0202 	orr.w	r2, r2, #2
   19ece:	e8c3 2fe1 	stlex	r1, r2, [r3]
   19ed2:	2900      	cmp	r1, #0
   19ed4:	d1f7      	bne.n	19ec6 <bt_finalize_init+0x2>
void bt_finalize_init(void)
{
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
   19ed6:	2000      	movs	r0, #0
   19ed8:	f000 bb18 	b.w	1a50c <bt_le_scan_update>
   19edc:	20014598 	.word	0x20014598

00019ee0 <init_work>:
	bt_finalize_init();
	return 0;
}

static void init_work(struct k_work *work)
{
   19ee0:	b510      	push	{r4, lr}
	err = hci_init();
   19ee2:	f7ff f827 	bl	18f34 <hci_init>
	if (err) {
   19ee6:	4604      	mov	r4, r0
   19ee8:	b928      	cbnz	r0, 19ef6 <init_work+0x16>
		err = bt_conn_init();
   19eea:	f001 fc23 	bl	1b734 <bt_conn_init>
		if (err) {
   19eee:	4604      	mov	r4, r0
   19ef0:	b908      	cbnz	r0, 19ef6 <init_work+0x16>
	bt_finalize_init();
   19ef2:	f7ff ffe7 	bl	19ec4 <bt_finalize_init>
	int err;

	err = bt_init();
	if (ready_cb) {
   19ef6:	4b04      	ldr	r3, [pc, #16]	; (19f08 <init_work+0x28>)
   19ef8:	681b      	ldr	r3, [r3, #0]
   19efa:	b11b      	cbz	r3, 19f04 <init_work+0x24>
		ready_cb(err);
   19efc:	4620      	mov	r0, r4
	}
}
   19efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   19f02:	4718      	bx	r3
}
   19f04:	bd10      	pop	{r4, pc}
   19f06:	bf00      	nop
   19f08:	20016258 	.word	0x20016258

00019f0c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   19f0c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   19f0e:	4d31      	ldr	r5, [pc, #196]	; (19fd4 <bt_enable+0xc8>)
{
   19f10:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   19f12:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
{
   19f16:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   19f18:	b973      	cbnz	r3, 19f38 <bt_enable+0x2c>
   19f1a:	4b2f      	ldr	r3, [pc, #188]	; (19fd8 <bt_enable+0xcc>)
   19f1c:	492f      	ldr	r1, [pc, #188]	; (19fdc <bt_enable+0xd0>)
		BT_ERR("No HCI driver registered");
   19f1e:	4830      	ldr	r0, [pc, #192]	; (19fe0 <bt_enable+0xd4>)
   19f20:	1ac9      	subs	r1, r1, r3
   19f22:	08c9      	lsrs	r1, r1, #3
   19f24:	0189      	lsls	r1, r1, #6
   19f26:	f041 0101 	orr.w	r1, r1, #1
   19f2a:	f016 f9d5 	bl	302d8 <log_0>
		return -ENODEV;
   19f2e:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   19f32:	4620      	mov	r0, r4
   19f34:	b008      	add	sp, #32
   19f36:	bd70      	pop	{r4, r5, r6, pc}
   19f38:	f105 0298 	add.w	r2, r5, #152	; 0x98
   19f3c:	e8d2 3fef 	ldaex	r3, [r2]
   19f40:	f043 0101 	orr.w	r1, r3, #1
   19f44:	e8c2 1fe0 	stlex	r0, r1, [r2]
   19f48:	2800      	cmp	r0, #0
   19f4a:	d1f7      	bne.n	19f3c <bt_enable+0x30>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19f4c:	f013 0301 	ands.w	r3, r3, #1
   19f50:	d13c      	bne.n	19fcc <bt_enable+0xc0>
	ready_cb = cb;
   19f52:	4a24      	ldr	r2, [pc, #144]	; (19fe4 <bt_enable+0xd8>)
   19f54:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19f56:	2000      	movs	r0, #0
   19f58:	2100      	movs	r1, #0
   19f5a:	f06f 0208 	mvn.w	r2, #8
   19f5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   19f62:	e9cd 3202 	strd	r3, r2, [sp, #8]
   19f66:	e9cd 3300 	strd	r3, r3, [sp]
   19f6a:	9304      	str	r3, [sp, #16]
   19f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
   19f70:	4b1d      	ldr	r3, [pc, #116]	; (19fe8 <bt_enable+0xdc>)
   19f72:	491e      	ldr	r1, [pc, #120]	; (19fec <bt_enable+0xe0>)
   19f74:	481e      	ldr	r0, [pc, #120]	; (19ff0 <bt_enable+0xe4>)
   19f76:	f010 fb6f 	bl	2a658 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19f7a:	491e      	ldr	r1, [pc, #120]	; (19ff4 <bt_enable+0xe8>)
   19f7c:	481c      	ldr	r0, [pc, #112]	; (19ff0 <bt_enable+0xe4>)
   19f7e:	f01d fa4c 	bl	3741a <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   19f82:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   19f86:	68db      	ldr	r3, [r3, #12]
   19f88:	4798      	blx	r3
	if (err) {
   19f8a:	4604      	mov	r4, r0
   19f8c:	b158      	cbz	r0, 19fa6 <bt_enable+0x9a>
   19f8e:	4b12      	ldr	r3, [pc, #72]	; (19fd8 <bt_enable+0xcc>)
   19f90:	4a12      	ldr	r2, [pc, #72]	; (19fdc <bt_enable+0xd0>)
		BT_ERR("HCI driver open failed (%d)", err);
   19f92:	4601      	mov	r1, r0
   19f94:	1ad2      	subs	r2, r2, r3
   19f96:	08d2      	lsrs	r2, r2, #3
   19f98:	0192      	lsls	r2, r2, #6
   19f9a:	4817      	ldr	r0, [pc, #92]	; (19ff8 <bt_enable+0xec>)
   19f9c:	f042 0201 	orr.w	r2, r2, #1
   19fa0:	f016 f9a7 	bl	302f2 <log_1>
		return err;
   19fa4:	e7c5      	b.n	19f32 <bt_enable+0x26>
	if (!cb) {
   19fa6:	b966      	cbnz	r6, 19fc2 <bt_enable+0xb6>
	err = hci_init();
   19fa8:	f7fe ffc4 	bl	18f34 <hci_init>
	if (err) {
   19fac:	4604      	mov	r4, r0
   19fae:	2800      	cmp	r0, #0
   19fb0:	d1bf      	bne.n	19f32 <bt_enable+0x26>
		err = bt_conn_init();
   19fb2:	f001 fbbf 	bl	1b734 <bt_conn_init>
		if (err) {
   19fb6:	4604      	mov	r4, r0
   19fb8:	2800      	cmp	r0, #0
   19fba:	d1ba      	bne.n	19f32 <bt_enable+0x26>
	bt_finalize_init();
   19fbc:	f7ff ff82 	bl	19ec4 <bt_finalize_init>
	return 0;
   19fc0:	e7b7      	b.n	19f32 <bt_enable+0x26>
	k_work_submit(&bt_dev.init);
   19fc2:	f105 0088 	add.w	r0, r5, #136	; 0x88
   19fc6:	f011 fc7b 	bl	2b8c0 <k_work_submit>
	return 0;
   19fca:	e7b2      	b.n	19f32 <bt_enable+0x26>
		return -EALREADY;
   19fcc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19fd0:	e7af      	b.n	19f32 <bt_enable+0x26>
   19fd2:	bf00      	nop
   19fd4:	20014500 	.word	0x20014500
   19fd8:	000387c0 	.word	0x000387c0
   19fdc:	00038810 	.word	0x00038810
   19fe0:	0003c092 	.word	0x0003c092
   19fe4:	20016258 	.word	0x20016258
   19fe8:	00019aed 	.word	0x00019aed
   19fec:	200203d8 	.word	0x200203d8
   19ff0:	20015438 	.word	0x20015438
   19ff4:	0003c0ab 	.word	0x0003c0ab
   19ff8:	0003c0b1 	.word	0x0003c0b1

00019ffc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   19ffc:	4800      	ldr	r0, [pc, #0]	; (1a000 <bt_get_name+0x4>)
   19ffe:	4770      	bx	lr
   1a000:	0003c0cd 	.word	0x0003c0cd

0001a004 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a004:	4b01      	ldr	r3, [pc, #4]	; (1a00c <atomic_get.constprop.0+0x8>)
   1a006:	e8d3 0faf 	lda	r0, [r3]
}
   1a00a:	4770      	bx	lr
   1a00c:	20014598 	.word	0x20014598

0001a010 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a012:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1a014:	2500      	movs	r5, #0
   1a016:	4f0a      	ldr	r7, [pc, #40]	; (1a040 <id_find+0x30>)
   1a018:	79fb      	ldrb	r3, [r7, #7]
   1a01a:	b2ec      	uxtb	r4, r5
   1a01c:	42a3      	cmp	r3, r4
   1a01e:	d802      	bhi.n	1a026 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1a020:	f06f 0401 	mvn.w	r4, #1
   1a024:	e009      	b.n	1a03a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1a026:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1a02a:	2207      	movs	r2, #7
   1a02c:	4630      	mov	r0, r6
   1a02e:	4439      	add	r1, r7
   1a030:	f01d fb99 	bl	37766 <memcmp>
   1a034:	3501      	adds	r5, #1
   1a036:	2800      	cmp	r0, #0
   1a038:	d1ee      	bne.n	1a018 <id_find+0x8>
}
   1a03a:	4620      	mov	r0, r4
   1a03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a03e:	bf00      	nop
   1a040:	20014500 	.word	0x20014500

0001a044 <set_random_address>:
	return memcmp(a, b, sizeof(*a));
   1a044:	2206      	movs	r2, #6
{
   1a046:	b538      	push	{r3, r4, r5, lr}
   1a048:	4913      	ldr	r1, [pc, #76]	; (1a098 <set_random_address+0x54>)
   1a04a:	4605      	mov	r5, r0
   1a04c:	f01d fb8b 	bl	37766 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1a050:	4602      	mov	r2, r0
   1a052:	b1d8      	cbz	r0, 1a08c <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1a054:	2106      	movs	r1, #6
   1a056:	f242 0005 	movw	r0, #8197	; 0x2005
   1a05a:	f7fe fe81 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   1a05e:	4604      	mov	r4, r0
   1a060:	b1b0      	cbz	r0, 1a090 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a062:	2206      	movs	r2, #6
   1a064:	4629      	mov	r1, r5
   1a066:	3008      	adds	r0, #8
   1a068:	f019 fb54 	bl	33714 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1a06c:	2200      	movs	r2, #0
   1a06e:	4621      	mov	r1, r4
   1a070:	f242 0005 	movw	r0, #8197	; 0x2005
   1a074:	f7fe febc 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   1a078:	4602      	mov	r2, r0
   1a07a:	b938      	cbnz	r0, 1a08c <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   1a07c:	4629      	mov	r1, r5
   1a07e:	4806      	ldr	r0, [pc, #24]	; (1a098 <set_random_address+0x54>)
   1a080:	f018 fb3c 	bl	326fc <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1a084:	2101      	movs	r1, #1
   1a086:	4b05      	ldr	r3, [pc, #20]	; (1a09c <set_random_address+0x58>)
   1a088:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
}
   1a08c:	4610      	mov	r0, r2
   1a08e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1a090:	f06f 0268 	mvn.w	r2, #104	; 0x68
   1a094:	e7fa      	b.n	1a08c <set_random_address+0x48>
   1a096:	bf00      	nop
   1a098:	2001452d 	.word	0x2001452d
   1a09c:	20014500 	.word	0x20014500

0001a0a0 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1a0a0:	b530      	push	{r4, r5, lr}
   1a0a2:	4c14      	ldr	r4, [pc, #80]	; (1a0f4 <id_create.isra.0+0x54>)
   1a0a4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1a0a8:	460d      	mov	r5, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1a0aa:	b085      	sub	sp, #20
   1a0ac:	4404      	add	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1a0ae:	b179      	cbz	r1, 1a0d0 <id_create.isra.0+0x30>
   1a0b0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1a0b2:	2207      	movs	r2, #7
   1a0b4:	4669      	mov	r1, sp
   1a0b6:	4628      	mov	r0, r5
   1a0b8:	9300      	str	r3, [sp, #0]
   1a0ba:	f8cd 3003 	str.w	r3, [sp, #3]
   1a0be:	f01d fb52 	bl	37766 <memcmp>
   1a0c2:	b128      	cbz	r0, 1a0d0 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1a0c4:	4629      	mov	r1, r5
   1a0c6:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1a0c8:	f018 fb1d 	bl	32706 <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   1a0cc:	b005      	add	sp, #20
   1a0ce:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   1a0d0:	a802      	add	r0, sp, #8
   1a0d2:	f018 fa2a 	bl	3252a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   1a0d6:	a802      	add	r0, sp, #8
   1a0d8:	f7ff ff9a 	bl	1a010 <id_find>
   1a0dc:	2800      	cmp	r0, #0
   1a0de:	daf7      	bge.n	1a0d0 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1a0e0:	4620      	mov	r0, r4
   1a0e2:	a902      	add	r1, sp, #8
   1a0e4:	f018 fb0f 	bl	32706 <bt_addr_le_copy>
		if (addr) {
   1a0e8:	2d00      	cmp	r5, #0
   1a0ea:	d0ef      	beq.n	1a0cc <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1a0ec:	4621      	mov	r1, r4
   1a0ee:	4628      	mov	r0, r5
   1a0f0:	e7ea      	b.n	1a0c8 <id_create.isra.0+0x28>
   1a0f2:	bf00      	nop
   1a0f4:	20014500 	.word	0x20014500

0001a0f8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1a0f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a0fa:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1a0fc:	4605      	mov	r5, r0
   1a0fe:	b918      	cbnz	r0, 1a108 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1a100:	b34c      	cbz	r4, 1a156 <bt_id_create+0x5e>
		return -EINVAL;
   1a102:	f06f 0415 	mvn.w	r4, #21
   1a106:	e023      	b.n	1a150 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1a108:	2300      	movs	r3, #0
   1a10a:	2207      	movs	r2, #7
   1a10c:	4669      	mov	r1, sp
   1a10e:	9300      	str	r3, [sp, #0]
   1a110:	f8cd 3003 	str.w	r3, [sp, #3]
   1a114:	f01d fb27 	bl	37766 <memcmp>
   1a118:	2800      	cmp	r0, #0
   1a11a:	d0f1      	beq.n	1a100 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1a11c:	782b      	ldrb	r3, [r5, #0]
   1a11e:	2b01      	cmp	r3, #1
   1a120:	d104      	bne.n	1a12c <bt_id_create+0x34>
   1a122:	79ab      	ldrb	r3, [r5, #6]
   1a124:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a128:	2bc0      	cmp	r3, #192	; 0xc0
   1a12a:	d00a      	beq.n	1a142 <bt_id_create+0x4a>
   1a12c:	4b19      	ldr	r3, [pc, #100]	; (1a194 <bt_id_create+0x9c>)
   1a12e:	491a      	ldr	r1, [pc, #104]	; (1a198 <bt_id_create+0xa0>)
			BT_ERR("Only static random identity address supported");
   1a130:	481a      	ldr	r0, [pc, #104]	; (1a19c <bt_id_create+0xa4>)
   1a132:	1ac9      	subs	r1, r1, r3
   1a134:	08c9      	lsrs	r1, r1, #3
   1a136:	0189      	lsls	r1, r1, #6
   1a138:	f041 0101 	orr.w	r1, r1, #1
   1a13c:	f016 f8cc 	bl	302d8 <log_0>
			return -EINVAL;
   1a140:	e7df      	b.n	1a102 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1a142:	4628      	mov	r0, r5
   1a144:	f7ff ff64 	bl	1a010 <id_find>
   1a148:	2800      	cmp	r0, #0
   1a14a:	dbd9      	blt.n	1a100 <bt_id_create+0x8>
			return -EALREADY;
   1a14c:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   1a150:	4620      	mov	r0, r4
   1a152:	b002      	add	sp, #8
   1a154:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1a156:	4e12      	ldr	r6, [pc, #72]	; (1a1a0 <bt_id_create+0xa8>)
   1a158:	79f3      	ldrb	r3, [r6, #7]
   1a15a:	2b01      	cmp	r3, #1
   1a15c:	d017      	beq.n	1a18e <bt_id_create+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a15e:	f7ff ff51 	bl	1a004 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1a162:	07c3      	lsls	r3, r0, #31
   1a164:	d40b      	bmi.n	1a17e <bt_id_create+0x86>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1a166:	2d00      	cmp	r5, #0
   1a168:	d0cb      	beq.n	1a102 <bt_id_create+0xa>
   1a16a:	2207      	movs	r2, #7
   1a16c:	4669      	mov	r1, sp
   1a16e:	4628      	mov	r0, r5
   1a170:	9400      	str	r4, [sp, #0]
   1a172:	f8cd 4003 	str.w	r4, [sp, #3]
   1a176:	f01d faf6 	bl	37766 <memcmp>
   1a17a:	2800      	cmp	r0, #0
   1a17c:	d0c1      	beq.n	1a102 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   1a17e:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   1a180:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   1a182:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   1a184:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1a186:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   1a188:	f7ff ff8a 	bl	1a0a0 <id_create.isra.0>
	return new_id;
   1a18c:	e7e0      	b.n	1a150 <bt_id_create+0x58>
		return -ENOMEM;
   1a18e:	f06f 040b 	mvn.w	r4, #11
   1a192:	e7dd      	b.n	1a150 <bt_id_create+0x58>
   1a194:	000387c0 	.word	0x000387c0
   1a198:	00038818 	.word	0x00038818
   1a19c:	0003c0e0 	.word	0x0003c0e0
   1a1a0:	20014500 	.word	0x20014500

0001a1a4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1a1a4:	b570      	push	{r4, r5, r6, lr}
   1a1a6:	b086      	sub	sp, #24
   1a1a8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1a1aa:	2100      	movs	r1, #0
   1a1ac:	f241 0009 	movw	r0, #4105	; 0x1009
   1a1b0:	aa01      	add	r2, sp, #4
   1a1b2:	f7fe fe1d 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   1a1b6:	4604      	mov	r4, r0
   1a1b8:	b160      	cbz	r0, 1a1d4 <bt_id_read_public_addr+0x30>
   1a1ba:	4919      	ldr	r1, [pc, #100]	; (1a220 <bt_id_read_public_addr+0x7c>)
   1a1bc:	4b19      	ldr	r3, [pc, #100]	; (1a224 <bt_id_read_public_addr+0x80>)
		BT_WARN("Failed to read public address");
   1a1be:	481a      	ldr	r0, [pc, #104]	; (1a228 <bt_id_read_public_addr+0x84>)
   1a1c0:	1ac9      	subs	r1, r1, r3
   1a1c2:	08c9      	lsrs	r1, r1, #3
   1a1c4:	0189      	lsls	r1, r1, #6
   1a1c6:	f041 0102 	orr.w	r1, r1, #2
   1a1ca:	f016 f885 	bl	302d8 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   1a1ce:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1a1d0:	b006      	add	sp, #24
   1a1d2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1a1d4:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1a1d6:	9002      	str	r0, [sp, #8]
   1a1d8:	689d      	ldr	r5, [r3, #8]
	return memcmp(a, b, sizeof(*a));
   1a1da:	2206      	movs	r2, #6
   1a1dc:	3501      	adds	r5, #1
   1a1de:	f8ad 000c 	strh.w	r0, [sp, #12]
   1a1e2:	a902      	add	r1, sp, #8
   1a1e4:	4628      	mov	r0, r5
   1a1e6:	f01d fabe 	bl	37766 <memcmp>
   1a1ea:	b918      	cbnz	r0, 1a1f4 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   1a1ec:	9801      	ldr	r0, [sp, #4]
   1a1ee:	f003 ff5b 	bl	1e0a8 <net_buf_unref>
   1a1f2:	e7ec      	b.n	1a1ce <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   1a1f4:	f04f 33ff 	mov.w	r3, #4294967295
   1a1f8:	2206      	movs	r2, #6
   1a1fa:	4628      	mov	r0, r5
   1a1fc:	a904      	add	r1, sp, #16
   1a1fe:	9304      	str	r3, [sp, #16]
   1a200:	f8ad 3014 	strh.w	r3, [sp, #20]
   1a204:	f01d faaf 	bl	37766 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1a208:	2800      	cmp	r0, #0
   1a20a:	d0ef      	beq.n	1a1ec <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   1a20c:	4629      	mov	r1, r5
   1a20e:	1c70      	adds	r0, r6, #1
   1a210:	f018 fa74 	bl	326fc <bt_addr_copy>
	net_buf_unref(rsp);
   1a214:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1a216:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   1a218:	f003 ff46 	bl	1e0a8 <net_buf_unref>
	return 1U;
   1a21c:	2001      	movs	r0, #1
   1a21e:	e7d7      	b.n	1a1d0 <bt_id_read_public_addr+0x2c>
   1a220:	00038818 	.word	0x00038818
   1a224:	000387c0 	.word	0x000387c0
   1a228:	0003c10e 	.word	0x0003c10e

0001a22c <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   1a22c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1a22e:	4668      	mov	r0, sp
   1a230:	f7ff ffb8 	bl	1a1a4 <bt_id_read_public_addr>
   1a234:	4b04      	ldr	r3, [pc, #16]	; (1a248 <bt_setup_public_id_addr+0x1c>)
   1a236:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1a238:	b118      	cbz	r0, 1a242 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   1a23a:	4669      	mov	r1, sp
   1a23c:	2000      	movs	r0, #0
   1a23e:	f7ff ff2f 	bl	1a0a0 <id_create.isra.0>
}
   1a242:	b003      	add	sp, #12
   1a244:	f85d fb04 	ldr.w	pc, [sp], #4
   1a248:	20014500 	.word	0x20014500

0001a24c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1a24c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1a24e:	4b27      	ldr	r3, [pc, #156]	; (1a2ec <bt_read_static_addr+0xa0>)
{
   1a250:	4605      	mov	r5, r0
   1a252:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   1a256:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1a258:	f014 0401 	ands.w	r4, r4, #1
   1a25c:	d10a      	bne.n	1a274 <bt_read_static_addr+0x28>
   1a25e:	4924      	ldr	r1, [pc, #144]	; (1a2f0 <bt_read_static_addr+0xa4>)
   1a260:	4b24      	ldr	r3, [pc, #144]	; (1a2f4 <bt_read_static_addr+0xa8>)
		BT_WARN("Read Static Addresses command not available");
   1a262:	4825      	ldr	r0, [pc, #148]	; (1a2f8 <bt_read_static_addr+0xac>)
   1a264:	1ac9      	subs	r1, r1, r3
   1a266:	08c9      	lsrs	r1, r1, #3
   1a268:	0189      	lsls	r1, r1, #6
   1a26a:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   1a26e:	f016 f833 	bl	302d8 <log_0>
   1a272:	e012      	b.n	1a29a <bt_read_static_addr+0x4e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1a274:	2100      	movs	r1, #0
   1a276:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1a27a:	aa01      	add	r2, sp, #4
   1a27c:	f7fe fdb8 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   1a280:	4603      	mov	r3, r0
   1a282:	b168      	cbz	r0, 1a2a0 <bt_read_static_addr+0x54>
   1a284:	4b1b      	ldr	r3, [pc, #108]	; (1a2f4 <bt_read_static_addr+0xa8>)
   1a286:	491a      	ldr	r1, [pc, #104]	; (1a2f0 <bt_read_static_addr+0xa4>)
		BT_WARN("Failed to read static addresses");
   1a288:	481c      	ldr	r0, [pc, #112]	; (1a2fc <bt_read_static_addr+0xb0>)
   1a28a:	1ac9      	subs	r1, r1, r3
   1a28c:	08c9      	lsrs	r1, r1, #3
   1a28e:	0189      	lsls	r1, r1, #6
   1a290:	f041 0102 	orr.w	r1, r1, #2
   1a294:	f016 f820 	bl	302d8 <log_0>
		return 0;
   1a298:	2400      	movs	r4, #0
	}

	return cnt;
}
   1a29a:	4620      	mov	r0, r4
   1a29c:	b003      	add	sp, #12
   1a29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   1a2a0:	9801      	ldr	r0, [sp, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a2a2:	f04f 0c16 	mov.w	ip, #22
   1a2a6:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   1a2a8:	7854      	ldrb	r4, [r2, #1]
   1a2aa:	eb02 070c 	add.w	r7, r2, ip
   1a2ae:	42b4      	cmp	r4, r6
   1a2b0:	bf28      	it	cs
   1a2b2:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   1a2b4:	42a3      	cmp	r3, r4
   1a2b6:	db0c      	blt.n	1a2d2 <bt_read_static_addr+0x86>
	net_buf_unref(rsp);
   1a2b8:	f003 fef6 	bl	1e0a8 <net_buf_unref>
	if (!cnt) {
   1a2bc:	2c00      	cmp	r4, #0
   1a2be:	d1ec      	bne.n	1a29a <bt_read_static_addr+0x4e>
   1a2c0:	490b      	ldr	r1, [pc, #44]	; (1a2f0 <bt_read_static_addr+0xa4>)
   1a2c2:	4b0c      	ldr	r3, [pc, #48]	; (1a2f4 <bt_read_static_addr+0xa8>)
		BT_WARN("No static addresses stored in controller");
   1a2c4:	480e      	ldr	r0, [pc, #56]	; (1a300 <bt_read_static_addr+0xb4>)
   1a2c6:	1ac9      	subs	r1, r1, r3
   1a2c8:	08c9      	lsrs	r1, r1, #3
   1a2ca:	0189      	lsls	r1, r1, #6
   1a2cc:	f041 0102 	orr.w	r1, r1, #2
   1a2d0:	e7cd      	b.n	1a26e <bt_read_static_addr+0x22>
   1a2d2:	fb0c 5103 	mla	r1, ip, r3, r5
   1a2d6:	1c96      	adds	r6, r2, #2
   1a2d8:	f856 eb04 	ldr.w	lr, [r6], #4
   1a2dc:	42be      	cmp	r6, r7
   1a2de:	f841 eb04 	str.w	lr, [r1], #4
   1a2e2:	d1f9      	bne.n	1a2d8 <bt_read_static_addr+0x8c>
   1a2e4:	883e      	ldrh	r6, [r7, #0]
	for (i = 0; i < cnt; i++) {
   1a2e6:	3301      	adds	r3, #1
   1a2e8:	800e      	strh	r6, [r1, #0]
   1a2ea:	e7e3      	b.n	1a2b4 <bt_read_static_addr+0x68>
   1a2ec:	20014500 	.word	0x20014500
   1a2f0:	00038818 	.word	0x00038818
   1a2f4:	000387c0 	.word	0x000387c0
   1a2f8:	0003c12c 	.word	0x0003c12c
   1a2fc:	0003c158 	.word	0x0003c158
   1a300:	0003c178 	.word	0x0003c178

0001a304 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1a304:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1a306:	4d13      	ldr	r5, [pc, #76]	; (1a354 <bt_setup_random_id_addr+0x50>)
{
   1a308:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   1a30a:	79ec      	ldrb	r4, [r5, #7]
   1a30c:	b9ec      	cbnz	r4, 1a34a <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1a30e:	2101      	movs	r1, #1
   1a310:	a802      	add	r0, sp, #8
   1a312:	f7ff ff9b 	bl	1a24c <bt_read_static_addr>
   1a316:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   1a318:	b1b8      	cbz	r0, 1a34a <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1a31a:	2616      	movs	r6, #22
   1a31c:	e00e      	b.n	1a33c <bt_setup_random_id_addr+0x38>
   1a31e:	ab02      	add	r3, sp, #8
   1a320:	fb06 3102 	mla	r1, r6, r2, r3
   1a324:	f10d 0001 	add.w	r0, sp, #1
   1a328:	f018 f9e8 	bl	326fc <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   1a32c:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   1a32e:	4669      	mov	r1, sp
   1a330:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   1a332:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   1a336:	f7ff feb3 	bl	1a0a0 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1a33a:	3401      	adds	r4, #1
   1a33c:	79eb      	ldrb	r3, [r5, #7]
   1a33e:	b2e2      	uxtb	r2, r4
   1a340:	4293      	cmp	r3, r2
   1a342:	d8ec      	bhi.n	1a31e <bt_setup_random_id_addr+0x1a>
			}

			return 0;
   1a344:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   1a346:	b008      	add	sp, #32
   1a348:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
   1a34a:	2100      	movs	r1, #0
   1a34c:	4608      	mov	r0, r1
   1a34e:	f7ff fed3 	bl	1a0f8 <bt_id_create>
   1a352:	e7f8      	b.n	1a346 <bt_setup_random_id_addr+0x42>
   1a354:	20014500 	.word	0x20014500

0001a358 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   1a358:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1a35a:	4c07      	ldr	r4, [pc, #28]	; (1a378 <bt_id_set_create_conn_own_addr+0x20>)
{
   1a35c:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1a35e:	7823      	ldrb	r3, [r4, #0]
   1a360:	2b01      	cmp	r3, #1
   1a362:	d003      	beq.n	1a36c <bt_id_set_create_conn_own_addr+0x14>
		}

		*own_addr_type = addr->type;
	}

	return 0;
   1a364:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
   1a366:	7823      	ldrb	r3, [r4, #0]
   1a368:	702b      	strb	r3, [r5, #0]
}
   1a36a:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   1a36c:	1c60      	adds	r0, r4, #1
   1a36e:	f7ff fe69 	bl	1a044 <set_random_address>
			if (err) {
   1a372:	2800      	cmp	r0, #0
   1a374:	d0f6      	beq.n	1a364 <bt_id_set_create_conn_own_addr+0xc>
   1a376:	e7f8      	b.n	1a36a <bt_id_set_create_conn_own_addr+0x12>
   1a378:	20014500 	.word	0x20014500

0001a37c <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   1a37c:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   1a37e:	4b05      	ldr	r3, [pc, #20]	; (1a394 <bt_id_set_scan_own_addr+0x18>)
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1a380:	2000      	movs	r0, #0
		*own_addr_type = bt_dev.id_addr[0].type;
   1a382:	781b      	ldrb	r3, [r3, #0]
{
   1a384:	460c      	mov	r4, r1
		*own_addr_type = bt_dev.id_addr[0].type;
   1a386:	700b      	strb	r3, [r1, #0]
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1a388:	f018 f9c6 	bl	32718 <bt_id_set_private_addr>
			if (err) {
   1a38c:	b908      	cbnz	r0, 1a392 <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   1a38e:	2301      	movs	r3, #1
   1a390:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   1a392:	bd10      	pop	{r4, pc}
   1a394:	20014500 	.word	0x20014500

0001a398 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1a398:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1a39a:	4d14      	ldr	r5, [pc, #80]	; (1a3ec <bt_id_init+0x54>)
   1a39c:	79eb      	ldrb	r3, [r5, #7]
   1a39e:	b113      	cbz	r3, 1a3a6 <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1a3a0:	2400      	movs	r4, #0
}
   1a3a2:	4620      	mov	r0, r4
   1a3a4:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
   1a3a6:	f7ff ff41 	bl	1a22c <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1a3aa:	79eb      	ldrb	r3, [r5, #7]
   1a3ac:	2b00      	cmp	r3, #0
   1a3ae:	d1f7      	bne.n	1a3a0 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1a3b0:	f7ff ffa8 	bl	1a304 <bt_setup_random_id_addr>
		if (err) {
   1a3b4:	4604      	mov	r4, r0
   1a3b6:	b150      	cbz	r0, 1a3ce <bt_id_init+0x36>
   1a3b8:	490d      	ldr	r1, [pc, #52]	; (1a3f0 <bt_id_init+0x58>)
   1a3ba:	4b0e      	ldr	r3, [pc, #56]	; (1a3f4 <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
   1a3bc:	480e      	ldr	r0, [pc, #56]	; (1a3f8 <bt_id_init+0x60>)
   1a3be:	1ac9      	subs	r1, r1, r3
   1a3c0:	08c9      	lsrs	r1, r1, #3
   1a3c2:	0189      	lsls	r1, r1, #6
   1a3c4:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   1a3c8:	f015 ff86 	bl	302d8 <log_0>
			return err;
   1a3cc:	e7e9      	b.n	1a3a2 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1a3ce:	1c68      	adds	r0, r5, #1
   1a3d0:	f7ff fe38 	bl	1a044 <set_random_address>
		if (err) {
   1a3d4:	4604      	mov	r4, r0
   1a3d6:	2800      	cmp	r0, #0
   1a3d8:	d0e3      	beq.n	1a3a2 <bt_id_init+0xa>
   1a3da:	4905      	ldr	r1, [pc, #20]	; (1a3f0 <bt_id_init+0x58>)
   1a3dc:	4b05      	ldr	r3, [pc, #20]	; (1a3f4 <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
   1a3de:	4807      	ldr	r0, [pc, #28]	; (1a3fc <bt_id_init+0x64>)
   1a3e0:	1ac9      	subs	r1, r1, r3
   1a3e2:	08c9      	lsrs	r1, r1, #3
   1a3e4:	0189      	lsls	r1, r1, #6
   1a3e6:	f041 0101 	orr.w	r1, r1, #1
   1a3ea:	e7ed      	b.n	1a3c8 <bt_id_init+0x30>
   1a3ec:	20014500 	.word	0x20014500
   1a3f0:	00038818 	.word	0x00038818
   1a3f4:	000387c0 	.word	0x000387c0
   1a3f8:	0003c1a1 	.word	0x0003c1a1
   1a3fc:	0003c1c0 	.word	0x0003c1c0

0001a400 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a400:	4b01      	ldr	r3, [pc, #4]	; (1a408 <atomic_get.constprop.0+0x8>)
   1a402:	e8d3 0faf 	lda	r0, [r3]
}
   1a406:	4770      	bx	lr
   1a408:	20014598 	.word	0x20014598

0001a40c <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   1a40c:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1a40e:	2102      	movs	r1, #2
{
   1a410:	4604      	mov	r4, r0
   1a412:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1a414:	f242 000c 	movw	r0, #8204	; 0x200c
   1a418:	f7fe fca2 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   1a41c:	4605      	mov	r5, r0
   1a41e:	b308      	cbz	r0, 1a464 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   1a420:	2102      	movs	r1, #2
   1a422:	3008      	adds	r0, #8
   1a424:	f003 ff70 	bl	1e308 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   1a428:	2c01      	cmp	r4, #1
   1a42a:	4602      	mov	r2, r0
   1a42c:	d117      	bne.n	1a45e <bt_le_scan_set_enable_legacy+0x52>
   1a42e:	f7ff ffe7 	bl	1a400 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a432:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1a436:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1a438:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   1a43a:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1a43c:	425c      	negs	r4, r3
   1a43e:	415c      	adcs	r4, r3
   1a440:	4628      	mov	r0, r5
   1a442:	4a0a      	ldr	r2, [pc, #40]	; (1a46c <bt_le_scan_set_enable_legacy+0x60>)
   1a444:	a903      	add	r1, sp, #12
   1a446:	2305      	movs	r3, #5
   1a448:	9400      	str	r4, [sp, #0]
   1a44a:	f7fe fc77 	bl	18d3c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   1a44e:	2200      	movs	r2, #0
   1a450:	4629      	mov	r1, r5
   1a452:	f242 000c 	movw	r0, #8204	; 0x200c
   1a456:	f7fe fccb 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   1a45a:	b007      	add	sp, #28
   1a45c:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   1a45e:	2300      	movs	r3, #0
   1a460:	7043      	strb	r3, [r0, #1]
   1a462:	e7e9      	b.n	1a438 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   1a464:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a468:	e7f7      	b.n	1a45a <bt_le_scan_set_enable_legacy+0x4e>
   1a46a:	bf00      	nop
   1a46c:	20014598 	.word	0x20014598

0001a470 <start_le_scan_legacy>:
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   1a470:	2300      	movs	r3, #0
{
   1a472:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a474:	f88d 3005 	strb.w	r3, [sp, #5]

	if (IS_ENABLED(CONFIG_BT_WHITELIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_WL)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_USE_WHITELIST;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
   1a478:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1a47c:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   1a47e:	f88d 0000 	strb.w	r0, [sp]
{
   1a482:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1a484:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   1a486:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1a48a:	4158      	adcs	r0, r3
   1a48c:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   1a490:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1a494:	f7ff ff72 	bl	1a37c <bt_id_set_scan_own_addr>
	if (err) {
   1a498:	4604      	mov	r4, r0
   1a49a:	bb18      	cbnz	r0, 1a4e4 <start_le_scan_legacy+0x74>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   1a49c:	2107      	movs	r1, #7
   1a49e:	f242 000b 	movw	r0, #8203	; 0x200b
   1a4a2:	f7fe fc5d 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   1a4a6:	4606      	mov	r6, r0
   1a4a8:	b328      	cbz	r0, 1a4f6 <start_le_scan_legacy+0x86>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a4aa:	2207      	movs	r2, #7
   1a4ac:	4669      	mov	r1, sp
   1a4ae:	3008      	adds	r0, #8
   1a4b0:	f019 f930 	bl	33714 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   1a4b4:	4622      	mov	r2, r4
   1a4b6:	4631      	mov	r1, r6
   1a4b8:	f242 000b 	movw	r0, #8203	; 0x200b
   1a4bc:	f7fe fc98 	bl	18df0 <bt_hci_cmd_send_sync>
	if (err) {
   1a4c0:	4604      	mov	r4, r0
   1a4c2:	b978      	cbnz	r0, 1a4e4 <start_le_scan_legacy+0x74>
	return bt_le_scan_set_enable_legacy(enable);
   1a4c4:	2001      	movs	r0, #1
   1a4c6:	f7ff ffa1 	bl	1a40c <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   1a4ca:	4604      	mov	r4, r0
   1a4cc:	b950      	cbnz	r0, 1a4e4 <start_le_scan_legacy+0x74>
	if (val) {
   1a4ce:	2d01      	cmp	r5, #1
   1a4d0:	d10b      	bne.n	1a4ea <start_le_scan_legacy+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a4d2:	4b0a      	ldr	r3, [pc, #40]	; (1a4fc <start_le_scan_legacy+0x8c>)
   1a4d4:	e8d3 2fef 	ldaex	r2, [r3]
   1a4d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1a4dc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1a4e0:	2900      	cmp	r1, #0
   1a4e2:	d1f7      	bne.n	1a4d4 <start_le_scan_legacy+0x64>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   1a4e4:	4620      	mov	r0, r4
   1a4e6:	b002      	add	sp, #8
   1a4e8:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a4ea:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1a4ee:	4803      	ldr	r0, [pc, #12]	; (1a4fc <start_le_scan_legacy+0x8c>)
   1a4f0:	f018 f926 	bl	32740 <atomic_and>
   1a4f4:	e7f6      	b.n	1a4e4 <start_le_scan_legacy+0x74>
		return -ENOBUFS;
   1a4f6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1a4fa:	e7f3      	b.n	1a4e4 <start_le_scan_legacy+0x74>
   1a4fc:	20014598 	.word	0x20014598

0001a500 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   1a500:	2200      	movs	r2, #0
   1a502:	4b01      	ldr	r3, [pc, #4]	; (1a508 <bt_scan_reset+0x8>)
   1a504:	601a      	str	r2, [r3, #0]
}
   1a506:	4770      	bx	lr
   1a508:	20016264 	.word	0x20016264

0001a50c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   1a50c:	b538      	push	{r3, r4, r5, lr}
   1a50e:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a510:	f7ff ff76 	bl	1a400 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a514:	0641      	lsls	r1, r0, #25
   1a516:	f3c0 1280 	ubfx	r2, r0, #6, #1
   1a51a:	d501      	bpl.n	1a520 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   1a51c:	2000      	movs	r0, #0
   1a51e:	e02c      	b.n	1a57a <bt_le_scan_update+0x6e>
   1a520:	f7ff ff6e 	bl	1a400 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1a524:	0683      	lsls	r3, r0, #26
   1a526:	d423      	bmi.n	1a570 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1a528:	2100      	movs	r1, #0
   1a52a:	2206      	movs	r2, #6
   1a52c:	4608      	mov	r0, r1
   1a52e:	f000 fed3 	bl	1b2d8 <bt_conn_lookup_state_le>
		if (conn) {
   1a532:	4604      	mov	r4, r0
   1a534:	bb10      	cbnz	r0, 1a57c <bt_le_scan_update+0x70>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1a536:	2202      	movs	r2, #2
   1a538:	4601      	mov	r1, r0
   1a53a:	f000 fecd 	bl	1b2d8 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   1a53e:	2800      	cmp	r0, #0
   1a540:	d0ec      	beq.n	1a51c <bt_le_scan_update+0x10>
   1a542:	4b10      	ldr	r3, [pc, #64]	; (1a584 <bt_le_scan_update+0x78>)
   1a544:	e8d3 2fef 	ldaex	r2, [r3]
   1a548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1a54c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1a550:	2900      	cmp	r1, #0
   1a552:	d1f7      	bne.n	1a544 <bt_le_scan_update+0x38>
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   1a554:	f000 fd46 	bl	1afe4 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   1a558:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   1a55a:	4620      	mov	r0, r4
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   1a55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   1a560:	bf15      	itete	ne
   1a562:	2230      	movne	r2, #48	; 0x30
   1a564:	2212      	moveq	r2, #18
   1a566:	2160      	movne	r1, #96	; 0x60
   1a568:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   1a56c:	f7ff bf80 	b.w	1a470 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   1a570:	4610      	mov	r0, r2
   1a572:	f7ff ff4b 	bl	1a40c <bt_le_scan_set_enable_legacy>
		if (err) {
   1a576:	2800      	cmp	r0, #0
   1a578:	d0d6      	beq.n	1a528 <bt_le_scan_update+0x1c>
}
   1a57a:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   1a57c:	f000 fd32 	bl	1afe4 <bt_conn_unref>
   1a580:	e7cc      	b.n	1a51c <bt_le_scan_update+0x10>
   1a582:	bf00      	nop
   1a584:	20014598 	.word	0x20014598

0001a588 <bt_data_parse>:

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   1a588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a58a:	4604      	mov	r4, r0
   1a58c:	460e      	mov	r6, r1
   1a58e:	4617      	mov	r7, r2
	while (ad->len > 1) {
   1a590:	88a3      	ldrh	r3, [r4, #4]
   1a592:	2b01      	cmp	r3, #1
   1a594:	d912      	bls.n	1a5bc <bt_data_parse+0x34>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   1a596:	4620      	mov	r0, r4
   1a598:	f019 f8a0 	bl	336dc <net_buf_simple_pull_u8>
		if (len == 0U) {
   1a59c:	4605      	mov	r5, r0
   1a59e:	b168      	cbz	r0, 1a5bc <bt_data_parse+0x34>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   1a5a0:	88a2      	ldrh	r2, [r4, #4]
   1a5a2:	b283      	uxth	r3, r0
   1a5a4:	429a      	cmp	r2, r3
   1a5a6:	d20b      	bcs.n	1a5c0 <bt_data_parse+0x38>
   1a5a8:	490f      	ldr	r1, [pc, #60]	; (1a5e8 <bt_data_parse+0x60>)
   1a5aa:	4b10      	ldr	r3, [pc, #64]	; (1a5ec <bt_data_parse+0x64>)
			BT_WARN("Malformed data");
   1a5ac:	4810      	ldr	r0, [pc, #64]	; (1a5f0 <bt_data_parse+0x68>)
   1a5ae:	1ac9      	subs	r1, r1, r3
   1a5b0:	08c9      	lsrs	r1, r1, #3
   1a5b2:	0189      	lsls	r1, r1, #6
   1a5b4:	f041 0102 	orr.w	r1, r1, #2
   1a5b8:	f015 fe8e 	bl	302d8 <log_0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   1a5bc:	b003      	add	sp, #12
   1a5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
   1a5c0:	4620      	mov	r0, r4
   1a5c2:	f019 f88b 	bl	336dc <net_buf_simple_pull_u8>
		data.data = ad->data;
   1a5c6:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   1a5c8:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
   1a5cc:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
   1a5ce:	4639      	mov	r1, r7
   1a5d0:	4668      	mov	r0, sp
		data.data_len = len - 1;
   1a5d2:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   1a5d6:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   1a5d8:	47b0      	blx	r6
   1a5da:	2800      	cmp	r0, #0
   1a5dc:	d0ee      	beq.n	1a5bc <bt_data_parse+0x34>
		net_buf_simple_pull(ad, len - 1);
   1a5de:	4629      	mov	r1, r5
   1a5e0:	4620      	mov	r0, r4
   1a5e2:	f003 fe4f 	bl	1e284 <net_buf_simple_pull>
   1a5e6:	e7d3      	b.n	1a590 <bt_data_parse+0x8>
   1a5e8:	00038828 	.word	0x00038828
   1a5ec:	000387c0 	.word	0x000387c0
   1a5f0:	0003c1e3 	.word	0x0003c1e3

0001a5f4 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   1a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_simple_pull_u8(&buf->b);
   1a5f8:	f100 0708 	add.w	r7, r0, #8
   1a5fc:	b08d      	sub	sp, #52	; 0x34
   1a5fe:	4604      	mov	r4, r0
   1a600:	4638      	mov	r0, r7
   1a602:	f019 f86b 	bl	336dc <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   1a606:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 1a7f0 <bt_hci_le_adv_report+0x1fc>
   1a60a:	9001      	str	r0, [sp, #4]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   1a60c:	9b01      	ldr	r3, [sp, #4]
   1a60e:	b163      	cbz	r3, 1a62a <bt_hci_le_adv_report+0x36>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   1a610:	89a3      	ldrh	r3, [r4, #12]
   1a612:	2b08      	cmp	r3, #8
   1a614:	d80c      	bhi.n	1a630 <bt_hci_le_adv_report+0x3c>
   1a616:	4971      	ldr	r1, [pc, #452]	; (1a7dc <bt_hci_le_adv_report+0x1e8>)
   1a618:	4b71      	ldr	r3, [pc, #452]	; (1a7e0 <bt_hci_le_adv_report+0x1ec>)
			BT_ERR("Unexpected end of buffer");
   1a61a:	4872      	ldr	r0, [pc, #456]	; (1a7e4 <bt_hci_le_adv_report+0x1f0>)
   1a61c:	1ac9      	subs	r1, r1, r3
   1a61e:	08c9      	lsrs	r1, r1, #3
   1a620:	0189      	lsls	r1, r1, #6
   1a622:	f041 0101 	orr.w	r1, r1, #1
   1a626:	f015 fe57 	bl	302d8 <log_0>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   1a62a:	b00d      	add	sp, #52	; 0x34
   1a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a630:	2109      	movs	r1, #9
   1a632:	4638      	mov	r0, r7
   1a634:	f003 fe46 	bl	1e2c4 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   1a638:	237f      	movs	r3, #127	; 0x7f
		adv_info.rssi = evt->data[evt->length];
   1a63a:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   1a63e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   1a642:	eb00 0309 	add.w	r3, r0, r9
   1a646:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1a648:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   1a64a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   1a64e:	23ff      	movs	r3, #255	; 0xff
   1a650:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   1a654:	2300      	movs	r3, #0
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1a656:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.interval = 0U;
   1a65a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
   1a65e:	7802      	ldrb	r2, [r0, #0]
   1a660:	4606      	mov	r6, r0
   1a662:	2a04      	cmp	r2, #4
   1a664:	bf98      	it	ls
   1a666:	4b60      	ldrls	r3, [pc, #384]	; (1a7e8 <bt_hci_le_adv_report+0x1f4>)
   1a668:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	switch (evt_type) {
   1a66c:	bf98      	it	ls
   1a66e:	5c9b      	ldrbls	r3, [r3, r2]
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
   1a670:	f100 0801 	add.w	r8, r0, #1
		adv_info.adv_props = get_adv_props(evt->evt_type);
   1a674:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   1a678:	f7ff fec2 	bl	1a400 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a67c:	0645      	lsls	r5, r0, #25
   1a67e:	d50d      	bpl.n	1a69c <bt_hci_le_adv_report+0xa8>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   1a680:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a684:	0758      	lsls	r0, r3, #29
   1a686:	d509      	bpl.n	1a69c <bt_hci_le_adv_report+0xa8>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1a688:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   1a68a:	4638      	mov	r0, r7
   1a68c:	3101      	adds	r1, #1
   1a68e:	f003 fdf9 	bl	1e284 <net_buf_simple_pull>
   1a692:	9b01      	ldr	r3, [sp, #4]
   1a694:	1e58      	subs	r0, r3, #1
   1a696:	b2c3      	uxtb	r3, r0
   1a698:	9301      	str	r3, [sp, #4]
   1a69a:	e7b7      	b.n	1a60c <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   1a69c:	7873      	ldrb	r3, [r6, #1]
   1a69e:	1e9a      	subs	r2, r3, #2
   1a6a0:	2a01      	cmp	r2, #1
   1a6a2:	d84e      	bhi.n	1a742 <bt_hci_le_adv_report+0x14e>
		bt_addr_le_copy(&id_addr, addr);
   1a6a4:	4641      	mov	r1, r8
   1a6a6:	a804      	add	r0, sp, #16
   1a6a8:	f018 f855 	bl	32756 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1a6ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1a6b0:	3b02      	subs	r3, #2
   1a6b2:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   1a6b6:	ab04      	add	r3, sp, #16
   1a6b8:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   1a6ba:	f8da 3000 	ldr.w	r3, [sl]
   1a6be:	b1b3      	cbz	r3, 1a6ee <bt_hci_le_adv_report+0xfa>
	state->offset = net_buf_simple_headroom(buf);
   1a6c0:	4638      	mov	r0, r7
   1a6c2:	f019 f81b 	bl	336fc <net_buf_simple_headroom>
   1a6c6:	4683      	mov	fp, r0
	state->len = buf->len;
   1a6c8:	89a3      	ldrh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   1a6ca:	a804      	add	r0, sp, #16
   1a6cc:	9302      	str	r3, [sp, #8]
   1a6ce:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   1a6d2:	463b      	mov	r3, r7
   1a6d4:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   1a6d8:	f8da 5000 	ldr.w	r5, [sl]
		buf->len = len;
   1a6dc:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   1a6e0:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   1a6e2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1a6e4:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
   1a6e6:	fa10 f08b 	uxtah	r0, r0, fp
   1a6ea:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
   1a6ec:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1a6ee:	4b3f      	ldr	r3, [pc, #252]	; (1a7ec <bt_hci_le_adv_report+0x1f8>)
   1a6f0:	681b      	ldr	r3, [r3, #0]
   1a6f2:	2b00      	cmp	r3, #0
   1a6f4:	d036      	beq.n	1a764 <bt_hci_le_adv_report+0x170>
   1a6f6:	f1b3 0208 	subs.w	r2, r3, #8
   1a6fa:	d033      	beq.n	1a764 <bt_hci_le_adv_report+0x170>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a6fc:	681d      	ldr	r5, [r3, #0]
   1a6fe:	b105      	cbz	r5, 1a702 <bt_hci_le_adv_report+0x10e>
   1a700:	3d08      	subs	r5, #8
		if (listener->recv) {
   1a702:	6813      	ldr	r3, [r2, #0]
   1a704:	9203      	str	r2, [sp, #12]
   1a706:	b193      	cbz	r3, 1a72e <bt_hci_le_adv_report+0x13a>
	state->offset = net_buf_simple_headroom(buf);
   1a708:	4638      	mov	r0, r7
   1a70a:	f018 fff7 	bl	336fc <net_buf_simple_headroom>
   1a70e:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
   1a710:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
   1a712:	89a3      	ldrh	r3, [r4, #12]
   1a714:	a808      	add	r0, sp, #32
   1a716:	4639      	mov	r1, r7
   1a718:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   1a71a:	f8a4 900c 	strh.w	r9, [r4, #12]
   1a71e:	9302      	str	r3, [sp, #8]
			listener->recv(info, &buf->b);
   1a720:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   1a722:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1a724:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
   1a726:	fa10 f08b 	uxtah	r0, r0, fp
   1a72a:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
   1a72c:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1a72e:	b1cd      	cbz	r5, 1a764 <bt_hci_le_adv_report+0x170>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a730:	f115 0308 	adds.w	r3, r5, #8
   1a734:	d002      	beq.n	1a73c <bt_hci_le_adv_report+0x148>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a736:	68ab      	ldr	r3, [r5, #8]
   1a738:	b103      	cbz	r3, 1a73c <bt_hci_le_adv_report+0x148>
   1a73a:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   1a73c:	462a      	mov	r2, r5
   1a73e:	461d      	mov	r5, r3
   1a740:	e7df      	b.n	1a702 <bt_hci_le_adv_report+0x10e>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   1a742:	2bff      	cmp	r3, #255	; 0xff
   1a744:	d108      	bne.n	1a758 <bt_hci_le_adv_report+0x164>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   1a746:	2300      	movs	r3, #0
   1a748:	a906      	add	r1, sp, #24
   1a74a:	9306      	str	r3, [sp, #24]
   1a74c:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
   1a750:	a804      	add	r0, sp, #16
   1a752:	f018 f800 	bl	32756 <bt_addr_le_copy>
   1a756:	e7ae      	b.n	1a6b6 <bt_hci_le_adv_report+0xc2>
   1a758:	4641      	mov	r1, r8
   1a75a:	2000      	movs	r0, #0
   1a75c:	f017 ffda 	bl	32714 <bt_lookup_id_addr>
   1a760:	4601      	mov	r1, r0
   1a762:	e7f5      	b.n	1a750 <bt_hci_le_adv_report+0x15c>
	check_pending_conn(&id_addr, addr, info->adv_props);
   1a764:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1a768:	f7ff fe4a 	bl	1a400 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a76c:	0641      	lsls	r1, r0, #25
   1a76e:	f3c0 1580 	ubfx	r5, r0, #6, #1
   1a772:	d489      	bmi.n	1a688 <bt_hci_le_adv_report+0x94>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   1a774:	07d2      	lsls	r2, r2, #31
   1a776:	d587      	bpl.n	1a688 <bt_hci_le_adv_report+0x94>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   1a778:	2202      	movs	r2, #2
   1a77a:	4628      	mov	r0, r5
   1a77c:	a904      	add	r1, sp, #16
   1a77e:	f000 fdab 	bl	1b2d8 <bt_conn_lookup_state_le>
	if (!conn) {
   1a782:	4681      	mov	r9, r0
   1a784:	2800      	cmp	r0, #0
   1a786:	f43f af7f 	beq.w	1a688 <bt_hci_le_adv_report+0x94>
   1a78a:	f7ff fe39 	bl	1a400 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1a78e:	0683      	lsls	r3, r0, #26
   1a790:	d410      	bmi.n	1a7b4 <bt_hci_le_adv_report+0x1c0>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   1a792:	f109 009e 	add.w	r0, r9, #158	; 0x9e
   1a796:	4641      	mov	r1, r8
   1a798:	f017 ffdd 	bl	32756 <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   1a79c:	4648      	mov	r0, r9
   1a79e:	f017 fef0 	bl	32582 <bt_le_create_conn>
   1a7a2:	b960      	cbnz	r0, 1a7be <bt_hci_le_adv_report+0x1ca>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1a7a4:	4648      	mov	r0, r9
   1a7a6:	2106      	movs	r1, #6
   1a7a8:	f000 fc4e 	bl	1b048 <bt_conn_set_state>
	bt_conn_unref(conn);
   1a7ac:	4648      	mov	r0, r9
   1a7ae:	f000 fc19 	bl	1afe4 <bt_conn_unref>
	return;
   1a7b2:	e769      	b.n	1a688 <bt_hci_le_adv_report+0x94>
	return bt_le_scan_set_enable_legacy(enable);
   1a7b4:	4628      	mov	r0, r5
   1a7b6:	f7ff fe29 	bl	1a40c <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1a7ba:	2800      	cmp	r0, #0
   1a7bc:	d0e9      	beq.n	1a792 <bt_hci_le_adv_report+0x19e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   1a7be:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a7c0:	2100      	movs	r1, #0
   1a7c2:	4648      	mov	r0, r9
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   1a7c4:	f889 3009 	strb.w	r3, [r9, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a7c8:	f000 fc3e 	bl	1b048 <bt_conn_set_state>
	bt_conn_unref(conn);
   1a7cc:	4648      	mov	r0, r9
   1a7ce:	f000 fc09 	bl	1afe4 <bt_conn_unref>
	bt_le_scan_update(false);
   1a7d2:	2000      	movs	r0, #0
   1a7d4:	f7ff fe9a 	bl	1a50c <bt_le_scan_update>
   1a7d8:	e756      	b.n	1a688 <bt_hci_le_adv_report+0x94>
   1a7da:	bf00      	nop
   1a7dc:	00038828 	.word	0x00038828
   1a7e0:	000387c0 	.word	0x000387c0
   1a7e4:	0003c1f2 	.word	0x0003c1f2
   1a7e8:	0003c20b 	.word	0x0003c20b
   1a7ec:	2001625c 	.word	0x2001625c
   1a7f0:	20016264 	.word	0x20016264

0001a7f4 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   1a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7f8:	4605      	mov	r5, r0
   1a7fa:	460f      	mov	r7, r1
   1a7fc:	f7ff fe00 	bl	1a400 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a800:	0780      	lsls	r0, r0, #30
   1a802:	d567      	bpl.n	1a8d4 <bt_le_scan_start+0xe0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   1a804:	782a      	ldrb	r2, [r5, #0]
   1a806:	2a01      	cmp	r2, #1
   1a808:	d904      	bls.n	1a814 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   1a80a:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   1a80e:	4620      	mov	r0, r4
   1a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1a814:	686b      	ldr	r3, [r5, #4]
   1a816:	f033 030f 	bics.w	r3, r3, #15
   1a81a:	d1f6      	bne.n	1a80a <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   1a81c:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1a820:	8928      	ldrh	r0, [r5, #8]
   1a822:	1f03      	subs	r3, r0, #4
   1a824:	b29b      	uxth	r3, r3
   1a826:	42a3      	cmp	r3, r4
   1a828:	d8ef      	bhi.n	1a80a <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   1a82a:	8969      	ldrh	r1, [r5, #10]
   1a82c:	1f0b      	subs	r3, r1, #4
   1a82e:	b29b      	uxth	r3, r3
   1a830:	42a3      	cmp	r3, r4
   1a832:	d8ea      	bhi.n	1a80a <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   1a834:	4288      	cmp	r0, r1
   1a836:	d3e8      	bcc.n	1a80a <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1a838:	b97a      	cbnz	r2, 1a85a <bt_le_scan_start+0x66>
   1a83a:	4e28      	ldr	r6, [pc, #160]	; (1a8dc <bt_le_scan_start+0xe8>)
   1a83c:	e8d6 0fef 	ldaex	r0, [r6]
   1a840:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   1a844:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1a848:	2a00      	cmp	r2, #0
   1a84a:	d1f7      	bne.n	1a83c <bt_le_scan_start+0x48>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a84c:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   1a850:	46b0      	mov	r8, r6
   1a852:	d007      	beq.n	1a864 <bt_le_scan_start+0x70>
		return -EALREADY;
   1a854:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1a858:	e7d9      	b.n	1a80e <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1a85a:	f017 ff6f 	bl	3273c <bt_id_scan_random_addr_check>
   1a85e:	2800      	cmp	r0, #0
   1a860:	d1eb      	bne.n	1a83a <bt_le_scan_start+0x46>
   1a862:	e7d2      	b.n	1a80a <bt_le_scan_start+0x16>
   1a864:	f7ff fdcc 	bl	1a400 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1a868:	0681      	lsls	r1, r0, #26
   1a86a:	d50a      	bpl.n	1a882 <bt_le_scan_start+0x8e>
	return bt_le_scan_set_enable_legacy(enable);
   1a86c:	4610      	mov	r0, r2
   1a86e:	f7ff fdcd 	bl	1a40c <bt_le_scan_set_enable_legacy>
		if (err) {
   1a872:	4604      	mov	r4, r0
   1a874:	b128      	cbz	r0, 1a882 <bt_le_scan_start+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a876:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1a87a:	4630      	mov	r0, r6
   1a87c:	f017 ff60 	bl	32740 <atomic_and>
		return err;
   1a880:	e7c5      	b.n	1a80e <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   1a882:	686b      	ldr	r3, [r5, #4]
	if (val) {
   1a884:	07db      	lsls	r3, r3, #31
   1a886:	d511      	bpl.n	1a8ac <bt_le_scan_start+0xb8>
   1a888:	e8d8 3fef 	ldaex	r3, [r8]
   1a88c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1a890:	e8c8 3fe2 	stlex	r2, r3, [r8]
   1a894:	2a00      	cmp	r2, #0
   1a896:	d1f7      	bne.n	1a888 <bt_le_scan_start+0x94>
		if (param->timeout) {
   1a898:	89ab      	ldrh	r3, [r5, #12]
   1a89a:	b16b      	cbz	r3, 1a8b8 <bt_le_scan_start+0xc4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a89c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1a8a0:	480e      	ldr	r0, [pc, #56]	; (1a8dc <bt_le_scan_start+0xe8>)
   1a8a2:	f017 ff4d 	bl	32740 <atomic_and>
			return -ENOTSUP;
   1a8a6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1a8aa:	e7b0      	b.n	1a80e <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a8ac:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1a8b0:	480a      	ldr	r0, [pc, #40]	; (1a8dc <bt_le_scan_start+0xe8>)
   1a8b2:	f017 ff45 	bl	32740 <atomic_and>
   1a8b6:	e7ef      	b.n	1a898 <bt_le_scan_start+0xa4>
		err = start_le_scan_legacy(param->type, param->interval,
   1a8b8:	896a      	ldrh	r2, [r5, #10]
   1a8ba:	8929      	ldrh	r1, [r5, #8]
   1a8bc:	7828      	ldrb	r0, [r5, #0]
   1a8be:	f7ff fdd7 	bl	1a470 <start_le_scan_legacy>
	if (err) {
   1a8c2:	4604      	mov	r4, r0
   1a8c4:	b118      	cbz	r0, 1a8ce <bt_le_scan_start+0xda>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a8c6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1a8ca:	4804      	ldr	r0, [pc, #16]	; (1a8dc <bt_le_scan_start+0xe8>)
   1a8cc:	e7d6      	b.n	1a87c <bt_le_scan_start+0x88>
	scan_dev_found_cb = cb;
   1a8ce:	4b04      	ldr	r3, [pc, #16]	; (1a8e0 <bt_le_scan_start+0xec>)
   1a8d0:	601f      	str	r7, [r3, #0]
	return 0;
   1a8d2:	e79c      	b.n	1a80e <bt_le_scan_start+0x1a>
		return -EAGAIN;
   1a8d4:	f06f 040a 	mvn.w	r4, #10
   1a8d8:	e799      	b.n	1a80e <bt_le_scan_start+0x1a>
   1a8da:	bf00      	nop
   1a8dc:	20014598 	.word	0x20014598
   1a8e0:	20016264 	.word	0x20016264

0001a8e4 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   1a8e4:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a8e6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1a8ea:	4807      	ldr	r0, [pc, #28]	; (1a908 <bt_le_scan_stop+0x24>)
   1a8ec:	f017 ff28 	bl	32740 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a8f0:	0643      	lsls	r3, r0, #25
   1a8f2:	d506      	bpl.n	1a902 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   1a8f4:	2000      	movs	r0, #0
   1a8f6:	4b05      	ldr	r3, [pc, #20]	; (1a90c <bt_le_scan_stop+0x28>)
   1a8f8:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   1a8fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1a8fe:	f7ff be05 	b.w	1a50c <bt_le_scan_update>
}
   1a902:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a906:	bd08      	pop	{r3, pc}
   1a908:	20014598 	.word	0x20014598
   1a90c:	20016264 	.word	0x20016264

0001a910 <bt_le_scan_cb_register>:
	parent->next = child;
   1a910:	2300      	movs	r3, #0
   1a912:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1a914:	4b05      	ldr	r3, [pc, #20]	; (1a92c <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   1a916:	f100 0208 	add.w	r2, r0, #8
   1a91a:	6859      	ldr	r1, [r3, #4]
   1a91c:	b911      	cbnz	r1, 1a924 <bt_le_scan_cb_register+0x14>
	list->head = node;
   1a91e:	e9c3 2200 	strd	r2, r2, [r3]
}
   1a922:	4770      	bx	lr
	parent->next = child;
   1a924:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1a926:	605a      	str	r2, [r3, #4]
}
   1a928:	4770      	bx	lr
   1a92a:	bf00      	nop
   1a92c:	2001625c 	.word	0x2001625c

0001a930 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   1a930:	e92d 4870 	stmdb	sp!, {r4, r5, r6, fp, lr}
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   1a934:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
   1a936:	b08d      	sub	sp, #52	; 0x34
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1a938:	2100      	movs	r1, #0
   1a93a:	f242 0018 	movw	r0, #8216	; 0x2018
   1a93e:	aa02      	add	r2, sp, #8
   1a940:	f7fe fa56 	bl	18df0 <bt_hci_cmd_send_sync>
		if (ret) {
   1a944:	4604      	mov	r4, r0
   1a946:	bba0      	cbnz	r0, 1a9b2 <prng_reseed.constprop.0+0x82>
			return ret;
		}

		rp = (void *)rsp->data;
   1a948:	9802      	ldr	r0, [sp, #8]
   1a94a:	ae04      	add	r6, sp, #16
   1a94c:	6882      	ldr	r2, [r0, #8]
   1a94e:	eb06 01c5 	add.w	r1, r6, r5, lsl #3
   1a952:	f852 3f01 	ldr.w	r3, [r2, #1]!
   1a956:	f846 3035 	str.w	r3, [r6, r5, lsl #3]
   1a95a:	6853      	ldr	r3, [r2, #4]
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   1a95c:	3501      	adds	r5, #1
   1a95e:	604b      	str	r3, [r1, #4]
		memcpy(&seed[i * 8], rp->rand, 8);

		net_buf_unref(rsp);
   1a960:	f003 fba2 	bl	1e0a8 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   1a964:	2d04      	cmp	r5, #4
   1a966:	d1e7      	bne.n	1a938 <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
   1a968:	f01c fe2f 	bl	375ca <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   1a96c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1a970:	fba0 bc05 	umull	fp, ip, r0, r5
   1a974:	fb05 cc01 	mla	ip, r5, r1, ip
   1a978:	ea4f 32db 	mov.w	r2, fp, lsr #15
   1a97c:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
   1a980:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
   1a984:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1a988:	2308      	movs	r3, #8
   1a98a:	2220      	movs	r2, #32
   1a98c:	9300      	str	r3, [sp, #0]
   1a98e:	4631      	mov	r1, r6
   1a990:	480a      	ldr	r0, [pc, #40]	; (1a9bc <prng_reseed.constprop.0+0x8c>)
   1a992:	446b      	add	r3, sp
   1a994:	f017 fbe2 	bl	3215c <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   1a998:	b958      	cbnz	r0, 1a9b2 <prng_reseed.constprop.0+0x82>
   1a99a:	4b09      	ldr	r3, [pc, #36]	; (1a9c0 <prng_reseed.constprop.0+0x90>)
   1a99c:	4909      	ldr	r1, [pc, #36]	; (1a9c4 <prng_reseed.constprop.0+0x94>)
		BT_ERR("Failed to re-seed PRNG");
   1a99e:	480a      	ldr	r0, [pc, #40]	; (1a9c8 <prng_reseed.constprop.0+0x98>)
   1a9a0:	1ac9      	subs	r1, r1, r3
   1a9a2:	08c9      	lsrs	r1, r1, #3
   1a9a4:	0189      	lsls	r1, r1, #6
   1a9a6:	f041 0101 	orr.w	r1, r1, #1
   1a9aa:	f015 fc95 	bl	302d8 <log_0>
		return -EIO;
   1a9ae:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   1a9b2:	4620      	mov	r0, r4
   1a9b4:	b00d      	add	sp, #52	; 0x34
   1a9b6:	e8bd 8870 	ldmia.w	sp!, {r4, r5, r6, fp, pc}
   1a9ba:	bf00      	nop
   1a9bc:	200154b8 	.word	0x200154b8
   1a9c0:	000387c0 	.word	0x000387c0
   1a9c4:	000387f0 	.word	0x000387f0
   1a9c8:	0003c210 	.word	0x0003c210

0001a9cc <prng_init>:

int prng_init(void)
{
   1a9cc:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1a9ce:	4b16      	ldr	r3, [pc, #88]	; (1aa28 <prng_init+0x5c>)
   1a9d0:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   1a9d4:	2b00      	cmp	r3, #0
   1a9d6:	da23      	bge.n	1aa20 <prng_init+0x54>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1a9d8:	2100      	movs	r1, #0
   1a9da:	f242 0018 	movw	r0, #8216	; 0x2018
   1a9de:	aa01      	add	r2, sp, #4
   1a9e0:	f7fe fa06 	bl	18df0 <bt_hci_cmd_send_sync>
	if (ret) {
   1a9e4:	b9b8      	cbnz	r0, 1aa16 <prng_init+0x4a>
		return ret;
	}

	rp = (void *)rsp->data;
   1a9e6:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   1a9e8:	2208      	movs	r2, #8
   1a9ea:	6899      	ldr	r1, [r3, #8]
   1a9ec:	480f      	ldr	r0, [pc, #60]	; (1aa2c <prng_init+0x60>)
   1a9ee:	3101      	adds	r1, #1
   1a9f0:	f017 fb94 	bl	3211c <tc_hmac_prng_init>
   1a9f4:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   1a9f6:	9801      	ldr	r0, [sp, #4]
   1a9f8:	f003 fb56 	bl	1e0a8 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   1a9fc:	b96c      	cbnz	r4, 1aa1a <prng_init+0x4e>
   1a9fe:	4b0c      	ldr	r3, [pc, #48]	; (1aa30 <prng_init+0x64>)
   1aa00:	490c      	ldr	r1, [pc, #48]	; (1aa34 <prng_init+0x68>)
		BT_ERR("Failed to initialize PRNG");
   1aa02:	480d      	ldr	r0, [pc, #52]	; (1aa38 <prng_init+0x6c>)
   1aa04:	1ac9      	subs	r1, r1, r3
   1aa06:	08c9      	lsrs	r1, r1, #3
   1aa08:	0189      	lsls	r1, r1, #6
   1aa0a:	f041 0101 	orr.w	r1, r1, #1
   1aa0e:	f015 fc63 	bl	302d8 <log_0>
		return -EIO;
   1aa12:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1aa16:	b002      	add	sp, #8
   1aa18:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1aa1a:	f7ff ff89 	bl	1a930 <prng_reseed.constprop.0>
   1aa1e:	e7fa      	b.n	1aa16 <prng_init+0x4a>
		return -ENOTSUP;
   1aa20:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1aa24:	e7f7      	b.n	1aa16 <prng_init+0x4a>
   1aa26:	bf00      	nop
   1aa28:	20014500 	.word	0x20014500
   1aa2c:	200154b8 	.word	0x200154b8
   1aa30:	000387c0 	.word	0x000387c0
   1aa34:	000387f0 	.word	0x000387f0
   1aa38:	0003c227 	.word	0x0003c227

0001aa3c <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   1aa3c:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1aa3e:	4a0a      	ldr	r2, [pc, #40]	; (1aa68 <bt_rand+0x2c>)
{
   1aa40:	4604      	mov	r4, r0
   1aa42:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   1aa44:	f017 fba3 	bl	3218e <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1aa48:	1c43      	adds	r3, r0, #1
   1aa4a:	d107      	bne.n	1aa5c <bt_rand+0x20>
		ret = prng_reseed(&prng);
   1aa4c:	f7ff ff70 	bl	1a930 <prng_reseed.constprop.0>
		if (ret) {
   1aa50:	b948      	cbnz	r0, 1aa66 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1aa52:	4629      	mov	r1, r5
   1aa54:	4620      	mov	r0, r4
   1aa56:	4a04      	ldr	r2, [pc, #16]	; (1aa68 <bt_rand+0x2c>)
   1aa58:	f017 fb99 	bl	3218e <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   1aa5c:	2801      	cmp	r0, #1
   1aa5e:	bf14      	ite	ne
   1aa60:	f06f 0004 	mvnne.w	r0, #4
   1aa64:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   1aa66:	bd38      	pop	{r3, r4, r5, pc}
   1aa68:	200154b8 	.word	0x200154b8

0001aa6c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   1aa6c:	2300      	movs	r3, #0
{
   1aa6e:	4601      	mov	r1, r0
	tx->user_data = NULL;
   1aa70:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   1aa74:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1aa76:	4801      	ldr	r0, [pc, #4]	; (1aa7c <tx_free+0x10>)
   1aa78:	f01c bcfd 	b.w	37476 <k_queue_append>
   1aa7c:	20015090 	.word	0x20015090

0001aa80 <notify_connected>:
{
   1aa80:	b538      	push	{r3, r4, r5, lr}
   1aa82:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1aa84:	4b08      	ldr	r3, [pc, #32]	; (1aaa8 <notify_connected+0x28>)
   1aa86:	681d      	ldr	r5, [r3, #0]
   1aa88:	7a61      	ldrb	r1, [r4, #9]
   1aa8a:	b92d      	cbnz	r5, 1aa98 <notify_connected+0x18>
	if (!conn->err) {
   1aa8c:	b951      	cbnz	r1, 1aaa4 <notify_connected+0x24>
		bt_gatt_connected(conn);
   1aa8e:	4620      	mov	r0, r4
}
   1aa90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   1aa94:	f003 b886 	b.w	1dba4 <bt_gatt_connected>
		if (cb->connected) {
   1aa98:	682b      	ldr	r3, [r5, #0]
   1aa9a:	b10b      	cbz	r3, 1aaa0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1aa9c:	4620      	mov	r0, r4
   1aa9e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1aaa0:	692d      	ldr	r5, [r5, #16]
   1aaa2:	e7f1      	b.n	1aa88 <notify_connected+0x8>
}
   1aaa4:	bd38      	pop	{r3, r4, r5, pc}
   1aaa6:	bf00      	nop
   1aaa8:	20016268 	.word	0x20016268

0001aaac <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   1aaac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aab0:	4604      	mov	r4, r0
   1aab2:	460e      	mov	r6, r1
   1aab4:	4691      	mov	r9, r2
   1aab6:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1aab8:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   1aaba:	f04f 33ff 	mov.w	r3, #4294967295
   1aabe:	f04f 32ff 	mov.w	r2, #4294967295
   1aac2:	484b      	ldr	r0, [pc, #300]	; (1abf0 <send_frag+0x144>)
   1aac4:	f010 fbe0 	bl	2b288 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   1aac8:	7aa3      	ldrb	r3, [r4, #10]
   1aaca:	2b07      	cmp	r3, #7
   1aacc:	d151      	bne.n	1ab72 <send_frag+0xc6>
	__asm__ volatile(
   1aace:	f04f 0320 	mov.w	r3, #32
   1aad2:	f3ef 8211 	mrs	r2, BASEPRI
   1aad6:	f383 8811 	msr	BASEPRI, r3
   1aada:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   1aade:	2d00      	cmp	r5, #0
   1aae0:	d059      	beq.n	1ab96 <send_frag+0xea>
	parent->next = child;
   1aae2:	2300      	movs	r3, #0
   1aae4:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1aae6:	69a3      	ldr	r3, [r4, #24]
   1aae8:	2b00      	cmp	r3, #0
   1aaea:	d151      	bne.n	1ab90 <send_frag+0xe4>
	list->head = node;
   1aaec:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1aaf0:	f382 8811 	msr	BASEPRI, r2
   1aaf4:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1aaf8:	2104      	movs	r1, #4
   1aafa:	f106 0008 	add.w	r0, r6, #8
   1aafe:	f003 fb9f 	bl	1e240 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1ab02:	8823      	ldrh	r3, [r4, #0]
   1ab04:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   1ab08:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ab0c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1ab0e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ab12:	3b04      	subs	r3, #4
   1ab14:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1ab16:	2302      	movs	r3, #2
	return bt_send(buf);
   1ab18:	4630      	mov	r0, r6
   1ab1a:	7533      	strb	r3, [r6, #20]
   1ab1c:	f7fe fcca 	bl	194b4 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   1ab20:	4601      	mov	r1, r0
   1ab22:	2800      	cmp	r0, #0
   1ab24:	d062      	beq.n	1abec <send_frag+0x140>
   1ab26:	4b33      	ldr	r3, [pc, #204]	; (1abf4 <send_frag+0x148>)
   1ab28:	4a33      	ldr	r2, [pc, #204]	; (1abf8 <send_frag+0x14c>)
		BT_ERR("Unable to send to driver (err %d)", err);
   1ab2a:	4834      	ldr	r0, [pc, #208]	; (1abfc <send_frag+0x150>)
   1ab2c:	1ad2      	subs	r2, r2, r3
   1ab2e:	08d2      	lsrs	r2, r2, #3
   1ab30:	0192      	lsls	r2, r2, #6
   1ab32:	f042 0201 	orr.w	r2, r2, #1
   1ab36:	f015 fbdc 	bl	302f2 <log_1>
	__asm__ volatile(
   1ab3a:	f04f 0320 	mov.w	r3, #32
   1ab3e:	f3ef 8911 	mrs	r9, BASEPRI
   1ab42:	f383 8811 	msr	BASEPRI, r3
   1ab46:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   1ab4a:	2d00      	cmp	r5, #0
   1ab4c:	d039      	beq.n	1abc2 <send_frag+0x116>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ab4e:	2200      	movs	r2, #0
   1ab50:	6963      	ldr	r3, [r4, #20]
   1ab52:	b153      	cbz	r3, 1ab6a <send_frag+0xbe>
   1ab54:	429d      	cmp	r5, r3
   1ab56:	d131      	bne.n	1abbc <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   1ab58:	682b      	ldr	r3, [r5, #0]
   1ab5a:	bb4a      	cbnz	r2, 1abb0 <send_frag+0x104>
   1ab5c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1ab5e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1ab60:	4295      	cmp	r5, r2
   1ab62:	d100      	bne.n	1ab66 <send_frag+0xba>
	list->tail = node;
   1ab64:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1ab66:	2300      	movs	r3, #0
   1ab68:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1ab6a:	f389 8811 	msr	BASEPRI, r9
   1ab6e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1ab72:	481f      	ldr	r0, [pc, #124]	; (1abf0 <send_frag+0x144>)
   1ab74:	f010 fb44 	bl	2b200 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   1ab78:	b115      	cbz	r5, 1ab80 <send_frag+0xd4>
		tx_free(tx);
   1ab7a:	4628      	mov	r0, r5
   1ab7c:	f7ff ff76 	bl	1aa6c <tx_free>
	}

	if (always_consume) {
   1ab80:	b11f      	cbz	r7, 1ab8a <send_frag+0xde>
		net_buf_unref(buf);
   1ab82:	4630      	mov	r0, r6
   1ab84:	f003 fa90 	bl	1e0a8 <net_buf_unref>
	}
	return false;
   1ab88:	2700      	movs	r7, #0
}
   1ab8a:	4638      	mov	r0, r7
   1ab8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ab90:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ab92:	61a5      	str	r5, [r4, #24]
}
   1ab94:	e7ac      	b.n	1aaf0 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   1ab96:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1ab98:	b133      	cbz	r3, 1aba8 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   1ab9a:	f103 080c 	add.w	r8, r3, #12
   1ab9e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1aba0:	3301      	adds	r3, #1
   1aba2:	f8c8 3000 	str.w	r3, [r8]
   1aba6:	e7a3      	b.n	1aaf0 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   1aba8:	69e3      	ldr	r3, [r4, #28]
   1abaa:	f104 081c 	add.w	r8, r4, #28
   1abae:	e7f7      	b.n	1aba0 <send_frag+0xf4>
	parent->next = child;
   1abb0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1abb2:	69a3      	ldr	r3, [r4, #24]
   1abb4:	429d      	cmp	r5, r3
	list->tail = node;
   1abb6:	bf08      	it	eq
   1abb8:	61a2      	streq	r2, [r4, #24]
}
   1abba:	e7d4      	b.n	1ab66 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1abbc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1abbe:	681b      	ldr	r3, [r3, #0]
   1abc0:	e7c7      	b.n	1ab52 <send_frag+0xa6>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1abc2:	f8d8 3000 	ldr.w	r3, [r8]
   1abc6:	b95b      	cbnz	r3, 1abe0 <send_frag+0x134>
   1abc8:	490d      	ldr	r1, [pc, #52]	; (1ac00 <send_frag+0x154>)
   1abca:	480e      	ldr	r0, [pc, #56]	; (1ac04 <send_frag+0x158>)
   1abcc:	f240 438a 	movw	r3, #1162	; 0x48a
   1abd0:	4a0d      	ldr	r2, [pc, #52]	; (1ac08 <send_frag+0x15c>)
   1abd2:	f015 f84d 	bl	2fc70 <printk>
   1abd6:	f240 418a 	movw	r1, #1162	; 0x48a
   1abda:	480b      	ldr	r0, [pc, #44]	; (1ac08 <send_frag+0x15c>)
   1abdc:	f015 fb2e 	bl	3023c <assert_post_action>
			(*pending_no_cb)--;
   1abe0:	f8d8 3000 	ldr.w	r3, [r8]
   1abe4:	3b01      	subs	r3, #1
   1abe6:	f8c8 3000 	str.w	r3, [r8]
   1abea:	e7be      	b.n	1ab6a <send_frag+0xbe>
	return true;
   1abec:	2701      	movs	r7, #1
   1abee:	e7cc      	b.n	1ab8a <send_frag+0xde>
   1abf0:	200145d0 	.word	0x200145d0
   1abf4:	000387c0 	.word	0x000387c0
   1abf8:	000387e8 	.word	0x000387e8
   1abfc:	0003be3d 	.word	0x0003be3d
   1ac00:	0003c27b 	.word	0x0003c27b
   1ac04:	0003a56b 	.word	0x0003a56b
   1ac08:	0003c24b 	.word	0x0003c24b

0001ac0c <bt_conn_get_pkts>:
}
   1ac0c:	4800      	ldr	r0, [pc, #0]	; (1ac10 <bt_conn_get_pkts+0x4>)
   1ac0e:	4770      	bx	lr
   1ac10:	200145d0 	.word	0x200145d0

0001ac14 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1ac14:	1d03      	adds	r3, r0, #4
{
   1ac16:	b570      	push	{r4, r5, r6, lr}
   1ac18:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ac1a:	4618      	mov	r0, r3
   1ac1c:	f017 fda2 	bl	32764 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1ac20:	0582      	lsls	r2, r0, #22
   1ac22:	d515      	bpl.n	1ac50 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   1ac24:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1ac28:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   1ac2c:	4291      	cmp	r1, r2
   1ac2e:	d80f      	bhi.n	1ac50 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   1ac30:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   1ac34:	4291      	cmp	r1, r2
   1ac36:	d30b      	bcc.n	1ac50 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   1ac38:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   1ac3c:	4291      	cmp	r1, r2
   1ac3e:	d107      	bne.n	1ac50 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ac40:	e8d3 2fef 	ldaex	r2, [r3]
   1ac44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   1ac48:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1ac4c:	2900      	cmp	r1, #0
   1ac4e:	d1f7      	bne.n	1ac40 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   1ac50:	4b07      	ldr	r3, [pc, #28]	; (1ac70 <notify_le_param_updated+0x5c>)
   1ac52:	681d      	ldr	r5, [r3, #0]
   1ac54:	b905      	cbnz	r5, 1ac58 <notify_le_param_updated+0x44>
}
   1ac56:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   1ac58:	68ee      	ldr	r6, [r5, #12]
   1ac5a:	b13e      	cbz	r6, 1ac6c <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   1ac5c:	4620      	mov	r0, r4
   1ac5e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1ac62:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1ac66:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1ac6a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1ac6c:	692d      	ldr	r5, [r5, #16]
   1ac6e:	e7f1      	b.n	1ac54 <notify_le_param_updated+0x40>
   1ac70:	20016268 	.word	0x20016268

0001ac74 <le_param_req>:
{
   1ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac76:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   1ac78:	4608      	mov	r0, r1
{
   1ac7a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1ac7c:	f017 fc9e 	bl	325bc <bt_le_conn_params_valid>
   1ac80:	4604      	mov	r4, r0
   1ac82:	b910      	cbnz	r0, 1ac8a <le_param_req+0x16>
		return false;
   1ac84:	2400      	movs	r4, #0
}
   1ac86:	4620      	mov	r0, r4
   1ac88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1ac8a:	4b09      	ldr	r3, [pc, #36]	; (1acb0 <le_param_req+0x3c>)
   1ac8c:	681e      	ldr	r6, [r3, #0]
   1ac8e:	2e00      	cmp	r6, #0
   1ac90:	d0f9      	beq.n	1ac86 <le_param_req+0x12>
		if (!cb->le_param_req) {
   1ac92:	68b3      	ldr	r3, [r6, #8]
   1ac94:	b90b      	cbnz	r3, 1ac9a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1ac96:	6936      	ldr	r6, [r6, #16]
   1ac98:	e7f9      	b.n	1ac8e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1ac9a:	4629      	mov	r1, r5
   1ac9c:	4638      	mov	r0, r7
   1ac9e:	4798      	blx	r3
   1aca0:	2800      	cmp	r0, #0
   1aca2:	d0ef      	beq.n	1ac84 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   1aca4:	4628      	mov	r0, r5
   1aca6:	f017 fc89 	bl	325bc <bt_le_conn_params_valid>
   1acaa:	2800      	cmp	r0, #0
   1acac:	d1f3      	bne.n	1ac96 <le_param_req+0x22>
   1acae:	e7e9      	b.n	1ac84 <le_param_req+0x10>
   1acb0:	20016268 	.word	0x20016268

0001acb4 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   1acb4:	b570      	push	{r4, r5, r6, lr}
   1acb6:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1acb8:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1acbc:	2200      	movs	r2, #0
   1acbe:	2300      	movs	r3, #0
   1acc0:	4630      	mov	r0, r6
   1acc2:	f003 f95f 	bl	1df84 <net_buf_get>
   1acc6:	4605      	mov	r5, r0
   1acc8:	bb48      	cbnz	r0, 1ad1e <conn_cleanup+0x6a>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1acca:	6963      	ldr	r3, [r4, #20]
   1accc:	b173      	cbz	r3, 1acec <conn_cleanup+0x38>
   1acce:	4918      	ldr	r1, [pc, #96]	; (1ad30 <conn_cleanup+0x7c>)
   1acd0:	f240 5304 	movw	r3, #1284	; 0x504
   1acd4:	4a17      	ldr	r2, [pc, #92]	; (1ad34 <conn_cleanup+0x80>)
   1acd6:	4818      	ldr	r0, [pc, #96]	; (1ad38 <conn_cleanup+0x84>)
   1acd8:	f014 ffca 	bl	2fc70 <printk>
   1acdc:	4817      	ldr	r0, [pc, #92]	; (1ad3c <conn_cleanup+0x88>)
   1acde:	f014 ffc7 	bl	2fc70 <printk>
   1ace2:	f240 5104 	movw	r1, #1284	; 0x504
   1ace6:	4813      	ldr	r0, [pc, #76]	; (1ad34 <conn_cleanup+0x80>)
   1ace8:	f015 faa8 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1acec:	69e3      	ldr	r3, [r4, #28]
   1acee:	b15b      	cbz	r3, 1ad08 <conn_cleanup+0x54>
   1acf0:	4913      	ldr	r1, [pc, #76]	; (1ad40 <conn_cleanup+0x8c>)
   1acf2:	4811      	ldr	r0, [pc, #68]	; (1ad38 <conn_cleanup+0x84>)
   1acf4:	f240 5305 	movw	r3, #1285	; 0x505
   1acf8:	4a0e      	ldr	r2, [pc, #56]	; (1ad34 <conn_cleanup+0x80>)
   1acfa:	f014 ffb9 	bl	2fc70 <printk>
   1acfe:	f240 5105 	movw	r1, #1285	; 0x505
   1ad02:	480c      	ldr	r0, [pc, #48]	; (1ad34 <conn_cleanup+0x80>)
   1ad04:	f015 fa9a 	bl	3023c <assert_post_action>

	bt_conn_reset_rx_state(conn);
   1ad08:	4620      	mov	r0, r4
   1ad0a:	f017 fd80 	bl	3280e <bt_conn_reset_rx_state>

	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1ad0e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1ad12:	2200      	movs	r2, #0
}
   1ad14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1ad18:	2300      	movs	r3, #0
   1ad1a:	f010 bf6d 	b.w	2bbf8 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1ad1e:	6968      	ldr	r0, [r5, #20]
   1ad20:	b108      	cbz	r0, 1ad26 <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   1ad22:	f7ff fea3 	bl	1aa6c <tx_free>
		net_buf_unref(buf);
   1ad26:	4628      	mov	r0, r5
   1ad28:	f003 f9be 	bl	1e0a8 <net_buf_unref>
   1ad2c:	e7c6      	b.n	1acbc <conn_cleanup+0x8>
   1ad2e:	bf00      	nop
   1ad30:	0003c28e 	.word	0x0003c28e
   1ad34:	0003c24b 	.word	0x0003c24b
   1ad38:	0003a56b 	.word	0x0003a56b
   1ad3c:	0003c2b4 	.word	0x0003c2b4
   1ad40:	0003c2c9 	.word	0x0003c2c9

0001ad44 <bt_conn_recv>:
{
   1ad44:	b570      	push	{r4, r5, r6, lr}
   1ad46:	4616      	mov	r6, r2
   1ad48:	4604      	mov	r4, r0
   1ad4a:	460d      	mov	r5, r1
	tx_notify(conn);
   1ad4c:	f017 fd14 	bl	32778 <tx_notify>
	switch (flags) {
   1ad50:	2e01      	cmp	r6, #1
   1ad52:	d02e      	beq.n	1adb2 <bt_conn_recv+0x6e>
   1ad54:	2e02      	cmp	r6, #2
   1ad56:	d15b      	bne.n	1ae10 <bt_conn_recv+0xcc>
		if (conn->rx) {
   1ad58:	6923      	ldr	r3, [r4, #16]
   1ad5a:	b163      	cbz	r3, 1ad76 <bt_conn_recv+0x32>
   1ad5c:	4b37      	ldr	r3, [pc, #220]	; (1ae3c <bt_conn_recv+0xf8>)
   1ad5e:	4938      	ldr	r1, [pc, #224]	; (1ae40 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
   1ad60:	4838      	ldr	r0, [pc, #224]	; (1ae44 <bt_conn_recv+0x100>)
   1ad62:	1ac9      	subs	r1, r1, r3
   1ad64:	08c9      	lsrs	r1, r1, #3
   1ad66:	0189      	lsls	r1, r1, #6
   1ad68:	f041 0101 	orr.w	r1, r1, #1
   1ad6c:	f015 fab4 	bl	302d8 <log_0>
			bt_conn_reset_rx_state(conn);
   1ad70:	4620      	mov	r0, r4
   1ad72:	f017 fd4c 	bl	3280e <bt_conn_reset_rx_state>
		conn->rx = buf;
   1ad76:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1ad78:	6923      	ldr	r3, [r4, #16]
   1ad7a:	8999      	ldrh	r1, [r3, #12]
   1ad7c:	2901      	cmp	r1, #1
   1ad7e:	d95b      	bls.n	1ae38 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1ad80:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1ad82:	7845      	ldrb	r5, [r0, #1]
   1ad84:	7802      	ldrb	r2, [r0, #0]
   1ad86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1ad8a:	3204      	adds	r2, #4
   1ad8c:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   1ad8e:	4291      	cmp	r1, r2
   1ad90:	d352      	bcc.n	1ae38 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
   1ad92:	d949      	bls.n	1ae28 <bt_conn_recv+0xe4>
   1ad94:	4829      	ldr	r0, [pc, #164]	; (1ae3c <bt_conn_recv+0xf8>)
   1ad96:	4b2a      	ldr	r3, [pc, #168]	; (1ae40 <bt_conn_recv+0xfc>)
   1ad98:	1a1b      	subs	r3, r3, r0
   1ad9a:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   1ad9c:	019b      	lsls	r3, r3, #6
   1ad9e:	482a      	ldr	r0, [pc, #168]	; (1ae48 <bt_conn_recv+0x104>)
   1ada0:	f043 0301 	orr.w	r3, r3, #1
   1ada4:	f015 fab9 	bl	3031a <log_2>
		bt_conn_reset_rx_state(conn);
   1ada8:	4620      	mov	r0, r4
}
   1adaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1adae:	f017 bd2e 	b.w	3280e <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1adb2:	6920      	ldr	r0, [r4, #16]
   1adb4:	b968      	cbnz	r0, 1add2 <bt_conn_recv+0x8e>
   1adb6:	4922      	ldr	r1, [pc, #136]	; (1ae40 <bt_conn_recv+0xfc>)
   1adb8:	4b20      	ldr	r3, [pc, #128]	; (1ae3c <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
   1adba:	4824      	ldr	r0, [pc, #144]	; (1ae4c <bt_conn_recv+0x108>)
   1adbc:	1ac9      	subs	r1, r1, r3
   1adbe:	08c9      	lsrs	r1, r1, #3
   1adc0:	0189      	lsls	r1, r1, #6
   1adc2:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   1adc6:	f015 fa87 	bl	302d8 <log_0>
			bt_conn_reset_rx_state(conn);
   1adca:	4620      	mov	r0, r4
   1adcc:	f017 fd1f 	bl	3280e <bt_conn_reset_rx_state>
   1add0:	e001      	b.n	1add6 <bt_conn_recv+0x92>
		if (!buf->len) {
   1add2:	89ae      	ldrh	r6, [r5, #12]
   1add4:	b926      	cbnz	r6, 1ade0 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   1add6:	4628      	mov	r0, r5
}
   1add8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1addc:	f003 b964 	b.w	1e0a8 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1ade0:	3008      	adds	r0, #8
   1ade2:	f018 fc8f 	bl	33704 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1ade6:	4286      	cmp	r6, r0
   1ade8:	d908      	bls.n	1adfc <bt_conn_recv+0xb8>
   1adea:	4915      	ldr	r1, [pc, #84]	; (1ae40 <bt_conn_recv+0xfc>)
   1adec:	4b13      	ldr	r3, [pc, #76]	; (1ae3c <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
   1adee:	4818      	ldr	r0, [pc, #96]	; (1ae50 <bt_conn_recv+0x10c>)
   1adf0:	1ac9      	subs	r1, r1, r3
   1adf2:	08c9      	lsrs	r1, r1, #3
   1adf4:	0189      	lsls	r1, r1, #6
   1adf6:	f041 0101 	orr.w	r1, r1, #1
   1adfa:	e7e4      	b.n	1adc6 <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1adfc:	6920      	ldr	r0, [r4, #16]
   1adfe:	89aa      	ldrh	r2, [r5, #12]
   1ae00:	68a9      	ldr	r1, [r5, #8]
   1ae02:	3008      	adds	r0, #8
   1ae04:	f018 fc86 	bl	33714 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1ae08:	4628      	mov	r0, r5
   1ae0a:	f003 f94d 	bl	1e0a8 <net_buf_unref>
		break;
   1ae0e:	e7b3      	b.n	1ad78 <bt_conn_recv+0x34>
   1ae10:	4a0a      	ldr	r2, [pc, #40]	; (1ae3c <bt_conn_recv+0xf8>)
   1ae12:	4b0b      	ldr	r3, [pc, #44]	; (1ae40 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1ae14:	4631      	mov	r1, r6
   1ae16:	1a9b      	subs	r3, r3, r2
   1ae18:	08db      	lsrs	r3, r3, #3
   1ae1a:	019b      	lsls	r3, r3, #6
   1ae1c:	480d      	ldr	r0, [pc, #52]	; (1ae54 <bt_conn_recv+0x110>)
   1ae1e:	f043 0201 	orr.w	r2, r3, #1
   1ae22:	f015 fa66 	bl	302f2 <log_1>
		bt_conn_reset_rx_state(conn);
   1ae26:	e7d0      	b.n	1adca <bt_conn_recv+0x86>
	conn->rx = NULL;
   1ae28:	2200      	movs	r2, #0
	bt_l2cap_recv(conn, buf);
   1ae2a:	4620      	mov	r0, r4
	conn->rx = NULL;
   1ae2c:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1ae2e:	4619      	mov	r1, r3
}
   1ae30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1ae34:	f000 be3e 	b.w	1bab4 <bt_l2cap_recv>
}
   1ae38:	bd70      	pop	{r4, r5, r6, pc}
   1ae3a:	bf00      	nop
   1ae3c:	000387c0 	.word	0x000387c0
   1ae40:	000387e8 	.word	0x000387e8
   1ae44:	0003c2e2 	.word	0x0003c2e2
   1ae48:	0003c362 	.word	0x0003c362
   1ae4c:	0003c2ff 	.word	0x0003c2ff
   1ae50:	0003c31d 	.word	0x0003c31d
   1ae54:	0003c344 	.word	0x0003c344

0001ae58 <bt_conn_send_cb>:
{
   1ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae5c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1ae5e:	7a83      	ldrb	r3, [r0, #10]
{
   1ae60:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1ae62:	2b07      	cmp	r3, #7
{
   1ae64:	460e      	mov	r6, r1
   1ae66:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1ae68:	d00c      	beq.n	1ae84 <bt_conn_send_cb+0x2c>
   1ae6a:	4926      	ldr	r1, [pc, #152]	; (1af04 <bt_conn_send_cb+0xac>)
   1ae6c:	4b26      	ldr	r3, [pc, #152]	; (1af08 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   1ae6e:	4827      	ldr	r0, [pc, #156]	; (1af0c <bt_conn_send_cb+0xb4>)
   1ae70:	1ac9      	subs	r1, r1, r3
   1ae72:	08c9      	lsrs	r1, r1, #3
   1ae74:	0189      	lsls	r1, r1, #6
   1ae76:	f041 0101 	orr.w	r1, r1, #1
   1ae7a:	f015 fa2d 	bl	302d8 <log_0>
			return -ENOTCONN;
   1ae7e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ae82:	e01d      	b.n	1aec0 <bt_conn_send_cb+0x68>
	if (cb) {
   1ae84:	2a00      	cmp	r2, #0
   1ae86:	d03a      	beq.n	1aefe <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
   1ae88:	f012 f8b2 	bl	2cff0 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1ae8c:	4b20      	ldr	r3, [pc, #128]	; (1af10 <bt_conn_send_cb+0xb8>)
   1ae8e:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1ae90:	4820      	ldr	r0, [pc, #128]	; (1af14 <bt_conn_send_cb+0xbc>)
   1ae92:	bf07      	ittee	eq
   1ae94:	2200      	moveq	r2, #0
   1ae96:	2300      	moveq	r3, #0
   1ae98:	f04f 32ff 	movne.w	r2, #4294967295
   1ae9c:	f04f 33ff 	movne.w	r3, #4294967295
   1aea0:	f010 f940 	bl	2b124 <z_impl_k_queue_get>
   1aea4:	4604      	mov	r4, r0
		if (!tx) {
   1aea6:	b968      	cbnz	r0, 1aec4 <bt_conn_send_cb+0x6c>
   1aea8:	4b17      	ldr	r3, [pc, #92]	; (1af08 <bt_conn_send_cb+0xb0>)
   1aeaa:	4916      	ldr	r1, [pc, #88]	; (1af04 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   1aeac:	481a      	ldr	r0, [pc, #104]	; (1af18 <bt_conn_send_cb+0xc0>)
   1aeae:	1ac9      	subs	r1, r1, r3
   1aeb0:	08c9      	lsrs	r1, r1, #3
   1aeb2:	0189      	lsls	r1, r1, #6
   1aeb4:	f041 0101 	orr.w	r1, r1, #1
   1aeb8:	f015 fa0e 	bl	302d8 <log_0>
			return -ENOBUFS;
   1aebc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1aec4:	7aab      	ldrb	r3, [r5, #10]
   1aec6:	2b07      	cmp	r3, #7
   1aec8:	d00d      	beq.n	1aee6 <bt_conn_send_cb+0x8e>
   1aeca:	4b0f      	ldr	r3, [pc, #60]	; (1af08 <bt_conn_send_cb+0xb0>)
   1aecc:	490d      	ldr	r1, [pc, #52]	; (1af04 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   1aece:	4813      	ldr	r0, [pc, #76]	; (1af1c <bt_conn_send_cb+0xc4>)
   1aed0:	1ac9      	subs	r1, r1, r3
   1aed2:	08c9      	lsrs	r1, r1, #3
   1aed4:	0189      	lsls	r1, r1, #6
   1aed6:	f041 0102 	orr.w	r1, r1, #2
   1aeda:	f015 f9fd 	bl	302d8 <log_0>
			tx_free(tx);
   1aede:	4620      	mov	r0, r4
   1aee0:	f7ff fdc4 	bl	1aa6c <tx_free>
   1aee4:	e7cb      	b.n	1ae7e <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   1aee6:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1aee8:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1aeec:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1aeee:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   1aef0:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1aef4:	4631      	mov	r1, r6
   1aef6:	f003 f8a3 	bl	1e040 <net_buf_put>
	return 0;
   1aefa:	2000      	movs	r0, #0
   1aefc:	e7e0      	b.n	1aec0 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   1aefe:	614a      	str	r2, [r1, #20]
   1af00:	e7f6      	b.n	1aef0 <bt_conn_send_cb+0x98>
   1af02:	bf00      	nop
   1af04:	000387e8 	.word	0x000387e8
   1af08:	000387c0 	.word	0x000387c0
   1af0c:	0003c37d 	.word	0x0003c37d
   1af10:	20015e68 	.word	0x20015e68
   1af14:	20015090 	.word	0x20015090
   1af18:	0003c38c 	.word	0x0003c38c
   1af1c:	0003c3aa 	.word	0x0003c3aa

0001af20 <bt_conn_prepare_events>:
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   1af20:	2200      	movs	r2, #0
{
   1af22:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   1af24:	4b18      	ldr	r3, [pc, #96]	; (1af88 <bt_conn_prepare_events+0x68>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1af26:	2101      	movs	r1, #1
{
   1af28:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   1af2a:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1af2c:	f012 ffc0 	bl	2deb0 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   1af30:	4b16      	ldr	r3, [pc, #88]	; (1af8c <bt_conn_prepare_events+0x6c>)
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   1af32:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   1af36:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   1af3a:	f017 fc13 	bl	32764 <atomic_get>
   1af3e:	4619      	mov	r1, r3
   1af40:	b908      	cbnz	r0, 1af46 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   1af42:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   1af44:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1af46:	7a9a      	ldrb	r2, [r3, #10]
   1af48:	b97a      	cbnz	r2, 1af6a <bt_conn_prepare_events+0x4a>
   1af4a:	1d1a      	adds	r2, r3, #4
   1af4c:	e8d2 0fef 	ldaex	r0, [r2]
   1af50:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   1af54:	e8c2 cfee 	stlex	lr, ip, [r2]
   1af58:	f1be 0f00 	cmp.w	lr, #0
   1af5c:	d1f6      	bne.n	1af4c <bt_conn_prepare_events+0x2c>
   1af5e:	0642      	lsls	r2, r0, #25
   1af60:	d503      	bpl.n	1af6a <bt_conn_prepare_events+0x4a>
		conn_cleanup(conn);
   1af62:	4618      	mov	r0, r3
   1af64:	f7ff fea6 	bl	1acb4 <conn_cleanup>
   1af68:	e7eb      	b.n	1af42 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1af6a:	7a8b      	ldrb	r3, [r1, #10]
   1af6c:	2b07      	cmp	r3, #7
   1af6e:	d1e8      	bne.n	1af42 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   1af70:	4628      	mov	r0, r5
   1af72:	4b07      	ldr	r3, [pc, #28]	; (1af90 <bt_conn_prepare_events+0x70>)
   1af74:	2200      	movs	r2, #0
   1af76:	2104      	movs	r1, #4
   1af78:	f012 ff9a 	bl	2deb0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1af7c:	2301      	movs	r3, #1
			ev_count++;
   1af7e:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1af80:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   1af84:	e7de      	b.n	1af44 <bt_conn_prepare_events+0x24>
   1af86:	bf00      	nop
   1af88:	200147c4 	.word	0x200147c4
   1af8c:	200155f0 	.word	0x200155f0
   1af90:	20015628 	.word	0x20015628

0001af94 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1af94:	b570      	push	{r4, r5, r6, lr}
   1af96:	4606      	mov	r6, r0
   1af98:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1af9a:	480e      	ldr	r0, [pc, #56]	; (1afd4 <bt_conn_add_le+0x40>)
   1af9c:	2101      	movs	r1, #1
   1af9e:	f017 fc11 	bl	327c4 <bt_conn_new>
	if (!conn) {
   1afa2:	4604      	mov	r4, r0
   1afa4:	b198      	cbz	r0, 1afce <bt_conn_add_le+0x3a>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1afa6:	490c      	ldr	r1, [pc, #48]	; (1afd8 <bt_conn_add_le+0x44>)
   1afa8:	3060      	adds	r0, #96	; 0x60
   1afaa:	f010 fd01 	bl	2b9b0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1afae:	490b      	ldr	r1, [pc, #44]	; (1afdc <bt_conn_add_le+0x48>)
   1afb0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1afb4:	f010 fbf8 	bl	2b7a8 <k_work_init>
	if (!conn) {
		return NULL;
	}

	conn->id = id;
	bt_addr_le_copy(&conn->le.dst, peer);
   1afb8:	4629      	mov	r1, r5
	conn->id = id;
   1afba:	7226      	strb	r6, [r4, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
   1afbc:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1afc0:	f017 fbd3 	bl	3276a <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1afc4:	2301      	movs	r3, #1
   1afc6:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1afc8:	4b05      	ldr	r3, [pc, #20]	; (1afe0 <bt_conn_add_le+0x4c>)
   1afca:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1afce:	4620      	mov	r0, r4
   1afd0:	bd70      	pop	{r4, r5, r6, pc}
   1afd2:	bf00      	nop
   1afd4:	200155f0 	.word	0x200155f0
   1afd8:	0001b495 	.word	0x0001b495
   1afdc:	000327bf 	.word	0x000327bf
   1afe0:	00280018 	.word	0x00280018

0001afe4 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   1afe4:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1afe6:	30c0      	adds	r0, #192	; 0xc0
   1afe8:	e8d0 3fef 	ldaex	r3, [r0]
   1afec:	1e5a      	subs	r2, r3, #1
   1afee:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1aff2:	2900      	cmp	r1, #0
   1aff4:	d1f8      	bne.n	1afe8 <bt_conn_unref+0x4>
	atomic_val_t old = atomic_dec(&conn->ref);

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   1aff6:	2b00      	cmp	r3, #0
   1aff8:	dc10      	bgt.n	1b01c <bt_conn_unref+0x38>
   1affa:	f240 7361 	movw	r3, #1889	; 0x761
   1affe:	4908      	ldr	r1, [pc, #32]	; (1b020 <bt_conn_unref+0x3c>)
   1b000:	4a08      	ldr	r2, [pc, #32]	; (1b024 <bt_conn_unref+0x40>)
   1b002:	4809      	ldr	r0, [pc, #36]	; (1b028 <bt_conn_unref+0x44>)
   1b004:	f014 fe34 	bl	2fc70 <printk>
   1b008:	4808      	ldr	r0, [pc, #32]	; (1b02c <bt_conn_unref+0x48>)
   1b00a:	f014 fe31 	bl	2fc70 <printk>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
		bt_le_adv_resume();
	}
}
   1b00e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   1b012:	f240 7161 	movw	r1, #1889	; 0x761
   1b016:	4803      	ldr	r0, [pc, #12]	; (1b024 <bt_conn_unref+0x40>)
   1b018:	f015 b910 	b.w	3023c <assert_post_action>
}
   1b01c:	bd08      	pop	{r3, pc}
   1b01e:	bf00      	nop
   1b020:	0003c3d0 	.word	0x0003c3d0
   1b024:	0003c24b 	.word	0x0003c24b
   1b028:	0003a56b 	.word	0x0003a56b
   1b02c:	0003c3d8 	.word	0x0003c3d8

0001b030 <bt_conn_lookup_handle>:
{
   1b030:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1b032:	2101      	movs	r1, #1
{
   1b034:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1b036:	4803      	ldr	r0, [pc, #12]	; (1b044 <bt_conn_lookup_handle+0x14>)
   1b038:	f017 fc32 	bl	328a0 <conn_lookup_handle>
}
   1b03c:	2800      	cmp	r0, #0
   1b03e:	bf38      	it	cc
   1b040:	2000      	movcc	r0, #0
   1b042:	bd08      	pop	{r3, pc}
   1b044:	200155f0 	.word	0x200155f0

0001b048 <bt_conn_set_state>:
{
   1b048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   1b04c:	7a86      	ldrb	r6, [r0, #10]
{
   1b04e:	4604      	mov	r4, r0
	if (conn->state == state) {
   1b050:	428e      	cmp	r6, r1
{
   1b052:	460d      	mov	r5, r1
	if (conn->state == state) {
   1b054:	d115      	bne.n	1b082 <bt_conn_set_state+0x3a>
   1b056:	4b73      	ldr	r3, [pc, #460]	; (1b224 <bt_conn_set_state+0x1dc>)
   1b058:	4a73      	ldr	r2, [pc, #460]	; (1b228 <bt_conn_set_state+0x1e0>)
   1b05a:	2e08      	cmp	r6, #8
   1b05c:	eba2 0203 	sub.w	r2, r2, r3
   1b060:	bf98      	it	ls
   1b062:	4b72      	ldrls	r3, [pc, #456]	; (1b22c <bt_conn_set_state+0x1e4>)
   1b064:	ea4f 02d2 	mov.w	r2, r2, lsr #3
		BT_WARN("no transition %s", state2str(state));
   1b068:	ea4f 1282 	mov.w	r2, r2, lsl #6
   1b06c:	bf94      	ite	ls
   1b06e:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   1b072:	496f      	ldrhi	r1, [pc, #444]	; (1b230 <bt_conn_set_state+0x1e8>)
   1b074:	486f      	ldr	r0, [pc, #444]	; (1b234 <bt_conn_set_state+0x1ec>)
   1b076:	f042 0202 	orr.w	r2, r2, #2
}
   1b07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
   1b07e:	f015 b938 	b.w	302f2 <log_1>
	conn->state = state;
   1b082:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1b084:	b166      	cbz	r6, 1b0a0 <bt_conn_set_state+0x58>
   1b086:	2e06      	cmp	r6, #6
   1b088:	d00d      	beq.n	1b0a6 <bt_conn_set_state+0x5e>
	switch (conn->state) {
   1b08a:	7aa3      	ldrb	r3, [r4, #10]
   1b08c:	2b08      	cmp	r3, #8
   1b08e:	f200 80be 	bhi.w	1b20e <bt_conn_set_state+0x1c6>
   1b092:	e8df f003 	tbb	[pc, r3]
   1b096:	0f36      	.short	0x0f36
   1b098:	34343434 	.word	0x34343434
   1b09c:	267f      	.short	0x267f
   1b09e:	34          	.byte	0x34
   1b09f:	00          	.byte	0x00
		bt_conn_ref(conn);
   1b0a0:	f017 fbe7 	bl	32872 <bt_conn_ref>
		break;
   1b0a4:	e7f1      	b.n	1b08a <bt_conn_set_state+0x42>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b0a6:	7883      	ldrb	r3, [r0, #2]
   1b0a8:	2b01      	cmp	r3, #1
   1b0aa:	d1ee      	bne.n	1b08a <bt_conn_set_state+0x42>
			k_work_cancel_delayable(&conn->deferred_work);
   1b0ac:	3060      	adds	r0, #96	; 0x60
   1b0ae:	f010 fda9 	bl	2bc04 <k_work_cancel_delayable>
   1b0b2:	e7ea      	b.n	1b08a <bt_conn_set_state+0x42>
		tx->pending_no_cb = 0U;
   1b0b4:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   1b0b6:	4d60      	ldr	r5, [pc, #384]	; (1b238 <bt_conn_set_state+0x1f0>)
	__asm__ volatile(
   1b0b8:	f04f 0320 	mov.w	r3, #32
   1b0bc:	f3ef 8211 	mrs	r2, BASEPRI
   1b0c0:	f383 8811 	msr	BASEPRI, r3
   1b0c4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1b0c8:	69e3      	ldr	r3, [r4, #28]
   1b0ca:	2b00      	cmp	r3, #0
   1b0cc:	d07f      	beq.n	1b1ce <bt_conn_set_state+0x186>
			conn->pending_no_cb--;
   1b0ce:	3b01      	subs	r3, #1
   1b0d0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1b0d2:	f382 8811 	msr	BASEPRI, r2
   1b0d6:	f3bf 8f6f 	isb	sy
   1b0da:	4628      	mov	r0, r5
   1b0dc:	f010 f890 	bl	2b200 <z_impl_k_sem_give>
}
   1b0e0:	e7ea      	b.n	1b0b8 <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1b0e2:	78a3      	ldrb	r3, [r4, #2]
   1b0e4:	2b04      	cmp	r3, #4
   1b0e6:	d00a      	beq.n	1b0fe <bt_conn_set_state+0xb6>
	z_impl_k_queue_init(queue);
   1b0e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1b0ec:	f01c f9b6 	bl	3745c <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1b0f0:	2100      	movs	r1, #0
   1b0f2:	4852      	ldr	r0, [pc, #328]	; (1b23c <bt_conn_set_state+0x1f4>)
   1b0f4:	f013 f838 	bl	2e168 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1b0f8:	2300      	movs	r3, #0
	list->tail = NULL;
   1b0fa:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   1b0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   1b102:	78a3      	ldrb	r3, [r4, #2]
   1b104:	2b04      	cmp	r3, #4
   1b106:	d104      	bne.n	1b112 <bt_conn_set_state+0xca>
			bt_conn_unref(conn);
   1b108:	4620      	mov	r0, r4
}
   1b10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   1b10e:	f7ff bf69 	b.w	1afe4 <bt_conn_unref>
		switch (old_state) {
   1b112:	2e08      	cmp	r6, #8
   1b114:	d8f3      	bhi.n	1b0fe <bt_conn_set_state+0xb6>
   1b116:	a301      	add	r3, pc, #4	; (adr r3, 1b11c <bt_conn_set_state+0xd4>)
   1b118:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b11c:	0001b181 	.word	0x0001b181
   1b120:	0001b141 	.word	0x0001b141
   1b124:	0001b173 	.word	0x0001b173
   1b128:	0001b109 	.word	0x0001b109
   1b12c:	0001b109 	.word	0x0001b109
   1b130:	0001b173 	.word	0x0001b173
   1b134:	0001b173 	.word	0x0001b173
   1b138:	0001b181 	.word	0x0001b181
   1b13c:	0001b181 	.word	0x0001b181
			tx_notify(conn);
   1b140:	4620      	mov	r0, r4
   1b142:	f017 fb19 	bl	32778 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1b146:	78a3      	ldrb	r3, [r4, #2]
   1b148:	2b01      	cmp	r3, #1
   1b14a:	d103      	bne.n	1b154 <bt_conn_set_state+0x10c>
				k_work_cancel_delayable(&conn->deferred_work);
   1b14c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1b150:	f010 fd58 	bl	2bc04 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b154:	3404      	adds	r4, #4
   1b156:	e8d4 3fef 	ldaex	r3, [r4]
   1b15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b15e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1b162:	2a00      	cmp	r2, #0
   1b164:	d1f7      	bne.n	1b156 <bt_conn_set_state+0x10e>
}
   1b166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b16a:	2100      	movs	r1, #0
   1b16c:	4833      	ldr	r0, [pc, #204]	; (1b23c <bt_conn_set_state+0x1f4>)
   1b16e:	f012 bffb 	b.w	2e168 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1b172:	7a63      	ldrb	r3, [r4, #9]
   1b174:	2b00      	cmp	r3, #0
   1b176:	d0c7      	beq.n	1b108 <bt_conn_set_state+0xc0>
				notify_connected(conn);
   1b178:	4620      	mov	r0, r4
   1b17a:	f7ff fc81 	bl	1aa80 <notify_connected>
   1b17e:	e7c3      	b.n	1b108 <bt_conn_set_state+0xc0>
   1b180:	4a29      	ldr	r2, [pc, #164]	; (1b228 <bt_conn_set_state+0x1e0>)
   1b182:	4b28      	ldr	r3, [pc, #160]	; (1b224 <bt_conn_set_state+0x1dc>)
			BT_WARN("Invalid (%u) old state", state);
   1b184:	4629      	mov	r1, r5
   1b186:	1ad2      	subs	r2, r2, r3
   1b188:	08d2      	lsrs	r2, r2, #3
   1b18a:	0192      	lsls	r2, r2, #6
   1b18c:	482c      	ldr	r0, [pc, #176]	; (1b240 <bt_conn_set_state+0x1f8>)
   1b18e:	f042 0202 	orr.w	r2, r2, #2
   1b192:	e772      	b.n	1b07a <bt_conn_set_state+0x32>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b194:	78a3      	ldrb	r3, [r4, #2]
   1b196:	2b01      	cmp	r3, #1
   1b198:	d1b1      	bne.n	1b0fe <bt_conn_set_state+0xb6>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1b19a:	210a      	movs	r1, #10
   1b19c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1b1a0:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b1a4:	2700      	movs	r7, #0
   1b1a6:	4b27      	ldr	r3, [pc, #156]	; (1b244 <bt_conn_set_state+0x1fc>)
   1b1a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b1ac:	8a9b      	ldrh	r3, [r3, #20]
   1b1ae:	4359      	muls	r1, r3
   1b1b0:	fbc0 6701 	smlal	r6, r7, r0, r1
   1b1b4:	2300      	movs	r3, #0
   1b1b6:	4630      	mov	r0, r6
   1b1b8:	4639      	mov	r1, r7
   1b1ba:	f7f6 f819 	bl	111f0 <__aeabi_uldivmod>
   1b1be:	4602      	mov	r2, r0
   1b1c0:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1b1c2:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   1b1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   1b1ca:	f010 bc99 	b.w	2bb00 <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   1b1ce:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1b1d0:	b128      	cbz	r0, 1b1de <bt_conn_set_state+0x196>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b1d2:	69a1      	ldr	r1, [r4, #24]
   1b1d4:	6803      	ldr	r3, [r0, #0]
   1b1d6:	4288      	cmp	r0, r1
	list->head = node;
   1b1d8:	6163      	str	r3, [r4, #20]
	list->tail = node;
   1b1da:	bf08      	it	eq
   1b1dc:	61a3      	streq	r3, [r4, #24]
   1b1de:	f382 8811 	msr	BASEPRI, r2
   1b1e2:	f3bf 8f6f 	isb	sy
		if (!node) {
   1b1e6:	2800      	cmp	r0, #0
   1b1e8:	d089      	beq.n	1b0fe <bt_conn_set_state+0xb6>
	__asm__ volatile(
   1b1ea:	f04f 0220 	mov.w	r2, #32
   1b1ee:	f3ef 8311 	mrs	r3, BASEPRI
   1b1f2:	f382 8811 	msr	BASEPRI, r2
   1b1f6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1b1fa:	68c2      	ldr	r2, [r0, #12]
   1b1fc:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1b1fe:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   1b200:	f383 8811 	msr	BASEPRI, r3
   1b204:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   1b208:	f7ff fc30 	bl	1aa6c <tx_free>
   1b20c:	e765      	b.n	1b0da <bt_conn_set_state+0x92>
   1b20e:	4a06      	ldr	r2, [pc, #24]	; (1b228 <bt_conn_set_state+0x1e0>)
   1b210:	4b04      	ldr	r3, [pc, #16]	; (1b224 <bt_conn_set_state+0x1dc>)
		BT_WARN("no valid (%u) state was set", state);
   1b212:	4629      	mov	r1, r5
   1b214:	1ad2      	subs	r2, r2, r3
   1b216:	08d2      	lsrs	r2, r2, #3
   1b218:	0192      	lsls	r2, r2, #6
   1b21a:	480b      	ldr	r0, [pc, #44]	; (1b248 <bt_conn_set_state+0x200>)
   1b21c:	f042 0202 	orr.w	r2, r2, #2
   1b220:	e72b      	b.n	1b07a <bt_conn_set_state+0x32>
   1b222:	bf00      	nop
   1b224:	000387c0 	.word	0x000387c0
   1b228:	000387e8 	.word	0x000387e8
   1b22c:	00038e74 	.word	0x00038e74
   1b230:	0003c3f6 	.word	0x0003c3f6
   1b234:	0003c400 	.word	0x0003c400
   1b238:	200145d0 	.word	0x200145d0
   1b23c:	200147c4 	.word	0x200147c4
   1b240:	0003c411 	.word	0x0003c411
   1b244:	20014500 	.word	0x20014500
   1b248:	0003c428 	.word	0x0003c428

0001b24c <bt_conn_lookup_addr_le>:
{
   1b24c:	b570      	push	{r4, r5, r6, lr}
   1b24e:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b250:	480c      	ldr	r0, [pc, #48]	; (1b284 <bt_conn_lookup_addr_le+0x38>)
{
   1b252:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b254:	f017 fb0d 	bl	32872 <bt_conn_ref>
		if (!conn) {
   1b258:	4604      	mov	r4, r0
   1b25a:	b128      	cbz	r0, 1b268 <bt_conn_lookup_addr_le+0x1c>
		if (conn->type != BT_CONN_TYPE_LE) {
   1b25c:	7883      	ldrb	r3, [r0, #2]
   1b25e:	2b01      	cmp	r3, #1
   1b260:	d004      	beq.n	1b26c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1b262:	f7ff febf 	bl	1afe4 <bt_conn_unref>
	return NULL;
   1b266:	2400      	movs	r4, #0
}
   1b268:	4620      	mov	r0, r4
   1b26a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b26c:	4629      	mov	r1, r5
   1b26e:	4632      	mov	r2, r6
   1b270:	f017 fadf 	bl	32832 <bt_conn_is_peer_addr_le>
   1b274:	4605      	mov	r5, r0
   1b276:	2800      	cmp	r0, #0
   1b278:	d1f6      	bne.n	1b268 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1b27a:	4620      	mov	r0, r4
   1b27c:	f7ff feb2 	bl	1afe4 <bt_conn_unref>
	return NULL;
   1b280:	462c      	mov	r4, r5
			continue;
   1b282:	e7f1      	b.n	1b268 <bt_conn_lookup_addr_le+0x1c>
   1b284:	200155f0 	.word	0x200155f0

0001b288 <bt_conn_exists_le>:
{
   1b288:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1b28a:	f7ff ffdf 	bl	1b24c <bt_conn_lookup_addr_le>
	if (conn) {
   1b28e:	4604      	mov	r4, r0
   1b290:	b1b0      	cbz	r0, 1b2c0 <bt_conn_exists_le+0x38>
   1b292:	4b0c      	ldr	r3, [pc, #48]	; (1b2c4 <bt_conn_exists_le+0x3c>)
   1b294:	4a0c      	ldr	r2, [pc, #48]	; (1b2c8 <bt_conn_exists_le+0x40>)
   1b296:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   1b298:	7a83      	ldrb	r3, [r0, #10]
   1b29a:	08d2      	lsrs	r2, r2, #3
   1b29c:	2b08      	cmp	r3, #8
   1b29e:	bf98      	it	ls
   1b2a0:	490a      	ldrls	r1, [pc, #40]	; (1b2cc <bt_conn_exists_le+0x44>)
   1b2a2:	ea4f 1282 	mov.w	r2, r2, lsl #6
   1b2a6:	bf94      	ite	ls
   1b2a8:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   1b2ac:	4908      	ldrhi	r1, [pc, #32]	; (1b2d0 <bt_conn_exists_le+0x48>)
   1b2ae:	4809      	ldr	r0, [pc, #36]	; (1b2d4 <bt_conn_exists_le+0x4c>)
   1b2b0:	f042 0202 	orr.w	r2, r2, #2
   1b2b4:	f015 f81d 	bl	302f2 <log_1>
		bt_conn_unref(conn);
   1b2b8:	4620      	mov	r0, r4
   1b2ba:	f7ff fe93 	bl	1afe4 <bt_conn_unref>
		return true;
   1b2be:	2001      	movs	r0, #1
}
   1b2c0:	bd10      	pop	{r4, pc}
   1b2c2:	bf00      	nop
   1b2c4:	000387c0 	.word	0x000387c0
   1b2c8:	000387e8 	.word	0x000387e8
   1b2cc:	00038e74 	.word	0x00038e74
   1b2d0:	0003c3f6 	.word	0x0003c3f6
   1b2d4:	0003c444 	.word	0x0003c444

0001b2d8 <bt_conn_lookup_state_le>:
{
   1b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2da:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b2dc:	480e      	ldr	r0, [pc, #56]	; (1b318 <bt_conn_lookup_state_le+0x40>)
{
   1b2de:	460e      	mov	r6, r1
   1b2e0:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b2e2:	f017 fac6 	bl	32872 <bt_conn_ref>
		if (!conn) {
   1b2e6:	4604      	mov	r4, r0
   1b2e8:	b1a0      	cbz	r0, 1b314 <bt_conn_lookup_state_le+0x3c>
		if (conn->type != BT_CONN_TYPE_LE) {
   1b2ea:	7883      	ldrb	r3, [r0, #2]
   1b2ec:	2b01      	cmp	r3, #1
   1b2ee:	d003      	beq.n	1b2f8 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
   1b2f0:	f7ff fe78 	bl	1afe4 <bt_conn_unref>
	return NULL;
   1b2f4:	2400      	movs	r4, #0
			continue;
   1b2f6:	e00d      	b.n	1b314 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b2f8:	b136      	cbz	r6, 1b308 <bt_conn_lookup_state_le+0x30>
   1b2fa:	4632      	mov	r2, r6
   1b2fc:	4629      	mov	r1, r5
   1b2fe:	f017 fa98 	bl	32832 <bt_conn_is_peer_addr_le>
   1b302:	b908      	cbnz	r0, 1b308 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1b304:	4620      	mov	r0, r4
   1b306:	e7f3      	b.n	1b2f0 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1b308:	7aa3      	ldrb	r3, [r4, #10]
   1b30a:	42bb      	cmp	r3, r7
   1b30c:	d1fa      	bne.n	1b304 <bt_conn_lookup_state_le+0x2c>
   1b30e:	7a23      	ldrb	r3, [r4, #8]
   1b310:	42ab      	cmp	r3, r5
   1b312:	d1f7      	bne.n	1b304 <bt_conn_lookup_state_le+0x2c>
}
   1b314:	4620      	mov	r0, r4
   1b316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b318:	200155f0 	.word	0x200155f0

0001b31c <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   1b31c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b320:	4604      	mov	r4, r0
   1b322:	4843      	ldr	r0, [pc, #268]	; (1b430 <bt_conn_le_create+0x114>)
   1b324:	460e      	mov	r6, r1
   1b326:	4615      	mov	r5, r2
   1b328:	461f      	mov	r7, r3
   1b32a:	f017 fa1b 	bl	32764 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b32e:	0781      	lsls	r1, r0, #30
   1b330:	d405      	bmi.n	1b33e <bt_conn_le_create+0x22>
		return -EAGAIN;
   1b332:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   1b336:	4628      	mov	r0, r5
   1b338:	b002      	add	sp, #8
   1b33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   1b33e:	4610      	mov	r0, r2
   1b340:	f017 f93c 	bl	325bc <bt_le_conn_params_valid>
   1b344:	b910      	cbnz	r0, 1b34c <bt_conn_le_create+0x30>
		return -EINVAL;
   1b346:	f06f 0515 	mvn.w	r5, #21
   1b34a:	e7f4      	b.n	1b336 <bt_conn_le_create+0x1a>
   1b34c:	4838      	ldr	r0, [pc, #224]	; (1b430 <bt_conn_le_create+0x114>)
   1b34e:	f017 fa09 	bl	32764 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1b352:	0642      	lsls	r2, r0, #25
   1b354:	d4ed      	bmi.n	1b332 <bt_conn_le_create+0x16>
   1b356:	4836      	ldr	r0, [pc, #216]	; (1b430 <bt_conn_le_create+0x114>)
   1b358:	f017 fa04 	bl	32764 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1b35c:	0503      	lsls	r3, r0, #20
   1b35e:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   1b362:	d45e      	bmi.n	1b422 <bt_conn_le_create+0x106>
	if (!bt_id_scan_random_addr_check()) {
   1b364:	f017 f9ea 	bl	3273c <bt_id_scan_random_addr_check>
   1b368:	2800      	cmp	r0, #0
   1b36a:	d0ec      	beq.n	1b346 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   1b36c:	4621      	mov	r1, r4
   1b36e:	4640      	mov	r0, r8
   1b370:	f7ff ff8a 	bl	1b288 <bt_conn_exists_le>
   1b374:	2800      	cmp	r0, #0
   1b376:	d1e6      	bne.n	1b346 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1b378:	7823      	ldrb	r3, [r4, #0]
		bt_addr_le_copy(&dst, peer);
   1b37a:	4621      	mov	r1, r4
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1b37c:	3b02      	subs	r3, #2
   1b37e:	2b01      	cmp	r3, #1
   1b380:	d846      	bhi.n	1b410 <bt_conn_le_create+0xf4>
		bt_addr_le_copy(&dst, peer);
   1b382:	4668      	mov	r0, sp
   1b384:	f017 f9f1 	bl	3276a <bt_addr_le_copy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   1b388:	f89d 3000 	ldrb.w	r3, [sp]
   1b38c:	3b02      	subs	r3, #2
   1b38e:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   1b392:	4669      	mov	r1, sp
   1b394:	2000      	movs	r0, #0
   1b396:	f7ff fdfd 	bl	1af94 <bt_conn_add_le>
	if (!conn) {
   1b39a:	4604      	mov	r4, r0
   1b39c:	2800      	cmp	r0, #0
   1b39e:	d043      	beq.n	1b428 <bt_conn_le_create+0x10c>
	conn->le.interval_min = param->interval_min;
   1b3a0:	882b      	ldrh	r3, [r5, #0]
   1b3a2:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   1b3a6:	886b      	ldrh	r3, [r5, #2]
   1b3a8:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   1b3ac:	88ab      	ldrh	r3, [r5, #4]
   1b3ae:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   1b3b2:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   1b3b4:	4d1f      	ldr	r5, [pc, #124]	; (1b434 <bt_conn_le_create+0x118>)
	conn->le.timeout = param->timeout;
   1b3b6:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   1b3ba:	f105 0c08 	add.w	ip, r5, #8
   1b3be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1b3c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   1b3c6:	8aab      	ldrh	r3, [r5, #20]
   1b3c8:	462a      	mov	r2, r5
	bt_dev.create_param.timeout =
   1b3ca:	2b00      	cmp	r3, #0
   1b3cc:	bf08      	it	eq
   1b3ce:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   1b3d2:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   1b3d4:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   1b3d6:	b903      	cbnz	r3, 1b3da <bt_conn_le_create+0xbe>
   1b3d8:	89ab      	ldrh	r3, [r5, #12]
   1b3da:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
   1b3dc:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   1b3de:	b903      	cbnz	r3, 1b3e2 <bt_conn_le_create+0xc6>
   1b3e0:	89d3      	ldrh	r3, [r2, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1b3e2:	2106      	movs	r1, #6
   1b3e4:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   1b3e6:	8253      	strh	r3, [r2, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1b3e8:	f7ff fe2e 	bl	1b048 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   1b3ec:	4620      	mov	r0, r4
   1b3ee:	f017 f8c8 	bl	32582 <bt_le_create_conn>
	if (err) {
   1b3f2:	4605      	mov	r5, r0
   1b3f4:	b198      	cbz	r0, 1b41e <bt_conn_le_create+0x102>
		conn->err = 0;
   1b3f6:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b3f8:	4620      	mov	r0, r4
   1b3fa:	4631      	mov	r1, r6
		conn->err = 0;
   1b3fc:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b3fe:	f7ff fe23 	bl	1b048 <bt_conn_set_state>
		bt_conn_unref(conn);
   1b402:	4620      	mov	r0, r4
   1b404:	f7ff fdee 	bl	1afe4 <bt_conn_unref>
		bt_le_scan_update(false);
   1b408:	4630      	mov	r0, r6
   1b40a:	f7ff f87f 	bl	1a50c <bt_le_scan_update>
		return err;
   1b40e:	e792      	b.n	1b336 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   1b410:	f017 f980 	bl	32714 <bt_lookup_id_addr>
   1b414:	4601      	mov	r1, r0
   1b416:	4668      	mov	r0, sp
   1b418:	f017 f9a7 	bl	3276a <bt_addr_le_copy>
   1b41c:	e7b9      	b.n	1b392 <bt_conn_le_create+0x76>
	*ret_conn = conn;
   1b41e:	603c      	str	r4, [r7, #0]
	return 0;
   1b420:	e789      	b.n	1b336 <bt_conn_le_create+0x1a>
		return -EALREADY;
   1b422:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1b426:	e786      	b.n	1b336 <bt_conn_le_create+0x1a>
		return -ENOMEM;
   1b428:	f06f 050b 	mvn.w	r5, #11
   1b42c:	e783      	b.n	1b336 <bt_conn_le_create+0x1a>
   1b42e:	bf00      	nop
   1b430:	20014598 	.word	0x20014598
   1b434:	20014500 	.word	0x20014500

0001b438 <send_conn_le_param_update>:
{
   1b438:	b538      	push	{r3, r4, r5, lr}
   1b43a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1b43c:	4608      	mov	r0, r1
{
   1b43e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1b440:	f017 f8bc 	bl	325bc <bt_le_conn_params_valid>
   1b444:	b308      	cbz	r0, 1b48a <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b446:	4b12      	ldr	r3, [pc, #72]	; (1b490 <send_conn_le_param_update+0x58>)
   1b448:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   1b44c:	0799      	lsls	r1, r3, #30
   1b44e:	d407      	bmi.n	1b460 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   1b450:	78e3      	ldrb	r3, [r4, #3]
   1b452:	b173      	cbz	r3, 1b472 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1b454:	4629      	mov	r1, r5
   1b456:	4620      	mov	r0, r4
}
   1b458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1b45c:	f000 bb62 	b.w	1bb24 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b460:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   1b464:	079a      	lsls	r2, r3, #30
   1b466:	d5f3      	bpl.n	1b450 <send_conn_le_param_update+0x18>
   1b468:	1d20      	adds	r0, r4, #4
   1b46a:	f017 f97b 	bl	32764 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1b46e:	0543      	lsls	r3, r0, #21
   1b470:	d4ee      	bmi.n	1b450 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1b472:	4629      	mov	r1, r5
   1b474:	4620      	mov	r0, r4
   1b476:	f017 fa35 	bl	328e4 <bt_conn_le_conn_update>
		if (rc == 0) {
   1b47a:	b928      	cbnz	r0, 1b488 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   1b47c:	88ab      	ldrh	r3, [r5, #4]
   1b47e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1b482:	88eb      	ldrh	r3, [r5, #6]
   1b484:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   1b488:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b48a:	f06f 0015 	mvn.w	r0, #21
   1b48e:	e7fb      	b.n	1b488 <send_conn_le_param_update+0x50>
   1b490:	20014500 	.word	0x20014500

0001b494 <deferred_work>:
{
   1b494:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1b496:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   1b49a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   1b49c:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1b4a0:	b993      	cbnz	r3, 1b4c8 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   1b4a2:	4630      	mov	r0, r6
   1b4a4:	f017 fa81 	bl	329aa <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1b4a8:	4b1b      	ldr	r3, [pc, #108]	; (1b518 <deferred_work+0x84>)
   1b4aa:	681d      	ldr	r5, [r3, #0]
   1b4ac:	b925      	cbnz	r5, 1b4b8 <deferred_work+0x24>
		bt_conn_unref(conn);
   1b4ae:	4630      	mov	r0, r6
   1b4b0:	f7ff fd98 	bl	1afe4 <bt_conn_unref>
}
   1b4b4:	b002      	add	sp, #8
   1b4b6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   1b4b8:	686b      	ldr	r3, [r5, #4]
   1b4ba:	b11b      	cbz	r3, 1b4c4 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   1b4bc:	4630      	mov	r0, r6
   1b4be:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   1b4c2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1b4c4:	692d      	ldr	r5, [r5, #16]
   1b4c6:	e7f1      	b.n	1b4ac <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   1b4c8:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1b4cc:	2b01      	cmp	r3, #1
   1b4ce:	d1f1      	bne.n	1b4b4 <deferred_work+0x20>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b4d0:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   1b4d4:	b913      	cbnz	r3, 1b4dc <deferred_work+0x48>
		bt_le_create_conn_cancel();
   1b4d6:	f7fd ffc9 	bl	1946c <bt_le_create_conn_cancel>
		return;
   1b4da:	e7eb      	b.n	1b4b4 <deferred_work+0x20>
	if (atomic_test_and_clear_bit(conn->flags,
   1b4dc:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b4e0:	e8d5 3fef 	ldaex	r3, [r5]
   1b4e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1b4e8:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1b4ec:	2900      	cmp	r1, #0
   1b4ee:	d1f7      	bne.n	1b4e0 <deferred_work+0x4c>
   1b4f0:	059b      	lsls	r3, r3, #22
   1b4f2:	d507      	bpl.n	1b504 <deferred_work+0x70>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1b4f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		send_conn_le_param_update(conn, param);
   1b4f6:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1b4f8:	9300      	str	r3, [sp, #0]
   1b4fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
		send_conn_le_param_update(conn, param);
   1b4fc:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1b4fe:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   1b500:	f7ff ff9a 	bl	1b438 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b504:	e8d5 3fef 	ldaex	r3, [r5]
   1b508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1b50c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1b510:	2a00      	cmp	r2, #0
   1b512:	d0cf      	beq.n	1b4b4 <deferred_work+0x20>
   1b514:	e7f6      	b.n	1b504 <deferred_work+0x70>
   1b516:	bf00      	nop
   1b518:	20016268 	.word	0x20016268

0001b51c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   1b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b51e:	4604      	mov	r4, r0
   1b520:	460d      	mov	r5, r1
   1b522:	4617      	mov	r7, r2
   1b524:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   1b526:	f01b ff72 	bl	3740e <k_is_in_isr>
   1b52a:	b158      	cbz	r0, 1b544 <bt_conn_create_pdu_timeout+0x28>
   1b52c:	4913      	ldr	r1, [pc, #76]	; (1b57c <bt_conn_create_pdu_timeout+0x60>)
   1b52e:	4814      	ldr	r0, [pc, #80]	; (1b580 <bt_conn_create_pdu_timeout+0x64>)
   1b530:	f640 13e1 	movw	r3, #2529	; 0x9e1
   1b534:	4a13      	ldr	r2, [pc, #76]	; (1b584 <bt_conn_create_pdu_timeout+0x68>)
   1b536:	f014 fb9b 	bl	2fc70 <printk>
   1b53a:	f640 11e1 	movw	r1, #2529	; 0x9e1
   1b53e:	4811      	ldr	r0, [pc, #68]	; (1b584 <bt_conn_create_pdu_timeout+0x68>)
   1b540:	f014 fe7c 	bl	3023c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1b544:	4810      	ldr	r0, [pc, #64]	; (1b588 <bt_conn_create_pdu_timeout+0x6c>)
   1b546:	463a      	mov	r2, r7
   1b548:	2c00      	cmp	r4, #0
   1b54a:	bf18      	it	ne
   1b54c:	4620      	movne	r0, r4
   1b54e:	4633      	mov	r3, r6
   1b550:	f018 f8b9 	bl	336c6 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   1b554:	4604      	mov	r4, r0
   1b556:	b958      	cbnz	r0, 1b570 <bt_conn_create_pdu_timeout+0x54>
   1b558:	490c      	ldr	r1, [pc, #48]	; (1b58c <bt_conn_create_pdu_timeout+0x70>)
   1b55a:	4b0d      	ldr	r3, [pc, #52]	; (1b590 <bt_conn_create_pdu_timeout+0x74>)
		BT_WARN("Unable to allocate buffer within timeout");
   1b55c:	480d      	ldr	r0, [pc, #52]	; (1b594 <bt_conn_create_pdu_timeout+0x78>)
   1b55e:	1ac9      	subs	r1, r1, r3
   1b560:	08c9      	lsrs	r1, r1, #3
   1b562:	0189      	lsls	r1, r1, #6
   1b564:	f041 0102 	orr.w	r1, r1, #2
   1b568:	f014 feb6 	bl	302d8 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   1b56c:	4620      	mov	r0, r4
   1b56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1b570:	1d29      	adds	r1, r5, #4
   1b572:	3008      	adds	r0, #8
   1b574:	f002 fd3a 	bl	1dfec <net_buf_simple_reserve>
	return buf;
   1b578:	e7f8      	b.n	1b56c <bt_conn_create_pdu_timeout+0x50>
   1b57a:	bf00      	nop
   1b57c:	0003c467 	.word	0x0003c467
   1b580:	0003a56b 	.word	0x0003a56b
   1b584:	0003c24b 	.word	0x0003c24b
   1b588:	200150d8 	.word	0x200150d8
   1b58c:	000387e8 	.word	0x000387e8
   1b590:	000387c0 	.word	0x000387c0
   1b594:	0003c476 	.word	0x0003c476

0001b598 <bt_conn_create_frag_timeout>:
{
   1b598:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1b59a:	4801      	ldr	r0, [pc, #4]	; (1b5a0 <bt_conn_create_frag_timeout+0x8>)
   1b59c:	f7ff bfbe 	b.w	1b51c <bt_conn_create_pdu_timeout>
   1b5a0:	2001515c 	.word	0x2001515c

0001b5a4 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1b5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5a8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1b5aa:	f04f 33ff 	mov.w	r3, #4294967295
   1b5ae:	f04f 32ff 	mov.w	r2, #4294967295
   1b5b2:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1b5b4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1b5b6:	f7ff ffef 	bl	1b598 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1b5ba:	7833      	ldrb	r3, [r6, #0]
		frag = bt_conn_create_frag(0);
   1b5bc:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1b5be:	2b07      	cmp	r3, #7
   1b5c0:	f04f 0600 	mov.w	r6, #0
   1b5c4:	d005      	beq.n	1b5d2 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   1b5c6:	f002 fd6f 	bl	1e0a8 <net_buf_unref>
		return NULL;
   1b5ca:	4635      	mov	r5, r6
}
   1b5cc:	4628      	mov	r0, r5
   1b5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1b5d2:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   1b5d4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   1b5d8:	4e0c      	ldr	r6, [pc, #48]	; (1b60c <create_frag.isra.0+0x68>)
   1b5da:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1b5dc:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   1b5e0:	f018 f890 	bl	33704 <net_buf_simple_tailroom>
   1b5e4:	4580      	cmp	r8, r0
   1b5e6:	d20c      	bcs.n	1b602 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   1b5e8:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b5ec:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1b5f0:	4632      	mov	r2, r6
   1b5f2:	4638      	mov	r0, r7
   1b5f4:	f018 f88e 	bl	33714 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1b5f8:	4631      	mov	r1, r6
   1b5fa:	4620      	mov	r0, r4
   1b5fc:	f002 fe42 	bl	1e284 <net_buf_simple_pull>
   1b600:	e7e4      	b.n	1b5cc <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1b602:	4638      	mov	r0, r7
   1b604:	f018 f87e 	bl	33704 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1b608:	b286      	uxth	r6, r0
   1b60a:	e7ef      	b.n	1b5ec <create_frag.isra.0+0x48>
   1b60c:	20014500 	.word	0x20014500

0001b610 <bt_conn_process_tx>:
{
   1b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b612:	7a83      	ldrb	r3, [r0, #10]
{
   1b614:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b616:	b973      	cbnz	r3, 1b636 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b618:	1d03      	adds	r3, r0, #4
   1b61a:	e8d3 2fef 	ldaex	r2, [r3]
   1b61e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1b622:	e8c3 1fe4 	stlex	r4, r1, [r3]
   1b626:	2c00      	cmp	r4, #0
   1b628:	d1f7      	bne.n	1b61a <bt_conn_process_tx+0xa>
   1b62a:	0653      	lsls	r3, r2, #25
   1b62c:	d503      	bpl.n	1b636 <bt_conn_process_tx+0x26>
}
   1b62e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   1b632:	f7ff bb3f 	b.w	1acb4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1b636:	2200      	movs	r2, #0
   1b638:	2300      	movs	r3, #0
   1b63a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1b63e:	f002 fca1 	bl	1df84 <net_buf_get>
	BT_ASSERT(buf);
   1b642:	4604      	mov	r4, r0
   1b644:	b960      	cbnz	r0, 1b660 <bt_conn_process_tx+0x50>
   1b646:	f240 5357 	movw	r3, #1367	; 0x557
   1b64a:	4a1f      	ldr	r2, [pc, #124]	; (1b6c8 <bt_conn_process_tx+0xb8>)
   1b64c:	491f      	ldr	r1, [pc, #124]	; (1b6cc <bt_conn_process_tx+0xbc>)
   1b64e:	4820      	ldr	r0, [pc, #128]	; (1b6d0 <bt_conn_process_tx+0xc0>)
   1b650:	f014 fb0e 	bl	2fc70 <printk>
   1b654:	4040      	eors	r0, r0
   1b656:	f380 8811 	msr	BASEPRI, r0
   1b65a:	f04f 0003 	mov.w	r0, #3
   1b65e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1b660:	4f1c      	ldr	r7, [pc, #112]	; (1b6d4 <bt_conn_process_tx+0xc4>)
	if (buf->len <= conn_mtu(conn)) {
   1b662:	89a1      	ldrh	r1, [r4, #12]
   1b664:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   1b668:	4291      	cmp	r1, r2
   1b66a:	d807      	bhi.n	1b67c <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1b66c:	2300      	movs	r3, #0
   1b66e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1b670:	4621      	mov	r1, r4
   1b672:	4628      	mov	r0, r5
   1b674:	f7ff fa1a 	bl	1aaac <send_frag>
	if (!send_buf(conn, buf)) {
   1b678:	b140      	cbz	r0, 1b68c <bt_conn_process_tx+0x7c>
}
   1b67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   1b67c:	f105 060a 	add.w	r6, r5, #10
   1b680:	4621      	mov	r1, r4
   1b682:	4630      	mov	r0, r6
   1b684:	f7ff ff8e 	bl	1b5a4 <create_frag.isra.0>
	if (!frag) {
   1b688:	4601      	mov	r1, r0
   1b68a:	b920      	cbnz	r0, 1b696 <bt_conn_process_tx+0x86>
		net_buf_unref(buf);
   1b68c:	4620      	mov	r0, r4
}
   1b68e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   1b692:	f002 bd09 	b.w	1e0a8 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1b696:	2301      	movs	r3, #1
   1b698:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1b69a:	4628      	mov	r0, r5
   1b69c:	f7ff fa06 	bl	1aaac <send_frag>
   1b6a0:	2800      	cmp	r0, #0
   1b6a2:	d0f3      	beq.n	1b68c <bt_conn_process_tx+0x7c>
	while (buf->len > conn_mtu(conn)) {
   1b6a4:	89a2      	ldrh	r2, [r4, #12]
   1b6a6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   1b6aa:	429a      	cmp	r2, r3
   1b6ac:	d802      	bhi.n	1b6b4 <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, FRAG_END, false);
   1b6ae:	2300      	movs	r3, #0
   1b6b0:	2203      	movs	r2, #3
   1b6b2:	e7dd      	b.n	1b670 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
   1b6b4:	4621      	mov	r1, r4
   1b6b6:	4630      	mov	r0, r6
   1b6b8:	f7ff ff74 	bl	1b5a4 <create_frag.isra.0>
		if (!frag) {
   1b6bc:	4601      	mov	r1, r0
   1b6be:	2800      	cmp	r0, #0
   1b6c0:	d0e4      	beq.n	1b68c <bt_conn_process_tx+0x7c>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1b6c2:	2301      	movs	r3, #1
   1b6c4:	461a      	mov	r2, r3
   1b6c6:	e7e8      	b.n	1b69a <bt_conn_process_tx+0x8a>
   1b6c8:	0003c24b 	.word	0x0003c24b
   1b6cc:	0003bb41 	.word	0x0003bb41
   1b6d0:	0003a56b 	.word	0x0003a56b
   1b6d4:	20014500 	.word	0x20014500

0001b6d8 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   1b6d8:	4a0c      	ldr	r2, [pc, #48]	; (1b70c <bt_conn_index+0x34>)
{
   1b6da:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   1b6dc:	1a84      	subs	r4, r0, r2
   1b6de:	10e3      	asrs	r3, r4, #3
   1b6e0:	4c0b      	ldr	r4, [pc, #44]	; (1b710 <bt_conn_index+0x38>)
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   1b6e2:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   1b6e4:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   1b6e8:	d00e      	beq.n	1b708 <bt_conn_index+0x30>
   1b6ea:	490a      	ldr	r1, [pc, #40]	; (1b714 <bt_conn_index+0x3c>)
   1b6ec:	f640 2388 	movw	r3, #2696	; 0xa88
   1b6f0:	4a09      	ldr	r2, [pc, #36]	; (1b718 <bt_conn_index+0x40>)
   1b6f2:	480a      	ldr	r0, [pc, #40]	; (1b71c <bt_conn_index+0x44>)
   1b6f4:	f014 fabc 	bl	2fc70 <printk>
   1b6f8:	4809      	ldr	r0, [pc, #36]	; (1b720 <bt_conn_index+0x48>)
   1b6fa:	f014 fab9 	bl	2fc70 <printk>
   1b6fe:	f640 2188 	movw	r1, #2696	; 0xa88
   1b702:	4805      	ldr	r0, [pc, #20]	; (1b718 <bt_conn_index+0x40>)
   1b704:	f014 fd9a 	bl	3023c <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   1b708:	b2e0      	uxtb	r0, r4
   1b70a:	bd10      	pop	{r4, pc}
   1b70c:	200155f0 	.word	0x200155f0
   1b710:	c28f5c29 	.word	0xc28f5c29
   1b714:	0003c49f 	.word	0x0003c49f
   1b718:	0003c24b 	.word	0x0003c24b
   1b71c:	0003a56b 	.word	0x0003a56b
   1b720:	0003c566 	.word	0x0003c566

0001b724 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1b724:	b910      	cbnz	r0, 1b72c <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1b726:	4802      	ldr	r0, [pc, #8]	; (1b730 <bt_conn_lookup_index+0xc>)
   1b728:	f017 b8a3 	b.w	32872 <bt_conn_ref>
}
   1b72c:	2000      	movs	r0, #0
   1b72e:	4770      	bx	lr
   1b730:	200155f0 	.word	0x200155f0

0001b734 <bt_conn_init>:

int bt_conn_init(void)
{
   1b734:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1b736:	4914      	ldr	r1, [pc, #80]	; (1b788 <bt_conn_init+0x54>)
   1b738:	4814      	ldr	r0, [pc, #80]	; (1b78c <bt_conn_init+0x58>)
   1b73a:	f01b fe9c 	bl	37476 <k_queue_append>
   1b73e:	4914      	ldr	r1, [pc, #80]	; (1b790 <bt_conn_init+0x5c>)
   1b740:	4812      	ldr	r0, [pc, #72]	; (1b78c <bt_conn_init+0x58>)
   1b742:	f01b fe98 	bl	37476 <k_queue_append>
   1b746:	4913      	ldr	r1, [pc, #76]	; (1b794 <bt_conn_init+0x60>)
   1b748:	4810      	ldr	r0, [pc, #64]	; (1b78c <bt_conn_init+0x58>)
   1b74a:	f01b fe94 	bl	37476 <k_queue_append>
	}

	bt_att_init();
   1b74e:	f017 fc77 	bl	33040 <bt_att_init>

	err = bt_smp_init();
   1b752:	f017 ffb5 	bl	336c0 <bt_smp_init>
	if (err) {
   1b756:	4605      	mov	r5, r0
   1b758:	b998      	cbnz	r0, 1b782 <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   1b75a:	f017 f996 	bl	32a8a <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b75e:	480e      	ldr	r0, [pc, #56]	; (1b798 <bt_conn_init+0x64>)
   1b760:	f017 f887 	bl	32872 <bt_conn_ref>

			if (!conn) {
   1b764:	4604      	mov	r4, r0
   1b766:	b160      	cbz	r0, 1b782 <bt_conn_init+0x4e>
   1b768:	3004      	adds	r0, #4
   1b76a:	f016 fffb 	bl	32764 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   1b76e:	07c3      	lsls	r3, r0, #31
   1b770:	d504      	bpl.n	1b77c <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1b772:	2102      	movs	r1, #2
   1b774:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   1b776:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1b778:	f7ff fc66 	bl	1b048 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   1b77c:	4620      	mov	r0, r4
   1b77e:	f7ff fc31 	bl	1afe4 <bt_conn_unref>
		}
	}

	return 0;
}
   1b782:	4628      	mov	r0, r5
   1b784:	bd38      	pop	{r3, r4, r5, pc}
   1b786:	bf00      	nop
   1b788:	2001626c 	.word	0x2001626c
   1b78c:	20015090 	.word	0x20015090
   1b790:	2001627c 	.word	0x2001627c
   1b794:	2001628c 	.word	0x2001628c
   1b798:	200155f0 	.word	0x200155f0

0001b79c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1b79c:	4a0b      	ldr	r2, [pc, #44]	; (1b7cc <l2cap_accept+0x30>)
{
   1b79e:	b508      	push	{r3, lr}
   1b7a0:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   1b7a2:	6810      	ldr	r0, [r2, #0]
   1b7a4:	b918      	cbnz	r0, 1b7ae <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1b7a6:	4b0a      	ldr	r3, [pc, #40]	; (1b7d0 <l2cap_accept+0x34>)
   1b7a8:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   1b7aa:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1b7ac:	bd08      	pop	{r3, pc}
   1b7ae:	4909      	ldr	r1, [pc, #36]	; (1b7d4 <l2cap_accept+0x38>)
   1b7b0:	4a09      	ldr	r2, [pc, #36]	; (1b7d8 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   1b7b2:	480a      	ldr	r0, [pc, #40]	; (1b7dc <l2cap_accept+0x40>)
   1b7b4:	1a52      	subs	r2, r2, r1
   1b7b6:	08d2      	lsrs	r2, r2, #3
   1b7b8:	0192      	lsls	r2, r2, #6
   1b7ba:	4619      	mov	r1, r3
   1b7bc:	f042 0201 	orr.w	r2, r2, #1
   1b7c0:	f014 fd97 	bl	302f2 <log_1>
	return -ENOMEM;
   1b7c4:	f06f 000b 	mvn.w	r0, #11
   1b7c8:	e7f0      	b.n	1b7ac <l2cap_accept+0x10>
   1b7ca:	bf00      	nop
   1b7cc:	200156b8 	.word	0x200156b8
   1b7d0:	00038eb8 	.word	0x00038eb8
   1b7d4:	000387c0 	.word	0x000387c0
   1b7d8:	00038820 	.word	0x00038820
   1b7dc:	0003c5dd 	.word	0x0003c5dd

0001b7e0 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b7e2:	4605      	mov	r5, r0
   1b7e4:	460f      	mov	r7, r1
   1b7e6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1b7e8:	2300      	movs	r3, #0
   1b7ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b7ee:	2104      	movs	r1, #4
   1b7f0:	2000      	movs	r0, #0
   1b7f2:	f7ff fe93 	bl	1b51c <bt_conn_create_pdu_timeout>
	if (!buf) {
   1b7f6:	4604      	mov	r4, r0
   1b7f8:	b960      	cbnz	r0, 1b814 <l2cap_create_le_sig_pdu.isra.0+0x34>
   1b7fa:	4a0a      	ldr	r2, [pc, #40]	; (1b824 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   1b7fc:	4b0a      	ldr	r3, [pc, #40]	; (1b828 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1b7fe:	4629      	mov	r1, r5
   1b800:	1ad2      	subs	r2, r2, r3
   1b802:	08d2      	lsrs	r2, r2, #3
   1b804:	0192      	lsls	r2, r2, #6
   1b806:	4809      	ldr	r0, [pc, #36]	; (1b82c <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   1b808:	f042 0201 	orr.w	r2, r2, #1
   1b80c:	f014 fd71 	bl	302f2 <log_1>
}
   1b810:	4620      	mov	r0, r4
   1b812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1b814:	2104      	movs	r1, #4
   1b816:	3008      	adds	r0, #8
   1b818:	f002 fd76 	bl	1e308 <net_buf_simple_add>
	hdr->code = code;
   1b81c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1b81e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1b820:	8046      	strh	r6, [r0, #2]
	return buf;
   1b822:	e7f5      	b.n	1b810 <l2cap_create_le_sig_pdu.isra.0+0x30>
   1b824:	00038820 	.word	0x00038820
   1b828:	000387c0 	.word	0x000387c0
   1b82c:	0003c604 	.word	0x0003c604

0001b830 <l2cap_rtx_timeout>:
{
   1b830:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   1b832:	4604      	mov	r4, r0
   1b834:	4b0a      	ldr	r3, [pc, #40]	; (1b860 <l2cap_rtx_timeout+0x30>)
   1b836:	4a0b      	ldr	r2, [pc, #44]	; (1b864 <l2cap_rtx_timeout+0x34>)
   1b838:	f854 5d10 	ldr.w	r5, [r4, #-16]!
   1b83c:	1ad2      	subs	r2, r2, r3
   1b83e:	08d2      	lsrs	r2, r2, #3
	BT_ERR("chan %p timeout", chan);
   1b840:	0192      	lsls	r2, r2, #6
   1b842:	4621      	mov	r1, r4
   1b844:	4808      	ldr	r0, [pc, #32]	; (1b868 <l2cap_rtx_timeout+0x38>)
   1b846:	f042 0201 	orr.w	r2, r2, #1
   1b84a:	f014 fd52 	bl	302f2 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1b84e:	4628      	mov	r0, r5
   1b850:	4621      	mov	r1, r4
   1b852:	f017 f873 	bl	3293c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1b856:	4620      	mov	r0, r4
}
   1b858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   1b85c:	f017 b890 	b.w	32980 <bt_l2cap_chan_del>
   1b860:	000387c0 	.word	0x000387c0
   1b864:	00038820 	.word	0x00038820
   1b868:	0003c62c 	.word	0x0003c62c

0001b86c <bt_l2cap_connected>:
{
   1b86c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1b870:	4f2e      	ldr	r7, [pc, #184]	; (1b92c <bt_l2cap_connected+0xc0>)
{
   1b872:	4604      	mov	r4, r0
   1b874:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1b876:	4e2e      	ldr	r6, [pc, #184]	; (1b930 <bt_l2cap_connected+0xc4>)
   1b878:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1b944 <bt_l2cap_connected+0xd8>
   1b87c:	42be      	cmp	r6, r7
   1b87e:	d90e      	bls.n	1b89e <bt_l2cap_connected+0x32>
   1b880:	492c      	ldr	r1, [pc, #176]	; (1b934 <bt_l2cap_connected+0xc8>)
   1b882:	f240 1365 	movw	r3, #357	; 0x165
   1b886:	4642      	mov	r2, r8
   1b888:	482b      	ldr	r0, [pc, #172]	; (1b938 <bt_l2cap_connected+0xcc>)
   1b88a:	f014 f9f1 	bl	2fc70 <printk>
   1b88e:	482b      	ldr	r0, [pc, #172]	; (1b93c <bt_l2cap_connected+0xd0>)
   1b890:	f014 f9ee 	bl	2fc70 <printk>
   1b894:	f240 1165 	movw	r1, #357	; 0x165
   1b898:	4640      	mov	r0, r8
   1b89a:	f014 fccf 	bl	3023c <assert_post_action>
   1b89e:	454e      	cmp	r6, r9
   1b8a0:	d302      	bcc.n	1b8a8 <bt_l2cap_connected+0x3c>
}
   1b8a2:	b002      	add	sp, #8
   1b8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1b8a8:	4620      	mov	r0, r4
   1b8aa:	6873      	ldr	r3, [r6, #4]
   1b8ac:	a901      	add	r1, sp, #4
   1b8ae:	4798      	blx	r3
   1b8b0:	2800      	cmp	r0, #0
   1b8b2:	db35      	blt.n	1b920 <bt_l2cap_connected+0xb4>
		ch = BT_L2CAP_LE_CHAN(chan);
   1b8b4:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1b8b6:	8833      	ldrh	r3, [r6, #0]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1b8b8:	4921      	ldr	r1, [pc, #132]	; (1b940 <bt_l2cap_connected+0xd4>)
		ch->rx.cid = fchan->cid;
   1b8ba:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1b8be:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1b8c2:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1b8c6:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1b8ca:	f010 f871 	bl	2b9b0 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b8ce:	2200      	movs	r2, #0
   1b8d0:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1b8d4:	e8d3 1fef 	ldaex	r1, [r3]
   1b8d8:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1b8dc:	2800      	cmp	r0, #0
   1b8de:	d1f9      	bne.n	1b8d4 <bt_l2cap_connected+0x68>
	parent->next = child;
   1b8e0:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   1b8e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1b8e4:	f105 0308 	add.w	r3, r5, #8
   1b8e8:	b9e2      	cbnz	r2, 1b924 <bt_l2cap_connected+0xb8>
	list->head = node;
   1b8ea:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   1b8ee:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1b8f0:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1b8f2:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1b8f4:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   1b8f8:	681b      	ldr	r3, [r3, #0]
   1b8fa:	b103      	cbz	r3, 1b8fe <bt_l2cap_connected+0x92>
			chan->ops->connected(chan);
   1b8fc:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b8fe:	9b01      	ldr	r3, [sp, #4]
   1b900:	3368      	adds	r3, #104	; 0x68
   1b902:	e8d3 2fef 	ldaex	r2, [r3]
   1b906:	f042 0201 	orr.w	r2, r2, #1
   1b90a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1b90e:	2900      	cmp	r1, #0
   1b910:	d1f7      	bne.n	1b902 <bt_l2cap_connected+0x96>
		if (chan->ops->status) {
   1b912:	9801      	ldr	r0, [sp, #4]
   1b914:	6843      	ldr	r3, [r0, #4]
   1b916:	699b      	ldr	r3, [r3, #24]
   1b918:	b113      	cbz	r3, 1b920 <bt_l2cap_connected+0xb4>
			chan->ops->status(chan, chan->status);
   1b91a:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1b91e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1b920:	360c      	adds	r6, #12
   1b922:	e7ab      	b.n	1b87c <bt_l2cap_connected+0x10>
	parent->next = child;
   1b924:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b926:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1b928:	e7e1      	b.n	1b8ee <bt_l2cap_connected+0x82>
   1b92a:	bf00      	nop
   1b92c:	0003879c 	.word	0x0003879c
   1b930:	00038778 	.word	0x00038778
   1b934:	0003c66d 	.word	0x0003c66d
   1b938:	0003a56b 	.word	0x0003a56b
   1b93c:	0003ac25 	.word	0x0003ac25
   1b940:	0001b831 	.word	0x0001b831
   1b944:	0003c63c 	.word	0x0003c63c

0001b948 <l2cap_recv>:
{
   1b948:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1b94a:	898b      	ldrh	r3, [r1, #12]
{
   1b94c:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   1b94e:	2b03      	cmp	r3, #3
{
   1b950:	460d      	mov	r5, r1
   1b952:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   1b954:	d80a      	bhi.n	1b96c <l2cap_recv+0x24>
   1b956:	494f      	ldr	r1, [pc, #316]	; (1ba94 <l2cap_recv+0x14c>)
   1b958:	4b4f      	ldr	r3, [pc, #316]	; (1ba98 <l2cap_recv+0x150>)
		BT_ERR("Too small L2CAP signaling PDU");
   1b95a:	4850      	ldr	r0, [pc, #320]	; (1ba9c <l2cap_recv+0x154>)
   1b95c:	1ac9      	subs	r1, r1, r3
   1b95e:	08c9      	lsrs	r1, r1, #3
   1b960:	0189      	lsls	r1, r1, #6
   1b962:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   1b966:	f014 fcb7 	bl	302d8 <log_0>
		return 0;
   1b96a:	e013      	b.n	1b994 <l2cap_recv+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b96c:	2104      	movs	r1, #4
   1b96e:	f105 0008 	add.w	r0, r5, #8
   1b972:	f002 fca7 	bl	1e2c4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1b976:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1b978:	8842      	ldrh	r2, [r0, #2]
   1b97a:	4604      	mov	r4, r0
	if (buf->len != len) {
   1b97c:	428a      	cmp	r2, r1
   1b97e:	d00c      	beq.n	1b99a <l2cap_recv+0x52>
   1b980:	4845      	ldr	r0, [pc, #276]	; (1ba98 <l2cap_recv+0x150>)
   1b982:	4b44      	ldr	r3, [pc, #272]	; (1ba94 <l2cap_recv+0x14c>)
   1b984:	1a1b      	subs	r3, r3, r0
   1b986:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1b988:	019b      	lsls	r3, r3, #6
   1b98a:	4845      	ldr	r0, [pc, #276]	; (1baa0 <l2cap_recv+0x158>)
   1b98c:	f043 0301 	orr.w	r3, r3, #1
   1b990:	f014 fcc3 	bl	3031a <log_2>
}
   1b994:	2000      	movs	r0, #0
   1b996:	b005      	add	sp, #20
   1b998:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1b99a:	7841      	ldrb	r1, [r0, #1]
   1b99c:	b941      	cbnz	r1, 1b9b0 <l2cap_recv+0x68>
   1b99e:	493d      	ldr	r1, [pc, #244]	; (1ba94 <l2cap_recv+0x14c>)
   1b9a0:	4b3d      	ldr	r3, [pc, #244]	; (1ba98 <l2cap_recv+0x150>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   1b9a2:	4840      	ldr	r0, [pc, #256]	; (1baa4 <l2cap_recv+0x15c>)
   1b9a4:	1ac9      	subs	r1, r1, r3
   1b9a6:	08c9      	lsrs	r1, r1, #3
   1b9a8:	0189      	lsls	r1, r1, #6
   1b9aa:	f041 0101 	orr.w	r1, r1, #1
   1b9ae:	e7da      	b.n	1b966 <l2cap_recv+0x1e>
	switch (hdr->code) {
   1b9b0:	7803      	ldrb	r3, [r0, #0]
   1b9b2:	2b12      	cmp	r3, #18
   1b9b4:	d01c      	beq.n	1b9f0 <l2cap_recv+0xa8>
   1b9b6:	2b13      	cmp	r3, #19
   1b9b8:	d00f      	beq.n	1b9da <l2cap_recv+0x92>
   1b9ba:	2b01      	cmp	r3, #1
   1b9bc:	d0ea      	beq.n	1b994 <l2cap_recv+0x4c>
   1b9be:	4936      	ldr	r1, [pc, #216]	; (1ba98 <l2cap_recv+0x150>)
   1b9c0:	4a34      	ldr	r2, [pc, #208]	; (1ba94 <l2cap_recv+0x14c>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1b9c2:	4839      	ldr	r0, [pc, #228]	; (1baa8 <l2cap_recv+0x160>)
   1b9c4:	1a52      	subs	r2, r2, r1
   1b9c6:	08d2      	lsrs	r2, r2, #3
   1b9c8:	0192      	lsls	r2, r2, #6
   1b9ca:	4619      	mov	r1, r3
   1b9cc:	f042 0202 	orr.w	r2, r2, #2
   1b9d0:	f014 fc8f 	bl	302f2 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   1b9d4:	7861      	ldrb	r1, [r4, #1]
   1b9d6:	6830      	ldr	r0, [r6, #0]
   1b9d8:	e019      	b.n	1ba0e <l2cap_recv+0xc6>
	if (buf->len < sizeof(*rsp)) {
   1b9da:	2a01      	cmp	r2, #1
   1b9dc:	d8da      	bhi.n	1b994 <l2cap_recv+0x4c>
   1b9de:	492d      	ldr	r1, [pc, #180]	; (1ba94 <l2cap_recv+0x14c>)
   1b9e0:	4b2d      	ldr	r3, [pc, #180]	; (1ba98 <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn param rsp");
   1b9e2:	4832      	ldr	r0, [pc, #200]	; (1baac <l2cap_recv+0x164>)
   1b9e4:	1ac9      	subs	r1, r1, r3
   1b9e6:	08c9      	lsrs	r1, r1, #3
   1b9e8:	0189      	lsls	r1, r1, #6
   1b9ea:	f041 0101 	orr.w	r1, r1, #1
   1b9ee:	e7ba      	b.n	1b966 <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
   1b9f0:	2a07      	cmp	r2, #7
   1b9f2:	d808      	bhi.n	1ba06 <l2cap_recv+0xbe>
   1b9f4:	4927      	ldr	r1, [pc, #156]	; (1ba94 <l2cap_recv+0x14c>)
   1b9f6:	4b28      	ldr	r3, [pc, #160]	; (1ba98 <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn update param req");
   1b9f8:	482d      	ldr	r0, [pc, #180]	; (1bab0 <l2cap_recv+0x168>)
   1b9fa:	1ac9      	subs	r1, r1, r3
   1b9fc:	08c9      	lsrs	r1, r1, #3
   1b9fe:	0189      	lsls	r1, r1, #6
   1ba00:	f041 0101 	orr.w	r1, r1, #1
   1ba04:	e7af      	b.n	1b966 <l2cap_recv+0x1e>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1ba06:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   1ba08:	78f7      	ldrb	r7, [r6, #3]
   1ba0a:	b11f      	cbz	r7, 1ba14 <l2cap_recv+0xcc>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1ba0c:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
   1ba0e:	f016 fffe 	bl	32a0e <l2cap_send_reject.constprop.0>
		break;
   1ba12:	e7bf      	b.n	1b994 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1ba14:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1ba16:	7850      	ldrb	r0, [r2, #1]
   1ba18:	7813      	ldrb	r3, [r2, #0]
   1ba1a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1ba1e:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1ba22:	78d0      	ldrb	r0, [r2, #3]
   1ba24:	7893      	ldrb	r3, [r2, #2]
   1ba26:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1ba2a:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1ba2e:	7950      	ldrb	r0, [r2, #5]
   1ba30:	7913      	ldrb	r3, [r2, #4]
   1ba32:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1ba36:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1ba3a:	7993      	ldrb	r3, [r2, #6]
   1ba3c:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1ba3e:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1ba40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1ba44:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1ba46:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1ba4a:	f7ff fec9 	bl	1b7e0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1ba4e:	4604      	mov	r4, r0
   1ba50:	2800      	cmp	r0, #0
   1ba52:	d09f      	beq.n	1b994 <l2cap_recv+0x4c>
	accepted = le_param_req(conn, &param);
   1ba54:	a902      	add	r1, sp, #8
   1ba56:	4630      	mov	r0, r6
   1ba58:	f7ff f90c 	bl	1ac74 <le_param_req>
   1ba5c:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   1ba5e:	2102      	movs	r1, #2
   1ba60:	f104 0008 	add.w	r0, r4, #8
   1ba64:	f002 fc50 	bl	1e308 <net_buf_simple_add>
	if (accepted) {
   1ba68:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1ba6c:	b2db      	uxtb	r3, r3
   1ba6e:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1ba70:	4622      	mov	r2, r4
   1ba72:	463b      	mov	r3, r7
   1ba74:	2105      	movs	r1, #5
   1ba76:	4630      	mov	r0, r6
   1ba78:	9700      	str	r7, [sp, #0]
   1ba7a:	f016 ffaf 	bl	329dc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1ba7e:	b110      	cbz	r0, 1ba86 <l2cap_recv+0x13e>
		net_buf_unref(buf);
   1ba80:	4620      	mov	r0, r4
   1ba82:	f002 fb11 	bl	1e0a8 <net_buf_unref>
	if (accepted) {
   1ba86:	2d00      	cmp	r5, #0
   1ba88:	d084      	beq.n	1b994 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
   1ba8a:	4630      	mov	r0, r6
   1ba8c:	a902      	add	r1, sp, #8
   1ba8e:	f016 ff29 	bl	328e4 <bt_conn_le_conn_update>
   1ba92:	e77f      	b.n	1b994 <l2cap_recv+0x4c>
   1ba94:	00038820 	.word	0x00038820
   1ba98:	000387c0 	.word	0x000387c0
   1ba9c:	0003c694 	.word	0x0003c694
   1baa0:	0003c6b2 	.word	0x0003c6b2
   1baa4:	0003c6d3 	.word	0x0003c6d3
   1baa8:	0003c733 	.word	0x0003c733
   1baac:	0003c6f4 	.word	0x0003c6f4
   1bab0:	0003c710 	.word	0x0003c710

0001bab4 <bt_l2cap_recv>:
{
   1bab4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1bab6:	898b      	ldrh	r3, [r1, #12]
{
   1bab8:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1baba:	2b03      	cmp	r3, #3
{
   1babc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1babe:	d80e      	bhi.n	1bade <bt_l2cap_recv+0x2a>
   1bac0:	4914      	ldr	r1, [pc, #80]	; (1bb14 <bt_l2cap_recv+0x60>)
   1bac2:	4b15      	ldr	r3, [pc, #84]	; (1bb18 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   1bac4:	4815      	ldr	r0, [pc, #84]	; (1bb1c <bt_l2cap_recv+0x68>)
   1bac6:	1ac9      	subs	r1, r1, r3
   1bac8:	08c9      	lsrs	r1, r1, #3
   1baca:	0189      	lsls	r1, r1, #6
   1bacc:	f041 0101 	orr.w	r1, r1, #1
   1bad0:	f014 fc02 	bl	302d8 <log_0>
	net_buf_unref(buf);
   1bad4:	4620      	mov	r0, r4
}
   1bad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1bada:	f002 bae5 	b.w	1e0a8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1bade:	2104      	movs	r1, #4
   1bae0:	f104 0008 	add.w	r0, r4, #8
   1bae4:	f002 fbee 	bl	1e2c4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1bae8:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1baea:	4628      	mov	r0, r5
   1baec:	f016 ffbd 	bl	32a6a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1baf0:	b950      	cbnz	r0, 1bb08 <bt_l2cap_recv+0x54>
   1baf2:	4b09      	ldr	r3, [pc, #36]	; (1bb18 <bt_l2cap_recv+0x64>)
   1baf4:	4a07      	ldr	r2, [pc, #28]	; (1bb14 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1baf6:	480a      	ldr	r0, [pc, #40]	; (1bb20 <bt_l2cap_recv+0x6c>)
   1baf8:	1ad2      	subs	r2, r2, r3
   1bafa:	08d2      	lsrs	r2, r2, #3
   1bafc:	0192      	lsls	r2, r2, #6
   1bafe:	f042 0202 	orr.w	r2, r2, #2
   1bb02:	f014 fbf6 	bl	302f2 <log_1>
		net_buf_unref(buf);
   1bb06:	e7e5      	b.n	1bad4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   1bb08:	6843      	ldr	r3, [r0, #4]
   1bb0a:	4621      	mov	r1, r4
   1bb0c:	691b      	ldr	r3, [r3, #16]
   1bb0e:	4798      	blx	r3
   1bb10:	e7e0      	b.n	1bad4 <bt_l2cap_recv+0x20>
   1bb12:	bf00      	nop
   1bb14:	00038820 	.word	0x00038820
   1bb18:	000387c0 	.word	0x000387c0
   1bb1c:	0003c751 	.word	0x0003c751
   1bb20:	0003c76e 	.word	0x0003c76e

0001bb24 <bt_l2cap_update_conn_param>:
{
   1bb24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1bb26:	4b17      	ldr	r3, [pc, #92]	; (1bb84 <bt_l2cap_update_conn_param+0x60>)
{
   1bb28:	4606      	mov	r6, r0
	ident++;
   1bb2a:	781a      	ldrb	r2, [r3, #0]
{
   1bb2c:	460d      	mov	r5, r1
	ident++;
   1bb2e:	3201      	adds	r2, #1
	if (!ident) {
   1bb30:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   1bb34:	bf08      	it	eq
   1bb36:	2201      	moveq	r2, #1
   1bb38:	701a      	strb	r2, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1bb3a:	2012      	movs	r0, #18
   1bb3c:	2208      	movs	r2, #8
   1bb3e:	7819      	ldrb	r1, [r3, #0]
   1bb40:	f7ff fe4e 	bl	1b7e0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1bb44:	4604      	mov	r4, r0
   1bb46:	b1d0      	cbz	r0, 1bb7e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1bb48:	2108      	movs	r1, #8
   1bb4a:	4408      	add	r0, r1
   1bb4c:	f002 fbdc 	bl	1e308 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1bb50:	882b      	ldrh	r3, [r5, #0]
   1bb52:	4622      	mov	r2, r4
   1bb54:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1bb56:	886b      	ldrh	r3, [r5, #2]
   1bb58:	2105      	movs	r1, #5
   1bb5a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1bb5c:	88ab      	ldrh	r3, [r5, #4]
   1bb5e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1bb60:	88eb      	ldrh	r3, [r5, #6]
   1bb62:	80c3      	strh	r3, [r0, #6]
   1bb64:	2300      	movs	r3, #0
   1bb66:	4630      	mov	r0, r6
   1bb68:	9300      	str	r3, [sp, #0]
   1bb6a:	f016 ff37 	bl	329dc <bt_l2cap_send_cb>
	if (err) {
   1bb6e:	4605      	mov	r5, r0
   1bb70:	b110      	cbz	r0, 1bb78 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1bb72:	4620      	mov	r0, r4
   1bb74:	f002 fa98 	bl	1e0a8 <net_buf_unref>
}
   1bb78:	4628      	mov	r0, r5
   1bb7a:	b002      	add	sp, #8
   1bb7c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1bb7e:	f06f 050b 	mvn.w	r5, #11
   1bb82:	e7f9      	b.n	1bb78 <bt_l2cap_update_conn_param+0x54>
   1bb84:	2001bb21 	.word	0x2001bb21

0001bb88 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1bb88:	4b02      	ldr	r3, [pc, #8]	; (1bb94 <att_cfm_sent+0xc>)
   1bb8a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1bb8e:	f016 bfaa 	b.w	32ae6 <att_sent>
   1bb92:	bf00      	nop
   1bb94:	00032e41 	.word	0x00032e41

0001bb98 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1bb98:	4b02      	ldr	r3, [pc, #8]	; (1bba4 <att_rsp_sent+0xc>)
   1bb9a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1bb9e:	f016 bfa2 	b.w	32ae6 <att_sent>
   1bba2:	bf00      	nop
   1bba4:	00032e2d 	.word	0x00032e2d

0001bba8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1bba8:	4b02      	ldr	r3, [pc, #8]	; (1bbb4 <att_req_sent+0xc>)
   1bbaa:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1bbae:	f016 bf9a 	b.w	32ae6 <att_sent>
   1bbb2:	bf00      	nop
   1bbb4:	00032d71 	.word	0x00032d71

0001bbb8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1bbb8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1bbba:	3808      	subs	r0, #8
   1bbbc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1bbbe:	a901      	add	r1, sp, #4
   1bbc0:	4802      	ldr	r0, [pc, #8]	; (1bbcc <bt_att_released+0x14>)
   1bbc2:	f00e fc85 	bl	2a4d0 <k_mem_slab_free>
}
   1bbc6:	b003      	add	sp, #12
   1bbc8:	f85d fb04 	ldr.w	pc, [sp], #4
   1bbcc:	20014e00 	.word	0x20014e00

0001bbd0 <read_group_cb>:
{
   1bbd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bbd4:	f04f 0800 	mov.w	r8, #0
   1bbd8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1bbdc:	4606      	mov	r6, r0
   1bbde:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bbe0:	6800      	ldr	r0, [r0, #0]
   1bbe2:	a902      	add	r1, sp, #8
{
   1bbe4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1bbe6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bbe8:	f88d 8008 	strb.w	r8, [sp, #8]
   1bbec:	f8ad 300a 	strh.w	r3, [sp, #10]
   1bbf0:	f016 fc44 	bl	3247c <bt_uuid_cmp>
   1bbf4:	b1a0      	cbz	r0, 1bc20 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bbf6:	f642 0301 	movw	r3, #10241	; 0x2801
   1bbfa:	6830      	ldr	r0, [r6, #0]
   1bbfc:	a903      	add	r1, sp, #12
   1bbfe:	f88d 800c 	strb.w	r8, [sp, #12]
   1bc02:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bc06:	f016 fc39 	bl	3247c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bc0a:	b148      	cbz	r0, 1bc20 <read_group_cb+0x50>
		if (data->group &&
   1bc0c:	6923      	ldr	r3, [r4, #16]
   1bc0e:	b11b      	cbz	r3, 1bc18 <read_group_cb+0x48>
   1bc10:	885a      	ldrh	r2, [r3, #2]
   1bc12:	42aa      	cmp	r2, r5
   1bc14:	d200      	bcs.n	1bc18 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1bc16:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1bc18:	2001      	movs	r0, #1
}
   1bc1a:	b004      	add	sp, #16
   1bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1bc20:	6861      	ldr	r1, [r4, #4]
   1bc22:	6830      	ldr	r0, [r6, #0]
   1bc24:	f016 fc2a 	bl	3247c <bt_uuid_cmp>
   1bc28:	b110      	cbz	r0, 1bc30 <read_group_cb+0x60>
		data->group = NULL;
   1bc2a:	2300      	movs	r3, #0
   1bc2c:	6123      	str	r3, [r4, #16]
   1bc2e:	e7f3      	b.n	1bc18 <read_group_cb+0x48>
	if (data->rsp->len &&
   1bc30:	68e3      	ldr	r3, [r4, #12]
   1bc32:	68a0      	ldr	r0, [r4, #8]
   1bc34:	781a      	ldrb	r2, [r3, #0]
   1bc36:	b13a      	cbz	r2, 1bc48 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1bc38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   1bc3c:	8981      	ldrh	r1, [r0, #12]
   1bc3e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1bc40:	4293      	cmp	r3, r2
   1bc42:	da01      	bge.n	1bc48 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1bc44:	2000      	movs	r0, #0
   1bc46:	e7e8      	b.n	1bc1a <read_group_cb+0x4a>
   1bc48:	2104      	movs	r1, #4
   1bc4a:	3008      	adds	r0, #8
   1bc4c:	f002 fb5c 	bl	1e308 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1bc50:	4b09      	ldr	r3, [pc, #36]	; (1bc78 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1bc52:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1bc54:	4631      	mov	r1, r6
	data->group->start_handle = sys_cpu_to_le16(handle);
   1bc56:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1bc58:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1bc5a:	68a2      	ldr	r2, [r4, #8]
   1bc5c:	9300      	str	r3, [sp, #0]
   1bc5e:	4638      	mov	r0, r7
   1bc60:	2300      	movs	r3, #0
   1bc62:	9401      	str	r4, [sp, #4]
   1bc64:	f016 ffa8 	bl	32bb8 <att_chan_read>
	if (read < 0) {
   1bc68:	2800      	cmp	r0, #0
   1bc6a:	dbeb      	blt.n	1bc44 <read_group_cb+0x74>
	if (!data->group) {
   1bc6c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1bc6e:	3800      	subs	r0, #0
   1bc70:	bf18      	it	ne
   1bc72:	2001      	movne	r0, #1
   1bc74:	e7d1      	b.n	1bc1a <read_group_cb+0x4a>
   1bc76:	bf00      	nop
   1bc78:	00032ccf 	.word	0x00032ccf

0001bc7c <read_type_cb>:
{
   1bc7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1bc80:	f8d2 8000 	ldr.w	r8, [r2]
{
   1bc84:	4606      	mov	r6, r0
   1bc86:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1bc88:	6800      	ldr	r0, [r0, #0]
   1bc8a:	6851      	ldr	r1, [r2, #4]
{
   1bc8c:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1bc8e:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1bc92:	f016 fbf3 	bl	3247c <bt_uuid_cmp>
   1bc96:	4607      	mov	r7, r0
   1bc98:	2800      	cmp	r0, #0
   1bc9a:	d13e      	bne.n	1bd1a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1bc9c:	4628      	mov	r0, r5
   1bc9e:	2215      	movs	r2, #21
   1bca0:	4631      	mov	r1, r6
   1bca2:	f017 fc70 	bl	33586 <bt_gatt_check_perm>
   1bca6:	4605      	mov	r5, r0
   1bca8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1bcaa:	b148      	cbz	r0, 1bcc0 <read_type_cb+0x44>
		if (data->rsp->len) {
   1bcac:	68e3      	ldr	r3, [r4, #12]
   1bcae:	781b      	ldrb	r3, [r3, #0]
   1bcb0:	b923      	cbnz	r3, 1bcbc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1bcb2:	2500      	movs	r5, #0
}
   1bcb4:	4628      	mov	r0, r5
   1bcb6:	b003      	add	sp, #12
   1bcb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1bcbc:	7527      	strb	r7, [r4, #20]
   1bcbe:	e7f8      	b.n	1bcb2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1bcc0:	68a0      	ldr	r0, [r4, #8]
   1bcc2:	f002 fa51 	bl	1e168 <net_buf_frag_last>
   1bcc6:	2102      	movs	r1, #2
   1bcc8:	3008      	adds	r0, #8
   1bcca:	f002 fb1d 	bl	1e308 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1bcce:	4b14      	ldr	r3, [pc, #80]	; (1bd20 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1bcd0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1bcd2:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   1bcd4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1bcd8:	68a2      	ldr	r2, [r4, #8]
   1bcda:	9300      	str	r3, [sp, #0]
   1bcdc:	4640      	mov	r0, r8
   1bcde:	462b      	mov	r3, r5
   1bce0:	9401      	str	r4, [sp, #4]
   1bce2:	f016 ff69 	bl	32bb8 <att_chan_read>
	if (read < 0) {
   1bce6:	2800      	cmp	r0, #0
   1bce8:	da07      	bge.n	1bcfa <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1bcea:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1bcee:	bf32      	itee	cc
   1bcf0:	200e      	movcc	r0, #14
		return -err;
   1bcf2:	4240      	negcs	r0, r0
   1bcf4:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1bcf6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1bcf8:	e7dc      	b.n	1bcb4 <read_type_cb+0x38>
	if (!data->item) {
   1bcfa:	6923      	ldr	r3, [r4, #16]
   1bcfc:	2b00      	cmp	r3, #0
   1bcfe:	d0d8      	beq.n	1bcb2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1bd00:	68a0      	ldr	r0, [r4, #8]
   1bd02:	f016 fee8 	bl	32ad6 <net_buf_frags_len>
   1bd06:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1bd0a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1bd0c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1bd0e:	7818      	ldrb	r0, [r3, #0]
   1bd10:	4285      	cmp	r5, r0
   1bd12:	bf94      	ite	ls
   1bd14:	2500      	movls	r5, #0
   1bd16:	2501      	movhi	r5, #1
   1bd18:	e7cc      	b.n	1bcb4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1bd1a:	2501      	movs	r5, #1
   1bd1c:	e7ca      	b.n	1bcb4 <read_type_cb+0x38>
   1bd1e:	bf00      	nop
   1bd20:	00032af3 	.word	0x00032af3

0001bd24 <find_type_cb>:
{
   1bd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bd28:	f642 0301 	movw	r3, #10241	; 0x2801
   1bd2c:	2500      	movs	r5, #0
{
   1bd2e:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   1bd30:	f8d2 9000 	ldr.w	r9, [r2]
{
   1bd34:	4607      	mov	r7, r0
   1bd36:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bd38:	6800      	ldr	r0, [r0, #0]
   1bd3a:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   1bd3c:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   1bd40:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bd42:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1bd46:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1bd4a:	f016 fb97 	bl	3247c <bt_uuid_cmp>
   1bd4e:	2800      	cmp	r0, #0
   1bd50:	d066      	beq.n	1be20 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1bd52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1bd56:	6838      	ldr	r0, [r7, #0]
   1bd58:	a90b      	add	r1, sp, #44	; 0x2c
   1bd5a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1bd5e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1bd62:	f016 fb8b 	bl	3247c <bt_uuid_cmp>
   1bd66:	b138      	cbz	r0, 1bd78 <find_type_cb+0x54>
		if (data->group &&
   1bd68:	68a3      	ldr	r3, [r4, #8]
   1bd6a:	b11b      	cbz	r3, 1bd74 <find_type_cb+0x50>
   1bd6c:	885a      	ldrh	r2, [r3, #2]
   1bd6e:	42b2      	cmp	r2, r6
   1bd70:	d200      	bcs.n	1bd74 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1bd72:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1bd74:	2001      	movs	r0, #1
   1bd76:	e009      	b.n	1bd8c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1bd78:	6861      	ldr	r1, [r4, #4]
   1bd7a:	4608      	mov	r0, r1
   1bd7c:	f016 feab 	bl	32ad6 <net_buf_frags_len>
   1bd80:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1bd84:	1a1b      	subs	r3, r3, r0
   1bd86:	2b03      	cmp	r3, #3
   1bd88:	d803      	bhi.n	1bd92 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1bd8a:	2000      	movs	r0, #0
}
   1bd8c:	b011      	add	sp, #68	; 0x44
   1bd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1bd92:	4608      	mov	r0, r1
   1bd94:	f002 f9e8 	bl	1e168 <net_buf_frag_last>
   1bd98:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1bd9a:	6860      	ldr	r0, [r4, #4]
   1bd9c:	f016 fe9b 	bl	32ad6 <net_buf_frags_len>
   1bda0:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1bda4:	f105 0b08 	add.w	fp, r5, #8
   1bda8:	ebaa 0a00 	sub.w	sl, sl, r0
   1bdac:	4658      	mov	r0, fp
   1bdae:	f017 fca9 	bl	33704 <net_buf_simple_tailroom>
   1bdb2:	4582      	cmp	sl, r0
   1bdb4:	d237      	bcs.n	1be26 <find_type_cb+0x102>
   1bdb6:	6860      	ldr	r0, [r4, #4]
   1bdb8:	f016 fe8d 	bl	32ad6 <net_buf_frags_len>
   1bdbc:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1bdc0:	1a18      	subs	r0, r3, r0
	if (!len) {
   1bdc2:	b970      	cbnz	r0, 1bde2 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1bdc4:	6863      	ldr	r3, [r4, #4]
   1bdc6:	7998      	ldrb	r0, [r3, #6]
   1bdc8:	f001 ffce 	bl	1dd68 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1bdcc:	2200      	movs	r2, #0
   1bdce:	2300      	movs	r3, #0
   1bdd0:	f017 fc79 	bl	336c6 <net_buf_alloc_fixed>
		if (!frag) {
   1bdd4:	4605      	mov	r5, r0
   1bdd6:	2800      	cmp	r0, #0
   1bdd8:	d0d7      	beq.n	1bd8a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1bdda:	4601      	mov	r1, r0
   1bddc:	6860      	ldr	r0, [r4, #4]
   1bdde:	f002 fa0b 	bl	1e1f8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1bde2:	2300      	movs	r3, #0
   1bde4:	9300      	str	r3, [sp, #0]
   1bde6:	4639      	mov	r1, r7
   1bde8:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1bdec:	2310      	movs	r3, #16
   1bdee:	4640      	mov	r0, r8
   1bdf0:	aa02      	add	r2, sp, #8
   1bdf2:	47c8      	blx	r9
	if (read < 0) {
   1bdf4:	1e07      	subs	r7, r0, #0
   1bdf6:	db13      	blt.n	1be20 <find_type_cb+0xfc>
	if (read != data->value_len) {
   1bdf8:	7c22      	ldrb	r2, [r4, #16]
   1bdfa:	68e0      	ldr	r0, [r4, #12]
   1bdfc:	42ba      	cmp	r2, r7
   1bdfe:	d037      	beq.n	1be70 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1be00:	4601      	mov	r1, r0
   1be02:	a80b      	add	r0, sp, #44	; 0x2c
   1be04:	f016 fb64 	bl	324d0 <bt_uuid_create>
   1be08:	b988      	cbnz	r0, 1be2e <find_type_cb+0x10a>
   1be0a:	4a1b      	ldr	r2, [pc, #108]	; (1be78 <find_type_cb+0x154>)
   1be0c:	4b1b      	ldr	r3, [pc, #108]	; (1be7c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1be0e:	7c21      	ldrb	r1, [r4, #16]
   1be10:	1ad2      	subs	r2, r2, r3
   1be12:	08d2      	lsrs	r2, r2, #3
   1be14:	0192      	lsls	r2, r2, #6
   1be16:	481a      	ldr	r0, [pc, #104]	; (1be80 <find_type_cb+0x15c>)
   1be18:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   1be1c:	f014 fa69 	bl	302f2 <log_1>
	data->group = NULL;
   1be20:	2300      	movs	r3, #0
   1be22:	60a3      	str	r3, [r4, #8]
   1be24:	e7a6      	b.n	1bd74 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1be26:	4658      	mov	r0, fp
   1be28:	f017 fc6c 	bl	33704 <net_buf_simple_tailroom>
   1be2c:	e7c9      	b.n	1bdc2 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1be2e:	b2fa      	uxtb	r2, r7
   1be30:	a902      	add	r1, sp, #8
   1be32:	a806      	add	r0, sp, #24
   1be34:	f016 fb4c 	bl	324d0 <bt_uuid_create>
   1be38:	b948      	cbnz	r0, 1be4e <find_type_cb+0x12a>
   1be3a:	4a0f      	ldr	r2, [pc, #60]	; (1be78 <find_type_cb+0x154>)
   1be3c:	4b0f      	ldr	r3, [pc, #60]	; (1be7c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   1be3e:	4639      	mov	r1, r7
   1be40:	1ad2      	subs	r2, r2, r3
   1be42:	08d2      	lsrs	r2, r2, #3
   1be44:	0192      	lsls	r2, r2, #6
   1be46:	480f      	ldr	r0, [pc, #60]	; (1be84 <find_type_cb+0x160>)
   1be48:	f042 0202 	orr.w	r2, r2, #2
   1be4c:	e7e6      	b.n	1be1c <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1be4e:	a906      	add	r1, sp, #24
   1be50:	a80b      	add	r0, sp, #44	; 0x2c
   1be52:	f016 fb13 	bl	3247c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1be56:	2800      	cmp	r0, #0
   1be58:	d1e2      	bne.n	1be20 <find_type_cb+0xfc>
	data->err = 0x00;
   1be5a:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1be5c:	2104      	movs	r1, #4
   1be5e:	7463      	strb	r3, [r4, #17]
   1be60:	f105 0008 	add.w	r0, r5, #8
   1be64:	f002 fa50 	bl	1e308 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1be68:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1be6a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1be6c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1be6e:	e781      	b.n	1bd74 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1be70:	a902      	add	r1, sp, #8
   1be72:	f01b fc78 	bl	37766 <memcmp>
   1be76:	e7ee      	b.n	1be56 <find_type_cb+0x132>
   1be78:	000387d8 	.word	0x000387d8
   1be7c:	000387c0 	.word	0x000387c0
   1be80:	0003c7a3 	.word	0x0003c7a3
   1be84:	0003c7c2 	.word	0x0003c7c2

0001be88 <chan_send>:
{
   1be88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1be8c:	688b      	ldr	r3, [r1, #8]
{
   1be8e:	4606      	mov	r6, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1be90:	781b      	ldrb	r3, [r3, #0]
{
   1be92:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1be94:	2bd2      	cmp	r3, #210	; 0xd2
{
   1be96:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1be98:	d116      	bne.n	1bec8 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   1be9a:	6803      	ldr	r3, [r0, #0]
   1be9c:	6818      	ldr	r0, [r3, #0]
   1be9e:	f017 fc0c 	bl	336ba <bt_smp_sign>
		if (err) {
   1bea2:	4605      	mov	r5, r0
   1bea4:	b180      	cbz	r0, 1bec8 <chan_send+0x40>
   1bea6:	4b24      	ldr	r3, [pc, #144]	; (1bf38 <chan_send+0xb0>)
   1bea8:	4924      	ldr	r1, [pc, #144]	; (1bf3c <chan_send+0xb4>)
			BT_ERR("Error signing data");
   1beaa:	4825      	ldr	r0, [pc, #148]	; (1bf40 <chan_send+0xb8>)
   1beac:	1ac9      	subs	r1, r1, r3
   1beae:	08c9      	lsrs	r1, r1, #3
   1beb0:	0189      	lsls	r1, r1, #6
   1beb2:	f041 0101 	orr.w	r1, r1, #1
   1beb6:	f014 fa0f 	bl	302d8 <log_0>
			net_buf_unref(buf);
   1beba:	4620      	mov	r0, r4
   1bebc:	f002 f8f4 	bl	1e0a8 <net_buf_unref>
}
   1bec0:	4628      	mov	r0, r5
   1bec2:	b003      	add	sp, #12
   1bec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1bec8:	f104 0008 	add.w	r0, r4, #8
   1becc:	f017 fc16 	bl	336fc <net_buf_simple_headroom>
	state->len = buf->len;
   1bed0:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1bed4:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1bed6:	b957      	cbnz	r7, 1beee <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   1bed8:	68a3      	ldr	r3, [r4, #8]
   1beda:	7818      	ldrb	r0, [r3, #0]
   1bedc:	f016 fe1b 	bl	32b16 <att_op_get_type>
   1bee0:	1e43      	subs	r3, r0, #1
   1bee2:	b2db      	uxtb	r3, r3
   1bee4:	2b04      	cmp	r3, #4
   1bee6:	bf9c      	itt	ls
   1bee8:	4a16      	ldrls	r2, [pc, #88]	; (1bf44 <chan_send+0xbc>)
   1beea:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1beee:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1bef0:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1bef4:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   1bef6:	4b14      	ldr	r3, [pc, #80]	; (1bf48 <chan_send+0xc0>)
   1bef8:	429f      	cmp	r7, r3
   1befa:	d018      	beq.n	1bf2e <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   1befc:	4b13      	ldr	r3, [pc, #76]	; (1bf4c <chan_send+0xc4>)
   1befe:	429f      	cmp	r7, r3
   1bf00:	d017      	beq.n	1bf32 <chan_send+0xaa>
		return att_sent;
   1bf02:	4913      	ldr	r1, [pc, #76]	; (1bf50 <chan_send+0xc8>)
   1bf04:	4b13      	ldr	r3, [pc, #76]	; (1bf54 <chan_send+0xcc>)
   1bf06:	4a14      	ldr	r2, [pc, #80]	; (1bf58 <chan_send+0xd0>)
   1bf08:	428f      	cmp	r7, r1
   1bf0a:	bf18      	it	ne
   1bf0c:	4613      	movne	r3, r2
			       &chan->chan.chan);
   1bf0e:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1bf10:	4622      	mov	r2, r4
   1bf12:	2104      	movs	r1, #4
   1bf14:	9600      	str	r6, [sp, #0]
   1bf16:	f016 fd61 	bl	329dc <bt_l2cap_send_cb>
	if (err) {
   1bf1a:	4605      	mov	r5, r0
   1bf1c:	2800      	cmp	r0, #0
   1bf1e:	d0cf      	beq.n	1bec0 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   1bf20:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1bf22:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1bf26:	fa10 f088 	uxtah	r0, r0, r8
   1bf2a:	60a0      	str	r0, [r4, #8]
}
   1bf2c:	e7c8      	b.n	1bec0 <chan_send+0x38>
		return att_rsp_sent;
   1bf2e:	4b0b      	ldr	r3, [pc, #44]	; (1bf5c <chan_send+0xd4>)
   1bf30:	e7ed      	b.n	1bf0e <chan_send+0x86>
		return att_cfm_sent;
   1bf32:	4b0b      	ldr	r3, [pc, #44]	; (1bf60 <chan_send+0xd8>)
   1bf34:	e7eb      	b.n	1bf0e <chan_send+0x86>
   1bf36:	bf00      	nop
   1bf38:	000387c0 	.word	0x000387c0
   1bf3c:	000387d8 	.word	0x000387d8
   1bf40:	0003c7e1 	.word	0x0003c7e1
   1bf44:	00038ed8 	.word	0x00038ed8
   1bf48:	00032e2d 	.word	0x00032e2d
   1bf4c:	00032e41 	.word	0x00032e41
   1bf50:	00032d71 	.word	0x00032d71
   1bf54:	0001bba9 	.word	0x0001bba9
   1bf58:	00032ae7 	.word	0x00032ae7
   1bf5c:	0001bb99 	.word	0x0001bb99
   1bf60:	0001bb89 	.word	0x0001bb89

0001bf64 <bt_att_chan_req_send>:
{
   1bf64:	b538      	push	{r3, r4, r5, lr}
   1bf66:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   1bf68:	4604      	mov	r4, r0
   1bf6a:	b958      	cbnz	r0, 1bf84 <bt_att_chan_req_send+0x20>
   1bf6c:	491d      	ldr	r1, [pc, #116]	; (1bfe4 <bt_att_chan_req_send+0x80>)
   1bf6e:	481e      	ldr	r0, [pc, #120]	; (1bfe8 <bt_att_chan_req_send+0x84>)
   1bf70:	f240 2332 	movw	r3, #562	; 0x232
   1bf74:	4a1d      	ldr	r2, [pc, #116]	; (1bfec <bt_att_chan_req_send+0x88>)
   1bf76:	f013 fe7b 	bl	2fc70 <printk>
   1bf7a:	f240 2132 	movw	r1, #562	; 0x232
   1bf7e:	481b      	ldr	r0, [pc, #108]	; (1bfec <bt_att_chan_req_send+0x88>)
   1bf80:	f014 f95c 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(req);
   1bf84:	b95d      	cbnz	r5, 1bf9e <bt_att_chan_req_send+0x3a>
   1bf86:	491a      	ldr	r1, [pc, #104]	; (1bff0 <bt_att_chan_req_send+0x8c>)
   1bf88:	4817      	ldr	r0, [pc, #92]	; (1bfe8 <bt_att_chan_req_send+0x84>)
   1bf8a:	f240 2333 	movw	r3, #563	; 0x233
   1bf8e:	4a17      	ldr	r2, [pc, #92]	; (1bfec <bt_att_chan_req_send+0x88>)
   1bf90:	f013 fe6e 	bl	2fc70 <printk>
   1bf94:	f240 2133 	movw	r1, #563	; 0x233
   1bf98:	4814      	ldr	r0, [pc, #80]	; (1bfec <bt_att_chan_req_send+0x88>)
   1bf9a:	f014 f94f 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1bf9e:	686b      	ldr	r3, [r5, #4]
   1bfa0:	b95b      	cbnz	r3, 1bfba <bt_att_chan_req_send+0x56>
   1bfa2:	4914      	ldr	r1, [pc, #80]	; (1bff4 <bt_att_chan_req_send+0x90>)
   1bfa4:	4810      	ldr	r0, [pc, #64]	; (1bfe8 <bt_att_chan_req_send+0x84>)
   1bfa6:	f44f 730d 	mov.w	r3, #564	; 0x234
   1bfaa:	4a10      	ldr	r2, [pc, #64]	; (1bfec <bt_att_chan_req_send+0x88>)
   1bfac:	f013 fe60 	bl	2fc70 <printk>
   1bfb0:	f44f 710d 	mov.w	r1, #564	; 0x234
   1bfb4:	480d      	ldr	r0, [pc, #52]	; (1bfec <bt_att_chan_req_send+0x88>)
   1bfb6:	f014 f941 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1bfba:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   1bfbe:	b15b      	cbz	r3, 1bfd8 <bt_att_chan_req_send+0x74>
   1bfc0:	490d      	ldr	r1, [pc, #52]	; (1bff8 <bt_att_chan_req_send+0x94>)
   1bfc2:	4809      	ldr	r0, [pc, #36]	; (1bfe8 <bt_att_chan_req_send+0x84>)
   1bfc4:	f240 2335 	movw	r3, #565	; 0x235
   1bfc8:	4a08      	ldr	r2, [pc, #32]	; (1bfec <bt_att_chan_req_send+0x88>)
   1bfca:	f013 fe51 	bl	2fc70 <printk>
   1bfce:	f240 2135 	movw	r1, #565	; 0x235
   1bfd2:	4806      	ldr	r0, [pc, #24]	; (1bfec <bt_att_chan_req_send+0x88>)
   1bfd4:	f014 f932 	bl	3023c <assert_post_action>
	return chan_req_send(chan, req);
   1bfd8:	4629      	mov	r1, r5
   1bfda:	4620      	mov	r0, r4
}
   1bfdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   1bfe0:	f016 be85 	b.w	32cee <chan_req_send>
   1bfe4:	0003c823 	.word	0x0003c823
   1bfe8:	0003a56b 	.word	0x0003a56b
   1bfec:	0003c7f4 	.word	0x0003c7f4
   1bff0:	0003c72f 	.word	0x0003c72f
   1bff4:	0003c828 	.word	0x0003c828
   1bff8:	0003c832 	.word	0x0003c832

0001bffc <att_get>:
{
   1bffc:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1bffe:	7a83      	ldrb	r3, [r0, #10]
   1c000:	2b07      	cmp	r3, #7
   1c002:	d00b      	beq.n	1c01c <att_get+0x20>
   1c004:	4917      	ldr	r1, [pc, #92]	; (1c064 <att_get+0x68>)
   1c006:	4b18      	ldr	r3, [pc, #96]	; (1c068 <att_get+0x6c>)
		BT_WARN("Not connected");
   1c008:	4818      	ldr	r0, [pc, #96]	; (1c06c <att_get+0x70>)
   1c00a:	1ac9      	subs	r1, r1, r3
   1c00c:	08c9      	lsrs	r1, r1, #3
   1c00e:	0189      	lsls	r1, r1, #6
   1c010:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   1c014:	f014 f960 	bl	302d8 <log_0>
		return NULL;
   1c018:	2400      	movs	r4, #0
   1c01a:	e00e      	b.n	1c03a <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1c01c:	2104      	movs	r1, #4
   1c01e:	f016 fd24 	bl	32a6a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1c022:	4604      	mov	r4, r0
   1c024:	b958      	cbnz	r0, 1c03e <att_get+0x42>
   1c026:	490f      	ldr	r1, [pc, #60]	; (1c064 <att_get+0x68>)
   1c028:	4b0f      	ldr	r3, [pc, #60]	; (1c068 <att_get+0x6c>)
		BT_ERR("Unable to find ATT channel");
   1c02a:	4811      	ldr	r0, [pc, #68]	; (1c070 <att_get+0x74>)
   1c02c:	1ac9      	subs	r1, r1, r3
   1c02e:	08c9      	lsrs	r1, r1, #3
   1c030:	0189      	lsls	r1, r1, #6
   1c032:	f041 0101 	orr.w	r1, r1, #1
   1c036:	f014 f94f 	bl	302d8 <log_0>
}
   1c03a:	4620      	mov	r0, r4
   1c03c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c03e:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
   1c042:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1c046:	075b      	lsls	r3, r3, #29
   1c048:	d508      	bpl.n	1c05c <att_get+0x60>
   1c04a:	4906      	ldr	r1, [pc, #24]	; (1c064 <att_get+0x68>)
   1c04c:	4b06      	ldr	r3, [pc, #24]	; (1c068 <att_get+0x6c>)
		BT_WARN("ATT channel flagged as disconnected");
   1c04e:	4809      	ldr	r0, [pc, #36]	; (1c074 <att_get+0x78>)
   1c050:	1ac9      	subs	r1, r1, r3
   1c052:	08c9      	lsrs	r1, r1, #3
   1c054:	0189      	lsls	r1, r1, #6
   1c056:	f041 0102 	orr.w	r1, r1, #2
   1c05a:	e7db      	b.n	1c014 <att_get+0x18>
	return att_chan->att;
   1c05c:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1c060:	e7eb      	b.n	1c03a <att_get+0x3e>
   1c062:	bf00      	nop
   1c064:	000387d8 	.word	0x000387d8
   1c068:	000387c0 	.word	0x000387c0
   1c06c:	0003c83d 	.word	0x0003c83d
   1c070:	0003c84b 	.word	0x0003c84b
   1c074:	0003c866 	.word	0x0003c866

0001c078 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1c078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1c07a:	2300      	movs	r3, #0
{
   1c07c:	4606      	mov	r6, r0
   1c07e:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1c080:	2200      	movs	r2, #0
   1c082:	4669      	mov	r1, sp
   1c084:	4826      	ldr	r0, [pc, #152]	; (1c120 <bt_att_accept+0xa8>)
   1c086:	f00e f9b7 	bl	2a3f8 <k_mem_slab_alloc>
   1c08a:	4604      	mov	r4, r0
   1c08c:	b178      	cbz	r0, 1c0ae <bt_att_accept+0x36>
		BT_ERR("No available ATT context for conn %p", conn);
   1c08e:	4631      	mov	r1, r6
   1c090:	4a24      	ldr	r2, [pc, #144]	; (1c124 <bt_att_accept+0xac>)
   1c092:	4b25      	ldr	r3, [pc, #148]	; (1c128 <bt_att_accept+0xb0>)
   1c094:	4825      	ldr	r0, [pc, #148]	; (1c12c <bt_att_accept+0xb4>)
   1c096:	1ad2      	subs	r2, r2, r3
   1c098:	08d2      	lsrs	r2, r2, #3
   1c09a:	0192      	lsls	r2, r2, #6
   1c09c:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1c0a0:	f014 f927 	bl	302f2 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   1c0a4:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1c0a8:	4620      	mov	r0, r4
   1c0aa:	b003      	add	sp, #12
   1c0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
   1c0ae:	4601      	mov	r1, r0
   1c0b0:	2230      	movs	r2, #48	; 0x30
   1c0b2:	9800      	ldr	r0, [sp, #0]
   1c0b4:	f01b fb85 	bl	377c2 <memset>
	att->conn = conn;
   1c0b8:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1c0ba:	2200      	movs	r2, #0
	list->head = NULL;
   1c0bc:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1c0c0:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   1c0c4:	60ac      	str	r4, [r5, #8]
   1c0c6:	2300      	movs	r3, #0
   1c0c8:	4819      	ldr	r0, [pc, #100]	; (1c130 <bt_att_accept+0xb8>)
   1c0ca:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1c0cc:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1c0ce:	f00e f993 	bl	2a3f8 <k_mem_slab_alloc>
   1c0d2:	4604      	mov	r4, r0
   1c0d4:	b148      	cbz	r0, 1c0ea <bt_att_accept+0x72>
   1c0d6:	4a13      	ldr	r2, [pc, #76]	; (1c124 <bt_att_accept+0xac>)
   1c0d8:	4b13      	ldr	r3, [pc, #76]	; (1c128 <bt_att_accept+0xb0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1c0da:	6829      	ldr	r1, [r5, #0]
   1c0dc:	1ad2      	subs	r2, r2, r3
   1c0de:	08d2      	lsrs	r2, r2, #3
   1c0e0:	0192      	lsls	r2, r2, #6
   1c0e2:	4814      	ldr	r0, [pc, #80]	; (1c134 <bt_att_accept+0xbc>)
   1c0e4:	f042 0201 	orr.w	r2, r2, #1
   1c0e8:	e7da      	b.n	1c0a0 <bt_att_accept+0x28>
   1c0ea:	4601      	mov	r1, r0
   1c0ec:	f44f 72ac 	mov.w	r2, #344	; 0x158
   1c0f0:	9801      	ldr	r0, [sp, #4]
   1c0f2:	f01b fb66 	bl	377c2 <memset>
	chan->chan.chan.ops = &ops;
   1c0f6:	9801      	ldr	r0, [sp, #4]
   1c0f8:	4b0f      	ldr	r3, [pc, #60]	; (1c138 <bt_att_accept+0xc0>)
   1c0fa:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   1c0fc:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1c100:	f01b f9ac 	bl	3745c <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c104:	9b01      	ldr	r3, [sp, #4]
   1c106:	33f8      	adds	r3, #248	; 0xf8
   1c108:	e8d3 2fef 	ldaex	r2, [r3]
   1c10c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1c110:	2900      	cmp	r1, #0
   1c112:	d1f9      	bne.n	1c108 <bt_att_accept+0x90>
	chan->att = att;
   1c114:	9b01      	ldr	r3, [sp, #4]
   1c116:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1c11a:	603b      	str	r3, [r7, #0]
	return 0;
   1c11c:	e7c4      	b.n	1c0a8 <bt_att_accept+0x30>
   1c11e:	bf00      	nop
   1c120:	20014de0 	.word	0x20014de0
   1c124:	000387d8 	.word	0x000387d8
   1c128:	000387c0 	.word	0x000387c0
   1c12c:	0003c88a 	.word	0x0003c88a
   1c130:	20014e00 	.word	0x20014e00
   1c134:	0003c8af 	.word	0x0003c8af
   1c138:	200147d4 	.word	0x200147d4

0001c13c <bt_att_connected>:
{
   1c13c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1c13e:	2104      	movs	r1, #4
{
   1c140:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1c142:	6800      	ldr	r0, [r0, #0]
   1c144:	f016 fc81 	bl	32a4a <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   1c148:	4605      	mov	r5, r0
   1c14a:	b970      	cbnz	r0, 1c16a <bt_att_connected+0x2e>
   1c14c:	4919      	ldr	r1, [pc, #100]	; (1c1b4 <bt_att_connected+0x78>)
   1c14e:	f640 2317 	movw	r3, #2583	; 0xa17
   1c152:	4a19      	ldr	r2, [pc, #100]	; (1c1b8 <bt_att_connected+0x7c>)
   1c154:	4819      	ldr	r0, [pc, #100]	; (1c1bc <bt_att_connected+0x80>)
   1c156:	f013 fd8b 	bl	2fc70 <printk>
   1c15a:	4819      	ldr	r0, [pc, #100]	; (1c1c0 <bt_att_connected+0x84>)
   1c15c:	f013 fd88 	bl	2fc70 <printk>
   1c160:	f640 2117 	movw	r1, #2583	; 0xa17
   1c164:	4814      	ldr	r0, [pc, #80]	; (1c1b8 <bt_att_connected+0x7c>)
   1c166:	f014 f869 	bl	3023c <assert_post_action>
	struct bt_att *att = att_chan->att;
   1c16a:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   1c16e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c170:	b91b      	cbnz	r3, 1c17a <bt_att_connected+0x3e>
   1c172:	f105 000c 	add.w	r0, r5, #12
   1c176:	f01b f971 	bl	3745c <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   1c17a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1c17c:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	parent->next = child;
   1c180:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   1c184:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   1c186:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1c188:	b902      	cbnz	r2, 1c18c <bt_att_connected+0x50>
	list->tail = node;
   1c18a:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c18c:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   1c190:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1c194:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c196:	bf58      	it	pl
   1c198:	2317      	movpl	r3, #23
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1c19a:	f504 708c 	add.w	r0, r4, #280	; 0x118
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c19e:	bf5c      	itt	pl
   1c1a0:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c1a4:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1c1a8:	4906      	ldr	r1, [pc, #24]	; (1c1c4 <bt_att_connected+0x88>)
}
   1c1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1c1ae:	f00f bbff 	b.w	2b9b0 <k_work_init_delayable>
   1c1b2:	bf00      	nop
   1c1b4:	0003c823 	.word	0x0003c823
   1c1b8:	0003c7f4 	.word	0x0003c7f4
   1c1bc:	0003a56b 	.word	0x0003a56b
   1c1c0:	0003c8d4 	.word	0x0003c8d4
   1c1c4:	0001cc21 	.word	0x0001cc21

0001c1c8 <att_write_cmd>:
{
   1c1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1ca:	4604      	mov	r4, r0
   1c1cc:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1c1ce:	f101 0008 	add.w	r0, r1, #8
   1c1d2:	460d      	mov	r5, r1
   1c1d4:	f017 fa8a 	bl	336ec <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c1d8:	6823      	ldr	r3, [r4, #0]
   1c1da:	4606      	mov	r6, r0
   1c1dc:	2100      	movs	r1, #0
   1c1de:	6818      	ldr	r0, [r3, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1c1e0:	68af      	ldr	r7, [r5, #8]
   1c1e2:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c1e4:	f017 fa1d 	bl	33622 <bt_gatt_change_aware>
   1c1e8:	b328      	cbz	r0, 1c236 <att_write_cmd+0x6e>
	if (!handle) {
   1c1ea:	b336      	cbz	r6, 1c23a <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   1c1ec:	2214      	movs	r2, #20
   1c1ee:	2100      	movs	r1, #0
   1c1f0:	a801      	add	r0, sp, #4
   1c1f2:	f01b fae6 	bl	377c2 <memset>
	data.conn = chan->att->conn;
   1c1f6:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c1f8:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   1c1fa:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c1fc:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   1c1fe:	9300      	str	r3, [sp, #0]
	data.req = req;
   1c200:	2300      	movs	r3, #0
   1c202:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   1c206:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c20a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c20c:	4a0c      	ldr	r2, [pc, #48]	; (1c240 <att_write_cmd+0x78>)
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c20e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c212:	466b      	mov	r3, sp
	data.value = value;
   1c214:	9703      	str	r7, [sp, #12]
	data.len = len;
   1c216:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c21a:	f016 fcc2 	bl	32ba2 <bt_gatt_foreach_attr>
	if (data.err) {
   1c21e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1c222:	b92b      	cbnz	r3, 1c230 <att_write_cmd+0x68>
	if (data.buf) {
   1c224:	9901      	ldr	r1, [sp, #4]
   1c226:	b119      	cbz	r1, 1c230 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c228:	4620      	mov	r0, r4
   1c22a:	4a06      	ldr	r2, [pc, #24]	; (1c244 <att_write_cmd+0x7c>)
   1c22c:	f016 fd92 	bl	32d54 <bt_att_chan_send_rsp>
   1c230:	2000      	movs	r0, #0
}
   1c232:	b007      	add	sp, #28
   1c234:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c236:	2012      	movs	r0, #18
   1c238:	e7fb      	b.n	1c232 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c23a:	2001      	movs	r0, #1
   1c23c:	e7f9      	b.n	1c232 <att_write_cmd+0x6a>
   1c23e:	bf00      	nop
   1c240:	00032eef 	.word	0x00032eef
   1c244:	00032e2d 	.word	0x00032e2d

0001c248 <bt_att_chan_create_pdu>:
{
   1c248:	b538      	push	{r3, r4, r5, lr}
   1c24a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c24c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   1c250:	3201      	adds	r2, #1
   1c252:	428a      	cmp	r2, r1
   1c254:	d90c      	bls.n	1c270 <bt_att_chan_create_pdu+0x28>
   1c256:	481a      	ldr	r0, [pc, #104]	; (1c2c0 <bt_att_chan_create_pdu+0x78>)
   1c258:	4b1a      	ldr	r3, [pc, #104]	; (1c2c4 <bt_att_chan_create_pdu+0x7c>)
		return NULL;
   1c25a:	2400      	movs	r4, #0
   1c25c:	1a1b      	subs	r3, r3, r0
   1c25e:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1c260:	019b      	lsls	r3, r3, #6
   1c262:	4819      	ldr	r0, [pc, #100]	; (1c2c8 <bt_att_chan_create_pdu+0x80>)
   1c264:	f043 0302 	orr.w	r3, r3, #2
   1c268:	f014 f857 	bl	3031a <log_2>
}
   1c26c:	4620      	mov	r0, r4
   1c26e:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   1c270:	4628      	mov	r0, r5
   1c272:	f016 fc50 	bl	32b16 <att_op_get_type>
   1c276:	2802      	cmp	r0, #2
   1c278:	d001      	beq.n	1c27e <bt_att_chan_create_pdu+0x36>
   1c27a:	2804      	cmp	r0, #4
   1c27c:	d114      	bne.n	1c2a8 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1c27e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1c282:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1c284:	2100      	movs	r1, #0
   1c286:	4608      	mov	r0, r1
   1c288:	f016 fba5 	bl	329d6 <bt_l2cap_create_pdu_timeout>
   1c28c:	4604      	mov	r4, r0
	if (!buf) {
   1c28e:	b980      	cbnz	r0, 1c2b2 <bt_att_chan_create_pdu+0x6a>
   1c290:	4b0b      	ldr	r3, [pc, #44]	; (1c2c0 <bt_att_chan_create_pdu+0x78>)
   1c292:	4a0c      	ldr	r2, [pc, #48]	; (1c2c4 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1c294:	4629      	mov	r1, r5
   1c296:	1ad2      	subs	r2, r2, r3
   1c298:	08d2      	lsrs	r2, r2, #3
   1c29a:	0192      	lsls	r2, r2, #6
   1c29c:	480b      	ldr	r0, [pc, #44]	; (1c2cc <bt_att_chan_create_pdu+0x84>)
   1c29e:	f042 0201 	orr.w	r2, r2, #1
   1c2a2:	f014 f826 	bl	302f2 <log_1>
		return NULL;
   1c2a6:	e7e1      	b.n	1c26c <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1c2a8:	f04f 32ff 	mov.w	r2, #4294967295
   1c2ac:	f04f 33ff 	mov.w	r3, #4294967295
   1c2b0:	e7e8      	b.n	1c284 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   1c2b2:	2101      	movs	r1, #1
   1c2b4:	3008      	adds	r0, #8
   1c2b6:	f002 f827 	bl	1e308 <net_buf_simple_add>
	hdr->code = op;
   1c2ba:	7005      	strb	r5, [r0, #0]
	return buf;
   1c2bc:	e7d6      	b.n	1c26c <bt_att_chan_create_pdu+0x24>
   1c2be:	bf00      	nop
   1c2c0:	000387c0 	.word	0x000387c0
   1c2c4:	000387d8 	.word	0x000387d8
   1c2c8:	0003c8eb 	.word	0x0003c8eb
   1c2cc:	0003c604 	.word	0x0003c604

0001c2d0 <att_indicate>:
{
   1c2d0:	b570      	push	{r4, r5, r6, lr}
   1c2d2:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c2d4:	f101 0008 	add.w	r0, r1, #8
   1c2d8:	460d      	mov	r5, r1
   1c2da:	f017 fa07 	bl	336ec <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1c2de:	6826      	ldr	r6, [r4, #0]
   1c2e0:	4601      	mov	r1, r0
   1c2e2:	89ab      	ldrh	r3, [r5, #12]
   1c2e4:	68aa      	ldr	r2, [r5, #8]
   1c2e6:	6830      	ldr	r0, [r6, #0]
   1c2e8:	f017 f970 	bl	335cc <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   1c2ec:	211e      	movs	r1, #30
   1c2ee:	2200      	movs	r2, #0
   1c2f0:	4620      	mov	r0, r4
   1c2f2:	f7ff ffa9 	bl	1c248 <bt_att_chan_create_pdu>
	if (!buf) {
   1c2f6:	4601      	mov	r1, r0
   1c2f8:	b118      	cbz	r0, 1c302 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1c2fa:	4620      	mov	r0, r4
   1c2fc:	4a02      	ldr	r2, [pc, #8]	; (1c308 <att_indicate+0x38>)
   1c2fe:	f016 fd29 	bl	32d54 <bt_att_chan_send_rsp>
}
   1c302:	2000      	movs	r0, #0
   1c304:	bd70      	pop	{r4, r5, r6, pc}
   1c306:	bf00      	nop
   1c308:	00032e41 	.word	0x00032e41

0001c30c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c310:	4688      	mov	r8, r1
   1c312:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1c314:	2101      	movs	r1, #1
   1c316:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1c318:	4605      	mov	r5, r0
   1c31a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1c31c:	f7ff ff94 	bl	1c248 <bt_att_chan_create_pdu>
	if (!buf) {
   1c320:	4604      	mov	r4, r0
   1c322:	b178      	cbz	r0, 1c344 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1c324:	2104      	movs	r1, #4
   1c326:	3008      	adds	r0, #8
   1c328:	f001 ffee 	bl	1e308 <net_buf_simple_add>
	rsp->request = req;
   1c32c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1c330:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1c332:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1c336:	4621      	mov	r1, r4
   1c338:	4628      	mov	r0, r5
}
   1c33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1c33e:	4a02      	ldr	r2, [pc, #8]	; (1c348 <send_err_rsp.part.0+0x3c>)
   1c340:	f016 bd08 	b.w	32d54 <bt_att_chan_send_rsp>
}
   1c344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c348:	00032e2d 	.word	0x00032e2d

0001c34c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1c34c:	898b      	ldrh	r3, [r1, #12]
{
   1c34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c352:	4604      	mov	r4, r0
   1c354:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   1c356:	b963      	cbnz	r3, 1c372 <bt_att_recv+0x26>
   1c358:	4948      	ldr	r1, [pc, #288]	; (1c47c <bt_att_recv+0x130>)
   1c35a:	4b49      	ldr	r3, [pc, #292]	; (1c480 <bt_att_recv+0x134>)
		BT_ERR("Too small ATT PDU received");
   1c35c:	4849      	ldr	r0, [pc, #292]	; (1c484 <bt_att_recv+0x138>)
   1c35e:	1ac9      	subs	r1, r1, r3
   1c360:	08c9      	lsrs	r1, r1, #3
   1c362:	0189      	lsls	r1, r1, #6
   1c364:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   1c368:	f013 ffb6 	bl	302d8 <log_0>
}
   1c36c:	2000      	movs	r0, #0
   1c36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1c372:	2101      	movs	r1, #1
   1c374:	f108 0008 	add.w	r0, r8, #8
   1c378:	f001 ffa4 	bl	1e2c4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1c37c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1c380:	4605      	mov	r5, r0
   1c382:	2b00      	cmp	r3, #0
   1c384:	d0f2      	beq.n	1c36c <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   1c386:	4a40      	ldr	r2, [pc, #256]	; (1c488 <bt_att_recv+0x13c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c388:	2300      	movs	r3, #0
   1c38a:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1c38c:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1c38e:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   1c392:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1c396:	4288      	cmp	r0, r1
   1c398:	d119      	bne.n	1c3ce <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
   1c39a:	00d8      	lsls	r0, r3, #3
   1c39c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1c3a0:	789f      	ldrb	r7, [r3, #2]
   1c3a2:	2f01      	cmp	r7, #1
   1c3a4:	d12e      	bne.n	1c404 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c3a6:	34f0      	adds	r4, #240	; 0xf0
   1c3a8:	e8d4 3fef 	ldaex	r3, [r4]
   1c3ac:	f043 0201 	orr.w	r2, r3, #1
   1c3b0:	e8c4 2fe1 	stlex	r1, r2, [r4]
   1c3b4:	2900      	cmp	r1, #0
   1c3b6:	d1f7      	bne.n	1c3a8 <bt_att_recv+0x5c>
   1c3b8:	07da      	lsls	r2, r3, #31
   1c3ba:	d539      	bpl.n	1c430 <bt_att_recv+0xe4>
   1c3bc:	492f      	ldr	r1, [pc, #188]	; (1c47c <bt_att_recv+0x130>)
   1c3be:	4b30      	ldr	r3, [pc, #192]	; (1c480 <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected request");
   1c3c0:	4832      	ldr	r0, [pc, #200]	; (1c48c <bt_att_recv+0x140>)
   1c3c2:	1ac9      	subs	r1, r1, r3
   1c3c4:	08c9      	lsrs	r1, r1, #3
   1c3c6:	0189      	lsls	r1, r1, #6
   1c3c8:	f041 0102 	orr.w	r1, r1, #2
   1c3cc:	e7cc      	b.n	1c368 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c3ce:	3301      	adds	r3, #1
   1c3d0:	2b1c      	cmp	r3, #28
   1c3d2:	d1de      	bne.n	1c392 <bt_att_recv+0x46>
   1c3d4:	4b2a      	ldr	r3, [pc, #168]	; (1c480 <bt_att_recv+0x134>)
   1c3d6:	4a29      	ldr	r2, [pc, #164]	; (1c47c <bt_att_recv+0x130>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1c3d8:	482d      	ldr	r0, [pc, #180]	; (1c490 <bt_att_recv+0x144>)
   1c3da:	1ad2      	subs	r2, r2, r3
   1c3dc:	08d2      	lsrs	r2, r2, #3
   1c3de:	0192      	lsls	r2, r2, #6
   1c3e0:	f042 0202 	orr.w	r2, r2, #2
   1c3e4:	f013 ff85 	bl	302f2 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   1c3e8:	7829      	ldrb	r1, [r5, #0]
   1c3ea:	4608      	mov	r0, r1
   1c3ec:	f016 fb93 	bl	32b16 <att_op_get_type>
   1c3f0:	2800      	cmp	r0, #0
   1c3f2:	d0bb      	beq.n	1c36c <bt_att_recv+0x20>
	if (!req) {
   1c3f4:	2900      	cmp	r1, #0
   1c3f6:	d0b9      	beq.n	1c36c <bt_att_recv+0x20>
   1c3f8:	2306      	movs	r3, #6
   1c3fa:	2200      	movs	r2, #0
   1c3fc:	4630      	mov	r0, r6
   1c3fe:	f7ff ff85 	bl	1c30c <send_err_rsp.part.0>
   1c402:	e7b3      	b.n	1c36c <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   1c404:	2f05      	cmp	r7, #5
   1c406:	d113      	bne.n	1c430 <bt_att_recv+0xe4>
   1c408:	34f0      	adds	r4, #240	; 0xf0
   1c40a:	e8d4 3fef 	ldaex	r3, [r4]
   1c40e:	f043 0202 	orr.w	r2, r3, #2
   1c412:	e8c4 2fe1 	stlex	r1, r2, [r4]
   1c416:	2900      	cmp	r1, #0
   1c418:	d1f7      	bne.n	1c40a <bt_att_recv+0xbe>
   1c41a:	079b      	lsls	r3, r3, #30
   1c41c:	d508      	bpl.n	1c430 <bt_att_recv+0xe4>
   1c41e:	4917      	ldr	r1, [pc, #92]	; (1c47c <bt_att_recv+0x130>)
   1c420:	4b17      	ldr	r3, [pc, #92]	; (1c480 <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected indication");
   1c422:	481c      	ldr	r0, [pc, #112]	; (1c494 <bt_att_recv+0x148>)
   1c424:	1ac9      	subs	r1, r1, r3
   1c426:	08c9      	lsrs	r1, r1, #3
   1c428:	0189      	lsls	r1, r1, #6
   1c42a:	f041 0102 	orr.w	r1, r1, #2
   1c42e:	e79b      	b.n	1c368 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   1c430:	eb0c 0300 	add.w	r3, ip, r0
   1c434:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   1c438:	785a      	ldrb	r2, [r3, #1]
   1c43a:	428a      	cmp	r2, r1
   1c43c:	d90e      	bls.n	1c45c <bt_att_recv+0x110>
   1c43e:	4a10      	ldr	r2, [pc, #64]	; (1c480 <bt_att_recv+0x134>)
   1c440:	4b0e      	ldr	r3, [pc, #56]	; (1c47c <bt_att_recv+0x130>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c442:	4815      	ldr	r0, [pc, #84]	; (1c498 <bt_att_recv+0x14c>)
   1c444:	1a9b      	subs	r3, r3, r2
   1c446:	08db      	lsrs	r3, r3, #3
   1c448:	019b      	lsls	r3, r3, #6
   1c44a:	782a      	ldrb	r2, [r5, #0]
   1c44c:	f043 0301 	orr.w	r3, r3, #1
   1c450:	f013 ff63 	bl	3031a <log_2>
	if (handler->type == ATT_REQUEST && err) {
   1c454:	2f01      	cmp	r7, #1
   1c456:	d189      	bne.n	1c36c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   1c458:	2304      	movs	r3, #4
   1c45a:	e009      	b.n	1c470 <bt_att_recv+0x124>
		err = handler->func(att_chan, buf);
   1c45c:	685b      	ldr	r3, [r3, #4]
   1c45e:	4641      	mov	r1, r8
   1c460:	4630      	mov	r0, r6
   1c462:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1c464:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   1c466:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1c468:	d180      	bne.n	1c36c <bt_att_recv+0x20>
   1c46a:	2800      	cmp	r0, #0
   1c46c:	f43f af7e 	beq.w	1c36c <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1c470:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1c472:	2900      	cmp	r1, #0
   1c474:	f43f af7a 	beq.w	1c36c <bt_att_recv+0x20>
   1c478:	e7bf      	b.n	1c3fa <bt_att_recv+0xae>
   1c47a:	bf00      	nop
   1c47c:	000387d8 	.word	0x000387d8
   1c480:	000387c0 	.word	0x000387c0
   1c484:	0003c910 	.word	0x0003c910
   1c488:	00038eec 	.word	0x00038eec
   1c48c:	0003c92b 	.word	0x0003c92b
   1c490:	0003c985 	.word	0x0003c985
   1c494:	0003c947 	.word	0x0003c947
   1c498:	0003c966 	.word	0x0003c966

0001c49c <att_write_req>:
{
   1c49c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c4a0:	4604      	mov	r4, r0
   1c4a2:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1c4a4:	f101 0008 	add.w	r0, r1, #8
   1c4a8:	460d      	mov	r5, r1
   1c4aa:	f017 f91f 	bl	336ec <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c4ae:	6823      	ldr	r3, [r4, #0]
   1c4b0:	4606      	mov	r6, r0
   1c4b2:	2101      	movs	r1, #1
   1c4b4:	6818      	ldr	r0, [r3, #0]
			     handle, 0, buf->data, buf->len);
   1c4b6:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1c4ba:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c4bc:	f017 f8b1 	bl	33622 <bt_gatt_change_aware>
   1c4c0:	2800      	cmp	r0, #0
   1c4c2:	d040      	beq.n	1c546 <att_write_req+0xaa>
	if (!handle) {
   1c4c4:	2e00      	cmp	r6, #0
   1c4c6:	d040      	beq.n	1c54a <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   1c4c8:	2218      	movs	r2, #24
   1c4ca:	2100      	movs	r1, #0
   1c4cc:	4668      	mov	r0, sp
   1c4ce:	f01b f978 	bl	377c2 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1c4d2:	2200      	movs	r2, #0
   1c4d4:	2113      	movs	r1, #19
   1c4d6:	4620      	mov	r0, r4
   1c4d8:	f7ff feb6 	bl	1c248 <bt_att_chan_create_pdu>
   1c4dc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1c4de:	b380      	cbz	r0, 1c542 <att_write_req+0xa6>
	data.conn = chan->att->conn;
   1c4e0:	6823      	ldr	r3, [r4, #0]
	data.req = req;
   1c4e2:	f04f 0812 	mov.w	r8, #18
	data.conn = chan->att->conn;
   1c4e6:	681b      	ldr	r3, [r3, #0]
	data.offset = offset;
   1c4e8:	2700      	movs	r7, #0
	data.conn = chan->att->conn;
   1c4ea:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c4ec:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c4ee:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c4f0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c4f4:	4630      	mov	r0, r6
   1c4f6:	466b      	mov	r3, sp
   1c4f8:	4a15      	ldr	r2, [pc, #84]	; (1c550 <att_write_req+0xb4>)
	data.len = len;
   1c4fa:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   1c4fe:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   1c502:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   1c506:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c50a:	f016 fb4a 	bl	32ba2 <bt_gatt_foreach_attr>
	if (data.err) {
   1c50e:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1c512:	b175      	cbz	r5, 1c532 <att_write_req+0x96>
			net_buf_unref(data.buf);
   1c514:	9801      	ldr	r0, [sp, #4]
   1c516:	f001 fdc7 	bl	1e0a8 <net_buf_unref>
	if (!req) {
   1c51a:	4632      	mov	r2, r6
   1c51c:	4641      	mov	r1, r8
   1c51e:	4620      	mov	r0, r4
   1c520:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1c524:	f7ff fef2 	bl	1c30c <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1c528:	463d      	mov	r5, r7
}
   1c52a:	4628      	mov	r0, r5
   1c52c:	b007      	add	sp, #28
   1c52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   1c532:	9901      	ldr	r1, [sp, #4]
   1c534:	2900      	cmp	r1, #0
   1c536:	d0f8      	beq.n	1c52a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c538:	4620      	mov	r0, r4
   1c53a:	4a06      	ldr	r2, [pc, #24]	; (1c554 <att_write_req+0xb8>)
   1c53c:	f016 fc0a 	bl	32d54 <bt_att_chan_send_rsp>
   1c540:	e7f3      	b.n	1c52a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   1c542:	250e      	movs	r5, #14
   1c544:	e7f1      	b.n	1c52a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c546:	2512      	movs	r5, #18
   1c548:	e7ef      	b.n	1c52a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c54a:	2501      	movs	r5, #1
   1c54c:	e7ed      	b.n	1c52a <att_write_req+0x8e>
   1c54e:	bf00      	nop
   1c550:	00032eef 	.word	0x00032eef
   1c554:	00032e2d 	.word	0x00032e2d

0001c558 <bt_att_create_pdu>:
{
   1c558:	b570      	push	{r4, r5, r6, lr}
   1c55a:	460e      	mov	r6, r1
   1c55c:	4615      	mov	r5, r2
	att = att_get(conn);
   1c55e:	f7ff fd4d 	bl	1bffc <att_get>
	if (!att) {
   1c562:	b1c0      	cbz	r0, 1c596 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c564:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
   1c566:	1c69      	adds	r1, r5, #1
   1c568:	b15b      	cbz	r3, 1c582 <bt_att_create_pdu+0x2a>
   1c56a:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1c56e:	d008      	beq.n	1c582 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c570:	681b      	ldr	r3, [r3, #0]
   1c572:	b10b      	cbz	r3, 1c578 <bt_att_create_pdu+0x20>
   1c574:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c578:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
   1c57c:	4291      	cmp	r1, r2
   1c57e:	d90c      	bls.n	1c59a <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c580:	b98b      	cbnz	r3, 1c5a6 <bt_att_create_pdu+0x4e>
   1c582:	4a0e      	ldr	r2, [pc, #56]	; (1c5bc <bt_att_create_pdu+0x64>)
   1c584:	4b0e      	ldr	r3, [pc, #56]	; (1c5c0 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1c586:	480f      	ldr	r0, [pc, #60]	; (1c5c4 <bt_att_create_pdu+0x6c>)
   1c588:	1ad2      	subs	r2, r2, r3
   1c58a:	08d2      	lsrs	r2, r2, #3
   1c58c:	0192      	lsls	r2, r2, #6
   1c58e:	f042 0202 	orr.w	r2, r2, #2
   1c592:	f013 feae 	bl	302f2 <log_1>
}
   1c596:	2000      	movs	r0, #0
   1c598:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1c59a:	462a      	mov	r2, r5
   1c59c:	4631      	mov	r1, r6
}
   1c59e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1c5a2:	f7ff be51 	b.w	1c248 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c5a6:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   1c5aa:	d004      	beq.n	1c5b6 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c5ac:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c5b0:	b10c      	cbz	r4, 1c5b6 <bt_att_create_pdu+0x5e>
   1c5b2:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   1c5b6:	4618      	mov	r0, r3
   1c5b8:	4623      	mov	r3, r4
   1c5ba:	e7dd      	b.n	1c578 <bt_att_create_pdu+0x20>
   1c5bc:	000387d8 	.word	0x000387d8
   1c5c0:	000387c0 	.word	0x000387c0
   1c5c4:	0003c99f 	.word	0x0003c99f

0001c5c8 <att_read_group_req>:
{
   1c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1c5cc:	7b0c      	ldrb	r4, [r1, #12]
{
   1c5ce:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1c5d0:	3c04      	subs	r4, #4
   1c5d2:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1c5d4:	2c02      	cmp	r4, #2
{
   1c5d6:	4608      	mov	r0, r1
   1c5d8:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1c5da:	d001      	beq.n	1c5e0 <att_read_group_req+0x18>
   1c5dc:	2c10      	cmp	r4, #16
   1c5de:	d16f      	bne.n	1c6c0 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1c5e0:	2104      	movs	r1, #4
   1c5e2:	3008      	adds	r0, #8
   1c5e4:	f001 fe6e 	bl	1e2c4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c5e8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1c5ec:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1c5ee:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c5f0:	1d01      	adds	r1, r0, #4
   1c5f2:	4622      	mov	r2, r4
   1c5f4:	4640      	mov	r0, r8
   1c5f6:	f015 ff6b 	bl	324d0 <bt_uuid_create>
   1c5fa:	2800      	cmp	r0, #0
   1c5fc:	d062      	beq.n	1c6c4 <att_read_group_req+0xfc>
	if (!start || !end) {
   1c5fe:	2e00      	cmp	r6, #0
   1c600:	d03a      	beq.n	1c678 <att_read_group_req+0xb0>
   1c602:	2400      	movs	r4, #0
   1c604:	2f00      	cmp	r7, #0
   1c606:	d036      	beq.n	1c676 <att_read_group_req+0xae>
	if (start > end) {
   1c608:	42b7      	cmp	r7, r6
   1c60a:	d335      	bcc.n	1c678 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1c60c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c610:	4640      	mov	r0, r8
   1c612:	a901      	add	r1, sp, #4
   1c614:	f88d 4004 	strb.w	r4, [sp, #4]
   1c618:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c61c:	f015 ff2e 	bl	3247c <bt_uuid_cmp>
   1c620:	2800      	cmp	r0, #0
   1c622:	d134      	bne.n	1c68e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c624:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1c626:	2214      	movs	r2, #20
   1c628:	2100      	movs	r1, #0
   1c62a:	a807      	add	r0, sp, #28
   1c62c:	f01b f8c9 	bl	377c2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1c630:	2201      	movs	r2, #1
   1c632:	2111      	movs	r1, #17
   1c634:	4620      	mov	r0, r4
   1c636:	f7ff ff8f 	bl	1c558 <bt_att_create_pdu>
   1c63a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1c63c:	2800      	cmp	r0, #0
   1c63e:	d041      	beq.n	1c6c4 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   1c640:	2101      	movs	r1, #1
   1c642:	3008      	adds	r0, #8
	data.uuid = uuid;
   1c644:	e9cd 5807 	strd	r5, r8, [sp, #28]
   1c648:	f001 fe5e 	bl	1e308 <net_buf_simple_add>
	data.rsp->len = 0U;
   1c64c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1c650:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1c652:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1c654:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1c658:	4639      	mov	r1, r7
   1c65a:	4630      	mov	r0, r6
   1c65c:	4a1a      	ldr	r2, [pc, #104]	; (1c6c8 <att_read_group_req+0x100>)
	data.group = NULL;
   1c65e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1c662:	f016 fa9e 	bl	32ba2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1c666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c668:	781c      	ldrb	r4, [r3, #0]
   1c66a:	bb1c      	cbnz	r4, 1c6b4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   1c66c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1c66e:	f001 fd1b 	bl	1e0a8 <net_buf_unref>
	if (!req) {
   1c672:	230a      	movs	r3, #10
   1c674:	e018      	b.n	1c6a8 <att_read_group_req+0xe0>
			*err = 0U;
   1c676:	463e      	mov	r6, r7
	if (!req) {
   1c678:	2301      	movs	r3, #1
   1c67a:	4632      	mov	r2, r6
   1c67c:	2110      	movs	r1, #16
   1c67e:	4628      	mov	r0, r5
   1c680:	f7ff fe44 	bl	1c30c <send_err_rsp.part.0>
		return 0;
   1c684:	2400      	movs	r4, #0
}
   1c686:	4620      	mov	r0, r4
   1c688:	b00c      	add	sp, #48	; 0x30
   1c68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1c68e:	f642 0301 	movw	r3, #10241	; 0x2801
   1c692:	4640      	mov	r0, r8
   1c694:	a907      	add	r1, sp, #28
   1c696:	f88d 401c 	strb.w	r4, [sp, #28]
   1c69a:	f8ad 301e 	strh.w	r3, [sp, #30]
   1c69e:	f015 feed 	bl	3247c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1c6a2:	2800      	cmp	r0, #0
   1c6a4:	d0be      	beq.n	1c624 <att_read_group_req+0x5c>
	if (!req) {
   1c6a6:	2310      	movs	r3, #16
   1c6a8:	4632      	mov	r2, r6
   1c6aa:	2110      	movs	r1, #16
   1c6ac:	4628      	mov	r0, r5
   1c6ae:	f7ff fe2d 	bl	1c30c <send_err_rsp.part.0>
		return 0;
   1c6b2:	e7e8      	b.n	1c686 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c6b4:	4628      	mov	r0, r5
   1c6b6:	4a05      	ldr	r2, [pc, #20]	; (1c6cc <att_read_group_req+0x104>)
   1c6b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c6ba:	f016 fb4b 	bl	32d54 <bt_att_chan_send_rsp>
	return 0;
   1c6be:	e7e1      	b.n	1c684 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   1c6c0:	2404      	movs	r4, #4
   1c6c2:	e7e0      	b.n	1c686 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   1c6c4:	240e      	movs	r4, #14
   1c6c6:	e7de      	b.n	1c686 <att_read_group_req+0xbe>
   1c6c8:	0001bbd1 	.word	0x0001bbd1
   1c6cc:	00032e2d 	.word	0x00032e2d

0001c6d0 <att_read_mult_req>:
{
   1c6d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1c6d4:	6886      	ldr	r6, [r0, #8]
{
   1c6d6:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   1c6d8:	2210      	movs	r2, #16
{
   1c6da:	4604      	mov	r4, r0
   1c6dc:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   1c6de:	4668      	mov	r0, sp
   1c6e0:	2100      	movs	r1, #0
   1c6e2:	f01b f86e 	bl	377c2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1c6e6:	2200      	movs	r2, #0
   1c6e8:	210f      	movs	r1, #15
   1c6ea:	4630      	mov	r0, r6
   1c6ec:	f7ff ff34 	bl	1c558 <bt_att_create_pdu>
   1c6f0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1c6f2:	b360      	cbz	r0, 1c74e <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c6f4:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c6f8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1c758 <att_read_mult_req+0x88>
	data.chan = chan;
   1c6fc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1c6fe:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   1c702:	89ab      	ldrh	r3, [r5, #12]
   1c704:	2b01      	cmp	r3, #1
   1c706:	d805      	bhi.n	1c714 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c708:	4620      	mov	r0, r4
   1c70a:	4a12      	ldr	r2, [pc, #72]	; (1c754 <att_read_mult_req+0x84>)
   1c70c:	9902      	ldr	r1, [sp, #8]
   1c70e:	f016 fb21 	bl	32d54 <bt_att_chan_send_rsp>
   1c712:	e018      	b.n	1c746 <att_read_mult_req+0x76>
   1c714:	4638      	mov	r0, r7
   1c716:	f016 ffe9 	bl	336ec <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c71a:	466b      	mov	r3, sp
   1c71c:	464a      	mov	r2, r9
   1c71e:	4601      	mov	r1, r0
   1c720:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c722:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c726:	f016 fa3c 	bl	32ba2 <bt_gatt_foreach_attr>
		if (data.err) {
   1c72a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c72e:	2b00      	cmp	r3, #0
   1c730:	d0e7      	beq.n	1c702 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   1c732:	9802      	ldr	r0, [sp, #8]
   1c734:	f001 fcb8 	bl	1e0a8 <net_buf_unref>
	if (!req) {
   1c738:	4632      	mov	r2, r6
   1c73a:	210e      	movs	r1, #14
   1c73c:	4620      	mov	r0, r4
   1c73e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c742:	f7ff fde3 	bl	1c30c <send_err_rsp.part.0>
	return 0;
   1c746:	2000      	movs	r0, #0
}
   1c748:	b005      	add	sp, #20
   1c74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   1c74e:	200e      	movs	r0, #14
   1c750:	e7fa      	b.n	1c748 <att_read_mult_req+0x78>
   1c752:	bf00      	nop
   1c754:	00032e2d 	.word	0x00032e2d
   1c758:	00032fbd 	.word	0x00032fbd

0001c75c <att_read_rsp>:
{
   1c75c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1c760:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   1c764:	4605      	mov	r5, r0
   1c766:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1c768:	4640      	mov	r0, r8
   1c76a:	2101      	movs	r1, #1
{
   1c76c:	4614      	mov	r4, r2
   1c76e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1c770:	f016 ff57 	bl	33622 <bt_gatt_change_aware>
   1c774:	b390      	cbz	r0, 1c7dc <att_read_rsp+0x80>
	if (!handle) {
   1c776:	b39e      	cbz	r6, 1c7e0 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   1c778:	2210      	movs	r2, #16
   1c77a:	2100      	movs	r1, #0
   1c77c:	4668      	mov	r0, sp
   1c77e:	f01b f820 	bl	377c2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1c782:	2200      	movs	r2, #0
   1c784:	4621      	mov	r1, r4
   1c786:	4640      	mov	r0, r8
   1c788:	f7ff fee6 	bl	1c558 <bt_att_create_pdu>
   1c78c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1c78e:	b348      	cbz	r0, 1c7e4 <att_read_rsp+0x88>
	data.offset = offset;
   1c790:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c794:	4631      	mov	r1, r6
	data.offset = offset;
   1c796:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c79a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c79c:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c79e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c7a2:	4a11      	ldr	r2, [pc, #68]	; (1c7e8 <att_read_rsp+0x8c>)
   1c7a4:	466b      	mov	r3, sp
	data.chan = chan;
   1c7a6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c7a8:	f016 f9fb 	bl	32ba2 <bt_gatt_foreach_attr>
	if (data.err) {
   1c7ac:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1c7b0:	b174      	cbz	r4, 1c7d0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1c7b2:	9802      	ldr	r0, [sp, #8]
   1c7b4:	f001 fc78 	bl	1e0a8 <net_buf_unref>
	if (!req) {
   1c7b8:	4632      	mov	r2, r6
   1c7ba:	4639      	mov	r1, r7
   1c7bc:	4628      	mov	r0, r5
   1c7be:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c7c2:	f7ff fda3 	bl	1c30c <send_err_rsp.part.0>
		return 0;
   1c7c6:	2400      	movs	r4, #0
}
   1c7c8:	4620      	mov	r0, r4
   1c7ca:	b004      	add	sp, #16
   1c7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c7d0:	4628      	mov	r0, r5
   1c7d2:	4a06      	ldr	r2, [pc, #24]	; (1c7ec <att_read_rsp+0x90>)
   1c7d4:	9902      	ldr	r1, [sp, #8]
   1c7d6:	f016 fabd 	bl	32d54 <bt_att_chan_send_rsp>
	return 0;
   1c7da:	e7f5      	b.n	1c7c8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c7dc:	2412      	movs	r4, #18
   1c7de:	e7f3      	b.n	1c7c8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c7e0:	2401      	movs	r4, #1
   1c7e2:	e7f1      	b.n	1c7c8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1c7e4:	240e      	movs	r4, #14
   1c7e6:	e7ef      	b.n	1c7c8 <att_read_rsp+0x6c>
   1c7e8:	00032fbd 	.word	0x00032fbd
   1c7ec:	00032e2d 	.word	0x00032e2d

0001c7f0 <att_read_type_req>:
{
   1c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1c7f4:	7b0c      	ldrb	r4, [r1, #12]
{
   1c7f6:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1c7f8:	3c04      	subs	r4, #4
   1c7fa:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1c7fc:	2c02      	cmp	r4, #2
{
   1c7fe:	4608      	mov	r0, r1
   1c800:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1c802:	d001      	beq.n	1c808 <att_read_type_req+0x18>
   1c804:	2c10      	cmp	r4, #16
   1c806:	d150      	bne.n	1c8aa <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1c808:	2104      	movs	r1, #4
   1c80a:	3008      	adds	r0, #8
   1c80c:	f001 fd5a 	bl	1e2c4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c810:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1c814:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1c816:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c818:	1d01      	adds	r1, r0, #4
   1c81a:	4622      	mov	r2, r4
   1c81c:	4640      	mov	r0, r8
   1c81e:	f015 fe57 	bl	324d0 <bt_uuid_create>
   1c822:	b188      	cbz	r0, 1c848 <att_read_type_req+0x58>
	if (!start || !end) {
   1c824:	b19e      	cbz	r6, 1c84e <att_read_type_req+0x5e>
   1c826:	b18f      	cbz	r7, 1c84c <att_read_type_req+0x5c>
	if (start > end) {
   1c828:	42be      	cmp	r6, r7
   1c82a:	d810      	bhi.n	1c84e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1c82c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1c82e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1c830:	2100      	movs	r1, #0
   1c832:	eb0d 0002 	add.w	r0, sp, r2
   1c836:	f01a ffc4 	bl	377c2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1c83a:	2201      	movs	r2, #1
   1c83c:	2109      	movs	r1, #9
   1c83e:	4620      	mov	r0, r4
   1c840:	f7ff fe8a 	bl	1c558 <bt_att_create_pdu>
   1c844:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1c846:	b968      	cbnz	r0, 1c864 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   1c848:	240e      	movs	r4, #14
   1c84a:	e007      	b.n	1c85c <att_read_type_req+0x6c>
			*err = 0U;
   1c84c:	463e      	mov	r6, r7
	if (!req) {
   1c84e:	2301      	movs	r3, #1
   1c850:	4632      	mov	r2, r6
   1c852:	2108      	movs	r1, #8
   1c854:	4628      	mov	r0, r5
   1c856:	f7ff fd59 	bl	1c30c <send_err_rsp.part.0>
		return 0;
   1c85a:	2400      	movs	r4, #0
}
   1c85c:	4620      	mov	r0, r4
   1c85e:	b00c      	add	sp, #48	; 0x30
   1c860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1c864:	2101      	movs	r1, #1
   1c866:	3008      	adds	r0, #8
	data.uuid = uuid;
   1c868:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1c86c:	f001 fd4c 	bl	1e308 <net_buf_simple_add>
	data.rsp->len = 0U;
   1c870:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1c874:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1c876:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1c878:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1c87a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1c87e:	4a0c      	ldr	r2, [pc, #48]	; (1c8b0 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1c880:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1c884:	4630      	mov	r0, r6
   1c886:	ab06      	add	r3, sp, #24
   1c888:	f016 f98b 	bl	32ba2 <bt_gatt_foreach_attr>
	if (data.err) {
   1c88c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   1c890:	b12c      	cbz	r4, 1c89e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1c892:	9808      	ldr	r0, [sp, #32]
   1c894:	f001 fc08 	bl	1e0a8 <net_buf_unref>
	if (!req) {
   1c898:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1c89c:	e7d8      	b.n	1c850 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c89e:	4628      	mov	r0, r5
   1c8a0:	4a04      	ldr	r2, [pc, #16]	; (1c8b4 <att_read_type_req+0xc4>)
   1c8a2:	9908      	ldr	r1, [sp, #32]
   1c8a4:	f016 fa56 	bl	32d54 <bt_att_chan_send_rsp>
	return 0;
   1c8a8:	e7d8      	b.n	1c85c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1c8aa:	2404      	movs	r4, #4
   1c8ac:	e7d6      	b.n	1c85c <att_read_type_req+0x6c>
   1c8ae:	bf00      	nop
   1c8b0:	0001bc7d 	.word	0x0001bc7d
   1c8b4:	00032e2d 	.word	0x00032e2d

0001c8b8 <att_find_type_req>:
{
   1c8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c8bc:	4688      	mov	r8, r1
   1c8be:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1c8c0:	2106      	movs	r1, #6
   1c8c2:	b086      	sub	sp, #24
   1c8c4:	f108 0008 	add.w	r0, r8, #8
   1c8c8:	f001 fcfc 	bl	1e2c4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1c8cc:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1c8ce:	b317      	cbz	r7, 1c916 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1c8d0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1c8d4:	f1b9 0f00 	cmp.w	r9, #0
   1c8d8:	d01c      	beq.n	1c914 <att_find_type_req+0x5c>
	if (start > end) {
   1c8da:	45b9      	cmp	r9, r7
   1c8dc:	d31b      	bcc.n	1c916 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1c8de:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1c8e0:	2400      	movs	r4, #0
   1c8e2:	f8ad 3002 	strh.w	r3, [sp, #2]
   1c8e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c8ea:	4668      	mov	r0, sp
   1c8ec:	a901      	add	r1, sp, #4
	value = buf->data;
   1c8ee:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1c8f2:	f88d 4000 	strb.w	r4, [sp]
   1c8f6:	f88d 4004 	strb.w	r4, [sp, #4]
   1c8fa:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c8fe:	f015 fdbd 	bl	3247c <bt_uuid_cmp>
   1c902:	4606      	mov	r6, r0
   1c904:	b190      	cbz	r0, 1c92c <att_find_type_req+0x74>
	if (!req) {
   1c906:	230a      	movs	r3, #10
   1c908:	463a      	mov	r2, r7
   1c90a:	2106      	movs	r1, #6
   1c90c:	4628      	mov	r0, r5
   1c90e:	f7ff fcfd 	bl	1c30c <send_err_rsp.part.0>
		return 0;
   1c912:	e007      	b.n	1c924 <att_find_type_req+0x6c>
			*err = 0U;
   1c914:	464f      	mov	r7, r9
	if (!req) {
   1c916:	2301      	movs	r3, #1
   1c918:	463a      	mov	r2, r7
   1c91a:	2106      	movs	r1, #6
   1c91c:	4628      	mov	r0, r5
   1c91e:	f7ff fcf5 	bl	1c30c <send_err_rsp.part.0>
		return 0;
   1c922:	2400      	movs	r4, #0
}
   1c924:	4620      	mov	r0, r4
   1c926:	b006      	add	sp, #24
   1c928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1c92c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c930:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1c934:	4601      	mov	r1, r0
   1c936:	2214      	movs	r2, #20
   1c938:	a801      	add	r0, sp, #4
   1c93a:	f01a ff42 	bl	377c2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1c93e:	4632      	mov	r2, r6
   1c940:	2107      	movs	r1, #7
   1c942:	4640      	mov	r0, r8
   1c944:	f7ff fe08 	bl	1c558 <bt_att_create_pdu>
   1c948:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1c94a:	b1e0      	cbz	r0, 1c986 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1c94c:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1c94e:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1c950:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1c954:	4638      	mov	r0, r7
   1c956:	4a0d      	ldr	r2, [pc, #52]	; (1c98c <att_find_type_req+0xd4>)
   1c958:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   1c95a:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   1c95e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1c962:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1c964:	f016 f91d 	bl	32ba2 <bt_gatt_foreach_attr>
	if (data.err) {
   1c968:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1c96c:	b12c      	cbz	r4, 1c97a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1c96e:	9802      	ldr	r0, [sp, #8]
   1c970:	f001 fb9a 	bl	1e0a8 <net_buf_unref>
	if (!req) {
   1c974:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1c978:	e7ce      	b.n	1c918 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c97a:	4628      	mov	r0, r5
   1c97c:	4a04      	ldr	r2, [pc, #16]	; (1c990 <att_find_type_req+0xd8>)
   1c97e:	9902      	ldr	r1, [sp, #8]
   1c980:	f016 f9e8 	bl	32d54 <bt_att_chan_send_rsp>
	return 0;
   1c984:	e7ce      	b.n	1c924 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1c986:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1c988:	e7cc      	b.n	1c924 <att_find_type_req+0x6c>
   1c98a:	bf00      	nop
   1c98c:	0001bd25 	.word	0x0001bd25
   1c990:	00032e2d 	.word	0x00032e2d

0001c994 <att_find_info_req>:
{
   1c994:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1c996:	688b      	ldr	r3, [r1, #8]
{
   1c998:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1c99a:	881e      	ldrh	r6, [r3, #0]
{
   1c99c:	b085      	sub	sp, #20
	if (!start || !end) {
   1c99e:	b19e      	cbz	r6, 1c9c8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1c9a0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1c9a2:	b184      	cbz	r4, 1c9c6 <att_find_info_req+0x32>
	if (start > end) {
   1c9a4:	42a6      	cmp	r6, r4
   1c9a6:	d80f      	bhi.n	1c9c8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c9a8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1c9aa:	2210      	movs	r2, #16
   1c9ac:	2100      	movs	r1, #0
   1c9ae:	4668      	mov	r0, sp
   1c9b0:	f01a ff07 	bl	377c2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1c9b4:	2200      	movs	r2, #0
   1c9b6:	2105      	movs	r1, #5
   1c9b8:	4638      	mov	r0, r7
   1c9ba:	f7ff fdcd 	bl	1c558 <bt_att_create_pdu>
   1c9be:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1c9c0:	b958      	cbnz	r0, 1c9da <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1c9c2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1c9c4:	e007      	b.n	1c9d6 <att_find_info_req+0x42>
			*err = 0U;
   1c9c6:	4626      	mov	r6, r4
	if (!req) {
   1c9c8:	2301      	movs	r3, #1
   1c9ca:	4632      	mov	r2, r6
   1c9cc:	2104      	movs	r1, #4
   1c9ce:	4628      	mov	r0, r5
   1c9d0:	f7ff fc9c 	bl	1c30c <send_err_rsp.part.0>
	return 0;
   1c9d4:	2000      	movs	r0, #0
}
   1c9d6:	b005      	add	sp, #20
   1c9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1c9da:	4621      	mov	r1, r4
   1c9dc:	466b      	mov	r3, sp
   1c9de:	4630      	mov	r0, r6
   1c9e0:	4a08      	ldr	r2, [pc, #32]	; (1ca04 <att_find_info_req+0x70>)
	data.chan = chan;
   1c9e2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1c9e4:	f016 f8dd 	bl	32ba2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1c9e8:	9c02      	ldr	r4, [sp, #8]
   1c9ea:	b924      	cbnz	r4, 1c9f6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   1c9ec:	9801      	ldr	r0, [sp, #4]
   1c9ee:	f001 fb5b 	bl	1e0a8 <net_buf_unref>
	if (!req) {
   1c9f2:	230a      	movs	r3, #10
   1c9f4:	e7e9      	b.n	1c9ca <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c9f6:	4628      	mov	r0, r5
   1c9f8:	4a03      	ldr	r2, [pc, #12]	; (1ca08 <att_find_info_req+0x74>)
   1c9fa:	9901      	ldr	r1, [sp, #4]
   1c9fc:	f016 f9aa 	bl	32d54 <bt_att_chan_send_rsp>
   1ca00:	e7e8      	b.n	1c9d4 <att_find_info_req+0x40>
   1ca02:	bf00      	nop
   1ca04:	00032d87 	.word	0x00032d87
   1ca08:	00032e2d 	.word	0x00032e2d

0001ca0c <att_mtu_req>:
{
   1ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1ca0e:	4603      	mov	r3, r0
   1ca10:	f853 2bf8 	ldr.w	r2, [r3], #248
{
   1ca14:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1ca16:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ca18:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1ca1c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1ca20:	071b      	lsls	r3, r3, #28
   1ca22:	d41b      	bmi.n	1ca5c <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1ca24:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1ca26:	881b      	ldrh	r3, [r3, #0]
   1ca28:	2b16      	cmp	r3, #22
   1ca2a:	d919      	bls.n	1ca60 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1ca2c:	2202      	movs	r2, #2
   1ca2e:	2103      	movs	r1, #3
   1ca30:	f7ff fd92 	bl	1c558 <bt_att_create_pdu>
	if (!pdu) {
   1ca34:	4606      	mov	r6, r0
   1ca36:	b1a8      	cbz	r0, 1ca64 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   1ca38:	2102      	movs	r1, #2
   1ca3a:	3008      	adds	r0, #8
   1ca3c:	f001 fc64 	bl	1e308 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1ca40:	2717      	movs	r7, #23
   1ca42:	7044      	strb	r4, [r0, #1]
   1ca44:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1ca46:	4631      	mov	r1, r6
   1ca48:	4628      	mov	r0, r5
   1ca4a:	4a07      	ldr	r2, [pc, #28]	; (1ca68 <att_mtu_req+0x5c>)
   1ca4c:	f016 f982 	bl	32d54 <bt_att_chan_send_rsp>
	return 0;
   1ca50:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1ca52:	f8a5 707a 	strh.w	r7, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1ca56:	f8a5 7086 	strh.w	r7, [r5, #134]	; 0x86
}
   1ca5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1ca5c:	2006      	movs	r0, #6
   1ca5e:	e7fc      	b.n	1ca5a <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   1ca60:	2004      	movs	r0, #4
   1ca62:	e7fa      	b.n	1ca5a <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   1ca64:	200e      	movs	r0, #14
   1ca66:	e7f8      	b.n	1ca5a <att_mtu_req+0x4e>
   1ca68:	00032e2d 	.word	0x00032e2d

0001ca6c <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1ca6c:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   1ca6e:	2400      	movs	r4, #0
{
   1ca70:	4602      	mov	r2, r0
   1ca72:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1ca74:	4807      	ldr	r0, [pc, #28]	; (1ca94 <bt_att_req_alloc+0x28>)
   1ca76:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   1ca78:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1ca7a:	f00d fcbd 	bl	2a3f8 <k_mem_slab_alloc>
   1ca7e:	4601      	mov	r1, r0
   1ca80:	b930      	cbnz	r0, 1ca90 <bt_att_req_alloc+0x24>
   1ca82:	2210      	movs	r2, #16
   1ca84:	9801      	ldr	r0, [sp, #4]
   1ca86:	f01a fe9c 	bl	377c2 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   1ca8a:	9801      	ldr	r0, [sp, #4]
}
   1ca8c:	b002      	add	sp, #8
   1ca8e:	bd10      	pop	{r4, pc}
		return NULL;
   1ca90:	4620      	mov	r0, r4
   1ca92:	e7fb      	b.n	1ca8c <bt_att_req_alloc+0x20>
   1ca94:	20014e20 	.word	0x20014e20

0001ca98 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1ca98:	b507      	push	{r0, r1, r2, lr}
   1ca9a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1ca9c:	6880      	ldr	r0, [r0, #8]
   1ca9e:	b120      	cbz	r0, 1caaa <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   1caa0:	f001 fb02 	bl	1e0a8 <net_buf_unref>
		req->buf = NULL;
   1caa4:	2200      	movs	r2, #0
   1caa6:	9b01      	ldr	r3, [sp, #4]
   1caa8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1caaa:	4803      	ldr	r0, [pc, #12]	; (1cab8 <bt_att_req_free+0x20>)
   1caac:	a901      	add	r1, sp, #4
   1caae:	f00d fd0f 	bl	2a4d0 <k_mem_slab_free>
}
   1cab2:	b003      	add	sp, #12
   1cab4:	f85d fb04 	ldr.w	pc, [sp], #4
   1cab8:	20014e20 	.word	0x20014e20

0001cabc <att_handle_rsp>:
{
   1cabc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cac0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1cac2:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   1cac6:	460f      	mov	r7, r1
   1cac8:	4690      	mov	r8, r2
   1caca:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1cacc:	f00f f89a 	bl	2bc04 <k_work_cancel_delayable>
	if (!chan->req) {
   1cad0:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
   1cad4:	b9e5      	cbnz	r5, 1cb10 <att_handle_rsp+0x54>
   1cad6:	4919      	ldr	r1, [pc, #100]	; (1cb3c <att_handle_rsp+0x80>)
   1cad8:	4819      	ldr	r0, [pc, #100]	; (1cb40 <att_handle_rsp+0x84>)
	bt_att_func_t func = NULL;
   1cada:	46aa      	mov	sl, r5
   1cadc:	1a40      	subs	r0, r0, r1
   1cade:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   1cae0:	0180      	lsls	r0, r0, #6
   1cae2:	f040 0102 	orr.w	r1, r0, #2
   1cae6:	4817      	ldr	r0, [pc, #92]	; (1cb44 <att_handle_rsp+0x88>)
   1cae8:	f013 fbf6 	bl	302d8 <log_0>
	att_req_send_process(chan->att);
   1caec:	6820      	ldr	r0, [r4, #0]
   1caee:	f016 f9d2 	bl	32e96 <att_req_send_process>
	if (func) {
   1caf2:	f1ba 0f00 	cmp.w	sl, #0
   1caf6:	d007      	beq.n	1cb08 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   1caf8:	6820      	ldr	r0, [r4, #0]
   1cafa:	f8cd 9000 	str.w	r9, [sp]
   1cafe:	4643      	mov	r3, r8
   1cb00:	463a      	mov	r2, r7
   1cb02:	4631      	mov	r1, r6
   1cb04:	6800      	ldr	r0, [r0, #0]
   1cb06:	47d0      	blx	sl
}
   1cb08:	2000      	movs	r0, #0
   1cb0a:	b003      	add	sp, #12
   1cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1cb10:	4b0d      	ldr	r3, [pc, #52]	; (1cb48 <att_handle_rsp+0x8c>)
   1cb12:	f04f 0b00 	mov.w	fp, #0
   1cb16:	429d      	cmp	r5, r3
   1cb18:	d103      	bne.n	1cb22 <att_handle_rsp+0x66>
	bt_att_func_t func = NULL;
   1cb1a:	46da      	mov	sl, fp
		chan->req = NULL;
   1cb1c:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
		goto process;
   1cb20:	e7e4      	b.n	1caec <att_handle_rsp+0x30>
	func = chan->req->func;
   1cb22:	f8d5 a004 	ldr.w	sl, [r5, #4]
	bt_att_req_free(chan->req);
   1cb26:	4628      	mov	r0, r5
	chan->req->func = NULL;
   1cb28:	f8c5 b004 	str.w	fp, [r5, #4]
	params = chan->req->user_data;
   1cb2c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	bt_att_req_free(chan->req);
   1cb30:	f7ff ffb2 	bl	1ca98 <bt_att_req_free>
	chan->req = NULL;
   1cb34:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
   1cb38:	e7d8      	b.n	1caec <att_handle_rsp+0x30>
   1cb3a:	bf00      	nop
   1cb3c:	000387c0 	.word	0x000387c0
   1cb40:	000387d8 	.word	0x000387d8
   1cb44:	0003c9ba 	.word	0x0003c9ba
   1cb48:	2001629c 	.word	0x2001629c

0001cb4c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   1cb4c:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1cb50:	b143      	cbz	r3, 1cb64 <att_error_rsp+0x18>
   1cb52:	4a05      	ldr	r2, [pc, #20]	; (1cb68 <att_error_rsp+0x1c>)
   1cb54:	4293      	cmp	r3, r2
   1cb56:	d005      	beq.n	1cb64 <att_error_rsp+0x18>
	err = rsp->error;
   1cb58:	688b      	ldr	r3, [r1, #8]
   1cb5a:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   1cb5c:	2200      	movs	r2, #0
   1cb5e:	4611      	mov	r1, r2
   1cb60:	f7ff bfac 	b.w	1cabc <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   1cb64:	230e      	movs	r3, #14
   1cb66:	e7f9      	b.n	1cb5c <att_error_rsp+0x10>
   1cb68:	2001629c 	.word	0x2001629c

0001cb6c <bt_att_disconnected>:
{
   1cb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1cb6e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1cb72:	4604      	mov	r4, r0
   1cb74:	b085      	sub	sp, #20
	if (!att_chan->att) {
   1cb76:	b385      	cbz	r5, 1cbda <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1cb78:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   1cb7c:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1cb80:	f015 ff8e 	bl	32aa0 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1cb84:	f1a4 0608 	sub.w	r6, r4, #8
   1cb88:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   1cb8c:	2200      	movs	r2, #0
   1cb8e:	2300      	movs	r3, #0
   1cb90:	4638      	mov	r0, r7
   1cb92:	f001 f9f7 	bl	1df84 <net_buf_get>
   1cb96:	4602      	mov	r2, r0
   1cb98:	bb08      	cbnz	r0, 1cbde <bt_att_disconnected+0x72>
	if (chan->req) {
   1cb9a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1cb9e:	b123      	cbz	r3, 1cbaa <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1cba0:	4601      	mov	r1, r0
   1cba2:	230e      	movs	r3, #14
   1cba4:	4630      	mov	r0, r6
   1cba6:	f7ff ff89 	bl	1cabc <att_handle_rsp>
	chan->att = NULL;
   1cbaa:	2300      	movs	r3, #0
   1cbac:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   1cbb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cbb2:	b993      	cbnz	r3, 1cbda <bt_att_disconnected+0x6e>
	att_reset(att);
   1cbb4:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1cbb6:	9803      	ldr	r0, [sp, #12]
   1cbb8:	2200      	movs	r2, #0
   1cbba:	2300      	movs	r3, #0
   1cbbc:	300c      	adds	r0, #12
   1cbbe:	f001 f9e1 	bl	1df84 <net_buf_get>
   1cbc2:	b978      	cbnz	r0, 1cbe4 <bt_att_disconnected+0x78>
	att->conn = NULL;
   1cbc4:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1cbc6:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   1cbc8:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1cbca:	b976      	cbnz	r6, 1cbea <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   1cbcc:	4813      	ldr	r0, [pc, #76]	; (1cc1c <bt_att_disconnected+0xb0>)
   1cbce:	a903      	add	r1, sp, #12
   1cbd0:	f00d fc7e 	bl	2a4d0 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1cbd4:	6820      	ldr	r0, [r4, #0]
   1cbd6:	f001 f83f 	bl	1dc58 <bt_gatt_disconnected>
}
   1cbda:	b005      	add	sp, #20
   1cbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1cbde:	f001 fa63 	bl	1e0a8 <net_buf_unref>
   1cbe2:	e7d3      	b.n	1cb8c <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   1cbe4:	f001 fa60 	bl	1e0a8 <net_buf_unref>
   1cbe8:	e7e5      	b.n	1cbb6 <bt_att_disconnected+0x4a>
	return node->next;
   1cbea:	6835      	ldr	r5, [r6, #0]
   1cbec:	2d00      	cmp	r5, #0
   1cbee:	bf38      	it	cc
   1cbf0:	2500      	movcc	r5, #0
		if (req->func) {
   1cbf2:	6877      	ldr	r7, [r6, #4]
   1cbf4:	b137      	cbz	r7, 1cc04 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1cbf6:	68f3      	ldr	r3, [r6, #12]
   1cbf8:	210e      	movs	r1, #14
   1cbfa:	9300      	str	r3, [sp, #0]
   1cbfc:	2300      	movs	r3, #0
   1cbfe:	461a      	mov	r2, r3
   1cc00:	4618      	mov	r0, r3
   1cc02:	47b8      	blx	r7
		bt_att_req_free(req);
   1cc04:	4630      	mov	r0, r6
   1cc06:	f7ff ff47 	bl	1ca98 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1cc0a:	2d00      	cmp	r5, #0
   1cc0c:	d0de      	beq.n	1cbcc <bt_att_disconnected+0x60>
   1cc0e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cc10:	462e      	mov	r6, r5
   1cc12:	2b00      	cmp	r3, #0
   1cc14:	bf38      	it	cc
   1cc16:	2300      	movcc	r3, #0
   1cc18:	461d      	mov	r5, r3
   1cc1a:	e7ea      	b.n	1cbf2 <bt_att_disconnected+0x86>
   1cc1c:	20014de0 	.word	0x20014de0

0001cc20 <att_timeout>:
{
   1cc20:	b510      	push	{r4, lr}
   1cc22:	4604      	mov	r4, r0
   1cc24:	4b07      	ldr	r3, [pc, #28]	; (1cc44 <att_timeout+0x24>)
   1cc26:	4908      	ldr	r1, [pc, #32]	; (1cc48 <att_timeout+0x28>)
	BT_ERR("ATT Timeout");
   1cc28:	4808      	ldr	r0, [pc, #32]	; (1cc4c <att_timeout+0x2c>)
   1cc2a:	1ac9      	subs	r1, r1, r3
   1cc2c:	08c9      	lsrs	r1, r1, #3
   1cc2e:	0189      	lsls	r1, r1, #6
   1cc30:	f041 0101 	orr.w	r1, r1, #1
   1cc34:	f013 fb50 	bl	302d8 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   1cc38:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
}
   1cc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1cc40:	f7ff bf94 	b.w	1cb6c <bt_att_disconnected>
   1cc44:	000387c0 	.word	0x000387c0
   1cc48:	000387d8 	.word	0x000387d8
   1cc4c:	0003c9d1 	.word	0x0003c9d1

0001cc50 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1cc50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cc54:	460c      	mov	r4, r1
   1cc56:	4617      	mov	r7, r2
   1cc58:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1cc5a:	4605      	mov	r5, r0
   1cc5c:	b958      	cbnz	r0, 1cc76 <bt_att_send+0x26>
   1cc5e:	492f      	ldr	r1, [pc, #188]	; (1cd1c <bt_att_send+0xcc>)
   1cc60:	482f      	ldr	r0, [pc, #188]	; (1cd20 <bt_att_send+0xd0>)
   1cc62:	f640 33ae 	movw	r3, #2990	; 0xbae
   1cc66:	4a2f      	ldr	r2, [pc, #188]	; (1cd24 <bt_att_send+0xd4>)
   1cc68:	f013 f802 	bl	2fc70 <printk>
   1cc6c:	f640 31ae 	movw	r1, #2990	; 0xbae
   1cc70:	482c      	ldr	r0, [pc, #176]	; (1cd24 <bt_att_send+0xd4>)
   1cc72:	f013 fae3 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1cc76:	b95c      	cbnz	r4, 1cc90 <bt_att_send+0x40>
   1cc78:	492b      	ldr	r1, [pc, #172]	; (1cd28 <bt_att_send+0xd8>)
   1cc7a:	4829      	ldr	r0, [pc, #164]	; (1cd20 <bt_att_send+0xd0>)
   1cc7c:	f640 33af 	movw	r3, #2991	; 0xbaf
   1cc80:	4a28      	ldr	r2, [pc, #160]	; (1cd24 <bt_att_send+0xd4>)
   1cc82:	f012 fff5 	bl	2fc70 <printk>
   1cc86:	f640 31af 	movw	r1, #2991	; 0xbaf
   1cc8a:	4826      	ldr	r0, [pc, #152]	; (1cd24 <bt_att_send+0xd4>)
   1cc8c:	f013 fad6 	bl	3023c <assert_post_action>

	att = att_get(conn);
   1cc90:	4628      	mov	r0, r5
   1cc92:	f7ff f9b3 	bl	1bffc <att_get>
	if (!att) {
   1cc96:	4606      	mov	r6, r0
   1cc98:	b938      	cbnz	r0, 1ccaa <bt_att_send+0x5a>
		net_buf_unref(buf);
   1cc9a:	4620      	mov	r0, r4
   1cc9c:	f001 fa04 	bl	1e0a8 <net_buf_unref>
		return -ENOTCONN;
   1cca0:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1cca4:	b002      	add	sp, #8
   1cca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1ccaa:	b147      	cbz	r7, 1ccbe <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1ccac:	463b      	mov	r3, r7
   1ccae:	4622      	mov	r2, r4
   1ccb0:	2104      	movs	r1, #4
   1ccb2:	4628      	mov	r0, r5
   1ccb4:	f8cd 8000 	str.w	r8, [sp]
   1ccb8:	f015 fe90 	bl	329dc <bt_l2cap_send_cb>
   1ccbc:	e7f2      	b.n	1cca4 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   1ccbe:	f100 070c 	add.w	r7, r0, #12
   1ccc2:	4621      	mov	r1, r4
   1ccc4:	4638      	mov	r0, r7
   1ccc6:	f001 f9bb 	bl	1e040 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1ccca:	2200      	movs	r2, #0
   1cccc:	2300      	movs	r3, #0
   1ccce:	4638      	mov	r0, r7
   1ccd0:	f001 f958 	bl	1df84 <net_buf_get>
	if (!buf) {
   1ccd4:	4605      	mov	r5, r0
   1ccd6:	b908      	cbnz	r0, 1ccdc <bt_att_send+0x8c>
	return 0;
   1ccd8:	2000      	movs	r0, #0
   1ccda:	e7e3      	b.n	1cca4 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ccdc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1ccde:	b1c3      	cbz	r3, 1cd12 <bt_att_send+0xc2>
   1cce0:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1cce4:	d015      	beq.n	1cd12 <bt_att_send+0xc2>
   1cce6:	681c      	ldr	r4, [r3, #0]
   1cce8:	b10c      	cbz	r4, 1ccee <bt_att_send+0x9e>
   1ccea:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   1ccee:	2200      	movs	r2, #0
   1ccf0:	4629      	mov	r1, r5
   1ccf2:	f7ff f8c9 	bl	1be88 <chan_send>
		if (err >= 0) {
   1ccf6:	2800      	cmp	r0, #0
   1ccf8:	daee      	bge.n	1ccd8 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ccfa:	b154      	cbz	r4, 1cd12 <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ccfc:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1cd00:	d004      	beq.n	1cd0c <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cd02:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   1cd06:	b10b      	cbz	r3, 1cd0c <bt_att_send+0xbc>
   1cd08:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1cd0c:	4620      	mov	r0, r4
   1cd0e:	461c      	mov	r4, r3
   1cd10:	e7ed      	b.n	1ccee <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1cd12:	4629      	mov	r1, r5
   1cd14:	4638      	mov	r0, r7
   1cd16:	f01a fbb9 	bl	3748c <k_queue_prepend>
   1cd1a:	e7dd      	b.n	1ccd8 <bt_att_send+0x88>
   1cd1c:	0003beaf 	.word	0x0003beaf
   1cd20:	0003a56b 	.word	0x0003a56b
   1cd24:	0003c7f4 	.word	0x0003c7f4
   1cd28:	0003bb41 	.word	0x0003bb41

0001cd2c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1cd2c:	b538      	push	{r3, r4, r5, lr}
   1cd2e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1cd30:	4605      	mov	r5, r0
   1cd32:	b958      	cbnz	r0, 1cd4c <bt_att_req_send+0x20>
   1cd34:	4916      	ldr	r1, [pc, #88]	; (1cd90 <bt_att_req_send+0x64>)
   1cd36:	4817      	ldr	r0, [pc, #92]	; (1cd94 <bt_att_req_send+0x68>)
   1cd38:	f640 33cb 	movw	r3, #3019	; 0xbcb
   1cd3c:	4a16      	ldr	r2, [pc, #88]	; (1cd98 <bt_att_req_send+0x6c>)
   1cd3e:	f012 ff97 	bl	2fc70 <printk>
   1cd42:	f640 31cb 	movw	r1, #3019	; 0xbcb
   1cd46:	4814      	ldr	r0, [pc, #80]	; (1cd98 <bt_att_req_send+0x6c>)
   1cd48:	f013 fa78 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(req);
   1cd4c:	b95c      	cbnz	r4, 1cd66 <bt_att_req_send+0x3a>
   1cd4e:	4913      	ldr	r1, [pc, #76]	; (1cd9c <bt_att_req_send+0x70>)
   1cd50:	4810      	ldr	r0, [pc, #64]	; (1cd94 <bt_att_req_send+0x68>)
   1cd52:	f640 33cc 	movw	r3, #3020	; 0xbcc
   1cd56:	4a10      	ldr	r2, [pc, #64]	; (1cd98 <bt_att_req_send+0x6c>)
   1cd58:	f012 ff8a 	bl	2fc70 <printk>
   1cd5c:	f640 31cc 	movw	r1, #3020	; 0xbcc
   1cd60:	480d      	ldr	r0, [pc, #52]	; (1cd98 <bt_att_req_send+0x6c>)
   1cd62:	f013 fa6b 	bl	3023c <assert_post_action>

	att = att_get(conn);
   1cd66:	4628      	mov	r0, r5
   1cd68:	f7ff f948 	bl	1bffc <att_get>
	if (!att) {
   1cd6c:	b160      	cbz	r0, 1cd88 <bt_att_req_send+0x5c>
	parent->next = child;
   1cd6e:	2300      	movs	r3, #0
   1cd70:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1cd72:	6883      	ldr	r3, [r0, #8]
   1cd74:	b92b      	cbnz	r3, 1cd82 <bt_att_req_send+0x56>
	list->head = node;
   1cd76:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1cd7a:	f016 f88c 	bl	32e96 <att_req_send_process>

	return 0;
   1cd7e:	2000      	movs	r0, #0
}
   1cd80:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1cd82:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cd84:	6084      	str	r4, [r0, #8]
}
   1cd86:	e7f8      	b.n	1cd7a <bt_att_req_send+0x4e>
		return -ENOTCONN;
   1cd88:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1cd8c:	e7f8      	b.n	1cd80 <bt_att_req_send+0x54>
   1cd8e:	bf00      	nop
   1cd90:	0003beaf 	.word	0x0003beaf
   1cd94:	0003a56b 	.word	0x0003a56b
   1cd98:	0003c7f4 	.word	0x0003c7f4
   1cd9c:	0003c72f 	.word	0x0003c72f

0001cda0 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   1cda0:	b510      	push	{r4, lr}
   1cda2:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1cda4:	b348      	cbz	r0, 1cdfa <bt_att_req_cancel+0x5a>
   1cda6:	b341      	cbz	r1, 1cdfa <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   1cda8:	f7ff f928 	bl	1bffc <att_get>
	if (!att) {
   1cdac:	b328      	cbz	r0, 1cdfa <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cdae:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1cdb0:	b15b      	cbz	r3, 1cdca <bt_att_req_cancel+0x2a>
   1cdb2:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   1cdb6:	d008      	beq.n	1cdca <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cdb8:	681b      	ldr	r3, [r3, #0]
   1cdba:	b10b      	cbz	r3, 1cdc0 <bt_att_req_cancel+0x20>
   1cdbc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   1cdc0:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   1cdc4:	4294      	cmp	r4, r2
   1cdc6:	d005      	beq.n	1cdd4 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cdc8:	b963      	cbnz	r3, 1cde4 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1cdca:	4621      	mov	r1, r4
   1cdcc:	3004      	adds	r0, #4
   1cdce:	f015 fe67 	bl	32aa0 <sys_slist_find_and_remove>
   1cdd2:	e002      	b.n	1cdda <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   1cdd4:	4b09      	ldr	r3, [pc, #36]	; (1cdfc <bt_att_req_cancel+0x5c>)
   1cdd6:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   1cdda:	4620      	mov	r0, r4
}
   1cddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1cde0:	f7ff be5a 	b.w	1ca98 <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cde4:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   1cde8:	d004      	beq.n	1cdf4 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cdea:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cdee:	b10a      	cbz	r2, 1cdf4 <bt_att_req_cancel+0x54>
   1cdf0:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   1cdf4:	4619      	mov	r1, r3
   1cdf6:	4613      	mov	r3, r2
   1cdf8:	e7e2      	b.n	1cdc0 <bt_att_req_cancel+0x20>
}
   1cdfa:	bd10      	pop	{r4, pc}
   1cdfc:	2001629c 	.word	0x2001629c

0001ce00 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1ce00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1ce02:	4604      	mov	r4, r0
   1ce04:	4d0c      	ldr	r5, [pc, #48]	; (1ce38 <find_cf_cfg+0x38>)
   1ce06:	b960      	cbnz	r0, 1ce22 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ce08:	9000      	str	r0, [sp, #0]
   1ce0a:	4669      	mov	r1, sp
   1ce0c:	f8cd 0003 	str.w	r0, [sp, #3]
   1ce10:	1c68      	adds	r0, r5, #1
   1ce12:	f016 f9be 	bl	33192 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1ce16:	2800      	cmp	r0, #0
   1ce18:	bf08      	it	eq
   1ce1a:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1ce1c:	4620      	mov	r0, r4
   1ce1e:	b003      	add	sp, #12
   1ce20:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1ce22:	462a      	mov	r2, r5
   1ce24:	f812 1b01 	ldrb.w	r1, [r2], #1
   1ce28:	f015 fd03 	bl	32832 <bt_conn_is_peer_addr_le>
   1ce2c:	2800      	cmp	r0, #0
	return NULL;
   1ce2e:	bf14      	ite	ne
   1ce30:	462c      	movne	r4, r5
   1ce32:	2400      	moveq	r4, #0
   1ce34:	e7f2      	b.n	1ce1c <find_cf_cfg+0x1c>
   1ce36:	bf00      	nop
   1ce38:	200162ac 	.word	0x200162ac

0001ce3c <find_sc_cfg>:
{
   1ce3c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1ce3e:	4c06      	ldr	r4, [pc, #24]	; (1ce58 <find_sc_cfg+0x1c>)
   1ce40:	7823      	ldrb	r3, [r4, #0]
   1ce42:	4283      	cmp	r3, r0
   1ce44:	d103      	bne.n	1ce4e <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1ce46:	1c60      	adds	r0, r4, #1
   1ce48:	f016 f9a3 	bl	33192 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1ce4c:	b108      	cbz	r0, 1ce52 <find_sc_cfg+0x16>
	return NULL;
   1ce4e:	2000      	movs	r0, #0
}
   1ce50:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1ce52:	4620      	mov	r0, r4
   1ce54:	e7fc      	b.n	1ce50 <find_sc_cfg+0x14>
   1ce56:	bf00      	nop
   1ce58:	2001ad54 	.word	0x2001ad54

0001ce5c <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   1ce5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   1ce5e:	4604      	mov	r4, r0
   1ce60:	4d0c      	ldr	r5, [pc, #48]	; (1ce94 <gatt_sub_find+0x38>)
   1ce62:	b960      	cbnz	r0, 1ce7e <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1ce64:	9000      	str	r0, [sp, #0]
   1ce66:	4669      	mov	r1, sp
   1ce68:	f8cd 0003 	str.w	r0, [sp, #3]
   1ce6c:	1c68      	adds	r0, r5, #1
   1ce6e:	f016 f990 	bl	33192 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
   1ce72:	2800      	cmp	r0, #0
   1ce74:	bf08      	it	eq
   1ce76:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
   1ce78:	4620      	mov	r0, r4
   1ce7a:	b003      	add	sp, #12
   1ce7c:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1ce7e:	462a      	mov	r2, r5
   1ce80:	f812 1b01 	ldrb.w	r1, [r2], #1
   1ce84:	f015 fcd5 	bl	32832 <bt_conn_is_peer_addr_le>
   1ce88:	2800      	cmp	r0, #0
	return NULL;
   1ce8a:	bf14      	ite	ne
   1ce8c:	462c      	movne	r4, r5
   1ce8e:	2400      	moveq	r4, #0
   1ce90:	e7f2      	b.n	1ce78 <gatt_sub_find+0x1c>
   1ce92:	bf00      	nop
   1ce94:	200162dc 	.word	0x200162dc

0001ce98 <bt_gatt_attr_write_ccc>:
{
   1ce98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ce9c:	461f      	mov	r7, r3
   1ce9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1cea2:	4606      	mov	r6, r0
   1cea4:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1cea6:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   1ceaa:	2b00      	cmp	r3, #0
   1ceac:	d151      	bne.n	1cf52 <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
   1ceae:	1e7b      	subs	r3, r7, #1
   1ceb0:	2b01      	cmp	r3, #1
   1ceb2:	d851      	bhi.n	1cf58 <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
   1ceb4:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1ceb6:	7815      	ldrb	r5, [r2, #0]
   1ceb8:	bf18      	it	ne
   1ceba:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1cebc:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1cebe:	bf0c      	ite	eq
   1cec0:	b2ad      	uxtheq	r5, r5
   1cec2:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1cec6:	f016 f967 	bl	33198 <find_ccc_cfg>
	if (!cfg) {
   1ceca:	4604      	mov	r4, r0
   1cecc:	b9e8      	cbnz	r0, 1cf0a <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
   1cece:	b91d      	cbnz	r5, 1ced8 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1ced0:	4638      	mov	r0, r7
}
   1ced2:	b003      	add	sp, #12
   1ced4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1ced8:	4649      	mov	r1, r9
   1ceda:	f016 f95d 	bl	33198 <find_ccc_cfg>
		if (!cfg) {
   1cede:	4604      	mov	r4, r0
   1cee0:	b960      	cbnz	r0, 1cefc <bt_gatt_attr_write_ccc+0x64>
   1cee2:	4b1f      	ldr	r3, [pc, #124]	; (1cf60 <bt_gatt_attr_write_ccc+0xc8>)
   1cee4:	491f      	ldr	r1, [pc, #124]	; (1cf64 <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
   1cee6:	4820      	ldr	r0, [pc, #128]	; (1cf68 <bt_gatt_attr_write_ccc+0xd0>)
   1cee8:	1ac9      	subs	r1, r1, r3
   1ceea:	08c9      	lsrs	r1, r1, #3
   1ceec:	0189      	lsls	r1, r1, #6
   1ceee:	f041 0102 	orr.w	r1, r1, #2
   1cef2:	f013 f9f1 	bl	302d8 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1cef6:	f06f 0010 	mvn.w	r0, #16
   1cefa:	e7ea      	b.n	1ced2 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1cefc:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1cf00:	3001      	adds	r0, #1
   1cf02:	f016 f961 	bl	331c8 <bt_addr_le_copy>
		cfg->id = conn->id;
   1cf06:	7a33      	ldrb	r3, [r6, #8]
   1cf08:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1cf0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1cf0e:	b9a3      	cbnz	r3, 1cf3a <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
   1cf10:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1cf14:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1cf16:	42ab      	cmp	r3, r5
   1cf18:	d003      	beq.n	1cf22 <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
   1cf1a:	4649      	mov	r1, r9
   1cf1c:	4640      	mov	r0, r8
   1cf1e:	f016 f8bf 	bl	330a0 <gatt_ccc_changed>
	if (!value) {
   1cf22:	2d00      	cmp	r5, #0
   1cf24:	d1d4      	bne.n	1ced0 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cf26:	4669      	mov	r1, sp
   1cf28:	1c60      	adds	r0, r4, #1
   1cf2a:	9500      	str	r5, [sp, #0]
   1cf2c:	f8cd 5003 	str.w	r5, [sp, #3]
   1cf30:	f016 f94a 	bl	331c8 <bt_addr_le_copy>
	cfg->id = 0U;
   1cf34:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1cf36:	8125      	strh	r5, [r4, #8]
}
   1cf38:	e7ca      	b.n	1ced0 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1cf3a:	462a      	mov	r2, r5
   1cf3c:	4641      	mov	r1, r8
   1cf3e:	4630      	mov	r0, r6
   1cf40:	4798      	blx	r3
		if (write < 0) {
   1cf42:	2800      	cmp	r0, #0
   1cf44:	dbc5      	blt.n	1ced2 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1cf46:	3801      	subs	r0, #1
   1cf48:	2801      	cmp	r0, #1
   1cf4a:	d9e1      	bls.n	1cf10 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1cf4c:	f06f 000d 	mvn.w	r0, #13
   1cf50:	e7bf      	b.n	1ced2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cf52:	f06f 0006 	mvn.w	r0, #6
   1cf56:	e7bc      	b.n	1ced2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1cf58:	f06f 000c 	mvn.w	r0, #12
   1cf5c:	e7b9      	b.n	1ced2 <bt_gatt_attr_write_ccc+0x3a>
   1cf5e:	bf00      	nop
   1cf60:	000387c0 	.word	0x000387c0
   1cf64:	00038800 	.word	0x00038800
   1cf68:	0003c9e4 	.word	0x0003c9e4

0001cf6c <sc_save>:
{
   1cf6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cf70:	4680      	mov	r8, r0
   1cf72:	460f      	mov	r7, r1
   1cf74:	4616      	mov	r6, r2
   1cf76:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1cf78:	f7ff ff60 	bl	1ce3c <find_sc_cfg>
	if (!cfg) {
   1cf7c:	4604      	mov	r4, r0
   1cf7e:	b9c8      	cbnz	r0, 1cfb4 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1cf80:	4669      	mov	r1, sp
   1cf82:	9000      	str	r0, [sp, #0]
   1cf84:	f8cd 0003 	str.w	r0, [sp, #3]
   1cf88:	f7ff ff58 	bl	1ce3c <find_sc_cfg>
		if (!cfg) {
   1cf8c:	4604      	mov	r4, r0
   1cf8e:	b960      	cbnz	r0, 1cfaa <sc_save+0x3e>
   1cf90:	490f      	ldr	r1, [pc, #60]	; (1cfd0 <sc_save+0x64>)
   1cf92:	4b10      	ldr	r3, [pc, #64]	; (1cfd4 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
   1cf94:	4810      	ldr	r0, [pc, #64]	; (1cfd8 <sc_save+0x6c>)
   1cf96:	1ac9      	subs	r1, r1, r3
   1cf98:	08c9      	lsrs	r1, r1, #3
   1cf9a:	0189      	lsls	r1, r1, #6
   1cf9c:	f041 0101 	orr.w	r1, r1, #1
   1cfa0:	f013 f99a 	bl	302d8 <log_0>
}
   1cfa4:	b002      	add	sp, #8
   1cfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1cfaa:	4639      	mov	r1, r7
		cfg->id = id;
   1cfac:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1cfb0:	f016 f90a 	bl	331c8 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1cfb4:	8922      	ldrh	r2, [r4, #8]
   1cfb6:	8963      	ldrh	r3, [r4, #10]
   1cfb8:	b91a      	cbnz	r2, 1cfc2 <sc_save+0x56>
   1cfba:	b923      	cbnz	r3, 1cfc6 <sc_save+0x5a>
		cfg->data.start = start;
   1cfbc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1cfbe:	8165      	strh	r5, [r4, #10]
   1cfc0:	e7f0      	b.n	1cfa4 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   1cfc2:	4296      	cmp	r6, r2
   1cfc4:	d302      	bcc.n	1cfcc <sc_save+0x60>
   1cfc6:	429d      	cmp	r5, r3
   1cfc8:	d9ec      	bls.n	1cfa4 <sc_save+0x38>
   1cfca:	e7f8      	b.n	1cfbe <sc_save+0x52>
		*start = new_start;
   1cfcc:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1cfce:	e7fa      	b.n	1cfc6 <sc_save+0x5a>
   1cfd0:	00038800 	.word	0x00038800
   1cfd4:	000387c0 	.word	0x000387c0
   1cfd8:	0003c9fe 	.word	0x0003c9fe

0001cfdc <cf_write>:
{
   1cfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cfe0:	4698      	mov	r8, r3
   1cfe2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1cfe6:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1cfe8:	2b01      	cmp	r3, #1
{
   1cfea:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1cfec:	d83d      	bhi.n	1d06a <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1cfee:	4443      	add	r3, r8
   1cff0:	2b01      	cmp	r3, #1
   1cff2:	4645      	mov	r5, r8
   1cff4:	dc3c      	bgt.n	1d070 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1cff6:	f7ff ff03 	bl	1ce00 <find_cf_cfg>
	if (!cfg) {
   1cffa:	4604      	mov	r4, r0
   1cffc:	b990      	cbnz	r0, 1d024 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1cffe:	f7ff feff 	bl	1ce00 <find_cf_cfg>
	if (!cfg) {
   1d002:	4604      	mov	r4, r0
   1d004:	b970      	cbnz	r0, 1d024 <cf_write+0x48>
   1d006:	4b1d      	ldr	r3, [pc, #116]	; (1d07c <cf_write+0xa0>)
   1d008:	491d      	ldr	r1, [pc, #116]	; (1d080 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   1d00a:	481e      	ldr	r0, [pc, #120]	; (1d084 <cf_write+0xa8>)
   1d00c:	1ac9      	subs	r1, r1, r3
   1d00e:	08c9      	lsrs	r1, r1, #3
   1d010:	0189      	lsls	r1, r1, #6
   1d012:	f041 0102 	orr.w	r1, r1, #2
   1d016:	f013 f95f 	bl	302d8 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d01a:	f06f 0510 	mvn.w	r5, #16
}
   1d01e:	4628      	mov	r0, r5
   1d020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1d024:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1d026:	f1b8 0f00 	cmp.w	r8, #0
   1d02a:	d10c      	bne.n	1d046 <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d02c:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1d030:	1c60      	adds	r0, r4, #1
   1d032:	f016 f8c9 	bl	331c8 <bt_addr_le_copy>
	cfg->id = conn->id;
   1d036:	4620      	mov	r0, r4
   1d038:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d03a:	2100      	movs	r1, #0
	cfg->id = conn->id;
   1d03c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d040:	f016 f991 	bl	33366 <atomic_set_bit>
	return len;
   1d044:	e7eb      	b.n	1d01e <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1d046:	7a20      	ldrb	r0, [r4, #8]
   1d048:	fa20 f301 	lsr.w	r3, r0, r1
   1d04c:	07da      	lsls	r2, r3, #31
   1d04e:	d503      	bpl.n	1d058 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   1d050:	783b      	ldrb	r3, [r7, #0]
   1d052:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1d054:	07db      	lsls	r3, r3, #31
   1d056:	d50e      	bpl.n	1d076 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1d058:	3101      	adds	r1, #1
   1d05a:	2903      	cmp	r1, #3
   1d05c:	d1e3      	bne.n	1d026 <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1d05e:	783b      	ldrb	r3, [r7, #0]
   1d060:	f003 0307 	and.w	r3, r3, #7
   1d064:	4318      	orrs	r0, r3
   1d066:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1d068:	e7e0      	b.n	1d02c <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d06a:	f06f 0506 	mvn.w	r5, #6
   1d06e:	e7d6      	b.n	1d01e <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d070:	f06f 050c 	mvn.w	r5, #12
   1d074:	e7d3      	b.n	1d01e <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1d076:	f06f 0512 	mvn.w	r5, #18
   1d07a:	e7d0      	b.n	1d01e <cf_write+0x42>
   1d07c:	000387c0 	.word	0x000387c0
   1d080:	00038800 	.word	0x00038800
   1d084:	0003ca1d 	.word	0x0003ca1d

0001d088 <sc_indicate_rsp>:
{
   1d088:	b510      	push	{r4, lr}
   1d08a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d08c:	480f      	ldr	r0, [pc, #60]	; (1d0cc <sc_indicate_rsp+0x44>)
   1d08e:	e8d0 3fef 	ldaex	r3, [r0]
   1d092:	f023 0302 	bic.w	r3, r3, #2
   1d096:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1d09a:	2a00      	cmp	r2, #0
   1d09c:	d1f7      	bne.n	1d08e <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d09e:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1d0a2:	07da      	lsls	r2, r3, #31
   1d0a4:	d504      	bpl.n	1d0b0 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   1d0a6:	2200      	movs	r2, #0
   1d0a8:	2300      	movs	r3, #0
   1d0aa:	3830      	subs	r0, #48	; 0x30
   1d0ac:	f00e fda4 	bl	2bbf8 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1d0b0:	4620      	mov	r0, r4
   1d0b2:	f7ff fea5 	bl	1ce00 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d0b6:	b140      	cbz	r0, 1d0ca <sc_indicate_rsp+0x42>
   1d0b8:	7a03      	ldrb	r3, [r0, #8]
   1d0ba:	07db      	lsls	r3, r3, #31
   1d0bc:	d505      	bpl.n	1d0ca <sc_indicate_rsp+0x42>
}
   1d0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d0c2:	2100      	movs	r1, #0
   1d0c4:	300c      	adds	r0, #12
   1d0c6:	f016 b94e 	b.w	33366 <atomic_set_bit>
}
   1d0ca:	bd10      	pop	{r4, pc}
   1d0cc:	20015860 	.word	0x20015860

0001d0d0 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   1d0d0:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1d0d2:	2312      	movs	r3, #18
{
   1d0d4:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1d0d6:	2104      	movs	r1, #4
   1d0d8:	e9cd 3100 	strd	r3, r1, [sp]
   1d0dc:	4b03      	ldr	r3, [pc, #12]	; (1d0ec <gatt_write_ccc+0x1c>)
   1d0de:	4904      	ldr	r1, [pc, #16]	; (1d0f0 <gatt_write_ccc+0x20>)
   1d0e0:	f016 f9c9 	bl	33476 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   1d0e4:	b003      	add	sp, #12
   1d0e6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d0ea:	bf00      	nop
   1d0ec:	00033397 	.word	0x00033397
   1d0f0:	00033409 	.word	0x00033409

0001d0f4 <disconnected_cb>:
{
   1d0f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d0f8:	4b23      	ldr	r3, [pc, #140]	; (1d188 <disconnected_cb+0x94>)
{
   1d0fa:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d0fc:	6882      	ldr	r2, [r0, #8]
{
   1d0fe:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d100:	429a      	cmp	r2, r3
   1d102:	d102      	bne.n	1d10a <disconnected_cb+0x16>
	ccc = attr->user_data;
   1d104:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1d106:	8963      	ldrh	r3, [r4, #10]
   1d108:	bb03      	cbnz	r3, 1d14c <disconnected_cb+0x58>
}
   1d10a:	2001      	movs	r0, #1
   1d10c:	b002      	add	sp, #8
   1d10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d112:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1d116:	4641      	mov	r1, r8
   1d118:	7a28      	ldrb	r0, [r5, #8]
   1d11a:	f015 faed 	bl	326f8 <bt_addr_le_is_bonded>
   1d11e:	b980      	cbnz	r0, 1d142 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   1d120:	4b1a      	ldr	r3, [pc, #104]	; (1d18c <disconnected_cb+0x98>)
   1d122:	429c      	cmp	r4, r3
   1d124:	d102      	bne.n	1d12c <disconnected_cb+0x38>
					sc_clear(conn);
   1d126:	4628      	mov	r0, r5
   1d128:	f016 f866 	bl	331f8 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d12c:	2200      	movs	r2, #0
   1d12e:	4669      	mov	r1, sp
   1d130:	4630      	mov	r0, r6
   1d132:	9200      	str	r2, [sp, #0]
   1d134:	f8cd 2003 	str.w	r2, [sp, #3]
   1d138:	f016 f846 	bl	331c8 <bt_addr_le_copy>
	cfg->id = 0U;
   1d13c:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   1d13e:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   1d140:	e019      	b.n	1d176 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d142:	4641      	mov	r1, r8
   1d144:	4630      	mov	r0, r6
   1d146:	f016 f83f 	bl	331c8 <bt_addr_le_copy>
	if (!value_used) {
   1d14a:	e014      	b.n	1d176 <disconnected_cb+0x82>
		if (!cfg->value) {
   1d14c:	8923      	ldrh	r3, [r4, #8]
   1d14e:	b193      	cbz	r3, 1d176 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d150:	4626      	mov	r6, r4
   1d152:	f816 1b01 	ldrb.w	r1, [r6], #1
   1d156:	4628      	mov	r0, r5
   1d158:	4632      	mov	r2, r6
   1d15a:	f015 fb6a 	bl	32832 <bt_conn_is_peer_addr_le>
   1d15e:	2800      	cmp	r0, #0
   1d160:	d1d7      	bne.n	1d112 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d162:	4631      	mov	r1, r6
   1d164:	7820      	ldrb	r0, [r4, #0]
   1d166:	f7fe f871 	bl	1b24c <bt_conn_lookup_addr_le>
			if (tmp) {
   1d16a:	b120      	cbz	r0, 1d176 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   1d16c:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1d16e:	f7fd ff39 	bl	1afe4 <bt_conn_unref>
	if (!value_used) {
   1d172:	2d07      	cmp	r5, #7
   1d174:	d0c9      	beq.n	1d10a <disconnected_cb+0x16>
		ccc->value = 0U;
   1d176:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1d178:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1d17a:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1d17c:	2b00      	cmp	r3, #0
   1d17e:	d0c4      	beq.n	1d10a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1d180:	4638      	mov	r0, r7
   1d182:	4798      	blx	r3
   1d184:	e7c1      	b.n	1d10a <disconnected_cb+0x16>
   1d186:	bf00      	nop
   1d188:	0001ce99 	.word	0x0001ce99
   1d18c:	2001481c 	.word	0x2001481c

0001d190 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d190:	2201      	movs	r2, #1
{
   1d192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d194:	4b21      	ldr	r3, [pc, #132]	; (1d21c <bt_gatt_init+0x8c>)
   1d196:	e8d3 1fef 	ldaex	r1, [r3]
   1d19a:	2900      	cmp	r1, #0
   1d19c:	d103      	bne.n	1d1a6 <bt_gatt_init+0x16>
   1d19e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1d1a2:	2800      	cmp	r0, #0
   1d1a4:	d1f7      	bne.n	1d196 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1d1a6:	d138      	bne.n	1d21a <bt_gatt_init+0x8a>
   1d1a8:	4b1d      	ldr	r3, [pc, #116]	; (1d220 <bt_gatt_init+0x90>)
   1d1aa:	e8d3 1fef 	ldaex	r1, [r3]
   1d1ae:	2900      	cmp	r1, #0
   1d1b0:	d103      	bne.n	1d1ba <bt_gatt_init+0x2a>
   1d1b2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1d1b6:	2800      	cmp	r0, #0
   1d1b8:	d1f7      	bne.n	1d1aa <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1d1ba:	d029      	beq.n	1d210 <bt_gatt_init+0x80>
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1d1bc:	4919      	ldr	r1, [pc, #100]	; (1d224 <bt_gatt_init+0x94>)
   1d1be:	481a      	ldr	r0, [pc, #104]	; (1d228 <bt_gatt_init+0x98>)
   1d1c0:	f00e fbf6 	bl	2b9b0 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1d1c4:	2300      	movs	r3, #0
   1d1c6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1d1ca:	4817      	ldr	r0, [pc, #92]	; (1d228 <bt_gatt_init+0x98>)
   1d1cc:	f00e fc98 	bl	2bb00 <k_work_schedule>
}
   1d1d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1d1d4:	4915      	ldr	r1, [pc, #84]	; (1d22c <bt_gatt_init+0x9c>)
   1d1d6:	4816      	ldr	r0, [pc, #88]	; (1d230 <bt_gatt_init+0xa0>)
   1d1d8:	f00e bbea 	b.w	2b9b0 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1d1dc:	4a15      	ldr	r2, [pc, #84]	; (1d234 <bt_gatt_init+0xa4>)
   1d1de:	6863      	ldr	r3, [r4, #4]
   1d1e0:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d1e2:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   1d1e4:	440b      	add	r3, r1
   1d1e6:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d1e8:	42ac      	cmp	r4, r5
   1d1ea:	d90e      	bls.n	1d20a <bt_gatt_init+0x7a>
   1d1ec:	4912      	ldr	r1, [pc, #72]	; (1d238 <bt_gatt_init+0xa8>)
   1d1ee:	f44f 6389 	mov.w	r3, #1096	; 0x448
   1d1f2:	4632      	mov	r2, r6
   1d1f4:	4811      	ldr	r0, [pc, #68]	; (1d23c <bt_gatt_init+0xac>)
   1d1f6:	f012 fd3b 	bl	2fc70 <printk>
   1d1fa:	4811      	ldr	r0, [pc, #68]	; (1d240 <bt_gatt_init+0xb0>)
   1d1fc:	f012 fd38 	bl	2fc70 <printk>
   1d200:	f44f 6189 	mov.w	r1, #1096	; 0x448
   1d204:	4630      	mov	r0, r6
   1d206:	f013 f819 	bl	3023c <assert_post_action>
   1d20a:	42bc      	cmp	r4, r7
   1d20c:	d3e6      	bcc.n	1d1dc <bt_gatt_init+0x4c>
   1d20e:	e7d5      	b.n	1d1bc <bt_gatt_init+0x2c>
   1d210:	4d0c      	ldr	r5, [pc, #48]	; (1d244 <bt_gatt_init+0xb4>)
   1d212:	4c0d      	ldr	r4, [pc, #52]	; (1d248 <bt_gatt_init+0xb8>)
   1d214:	462f      	mov	r7, r5
   1d216:	4e0d      	ldr	r6, [pc, #52]	; (1d24c <bt_gatt_init+0xbc>)
   1d218:	e7e6      	b.n	1d1e8 <bt_gatt_init+0x58>
}
   1d21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d21c:	200162bc 	.word	0x200162bc
   1d220:	200162d8 	.word	0x200162d8
   1d224:	00033583 	.word	0x00033583
   1d228:	200157b8 	.word	0x200157b8
   1d22c:	0001d689 	.word	0x0001d689
   1d230:	20015830 	.word	0x20015830
   1d234:	2001ad52 	.word	0x2001ad52
   1d238:	0003ca80 	.word	0x0003ca80
   1d23c:	0003a56b 	.word	0x0003a56b
   1d240:	0003ac25 	.word	0x0003ac25
   1d244:	000387ac 	.word	0x000387ac
   1d248:	0003879c 	.word	0x0003879c
   1d24c:	0003ca49 	.word	0x0003ca49

0001d250 <bt_gatt_attr_get_handle>:
{
   1d250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   1d254:	4604      	mov	r4, r0
   1d256:	b910      	cbnz	r0, 1d25e <bt_gatt_attr_get_handle+0xe>
		return 0;
   1d258:	2000      	movs	r0, #0
}
   1d25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1d25e:	8a00      	ldrh	r0, [r0, #16]
   1d260:	2800      	cmp	r0, #0
   1d262:	d1fa      	bne.n	1d25a <bt_gatt_attr_get_handle+0xa>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d264:	4f1a      	ldr	r7, [pc, #104]	; (1d2d0 <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   1d266:	2601      	movs	r6, #1
   1d268:	46b8      	mov	r8, r7
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d26a:	4d1a      	ldr	r5, [pc, #104]	; (1d2d4 <bt_gatt_attr_get_handle+0x84>)
   1d26c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1d2e4 <bt_gatt_attr_get_handle+0x94>
   1d270:	42bd      	cmp	r5, r7
   1d272:	d90e      	bls.n	1d292 <bt_gatt_attr_get_handle+0x42>
   1d274:	4918      	ldr	r1, [pc, #96]	; (1d2d8 <bt_gatt_attr_get_handle+0x88>)
   1d276:	f240 536a 	movw	r3, #1386	; 0x56a
   1d27a:	464a      	mov	r2, r9
   1d27c:	4817      	ldr	r0, [pc, #92]	; (1d2dc <bt_gatt_attr_get_handle+0x8c>)
   1d27e:	f012 fcf7 	bl	2fc70 <printk>
   1d282:	4817      	ldr	r0, [pc, #92]	; (1d2e0 <bt_gatt_attr_get_handle+0x90>)
   1d284:	f012 fcf4 	bl	2fc70 <printk>
   1d288:	f240 516a 	movw	r1, #1386	; 0x56a
   1d28c:	4648      	mov	r0, r9
   1d28e:	f012 ffd5 	bl	3023c <assert_post_action>
   1d292:	4545      	cmp	r5, r8
   1d294:	d2e0      	bcs.n	1d258 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   1d296:	e9d5 ec00 	ldrd	lr, ip, [r5]
   1d29a:	4574      	cmp	r4, lr
   1d29c:	d305      	bcc.n	1d2aa <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1d29e:	2114      	movs	r1, #20
   1d2a0:	fb01 e30c 	mla	r3, r1, ip, lr
   1d2a4:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1d2a6:	429c      	cmp	r4, r3
   1d2a8:	d90f      	bls.n	1d2ca <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   1d2aa:	eb06 030c 	add.w	r3, r6, ip
   1d2ae:	b298      	uxth	r0, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d2b0:	4606      	mov	r6, r0
   1d2b2:	3508      	adds	r5, #8
   1d2b4:	e7dc      	b.n	1d270 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   1d2b6:	fb01 e302 	mla	r3, r1, r2, lr
   1d2ba:	429c      	cmp	r4, r3
   1d2bc:	d0cd      	beq.n	1d25a <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1d2be:	3201      	adds	r2, #1
   1d2c0:	18b3      	adds	r3, r6, r2
   1d2c2:	4562      	cmp	r2, ip
   1d2c4:	b298      	uxth	r0, r3
   1d2c6:	d1f6      	bne.n	1d2b6 <bt_gatt_attr_get_handle+0x66>
   1d2c8:	e7f2      	b.n	1d2b0 <bt_gatt_attr_get_handle+0x60>
   1d2ca:	2200      	movs	r2, #0
   1d2cc:	e7f8      	b.n	1d2c0 <bt_gatt_attr_get_handle+0x70>
   1d2ce:	bf00      	nop
   1d2d0:	000387ac 	.word	0x000387ac
   1d2d4:	0003879c 	.word	0x0003879c
   1d2d8:	0003ca79 	.word	0x0003ca79
   1d2dc:	0003a56b 	.word	0x0003a56b
   1d2e0:	0003ac25 	.word	0x0003ac25
   1d2e4:	0003ca49 	.word	0x0003ca49

0001d2e8 <bt_gatt_foreach_attr_type>:
{
   1d2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2ec:	b085      	sub	sp, #20
   1d2ee:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   1d2f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1d2f4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   1d2f8:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   1d2fa:	2d00      	cmp	r5, #0
   1d2fc:	bf08      	it	eq
   1d2fe:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1d300:	4b2d      	ldr	r3, [pc, #180]	; (1d3b8 <bt_gatt_foreach_attr_type+0xd0>)
{
   1d302:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1d304:	881b      	ldrh	r3, [r3, #0]
{
   1d306:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   1d308:	4283      	cmp	r3, r0
   1d30a:	d24e      	bcs.n	1d3aa <bt_gatt_foreach_attr_type+0xc2>
}
   1d30c:	b005      	add	sp, #20
   1d30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1d312:	6873      	ldr	r3, [r6, #4]
   1d314:	4423      	add	r3, r4
   1d316:	42bb      	cmp	r3, r7
   1d318:	d244      	bcs.n	1d3a4 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   1d31a:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d31c:	3608      	adds	r6, #8
   1d31e:	4556      	cmp	r6, sl
   1d320:	d90e      	bls.n	1d340 <bt_gatt_foreach_attr_type+0x58>
   1d322:	4926      	ldr	r1, [pc, #152]	; (1d3bc <bt_gatt_foreach_attr_type+0xd4>)
   1d324:	f240 632e 	movw	r3, #1582	; 0x62e
   1d328:	465a      	mov	r2, fp
   1d32a:	4825      	ldr	r0, [pc, #148]	; (1d3c0 <bt_gatt_foreach_attr_type+0xd8>)
   1d32c:	f012 fca0 	bl	2fc70 <printk>
   1d330:	4824      	ldr	r0, [pc, #144]	; (1d3c4 <bt_gatt_foreach_attr_type+0xdc>)
   1d332:	f012 fc9d 	bl	2fc70 <printk>
   1d336:	f240 612e 	movw	r1, #1582	; 0x62e
   1d33a:	4658      	mov	r0, fp
   1d33c:	f012 ff7e 	bl	3023c <assert_post_action>
   1d340:	4b21      	ldr	r3, [pc, #132]	; (1d3c8 <bt_gatt_foreach_attr_type+0xe0>)
   1d342:	429e      	cmp	r6, r3
   1d344:	d3e5      	bcc.n	1d312 <bt_gatt_foreach_attr_type+0x2a>
   1d346:	e7e1      	b.n	1d30c <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1d348:	4640      	mov	r0, r8
   1d34a:	5889      	ldr	r1, [r1, r2]
   1d34c:	9303      	str	r3, [sp, #12]
   1d34e:	f015 f895 	bl	3247c <bt_uuid_cmp>
   1d352:	9b03      	ldr	r3, [sp, #12]
   1d354:	b198      	cbz	r0, 1d37e <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1d356:	3401      	adds	r4, #1
   1d358:	f109 0901 	add.w	r9, r9, #1
   1d35c:	b2a4      	uxth	r4, r4
   1d35e:	6873      	ldr	r3, [r6, #4]
   1d360:	454b      	cmp	r3, r9
   1d362:	d9db      	bls.n	1d31c <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   1d364:	9b02      	ldr	r3, [sp, #8]
   1d366:	429c      	cmp	r4, r3
   1d368:	d8d0      	bhi.n	1d30c <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   1d36a:	42bc      	cmp	r4, r7
   1d36c:	d3f3      	bcc.n	1d356 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1d36e:	2314      	movs	r3, #20
   1d370:	fb03 f209 	mul.w	r2, r3, r9
   1d374:	6831      	ldr	r1, [r6, #0]
   1d376:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1d378:	f1b8 0f00 	cmp.w	r8, #0
   1d37c:	d1e4      	bne.n	1d348 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1d37e:	9a01      	ldr	r2, [sp, #4]
   1d380:	b95a      	cbnz	r2, 1d39a <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1d382:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1d384:	4618      	mov	r0, r3
	*num_matches -= 1;
   1d386:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1d388:	4621      	mov	r1, r4
   1d38a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d38c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d38e:	4798      	blx	r3
	if (!*num_matches) {
   1d390:	2d00      	cmp	r5, #0
   1d392:	d0bb      	beq.n	1d30c <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1d394:	2800      	cmp	r0, #0
   1d396:	d1de      	bne.n	1d356 <bt_gatt_foreach_attr_type+0x6e>
   1d398:	e7b8      	b.n	1d30c <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   1d39a:	68da      	ldr	r2, [r3, #12]
   1d39c:	9901      	ldr	r1, [sp, #4]
   1d39e:	4291      	cmp	r1, r2
   1d3a0:	d1d9      	bne.n	1d356 <bt_gatt_foreach_attr_type+0x6e>
   1d3a2:	e7ee      	b.n	1d382 <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1d3a4:	f04f 0900 	mov.w	r9, #0
   1d3a8:	e7d9      	b.n	1d35e <bt_gatt_foreach_attr_type+0x76>
		uint16_t handle = 1;
   1d3aa:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d3ac:	4e07      	ldr	r6, [pc, #28]	; (1d3cc <bt_gatt_foreach_attr_type+0xe4>)
   1d3ae:	f8df a018 	ldr.w	sl, [pc, #24]	; 1d3c8 <bt_gatt_foreach_attr_type+0xe0>
   1d3b2:	f8df b01c 	ldr.w	fp, [pc, #28]	; 1d3d0 <bt_gatt_foreach_attr_type+0xe8>
   1d3b6:	e7b2      	b.n	1d31e <bt_gatt_foreach_attr_type+0x36>
   1d3b8:	2001ad52 	.word	0x2001ad52
   1d3bc:	0003ca79 	.word	0x0003ca79
   1d3c0:	0003a56b 	.word	0x0003a56b
   1d3c4:	0003ac25 	.word	0x0003ac25
   1d3c8:	000387ac 	.word	0x000387ac
   1d3cc:	0003879c 	.word	0x0003879c
   1d3d0:	0003ca49 	.word	0x0003ca49

0001d3d4 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   1d3d4:	b510      	push	{r4, lr}
	uint8_t key[16] = {};
   1d3d6:	2400      	movs	r4, #0
static void db_hash_gen(bool store)
   1d3d8:	b0c8      	sub	sp, #288	; 0x120
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1d3da:	4669      	mov	r1, sp
   1d3dc:	aa1c      	add	r2, sp, #112	; 0x70
   1d3de:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1d3e0:	e9cd 4400 	strd	r4, r4, [sp]
   1d3e4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1d3e8:	f014 fc2b 	bl	31c42 <tc_cmac_setup>
   1d3ec:	b958      	cbnz	r0, 1d406 <db_hash_gen.isra.0+0x32>
   1d3ee:	491b      	ldr	r1, [pc, #108]	; (1d45c <db_hash_gen.isra.0+0x88>)
   1d3f0:	4b1b      	ldr	r3, [pc, #108]	; (1d460 <db_hash_gen.isra.0+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
   1d3f2:	481c      	ldr	r0, [pc, #112]	; (1d464 <db_hash_gen.isra.0+0x90>)
   1d3f4:	1ac9      	subs	r1, r1, r3
   1d3f6:	08c9      	lsrs	r1, r1, #3
   1d3f8:	0189      	lsls	r1, r1, #6
   1d3fa:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   1d3fe:	f012 ff6b 	bl	302d8 <log_0>
}
   1d402:	b048      	add	sp, #288	; 0x120
   1d404:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1d406:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d40a:	2001      	movs	r0, #1
   1d40c:	4a16      	ldr	r2, [pc, #88]	; (1d468 <db_hash_gen.isra.0+0x94>)
   1d40e:	ab04      	add	r3, sp, #16
   1d410:	f016 f8ac 	bl	3356c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1d414:	4815      	ldr	r0, [pc, #84]	; (1d46c <db_hash_gen.isra.0+0x98>)
   1d416:	a904      	add	r1, sp, #16
   1d418:	f014 fcaa 	bl	31d70 <tc_cmac_final>
   1d41c:	b940      	cbnz	r0, 1d430 <db_hash_gen.isra.0+0x5c>
   1d41e:	490f      	ldr	r1, [pc, #60]	; (1d45c <db_hash_gen.isra.0+0x88>)
   1d420:	4b0f      	ldr	r3, [pc, #60]	; (1d460 <db_hash_gen.isra.0+0x8c>)
		BT_ERR("Unable to calculate hash");
   1d422:	4813      	ldr	r0, [pc, #76]	; (1d470 <db_hash_gen.isra.0+0x9c>)
   1d424:	1ac9      	subs	r1, r1, r3
   1d426:	08c9      	lsrs	r1, r1, #3
   1d428:	0189      	lsls	r1, r1, #6
   1d42a:	f041 0101 	orr.w	r1, r1, #1
   1d42e:	e7e6      	b.n	1d3fe <db_hash_gen.isra.0+0x2a>
   1d430:	4b0e      	ldr	r3, [pc, #56]	; (1d46c <db_hash_gen.isra.0+0x98>)
   1d432:	f103 020f 	add.w	r2, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1d436:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1d438:	7810      	ldrb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1d43a:	3401      	adds	r4, #1
   1d43c:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1d43e:	f803 0b01 	strb.w	r0, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1d442:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   1d446:	d1f6      	bne.n	1d436 <db_hash_gen.isra.0+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d448:	4b0a      	ldr	r3, [pc, #40]	; (1d474 <db_hash_gen.isra.0+0xa0>)
   1d44a:	e8d3 2fef 	ldaex	r2, [r3]
   1d44e:	f042 0204 	orr.w	r2, r2, #4
   1d452:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d456:	2900      	cmp	r1, #0
   1d458:	d0d3      	beq.n	1d402 <db_hash_gen.isra.0+0x2e>
   1d45a:	e7f6      	b.n	1d44a <db_hash_gen.isra.0+0x76>
   1d45c:	00038800 	.word	0x00038800
   1d460:	000387c0 	.word	0x000387c0
   1d464:	0003caa8 	.word	0x0003caa8
   1d468:	000330e7 	.word	0x000330e7
   1d46c:	200157a8 	.word	0x200157a8
   1d470:	0003cac1 	.word	0x0003cac1
   1d474:	20015860 	.word	0x20015860

0001d478 <gatt_indicate>:
{
   1d478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d47c:	4615      	mov	r5, r2
   1d47e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1d480:	2214      	movs	r2, #20
   1d482:	6869      	ldr	r1, [r5, #4]
{
   1d484:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1d486:	f016 f87e 	bl	33586 <bt_gatt_check_perm>
   1d48a:	b170      	cbz	r0, 1d4aa <gatt_indicate+0x32>
   1d48c:	4b28      	ldr	r3, [pc, #160]	; (1d530 <gatt_indicate+0xb8>)
   1d48e:	4929      	ldr	r1, [pc, #164]	; (1d534 <gatt_indicate+0xbc>)
		BT_WARN("Link is not encrypted");
   1d490:	4829      	ldr	r0, [pc, #164]	; (1d538 <gatt_indicate+0xc0>)
   1d492:	1ac9      	subs	r1, r1, r3
   1d494:	08c9      	lsrs	r1, r1, #3
   1d496:	0189      	lsls	r1, r1, #6
   1d498:	f041 0102 	orr.w	r1, r1, #2
   1d49c:	f012 ff1c 	bl	302d8 <log_0>
		return -EPERM;
   1d4a0:	f04f 35ff 	mov.w	r5, #4294967295
}
   1d4a4:	4628      	mov	r0, r5
   1d4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1d4aa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1d4ae:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1d4b0:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1d4b2:	f7ff fadb 	bl	1ca6c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1d4b6:	3602      	adds	r6, #2
	if (!req) {
   1d4b8:	4604      	mov	r4, r0
   1d4ba:	b910      	cbnz	r0, 1d4c2 <gatt_indicate+0x4a>
		return -ENOMEM;
   1d4bc:	f06f 050b 	mvn.w	r5, #11
   1d4c0:	e7f0      	b.n	1d4a4 <gatt_indicate+0x2c>
	req->func = func;
   1d4c2:	4b1e      	ldr	r3, [pc, #120]	; (1d53c <gatt_indicate+0xc4>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1d4c4:	4632      	mov	r2, r6
	req->func = func;
   1d4c6:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1d4c8:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1d4ca:	211d      	movs	r1, #29
   1d4cc:	4640      	mov	r0, r8
   1d4ce:	f7ff f843 	bl	1c558 <bt_att_create_pdu>
	if (!buf) {
   1d4d2:	4606      	mov	r6, r0
   1d4d4:	b968      	cbnz	r0, 1d4f2 <gatt_indicate+0x7a>
   1d4d6:	4b16      	ldr	r3, [pc, #88]	; (1d530 <gatt_indicate+0xb8>)
   1d4d8:	4916      	ldr	r1, [pc, #88]	; (1d534 <gatt_indicate+0xbc>)
		BT_WARN("No buffer available to send indication");
   1d4da:	4819      	ldr	r0, [pc, #100]	; (1d540 <gatt_indicate+0xc8>)
   1d4dc:	1ac9      	subs	r1, r1, r3
   1d4de:	08c9      	lsrs	r1, r1, #3
   1d4e0:	0189      	lsls	r1, r1, #6
   1d4e2:	f041 0102 	orr.w	r1, r1, #2
   1d4e6:	f012 fef7 	bl	302d8 <log_0>
		bt_att_req_free(req);
   1d4ea:	4620      	mov	r0, r4
   1d4ec:	f7ff fad4 	bl	1ca98 <bt_att_req_free>
   1d4f0:	e7e4      	b.n	1d4bc <gatt_indicate+0x44>
   1d4f2:	f100 0a08 	add.w	sl, r0, #8
   1d4f6:	2102      	movs	r1, #2
   1d4f8:	4650      	mov	r0, sl
   1d4fa:	f000 ff05 	bl	1e308 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1d4fe:	4607      	mov	r7, r0
   1d500:	8aa9      	ldrh	r1, [r5, #20]
   1d502:	f827 9b02 	strh.w	r9, [r7], #2
   1d506:	4650      	mov	r0, sl
   1d508:	f000 fefe 	bl	1e308 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d50c:	8aaa      	ldrh	r2, [r5, #20]
   1d50e:	6929      	ldr	r1, [r5, #16]
   1d510:	4638      	mov	r0, r7
   1d512:	f01a f936 	bl	37782 <memcpy>
	err = bt_att_req_send(conn, req);
   1d516:	4621      	mov	r1, r4
   1d518:	4640      	mov	r0, r8
	req->buf = buf;
   1d51a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1d51c:	f7ff fc06 	bl	1cd2c <bt_att_req_send>
	if (err) {
   1d520:	4605      	mov	r5, r0
   1d522:	2800      	cmp	r0, #0
   1d524:	d0be      	beq.n	1d4a4 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   1d526:	4620      	mov	r0, r4
   1d528:	f7ff fab6 	bl	1ca98 <bt_att_req_free>
   1d52c:	e7ba      	b.n	1d4a4 <gatt_indicate+0x2c>
   1d52e:	bf00      	nop
   1d530:	000387c0 	.word	0x000387c0
   1d534:	00038800 	.word	0x00038800
   1d538:	0003cada 	.word	0x0003cada
   1d53c:	000330b5 	.word	0x000330b5
   1d540:	0003caf0 	.word	0x0003caf0

0001d544 <bt_gatt_indicate>:
{
   1d544:	b530      	push	{r4, r5, lr}
   1d546:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1d548:	460c      	mov	r4, r1
{
   1d54a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1d54c:	b971      	cbnz	r1, 1d56c <bt_gatt_indicate+0x28>
   1d54e:	4946      	ldr	r1, [pc, #280]	; (1d668 <bt_gatt_indicate+0x124>)
   1d550:	f640 1315 	movw	r3, #2325	; 0x915
   1d554:	4a45      	ldr	r2, [pc, #276]	; (1d66c <bt_gatt_indicate+0x128>)
   1d556:	4846      	ldr	r0, [pc, #280]	; (1d670 <bt_gatt_indicate+0x12c>)
   1d558:	f012 fb8a 	bl	2fc70 <printk>
   1d55c:	4845      	ldr	r0, [pc, #276]	; (1d674 <bt_gatt_indicate+0x130>)
   1d55e:	f012 fb87 	bl	2fc70 <printk>
   1d562:	f640 1115 	movw	r1, #2325	; 0x915
   1d566:	4841      	ldr	r0, [pc, #260]	; (1d66c <bt_gatt_indicate+0x128>)
   1d568:	f012 fe68 	bl	3023c <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   1d56c:	6863      	ldr	r3, [r4, #4]
   1d56e:	b973      	cbnz	r3, 1d58e <bt_gatt_indicate+0x4a>
   1d570:	4941      	ldr	r1, [pc, #260]	; (1d678 <bt_gatt_indicate+0x134>)
   1d572:	f640 1316 	movw	r3, #2326	; 0x916
   1d576:	4a3d      	ldr	r2, [pc, #244]	; (1d66c <bt_gatt_indicate+0x128>)
   1d578:	483d      	ldr	r0, [pc, #244]	; (1d670 <bt_gatt_indicate+0x12c>)
   1d57a:	f012 fb79 	bl	2fc70 <printk>
   1d57e:	483d      	ldr	r0, [pc, #244]	; (1d674 <bt_gatt_indicate+0x130>)
   1d580:	f012 fb76 	bl	2fc70 <printk>
   1d584:	f640 1116 	movw	r1, #2326	; 0x916
   1d588:	4838      	ldr	r0, [pc, #224]	; (1d66c <bt_gatt_indicate+0x128>)
   1d58a:	f012 fe57 	bl	3023c <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d58e:	4b3b      	ldr	r3, [pc, #236]	; (1d67c <bt_gatt_indicate+0x138>)
   1d590:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1d594:	079a      	lsls	r2, r3, #30
   1d596:	d561      	bpl.n	1d65c <bt_gatt_indicate+0x118>
	data.attr = params->attr;
   1d598:	6860      	ldr	r0, [r4, #4]
   1d59a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1d59c:	b115      	cbz	r5, 1d5a4 <bt_gatt_indicate+0x60>
   1d59e:	7aab      	ldrb	r3, [r5, #10]
   1d5a0:	2b07      	cmp	r3, #7
   1d5a2:	d15e      	bne.n	1d662 <bt_gatt_indicate+0x11e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1d5a4:	f7ff fe54 	bl	1d250 <bt_gatt_attr_get_handle>
   1d5a8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1d5ac:	b918      	cbnz	r0, 1d5b6 <bt_gatt_indicate+0x72>
		return -ENOENT;
   1d5ae:	f06f 0001 	mvn.w	r0, #1
}
   1d5b2:	b00b      	add	sp, #44	; 0x2c
   1d5b4:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1d5b6:	6822      	ldr	r2, [r4, #0]
   1d5b8:	b9ba      	cbnz	r2, 1d5ea <bt_gatt_indicate+0xa6>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1d5ba:	9b05      	ldr	r3, [sp, #20]
   1d5bc:	a904      	add	r1, sp, #16
   1d5be:	6818      	ldr	r0, [r3, #0]
   1d5c0:	2300      	movs	r3, #0
   1d5c2:	f88d 3010 	strb.w	r3, [sp, #16]
   1d5c6:	f642 0303 	movw	r3, #10243	; 0x2803
   1d5ca:	f8ad 3012 	strh.w	r3, [sp, #18]
   1d5ce:	f014 ff55 	bl	3247c <bt_uuid_cmp>
   1d5d2:	b1d0      	cbz	r0, 1d60a <bt_gatt_indicate+0xc6>
	if (conn) {
   1d5d4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1d5d8:	b325      	cbz	r5, 1d624 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   1d5da:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1d5dc:	4601      	mov	r1, r0
   1d5de:	4622      	mov	r2, r4
   1d5e0:	4628      	mov	r0, r5
		params->_ref = 1;
   1d5e2:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1d5e4:	f7ff ff48 	bl	1d478 <gatt_indicate>
   1d5e8:	e7e3      	b.n	1d5b2 <bt_gatt_indicate+0x6e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1d5ea:	a905      	add	r1, sp, #20
   1d5ec:	9102      	str	r1, [sp, #8]
   1d5ee:	4924      	ldr	r1, [pc, #144]	; (1d680 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   1d5f0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1d5f2:	9101      	str	r1, [sp, #4]
   1d5f4:	2101      	movs	r1, #1
   1d5f6:	9100      	str	r1, [sp, #0]
   1d5f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1d5fc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1d5fe:	f7ff fe73 	bl	1d2e8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1d602:	9b05      	ldr	r3, [sp, #20]
   1d604:	2b00      	cmp	r3, #0
   1d606:	d1d8      	bne.n	1d5ba <bt_gatt_indicate+0x76>
   1d608:	e7d1      	b.n	1d5ae <bt_gatt_indicate+0x6a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1d60a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1d60c:	68c3      	ldr	r3, [r0, #12]
   1d60e:	799b      	ldrb	r3, [r3, #6]
   1d610:	069b      	lsls	r3, r3, #26
   1d612:	d402      	bmi.n	1d61a <bt_gatt_indicate+0xd6>
			return -EINVAL;
   1d614:	f06f 0015 	mvn.w	r0, #21
   1d618:	e7cb      	b.n	1d5b2 <bt_gatt_indicate+0x6e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1d61a:	f015 ff60 	bl	334de <bt_gatt_attr_value_handle>
   1d61e:	f8ad 0018 	strh.w	r0, [sp, #24]
   1d622:	e7d7      	b.n	1d5d4 <bt_gatt_indicate+0x90>
	data.err = -ENOTCONN;
   1d624:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d628:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1d62a:	2302      	movs	r3, #2
   1d62c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d630:	f642 1302 	movw	r3, #10498	; 0x2902
   1d634:	f8ad 3012 	strh.w	r3, [sp, #18]
   1d638:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1d63a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d63c:	9302      	str	r3, [sp, #8]
   1d63e:	4b11      	ldr	r3, [pc, #68]	; (1d684 <bt_gatt_indicate+0x140>)
   1d640:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d644:	9301      	str	r3, [sp, #4]
   1d646:	2301      	movs	r3, #1
   1d648:	aa04      	add	r2, sp, #16
   1d64a:	9300      	str	r3, [sp, #0]
   1d64c:	462b      	mov	r3, r5
	data.ind_params = params;
   1d64e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d650:	f88d 5010 	strb.w	r5, [sp, #16]
   1d654:	f7ff fe48 	bl	1d2e8 <bt_gatt_foreach_attr_type>
	return data.err;
   1d658:	9807      	ldr	r0, [sp, #28]
   1d65a:	e7aa      	b.n	1d5b2 <bt_gatt_indicate+0x6e>
		return -EAGAIN;
   1d65c:	f06f 000a 	mvn.w	r0, #10
   1d660:	e7a7      	b.n	1d5b2 <bt_gatt_indicate+0x6e>
		return -ENOTCONN;
   1d662:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d666:	e7a4      	b.n	1d5b2 <bt_gatt_indicate+0x6e>
   1d668:	0003ee06 	.word	0x0003ee06
   1d66c:	0003ca49 	.word	0x0003ca49
   1d670:	0003a56b 	.word	0x0003a56b
   1d674:	0003cb17 	.word	0x0003cb17
   1d678:	0003cb2d 	.word	0x0003cb2d
   1d67c:	20014598 	.word	0x20014598
   1d680:	000330db 	.word	0x000330db
   1d684:	0001d7bd 	.word	0x0001d7bd

0001d688 <sc_process>:
{
   1d688:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d68a:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1d68c:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1d690:	e8d5 3faf 	lda	r3, [r5]
   1d694:	079b      	lsls	r3, r3, #30
   1d696:	d50e      	bpl.n	1d6b6 <sc_process+0x2e>
   1d698:	491a      	ldr	r1, [pc, #104]	; (1d704 <sc_process+0x7c>)
   1d69a:	f240 33de 	movw	r3, #990	; 0x3de
   1d69e:	4a1a      	ldr	r2, [pc, #104]	; (1d708 <sc_process+0x80>)
   1d6a0:	481a      	ldr	r0, [pc, #104]	; (1d70c <sc_process+0x84>)
   1d6a2:	f012 fae5 	bl	2fc70 <printk>
   1d6a6:	481a      	ldr	r0, [pc, #104]	; (1d710 <sc_process+0x88>)
   1d6a8:	f012 fae2 	bl	2fc70 <printk>
   1d6ac:	f240 31de 	movw	r1, #990	; 0x3de
   1d6b0:	4815      	ldr	r0, [pc, #84]	; (1d708 <sc_process+0x80>)
   1d6b2:	f012 fdc3 	bl	3023c <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1d6b6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1d6ba:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d6bc:	e8d5 3fef 	ldaex	r3, [r5]
   1d6c0:	f023 0301 	bic.w	r3, r3, #1
   1d6c4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1d6c8:	2a00      	cmp	r2, #0
   1d6ca:	d1f7      	bne.n	1d6bc <sc_process+0x34>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1d6cc:	4b11      	ldr	r3, [pc, #68]	; (1d714 <sc_process+0x8c>)
	sc->start = 0U;
   1d6ce:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1d6d0:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1d6d4:	4b10      	ldr	r3, [pc, #64]	; (1d718 <sc_process+0x90>)
	sc->start = 0U;
   1d6d6:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   1d6da:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1d6de:	ab01      	add	r3, sp, #4
   1d6e0:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1d6e4:	2304      	movs	r3, #4
	sc->end = 0U;
   1d6e6:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1d6ea:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1d6ee:	f1a4 0120 	sub.w	r1, r4, #32
   1d6f2:	f7ff ff27 	bl	1d544 <bt_gatt_indicate>
   1d6f6:	b918      	cbnz	r0, 1d700 <sc_process+0x78>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1d6f8:	2101      	movs	r1, #1
   1d6fa:	4628      	mov	r0, r5
   1d6fc:	f015 fe33 	bl	33366 <atomic_set_bit>
}
   1d700:	b003      	add	sp, #12
   1d702:	bd30      	pop	{r4, r5, pc}
   1d704:	0003cb3a 	.word	0x0003cb3a
   1d708:	0003ca49 	.word	0x0003ca49
   1d70c:	0003a56b 	.word	0x0003a56b
   1d710:	0003cb6b 	.word	0x0003cb6b
   1d714:	00038ff4 	.word	0x00038ff4
   1d718:	0001d089 	.word	0x0001d089

0001d71c <gatt_notify>:
{
   1d71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d720:	4614      	mov	r4, r2
   1d722:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1d724:	2214      	movs	r2, #20
   1d726:	6861      	ldr	r1, [r4, #4]
{
   1d728:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1d72a:	f015 ff2c 	bl	33586 <bt_gatt_check_perm>
   1d72e:	b168      	cbz	r0, 1d74c <gatt_notify+0x30>
   1d730:	4b1e      	ldr	r3, [pc, #120]	; (1d7ac <gatt_notify+0x90>)
   1d732:	491f      	ldr	r1, [pc, #124]	; (1d7b0 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   1d734:	481f      	ldr	r0, [pc, #124]	; (1d7b4 <gatt_notify+0x98>)
   1d736:	1ac9      	subs	r1, r1, r3
   1d738:	08c9      	lsrs	r1, r1, #3
   1d73a:	0189      	lsls	r1, r1, #6
   1d73c:	f041 0102 	orr.w	r1, r1, #2
   1d740:	f012 fdca 	bl	302d8 <log_0>
		return -EPERM;
   1d744:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   1d74c:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1d74e:	211b      	movs	r1, #27
   1d750:	4638      	mov	r0, r7
   1d752:	3202      	adds	r2, #2
   1d754:	f7fe ff00 	bl	1c558 <bt_att_create_pdu>
	if (!buf) {
   1d758:	4605      	mov	r5, r0
   1d75a:	b960      	cbnz	r0, 1d776 <gatt_notify+0x5a>
   1d75c:	4b13      	ldr	r3, [pc, #76]	; (1d7ac <gatt_notify+0x90>)
   1d75e:	4914      	ldr	r1, [pc, #80]	; (1d7b0 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   1d760:	4815      	ldr	r0, [pc, #84]	; (1d7b8 <gatt_notify+0x9c>)
   1d762:	1ac9      	subs	r1, r1, r3
   1d764:	08c9      	lsrs	r1, r1, #3
   1d766:	0189      	lsls	r1, r1, #6
   1d768:	f041 0102 	orr.w	r1, r1, #2
   1d76c:	f012 fdb4 	bl	302d8 <log_0>
		return -ENOMEM;
   1d770:	f06f 000b 	mvn.w	r0, #11
   1d774:	e7e8      	b.n	1d748 <gatt_notify+0x2c>
   1d776:	f100 0908 	add.w	r9, r0, #8
   1d77a:	2102      	movs	r1, #2
   1d77c:	4648      	mov	r0, r9
   1d77e:	f000 fdc3 	bl	1e308 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1d782:	4606      	mov	r6, r0
   1d784:	89a1      	ldrh	r1, [r4, #12]
   1d786:	f826 8b02 	strh.w	r8, [r6], #2
   1d78a:	4648      	mov	r0, r9
   1d78c:	f000 fdbc 	bl	1e308 <net_buf_simple_add>
   1d790:	89a2      	ldrh	r2, [r4, #12]
   1d792:	68a1      	ldr	r1, [r4, #8]
   1d794:	4630      	mov	r0, r6
   1d796:	f019 fff4 	bl	37782 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1d79a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1d79e:	4629      	mov	r1, r5
   1d7a0:	4638      	mov	r0, r7
}
   1d7a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1d7a6:	f7ff ba53 	b.w	1cc50 <bt_att_send>
   1d7aa:	bf00      	nop
   1d7ac:	000387c0 	.word	0x000387c0
   1d7b0:	00038800 	.word	0x00038800
   1d7b4:	0003cada 	.word	0x0003cada
   1d7b8:	0003cb86 	.word	0x0003cb86

0001d7bc <notify_cb>:
{
   1d7bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d7be:	4b37      	ldr	r3, [pc, #220]	; (1d89c <notify_cb+0xe0>)
{
   1d7c0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d7c2:	6882      	ldr	r2, [r0, #8]
{
   1d7c4:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d7c6:	429a      	cmp	r2, r3
   1d7c8:	d12d      	bne.n	1d826 <notify_cb+0x6a>
	ccc = attr->user_data;
   1d7ca:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1d7cc:	4b34      	ldr	r3, [pc, #208]	; (1d8a0 <notify_cb+0xe4>)
   1d7ce:	429f      	cmp	r7, r3
   1d7d0:	d119      	bne.n	1d806 <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d7d2:	2300      	movs	r3, #0
   1d7d4:	4d33      	ldr	r5, [pc, #204]	; (1d8a4 <notify_cb+0xe8>)
   1d7d6:	4669      	mov	r1, sp
   1d7d8:	1c68      	adds	r0, r5, #1
   1d7da:	9300      	str	r3, [sp, #0]
   1d7dc:	f8cd 3003 	str.w	r3, [sp, #3]
   1d7e0:	f015 fcd7 	bl	33192 <bt_addr_le_cmp>
   1d7e4:	b178      	cbz	r0, 1d806 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1d7e6:	4629      	mov	r1, r5
   1d7e8:	2207      	movs	r2, #7
   1d7ea:	f811 0b01 	ldrb.w	r0, [r1], #1
   1d7ee:	f7fd fd73 	bl	1b2d8 <bt_conn_lookup_state_le>
			if (!conn) {
   1d7f2:	b9e0      	cbnz	r0, 1d82e <notify_cb+0x72>
				sc_save(cfg->id, &cfg->peer,
   1d7f4:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   1d7f6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1d7f8:	f811 0b01 	ldrb.w	r0, [r1], #1
				sc = (struct sc_data *)data->ind_params->data;
   1d7fc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1d7fe:	8853      	ldrh	r3, [r2, #2]
   1d800:	8812      	ldrh	r2, [r2, #0]
   1d802:	f7ff fbb3 	bl	1cf6c <sc_save>
		if (cfg->value != data->type) {
   1d806:	893a      	ldrh	r2, [r7, #8]
   1d808:	89a3      	ldrh	r3, [r4, #12]
   1d80a:	429a      	cmp	r2, r3
   1d80c:	d10b      	bne.n	1d826 <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d80e:	4639      	mov	r1, r7
   1d810:	f811 0b01 	ldrb.w	r0, [r1], #1
   1d814:	f7fd fd1a 	bl	1b24c <bt_conn_lookup_addr_le>
		if (!conn) {
   1d818:	4605      	mov	r5, r0
   1d81a:	b120      	cbz	r0, 1d826 <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
   1d81c:	7a83      	ldrb	r3, [r0, #10]
   1d81e:	2b07      	cmp	r3, #7
   1d820:	d008      	beq.n	1d834 <notify_cb+0x78>
			bt_conn_unref(conn);
   1d822:	f7fd fbdf 	bl	1afe4 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   1d826:	2701      	movs	r7, #1
}
   1d828:	4638      	mov	r0, r7
   1d82a:	b003      	add	sp, #12
   1d82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1d82e:	f7fd fbd9 	bl	1afe4 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d832:	e7e8      	b.n	1d806 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1d834:	697b      	ldr	r3, [r7, #20]
   1d836:	b123      	cbz	r3, 1d842 <notify_cb+0x86>
   1d838:	4631      	mov	r1, r6
   1d83a:	4798      	blx	r3
   1d83c:	b908      	cbnz	r0, 1d842 <notify_cb+0x86>
			bt_conn_unref(conn);
   1d83e:	4628      	mov	r0, r5
   1d840:	e7ef      	b.n	1d822 <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
   1d842:	2214      	movs	r2, #20
   1d844:	4631      	mov	r1, r6
   1d846:	4628      	mov	r0, r5
   1d848:	f015 fe9d 	bl	33586 <bt_gatt_check_perm>
   1d84c:	4607      	mov	r7, r0
   1d84e:	b150      	cbz	r0, 1d866 <notify_cb+0xaa>
   1d850:	4b15      	ldr	r3, [pc, #84]	; (1d8a8 <notify_cb+0xec>)
   1d852:	4916      	ldr	r1, [pc, #88]	; (1d8ac <notify_cb+0xf0>)
			BT_WARN("Link is not encrypted");
   1d854:	4816      	ldr	r0, [pc, #88]	; (1d8b0 <notify_cb+0xf4>)
   1d856:	1ac9      	subs	r1, r1, r3
   1d858:	08c9      	lsrs	r1, r1, #3
   1d85a:	0189      	lsls	r1, r1, #6
   1d85c:	f041 0102 	orr.w	r1, r1, #2
   1d860:	f012 fd3a 	bl	302d8 <log_0>
			continue;
   1d864:	e7df      	b.n	1d826 <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1d866:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   1d868:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1d86a:	2b02      	cmp	r3, #2
   1d86c:	88a1      	ldrh	r1, [r4, #4]
   1d86e:	6922      	ldr	r2, [r4, #16]
   1d870:	d10f      	bne.n	1d892 <notify_cb+0xd6>
			err = gatt_indicate(conn, data->handle,
   1d872:	f7ff fe01 	bl	1d478 <gatt_indicate>
			if (err == 0) {
   1d876:	4606      	mov	r6, r0
   1d878:	b918      	cbnz	r0, 1d882 <notify_cb+0xc6>
				data->ind_params->_ref++;
   1d87a:	6922      	ldr	r2, [r4, #16]
   1d87c:	7d93      	ldrb	r3, [r2, #22]
   1d87e:	3301      	adds	r3, #1
   1d880:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1d882:	4628      	mov	r0, r5
   1d884:	f7fd fbae 	bl	1afe4 <bt_conn_unref>
		if (err < 0) {
   1d888:	2e00      	cmp	r6, #0
   1d88a:	dbcd      	blt.n	1d828 <notify_cb+0x6c>
		data->err = 0;
   1d88c:	2300      	movs	r3, #0
   1d88e:	60a3      	str	r3, [r4, #8]
   1d890:	e7c9      	b.n	1d826 <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1d892:	f7ff ff43 	bl	1d71c <gatt_notify>
   1d896:	4606      	mov	r6, r0
   1d898:	e7f3      	b.n	1d882 <notify_cb+0xc6>
   1d89a:	bf00      	nop
   1d89c:	0001ce99 	.word	0x0001ce99
   1d8a0:	2001481c 	.word	0x2001481c
   1d8a4:	2001ad54 	.word	0x2001ad54
   1d8a8:	000387c0 	.word	0x000387c0
   1d8ac:	00038800 	.word	0x00038800
   1d8b0:	0003cada 	.word	0x0003cada

0001d8b4 <update_ccc>:
{
   1d8b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d8b6:	4b31      	ldr	r3, [pc, #196]	; (1d97c <update_ccc+0xc8>)
	struct bt_conn *conn = data->conn;
   1d8b8:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d8ba:	6882      	ldr	r2, [r0, #8]
{
   1d8bc:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d8be:	429a      	cmp	r2, r3
   1d8c0:	d11b      	bne.n	1d8fa <update_ccc+0x46>
	ccc = attr->user_data;
   1d8c2:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1d8c4:	8933      	ldrh	r3, [r6, #8]
   1d8c6:	b1c3      	cbz	r3, 1d8fa <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d8c8:	4632      	mov	r2, r6
   1d8ca:	4628      	mov	r0, r5
   1d8cc:	f812 1b01 	ldrb.w	r1, [r2], #1
   1d8d0:	f014 ffaf 	bl	32832 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1d8d4:	b188      	cbz	r0, 1d8fa <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1d8d6:	222a      	movs	r2, #42	; 0x2a
   1d8d8:	4621      	mov	r1, r4
   1d8da:	4628      	mov	r0, r5
   1d8dc:	f015 fe53 	bl	33586 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1d8e0:	2803      	cmp	r0, #3
   1d8e2:	d10d      	bne.n	1d900 <update_ccc+0x4c>
   1d8e4:	4a26      	ldr	r2, [pc, #152]	; (1d980 <update_ccc+0xcc>)
   1d8e6:	4b27      	ldr	r3, [pc, #156]	; (1d984 <update_ccc+0xd0>)
				BT_WARN("CCC %p not writable", attr);
   1d8e8:	4621      	mov	r1, r4
   1d8ea:	1ad2      	subs	r2, r2, r3
   1d8ec:	08d2      	lsrs	r2, r2, #3
   1d8ee:	0192      	lsls	r2, r2, #6
   1d8f0:	4825      	ldr	r0, [pc, #148]	; (1d988 <update_ccc+0xd4>)
   1d8f2:	f042 0202 	orr.w	r2, r2, #2
   1d8f6:	f012 fcfc 	bl	302f2 <log_1>
}
   1d8fa:	2001      	movs	r0, #1
   1d8fc:	b002      	add	sp, #8
   1d8fe:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
   1d900:	4631      	mov	r1, r6
   1d902:	4620      	mov	r0, r4
   1d904:	f015 fbcc 	bl	330a0 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1d908:	4b20      	ldr	r3, [pc, #128]	; (1d98c <update_ccc+0xd8>)
   1d90a:	429e      	cmp	r6, r3
   1d90c:	d1f5      	bne.n	1d8fa <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d90e:	7a28      	ldrb	r0, [r5, #8]
   1d910:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1d914:	f7ff fa92 	bl	1ce3c <find_sc_cfg>
	if (!cfg) {
   1d918:	4604      	mov	r4, r0
   1d91a:	2800      	cmp	r0, #0
   1d91c:	d0ed      	beq.n	1d8fa <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
   1d91e:	8902      	ldrh	r2, [r0, #8]
   1d920:	8943      	ldrh	r3, [r0, #10]
   1d922:	ea52 0103 	orrs.w	r1, r2, r3
   1d926:	d0e8      	beq.n	1d8fa <update_ccc+0x46>
	index = bt_conn_index(conn);
   1d928:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1d92a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1d92e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1d932:	f7fd fed1 	bl	1b6d8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1d936:	2318      	movs	r3, #24
   1d938:	4915      	ldr	r1, [pc, #84]	; (1d990 <update_ccc+0xdc>)
   1d93a:	4a16      	ldr	r2, [pc, #88]	; (1d994 <update_ccc+0xe0>)
   1d93c:	fb03 1300 	mla	r3, r3, r0, r1
   1d940:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1d942:	4a15      	ldr	r2, [pc, #84]	; (1d998 <update_ccc+0xe4>)
   1d944:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1d946:	aa01      	add	r2, sp, #4
   1d948:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1d94a:	2204      	movs	r2, #4
   1d94c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d94e:	b203      	sxth	r3, r0
   1d950:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d954:	4628      	mov	r0, r5
   1d956:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1d95a:	f7ff fdf3 	bl	1d544 <bt_gatt_indicate>
   1d95e:	b148      	cbz	r0, 1d974 <update_ccc+0xc0>
   1d960:	4907      	ldr	r1, [pc, #28]	; (1d980 <update_ccc+0xcc>)
   1d962:	4b08      	ldr	r3, [pc, #32]	; (1d984 <update_ccc+0xd0>)
		BT_ERR("SC restore indication failed");
   1d964:	480d      	ldr	r0, [pc, #52]	; (1d99c <update_ccc+0xe8>)
   1d966:	1ac9      	subs	r1, r1, r3
   1d968:	08c9      	lsrs	r1, r1, #3
   1d96a:	0189      	lsls	r1, r1, #6
   1d96c:	f041 0101 	orr.w	r1, r1, #1
   1d970:	f012 fcb2 	bl	302d8 <log_0>
__ssp_bos_icheck3(memset, void *, int)
   1d974:	2300      	movs	r3, #0
   1d976:	60a3      	str	r3, [r4, #8]
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
   1d978:	e7bf      	b.n	1d8fa <update_ccc+0x46>
   1d97a:	bf00      	nop
   1d97c:	0001ce99 	.word	0x0001ce99
   1d980:	00038800 	.word	0x00038800
   1d984:	000387c0 	.word	0x000387c0
   1d988:	0003cbaf 	.word	0x0003cbaf
   1d98c:	2001481c 	.word	0x2001481c
   1d990:	200162c0 	.word	0x200162c0
   1d994:	00038ff4 	.word	0x00038ff4
   1d998:	0003337b 	.word	0x0003337b
   1d99c:	0003cbc3 	.word	0x0003cbc3

0001d9a0 <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
   1d9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9a4:	460e      	mov	r6, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp, *next;
	bool has_subscription = false, found = false;
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
   1d9a6:	4680      	mov	r8, r0
   1d9a8:	b970      	cbnz	r0, 1d9c8 <bt_gatt_unsubscribe+0x28>
   1d9aa:	494a      	ldr	r1, [pc, #296]	; (1dad4 <bt_gatt_unsubscribe+0x134>)
   1d9ac:	f241 13b5 	movw	r3, #4533	; 0x11b5
   1d9b0:	4a49      	ldr	r2, [pc, #292]	; (1dad8 <bt_gatt_unsubscribe+0x138>)
   1d9b2:	484a      	ldr	r0, [pc, #296]	; (1dadc <bt_gatt_unsubscribe+0x13c>)
   1d9b4:	f012 f95c 	bl	2fc70 <printk>
   1d9b8:	4849      	ldr	r0, [pc, #292]	; (1dae0 <bt_gatt_unsubscribe+0x140>)
   1d9ba:	f012 f959 	bl	2fc70 <printk>
   1d9be:	f241 11b5 	movw	r1, #4533	; 0x11b5
   1d9c2:	4845      	ldr	r0, [pc, #276]	; (1dad8 <bt_gatt_unsubscribe+0x138>)
   1d9c4:	f012 fc3a 	bl	3023c <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   1d9c8:	b976      	cbnz	r6, 1d9e8 <bt_gatt_unsubscribe+0x48>
   1d9ca:	4946      	ldr	r1, [pc, #280]	; (1dae4 <bt_gatt_unsubscribe+0x144>)
   1d9cc:	f241 13b6 	movw	r3, #4534	; 0x11b6
   1d9d0:	4a41      	ldr	r2, [pc, #260]	; (1dad8 <bt_gatt_unsubscribe+0x138>)
   1d9d2:	4842      	ldr	r0, [pc, #264]	; (1dadc <bt_gatt_unsubscribe+0x13c>)
   1d9d4:	f012 f94c 	bl	2fc70 <printk>
   1d9d8:	4841      	ldr	r0, [pc, #260]	; (1dae0 <bt_gatt_unsubscribe+0x140>)
   1d9da:	f012 f949 	bl	2fc70 <printk>
   1d9de:	f241 11b6 	movw	r1, #4534	; 0x11b6
   1d9e2:	483d      	ldr	r0, [pc, #244]	; (1dad8 <bt_gatt_unsubscribe+0x138>)
   1d9e4:	f012 fc2a 	bl	3023c <assert_post_action>

	if (conn->state != BT_CONN_CONNECTED) {
   1d9e8:	f898 300a 	ldrb.w	r3, [r8, #10]
   1d9ec:	2b07      	cmp	r3, #7
   1d9ee:	d16d      	bne.n	1dacc <bt_gatt_unsubscribe+0x12c>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
   1d9f0:	4640      	mov	r0, r8
   1d9f2:	f7ff fa33 	bl	1ce5c <gatt_sub_find>
	if (!sub) {
   1d9f6:	4607      	mov	r7, r0
   1d9f8:	b920      	cbnz	r0, 1da04 <bt_gatt_unsubscribe+0x64>
		return -EINVAL;
   1d9fa:	f06f 0015 	mvn.w	r0, #21
	}

	params->value = 0x0000;

	return gatt_write_ccc(conn, params);
}
   1d9fe:	b003      	add	sp, #12
   1da00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1da04:	6884      	ldr	r4, [r0, #8]
   1da06:	b1d4      	cbz	r4, 1da3e <bt_gatt_unsubscribe+0x9e>
   1da08:	f1b4 0514 	subs.w	r5, r4, #20
   1da0c:	d019      	beq.n	1da42 <bt_gatt_unsubscribe+0xa2>
   1da0e:	6824      	ldr	r4, [r4, #0]
   1da10:	b104      	cbz	r4, 1da14 <bt_gatt_unsubscribe+0x74>
   1da12:	3c14      	subs	r4, #20
   1da14:	f04f 0900 	mov.w	r9, #0
   1da18:	46cb      	mov	fp, r9
   1da1a:	46ca      	mov	sl, r9
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1da1c:	f106 0210 	add.w	r2, r6, #16
   1da20:	b98d      	cbnz	r5, 1da46 <bt_gatt_unsubscribe+0xa6>
	if (!found) {
   1da22:	f1bb 0f00 	cmp.w	fp, #0
   1da26:	d0e8      	beq.n	1d9fa <bt_gatt_unsubscribe+0x5a>
	if (has_subscription) {
   1da28:	f1ba 0f00 	cmp.w	sl, #0
   1da2c:	d045      	beq.n	1daba <bt_gatt_unsubscribe+0x11a>
		params->notify(conn, params, NULL, 0);
   1da2e:	462b      	mov	r3, r5
   1da30:	462a      	mov	r2, r5
   1da32:	4631      	mov	r1, r6
   1da34:	4640      	mov	r0, r8
   1da36:	6834      	ldr	r4, [r6, #0]
   1da38:	47a0      	blx	r4
		return 0;
   1da3a:	4628      	mov	r0, r5
   1da3c:	e7df      	b.n	1d9fe <bt_gatt_unsubscribe+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1da3e:	4625      	mov	r5, r4
   1da40:	e7e8      	b.n	1da14 <bt_gatt_unsubscribe+0x74>
   1da42:	462c      	mov	r4, r5
   1da44:	e7e6      	b.n	1da14 <bt_gatt_unsubscribe+0x74>
		if (params == tmp) {
   1da46:	42b5      	cmp	r5, r6
   1da48:	f105 0114 	add.w	r1, r5, #20
   1da4c:	d128      	bne.n	1daa0 <bt_gatt_unsubscribe+0x100>
Z_GENLIST_REMOVE(slist, snode)
   1da4e:	696b      	ldr	r3, [r5, #20]
   1da50:	f1b9 0f00 	cmp.w	r9, #0
   1da54:	d11c      	bne.n	1da90 <bt_gatt_unsubscribe+0xf0>
   1da56:	68f8      	ldr	r0, [r7, #12]
	list->head = node;
   1da58:	60bb      	str	r3, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   1da5a:	4281      	cmp	r1, r0
   1da5c:	d100      	bne.n	1da60 <bt_gatt_unsubscribe+0xc0>
	list->tail = node;
   1da5e:	60fb      	str	r3, [r7, #12]
	parent->next = child;
   1da60:	2300      	movs	r3, #0
   1da62:	616b      	str	r3, [r5, #20]
   1da64:	e8d2 1faf 	lda	r1, [r2]
			if (atomic_test_bit(params->flags,
   1da68:	074b      	lsls	r3, r1, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1da6a:	f3c1 0b80 	ubfx	fp, r1, #2, #1
   1da6e:	d51f      	bpl.n	1dab0 <bt_gatt_unsubscribe+0x110>

void bt_gatt_cancel(struct bt_conn *conn, void *params)
{
	bt_att_req_cancel(conn, params);
   1da70:	4631      	mov	r1, r6
   1da72:	4640      	mov	r0, r8
   1da74:	9201      	str	r2, [sp, #4]
   1da76:	f7ff f993 	bl	1cda0 <bt_att_req_cancel>
}
   1da7a:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1da7c:	b1dc      	cbz	r4, 1dab6 <bt_gatt_unsubscribe+0x116>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1da7e:	f114 0114 	adds.w	r1, r4, #20
   1da82:	d002      	beq.n	1da8a <bt_gatt_unsubscribe+0xea>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1da84:	6961      	ldr	r1, [r4, #20]
   1da86:	b101      	cbz	r1, 1da8a <bt_gatt_unsubscribe+0xea>
   1da88:	3914      	subs	r1, #20
   1da8a:	4625      	mov	r5, r4
   1da8c:	460c      	mov	r4, r1
   1da8e:	e7c7      	b.n	1da20 <bt_gatt_unsubscribe+0x80>
	parent->next = child;
   1da90:	f8c9 3000 	str.w	r3, [r9]
Z_GENLIST_REMOVE(slist, snode)
   1da94:	68f8      	ldr	r0, [r7, #12]
   1da96:	4281      	cmp	r1, r0
	list->tail = node;
   1da98:	bf08      	it	eq
   1da9a:	f8c7 900c 	streq.w	r9, [r7, #12]
}
   1da9e:	e7df      	b.n	1da60 <bt_gatt_unsubscribe+0xc0>
		if (tmp->value_handle == params->value_handle) {
   1daa0:	892d      	ldrh	r5, [r5, #8]
   1daa2:	8930      	ldrh	r0, [r6, #8]
   1daa4:	4689      	mov	r9, r1
   1daa6:	4285      	cmp	r5, r0
   1daa8:	bf08      	it	eq
   1daaa:	f04f 0a01 	moveq.w	sl, #1
   1daae:	e7e5      	b.n	1da7c <bt_gatt_unsubscribe+0xdc>
			found = true;
   1dab0:	f04f 0b01 	mov.w	fp, #1
   1dab4:	e7e2      	b.n	1da7c <bt_gatt_unsubscribe+0xdc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1dab6:	4621      	mov	r1, r4
   1dab8:	e7e7      	b.n	1da8a <bt_gatt_unsubscribe+0xea>
	return gatt_write_ccc(conn, params);
   1daba:	4631      	mov	r1, r6
   1dabc:	4640      	mov	r0, r8
	params->value = 0x0000;
   1dabe:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   1dac2:	b003      	add	sp, #12
   1dac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   1dac8:	f7ff bb02 	b.w	1d0d0 <gatt_write_ccc>
		return -ENOTCONN;
   1dacc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1dad0:	e795      	b.n	1d9fe <bt_gatt_unsubscribe+0x5e>
   1dad2:	bf00      	nop
   1dad4:	0003beaf 	.word	0x0003beaf
   1dad8:	0003ca49 	.word	0x0003ca49
   1dadc:	0003a56b 	.word	0x0003a56b
   1dae0:	0003cb17 	.word	0x0003cb17
   1dae4:	0003ee06 	.word	0x0003ee06

0001dae8 <bt_gatt_mult_notification>:
{
   1dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1daec:	b087      	sub	sp, #28
   1daee:	4682      	mov	sl, r0
   1daf0:	460c      	mov	r4, r1
   1daf2:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
   1daf4:	f7ff f9b2 	bl	1ce5c <gatt_sub_find>
	if (!sub) {
   1daf8:	4607      	mov	r7, r0
   1dafa:	b1f8      	cbz	r0, 1db3c <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1dafc:	4632      	mov	r2, r6
   1dafe:	4621      	mov	r1, r4
   1db00:	a803      	add	r0, sp, #12
   1db02:	f015 fde5 	bl	336d0 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1db06:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1db0a:	2b04      	cmp	r3, #4
   1db0c:	d916      	bls.n	1db3c <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1db0e:	2104      	movs	r1, #4
   1db10:	a803      	add	r0, sp, #12
   1db12:	f000 fbd7 	bl	1e2c4 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1db16:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
   1db1a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1db1e:	4605      	mov	r5, r0
		if (len > buf.len) {
   1db20:	4543      	cmp	r3, r8
   1db22:	d20e      	bcs.n	1db42 <bt_gatt_mult_notification+0x5a>
   1db24:	4a1c      	ldr	r2, [pc, #112]	; (1db98 <bt_gatt_mult_notification+0xb0>)
   1db26:	4b1d      	ldr	r3, [pc, #116]	; (1db9c <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
   1db28:	4641      	mov	r1, r8
   1db2a:	1a9b      	subs	r3, r3, r2
   1db2c:	08db      	lsrs	r3, r3, #3
   1db2e:	019b      	lsls	r3, r3, #6
   1db30:	4632      	mov	r2, r6
   1db32:	481b      	ldr	r0, [pc, #108]	; (1dba0 <bt_gatt_mult_notification+0xb8>)
   1db34:	f043 0301 	orr.w	r3, r3, #1
   1db38:	f012 fbef 	bl	3031a <log_2>
}
   1db3c:	b007      	add	sp, #28
   1db3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1db42:	68bb      	ldr	r3, [r7, #8]
   1db44:	b31b      	cbz	r3, 1db8e <bt_gatt_mult_notification+0xa6>
   1db46:	f1b3 0914 	subs.w	r9, r3, #20
   1db4a:	d020      	beq.n	1db8e <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1db4c:	681c      	ldr	r4, [r3, #0]
   1db4e:	b104      	cbz	r4, 1db52 <bt_gatt_mult_notification+0x6a>
   1db50:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1db52:	462b      	mov	r3, r5
   1db54:	f833 bb04 	ldrh.w	fp, [r3], #4
   1db58:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
   1db5a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1db5e:	455b      	cmp	r3, fp
   1db60:	d10b      	bne.n	1db7a <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
   1db62:	4643      	mov	r3, r8
   1db64:	4649      	mov	r1, r9
   1db66:	4650      	mov	r0, sl
   1db68:	9a01      	ldr	r2, [sp, #4]
   1db6a:	f8d9 5000 	ldr.w	r5, [r9]
   1db6e:	47a8      	blx	r5
   1db70:	b918      	cbnz	r0, 1db7a <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
   1db72:	4649      	mov	r1, r9
   1db74:	4650      	mov	r0, sl
   1db76:	f7ff ff13 	bl	1d9a0 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1db7a:	b144      	cbz	r4, 1db8e <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1db7c:	f114 0314 	adds.w	r3, r4, #20
   1db80:	d002      	beq.n	1db88 <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1db82:	6963      	ldr	r3, [r4, #20]
   1db84:	b103      	cbz	r3, 1db88 <bt_gatt_mult_notification+0xa0>
   1db86:	3b14      	subs	r3, #20
{
   1db88:	46a1      	mov	r9, r4
   1db8a:	461c      	mov	r4, r3
   1db8c:	e7e5      	b.n	1db5a <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
   1db8e:	4641      	mov	r1, r8
   1db90:	a803      	add	r0, sp, #12
   1db92:	f000 fb97 	bl	1e2c4 <net_buf_simple_pull_mem>
   1db96:	e7b6      	b.n	1db06 <bt_gatt_mult_notification+0x1e>
   1db98:	000387c0 	.word	0x000387c0
   1db9c:	00038800 	.word	0x00038800
   1dba0:	0003cbf5 	.word	0x0003cbf5

0001dba4 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1dba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1dba6:	4605      	mov	r5, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1dba8:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1dbaa:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dbac:	466b      	mov	r3, sp
   1dbae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dbb2:	4a14      	ldr	r2, [pc, #80]	; (1dc04 <bt_gatt_connected+0x60>)
	data.sec = BT_SECURITY_L1;
   1dbb4:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dbb8:	f015 fcd8 	bl	3356c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1dbbc:	4628      	mov	r0, r5
   1dbbe:	f7ff f94d 	bl	1ce5c <gatt_sub_find>
	if (!sub) {
   1dbc2:	b128      	cbz	r0, 1dbd0 <bt_gatt_connected+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1dbc4:	6884      	ldr	r4, [r0, #8]
   1dbc6:	b11c      	cbz	r4, 1dbd0 <bt_gatt_connected+0x2c>
   1dbc8:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1dbca:	f105 0690 	add.w	r6, r5, #144	; 0x90
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1dbce:	b90c      	cbnz	r4, 1dbd4 <bt_gatt_connected+0x30>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1dbd0:	b002      	add	sp, #8
   1dbd2:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1dbd4:	4631      	mov	r1, r6
   1dbd6:	7a28      	ldrb	r0, [r5, #8]
   1dbd8:	f014 fd8e 	bl	326f8 <bt_addr_le_is_bonded>
   1dbdc:	b148      	cbz	r0, 1dbf2 <bt_gatt_connected+0x4e>
   1dbde:	f104 0310 	add.w	r3, r4, #16
   1dbe2:	e8d3 3faf 	lda	r3, [r3]
   1dbe6:	079b      	lsls	r3, r3, #30
   1dbe8:	d403      	bmi.n	1dbf2 <bt_gatt_connected+0x4e>
			gatt_write_ccc(conn, params);
   1dbea:	4621      	mov	r1, r4
   1dbec:	4628      	mov	r0, r5
   1dbee:	f7ff fa6f 	bl	1d0d0 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dbf2:	f114 0f14 	cmn.w	r4, #20
   1dbf6:	d0eb      	beq.n	1dbd0 <bt_gatt_connected+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dbf8:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1dbfa:	2c00      	cmp	r4, #0
   1dbfc:	d0e8      	beq.n	1dbd0 <bt_gatt_connected+0x2c>
   1dbfe:	3c14      	subs	r4, #20
   1dc00:	e7e5      	b.n	1dbce <bt_gatt_connected+0x2a>
   1dc02:	bf00      	nop
   1dc04:	0001d8b5 	.word	0x0001d8b5

0001dc08 <db_hash_read>:
{
   1dc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1dc0c:	490f      	ldr	r1, [pc, #60]	; (1dc4c <db_hash_read+0x44>)
{
   1dc0e:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1dc10:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1dc14:	4614      	mov	r4, r2
   1dc16:	461d      	mov	r5, r3
   1dc18:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1dc1c:	f00e f850 	bl	2bcc0 <k_work_cancel_delayable_sync>
   1dc20:	4b0b      	ldr	r3, [pc, #44]	; (1dc50 <db_hash_read+0x48>)
   1dc22:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1dc26:	075b      	lsls	r3, r3, #29
   1dc28:	d401      	bmi.n	1dc2e <db_hash_read+0x26>
		db_hash_gen(true);
   1dc2a:	f7ff fbd3 	bl	1d3d4 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   1dc2e:	2101      	movs	r1, #1
   1dc30:	4630      	mov	r0, r6
   1dc32:	f015 fcf6 	bl	33622 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1dc36:	2310      	movs	r3, #16
   1dc38:	463a      	mov	r2, r7
   1dc3a:	9306      	str	r3, [sp, #24]
   1dc3c:	4629      	mov	r1, r5
   1dc3e:	4620      	mov	r0, r4
}
   1dc40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1dc44:	4b03      	ldr	r3, [pc, #12]	; (1dc54 <db_hash_read+0x4c>)
   1dc46:	f015 baf8 	b.w	3323a <bt_gatt_attr_read.constprop.0>
   1dc4a:	bf00      	nop
   1dc4c:	200157e8 	.word	0x200157e8
   1dc50:	20015860 	.word	0x20015860
   1dc54:	200157a8 	.word	0x200157a8

0001dc58 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1dc58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc5c:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1dc5e:	4603      	mov	r3, r0
   1dc60:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dc64:	2001      	movs	r0, #1
   1dc66:	4a2e      	ldr	r2, [pc, #184]	; (1dd20 <bt_gatt_disconnected+0xc8>)
   1dc68:	f015 fc80 	bl	3356c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1dc6c:	4620      	mov	r0, r4
   1dc6e:	f7ff f8f5 	bl	1ce5c <gatt_sub_find>
	if (!sub) {
   1dc72:	4606      	mov	r6, r0
   1dc74:	b3a0      	cbz	r0, 1dce0 <bt_gatt_disconnected+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1dc76:	6883      	ldr	r3, [r0, #8]
   1dc78:	b393      	cbz	r3, 1dce0 <bt_gatt_disconnected+0x88>
   1dc7a:	f1b3 0714 	subs.w	r7, r3, #20
   1dc7e:	d02f      	beq.n	1dce0 <bt_gatt_disconnected+0x88>
   1dc80:	681d      	ldr	r5, [r3, #0]
   1dc82:	b105      	cbz	r5, 1dc86 <bt_gatt_disconnected+0x2e>
   1dc84:	3d14      	subs	r5, #20
{
   1dc86:	f04f 0b00 	mov.w	fp, #0
			params->value = 0U;
   1dc8a:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1dc8c:	f104 0890 	add.w	r8, r4, #144	; 0x90
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1dc90:	f106 0901 	add.w	r9, r6, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1dc94:	4641      	mov	r1, r8
   1dc96:	7a20      	ldrb	r0, [r4, #8]
   1dc98:	f014 fd2e 	bl	326f8 <bt_addr_le_is_bonded>
   1dc9c:	b988      	cbnz	r0, 1dcc2 <bt_gatt_disconnected+0x6a>
			gatt_sub_remove(conn, sub, prev, params);
   1dc9e:	463b      	mov	r3, r7
   1dca0:	465a      	mov	r2, fp
   1dca2:	4631      	mov	r1, r6
   1dca4:	4620      	mov	r0, r4
			params->value = 0U;
   1dca6:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1dcaa:	f015 fb8d 	bl	333c8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1dcae:	b1bd      	cbz	r5, 1dce0 <bt_gatt_disconnected+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dcb0:	f115 0114 	adds.w	r1, r5, #20
   1dcb4:	d002      	beq.n	1dcbc <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dcb6:	6969      	ldr	r1, [r5, #20]
   1dcb8:	b101      	cbz	r1, 1dcbc <bt_gatt_disconnected+0x64>
   1dcba:	3914      	subs	r1, #20
{
   1dcbc:	462f      	mov	r7, r5
   1dcbe:	460d      	mov	r5, r1
   1dcc0:	e7e8      	b.n	1dc94 <bt_gatt_disconnected+0x3c>
   1dcc2:	f107 0310 	add.w	r3, r7, #16
   1dcc6:	e8d3 3faf 	lda	r3, [r3]
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1dcca:	07db      	lsls	r3, r3, #31
   1dccc:	d4e7      	bmi.n	1dc9e <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1dcce:	7873      	ldrb	r3, [r6, #1]
   1dcd0:	b11b      	cbz	r3, 1dcda <bt_gatt_disconnected+0x82>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1dcd2:	4641      	mov	r1, r8
   1dcd4:	4648      	mov	r0, r9
   1dcd6:	f015 fa77 	bl	331c8 <bt_addr_le_copy>
			prev = &params->node;
   1dcda:	f107 0b14 	add.w	fp, r7, #20
   1dcde:	e7e6      	b.n	1dcae <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
   1dce0:	4620      	mov	r0, r4
   1dce2:	f7ff f88d 	bl	1ce00 <find_cf_cfg>
	if (!cfg) {
   1dce6:	4605      	mov	r5, r0
   1dce8:	b1c0      	cbz	r0, 1dd1c <bt_gatt_disconnected+0xc4>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1dcea:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1dcee:	4631      	mov	r1, r6
   1dcf0:	7a20      	ldrb	r0, [r4, #8]
   1dcf2:	f014 fd01 	bl	326f8 <bt_addr_le_is_bonded>
   1dcf6:	b920      	cbnz	r0, 1dd02 <bt_gatt_disconnected+0xaa>
		clear_cf_cfg(cfg);
   1dcf8:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1dcfa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   1dcfe:	f015 bb1e 	b.w	3333e <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1dd02:	1c68      	adds	r0, r5, #1
   1dd04:	4631      	mov	r1, r6
   1dd06:	f015 fa5f 	bl	331c8 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dd0a:	350c      	adds	r5, #12
   1dd0c:	e8d5 3fef 	ldaex	r3, [r5]
   1dd10:	f023 0302 	bic.w	r3, r3, #2
   1dd14:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1dd18:	2a00      	cmp	r2, #0
   1dd1a:	d1f7      	bne.n	1dd0c <bt_gatt_disconnected+0xb4>
}
   1dd1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd20:	0001d0f5 	.word	0x0001d0f5

0001dd24 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1dd24:	4a0b      	ldr	r2, [pc, #44]	; (1dd54 <bt_smp_accept+0x30>)
{
   1dd26:	b508      	push	{r3, lr}
   1dd28:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   1dd2a:	6810      	ldr	r0, [r2, #0]
   1dd2c:	b918      	cbnz	r0, 1dd36 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   1dd2e:	4b0a      	ldr	r3, [pc, #40]	; (1dd58 <bt_smp_accept+0x34>)
   1dd30:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   1dd32:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1dd34:	bd08      	pop	{r3, pc}
   1dd36:	4909      	ldr	r1, [pc, #36]	; (1dd5c <bt_smp_accept+0x38>)
   1dd38:	4a09      	ldr	r2, [pc, #36]	; (1dd60 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
   1dd3a:	480a      	ldr	r0, [pc, #40]	; (1dd64 <bt_smp_accept+0x40>)
   1dd3c:	1a52      	subs	r2, r2, r1
   1dd3e:	08d2      	lsrs	r2, r2, #3
   1dd40:	0192      	lsls	r2, r2, #6
   1dd42:	4619      	mov	r1, r3
   1dd44:	f042 0201 	orr.w	r2, r2, #1
   1dd48:	f012 fad3 	bl	302f2 <log_1>
	return -ENOMEM;
   1dd4c:	f06f 000b 	mvn.w	r0, #11
   1dd50:	e7f0      	b.n	1dd34 <bt_smp_accept+0x10>
   1dd52:	bf00      	nop
   1dd54:	20015868 	.word	0x20015868
   1dd58:	000390d0 	.word	0x000390d0
   1dd5c:	000387c0 	.word	0x000387c0
   1dd60:	00038830 	.word	0x00038830
   1dd64:	0003cc1d 	.word	0x0003cc1d

0001dd68 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1dd68:	222c      	movs	r2, #44	; 0x2c
   1dd6a:	4b02      	ldr	r3, [pc, #8]	; (1dd74 <net_buf_pool_get+0xc>)
   1dd6c:	fb02 3000 	mla	r0, r2, r0, r3
   1dd70:	4770      	bx	lr
   1dd72:	bf00      	nop
   1dd74:	200150ac 	.word	0x200150ac

0001dd78 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   1dd78:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1dd7a:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   1dd7c:	4a04      	ldr	r2, [pc, #16]	; (1dd90 <net_buf_id+0x18>)
   1dd7e:	fb01 2303 	mla	r3, r1, r3, r2
   1dd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dd84:	1ac0      	subs	r0, r0, r3
}
   1dd86:	4b03      	ldr	r3, [pc, #12]	; (1dd94 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1dd88:	10c0      	asrs	r0, r0, #3
}
   1dd8a:	4358      	muls	r0, r3
   1dd8c:	4770      	bx	lr
   1dd8e:	bf00      	nop
   1dd90:	200150ac 	.word	0x200150ac
   1dd94:	aaaaaaab 	.word	0xaaaaaaab

0001dd98 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1dd98:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1dd9a:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1dd9c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1dd9e:	4a09      	ldr	r2, [pc, #36]	; (1ddc4 <fixed_data_alloc+0x2c>)
   1dda0:	fb04 2303 	mla	r3, r4, r3, r2
   1dda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   1dda6:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1dda8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1ddaa:	6823      	ldr	r3, [r4, #0]
   1ddac:	429a      	cmp	r2, r3
   1ddae:	bf94      	ite	ls
   1ddb0:	600a      	strls	r2, [r1, #0]
   1ddb2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1ddb4:	f7ff ffe0 	bl	1dd78 <net_buf_id>
   1ddb8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1ddbc:	fb02 3000 	mla	r0, r2, r0, r3
   1ddc0:	bd10      	pop	{r4, pc}
   1ddc2:	bf00      	nop
   1ddc4:	200150ac 	.word	0x200150ac

0001ddc8 <net_buf_reset>:
{
   1ddc8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ddca:	7943      	ldrb	r3, [r0, #5]
{
   1ddcc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ddce:	b14b      	cbz	r3, 1dde4 <net_buf_reset+0x1c>
   1ddd0:	490d      	ldr	r1, [pc, #52]	; (1de08 <net_buf_reset+0x40>)
   1ddd2:	480e      	ldr	r0, [pc, #56]	; (1de0c <net_buf_reset+0x44>)
   1ddd4:	234f      	movs	r3, #79	; 0x4f
   1ddd6:	4a0e      	ldr	r2, [pc, #56]	; (1de10 <net_buf_reset+0x48>)
   1ddd8:	f011 ff4a 	bl	2fc70 <printk>
   1dddc:	214f      	movs	r1, #79	; 0x4f
   1ddde:	480c      	ldr	r0, [pc, #48]	; (1de10 <net_buf_reset+0x48>)
   1dde0:	f012 fa2c 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1dde4:	6823      	ldr	r3, [r4, #0]
   1dde6:	b14b      	cbz	r3, 1ddfc <net_buf_reset+0x34>
   1dde8:	490a      	ldr	r1, [pc, #40]	; (1de14 <net_buf_reset+0x4c>)
   1ddea:	4808      	ldr	r0, [pc, #32]	; (1de0c <net_buf_reset+0x44>)
   1ddec:	2350      	movs	r3, #80	; 0x50
   1ddee:	4a08      	ldr	r2, [pc, #32]	; (1de10 <net_buf_reset+0x48>)
   1ddf0:	f011 ff3e 	bl	2fc70 <printk>
   1ddf4:	2150      	movs	r1, #80	; 0x50
   1ddf6:	4806      	ldr	r0, [pc, #24]	; (1de10 <net_buf_reset+0x48>)
   1ddf8:	f012 fa20 	bl	3023c <assert_post_action>
	buf->len  = 0U;
   1ddfc:	2300      	movs	r3, #0
   1ddfe:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1de00:	6923      	ldr	r3, [r4, #16]
   1de02:	60a3      	str	r3, [r4, #8]
}
   1de04:	bd10      	pop	{r4, pc}
   1de06:	bf00      	nop
   1de08:	0003cc6d 	.word	0x0003cc6d
   1de0c:	0003a56b 	.word	0x0003a56b
   1de10:	0003cc49 	.word	0x0003cc49
   1de14:	0003cc7e 	.word	0x0003cc7e

0001de18 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1de18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1de1c:	4605      	mov	r5, r0
   1de1e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1de20:	4610      	mov	r0, r2
   1de22:	4619      	mov	r1, r3
{
   1de24:	4616      	mov	r6, r2
   1de26:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1de28:	f019 fbd5 	bl	375d6 <sys_clock_timeout_end_calc>
   1de2c:	4680      	mov	r8, r0
   1de2e:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1de30:	b94d      	cbnz	r5, 1de46 <net_buf_alloc_len+0x2e>
   1de32:	494d      	ldr	r1, [pc, #308]	; (1df68 <net_buf_alloc_len+0x150>)
   1de34:	484d      	ldr	r0, [pc, #308]	; (1df6c <net_buf_alloc_len+0x154>)
   1de36:	23ed      	movs	r3, #237	; 0xed
   1de38:	4a4d      	ldr	r2, [pc, #308]	; (1df70 <net_buf_alloc_len+0x158>)
   1de3a:	f011 ff19 	bl	2fc70 <printk>
   1de3e:	21ed      	movs	r1, #237	; 0xed
   1de40:	484b      	ldr	r0, [pc, #300]	; (1df70 <net_buf_alloc_len+0x158>)
   1de42:	f012 f9fb 	bl	3023c <assert_post_action>
	__asm__ volatile(
   1de46:	f04f 0320 	mov.w	r3, #32
   1de4a:	f3ef 8a11 	mrs	sl, BASEPRI
   1de4e:	f383 8811 	msr	BASEPRI, r3
   1de52:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1de56:	8beb      	ldrh	r3, [r5, #30]
   1de58:	2b00      	cmp	r3, #0
   1de5a:	d055      	beq.n	1df08 <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1de5c:	8baa      	ldrh	r2, [r5, #28]
   1de5e:	429a      	cmp	r2, r3
   1de60:	d93e      	bls.n	1dee0 <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   1de62:	2200      	movs	r2, #0
   1de64:	2300      	movs	r3, #0
   1de66:	4628      	mov	r0, r5
   1de68:	f00d f95c 	bl	2b124 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1de6c:	4604      	mov	r4, r0
   1de6e:	2800      	cmp	r0, #0
   1de70:	d036      	beq.n	1dee0 <net_buf_alloc_len+0xc8>
	__asm__ volatile(
   1de72:	f38a 8811 	msr	BASEPRI, sl
   1de76:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1de7a:	f8dd a004 	ldr.w	sl, [sp, #4]
   1de7e:	f1ba 0f00 	cmp.w	sl, #0
   1de82:	d06d      	beq.n	1df60 <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1de84:	ea56 0307 	orrs.w	r3, r6, r7
   1de88:	d010      	beq.n	1deac <net_buf_alloc_len+0x94>
   1de8a:	1c7b      	adds	r3, r7, #1
   1de8c:	bf08      	it	eq
   1de8e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1de92:	d00b      	beq.n	1deac <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1de94:	f00f fcce 	bl	2d834 <sys_clock_tick_get>
   1de98:	ebb8 0600 	subs.w	r6, r8, r0
   1de9c:	eb69 0701 	sbc.w	r7, r9, r1
   1dea0:	2e00      	cmp	r6, #0
   1dea2:	f177 0300 	sbcs.w	r3, r7, #0
   1dea6:	bfbc      	itt	lt
   1dea8:	2600      	movlt	r6, #0
   1deaa:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
   1deac:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1deb0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1deb2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1df74 <net_buf_alloc_len+0x15c>
   1deb6:	4632      	mov	r2, r6
   1deb8:	fb09 8303 	mla	r3, r9, r3, r8
   1debc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1debe:	4620      	mov	r0, r4
   1dec0:	681b      	ldr	r3, [r3, #0]
   1dec2:	a901      	add	r1, sp, #4
   1dec4:	681d      	ldr	r5, [r3, #0]
   1dec6:	463b      	mov	r3, r7
   1dec8:	47a8      	blx	r5
   1deca:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1decc:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1dece:	bb58      	cbnz	r0, 1df28 <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
   1ded0:	79a0      	ldrb	r0, [r4, #6]
   1ded2:	4621      	mov	r1, r4
   1ded4:	fb00 8009 	mla	r0, r0, r9, r8
   1ded8:	f019 fad8 	bl	3748c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1dedc:	462c      	mov	r4, r5
}
   1dede:	e01f      	b.n	1df20 <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
   1dee0:	8be8      	ldrh	r0, [r5, #30]
   1dee2:	1e43      	subs	r3, r0, #1
   1dee4:	83eb      	strh	r3, [r5, #30]
   1dee6:	f38a 8811 	msr	BASEPRI, sl
   1deea:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1deee:	2318      	movs	r3, #24
   1def0:	8bac      	ldrh	r4, [r5, #28]
   1def2:	1a24      	subs	r4, r4, r0
   1def4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1def6:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1defa:	481e      	ldr	r0, [pc, #120]	; (1df74 <net_buf_alloc_len+0x15c>)
   1defc:	4b1e      	ldr	r3, [pc, #120]	; (1df78 <net_buf_alloc_len+0x160>)
   1defe:	1a2d      	subs	r5, r5, r0
   1df00:	10ad      	asrs	r5, r5, #2
   1df02:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1df04:	71a5      	strb	r5, [r4, #6]
		goto success;
   1df06:	e7b8      	b.n	1de7a <net_buf_alloc_len+0x62>
   1df08:	f38a 8811 	msr	BASEPRI, sl
   1df0c:	f3bf 8f6f 	isb	sy
   1df10:	4632      	mov	r2, r6
   1df12:	463b      	mov	r3, r7
   1df14:	4628      	mov	r0, r5
   1df16:	f00d f905 	bl	2b124 <z_impl_k_queue_get>
	if (!buf) {
   1df1a:	4604      	mov	r4, r0
   1df1c:	2800      	cmp	r0, #0
   1df1e:	d1ac      	bne.n	1de7a <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1df20:	4620      	mov	r0, r4
   1df22:	b002      	add	sp, #8
   1df24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1df28:	9b01      	ldr	r3, [sp, #4]
   1df2a:	459a      	cmp	sl, r3
   1df2c:	d90e      	bls.n	1df4c <net_buf_alloc_len+0x134>
   1df2e:	4913      	ldr	r1, [pc, #76]	; (1df7c <net_buf_alloc_len+0x164>)
   1df30:	f240 134d 	movw	r3, #333	; 0x14d
   1df34:	4a0e      	ldr	r2, [pc, #56]	; (1df70 <net_buf_alloc_len+0x158>)
   1df36:	480d      	ldr	r0, [pc, #52]	; (1df6c <net_buf_alloc_len+0x154>)
   1df38:	f011 fe9a 	bl	2fc70 <printk>
   1df3c:	4810      	ldr	r0, [pc, #64]	; (1df80 <net_buf_alloc_len+0x168>)
   1df3e:	f011 fe97 	bl	2fc70 <printk>
   1df42:	f240 114d 	movw	r1, #333	; 0x14d
   1df46:	480a      	ldr	r0, [pc, #40]	; (1df70 <net_buf_alloc_len+0x158>)
   1df48:	f012 f978 	bl	3023c <assert_post_action>
	buf->frags = NULL;
   1df4c:	2300      	movs	r3, #0
   1df4e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1df50:	2301      	movs	r3, #1
   1df52:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1df54:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   1df56:	4620      	mov	r0, r4
	buf->size  = size;
   1df58:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1df5a:	f7ff ff35 	bl	1ddc8 <net_buf_reset>
	return buf;
   1df5e:	e7df      	b.n	1df20 <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
   1df60:	f8c4 a010 	str.w	sl, [r4, #16]
   1df64:	e7f2      	b.n	1df4c <net_buf_alloc_len+0x134>
   1df66:	bf00      	nop
   1df68:	0003cc98 	.word	0x0003cc98
   1df6c:	0003a56b 	.word	0x0003a56b
   1df70:	0003cc49 	.word	0x0003cc49
   1df74:	200150ac 	.word	0x200150ac
   1df78:	ba2e8ba3 	.word	0xba2e8ba3
   1df7c:	0003cc9d 	.word	0x0003cc9d
   1df80:	0003aba7 	.word	0x0003aba7

0001df84 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1df84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1df88:	4606      	mov	r6, r0
   1df8a:	f00d f8cb 	bl	2b124 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1df8e:	4605      	mov	r5, r0
   1df90:	b150      	cbz	r0, 1dfa8 <net_buf_get+0x24>
   1df92:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1df94:	4f12      	ldr	r7, [pc, #72]	; (1dfe0 <net_buf_get+0x5c>)
   1df96:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1dfe4 <net_buf_get+0x60>
   1df9a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1dfe8 <net_buf_get+0x64>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1df9e:	7963      	ldrb	r3, [r4, #5]
   1dfa0:	f013 0301 	ands.w	r3, r3, #1
   1dfa4:	d103      	bne.n	1dfae <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1dfa6:	6023      	str	r3, [r4, #0]

	return buf;
}
   1dfa8:	4628      	mov	r0, r5
   1dfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dfae:	2200      	movs	r2, #0
   1dfb0:	2300      	movs	r3, #0
   1dfb2:	4630      	mov	r0, r6
   1dfb4:	f00d f8b6 	bl	2b124 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1dfb8:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1dfba:	b958      	cbnz	r0, 1dfd4 <net_buf_get+0x50>
   1dfbc:	4641      	mov	r1, r8
   1dfbe:	4648      	mov	r0, r9
   1dfc0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   1dfc4:	463a      	mov	r2, r7
   1dfc6:	f011 fe53 	bl	2fc70 <printk>
   1dfca:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1dfce:	4638      	mov	r0, r7
   1dfd0:	f012 f934 	bl	3023c <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1dfd4:	7963      	ldrb	r3, [r4, #5]
   1dfd6:	f023 0301 	bic.w	r3, r3, #1
   1dfda:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1dfdc:	6824      	ldr	r4, [r4, #0]
   1dfde:	e7de      	b.n	1df9e <net_buf_get+0x1a>
   1dfe0:	0003cc49 	.word	0x0003cc49
   1dfe4:	0003ccae 	.word	0x0003ccae
   1dfe8:	0003a56b 	.word	0x0003a56b

0001dfec <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1dfec:	b538      	push	{r3, r4, r5, lr}
   1dfee:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1dff0:	4604      	mov	r4, r0
   1dff2:	b958      	cbnz	r0, 1e00c <net_buf_simple_reserve+0x20>
   1dff4:	490e      	ldr	r1, [pc, #56]	; (1e030 <net_buf_simple_reserve+0x44>)
   1dff6:	480f      	ldr	r0, [pc, #60]	; (1e034 <net_buf_simple_reserve+0x48>)
   1dff8:	f240 13bb 	movw	r3, #443	; 0x1bb
   1dffc:	4a0e      	ldr	r2, [pc, #56]	; (1e038 <net_buf_simple_reserve+0x4c>)
   1dffe:	f011 fe37 	bl	2fc70 <printk>
   1e002:	f240 11bb 	movw	r1, #443	; 0x1bb
   1e006:	480c      	ldr	r0, [pc, #48]	; (1e038 <net_buf_simple_reserve+0x4c>)
   1e008:	f012 f918 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1e00c:	88a3      	ldrh	r3, [r4, #4]
   1e00e:	b15b      	cbz	r3, 1e028 <net_buf_simple_reserve+0x3c>
   1e010:	490a      	ldr	r1, [pc, #40]	; (1e03c <net_buf_simple_reserve+0x50>)
   1e012:	4808      	ldr	r0, [pc, #32]	; (1e034 <net_buf_simple_reserve+0x48>)
   1e014:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   1e018:	4a07      	ldr	r2, [pc, #28]	; (1e038 <net_buf_simple_reserve+0x4c>)
   1e01a:	f011 fe29 	bl	2fc70 <printk>
   1e01e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1e022:	4805      	ldr	r0, [pc, #20]	; (1e038 <net_buf_simple_reserve+0x4c>)
   1e024:	f012 f90a 	bl	3023c <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1e028:	68a3      	ldr	r3, [r4, #8]
   1e02a:	442b      	add	r3, r5
   1e02c:	6023      	str	r3, [r4, #0]
}
   1e02e:	bd38      	pop	{r3, r4, r5, pc}
   1e030:	0003bb41 	.word	0x0003bb41
   1e034:	0003a56b 	.word	0x0003a56b
   1e038:	0003cc49 	.word	0x0003cc49
   1e03c:	0003ccba 	.word	0x0003ccba

0001e040 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1e040:	b538      	push	{r3, r4, r5, lr}
   1e042:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1e044:	4605      	mov	r5, r0
   1e046:	b958      	cbnz	r0, 1e060 <net_buf_put+0x20>
   1e048:	4913      	ldr	r1, [pc, #76]	; (1e098 <net_buf_put+0x58>)
   1e04a:	4814      	ldr	r0, [pc, #80]	; (1e09c <net_buf_put+0x5c>)
   1e04c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   1e050:	4a13      	ldr	r2, [pc, #76]	; (1e0a0 <net_buf_put+0x60>)
   1e052:	f011 fe0d 	bl	2fc70 <printk>
   1e056:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1e05a:	4811      	ldr	r0, [pc, #68]	; (1e0a0 <net_buf_put+0x60>)
   1e05c:	f012 f8ee 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1e060:	b95c      	cbnz	r4, 1e07a <net_buf_put+0x3a>
   1e062:	4910      	ldr	r1, [pc, #64]	; (1e0a4 <net_buf_put+0x64>)
   1e064:	480d      	ldr	r0, [pc, #52]	; (1e09c <net_buf_put+0x5c>)
   1e066:	f240 13f9 	movw	r3, #505	; 0x1f9
   1e06a:	4a0d      	ldr	r2, [pc, #52]	; (1e0a0 <net_buf_put+0x60>)
   1e06c:	f011 fe00 	bl	2fc70 <printk>
   1e070:	f240 11f9 	movw	r1, #505	; 0x1f9
   1e074:	480a      	ldr	r0, [pc, #40]	; (1e0a0 <net_buf_put+0x60>)
   1e076:	f012 f8e1 	bl	3023c <assert_post_action>
{
   1e07a:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1e07c:	6811      	ldr	r1, [r2, #0]
   1e07e:	b929      	cbnz	r1, 1e08c <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1e080:	4621      	mov	r1, r4
   1e082:	4628      	mov	r0, r5
}
   1e084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1e088:	f00c bfee 	b.w	2b068 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1e08c:	7953      	ldrb	r3, [r2, #5]
   1e08e:	f043 0301 	orr.w	r3, r3, #1
   1e092:	7153      	strb	r3, [r2, #5]
   1e094:	460a      	mov	r2, r1
   1e096:	e7f1      	b.n	1e07c <net_buf_put+0x3c>
   1e098:	0003ccc9 	.word	0x0003ccc9
   1e09c:	0003a56b 	.word	0x0003a56b
   1e0a0:	0003cc49 	.word	0x0003cc49
   1e0a4:	0003bb41 	.word	0x0003bb41

0001e0a8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1e0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1e0ac:	4605      	mov	r5, r0
   1e0ae:	b328      	cbz	r0, 1e0fc <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1e0b0:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1e0b2:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1e0b6:	4e1b      	ldr	r6, [pc, #108]	; (1e124 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   1e0b8:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1e0ba:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1e0bc:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1e0be:	3b01      	subs	r3, #1
   1e0c0:	b2db      	uxtb	r3, r3
   1e0c2:	7123      	strb	r3, [r4, #4]
   1e0c4:	b9c3      	cbnz	r3, 1e0f8 <net_buf_unref+0x50>
		if (buf->__buf) {
   1e0c6:	6921      	ldr	r1, [r4, #16]
   1e0c8:	b159      	cbz	r1, 1e0e2 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1e0ca:	7963      	ldrb	r3, [r4, #5]
   1e0cc:	079b      	lsls	r3, r3, #30
   1e0ce:	d407      	bmi.n	1e0e0 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   1e0d0:	79a3      	ldrb	r3, [r4, #6]
   1e0d2:	4620      	mov	r0, r4
   1e0d4:	fb08 6303 	mla	r3, r8, r3, r6
   1e0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e0da:	681b      	ldr	r3, [r3, #0]
   1e0dc:	689b      	ldr	r3, [r3, #8]
   1e0de:	4798      	blx	r3
			buf->__buf = NULL;
   1e0e0:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1e0e2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1e0e4:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1e0e6:	fb08 6300 	mla	r3, r8, r0, r6
   1e0ea:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   1e0ec:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1e0ee:	b19b      	cbz	r3, 1e118 <net_buf_unref+0x70>
			pool->destroy(buf);
   1e0f0:	4620      	mov	r0, r4
   1e0f2:	4798      	blx	r3
	while (buf) {
   1e0f4:	2d00      	cmp	r5, #0
   1e0f6:	d1df      	bne.n	1e0b8 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1e0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1e0fc:	490a      	ldr	r1, [pc, #40]	; (1e128 <net_buf_unref+0x80>)
   1e0fe:	480b      	ldr	r0, [pc, #44]	; (1e12c <net_buf_unref+0x84>)
   1e100:	f44f 7302 	mov.w	r3, #520	; 0x208
   1e104:	4a0a      	ldr	r2, [pc, #40]	; (1e130 <net_buf_unref+0x88>)
   1e106:	f011 fdb3 	bl	2fc70 <printk>
}
   1e10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1e10e:	f44f 7102 	mov.w	r1, #520	; 0x208
   1e112:	4807      	ldr	r0, [pc, #28]	; (1e130 <net_buf_unref+0x88>)
   1e114:	f012 b892 	b.w	3023c <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1e118:	4621      	mov	r1, r4
   1e11a:	fb00 6008 	mla	r0, r0, r8, r6
   1e11e:	f019 f9b5 	bl	3748c <k_queue_prepend>
}
   1e122:	e7e7      	b.n	1e0f4 <net_buf_unref+0x4c>
   1e124:	200150ac 	.word	0x200150ac
   1e128:	0003bb41 	.word	0x0003bb41
   1e12c:	0003a56b 	.word	0x0003a56b
   1e130:	0003cc49 	.word	0x0003cc49

0001e134 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1e134:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1e136:	4604      	mov	r4, r0
   1e138:	b958      	cbnz	r0, 1e152 <net_buf_ref+0x1e>
   1e13a:	4908      	ldr	r1, [pc, #32]	; (1e15c <net_buf_ref+0x28>)
   1e13c:	4808      	ldr	r0, [pc, #32]	; (1e160 <net_buf_ref+0x2c>)
   1e13e:	f240 2337 	movw	r3, #567	; 0x237
   1e142:	4a08      	ldr	r2, [pc, #32]	; (1e164 <net_buf_ref+0x30>)
   1e144:	f011 fd94 	bl	2fc70 <printk>
   1e148:	f240 2137 	movw	r1, #567	; 0x237
   1e14c:	4805      	ldr	r0, [pc, #20]	; (1e164 <net_buf_ref+0x30>)
   1e14e:	f012 f875 	bl	3023c <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1e152:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   1e154:	4620      	mov	r0, r4
	buf->ref++;
   1e156:	3301      	adds	r3, #1
   1e158:	7123      	strb	r3, [r4, #4]
}
   1e15a:	bd10      	pop	{r4, pc}
   1e15c:	0003bb41 	.word	0x0003bb41
   1e160:	0003a56b 	.word	0x0003a56b
   1e164:	0003cc49 	.word	0x0003cc49

0001e168 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1e168:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1e16a:	4604      	mov	r4, r0
   1e16c:	b958      	cbnz	r0, 1e186 <net_buf_frag_last+0x1e>
   1e16e:	4908      	ldr	r1, [pc, #32]	; (1e190 <net_buf_frag_last+0x28>)
   1e170:	4808      	ldr	r0, [pc, #32]	; (1e194 <net_buf_frag_last+0x2c>)
   1e172:	f44f 731d 	mov.w	r3, #628	; 0x274
   1e176:	4a08      	ldr	r2, [pc, #32]	; (1e198 <net_buf_frag_last+0x30>)
   1e178:	f011 fd7a 	bl	2fc70 <printk>
   1e17c:	f44f 711d 	mov.w	r1, #628	; 0x274
   1e180:	4805      	ldr	r0, [pc, #20]	; (1e198 <net_buf_frag_last+0x30>)
   1e182:	f012 f85b 	bl	3023c <assert_post_action>

	while (buf->frags) {
   1e186:	4620      	mov	r0, r4
   1e188:	6824      	ldr	r4, [r4, #0]
   1e18a:	2c00      	cmp	r4, #0
   1e18c:	d1fb      	bne.n	1e186 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1e18e:	bd10      	pop	{r4, pc}
   1e190:	0003bb41 	.word	0x0003bb41
   1e194:	0003a56b 	.word	0x0003a56b
   1e198:	0003cc49 	.word	0x0003cc49

0001e19c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1e19c:	b538      	push	{r3, r4, r5, lr}
   1e19e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1e1a0:	4604      	mov	r4, r0
   1e1a2:	b958      	cbnz	r0, 1e1bc <net_buf_frag_insert+0x20>
   1e1a4:	4910      	ldr	r1, [pc, #64]	; (1e1e8 <net_buf_frag_insert+0x4c>)
   1e1a6:	4811      	ldr	r0, [pc, #68]	; (1e1ec <net_buf_frag_insert+0x50>)
   1e1a8:	f240 237f 	movw	r3, #639	; 0x27f
   1e1ac:	4a10      	ldr	r2, [pc, #64]	; (1e1f0 <net_buf_frag_insert+0x54>)
   1e1ae:	f011 fd5f 	bl	2fc70 <printk>
   1e1b2:	f240 217f 	movw	r1, #639	; 0x27f
   1e1b6:	480e      	ldr	r0, [pc, #56]	; (1e1f0 <net_buf_frag_insert+0x54>)
   1e1b8:	f012 f840 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1e1bc:	b95d      	cbnz	r5, 1e1d6 <net_buf_frag_insert+0x3a>
   1e1be:	490d      	ldr	r1, [pc, #52]	; (1e1f4 <net_buf_frag_insert+0x58>)
   1e1c0:	480a      	ldr	r0, [pc, #40]	; (1e1ec <net_buf_frag_insert+0x50>)
   1e1c2:	f44f 7320 	mov.w	r3, #640	; 0x280
   1e1c6:	4a0a      	ldr	r2, [pc, #40]	; (1e1f0 <net_buf_frag_insert+0x54>)
   1e1c8:	f011 fd52 	bl	2fc70 <printk>
   1e1cc:	f44f 7120 	mov.w	r1, #640	; 0x280
   1e1d0:	4807      	ldr	r0, [pc, #28]	; (1e1f0 <net_buf_frag_insert+0x54>)
   1e1d2:	f012 f833 	bl	3023c <assert_post_action>

	if (parent->frags) {
   1e1d6:	6823      	ldr	r3, [r4, #0]
   1e1d8:	b123      	cbz	r3, 1e1e4 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   1e1da:	4628      	mov	r0, r5
   1e1dc:	f7ff ffc4 	bl	1e168 <net_buf_frag_last>
   1e1e0:	6823      	ldr	r3, [r4, #0]
   1e1e2:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1e1e4:	6025      	str	r5, [r4, #0]
}
   1e1e6:	bd38      	pop	{r3, r4, r5, pc}
   1e1e8:	0003ccce 	.word	0x0003ccce
   1e1ec:	0003a56b 	.word	0x0003a56b
   1e1f0:	0003cc49 	.word	0x0003cc49
   1e1f4:	0003ccd5 	.word	0x0003ccd5

0001e1f8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1e1f8:	b538      	push	{r3, r4, r5, lr}
   1e1fa:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1e1fc:	460d      	mov	r5, r1
   1e1fe:	b959      	cbnz	r1, 1e218 <net_buf_frag_add+0x20>
   1e200:	490c      	ldr	r1, [pc, #48]	; (1e234 <net_buf_frag_add+0x3c>)
   1e202:	480d      	ldr	r0, [pc, #52]	; (1e238 <net_buf_frag_add+0x40>)
   1e204:	f240 238b 	movw	r3, #651	; 0x28b
   1e208:	4a0c      	ldr	r2, [pc, #48]	; (1e23c <net_buf_frag_add+0x44>)
   1e20a:	f011 fd31 	bl	2fc70 <printk>
   1e20e:	f240 218b 	movw	r1, #651	; 0x28b
   1e212:	480a      	ldr	r0, [pc, #40]	; (1e23c <net_buf_frag_add+0x44>)
   1e214:	f012 f812 	bl	3023c <assert_post_action>

	if (!head) {
   1e218:	b924      	cbnz	r4, 1e224 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   1e21a:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1e21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1e220:	f7ff bf88 	b.w	1e134 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1e224:	4620      	mov	r0, r4
   1e226:	f7ff ff9f 	bl	1e168 <net_buf_frag_last>
   1e22a:	4629      	mov	r1, r5
   1e22c:	f7ff ffb6 	bl	1e19c <net_buf_frag_insert>
}
   1e230:	4620      	mov	r0, r4
   1e232:	bd38      	pop	{r3, r4, r5, pc}
   1e234:	0003ccd5 	.word	0x0003ccd5
   1e238:	0003a56b 	.word	0x0003a56b
   1e23c:	0003cc49 	.word	0x0003cc49

0001e240 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1e240:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1e242:	6882      	ldr	r2, [r0, #8]
   1e244:	6803      	ldr	r3, [r0, #0]
{
   1e246:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   1e248:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1e24a:	4299      	cmp	r1, r3
{
   1e24c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1e24e:	d90b      	bls.n	1e268 <net_buf_simple_push+0x28>
   1e250:	4909      	ldr	r1, [pc, #36]	; (1e278 <net_buf_simple_push+0x38>)
   1e252:	480a      	ldr	r0, [pc, #40]	; (1e27c <net_buf_simple_push+0x3c>)
   1e254:	f240 430f 	movw	r3, #1039	; 0x40f
   1e258:	4a09      	ldr	r2, [pc, #36]	; (1e280 <net_buf_simple_push+0x40>)
   1e25a:	f011 fd09 	bl	2fc70 <printk>
   1e25e:	f240 410f 	movw	r1, #1039	; 0x40f
   1e262:	4807      	ldr	r0, [pc, #28]	; (1e280 <net_buf_simple_push+0x40>)
   1e264:	f011 ffea 	bl	3023c <assert_post_action>
	buf->data -= len;
   1e268:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1e26a:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1e26c:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1e26e:	440d      	add	r5, r1
	buf->data -= len;
   1e270:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1e272:	80a5      	strh	r5, [r4, #4]
}
   1e274:	bd38      	pop	{r3, r4, r5, pc}
   1e276:	bf00      	nop
   1e278:	0003ccea 	.word	0x0003ccea
   1e27c:	0003a56b 	.word	0x0003a56b
   1e280:	0003cc49 	.word	0x0003cc49

0001e284 <net_buf_simple_pull>:
{
   1e284:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1e286:	8883      	ldrh	r3, [r0, #4]
{
   1e288:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1e28a:	428b      	cmp	r3, r1
{
   1e28c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1e28e:	d20b      	bcs.n	1e2a8 <net_buf_simple_pull+0x24>
   1e290:	4909      	ldr	r1, [pc, #36]	; (1e2b8 <net_buf_simple_pull+0x34>)
   1e292:	480a      	ldr	r0, [pc, #40]	; (1e2bc <net_buf_simple_pull+0x38>)
   1e294:	f240 436f 	movw	r3, #1135	; 0x46f
   1e298:	4a09      	ldr	r2, [pc, #36]	; (1e2c0 <net_buf_simple_pull+0x3c>)
   1e29a:	f011 fce9 	bl	2fc70 <printk>
   1e29e:	f240 416f 	movw	r1, #1135	; 0x46f
   1e2a2:	4807      	ldr	r0, [pc, #28]	; (1e2c0 <net_buf_simple_pull+0x3c>)
   1e2a4:	f011 ffca 	bl	3023c <assert_post_action>
	buf->len -= len;
   1e2a8:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1e2aa:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1e2ac:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1e2ae:	4428      	add	r0, r5
	buf->len -= len;
   1e2b0:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1e2b2:	6020      	str	r0, [r4, #0]
}
   1e2b4:	bd38      	pop	{r3, r4, r5, pc}
   1e2b6:	bf00      	nop
   1e2b8:	0003ccda 	.word	0x0003ccda
   1e2bc:	0003a56b 	.word	0x0003a56b
   1e2c0:	0003cc49 	.word	0x0003cc49

0001e2c4 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1e2c4:	8883      	ldrh	r3, [r0, #4]
{
   1e2c6:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1e2c8:	428b      	cmp	r3, r1
{
   1e2ca:	4604      	mov	r4, r0
   1e2cc:	460d      	mov	r5, r1
	void *data = buf->data;
   1e2ce:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1e2d0:	d20b      	bcs.n	1e2ea <net_buf_simple_pull_mem+0x26>
   1e2d2:	490a      	ldr	r1, [pc, #40]	; (1e2fc <net_buf_simple_pull_mem+0x38>)
   1e2d4:	480a      	ldr	r0, [pc, #40]	; (1e300 <net_buf_simple_pull_mem+0x3c>)
   1e2d6:	f240 437b 	movw	r3, #1147	; 0x47b
   1e2da:	4a0a      	ldr	r2, [pc, #40]	; (1e304 <net_buf_simple_pull_mem+0x40>)
   1e2dc:	f011 fcc8 	bl	2fc70 <printk>
   1e2e0:	f240 417b 	movw	r1, #1147	; 0x47b
   1e2e4:	4807      	ldr	r0, [pc, #28]	; (1e304 <net_buf_simple_pull_mem+0x40>)
   1e2e6:	f011 ffa9 	bl	3023c <assert_post_action>
	buf->len -= len;
   1e2ea:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1e2ec:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1e2ee:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1e2f0:	4429      	add	r1, r5
}
   1e2f2:	4630      	mov	r0, r6
	buf->len -= len;
   1e2f4:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1e2f6:	6021      	str	r1, [r4, #0]
}
   1e2f8:	bd70      	pop	{r4, r5, r6, pc}
   1e2fa:	bf00      	nop
   1e2fc:	0003ccda 	.word	0x0003ccda
   1e300:	0003a56b 	.word	0x0003a56b
   1e304:	0003cc49 	.word	0x0003cc49

0001e308 <net_buf_simple_add>:
{
   1e308:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1e30a:	6803      	ldr	r3, [r0, #0]
   1e30c:	8886      	ldrh	r6, [r0, #4]
   1e30e:	4604      	mov	r4, r0
   1e310:	460d      	mov	r5, r1
   1e312:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1e314:	f015 f9f6 	bl	33704 <net_buf_simple_tailroom>
   1e318:	4288      	cmp	r0, r1
   1e31a:	d20b      	bcs.n	1e334 <net_buf_simple_add+0x2c>
   1e31c:	4908      	ldr	r1, [pc, #32]	; (1e340 <net_buf_simple_add+0x38>)
   1e31e:	4809      	ldr	r0, [pc, #36]	; (1e344 <net_buf_simple_add+0x3c>)
   1e320:	f44f 7348 	mov.w	r3, #800	; 0x320
   1e324:	4a08      	ldr	r2, [pc, #32]	; (1e348 <net_buf_simple_add+0x40>)
   1e326:	f011 fca3 	bl	2fc70 <printk>
   1e32a:	f44f 7148 	mov.w	r1, #800	; 0x320
   1e32e:	4806      	ldr	r0, [pc, #24]	; (1e348 <net_buf_simple_add+0x40>)
   1e330:	f011 ff84 	bl	3023c <assert_post_action>
	buf->len += len;
   1e334:	88a1      	ldrh	r1, [r4, #4]
}
   1e336:	4630      	mov	r0, r6
	buf->len += len;
   1e338:	440d      	add	r5, r1
   1e33a:	80a5      	strh	r5, [r4, #4]
}
   1e33c:	bd70      	pop	{r4, r5, r6, pc}
   1e33e:	bf00      	nop
   1e340:	0003cd0e 	.word	0x0003cd0e
   1e344:	0003a56b 	.word	0x0003a56b
   1e348:	0003cc49 	.word	0x0003cc49

0001e34c <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   1e34c:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   1e34e:	4604      	mov	r4, r0
   1e350:	b970      	cbnz	r0, 1e370 <net_if_flag_set.constprop.0+0x24>
   1e352:	490d      	ldr	r1, [pc, #52]	; (1e388 <net_if_flag_set.constprop.0+0x3c>)
   1e354:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   1e358:	4a0c      	ldr	r2, [pc, #48]	; (1e38c <net_if_flag_set.constprop.0+0x40>)
   1e35a:	480d      	ldr	r0, [pc, #52]	; (1e390 <net_if_flag_set.constprop.0+0x44>)
   1e35c:	f011 fc88 	bl	2fc70 <printk>
   1e360:	480c      	ldr	r0, [pc, #48]	; (1e394 <net_if_flag_set.constprop.0+0x48>)
   1e362:	f011 fc85 	bl	2fc70 <printk>
   1e366:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1e36a:	4808      	ldr	r0, [pc, #32]	; (1e38c <net_if_flag_set.constprop.0+0x40>)
   1e36c:	f011 ff66 	bl	3023c <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e370:	6823      	ldr	r3, [r4, #0]
   1e372:	330c      	adds	r3, #12
   1e374:	e8d3 2fef 	ldaex	r2, [r3]
   1e378:	f042 0201 	orr.w	r2, r2, #1
   1e37c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e380:	2900      	cmp	r1, #0
   1e382:	d1f7      	bne.n	1e374 <net_if_flag_set.constprop.0+0x28>

	atomic_set_bit(iface->if_dev->flags, value);
}
   1e384:	bd10      	pop	{r4, pc}
   1e386:	bf00      	nop
   1e388:	0003cd62 	.word	0x0003cd62
   1e38c:	0003cd3a 	.word	0x0003cd3a
   1e390:	0003a56b 	.word	0x0003a56b
   1e394:	0003aba7 	.word	0x0003aba7

0001e398 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   1e398:	4801      	ldr	r0, [pc, #4]	; (1e3a0 <k_mutex_unlock.constprop.0+0x8>)
   1e39a:	f00c bd03 	b.w	2ada4 <z_impl_k_mutex_unlock>
   1e39e:	bf00      	nop
   1e3a0:	20014ee8 	.word	0x20014ee8

0001e3a4 <k_mutex_lock.constprop.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1e3a4:	4602      	mov	r2, r0
   1e3a6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1e3a8:	4801      	ldr	r0, [pc, #4]	; (1e3b0 <k_mutex_lock.constprop.0+0xc>)
   1e3aa:	f00c bc01 	b.w	2abb0 <z_impl_k_mutex_lock>
   1e3ae:	bf00      	nop
   1e3b0:	20014ee8 	.word	0x20014ee8

0001e3b4 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1e3b4:	b538      	push	{r3, r4, r5, lr}
   1e3b6:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   1e3b8:	f04f 31ff 	mov.w	r1, #4294967295
   1e3bc:	f04f 30ff 	mov.w	r0, #4294967295
   1e3c0:	f7ff fff0 	bl	1e3a4 <k_mutex_lock.constprop.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1e3c4:	2100      	movs	r1, #0
   1e3c6:	4628      	mov	r0, r5
   1e3c8:	f015 f9d9 	bl	3377e <net_if_flag_is_set>
   1e3cc:	4604      	mov	r4, r0
   1e3ce:	bb68      	cbnz	r0, 1e42c <net_if_up+0x78>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   1e3d0:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   1e3d2:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1e3d4:	7e9b      	ldrb	r3, [r3, #26]
   1e3d6:	b12b      	cbz	r3, 1e3e4 <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   1e3d8:	f7ff ffb8 	bl	1e34c <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   1e3dc:	f7ff ffdc 	bl	1e398 <k_mutex_unlock.constprop.0>

	return status;
}
   1e3e0:	4620      	mov	r0, r4
   1e3e2:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1e3e4:	f015 f9b9 	bl	3375a <net_if_l2>
   1e3e8:	4604      	mov	r4, r0
   1e3ea:	b130      	cbz	r0, 1e3fa <net_if_up+0x46>
   1e3ec:	6884      	ldr	r4, [r0, #8]
   1e3ee:	b124      	cbz	r4, 1e3fa <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   1e3f0:	2101      	movs	r1, #1
   1e3f2:	4628      	mov	r0, r5
   1e3f4:	47a0      	blx	r4
	if (status < 0) {
   1e3f6:	1e04      	subs	r4, r0, #0
   1e3f8:	dbf0      	blt.n	1e3dc <net_if_up+0x28>
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   1e3fa:	682b      	ldr	r3, [r5, #0]
   1e3fc:	691b      	ldr	r3, [r3, #16]
   1e3fe:	b973      	cbnz	r3, 1e41e <net_if_up+0x6a>
   1e400:	490c      	ldr	r1, [pc, #48]	; (1e434 <net_if_up+0x80>)
   1e402:	f640 7399 	movw	r3, #3993	; 0xf99
   1e406:	4a0c      	ldr	r2, [pc, #48]	; (1e438 <net_if_up+0x84>)
   1e408:	480c      	ldr	r0, [pc, #48]	; (1e43c <net_if_up+0x88>)
   1e40a:	f011 fc31 	bl	2fc70 <printk>
   1e40e:	480c      	ldr	r0, [pc, #48]	; (1e440 <net_if_up+0x8c>)
   1e410:	f011 fc2e 	bl	2fc70 <printk>
   1e414:	f640 7199 	movw	r1, #3993	; 0xf99
   1e418:	4807      	ldr	r0, [pc, #28]	; (1e438 <net_if_up+0x84>)
   1e41a:	f011 ff0f 	bl	3023c <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   1e41e:	4628      	mov	r0, r5
   1e420:	f7ff ff94 	bl	1e34c <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1e424:	4628      	mov	r0, r5
   1e426:	f015 f99d 	bl	33764 <l2_flags_get>
notify:
   1e42a:	e7d7      	b.n	1e3dc <net_if_up+0x28>
		status = -EALREADY;
   1e42c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1e430:	e7d4      	b.n	1e3dc <net_if_up+0x28>
   1e432:	bf00      	nop
   1e434:	0003cdac 	.word	0x0003cdac
   1e438:	0003cd68 	.word	0x0003cd68
   1e43c:	0003a56b 	.word	0x0003a56b
   1e440:	0003aba7 	.word	0x0003aba7

0001e444 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1e444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1e448:	4e16      	ldr	r6, [pc, #88]	; (1e4a4 <net_if_init+0x60>)
	k_mutex_lock(&lock, K_FOREVER);
   1e44a:	f04f 30ff 	mov.w	r0, #4294967295
   1e44e:	f04f 31ff 	mov.w	r1, #4294967295
   1e452:	f7ff ffa7 	bl	1e3a4 <k_mutex_lock.constprop.0>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1e456:	46b0      	mov	r8, r6
   1e458:	4c13      	ldr	r4, [pc, #76]	; (1e4a8 <net_if_init+0x64>)
   1e45a:	4f14      	ldr	r7, [pc, #80]	; (1e4ac <net_if_init+0x68>)
   1e45c:	42b4      	cmp	r4, r6
   1e45e:	4625      	mov	r5, r4
   1e460:	d90e      	bls.n	1e480 <net_if_init+0x3c>
   1e462:	4913      	ldr	r1, [pc, #76]	; (1e4b0 <net_if_init+0x6c>)
   1e464:	f241 03b2 	movw	r3, #4274	; 0x10b2
   1e468:	463a      	mov	r2, r7
   1e46a:	4812      	ldr	r0, [pc, #72]	; (1e4b4 <net_if_init+0x70>)
   1e46c:	f011 fc00 	bl	2fc70 <printk>
   1e470:	4811      	ldr	r0, [pc, #68]	; (1e4b8 <net_if_init+0x74>)
   1e472:	f011 fbfd 	bl	2fc70 <printk>
   1e476:	f241 01b2 	movw	r1, #4274	; 0x10b2
   1e47a:	4638      	mov	r0, r7
   1e47c:	f011 fede 	bl	3023c <assert_post_action>
   1e480:	4544      	cmp	r4, r8
   1e482:	d303      	bcc.n	1e48c <net_if_init+0x48>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1e484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&lock);
   1e488:	f7ff bf86 	b.w	1e398 <k_mutex_unlock.constprop.0>
	return iface->if_dev->dev;
   1e48c:	682b      	ldr	r3, [r5, #0]
   1e48e:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1e490:	681b      	ldr	r3, [r3, #0]
   1e492:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1e494:	2b00      	cmp	r3, #0
   1e496:	d0e1      	beq.n	1e45c <net_if_init+0x18>
   1e498:	681b      	ldr	r3, [r3, #0]
   1e49a:	2b00      	cmp	r3, #0
   1e49c:	d0de      	beq.n	1e45c <net_if_init+0x18>
	api->init(iface);
   1e49e:	4628      	mov	r0, r5
   1e4a0:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1e4a2:	e7db      	b.n	1e45c <net_if_init+0x18>
   1e4a4:	200151e4 	.word	0x200151e4
   1e4a8:	200151e0 	.word	0x200151e0
   1e4ac:	0003cd68 	.word	0x0003cd68
   1e4b0:	0003cd92 	.word	0x0003cd92
   1e4b4:	0003a56b 	.word	0x0003a56b
   1e4b8:	0003ac25 	.word	0x0003ac25

0001e4bc <net_if_post_init>:

void net_if_post_init(void)
{
   1e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1e4be:	4d11      	ldr	r5, [pc, #68]	; (1e504 <net_if_post_init+0x48>)
   1e4c0:	4c11      	ldr	r4, [pc, #68]	; (1e508 <net_if_post_init+0x4c>)
   1e4c2:	462f      	mov	r7, r5
   1e4c4:	4e11      	ldr	r6, [pc, #68]	; (1e50c <net_if_post_init+0x50>)
   1e4c6:	42ac      	cmp	r4, r5
   1e4c8:	d90e      	bls.n	1e4e8 <net_if_post_init+0x2c>
   1e4ca:	4911      	ldr	r1, [pc, #68]	; (1e510 <net_if_post_init+0x54>)
   1e4cc:	f241 03e4 	movw	r3, #4324	; 0x10e4
   1e4d0:	4632      	mov	r2, r6
   1e4d2:	4810      	ldr	r0, [pc, #64]	; (1e514 <net_if_post_init+0x58>)
   1e4d4:	f011 fbcc 	bl	2fc70 <printk>
   1e4d8:	480f      	ldr	r0, [pc, #60]	; (1e518 <net_if_post_init+0x5c>)
   1e4da:	f011 fbc9 	bl	2fc70 <printk>
   1e4de:	f241 01e4 	movw	r1, #4324	; 0x10e4
   1e4e2:	4630      	mov	r0, r6
   1e4e4:	f011 feaa 	bl	3023c <assert_post_action>
   1e4e8:	42bc      	cmp	r4, r7
   1e4ea:	d300      	bcc.n	1e4ee <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1e4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1e4ee:	2103      	movs	r1, #3
   1e4f0:	4620      	mov	r0, r4
   1e4f2:	f015 f944 	bl	3377e <net_if_flag_is_set>
   1e4f6:	b910      	cbnz	r0, 1e4fe <net_if_post_init+0x42>
			net_if_up(iface);
   1e4f8:	4620      	mov	r0, r4
   1e4fa:	f7ff ff5b 	bl	1e3b4 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1e4fe:	3404      	adds	r4, #4
   1e500:	e7e1      	b.n	1e4c6 <net_if_post_init+0xa>
   1e502:	bf00      	nop
   1e504:	200151e4 	.word	0x200151e4
   1e508:	200151e0 	.word	0x200151e0
   1e50c:	0003cd68 	.word	0x0003cd68
   1e510:	0003cd92 	.word	0x0003cd92
   1e514:	0003a56b 	.word	0x0003a56b
   1e518:	0003ac25 	.word	0x0003ac25

0001e51c <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1e51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1e520:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   1e522:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_HEXDUMP_TRC(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1e526:	4b3b      	ldr	r3, [pc, #236]	; (1e614 <connect_request_encode+0xf8>)
   1e528:	4a3b      	ldr	r2, [pc, #236]	; (1e618 <connect_request_encode+0xfc>)
{
   1e52a:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1e52c:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1e530:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1e532:	2804      	cmp	r0, #4
   1e534:	bf0c      	ite	eq
   1e536:	4610      	moveq	r0, r2
   1e538:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1e53a:	600d      	str	r5, [r1, #0]
{
   1e53c:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1e53e:	f015 f9ef 	bl	33920 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   1e542:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   1e546:	4603      	mov	r3, r0
   1e548:	b938      	cbnz	r0, 1e55a <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e54a:	e9d8 2000 	ldrd	r2, r0, [r8]
   1e54e:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   1e550:	f897 107a 	ldrb.w	r1, [r7, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e554:	d104      	bne.n	1e560 <connect_request_encode+0x44>
		return -ENOMEM;
   1e556:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1e55a:	4618      	mov	r0, r3
   1e55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   1e560:	1c50      	adds	r0, r2, #1
   1e562:	f8c8 0000 	str.w	r0, [r8]
   1e566:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e568:	e9d8 6200 	ldrd	r6, r2, [r8]
   1e56c:	4296      	cmp	r6, r2
   1e56e:	d0f2      	beq.n	1e556 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1e570:	1c72      	adds	r2, r6, #1
   1e572:	f8c8 2000 	str.w	r2, [r8]
   1e576:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   1e578:	4641      	mov	r1, r8
   1e57a:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
   1e57e:	f015 f9bd 	bl	338fc <pack_uint16>
	if (err_code != 0) {
   1e582:	4603      	mov	r3, r0
   1e584:	2800      	cmp	r0, #0
   1e586:	d1e8      	bne.n	1e55a <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1e588:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1e58c:	f015 f9c8 	bl	33920 <pack_utf8_str>
	if (err_code != 0) {
   1e590:	4603      	mov	r3, r0
   1e592:	2800      	cmp	r0, #0
   1e594:	d1e1      	bne.n	1e55a <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1e596:	6df8      	ldr	r0, [r7, #92]	; 0x5c
	uint8_t connect_flags = client->clean_session << 1;
   1e598:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   1e59a:	b1d8      	cbz	r0, 1e5d4 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   1e59c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   1e5a0:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   1e5a4:	f003 0301 	and.w	r3, r3, #1
   1e5a8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1e5ac:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1e5ae:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1e5b0:	00db      	lsls	r3, r3, #3
   1e5b2:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1e5b6:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1e5b8:	f015 f9b2 	bl	33920 <pack_utf8_str>
		if (err_code != 0) {
   1e5bc:	4603      	mov	r3, r0
   1e5be:	2800      	cmp	r0, #0
   1e5c0:	d1cb      	bne.n	1e55a <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   1e5c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   1e5c4:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   1e5c6:	b30b      	cbz	r3, 1e60c <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   1e5c8:	4618      	mov	r0, r3
   1e5ca:	f015 f9a9 	bl	33920 <pack_utf8_str>
			if (err_code != 0) {
   1e5ce:	4603      	mov	r3, r0
   1e5d0:	2800      	cmp	r0, #0
   1e5d2:	d1c2      	bne.n	1e55a <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   1e5d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1e5d6:	b138      	cbz	r0, 1e5e8 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   1e5d8:	4641      	mov	r1, r8
   1e5da:	f015 f9a1 	bl	33920 <pack_utf8_str>
		if (err_code != 0) {
   1e5de:	4603      	mov	r3, r0
   1e5e0:	2800      	cmp	r0, #0
   1e5e2:	d1ba      	bne.n	1e55a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   1e5e4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   1e5e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1e5ea:	b138      	cbz	r0, 1e5fc <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   1e5ec:	4641      	mov	r1, r8
   1e5ee:	f015 f997 	bl	33920 <pack_utf8_str>
		if (err_code != 0) {
   1e5f2:	4603      	mov	r3, r0
   1e5f4:	2800      	cmp	r0, #0
   1e5f6:	d1b0      	bne.n	1e55a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   1e5f8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1e5fc:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1e5fe:	4642      	mov	r2, r8
   1e600:	4629      	mov	r1, r5
}
   1e602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1e606:	2010      	movs	r0, #16
   1e608:	f015 b9a5 	b.w	33956 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1e60c:	f015 f976 	bl	338fc <pack_uint16>
   1e610:	e7dd      	b.n	1e5ce <connect_request_encode+0xb2>
   1e612:	bf00      	nop
   1e614:	000390fc 	.word	0x000390fc
   1e618:	00039104 	.word	0x00039104

0001e61c <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1e61c:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e620:	1a9b      	subs	r3, r3, r2
   1e622:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e624:	bf81      	itttt	hi
   1e626:	4b05      	ldrhi	r3, [pc, #20]	; (1e63c <disconnect_encode+0x20>)
   1e628:	881b      	ldrhhi	r3, [r3, #0]
   1e62a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1e62c:	6803      	ldrhi	r3, [r0, #0]
   1e62e:	bf83      	ittte	hi
   1e630:	3302      	addhi	r3, #2
   1e632:	6043      	strhi	r3, [r0, #4]

	return 0;
   1e634:	2000      	movhi	r0, #0
		return -ENOMEM;
   1e636:	f06f 000b 	mvnls.w	r0, #11
}
   1e63a:	4770      	bx	lr
   1e63c:	0003cddd 	.word	0x0003cddd

0001e640 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   1e640:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e644:	1a9b      	subs	r3, r3, r2
   1e646:	2b01      	cmp	r3, #1
   1e648:	bf81      	itttt	hi
   1e64a:	4b05      	ldrhi	r3, [pc, #20]	; (1e660 <ping_request_encode+0x20>)
   1e64c:	881b      	ldrhhi	r3, [r3, #0]
   1e64e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   1e650:	6803      	ldrhi	r3, [r0, #0]
   1e652:	bf83      	ittte	hi
   1e654:	3302      	addhi	r3, #2
   1e656:	6043      	strhi	r3, [r0, #4]

	return 0;
   1e658:	2000      	movhi	r0, #0
		return -ENOMEM;
   1e65a:	f06f 000b 	mvnls.w	r0, #11
}
   1e65e:	4770      	bx	lr
   1e660:	0003cddf 	.word	0x0003cddf

0001e664 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   1e664:	2314      	movs	r3, #20
   1e666:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1e66a:	4353      	muls	r3, r2
   1e66c:	4a01      	ldr	r2, [pc, #4]	; (1e674 <mqtt_transport_connect+0x10>)
   1e66e:	58d3      	ldr	r3, [r2, r3]
   1e670:	4718      	bx	r3
   1e672:	bf00      	nop
   1e674:	0003910c 	.word	0x0003910c

0001e678 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   1e678:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1e67a:	2514      	movs	r5, #20
   1e67c:	4c03      	ldr	r4, [pc, #12]	; (1e68c <mqtt_transport_write+0x14>)
   1e67e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1e682:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   1e686:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1e688:	685b      	ldr	r3, [r3, #4]
   1e68a:	4718      	bx	r3
   1e68c:	0003910c 	.word	0x0003910c

0001e690 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   1e690:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1e692:	2414      	movs	r4, #20
   1e694:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1e698:	4a02      	ldr	r2, [pc, #8]	; (1e6a4 <mqtt_transport_write_msg+0x14>)
   1e69a:	fb04 2303 	mla	r3, r4, r3, r2
}
   1e69e:	bc10      	pop	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1e6a0:	689b      	ldr	r3, [r3, #8]
   1e6a2:	4718      	bx	r3
   1e6a4:	0003910c 	.word	0x0003910c

0001e6a8 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   1e6a8:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1e6aa:	2614      	movs	r6, #20
   1e6ac:	4d04      	ldr	r5, [pc, #16]	; (1e6c0 <mqtt_transport_read+0x18>)
   1e6ae:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1e6b2:	fb06 5404 	mla	r4, r6, r4, r5
   1e6b6:	68e4      	ldr	r4, [r4, #12]
   1e6b8:	46a4      	mov	ip, r4
							 shall_block);
}
   1e6ba:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1e6bc:	4760      	bx	ip
   1e6be:	bf00      	nop
   1e6c0:	0003910c 	.word	0x0003910c

0001e6c4 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   1e6c4:	2114      	movs	r1, #20
   1e6c6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1e6ca:	4a02      	ldr	r2, [pc, #8]	; (1e6d4 <mqtt_transport_disconnect+0x10>)
   1e6cc:	fb01 2303 	mla	r3, r1, r3, r2
   1e6d0:	691b      	ldr	r3, [r3, #16]
   1e6d2:	4718      	bx	r3
   1e6d4:	0003910c 	.word	0x0003910c

0001e6d8 <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   1e6d8:	b510      	push	{r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   1e6da:	f00c fb63 	bl	2ada4 <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1e6de:	4604      	mov	r4, r0
   1e6e0:	b178      	cbz	r0, 1e702 <mqtt_mutex_unlock+0x2a>
   1e6e2:	234f      	movs	r3, #79	; 0x4f
   1e6e4:	4a07      	ldr	r2, [pc, #28]	; (1e704 <mqtt_mutex_unlock+0x2c>)
   1e6e6:	4908      	ldr	r1, [pc, #32]	; (1e708 <mqtt_mutex_unlock+0x30>)
   1e6e8:	4808      	ldr	r0, [pc, #32]	; (1e70c <mqtt_mutex_unlock+0x34>)
   1e6ea:	f011 fac1 	bl	2fc70 <printk>
   1e6ee:	4621      	mov	r1, r4
   1e6f0:	4807      	ldr	r0, [pc, #28]	; (1e710 <mqtt_mutex_unlock+0x38>)
   1e6f2:	f011 fabd 	bl	2fc70 <printk>
	(void)ret;
}
   1e6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1e6fa:	214f      	movs	r1, #79	; 0x4f
   1e6fc:	4801      	ldr	r0, [pc, #4]	; (1e704 <mqtt_mutex_unlock+0x2c>)
   1e6fe:	f011 bd9d 	b.w	3023c <assert_post_action>
}
   1e702:	bd10      	pop	{r4, pc}
   1e704:	0003cded 	.word	0x0003cded
   1e708:	0003ce1e 	.word	0x0003ce1e
   1e70c:	0003a56b 	.word	0x0003a56b
   1e710:	0003ce27 	.word	0x0003ce27

0001e714 <mqtt_mutex_lock>:
{
   1e714:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1e716:	f04f 32ff 	mov.w	r2, #4294967295
   1e71a:	f04f 33ff 	mov.w	r3, #4294967295
   1e71e:	f00c fa47 	bl	2abb0 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1e722:	4604      	mov	r4, r0
   1e724:	b178      	cbz	r0, 1e746 <mqtt_mutex_lock+0x32>
   1e726:	2345      	movs	r3, #69	; 0x45
   1e728:	4a07      	ldr	r2, [pc, #28]	; (1e748 <mqtt_mutex_lock+0x34>)
   1e72a:	4908      	ldr	r1, [pc, #32]	; (1e74c <mqtt_mutex_lock+0x38>)
   1e72c:	4808      	ldr	r0, [pc, #32]	; (1e750 <mqtt_mutex_lock+0x3c>)
   1e72e:	f011 fa9f 	bl	2fc70 <printk>
   1e732:	4621      	mov	r1, r4
   1e734:	4807      	ldr	r0, [pc, #28]	; (1e754 <mqtt_mutex_lock+0x40>)
   1e736:	f011 fa9b 	bl	2fc70 <printk>
}
   1e73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1e73e:	2145      	movs	r1, #69	; 0x45
   1e740:	4801      	ldr	r0, [pc, #4]	; (1e748 <mqtt_mutex_lock+0x34>)
   1e742:	f011 bd7b 	b.w	3023c <assert_post_action>
}
   1e746:	bd10      	pop	{r4, pc}
   1e748:	0003cded 	.word	0x0003cded
   1e74c:	0003ce1e 	.word	0x0003ce1e
   1e750:	0003a56b 	.word	0x0003a56b
   1e754:	0003ce49 	.word	0x0003ce49

0001e758 <z_impl_entropy_get_entropy>:
				  uint16_t length);

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
   1e758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   1e75c:	6887      	ldr	r7, [r0, #8]
{
   1e75e:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1e760:	683b      	ldr	r3, [r7, #0]
{
   1e762:	460d      	mov	r5, r1
   1e764:	4616      	mov	r6, r2
	__ASSERT(api->get_entropy != NULL,
   1e766:	b963      	cbnz	r3, 1e782 <z_impl_entropy_get_entropy+0x2a>
   1e768:	4909      	ldr	r1, [pc, #36]	; (1e790 <z_impl_entropy_get_entropy+0x38>)
   1e76a:	234b      	movs	r3, #75	; 0x4b
   1e76c:	4a09      	ldr	r2, [pc, #36]	; (1e794 <z_impl_entropy_get_entropy+0x3c>)
   1e76e:	480a      	ldr	r0, [pc, #40]	; (1e798 <z_impl_entropy_get_entropy+0x40>)
   1e770:	f011 fa7e 	bl	2fc70 <printk>
   1e774:	4809      	ldr	r0, [pc, #36]	; (1e79c <z_impl_entropy_get_entropy+0x44>)
   1e776:	f011 fa7b 	bl	2fc70 <printk>
   1e77a:	214b      	movs	r1, #75	; 0x4b
   1e77c:	4805      	ldr	r0, [pc, #20]	; (1e794 <z_impl_entropy_get_entropy+0x3c>)
   1e77e:	f011 fd5d 	bl	3023c <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1e782:	4632      	mov	r2, r6
   1e784:	4629      	mov	r1, r5
   1e786:	4620      	mov	r0, r4
   1e788:	683b      	ldr	r3, [r7, #0]
}
   1e78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   1e78e:	4718      	bx	r3
   1e790:	0003ce96 	.word	0x0003ce96
   1e794:	0003ce69 	.word	0x0003ce69
   1e798:	0003a56b 	.word	0x0003a56b
   1e79c:	0003ceb6 	.word	0x0003ceb6

0001e7a0 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   1e7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct device *dev = entropy_driver;
   1e7a2:	4d12      	ldr	r5, [pc, #72]	; (1e7ec <z_impl_sys_rand32_get+0x4c>)
   1e7a4:	682c      	ldr	r4, [r5, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   1e7a6:	b99c      	cbnz	r4, 1e7d0 <z_impl_sys_rand32_get+0x30>
   1e7a8:	4811      	ldr	r0, [pc, #68]	; (1e7f0 <z_impl_sys_rand32_get+0x50>)
   1e7aa:	f00b fb65 	bl	29e78 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
   1e7ae:	4604      	mov	r4, r0
   1e7b0:	b968      	cbnz	r0, 1e7ce <z_impl_sys_rand32_get+0x2e>
   1e7b2:	231a      	movs	r3, #26
   1e7b4:	4a0f      	ldr	r2, [pc, #60]	; (1e7f4 <z_impl_sys_rand32_get+0x54>)
   1e7b6:	4910      	ldr	r1, [pc, #64]	; (1e7f8 <z_impl_sys_rand32_get+0x58>)
   1e7b8:	4810      	ldr	r0, [pc, #64]	; (1e7fc <z_impl_sys_rand32_get+0x5c>)
   1e7ba:	f011 fa59 	bl	2fc70 <printk>
   1e7be:	490c      	ldr	r1, [pc, #48]	; (1e7f0 <z_impl_sys_rand32_get+0x50>)
   1e7c0:	480f      	ldr	r0, [pc, #60]	; (1e800 <z_impl_sys_rand32_get+0x60>)
   1e7c2:	f011 fa55 	bl	2fc70 <printk>
   1e7c6:	211a      	movs	r1, #26
   1e7c8:	480a      	ldr	r0, [pc, #40]	; (1e7f4 <z_impl_sys_rand32_get+0x54>)
   1e7ca:	f011 fd37 	bl	3023c <assert_post_action>
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   1e7ce:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   1e7d0:	2204      	movs	r2, #4
   1e7d2:	4620      	mov	r0, r4
   1e7d4:	eb0d 0102 	add.w	r1, sp, r2
   1e7d8:	f7ff ffbe 	bl	1e758 <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   1e7dc:	2800      	cmp	r0, #0
   1e7de:	da02      	bge.n	1e7e6 <z_impl_sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1e7e0:	f7f8 f9fc 	bl	16bdc <sys_clock_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   1e7e4:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1e7e6:	9801      	ldr	r0, [sp, #4]
   1e7e8:	b003      	add	sp, #12
   1e7ea:	bd30      	pop	{r4, r5, pc}
   1e7ec:	200162ec 	.word	0x200162ec
   1e7f0:	0003cedc 	.word	0x0003cedc
   1e7f4:	0003ceea 	.word	0x0003ceea
   1e7f8:	0003cf23 	.word	0x0003cf23
   1e7fc:	0003a56b 	.word	0x0003a56b
   1e800:	0003cf38 	.word	0x0003cf38

0001e804 <default_CSPRNG>:

	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
}

int default_CSPRNG(uint8_t *dest, unsigned int size)
{
   1e804:	b507      	push	{r0, r1, r2, lr}
	int res = tc_ctr_prng_generate(&prng_state, NULL, 0, dest, size);
   1e806:	2200      	movs	r2, #0
{
   1e808:	4603      	mov	r3, r0
	int res = tc_ctr_prng_generate(&prng_state, NULL, 0, dest, size);
   1e80a:	9100      	str	r1, [sp, #0]
   1e80c:	4803      	ldr	r0, [pc, #12]	; (1e81c <default_CSPRNG+0x18>)
   1e80e:	4611      	mov	r1, r2
   1e810:	f013 fd98 	bl	32344 <tc_ctr_prng_generate>
	return res;
}
   1e814:	b003      	add	sp, #12
   1e816:	f85d fb04 	ldr.w	pc, [sp], #4
   1e81a:	bf00      	nop
   1e81c:	20015958 	.word	0x20015958

0001e820 <jwt_add_payload>:
{
   1e820:	b530      	push	{r4, r5, lr}
   1e822:	b087      	sub	sp, #28
	struct jwt_payload payload = {
   1e824:	e9cd 1203 	strd	r1, r2, [sp, #12]
	base64_outch(builder, '.');
   1e828:	212e      	movs	r1, #46	; 0x2e
{
   1e82a:	4604      	mov	r4, r0
	struct jwt_payload payload = {
   1e82c:	9305      	str	r3, [sp, #20]
	base64_outch(builder, '.');
   1e82e:	f015 fdf9 	bl	34424 <base64_outch>
	int res = json_obj_encode(jwt_payload_desc,
   1e832:	2103      	movs	r1, #3
   1e834:	4b06      	ldr	r3, [pc, #24]	; (1e850 <jwt_add_payload+0x30>)
   1e836:	9000      	str	r0, [sp, #0]
   1e838:	aa03      	add	r2, sp, #12
   1e83a:	4806      	ldr	r0, [pc, #24]	; (1e854 <jwt_add_payload+0x34>)
   1e83c:	f7f6 f948 	bl	14ad0 <json_obj_encode>
   1e840:	4605      	mov	r5, r0
	base64_flush(builder);
   1e842:	4620      	mov	r0, r4
   1e844:	f015 fe01 	bl	3444a <base64_flush>
}
   1e848:	4628      	mov	r0, r5
   1e84a:	b007      	add	sp, #28
   1e84c:	bd30      	pop	{r4, r5, pc}
   1e84e:	bf00      	nop
   1e850:	000344c3 	.word	0x000344c3
   1e854:	20014834 	.word	0x20014834

0001e858 <jwt_sign>:

int jwt_sign(struct jwt_builder *builder,
	     const char *der_key,
	     size_t der_key_len)
{
   1e858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e85a:	4604      	mov	r4, r0
   1e85c:	b0b7      	sub	sp, #220	; 0xdc
	struct tc_sha256_state_struct ctx;
	uint8_t hash[32], sig[64];
	int res;

	tc_sha256_init(&ctx);
   1e85e:	a81a      	add	r0, sp, #104	; 0x68
{
   1e860:	460e      	mov	r6, r1
	tc_sha256_init(&ctx);
   1e862:	f7f8 fe6b 	bl	1753c <tc_sha256_init>
	tc_sha256_update(&ctx, builder->base, builder->buf - builder->base);
   1e866:	e9d4 1200 	ldrd	r1, r2, [r4]
   1e86a:	a81a      	add	r0, sp, #104	; 0x68
   1e86c:	1a52      	subs	r2, r2, r1
   1e86e:	f013 fab5 	bl	31ddc <tc_sha256_update>
	tc_sha256_final(hash, &ctx);
   1e872:	a91a      	add	r1, sp, #104	; 0x68
   1e874:	a802      	add	r0, sp, #8
   1e876:	f013 fad7 	bl	31e28 <tc_sha256_final>
	if (prng_init) {
   1e87a:	4b1b      	ldr	r3, [pc, #108]	; (1e8e8 <jwt_sign+0x90>)
   1e87c:	781d      	ldrb	r5, [r3, #0]
   1e87e:	b17d      	cbz	r5, 1e8a0 <jwt_sign+0x48>
	res = setup_prng();

	if (res != 0) {
		return res;
	}
	uECC_set_rng(&default_CSPRNG);
   1e880:	481a      	ldr	r0, [pc, #104]	; (1e8ec <jwt_sign+0x94>)
   1e882:	f7f8 fbdb 	bl	1703c <uECC_set_rng>

	/* Note that tinycrypt only supports P-256. */
	res = uECC_sign(der_key, hash, sizeof(hash),
   1e886:	4b1a      	ldr	r3, [pc, #104]	; (1e8f0 <jwt_sign+0x98>)
   1e888:	2220      	movs	r2, #32
   1e88a:	9300      	str	r3, [sp, #0]
   1e88c:	4630      	mov	r0, r6
   1e88e:	ab0a      	add	r3, sp, #40	; 0x28
   1e890:	a902      	add	r1, sp, #8
   1e892:	f012 fadb 	bl	30e4c <uECC_sign>
			sig, &curve_secp256r1);
	if (res != TC_CRYPTO_SUCCESS) {
   1e896:	2801      	cmp	r0, #1
   1e898:	d017      	beq.n	1e8ca <jwt_sign+0x72>
		return -EINVAL;
   1e89a:	f06f 0015 	mvn.w	r0, #21
   1e89e:	e021      	b.n	1e8e4 <jwt_sign+0x8c>
	prng_init = true;
   1e8a0:	2201      	movs	r2, #1
   1e8a2:	af0a      	add	r7, sp, #40	; 0x28
   1e8a4:	701a      	strb	r2, [r3, #0]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
   1e8a6:	f7ff ff7b 	bl	1e7a0 <z_impl_sys_rand32_get>
   1e8aa:	3504      	adds	r5, #4
	for (int i = 0; i < sizeof(entropy); i += sizeof(uint32_t)) {
   1e8ac:	2d20      	cmp	r5, #32
   1e8ae:	f847 0b04 	str.w	r0, [r7], #4
   1e8b2:	d1f8      	bne.n	1e8a6 <jwt_sign+0x4e>
	int res = tc_ctr_prng_init(&prng_state,
   1e8b4:	2319      	movs	r3, #25
   1e8b6:	462a      	mov	r2, r5
   1e8b8:	9300      	str	r3, [sp, #0]
   1e8ba:	480e      	ldr	r0, [pc, #56]	; (1e8f4 <jwt_sign+0x9c>)
   1e8bc:	4b0e      	ldr	r3, [pc, #56]	; (1e8f8 <jwt_sign+0xa0>)
   1e8be:	a90a      	add	r1, sp, #40	; 0x28
   1e8c0:	f013 fcee 	bl	322a0 <tc_ctr_prng_init>
	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
   1e8c4:	2801      	cmp	r0, #1
   1e8c6:	d0db      	beq.n	1e880 <jwt_sign+0x28>
   1e8c8:	e7e7      	b.n	1e89a <jwt_sign+0x42>
	}

	base64_outch(builder, '.');
   1e8ca:	212e      	movs	r1, #46	; 0x2e
   1e8cc:	4620      	mov	r0, r4
   1e8ce:	f015 fda9 	bl	34424 <base64_outch>
	base64_append_bytes(sig, sizeof(sig), builder);
   1e8d2:	4622      	mov	r2, r4
   1e8d4:	2140      	movs	r1, #64	; 0x40
   1e8d6:	a80a      	add	r0, sp, #40	; 0x28
   1e8d8:	f015 fdf3 	bl	344c2 <base64_append_bytes>
	base64_flush(builder);
   1e8dc:	4620      	mov	r0, r4
   1e8de:	f015 fdb4 	bl	3444a <base64_flush>

	return 0;
   1e8e2:	2000      	movs	r0, #0
}
   1e8e4:	b037      	add	sp, #220	; 0xdc
   1e8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e8e8:	2001bb22 	.word	0x2001bb22
   1e8ec:	0001e805 	.word	0x0001e805
   1e8f0:	00039134 	.word	0x00039134
   1e8f4:	20015958 	.word	0x20015958
   1e8f8:	0003cfcc 	.word	0x0003cfcc

0001e8fc <jwt_init_builder>:
#endif

int jwt_init_builder(struct jwt_builder *builder,
		     char *buffer,
		     size_t buffer_size)
{
   1e8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8fe:	b08b      	sub	sp, #44	; 0x2c
	const char jwt_header[] =
   1e900:	466d      	mov	r5, sp
	builder->base = buffer;
	builder->buf = buffer;
	builder->len = buffer_size;
	builder->overflowed = false;
   1e902:	2300      	movs	r3, #0
{
   1e904:	4604      	mov	r4, r0
   1e906:	460e      	mov	r6, r1
   1e908:	46ac      	mov	ip, r5
	builder->overflowed = false;
   1e90a:	7303      	strb	r3, [r0, #12]
	builder->pending = 0;
   1e90c:	6103      	str	r3, [r0, #16]
	builder->buf = buffer;
   1e90e:	e9c0 1100 	strd	r1, r1, [r0]
	const char jwt_header[] =
   1e912:	4b12      	ldr	r3, [pc, #72]	; (1e95c <jwt_init_builder+0x60>)
	builder->len = buffer_size;
   1e914:	6082      	str	r2, [r0, #8]
	const char jwt_header[] =
   1e916:	f103 0e20 	add.w	lr, r3, #32
   1e91a:	462f      	mov	r7, r5
   1e91c:	6818      	ldr	r0, [r3, #0]
   1e91e:	6859      	ldr	r1, [r3, #4]
   1e920:	3308      	adds	r3, #8
   1e922:	c703      	stmia	r7!, {r0, r1}
   1e924:	4573      	cmp	r3, lr
   1e926:	463d      	mov	r5, r7
   1e928:	d1f7      	bne.n	1e91a <jwt_init_builder+0x1e>
   1e92a:	6818      	ldr	r0, [r3, #0]
   1e92c:	791b      	ldrb	r3, [r3, #4]
	if (jwt_header_len > builder->len) {
   1e92e:	2a24      	cmp	r2, #36	; 0x24
	const char jwt_header[] =
   1e930:	6038      	str	r0, [r7, #0]
   1e932:	713b      	strb	r3, [r7, #4]
	if (jwt_header_len > builder->len) {
   1e934:	d805      	bhi.n	1e942 <jwt_init_builder+0x46>
		builder->overflowed = true;
   1e936:	2301      	movs	r3, #1
		return -ENOSPC;
   1e938:	f06f 001b 	mvn.w	r0, #27
		builder->overflowed = true;
   1e93c:	7323      	strb	r3, [r4, #12]

	return jwt_add_header(builder);
}
   1e93e:	b00b      	add	sp, #44	; 0x2c
   1e940:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1e942:	4661      	mov	r1, ip
   1e944:	4630      	mov	r0, r6
   1e946:	f019 f861 	bl	37a0c <strcpy>
	builder->buf += jwt_header_len - 1;
   1e94a:	6863      	ldr	r3, [r4, #4]
	return 0;
   1e94c:	2000      	movs	r0, #0
	builder->buf += jwt_header_len - 1;
   1e94e:	3324      	adds	r3, #36	; 0x24
   1e950:	6063      	str	r3, [r4, #4]
	builder->len -= jwt_header_len - 1;
   1e952:	68a3      	ldr	r3, [r4, #8]
   1e954:	3b24      	subs	r3, #36	; 0x24
   1e956:	60a3      	str	r3, [r4, #8]
	return jwt_add_header(builder);
   1e958:	e7f1      	b.n	1e93e <jwt_init_builder+0x42>
   1e95a:	bf00      	nop
   1e95c:	0003cf9b 	.word	0x0003cf9b

0001e960 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1e960:	b570      	push	{r4, r5, r6, lr}
   1e962:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1e964:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e966:	6905      	ldr	r5, [r0, #16]
   1e968:	b961      	cbnz	r1, 1e984 <gpio_nrfx_manage_callback+0x24>
   1e96a:	4922      	ldr	r1, [pc, #136]	; (1e9f4 <gpio_nrfx_manage_callback+0x94>)
   1e96c:	2324      	movs	r3, #36	; 0x24
   1e96e:	4a22      	ldr	r2, [pc, #136]	; (1e9f8 <gpio_nrfx_manage_callback+0x98>)
   1e970:	4822      	ldr	r0, [pc, #136]	; (1e9fc <gpio_nrfx_manage_callback+0x9c>)
   1e972:	f011 f97d 	bl	2fc70 <printk>
   1e976:	4822      	ldr	r0, [pc, #136]	; (1ea00 <gpio_nrfx_manage_callback+0xa0>)
   1e978:	f011 f97a 	bl	2fc70 <printk>
   1e97c:	2124      	movs	r1, #36	; 0x24
   1e97e:	481e      	ldr	r0, [pc, #120]	; (1e9f8 <gpio_nrfx_manage_callback+0x98>)
   1e980:	f011 fc5c 	bl	3023c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1e984:	6863      	ldr	r3, [r4, #4]
   1e986:	b963      	cbnz	r3, 1e9a2 <gpio_nrfx_manage_callback+0x42>
   1e988:	491e      	ldr	r1, [pc, #120]	; (1ea04 <gpio_nrfx_manage_callback+0xa4>)
   1e98a:	2325      	movs	r3, #37	; 0x25
   1e98c:	4a1a      	ldr	r2, [pc, #104]	; (1e9f8 <gpio_nrfx_manage_callback+0x98>)
   1e98e:	481b      	ldr	r0, [pc, #108]	; (1e9fc <gpio_nrfx_manage_callback+0x9c>)
   1e990:	f011 f96e 	bl	2fc70 <printk>
   1e994:	481c      	ldr	r0, [pc, #112]	; (1ea08 <gpio_nrfx_manage_callback+0xa8>)
   1e996:	f011 f96b 	bl	2fc70 <printk>
   1e99a:	2125      	movs	r1, #37	; 0x25
   1e99c:	4816      	ldr	r0, [pc, #88]	; (1e9f8 <gpio_nrfx_manage_callback+0x98>)
   1e99e:	f011 fc4d 	bl	3023c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1e9a2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1e9a4:	b15b      	cbz	r3, 1e9be <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e9a6:	2200      	movs	r2, #0
   1e9a8:	429c      	cmp	r4, r3
   1e9aa:	d113      	bne.n	1e9d4 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   1e9ac:	6823      	ldr	r3, [r4, #0]
   1e9ae:	b95a      	cbnz	r2, 1e9c8 <gpio_nrfx_manage_callback+0x68>
   1e9b0:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   1e9b2:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e9b4:	4294      	cmp	r4, r2
   1e9b6:	d100      	bne.n	1e9ba <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1e9b8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1e9ba:	2300      	movs	r3, #0
   1e9bc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1e9be:	b976      	cbnz	r6, 1e9de <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1e9c0:	2000      	movs	r0, #0
				     callback, set);
}
   1e9c2:	bd70      	pop	{r4, r5, r6, pc}
   1e9c4:	460b      	mov	r3, r1
   1e9c6:	e7ef      	b.n	1e9a8 <gpio_nrfx_manage_callback+0x48>
   1e9c8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e9ca:	68ab      	ldr	r3, [r5, #8]
   1e9cc:	429c      	cmp	r4, r3
	list->tail = node;
   1e9ce:	bf08      	it	eq
   1e9d0:	60aa      	streq	r2, [r5, #8]
}
   1e9d2:	e7f2      	b.n	1e9ba <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e9d4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e9d6:	461a      	mov	r2, r3
   1e9d8:	2900      	cmp	r1, #0
   1e9da:	d1f3      	bne.n	1e9c4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1e9dc:	b13e      	cbz	r6, 1e9ee <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1e9de:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1e9e0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e9e2:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   1e9e4:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e9e6:	2800      	cmp	r0, #0
   1e9e8:	d1ea      	bne.n	1e9c0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1e9ea:	60ac      	str	r4, [r5, #8]
}
   1e9ec:	e7e9      	b.n	1e9c2 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1e9ee:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e9f2:	e7e6      	b.n	1e9c2 <gpio_nrfx_manage_callback+0x62>
   1e9f4:	0003d012 	.word	0x0003d012
   1e9f8:	0003cfe5 	.word	0x0003cfe5
   1e9fc:	0003a56b 	.word	0x0003a56b
   1ea00:	0003d01b 	.word	0x0003d01b
   1ea04:	0003d02a 	.word	0x0003d02a
   1ea08:	0003d03c 	.word	0x0003d03c

0001ea0c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ea0c:	6803      	ldr	r3, [r0, #0]
{
   1ea0e:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1ea10:	095a      	lsrs	r2, r3, #5
   1ea12:	bf0c      	ite	eq
   1ea14:	f04f 32ff 	moveq.w	r2, #4294967295
   1ea18:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1ea1a:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1ea1e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ea22:	07db      	lsls	r3, r3, #31
{
   1ea24:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ea26:	d40b      	bmi.n	1ea40 <nrf_gpio_pin_port_decode+0x34>
   1ea28:	490f      	ldr	r1, [pc, #60]	; (1ea68 <nrf_gpio_pin_port_decode+0x5c>)
   1ea2a:	4810      	ldr	r0, [pc, #64]	; (1ea6c <nrf_gpio_pin_port_decode+0x60>)
   1ea2c:	f44f 7305 	mov.w	r3, #532	; 0x214
   1ea30:	4a0f      	ldr	r2, [pc, #60]	; (1ea70 <nrf_gpio_pin_port_decode+0x64>)
   1ea32:	f011 f91d 	bl	2fc70 <printk>
   1ea36:	f44f 7105 	mov.w	r1, #532	; 0x214
   1ea3a:	480d      	ldr	r0, [pc, #52]	; (1ea70 <nrf_gpio_pin_port_decode+0x64>)
   1ea3c:	f011 fbfe 	bl	3023c <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1ea40:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1ea42:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ea46:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1ea48:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ea4a:	d00b      	beq.n	1ea64 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   1ea4c:	4909      	ldr	r1, [pc, #36]	; (1ea74 <nrf_gpio_pin_port_decode+0x68>)
   1ea4e:	4807      	ldr	r0, [pc, #28]	; (1ea6c <nrf_gpio_pin_port_decode+0x60>)
   1ea50:	f240 2319 	movw	r3, #537	; 0x219
   1ea54:	4a06      	ldr	r2, [pc, #24]	; (1ea70 <nrf_gpio_pin_port_decode+0x64>)
   1ea56:	f011 f90b 	bl	2fc70 <printk>
   1ea5a:	f240 2119 	movw	r1, #537	; 0x219
   1ea5e:	4804      	ldr	r0, [pc, #16]	; (1ea70 <nrf_gpio_pin_port_decode+0x64>)
   1ea60:	f011 fbec 	bl	3023c <assert_post_action>
}
   1ea64:	4804      	ldr	r0, [pc, #16]	; (1ea78 <nrf_gpio_pin_port_decode+0x6c>)
   1ea66:	bd10      	pop	{r4, pc}
   1ea68:	0003d086 	.word	0x0003d086
   1ea6c:	0003a56b 	.word	0x0003a56b
   1ea70:	0003d053 	.word	0x0003d053
   1ea74:	00040e81 	.word	0x00040e81
   1ea78:	40842500 	.word	0x40842500

0001ea7c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1ea7c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1ea7e:	4b09      	ldr	r3, [pc, #36]	; (1eaa4 <gpio_nrfx_init+0x28>)
   1ea80:	781a      	ldrb	r2, [r3, #0]
   1ea82:	b962      	cbnz	r2, 1ea9e <gpio_nrfx_init+0x22>
		gpio_initialized = true;
   1ea84:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1ea86:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   1ea88:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1ea8a:	f7f8 fdcf 	bl	1762c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1ea8e:	2031      	movs	r0, #49	; 0x31
   1ea90:	f7f8 fd9a 	bl	175c8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ea94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1ea98:	4b03      	ldr	r3, [pc, #12]	; (1eaa8 <gpio_nrfx_init+0x2c>)
   1ea9a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1ea9e:	2000      	movs	r0, #0
   1eaa0:	bd08      	pop	{r3, pc}
   1eaa2:	bf00      	nop
   1eaa4:	2001bb23 	.word	0x2001bb23
   1eaa8:	40031000 	.word	0x40031000

0001eaac <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1eaac:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1eab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1eab4:	4605      	mov	r5, r0
   1eab6:	460e      	mov	r6, r1
   1eab8:	4690      	mov	r8, r2
   1eaba:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   1eabc:	6904      	ldr	r4, [r0, #16]
	return port->config;
   1eabe:	f001 071f 	and.w	r7, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1eac2:	f040 80a7 	bne.w	1ec14 <gpio_nrfx_pin_interrupt_configure+0x168>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1eac6:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eac8:	a801      	add	r0, sp, #4
   1eaca:	7a1b      	ldrb	r3, [r3, #8]
   1eacc:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
   1ead0:	9301      	str	r3, [sp, #4]
   1ead2:	f7ff ff9b 	bl	1ea0c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1ead6:	9b01      	ldr	r3, [sp, #4]
   1ead8:	3380      	adds	r3, #128	; 0x80
   1eada:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1eade:	07d9      	lsls	r1, r3, #31
   1eae0:	f100 80b7 	bmi.w	1ec52 <gpio_nrfx_pin_interrupt_configure+0x1a6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1eae4:	2101      	movs	r1, #1
   1eae6:	68e3      	ldr	r3, [r4, #12]
   1eae8:	40b1      	lsls	r1, r6
   1eaea:	4319      	orrs	r1, r3
   1eaec:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1eaee:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1eaf0:	2000      	movs	r0, #0
   1eaf2:	6963      	ldr	r3, [r4, #20]
   1eaf4:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1eaf6:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   1eafa:	bf0c      	ite	eq
   1eafc:	430b      	orreq	r3, r1
   1eafe:	438b      	bicne	r3, r1
   1eb00:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1eb02:	69a3      	ldr	r3, [r4, #24]
   1eb04:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   1eb08:	bf0c      	ite	eq
   1eb0a:	430b      	orreq	r3, r1
   1eb0c:	438b      	bicne	r3, r1
   1eb0e:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1eb10:	6923      	ldr	r3, [r4, #16]
   1eb12:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   1eb16:	bf0c      	ite	eq
   1eb18:	4319      	orreq	r1, r3
   1eb1a:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1eb1e:	686b      	ldr	r3, [r5, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1eb20:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1eb22:	7a1b      	ldrb	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   1eb24:	f8d5 8010 	ldr.w	r8, [r5, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1eb28:	4d4b      	ldr	r5, [pc, #300]	; (1ec58 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1eb2a:	ea47 1743 	orr.w	r7, r7, r3, lsl #5
   1eb2e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1eb32:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1eb34:	f500 72a2 	add.w	r2, r0, #324	; 0x144
   1eb38:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1eb3c:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1eb40:	4297      	cmp	r7, r2
   1eb42:	d172      	bne.n	1ec2a <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
   1eb44:	fa23 f200 	lsr.w	r2, r3, r0
   1eb48:	07d2      	lsls	r2, r2, #31
   1eb4a:	d56e      	bpl.n	1ec2a <gpio_nrfx_pin_interrupt_configure+0x17e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1eb4c:	0083      	lsls	r3, r0, #2
   1eb4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eb52:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1eb56:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1eb5a:	f022 0201 	bic.w	r2, r2, #1
   1eb5e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1eb62:	2301      	movs	r3, #1
   1eb64:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1eb66:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1eb6a:	b2c0      	uxtb	r0, r0
   1eb6c:	f006 f93c 	bl	24de8 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1eb70:	4638      	mov	r0, r7
   1eb72:	2100      	movs	r1, #0
   1eb74:	f015 fcda 	bl	3452c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1eb78:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1eb7c:	40f0      	lsrs	r0, r6
   1eb7e:	f010 0001 	ands.w	r0, r0, #1
   1eb82:	d044      	beq.n	1ec0e <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   1eb84:	f8d8 0014 	ldr.w	r0, [r8, #20]
   1eb88:	40f0      	lsrs	r0, r6
   1eb8a:	f010 0401 	ands.w	r4, r0, #1
   1eb8e:	d053      	beq.n	1ec38 <gpio_nrfx_pin_interrupt_configure+0x18c>
				if (data->double_edge & BIT(pin)) {
   1eb90:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1eb94:	a801      	add	r0, sp, #4
				if (data->double_edge & BIT(pin)) {
   1eb96:	40f3      	lsrs	r3, r6
   1eb98:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1eb9a:	bf57      	itett	pl
   1eb9c:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1eba0:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1eba2:	fa21 f606 	lsrpl.w	r6, r1, r6
   1eba6:	f006 0601 	andpl.w	r6, r6, #1
   1ebaa:	bf5c      	itt	pl
   1ebac:	f1c6 0602 	rsbpl	r6, r6, #2
   1ebb0:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1ebb2:	f006 f93b 	bl	24e2c <nrfx_gpiote_channel_alloc>
   1ebb6:	4b29      	ldr	r3, [pc, #164]	; (1ec5c <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1ebb8:	4298      	cmp	r0, r3
   1ebba:	d13a      	bne.n	1ec32 <gpio_nrfx_pin_interrupt_configure+0x186>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1ebbc:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ebc0:	023f      	lsls	r7, r7, #8
   1ebc2:	008b      	lsls	r3, r1, #2
   1ebc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ebc8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1ebcc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ebd0:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1ebd4:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1ebd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1ebdc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ebe0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1ebe4:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ebe6:	4317      	orrs	r7, r2
    return ((uint32_t)p_reg + event);
   1ebe8:	4a1d      	ldr	r2, [pc, #116]	; (1ec60 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ebea:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    return ((uint32_t)p_reg + event);
   1ebee:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ebf0:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ebf2:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ebf6:	6010      	str	r0, [r2, #0]
   1ebf8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ebfa:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1ebfe:	f042 0201 	orr.w	r2, r2, #1
   1ec02:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1ec06:	2301      	movs	r3, #1
   1ec08:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   1ec0a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   1ec0e:	b003      	add	sp, #12
   1ec10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1ec14:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1ec18:	f47f af64 	bne.w	1eae4 <gpio_nrfx_pin_interrupt_configure+0x38>
   1ec1c:	2101      	movs	r1, #1
   1ec1e:	fa01 f306 	lsl.w	r3, r1, r6
   1ec22:	68e1      	ldr	r1, [r4, #12]
   1ec24:	ea21 0103 	bic.w	r1, r1, r3
   1ec28:	e760      	b.n	1eaec <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1ec2a:	3001      	adds	r0, #1
   1ec2c:	2808      	cmp	r0, #8
   1ec2e:	d181      	bne.n	1eb34 <gpio_nrfx_pin_interrupt_configure+0x88>
   1ec30:	e79e      	b.n	1eb70 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   1ec32:	f06f 0012 	mvn.w	r0, #18
   1ec36:	e7ea      	b.n	1ec0e <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ec38:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ec3c:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ec3e:	40f1      	lsrs	r1, r6
   1ec40:	f001 0101 	and.w	r1, r1, #1
   1ec44:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ec48:	b2c9      	uxtb	r1, r1
   1ec4a:	f015 fc6f 	bl	3452c <nrf_gpio_cfg_sense_set>
	int res = 0;
   1ec4e:	4620      	mov	r0, r4
   1ec50:	e7dd      	b.n	1ec0e <gpio_nrfx_pin_interrupt_configure+0x162>
		return -ENOTSUP;
   1ec52:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ec56:	e7da      	b.n	1ec0e <gpio_nrfx_pin_interrupt_configure+0x162>
   1ec58:	40031000 	.word	0x40031000
   1ec5c:	0bad0000 	.word	0x0bad0000
   1ec60:	40031100 	.word	0x40031100

0001ec64 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ec64:	4b2e      	ldr	r3, [pc, #184]	; (1ed20 <gpio_nrfx_config+0xbc>)
{
   1ec66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ec68:	4c2e      	ldr	r4, [pc, #184]	; (1ed24 <gpio_nrfx_config+0xc0>)
   1ec6a:	4013      	ands	r3, r2
   1ec6c:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ec6e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ec70:	d044      	beq.n	1ecfc <gpio_nrfx_config+0x98>
   1ec72:	d80e      	bhi.n	1ec92 <gpio_nrfx_config+0x2e>
   1ec74:	2b06      	cmp	r3, #6
   1ec76:	d043      	beq.n	1ed00 <gpio_nrfx_config+0x9c>
   1ec78:	d806      	bhi.n	1ec88 <gpio_nrfx_config+0x24>
   1ec7a:	2b00      	cmp	r3, #0
   1ec7c:	d040      	beq.n	1ed00 <gpio_nrfx_config+0x9c>
   1ec7e:	2b02      	cmp	r3, #2
   1ec80:	d040      	beq.n	1ed04 <gpio_nrfx_config+0xa0>
   1ec82:	f06f 0015 	mvn.w	r0, #21
   1ec86:	e037      	b.n	1ecf8 <gpio_nrfx_config+0x94>
   1ec88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ec8c:	d1f9      	bne.n	1ec82 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   1ec8e:	2401      	movs	r4, #1
   1ec90:	e009      	b.n	1eca6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ec92:	4c25      	ldr	r4, [pc, #148]	; (1ed28 <gpio_nrfx_config+0xc4>)
   1ec94:	42a3      	cmp	r3, r4
   1ec96:	d037      	beq.n	1ed08 <gpio_nrfx_config+0xa4>
   1ec98:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1ec9c:	d036      	beq.n	1ed0c <gpio_nrfx_config+0xa8>
   1ec9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1eca2:	d1ee      	bne.n	1ec82 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   1eca4:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1eca6:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1eca8:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   1ecac:	bf4c      	ite	mi
   1ecae:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   1ecb0:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ecb4:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1ecb8:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1ecba:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1ecbe:	d507      	bpl.n	1ecd0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1ecc0:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ecc2:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1ecc6:	d523      	bpl.n	1ed10 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1ecc8:	2301      	movs	r3, #1
   1ecca:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1eccc:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1ecd0:	7a03      	ldrb	r3, [r0, #8]
   1ecd2:	f001 011f 	and.w	r1, r1, #31
   1ecd6:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ecda:	a801      	add	r0, sp, #4
   1ecdc:	9101      	str	r1, [sp, #4]
   1ecde:	f7ff fe95 	bl	1ea0c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ece2:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ece4:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   1ece8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   1ecec:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1ecf0:	3280      	adds	r2, #128	; 0x80
   1ecf2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   1ecf6:	2000      	movs	r0, #0
}
   1ecf8:	b003      	add	sp, #12
   1ecfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1ecfc:	2407      	movs	r4, #7
   1ecfe:	e7d2      	b.n	1eca6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ed00:	461c      	mov	r4, r3
   1ed02:	e7d0      	b.n	1eca6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   1ed04:	2404      	movs	r4, #4
   1ed06:	e7ce      	b.n	1eca6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   1ed08:	2405      	movs	r4, #5
   1ed0a:	e7cc      	b.n	1eca6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   1ed0c:	2403      	movs	r4, #3
   1ed0e:	e7ca      	b.n	1eca6 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1ed10:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1ed12:	bf42      	ittt	mi
   1ed14:	2301      	movmi	r3, #1
   1ed16:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   1ed18:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   1ed1c:	e7d8      	b.n	1ecd0 <gpio_nrfx_config+0x6c>
   1ed1e:	bf00      	nop
   1ed20:	00f00006 	.word	0x00f00006
   1ed24:	00100006 	.word	0x00100006
   1ed28:	00400002 	.word	0x00400002

0001ed2c <gpiote_event_handler>:
{
   1ed2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ed30:	4d53      	ldr	r5, [pc, #332]	; (1ee80 <gpiote_event_handler+0x154>)
   1ed32:	682f      	ldr	r7, [r5, #0]
	if (port_event) {
   1ed34:	2f00      	cmp	r7, #0
   1ed36:	d05f      	beq.n	1edf8 <gpiote_event_handler+0xcc>
	uint32_t out = data->pin_int_en;
   1ed38:	4b52      	ldr	r3, [pc, #328]	; (1ee84 <gpiote_event_handler+0x158>)
	uint32_t bit = 1U << pin;
   1ed3a:	f04f 0801 	mov.w	r8, #1
	out &= ~data->trig_edge & ~data->double_edge;
   1ed3e:	e9d3 2005 	ldrd	r2, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   1ed42:	68d9      	ldr	r1, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1ed44:	4302      	orrs	r2, r0
   1ed46:	ea21 0902 	bic.w	r9, r1, r2
	uint32_t check_pins = level_pins;
   1ed4a:	464e      	mov	r6, r9
	uint32_t pin = 0U;
   1ed4c:	f04f 0a00 	mov.w	sl, #0
    return p_reg->IN;
   1ed50:	4a4d      	ldr	r2, [pc, #308]	; (1ee88 <gpiote_event_handler+0x15c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1ed52:	691b      	ldr	r3, [r3, #16]
   1ed54:	6914      	ldr	r4, [r2, #16]
   1ed56:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   1ed58:	ea29 0404 	bic.w	r4, r9, r4
	while (check_pins) {
   1ed5c:	bb86      	cbnz	r6, 1edc0 <gpiote_event_handler+0x94>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ed5e:	602e      	str	r6, [r5, #0]
   1ed60:	682b      	ldr	r3, [r5, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1ed62:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1ed64:	2501      	movs	r5, #1
   1ed66:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   1ed68:	4848      	ldr	r0, [pc, #288]	; (1ee8c <gpiote_event_handler+0x160>)
   1ed6a:	4949      	ldr	r1, [pc, #292]	; (1ee90 <gpiote_event_handler+0x164>)
   1ed6c:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1ed70:	fa05 fc03 	lsl.w	ip, r5, r3
   1ed74:	ea1c 0f02 	tst.w	ip, r2
   1ed78:	d00f      	beq.n	1ed9a <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ed7a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   1ed7e:	b162      	cbz	r2, 1ed9a <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ed80:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1ed84:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ed88:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ed8c:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1ed90:	fa05 f202 	lsl.w	r2, r5, r2
   1ed94:	4314      	orrs	r4, r2
   1ed96:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1ed9a:	3301      	adds	r3, #1
   1ed9c:	2b08      	cmp	r3, #8
   1ed9e:	d1e5      	bne.n	1ed6c <gpiote_event_handler+0x40>
	if (fired_triggers[0]) {
   1eda0:	bb64      	cbnz	r4, 1edfc <gpiote_event_handler+0xd0>
	if (port_event) {
   1eda2:	b157      	cbz	r7, 1edba <gpiote_event_handler+0x8e>
	uint32_t bit = 1U << pin;
   1eda4:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1eda6:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   1eda8:	4d36      	ldr	r5, [pc, #216]	; (1ee84 <gpiote_event_handler+0x158>)
   1edaa:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1edac:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   1edb0:	430a      	orrs	r2, r1
   1edb2:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   1edb6:	2c00      	cmp	r4, #0
   1edb8:	d14f      	bne.n	1ee5a <gpiote_event_handler+0x12e>
}
   1edba:	b003      	add	sp, #12
   1edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   1edc0:	ea18 0f06 	tst.w	r8, r6
   1edc4:	d013      	beq.n	1edee <gpiote_event_handler+0xc2>
			if (!(level_pins & bit)) {
   1edc6:	ea18 0f09 	tst.w	r8, r9
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1edca:	f00a 0b1f 	and.w	fp, sl, #31
			if (!(level_pins & bit)) {
   1edce:	d108      	bne.n	1ede2 <gpiote_event_handler+0xb6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1edd0:	a801      	add	r0, sp, #4
   1edd2:	f8cd b004 	str.w	fp, [sp, #4]
   1edd6:	f7ff fe19 	bl	1ea0c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1edda:	9b01      	ldr	r3, [sp, #4]
   1eddc:	3380      	adds	r3, #128	; 0x80
   1edde:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1ede2:	2100      	movs	r1, #0
   1ede4:	4658      	mov	r0, fp
   1ede6:	f015 fba1 	bl	3452c <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1edea:	ea26 0608 	bic.w	r6, r6, r8
		++pin;
   1edee:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   1edf2:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1edf6:	e7b1      	b.n	1ed5c <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1edf8:	463c      	mov	r4, r7
   1edfa:	e7b2      	b.n	1ed62 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1edfc:	4b21      	ldr	r3, [pc, #132]	; (1ee84 <gpiote_event_handler+0x158>)
   1edfe:	685d      	ldr	r5, [r3, #4]
   1ee00:	2d00      	cmp	r5, #0
   1ee02:	d0ce      	beq.n	1eda2 <gpiote_event_handler+0x76>
	return node->next;
   1ee04:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1ee06:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1ee9c <gpiote_event_handler+0x170>
   1ee0a:	2e00      	cmp	r6, #0
   1ee0c:	bf38      	it	cc
   1ee0e:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   1ee10:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1eea0 <gpiote_event_handler+0x174>
   1ee14:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1eea4 <gpiote_event_handler+0x178>
		if (cb->pin_mask & pins) {
   1ee18:	68ab      	ldr	r3, [r5, #8]
   1ee1a:	421c      	tst	r4, r3
   1ee1c:	d014      	beq.n	1ee48 <gpiote_event_handler+0x11c>
			__ASSERT(cb->handler, "No callback handler!");
   1ee1e:	686b      	ldr	r3, [r5, #4]
   1ee20:	b963      	cbnz	r3, 1ee3c <gpiote_event_handler+0x110>
   1ee22:	4651      	mov	r1, sl
   1ee24:	2345      	movs	r3, #69	; 0x45
   1ee26:	4642      	mov	r2, r8
   1ee28:	481a      	ldr	r0, [pc, #104]	; (1ee94 <gpiote_event_handler+0x168>)
   1ee2a:	f010 ff21 	bl	2fc70 <printk>
   1ee2e:	481a      	ldr	r0, [pc, #104]	; (1ee98 <gpiote_event_handler+0x16c>)
   1ee30:	f010 ff1e 	bl	2fc70 <printk>
   1ee34:	2145      	movs	r1, #69	; 0x45
   1ee36:	4640      	mov	r0, r8
   1ee38:	f011 fa00 	bl	3023c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1ee3c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   1ee40:	4629      	mov	r1, r5
   1ee42:	4648      	mov	r0, r9
   1ee44:	4022      	ands	r2, r4
   1ee46:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ee48:	2e00      	cmp	r6, #0
   1ee4a:	d0aa      	beq.n	1eda2 <gpiote_event_handler+0x76>
   1ee4c:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ee4e:	4635      	mov	r5, r6
   1ee50:	2b00      	cmp	r3, #0
   1ee52:	bf38      	it	cc
   1ee54:	2300      	movcc	r3, #0
   1ee56:	461e      	mov	r6, r3
   1ee58:	e7de      	b.n	1ee18 <gpiote_event_handler+0xec>
		if (level_pins & bit) {
   1ee5a:	4226      	tst	r6, r4
   1ee5c:	d00c      	beq.n	1ee78 <gpiote_event_handler+0x14c>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ee5e:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ee60:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ee64:	40f9      	lsrs	r1, r7
   1ee66:	f001 0101 	and.w	r1, r1, #1
   1ee6a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ee6e:	b2c9      	uxtb	r1, r1
   1ee70:	f015 fb5c 	bl	3452c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1ee74:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1ee78:	3701      	adds	r7, #1
		bit <<= 1;
   1ee7a:	0076      	lsls	r6, r6, #1
   1ee7c:	e79b      	b.n	1edb6 <gpiote_event_handler+0x8a>
   1ee7e:	bf00      	nop
   1ee80:	4003117c 	.word	0x4003117c
   1ee84:	200162f4 	.word	0x200162f4
   1ee88:	40842500 	.word	0x40842500
   1ee8c:	40031000 	.word	0x40031000
   1ee90:	40031100 	.word	0x40031100
   1ee94:	0003a56b 	.word	0x0003a56b
   1ee98:	0003d03c 	.word	0x0003d03c
   1ee9c:	20014d18 	.word	0x20014d18
   1eea0:	0003cfe5 	.word	0x0003cfe5
   1eea4:	0003f8c9 	.word	0x0003f8c9

0001eea8 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   1eea8:	b510      	push	{r4, lr}
   1eeaa:	4604      	mov	r4, r0
   1eeac:	2200      	movs	r2, #0
   1eeae:	2101      	movs	r1, #1
   1eeb0:	200a      	movs	r0, #10
   1eeb2:	f7f8 fbbb 	bl	1762c <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   1eeb6:	6860      	ldr	r0, [r4, #4]
   1eeb8:	6923      	ldr	r3, [r4, #16]
   1eeba:	4a0c      	ldr	r2, [pc, #48]	; (1eeec <twim_2_init+0x44>)
   1eebc:	f100 0108 	add.w	r1, r0, #8
   1eec0:	f006 fcc4 	bl	2584c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1eec4:	4b0a      	ldr	r3, [pc, #40]	; (1eef0 <twim_2_init+0x48>)
   1eec6:	4298      	cmp	r0, r3
   1eec8:	d00d      	beq.n	1eee6 <twim_2_init+0x3e>
   1eeca:	4b0a      	ldr	r3, [pc, #40]	; (1eef4 <twim_2_init+0x4c>)
   1eecc:	4a0a      	ldr	r2, [pc, #40]	; (1eef8 <twim_2_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   1eece:	480b      	ldr	r0, [pc, #44]	; (1eefc <twim_2_init+0x54>)
   1eed0:	1ad2      	subs	r2, r2, r3
   1eed2:	08d2      	lsrs	r2, r2, #3
   1eed4:	0192      	lsls	r2, r2, #6
   1eed6:	6821      	ldr	r1, [r4, #0]
   1eed8:	f042 0201 	orr.w	r2, r2, #1
   1eedc:	f011 fa09 	bl	302f2 <log_1>
		return -EBUSY;
   1eee0:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(2);
   1eee4:	bd10      	pop	{r4, pc}
	return 0;
   1eee6:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(2);
   1eee8:	e7fc      	b.n	1eee4 <twim_2_init+0x3c>
   1eeea:	bf00      	nop
   1eeec:	0001ef55 	.word	0x0001ef55
   1eef0:	0bad0000 	.word	0x0bad0000
   1eef4:	000387c0 	.word	0x000387c0
   1eef8:	00038868 	.word	0x00038868
   1eefc:	0003d0ad 	.word	0x0003d0ad

0001ef00 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1ef00:	07ca      	lsls	r2, r1, #31
{
   1ef02:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   1ef04:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1ef06:	d40f      	bmi.n	1ef28 <i2c_nrfx_twim_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1ef08:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1ef0c:	2a01      	cmp	r2, #1
   1ef0e:	d00e      	beq.n	1ef2e <i2c_nrfx_twim_configure+0x2e>
   1ef10:	2a02      	cmp	r2, #2
   1ef12:	d015      	beq.n	1ef40 <i2c_nrfx_twim_configure+0x40>
   1ef14:	490c      	ldr	r1, [pc, #48]	; (1ef48 <i2c_nrfx_twim_configure+0x48>)
   1ef16:	4b0d      	ldr	r3, [pc, #52]	; (1ef4c <i2c_nrfx_twim_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1ef18:	480d      	ldr	r0, [pc, #52]	; (1ef50 <i2c_nrfx_twim_configure+0x50>)
   1ef1a:	1ac9      	subs	r1, r1, r3
   1ef1c:	08c9      	lsrs	r1, r1, #3
   1ef1e:	0189      	lsls	r1, r1, #6
   1ef20:	f041 0101 	orr.w	r1, r1, #1
   1ef24:	f011 f9d8 	bl	302d8 <log_0>
		return -EINVAL;
   1ef28:	f06f 0015 	mvn.w	r0, #21
   1ef2c:	e007      	b.n	1ef3e <i2c_nrfx_twim_configure+0x3e>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1ef2e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1ef32:	681b      	ldr	r3, [r3, #0]
   1ef34:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1ef38:	6903      	ldr	r3, [r0, #16]
	return 0;
   1ef3a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1ef3c:	6359      	str	r1, [r3, #52]	; 0x34
}
   1ef3e:	bd08      	pop	{r3, pc}
   1ef40:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1ef44:	681b      	ldr	r3, [r3, #0]
   1ef46:	e7f5      	b.n	1ef34 <i2c_nrfx_twim_configure+0x34>
   1ef48:	00038868 	.word	0x00038868
   1ef4c:	000387c0 	.word	0x000387c0
   1ef50:	0003d0cd 	.word	0x0003d0cd

0001ef54 <event_handler>:
	switch (p_event->type) {
   1ef54:	7803      	ldrb	r3, [r0, #0]
   1ef56:	2b01      	cmp	r3, #1
   1ef58:	d008      	beq.n	1ef6c <event_handler+0x18>
   1ef5a:	2b02      	cmp	r3, #2
   1ef5c:	d008      	beq.n	1ef70 <event_handler+0x1c>
   1ef5e:	b94b      	cbnz	r3, 1ef74 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1ef60:	4b05      	ldr	r3, [pc, #20]	; (1ef78 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1ef62:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1ef64:	f101 0018 	add.w	r0, r1, #24
   1ef68:	f00c b94a 	b.w	2b200 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1ef6c:	4b03      	ldr	r3, [pc, #12]	; (1ef7c <event_handler+0x28>)
   1ef6e:	e7f8      	b.n	1ef62 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1ef70:	4b03      	ldr	r3, [pc, #12]	; (1ef80 <event_handler+0x2c>)
   1ef72:	e7f6      	b.n	1ef62 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1ef74:	4b03      	ldr	r3, [pc, #12]	; (1ef84 <event_handler+0x30>)
   1ef76:	e7f4      	b.n	1ef62 <event_handler+0xe>
   1ef78:	0bad0000 	.word	0x0bad0000
   1ef7c:	0bae0001 	.word	0x0bae0001
   1ef80:	0bae0002 	.word	0x0bae0002
   1ef84:	0bad0001 	.word	0x0bad0001

0001ef88 <i2c_nrfx_twim_transfer>:
{
   1ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef8c:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   1ef8e:	2214      	movs	r2, #20
{
   1ef90:	461e      	mov	r6, r3
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   1ef92:	6904      	ldr	r4, [r0, #16]
{
   1ef94:	b08b      	sub	sp, #44	; 0x2c
   1ef96:	4605      	mov	r5, r0
   1ef98:	4689      	mov	r9, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1ef9a:	eb0d 0002 	add.w	r0, sp, r2
   1ef9e:	2100      	movs	r1, #0
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   1efa0:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   1efa4:	f8b4 a038 	ldrh.w	sl, [r4, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
   1efa8:	f018 fc0b 	bl	377c2 <memset>
   1efac:	f88d 6015 	strb.w	r6, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   1efb0:	f04f 32ff 	mov.w	r2, #4294967295
   1efb4:	f04f 33ff 	mov.w	r3, #4294967295
   1efb8:	4620      	mov	r0, r4
   1efba:	f00c f965 	bl	2b288 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1efbe:	6928      	ldr	r0, [r5, #16]
   1efc0:	3018      	adds	r0, #24
	for (size_t i = 0; i < num_msgs; i++) {
   1efc2:	2700      	movs	r7, #0
   1efc4:	2200      	movs	r2, #0
   1efc6:	2300      	movs	r3, #0
   1efc8:	f00c f95e 	bl	2b288 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   1efcc:	6868      	ldr	r0, [r5, #4]
   1efce:	f006 fcb7 	bl	25940 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1efd2:	464e      	mov	r6, r9
	uint32_t concat_len = 0;
   1efd4:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
   1efd6:	455f      	cmp	r7, fp
   1efd8:	d301      	bcc.n	1efde <i2c_nrfx_twim_transfer+0x56>
   1efda:	2400      	movs	r4, #0
   1efdc:	e049      	b.n	1f072 <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1efde:	7a31      	ldrb	r1, [r6, #8]
   1efe0:	070b      	lsls	r3, r1, #28
   1efe2:	f100 80ae 	bmi.w	1f142 <i2c_nrfx_twim_transfer+0x1ba>
			&& ((msgs[i].flags & I2C_MSG_READ)
   1efe6:	f1ba 0f00 	cmp.w	sl, #0
   1efea:	d00d      	beq.n	1f008 <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
   1efec:	1c7b      	adds	r3, r7, #1
   1efee:	455b      	cmp	r3, fp
   1eff0:	d20a      	bcs.n	1f008 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   1eff2:	0788      	lsls	r0, r1, #30
   1eff4:	d408      	bmi.n	1f008 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1eff6:	7d33      	ldrb	r3, [r6, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   1eff8:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   1effc:	f002 0201 	and.w	r2, r2, #1
   1f000:	f003 0304 	and.w	r3, r3, #4
   1f004:	4313      	orrs	r3, r2
   1f006:	d01f      	beq.n	1f048 <i2c_nrfx_twim_transfer+0xc0>
		if (concat_next || (concat_len != 0)) {
   1f008:	2c00      	cmp	r4, #0
   1f00a:	d13c      	bne.n	1f086 <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1f00c:	2400      	movs	r4, #0
   1f00e:	6833      	ldr	r3, [r6, #0]
   1f010:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   1f012:	6873      	ldr	r3, [r6, #4]
   1f014:	9306      	str	r3, [sp, #24]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1f016:	7a33      	ldrb	r3, [r6, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1f018:	6868      	ldr	r0, [r5, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1f01a:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1f01e:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1f022:	f88d 2014 	strb.w	r2, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1f026:	a905      	add	r1, sp, #20
   1f028:	bf0c      	ite	eq
   1f02a:	2220      	moveq	r2, #32
   1f02c:	2200      	movne	r2, #0
   1f02e:	f006 fce9 	bl	25a04 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1f032:	4b45      	ldr	r3, [pc, #276]	; (1f148 <i2c_nrfx_twim_transfer+0x1c0>)
   1f034:	4298      	cmp	r0, r3
   1f036:	d03b      	beq.n	1f0b0 <i2c_nrfx_twim_transfer+0x128>
			if (res == NRFX_ERROR_BUSY) {
   1f038:	330b      	adds	r3, #11
				ret = -EIO;
   1f03a:	4298      	cmp	r0, r3
   1f03c:	bf0c      	ite	eq
   1f03e:	f06f 040f 	mvneq.w	r4, #15
   1f042:	f06f 0404 	mvnne.w	r4, #4
   1f046:	e014      	b.n	1f072 <i2c_nrfx_twim_transfer+0xea>
			&& ((msgs[i].flags & I2C_MSG_READ)
   1f048:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   1f04a:	6872      	ldr	r2, [r6, #4]
   1f04c:	1910      	adds	r0, r2, r4
   1f04e:	4550      	cmp	r0, sl
   1f050:	d91b      	bls.n	1f08a <i2c_nrfx_twim_transfer+0x102>
   1f052:	493e      	ldr	r1, [pc, #248]	; (1f14c <i2c_nrfx_twim_transfer+0x1c4>)
   1f054:	4b3e      	ldr	r3, [pc, #248]	; (1f150 <i2c_nrfx_twim_transfer+0x1c8>)
				LOG_ERR("concat-buf overflow: %u + %u > %u",
   1f056:	483f      	ldr	r0, [pc, #252]	; (1f154 <i2c_nrfx_twim_transfer+0x1cc>)
   1f058:	1a5b      	subs	r3, r3, r1
   1f05a:	08db      	lsrs	r3, r3, #3
   1f05c:	019b      	lsls	r3, r3, #6
   1f05e:	f043 0301 	orr.w	r3, r3, #1
   1f062:	4621      	mov	r1, r4
   1f064:	f8ad 3000 	strh.w	r3, [sp]
   1f068:	4653      	mov	r3, sl
   1f06a:	f011 f96f 	bl	3034c <log_3>
				ret = -ENOSPC;
   1f06e:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   1f072:	6868      	ldr	r0, [r5, #4]
   1f074:	f006 fc8e 	bl	25994 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1f078:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
   1f07a:	f00c f8c1 	bl	2b200 <z_impl_k_sem_give>
}
   1f07e:	4620      	mov	r0, r4
   1f080:	b00b      	add	sp, #44	; 0x2c
   1f082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
   1f086:	2300      	movs	r3, #0
   1f088:	e7df      	b.n	1f04a <i2c_nrfx_twim_transfer+0xc2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1f08a:	07c9      	lsls	r1, r1, #31
   1f08c:	d406      	bmi.n	1f09c <i2c_nrfx_twim_transfer+0x114>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f08e:	6831      	ldr	r1, [r6, #0]
   1f090:	eb08 0004 	add.w	r0, r8, r4
   1f094:	9303      	str	r3, [sp, #12]
   1f096:	f018 fb74 	bl	37782 <memcpy>
   1f09a:	9b03      	ldr	r3, [sp, #12]
			concat_len += msgs[i].len;
   1f09c:	6872      	ldr	r2, [r6, #4]
   1f09e:	4414      	add	r4, r2
		if (concat_next) {
   1f0a0:	2b00      	cmp	r3, #0
   1f0a2:	d138      	bne.n	1f116 <i2c_nrfx_twim_transfer+0x18e>
		if (concat_len == 0) {
   1f0a4:	2c00      	cmp	r4, #0
   1f0a6:	d0b1      	beq.n	1f00c <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
   1f0a8:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = concat_len;
   1f0ac:	9406      	str	r4, [sp, #24]
   1f0ae:	e7b2      	b.n	1f016 <i2c_nrfx_twim_transfer+0x8e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1f0b0:	6928      	ldr	r0, [r5, #16]
   1f0b2:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1f0b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1f0b8:	2300      	movs	r3, #0
   1f0ba:	f00c f8e5 	bl	2b288 <z_impl_k_sem_take>
		if (ret != 0) {
   1f0be:	b1a8      	cbz	r0, 1f0ec <i2c_nrfx_twim_transfer+0x164>
   1f0c0:	4b22      	ldr	r3, [pc, #136]	; (1f14c <i2c_nrfx_twim_transfer+0x1c4>)
   1f0c2:	4a23      	ldr	r2, [pc, #140]	; (1f150 <i2c_nrfx_twim_transfer+0x1c8>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1f0c4:	4639      	mov	r1, r7
   1f0c6:	1ad2      	subs	r2, r2, r3
   1f0c8:	08d2      	lsrs	r2, r2, #3
   1f0ca:	0192      	lsls	r2, r2, #6
   1f0cc:	4822      	ldr	r0, [pc, #136]	; (1f158 <i2c_nrfx_twim_transfer+0x1d0>)
   1f0ce:	f042 0201 	orr.w	r2, r2, #1
   1f0d2:	f011 f90e 	bl	302f2 <log_1>
			nrfx_twim_disable(&get_dev_config(dev)->twim);
   1f0d6:	6868      	ldr	r0, [r5, #4]
   1f0d8:	f006 fc5c 	bl	25994 <nrfx_twim_disable>
			nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
   1f0dc:	686b      	ldr	r3, [r5, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1f0de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1f0e2:	f006 ff9b 	bl	2601c <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   1f0e6:	f06f 0404 	mvn.w	r4, #4
			break;
   1f0ea:	e7c2      	b.n	1f072 <i2c_nrfx_twim_transfer+0xea>
		res = get_dev_data(dev)->res;
   1f0ec:	692b      	ldr	r3, [r5, #16]
   1f0ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1f0f0:	4b15      	ldr	r3, [pc, #84]	; (1f148 <i2c_nrfx_twim_transfer+0x1c0>)
   1f0f2:	4299      	cmp	r1, r3
   1f0f4:	d00b      	beq.n	1f10e <i2c_nrfx_twim_transfer+0x186>
   1f0f6:	4a15      	ldr	r2, [pc, #84]	; (1f14c <i2c_nrfx_twim_transfer+0x1c4>)
   1f0f8:	4b15      	ldr	r3, [pc, #84]	; (1f150 <i2c_nrfx_twim_transfer+0x1c8>)
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1f0fa:	4818      	ldr	r0, [pc, #96]	; (1f15c <i2c_nrfx_twim_transfer+0x1d4>)
   1f0fc:	1a9b      	subs	r3, r3, r2
   1f0fe:	08db      	lsrs	r3, r3, #3
   1f100:	019b      	lsls	r3, r3, #6
   1f102:	463a      	mov	r2, r7
   1f104:	f043 0301 	orr.w	r3, r3, #1
   1f108:	f011 f907 	bl	3031a <log_2>
   1f10c:	e7eb      	b.n	1f0e6 <i2c_nrfx_twim_transfer+0x15e>
		if ((msgs[i].flags & I2C_MSG_READ)
   1f10e:	7a33      	ldrb	r3, [r6, #8]
   1f110:	07db      	lsls	r3, r3, #31
   1f112:	d403      	bmi.n	1f11c <i2c_nrfx_twim_transfer+0x194>
		concat_len = 0;
   1f114:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
   1f116:	3701      	adds	r7, #1
   1f118:	360c      	adds	r6, #12
   1f11a:	e75c      	b.n	1efd6 <i2c_nrfx_twim_transfer+0x4e>
		    && cur_xfer.p_primary_buf == concat_buf) {
   1f11c:	9b08      	ldr	r3, [sp, #32]
   1f11e:	4598      	cmp	r8, r3
   1f120:	d1f8      	bne.n	1f114 <i2c_nrfx_twim_transfer+0x18c>
			while (concat_len >= msgs[j].len) {
   1f122:	230c      	movs	r3, #12
   1f124:	fb03 9307 	mla	r3, r3, r7, r9
   1f128:	685a      	ldr	r2, [r3, #4]
   1f12a:	3b0c      	subs	r3, #12
   1f12c:	4294      	cmp	r4, r2
   1f12e:	d3f1      	bcc.n	1f114 <i2c_nrfx_twim_transfer+0x18c>
				concat_len -= msgs[j].len;
   1f130:	1aa4      	subs	r4, r4, r2
   1f132:	68d8      	ldr	r0, [r3, #12]
   1f134:	eb08 0104 	add.w	r1, r8, r4
   1f138:	9303      	str	r3, [sp, #12]
   1f13a:	f018 fb22 	bl	37782 <memcpy>
   1f13e:	9b03      	ldr	r3, [sp, #12]
				j--;
   1f140:	e7f2      	b.n	1f128 <i2c_nrfx_twim_transfer+0x1a0>
			ret = -ENOTSUP;
   1f142:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1f146:	e794      	b.n	1f072 <i2c_nrfx_twim_transfer+0xea>
   1f148:	0bad0000 	.word	0x0bad0000
   1f14c:	000387c0 	.word	0x000387c0
   1f150:	00038868 	.word	0x00038868
   1f154:	0003d0df 	.word	0x0003d0df
   1f158:	0003d101 	.word	0x0003d101
   1f15c:	0003d12b 	.word	0x0003d12b

0001f160 <gpio_pin_set>:
{
   1f160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f164:	2501      	movs	r5, #1
   1f166:	6843      	ldr	r3, [r0, #4]
   1f168:	408d      	lsls	r5, r1
   1f16a:	681b      	ldr	r3, [r3, #0]
{
   1f16c:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f16e:	421d      	tst	r5, r3
{
   1f170:	4616      	mov	r6, r2
	const struct gpio_driver_data *const data =
   1f172:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f174:	d10e      	bne.n	1f194 <gpio_pin_set+0x34>
   1f176:	4919      	ldr	r1, [pc, #100]	; (1f1dc <gpio_pin_set+0x7c>)
   1f178:	f240 439f 	movw	r3, #1183	; 0x49f
   1f17c:	4a18      	ldr	r2, [pc, #96]	; (1f1e0 <gpio_pin_set+0x80>)
   1f17e:	4819      	ldr	r0, [pc, #100]	; (1f1e4 <gpio_pin_set+0x84>)
   1f180:	f010 fd76 	bl	2fc70 <printk>
   1f184:	4818      	ldr	r0, [pc, #96]	; (1f1e8 <gpio_pin_set+0x88>)
   1f186:	f010 fd73 	bl	2fc70 <printk>
   1f18a:	f240 419f 	movw	r1, #1183	; 0x49f
   1f18e:	4814      	ldr	r0, [pc, #80]	; (1f1e0 <gpio_pin_set+0x80>)
   1f190:	f011 f854 	bl	3023c <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1f194:	683b      	ldr	r3, [r7, #0]
   1f196:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f198:	6863      	ldr	r3, [r4, #4]
   1f19a:	bf18      	it	ne
   1f19c:	f086 0601 	eorne.w	r6, r6, #1
   1f1a0:	681b      	ldr	r3, [r3, #0]
   1f1a2:	421d      	tst	r5, r3
   1f1a4:	d10e      	bne.n	1f1c4 <gpio_pin_set+0x64>
   1f1a6:	490d      	ldr	r1, [pc, #52]	; (1f1dc <gpio_pin_set+0x7c>)
   1f1a8:	f240 4375 	movw	r3, #1141	; 0x475
   1f1ac:	4a0c      	ldr	r2, [pc, #48]	; (1f1e0 <gpio_pin_set+0x80>)
   1f1ae:	480d      	ldr	r0, [pc, #52]	; (1f1e4 <gpio_pin_set+0x84>)
   1f1b0:	f010 fd5e 	bl	2fc70 <printk>
   1f1b4:	480c      	ldr	r0, [pc, #48]	; (1f1e8 <gpio_pin_set+0x88>)
   1f1b6:	f010 fd5b 	bl	2fc70 <printk>
   1f1ba:	f240 4175 	movw	r1, #1141	; 0x475
   1f1be:	4808      	ldr	r0, [pc, #32]	; (1f1e0 <gpio_pin_set+0x80>)
   1f1c0:	f011 f83c 	bl	3023c <assert_post_action>
	if (value != 0)	{
   1f1c4:	b136      	cbz	r6, 1f1d4 <gpio_pin_set+0x74>
	return api->port_set_bits_raw(port, pins);
   1f1c6:	68a3      	ldr	r3, [r4, #8]
   1f1c8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1f1ca:	4629      	mov	r1, r5
   1f1cc:	4620      	mov	r0, r4
}
   1f1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1f1d2:	4718      	bx	r3
   1f1d4:	68a3      	ldr	r3, [r4, #8]
   1f1d6:	691b      	ldr	r3, [r3, #16]
   1f1d8:	e7f7      	b.n	1f1ca <gpio_pin_set+0x6a>
   1f1da:	bf00      	nop
   1f1dc:	0003ba15 	.word	0x0003ba15
   1f1e0:	0003b9eb 	.word	0x0003b9eb
   1f1e4:	0003a56b 	.word	0x0003a56b
   1f1e8:	0003ba53 	.word	0x0003ba53

0001f1ec <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   1f1ec:	b538      	push	{r3, r4, r5, lr}
   1f1ee:	4604      	mov	r4, r0
   1f1f0:	2200      	movs	r2, #0
   1f1f2:	2101      	movs	r1, #1
   1f1f4:	200b      	movs	r0, #11
   1f1f6:	f7f8 fa19 	bl	1762c <z_arm_irq_priority_set>
	struct spi_nrfx_data *data = get_dev_data(dev);
   1f1fa:	6923      	ldr	r3, [r4, #16]
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
   1f1fc:	4a0e      	ldr	r2, [pc, #56]	; (1f238 <spi_3_init+0x4c>)
	data->dev = dev;
   1f1fe:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
   1f200:	6860      	ldr	r0, [r4, #4]
   1f202:	f100 0110 	add.w	r1, r0, #16
   1f206:	f005 ff6b 	bl	250e0 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1f20a:	4b0c      	ldr	r3, [pc, #48]	; (1f23c <spi_3_init+0x50>)
   1f20c:	4298      	cmp	r0, r3
   1f20e:	d011      	beq.n	1f234 <spi_3_init+0x48>
   1f210:	4b0b      	ldr	r3, [pc, #44]	; (1f240 <spi_3_init+0x54>)
   1f212:	4a0c      	ldr	r2, [pc, #48]	; (1f244 <spi_3_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1f214:	6821      	ldr	r1, [r4, #0]
   1f216:	1ad2      	subs	r2, r2, r3
   1f218:	08d2      	lsrs	r2, r2, #3
   1f21a:	0192      	lsls	r2, r2, #6
   1f21c:	480a      	ldr	r0, [pc, #40]	; (1f248 <spi_3_init+0x5c>)
   1f21e:	f042 0201 	orr.w	r2, r2, #1
   1f222:	f011 f866 	bl	302f2 <log_1>
		return -EBUSY;
   1f226:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPIM_DEVICE(3);
   1f22a:	6920      	ldr	r0, [r4, #16]
   1f22c:	f015 f9b6 	bl	3459c <spi_context_unlock_unconditionally>
   1f230:	4628      	mov	r0, r5
   1f232:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1f234:	2500      	movs	r5, #0
   1f236:	e7f8      	b.n	1f22a <spi_3_init+0x3e>
   1f238:	0001f68d 	.word	0x0001f68d
   1f23c:	0bad0000 	.word	0x0bad0000
   1f240:	000387c0 	.word	0x000387c0
   1f244:	000388f0 	.word	0x000388f0
   1f248:	0003d0ad 	.word	0x0003d0ad

0001f24c <transfer_next_chunk>:
{
   1f24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1f250:	6905      	ldr	r5, [r0, #16]
{
   1f252:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1f254:	6d2f      	ldr	r7, [r5, #80]	; 0x50
   1f256:	6dac      	ldr	r4, [r5, #88]	; 0x58
   1f258:	b98f      	cbnz	r7, 1f27e <transfer_next_chunk+0x32>
	if (chunk_len > 0) {
   1f25a:	2c00      	cmp	r4, #0
   1f25c:	d14c      	bne.n	1f2f8 <transfer_next_chunk+0xac>
	_spi_context_cs_control(ctx, on, false);
   1f25e:	2200      	movs	r2, #0
   1f260:	4628      	mov	r0, r5
   1f262:	4611      	mov	r1, r2
   1f264:	f015 f975 	bl	34552 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   1f268:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1f26a:	f105 0020 	add.w	r0, r5, #32
   1f26e:	f00b ffc7 	bl	2b200 <z_impl_k_sem_give>
	dev_data->busy = false;
   1f272:	2300      	movs	r3, #0
   1f274:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1f278:	b005      	add	sp, #20
   1f27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1f27e:	463e      	mov	r6, r7
   1f280:	b114      	cbz	r4, 1f288 <transfer_next_chunk+0x3c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1f282:	42a7      	cmp	r7, r4
   1f284:	bf28      	it	cs
   1f286:	4626      	movcs	r6, r4
		const uint8_t *tx_buf = ctx->tx_buf;
   1f288:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   1f28c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
   1f290:	f1b8 0f00 	cmp.w	r8, #0
   1f294:	d032      	beq.n	1f2fc <transfer_next_chunk+0xb0>
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1f296:	b38f      	cbz	r7, 1f2fc <transfer_next_chunk+0xb0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1f298:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
   1f29c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1f2a0:	d02c      	beq.n	1f2fc <transfer_next_chunk+0xb0>
			if (chunk_len > sizeof(dev_data->buffer)) {
   1f2a2:	2e08      	cmp	r6, #8
   1f2a4:	bf28      	it	cs
   1f2a6:	2608      	movcs	r6, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   1f2a8:	f105 0365 	add.w	r3, r5, #101	; 0x65
   1f2ac:	4618      	mov	r0, r3
   1f2ae:	4632      	mov	r2, r6
   1f2b0:	4641      	mov	r1, r8
   1f2b2:	f018 fa66 	bl	37782 <memcpy>
   1f2b6:	4603      	mov	r3, r0
		if (chunk_len > dev_config->max_chunk_len) {
   1f2b8:	f8d9 2008 	ldr.w	r2, [r9, #8]
		xfer.p_tx_buffer = tx_buf;
   1f2bc:	9300      	str	r3, [sp, #0]
   1f2be:	4296      	cmp	r6, r2
   1f2c0:	bf28      	it	cs
   1f2c2:	4616      	movcs	r6, r2
		dev_data->chunk_len = chunk_len;
   1f2c4:	662e      	str	r6, [r5, #96]	; 0x60
   1f2c6:	f1b8 0f00 	cmp.w	r8, #0
   1f2ca:	d019      	beq.n	1f300 <transfer_next_chunk+0xb4>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1f2cc:	2f00      	cmp	r7, #0
   1f2ce:	bf18      	it	ne
   1f2d0:	4637      	movne	r7, r6
		xfer.p_rx_buffer = ctx->rx_buf;
   1f2d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1f2d4:	9701      	str	r7, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1f2d6:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1f2d8:	b1a3      	cbz	r3, 1f304 <transfer_next_chunk+0xb8>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1f2da:	2c00      	cmp	r4, #0
   1f2dc:	bf18      	it	ne
   1f2de:	4634      	movne	r4, r6
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1f2e0:	2200      	movs	r2, #0
   1f2e2:	4669      	mov	r1, sp
   1f2e4:	4648      	mov	r0, r9
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1f2e6:	9403      	str	r4, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1f2e8:	f005 ffc0 	bl	2526c <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1f2ec:	4b06      	ldr	r3, [pc, #24]	; (1f308 <transfer_next_chunk+0xbc>)
   1f2ee:	4298      	cmp	r0, r3
   1f2f0:	d0c2      	beq.n	1f278 <transfer_next_chunk+0x2c>
			error = -EIO;
   1f2f2:	f06f 0404 	mvn.w	r4, #4
   1f2f6:	e7b2      	b.n	1f25e <transfer_next_chunk+0x12>
   1f2f8:	4626      	mov	r6, r4
   1f2fa:	e7c5      	b.n	1f288 <transfer_next_chunk+0x3c>
   1f2fc:	4643      	mov	r3, r8
   1f2fe:	e7db      	b.n	1f2b8 <transfer_next_chunk+0x6c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1f300:	4647      	mov	r7, r8
   1f302:	e7e6      	b.n	1f2d2 <transfer_next_chunk+0x86>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1f304:	461c      	mov	r4, r3
   1f306:	e7eb      	b.n	1f2e0 <transfer_next_chunk+0x94>
   1f308:	0bad0000 	.word	0x0bad0000

0001f30c <spi_nrfx_transceive>:
{
   1f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f310:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1f312:	888b      	ldrh	r3, [r1, #4]
   1f314:	4681      	mov	r9, r0
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1f316:	6904      	ldr	r4, [r0, #16]
   1f318:	0458      	lsls	r0, r3, #17
{
   1f31a:	460d      	mov	r5, r1
   1f31c:	4617      	mov	r7, r2
   1f31e:	b087      	sub	sp, #28
   1f320:	d42e      	bmi.n	1f380 <spi_nrfx_transceive+0x74>
	return z_impl_k_sem_take(sem, timeout);
   1f322:	f04f 32ff 	mov.w	r2, #4294967295
   1f326:	f04f 33ff 	mov.w	r3, #4294967295
   1f32a:	f104 0008 	add.w	r0, r4, #8
   1f32e:	f00b ffab 	bl	2b288 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1f332:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   1f334:	f8d9 8010 	ldr.w	r8, [r9, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
   1f338:	f8d8 3000 	ldr.w	r3, [r8]
   1f33c:	429d      	cmp	r5, r3
   1f33e:	f000 811a 	beq.w	1f576 <spi_nrfx_transceive+0x26a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1f342:	88ab      	ldrh	r3, [r5, #4]
   1f344:	07d9      	lsls	r1, r3, #31
   1f346:	d522      	bpl.n	1f38e <spi_nrfx_transceive+0x82>
   1f348:	4ab2      	ldr	r2, [pc, #712]	; (1f614 <spi_nrfx_transceive+0x308>)
   1f34a:	4bb3      	ldr	r3, [pc, #716]	; (1f618 <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Slave mode is not supported on %s",
   1f34c:	f8d9 1000 	ldr.w	r1, [r9]
   1f350:	1ad2      	subs	r2, r2, r3
   1f352:	08d2      	lsrs	r2, r2, #3
   1f354:	0192      	lsls	r2, r2, #6
   1f356:	48b1      	ldr	r0, [pc, #708]	; (1f61c <spi_nrfx_transceive+0x310>)
   1f358:	f042 0201 	orr.w	r2, r2, #1
   1f35c:	f010 ffc9 	bl	302f2 <log_1>
		return -EINVAL;
   1f360:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1f364:	6823      	ldr	r3, [r4, #0]
   1f366:	889b      	ldrh	r3, [r3, #4]
   1f368:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1f36c:	d104      	bne.n	1f378 <spi_nrfx_transceive+0x6c>
		ctx->owner = NULL;
   1f36e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1f370:	f104 0008 	add.w	r0, r4, #8
   1f374:	f00b ff44 	bl	2b200 <z_impl_k_sem_give>
}
   1f378:	4628      	mov	r0, r5
   1f37a:	b007      	add	sp, #28
   1f37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1f380:	6923      	ldr	r3, [r4, #16]
   1f382:	2b00      	cmp	r3, #0
   1f384:	d1cd      	bne.n	1f322 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1f386:	6863      	ldr	r3, [r4, #4]
   1f388:	4299      	cmp	r1, r3
   1f38a:	d1ca      	bne.n	1f322 <spi_nrfx_transceive+0x16>
   1f38c:	e7d2      	b.n	1f334 <spi_nrfx_transceive+0x28>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1f38e:	071a      	lsls	r2, r3, #28
   1f390:	d50a      	bpl.n	1f3a8 <spi_nrfx_transceive+0x9c>
   1f392:	49a0      	ldr	r1, [pc, #640]	; (1f614 <spi_nrfx_transceive+0x308>)
   1f394:	4ba0      	ldr	r3, [pc, #640]	; (1f618 <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Loopback mode is not supported");
   1f396:	48a2      	ldr	r0, [pc, #648]	; (1f620 <spi_nrfx_transceive+0x314>)
   1f398:	1ac9      	subs	r1, r1, r3
   1f39a:	08c9      	lsrs	r1, r1, #3
   1f39c:	0189      	lsls	r1, r1, #6
   1f39e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   1f3a2:	f010 ff99 	bl	302d8 <log_0>
   1f3a6:	e7db      	b.n	1f360 <spi_nrfx_transceive+0x54>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1f3a8:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1f3ac:	d008      	beq.n	1f3c0 <spi_nrfx_transceive+0xb4>
   1f3ae:	4999      	ldr	r1, [pc, #612]	; (1f614 <spi_nrfx_transceive+0x308>)
   1f3b0:	4b99      	ldr	r3, [pc, #612]	; (1f618 <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Only single line mode is supported");
   1f3b2:	489c      	ldr	r0, [pc, #624]	; (1f624 <spi_nrfx_transceive+0x318>)
   1f3b4:	1ac9      	subs	r1, r1, r3
   1f3b6:	08c9      	lsrs	r1, r1, #3
   1f3b8:	0189      	lsls	r1, r1, #6
   1f3ba:	f041 0101 	orr.w	r1, r1, #1
   1f3be:	e7f0      	b.n	1f3a2 <spi_nrfx_transceive+0x96>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1f3c0:	f3c3 1245 	ubfx	r2, r3, #5, #6
   1f3c4:	2a08      	cmp	r2, #8
   1f3c6:	d008      	beq.n	1f3da <spi_nrfx_transceive+0xce>
   1f3c8:	4992      	ldr	r1, [pc, #584]	; (1f614 <spi_nrfx_transceive+0x308>)
   1f3ca:	4b93      	ldr	r3, [pc, #588]	; (1f618 <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Word sizes other than 8 bits"
   1f3cc:	4896      	ldr	r0, [pc, #600]	; (1f628 <spi_nrfx_transceive+0x31c>)
   1f3ce:	1ac9      	subs	r1, r1, r3
   1f3d0:	08c9      	lsrs	r1, r1, #3
   1f3d2:	0189      	lsls	r1, r1, #6
   1f3d4:	f041 0101 	orr.w	r1, r1, #1
   1f3d8:	e7e3      	b.n	1f3a2 <spi_nrfx_transceive+0x96>
	if (spi_cfg->frequency < 125000) {
   1f3da:	6829      	ldr	r1, [r5, #0]
   1f3dc:	4a93      	ldr	r2, [pc, #588]	; (1f62c <spi_nrfx_transceive+0x320>)
   1f3de:	4291      	cmp	r1, r2
   1f3e0:	d808      	bhi.n	1f3f4 <spi_nrfx_transceive+0xe8>
   1f3e2:	498c      	ldr	r1, [pc, #560]	; (1f614 <spi_nrfx_transceive+0x308>)
   1f3e4:	4b8c      	ldr	r3, [pc, #560]	; (1f618 <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1f3e6:	4892      	ldr	r0, [pc, #584]	; (1f630 <spi_nrfx_transceive+0x324>)
   1f3e8:	1ac9      	subs	r1, r1, r3
   1f3ea:	08c9      	lsrs	r1, r1, #3
   1f3ec:	0189      	lsls	r1, r1, #6
   1f3ee:	f041 0101 	orr.w	r1, r1, #1
   1f3f2:	e7d6      	b.n	1f3a2 <spi_nrfx_transceive+0x96>
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   1f3f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
	ctx->config = spi_cfg;
   1f3f8:	f8c8 5000 	str.w	r5, [r8]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   1f3fc:	9202      	str	r2, [sp, #8]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1f3fe:	68aa      	ldr	r2, [r5, #8]
   1f400:	2a00      	cmp	r2, #0
   1f402:	f000 80e2 	beq.w	1f5ca <spi_nrfx_transceive+0x2be>
   1f406:	6811      	ldr	r1, [r2, #0]
   1f408:	2900      	cmp	r1, #0
   1f40a:	f000 80de 	beq.w	1f5ca <spi_nrfx_transceive+0x2be>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   1f40e:	43db      	mvns	r3, r3
		__ASSERT(spi_context_cs_active_level(ctx) ==
   1f410:	7a52      	ldrb	r2, [r2, #9]
   1f412:	f3c3 33c0 	ubfx	r3, r3, #15, #1
   1f416:	f002 0201 	and.w	r2, r2, #1
   1f41a:	4293      	cmp	r3, r2
   1f41c:	d00c      	beq.n	1f438 <spi_nrfx_transceive+0x12c>
   1f41e:	4985      	ldr	r1, [pc, #532]	; (1f634 <spi_nrfx_transceive+0x328>)
   1f420:	23b2      	movs	r3, #178	; 0xb2
   1f422:	4a85      	ldr	r2, [pc, #532]	; (1f638 <spi_nrfx_transceive+0x32c>)
   1f424:	4885      	ldr	r0, [pc, #532]	; (1f63c <spi_nrfx_transceive+0x330>)
   1f426:	f010 fc23 	bl	2fc70 <printk>
   1f42a:	4885      	ldr	r0, [pc, #532]	; (1f640 <spi_nrfx_transceive+0x334>)
   1f42c:	f010 fc20 	bl	2fc70 <printk>
   1f430:	21b2      	movs	r1, #178	; 0xb2
   1f432:	4881      	ldr	r0, [pc, #516]	; (1f638 <spi_nrfx_transceive+0x32c>)
   1f434:	f010 ff02 	bl	3023c <assert_post_action>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1f438:	f8d8 3000 	ldr.w	r3, [r8]
   1f43c:	689b      	ldr	r3, [r3, #8]
   1f43e:	7a1a      	ldrb	r2, [r3, #8]
   1f440:	f8d3 b000 	ldr.w	fp, [r3]
				   ctx->config->cs->gpio_dt_flags |
   1f444:	f893 8009 	ldrb.w	r8, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1f448:	9200      	str	r2, [sp, #0]
	const struct gpio_driver_api *api =
   1f44a:	f8db 3008 	ldr.w	r3, [fp, #8]
   1f44e:	9303      	str	r3, [sp, #12]
	const struct gpio_driver_config *const cfg =
   1f450:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f454:	9304      	str	r3, [sp, #16]
	struct gpio_driver_data *data =
   1f456:	f8db 3010 	ldr.w	r3, [fp, #16]
   1f45a:	9301      	str	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1f45c:	f008 0330 	and.w	r3, r8, #48	; 0x30
   1f460:	2b30      	cmp	r3, #48	; 0x30
   1f462:	d10e      	bne.n	1f482 <spi_nrfx_transceive+0x176>
   1f464:	4977      	ldr	r1, [pc, #476]	; (1f644 <spi_nrfx_transceive+0x338>)
   1f466:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1f46a:	4a77      	ldr	r2, [pc, #476]	; (1f648 <spi_nrfx_transceive+0x33c>)
   1f46c:	4873      	ldr	r0, [pc, #460]	; (1f63c <spi_nrfx_transceive+0x330>)
   1f46e:	f010 fbff 	bl	2fc70 <printk>
   1f472:	4876      	ldr	r0, [pc, #472]	; (1f64c <spi_nrfx_transceive+0x340>)
   1f474:	f010 fbfc 	bl	2fc70 <printk>
   1f478:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   1f47c:	4872      	ldr	r0, [pc, #456]	; (1f648 <spi_nrfx_transceive+0x33c>)
   1f47e:	f010 fedd 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1f482:	f008 0306 	and.w	r3, r8, #6
   1f486:	2b04      	cmp	r3, #4
   1f488:	d10b      	bne.n	1f4a2 <spi_nrfx_transceive+0x196>
   1f48a:	4971      	ldr	r1, [pc, #452]	; (1f650 <spi_nrfx_transceive+0x344>)
   1f48c:	486b      	ldr	r0, [pc, #428]	; (1f63c <spi_nrfx_transceive+0x330>)
   1f48e:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   1f492:	4a6d      	ldr	r2, [pc, #436]	; (1f648 <spi_nrfx_transceive+0x33c>)
   1f494:	f010 fbec 	bl	2fc70 <printk>
   1f498:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   1f49c:	486a      	ldr	r0, [pc, #424]	; (1f648 <spi_nrfx_transceive+0x33c>)
   1f49e:	f010 fecd 	bl	3023c <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f4a2:	f04f 0a01 	mov.w	sl, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1f4a6:	f018 0f01 	tst.w	r8, #1
   1f4aa:	bf0c      	ite	eq
   1f4ac:	f448 58b0 	orreq.w	r8, r8, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1f4b0:	f488 58d0 	eorne.w	r8, r8, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1f4b4:	f428 5380 	bic.w	r3, r8, #4096	; 0x1000
   1f4b8:	9305      	str	r3, [sp, #20]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f4ba:	9b00      	ldr	r3, [sp, #0]
   1f4bc:	fa0a fa03 	lsl.w	sl, sl, r3
   1f4c0:	9b04      	ldr	r3, [sp, #16]
   1f4c2:	681b      	ldr	r3, [r3, #0]
   1f4c4:	ea1a 0f03 	tst.w	sl, r3
   1f4c8:	d10e      	bne.n	1f4e8 <spi_nrfx_transceive+0x1dc>
   1f4ca:	4962      	ldr	r1, [pc, #392]	; (1f654 <spi_nrfx_transceive+0x348>)
   1f4cc:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   1f4d0:	4a5d      	ldr	r2, [pc, #372]	; (1f648 <spi_nrfx_transceive+0x33c>)
   1f4d2:	485a      	ldr	r0, [pc, #360]	; (1f63c <spi_nrfx_transceive+0x330>)
   1f4d4:	f010 fbcc 	bl	2fc70 <printk>
   1f4d8:	485f      	ldr	r0, [pc, #380]	; (1f658 <spi_nrfx_transceive+0x34c>)
   1f4da:	f010 fbc9 	bl	2fc70 <printk>
   1f4de:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1f4e2:	4859      	ldr	r0, [pc, #356]	; (1f648 <spi_nrfx_transceive+0x33c>)
   1f4e4:	f010 feaa 	bl	3023c <assert_post_action>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1f4e8:	9b01      	ldr	r3, [sp, #4]
   1f4ea:	9a01      	ldr	r2, [sp, #4]
   1f4ec:	681b      	ldr	r3, [r3, #0]
   1f4ee:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1f4f2:	bf14      	ite	ne
   1f4f4:	ea4a 0303 	orrne.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1f4f8:	ea23 030a 	biceq.w	r3, r3, sl
   1f4fc:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1f4fe:	9b03      	ldr	r3, [sp, #12]
   1f500:	4658      	mov	r0, fp
   1f502:	681b      	ldr	r3, [r3, #0]
   1f504:	9a05      	ldr	r2, [sp, #20]
   1f506:	9900      	ldr	r1, [sp, #0]
   1f508:	4798      	blx	r3
	freq = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1f50a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f50e:	682a      	ldr	r2, [r5, #0]
   1f510:	68db      	ldr	r3, [r3, #12]
   1f512:	4293      	cmp	r3, r2
   1f514:	bf28      	it	cs
   1f516:	4613      	movcs	r3, r2
	if (frequency < 250000) {
   1f518:	4a50      	ldr	r2, [pc, #320]	; (1f65c <spi_nrfx_transceive+0x350>)
   1f51a:	4293      	cmp	r3, r2
   1f51c:	d960      	bls.n	1f5e0 <spi_nrfx_transceive+0x2d4>
	} else if (frequency < 500000) {
   1f51e:	4a50      	ldr	r2, [pc, #320]	; (1f660 <spi_nrfx_transceive+0x354>)
   1f520:	4293      	cmp	r3, r2
   1f522:	d960      	bls.n	1f5e6 <spi_nrfx_transceive+0x2da>
	} else if (frequency < 1000000) {
   1f524:	4a4f      	ldr	r2, [pc, #316]	; (1f664 <spi_nrfx_transceive+0x358>)
   1f526:	4293      	cmp	r3, r2
   1f528:	d960      	bls.n	1f5ec <spi_nrfx_transceive+0x2e0>
	} else if (frequency < 2000000) {
   1f52a:	4a4f      	ldr	r2, [pc, #316]	; (1f668 <spi_nrfx_transceive+0x35c>)
   1f52c:	4293      	cmp	r3, r2
   1f52e:	d960      	bls.n	1f5f2 <spi_nrfx_transceive+0x2e6>
	} else if (frequency < 4000000) {
   1f530:	4a4e      	ldr	r2, [pc, #312]	; (1f66c <spi_nrfx_transceive+0x360>)
   1f532:	4293      	cmp	r3, r2
   1f534:	d960      	bls.n	1f5f8 <spi_nrfx_transceive+0x2ec>
		return NRF_SPIM_FREQ_8M;
   1f536:	4a4e      	ldr	r2, [pc, #312]	; (1f670 <spi_nrfx_transceive+0x364>)
   1f538:	4293      	cmp	r3, r2
   1f53a:	bf34      	ite	cc
   1f53c:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
   1f540:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
	nrf_spim_configure(spim->p_reg,
   1f544:	9a02      	ldr	r2, [sp, #8]
   1f546:	6810      	ldr	r0, [r2, #0]
   1f548:	88aa      	ldrh	r2, [r5, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1f54a:	0795      	lsls	r5, r2, #30
   1f54c:	f002 0104 	and.w	r1, r2, #4
   1f550:	d555      	bpl.n	1f5fe <spi_nrfx_transceive+0x2f2>
			return NRF_SPIM_MODE_2;
   1f552:	2900      	cmp	r1, #0
   1f554:	bf14      	ite	ne
   1f556:	2103      	movne	r1, #3
   1f558:	2102      	moveq	r1, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1f55a:	2902      	cmp	r1, #2
	if (operation & SPI_TRANSFER_LSB) {
   1f55c:	f3c2 1200 	ubfx	r2, r2, #4, #1
   1f560:	d051      	beq.n	1f606 <spi_nrfx_transceive+0x2fa>
   1f562:	2903      	cmp	r1, #3
   1f564:	d052      	beq.n	1f60c <spi_nrfx_transceive+0x300>
   1f566:	2901      	cmp	r1, #1
   1f568:	d101      	bne.n	1f56e <spi_nrfx_transceive+0x262>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1f56a:	f042 0202 	orr.w	r2, r2, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1f56e:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
    p_reg->FREQUENCY = (uint32_t)frequency;
   1f572:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
		dev_data->busy = true;
   1f576:	2301      	movs	r3, #1
   1f578:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1f57c:	2f00      	cmp	r7, #0
   1f57e:	d07b      	beq.n	1f678 <spi_nrfx_transceive+0x36c>
		ctx->current_tx = tx_bufs->buffers;
   1f580:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1f582:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1f584:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1f586:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1f588:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1f58a:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1f58c:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1f58e:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1f590:	2e00      	cmp	r6, #0
   1f592:	d076      	beq.n	1f682 <spi_nrfx_transceive+0x376>
		ctx->current_rx = rx_bufs->buffers;
   1f594:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1f596:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1f598:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1f59a:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1f59c:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1f59e:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1f5a0:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1f5a2:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1f5a4:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
   1f5a6:	2101      	movs	r1, #1
   1f5a8:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   1f5aa:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1f5ac:	f014 ffd1 	bl	34552 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   1f5b0:	4648      	mov	r0, r9
   1f5b2:	f7ff fe4b 	bl	1f24c <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1f5b6:	f04f 32ff 	mov.w	r2, #4294967295
   1f5ba:	f04f 33ff 	mov.w	r3, #4294967295
   1f5be:	f104 0020 	add.w	r0, r4, #32
   1f5c2:	f00b fe61 	bl	2b288 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1f5c6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1f5c8:	e6cc      	b.n	1f364 <spi_nrfx_transceive+0x58>
   1f5ca:	4b13      	ldr	r3, [pc, #76]	; (1f618 <spi_nrfx_transceive+0x30c>)
   1f5cc:	4911      	ldr	r1, [pc, #68]	; (1f614 <spi_nrfx_transceive+0x308>)
		LOG_INF("CS control inhibited (no GPIO device)");
   1f5ce:	4829      	ldr	r0, [pc, #164]	; (1f674 <spi_nrfx_transceive+0x368>)
   1f5d0:	1ac9      	subs	r1, r1, r3
   1f5d2:	08c9      	lsrs	r1, r1, #3
   1f5d4:	0189      	lsls	r1, r1, #6
   1f5d6:	f041 0103 	orr.w	r1, r1, #3
   1f5da:	f010 fe7d 	bl	302d8 <log_0>
   1f5de:	e794      	b.n	1f50a <spi_nrfx_transceive+0x1fe>
		return NRF_SPIM_FREQ_125K;
   1f5e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1f5e4:	e7ae      	b.n	1f544 <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_250K;
   1f5e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1f5ea:	e7ab      	b.n	1f544 <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_500K;
   1f5ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1f5f0:	e7a8      	b.n	1f544 <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_1M;
   1f5f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f5f6:	e7a5      	b.n	1f544 <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_2M;
   1f5f8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1f5fc:	e7a2      	b.n	1f544 <spi_nrfx_transceive+0x238>
			return NRF_SPIM_MODE_0;
   1f5fe:	3900      	subs	r1, #0
   1f600:	bf18      	it	ne
   1f602:	2101      	movne	r1, #1
   1f604:	e7a9      	b.n	1f55a <spi_nrfx_transceive+0x24e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f606:	f042 0204 	orr.w	r2, r2, #4
        break;
   1f60a:	e7b0      	b.n	1f56e <spi_nrfx_transceive+0x262>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f60c:	f042 0206 	orr.w	r2, r2, #6
        break;
   1f610:	e7ad      	b.n	1f56e <spi_nrfx_transceive+0x262>
   1f612:	bf00      	nop
   1f614:	000388f0 	.word	0x000388f0
   1f618:	000387c0 	.word	0x000387c0
   1f61c:	0003d164 	.word	0x0003d164
   1f620:	0003d186 	.word	0x0003d186
   1f624:	0003d1a5 	.word	0x0003d1a5
   1f628:	0003d1c8 	.word	0x0003d1c8
   1f62c:	0001e847 	.word	0x0001e847
   1f630:	0003d1f7 	.word	0x0003d1f7
   1f634:	0003d255 	.word	0x0003d255
   1f638:	0003d228 	.word	0x0003d228
   1f63c:	0003a56b 	.word	0x0003a56b
   1f640:	0003d2a5 	.word	0x0003d2a5
   1f644:	0003d2da 	.word	0x0003d2da
   1f648:	0003b9eb 	.word	0x0003b9eb
   1f64c:	0003d313 	.word	0x0003d313
   1f650:	0003d350 	.word	0x0003d350
   1f654:	0003ba15 	.word	0x0003ba15
   1f658:	0003ba53 	.word	0x0003ba53
   1f65c:	0003d08f 	.word	0x0003d08f
   1f660:	0007a11f 	.word	0x0007a11f
   1f664:	000f423f 	.word	0x000f423f
   1f668:	001e847f 	.word	0x001e847f
   1f66c:	003d08ff 	.word	0x003d08ff
   1f670:	007a1200 	.word	0x007a1200
   1f674:	0003d383 	.word	0x0003d383
		ctx->tx_count = 0;
   1f678:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1f67c:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1f680:	e786      	b.n	1f590 <spi_nrfx_transceive+0x284>
		ctx->rx_count = 0;
   1f682:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1f686:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1f68a:	e78b      	b.n	1f5a4 <spi_nrfx_transceive+0x298>

0001f68c <event_handler>:
{
   1f68c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1f68e:	7803      	ldrb	r3, [r0, #0]
{
   1f690:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1f692:	2b00      	cmp	r3, #0
   1f694:	d14e      	bne.n	1f734 <event_handler+0xa8>
	if (!ctx->tx_len) {
   1f696:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1f698:	b163      	cbz	r3, 1f6b4 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1f69a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1f69c:	429a      	cmp	r2, r3
   1f69e:	d91d      	bls.n	1f6dc <event_handler+0x50>
   1f6a0:	4925      	ldr	r1, [pc, #148]	; (1f738 <event_handler+0xac>)
   1f6a2:	4b26      	ldr	r3, [pc, #152]	; (1f73c <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1f6a4:	4826      	ldr	r0, [pc, #152]	; (1f740 <event_handler+0xb4>)
   1f6a6:	1ac9      	subs	r1, r1, r3
   1f6a8:	08c9      	lsrs	r1, r1, #3
   1f6aa:	0189      	lsls	r1, r1, #6
   1f6ac:	f041 0101 	orr.w	r1, r1, #1
   1f6b0:	f010 fe12 	bl	302d8 <log_0>
	if (!ctx->rx_len) {
   1f6b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1f6b6:	b163      	cbz	r3, 1f6d2 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1f6b8:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1f6ba:	429a      	cmp	r2, r3
   1f6bc:	d924      	bls.n	1f708 <event_handler+0x7c>
   1f6be:	491e      	ldr	r1, [pc, #120]	; (1f738 <event_handler+0xac>)
   1f6c0:	4b1e      	ldr	r3, [pc, #120]	; (1f73c <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1f6c2:	481f      	ldr	r0, [pc, #124]	; (1f740 <event_handler+0xb4>)
   1f6c4:	1ac9      	subs	r1, r1, r3
   1f6c6:	08c9      	lsrs	r1, r1, #3
   1f6c8:	0189      	lsls	r1, r1, #6
   1f6ca:	f041 0101 	orr.w	r1, r1, #1
   1f6ce:	f010 fe03 	bl	302d8 <log_0>
		transfer_next_chunk(dev_data->dev);
   1f6d2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1f6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1f6d8:	f7ff bdb8 	b.w	1f24c <transfer_next_chunk>
	ctx->tx_len -= len;
   1f6dc:	1a9b      	subs	r3, r3, r2
   1f6de:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1f6e0:	b963      	cbnz	r3, 1f6fc <event_handler+0x70>
		ctx->tx_count--;
   1f6e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1f6e4:	3b01      	subs	r3, #1
   1f6e6:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1f6e8:	b163      	cbz	r3, 1f704 <event_handler+0x78>
			ctx->current_tx++;
   1f6ea:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1f6ec:	f103 0208 	add.w	r2, r3, #8
   1f6f0:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1f6f2:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1f6f4:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1f6f6:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1f6f8:	650b      	str	r3, [r1, #80]	; 0x50
   1f6fa:	e7db      	b.n	1f6b4 <event_handler+0x28>
	} else if (ctx->tx_buf) {
   1f6fc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1f6fe:	2b00      	cmp	r3, #0
   1f700:	d0d8      	beq.n	1f6b4 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1f702:	4413      	add	r3, r2
   1f704:	64e3      	str	r3, [r4, #76]	; 0x4c
   1f706:	e7d5      	b.n	1f6b4 <event_handler+0x28>
	ctx->rx_len -= len;
   1f708:	1a9b      	subs	r3, r3, r2
   1f70a:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1f70c:	b963      	cbnz	r3, 1f728 <event_handler+0x9c>
		ctx->rx_count--;
   1f70e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1f710:	3b01      	subs	r3, #1
   1f712:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1f714:	b163      	cbz	r3, 1f730 <event_handler+0xa4>
			ctx->current_rx++;
   1f716:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1f718:	f103 0208 	add.w	r2, r3, #8
   1f71c:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1f71e:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1f720:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1f722:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1f724:	65a3      	str	r3, [r4, #88]	; 0x58
   1f726:	e7d4      	b.n	1f6d2 <event_handler+0x46>
	} else if (ctx->rx_buf) {
   1f728:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1f72a:	2b00      	cmp	r3, #0
   1f72c:	d0d1      	beq.n	1f6d2 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   1f72e:	4413      	add	r3, r2
   1f730:	6563      	str	r3, [r4, #84]	; 0x54
   1f732:	e7ce      	b.n	1f6d2 <event_handler+0x46>
}
   1f734:	bd10      	pop	{r4, pc}
   1f736:	bf00      	nop
   1f738:	000388f0 	.word	0x000388f0
   1f73c:	000387c0 	.word	0x000387c0
   1f740:	0003d3a9 	.word	0x0003d3a9

0001f744 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1f744:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1f746:	794b      	ldrb	r3, [r1, #5]
   1f748:	2b01      	cmp	r3, #1
   1f74a:	d02a      	beq.n	1f7a2 <uarte_nrfx_configure+0x5e>
   1f74c:	2b03      	cmp	r3, #3
   1f74e:	d125      	bne.n	1f79c <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1f750:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1f752:	798b      	ldrb	r3, [r1, #6]
   1f754:	2b03      	cmp	r3, #3
   1f756:	d121      	bne.n	1f79c <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1f758:	79cc      	ldrb	r4, [r1, #7]
   1f75a:	b12c      	cbz	r4, 1f768 <uarte_nrfx_configure+0x24>
   1f75c:	2c01      	cmp	r4, #1
   1f75e:	d11d      	bne.n	1f79c <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   1f760:	6843      	ldr	r3, [r0, #4]
   1f762:	685b      	ldr	r3, [r3, #4]
   1f764:	079b      	lsls	r3, r3, #30
   1f766:	d019      	beq.n	1f79c <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1f768:	790a      	ldrb	r2, [r1, #4]
   1f76a:	b112      	cbz	r2, 1f772 <uarte_nrfx_configure+0x2e>
   1f76c:	2a02      	cmp	r2, #2
   1f76e:	d115      	bne.n	1f79c <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1f770:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1f772:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1f774:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1f776:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1f77a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1f77c:	d065      	beq.n	1f84a <uarte_nrfx_configure+0x106>
   1f77e:	d82d      	bhi.n	1f7dc <uarte_nrfx_configure+0x98>
   1f780:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1f784:	d064      	beq.n	1f850 <uarte_nrfx_configure+0x10c>
   1f786:	d816      	bhi.n	1f7b6 <uarte_nrfx_configure+0x72>
   1f788:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1f78c:	d062      	beq.n	1f854 <uarte_nrfx_configure+0x110>
   1f78e:	d80a      	bhi.n	1f7a6 <uarte_nrfx_configure+0x62>
   1f790:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1f794:	d061      	beq.n	1f85a <uarte_nrfx_configure+0x116>
   1f796:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1f79a:	d061      	beq.n	1f860 <uarte_nrfx_configure+0x11c>
   1f79c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f7a0:	e052      	b.n	1f848 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   1f7a2:	2600      	movs	r6, #0
   1f7a4:	e7d5      	b.n	1f752 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1f7a6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1f7aa:	d05c      	beq.n	1f866 <uarte_nrfx_configure+0x122>
   1f7ac:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1f7b0:	d1f4      	bne.n	1f79c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1f7b2:	4b37      	ldr	r3, [pc, #220]	; (1f890 <uarte_nrfx_configure+0x14c>)
   1f7b4:	e03c      	b.n	1f830 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1f7b6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1f7ba:	d057      	beq.n	1f86c <uarte_nrfx_configure+0x128>
   1f7bc:	d807      	bhi.n	1f7ce <uarte_nrfx_configure+0x8a>
   1f7be:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1f7c2:	d055      	beq.n	1f870 <uarte_nrfx_configure+0x12c>
   1f7c4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1f7c8:	d1e8      	bne.n	1f79c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1f7ca:	4b32      	ldr	r3, [pc, #200]	; (1f894 <uarte_nrfx_configure+0x150>)
   1f7cc:	e030      	b.n	1f830 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1f7ce:	f647 2712 	movw	r7, #31250	; 0x7a12
   1f7d2:	42bb      	cmp	r3, r7
   1f7d4:	d1e2      	bne.n	1f79c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1f7d6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1f7da:	e029      	b.n	1f830 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1f7dc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1f7e0:	d048      	beq.n	1f874 <uarte_nrfx_configure+0x130>
   1f7e2:	d813      	bhi.n	1f80c <uarte_nrfx_configure+0xc8>
   1f7e4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1f7e8:	d047      	beq.n	1f87a <uarte_nrfx_configure+0x136>
   1f7ea:	d809      	bhi.n	1f800 <uarte_nrfx_configure+0xbc>
   1f7ec:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1f7f0:	42bb      	cmp	r3, r7
   1f7f2:	d044      	beq.n	1f87e <uarte_nrfx_configure+0x13a>
   1f7f4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1f7f8:	d1d0      	bne.n	1f79c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1f7fa:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1f7fe:	e017      	b.n	1f830 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1f800:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1f804:	d1ca      	bne.n	1f79c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1f806:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1f80a:	e011      	b.n	1f830 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1f80c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1f810:	d038      	beq.n	1f884 <uarte_nrfx_configure+0x140>
   1f812:	d808      	bhi.n	1f826 <uarte_nrfx_configure+0xe2>
   1f814:	4f20      	ldr	r7, [pc, #128]	; (1f898 <uarte_nrfx_configure+0x154>)
   1f816:	42bb      	cmp	r3, r7
   1f818:	d037      	beq.n	1f88a <uarte_nrfx_configure+0x146>
   1f81a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1f81e:	d1bd      	bne.n	1f79c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1f820:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1f824:	e004      	b.n	1f830 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1f826:	4f1d      	ldr	r7, [pc, #116]	; (1f89c <uarte_nrfx_configure+0x158>)
   1f828:	42bb      	cmp	r3, r7
   1f82a:	d1b7      	bne.n	1f79c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1f82c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1f830:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1f834:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   1f836:	4334      	orrs	r4, r6
   1f838:	4322      	orrs	r2, r4
   1f83a:	3304      	adds	r3, #4
   1f83c:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1f83e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1f842:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1f846:	2000      	movs	r0, #0
}
   1f848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1f84a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1f84e:	e7ef      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1f850:	4b13      	ldr	r3, [pc, #76]	; (1f8a0 <uarte_nrfx_configure+0x15c>)
   1f852:	e7ed      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1f854:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1f858:	e7ea      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   1f85a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1f85e:	e7e7      	b.n	1f830 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1f860:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1f864:	e7e4      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1f866:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1f86a:	e7e1      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1f86c:	4b0d      	ldr	r3, [pc, #52]	; (1f8a4 <uarte_nrfx_configure+0x160>)
   1f86e:	e7df      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1f870:	4b0d      	ldr	r3, [pc, #52]	; (1f8a8 <uarte_nrfx_configure+0x164>)
   1f872:	e7dd      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1f874:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1f878:	e7da      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1f87a:	4b0c      	ldr	r3, [pc, #48]	; (1f8ac <uarte_nrfx_configure+0x168>)
   1f87c:	e7d8      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1f87e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1f882:	e7d5      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1f884:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1f888:	e7d2      	b.n	1f830 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1f88a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1f88e:	e7cf      	b.n	1f830 <uarte_nrfx_configure+0xec>
   1f890:	0013b000 	.word	0x0013b000
   1f894:	004ea000 	.word	0x004ea000
   1f898:	0003d090 	.word	0x0003d090
   1f89c:	000f4240 	.word	0x000f4240
   1f8a0:	00275000 	.word	0x00275000
   1f8a4:	0075c000 	.word	0x0075c000
   1f8a8:	003af000 	.word	0x003af000
   1f8ac:	013a9000 	.word	0x013a9000

0001f8b0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f8b0:	6803      	ldr	r3, [r0, #0]
{
   1f8b2:	b510      	push	{r4, lr}
    switch (port)
   1f8b4:	095a      	lsrs	r2, r3, #5
   1f8b6:	bf0c      	ite	eq
   1f8b8:	f04f 32ff 	moveq.w	r2, #4294967295
   1f8bc:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1f8be:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f8c2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f8c6:	07db      	lsls	r3, r3, #31
{
   1f8c8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f8ca:	d40b      	bmi.n	1f8e4 <nrf_gpio_pin_port_decode+0x34>
   1f8cc:	490f      	ldr	r1, [pc, #60]	; (1f90c <nrf_gpio_pin_port_decode+0x5c>)
   1f8ce:	4810      	ldr	r0, [pc, #64]	; (1f910 <nrf_gpio_pin_port_decode+0x60>)
   1f8d0:	f44f 7305 	mov.w	r3, #532	; 0x214
   1f8d4:	4a0f      	ldr	r2, [pc, #60]	; (1f914 <nrf_gpio_pin_port_decode+0x64>)
   1f8d6:	f010 f9cb 	bl	2fc70 <printk>
   1f8da:	f44f 7105 	mov.w	r1, #532	; 0x214
   1f8de:	480d      	ldr	r0, [pc, #52]	; (1f914 <nrf_gpio_pin_port_decode+0x64>)
   1f8e0:	f010 fcac 	bl	3023c <assert_post_action>
    uint32_t pin_number = *p_pin;
   1f8e4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1f8e6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f8ea:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1f8ec:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f8ee:	d00b      	beq.n	1f908 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   1f8f0:	4909      	ldr	r1, [pc, #36]	; (1f918 <nrf_gpio_pin_port_decode+0x68>)
   1f8f2:	4807      	ldr	r0, [pc, #28]	; (1f910 <nrf_gpio_pin_port_decode+0x60>)
   1f8f4:	f240 2319 	movw	r3, #537	; 0x219
   1f8f8:	4a06      	ldr	r2, [pc, #24]	; (1f914 <nrf_gpio_pin_port_decode+0x64>)
   1f8fa:	f010 f9b9 	bl	2fc70 <printk>
   1f8fe:	f240 2119 	movw	r1, #537	; 0x219
   1f902:	4804      	ldr	r0, [pc, #16]	; (1f914 <nrf_gpio_pin_port_decode+0x64>)
   1f904:	f010 fc9a 	bl	3023c <assert_post_action>
}
   1f908:	4804      	ldr	r0, [pc, #16]	; (1f91c <nrf_gpio_pin_port_decode+0x6c>)
   1f90a:	bd10      	pop	{r4, pc}
   1f90c:	0003d086 	.word	0x0003d086
   1f910:	0003a56b 	.word	0x0003a56b
   1f914:	0003d053 	.word	0x0003d053
   1f918:	00040e81 	.word	0x00040e81
   1f91c:	40842500 	.word	0x40842500

0001f920 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   1f920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f924:	4614      	mov	r4, r2
	return config->uarte_regs;
   1f926:	6842      	ldr	r2, [r0, #4]
{
   1f928:	4605      	mov	r5, r0
	return config->uarte_regs;
   1f92a:	6817      	ldr	r7, [r2, #0]
{
   1f92c:	4688      	mov	r8, r1
    return p_reg->PSEL.RXD;
   1f92e:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f932:	f8d0 9010 	ldr.w	r9, [r0, #16]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   1f936:	3201      	adds	r2, #1
   1f938:	d112      	bne.n	1f960 <uarte_nrfx_rx_enable+0x40>
		__ASSERT(false, "TX only UARTE instance");
   1f93a:	f240 3323 	movw	r3, #803	; 0x323
   1f93e:	4a3a      	ldr	r2, [pc, #232]	; (1fa28 <uarte_nrfx_rx_enable+0x108>)
   1f940:	493a      	ldr	r1, [pc, #232]	; (1fa2c <uarte_nrfx_rx_enable+0x10c>)
   1f942:	483b      	ldr	r0, [pc, #236]	; (1fa30 <uarte_nrfx_rx_enable+0x110>)
   1f944:	f010 f994 	bl	2fc70 <printk>
   1f948:	483a      	ldr	r0, [pc, #232]	; (1fa34 <uarte_nrfx_rx_enable+0x114>)
   1f94a:	f010 f991 	bl	2fc70 <printk>
   1f94e:	4836      	ldr	r0, [pc, #216]	; (1fa28 <uarte_nrfx_rx_enable+0x108>)
   1f950:	f240 3123 	movw	r1, #803	; 0x323
   1f954:	f010 fc72 	bl	3023c <assert_post_action>
		return -ENOTSUP;
   1f958:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   1f95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		MAX(timeout / RX_TIMEOUT_DIV,
   1f960:	2b09      	cmp	r3, #9
   1f962:	bfc8      	it	gt
   1f964:	2205      	movgt	r2, #5
	data->async->rx_timeout = timeout;
   1f966:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1f96a:	66cb      	str	r3, [r1, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   1f96c:	bfcc      	ite	gt
   1f96e:	fb93 f3f2 	sdivgt	r3, r3, r2
   1f972:	2301      	movle	r3, #1
	data->async->rx_timeout_slab =
   1f974:	670b      	str	r3, [r1, #112]	; 0x70
	data->async->rx_offset = 0;
   1f976:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   1f978:	e9c1 8414 	strd	r8, r4, [r1, #80]	; 0x50
	data->async->rx_next_buf = NULL;
   1f97c:	e9c1 3316 	strd	r3, r3, [r1, #88]	; 0x58
	data->async->rx_next_buf_len = 0;
   1f980:	660b      	str	r3, [r1, #96]	; 0x60
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f982:	6843      	ldr	r3, [r0, #4]
   1f984:	685b      	ldr	r3, [r3, #4]
   1f986:	06da      	lsls	r2, r3, #27
   1f988:	d524      	bpl.n	1f9d4 <uarte_nrfx_rx_enable+0xb4>
		if (data->async->rx_flush_cnt) {
   1f98a:	f891 60c1 	ldrb.w	r6, [r1, #193]	; 0xc1
   1f98e:	b30e      	cbz	r6, 1f9d4 <uarte_nrfx_rx_enable+0xb4>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1f990:	42a6      	cmp	r6, r4
   1f992:	bf28      	it	cs
   1f994:	4626      	movcs	r6, r4
   1f996:	4640      	mov	r0, r8
   1f998:	4632      	mov	r2, r6
   1f99a:	31bc      	adds	r1, #188	; 0xbc
   1f99c:	f017 fef1 	bl	37782 <memcpy>
			if (!len) {
   1f9a0:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   1f9a2:	44b0      	add	r8, r6
			if (!len) {
   1f9a4:	d116      	bne.n	1f9d4 <uarte_nrfx_rx_enable+0xb4>
				data->async->rx_flush_cnt -= cpy_len;
   1f9a6:	f8d9 2010 	ldr.w	r2, [r9, #16]
				notify_uart_rx_rdy(dev, cpy_len);
   1f9aa:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1f9ac:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   1f9b0:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1f9b2:	1b9b      	subs	r3, r3, r6
   1f9b4:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   1f9b8:	f014 fe9e 	bl	346f8 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   1f9bc:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1f9c0:	4628      	mov	r0, r5
   1f9c2:	2201      	movs	r2, #1
   1f9c4:	3150      	adds	r1, #80	; 0x50
   1f9c6:	f014 feb0 	bl	3472a <notify_rx_buf_release>
				notify_rx_disable(dev);
   1f9ca:	4628      	mov	r0, r5
   1f9cc:	f014 fec7 	bl	3475e <notify_rx_disable>
	return 0;
   1f9d0:	2000      	movs	r0, #0
   1f9d2:	e7c3      	b.n	1f95c <uarte_nrfx_rx_enable+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9d4:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1f9d6:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1f9da:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   1f9e2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
	data->async->rx_enabled = true;
   1f9e6:	2201      	movs	r2, #1
   1f9e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   1f9ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1f9f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1f9f4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f9f8:	686b      	ldr	r3, [r5, #4]
   1f9fa:	685b      	ldr	r3, [r3, #4]
   1f9fc:	06db      	lsls	r3, r3, #27
   1f9fe:	d50f      	bpl.n	1fa20 <uarte_nrfx_rx_enable+0x100>
	__asm__ volatile(
   1fa00:	f04f 0320 	mov.w	r3, #32
   1fa04:	f3ef 8411 	mrs	r4, BASEPRI
   1fa08:	f383 8811 	msr	BASEPRI, r3
   1fa0c:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   1fa10:	2102      	movs	r1, #2
   1fa12:	4628      	mov	r0, r5
   1fa14:	f014 ff6e 	bl	348f4 <uarte_enable>
	__asm__ volatile(
   1fa18:	f384 8811 	msr	BASEPRI, r4
   1fa1c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fa20:	2301      	movs	r3, #1
   1fa22:	603b      	str	r3, [r7, #0]
   1fa24:	e7d4      	b.n	1f9d0 <uarte_nrfx_rx_enable+0xb0>
   1fa26:	bf00      	nop
   1fa28:	0003d3db 	.word	0x0003d3db
   1fa2c:	00040e81 	.word	0x00040e81
   1fa30:	0003a56b 	.word	0x0003a56b
   1fa34:	0003d40f 	.word	0x0003d40f

0001fa38 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1fa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa3a:	4604      	mov	r4, r0
   1fa3c:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1fa3e:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1fa40:	f017 fce5 	bl	3740e <k_is_in_isr>
   1fa44:	b910      	cbnz	r0, 1fa4c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1fa46:	4b28      	ldr	r3, [pc, #160]	; (1fae8 <uarte_nrfx_poll_out+0xb0>)
	int key;

	if (isr_mode) {
   1fa48:	781b      	ldrb	r3, [r3, #0]
   1fa4a:	bb5b      	cbnz	r3, 1faa4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1fa4c:	f04f 0320 	mov.w	r3, #32
   1fa50:	f3ef 8111 	mrs	r1, BASEPRI
   1fa54:	f383 8811 	msr	BASEPRI, r3
   1fa58:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1fa5c:	4620      	mov	r0, r4
			key = irq_lock();
   1fa5e:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   1fa60:	f014 fe32 	bl	346c8 <is_tx_ready>
   1fa64:	b1c8      	cbz	r0, 1fa9a <uarte_nrfx_poll_out+0x62>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
   1fa66:	6933      	ldr	r3, [r6, #16]
   1fa68:	b15b      	cbz	r3, 1fa82 <uarte_nrfx_poll_out+0x4a>
   1fa6a:	68da      	ldr	r2, [r3, #12]
   1fa6c:	b14a      	cbz	r2, 1fa82 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   1fa6e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async && data->async->tx_size &&
   1fa72:	2a00      	cmp	r2, #0
   1fa74:	da05      	bge.n	1fa82 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   1fa76:	6862      	ldr	r2, [r4, #4]
   1fa78:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   1fa7a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1fa7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1fa82:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1fa84:	2201      	movs	r2, #1
   1fa86:	4620      	mov	r0, r4
	data->char_out = c;
   1fa88:	f801 7f18 	strb.w	r7, [r1, #24]!
	tx_start(dev, &data->char_out, 1);
   1fa8c:	f014 ff57 	bl	3493e <tx_start>
	__asm__ volatile(
   1fa90:	f385 8811 	msr	BASEPRI, r5
   1fa94:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1fa98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fa9a:	f381 8811 	msr	BASEPRI, r1
   1fa9e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1faa2:	e7d3      	b.n	1fa4c <uarte_nrfx_poll_out+0x14>
{
   1faa4:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1faa6:	4620      	mov	r0, r4
   1faa8:	f014 fe0e 	bl	346c8 <is_tx_ready>
   1faac:	b948      	cbnz	r0, 1fac2 <uarte_nrfx_poll_out+0x8a>
   1faae:	2001      	movs	r0, #1
   1fab0:	f016 f929 	bl	35d06 <nrfx_busy_wait>
   1fab4:	3d01      	subs	r5, #1
   1fab6:	d1f6      	bne.n	1faa6 <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   1fab8:	2100      	movs	r1, #0
   1faba:	2021      	movs	r0, #33	; 0x21
   1fabc:	f00d fa60 	bl	2cf80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1fac0:	e7f0      	b.n	1faa4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1fac2:	f04f 0320 	mov.w	r3, #32
   1fac6:	f3ef 8511 	mrs	r5, BASEPRI
   1faca:	f383 8811 	msr	BASEPRI, r3
   1face:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1fad2:	4620      	mov	r0, r4
   1fad4:	f014 fdf8 	bl	346c8 <is_tx_ready>
   1fad8:	2800      	cmp	r0, #0
   1fada:	d1d2      	bne.n	1fa82 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1fadc:	f385 8811 	msr	BASEPRI, r5
   1fae0:	f3bf 8f6f 	isb	sy
}
   1fae4:	e7e8      	b.n	1fab8 <uarte_nrfx_poll_out+0x80>
   1fae6:	bf00      	nop
   1fae8:	2001dcc7 	.word	0x2001dcc7

0001faec <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1faec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1faf0:	2700      	movs	r7, #0
	return config->uarte_regs;
   1faf2:	6843      	ldr	r3, [r0, #4]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1faf4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return config->uarte_regs;
   1faf8:	681c      	ldr	r4, [r3, #0]
   1fafa:	680b      	ldr	r3, [r1, #0]
   1fafc:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   1fb00:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1fb02:	f8c8 0000 	str.w	r0, [r8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb06:	4668      	mov	r0, sp
static int uarte_instance_init(const struct device *dev,
   1fb08:	460d      	mov	r5, r1
   1fb0a:	9300      	str	r3, [sp, #0]
   1fb0c:	f7ff fed0 	bl	1f8b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1fb10:	2301      	movs	r3, #1
   1fb12:	9a00      	ldr	r2, [sp, #0]
   1fb14:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1fb16:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   1fb18:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb1a:	4668      	mov	r0, sp
   1fb1c:	9300      	str	r3, [sp, #0]
   1fb1e:	f7ff fec7 	bl	1f8b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1fb22:	2203      	movs	r2, #3
   1fb24:	9b00      	ldr	r3, [sp, #0]
   1fb26:	3380      	adds	r3, #128	; 0x80
   1fb28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1fb2c:	686b      	ldr	r3, [r5, #4]
   1fb2e:	1c59      	adds	r1, r3, #1
   1fb30:	d007      	beq.n	1fb42 <uarte_instance_init.isra.0+0x56>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb32:	4668      	mov	r0, sp
   1fb34:	9300      	str	r3, [sp, #0]
   1fb36:	f7ff febb 	bl	1f8b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1fb3a:	9b00      	ldr	r3, [sp, #0]
   1fb3c:	3380      	adds	r3, #128	; 0x80
   1fb3e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1fb42:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   1fb46:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1fb4a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1fb4e:	68ab      	ldr	r3, [r5, #8]
   1fb50:	1c5a      	adds	r2, r3, #1
   1fb52:	d008      	beq.n	1fb66 <uarte_instance_init.isra.0+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb54:	4668      	mov	r0, sp
   1fb56:	9300      	str	r3, [sp, #0]
   1fb58:	f7ff feaa 	bl	1f8b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1fb5c:	2200      	movs	r2, #0
   1fb5e:	9b00      	ldr	r3, [sp, #0]
   1fb60:	3380      	adds	r3, #128	; 0x80
   1fb62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1fb66:	68eb      	ldr	r3, [r5, #12]
   1fb68:	1c5f      	adds	r7, r3, #1
   1fb6a:	d011      	beq.n	1fb90 <uarte_instance_init.isra.0+0xa4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb6c:	4668      	mov	r0, sp
   1fb6e:	9300      	str	r3, [sp, #0]
   1fb70:	f7ff fe9e 	bl	1f8b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1fb74:	2301      	movs	r3, #1
   1fb76:	9a00      	ldr	r2, [sp, #0]
   1fb78:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1fb7a:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   1fb7c:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb7e:	4668      	mov	r0, sp
   1fb80:	9300      	str	r3, [sp, #0]
   1fb82:	f7ff fe95 	bl	1f8b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1fb86:	2203      	movs	r2, #3
   1fb88:	9b00      	ldr	r3, [sp, #0]
   1fb8a:	3380      	adds	r3, #128	; 0x80
   1fb8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1fb90:	6931      	ldr	r1, [r6, #16]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   1fb92:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1fb96:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   1fb98:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1fb9c:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1fb9e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1fba2:	f7ff fdcf 	bl	1f744 <uarte_nrfx_configure>
	if (err) {
   1fba6:	4681      	mov	r9, r0
   1fba8:	2800      	cmp	r0, #0
   1fbaa:	f040 80f2 	bne.w	1fd92 <uarte_instance_init.isra.0+0x2a6>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1fbae:	6873      	ldr	r3, [r6, #4]
   1fbb0:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1fbb2:	0718      	lsls	r0, r3, #28
   1fbb4:	d540      	bpl.n	1fc38 <uarte_instance_init.isra.0+0x14c>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1fbb6:	f108 001a 	add.w	r0, r8, #26
   1fbba:	f005 f8d3 	bl	24d64 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1fbbe:	4b86      	ldr	r3, [pc, #536]	; (1fdd8 <uarte_instance_init.isra.0+0x2ec>)
   1fbc0:	4298      	cmp	r0, r3
   1fbc2:	d00c      	beq.n	1fbde <uarte_instance_init.isra.0+0xf2>
   1fbc4:	4985      	ldr	r1, [pc, #532]	; (1fddc <uarte_instance_init.isra.0+0x2f0>)
   1fbc6:	4b86      	ldr	r3, [pc, #536]	; (1fde0 <uarte_instance_init.isra.0+0x2f4>)
		LOG_ERR("Failed to allocate PPI Channel");
   1fbc8:	4886      	ldr	r0, [pc, #536]	; (1fde4 <uarte_instance_init.isra.0+0x2f8>)
   1fbca:	1ac9      	subs	r1, r1, r3
   1fbcc:	08c9      	lsrs	r1, r1, #3
   1fbce:	0189      	lsls	r1, r1, #6
   1fbd0:	f041 0101 	orr.w	r1, r1, #1
   1fbd4:	f010 fb80 	bl	302d8 <log_0>
		err = endtx_stoptx_ppi_init(uarte, data);
		if (err < 0) {
   1fbd8:	f06f 0904 	mvn.w	r9, #4
   1fbdc:	e0d9      	b.n	1fd92 <uarte_instance_init.isra.0+0x2a6>
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   1fbde:	f514 7a90 	adds.w	sl, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1fbe2:	f898 701a 	ldrb.w	r7, [r8, #26]
   1fbe6:	d10b      	bne.n	1fc00 <uarte_instance_init.isra.0+0x114>
   1fbe8:	497f      	ldr	r1, [pc, #508]	; (1fde8 <uarte_instance_init.isra.0+0x2fc>)
   1fbea:	4880      	ldr	r0, [pc, #512]	; (1fdec <uarte_instance_init.isra.0+0x300>)
   1fbec:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   1fbf0:	4a7f      	ldr	r2, [pc, #508]	; (1fdf0 <uarte_instance_init.isra.0+0x304>)
   1fbf2:	f010 f83d 	bl	2fc70 <printk>
   1fbf6:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
   1fbfa:	487d      	ldr	r0, [pc, #500]	; (1fdf0 <uarte_instance_init.isra.0+0x304>)
   1fbfc:	f010 fb1e 	bl	3023c <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1fc00:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   1fc04:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1fc08:	f8ca 7080 	str.w	r7, [sl, #128]	; 0x80
    NRFX_ASSERT(tep);
   1fc0c:	d10b      	bne.n	1fc26 <uarte_instance_init.isra.0+0x13a>
   1fc0e:	4979      	ldr	r1, [pc, #484]	; (1fdf4 <uarte_instance_init.isra.0+0x308>)
   1fc10:	4876      	ldr	r0, [pc, #472]	; (1fdec <uarte_instance_init.isra.0+0x300>)
   1fc12:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   1fc16:	4a76      	ldr	r2, [pc, #472]	; (1fdf0 <uarte_instance_init.isra.0+0x304>)
   1fc18:	f010 f82a 	bl	2fc70 <printk>
   1fc1c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1fc20:	4873      	ldr	r0, [pc, #460]	; (1fdf0 <uarte_instance_init.isra.0+0x304>)
   1fc22:	f010 fb0b 	bl	3023c <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1fc26:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1fc28:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
   1fc2c:	f898 201a 	ldrb.w	r2, [r8, #26]
   1fc30:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1fc32:	4a71      	ldr	r2, [pc, #452]	; (1fdf8 <uarte_instance_init.isra.0+0x30c>)
   1fc34:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
   1fc38:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1fc3c:	2b00      	cmp	r3, #0
   1fc3e:	f000 80b7 	beq.w	1fdb0 <uarte_instance_init.isra.0+0x2c4>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1fc42:	6937      	ldr	r7, [r6, #16]
   1fc44:	f8d6 a004 	ldr.w	sl, [r6, #4]
		return data->async->hw_rx_counting;
   1fc48:	693b      	ldr	r3, [r7, #16]
	return config->uarte_regs;
   1fc4a:	f8da 5000 	ldr.w	r5, [sl]
	if (hw_rx_counting_enabled(data)) {
   1fc4e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   1fc52:	b1eb      	cbz	r3, 1fc90 <uarte_instance_init.isra.0+0x1a4>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1fc54:	2300      	movs	r3, #0
   1fc56:	4969      	ldr	r1, [pc, #420]	; (1fdfc <uarte_instance_init.isra.0+0x310>)
		ret = nrfx_timer_init(&cfg->timer,
   1fc58:	f10a 0b08 	add.w	fp, sl, #8
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1fc5c:	e9cd 1300 	strd	r1, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   1fc60:	4a67      	ldr	r2, [pc, #412]	; (1fe00 <uarte_instance_init.isra.0+0x314>)
   1fc62:	4669      	mov	r1, sp
   1fc64:	4658      	mov	r0, fp
   1fc66:	f005 fc35 	bl	254d4 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   1fc6a:	4a5b      	ldr	r2, [pc, #364]	; (1fdd8 <uarte_instance_init.isra.0+0x2ec>)
   1fc6c:	4290      	cmp	r0, r2
   1fc6e:	f000 8094 	beq.w	1fd9a <uarte_instance_init.isra.0+0x2ae>
   1fc72:	4b5b      	ldr	r3, [pc, #364]	; (1fde0 <uarte_instance_init.isra.0+0x2f4>)
   1fc74:	4959      	ldr	r1, [pc, #356]	; (1fddc <uarte_instance_init.isra.0+0x2f0>)
			LOG_ERR("Timer already initialized, "
   1fc76:	4863      	ldr	r0, [pc, #396]	; (1fe04 <uarte_instance_init.isra.0+0x318>)
   1fc78:	1ac9      	subs	r1, r1, r3
   1fc7a:	08c9      	lsrs	r1, r1, #3
   1fc7c:	0189      	lsls	r1, r1, #6
   1fc7e:	f041 0101 	orr.w	r1, r1, #1
   1fc82:	f010 fb29 	bl	302d8 <log_0>
			data->async->hw_rx_counting = false;
   1fc86:	f04f 0200 	mov.w	r2, #0
   1fc8a:	693b      	ldr	r3, [r7, #16]
   1fc8c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	if (hw_rx_counting_enabled(data)) {
   1fc90:	6938      	ldr	r0, [r7, #16]
   1fc92:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
   1fc96:	b1bb      	cbz	r3, 1fcc8 <uarte_instance_init.isra.0+0x1dc>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   1fc98:	30b0      	adds	r0, #176	; 0xb0
   1fc9a:	f005 f863 	bl	24d64 <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   1fc9e:	4b4e      	ldr	r3, [pc, #312]	; (1fdd8 <uarte_instance_init.isra.0+0x2ec>)
   1fca0:	4298      	cmp	r0, r3
   1fca2:	d011      	beq.n	1fcc8 <uarte_instance_init.isra.0+0x1dc>
   1fca4:	4b4e      	ldr	r3, [pc, #312]	; (1fde0 <uarte_instance_init.isra.0+0x2f4>)
   1fca6:	494d      	ldr	r1, [pc, #308]	; (1fddc <uarte_instance_init.isra.0+0x2f0>)
			LOG_ERR("Failed to allocate PPI Channel, "
   1fca8:	4857      	ldr	r0, [pc, #348]	; (1fe08 <uarte_instance_init.isra.0+0x31c>)
   1fcaa:	1ac9      	subs	r1, r1, r3
   1fcac:	08c9      	lsrs	r1, r1, #3
   1fcae:	0189      	lsls	r1, r1, #6
   1fcb0:	f041 0101 	orr.w	r1, r1, #1
   1fcb4:	f010 fb10 	bl	302d8 <log_0>
			data->async->hw_rx_counting = false;
   1fcb8:	2200      	movs	r2, #0
   1fcba:	693b      	ldr	r3, [r7, #16]
			nrfx_timer_uninit(&cfg->timer);
   1fcbc:	f10a 0008 	add.w	r0, sl, #8
			data->async->hw_rx_counting = false;
   1fcc0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
			nrfx_timer_uninit(&cfg->timer);
   1fcc4:	f005 fce4 	bl	25690 <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
   1fcc8:	693b      	ldr	r3, [r7, #16]
   1fcca:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
   1fcce:	2a00      	cmp	r2, #0
   1fcd0:	d06a      	beq.n	1fda8 <uarte_instance_init.isra.0+0x2bc>
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   1fcd2:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   1fcd6:	f8da 1008 	ldr.w	r1, [sl, #8]
   1fcda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   1fcde:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   1fce2:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
   1fce6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   1fcea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   1fcee:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   1fcf2:	f005 f861 	bl	24db8 <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   1fcf6:	4b38      	ldr	r3, [pc, #224]	; (1fdd8 <uarte_instance_init.isra.0+0x2ec>)
   1fcf8:	4298      	cmp	r0, r3
   1fcfa:	f47f af6d 	bne.w	1fbd8 <uarte_instance_init.isra.0+0xec>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1fcfe:	2301      	movs	r3, #1
   1fd00:	6938      	ldr	r0, [r7, #16]
    p_reg->INTENSET = mask;
   1fd02:	4a42      	ldr	r2, [pc, #264]	; (1fe0c <uarte_instance_init.isra.0+0x320>)
   1fd04:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   1fd08:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1fd0c:	2208      	movs	r2, #8
   1fd0e:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fd12:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1fd16:	b1a2      	cbz	r2, 1fd42 <uarte_instance_init.isra.0+0x256>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd18:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fd1a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1fd1e:	b91b      	cbnz	r3, 1fd28 <uarte_instance_init.isra.0+0x23c>
   1fd20:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1fd24:	2b00      	cmp	r3, #0
   1fd26:	d0f8      	beq.n	1fd1a <uarte_instance_init.isra.0+0x22e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fd28:	2300      	movs	r3, #0
   1fd2a:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   1fd2e:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
   1fd32:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1fd36:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1fd3a:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   1fd3e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1fd42:	2200      	movs	r2, #0
   1fd44:	4932      	ldr	r1, [pc, #200]	; (1fe10 <uarte_instance_init.isra.0+0x324>)
   1fd46:	3078      	adds	r0, #120	; 0x78
   1fd48:	f017 fc6e 	bl	37628 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1fd4c:	693b      	ldr	r3, [r7, #16]
	timer->user_data = user_data;
   1fd4e:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1fd52:	6938      	ldr	r0, [r7, #16]
   1fd54:	2200      	movs	r2, #0
   1fd56:	492f      	ldr	r1, [pc, #188]	; (1fe14 <uarte_instance_init.isra.0+0x328>)
   1fd58:	3018      	adds	r0, #24
   1fd5a:	f017 fc65 	bl	37628 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1fd5e:	693b      	ldr	r3, [r7, #16]
   1fd60:	64df      	str	r7, [r3, #76]	; 0x4c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1fd62:	6873      	ldr	r3, [r6, #4]
   1fd64:	685b      	ldr	r3, [r3, #4]
   1fd66:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   1fd68:	bf5c      	itt	pl
   1fd6a:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1fd6e:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1fd72:	06db      	lsls	r3, r3, #27
   1fd74:	bf44      	itt	mi
   1fd76:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1fd7a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1fd7e:	f108 0318 	add.w	r3, r8, #24
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fd82:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1fd86:	2300      	movs	r3, #0
   1fd88:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd8c:	2301      	movs	r3, #1
   1fd8e:	60a3      	str	r3, [r4, #8]
   1fd90:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1fd92:	4648      	mov	r0, r9
   1fd94:	b003      	add	sp, #12
   1fd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nrfx_timer_enable(&cfg->timer);
   1fd9a:	4658      	mov	r0, fp
   1fd9c:	f005 fc2e 	bl	255fc <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   1fda0:	4658      	mov	r0, fp
   1fda2:	f005 fc93 	bl	256cc <nrfx_timer_clear>
   1fda6:	e773      	b.n	1fc90 <uarte_instance_init.isra.0+0x1a4>
    p_reg->INTENSET = mask;
   1fda8:	2304      	movs	r3, #4
   1fdaa:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (ret != 0) {
   1fdae:	e7a6      	b.n	1fcfe <uarte_instance_init.isra.0+0x212>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1fdb0:	2208      	movs	r2, #8
   1fdb2:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1fdb6:	686a      	ldr	r2, [r5, #4]
   1fdb8:	3201      	adds	r2, #1
   1fdba:	d0d2      	beq.n	1fd62 <uarte_instance_init.isra.0+0x276>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fdbc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1fdc0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1fdc4:	f108 0319 	add.w	r3, r8, #25
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1fdc8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1fdcc:	2301      	movs	r3, #1
   1fdce:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fdd2:	6023      	str	r3, [r4, #0]
}
   1fdd4:	e7c5      	b.n	1fd62 <uarte_instance_init.isra.0+0x276>
   1fdd6:	bf00      	nop
   1fdd8:	0bad0000 	.word	0x0bad0000
   1fddc:	000388f8 	.word	0x000388f8
   1fde0:	000387c0 	.word	0x000387c0
   1fde4:	0003d428 	.word	0x0003d428
   1fde8:	0003d47f 	.word	0x0003d47f
   1fdec:	0003a56b 	.word	0x0003a56b
   1fdf0:	0003d447 	.word	0x0003d447
   1fdf4:	0003d483 	.word	0x0003d483
   1fdf8:	40017000 	.word	0x40017000
   1fdfc:	07030100 	.word	0x07030100
   1fe00:	000346e9 	.word	0x000346e9
   1fe04:	0003d487 	.word	0x0003d487
   1fe08:	0003d4c7 	.word	0x0003d4c7
   1fe0c:	000a0210 	.word	0x000a0210
   1fe10:	00034aaf 	.word	0x00034aaf
   1fe14:	00034c83 	.word	0x00034c83

0001fe18 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1fe18:	b530      	push	{r4, r5, lr}
   1fe1a:	b085      	sub	sp, #20
   1fe1c:	466c      	mov	r4, sp
   1fe1e:	4605      	mov	r5, r0
   1fe20:	4b08      	ldr	r3, [pc, #32]	; (1fe44 <uarte_0_init+0x2c>)
   1fe22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1fe24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1fe28:	2200      	movs	r2, #0
   1fe2a:	2101      	movs	r1, #1
   1fe2c:	2008      	movs	r0, #8
   1fe2e:	f7f7 fbfd 	bl	1762c <z_arm_irq_priority_set>
   1fe32:	2008      	movs	r0, #8
   1fe34:	f7f7 fbc8 	bl	175c8 <arch_irq_enable>
   1fe38:	4621      	mov	r1, r4
   1fe3a:	4628      	mov	r0, r5
   1fe3c:	f7ff fe56 	bl	1faec <uarte_instance_init.isra.0>
   1fe40:	b005      	add	sp, #20
   1fe42:	bd30      	pop	{r4, r5, pc}
   1fe44:	000389c0 	.word	0x000389c0

0001fe48 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1fe48:	b530      	push	{r4, r5, lr}
   1fe4a:	b085      	sub	sp, #20
   1fe4c:	466c      	mov	r4, sp
   1fe4e:	4605      	mov	r5, r0
   1fe50:	4b08      	ldr	r3, [pc, #32]	; (1fe74 <uarte_1_init+0x2c>)
   1fe52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1fe54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1fe58:	2200      	movs	r2, #0
   1fe5a:	2101      	movs	r1, #1
   1fe5c:	2009      	movs	r0, #9
   1fe5e:	f7f7 fbe5 	bl	1762c <z_arm_irq_priority_set>
   1fe62:	2009      	movs	r0, #9
   1fe64:	f7f7 fbb0 	bl	175c8 <arch_irq_enable>
   1fe68:	4621      	mov	r1, r4
   1fe6a:	4628      	mov	r0, r5
   1fe6c:	f7ff fe3e 	bl	1faec <uarte_instance_init.isra.0>
   1fe70:	b005      	add	sp, #20
   1fe72:	bd30      	pop	{r4, r5, pc}
   1fe74:	000389d0 	.word	0x000389d0

0001fe78 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fe78:	6803      	ldr	r3, [r0, #0]
{
   1fe7a:	b510      	push	{r4, lr}
    switch (port)
   1fe7c:	095a      	lsrs	r2, r3, #5
   1fe7e:	bf0c      	ite	eq
   1fe80:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe84:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1fe86:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1fe8a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fe8e:	07db      	lsls	r3, r3, #31
{
   1fe90:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fe92:	d40b      	bmi.n	1feac <nrf_gpio_pin_port_decode+0x34>
   1fe94:	490f      	ldr	r1, [pc, #60]	; (1fed4 <nrf_gpio_pin_port_decode+0x5c>)
   1fe96:	4810      	ldr	r0, [pc, #64]	; (1fed8 <nrf_gpio_pin_port_decode+0x60>)
   1fe98:	f44f 7305 	mov.w	r3, #532	; 0x214
   1fe9c:	4a0f      	ldr	r2, [pc, #60]	; (1fedc <nrf_gpio_pin_port_decode+0x64>)
   1fe9e:	f00f fee7 	bl	2fc70 <printk>
   1fea2:	f44f 7105 	mov.w	r1, #532	; 0x214
   1fea6:	480d      	ldr	r0, [pc, #52]	; (1fedc <nrf_gpio_pin_port_decode+0x64>)
   1fea8:	f010 f9c8 	bl	3023c <assert_post_action>
    uint32_t pin_number = *p_pin;
   1feac:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1feae:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1feb2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1feb4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1feb6:	d00b      	beq.n	1fed0 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   1feb8:	4909      	ldr	r1, [pc, #36]	; (1fee0 <nrf_gpio_pin_port_decode+0x68>)
   1feba:	4807      	ldr	r0, [pc, #28]	; (1fed8 <nrf_gpio_pin_port_decode+0x60>)
   1febc:	f240 2319 	movw	r3, #537	; 0x219
   1fec0:	4a06      	ldr	r2, [pc, #24]	; (1fedc <nrf_gpio_pin_port_decode+0x64>)
   1fec2:	f00f fed5 	bl	2fc70 <printk>
   1fec6:	f240 2119 	movw	r1, #537	; 0x219
   1feca:	4804      	ldr	r0, [pc, #16]	; (1fedc <nrf_gpio_pin_port_decode+0x64>)
   1fecc:	f010 f9b6 	bl	3023c <assert_post_action>
}
   1fed0:	4804      	ldr	r0, [pc, #16]	; (1fee4 <nrf_gpio_pin_port_decode+0x6c>)
   1fed2:	bd10      	pop	{r4, pc}
   1fed4:	0003d086 	.word	0x0003d086
   1fed8:	0003a56b 	.word	0x0003a56b
   1fedc:	0003d053 	.word	0x0003d053
   1fee0:	00040e81 	.word	0x00040e81
   1fee4:	40842500 	.word	0x40842500

0001fee8 <ctrl_pin_clear>:
	irq_unlock(key);
}

/* Sets pin to output and sets low state. */
static void ctrl_pin_clear(const struct lpuart_bidir_gpio *io)
{
   1fee8:	b513      	push	{r0, r1, r4, lr}
	nrf_gpio_pin_clear(io->nrf_pin);
   1feea:	7c43      	ldrb	r3, [r0, #17]
{
   1feec:	4604      	mov	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1feee:	a801      	add	r0, sp, #4
	nrf_gpio_pin_clear(io->nrf_pin);
   1fef0:	9301      	str	r3, [sp, #4]
   1fef2:	f7ff ffc1 	bl	1fe78 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1fef6:	2301      	movs	r3, #1
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1fef8:	2100      	movs	r1, #0
   1fefa:	9a01      	ldr	r2, [sp, #4]
   1fefc:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1fefe:	60c3      	str	r3, [r0, #12]
	nrf_gpiote_te_default(NRF_GPIOTE, io->ch);
   1ff00:	7ca3      	ldrb	r3, [r4, #18]
   1ff02:	4a08      	ldr	r2, [pc, #32]	; (1ff24 <ctrl_pin_clear+0x3c>)
   1ff04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1ff08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	nrf_gpio_cfg_output(io->nrf_pin);
   1ff0c:	7c63      	ldrb	r3, [r4, #17]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ff0e:	a801      	add	r0, sp, #4
   1ff10:	9301      	str	r3, [sp, #4]
   1ff12:	f7ff ffb1 	bl	1fe78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ff16:	2203      	movs	r2, #3
   1ff18:	9b01      	ldr	r3, [sp, #4]
   1ff1a:	3380      	adds	r3, #128	; 0x80
   1ff1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   1ff20:	b002      	add	sp, #8
   1ff22:	bd10      	pop	{r4, pc}
   1ff24:	40031000 	.word	0x40031000

0001ff28 <rx_hfclk_request>:

	activate_rx(data);
}

static void rx_hfclk_request(struct lpuart_data *data)
{
   1ff28:	b570      	push	{r4, r5, r6, lr}
   1ff2a:	4604      	mov	r4, r0
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1ff2c:	2000      	movs	r0, #0
   1ff2e:	f7f6 fa05 	bl	1633c <z_nrf_clock_control_get_onoff>
 * @param handler a function pointer to use for notification.
 */
static inline void sys_notify_init_callback(struct sys_notify *notify,
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
   1ff32:	f114 0694 	adds.w	r6, r4, #148	; 0x94
   1ff36:	4605      	mov	r5, r0
   1ff38:	d10b      	bne.n	1ff52 <rx_hfclk_request+0x2a>
   1ff3a:	4914      	ldr	r1, [pc, #80]	; (1ff8c <rx_hfclk_request+0x64>)
   1ff3c:	4814      	ldr	r0, [pc, #80]	; (1ff90 <rx_hfclk_request+0x68>)
   1ff3e:	f44f 73a2 	mov.w	r3, #324	; 0x144
   1ff42:	4a14      	ldr	r2, [pc, #80]	; (1ff94 <rx_hfclk_request+0x6c>)
   1ff44:	f00f fe94 	bl	2fc70 <printk>
   1ff48:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1ff4c:	4811      	ldr	r0, [pc, #68]	; (1ff94 <rx_hfclk_request+0x6c>)
   1ff4e:	f010 f975 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1ff52:	2300      	movs	r3, #0
   1ff54:	e9c6 3301 	strd	r3, r3, [r6, #4]
   1ff58:	4b0f      	ldr	r3, [pc, #60]	; (1ff98 <rx_hfclk_request+0x70>)
	int err;

	sys_notify_init_callback(&data->rx_clk_cli.notify, rx_hfclk_callback);
	err = onoff_request(mgr, &data->rx_clk_cli);
   1ff5a:	4628      	mov	r0, r5
   1ff5c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   1ff60:	2303      	movs	r3, #3
   1ff62:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1ff66:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
   1ff6a:	f7f3 fe0d 	bl	13b88 <onoff_request>
	__ASSERT_NO_MSG(err >= 0);
   1ff6e:	2800      	cmp	r0, #0
   1ff70:	da0b      	bge.n	1ff8a <rx_hfclk_request+0x62>
   1ff72:	490a      	ldr	r1, [pc, #40]	; (1ff9c <rx_hfclk_request+0x74>)
   1ff74:	4806      	ldr	r0, [pc, #24]	; (1ff90 <rx_hfclk_request+0x68>)
   1ff76:	23fb      	movs	r3, #251	; 0xfb
   1ff78:	4a09      	ldr	r2, [pc, #36]	; (1ffa0 <rx_hfclk_request+0x78>)
   1ff7a:	f00f fe79 	bl	2fc70 <printk>
}
   1ff7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	__ASSERT_NO_MSG(err >= 0);
   1ff82:	21fb      	movs	r1, #251	; 0xfb
   1ff84:	4806      	ldr	r0, [pc, #24]	; (1ffa0 <rx_hfclk_request+0x78>)
   1ff86:	f010 b959 	b.w	3023c <assert_post_action>
}
   1ff8a:	bd70      	pop	{r4, r5, r6, pc}
   1ff8c:	0003d552 	.word	0x0003d552
   1ff90:	0003a56b 	.word	0x0003a56b
   1ff94:	0003d52a 	.word	0x0003d52a
   1ff98:	0001ffa5 	.word	0x0001ffa5
   1ff9c:	0003ae24 	.word	0x0003ae24
   1ffa0:	0003d568 	.word	0x0003d568

0001ffa4 <rx_hfclk_callback>:
	__ASSERT_NO_MSG(res >= 0);
   1ffa4:	2b00      	cmp	r3, #0
{
   1ffa6:	b538      	push	{r3, r4, r5, lr}
   1ffa8:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(res >= 0);
   1ffaa:	da09      	bge.n	1ffc0 <rx_hfclk_callback+0x1c>
   1ffac:	491f      	ldr	r1, [pc, #124]	; (2002c <rx_hfclk_callback+0x88>)
   1ffae:	4820      	ldr	r0, [pc, #128]	; (20030 <rx_hfclk_callback+0x8c>)
   1ffb0:	23ee      	movs	r3, #238	; 0xee
   1ffb2:	4a20      	ldr	r2, [pc, #128]	; (20034 <rx_hfclk_callback+0x90>)
   1ffb4:	f00f fe5c 	bl	2fc70 <printk>
   1ffb8:	21ee      	movs	r1, #238	; 0xee
   1ffba:	481e      	ldr	r0, [pc, #120]	; (20034 <rx_hfclk_callback+0x90>)
   1ffbc:	f010 f93e 	bl	3023c <assert_post_action>
	if (data->rx_buf == NULL) {
   1ffc0:	f854 1c18 	ldr.w	r1, [r4, #-24]
   1ffc4:	b959      	cbnz	r1, 1ffde <rx_hfclk_callback+0x3a>
   1ffc6:	4b1c      	ldr	r3, [pc, #112]	; (20038 <rx_hfclk_callback+0x94>)
   1ffc8:	491c      	ldr	r1, [pc, #112]	; (2003c <rx_hfclk_callback+0x98>)
		LOG_ERR("RX: Request before enabling RX");
   1ffca:	481d      	ldr	r0, [pc, #116]	; (20040 <rx_hfclk_callback+0x9c>)
   1ffcc:	1ac9      	subs	r1, r1, r3
   1ffce:	08c9      	lsrs	r1, r1, #3
   1ffd0:	0189      	lsls	r1, r1, #6
   1ffd2:	f041 0101 	orr.w	r1, r1, #1
}
   1ffd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("RX: Request before enabling RX");
   1ffda:	f010 b97d 	b.w	302d8 <log_0>
	err = uart_rx_enable(data->uart, data->rx_buf,
   1ffde:	f854 0c90 	ldr.w	r0, [r4, #-144]
   1ffe2:	e954 2305 	ldrd	r2, r3, [r4, #-20]
	return api->rx_enable(dev, buf, len, timeout);
   1ffe6:	6885      	ldr	r5, [r0, #8]
   1ffe8:	68ed      	ldr	r5, [r5, #12]
   1ffea:	47a8      	blx	r5
	__ASSERT(err == 0, "RX: Enabling failed (err:%d)", err);
   1ffec:	4605      	mov	r5, r0
   1ffee:	b168      	cbz	r0, 2000c <rx_hfclk_callback+0x68>
   1fff0:	23dd      	movs	r3, #221	; 0xdd
   1fff2:	4a10      	ldr	r2, [pc, #64]	; (20034 <rx_hfclk_callback+0x90>)
   1fff4:	4913      	ldr	r1, [pc, #76]	; (20044 <rx_hfclk_callback+0xa0>)
   1fff6:	480e      	ldr	r0, [pc, #56]	; (20030 <rx_hfclk_callback+0x8c>)
   1fff8:	f00f fe3a 	bl	2fc70 <printk>
   1fffc:	4629      	mov	r1, r5
   1fffe:	4812      	ldr	r0, [pc, #72]	; (20048 <rx_hfclk_callback+0xa4>)
   20000:	f00f fe36 	bl	2fc70 <printk>
   20004:	21dd      	movs	r1, #221	; 0xdd
   20006:	480b      	ldr	r0, [pc, #44]	; (20034 <rx_hfclk_callback+0x90>)
   20008:	f010 f918 	bl	3023c <assert_post_action>
	ctrl_pin_clear(&data->rdy_pin);
   2000c:	f1a4 0578 	sub.w	r5, r4, #120	; 0x78
   20010:	4628      	mov	r0, r5
   20012:	f7ff ff69 	bl	1fee8 <ctrl_pin_clear>
	ctrl_pin_set(&data->rdy_pin, false);
   20016:	4628      	mov	r0, r5
   20018:	f015 f865 	bl	350e6 <ctrl_pin_set.constprop.0>
	data->rx_req = false;
   2001c:	2300      	movs	r3, #0
   2001e:	f804 3c03 	strb.w	r3, [r4, #-3]
	data->rx_state = RX_ACTIVE;
   20022:	2303      	movs	r3, #3
   20024:	f804 3c04 	strb.w	r3, [r4, #-4]
}
   20028:	bd38      	pop	{r3, r4, r5, pc}
   2002a:	bf00      	nop
   2002c:	0003d59c 	.word	0x0003d59c
   20030:	0003a56b 	.word	0x0003a56b
   20034:	0003d568 	.word	0x0003d568
   20038:	000387c0 	.word	0x000387c0
   2003c:	00038878 	.word	0x00038878
   20040:	0003d5a5 	.word	0x0003d5a5
   20044:	0003bd10 	.word	0x0003bd10
   20048:	0003d5c4 	.word	0x0003d5c4

0002004c <api_poll_out>:
	return -ENOTSUP;
#endif
}

static void api_poll_out(const struct device *dev, unsigned char out_char)
{
   2004c:	b570      	push	{r4, r5, r6, lr}
   2004e:	4605      	mov	r5, r0
   20050:	460e      	mov	r6, r1
	struct lpuart_data *data = get_dev_data(dev);
   20052:	6904      	ldr	r4, [r0, #16]
	bool thread_ctx = !k_is_in_isr() && !k_is_pre_kernel();
   20054:	f017 f9db 	bl	3740e <k_is_in_isr>
   20058:	b910      	cbnz	r0, 20060 <api_poll_out+0x14>
	return !z_sys_post_kernel;
   2005a:	4b12      	ldr	r3, [pc, #72]	; (200a4 <api_poll_out+0x58>)
	int err;

	if (thread_ctx) {
   2005c:	781b      	ldrb	r3, [r3, #0]
   2005e:	b933      	cbnz	r3, 2006e <api_poll_out+0x22>
		/* in thread context pend until tx is in idle */
		while (data->tx_buf) {
			k_msleep(1);
		}
	} else if (data->tx_buf) {
   20060:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   20062:	b993      	cbnz	r3, 2008a <api_poll_out+0x3e>
   20064:	e006      	b.n	20074 <api_poll_out+0x28>
   20066:	2021      	movs	r0, #33	; 0x21
   20068:	2100      	movs	r1, #0
   2006a:	f00c ff89 	bl	2cf80 <z_impl_k_sleep>
		while (data->tx_buf) {
   2006e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   20070:	2b00      	cmp	r3, #0
   20072:	d1f8      	bne.n	20066 <api_poll_out+0x1a>
		return;
	}

	if (!atomic_cas(&data->txbyte, -1, out_char)) {
   20074:	f104 0168 	add.w	r1, r4, #104	; 0x68
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20078:	e8d1 3fef 	ldaex	r3, [r1]
   2007c:	3301      	adds	r3, #1
   2007e:	d103      	bne.n	20088 <api_poll_out+0x3c>
   20080:	e8c1 6fe2 	stlex	r2, r6, [r1]
   20084:	2a00      	cmp	r2, #0
   20086:	d1f7      	bne.n	20078 <api_poll_out+0x2c>
   20088:	d000      	beq.n	2008c <api_poll_out+0x40>
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
		     CONFIG_NRF_SW_LPUART_DEFAULT_TX_TIMEOUT);
	if (err < 0) {
		data->txbyte = -1;
	}
}
   2008a:	bd70      	pop	{r4, r5, r6, pc}
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
   2008c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20090:	2201      	movs	r2, #1
   20092:	4628      	mov	r0, r5
   20094:	f015 f868 	bl	35168 <api_tx>
	if (err < 0) {
   20098:	2800      	cmp	r0, #0
		data->txbyte = -1;
   2009a:	bfbc      	itt	lt
   2009c:	f04f 33ff 	movlt.w	r3, #4294967295
   200a0:	66a3      	strlt	r3, [r4, #104]	; 0x68
   200a2:	e7f2      	b.n	2008a <api_poll_out+0x3e>
   200a4:	2001dcc7 	.word	0x2001dcc7

000200a8 <uart_callback>:
{
   200a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200aa:	780b      	ldrb	r3, [r1, #0]
   200ac:	460d      	mov	r5, r1
   200ae:	4616      	mov	r6, r2
	struct lpuart_data *data = get_dev_data(dev);
   200b0:	6914      	ldr	r4, [r2, #16]
	switch (evt->type) {
   200b2:	2b06      	cmp	r3, #6
   200b4:	d814      	bhi.n	200e0 <uart_callback+0x38>
   200b6:	e8df f003 	tbb	[pc, r3]
   200ba:	1704      	.short	0x1704
   200bc:	1d171417 	.word	0x1d171417
   200c0:	17          	.byte	0x17
   200c1:	00          	.byte	0x00
	ctrl_pin_idle(&data->req_pin);
   200c2:	1d20      	adds	r0, r4, #4
		const uint8_t *txbuf = evt->data.tx.buf;
   200c4:	684f      	ldr	r7, [r1, #4]
	ctrl_pin_idle(&data->req_pin);
   200c6:	f015 f8b9 	bl	3523c <ctrl_pin_idle>
	data->tx_buf = NULL;
   200ca:	2300      	movs	r3, #0
   200cc:	66e3      	str	r3, [r4, #108]	; 0x6c
	data->tx_active = false;
   200ce:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		if (txbuf == (void *)&data->txbyte) {
   200d2:	f104 0368 	add.w	r3, r4, #104	; 0x68
   200d6:	429f      	cmp	r7, r3
   200d8:	d106      	bne.n	200e8 <uart_callback+0x40>
			data->txbyte = -1;
   200da:	f04f 33ff 	mov.w	r3, #4294967295
   200de:	66a3      	str	r3, [r4, #104]	; 0x68
}
   200e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (data->rx_len < CONFIG_NRF_SW_LPUART_MAX_PACKET_SIZE) {
   200e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   200e4:	2b7f      	cmp	r3, #127	; 0x7f
   200e6:	d8fb      	bhi.n	200e0 <uart_callback+0x38>
		user_callback(dev, evt);
   200e8:	4629      	mov	r1, r5
   200ea:	4630      	mov	r0, r6
}
   200ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		user_callback(dev, evt);
   200f0:	f014 bf72 	b.w	34fd8 <user_callback>
		__ASSERT_NO_MSG((data->rx_state != RX_IDLE) &&
   200f4:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   200f8:	2b01      	cmp	r3, #1
   200fa:	d80b      	bhi.n	20114 <uart_callback+0x6c>
   200fc:	490d      	ldr	r1, [pc, #52]	; (20134 <uart_callback+0x8c>)
   200fe:	480e      	ldr	r0, [pc, #56]	; (20138 <uart_callback+0x90>)
   20100:	f240 13e7 	movw	r3, #487	; 0x1e7
   20104:	4a0d      	ldr	r2, [pc, #52]	; (2013c <uart_callback+0x94>)
   20106:	f00f fdb3 	bl	2fc70 <printk>
   2010a:	f240 11e7 	movw	r1, #487	; 0x1e7
   2010e:	480b      	ldr	r0, [pc, #44]	; (2013c <uart_callback+0x94>)
   20110:	f010 f894 	bl	3023c <assert_post_action>
		if (data->rx_state == RX_TO_IDLE) {
   20114:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   20118:	2b04      	cmp	r3, #4
			data->rx_state = RX_BLOCKED;
   2011a:	bf09      	itett	eq
   2011c:	2305      	moveq	r3, #5
			data->rx_buf = NULL;
   2011e:	2300      	movne	r3, #0
			data->rx_state = RX_BLOCKED;
   20120:	f884 308c 	strbeq.w	r3, [r4, #140]	; 0x8c
			evt->type = UART_RX_BUF_REQUEST;
   20124:	2303      	moveq	r3, #3
			data->rx_buf = NULL;
   20126:	bf16      	itet	ne
   20128:	67a3      	strne	r3, [r4, #120]	; 0x78
			evt->type = UART_RX_BUF_REQUEST;
   2012a:	702b      	strbeq	r3, [r5, #0]
			data->rx_state = RX_OFF;
   2012c:	f884 308c 	strbne.w	r3, [r4, #140]	; 0x8c
   20130:	e7da      	b.n	200e8 <uart_callback+0x40>
   20132:	bf00      	nop
   20134:	0003d5e3 	.word	0x0003d5e3
   20138:	0003a56b 	.word	0x0003a56b
   2013c:	0003d568 	.word	0x0003d568

00020140 <ctrl_pin_configure>:
{
   20140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	io->pin = cfg->pin;
   20144:	790b      	ldrb	r3, [r1, #4]
{
   20146:	4604      	mov	r4, r0
	io->pin = cfg->pin;
   20148:	7403      	strb	r3, [r0, #16]
	io->nrf_pin = cfg->nrf_pin;
   2014a:	794b      	ldrb	r3, [r1, #5]
{
   2014c:	4617      	mov	r7, r2
	io->nrf_pin = cfg->nrf_pin;
   2014e:	7443      	strb	r3, [r0, #17]
	io->req = req;
   20150:	74c2      	strb	r2, [r0, #19]
	io->port = device_get_binding(cfg->port_name);
   20152:	6808      	ldr	r0, [r1, #0]
   20154:	f009 fe90 	bl	29e78 <z_impl_device_get_binding>
   20158:	4605      	mov	r5, r0
   2015a:	60e0      	str	r0, [r4, #12]
	if (!io->port) {
   2015c:	2800      	cmp	r0, #0
   2015e:	f000 809b 	beq.w	20298 <ctrl_pin_configure+0x158>
	gpio_init_callback(&io->callback, gpio_handler, BIT(io->pin));
   20162:	2601      	movs	r6, #1
   20164:	f894 8010 	ldrb.w	r8, [r4, #16]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   20168:	4b4e      	ldr	r3, [pc, #312]	; (202a4 <ctrl_pin_configure+0x164>)
   2016a:	fa06 f608 	lsl.w	r6, r6, r8
	callback->pin_mask = pin_mask;
   2016e:	e9c4 3601 	strd	r3, r6, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   20172:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
   20174:	f8d0 a008 	ldr.w	sl, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   20178:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   2017a:	f8d0 9010 	ldr.w	r9, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2017e:	421e      	tst	r6, r3
   20180:	d10e      	bne.n	201a0 <ctrl_pin_configure+0x60>
   20182:	4949      	ldr	r1, [pc, #292]	; (202a8 <ctrl_pin_configure+0x168>)
   20184:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   20188:	4a48      	ldr	r2, [pc, #288]	; (202ac <ctrl_pin_configure+0x16c>)
   2018a:	4849      	ldr	r0, [pc, #292]	; (202b0 <ctrl_pin_configure+0x170>)
   2018c:	f00f fd70 	bl	2fc70 <printk>
   20190:	4848      	ldr	r0, [pc, #288]	; (202b4 <ctrl_pin_configure+0x174>)
   20192:	f00f fd6d 	bl	2fc70 <printk>
   20196:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   2019a:	4844      	ldr	r0, [pc, #272]	; (202ac <ctrl_pin_configure+0x16c>)
   2019c:	f010 f84e 	bl	3023c <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   201a0:	f8d9 3000 	ldr.w	r3, [r9]
	return api->pin_configure(port, pin, flags);
   201a4:	f44f 7280 	mov.w	r2, #256	; 0x100
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   201a8:	ea23 0606 	bic.w	r6, r3, r6
	return api->pin_configure(port, pin, flags);
   201ac:	4641      	mov	r1, r8
   201ae:	4628      	mov	r0, r5
   201b0:	f8da 3000 	ldr.w	r3, [sl]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   201b4:	f8c9 6000 	str.w	r6, [r9]
	return api->pin_configure(port, pin, flags);
   201b8:	4798      	blx	r3
	if (err < 0) {
   201ba:	2800      	cmp	r0, #0
   201bc:	db57      	blt.n	2026e <ctrl_pin_configure+0x12e>
	err = gpio_add_callback(io->port, &io->callback);
   201be:	68e0      	ldr	r0, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   201c0:	6883      	ldr	r3, [r0, #8]
   201c2:	69db      	ldr	r3, [r3, #28]
   201c4:	2b00      	cmp	r3, #0
   201c6:	d06a      	beq.n	2029e <ctrl_pin_configure+0x15e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   201c8:	2201      	movs	r2, #1
   201ca:	4621      	mov	r1, r4
   201cc:	4798      	blx	r3
	if (err < 0) {
   201ce:	2800      	cmp	r0, #0
   201d0:	db4d      	blt.n	2026e <ctrl_pin_configure+0x12e>
	err = gpio_pin_interrupt_configure(io->port, io->pin, req ?
   201d2:	2f00      	cmp	r7, #0
   201d4:	bf14      	ite	ne
   201d6:	f44f 3750 	movne.w	r7, #212992	; 0x34000
   201da:	f44f 27a8 	moveq.w	r7, #344064	; 0x54000
   201de:	68e5      	ldr	r5, [r4, #12]
   201e0:	7c26      	ldrb	r6, [r4, #16]
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   201e2:	f407 23c8 	and.w	r3, r7, #409600	; 0x64000
   201e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	const struct gpio_driver_config *const cfg =
   201ea:	e9d5 9801 	ldrd	r9, r8, [r5, #4]
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   201ee:	d10e      	bne.n	2020e <ctrl_pin_configure+0xce>
   201f0:	4931      	ldr	r1, [pc, #196]	; (202b8 <ctrl_pin_configure+0x178>)
   201f2:	f240 238a 	movw	r3, #650	; 0x28a
   201f6:	4a2d      	ldr	r2, [pc, #180]	; (202ac <ctrl_pin_configure+0x16c>)
   201f8:	482d      	ldr	r0, [pc, #180]	; (202b0 <ctrl_pin_configure+0x170>)
   201fa:	f00f fd39 	bl	2fc70 <printk>
   201fe:	482f      	ldr	r0, [pc, #188]	; (202bc <ctrl_pin_configure+0x17c>)
   20200:	f00f fd36 	bl	2fc70 <printk>
   20204:	f240 218a 	movw	r1, #650	; 0x28a
   20208:	4828      	ldr	r0, [pc, #160]	; (202ac <ctrl_pin_configure+0x16c>)
   2020a:	f010 f817 	bl	3023c <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2020e:	2301      	movs	r3, #1
   20210:	f8d9 2000 	ldr.w	r2, [r9]
   20214:	40b3      	lsls	r3, r6
   20216:	4213      	tst	r3, r2
   20218:	d10e      	bne.n	20238 <ctrl_pin_configure+0xf8>
   2021a:	4923      	ldr	r1, [pc, #140]	; (202a8 <ctrl_pin_configure+0x168>)
   2021c:	f44f 7324 	mov.w	r3, #656	; 0x290
   20220:	4a22      	ldr	r2, [pc, #136]	; (202ac <ctrl_pin_configure+0x16c>)
   20222:	4823      	ldr	r0, [pc, #140]	; (202b0 <ctrl_pin_configure+0x170>)
   20224:	f00f fd24 	bl	2fc70 <printk>
   20228:	4822      	ldr	r0, [pc, #136]	; (202b4 <ctrl_pin_configure+0x174>)
   2022a:	f00f fd21 	bl	2fc70 <printk>
   2022e:	f44f 7124 	mov.w	r1, #656	; 0x290
   20232:	481e      	ldr	r0, [pc, #120]	; (202ac <ctrl_pin_configure+0x16c>)
   20234:	f010 f802 	bl	3023c <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   20238:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   2023c:	4631      	mov	r1, r6
   2023e:	4628      	mov	r0, r5
   20240:	f8d8 8018 	ldr.w	r8, [r8, #24]
   20244:	f407 23c0 	and.w	r3, r7, #393216	; 0x60000
   20248:	47c0      	blx	r8
	if (err < 0) {
   2024a:	2800      	cmp	r0, #0
   2024c:	db0f      	blt.n	2026e <ctrl_pin_configure+0x12e>
	for (i = 0; i < GPIOTE_CH_NUM; i++) {
   2024e:	2300      	movs	r3, #0
		if (nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == io->nrf_pin) {
   20250:	7c61      	ldrb	r1, [r4, #17]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20252:	481b      	ldr	r0, [pc, #108]	; (202c0 <ctrl_pin_configure+0x180>)
   20254:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   20258:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   2025c:	f3c2 2204 	ubfx	r2, r2, #8, #5
   20260:	428a      	cmp	r2, r1
   20262:	d106      	bne.n	20272 <ctrl_pin_configure+0x132>
			io->ch = i;
   20264:	74a3      	strb	r3, [r4, #18]
	ctrl_pin_idle(io);
   20266:	4620      	mov	r0, r4
   20268:	f014 ffe8 	bl	3523c <ctrl_pin_idle>
	return 0;
   2026c:	2000      	movs	r0, #0
}
   2026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < GPIOTE_CH_NUM; i++) {
   20272:	3301      	adds	r3, #1
   20274:	2b08      	cmp	r3, #8
   20276:	d1ed      	bne.n	20254 <ctrl_pin_configure+0x114>
	__ASSERT(i < GPIOTE_CH_NUM, "Used channel not found");
   20278:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   2027c:	4a11      	ldr	r2, [pc, #68]	; (202c4 <ctrl_pin_configure+0x184>)
   2027e:	4912      	ldr	r1, [pc, #72]	; (202c8 <ctrl_pin_configure+0x188>)
   20280:	480b      	ldr	r0, [pc, #44]	; (202b0 <ctrl_pin_configure+0x170>)
   20282:	f00f fcf5 	bl	2fc70 <printk>
   20286:	4811      	ldr	r0, [pc, #68]	; (202cc <ctrl_pin_configure+0x18c>)
   20288:	f00f fcf2 	bl	2fc70 <printk>
   2028c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   20290:	480c      	ldr	r0, [pc, #48]	; (202c4 <ctrl_pin_configure+0x184>)
   20292:	f00f ffd3 	bl	3023c <assert_post_action>
   20296:	e7e6      	b.n	20266 <ctrl_pin_configure+0x126>
		return -ENODEV;
   20298:	f06f 0012 	mvn.w	r0, #18
   2029c:	e7e7      	b.n	2026e <ctrl_pin_configure+0x12e>
		return -ENOTSUP;
   2029e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   202a2:	e7e4      	b.n	2026e <ctrl_pin_configure+0x12e>
   202a4:	00020601 	.word	0x00020601
   202a8:	0003ba15 	.word	0x0003ba15
   202ac:	0003b9eb 	.word	0x0003b9eb
   202b0:	0003a56b 	.word	0x0003a56b
   202b4:	0003ba53 	.word	0x0003ba53
   202b8:	0003d61d 	.word	0x0003d61d
   202bc:	0003d667 	.word	0x0003d667
   202c0:	40031000 	.word	0x40031000
   202c4:	0003d568 	.word	0x0003d568
   202c8:	0003d6ac 	.word	0x0003d6ac
   202cc:	0003d6b2 	.word	0x0003d6b2

000202d0 <tx_timeout>:
{
   202d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   202d2:	b087      	sub	sp, #28
	return z_impl_k_timer_user_data_get(timer);
   202d4:	6b46      	ldr	r6, [r0, #52]	; 0x34
	struct lpuart_data *data = get_dev_data(dev);
   202d6:	6934      	ldr	r4, [r6, #16]
	if (data->tx_active) {
   202d8:	f894 5074 	ldrb.w	r5, [r4, #116]	; 0x74
   202dc:	b1dd      	cbz	r5, 20316 <tx_timeout+0x46>
		err = uart_tx_abort(data->uart);
   202de:	6820      	ldr	r0, [r4, #0]
	return api->tx_abort(dev);
   202e0:	6883      	ldr	r3, [r0, #8]
   202e2:	689b      	ldr	r3, [r3, #8]
   202e4:	4798      	blx	r3
		if (err == -EFAULT) {
   202e6:	f110 0f0e 	cmn.w	r0, #14
   202ea:	4604      	mov	r4, r0
   202ec:	d011      	beq.n	20312 <tx_timeout+0x42>
		} else if (err < 0) {
   202ee:	2800      	cmp	r0, #0
   202f0:	da0f      	bge.n	20312 <tx_timeout+0x42>
			__ASSERT(0, "Unexpected tx_abort error:%d", err);
   202f2:	f240 2307 	movw	r3, #519	; 0x207
   202f6:	4a16      	ldr	r2, [pc, #88]	; (20350 <tx_timeout+0x80>)
   202f8:	4916      	ldr	r1, [pc, #88]	; (20354 <tx_timeout+0x84>)
   202fa:	4817      	ldr	r0, [pc, #92]	; (20358 <tx_timeout+0x88>)
   202fc:	f00f fcb8 	bl	2fc70 <printk>
   20300:	4621      	mov	r1, r4
   20302:	4816      	ldr	r0, [pc, #88]	; (2035c <tx_timeout+0x8c>)
   20304:	f00f fcb4 	bl	2fc70 <printk>
   20308:	f240 2107 	movw	r1, #519	; 0x207
   2030c:	4810      	ldr	r0, [pc, #64]	; (20350 <tx_timeout+0x80>)
   2030e:	f00f ff95 	bl	3023c <assert_post_action>
}
   20312:	b007      	add	sp, #28
   20314:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const uint8_t *txbuf = data->tx_buf;
   20316:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
	ctrl_pin_idle(&data->req_pin);
   20318:	1d20      	adds	r0, r4, #4
   2031a:	f014 ff8f 	bl	3523c <ctrl_pin_idle>
	if (txbuf == (void *)&data->txbyte) {
   2031e:	f104 0368 	add.w	r3, r4, #104	; 0x68
   20322:	429f      	cmp	r7, r3
	data->tx_buf = NULL;
   20324:	66e5      	str	r5, [r4, #108]	; 0x6c
	data->tx_active = false;
   20326:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	if (txbuf == (void *)&data->txbyte) {
   2032a:	d103      	bne.n	20334 <tx_timeout+0x64>
		data->txbyte = -1;
   2032c:	f04f 33ff 	mov.w	r3, #4294967295
   20330:	66a3      	str	r3, [r4, #104]	; 0x68
   20332:	e7ee      	b.n	20312 <tx_timeout+0x42>
		struct uart_event evt = {
   20334:	4629      	mov	r1, r5
   20336:	2214      	movs	r2, #20
   20338:	a801      	add	r0, sp, #4
   2033a:	f017 fa42 	bl	377c2 <memset>
   2033e:	2301      	movs	r3, #1
		user_callback(dev, &evt);
   20340:	4630      	mov	r0, r6
   20342:	a901      	add	r1, sp, #4
		struct uart_event evt = {
   20344:	f88d 3004 	strb.w	r3, [sp, #4]
   20348:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   2034a:	f014 fe45 	bl	34fd8 <user_callback>
   2034e:	e7e0      	b.n	20312 <tx_timeout+0x42>
   20350:	0003d568 	.word	0x0003d568
   20354:	00040e81 	.word	0x00040e81
   20358:	0003a56b 	.word	0x0003a56b
   2035c:	0003d6cb 	.word	0x0003d6cb

00020360 <api_rx_enable>:
{
   20360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lpuart_data *data = get_dev_data(dev);
   20362:	6904      	ldr	r4, [r0, #16]
{
   20364:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(data->rx_state == RX_OFF);
   20366:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
{
   2036a:	460f      	mov	r7, r1
   2036c:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(data->rx_state == RX_OFF);
   2036e:	b15b      	cbz	r3, 20388 <api_rx_enable+0x28>
   20370:	4922      	ldr	r1, [pc, #136]	; (203fc <api_rx_enable+0x9c>)
   20372:	4823      	ldr	r0, [pc, #140]	; (20400 <api_rx_enable+0xa0>)
   20374:	f240 235f 	movw	r3, #607	; 0x25f
   20378:	4a22      	ldr	r2, [pc, #136]	; (20404 <api_rx_enable+0xa4>)
   2037a:	f00f fc79 	bl	2fc70 <printk>
   2037e:	f240 215f 	movw	r1, #607	; 0x25f
   20382:	4820      	ldr	r0, [pc, #128]	; (20404 <api_rx_enable+0xa4>)
   20384:	f00f ff5a 	bl	3023c <assert_post_action>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20388:	f104 0378 	add.w	r3, r4, #120	; 0x78
   2038c:	e8d3 2fef 	ldaex	r2, [r3]
   20390:	2a00      	cmp	r2, #0
   20392:	d103      	bne.n	2039c <api_rx_enable+0x3c>
   20394:	e8c3 7fe1 	stlex	r1, r7, [r3]
   20398:	2900      	cmp	r1, #0
   2039a:	d1f7      	bne.n	2038c <api_rx_enable+0x2c>
	if (atomic_ptr_cas((atomic_ptr_t *)&data->rx_buf, NULL, buf) == false) {
   2039c:	d12b      	bne.n	203f6 <api_rx_enable+0x96>
	data->rx_state = RX_IDLE;
   2039e:	2301      	movs	r3, #1
	data->rx_timeout = timeout;
   203a0:	e9c4 651f 	strd	r6, r5, [r4, #124]	; 0x7c
	data->rx_state = RX_IDLE;
   203a4:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	__asm__ volatile(
   203a8:	f04f 0320 	mov.w	r3, #32
   203ac:	f3ef 8511 	mrs	r5, BASEPRI
   203b0:	f383 8811 	msr	BASEPRI, r3
   203b4:	f3bf 8f6f 	isb	sy
	pending_rx = nrf_gpio_pin_read(data->rdy_pin.nrf_pin)
   203b8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   203bc:	a801      	add	r0, sp, #4
   203be:	9301      	str	r3, [sp, #4]
   203c0:	f7ff fd5a 	bl	1fe78 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   203c4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   203c6:	6900      	ldr	r0, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   203c8:	40d8      	lsrs	r0, r3
		     && (data->rx_state == RX_IDLE);
   203ca:	f010 0001 	ands.w	r0, r0, #1
   203ce:	d004      	beq.n	203da <api_rx_enable+0x7a>
   203d0:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
   203d4:	1e43      	subs	r3, r0, #1
   203d6:	4258      	negs	r0, r3
   203d8:	4158      	adcs	r0, r3
	__asm__ volatile(
   203da:	f385 8811 	msr	BASEPRI, r5
   203de:	f3bf 8f6f 	isb	sy
	if (pending_rx) {
   203e2:	b130      	cbz	r0, 203f2 <api_rx_enable+0x92>
	data->rx_state = RX_PREPARE;
   203e4:	2302      	movs	r3, #2
		rx_hfclk_request(data);
   203e6:	4620      	mov	r0, r4
	data->rx_state = RX_PREPARE;
   203e8:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		rx_hfclk_request(data);
   203ec:	f7ff fd9c 	bl	1ff28 <rx_hfclk_request>
	return 0;
   203f0:	2000      	movs	r0, #0
}
   203f2:	b003      	add	sp, #12
   203f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
   203f6:	f06f 000f 	mvn.w	r0, #15
   203fa:	e7fa      	b.n	203f2 <api_rx_enable+0x92>
   203fc:	0003d6ea 	.word	0x0003d6ea
   20400:	0003a56b 	.word	0x0003a56b
   20404:	0003d568 	.word	0x0003d568

00020408 <lpuart_init>:
{
   20408:	b570      	push	{r4, r5, r6, lr}
	const struct lpuart_config *cfg = get_dev_config(dev);
   2040a:	6846      	ldr	r6, [r0, #4]
{
   2040c:	4604      	mov	r4, r0
	struct lpuart_data *data = get_dev_data(dev);
   2040e:	6905      	ldr	r5, [r0, #16]
	data->uart = device_get_binding(cfg->uart_name);
   20410:	6830      	ldr	r0, [r6, #0]
   20412:	f009 fd31 	bl	29e78 <z_impl_device_get_binding>
   20416:	6028      	str	r0, [r5, #0]
	if (data->uart == NULL) {
   20418:	2800      	cmp	r0, #0
   2041a:	d034      	beq.n	20486 <lpuart_init+0x7e>
	err = ctrl_pin_configure(&data->req_pin, &cfg->req, true);
   2041c:	2201      	movs	r2, #1
   2041e:	1d31      	adds	r1, r6, #4
   20420:	1d28      	adds	r0, r5, #4
   20422:	f7ff fe8d 	bl	20140 <ctrl_pin_configure>
	if (err < 0) {
   20426:	2800      	cmp	r0, #0
   20428:	da02      	bge.n	20430 <lpuart_init+0x28>
		return -EINVAL;
   2042a:	f06f 0015 	mvn.w	r0, #21
}
   2042e:	bd70      	pop	{r4, r5, r6, pc}
	err = ctrl_pin_configure(&data->rdy_pin, &cfg->rdy, false);
   20430:	2200      	movs	r2, #0
   20432:	f106 010c 	add.w	r1, r6, #12
   20436:	f105 0018 	add.w	r0, r5, #24
   2043a:	f7ff fe81 	bl	20140 <ctrl_pin_configure>
	if (err < 0) {
   2043e:	2800      	cmp	r0, #0
   20440:	dbf3      	blt.n	2042a <lpuart_init+0x22>
	k_timer_init(&data->tx_timer, tx_timeout, NULL);
   20442:	2200      	movs	r2, #0
   20444:	4911      	ldr	r1, [pc, #68]	; (2048c <lpuart_init+0x84>)
   20446:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2044a:	f017 f8ed 	bl	37628 <k_timer_init>
	err = uart_callback_set(data->uart, uart_callback, (void *)dev);
   2044e:	6828      	ldr	r0, [r5, #0]
	timer->user_data = user_data;
   20450:	666c      	str	r4, [r5, #100]	; 0x64
	return api->callback_set(dev, callback, user_data);
   20452:	6883      	ldr	r3, [r0, #8]
   20454:	4622      	mov	r2, r4
   20456:	681b      	ldr	r3, [r3, #0]
   20458:	490d      	ldr	r1, [pc, #52]	; (20490 <lpuart_init+0x88>)
   2045a:	4798      	blx	r3
	if (err < 0) {
   2045c:	2800      	cmp	r0, #0
   2045e:	dbe4      	blt.n	2042a <lpuart_init+0x22>
   20460:	68a3      	ldr	r3, [r4, #8]
   20462:	2200      	movs	r2, #0
   20464:	4620      	mov	r0, r4
   20466:	681b      	ldr	r3, [r3, #0]
   20468:	490a      	ldr	r1, [pc, #40]	; (20494 <lpuart_init+0x8c>)
   2046a:	4798      	blx	r3
	if (err < 0) {
   2046c:	2800      	cmp	r0, #0
   2046e:	dbdc      	blt.n	2042a <lpuart_init+0x22>
	err = api_rx_enable(dev, data->int_driven.rxbuf,
   20470:	2301      	movs	r3, #1
   20472:	2280      	movs	r2, #128	; 0x80
   20474:	4620      	mov	r0, r4
   20476:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   2047a:	f7ff ff71 	bl	20360 <api_rx_enable>
	data->txbyte = -1;
   2047e:	f04f 33ff 	mov.w	r3, #4294967295
   20482:	66ab      	str	r3, [r5, #104]	; 0x68
	return err;
   20484:	e7d3      	b.n	2042e <lpuart_init+0x26>
		return -ENODEV;
   20486:	f06f 0012 	mvn.w	r0, #18
   2048a:	e7d0      	b.n	2042e <lpuart_init+0x26>
   2048c:	000202d1 	.word	0x000202d1
   20490:	000200a9 	.word	0x000200a9
   20494:	0002054d 	.word	0x0002054d

00020498 <api_rx_buf_rsp>:
{
   20498:	b570      	push	{r4, r5, r6, lr}
	struct lpuart_data *data = get_dev_data(dev);
   2049a:	6904      	ldr	r4, [r0, #16]
{
   2049c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG((data->rx_state != RX_OFF) &&
   2049e:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
{
   204a2:	4616      	mov	r6, r2
	__ASSERT_NO_MSG((data->rx_state != RX_OFF) &&
   204a4:	b10b      	cbz	r3, 204aa <api_rx_buf_rsp+0x12>
   204a6:	2b06      	cmp	r3, #6
   204a8:	d10b      	bne.n	204c2 <api_rx_buf_rsp+0x2a>
   204aa:	4915      	ldr	r1, [pc, #84]	; (20500 <api_rx_buf_rsp+0x68>)
   204ac:	4815      	ldr	r0, [pc, #84]	; (20504 <api_rx_buf_rsp+0x6c>)
   204ae:	f240 237b 	movw	r3, #635	; 0x27b
   204b2:	4a15      	ldr	r2, [pc, #84]	; (20508 <api_rx_buf_rsp+0x70>)
   204b4:	f00f fbdc 	bl	2fc70 <printk>
   204b8:	f240 217b 	movw	r1, #635	; 0x27b
   204bc:	4812      	ldr	r0, [pc, #72]	; (20508 <api_rx_buf_rsp+0x70>)
   204be:	f00f febd 	bl	3023c <assert_post_action>
	if (data->rx_state == RX_TO_IDLE || data->rx_state == RX_BLOCKED) {
   204c2:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   204c6:	3b04      	subs	r3, #4
   204c8:	2b01      	cmp	r3, #1
   204ca:	d810      	bhi.n	204ee <api_rx_buf_rsp+0x56>
		if (data->rx_req) {
   204cc:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
		data->rx_len = len;
   204d0:	e9c4 561e 	strd	r5, r6, [r4, #120]	; 0x78
		if (data->rx_req) {
   204d4:	b13b      	cbz	r3, 204e6 <api_rx_buf_rsp+0x4e>
	data->rx_state = RX_PREPARE;
   204d6:	2302      	movs	r3, #2
		rx_hfclk_request(data);
   204d8:	4620      	mov	r0, r4
	data->rx_state = RX_PREPARE;
   204da:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		rx_hfclk_request(data);
   204de:	f7ff fd23 	bl	1ff28 <rx_hfclk_request>
}
   204e2:	2000      	movs	r0, #0
   204e4:	bd70      	pop	{r4, r5, r6, pc}
			data->rx_state = RX_IDLE;
   204e6:	2301      	movs	r3, #1
   204e8:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
			LOG_DBG("RX: Idle");
   204ec:	e7f9      	b.n	204e2 <api_rx_buf_rsp+0x4a>
	return uart_rx_buf_rsp(data->uart, buf, len);
   204ee:	6820      	ldr	r0, [r4, #0]
	return api->rx_buf_rsp(dev, buf, len);
   204f0:	4632      	mov	r2, r6
   204f2:	6883      	ldr	r3, [r0, #8]
   204f4:	4629      	mov	r1, r5
}
   204f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   204fa:	691b      	ldr	r3, [r3, #16]
   204fc:	4718      	bx	r3
   204fe:	bf00      	nop
   20500:	0003d703 	.word	0x0003d703
   20504:	0003a56b 	.word	0x0003a56b
   20508:	0003d568 	.word	0x0003d568

0002050c <int_driven_rx_feed>:
{
   2050c:	b508      	push	{r3, lr}
	data->int_driven.rxlen = 0;
   2050e:	2300      	movs	r3, #0
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   20510:	2280      	movs	r2, #128	; 0x80
	data->int_driven.rxrd = 0;
   20512:	e9c1 336b 	strd	r3, r3, [r1, #428]	; 0x1ac
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   20516:	f501 7196 	add.w	r1, r1, #300	; 0x12c
   2051a:	f7ff ffbd 	bl	20498 <api_rx_buf_rsp>
	__ASSERT_NO_MSG(err >= 0);
   2051e:	2800      	cmp	r0, #0
   20520:	da0d      	bge.n	2053e <int_driven_rx_feed+0x32>
   20522:	f240 23a9 	movw	r3, #681	; 0x2a9
   20526:	4906      	ldr	r1, [pc, #24]	; (20540 <int_driven_rx_feed+0x34>)
   20528:	4806      	ldr	r0, [pc, #24]	; (20544 <int_driven_rx_feed+0x38>)
   2052a:	4a07      	ldr	r2, [pc, #28]	; (20548 <int_driven_rx_feed+0x3c>)
   2052c:	f00f fba0 	bl	2fc70 <printk>
}
   20530:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(err >= 0);
   20534:	f240 21a9 	movw	r1, #681	; 0x2a9
   20538:	4803      	ldr	r0, [pc, #12]	; (20548 <int_driven_rx_feed+0x3c>)
   2053a:	f00f be7f 	b.w	3023c <assert_post_action>
}
   2053e:	bd08      	pop	{r3, pc}
   20540:	0003ae24 	.word	0x0003ae24
   20544:	0003a56b 	.word	0x0003a56b
   20548:	0003d568 	.word	0x0003d568

0002054c <int_driven_evt_handler>:
{
   2054c:	b570      	push	{r4, r5, r6, lr}
   2054e:	780b      	ldrb	r3, [r1, #0]
   20550:	4605      	mov	r5, r0
   20552:	460e      	mov	r6, r1
	struct lpuart_data *data = get_dev_data(lpuart);
   20554:	6904      	ldr	r4, [r0, #16]
	switch (evt->type) {
   20556:	2b06      	cmp	r3, #6
   20558:	d824      	bhi.n	205a4 <int_driven_evt_handler+0x58>
   2055a:	e8df f003 	tbb	[pc, r3]
   2055e:	2304      	.short	0x2304
   20560:	3023240d 	.word	0x3023240d
   20564:	2d          	.byte	0x2d
   20565:	00          	.byte	0x00
		data->int_driven.txlen = 0;
   20566:	2300      	movs	r3, #0
   20568:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   2056c:	4628      	mov	r0, r5
   2056e:	e9d4 3128 	ldrd	r3, r1, [r4, #160]	; 0xa0
}
   20572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   20576:	4718      	bx	r3
		__ASSERT_NO_MSG(data->int_driven.rxlen == 0);
   20578:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
   2057c:	b15b      	cbz	r3, 20596 <int_driven_evt_handler+0x4a>
   2057e:	491c      	ldr	r1, [pc, #112]	; (205f0 <int_driven_evt_handler+0xa4>)
   20580:	481c      	ldr	r0, [pc, #112]	; (205f4 <int_driven_evt_handler+0xa8>)
   20582:	f240 23b9 	movw	r3, #697	; 0x2b9
   20586:	4a1c      	ldr	r2, [pc, #112]	; (205f8 <int_driven_evt_handler+0xac>)
   20588:	f00f fb72 	bl	2fc70 <printk>
   2058c:	f240 21b9 	movw	r1, #697	; 0x2b9
   20590:	4819      	ldr	r0, [pc, #100]	; (205f8 <int_driven_evt_handler+0xac>)
   20592:	f00f fe53 	bl	3023c <assert_post_action>
		data->int_driven.rxlen = evt->data.rx.len;
   20596:	68f3      	ldr	r3, [r6, #12]
   20598:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		call_handler = data->int_driven.rx_enabled;
   2059c:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
	if (call_handler) {
   205a0:	2b00      	cmp	r3, #0
   205a2:	d1e3      	bne.n	2056c <int_driven_evt_handler+0x20>
}
   205a4:	bd70      	pop	{r4, r5, r6, pc}
		if (int_driven_rd_available(data) == 0) {
   205a6:	e9d4 236b 	ldrd	r2, r3, [r4, #428]	; 0x1ac
   205aa:	429a      	cmp	r2, r3
   205ac:	d1fa      	bne.n	205a4 <int_driven_evt_handler+0x58>
			int_driven_rx_feed(lpuart, data);
   205ae:	4621      	mov	r1, r4
}
   205b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			int_driven_rx_feed(lpuart, data);
   205b4:	f7ff bfaa 	b.w	2050c <int_driven_rx_feed>
		call_handler = data->int_driven.err_enabled;
   205b8:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		break;
   205bc:	e7f0      	b.n	205a0 <int_driven_evt_handler+0x54>
		data->int_driven.rxlen = 0;
   205be:	2300      	movs	r3, #0
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   205c0:	2280      	movs	r2, #128	; 0x80
		data->int_driven.rxrd = 0;
   205c2:	e9c4 336b 	strd	r3, r3, [r4, #428]	; 0x1ac
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   205c6:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   205ca:	2301      	movs	r3, #1
   205cc:	f7ff fec8 	bl	20360 <api_rx_enable>
		__ASSERT_NO_MSG(err >= 0);
   205d0:	2800      	cmp	r0, #0
   205d2:	dae7      	bge.n	205a4 <int_driven_evt_handler+0x58>
   205d4:	4909      	ldr	r1, [pc, #36]	; (205fc <int_driven_evt_handler+0xb0>)
   205d6:	4807      	ldr	r0, [pc, #28]	; (205f4 <int_driven_evt_handler+0xa8>)
   205d8:	f240 23cd 	movw	r3, #717	; 0x2cd
   205dc:	4a06      	ldr	r2, [pc, #24]	; (205f8 <int_driven_evt_handler+0xac>)
   205de:	f00f fb47 	bl	2fc70 <printk>
}
   205e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT_NO_MSG(err >= 0);
   205e6:	f240 21cd 	movw	r1, #717	; 0x2cd
   205ea:	4803      	ldr	r0, [pc, #12]	; (205f8 <int_driven_evt_handler+0xac>)
   205ec:	f00f be26 	b.w	3023c <assert_post_action>
   205f0:	0003d73f 	.word	0x0003d73f
   205f4:	0003a56b 	.word	0x0003a56b
   205f8:	0003d568 	.word	0x0003d568
   205fc:	0003ae24 	.word	0x0003ae24

00020600 <gpio_handler>:
	if (io->req) {
   20600:	7ccb      	ldrb	r3, [r1, #19]
{
   20602:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20604:	460c      	mov	r4, r1
	if (io->req) {
   20606:	2b00      	cmp	r3, #0
   20608:	d055      	beq.n	206b6 <gpio_handler+0xb6>
	if (data->tx_buf == NULL) {
   2060a:	6e8d      	ldr	r5, [r1, #104]	; 0x68
   2060c:	b98d      	cbnz	r5, 20632 <gpio_handler+0x32>
   2060e:	4972      	ldr	r1, [pc, #456]	; (207d8 <gpio_handler+0x1d8>)
   20610:	4b72      	ldr	r3, [pc, #456]	; (207dc <gpio_handler+0x1dc>)
		LOG_WRN("TX: request confirmed but no data to send");
   20612:	4873      	ldr	r0, [pc, #460]	; (207e0 <gpio_handler+0x1e0>)
   20614:	1ac9      	subs	r1, r1, r3
   20616:	08c9      	lsrs	r1, r1, #3
   20618:	0189      	lsls	r1, r1, #6
   2061a:	f041 0102 	orr.w	r1, r1, #2
   2061e:	f00f fe5b 	bl	302d8 <log_0>
	ctrl_pin_idle(&data->req_pin);
   20622:	4620      	mov	r0, r4
   20624:	f014 fe0a 	bl	3523c <ctrl_pin_idle>
	data->tx_buf = NULL;
   20628:	66a5      	str	r5, [r4, #104]	; 0x68
	data->tx_active = false;
   2062a:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
}
   2062e:	b002      	add	sp, #8
   20630:	bd70      	pop	{r4, r5, r6, pc}
		nrf_gpio_pin_set(io->nrf_pin);
   20632:	7c4b      	ldrb	r3, [r1, #17]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20634:	2601      	movs	r6, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20636:	a801      	add	r0, sp, #4
   20638:	9301      	str	r3, [sp, #4]
   2063a:	f7ff fc1d 	bl	1fe78 <nrf_gpio_pin_port_decode>
    p_reg->CONFIG[idx] = 0;
   2063e:	2500      	movs	r5, #0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20640:	9b01      	ldr	r3, [sp, #4]
   20642:	4a68      	ldr	r2, [pc, #416]	; (207e4 <gpio_handler+0x1e4>)
   20644:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTSET = set_mask;
   20648:	6083      	str	r3, [r0, #8]
		nrf_gpiote_te_default(NRF_GPIOTE, io->ch);
   2064a:	7ca3      	ldrb	r3, [r4, #18]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2064c:	a801      	add	r0, sp, #4
   2064e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   20652:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
		nrf_gpio_cfg_output(io->nrf_pin);
   20656:	7c63      	ldrb	r3, [r4, #17]
   20658:	9301      	str	r3, [sp, #4]
   2065a:	f7ff fc0d 	bl	1fe78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2065e:	2203      	movs	r2, #3
   20660:	9b01      	ldr	r3, [sp, #4]
   20662:	3380      	adds	r3, #128	; 0x80
   20664:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	z_impl_k_timer_stop(timer);
   20668:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   2066c:	f016 ffe8 	bl	37640 <z_impl_k_timer_stop>
	__asm__ volatile(
   20670:	f04f 0220 	mov.w	r2, #32
   20674:	f3ef 8311 	mrs	r3, BASEPRI
   20678:	f382 8811 	msr	BASEPRI, r2
   2067c:	f3bf 8f6f 	isb	sy
	len = data->tx_len;
   20680:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
	data->tx_active = true;
   20684:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
	__asm__ volatile(
   20688:	f383 8811 	msr	BASEPRI, r3
   2068c:	f3bf 8f6f 	isb	sy
	err = uart_tx(data->uart, buf, len, 0);
   20690:	f854 0c04 	ldr.w	r0, [r4, #-4]
	return api->tx(dev, buf, len, timeout);
   20694:	6883      	ldr	r3, [r0, #8]
   20696:	685e      	ldr	r6, [r3, #4]
   20698:	462b      	mov	r3, r5
   2069a:	47b0      	blx	r6
	if (err < 0) {
   2069c:	1e01      	subs	r1, r0, #0
   2069e:	dac6      	bge.n	2062e <gpio_handler+0x2e>
   206a0:	4b4e      	ldr	r3, [pc, #312]	; (207dc <gpio_handler+0x1dc>)
   206a2:	4a4d      	ldr	r2, [pc, #308]	; (207d8 <gpio_handler+0x1d8>)
		LOG_ERR("TX: Not started (error: %d)", err);
   206a4:	4850      	ldr	r0, [pc, #320]	; (207e8 <gpio_handler+0x1e8>)
   206a6:	1ad2      	subs	r2, r2, r3
   206a8:	08d2      	lsrs	r2, r2, #3
   206aa:	0192      	lsls	r2, r2, #6
   206ac:	f042 0201 	orr.w	r2, r2, #1
   206b0:	f00f fe1f 	bl	302f2 <log_1>
   206b4:	e7b5      	b.n	20622 <gpio_handler+0x22>
	if (nrf_gpiote_event_polarity_get(NRF_GPIOTE, data->rdy_pin.ch)
   206b6:	7c8b      	ldrb	r3, [r1, #18]
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   206b8:	4a4a      	ldr	r2, [pc, #296]	; (207e4 <gpio_handler+0x1e4>)
   206ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   206be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   206c2:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
   206c6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   206ca:	2b01      	cmp	r3, #1
   206cc:	d11c      	bne.n	20708 <gpio_handler+0x108>
		__ASSERT_NO_MSG(data->rx_state != RX_ACTIVE);
   206ce:	2a03      	cmp	r2, #3
   206d0:	d10b      	bne.n	206ea <gpio_handler+0xea>
   206d2:	4946      	ldr	r1, [pc, #280]	; (207ec <gpio_handler+0x1ec>)
   206d4:	4846      	ldr	r0, [pc, #280]	; (207f0 <gpio_handler+0x1f0>)
   206d6:	f44f 73a9 	mov.w	r3, #338	; 0x152
   206da:	4a46      	ldr	r2, [pc, #280]	; (207f4 <gpio_handler+0x1f4>)
   206dc:	f00f fac8 	bl	2fc70 <printk>
   206e0:	f44f 71a9 	mov.w	r1, #338	; 0x152
   206e4:	4843      	ldr	r0, [pc, #268]	; (207f4 <gpio_handler+0x1f4>)
   206e6:	f00f fda9 	bl	3023c <assert_post_action>
		data->rx_req = true;
   206ea:	2301      	movs	r3, #1
   206ec:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (data->rx_state == RX_IDLE) {
   206f0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   206f4:	2b01      	cmp	r3, #1
   206f6:	d19a      	bne.n	2062e <gpio_handler+0x2e>
	data->rx_state = RX_PREPARE;
   206f8:	2302      	movs	r3, #2
		rx_hfclk_request(data);
   206fa:	f1a4 0018 	sub.w	r0, r4, #24
	data->rx_state = RX_PREPARE;
   206fe:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		rx_hfclk_request(data);
   20702:	f7ff fc11 	bl	1ff28 <rx_hfclk_request>
}
   20706:	e792      	b.n	2062e <gpio_handler+0x2e>
		__ASSERT_NO_MSG(data->rx_state == RX_ACTIVE);
   20708:	2a03      	cmp	r2, #3
   2070a:	d00b      	beq.n	20724 <gpio_handler+0x124>
   2070c:	493a      	ldr	r1, [pc, #232]	; (207f8 <gpio_handler+0x1f8>)
   2070e:	4838      	ldr	r0, [pc, #224]	; (207f0 <gpio_handler+0x1f0>)
   20710:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   20714:	4a37      	ldr	r2, [pc, #220]	; (207f4 <gpio_handler+0x1f4>)
   20716:	f00f faab 	bl	2fc70 <printk>
   2071a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   2071e:	4835      	ldr	r0, [pc, #212]	; (207f4 <gpio_handler+0x1f4>)
   20720:	f00f fd8c 	bl	3023c <assert_post_action>
		     z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   20724:	2000      	movs	r0, #0
   20726:	f7f5 fe09 	bl	1633c <z_nrf_clock_control_get_onoff>
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   2072a:	f104 0178 	add.w	r1, r4, #120	; 0x78
   2072e:	4605      	mov	r5, r0
   20730:	f7f3 fb32 	bl	13d98 <onoff_cancel>

	if (rv == -EALREADY) {
   20734:	f110 0f78 	cmn.w	r0, #120	; 0x78
   20738:	d102      	bne.n	20740 <gpio_handler+0x140>
		rv = onoff_release(mgr);
   2073a:	4628      	mov	r0, r5
   2073c:	f7f3 fabc 	bl	13cb8 <onoff_release>
		__ASSERT_NO_MSG(err >= 0);
   20740:	2800      	cmp	r0, #0
   20742:	da0b      	bge.n	2075c <gpio_handler+0x15c>
   20744:	492d      	ldr	r1, [pc, #180]	; (207fc <gpio_handler+0x1fc>)
   20746:	482a      	ldr	r0, [pc, #168]	; (207f0 <gpio_handler+0x1f0>)
   20748:	f240 1315 	movw	r3, #277	; 0x115
   2074c:	4a29      	ldr	r2, [pc, #164]	; (207f4 <gpio_handler+0x1f4>)
   2074e:	f00f fa8f 	bl	2fc70 <printk>
   20752:	f240 1115 	movw	r1, #277	; 0x115
   20756:	4827      	ldr	r0, [pc, #156]	; (207f4 <gpio_handler+0x1f4>)
   20758:	f00f fd70 	bl	3023c <assert_post_action>
	ctrl_pin_idle(&data->rdy_pin);
   2075c:	4620      	mov	r0, r4
   2075e:	f014 fd6d 	bl	3523c <ctrl_pin_idle>
	if (nrf_gpio_pin_read(data->rdy_pin.nrf_pin)) {
   20762:	7c63      	ldrb	r3, [r4, #17]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20764:	a801      	add	r0, sp, #4
   20766:	9301      	str	r3, [sp, #4]
   20768:	f7ff fb86 	bl	1fe78 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2076c:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   2076e:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20770:	40d3      	lsrs	r3, r2
   20772:	07db      	lsls	r3, r3, #31
   20774:	d516      	bpl.n	207a4 <gpio_handler+0x1a4>
		nrf_gpiote_event_clear(NRF_GPIOTE,
   20776:	7ca5      	ldrb	r5, [r4, #18]
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   20778:	2d07      	cmp	r5, #7
   2077a:	d90b      	bls.n	20794 <gpio_handler+0x194>
   2077c:	4920      	ldr	r1, [pc, #128]	; (20800 <gpio_handler+0x200>)
   2077e:	481c      	ldr	r0, [pc, #112]	; (207f0 <gpio_handler+0x1f0>)
   20780:	f44f 7322 	mov.w	r3, #648	; 0x288
   20784:	4a1f      	ldr	r2, [pc, #124]	; (20804 <gpio_handler+0x204>)
   20786:	f00f fa73 	bl	2fc70 <printk>
   2078a:	f44f 7122 	mov.w	r1, #648	; 0x288
   2078e:	481d      	ldr	r0, [pc, #116]	; (20804 <gpio_handler+0x204>)
   20790:	f00f fd54 	bl	3023c <assert_post_action>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20794:	2200      	movs	r2, #0
    return ((uint32_t)p_reg + event);
   20796:	4b1c      	ldr	r3, [pc, #112]	; (20808 <gpio_handler+0x208>)
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   20798:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2079a:	515a      	str	r2, [r3, r5]
   2079c:	595b      	ldr	r3, [r3, r5]
		data->rx_req = true;
   2079e:	2301      	movs	r3, #1
   207a0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	data->rx_state = RX_TO_IDLE;
   207a4:	2304      	movs	r3, #4
	err = uart_rx_disable(data->uart);
   207a6:	f854 0c18 	ldr.w	r0, [r4, #-24]
	data->rx_state = RX_TO_IDLE;
   207aa:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
	return api->rx_disable(dev);
   207ae:	6883      	ldr	r3, [r0, #8]
   207b0:	695b      	ldr	r3, [r3, #20]
   207b2:	4798      	blx	r3
	if (err < 0 && err != -EFAULT) {
   207b4:	1e01      	subs	r1, r0, #0
   207b6:	f6bf af3a 	bge.w	2062e <gpio_handler+0x2e>
   207ba:	f111 0f0e 	cmn.w	r1, #14
   207be:	f43f af36 	beq.w	2062e <gpio_handler+0x2e>
   207c2:	4b06      	ldr	r3, [pc, #24]	; (207dc <gpio_handler+0x1dc>)
   207c4:	4a04      	ldr	r2, [pc, #16]	; (207d8 <gpio_handler+0x1d8>)
		LOG_ERR("RX: Failed to disable (err: %d)", err);
   207c6:	4811      	ldr	r0, [pc, #68]	; (2080c <gpio_handler+0x20c>)
   207c8:	1ad2      	subs	r2, r2, r3
   207ca:	08d2      	lsrs	r2, r2, #3
   207cc:	0192      	lsls	r2, r2, #6
   207ce:	f042 0201 	orr.w	r2, r2, #1
   207d2:	f00f fd8e 	bl	302f2 <log_1>
   207d6:	e72a      	b.n	2062e <gpio_handler+0x2e>
   207d8:	00038878 	.word	0x00038878
   207dc:	000387c0 	.word	0x000387c0
   207e0:	0003d75b 	.word	0x0003d75b
   207e4:	40031000 	.word	0x40031000
   207e8:	0003d785 	.word	0x0003d785
   207ec:	0003d7a1 	.word	0x0003d7a1
   207f0:	0003a56b 	.word	0x0003a56b
   207f4:	0003d568 	.word	0x0003d568
   207f8:	0003d7bd 	.word	0x0003d7bd
   207fc:	0003ae24 	.word	0x0003ae24
   20800:	0003d80e 	.word	0x0003d80e
   20804:	0003d7d9 	.word	0x0003d7d9
   20808:	40031100 	.word	0x40031100
   2080c:	0003d818 	.word	0x0003d818

00020810 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   20810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20812:	460f      	mov	r7, r1
   20814:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   20816:	b948      	cbnz	r0, 2082c <entropy_cc3xx_rng_get_entropy+0x1c>
   20818:	4918      	ldr	r1, [pc, #96]	; (2087c <entropy_cc3xx_rng_get_entropy+0x6c>)
   2081a:	4819      	ldr	r0, [pc, #100]	; (20880 <entropy_cc3xx_rng_get_entropy+0x70>)
   2081c:	2326      	movs	r3, #38	; 0x26
   2081e:	4a19      	ldr	r2, [pc, #100]	; (20884 <entropy_cc3xx_rng_get_entropy+0x74>)
   20820:	f00f fa26 	bl	2fc70 <printk>
   20824:	2126      	movs	r1, #38	; 0x26
   20826:	4817      	ldr	r0, [pc, #92]	; (20884 <entropy_cc3xx_rng_get_entropy+0x74>)
   20828:	f00f fd08 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   2082c:	b94f      	cbnz	r7, 20842 <entropy_cc3xx_rng_get_entropy+0x32>
   2082e:	4916      	ldr	r1, [pc, #88]	; (20888 <entropy_cc3xx_rng_get_entropy+0x78>)
   20830:	4813      	ldr	r0, [pc, #76]	; (20880 <entropy_cc3xx_rng_get_entropy+0x70>)
   20832:	2327      	movs	r3, #39	; 0x27
   20834:	4a13      	ldr	r2, [pc, #76]	; (20884 <entropy_cc3xx_rng_get_entropy+0x74>)
   20836:	f00f fa1b 	bl	2fc70 <printk>
   2083a:	2127      	movs	r1, #39	; 0x27
   2083c:	4811      	ldr	r0, [pc, #68]	; (20884 <entropy_cc3xx_rng_get_entropy+0x74>)
   2083e:	f00f fcfd 	bl	3023c <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   20842:	f44f 6580 	mov.w	r5, #1024	; 0x400
   20846:	2400      	movs	r4, #0
   20848:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   2084c:	42a6      	cmp	r6, r4
   2084e:	d801      	bhi.n	20854 <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   20850:	b003      	add	sp, #12
   20852:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   20854:	1b33      	subs	r3, r6, r4
   20856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2085a:	bf38      	it	cc
   2085c:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   2085e:	aa01      	add	r2, sp, #4
   20860:	4629      	mov	r1, r5
   20862:	1938      	adds	r0, r7, r4
   20864:	f010 f9d9 	bl	30c1a <spm_request_random_number>
		if (olen != chunk_size) {
   20868:	9b01      	ldr	r3, [sp, #4]
   2086a:	42ab      	cmp	r3, r5
   2086c:	d103      	bne.n	20876 <entropy_cc3xx_rng_get_entropy+0x66>
		if (res != 0) {
   2086e:	2800      	cmp	r0, #0
   20870:	d1ee      	bne.n	20850 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   20872:	442c      	add	r4, r5
   20874:	e7ea      	b.n	2084c <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   20876:	f06f 0015 	mvn.w	r0, #21
   2087a:	e7e9      	b.n	20850 <entropy_cc3xx_rng_get_entropy+0x40>
   2087c:	0003d86f 	.word	0x0003d86f
   20880:	0003a56b 	.word	0x0003a56b
   20884:	0003d83f 	.word	0x0003d83f
   20888:	0003d882 	.word	0x0003d882

0002088c <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   2088c:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   2088e:	4d19      	ldr	r5, [pc, #100]	; (208f4 <_nrf_modem_lib_init+0x68>)
   20890:	4c19      	ldr	r4, [pc, #100]	; (208f8 <_nrf_modem_lib_init+0x6c>)
   20892:	782b      	ldrb	r3, [r5, #0]
   20894:	b933      	cbnz	r3, 208a4 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   20896:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   2089a:	4818      	ldr	r0, [pc, #96]	; (208fc <_nrf_modem_lib_init+0x70>)
   2089c:	f016 fdcb 	bl	37436 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   208a0:	2301      	movs	r3, #1
   208a2:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   208a4:	2200      	movs	r2, #0
   208a6:	202a      	movs	r0, #42	; 0x2a
   208a8:	4611      	mov	r1, r2
   208aa:	f7f6 febf 	bl	1762c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   208ae:	2100      	movs	r1, #0
   208b0:	4813      	ldr	r0, [pc, #76]	; (20900 <_nrf_modem_lib_init+0x74>)
   208b2:	f009 f9e5 	bl	29c80 <nrf_modem_init>
   208b6:	4b13      	ldr	r3, [pc, #76]	; (20904 <_nrf_modem_lib_init+0x78>)
   208b8:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   208ba:	f04f 32ff 	mov.w	r2, #4294967295
   208be:	f04f 33ff 	mov.w	r3, #4294967295
   208c2:	480e      	ldr	r0, [pc, #56]	; (208fc <_nrf_modem_lib_init+0x70>)
   208c4:	f00a f974 	bl	2abb0 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   208c8:	6820      	ldr	r0, [r4, #0]
   208ca:	b170      	cbz	r0, 208ea <_nrf_modem_lib_init+0x5e>
	return node->next;
   208cc:	6804      	ldr	r4, [r0, #0]
   208ce:	2c00      	cmp	r4, #0
   208d0:	bf38      	it	cc
   208d2:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   208d4:	3004      	adds	r0, #4
   208d6:	f00a fc93 	bl	2b200 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   208da:	b134      	cbz	r4, 208ea <_nrf_modem_lib_init+0x5e>
   208dc:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   208de:	4620      	mov	r0, r4
   208e0:	2b00      	cmp	r3, #0
   208e2:	bf38      	it	cc
   208e4:	2300      	movcc	r3, #0
   208e6:	461c      	mov	r4, r3
   208e8:	e7f4      	b.n	208d4 <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   208ea:	4804      	ldr	r0, [pc, #16]	; (208fc <_nrf_modem_lib_init+0x70>)
   208ec:	f00a fa5a 	bl	2ada4 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   208f0:	2000      	movs	r0, #0
   208f2:	bd38      	pop	{r3, r4, r5, pc}
   208f4:	2001bb44 	.word	0x2001bb44
   208f8:	2001632c 	.word	0x2001632c
   208fc:	20016334 	.word	0x20016334
   20900:	0003936c 	.word	0x0003936c
   20904:	20016328 	.word	0x20016328

00020908 <nrf_modem_lib_shutdown_wait>:

void nrf_modem_lib_shutdown_wait(void)
{
   20908:	b530      	push	{r4, r5, lr}
   2090a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   2090c:	2201      	movs	r2, #1
   2090e:	2100      	movs	r1, #0
   20910:	a802      	add	r0, sp, #8
   20912:	f016 fdc5 	bl	374a0 <z_impl_k_sem_init>
   20916:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   20918:	f04f 33ff 	mov.w	r3, #4294967295
   2091c:	f04f 32ff 	mov.w	r2, #4294967295
   20920:	481c      	ldr	r0, [pc, #112]	; (20994 <nrf_modem_lib_shutdown_wait+0x8c>)
   20922:	f00a f945 	bl	2abb0 <z_impl_k_mutex_lock>
	parent->next = child;
   20926:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   20928:	4c1b      	ldr	r4, [pc, #108]	; (20998 <nrf_modem_lib_shutdown_wait+0x90>)
	parent->next = child;
   2092a:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2092c:	6863      	ldr	r3, [r4, #4]
   2092e:	bb2b      	cbnz	r3, 2097c <nrf_modem_lib_shutdown_wait+0x74>
	list->head = node;
   20930:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   20934:	4817      	ldr	r0, [pc, #92]	; (20994 <nrf_modem_lib_shutdown_wait+0x8c>)
   20936:	f00a fa35 	bl	2ada4 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   2093a:	f04f 32ff 	mov.w	r2, #4294967295
   2093e:	f04f 33ff 	mov.w	r3, #4294967295
   20942:	a802      	add	r0, sp, #8
   20944:	f00a fca0 	bl	2b288 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   20948:	f04f 32ff 	mov.w	r2, #4294967295
   2094c:	f04f 33ff 	mov.w	r3, #4294967295
   20950:	4810      	ldr	r0, [pc, #64]	; (20994 <nrf_modem_lib_shutdown_wait+0x8c>)
   20952:	f00a f92d 	bl	2abb0 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20956:	2200      	movs	r2, #0
   20958:	6823      	ldr	r3, [r4, #0]
   2095a:	b153      	cbz	r3, 20972 <nrf_modem_lib_shutdown_wait+0x6a>
   2095c:	42ab      	cmp	r3, r5
   2095e:	d116      	bne.n	2098e <nrf_modem_lib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   20960:	9901      	ldr	r1, [sp, #4]
   20962:	b972      	cbnz	r2, 20982 <nrf_modem_lib_shutdown_wait+0x7a>
   20964:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   20966:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   20968:	429a      	cmp	r2, r3
   2096a:	d100      	bne.n	2096e <nrf_modem_lib_shutdown_wait+0x66>
	list->tail = node;
   2096c:	6061      	str	r1, [r4, #4]
	parent->next = child;
   2096e:	2300      	movs	r3, #0
   20970:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   20972:	4808      	ldr	r0, [pc, #32]	; (20994 <nrf_modem_lib_shutdown_wait+0x8c>)
   20974:	f00a fa16 	bl	2ada4 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   20978:	b009      	add	sp, #36	; 0x24
   2097a:	bd30      	pop	{r4, r5, pc}
   2097c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2097e:	6065      	str	r5, [r4, #4]
}
   20980:	e7d8      	b.n	20934 <nrf_modem_lib_shutdown_wait+0x2c>
	parent->next = child;
   20982:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20984:	6861      	ldr	r1, [r4, #4]
   20986:	4299      	cmp	r1, r3
	list->tail = node;
   20988:	bf08      	it	eq
   2098a:	6062      	streq	r2, [r4, #4]
}
   2098c:	e7ef      	b.n	2096e <nrf_modem_lib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2098e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20990:	681b      	ldr	r3, [r3, #0]
   20992:	e7e2      	b.n	2095a <nrf_modem_lib_shutdown_wait+0x52>
   20994:	20016334 	.word	0x20016334
   20998:	2001632c 	.word	0x2001632c

0002099c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2099c:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2099e:	4c0d      	ldr	r4, [pc, #52]	; (209d4 <thread_monitor_entry_get+0x38>)
{
   209a0:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   209a2:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   209a4:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   209a6:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   209a8:	4b0b      	ldr	r3, [pc, #44]	; (209d8 <thread_monitor_entry_get+0x3c>)
   209aa:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   209ac:	6801      	ldr	r1, [r0, #0]
   209ae:	4291      	cmp	r1, r2
   209b0:	d00e      	beq.n	209d0 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   209b2:	b151      	cbz	r1, 209ca <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   209b4:	6841      	ldr	r1, [r0, #4]
   209b6:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   209b8:	42b1      	cmp	r1, r6
   209ba:	bfc4      	itt	gt
   209bc:	4604      	movgt	r4, r0
   209be:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   209c0:	3d01      	subs	r5, #1
   209c2:	f100 0008 	add.w	r0, r0, #8
   209c6:	d1f1      	bne.n	209ac <thread_monitor_entry_get+0x10>
   209c8:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   209ca:	3b01      	subs	r3, #1
	new_entry->id = id;
   209cc:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   209ce:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   209d0:	bd70      	pop	{r4, r5, r6, pc}
   209d2:	bf00      	nop
   209d4:	20016774 	.word	0x20016774
   209d8:	2001674c 	.word	0x2001674c

000209dc <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   209dc:	4668      	mov	r0, sp
   209de:	f020 0107 	bic.w	r1, r0, #7
   209e2:	468d      	mov	sp, r1
   209e4:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   209e6:	4b0f      	ldr	r3, [pc, #60]	; (20a24 <rpc_proxy_irq_handler+0x48>)
   209e8:	e8d3 2fef 	ldaex	r2, [r3]
   209ec:	3201      	adds	r2, #1
   209ee:	e8c3 2fe1 	stlex	r1, r2, [r3]
   209f2:	2900      	cmp	r1, #0
   209f4:	d1f8      	bne.n	209e8 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_os_application_irq_handler();
   209f6:	f005 fdd7 	bl	265a8 <nrf_modem_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   209fa:	4b0b      	ldr	r3, [pc, #44]	; (20a28 <rpc_proxy_irq_handler+0x4c>)
   209fc:	681c      	ldr	r4, [r3, #0]
   209fe:	2c00      	cmp	r4, #0
   20a00:	bf38      	it	cc
   20a02:	2400      	movcc	r4, #0
   20a04:	b12c      	cbz	r4, 20a12 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   20a06:	1d20      	adds	r0, r4, #4
   20a08:	f00a fbfa 	bl	2b200 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20a0c:	6824      	ldr	r4, [r4, #0]
   20a0e:	2c00      	cmp	r4, #0
   20a10:	d1f8      	bne.n	20a04 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   20a12:	f7f6 fe3d 	bl	17690 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   20a16:	f7f6 ff73 	bl	17900 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   20a1a:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   20a1e:	4685      	mov	sp, r0
   20a20:	4770      	bx	lr
   20a22:	bf00      	nop
   20a24:	2001674c 	.word	0x2001674c
   20a28:	2001676c 	.word	0x2001676c

00020a2c <nrf_modem_os_timedwait>:
{
   20a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a30:	460c      	mov	r4, r1
   20a32:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   20a34:	f016 fdc9 	bl	375ca <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   20a38:	6823      	ldr	r3, [r4, #0]
   20a3a:	4680      	mov	r8, r0
   20a3c:	2b00      	cmp	r3, #0
   20a3e:	468a      	mov	sl, r1
   20a40:	d103      	bne.n	20a4a <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   20a42:	f00c f94d 	bl	2cce0 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   20a46:	203c      	movs	r0, #60	; 0x3c
   20a48:	e091      	b.n	20b6e <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   20a4a:	bfbc      	itt	lt
   20a4c:	f04f 33ff 	movlt.w	r3, #4294967295
   20a50:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   20a52:	2201      	movs	r2, #1
   20a54:	2100      	movs	r1, #0
   20a56:	a802      	add	r0, sp, #8
   20a58:	f016 fd22 	bl	374a0 <z_impl_k_sem_init>
   20a5c:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   20a5e:	f04f 0320 	mov.w	r3, #32
   20a62:	f3ef 8b11 	mrs	fp, BASEPRI
   20a66:	f383 8811 	msr	BASEPRI, r3
   20a6a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   20a6e:	f00c fabf 	bl	2cff0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   20a72:	f7ff ff93 	bl	2099c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   20a76:	4947      	ldr	r1, [pc, #284]	; (20b94 <nrf_modem_os_timedwait+0x168>)
   20a78:	6843      	ldr	r3, [r0, #4]
   20a7a:	680a      	ldr	r2, [r1, #0]
   20a7c:	4689      	mov	r9, r1
   20a7e:	4293      	cmp	r3, r2
   20a80:	f04f 0300 	mov.w	r3, #0
   20a84:	d108      	bne.n	20a98 <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   20a86:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   20a88:	4b43      	ldr	r3, [pc, #268]	; (20b98 <nrf_modem_os_timedwait+0x16c>)
   20a8a:	685a      	ldr	r2, [r3, #4]
   20a8c:	2a00      	cmp	r2, #0
   20a8e:	d171      	bne.n	20b74 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   20a90:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   20a94:	2301      	movs	r3, #1
}
   20a96:	e000      	b.n	20a9a <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   20a98:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   20a9a:	f38b 8811 	msr	BASEPRI, fp
   20a9e:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   20aa2:	2b00      	cmp	r3, #0
   20aa4:	d062      	beq.n	20b6c <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   20aa6:	6823      	ldr	r3, [r4, #0]
   20aa8:	1c5a      	adds	r2, r3, #1
   20aaa:	d066      	beq.n	20b7a <nrf_modem_os_timedwait+0x14e>
   20aac:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   20ab0:	f240 30e7 	movw	r0, #999	; 0x3e7
   20ab4:	2100      	movs	r1, #0
   20ab6:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   20aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20abe:	2300      	movs	r3, #0
   20ac0:	fbce 010c 	smlal	r0, r1, lr, ip
   20ac4:	f7f0 fb94 	bl	111f0 <__aeabi_uldivmod>
   20ac8:	4602      	mov	r2, r0
   20aca:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   20acc:	a802      	add	r0, sp, #8
   20ace:	f00a fbdb 	bl	2b288 <z_impl_k_sem_take>
	__asm__ volatile(
   20ad2:	f04f 0320 	mov.w	r3, #32
   20ad6:	f3ef 8b11 	mrs	fp, BASEPRI
   20ada:	f383 8811 	msr	BASEPRI, r3
   20ade:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20ae2:	2000      	movs	r0, #0
   20ae4:	4b2c      	ldr	r3, [pc, #176]	; (20b98 <nrf_modem_os_timedwait+0x16c>)
   20ae6:	681a      	ldr	r2, [r3, #0]
   20ae8:	b15a      	cbz	r2, 20b02 <nrf_modem_os_timedwait+0xd6>
   20aea:	42aa      	cmp	r2, r5
   20aec:	d14f      	bne.n	20b8e <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   20aee:	9d01      	ldr	r5, [sp, #4]
   20af0:	2800      	cmp	r0, #0
   20af2:	d146      	bne.n	20b82 <nrf_modem_os_timedwait+0x156>
   20af4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   20af6:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   20af8:	4291      	cmp	r1, r2
   20afa:	d100      	bne.n	20afe <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   20afc:	605d      	str	r5, [r3, #4]
	parent->next = child;
   20afe:	2300      	movs	r3, #0
   20b00:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   20b02:	f00c fa75 	bl	2cff0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   20b06:	f7ff ff49 	bl	2099c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   20b0a:	f8d9 3000 	ldr.w	r3, [r9]
   20b0e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   20b10:	f38b 8811 	msr	BASEPRI, fp
   20b14:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   20b18:	6825      	ldr	r5, [r4, #0]
   20b1a:	1c6b      	adds	r3, r5, #1
   20b1c:	d026      	beq.n	20b6c <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   20b1e:	f016 fd54 	bl	375ca <z_impl_k_uptime_ticks>
   20b22:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   20b26:	468e      	mov	lr, r1
   20b28:	fba8 890c 	umull	r8, r9, r8, ip
   20b2c:	fba0 010c 	umull	r0, r1, r0, ip
   20b30:	fb0c 990a 	mla	r9, ip, sl, r9
   20b34:	fb0c 110e 	mla	r1, ip, lr, r1
   20b38:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   20b3c:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   20b40:	1952      	adds	r2, r2, r5
   20b42:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   20b46:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   20b4a:	0bc5      	lsrs	r5, r0, #15
   20b4c:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   20b50:	1b56      	subs	r6, r2, r5
   20b52:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   20b56:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   20b5a:	2e00      	cmp	r6, #0
   20b5c:	f177 0300 	sbcs.w	r3, r7, #0
   20b60:	bfb8      	it	lt
   20b62:	2600      	movlt	r6, #0
   20b64:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   20b66:	2e00      	cmp	r6, #0
   20b68:	f43f af6d 	beq.w	20a46 <nrf_modem_os_timedwait+0x1a>
	return 0;
   20b6c:	2000      	movs	r0, #0
}
   20b6e:	b009      	add	sp, #36	; 0x24
   20b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b74:	6015      	str	r5, [r2, #0]
	list->tail = node;
   20b76:	605d      	str	r5, [r3, #4]
   20b78:	e78c      	b.n	20a94 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   20b7a:	f04f 32ff 	mov.w	r2, #4294967295
   20b7e:	4613      	mov	r3, r2
   20b80:	e7a4      	b.n	20acc <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   20b82:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20b84:	6859      	ldr	r1, [r3, #4]
   20b86:	4291      	cmp	r1, r2
	list->tail = node;
   20b88:	bf08      	it	eq
   20b8a:	6058      	streq	r0, [r3, #4]
}
   20b8c:	e7b7      	b.n	20afe <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20b8e:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20b90:	6812      	ldr	r2, [r2, #0]
   20b92:	e7a9      	b.n	20ae8 <nrf_modem_os_timedwait+0xbc>
   20b94:	2001674c 	.word	0x2001674c
   20b98:	2001676c 	.word	0x2001676c

00020b9c <nrf_modem_os_errno_set>:
	switch (err_code) {
   20b9c:	283d      	cmp	r0, #61	; 0x3d
{
   20b9e:	b510      	push	{r4, lr}
   20ba0:	4604      	mov	r4, r0
	switch (err_code) {
   20ba2:	f300 80a1 	bgt.w	20ce8 <nrf_modem_os_errno_set+0x14c>
   20ba6:	2800      	cmp	r0, #0
   20ba8:	dc1e      	bgt.n	20be8 <nrf_modem_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by nrf_modem_lib!", err_code);
   20baa:	f240 135f 	movw	r3, #351	; 0x15f
   20bae:	4abc      	ldr	r2, [pc, #752]	; (20ea0 <nrf_modem_os_errno_set+0x304>)
   20bb0:	49bc      	ldr	r1, [pc, #752]	; (20ea4 <nrf_modem_os_errno_set+0x308>)
   20bb2:	48bd      	ldr	r0, [pc, #756]	; (20ea8 <nrf_modem_os_errno_set+0x30c>)
   20bb4:	f00f f85c 	bl	2fc70 <printk>
   20bb8:	4621      	mov	r1, r4
   20bba:	48bc      	ldr	r0, [pc, #752]	; (20eac <nrf_modem_os_errno_set+0x310>)
   20bbc:	f00f f858 	bl	2fc70 <printk>
   20bc0:	f240 115f 	movw	r1, #351	; 0x15f
   20bc4:	48b6      	ldr	r0, [pc, #728]	; (20ea0 <nrf_modem_os_errno_set+0x304>)
   20bc6:	f00f fb39 	bl	3023c <assert_post_action>
   20bca:	4bb9      	ldr	r3, [pc, #740]	; (20eb0 <nrf_modem_os_errno_set+0x314>)
   20bcc:	4ab9      	ldr	r2, [pc, #740]	; (20eb4 <nrf_modem_os_errno_set+0x318>)
		LOG_ERR("Untranslated errno %d set by nrf_modem_lib!", err_code);
   20bce:	4621      	mov	r1, r4
   20bd0:	1ad2      	subs	r2, r2, r3
   20bd2:	08d2      	lsrs	r2, r2, #3
   20bd4:	0192      	lsls	r2, r2, #6
   20bd6:	48b8      	ldr	r0, [pc, #736]	; (20eb8 <nrf_modem_os_errno_set+0x31c>)
   20bd8:	f042 0201 	orr.w	r2, r2, #1
   20bdc:	f00f fb89 	bl	302f2 <log_1>
		errno = 0xBAADBAAD;
   20be0:	f011 fc48 	bl	32474 <__errno>
   20be4:	4bb5      	ldr	r3, [pc, #724]	; (20ebc <nrf_modem_os_errno_set+0x320>)
   20be6:	e0c0      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
   20be8:	1e43      	subs	r3, r0, #1
   20bea:	2b3c      	cmp	r3, #60	; 0x3c
   20bec:	d8dd      	bhi.n	20baa <nrf_modem_os_errno_set+0xe>
   20bee:	a201      	add	r2, pc, #4	; (adr r2, 20bf4 <nrf_modem_os_errno_set+0x58>)
   20bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20bf4:	00020d65 	.word	0x00020d65
   20bf8:	00020d6f 	.word	0x00020d6f
   20bfc:	00020bab 	.word	0x00020bab
   20c00:	00020bab 	.word	0x00020bab
   20c04:	00020d77 	.word	0x00020d77
   20c08:	00020bab 	.word	0x00020bab
   20c0c:	00020bab 	.word	0x00020bab
   20c10:	00020d7f 	.word	0x00020d7f
   20c14:	00020d87 	.word	0x00020d87
   20c18:	00020bab 	.word	0x00020bab
   20c1c:	00020bab 	.word	0x00020bab
   20c20:	00020d8f 	.word	0x00020d8f
   20c24:	00020d97 	.word	0x00020d97
   20c28:	00020d9f 	.word	0x00020d9f
   20c2c:	00020bab 	.word	0x00020bab
   20c30:	00020bab 	.word	0x00020bab
   20c34:	00020bab 	.word	0x00020bab
   20c38:	00020bab 	.word	0x00020bab
   20c3c:	00020bab 	.word	0x00020bab
   20c40:	00020bab 	.word	0x00020bab
   20c44:	00020bab 	.word	0x00020bab
   20c48:	00020da7 	.word	0x00020da7
   20c4c:	00020bab 	.word	0x00020bab
   20c50:	00020daf 	.word	0x00020daf
   20c54:	00020bab 	.word	0x00020bab
   20c58:	00020bab 	.word	0x00020bab
   20c5c:	00020bab 	.word	0x00020bab
   20c60:	00020bab 	.word	0x00020bab
   20c64:	00020bab 	.word	0x00020bab
   20c68:	00020bab 	.word	0x00020bab
   20c6c:	00020bab 	.word	0x00020bab
   20c70:	00020bab 	.word	0x00020bab
   20c74:	00020bab 	.word	0x00020bab
   20c78:	00020bab 	.word	0x00020bab
   20c7c:	00020db7 	.word	0x00020db7
   20c80:	00020bab 	.word	0x00020bab
   20c84:	00020dbf 	.word	0x00020dbf
   20c88:	00020bab 	.word	0x00020bab
   20c8c:	00020bab 	.word	0x00020bab
   20c90:	00020e8f 	.word	0x00020e8f
   20c94:	00020dc7 	.word	0x00020dc7
   20c98:	00020dcf 	.word	0x00020dcf
   20c9c:	00020dd7 	.word	0x00020dd7
   20ca0:	00020ddf 	.word	0x00020ddf
   20ca4:	00020de7 	.word	0x00020de7
   20ca8:	00020bab 	.word	0x00020bab
   20cac:	00020def 	.word	0x00020def
   20cb0:	00020df7 	.word	0x00020df7
   20cb4:	00020bab 	.word	0x00020bab
   20cb8:	00020dff 	.word	0x00020dff
   20cbc:	00020e07 	.word	0x00020e07
   20cc0:	00020e0f 	.word	0x00020e0f
   20cc4:	00020e97 	.word	0x00020e97
   20cc8:	00020e17 	.word	0x00020e17
   20ccc:	00020bab 	.word	0x00020bab
   20cd0:	00020e1f 	.word	0x00020e1f
   20cd4:	00020e27 	.word	0x00020e27
   20cd8:	00020bab 	.word	0x00020bab
   20cdc:	00020bab 	.word	0x00020bab
   20ce0:	00020e2f 	.word	0x00020e2f
   20ce4:	00020e37 	.word	0x00020e37
	switch (err_code) {
   20ce8:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   20cec:	2b18      	cmp	r3, #24
   20cee:	f63f af5c 	bhi.w	20baa <nrf_modem_os_errno_set+0xe>
   20cf2:	2b18      	cmp	r3, #24
   20cf4:	f63f af59 	bhi.w	20baa <nrf_modem_os_errno_set+0xe>
   20cf8:	a201      	add	r2, pc, #4	; (adr r2, 20d00 <nrf_modem_os_errno_set+0x164>)
   20cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20cfe:	bf00      	nop
   20d00:	00020e3f 	.word	0x00020e3f
   20d04:	00020bab 	.word	0x00020bab
   20d08:	00020bab 	.word	0x00020bab
   20d0c:	00020bab 	.word	0x00020bab
   20d10:	00020bab 	.word	0x00020bab
   20d14:	00020bab 	.word	0x00020bab
   20d18:	00020bab 	.word	0x00020bab
   20d1c:	00020e47 	.word	0x00020e47
   20d20:	00020bab 	.word	0x00020bab
   20d24:	00020e57 	.word	0x00020e57
   20d28:	00020e4f 	.word	0x00020e4f
   20d2c:	00020bab 	.word	0x00020bab
   20d30:	00020bab 	.word	0x00020bab
   20d34:	00020bab 	.word	0x00020bab
   20d38:	00020bab 	.word	0x00020bab
   20d3c:	00020bab 	.word	0x00020bab
   20d40:	00020bab 	.word	0x00020bab
   20d44:	00020bab 	.word	0x00020bab
   20d48:	00020bab 	.word	0x00020bab
   20d4c:	00020bab 	.word	0x00020bab
   20d50:	00020e5f 	.word	0x00020e5f
   20d54:	00020e67 	.word	0x00020e67
   20d58:	00020e71 	.word	0x00020e71
   20d5c:	00020e7b 	.word	0x00020e7b
   20d60:	00020e85 	.word	0x00020e85
		errno = EPERM;
   20d64:	f011 fb86 	bl	32474 <__errno>
   20d68:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   20d6a:	6003      	str	r3, [r0, #0]
}
   20d6c:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   20d6e:	f011 fb81 	bl	32474 <__errno>
   20d72:	2302      	movs	r3, #2
   20d74:	e7f9      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EIO;
   20d76:	f011 fb7d 	bl	32474 <__errno>
   20d7a:	2305      	movs	r3, #5
   20d7c:	e7f5      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ENOEXEC;
   20d7e:	f011 fb79 	bl	32474 <__errno>
   20d82:	2308      	movs	r3, #8
   20d84:	e7f1      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EBADF;
   20d86:	f011 fb75 	bl	32474 <__errno>
   20d8a:	2309      	movs	r3, #9
   20d8c:	e7ed      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ENOMEM;
   20d8e:	f011 fb71 	bl	32474 <__errno>
   20d92:	230c      	movs	r3, #12
   20d94:	e7e9      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EACCES;
   20d96:	f011 fb6d 	bl	32474 <__errno>
   20d9a:	230d      	movs	r3, #13
   20d9c:	e7e5      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EFAULT;
   20d9e:	f011 fb69 	bl	32474 <__errno>
   20da2:	230e      	movs	r3, #14
   20da4:	e7e1      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EINVAL;
   20da6:	f011 fb65 	bl	32474 <__errno>
   20daa:	2316      	movs	r3, #22
   20dac:	e7dd      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EMFILE;
   20dae:	f011 fb61 	bl	32474 <__errno>
   20db2:	2318      	movs	r3, #24
   20db4:	e7d9      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EAGAIN;
   20db6:	f011 fb5d 	bl	32474 <__errno>
   20dba:	230b      	movs	r3, #11
   20dbc:	e7d5      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EDOM;
   20dbe:	f011 fb59 	bl	32474 <__errno>
   20dc2:	2321      	movs	r3, #33	; 0x21
   20dc4:	e7d1      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EPROTOTYPE;
   20dc6:	f011 fb55 	bl	32474 <__errno>
   20dca:	236b      	movs	r3, #107	; 0x6b
   20dcc:	e7cd      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ENOPROTOOPT;
   20dce:	f011 fb51 	bl	32474 <__errno>
   20dd2:	236d      	movs	r3, #109	; 0x6d
   20dd4:	e7c9      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EPROTONOSUPPORT;
   20dd6:	f011 fb4d 	bl	32474 <__errno>
   20dda:	237b      	movs	r3, #123	; 0x7b
   20ddc:	e7c5      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ESOCKTNOSUPPORT;
   20dde:	f011 fb49 	bl	32474 <__errno>
   20de2:	237c      	movs	r3, #124	; 0x7c
   20de4:	e7c1      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EOPNOTSUPP;
   20de6:	f011 fb45 	bl	32474 <__errno>
   20dea:	235f      	movs	r3, #95	; 0x5f
   20dec:	e7bd      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EAFNOSUPPORT;
   20dee:	f011 fb41 	bl	32474 <__errno>
   20df2:	236a      	movs	r3, #106	; 0x6a
   20df4:	e7b9      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EADDRINUSE;
   20df6:	f011 fb3d 	bl	32474 <__errno>
   20dfa:	2370      	movs	r3, #112	; 0x70
   20dfc:	e7b5      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ENETDOWN;
   20dfe:	f011 fb39 	bl	32474 <__errno>
   20e02:	2373      	movs	r3, #115	; 0x73
   20e04:	e7b1      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ENETUNREACH;
   20e06:	f011 fb35 	bl	32474 <__errno>
   20e0a:	2372      	movs	r3, #114	; 0x72
   20e0c:	e7ad      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ENETRESET;
   20e0e:	f011 fb31 	bl	32474 <__errno>
   20e12:	237e      	movs	r3, #126	; 0x7e
   20e14:	e7a9      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNRESET;
   20e16:	f011 fb2d 	bl	32474 <__errno>
   20e1a:	2368      	movs	r3, #104	; 0x68
   20e1c:	e7a5      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EISCONN;
   20e1e:	f011 fb29 	bl	32474 <__errno>
   20e22:	237f      	movs	r3, #127	; 0x7f
   20e24:	e7a1      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ENOTCONN;
   20e26:	f011 fb25 	bl	32474 <__errno>
   20e2a:	2380      	movs	r3, #128	; 0x80
   20e2c:	e79d      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ETIMEDOUT;
   20e2e:	f011 fb21 	bl	32474 <__errno>
   20e32:	2374      	movs	r3, #116	; 0x74
   20e34:	e799      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNREFUSED;
   20e36:	f011 fb1d 	bl	32474 <__errno>
   20e3a:	236f      	movs	r3, #111	; 0x6f
   20e3c:	e795      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ENOBUFS;
   20e3e:	f011 fb19 	bl	32474 <__errno>
   20e42:	2369      	movs	r3, #105	; 0x69
   20e44:	e791      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EHOSTDOWN;
   20e46:	f011 fb15 	bl	32474 <__errno>
   20e4a:	2375      	movs	r3, #117	; 0x75
   20e4c:	e78d      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EINPROGRESS;
   20e4e:	f011 fb11 	bl	32474 <__errno>
   20e52:	2377      	movs	r3, #119	; 0x77
   20e54:	e789      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EALREADY;
   20e56:	f011 fb0d 	bl	32474 <__errno>
   20e5a:	2378      	movs	r3, #120	; 0x78
   20e5c:	e785      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ECANCELED;
   20e5e:	f011 fb09 	bl	32474 <__errno>
   20e62:	238c      	movs	r3, #140	; 0x8c
   20e64:	e781      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ENOKEY;
   20e66:	f011 fb05 	bl	32474 <__errno>
   20e6a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   20e6e:	e77c      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYEXPIRED;
   20e70:	f011 fb00 	bl	32474 <__errno>
   20e74:	f240 73d2 	movw	r3, #2002	; 0x7d2
   20e78:	e777      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYREVOKED;
   20e7a:	f011 fafb 	bl	32474 <__errno>
   20e7e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   20e82:	e772      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYREJECTED;
   20e84:	f011 faf6 	bl	32474 <__errno>
   20e88:	f240 73d4 	movw	r3, #2004	; 0x7d4
   20e8c:	e76d      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = EMSGSIZE;
   20e8e:	f011 faf1 	bl	32474 <__errno>
   20e92:	237a      	movs	r3, #122	; 0x7a
   20e94:	e769      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNABORTED;
   20e96:	f011 faed 	bl	32474 <__errno>
   20e9a:	2371      	movs	r3, #113	; 0x71
   20e9c:	e765      	b.n	20d6a <nrf_modem_os_errno_set+0x1ce>
   20e9e:	bf00      	nop
   20ea0:	0003d898 	.word	0x0003d898
   20ea4:	00040e81 	.word	0x00040e81
   20ea8:	0003a56b 	.word	0x0003a56b
   20eac:	0003d8c9 	.word	0x0003d8c9
   20eb0:	000387c0 	.word	0x000387c0
   20eb4:	000388c8 	.word	0x000388c8
   20eb8:	0003d8f7 	.word	0x0003d8f7
   20ebc:	baadbaad 	.word	0xbaadbaad

00020ec0 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20ec4:	4b01      	ldr	r3, [pc, #4]	; (20ecc <nrf_modem_os_application_irq_set+0xc>)
   20ec6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   20eca:	4770      	bx	lr
   20ecc:	e000e100 	.word	0xe000e100

00020ed0 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20ed4:	4b01      	ldr	r3, [pc, #4]	; (20edc <nrf_modem_os_application_irq_clear+0xc>)
   20ed6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   20eda:	4770      	bx	lr
   20edc:	e000e100 	.word	0xe000e100

00020ee0 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20ee0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   20ee4:	4b01      	ldr	r3, [pc, #4]	; (20eec <nrf_modem_os_trace_irq_set+0xc>)
   20ee6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   20eea:	4770      	bx	lr
   20eec:	e000e100 	.word	0xe000e100

00020ef0 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20ef0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   20ef4:	4b01      	ldr	r3, [pc, #4]	; (20efc <nrf_modem_os_trace_irq_clear+0xc>)
   20ef6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   20efa:	4770      	bx	lr
   20efc:	e000e100 	.word	0xe000e100

00020f00 <nrf_modem_os_alloc>:
	nrfx_uarte_init(&uarte_inst, &config, NULL);
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   20f00:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   20f02:	2200      	movs	r2, #0
   20f04:	2300      	movs	r3, #0
   20f06:	4801      	ldr	r0, [pc, #4]	; (20f0c <nrf_modem_os_alloc+0xc>)
   20f08:	f016 ba5b 	b.w	373c2 <k_heap_alloc>
   20f0c:	20014e58 	.word	0x20014e58

00020f10 <nrf_modem_os_free>:
#endif
	return addr;
}

void nrf_modem_os_free(void *mem)
{
   20f10:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   20f12:	4801      	ldr	r0, [pc, #4]	; (20f18 <nrf_modem_os_free+0x8>)
   20f14:	f009 b9e0 	b.w	2a2d8 <k_heap_free>
   20f18:	20014e58 	.word	0x20014e58

00020f1c <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   20f1c:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   20f1e:	2200      	movs	r2, #0
   20f20:	2300      	movs	r3, #0
   20f22:	4801      	ldr	r0, [pc, #4]	; (20f28 <nrf_modem_os_shm_tx_alloc+0xc>)
   20f24:	f016 ba4d 	b.w	373c2 <k_heap_alloc>
   20f28:	20016754 	.word	0x20016754

00020f2c <nrf_modem_os_shm_tx_free>:
#endif
	return addr;
}

void nrf_modem_os_shm_tx_free(void *mem)
{
   20f2c:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   20f2e:	4801      	ldr	r0, [pc, #4]	; (20f34 <nrf_modem_os_shm_tx_free+0x8>)
   20f30:	f009 b9d2 	b.w	2a2d8 <k_heap_free>
   20f34:	20016754 	.word	0x20016754

00020f38 <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   20f38:	b510      	push	{r4, lr}
	list->head = NULL;
   20f3a:	2400      	movs	r4, #0
   20f3c:	4b0c      	ldr	r3, [pc, #48]	; (20f70 <nrf_modem_os_init+0x38>)
	list->tail = NULL;
   20f3e:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20f42:	4b0c      	ldr	r3, [pc, #48]	; (20f74 <nrf_modem_os_init+0x3c>)
   20f44:	e8d3 2fef 	ldaex	r2, [r3]
   20f48:	e8c3 4fe1 	stlex	r1, r4, [r3]
   20f4c:	2900      	cmp	r1, #0
   20f4e:	d1f9      	bne.n	20f44 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   20f50:	f014 fa1e 	bl	35390 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
   20f54:	f014 fa11 	bl	3537a <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   20f58:	4b07      	ldr	r3, [pc, #28]	; (20f78 <nrf_modem_os_init+0x40>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   20f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   20f5e:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   20f60:	4b06      	ldr	r3, [pc, #24]	; (20f7c <nrf_modem_os_init+0x44>)
	k_heap_init(&shmem_heap,
   20f62:	4907      	ldr	r1, [pc, #28]	; (20f80 <nrf_modem_os_init+0x48>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   20f64:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   20f66:	4807      	ldr	r0, [pc, #28]	; (20f84 <nrf_modem_os_init+0x4c>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   20f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   20f6c:	f016 ba21 	b.w	373b2 <k_heap_init>
   20f70:	2001676c 	.word	0x2001676c
   20f74:	2001674c 	.word	0x2001674c
   20f78:	20016348 	.word	0x20016348
   20f7c:	20016750 	.word	0x20016750
   20f80:	200104e8 	.word	0x200104e8
   20f84:	20016754 	.word	0x20016754

00020f88 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   20f88:	f240 2302 	movw	r3, #514	; 0x202
   20f8c:	4298      	cmp	r0, r3
   20f8e:	f000 80db 	beq.w	21148 <z_to_nrf_optname+0x1c0>
   20f92:	dc07      	bgt.n	20fa4 <z_to_nrf_optname+0x1c>
   20f94:	2801      	cmp	r0, #1
   20f96:	d05b      	beq.n	21050 <z_to_nrf_optname+0xc8>
   20f98:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   20f9c:	d034      	beq.n	21008 <z_to_nrf_optname+0x80>
   20f9e:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   20fa2:	4770      	bx	lr
	switch (z_in_level) {
   20fa4:	f240 2303 	movw	r3, #515	; 0x203
   20fa8:	4298      	cmp	r0, r3
   20faa:	d1f8      	bne.n	20f9e <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   20fac:	3901      	subs	r1, #1
   20fae:	2913      	cmp	r1, #19
   20fb0:	d8f5      	bhi.n	20f9e <z_to_nrf_optname+0x16>
   20fb2:	a301      	add	r3, pc, #4	; (adr r3, 20fb8 <z_to_nrf_optname+0x30>)
   20fb4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   20fb8:	00021157 	.word	0x00021157
   20fbc:	00021131 	.word	0x00021131
   20fc0:	00021135 	.word	0x00021135
   20fc4:	00021061 	.word	0x00021061
   20fc8:	00021139 	.word	0x00021139
   20fcc:	0002113d 	.word	0x0002113d
   20fd0:	00021141 	.word	0x00021141
   20fd4:	00020f9f 	.word	0x00020f9f
   20fd8:	00020f9f 	.word	0x00020f9f
   20fdc:	00020f9f 	.word	0x00020f9f
   20fe0:	00020f9f 	.word	0x00020f9f
   20fe4:	00020f9f 	.word	0x00020f9f
   20fe8:	00020f9f 	.word	0x00020f9f
   20fec:	00020f9f 	.word	0x00020f9f
   20ff0:	00020f9f 	.word	0x00020f9f
   20ff4:	00020f9f 	.word	0x00020f9f
   20ff8:	00020f9f 	.word	0x00020f9f
   20ffc:	00020f9f 	.word	0x00020f9f
   21000:	00020f9f 	.word	0x00020f9f
   21004:	00021145 	.word	0x00021145
		switch (z_in_optname) {
   21008:	3901      	subs	r1, #1
   2100a:	290b      	cmp	r1, #11
   2100c:	d8c7      	bhi.n	20f9e <z_to_nrf_optname+0x16>
   2100e:	a301      	add	r3, pc, #4	; (adr r3, 21014 <z_to_nrf_optname+0x8c>)
   21010:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   21014:	00021131 	.word	0x00021131
   21018:	00021139 	.word	0x00021139
   2101c:	0002113d 	.word	0x0002113d
   21020:	00021141 	.word	0x00021141
   21024:	00021061 	.word	0x00021061
   21028:	00021157 	.word	0x00021157
   2102c:	00020f9f 	.word	0x00020f9f
   21030:	00020f9f 	.word	0x00020f9f
   21034:	00020f9f 	.word	0x00020f9f
   21038:	00021135 	.word	0x00021135
   2103c:	00021045 	.word	0x00021045
   21040:	0002104d 	.word	0x0002104d
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   21044:	2309      	movs	r3, #9
	int retval = 0;
   21046:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   21048:	6013      	str	r3, [r2, #0]
			break;
   2104a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   2104c:	2308      	movs	r3, #8
   2104e:	e7fa      	b.n	21046 <z_to_nrf_optname+0xbe>
		switch (z_in_optname) {
   21050:	2937      	cmp	r1, #55	; 0x37
   21052:	dca4      	bgt.n	20f9e <z_to_nrf_optname+0x16>
   21054:	2913      	cmp	r1, #19
   21056:	dc05      	bgt.n	21064 <z_to_nrf_optname+0xdc>
   21058:	2902      	cmp	r1, #2
   2105a:	d055      	beq.n	21108 <z_to_nrf_optname+0x180>
   2105c:	2904      	cmp	r1, #4
   2105e:	d19e      	bne.n	20f9e <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   21060:	2304      	movs	r3, #4
   21062:	e7f0      	b.n	21046 <z_to_nrf_optname+0xbe>
   21064:	3914      	subs	r1, #20
   21066:	2923      	cmp	r1, #35	; 0x23
   21068:	d899      	bhi.n	20f9e <z_to_nrf_optname+0x16>
   2106a:	a301      	add	r3, pc, #4	; (adr r3, 21070 <z_to_nrf_optname+0xe8>)
   2106c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   21070:	00021145 	.word	0x00021145
   21074:	00021101 	.word	0x00021101
   21078:	00020f9f 	.word	0x00020f9f
   2107c:	00020f9f 	.word	0x00020f9f
   21080:	00020f9f 	.word	0x00020f9f
   21084:	00021105 	.word	0x00021105
   21088:	00020f9f 	.word	0x00020f9f
   2108c:	00020f9f 	.word	0x00020f9f
   21090:	00020f9f 	.word	0x00020f9f
   21094:	00020f9f 	.word	0x00020f9f
   21098:	0002110d 	.word	0x0002110d
   2109c:	00021111 	.word	0x00021111
   210a0:	00021115 	.word	0x00021115
   210a4:	00020f9f 	.word	0x00020f9f
   210a8:	00020f9f 	.word	0x00020f9f
   210ac:	00020f9f 	.word	0x00020f9f
   210b0:	00020f9f 	.word	0x00020f9f
   210b4:	00020f9f 	.word	0x00020f9f
   210b8:	00020f9f 	.word	0x00020f9f
   210bc:	00020f9f 	.word	0x00020f9f
   210c0:	00020f9f 	.word	0x00020f9f
   210c4:	00020f9f 	.word	0x00020f9f
   210c8:	00020f9f 	.word	0x00020f9f
   210cc:	00020f9f 	.word	0x00020f9f
   210d0:	00020f9f 	.word	0x00020f9f
   210d4:	00020f9f 	.word	0x00020f9f
   210d8:	00020f9f 	.word	0x00020f9f
   210dc:	00020f9f 	.word	0x00020f9f
   210e0:	00020f9f 	.word	0x00020f9f
   210e4:	00020f9f 	.word	0x00020f9f
   210e8:	0002111d 	.word	0x0002111d
   210ec:	00021121 	.word	0x00021121
   210f0:	00021125 	.word	0x00021125
   210f4:	00021129 	.word	0x00021129
   210f8:	0002112d 	.word	0x0002112d
   210fc:	00021119 	.word	0x00021119
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   21100:	2315      	movs	r3, #21
   21102:	e7a0      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   21104:	2319      	movs	r3, #25
   21106:	e79e      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   21108:	2328      	movs	r3, #40	; 0x28
   2110a:	e79c      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   2110c:	231e      	movs	r3, #30
   2110e:	e79a      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   21110:	231f      	movs	r3, #31
   21112:	e798      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   21114:	2320      	movs	r3, #32
   21116:	e796      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   21118:	2337      	movs	r3, #55	; 0x37
   2111a:	e794      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   2111c:	2332      	movs	r3, #50	; 0x32
   2111e:	e792      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   21120:	2333      	movs	r3, #51	; 0x33
   21122:	e790      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   21124:	2334      	movs	r3, #52	; 0x34
   21126:	e78e      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   21128:	2335      	movs	r3, #53	; 0x35
   2112a:	e78c      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   2112c:	2336      	movs	r3, #54	; 0x36
   2112e:	e78a      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   21130:	2302      	movs	r3, #2
   21132:	e788      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   21134:	2303      	movs	r3, #3
   21136:	e786      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   21138:	2305      	movs	r3, #5
   2113a:	e784      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   2113c:	2306      	movs	r3, #6
   2113e:	e782      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   21140:	2307      	movs	r3, #7
   21142:	e780      	b.n	21046 <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   21144:	2314      	movs	r3, #20
   21146:	e77e      	b.n	21046 <z_to_nrf_optname+0xbe>
		switch (z_in_optname) {
   21148:	2902      	cmp	r1, #2
   2114a:	d0f1      	beq.n	21130 <z_to_nrf_optname+0x1a8>
   2114c:	2903      	cmp	r1, #3
   2114e:	d0f1      	beq.n	21134 <z_to_nrf_optname+0x1ac>
   21150:	2901      	cmp	r1, #1
   21152:	f47f af24 	bne.w	20f9e <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_FW_VERSION;
   21156:	2301      	movs	r3, #1
   21158:	e775      	b.n	21046 <z_to_nrf_optname+0xbe>
   2115a:	bf00      	nop

0002115c <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   2115c:	f04f 32ff 	mov.w	r2, #4294967295
   21160:	4b05      	ldr	r3, [pc, #20]	; (21178 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   21162:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   21164:	601a      	str	r2, [r3, #0]
   21166:	609a      	str	r2, [r3, #8]
   21168:	611a      	str	r2, [r3, #16]
   2116a:	619a      	str	r2, [r3, #24]
   2116c:	621a      	str	r2, [r3, #32]
   2116e:	629a      	str	r2, [r3, #40]	; 0x28
   21170:	631a      	str	r2, [r3, #48]	; 0x30
   21172:	639a      	str	r2, [r3, #56]	; 0x38
}
   21174:	4770      	bx	lr
   21176:	bf00      	nop
   21178:	200167cc 	.word	0x200167cc

0002117c <nrf91_socket_offload_ioctl>:
{
   2117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21180:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   21184:	b091      	sub	sp, #68	; 0x44
   21186:	2b03      	cmp	r3, #3
   21188:	d878      	bhi.n	2127c <nrf91_socket_offload_ioctl+0x100>
   2118a:	e8df f003 	tbb	[pc, r3]
   2118e:	0295      	.short	0x0295
   21190:	7308      	.short	0x7308
		return 0;
   21192:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   21196:	4620      	mov	r0, r4
   21198:	b011      	add	sp, #68	; 0x44
   2119a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   2119e:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   211a2:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   211a6:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   211a8:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   211ac:	4668      	mov	r0, sp
   211ae:	2240      	movs	r2, #64	; 0x40
   211b0:	f016 fb07 	bl	377c2 <memset>
	for (int i = 0; i < nfds; i++) {
   211b4:	466e      	mov	r6, sp
   211b6:	464d      	mov	r5, r9
   211b8:	464f      	mov	r7, r9
	int retval = 0;
   211ba:	4654      	mov	r4, sl
		tmp[i].events = 0;
   211bc:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   211be:	4940      	ldr	r1, [pc, #256]	; (212c0 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   211c0:	45d0      	cmp	r8, sl
   211c2:	dc32      	bgt.n	2122a <nrf91_socket_offload_ioctl+0xae>
	if (retval > 0) {
   211c4:	2c00      	cmp	r4, #0
   211c6:	dce6      	bgt.n	21196 <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   211c8:	465a      	mov	r2, fp
   211ca:	4641      	mov	r1, r8
   211cc:	4668      	mov	r0, sp
   211ce:	f016 f8b3 	bl	37338 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   211d2:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   211d4:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   211d6:	4598      	cmp	r8, r3
   211d8:	dddd      	ble.n	21196 <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   211da:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   211de:	2a00      	cmp	r2, #0
   211e0:	db20      	blt.n	21224 <nrf91_socket_offload_ioctl+0xa8>
		if (tmp[i].revents & NRF_POLLIN) {
   211e2:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   211e6:	88d2      	ldrh	r2, [r2, #6]
   211e8:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   211ea:	bf42      	ittt	mi
   211ec:	88e9      	ldrhmi	r1, [r5, #6]
   211ee:	f041 0101 	orrmi.w	r1, r1, #1
   211f2:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   211f4:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   211f6:	bf42      	ittt	mi
   211f8:	88e9      	ldrhmi	r1, [r5, #6]
   211fa:	f041 0104 	orrmi.w	r1, r1, #4
   211fe:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   21200:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   21202:	bf42      	ittt	mi
   21204:	88e9      	ldrhmi	r1, [r5, #6]
   21206:	f041 0108 	orrmi.w	r1, r1, #8
   2120a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   2120c:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   2120e:	bf42      	ittt	mi
   21210:	88e9      	ldrhmi	r1, [r5, #6]
   21212:	f041 0120 	orrmi.w	r1, r1, #32
   21216:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   21218:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   2121a:	bf42      	ittt	mi
   2121c:	88ea      	ldrhmi	r2, [r5, #6]
   2121e:	f042 0210 	orrmi.w	r2, r2, #16
   21222:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   21224:	3301      	adds	r3, #1
   21226:	3508      	adds	r5, #8
   21228:	e7d5      	b.n	211d6 <nrf91_socket_offload_ioctl+0x5a>
		if (fds[i].fd < 0) {
   2122a:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   2122c:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   2122e:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   21230:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   21232:	da05      	bge.n	21240 <nrf91_socket_offload_ioctl+0xc4>
			tmp[i].fd = fds[i].fd;
   21234:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   21236:	f10a 0a01 	add.w	sl, sl, #1
   2123a:	3608      	adds	r6, #8
   2123c:	3708      	adds	r7, #8
   2123e:	e7bf      	b.n	211c0 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   21240:	2286      	movs	r2, #134	; 0x86
   21242:	f7f2 f98d 	bl	13560 <z_get_fd_obj>
			if (obj != NULL) {
   21246:	2300      	movs	r3, #0
   21248:	491d      	ldr	r1, [pc, #116]	; (212c0 <nrf91_socket_offload_ioctl+0x144>)
   2124a:	b178      	cbz	r0, 2126c <nrf91_socket_offload_ioctl+0xf0>
				tmp[i].fd = OBJ_TO_SD(obj);
   2124c:	6802      	ldr	r2, [r0, #0]
   2124e:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   21250:	88b8      	ldrh	r0, [r7, #4]
   21252:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   21254:	bf42      	ittt	mi
   21256:	88b2      	ldrhmi	r2, [r6, #4]
   21258:	f042 0201 	orrmi.w	r2, r2, #1
   2125c:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   2125e:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   21260:	bf42      	ittt	mi
   21262:	88b2      	ldrhmi	r2, [r6, #4]
   21264:	f042 0202 	orrmi.w	r2, r2, #2
   21268:	80b2      	strhmi	r2, [r6, #4]
   2126a:	e7e4      	b.n	21236 <nrf91_socket_offload_ioctl+0xba>
				fds[i].revents = POLLNVAL;
   2126c:	2220      	movs	r2, #32
				retval++;
   2126e:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   21270:	80fa      	strh	r2, [r7, #6]
				retval++;
   21272:	e7ed      	b.n	21250 <nrf91_socket_offload_ioctl+0xd4>
		ctx->lock = va_arg(args, struct k_mutex *);
   21274:	6813      	ldr	r3, [r2, #0]
		return 0;
   21276:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   21278:	6043      	str	r3, [r0, #4]
		return 0;
   2127a:	e78c      	b.n	21196 <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   2127c:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   2127e:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   21280:	d00b      	beq.n	2129a <nrf91_socket_offload_ioctl+0x11e>
   21282:	2904      	cmp	r1, #4
   21284:	d111      	bne.n	212aa <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   21286:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   21288:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   2128c:	d10d      	bne.n	212aa <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   2128e:	2101      	movs	r1, #1
   21290:	1392      	asrs	r2, r2, #14
   21292:	f016 f853 	bl	3733c <nrf_fcntl>
   21296:	4604      	mov	r4, r0
		break;
   21298:	e77d      	b.n	21196 <nrf91_socket_offload_ioctl+0x1a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   2129a:	2200      	movs	r2, #0
   2129c:	2102      	movs	r1, #2
   2129e:	f016 f84d 	bl	3733c <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   212a2:	0380      	lsls	r0, r0, #14
   212a4:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   212a8:	e775      	b.n	21196 <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   212aa:	f011 f8e3 	bl	32474 <__errno>
   212ae:	2316      	movs	r3, #22
	return retval;
   212b0:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   212b4:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   212b6:	e76e      	b.n	21196 <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   212b8:	f06f 0411 	mvn.w	r4, #17
   212bc:	e76b      	b.n	21196 <nrf91_socket_offload_ioctl+0x1a>
   212be:	bf00      	nop
   212c0:	00039398 	.word	0x00039398

000212c4 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   212c4:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   212c6:	4b03      	ldr	r3, [pc, #12]	; (212d4 <nrf91_socket_iface_init+0x10>)
   212c8:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   212ca:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   212cc:	4802      	ldr	r0, [pc, #8]	; (212d8 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   212ce:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   212d0:	f7f4 bd36 	b.w	15d40 <socket_offload_dns_register>
   212d4:	200167c8 	.word	0x200167c8
   212d8:	00039390 	.word	0x00039390

000212dc <nrf91_socket_offload_getaddrinfo>:
{
   212dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   212e0:	4614      	mov	r4, r2
   212e2:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   212e4:	2100      	movs	r1, #0
{
   212e6:	b093      	sub	sp, #76	; 0x4c
   212e8:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   212ea:	2220      	movs	r2, #32
   212ec:	a802      	add	r0, sp, #8
{
   212ee:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   212f0:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   212f2:	f016 fa66 	bl	377c2 <memset>
	if (hints != NULL) {
   212f6:	b194      	cbz	r4, 2131e <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   212f8:	4620      	mov	r0, r4
   212fa:	a902      	add	r1, sp, #8
   212fc:	f014 f923 	bl	35546 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   21300:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   21304:	f000 80e0 	beq.w	214c8 <nrf91_socket_offload_getaddrinfo+0x1ec>
		} else if (error == -EAFNOSUPPORT) {
   21308:	306a      	adds	r0, #106	; 0x6a
   2130a:	f000 80e0 	beq.w	214ce <nrf91_socket_offload_getaddrinfo+0x1f2>
		if (hints->ai_next != NULL) {
   2130e:	6820      	ldr	r0, [r4, #0]
   21310:	b120      	cbz	r0, 2131c <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   21312:	ac0a      	add	r4, sp, #40	; 0x28
   21314:	4621      	mov	r1, r4
   21316:	f014 f916 	bl	35546 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2131a:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2131c:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   2131e:	f04f 32ff 	mov.w	r2, #4294967295
   21322:	f04f 33ff 	mov.w	r3, #4294967295
   21326:	486b      	ldr	r0, [pc, #428]	; (214d4 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   21328:	f014 f9df 	bl	356ea <k_mutex_lock.constprop.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2132c:	4628      	mov	r0, r5
   2132e:	4622      	mov	r2, r4
   21330:	4631      	mov	r1, r6
   21332:	ab01      	add	r3, sp, #4
   21334:	f015 fffc 	bl	37330 <nrf_getaddrinfo>
	if (retval != 0) {
   21338:	4605      	mov	r5, r0
   2133a:	b318      	cbz	r0, 21384 <nrf91_socket_offload_getaddrinfo+0xa8>
	switch (nrf_error) {
   2133c:	282f      	cmp	r0, #47	; 0x2f
   2133e:	f000 80bd 	beq.w	214bc <nrf91_socket_offload_getaddrinfo+0x1e0>
   21342:	dc0f      	bgt.n	21364 <nrf91_socket_offload_getaddrinfo+0x88>
   21344:	280c      	cmp	r0, #12
   21346:	f000 80bc 	beq.w	214c2 <nrf91_socket_offload_getaddrinfo+0x1e6>
		return DNS_EAI_AGAIN;
   2134a:	2823      	cmp	r0, #35	; 0x23
   2134c:	bf14      	ite	ne
   2134e:	f06f 050a 	mvnne.w	r5, #10
   21352:	f06f 0502 	mvneq.w	r5, #2
	k_mutex_unlock(&getaddrinfo_lock);
   21356:	485f      	ldr	r0, [pc, #380]	; (214d4 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   21358:	f014 f885 	bl	35466 <k_mutex_unlock>
}
   2135c:	4628      	mov	r0, r5
   2135e:	b013      	add	sp, #76	; 0x4c
   21360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   21364:	2833      	cmp	r0, #51	; 0x33
   21366:	d006      	beq.n	21376 <nrf91_socket_offload_getaddrinfo+0x9a>
		return DNS_EAI_INPROGRESS;
   21368:	2873      	cmp	r0, #115	; 0x73
   2136a:	bf14      	ite	ne
   2136c:	f06f 050a 	mvnne.w	r5, #10
   21370:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   21374:	e7ef      	b.n	21356 <nrf91_socket_offload_getaddrinfo+0x7a>
		errno = ENETUNREACH;
   21376:	f011 f87d 	bl	32474 <__errno>
   2137a:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   2137c:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   21380:	6003      	str	r3, [r0, #0]
   21382:	e7e8      	b.n	21356 <nrf91_socket_offload_getaddrinfo+0x7a>
	struct zsock_addrinfo *latest_z_res = NULL;
   21384:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   21386:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   21388:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2138a:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2138c:	b91e      	cbnz	r6, 21396 <nrf91_socket_offload_getaddrinfo+0xba>
	nrf_freeaddrinfo(nrf_res);
   2138e:	9801      	ldr	r0, [sp, #4]
   21390:	f015 ffd0 	bl	37334 <nrf_freeaddrinfo>
   21394:	e7df      	b.n	21356 <nrf91_socket_offload_getaddrinfo+0x7a>
					k_malloc(sizeof(struct zsock_addrinfo));
   21396:	2050      	movs	r0, #80	; 0x50
   21398:	f016 f9b9 	bl	3770e <k_malloc>
		if (next_z_res == NULL) {
   2139c:	4604      	mov	r4, r0
   2139e:	2800      	cmp	r0, #0
   213a0:	f000 8081 	beq.w	214a6 <nrf91_socket_offload_getaddrinfo+0x1ca>
	family = nrf_to_z_family(nrf_in->ai_family);
   213a4:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   213a6:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   213a8:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   213aa:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   213ae:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   213b2:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   213b6:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   213b8:	dc0b      	bgt.n	213d2 <nrf91_socket_offload_getaddrinfo+0xf6>
   213ba:	2900      	cmp	r1, #0
   213bc:	db0b      	blt.n	213d6 <nrf91_socket_offload_getaddrinfo+0xfa>
   213be:	290a      	cmp	r1, #10
   213c0:	d809      	bhi.n	213d6 <nrf91_socket_offload_getaddrinfo+0xfa>
   213c2:	e8df f001 	tbb	[pc, r1]
   213c6:	262c      	.short	0x262c
   213c8:	0e08082a 	.word	0x0e08082a
   213cc:	08080808 	.word	0x08080808
   213d0:	28          	.byte	0x28
   213d1:	00          	.byte	0x00
   213d2:	2966      	cmp	r1, #102	; 0x66
   213d4:	d023      	beq.n	2141e <nrf91_socket_offload_getaddrinfo+0x142>
			k_free(next_z_res);
   213d6:	4620      	mov	r0, r4
   213d8:	f016 f992 	bl	37700 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   213dc:	f06f 0508 	mvn.w	r5, #8
   213e0:	e063      	b.n	214aa <nrf91_socket_offload_getaddrinfo+0x1ce>
		return AF_PACKET;
   213e2:	2303      	movs	r3, #3
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   213e4:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   213e6:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   213e8:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   213ec:	d043      	beq.n	21476 <nrf91_socket_offload_getaddrinfo+0x19a>
   213ee:	dc1e      	bgt.n	2142e <nrf91_socket_offload_getaddrinfo+0x152>
   213f0:	2a02      	cmp	r2, #2
   213f2:	d044      	beq.n	2147e <nrf91_socket_offload_getaddrinfo+0x1a2>
   213f4:	dc15      	bgt.n	21422 <nrf91_socket_offload_getaddrinfo+0x146>
   213f6:	b332      	cbz	r2, 21446 <nrf91_socket_offload_getaddrinfo+0x16a>
   213f8:	2a01      	cmp	r2, #1
   213fa:	d042      	beq.n	21482 <nrf91_socket_offload_getaddrinfo+0x1a6>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   213fc:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   21400:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   21402:	2300      	movs	r3, #0
   21404:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   21406:	4620      	mov	r0, r4
   21408:	f016 f97a 	bl	37700 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2140c:	f06f 0506 	mvn.w	r5, #6
   21410:	e04b      	b.n	214aa <nrf91_socket_offload_getaddrinfo+0x1ce>
		return AF_LOCAL;
   21412:	2306      	movs	r3, #6
   21414:	e7e6      	b.n	213e4 <nrf91_socket_offload_getaddrinfo+0x108>
		return AF_INET6;
   21416:	2302      	movs	r3, #2
   21418:	e7e4      	b.n	213e4 <nrf91_socket_offload_getaddrinfo+0x108>
	switch (nrf_family) {
   2141a:	2301      	movs	r3, #1
   2141c:	e7e2      	b.n	213e4 <nrf91_socket_offload_getaddrinfo+0x108>
		return AF_LTE;
   2141e:	460b      	mov	r3, r1
   21420:	e7e0      	b.n	213e4 <nrf91_socket_offload_getaddrinfo+0x108>
	switch (proto) {
   21422:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   21426:	d1e9      	bne.n	213fc <nrf91_socket_offload_getaddrinfo+0x120>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   21428:	f44f 7381 	mov.w	r3, #258	; 0x102
   2142c:	e025      	b.n	2147a <nrf91_socket_offload_getaddrinfo+0x19e>
	switch (proto) {
   2142e:	f240 2302 	movw	r3, #514	; 0x202
   21432:	429a      	cmp	r2, r3
   21434:	d007      	beq.n	21446 <nrf91_socket_offload_getaddrinfo+0x16a>
   21436:	f240 2303 	movw	r3, #515	; 0x203
   2143a:	429a      	cmp	r2, r3
   2143c:	d003      	beq.n	21446 <nrf91_socket_offload_getaddrinfo+0x16a>
   2143e:	f240 2301 	movw	r3, #513	; 0x201
   21442:	429a      	cmp	r2, r3
   21444:	d1da      	bne.n	213fc <nrf91_socket_offload_getaddrinfo+0x120>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   21446:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   21448:	2902      	cmp	r1, #2
   2144a:	d11c      	bne.n	21486 <nrf91_socket_offload_getaddrinfo+0x1aa>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2144c:	2008      	movs	r0, #8
   2144e:	f016 f95e 	bl	3770e <k_malloc>
   21452:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   21454:	b320      	cbz	r0, 214a0 <nrf91_socket_offload_getaddrinfo+0x1c4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   21456:	2308      	movs	r3, #8
   21458:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2145a:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2145c:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2145e:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   21460:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   21462:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   21464:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   21466:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   21468:	f1b8 0f00 	cmp.w	r8, #0
   2146c:	d123      	bne.n	214b6 <nrf91_socket_offload_getaddrinfo+0x1da>
			*res = next_z_res;
   2146e:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   21470:	46a0      	mov	r8, r4
   21472:	69f6      	ldr	r6, [r6, #28]
   21474:	e78a      	b.n	2138c <nrf91_socket_offload_getaddrinfo+0xb0>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   21476:	f240 1311 	movw	r3, #273	; 0x111
   2147a:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   2147c:	e7e4      	b.n	21448 <nrf91_socket_offload_getaddrinfo+0x16c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2147e:	2311      	movs	r3, #17
   21480:	e7fb      	b.n	2147a <nrf91_socket_offload_getaddrinfo+0x19e>
   21482:	2306      	movs	r3, #6
   21484:	e7f9      	b.n	2147a <nrf91_socket_offload_getaddrinfo+0x19e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   21486:	290a      	cmp	r1, #10
   21488:	d1bd      	bne.n	21406 <nrf91_socket_offload_getaddrinfo+0x12a>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2148a:	2018      	movs	r0, #24
   2148c:	f016 f93f 	bl	3770e <k_malloc>
   21490:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   21492:	b128      	cbz	r0, 214a0 <nrf91_socket_offload_getaddrinfo+0x1c4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   21494:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   21496:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   21498:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2149a:	f014 f87f 	bl	3559c <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2149e:	e7e3      	b.n	21468 <nrf91_socket_offload_getaddrinfo+0x18c>
			k_free(next_z_res);
   214a0:	4620      	mov	r0, r4
   214a2:	f016 f92d 	bl	37700 <k_free>
			retval = DNS_EAI_MEMORY;
   214a6:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   214aa:	6838      	ldr	r0, [r7, #0]
   214ac:	f014 f83e 	bl	3552c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   214b0:	2300      	movs	r3, #0
   214b2:	603b      	str	r3, [r7, #0]
   214b4:	e76b      	b.n	2138e <nrf91_socket_offload_getaddrinfo+0xb2>
			latest_z_res->ai_next = next_z_res;
   214b6:	f8c8 4000 	str.w	r4, [r8]
   214ba:	e7d9      	b.n	21470 <nrf91_socket_offload_getaddrinfo+0x194>
		return DNS_EAI_NONAME;
   214bc:	f06f 0501 	mvn.w	r5, #1
   214c0:	e749      	b.n	21356 <nrf91_socket_offload_getaddrinfo+0x7a>
		return DNS_EAI_MEMORY;
   214c2:	f06f 0509 	mvn.w	r5, #9
   214c6:	e746      	b.n	21356 <nrf91_socket_offload_getaddrinfo+0x7a>
			return DNS_EAI_SOCKTYPE;
   214c8:	f06f 0506 	mvn.w	r5, #6
   214cc:	e746      	b.n	2135c <nrf91_socket_offload_getaddrinfo+0x80>
			return DNS_EAI_ADDRFAMILY;
   214ce:	f06f 0508 	mvn.w	r5, #8
   214d2:	e743      	b.n	2135c <nrf91_socket_offload_getaddrinfo+0x80>
   214d4:	20014ec0 	.word	0x20014ec0

000214d8 <nrf91_socket_offload_sendmsg>:
{
   214d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   214dc:	4680      	mov	r8, r0
   214de:	4691      	mov	r9, r2
	if (msg == NULL) {
   214e0:	460c      	mov	r4, r1
   214e2:	b1f9      	cbz	r1, 21524 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   214e4:	2300      	movs	r3, #0
	ssize_t len = 0;
   214e6:	461a      	mov	r2, r3
   214e8:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   214ea:	4298      	cmp	r0, r3
   214ec:	d124      	bne.n	21538 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   214ee:	2a80      	cmp	r2, #128	; 0x80
   214f0:	d86d      	bhi.n	215ce <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   214f2:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   214f4:	f04f 32ff 	mov.w	r2, #4294967295
   214f8:	f04f 33ff 	mov.w	r3, #4294967295
   214fc:	4836      	ldr	r0, [pc, #216]	; (215d8 <nrf91_socket_offload_sendmsg+0x100>)
   214fe:	f014 f8f4 	bl	356ea <k_mutex_lock.constprop.0>
		len = 0;
   21502:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   21504:	4e35      	ldr	r6, [pc, #212]	; (215dc <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   21506:	68e3      	ldr	r3, [r4, #12]
   21508:	429d      	cmp	r5, r3
   2150a:	d31c      	bcc.n	21546 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   2150c:	2600      	movs	r6, #0
		ret = 0;
   2150e:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   21510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 215dc <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   21514:	42b7      	cmp	r7, r6
   21516:	dd01      	ble.n	2151c <nrf91_socket_offload_sendmsg+0x44>
   21518:	2d00      	cmp	r5, #0
   2151a:	da25      	bge.n	21568 <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   2151c:	482e      	ldr	r0, [pc, #184]	; (215d8 <nrf91_socket_offload_sendmsg+0x100>)
   2151e:	f013 ffa2 	bl	35466 <k_mutex_unlock>
		return ret;
   21522:	e005      	b.n	21530 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   21524:	f010 ffa6 	bl	32474 <__errno>
   21528:	2316      	movs	r3, #22
		return -1;
   2152a:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   2152e:	6003      	str	r3, [r0, #0]
}
   21530:	4628      	mov	r0, r5
   21532:	b002      	add	sp, #8
   21534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   21538:	68a1      	ldr	r1, [r4, #8]
   2153a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2153e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   21540:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   21542:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   21544:	e7d1      	b.n	214ea <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   21546:	68a1      	ldr	r1, [r4, #8]
   21548:	19f0      	adds	r0, r6, r7
   2154a:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   2154e:	685a      	ldr	r2, [r3, #4]
   21550:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   21554:	f016 f915 	bl	37782 <memcpy>
			len += msg->msg_iov[i].iov_len;
   21558:	68a3      	ldr	r3, [r4, #8]
   2155a:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   2155e:	4453      	add	r3, sl
   21560:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   21562:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   21564:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   21566:	e7ce      	b.n	21506 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   21568:	6863      	ldr	r3, [r4, #4]
   2156a:	1bba      	subs	r2, r7, r6
   2156c:	9301      	str	r3, [sp, #4]
   2156e:	6823      	ldr	r3, [r4, #0]
   21570:	eb0a 0106 	add.w	r1, sl, r6
   21574:	9300      	str	r3, [sp, #0]
   21576:	4640      	mov	r0, r8
   21578:	464b      	mov	r3, r9
   2157a:	f014 f83c 	bl	355f6 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   2157e:	1e05      	subs	r5, r0, #0
				offset += ret;
   21580:	bfc8      	it	gt
   21582:	1976      	addgt	r6, r6, r5
   21584:	e7c6      	b.n	21514 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   21586:	68a3      	ldr	r3, [r4, #8]
   21588:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   2158c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   21590:	685b      	ldr	r3, [r3, #4]
   21592:	b133      	cbz	r3, 215a2 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   21594:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   21596:	68a3      	ldr	r3, [r4, #8]
   21598:	eb03 020a 	add.w	r2, r3, sl
   2159c:	6852      	ldr	r2, [r2, #4]
   2159e:	4297      	cmp	r7, r2
   215a0:	d304      	bcc.n	215ac <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   215a2:	3601      	adds	r6, #1
   215a4:	68e3      	ldr	r3, [r4, #12]
   215a6:	42b3      	cmp	r3, r6
   215a8:	d8ed      	bhi.n	21586 <nrf91_socket_offload_sendmsg+0xae>
   215aa:	e7c1      	b.n	21530 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   215ac:	f853 100a 	ldr.w	r1, [r3, sl]
   215b0:	6863      	ldr	r3, [r4, #4]
   215b2:	4640      	mov	r0, r8
   215b4:	9301      	str	r3, [sp, #4]
   215b6:	6823      	ldr	r3, [r4, #0]
   215b8:	1bd2      	subs	r2, r2, r7
   215ba:	9300      	str	r3, [sp, #0]
   215bc:	4439      	add	r1, r7
   215be:	464b      	mov	r3, r9
   215c0:	f014 f819 	bl	355f6 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   215c4:	1e03      	subs	r3, r0, #0
   215c6:	db05      	blt.n	215d4 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   215c8:	441f      	add	r7, r3
			len += ret;
   215ca:	441d      	add	r5, r3
   215cc:	e7e3      	b.n	21596 <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   215ce:	2600      	movs	r6, #0
	len = 0;
   215d0:	4635      	mov	r5, r6
   215d2:	e7e7      	b.n	215a4 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   215d4:	461d      	mov	r5, r3
   215d6:	e7ab      	b.n	21530 <nrf91_socket_offload_sendmsg+0x58>
   215d8:	20014f38 	.word	0x20014f38
   215dc:	2001bb45 	.word	0x2001bb45

000215e0 <allocate_ctx>:
{
   215e0:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   215e2:	f04f 32ff 	mov.w	r2, #4294967295
   215e6:	f04f 33ff 	mov.w	r3, #4294967295
{
   215ea:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   215ec:	480b      	ldr	r0, [pc, #44]	; (2161c <allocate_ctx+0x3c>)
   215ee:	f014 f87c 	bl	356ea <k_mutex_lock.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   215f2:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   215f4:	4a0a      	ldr	r2, [pc, #40]	; (21620 <allocate_ctx+0x40>)
   215f6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   215fa:	3101      	adds	r1, #1
   215fc:	d108      	bne.n	21610 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   215fe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   21602:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   21606:	4805      	ldr	r0, [pc, #20]	; (2161c <allocate_ctx+0x3c>)
   21608:	f013 ff2d 	bl	35466 <k_mutex_unlock>
}
   2160c:	4628      	mov	r0, r5
   2160e:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   21610:	3301      	adds	r3, #1
   21612:	2b08      	cmp	r3, #8
   21614:	d1ef      	bne.n	215f6 <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   21616:	2500      	movs	r5, #0
   21618:	e7f5      	b.n	21606 <allocate_ctx+0x26>
   2161a:	bf00      	nop
   2161c:	20014e84 	.word	0x20014e84
   21620:	200167cc 	.word	0x200167cc

00021624 <release_ctx>:
{
   21624:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   21626:	4d09      	ldr	r5, [pc, #36]	; (2164c <release_ctx+0x28>)
{
   21628:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   2162a:	f04f 32ff 	mov.w	r2, #4294967295
   2162e:	f04f 33ff 	mov.w	r3, #4294967295
   21632:	4628      	mov	r0, r5
   21634:	f014 f859 	bl	356ea <k_mutex_lock.constprop.0>
	ctx->lock = NULL;
   21638:	2300      	movs	r3, #0
   2163a:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_unlock(&ctx_lock);
   2163e:	4628      	mov	r0, r5
	ctx->lock = NULL;
   21640:	e9c4 2300 	strd	r2, r3, [r4]
}
   21644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   21648:	f013 bf0d 	b.w	35466 <k_mutex_unlock>
   2164c:	20014e84 	.word	0x20014e84

00021650 <nrf91_socket_offload_accept>:
{
   21650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21654:	b08b      	sub	sp, #44	; 0x2c
   21656:	4607      	mov	r7, r0
   21658:	460c      	mov	r4, r1
   2165a:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   2165c:	f7f1 ffb2 	bl	135c4 <z_reserve_fd>
   21660:	4606      	mov	r6, r0
	if (fd < 0) {
   21662:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   21664:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   21666:	da02      	bge.n	2166e <nrf91_socket_offload_accept+0x1e>
	return -1;
   21668:	f04f 36ff 	mov.w	r6, #4294967295
   2166c:	e03d      	b.n	216ea <nrf91_socket_offload_accept+0x9a>
	if ((addr != NULL) && (addrlen != NULL)) {
   2166e:	b31c      	cbz	r4, 216b8 <nrf91_socket_offload_accept+0x68>
   21670:	b32d      	cbz	r5, 216be <nrf91_socket_offload_accept+0x6e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   21672:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   21674:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   21676:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   21678:	bf0c      	ite	eq
   2167a:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2167c:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   2167e:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   21680:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   21682:	4639      	mov	r1, r7
   21684:	f015 fdf8 	bl	37278 <nrf_accept>
	if (new_sd < 0) {
   21688:	f1b0 0900 	subs.w	r9, r0, #0
   2168c:	dbec      	blt.n	21668 <nrf91_socket_offload_accept+0x18>
	ctx = allocate_ctx(new_sd);
   2168e:	f7ff ffa7 	bl	215e0 <allocate_ctx>
	if (ctx == NULL) {
   21692:	4680      	mov	r8, r0
   21694:	b9b0      	cbnz	r0, 216c4 <nrf91_socket_offload_accept+0x74>
		errno = ENOMEM;
   21696:	f010 feed 	bl	32474 <__errno>
   2169a:	230c      	movs	r3, #12
   2169c:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   2169e:	4648      	mov	r0, r9
   216a0:	f015 fd87 	bl	371b2 <nrf_close>
	if (ctx != NULL) {
   216a4:	f1b8 0f00 	cmp.w	r8, #0
   216a8:	d002      	beq.n	216b0 <nrf91_socket_offload_accept+0x60>
		release_ctx(ctx);
   216aa:	4640      	mov	r0, r8
   216ac:	f7ff ffba 	bl	21624 <release_ctx>
	z_free_fd(fd);
   216b0:	4630      	mov	r0, r6
   216b2:	f7f1 ffd5 	bl	13660 <z_free_fd>
   216b6:	e7d7      	b.n	21668 <nrf91_socket_offload_accept+0x18>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   216b8:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   216ba:	4627      	mov	r7, r4
   216bc:	e7e1      	b.n	21682 <nrf91_socket_offload_accept+0x32>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   216be:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   216c0:	462f      	mov	r7, r5
   216c2:	e7de      	b.n	21682 <nrf91_socket_offload_accept+0x32>
	if ((addr != NULL) && (addrlen != NULL)) {
   216c4:	b164      	cbz	r4, 216e0 <nrf91_socket_offload_accept+0x90>
   216c6:	b15d      	cbz	r5, 216e0 <nrf91_socket_offload_accept+0x90>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   216c8:	687b      	ldr	r3, [r7, #4]
   216ca:	2b02      	cmp	r3, #2
   216cc:	d111      	bne.n	216f2 <nrf91_socket_offload_accept+0xa2>
			*addrlen = sizeof(struct sockaddr_in);
   216ce:	2308      	movs	r3, #8
   216d0:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   216d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   216d6:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   216d8:	2301      	movs	r3, #1
   216da:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   216dc:	9b04      	ldr	r3, [sp, #16]
   216de:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   216e0:	4641      	mov	r1, r8
   216e2:	4630      	mov	r0, r6
   216e4:	4a07      	ldr	r2, [pc, #28]	; (21704 <nrf91_socket_offload_accept+0xb4>)
   216e6:	f7f1 ffa3 	bl	13630 <z_finalize_fd>
}
   216ea:	4630      	mov	r0, r6
   216ec:	b00b      	add	sp, #44	; 0x2c
   216ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   216f2:	2b0a      	cmp	r3, #10
   216f4:	d1d3      	bne.n	2169e <nrf91_socket_offload_accept+0x4e>
			*addrlen = sizeof(struct sockaddr_in6);
   216f6:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   216f8:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   216fa:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   216fc:	a901      	add	r1, sp, #4
   216fe:	f013 ff4d 	bl	3559c <nrf_to_z_ipv6>
   21702:	e7ed      	b.n	216e0 <nrf91_socket_offload_accept+0x90>
   21704:	00039398 	.word	0x00039398

00021708 <nrf91_socket_create>:
{
   21708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2170a:	4606      	mov	r6, r0
   2170c:	460d      	mov	r5, r1
   2170e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   21710:	f7f1 ff58 	bl	135c4 <z_reserve_fd>
	if (fd < 0) {
   21714:	1e04      	subs	r4, r0, #0
   21716:	db0d      	blt.n	21734 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   21718:	b2b0      	uxth	r0, r6
   2171a:	f013 fe58 	bl	353ce <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2171e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   21722:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   21724:	d109      	bne.n	2173a <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   21726:	f010 fea5 	bl	32474 <__errno>
   2172a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   2172c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   2172e:	4620      	mov	r0, r4
   21730:	f7f1 ff96 	bl	13660 <z_free_fd>
		return -1;
   21734:	f04f 34ff 	mov.w	r4, #4294967295
   21738:	e026      	b.n	21788 <nrf91_socket_create+0x80>
	switch (socktype) {
   2173a:	2d03      	cmp	r5, #3
   2173c:	d003      	beq.n	21746 <nrf91_socket_create+0x3e>
   2173e:	2d04      	cmp	r5, #4
   21740:	bf08      	it	eq
   21742:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   21746:	4638      	mov	r0, r7
   21748:	f013 fe5e 	bl	35408 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   2174c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   21750:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   21752:	d103      	bne.n	2175c <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   21754:	f010 fe8e 	bl	32474 <__errno>
   21758:	237b      	movs	r3, #123	; 0x7b
   2175a:	e7e7      	b.n	2172c <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   2175c:	4629      	mov	r1, r5
   2175e:	4630      	mov	r0, r6
   21760:	f015 fd16 	bl	37190 <nrf_socket>
	if (sd < 0) {
   21764:	1e05      	subs	r5, r0, #0
   21766:	dbe2      	blt.n	2172e <nrf91_socket_create+0x26>
	ctx = allocate_ctx(sd);
   21768:	f7ff ff3a 	bl	215e0 <allocate_ctx>
	if (ctx == NULL) {
   2176c:	4601      	mov	r1, r0
   2176e:	b938      	cbnz	r0, 21780 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   21770:	f010 fe80 	bl	32474 <__errno>
   21774:	230c      	movs	r3, #12
   21776:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   21778:	4628      	mov	r0, r5
   2177a:	f015 fd1a 	bl	371b2 <nrf_close>
   2177e:	e7d6      	b.n	2172e <nrf91_socket_create+0x26>
	z_finalize_fd(fd, ctx,
   21780:	4620      	mov	r0, r4
   21782:	4a02      	ldr	r2, [pc, #8]	; (2178c <nrf91_socket_create+0x84>)
   21784:	f7f1 ff54 	bl	13630 <z_finalize_fd>
}
   21788:	4620      	mov	r0, r4
   2178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2178c:	00039398 	.word	0x00039398

00021790 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   21790:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   21792:	f240 2201 	movw	r2, #513	; 0x201
   21796:	2102      	movs	r1, #2
   21798:	2066      	movs	r0, #102	; 0x66
   2179a:	f7f4 f961 	bl	15a60 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   2179e:	4b05      	ldr	r3, [pc, #20]	; (217b4 <open_socket+0x24>)
   217a0:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   217a2:	3001      	adds	r0, #1
   217a4:	d104      	bne.n	217b0 <open_socket+0x20>
		return -errno;
   217a6:	f010 fe65 	bl	32474 <__errno>
   217aa:	6800      	ldr	r0, [r0, #0]
   217ac:	4240      	negs	r0, r0
	}

	return 0;
}
   217ae:	bd08      	pop	{r3, pc}
	return 0;
   217b0:	2000      	movs	r0, #0
   217b2:	e7fc      	b.n	217ae <open_socket+0x1e>
   217b4:	2001680c 	.word	0x2001680c

000217b8 <complete_cmd>:
	return 0;
}

/* Clear the current command safely */
static void complete_cmd(void)
{
   217b8:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   217ba:	4c08      	ldr	r4, [pc, #32]	; (217dc <complete_cmd+0x24>)
   217bc:	f04f 32ff 	mov.w	r2, #4294967295
   217c0:	f04f 33ff 	mov.w	r3, #4294967295
   217c4:	4620      	mov	r0, r4
   217c6:	f009 f9f3 	bl	2abb0 <z_impl_k_mutex_lock>
	k_mutex_lock(&current_cmd_mutex, K_FOREVER);
	current_cmd.cmd = NULL;
   217ca:	2200      	movs	r2, #0
   217cc:	4b04      	ldr	r3, [pc, #16]	; (217e0 <complete_cmd+0x28>)
	k_mutex_unlock(&current_cmd_mutex);
   217ce:	4620      	mov	r0, r4
}
   217d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	current_cmd.cmd = NULL;
   217d4:	601a      	str	r2, [r3, #0]
	k_mutex_unlock(&current_cmd_mutex);
   217d6:	f014 b84e 	b.w	35876 <k_mutex_unlock>
   217da:	bf00      	nop
   217dc:	20014e98 	.word	0x20014e98
   217e0:	20016810 	.word	0x20016810

000217e4 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   217e4:	b530      	push	{r4, r5, lr}
   217e6:	b089      	sub	sp, #36	; 0x24
	k_mutex_lock(&at_cmd_init_mutex, K_FOREVER);
	static bool initialized;
	if (initialized) {
   217e8:	4d1e      	ldr	r5, [pc, #120]	; (21864 <at_cmd_driver_init+0x80>)
   217ea:	f04f 33ff 	mov.w	r3, #4294967295
   217ee:	f04f 32ff 	mov.w	r2, #4294967295
   217f2:	481d      	ldr	r0, [pc, #116]	; (21868 <at_cmd_driver_init+0x84>)
   217f4:	f009 f9dc 	bl	2abb0 <z_impl_k_mutex_lock>
   217f8:	782b      	ldrb	r3, [r5, #0]
   217fa:	b133      	cbz	r3, 2180a <at_cmd_driver_init+0x26>
		k_mutex_unlock(&at_cmd_init_mutex);
   217fc:	481a      	ldr	r0, [pc, #104]	; (21868 <at_cmd_driver_init+0x84>)
   217fe:	f014 f83a 	bl	35876 <k_mutex_unlock>
		return 0;
   21802:	2400      	movs	r4, #0

	LOG_DBG("Common AT socket processing thread created");
	initialized = true;
	k_mutex_unlock(&at_cmd_init_mutex);
	return 0;
}
   21804:	4620      	mov	r0, r4
   21806:	b009      	add	sp, #36	; 0x24
   21808:	bd30      	pop	{r4, r5, pc}
	err = open_socket();
   2180a:	f7ff ffc1 	bl	21790 <open_socket>
	if (err) {
   2180e:	4604      	mov	r4, r0
   21810:	b170      	cbz	r0, 21830 <at_cmd_driver_init+0x4c>
   21812:	4a16      	ldr	r2, [pc, #88]	; (2186c <at_cmd_driver_init+0x88>)
   21814:	4b16      	ldr	r3, [pc, #88]	; (21870 <at_cmd_driver_init+0x8c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   21816:	4601      	mov	r1, r0
   21818:	1ad2      	subs	r2, r2, r3
   2181a:	08d2      	lsrs	r2, r2, #3
   2181c:	0192      	lsls	r2, r2, #6
   2181e:	4815      	ldr	r0, [pc, #84]	; (21874 <at_cmd_driver_init+0x90>)
   21820:	f042 0201 	orr.w	r2, r2, #1
   21824:	f00e fd65 	bl	302f2 <log_1>
	k_mutex_unlock(&at_cmd_init_mutex);
   21828:	480f      	ldr	r0, [pc, #60]	; (21868 <at_cmd_driver_init+0x84>)
   2182a:	f014 f824 	bl	35876 <k_mutex_unlock>
	return 0;
   2182e:	e7e9      	b.n	21804 <at_cmd_driver_init+0x20>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21830:	2200      	movs	r2, #0
   21832:	2300      	movs	r3, #0
   21834:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21838:	230a      	movs	r3, #10
   2183a:	e9cd 0000 	strd	r0, r0, [sp]
   2183e:	e9cd 0302 	strd	r0, r3, [sp, #8]
   21842:	9004      	str	r0, [sp, #16]
   21844:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
   21848:	4b0b      	ldr	r3, [pc, #44]	; (21878 <at_cmd_driver_init+0x94>)
   2184a:	490c      	ldr	r1, [pc, #48]	; (2187c <at_cmd_driver_init+0x98>)
   2184c:	480c      	ldr	r0, [pc, #48]	; (21880 <at_cmd_driver_init+0x9c>)
   2184e:	f008 ff03 	bl	2a658 <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   21852:	4b0c      	ldr	r3, [pc, #48]	; (21884 <at_cmd_driver_init+0xa0>)
   21854:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread, str);
   21856:	490c      	ldr	r1, [pc, #48]	; (21888 <at_cmd_driver_init+0xa4>)
   21858:	f015 fddf 	bl	3741a <z_impl_k_thread_name_set>
	initialized = true;
   2185c:	2301      	movs	r3, #1
   2185e:	702b      	strb	r3, [r5, #0]
   21860:	e7e2      	b.n	21828 <at_cmd_driver_init+0x44>
   21862:	bf00      	nop
   21864:	2001c651 	.word	0x2001c651
   21868:	20014e70 	.word	0x20014e70
   2186c:	000387c0 	.word	0x000387c0
   21870:	000387c0 	.word	0x000387c0
   21874:	0003d93e 	.word	0x0003d93e
   21878:	00021985 	.word	0x00021985
   2187c:	20020730 	.word	0x20020730
   21880:	20015bd8 	.word	0x20015bd8
   21884:	20016834 	.word	0x20016834
   21888:	0003d960 	.word	0x0003d960

0002188c <load_cmd_and_write>:
{
   2188c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		if (current_cmd.cmd != NULL ||
   21890:	4f33      	ldr	r7, [pc, #204]	; (21960 <load_cmd_and_write+0xd4>)
	return z_impl_k_mutex_lock(mutex, timeout);
   21892:	f04f 33ff 	mov.w	r3, #4294967295
   21896:	46b8      	mov	r8, r7
   21898:	f04f 32ff 	mov.w	r2, #4294967295
   2189c:	4831      	ldr	r0, [pc, #196]	; (21964 <load_cmd_and_write+0xd8>)
   2189e:	f009 f987 	bl	2abb0 <z_impl_k_mutex_lock>
   218a2:	4d31      	ldr	r5, [pc, #196]	; (21968 <load_cmd_and_write+0xdc>)
   218a4:	4b31      	ldr	r3, [pc, #196]	; (2196c <load_cmd_and_write+0xe0>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   218a6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 21980 <load_cmd_and_write+0xf4>
   218aa:	1aed      	subs	r5, r5, r3
   218ac:	08ed      	lsrs	r5, r5, #3
   218ae:	683b      	ldr	r3, [r7, #0]
   218b0:	2b00      	cmp	r3, #0
   218b2:	d14e      	bne.n	21952 <load_cmd_and_write+0xc6>
   218b4:	2200      	movs	r2, #0
   218b6:	2300      	movs	r3, #0
   218b8:	4639      	mov	r1, r7
   218ba:	4648      	mov	r0, r9
   218bc:	f009 f88c 	bl	2a9d8 <z_impl_k_msgq_get>
   218c0:	4604      	mov	r4, r0
   218c2:	2800      	cmp	r0, #0
   218c4:	d145      	bne.n	21952 <load_cmd_and_write+0xc6>
		ret = at_write(current_cmd.cmd);
   218c6:	f8d7 a000 	ldr.w	sl, [r7]
	int bytes_to_send = strlen(cmd);
   218ca:	4650      	mov	r0, sl
   218cc:	f7ef fe18 	bl	11500 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   218d0:	4b27      	ldr	r3, [pc, #156]	; (21970 <load_cmd_and_write+0xe4>)
	int bytes_to_send = strlen(cmd);
   218d2:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   218d4:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   218d6:	4651      	mov	r1, sl
   218d8:	4623      	mov	r3, r4
   218da:	4632      	mov	r2, r6
   218dc:	e9cd 4400 	strd	r4, r4, [sp]
   218e0:	f00f f86b 	bl	309ba <z_impl_zsock_sendto>
   218e4:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   218e6:	1c48      	adds	r0, r1, #1
   218e8:	d129      	bne.n	2193e <load_cmd_and_write+0xb2>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   218ea:	f010 fdc3 	bl	32474 <__errno>
   218ee:	01ac      	lsls	r4, r5, #6
   218f0:	f044 0401 	orr.w	r4, r4, #1
   218f4:	4622      	mov	r2, r4
   218f6:	6801      	ldr	r1, [r0, #0]
   218f8:	481e      	ldr	r0, [pc, #120]	; (21974 <load_cmd_and_write+0xe8>)
   218fa:	f00e fcfa 	bl	302f2 <log_1>
		return -errno;
   218fe:	f010 fdb9 	bl	32474 <__errno>
   21902:	6804      	ldr	r4, [r0, #0]
   21904:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   21906:	f898 3010 	ldrb.w	r3, [r8, #16]
   2190a:	07da      	lsls	r2, r3, #31
   2190c:	d503      	bpl.n	21916 <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   2190e:	f8d8 0000 	ldr.w	r0, [r8]
   21912:	f015 fef5 	bl	37700 <k_free>
		if (ret != 0) {
   21916:	b1e4      	cbz	r4, 21952 <load_cmd_and_write+0xc6>
			resp.state = AT_CMD_ERROR_WRITE;
   21918:	2305      	movs	r3, #5
   2191a:	f88d 300c 	strb.w	r3, [sp, #12]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2191e:	f898 3010 	ldrb.w	r3, [r8, #16]
			resp.code = ret;
   21922:	9402      	str	r4, [sp, #8]
			if (current_cmd.flags & AT_CMD_SYNC) {
   21924:	079b      	lsls	r3, r3, #30
   21926:	d507      	bpl.n	21938 <load_cmd_and_write+0xac>
	return z_impl_k_msgq_put(msgq, data, timeout);
   21928:	f04f 32ff 	mov.w	r2, #4294967295
   2192c:	f04f 33ff 	mov.w	r3, #4294967295
   21930:	4811      	ldr	r0, [pc, #68]	; (21978 <load_cmd_and_write+0xec>)
   21932:	a902      	add	r1, sp, #8
   21934:	f008 ffa8 	bl	2a888 <z_impl_k_msgq_put>
			complete_cmd();
   21938:	f7ff ff3e 	bl	217b8 <complete_cmd>
	} while (ret != 0);
   2193c:	e7b7      	b.n	218ae <load_cmd_and_write+0x22>
	if (bytes_sent != bytes_to_send) {
   2193e:	428e      	cmp	r6, r1
   21940:	d0e1      	beq.n	21906 <load_cmd_and_write+0x7a>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   21942:	01ab      	lsls	r3, r5, #6
   21944:	4632      	mov	r2, r6
   21946:	480d      	ldr	r0, [pc, #52]	; (2197c <load_cmd_and_write+0xf0>)
   21948:	f043 0302 	orr.w	r3, r3, #2
   2194c:	f00e fce5 	bl	3031a <log_2>
   21950:	e7d9      	b.n	21906 <load_cmd_and_write+0x7a>
	k_mutex_unlock(&current_cmd_mutex);
   21952:	4804      	ldr	r0, [pc, #16]	; (21964 <load_cmd_and_write+0xd8>)
   21954:	f013 ff8f 	bl	35876 <k_mutex_unlock>
}
   21958:	b004      	add	sp, #16
   2195a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2195e:	bf00      	nop
   21960:	20016810 	.word	0x20016810
   21964:	20014e98 	.word	0x20014e98
   21968:	000387c0 	.word	0x000387c0
   2196c:	000387c0 	.word	0x000387c0
   21970:	2001680c 	.word	0x2001680c
   21974:	0003d975 	.word	0x0003d975
   21978:	20014fb4 	.word	0x20014fb4
   2197c:	0003d998 	.word	0x0003d998
   21980:	20014f4c 	.word	0x20014f4c

00021984 <socket_thread_fn>:
{
   21984:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   21988:	f8df 9260 	ldr.w	r9, [pc, #608]	; 21bec <socket_thread_fn+0x268>
   2198c:	4f83      	ldr	r7, [pc, #524]	; (21b9c <socket_thread_fn+0x218>)
   2198e:	46ca      	mov	sl, r9
   21990:	4b83      	ldr	r3, [pc, #524]	; (21ba0 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   21992:	4e84      	ldr	r6, [pc, #528]	; (21ba4 <socket_thread_fn+0x220>)
   21994:	1aff      	subs	r7, r7, r3
   21996:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   21998:	f7ff ff78 	bl	2188c <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2199c:	f8d9 0000 	ldr.w	r0, [r9]
   219a0:	2500      	movs	r5, #0
   219a2:	f640 228c 	movw	r2, #2700	; 0xa8c
   219a6:	462b      	mov	r3, r5
   219a8:	e9cd 5500 	strd	r5, r5, [sp]
   219ac:	497d      	ldr	r1, [pc, #500]	; (21ba4 <socket_thread_fn+0x220>)
   219ae:	f00f f85b 	bl	30a68 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   219b2:	4c7d      	ldr	r4, [pc, #500]	; (21ba8 <socket_thread_fn+0x224>)
		if (bytes_read < 0) {
   219b4:	f1b0 0800 	subs.w	r8, r0, #0
		ret.code  = 0;
   219b8:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   219ba:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   219bc:	da6c      	bge.n	21a98 <socket_thread_fn+0x114>
			if (errno == EHOSTDOWN) {
   219be:	f010 fd59 	bl	32474 <__errno>
   219c2:	6803      	ldr	r3, [r0, #0]
   219c4:	2b75      	cmp	r3, #117	; 0x75
   219c6:	d122      	bne.n	21a0e <socket_thread_fn+0x8a>
   219c8:	2301      	movs	r3, #1
   219ca:	4c78      	ldr	r4, [pc, #480]	; (21bac <socket_thread_fn+0x228>)
   219cc:	e8d4 2fef 	ldaex	r2, [r4]
   219d0:	e8c4 3fe1 	stlex	r1, r3, [r4]
   219d4:	2900      	cmp	r1, #0
   219d6:	d1f9      	bne.n	219cc <socket_thread_fn+0x48>
				close(common_socket_fd);
   219d8:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   219dc:	f00e ffa2 	bl	30924 <z_impl_zsock_close>
				nrf_modem_lib_shutdown_wait();
   219e0:	f7fe ff92 	bl	20908 <nrf_modem_lib_shutdown_wait>
   219e4:	e8d4 3fef 	ldaex	r3, [r4]
   219e8:	e8c4 5fe2 	stlex	r2, r5, [r4]
   219ec:	2a00      	cmp	r2, #0
   219ee:	d1f9      	bne.n	219e4 <socket_thread_fn+0x60>
				if (open_socket() != 0) {
   219f0:	f7ff fece 	bl	21790 <open_socket>
   219f4:	2800      	cmp	r0, #0
   219f6:	d0cf      	beq.n	21998 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   219f8:	f010 fd3c 	bl	32474 <__errno>
   219fc:	01bc      	lsls	r4, r7, #6
   219fe:	f044 0401 	orr.w	r4, r4, #1
   21a02:	6801      	ldr	r1, [r0, #0]
   21a04:	4622      	mov	r2, r4
   21a06:	486a      	ldr	r0, [pc, #424]	; (21bb0 <socket_thread_fn+0x22c>)
   21a08:	f00e fc73 	bl	302f2 <log_1>
   21a0c:	e7c4      	b.n	21998 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   21a0e:	f010 fd31 	bl	32474 <__errno>
   21a12:	01bd      	lsls	r5, r7, #6
   21a14:	f045 0801 	orr.w	r8, r5, #1
   21a18:	6801      	ldr	r1, [r0, #0]
   21a1a:	4642      	mov	r2, r8
   21a1c:	4865      	ldr	r0, [pc, #404]	; (21bb4 <socket_thread_fn+0x230>)
   21a1e:	f00e fc68 	bl	302f2 <log_1>
			if ((close(common_socket_fd) == 0) &&
   21a22:	f8d9 0000 	ldr.w	r0, [r9]
   21a26:	f00e ff7d 	bl	30924 <z_impl_zsock_close>
   21a2a:	bb28      	cbnz	r0, 21a78 <socket_thread_fn+0xf4>
			    (open_socket() == 0)) {
   21a2c:	f7ff feb0 	bl	21790 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   21a30:	bb10      	cbnz	r0, 21a78 <socket_thread_fn+0xf4>
				LOG_INF("AT socket recovered");
   21a32:	4861      	ldr	r0, [pc, #388]	; (21bb8 <socket_thread_fn+0x234>)
   21a34:	f045 0103 	orr.w	r1, r5, #3
   21a38:	f00e fc4e 	bl	302d8 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   21a3c:	2306      	movs	r3, #6
   21a3e:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   21a40:	f010 fd18 	bl	32474 <__errno>
   21a44:	6803      	ldr	r3, [r0, #0]
   21a46:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   21a48:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   21a4a:	4b5c      	ldr	r3, [pc, #368]	; (21bbc <socket_thread_fn+0x238>)
   21a4c:	681a      	ldr	r2, [r3, #0]
   21a4e:	b16a      	cbz	r2, 21a6c <socket_thread_fn+0xe8>
   21a50:	7c1b      	ldrb	r3, [r3, #16]
   21a52:	079b      	lsls	r3, r3, #30
   21a54:	d50a      	bpl.n	21a6c <socket_thread_fn+0xe8>
		    current_cmd.flags & AT_CMD_SYNC &&
   21a56:	7923      	ldrb	r3, [r4, #4]
   21a58:	2b07      	cmp	r3, #7
   21a5a:	d09d      	beq.n	21998 <socket_thread_fn+0x14>
   21a5c:	f04f 32ff 	mov.w	r2, #4294967295
   21a60:	f04f 33ff 	mov.w	r3, #4294967295
   21a64:	4950      	ldr	r1, [pc, #320]	; (21ba8 <socket_thread_fn+0x224>)
   21a66:	4856      	ldr	r0, [pc, #344]	; (21bc0 <socket_thread_fn+0x23c>)
   21a68:	f008 ff0e 	bl	2a888 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   21a6c:	7923      	ldrb	r3, [r4, #4]
   21a6e:	2b07      	cmp	r3, #7
   21a70:	d092      	beq.n	21998 <socket_thread_fn+0x14>
			complete_cmd();
   21a72:	f7ff fea1 	bl	217b8 <complete_cmd>
   21a76:	e78f      	b.n	21998 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   21a78:	f010 fcfc 	bl	32474 <__errno>
   21a7c:	f045 0501 	orr.w	r5, r5, #1
   21a80:	6801      	ldr	r1, [r0, #0]
   21a82:	462a      	mov	r2, r5
   21a84:	484f      	ldr	r0, [pc, #316]	; (21bc4 <socket_thread_fn+0x240>)
   21a86:	f00e fc34 	bl	302f2 <log_1>
			close(common_socket_fd);
   21a8a:	f8da 0000 	ldr.w	r0, [sl]
}
   21a8e:	b002      	add	sp, #8
   21a90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a94:	f00e bf46 	b.w	30924 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   21a98:	d10a      	bne.n	21ab0 <socket_thread_fn+0x12c>
			LOG_ERR("AT message empty");
   21a9a:	01b9      	lsls	r1, r7, #6
   21a9c:	484a      	ldr	r0, [pc, #296]	; (21bc8 <socket_thread_fn+0x244>)
   21a9e:	f041 0101 	orr.w	r1, r1, #1
   21aa2:	f00e fc19 	bl	302d8 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   21aa6:	2306      	movs	r3, #6
   21aa8:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   21aaa:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   21aae:	e7cb      	b.n	21a48 <socket_thread_fn+0xc4>
		} else if (buf[bytes_read - 1] != '\0') {
   21ab0:	eb06 0308 	add.w	r3, r6, r8
   21ab4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   21ab8:	b153      	cbz	r3, 21ad0 <socket_thread_fn+0x14c>
			LOG_ERR("AT message too large for reception buffer or "
   21aba:	01b9      	lsls	r1, r7, #6
   21abc:	4843      	ldr	r0, [pc, #268]	; (21bcc <socket_thread_fn+0x248>)
   21abe:	f041 0101 	orr.w	r1, r1, #1
   21ac2:	f00e fc09 	bl	302d8 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   21ac6:	2306      	movs	r3, #6
   21ac8:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   21aca:	f06f 0368 	mvn.w	r3, #104	; 0x68
   21ace:	e7bb      	b.n	21a48 <socket_thread_fn+0xc4>
	ret->state = AT_CMD_NOTIFICATION;
   21ad0:	2307      	movs	r3, #7
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   21ad2:	483f      	ldr	r0, [pc, #252]	; (21bd0 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   21ad4:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   21ad6:	f7ef fd13 	bl	11500 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   21ada:	f1a8 0505 	sub.w	r5, r8, #5
   21ade:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   21ae0:	4602      	mov	r2, r0
   21ae2:	493b      	ldr	r1, [pc, #236]	; (21bd0 <socket_thread_fn+0x24c>)
   21ae4:	4628      	mov	r0, r5
   21ae6:	f015 ff99 	bl	37a1c <strncmp>
		if (match) {
   21aea:	b9c0      	cbnz	r0, 21b1e <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   21aec:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   21aee:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   21af0:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   21af2:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   21af4:	3201      	adds	r2, #1
   21af6:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   21af8:	4d30      	ldr	r5, [pc, #192]	; (21bbc <socket_thread_fn+0x238>)
   21afa:	682b      	ldr	r3, [r5, #0]
   21afc:	2b00      	cmp	r3, #0
   21afe:	d043      	beq.n	21b88 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   21b00:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   21b02:	2800      	cmp	r0, #0
   21b04:	d040      	beq.n	21b88 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   21b06:	7923      	ldrb	r3, [r4, #4]
   21b08:	2b07      	cmp	r3, #7
   21b0a:	d12e      	bne.n	21b6a <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   21b0c:	4b31      	ldr	r3, [pc, #196]	; (21bd4 <socket_thread_fn+0x250>)
   21b0e:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   21b10:	b913      	cbnz	r3, 21b18 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   21b12:	68ab      	ldr	r3, [r5, #8]
   21b14:	2b00      	cmp	r3, #0
   21b16:	d098      	beq.n	21a4a <socket_thread_fn+0xc6>
			current_cmd.callback(buf);
   21b18:	4630      	mov	r0, r6
   21b1a:	4798      	blx	r3
   21b1c:	e795      	b.n	21a4a <socket_thread_fn+0xc6>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   21b1e:	4630      	mov	r0, r6
   21b20:	492d      	ldr	r1, [pc, #180]	; (21bd8 <socket_thread_fn+0x254>)
   21b22:	f015 ffad 	bl	37a80 <strstr>
		if (tmpstr) {
   21b26:	4605      	mov	r5, r0
   21b28:	b128      	cbz	r0, 21b36 <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   21b2a:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   21b2c:	482b      	ldr	r0, [pc, #172]	; (21bdc <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   21b2e:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   21b30:	f015 fe07 	bl	37742 <atoi>
   21b34:	e7db      	b.n	21aee <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   21b36:	4630      	mov	r0, r6
   21b38:	4929      	ldr	r1, [pc, #164]	; (21be0 <socket_thread_fn+0x25c>)
   21b3a:	f015 ffa1 	bl	37a80 <strstr>
		if (tmpstr) {
   21b3e:	4605      	mov	r5, r0
   21b40:	b108      	cbz	r0, 21b46 <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   21b42:	2303      	movs	r3, #3
   21b44:	e7f2      	b.n	21b2c <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   21b46:	4827      	ldr	r0, [pc, #156]	; (21be4 <socket_thread_fn+0x260>)
   21b48:	f7ef fcda 	bl	11500 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   21b4c:	f1a8 0508 	sub.w	r5, r8, #8
   21b50:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   21b52:	4602      	mov	r2, r0
   21b54:	4923      	ldr	r1, [pc, #140]	; (21be4 <socket_thread_fn+0x260>)
   21b56:	4628      	mov	r0, r5
   21b58:	f015 ff60 	bl	37a1c <strncmp>
		if (match) {
   21b5c:	b9c0      	cbnz	r0, 21b90 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   21b5e:	2301      	movs	r3, #1
   21b60:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   21b62:	f06f 0307 	mvn.w	r3, #7
   21b66:	6023      	str	r3, [r4, #0]
			break;
   21b68:	e7c2      	b.n	21af0 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   21b6a:	68eb      	ldr	r3, [r5, #12]
   21b6c:	429a      	cmp	r2, r3
   21b6e:	d908      	bls.n	21b82 <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   21b70:	01b9      	lsls	r1, r7, #6
   21b72:	481d      	ldr	r0, [pc, #116]	; (21be8 <socket_thread_fn+0x264>)
   21b74:	f041 0101 	orr.w	r1, r1, #1
   21b78:	f00e fbae 	bl	302d8 <log_0>
				ret.code  = -EMSGSIZE;
   21b7c:	f06f 0379 	mvn.w	r3, #121	; 0x79
   21b80:	e762      	b.n	21a48 <socket_thread_fn+0xc4>
   21b82:	4631      	mov	r1, r6
   21b84:	f015 fdfd 	bl	37782 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   21b88:	7923      	ldrb	r3, [r4, #4]
   21b8a:	2b07      	cmp	r3, #7
   21b8c:	d1c1      	bne.n	21b12 <socket_thread_fn+0x18e>
   21b8e:	e7bd      	b.n	21b0c <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   21b90:	4630      	mov	r0, r6
   21b92:	f7ef fcb5 	bl	11500 <strlen>
   21b96:	1c42      	adds	r2, r0, #1
   21b98:	e7ae      	b.n	21af8 <socket_thread_fn+0x174>
   21b9a:	bf00      	nop
   21b9c:	000387c0 	.word	0x000387c0
   21ba0:	000387c0 	.word	0x000387c0
   21ba4:	2001bbc5 	.word	0x2001bbc5
   21ba8:	20016828 	.word	0x20016828
   21bac:	20016830 	.word	0x20016830
   21bb0:	0003d9ca 	.word	0x0003d9ca
   21bb4:	0003da05 	.word	0x0003da05
   21bb8:	0003da27 	.word	0x0003da27
   21bbc:	20016810 	.word	0x20016810
   21bc0:	20014fb4 	.word	0x20014fb4
   21bc4:	0003da3b 	.word	0x0003da3b
   21bc8:	0003da72 	.word	0x0003da72
   21bcc:	0003da83 	.word	0x0003da83
   21bd0:	0003dace 	.word	0x0003dace
   21bd4:	20016824 	.word	0x20016824
   21bd8:	0003dad3 	.word	0x0003dad3
   21bdc:	2001bbd0 	.word	0x2001bbd0
   21be0:	0003dadf 	.word	0x0003dadf
   21be4:	0003daeb 	.word	0x0003daeb
   21be8:	0003daf3 	.word	0x0003daf3
   21bec:	2001680c 	.word	0x2001680c

00021bf0 <at_cmd_write>:
{
   21bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bf2:	4605      	mov	r5, r0
   21bf4:	460f      	mov	r7, r1
   21bf6:	4616      	mov	r6, r2
   21bf8:	461c      	mov	r4, r3
   21bfa:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21bfc:	4b3c      	ldr	r3, [pc, #240]	; (21cf0 <at_cmd_write+0x100>)
   21bfe:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   21c02:	2b01      	cmp	r3, #1
   21c04:	d071      	beq.n	21cea <at_cmd_write+0xfa>
	return z_impl_k_current_get();
   21c06:	f00b f9f3 	bl	2cff0 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   21c0a:	4b3a      	ldr	r3, [pc, #232]	; (21cf4 <at_cmd_write+0x104>)
   21c0c:	681b      	ldr	r3, [r3, #0]
   21c0e:	4283      	cmp	r3, r0
   21c10:	d10e      	bne.n	21c30 <at_cmd_write+0x40>
   21c12:	4939      	ldr	r1, [pc, #228]	; (21cf8 <at_cmd_write+0x108>)
   21c14:	f240 1389 	movw	r3, #393	; 0x189
   21c18:	4a38      	ldr	r2, [pc, #224]	; (21cfc <at_cmd_write+0x10c>)
   21c1a:	4839      	ldr	r0, [pc, #228]	; (21d00 <at_cmd_write+0x110>)
   21c1c:	f00e f828 	bl	2fc70 <printk>
   21c20:	4838      	ldr	r0, [pc, #224]	; (21d04 <at_cmd_write+0x114>)
   21c22:	f00e f825 	bl	2fc70 <printk>
   21c26:	f240 1189 	movw	r1, #393	; 0x189
   21c2a:	4834      	ldr	r0, [pc, #208]	; (21cfc <at_cmd_write+0x10c>)
   21c2c:	f00e fb06 	bl	3023c <assert_post_action>
	if (cmd == NULL) {
   21c30:	b165      	cbz	r5, 21c4c <at_cmd_write+0x5c>
   21c32:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   21c34:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   21c38:	b9d3      	cbnz	r3, 21c70 <at_cmd_write+0x80>
   21c3a:	4933      	ldr	r1, [pc, #204]	; (21d08 <at_cmd_write+0x118>)
   21c3c:	4b33      	ldr	r3, [pc, #204]	; (21d0c <at_cmd_write+0x11c>)
		LOG_ERR("Invalid command");
   21c3e:	4834      	ldr	r0, [pc, #208]	; (21d10 <at_cmd_write+0x120>)
   21c40:	1ac9      	subs	r1, r1, r3
   21c42:	08c9      	lsrs	r1, r1, #3
   21c44:	0189      	lsls	r1, r1, #6
   21c46:	f041 0101 	orr.w	r1, r1, #1
   21c4a:	e007      	b.n	21c5c <at_cmd_write+0x6c>
   21c4c:	492e      	ldr	r1, [pc, #184]	; (21d08 <at_cmd_write+0x118>)
   21c4e:	4b2f      	ldr	r3, [pc, #188]	; (21d0c <at_cmd_write+0x11c>)
		LOG_ERR("cmd is NULL");
   21c50:	4830      	ldr	r0, [pc, #192]	; (21d14 <at_cmd_write+0x124>)
   21c52:	1ac9      	subs	r1, r1, r3
   21c54:	08c9      	lsrs	r1, r1, #3
   21c56:	0189      	lsls	r1, r1, #6
   21c58:	f041 0101 	orr.w	r1, r1, #1
   21c5c:	f00e fb3c 	bl	302d8 <log_0>
		if (state) {
   21c60:	b91c      	cbnz	r4, 21c6a <at_cmd_write+0x7a>
		return -EINVAL;
   21c62:	f06f 0015 	mvn.w	r0, #21
}
   21c66:	b009      	add	sp, #36	; 0x24
   21c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   21c6a:	2304      	movs	r3, #4
   21c6c:	7023      	strb	r3, [r4, #0]
   21c6e:	e7f8      	b.n	21c62 <at_cmd_write+0x72>
		if (*c > ' ') {
   21c70:	2b20      	cmp	r3, #32
   21c72:	d9df      	bls.n	21c34 <at_cmd_write+0x44>
	command.callback = NULL;
   21c74:	2300      	movs	r3, #0
   21c76:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   21c78:	2302      	movs	r3, #2
	command.resp = buf;
   21c7a:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   21c7e:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   21c80:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   21c84:	f04f 32ff 	mov.w	r2, #4294967295
   21c88:	f04f 33ff 	mov.w	r3, #4294967295
   21c8c:	4822      	ldr	r0, [pc, #136]	; (21d18 <at_cmd_write+0x128>)
   21c8e:	f008 ff8f 	bl	2abb0 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   21c92:	f04f 32ff 	mov.w	r2, #4294967295
   21c96:	a903      	add	r1, sp, #12
   21c98:	f04f 33ff 	mov.w	r3, #4294967295
   21c9c:	481f      	ldr	r0, [pc, #124]	; (21d1c <at_cmd_write+0x12c>)
   21c9e:	f008 fdf3 	bl	2a888 <z_impl_k_msgq_put>
   21ca2:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   21ca4:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   21ca6:	b170      	cbz	r0, 21cc6 <at_cmd_write+0xd6>
   21ca8:	4a17      	ldr	r2, [pc, #92]	; (21d08 <at_cmd_write+0x118>)
   21caa:	4b18      	ldr	r3, [pc, #96]	; (21d0c <at_cmd_write+0x11c>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   21cac:	481c      	ldr	r0, [pc, #112]	; (21d20 <at_cmd_write+0x130>)
   21cae:	1ad2      	subs	r2, r2, r3
   21cb0:	08d2      	lsrs	r2, r2, #3
   21cb2:	0192      	lsls	r2, r2, #6
   21cb4:	f042 0201 	orr.w	r2, r2, #1
   21cb8:	f00e fb1b 	bl	302f2 <log_1>
		if (state) {
   21cbc:	b10c      	cbz	r4, 21cc2 <at_cmd_write+0xd2>
			*state = AT_CMD_ERROR_QUEUE;
   21cbe:	2304      	movs	r3, #4
		*state = ret.state;
   21cc0:	7023      	strb	r3, [r4, #0]
	return ret.code;
   21cc2:	9801      	ldr	r0, [sp, #4]
   21cc4:	e7cf      	b.n	21c66 <at_cmd_write+0x76>
	load_cmd_and_write();
   21cc6:	f7ff fde1 	bl	2188c <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   21cca:	f04f 32ff 	mov.w	r2, #4294967295
   21cce:	f04f 33ff 	mov.w	r3, #4294967295
   21cd2:	4814      	ldr	r0, [pc, #80]	; (21d24 <at_cmd_write+0x134>)
   21cd4:	a901      	add	r1, sp, #4
   21cd6:	f008 fe7f 	bl	2a9d8 <z_impl_k_msgq_get>
	k_mutex_unlock(&response_sync_get);
   21cda:	480f      	ldr	r0, [pc, #60]	; (21d18 <at_cmd_write+0x128>)
   21cdc:	f013 fdcb 	bl	35876 <k_mutex_unlock>
	if (state) {
   21ce0:	2c00      	cmp	r4, #0
   21ce2:	d0ee      	beq.n	21cc2 <at_cmd_write+0xd2>
		*state = ret.state;
   21ce4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   21ce8:	e7ea      	b.n	21cc0 <at_cmd_write+0xd0>
		return -EHOSTDOWN;
   21cea:	f06f 0074 	mvn.w	r0, #116	; 0x74
   21cee:	e7ba      	b.n	21c66 <at_cmd_write+0x76>
   21cf0:	20016830 	.word	0x20016830
   21cf4:	20016834 	.word	0x20016834
   21cf8:	0003db54 	.word	0x0003db54
   21cfc:	0003db30 	.word	0x0003db30
   21d00:	0003a56b 	.word	0x0003a56b
   21d04:	0003db72 	.word	0x0003db72
   21d08:	000387c0 	.word	0x000387c0
   21d0c:	000387c0 	.word	0x000387c0
   21d10:	0003db20 	.word	0x0003db20
   21d14:	0003db14 	.word	0x0003db14
   21d18:	20014efc 	.word	0x20014efc
   21d1c:	20014f4c 	.word	0x20014f4c
   21d20:	0003dba2 	.word	0x0003dba2
   21d24:	20014fb4 	.word	0x20014fb4

00021d28 <at_cmd_set_notification_handler>:
{
   21d28:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   21d2a:	4c09      	ldr	r4, [pc, #36]	; (21d50 <at_cmd_set_notification_handler+0x28>)
{
   21d2c:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   21d2e:	6821      	ldr	r1, [r4, #0]
   21d30:	b159      	cbz	r1, 21d4a <at_cmd_set_notification_handler+0x22>
   21d32:	4281      	cmp	r1, r0
   21d34:	d009      	beq.n	21d4a <at_cmd_set_notification_handler+0x22>
   21d36:	4a07      	ldr	r2, [pc, #28]	; (21d54 <at_cmd_set_notification_handler+0x2c>)
   21d38:	4b07      	ldr	r3, [pc, #28]	; (21d58 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   21d3a:	4808      	ldr	r0, [pc, #32]	; (21d5c <at_cmd_set_notification_handler+0x34>)
   21d3c:	1ad2      	subs	r2, r2, r3
   21d3e:	08d2      	lsrs	r2, r2, #3
   21d40:	0192      	lsls	r2, r2, #6
   21d42:	f042 0202 	orr.w	r2, r2, #2
   21d46:	f00e fad4 	bl	302f2 <log_1>
	notification_handler = handler;
   21d4a:	6025      	str	r5, [r4, #0]
}
   21d4c:	bd38      	pop	{r3, r4, r5, pc}
   21d4e:	bf00      	nop
   21d50:	20016824 	.word	0x20016824
   21d54:	000387c0 	.word	0x000387c0
   21d58:	000387c0 	.word	0x000387c0
   21d5c:	0003dbc2 	.word	0x0003dbc2

00021d60 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   21d60:	4b0f      	ldr	r3, [pc, #60]	; (21da0 <find_node+0x40>)
{
   21d62:	b570      	push	{r4, r5, r6, lr}
   21d64:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   21d66:	6818      	ldr	r0, [r3, #0]
   21d68:	b170      	cbz	r0, 21d88 <find_node+0x28>
	return node->next;
   21d6a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21d6c:	4603      	mov	r3, r0
   21d6e:	2d00      	cmp	r5, #0
   21d70:	4628      	mov	r0, r5
   21d72:	bf38      	it	cc
   21d74:	2000      	movcc	r0, #0
   21d76:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   21d78:	685e      	ldr	r6, [r3, #4]
   21d7a:	428e      	cmp	r6, r1
   21d7c:	d105      	bne.n	21d8a <find_node+0x2a>
   21d7e:	689e      	ldr	r6, [r3, #8]
   21d80:	4296      	cmp	r6, r2
   21d82:	d102      	bne.n	21d8a <find_node+0x2a>
			*prev_out = prev;
			return curr;
   21d84:	4618      	mov	r0, r3
			*prev_out = prev;
   21d86:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   21d88:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   21d8a:	2800      	cmp	r0, #0
   21d8c:	d0fc      	beq.n	21d88 <find_node+0x28>
	return node->next;
   21d8e:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21d90:	461d      	mov	r5, r3
   21d92:	2e00      	cmp	r6, #0
   21d94:	4603      	mov	r3, r0
   21d96:	4630      	mov	r0, r6
   21d98:	bf38      	it	cc
   21d9a:	2000      	movcc	r0, #0
   21d9c:	e7ec      	b.n	21d78 <find_node+0x18>
   21d9e:	bf00      	nop
   21da0:	20016838 	.word	0x20016838

00021da4 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   21da4:	4a0c      	ldr	r2, [pc, #48]	; (21dd8 <module_init+0x34>)
{
   21da6:	b508      	push	{r3, lr}
	if (initialized) {
   21da8:	7813      	ldrb	r3, [r2, #0]
   21daa:	b15b      	cbz	r3, 21dc4 <module_init+0x20>
   21dac:	490b      	ldr	r1, [pc, #44]	; (21ddc <module_init+0x38>)
   21dae:	4b0c      	ldr	r3, [pc, #48]	; (21de0 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   21db0:	480c      	ldr	r0, [pc, #48]	; (21de4 <module_init+0x40>)
   21db2:	1ac9      	subs	r1, r1, r3
   21db4:	08c9      	lsrs	r1, r1, #3
   21db6:	0189      	lsls	r1, r1, #6
   21db8:	f041 0102 	orr.w	r1, r1, #2
   21dbc:	f00e fa8c 	bl	302d8 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   21dc0:	2000      	movs	r0, #0
   21dc2:	bd08      	pop	{r3, pc}
	initialized = true;
   21dc4:	2101      	movs	r1, #1
   21dc6:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   21dc8:	4a07      	ldr	r2, [pc, #28]	; (21de8 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   21dca:	4808      	ldr	r0, [pc, #32]	; (21dec <module_init+0x48>)
	list->tail = NULL;
   21dcc:	e9c2 3300 	strd	r3, r3, [r2]
   21dd0:	f7ff ffaa 	bl	21d28 <at_cmd_set_notification_handler>
	return 0;
   21dd4:	e7f4      	b.n	21dc0 <module_init+0x1c>
   21dd6:	bf00      	nop
   21dd8:	2001c652 	.word	0x2001c652
   21ddc:	000387c8 	.word	0x000387c8
   21de0:	000387c0 	.word	0x000387c0
   21de4:	0003dbf2 	.word	0x0003dbf2
   21de8:	20016838 	.word	0x20016838
   21dec:	00021dfd 	.word	0x00021dfd

00021df0 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   21df0:	4801      	ldr	r0, [pc, #4]	; (21df8 <k_mutex_unlock.constprop.0+0x8>)
   21df2:	f008 bfd7 	b.w	2ada4 <z_impl_k_mutex_unlock>
   21df6:	bf00      	nop
   21df8:	20014ed4 	.word	0x20014ed4

00021dfc <notif_dispatch>:
{
   21dfc:	b538      	push	{r3, r4, r5, lr}
   21dfe:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   21e00:	f04f 33ff 	mov.w	r3, #4294967295
   21e04:	f04f 32ff 	mov.w	r2, #4294967295
   21e08:	480d      	ldr	r0, [pc, #52]	; (21e40 <notif_dispatch+0x44>)
   21e0a:	f008 fed1 	bl	2abb0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   21e0e:	4b0d      	ldr	r3, [pc, #52]	; (21e44 <notif_dispatch+0x48>)
   21e10:	681b      	ldr	r3, [r3, #0]
   21e12:	b91b      	cbnz	r3, 21e1c <notif_dispatch+0x20>
}
   21e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   21e18:	f7ff bfea 	b.w	21df0 <k_mutex_unlock.constprop.0>
	return node->next;
   21e1c:	681c      	ldr	r4, [r3, #0]
   21e1e:	2c00      	cmp	r4, #0
   21e20:	bf38      	it	cc
   21e22:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   21e24:	4629      	mov	r1, r5
   21e26:	689a      	ldr	r2, [r3, #8]
   21e28:	6858      	ldr	r0, [r3, #4]
   21e2a:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   21e2c:	2c00      	cmp	r4, #0
   21e2e:	d0f1      	beq.n	21e14 <notif_dispatch+0x18>
   21e30:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21e32:	4623      	mov	r3, r4
   21e34:	2a00      	cmp	r2, #0
   21e36:	bf38      	it	cc
   21e38:	2200      	movcc	r2, #0
   21e3a:	4614      	mov	r4, r2
   21e3c:	e7f2      	b.n	21e24 <notif_dispatch+0x28>
   21e3e:	bf00      	nop
   21e40:	20014ed4 	.word	0x20014ed4
   21e44:	20016838 	.word	0x20016838

00021e48 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   21e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21e4a:	4606      	mov	r6, r0
	if (handler == NULL) {
   21e4c:	460d      	mov	r5, r1
   21e4e:	b979      	cbnz	r1, 21e70 <at_notif_register_handler+0x28>
   21e50:	4a1d      	ldr	r2, [pc, #116]	; (21ec8 <at_notif_register_handler+0x80>)
   21e52:	4b1e      	ldr	r3, [pc, #120]	; (21ecc <at_notif_register_handler+0x84>)
   21e54:	1a9b      	subs	r3, r3, r2
   21e56:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   21e58:	019b      	lsls	r3, r3, #6
   21e5a:	460a      	mov	r2, r1
   21e5c:	f043 0301 	orr.w	r3, r3, #1
   21e60:	4601      	mov	r1, r0
   21e62:	481b      	ldr	r0, [pc, #108]	; (21ed0 <at_notif_register_handler+0x88>)
   21e64:	f00e fa59 	bl	3031a <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   21e68:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   21e6c:	b002      	add	sp, #8
   21e6e:	bd70      	pop	{r4, r5, r6, pc}
   21e70:	f04f 32ff 	mov.w	r2, #4294967295
   21e74:	f04f 33ff 	mov.w	r3, #4294967295
   21e78:	4816      	ldr	r0, [pc, #88]	; (21ed4 <at_notif_register_handler+0x8c>)
   21e7a:	f008 fe99 	bl	2abb0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   21e7e:	462a      	mov	r2, r5
   21e80:	4631      	mov	r1, r6
   21e82:	a801      	add	r0, sp, #4
   21e84:	f7ff ff6c 	bl	21d60 <find_node>
   21e88:	4604      	mov	r4, r0
   21e8a:	b118      	cbz	r0, 21e94 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   21e8c:	f7ff ffb0 	bl	21df0 <k_mutex_unlock.constprop.0>
		return 0;
   21e90:	2000      	movs	r0, #0
   21e92:	e7eb      	b.n	21e6c <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   21e94:	200c      	movs	r0, #12
   21e96:	f015 fc3a 	bl	3770e <k_malloc>
   21e9a:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   21e9c:	b920      	cbnz	r0, 21ea8 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   21e9e:	f7ff ffa7 	bl	21df0 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   21ea2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21ea6:	e7e1      	b.n	21e6c <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   21ea8:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   21eaa:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   21eac:	4a0a      	ldr	r2, [pc, #40]	; (21ed8 <at_notif_register_handler+0x90>)
   21eae:	6044      	str	r4, [r0, #4]
   21eb0:	6084      	str	r4, [r0, #8]
	parent->next = child;
   21eb2:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   21eb4:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   21eb6:	e9c3 6501 	strd	r6, r5, [r3, #4]
   21eba:	b911      	cbnz	r1, 21ec2 <at_notif_register_handler+0x7a>
	list->head = node;
   21ebc:	e9c2 3300 	strd	r3, r3, [r2]
}
   21ec0:	e7e4      	b.n	21e8c <at_notif_register_handler+0x44>
	parent->next = child;
   21ec2:	600b      	str	r3, [r1, #0]
	list->tail = node;
   21ec4:	6053      	str	r3, [r2, #4]
}
   21ec6:	e7e1      	b.n	21e8c <at_notif_register_handler+0x44>
   21ec8:	000387c0 	.word	0x000387c0
   21ecc:	000387c8 	.word	0x000387c8
   21ed0:	0003dc15 	.word	0x0003dc15
   21ed4:	20014ed4 	.word	0x20014ed4
   21ed8:	20016838 	.word	0x20016838

00021edc <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   21edc:	4b06      	ldr	r3, [pc, #24]	; (21ef8 <is_valid_notification_char+0x1c>)
   21ede:	5cc3      	ldrb	r3, [r0, r3]
   21ee0:	f003 0303 	and.w	r3, r3, #3
   21ee4:	2b02      	cmp	r3, #2
   21ee6:	bf08      	it	eq
   21ee8:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   21eea:	3841      	subs	r0, #65	; 0x41
   21eec:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   21eee:	2819      	cmp	r0, #25
   21ef0:	bf8c      	ite	hi
   21ef2:	2000      	movhi	r0, #0
   21ef4:	2001      	movls	r0, #1
   21ef6:	4770      	bx	lr
   21ef8:	00040efd 	.word	0x00040efd

00021efc <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   21efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   21f00:	6805      	ldr	r5, [r0, #0]
{
   21f02:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   21f04:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21f06:	782b      	ldrb	r3, [r5, #0]
{
   21f08:	4680      	mov	r8, r0
   21f0a:	460f      	mov	r7, r1
   21f0c:	4616      	mov	r6, r2
   21f0e:	2b00      	cmp	r3, #0
   21f10:	f000 80ca 	beq.w	220a8 <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   21f14:	4b66      	ldr	r3, [pc, #408]	; (220b0 <at_parse_process_element+0x1b4>)
   21f16:	781c      	ldrb	r4, [r3, #0]
   21f18:	2c06      	cmp	r4, #6
   21f1a:	d110      	bne.n	21f3e <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   21f1c:	1c6b      	adds	r3, r5, #1
   21f1e:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   21f20:	9a00      	ldr	r2, [sp, #0]
   21f22:	7810      	ldrb	r0, [r2, #0]
   21f24:	f7ff ffda 	bl	21edc <is_valid_notification_char>
   21f28:	b930      	cbnz	r0, 21f38 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   21f2a:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   21f2c:	462a      	mov	r2, r5
   21f2e:	4639      	mov	r1, r7
   21f30:	4630      	mov	r0, r6
   21f32:	f013 fd0b 	bl	3594c <at_params_string_put>
   21f36:	e01c      	b.n	21f72 <at_parse_process_element+0x76>
			tmpstr++;
   21f38:	3201      	adds	r2, #1
   21f3a:	9200      	str	r2, [sp, #0]
   21f3c:	e7f0      	b.n	21f20 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   21f3e:	2c07      	cmp	r4, #7
   21f40:	d125      	bne.n	21f8e <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   21f42:	4668      	mov	r0, sp
   21f44:	f013 fca2 	bl	3588c <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   21f48:	4a5a      	ldr	r2, [pc, #360]	; (220b4 <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   21f4a:	9b00      	ldr	r3, [sp, #0]
   21f4c:	7819      	ldrb	r1, [r3, #0]
   21f4e:	5c89      	ldrb	r1, [r1, r2]
   21f50:	0749      	lsls	r1, r1, #29
   21f52:	d115      	bne.n	21f80 <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   21f54:	462a      	mov	r2, r5
   21f56:	1b5b      	subs	r3, r3, r5
   21f58:	4639      	mov	r1, r7
   21f5a:	4630      	mov	r0, r6
   21f5c:	f013 fcf6 	bl	3594c <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   21f60:	9b00      	ldr	r3, [sp, #0]
   21f62:	781a      	ldrb	r2, [r3, #0]
   21f64:	2a3d      	cmp	r2, #61	; 0x3d
   21f66:	d10e      	bne.n	21f86 <at_parse_process_element+0x8a>
   21f68:	785a      	ldrb	r2, [r3, #1]
   21f6a:	2a3f      	cmp	r2, #63	; 0x3f
   21f6c:	d101      	bne.n	21f72 <at_parse_process_element+0x76>
			tmpstr += 2;
   21f6e:	3302      	adds	r3, #2
			tmpstr++;
   21f70:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   21f72:	2000      	movs	r0, #0
	*str = tmpstr;
   21f74:	9b00      	ldr	r3, [sp, #0]
   21f76:	f8c8 3000 	str.w	r3, [r8]
}
   21f7a:	b023      	add	sp, #140	; 0x8c
   21f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   21f80:	3301      	adds	r3, #1
   21f82:	9300      	str	r3, [sp, #0]
   21f84:	e7e1      	b.n	21f4a <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   21f86:	2a3f      	cmp	r2, #63	; 0x3f
   21f88:	d1f3      	bne.n	21f72 <at_parse_process_element+0x76>
			tmpstr++;
   21f8a:	3301      	adds	r3, #1
   21f8c:	e7f0      	b.n	21f70 <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   21f8e:	2c08      	cmp	r4, #8
   21f90:	d103      	bne.n	21f9a <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   21f92:	4610      	mov	r0, r2
   21f94:	f013 fcac 	bl	358f0 <at_params_empty_put>
   21f98:	e7eb      	b.n	21f72 <at_parse_process_element+0x76>
	} else if (state == STRING) {
   21f9a:	2c02      	cmp	r4, #2
   21f9c:	d111      	bne.n	21fc2 <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   21f9e:	9a00      	ldr	r2, [sp, #0]
   21fa0:	7811      	ldrb	r1, [r2, #0]
   21fa2:	4608      	mov	r0, r1
   21fa4:	f013 fc69 	bl	3587a <is_lfcr>
   21fa8:	b918      	cbnz	r0, 21fb2 <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21faa:	b111      	cbz	r1, 21fb2 <at_parse_process_element+0xb6>
			tmpstr++;
   21fac:	3201      	adds	r2, #1
   21fae:	9200      	str	r2, [sp, #0]
   21fb0:	e7f5      	b.n	21f9e <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   21fb2:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   21fb4:	462a      	mov	r2, r5
   21fb6:	4639      	mov	r1, r7
   21fb8:	4630      	mov	r0, r6
   21fba:	f013 fcc7 	bl	3594c <at_params_string_put>
		tmpstr++;
   21fbe:	9b00      	ldr	r3, [sp, #0]
   21fc0:	e7e3      	b.n	21f8a <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   21fc2:	2c03      	cmp	r4, #3
   21fc4:	d109      	bne.n	21fda <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   21fc6:	9b00      	ldr	r3, [sp, #0]
   21fc8:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   21fca:	2a22      	cmp	r2, #34	; 0x22
   21fcc:	d003      	beq.n	21fd6 <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21fce:	b112      	cbz	r2, 21fd6 <at_parse_process_element+0xda>
			tmpstr++;
   21fd0:	3301      	adds	r3, #1
   21fd2:	9300      	str	r3, [sp, #0]
   21fd4:	e7f7      	b.n	21fc6 <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   21fd6:	1b5b      	subs	r3, r3, r5
   21fd8:	e7ec      	b.n	21fb4 <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   21fda:	2c01      	cmp	r4, #1
   21fdc:	d13c      	bne.n	22058 <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   21fde:	4628      	mov	r0, r5
   21fe0:	220a      	movs	r2, #10
   21fe2:	a901      	add	r1, sp, #4
   21fe4:	f00d f9be 	bl	2f364 <strtoul>
		tmpstr = next;
   21fe8:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   21fea:	4d33      	ldr	r5, [pc, #204]	; (220b8 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   21fec:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   21fee:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   21ff0:	9800      	ldr	r0, [sp, #0]
   21ff2:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   21ff4:	2b29      	cmp	r3, #41	; 0x29
   21ff6:	d01f      	beq.n	22038 <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21ff8:	b1f3      	cbz	r3, 22038 <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   21ffa:	3b2c      	subs	r3, #44	; 0x2c
   21ffc:	b2db      	uxtb	r3, r3
   21ffe:	3001      	adds	r0, #1
   22000:	2b11      	cmp	r3, #17
				tmparray[i++] =
   22002:	9000      	str	r0, [sp, #0]
   22004:	d826      	bhi.n	22054 <at_parse_process_element+0x158>
   22006:	fa25 f303 	lsr.w	r3, r5, r3
   2200a:	07db      	lsls	r3, r3, #31
   2200c:	d522      	bpl.n	22054 <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2200e:	220a      	movs	r2, #10
   22010:	a901      	add	r1, sp, #4
   22012:	f00d f9a7 	bl	2f364 <strtoul>
				tmparray[i++] =
   22016:	ab22      	add	r3, sp, #136	; 0x88
   22018:	f104 0901 	add.w	r9, r4, #1
   2201c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   22020:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   22024:	9800      	ldr	r0, [sp, #0]
   22026:	f7ef fa6b 	bl	11500 <strlen>
   2202a:	4604      	mov	r4, r0
   2202c:	9801      	ldr	r0, [sp, #4]
   2202e:	f7ef fa67 	bl	11500 <strlen>
   22032:	4284      	cmp	r4, r0
   22034:	d107      	bne.n	22046 <at_parse_process_element+0x14a>
				tmparray[i++] =
   22036:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   22038:	4639      	mov	r1, r7
   2203a:	4630      	mov	r0, r6
   2203c:	00a3      	lsls	r3, r4, #2
   2203e:	aa02      	add	r2, sp, #8
   22040:	f013 fcaa 	bl	35998 <at_params_array_put>
		tmpstr++;
   22044:	e7bb      	b.n	21fbe <at_parse_process_element+0xc2>
					tmpstr = next;
   22046:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   22048:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   2204c:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2204e:	d0f2      	beq.n	22036 <at_parse_process_element+0x13a>
				tmpstr++;
   22050:	464c      	mov	r4, r9
   22052:	e7cd      	b.n	21ff0 <at_parse_process_element+0xf4>
   22054:	46a1      	mov	r9, r4
   22056:	e7fb      	b.n	22050 <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   22058:	2c04      	cmp	r4, #4
   2205a:	d10d      	bne.n	22078 <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   2205c:	220a      	movs	r2, #10
   2205e:	4628      	mov	r0, r5
   22060:	a902      	add	r1, sp, #8
   22062:	f00d f8fb 	bl	2f25c <strtoll>
   22066:	460b      	mov	r3, r1
		tmpstr = next;
   22068:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   2206a:	4602      	mov	r2, r0
		tmpstr = next;
   2206c:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   2206e:	4630      	mov	r0, r6
   22070:	4639      	mov	r1, r7
   22072:	f013 fc54 	bl	3591e <at_params_int_put>
   22076:	e77c      	b.n	21f72 <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   22078:	2c05      	cmp	r4, #5
   2207a:	d10b      	bne.n	22094 <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   2207c:	490d      	ldr	r1, [pc, #52]	; (220b4 <at_parse_process_element+0x1b8>)
   2207e:	9b00      	ldr	r3, [sp, #0]
   22080:	781a      	ldrb	r2, [r3, #0]
   22082:	5c52      	ldrb	r2, [r2, r1]
   22084:	f012 0f44 	tst.w	r2, #68	; 0x44
   22088:	d101      	bne.n	2208e <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   2208a:	1b5b      	subs	r3, r3, r5
   2208c:	e74e      	b.n	21f2c <at_parse_process_element+0x30>
			tmpstr++;
   2208e:	3301      	adds	r3, #1
   22090:	9300      	str	r3, [sp, #0]
   22092:	e7f4      	b.n	2207e <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   22094:	2c09      	cmp	r4, #9
   22096:	f47f af6c 	bne.w	21f72 <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   2209a:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2209c:	781a      	ldrb	r2, [r3, #0]
   2209e:	2a00      	cmp	r2, #0
   220a0:	d0f3      	beq.n	2208a <at_parse_process_element+0x18e>
			tmpstr++;
   220a2:	3301      	adds	r3, #1
   220a4:	9300      	str	r3, [sp, #0]
   220a6:	e7f8      	b.n	2209a <at_parse_process_element+0x19e>
		return -1;
   220a8:	f04f 30ff 	mov.w	r0, #4294967295
   220ac:	e765      	b.n	21f7a <at_parse_process_element+0x7e>
   220ae:	bf00      	nop
   220b0:	2001c654 	.word	0x2001c654
   220b4:	00040efd 	.word	0x00040efd
   220b8:	00024001 	.word	0x00024001

000220bc <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   220bc:	b510      	push	{r4, lr}
   220be:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   220c0:	f7ef fa1e 	bl	11500 <strlen>
   220c4:	2801      	cmp	r0, #1
   220c6:	d922      	bls.n	2210e <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   220c8:	7821      	ldrb	r1, [r4, #0]
   220ca:	4b13      	ldr	r3, [pc, #76]	; (22118 <is_command+0x5c>)
   220cc:	5cca      	ldrb	r2, [r1, r3]
   220ce:	f002 0203 	and.w	r2, r2, #3
   220d2:	2a02      	cmp	r2, #2
   220d4:	bf08      	it	eq
   220d6:	3920      	subeq	r1, #32
   220d8:	2941      	cmp	r1, #65	; 0x41
   220da:	461a      	mov	r2, r3
   220dc:	d117      	bne.n	2210e <is_command+0x52>
   220de:	7863      	ldrb	r3, [r4, #1]
   220e0:	5cd2      	ldrb	r2, [r2, r3]
   220e2:	f002 0203 	and.w	r2, r2, #3
   220e6:	2a02      	cmp	r2, #2
   220e8:	bf08      	it	eq
   220ea:	3b20      	subeq	r3, #32
   220ec:	2b54      	cmp	r3, #84	; 0x54
   220ee:	d10e      	bne.n	2210e <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   220f0:	78a2      	ldrb	r2, [r4, #2]
   220f2:	2a25      	cmp	r2, #37	; 0x25
   220f4:	d00d      	beq.n	22112 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   220f6:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   220fa:	2b23      	cmp	r3, #35	; 0x23
   220fc:	d009      	beq.n	22112 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   220fe:	4610      	mov	r0, r2
   22100:	f013 fbbb 	bl	3587a <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   22104:	b910      	cbnz	r0, 2210c <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   22106:	fab2 f082 	clz	r0, r2
   2210a:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2210c:	bd10      	pop	{r4, pc}
		return false;
   2210e:	2000      	movs	r0, #0
   22110:	e7fc      	b.n	2210c <is_command+0x50>
		return true;
   22112:	2001      	movs	r0, #1
   22114:	e7fa      	b.n	2210c <is_command+0x50>
   22116:	bf00      	nop
   22118:	00040efd 	.word	0x00040efd

0002211c <at_parse_detect_type>:
{
   2211c:	b570      	push	{r4, r5, r6, lr}
   2211e:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   22120:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   22122:	4e64      	ldr	r6, [pc, #400]	; (222b4 <at_parse_detect_type+0x198>)
   22124:	2900      	cmp	r1, #0
   22126:	d137      	bne.n	22198 <at_parse_detect_type+0x7c>
   22128:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2212a:	2b2b      	cmp	r3, #43	; 0x2b
   2212c:	d001      	beq.n	22132 <at_parse_detect_type+0x16>
   2212e:	2b25      	cmp	r3, #37	; 0x25
   22130:	d132      	bne.n	22198 <at_parse_detect_type+0x7c>
	state = new_state;
   22132:	2206      	movs	r2, #6
   22134:	4b60      	ldr	r3, [pc, #384]	; (222b8 <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   22136:	4620      	mov	r0, r4
	state = new_state;
   22138:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2213a:	4960      	ldr	r1, [pc, #384]	; (222bc <at_parse_detect_type+0x1a0>)
   2213c:	2205      	movs	r2, #5
   2213e:	f015 fc6d 	bl	37a1c <strncmp>
   22142:	b920      	cbnz	r0, 2214e <at_parse_detect_type+0x32>
			retval = true;
   22144:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   22146:	7030      	strb	r0, [r6, #0]
	return 0;
   22148:	2000      	movs	r0, #0
	*str = tmpstr;
   2214a:	602c      	str	r4, [r5, #0]
	return 0;
   2214c:	e064      	b.n	22218 <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2214e:	2205      	movs	r2, #5
   22150:	4620      	mov	r0, r4
   22152:	495b      	ldr	r1, [pc, #364]	; (222c0 <at_parse_detect_type+0x1a4>)
   22154:	f015 fc62 	bl	37a1c <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   22158:	2800      	cmp	r0, #0
   2215a:	d0f3      	beq.n	22144 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   2215c:	220b      	movs	r2, #11
   2215e:	4620      	mov	r0, r4
   22160:	4958      	ldr	r1, [pc, #352]	; (222c4 <at_parse_detect_type+0x1a8>)
   22162:	f015 fc5b 	bl	37a1c <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   22166:	2800      	cmp	r0, #0
   22168:	d0ec      	beq.n	22144 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   2216a:	220a      	movs	r2, #10
   2216c:	4620      	mov	r0, r4
   2216e:	4956      	ldr	r1, [pc, #344]	; (222c8 <at_parse_detect_type+0x1ac>)
   22170:	f015 fc54 	bl	37a1c <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   22174:	2800      	cmp	r0, #0
   22176:	d0e5      	beq.n	22144 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   22178:	220b      	movs	r2, #11
   2217a:	4620      	mov	r0, r4
   2217c:	4953      	ldr	r1, [pc, #332]	; (222cc <at_parse_detect_type+0x1b0>)
   2217e:	f015 fc4d 	bl	37a1c <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   22182:	2800      	cmp	r0, #0
   22184:	d0de      	beq.n	22144 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   22186:	2207      	movs	r2, #7
   22188:	4620      	mov	r0, r4
   2218a:	4951      	ldr	r1, [pc, #324]	; (222d0 <at_parse_detect_type+0x1b4>)
   2218c:	f015 fc46 	bl	37a1c <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   22190:	fab0 f080 	clz	r0, r0
   22194:	0940      	lsrs	r0, r0, #5
   22196:	e7d6      	b.n	22146 <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   22198:	7833      	ldrb	r3, [r6, #0]
   2219a:	b113      	cbz	r3, 221a2 <at_parse_detect_type+0x86>
	state = new_state;
   2219c:	4b46      	ldr	r3, [pc, #280]	; (222b8 <at_parse_detect_type+0x19c>)
   2219e:	2202      	movs	r2, #2
   221a0:	e043      	b.n	2222a <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   221a2:	2900      	cmp	r1, #0
   221a4:	dd39      	ble.n	2221a <at_parse_detect_type+0xfe>
   221a6:	4622      	mov	r2, r4
   221a8:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   221aa:	f812 0b01 	ldrb.w	r0, [r2], #1
   221ae:	f013 fb64 	bl	3587a <is_lfcr>
   221b2:	2800      	cmp	r0, #0
   221b4:	d1f8      	bne.n	221a8 <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   221b6:	4630      	mov	r0, r6
   221b8:	f7ef f9a2 	bl	11500 <strlen>
   221bc:	2803      	cmp	r0, #3
   221be:	d970      	bls.n	222a2 <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   221c0:	7832      	ldrb	r2, [r6, #0]
   221c2:	4b44      	ldr	r3, [pc, #272]	; (222d4 <at_parse_detect_type+0x1b8>)
   221c4:	5cd1      	ldrb	r1, [r2, r3]
   221c6:	f001 0103 	and.w	r1, r1, #3
   221ca:	2902      	cmp	r1, #2
   221cc:	bf08      	it	eq
   221ce:	3a20      	subeq	r2, #32
   221d0:	2a41      	cmp	r2, #65	; 0x41
   221d2:	d166      	bne.n	222a2 <at_parse_detect_type+0x186>
   221d4:	7872      	ldrb	r2, [r6, #1]
   221d6:	5c99      	ldrb	r1, [r3, r2]
   221d8:	f001 0103 	and.w	r1, r1, #3
   221dc:	2902      	cmp	r1, #2
   221de:	bf08      	it	eq
   221e0:	3a20      	subeq	r2, #32
   221e2:	2a54      	cmp	r2, #84	; 0x54
   221e4:	d15d      	bne.n	222a2 <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   221e6:	78b2      	ldrb	r2, [r6, #2]
   221e8:	5c99      	ldrb	r1, [r3, r2]
   221ea:	f001 0103 	and.w	r1, r1, #3
   221ee:	2902      	cmp	r1, #2
   221f0:	bf08      	it	eq
   221f2:	3a20      	subeq	r2, #32
   221f4:	2a2b      	cmp	r2, #43	; 0x2b
   221f6:	d00a      	beq.n	2220e <at_parse_detect_type+0xf2>
   221f8:	2a25      	cmp	r2, #37	; 0x25
   221fa:	d152      	bne.n	222a2 <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   221fc:	78f2      	ldrb	r2, [r6, #3]
   221fe:	5c9b      	ldrb	r3, [r3, r2]
   22200:	f003 0303 	and.w	r3, r3, #3
   22204:	2b02      	cmp	r3, #2
   22206:	bf08      	it	eq
   22208:	3a20      	subeq	r2, #32
   2220a:	2a58      	cmp	r2, #88	; 0x58
   2220c:	d049      	beq.n	222a2 <at_parse_detect_type+0x186>
	state = new_state;
   2220e:	2209      	movs	r2, #9
		return -2;
   22210:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   22214:	4b28      	ldr	r3, [pc, #160]	; (222b8 <at_parse_detect_type+0x19c>)
   22216:	701a      	strb	r2, [r3, #0]
}
   22218:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   2221a:	d108      	bne.n	2222e <at_parse_detect_type+0x112>
   2221c:	4620      	mov	r0, r4
   2221e:	f7ff ff4d 	bl	220bc <is_command>
   22222:	4b25      	ldr	r3, [pc, #148]	; (222b8 <at_parse_detect_type+0x19c>)
   22224:	2800      	cmp	r0, #0
   22226:	d0ba      	beq.n	2219e <at_parse_detect_type+0x82>
	state = new_state;
   22228:	2207      	movs	r2, #7
   2222a:	701a      	strb	r2, [r3, #0]
}
   2222c:	e78c      	b.n	22148 <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   2222e:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   22230:	4b28      	ldr	r3, [pc, #160]	; (222d4 <at_parse_detect_type+0x1b8>)
   22232:	5cd3      	ldrb	r3, [r2, r3]
   22234:	0759      	lsls	r1, r3, #29
   22236:	d403      	bmi.n	22240 <at_parse_detect_type+0x124>
   22238:	2a2d      	cmp	r2, #45	; 0x2d
   2223a:	d001      	beq.n	22240 <at_parse_detect_type+0x124>
   2223c:	2a2b      	cmp	r2, #43	; 0x2b
   2223e:	d102      	bne.n	22246 <at_parse_detect_type+0x12a>
	state = new_state;
   22240:	2204      	movs	r2, #4
   22242:	4b1d      	ldr	r3, [pc, #116]	; (222b8 <at_parse_detect_type+0x19c>)
   22244:	e7f1      	b.n	2222a <at_parse_detect_type+0x10e>
	if (chr == '"') {
   22246:	2a22      	cmp	r2, #34	; 0x22
   22248:	d006      	beq.n	22258 <at_parse_detect_type+0x13c>
	if (chr == '(') {
   2224a:	2a28      	cmp	r2, #40	; 0x28
   2224c:	d109      	bne.n	22262 <at_parse_detect_type+0x146>
   2224e:	2201      	movs	r2, #1
   22250:	4b19      	ldr	r3, [pc, #100]	; (222b8 <at_parse_detect_type+0x19c>)
		tmpstr++;
   22252:	4414      	add	r4, r2
	state = new_state;
   22254:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   22256:	e777      	b.n	22148 <at_parse_detect_type+0x2c>
	state = new_state;
   22258:	2203      	movs	r2, #3
   2225a:	4b17      	ldr	r3, [pc, #92]	; (222b8 <at_parse_detect_type+0x19c>)
		tmpstr++;
   2225c:	3401      	adds	r4, #1
	state = new_state;
   2225e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   22260:	e772      	b.n	22148 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   22262:	4610      	mov	r0, r2
   22264:	f013 fb09 	bl	3587a <is_lfcr>
   22268:	b178      	cbz	r0, 2228a <at_parse_detect_type+0x16e>
   2226a:	4913      	ldr	r1, [pc, #76]	; (222b8 <at_parse_detect_type+0x19c>)
   2226c:	7808      	ldrb	r0, [r1, #0]
   2226e:	2804      	cmp	r0, #4
   22270:	d108      	bne.n	22284 <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   22272:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   22276:	f013 fb00 	bl	3587a <is_lfcr>
   2227a:	2800      	cmp	r0, #0
   2227c:	d1f9      	bne.n	22272 <at_parse_detect_type+0x156>
	state = new_state;
   2227e:	2305      	movs	r3, #5
   22280:	700b      	strb	r3, [r1, #0]
}
   22282:	e761      	b.n	22148 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   22284:	2808      	cmp	r0, #8
   22286:	f43f af5f 	beq.w	22148 <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2228a:	3a2c      	subs	r2, #44	; 0x2c
   2228c:	b2d2      	uxtb	r2, r2
   2228e:	2a11      	cmp	r2, #17
   22290:	d80c      	bhi.n	222ac <at_parse_detect_type+0x190>
   22292:	4b11      	ldr	r3, [pc, #68]	; (222d8 <at_parse_detect_type+0x1bc>)
   22294:	fa23 f202 	lsr.w	r2, r3, r2
   22298:	07d3      	lsls	r3, r2, #31
   2229a:	d507      	bpl.n	222ac <at_parse_detect_type+0x190>
	state = new_state;
   2229c:	2208      	movs	r2, #8
   2229e:	4b06      	ldr	r3, [pc, #24]	; (222b8 <at_parse_detect_type+0x19c>)
   222a0:	e7c3      	b.n	2222a <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   222a2:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   222a4:	2b2b      	cmp	r3, #43	; 0x2b
   222a6:	d001      	beq.n	222ac <at_parse_detect_type+0x190>
   222a8:	2b25      	cmp	r3, #37	; 0x25
   222aa:	d1c0      	bne.n	2222e <at_parse_detect_type+0x112>
		return -1;
   222ac:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   222b0:	602c      	str	r4, [r5, #0]
		return -1;
   222b2:	e7b1      	b.n	22218 <at_parse_detect_type+0xfc>
   222b4:	2001c653 	.word	0x2001c653
   222b8:	2001c654 	.word	0x2001c654
   222bc:	0003dc4f 	.word	0x0003dc4f
   222c0:	0003dc55 	.word	0x0003dc55
   222c4:	0003dc5b 	.word	0x0003dc5b
   222c8:	0003dc67 	.word	0x0003dc67
   222cc:	0003dc72 	.word	0x0003dc72
   222d0:	0003dc7e 	.word	0x0003dc7e
   222d4:	00040efd 	.word	0x00040efd
   222d8:	00024001 	.word	0x00024001

000222dc <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   222dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222e0:	4689      	mov	r9, r1
   222e2:	4616      	mov	r6, r2
   222e4:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   222e6:	4680      	mov	r8, r0
{
   222e8:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   222ea:	2800      	cmp	r0, #0
   222ec:	f000 808b 	beq.w	22406 <at_parser_max_params_from_str+0x12a>
   222f0:	2a00      	cmp	r2, #0
   222f2:	f000 8088 	beq.w	22406 <at_parser_max_params_from_str+0x12a>
   222f6:	6853      	ldr	r3, [r2, #4]
   222f8:	2b00      	cmp	r3, #0
   222fa:	f000 8084 	beq.w	22406 <at_parser_max_params_from_str+0x12a>
	state = IDLE;
   222fe:	2500      	movs	r5, #0
	int index = 0;
   22300:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   22302:	4610      	mov	r0, r2
   22304:	f000 f8f4 	bl	224f0 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   22308:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   2230a:	f8df a108 	ldr.w	sl, [pc, #264]	; 22414 <at_parser_max_params_from_str+0x138>
	max_params_count = MIN(max_params_count, list->param_count);
   2230e:	429f      	cmp	r7, r3
   22310:	bf28      	it	cs
   22312:	461f      	movcs	r7, r3
	state = IDLE;
   22314:	4b3d      	ldr	r3, [pc, #244]	; (2240c <at_parser_max_params_from_str+0x130>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   22316:	f8df b100 	ldr.w	fp, [pc, #256]	; 22418 <at_parser_max_params_from_str+0x13c>
   2231a:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   2231c:	4b3c      	ldr	r3, [pc, #240]	; (22410 <at_parser_max_params_from_str+0x134>)
	const char *str = *at_params_str;
   2231e:	f8cd 800c 	str.w	r8, [sp, #12]
	set_type_string = false;
   22322:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   22324:	9b03      	ldr	r3, [sp, #12]
   22326:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   22328:	2a00      	cmp	r2, #0
   2232a:	d052      	beq.n	223d2 <at_parser_max_params_from_str+0xf6>
   2232c:	42a7      	cmp	r7, r4
   2232e:	d950      	bls.n	223d2 <at_parser_max_params_from_str+0xf6>
		if (isspace((int)*str)) {
   22330:	f812 200a 	ldrb.w	r2, [r2, sl]
		ret = at_parse_detect_type(&str, index);
   22334:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   22336:	0711      	lsls	r1, r2, #28
			str++;
   22338:	bf48      	it	mi
   2233a:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   2233c:	4621      	mov	r1, r4
			str++;
   2233e:	bf48      	it	mi
   22340:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   22342:	f7ff feeb 	bl	2211c <at_parse_detect_type>
		if (ret == -1) {
   22346:	1c42      	adds	r2, r0, #1
   22348:	d043      	beq.n	223d2 <at_parser_max_params_from_str+0xf6>
		if (ret == -2) {
   2234a:	3002      	adds	r0, #2
			index = 0;
   2234c:	bf08      	it	eq
   2234e:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   22350:	4632      	mov	r2, r6
   22352:	4621      	mov	r1, r4
   22354:	a803      	add	r0, sp, #12
			str = *at_params_str;
   22356:	bf08      	it	eq
   22358:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   2235c:	f7ff fdce 	bl	21efc <at_parse_process_element>
   22360:	1c43      	adds	r3, r0, #1
   22362:	d036      	beq.n	223d2 <at_parser_max_params_from_str+0xf6>
		if (is_separator(*str)) {
   22364:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   22366:	7813      	ldrb	r3, [r2, #0]
   22368:	3b2c      	subs	r3, #44	; 0x2c
   2236a:	b2db      	uxtb	r3, r3
   2236c:	2b11      	cmp	r3, #17
   2236e:	d81a      	bhi.n	223a6 <at_parser_max_params_from_str+0xca>
   22370:	fa2b f303 	lsr.w	r3, fp, r3
   22374:	07d9      	lsls	r1, r3, #31
   22376:	d516      	bpl.n	223a6 <at_parser_max_params_from_str+0xca>
			if (is_lfcr(*(str + 1))) {
   22378:	7850      	ldrb	r0, [r2, #1]
   2237a:	f013 fa7e 	bl	3587a <is_lfcr>
   2237e:	b178      	cbz	r0, 223a0 <at_parser_max_params_from_str+0xc4>
				index++;
   22380:	3401      	adds	r4, #1
				if (index == max_params) {
   22382:	42bc      	cmp	r4, r7
   22384:	d03a      	beq.n	223fc <at_parser_max_params_from_str+0x120>
				if (at_parse_detect_type(&str, index) == -1) {
   22386:	4621      	mov	r1, r4
   22388:	a803      	add	r0, sp, #12
   2238a:	f7ff fec7 	bl	2211c <at_parse_detect_type>
   2238e:	1c42      	adds	r2, r0, #1
   22390:	d01f      	beq.n	223d2 <at_parser_max_params_from_str+0xf6>
				if (at_parse_process_element(&str, index,
   22392:	4632      	mov	r2, r6
   22394:	4621      	mov	r1, r4
   22396:	a803      	add	r0, sp, #12
   22398:	f7ff fdb0 	bl	21efc <at_parse_process_element>
   2239c:	1c43      	adds	r3, r0, #1
   2239e:	d018      	beq.n	223d2 <at_parser_max_params_from_str+0xf6>
			str++;
   223a0:	9b03      	ldr	r3, [sp, #12]
   223a2:	3301      	adds	r3, #1
   223a4:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   223a6:	9a03      	ldr	r2, [sp, #12]
   223a8:	7810      	ldrb	r0, [r2, #0]
   223aa:	f013 fa66 	bl	3587a <is_lfcr>
   223ae:	b300      	cbz	r0, 223f2 <at_parser_max_params_from_str+0x116>
   223b0:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   223b2:	4613      	mov	r3, r2
   223b4:	7811      	ldrb	r1, [r2, #0]
   223b6:	9301      	str	r3, [sp, #4]
   223b8:	4608      	mov	r0, r1
   223ba:	3201      	adds	r2, #1
   223bc:	f013 fa5d 	bl	3587a <is_lfcr>
   223c0:	9b01      	ldr	r3, [sp, #4]
   223c2:	2800      	cmp	r0, #0
   223c4:	d1f5      	bne.n	223b2 <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   223c6:	b119      	cbz	r1, 223d0 <at_parser_max_params_from_str+0xf4>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   223c8:	292b      	cmp	r1, #43	; 0x2b
   223ca:	d001      	beq.n	223d0 <at_parser_max_params_from_str+0xf4>
   223cc:	2925      	cmp	r1, #37	; 0x25
   223ce:	d110      	bne.n	223f2 <at_parser_max_params_from_str+0x116>
				str += i;
   223d0:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   223d2:	9b03      	ldr	r3, [sp, #12]
	if (oversized) {
   223d4:	b9a5      	cbnz	r5, 22400 <at_parser_max_params_from_str+0x124>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   223d6:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   223d8:	2a00      	cmp	r2, #0
   223da:	bf0c      	ite	eq
   223dc:	2000      	moveq	r0, #0
   223de:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   223e2:	f1b9 0f00 	cmp.w	r9, #0
   223e6:	d001      	beq.n	223ec <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   223e8:	f8c9 3000 	str.w	r3, [r9]
	}

	return err;
}
   223ec:	b005      	add	sp, #20
   223ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   223f2:	3401      	adds	r4, #1
			oversized = true;
   223f4:	42bc      	cmp	r4, r7
   223f6:	bf08      	it	eq
   223f8:	2501      	moveq	r5, #1
   223fa:	e793      	b.n	22324 <at_parser_max_params_from_str+0x48>
					oversized = true;
   223fc:	4605      	mov	r5, r0
   223fe:	e7e8      	b.n	223d2 <at_parser_max_params_from_str+0xf6>
		return -E2BIG;
   22400:	f06f 0006 	mvn.w	r0, #6
   22404:	e7ed      	b.n	223e2 <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   22406:	f06f 0015 	mvn.w	r0, #21
   2240a:	e7ef      	b.n	223ec <at_parser_max_params_from_str+0x110>
   2240c:	2001c654 	.word	0x2001c654
   22410:	2001c653 	.word	0x2001c653
   22414:	00040efd 	.word	0x00040efd
   22418:	00024001 	.word	0x00024001

0002241c <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   2241c:	b538      	push	{r3, r4, r5, lr}
   2241e:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   22420:	4604      	mov	r4, r0
   22422:	b960      	cbnz	r0, 2243e <at_params_get+0x22>
   22424:	490a      	ldr	r1, [pc, #40]	; (22450 <at_params_get+0x34>)
   22426:	232b      	movs	r3, #43	; 0x2b
   22428:	4a0a      	ldr	r2, [pc, #40]	; (22454 <at_params_get+0x38>)
   2242a:	480b      	ldr	r0, [pc, #44]	; (22458 <at_params_get+0x3c>)
   2242c:	f00d fc20 	bl	2fc70 <printk>
   22430:	480a      	ldr	r0, [pc, #40]	; (2245c <at_params_get+0x40>)
   22432:	f00d fc1d 	bl	2fc70 <printk>
   22436:	212b      	movs	r1, #43	; 0x2b
   22438:	4806      	ldr	r0, [pc, #24]	; (22454 <at_params_get+0x38>)
   2243a:	f00d feff 	bl	3023c <assert_post_action>

	if (index >= list->param_count) {
   2243e:	6823      	ldr	r3, [r4, #0]
   22440:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   22442:	bf8a      	itet	hi
   22444:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   22446:	2000      	movls	r0, #0
	return &param[index];
   22448:	eb00 1005 	addhi.w	r0, r0, r5, lsl #4
}
   2244c:	bd38      	pop	{r3, r4, r5, pc}
   2244e:	bf00      	nop
   22450:	0003dcb4 	.word	0x0003dcb4
   22454:	0003dc86 	.word	0x0003dc86
   22458:	0003a56b 	.word	0x0003a56b
   2245c:	0003dcc8 	.word	0x0003dcc8

00022460 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   22460:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   22462:	4604      	mov	r4, r0
   22464:	b960      	cbnz	r0, 22480 <at_param_size+0x20>
   22466:	490c      	ldr	r1, [pc, #48]	; (22498 <at_param_size+0x38>)
   22468:	2339      	movs	r3, #57	; 0x39
   2246a:	4a0c      	ldr	r2, [pc, #48]	; (2249c <at_param_size+0x3c>)
   2246c:	480c      	ldr	r0, [pc, #48]	; (224a0 <at_param_size+0x40>)
   2246e:	f00d fbff 	bl	2fc70 <printk>
   22472:	480c      	ldr	r0, [pc, #48]	; (224a4 <at_param_size+0x44>)
   22474:	f00d fbfc 	bl	2fc70 <printk>
   22478:	2139      	movs	r1, #57	; 0x39
   2247a:	4808      	ldr	r0, [pc, #32]	; (2249c <at_param_size+0x3c>)
   2247c:	f00d fede 	bl	3023c <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   22480:	7823      	ldrb	r3, [r4, #0]
   22482:	2b01      	cmp	r3, #1
   22484:	d004      	beq.n	22490 <at_param_size+0x30>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   22486:	3b02      	subs	r3, #2
   22488:	2b01      	cmp	r3, #1
   2248a:	d803      	bhi.n	22494 <at_param_size+0x34>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   2248c:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   2248e:	bd10      	pop	{r4, pc}
		return sizeof(uint64_t);
   22490:	2008      	movs	r0, #8
   22492:	e7fc      	b.n	2248e <at_param_size+0x2e>
	return 0;
   22494:	2000      	movs	r0, #0
   22496:	e7fa      	b.n	2248e <at_param_size+0x2e>
   22498:	0003dce9 	.word	0x0003dce9
   2249c:	0003dc86 	.word	0x0003dc86
   224a0:	0003a56b 	.word	0x0003a56b
   224a4:	0003dcfe 	.word	0x0003dcfe

000224a8 <at_param_clear>:
{
   224a8:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   224aa:	4604      	mov	r4, r0
   224ac:	b960      	cbnz	r0, 224c8 <at_param_clear+0x20>
   224ae:	490c      	ldr	r1, [pc, #48]	; (224e0 <at_param_clear+0x38>)
   224b0:	231d      	movs	r3, #29
   224b2:	4a0c      	ldr	r2, [pc, #48]	; (224e4 <at_param_clear+0x3c>)
   224b4:	480c      	ldr	r0, [pc, #48]	; (224e8 <at_param_clear+0x40>)
   224b6:	f00d fbdb 	bl	2fc70 <printk>
   224ba:	480c      	ldr	r0, [pc, #48]	; (224ec <at_param_clear+0x44>)
   224bc:	f00d fbd8 	bl	2fc70 <printk>
   224c0:	211d      	movs	r1, #29
   224c2:	4808      	ldr	r0, [pc, #32]	; (224e4 <at_param_clear+0x3c>)
   224c4:	f00d feba 	bl	3023c <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   224c8:	7823      	ldrb	r3, [r4, #0]
   224ca:	3b02      	subs	r3, #2
   224cc:	2b01      	cmp	r3, #1
   224ce:	d802      	bhi.n	224d6 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   224d0:	68a0      	ldr	r0, [r4, #8]
   224d2:	f015 f915 	bl	37700 <k_free>
	param->value.int_val = 0;
   224d6:	2200      	movs	r2, #0
   224d8:	2300      	movs	r3, #0
   224da:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   224de:	bd10      	pop	{r4, pc}
   224e0:	0003dce9 	.word	0x0003dce9
   224e4:	0003dc86 	.word	0x0003dc86
   224e8:	0003a56b 	.word	0x0003a56b
   224ec:	0003dcfe 	.word	0x0003dcfe

000224f0 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   224f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (list == NULL || list->params == NULL) {
   224f4:	4604      	mov	r4, r0
   224f6:	b150      	cbz	r0, 2250e <at_params_list_clear+0x1e>
   224f8:	6843      	ldr	r3, [r0, #4]
   224fa:	b143      	cbz	r3, 2250e <at_params_list_clear+0x1e>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   224fc:	2600      	movs	r6, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   224fe:	4f12      	ldr	r7, [pc, #72]	; (22548 <at_params_list_clear+0x58>)
   22500:	f8df 804c 	ldr.w	r8, [pc, #76]	; 22550 <at_params_list_clear+0x60>
   22504:	f8df 904c 	ldr.w	r9, [pc, #76]	; 22554 <at_params_list_clear+0x64>
	for (size_t i = 0; i < list->param_count; ++i) {
   22508:	6823      	ldr	r3, [r4, #0]
   2250a:	429e      	cmp	r6, r3
   2250c:	d301      	bcc.n	22512 <at_params_list_clear+0x22>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2250e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		at_param_clear(&params[i]);
   22512:	6865      	ldr	r5, [r4, #4]
   22514:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   22518:	4628      	mov	r0, r5
   2251a:	f7ff ffc5 	bl	224a8 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2251e:	b965      	cbnz	r5, 2253a <at_params_list_clear+0x4a>
   22520:	4641      	mov	r1, r8
   22522:	2314      	movs	r3, #20
   22524:	463a      	mov	r2, r7
   22526:	4648      	mov	r0, r9
   22528:	f00d fba2 	bl	2fc70 <printk>
   2252c:	4807      	ldr	r0, [pc, #28]	; (2254c <at_params_list_clear+0x5c>)
   2252e:	f00d fb9f 	bl	2fc70 <printk>
   22532:	2114      	movs	r1, #20
   22534:	4638      	mov	r0, r7
   22536:	f00d fe81 	bl	3023c <assert_post_action>
   2253a:	2210      	movs	r2, #16
   2253c:	2100      	movs	r1, #0
   2253e:	4628      	mov	r0, r5
   22540:	f015 f93f 	bl	377c2 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   22544:	3601      	adds	r6, #1
   22546:	e7df      	b.n	22508 <at_params_list_clear+0x18>
   22548:	0003dc86 	.word	0x0003dc86
   2254c:	0003dcfe 	.word	0x0003dcfe
   22550:	0003dce9 	.word	0x0003dce9
   22554:	0003a56b 	.word	0x0003a56b

00022558 <enable_notifications>:
{
	int err;
	char buf_sub[35];

	/* +CEREG notifications, level 5 */
	err = at_cmd_write(cereg_5_subscribe, NULL, 0, NULL);
   22558:	2300      	movs	r3, #0
{
   2255a:	b530      	push	{r4, r5, lr}
	err = at_cmd_write(cereg_5_subscribe, NULL, 0, NULL);
   2255c:	461a      	mov	r2, r3
   2255e:	4619      	mov	r1, r3
   22560:	481e      	ldr	r0, [pc, #120]	; (225dc <enable_notifications+0x84>)
{
   22562:	b08f      	sub	sp, #60	; 0x3c
	err = at_cmd_write(cereg_5_subscribe, NULL, 0, NULL);
   22564:	f7ff fb44 	bl	21bf0 <at_cmd_write>
	if (err) {
   22568:	4605      	mov	r5, r0
   2256a:	b160      	cbz	r0, 22586 <enable_notifications+0x2e>
   2256c:	491c      	ldr	r1, [pc, #112]	; (225e0 <enable_notifications+0x88>)
   2256e:	4b1d      	ldr	r3, [pc, #116]	; (225e4 <enable_notifications+0x8c>)
		LOG_ERR("Failed to subscribe to CEREG notifications");
   22570:	481d      	ldr	r0, [pc, #116]	; (225e8 <enable_notifications+0x90>)
   22572:	1ac9      	subs	r1, r1, r3
   22574:	08c9      	lsrs	r1, r1, #3
   22576:	0189      	lsls	r1, r1, #6
   22578:	f041 0101 	orr.w	r1, r1, #1
   2257c:	f00d feac 	bl	302d8 <log_0>
				log_strdup(buf));
		}
	}

	return 0;
}
   22580:	4628      	mov	r0, r5
   22582:	b00f      	add	sp, #60	; 0x3c
   22584:	bd30      	pop	{r4, r5, pc}
	err = at_cmd_write(cscon, NULL, 0, NULL);
   22586:	4602      	mov	r2, r0
   22588:	4603      	mov	r3, r0
   2258a:	4601      	mov	r1, r0
   2258c:	4817      	ldr	r0, [pc, #92]	; (225ec <enable_notifications+0x94>)
   2258e:	f7ff fb2f 	bl	21bf0 <at_cmd_write>
	if (err) {
   22592:	4602      	mov	r2, r0
   22594:	2800      	cmp	r0, #0
   22596:	d0f3      	beq.n	22580 <enable_notifications+0x28>
   22598:	4b12      	ldr	r3, [pc, #72]	; (225e4 <enable_notifications+0x8c>)
   2259a:	4c11      	ldr	r4, [pc, #68]	; (225e0 <enable_notifications+0x88>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   2259c:	4913      	ldr	r1, [pc, #76]	; (225ec <enable_notifications+0x94>)
   2259e:	1ae4      	subs	r4, r4, r3
   225a0:	08e4      	lsrs	r4, r4, #3
   225a2:	01a4      	lsls	r4, r4, #6
   225a4:	f044 0402 	orr.w	r4, r4, #2
   225a8:	4623      	mov	r3, r4
   225aa:	4811      	ldr	r0, [pc, #68]	; (225f0 <enable_notifications+0x98>)
   225ac:	f00d feb5 	bl	3031a <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   225b0:	4622      	mov	r2, r4
   225b2:	490e      	ldr	r1, [pc, #56]	; (225ec <enable_notifications+0x94>)
   225b4:	480f      	ldr	r0, [pc, #60]	; (225f4 <enable_notifications+0x9c>)
   225b6:	f00d fe9c 	bl	302f2 <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   225ba:	462b      	mov	r3, r5
   225bc:	2232      	movs	r2, #50	; 0x32
   225be:	480e      	ldr	r0, [pc, #56]	; (225f8 <enable_notifications+0xa0>)
   225c0:	a901      	add	r1, sp, #4
   225c2:	f7ff fb15 	bl	21bf0 <at_cmd_write>
		if (err == 0) {
   225c6:	2800      	cmp	r0, #0
   225c8:	d1da      	bne.n	22580 <enable_notifications+0x28>
   225ca:	a801      	add	r0, sp, #4
   225cc:	f7f2 fce6 	bl	14f9c <z_log_strdup>
			LOG_WRN("Current modem firmware version: %s",
   225d0:	4622      	mov	r2, r4
   225d2:	4601      	mov	r1, r0
   225d4:	4809      	ldr	r0, [pc, #36]	; (225fc <enable_notifications+0xa4>)
   225d6:	f00d fe8c 	bl	302f2 <log_1>
   225da:	e7d1      	b.n	22580 <enable_notifications+0x28>
   225dc:	0003e673 	.word	0x0003e673
   225e0:	00038880 	.word	0x00038880
   225e4:	000387c0 	.word	0x000387c0
   225e8:	0003dd1a 	.word	0x0003dd1a
   225ec:	0003e67e 	.word	0x0003e67e
   225f0:	0003dd45 	.word	0x0003dd45
   225f4:	0003dd77 	.word	0x0003dd77
   225f8:	0003dda2 	.word	0x0003dda2
   225fc:	0003ddaa 	.word	0x0003ddaa

00022600 <at_handler>:
{
   22600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22604:	460e      	mov	r6, r1
   22606:	b09e      	sub	sp, #120	; 0x78
	struct lte_lc_evt evt = {0};
   22608:	2238      	movs	r2, #56	; 0x38
   2260a:	2100      	movs	r1, #0
   2260c:	a810      	add	r0, sp, #64	; 0x40
   2260e:	f015 f8d8 	bl	377c2 <memset>
	if (response == NULL) {
   22612:	b956      	cbnz	r6, 2262a <at_handler+0x2a>
   22614:	49ab      	ldr	r1, [pc, #684]	; (228c4 <at_handler+0x2c4>)
   22616:	4bac      	ldr	r3, [pc, #688]	; (228c8 <at_handler+0x2c8>)
		LOG_ERR("Response buffer is NULL-pointer");
   22618:	48ac      	ldr	r0, [pc, #688]	; (228cc <at_handler+0x2cc>)
   2261a:	1ac9      	subs	r1, r1, r3
   2261c:	08c9      	lsrs	r1, r1, #3
   2261e:	0189      	lsls	r1, r1, #6
   22620:	f041 0101 	orr.w	r1, r1, #1
				LOG_ERR("Failed to allocate memory for neighbor cells");
   22624:	f00d fe58 	bl	302d8 <log_0>
				return;
   22628:	e01f      	b.n	2266a <at_handler+0x6a>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   2262a:	2500      	movs	r5, #0
   2262c:	4ca8      	ldr	r4, [pc, #672]	; (228d0 <at_handler+0x2d0>)
		if (strncmp(at_notifs[i], notif,
   2262e:	f854 7b04 	ldr.w	r7, [r4], #4
   22632:	4638      	mov	r0, r7
   22634:	f7ee ff64 	bl	11500 <strlen>
   22638:	4631      	mov	r1, r6
   2263a:	4602      	mov	r2, r0
   2263c:	4638      	mov	r0, r7
   2263e:	f015 f9ed 	bl	37a1c <strncmp>
   22642:	b978      	cbnz	r0, 22664 <at_handler+0x64>
	switch (notif_type) {
   22644:	4c9f      	ldr	r4, [pc, #636]	; (228c4 <at_handler+0x2c4>)
   22646:	4ba0      	ldr	r3, [pc, #640]	; (228c8 <at_handler+0x2c8>)
   22648:	b2ed      	uxtb	r5, r5
   2264a:	1ae4      	subs	r4, r4, r3
   2264c:	08e4      	lsrs	r4, r4, #3
   2264e:	3d01      	subs	r5, #1
   22650:	01a4      	lsls	r4, r4, #6
   22652:	2d04      	cmp	r5, #4
   22654:	d80c      	bhi.n	22670 <at_handler+0x70>
   22656:	e8df f015 	tbh	[pc, r5, lsl #1]
   2265a:	00a6      	.short	0x00a6
   2265c:	00d000be 	.word	0x00d000be
   22660:	016700ec 	.word	0x016700ec
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   22664:	3501      	adds	r5, #1
   22666:	2d06      	cmp	r5, #6
   22668:	d1e1      	bne.n	2262e <at_handler+0x2e>
}
   2266a:	b01e      	add	sp, #120	; 0x78
   2266c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		enum lte_lc_nw_reg_status reg_status = 0;
   22670:	2300      	movs	r3, #0
   22672:	4630      	mov	r0, r6
   22674:	f88d 300e 	strb.w	r3, [sp, #14]
   22678:	f7f2 fc90 	bl	14f9c <z_log_strdup>
		LOG_DBG("+CEREG notification: %s", log_strdup(response));
   2267c:	f044 0504 	orr.w	r5, r4, #4
   22680:	4602      	mov	r2, r0
   22682:	462b      	mov	r3, r5
   22684:	4993      	ldr	r1, [pc, #588]	; (228d4 <at_handler+0x2d4>)
   22686:	4894      	ldr	r0, [pc, #592]	; (228d8 <at_handler+0x2d8>)
   22688:	f00d fe47 	bl	3031a <log_2>
		err = parse_cereg(response, true, &reg_status, &cell, &lte_mode, &psm_cfg);
   2268c:	af04      	add	r7, sp, #16
   2268e:	f10d 030f 	add.w	r3, sp, #15
   22692:	9300      	str	r3, [sp, #0]
   22694:	2101      	movs	r1, #1
   22696:	4630      	mov	r0, r6
   22698:	9701      	str	r7, [sp, #4]
   2269a:	ab06      	add	r3, sp, #24
   2269c:	f10d 020e 	add.w	r2, sp, #14
   226a0:	f000 fe90 	bl	233c4 <parse_cereg>
		if (err) {
   226a4:	4605      	mov	r5, r0
   226a6:	b158      	cbz	r0, 226c0 <at_handler+0xc0>
   226a8:	4630      	mov	r0, r6
   226aa:	f7f2 fc77 	bl	14f9c <z_log_strdup>
			LOG_ERR("Failed to parse notification (error %d): %s",
   226ae:	f044 0401 	orr.w	r4, r4, #1
   226b2:	4602      	mov	r2, r0
   226b4:	4623      	mov	r3, r4
   226b6:	4629      	mov	r1, r5
   226b8:	4888      	ldr	r0, [pc, #544]	; (228dc <at_handler+0x2dc>)
   226ba:	f00d fe2e 	bl	3031a <log_2>
			return;
   226be:	e7d4      	b.n	2266a <at_handler+0x6a>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   226c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   226c4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   226c8:	2b01      	cmp	r3, #1
   226ca:	d102      	bne.n	226d2 <at_handler+0xd2>
	z_impl_k_sem_give(sem);
   226cc:	4884      	ldr	r0, [pc, #528]	; (228e0 <at_handler+0x2e0>)
   226ce:	f008 fd97 	bl	2b200 <z_impl_k_sem_give>
		if (!evt_handler) {
   226d2:	4b84      	ldr	r3, [pc, #528]	; (228e4 <at_handler+0x2e4>)
   226d4:	681a      	ldr	r2, [r3, #0]
   226d6:	4698      	mov	r8, r3
   226d8:	2a00      	cmp	r2, #0
   226da:	d0c6      	beq.n	2266a <at_handler+0x6a>
		if (reg_status != prev_reg_status) {
   226dc:	4982      	ldr	r1, [pc, #520]	; (228e8 <at_handler+0x2e8>)
		switch (reg_status) {
   226de:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (reg_status != prev_reg_status) {
   226e2:	7808      	ldrb	r0, [r1, #0]
   226e4:	4298      	cmp	r0, r3
   226e6:	d007      	beq.n	226f8 <at_handler+0xf8>
			prev_reg_status = reg_status;
   226e8:	700b      	strb	r3, [r1, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   226ea:	2100      	movs	r1, #0
			evt.nw_reg_status = reg_status;
   226ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   226f0:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
			evt_handler(&evt);
   226f4:	a810      	add	r0, sp, #64	; 0x40
   226f6:	4790      	blx	r2
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   226f8:	2228      	movs	r2, #40	; 0x28
   226fa:	497c      	ldr	r1, [pc, #496]	; (228ec <at_handler+0x2ec>)
   226fc:	a806      	add	r0, sp, #24
   226fe:	f015 f832 	bl	37766 <memcmp>
   22702:	b1d0      	cbz	r0, 2273a <at_handler+0x13a>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
   22704:	2304      	movs	r3, #4
   22706:	4c79      	ldr	r4, [pc, #484]	; (228ec <at_handler+0x2ec>)
   22708:	ad06      	add	r5, sp, #24
   2270a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   2270e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   22710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   22712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   22714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   22716:	e895 0003 	ldmia.w	r5, {r0, r1}
   2271a:	e884 0003 	stmia.w	r4, {r0, r1}
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   2271e:	ae12      	add	r6, sp, #72	; 0x48
   22720:	ac06      	add	r4, sp, #24
   22722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   22724:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   22728:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2272a:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt_handler(&evt);
   2272e:	f8d8 3000 	ldr.w	r3, [r8]
   22732:	e886 0003 	stmia.w	r6, {r0, r1}
   22736:	a810      	add	r0, sp, #64	; 0x40
   22738:	4798      	blx	r3
		if (lte_mode != prev_lte_mode) {
   2273a:	4a6d      	ldr	r2, [pc, #436]	; (228f0 <at_handler+0x2f0>)
   2273c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   22740:	7811      	ldrb	r1, [r2, #0]
   22742:	4299      	cmp	r1, r3
   22744:	d009      	beq.n	2275a <at_handler+0x15a>
			prev_lte_mode = lte_mode;
   22746:	7013      	strb	r3, [r2, #0]
			evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   22748:	2205      	movs	r2, #5
			evt.lte_mode = lte_mode;
   2274a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
			evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   2274e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
			evt_handler(&evt);
   22752:	f8d8 3000 	ldr.w	r3, [r8]
   22756:	a810      	add	r0, sp, #64	; 0x40
   22758:	4798      	blx	r3
		if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   2275a:	f89d 400e 	ldrb.w	r4, [sp, #14]
   2275e:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   22762:	2c01      	cmp	r4, #1
   22764:	d181      	bne.n	2266a <at_handler+0x6a>
		if (memcmp(&psm_cfg, &prev_psm_cfg,
   22766:	4d63      	ldr	r5, [pc, #396]	; (228f4 <at_handler+0x2f4>)
   22768:	2208      	movs	r2, #8
   2276a:	4629      	mov	r1, r5
   2276c:	4638      	mov	r0, r7
   2276e:	f014 fffa 	bl	37766 <memcmp>
   22772:	b160      	cbz	r0, 2278e <at_handler+0x18e>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   22774:	e897 0003 	ldmia.w	r7, {r0, r1}
   22778:	ab12      	add	r3, sp, #72	; 0x48
   2277a:	e883 0003 	stmia.w	r3, {r0, r1}
   2277e:	e885 0003 	stmia.w	r5, {r0, r1}
			evt_handler(&evt);
   22782:	f8d8 3000 	ldr.w	r3, [r8]
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   22786:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
			evt_handler(&evt);
   2278a:	a810      	add	r0, sp, #64	; 0x40
   2278c:	4798      	blx	r3
	bool notify = false;
   2278e:	2300      	movs	r3, #0
	if (evt_handler && notify) {
   22790:	4a54      	ldr	r2, [pc, #336]	; (228e4 <at_handler+0x2e4>)
   22792:	6812      	ldr	r2, [r2, #0]
   22794:	2a00      	cmp	r2, #0
   22796:	f43f af68 	beq.w	2266a <at_handler+0x6a>
   2279a:	2b00      	cmp	r3, #0
   2279c:	f43f af65 	beq.w	2266a <at_handler+0x6a>
		evt_handler(&evt);
   227a0:	a810      	add	r0, sp, #64	; 0x40
   227a2:	4790      	blx	r2
   227a4:	e761      	b.n	2266a <at_handler+0x6a>
		LOG_DBG("+CSCON notification");
   227a6:	494b      	ldr	r1, [pc, #300]	; (228d4 <at_handler+0x2d4>)
   227a8:	4853      	ldr	r0, [pc, #332]	; (228f8 <at_handler+0x2f8>)
   227aa:	f044 0204 	orr.w	r2, r4, #4
   227ae:	f00d fda0 	bl	302f2 <log_1>
		err = parse_rrc_mode(response,
   227b2:	a912      	add	r1, sp, #72	; 0x48
   227b4:	2201      	movs	r2, #1
   227b6:	4630      	mov	r0, r6
   227b8:	f000 fda0 	bl	232fc <parse_rrc_mode>
		if (err) {
   227bc:	4601      	mov	r1, r0
   227be:	b128      	cbz	r0, 227cc <at_handler+0x1cc>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
   227c0:	484e      	ldr	r0, [pc, #312]	; (228fc <at_handler+0x2fc>)
   227c2:	f044 0201 	orr.w	r2, r4, #1
			LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   227c6:	f00d fd94 	bl	302f2 <log_1>
			return;
   227ca:	e74e      	b.n	2266a <at_handler+0x6a>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
   227cc:	2303      	movs	r3, #3
			evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   227ce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		notify = true;
   227d2:	2301      	movs	r3, #1
   227d4:	e7dc      	b.n	22790 <at_handler+0x190>
		LOG_DBG("+CEDRXP notification");
   227d6:	493f      	ldr	r1, [pc, #252]	; (228d4 <at_handler+0x2d4>)
   227d8:	4849      	ldr	r0, [pc, #292]	; (22900 <at_handler+0x300>)
   227da:	f044 0204 	orr.w	r2, r4, #4
   227de:	f00d fd88 	bl	302f2 <log_1>
		err = parse_edrx(response, &evt.edrx_cfg);
   227e2:	a912      	add	r1, sp, #72	; 0x48
   227e4:	4630      	mov	r0, r6
   227e6:	f7ee ff37 	bl	11658 <parse_edrx>
		if (err) {
   227ea:	4601      	mov	r1, r0
   227ec:	b118      	cbz	r0, 227f6 <at_handler+0x1f6>
			LOG_ERR("Can't parse eDRX, error: %d", err);
   227ee:	4845      	ldr	r0, [pc, #276]	; (22904 <at_handler+0x304>)
   227f0:	f044 0201 	orr.w	r2, r4, #1
   227f4:	e7e7      	b.n	227c6 <at_handler+0x1c6>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   227f6:	2302      	movs	r3, #2
   227f8:	e7e9      	b.n	227ce <at_handler+0x1ce>
		LOG_DBG("%%XT3412 notification");
   227fa:	4936      	ldr	r1, [pc, #216]	; (228d4 <at_handler+0x2d4>)
   227fc:	4842      	ldr	r0, [pc, #264]	; (22908 <at_handler+0x308>)
   227fe:	f044 0204 	orr.w	r2, r4, #4
   22802:	f00d fd76 	bl	302f2 <log_1>
		err = parse_xt3412(response, &evt.time);
   22806:	a912      	add	r1, sp, #72	; 0x48
   22808:	4630      	mov	r0, r6
   2280a:	f000 ff3d 	bl	23688 <parse_xt3412>
		if (err) {
   2280e:	4601      	mov	r1, r0
   22810:	b118      	cbz	r0, 2281a <at_handler+0x21a>
			LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   22812:	483e      	ldr	r0, [pc, #248]	; (2290c <at_handler+0x30c>)
   22814:	f044 0201 	orr.w	r2, r4, #1
   22818:	e7d5      	b.n	227c6 <at_handler+0x1c6>
		if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   2281a:	2300      	movs	r3, #0
   2281c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   22820:	f241 3288 	movw	r2, #5000	; 0x1388
   22824:	4299      	cmp	r1, r3
   22826:	bf08      	it	eq
   22828:	4290      	cmpeq	r0, r2
   2282a:	f47f af1e 	bne.w	2266a <at_handler+0x6a>
		evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   2282e:	2306      	movs	r3, #6
   22830:	e7cd      	b.n	227ce <at_handler+0x1ce>
		int ncell_count = neighborcell_count_get(response);
   22832:	4630      	mov	r0, r6
   22834:	f000 ff94 	bl	23760 <neighborcell_count_get>
   22838:	4605      	mov	r5, r0
		LOG_DBG("%%NCELLMEAS notification");
   2283a:	f044 0704 	orr.w	r7, r4, #4
   2283e:	463a      	mov	r2, r7
   22840:	4924      	ldr	r1, [pc, #144]	; (228d4 <at_handler+0x2d4>)
   22842:	4833      	ldr	r0, [pc, #204]	; (22910 <at_handler+0x310>)
   22844:	f00d fd55 	bl	302f2 <log_1>
		LOG_DBG("Neighbor cell count: %d", ncell_count);
   22848:	463b      	mov	r3, r7
		if (!evt_handler) {
   2284a:	4f26      	ldr	r7, [pc, #152]	; (228e4 <at_handler+0x2e4>)
		LOG_DBG("Neighbor cell count: %d", ncell_count);
   2284c:	462a      	mov	r2, r5
   2284e:	4921      	ldr	r1, [pc, #132]	; (228d4 <at_handler+0x2d4>)
   22850:	4830      	ldr	r0, [pc, #192]	; (22914 <at_handler+0x314>)
   22852:	f00d fd62 	bl	3031a <log_2>
		if (!evt_handler) {
   22856:	683a      	ldr	r2, [r7, #0]
   22858:	2a00      	cmp	r2, #0
   2285a:	f43f af06 	beq.w	2266a <at_handler+0x6a>
		if (ncell_count != 0) {
   2285e:	b14d      	cbz	r5, 22874 <at_handler+0x274>
			neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   22860:	4628      	mov	r0, r5
   22862:	2110      	movs	r1, #16
   22864:	f014 ff57 	bl	37716 <k_calloc>
			if (neighbor_cells == NULL) {
   22868:	4605      	mov	r5, r0
   2286a:	b918      	cbnz	r0, 22874 <at_handler+0x274>
				LOG_ERR("Failed to allocate memory for neighbor cells");
   2286c:	482a      	ldr	r0, [pc, #168]	; (22918 <at_handler+0x318>)
   2286e:	f044 0101 	orr.w	r1, r4, #1
   22872:	e6d7      	b.n	22624 <at_handler+0x24>
		err = parse_ncellmeas(response, &evt.cells_info);
   22874:	a912      	add	r1, sp, #72	; 0x48
   22876:	4630      	mov	r0, r6
		evt.cells_info.neighbor_cells = neighbor_cells;
   22878:	951d      	str	r5, [sp, #116]	; 0x74
		err = parse_ncellmeas(response, &evt.cells_info);
   2287a:	f000 ff97 	bl	237ac <parse_ncellmeas>
   2287e:	1dc3      	adds	r3, r0, #7
   22880:	4601      	mov	r1, r0
		switch (err) {
   22882:	d007      	beq.n	22894 <at_handler+0x294>
   22884:	2801      	cmp	r0, #1
   22886:	d910      	bls.n	228aa <at_handler+0x2aa>
			LOG_ERR("Parsing of neighbour cells failed, err: %d", err);
   22888:	4824      	ldr	r0, [pc, #144]	; (2291c <at_handler+0x31c>)
   2288a:	f044 0201 	orr.w	r2, r4, #1
   2288e:	f00d fd30 	bl	302f2 <log_1>
   22892:	e010      	b.n	228b6 <at_handler+0x2b6>
			LOG_WRN("Not all neighbor cells could be parsed");
   22894:	f044 0402 	orr.w	r4, r4, #2
   22898:	4621      	mov	r1, r4
   2289a:	4821      	ldr	r0, [pc, #132]	; (22920 <at_handler+0x320>)
   2289c:	f00d fd1c 	bl	302d8 <log_0>
			LOG_WRN("More cells than the configured max count of %d were found",
   228a0:	4622      	mov	r2, r4
   228a2:	210a      	movs	r1, #10
   228a4:	481f      	ldr	r0, [pc, #124]	; (22924 <at_handler+0x324>)
   228a6:	f00d fd24 	bl	302f2 <log_1>
			evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   228aa:	2307      	movs	r3, #7
			evt_handler(&evt);
   228ac:	a810      	add	r0, sp, #64	; 0x40
			evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   228ae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
			evt_handler(&evt);
   228b2:	683b      	ldr	r3, [r7, #0]
   228b4:	4798      	blx	r3
		if (neighbor_cells) {
   228b6:	2d00      	cmp	r5, #0
   228b8:	f43f aed7 	beq.w	2266a <at_handler+0x6a>
			k_free(neighbor_cells);
   228bc:	4628      	mov	r0, r5
   228be:	f014 ff1f 	bl	37700 <k_free>
   228c2:	e6d2      	b.n	2266a <at_handler+0x6a>
   228c4:	00038880 	.word	0x00038880
   228c8:	000387c0 	.word	0x000387c0
   228cc:	0003ddcd 	.word	0x0003ddcd
   228d0:	000393d0 	.word	0x000393d0
   228d4:	0003e62a 	.word	0x0003e62a
   228d8:	0003dded 	.word	0x0003dded
   228dc:	0003de09 	.word	0x0003de09
   228e0:	20016844 	.word	0x20016844
   228e4:	20016840 	.word	0x20016840
   228e8:	2001c659 	.word	0x2001c659
   228ec:	20015c58 	.word	0x20015c58
   228f0:	2001c658 	.word	0x2001c658
   228f4:	2001685c 	.word	0x2001685c
   228f8:	0003de35 	.word	0x0003de35
   228fc:	0003de4d 	.word	0x0003de4d
   22900:	0003de74 	.word	0x0003de74
   22904:	0003de8d 	.word	0x0003de8d
   22908:	0003dea9 	.word	0x0003dea9
   2290c:	0003dec3 	.word	0x0003dec3
   22910:	0003def7 	.word	0x0003def7
   22914:	0003df14 	.word	0x0003df14
   22918:	0003df30 	.word	0x0003df30
   2291c:	0003dfbe 	.word	0x0003dfbe
   22920:	0003df5d 	.word	0x0003df5d
   22924:	0003df84 	.word	0x0003df84
		LOG_DBG("%%XMODEMSLEEP notification");
   22928:	4913      	ldr	r1, [pc, #76]	; (22978 <at_handler+0x378>)
   2292a:	4814      	ldr	r0, [pc, #80]	; (2297c <at_handler+0x37c>)
   2292c:	f044 0204 	orr.w	r2, r4, #4
   22930:	f00d fcdf 	bl	302f2 <log_1>
		err = parse_xmodemsleep(response, &evt.modem_sleep);
   22934:	a912      	add	r1, sp, #72	; 0x48
   22936:	4630      	mov	r0, r6
   22938:	f001 f880 	bl	23a3c <parse_xmodemsleep>
		if (err) {
   2293c:	4601      	mov	r1, r0
   2293e:	b118      	cbz	r0, 22948 <at_handler+0x348>
			LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   22940:	480f      	ldr	r0, [pc, #60]	; (22980 <at_handler+0x380>)
   22942:	f044 0201 	orr.w	r2, r4, #1
   22946:	e73e      	b.n	227c6 <at_handler+0x1c6>
		if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   22948:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   2294c:	1e5a      	subs	r2, r3, #1
   2294e:	2a01      	cmp	r2, #1
   22950:	d902      	bls.n	22958 <at_handler+0x358>
		    (evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   22952:	2b04      	cmp	r3, #4
   22954:	f47f ae89 	bne.w	2266a <at_handler+0x6a>
		if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   22958:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   2295c:	2100      	movs	r1, #0
   2295e:	f241 3088 	movw	r0, #5000	; 0x1388
   22962:	428b      	cmp	r3, r1
   22964:	bf08      	it	eq
   22966:	4282      	cmpeq	r2, r0
   22968:	d101      	bne.n	2296e <at_handler+0x36e>
			evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   2296a:	2308      	movs	r3, #8
   2296c:	e72f      	b.n	227ce <at_handler+0x1ce>
		} else if (evt.modem_sleep.time == 0) {
   2296e:	4313      	orrs	r3, r2
			evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   22970:	bf0c      	ite	eq
   22972:	2309      	moveq	r3, #9
			evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   22974:	230a      	movne	r3, #10
   22976:	e72a      	b.n	227ce <at_handler+0x1ce>
   22978:	0003e62a 	.word	0x0003e62a
   2297c:	0003dfe9 	.word	0x0003dfe9
   22980:	0003e008 	.word	0x0003e008

00022984 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   22984:	b510      	push	{r4, lr}
	int err;

	if (enable) {
   22986:	4603      	mov	r3, r0
{
   22988:	b08c      	sub	sp, #48	; 0x30
	if (enable) {
   2298a:	2800      	cmp	r0, #0
   2298c:	d036      	beq.n	229fc <lte_lc_psm_req+0x78>
		char psm_req[40];

		if (strlen(psm_param_rptau) == 8 &&
   2298e:	481d      	ldr	r0, [pc, #116]	; (22a04 <lte_lc_psm_req+0x80>)
   22990:	f7ee fdb6 	bl	11500 <strlen>
   22994:	2808      	cmp	r0, #8
   22996:	d118      	bne.n	229ca <lte_lc_psm_req+0x46>
		    strlen(psm_param_rat) == 8) {
   22998:	4c1b      	ldr	r4, [pc, #108]	; (22a08 <lte_lc_psm_req+0x84>)
   2299a:	4620      	mov	r0, r4
   2299c:	f7ee fdb0 	bl	11500 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   229a0:	2808      	cmp	r0, #8
   229a2:	d112      	bne.n	229ca <lte_lc_psm_req+0x46>
			snprintf(psm_req, sizeof(psm_req),
   229a4:	2128      	movs	r1, #40	; 0x28
   229a6:	4b17      	ldr	r3, [pc, #92]	; (22a04 <lte_lc_psm_req+0x80>)
   229a8:	4a18      	ldr	r2, [pc, #96]	; (22a0c <lte_lc_psm_req+0x88>)
   229aa:	9400      	str	r4, [sp, #0]
   229ac:	a802      	add	r0, sp, #8
   229ae:	f00c f8ef 	bl	2eb90 <sniprintf>
				psm_param_rat);
		} else {
			snprintf(psm_req, sizeof(psm_req),
				"AT+CPSMS=1");
		}
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   229b2:	2300      	movs	r3, #0
   229b4:	461a      	mov	r2, r3
   229b6:	4619      	mov	r1, r3
   229b8:	a802      	add	r0, sp, #8
	} else {
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   229ba:	f7ff f919 	bl	21bf0 <at_cmd_write>
	}

	if (err != 0) {
		return -EIO;
   229be:	2800      	cmp	r0, #0
	}

	return 0;
}
   229c0:	bf18      	it	ne
   229c2:	f06f 0004 	mvnne.w	r0, #4
   229c6:	b00c      	add	sp, #48	; 0x30
   229c8:	bd10      	pop	{r4, pc}
		} else if (strlen(psm_param_rptau) == 8) {
   229ca:	480e      	ldr	r0, [pc, #56]	; (22a04 <lte_lc_psm_req+0x80>)
   229cc:	f7ee fd98 	bl	11500 <strlen>
   229d0:	2808      	cmp	r0, #8
   229d2:	d106      	bne.n	229e2 <lte_lc_psm_req+0x5e>
			snprintf(psm_req, sizeof(psm_req),
   229d4:	4b0b      	ldr	r3, [pc, #44]	; (22a04 <lte_lc_psm_req+0x80>)
   229d6:	4a0e      	ldr	r2, [pc, #56]	; (22a10 <lte_lc_psm_req+0x8c>)
			snprintf(psm_req, sizeof(psm_req),
   229d8:	2128      	movs	r1, #40	; 0x28
   229da:	a802      	add	r0, sp, #8
   229dc:	f00c f8d8 	bl	2eb90 <sniprintf>
   229e0:	e7e7      	b.n	229b2 <lte_lc_psm_req+0x2e>
		} else if (strlen(psm_param_rat) == 8) {
   229e2:	4809      	ldr	r0, [pc, #36]	; (22a08 <lte_lc_psm_req+0x84>)
   229e4:	f7ee fd8c 	bl	11500 <strlen>
   229e8:	2808      	cmp	r0, #8
   229ea:	d102      	bne.n	229f2 <lte_lc_psm_req+0x6e>
			snprintf(psm_req, sizeof(psm_req),
   229ec:	4b06      	ldr	r3, [pc, #24]	; (22a08 <lte_lc_psm_req+0x84>)
   229ee:	4a09      	ldr	r2, [pc, #36]	; (22a14 <lte_lc_psm_req+0x90>)
   229f0:	e7f2      	b.n	229d8 <lte_lc_psm_req+0x54>
			snprintf(psm_req, sizeof(psm_req),
   229f2:	4909      	ldr	r1, [pc, #36]	; (22a18 <lte_lc_psm_req+0x94>)
   229f4:	a802      	add	r0, sp, #8
   229f6:	f015 f809 	bl	37a0c <strcpy>
   229fa:	e7da      	b.n	229b2 <lte_lc_psm_req+0x2e>
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   229fc:	4602      	mov	r2, r0
   229fe:	4601      	mov	r1, r0
   22a00:	4806      	ldr	r0, [pc, #24]	; (22a1c <lte_lc_psm_req+0x98>)
   22a02:	e7da      	b.n	229ba <lte_lc_psm_req+0x36>
   22a04:	20014c7b 	.word	0x20014c7b
   22a08:	20014c72 	.word	0x20014c72
   22a0c:	0003e044 	.word	0x0003e044
   22a10:	0003e05b 	.word	0x0003e05b
   22a14:	0003e06d 	.word	0x0003e06d
   22a18:	0003e080 	.word	0x0003e080
   22a1c:	0003e6c3 	.word	0x0003e6c3

00022a20 <lte_lc_edrx_req>:
}

int lte_lc_edrx_req(bool enable)
{
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   22a20:	2305      	movs	r3, #5
   22a22:	2204      	movs	r2, #4
{
   22a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a28:	b08d      	sub	sp, #52	; 0x34
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   22a2a:	e9cd 2303 	strd	r2, r3, [sp, #12]
	char req[25];

	if (!enable) {
   22a2e:	4603      	mov	r3, r0
   22a30:	b9a8      	cbnz	r0, 22a5e <lte_lc_edrx_req+0x3e>
		err = at_cmd_write(edrx_disable, NULL, 0, NULL);
   22a32:	4602      	mov	r2, r0
   22a34:	4601      	mov	r1, r0
   22a36:	483b      	ldr	r0, [pc, #236]	; (22b24 <lte_lc_edrx_req+0x104>)
   22a38:	f7ff f8da 	bl	21bf0 <at_cmd_write>
		if (err) {
   22a3c:	4604      	mov	r4, r0
   22a3e:	b150      	cbz	r0, 22a56 <lte_lc_edrx_req+0x36>
   22a40:	4a39      	ldr	r2, [pc, #228]	; (22b28 <lte_lc_edrx_req+0x108>)
   22a42:	4b3a      	ldr	r3, [pc, #232]	; (22b2c <lte_lc_edrx_req+0x10c>)
			LOG_ERR("Failed to disable eDRX, error: %d", err);
   22a44:	4601      	mov	r1, r0
   22a46:	1ad2      	subs	r2, r2, r3
   22a48:	08d2      	lsrs	r2, r2, #3
   22a4a:	0192      	lsls	r2, r2, #6
   22a4c:	4838      	ldr	r0, [pc, #224]	; (22b30 <lte_lc_edrx_req+0x110>)
   22a4e:	f042 0201 	orr.w	r2, r2, #1
			snprintk(req, sizeof(req), "AT+CEDRXS=2,%d", actt[i]);
		}

		err = at_cmd_write(req, NULL, 0, NULL);
		if (err) {
			LOG_ERR("Failed to enable eDRX, error: %d", err);
   22a52:	f00d fc4e 	bl	302f2 <log_1>
			return err;
		}
	}

	return 0;
}
   22a56:	4620      	mov	r0, r4
   22a58:	b00d      	add	sp, #52	; 0x34
   22a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   22a5e:	2600      	movs	r6, #0
					edrx_param_ltem : edrx_param_nbiot;
   22a60:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 22b4c <lte_lc_edrx_req+0x12c>
   22a64:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 22b50 <lte_lc_edrx_req+0x130>
   22a68:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 22b54 <lte_lc_edrx_req+0x134>
   22a6c:	af03      	add	r7, sp, #12
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   22a6e:	f857 5b04 	ldr.w	r5, [r7], #4
					edrx_param_ltem : edrx_param_nbiot;
   22a72:	4b30      	ldr	r3, [pc, #192]	; (22b34 <lte_lc_edrx_req+0x114>)
   22a74:	2d04      	cmp	r5, #4
   22a76:	bf0c      	ite	eq
   22a78:	4644      	moveq	r4, r8
   22a7a:	464c      	movne	r4, r9
		if (strlen(edrx_param) == 4) {
   22a7c:	4620      	mov	r0, r4
					edrx_param_ltem : edrx_param_nbiot;
   22a7e:	bf0c      	ite	eq
   22a80:	46d3      	moveq	fp, sl
   22a82:	469b      	movne	fp, r3
		if (strlen(edrx_param) == 4) {
   22a84:	f7ee fd3c 	bl	11500 <strlen>
   22a88:	2804      	cmp	r0, #4
   22a8a:	d118      	bne.n	22abe <lte_lc_edrx_req+0x9e>
			snprintk(req, sizeof(req), "AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   22a8c:	462b      	mov	r3, r5
   22a8e:	2119      	movs	r1, #25
   22a90:	4a29      	ldr	r2, [pc, #164]	; (22b38 <lte_lc_edrx_req+0x118>)
   22a92:	9400      	str	r4, [sp, #0]
   22a94:	a805      	add	r0, sp, #20
   22a96:	f00d f8f8 	bl	2fc8a <snprintk>
		err = at_cmd_write(req, NULL, 0, NULL);
   22a9a:	2300      	movs	r3, #0
   22a9c:	a805      	add	r0, sp, #20
   22a9e:	461a      	mov	r2, r3
   22aa0:	4619      	mov	r1, r3
   22aa2:	f7ff f8a5 	bl	21bf0 <at_cmd_write>
		if (err) {
   22aa6:	4604      	mov	r4, r0
   22aa8:	b180      	cbz	r0, 22acc <lte_lc_edrx_req+0xac>
   22aaa:	4a1f      	ldr	r2, [pc, #124]	; (22b28 <lte_lc_edrx_req+0x108>)
   22aac:	4b1f      	ldr	r3, [pc, #124]	; (22b2c <lte_lc_edrx_req+0x10c>)
			LOG_ERR("Failed to enable eDRX, error: %d", err);
   22aae:	4601      	mov	r1, r0
   22ab0:	1ad2      	subs	r2, r2, r3
   22ab2:	08d2      	lsrs	r2, r2, #3
   22ab4:	0192      	lsls	r2, r2, #6
   22ab6:	4821      	ldr	r0, [pc, #132]	; (22b3c <lte_lc_edrx_req+0x11c>)
   22ab8:	f042 0201 	orr.w	r2, r2, #1
   22abc:	e7c9      	b.n	22a52 <lte_lc_edrx_req+0x32>
			snprintk(req, sizeof(req), "AT+CEDRXS=2,%d", actt[i]);
   22abe:	462b      	mov	r3, r5
   22ac0:	2119      	movs	r1, #25
   22ac2:	4a1f      	ldr	r2, [pc, #124]	; (22b40 <lte_lc_edrx_req+0x120>)
   22ac4:	a805      	add	r0, sp, #20
   22ac6:	f00d f8e0 	bl	2fc8a <snprintk>
   22aca:	e7e6      	b.n	22a9a <lte_lc_edrx_req+0x7a>
		if (strlen(ptw_param) != 4) {
   22acc:	4658      	mov	r0, fp
   22ace:	f7ee fd17 	bl	11500 <strlen>
   22ad2:	2804      	cmp	r0, #4
   22ad4:	d121      	bne.n	22b1a <lte_lc_edrx_req+0xfa>
		snprintk(req, sizeof(req), "AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   22ad6:	462b      	mov	r3, r5
   22ad8:	2119      	movs	r1, #25
   22ada:	4a1a      	ldr	r2, [pc, #104]	; (22b44 <lte_lc_edrx_req+0x124>)
   22adc:	f8cd b000 	str.w	fp, [sp]
   22ae0:	a805      	add	r0, sp, #20
   22ae2:	f00d f8d2 	bl	2fc8a <snprintk>
		err = at_cmd_write(req, NULL, 0, NULL);
   22ae6:	4623      	mov	r3, r4
   22ae8:	4622      	mov	r2, r4
   22aea:	4621      	mov	r1, r4
   22aec:	a805      	add	r0, sp, #20
   22aee:	f7ff f87f 	bl	21bf0 <at_cmd_write>
		if (err) {
   22af2:	4605      	mov	r5, r0
   22af4:	b188      	cbz	r0, 22b1a <lte_lc_edrx_req+0xfa>
   22af6:	4b0d      	ldr	r3, [pc, #52]	; (22b2c <lte_lc_edrx_req+0x10c>)
   22af8:	4c0b      	ldr	r4, [pc, #44]	; (22b28 <lte_lc_edrx_req+0x108>)
   22afa:	a805      	add	r0, sp, #20
   22afc:	1ae4      	subs	r4, r4, r3
   22afe:	f7f2 fa4d 	bl	14f9c <z_log_strdup>
   22b02:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("Failed to request PTW (%s), error: %d", log_strdup(req), err);
   22b04:	01a4      	lsls	r4, r4, #6
   22b06:	f044 0401 	orr.w	r4, r4, #1
   22b0a:	4601      	mov	r1, r0
   22b0c:	4623      	mov	r3, r4
   22b0e:	462a      	mov	r2, r5
   22b10:	480d      	ldr	r0, [pc, #52]	; (22b48 <lte_lc_edrx_req+0x128>)
   22b12:	f00d fc02 	bl	3031a <log_2>
		err = at_cmd_write(req, NULL, 0, NULL);
   22b16:	462c      	mov	r4, r5
			return err;
   22b18:	e79d      	b.n	22a56 <lte_lc_edrx_req+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   22b1a:	2e00      	cmp	r6, #0
   22b1c:	d19b      	bne.n	22a56 <lte_lc_edrx_req+0x36>
   22b1e:	2601      	movs	r6, #1
   22b20:	e7a5      	b.n	22a6e <lte_lc_edrx_req+0x4e>
   22b22:	bf00      	nop
   22b24:	0003e689 	.word	0x0003e689
   22b28:	00038880 	.word	0x00038880
   22b2c:	000387c0 	.word	0x000387c0
   22b30:	0003e08b 	.word	0x0003e08b
   22b34:	2001c65f 	.word	0x2001c65f
   22b38:	0003e0ad 	.word	0x0003e0ad
   22b3c:	0003e0d0 	.word	0x0003e0d0
   22b40:	0003e0c1 	.word	0x0003e0c1
   22b44:	0003e0f1 	.word	0x0003e0f1
   22b48:	0003e102 	.word	0x0003e102
   22b4c:	20014c68 	.word	0x20014c68
   22b50:	20014c6d 	.word	0x20014c6d
   22b54:	2001c65a 	.word	0x2001c65a

00022b58 <lte_lc_system_mode_set>:
	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   22b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b5a:	4b2a      	ldr	r3, [pc, #168]	; (22c04 <lte_lc_system_mode_set+0xac>)
   22b5c:	4c2a      	ldr	r4, [pc, #168]	; (22c08 <lte_lc_system_mode_set+0xb0>)
	int err, len;
	char cmd[50];

	switch (mode) {
   22b5e:	2807      	cmp	r0, #7
   22b60:	eba4 0403 	sub.w	r4, r4, r3
   22b64:	ea4f 04d4 	mov.w	r4, r4, lsr #3
{
   22b68:	4607      	mov	r7, r0
   22b6a:	460e      	mov	r6, r1
   22b6c:	b091      	sub	sp, #68	; 0x44
   22b6e:	ea4f 1484 	mov.w	r4, r4, lsl #6
	switch (mode) {
   22b72:	d909      	bls.n	22b88 <lte_lc_system_mode_set+0x30>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   22b74:	4825      	ldr	r0, [pc, #148]	; (22c0c <lte_lc_system_mode_set+0xb4>)
   22b76:	f044 0101 	orr.w	r1, r4, #1
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested");
   22b7a:	f00d fbad 	bl	302d8 <log_0>
		return -EINVAL;
   22b7e:	f06f 0515 	mvn.w	r5, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return err;
}
   22b82:	4628      	mov	r0, r5
   22b84:	b011      	add	sp, #68	; 0x44
   22b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (preference) {
   22b88:	2904      	cmp	r1, #4
   22b8a:	d903      	bls.n	22b94 <lte_lc_system_mode_set+0x3c>
		LOG_ERR("Invalid LTE preference requested");
   22b8c:	4820      	ldr	r0, [pc, #128]	; (22c10 <lte_lc_system_mode_set+0xb8>)
   22b8e:	f044 0101 	orr.w	r1, r4, #1
   22b92:	e7f2      	b.n	22b7a <lte_lc_system_mode_set+0x22>
	len = snprintf(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s,%c",
   22b94:	4b1f      	ldr	r3, [pc, #124]	; (22c14 <lte_lc_system_mode_set+0xbc>)
   22b96:	4a20      	ldr	r2, [pc, #128]	; (22c18 <lte_lc_system_mode_set+0xc0>)
   22b98:	5c5b      	ldrb	r3, [r3, r1]
   22b9a:	2132      	movs	r1, #50	; 0x32
   22b9c:	9300      	str	r3, [sp, #0]
   22b9e:	4b1f      	ldr	r3, [pc, #124]	; (22c1c <lte_lc_system_mode_set+0xc4>)
   22ba0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   22ba4:	a803      	add	r0, sp, #12
   22ba6:	f00b fff3 	bl	2eb90 <sniprintf>
	if (len < 0) {
   22baa:	2800      	cmp	r0, #0
   22bac:	da07      	bge.n	22bbe <lte_lc_system_mode_set+0x66>
		LOG_ERR("Could not construct system mode command");
   22bae:	481c      	ldr	r0, [pc, #112]	; (22c20 <lte_lc_system_mode_set+0xc8>)
   22bb0:	f044 0101 	orr.w	r1, r4, #1
   22bb4:	f00d fb90 	bl	302d8 <log_0>
		return -EFAULT;
   22bb8:	f06f 050d 	mvn.w	r5, #13
   22bbc:	e7e1      	b.n	22b82 <lte_lc_system_mode_set+0x2a>
   22bbe:	a803      	add	r0, sp, #12
   22bc0:	f7f2 f9ec 	bl	14f9c <z_log_strdup>
	LOG_DBG("Sending AT command to set system mode: %s", log_strdup(cmd));
   22bc4:	f044 0504 	orr.w	r5, r4, #4
   22bc8:	4602      	mov	r2, r0
   22bca:	462b      	mov	r3, r5
   22bcc:	4915      	ldr	r1, [pc, #84]	; (22c24 <lte_lc_system_mode_set+0xcc>)
   22bce:	4816      	ldr	r0, [pc, #88]	; (22c28 <lte_lc_system_mode_set+0xd0>)
   22bd0:	f00d fba3 	bl	3031a <log_2>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   22bd4:	2300      	movs	r3, #0
   22bd6:	a803      	add	r0, sp, #12
   22bd8:	461a      	mov	r2, r3
   22bda:	4619      	mov	r1, r3
   22bdc:	f7ff f808 	bl	21bf0 <at_cmd_write>
	if (err) {
   22be0:	4605      	mov	r5, r0
   22be2:	b128      	cbz	r0, 22bf0 <lte_lc_system_mode_set+0x98>
		LOG_ERR("Could not send AT command, error: %d", err);
   22be4:	4601      	mov	r1, r0
   22be6:	f044 0201 	orr.w	r2, r4, #1
   22bea:	4810      	ldr	r0, [pc, #64]	; (22c2c <lte_lc_system_mode_set+0xd4>)
   22bec:	f00d fb81 	bl	302f2 <log_1>
	sys_mode_current = mode;
   22bf0:	4b0f      	ldr	r3, [pc, #60]	; (22c30 <lte_lc_system_mode_set+0xd8>)
   22bf2:	701f      	strb	r7, [r3, #0]
	sys_mode_target = mode;
   22bf4:	4b0f      	ldr	r3, [pc, #60]	; (22c34 <lte_lc_system_mode_set+0xdc>)
   22bf6:	701f      	strb	r7, [r3, #0]
	mode_pref_current = preference;
   22bf8:	4b0f      	ldr	r3, [pc, #60]	; (22c38 <lte_lc_system_mode_set+0xe0>)
   22bfa:	701e      	strb	r6, [r3, #0]
	mode_pref_target = preference;
   22bfc:	4b0f      	ldr	r3, [pc, #60]	; (22c3c <lte_lc_system_mode_set+0xe4>)
   22bfe:	701e      	strb	r6, [r3, #0]
	return err;
   22c00:	e7bf      	b.n	22b82 <lte_lc_system_mode_set+0x2a>
   22c02:	bf00      	nop
   22c04:	000387c0 	.word	0x000387c0
   22c08:	00038880 	.word	0x00038880
   22c0c:	0003e128 	.word	0x0003e128
   22c10:	0003e146 	.word	0x0003e146
   22c14:	0003e6cd 	.word	0x0003e6cd
   22c18:	0003e167 	.word	0x0003e167
   22c1c:	000393e8 	.word	0x000393e8
   22c20:	0003e17d 	.word	0x0003e17d
   22c24:	0003e645 	.word	0x0003e645
   22c28:	0003e1a5 	.word	0x0003e1a5
   22c2c:	0003e1d3 	.word	0x0003e1d3
   22c30:	2001c664 	.word	0x2001c664
   22c34:	20014c84 	.word	0x20014c84
   22c38:	2001c656 	.word	0x2001c656
   22c3c:	2001c657 	.word	0x2001c657

00022c40 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   22c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, temp_pref, mode_bitmask = 0;
	struct at_param_list resp_list = {0};
   22c44:	2400      	movs	r4, #0
{
   22c46:	b093      	sub	sp, #76	; 0x4c
   22c48:	4605      	mov	r5, r0
   22c4a:	460e      	mov	r6, r1
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   22c4c:	221a      	movs	r2, #26
   22c4e:	4621      	mov	r1, r4
   22c50:	a80b      	add	r0, sp, #44	; 0x2c
	struct at_param_list resp_list = {0};
   22c52:	e9cd 4404 	strd	r4, r4, [sp, #16]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   22c56:	940a      	str	r4, [sp, #40]	; 0x28
   22c58:	f014 fdb3 	bl	377c2 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   22c5c:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   22c5e:	e9cd 4406 	strd	r4, r4, [sp, #24]
   22c62:	9408      	str	r4, [sp, #32]
   22c64:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   22c68:	9302      	str	r3, [sp, #8]

	if (mode == NULL) {
   22c6a:	2d00      	cmp	r5, #0
   22c6c:	f000 810d 	beq.w	22e8a <lte_lc_system_mode_get+0x24a>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   22c70:	4623      	mov	r3, r4
   22c72:	221e      	movs	r2, #30
   22c74:	4886      	ldr	r0, [pc, #536]	; (22e90 <lte_lc_system_mode_get+0x250>)
   22c76:	a90a      	add	r1, sp, #40	; 0x28
   22c78:	f7fe ffba 	bl	21bf0 <at_cmd_write>
			   NULL);
	if (err) {
   22c7c:	4604      	mov	r4, r0
   22c7e:	b168      	cbz	r0, 22c9c <lte_lc_system_mode_get+0x5c>
   22c80:	4984      	ldr	r1, [pc, #528]	; (22e94 <lte_lc_system_mode_get+0x254>)
   22c82:	4b85      	ldr	r3, [pc, #532]	; (22e98 <lte_lc_system_mode_get+0x258>)
		LOG_ERR("Could not send AT command");
   22c84:	4885      	ldr	r0, [pc, #532]	; (22e9c <lte_lc_system_mode_get+0x25c>)
   22c86:	1ac9      	subs	r1, r1, r3
   22c88:	08c9      	lsrs	r1, r1, #3
   22c8a:	0189      	lsls	r1, r1, #6
   22c8c:	f041 0101 	orr.w	r1, r1, #1
   22c90:	f00d fb22 	bl	302d8 <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   22c94:	4620      	mov	r0, r4
   22c96:	b013      	add	sp, #76	; 0x4c
   22c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   22c9c:	2105      	movs	r1, #5
   22c9e:	a804      	add	r0, sp, #16
   22ca0:	f012 fe05 	bl	358ae <at_params_list_init>
	if (err) {
   22ca4:	4604      	mov	r4, r0
   22ca6:	b158      	cbz	r0, 22cc0 <lte_lc_system_mode_get+0x80>
   22ca8:	4b7b      	ldr	r3, [pc, #492]	; (22e98 <lte_lc_system_mode_get+0x258>)
   22caa:	4a7a      	ldr	r2, [pc, #488]	; (22e94 <lte_lc_system_mode_get+0x254>)
		LOG_ERR("Could init AT params list, error: %d", err);
   22cac:	4601      	mov	r1, r0
   22cae:	1ad2      	subs	r2, r2, r3
   22cb0:	08d2      	lsrs	r2, r2, #3
   22cb2:	0192      	lsls	r2, r2, #6
   22cb4:	487a      	ldr	r0, [pc, #488]	; (22ea0 <lte_lc_system_mode_get+0x260>)
   22cb6:	f042 0201 	orr.w	r2, r2, #1
   22cba:	f00d fb1a 	bl	302f2 <log_1>
		return err;
   22cbe:	e7e9      	b.n	22c94 <lte_lc_system_mode_get+0x54>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   22cc0:	4601      	mov	r1, r0
   22cc2:	2305      	movs	r3, #5
   22cc4:	aa04      	add	r2, sp, #16
   22cc6:	a80a      	add	r0, sp, #40	; 0x28
   22cc8:	f7ff fb08 	bl	222dc <at_parser_max_params_from_str>
	if (err) {
   22ccc:	4604      	mov	r4, r0
   22cce:	b158      	cbz	r0, 22ce8 <lte_lc_system_mode_get+0xa8>
   22cd0:	4a70      	ldr	r2, [pc, #448]	; (22e94 <lte_lc_system_mode_get+0x254>)
   22cd2:	4b71      	ldr	r3, [pc, #452]	; (22e98 <lte_lc_system_mode_get+0x258>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   22cd4:	4601      	mov	r1, r0
   22cd6:	1ad2      	subs	r2, r2, r3
   22cd8:	08d2      	lsrs	r2, r2, #3
   22cda:	0192      	lsls	r2, r2, #6
   22cdc:	4871      	ldr	r0, [pc, #452]	; (22ea4 <lte_lc_system_mode_get+0x264>)
   22cde:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   22ce2:	f00d fb06 	bl	302f2 <log_1>
			goto clean_exit;
   22ce6:	e013      	b.n	22d10 <lte_lc_system_mode_get+0xd0>
	err = at_params_string_get(&resp_list,
   22ce8:	4601      	mov	r1, r0
   22cea:	ab02      	add	r3, sp, #8
   22cec:	aa06      	add	r2, sp, #24
   22cee:	a804      	add	r0, sp, #16
   22cf0:	f012 feeb 	bl	35aca <at_params_string_get>
	if (err) {
   22cf4:	4607      	mov	r7, r0
   22cf6:	b178      	cbz	r0, 22d18 <lte_lc_system_mode_get+0xd8>
   22cf8:	4b67      	ldr	r3, [pc, #412]	; (22e98 <lte_lc_system_mode_get+0x258>)
   22cfa:	4a66      	ldr	r2, [pc, #408]	; (22e94 <lte_lc_system_mode_get+0x254>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   22cfc:	4601      	mov	r1, r0
   22cfe:	1ad2      	subs	r2, r2, r3
   22d00:	08d2      	lsrs	r2, r2, #3
   22d02:	0192      	lsls	r2, r2, #6
   22d04:	4868      	ldr	r0, [pc, #416]	; (22ea8 <lte_lc_system_mode_get+0x268>)
   22d06:	f042 0201 	orr.w	r2, r2, #1
   22d0a:	f00d faf2 	bl	302f2 <log_1>
		goto clean_exit;
   22d0e:	463c      	mov	r4, r7
	at_params_list_free(&resp_list);
   22d10:	a804      	add	r0, sp, #16
   22d12:	f012 fddf 	bl	358d4 <at_params_list_free>
	return err;
   22d16:	e7bd      	b.n	22c94 <lte_lc_system_mode_get+0x54>
	if (!response_is_valid(response_prefix, response_prefix_len,
   22d18:	4a64      	ldr	r2, [pc, #400]	; (22eac <lte_lc_system_mode_get+0x26c>)
   22d1a:	9902      	ldr	r1, [sp, #8]
   22d1c:	a806      	add	r0, sp, #24
   22d1e:	f000 fa31 	bl	23184 <response_is_valid>
   22d22:	b960      	cbnz	r0, 22d3e <lte_lc_system_mode_get+0xfe>
   22d24:	4b5c      	ldr	r3, [pc, #368]	; (22e98 <lte_lc_system_mode_get+0x258>)
   22d26:	495b      	ldr	r1, [pc, #364]	; (22e94 <lte_lc_system_mode_get+0x254>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   22d28:	4861      	ldr	r0, [pc, #388]	; (22eb0 <lte_lc_system_mode_get+0x270>)
   22d2a:	1ac9      	subs	r1, r1, r3
   22d2c:	08c9      	lsrs	r1, r1, #3
   22d2e:	0189      	lsls	r1, r1, #6
   22d30:	f041 0101 	orr.w	r1, r1, #1
   22d34:	f00d fad0 	bl	302d8 <log_0>
		err = -EIO;
   22d38:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   22d3c:	e7e8      	b.n	22d10 <lte_lc_system_mode_get+0xd0>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   22d3e:	f04f 0801 	mov.w	r8, #1
		mode_bitmask = param ? mode_bitmask | BIT(i) : mode_bitmask;
   22d42:	46c1      	mov	r9, r8
		err = at_params_int_get(&resp_list, i, &param);
   22d44:	4641      	mov	r1, r8
   22d46:	aa03      	add	r2, sp, #12
   22d48:	a804      	add	r0, sp, #16
   22d4a:	f012 fe87 	bl	35a5c <at_params_int_get>
		if (err) {
   22d4e:	4604      	mov	r4, r0
   22d50:	b148      	cbz	r0, 22d66 <lte_lc_system_mode_get+0x126>
   22d52:	4a50      	ldr	r2, [pc, #320]	; (22e94 <lte_lc_system_mode_get+0x254>)
   22d54:	4b50      	ldr	r3, [pc, #320]	; (22e98 <lte_lc_system_mode_get+0x258>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   22d56:	4601      	mov	r1, r0
   22d58:	1ad2      	subs	r2, r2, r3
   22d5a:	08d2      	lsrs	r2, r2, #3
   22d5c:	0192      	lsls	r2, r2, #6
   22d5e:	4855      	ldr	r0, [pc, #340]	; (22eb4 <lte_lc_system_mode_get+0x274>)
   22d60:	f042 0201 	orr.w	r2, r2, #1
   22d64:	e7bd      	b.n	22ce2 <lte_lc_system_mode_get+0xa2>
		mode_bitmask = param ? mode_bitmask | BIT(i) : mode_bitmask;
   22d66:	9b03      	ldr	r3, [sp, #12]
   22d68:	b113      	cbz	r3, 22d70 <lte_lc_system_mode_get+0x130>
   22d6a:	fa09 f308 	lsl.w	r3, r9, r8
   22d6e:	431f      	orrs	r7, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   22d70:	f108 0801 	add.w	r8, r8, #1
   22d74:	f1b8 0f04 	cmp.w	r8, #4
   22d78:	d1e4      	bne.n	22d44 <lte_lc_system_mode_get+0x104>
	if (preference != NULL) {
   22d7a:	b1ee      	cbz	r6, 22db8 <lte_lc_system_mode_get+0x178>
		err = at_params_int_get(&resp_list, AT_XSYSTEMMODE_READ_PREFERENCE_INDEX,
   22d7c:	4641      	mov	r1, r8
   22d7e:	aa03      	add	r2, sp, #12
   22d80:	a804      	add	r0, sp, #16
   22d82:	f012 fe6b 	bl	35a5c <at_params_int_get>
		if (err) {
   22d86:	4680      	mov	r8, r0
   22d88:	b160      	cbz	r0, 22da4 <lte_lc_system_mode_get+0x164>
   22d8a:	4b43      	ldr	r3, [pc, #268]	; (22e98 <lte_lc_system_mode_get+0x258>)
   22d8c:	4a41      	ldr	r2, [pc, #260]	; (22e94 <lte_lc_system_mode_get+0x254>)
			LOG_ERR("Could not parse LTE preference parameter, err: %d", err);
   22d8e:	4601      	mov	r1, r0
   22d90:	1ad2      	subs	r2, r2, r3
   22d92:	08d2      	lsrs	r2, r2, #3
   22d94:	0192      	lsls	r2, r2, #6
   22d96:	4848      	ldr	r0, [pc, #288]	; (22eb8 <lte_lc_system_mode_get+0x278>)
   22d98:	f042 0201 	orr.w	r2, r2, #1
   22d9c:	f00d faa9 	bl	302f2 <log_1>
			goto clean_exit;
   22da0:	4644      	mov	r4, r8
   22da2:	e7b5      	b.n	22d10 <lte_lc_system_mode_get+0xd0>
		switch (temp_pref) {
   22da4:	9903      	ldr	r1, [sp, #12]
   22da6:	2904      	cmp	r1, #4
   22da8:	d81a      	bhi.n	22de0 <lte_lc_system_mode_get+0x1a0>
   22daa:	e8df f001 	tbb	[pc, r1]
   22dae:	1103      	.short	0x1103
   22db0:	1513      	.short	0x1513
   22db2:	17          	.byte	0x17
   22db3:	00          	.byte	0x00
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   22db4:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   22db6:	7033      	strb	r3, [r6, #0]
	switch (mode_bitmask) {
   22db8:	2f0e      	cmp	r7, #14
   22dba:	d85b      	bhi.n	22e74 <lte_lc_system_mode_get+0x234>
   22dbc:	e8df f007 	tbb	[pc, r7]
   22dc0:	5a4c5a1d 	.word	0x5a4c5a1d
   22dc4:	5a565a4e 	.word	0x5a565a4e
   22dc8:	5a525a50 	.word	0x5a525a50
   22dcc:	5a54      	.short	0x5a54
   22dce:	58          	.byte	0x58
   22dcf:	00          	.byte	0x00
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   22dd0:	2301      	movs	r3, #1
   22dd2:	e7f0      	b.n	22db6 <lte_lc_system_mode_get+0x176>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   22dd4:	2302      	movs	r3, #2
   22dd6:	e7ee      	b.n	22db6 <lte_lc_system_mode_get+0x176>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   22dd8:	2303      	movs	r3, #3
   22dda:	e7ec      	b.n	22db6 <lte_lc_system_mode_get+0x176>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   22ddc:	2304      	movs	r3, #4
   22dde:	e7ea      	b.n	22db6 <lte_lc_system_mode_get+0x176>
   22de0:	4a2c      	ldr	r2, [pc, #176]	; (22e94 <lte_lc_system_mode_get+0x254>)
   22de2:	4b2d      	ldr	r3, [pc, #180]	; (22e98 <lte_lc_system_mode_get+0x258>)
			LOG_ERR("Unsupported LTE preference: %d", temp_pref);
   22de4:	4835      	ldr	r0, [pc, #212]	; (22ebc <lte_lc_system_mode_get+0x27c>)
   22de6:	1ad2      	subs	r2, r2, r3
   22de8:	08d2      	lsrs	r2, r2, #3
   22dea:	0192      	lsls	r2, r2, #6
   22dec:	f042 0201 	orr.w	r2, r2, #1
   22df0:	f00d fa7f 	bl	302f2 <log_1>
		err = -EFAULT;
   22df4:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   22df8:	e78a      	b.n	22d10 <lte_lc_system_mode_get+0xd0>
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   22dfa:	2300      	movs	r3, #0
	if (sys_mode_current != *mode) {
   22dfc:	4f30      	ldr	r7, [pc, #192]	; (22ec0 <lte_lc_system_mode_get+0x280>)
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   22dfe:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   22e00:	782b      	ldrb	r3, [r5, #0]
   22e02:	783a      	ldrb	r2, [r7, #0]
   22e04:	4293      	cmp	r3, r2
   22e06:	d00e      	beq.n	22e26 <lte_lc_system_mode_get+0x1e6>
   22e08:	4823      	ldr	r0, [pc, #140]	; (22e98 <lte_lc_system_mode_get+0x258>)
   22e0a:	4922      	ldr	r1, [pc, #136]	; (22e94 <lte_lc_system_mode_get+0x254>)
   22e0c:	1a09      	subs	r1, r1, r0
   22e0e:	08c9      	lsrs	r1, r1, #3
		LOG_DBG("Current system mode updated from %d to %d",
   22e10:	0189      	lsls	r1, r1, #6
   22e12:	f041 0104 	orr.w	r1, r1, #4
   22e16:	f8ad 1000 	strh.w	r1, [sp]
   22e1a:	482a      	ldr	r0, [pc, #168]	; (22ec4 <lte_lc_system_mode_get+0x284>)
   22e1c:	492a      	ldr	r1, [pc, #168]	; (22ec8 <lte_lc_system_mode_get+0x288>)
   22e1e:	f00d fa95 	bl	3034c <log_3>
		sys_mode_current = *mode;
   22e22:	782b      	ldrb	r3, [r5, #0]
   22e24:	703b      	strb	r3, [r7, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   22e26:	2e00      	cmp	r6, #0
   22e28:	f43f af72 	beq.w	22d10 <lte_lc_system_mode_get+0xd0>
   22e2c:	4d27      	ldr	r5, [pc, #156]	; (22ecc <lte_lc_system_mode_get+0x28c>)
   22e2e:	7833      	ldrb	r3, [r6, #0]
   22e30:	782a      	ldrb	r2, [r5, #0]
   22e32:	4293      	cmp	r3, r2
   22e34:	f43f af6c 	beq.w	22d10 <lte_lc_system_mode_get+0xd0>
   22e38:	4817      	ldr	r0, [pc, #92]	; (22e98 <lte_lc_system_mode_get+0x258>)
   22e3a:	4916      	ldr	r1, [pc, #88]	; (22e94 <lte_lc_system_mode_get+0x254>)
   22e3c:	1a09      	subs	r1, r1, r0
   22e3e:	08c9      	lsrs	r1, r1, #3
		LOG_DBG("Current system mode preference updated from %d to %d",
   22e40:	0189      	lsls	r1, r1, #6
   22e42:	f041 0104 	orr.w	r1, r1, #4
   22e46:	f8ad 1000 	strh.w	r1, [sp]
   22e4a:	4821      	ldr	r0, [pc, #132]	; (22ed0 <lte_lc_system_mode_get+0x290>)
   22e4c:	491e      	ldr	r1, [pc, #120]	; (22ec8 <lte_lc_system_mode_get+0x288>)
   22e4e:	f00d fa7d 	bl	3034c <log_3>
		mode_pref_current = *preference;
   22e52:	7833      	ldrb	r3, [r6, #0]
   22e54:	702b      	strb	r3, [r5, #0]
   22e56:	e75b      	b.n	22d10 <lte_lc_system_mode_get+0xd0>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   22e58:	2301      	movs	r3, #1
   22e5a:	e7cf      	b.n	22dfc <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   22e5c:	2302      	movs	r3, #2
   22e5e:	e7cd      	b.n	22dfc <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   22e60:	2303      	movs	r3, #3
   22e62:	e7cb      	b.n	22dfc <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   22e64:	2304      	movs	r3, #4
   22e66:	e7c9      	b.n	22dfc <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   22e68:	2305      	movs	r3, #5
   22e6a:	e7c7      	b.n	22dfc <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   22e6c:	2306      	movs	r3, #6
   22e6e:	e7c5      	b.n	22dfc <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   22e70:	2307      	movs	r3, #7
   22e72:	e7c3      	b.n	22dfc <lte_lc_system_mode_get+0x1bc>
   22e74:	4b08      	ldr	r3, [pc, #32]	; (22e98 <lte_lc_system_mode_get+0x258>)
   22e76:	4907      	ldr	r1, [pc, #28]	; (22e94 <lte_lc_system_mode_get+0x254>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   22e78:	4816      	ldr	r0, [pc, #88]	; (22ed4 <lte_lc_system_mode_get+0x294>)
   22e7a:	1ac9      	subs	r1, r1, r3
   22e7c:	08c9      	lsrs	r1, r1, #3
   22e7e:	0189      	lsls	r1, r1, #6
   22e80:	f041 0101 	orr.w	r1, r1, #1
   22e84:	f00d fa28 	bl	302d8 <log_0>
   22e88:	e7b4      	b.n	22df4 <lte_lc_system_mode_get+0x1b4>
		return -EINVAL;
   22e8a:	f06f 0415 	mvn.w	r4, #21
   22e8e:	e701      	b.n	22c94 <lte_lc_system_mode_get+0x54>
   22e90:	0003e1f8 	.word	0x0003e1f8
   22e94:	00038880 	.word	0x00038880
   22e98:	000387c0 	.word	0x000387c0
   22e9c:	0003e208 	.word	0x0003e208
   22ea0:	0003e222 	.word	0x0003e222
   22ea4:	0003e247 	.word	0x0003e247
   22ea8:	0003e26e 	.word	0x0003e26e
   22eac:	0003e297 	.word	0x0003e297
   22eb0:	0003e2a4 	.word	0x0003e2a4
   22eb4:	0003e2c1 	.word	0x0003e2c1
   22eb8:	0003e2e9 	.word	0x0003e2e9
   22ebc:	0003e31b 	.word	0x0003e31b
   22ec0:	2001c664 	.word	0x2001c664
   22ec4:	0003e366 	.word	0x0003e366
   22ec8:	0003e65c 	.word	0x0003e65c
   22ecc:	2001c656 	.word	0x2001c656
   22ed0:	0003e394 	.word	0x0003e394
   22ed4:	0003e33a 	.word	0x0003e33a

00022ed8 <init_and_config>:
{
   22ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (is_initialized) {
   22edc:	4e36      	ldr	r6, [pc, #216]	; (22fb8 <init_and_config+0xe0>)
   22ede:	7831      	ldrb	r1, [r6, #0]
   22ee0:	2900      	cmp	r1, #0
   22ee2:	d163      	bne.n	22fac <init_and_config+0xd4>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   22ee4:	4f35      	ldr	r7, [pc, #212]	; (22fbc <init_and_config+0xe4>)
   22ee6:	f8df 8110 	ldr.w	r8, [pc, #272]	; 22ff8 <init_and_config+0x120>
	return z_impl_k_sem_init(sem, initial_count, limit);
   22eea:	2201      	movs	r2, #1
   22eec:	4834      	ldr	r0, [pc, #208]	; (22fc0 <init_and_config+0xe8>)
   22eee:	f014 fad7 	bl	374a0 <z_impl_k_sem_init>
   22ef2:	4639      	mov	r1, r7
   22ef4:	4640      	mov	r0, r8
   22ef6:	f7ff fea3 	bl	22c40 <lte_lc_system_mode_get>
	if (err) {
   22efa:	4d32      	ldr	r5, [pc, #200]	; (22fc4 <init_and_config+0xec>)
   22efc:	4b32      	ldr	r3, [pc, #200]	; (22fc8 <init_and_config+0xf0>)
   22efe:	4604      	mov	r4, r0
   22f00:	1aed      	subs	r5, r5, r3
   22f02:	08ed      	lsrs	r5, r5, #3
   22f04:	01ad      	lsls	r5, r5, #6
   22f06:	b148      	cbz	r0, 22f1c <init_and_config+0x44>
		LOG_ERR("Could not get current system mode, error: %d", err);
   22f08:	4601      	mov	r1, r0
   22f0a:	4830      	ldr	r0, [pc, #192]	; (22fcc <init_and_config+0xf4>)
   22f0c:	f045 0201 	orr.w	r2, r5, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   22f10:	f00d f9ef 	bl	302f2 <log_1>
}
   22f14:	4620      	mov	r0, r4
   22f16:	b003      	add	sp, #12
   22f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_notif_register_handler(NULL, at_handler);
   22f1c:	492c      	ldr	r1, [pc, #176]	; (22fd0 <init_and_config+0xf8>)
   22f1e:	f7fe ff93 	bl	21e48 <at_notif_register_handler>
	if (err) {
   22f22:	4604      	mov	r4, r0
   22f24:	b120      	cbz	r0, 22f30 <init_and_config+0x58>
		LOG_ERR("Can't register AT handler, error: %d", err);
   22f26:	4601      	mov	r1, r0
   22f28:	f045 0201 	orr.w	r2, r5, #1
   22f2c:	4829      	ldr	r0, [pc, #164]	; (22fd4 <init_and_config+0xfc>)
   22f2e:	e7ef      	b.n	22f10 <init_and_config+0x38>
	if ((sys_mode_current != sys_mode_target) ||
   22f30:	4c29      	ldr	r4, [pc, #164]	; (22fd8 <init_and_config+0x100>)
   22f32:	f898 2000 	ldrb.w	r2, [r8]
   22f36:	7820      	ldrb	r0, [r4, #0]
   22f38:	4928      	ldr	r1, [pc, #160]	; (22fdc <init_and_config+0x104>)
   22f3a:	4282      	cmp	r2, r0
   22f3c:	46a0      	mov	r8, r4
   22f3e:	4689      	mov	r9, r1
   22f40:	780b      	ldrb	r3, [r1, #0]
   22f42:	d102      	bne.n	22f4a <init_and_config+0x72>
	    (mode_pref_current != mode_pref_target)) {
   22f44:	7839      	ldrb	r1, [r7, #0]
	if ((sys_mode_current != sys_mode_target) ||
   22f46:	428b      	cmp	r3, r1
   22f48:	d026      	beq.n	22f98 <init_and_config+0xc0>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   22f4a:	4619      	mov	r1, r3
   22f4c:	f7ff fe04 	bl	22b58 <lte_lc_system_mode_set>
		if (err) {
   22f50:	4604      	mov	r4, r0
   22f52:	b120      	cbz	r0, 22f5e <init_and_config+0x86>
			LOG_ERR("Could not set system mode, error: %d", err);
   22f54:	4601      	mov	r1, r0
   22f56:	f045 0201 	orr.w	r2, r5, #1
   22f5a:	4821      	ldr	r0, [pc, #132]	; (22fe0 <init_and_config+0x108>)
   22f5c:	e7d8      	b.n	22f10 <init_and_config+0x38>
		LOG_DBG("System mode (%d) and preference (%d) configured",
   22f5e:	f045 0304 	orr.w	r3, r5, #4
   22f62:	f8ad 3000 	strh.w	r3, [sp]
   22f66:	f899 3000 	ldrb.w	r3, [r9]
   22f6a:	f898 2000 	ldrb.w	r2, [r8]
   22f6e:	491d      	ldr	r1, [pc, #116]	; (22fe4 <init_and_config+0x10c>)
   22f70:	481d      	ldr	r0, [pc, #116]	; (22fe8 <init_and_config+0x110>)
		LOG_DBG("System mode (%d) and preference (%d) are already configured",
   22f72:	f00d f9eb 	bl	3034c <log_3>
	if (at_cmd_write(lock_bands, NULL, 0, NULL) != 0) {
   22f76:	2300      	movs	r3, #0
   22f78:	481c      	ldr	r0, [pc, #112]	; (22fec <init_and_config+0x114>)
   22f7a:	461a      	mov	r2, r3
   22f7c:	4619      	mov	r1, r3
   22f7e:	f7fe fe37 	bl	21bf0 <at_cmd_write>
   22f82:	b9b0      	cbnz	r0, 22fb2 <init_and_config+0xda>
	err = enable_notifications();
   22f84:	f7ff fae8 	bl	22558 <enable_notifications>
	if (err) {
   22f88:	4604      	mov	r4, r0
   22f8a:	b160      	cbz	r0, 22fa6 <init_and_config+0xce>
		LOG_ERR("Failed to enable notifications");
   22f8c:	4818      	ldr	r0, [pc, #96]	; (22ff0 <init_and_config+0x118>)
   22f8e:	f045 0101 	orr.w	r1, r5, #1
   22f92:	f00d f9a1 	bl	302d8 <log_0>
		return err;
   22f96:	e7bd      	b.n	22f14 <init_and_config+0x3c>
		LOG_DBG("System mode (%d) and preference (%d) are already configured",
   22f98:	f045 0104 	orr.w	r1, r5, #4
   22f9c:	f8ad 1000 	strh.w	r1, [sp]
   22fa0:	4814      	ldr	r0, [pc, #80]	; (22ff4 <init_and_config+0x11c>)
   22fa2:	4910      	ldr	r1, [pc, #64]	; (22fe4 <init_and_config+0x10c>)
   22fa4:	e7e5      	b.n	22f72 <init_and_config+0x9a>
	is_initialized = true;
   22fa6:	2301      	movs	r3, #1
   22fa8:	7033      	strb	r3, [r6, #0]
	return 0;
   22faa:	e7b3      	b.n	22f14 <init_and_config+0x3c>
		return -EALREADY;
   22fac:	f06f 0477 	mvn.w	r4, #119	; 0x77
   22fb0:	e7b0      	b.n	22f14 <init_and_config+0x3c>
		return -EIO;
   22fb2:	f06f 0404 	mvn.w	r4, #4
   22fb6:	e7ad      	b.n	22f14 <init_and_config+0x3c>
   22fb8:	2001c655 	.word	0x2001c655
   22fbc:	2001c656 	.word	0x2001c656
   22fc0:	20016844 	.word	0x20016844
   22fc4:	00038880 	.word	0x00038880
   22fc8:	000387c0 	.word	0x000387c0
   22fcc:	0003e3cd 	.word	0x0003e3cd
   22fd0:	00022601 	.word	0x00022601
   22fd4:	0003e3fa 	.word	0x0003e3fa
   22fd8:	20014c84 	.word	0x20014c84
   22fdc:	2001c657 	.word	0x2001c657
   22fe0:	0003e41f 	.word	0x0003e41f
   22fe4:	0003e635 	.word	0x0003e635
   22fe8:	0003e444 	.word	0x0003e444
   22fec:	0003e695 	.word	0x0003e695
   22ff0:	0003e4b8 	.word	0x0003e4b8
   22ff4:	0003e478 	.word	0x0003e478
   22ff8:	2001c664 	.word	0x2001c664

00022ffc <lte_lc_func_mode_set>:

	return err;
}

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   22ffc:	b530      	push	{r4, r5, lr}
	char buf[12];
	int err;

	switch (mode) {
   22ffe:	2804      	cmp	r0, #4
{
   23000:	4605      	mov	r5, r0
   23002:	b085      	sub	sp, #20
	switch (mode) {
   23004:	d820      	bhi.n	23048 <lte_lc_func_mode_set+0x4c>
   23006:	2804      	cmp	r0, #4
   23008:	d823      	bhi.n	23052 <lte_lc_func_mode_set+0x56>
   2300a:	e8df f000 	tbb	[pc, r0]
   2300e:	0b30      	.short	0x0b30
   23010:	2230      	.short	0x2230
   23012:	30          	.byte	0x30
   23013:	00          	.byte	0x00
   23014:	2401      	movs	r4, #1
   23016:	4b24      	ldr	r3, [pc, #144]	; (230a8 <lte_lc_func_mode_set+0xac>)
   23018:	fa04 f202 	lsl.w	r2, r4, r2
   2301c:	421a      	tst	r2, r3
   2301e:	d126      	bne.n	2306e <lte_lc_func_mode_set+0x72>
   23020:	0793      	lsls	r3, r2, #30
   23022:	d516      	bpl.n	23052 <lte_lc_func_mode_set+0x56>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   23024:	f7ff fa98 	bl	22558 <enable_notifications>
		if (err) {
   23028:	4604      	mov	r4, r0
   2302a:	b300      	cbz	r0, 2306e <lte_lc_func_mode_set+0x72>
   2302c:	4a1f      	ldr	r2, [pc, #124]	; (230ac <lte_lc_func_mode_set+0xb0>)
   2302e:	4b20      	ldr	r3, [pc, #128]	; (230b0 <lte_lc_func_mode_set+0xb4>)
			LOG_ERR("Failed to enable notifications, error: %d", err);
   23030:	4601      	mov	r1, r0
   23032:	1ad2      	subs	r2, r2, r3
   23034:	08d2      	lsrs	r2, r2, #3
   23036:	0192      	lsls	r2, r2, #6
   23038:	481e      	ldr	r0, [pc, #120]	; (230b4 <lte_lc_func_mode_set+0xb8>)
   2303a:	f042 0201 	orr.w	r2, r2, #1
   2303e:	f00d f958 	bl	302f2 <log_1>
		LOG_ERR("Failed to create functional mode command");
		return -EFAULT;
	}

	return at_cmd_write(buf, NULL, 0, NULL);
}
   23042:	4620      	mov	r0, r4
   23044:	b005      	add	sp, #20
   23046:	bd30      	pop	{r4, r5, pc}
	switch (mode) {
   23048:	f1a0 0214 	sub.w	r2, r0, #20
   2304c:	b2d2      	uxtb	r2, r2
   2304e:	2a18      	cmp	r2, #24
   23050:	d9e0      	bls.n	23014 <lte_lc_func_mode_set+0x18>
   23052:	4b17      	ldr	r3, [pc, #92]	; (230b0 <lte_lc_func_mode_set+0xb4>)
   23054:	4a15      	ldr	r2, [pc, #84]	; (230ac <lte_lc_func_mode_set+0xb0>)
		LOG_ERR("Invalid functional mode: %d", mode);
   23056:	4629      	mov	r1, r5
   23058:	1ad2      	subs	r2, r2, r3
   2305a:	08d2      	lsrs	r2, r2, #3
   2305c:	0192      	lsls	r2, r2, #6
   2305e:	4816      	ldr	r0, [pc, #88]	; (230b8 <lte_lc_func_mode_set+0xbc>)
   23060:	f042 0201 	orr.w	r2, r2, #1
   23064:	f00d f945 	bl	302f2 <log_1>
		return -EINVAL;
   23068:	f06f 0415 	mvn.w	r4, #21
   2306c:	e7e9      	b.n	23042 <lte_lc_func_mode_set+0x46>
	err = snprintk(buf, sizeof(buf), "AT+CFUN=%d", mode);
   2306e:	462b      	mov	r3, r5
   23070:	210c      	movs	r1, #12
   23072:	4a12      	ldr	r2, [pc, #72]	; (230bc <lte_lc_func_mode_set+0xc0>)
   23074:	a801      	add	r0, sp, #4
   23076:	f00c fe08 	bl	2fc8a <snprintk>
	if ((err < 0) || (err >= sizeof(buf))) {
   2307a:	280b      	cmp	r0, #11
   2307c:	d90c      	bls.n	23098 <lte_lc_func_mode_set+0x9c>
   2307e:	4b0c      	ldr	r3, [pc, #48]	; (230b0 <lte_lc_func_mode_set+0xb4>)
   23080:	490a      	ldr	r1, [pc, #40]	; (230ac <lte_lc_func_mode_set+0xb0>)
		LOG_ERR("Failed to create functional mode command");
   23082:	480f      	ldr	r0, [pc, #60]	; (230c0 <lte_lc_func_mode_set+0xc4>)
   23084:	1ac9      	subs	r1, r1, r3
   23086:	08c9      	lsrs	r1, r1, #3
   23088:	0189      	lsls	r1, r1, #6
   2308a:	f041 0101 	orr.w	r1, r1, #1
   2308e:	f00d f923 	bl	302d8 <log_0>
		return -EFAULT;
   23092:	f06f 040d 	mvn.w	r4, #13
   23096:	e7d4      	b.n	23042 <lte_lc_func_mode_set+0x46>
	return at_cmd_write(buf, NULL, 0, NULL);
   23098:	2300      	movs	r3, #0
   2309a:	a801      	add	r0, sp, #4
   2309c:	461a      	mov	r2, r3
   2309e:	4619      	mov	r1, r3
   230a0:	f7fe fda6 	bl	21bf0 <at_cmd_write>
   230a4:	4604      	mov	r4, r0
   230a6:	e7cc      	b.n	23042 <lte_lc_func_mode_set+0x46>
   230a8:	01300c01 	.word	0x01300c01
   230ac:	00038880 	.word	0x00038880
   230b0:	000387c0 	.word	0x000387c0
   230b4:	0003e4d7 	.word	0x0003e4d7
   230b8:	0003e501 	.word	0x0003e501
   230bc:	0003e51d 	.word	0x0003e51d
   230c0:	0003e528 	.word	0x0003e528

000230c4 <connect_lte>:
{
   230c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   230c8:	4b25      	ldr	r3, [pc, #148]	; (23160 <connect_lte+0x9c>)
   230ca:	4c26      	ldr	r4, [pc, #152]	; (23164 <connect_lte+0xa0>)
   230cc:	4926      	ldr	r1, [pc, #152]	; (23168 <connect_lte+0xa4>)
   230ce:	781b      	ldrb	r3, [r3, #0]
   230d0:	1a64      	subs	r4, r4, r1
{
   230d2:	4605      	mov	r5, r0
   230d4:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   230d6:	b94b      	cbnz	r3, 230ec <connect_lte+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   230d8:	01a1      	lsls	r1, r4, #6
   230da:	4824      	ldr	r0, [pc, #144]	; (2316c <connect_lte+0xa8>)
   230dc:	f041 0101 	orr.w	r1, r1, #1
   230e0:	f00d f8fa 	bl	302d8 <log_0>
		return -EPERM;
   230e4:	f04f 30ff 	mov.w	r0, #4294967295
}
   230e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   230ec:	2201      	movs	r2, #1
   230ee:	2100      	movs	r1, #0
   230f0:	481f      	ldr	r0, [pc, #124]	; (23170 <connect_lte+0xac>)
   230f2:	f014 f9d5 	bl	374a0 <z_impl_k_sem_init>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   230f6:	4f1f      	ldr	r7, [pc, #124]	; (23174 <connect_lte+0xb0>)
   230f8:	4e1f      	ldr	r6, [pc, #124]	; (23178 <connect_lte+0xb4>)
	return z_impl_k_sem_take(sem, timeout);
   230fa:	f8df 8074 	ldr.w	r8, [pc, #116]	; 23170 <connect_lte+0xac>
   230fe:	7839      	ldrb	r1, [r7, #0]
   23100:	7830      	ldrb	r0, [r6, #0]
   23102:	f7ff fd29 	bl	22b58 <lte_lc_system_mode_set>
			if (err) {
   23106:	2800      	cmp	r0, #0
   23108:	d1ee      	bne.n	230e8 <connect_lte+0x24>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   2310a:	2001      	movs	r0, #1
   2310c:	f7ff ff76 	bl	22ffc <lte_lc_func_mode_set>
		if (err || !blocking) {
   23110:	2800      	cmp	r0, #0
   23112:	d1e9      	bne.n	230e8 <connect_lte+0x24>
   23114:	2d00      	cmp	r5, #0
   23116:	d0e7      	beq.n	230e8 <connect_lte+0x24>
   23118:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   2311c:	2300      	movs	r3, #0
   2311e:	4640      	mov	r0, r8
   23120:	f008 f8b2 	bl	2b288 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   23124:	f110 0f0b 	cmn.w	r0, #11
   23128:	d1de      	bne.n	230e8 <connect_lte+0x24>
			LOG_INF("Network connection attempt timed out");
   2312a:	ea4f 1984 	mov.w	r9, r4, lsl #6
   2312e:	f049 0903 	orr.w	r9, r9, #3
   23132:	4649      	mov	r1, r9
   23134:	4811      	ldr	r0, [pc, #68]	; (2317c <connect_lte+0xb8>)
   23136:	f00d f8cf 	bl	302d8 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2313a:	7833      	ldrb	r3, [r6, #0]
   2313c:	2b01      	cmp	r3, #1
   2313e:	d10b      	bne.n	23158 <connect_lte+0x94>
				sys_mode_target = sys_mode_fallback;
   23140:	2302      	movs	r3, #2
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   23142:	2004      	movs	r0, #4
				sys_mode_target = sys_mode_fallback;
   23144:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   23146:	f7ff ff59 	bl	22ffc <lte_lc_func_mode_set>
				if (err) {
   2314a:	2800      	cmp	r0, #0
   2314c:	d1cc      	bne.n	230e8 <connect_lte+0x24>
				LOG_INF("Using fallback network mode");
   2314e:	4649      	mov	r1, r9
   23150:	480b      	ldr	r0, [pc, #44]	; (23180 <connect_lte+0xbc>)
   23152:	f00d f8c1 	bl	302d8 <log_0>
	} while (retry);
   23156:	e7d2      	b.n	230fe <connect_lte+0x3a>
				err = -ETIMEDOUT;
   23158:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2315c:	e7c4      	b.n	230e8 <connect_lte+0x24>
   2315e:	bf00      	nop
   23160:	2001c655 	.word	0x2001c655
   23164:	00038880 	.word	0x00038880
   23168:	000387c0 	.word	0x000387c0
   2316c:	0003e551 	.word	0x0003e551
   23170:	20016844 	.word	0x20016844
   23174:	2001c656 	.word	0x2001c656
   23178:	20014c84 	.word	0x20014c84
   2317c:	0003e57c 	.word	0x0003e57c
   23180:	0003e5a1 	.word	0x0003e5a1

00023184 <response_is_valid>:
{
   23184:	b570      	push	{r4, r5, r6, lr}
   23186:	460e      	mov	r6, r1
   23188:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   2318a:	4605      	mov	r5, r0
   2318c:	b100      	cbz	r0, 23190 <response_is_valid+0xc>
   2318e:	b95a      	cbnz	r2, 231a8 <response_is_valid+0x24>
   23190:	490c      	ldr	r1, [pc, #48]	; (231c4 <response_is_valid+0x40>)
   23192:	4b0d      	ldr	r3, [pc, #52]	; (231c8 <response_is_valid+0x44>)
		LOG_ERR("Invalid pointer provided");
   23194:	480d      	ldr	r0, [pc, #52]	; (231cc <response_is_valid+0x48>)
   23196:	1ac9      	subs	r1, r1, r3
   23198:	08c9      	lsrs	r1, r1, #3
   2319a:	0189      	lsls	r1, r1, #6
   2319c:	f041 0101 	orr.w	r1, r1, #1
   231a0:	f00d f89a 	bl	302d8 <log_0>
		return false;
   231a4:	2000      	movs	r0, #0
   231a6:	e00c      	b.n	231c2 <response_is_valid+0x3e>
	if ((response_len < strlen(check)) ||
   231a8:	4610      	mov	r0, r2
   231aa:	f7ee f9a9 	bl	11500 <strlen>
   231ae:	4286      	cmp	r6, r0
   231b0:	d3f8      	bcc.n	231a4 <response_is_valid+0x20>
	    (memcmp(response, check, response_len) != 0)) {
   231b2:	4632      	mov	r2, r6
   231b4:	4621      	mov	r1, r4
   231b6:	4628      	mov	r0, r5
   231b8:	f014 fad5 	bl	37766 <memcmp>
	if ((response_len < strlen(check)) ||
   231bc:	fab0 f080 	clz	r0, r0
   231c0:	0940      	lsrs	r0, r0, #5
}
   231c2:	bd70      	pop	{r4, r5, r6, pc}
   231c4:	00038888 	.word	0x00038888
   231c8:	000387c0 	.word	0x000387c0
   231cc:	0003e6d2 	.word	0x0003e6d2

000231d0 <parse_psm>:
	int err;
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
				    AT_CEREG_READ_TAU_INDEX;
	size_t active_time_idx = is_notif ? AT_CEREG_ACTIVE_TIME_INDEX :
					    AT_CEREG_READ_ACTIVE_TIME_INDEX;
	char timer_str[9] = {0};
   231d0:	2300      	movs	r3, #0
{
   231d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   231d6:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   231d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
   231dc:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   231e0:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   231e2:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   231e4:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   231e6:	9304      	str	r3, [sp, #16]
{
   231e8:	4617      	mov	r7, r2
	 */
	static const uint32_t t3412_lookup[8] = {600, 3600, 36000, 2, 30, 60,
					      1152000, 0};

	/* Parse periodic TAU string */
	err = at_params_string_get(at_params,
   231ea:	ab04      	add	r3, sp, #16
   231ec:	bf14      	ite	ne
   231ee:	2108      	movne	r1, #8
   231f0:	2109      	moveq	r1, #9
   231f2:	aa05      	add	r2, sp, #20
{
   231f4:	4680      	mov	r8, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   231f6:	bf14      	ite	ne
   231f8:	f04f 0907 	movne.w	r9, #7
   231fc:	f04f 0908 	moveq.w	r9, #8
	err = at_params_string_get(at_params,
   23200:	f012 fc63 	bl	35aca <at_params_string_get>
				   tau_idx,
				   timer_str,
				   &timer_str_len);
	if (err) {
   23204:	4d34      	ldr	r5, [pc, #208]	; (232d8 <parse_psm+0x108>)
   23206:	4b35      	ldr	r3, [pc, #212]	; (232dc <parse_psm+0x10c>)
   23208:	4604      	mov	r4, r0
   2320a:	1aed      	subs	r5, r5, r3
   2320c:	08ed      	lsrs	r5, r5, #3
   2320e:	01ad      	lsls	r5, r5, #6
   23210:	b148      	cbz	r0, 23226 <parse_psm+0x56>
	err = at_params_string_get(at_params,
				   active_time_idx,
				   timer_str,
				   &timer_str_len);
	if (err) {
		LOG_ERR("Could not get TAU, error: %d", err);
   23212:	4621      	mov	r1, r4
   23214:	4832      	ldr	r0, [pc, #200]	; (232e0 <parse_psm+0x110>)
   23216:	f045 0201 	orr.w	r2, r5, #1
   2321a:	f00d f86a 	bl	302f2 <log_1>

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   2321e:	4620      	mov	r0, r4
   23220:	b009      	add	sp, #36	; 0x24
   23222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   23226:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   23228:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2322a:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2322e:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   23230:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   23232:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   23234:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   23238:	f00c f894 	bl	2f364 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   2323c:	2807      	cmp	r0, #7
   2323e:	d907      	bls.n	23250 <parse_psm+0x80>
		LOG_ERR("Unable to parse periodic TAU string");
   23240:	4828      	ldr	r0, [pc, #160]	; (232e4 <parse_psm+0x114>)
   23242:	f045 0101 	orr.w	r1, r5, #1
		LOG_ERR("Unable to parse active time string");
   23246:	f00d f847 	bl	302d8 <log_0>
		return err;
   2324a:	f06f 0415 	mvn.w	r4, #21
   2324e:	e7e6      	b.n	2321e <parse_psm+0x4e>
	timer_unit = t3412_lookup[lut_idx];
   23250:	4b25      	ldr	r3, [pc, #148]	; (232e8 <parse_psm+0x118>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   23252:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   23254:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   23258:	4621      	mov	r1, r4
   2325a:	f10d 0017 	add.w	r0, sp, #23
   2325e:	f00c f881 	bl	2f364 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   23262:	b1de      	cbz	r6, 2329c <parse_psm+0xcc>
   23264:	4346      	muls	r6, r0
	err = at_params_string_get(at_params,
   23266:	4649      	mov	r1, r9
   23268:	4640      	mov	r0, r8
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2326a:	603e      	str	r6, [r7, #0]
	err = at_params_string_get(at_params,
   2326c:	ab04      	add	r3, sp, #16
   2326e:	aa05      	add	r2, sp, #20
   23270:	f012 fc2b 	bl	35aca <at_params_string_get>
	if (err) {
   23274:	4604      	mov	r4, r0
   23276:	2800      	cmp	r0, #0
   23278:	d1cb      	bne.n	23212 <parse_psm+0x42>
	memcpy(unit_str, timer_str, unit_str_len);
   2327a:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   2327c:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2327e:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   23282:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   23284:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   23286:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   23288:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   2328c:	f00c f86a 	bl	2f364 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   23290:	2807      	cmp	r0, #7
   23292:	d906      	bls.n	232a2 <parse_psm+0xd2>
		LOG_ERR("Unable to parse active time string");
   23294:	4815      	ldr	r0, [pc, #84]	; (232ec <parse_psm+0x11c>)
   23296:	f045 0101 	orr.w	r1, r5, #1
   2329a:	e7d4      	b.n	23246 <parse_psm+0x76>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2329c:	f04f 36ff 	mov.w	r6, #4294967295
   232a0:	e7e1      	b.n	23266 <parse_psm+0x96>
	timer_unit = t3324_lookup[lut_idx];
   232a2:	4b13      	ldr	r3, [pc, #76]	; (232f0 <parse_psm+0x120>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   232a4:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   232a6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   232aa:	4621      	mov	r1, r4
   232ac:	f10d 0017 	add.w	r0, sp, #23
   232b0:	f00c f858 	bl	2f364 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   232b4:	b166      	cbz	r6, 232d0 <parse_psm+0x100>
   232b6:	fb06 f300 	mul.w	r3, r6, r0
	LOG_DBG("TAU: %d sec, active time: %d sec\n",
   232ba:	f045 0504 	orr.w	r5, r5, #4
   232be:	683a      	ldr	r2, [r7, #0]
   232c0:	490c      	ldr	r1, [pc, #48]	; (232f4 <parse_psm+0x124>)
   232c2:	480d      	ldr	r0, [pc, #52]	; (232f8 <parse_psm+0x128>)
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   232c4:	607b      	str	r3, [r7, #4]
	LOG_DBG("TAU: %d sec, active time: %d sec\n",
   232c6:	f8ad 5000 	strh.w	r5, [sp]
   232ca:	f00d f83f 	bl	3034c <log_3>
	return 0;
   232ce:	e7a6      	b.n	2321e <parse_psm+0x4e>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   232d0:	f04f 33ff 	mov.w	r3, #4294967295
   232d4:	e7f1      	b.n	232ba <parse_psm+0xea>
   232d6:	bf00      	nop
   232d8:	00038888 	.word	0x00038888
   232dc:	000387c0 	.word	0x000387c0
   232e0:	0003e85c 	.word	0x0003e85c
   232e4:	0003e879 	.word	0x0003e879
   232e8:	00039428 	.word	0x00039428
   232ec:	0003e89d 	.word	0x0003e89d
   232f0:	00039408 	.word	0x00039408
   232f4:	0003ec7f 	.word	0x0003ec7f
   232f8:	0003e8c0 	.word	0x0003e8c0

000232fc <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   232fc:	2300      	movs	r3, #0
{
   232fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   23300:	b085      	sub	sp, #20
   23302:	4607      	mov	r7, r0
   23304:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   23306:	a802      	add	r0, sp, #8
   23308:	2104      	movs	r1, #4
{
   2330a:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   2330c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   23310:	f012 facd 	bl	358ae <at_params_list_init>
	if (err) {
   23314:	4604      	mov	r4, r0
   23316:	b168      	cbz	r0, 23334 <parse_rrc_mode+0x38>
   23318:	4a24      	ldr	r2, [pc, #144]	; (233ac <parse_rrc_mode+0xb0>)
   2331a:	4b25      	ldr	r3, [pc, #148]	; (233b0 <parse_rrc_mode+0xb4>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   2331c:	4601      	mov	r1, r0
   2331e:	1ad2      	subs	r2, r2, r3
   23320:	08d2      	lsrs	r2, r2, #3
   23322:	0192      	lsls	r2, r2, #6
   23324:	4823      	ldr	r0, [pc, #140]	; (233b4 <parse_rrc_mode+0xb8>)
   23326:	f042 0201 	orr.w	r2, r2, #1
   2332a:	f00c ffe2 	bl	302f2 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2332e:	4620      	mov	r0, r4
   23330:	b005      	add	sp, #20
   23332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   23334:	4601      	mov	r1, r0
   23336:	aa02      	add	r2, sp, #8
   23338:	4638      	mov	r0, r7
   2333a:	f012 fab5 	bl	358a8 <at_parser_params_from_str>
	if (err) {
   2333e:	4604      	mov	r4, r0
   23340:	b170      	cbz	r0, 23360 <parse_rrc_mode+0x64>
   23342:	4a1a      	ldr	r2, [pc, #104]	; (233ac <parse_rrc_mode+0xb0>)
   23344:	4b1a      	ldr	r3, [pc, #104]	; (233b0 <parse_rrc_mode+0xb4>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   23346:	4601      	mov	r1, r0
   23348:	1ad2      	subs	r2, r2, r3
   2334a:	08d2      	lsrs	r2, r2, #3
   2334c:	0192      	lsls	r2, r2, #6
   2334e:	481a      	ldr	r0, [pc, #104]	; (233b8 <parse_rrc_mode+0xbc>)
   23350:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get signalling mode, error: %d", err);
   23354:	f00c ffcd 	bl	302f2 <log_1>
	at_params_list_free(&resp_list);
   23358:	a802      	add	r0, sp, #8
   2335a:	f012 fabb 	bl	358d4 <at_params_list_free>
	return err;
   2335e:	e7e6      	b.n	2332e <parse_rrc_mode+0x32>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   23360:	4631      	mov	r1, r6
   23362:	aa01      	add	r2, sp, #4
   23364:	a802      	add	r0, sp, #8
   23366:	f012 fb79 	bl	35a5c <at_params_int_get>
	if (err) {
   2336a:	4604      	mov	r4, r0
   2336c:	b148      	cbz	r0, 23382 <parse_rrc_mode+0x86>
   2336e:	4a0f      	ldr	r2, [pc, #60]	; (233ac <parse_rrc_mode+0xb0>)
   23370:	4b0f      	ldr	r3, [pc, #60]	; (233b0 <parse_rrc_mode+0xb4>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   23372:	4601      	mov	r1, r0
   23374:	1ad2      	subs	r2, r2, r3
   23376:	08d2      	lsrs	r2, r2, #3
   23378:	0192      	lsls	r2, r2, #6
   2337a:	4810      	ldr	r0, [pc, #64]	; (233bc <parse_rrc_mode+0xc0>)
   2337c:	f042 0201 	orr.w	r2, r2, #1
   23380:	e7e8      	b.n	23354 <parse_rrc_mode+0x58>
	if (temp_mode == 0) {
   23382:	9901      	ldr	r1, [sp, #4]
   23384:	b909      	cbnz	r1, 2338a <parse_rrc_mode+0x8e>
		*mode = LTE_LC_RRC_MODE_IDLE;
   23386:	7028      	strb	r0, [r5, #0]
   23388:	e7e6      	b.n	23358 <parse_rrc_mode+0x5c>
	} else if (temp_mode == 1) {
   2338a:	2901      	cmp	r1, #1
   2338c:	d101      	bne.n	23392 <parse_rrc_mode+0x96>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   2338e:	7029      	strb	r1, [r5, #0]
   23390:	e7e2      	b.n	23358 <parse_rrc_mode+0x5c>
   23392:	4b07      	ldr	r3, [pc, #28]	; (233b0 <parse_rrc_mode+0xb4>)
   23394:	4a05      	ldr	r2, [pc, #20]	; (233ac <parse_rrc_mode+0xb0>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   23396:	480a      	ldr	r0, [pc, #40]	; (233c0 <parse_rrc_mode+0xc4>)
   23398:	1ad2      	subs	r2, r2, r3
   2339a:	08d2      	lsrs	r2, r2, #3
   2339c:	0192      	lsls	r2, r2, #6
   2339e:	f042 0201 	orr.w	r2, r2, #1
   233a2:	f00c ffa6 	bl	302f2 <log_1>
		err = -EINVAL;
   233a6:	f06f 0415 	mvn.w	r4, #21
   233aa:	e7d5      	b.n	23358 <parse_rrc_mode+0x5c>
   233ac:	00038888 	.word	0x00038888
   233b0:	000387c0 	.word	0x000387c0
   233b4:	0003e6eb 	.word	0x0003e6eb
   233b8:	0003e8e6 	.word	0x0003e8e6
   233bc:	0003e911 	.word	0x0003e911
   233c0:	0003e93a 	.word	0x0003e93a

000233c4 <parse_cereg>:
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode,
		struct lte_lc_psm_cfg *psm_cfg)
{
   233c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   233c8:	4699      	mov	r9, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   233ca:	2300      	movs	r3, #0
{
   233cc:	b08a      	sub	sp, #40	; 0x28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   233ce:	9303      	str	r3, [sp, #12]
   233d0:	f8ad 3010 	strh.w	r3, [sp, #16]
   233d4:	f88d 3012 	strb.w	r3, [sp, #18]
{
   233d8:	4692      	mov	sl, r2
   233da:	e9dd 8712 	ldrd	r8, r7, [sp, #72]	; 0x48
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   233de:	2207      	movs	r2, #7
   233e0:	2309      	movs	r3, #9
{
   233e2:	4605      	mov	r5, r0
   233e4:	460e      	mov	r6, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   233e6:	a805      	add	r0, sp, #20
   233e8:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   233ea:	e9cd 2300 	strd	r2, r3, [sp]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   233ee:	f012 fa5e 	bl	358ae <at_params_list_init>
	if (err) {
   233f2:	4604      	mov	r4, r0
   233f4:	b170      	cbz	r0, 23414 <parse_cereg+0x50>
   233f6:	4a94      	ldr	r2, [pc, #592]	; (23648 <parse_cereg+0x284>)
   233f8:	4b94      	ldr	r3, [pc, #592]	; (2364c <parse_cereg+0x288>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   233fa:	4601      	mov	r1, r0
   233fc:	1ad2      	subs	r2, r2, r3
   233fe:	08d2      	lsrs	r2, r2, #3
   23400:	0192      	lsls	r2, r2, #6
   23402:	4893      	ldr	r0, [pc, #588]	; (23650 <parse_cereg+0x28c>)
   23404:	f042 0201 	orr.w	r2, r2, #1
   23408:	f00c ff73 	bl	302f2 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2340c:	4620      	mov	r0, r4
   2340e:	b00a      	add	sp, #40	; 0x28
   23410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   23414:	4601      	mov	r1, r0
   23416:	aa05      	add	r2, sp, #20
   23418:	4628      	mov	r0, r5
   2341a:	f012 fa45 	bl	358a8 <at_parser_params_from_str>
	if (err) {
   2341e:	4604      	mov	r4, r0
   23420:	b158      	cbz	r0, 2343a <parse_cereg+0x76>
   23422:	4a89      	ldr	r2, [pc, #548]	; (23648 <parse_cereg+0x284>)
   23424:	4b89      	ldr	r3, [pc, #548]	; (2364c <parse_cereg+0x288>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   23426:	4601      	mov	r1, r0
   23428:	1ad2      	subs	r2, r2, r3
   2342a:	08d2      	lsrs	r2, r2, #3
   2342c:	0192      	lsls	r2, r2, #6
   2342e:	4889      	ldr	r0, [pc, #548]	; (23654 <parse_cereg+0x290>)
   23430:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   23434:	f00c ff5d 	bl	302f2 <log_1>
			goto clean_exit;
   23438:	e04a      	b.n	234d0 <parse_cereg+0x10c>
	err = at_params_string_get(&resp_list,
   2343a:	4601      	mov	r1, r0
   2343c:	466b      	mov	r3, sp
   2343e:	aa03      	add	r2, sp, #12
   23440:	a805      	add	r0, sp, #20
   23442:	f012 fb42 	bl	35aca <at_params_string_get>
	if (err) {
   23446:	4604      	mov	r4, r0
   23448:	b148      	cbz	r0, 2345e <parse_cereg+0x9a>
   2344a:	4a7f      	ldr	r2, [pc, #508]	; (23648 <parse_cereg+0x284>)
   2344c:	4b7f      	ldr	r3, [pc, #508]	; (2364c <parse_cereg+0x288>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   2344e:	4601      	mov	r1, r0
   23450:	1ad2      	subs	r2, r2, r3
   23452:	08d2      	lsrs	r2, r2, #3
   23454:	0192      	lsls	r2, r2, #6
   23456:	4880      	ldr	r0, [pc, #512]	; (23658 <parse_cereg+0x294>)
   23458:	f042 0201 	orr.w	r2, r2, #1
   2345c:	e7ea      	b.n	23434 <parse_cereg+0x70>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2345e:	4a7f      	ldr	r2, [pc, #508]	; (2365c <parse_cereg+0x298>)
   23460:	9900      	ldr	r1, [sp, #0]
   23462:	a803      	add	r0, sp, #12
   23464:	f7ff fe8e 	bl	23184 <response_is_valid>
   23468:	b948      	cbnz	r0, 2347e <parse_cereg+0xba>
   2346a:	4a77      	ldr	r2, [pc, #476]	; (23648 <parse_cereg+0x284>)
   2346c:	4b77      	ldr	r3, [pc, #476]	; (2364c <parse_cereg+0x288>)
		LOG_DBG("Not a valid CEREG response");
   2346e:	497c      	ldr	r1, [pc, #496]	; (23660 <parse_cereg+0x29c>)
   23470:	1ad2      	subs	r2, r2, r3
   23472:	08d2      	lsrs	r2, r2, #3
   23474:	0192      	lsls	r2, r2, #6
   23476:	487b      	ldr	r0, [pc, #492]	; (23664 <parse_cereg+0x2a0>)
   23478:	f042 0204 	orr.w	r2, r2, #4
   2347c:	e7da      	b.n	23434 <parse_cereg+0x70>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   2347e:	2e00      	cmp	r6, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   23480:	bf14      	ite	ne
   23482:	2101      	movne	r1, #1
   23484:	2102      	moveq	r1, #2
   23486:	aa07      	add	r2, sp, #28
   23488:	a805      	add	r0, sp, #20
   2348a:	f012 fae7 	bl	35a5c <at_params_int_get>
	if (err) {
   2348e:	1e05      	subs	r5, r0, #0
   23490:	d159      	bne.n	23546 <parse_cereg+0x182>
	switch (reg_status) {
   23492:	9d07      	ldr	r5, [sp, #28]
   23494:	2d08      	cmp	r5, #8
   23496:	d021      	beq.n	234dc <parse_cereg+0x118>
   23498:	dc1e      	bgt.n	234d8 <parse_cereg+0x114>
   2349a:	2d05      	cmp	r5, #5
   2349c:	d91e      	bls.n	234dc <parse_cereg+0x118>
   2349e:	4b6b      	ldr	r3, [pc, #428]	; (2364c <parse_cereg+0x288>)
   234a0:	4a69      	ldr	r2, [pc, #420]	; (23648 <parse_cereg+0x284>)
		LOG_ERR("Invalid network registration status: %d", reg_status);
   234a2:	4629      	mov	r1, r5
   234a4:	1ad2      	subs	r2, r2, r3
   234a6:	08d2      	lsrs	r2, r2, #3
   234a8:	0192      	lsls	r2, r2, #6
   234aa:	486f      	ldr	r0, [pc, #444]	; (23668 <parse_cereg+0x2a4>)
   234ac:	f042 0201 	orr.w	r2, r2, #1
   234b0:	f00c ff1f 	bl	302f2 <log_1>
		return -EINVAL;
   234b4:	f06f 0515 	mvn.w	r5, #21
   234b8:	4b64      	ldr	r3, [pc, #400]	; (2364c <parse_cereg+0x288>)
   234ba:	4a63      	ldr	r2, [pc, #396]	; (23648 <parse_cereg+0x284>)
		LOG_ERR("Could not get registration status, error: %d", status);
   234bc:	4629      	mov	r1, r5
   234be:	1ad2      	subs	r2, r2, r3
   234c0:	08d2      	lsrs	r2, r2, #3
   234c2:	0192      	lsls	r2, r2, #6
   234c4:	4869      	ldr	r0, [pc, #420]	; (2366c <parse_cereg+0x2a8>)
   234c6:	f042 0201 	orr.w	r2, r2, #1
   234ca:	f00c ff12 	bl	302f2 <log_1>
		goto clean_exit;
   234ce:	462c      	mov	r4, r5
	at_params_list_free(&resp_list);
   234d0:	a805      	add	r0, sp, #20
   234d2:	f012 f9ff 	bl	358d4 <at_params_list_free>
	return err;
   234d6:	e799      	b.n	2340c <parse_cereg+0x48>
	switch (reg_status) {
   234d8:	2d5a      	cmp	r5, #90	; 0x5a
   234da:	d1e0      	bne.n	2349e <parse_cereg+0xda>
	if (reg_status) {
   234dc:	f1ba 0f00 	cmp.w	sl, #0
   234e0:	d00d      	beq.n	234fe <parse_cereg+0x13a>
   234e2:	4a5a      	ldr	r2, [pc, #360]	; (2364c <parse_cereg+0x288>)
   234e4:	4b58      	ldr	r3, [pc, #352]	; (23648 <parse_cereg+0x284>)
		LOG_DBG("Network registration status: %d", *reg_status);
   234e6:	495e      	ldr	r1, [pc, #376]	; (23660 <parse_cereg+0x29c>)
   234e8:	1a9b      	subs	r3, r3, r2
   234ea:	08db      	lsrs	r3, r3, #3
   234ec:	019b      	lsls	r3, r3, #6
   234ee:	4860      	ldr	r0, [pc, #384]	; (23670 <parse_cereg+0x2ac>)
		*reg_status = status;
   234f0:	f88a 5000 	strb.w	r5, [sl]
		LOG_DBG("Network registration status: %d", *reg_status);
   234f4:	f043 0304 	orr.w	r3, r3, #4
   234f8:	b2ea      	uxtb	r2, r5
   234fa:	f00c ff0e 	bl	3031a <log_2>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   234fe:	f1b9 0f00 	cmp.w	r9, #0
   23502:	d051      	beq.n	235a8 <parse_cereg+0x1e4>
   23504:	2d5a      	cmp	r5, #90	; 0x5a
   23506:	f000 8099 	beq.w	2363c <parse_cereg+0x278>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   2350a:	a805      	add	r0, sp, #20
   2350c:	f012 fb04 	bl	35b18 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   23510:	2803      	cmp	r0, #3
   23512:	f240 8093 	bls.w	2363c <parse_cereg+0x278>
		err = at_params_string_get(
   23516:	2e00      	cmp	r6, #0
   23518:	bf14      	ite	ne
   2351a:	2102      	movne	r1, #2
   2351c:	2103      	moveq	r1, #3
   2351e:	ab01      	add	r3, sp, #4
   23520:	aa07      	add	r2, sp, #28
   23522:	a805      	add	r0, sp, #20
   23524:	f012 fad1 	bl	35aca <at_params_string_get>
		if (err) {
   23528:	4682      	mov	sl, r0
   2352a:	b170      	cbz	r0, 2354a <parse_cereg+0x186>
   2352c:	4a46      	ldr	r2, [pc, #280]	; (23648 <parse_cereg+0x284>)
   2352e:	4b47      	ldr	r3, [pc, #284]	; (2364c <parse_cereg+0x288>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
   23530:	4601      	mov	r1, r0
   23532:	1ad2      	subs	r2, r2, r3
   23534:	08d2      	lsrs	r2, r2, #3
   23536:	0192      	lsls	r2, r2, #6
   23538:	484e      	ldr	r0, [pc, #312]	; (23674 <parse_cereg+0x2b0>)
   2353a:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
   2353e:	f00c fed8 	bl	302f2 <log_1>
			goto clean_exit;
   23542:	4654      	mov	r4, sl
   23544:	e7c4      	b.n	234d0 <parse_cereg+0x10c>
	if (status < 0) {
   23546:	dac9      	bge.n	234dc <parse_cereg+0x118>
   23548:	e7b6      	b.n	234b8 <parse_cereg+0xf4>
		str_buf[len] = '\0';
   2354a:	9b01      	ldr	r3, [sp, #4]
   2354c:	aa0a      	add	r2, sp, #40	; 0x28
   2354e:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   23550:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   23552:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   23556:	2210      	movs	r2, #16
   23558:	a807      	add	r0, sp, #28
   2355a:	f00b ff03 	bl	2f364 <strtoul>
		len = sizeof(str_buf) - 1;
   2355e:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   23560:	2e00      	cmp	r6, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   23562:	f8c9 000c 	str.w	r0, [r9, #12]
		len = sizeof(str_buf) - 1;
   23566:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   23568:	bf14      	ite	ne
   2356a:	2103      	movne	r1, #3
   2356c:	2104      	moveq	r1, #4
   2356e:	ab01      	add	r3, sp, #4
   23570:	aa07      	add	r2, sp, #28
   23572:	a805      	add	r0, sp, #20
   23574:	f012 faa9 	bl	35aca <at_params_string_get>
		if (err) {
   23578:	4682      	mov	sl, r0
   2357a:	b148      	cbz	r0, 23590 <parse_cereg+0x1cc>
   2357c:	4a32      	ldr	r2, [pc, #200]	; (23648 <parse_cereg+0x284>)
   2357e:	4b33      	ldr	r3, [pc, #204]	; (2364c <parse_cereg+0x288>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   23580:	4601      	mov	r1, r0
   23582:	1ad2      	subs	r2, r2, r3
   23584:	08d2      	lsrs	r2, r2, #3
   23586:	0192      	lsls	r2, r2, #6
   23588:	483b      	ldr	r0, [pc, #236]	; (23678 <parse_cereg+0x2b4>)
   2358a:	f042 0201 	orr.w	r2, r2, #1
   2358e:	e7d6      	b.n	2353e <parse_cereg+0x17a>
		str_buf[len] = '\0';
   23590:	9b01      	ldr	r3, [sp, #4]
   23592:	aa0a      	add	r2, sp, #40	; 0x28
   23594:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   23596:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   23598:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   2359c:	2210      	movs	r2, #16
   2359e:	a807      	add	r0, sp, #28
   235a0:	f00b fee0 	bl	2f364 <strtoul>
   235a4:	f8c9 0008 	str.w	r0, [r9, #8]
	if (lte_mode) {
   235a8:	f1b8 0f00 	cmp.w	r8, #0
   235ac:	d017      	beq.n	235de <parse_cereg+0x21a>
		err = at_params_int_get(&resp_list,
   235ae:	2e00      	cmp	r6, #0
   235b0:	aa02      	add	r2, sp, #8
   235b2:	bf14      	ite	ne
   235b4:	2104      	movne	r1, #4
   235b6:	2105      	moveq	r1, #5
   235b8:	a805      	add	r0, sp, #20
   235ba:	f012 fa4f 	bl	35a5c <at_params_int_get>
		if (err) {
   235be:	4a23      	ldr	r2, [pc, #140]	; (2364c <parse_cereg+0x288>)
   235c0:	4b21      	ldr	r3, [pc, #132]	; (23648 <parse_cereg+0x284>)
   235c2:	1a9b      	subs	r3, r3, r2
   235c4:	08db      	lsrs	r3, r3, #3
   235c6:	4602      	mov	r2, r0
   235c8:	019b      	lsls	r3, r3, #6
   235ca:	b338      	cbz	r0, 2361c <parse_cereg+0x258>
			LOG_DBG("LTE mode not found, error code: %d", err);
   235cc:	f043 0304 	orr.w	r3, r3, #4
   235d0:	4923      	ldr	r1, [pc, #140]	; (23660 <parse_cereg+0x29c>)
   235d2:	482a      	ldr	r0, [pc, #168]	; (2367c <parse_cereg+0x2b8>)
   235d4:	f00c fea1 	bl	3031a <log_2>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   235d8:	2300      	movs	r3, #0
   235da:	f888 3000 	strb.w	r3, [r8]
	if (psm_cfg && ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   235de:	2f00      	cmp	r7, #0
   235e0:	f43f af76 	beq.w	234d0 <parse_cereg+0x10c>
   235e4:	f025 0504 	bic.w	r5, r5, #4
   235e8:	2d01      	cmp	r5, #1
   235ea:	d122      	bne.n	23632 <parse_cereg+0x26e>
	     (at_params_valid_count_get(&resp_list) > AT_CEREG_TAU_INDEX)) {
   235ec:	a805      	add	r0, sp, #20
   235ee:	f012 fa93 	bl	35b18 <at_params_valid_count_get>
	    (status == LTE_LC_NW_REG_REGISTERED_ROAMING)) &&
   235f2:	2808      	cmp	r0, #8
   235f4:	d91d      	bls.n	23632 <parse_cereg+0x26e>
		err = parse_psm(&resp_list, is_notif, psm_cfg);
   235f6:	463a      	mov	r2, r7
   235f8:	4631      	mov	r1, r6
   235fa:	a805      	add	r0, sp, #20
   235fc:	f7ff fde8 	bl	231d0 <parse_psm>
		if (err) {
   23600:	4604      	mov	r4, r0
   23602:	2800      	cmp	r0, #0
   23604:	f43f af64 	beq.w	234d0 <parse_cereg+0x10c>
   23608:	4a0f      	ldr	r2, [pc, #60]	; (23648 <parse_cereg+0x284>)
   2360a:	4b10      	ldr	r3, [pc, #64]	; (2364c <parse_cereg+0x288>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   2360c:	4601      	mov	r1, r0
   2360e:	1ad2      	subs	r2, r2, r3
   23610:	08d2      	lsrs	r2, r2, #3
   23612:	0192      	lsls	r2, r2, #6
   23614:	481a      	ldr	r0, [pc, #104]	; (23680 <parse_cereg+0x2bc>)
   23616:	f042 0201 	orr.w	r2, r2, #1
   2361a:	e70b      	b.n	23434 <parse_cereg+0x70>
			*lte_mode = mode;
   2361c:	9a02      	ldr	r2, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   2361e:	4910      	ldr	r1, [pc, #64]	; (23660 <parse_cereg+0x29c>)
			*lte_mode = mode;
   23620:	f888 2000 	strb.w	r2, [r8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   23624:	4817      	ldr	r0, [pc, #92]	; (23684 <parse_cereg+0x2c0>)
   23626:	f043 0304 	orr.w	r3, r3, #4
   2362a:	b2d2      	uxtb	r2, r2
   2362c:	f00c fe75 	bl	3031a <log_2>
   23630:	e7d5      	b.n	235de <parse_cereg+0x21a>
		psm_cfg->tau = -1;
   23632:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
   23636:	e9c7 3300 	strd	r3, r3, [r7]
   2363a:	e749      	b.n	234d0 <parse_cereg+0x10c>
		cell->tac = UINT32_MAX;
   2363c:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
   23640:	e9c9 3302 	strd	r3, r3, [r9, #8]
   23644:	e7b0      	b.n	235a8 <parse_cereg+0x1e4>
   23646:	bf00      	nop
   23648:	00038888 	.word	0x00038888
   2364c:	000387c0 	.word	0x000387c0
   23650:	0003e6eb 	.word	0x0003e6eb
   23654:	0003e956 	.word	0x0003e956
   23658:	0003e26e 	.word	0x0003e26e
   2365c:	0003e5bd 	.word	0x0003e5bd
   23660:	0003ec89 	.word	0x0003ec89
   23664:	0003e983 	.word	0x0003e983
   23668:	0003e9a2 	.word	0x0003e9a2
   2366c:	0003e9ca 	.word	0x0003e9ca
   23670:	0003e9f7 	.word	0x0003e9f7
   23674:	0003ea1b 	.word	0x0003ea1b
   23678:	0003ea47 	.word	0x0003ea47
   2367c:	0003ea68 	.word	0x0003ea68
   23680:	0003eaa0 	.word	0x0003eaa0
   23684:	0003ea8f 	.word	0x0003ea8f

00023688 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   23688:	2300      	movs	r3, #0
{
   2368a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2368c:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   2368e:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   23690:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   23694:	2900      	cmp	r1, #0
   23696:	d051      	beq.n	2373c <parse_xt3412+0xb4>
   23698:	2800      	cmp	r0, #0
   2369a:	d04f      	beq.n	2373c <parse_xt3412+0xb4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   2369c:	2104      	movs	r1, #4
   2369e:	4668      	mov	r0, sp
   236a0:	f012 f905 	bl	358ae <at_params_list_init>
	if (err) {
   236a4:	4604      	mov	r4, r0
   236a6:	b168      	cbz	r0, 236c4 <parse_xt3412+0x3c>
   236a8:	4a26      	ldr	r2, [pc, #152]	; (23744 <parse_xt3412+0xbc>)
   236aa:	4b27      	ldr	r3, [pc, #156]	; (23748 <parse_xt3412+0xc0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   236ac:	4601      	mov	r1, r0
   236ae:	1ad2      	subs	r2, r2, r3
   236b0:	08d2      	lsrs	r2, r2, #3
   236b2:	0192      	lsls	r2, r2, #6
   236b4:	4825      	ldr	r0, [pc, #148]	; (2374c <parse_xt3412+0xc4>)
   236b6:	f042 0201 	orr.w	r2, r2, #1
   236ba:	f00c fe1a 	bl	302f2 <log_1>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   236be:	4620      	mov	r0, r4
   236c0:	b002      	add	sp, #8
   236c2:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   236c4:	4601      	mov	r1, r0
   236c6:	466a      	mov	r2, sp
   236c8:	4630      	mov	r0, r6
   236ca:	f012 f8ed 	bl	358a8 <at_parser_params_from_str>
	if (err) {
   236ce:	4604      	mov	r4, r0
   236d0:	b170      	cbz	r0, 236f0 <parse_xt3412+0x68>
   236d2:	4a1c      	ldr	r2, [pc, #112]	; (23744 <parse_xt3412+0xbc>)
   236d4:	4b1c      	ldr	r3, [pc, #112]	; (23748 <parse_xt3412+0xc0>)
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   236d6:	4601      	mov	r1, r0
   236d8:	1ad2      	subs	r2, r2, r3
   236da:	08d2      	lsrs	r2, r2, #3
   236dc:	0192      	lsls	r2, r2, #6
   236de:	481c      	ldr	r0, [pc, #112]	; (23750 <parse_xt3412+0xc8>)
   236e0:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   236e4:	f00c fe05 	bl	302f2 <log_1>
	at_params_list_free(&resp_list);
   236e8:	4668      	mov	r0, sp
   236ea:	f012 f8f3 	bl	358d4 <at_params_list_free>
	return err;
   236ee:	e7e6      	b.n	236be <parse_xt3412+0x36>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   236f0:	462a      	mov	r2, r5
   236f2:	2102      	movs	r1, #2
   236f4:	4668      	mov	r0, sp
   236f6:	f012 f9d0 	bl	35a9a <at_params_int64_get>
	if (err) {
   236fa:	4604      	mov	r4, r0
   236fc:	b148      	cbz	r0, 23712 <parse_xt3412+0x8a>
   236fe:	4a11      	ldr	r2, [pc, #68]	; (23744 <parse_xt3412+0xbc>)
   23700:	4b11      	ldr	r3, [pc, #68]	; (23748 <parse_xt3412+0xc0>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   23702:	4601      	mov	r1, r0
   23704:	1ad2      	subs	r2, r2, r3
   23706:	08d2      	lsrs	r2, r2, #3
   23708:	0192      	lsls	r2, r2, #6
   2370a:	4812      	ldr	r0, [pc, #72]	; (23754 <parse_xt3412+0xcc>)
   2370c:	f042 0201 	orr.w	r2, r2, #1
   23710:	e7e8      	b.n	236e4 <parse_xt3412+0x5c>
	if ((*time > T3412_MAX) || *time < 0) {
   23712:	2108      	movs	r1, #8
   23714:	e9d5 2300 	ldrd	r2, r3, [r5]
   23718:	480f      	ldr	r0, [pc, #60]	; (23758 <parse_xt3412+0xd0>)
   2371a:	4299      	cmp	r1, r3
   2371c:	bf08      	it	eq
   2371e:	4290      	cmpeq	r0, r2
   23720:	d2e2      	bcs.n	236e8 <parse_xt3412+0x60>
   23722:	4b09      	ldr	r3, [pc, #36]	; (23748 <parse_xt3412+0xc0>)
   23724:	4907      	ldr	r1, [pc, #28]	; (23744 <parse_xt3412+0xbc>)
		LOG_WRN("Parsed time parameter not within valid range");
   23726:	480d      	ldr	r0, [pc, #52]	; (2375c <parse_xt3412+0xd4>)
   23728:	1ac9      	subs	r1, r1, r3
   2372a:	08c9      	lsrs	r1, r1, #3
   2372c:	0189      	lsls	r1, r1, #6
   2372e:	f041 0102 	orr.w	r1, r1, #2
   23732:	f00c fdd1 	bl	302d8 <log_0>
		err = -EINVAL;
   23736:	f06f 0415 	mvn.w	r4, #21
   2373a:	e7d5      	b.n	236e8 <parse_xt3412+0x60>
		return -EINVAL;
   2373c:	f06f 0415 	mvn.w	r4, #21
   23740:	e7bd      	b.n	236be <parse_xt3412+0x36>
   23742:	bf00      	nop
   23744:	00038888 	.word	0x00038888
   23748:	000387c0 	.word	0x000387c0
   2374c:	0003e6eb 	.word	0x0003e6eb
   23750:	0003eacd 	.word	0x0003eacd
   23754:	0003eafa 	.word	0x0003eafa
   23758:	5099e000 	.word	0x5099e000
   2375c:	0003eb27 	.word	0x0003eb27

00023760 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   23760:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   23762:	4604      	mov	r4, r0
   23764:	b958      	cbnz	r0, 2377e <neighborcell_count_get+0x1e>
   23766:	4b0e      	ldr	r3, [pc, #56]	; (237a0 <neighborcell_count_get+0x40>)
   23768:	490e      	ldr	r1, [pc, #56]	; (237a4 <neighborcell_count_get+0x44>)
		LOG_ERR("at_response is NULL, can't get cell count");
   2376a:	480f      	ldr	r0, [pc, #60]	; (237a8 <neighborcell_count_get+0x48>)
   2376c:	1ac9      	subs	r1, r1, r3
   2376e:	08c9      	lsrs	r1, r1, #3
   23770:	0189      	lsls	r1, r1, #6
   23772:	f041 0101 	orr.w	r1, r1, #1
   23776:	f00c fdaf 	bl	302d8 <log_0>
		return 0;
   2377a:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   2377c:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   2377e:	2400      	movs	r4, #0
   23780:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   23782:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   23786:	282c      	cmp	r0, #44	; 0x2c
   23788:	d101      	bne.n	2378e <neighborcell_count_get+0x2e>
			count++;
   2378a:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   2378c:	e7f9      	b.n	23782 <neighborcell_count_get+0x22>
   2378e:	2800      	cmp	r0, #0
   23790:	d1f7      	bne.n	23782 <neighborcell_count_get+0x22>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   23792:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   23794:	bf82      	ittt	hi
   23796:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   23798:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   2379a:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   2379e:	e7ed      	b.n	2377c <neighborcell_count_get+0x1c>
   237a0:	000387c0 	.word	0x000387c0
   237a4:	00038888 	.word	0x00038888
   237a8:	0003eb54 	.word	0x0003eb54

000237ac <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   237ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   237b0:	230b      	movs	r3, #11
{
   237b2:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   237b4:	2100      	movs	r1, #0
{
   237b6:	4606      	mov	r6, r0
   237b8:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   237ba:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   237be:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   237c0:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   237c4:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   237c6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   237ca:	2b2c      	cmp	r3, #44	; 0x2c
   237cc:	d101      	bne.n	237d2 <parse_ncellmeas+0x26>
			count++;
   237ce:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   237d0:	e7f9      	b.n	237c6 <parse_ncellmeas+0x1a>
   237d2:	2b00      	cmp	r3, #0
   237d4:	d1f7      	bne.n	237c6 <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   237d6:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28

	err = at_params_list_init(&resp_list, param_count);
   237da:	3103      	adds	r1, #3
   237dc:	a807      	add	r0, sp, #28
   237de:	f012 f866 	bl	358ae <at_params_list_init>
	if (err) {
   237e2:	4604      	mov	r4, r0
   237e4:	b170      	cbz	r0, 23804 <parse_ncellmeas+0x58>
   237e6:	4a8d      	ldr	r2, [pc, #564]	; (23a1c <parse_ncellmeas+0x270>)
   237e8:	4b8d      	ldr	r3, [pc, #564]	; (23a20 <parse_ncellmeas+0x274>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   237ea:	4601      	mov	r1, r0
   237ec:	1ad2      	subs	r2, r2, r3
   237ee:	08d2      	lsrs	r2, r2, #3
   237f0:	0192      	lsls	r2, r2, #6
   237f2:	488c      	ldr	r0, [pc, #560]	; (23a24 <parse_ncellmeas+0x278>)
   237f4:	f042 0201 	orr.w	r2, r2, #1
   237f8:	f00c fd7b 	bl	302f2 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   237fc:	4620      	mov	r0, r4
   237fe:	b00d      	add	sp, #52	; 0x34
   23800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   23804:	4601      	mov	r1, r0
   23806:	aa07      	add	r2, sp, #28
   23808:	4630      	mov	r0, r6
   2380a:	f012 f84d 	bl	358a8 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   2380e:	4604      	mov	r4, r0
   23810:	b180      	cbz	r0, 23834 <parse_ncellmeas+0x88>
   23812:	1dc3      	adds	r3, r0, #7
   23814:	d021      	beq.n	2385a <parse_ncellmeas+0xae>
   23816:	4a81      	ldr	r2, [pc, #516]	; (23a1c <parse_ncellmeas+0x270>)
   23818:	4b81      	ldr	r3, [pc, #516]	; (23a20 <parse_ncellmeas+0x274>)
		LOG_ERR("Could not parse AT%%XNCELLMEAS  response, error: %d", err);
   2381a:	4601      	mov	r1, r0
   2381c:	1ad2      	subs	r2, r2, r3
   2381e:	08d2      	lsrs	r2, r2, #3
   23820:	0192      	lsls	r2, r2, #6
   23822:	4881      	ldr	r0, [pc, #516]	; (23a28 <parse_ncellmeas+0x27c>)
   23824:	f042 0201 	orr.w	r2, r2, #1
		LOG_DBG("Not a valid NCELLMEAS response");
   23828:	f00c fd63 	bl	302f2 <log_1>
	at_params_list_free(&resp_list);
   2382c:	a807      	add	r0, sp, #28
   2382e:	f012 f851 	bl	358d4 <at_params_list_free>
	return err;
   23832:	e7e3      	b.n	237fc <parse_ncellmeas+0x50>
	bool incomplete = false;
   23834:	4680      	mov	r8, r0
	err = at_params_string_get(&resp_list,
   23836:	2100      	movs	r1, #0
   23838:	ab04      	add	r3, sp, #16
   2383a:	aa09      	add	r2, sp, #36	; 0x24
   2383c:	a807      	add	r0, sp, #28
   2383e:	f012 f944 	bl	35aca <at_params_string_get>
	if (err) {
   23842:	4604      	mov	r4, r0
   23844:	b160      	cbz	r0, 23860 <parse_ncellmeas+0xb4>
   23846:	4a75      	ldr	r2, [pc, #468]	; (23a1c <parse_ncellmeas+0x270>)
   23848:	4b75      	ldr	r3, [pc, #468]	; (23a20 <parse_ncellmeas+0x274>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   2384a:	4601      	mov	r1, r0
   2384c:	1ad2      	subs	r2, r2, r3
   2384e:	08d2      	lsrs	r2, r2, #3
   23850:	0192      	lsls	r2, r2, #6
   23852:	4876      	ldr	r0, [pc, #472]	; (23a2c <parse_ncellmeas+0x280>)
   23854:	f042 0201 	orr.w	r2, r2, #1
   23858:	e7e6      	b.n	23828 <parse_ncellmeas+0x7c>
		incomplete = true;
   2385a:	f04f 0801 	mov.w	r8, #1
   2385e:	e7ea      	b.n	23836 <parse_ncellmeas+0x8a>
	if (!response_is_valid(response_prefix, response_prefix_len,
   23860:	4a73      	ldr	r2, [pc, #460]	; (23a30 <parse_ncellmeas+0x284>)
   23862:	9904      	ldr	r1, [sp, #16]
   23864:	a809      	add	r0, sp, #36	; 0x24
   23866:	f7ff fc8d 	bl	23184 <response_is_valid>
   2386a:	b948      	cbnz	r0, 23880 <parse_ncellmeas+0xd4>
   2386c:	4a6b      	ldr	r2, [pc, #428]	; (23a1c <parse_ncellmeas+0x270>)
   2386e:	4b6c      	ldr	r3, [pc, #432]	; (23a20 <parse_ncellmeas+0x274>)
		LOG_DBG("Not a valid NCELLMEAS response");
   23870:	4970      	ldr	r1, [pc, #448]	; (23a34 <parse_ncellmeas+0x288>)
   23872:	1ad2      	subs	r2, r2, r3
   23874:	08d2      	lsrs	r2, r2, #3
   23876:	0192      	lsls	r2, r2, #6
   23878:	486f      	ldr	r0, [pc, #444]	; (23a38 <parse_ncellmeas+0x28c>)
   2387a:	f042 0204 	orr.w	r2, r2, #4
   2387e:	e7d3      	b.n	23828 <parse_ncellmeas+0x7c>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   23880:	2101      	movs	r1, #1
   23882:	aa01      	add	r2, sp, #4
   23884:	a807      	add	r0, sp, #28
   23886:	f012 f8e9 	bl	35a5c <at_params_int_get>
	if (err) {
   2388a:	4604      	mov	r4, r0
   2388c:	2800      	cmp	r0, #0
   2388e:	d1cd      	bne.n	2382c <parse_ncellmeas+0x80>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   23890:	9b01      	ldr	r3, [sp, #4]
   23892:	2b00      	cmp	r3, #0
   23894:	f040 80bd 	bne.w	23a12 <parse_ncellmeas+0x266>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   23898:	2102      	movs	r1, #2
   2389a:	aa02      	add	r2, sp, #8
   2389c:	a807      	add	r0, sp, #28
   2389e:	f012 f982 	bl	35ba6 <string_param_to_int.constprop.0>
	if (err) {
   238a2:	4604      	mov	r4, r0
   238a4:	2800      	cmp	r0, #0
   238a6:	d1c1      	bne.n	2382c <parse_ncellmeas+0x80>
	cells->current_cell.id = tmp;
   238a8:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   238aa:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   238ac:	60ab      	str	r3, [r5, #8]
	len = sizeof(tmp_str);
   238ae:	2307      	movs	r3, #7
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   238b0:	aa05      	add	r2, sp, #20
	len = sizeof(tmp_str);
   238b2:	9303      	str	r3, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   238b4:	a807      	add	r0, sp, #28
   238b6:	ab03      	add	r3, sp, #12
   238b8:	f012 f907 	bl	35aca <at_params_string_get>
	if (err) {
   238bc:	4604      	mov	r4, r0
   238be:	2800      	cmp	r0, #0
   238c0:	d1b4      	bne.n	2382c <parse_ncellmeas+0x80>
	tmp_str[len] = '\0';
   238c2:	9b03      	ldr	r3, [sp, #12]
   238c4:	aa0c      	add	r2, sp, #48	; 0x30
   238c6:	4413      	add	r3, r2
   238c8:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   238cc:	210a      	movs	r1, #10
   238ce:	1d2a      	adds	r2, r5, #4
   238d0:	f10d 0017 	add.w	r0, sp, #23
   238d4:	f012 f941 	bl	35b5a <string_to_int>
	if (err) {
   238d8:	4604      	mov	r4, r0
   238da:	2800      	cmp	r0, #0
   238dc:	d1a6      	bne.n	2382c <parse_ncellmeas+0x80>
	tmp_str[3] = '\0';
   238de:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   238e2:	462a      	mov	r2, r5
   238e4:	210a      	movs	r1, #10
   238e6:	a805      	add	r0, sp, #20
   238e8:	f012 f937 	bl	35b5a <string_to_int>
	if (err) {
   238ec:	4604      	mov	r4, r0
   238ee:	2800      	cmp	r0, #0
   238f0:	d19c      	bne.n	2382c <parse_ncellmeas+0x80>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   238f2:	2104      	movs	r1, #4
   238f4:	aa02      	add	r2, sp, #8
   238f6:	a807      	add	r0, sp, #28
   238f8:	f012 f955 	bl	35ba6 <string_param_to_int.constprop.0>
	if (err) {
   238fc:	4604      	mov	r4, r0
   238fe:	2800      	cmp	r0, #0
   23900:	d194      	bne.n	2382c <parse_ncellmeas+0x80>
	cells->current_cell.tac = tmp;
   23902:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   23904:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   23906:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   23908:	aa02      	add	r2, sp, #8
   2390a:	a807      	add	r0, sp, #28
   2390c:	f012 f8a6 	bl	35a5c <at_params_int_get>
	if (err) {
   23910:	4604      	mov	r4, r0
   23912:	2800      	cmp	r0, #0
   23914:	d18a      	bne.n	2382c <parse_ncellmeas+0x80>
	cells->current_cell.timing_advance = tmp;
   23916:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   23918:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   2391a:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   2391c:	f105 0210 	add.w	r2, r5, #16
   23920:	a807      	add	r0, sp, #28
   23922:	f012 f89b 	bl	35a5c <at_params_int_get>
	if (err) {
   23926:	4604      	mov	r4, r0
   23928:	2800      	cmp	r0, #0
   2392a:	f47f af7f 	bne.w	2382c <parse_ncellmeas+0x80>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   2392e:	2107      	movs	r1, #7
   23930:	f105 0220 	add.w	r2, r5, #32
   23934:	a807      	add	r0, sp, #28
   23936:	f012 f855 	bl	359e4 <at_params_short_get>
	if (err) {
   2393a:	4604      	mov	r4, r0
   2393c:	2800      	cmp	r0, #0
   2393e:	f47f af75 	bne.w	2382c <parse_ncellmeas+0x80>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   23942:	2108      	movs	r1, #8
   23944:	aa02      	add	r2, sp, #8
   23946:	a807      	add	r0, sp, #28
   23948:	f012 f888 	bl	35a5c <at_params_int_get>
	if (err) {
   2394c:	4604      	mov	r4, r0
   2394e:	2800      	cmp	r0, #0
   23950:	f47f af6c 	bne.w	2382c <parse_ncellmeas+0x80>
	cells->current_cell.rsrp = tmp;
   23954:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   23956:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   23958:	846b      	strh	r3, [r5, #34]	; 0x22
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   2395a:	aa02      	add	r2, sp, #8
   2395c:	a807      	add	r0, sp, #28
   2395e:	f012 f87d 	bl	35a5c <at_params_int_get>
	if (err) {
   23962:	4604      	mov	r4, r0
   23964:	2800      	cmp	r0, #0
   23966:	f47f af61 	bne.w	2382c <parse_ncellmeas+0x80>
	cells->current_cell.rsrq = tmp;
   2396a:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   2396c:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   2396e:	84ab      	strh	r3, [r5, #36]	; 0x24
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   23970:	f105 0218 	add.w	r2, r5, #24
   23974:	a807      	add	r0, sp, #28
   23976:	f012 f890 	bl	35a9a <at_params_int64_get>
	if (err) {
   2397a:	4604      	mov	r4, r0
   2397c:	2800      	cmp	r0, #0
   2397e:	f47f af55 	bne.w	2382c <parse_ncellmeas+0x80>
	cells->ncells_count = neighborcell_count_get(at_response);
   23982:	4630      	mov	r0, r6
   23984:	f7ff feec 	bl	23760 <neighborcell_count_get>
   23988:	b2c0      	uxtb	r0, r0
   2398a:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   2398e:	2800      	cmp	r0, #0
   23990:	f43f af4c 	beq.w	2382c <parse_ncellmeas+0x80>
   23994:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   23996:	2b00      	cmp	r3, #0
   23998:	f43f af48 	beq.w	2382c <parse_ncellmeas+0x80>
   2399c:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   2399e:	4627      	mov	r7, r4
   239a0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   239a4:	429f      	cmp	r7, r3
   239a6:	d305      	bcc.n	239b4 <parse_ncellmeas+0x208>
		err = -E2BIG;
   239a8:	f1b8 0f00 	cmp.w	r8, #0
   239ac:	bf18      	it	ne
   239ae:	f06f 0406 	mvnne.w	r4, #6
   239b2:	e73b      	b.n	2382c <parse_ncellmeas+0x80>
					&cells->neighbor_cells[i].earfcn);
   239b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
		err = at_params_int_get(&resp_list,
   239b6:	1f31      	subs	r1, r6, #4
   239b8:	eb02 1207 	add.w	r2, r2, r7, lsl #4
   239bc:	a807      	add	r0, sp, #28
   239be:	ea4f 1907 	mov.w	r9, r7, lsl #4
   239c2:	f012 f84b 	bl	35a5c <at_params_int_get>
		if (err) {
   239c6:	bb30      	cbnz	r0, 23a16 <parse_ncellmeas+0x26a>
					  &cells->neighbor_cells[i].phys_cell_id);
   239c8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
		err = at_params_short_get(&resp_list,
   239ca:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   239cc:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   239ce:	3208      	adds	r2, #8
   239d0:	a807      	add	r0, sp, #28
   239d2:	f012 f807 	bl	359e4 <at_params_short_get>
		if (err) {
   239d6:	b9f0      	cbnz	r0, 23a16 <parse_ncellmeas+0x26a>
		err = at_params_int_get(&resp_list,
   239d8:	aa02      	add	r2, sp, #8
   239da:	1eb1      	subs	r1, r6, #2
   239dc:	a807      	add	r0, sp, #28
   239de:	f012 f83d 	bl	35a5c <at_params_int_get>
		if (err) {
   239e2:	b9c0      	cbnz	r0, 23a16 <parse_ncellmeas+0x26a>
		cells->neighbor_cells[i].rsrp = tmp;
   239e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   239e6:	9a02      	ldr	r2, [sp, #8]
   239e8:	444b      	add	r3, r9
   239ea:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   239ec:	1e71      	subs	r1, r6, #1
   239ee:	aa02      	add	r2, sp, #8
   239f0:	a807      	add	r0, sp, #28
   239f2:	f012 f833 	bl	35a5c <at_params_int_get>
		if (err) {
   239f6:	b970      	cbnz	r0, 23a16 <parse_ncellmeas+0x26a>
		cells->neighbor_cells[i].rsrq = tmp;
   239f8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   239fa:	9b02      	ldr	r3, [sp, #8]
   239fc:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   239fe:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   23a00:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   23a02:	a807      	add	r0, sp, #28
   23a04:	3204      	adds	r2, #4
   23a06:	f012 f829 	bl	35a5c <at_params_int_get>
		if (err) {
   23a0a:	3605      	adds	r6, #5
   23a0c:	b918      	cbnz	r0, 23a16 <parse_ncellmeas+0x26a>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   23a0e:	3701      	adds	r7, #1
   23a10:	e7c6      	b.n	239a0 <parse_ncellmeas+0x1f4>
		err = 1;
   23a12:	2401      	movs	r4, #1
   23a14:	e70a      	b.n	2382c <parse_ncellmeas+0x80>
		err = at_params_int_get(&resp_list,
   23a16:	4604      	mov	r4, r0
   23a18:	e708      	b.n	2382c <parse_ncellmeas+0x80>
   23a1a:	bf00      	nop
   23a1c:	00038888 	.word	0x00038888
   23a20:	000387c0 	.word	0x000387c0
   23a24:	0003e6eb 	.word	0x0003e6eb
   23a28:	0003eb7e 	.word	0x0003eb7e
   23a2c:	0003e26e 	.word	0x0003e26e
   23a30:	0003e5db 	.word	0x0003e5db
   23a34:	0003ec95 	.word	0x0003ec95
   23a38:	0003ebb2 	.word	0x0003ebb2

00023a3c <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   23a3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   23a3e:	2300      	movs	r3, #0
{
   23a40:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   23a42:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   23a44:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   23a48:	2900      	cmp	r1, #0
   23a4a:	d05f      	beq.n	23b0c <parse_xmodemsleep+0xd0>
   23a4c:	2800      	cmp	r0, #0
   23a4e:	d05d      	beq.n	23b0c <parse_xmodemsleep+0xd0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   23a50:	2104      	movs	r1, #4
   23a52:	a802      	add	r0, sp, #8
   23a54:	f011 ff2b 	bl	358ae <at_params_list_init>
	if (err) {
   23a58:	4604      	mov	r4, r0
   23a5a:	b168      	cbz	r0, 23a78 <parse_xmodemsleep+0x3c>
   23a5c:	4a2d      	ldr	r2, [pc, #180]	; (23b14 <parse_xmodemsleep+0xd8>)
   23a5e:	4b2e      	ldr	r3, [pc, #184]	; (23b18 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   23a60:	4601      	mov	r1, r0
   23a62:	1ad2      	subs	r2, r2, r3
   23a64:	08d2      	lsrs	r2, r2, #3
   23a66:	0192      	lsls	r2, r2, #6
   23a68:	482c      	ldr	r0, [pc, #176]	; (23b1c <parse_xmodemsleep+0xe0>)
   23a6a:	f042 0201 	orr.w	r2, r2, #1
   23a6e:	f00c fc40 	bl	302f2 <log_1>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   23a72:	4620      	mov	r0, r4
   23a74:	b004      	add	sp, #16
   23a76:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   23a78:	4601      	mov	r1, r0
   23a7a:	aa02      	add	r2, sp, #8
   23a7c:	4630      	mov	r0, r6
   23a7e:	f011 ff13 	bl	358a8 <at_parser_params_from_str>
	if (err) {
   23a82:	4604      	mov	r4, r0
   23a84:	b158      	cbz	r0, 23a9e <parse_xmodemsleep+0x62>
   23a86:	4a23      	ldr	r2, [pc, #140]	; (23b14 <parse_xmodemsleep+0xd8>)
   23a88:	4b23      	ldr	r3, [pc, #140]	; (23b18 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   23a8a:	4601      	mov	r1, r0
   23a8c:	1ad2      	subs	r2, r2, r3
   23a8e:	08d2      	lsrs	r2, r2, #3
   23a90:	0192      	lsls	r2, r2, #6
   23a92:	4823      	ldr	r0, [pc, #140]	; (23b20 <parse_xmodemsleep+0xe4>)
   23a94:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   23a98:	f00c fc2b 	bl	302f2 <log_1>
		goto clean_exit;
   23a9c:	e01f      	b.n	23ade <parse_xmodemsleep+0xa2>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   23a9e:	2101      	movs	r1, #1
   23aa0:	f10d 0206 	add.w	r2, sp, #6
   23aa4:	a802      	add	r0, sp, #8
   23aa6:	f011 ffbd 	bl	35a24 <at_params_unsigned_short_get>
	if (err) {
   23aaa:	4604      	mov	r4, r0
   23aac:	b148      	cbz	r0, 23ac2 <parse_xmodemsleep+0x86>
   23aae:	4a19      	ldr	r2, [pc, #100]	; (23b14 <parse_xmodemsleep+0xd8>)
   23ab0:	4b19      	ldr	r3, [pc, #100]	; (23b18 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   23ab2:	4601      	mov	r1, r0
   23ab4:	1ad2      	subs	r2, r2, r3
   23ab6:	08d2      	lsrs	r2, r2, #3
   23ab8:	0192      	lsls	r2, r2, #6
   23aba:	481a      	ldr	r0, [pc, #104]	; (23b24 <parse_xmodemsleep+0xe8>)
   23abc:	f042 0201 	orr.w	r2, r2, #1
   23ac0:	e7ea      	b.n	23a98 <parse_xmodemsleep+0x5c>
	modem_sleep->type = type;
   23ac2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   23ac6:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   23ac8:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   23aca:	f012 f825 	bl	35b18 <at_params_valid_count_get>
   23ace:	2802      	cmp	r0, #2
   23ad0:	d809      	bhi.n	23ae6 <parse_xmodemsleep+0xaa>
		modem_sleep->time = -1;
   23ad2:	f04f 32ff 	mov.w	r2, #4294967295
   23ad6:	f04f 33ff 	mov.w	r3, #4294967295
   23ada:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   23ade:	a802      	add	r0, sp, #8
   23ae0:	f011 fef8 	bl	358d4 <at_params_list_free>
	return err;
   23ae4:	e7c5      	b.n	23a72 <parse_xmodemsleep+0x36>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   23ae6:	2102      	movs	r1, #2
   23ae8:	f105 0208 	add.w	r2, r5, #8
   23aec:	a802      	add	r0, sp, #8
   23aee:	f011 ffd4 	bl	35a9a <at_params_int64_get>
	if (err) {
   23af2:	4604      	mov	r4, r0
   23af4:	2800      	cmp	r0, #0
   23af6:	d0f2      	beq.n	23ade <parse_xmodemsleep+0xa2>
   23af8:	4a06      	ldr	r2, [pc, #24]	; (23b14 <parse_xmodemsleep+0xd8>)
   23afa:	4b07      	ldr	r3, [pc, #28]	; (23b18 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   23afc:	4601      	mov	r1, r0
   23afe:	1ad2      	subs	r2, r2, r3
   23b00:	08d2      	lsrs	r2, r2, #3
   23b02:	0192      	lsls	r2, r2, #6
   23b04:	4808      	ldr	r0, [pc, #32]	; (23b28 <parse_xmodemsleep+0xec>)
   23b06:	f042 0201 	orr.w	r2, r2, #1
   23b0a:	e7c5      	b.n	23a98 <parse_xmodemsleep+0x5c>
		return -EINVAL;
   23b0c:	f06f 0415 	mvn.w	r4, #21
   23b10:	e7af      	b.n	23a72 <parse_xmodemsleep+0x36>
   23b12:	bf00      	nop
   23b14:	00038888 	.word	0x00038888
   23b18:	000387c0 	.word	0x000387c0
   23b1c:	0003e6eb 	.word	0x0003e6eb
   23b20:	0003ebd5 	.word	0x0003ebd5
   23b24:	0003ec07 	.word	0x0003ec07
   23b28:	0003ec30 	.word	0x0003ec30

00023b2c <modem_info_init>:

int modem_info_init(void)
{
	int err = 0;

	if (m_param_list.params == NULL) {
   23b2c:	4803      	ldr	r0, [pc, #12]	; (23b3c <modem_info_init+0x10>)
   23b2e:	6843      	ldr	r3, [r0, #4]
   23b30:	b913      	cbnz	r3, 23b38 <modem_info_init+0xc>
		/* Init at_cmd_parser storage module */
		err = at_params_list_init(&m_param_list,
   23b32:	210a      	movs	r1, #10
   23b34:	f011 bebb 	b.w	358ae <at_params_list_init>
					  CONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP);
	}

	return err;
}
   23b38:	2000      	movs	r0, #0
   23b3a:	4770      	bx	lr
   23b3c:	20016864 	.word	0x20016864

00023b40 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   23b40:	b508      	push	{r3, lr}
	z_impl_log_panic();
   23b42:	f7f1 fbb9 	bl	152b8 <z_impl_log_panic>
   23b46:	4b06      	ldr	r3, [pc, #24]	; (23b60 <k_sys_fatal_error_handler+0x20>)
   23b48:	4906      	ldr	r1, [pc, #24]	; (23b64 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   23b4a:	4807      	ldr	r0, [pc, #28]	; (23b68 <k_sys_fatal_error_handler+0x28>)
   23b4c:	1ac9      	subs	r1, r1, r3
   23b4e:	08c9      	lsrs	r1, r1, #3
   23b50:	0189      	lsls	r1, r1, #6
   23b52:	f041 0101 	orr.w	r1, r1, #1
   23b56:	f00c fbbf 	bl	302d8 <log_0>
		sys_arch_reboot(0);
   23b5a:	2000      	movs	r0, #0
   23b5c:	f7f4 f938 	bl	17dd0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   23b60:	000387c0 	.word	0x000387c0
   23b64:	00038848 	.word	0x00038848
   23b68:	0003ee1d 	.word	0x0003ee1d

00023b6c <write_at_cmd_with_cme_enabled>:
	return err;
}

static int write_at_cmd_with_cme_enabled(char *cmd, char *buf, size_t buf_len,
					 enum at_cmd_state *state)
{
   23b6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   23b70:	4605      	mov	r5, r0
   23b72:	460e      	mov	r6, r1
   23b74:	4617      	mov	r7, r2
   23b76:	4698      	mov	r8, r3
	err = at_cmd_write("AT+CMEE?", response, sizeof(response), NULL);
   23b78:	220b      	movs	r2, #11
   23b7a:	2300      	movs	r3, #0
   23b7c:	4813      	ldr	r0, [pc, #76]	; (23bcc <write_at_cmd_with_cme_enabled+0x60>)
   23b7e:	a901      	add	r1, sp, #4
   23b80:	f7fe f836 	bl	21bf0 <at_cmd_write>
	if (err) {
   23b84:	1e04      	subs	r4, r0, #0
   23b86:	d11d      	bne.n	23bc4 <write_at_cmd_with_cme_enabled+0x58>
	return (response[CMEE_STATUS] == '1');
   23b88:	f89d 300b 	ldrb.w	r3, [sp, #11]

	if (cmee_was_active < 0) {
		return -EFAULT;
	}

	if (!cmee_was_active) {
   23b8c:	2b31      	cmp	r3, #49	; 0x31
   23b8e:	d017      	beq.n	23bc0 <write_at_cmd_with_cme_enabled+0x54>
	return at_cmd_write("AT+CMEE=1", NULL, 0, NULL);
   23b90:	4623      	mov	r3, r4
   23b92:	4622      	mov	r2, r4
   23b94:	4621      	mov	r1, r4
   23b96:	480e      	ldr	r0, [pc, #56]	; (23bd0 <write_at_cmd_with_cme_enabled+0x64>)
   23b98:	f7fe f82a 	bl	21bf0 <at_cmd_write>
		cmee_enable();
	}

	err = at_cmd_write(cmd, buf, buf_len, state);
   23b9c:	4628      	mov	r0, r5
   23b9e:	4643      	mov	r3, r8
   23ba0:	463a      	mov	r2, r7
   23ba2:	4631      	mov	r1, r6
   23ba4:	f7fe f824 	bl	21bf0 <at_cmd_write>
   23ba8:	4605      	mov	r5, r0

	if (!cmee_was_active) {
   23baa:	b92c      	cbnz	r4, 23bb8 <write_at_cmd_with_cme_enabled+0x4c>
	return at_cmd_write("AT+CMEE=0", NULL, 0, NULL);
   23bac:	4623      	mov	r3, r4
   23bae:	4622      	mov	r2, r4
   23bb0:	4621      	mov	r1, r4
   23bb2:	4808      	ldr	r0, [pc, #32]	; (23bd4 <write_at_cmd_with_cme_enabled+0x68>)
   23bb4:	f7fe f81c 	bl	21bf0 <at_cmd_write>
		cmee_disable();
	}

	return err;
}
   23bb8:	4628      	mov	r0, r5
   23bba:	b004      	add	sp, #16
   23bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (response[CMEE_STATUS] == '1');
   23bc0:	2401      	movs	r4, #1
   23bc2:	e7eb      	b.n	23b9c <write_at_cmd_with_cme_enabled+0x30>
	if (cmee_was_active < 0) {
   23bc4:	daea      	bge.n	23b9c <write_at_cmd_with_cme_enabled+0x30>
		return -EFAULT;
   23bc6:	f06f 050d 	mvn.w	r5, #13
   23bca:	e7f5      	b.n	23bb8 <write_at_cmd_with_cme_enabled+0x4c>
   23bcc:	0003ee3a 	.word	0x0003ee3a
   23bd0:	0003ee43 	.word	0x0003ee43
   23bd4:	0003ee4d 	.word	0x0003ee4d

00023bd8 <translate_error>:
{
   23bd8:	b510      	push	{r4, lr}
	if ((err > 0) && (state == AT_CMD_ERROR_CME)) {
   23bda:	1e04      	subs	r4, r0, #0
   23bdc:	dd0d      	ble.n	23bfa <translate_error+0x22>
   23bde:	2903      	cmp	r1, #3
   23be0:	d10b      	bne.n	23bfa <translate_error+0x22>
		switch (err) {
   23be2:	f46f 7300 	mvn.w	r3, #512	; 0x200
   23be6:	18e3      	adds	r3, r4, r3
   23be8:	2b05      	cmp	r3, #5
   23bea:	d80e      	bhi.n	23c0a <translate_error+0x32>
   23bec:	e8df f003 	tbb	[pc, r3]
   23bf0:	0d07031d 	.word	0x0d07031d
   23bf4:	0a0d      	.short	0x0a0d
			return -EPERM;
   23bf6:	f04f 34ff 	mov.w	r4, #4294967295
}
   23bfa:	4620      	mov	r0, r4
   23bfc:	bd10      	pop	{r4, pc}
			return -ENOMEM;
   23bfe:	f06f 040b 	mvn.w	r4, #11
   23c02:	e7fa      	b.n	23bfa <translate_error+0x22>
			return -EACCES;
   23c04:	f06f 040c 	mvn.w	r4, #12
   23c08:	e7f7      	b.n	23bfa <translate_error+0x22>
			__ASSERT(false, "Untranslated CME error %d!", err);
   23c0a:	234a      	movs	r3, #74	; 0x4a
   23c0c:	4a08      	ldr	r2, [pc, #32]	; (23c30 <translate_error+0x58>)
   23c0e:	4909      	ldr	r1, [pc, #36]	; (23c34 <translate_error+0x5c>)
   23c10:	4809      	ldr	r0, [pc, #36]	; (23c38 <translate_error+0x60>)
   23c12:	f00c f82d 	bl	2fc70 <printk>
   23c16:	4621      	mov	r1, r4
   23c18:	4808      	ldr	r0, [pc, #32]	; (23c3c <translate_error+0x64>)
   23c1a:	f00c f829 	bl	2fc70 <printk>
   23c1e:	214a      	movs	r1, #74	; 0x4a
   23c20:	4803      	ldr	r0, [pc, #12]	; (23c30 <translate_error+0x58>)
   23c22:	f00c fb0b 	bl	3023c <assert_post_action>
   23c26:	4c06      	ldr	r4, [pc, #24]	; (23c40 <translate_error+0x68>)
   23c28:	e7e7      	b.n	23bfa <translate_error+0x22>
	if ((err > 0) && (state == AT_CMD_ERROR_CME)) {
   23c2a:	f06f 0401 	mvn.w	r4, #1
   23c2e:	e7e4      	b.n	23bfa <translate_error+0x22>
   23c30:	0003ee57 	.word	0x0003ee57
   23c34:	00040e81 	.word	0x00040e81
   23c38:	0003a56b 	.word	0x0003a56b
   23c3c:	0003ee8b 	.word	0x0003ee8b
   23c40:	baadbaad 	.word	0xbaadbaad

00023c44 <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   23c44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	int written;
	enum at_cmd_state state;

	if (buf == NULL || len == 0) {
   23c46:	b1e2      	cbz	r2, 23c82 <modem_key_mgmt_write+0x3e>
   23c48:	b1db      	cbz	r3, 23c82 <modem_key_mgmt_write+0x3e>
		return -EINVAL;
	}

	written = snprintf(scratch_buf, sizeof(scratch_buf),
   23c4a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   23c4e:	e9cd 0100 	strd	r0, r1, [sp]
   23c52:	4b0f      	ldr	r3, [pc, #60]	; (23c90 <modem_key_mgmt_write+0x4c>)
   23c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   23c58:	4a0e      	ldr	r2, [pc, #56]	; (23c94 <modem_key_mgmt_write+0x50>)
   23c5a:	480f      	ldr	r0, [pc, #60]	; (23c98 <modem_key_mgmt_write+0x54>)
   23c5c:	f00a ff98 	bl	2eb90 <sniprintf>
			   "%s,%d,%d,\"%.*s\"", MODEM_KEY_MGMT_OP_WR, sec_tag,
			   cred_type, len, (const char *)buf);

	if (written < 0 || written >= sizeof(scratch_buf)) {
   23c60:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   23c64:	d210      	bcs.n	23c88 <modem_key_mgmt_write+0x44>
		return -ENOBUFS;
	}

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   23c66:	2200      	movs	r2, #0
   23c68:	480b      	ldr	r0, [pc, #44]	; (23c98 <modem_key_mgmt_write+0x54>)
   23c6a:	4611      	mov	r1, r2
   23c6c:	f10d 0317 	add.w	r3, sp, #23
   23c70:	f7ff ff7c 	bl	23b6c <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   23c74:	f89d 1017 	ldrb.w	r1, [sp, #23]
   23c78:	f7ff ffae 	bl	23bd8 <translate_error>
}
   23c7c:	b007      	add	sp, #28
   23c7e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   23c82:	f06f 0015 	mvn.w	r0, #21
   23c86:	e7f9      	b.n	23c7c <modem_key_mgmt_write+0x38>
		return -ENOBUFS;
   23c88:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23c8c:	e7f6      	b.n	23c7c <modem_key_mgmt_write+0x38>
   23c8e:	bf00      	nop
   23c90:	0003eebb 	.word	0x0003eebb
   23c94:	0003eec5 	.word	0x0003eec5
   23c98:	2001c665 	.word	0x2001c665

00023c9c <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   23c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	int written;
	enum at_cmd_state state;

	written = snprintf(scratch_buf, sizeof(scratch_buf), "%s,%d,%d",
   23c9e:	4c0b      	ldr	r4, [pc, #44]	; (23ccc <modem_key_mgmt_delete+0x30>)
   23ca0:	e9cd 0100 	strd	r0, r1, [sp]
   23ca4:	4b0a      	ldr	r3, [pc, #40]	; (23cd0 <modem_key_mgmt_delete+0x34>)
   23ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   23caa:	4620      	mov	r0, r4
   23cac:	4a09      	ldr	r2, [pc, #36]	; (23cd4 <modem_key_mgmt_delete+0x38>)
   23cae:	f00a ff6f 	bl	2eb90 <sniprintf>

	if (written < 0 || written >= sizeof(scratch_buf)) {
		return -ENOBUFS;
	}

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   23cb2:	2200      	movs	r2, #0
   23cb4:	f10d 030f 	add.w	r3, sp, #15
   23cb8:	4611      	mov	r1, r2
   23cba:	4620      	mov	r0, r4
   23cbc:	f7ff ff56 	bl	23b6c <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   23cc0:	f89d 100f 	ldrb.w	r1, [sp, #15]
   23cc4:	f7ff ff88 	bl	23bd8 <translate_error>
}
   23cc8:	b004      	add	sp, #16
   23cca:	bd10      	pop	{r4, pc}
   23ccc:	2001c665 	.word	0x2001c665
   23cd0:	0003eed5 	.word	0x0003eed5
   23cd4:	0003eeb2 	.word	0x0003eeb2

00023cd8 <modem_key_mgmt_exists>:
}

int modem_key_mgmt_exists(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type,
			  bool *exists, uint8_t *perm_flags)
{
   23cd8:	b570      	push	{r4, r5, r6, lr}
   23cda:	461e      	mov	r6, r3
	int err;
	int written;
	char cmd[32];
	enum at_cmd_state state;

	if (exists == NULL || perm_flags == NULL) {
   23cdc:	4615      	mov	r5, r2
{
   23cde:	b08c      	sub	sp, #48	; 0x30
	if (exists == NULL || perm_flags == NULL) {
   23ce0:	b322      	cbz	r2, 23d2c <modem_key_mgmt_exists+0x54>
   23ce2:	b31b      	cbz	r3, 23d2c <modem_key_mgmt_exists+0x54>
		return -EINVAL;
	}

	written = snprintf(cmd, sizeof(cmd), "%s,%d,%d",
   23ce4:	e9cd 0100 	strd	r0, r1, [sp]
   23ce8:	4b12      	ldr	r3, [pc, #72]	; (23d34 <modem_key_mgmt_exists+0x5c>)
   23cea:	2120      	movs	r1, #32
   23cec:	4a12      	ldr	r2, [pc, #72]	; (23d38 <modem_key_mgmt_exists+0x60>)
   23cee:	a804      	add	r0, sp, #16
   23cf0:	f00a ff4e 	bl	2eb90 <sniprintf>

	if (written < 0 || written >= sizeof(cmd)) {
		return -ENOBUFS;
	}

	err = write_at_cmd_with_cme_enabled(cmd, scratch_buf,
   23cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   23cf8:	4910      	ldr	r1, [pc, #64]	; (23d3c <modem_key_mgmt_exists+0x64>)
   23cfa:	f10d 030f 	add.w	r3, sp, #15
   23cfe:	a804      	add	r0, sp, #16
   23d00:	f7ff ff34 	bl	23b6c <write_at_cmd_with_cme_enabled>
					    sizeof(scratch_buf), &state);
	if (err) {
   23d04:	4604      	mov	r4, r0
   23d06:	b138      	cbz	r0, 23d18 <modem_key_mgmt_exists+0x40>
		return translate_error(err, state);
   23d08:	f89d 100f 	ldrb.w	r1, [sp, #15]
   23d0c:	f7ff ff64 	bl	23bd8 <translate_error>
   23d10:	4604      	mov	r4, r0
	} else {
		*exists = false;
	}

	return 0;
}
   23d12:	4620      	mov	r0, r4
   23d14:	b00c      	add	sp, #48	; 0x30
   23d16:	bd70      	pop	{r4, r5, r6, pc}
	if (strlen(scratch_buf) > 0) {
   23d18:	4808      	ldr	r0, [pc, #32]	; (23d3c <modem_key_mgmt_exists+0x64>)
   23d1a:	f7ed fbf1 	bl	11500 <strlen>
   23d1e:	b118      	cbz	r0, 23d28 <modem_key_mgmt_exists+0x50>
		*exists = true;
   23d20:	2301      	movs	r3, #1
   23d22:	702b      	strb	r3, [r5, #0]
		*perm_flags = 0;
   23d24:	7034      	strb	r4, [r6, #0]
   23d26:	e7f4      	b.n	23d12 <modem_key_mgmt_exists+0x3a>
		*exists = false;
   23d28:	702c      	strb	r4, [r5, #0]
   23d2a:	e7f2      	b.n	23d12 <modem_key_mgmt_exists+0x3a>
		return -EINVAL;
   23d2c:	f06f 0415 	mvn.w	r4, #21
   23d30:	e7ef      	b.n	23d12 <modem_key_mgmt_exists+0x3a>
   23d32:	bf00      	nop
   23d34:	0003eedf 	.word	0x0003eedf
   23d38:	0003eeb2 	.word	0x0003eeb2
   23d3c:	2001c665 	.word	0x2001c665

00023d40 <date_time_init>:
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   23d40:	b510      	push	{r4, lr}
	k_work_init_delayable(&time_work, date_time_handler);
   23d42:	4c06      	ldr	r4, [pc, #24]	; (23d5c <date_time_init+0x1c>)
   23d44:	4906      	ldr	r1, [pc, #24]	; (23d60 <date_time_init+0x20>)
   23d46:	4620      	mov	r0, r4
   23d48:	f007 fe32 	bl	2b9b0 <k_work_init_delayable>
	k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   23d4c:	2200      	movs	r2, #0
   23d4e:	2300      	movs	r3, #0
   23d50:	4620      	mov	r0, r4
   23d52:	f007 fed5 	bl	2bb00 <k_work_schedule>

	return 0;
}
   23d56:	2000      	movs	r0, #0
   23d58:	bd10      	pop	{r4, pc}
   23d5a:	bf00      	nop
   23d5c:	20015d20 	.word	0x20015d20
   23d60:	00035bdb 	.word	0x00035bdb

00023d64 <date_time_notify_event.constprop.0>:
	if (app_evt_handler != NULL) {
   23d64:	4b02      	ldr	r3, [pc, #8]	; (23d70 <date_time_notify_event.constprop.0+0xc>)
   23d66:	681b      	ldr	r3, [r3, #0]
   23d68:	b10b      	cbz	r3, 23d6e <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   23d6a:	4802      	ldr	r0, [pc, #8]	; (23d74 <date_time_notify_event.constprop.0+0x10>)
   23d6c:	4718      	bx	r3
}
   23d6e:	4770      	bx	lr
   23d70:	2001686c 	.word	0x2001686c
   23d74:	2001d665 	.word	0x2001d665

00023d78 <new_date_time_get>:
{
   23d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   23d7c:	f8df 8370 	ldr.w	r8, [pc, #880]	; 240f0 <new_date_time_get+0x378>
   23d80:	4bb5      	ldr	r3, [pc, #724]	; (24058 <new_date_time_get+0x2e0>)
   23d82:	46c1      	mov	r9, r8
   23d84:	4ab5      	ldr	r2, [pc, #724]	; (2405c <new_date_time_get+0x2e4>)
{
   23d86:	b099      	sub	sp, #100	; 0x64
   23d88:	1a9b      	subs	r3, r3, r2
   23d8a:	08db      	lsrs	r3, r3, #3
   23d8c:	9302      	str	r3, [sp, #8]
   23d8e:	f04f 32ff 	mov.w	r2, #4294967295
   23d92:	f04f 33ff 	mov.w	r3, #4294967295
   23d96:	48b2      	ldr	r0, [pc, #712]	; (24060 <new_date_time_get+0x2e8>)
   23d98:	f007 fa76 	bl	2b288 <z_impl_k_sem_take>
		LOG_DBG("Updating date time UTC...");
   23d9c:	9b02      	ldr	r3, [sp, #8]
   23d9e:	49b1      	ldr	r1, [pc, #708]	; (24064 <new_date_time_get+0x2ec>)
   23da0:	019c      	lsls	r4, r3, #6
   23da2:	f044 0504 	orr.w	r5, r4, #4
   23da6:	462a      	mov	r2, r5
   23da8:	48af      	ldr	r0, [pc, #700]	; (24068 <new_date_time_get+0x2f0>)
   23daa:	f00c faa2 	bl	302f2 <log_1>
	if (time_aux.last_date_time_update == 0 ||
   23dae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23db2:	b11b      	cbz	r3, 23dbc <new_date_time_get+0x44>
   23db4:	e9d8 2300 	ldrd	r2, r3, [r8]
   23db8:	4313      	orrs	r3, r2
   23dba:	d17a      	bne.n	23eb2 <new_date_time_get+0x13a>
		LOG_DBG("Date time never set");
   23dbc:	49ab      	ldr	r1, [pc, #684]	; (2406c <new_date_time_get+0x2f4>)
   23dbe:	48ac      	ldr	r0, [pc, #688]	; (24070 <new_date_time_get+0x2f8>)
   23dc0:	f044 0204 	orr.w	r2, r4, #4
		LOG_DBG("Current time not valid");
   23dc4:	f044 0504 	orr.w	r5, r4, #4
		LOG_DBG("Current date time too old");
   23dc8:	f00c fa93 	bl	302f2 <log_1>
		LOG_DBG("Current time not valid");
   23dcc:	462a      	mov	r2, r5
   23dce:	49a5      	ldr	r1, [pc, #660]	; (24064 <new_date_time_get+0x2ec>)
   23dd0:	48a8      	ldr	r0, [pc, #672]	; (24074 <new_date_time_get+0x2fc>)
   23dd2:	f00c fa8e 	bl	302f2 <log_1>
		LOG_DBG("Fallback on NTP server");
   23dd6:	462a      	mov	r2, r5
   23dd8:	49a2      	ldr	r1, [pc, #648]	; (24064 <new_date_time_get+0x2ec>)
   23dda:	48a7      	ldr	r0, [pc, #668]	; (24078 <new_date_time_get+0x300>)
   23ddc:	f00c fa89 	bl	302f2 <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   23de0:	2700      	movs	r7, #0
   23de2:	4da6      	ldr	r5, [pc, #664]	; (2407c <new_date_time_get+0x304>)
		hints.ai_family = AF_INET;
   23de4:	f8df a30c 	ldr.w	sl, [pc, #780]	; 240f4 <new_date_time_get+0x37c>
	hints.ai_socktype = SOCK_DGRAM;
   23de8:	2302      	movs	r3, #2
   23dea:	2201      	movs	r2, #1
   23dec:	e9ca 2302 	strd	r2, r3, [sl, #8]
	hints.ai_protocol = 0;
   23df0:	2300      	movs	r3, #0
   23df2:	f8ca 3010 	str.w	r3, [sl, #16]
	if (server->addrlen == 0) {
   23df6:	69ab      	ldr	r3, [r5, #24]
   23df8:	2b00      	cmp	r3, #0
   23dfa:	f040 80c9 	bne.w	23f90 <new_date_time_get+0x218>
	return zsock_getaddrinfo(host, service, hints, res);
   23dfe:	4652      	mov	r2, sl
   23e00:	499f      	ldr	r1, [pc, #636]	; (24080 <new_date_time_get+0x308>)
   23e02:	f855 0c04 	ldr.w	r0, [r5, #-4]
   23e06:	ab06      	add	r3, sp, #24
   23e08:	f00c fd75 	bl	308f6 <zsock_getaddrinfo>
		if (err) {
   23e0c:	4683      	mov	fp, r0
   23e0e:	2800      	cmp	r0, #0
   23e10:	d066      	beq.n	23ee0 <new_date_time_get+0x168>
			LOG_WRN("getaddrinfo, error: %d", err);
   23e12:	4601      	mov	r1, r0
   23e14:	f044 0202 	orr.w	r2, r4, #2
   23e18:	489a      	ldr	r0, [pc, #616]	; (24084 <new_date_time_get+0x30c>)
   23e1a:	f00c fa6a 	bl	302f2 <log_1>
   23e1e:	f855 0c04 	ldr.w	r0, [r5, #-4]
			LOG_DBG("Not getting time from NTP server %s, error %d",
   23e22:	f8ad 400c 	strh.w	r4, [sp, #12]
   23e26:	f7f1 f8b9 	bl	14f9c <z_log_strdup>
   23e2a:	f044 0604 	orr.w	r6, r4, #4
   23e2e:	4602      	mov	r2, r0
   23e30:	465b      	mov	r3, fp
   23e32:	4995      	ldr	r1, [pc, #596]	; (24088 <new_date_time_get+0x310>)
   23e34:	4895      	ldr	r0, [pc, #596]	; (2408c <new_date_time_get+0x314>)
   23e36:	f8ad 6000 	strh.w	r6, [sp]
   23e3a:	f00c fa87 	bl	3034c <log_3>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   23e3e:	3701      	adds	r7, #1
			LOG_DBG("Trying another address...");
   23e40:	4632      	mov	r2, r6
   23e42:	4991      	ldr	r1, [pc, #580]	; (24088 <new_date_time_get+0x310>)
   23e44:	4892      	ldr	r0, [pc, #584]	; (24090 <new_date_time_get+0x318>)
   23e46:	f00c fa54 	bl	302f2 <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   23e4a:	2f05      	cmp	r7, #5
   23e4c:	f105 0520 	add.w	r5, r5, #32
   23e50:	d1ca      	bne.n	23de8 <new_date_time_get+0x70>
	LOG_WRN("Not getting time from any NTP server");
   23e52:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   23e56:	488f      	ldr	r0, [pc, #572]	; (24094 <new_date_time_get+0x31c>)
   23e58:	f043 0102 	orr.w	r1, r3, #2
   23e5c:	f00c fa3c 	bl	302d8 <log_0>
		LOG_DBG("Not getting time from NTP server");
   23e60:	4632      	mov	r2, r6
   23e62:	4980      	ldr	r1, [pc, #512]	; (24064 <new_date_time_get+0x2ec>)
   23e64:	488c      	ldr	r0, [pc, #560]	; (24098 <new_date_time_get+0x320>)
   23e66:	f00c fa44 	bl	302f2 <log_1>
		LOG_DBG("Fallback on cellular network time");
   23e6a:	4632      	mov	r2, r6
   23e6c:	497d      	ldr	r1, [pc, #500]	; (24064 <new_date_time_get+0x2ec>)
   23e6e:	488b      	ldr	r0, [pc, #556]	; (2409c <new_date_time_get+0x324>)
   23e70:	f00c fa3f 	bl	302f2 <log_1>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   23e74:	2300      	movs	r3, #0
   23e76:	2221      	movs	r2, #33	; 0x21
   23e78:	4889      	ldr	r0, [pc, #548]	; (240a0 <new_date_time_get+0x328>)
   23e7a:	a906      	add	r1, sp, #24
   23e7c:	f7fd feb8 	bl	21bf0 <at_cmd_write>
	if (err) {
   23e80:	4605      	mov	r5, r0
   23e82:	2800      	cmp	r0, #0
   23e84:	f000 8099 	beq.w	23fba <new_date_time_get+0x242>
		LOG_DBG("Could not get cellular network time, error: %d", err);
   23e88:	4602      	mov	r2, r0
   23e8a:	4633      	mov	r3, r6
   23e8c:	4985      	ldr	r1, [pc, #532]	; (240a4 <new_date_time_get+0x32c>)
   23e8e:	4886      	ldr	r0, [pc, #536]	; (240a8 <new_date_time_get+0x330>)
   23e90:	f00c fa43 	bl	3031a <log_2>
		LOG_DBG("Not getting cellular network time");
   23e94:	f044 0404 	orr.w	r4, r4, #4
   23e98:	4622      	mov	r2, r4
   23e9a:	4972      	ldr	r1, [pc, #456]	; (24064 <new_date_time_get+0x2ec>)
   23e9c:	4883      	ldr	r0, [pc, #524]	; (240ac <new_date_time_get+0x334>)
   23e9e:	f00c fa28 	bl	302f2 <log_1>
		LOG_DBG("Not getting time from any time source");
   23ea2:	4622      	mov	r2, r4
   23ea4:	496f      	ldr	r1, [pc, #444]	; (24064 <new_date_time_get+0x2ec>)
   23ea6:	4882      	ldr	r0, [pc, #520]	; (240b0 <new_date_time_get+0x338>)
   23ea8:	f00c fa23 	bl	302f2 <log_1>
		evt.type = DATE_TIME_NOT_OBTAINED;
   23eac:	2203      	movs	r2, #3
   23eae:	4b81      	ldr	r3, [pc, #516]	; (240b4 <new_date_time_get+0x33c>)
   23eb0:	e014      	b.n	23edc <new_date_time_get+0x164>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   23eb2:	f011 fe93 	bl	35bdc <k_uptime_get>
   23eb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
		LOG_DBG("Current date time too old");
   23eba:	462a      	mov	r2, r5
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   23ebc:	1ac0      	subs	r0, r0, r3
   23ebe:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   23ec2:	2801      	cmp	r0, #1
   23ec4:	f171 0300 	sbcs.w	r3, r1, #0
   23ec8:	db02      	blt.n	23ed0 <new_date_time_get+0x158>
		LOG_DBG("Current date time too old");
   23eca:	4968      	ldr	r1, [pc, #416]	; (2406c <new_date_time_get+0x2f4>)
   23ecc:	487a      	ldr	r0, [pc, #488]	; (240b8 <new_date_time_get+0x340>)
   23ece:	e779      	b.n	23dc4 <new_date_time_get+0x4c>
			LOG_DBG("Time successfully obtained");
   23ed0:	4964      	ldr	r1, [pc, #400]	; (24064 <new_date_time_get+0x2ec>)
   23ed2:	487a      	ldr	r0, [pc, #488]	; (240bc <new_date_time_get+0x344>)
   23ed4:	f00c fa0d 	bl	302f2 <log_1>
			initial_valid_time = true;
   23ed8:	2201      	movs	r2, #1
   23eda:	4b79      	ldr	r3, [pc, #484]	; (240c0 <new_date_time_get+0x348>)
		evt.type = DATE_TIME_NOT_OBTAINED;
   23edc:	701a      	strb	r2, [r3, #0]
   23ede:	e054      	b.n	23f8a <new_date_time_get+0x212>
		if (addrinfo->ai_addrlen > sizeof(server->addr)) {
   23ee0:	9e06      	ldr	r6, [sp, #24]
   23ee2:	6971      	ldr	r1, [r6, #20]
   23ee4:	2918      	cmp	r1, #24
   23ee6:	d90b      	bls.n	23f00 <new_date_time_get+0x188>
			LOG_WRN("getaddrinfo, addrlen: %d > %d",
   23ee8:	2218      	movs	r2, #24
   23eea:	4876      	ldr	r0, [pc, #472]	; (240c4 <new_date_time_get+0x34c>)
   23eec:	f044 0302 	orr.w	r3, r4, #2
   23ef0:	f00c fa13 	bl	3031a <log_2>
	zsock_freeaddrinfo(ai);
   23ef4:	9806      	ldr	r0, [sp, #24]
   23ef6:	f00c fd00 	bl	308fa <zsock_freeaddrinfo>
			return -ENOMEM;
   23efa:	f06f 0b0b 	mvn.w	fp, #11
   23efe:	e78e      	b.n	23e1e <new_date_time_get+0xa6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23f00:	460a      	mov	r2, r1
   23f02:	4628      	mov	r0, r5
   23f04:	69b1      	ldr	r1, [r6, #24]
   23f06:	f013 fc3c 	bl	37782 <memcpy>
		server->addrlen = addrinfo->ai_addrlen;
   23f0a:	6973      	ldr	r3, [r6, #20]
   23f0c:	4630      	mov	r0, r6
   23f0e:	61ab      	str	r3, [r5, #24]
   23f10:	f00c fcf3 	bl	308fa <zsock_freeaddrinfo>
	err = sntp_init(&sntp_ctx, &server->addr, server->addrlen);
   23f14:	4629      	mov	r1, r5
   23f16:	69aa      	ldr	r2, [r5, #24]
   23f18:	a80f      	add	r0, sp, #60	; 0x3c
   23f1a:	f00c fcb8 	bl	3088e <sntp_init>
	if (err) {
   23f1e:	4683      	mov	fp, r0
   23f20:	2800      	cmp	r0, #0
   23f22:	d03c      	beq.n	23f9e <new_date_time_get+0x226>
		LOG_WRN("sntp_init, error: %d", err);
   23f24:	4601      	mov	r1, r0
   23f26:	4868      	ldr	r0, [pc, #416]	; (240c8 <new_date_time_get+0x350>)
   23f28:	f044 0202 	orr.w	r2, r4, #2
		LOG_WRN("sntp_query, error: %d", err);
   23f2c:	f00c f9e1 	bl	302f2 <log_1>
	sntp_close(&sntp_ctx);
   23f30:	a80f      	add	r0, sp, #60	; 0x3c
   23f32:	f00c fcdb 	bl	308ec <sntp_close>
		if (err) {
   23f36:	f1bb 0f00 	cmp.w	fp, #0
   23f3a:	f47f af70 	bne.w	23e1e <new_date_time_get+0xa6>
   23f3e:	4b63      	ldr	r3, [pc, #396]	; (240cc <new_date_time_get+0x354>)
		LOG_DBG("Got time response from NTP server %s",
   23f40:	017f      	lsls	r7, r7, #5
   23f42:	59d8      	ldr	r0, [r3, r7]
   23f44:	f7f1 f82a 	bl	14f9c <z_log_strdup>
   23f48:	f044 0404 	orr.w	r4, r4, #4
   23f4c:	4602      	mov	r2, r0
   23f4e:	4623      	mov	r3, r4
   23f50:	494d      	ldr	r1, [pc, #308]	; (24088 <new_date_time_get+0x310>)
   23f52:	485f      	ldr	r0, [pc, #380]	; (240d0 <new_date_time_get+0x358>)
   23f54:	f00c f9e1 	bl	3031a <log_2>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   23f58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   23f5c:	4b5d      	ldr	r3, [pc, #372]	; (240d4 <new_date_time_get+0x35c>)
   23f5e:	681a      	ldr	r2, [r3, #0]
   23f60:	6858      	ldr	r0, [r3, #4]
   23f62:	fba2 2301 	umull	r2, r3, r2, r1
   23f66:	fb01 3300 	mla	r3, r1, r0, r3
   23f6a:	e9c9 2300 	strd	r2, r3, [r9]
		time_aux.last_date_time_update = k_uptime_get();
   23f6e:	f011 fe35 	bl	35bdc <k_uptime_get>
			LOG_DBG("Time from NTP server obtained");
   23f72:	4622      	mov	r2, r4
		time_aux.last_date_time_update = k_uptime_get();
   23f74:	f8c9 0008 	str.w	r0, [r9, #8]
			LOG_DBG("Time from NTP server obtained");
   23f78:	493a      	ldr	r1, [pc, #232]	; (24064 <new_date_time_get+0x2ec>)
   23f7a:	4857      	ldr	r0, [pc, #348]	; (240d8 <new_date_time_get+0x360>)
   23f7c:	f00c f9b9 	bl	302f2 <log_1>
			initial_valid_time = true;
   23f80:	2301      	movs	r3, #1
   23f82:	4a4f      	ldr	r2, [pc, #316]	; (240c0 <new_date_time_get+0x348>)
   23f84:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   23f86:	4a4b      	ldr	r2, [pc, #300]	; (240b4 <new_date_time_get+0x33c>)
   23f88:	7013      	strb	r3, [r2, #0]
		date_time_notify_event(&evt);
   23f8a:	f7ff feeb 	bl	23d64 <date_time_notify_event.constprop.0>
   23f8e:	e6fe      	b.n	23d8e <new_date_time_get+0x16>
		LOG_DBG("Server address already obtained, skipping DNS lookup");
   23f90:	4952      	ldr	r1, [pc, #328]	; (240dc <new_date_time_get+0x364>)
   23f92:	4853      	ldr	r0, [pc, #332]	; (240e0 <new_date_time_get+0x368>)
   23f94:	f044 0204 	orr.w	r2, r4, #4
   23f98:	f00c f9ab 	bl	302f2 <log_1>
   23f9c:	e7ba      	b.n	23f14 <new_date_time_get+0x19c>
	err = sntp_query(&sntp_ctx, timeout, time);
   23f9e:	f241 3188 	movw	r1, #5000	; 0x1388
   23fa2:	4a4c      	ldr	r2, [pc, #304]	; (240d4 <new_date_time_get+0x35c>)
   23fa4:	a80f      	add	r0, sp, #60	; 0x3c
   23fa6:	f7ed fab3 	bl	11510 <sntp_query>
	if (err) {
   23faa:	4683      	mov	fp, r0
   23fac:	2800      	cmp	r0, #0
   23fae:	d0bf      	beq.n	23f30 <new_date_time_get+0x1b8>
		LOG_WRN("sntp_query, error: %d", err);
   23fb0:	4601      	mov	r1, r0
   23fb2:	f044 0202 	orr.w	r2, r4, #2
   23fb6:	484b      	ldr	r0, [pc, #300]	; (240e4 <new_date_time_get+0x36c>)
   23fb8:	e7b8      	b.n	23f2c <new_date_time_get+0x1b4>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   23fba:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   23fbe:	a806      	add	r0, sp, #24
   23fc0:	f7f0 ffec 	bl	14f9c <z_log_strdup>
	LOG_DBG("Response from modem: %s", log_strdup(buf));
   23fc4:	4937      	ldr	r1, [pc, #220]	; (240a4 <new_date_time_get+0x32c>)
   23fc6:	4602      	mov	r2, r0
   23fc8:	4633      	mov	r3, r6
   23fca:	4847      	ldr	r0, [pc, #284]	; (240e8 <new_date_time_get+0x370>)
   23fcc:	f00c f9a5 	bl	3031a <log_2>
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   23fd0:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   23fd4:	2020      	movs	r0, #32
   23fd6:	aa06      	add	r2, sp, #24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   23fd8:	f812 3b01 	ldrb.w	r3, [r2], #1
   23fdc:	3b2c      	subs	r3, #44	; 0x2c
   23fde:	b2db      	uxtb	r3, r3
   23fe0:	2b0e      	cmp	r3, #14
   23fe2:	d805      	bhi.n	23ff0 <new_date_time_get+0x278>
   23fe4:	fa21 f303 	lsr.w	r3, r1, r3
   23fe8:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   23fea:	bf48      	it	mi
   23fec:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   23ff0:	3501      	adds	r5, #1
   23ff2:	2d20      	cmp	r5, #32
   23ff4:	d1f0      	bne.n	23fd8 <new_date_time_get+0x260>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   23ff6:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   23ff8:	a808      	add	r0, sp, #32
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   23ffa:	a905      	add	r1, sp, #20
	char *ptr_index = &buf[8];
   23ffc:	9005      	str	r0, [sp, #20]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   23ffe:	f00b f88d 	bl	2f11c <strtol>
   24002:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   24004:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   24006:	9014      	str	r0, [sp, #80]	; 0x50
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   24008:	a905      	add	r1, sp, #20
   2400a:	9805      	ldr	r0, [sp, #20]
   2400c:	f00b f886 	bl	2f11c <strtol>
   24010:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   24012:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   24014:	9013      	str	r0, [sp, #76]	; 0x4c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   24016:	a905      	add	r1, sp, #20
   24018:	9805      	ldr	r0, [sp, #20]
   2401a:	f00b f87f 	bl	2f11c <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2401e:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   24020:	9012      	str	r0, [sp, #72]	; 0x48
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   24022:	a905      	add	r1, sp, #20
   24024:	9805      	ldr	r0, [sp, #20]
   24026:	f00b f879 	bl	2f11c <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2402a:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2402c:	9011      	str	r0, [sp, #68]	; 0x44
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2402e:	a905      	add	r1, sp, #20
   24030:	9805      	ldr	r0, [sp, #20]
   24032:	f00b f873 	bl	2f11c <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   24036:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   24038:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2403a:	a905      	add	r1, sp, #20
   2403c:	9805      	ldr	r0, [sp, #20]
   2403e:	f00b f86d 	bl	2f11c <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   24042:	9b14      	ldr	r3, [sp, #80]	; 0x50
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   24044:	900f      	str	r0, [sp, #60]	; 0x3c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   24046:	2b73      	cmp	r3, #115	; 0x73
   24048:	d156      	bne.n	240f8 <new_date_time_get+0x380>
		LOG_DBG("Modem time never set");
   2404a:	4916      	ldr	r1, [pc, #88]	; (240a4 <new_date_time_get+0x32c>)
   2404c:	4827      	ldr	r0, [pc, #156]	; (240ec <new_date_time_get+0x374>)
   2404e:	f044 0204 	orr.w	r2, r4, #4
   24052:	f00c f94e 	bl	302f2 <log_1>
		if (err == 0) {
   24056:	e71d      	b.n	23e94 <new_date_time_get+0x11c>
   24058:	00038840 	.word	0x00038840
   2405c:	000387c0 	.word	0x000387c0
   24060:	20015078 	.word	0x20015078
   24064:	0003f526 	.word	0x0003f526
   24068:	0003eef8 	.word	0x0003eef8
   2406c:	0003f513 	.word	0x0003f513
   24070:	0003ef16 	.word	0x0003ef16
   24074:	0003ef6b 	.word	0x0003ef6b
   24078:	0003ef86 	.word	0x0003ef86
   2407c:	20014968 	.word	0x20014968
   24080:	0003efa1 	.word	0x0003efa1
   24084:	0003efa5 	.word	0x0003efa5
   24088:	0003f4ff 	.word	0x0003f4ff
   2408c:	0003f03e 	.word	0x0003f03e
   24090:	0003f070 	.word	0x0003f070
   24094:	0003f0d9 	.word	0x0003f0d9
   24098:	0003f0fe 	.word	0x0003f0fe
   2409c:	0003f123 	.word	0x0003f123
   240a0:	0003ecc2 	.word	0x0003ecc2
   240a4:	0003f4de 	.word	0x0003f4de
   240a8:	0003f149 	.word	0x0003f149
   240ac:	0003f1d9 	.word	0x0003f1d9
   240b0:	0003f1ff 	.word	0x0003f1ff
   240b4:	2001d665 	.word	0x2001d665
   240b8:	0003ef2e 	.word	0x0003ef2e
   240bc:	0003ef4c 	.word	0x0003ef4c
   240c0:	2001d666 	.word	0x2001d666
   240c4:	0003efbc 	.word	0x0003efbc
   240c8:	0003f013 	.word	0x0003f013
   240cc:	20014964 	.word	0x20014964
   240d0:	0003f08e 	.word	0x0003f08e
   240d4:	20015d00 	.word	0x20015d00
   240d8:	0003f0b7 	.word	0x0003f0b7
   240dc:	0003f4ed 	.word	0x0003f4ed
   240e0:	0003efda 	.word	0x0003efda
   240e4:	0003f028 	.word	0x0003f028
   240e8:	0003f17c 	.word	0x0003f17c
   240ec:	0003f198 	.word	0x0003f198
   240f0:	20015d10 	.word	0x20015d10
   240f4:	20016870 	.word	0x20016870
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   240f8:	a80f      	add	r0, sp, #60	; 0x3c
   240fa:	f7ef febb 	bl	13e74 <timeutil_timegm64>
   240fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24102:	460a      	mov	r2, r1
   24104:	fba0 0103 	umull	r0, r1, r0, r3
   24108:	fb03 1102 	mla	r1, r3, r2, r1
   2410c:	e9c9 0100 	strd	r0, r1, [r9]
	time_aux.last_date_time_update = k_uptime_get();
   24110:	f011 fd64 	bl	35bdc <k_uptime_get>
			LOG_DBG("Time from cellular network obtained");
   24114:	f044 0204 	orr.w	r2, r4, #4
	time_aux.last_date_time_update = k_uptime_get();
   24118:	f8c9 0008 	str.w	r0, [r9, #8]
			LOG_DBG("Time from cellular network obtained");
   2411c:	4904      	ldr	r1, [pc, #16]	; (24130 <new_date_time_get+0x3b8>)
   2411e:	4805      	ldr	r0, [pc, #20]	; (24134 <new_date_time_get+0x3bc>)
   24120:	f00c f8e7 	bl	302f2 <log_1>
			initial_valid_time = true;
   24124:	2201      	movs	r2, #1
   24126:	4b04      	ldr	r3, [pc, #16]	; (24138 <new_date_time_get+0x3c0>)
   24128:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   2412a:	2200      	movs	r2, #0
   2412c:	4b03      	ldr	r3, [pc, #12]	; (2413c <new_date_time_get+0x3c4>)
   2412e:	e6d5      	b.n	23edc <new_date_time_get+0x164>
   24130:	0003f526 	.word	0x0003f526
   24134:	0003f1b1 	.word	0x0003f1b1
   24138:	2001d666 	.word	0x2001d666
   2413c:	2001d665 	.word	0x2001d665

00024140 <date_time_uptime_to_unix_time_ms>:

	return 0;
}

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   24140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev;

	if (uptime == NULL) {
   24144:	4604      	mov	r4, r0
   24146:	b960      	cbnz	r0, 24162 <date_time_uptime_to_unix_time_ms+0x22>
   24148:	492a      	ldr	r1, [pc, #168]	; (241f4 <date_time_uptime_to_unix_time_ms+0xb4>)
   2414a:	4b2b      	ldr	r3, [pc, #172]	; (241f8 <date_time_uptime_to_unix_time_ms+0xb8>)
		LOG_ERR("The passed in pointer cannot be NULL");
   2414c:	482b      	ldr	r0, [pc, #172]	; (241fc <date_time_uptime_to_unix_time_ms+0xbc>)
   2414e:	1ac9      	subs	r1, r1, r3
   24150:	08c9      	lsrs	r1, r1, #3
   24152:	0189      	lsls	r1, r1, #6
   24154:	f041 0101 	orr.w	r1, r1, #1
   24158:	f00c f8be 	bl	302d8 <log_0>
	if (*uptime > time_aux.date_time_utc +
	    (k_uptime_get() - time_aux.last_date_time_update)) {
		LOG_WRN("Uptime to large or previously converted");
		LOG_WRN("Clear variable or set a new uptime");
		*uptime = uptime_prev;
		return -EINVAL;
   2415c:	f06f 0015 	mvn.w	r0, #21
   24160:	e012      	b.n	24188 <date_time_uptime_to_unix_time_ms+0x48>
	uptime_prev = *uptime;
   24162:	6803      	ldr	r3, [r0, #0]
   24164:	9300      	str	r3, [sp, #0]
   24166:	6843      	ldr	r3, [r0, #4]
   24168:	9301      	str	r3, [sp, #4]
	if (!initial_valid_time) {
   2416a:	4b25      	ldr	r3, [pc, #148]	; (24200 <date_time_uptime_to_unix_time_ms+0xc0>)
   2416c:	781b      	ldrb	r3, [r3, #0]
   2416e:	b973      	cbnz	r3, 2418e <date_time_uptime_to_unix_time_ms+0x4e>
   24170:	4b21      	ldr	r3, [pc, #132]	; (241f8 <date_time_uptime_to_unix_time_ms+0xb8>)
   24172:	4920      	ldr	r1, [pc, #128]	; (241f4 <date_time_uptime_to_unix_time_ms+0xb4>)
		LOG_WRN("Valid time not currently available");
   24174:	4823      	ldr	r0, [pc, #140]	; (24204 <date_time_uptime_to_unix_time_ms+0xc4>)
   24176:	1ac9      	subs	r1, r1, r3
   24178:	08c9      	lsrs	r1, r1, #3
   2417a:	0189      	lsls	r1, r1, #6
   2417c:	f041 0102 	orr.w	r1, r1, #2
   24180:	f00c f8aa 	bl	302d8 <log_0>
		return -ENODATA;
   24184:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	return 0;
}
   24188:	b003      	add	sp, #12
   2418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   2418e:	4d1e      	ldr	r5, [pc, #120]	; (24208 <date_time_uptime_to_unix_time_ms+0xc8>)
   24190:	68a9      	ldr	r1, [r5, #8]
   24192:	e9d5 6700 	ldrd	r6, r7, [r5]
   24196:	1a72      	subs	r2, r6, r1
   24198:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   2419c:	9900      	ldr	r1, [sp, #0]
   2419e:	eb12 0801 	adds.w	r8, r2, r1
   241a2:	9901      	ldr	r1, [sp, #4]
   241a4:	eb43 0901 	adc.w	r9, r3, r1
   241a8:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   241ac:	f011 fd16 	bl	35bdc <k_uptime_get>
   241b0:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   241b2:	1af6      	subs	r6, r6, r3
   241b4:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   241b8:	eb16 0a00 	adds.w	sl, r6, r0
   241bc:	eb47 0b01 	adc.w	fp, r7, r1
   241c0:	45c2      	cmp	sl, r8
   241c2:	eb7b 0309 	sbcs.w	r3, fp, r9
   241c6:	da13      	bge.n	241f0 <date_time_uptime_to_unix_time_ms+0xb0>
   241c8:	4b0b      	ldr	r3, [pc, #44]	; (241f8 <date_time_uptime_to_unix_time_ms+0xb8>)
   241ca:	4d0a      	ldr	r5, [pc, #40]	; (241f4 <date_time_uptime_to_unix_time_ms+0xb4>)
		LOG_WRN("Uptime to large or previously converted");
   241cc:	480f      	ldr	r0, [pc, #60]	; (2420c <date_time_uptime_to_unix_time_ms+0xcc>)
   241ce:	1aed      	subs	r5, r5, r3
   241d0:	08ed      	lsrs	r5, r5, #3
   241d2:	01ad      	lsls	r5, r5, #6
   241d4:	f045 0502 	orr.w	r5, r5, #2
   241d8:	4629      	mov	r1, r5
   241da:	f00c f87d 	bl	302d8 <log_0>
		LOG_WRN("Clear variable or set a new uptime");
   241de:	4629      	mov	r1, r5
   241e0:	480b      	ldr	r0, [pc, #44]	; (24210 <date_time_uptime_to_unix_time_ms+0xd0>)
   241e2:	f00c f879 	bl	302d8 <log_0>
		*uptime = uptime_prev;
   241e6:	9b00      	ldr	r3, [sp, #0]
   241e8:	6023      	str	r3, [r4, #0]
   241ea:	9b01      	ldr	r3, [sp, #4]
   241ec:	6063      	str	r3, [r4, #4]
   241ee:	e7b5      	b.n	2415c <date_time_uptime_to_unix_time_ms+0x1c>
	return 0;
   241f0:	2000      	movs	r0, #0
   241f2:	e7c9      	b.n	24188 <date_time_uptime_to_unix_time_ms+0x48>
   241f4:	00038840 	.word	0x00038840
   241f8:	000387c0 	.word	0x000387c0
   241fc:	0003f229 	.word	0x0003f229
   24200:	2001d666 	.word	0x2001d666
   24204:	0003f3c5 	.word	0x0003f3c5
   24208:	20015d10 	.word	0x20015d10
   2420c:	0003f3e8 	.word	0x0003f3e8
   24210:	0003f410 	.word	0x0003f410

00024214 <date_time_now>:

int date_time_now(int64_t *unix_time_ms)
{
   24214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;
	int64_t unix_time_ms_prev;

	if (unix_time_ms == NULL) {
   24216:	4604      	mov	r4, r0
   24218:	b968      	cbnz	r0, 24236 <date_time_now+0x22>
   2421a:	4b14      	ldr	r3, [pc, #80]	; (2426c <date_time_now+0x58>)
   2421c:	4914      	ldr	r1, [pc, #80]	; (24270 <date_time_now+0x5c>)
		LOG_ERR("The passed in pointer cannot be NULL");
   2421e:	4815      	ldr	r0, [pc, #84]	; (24274 <date_time_now+0x60>)
   24220:	1ac9      	subs	r1, r1, r3
   24222:	08c9      	lsrs	r1, r1, #3
   24224:	0189      	lsls	r1, r1, #6
   24226:	f041 0101 	orr.w	r1, r1, #1
   2422a:	f00c f855 	bl	302d8 <log_0>
		return -EINVAL;
   2422e:	f06f 0515 	mvn.w	r5, #21
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
		*unix_time_ms = unix_time_ms_prev;
	}

	return err;
}
   24232:	4628      	mov	r0, r5
   24234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	unix_time_ms_prev = *unix_time_ms;
   24236:	e9d0 6700 	ldrd	r6, r7, [r0]
	*unix_time_ms = k_uptime_get();
   2423a:	f011 fccf 	bl	35bdc <k_uptime_get>
   2423e:	e9c4 0100 	strd	r0, r1, [r4]
	err = date_time_uptime_to_unix_time_ms(unix_time_ms);
   24242:	4620      	mov	r0, r4
   24244:	f7ff ff7c 	bl	24140 <date_time_uptime_to_unix_time_ms>
	if (err) {
   24248:	4605      	mov	r5, r0
   2424a:	2800      	cmp	r0, #0
   2424c:	d0f1      	beq.n	24232 <date_time_now+0x1e>
   2424e:	4b07      	ldr	r3, [pc, #28]	; (2426c <date_time_now+0x58>)
   24250:	4a07      	ldr	r2, [pc, #28]	; (24270 <date_time_now+0x5c>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
   24252:	4601      	mov	r1, r0
   24254:	1ad2      	subs	r2, r2, r3
   24256:	08d2      	lsrs	r2, r2, #3
   24258:	0192      	lsls	r2, r2, #6
   2425a:	4807      	ldr	r0, [pc, #28]	; (24278 <date_time_now+0x64>)
   2425c:	f042 0202 	orr.w	r2, r2, #2
   24260:	f00c f847 	bl	302f2 <log_1>
		*unix_time_ms = unix_time_ms_prev;
   24264:	e9c4 6700 	strd	r6, r7, [r4]
   24268:	e7e3      	b.n	24232 <date_time_now+0x1e>
   2426a:	bf00      	nop
   2426c:	000387c0 	.word	0x000387c0
   24270:	00038840 	.word	0x00038840
   24274:	0003f229 	.word	0x0003f229
   24278:	0003f433 	.word	0x0003f433

0002427c <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   2427c:	b508      	push	{r3, lr}
   2427e:	4b0b      	ldr	r3, [pc, #44]	; (242ac <date_time_update_async+0x30>)
	if (evt_handler) {
   24280:	b128      	cbz	r0, 2428e <date_time_update_async+0x12>
		app_evt_handler = evt_handler;
   24282:	6018      	str	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   24284:	480a      	ldr	r0, [pc, #40]	; (242b0 <date_time_update_async+0x34>)
   24286:	f006 ffbb 	bl	2b200 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   2428a:	2000      	movs	r0, #0
   2428c:	bd08      	pop	{r3, pc}
	} else if (app_evt_handler == NULL) {
   2428e:	681b      	ldr	r3, [r3, #0]
   24290:	2b00      	cmp	r3, #0
   24292:	d1f7      	bne.n	24284 <date_time_update_async+0x8>
   24294:	4b07      	ldr	r3, [pc, #28]	; (242b4 <date_time_update_async+0x38>)
   24296:	4a08      	ldr	r2, [pc, #32]	; (242b8 <date_time_update_async+0x3c>)
		LOG_DBG("No handler registered");
   24298:	4908      	ldr	r1, [pc, #32]	; (242bc <date_time_update_async+0x40>)
   2429a:	1ad2      	subs	r2, r2, r3
   2429c:	08d2      	lsrs	r2, r2, #3
   2429e:	0192      	lsls	r2, r2, #6
   242a0:	4807      	ldr	r0, [pc, #28]	; (242c0 <date_time_update_async+0x44>)
   242a2:	f042 0204 	orr.w	r2, r2, #4
   242a6:	f00c f824 	bl	302f2 <log_1>
   242aa:	e7eb      	b.n	24284 <date_time_update_async+0x8>
   242ac:	2001686c 	.word	0x2001686c
   242b0:	20015078 	.word	0x20015078
   242b4:	000387c0 	.word	0x000387c0
   242b8:	00038840 	.word	0x00038840
   242bc:	0003f538 	.word	0x0003f538
   242c0:	0003f45f 	.word	0x0003f45f

000242c4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   242c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   242c8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   242ca:	4c21      	ldr	r4, [pc, #132]	; (24350 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   242cc:	4e21      	ldr	r6, [pc, #132]	; (24354 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   242ce:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   242d2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2435c <check_ext_api_requests+0x98>
{
   242d6:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   242d8:	45a8      	cmp	r8, r5
   242da:	d803      	bhi.n	242e4 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   242dc:	2000      	movs	r0, #0
   242de:	b005      	add	sp, #20
   242e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   242e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   242e6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   242ea:	681f      	ldr	r7, [r3, #0]
   242ec:	ab01      	add	r3, sp, #4
   242ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   242f2:	220c      	movs	r2, #12
   242f4:	4619      	mov	r1, r3
   242f6:	4638      	mov	r0, r7
   242f8:	f013 fa35 	bl	37766 <memcmp>
   242fc:	b990      	cbnz	r0, 24324 <check_ext_api_requests+0x60>
   242fe:	b18f      	cbz	r7, 24324 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   24300:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   24302:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   24304:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   24306:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   24308:	4291      	cmp	r1, r2
   2430a:	d10b      	bne.n	24324 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   2430c:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2430e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   24310:	4291      	cmp	r1, r2
   24312:	d807      	bhi.n	24324 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   24314:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   24316:	4291      	cmp	r1, r2
   24318:	d904      	bls.n	24324 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   2431a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2431c:	695b      	ldr	r3, [r3, #20]
   2431e:	ea32 0303 	bics.w	r3, r2, r3
   24322:	d00a      	beq.n	2433a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   24324:	6a27      	ldr	r7, [r4, #32]
   24326:	b167      	cbz	r7, 24342 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   24328:	480b      	ldr	r0, [pc, #44]	; (24358 <check_ext_api_requests+0x94>)
   2432a:	f00b fca1 	bl	2fc70 <printk>
			k_panic();
   2432e:	4040      	eors	r0, r0
   24330:	f380 8811 	msr	BASEPRI, r0
   24334:	f04f 0004 	mov.w	r0, #4
   24338:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2433a:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2433c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2433e:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   24340:	e7ca      	b.n	242d8 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   24342:	4648      	mov	r0, r9
   24344:	f00b fc94 	bl	2fc70 <printk>
			*ext_api_req->ext_api = NULL;
   24348:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2434a:	601f      	str	r7, [r3, #0]
   2434c:	e7f5      	b.n	2433a <check_ext_api_requests+0x76>
   2434e:	bf00      	nop
   24350:	0001023c 	.word	0x0001023c
   24354:	000389e0 	.word	0x000389e0
   24358:	0003f54f 	.word	0x0003f54f
   2435c:	0003f578 	.word	0x0003f578

00024360 <compare_double>:
    buffer->offset += strlen((const char*)buffer_pointer);
}

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
   24360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24364:	4616      	mov	r6, r2
   24366:	461f      	mov	r7, r3
   24368:	4680      	mov	r8, r0
   2436a:	4689      	mov	r9, r1
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   2436c:	f009 ffec 	bl	2e348 <fabs>
   24370:	4604      	mov	r4, r0
   24372:	460d      	mov	r5, r1
   24374:	4630      	mov	r0, r6
   24376:	4639      	mov	r1, r7
   24378:	f009 ffe6 	bl	2e348 <fabs>
   2437c:	4602      	mov	r2, r0
   2437e:	460b      	mov	r3, r1
   24380:	4620      	mov	r0, r4
   24382:	4629      	mov	r1, r5
   24384:	f7ec fba8 	bl	10ad8 <__aeabi_dcmpgt>
   24388:	b300      	cbz	r0, 243cc <compare_double+0x6c>
   2438a:	4640      	mov	r0, r8
   2438c:	4649      	mov	r1, r9
   2438e:	f009 ffdb 	bl	2e348 <fabs>
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   24392:	4632      	mov	r2, r6
   24394:	463b      	mov	r3, r7
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   24396:	4604      	mov	r4, r0
   24398:	460d      	mov	r5, r1
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   2439a:	4640      	mov	r0, r8
   2439c:	4649      	mov	r1, r9
   2439e:	f7eb ff53 	bl	10248 <__aeabi_dsub>
   243a2:	f009 ffd1 	bl	2e348 <fabs>
   243a6:	2200      	movs	r2, #0
   243a8:	4606      	mov	r6, r0
   243aa:	460f      	mov	r7, r1
   243ac:	4620      	mov	r0, r4
   243ae:	4629      	mov	r1, r5
   243b0:	4b08      	ldr	r3, [pc, #32]	; (243d4 <compare_double+0x74>)
   243b2:	f7ec f901 	bl	105b8 <__aeabi_dmul>
   243b6:	4602      	mov	r2, r0
   243b8:	460b      	mov	r3, r1
   243ba:	4630      	mov	r0, r6
   243bc:	4639      	mov	r1, r7
   243be:	f7ec fb77 	bl	10ab0 <__aeabi_dcmple>
}
   243c2:	3800      	subs	r0, #0
   243c4:	bf18      	it	ne
   243c6:	2001      	movne	r0, #1
   243c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   243cc:	4630      	mov	r0, r6
   243ce:	4639      	mov	r1, r7
   243d0:	e7dd      	b.n	2438e <compare_double+0x2e>
   243d2:	bf00      	nop
   243d4:	3cb00000 	.word	0x3cb00000

000243d8 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
   243d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char *output = NULL;
    unsigned char *output_pointer = NULL;
    size_t output_length = 0;
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
    const char quotes[] = "\"\"";
   243dc:	4b52      	ldr	r3, [pc, #328]	; (24528 <print_string_ptr+0x150>)
{
   243de:	b085      	sub	sp, #20
    const char quotes[] = "\"\"";
   243e0:	881a      	ldrh	r2, [r3, #0]
   243e2:	789b      	ldrb	r3, [r3, #2]
{
   243e4:	4605      	mov	r5, r0

    if (output_buffer == NULL)
   243e6:	460f      	mov	r7, r1
    const char quotes[] = "\"\"";
   243e8:	f8ad 200c 	strh.w	r2, [sp, #12]
   243ec:	f88d 300e 	strb.w	r3, [sp, #14]
    if (output_buffer == NULL)
   243f0:	b919      	cbnz	r1, 243fa <print_string_ptr+0x22>
    {
        return false;
   243f2:	2000      	movs	r0, #0
    }
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
}
   243f4:	b005      	add	sp, #20
   243f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   243fa:	b340      	cbz	r0, 2444e <print_string_ptr+0x76>
   243fc:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   243fe:	f04f 0b00 	mov.w	fp, #0
   24402:	2001      	movs	r0, #1
   24404:	4c49      	ldr	r4, [pc, #292]	; (2452c <print_string_ptr+0x154>)
   24406:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   24408:	f811 3b01 	ldrb.w	r3, [r1], #1
   2440c:	bb6b      	cbnz	r3, 2446a <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   2440e:	ebaa 0a05 	sub.w	sl, sl, r5
   24412:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   24414:	4638      	mov	r0, r7
   24416:	f10a 0103 	add.w	r1, sl, #3
   2441a:	f011 fc0e 	bl	35c3a <ensure>
    if (output == NULL)
   2441e:	4606      	mov	r6, r0
   24420:	2800      	cmp	r0, #0
   24422:	d0e6      	beq.n	243f2 <print_string_ptr+0x1a>
    if (escape_characters == 0)
   24424:	2322      	movs	r3, #34	; 0x22
   24426:	1c44      	adds	r4, r0, #1
   24428:	f10a 0901 	add.w	r9, sl, #1
   2442c:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   24430:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   24432:	f1bb 0f00 	cmp.w	fp, #0
   24436:	d12e      	bne.n	24496 <print_string_ptr+0xbe>
   24438:	4652      	mov	r2, sl
   2443a:	4629      	mov	r1, r5
   2443c:	4620      	mov	r0, r4
   2443e:	f013 f9a0 	bl	37782 <memcpy>
        output[output_length + 1] = '\"';
   24442:	2322      	movs	r3, #34	; 0x22
   24444:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   24448:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   2444c:	e00b      	b.n	24466 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   2444e:	2103      	movs	r1, #3
   24450:	4638      	mov	r0, r7
   24452:	f011 fbf2 	bl	35c3a <ensure>
        if (output == NULL)
   24456:	2800      	cmp	r0, #0
   24458:	d0cb      	beq.n	243f2 <print_string_ptr+0x1a>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   2445a:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2445e:	a903      	add	r1, sp, #12
   24460:	1ad2      	subs	r2, r2, r3
   24462:	f013 faed 	bl	37a40 <strncpy>
    return true;
   24466:	2001      	movs	r0, #1
   24468:	e7c4      	b.n	243f4 <print_string_ptr+0x1c>
        switch (*input_pointer)
   2446a:	2b22      	cmp	r3, #34	; 0x22
   2446c:	d80b      	bhi.n	24486 <print_string_ptr+0xae>
   2446e:	2b07      	cmp	r3, #7
   24470:	d90c      	bls.n	2448c <print_string_ptr+0xb4>
   24472:	f1a3 0208 	sub.w	r2, r3, #8
   24476:	b2d2      	uxtb	r2, r2
   24478:	fa00 f202 	lsl.w	r2, r0, r2
   2447c:	4222      	tst	r2, r4
   2447e:	d005      	beq.n	2448c <print_string_ptr+0xb4>
                escape_characters++;
   24480:	f10b 0b01 	add.w	fp, fp, #1
                break;
   24484:	e7bf      	b.n	24406 <print_string_ptr+0x2e>
        switch (*input_pointer)
   24486:	2b5c      	cmp	r3, #92	; 0x5c
   24488:	d1bd      	bne.n	24406 <print_string_ptr+0x2e>
   2448a:	e7f9      	b.n	24480 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   2448c:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   2448e:	bf98      	it	ls
   24490:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   24494:	e7b7      	b.n	24406 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   24496:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   2449a:	f04f 0b74 	mov.w	fp, #116	; 0x74
   2449e:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   244a0:	4a23      	ldr	r2, [pc, #140]	; (24530 <print_string_ptr+0x158>)
   244a2:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   244a4:	9901      	ldr	r1, [sp, #4]
   244a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   244aa:	9101      	str	r1, [sp, #4]
   244ac:	b92b      	cbnz	r3, 244ba <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   244ae:	2222      	movs	r2, #34	; 0x22
   244b0:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   244b4:	f806 3008 	strb.w	r3, [r6, r8]
   244b8:	e7d5      	b.n	24466 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   244ba:	2b1f      	cmp	r3, #31
   244bc:	d907      	bls.n	244ce <print_string_ptr+0xf6>
   244be:	2b22      	cmp	r3, #34	; 0x22
   244c0:	d005      	beq.n	244ce <print_string_ptr+0xf6>
   244c2:	2b5c      	cmp	r3, #92	; 0x5c
   244c4:	d003      	beq.n	244ce <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   244c6:	4620      	mov	r0, r4
   244c8:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   244ca:	1c44      	adds	r4, r0, #1
   244cc:	e7ea      	b.n	244a4 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   244ce:	4620      	mov	r0, r4
            switch (*input_pointer)
   244d0:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   244d2:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   244d6:	781b      	ldrb	r3, [r3, #0]
   244d8:	2b0d      	cmp	r3, #13
   244da:	d80a      	bhi.n	244f2 <print_string_ptr+0x11a>
   244dc:	2b07      	cmp	r3, #7
   244de:	d919      	bls.n	24514 <print_string_ptr+0x13c>
   244e0:	f1a3 0108 	sub.w	r1, r3, #8
   244e4:	2905      	cmp	r1, #5
   244e6:	d815      	bhi.n	24514 <print_string_ptr+0x13c>
   244e8:	e8df f001 	tbb	[pc, r1]
   244ec:	140d1109 	.word	0x140d1109
   244f0:	0f0b      	.short	0x0f0b
   244f2:	2b22      	cmp	r3, #34	; 0x22
   244f4:	d001      	beq.n	244fa <print_string_ptr+0x122>
   244f6:	2b5c      	cmp	r3, #92	; 0x5c
   244f8:	d10c      	bne.n	24514 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   244fa:	7063      	strb	r3, [r4, #1]
                    break;
   244fc:	e7e5      	b.n	244ca <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   244fe:	2362      	movs	r3, #98	; 0x62
   24500:	e7fb      	b.n	244fa <print_string_ptr+0x122>
                    *output_pointer = 'f';
   24502:	2366      	movs	r3, #102	; 0x66
   24504:	e7f9      	b.n	244fa <print_string_ptr+0x122>
                    *output_pointer = 'n';
   24506:	236e      	movs	r3, #110	; 0x6e
   24508:	e7f7      	b.n	244fa <print_string_ptr+0x122>
                    *output_pointer = 'r';
   2450a:	2372      	movs	r3, #114	; 0x72
   2450c:	e7f5      	b.n	244fa <print_string_ptr+0x122>
                    *output_pointer = 't';
   2450e:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   24512:	e7da      	b.n	244ca <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   24514:	6839      	ldr	r1, [r7, #0]
   24516:	687d      	ldr	r5, [r7, #4]
   24518:	1a41      	subs	r1, r0, r1
   2451a:	1a69      	subs	r1, r5, r1
   2451c:	f00a fb38 	bl	2eb90 <sniprintf>
                    output_pointer += 4;
   24520:	4a03      	ldr	r2, [pc, #12]	; (24530 <print_string_ptr+0x158>)
   24522:	1d60      	adds	r0, r4, #5
                    break;
   24524:	e7d1      	b.n	244ca <print_string_ptr+0xf2>
   24526:	bf00      	nop
   24528:	0003f5b1 	.word	0x0003f5b1
   2452c:	04000037 	.word	0x04000037
   24530:	0003f5ab 	.word	0x0003f5ab

00024534 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
   24534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24538:	460c      	mov	r4, r1
    unsigned char *output = NULL;

    if ((item == NULL) || (output_buffer == NULL))
   2453a:	4606      	mov	r6, r0
{
   2453c:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   2453e:	b908      	cbnz	r0, 24544 <print_value+0x10>
    {
        return false;
    }

    switch ((item->type) & 0xFF)
   24540:	2500      	movs	r5, #0
   24542:	e06f      	b.n	24624 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   24544:	2900      	cmp	r1, #0
   24546:	d0fb      	beq.n	24540 <print_value+0xc>
    switch ((item->type) & 0xFF)
   24548:	7b05      	ldrb	r5, [r0, #12]
   2454a:	2d10      	cmp	r5, #16
   2454c:	f000 80eb 	beq.w	24726 <print_value+0x1f2>
   24550:	dc18      	bgt.n	24584 <print_value+0x50>
   24552:	1e6b      	subs	r3, r5, #1
   24554:	2b07      	cmp	r3, #7
   24556:	d8f3      	bhi.n	24540 <print_value+0xc>
   24558:	2b07      	cmp	r3, #7
   2455a:	d8f1      	bhi.n	24540 <print_value+0xc>
   2455c:	a201      	add	r2, pc, #4	; (adr r2, 24564 <print_value+0x30>)
   2455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   24562:	bf00      	nop
   24564:	00024601 	.word	0x00024601
   24568:	0002462d 	.word	0x0002462d
   2456c:	00024541 	.word	0x00024541
   24570:	000245d9 	.word	0x000245d9
   24574:	00024541 	.word	0x00024541
   24578:	00024541 	.word	0x00024541
   2457c:	00024541 	.word	0x00024541
   24580:	00024631 	.word	0x00024631
   24584:	2d40      	cmp	r5, #64	; 0x40
   24586:	f000 80fc 	beq.w	24782 <print_value+0x24e>
   2458a:	2d80      	cmp	r5, #128	; 0x80
   2458c:	f000 80b8 	beq.w	24700 <print_value+0x1cc>
   24590:	2d20      	cmp	r5, #32
   24592:	d1d5      	bne.n	24540 <print_value+0xc>

        case cJSON_String:
            return print_string(item, output_buffer);

        case cJSON_Array:
            return print_array(item, output_buffer);
   24594:	6886      	ldr	r6, [r0, #8]
        return false;
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
   24596:	2101      	movs	r1, #1
   24598:	4620      	mov	r0, r4
   2459a:	f011 fb4e 	bl	35c3a <ensure>
    if (output_pointer == NULL)
   2459e:	2800      	cmp	r0, #0
   245a0:	d0ce      	beq.n	24540 <print_value+0xc>
    {
        return false;
    }

    *output_pointer = '[';
   245a2:	235b      	movs	r3, #91	; 0x5b
            output_pointer = ensure(output_buffer, length + 1);
            if (output_pointer == NULL)
            {
                return false;
            }
            *output_pointer++ = ',';
   245a4:	272c      	movs	r7, #44	; 0x2c
            if(output_buffer->format)
            {
                *output_pointer++ = ' ';
            }
            *output_pointer = '\0';
   245a6:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   245aa:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   245ac:	68a3      	ldr	r3, [r4, #8]
   245ae:	3301      	adds	r3, #1
   245b0:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   245b2:	68e3      	ldr	r3, [r4, #12]
   245b4:	3301      	adds	r3, #1
   245b6:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   245b8:	2e00      	cmp	r6, #0
   245ba:	f040 80b9 	bne.w	24730 <print_value+0x1fc>
            output_buffer->offset += length;
        }
        current_element = current_element->next;
    }

    output_pointer = ensure(output_buffer, 2);
   245be:	2102      	movs	r1, #2
   245c0:	4620      	mov	r0, r4
   245c2:	f011 fb3a 	bl	35c3a <ensure>
    if (output_pointer == NULL)
   245c6:	2800      	cmp	r0, #0
   245c8:	d0ba      	beq.n	24540 <print_value+0xc>
    {
        return false;
    }
    *output_pointer++ = ']';
   245ca:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   245cc:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   245ce:	7003      	strb	r3, [r0, #0]
            *output_pointer++ = '\t';
        }
    }
    *output_pointer++ = '}';
    *output_pointer = '\0';
    output_buffer->depth--;
   245d0:	68e3      	ldr	r3, [r4, #12]
   245d2:	3b01      	subs	r3, #1
   245d4:	60e3      	str	r3, [r4, #12]
   245d6:	e011      	b.n	245fc <print_value+0xc8>
            const char buff[] = "null";
   245d8:	4bb2      	ldr	r3, [pc, #712]	; (248a4 <print_value+0x370>)
            const char buff[] = "true";
   245da:	6818      	ldr	r0, [r3, #0]
   245dc:	791b      	ldrb	r3, [r3, #4]
   245de:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   245e0:	2105      	movs	r1, #5
   245e2:	4620      	mov	r0, r4
            const char buff[] = "true";
   245e4:	f88d 3018 	strb.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   245e8:	f011 fb27 	bl	35c3a <ensure>
   245ec:	4605      	mov	r5, r0
            if (output == NULL)
   245ee:	b1c8      	cbz	r0, 24624 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   245f0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   245f4:	a905      	add	r1, sp, #20
   245f6:	1ad2      	subs	r2, r2, r3
   245f8:	f013 fa22 	bl	37a40 <strncpy>

    return true;
   245fc:	2501      	movs	r5, #1
   245fe:	e011      	b.n	24624 <print_value+0xf0>
            const char buff[] = "false";
   24600:	4ba9      	ldr	r3, [pc, #676]	; (248a8 <print_value+0x374>)
            output = ensure(output_buffer, sizeof(buff));
   24602:	2106      	movs	r1, #6
            const char buff[] = "false";
   24604:	6818      	ldr	r0, [r3, #0]
   24606:	889b      	ldrh	r3, [r3, #4]
   24608:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   2460a:	4620      	mov	r0, r4
            const char buff[] = "false";
   2460c:	f8ad 3018 	strh.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   24610:	f011 fb13 	bl	35c3a <ensure>
            if (output == NULL)
   24614:	2800      	cmp	r0, #0
   24616:	d093      	beq.n	24540 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   24618:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2461c:	a905      	add	r1, sp, #20
   2461e:	1ad2      	subs	r2, r2, r3
   24620:	f013 fa0e 	bl	37a40 <strncpy>
}
   24624:	4628      	mov	r0, r5
   24626:	b00d      	add	sp, #52	; 0x34
   24628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   2462c:	4b9f      	ldr	r3, [pc, #636]	; (248ac <print_value+0x378>)
   2462e:	e7d4      	b.n	245da <print_value+0xa6>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   24630:	2100      	movs	r1, #0
    double d = item->valuedouble;
   24632:	e9d0 7606 	ldrd	r7, r6, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   24636:	2216      	movs	r2, #22
   24638:	a806      	add	r0, sp, #24
   2463a:	9105      	str	r1, [sp, #20]
   2463c:	f013 f8c1 	bl	377c2 <memset>
    double test = 0.0;
   24640:	2200      	movs	r2, #0
   24642:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
   24644:	4638      	mov	r0, r7
    double test = 0.0;
   24646:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (isnan(d) || isinf(d))
   2464a:	4631      	mov	r1, r6
   2464c:	463a      	mov	r2, r7
   2464e:	4633      	mov	r3, r6
   24650:	f7ec fa4c 	bl	10aec <__aeabi_dcmpun>
   24654:	f10d 0814 	add.w	r8, sp, #20
   24658:	b988      	cbnz	r0, 2467e <print_value+0x14a>
   2465a:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
   2465e:	f04f 32ff 	mov.w	r2, #4294967295
   24662:	4638      	mov	r0, r7
   24664:	4629      	mov	r1, r5
   24666:	4b92      	ldr	r3, [pc, #584]	; (248b0 <print_value+0x37c>)
   24668:	f7ec fa40 	bl	10aec <__aeabi_dcmpun>
   2466c:	bb00      	cbnz	r0, 246b0 <print_value+0x17c>
   2466e:	f04f 32ff 	mov.w	r2, #4294967295
   24672:	4638      	mov	r0, r7
   24674:	4629      	mov	r1, r5
   24676:	4b8e      	ldr	r3, [pc, #568]	; (248b0 <print_value+0x37c>)
   24678:	f7ec fa1a 	bl	10ab0 <__aeabi_dcmple>
   2467c:	b9c0      	cbnz	r0, 246b0 <print_value+0x17c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   2467e:	4640      	mov	r0, r8
   24680:	4988      	ldr	r1, [pc, #544]	; (248a4 <print_value+0x370>)
   24682:	f013 f9c3 	bl	37a0c <strcpy>
   24686:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   24688:	4620      	mov	r0, r4
   2468a:	1c69      	adds	r1, r5, #1
   2468c:	f011 fad5 	bl	35c3a <ensure>
    if (output_pointer == NULL)
   24690:	2800      	cmp	r0, #0
   24692:	f43f af55 	beq.w	24540 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   24696:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   24698:	f818 2003 	ldrb.w	r2, [r8, r3]
        output_pointer[i] = number_buffer[i];
   2469c:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   2469e:	3301      	adds	r3, #1
   246a0:	429d      	cmp	r5, r3
   246a2:	d1f9      	bne.n	24698 <print_value+0x164>
    output_pointer[i] = '\0';
   246a4:	2300      	movs	r3, #0
   246a6:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   246a8:	68a0      	ldr	r0, [r4, #8]
   246aa:	4428      	add	r0, r5
   246ac:	60a0      	str	r0, [r4, #8]
    return true;
   246ae:	e7a5      	b.n	245fc <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   246b0:	4633      	mov	r3, r6
   246b2:	463a      	mov	r2, r7
   246b4:	211a      	movs	r1, #26
   246b6:	e9cd 2300 	strd	r2, r3, [sp]
   246ba:	4640      	mov	r0, r8
   246bc:	4a7d      	ldr	r2, [pc, #500]	; (248b4 <print_value+0x380>)
   246be:	f00a fa67 	bl	2eb90 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   246c2:	497d      	ldr	r1, [pc, #500]	; (248b8 <print_value+0x384>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   246c4:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   246c6:	aa02      	add	r2, sp, #8
   246c8:	4640      	mov	r0, r8
   246ca:	f00a fa95 	bl	2ebf8 <siscanf>
   246ce:	2801      	cmp	r0, #1
   246d0:	d00d      	beq.n	246ee <print_value+0x1ba>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   246d2:	463a      	mov	r2, r7
   246d4:	4633      	mov	r3, r6
   246d6:	211a      	movs	r1, #26
   246d8:	e9cd 2300 	strd	r2, r3, [sp]
   246dc:	4640      	mov	r0, r8
   246de:	4a77      	ldr	r2, [pc, #476]	; (248bc <print_value+0x388>)
   246e0:	f00a fa56 	bl	2eb90 <sniprintf>
   246e4:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   246e6:	2d19      	cmp	r5, #25
   246e8:	f73f af2a 	bgt.w	24540 <print_value+0xc>
   246ec:	e7cc      	b.n	24688 <print_value+0x154>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   246ee:	463a      	mov	r2, r7
   246f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   246f4:	4633      	mov	r3, r6
   246f6:	f7ff fe33 	bl	24360 <compare_double>
   246fa:	2800      	cmp	r0, #0
   246fc:	d0e9      	beq.n	246d2 <print_value+0x19e>
   246fe:	e7f2      	b.n	246e6 <print_value+0x1b2>
            if (item->valuestring == NULL)
   24700:	6900      	ldr	r0, [r0, #16]
   24702:	2800      	cmp	r0, #0
   24704:	f43f af1c 	beq.w	24540 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   24708:	f7ec fefa 	bl	11500 <strlen>
   2470c:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   2470e:	4629      	mov	r1, r5
   24710:	4620      	mov	r0, r4
   24712:	f011 fa92 	bl	35c3a <ensure>
            if (output == NULL)
   24716:	2800      	cmp	r0, #0
   24718:	f43f af12 	beq.w	24540 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2471c:	462a      	mov	r2, r5
   2471e:	6931      	ldr	r1, [r6, #16]
   24720:	f013 f82f 	bl	37782 <memcpy>
   24724:	e76a      	b.n	245fc <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   24726:	6900      	ldr	r0, [r0, #16]
   24728:	f7ff fe56 	bl	243d8 <print_string_ptr>
   2472c:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   2472e:	e779      	b.n	24624 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   24730:	4621      	mov	r1, r4
   24732:	4630      	mov	r0, r6
   24734:	f7ff fefe 	bl	24534 <print_value>
   24738:	2800      	cmp	r0, #0
   2473a:	f43f af01 	beq.w	24540 <print_value+0xc>
        update_offset(output_buffer);
   2473e:	4620      	mov	r0, r4
   24740:	f011 fa5a 	bl	35bf8 <update_offset>
        if (current_element->next)
   24744:	6833      	ldr	r3, [r6, #0]
   24746:	b1bb      	cbz	r3, 24778 <print_value+0x244>
            length = (size_t) (output_buffer->format ? 2 : 1);
   24748:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   2474a:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   2474c:	2b00      	cmp	r3, #0
   2474e:	bf14      	ite	ne
   24750:	f04f 0902 	movne.w	r9, #2
   24754:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   24758:	f109 0101 	add.w	r1, r9, #1
   2475c:	f011 fa6d 	bl	35c3a <ensure>
            if (output_pointer == NULL)
   24760:	2800      	cmp	r0, #0
   24762:	f43f aeed 	beq.w	24540 <print_value+0xc>
            *output_pointer++ = ',';
   24766:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   24768:	6963      	ldr	r3, [r4, #20]
   2476a:	b93b      	cbnz	r3, 2477c <print_value+0x248>
            *output_pointer++ = ',';
   2476c:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   2476e:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   24772:	68a3      	ldr	r3, [r4, #8]
   24774:	444b      	add	r3, r9
   24776:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   24778:	6836      	ldr	r6, [r6, #0]
   2477a:	e71d      	b.n	245b8 <print_value+0x84>
                *output_pointer++ = ' ';
   2477c:	1c83      	adds	r3, r0, #2
   2477e:	7045      	strb	r5, [r0, #1]
   24780:	e7f5      	b.n	2476e <print_value+0x23a>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   24782:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   24784:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   24786:	2b00      	cmp	r3, #0
   24788:	bf14      	ite	ne
   2478a:	2702      	movne	r7, #2
   2478c:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   2478e:	4620      	mov	r0, r4
   24790:	1c79      	adds	r1, r7, #1
   24792:	f011 fa52 	bl	35c3a <ensure>
    if (output_pointer == NULL)
   24796:	2800      	cmp	r0, #0
   24798:	f43f aed2 	beq.w	24540 <print_value+0xc>
    *output_pointer++ = '{';
   2479c:	237b      	movs	r3, #123	; 0x7b
   2479e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   247a0:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   247a2:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   247a4:	3201      	adds	r2, #1
   247a6:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   247a8:	b10b      	cbz	r3, 247ae <print_value+0x27a>
        *output_pointer++ = '\n';
   247aa:	230a      	movs	r3, #10
   247ac:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   247ae:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   247b0:	2609      	movs	r6, #9
    output_buffer->offset += length;
   247b2:	443b      	add	r3, r7
        *output_pointer++ = ':';
   247b4:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   247b6:	60a3      	str	r3, [r4, #8]
    while (current_item)
   247b8:	6963      	ldr	r3, [r4, #20]
   247ba:	b995      	cbnz	r5, 247e2 <print_value+0x2ae>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   247bc:	2b00      	cmp	r3, #0
   247be:	d06f      	beq.n	248a0 <print_value+0x36c>
   247c0:	68e1      	ldr	r1, [r4, #12]
   247c2:	3101      	adds	r1, #1
   247c4:	4620      	mov	r0, r4
   247c6:	f011 fa38 	bl	35c3a <ensure>
    if (output_pointer == NULL)
   247ca:	2800      	cmp	r0, #0
   247cc:	f43f aeb8 	beq.w	24540 <print_value+0xc>
    if (output_buffer->format)
   247d0:	6963      	ldr	r3, [r4, #20]
   247d2:	2b00      	cmp	r3, #0
   247d4:	d17c      	bne.n	248d0 <print_value+0x39c>
   247d6:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   247d8:	227d      	movs	r2, #125	; 0x7d
   247da:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   247dc:	2200      	movs	r2, #0
   247de:	705a      	strb	r2, [r3, #1]
   247e0:	e6f6      	b.n	245d0 <print_value+0x9c>
        if (output_buffer->format)
   247e2:	b173      	cbz	r3, 24802 <print_value+0x2ce>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   247e4:	4620      	mov	r0, r4
   247e6:	68e1      	ldr	r1, [r4, #12]
   247e8:	f011 fa27 	bl	35c3a <ensure>
            if (output_pointer == NULL)
   247ec:	2800      	cmp	r0, #0
   247ee:	f43f aea7 	beq.w	24540 <print_value+0xc>
   247f2:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   247f4:	68e1      	ldr	r1, [r4, #12]
   247f6:	1a13      	subs	r3, r2, r0
   247f8:	428b      	cmp	r3, r1
   247fa:	d34e      	bcc.n	2489a <print_value+0x366>
            output_buffer->offset += output_buffer->depth;
   247fc:	68a3      	ldr	r3, [r4, #8]
   247fe:	440b      	add	r3, r1
   24800:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   24802:	4621      	mov	r1, r4
   24804:	6a28      	ldr	r0, [r5, #32]
   24806:	f7ff fde7 	bl	243d8 <print_string_ptr>
   2480a:	2800      	cmp	r0, #0
   2480c:	f43f ae98 	beq.w	24540 <print_value+0xc>
        update_offset(output_buffer);
   24810:	4620      	mov	r0, r4
   24812:	f011 f9f1 	bl	35bf8 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   24816:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   24818:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   2481a:	2b00      	cmp	r3, #0
   2481c:	bf14      	ite	ne
   2481e:	f04f 0802 	movne.w	r8, #2
   24822:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   24826:	4641      	mov	r1, r8
   24828:	f011 fa07 	bl	35c3a <ensure>
        if (output_pointer == NULL)
   2482c:	2800      	cmp	r0, #0
   2482e:	f43f ae87 	beq.w	24540 <print_value+0xc>
        *output_pointer++ = ':';
   24832:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   24834:	6963      	ldr	r3, [r4, #20]
   24836:	b103      	cbz	r3, 2483a <print_value+0x306>
            *output_pointer++ = '\t';
   24838:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   2483a:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   2483c:	4621      	mov	r1, r4
        output_buffer->offset += length;
   2483e:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   24840:	4628      	mov	r0, r5
        output_buffer->offset += length;
   24842:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   24844:	f7ff fe76 	bl	24534 <print_value>
   24848:	2800      	cmp	r0, #0
   2484a:	f43f ae79 	beq.w	24540 <print_value+0xc>
        update_offset(output_buffer);
   2484e:	4620      	mov	r0, r4
   24850:	f011 f9d2 	bl	35bf8 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   24854:	682b      	ldr	r3, [r5, #0]
   24856:	6962      	ldr	r2, [r4, #20]
   24858:	3b00      	subs	r3, #0
   2485a:	bf18      	it	ne
   2485c:	2301      	movne	r3, #1
   2485e:	2a00      	cmp	r2, #0
   24860:	bf0c      	ite	eq
   24862:	4698      	moveq	r8, r3
   24864:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   24868:	4620      	mov	r0, r4
   2486a:	f108 0101 	add.w	r1, r8, #1
   2486e:	f011 f9e4 	bl	35c3a <ensure>
        if (output_pointer == NULL)
   24872:	2800      	cmp	r0, #0
   24874:	f43f ae64 	beq.w	24540 <print_value+0xc>
        if (current_item->next)
   24878:	682b      	ldr	r3, [r5, #0]
   2487a:	b113      	cbz	r3, 24882 <print_value+0x34e>
            *output_pointer++ = ',';
   2487c:	232c      	movs	r3, #44	; 0x2c
   2487e:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   24882:	6963      	ldr	r3, [r4, #20]
   24884:	b113      	cbz	r3, 2488c <print_value+0x358>
            *output_pointer++ = '\n';
   24886:	230a      	movs	r3, #10
   24888:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   2488c:	2300      	movs	r3, #0
   2488e:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   24890:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   24892:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   24894:	4443      	add	r3, r8
   24896:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   24898:	e78e      	b.n	247b8 <print_value+0x284>
                *output_pointer++ = '\t';
   2489a:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   2489e:	e7a9      	b.n	247f4 <print_value+0x2c0>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   248a0:	2102      	movs	r1, #2
   248a2:	e78f      	b.n	247c4 <print_value+0x290>
   248a4:	0003f5b4 	.word	0x0003f5b4
   248a8:	0003a8cf 	.word	0x0003a8cf
   248ac:	0003a8ca 	.word	0x0003a8ca
   248b0:	7fefffff 	.word	0x7fefffff
   248b4:	0003f5b9 	.word	0x0003f5b9
   248b8:	0003f5c0 	.word	0x0003f5c0
   248bc:	0003f5c4 	.word	0x0003f5c4
            *output_pointer++ = '\t';
   248c0:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   248c4:	68e2      	ldr	r2, [r4, #12]
   248c6:	1a19      	subs	r1, r3, r0
   248c8:	3a01      	subs	r2, #1
   248ca:	4291      	cmp	r1, r2
   248cc:	d3f8      	bcc.n	248c0 <print_value+0x38c>
   248ce:	e783      	b.n	247d8 <print_value+0x2a4>
   248d0:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   248d2:	2509      	movs	r5, #9
   248d4:	e7f6      	b.n	248c4 <print_value+0x390>
   248d6:	bf00      	nop

000248d8 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   248d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   248da:	4d24      	ldr	r5, [pc, #144]	; (2496c <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   248dc:	b08b      	sub	sp, #44	; 0x2c
   248de:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   248e0:	2224      	movs	r2, #36	; 0x24
   248e2:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   248e4:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   248e6:	a801      	add	r0, sp, #4
   248e8:	f012 ff6b 	bl	377c2 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   248ec:	682b      	ldr	r3, [r5, #0]
   248ee:	f44f 7080 	mov.w	r0, #256	; 0x100
   248f2:	4798      	blx	r3
    buffer->length = default_buffer_size;
   248f4:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   248f8:	4603      	mov	r3, r0
    buffer->format = format;
   248fa:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   248fc:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   248fe:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   24900:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   24902:	462f      	mov	r7, r5
   24904:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   24908:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   2490c:	b17b      	cbz	r3, 2492e <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   2490e:	4620      	mov	r0, r4
   24910:	a901      	add	r1, sp, #4
   24912:	f7ff fe0f 	bl	24534 <print_value>
   24916:	b150      	cbz	r0, 2492e <print.constprop.0+0x56>
    update_offset(buffer);
   24918:	a801      	add	r0, sp, #4
   2491a:	f011 f96d 	bl	35bf8 <update_offset>
    if (hooks->reallocate != NULL)
   2491e:	68ae      	ldr	r6, [r5, #8]
   24920:	9903      	ldr	r1, [sp, #12]
   24922:	b15e      	cbz	r6, 2493c <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   24924:	9801      	ldr	r0, [sp, #4]
   24926:	3101      	adds	r1, #1
   24928:	47b0      	blx	r6
        if (printed == NULL) {
   2492a:	4604      	mov	r4, r0
   2492c:	b9d0      	cbnz	r0, 24964 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   2492e:	9c01      	ldr	r4, [sp, #4]
   24930:	b1c4      	cbz	r4, 24964 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   24932:	4620      	mov	r0, r4
   24934:	687b      	ldr	r3, [r7, #4]
   24936:	4798      	blx	r3
    return NULL;
   24938:	2400      	movs	r4, #0
   2493a:	e013      	b.n	24964 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   2493c:	682b      	ldr	r3, [r5, #0]
   2493e:	1c48      	adds	r0, r1, #1
   24940:	4798      	blx	r3
        if (printed == NULL)
   24942:	4604      	mov	r4, r0
   24944:	2800      	cmp	r0, #0
   24946:	d0f2      	beq.n	2492e <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   24948:	9a03      	ldr	r2, [sp, #12]
   2494a:	9b02      	ldr	r3, [sp, #8]
   2494c:	3201      	adds	r2, #1
   2494e:	429a      	cmp	r2, r3
   24950:	bf28      	it	cs
   24952:	461a      	movcs	r2, r3
   24954:	9901      	ldr	r1, [sp, #4]
   24956:	f012 ff14 	bl	37782 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   2495a:	9b03      	ldr	r3, [sp, #12]
   2495c:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   2495e:	686b      	ldr	r3, [r5, #4]
   24960:	9801      	ldr	r0, [sp, #4]
   24962:	4798      	blx	r3
}
   24964:	4620      	mov	r0, r4
   24966:	b00b      	add	sp, #44	; 0x2c
   24968:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2496a:	bf00      	nop
   2496c:	20014a04 	.word	0x20014a04

00024970 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   24970:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   24972:	4605      	mov	r5, r0
   24974:	b170      	cbz	r0, 24994 <cJSON_strdup.isra.0.constprop.0+0x24>
    length = strlen((const char*)string) + sizeof("");
   24976:	f7ec fdc3 	bl	11500 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   2497a:	4b07      	ldr	r3, [pc, #28]	; (24998 <cJSON_strdup.isra.0.constprop.0+0x28>)
    length = strlen((const char*)string) + sizeof("");
   2497c:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   2497e:	4630      	mov	r0, r6
   24980:	681b      	ldr	r3, [r3, #0]
   24982:	4798      	blx	r3
    if (copy == NULL)
   24984:	4604      	mov	r4, r0
   24986:	b118      	cbz	r0, 24990 <cJSON_strdup.isra.0.constprop.0+0x20>
   24988:	4632      	mov	r2, r6
   2498a:	4629      	mov	r1, r5
   2498c:	f012 fef9 	bl	37782 <memcpy>
}
   24990:	4620      	mov	r0, r4
   24992:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   24994:	4604      	mov	r4, r0
   24996:	e7fb      	b.n	24990 <cJSON_strdup.isra.0.constprop.0+0x20>
   24998:	20014a04 	.word	0x20014a04

0002499c <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   2499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2499e:	460d      	mov	r5, r1
   249a0:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   249a2:	4607      	mov	r7, r0
   249a4:	b300      	cbz	r0, 249e8 <add_item_to_object.constprop.0+0x4c>
   249a6:	b1f9      	cbz	r1, 249e8 <add_item_to_object.constprop.0+0x4c>
   249a8:	b1f2      	cbz	r2, 249e8 <add_item_to_object.constprop.0+0x4c>
   249aa:	4290      	cmp	r0, r2
   249ac:	d01c      	beq.n	249e8 <add_item_to_object.constprop.0+0x4c>
    {
        return false;
    }

    if (constant_key)
   249ae:	b193      	cbz	r3, 249d6 <add_item_to_object.constprop.0+0x3a>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   249b0:	68d6      	ldr	r6, [r2, #12]
   249b2:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   249b6:	68e3      	ldr	r3, [r4, #12]
   249b8:	059b      	lsls	r3, r3, #22
   249ba:	d404      	bmi.n	249c6 <add_item_to_object.constprop.0+0x2a>
   249bc:	6a20      	ldr	r0, [r4, #32]
   249be:	b110      	cbz	r0, 249c6 <add_item_to_object.constprop.0+0x2a>
    {
        hooks->deallocate(item->string);
   249c0:	4b0a      	ldr	r3, [pc, #40]	; (249ec <add_item_to_object.constprop.0+0x50>)
   249c2:	685b      	ldr	r3, [r3, #4]
   249c4:	4798      	blx	r3
    }

    item->string = new_key;
    item->type = new_type;

    return add_item_to_array(object, item);
   249c6:	4621      	mov	r1, r4
   249c8:	4638      	mov	r0, r7
    item->string = new_key;
   249ca:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   249cc:	60e6      	str	r6, [r4, #12]
}
   249ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   249d2:	f011 b91e 	b.w	35c12 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   249d6:	4608      	mov	r0, r1
   249d8:	f7ff ffca 	bl	24970 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   249dc:	4605      	mov	r5, r0
   249de:	b118      	cbz	r0, 249e8 <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   249e0:	68e6      	ldr	r6, [r4, #12]
   249e2:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   249e6:	e7e6      	b.n	249b6 <add_item_to_object.constprop.0+0x1a>
}
   249e8:	2000      	movs	r0, #0
   249ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   249ec:	20014a04 	.word	0x20014a04

000249f0 <cJSON_Delete>:
{
   249f0:	b570      	push	{r4, r5, r6, lr}
   249f2:	4604      	mov	r4, r0
   249f4:	4d0f      	ldr	r5, [pc, #60]	; (24a34 <cJSON_Delete+0x44>)
    while (item != NULL)
   249f6:	b904      	cbnz	r4, 249fa <cJSON_Delete+0xa>
}
   249f8:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   249fa:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   249fc:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   249fe:	05d9      	lsls	r1, r3, #23
   24a00:	d403      	bmi.n	24a0a <cJSON_Delete+0x1a>
   24a02:	68a0      	ldr	r0, [r4, #8]
   24a04:	b968      	cbnz	r0, 24a22 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   24a06:	6920      	ldr	r0, [r4, #16]
   24a08:	b988      	cbnz	r0, 24a2e <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   24a0a:	68e3      	ldr	r3, [r4, #12]
   24a0c:	059b      	lsls	r3, r3, #22
   24a0e:	d403      	bmi.n	24a18 <cJSON_Delete+0x28>
   24a10:	6a20      	ldr	r0, [r4, #32]
   24a12:	b108      	cbz	r0, 24a18 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   24a14:	686b      	ldr	r3, [r5, #4]
   24a16:	4798      	blx	r3
        global_hooks.deallocate(item);
   24a18:	4620      	mov	r0, r4
   24a1a:	686b      	ldr	r3, [r5, #4]
   24a1c:	4798      	blx	r3
        item = next;
   24a1e:	4634      	mov	r4, r6
   24a20:	e7e9      	b.n	249f6 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   24a22:	f7ff ffe5 	bl	249f0 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   24a26:	68e3      	ldr	r3, [r4, #12]
   24a28:	05da      	lsls	r2, r3, #23
   24a2a:	d5ec      	bpl.n	24a06 <cJSON_Delete+0x16>
   24a2c:	e7ed      	b.n	24a0a <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   24a2e:	686b      	ldr	r3, [r5, #4]
   24a30:	4798      	blx	r3
   24a32:	e7ea      	b.n	24a0a <cJSON_Delete+0x1a>
   24a34:	20014a04 	.word	0x20014a04

00024a38 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   24a38:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24a3a:	4b0a      	ldr	r3, [pc, #40]	; (24a64 <cJSON_CreateString+0x2c>)
{
   24a3c:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   24a3e:	6818      	ldr	r0, [r3, #0]
   24a40:	f011 f93c 	bl	35cbc <cJSON_New_Item.isra.0>
    if(item)
   24a44:	4604      	mov	r4, r0
   24a46:	b158      	cbz	r0, 24a60 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   24a48:	2310      	movs	r3, #16
   24a4a:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   24a4c:	4628      	mov	r0, r5
   24a4e:	f7ff ff8f 	bl	24970 <cJSON_strdup.isra.0.constprop.0>
   24a52:	4605      	mov	r5, r0
   24a54:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   24a56:	b918      	cbnz	r0, 24a60 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   24a58:	4620      	mov	r0, r4
   24a5a:	f7ff ffc9 	bl	249f0 <cJSON_Delete>
            return NULL;
   24a5e:	462c      	mov	r4, r5
        }
    }

    return item;
}
   24a60:	4620      	mov	r0, r4
   24a62:	bd38      	pop	{r3, r4, r5, pc}
   24a64:	20014a04 	.word	0x20014a04

00024a68 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   24a68:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24a6a:	4b04      	ldr	r3, [pc, #16]	; (24a7c <cJSON_CreateObject+0x14>)
   24a6c:	6818      	ldr	r0, [r3, #0]
   24a6e:	f011 f925 	bl	35cbc <cJSON_New_Item.isra.0>
    if (item)
   24a72:	b108      	cbz	r0, 24a78 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   24a74:	2340      	movs	r3, #64	; 0x40
   24a76:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   24a78:	bd08      	pop	{r3, pc}
   24a7a:	bf00      	nop
   24a7c:	20014a04 	.word	0x20014a04

00024a80 <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   24a80:	4b01      	ldr	r3, [pc, #4]	; (24a88 <SystemInit+0x8>)
   24a82:	4a02      	ldr	r2, [pc, #8]	; (24a8c <SystemInit+0xc>)
   24a84:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   24a86:	4770      	bx	lr
   24a88:	20014a10 	.word	0x20014a10
   24a8c:	03d09000 	.word	0x03d09000

00024a90 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   24a90:	b508      	push	{r3, lr}
    switch (domain)
   24a92:	b178      	cbz	r0, 24ab4 <nrf_clock_is_running.constprop.0+0x24>
   24a94:	2801      	cmp	r0, #1
   24a96:	d019      	beq.n	24acc <nrf_clock_is_running.constprop.0+0x3c>
            NRFX_ASSERT(0);
   24a98:	f44f 734f 	mov.w	r3, #828	; 0x33c
   24a9c:	4a10      	ldr	r2, [pc, #64]	; (24ae0 <nrf_clock_is_running.constprop.0+0x50>)
   24a9e:	4911      	ldr	r1, [pc, #68]	; (24ae4 <nrf_clock_is_running.constprop.0+0x54>)
   24aa0:	4811      	ldr	r0, [pc, #68]	; (24ae8 <nrf_clock_is_running.constprop.0+0x58>)
   24aa2:	f00b f8e5 	bl	2fc70 <printk>
   24aa6:	480e      	ldr	r0, [pc, #56]	; (24ae0 <nrf_clock_is_running.constprop.0+0x50>)
   24aa8:	f44f 714f 	mov.w	r1, #828	; 0x33c
   24aac:	f00b fbc6 	bl	3023c <assert_post_action>
            return false;
   24ab0:	2000      	movs	r0, #0
   24ab2:	e00a      	b.n	24aca <nrf_clock_is_running.constprop.0+0x3a>
            if (p_clk_src != NULL)
   24ab4:	4a0d      	ldr	r2, [pc, #52]	; (24aec <nrf_clock_is_running.constprop.0+0x5c>)
   24ab6:	b121      	cbz	r1, 24ac2 <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   24ab8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   24abc:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   24ac0:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   24ac2:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24ac6:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   24aca:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   24acc:	4a07      	ldr	r2, [pc, #28]	; (24aec <nrf_clock_is_running.constprop.0+0x5c>)
   24ace:	b121      	cbz	r1, 24ada <nrf_clock_is_running.constprop.0+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   24ad0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   24ad4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   24ad8:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24ada:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   24ade:	e7f2      	b.n	24ac6 <nrf_clock_is_running.constprop.0+0x36>
   24ae0:	0003f5cb 	.word	0x0003f5cb
   24ae4:	00040e81 	.word	0x00040e81
   24ae8:	0003a56b 	.word	0x0003a56b
   24aec:	40005000 	.word	0x40005000

00024af0 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   24af0:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   24af2:	4604      	mov	r4, r0
   24af4:	b948      	cbnz	r0, 24b0a <nrfx_clock_init+0x1a>
   24af6:	490a      	ldr	r1, [pc, #40]	; (24b20 <nrfx_clock_init+0x30>)
   24af8:	480a      	ldr	r0, [pc, #40]	; (24b24 <nrfx_clock_init+0x34>)
   24afa:	23b5      	movs	r3, #181	; 0xb5
   24afc:	4a0a      	ldr	r2, [pc, #40]	; (24b28 <nrfx_clock_init+0x38>)
   24afe:	f00b f8b7 	bl	2fc70 <printk>
   24b02:	21b5      	movs	r1, #181	; 0xb5
   24b04:	4808      	ldr	r0, [pc, #32]	; (24b28 <nrfx_clock_init+0x38>)
   24b06:	f00b fb99 	bl	3023c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   24b0a:	4b08      	ldr	r3, [pc, #32]	; (24b2c <nrfx_clock_init+0x3c>)
   24b0c:	791a      	ldrb	r2, [r3, #4]
   24b0e:	b922      	cbnz	r2, 24b1a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   24b10:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   24b12:	4807      	ldr	r0, [pc, #28]	; (24b30 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   24b14:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   24b16:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   24b18:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   24b1a:	4806      	ldr	r0, [pc, #24]	; (24b34 <nrfx_clock_init+0x44>)
    return err_code;
   24b1c:	e7fc      	b.n	24b18 <nrfx_clock_init+0x28>
   24b1e:	bf00      	nop
   24b20:	0003f918 	.word	0x0003f918
   24b24:	0003a56b 	.word	0x0003a56b
   24b28:	0003f5ff 	.word	0x0003f5ff
   24b2c:	200168c0 	.word	0x200168c0
   24b30:	0bad0000 	.word	0x0bad0000
   24b34:	0bad000c 	.word	0x0bad000c

00024b38 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   24b38:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   24b3a:	4b0b      	ldr	r3, [pc, #44]	; (24b68 <nrfx_clock_enable+0x30>)
   24b3c:	791b      	ldrb	r3, [r3, #4]
   24b3e:	b94b      	cbnz	r3, 24b54 <nrfx_clock_enable+0x1c>
   24b40:	490a      	ldr	r1, [pc, #40]	; (24b6c <nrfx_clock_enable+0x34>)
   24b42:	480b      	ldr	r0, [pc, #44]	; (24b70 <nrfx_clock_enable+0x38>)
   24b44:	23ce      	movs	r3, #206	; 0xce
   24b46:	4a0b      	ldr	r2, [pc, #44]	; (24b74 <nrfx_clock_enable+0x3c>)
   24b48:	f00b f892 	bl	2fc70 <printk>
   24b4c:	21ce      	movs	r1, #206	; 0xce
   24b4e:	4809      	ldr	r0, [pc, #36]	; (24b74 <nrfx_clock_enable+0x3c>)
   24b50:	f00b fb74 	bl	3023c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   24b54:	2005      	movs	r0, #5
   24b56:	f7f2 fd5b 	bl	17610 <arch_irq_is_enabled>
   24b5a:	b920      	cbnz	r0, 24b66 <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   24b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   24b60:	2005      	movs	r0, #5
   24b62:	f7f2 bd31 	b.w	175c8 <arch_irq_enable>
   24b66:	bd08      	pop	{r3, pc}
   24b68:	200168c0 	.word	0x200168c0
   24b6c:	0003f63c 	.word	0x0003f63c
   24b70:	0003a56b 	.word	0x0003a56b
   24b74:	0003f5ff 	.word	0x0003f5ff

00024b78 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   24b78:	4b22      	ldr	r3, [pc, #136]	; (24c04 <nrfx_clock_start+0x8c>)
{
   24b7a:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   24b7c:	791b      	ldrb	r3, [r3, #4]
{
   24b7e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   24b80:	b95b      	cbnz	r3, 24b9a <nrfx_clock_start+0x22>
   24b82:	4921      	ldr	r1, [pc, #132]	; (24c08 <nrfx_clock_start+0x90>)
   24b84:	4821      	ldr	r0, [pc, #132]	; (24c0c <nrfx_clock_start+0x94>)
   24b86:	f44f 7385 	mov.w	r3, #266	; 0x10a
   24b8a:	4a21      	ldr	r2, [pc, #132]	; (24c10 <nrfx_clock_start+0x98>)
   24b8c:	f00b f870 	bl	2fc70 <printk>
   24b90:	f44f 7185 	mov.w	r1, #266	; 0x10a
   24b94:	481e      	ldr	r0, [pc, #120]	; (24c10 <nrfx_clock_start+0x98>)
   24b96:	f00b fb51 	bl	3023c <assert_post_action>
    switch (domain)
   24b9a:	b174      	cbz	r4, 24bba <nrfx_clock_start+0x42>
   24b9c:	2c01      	cmp	r4, #1
   24b9e:	d027      	beq.n	24bf0 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   24ba0:	f44f 739e 	mov.w	r3, #316	; 0x13c
   24ba4:	4a1a      	ldr	r2, [pc, #104]	; (24c10 <nrfx_clock_start+0x98>)
   24ba6:	491b      	ldr	r1, [pc, #108]	; (24c14 <nrfx_clock_start+0x9c>)
   24ba8:	4818      	ldr	r0, [pc, #96]	; (24c0c <nrfx_clock_start+0x94>)
   24baa:	f00b f861 	bl	2fc70 <printk>
   24bae:	f44f 719e 	mov.w	r1, #316	; 0x13c
   24bb2:	4817      	ldr	r0, [pc, #92]	; (24c10 <nrfx_clock_start+0x98>)
   24bb4:	f00b fb42 	bl	3023c <assert_post_action>
            break;
    }
}
   24bb8:	e016      	b.n	24be8 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   24bba:	4620      	mov	r0, r4
   24bbc:	f10d 0107 	add.w	r1, sp, #7
   24bc0:	f7ff ff66 	bl	24a90 <nrf_clock_is_running.constprop.0>
   24bc4:	4b14      	ldr	r3, [pc, #80]	; (24c18 <nrfx_clock_start+0xa0>)
   24bc6:	b188      	cbz	r0, 24bec <nrfx_clock_start+0x74>
   24bc8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24bcc:	2a02      	cmp	r2, #2
   24bce:	d10d      	bne.n	24bec <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   24bd0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24bd4:	2200      	movs	r2, #0
   24bd6:	4b11      	ldr	r3, [pc, #68]	; (24c1c <nrfx_clock_start+0xa4>)
   24bd8:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   24bda:	2202      	movs	r2, #2
   24bdc:	681b      	ldr	r3, [r3, #0]
   24bde:	4b0e      	ldr	r3, [pc, #56]	; (24c18 <nrfx_clock_start+0xa0>)
   24be0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24be4:	2201      	movs	r2, #1
   24be6:	609a      	str	r2, [r3, #8]
}
   24be8:	b002      	add	sp, #8
   24bea:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   24bec:	2201      	movs	r2, #1
   24bee:	e7ef      	b.n	24bd0 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24bf0:	2200      	movs	r2, #0
   24bf2:	4b0b      	ldr	r3, [pc, #44]	; (24c20 <nrfx_clock_start+0xa8>)
   24bf4:	601a      	str	r2, [r3, #0]
   24bf6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   24bf8:	4b07      	ldr	r3, [pc, #28]	; (24c18 <nrfx_clock_start+0xa0>)
   24bfa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24bfe:	601c      	str	r4, [r3, #0]
}
   24c00:	e7f2      	b.n	24be8 <nrfx_clock_start+0x70>
   24c02:	bf00      	nop
   24c04:	200168c0 	.word	0x200168c0
   24c08:	0003f63c 	.word	0x0003f63c
   24c0c:	0003a56b 	.word	0x0003a56b
   24c10:	0003f5ff 	.word	0x0003f5ff
   24c14:	00040e81 	.word	0x00040e81
   24c18:	40005000 	.word	0x40005000
   24c1c:	40005104 	.word	0x40005104
   24c20:	40005100 	.word	0x40005100

00024c24 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   24c24:	4b2d      	ldr	r3, [pc, #180]	; (24cdc <nrfx_clock_stop+0xb8>)
{
   24c26:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   24c28:	791b      	ldrb	r3, [r3, #4]
{
   24c2a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   24c2c:	b95b      	cbnz	r3, 24c46 <nrfx_clock_stop+0x22>
   24c2e:	492c      	ldr	r1, [pc, #176]	; (24ce0 <nrfx_clock_stop+0xbc>)
   24c30:	482c      	ldr	r0, [pc, #176]	; (24ce4 <nrfx_clock_stop+0xc0>)
   24c32:	f240 1343 	movw	r3, #323	; 0x143
   24c36:	4a2c      	ldr	r2, [pc, #176]	; (24ce8 <nrfx_clock_stop+0xc4>)
   24c38:	f00b f81a 	bl	2fc70 <printk>
   24c3c:	f240 1143 	movw	r1, #323	; 0x143
   24c40:	4829      	ldr	r0, [pc, #164]	; (24ce8 <nrfx_clock_stop+0xc4>)
   24c42:	f00b fafb 	bl	3023c <assert_post_action>
    switch (domain)
   24c46:	b17c      	cbz	r4, 24c68 <nrfx_clock_stop+0x44>
   24c48:	2c01      	cmp	r4, #1
   24c4a:	d027      	beq.n	24c9c <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   24c4c:	4927      	ldr	r1, [pc, #156]	; (24cec <nrfx_clock_stop+0xc8>)
   24c4e:	4825      	ldr	r0, [pc, #148]	; (24ce4 <nrfx_clock_stop+0xc0>)
   24c50:	f240 135f 	movw	r3, #351	; 0x15f
   24c54:	4a24      	ldr	r2, [pc, #144]	; (24ce8 <nrfx_clock_stop+0xc4>)
   24c56:	f00b f80b 	bl	2fc70 <printk>
   24c5a:	f240 115f 	movw	r1, #351	; 0x15f
   24c5e:	4822      	ldr	r0, [pc, #136]	; (24ce8 <nrfx_clock_stop+0xc4>)
   24c60:	f00b faec 	bl	3023c <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   24c64:	b002      	add	sp, #8
   24c66:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   24c68:	2202      	movs	r2, #2
   24c6a:	4b21      	ldr	r3, [pc, #132]	; (24cf0 <nrfx_clock_stop+0xcc>)
   24c6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24c70:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24c72:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24c76:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24c7a:	f503 7382 	add.w	r3, r3, #260	; 0x104
   24c7e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24c80:	4b1c      	ldr	r3, [pc, #112]	; (24cf4 <nrfx_clock_stop+0xd0>)
   24c82:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   24c84:	2100      	movs	r1, #0
   24c86:	4608      	mov	r0, r1
   24c88:	f7ff ff02 	bl	24a90 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   24c8c:	2800      	cmp	r0, #0
   24c8e:	d0e9      	beq.n	24c64 <nrfx_clock_stop+0x40>
   24c90:	2001      	movs	r0, #1
   24c92:	f011 f838 	bl	35d06 <nrfx_busy_wait>
   24c96:	3c01      	subs	r4, #1
   24c98:	d1f4      	bne.n	24c84 <nrfx_clock_stop+0x60>
   24c9a:	e7e3      	b.n	24c64 <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24c9c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   24c9e:	4b14      	ldr	r3, [pc, #80]	; (24cf0 <nrfx_clock_stop+0xcc>)
   24ca0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ca4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   24ca8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   24cac:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24cae:	4b12      	ldr	r3, [pc, #72]	; (24cf8 <nrfx_clock_stop+0xd4>)
   24cb0:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   24cb2:	f88d 4007 	strb.w	r4, [sp, #7]
   24cb6:	f242 7410 	movw	r4, #10000	; 0x2710
   24cba:	2001      	movs	r0, #1
   24cbc:	f10d 0107 	add.w	r1, sp, #7
   24cc0:	f7ff fee6 	bl	24a90 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   24cc4:	2800      	cmp	r0, #0
   24cc6:	d0cd      	beq.n	24c64 <nrfx_clock_stop+0x40>
   24cc8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   24ccc:	2801      	cmp	r0, #1
   24cce:	d1c9      	bne.n	24c64 <nrfx_clock_stop+0x40>
   24cd0:	f011 f819 	bl	35d06 <nrfx_busy_wait>
   24cd4:	3c01      	subs	r4, #1
   24cd6:	d1f0      	bne.n	24cba <nrfx_clock_stop+0x96>
   24cd8:	e7c4      	b.n	24c64 <nrfx_clock_stop+0x40>
   24cda:	bf00      	nop
   24cdc:	200168c0 	.word	0x200168c0
   24ce0:	0003f63c 	.word	0x0003f63c
   24ce4:	0003a56b 	.word	0x0003a56b
   24ce8:	0003f5ff 	.word	0x0003f5ff
   24cec:	00040e81 	.word	0x00040e81
   24cf0:	40005000 	.word	0x40005000
   24cf4:	4000500c 	.word	0x4000500c
   24cf8:	40005004 	.word	0x40005004

00024cfc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   24cfc:	4b15      	ldr	r3, [pc, #84]	; (24d54 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   24cfe:	b507      	push	{r0, r1, r2, lr}
   24d00:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   24d02:	b14a      	cbz	r2, 24d18 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24d04:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   24d06:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24d08:	6018      	str	r0, [r3, #0]
   24d0a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   24d0c:	4b12      	ldr	r3, [pc, #72]	; (24d58 <nrfx_power_clock_irq_handler+0x5c>)
   24d0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   24d12:	4b12      	ldr	r3, [pc, #72]	; (24d5c <nrfx_power_clock_irq_handler+0x60>)
   24d14:	681b      	ldr	r3, [r3, #0]
   24d16:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   24d18:	4b11      	ldr	r3, [pc, #68]	; (24d60 <nrfx_power_clock_irq_handler+0x64>)
   24d1a:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   24d1c:	b17a      	cbz	r2, 24d3e <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24d1e:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   24d20:	f10d 0107 	add.w	r1, sp, #7
   24d24:	6018      	str	r0, [r3, #0]
   24d26:	681b      	ldr	r3, [r3, #0]
   24d28:	f7ff feb2 	bl	24a90 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   24d2c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   24d30:	2202      	movs	r2, #2
   24d32:	2901      	cmp	r1, #1
   24d34:	4b08      	ldr	r3, [pc, #32]	; (24d58 <nrfx_power_clock_irq_handler+0x5c>)
   24d36:	d105      	bne.n	24d44 <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   24d38:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24d3c:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   24d3e:	b003      	add	sp, #12
   24d40:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   24d44:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   24d48:	4b04      	ldr	r3, [pc, #16]	; (24d5c <nrfx_power_clock_irq_handler+0x60>)
   24d4a:	2001      	movs	r0, #1
   24d4c:	681b      	ldr	r3, [r3, #0]
   24d4e:	4798      	blx	r3
}
   24d50:	e7f5      	b.n	24d3e <nrfx_power_clock_irq_handler+0x42>
   24d52:	bf00      	nop
   24d54:	40005100 	.word	0x40005100
   24d58:	40005000 	.word	0x40005000
   24d5c:	200168c0 	.word	0x200168c0
   24d60:	40005104 	.word	0x40005104

00024d64 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   24d64:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   24d66:	f04f 0320 	mov.w	r3, #32
   24d6a:	f3ef 8711 	mrs	r7, BASEPRI
   24d6e:	f383 8811 	msr	BASEPRI, r3
   24d72:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   24d76:	4a0d      	ldr	r2, [pc, #52]	; (24dac <nrfx_dppi_channel_alloc+0x48>)
   24d78:	6816      	ldr	r6, [r2, #0]
   24d7a:	43f1      	mvns	r1, r6
   24d7c:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   24d7e:	b191      	cbz	r1, 24da6 <nrfx_dppi_channel_alloc+0x42>
   24d80:	2500      	movs	r5, #0
   24d82:	b2ec      	uxtb	r4, r5
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   24d84:	fa21 f304 	lsr.w	r3, r1, r4
   24d88:	07db      	lsls	r3, r3, #31
   24d8a:	f105 0501 	add.w	r5, r5, #1
   24d8e:	d5f8      	bpl.n	24d82 <nrfx_dppi_channel_alloc+0x1e>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   24d90:	2301      	movs	r3, #1
   24d92:	40a3      	lsls	r3, r4
   24d94:	4333      	orrs	r3, r6
        *p_channel = channel;
   24d96:	7004      	strb	r4, [r0, #0]

        err_code = NRFX_SUCCESS;
   24d98:	4805      	ldr	r0, [pc, #20]	; (24db0 <nrfx_dppi_channel_alloc+0x4c>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
   24d9a:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   24d9c:	f387 8811 	msr	BASEPRI, r7
   24da0:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
   24da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
   24da6:	4803      	ldr	r0, [pc, #12]	; (24db4 <nrfx_dppi_channel_alloc+0x50>)
   24da8:	e7f8      	b.n	24d9c <nrfx_dppi_channel_alloc+0x38>
   24daa:	bf00      	nop
   24dac:	200168c8 	.word	0x200168c8
   24db0:	0bad0000 	.word	0x0bad0000
   24db4:	0bad0002 	.word	0x0bad0002

00024db8 <nrfx_dppi_channel_enable>:
    return ((m_allocated_channels & DPPI_BIT_SET(channel)) != 0);
   24db8:	4b07      	ldr	r3, [pc, #28]	; (24dd8 <nrfx_dppi_channel_enable+0x20>)
   24dba:	681b      	ldr	r3, [r3, #0]
   24dbc:	40c3      	lsrs	r3, r0

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!channel_is_allocated(channel))
   24dbe:	07db      	lsls	r3, r3, #31
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   24dc0:	bf41      	itttt	mi
   24dc2:	2301      	movmi	r3, #1
   24dc4:	fa03 f000 	lslmi.w	r0, r3, r0
   24dc8:	4b04      	ldrmi	r3, [pc, #16]	; (24ddc <nrfx_dppi_channel_enable+0x24>)
   24dca:	f8c3 0504 	strmi.w	r0, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
   24dce:	bf4c      	ite	mi
   24dd0:	4803      	ldrmi	r0, [pc, #12]	; (24de0 <nrfx_dppi_channel_enable+0x28>)
        err_code = NRFX_ERROR_INVALID_PARAM;
   24dd2:	4804      	ldrpl	r0, [pc, #16]	; (24de4 <nrfx_dppi_channel_enable+0x2c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   24dd4:	4770      	bx	lr
   24dd6:	bf00      	nop
   24dd8:	200168c8 	.word	0x200168c8
   24ddc:	40017000 	.word	0x40017000
   24de0:	0bad0000 	.word	0x0bad0000
   24de4:	0bad0004 	.word	0x0bad0004

00024de8 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   24de8:	2301      	movs	r3, #1
   24dea:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   24dee:	f010 0fff 	tst.w	r0, #255	; 0xff
   24df2:	d012      	beq.n	24e1a <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   24df4:	f04f 0320 	mov.w	r3, #32
   24df8:	f3ef 8111 	mrs	r1, BASEPRI
   24dfc:	f383 8811 	msr	BASEPRI, r3
   24e00:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   24e04:	4a06      	ldr	r2, [pc, #24]	; (24e20 <nrfx_gpiote_channel_free+0x38>)
   24e06:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   24e08:	ea23 0000 	bic.w	r0, r3, r0
   24e0c:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   24e0e:	f381 8811 	msr	BASEPRI, r1
   24e12:	f3bf 8f6f 	isb	sy
   24e16:	4803      	ldr	r0, [pc, #12]	; (24e24 <nrfx_gpiote_channel_free+0x3c>)
   24e18:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   24e1a:	4803      	ldr	r0, [pc, #12]	; (24e28 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   24e1c:	4770      	bx	lr
   24e1e:	bf00      	nop
   24e20:	200168cc 	.word	0x200168cc
   24e24:	0bad0000 	.word	0x0bad0000
   24e28:	0bad0004 	.word	0x0bad0004

00024e2c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   24e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   24e30:	22ff      	movs	r2, #255	; 0xff
{
   24e32:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   24e34:	2601      	movs	r6, #1
{
   24e36:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   24e38:	f8df e058 	ldr.w	lr, [pc, #88]	; 24e94 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   24e3c:	4814      	ldr	r0, [pc, #80]	; (24e90 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   24e3e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 24e98 <nrfx_gpiote_channel_alloc+0x6c>
   24e42:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   24e44:	f04f 0120 	mov.w	r1, #32
   24e48:	f3ef 8c11 	mrs	ip, BASEPRI
   24e4c:	f381 8811 	msr	BASEPRI, r1
   24e50:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   24e54:	fa22 f103 	lsr.w	r1, r2, r3
   24e58:	07c9      	lsls	r1, r1, #31
   24e5a:	d50a      	bpl.n	24e72 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   24e5c:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   24e60:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   24e64:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   24e66:	bf01      	itttt	eq
   24e68:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   24e6a:	4339      	orreq	r1, r7
   24e6c:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
   24e70:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   24e72:	f38c 8811 	msr	BASEPRI, ip
   24e76:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   24e7a:	4540      	cmp	r0, r8
   24e7c:	d005      	beq.n	24e8a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   24e7e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   24e82:	439a      	bics	r2, r3
   24e84:	f104 0401 	add.w	r4, r4, #1
   24e88:	d1db      	bne.n	24e42 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   24e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24e8e:	bf00      	nop
   24e90:	0bad0002 	.word	0x0bad0002
   24e94:	200168cc 	.word	0x200168cc
   24e98:	0bad0000 	.word	0x0bad0000

00024e9c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   24e9c:	b570      	push	{r4, r5, r6, lr}
   24e9e:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   24ea0:	460d      	mov	r5, r1
   24ea2:	b949      	cbnz	r1, 24eb8 <nrfx_ipc_init+0x1c>
   24ea4:	490b      	ldr	r1, [pc, #44]	; (24ed4 <nrfx_ipc_init+0x38>)
   24ea6:	480c      	ldr	r0, [pc, #48]	; (24ed8 <nrfx_ipc_init+0x3c>)
   24ea8:	2334      	movs	r3, #52	; 0x34
   24eaa:	4a0c      	ldr	r2, [pc, #48]	; (24edc <nrfx_ipc_init+0x40>)
   24eac:	f00a fee0 	bl	2fc70 <printk>
   24eb0:	2134      	movs	r1, #52	; 0x34
   24eb2:	480a      	ldr	r0, [pc, #40]	; (24edc <nrfx_ipc_init+0x40>)
   24eb4:	f00b f9c2 	bl	3023c <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   24eb8:	4c09      	ldr	r4, [pc, #36]	; (24ee0 <nrfx_ipc_init+0x44>)
   24eba:	7923      	ldrb	r3, [r4, #4]
   24ebc:	b943      	cbnz	r3, 24ed0 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   24ebe:	202a      	movs	r0, #42	; 0x2a
   24ec0:	f7f2 fb82 	bl	175c8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   24ec4:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   24ec6:	4807      	ldr	r0, [pc, #28]	; (24ee4 <nrfx_ipc_init+0x48>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   24ec8:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   24eca:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   24ecc:	60a6      	str	r6, [r4, #8]
}
   24ece:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   24ed0:	4805      	ldr	r0, [pc, #20]	; (24ee8 <nrfx_ipc_init+0x4c>)
   24ed2:	e7fc      	b.n	24ece <nrfx_ipc_init+0x32>
   24ed4:	0003f8cd 	.word	0x0003f8cd
   24ed8:	0003a56b 	.word	0x0003a56b
   24edc:	0003f65a 	.word	0x0003f65a
   24ee0:	2001691c 	.word	0x2001691c
   24ee4:	0bad0000 	.word	0x0bad0000
   24ee8:	0bad000c 	.word	0x0bad000c

00024eec <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   24eec:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   24eee:	4604      	mov	r4, r0
   24ef0:	b948      	cbnz	r0, 24f06 <nrfx_ipc_config_load+0x1a>
   24ef2:	491a      	ldr	r1, [pc, #104]	; (24f5c <nrfx_ipc_config_load+0x70>)
   24ef4:	481a      	ldr	r0, [pc, #104]	; (24f60 <nrfx_ipc_config_load+0x74>)
   24ef6:	2346      	movs	r3, #70	; 0x46
   24ef8:	4a1a      	ldr	r2, [pc, #104]	; (24f64 <nrfx_ipc_config_load+0x78>)
   24efa:	f00a feb9 	bl	2fc70 <printk>
   24efe:	2146      	movs	r1, #70	; 0x46
   24f00:	4818      	ldr	r0, [pc, #96]	; (24f64 <nrfx_ipc_config_load+0x78>)
   24f02:	f00b f99b 	bl	3023c <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   24f06:	4b18      	ldr	r3, [pc, #96]	; (24f68 <nrfx_ipc_config_load+0x7c>)
   24f08:	791b      	ldrb	r3, [r3, #4]
   24f0a:	2b01      	cmp	r3, #1
   24f0c:	d009      	beq.n	24f22 <nrfx_ipc_config_load+0x36>
   24f0e:	4917      	ldr	r1, [pc, #92]	; (24f6c <nrfx_ipc_config_load+0x80>)
   24f10:	4813      	ldr	r0, [pc, #76]	; (24f60 <nrfx_ipc_config_load+0x74>)
   24f12:	2347      	movs	r3, #71	; 0x47
   24f14:	4a13      	ldr	r2, [pc, #76]	; (24f64 <nrfx_ipc_config_load+0x78>)
   24f16:	f00a feab 	bl	2fc70 <printk>
   24f1a:	2147      	movs	r1, #71	; 0x47
   24f1c:	4811      	ldr	r0, [pc, #68]	; (24f64 <nrfx_ipc_config_load+0x78>)
   24f1e:	f00b f98d 	bl	3023c <assert_post_action>
{
   24f22:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   24f24:	4a12      	ldr	r2, [pc, #72]	; (24f70 <nrfx_ipc_config_load+0x84>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   24f26:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   24f2a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   24f2e:	3301      	adds	r3, #1
   24f30:	2b08      	cmp	r3, #8
   24f32:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   24f36:	d1f6      	bne.n	24f26 <nrfx_ipc_config_load+0x3a>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   24f38:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   24f3a:	4a0d      	ldr	r2, [pc, #52]	; (24f70 <nrfx_ipc_config_load+0x84>)
   24f3c:	f104 0120 	add.w	r1, r4, #32
   24f40:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   24f44:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   24f48:	3301      	adds	r3, #1
   24f4a:	2b08      	cmp	r3, #8
   24f4c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   24f50:	d1f6      	bne.n	24f40 <nrfx_ipc_config_load+0x54>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   24f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   24f54:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   24f58:	bd38      	pop	{r3, r4, r5, pc}
   24f5a:	bf00      	nop
   24f5c:	0003f695 	.word	0x0003f695
   24f60:	0003a56b 	.word	0x0003a56b
   24f64:	0003f65a 	.word	0x0003f65a
   24f68:	2001691c 	.word	0x2001691c
   24f6c:	0003f69e 	.word	0x0003f69e
   24f70:	4002a000 	.word	0x4002a000

00024f74 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   24f74:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   24f76:	4c1b      	ldr	r4, [pc, #108]	; (24fe4 <nrfx_ipc_uninit+0x70>)
   24f78:	7922      	ldrb	r2, [r4, #4]
   24f7a:	2a01      	cmp	r2, #1
   24f7c:	d009      	beq.n	24f92 <nrfx_ipc_uninit+0x1e>
   24f7e:	491a      	ldr	r1, [pc, #104]	; (24fe8 <nrfx_ipc_uninit+0x74>)
   24f80:	481a      	ldr	r0, [pc, #104]	; (24fec <nrfx_ipc_uninit+0x78>)
   24f82:	2359      	movs	r3, #89	; 0x59
   24f84:	4a1a      	ldr	r2, [pc, #104]	; (24ff0 <nrfx_ipc_uninit+0x7c>)
   24f86:	f00a fe73 	bl	2fc70 <printk>
   24f8a:	2159      	movs	r1, #89	; 0x59
   24f8c:	4818      	ldr	r0, [pc, #96]	; (24ff0 <nrfx_ipc_uninit+0x7c>)
   24f8e:	f00b f955 	bl	3023c <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   24f92:	2300      	movs	r3, #0
   24f94:	4a17      	ldr	r2, [pc, #92]	; (24ff4 <nrfx_ipc_uninit+0x80>)
   24f96:	4918      	ldr	r1, [pc, #96]	; (24ff8 <nrfx_ipc_uninit+0x84>)
   24f98:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   24f9c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   24fa0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   24fa4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   24fa8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   24fac:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   24fb0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   24fb4:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   24fb8:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   24fbc:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   24fc0:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   24fc4:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   24fc8:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   24fcc:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   24fd0:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   24fd4:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   24fd8:	f04f 32ff 	mov.w	r2, #4294967295
   24fdc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   24fe0:	7123      	strb	r3, [r4, #4]
}
   24fe2:	bd10      	pop	{r4, pc}
   24fe4:	2001691c 	.word	0x2001691c
   24fe8:	0003f69e 	.word	0x0003f69e
   24fec:	0003a56b 	.word	0x0003a56b
   24ff0:	0003f65a 	.word	0x0003f65a
   24ff4:	4002a004 	.word	0x4002a004
   24ff8:	4002a000 	.word	0x4002a000

00024ffc <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   24ffc:	4b16      	ldr	r3, [pc, #88]	; (25058 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   24ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25002:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   25006:	f8df 9060 	ldr.w	r9, [pc, #96]	; 25068 <nrfx_ipc_irq_handler+0x6c>
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   2500a:	4635      	mov	r5, r6
   2500c:	4f13      	ldr	r7, [pc, #76]	; (2505c <nrfx_ipc_irq_handler+0x60>)
   2500e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2506c <nrfx_ipc_irq_handler+0x70>
    while (bitmask)
   25012:	b935      	cbnz	r5, 25022 <nrfx_ipc_irq_handler+0x26>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   25014:	4b12      	ldr	r3, [pc, #72]	; (25060 <nrfx_ipc_irq_handler+0x64>)
   25016:	4630      	mov	r0, r6
}
   25018:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   2501c:	681a      	ldr	r2, [r3, #0]
   2501e:	6899      	ldr	r1, [r3, #8]
   25020:	4710      	bx	r2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   25022:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   25026:	2301      	movs	r3, #1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
   25028:	fab4 f484 	clz	r4, r4
   2502c:	40a3      	lsls	r3, r4
   2502e:	2c07      	cmp	r4, #7
   25030:	ea25 0503 	bic.w	r5, r5, r3
   25034:	d90b      	bls.n	2504e <nrfx_ipc_irq_handler+0x52>
   25036:	4639      	mov	r1, r7
   25038:	4640      	mov	r0, r8
   2503a:	f240 13e7 	movw	r3, #487	; 0x1e7
   2503e:	464a      	mov	r2, r9
   25040:	f00a fe16 	bl	2fc70 <printk>
   25044:	f240 11e7 	movw	r1, #487	; 0x1e7
   25048:	4648      	mov	r0, r9
   2504a:	f00b f8f7 	bl	3023c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2504e:	2200      	movs	r2, #0
   25050:	4b04      	ldr	r3, [pc, #16]	; (25064 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   25052:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25054:	511a      	str	r2, [r3, r4]
}
   25056:	e7dc      	b.n	25012 <nrfx_ipc_irq_handler+0x16>
   25058:	4002a000 	.word	0x4002a000
   2505c:	0003d80e 	.word	0x0003d80e
   25060:	2001691c 	.word	0x2001691c
   25064:	4002a100 	.word	0x4002a100
   25068:	0003f6cb 	.word	0x0003f6cb
   2506c:	0003a56b 	.word	0x0003a56b

00025070 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25070:	6803      	ldr	r3, [r0, #0]
{
   25072:	b510      	push	{r4, lr}
    switch (port)
   25074:	095a      	lsrs	r2, r3, #5
   25076:	bf0c      	ite	eq
   25078:	f04f 32ff 	moveq.w	r2, #4294967295
   2507c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2507e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25082:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25086:	07db      	lsls	r3, r3, #31
{
   25088:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2508a:	d40b      	bmi.n	250a4 <nrf_gpio_pin_port_decode+0x34>
   2508c:	490f      	ldr	r1, [pc, #60]	; (250cc <nrf_gpio_pin_port_decode+0x5c>)
   2508e:	4810      	ldr	r0, [pc, #64]	; (250d0 <nrf_gpio_pin_port_decode+0x60>)
   25090:	f44f 7305 	mov.w	r3, #532	; 0x214
   25094:	4a0f      	ldr	r2, [pc, #60]	; (250d4 <nrf_gpio_pin_port_decode+0x64>)
   25096:	f00a fdeb 	bl	2fc70 <printk>
   2509a:	f44f 7105 	mov.w	r1, #532	; 0x214
   2509e:	480d      	ldr	r0, [pc, #52]	; (250d4 <nrf_gpio_pin_port_decode+0x64>)
   250a0:	f00b f8cc 	bl	3023c <assert_post_action>
    uint32_t pin_number = *p_pin;
   250a4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   250a6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   250aa:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   250ac:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   250ae:	d00b      	beq.n	250c8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   250b0:	4909      	ldr	r1, [pc, #36]	; (250d8 <nrf_gpio_pin_port_decode+0x68>)
   250b2:	4807      	ldr	r0, [pc, #28]	; (250d0 <nrf_gpio_pin_port_decode+0x60>)
   250b4:	f240 2319 	movw	r3, #537	; 0x219
   250b8:	4a06      	ldr	r2, [pc, #24]	; (250d4 <nrf_gpio_pin_port_decode+0x64>)
   250ba:	f00a fdd9 	bl	2fc70 <printk>
   250be:	f240 2119 	movw	r1, #537	; 0x219
   250c2:	4804      	ldr	r0, [pc, #16]	; (250d4 <nrf_gpio_pin_port_decode+0x64>)
   250c4:	f00b f8ba 	bl	3023c <assert_post_action>
}
   250c8:	4804      	ldr	r0, [pc, #16]	; (250dc <nrf_gpio_pin_port_decode+0x6c>)
   250ca:	bd10      	pop	{r4, pc}
   250cc:	0003d086 	.word	0x0003d086
   250d0:	0003a56b 	.word	0x0003a56b
   250d4:	0003d053 	.word	0x0003d053
   250d8:	00040e81 	.word	0x00040e81
   250dc:	40842500 	.word	0x40842500

000250e0 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   250e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250e4:	4681      	mov	r9, r0
   250e6:	4692      	mov	sl, r2
   250e8:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   250ea:	460c      	mov	r4, r1
   250ec:	b959      	cbnz	r1, 25106 <nrfx_spim_init+0x26>
   250ee:	4959      	ldr	r1, [pc, #356]	; (25254 <nrfx_spim_init+0x174>)
   250f0:	4859      	ldr	r0, [pc, #356]	; (25258 <nrfx_spim_init+0x178>)
   250f2:	f44f 7383 	mov.w	r3, #262	; 0x106
   250f6:	4a59      	ldr	r2, [pc, #356]	; (2525c <nrfx_spim_init+0x17c>)
   250f8:	f00a fdba 	bl	2fc70 <printk>
   250fc:	f44f 7183 	mov.w	r1, #262	; 0x106
   25100:	4856      	ldr	r0, [pc, #344]	; (2525c <nrfx_spim_init+0x17c>)
   25102:	f00b f89b 	bl	3023c <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   25106:	2124      	movs	r1, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   25108:	f899 5004 	ldrb.w	r5, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2510c:	4e54      	ldr	r6, [pc, #336]	; (25260 <nrfx_spim_init+0x180>)
   2510e:	4369      	muls	r1, r5
   25110:	1873      	adds	r3, r6, r1
   25112:	7f1a      	ldrb	r2, [r3, #28]
   25114:	2a00      	cmp	r2, #0
   25116:	f040 809b 	bne.w	25250 <nrfx_spim_init+0x170>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   2511a:	f8d9 7000 	ldr.w	r7, [r9]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   2511e:	f846 a001 	str.w	sl, [r6, r1]
    p_cb->p_context = p_context;
   25122:	f8c3 8004 	str.w	r8, [r3, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   25126:	7b23      	ldrb	r3, [r4, #12]
   25128:	7820      	ldrb	r0, [r4, #0]
   2512a:	2b01      	cmp	r3, #1
   2512c:	d87e      	bhi.n	2522c <nrfx_spim_init+0x14c>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   2512e:	f010 fdec 	bl	35d0a <nrf_gpio_pin_clear>
    pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M) ? NRF_GPIO_PIN_H0H1 : NRF_GPIO_PIN_S0S1;
#else
    pin_drive = NRF_GPIO_PIN_S0S1;
#endif

    nrf_gpio_cfg(p_config->sck_pin,
   25132:	7823      	ldrb	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25134:	a801      	add	r0, sp, #4
   25136:	9301      	str	r3, [sp, #4]
   25138:	f7ff ff9a 	bl	25070 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2513c:	2201      	movs	r2, #1
   2513e:	9b01      	ldr	r3, [sp, #4]
   25140:	3380      	adds	r3, #128	; 0x80
   25142:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 pin_drive,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   25146:	f894 8001 	ldrb.w	r8, [r4, #1]
   2514a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   2514e:	d070      	beq.n	25232 <nrfx_spim_init+0x152>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   25150:	4640      	mov	r0, r8
   25152:	f010 fdda 	bl	35d0a <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25156:	a801      	add	r0, sp, #4
   25158:	f8cd 8004 	str.w	r8, [sp, #4]
   2515c:	f7ff ff88 	bl	25070 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   25160:	2203      	movs	r2, #3
   25162:	9b01      	ldr	r3, [sp, #4]
   25164:	3380      	adds	r3, #128	; 0x80
   25166:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   2516a:	f894 a002 	ldrb.w	sl, [r4, #2]
   2516e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   25172:	d061      	beq.n	25238 <nrfx_spim_init+0x158>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25174:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg(miso_pin,
   25176:	f894 b00e 	ldrb.w	fp, [r4, #14]
   2517a:	f8cd a004 	str.w	sl, [sp, #4]
   2517e:	f7ff ff77 	bl	25070 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   25182:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   25184:	ea4f 028b 	mov.w	r2, fp, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   25188:	3380      	adds	r3, #128	; 0x80
   2518a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   2518e:	2324      	movs	r3, #36	; 0x24
   25190:	fb03 6305 	mla	r3, r3, r5, r6
   25194:	78e0      	ldrb	r0, [r4, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   25196:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
   25198:	77d8      	strb	r0, [r3, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2519a:	d013      	beq.n	251c4 <nrfx_spim_init+0xe4>
    {
        if (p_config->ss_active_high)
   2519c:	7923      	ldrb	r3, [r4, #4]
   2519e:	2b00      	cmp	r3, #0
   251a0:	d04d      	beq.n	2523e <nrfx_spim_init+0x15e>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
   251a2:	f010 fdb2 	bl	35d0a <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg(p_config->ss_pin,
   251a6:	78e3      	ldrb	r3, [r4, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   251a8:	a801      	add	r0, sp, #4
   251aa:	9301      	str	r3, [sp, #4]
   251ac:	f7ff ff60 	bl	25070 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   251b0:	2203      	movs	r2, #3
   251b2:	9b01      	ldr	r3, [sp, #4]
   251b4:	3380      	adds	r3, #128	; 0x80
   251b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   251ba:	2324      	movs	r3, #36	; 0x24
   251bc:	fb03 6305 	mla	r3, r3, r5, r6
   251c0:	7922      	ldrb	r2, [r4, #4]
   251c2:	779a      	strb	r2, [r3, #30]

    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   251c4:	7823      	ldrb	r3, [r4, #0]
    p_reg->PSEL.SCK  = sck_pin;
   251c6:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   251ca:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   251cc:	f8c7 850c 	str.w	r8, [r7, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   251d0:	f8c7 a510 	str.w	sl, [r7, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   251d4:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   251d8:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   251da:	7b22      	ldrb	r2, [r4, #12]
   251dc:	3b00      	subs	r3, #0
   251de:	bf18      	it	ne
   251e0:	2301      	movne	r3, #1
    switch (spi_mode)
   251e2:	2a02      	cmp	r2, #2
   251e4:	d02e      	beq.n	25244 <nrfx_spim_init+0x164>
   251e6:	2a03      	cmp	r2, #3
   251e8:	d02f      	beq.n	2524a <nrfx_spim_init+0x16a>
   251ea:	2a01      	cmp	r2, #1
   251ec:	d101      	bne.n	251f2 <nrfx_spim_init+0x112>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   251ee:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   251f2:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   251f6:	79a3      	ldrb	r3, [r4, #6]
   251f8:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   251fc:	2307      	movs	r3, #7
   251fe:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   25202:	2324      	movs	r3, #36	; 0x24
   25204:	436b      	muls	r3, r5
   25206:	58f3      	ldr	r3, [r6, r3]
   25208:	b12b      	cbz	r3, 25216 <nrfx_spim_init+0x136>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2520a:	f8d9 0000 	ldr.w	r0, [r9]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2520e:	f340 3007 	sbfx	r0, r0, #12, #8
   25212:	f7f2 f9d9 	bl	175c8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   25216:	2324      	movs	r3, #36	; 0x24
   25218:	fb03 6505 	mla	r5, r3, r5, r6
   2521c:	2300      	movs	r3, #0
   2521e:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   25220:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   25222:	4810      	ldr	r0, [pc, #64]	; (25264 <nrfx_spim_init+0x184>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   25224:	772b      	strb	r3, [r5, #28]
}
   25226:	b003      	add	sp, #12
   25228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   2522c:	f010 fd79 	bl	35d22 <nrf_gpio_pin_set>
   25230:	e77f      	b.n	25132 <nrfx_spim_init+0x52>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   25232:	f04f 38ff 	mov.w	r8, #4294967295
   25236:	e798      	b.n	2516a <nrfx_spim_init+0x8a>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   25238:	f04f 3aff 	mov.w	sl, #4294967295
   2523c:	e7a7      	b.n	2518e <nrfx_spim_init+0xae>
            nrf_gpio_pin_set(p_config->ss_pin);
   2523e:	f010 fd70 	bl	35d22 <nrf_gpio_pin_set>
   25242:	e7b0      	b.n	251a6 <nrfx_spim_init+0xc6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   25244:	f043 0304 	orr.w	r3, r3, #4
        break;
   25248:	e7d3      	b.n	251f2 <nrfx_spim_init+0x112>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2524a:	f043 0306 	orr.w	r3, r3, #6
        break;
   2524e:	e7d0      	b.n	251f2 <nrfx_spim_init+0x112>
        return err_code;
   25250:	4805      	ldr	r0, [pc, #20]	; (25268 <nrfx_spim_init+0x188>)
   25252:	e7e8      	b.n	25226 <nrfx_spim_init+0x146>
   25254:	0003f695 	.word	0x0003f695
   25258:	0003a56b 	.word	0x0003a56b
   2525c:	0003f6fd 	.word	0x0003f6fd
   25260:	20016928 	.word	0x20016928
   25264:	0bad0000 	.word	0x0bad0000
   25268:	0bad0005 	.word	0x0bad0005

0002526c <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2526c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   25270:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   25272:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   25274:	4f6f      	ldr	r7, [pc, #444]	; (25434 <nrfx_spim_xfer+0x1c8>)
{
   25276:	4680      	mov	r8, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   25278:	fb03 7306 	mla	r3, r3, r6, r7
   2527c:	7f1b      	ldrb	r3, [r3, #28]
{
   2527e:	460c      	mov	r4, r1
   25280:	4615      	mov	r5, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   25282:	b95b      	cbnz	r3, 2529c <nrfx_spim_xfer+0x30>
   25284:	496c      	ldr	r1, [pc, #432]	; (25438 <nrfx_spim_xfer+0x1cc>)
   25286:	486d      	ldr	r0, [pc, #436]	; (2543c <nrfx_spim_xfer+0x1d0>)
   25288:	f240 23d5 	movw	r3, #725	; 0x2d5
   2528c:	4a6c      	ldr	r2, [pc, #432]	; (25440 <nrfx_spim_xfer+0x1d4>)
   2528e:	f00a fcef 	bl	2fc70 <printk>
   25292:	f240 21d5 	movw	r1, #725	; 0x2d5
   25296:	486a      	ldr	r0, [pc, #424]	; (25440 <nrfx_spim_xfer+0x1d4>)
   25298:	f00a ffd0 	bl	3023c <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   2529c:	6823      	ldr	r3, [r4, #0]
   2529e:	b96b      	cbnz	r3, 252bc <nrfx_spim_xfer+0x50>
   252a0:	6863      	ldr	r3, [r4, #4]
   252a2:	b15b      	cbz	r3, 252bc <nrfx_spim_xfer+0x50>
   252a4:	4967      	ldr	r1, [pc, #412]	; (25444 <nrfx_spim_xfer+0x1d8>)
   252a6:	4865      	ldr	r0, [pc, #404]	; (2543c <nrfx_spim_xfer+0x1d0>)
   252a8:	f240 23d6 	movw	r3, #726	; 0x2d6
   252ac:	4a64      	ldr	r2, [pc, #400]	; (25440 <nrfx_spim_xfer+0x1d4>)
   252ae:	f00a fcdf 	bl	2fc70 <printk>
   252b2:	f240 21d6 	movw	r1, #726	; 0x2d6
   252b6:	4862      	ldr	r0, [pc, #392]	; (25440 <nrfx_spim_xfer+0x1d4>)
   252b8:	f00a ffc0 	bl	3023c <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   252bc:	68a3      	ldr	r3, [r4, #8]
   252be:	b96b      	cbnz	r3, 252dc <nrfx_spim_xfer+0x70>
   252c0:	68e3      	ldr	r3, [r4, #12]
   252c2:	b15b      	cbz	r3, 252dc <nrfx_spim_xfer+0x70>
   252c4:	4960      	ldr	r1, [pc, #384]	; (25448 <nrfx_spim_xfer+0x1dc>)
   252c6:	485d      	ldr	r0, [pc, #372]	; (2543c <nrfx_spim_xfer+0x1d0>)
   252c8:	f240 23d7 	movw	r3, #727	; 0x2d7
   252cc:	4a5c      	ldr	r2, [pc, #368]	; (25440 <nrfx_spim_xfer+0x1d4>)
   252ce:	f00a fccf 	bl	2fc70 <printk>
   252d2:	f240 21d7 	movw	r1, #727	; 0x2d7
   252d6:	485a      	ldr	r0, [pc, #360]	; (25440 <nrfx_spim_xfer+0x1d4>)
   252d8:	f00a ffb0 	bl	3023c <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   252dc:	f898 3004 	ldrb.w	r3, [r8, #4]
   252e0:	b93b      	cbnz	r3, 252f2 <nrfx_spim_xfer+0x86>
   252e2:	68e3      	ldr	r3, [r4, #12]
   252e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   252e8:	d203      	bcs.n	252f2 <nrfx_spim_xfer+0x86>
   252ea:	6863      	ldr	r3, [r4, #4]
   252ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   252f0:	d30b      	bcc.n	2530a <nrfx_spim_xfer+0x9e>
   252f2:	4956      	ldr	r1, [pc, #344]	; (2544c <nrfx_spim_xfer+0x1e0>)
   252f4:	4851      	ldr	r0, [pc, #324]	; (2543c <nrfx_spim_xfer+0x1d0>)
   252f6:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   252fa:	4a51      	ldr	r2, [pc, #324]	; (25440 <nrfx_spim_xfer+0x1d4>)
   252fc:	f00a fcb8 	bl	2fc70 <printk>
   25300:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   25304:	484e      	ldr	r0, [pc, #312]	; (25440 <nrfx_spim_xfer+0x1d4>)
   25306:	f00a ff99 	bl	3023c <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   2530a:	f015 0908 	ands.w	r9, r5, #8
   2530e:	d011      	beq.n	25334 <nrfx_spim_xfer+0xc8>
   25310:	2324      	movs	r3, #36	; 0x24
   25312:	fb03 7306 	mla	r3, r3, r6, r7
   25316:	7fdb      	ldrb	r3, [r3, #31]
   25318:	2bff      	cmp	r3, #255	; 0xff
   2531a:	d00b      	beq.n	25334 <nrfx_spim_xfer+0xc8>
   2531c:	494c      	ldr	r1, [pc, #304]	; (25450 <nrfx_spim_xfer+0x1e4>)
   2531e:	4847      	ldr	r0, [pc, #284]	; (2543c <nrfx_spim_xfer+0x1d0>)
   25320:	f240 23db 	movw	r3, #731	; 0x2db
   25324:	4a46      	ldr	r2, [pc, #280]	; (25440 <nrfx_spim_xfer+0x1d4>)
   25326:	f00a fca3 	bl	2fc70 <printk>
   2532a:	f240 21db 	movw	r1, #731	; 0x2db
   2532e:	4844      	ldr	r0, [pc, #272]	; (25440 <nrfx_spim_xfer+0x1d4>)
   25330:	f00a ff84 	bl	3023c <assert_post_action>
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   25334:	2324      	movs	r3, #36	; 0x24
   25336:	4373      	muls	r3, r6
   25338:	18fa      	adds	r2, r7, r3
   2533a:	7f51      	ldrb	r1, [r2, #29]
   2533c:	2900      	cmp	r1, #0
   2533e:	d177      	bne.n	25430 <nrfx_spim_xfer+0x1c4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   25340:	58fb      	ldr	r3, [r7, r3]
   25342:	b123      	cbz	r3, 2534e <nrfx_spim_xfer+0xe2>
   25344:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   25348:	bf04      	itt	eq
   2534a:	2301      	moveq	r3, #1
   2534c:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   2534e:	f04f 0c24 	mov.w	ip, #36	; 0x24
   25352:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   25356:	fb0c 7c06 	mla	ip, ip, r6, r7
   2535a:	f10c 0e0c 	add.w	lr, ip, #12
   2535e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   25362:	f89c 001f 	ldrb.w	r0, [ip, #31]
   25366:	28ff      	cmp	r0, #255	; 0xff
   25368:	d004      	beq.n	25374 <nrfx_spim_xfer+0x108>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   2536a:	f89c 301e 	ldrb.w	r3, [ip, #30]
   2536e:	b1bb      	cbz	r3, 253a0 <nrfx_spim_xfer+0x134>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
   25370:	f010 fcd7 	bl	35d22 <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   25374:	6821      	ldr	r1, [r4, #0]
   25376:	b121      	cbz	r1, 25382 <nrfx_spim_xfer+0x116>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   25378:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   2537c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   25380:	d106      	bne.n	25390 <nrfx_spim_xfer+0x124>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   25382:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   25384:	b17a      	cbz	r2, 253a6 <nrfx_spim_xfer+0x13a>
   25386:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2538a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2538e:	d00a      	beq.n	253a6 <nrfx_spim_xfer+0x13a>
        p_cb->transfer_in_progress = false;
   25390:	2324      	movs	r3, #36	; 0x24
   25392:	fb03 7606 	mla	r6, r3, r6, r7
   25396:	2300      	movs	r3, #0
        return err_code;
   25398:	482e      	ldr	r0, [pc, #184]	; (25454 <nrfx_spim_xfer+0x1e8>)
        p_cb->transfer_in_progress = false;
   2539a:	7773      	strb	r3, [r6, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   2539c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
   253a0:	f010 fcb3 	bl	35d0a <nrf_gpio_pin_clear>
   253a4:	e7e6      	b.n	25374 <nrfx_spim_xfer+0x108>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   253a6:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   253aa:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   253ac:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   253b0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   253b4:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   253b6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   253ba:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   253bc:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   253c0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   253c4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   253c8:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   253cc:	bf18      	it	ne
   253ce:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   253d0:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   253d4:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   253d8:	bf18      	it	ne
   253da:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   253dc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   253e0:	f1b9 0f00 	cmp.w	r9, #0
   253e4:	d101      	bne.n	253ea <nrfx_spim_xfer+0x17e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   253e6:	2201      	movs	r2, #1
   253e8:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   253ea:	2224      	movs	r2, #36	; 0x24
   253ec:	4372      	muls	r2, r6
   253ee:	58ba      	ldr	r2, [r7, r2]
   253f0:	b9aa      	cbnz	r2, 2541e <nrfx_spim_xfer+0x1b2>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   253f2:	f1b9 0f00 	cmp.w	r9, #0
   253f6:	d103      	bne.n	25400 <nrfx_spim_xfer+0x194>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   253f8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   253fc:	2a00      	cmp	r2, #0
   253fe:	d0fb      	beq.n	253f8 <nrfx_spim_xfer+0x18c>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   25400:	2324      	movs	r3, #36	; 0x24
   25402:	fb03 7606 	mla	r6, r3, r6, r7
   25406:	7ff0      	ldrb	r0, [r6, #31]
   25408:	28ff      	cmp	r0, #255	; 0xff
   2540a:	d003      	beq.n	25414 <nrfx_spim_xfer+0x1a8>
                if (p_cb->ss_active_high)
   2540c:	7fb3      	ldrb	r3, [r6, #30]
   2540e:	b11b      	cbz	r3, 25418 <nrfx_spim_xfer+0x1ac>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   25410:	f010 fc7b 	bl	35d0a <nrf_gpio_pin_clear>
    return err_code;
   25414:	4810      	ldr	r0, [pc, #64]	; (25458 <nrfx_spim_xfer+0x1ec>)
   25416:	e7c1      	b.n	2539c <nrfx_spim_xfer+0x130>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   25418:	f010 fc83 	bl	35d22 <nrf_gpio_pin_set>
   2541c:	e7fa      	b.n	25414 <nrfx_spim_xfer+0x1a8>
    if (!enable)
   2541e:	2240      	movs	r2, #64	; 0x40
   25420:	f015 0f04 	tst.w	r5, #4
    p_reg->INTENCLR = mask;
   25424:	bf14      	ite	ne
   25426:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   2542a:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   2542e:	e7f1      	b.n	25414 <nrfx_spim_xfer+0x1a8>
        return err_code;
   25430:	480a      	ldr	r0, [pc, #40]	; (2545c <nrfx_spim_xfer+0x1f0>)
   25432:	e7b3      	b.n	2539c <nrfx_spim_xfer+0x130>
   25434:	20016928 	.word	0x20016928
   25438:	0003f739 	.word	0x0003f739
   2543c:	0003a56b 	.word	0x0003a56b
   25440:	0003f6fd 	.word	0x0003f6fd
   25444:	0003f765 	.word	0x0003f765
   25448:	0003f7ac 	.word	0x0003f7ac
   2544c:	0003f7f3 	.word	0x0003f7f3
   25450:	0003f897 	.word	0x0003f897
   25454:	0bad000a 	.word	0x0bad000a
   25458:	0bad0000 	.word	0x0bad0000
   2545c:	0bad000b 	.word	0x0bad000b

00025460 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25460:	4b16      	ldr	r3, [pc, #88]	; (254bc <nrfx_spim_3_irq_handler+0x5c>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   25462:	b510      	push	{r4, lr}
   25464:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   25468:	b332      	cbz	r2, 254b8 <nrfx_spim_3_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2546a:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   2546c:	4c14      	ldr	r4, [pc, #80]	; (254c0 <nrfx_spim_3_irq_handler+0x60>)
   2546e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   25472:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   25476:	6823      	ldr	r3, [r4, #0]
   25478:	b95b      	cbnz	r3, 25492 <nrfx_spim_3_irq_handler+0x32>
   2547a:	4912      	ldr	r1, [pc, #72]	; (254c4 <nrfx_spim_3_irq_handler+0x64>)
   2547c:	4812      	ldr	r0, [pc, #72]	; (254c8 <nrfx_spim_3_irq_handler+0x68>)
   2547e:	f240 333e 	movw	r3, #830	; 0x33e
   25482:	4a12      	ldr	r2, [pc, #72]	; (254cc <nrfx_spim_3_irq_handler+0x6c>)
   25484:	f00a fbf4 	bl	2fc70 <printk>
   25488:	f240 313e 	movw	r1, #830	; 0x33e
   2548c:	480f      	ldr	r0, [pc, #60]	; (254cc <nrfx_spim_3_irq_handler+0x6c>)
   2548e:	f00a fed5 	bl	3023c <assert_post_action>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   25492:	7fe0      	ldrb	r0, [r4, #31]
   25494:	28ff      	cmp	r0, #255	; 0xff
   25496:	d003      	beq.n	254a0 <nrfx_spim_3_irq_handler+0x40>
            if (p_cb->ss_active_high)
   25498:	7fa3      	ldrb	r3, [r4, #30]
   2549a:	b153      	cbz	r3, 254b2 <nrfx_spim_3_irq_handler+0x52>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   2549c:	f010 fc35 	bl	35d0a <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   254a0:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   254a2:	480b      	ldr	r0, [pc, #44]	; (254d0 <nrfx_spim_3_irq_handler+0x70>)
    p_cb->transfer_in_progress = false;
   254a4:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   254a6:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   254a8:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   254ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   254b0:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   254b2:	f010 fc36 	bl	35d22 <nrf_gpio_pin_set>
   254b6:	e7f3      	b.n	254a0 <nrfx_spim_3_irq_handler+0x40>
}
   254b8:	bd10      	pop	{r4, pc}
   254ba:	bf00      	nop
   254bc:	4000b000 	.word	0x4000b000
   254c0:	20016928 	.word	0x20016928
   254c4:	0003f8c7 	.word	0x0003f8c7
   254c8:	0003a56b 	.word	0x0003a56b
   254cc:	0003f6fd 	.word	0x0003f6fd
   254d0:	20016930 	.word	0x20016930

000254d4 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   254d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   254d8:	4605      	mov	r5, r0
   254da:	4690      	mov	r8, r2
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   254dc:	460c      	mov	r4, r1
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   254de:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_config);
   254e0:	b949      	cbnz	r1, 254f6 <nrfx_timer_init+0x22>
   254e2:	493d      	ldr	r1, [pc, #244]	; (255d8 <nrfx_timer_init+0x104>)
   254e4:	483d      	ldr	r0, [pc, #244]	; (255dc <nrfx_timer_init+0x108>)
   254e6:	2353      	movs	r3, #83	; 0x53
   254e8:	4a3d      	ldr	r2, [pc, #244]	; (255e0 <nrfx_timer_init+0x10c>)
   254ea:	f00a fbc1 	bl	2fc70 <printk>
   254ee:	2153      	movs	r1, #83	; 0x53
   254f0:	483b      	ldr	r0, [pc, #236]	; (255e0 <nrfx_timer_init+0x10c>)
   254f2:	f00a fea3 	bl	3023c <assert_post_action>
    NRFX_ASSERT(timer_event_handler);
   254f6:	f1b8 0f00 	cmp.w	r8, #0
   254fa:	d109      	bne.n	25510 <nrfx_timer_init+0x3c>
   254fc:	4939      	ldr	r1, [pc, #228]	; (255e4 <nrfx_timer_init+0x110>)
   254fe:	4837      	ldr	r0, [pc, #220]	; (255dc <nrfx_timer_init+0x108>)
   25500:	2354      	movs	r3, #84	; 0x54
   25502:	4a37      	ldr	r2, [pc, #220]	; (255e0 <nrfx_timer_init+0x10c>)
   25504:	f00a fbb4 	bl	2fc70 <printk>
   25508:	2154      	movs	r1, #84	; 0x54
   2550a:	4835      	ldr	r0, [pc, #212]	; (255e0 <nrfx_timer_init+0x10c>)
   2550c:	f00a fe96 	bl	3023c <assert_post_action>

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   25510:	230c      	movs	r3, #12
   25512:	4e35      	ldr	r6, [pc, #212]	; (255e8 <nrfx_timer_init+0x114>)
   25514:	fb03 6307 	mla	r3, r3, r7, r6
   25518:	7a1b      	ldrb	r3, [r3, #8]
   2551a:	2b00      	cmp	r3, #0
   2551c:	d159      	bne.n	255d2 <nrfx_timer_init+0xfe>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   2551e:	682b      	ldr	r3, [r5, #0]
   25520:	4a32      	ldr	r2, [pc, #200]	; (255ec <nrfx_timer_init+0x118>)
   25522:	4293      	cmp	r3, r2
   25524:	d007      	beq.n	25536 <nrfx_timer_init+0x62>
   25526:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   2552a:	4293      	cmp	r3, r2
   2552c:	d003      	beq.n	25536 <nrfx_timer_init+0x62>
   2552e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   25532:	4293      	cmp	r3, r2
   25534:	d102      	bne.n	2553c <nrfx_timer_init+0x68>
   25536:	78a3      	ldrb	r3, [r4, #2]
   25538:	2b03      	cmp	r3, #3
   2553a:	d909      	bls.n	25550 <nrfx_timer_init+0x7c>
   2553c:	492c      	ldr	r1, [pc, #176]	; (255f0 <nrfx_timer_init+0x11c>)
   2553e:	4827      	ldr	r0, [pc, #156]	; (255dc <nrfx_timer_init+0x108>)
   25540:	2361      	movs	r3, #97	; 0x61
   25542:	4a27      	ldr	r2, [pc, #156]	; (255e0 <nrfx_timer_init+0x10c>)
   25544:	f00a fb94 	bl	2fc70 <printk>
   25548:	2161      	movs	r1, #97	; 0x61
   2554a:	4825      	ldr	r0, [pc, #148]	; (255e0 <nrfx_timer_init+0x10c>)
   2554c:	f00a fe76 	bl	3023c <assert_post_action>

    p_cb->handler = timer_event_handler;
   25550:	230c      	movs	r3, #12
   25552:	437b      	muls	r3, r7
   25554:	18f2      	adds	r2, r6, r3
   25556:	f846 8003 	str.w	r8, [r6, r3]
    p_cb->context = p_config->p_context;
   2555a:	6863      	ldr	r3, [r4, #4]
   2555c:	6828      	ldr	r0, [r5, #0]
   2555e:	6053      	str	r3, [r2, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   25560:	2300      	movs	r3, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25562:	469c      	mov	ip, r3
   25564:	7969      	ldrb	r1, [r5, #5]
   25566:	b2da      	uxtb	r2, r3
   25568:	4291      	cmp	r1, r2
   2556a:	d82a      	bhi.n	255c2 <nrfx_timer_init+0xee>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2556c:	f340 3007 	sbfx	r0, r0, #12, #8
   25570:	f7f2 f82a 	bl	175c8 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   25574:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   25576:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   25578:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   2557c:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   25580:	f021 0103 	bic.w	r1, r1, #3
   25584:	430a      	orrs	r2, r1
   25586:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   2558a:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   2558e:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   25590:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   25594:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   25598:	430a      	orrs	r2, r1
   2559a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   2559e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   255a2:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   255a4:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   255a8:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   255ac:	430a      	orrs	r2, r1
   255ae:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   255b2:	230c      	movs	r3, #12
   255b4:	fb03 6607 	mla	r6, r3, r7, r6
   255b8:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   255ba:	480e      	ldr	r0, [pc, #56]	; (255f4 <nrfx_timer_init+0x120>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   255bc:	7233      	strb	r3, [r6, #8]
}
   255be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   255c2:	009a      	lsls	r2, r3, #2
   255c4:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   255c8:	f840 c002 	str.w	ip, [r0, r2]
   255cc:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   255ce:	3301      	adds	r3, #1
   255d0:	e7c9      	b.n	25566 <nrfx_timer_init+0x92>
        return err_code;
   255d2:	4809      	ldr	r0, [pc, #36]	; (255f8 <nrfx_timer_init+0x124>)
   255d4:	e7f3      	b.n	255be <nrfx_timer_init+0xea>
   255d6:	bf00      	nop
   255d8:	0003f695 	.word	0x0003f695
   255dc:	0003a56b 	.word	0x0003a56b
   255e0:	0003f8d5 	.word	0x0003f8d5
   255e4:	0003f912 	.word	0x0003f912
   255e8:	2001694c 	.word	0x2001694c
   255ec:	4000f000 	.word	0x4000f000
   255f0:	0003f926 	.word	0x0003f926
   255f4:	0bad0000 	.word	0x0bad0000
   255f8:	0bad0005 	.word	0x0bad0005

000255fc <nrfx_timer_enable>:
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   255fc:	210c      	movs	r1, #12
{
   255fe:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   25600:	4d0d      	ldr	r5, [pc, #52]	; (25638 <nrfx_timer_enable+0x3c>)
   25602:	7902      	ldrb	r2, [r0, #4]
{
   25604:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   25606:	fb01 5202 	mla	r2, r1, r2, r5
   2560a:	7a12      	ldrb	r2, [r2, #8]
   2560c:	2a01      	cmp	r2, #1
   2560e:	d009      	beq.n	25624 <nrfx_timer_enable+0x28>
   25610:	490a      	ldr	r1, [pc, #40]	; (2563c <nrfx_timer_enable+0x40>)
   25612:	480b      	ldr	r0, [pc, #44]	; (25640 <nrfx_timer_enable+0x44>)
   25614:	238f      	movs	r3, #143	; 0x8f
   25616:	4a0b      	ldr	r2, [pc, #44]	; (25644 <nrfx_timer_enable+0x48>)
   25618:	f00a fb2a 	bl	2fc70 <printk>
   2561c:	218f      	movs	r1, #143	; 0x8f
   2561e:	4809      	ldr	r0, [pc, #36]	; (25644 <nrfx_timer_enable+0x48>)
   25620:	f00a fe0c 	bl	3023c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25624:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   25626:	6823      	ldr	r3, [r4, #0]
   25628:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   2562a:	220c      	movs	r2, #12
   2562c:	7923      	ldrb	r3, [r4, #4]
   2562e:	fb02 5303 	mla	r3, r2, r3, r5
   25632:	2202      	movs	r2, #2
   25634:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   25636:	bd38      	pop	{r3, r4, r5, pc}
   25638:	2001694c 	.word	0x2001694c
   2563c:	00040067 	.word	0x00040067
   25640:	0003a56b 	.word	0x0003a56b
   25644:	0003f8d5 	.word	0x0003f8d5

00025648 <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25648:	210c      	movs	r1, #12
{
   2564a:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2564c:	4d0c      	ldr	r5, [pc, #48]	; (25680 <nrfx_timer_disable+0x38>)
   2564e:	7902      	ldrb	r2, [r0, #4]
{
   25650:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25652:	fb01 5202 	mla	r2, r1, r2, r5
   25656:	7a12      	ldrb	r2, [r2, #8]
   25658:	b94a      	cbnz	r2, 2566e <nrfx_timer_disable+0x26>
   2565a:	490a      	ldr	r1, [pc, #40]	; (25684 <nrfx_timer_disable+0x3c>)
   2565c:	480a      	ldr	r0, [pc, #40]	; (25688 <nrfx_timer_disable+0x40>)
   2565e:	2397      	movs	r3, #151	; 0x97
   25660:	4a0a      	ldr	r2, [pc, #40]	; (2568c <nrfx_timer_disable+0x44>)
   25662:	f00a fb05 	bl	2fc70 <printk>
   25666:	2197      	movs	r1, #151	; 0x97
   25668:	4808      	ldr	r0, [pc, #32]	; (2568c <nrfx_timer_disable+0x44>)
   2566a:	f00a fde7 	bl	3023c <assert_post_action>
   2566e:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   25670:	210c      	movs	r1, #12
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   25672:	6823      	ldr	r3, [r4, #0]
   25674:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   25676:	7923      	ldrb	r3, [r4, #4]
   25678:	fb01 5303 	mla	r3, r1, r3, r5
   2567c:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   2567e:	bd38      	pop	{r3, r4, r5, pc}
   25680:	2001694c 	.word	0x2001694c
   25684:	000400a9 	.word	0x000400a9
   25688:	0003a56b 	.word	0x0003a56b
   2568c:	0003f8d5 	.word	0x0003f8d5

00025690 <nrfx_timer_uninit>:
{
   25690:	b538      	push	{r3, r4, r5, lr}
   25692:	4604      	mov	r4, r0
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   25694:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   25696:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   25698:	f340 3007 	sbfx	r0, r0, #12, #8
   2569c:	f7f1 ffa4 	bl	175e8 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   256a0:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   256a2:	4620      	mov	r0, r4
   256a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   256a8:	f04f 32ff 	mov.w	r2, #4294967295
    p_reg->SHORTS &= ~(mask);
   256ac:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   256b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   256b4:	f7ff ffc8 	bl	25648 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   256b8:	210c      	movs	r1, #12
   256ba:	7923      	ldrb	r3, [r4, #4]
   256bc:	4a02      	ldr	r2, [pc, #8]	; (256c8 <nrfx_timer_uninit+0x38>)
   256be:	fb01 2303 	mla	r3, r1, r3, r2
   256c2:	721d      	strb	r5, [r3, #8]
}
   256c4:	bd38      	pop	{r3, r4, r5, pc}
   256c6:	bf00      	nop
   256c8:	2001694c 	.word	0x2001694c

000256cc <nrfx_timer_clear>:
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   256cc:	210c      	movs	r1, #12
{
   256ce:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   256d0:	4a0a      	ldr	r2, [pc, #40]	; (256fc <nrfx_timer_clear+0x30>)
   256d2:	7903      	ldrb	r3, [r0, #4]
{
   256d4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   256d6:	fb01 2303 	mla	r3, r1, r3, r2
   256da:	7a1b      	ldrb	r3, [r3, #8]
   256dc:	b94b      	cbnz	r3, 256f2 <nrfx_timer_clear+0x26>
   256de:	4908      	ldr	r1, [pc, #32]	; (25700 <nrfx_timer_clear+0x34>)
   256e0:	4808      	ldr	r0, [pc, #32]	; (25704 <nrfx_timer_clear+0x38>)
   256e2:	23b3      	movs	r3, #179	; 0xb3
   256e4:	4a08      	ldr	r2, [pc, #32]	; (25708 <nrfx_timer_clear+0x3c>)
   256e6:	f00a fac3 	bl	2fc70 <printk>
   256ea:	21b3      	movs	r1, #179	; 0xb3
   256ec:	4806      	ldr	r0, [pc, #24]	; (25708 <nrfx_timer_clear+0x3c>)
   256ee:	f00a fda5 	bl	3023c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   256f2:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   256f4:	6823      	ldr	r3, [r4, #0]
   256f6:	60da      	str	r2, [r3, #12]
}
   256f8:	bd10      	pop	{r4, pc}
   256fa:	bf00      	nop
   256fc:	2001694c 	.word	0x2001694c
   25700:	000400a9 	.word	0x000400a9
   25704:	0003a56b 	.word	0x0003a56b
   25708:	0003f8d5 	.word	0x0003f8d5

0002570c <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2570c:	210c      	movs	r1, #12
{
   2570e:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25710:	4a12      	ldr	r2, [pc, #72]	; (2575c <nrfx_timer_increment+0x50>)
   25712:	7903      	ldrb	r3, [r0, #4]
{
   25714:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25716:	fb01 2303 	mla	r3, r1, r3, r2
   2571a:	7a1b      	ldrb	r3, [r3, #8]
   2571c:	b94b      	cbnz	r3, 25732 <nrfx_timer_increment+0x26>
   2571e:	4910      	ldr	r1, [pc, #64]	; (25760 <nrfx_timer_increment+0x54>)
   25720:	4810      	ldr	r0, [pc, #64]	; (25764 <nrfx_timer_increment+0x58>)
   25722:	23b9      	movs	r3, #185	; 0xb9
   25724:	4a10      	ldr	r2, [pc, #64]	; (25768 <nrfx_timer_increment+0x5c>)
   25726:	f00a faa3 	bl	2fc70 <printk>
   2572a:	21b9      	movs	r1, #185	; 0xb9
   2572c:	480e      	ldr	r0, [pc, #56]	; (25768 <nrfx_timer_increment+0x5c>)
   2572e:	f00a fd85 	bl	3023c <assert_post_action>
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   25732:	6823      	ldr	r3, [r4, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
   25734:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   25738:	f013 0fff 	tst.w	r3, #255	; 0xff
   2573c:	d109      	bne.n	25752 <nrfx_timer_increment+0x46>
   2573e:	490b      	ldr	r1, [pc, #44]	; (2576c <nrfx_timer_increment+0x60>)
   25740:	4808      	ldr	r0, [pc, #32]	; (25764 <nrfx_timer_increment+0x58>)
   25742:	23ba      	movs	r3, #186	; 0xba
   25744:	4a08      	ldr	r2, [pc, #32]	; (25768 <nrfx_timer_increment+0x5c>)
   25746:	f00a fa93 	bl	2fc70 <printk>
   2574a:	21ba      	movs	r1, #186	; 0xba
   2574c:	4806      	ldr	r0, [pc, #24]	; (25768 <nrfx_timer_increment+0x5c>)
   2574e:	f00a fd75 	bl	3023c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25752:	2201      	movs	r2, #1

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
   25754:	6823      	ldr	r3, [r4, #0]
   25756:	609a      	str	r2, [r3, #8]
}
   25758:	bd10      	pop	{r4, pc}
   2575a:	bf00      	nop
   2575c:	2001694c 	.word	0x2001694c
   25760:	000400a9 	.word	0x000400a9
   25764:	0003a56b 	.word	0x0003a56b
   25768:	0003f8d5 	.word	0x0003f8d5
   2576c:	000400ed 	.word	0x000400ed

00025770 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
   25770:	b538      	push	{r3, r4, r5, lr}
   25772:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25774:	210c      	movs	r1, #12
   25776:	7903      	ldrb	r3, [r0, #4]
   25778:	4a13      	ldr	r2, [pc, #76]	; (257c8 <nrfx_timer_capture+0x58>)
{
   2577a:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2577c:	fb01 2303 	mla	r3, r1, r3, r2
   25780:	7a1b      	ldrb	r3, [r3, #8]
   25782:	b94b      	cbnz	r3, 25798 <nrfx_timer_capture+0x28>
   25784:	4911      	ldr	r1, [pc, #68]	; (257cc <nrfx_timer_capture+0x5c>)
   25786:	4812      	ldr	r0, [pc, #72]	; (257d0 <nrfx_timer_capture+0x60>)
   25788:	23c2      	movs	r3, #194	; 0xc2
   2578a:	4a12      	ldr	r2, [pc, #72]	; (257d4 <nrfx_timer_capture+0x64>)
   2578c:	f00a fa70 	bl	2fc70 <printk>
   25790:	21c2      	movs	r1, #194	; 0xc2
   25792:	4810      	ldr	r0, [pc, #64]	; (257d4 <nrfx_timer_capture+0x64>)
   25794:	f00a fd52 	bl	3023c <assert_post_action>
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   25798:	796b      	ldrb	r3, [r5, #5]
   2579a:	42a3      	cmp	r3, r4
   2579c:	d809      	bhi.n	257b2 <nrfx_timer_capture+0x42>
   2579e:	490e      	ldr	r1, [pc, #56]	; (257d8 <nrfx_timer_capture+0x68>)
   257a0:	480b      	ldr	r0, [pc, #44]	; (257d0 <nrfx_timer_capture+0x60>)
   257a2:	23c3      	movs	r3, #195	; 0xc3
   257a4:	4a0b      	ldr	r2, [pc, #44]	; (257d4 <nrfx_timer_capture+0x64>)
   257a6:	f00a fa63 	bl	2fc70 <printk>
   257aa:	21c3      	movs	r1, #195	; 0xc3
   257ac:	4809      	ldr	r0, [pc, #36]	; (257d4 <nrfx_timer_capture+0x64>)
   257ae:	f00a fd45 	bl	3023c <assert_post_action>
   257b2:	2101      	movs	r1, #1
    return (uint32_t)p_reg->CC[cc_channel];
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   257b4:	00a3      	lsls	r3, r4, #2

    nrf_timer_task_trigger(p_instance->p_reg,
   257b6:	682a      	ldr	r2, [r5, #0]
   257b8:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   257ba:	b2db      	uxtb	r3, r3
   257bc:	50d1      	str	r1, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
   257be:	f504 74a8 	add.w	r4, r4, #336	; 0x150
   257c2:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
   257c6:	bd38      	pop	{r3, r4, r5, pc}
   257c8:	2001694c 	.word	0x2001694c
   257cc:	000400a9 	.word	0x000400a9
   257d0:	0003a56b 	.word	0x0003a56b
   257d4:	0003f8d5 	.word	0x0003f8d5
   257d8:	0004012b 	.word	0x0004012b

000257dc <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   257dc:	6803      	ldr	r3, [r0, #0]
{
   257de:	b510      	push	{r4, lr}
    switch (port)
   257e0:	095a      	lsrs	r2, r3, #5
   257e2:	bf0c      	ite	eq
   257e4:	f04f 32ff 	moveq.w	r2, #4294967295
   257e8:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   257ea:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   257ee:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   257f2:	07db      	lsls	r3, r3, #31
{
   257f4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   257f6:	d40b      	bmi.n	25810 <nrf_gpio_pin_port_decode+0x34>
   257f8:	490f      	ldr	r1, [pc, #60]	; (25838 <nrf_gpio_pin_port_decode+0x5c>)
   257fa:	4810      	ldr	r0, [pc, #64]	; (2583c <nrf_gpio_pin_port_decode+0x60>)
   257fc:	f44f 7305 	mov.w	r3, #532	; 0x214
   25800:	4a0f      	ldr	r2, [pc, #60]	; (25840 <nrf_gpio_pin_port_decode+0x64>)
   25802:	f00a fa35 	bl	2fc70 <printk>
   25806:	f44f 7105 	mov.w	r1, #532	; 0x214
   2580a:	480d      	ldr	r0, [pc, #52]	; (25840 <nrf_gpio_pin_port_decode+0x64>)
   2580c:	f00a fd16 	bl	3023c <assert_post_action>
    uint32_t pin_number = *p_pin;
   25810:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   25812:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25816:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   25818:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2581a:	d00b      	beq.n	25834 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   2581c:	4909      	ldr	r1, [pc, #36]	; (25844 <nrf_gpio_pin_port_decode+0x68>)
   2581e:	4807      	ldr	r0, [pc, #28]	; (2583c <nrf_gpio_pin_port_decode+0x60>)
   25820:	f240 2319 	movw	r3, #537	; 0x219
   25824:	4a06      	ldr	r2, [pc, #24]	; (25840 <nrf_gpio_pin_port_decode+0x64>)
   25826:	f00a fa23 	bl	2fc70 <printk>
   2582a:	f240 2119 	movw	r1, #537	; 0x219
   2582e:	4804      	ldr	r0, [pc, #16]	; (25840 <nrf_gpio_pin_port_decode+0x64>)
   25830:	f00a fd04 	bl	3023c <assert_post_action>
}
   25834:	4804      	ldr	r0, [pc, #16]	; (25848 <nrf_gpio_pin_port_decode+0x6c>)
   25836:	bd10      	pop	{r4, pc}
   25838:	0003d086 	.word	0x0003d086
   2583c:	0003a56b 	.word	0x0003a56b
   25840:	0003d053 	.word	0x0003d053
   25844:	00040e81 	.word	0x00040e81
   25848:	40842500 	.word	0x40842500

0002584c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   2584c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25850:	4606      	mov	r6, r0
   25852:	4692      	mov	sl, r2
   25854:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   25856:	460c      	mov	r4, r1
   25858:	b959      	cbnz	r1, 25872 <nrfx_twim_init+0x26>
   2585a:	4932      	ldr	r1, [pc, #200]	; (25924 <nrfx_twim_init+0xd8>)
   2585c:	4832      	ldr	r0, [pc, #200]	; (25928 <nrfx_twim_init+0xdc>)
   2585e:	f44f 7383 	mov.w	r3, #262	; 0x106
   25862:	4a32      	ldr	r2, [pc, #200]	; (2592c <nrfx_twim_init+0xe0>)
   25864:	f00a fa04 	bl	2fc70 <printk>
   25868:	f44f 7183 	mov.w	r1, #262	; 0x106
   2586c:	482f      	ldr	r0, [pc, #188]	; (2592c <nrfx_twim_init+0xe0>)
   2586e:	f00a fce5 	bl	3023c <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   25872:	e9d4 2300 	ldrd	r2, r3, [r4]
   25876:	429a      	cmp	r2, r3
   25878:	d10b      	bne.n	25892 <nrfx_twim_init+0x46>
   2587a:	492d      	ldr	r1, [pc, #180]	; (25930 <nrfx_twim_init+0xe4>)
   2587c:	482a      	ldr	r0, [pc, #168]	; (25928 <nrfx_twim_init+0xdc>)
   2587e:	f240 1307 	movw	r3, #263	; 0x107
   25882:	4a2a      	ldr	r2, [pc, #168]	; (2592c <nrfx_twim_init+0xe0>)
   25884:	f00a f9f4 	bl	2fc70 <printk>
   25888:	f240 1107 	movw	r1, #263	; 0x107
   2588c:	4827      	ldr	r0, [pc, #156]	; (2592c <nrfx_twim_init+0xe0>)
   2588e:	f00a fcd5 	bl	3023c <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   25892:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   25894:	f896 8004 	ldrb.w	r8, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   25898:	4d26      	ldr	r5, [pc, #152]	; (25934 <nrfx_twim_init+0xe8>)
   2589a:	fb07 f708 	mul.w	r7, r7, r8
   2589e:	19e9      	adds	r1, r5, r7
   258a0:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   258a4:	2b00      	cmp	r3, #0
   258a6:	d13b      	bne.n	25920 <nrfx_twim_init+0xd4>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   258a8:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
   258aa:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
   258ae:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   258b2:	7b63      	ldrb	r3, [r4, #13]
    p_cb->p_context       = p_context;
   258b4:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   258b8:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
   258bc:	6823      	ldr	r3, [r4, #0]
    p_cb->handler         = event_handler;
   258be:	f845 a007 	str.w	sl, [r5, r7]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   258c2:	a801      	add	r0, sp, #4
#if NRFX_CHECK(NRFX_TWIM_NRF52_ANOMALY_109_WORKAROUND_ENABLED)
    p_cb->bus_frequency   = (nrf_twim_frequency_t)p_config->frequency;
#endif

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   258c4:	f8d6 9000 	ldr.w	r9, [r6]
    reg->PIN_CNF[pin_number] = cnf;
   258c8:	f240 6a0c 	movw	sl, #1548	; 0x60c
   258cc:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   258ce:	f7ff ff85 	bl	257dc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   258d2:	9b01      	ldr	r3, [sp, #4]
   258d4:	3380      	adds	r3, #128	; 0x80
   258d6:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
   258da:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   258dc:	a801      	add	r0, sp, #4
   258de:	9301      	str	r3, [sp, #4]
   258e0:	f7ff ff7c 	bl	257dc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   258e4:	9b01      	ldr	r3, [sp, #4]
   258e6:	3380      	adds	r3, #128	; 0x80
   258e8:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   258ec:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
   258f0:	f8c9 2508 	str.w	r2, [r9, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   258f4:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   258f8:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   258fa:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524

    if (p_cb->handler)
   258fe:	59eb      	ldr	r3, [r5, r7]
   25900:	b123      	cbz	r3, 2590c <nrfx_twim_init+0xc0>
   25902:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   25904:	f340 3007 	sbfx	r0, r0, #12, #8
   25908:	f7f1 fe5e 	bl	175c8 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2590c:	2334      	movs	r3, #52	; 0x34
   2590e:	fb03 5508 	mla	r5, r3, r8, r5
   25912:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   25914:	4808      	ldr	r0, [pc, #32]	; (25938 <nrfx_twim_init+0xec>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   25916:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   2591a:	b002      	add	sp, #8
   2591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   25920:	4806      	ldr	r0, [pc, #24]	; (2593c <nrfx_twim_init+0xf0>)
   25922:	e7fa      	b.n	2591a <nrfx_twim_init+0xce>
   25924:	0003f695 	.word	0x0003f695
   25928:	0003a56b 	.word	0x0003a56b
   2592c:	00040155 	.word	0x00040155
   25930:	00040191 	.word	0x00040191
   25934:	20016958 	.word	0x20016958
   25938:	0bad0000 	.word	0x0bad0000
   2593c:	0bad0005 	.word	0x0bad0005

00025940 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   25940:	2234      	movs	r2, #52	; 0x34
{
   25942:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   25944:	4d0f      	ldr	r5, [pc, #60]	; (25984 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   25946:	7904      	ldrb	r4, [r0, #4]
{
   25948:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2594a:	fb02 5204 	mla	r2, r2, r4, r5
   2594e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   25952:	2a01      	cmp	r2, #1
   25954:	d00b      	beq.n	2596e <nrfx_twim_enable+0x2e>
   25956:	490c      	ldr	r1, [pc, #48]	; (25988 <nrfx_twim_enable+0x48>)
   25958:	480c      	ldr	r0, [pc, #48]	; (2598c <nrfx_twim_enable+0x4c>)
   2595a:	f44f 73b5 	mov.w	r3, #362	; 0x16a
   2595e:	4a0c      	ldr	r2, [pc, #48]	; (25990 <nrfx_twim_enable+0x50>)
   25960:	f00a f986 	bl	2fc70 <printk>
   25964:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   25968:	4809      	ldr	r0, [pc, #36]	; (25990 <nrfx_twim_enable+0x50>)
   2596a:	f00a fc67 	bl	3023c <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2596e:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   25970:	6833      	ldr	r3, [r6, #0]
   25972:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   25976:	2334      	movs	r3, #52	; 0x34
   25978:	fb03 5404 	mla	r4, r3, r4, r5
   2597c:	2302      	movs	r3, #2
   2597e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   25982:	bd70      	pop	{r4, r5, r6, pc}
   25984:	20016958 	.word	0x20016958
   25988:	000401b0 	.word	0x000401b0
   2598c:	0003a56b 	.word	0x0003a56b
   25990:	00040155 	.word	0x00040155

00025994 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   25994:	2234      	movs	r2, #52	; 0x34
{
   25996:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   25998:	4d15      	ldr	r5, [pc, #84]	; (259f0 <nrfx_twim_disable+0x5c>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2599a:	7904      	ldrb	r4, [r0, #4]
{
   2599c:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2599e:	fb02 5204 	mla	r2, r2, r4, r5
   259a2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   259a6:	b95a      	cbnz	r2, 259c0 <nrfx_twim_disable+0x2c>
   259a8:	4912      	ldr	r1, [pc, #72]	; (259f4 <nrfx_twim_disable+0x60>)
   259aa:	4813      	ldr	r0, [pc, #76]	; (259f8 <nrfx_twim_disable+0x64>)
   259ac:	f240 1375 	movw	r3, #373	; 0x175
   259b0:	4a12      	ldr	r2, [pc, #72]	; (259fc <nrfx_twim_disable+0x68>)
   259b2:	f00a f95d 	bl	2fc70 <printk>
   259b6:	f240 1175 	movw	r1, #373	; 0x175
   259ba:	4810      	ldr	r0, [pc, #64]	; (259fc <nrfx_twim_disable+0x68>)
   259bc:	f00a fc3e 	bl	3023c <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   259c0:	2334      	movs	r3, #52	; 0x34
   259c2:	2100      	movs	r1, #0
   259c4:	fb03 5304 	mla	r3, r3, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   259c8:	6832      	ldr	r2, [r6, #0]
    p_reg->INTENCLR = mask;
   259ca:	480d      	ldr	r0, [pc, #52]	; (25a00 <nrfx_twim_disable+0x6c>)
    p_cb->int_mask = 0;
   259cc:	6099      	str	r1, [r3, #8]
   259ce:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   259d2:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   259d6:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   259da:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   259de:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   259e2:	2201      	movs	r2, #1
    p_cb->busy = false;
   259e4:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   259e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   259ec:	bd70      	pop	{r4, r5, r6, pc}
   259ee:	bf00      	nop
   259f0:	20016958 	.word	0x20016958
   259f4:	0003f739 	.word	0x0003f739
   259f8:	0003a56b 	.word	0x0003a56b
   259fc:	00040155 	.word	0x00040155
   25a00:	019c0202 	.word	0x019c0202

00025a04 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   25a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   25a08:	7903      	ldrb	r3, [r0, #4]
{
   25a0a:	4604      	mov	r4, r0
   25a0c:	460d      	mov	r5, r1
   25a0e:	4617      	mov	r7, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   25a10:	b93b      	cbnz	r3, 25a22 <nrfx_twim_xfer+0x1e>
   25a12:	684b      	ldr	r3, [r1, #4]
   25a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   25a18:	d203      	bcs.n	25a22 <nrfx_twim_xfer+0x1e>
   25a1a:	688b      	ldr	r3, [r1, #8]
   25a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   25a20:	d30b      	bcc.n	25a3a <nrfx_twim_xfer+0x36>
   25a22:	49c0      	ldr	r1, [pc, #768]	; (25d24 <nrfx_twim_xfer+0x320>)
   25a24:	48c0      	ldr	r0, [pc, #768]	; (25d28 <nrfx_twim_xfer+0x324>)
   25a26:	f240 238a 	movw	r3, #650	; 0x28a
   25a2a:	4ac0      	ldr	r2, [pc, #768]	; (25d2c <nrfx_twim_xfer+0x328>)
   25a2c:	f00a f920 	bl	2fc70 <printk>
   25a30:	f240 218a 	movw	r1, #650	; 0x28a
   25a34:	48bd      	ldr	r0, [pc, #756]	; (25d2c <nrfx_twim_xfer+0x328>)
   25a36:	f00a fc01 	bl	3023c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   25a3a:	f04f 0834 	mov.w	r8, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   25a3e:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   25a42:	4ebb      	ldr	r6, [pc, #748]	; (25d30 <nrfx_twim_xfer+0x32c>)
   25a44:	fb08 f809 	mul.w	r8, r8, r9
   25a48:	f856 3008 	ldr.w	r3, [r6, r8]
   25a4c:	bb13      	cbnz	r3, 25a94 <nrfx_twim_xfer+0x90>
   25a4e:	782b      	ldrb	r3, [r5, #0]
   25a50:	2b02      	cmp	r3, #2
   25a52:	d00f      	beq.n	25a74 <nrfx_twim_xfer+0x70>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   25a54:	782b      	ldrb	r3, [r5, #0]
   25a56:	2b03      	cmp	r3, #3
   25a58:	d11c      	bne.n	25a94 <nrfx_twim_xfer+0x90>
   25a5a:	f240 2393 	movw	r3, #659	; 0x293
   25a5e:	4ab3      	ldr	r2, [pc, #716]	; (25d2c <nrfx_twim_xfer+0x328>)
   25a60:	49b4      	ldr	r1, [pc, #720]	; (25d34 <nrfx_twim_xfer+0x330>)
   25a62:	48b1      	ldr	r0, [pc, #708]	; (25d28 <nrfx_twim_xfer+0x324>)
   25a64:	f00a f904 	bl	2fc70 <printk>
   25a68:	f240 2193 	movw	r1, #659	; 0x293
   25a6c:	48af      	ldr	r0, [pc, #700]	; (25d2c <nrfx_twim_xfer+0x328>)
   25a6e:	f00a fbe5 	bl	3023c <assert_post_action>
   25a72:	e00f      	b.n	25a94 <nrfx_twim_xfer+0x90>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   25a74:	f240 2392 	movw	r3, #658	; 0x292
   25a78:	4aac      	ldr	r2, [pc, #688]	; (25d2c <nrfx_twim_xfer+0x328>)
   25a7a:	49af      	ldr	r1, [pc, #700]	; (25d38 <nrfx_twim_xfer+0x334>)
   25a7c:	48aa      	ldr	r0, [pc, #680]	; (25d28 <nrfx_twim_xfer+0x324>)
   25a7e:	f00a f8f7 	bl	2fc70 <printk>
   25a82:	f240 2192 	movw	r1, #658	; 0x292
   25a86:	48a9      	ldr	r0, [pc, #676]	; (25d2c <nrfx_twim_xfer+0x328>)
   25a88:	f00a fbd8 	bl	3023c <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   25a8c:	f856 3008 	ldr.w	r3, [r6, r8]
   25a90:	2b00      	cmp	r3, #0
   25a92:	d0df      	beq.n	25a54 <nrfx_twim_xfer+0x50>
    p_cb->error = false;
   25a94:	2334      	movs	r3, #52	; 0x34
   25a96:	2200      	movs	r2, #0
   25a98:	fb03 6309 	mla	r3, r3, r9, r6
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   25a9c:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
   25a9e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   25aa2:	686b      	ldr	r3, [r5, #4]
   25aa4:	b153      	cbz	r3, 25abc <nrfx_twim_xfer+0xb8>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   25aa6:	68eb      	ldr	r3, [r5, #12]
   25aa8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   25aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   25ab0:	d004      	beq.n	25abc <nrfx_twim_xfer+0xb8>
        return err_code;
   25ab2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 25d4c <nrfx_twim_xfer+0x348>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   25ab6:	4640      	mov	r0, r8
   25ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   25abc:	f04f 0c34 	mov.w	ip, #52	; 0x34
   25ac0:	fb0c 6c09 	mla	ip, ip, r9, r6
    p_reg->INTENCLR = mask;
   25ac4:	4b9d      	ldr	r3, [pc, #628]	; (25d3c <nrfx_twim_xfer+0x338>)
   25ac6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   25aca:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
   25ace:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   25ad2:	b133      	cbz	r3, 25ae2 <nrfx_twim_xfer+0xde>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   25ad4:	f8dc 3008 	ldr.w	r3, [ip, #8]
        return err_code;
   25ad8:	f8df 8274 	ldr.w	r8, [pc, #628]	; 25d50 <nrfx_twim_xfer+0x34c>
    p_reg->INTENSET = mask;
   25adc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   25ae0:	e7e9      	b.n	25ab6 <nrfx_twim_xfer+0xb2>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   25ae2:	f017 0f14 	tst.w	r7, #20
   25ae6:	bf0c      	ite	eq
   25ae8:	2301      	moveq	r3, #1
   25aea:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   25aec:	46a8      	mov	r8, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   25aee:	f88c 302f 	strb.w	r3, [ip, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   25af2:	f10c 0e0c 	add.w	lr, ip, #12
   25af6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   25afa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   25afe:	f8d8 3000 	ldr.w	r3, [r8]
    p_cb->flags = flags;
   25b02:	f8cc 7020 	str.w	r7, [ip, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   25b06:	f8ce 3000 	str.w	r3, [lr]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   25b0a:	f3c7 1300 	ubfx	r3, r7, #4, #1
   25b0e:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   25b12:	786b      	ldrb	r3, [r5, #1]
   25b14:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25b18:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   25b1c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   25b20:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   25b24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   25b28:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   25b2c:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   25b30:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   25b34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   25b38:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   25b3c:	bf18      	it	ne
   25b3e:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   25b40:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   25b44:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   25b48:	bf18      	it	ne
   25b4a:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   25b4c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   25b50:	782b      	ldrb	r3, [r5, #0]
   25b52:	2b03      	cmp	r3, #3
   25b54:	f200 80e2 	bhi.w	25d1c <nrfx_twim_xfer+0x318>
   25b58:	e8df f003 	tbb	[pc, r3]
   25b5c:	0296cdb1 	.word	0x0296cdb1
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   25b60:	06f9      	lsls	r1, r7, #27
   25b62:	d50b      	bpl.n	25b7c <nrfx_twim_xfer+0x178>
   25b64:	4976      	ldr	r1, [pc, #472]	; (25d40 <nrfx_twim_xfer+0x33c>)
   25b66:	4870      	ldr	r0, [pc, #448]	; (25d28 <nrfx_twim_xfer+0x324>)
   25b68:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   25b6c:	4a6f      	ldr	r2, [pc, #444]	; (25d2c <nrfx_twim_xfer+0x328>)
   25b6e:	f00a f87f 	bl	2fc70 <printk>
   25b72:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   25b76:	486d      	ldr	r0, [pc, #436]	; (25d2c <nrfx_twim_xfer+0x328>)
   25b78:	f00a fb60 	bl	3023c <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   25b7c:	073a      	lsls	r2, r7, #28
   25b7e:	d50b      	bpl.n	25b98 <nrfx_twim_xfer+0x194>
   25b80:	4970      	ldr	r1, [pc, #448]	; (25d44 <nrfx_twim_xfer+0x340>)
   25b82:	4869      	ldr	r0, [pc, #420]	; (25d28 <nrfx_twim_xfer+0x324>)
   25b84:	f240 13cf 	movw	r3, #463	; 0x1cf
   25b88:	4a68      	ldr	r2, [pc, #416]	; (25d2c <nrfx_twim_xfer+0x328>)
   25b8a:	f00a f871 	bl	2fc70 <printk>
   25b8e:	f240 11cf 	movw	r1, #463	; 0x1cf
   25b92:	4866      	ldr	r0, [pc, #408]	; (25d2c <nrfx_twim_xfer+0x328>)
   25b94:	f00a fb52 	bl	3023c <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   25b98:	077b      	lsls	r3, r7, #29
   25b9a:	d50b      	bpl.n	25bb4 <nrfx_twim_xfer+0x1b0>
   25b9c:	496a      	ldr	r1, [pc, #424]	; (25d48 <nrfx_twim_xfer+0x344>)
   25b9e:	4862      	ldr	r0, [pc, #392]	; (25d28 <nrfx_twim_xfer+0x324>)
   25ba0:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   25ba4:	4a61      	ldr	r2, [pc, #388]	; (25d2c <nrfx_twim_xfer+0x328>)
   25ba6:	f00a f863 	bl	2fc70 <printk>
   25baa:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   25bae:	485f      	ldr	r0, [pc, #380]	; (25d2c <nrfx_twim_xfer+0x328>)
   25bb0:	f00a fb44 	bl	3023c <assert_post_action>
   25bb4:	692a      	ldr	r2, [r5, #16]
   25bb6:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   25bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   25bbe:	f47f af78 	bne.w	25ab2 <nrfx_twim_xfer+0xae>
    p_reg->SHORTS = mask;
   25bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25bc6:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   25bc8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   25bcc:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25bce:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   25bd2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25bd6:	2300      	movs	r3, #0
   25bd8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   25bdc:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25be0:	2101      	movs	r1, #1
   25be2:	6221      	str	r1, [r4, #32]
   25be4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25be6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   25bea:	2900      	cmp	r1, #0
   25bec:	d0fb      	beq.n	25be6 <nrfx_twim_xfer+0x1e2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25bee:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   25bf2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   25bf6:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25bf8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   25bfc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   25c00:	2334      	movs	r3, #52	; 0x34
   25c02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   25c06:	fb03 6309 	mla	r3, r3, r9, r6
   25c0a:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   25c0c:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   25c0e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 25d54 <nrfx_twim_xfer+0x350>
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   25c12:	0738      	lsls	r0, r7, #28
   25c14:	d407      	bmi.n	25c26 <nrfx_twim_xfer+0x222>
   25c16:	782a      	ldrb	r2, [r5, #0]
   25c18:	2a03      	cmp	r2, #3
   25c1a:	d004      	beq.n	25c26 <nrfx_twim_xfer+0x222>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25c1c:	2201      	movs	r2, #1
   25c1e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   25c20:	686b      	ldr	r3, [r5, #4]
   25c22:	b903      	cbnz	r3, 25c26 <nrfx_twim_xfer+0x222>
   25c24:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   25c26:	2334      	movs	r3, #52	; 0x34
   25c28:	fb03 f309 	mul.w	r3, r3, r9
   25c2c:	18f2      	adds	r2, r6, r3
   25c2e:	58f3      	ldr	r3, [r6, r3]
   25c30:	2b00      	cmp	r3, #0
   25c32:	f040 8093 	bne.w	25d5c <nrfx_twim_xfer+0x358>
                transmission_finished = true;
   25c36:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25c38:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   25c3c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   25c40:	2900      	cmp	r1, #0
   25c42:	f040 80a3 	bne.w	25d8c <nrfx_twim_xfer+0x388>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   25c46:	3a00      	subs	r2, #0
   25c48:	bf18      	it	ne
   25c4a:	2201      	movne	r2, #1
   25c4c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   25c50:	2900      	cmp	r1, #0
   25c52:	f000 80a1 	beq.w	25d98 <nrfx_twim_xfer+0x394>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25c56:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   25c5a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25c5e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   25c62:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   25c66:	b110      	cbz	r0, 25c6e <nrfx_twim_xfer+0x26a>
   25c68:	f411 7f00 	tst.w	r1, #512	; 0x200
   25c6c:	d104      	bne.n	25c78 <nrfx_twim_xfer+0x274>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25c6e:	6225      	str	r5, [r4, #32]
   25c70:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   25c72:	2800      	cmp	r0, #0
   25c74:	d0e0      	beq.n	25c38 <nrfx_twim_xfer+0x234>
                    transmission_finished = false;
   25c76:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   25c78:	05c9      	lsls	r1, r1, #23
   25c7a:	f140 808d 	bpl.w	25d98 <nrfx_twim_xfer+0x394>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25c7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   25c82:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   25c86:	e7d7      	b.n	25c38 <nrfx_twim_xfer+0x234>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   25c88:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25c8a:	68ea      	ldr	r2, [r5, #12]
   25c8c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   25c90:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   25c94:	692b      	ldr	r3, [r5, #16]
   25c96:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   25c9a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   25c9e:	f47f af08 	bne.w	25ab2 <nrfx_twim_xfer+0xae>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   25ca2:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   25ca4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   25ca8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   25cac:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   25cb0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   25cb4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   25cb6:	2202      	movs	r2, #2
   25cb8:	fb03 6309 	mla	r3, r3, r9, r6
   25cbc:	e012      	b.n	25ce4 <nrfx_twim_xfer+0x2e0>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   25cbe:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25cc0:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   25cc2:	f017 0f20 	tst.w	r7, #32
   25cc6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   25cca:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   25cce:	f04f 0334 	mov.w	r3, #52	; 0x34
   25cd2:	d00b      	beq.n	25cec <nrfx_twim_xfer+0x2e8>
    p_reg->SHORTS = mask;
   25cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
   25cd8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   25cdc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   25ce0:	fb03 6309 	mla	r3, r3, r9, r6
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   25ce4:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25ce6:	2301      	movs	r3, #1
   25ce8:	6223      	str	r3, [r4, #32]
   25cea:	e78f      	b.n	25c0c <nrfx_twim_xfer+0x208>
    p_reg->SHORTS = mask;
   25cec:	f44f 7200 	mov.w	r2, #512	; 0x200
   25cf0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   25cf4:	e7df      	b.n	25cb6 <nrfx_twim_xfer+0x2b2>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   25cf6:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   25cf8:	68ea      	ldr	r2, [r5, #12]
   25cfa:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   25cfe:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   25d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   25d06:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   25d0a:	2334      	movs	r3, #52	; 0x34
   25d0c:	2202      	movs	r2, #2
   25d0e:	fb03 6309 	mla	r3, r3, r9, r6
   25d12:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25d14:	2301      	movs	r3, #1
   25d16:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   25d18:	2300      	movs	r3, #0
   25d1a:	e778      	b.n	25c0e <nrfx_twim_xfer+0x20a>
    switch (p_xfer_desc->type)
   25d1c:	2308      	movs	r3, #8
   25d1e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 25d58 <nrfx_twim_xfer+0x354>
   25d22:	e776      	b.n	25c12 <nrfx_twim_xfer+0x20e>
   25d24:	000401da 	.word	0x000401da
   25d28:	0003a56b 	.word	0x0003a56b
   25d2c:	00040155 	.word	0x00040155
   25d30:	20016958 	.word	0x20016958
   25d34:	000402d5 	.word	0x000402d5
   25d38:	00040285 	.word	0x00040285
   25d3c:	019c0202 	.word	0x019c0202
   25d40:	00040325 	.word	0x00040325
   25d44:	0004033b 	.word	0x0004033b
   25d48:	00040351 	.word	0x00040351
   25d4c:	0bad000a 	.word	0x0bad000a
   25d50:	0bad000b 	.word	0x0bad000b
   25d54:	0bad0000 	.word	0x0bad0000
   25d58:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   25d5c:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   25d5e:	bf44      	itt	mi
   25d60:	2300      	movmi	r3, #0
   25d62:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   25d64:	067b      	lsls	r3, r7, #25
   25d66:	d406      	bmi.n	25d76 <nrfx_twim_xfer+0x372>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   25d68:	2334      	movs	r3, #52	; 0x34
   25d6a:	fb03 6309 	mla	r3, r3, r9, r6
   25d6e:	689a      	ldr	r2, [r3, #8]
   25d70:	f042 0202 	orr.w	r2, r2, #2
   25d74:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   25d76:	2334      	movs	r3, #52	; 0x34
   25d78:	fb03 6609 	mla	r6, r3, r9, r6
   25d7c:	68b3      	ldr	r3, [r6, #8]
   25d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   25d82:	60b3      	str	r3, [r6, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   25d84:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   25d86:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   25d8a:	e694      	b.n	25ab6 <nrfx_twim_xfer+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25d8c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   25d90:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   25d94:	2201      	movs	r2, #1
   25d96:	e759      	b.n	25c4c <nrfx_twim_xfer+0x248>
        } while (!transmission_finished);
   25d98:	2a00      	cmp	r2, #0
   25d9a:	f43f af4d 	beq.w	25c38 <nrfx_twim_xfer+0x234>
        p_cb->busy = false;
   25d9e:	2134      	movs	r1, #52	; 0x34
   25da0:	2000      	movs	r0, #0
   25da2:	fb01 6209 	mla	r2, r1, r9, r6
    uint32_t error_source = p_reg->ERRORSRC;
   25da6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   25daa:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   25dae:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   25db2:	b18b      	cbz	r3, 25dd8 <nrfx_twim_xfer+0x3d4>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   25db4:	4a0f      	ldr	r2, [pc, #60]	; (25df4 <nrfx_twim_xfer+0x3f0>)
   25db6:	4910      	ldr	r1, [pc, #64]	; (25df8 <nrfx_twim_xfer+0x3f4>)
   25db8:	f013 0f01 	tst.w	r3, #1
   25dbc:	bf14      	ite	ne
   25dbe:	4690      	movne	r8, r2
   25dc0:	4688      	moveq	r8, r1
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   25dc2:	3201      	adds	r2, #1
   25dc4:	f013 0f02 	tst.w	r3, #2
   25dc8:	bf18      	it	ne
   25dca:	4690      	movne	r8, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   25dcc:	f013 0f04 	tst.w	r3, #4
   25dd0:	4b0a      	ldr	r3, [pc, #40]	; (25dfc <nrfx_twim_xfer+0x3f8>)
   25dd2:	bf18      	it	ne
   25dd4:	4698      	movne	r8, r3
   25dd6:	e66e      	b.n	25ab6 <nrfx_twim_xfer+0xb2>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   25dd8:	067b      	lsls	r3, r7, #25
   25dda:	f53f ae6c 	bmi.w	25ab6 <nrfx_twim_xfer+0xb2>
                !xfer_completeness_check(p_twim, p_cb))
   25dde:	4620      	mov	r0, r4
   25de0:	fb09 6101 	mla	r1, r9, r1, r6
   25de4:	f00f ffa9 	bl	35d3a <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   25de8:	4b03      	ldr	r3, [pc, #12]	; (25df8 <nrfx_twim_xfer+0x3f4>)
   25dea:	2800      	cmp	r0, #0
   25dec:	bf08      	it	eq
   25dee:	4698      	moveq	r8, r3
   25df0:	e661      	b.n	25ab6 <nrfx_twim_xfer+0xb2>
   25df2:	bf00      	nop
   25df4:	0bae0000 	.word	0x0bae0000
   25df8:	0bad0001 	.word	0x0bad0001
   25dfc:	0bae0002 	.word	0x0bae0002

00025e00 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   25e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   25e02:	4c62      	ldr	r4, [pc, #392]	; (25f8c <nrfx_twim_2_irq_handler+0x18c>)
{
   25e04:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   25e06:	6823      	ldr	r3, [r4, #0]
   25e08:	b95b      	cbnz	r3, 25e22 <nrfx_twim_2_irq_handler+0x22>
   25e0a:	4961      	ldr	r1, [pc, #388]	; (25f90 <nrfx_twim_2_irq_handler+0x190>)
   25e0c:	4861      	ldr	r0, [pc, #388]	; (25f94 <nrfx_twim_2_irq_handler+0x194>)
   25e0e:	f240 23cd 	movw	r3, #717	; 0x2cd
   25e12:	4a61      	ldr	r2, [pc, #388]	; (25f98 <nrfx_twim_2_irq_handler+0x198>)
   25e14:	f009 ff2c 	bl	2fc70 <printk>
   25e18:	f240 21cd 	movw	r1, #717	; 0x2cd
   25e1c:	485e      	ldr	r0, [pc, #376]	; (25f98 <nrfx_twim_2_irq_handler+0x198>)
   25e1e:	f00a fa0d 	bl	3023c <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25e22:	4b5e      	ldr	r3, [pc, #376]	; (25f9c <nrfx_twim_2_irq_handler+0x19c>)
   25e24:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   25e28:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   25e2a:	b1fa      	cbz	r2, 25e6c <nrfx_twim_2_irq_handler+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25e2c:	2200      	movs	r2, #0
   25e2e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   25e32:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25e36:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   25e3a:	b9ba      	cbnz	r2, 25e6c <nrfx_twim_2_irq_handler+0x6c>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   25e3c:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   25e3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   25e42:	2202      	movs	r2, #2
   25e44:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   25e46:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   25e48:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25e4c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   25e50:	b11a      	cbz	r2, 25e5a <nrfx_twim_2_irq_handler+0x5a>
    return p_reg->SHORTS;
   25e52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   25e56:	059e      	lsls	r6, r3, #22
   25e58:	d403      	bmi.n	25e62 <nrfx_twim_2_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25e5a:	2201      	movs	r2, #1
   25e5c:	4b4f      	ldr	r3, [pc, #316]	; (25f9c <nrfx_twim_2_irq_handler+0x19c>)
   25e5e:	621a      	str	r2, [r3, #32]
   25e60:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   25e62:	2301      	movs	r3, #1
   25e64:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   25e68:	b007      	add	sp, #28
   25e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25e6c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   25e70:	2b00      	cmp	r3, #0
   25e72:	d054      	beq.n	25f1e <nrfx_twim_2_irq_handler+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25e74:	2300      	movs	r3, #0
   25e76:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   25e7a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   25e7e:	6a23      	ldr	r3, [r4, #32]
   25e80:	065d      	lsls	r5, r3, #25
   25e82:	d40a      	bmi.n	25e9a <nrfx_twim_2_irq_handler+0x9a>
   25e84:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   25e88:	b93b      	cbnz	r3, 25e9a <nrfx_twim_2_irq_handler+0x9a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   25e8a:	4940      	ldr	r1, [pc, #256]	; (25f8c <nrfx_twim_2_irq_handler+0x18c>)
   25e8c:	4843      	ldr	r0, [pc, #268]	; (25f9c <nrfx_twim_2_irq_handler+0x19c>)
   25e8e:	f00f ff54 	bl	35d3a <xfer_completeness_check>
   25e92:	f080 0001 	eor.w	r0, r0, #1
   25e96:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   25e9a:	6a23      	ldr	r3, [r4, #32]
   25e9c:	f013 0704 	ands.w	r7, r3, #4
   25ea0:	d122      	bne.n	25ee8 <nrfx_twim_2_irq_handler+0xe8>
            event.xfer_desc = p_cb->xfer_desc;
   25ea2:	4e3f      	ldr	r6, [pc, #252]	; (25fa0 <nrfx_twim_2_irq_handler+0x1a0>)
   25ea4:	ad01      	add	r5, sp, #4
   25ea6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   25ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25eaa:	6833      	ldr	r3, [r6, #0]
   25eac:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   25eb0:	602b      	str	r3, [r5, #0]
   25eb2:	4b3a      	ldr	r3, [pc, #232]	; (25f9c <nrfx_twim_2_irq_handler+0x19c>)
   25eb4:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   25eb8:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   25ebc:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   25ec0:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   25ec4:	f1bc 0f00 	cmp.w	ip, #0
   25ec8:	d002      	beq.n	25ed0 <nrfx_twim_2_irq_handler+0xd0>
   25eca:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   25ece:	b15a      	cbz	r2, 25ee8 <nrfx_twim_2_irq_handler+0xe8>
    p_reg->SHORTS = mask;
   25ed0:	2200      	movs	r2, #0
   25ed2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   25ed6:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   25ed8:	4a32      	ldr	r2, [pc, #200]	; (25fa4 <nrfx_twim_2_irq_handler+0x1a4>)
   25eda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   25ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
   25ee2:	4b31      	ldr	r3, [pc, #196]	; (25fa8 <nrfx_twim_2_irq_handler+0x1a8>)
   25ee4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   25ee8:	4a2c      	ldr	r2, [pc, #176]	; (25f9c <nrfx_twim_2_irq_handler+0x19c>)
   25eea:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   25eee:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   25ef0:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   25ef4:	d53c      	bpl.n	25f70 <nrfx_twim_2_irq_handler+0x170>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   25ef6:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   25ef8:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   25efc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   25f00:	b90b      	cbnz	r3, 25f06 <nrfx_twim_2_irq_handler+0x106>
        p_cb->busy = false;
   25f02:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   25f06:	6a23      	ldr	r3, [r4, #32]
   25f08:	075b      	lsls	r3, r3, #29
   25f0a:	d503      	bpl.n	25f14 <nrfx_twim_2_irq_handler+0x114>
   25f0c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   25f10:	2b00      	cmp	r3, #0
   25f12:	d0a9      	beq.n	25e68 <nrfx_twim_2_irq_handler+0x68>
        p_cb->handler(&event, p_cb->p_context);
   25f14:	e9d4 3100 	ldrd	r3, r1, [r4]
   25f18:	4668      	mov	r0, sp
   25f1a:	4798      	blx	r3
}
   25f1c:	e7a4      	b.n	25e68 <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25f1e:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   25f22:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   25f26:	7b23      	ldrb	r3, [r4, #12]
   25f28:	b983      	cbnz	r3, 25f4c <nrfx_twim_2_irq_handler+0x14c>
            event.xfer_desc = p_cb->xfer_desc;
   25f2a:	4f1d      	ldr	r7, [pc, #116]	; (25fa0 <nrfx_twim_2_irq_handler+0x1a0>)
   25f2c:	ae01      	add	r6, sp, #4
   25f2e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   25f30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   25f32:	683b      	ldr	r3, [r7, #0]
   25f34:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   25f36:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   25f3a:	2b00      	cmp	r3, #0
   25f3c:	d1d4      	bne.n	25ee8 <nrfx_twim_2_irq_handler+0xe8>
    p_reg->SHORTS = mask;
   25f3e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   25f42:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   25f44:	4b17      	ldr	r3, [pc, #92]	; (25fa4 <nrfx_twim_2_irq_handler+0x1a4>)
   25f46:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   25f4a:	e7c8      	b.n	25ede <nrfx_twim_2_irq_handler+0xde>
    p_reg->SHORTS = mask;
   25f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
   25f50:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   25f54:	f240 2302 	movw	r3, #514	; 0x202
   25f58:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   25f5a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   25f5e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   25f62:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   25f64:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25f68:	2301      	movs	r3, #1
   25f6a:	60ab      	str	r3, [r5, #8]
   25f6c:	622b      	str	r3, [r5, #32]
            return;
   25f6e:	e77b      	b.n	25e68 <nrfx_twim_2_irq_handler+0x68>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   25f70:	0759      	lsls	r1, r3, #29
   25f72:	d501      	bpl.n	25f78 <nrfx_twim_2_irq_handler+0x178>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   25f74:	2302      	movs	r3, #2
   25f76:	e7bf      	b.n	25ef8 <nrfx_twim_2_irq_handler+0xf8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   25f78:	07da      	lsls	r2, r3, #31
   25f7a:	d501      	bpl.n	25f80 <nrfx_twim_2_irq_handler+0x180>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   25f7c:	2303      	movs	r3, #3
   25f7e:	e7bb      	b.n	25ef8 <nrfx_twim_2_irq_handler+0xf8>
    else if (p_cb->error)
   25f80:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   25f84:	2b00      	cmp	r3, #0
   25f86:	d0b7      	beq.n	25ef8 <nrfx_twim_2_irq_handler+0xf8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   25f88:	2304      	movs	r3, #4
   25f8a:	e7b5      	b.n	25ef8 <nrfx_twim_2_irq_handler+0xf8>
   25f8c:	20016958 	.word	0x20016958
   25f90:	0003f8c7 	.word	0x0003f8c7
   25f94:	0003a56b 	.word	0x0003a56b
   25f98:	00040155 	.word	0x00040155
   25f9c:	4000a000 	.word	0x4000a000
   25fa0:	20016964 	.word	0x20016964
   25fa4:	019c0202 	.word	0x019c0202
   25fa8:	e000e100 	.word	0xe000e100

00025fac <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25fac:	6803      	ldr	r3, [r0, #0]
{
   25fae:	b510      	push	{r4, lr}
    switch (port)
   25fb0:	095a      	lsrs	r2, r3, #5
   25fb2:	bf0c      	ite	eq
   25fb4:	f04f 32ff 	moveq.w	r2, #4294967295
   25fb8:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   25fba:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25fbe:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25fc2:	07db      	lsls	r3, r3, #31
{
   25fc4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25fc6:	d40b      	bmi.n	25fe0 <nrf_gpio_pin_port_decode+0x34>
   25fc8:	490f      	ldr	r1, [pc, #60]	; (26008 <nrf_gpio_pin_port_decode+0x5c>)
   25fca:	4810      	ldr	r0, [pc, #64]	; (2600c <nrf_gpio_pin_port_decode+0x60>)
   25fcc:	f44f 7305 	mov.w	r3, #532	; 0x214
   25fd0:	4a0f      	ldr	r2, [pc, #60]	; (26010 <nrf_gpio_pin_port_decode+0x64>)
   25fd2:	f009 fe4d 	bl	2fc70 <printk>
   25fd6:	f44f 7105 	mov.w	r1, #532	; 0x214
   25fda:	480d      	ldr	r0, [pc, #52]	; (26010 <nrf_gpio_pin_port_decode+0x64>)
   25fdc:	f00a f92e 	bl	3023c <assert_post_action>
    uint32_t pin_number = *p_pin;
   25fe0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   25fe2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25fe6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   25fe8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25fea:	d00b      	beq.n	26004 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   25fec:	4909      	ldr	r1, [pc, #36]	; (26014 <nrf_gpio_pin_port_decode+0x68>)
   25fee:	4807      	ldr	r0, [pc, #28]	; (2600c <nrf_gpio_pin_port_decode+0x60>)
   25ff0:	f240 2319 	movw	r3, #537	; 0x219
   25ff4:	4a06      	ldr	r2, [pc, #24]	; (26010 <nrf_gpio_pin_port_decode+0x64>)
   25ff6:	f009 fe3b 	bl	2fc70 <printk>
   25ffa:	f240 2119 	movw	r1, #537	; 0x219
   25ffe:	4804      	ldr	r0, [pc, #16]	; (26010 <nrf_gpio_pin_port_decode+0x64>)
   26000:	f00a f91c 	bl	3023c <assert_post_action>
}
   26004:	4804      	ldr	r0, [pc, #16]	; (26018 <nrf_gpio_pin_port_decode+0x6c>)
   26006:	bd10      	pop	{r4, pc}
   26008:	0003d086 	.word	0x0003d086
   2600c:	0003a56b 	.word	0x0003a56b
   26010:	0003d053 	.word	0x0003d053
   26014:	00040e81 	.word	0x00040e81
   26018:	40842500 	.word	0x40842500

0002601c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   2601c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2601e:	460c      	mov	r4, r1
   26020:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   26022:	f00f feba 	bl	35d9a <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   26026:	4620      	mov	r0, r4
   26028:	f00f feb7 	bl	35d9a <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2602c:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   2602e:	f240 650d 	movw	r5, #1549	; 0x60d
   26032:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26034:	f7ff ffba 	bl	25fac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   26038:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2603a:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   2603c:	3380      	adds	r3, #128	; 0x80
   2603e:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26042:	a801      	add	r0, sp, #4
   26044:	9401      	str	r4, [sp, #4]
   26046:	f7ff ffb1 	bl	25fac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2604a:	9b01      	ldr	r3, [sp, #4]
   2604c:	3380      	adds	r3, #128	; 0x80
   2604e:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   26052:	2004      	movs	r0, #4
   26054:	f00f fe57 	bl	35d06 <nrfx_busy_wait>
   26058:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2605a:	a801      	add	r0, sp, #4
   2605c:	9401      	str	r4, [sp, #4]
   2605e:	f7ff ffa5 	bl	25fac <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   26062:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   26064:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   26066:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   26068:	07db      	lsls	r3, r3, #31
   2606a:	d414      	bmi.n	26096 <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2606c:	a801      	add	r0, sp, #4
   2606e:	9601      	str	r6, [sp, #4]
   26070:	f7ff ff9c 	bl	25fac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   26074:	9b01      	ldr	r3, [sp, #4]
   26076:	3d01      	subs	r5, #1
   26078:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   2607c:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   2607e:	2004      	movs	r0, #4
   26080:	f00f fe41 	bl	35d06 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   26084:	4630      	mov	r0, r6
   26086:	f00f fe88 	bl	35d9a <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   2608a:	2004      	movs	r0, #4
   2608c:	f00f fe3b 	bl	35d06 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   26090:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   26094:	d1e1      	bne.n	2605a <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26096:	a801      	add	r0, sp, #4
   26098:	9401      	str	r4, [sp, #4]
   2609a:	f7ff ff87 	bl	25fac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2609e:	2301      	movs	r3, #1
   260a0:	9a01      	ldr	r2, [sp, #4]
   260a2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   260a4:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   260a6:	2004      	movs	r0, #4
   260a8:	f00f fe2d 	bl	35d06 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   260ac:	4620      	mov	r0, r4
   260ae:	f00f fe74 	bl	35d9a <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   260b2:	2004      	movs	r0, #4
   260b4:	f00f fe27 	bl	35d06 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   260b8:	a801      	add	r0, sp, #4
   260ba:	9401      	str	r4, [sp, #4]
   260bc:	f7ff ff76 	bl	25fac <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   260c0:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   260c2:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   260c4:	4803      	ldr	r0, [pc, #12]	; (260d4 <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   260c6:	40d3      	lsrs	r3, r2
   260c8:	f003 0301 	and.w	r3, r3, #1
   260cc:	1ac0      	subs	r0, r0, r3
   260ce:	b003      	add	sp, #12
   260d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   260d2:	bf00      	nop
   260d4:	0bad0001 	.word	0x0bad0001

000260d8 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   260d8:	2303      	movs	r3, #3
static void _DoInit(void) {
   260da:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   260dc:	4c10      	ldr	r4, [pc, #64]	; (26120 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   260de:	4a11      	ldr	r2, [pc, #68]	; (26124 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   260e0:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   260e2:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   260e4:	4b10      	ldr	r3, [pc, #64]	; (26128 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   260e6:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   260e8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   260ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
   260ee:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   260f0:	2300      	movs	r3, #0
   260f2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   260f4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   260f6:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   260f8:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   260fa:	4a0c      	ldr	r2, [pc, #48]	; (2612c <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   260fc:	490c      	ldr	r1, [pc, #48]	; (26130 <_DoInit+0x58>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   260fe:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   26100:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
   26102:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   26104:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   26106:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   26108:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2610a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   2610c:	f011 fc7e 	bl	37a0c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   26110:	4620      	mov	r0, r4
   26112:	4908      	ldr	r1, [pc, #32]	; (26134 <_DoInit+0x5c>)
   26114:	f011 fc7a 	bl	37a0c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   26118:	2320      	movs	r3, #32
   2611a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   2611c:	bd10      	pop	{r4, pc}
   2611e:	bf00      	nop
   26120:	2001698c 	.word	0x2001698c
   26124:	00040367 	.word	0x00040367
   26128:	2001d677 	.word	0x2001d677
   2612c:	2001d667 	.word	0x2001d667
   26130:	00040370 	.word	0x00040370
   26134:	00040374 	.word	0x00040374

00026138 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   26138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2613c:	f04f 0b18 	mov.w	fp, #24
   26140:	4f22      	ldr	r7, [pc, #136]	; (261cc <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   26142:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   26144:	fb0b 7200 	mla	r2, fp, r0, r7
   26148:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2614a:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2614c:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2614e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   26150:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   26152:	d834      	bhi.n	261be <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   26154:	f8d2 a020 	ldr.w	sl, [r2, #32]
   26158:	ebaa 0905 	sub.w	r9, sl, r5
   2615c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   26160:	4294      	cmp	r4, r2
   26162:	d811      	bhi.n	26188 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   26164:	f04f 0918 	mov.w	r9, #24
   26168:	fb06 9309 	mla	r3, r6, r9, r9
   2616c:	443b      	add	r3, r7
   2616e:	6858      	ldr	r0, [r3, #4]
   26170:	4622      	mov	r2, r4
   26172:	4641      	mov	r1, r8
   26174:	4428      	add	r0, r5
   26176:	f011 fb04 	bl	37782 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   2617a:	fb09 7606 	mla	r6, r9, r6, r7
   2617e:	442c      	add	r4, r5
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
      return 1;
   26180:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   26182:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   26184:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   26188:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2618a:	429c      	cmp	r4, r3
   2618c:	d81b      	bhi.n	261c6 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2618e:	fb00 bb0b 	mla	fp, r0, fp, fp
   26192:	44bb      	add	fp, r7
   26194:	f8db 0004 	ldr.w	r0, [fp, #4]
   26198:	464a      	mov	r2, r9
   2619a:	4428      	add	r0, r5
   2619c:	442c      	add	r4, r5
   2619e:	f011 faf0 	bl	37782 <memcpy>
      if (NumBytes) {
   261a2:	ebb4 040a 	subs.w	r4, r4, sl
   261a6:	d006      	beq.n	261b6 <SEGGER_RTT_WriteSkipNoLock+0x7e>
   261a8:	4622      	mov	r2, r4
   261aa:	f8db 0004 	ldr.w	r0, [fp, #4]
   261ae:	eb08 0109 	add.w	r1, r8, r9
   261b2:	f011 fae6 	bl	37782 <memcpy>
      pRing->WrOff = NumBytes;
   261b6:	2018      	movs	r0, #24
   261b8:	fb00 7606 	mla	r6, r0, r6, r7
   261bc:	e7e0      	b.n	26180 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   261be:	3b01      	subs	r3, #1
   261c0:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   261c2:	42a3      	cmp	r3, r4
   261c4:	d2ce      	bcs.n	26164 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   261c6:	2000      	movs	r0, #0
   261c8:	e7dc      	b.n	26184 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   261ca:	bf00      	nop
   261cc:	2001698c 	.word	0x2001698c

000261d0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   261d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   261d2:	2318      	movs	r3, #24
   261d4:	4c17      	ldr	r4, [pc, #92]	; (26234 <SEGGER_RTT_WriteNoLock+0x64>)
   261d6:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   261da:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   261de:	4425      	add	r5, r4
  switch (pRing->Flags) {
   261e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   261e2:	460f      	mov	r7, r1
  switch (pRing->Flags) {
   261e4:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   261e6:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   261e8:	d00f      	beq.n	2620a <SEGGER_RTT_WriteNoLock+0x3a>
   261ea:	2c02      	cmp	r4, #2
   261ec:	d01a      	beq.n	26224 <SEGGER_RTT_WriteNoLock+0x54>
   261ee:	b9f4      	cbnz	r4, 2622e <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   261f0:	4628      	mov	r0, r5
   261f2:	f00f fdde 	bl	35db2 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   261f6:	4286      	cmp	r6, r0
   261f8:	d805      	bhi.n	26206 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   261fa:	4632      	mov	r2, r6
   261fc:	4639      	mov	r1, r7
   261fe:	4628      	mov	r0, r5
   26200:	f00f fde5 	bl	35dce <_WriteNoCheck>
   26204:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   26206:	4620      	mov	r0, r4
   26208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   2620a:	4628      	mov	r0, r5
   2620c:	f00f fdd1 	bl	35db2 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   26210:	4286      	cmp	r6, r0
   26212:	4634      	mov	r4, r6
   26214:	bf28      	it	cs
   26216:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   26218:	4639      	mov	r1, r7
   2621a:	4622      	mov	r2, r4
   2621c:	4628      	mov	r0, r5
   2621e:	f00f fdd6 	bl	35dce <_WriteNoCheck>
    break;
   26222:	e7f0      	b.n	26206 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   26224:	4628      	mov	r0, r5
}
   26226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   2622a:	f00f bded 	b.w	35e08 <_WriteBlocking>
  switch (pRing->Flags) {
   2622e:	2400      	movs	r4, #0
  return Status;
   26230:	e7e9      	b.n	26206 <SEGGER_RTT_WriteNoLock+0x36>
   26232:	bf00      	nop
   26234:	2001698c 	.word	0x2001698c

00026238 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   26238:	2218      	movs	r2, #24
   2623a:	4b03      	ldr	r3, [pc, #12]	; (26248 <SEGGER_RTT_HasDataUp+0x10>)
   2623c:	fb02 3300 	mla	r3, r2, r0, r3
   26240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   26242:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   26244:	1a80      	subs	r0, r0, r2
   26246:	4770      	bx	lr
   26248:	2001698c 	.word	0x2001698c

0002624c <rpc_handle_data_message>:
   2624c:	6803      	ldr	r3, [r0, #0]
   2624e:	b510      	push	{r4, lr}
   26250:	b29b      	uxth	r3, r3
   26252:	2b04      	cmp	r3, #4
   26254:	d009      	beq.n	2626a <rpc_handle_data_message+0x1e>
   26256:	2b03      	cmp	r3, #3
   26258:	d010      	beq.n	2627c <rpc_handle_data_message+0x30>
   2625a:	2b06      	cmp	r3, #6
   2625c:	d010      	beq.n	26280 <rpc_handle_data_message+0x34>
   2625e:	2b07      	cmp	r3, #7
   26260:	d010      	beq.n	26284 <rpc_handle_data_message+0x38>
   26262:	6880      	ldr	r0, [r0, #8]
   26264:	b980      	cbnz	r0, 26288 <rpc_handle_data_message+0x3c>
   26266:	2000      	movs	r0, #0
   26268:	bd10      	pop	{r4, pc}
   2626a:	2300      	movs	r3, #0
   2626c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26270:	4a07      	ldr	r2, [pc, #28]	; (26290 <rpc_handle_data_message+0x44>)
   26272:	2100      	movs	r1, #0
   26274:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   26278:	685b      	ldr	r3, [r3, #4]
   2627a:	4718      	bx	r3
   2627c:	2301      	movs	r3, #1
   2627e:	e7f5      	b.n	2626c <rpc_handle_data_message+0x20>
   26280:	2302      	movs	r3, #2
   26282:	e7f3      	b.n	2626c <rpc_handle_data_message+0x20>
   26284:	2303      	movs	r3, #3
   26286:	e7f1      	b.n	2626c <rpc_handle_data_message+0x20>
   26288:	f00f fe38 	bl	35efc <rpc_transport_data_free>
   2628c:	e7eb      	b.n	26266 <rpc_handle_data_message+0x1a>
   2628e:	bf00      	nop
   26290:	00039448 	.word	0x00039448

00026294 <ipc_trace_init>:
   26294:	4b01      	ldr	r3, [pc, #4]	; (2629c <ipc_trace_init+0x8>)
   26296:	6018      	str	r0, [r3, #0]
   26298:	4770      	bx	lr
   2629a:	bf00      	nop
   2629c:	20016a40 	.word	0x20016a40

000262a0 <nrf_modem_os_trace_irq_handler>:
   262a0:	b508      	push	{r3, lr}
   262a2:	4b11      	ldr	r3, [pc, #68]	; (262e8 <nrf_modem_os_trace_irq_handler+0x48>)
   262a4:	781b      	ldrb	r3, [r3, #0]
   262a6:	b90b      	cbnz	r3, 262ac <nrf_modem_os_trace_irq_handler+0xc>
   262a8:	f7fa fe22 	bl	20ef0 <nrf_modem_os_trace_irq_clear>
   262ac:	4b0f      	ldr	r3, [pc, #60]	; (262ec <nrf_modem_os_trace_irq_handler+0x4c>)
   262ae:	6818      	ldr	r0, [r3, #0]
   262b0:	b128      	cbz	r0, 262be <nrf_modem_os_trace_irq_handler+0x1e>
   262b2:	6882      	ldr	r2, [r0, #8]
   262b4:	6843      	ldr	r3, [r0, #4]
   262b6:	429a      	cmp	r2, r3
   262b8:	d001      	beq.n	262be <nrf_modem_os_trace_irq_handler+0x1e>
   262ba:	f00f fe23 	bl	35f04 <trace_write>
   262be:	4b0c      	ldr	r3, [pc, #48]	; (262f0 <nrf_modem_os_trace_irq_handler+0x50>)
   262c0:	6818      	ldr	r0, [r3, #0]
   262c2:	b128      	cbz	r0, 262d0 <nrf_modem_os_trace_irq_handler+0x30>
   262c4:	6882      	ldr	r2, [r0, #8]
   262c6:	6843      	ldr	r3, [r0, #4]
   262c8:	429a      	cmp	r2, r3
   262ca:	d001      	beq.n	262d0 <nrf_modem_os_trace_irq_handler+0x30>
   262cc:	f00f fe1a 	bl	35f04 <trace_write>
   262d0:	4b08      	ldr	r3, [pc, #32]	; (262f4 <nrf_modem_os_trace_irq_handler+0x54>)
   262d2:	6818      	ldr	r0, [r3, #0]
   262d4:	b138      	cbz	r0, 262e6 <nrf_modem_os_trace_irq_handler+0x46>
   262d6:	6882      	ldr	r2, [r0, #8]
   262d8:	6843      	ldr	r3, [r0, #4]
   262da:	429a      	cmp	r2, r3
   262dc:	d003      	beq.n	262e6 <nrf_modem_os_trace_irq_handler+0x46>
   262de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   262e2:	f00f be0f 	b.w	35f04 <trace_write>
   262e6:	bd08      	pop	{r3, pc}
   262e8:	2001da77 	.word	0x2001da77
   262ec:	20016a3c 	.word	0x20016a3c
   262f0:	20016a34 	.word	0x20016a34
   262f4:	20016a38 	.word	0x20016a38

000262f8 <ipc_trace_handle>:
   262f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262fc:	4b43      	ldr	r3, [pc, #268]	; (2640c <ipc_trace_handle+0x114>)
   262fe:	681b      	ldr	r3, [r3, #0]
   26300:	6919      	ldr	r1, [r3, #16]
   26302:	f8d3 b014 	ldr.w	fp, [r3, #20]
   26306:	7c1a      	ldrb	r2, [r3, #16]
   26308:	2200      	movs	r2, #0
   2630a:	741a      	strb	r2, [r3, #16]
   2630c:	7c58      	ldrb	r0, [r3, #17]
   2630e:	745a      	strb	r2, [r3, #17]
   26310:	7c98      	ldrb	r0, [r3, #18]
   26312:	749a      	strb	r2, [r3, #18]
   26314:	7cd8      	ldrb	r0, [r3, #19]
   26316:	74da      	strb	r2, [r3, #19]
   26318:	7d18      	ldrb	r0, [r3, #20]
   2631a:	751a      	strb	r2, [r3, #20]
   2631c:	7d58      	ldrb	r0, [r3, #21]
   2631e:	755a      	strb	r2, [r3, #21]
   26320:	7d98      	ldrb	r0, [r3, #22]
   26322:	759a      	strb	r2, [r3, #22]
   26324:	7dd8      	ldrb	r0, [r3, #23]
   26326:	75da      	strb	r2, [r3, #23]
   26328:	2900      	cmp	r1, #0
   2632a:	d037      	beq.n	2639c <ipc_trace_handle+0xa4>
   2632c:	3901      	subs	r1, #1
   2632e:	2903      	cmp	r1, #3
   26330:	d834      	bhi.n	2639c <ipc_trace_handle+0xa4>
   26332:	e8df f001 	tbb	[pc, r1]
   26336:	6502      	.short	0x6502
   26338:	534c      	.short	0x534c
   2633a:	4a35      	ldr	r2, [pc, #212]	; (26410 <ipc_trace_handle+0x118>)
   2633c:	7811      	ldrb	r1, [r2, #0]
   2633e:	b109      	cbz	r1, 26344 <ipc_trace_handle+0x4c>
   26340:	2100      	movs	r1, #0
   26342:	7011      	strb	r1, [r2, #0]
   26344:	f8db 2008 	ldr.w	r2, [fp, #8]
   26348:	4f32      	ldr	r7, [pc, #200]	; (26414 <ipc_trace_handle+0x11c>)
   2634a:	9201      	str	r2, [sp, #4]
   2634c:	2200      	movs	r2, #0
   2634e:	4691      	mov	r9, r2
   26350:	4615      	mov	r5, r2
   26352:	4611      	mov	r1, r2
   26354:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 26418 <ipc_trace_handle+0x120>
   26358:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2641c <ipc_trace_handle+0x124>
   2635c:	f8d7 c000 	ldr.w	ip, [r7]
   26360:	f8de 8000 	ldr.w	r8, [lr]
   26364:	f8da 4000 	ldr.w	r4, [sl]
   26368:	9801      	ldr	r0, [sp, #4]
   2636a:	4288      	cmp	r0, r1
   2636c:	d119      	bne.n	263a2 <ipc_trace_handle+0xaa>
   2636e:	b10d      	cbz	r5, 26374 <ipc_trace_handle+0x7c>
   26370:	f8ca 4000 	str.w	r4, [sl]
   26374:	f1b9 0f00 	cmp.w	r9, #0
   26378:	d001      	beq.n	2637e <ipc_trace_handle+0x86>
   2637a:	f8ce 8000 	str.w	r8, [lr]
   2637e:	b10a      	cbz	r2, 26384 <ipc_trace_handle+0x8c>
   26380:	f8c7 c000 	str.w	ip, [r7]
   26384:	7a1a      	ldrb	r2, [r3, #8]
   26386:	2101      	movs	r1, #1
   26388:	2200      	movs	r2, #0
   2638a:	7219      	strb	r1, [r3, #8]
   2638c:	7a59      	ldrb	r1, [r3, #9]
   2638e:	725a      	strb	r2, [r3, #9]
   26390:	7a99      	ldrb	r1, [r3, #10]
   26392:	729a      	strb	r2, [r3, #10]
   26394:	7ada      	ldrb	r2, [r3, #11]
   26396:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   2639a:	72da      	strb	r2, [r3, #11]
   2639c:	b003      	add	sp, #12
   2639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263a2:	1c88      	adds	r0, r1, #2
   263a4:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   263a8:	6840      	ldr	r0, [r0, #4]
   263aa:	7806      	ldrb	r6, [r0, #0]
   263ac:	2e62      	cmp	r6, #98	; 0x62
   263ae:	d007      	beq.n	263c0 <ipc_trace_handle+0xc8>
   263b0:	2e63      	cmp	r6, #99	; 0x63
   263b2:	d009      	beq.n	263c8 <ipc_trace_handle+0xd0>
   263b4:	2e61      	cmp	r6, #97	; 0x61
   263b6:	bf04      	itt	eq
   263b8:	4604      	moveq	r4, r0
   263ba:	2501      	moveq	r5, #1
   263bc:	3101      	adds	r1, #1
   263be:	e7d3      	b.n	26368 <ipc_trace_handle+0x70>
   263c0:	4680      	mov	r8, r0
   263c2:	f04f 0901 	mov.w	r9, #1
   263c6:	e7f9      	b.n	263bc <ipc_trace_handle+0xc4>
   263c8:	4684      	mov	ip, r0
   263ca:	2201      	movs	r2, #1
   263cc:	e7f6      	b.n	263bc <ipc_trace_handle+0xc4>
   263ce:	2101      	movs	r1, #1
   263d0:	4a0f      	ldr	r2, [pc, #60]	; (26410 <ipc_trace_handle+0x118>)
   263d2:	7011      	strb	r1, [r2, #0]
   263d4:	7a1a      	ldrb	r2, [r3, #8]
   263d6:	2103      	movs	r1, #3
   263d8:	2200      	movs	r2, #0
   263da:	e7d6      	b.n	2638a <ipc_trace_handle+0x92>
   263dc:	7a19      	ldrb	r1, [r3, #8]
   263de:	2104      	movs	r1, #4
   263e0:	7219      	strb	r1, [r3, #8]
   263e2:	7a59      	ldrb	r1, [r3, #9]
   263e4:	725a      	strb	r2, [r3, #9]
   263e6:	7a99      	ldrb	r1, [r3, #10]
   263e8:	729a      	strb	r2, [r3, #10]
   263ea:	7ad9      	ldrb	r1, [r3, #11]
   263ec:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   263f0:	72d9      	strb	r1, [r3, #11]
   263f2:	4b07      	ldr	r3, [pc, #28]	; (26410 <ipc_trace_handle+0x118>)
   263f4:	701a      	strb	r2, [r3, #0]
   263f6:	b003      	add	sp, #12
   263f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263fc:	f7ff bf50 	b.w	262a0 <nrf_modem_os_trace_irq_handler>
   26400:	b003      	add	sp, #12
   26402:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26406:	f7fa bd6b 	b.w	20ee0 <nrf_modem_os_trace_irq_set>
   2640a:	bf00      	nop
   2640c:	20016a40 	.word	0x20016a40
   26410:	2001da77 	.word	0x2001da77
   26414:	20016a38 	.word	0x20016a38
   26418:	20016a34 	.word	0x20016a34
   2641c:	20016a3c 	.word	0x20016a3c

00026420 <rpc_trace_coredump_in_progress>:
   26420:	4b01      	ldr	r3, [pc, #4]	; (26428 <rpc_trace_coredump_in_progress+0x8>)
   26422:	7818      	ldrb	r0, [r3, #0]
   26424:	4770      	bx	lr
   26426:	bf00      	nop
   26428:	2001da77 	.word	0x2001da77

0002642c <handle_modem_rpc_msg>:
   2642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26430:	4606      	mov	r6, r0
   26432:	460f      	mov	r7, r1
   26434:	2500      	movs	r5, #0
   26436:	f8df 8074 	ldr.w	r8, [pc, #116]	; 264ac <handle_modem_rpc_msg+0x80>
   2643a:	6833      	ldr	r3, [r6, #0]
   2643c:	42ab      	cmp	r3, r5
   2643e:	d801      	bhi.n	26444 <handle_modem_rpc_msg+0x18>
   26440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26444:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   26448:	68a3      	ldr	r3, [r4, #8]
   2644a:	b1fb      	cbz	r3, 2648c <handle_modem_rpc_msg+0x60>
   2644c:	6863      	ldr	r3, [r4, #4]
   2644e:	b2db      	uxtb	r3, r3
   26450:	2b01      	cmp	r3, #1
   26452:	d11b      	bne.n	2648c <handle_modem_rpc_msg+0x60>
   26454:	6862      	ldr	r2, [r4, #4]
   26456:	f8b8 3000 	ldrh.w	r3, [r8]
   2645a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2645e:	d115      	bne.n	2648c <handle_modem_rpc_msg+0x60>
   26460:	2f02      	cmp	r7, #2
   26462:	68a0      	ldr	r0, [r4, #8]
   26464:	d114      	bne.n	26490 <handle_modem_rpc_msg+0x64>
   26466:	f7ff fef1 	bl	2624c <rpc_handle_data_message>
   2646a:	2802      	cmp	r0, #2
   2646c:	d00e      	beq.n	2648c <handle_modem_rpc_msg+0x60>
   2646e:	2801      	cmp	r0, #1
   26470:	d113      	bne.n	2649a <handle_modem_rpc_msg+0x6e>
   26472:	6863      	ldr	r3, [r4, #4]
   26474:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26478:	f043 0302 	orr.w	r3, r3, #2
   2647c:	6063      	str	r3, [r4, #4]
   2647e:	f8b8 3000 	ldrh.w	r3, [r8]
   26482:	3301      	adds	r3, #1
   26484:	f8a8 3000 	strh.w	r3, [r8]
   26488:	f7fa fd1a 	bl	20ec0 <nrf_modem_os_application_irq_set>
   2648c:	3501      	adds	r5, #1
   2648e:	e7d4      	b.n	2643a <handle_modem_rpc_msg+0xe>
   26490:	6801      	ldr	r1, [r0, #0]
   26492:	0c09      	lsrs	r1, r1, #16
   26494:	f00f fce8 	bl	35e68 <rpc_handle_ctrl_message>
   26498:	e7e7      	b.n	2646a <handle_modem_rpc_msg+0x3e>
   2649a:	2800      	cmp	r0, #0
   2649c:	d1ef      	bne.n	2647e <handle_modem_rpc_msg+0x52>
   2649e:	6863      	ldr	r3, [r4, #4]
   264a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   264a4:	f043 0303 	orr.w	r3, r3, #3
   264a8:	e7e8      	b.n	2647c <handle_modem_rpc_msg+0x50>
   264aa:	bf00      	nop
   264ac:	2001ad60 	.word	0x2001ad60

000264b0 <rpc_transport_ipc_data_msg_send>:
   264b0:	4b11      	ldr	r3, [pc, #68]	; (264f8 <rpc_transport_ipc_data_msg_send+0x48>)
   264b2:	b530      	push	{r4, r5, lr}
   264b4:	7819      	ldrb	r1, [r3, #0]
   264b6:	b9e1      	cbnz	r1, 264f2 <rpc_transport_ipc_data_msg_send+0x42>
   264b8:	4b10      	ldr	r3, [pc, #64]	; (264fc <rpc_transport_ipc_data_msg_send+0x4c>)
   264ba:	4a11      	ldr	r2, [pc, #68]	; (26500 <rpc_transport_ipc_data_msg_send+0x50>)
   264bc:	681b      	ldr	r3, [r3, #0]
   264be:	6812      	ldr	r2, [r2, #0]
   264c0:	1ac3      	subs	r3, r0, r3
   264c2:	f3c3 1389 	ubfx	r3, r3, #6, #10
   264c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   264ca:	4d0e      	ldr	r5, [pc, #56]	; (26504 <rpc_transport_ipc_data_msg_send+0x54>)
   264cc:	685a      	ldr	r2, [r3, #4]
   264ce:	882c      	ldrh	r4, [r5, #0]
   264d0:	b292      	uxth	r2, r2
   264d2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   264d6:	605a      	str	r2, [r3, #4]
   264d8:	685a      	ldr	r2, [r3, #4]
   264da:	4608      	mov	r0, r1
   264dc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   264e0:	f042 0201 	orr.w	r2, r2, #1
   264e4:	605a      	str	r2, [r3, #4]
   264e6:	2201      	movs	r2, #1
   264e8:	4b07      	ldr	r3, [pc, #28]	; (26508 <rpc_transport_ipc_data_msg_send+0x58>)
   264ea:	3401      	adds	r4, #1
   264ec:	802c      	strh	r4, [r5, #0]
   264ee:	60da      	str	r2, [r3, #12]
   264f0:	bd30      	pop	{r4, r5, pc}
   264f2:	f04f 30ff 	mov.w	r0, #4294967295
   264f6:	e7fb      	b.n	264f0 <rpc_transport_ipc_data_msg_send+0x40>
   264f8:	2001da79 	.word	0x2001da79
   264fc:	20016a5c 	.word	0x20016a5c
   26500:	20016a60 	.word	0x20016a60
   26504:	2001ad62 	.word	0x2001ad62
   26508:	4002a000 	.word	0x4002a000

0002650c <rpc_transport_ipc_ctrl_msg_send>:
   2650c:	4b0e      	ldr	r3, [pc, #56]	; (26548 <rpc_transport_ipc_ctrl_msg_send+0x3c>)
   2650e:	490f      	ldr	r1, [pc, #60]	; (2654c <rpc_transport_ipc_ctrl_msg_send+0x40>)
   26510:	681b      	ldr	r3, [r3, #0]
   26512:	880a      	ldrh	r2, [r1, #0]
   26514:	1ac0      	subs	r0, r0, r3
   26516:	f3c0 1389 	ubfx	r3, r0, #6, #10
   2651a:	480d      	ldr	r0, [pc, #52]	; (26550 <rpc_transport_ipc_ctrl_msg_send+0x44>)
   2651c:	6800      	ldr	r0, [r0, #0]
   2651e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   26522:	6843      	ldr	r3, [r0, #4]
   26524:	b29b      	uxth	r3, r3
   26526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2652a:	3201      	adds	r2, #1
   2652c:	800a      	strh	r2, [r1, #0]
   2652e:	2201      	movs	r2, #1
   26530:	6043      	str	r3, [r0, #4]
   26532:	6843      	ldr	r3, [r0, #4]
   26534:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26538:	f043 0301 	orr.w	r3, r3, #1
   2653c:	6043      	str	r3, [r0, #4]
   2653e:	4b05      	ldr	r3, [pc, #20]	; (26554 <rpc_transport_ipc_ctrl_msg_send+0x48>)
   26540:	2000      	movs	r0, #0
   26542:	605a      	str	r2, [r3, #4]
   26544:	4770      	bx	lr
   26546:	bf00      	nop
   26548:	20016a54 	.word	0x20016a54
   2654c:	2001ad62 	.word	0x2001ad62
   26550:	20016a58 	.word	0x20016a58
   26554:	4002a000 	.word	0x4002a000

00026558 <rpc_transport_ipc_data_msg_alloc>:
   26558:	4b05      	ldr	r3, [pc, #20]	; (26570 <rpc_transport_ipc_data_msg_alloc+0x18>)
   2655a:	781b      	ldrb	r3, [r3, #0]
   2655c:	b933      	cbnz	r3, 2656c <rpc_transport_ipc_data_msg_alloc+0x14>
   2655e:	4b05      	ldr	r3, [pc, #20]	; (26574 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   26560:	2202      	movs	r2, #2
   26562:	6819      	ldr	r1, [r3, #0]
   26564:	4b04      	ldr	r3, [pc, #16]	; (26578 <rpc_transport_ipc_data_msg_alloc+0x20>)
   26566:	6818      	ldr	r0, [r3, #0]
   26568:	f00f bd0e 	b.w	35f88 <rpc_transport_ipc_msg_alloc>
   2656c:	2000      	movs	r0, #0
   2656e:	4770      	bx	lr
   26570:	2001da79 	.word	0x2001da79
   26574:	20016a5c 	.word	0x20016a5c
   26578:	20016a60 	.word	0x20016a60

0002657c <rpc_transport_ipc_ctrl_msg_alloc>:
   2657c:	4b03      	ldr	r3, [pc, #12]	; (2658c <rpc_transport_ipc_ctrl_msg_alloc+0x10>)
   2657e:	2201      	movs	r2, #1
   26580:	6819      	ldr	r1, [r3, #0]
   26582:	4b03      	ldr	r3, [pc, #12]	; (26590 <rpc_transport_ipc_ctrl_msg_alloc+0x14>)
   26584:	6818      	ldr	r0, [r3, #0]
   26586:	f00f bcff 	b.w	35f88 <rpc_transport_ipc_msg_alloc>
   2658a:	bf00      	nop
   2658c:	20016a54 	.word	0x20016a54
   26590:	20016a58 	.word	0x20016a58

00026594 <rpc_transport_ipc_data_alloc>:
   26594:	4b03      	ldr	r3, [pc, #12]	; (265a4 <rpc_transport_ipc_data_alloc+0x10>)
   26596:	781b      	ldrb	r3, [r3, #0]
   26598:	b90b      	cbnz	r3, 2659e <rpc_transport_ipc_data_alloc+0xa>
   2659a:	f7fa bcbf 	b.w	20f1c <nrf_modem_os_shm_tx_alloc>
   2659e:	2000      	movs	r0, #0
   265a0:	4770      	bx	lr
   265a2:	bf00      	nop
   265a4:	2001da79 	.word	0x2001da79

000265a8 <nrf_modem_os_application_irq_handler>:
   265a8:	b510      	push	{r4, lr}
   265aa:	4c06      	ldr	r4, [pc, #24]	; (265c4 <nrf_modem_os_application_irq_handler+0x1c>)
   265ac:	f7fa fc90 	bl	20ed0 <nrf_modem_os_application_irq_clear>
   265b0:	6820      	ldr	r0, [r4, #0]
   265b2:	2101      	movs	r1, #1
   265b4:	f7ff ff3a 	bl	2642c <handle_modem_rpc_msg>
   265b8:	6860      	ldr	r0, [r4, #4]
   265ba:	2102      	movs	r1, #2
   265bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   265c0:	f7ff bf34 	b.w	2642c <handle_modem_rpc_msg>
   265c4:	20016a48 	.word	0x20016a48

000265c8 <rpc_transport_ipc_msg_free>:
   265c8:	2300      	movs	r3, #0
   265ca:	4911      	ldr	r1, [pc, #68]	; (26610 <rpc_transport_ipc_msg_free+0x48>)
   265cc:	b530      	push	{r4, r5, lr}
   265ce:	680a      	ldr	r2, [r1, #0]
   265d0:	6814      	ldr	r4, [r2, #0]
   265d2:	42a3      	cmp	r3, r4
   265d4:	d10b      	bne.n	265ee <rpc_transport_ipc_msg_free+0x26>
   265d6:	2300      	movs	r3, #0
   265d8:	684a      	ldr	r2, [r1, #4]
   265da:	6811      	ldr	r1, [r2, #0]
   265dc:	428b      	cmp	r3, r1
   265de:	d015      	beq.n	2660c <rpc_transport_ipc_msg_free+0x44>
   265e0:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   265e4:	68a4      	ldr	r4, [r4, #8]
   265e6:	42a0      	cmp	r0, r4
   265e8:	d008      	beq.n	265fc <rpc_transport_ipc_msg_free+0x34>
   265ea:	3301      	adds	r3, #1
   265ec:	e7f6      	b.n	265dc <rpc_transport_ipc_msg_free+0x14>
   265ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   265f2:	68ad      	ldr	r5, [r5, #8]
   265f4:	42a8      	cmp	r0, r5
   265f6:	d001      	beq.n	265fc <rpc_transport_ipc_msg_free+0x34>
   265f8:	3301      	adds	r3, #1
   265fa:	e7ea      	b.n	265d2 <rpc_transport_ipc_msg_free+0xa>
   265fc:	00db      	lsls	r3, r3, #3
   265fe:	3304      	adds	r3, #4
   26600:	58d1      	ldr	r1, [r2, r3]
   26602:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   26606:	f041 0103 	orr.w	r1, r1, #3
   2660a:	50d1      	str	r1, [r2, r3]
   2660c:	bd30      	pop	{r4, r5, pc}
   2660e:	bf00      	nop
   26610:	20016a48 	.word	0x20016a48

00026614 <rpc_transport_ipc_data_free>:
   26614:	4b0d      	ldr	r3, [pc, #52]	; (2664c <rpc_transport_ipc_data_free+0x38>)
   26616:	b510      	push	{r4, lr}
   26618:	681b      	ldr	r3, [r3, #0]
   2661a:	4604      	mov	r4, r0
   2661c:	4298      	cmp	r0, r3
   2661e:	d30a      	bcc.n	26636 <rpc_transport_ipc_data_free+0x22>
   26620:	4b0b      	ldr	r3, [pc, #44]	; (26650 <rpc_transport_ipc_data_free+0x3c>)
   26622:	681b      	ldr	r3, [r3, #0]
   26624:	4298      	cmp	r0, r3
   26626:	d206      	bcs.n	26636 <rpc_transport_ipc_data_free+0x22>
   26628:	f7ff ffa8 	bl	2657c <rpc_transport_ipc_ctrl_msg_alloc>
   2662c:	b938      	cbnz	r0, 2663e <rpc_transport_ipc_data_free+0x2a>
   2662e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26632:	f7fa bc45 	b.w	20ec0 <nrf_modem_os_application_irq_set>
   26636:	4620      	mov	r0, r4
   26638:	f7fa fc78 	bl	20f2c <nrf_modem_os_shm_tx_free>
   2663c:	e7f7      	b.n	2662e <rpc_transport_ipc_data_free+0x1a>
   2663e:	4a05      	ldr	r2, [pc, #20]	; (26654 <rpc_transport_ipc_data_free+0x40>)
   26640:	6084      	str	r4, [r0, #8]
   26642:	6002      	str	r2, [r0, #0]
   26644:	f7ff ff62 	bl	2650c <rpc_transport_ipc_ctrl_msg_send>
   26648:	e7f1      	b.n	2662e <rpc_transport_ipc_data_free+0x1a>
   2664a:	bf00      	nop
   2664c:	20016a68 	.word	0x20016a68
   26650:	20016a64 	.word	0x20016a64
   26654:	00020001 	.word	0x00020001

00026658 <rpc_transport_ipc_init>:
   26658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2665c:	2200      	movs	r2, #0
   2665e:	b095      	sub	sp, #84	; 0x54
   26660:	4605      	mov	r5, r0
   26662:	494f      	ldr	r1, [pc, #316]	; (267a0 <rpc_transport_ipc_init+0x148>)
   26664:	7900      	ldrb	r0, [r0, #4]
   26666:	f7fe fc19 	bl	24e9c <nrfx_ipc_init>
   2666a:	2238      	movs	r2, #56	; 0x38
   2666c:	2100      	movs	r1, #0
   2666e:	a803      	add	r0, sp, #12
   26670:	f011 f8a7 	bl	377c2 <memset>
   26674:	2302      	movs	r3, #2
   26676:	9304      	str	r3, [sp, #16]
   26678:	2308      	movs	r3, #8
   2667a:	9306      	str	r3, [sp, #24]
   2667c:	2320      	movs	r3, #32
   2667e:	9308      	str	r3, [sp, #32]
   26680:	2301      	movs	r3, #1
   26682:	930b      	str	r3, [sp, #44]	; 0x2c
   26684:	2304      	movs	r3, #4
   26686:	930d      	str	r3, [sp, #52]	; 0x34
   26688:	2310      	movs	r3, #16
   2668a:	f04f 0c40 	mov.w	ip, #64	; 0x40
   2668e:	930f      	str	r3, [sp, #60]	; 0x3c
   26690:	2380      	movs	r3, #128	; 0x80
   26692:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   26696:	23d5      	movs	r3, #213	; 0xd5
   26698:	a803      	add	r0, sp, #12
   2669a:	9313      	str	r3, [sp, #76]	; 0x4c
   2669c:	f7fe fc26 	bl	24eec <nrfx_ipc_config_load>
   266a0:	682b      	ldr	r3, [r5, #0]
   266a2:	2100      	movs	r1, #0
   266a4:	685a      	ldr	r2, [r3, #4]
   266a6:	6818      	ldr	r0, [r3, #0]
   266a8:	f011 f88b 	bl	377c2 <memset>
   266ac:	682a      	ldr	r2, [r5, #0]
   266ae:	6814      	ldr	r4, [r2, #0]
   266b0:	69d3      	ldr	r3, [r2, #28]
   266b2:	f104 0660 	add.w	r6, r4, #96	; 0x60
   266b6:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   266ba:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   266be:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   266c2:	f104 0920 	add.w	r9, r4, #32
   266c6:	2b00      	cmp	r3, #0
   266c8:	d05c      	beq.n	26784 <rpc_transport_ipc_init+0x12c>
   266ca:	f104 0840 	add.w	r8, r4, #64	; 0x40
   266ce:	4935      	ldr	r1, [pc, #212]	; (267a4 <rpc_transport_ipc_init+0x14c>)
   266d0:	f8c1 9000 	str.w	r9, [r1]
   266d4:	b13b      	cbz	r3, 266e6 <rpc_transport_ipc_init+0x8e>
   266d6:	6992      	ldr	r2, [r2, #24]
   266d8:	4640      	mov	r0, r8
   266da:	f8c8 2004 	str.w	r2, [r8, #4]
   266de:	f8c8 3000 	str.w	r3, [r8]
   266e2:	f7ff fdd7 	bl	26294 <ipc_trace_init>
   266e6:	6828      	ldr	r0, [r5, #0]
   266e8:	4d2f      	ldr	r5, [pc, #188]	; (267a8 <rpc_transport_ipc_init+0x150>)
   266ea:	2300      	movs	r3, #0
   266ec:	602f      	str	r7, [r5, #0]
   266ee:	4d2f      	ldr	r5, [pc, #188]	; (267ac <rpc_transport_ipc_init+0x154>)
   266f0:	2101      	movs	r1, #1
   266f2:	602e      	str	r6, [r5, #0]
   266f4:	2508      	movs	r5, #8
   266f6:	6902      	ldr	r2, [r0, #16]
   266f8:	6940      	ldr	r0, [r0, #20]
   266fa:	7023      	strb	r3, [r4, #0]
   266fc:	7063      	strb	r3, [r4, #1]
   266fe:	70e3      	strb	r3, [r4, #3]
   26700:	70a1      	strb	r1, [r4, #2]
   26702:	6062      	str	r2, [r4, #4]
   26704:	60a0      	str	r0, [r4, #8]
   26706:	60e6      	str	r6, [r4, #12]
   26708:	6127      	str	r7, [r4, #16]
   2670a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
   2670e:	f8c4 9014 	str.w	r9, [r4, #20]
   26712:	f8c4 8018 	str.w	r8, [r4, #24]
   26716:	707b      	strb	r3, [r7, #1]
   26718:	70bb      	strb	r3, [r7, #2]
   2671a:	70fb      	strb	r3, [r7, #3]
   2671c:	2714      	movs	r7, #20
   2671e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
   26722:	4d23      	ldr	r5, [pc, #140]	; (267b0 <rpc_transport_ipc_init+0x158>)
   26724:	7073      	strb	r3, [r6, #1]
   26726:	f8c5 b000 	str.w	fp, [r5]
   2672a:	4d22      	ldr	r5, [pc, #136]	; (267b4 <rpc_transport_ipc_init+0x15c>)
   2672c:	70b3      	strb	r3, [r6, #2]
   2672e:	f8c5 a000 	str.w	sl, [r5]
   26732:	4d21      	ldr	r5, [pc, #132]	; (267b8 <rpc_transport_ipc_init+0x160>)
   26734:	70f3      	strb	r3, [r6, #3]
   26736:	602a      	str	r2, [r5, #0]
   26738:	4402      	add	r2, r0
   2673a:	4820      	ldr	r0, [pc, #128]	; (267bc <rpc_transport_ipc_init+0x164>)
   2673c:	4e20      	ldr	r6, [pc, #128]	; (267c0 <rpc_transport_ipc_init+0x168>)
   2673e:	6002      	str	r2, [r0, #0]
   26740:	4a20      	ldr	r2, [pc, #128]	; (267c4 <rpc_transport_ipc_init+0x16c>)
   26742:	4d21      	ldr	r5, [pc, #132]	; (267c8 <rpc_transport_ipc_init+0x170>)
   26744:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   26748:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   2674c:	4c1f      	ldr	r4, [pc, #124]	; (267cc <rpc_transport_ipc_init+0x174>)
   2674e:	4a20      	ldr	r2, [pc, #128]	; (267d0 <rpc_transport_ipc_init+0x178>)
   26750:	6023      	str	r3, [r4, #0]
   26752:	9302      	str	r3, [sp, #8]
   26754:	7031      	strb	r1, [r6, #0]
   26756:	6113      	str	r3, [r2, #16]
   26758:	6913      	ldr	r3, [r2, #16]
   2675a:	9302      	str	r3, [sp, #8]
   2675c:	9b02      	ldr	r3, [sp, #8]
   2675e:	7833      	ldrb	r3, [r6, #0]
   26760:	2b01      	cmp	r3, #1
   26762:	d103      	bne.n	2676c <rpc_transport_ipc_init+0x114>
   26764:	b985      	cbnz	r5, 26788 <rpc_transport_ipc_init+0x130>
   26766:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   2676a:	6023      	str	r3, [r4, #0]
   2676c:	6824      	ldr	r4, [r4, #0]
   2676e:	b9a4      	cbnz	r4, 2679a <rpc_transport_ipc_init+0x142>
   26770:	4b18      	ldr	r3, [pc, #96]	; (267d4 <rpc_transport_ipc_init+0x17c>)
   26772:	701c      	strb	r4, [r3, #0]
   26774:	4b18      	ldr	r3, [pc, #96]	; (267d8 <rpc_transport_ipc_init+0x180>)
   26776:	801c      	strh	r4, [r3, #0]
   26778:	4b18      	ldr	r3, [pc, #96]	; (267dc <rpc_transport_ipc_init+0x184>)
   2677a:	801c      	strh	r4, [r3, #0]
   2677c:	4620      	mov	r0, r4
   2677e:	b015      	add	sp, #84	; 0x54
   26780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26784:	4698      	mov	r8, r3
   26786:	e7a2      	b.n	266ce <rpc_transport_ipc_init+0x76>
   26788:	2000      	movs	r0, #0
   2678a:	a901      	add	r1, sp, #4
   2678c:	9701      	str	r7, [sp, #4]
   2678e:	f7fa f94d 	bl	20a2c <nrf_modem_os_timedwait>
   26792:	9b01      	ldr	r3, [sp, #4]
   26794:	3b14      	subs	r3, #20
   26796:	441d      	add	r5, r3
   26798:	e7e1      	b.n	2675e <rpc_transport_ipc_init+0x106>
   2679a:	f7fe fbeb 	bl	24f74 <nrfx_ipc_uninit>
   2679e:	e7ed      	b.n	2677c <rpc_transport_ipc_init+0x124>
   267a0:	000267e1 	.word	0x000267e1
   267a4:	20016a50 	.word	0x20016a50
   267a8:	20016a60 	.word	0x20016a60
   267ac:	20016a58 	.word	0x20016a58
   267b0:	20016a5c 	.word	0x20016a5c
   267b4:	20016a54 	.word	0x20016a54
   267b8:	20016a68 	.word	0x20016a68
   267bc:	20016a64 	.word	0x20016a64
   267c0:	2001da78 	.word	0x2001da78
   267c4:	4002a000 	.word	0x4002a000
   267c8:	000249f0 	.word	0x000249f0
   267cc:	20016a44 	.word	0x20016a44
   267d0:	40005600 	.word	0x40005600
   267d4:	2001da79 	.word	0x2001da79
   267d8:	2001ad62 	.word	0x2001ad62
   267dc:	2001ad60 	.word	0x2001ad60

000267e0 <ipc_irq_handler>:
   267e0:	b538      	push	{r3, r4, r5, lr}
   267e2:	4604      	mov	r4, r0
   267e4:	0620      	lsls	r0, r4, #24
   267e6:	d50c      	bpl.n	26802 <ipc_irq_handler+0x22>
   267e8:	f7ff fd86 	bl	262f8 <ipc_trace_handle>
   267ec:	f7ff fe18 	bl	26420 <rpc_trace_coredump_in_progress>
   267f0:	b138      	cbz	r0, 26802 <ipc_irq_handler+0x22>
   267f2:	22e0      	movs	r2, #224	; 0xe0
   267f4:	4b3f      	ldr	r3, [pc, #252]	; (268f4 <ipc_irq_handler+0x114>)
   267f6:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   267fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   267fe:	605a      	str	r2, [r3, #4]
   26800:	bd38      	pop	{r3, r4, r5, pc}
   26802:	07e1      	lsls	r1, r4, #31
   26804:	d548      	bpl.n	26898 <ipc_irq_handler+0xb8>
   26806:	f248 0202 	movw	r2, #32770	; 0x8002
   2680a:	4b3b      	ldr	r3, [pc, #236]	; (268f8 <ipc_irq_handler+0x118>)
   2680c:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   26810:	4293      	cmp	r3, r2
   26812:	d035      	beq.n	26880 <ipc_irq_handler+0xa0>
   26814:	d81b      	bhi.n	2684e <ipc_irq_handler+0x6e>
   26816:	f243 0232 	movw	r2, #12338	; 0x3032
   2681a:	4293      	cmp	r3, r2
   2681c:	d036      	beq.n	2688c <ipc_irq_handler+0xac>
   2681e:	d80b      	bhi.n	26838 <ipc_irq_handler+0x58>
   26820:	3b01      	subs	r3, #1
   26822:	2b01      	cmp	r3, #1
   26824:	d8ec      	bhi.n	26800 <ipc_irq_handler+0x20>
   26826:	2203      	movs	r2, #3
   26828:	200e      	movs	r0, #14
   2682a:	4b34      	ldr	r3, [pc, #208]	; (268fc <ipc_irq_handler+0x11c>)
   2682c:	701a      	strb	r2, [r3, #0]
   2682e:	4b34      	ldr	r3, [pc, #208]	; (26900 <ipc_irq_handler+0x120>)
   26830:	6018      	str	r0, [r3, #0]
   26832:	f010 fc1d 	bl	37070 <rpc_transport_ipc_fault_handler>
   26836:	e7e3      	b.n	26800 <ipc_irq_handler+0x20>
   26838:	f248 0201 	movw	r2, #32769	; 0x8001
   2683c:	4293      	cmp	r3, r2
   2683e:	d1df      	bne.n	26800 <ipc_irq_handler+0x20>
   26840:	2203      	movs	r2, #3
   26842:	4b2e      	ldr	r3, [pc, #184]	; (268fc <ipc_irq_handler+0x11c>)
   26844:	701a      	strb	r2, [r3, #0]
   26846:	2216      	movs	r2, #22
   26848:	4b2d      	ldr	r3, [pc, #180]	; (26900 <ipc_irq_handler+0x120>)
   2684a:	601a      	str	r2, [r3, #0]
   2684c:	e7d8      	b.n	26800 <ipc_irq_handler+0x20>
   2684e:	4a2d      	ldr	r2, [pc, #180]	; (26904 <ipc_irq_handler+0x124>)
   26850:	4293      	cmp	r3, r2
   26852:	d80c      	bhi.n	2686e <ipc_irq_handler+0x8e>
   26854:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   26858:	d80c      	bhi.n	26874 <ipc_irq_handler+0x94>
   2685a:	f248 0203 	movw	r2, #32771	; 0x8003
   2685e:	4293      	cmp	r3, r2
   26860:	d1ce      	bne.n	26800 <ipc_irq_handler+0x20>
   26862:	2203      	movs	r2, #3
   26864:	4b25      	ldr	r3, [pc, #148]	; (268fc <ipc_irq_handler+0x11c>)
   26866:	701a      	strb	r2, [r3, #0]
   26868:	220c      	movs	r2, #12
   2686a:	4b25      	ldr	r3, [pc, #148]	; (26900 <ipc_irq_handler+0x120>)
   2686c:	e7ed      	b.n	2684a <ipc_irq_handler+0x6a>
   2686e:	4a26      	ldr	r2, [pc, #152]	; (26908 <ipc_irq_handler+0x128>)
   26870:	4293      	cmp	r3, r2
   26872:	d1c5      	bne.n	26800 <ipc_irq_handler+0x20>
   26874:	2103      	movs	r1, #3
   26876:	4a21      	ldr	r2, [pc, #132]	; (268fc <ipc_irq_handler+0x11c>)
   26878:	7011      	strb	r1, [r2, #0]
   2687a:	4a21      	ldr	r2, [pc, #132]	; (26900 <ipc_irq_handler+0x120>)
   2687c:	6013      	str	r3, [r2, #0]
   2687e:	e7bf      	b.n	26800 <ipc_irq_handler+0x20>
   26880:	2203      	movs	r2, #3
   26882:	4b1e      	ldr	r3, [pc, #120]	; (268fc <ipc_irq_handler+0x11c>)
   26884:	701a      	strb	r2, [r3, #0]
   26886:	222d      	movs	r2, #45	; 0x2d
   26888:	4b1d      	ldr	r3, [pc, #116]	; (26900 <ipc_irq_handler+0x120>)
   2688a:	e7de      	b.n	2684a <ipc_irq_handler+0x6a>
   2688c:	2203      	movs	r2, #3
   2688e:	4b1b      	ldr	r3, [pc, #108]	; (268fc <ipc_irq_handler+0x11c>)
   26890:	701a      	strb	r2, [r3, #0]
   26892:	2205      	movs	r2, #5
   26894:	4b1a      	ldr	r3, [pc, #104]	; (26900 <ipc_irq_handler+0x120>)
   26896:	e7d8      	b.n	2684a <ipc_irq_handler+0x6a>
   26898:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   2689c:	d003      	beq.n	268a6 <ipc_irq_handler+0xc6>
   2689e:	2202      	movs	r2, #2
   268a0:	4b16      	ldr	r3, [pc, #88]	; (268fc <ipc_irq_handler+0x11c>)
   268a2:	701a      	strb	r2, [r3, #0]
   268a4:	e7ac      	b.n	26800 <ipc_irq_handler+0x20>
   268a6:	0762      	lsls	r2, r4, #29
   268a8:	d504      	bpl.n	268b4 <ipc_irq_handler+0xd4>
   268aa:	4b14      	ldr	r3, [pc, #80]	; (268fc <ipc_irq_handler+0x11c>)
   268ac:	781a      	ldrb	r2, [r3, #0]
   268ae:	b93a      	cbnz	r2, 268c0 <ipc_irq_handler+0xe0>
   268b0:	f7fa fb06 	bl	20ec0 <nrf_modem_os_application_irq_set>
   268b4:	06e3      	lsls	r3, r4, #27
   268b6:	d5a3      	bpl.n	26800 <ipc_irq_handler+0x20>
   268b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   268bc:	f7fa bb00 	b.w	20ec0 <nrf_modem_os_application_irq_set>
   268c0:	2a01      	cmp	r2, #1
   268c2:	d1f7      	bne.n	268b4 <ipc_irq_handler+0xd4>
   268c4:	4a11      	ldr	r2, [pc, #68]	; (2690c <ipc_irq_handler+0x12c>)
   268c6:	4812      	ldr	r0, [pc, #72]	; (26910 <ipc_irq_handler+0x130>)
   268c8:	6812      	ldr	r2, [r2, #0]
   268ca:	6891      	ldr	r1, [r2, #8]
   268cc:	6041      	str	r1, [r0, #4]
   268ce:	6852      	ldr	r2, [r2, #4]
   268d0:	6002      	str	r2, [r0, #0]
   268d2:	b101      	cbz	r1, 268d6 <ipc_irq_handler+0xf6>
   268d4:	b92a      	cbnz	r2, 268e2 <ipc_irq_handler+0x102>
   268d6:	2203      	movs	r2, #3
   268d8:	701a      	strb	r2, [r3, #0]
   268da:	2216      	movs	r2, #22
   268dc:	4b08      	ldr	r3, [pc, #32]	; (26900 <ipc_irq_handler+0x120>)
   268de:	601a      	str	r2, [r3, #0]
   268e0:	e7e8      	b.n	268b4 <ipc_irq_handler+0xd4>
   268e2:	6809      	ldr	r1, [r1, #0]
   268e4:	2910      	cmp	r1, #16
   268e6:	d8f6      	bhi.n	268d6 <ipc_irq_handler+0xf6>
   268e8:	6812      	ldr	r2, [r2, #0]
   268ea:	2a10      	cmp	r2, #16
   268ec:	d8f3      	bhi.n	268d6 <ipc_irq_handler+0xf6>
   268ee:	701d      	strb	r5, [r3, #0]
   268f0:	e7e0      	b.n	268b4 <ipc_irq_handler+0xd4>
   268f2:	bf00      	nop
   268f4:	e000e100 	.word	0xe000e100
   268f8:	4002a000 	.word	0x4002a000
   268fc:	2001da78 	.word	0x2001da78
   26900:	20016a44 	.word	0x20016a44
   26904:	04400004 	.word	0x04400004
   26908:	05500001 	.word	0x05500001
   2690c:	20016a50 	.word	0x20016a50
   26910:	20016a48 	.word	0x20016a48

00026914 <gnss_client_event_handler>:
   26914:	f850 1b08 	ldr.w	r1, [r0], #8
   26918:	4b01      	ldr	r3, [pc, #4]	; (26920 <gnss_client_event_handler+0xc>)
   2691a:	0c09      	lsrs	r1, r1, #16
   2691c:	681b      	ldr	r3, [r3, #0]
   2691e:	4718      	bx	r3
   26920:	20016a6c 	.word	0x20016a6c

00026924 <rpc_gnss_client_set_handler>:
   26924:	4b01      	ldr	r3, [pc, #4]	; (2692c <rpc_gnss_client_set_handler+0x8>)
   26926:	6018      	str	r0, [r3, #0]
   26928:	4770      	bx	lr
   2692a:	bf00      	nop
   2692c:	20016a6c 	.word	0x20016a6c

00026930 <interface_init>:
   26930:	b508      	push	{r3, lr}
   26932:	f44f 72c6 	mov.w	r2, #396	; 0x18c
   26936:	2100      	movs	r1, #0
   26938:	4802      	ldr	r0, [pc, #8]	; (26944 <interface_init+0x14>)
   2693a:	f010 ff42 	bl	377c2 <memset>
   2693e:	2000      	movs	r0, #0
   26940:	bd08      	pop	{r3, pc}
   26942:	bf00      	nop
   26944:	20016a70 	.word	0x20016a70

00026948 <interface_socket_allocate>:
   26948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2694a:	4606      	mov	r6, r0
   2694c:	2400      	movs	r4, #0
   2694e:	272c      	movs	r7, #44	; 0x2c
   26950:	4b0f      	ldr	r3, [pc, #60]	; (26990 <interface_socket_allocate+0x48>)
   26952:	fb07 f004 	mul.w	r0, r7, r4
   26956:	181d      	adds	r5, r3, r0
   26958:	5818      	ldr	r0, [r3, r0]
   2695a:	b988      	cbnz	r0, 26980 <interface_socket_allocate+0x38>
   2695c:	f04f 37ff 	mov.w	r7, #4294967295
   26960:	2301      	movs	r3, #1
   26962:	4628      	mov	r0, r5
   26964:	61af      	str	r7, [r5, #24]
   26966:	602b      	str	r3, [r5, #0]
   26968:	f00f fcd1 	bl	3630e <packet_handler_alloc_and_init>
   2696c:	b168      	cbz	r0, 2698a <interface_socket_allocate+0x42>
   2696e:	4628      	mov	r0, r5
   26970:	f00f fce4 	bl	3633c <socket_free>
   26974:	200c      	movs	r0, #12
   26976:	f7fa f911 	bl	20b9c <nrf_modem_os_errno_set>
   2697a:	f04f 34ff 	mov.w	r4, #4294967295
   2697e:	e005      	b.n	2698c <interface_socket_allocate+0x44>
   26980:	3401      	adds	r4, #1
   26982:	2c09      	cmp	r4, #9
   26984:	d1e5      	bne.n	26952 <interface_socket_allocate+0xa>
   26986:	2069      	movs	r0, #105	; 0x69
   26988:	e7f5      	b.n	26976 <interface_socket_allocate+0x2e>
   2698a:	6035      	str	r5, [r6, #0]
   2698c:	4620      	mov	r0, r4
   2698e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26990:	20016a70 	.word	0x20016a70

00026994 <interface_socket_free>:
   26994:	2808      	cmp	r0, #8
   26996:	d805      	bhi.n	269a4 <interface_socket_free+0x10>
   26998:	222c      	movs	r2, #44	; 0x2c
   2699a:	4b03      	ldr	r3, [pc, #12]	; (269a8 <interface_socket_free+0x14>)
   2699c:	fb02 3000 	mla	r0, r2, r0, r3
   269a0:	f00f bccc 	b.w	3633c <socket_free>
   269a4:	4770      	bx	lr
   269a6:	bf00      	nop
   269a8:	20016a70 	.word	0x20016a70

000269ac <interface_socket_packet_handler_update>:
   269ac:	2808      	cmp	r0, #8
   269ae:	b570      	push	{r4, r5, r6, lr}
   269b0:	d812      	bhi.n	269d8 <interface_socket_packet_handler_update+0x2c>
   269b2:	242c      	movs	r4, #44	; 0x2c
   269b4:	4360      	muls	r0, r4
   269b6:	4b09      	ldr	r3, [pc, #36]	; (269dc <interface_socket_packet_handler_update+0x30>)
   269b8:	181d      	adds	r5, r3, r0
   269ba:	581b      	ldr	r3, [r3, r0]
   269bc:	b163      	cbz	r3, 269d8 <interface_socket_packet_handler_update+0x2c>
   269be:	4628      	mov	r0, r5
   269c0:	69ee      	ldr	r6, [r5, #28]
   269c2:	f00f fca4 	bl	3630e <packet_handler_alloc_and_init>
   269c6:	4604      	mov	r4, r0
   269c8:	b920      	cbnz	r0, 269d4 <interface_socket_packet_handler_update+0x28>
   269ca:	4630      	mov	r0, r6
   269cc:	f010 fb32 	bl	37034 <packet_handler_delete>
   269d0:	4620      	mov	r0, r4
   269d2:	bd70      	pop	{r4, r5, r6, pc}
   269d4:	61ee      	str	r6, [r5, #28]
   269d6:	e7fb      	b.n	269d0 <interface_socket_packet_handler_update+0x24>
   269d8:	2402      	movs	r4, #2
   269da:	e7f9      	b.n	269d0 <interface_socket_packet_handler_update+0x24>
   269dc:	20016a70 	.word	0x20016a70

000269e0 <interface_socket_wait>:
   269e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269e2:	4616      	mov	r6, r2
   269e4:	222c      	movs	r2, #44	; 0x2c
   269e6:	4350      	muls	r0, r2
   269e8:	461f      	mov	r7, r3
   269ea:	4b0d      	ldr	r3, [pc, #52]	; (26a20 <interface_socket_wait+0x40>)
   269ec:	460d      	mov	r5, r1
   269ee:	181c      	adds	r4, r3, r0
   269f0:	581b      	ldr	r3, [r3, r0]
   269f2:	4033      	ands	r3, r6
   269f4:	428b      	cmp	r3, r1
   269f6:	d101      	bne.n	269fc <interface_socket_wait+0x1c>
   269f8:	2000      	movs	r0, #0
   269fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   269fc:	6863      	ldr	r3, [r4, #4]
   269fe:	2b00      	cmp	r3, #0
   26a00:	d1fa      	bne.n	269f8 <interface_socket_wait+0x18>
   26a02:	6823      	ldr	r3, [r4, #0]
   26a04:	4033      	ands	r3, r6
   26a06:	42ab      	cmp	r3, r5
   26a08:	d0f6      	beq.n	269f8 <interface_socket_wait+0x18>
   26a0a:	6863      	ldr	r3, [r4, #4]
   26a0c:	2b00      	cmp	r3, #0
   26a0e:	d1f3      	bne.n	269f8 <interface_socket_wait+0x18>
   26a10:	4639      	mov	r1, r7
   26a12:	4620      	mov	r0, r4
   26a14:	f7fa f80a 	bl	20a2c <nrf_modem_os_timedwait>
   26a18:	2800      	cmp	r0, #0
   26a1a:	d0f2      	beq.n	26a02 <interface_socket_wait+0x22>
   26a1c:	e7ed      	b.n	269fa <interface_socket_wait+0x1a>
   26a1e:	bf00      	nop
   26a20:	20016a70 	.word	0x20016a70

00026a24 <interface_from_internal_id_search>:
   26a24:	4b0a      	ldr	r3, [pc, #40]	; (26a50 <interface_from_internal_id_search+0x2c>)
   26a26:	4602      	mov	r2, r0
   26a28:	b530      	push	{r4, r5, lr}
   26a2a:	2000      	movs	r0, #0
   26a2c:	461c      	mov	r4, r3
   26a2e:	212c      	movs	r1, #44	; 0x2c
   26a30:	fb01 f500 	mul.w	r5, r1, r0
   26a34:	5965      	ldr	r5, [r4, r5]
   26a36:	b115      	cbz	r5, 26a3e <interface_from_internal_id_search+0x1a>
   26a38:	699d      	ldr	r5, [r3, #24]
   26a3a:	4295      	cmp	r5, r2
   26a3c:	d006      	beq.n	26a4c <interface_from_internal_id_search+0x28>
   26a3e:	3001      	adds	r0, #1
   26a40:	2809      	cmp	r0, #9
   26a42:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   26a46:	d1f3      	bne.n	26a30 <interface_from_internal_id_search+0xc>
   26a48:	f04f 30ff 	mov.w	r0, #4294967295
   26a4c:	bd30      	pop	{r4, r5, pc}
   26a4e:	bf00      	nop
   26a50:	20016a70 	.word	0x20016a70

00026a54 <interface_socket_from_handle_get>:
   26a54:	2808      	cmp	r0, #8
   26a56:	d808      	bhi.n	26a6a <interface_socket_from_handle_get+0x16>
   26a58:	232c      	movs	r3, #44	; 0x2c
   26a5a:	4343      	muls	r3, r0
   26a5c:	4a04      	ldr	r2, [pc, #16]	; (26a70 <interface_socket_from_handle_get+0x1c>)
   26a5e:	18d0      	adds	r0, r2, r3
   26a60:	58d3      	ldr	r3, [r2, r3]
   26a62:	2b00      	cmp	r3, #0
   26a64:	bf08      	it	eq
   26a66:	2000      	moveq	r0, #0
   26a68:	4770      	bx	lr
   26a6a:	2000      	movs	r0, #0
   26a6c:	4770      	bx	lr
   26a6e:	bf00      	nop
   26a70:	20016a70 	.word	0x20016a70

00026a74 <interface_socket_setopt>:
   26a74:	2808      	cmp	r0, #8
   26a76:	b570      	push	{r4, r5, r6, lr}
   26a78:	461c      	mov	r4, r3
   26a7a:	d82e      	bhi.n	26ada <interface_socket_setopt+0x66>
   26a7c:	252c      	movs	r5, #44	; 0x2c
   26a7e:	4368      	muls	r0, r5
   26a80:	4b17      	ldr	r3, [pc, #92]	; (26ae0 <interface_socket_setopt+0x6c>)
   26a82:	181d      	adds	r5, r3, r0
   26a84:	581b      	ldr	r3, [r3, r0]
   26a86:	b343      	cbz	r3, 26ada <interface_socket_setopt+0x66>
   26a88:	2901      	cmp	r1, #1
   26a8a:	d005      	beq.n	26a98 <interface_socket_setopt+0x24>
   26a8c:	202a      	movs	r0, #42	; 0x2a
   26a8e:	f7fa f885 	bl	20b9c <nrf_modem_os_errno_set>
   26a92:	f04f 30ff 	mov.w	r0, #4294967295
   26a96:	e01d      	b.n	26ad4 <interface_socket_setopt+0x60>
   26a98:	f1a2 0314 	sub.w	r3, r2, #20
   26a9c:	2b01      	cmp	r3, #1
   26a9e:	d8f5      	bhi.n	26a8c <interface_socket_setopt+0x18>
   26aa0:	9b04      	ldr	r3, [sp, #16]
   26aa2:	2b08      	cmp	r3, #8
   26aa4:	d117      	bne.n	26ad6 <interface_socket_setopt+0x62>
   26aa6:	b1b4      	cbz	r4, 26ad6 <interface_socket_setopt+0x62>
   26aa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   26aac:	2000      	movs	r0, #0
   26aae:	6863      	ldr	r3, [r4, #4]
   26ab0:	4606      	mov	r6, r0
   26ab2:	fbb3 f3f1 	udiv	r3, r3, r1
   26ab6:	6824      	ldr	r4, [r4, #0]
   26ab8:	fbe4 3601 	umlal	r3, r6, r4, r1
   26abc:	f04f 34ff 	mov.w	r4, #4294967295
   26ac0:	429c      	cmp	r4, r3
   26ac2:	eb70 0106 	sbcs.w	r1, r0, r6
   26ac6:	d201      	bcs.n	26acc <interface_socket_setopt+0x58>
   26ac8:	2025      	movs	r0, #37	; 0x25
   26aca:	e7e0      	b.n	26a8e <interface_socket_setopt+0x1a>
   26acc:	2a14      	cmp	r2, #20
   26ace:	bf0c      	ite	eq
   26ad0:	622b      	streq	r3, [r5, #32]
   26ad2:	626b      	strne	r3, [r5, #36]	; 0x24
   26ad4:	bd70      	pop	{r4, r5, r6, pc}
   26ad6:	2016      	movs	r0, #22
   26ad8:	e7d9      	b.n	26a8e <interface_socket_setopt+0x1a>
   26ada:	2009      	movs	r0, #9
   26adc:	e7d7      	b.n	26a8e <interface_socket_setopt+0x1a>
   26ade:	bf00      	nop
   26ae0:	20016a70 	.word	0x20016a70

00026ae4 <interface_socket_getopt>:
   26ae4:	b570      	push	{r4, r5, r6, lr}
   26ae6:	2808      	cmp	r0, #8
   26ae8:	9d04      	ldr	r5, [sp, #16]
   26aea:	d832      	bhi.n	26b52 <interface_socket_getopt+0x6e>
   26aec:	242c      	movs	r4, #44	; 0x2c
   26aee:	4360      	muls	r0, r4
   26af0:	4e19      	ldr	r6, [pc, #100]	; (26b58 <interface_socket_getopt+0x74>)
   26af2:	1834      	adds	r4, r6, r0
   26af4:	5830      	ldr	r0, [r6, r0]
   26af6:	b360      	cbz	r0, 26b52 <interface_socket_getopt+0x6e>
   26af8:	2901      	cmp	r1, #1
   26afa:	d005      	beq.n	26b08 <interface_socket_getopt+0x24>
   26afc:	202a      	movs	r0, #42	; 0x2a
   26afe:	f7fa f84d 	bl	20b9c <nrf_modem_os_errno_set>
   26b02:	f04f 30ff 	mov.w	r0, #4294967295
   26b06:	e00c      	b.n	26b22 <interface_socket_getopt+0x3e>
   26b08:	b103      	cbz	r3, 26b0c <interface_socket_getopt+0x28>
   26b0a:	b90d      	cbnz	r5, 26b10 <interface_socket_getopt+0x2c>
   26b0c:	2016      	movs	r0, #22
   26b0e:	e7f6      	b.n	26afe <interface_socket_getopt+0x1a>
   26b10:	2a04      	cmp	r2, #4
   26b12:	d107      	bne.n	26b24 <interface_socket_getopt+0x40>
   26b14:	682a      	ldr	r2, [r5, #0]
   26b16:	2a04      	cmp	r2, #4
   26b18:	d1f8      	bne.n	26b0c <interface_socket_getopt+0x28>
   26b1a:	2000      	movs	r0, #0
   26b1c:	6862      	ldr	r2, [r4, #4]
   26b1e:	601a      	str	r2, [r3, #0]
   26b20:	6060      	str	r0, [r4, #4]
   26b22:	bd70      	pop	{r4, r5, r6, pc}
   26b24:	f1a2 0114 	sub.w	r1, r2, #20
   26b28:	2901      	cmp	r1, #1
   26b2a:	d8e7      	bhi.n	26afc <interface_socket_getopt+0x18>
   26b2c:	6829      	ldr	r1, [r5, #0]
   26b2e:	2908      	cmp	r1, #8
   26b30:	d1ec      	bne.n	26b0c <interface_socket_getopt+0x28>
   26b32:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   26b36:	2a14      	cmp	r2, #20
   26b38:	bf18      	it	ne
   26b3a:	4601      	movne	r1, r0
   26b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26b40:	fbb1 f0f2 	udiv	r0, r1, r2
   26b44:	fb02 1110 	mls	r1, r2, r0, r1
   26b48:	4351      	muls	r1, r2
   26b4a:	6018      	str	r0, [r3, #0]
   26b4c:	6059      	str	r1, [r3, #4]
   26b4e:	2000      	movs	r0, #0
   26b50:	e7e7      	b.n	26b22 <interface_socket_getopt+0x3e>
   26b52:	2009      	movs	r0, #9
   26b54:	e7d3      	b.n	26afe <interface_socket_getopt+0x1a>
   26b56:	bf00      	nop
   26b58:	20016a70 	.word	0x20016a70

00026b5c <interface_socket_fcntl>:
   26b5c:	2808      	cmp	r0, #8
   26b5e:	b510      	push	{r4, lr}
   26b60:	d82c      	bhi.n	26bbc <interface_socket_fcntl+0x60>
   26b62:	232c      	movs	r3, #44	; 0x2c
   26b64:	4343      	muls	r3, r0
   26b66:	4c16      	ldr	r4, [pc, #88]	; (26bc0 <interface_socket_fcntl+0x64>)
   26b68:	58e0      	ldr	r0, [r4, r3]
   26b6a:	b338      	cbz	r0, 26bbc <interface_socket_fcntl+0x60>
   26b6c:	2901      	cmp	r1, #1
   26b6e:	d11d      	bne.n	26bac <interface_socket_fcntl+0x50>
   26b70:	f012 0001 	ands.w	r0, r2, #1
   26b74:	58e2      	ldr	r2, [r4, r3]
   26b76:	d004      	beq.n	26b82 <interface_socket_fcntl+0x26>
   26b78:	2000      	movs	r0, #0
   26b7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   26b7e:	50e2      	str	r2, [r4, r3]
   26b80:	bd10      	pop	{r4, pc}
   26b82:	0092      	lsls	r2, r2, #2
   26b84:	d407      	bmi.n	26b96 <interface_socket_fcntl+0x3a>
   26b86:	58e2      	ldr	r2, [r4, r3]
   26b88:	b292      	uxth	r2, r2
   26b8a:	2a0a      	cmp	r2, #10
   26b8c:	d003      	beq.n	26b96 <interface_socket_fcntl+0x3a>
   26b8e:	58e2      	ldr	r2, [r4, r3]
   26b90:	b292      	uxth	r2, r2
   26b92:	2a0b      	cmp	r2, #11
   26b94:	d105      	bne.n	26ba2 <interface_socket_fcntl+0x46>
   26b96:	2023      	movs	r0, #35	; 0x23
   26b98:	f7fa f800 	bl	20b9c <nrf_modem_os_errno_set>
   26b9c:	f04f 30ff 	mov.w	r0, #4294967295
   26ba0:	e7ee      	b.n	26b80 <interface_socket_fcntl+0x24>
   26ba2:	58e2      	ldr	r2, [r4, r3]
   26ba4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   26ba8:	50e2      	str	r2, [r4, r3]
   26baa:	e7e9      	b.n	26b80 <interface_socket_fcntl+0x24>
   26bac:	2902      	cmp	r1, #2
   26bae:	d103      	bne.n	26bb8 <interface_socket_fcntl+0x5c>
   26bb0:	58e0      	ldr	r0, [r4, r3]
   26bb2:	f3c0 7000 	ubfx	r0, r0, #28, #1
   26bb6:	e7e3      	b.n	26b80 <interface_socket_fcntl+0x24>
   26bb8:	2016      	movs	r0, #22
   26bba:	e7ed      	b.n	26b98 <interface_socket_fcntl+0x3c>
   26bbc:	2009      	movs	r0, #9
   26bbe:	e7eb      	b.n	26b98 <interface_socket_fcntl+0x3c>
   26bc0:	20016a70 	.word	0x20016a70

00026bc4 <rpc_error_to_nrf_errno>:
   26bc4:	286a      	cmp	r0, #106	; 0x6a
   26bc6:	bf9a      	itte	ls
   26bc8:	4b01      	ldrls	r3, [pc, #4]	; (26bd0 <rpc_error_to_nrf_errno+0xc>)
   26bca:	5618      	ldrsbls	r0, [r3, r0]
   26bcc:	202d      	movhi	r0, #45	; 0x2d
   26bce:	4770      	bx	lr
   26bd0:	0004038d 	.word	0x0004038d

00026bd4 <rpc_error_to_nrf_gai_errno>:
   26bd4:	2805      	cmp	r0, #5
   26bd6:	b508      	push	{r3, lr}
   26bd8:	d012      	beq.n	26c00 <rpc_error_to_nrf_gai_errno+0x2c>
   26bda:	d807      	bhi.n	26bec <rpc_error_to_nrf_gai_errno+0x18>
   26bdc:	b168      	cbz	r0, 26bfa <rpc_error_to_nrf_gai_errno+0x26>
   26bde:	f7ff fff1 	bl	26bc4 <rpc_error_to_nrf_errno>
   26be2:	4b09      	ldr	r3, [pc, #36]	; (26c08 <rpc_error_to_nrf_gai_errno+0x34>)
   26be4:	6018      	str	r0, [r3, #0]
   26be6:	f240 1015 	movw	r0, #277	; 0x115
   26bea:	e008      	b.n	26bfe <rpc_error_to_nrf_gai_errno+0x2a>
   26bec:	2806      	cmp	r0, #6
   26bee:	d001      	beq.n	26bf4 <rpc_error_to_nrf_gai_errno+0x20>
   26bf0:	280d      	cmp	r0, #13
   26bf2:	d1f4      	bne.n	26bde <rpc_error_to_nrf_gai_errno+0xa>
   26bf4:	f240 1011 	movw	r0, #273	; 0x111
   26bf8:	e001      	b.n	26bfe <rpc_error_to_nrf_gai_errno+0x2a>
   26bfa:	4b03      	ldr	r3, [pc, #12]	; (26c08 <rpc_error_to_nrf_gai_errno+0x34>)
   26bfc:	6018      	str	r0, [r3, #0]
   26bfe:	bd08      	pop	{r3, pc}
   26c00:	f44f 708a 	mov.w	r0, #276	; 0x114
   26c04:	e7fb      	b.n	26bfe <rpc_error_to_nrf_gai_errno+0x2a>
   26c06:	bf00      	nop
   26c08:	20016c04 	.word	0x20016c04

00026c0c <ip_interface_init>:
   26c0c:	b510      	push	{r4, lr}
   26c0e:	2400      	movs	r4, #0
   26c10:	4b06      	ldr	r3, [pc, #24]	; (26c2c <ip_interface_init+0x20>)
   26c12:	2224      	movs	r2, #36	; 0x24
   26c14:	601c      	str	r4, [r3, #0]
   26c16:	4b06      	ldr	r3, [pc, #24]	; (26c30 <ip_interface_init+0x24>)
   26c18:	4621      	mov	r1, r4
   26c1a:	4806      	ldr	r0, [pc, #24]	; (26c34 <ip_interface_init+0x28>)
   26c1c:	601c      	str	r4, [r3, #0]
   26c1e:	f010 fdd0 	bl	377c2 <memset>
   26c22:	2201      	movs	r2, #1
   26c24:	4b04      	ldr	r3, [pc, #16]	; (26c38 <ip_interface_init+0x2c>)
   26c26:	4620      	mov	r0, r4
   26c28:	701a      	strb	r2, [r3, #0]
   26c2a:	bd10      	pop	{r4, pc}
   26c2c:	20016c10 	.word	0x20016c10
   26c30:	20016c0c 	.word	0x20016c0c
   26c34:	20016c14 	.word	0x20016c14
   26c38:	2001da7a 	.word	0x2001da7a

00026c3c <ip_interface_open>:
   26c3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26c40:	2302      	movs	r3, #2
   26c42:	4616      	mov	r6, r2
   26c44:	2200      	movs	r2, #0
   26c46:	f04f 38ff 	mov.w	r8, #4294967295
   26c4a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   26c4e:	4b36      	ldr	r3, [pc, #216]	; (26d28 <ip_interface_open+0xec>)
   26c50:	4607      	mov	r7, r0
   26c52:	781b      	ldrb	r3, [r3, #0]
   26c54:	460d      	mov	r5, r1
   26c56:	f8cd 800c 	str.w	r8, [sp, #12]
   26c5a:	b943      	cbnz	r3, 26c6e <ip_interface_open+0x32>
   26c5c:	2070      	movs	r0, #112	; 0x70
   26c5e:	f7f9 ff9d 	bl	20b9c <nrf_modem_os_errno_set>
   26c62:	f04f 34ff 	mov.w	r4, #4294967295
   26c66:	4620      	mov	r0, r4
   26c68:	b004      	add	sp, #16
   26c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26c6e:	f00f fb8a 	bl	36386 <address_family_verify>
   26c72:	4604      	mov	r4, r0
   26c74:	2800      	cmp	r0, #0
   26c76:	d1f6      	bne.n	26c66 <ip_interface_open+0x2a>
   26c78:	1e6b      	subs	r3, r5, #1
   26c7a:	2b02      	cmp	r3, #2
   26c7c:	d815      	bhi.n	26caa <ip_interface_open+0x6e>
   26c7e:	4631      	mov	r1, r6
   26c80:	4628      	mov	r0, r5
   26c82:	aa02      	add	r2, sp, #8
   26c84:	f00f fbc3 	bl	3640e <protocol_verify>
   26c88:	4606      	mov	r6, r0
   26c8a:	2800      	cmp	r0, #0
   26c8c:	d149      	bne.n	26d22 <ip_interface_open+0xe6>
   26c8e:	4629      	mov	r1, r5
   26c90:	4a26      	ldr	r2, [pc, #152]	; (26d2c <ip_interface_open+0xf0>)
   26c92:	a801      	add	r0, sp, #4
   26c94:	f7ff fe58 	bl	26948 <interface_socket_allocate>
   26c98:	9b01      	ldr	r3, [sp, #4]
   26c9a:	4604      	mov	r4, r0
   26c9c:	b93b      	cbnz	r3, 26cae <ip_interface_open+0x72>
   26c9e:	2669      	movs	r6, #105	; 0x69
   26ca0:	4620      	mov	r0, r4
   26ca2:	f7ff fe77 	bl	26994 <interface_socket_free>
   26ca6:	4630      	mov	r0, r6
   26ca8:	e7d9      	b.n	26c5e <ip_interface_open+0x22>
   26caa:	2016      	movs	r0, #22
   26cac:	e7d7      	b.n	26c5e <ip_interface_open+0x22>
   26cae:	9a02      	ldr	r2, [sp, #8]
   26cb0:	4641      	mov	r1, r8
   26cb2:	615a      	str	r2, [r3, #20]
   26cb4:	e9c3 7503 	strd	r7, r5, [r3, #12]
   26cb8:	f247 0201 	movw	r2, #28673	; 0x7001
   26cbc:	4633      	mov	r3, r6
   26cbe:	f00f fbc4 	bl	3644a <ip_interface_request_create>
   26cc2:	4601      	mov	r1, r0
   26cc4:	2800      	cmp	r0, #0
   26cc6:	d0ea      	beq.n	26c9e <ip_interface_open+0x62>
   26cc8:	6883      	ldr	r3, [r0, #8]
   26cca:	3f02      	subs	r7, #2
   26ccc:	330c      	adds	r3, #12
   26cce:	2f08      	cmp	r7, #8
   26cd0:	6083      	str	r3, [r0, #8]
   26cd2:	bf98      	it	ls
   26cd4:	4b16      	ldrls	r3, [pc, #88]	; (26d30 <ip_interface_open+0xf4>)
   26cd6:	6185      	str	r5, [r0, #24]
   26cd8:	bf98      	it	ls
   26cda:	57de      	ldrsbls	r6, [r3, r7]
   26cdc:	9b02      	ldr	r3, [sp, #8]
   26cde:	6146      	str	r6, [r0, #20]
   26ce0:	61c3      	str	r3, [r0, #28]
   26ce2:	f247 0201 	movw	r2, #28673	; 0x7001
   26ce6:	2301      	movs	r3, #1
   26ce8:	9801      	ldr	r0, [sp, #4]
   26cea:	f00f fbc6 	bl	3647a <ip_interface_request_send>
   26cee:	4606      	mov	r6, r0
   26cf0:	2800      	cmp	r0, #0
   26cf2:	d1d5      	bne.n	26ca0 <ip_interface_open+0x64>
   26cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26cf8:	2102      	movs	r1, #2
   26cfa:	4620      	mov	r0, r4
   26cfc:	ab03      	add	r3, sp, #12
   26cfe:	f00f fbcf 	bl	364a0 <ip_interface_wait>
   26d02:	4606      	mov	r6, r0
   26d04:	2800      	cmp	r0, #0
   26d06:	d1cb      	bne.n	26ca0 <ip_interface_open+0x64>
   26d08:	3d02      	subs	r5, #2
   26d0a:	2d01      	cmp	r5, #1
   26d0c:	d8ab      	bhi.n	26c66 <ip_interface_open+0x2a>
   26d0e:	9b01      	ldr	r3, [sp, #4]
   26d10:	681a      	ldr	r2, [r3, #0]
   26d12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   26d16:	601a      	str	r2, [r3, #0]
   26d18:	681a      	ldr	r2, [r3, #0]
   26d1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   26d1e:	601a      	str	r2, [r3, #0]
   26d20:	e7a1      	b.n	26c66 <ip_interface_open+0x2a>
   26d22:	4604      	mov	r4, r0
   26d24:	e79f      	b.n	26c66 <ip_interface_open+0x2a>
   26d26:	bf00      	nop
   26d28:	2001da7a 	.word	0x2001da7a
   26d2c:	000363ad 	.word	0x000363ad
   26d30:	0004037f 	.word	0x0004037f

00026d34 <ip_interface_close>:
   26d34:	f04f 33ff 	mov.w	r3, #4294967295
   26d38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26d3a:	4605      	mov	r5, r0
   26d3c:	9301      	str	r3, [sp, #4]
   26d3e:	f7ff fe89 	bl	26a54 <interface_socket_from_handle_get>
   26d42:	4604      	mov	r4, r0
   26d44:	b3a0      	cbz	r0, 26db0 <ip_interface_close+0x7c>
   26d46:	6981      	ldr	r1, [r0, #24]
   26d48:	6806      	ldr	r6, [r0, #0]
   26d4a:	2300      	movs	r3, #0
   26d4c:	f247 0209 	movw	r2, #28681	; 0x7009
   26d50:	4628      	mov	r0, r5
   26d52:	f00f fb7a 	bl	3644a <ip_interface_request_create>
   26d56:	4601      	mov	r1, r0
   26d58:	b388      	cbz	r0, 26dbe <ip_interface_close+0x8a>
   26d5a:	6823      	ldr	r3, [r4, #0]
   26d5c:	4620      	mov	r0, r4
   26d5e:	0c1b      	lsrs	r3, r3, #16
   26d60:	041b      	lsls	r3, r3, #16
   26d62:	f043 030d 	orr.w	r3, r3, #13
   26d66:	6023      	str	r3, [r4, #0]
   26d68:	6823      	ldr	r3, [r4, #0]
   26d6a:	f247 0209 	movw	r2, #28681	; 0x7009
   26d6e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   26d72:	6023      	str	r3, [r4, #0]
   26d74:	6823      	ldr	r3, [r4, #0]
   26d76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   26d7a:	6023      	str	r3, [r4, #0]
   26d7c:	4633      	mov	r3, r6
   26d7e:	f00f fb7c 	bl	3647a <ip_interface_request_send>
   26d82:	4604      	mov	r4, r0
   26d84:	b9a8      	cbnz	r0, 26db2 <ip_interface_close+0x7e>
   26d86:	4e0f      	ldr	r6, [pc, #60]	; (26dc4 <ip_interface_close+0x90>)
   26d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26d8c:	210e      	movs	r1, #14
   26d8e:	4628      	mov	r0, r5
   26d90:	ab01      	add	r3, sp, #4
   26d92:	f00f fb85 	bl	364a0 <ip_interface_wait>
   26d96:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
   26d9a:	b118      	cbz	r0, 26da4 <ip_interface_close+0x70>
   26d9c:	f00f f95a 	bl	36054 <rpc_ip_client_message_free>
   26da0:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
   26da4:	4628      	mov	r0, r5
   26da6:	f7ff fdf5 	bl	26994 <interface_socket_free>
   26daa:	4620      	mov	r0, r4
   26dac:	b002      	add	sp, #8
   26dae:	bd70      	pop	{r4, r5, r6, pc}
   26db0:	2409      	movs	r4, #9
   26db2:	4620      	mov	r0, r4
   26db4:	f7f9 fef2 	bl	20b9c <nrf_modem_os_errno_set>
   26db8:	f04f 34ff 	mov.w	r4, #4294967295
   26dbc:	e7f5      	b.n	26daa <ip_interface_close+0x76>
   26dbe:	240c      	movs	r4, #12
   26dc0:	e7f7      	b.n	26db2 <ip_interface_close+0x7e>
   26dc2:	bf00      	nop
   26dc4:	20016c14 	.word	0x20016c14

00026dc8 <ip_interface_sendto>:
   26dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26dcc:	461d      	mov	r5, r3
   26dce:	2300      	movs	r3, #0
   26dd0:	b089      	sub	sp, #36	; 0x24
   26dd2:	4606      	mov	r6, r0
   26dd4:	4690      	mov	r8, r2
   26dd6:	9102      	str	r1, [sp, #8]
   26dd8:	9305      	str	r3, [sp, #20]
   26dda:	f7ff fe3b 	bl	26a54 <interface_socket_from_handle_get>
   26dde:	4604      	mov	r4, r0
   26de0:	2800      	cmp	r0, #0
   26de2:	f000 8084 	beq.w	26eee <ip_interface_sendto+0x126>
   26de6:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
   26dea:	f300 8082 	bgt.w	26ef2 <ip_interface_sendto+0x12a>
   26dee:	6903      	ldr	r3, [r0, #16]
   26df0:	2b01      	cmp	r3, #1
   26df2:	d102      	bne.n	26dfa <ip_interface_sendto+0x32>
   26df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26df6:	2a00      	cmp	r2, #0
   26df8:	d17d      	bne.n	26ef6 <ip_interface_sendto+0x12e>
   26dfa:	6822      	ldr	r2, [r4, #0]
   26dfc:	0391      	lsls	r1, r2, #14
   26dfe:	d424      	bmi.n	26e4a <ip_interface_sendto+0x82>
   26e00:	6822      	ldr	r2, [r4, #0]
   26e02:	0092      	lsls	r2, r2, #2
   26e04:	d408      	bmi.n	26e18 <ip_interface_sendto+0x50>
   26e06:	2b01      	cmp	r3, #1
   26e08:	d103      	bne.n	26e12 <ip_interface_sendto+0x4a>
   26e0a:	6823      	ldr	r3, [r4, #0]
   26e0c:	b29b      	uxth	r3, r3
   26e0e:	2b05      	cmp	r3, #5
   26e10:	d102      	bne.n	26e18 <ip_interface_sendto+0x50>
   26e12:	6823      	ldr	r3, [r4, #0]
   26e14:	031f      	lsls	r7, r3, #12
   26e16:	d570      	bpl.n	26efa <ip_interface_sendto+0x132>
   26e18:	6823      	ldr	r3, [r4, #0]
   26e1a:	031d      	lsls	r5, r3, #12
   26e1c:	d56f      	bpl.n	26efe <ip_interface_sendto+0x136>
   26e1e:	2500      	movs	r5, #0
   26e20:	68a7      	ldr	r7, [r4, #8]
   26e22:	2f00      	cmp	r7, #0
   26e24:	d06f      	beq.n	26f06 <ip_interface_sendto+0x13e>
   26e26:	4638      	mov	r0, r7
   26e28:	f7f9 feb8 	bl	20b9c <nrf_modem_os_errno_set>
   26e2c:	f04f 35ff 	mov.w	r5, #4294967295
   26e30:	4c74      	ldr	r4, [pc, #464]	; (27004 <ip_interface_sendto+0x23c>)
   26e32:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   26e36:	b120      	cbz	r0, 26e42 <ip_interface_sendto+0x7a>
   26e38:	f00f f90c 	bl	36054 <rpc_ip_client_message_free>
   26e3c:	2300      	movs	r3, #0
   26e3e:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   26e42:	4628      	mov	r0, r5
   26e44:	b009      	add	sp, #36	; 0x24
   26e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e4a:	2d00      	cmp	r5, #0
   26e4c:	d03c      	beq.n	26ec8 <ip_interface_sendto+0x100>
   26e4e:	07a8      	lsls	r0, r5, #30
   26e50:	d557      	bpl.n	26f02 <ip_interface_sendto+0x13a>
   26e52:	f04f 0b00 	mov.w	fp, #0
   26e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26e58:	2500      	movs	r5, #0
   26e5a:	2b00      	cmp	r3, #0
   26e5c:	bf08      	it	eq
   26e5e:	f04f 33ff 	moveq.w	r3, #4294967295
   26e62:	f247 0a06 	movw	sl, #28678	; 0x7006
   26e66:	270c      	movs	r7, #12
   26e68:	9306      	str	r3, [sp, #24]
   26e6a:	0433      	lsls	r3, r6, #16
   26e6c:	9303      	str	r3, [sp, #12]
   26e6e:	eba8 0905 	sub.w	r9, r8, r5
   26e72:	4649      	mov	r1, r9
   26e74:	a805      	add	r0, sp, #20
   26e76:	f00f f8cd 	bl	36014 <rpc_ip_client_request_alloc>
   26e7a:	280c      	cmp	r0, #12
   26e7c:	d154      	bne.n	26f28 <ip_interface_sendto+0x160>
   26e7e:	f1bb 0f00 	cmp.w	fp, #0
   26e82:	f000 80bc 	beq.w	26ffe <ip_interface_sendto+0x236>
   26e86:	9a06      	ldr	r2, [sp, #24]
   26e88:	3201      	adds	r2, #1
   26e8a:	d0f0      	beq.n	26e6e <ip_interface_sendto+0xa6>
   26e8c:	220a      	movs	r2, #10
   26e8e:	a907      	add	r1, sp, #28
   26e90:	2000      	movs	r0, #0
   26e92:	9207      	str	r2, [sp, #28]
   26e94:	f7f9 fdca 	bl	20a2c <nrf_modem_os_timedwait>
   26e98:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   26e9c:	440a      	add	r2, r1
   26e9e:	3a0a      	subs	r2, #10
   26ea0:	2a00      	cmp	r2, #0
   26ea2:	9206      	str	r2, [sp, #24]
   26ea4:	dce3      	bgt.n	26e6e <ip_interface_sendto+0xa6>
   26ea6:	273c      	movs	r7, #60	; 0x3c
   26ea8:	6822      	ldr	r2, [r4, #0]
   26eaa:	0313      	lsls	r3, r2, #12
   26eac:	d4b9      	bmi.n	26e22 <ip_interface_sendto+0x5a>
   26eae:	6822      	ldr	r2, [r4, #0]
   26eb0:	b292      	uxth	r2, r2
   26eb2:	2a0d      	cmp	r2, #13
   26eb4:	d0b5      	beq.n	26e22 <ip_interface_sendto+0x5a>
   26eb6:	6822      	ldr	r2, [r4, #0]
   26eb8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   26ebc:	6022      	str	r2, [r4, #0]
   26ebe:	6822      	ldr	r2, [r4, #0]
   26ec0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   26ec4:	6022      	str	r2, [r4, #0]
   26ec6:	e7ac      	b.n	26e22 <ip_interface_sendto+0x5a>
   26ec8:	6827      	ldr	r7, [r4, #0]
   26eca:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   26ece:	f3c7 7b00 	ubfx	fp, r7, #28, #1
   26ed2:	e7c0      	b.n	26e56 <ip_interface_sendto+0x8e>
   26ed4:	68a7      	ldr	r7, [r4, #8]
   26ed6:	e7e7      	b.n	26ea8 <ip_interface_sendto+0xe0>
   26ed8:	4b4a      	ldr	r3, [pc, #296]	; (27004 <ip_interface_sendto+0x23c>)
   26eda:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
   26ede:	6992      	ldr	r2, [r2, #24]
   26ee0:	4415      	add	r5, r2
   26ee2:	f1bb 0f00 	cmp.w	fp, #0
   26ee6:	d0df      	beq.n	26ea8 <ip_interface_sendto+0xe0>
   26ee8:	45a8      	cmp	r8, r5
   26eea:	d1c0      	bne.n	26e6e <ip_interface_sendto+0xa6>
   26eec:	e7dc      	b.n	26ea8 <ip_interface_sendto+0xe0>
   26eee:	2709      	movs	r7, #9
   26ef0:	e799      	b.n	26e26 <ip_interface_sendto+0x5e>
   26ef2:	2728      	movs	r7, #40	; 0x28
   26ef4:	e797      	b.n	26e26 <ip_interface_sendto+0x5e>
   26ef6:	2738      	movs	r7, #56	; 0x38
   26ef8:	e795      	b.n	26e26 <ip_interface_sendto+0x5e>
   26efa:	2723      	movs	r7, #35	; 0x23
   26efc:	e793      	b.n	26e26 <ip_interface_sendto+0x5e>
   26efe:	2739      	movs	r7, #57	; 0x39
   26f00:	e791      	b.n	26e26 <ip_interface_sendto+0x5e>
   26f02:	272d      	movs	r7, #45	; 0x2d
   26f04:	e78f      	b.n	26e26 <ip_interface_sendto+0x5e>
   26f06:	6823      	ldr	r3, [r4, #0]
   26f08:	011a      	lsls	r2, r3, #4
   26f0a:	bf41      	itttt	mi
   26f0c:	6823      	ldrmi	r3, [r4, #0]
   26f0e:	4645      	movmi	r5, r8
   26f10:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   26f14:	6023      	strmi	r3, [r4, #0]
   26f16:	e78b      	b.n	26e30 <ip_interface_sendto+0x68>
   26f18:	6810      	ldr	r0, [r2, #0]
   26f1a:	b108      	cbz	r0, 26f20 <ip_interface_sendto+0x158>
   26f1c:	f00f f89d 	bl	3605a <rpc_ip_client_data_free>
   26f20:	9805      	ldr	r0, [sp, #20]
   26f22:	f00f f897 	bl	36054 <rpc_ip_client_message_free>
   26f26:	e7bf      	b.n	26ea8 <ip_interface_sendto+0xe0>
   26f28:	2800      	cmp	r0, #0
   26f2a:	d1bd      	bne.n	26ea8 <ip_interface_sendto+0xe0>
   26f2c:	f04f 020c 	mov.w	r2, #12
   26f30:	9b05      	ldr	r3, [sp, #20]
   26f32:	721a      	strb	r2, [r3, #8]
   26f34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   26f36:	7258      	strb	r0, [r3, #9]
   26f38:	7298      	strb	r0, [r3, #10]
   26f3a:	72d8      	strb	r0, [r3, #11]
   26f3c:	7518      	strb	r0, [r3, #20]
   26f3e:	7558      	strb	r0, [r3, #21]
   26f40:	7598      	strb	r0, [r3, #22]
   26f42:	75d8      	strb	r0, [r3, #23]
   26f44:	b10a      	cbz	r2, 26f4a <ip_interface_sendto+0x182>
   26f46:	615a      	str	r2, [r3, #20]
   26f48:	62a0      	str	r0, [r4, #40]	; 0x28
   26f4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26f4c:	b1b2      	cbz	r2, 26f7c <ip_interface_sendto+0x1b4>
   26f4e:	f103 021c 	add.w	r2, r3, #28
   26f52:	9201      	str	r2, [sp, #4]
   26f54:	f103 0218 	add.w	r2, r3, #24
   26f58:	9200      	str	r2, [sp, #0]
   26f5a:	68e0      	ldr	r0, [r4, #12]
   26f5c:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   26f60:	331a      	adds	r3, #26
   26f62:	f00f fa2f 	bl	363c4 <ip_addr_parse>
   26f66:	9a05      	ldr	r2, [sp, #20]
   26f68:	4607      	mov	r7, r0
   26f6a:	2800      	cmp	r0, #0
   26f6c:	d1d4      	bne.n	26f18 <ip_interface_sendto+0x150>
   26f6e:	f247 0a07 	movw	sl, #28679	; 0x7007
   26f72:	6893      	ldr	r3, [r2, #8]
   26f74:	8b51      	ldrh	r1, [r2, #26]
   26f76:	3304      	adds	r3, #4
   26f78:	440b      	add	r3, r1
   26f7a:	6093      	str	r3, [r2, #8]
   26f7c:	69a2      	ldr	r2, [r4, #24]
   26f7e:	9b05      	ldr	r3, [sp, #20]
   26f80:	611a      	str	r2, [r3, #16]
   26f82:	9a03      	ldr	r2, [sp, #12]
   26f84:	f8c3 9004 	str.w	r9, [r3, #4]
   26f88:	ea4a 0202 	orr.w	r2, sl, r2
   26f8c:	60da      	str	r2, [r3, #12]
   26f8e:	9a02      	ldr	r2, [sp, #8]
   26f90:	b12a      	cbz	r2, 26f9e <ip_interface_sendto+0x1d6>
   26f92:	9902      	ldr	r1, [sp, #8]
   26f94:	464a      	mov	r2, r9
   26f96:	6818      	ldr	r0, [r3, #0]
   26f98:	4429      	add	r1, r5
   26f9a:	f010 fbf2 	bl	37782 <memcpy>
   26f9e:	6823      	ldr	r3, [r4, #0]
   26fa0:	6822      	ldr	r2, [r4, #0]
   26fa2:	4620      	mov	r0, r4
   26fa4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   26fa8:	6022      	str	r2, [r4, #0]
   26faa:	6822      	ldr	r2, [r4, #0]
   26fac:	9905      	ldr	r1, [sp, #20]
   26fae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   26fb2:	6022      	str	r2, [r4, #0]
   26fb4:	4652      	mov	r2, sl
   26fb6:	f00f fa60 	bl	3647a <ip_interface_request_send>
   26fba:	4607      	mov	r7, r0
   26fbc:	2800      	cmp	r0, #0
   26fbe:	f47f af73 	bne.w	26ea8 <ip_interface_sendto+0xe0>
   26fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   26fc6:	4630      	mov	r0, r6
   26fc8:	4611      	mov	r1, r2
   26fca:	ab06      	add	r3, sp, #24
   26fcc:	f00f fa68 	bl	364a0 <ip_interface_wait>
   26fd0:	4607      	mov	r7, r0
   26fd2:	2800      	cmp	r0, #0
   26fd4:	d080      	beq.n	26ed8 <ip_interface_sendto+0x110>
   26fd6:	6822      	ldr	r2, [r4, #0]
   26fd8:	0311      	lsls	r1, r2, #12
   26fda:	f53f af7b 	bmi.w	26ed4 <ip_interface_sendto+0x10c>
   26fde:	283c      	cmp	r0, #60	; 0x3c
   26fe0:	f43f af62 	beq.w	26ea8 <ip_interface_sendto+0xe0>
   26fe4:	280c      	cmp	r0, #12
   26fe6:	f47f af5f 	bne.w	26ea8 <ip_interface_sendto+0xe0>
   26fea:	4b06      	ldr	r3, [pc, #24]	; (27004 <ip_interface_sendto+0x23c>)
   26fec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   26ff0:	b108      	cbz	r0, 26ff6 <ip_interface_sendto+0x22e>
   26ff2:	f00f f82f 	bl	36054 <rpc_ip_client_message_free>
   26ff6:	f1bb 0f00 	cmp.w	fp, #0
   26ffa:	f47f af38 	bne.w	26e6e <ip_interface_sendto+0xa6>
   26ffe:	2723      	movs	r7, #35	; 0x23
   27000:	e752      	b.n	26ea8 <ip_interface_sendto+0xe0>
   27002:	bf00      	nop
   27004:	20016c14 	.word	0x20016c14

00027008 <ip_interface_socketoption_get>:
   27008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2700c:	461c      	mov	r4, r3
   2700e:	f04f 33ff 	mov.w	r3, #4294967295
   27012:	9301      	str	r3, [sp, #4]
   27014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   27016:	4607      	mov	r7, r0
   27018:	460d      	mov	r5, r1
   2701a:	4693      	mov	fp, r2
   2701c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   27020:	2b00      	cmp	r3, #0
   27022:	d06a      	beq.n	270fa <ip_interface_socketoption_get+0xf2>
   27024:	f8d8 3000 	ldr.w	r3, [r8]
   27028:	2b00      	cmp	r3, #0
   2702a:	d066      	beq.n	270fa <ip_interface_socketoption_get+0xf2>
   2702c:	680b      	ldr	r3, [r1, #0]
   2702e:	025e      	lsls	r6, r3, #9
   27030:	d465      	bmi.n	270fe <ip_interface_socketoption_get+0xf6>
   27032:	680b      	ldr	r3, [r1, #0]
   27034:	0219      	lsls	r1, r3, #8
   27036:	d462      	bmi.n	270fe <ip_interface_socketoption_get+0xf6>
   27038:	682b      	ldr	r3, [r5, #0]
   2703a:	01da      	lsls	r2, r3, #7
   2703c:	d45f      	bmi.n	270fe <ip_interface_socketoption_get+0xf6>
   2703e:	682b      	ldr	r3, [r5, #0]
   27040:	019b      	lsls	r3, r3, #6
   27042:	d45c      	bmi.n	270fe <ip_interface_socketoption_get+0xf6>
   27044:	f8d5 a000 	ldr.w	sl, [r5]
   27048:	682b      	ldr	r3, [r5, #0]
   2704a:	f247 0204 	movw	r2, #28676	; 0x7004
   2704e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   27052:	602b      	str	r3, [r5, #0]
   27054:	f8d8 3000 	ldr.w	r3, [r8]
   27058:	69a9      	ldr	r1, [r5, #24]
   2705a:	f00f f9f6 	bl	3644a <ip_interface_request_create>
   2705e:	4606      	mov	r6, r0
   27060:	2800      	cmp	r0, #0
   27062:	d048      	beq.n	270f6 <ip_interface_socketoption_get+0xee>
   27064:	6883      	ldr	r3, [r0, #8]
   27066:	f8c0 b014 	str.w	fp, [r0, #20]
   2706a:	3308      	adds	r3, #8
   2706c:	6083      	str	r3, [r0, #8]
   2706e:	6184      	str	r4, [r0, #24]
   27070:	4601      	mov	r1, r0
   27072:	f8d0 b000 	ldr.w	fp, [r0]
   27076:	4653      	mov	r3, sl
   27078:	f247 0204 	movw	r2, #28676	; 0x7004
   2707c:	4628      	mov	r0, r5
   2707e:	f00f f9fc 	bl	3647a <ip_interface_request_send>
   27082:	4604      	mov	r4, r0
   27084:	bb20      	cbnz	r0, 270d0 <ip_interface_socketoption_get+0xc8>
   27086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   2708a:	4638      	mov	r0, r7
   2708c:	4611      	mov	r1, r2
   2708e:	ab01      	add	r3, sp, #4
   27090:	f00f fa06 	bl	364a0 <ip_interface_wait>
   27094:	4604      	mov	r4, r0
   27096:	b9d8      	cbnz	r0, 270d0 <ip_interface_socketoption_get+0xc8>
   27098:	f8df 9068 	ldr.w	r9, [pc, #104]	; 27104 <ip_interface_socketoption_get+0xfc>
   2709c:	f8d8 2000 	ldr.w	r2, [r8]
   270a0:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
   270a4:	b1f9      	cbz	r1, 270e6 <ip_interface_socketoption_get+0xde>
   270a6:	6848      	ldr	r0, [r1, #4]
   270a8:	4290      	cmp	r0, r2
   270aa:	d81a      	bhi.n	270e2 <ip_interface_socketoption_get+0xda>
   270ac:	6809      	ldr	r1, [r1, #0]
   270ae:	b1c1      	cbz	r1, 270e2 <ip_interface_socketoption_get+0xda>
   270b0:	4602      	mov	r2, r0
   270b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   270b4:	f010 fb65 	bl	37782 <memcpy>
   270b8:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
   270bc:	6852      	ldr	r2, [r2, #4]
   270be:	f8c8 2000 	str.w	r2, [r8]
   270c2:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   270c6:	f00e ffc5 	bl	36054 <rpc_ip_client_message_free>
   270ca:	2200      	movs	r2, #0
   270cc:	f849 2027 	str.w	r2, [r9, r7, lsl #2]
   270d0:	4658      	mov	r0, fp
   270d2:	f00e ffc2 	bl	3605a <rpc_ip_client_data_free>
   270d6:	f8c5 a000 	str.w	sl, [r5]
   270da:	4620      	mov	r0, r4
   270dc:	b003      	add	sp, #12
   270de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   270e2:	2416      	movs	r4, #22
   270e4:	e7ed      	b.n	270c2 <ip_interface_socketoption_get+0xba>
   270e6:	4659      	mov	r1, fp
   270e8:	980c      	ldr	r0, [sp, #48]	; 0x30
   270ea:	f010 fb4a 	bl	37782 <memcpy>
   270ee:	6873      	ldr	r3, [r6, #4]
   270f0:	f8c8 3000 	str.w	r3, [r8]
   270f4:	e7ec      	b.n	270d0 <ip_interface_socketoption_get+0xc8>
   270f6:	240c      	movs	r4, #12
   270f8:	e7ed      	b.n	270d6 <ip_interface_socketoption_get+0xce>
   270fa:	2416      	movs	r4, #22
   270fc:	e7ed      	b.n	270da <ip_interface_socketoption_get+0xd2>
   270fe:	2423      	movs	r4, #35	; 0x23
   27100:	e7eb      	b.n	270da <ip_interface_socketoption_get+0xd2>
   27102:	bf00      	nop
   27104:	20016c14 	.word	0x20016c14

00027108 <ip_interface_bind>:
   27108:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2710c:	f04f 33ff 	mov.w	r3, #4294967295
   27110:	4607      	mov	r7, r0
   27112:	4690      	mov	r8, r2
   27114:	460e      	mov	r6, r1
   27116:	9303      	str	r3, [sp, #12]
   27118:	2900      	cmp	r1, #0
   2711a:	d04e      	beq.n	271ba <ip_interface_bind+0xb2>
   2711c:	2a00      	cmp	r2, #0
   2711e:	d04c      	beq.n	271ba <ip_interface_bind+0xb2>
   27120:	f7ff fc98 	bl	26a54 <interface_socket_from_handle_get>
   27124:	4604      	mov	r4, r0
   27126:	2800      	cmp	r0, #0
   27128:	d049      	beq.n	271be <ip_interface_bind+0xb6>
   2712a:	6803      	ldr	r3, [r0, #0]
   2712c:	b29b      	uxth	r3, r3
   2712e:	2b02      	cmp	r3, #2
   27130:	d145      	bne.n	271be <ip_interface_bind+0xb6>
   27132:	6981      	ldr	r1, [r0, #24]
   27134:	2300      	movs	r3, #0
   27136:	f247 0205 	movw	r2, #28677	; 0x7005
   2713a:	4638      	mov	r0, r7
   2713c:	f00f f985 	bl	3644a <ip_interface_request_create>
   27140:	4605      	mov	r5, r0
   27142:	2800      	cmp	r0, #0
   27144:	d03d      	beq.n	271c2 <ip_interface_bind+0xba>
   27146:	6883      	ldr	r3, [r0, #8]
   27148:	4642      	mov	r2, r8
   2714a:	3304      	adds	r3, #4
   2714c:	6083      	str	r3, [r0, #8]
   2714e:	f100 0318 	add.w	r3, r0, #24
   27152:	9301      	str	r3, [sp, #4]
   27154:	f100 0314 	add.w	r3, r0, #20
   27158:	9300      	str	r3, [sp, #0]
   2715a:	4631      	mov	r1, r6
   2715c:	f100 0316 	add.w	r3, r0, #22
   27160:	68e0      	ldr	r0, [r4, #12]
   27162:	f00f f92f 	bl	363c4 <ip_addr_parse>
   27166:	bb08      	cbnz	r0, 271ac <ip_interface_bind+0xa4>
   27168:	68ab      	ldr	r3, [r5, #8]
   2716a:	8aea      	ldrh	r2, [r5, #22]
   2716c:	4e16      	ldr	r6, [pc, #88]	; (271c8 <ip_interface_bind+0xc0>)
   2716e:	4413      	add	r3, r2
   27170:	60ab      	str	r3, [r5, #8]
   27172:	6823      	ldr	r3, [r4, #0]
   27174:	f247 0205 	movw	r2, #28677	; 0x7005
   27178:	4033      	ands	r3, r6
   2717a:	f043 0303 	orr.w	r3, r3, #3
   2717e:	6023      	str	r3, [r4, #0]
   27180:	6823      	ldr	r3, [r4, #0]
   27182:	4629      	mov	r1, r5
   27184:	4033      	ands	r3, r6
   27186:	4620      	mov	r0, r4
   27188:	f043 0302 	orr.w	r3, r3, #2
   2718c:	f00f f975 	bl	3647a <ip_interface_request_send>
   27190:	b960      	cbnz	r0, 271ac <ip_interface_bind+0xa4>
   27192:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27196:	2104      	movs	r1, #4
   27198:	4638      	mov	r0, r7
   2719a:	ab03      	add	r3, sp, #12
   2719c:	f00f f980 	bl	364a0 <ip_interface_wait>
   271a0:	b140      	cbz	r0, 271b4 <ip_interface_bind+0xac>
   271a2:	6823      	ldr	r3, [r4, #0]
   271a4:	4033      	ands	r3, r6
   271a6:	f043 0302 	orr.w	r3, r3, #2
   271aa:	6023      	str	r3, [r4, #0]
   271ac:	f7f9 fcf6 	bl	20b9c <nrf_modem_os_errno_set>
   271b0:	f04f 30ff 	mov.w	r0, #4294967295
   271b4:	b004      	add	sp, #16
   271b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   271ba:	2016      	movs	r0, #22
   271bc:	e7f6      	b.n	271ac <ip_interface_bind+0xa4>
   271be:	2009      	movs	r0, #9
   271c0:	e7f4      	b.n	271ac <ip_interface_bind+0xa4>
   271c2:	200c      	movs	r0, #12
   271c4:	e7f2      	b.n	271ac <ip_interface_bind+0xa4>
   271c6:	bf00      	nop
   271c8:	ffff0000 	.word	0xffff0000

000271cc <ip_interface_listen>:
   271cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   271ce:	4605      	mov	r5, r0
   271d0:	f7ff fc40 	bl	26a54 <interface_socket_from_handle_get>
   271d4:	4604      	mov	r4, r0
   271d6:	2800      	cmp	r0, #0
   271d8:	d03f      	beq.n	2725a <ip_interface_listen+0x8e>
   271da:	6803      	ldr	r3, [r0, #0]
   271dc:	b29b      	uxth	r3, r3
   271de:	2b04      	cmp	r3, #4
   271e0:	d003      	beq.n	271ea <ip_interface_listen+0x1e>
   271e2:	6803      	ldr	r3, [r0, #0]
   271e4:	b29b      	uxth	r3, r3
   271e6:	2b0b      	cmp	r3, #11
   271e8:	d139      	bne.n	2725e <ip_interface_listen+0x92>
   271ea:	2100      	movs	r1, #0
   271ec:	4628      	mov	r0, r5
   271ee:	4a1f      	ldr	r2, [pc, #124]	; (2726c <ip_interface_listen+0xa0>)
   271f0:	f7ff fbdc 	bl	269ac <interface_socket_packet_handler_update>
   271f4:	4603      	mov	r3, r0
   271f6:	bba0      	cbnz	r0, 27262 <ip_interface_listen+0x96>
   271f8:	69a1      	ldr	r1, [r4, #24]
   271fa:	f247 0208 	movw	r2, #28680	; 0x7008
   271fe:	4628      	mov	r0, r5
   27200:	f00f f923 	bl	3644a <ip_interface_request_create>
   27204:	4601      	mov	r1, r0
   27206:	b370      	cbz	r0, 27266 <ip_interface_listen+0x9a>
   27208:	6883      	ldr	r3, [r0, #8]
   2720a:	4e19      	ldr	r6, [pc, #100]	; (27270 <ip_interface_listen+0xa4>)
   2720c:	3304      	adds	r3, #4
   2720e:	6083      	str	r3, [r0, #8]
   27210:	6823      	ldr	r3, [r4, #0]
   27212:	f247 0208 	movw	r2, #28680	; 0x7008
   27216:	4033      	ands	r3, r6
   27218:	f043 0306 	orr.w	r3, r3, #6
   2721c:	6023      	str	r3, [r4, #0]
   2721e:	6823      	ldr	r3, [r4, #0]
   27220:	4620      	mov	r0, r4
   27222:	4033      	ands	r3, r6
   27224:	f043 0304 	orr.w	r3, r3, #4
   27228:	f00f f927 	bl	3647a <ip_interface_request_send>
   2722c:	b978      	cbnz	r0, 2724e <ip_interface_listen+0x82>
   2722e:	f04f 33ff 	mov.w	r3, #4294967295
   27232:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27236:	9301      	str	r3, [sp, #4]
   27238:	2107      	movs	r1, #7
   2723a:	4628      	mov	r0, r5
   2723c:	ab01      	add	r3, sp, #4
   2723e:	f00f f92f 	bl	364a0 <ip_interface_wait>
   27242:	b140      	cbz	r0, 27256 <ip_interface_listen+0x8a>
   27244:	6823      	ldr	r3, [r4, #0]
   27246:	4033      	ands	r3, r6
   27248:	f043 0304 	orr.w	r3, r3, #4
   2724c:	6023      	str	r3, [r4, #0]
   2724e:	f7f9 fca5 	bl	20b9c <nrf_modem_os_errno_set>
   27252:	f04f 30ff 	mov.w	r0, #4294967295
   27256:	b002      	add	sp, #8
   27258:	bd70      	pop	{r4, r5, r6, pc}
   2725a:	2009      	movs	r0, #9
   2725c:	e7f7      	b.n	2724e <ip_interface_listen+0x82>
   2725e:	2016      	movs	r0, #22
   27260:	e7f5      	b.n	2724e <ip_interface_listen+0x82>
   27262:	2023      	movs	r0, #35	; 0x23
   27264:	e7f3      	b.n	2724e <ip_interface_listen+0x82>
   27266:	200c      	movs	r0, #12
   27268:	e7f1      	b.n	2724e <ip_interface_listen+0x82>
   2726a:	bf00      	nop
   2726c:	000363ad 	.word	0x000363ad
   27270:	ffff0000 	.word	0xffff0000

00027274 <ip_interface_accept>:
   27274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27278:	2600      	movs	r6, #0
   2727a:	4680      	mov	r8, r0
   2727c:	460f      	mov	r7, r1
   2727e:	4692      	mov	sl, r2
   27280:	9600      	str	r6, [sp, #0]
   27282:	f7ff fbe7 	bl	26a54 <interface_socket_from_handle_get>
   27286:	4604      	mov	r4, r0
   27288:	2800      	cmp	r0, #0
   2728a:	f000 80cb 	beq.w	27424 <ip_interface_accept+0x1b0>
   2728e:	6903      	ldr	r3, [r0, #16]
   27290:	2b01      	cmp	r3, #1
   27292:	f040 80ca 	bne.w	2742a <ip_interface_accept+0x1b6>
   27296:	6803      	ldr	r3, [r0, #0]
   27298:	b29b      	uxth	r3, r3
   2729a:	2b07      	cmp	r3, #7
   2729c:	f040 80c7 	bne.w	2742e <ip_interface_accept+0x1ba>
   272a0:	f04f 33ff 	mov.w	r3, #4294967295
   272a4:	9301      	str	r3, [sp, #4]
   272a6:	6803      	ldr	r3, [r0, #0]
   272a8:	f013 5980 	ands.w	r9, r3, #268435456	; 0x10000000
   272ac:	d163      	bne.n	27376 <ip_interface_accept+0x102>
   272ae:	6803      	ldr	r3, [r0, #0]
   272b0:	03db      	lsls	r3, r3, #15
   272b2:	d464      	bmi.n	2737e <ip_interface_accept+0x10a>
   272b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   272b8:	4640      	mov	r0, r8
   272ba:	4611      	mov	r1, r2
   272bc:	ab01      	add	r3, sp, #4
   272be:	f00f f8ef 	bl	364a0 <ip_interface_wait>
   272c2:	4605      	mov	r5, r0
   272c4:	6826      	ldr	r6, [r4, #0]
   272c6:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000
   272ca:	d05a      	beq.n	27382 <ip_interface_accept+0x10e>
   272cc:	4668      	mov	r0, sp
   272ce:	4a5a      	ldr	r2, [pc, #360]	; (27438 <ip_interface_accept+0x1c4>)
   272d0:	6921      	ldr	r1, [r4, #16]
   272d2:	f7ff fb39 	bl	26948 <interface_socket_allocate>
   272d6:	9b00      	ldr	r3, [sp, #0]
   272d8:	4606      	mov	r6, r0
   272da:	2b00      	cmp	r3, #0
   272dc:	f000 80a9 	beq.w	27432 <ip_interface_accept+0x1be>
   272e0:	6962      	ldr	r2, [r4, #20]
   272e2:	69a1      	ldr	r1, [r4, #24]
   272e4:	615a      	str	r2, [r3, #20]
   272e6:	68e2      	ldr	r2, [r4, #12]
   272e8:	4640      	mov	r0, r8
   272ea:	60da      	str	r2, [r3, #12]
   272ec:	6922      	ldr	r2, [r4, #16]
   272ee:	611a      	str	r2, [r3, #16]
   272f0:	2300      	movs	r3, #0
   272f2:	f247 020c 	movw	r2, #28684	; 0x700c
   272f6:	f00f f8a8 	bl	3644a <ip_interface_request_create>
   272fa:	4601      	mov	r1, r0
   272fc:	2800      	cmp	r0, #0
   272fe:	f000 8098 	beq.w	27432 <ip_interface_accept+0x1be>
   27302:	6823      	ldr	r3, [r4, #0]
   27304:	f8df b134 	ldr.w	fp, [pc, #308]	; 2743c <ip_interface_accept+0x1c8>
   27308:	f247 020c 	movw	r2, #28684	; 0x700c
   2730c:	ea03 030b 	and.w	r3, r3, fp
   27310:	f043 0308 	orr.w	r3, r3, #8
   27314:	6023      	str	r3, [r4, #0]
   27316:	6823      	ldr	r3, [r4, #0]
   27318:	4620      	mov	r0, r4
   2731a:	ea03 030b 	and.w	r3, r3, fp
   2731e:	f043 0307 	orr.w	r3, r3, #7
   27322:	f00f f8aa 	bl	3647a <ip_interface_request_send>
   27326:	4605      	mov	r5, r0
   27328:	b9d0      	cbnz	r0, 27360 <ip_interface_accept+0xec>
   2732a:	6823      	ldr	r3, [r4, #0]
   2732c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27330:	ea23 0309 	bic.w	r3, r3, r9
   27334:	6023      	str	r3, [r4, #0]
   27336:	2109      	movs	r1, #9
   27338:	ab01      	add	r3, sp, #4
   2733a:	4640      	mov	r0, r8
   2733c:	f00f f8b0 	bl	364a0 <ip_interface_wait>
   27340:	6823      	ldr	r3, [r4, #0]
   27342:	4605      	mov	r5, r0
   27344:	ea43 0309 	orr.w	r3, r3, r9
   27348:	6023      	str	r3, [r4, #0]
   2734a:	b1e0      	cbz	r0, 27386 <ip_interface_accept+0x112>
   2734c:	6823      	ldr	r3, [r4, #0]
   2734e:	ea03 030b 	and.w	r3, r3, fp
   27352:	f043 0307 	orr.w	r3, r3, #7
   27356:	6023      	str	r3, [r4, #0]
   27358:	6823      	ldr	r3, [r4, #0]
   2735a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2735e:	6023      	str	r3, [r4, #0]
   27360:	9b00      	ldr	r3, [sp, #0]
   27362:	b113      	cbz	r3, 2736a <ip_interface_accept+0xf6>
   27364:	4630      	mov	r0, r6
   27366:	f7ff fb15 	bl	26994 <interface_socket_free>
   2736a:	4628      	mov	r0, r5
   2736c:	f7f9 fc16 	bl	20b9c <nrf_modem_os_errno_set>
   27370:	f04f 30ff 	mov.w	r0, #4294967295
   27374:	e041      	b.n	273fa <ip_interface_accept+0x186>
   27376:	2523      	movs	r5, #35	; 0x23
   27378:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
   2737c:	e7a2      	b.n	272c4 <ip_interface_accept+0x50>
   2737e:	2516      	movs	r5, #22
   27380:	e7a0      	b.n	272c4 <ip_interface_accept+0x50>
   27382:	2d00      	cmp	r5, #0
   27384:	d1ec      	bne.n	27360 <ip_interface_accept+0xec>
   27386:	4d2e      	ldr	r5, [pc, #184]	; (27440 <ip_interface_accept+0x1cc>)
   27388:	9b00      	ldr	r3, [sp, #0]
   2738a:	f855 1028 	ldr.w	r1, [r5, r8, lsl #2]
   2738e:	698a      	ldr	r2, [r1, #24]
   27390:	619a      	str	r2, [r3, #24]
   27392:	b197      	cbz	r7, 273ba <ip_interface_accept+0x146>
   27394:	68db      	ldr	r3, [r3, #12]
   27396:	2b0a      	cmp	r3, #10
   27398:	d132      	bne.n	27400 <ip_interface_accept+0x18c>
   2739a:	f8da 2000 	ldr.w	r2, [sl]
   2739e:	2a24      	cmp	r2, #36	; 0x24
   273a0:	d10b      	bne.n	273ba <ip_interface_accept+0x146>
   273a2:	703a      	strb	r2, [r7, #0]
   273a4:	607b      	str	r3, [r7, #4]
   273a6:	7f4a      	ldrb	r2, [r1, #29]
   273a8:	7f0b      	ldrb	r3, [r1, #28]
   273aa:	3120      	adds	r1, #32
   273ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   273b0:	2210      	movs	r2, #16
   273b2:	813b      	strh	r3, [r7, #8]
   273b4:	18b8      	adds	r0, r7, r2
   273b6:	f010 f9e4 	bl	37782 <memcpy>
   273ba:	9b00      	ldr	r3, [sp, #0]
   273bc:	491f      	ldr	r1, [pc, #124]	; (2743c <ip_interface_accept+0x1c8>)
   273be:	681a      	ldr	r2, [r3, #0]
   273c0:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
   273c4:	400a      	ands	r2, r1
   273c6:	f042 0205 	orr.w	r2, r2, #5
   273ca:	601a      	str	r2, [r3, #0]
   273cc:	681a      	ldr	r2, [r3, #0]
   273ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   273d2:	601a      	str	r2, [r3, #0]
   273d4:	681a      	ldr	r2, [r3, #0]
   273d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   273da:	601a      	str	r2, [r3, #0]
   273dc:	6823      	ldr	r3, [r4, #0]
   273de:	400b      	ands	r3, r1
   273e0:	f043 0307 	orr.w	r3, r3, #7
   273e4:	6023      	str	r3, [r4, #0]
   273e6:	6823      	ldr	r3, [r4, #0]
   273e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   273ec:	6023      	str	r3, [r4, #0]
   273ee:	f00e fe31 	bl	36054 <rpc_ip_client_message_free>
   273f2:	2300      	movs	r3, #0
   273f4:	4630      	mov	r0, r6
   273f6:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
   273fa:	b003      	add	sp, #12
   273fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27400:	2b02      	cmp	r3, #2
   27402:	d1da      	bne.n	273ba <ip_interface_accept+0x146>
   27404:	f8da 2000 	ldr.w	r2, [sl]
   27408:	2a10      	cmp	r2, #16
   2740a:	d1d6      	bne.n	273ba <ip_interface_accept+0x146>
   2740c:	703a      	strb	r2, [r7, #0]
   2740e:	607b      	str	r3, [r7, #4]
   27410:	7f4a      	ldrb	r2, [r1, #29]
   27412:	7f0b      	ldrb	r3, [r1, #28]
   27414:	f107 000c 	add.w	r0, r7, #12
   27418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2741c:	813b      	strh	r3, [r7, #8]
   2741e:	2204      	movs	r2, #4
   27420:	3120      	adds	r1, #32
   27422:	e7c8      	b.n	273b6 <ip_interface_accept+0x142>
   27424:	2509      	movs	r5, #9
   27426:	4606      	mov	r6, r0
   27428:	e79a      	b.n	27360 <ip_interface_accept+0xec>
   2742a:	252d      	movs	r5, #45	; 0x2d
   2742c:	e798      	b.n	27360 <ip_interface_accept+0xec>
   2742e:	2516      	movs	r5, #22
   27430:	e796      	b.n	27360 <ip_interface_accept+0xec>
   27432:	250c      	movs	r5, #12
   27434:	e794      	b.n	27360 <ip_interface_accept+0xec>
   27436:	bf00      	nop
   27438:	000363ad 	.word	0x000363ad
   2743c:	ffff0000 	.word	0xffff0000
   27440:	20016c14 	.word	0x20016c14

00027444 <ip_interface_setopt>:
   27444:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   27448:	2901      	cmp	r1, #1
   2744a:	4606      	mov	r6, r0
   2744c:	4690      	mov	r8, r2
   2744e:	461d      	mov	r5, r3
   27450:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   27452:	d008      	beq.n	27466 <ip_interface_setopt+0x22>
   27454:	202a      	movs	r0, #42	; 0x2a
   27456:	f7f9 fba1 	bl	20b9c <nrf_modem_os_errno_set>
   2745a:	f04f 34ff 	mov.w	r4, #4294967295
   2745e:	4620      	mov	r0, r4
   27460:	b004      	add	sp, #16
   27462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27466:	f7ff faf5 	bl	26a54 <interface_socket_from_handle_get>
   2746a:	4604      	mov	r4, r0
   2746c:	b908      	cbnz	r0, 27472 <ip_interface_setopt+0x2e>
   2746e:	2009      	movs	r0, #9
   27470:	e7f1      	b.n	27456 <ip_interface_setopt+0x12>
   27472:	f1a8 0319 	sub.w	r3, r8, #25
   27476:	2b1e      	cmp	r3, #30
   27478:	f200 8092 	bhi.w	275a0 <ip_interface_setopt+0x15c>
   2747c:	e8df f003 	tbb	[pc, r3]
   27480:	90909010 	.word	0x90909010
   27484:	58504490 	.word	0x58504490
   27488:	90909090 	.word	0x90909090
   2748c:	60909090 	.word	0x60909090
   27490:	90909090 	.word	0x90909090
   27494:	90909090 	.word	0x90909090
   27498:	7a6d6890 	.word	0x7a6d6890
   2749c:	807d      	.short	0x807d
   2749e:	83          	.byte	0x83
   2749f:	00          	.byte	0x00
   274a0:	b90d      	cbnz	r5, 274a6 <ip_interface_setopt+0x62>
   274a2:	200e      	movs	r0, #14
   274a4:	e7d7      	b.n	27456 <ip_interface_setopt+0x12>
   274a6:	4628      	mov	r0, r5
   274a8:	f7ea f82a 	bl	11500 <strlen>
   274ac:	42b8      	cmp	r0, r7
   274ae:	d1f8      	bne.n	274a2 <ip_interface_setopt+0x5e>
   274b0:	6823      	ldr	r3, [r4, #0]
   274b2:	b29b      	uxth	r3, r3
   274b4:	2b02      	cmp	r3, #2
   274b6:	d1da      	bne.n	2746e <ip_interface_setopt+0x2a>
   274b8:	4629      	mov	r1, r5
   274ba:	68e0      	ldr	r0, [r4, #12]
   274bc:	f002 fac0 	bl	29a40 <pdn_interface_pdn_id_get>
   274c0:	9003      	str	r0, [sp, #12]
   274c2:	3001      	adds	r0, #1
   274c4:	d111      	bne.n	274ea <ip_interface_setopt+0xa6>
   274c6:	4628      	mov	r0, r5
   274c8:	493a      	ldr	r1, [pc, #232]	; (275b4 <ip_interface_setopt+0x170>)
   274ca:	f010 fad9 	bl	37a80 <strstr>
   274ce:	b108      	cbz	r0, 274d4 <ip_interface_setopt+0x90>
   274d0:	4285      	cmp	r5, r0
   274d2:	d001      	beq.n	274d8 <ip_interface_setopt+0x94>
   274d4:	2016      	movs	r0, #22
   274d6:	e7be      	b.n	27456 <ip_interface_setopt+0x12>
   274d8:	4836      	ldr	r0, [pc, #216]	; (275b4 <ip_interface_setopt+0x170>)
   274da:	f7ea f811 	bl	11500 <strlen>
   274de:	220a      	movs	r2, #10
   274e0:	2100      	movs	r1, #0
   274e2:	4428      	add	r0, r5
   274e4:	f007 ff3e 	bl	2f364 <strtoul>
   274e8:	9003      	str	r0, [sp, #12]
   274ea:	2304      	movs	r3, #4
   274ec:	9301      	str	r3, [sp, #4]
   274ee:	ab03      	add	r3, sp, #12
   274f0:	4621      	mov	r1, r4
   274f2:	9300      	str	r3, [sp, #0]
   274f4:	2208      	movs	r2, #8
   274f6:	f243 0310 	movw	r3, #12304	; 0x3010
   274fa:	4630      	mov	r0, r6
   274fc:	f00f f972 	bl	367e4 <ip_interface_socketoption_send>
   27500:	4604      	mov	r4, r0
   27502:	2800      	cmp	r0, #0
   27504:	d0ab      	beq.n	2745e <ip_interface_setopt+0x1a>
   27506:	e7a6      	b.n	27456 <ip_interface_setopt+0x12>
   27508:	4602      	mov	r2, r0
   2750a:	4633      	mov	r3, r6
   2750c:	f248 0101 	movw	r1, #32769	; 0x8001
   27510:	f44f 7000 	mov.w	r0, #512	; 0x200
   27514:	e9cd 5700 	strd	r5, r7, [sp]
   27518:	f00f f9b1 	bl	3687e <setopt_check_and_send_int>
   2751c:	4604      	mov	r4, r0
   2751e:	e79e      	b.n	2745e <ip_interface_setopt+0x1a>
   27520:	4602      	mov	r2, r0
   27522:	4633      	mov	r3, r6
   27524:	f244 0110 	movw	r1, #16400	; 0x4010
   27528:	2004      	movs	r0, #4
   2752a:	e9cd 5700 	strd	r5, r7, [sp]
   2752e:	e7f3      	b.n	27518 <ip_interface_setopt+0xd4>
   27530:	4602      	mov	r2, r0
   27532:	4633      	mov	r3, r6
   27534:	f246 0110 	movw	r1, #24592	; 0x6010
   27538:	2006      	movs	r0, #6
   2753a:	e9cd 5700 	strd	r5, r7, [sp]
   2753e:	e7eb      	b.n	27518 <ip_interface_setopt+0xd4>
   27540:	4602      	mov	r2, r0
   27542:	4633      	mov	r3, r6
   27544:	f241 0104 	movw	r1, #4100	; 0x1004
   27548:	2008      	movs	r0, #8
   2754a:	e9cd 5700 	strd	r5, r7, [sp]
   2754e:	e7e3      	b.n	27518 <ip_interface_setopt+0xd4>
   27550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   27554:	62a3      	str	r3, [r4, #40]	; 0x28
   27556:	2400      	movs	r4, #0
   27558:	e781      	b.n	2745e <ip_interface_setopt+0x1a>
   2755a:	2400      	movs	r4, #0
   2755c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   27560:	4622      	mov	r2, r4
   27562:	6283      	str	r3, [r0, #40]	; 0x28
   27564:	4621      	mov	r1, r4
   27566:	4623      	mov	r3, r4
   27568:	4630      	mov	r0, r6
   2756a:	e9cd 4400 	strd	r4, r4, [sp]
   2756e:	f7ff fc2b 	bl	26dc8 <ip_interface_sendto>
   27572:	e774      	b.n	2745e <ip_interface_setopt+0x1a>
   27574:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   27578:	e7ec      	b.n	27554 <ip_interface_setopt+0x110>
   2757a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   2757e:	e7e9      	b.n	27554 <ip_interface_setopt+0x110>
   27580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27584:	e7e6      	b.n	27554 <ip_interface_setopt+0x110>
   27586:	2f04      	cmp	r7, #4
   27588:	d102      	bne.n	27590 <ip_interface_setopt+0x14c>
   2758a:	682b      	ldr	r3, [r5, #0]
   2758c:	2b87      	cmp	r3, #135	; 0x87
   2758e:	d8a1      	bhi.n	274d4 <ip_interface_setopt+0x90>
   27590:	4633      	mov	r3, r6
   27592:	4622      	mov	r2, r4
   27594:	f245 0106 	movw	r1, #20486	; 0x5006
   27598:	2001      	movs	r0, #1
   2759a:	e9cd 5700 	strd	r5, r7, [sp]
   2759e:	e7bb      	b.n	27518 <ip_interface_setopt+0xd4>
   275a0:	462b      	mov	r3, r5
   275a2:	4642      	mov	r2, r8
   275a4:	2101      	movs	r1, #1
   275a6:	4630      	mov	r0, r6
   275a8:	970a      	str	r7, [sp, #40]	; 0x28
   275aa:	b004      	add	sp, #16
   275ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   275b0:	f7ff ba60 	b.w	26a74 <interface_socket_setopt>
   275b4:	0004037b 	.word	0x0004037b

000275b8 <ip_interface_getaddrinfo>:
   275b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275bc:	b085      	sub	sp, #20
   275be:	9300      	str	r3, [sp, #0]
   275c0:	2300      	movs	r3, #0
   275c2:	4f7b      	ldr	r7, [pc, #492]	; (277b0 <ip_interface_getaddrinfo+0x1f8>)
   275c4:	4614      	mov	r4, r2
   275c6:	803b      	strh	r3, [r7, #0]
   275c8:	2301      	movs	r3, #1
   275ca:	4a7a      	ldr	r2, [pc, #488]	; (277b4 <ip_interface_getaddrinfo+0x1fc>)
   275cc:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 277b8 <ip_interface_getaddrinfo+0x200>
   275d0:	6013      	str	r3, [r2, #0]
   275d2:	f8ca 3000 	str.w	r3, [sl]
   275d6:	4b79      	ldr	r3, [pc, #484]	; (277bc <ip_interface_getaddrinfo+0x204>)
   275d8:	4605      	mov	r5, r0
   275da:	781b      	ldrb	r3, [r3, #0]
   275dc:	460e      	mov	r6, r1
   275de:	b93b      	cbnz	r3, 275f0 <ip_interface_getaddrinfo+0x38>
   275e0:	2070      	movs	r0, #112	; 0x70
   275e2:	f7f9 fadb 	bl	20b9c <nrf_modem_os_errno_set>
   275e6:	f240 1015 	movw	r0, #277	; 0x115
   275ea:	b005      	add	sp, #20
   275ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275f0:	b1c9      	cbz	r1, 27626 <ip_interface_getaddrinfo+0x6e>
   275f2:	b154      	cbz	r4, 2760a <ip_interface_getaddrinfo+0x52>
   275f4:	6823      	ldr	r3, [r4, #0]
   275f6:	04d8      	lsls	r0, r3, #19
   275f8:	d507      	bpl.n	2760a <ip_interface_getaddrinfo+0x52>
   275fa:	0559      	lsls	r1, r3, #21
   275fc:	d405      	bmi.n	2760a <ip_interface_getaddrinfo+0x52>
   275fe:	68a3      	ldr	r3, [r4, #8]
   27600:	2b03      	cmp	r3, #3
   27602:	d137      	bne.n	27674 <ip_interface_getaddrinfo+0xbc>
   27604:	f44f 7089 	mov.w	r0, #274	; 0x112
   27608:	e7ef      	b.n	275ea <ip_interface_getaddrinfo+0x32>
   2760a:	220a      	movs	r2, #10
   2760c:	2100      	movs	r1, #0
   2760e:	4630      	mov	r0, r6
   27610:	f007 fd84 	bl	2f11c <strtol>
   27614:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   27618:	1e42      	subs	r2, r0, #1
   2761a:	429a      	cmp	r2, r3
   2761c:	d8f2      	bhi.n	27604 <ip_interface_getaddrinfo+0x4c>
   2761e:	0203      	lsls	r3, r0, #8
   27620:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   27624:	8038      	strh	r0, [r7, #0]
   27626:	2c00      	cmp	r4, #0
   27628:	d1e9      	bne.n	275fe <ip_interface_getaddrinfo+0x46>
   2762a:	2300      	movs	r3, #0
   2762c:	f8df b190 	ldr.w	fp, [pc, #400]	; 277c0 <ip_interface_getaddrinfo+0x208>
   27630:	f8df 9190 	ldr.w	r9, [pc, #400]	; 277c4 <ip_interface_getaddrinfo+0x20c>
   27634:	f8cb 3000 	str.w	r3, [fp]
   27638:	f8c9 3000 	str.w	r3, [r9]
   2763c:	b36d      	cbz	r5, 2769a <ip_interface_getaddrinfo+0xe2>
   2763e:	4628      	mov	r0, r5
   27640:	f7e9 ff5e 	bl	11500 <strlen>
   27644:	4680      	mov	r8, r0
   27646:	bb54      	cbnz	r4, 2769e <ip_interface_getaddrinfo+0xe6>
   27648:	f04f 31ff 	mov.w	r1, #4294967295
   2764c:	4e5e      	ldr	r6, [pc, #376]	; (277c8 <ip_interface_getaddrinfo+0x210>)
   2764e:	6833      	ldr	r3, [r6, #0]
   27650:	2b00      	cmp	r3, #0
   27652:	f040 8096 	bne.w	27782 <ip_interface_getaddrinfo+0x1ca>
   27656:	2301      	movs	r3, #1
   27658:	f247 020d 	movw	r2, #28685	; 0x700d
   2765c:	6033      	str	r3, [r6, #0]
   2765e:	4608      	mov	r0, r1
   27660:	4643      	mov	r3, r8
   27662:	f00e fef2 	bl	3644a <ip_interface_request_create>
   27666:	4607      	mov	r7, r0
   27668:	2800      	cmp	r0, #0
   2766a:	d13a      	bne.n	276e2 <ip_interface_getaddrinfo+0x12a>
   2766c:	6030      	str	r0, [r6, #0]
   2766e:	f240 100f 	movw	r0, #271	; 0x10f
   27672:	e7ba      	b.n	275ea <ip_interface_getaddrinfo+0x32>
   27674:	6860      	ldr	r0, [r4, #4]
   27676:	f00e fe86 	bl	36386 <address_family_verify>
   2767a:	b958      	cbnz	r0, 27694 <ip_interface_getaddrinfo+0xdc>
   2767c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   27680:	2301      	movs	r3, #1
   27682:	aa03      	add	r2, sp, #12
   27684:	9303      	str	r3, [sp, #12]
   27686:	f00e fec2 	bl	3640e <protocol_verify>
   2768a:	2800      	cmp	r0, #0
   2768c:	d0cd      	beq.n	2762a <ip_interface_getaddrinfo+0x72>
   2768e:	f240 1013 	movw	r0, #275	; 0x113
   27692:	e7aa      	b.n	275ea <ip_interface_getaddrinfo+0x32>
   27694:	f44f 7087 	mov.w	r0, #270	; 0x10e
   27698:	e7a7      	b.n	275ea <ip_interface_getaddrinfo+0x32>
   2769a:	46a8      	mov	r8, r5
   2769c:	e7d3      	b.n	27646 <ip_interface_getaddrinfo+0x8e>
   2769e:	69e7      	ldr	r7, [r4, #28]
   276a0:	2f00      	cmp	r7, #0
   276a2:	d071      	beq.n	27788 <ip_interface_getaddrinfo+0x1d0>
   276a4:	687b      	ldr	r3, [r7, #4]
   276a6:	2b66      	cmp	r3, #102	; 0x66
   276a8:	d1ce      	bne.n	27648 <ip_interface_getaddrinfo+0x90>
   276aa:	68bb      	ldr	r3, [r7, #8]
   276ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   276b0:	d1ca      	bne.n	27648 <ip_interface_getaddrinfo+0x90>
   276b2:	f240 2302 	movw	r3, #514	; 0x202
   276b6:	68fa      	ldr	r2, [r7, #12]
   276b8:	429a      	cmp	r2, r3
   276ba:	d1c5      	bne.n	27648 <ip_interface_getaddrinfo+0x90>
   276bc:	69b9      	ldr	r1, [r7, #24]
   276be:	2900      	cmp	r1, #0
   276c0:	d0c2      	beq.n	27648 <ip_interface_getaddrinfo+0x90>
   276c2:	6860      	ldr	r0, [r4, #4]
   276c4:	f002 f9bc 	bl	29a40 <pdn_interface_pdn_id_get>
   276c8:	1c42      	adds	r2, r0, #1
   276ca:	4601      	mov	r1, r0
   276cc:	d1be      	bne.n	2764c <ip_interface_getaddrinfo+0x94>
   276ce:	e7bb      	b.n	27648 <ip_interface_getaddrinfo+0x90>
   276d0:	9001      	str	r0, [sp, #4]
   276d2:	483e      	ldr	r0, [pc, #248]	; (277cc <ip_interface_getaddrinfo+0x214>)
   276d4:	f7e9 ff14 	bl	11500 <strlen>
   276d8:	9b01      	ldr	r3, [sp, #4]
   276da:	220a      	movs	r2, #10
   276dc:	4639      	mov	r1, r7
   276de:	4418      	add	r0, r3
   276e0:	e062      	b.n	277a8 <ip_interface_getaddrinfo+0x1f0>
   276e2:	b364      	cbz	r4, 2773e <ip_interface_getaddrinfo+0x186>
   276e4:	68a3      	ldr	r3, [r4, #8]
   276e6:	2b02      	cmp	r3, #2
   276e8:	bf08      	it	eq
   276ea:	4a32      	ldreq	r2, [pc, #200]	; (277b4 <ip_interface_getaddrinfo+0x1fc>)
   276ec:	f8ca 3000 	str.w	r3, [sl]
   276f0:	bf08      	it	eq
   276f2:	6013      	streq	r3, [r2, #0]
   276f4:	6862      	ldr	r2, [r4, #4]
   276f6:	3a02      	subs	r2, #2
   276f8:	2a08      	cmp	r2, #8
   276fa:	bf8e      	itee	hi
   276fc:	2200      	movhi	r2, #0
   276fe:	4934      	ldrls	r1, [pc, #208]	; (277d0 <ip_interface_getaddrinfo+0x218>)
   27700:	568a      	ldrsbls	r2, [r1, r2]
   27702:	6182      	str	r2, [r0, #24]
   27704:	68e2      	ldr	r2, [r4, #12]
   27706:	61c3      	str	r3, [r0, #28]
   27708:	2300      	movs	r3, #0
   2770a:	6202      	str	r2, [r0, #32]
   2770c:	7503      	strb	r3, [r0, #20]
   2770e:	7543      	strb	r3, [r0, #21]
   27710:	7583      	strb	r3, [r0, #22]
   27712:	75c3      	strb	r3, [r0, #23]
   27714:	68bb      	ldr	r3, [r7, #8]
   27716:	3310      	adds	r3, #16
   27718:	60bb      	str	r3, [r7, #8]
   2771a:	b12d      	cbz	r5, 27728 <ip_interface_getaddrinfo+0x170>
   2771c:	6838      	ldr	r0, [r7, #0]
   2771e:	b118      	cbz	r0, 27728 <ip_interface_getaddrinfo+0x170>
   27720:	4642      	mov	r2, r8
   27722:	4629      	mov	r1, r5
   27724:	f010 f82d 	bl	37782 <memcpy>
   27728:	f247 010d 	movw	r1, #28685	; 0x700d
   2772c:	4638      	mov	r0, r7
   2772e:	f00e fc80 	bl	36032 <rpc_ip_client_request_send>
   27732:	b150      	cbz	r0, 2774a <ip_interface_getaddrinfo+0x192>
   27734:	2300      	movs	r3, #0
   27736:	f44f 7081 	mov.w	r0, #258	; 0x102
   2773a:	6033      	str	r3, [r6, #0]
   2773c:	e755      	b.n	275ea <ip_interface_getaddrinfo+0x32>
   2773e:	2210      	movs	r2, #16
   27740:	4621      	mov	r1, r4
   27742:	3014      	adds	r0, #20
   27744:	f010 f83d 	bl	377c2 <memset>
   27748:	e7e4      	b.n	27714 <ip_interface_getaddrinfo+0x15c>
   2774a:	f04f 33ff 	mov.w	r3, #4294967295
   2774e:	9303      	str	r3, [sp, #12]
   27750:	4638      	mov	r0, r7
   27752:	a903      	add	r1, sp, #12
   27754:	f7f9 f96a 	bl	20a2c <nrf_modem_os_timedwait>
   27758:	6833      	ldr	r3, [r6, #0]
   2775a:	2b01      	cmp	r3, #1
   2775c:	d0f8      	beq.n	27750 <ip_interface_getaddrinfo+0x198>
   2775e:	f8d9 0000 	ldr.w	r0, [r9]
   27762:	b920      	cbnz	r0, 2776e <ip_interface_getaddrinfo+0x1b6>
   27764:	f8db 3000 	ldr.w	r3, [fp]
   27768:	9a00      	ldr	r2, [sp, #0]
   2776a:	6013      	str	r3, [r2, #0]
   2776c:	e73d      	b.n	275ea <ip_interface_getaddrinfo+0x32>
   2776e:	2300      	movs	r3, #0
   27770:	6033      	str	r3, [r6, #0]
   27772:	4b18      	ldr	r3, [pc, #96]	; (277d4 <ip_interface_getaddrinfo+0x21c>)
   27774:	6818      	ldr	r0, [r3, #0]
   27776:	b108      	cbz	r0, 2777c <ip_interface_getaddrinfo+0x1c4>
   27778:	f7f9 fa10 	bl	20b9c <nrf_modem_os_errno_set>
   2777c:	f8d9 0000 	ldr.w	r0, [r9]
   27780:	e733      	b.n	275ea <ip_interface_getaddrinfo+0x32>
   27782:	f44f 708a 	mov.w	r0, #276	; 0x114
   27786:	e730      	b.n	275ea <ip_interface_getaddrinfo+0x32>
   27788:	2e00      	cmp	r6, #0
   2778a:	f43f af5d 	beq.w	27648 <ip_interface_getaddrinfo+0x90>
   2778e:	6823      	ldr	r3, [r4, #0]
   27790:	04db      	lsls	r3, r3, #19
   27792:	f57f af59 	bpl.w	27648 <ip_interface_getaddrinfo+0x90>
   27796:	213a      	movs	r1, #58	; 0x3a
   27798:	4630      	mov	r0, r6
   2779a:	f010 f92a 	bl	379f2 <strchr>
   2779e:	2800      	cmp	r0, #0
   277a0:	d196      	bne.n	276d0 <ip_interface_getaddrinfo+0x118>
   277a2:	4601      	mov	r1, r0
   277a4:	220a      	movs	r2, #10
   277a6:	4630      	mov	r0, r6
   277a8:	f007 fddc 	bl	2f364 <strtoul>
   277ac:	4601      	mov	r1, r0
   277ae:	e74d      	b.n	2764c <ip_interface_getaddrinfo+0x94>
   277b0:	2001ad64 	.word	0x2001ad64
   277b4:	20016bfc 	.word	0x20016bfc
   277b8:	20016c00 	.word	0x20016c00
   277bc:	2001da7a 	.word	0x2001da7a
   277c0:	20016c10 	.word	0x20016c10
   277c4:	20016c08 	.word	0x20016c08
   277c8:	20016c0c 	.word	0x20016c0c
   277cc:	000404a9 	.word	0x000404a9
   277d0:	0004037f 	.word	0x0004037f
   277d4:	20016c04 	.word	0x20016c04

000277d8 <ip_interface_freeaddrinfo>:
   277d8:	b538      	push	{r3, r4, r5, lr}
   277da:	4d0a      	ldr	r5, [pc, #40]	; (27804 <ip_interface_freeaddrinfo+0x2c>)
   277dc:	4604      	mov	r4, r0
   277de:	682b      	ldr	r3, [r5, #0]
   277e0:	2b02      	cmp	r3, #2
   277e2:	d10e      	bne.n	27802 <ip_interface_freeaddrinfo+0x2a>
   277e4:	b148      	cbz	r0, 277fa <ip_interface_freeaddrinfo+0x22>
   277e6:	6940      	ldr	r0, [r0, #20]
   277e8:	f7f9 fb92 	bl	20f10 <nrf_modem_os_free>
   277ec:	69a0      	ldr	r0, [r4, #24]
   277ee:	b108      	cbz	r0, 277f4 <ip_interface_freeaddrinfo+0x1c>
   277f0:	f7f9 fb8e 	bl	20f10 <nrf_modem_os_free>
   277f4:	4620      	mov	r0, r4
   277f6:	f7f9 fb8b 	bl	20f10 <nrf_modem_os_free>
   277fa:	2300      	movs	r3, #0
   277fc:	4a02      	ldr	r2, [pc, #8]	; (27808 <ip_interface_freeaddrinfo+0x30>)
   277fe:	602b      	str	r3, [r5, #0]
   27800:	6013      	str	r3, [r2, #0]
   27802:	bd38      	pop	{r3, r4, r5, pc}
   27804:	20016c0c 	.word	0x20016c0c
   27808:	20016c08 	.word	0x20016c08

0002780c <rpc_ip_event_handler>:
   2780c:	f248 030d 	movw	r3, #32781	; 0x800d
   27810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27814:	4299      	cmp	r1, r3
   27816:	4604      	mov	r4, r0
   27818:	460e      	mov	r6, r1
   2781a:	b087      	sub	sp, #28
   2781c:	d038      	beq.n	27890 <rpc_ip_event_handler+0x84>
   2781e:	f248 030f 	movw	r3, #32783	; 0x800f
   27822:	4299      	cmp	r1, r3
   27824:	f000 80d2 	beq.w	279cc <rpc_ip_event_handler+0x1c0>
   27828:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   2782c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   27830:	68c0      	ldr	r0, [r0, #12]
   27832:	f040 80d5 	bne.w	279e0 <rpc_ip_event_handler+0x1d4>
   27836:	f7ff f8f5 	bl	26a24 <interface_from_internal_id_search>
   2783a:	4607      	mov	r7, r0
   2783c:	4638      	mov	r0, r7
   2783e:	f7ff f909 	bl	26a54 <interface_socket_from_handle_get>
   27842:	4605      	mov	r5, r0
   27844:	2800      	cmp	r0, #0
   27846:	d056      	beq.n	278f6 <rpc_ip_event_handler+0xea>
   27848:	4601      	mov	r1, r0
   2784a:	4633      	mov	r3, r6
   2784c:	4622      	mov	r2, r4
   2784e:	4638      	mov	r0, r7
   27850:	f000 fdba 	bl	283c8 <tls_rpc_ip_event_handler>
   27854:	2800      	cmp	r0, #0
   27856:	f000 80c1 	beq.w	279dc <rpc_ip_event_handler+0x1d0>
   2785a:	f248 030c 	movw	r3, #32780	; 0x800c
   2785e:	429e      	cmp	r6, r3
   27860:	f200 80c0 	bhi.w	279e4 <rpc_ip_event_handler+0x1d8>
   27864:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   27868:	d945      	bls.n	278f6 <rpc_ip_event_handler+0xea>
   2786a:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   2786e:	3e01      	subs	r6, #1
   27870:	2e0b      	cmp	r6, #11
   27872:	d840      	bhi.n	278f6 <rpc_ip_event_handler+0xea>
   27874:	e8df f016 	tbh	[pc, r6, lsl #1]
   27878:	013f00f7 	.word	0x013f00f7
   2787c:	01ee01e4 	.word	0x01ee01e4
   27880:	01ba0130 	.word	0x01ba0130
   27884:	015901ba 	.word	0x015901ba
   27888:	003f0105 	.word	0x003f0105
   2788c:	0184003f 	.word	0x0184003f
   27890:	4bb2      	ldr	r3, [pc, #712]	; (27b5c <rpc_ip_event_handler+0x350>)
   27892:	681b      	ldr	r3, [r3, #0]
   27894:	2b01      	cmp	r3, #1
   27896:	d12e      	bne.n	278f6 <rpc_ip_event_handler+0xea>
   27898:	f8d0 8014 	ldr.w	r8, [r0, #20]
   2789c:	f1b8 0f00 	cmp.w	r8, #0
   278a0:	f040 808e 	bne.w	279c0 <rpc_ip_event_handler+0x1b4>
   278a4:	f8d0 a018 	ldr.w	sl, [r0, #24]
   278a8:	f8d0 9000 	ldr.w	r9, [r0]
   278ac:	ea4f 134a 	mov.w	r3, sl, lsl #5
   278b0:	4618      	mov	r0, r3
   278b2:	9301      	str	r3, [sp, #4]
   278b4:	f7f9 fb24 	bl	20f00 <nrf_modem_os_alloc>
   278b8:	9000      	str	r0, [sp, #0]
   278ba:	b308      	cbz	r0, 27900 <rpc_ip_event_handler+0xf4>
   278bc:	2024      	movs	r0, #36	; 0x24
   278be:	fb00 f00a 	mul.w	r0, r0, sl
   278c2:	f7f9 fb1d 	bl	20f00 <nrf_modem_os_alloc>
   278c6:	b1e8      	cbz	r0, 27904 <rpc_ip_event_handler+0xf8>
   278c8:	2704      	movs	r7, #4
   278ca:	9b00      	ldr	r3, [sp, #0]
   278cc:	f100 050c 	add.w	r5, r0, #12
   278d0:	f103 0620 	add.w	r6, r3, #32
   278d4:	45c2      	cmp	sl, r8
   278d6:	d119      	bne.n	2790c <rpc_ip_event_handler+0x100>
   278d8:	f1ba 0f00 	cmp.w	sl, #0
   278dc:	d005      	beq.n	278ea <rpc_ip_event_handler+0xde>
   278de:	e9dd 2300 	ldrd	r2, r3, [sp]
   278e2:	4413      	add	r3, r2
   278e4:	2200      	movs	r2, #0
   278e6:	f843 2c04 	str.w	r2, [r3, #-4]
   278ea:	4b9d      	ldr	r3, [pc, #628]	; (27b60 <rpc_ip_event_handler+0x354>)
   278ec:	9a00      	ldr	r2, [sp, #0]
   278ee:	601a      	str	r2, [r3, #0]
   278f0:	2302      	movs	r3, #2
   278f2:	4a9a      	ldr	r2, [pc, #616]	; (27b5c <rpc_ip_event_handler+0x350>)
   278f4:	6013      	str	r3, [r2, #0]
   278f6:	6820      	ldr	r0, [r4, #0]
   278f8:	2800      	cmp	r0, #0
   278fa:	f040 8174 	bne.w	27be6 <rpc_ip_event_handler+0x3da>
   278fe:	e06d      	b.n	279dc <rpc_ip_event_handler+0x1d0>
   27900:	f7f9 fb06 	bl	20f10 <nrf_modem_os_free>
   27904:	220c      	movs	r2, #12
   27906:	4b97      	ldr	r3, [pc, #604]	; (27b64 <rpc_ip_event_handler+0x358>)
   27908:	601a      	str	r2, [r3, #0]
   2790a:	e7ee      	b.n	278ea <rpc_ip_event_handler+0xde>
   2790c:	f859 3007 	ldr.w	r3, [r9, r7]
   27910:	f1a5 010c 	sub.w	r1, r5, #12
   27914:	f846 3c20 	str.w	r3, [r6, #-32]
   27918:	eb09 0307 	add.w	r3, r9, r7
   2791c:	685b      	ldr	r3, [r3, #4]
   2791e:	3b01      	subs	r3, #1
   27920:	2b04      	cmp	r3, #4
   27922:	bf8e      	itee	hi
   27924:	2300      	movhi	r3, #0
   27926:	4a90      	ldrls	r2, [pc, #576]	; (27b68 <rpc_ip_event_handler+0x35c>)
   27928:	56d3      	ldrsbls	r3, [r2, r3]
   2792a:	f846 3c1c 	str.w	r3, [r6, #-28]
   2792e:	4b8f      	ldr	r3, [pc, #572]	; (27b6c <rpc_ip_event_handler+0x360>)
   27930:	681b      	ldr	r3, [r3, #0]
   27932:	f846 3c18 	str.w	r3, [r6, #-24]
   27936:	4b8e      	ldr	r3, [pc, #568]	; (27b70 <rpc_ip_event_handler+0x364>)
   27938:	681b      	ldr	r3, [r3, #0]
   2793a:	f846 3c14 	str.w	r3, [r6, #-20]
   2793e:	eb09 0307 	add.w	r3, r9, r7
   27942:	8a1a      	ldrh	r2, [r3, #16]
   27944:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   27948:	4b8a      	ldr	r3, [pc, #552]	; (27b74 <rpc_ip_event_handler+0x368>)
   2794a:	3714      	adds	r7, #20
   2794c:	2a04      	cmp	r2, #4
   2794e:	f846 1c0c 	str.w	r1, [r6, #-12]
   27952:	881b      	ldrh	r3, [r3, #0]
   27954:	f846 2c10 	str.w	r2, [r6, #-16]
   27958:	eb09 0107 	add.w	r1, r9, r7
   2795c:	d126      	bne.n	279ac <rpc_ip_event_handler+0x1a0>
   2795e:	2002      	movs	r0, #2
   27960:	f845 0c08 	str.w	r0, [r5, #-8]
   27964:	2010      	movs	r0, #16
   27966:	f805 0c0c 	strb.w	r0, [r5, #-12]
   2796a:	4628      	mov	r0, r5
   2796c:	f825 3c04 	strh.w	r3, [r5, #-4]
   27970:	f00f ff07 	bl	37782 <memcpy>
   27974:	f856 3c10 	ldr.w	r3, [r6, #-16]
   27978:	f10b 0001 	add.w	r0, fp, #1
   2797c:	441f      	add	r7, r3
   2797e:	f7f9 fabf 	bl	20f00 <nrf_modem_os_alloc>
   27982:	f846 0c08 	str.w	r0, [r6, #-8]
   27986:	b148      	cbz	r0, 2799c <rpc_ip_event_handler+0x190>
   27988:	465a      	mov	r2, fp
   2798a:	eb09 0107 	add.w	r1, r9, r7
   2798e:	f00f fef8 	bl	37782 <memcpy>
   27992:	2200      	movs	r2, #0
   27994:	f856 3c08 	ldr.w	r3, [r6, #-8]
   27998:	f803 200b 	strb.w	r2, [r3, fp]
   2799c:	f846 6c04 	str.w	r6, [r6, #-4]
   279a0:	445f      	add	r7, fp
   279a2:	f108 0801 	add.w	r8, r8, #1
   279a6:	3620      	adds	r6, #32
   279a8:	3508      	adds	r5, #8
   279aa:	e793      	b.n	278d4 <rpc_ip_event_handler+0xc8>
   279ac:	200a      	movs	r0, #10
   279ae:	f845 0c08 	str.w	r0, [r5, #-8]
   279b2:	2024      	movs	r0, #36	; 0x24
   279b4:	f825 3c04 	strh.w	r3, [r5, #-4]
   279b8:	f805 0c0c 	strb.w	r0, [r5, #-12]
   279bc:	1d28      	adds	r0, r5, #4
   279be:	e7d7      	b.n	27970 <rpc_ip_event_handler+0x164>
   279c0:	4640      	mov	r0, r8
   279c2:	f7ff f907 	bl	26bd4 <rpc_error_to_nrf_gai_errno>
   279c6:	4b67      	ldr	r3, [pc, #412]	; (27b64 <rpc_ip_event_handler+0x358>)
   279c8:	6018      	str	r0, [r3, #0]
   279ca:	e791      	b.n	278f0 <rpc_ip_event_handler+0xe4>
   279cc:	6940      	ldr	r0, [r0, #20]
   279ce:	f7ff f8f9 	bl	26bc4 <rpc_error_to_nrf_errno>
   279d2:	2201      	movs	r2, #1
   279d4:	4b68      	ldr	r3, [pc, #416]	; (27b78 <rpc_ip_event_handler+0x36c>)
   279d6:	6018      	str	r0, [r3, #0]
   279d8:	4b68      	ldr	r3, [pc, #416]	; (27b7c <rpc_ip_event_handler+0x370>)
   279da:	701a      	strb	r2, [r3, #0]
   279dc:	2000      	movs	r0, #0
   279de:	e04d      	b.n	27a7c <rpc_ip_event_handler+0x270>
   279e0:	0c07      	lsrs	r7, r0, #16
   279e2:	e72b      	b.n	2783c <rpc_ip_event_handler+0x30>
   279e4:	f249 0302 	movw	r3, #36866	; 0x9002
   279e8:	429e      	cmp	r6, r3
   279ea:	f000 80ad 	beq.w	27b48 <rpc_ip_event_handler+0x33c>
   279ee:	f249 0303 	movw	r3, #36867	; 0x9003
   279f2:	429e      	cmp	r6, r3
   279f4:	d054      	beq.n	27aa0 <rpc_ip_event_handler+0x294>
   279f6:	f249 0301 	movw	r3, #36865	; 0x9001
   279fa:	429e      	cmp	r6, r3
   279fc:	f47f af7b 	bne.w	278f6 <rpc_ip_event_handler+0xea>
   27a00:	682e      	ldr	r6, [r5, #0]
   27a02:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   27a06:	f000 80ed 	beq.w	27be4 <rpc_ip_event_handler+0x3d8>
   27a0a:	68a3      	ldr	r3, [r4, #8]
   27a0c:	2b04      	cmp	r3, #4
   27a0e:	f240 80e6 	bls.w	27bde <rpc_ip_event_handler+0x3d2>
   27a12:	8a67      	ldrh	r7, [r4, #18]
   27a14:	2f00      	cmp	r7, #0
   27a16:	f000 80e3 	beq.w	27be0 <rpc_ip_event_handler+0x3d4>
   27a1a:	2f10      	cmp	r7, #16
   27a1c:	f040 80c3 	bne.w	27ba6 <rpc_ip_event_handler+0x39a>
   27a20:	2024      	movs	r0, #36	; 0x24
   27a22:	f7f9 fa6d 	bl	20f00 <nrf_modem_os_alloc>
   27a26:	4606      	mov	r6, r0
   27a28:	b1d8      	cbz	r0, 27a62 <rpc_ip_event_handler+0x256>
   27a2a:	230a      	movs	r3, #10
   27a2c:	2724      	movs	r7, #36	; 0x24
   27a2e:	6043      	str	r3, [r0, #4]
   27a30:	7007      	strb	r7, [r0, #0]
   27a32:	7c62      	ldrb	r2, [r4, #17]
   27a34:	7c23      	ldrb	r3, [r4, #16]
   27a36:	f104 0114 	add.w	r1, r4, #20
   27a3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27a3e:	2210      	movs	r2, #16
   27a40:	8103      	strh	r3, [r0, #8]
   27a42:	4410      	add	r0, r2
   27a44:	f00f fe9d 	bl	37782 <memcpy>
   27a48:	6823      	ldr	r3, [r4, #0]
   27a4a:	69e8      	ldr	r0, [r5, #28]
   27a4c:	9302      	str	r3, [sp, #8]
   27a4e:	6863      	ldr	r3, [r4, #4]
   27a50:	9705      	str	r7, [sp, #20]
   27a52:	e9cd 3603 	strd	r3, r6, [sp, #12]
   27a56:	6803      	ldr	r3, [r0, #0]
   27a58:	a902      	add	r1, sp, #8
   27a5a:	685b      	ldr	r3, [r3, #4]
   27a5c:	4798      	blx	r3
   27a5e:	3001      	adds	r0, #1
   27a60:	d177      	bne.n	27b52 <rpc_ip_event_handler+0x346>
   27a62:	2002      	movs	r0, #2
   27a64:	e00a      	b.n	27a7c <rpc_ip_event_handler+0x270>
   27a66:	682b      	ldr	r3, [r5, #0]
   27a68:	2b01      	cmp	r3, #1
   27a6a:	d1b7      	bne.n	279dc <rpc_ip_event_handler+0x1d0>
   27a6c:	6960      	ldr	r0, [r4, #20]
   27a6e:	2800      	cmp	r0, #0
   27a70:	f040 8100 	bne.w	27c74 <rpc_ip_event_handler+0x468>
   27a74:	2302      	movs	r3, #2
   27a76:	602b      	str	r3, [r5, #0]
   27a78:	69a3      	ldr	r3, [r4, #24]
   27a7a:	61ab      	str	r3, [r5, #24]
   27a7c:	b007      	add	sp, #28
   27a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a82:	682b      	ldr	r3, [r5, #0]
   27a84:	b29b      	uxth	r3, r3
   27a86:	2b0d      	cmp	r3, #13
   27a88:	d1a8      	bne.n	279dc <rpc_ip_event_handler+0x1d0>
   27a8a:	6960      	ldr	r0, [r4, #20]
   27a8c:	2800      	cmp	r0, #0
   27a8e:	f040 80f1 	bne.w	27c74 <rpc_ip_event_handler+0x468>
   27a92:	682b      	ldr	r3, [r5, #0]
   27a94:	0c1b      	lsrs	r3, r3, #16
   27a96:	041b      	lsls	r3, r3, #16
   27a98:	f043 030e 	orr.w	r3, r3, #14
   27a9c:	602b      	str	r3, [r5, #0]
   27a9e:	e7ed      	b.n	27a7c <rpc_ip_event_handler+0x270>
   27aa0:	682b      	ldr	r3, [r5, #0]
   27aa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   27aa6:	602b      	str	r3, [r5, #0]
   27aa8:	682b      	ldr	r3, [r5, #0]
   27aaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   27aae:	602b      	str	r3, [r5, #0]
   27ab0:	682b      	ldr	r3, [r5, #0]
   27ab2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   27ab6:	602b      	str	r3, [r5, #0]
   27ab8:	6920      	ldr	r0, [r4, #16]
   27aba:	286c      	cmp	r0, #108	; 0x6c
   27abc:	d107      	bne.n	27ace <rpc_ip_event_handler+0x2c2>
   27abe:	682b      	ldr	r3, [r5, #0]
   27ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   27ac4:	602b      	str	r3, [r5, #0]
   27ac6:	2339      	movs	r3, #57	; 0x39
   27ac8:	606b      	str	r3, [r5, #4]
   27aca:	60ab      	str	r3, [r5, #8]
   27acc:	e786      	b.n	279dc <rpc_ip_event_handler+0x1d0>
   27ace:	f7ff f879 	bl	26bc4 <rpc_error_to_nrf_errno>
   27ad2:	6068      	str	r0, [r5, #4]
   27ad4:	60a8      	str	r0, [r5, #8]
   27ad6:	e781      	b.n	279dc <rpc_ip_event_handler+0x1d0>
   27ad8:	682b      	ldr	r3, [r5, #0]
   27ada:	b29b      	uxth	r3, r3
   27adc:	2b03      	cmp	r3, #3
   27ade:	f47f af7d 	bne.w	279dc <rpc_ip_event_handler+0x1d0>
   27ae2:	6960      	ldr	r0, [r4, #20]
   27ae4:	2800      	cmp	r0, #0
   27ae6:	f040 80c5 	bne.w	27c74 <rpc_ip_event_handler+0x468>
   27aea:	682b      	ldr	r3, [r5, #0]
   27aec:	0c1b      	lsrs	r3, r3, #16
   27aee:	041b      	lsls	r3, r3, #16
   27af0:	f043 0304 	orr.w	r3, r3, #4
   27af4:	e7d2      	b.n	27a9c <rpc_ip_event_handler+0x290>
   27af6:	682b      	ldr	r3, [r5, #0]
   27af8:	0098      	lsls	r0, r3, #2
   27afa:	f57f af6f 	bpl.w	279dc <rpc_ip_event_handler+0x1d0>
   27afe:	682b      	ldr	r3, [r5, #0]
   27b00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   27b04:	602b      	str	r3, [r5, #0]
   27b06:	6960      	ldr	r0, [r4, #20]
   27b08:	2800      	cmp	r0, #0
   27b0a:	f040 8095 	bne.w	27c38 <rpc_ip_event_handler+0x42c>
   27b0e:	682b      	ldr	r3, [r5, #0]
   27b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   27b14:	602b      	str	r3, [r5, #0]
   27b16:	682b      	ldr	r3, [r5, #0]
   27b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   27b1c:	602b      	str	r3, [r5, #0]
   27b1e:	682b      	ldr	r3, [r5, #0]
   27b20:	0c1b      	lsrs	r3, r3, #16
   27b22:	041b      	lsls	r3, r3, #16
   27b24:	f043 0305 	orr.w	r3, r3, #5
   27b28:	e7b8      	b.n	27a9c <rpc_ip_event_handler+0x290>
   27b2a:	682b      	ldr	r3, [r5, #0]
   27b2c:	b29b      	uxth	r3, r3
   27b2e:	2b06      	cmp	r3, #6
   27b30:	f47f af54 	bne.w	279dc <rpc_ip_event_handler+0x1d0>
   27b34:	6960      	ldr	r0, [r4, #20]
   27b36:	2800      	cmp	r0, #0
   27b38:	f040 809c 	bne.w	27c74 <rpc_ip_event_handler+0x468>
   27b3c:	682b      	ldr	r3, [r5, #0]
   27b3e:	0c1b      	lsrs	r3, r3, #16
   27b40:	041b      	lsls	r3, r3, #16
   27b42:	f043 0307 	orr.w	r3, r3, #7
   27b46:	e7a9      	b.n	27a9c <rpc_ip_event_handler+0x290>
   27b48:	682b      	ldr	r3, [r5, #0]
   27b4a:	b29b      	uxth	r3, r3
   27b4c:	2b07      	cmp	r3, #7
   27b4e:	f47f af45 	bne.w	279dc <rpc_ip_event_handler+0x1d0>
   27b52:	682b      	ldr	r3, [r5, #0]
   27b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   27b58:	602b      	str	r3, [r5, #0]
   27b5a:	e73f      	b.n	279dc <rpc_ip_event_handler+0x1d0>
   27b5c:	20016c0c 	.word	0x20016c0c
   27b60:	20016c10 	.word	0x20016c10
   27b64:	20016c08 	.word	0x20016c08
   27b68:	00040388 	.word	0x00040388
   27b6c:	20016c00 	.word	0x20016c00
   27b70:	20016bfc 	.word	0x20016bfc
   27b74:	2001ad64 	.word	0x2001ad64
   27b78:	20016c38 	.word	0x20016c38
   27b7c:	2001da7b 	.word	0x2001da7b
   27b80:	682b      	ldr	r3, [r5, #0]
   27b82:	b29b      	uxth	r3, r3
   27b84:	2b08      	cmp	r3, #8
   27b86:	f47f af29 	bne.w	279dc <rpc_ip_event_handler+0x1d0>
   27b8a:	6960      	ldr	r0, [r4, #20]
   27b8c:	2800      	cmp	r0, #0
   27b8e:	d171      	bne.n	27c74 <rpc_ip_event_handler+0x468>
   27b90:	4b3a      	ldr	r3, [pc, #232]	; (27c7c <rpc_ip_event_handler+0x470>)
   27b92:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   27b96:	682b      	ldr	r3, [r5, #0]
   27b98:	0c1b      	lsrs	r3, r3, #16
   27b9a:	041b      	lsls	r3, r3, #16
   27b9c:	f043 0309 	orr.w	r3, r3, #9
   27ba0:	602b      	str	r3, [r5, #0]
   27ba2:	2001      	movs	r0, #1
   27ba4:	e76a      	b.n	27a7c <rpc_ip_event_handler+0x270>
   27ba6:	2f04      	cmp	r7, #4
   27ba8:	d11c      	bne.n	27be4 <rpc_ip_event_handler+0x3d8>
   27baa:	2010      	movs	r0, #16
   27bac:	f7f9 f9a8 	bl	20f00 <nrf_modem_os_alloc>
   27bb0:	4606      	mov	r6, r0
   27bb2:	2800      	cmp	r0, #0
   27bb4:	f43f af55 	beq.w	27a62 <rpc_ip_event_handler+0x256>
   27bb8:	2302      	movs	r3, #2
   27bba:	f04f 0810 	mov.w	r8, #16
   27bbe:	6043      	str	r3, [r0, #4]
   27bc0:	f880 8000 	strb.w	r8, [r0]
   27bc4:	7c62      	ldrb	r2, [r4, #17]
   27bc6:	7c23      	ldrb	r3, [r4, #16]
   27bc8:	f104 0114 	add.w	r1, r4, #20
   27bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27bd0:	8103      	strh	r3, [r0, #8]
   27bd2:	463a      	mov	r2, r7
   27bd4:	300c      	adds	r0, #12
   27bd6:	f00f fdd4 	bl	37782 <memcpy>
   27bda:	4647      	mov	r7, r8
   27bdc:	e734      	b.n	27a48 <rpc_ip_event_handler+0x23c>
   27bde:	2700      	movs	r7, #0
   27be0:	463e      	mov	r6, r7
   27be2:	e731      	b.n	27a48 <rpc_ip_event_handler+0x23c>
   27be4:	6820      	ldr	r0, [r4, #0]
   27be6:	f00e fa38 	bl	3605a <rpc_ip_client_data_free>
   27bea:	e6f7      	b.n	279dc <rpc_ip_event_handler+0x1d0>
   27bec:	682b      	ldr	r3, [r5, #0]
   27bee:	0299      	lsls	r1, r3, #10
   27bf0:	f57f aef4 	bpl.w	279dc <rpc_ip_event_handler+0x1d0>
   27bf4:	6960      	ldr	r0, [r4, #20]
   27bf6:	b938      	cbnz	r0, 27c08 <rpc_ip_event_handler+0x3fc>
   27bf8:	682b      	ldr	r3, [r5, #0]
   27bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   27bfe:	602b      	str	r3, [r5, #0]
   27c00:	4b1e      	ldr	r3, [pc, #120]	; (27c7c <rpc_ip_event_handler+0x470>)
   27c02:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   27c06:	e7cc      	b.n	27ba2 <rpc_ip_event_handler+0x396>
   27c08:	286b      	cmp	r0, #107	; 0x6b
   27c0a:	d10e      	bne.n	27c2a <rpc_ip_event_handler+0x41e>
   27c0c:	692b      	ldr	r3, [r5, #16]
   27c0e:	220c      	movs	r2, #12
   27c10:	2b01      	cmp	r3, #1
   27c12:	d105      	bne.n	27c20 <rpc_ip_event_handler+0x414>
   27c14:	682b      	ldr	r3, [r5, #0]
   27c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   27c1a:	602b      	str	r3, [r5, #0]
   27c1c:	606a      	str	r2, [r5, #4]
   27c1e:	e6dd      	b.n	279dc <rpc_ip_event_handler+0x1d0>
   27c20:	606a      	str	r2, [r5, #4]
   27c22:	682b      	ldr	r3, [r5, #0]
   27c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   27c28:	e796      	b.n	27b58 <rpc_ip_event_handler+0x34c>
   27c2a:	f020 0302 	bic.w	r3, r0, #2
   27c2e:	2b01      	cmp	r3, #1
   27c30:	d102      	bne.n	27c38 <rpc_ip_event_handler+0x42c>
   27c32:	230c      	movs	r3, #12
   27c34:	606b      	str	r3, [r5, #4]
   27c36:	e6d1      	b.n	279dc <rpc_ip_event_handler+0x1d0>
   27c38:	f7fe ffc4 	bl	26bc4 <rpc_error_to_nrf_errno>
   27c3c:	6068      	str	r0, [r5, #4]
   27c3e:	e7f0      	b.n	27c22 <rpc_ip_event_handler+0x416>
   27c40:	682b      	ldr	r3, [r5, #0]
   27c42:	025a      	lsls	r2, r3, #9
   27c44:	f57f aeca 	bpl.w	279dc <rpc_ip_event_handler+0x1d0>
   27c48:	6960      	ldr	r0, [r4, #20]
   27c4a:	b998      	cbnz	r0, 27c74 <rpc_ip_event_handler+0x468>
   27c4c:	682b      	ldr	r3, [r5, #0]
   27c4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   27c52:	e723      	b.n	27a9c <rpc_ip_event_handler+0x290>
   27c54:	682b      	ldr	r3, [r5, #0]
   27c56:	01db      	lsls	r3, r3, #7
   27c58:	f57f aec0 	bpl.w	279dc <rpc_ip_event_handler+0x1d0>
   27c5c:	6960      	ldr	r0, [r4, #20]
   27c5e:	b948      	cbnz	r0, 27c74 <rpc_ip_event_handler+0x468>
   27c60:	6820      	ldr	r0, [r4, #0]
   27c62:	b118      	cbz	r0, 27c6c <rpc_ip_event_handler+0x460>
   27c64:	2001      	movs	r0, #1
   27c66:	4b05      	ldr	r3, [pc, #20]	; (27c7c <rpc_ip_event_handler+0x470>)
   27c68:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   27c6c:	682b      	ldr	r3, [r5, #0]
   27c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   27c72:	e713      	b.n	27a9c <rpc_ip_event_handler+0x290>
   27c74:	f7fe ffa6 	bl	26bc4 <rpc_error_to_nrf_errno>
   27c78:	6068      	str	r0, [r5, #4]
   27c7a:	e6af      	b.n	279dc <rpc_ip_event_handler+0x1d0>
   27c7c:	20016c14 	.word	0x20016c14

00027c80 <secure_socket_dtls_timeout_check>:
   27c80:	281f      	cmp	r0, #31
   27c82:	dc0b      	bgt.n	27c9c <secure_socket_dtls_timeout_check+0x1c>
   27c84:	2800      	cmp	r0, #0
   27c86:	dd10      	ble.n	27caa <secure_socket_dtls_timeout_check+0x2a>
   27c88:	2301      	movs	r3, #1
   27c8a:	fa03 f000 	lsl.w	r0, r3, r0
   27c8e:	4b09      	ldr	r3, [pc, #36]	; (27cb4 <secure_socket_dtls_timeout_check+0x34>)
   27c90:	4003      	ands	r3, r0
   27c92:	2b00      	cmp	r3, #0
   27c94:	bf0c      	ite	eq
   27c96:	2016      	moveq	r0, #22
   27c98:	2000      	movne	r0, #0
   27c9a:	4770      	bx	lr
   27c9c:	283f      	cmp	r0, #63	; 0x3f
   27c9e:	d006      	beq.n	27cae <secure_socket_dtls_timeout_check+0x2e>
   27ca0:	287b      	cmp	r0, #123	; 0x7b
   27ca2:	bf14      	ite	ne
   27ca4:	2016      	movne	r0, #22
   27ca6:	2000      	moveq	r0, #0
   27ca8:	4770      	bx	lr
   27caa:	2016      	movs	r0, #22
   27cac:	4770      	bx	lr
   27cae:	2000      	movs	r0, #0
   27cb0:	4770      	bx	lr
   27cb2:	bf00      	nop
   27cb4:	8000808a 	.word	0x8000808a

00027cb8 <hostname_free>:
   27cb8:	b538      	push	{r3, r4, r5, lr}
   27cba:	4c07      	ldr	r4, [pc, #28]	; (27cd8 <hostname_free+0x20>)
   27cbc:	4605      	mov	r5, r0
   27cbe:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   27cc2:	b138      	cbz	r0, 27cd4 <hostname_free+0x1c>
   27cc4:	f7f9 f924 	bl	20f10 <nrf_modem_os_free>
   27cc8:	2300      	movs	r3, #0
   27cca:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   27cce:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   27cd2:	6063      	str	r3, [r4, #4]
   27cd4:	bd38      	pop	{r3, r4, r5, pc}
   27cd6:	bf00      	nop
   27cd8:	20016c3c 	.word	0x20016c3c

00027cdc <secure_socket_attach_initiate>:
   27cdc:	f04f 33ff 	mov.w	r3, #4294967295
   27ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27ce4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 27d70 <secure_socket_attach_initiate+0x94>
   27ce8:	9301      	str	r3, [sp, #4]
   27cea:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   27cee:	460c      	mov	r4, r1
   27cf0:	4616      	mov	r6, r2
   27cf2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   27cf6:	f247 0281 	movw	r2, #28801	; 0x7081
   27cfa:	6989      	ldr	r1, [r1, #24]
   27cfc:	4607      	mov	r7, r0
   27cfe:	f00e fba4 	bl	3644a <ip_interface_request_create>
   27d02:	4605      	mov	r5, r0
   27d04:	b378      	cbz	r0, 27d66 <secure_socket_attach_initiate+0x8a>
   27d06:	f8d9 2004 	ldr.w	r2, [r9, #4]
   27d0a:	b122      	cbz	r2, 27d16 <secure_socket_attach_initiate+0x3a>
   27d0c:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   27d10:	6800      	ldr	r0, [r0, #0]
   27d12:	f00f fd36 	bl	37782 <memcpy>
   27d16:	2224      	movs	r2, #36	; 0x24
   27d18:	4916      	ldr	r1, [pc, #88]	; (27d74 <secure_socket_attach_initiate+0x98>)
   27d1a:	f105 0014 	add.w	r0, r5, #20
   27d1e:	fb02 1107 	mla	r1, r2, r7, r1
   27d22:	f00f fd2e 	bl	37782 <memcpy>
   27d26:	6821      	ldr	r1, [r4, #0]
   27d28:	68ab      	ldr	r3, [r5, #8]
   27d2a:	0c09      	lsrs	r1, r1, #16
   27d2c:	0409      	lsls	r1, r1, #16
   27d2e:	3324      	adds	r3, #36	; 0x24
   27d30:	f041 010a 	orr.w	r1, r1, #10
   27d34:	60ab      	str	r3, [r5, #8]
   27d36:	f247 0281 	movw	r2, #28801	; 0x7081
   27d3a:	6021      	str	r1, [r4, #0]
   27d3c:	4633      	mov	r3, r6
   27d3e:	4629      	mov	r1, r5
   27d40:	4620      	mov	r0, r4
   27d42:	f00e fb9a 	bl	3647a <ip_interface_request_send>
   27d46:	b958      	cbnz	r0, 27d60 <secure_socket_attach_initiate+0x84>
   27d48:	6823      	ldr	r3, [r4, #0]
   27d4a:	00db      	lsls	r3, r3, #3
   27d4c:	d40d      	bmi.n	27d6a <secure_socket_attach_initiate+0x8e>
   27d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27d52:	210b      	movs	r1, #11
   27d54:	4638      	mov	r0, r7
   27d56:	ab01      	add	r3, sp, #4
   27d58:	f00e fba2 	bl	364a0 <ip_interface_wait>
   27d5c:	b100      	cbz	r0, 27d60 <secure_socket_attach_initiate+0x84>
   27d5e:	6026      	str	r6, [r4, #0]
   27d60:	b003      	add	sp, #12
   27d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27d66:	200c      	movs	r0, #12
   27d68:	e7fa      	b.n	27d60 <secure_socket_attach_initiate+0x84>
   27d6a:	2073      	movs	r0, #115	; 0x73
   27d6c:	e7f8      	b.n	27d60 <secure_socket_attach_initiate+0x84>
   27d6e:	bf00      	nop
   27d70:	20016c3c 	.word	0x20016c3c
   27d74:	2001da7d 	.word	0x2001da7d

00027d78 <tls_interface_init>:
   27d78:	2201      	movs	r2, #1
   27d7a:	4b02      	ldr	r3, [pc, #8]	; (27d84 <tls_interface_init+0xc>)
   27d7c:	2000      	movs	r0, #0
   27d7e:	701a      	strb	r2, [r3, #0]
   27d80:	4770      	bx	lr
   27d82:	bf00      	nop
   27d84:	2001da7c 	.word	0x2001da7c

00027d88 <tls_interface_open>:
   27d88:	b538      	push	{r3, r4, r5, lr}
   27d8a:	4b1e      	ldr	r3, [pc, #120]	; (27e04 <tls_interface_open+0x7c>)
   27d8c:	4615      	mov	r5, r2
   27d8e:	781b      	ldrb	r3, [r3, #0]
   27d90:	b92b      	cbnz	r3, 27d9e <tls_interface_open+0x16>
   27d92:	2070      	movs	r0, #112	; 0x70
   27d94:	f7f8 ff02 	bl	20b9c <nrf_modem_os_errno_set>
   27d98:	f04f 34ff 	mov.w	r4, #4294967295
   27d9c:	e02b      	b.n	27df6 <tls_interface_open+0x6e>
   27d9e:	1e4b      	subs	r3, r1, #1
   27da0:	2b01      	cmp	r3, #1
   27da2:	d809      	bhi.n	27db8 <tls_interface_open+0x30>
   27da4:	b952      	cbnz	r2, 27dbc <tls_interface_open+0x34>
   27da6:	2901      	cmp	r1, #1
   27da8:	bf0b      	itete	eq
   27daa:	2201      	moveq	r2, #1
   27dac:	2202      	movne	r2, #2
   27dae:	f44f 7582 	moveq.w	r5, #260	; 0x104
   27db2:	f44f 7587 	movne.w	r5, #270	; 0x10e
   27db6:	e007      	b.n	27dc8 <tls_interface_open+0x40>
   27db8:	2029      	movs	r0, #41	; 0x29
   27dba:	e7eb      	b.n	27d94 <tls_interface_open+0xc>
   27dbc:	2901      	cmp	r1, #1
   27dbe:	d11c      	bne.n	27dfa <tls_interface_open+0x72>
   27dc0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   27dc4:	d1f8      	bne.n	27db8 <tls_interface_open+0x30>
   27dc6:	460a      	mov	r2, r1
   27dc8:	f7fe ff38 	bl	26c3c <ip_interface_open>
   27dcc:	1e04      	subs	r4, r0, #0
   27dce:	dbe3      	blt.n	27d98 <tls_interface_open+0x10>
   27dd0:	2224      	movs	r2, #36	; 0x24
   27dd2:	480d      	ldr	r0, [pc, #52]	; (27e08 <tls_interface_open+0x80>)
   27dd4:	490d      	ldr	r1, [pc, #52]	; (27e0c <tls_interface_open+0x84>)
   27dd6:	fb02 0004 	mla	r0, r2, r4, r0
   27dda:	f00f fcd2 	bl	37782 <memcpy>
   27dde:	4620      	mov	r0, r4
   27de0:	f7fe fe38 	bl	26a54 <interface_socket_from_handle_get>
   27de4:	6803      	ldr	r3, [r0, #0]
   27de6:	6145      	str	r5, [r0, #20]
   27de8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   27dec:	6003      	str	r3, [r0, #0]
   27dee:	6803      	ldr	r3, [r0, #0]
   27df0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   27df4:	6003      	str	r3, [r0, #0]
   27df6:	4620      	mov	r0, r4
   27df8:	bd38      	pop	{r3, r4, r5, pc}
   27dfa:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   27dfe:	d1db      	bne.n	27db8 <tls_interface_open+0x30>
   27e00:	2202      	movs	r2, #2
   27e02:	e7e1      	b.n	27dc8 <tls_interface_open+0x40>
   27e04:	2001da7c 	.word	0x2001da7c
   27e08:	2001da7d 	.word	0x2001da7d
   27e0c:	000403f8 	.word	0x000403f8

00027e10 <tls_interface_sendto>:
   27e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e14:	b087      	sub	sp, #28
   27e16:	4607      	mov	r7, r0
   27e18:	4698      	mov	r8, r3
   27e1a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   27e1e:	f7fe fe19 	bl	26a54 <interface_socket_from_handle_get>
   27e22:	4606      	mov	r6, r0
   27e24:	2800      	cmp	r0, #0
   27e26:	d068      	beq.n	27efa <tls_interface_sendto+0xea>
   27e28:	2500      	movs	r5, #0
   27e2a:	f04f 0a24 	mov.w	sl, #36	; 0x24
   27e2e:	f018 0f02 	tst.w	r8, #2
   27e32:	bf18      	it	ne
   27e34:	2300      	movne	r3, #0
   27e36:	f04f 3bff 	mov.w	fp, #4294967295
   27e3a:	462c      	mov	r4, r5
   27e3c:	bf08      	it	eq
   27e3e:	6803      	ldreq	r3, [r0, #0]
   27e40:	fb0a fa07 	mul.w	sl, sl, r7
   27e44:	bf04      	itt	eq
   27e46:	f083 5380 	eoreq.w	r3, r3, #268435456	; 0x10000000
   27e4a:	f3c3 7300 	ubfxeq	r3, r3, #28, #1
   27e4e:	9303      	str	r3, [sp, #12]
   27e50:	9b05      	ldr	r3, [sp, #20]
   27e52:	6831      	ldr	r1, [r6, #0]
   27e54:	eba3 0905 	sub.w	r9, r3, r5
   27e58:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
   27e5c:	b289      	uxth	r1, r1
   27e5e:	bfa8      	it	ge
   27e60:	f44f 6900 	movge.w	r9, #2048	; 0x800
   27e64:	290c      	cmp	r1, #12
   27e66:	d110      	bne.n	27e8a <tls_interface_sendto+0x7a>
   27e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
   27e6a:	9904      	ldr	r1, [sp, #16]
   27e6c:	9301      	str	r3, [sp, #4]
   27e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   27e70:	464a      	mov	r2, r9
   27e72:	9300      	str	r3, [sp, #0]
   27e74:	4638      	mov	r0, r7
   27e76:	4643      	mov	r3, r8
   27e78:	4429      	add	r1, r5
   27e7a:	f7fe ffa5 	bl	26dc8 <ip_interface_sendto>
   27e7e:	f1b0 0b00 	subs.w	fp, r0, #0
   27e82:	da30      	bge.n	27ee6 <tls_interface_sendto+0xd6>
   27e84:	f04f 35ff 	mov.w	r5, #4294967295
   27e88:	e033      	b.n	27ef2 <tls_interface_sendto+0xe2>
   27e8a:	6831      	ldr	r1, [r6, #0]
   27e8c:	b289      	uxth	r1, r1
   27e8e:	290b      	cmp	r1, #11
   27e90:	d109      	bne.n	27ea6 <tls_interface_sendto+0x96>
   27e92:	4b23      	ldr	r3, [pc, #140]	; (27f20 <tls_interface_sendto+0x110>)
   27e94:	f813 200a 	ldrb.w	r2, [r3, sl]
   27e98:	2a02      	cmp	r2, #2
   27e9a:	d030      	beq.n	27efe <tls_interface_sendto+0xee>
   27e9c:	6932      	ldr	r2, [r6, #16]
   27e9e:	2a01      	cmp	r2, #1
   27ea0:	d131      	bne.n	27f06 <tls_interface_sendto+0xf6>
   27ea2:	242a      	movs	r4, #42	; 0x2a
   27ea4:	e038      	b.n	27f18 <tls_interface_sendto+0x108>
   27ea6:	4630      	mov	r0, r6
   27ea8:	f00e fd5f 	bl	3696a <attach_trigger_condition_verify>
   27eac:	b348      	cbz	r0, 27f02 <tls_interface_sendto+0xf2>
   27eae:	4b1c      	ldr	r3, [pc, #112]	; (27f20 <tls_interface_sendto+0x110>)
   27eb0:	f813 100a 	ldrb.w	r1, [r3, sl]
   27eb4:	2902      	cmp	r1, #2
   27eb6:	d12a      	bne.n	27f0e <tls_interface_sendto+0xfe>
   27eb8:	4631      	mov	r1, r6
   27eba:	4638      	mov	r0, r7
   27ebc:	f00e fd6c 	bl	36998 <secure_client_socket>
   27ec0:	4604      	mov	r4, r0
   27ec2:	b958      	cbnz	r0, 27edc <tls_interface_sendto+0xcc>
   27ec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   27ec6:	9904      	ldr	r1, [sp, #16]
   27ec8:	9301      	str	r3, [sp, #4]
   27eca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   27ecc:	464a      	mov	r2, r9
   27ece:	9300      	str	r3, [sp, #0]
   27ed0:	4638      	mov	r0, r7
   27ed2:	4643      	mov	r3, r8
   27ed4:	4429      	add	r1, r5
   27ed6:	f7fe ff77 	bl	26dc8 <ip_interface_sendto>
   27eda:	4683      	mov	fp, r0
   27edc:	f1bb 0f00 	cmp.w	fp, #0
   27ee0:	db18      	blt.n	27f14 <tls_interface_sendto+0x104>
   27ee2:	2c00      	cmp	r4, #0
   27ee4:	dc18      	bgt.n	27f18 <tls_interface_sendto+0x108>
   27ee6:	9b03      	ldr	r3, [sp, #12]
   27ee8:	445d      	add	r5, fp
   27eea:	b113      	cbz	r3, 27ef2 <tls_interface_sendto+0xe2>
   27eec:	9b05      	ldr	r3, [sp, #20]
   27eee:	42ab      	cmp	r3, r5
   27ef0:	dcae      	bgt.n	27e50 <tls_interface_sendto+0x40>
   27ef2:	4628      	mov	r0, r5
   27ef4:	b007      	add	sp, #28
   27ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27efa:	2409      	movs	r4, #9
   27efc:	e00c      	b.n	27f18 <tls_interface_sendto+0x108>
   27efe:	2423      	movs	r4, #35	; 0x23
   27f00:	e00a      	b.n	27f18 <tls_interface_sendto+0x108>
   27f02:	2439      	movs	r4, #57	; 0x39
   27f04:	e008      	b.n	27f18 <tls_interface_sendto+0x108>
   27f06:	f1bb 3fff 	cmp.w	fp, #4294967295
   27f0a:	d1ec      	bne.n	27ee6 <tls_interface_sendto+0xd6>
   27f0c:	e7ba      	b.n	27e84 <tls_interface_sendto+0x74>
   27f0e:	f1bb 0f00 	cmp.w	fp, #0
   27f12:	dae8      	bge.n	27ee6 <tls_interface_sendto+0xd6>
   27f14:	2c00      	cmp	r4, #0
   27f16:	ddb5      	ble.n	27e84 <tls_interface_sendto+0x74>
   27f18:	4620      	mov	r0, r4
   27f1a:	f7f8 fe3f 	bl	20b9c <nrf_modem_os_errno_set>
   27f1e:	e7b1      	b.n	27e84 <tls_interface_sendto+0x74>
   27f20:	2001da7d 	.word	0x2001da7d

00027f24 <tls_interface_recvfrom>:
   27f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27f28:	460d      	mov	r5, r1
   27f2a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   27f2e:	4604      	mov	r4, r0
   27f30:	4616      	mov	r6, r2
   27f32:	461f      	mov	r7, r3
   27f34:	f7fe fd8e 	bl	26a54 <interface_socket_from_handle_get>
   27f38:	4601      	mov	r1, r0
   27f3a:	b320      	cbz	r0, 27f86 <tls_interface_recvfrom+0x62>
   27f3c:	6803      	ldr	r3, [r0, #0]
   27f3e:	b29b      	uxth	r3, r3
   27f40:	2b0c      	cmp	r3, #12
   27f42:	d003      	beq.n	27f4c <tls_interface_recvfrom+0x28>
   27f44:	6803      	ldr	r3, [r0, #0]
   27f46:	b29b      	uxth	r3, r3
   27f48:	2b0d      	cmp	r3, #13
   27f4a:	d109      	bne.n	27f60 <tls_interface_recvfrom+0x3c>
   27f4c:	463b      	mov	r3, r7
   27f4e:	4632      	mov	r2, r6
   27f50:	4629      	mov	r1, r5
   27f52:	4620      	mov	r0, r4
   27f54:	e9cd 8908 	strd	r8, r9, [sp, #32]
   27f58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27f5c:	f00e bab0 	b.w	364c0 <ip_interface_recvfrom>
   27f60:	f00e fd03 	bl	3696a <attach_trigger_condition_verify>
   27f64:	b198      	cbz	r0, 27f8e <tls_interface_recvfrom+0x6a>
   27f66:	2324      	movs	r3, #36	; 0x24
   27f68:	4363      	muls	r3, r4
   27f6a:	4a0a      	ldr	r2, [pc, #40]	; (27f94 <tls_interface_recvfrom+0x70>)
   27f6c:	5cd3      	ldrb	r3, [r2, r3]
   27f6e:	2b02      	cmp	r3, #2
   27f70:	d10d      	bne.n	27f8e <tls_interface_recvfrom+0x6a>
   27f72:	4620      	mov	r0, r4
   27f74:	f00e fd10 	bl	36998 <secure_client_socket>
   27f78:	2800      	cmp	r0, #0
   27f7a:	d0e7      	beq.n	27f4c <tls_interface_recvfrom+0x28>
   27f7c:	dc04      	bgt.n	27f88 <tls_interface_recvfrom+0x64>
   27f7e:	f04f 30ff 	mov.w	r0, #4294967295
   27f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27f86:	2009      	movs	r0, #9
   27f88:	f7f8 fe08 	bl	20b9c <nrf_modem_os_errno_set>
   27f8c:	e7f7      	b.n	27f7e <tls_interface_recvfrom+0x5a>
   27f8e:	2023      	movs	r0, #35	; 0x23
   27f90:	e7fa      	b.n	27f88 <tls_interface_recvfrom+0x64>
   27f92:	bf00      	nop
   27f94:	2001da7d 	.word	0x2001da7d

00027f98 <tls_interface_bind>:
   27f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f9a:	4604      	mov	r4, r0
   27f9c:	460e      	mov	r6, r1
   27f9e:	4617      	mov	r7, r2
   27fa0:	f7fe fd58 	bl	26a54 <interface_socket_from_handle_get>
   27fa4:	4605      	mov	r5, r0
   27fa6:	b1d8      	cbz	r0, 27fe0 <tls_interface_bind+0x48>
   27fa8:	6803      	ldr	r3, [r0, #0]
   27faa:	b29b      	uxth	r3, r3
   27fac:	2b02      	cmp	r3, #2
   27fae:	d119      	bne.n	27fe4 <tls_interface_bind+0x4c>
   27fb0:	463a      	mov	r2, r7
   27fb2:	4631      	mov	r1, r6
   27fb4:	4620      	mov	r0, r4
   27fb6:	f7ff f8a7 	bl	27108 <ip_interface_bind>
   27fba:	b950      	cbnz	r0, 27fd2 <tls_interface_bind+0x3a>
   27fbc:	2324      	movs	r3, #36	; 0x24
   27fbe:	4363      	muls	r3, r4
   27fc0:	4a09      	ldr	r2, [pc, #36]	; (27fe8 <tls_interface_bind+0x50>)
   27fc2:	5cd3      	ldrb	r3, [r2, r3]
   27fc4:	2b01      	cmp	r3, #1
   27fc6:	d10a      	bne.n	27fde <tls_interface_bind+0x46>
   27fc8:	2204      	movs	r2, #4
   27fca:	4629      	mov	r1, r5
   27fcc:	4620      	mov	r0, r4
   27fce:	f7ff fe85 	bl	27cdc <secure_socket_attach_initiate>
   27fd2:	2800      	cmp	r0, #0
   27fd4:	dd03      	ble.n	27fde <tls_interface_bind+0x46>
   27fd6:	f7f8 fde1 	bl	20b9c <nrf_modem_os_errno_set>
   27fda:	f04f 30ff 	mov.w	r0, #4294967295
   27fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27fe0:	2009      	movs	r0, #9
   27fe2:	e7f8      	b.n	27fd6 <tls_interface_bind+0x3e>
   27fe4:	202d      	movs	r0, #45	; 0x2d
   27fe6:	e7f6      	b.n	27fd6 <tls_interface_bind+0x3e>
   27fe8:	2001da7d 	.word	0x2001da7d

00027fec <tls_interface_connect>:
   27fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27fee:	4605      	mov	r5, r0
   27ff0:	460e      	mov	r6, r1
   27ff2:	4617      	mov	r7, r2
   27ff4:	f7fe fd2e 	bl	26a54 <interface_socket_from_handle_get>
   27ff8:	4604      	mov	r4, r0
   27ffa:	b1f0      	cbz	r0, 2803a <tls_interface_connect+0x4e>
   27ffc:	2324      	movs	r3, #36	; 0x24
   27ffe:	436b      	muls	r3, r5
   28000:	4a10      	ldr	r2, [pc, #64]	; (28044 <tls_interface_connect+0x58>)
   28002:	5cd3      	ldrb	r3, [r2, r3]
   28004:	2b02      	cmp	r3, #2
   28006:	d11a      	bne.n	2803e <tls_interface_connect+0x52>
   28008:	6803      	ldr	r3, [r0, #0]
   2800a:	b29b      	uxth	r3, r3
   2800c:	2b02      	cmp	r3, #2
   2800e:	d003      	beq.n	28018 <tls_interface_connect+0x2c>
   28010:	6803      	ldr	r3, [r0, #0]
   28012:	b29b      	uxth	r3, r3
   28014:	2b04      	cmp	r3, #4
   28016:	d112      	bne.n	2803e <tls_interface_connect+0x52>
   28018:	463a      	mov	r2, r7
   2801a:	4631      	mov	r1, r6
   2801c:	4628      	mov	r0, r5
   2801e:	f00e fb4c 	bl	366ba <ip_interface_connect>
   28022:	b918      	cbnz	r0, 2802c <tls_interface_connect+0x40>
   28024:	4621      	mov	r1, r4
   28026:	4628      	mov	r0, r5
   28028:	f00e fcb6 	bl	36998 <secure_client_socket>
   2802c:	2800      	cmp	r0, #0
   2802e:	dd03      	ble.n	28038 <tls_interface_connect+0x4c>
   28030:	f7f8 fdb4 	bl	20b9c <nrf_modem_os_errno_set>
   28034:	f04f 30ff 	mov.w	r0, #4294967295
   28038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2803a:	2009      	movs	r0, #9
   2803c:	e7f8      	b.n	28030 <tls_interface_connect+0x44>
   2803e:	202d      	movs	r0, #45	; 0x2d
   28040:	e7f6      	b.n	28030 <tls_interface_connect+0x44>
   28042:	bf00      	nop
   28044:	2001da7d 	.word	0x2001da7d

00028048 <tls_interface_listen>:
   28048:	b538      	push	{r3, r4, r5, lr}
   2804a:	460d      	mov	r5, r1
   2804c:	4604      	mov	r4, r0
   2804e:	f7fe fd01 	bl	26a54 <interface_socket_from_handle_get>
   28052:	4601      	mov	r1, r0
   28054:	2800      	cmp	r0, #0
   28056:	d033      	beq.n	280c0 <tls_interface_listen+0x78>
   28058:	6803      	ldr	r3, [r0, #0]
   2805a:	00db      	lsls	r3, r3, #3
   2805c:	d432      	bmi.n	280c4 <tls_interface_listen+0x7c>
   2805e:	6903      	ldr	r3, [r0, #16]
   28060:	2b01      	cmp	r3, #1
   28062:	d12f      	bne.n	280c4 <tls_interface_listen+0x7c>
   28064:	6803      	ldr	r3, [r0, #0]
   28066:	b29b      	uxth	r3, r3
   28068:	2b04      	cmp	r3, #4
   2806a:	d105      	bne.n	28078 <tls_interface_listen+0x30>
   2806c:	2324      	movs	r3, #36	; 0x24
   2806e:	4363      	muls	r3, r4
   28070:	4a15      	ldr	r2, [pc, #84]	; (280c8 <tls_interface_listen+0x80>)
   28072:	5cd3      	ldrb	r3, [r2, r3]
   28074:	2b02      	cmp	r3, #2
   28076:	d009      	beq.n	2808c <tls_interface_listen+0x44>
   28078:	680b      	ldr	r3, [r1, #0]
   2807a:	b29b      	uxth	r3, r3
   2807c:	2b0b      	cmp	r3, #11
   2807e:	d121      	bne.n	280c4 <tls_interface_listen+0x7c>
   28080:	2324      	movs	r3, #36	; 0x24
   28082:	4363      	muls	r3, r4
   28084:	4a10      	ldr	r2, [pc, #64]	; (280c8 <tls_interface_listen+0x80>)
   28086:	5cd3      	ldrb	r3, [r2, r3]
   28088:	2b01      	cmp	r3, #1
   2808a:	d11b      	bne.n	280c4 <tls_interface_listen+0x7c>
   2808c:	2324      	movs	r3, #36	; 0x24
   2808e:	2001      	movs	r0, #1
   28090:	4363      	muls	r3, r4
   28092:	4a0d      	ldr	r2, [pc, #52]	; (280c8 <tls_interface_listen+0x80>)
   28094:	54d0      	strb	r0, [r2, r3]
   28096:	680b      	ldr	r3, [r1, #0]
   28098:	2b0b      	cmp	r3, #11
   2809a:	d10a      	bne.n	280b2 <tls_interface_listen+0x6a>
   2809c:	4629      	mov	r1, r5
   2809e:	4620      	mov	r0, r4
   280a0:	f7ff f894 	bl	271cc <ip_interface_listen>
   280a4:	2800      	cmp	r0, #0
   280a6:	dd03      	ble.n	280b0 <tls_interface_listen+0x68>
   280a8:	f7f8 fd78 	bl	20b9c <nrf_modem_os_errno_set>
   280ac:	f04f 30ff 	mov.w	r0, #4294967295
   280b0:	bd38      	pop	{r3, r4, r5, pc}
   280b2:	4620      	mov	r0, r4
   280b4:	680a      	ldr	r2, [r1, #0]
   280b6:	f7ff fe11 	bl	27cdc <secure_socket_attach_initiate>
   280ba:	2800      	cmp	r0, #0
   280bc:	d0ee      	beq.n	2809c <tls_interface_listen+0x54>
   280be:	e7f1      	b.n	280a4 <tls_interface_listen+0x5c>
   280c0:	2009      	movs	r0, #9
   280c2:	e7f1      	b.n	280a8 <tls_interface_listen+0x60>
   280c4:	202d      	movs	r0, #45	; 0x2d
   280c6:	e7ef      	b.n	280a8 <tls_interface_listen+0x60>
   280c8:	2001da7d 	.word	0x2001da7d

000280cc <tls_interface_accept>:
   280cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   280d0:	4606      	mov	r6, r0
   280d2:	460d      	mov	r5, r1
   280d4:	4617      	mov	r7, r2
   280d6:	4698      	mov	r8, r3
   280d8:	f04f 34ff 	mov.w	r4, #4294967295
   280dc:	f7fe fcba 	bl	26a54 <interface_socket_from_handle_get>
   280e0:	9401      	str	r4, [sp, #4]
   280e2:	2800      	cmp	r0, #0
   280e4:	d047      	beq.n	28176 <tls_interface_accept+0xaa>
   280e6:	6803      	ldr	r3, [r0, #0]
   280e8:	b29b      	uxth	r3, r3
   280ea:	2b07      	cmp	r3, #7
   280ec:	d143      	bne.n	28176 <tls_interface_accept+0xaa>
   280ee:	6803      	ldr	r3, [r0, #0]
   280f0:	00db      	lsls	r3, r3, #3
   280f2:	d506      	bpl.n	28102 <tls_interface_accept+0x36>
   280f4:	202d      	movs	r0, #45	; 0x2d
   280f6:	f7f8 fd51 	bl	20b9c <nrf_modem_os_errno_set>
   280fa:	4620      	mov	r0, r4
   280fc:	b002      	add	sp, #8
   280fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28102:	4643      	mov	r3, r8
   28104:	463a      	mov	r2, r7
   28106:	4629      	mov	r1, r5
   28108:	4630      	mov	r0, r6
   2810a:	f7ff f8b3 	bl	27274 <ip_interface_accept>
   2810e:	1e04      	subs	r4, r0, #0
   28110:	db2b      	blt.n	2816a <tls_interface_accept+0x9e>
   28112:	f7fe fc9f 	bl	26a54 <interface_socket_from_handle_get>
   28116:	2224      	movs	r2, #36	; 0x24
   28118:	6803      	ldr	r3, [r0, #0]
   2811a:	fb02 f804 	mul.w	r8, r2, r4
   2811e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   28122:	6003      	str	r3, [r0, #0]
   28124:	6803      	ldr	r3, [r0, #0]
   28126:	4f15      	ldr	r7, [pc, #84]	; (2817c <tls_interface_accept+0xb0>)
   28128:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2812c:	4605      	mov	r5, r0
   2812e:	fb02 7106 	mla	r1, r2, r6, r7
   28132:	6003      	str	r3, [r0, #0]
   28134:	eb07 0008 	add.w	r0, r7, r8
   28138:	f00f fb23 	bl	37782 <memcpy>
   2813c:	2302      	movs	r3, #2
   2813e:	f807 3008 	strb.w	r3, [r7, r8]
   28142:	682b      	ldr	r3, [r5, #0]
   28144:	f64f 72ff 	movw	r2, #65535	; 0xffff
   28148:	0c1b      	lsrs	r3, r3, #16
   2814a:	041b      	lsls	r3, r3, #16
   2814c:	f043 030b 	orr.w	r3, r3, #11
   28150:	602b      	str	r3, [r5, #0]
   28152:	210c      	movs	r1, #12
   28154:	4620      	mov	r0, r4
   28156:	ab01      	add	r3, sp, #4
   28158:	f00e f9a2 	bl	364a0 <ip_interface_wait>
   2815c:	4605      	mov	r5, r0
   2815e:	2800      	cmp	r0, #0
   28160:	d0cb      	beq.n	280fa <tls_interface_accept+0x2e>
   28162:	4620      	mov	r0, r4
   28164:	f7fe fde6 	bl	26d34 <ip_interface_close>
   28168:	462c      	mov	r4, r5
   2816a:	4620      	mov	r0, r4
   2816c:	f7f8 fd16 	bl	20b9c <nrf_modem_os_errno_set>
   28170:	f04f 34ff 	mov.w	r4, #4294967295
   28174:	e7c1      	b.n	280fa <tls_interface_accept+0x2e>
   28176:	2409      	movs	r4, #9
   28178:	e7f7      	b.n	2816a <tls_interface_accept+0x9e>
   2817a:	bf00      	nop
   2817c:	2001da7d 	.word	0x2001da7d

00028180 <tls_interface_setopt>:
   28180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28182:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   28186:	4606      	mov	r6, r0
   28188:	4615      	mov	r5, r2
   2818a:	461f      	mov	r7, r3
   2818c:	9c08      	ldr	r4, [sp, #32]
   2818e:	d004      	beq.n	2819a <tls_interface_setopt+0x1a>
   28190:	b003      	add	sp, #12
   28192:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   28196:	f7ff b955 	b.w	27444 <ip_interface_setopt>
   2819a:	b92b      	cbnz	r3, 281a8 <tls_interface_setopt+0x28>
   2819c:	200e      	movs	r0, #14
   2819e:	f7f8 fcfd 	bl	20b9c <nrf_modem_os_errno_set>
   281a2:	f04f 30ff 	mov.w	r0, #4294967295
   281a6:	e024      	b.n	281f2 <tls_interface_setopt+0x72>
   281a8:	f7fe fc54 	bl	26a54 <interface_socket_from_handle_get>
   281ac:	4601      	mov	r1, r0
   281ae:	2800      	cmp	r0, #0
   281b0:	f000 8082 	beq.w	282b8 <tls_interface_setopt+0x138>
   281b4:	6803      	ldr	r3, [r0, #0]
   281b6:	b29b      	uxth	r3, r3
   281b8:	2b02      	cmp	r3, #2
   281ba:	d007      	beq.n	281cc <tls_interface_setopt+0x4c>
   281bc:	6803      	ldr	r3, [r0, #0]
   281be:	b29b      	uxth	r3, r3
   281c0:	2b04      	cmp	r3, #4
   281c2:	d003      	beq.n	281cc <tls_interface_setopt+0x4c>
   281c4:	6803      	ldr	r3, [r0, #0]
   281c6:	b29b      	uxth	r3, r3
   281c8:	2b05      	cmp	r3, #5
   281ca:	d175      	bne.n	282b8 <tls_interface_setopt+0x138>
   281cc:	1e6a      	subs	r2, r5, #1
   281ce:	2a08      	cmp	r2, #8
   281d0:	d874      	bhi.n	282bc <tls_interface_setopt+0x13c>
   281d2:	e8df f002 	tbb	[pc, r2]
   281d6:	2405      	.short	0x2405
   281d8:	53413618 	.word	0x53413618
   281dc:	5f73      	.short	0x5f73
   281de:	6c          	.byte	0x6c
   281df:	00          	.byte	0x00
   281e0:	2c04      	cmp	r4, #4
   281e2:	d16f      	bne.n	282c4 <tls_interface_setopt+0x144>
   281e4:	6838      	ldr	r0, [r7, #0]
   281e6:	b930      	cbnz	r0, 281f6 <tls_interface_setopt+0x76>
   281e8:	2324      	movs	r3, #36	; 0x24
   281ea:	2202      	movs	r2, #2
   281ec:	435e      	muls	r6, r3
   281ee:	4b36      	ldr	r3, [pc, #216]	; (282c8 <tls_interface_setopt+0x148>)
   281f0:	559a      	strb	r2, [r3, r6]
   281f2:	b003      	add	sp, #12
   281f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   281f6:	2801      	cmp	r0, #1
   281f8:	d164      	bne.n	282c4 <tls_interface_setopt+0x144>
   281fa:	2324      	movs	r3, #36	; 0x24
   281fc:	435e      	muls	r6, r3
   281fe:	4b32      	ldr	r3, [pc, #200]	; (282c8 <tls_interface_setopt+0x148>)
   28200:	5598      	strb	r0, [r3, r6]
   28202:	2000      	movs	r0, #0
   28204:	e7f5      	b.n	281f2 <tls_interface_setopt+0x72>
   28206:	2c01      	cmp	r4, #1
   28208:	d15c      	bne.n	282c4 <tls_interface_setopt+0x144>
   2820a:	2224      	movs	r2, #36	; 0x24
   2820c:	783b      	ldrb	r3, [r7, #0]
   2820e:	482e      	ldr	r0, [pc, #184]	; (282c8 <tls_interface_setopt+0x148>)
   28210:	3b00      	subs	r3, #0
   28212:	bf18      	it	ne
   28214:	2301      	movne	r3, #1
   28216:	fb02 0606 	mla	r6, r2, r6, r0
   2821a:	7073      	strb	r3, [r6, #1]
   2821c:	e7f1      	b.n	28202 <tls_interface_setopt+0x82>
   2821e:	2c03      	cmp	r4, #3
   28220:	d950      	bls.n	282c4 <tls_interface_setopt+0x144>
   28222:	f014 0503 	ands.w	r5, r4, #3
   28226:	d14d      	bne.n	282c4 <tls_interface_setopt+0x144>
   28228:	2324      	movs	r3, #36	; 0x24
   2822a:	435e      	muls	r6, r3
   2822c:	4826      	ldr	r0, [pc, #152]	; (282c8 <tls_interface_setopt+0x148>)
   2822e:	08a2      	lsrs	r2, r4, #2
   28230:	1983      	adds	r3, r0, r6
   28232:	70da      	strb	r2, [r3, #3]
   28234:	4639      	mov	r1, r7
   28236:	4622      	mov	r2, r4
   28238:	3604      	adds	r6, #4
   2823a:	4430      	add	r0, r6
   2823c:	f00f faa1 	bl	37782 <memcpy>
   28240:	e7df      	b.n	28202 <tls_interface_setopt+0x82>
   28242:	2c04      	cmp	r4, #4
   28244:	d13e      	bne.n	282c4 <tls_interface_setopt+0x144>
   28246:	683b      	ldr	r3, [r7, #0]
   28248:	2b02      	cmp	r3, #2
   2824a:	d83b      	bhi.n	282c4 <tls_interface_setopt+0x144>
   2824c:	2224      	movs	r2, #36	; 0x24
   2824e:	481e      	ldr	r0, [pc, #120]	; (282c8 <tls_interface_setopt+0x148>)
   28250:	fb02 0606 	mla	r6, r2, r6, r0
   28254:	70b3      	strb	r3, [r6, #2]
   28256:	e7d4      	b.n	28202 <tls_interface_setopt+0x82>
   28258:	4630      	mov	r0, r6
   2825a:	f7ff fd2d 	bl	27cb8 <hostname_free>
   2825e:	2c00      	cmp	r4, #0
   28260:	d0cf      	beq.n	28202 <tls_interface_setopt+0x82>
   28262:	4620      	mov	r0, r4
   28264:	f7f8 fe4c 	bl	20f00 <nrf_modem_os_alloc>
   28268:	4b18      	ldr	r3, [pc, #96]	; (282cc <tls_interface_setopt+0x14c>)
   2826a:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   2826e:	b338      	cbz	r0, 282c0 <tls_interface_setopt+0x140>
   28270:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   28274:	4622      	mov	r2, r4
   28276:	4639      	mov	r1, r7
   28278:	605c      	str	r4, [r3, #4]
   2827a:	e7df      	b.n	2823c <tls_interface_setopt+0xbc>
   2827c:	f247 0301 	movw	r3, #28673	; 0x7001
   28280:	e9cd 7400 	strd	r7, r4, [sp]
   28284:	f44f 7280 	mov.w	r2, #256	; 0x100
   28288:	4630      	mov	r0, r6
   2828a:	f00e faab 	bl	367e4 <ip_interface_socketoption_send>
   2828e:	2800      	cmp	r0, #0
   28290:	d0b7      	beq.n	28202 <tls_interface_setopt+0x82>
   28292:	e784      	b.n	2819e <tls_interface_setopt+0x1e>
   28294:	2c04      	cmp	r4, #4
   28296:	d115      	bne.n	282c4 <tls_interface_setopt+0x144>
   28298:	6838      	ldr	r0, [r7, #0]
   2829a:	f7ff fcf1 	bl	27c80 <secure_socket_dtls_timeout_check>
   2829e:	2800      	cmp	r0, #0
   282a0:	f47f af7d 	bne.w	2819e <tls_interface_setopt+0x1e>
   282a4:	f247 0302 	movw	r3, #28674	; 0x7002
   282a8:	e9cd 7400 	strd	r7, r4, [sp]
   282ac:	e7ea      	b.n	28284 <tls_interface_setopt+0x104>
   282ae:	f247 0303 	movw	r3, #28675	; 0x7003
   282b2:	e9cd 7400 	strd	r7, r4, [sp]
   282b6:	e7e5      	b.n	28284 <tls_interface_setopt+0x104>
   282b8:	2009      	movs	r0, #9
   282ba:	e770      	b.n	2819e <tls_interface_setopt+0x1e>
   282bc:	202a      	movs	r0, #42	; 0x2a
   282be:	e76e      	b.n	2819e <tls_interface_setopt+0x1e>
   282c0:	200c      	movs	r0, #12
   282c2:	e76c      	b.n	2819e <tls_interface_setopt+0x1e>
   282c4:	2016      	movs	r0, #22
   282c6:	e76a      	b.n	2819e <tls_interface_setopt+0x1e>
   282c8:	2001da7d 	.word	0x2001da7d
   282cc:	20016c3c 	.word	0x20016c3c

000282d0 <tls_interface_getopt>:
   282d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   282d2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   282d6:	4606      	mov	r6, r0
   282d8:	4617      	mov	r7, r2
   282da:	461d      	mov	r5, r3
   282dc:	9c08      	ldr	r4, [sp, #32]
   282de:	d004      	beq.n	282ea <tls_interface_getopt+0x1a>
   282e0:	b003      	add	sp, #12
   282e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   282e6:	f00e bae5 	b.w	368b4 <ip_interface_getopt>
   282ea:	2b00      	cmp	r3, #0
   282ec:	d062      	beq.n	283b4 <tls_interface_getopt+0xe4>
   282ee:	2c00      	cmp	r4, #0
   282f0:	d060      	beq.n	283b4 <tls_interface_getopt+0xe4>
   282f2:	f7fe fbaf 	bl	26a54 <interface_socket_from_handle_get>
   282f6:	4601      	mov	r1, r0
   282f8:	2800      	cmp	r0, #0
   282fa:	d05d      	beq.n	283b8 <tls_interface_getopt+0xe8>
   282fc:	1e7a      	subs	r2, r7, #1
   282fe:	2a07      	cmp	r2, #7
   28300:	d85c      	bhi.n	283bc <tls_interface_getopt+0xec>
   28302:	e8df f002 	tbb	[pc, r2]
   28306:	1c04      	.short	0x1c04
   28308:	405b3710 	.word	0x405b3710
   2830c:	4a5b      	.short	0x4a5b
   2830e:	6823      	ldr	r3, [r4, #0]
   28310:	2b04      	cmp	r3, #4
   28312:	d155      	bne.n	283c0 <tls_interface_getopt+0xf0>
   28314:	2124      	movs	r1, #36	; 0x24
   28316:	434e      	muls	r6, r1
   28318:	4b2a      	ldr	r3, [pc, #168]	; (283c4 <tls_interface_getopt+0xf4>)
   2831a:	5d9b      	ldrb	r3, [r3, r6]
   2831c:	1e59      	subs	r1, r3, #1
   2831e:	424b      	negs	r3, r1
   28320:	414b      	adcs	r3, r1
   28322:	602b      	str	r3, [r5, #0]
   28324:	e008      	b.n	28338 <tls_interface_getopt+0x68>
   28326:	6823      	ldr	r3, [r4, #0]
   28328:	2b01      	cmp	r3, #1
   2832a:	d149      	bne.n	283c0 <tls_interface_getopt+0xf0>
   2832c:	2024      	movs	r0, #36	; 0x24
   2832e:	4925      	ldr	r1, [pc, #148]	; (283c4 <tls_interface_getopt+0xf4>)
   28330:	fb00 1606 	mla	r6, r0, r6, r1
   28334:	7873      	ldrb	r3, [r6, #1]
   28336:	702b      	strb	r3, [r5, #0]
   28338:	2000      	movs	r0, #0
   2833a:	b003      	add	sp, #12
   2833c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2833e:	2224      	movs	r2, #36	; 0x24
   28340:	4920      	ldr	r1, [pc, #128]	; (283c4 <tls_interface_getopt+0xf4>)
   28342:	6823      	ldr	r3, [r4, #0]
   28344:	fb02 1206 	mla	r2, r2, r6, r1
   28348:	78d0      	ldrb	r0, [r2, #3]
   2834a:	079a      	lsls	r2, r3, #30
   2834c:	bf14      	ite	ne
   2834e:	2300      	movne	r3, #0
   28350:	089b      	lsreq	r3, r3, #2
   28352:	4283      	cmp	r3, r0
   28354:	bf28      	it	cs
   28356:	4603      	movcs	r3, r0
   28358:	009a      	lsls	r2, r3, #2
   2835a:	b143      	cbz	r3, 2836e <tls_interface_getopt+0x9e>
   2835c:	2024      	movs	r0, #36	; 0x24
   2835e:	fb00 1106 	mla	r1, r0, r6, r1
   28362:	6022      	str	r2, [r4, #0]
   28364:	4628      	mov	r0, r5
   28366:	3104      	adds	r1, #4
   28368:	f00f fa0b 	bl	37782 <memcpy>
   2836c:	e7e4      	b.n	28338 <tls_interface_getopt+0x68>
   2836e:	bb38      	cbnz	r0, 283c0 <tls_interface_getopt+0xf0>
   28370:	6020      	str	r0, [r4, #0]
   28372:	e7e2      	b.n	2833a <tls_interface_getopt+0x6a>
   28374:	6823      	ldr	r3, [r4, #0]
   28376:	2b04      	cmp	r3, #4
   28378:	d122      	bne.n	283c0 <tls_interface_getopt+0xf0>
   2837a:	2024      	movs	r0, #36	; 0x24
   2837c:	4911      	ldr	r1, [pc, #68]	; (283c4 <tls_interface_getopt+0xf4>)
   2837e:	fb00 1606 	mla	r6, r0, r6, r1
   28382:	78b3      	ldrb	r3, [r6, #2]
   28384:	e7cd      	b.n	28322 <tls_interface_getopt+0x52>
   28386:	f247 0301 	movw	r3, #28673	; 0x7001
   2838a:	e9cd 5400 	strd	r5, r4, [sp]
   2838e:	f44f 7280 	mov.w	r2, #256	; 0x100
   28392:	4630      	mov	r0, r6
   28394:	f7fe fe38 	bl	27008 <ip_interface_socketoption_get>
   28398:	e7cf      	b.n	2833a <tls_interface_getopt+0x6a>
   2839a:	6823      	ldr	r3, [r4, #0]
   2839c:	2b04      	cmp	r3, #4
   2839e:	d10f      	bne.n	283c0 <tls_interface_getopt+0xf0>
   283a0:	6828      	ldr	r0, [r5, #0]
   283a2:	f7ff fc6d 	bl	27c80 <secure_socket_dtls_timeout_check>
   283a6:	2800      	cmp	r0, #0
   283a8:	d1c7      	bne.n	2833a <tls_interface_getopt+0x6a>
   283aa:	f247 0302 	movw	r3, #28674	; 0x7002
   283ae:	e9cd 5400 	strd	r5, r4, [sp]
   283b2:	e7ec      	b.n	2838e <tls_interface_getopt+0xbe>
   283b4:	200e      	movs	r0, #14
   283b6:	e7c0      	b.n	2833a <tls_interface_getopt+0x6a>
   283b8:	2009      	movs	r0, #9
   283ba:	e7be      	b.n	2833a <tls_interface_getopt+0x6a>
   283bc:	202a      	movs	r0, #42	; 0x2a
   283be:	e7bc      	b.n	2833a <tls_interface_getopt+0x6a>
   283c0:	2016      	movs	r0, #22
   283c2:	e7ba      	b.n	2833a <tls_interface_getopt+0x6a>
   283c4:	2001da7d 	.word	0x2001da7d

000283c8 <tls_rpc_ip_event_handler>:
   283c8:	b570      	push	{r4, r5, r6, lr}
   283ca:	460c      	mov	r4, r1
   283cc:	f248 0181 	movw	r1, #32897	; 0x8081
   283d0:	428b      	cmp	r3, r1
   283d2:	4606      	mov	r6, r0
   283d4:	d035      	beq.n	28442 <tls_rpc_ip_event_handler+0x7a>
   283d6:	f249 0182 	movw	r1, #36994	; 0x9082
   283da:	428b      	cmp	r3, r1
   283dc:	d040      	beq.n	28460 <tls_rpc_ip_event_handler+0x98>
   283de:	f248 0102 	movw	r1, #32770	; 0x8002
   283e2:	428b      	cmp	r3, r1
   283e4:	d161      	bne.n	284aa <tls_rpc_ip_event_handler+0xe2>
   283e6:	2c00      	cmp	r4, #0
   283e8:	d05f      	beq.n	284aa <tls_rpc_ip_event_handler+0xe2>
   283ea:	6963      	ldr	r3, [r4, #20]
   283ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   283f0:	d002      	beq.n	283f8 <tls_rpc_ip_event_handler+0x30>
   283f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   283f6:	d158      	bne.n	284aa <tls_rpc_ip_event_handler+0xe2>
   283f8:	6823      	ldr	r3, [r4, #0]
   283fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   283fe:	6023      	str	r3, [r4, #0]
   28400:	6955      	ldr	r5, [r2, #20]
   28402:	2d00      	cmp	r5, #0
   28404:	d14d      	bne.n	284a2 <tls_rpc_ip_event_handler+0xda>
   28406:	6823      	ldr	r3, [r4, #0]
   28408:	0c1b      	lsrs	r3, r3, #16
   2840a:	041b      	lsls	r3, r3, #16
   2840c:	f043 0305 	orr.w	r3, r3, #5
   28410:	6023      	str	r3, [r4, #0]
   28412:	6823      	ldr	r3, [r4, #0]
   28414:	00db      	lsls	r3, r3, #3
   28416:	d401      	bmi.n	2841c <tls_rpc_ip_event_handler+0x54>
   28418:	2000      	movs	r0, #0
   2841a:	e020      	b.n	2845e <tls_rpc_ip_event_handler+0x96>
   2841c:	2324      	movs	r3, #36	; 0x24
   2841e:	4373      	muls	r3, r6
   28420:	4a23      	ldr	r2, [pc, #140]	; (284b0 <tls_rpc_ip_event_handler+0xe8>)
   28422:	5cd3      	ldrb	r3, [r2, r3]
   28424:	2b02      	cmp	r3, #2
   28426:	d1f7      	bne.n	28418 <tls_rpc_ip_event_handler+0x50>
   28428:	4621      	mov	r1, r4
   2842a:	4630      	mov	r0, r6
   2842c:	f00e fab4 	bl	36998 <secure_client_socket>
   28430:	2800      	cmp	r0, #0
   28432:	d0f1      	beq.n	28418 <tls_rpc_ip_event_handler+0x50>
   28434:	2873      	cmp	r0, #115	; 0x73
   28436:	d0ef      	beq.n	28418 <tls_rpc_ip_event_handler+0x50>
   28438:	6060      	str	r0, [r4, #4]
   2843a:	6823      	ldr	r3, [r4, #0]
   2843c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   28440:	e02d      	b.n	2849e <tls_rpc_ip_event_handler+0xd6>
   28442:	2c00      	cmp	r4, #0
   28444:	d0e8      	beq.n	28418 <tls_rpc_ip_event_handler+0x50>
   28446:	6823      	ldr	r3, [r4, #0]
   28448:	b29b      	uxth	r3, r3
   2844a:	2b0a      	cmp	r3, #10
   2844c:	d1e4      	bne.n	28418 <tls_rpc_ip_event_handler+0x50>
   2844e:	6950      	ldr	r0, [r2, #20]
   28450:	bb40      	cbnz	r0, 284a4 <tls_rpc_ip_event_handler+0xdc>
   28452:	6823      	ldr	r3, [r4, #0]
   28454:	0c1b      	lsrs	r3, r3, #16
   28456:	041b      	lsls	r3, r3, #16
   28458:	f043 030b 	orr.w	r3, r3, #11
   2845c:	6023      	str	r3, [r4, #0]
   2845e:	bd70      	pop	{r4, r5, r6, pc}
   28460:	2c00      	cmp	r4, #0
   28462:	d0d9      	beq.n	28418 <tls_rpc_ip_event_handler+0x50>
   28464:	6823      	ldr	r3, [r4, #0]
   28466:	b29b      	uxth	r3, r3
   28468:	2b0b      	cmp	r3, #11
   2846a:	d1d5      	bne.n	28418 <tls_rpc_ip_event_handler+0x50>
   2846c:	6915      	ldr	r5, [r2, #16]
   2846e:	b9c5      	cbnz	r5, 284a2 <tls_rpc_ip_event_handler+0xda>
   28470:	6823      	ldr	r3, [r4, #0]
   28472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   28476:	6023      	str	r3, [r4, #0]
   28478:	f7ff fc1e 	bl	27cb8 <hostname_free>
   2847c:	6823      	ldr	r3, [r4, #0]
   2847e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   28482:	6023      	str	r3, [r4, #0]
   28484:	6823      	ldr	r3, [r4, #0]
   28486:	0c1b      	lsrs	r3, r3, #16
   28488:	041b      	lsls	r3, r3, #16
   2848a:	f043 030c 	orr.w	r3, r3, #12
   2848e:	6023      	str	r3, [r4, #0]
   28490:	6823      	ldr	r3, [r4, #0]
   28492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28496:	6023      	str	r3, [r4, #0]
   28498:	6823      	ldr	r3, [r4, #0]
   2849a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2849e:	6023      	str	r3, [r4, #0]
   284a0:	e7ba      	b.n	28418 <tls_rpc_ip_event_handler+0x50>
   284a2:	4628      	mov	r0, r5
   284a4:	f7fe fb8e 	bl	26bc4 <rpc_error_to_nrf_errno>
   284a8:	e7c6      	b.n	28438 <tls_rpc_ip_event_handler+0x70>
   284aa:	2001      	movs	r0, #1
   284ac:	e7d7      	b.n	2845e <tls_rpc_ip_event_handler+0x96>
   284ae:	bf00      	nop
   284b0:	2001da7d 	.word	0x2001da7d

000284b4 <at_interface_init>:
   284b4:	2201      	movs	r2, #1
   284b6:	4b02      	ldr	r3, [pc, #8]	; (284c0 <at_interface_init+0xc>)
   284b8:	2000      	movs	r0, #0
   284ba:	701a      	strb	r2, [r3, #0]
   284bc:	4770      	bx	lr
   284be:	bf00      	nop
   284c0:	2001dbc1 	.word	0x2001dbc1

000284c4 <at_interface_open>:
   284c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   284c8:	f04f 0800 	mov.w	r8, #0
   284cc:	4b19      	ldr	r3, [pc, #100]	; (28534 <at_interface_open+0x70>)
   284ce:	4607      	mov	r7, r0
   284d0:	781b      	ldrb	r3, [r3, #0]
   284d2:	460d      	mov	r5, r1
   284d4:	4616      	mov	r6, r2
   284d6:	f8cd 800c 	str.w	r8, [sp, #12]
   284da:	b943      	cbnz	r3, 284ee <at_interface_open+0x2a>
   284dc:	2070      	movs	r0, #112	; 0x70
   284de:	f7f8 fb5d 	bl	20b9c <nrf_modem_os_errno_set>
   284e2:	f04f 34ff 	mov.w	r4, #4294967295
   284e6:	4620      	mov	r0, r4
   284e8:	b004      	add	sp, #16
   284ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   284ee:	2902      	cmp	r1, #2
   284f0:	d001      	beq.n	284f6 <at_interface_open+0x32>
   284f2:	2029      	movs	r0, #41	; 0x29
   284f4:	e7f3      	b.n	284de <at_interface_open+0x1a>
   284f6:	4a10      	ldr	r2, [pc, #64]	; (28538 <at_interface_open+0x74>)
   284f8:	a803      	add	r0, sp, #12
   284fa:	f7fe fa25 	bl	26948 <interface_socket_allocate>
   284fe:	9b03      	ldr	r3, [sp, #12]
   28500:	4604      	mov	r4, r0
   28502:	2b00      	cmp	r3, #0
   28504:	d0ef      	beq.n	284e6 <at_interface_open+0x22>
   28506:	e9c3 7503 	strd	r7, r5, [r3, #12]
   2850a:	615e      	str	r6, [r3, #20]
   2850c:	4642      	mov	r2, r8
   2850e:	9500      	str	r5, [sp, #0]
   28510:	2305      	movs	r3, #5
   28512:	4641      	mov	r1, r8
   28514:	f00e fa9e 	bl	36a54 <send_message>
   28518:	4605      	mov	r5, r0
   2851a:	b120      	cbz	r0, 28526 <at_interface_open+0x62>
   2851c:	4620      	mov	r0, r4
   2851e:	f7fe fa39 	bl	26994 <interface_socket_free>
   28522:	4628      	mov	r0, r5
   28524:	e7db      	b.n	284de <at_interface_open+0x1a>
   28526:	9a03      	ldr	r2, [sp, #12]
   28528:	6813      	ldr	r3, [r2, #0]
   2852a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2852e:	6013      	str	r3, [r2, #0]
   28530:	e7d9      	b.n	284e6 <at_interface_open+0x22>
   28532:	bf00      	nop
   28534:	2001dbc1 	.word	0x2001dbc1
   28538:	00036a2f 	.word	0x00036a2f

0002853c <rpc_dfu_message_send>:
   2853c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2853e:	4605      	mov	r5, r0
   28540:	460e      	mov	r6, r1
   28542:	4668      	mov	r0, sp
   28544:	4611      	mov	r1, r2
   28546:	4614      	mov	r4, r2
   28548:	f00d fd8e 	bl	36068 <rpc_dfu_client_request_alloc>
   2854c:	b138      	cbz	r0, 2855e <rpc_dfu_message_send+0x22>
   2854e:	200c      	movs	r0, #12
   28550:	f7f8 fb24 	bl	20b9c <nrf_modem_os_errno_set>
   28554:	f04f 34ff 	mov.w	r4, #4294967295
   28558:	4620      	mov	r0, r4
   2855a:	b002      	add	sp, #8
   2855c:	bd70      	pop	{r4, r5, r6, pc}
   2855e:	b12c      	cbz	r4, 2856c <rpc_dfu_message_send+0x30>
   28560:	9b00      	ldr	r3, [sp, #0]
   28562:	4622      	mov	r2, r4
   28564:	4631      	mov	r1, r6
   28566:	6818      	ldr	r0, [r3, #0]
   28568:	f00f f90b 	bl	37782 <memcpy>
   2856c:	4a1c      	ldr	r2, [pc, #112]	; (285e0 <rpc_dfu_message_send+0xa4>)
   2856e:	9800      	ldr	r0, [sp, #0]
   28570:	8813      	ldrh	r3, [r2, #0]
   28572:	2d03      	cmp	r5, #3
   28574:	f103 0301 	add.w	r3, r3, #1
   28578:	b29b      	uxth	r3, r3
   2857a:	8013      	strh	r3, [r2, #0]
   2857c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   28580:	60c3      	str	r3, [r0, #12]
   28582:	f04f 0300 	mov.w	r3, #0
   28586:	bf0a      	itet	eq
   28588:	4a16      	ldreq	r2, [pc, #88]	; (285e4 <rpc_dfu_message_send+0xa8>)
   2858a:	2204      	movne	r2, #4
   2858c:	6812      	ldreq	r2, [r2, #0]
   2858e:	7243      	strb	r3, [r0, #9]
   28590:	bf04      	itt	eq
   28592:	6102      	streq	r2, [r0, #16]
   28594:	2208      	moveq	r2, #8
   28596:	7283      	strb	r3, [r0, #10]
   28598:	72c3      	strb	r3, [r0, #11]
   2859a:	2300      	movs	r3, #0
   2859c:	4e12      	ldr	r6, [pc, #72]	; (285e8 <rpc_dfu_message_send+0xac>)
   2859e:	6044      	str	r4, [r0, #4]
   285a0:	4629      	mov	r1, r5
   285a2:	7202      	strb	r2, [r0, #8]
   285a4:	6033      	str	r3, [r6, #0]
   285a6:	f00d fd6e 	bl	36086 <rpc_dfu_client_request_send>
   285aa:	4604      	mov	r4, r0
   285ac:	b140      	cbz	r0, 285c0 <rpc_dfu_message_send+0x84>
   285ae:	9b00      	ldr	r3, [sp, #0]
   285b0:	6818      	ldr	r0, [r3, #0]
   285b2:	b108      	cbz	r0, 285b8 <rpc_dfu_message_send+0x7c>
   285b4:	f00d fd79 	bl	360aa <rpc_dfu_client_data_free>
   285b8:	9800      	ldr	r0, [sp, #0]
   285ba:	f00d fd73 	bl	360a4 <rpc_dfu_client_message_free>
   285be:	e7c6      	b.n	2854e <rpc_dfu_message_send+0x12>
   285c0:	f04f 33ff 	mov.w	r3, #4294967295
   285c4:	4d09      	ldr	r5, [pc, #36]	; (285ec <rpc_dfu_message_send+0xb0>)
   285c6:	9301      	str	r3, [sp, #4]
   285c8:	6833      	ldr	r3, [r6, #0]
   285ca:	2b00      	cmp	r3, #0
   285cc:	d1c4      	bne.n	28558 <rpc_dfu_message_send+0x1c>
   285ce:	4628      	mov	r0, r5
   285d0:	a901      	add	r1, sp, #4
   285d2:	f7f8 fa2b 	bl	20a2c <nrf_modem_os_timedwait>
   285d6:	2800      	cmp	r0, #0
   285d8:	d0f6      	beq.n	285c8 <rpc_dfu_message_send+0x8c>
   285da:	203c      	movs	r0, #60	; 0x3c
   285dc:	e7b8      	b.n	28550 <rpc_dfu_message_send+0x14>
   285de:	bf00      	nop
   285e0:	2001ad66 	.word	0x2001ad66
   285e4:	20016c84 	.word	0x20016c84
   285e8:	20016c88 	.word	0x20016c88
   285ec:	20016c7c 	.word	0x20016c7c

000285f0 <rpc_dfu_event_handler>:
   285f0:	b508      	push	{r3, lr}
   285f2:	4b08      	ldr	r3, [pc, #32]	; (28614 <rpc_dfu_event_handler+0x24>)
   285f4:	68c2      	ldr	r2, [r0, #12]
   285f6:	881b      	ldrh	r3, [r3, #0]
   285f8:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   285fc:	d103      	bne.n	28606 <rpc_dfu_event_handler+0x16>
   285fe:	4b06      	ldr	r3, [pc, #24]	; (28618 <rpc_dfu_event_handler+0x28>)
   28600:	6018      	str	r0, [r3, #0]
   28602:	2001      	movs	r0, #1
   28604:	bd08      	pop	{r3, pc}
   28606:	6800      	ldr	r0, [r0, #0]
   28608:	2800      	cmp	r0, #0
   2860a:	d0fb      	beq.n	28604 <rpc_dfu_event_handler+0x14>
   2860c:	f00d fd4d 	bl	360aa <rpc_dfu_client_data_free>
   28610:	2000      	movs	r0, #0
   28612:	e7f7      	b.n	28604 <rpc_dfu_event_handler+0x14>
   28614:	2001ad66 	.word	0x2001ad66
   28618:	20016c88 	.word	0x20016c88

0002861c <mfu_interface_init>:
   2861c:	2000      	movs	r0, #0
   2861e:	2201      	movs	r2, #1
   28620:	4b04      	ldr	r3, [pc, #16]	; (28634 <mfu_interface_init+0x18>)
   28622:	8018      	strh	r0, [r3, #0]
   28624:	4b04      	ldr	r3, [pc, #16]	; (28638 <mfu_interface_init+0x1c>)
   28626:	6018      	str	r0, [r3, #0]
   28628:	4b04      	ldr	r3, [pc, #16]	; (2863c <mfu_interface_init+0x20>)
   2862a:	6018      	str	r0, [r3, #0]
   2862c:	4b04      	ldr	r3, [pc, #16]	; (28640 <mfu_interface_init+0x24>)
   2862e:	601a      	str	r2, [r3, #0]
   28630:	4770      	bx	lr
   28632:	bf00      	nop
   28634:	2001ad66 	.word	0x2001ad66
   28638:	20016c88 	.word	0x20016c88
   2863c:	20016c84 	.word	0x20016c84
   28640:	20016c7c 	.word	0x20016c7c

00028644 <mfu_interface_open>:
   28644:	b508      	push	{r3, lr}
   28646:	4b07      	ldr	r3, [pc, #28]	; (28664 <mfu_interface_open+0x20>)
   28648:	681a      	ldr	r2, [r3, #0]
   2864a:	2a01      	cmp	r2, #1
   2864c:	d005      	beq.n	2865a <mfu_interface_open+0x16>
   2864e:	2001      	movs	r0, #1
   28650:	f7f8 faa4 	bl	20b9c <nrf_modem_os_errno_set>
   28654:	f04f 30ff 	mov.w	r0, #4294967295
   28658:	bd08      	pop	{r3, pc}
   2865a:	2202      	movs	r2, #2
   2865c:	4802      	ldr	r0, [pc, #8]	; (28668 <mfu_interface_open+0x24>)
   2865e:	601a      	str	r2, [r3, #0]
   28660:	e7fa      	b.n	28658 <mfu_interface_open+0x14>
   28662:	bf00      	nop
   28664:	20016c7c 	.word	0x20016c7c
   28668:	49765432 	.word	0x49765432

0002866c <mfu_interface_close>:
   2866c:	b538      	push	{r3, r4, r5, lr}
   2866e:	4c11      	ldr	r4, [pc, #68]	; (286b4 <mfu_interface_close+0x48>)
   28670:	6823      	ldr	r3, [r4, #0]
   28672:	1e9a      	subs	r2, r3, #2
   28674:	2a01      	cmp	r2, #1
   28676:	d905      	bls.n	28684 <mfu_interface_close+0x18>
   28678:	2001      	movs	r0, #1
   2867a:	f7f8 fa8f 	bl	20b9c <nrf_modem_os_errno_set>
   2867e:	f04f 30ff 	mov.w	r0, #4294967295
   28682:	e015      	b.n	286b0 <mfu_interface_close+0x44>
   28684:	2b03      	cmp	r3, #3
   28686:	d110      	bne.n	286aa <mfu_interface_close+0x3e>
   28688:	2200      	movs	r2, #0
   2868a:	2006      	movs	r0, #6
   2868c:	4611      	mov	r1, r2
   2868e:	f7ff ff55 	bl	2853c <rpc_dfu_message_send>
   28692:	2800      	cmp	r0, #0
   28694:	d1f3      	bne.n	2867e <mfu_interface_close+0x12>
   28696:	4b08      	ldr	r3, [pc, #32]	; (286b8 <mfu_interface_close+0x4c>)
   28698:	6818      	ldr	r0, [r3, #0]
   2869a:	6905      	ldr	r5, [r0, #16]
   2869c:	f00d fd02 	bl	360a4 <rpc_dfu_client_message_free>
   286a0:	b11d      	cbz	r5, 286aa <mfu_interface_close+0x3e>
   286a2:	4b06      	ldr	r3, [pc, #24]	; (286bc <mfu_interface_close+0x50>)
   286a4:	2008      	movs	r0, #8
   286a6:	601d      	str	r5, [r3, #0]
   286a8:	e7e7      	b.n	2867a <mfu_interface_close+0xe>
   286aa:	2301      	movs	r3, #1
   286ac:	2000      	movs	r0, #0
   286ae:	6023      	str	r3, [r4, #0]
   286b0:	bd38      	pop	{r3, r4, r5, pc}
   286b2:	bf00      	nop
   286b4:	20016c7c 	.word	0x20016c7c
   286b8:	20016c88 	.word	0x20016c88
   286bc:	20016c80 	.word	0x20016c80

000286c0 <mfu_interface_sendto>:
   286c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   286c2:	4e1f      	ldr	r6, [pc, #124]	; (28740 <mfu_interface_sendto+0x80>)
   286c4:	460d      	mov	r5, r1
   286c6:	6831      	ldr	r1, [r6, #0]
   286c8:	4614      	mov	r4, r2
   286ca:	1e88      	subs	r0, r1, #2
   286cc:	2801      	cmp	r0, #1
   286ce:	9a06      	ldr	r2, [sp, #24]
   286d0:	d903      	bls.n	286da <mfu_interface_sendto+0x1a>
   286d2:	2001      	movs	r0, #1
   286d4:	f7f8 fa62 	bl	20b9c <nrf_modem_os_errno_set>
   286d8:	e010      	b.n	286fc <mfu_interface_sendto+0x3c>
   286da:	b105      	cbz	r5, 286de <mfu_interface_sendto+0x1e>
   286dc:	b90c      	cbnz	r4, 286e2 <mfu_interface_sendto+0x22>
   286de:	2016      	movs	r0, #22
   286e0:	e7f8      	b.n	286d4 <mfu_interface_sendto+0x14>
   286e2:	b10b      	cbz	r3, 286e8 <mfu_interface_sendto+0x28>
   286e4:	202d      	movs	r0, #45	; 0x2d
   286e6:	e7f5      	b.n	286d4 <mfu_interface_sendto+0x14>
   286e8:	b10a      	cbz	r2, 286ee <mfu_interface_sendto+0x2e>
   286ea:	2038      	movs	r0, #56	; 0x38
   286ec:	e7f2      	b.n	286d4 <mfu_interface_sendto+0x14>
   286ee:	2902      	cmp	r1, #2
   286f0:	d114      	bne.n	2871c <mfu_interface_sendto+0x5c>
   286f2:	4611      	mov	r1, r2
   286f4:	2003      	movs	r0, #3
   286f6:	f7ff ff21 	bl	2853c <rpc_dfu_message_send>
   286fa:	b118      	cbz	r0, 28704 <mfu_interface_sendto+0x44>
   286fc:	f04f 34ff 	mov.w	r4, #4294967295
   28700:	4620      	mov	r0, r4
   28702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28704:	4b0f      	ldr	r3, [pc, #60]	; (28744 <mfu_interface_sendto+0x84>)
   28706:	6818      	ldr	r0, [r3, #0]
   28708:	6907      	ldr	r7, [r0, #16]
   2870a:	f00d fccb 	bl	360a4 <rpc_dfu_client_message_free>
   2870e:	b11f      	cbz	r7, 28718 <mfu_interface_sendto+0x58>
   28710:	4b0d      	ldr	r3, [pc, #52]	; (28748 <mfu_interface_sendto+0x88>)
   28712:	601f      	str	r7, [r3, #0]
   28714:	2008      	movs	r0, #8
   28716:	e7dd      	b.n	286d4 <mfu_interface_sendto+0x14>
   28718:	2303      	movs	r3, #3
   2871a:	6033      	str	r3, [r6, #0]
   2871c:	4622      	mov	r2, r4
   2871e:	4629      	mov	r1, r5
   28720:	2004      	movs	r0, #4
   28722:	f7ff ff0b 	bl	2853c <rpc_dfu_message_send>
   28726:	2800      	cmp	r0, #0
   28728:	d1e8      	bne.n	286fc <mfu_interface_sendto+0x3c>
   2872a:	4b06      	ldr	r3, [pc, #24]	; (28744 <mfu_interface_sendto+0x84>)
   2872c:	6818      	ldr	r0, [r3, #0]
   2872e:	6905      	ldr	r5, [r0, #16]
   28730:	f00d fcb8 	bl	360a4 <rpc_dfu_client_message_free>
   28734:	2d00      	cmp	r5, #0
   28736:	d0e3      	beq.n	28700 <mfu_interface_sendto+0x40>
   28738:	4b03      	ldr	r3, [pc, #12]	; (28748 <mfu_interface_sendto+0x88>)
   2873a:	601d      	str	r5, [r3, #0]
   2873c:	e7ea      	b.n	28714 <mfu_interface_sendto+0x54>
   2873e:	bf00      	nop
   28740:	20016c7c 	.word	0x20016c7c
   28744:	20016c88 	.word	0x20016c88
   28748:	20016c80 	.word	0x20016c80

0002874c <mfu_interface_setopt>:
   2874c:	481d      	ldr	r0, [pc, #116]	; (287c4 <mfu_interface_setopt+0x78>)
   2874e:	b510      	push	{r4, lr}
   28750:	6800      	ldr	r0, [r0, #0]
   28752:	3802      	subs	r0, #2
   28754:	2801      	cmp	r0, #1
   28756:	d905      	bls.n	28764 <mfu_interface_setopt+0x18>
   28758:	2001      	movs	r0, #1
   2875a:	f7f8 fa1f 	bl	20b9c <nrf_modem_os_errno_set>
   2875e:	f04f 30ff 	mov.w	r0, #4294967295
   28762:	e026      	b.n	287b2 <mfu_interface_setopt+0x66>
   28764:	f240 2003 	movw	r0, #515	; 0x203
   28768:	4281      	cmp	r1, r0
   2876a:	d001      	beq.n	28770 <mfu_interface_setopt+0x24>
   2876c:	2016      	movs	r0, #22
   2876e:	e7f4      	b.n	2875a <mfu_interface_setopt+0xe>
   28770:	3a04      	subs	r2, #4
   28772:	2a03      	cmp	r2, #3
   28774:	d81e      	bhi.n	287b4 <mfu_interface_setopt+0x68>
   28776:	e8df f002 	tbb	[pc, r2]
   2877a:	021f      	.short	0x021f
   2877c:	1321      	.short	0x1321
   2877e:	2007      	movs	r0, #7
   28780:	2200      	movs	r2, #0
   28782:	4611      	mov	r1, r2
   28784:	f7ff feda 	bl	2853c <rpc_dfu_message_send>
   28788:	2800      	cmp	r0, #0
   2878a:	d1e8      	bne.n	2875e <mfu_interface_setopt+0x12>
   2878c:	4b0e      	ldr	r3, [pc, #56]	; (287c8 <mfu_interface_setopt+0x7c>)
   2878e:	6818      	ldr	r0, [r3, #0]
   28790:	6904      	ldr	r4, [r0, #16]
   28792:	f00d fc87 	bl	360a4 <rpc_dfu_client_message_free>
   28796:	b19c      	cbz	r4, 287c0 <mfu_interface_setopt+0x74>
   28798:	4b0c      	ldr	r3, [pc, #48]	; (287cc <mfu_interface_setopt+0x80>)
   2879a:	2008      	movs	r0, #8
   2879c:	601c      	str	r4, [r3, #0]
   2879e:	e7dc      	b.n	2875a <mfu_interface_setopt+0xe>
   287a0:	2b00      	cmp	r3, #0
   287a2:	d0e3      	beq.n	2876c <mfu_interface_setopt+0x20>
   287a4:	9a02      	ldr	r2, [sp, #8]
   287a6:	2a04      	cmp	r2, #4
   287a8:	d1e0      	bne.n	2876c <mfu_interface_setopt+0x20>
   287aa:	2000      	movs	r0, #0
   287ac:	681a      	ldr	r2, [r3, #0]
   287ae:	4b08      	ldr	r3, [pc, #32]	; (287d0 <mfu_interface_setopt+0x84>)
   287b0:	601a      	str	r2, [r3, #0]
   287b2:	bd10      	pop	{r4, pc}
   287b4:	202a      	movs	r0, #42	; 0x2a
   287b6:	e7d0      	b.n	2875a <mfu_interface_setopt+0xe>
   287b8:	2005      	movs	r0, #5
   287ba:	e7e1      	b.n	28780 <mfu_interface_setopt+0x34>
   287bc:	2008      	movs	r0, #8
   287be:	e7df      	b.n	28780 <mfu_interface_setopt+0x34>
   287c0:	4620      	mov	r0, r4
   287c2:	e7f6      	b.n	287b2 <mfu_interface_setopt+0x66>
   287c4:	20016c7c 	.word	0x20016c7c
   287c8:	20016c88 	.word	0x20016c88
   287cc:	20016c80 	.word	0x20016c80
   287d0:	20016c84 	.word	0x20016c84

000287d4 <mfu_interface_getopt>:
   287d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   287d6:	461e      	mov	r6, r3
   287d8:	f240 2303 	movw	r3, #515	; 0x203
   287dc:	4299      	cmp	r1, r3
   287de:	4610      	mov	r0, r2
   287e0:	9d06      	ldr	r5, [sp, #24]
   287e2:	d101      	bne.n	287e8 <mfu_interface_getopt+0x14>
   287e4:	b106      	cbz	r6, 287e8 <mfu_interface_getopt+0x14>
   287e6:	b92d      	cbnz	r5, 287f4 <mfu_interface_getopt+0x20>
   287e8:	2016      	movs	r0, #22
   287ea:	f7f8 f9d7 	bl	20b9c <nrf_modem_os_errno_set>
   287ee:	f04f 30ff 	mov.w	r0, #4294967295
   287f2:	e019      	b.n	28828 <mfu_interface_getopt+0x54>
   287f4:	4b21      	ldr	r3, [pc, #132]	; (2887c <mfu_interface_getopt+0xa8>)
   287f6:	681b      	ldr	r3, [r3, #0]
   287f8:	3b02      	subs	r3, #2
   287fa:	2b01      	cmp	r3, #1
   287fc:	d901      	bls.n	28802 <mfu_interface_getopt+0x2e>
   287fe:	2001      	movs	r0, #1
   28800:	e7f3      	b.n	287ea <mfu_interface_getopt+0x16>
   28802:	2a07      	cmp	r2, #7
   28804:	d02a      	beq.n	2885c <mfu_interface_getopt+0x88>
   28806:	dc05      	bgt.n	28814 <mfu_interface_getopt+0x40>
   28808:	2a01      	cmp	r2, #1
   2880a:	d00e      	beq.n	2882a <mfu_interface_getopt+0x56>
   2880c:	2a02      	cmp	r2, #2
   2880e:	d022      	beq.n	28856 <mfu_interface_getopt+0x82>
   28810:	202a      	movs	r0, #42	; 0x2a
   28812:	e7ea      	b.n	287ea <mfu_interface_getopt+0x16>
   28814:	2a14      	cmp	r2, #20
   28816:	d1fb      	bne.n	28810 <mfu_interface_getopt+0x3c>
   28818:	682b      	ldr	r3, [r5, #0]
   2881a:	2b04      	cmp	r3, #4
   2881c:	d1e4      	bne.n	287e8 <mfu_interface_getopt+0x14>
   2881e:	2000      	movs	r0, #0
   28820:	4b17      	ldr	r3, [pc, #92]	; (28880 <mfu_interface_getopt+0xac>)
   28822:	681a      	ldr	r2, [r3, #0]
   28824:	6018      	str	r0, [r3, #0]
   28826:	6032      	str	r2, [r6, #0]
   28828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2882a:	682b      	ldr	r3, [r5, #0]
   2882c:	2b24      	cmp	r3, #36	; 0x24
   2882e:	d1db      	bne.n	287e8 <mfu_interface_getopt+0x14>
   28830:	2200      	movs	r2, #0
   28832:	4611      	mov	r1, r2
   28834:	f7ff fe82 	bl	2853c <rpc_dfu_message_send>
   28838:	2800      	cmp	r0, #0
   2883a:	d1d8      	bne.n	287ee <mfu_interface_getopt+0x1a>
   2883c:	4f11      	ldr	r7, [pc, #68]	; (28884 <mfu_interface_getopt+0xb0>)
   2883e:	6839      	ldr	r1, [r7, #0]
   28840:	690c      	ldr	r4, [r1, #16]
   28842:	b184      	cbz	r4, 28866 <mfu_interface_getopt+0x92>
   28844:	4b0e      	ldr	r3, [pc, #56]	; (28880 <mfu_interface_getopt+0xac>)
   28846:	2008      	movs	r0, #8
   28848:	601c      	str	r4, [r3, #0]
   2884a:	f7f8 f9a7 	bl	20b9c <nrf_modem_os_errno_set>
   2884e:	6838      	ldr	r0, [r7, #0]
   28850:	f00d fc28 	bl	360a4 <rpc_dfu_client_message_free>
   28854:	e7cb      	b.n	287ee <mfu_interface_getopt+0x1a>
   28856:	682b      	ldr	r3, [r5, #0]
   28858:	2b04      	cmp	r3, #4
   2885a:	e7e8      	b.n	2882e <mfu_interface_getopt+0x5a>
   2885c:	682b      	ldr	r3, [r5, #0]
   2885e:	2b04      	cmp	r3, #4
   28860:	d1c2      	bne.n	287e8 <mfu_interface_getopt+0x14>
   28862:	2009      	movs	r0, #9
   28864:	e7e4      	b.n	28830 <mfu_interface_getopt+0x5c>
   28866:	682a      	ldr	r2, [r5, #0]
   28868:	3114      	adds	r1, #20
   2886a:	4630      	mov	r0, r6
   2886c:	f00e ff89 	bl	37782 <memcpy>
   28870:	6838      	ldr	r0, [r7, #0]
   28872:	f00d fc17 	bl	360a4 <rpc_dfu_client_message_free>
   28876:	4620      	mov	r0, r4
   28878:	e7d6      	b.n	28828 <mfu_interface_getopt+0x54>
   2887a:	bf00      	nop
   2887c:	20016c7c 	.word	0x20016c7c
   28880:	20016c80 	.word	0x20016c80
   28884:	20016c88 	.word	0x20016c88

00028888 <rpc_gnss_event_handler>:
   28888:	b5f0      	push	{r4, r5, r6, r7, lr}
   2888a:	4b5b      	ldr	r3, [pc, #364]	; (289f8 <rpc_gnss_event_handler+0x170>)
   2888c:	4605      	mov	r5, r0
   2888e:	6800      	ldr	r0, [r0, #0]
   28890:	881b      	ldrh	r3, [r3, #0]
   28892:	6802      	ldr	r2, [r0, #0]
   28894:	460c      	mov	r4, r1
   28896:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2889a:	b085      	sub	sp, #20
   2889c:	d134      	bne.n	28908 <rpc_gnss_event_handler+0x80>
   2889e:	4b57      	ldr	r3, [pc, #348]	; (289fc <rpc_gnss_event_handler+0x174>)
   288a0:	4e57      	ldr	r6, [pc, #348]	; (28a00 <rpc_gnss_event_handler+0x178>)
   288a2:	681a      	ldr	r2, [r3, #0]
   288a4:	6030      	str	r0, [r6, #0]
   288a6:	01d2      	lsls	r2, r2, #7
   288a8:	d50d      	bpl.n	288c6 <rpc_gnss_event_handler+0x3e>
   288aa:	f242 1202 	movw	r2, #8450	; 0x2102
   288ae:	4291      	cmp	r1, r2
   288b0:	d109      	bne.n	288c6 <rpc_gnss_event_handler+0x3e>
   288b2:	6842      	ldr	r2, [r0, #4]
   288b4:	b91a      	cbnz	r2, 288be <rpc_gnss_event_handler+0x36>
   288b6:	681a      	ldr	r2, [r3, #0]
   288b8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   288bc:	601a      	str	r2, [r3, #0]
   288be:	681a      	ldr	r2, [r3, #0]
   288c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   288c4:	601a      	str	r2, [r3, #0]
   288c6:	681a      	ldr	r2, [r3, #0]
   288c8:	0257      	lsls	r7, r2, #9
   288ca:	d50d      	bpl.n	288e8 <rpc_gnss_event_handler+0x60>
   288cc:	f242 1203 	movw	r2, #8451	; 0x2103
   288d0:	4294      	cmp	r4, r2
   288d2:	d109      	bne.n	288e8 <rpc_gnss_event_handler+0x60>
   288d4:	6842      	ldr	r2, [r0, #4]
   288d6:	b91a      	cbnz	r2, 288e0 <rpc_gnss_event_handler+0x58>
   288d8:	681a      	ldr	r2, [r3, #0]
   288da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   288de:	601a      	str	r2, [r3, #0]
   288e0:	681a      	ldr	r2, [r3, #0]
   288e2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   288e6:	e04a      	b.n	2897e <rpc_gnss_event_handler+0xf6>
   288e8:	f242 0201 	movw	r2, #8193	; 0x2001
   288ec:	4294      	cmp	r4, r2
   288ee:	d03e      	beq.n	2896e <rpc_gnss_event_handler+0xe6>
   288f0:	f242 0204 	movw	r2, #8196	; 0x2004
   288f4:	4294      	cmp	r4, r2
   288f6:	d044      	beq.n	28982 <rpc_gnss_event_handler+0xfa>
   288f8:	f242 0205 	movw	r2, #8197	; 0x2005
   288fc:	4294      	cmp	r4, r2
   288fe:	d05d      	beq.n	289bc <rpc_gnss_event_handler+0x134>
   28900:	f00d fbf1 	bl	360e6 <rpc_gnss_client_data_free>
   28904:	2300      	movs	r3, #0
   28906:	6033      	str	r3, [r6, #0]
   28908:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   2890c:	33ff      	adds	r3, #255	; 0xff
   2890e:	b29b      	uxth	r3, r3
   28910:	2b02      	cmp	r3, #2
   28912:	d869      	bhi.n	289e8 <rpc_gnss_event_handler+0x160>
   28914:	4f39      	ldr	r7, [pc, #228]	; (289fc <rpc_gnss_event_handler+0x174>)
   28916:	683b      	ldr	r3, [r7, #0]
   28918:	075a      	lsls	r2, r3, #29
   2891a:	d406      	bmi.n	2892a <rpc_gnss_event_handler+0xa2>
   2891c:	683b      	ldr	r3, [r7, #0]
   2891e:	079b      	lsls	r3, r3, #30
   28920:	d51c      	bpl.n	2895c <rpc_gnss_event_handler+0xd4>
   28922:	f244 0303 	movw	r3, #16387	; 0x4003
   28926:	429c      	cmp	r4, r3
   28928:	d118      	bne.n	2895c <rpc_gnss_event_handler+0xd4>
   2892a:	2002      	movs	r0, #2
   2892c:	f7f8 fae8 	bl	20f00 <nrf_modem_os_alloc>
   28930:	4606      	mov	r6, r0
   28932:	6828      	ldr	r0, [r5, #0]
   28934:	2e00      	cmp	r6, #0
   28936:	d052      	beq.n	289de <rpc_gnss_event_handler+0x156>
   28938:	8034      	strh	r4, [r6, #0]
   2893a:	686b      	ldr	r3, [r5, #4]
   2893c:	9000      	str	r0, [sp, #0]
   2893e:	e9cd 3601 	strd	r3, r6, [sp, #4]
   28942:	2302      	movs	r3, #2
   28944:	9303      	str	r3, [sp, #12]
   28946:	4b2f      	ldr	r3, [pc, #188]	; (28a04 <rpc_gnss_event_handler+0x17c>)
   28948:	4669      	mov	r1, sp
   2894a:	6818      	ldr	r0, [r3, #0]
   2894c:	6803      	ldr	r3, [r0, #0]
   2894e:	685b      	ldr	r3, [r3, #4]
   28950:	4798      	blx	r3
   28952:	3001      	adds	r0, #1
   28954:	d14b      	bne.n	289ee <rpc_gnss_event_handler+0x166>
   28956:	4630      	mov	r0, r6
   28958:	f7f8 fada 	bl	20f10 <nrf_modem_os_free>
   2895c:	6828      	ldr	r0, [r5, #0]
   2895e:	2800      	cmp	r0, #0
   28960:	d042      	beq.n	289e8 <rpc_gnss_event_handler+0x160>
   28962:	f00d fbc0 	bl	360e6 <rpc_gnss_client_data_free>
   28966:	2200      	movs	r2, #0
   28968:	4b25      	ldr	r3, [pc, #148]	; (28a00 <rpc_gnss_event_handler+0x178>)
   2896a:	601a      	str	r2, [r3, #0]
   2896c:	e03c      	b.n	289e8 <rpc_gnss_event_handler+0x160>
   2896e:	6842      	ldr	r2, [r0, #4]
   28970:	2a00      	cmp	r2, #0
   28972:	d1c5      	bne.n	28900 <rpc_gnss_event_handler+0x78>
   28974:	681a      	ldr	r2, [r3, #0]
   28976:	0c12      	lsrs	r2, r2, #16
   28978:	0412      	lsls	r2, r2, #16
   2897a:	f042 0202 	orr.w	r2, r2, #2
   2897e:	601a      	str	r2, [r3, #0]
   28980:	e7be      	b.n	28900 <rpc_gnss_event_handler+0x78>
   28982:	6842      	ldr	r2, [r0, #4]
   28984:	b9b2      	cbnz	r2, 289b4 <rpc_gnss_event_handler+0x12c>
   28986:	681a      	ldr	r2, [r3, #0]
   28988:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   2898c:	601a      	str	r2, [r3, #0]
   2898e:	681a      	ldr	r2, [r3, #0]
   28990:	b292      	uxth	r2, r2
   28992:	2a03      	cmp	r2, #3
   28994:	681a      	ldr	r2, [r3, #0]
   28996:	d104      	bne.n	289a2 <rpc_gnss_event_handler+0x11a>
   28998:	0c12      	lsrs	r2, r2, #16
   2899a:	0412      	lsls	r2, r2, #16
   2899c:	f042 0204 	orr.w	r2, r2, #4
   289a0:	e79d      	b.n	288de <rpc_gnss_event_handler+0x56>
   289a2:	b292      	uxth	r2, r2
   289a4:	2a04      	cmp	r2, #4
   289a6:	d19b      	bne.n	288e0 <rpc_gnss_event_handler+0x58>
   289a8:	681a      	ldr	r2, [r3, #0]
   289aa:	0c12      	lsrs	r2, r2, #16
   289ac:	0412      	lsls	r2, r2, #16
   289ae:	f042 0202 	orr.w	r2, r2, #2
   289b2:	e794      	b.n	288de <rpc_gnss_event_handler+0x56>
   289b4:	681a      	ldr	r2, [r3, #0]
   289b6:	b292      	uxth	r2, r2
   289b8:	2a03      	cmp	r2, #3
   289ba:	e7f4      	b.n	289a6 <rpc_gnss_event_handler+0x11e>
   289bc:	681a      	ldr	r2, [r3, #0]
   289be:	0291      	lsls	r1, r2, #10
   289c0:	d59e      	bpl.n	28900 <rpc_gnss_event_handler+0x78>
   289c2:	6842      	ldr	r2, [r0, #4]
   289c4:	b93a      	cbnz	r2, 289d6 <rpc_gnss_event_handler+0x14e>
   289c6:	681a      	ldr	r2, [r3, #0]
   289c8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   289cc:	601a      	str	r2, [r3, #0]
   289ce:	681a      	ldr	r2, [r3, #0]
   289d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   289d4:	e7d3      	b.n	2897e <rpc_gnss_event_handler+0xf6>
   289d6:	681a      	ldr	r2, [r3, #0]
   289d8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   289dc:	e7cf      	b.n	2897e <rpc_gnss_event_handler+0xf6>
   289de:	b118      	cbz	r0, 289e8 <rpc_gnss_event_handler+0x160>
   289e0:	f00d fb81 	bl	360e6 <rpc_gnss_client_data_free>
   289e4:	4b06      	ldr	r3, [pc, #24]	; (28a00 <rpc_gnss_event_handler+0x178>)
   289e6:	601e      	str	r6, [r3, #0]
   289e8:	2000      	movs	r0, #0
   289ea:	b005      	add	sp, #20
   289ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   289ee:	683b      	ldr	r3, [r7, #0]
   289f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   289f4:	603b      	str	r3, [r7, #0]
   289f6:	e7f7      	b.n	289e8 <rpc_gnss_event_handler+0x160>
   289f8:	2001ad68 	.word	0x2001ad68
   289fc:	20016c8c 	.word	0x20016c8c
   28a00:	20016c90 	.word	0x20016c90
   28a04:	20016c94 	.word	0x20016c94

00028a08 <send_message>:
   28a08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28a0c:	4607      	mov	r7, r0
   28a0e:	4688      	mov	r8, r1
   28a10:	a801      	add	r0, sp, #4
   28a12:	4611      	mov	r1, r2
   28a14:	4616      	mov	r6, r2
   28a16:	f00d fb4a 	bl	360ae <rpc_gnss_client_request_alloc>
   28a1a:	9b01      	ldr	r3, [sp, #4]
   28a1c:	4604      	mov	r4, r0
   28a1e:	b958      	cbnz	r0, 28a38 <send_message+0x30>
   28a20:	b993      	cbnz	r3, 28a48 <send_message+0x40>
   28a22:	9801      	ldr	r0, [sp, #4]
   28a24:	f00d fb5c 	bl	360e0 <rpc_gnss_client_message_free>
   28a28:	2023      	movs	r0, #35	; 0x23
   28a2a:	f7f8 f8b7 	bl	20b9c <nrf_modem_os_errno_set>
   28a2e:	f04f 30ff 	mov.w	r0, #4294967295
   28a32:	b002      	add	sp, #8
   28a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28a38:	2b00      	cmp	r3, #0
   28a3a:	d0f2      	beq.n	28a22 <send_message+0x1a>
   28a3c:	6818      	ldr	r0, [r3, #0]
   28a3e:	2800      	cmp	r0, #0
   28a40:	d0ef      	beq.n	28a22 <send_message+0x1a>
   28a42:	f00d fb50 	bl	360e6 <rpc_gnss_client_data_free>
   28a46:	e7ec      	b.n	28a22 <send_message+0x1a>
   28a48:	4a10      	ldr	r2, [pc, #64]	; (28a8c <send_message+0x84>)
   28a4a:	4641      	mov	r1, r8
   28a4c:	8815      	ldrh	r5, [r2, #0]
   28a4e:	3501      	adds	r5, #1
   28a50:	b2ad      	uxth	r5, r5
   28a52:	8015      	strh	r5, [r2, #0]
   28a54:	2243      	movs	r2, #67	; 0x43
   28a56:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
   28a5a:	f8c8 5000 	str.w	r5, [r8]
   28a5e:	731a      	strb	r2, [r3, #12]
   28a60:	2254      	movs	r2, #84	; 0x54
   28a62:	735a      	strb	r2, [r3, #13]
   28a64:	2276      	movs	r2, #118	; 0x76
   28a66:	739a      	strb	r2, [r3, #14]
   28a68:	2249      	movs	r2, #73	; 0x49
   28a6a:	605e      	str	r6, [r3, #4]
   28a6c:	7218      	strb	r0, [r3, #8]
   28a6e:	7258      	strb	r0, [r3, #9]
   28a70:	7298      	strb	r0, [r3, #10]
   28a72:	72d8      	strb	r0, [r3, #11]
   28a74:	73da      	strb	r2, [r3, #15]
   28a76:	6818      	ldr	r0, [r3, #0]
   28a78:	4632      	mov	r2, r6
   28a7a:	f00e fe82 	bl	37782 <memcpy>
   28a7e:	4b04      	ldr	r3, [pc, #16]	; (28a90 <send_message+0x88>)
   28a80:	4639      	mov	r1, r7
   28a82:	9801      	ldr	r0, [sp, #4]
   28a84:	601c      	str	r4, [r3, #0]
   28a86:	f00d fb21 	bl	360cc <rpc_gnss_client_request_send>
   28a8a:	e7d2      	b.n	28a32 <send_message+0x2a>
   28a8c:	2001ad68 	.word	0x2001ad68
   28a90:	20016c90 	.word	0x20016c90

00028a94 <gnss_interface_write>:
   28a94:	b570      	push	{r4, r5, r6, lr}
   28a96:	4604      	mov	r4, r0
   28a98:	4a40      	ldr	r2, [pc, #256]	; (28b9c <gnss_interface_write+0x108>)
   28a9a:	b09e      	sub	sp, #120	; 0x78
   28a9c:	4294      	cmp	r4, r2
   28a9e:	4608      	mov	r0, r1
   28aa0:	9922      	ldr	r1, [sp, #136]	; 0x88
   28aa2:	d005      	beq.n	28ab0 <gnss_interface_write+0x1c>
   28aa4:	2009      	movs	r0, #9
   28aa6:	f7f8 f879 	bl	20b9c <nrf_modem_os_errno_set>
   28aaa:	f04f 33ff 	mov.w	r3, #4294967295
   28aae:	e060      	b.n	28b72 <gnss_interface_write+0xde>
   28ab0:	b118      	cbz	r0, 28aba <gnss_interface_write+0x26>
   28ab2:	b111      	cbz	r1, 28aba <gnss_interface_write+0x26>
   28ab4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   28ab6:	2a02      	cmp	r2, #2
   28ab8:	d001      	beq.n	28abe <gnss_interface_write+0x2a>
   28aba:	2016      	movs	r0, #22
   28abc:	e7f3      	b.n	28aa6 <gnss_interface_write+0x12>
   28abe:	4c38      	ldr	r4, [pc, #224]	; (28ba0 <gnss_interface_write+0x10c>)
   28ac0:	6822      	ldr	r2, [r4, #0]
   28ac2:	b292      	uxth	r2, r2
   28ac4:	2a02      	cmp	r2, #2
   28ac6:	d005      	beq.n	28ad4 <gnss_interface_write+0x40>
   28ac8:	6822      	ldr	r2, [r4, #0]
   28aca:	b292      	uxth	r2, r2
   28acc:	2a04      	cmp	r2, #4
   28ace:	d001      	beq.n	28ad4 <gnss_interface_write+0x40>
   28ad0:	2039      	movs	r0, #57	; 0x39
   28ad2:	e7e8      	b.n	28aa6 <gnss_interface_write+0x12>
   28ad4:	b10b      	cbz	r3, 28ada <gnss_interface_write+0x46>
   28ad6:	202d      	movs	r0, #45	; 0x2d
   28ad8:	e7e5      	b.n	28aa6 <gnss_interface_write+0x12>
   28ada:	6822      	ldr	r2, [r4, #0]
   28adc:	0395      	lsls	r5, r2, #14
   28ade:	d548      	bpl.n	28b72 <gnss_interface_write+0xde>
   28ae0:	6823      	ldr	r3, [r4, #0]
   28ae2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   28ae6:	6023      	str	r3, [r4, #0]
   28ae8:	6823      	ldr	r3, [r4, #0]
   28aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   28aee:	6023      	str	r3, [r4, #0]
   28af0:	880b      	ldrh	r3, [r1, #0]
   28af2:	3b01      	subs	r3, #1
   28af4:	2b07      	cmp	r3, #7
   28af6:	d8e0      	bhi.n	28aba <gnss_interface_write+0x26>
   28af8:	e8df f003 	tbb	[pc, r3]
   28afc:	1f1b1704 	.word	0x1f1b1704
   28b00:	2f2b2723 	.word	0x2f2b2723
   28b04:	a902      	add	r1, sp, #8
   28b06:	f00d faf0 	bl	360ea <rpc_gnss_serialize_utc>
   28b0a:	2272      	movs	r2, #114	; 0x72
   28b0c:	f241 0005 	movw	r0, #4101	; 0x1005
   28b10:	a901      	add	r1, sp, #4
   28b12:	f7ff ff79 	bl	28a08 <send_message>
   28b16:	4603      	mov	r3, r0
   28b18:	bb18      	cbnz	r0, 28b62 <gnss_interface_write+0xce>
   28b1a:	4d22      	ldr	r5, [pc, #136]	; (28ba4 <gnss_interface_write+0x110>)
   28b1c:	4e1f      	ldr	r6, [pc, #124]	; (28b9c <gnss_interface_write+0x108>)
   28b1e:	6822      	ldr	r2, [r4, #0]
   28b20:	0291      	lsls	r1, r2, #10
   28b22:	d52f      	bpl.n	28b84 <gnss_interface_write+0xf0>
   28b24:	b343      	cbz	r3, 28b78 <gnss_interface_write+0xe4>
   28b26:	4618      	mov	r0, r3
   28b28:	e7bd      	b.n	28aa6 <gnss_interface_write+0x12>
   28b2a:	a902      	add	r1, sp, #8
   28b2c:	f00d fafa 	bl	36124 <rpc_gnss_serialize_ephe>
   28b30:	e7eb      	b.n	28b0a <gnss_interface_write+0x76>
   28b32:	a902      	add	r1, sp, #8
   28b34:	f00d fb40 	bl	361b8 <rpc_gnss_serialize_alm>
   28b38:	e7e7      	b.n	28b0a <gnss_interface_write+0x76>
   28b3a:	a902      	add	r1, sp, #8
   28b3c:	f00d fb69 	bl	36212 <rpc_gnss_serialize_klob>
   28b40:	e7e3      	b.n	28b0a <gnss_interface_write+0x76>
   28b42:	a902      	add	r1, sp, #8
   28b44:	f00d fb80 	bl	36248 <rpc_gnss_serialize_nequick>
   28b48:	e7df      	b.n	28b0a <gnss_interface_write+0x76>
   28b4a:	a902      	add	r1, sp, #8
   28b4c:	f00d fb91 	bl	36272 <rpc_gnss_serialize_time_and_sv_tow>
   28b50:	e7db      	b.n	28b0a <gnss_interface_write+0x76>
   28b52:	a902      	add	r1, sp, #8
   28b54:	f00d fbb0 	bl	362b8 <rpc_gnss_serialize_location>
   28b58:	e7d7      	b.n	28b0a <gnss_interface_write+0x76>
   28b5a:	a902      	add	r1, sp, #8
   28b5c:	f00d fbc9 	bl	362f2 <rpc_gnss_serialize_integrity>
   28b60:	e7d3      	b.n	28b0a <gnss_interface_write+0x76>
   28b62:	6822      	ldr	r2, [r4, #0]
   28b64:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   28b68:	6022      	str	r2, [r4, #0]
   28b6a:	6822      	ldr	r2, [r4, #0]
   28b6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   28b70:	6022      	str	r2, [r4, #0]
   28b72:	4618      	mov	r0, r3
   28b74:	b01e      	add	sp, #120	; 0x78
   28b76:	bd70      	pop	{r4, r5, r6, pc}
   28b78:	4629      	mov	r1, r5
   28b7a:	4630      	mov	r0, r6
   28b7c:	f7f7 ff56 	bl	20a2c <nrf_modem_os_timedwait>
   28b80:	4603      	mov	r3, r0
   28b82:	e7cc      	b.n	28b1e <gnss_interface_write+0x8a>
   28b84:	2b00      	cmp	r3, #0
   28b86:	d1ce      	bne.n	28b26 <gnss_interface_write+0x92>
   28b88:	6822      	ldr	r2, [r4, #0]
   28b8a:	0392      	lsls	r2, r2, #14
   28b8c:	d4f1      	bmi.n	28b72 <gnss_interface_write+0xde>
   28b8e:	6823      	ldr	r3, [r4, #0]
   28b90:	2005      	movs	r0, #5
   28b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28b96:	6023      	str	r3, [r4, #0]
   28b98:	e785      	b.n	28aa6 <gnss_interface_write+0x12>
   28b9a:	bf00      	nop
   28b9c:	49765443 	.word	0x49765443
   28ba0:	20016c8c 	.word	0x20016c8c
   28ba4:	20014a14 	.word	0x20014a14

00028ba8 <gnss_interface_read>:
   28ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28bac:	469a      	mov	sl, r3
   28bae:	4b87      	ldr	r3, [pc, #540]	; (28dcc <gnss_interface_read+0x224>)
   28bb0:	460c      	mov	r4, r1
   28bb2:	4298      	cmp	r0, r3
   28bb4:	b0b5      	sub	sp, #212	; 0xd4
   28bb6:	d005      	beq.n	28bc4 <gnss_interface_read+0x1c>
   28bb8:	2009      	movs	r0, #9
   28bba:	f7f7 ffef 	bl	20b9c <nrf_modem_os_errno_set>
   28bbe:	f04f 35ff 	mov.w	r5, #4294967295
   28bc2:	e054      	b.n	28c6e <gnss_interface_read+0xc6>
   28bc4:	b109      	cbz	r1, 28bca <gnss_interface_read+0x22>
   28bc6:	2ad7      	cmp	r2, #215	; 0xd7
   28bc8:	d801      	bhi.n	28bce <gnss_interface_read+0x26>
   28bca:	2016      	movs	r0, #22
   28bcc:	e7f5      	b.n	28bba <gnss_interface_read+0x12>
   28bce:	4f80      	ldr	r7, [pc, #512]	; (28dd0 <gnss_interface_read+0x228>)
   28bd0:	683b      	ldr	r3, [r7, #0]
   28bd2:	b29b      	uxth	r3, r3
   28bd4:	2b04      	cmp	r3, #4
   28bd6:	d005      	beq.n	28be4 <gnss_interface_read+0x3c>
   28bd8:	683b      	ldr	r3, [r7, #0]
   28bda:	b29b      	uxth	r3, r3
   28bdc:	2b02      	cmp	r3, #2
   28bde:	d001      	beq.n	28be4 <gnss_interface_read+0x3c>
   28be0:	2039      	movs	r0, #57	; 0x39
   28be2:	e7ea      	b.n	28bba <gnss_interface_read+0x12>
   28be4:	f1ba 0f00 	cmp.w	sl, #0
   28be8:	d004      	beq.n	28bf4 <gnss_interface_read+0x4c>
   28bea:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   28bee:	d101      	bne.n	28bf4 <gnss_interface_read+0x4c>
   28bf0:	202d      	movs	r0, #45	; 0x2d
   28bf2:	e7e2      	b.n	28bba <gnss_interface_read+0x12>
   28bf4:	683b      	ldr	r3, [r7, #0]
   28bf6:	f04f 0900 	mov.w	r9, #0
   28bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   28bfe:	603b      	str	r3, [r7, #0]
   28c00:	23ba      	movs	r3, #186	; 0xba
   28c02:	9302      	str	r3, [sp, #8]
   28c04:	f10d 0302 	add.w	r3, sp, #2
   28c08:	9303      	str	r3, [sp, #12]
   28c0a:	2302      	movs	r3, #2
   28c0c:	f10d 0814 	add.w	r8, sp, #20
   28c10:	4e70      	ldr	r6, [pc, #448]	; (28dd4 <gnss_interface_read+0x22c>)
   28c12:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 28dcc <gnss_interface_read+0x224>
   28c16:	f8cd 8004 	str.w	r8, [sp, #4]
   28c1a:	9304      	str	r3, [sp, #16]
   28c1c:	6830      	ldr	r0, [r6, #0]
   28c1e:	4652      	mov	r2, sl
   28c20:	6803      	ldr	r3, [r0, #0]
   28c22:	a901      	add	r1, sp, #4
   28c24:	689b      	ldr	r3, [r3, #8]
   28c26:	4798      	blx	r3
   28c28:	1e05      	subs	r5, r0, #0
   28c2a:	f280 80ac 	bge.w	28d86 <gnss_interface_read+0x1de>
   28c2e:	f01a 0f02 	tst.w	sl, #2
   28c32:	f040 80a5 	bne.w	28d80 <gnss_interface_read+0x1d8>
   28c36:	4d68      	ldr	r5, [pc, #416]	; (28dd8 <gnss_interface_read+0x230>)
   28c38:	683b      	ldr	r3, [r7, #0]
   28c3a:	4968      	ldr	r1, [pc, #416]	; (28ddc <gnss_interface_read+0x234>)
   28c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   28c40:	ea53 0309 	orrs.w	r3, r3, r9
   28c44:	782a      	ldrb	r2, [r5, #0]
   28c46:	d109      	bne.n	28c5c <gnss_interface_read+0xb4>
   28c48:	b91a      	cbnz	r2, 28c52 <gnss_interface_read+0xaa>
   28c4a:	f04f 0970 	mov.w	r9, #112	; 0x70
   28c4e:	4648      	mov	r0, r9
   28c50:	e7b3      	b.n	28bba <gnss_interface_read+0x12>
   28c52:	4658      	mov	r0, fp
   28c54:	f7f7 feea 	bl	20a2c <nrf_modem_os_timedwait>
   28c58:	4681      	mov	r9, r0
   28c5a:	e7ed      	b.n	28c38 <gnss_interface_read+0x90>
   28c5c:	2a00      	cmp	r2, #0
   28c5e:	d1dd      	bne.n	28c1c <gnss_interface_read+0x74>
   28c60:	e7f3      	b.n	28c4a <gnss_interface_read+0xa2>
   28c62:	f1b9 0f00 	cmp.w	r9, #0
   28c66:	d1f2      	bne.n	28c4e <gnss_interface_read+0xa6>
   28c68:	2023      	movs	r0, #35	; 0x23
   28c6a:	f7f7 ff97 	bl	20b9c <nrf_modem_os_errno_set>
   28c6e:	4628      	mov	r0, r5
   28c70:	b035      	add	sp, #212	; 0xd4
   28c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c76:	f244 0201 	movw	r2, #16385	; 0x4001
   28c7a:	4293      	cmp	r3, r2
   28c7c:	d170      	bne.n	28d60 <gnss_interface_read+0x1b8>
   28c7e:	2301      	movs	r3, #1
   28c80:	7023      	strb	r3, [r4, #0]
   28c82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   28c86:	e9c4 2302 	strd	r2, r3, [r4, #8]
   28c8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28c8e:	e9c4 2304 	strd	r2, r3, [r4, #16]
   28c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28c94:	200a      	movs	r0, #10
   28c96:	61a3      	str	r3, [r4, #24]
   28c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   28c9a:	61e3      	str	r3, [r4, #28]
   28c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   28c9e:	6223      	str	r3, [r4, #32]
   28ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28ca2:	6263      	str	r3, [r4, #36]	; 0x24
   28ca4:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   28ca8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   28cac:	f8dd 3041 	ldr.w	r3, [sp, #65]	; 0x41
   28cb0:	6363      	str	r3, [r4, #52]	; 0x34
   28cb2:	f8dd 3045 	ldr.w	r3, [sp, #69]	; 0x45
   28cb6:	63a3      	str	r3, [r4, #56]	; 0x38
   28cb8:	f8dd 3049 	ldr.w	r3, [sp, #73]	; 0x49
   28cbc:	63e3      	str	r3, [r4, #60]	; 0x3c
   28cbe:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   28cc2:	6423      	str	r3, [r4, #64]	; 0x40
   28cc4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   28cc8:	8523      	strh	r3, [r4, #40]	; 0x28
   28cca:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   28cce:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
   28cd2:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   28cd6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   28cda:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   28cde:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   28ce2:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
   28ce6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   28cea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   28cee:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   28cf2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   28cf6:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   28cfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28cfe:	2200      	movs	r2, #0
   28d00:	8623      	strh	r3, [r4, #48]	; 0x30
   28d02:	ab34      	add	r3, sp, #208	; 0xd0
   28d04:	fb00 3302 	mla	r3, r0, r2, r3
   28d08:	f833 1c7e 	ldrh.w	r1, [r3, #-126]
   28d0c:	3201      	adds	r2, #1
   28d0e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
   28d12:	f898 1040 	ldrb.w	r1, [r8, #64]	; 0x40
   28d16:	2a0c      	cmp	r2, #12
   28d18:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
   28d1c:	f813 5c7a 	ldrb.w	r5, [r3, #-122]
   28d20:	f813 1c7b 	ldrb.w	r1, [r3, #-123]
   28d24:	f104 040c 	add.w	r4, r4, #12
   28d28:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   28d2c:	87e1      	strh	r1, [r4, #62]	; 0x3e
   28d2e:	f813 1c79 	ldrb.w	r1, [r3, #-121]
   28d32:	f813 5c78 	ldrb.w	r5, [r3, #-120]
   28d36:	f108 080a 	add.w	r8, r8, #10
   28d3a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   28d3e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
   28d42:	f813 1c77 	ldrb.w	r1, [r3, #-119]
   28d46:	f813 3c76 	ldrb.w	r3, [r3, #-118]
   28d4a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
   28d4e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   28d52:	f898 303d 	ldrb.w	r3, [r8, #61]	; 0x3d
   28d56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   28d5a:	d1d2      	bne.n	28d02 <gnss_interface_read+0x15a>
   28d5c:	25d8      	movs	r5, #216	; 0xd8
   28d5e:	e028      	b.n	28db2 <gnss_interface_read+0x20a>
   28d60:	f244 0203 	movw	r2, #16387	; 0x4003
   28d64:	4293      	cmp	r3, r2
   28d66:	f47f af30 	bne.w	28bca <gnss_interface_read+0x22>
   28d6a:	2303      	movs	r3, #3
   28d6c:	7023      	strb	r3, [r4, #0]
   28d6e:	9b05      	ldr	r3, [sp, #20]
   28d70:	2514      	movs	r5, #20
   28d72:	60a3      	str	r3, [r4, #8]
   28d74:	9b06      	ldr	r3, [sp, #24]
   28d76:	60e3      	str	r3, [r4, #12]
   28d78:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   28d7c:	6123      	str	r3, [r4, #16]
   28d7e:	e018      	b.n	28db2 <gnss_interface_read+0x20a>
   28d80:	1c6b      	adds	r3, r5, #1
   28d82:	f43f af6e 	beq.w	28c62 <gnss_interface_read+0xba>
   28d86:	f244 0202 	movw	r2, #16386	; 0x4002
   28d8a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   28d8e:	4293      	cmp	r3, r2
   28d90:	f47f af71 	bne.w	28c76 <gnss_interface_read+0xce>
   28d94:	4640      	mov	r0, r8
   28d96:	f7e8 fbb3 	bl	11500 <strlen>
   28d9a:	4605      	mov	r5, r0
   28d9c:	2302      	movs	r3, #2
   28d9e:	4620      	mov	r0, r4
   28da0:	3501      	adds	r5, #1
   28da2:	b2ad      	uxth	r5, r5
   28da4:	462a      	mov	r2, r5
   28da6:	4641      	mov	r1, r8
   28da8:	f800 3b08 	strb.w	r3, [r0], #8
   28dac:	f00e fce9 	bl	37782 <memcpy>
   28db0:	3508      	adds	r5, #8
   28db2:	6830      	ldr	r0, [r6, #0]
   28db4:	6803      	ldr	r3, [r0, #0]
   28db6:	68db      	ldr	r3, [r3, #12]
   28db8:	4798      	blx	r3
   28dba:	2800      	cmp	r0, #0
   28dbc:	f77f af57 	ble.w	28c6e <gnss_interface_read+0xc6>
   28dc0:	683b      	ldr	r3, [r7, #0]
   28dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   28dc6:	603b      	str	r3, [r7, #0]
   28dc8:	e751      	b.n	28c6e <gnss_interface_read+0xc6>
   28dca:	bf00      	nop
   28dcc:	49765443 	.word	0x49765443
   28dd0:	20016c8c 	.word	0x20016c8c
   28dd4:	20016c94 	.word	0x20016c94
   28dd8:	2001dbc2 	.word	0x2001dbc2
   28ddc:	20014a14 	.word	0x20014a14

00028de0 <gnss_interface_setopt>:
   28de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28de4:	4c75      	ldr	r4, [pc, #468]	; (28fbc <gnss_interface_setopt+0x1dc>)
   28de6:	4616      	mov	r6, r2
   28de8:	6822      	ldr	r2, [r4, #0]
   28dea:	b087      	sub	sp, #28
   28dec:	b292      	uxth	r2, r2
   28dee:	2a02      	cmp	r2, #2
   28df0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   28df2:	d007      	beq.n	28e04 <gnss_interface_setopt+0x24>
   28df4:	2e08      	cmp	r6, #8
   28df6:	d005      	beq.n	28e04 <gnss_interface_setopt+0x24>
   28df8:	f1a6 020a 	sub.w	r2, r6, #10
   28dfc:	2a01      	cmp	r2, #1
   28dfe:	d901      	bls.n	28e04 <gnss_interface_setopt+0x24>
   28e00:	200e      	movs	r0, #14
   28e02:	e003      	b.n	28e0c <gnss_interface_setopt+0x2c>
   28e04:	6822      	ldr	r2, [r4, #0]
   28e06:	0252      	lsls	r2, r2, #9
   28e08:	d508      	bpl.n	28e1c <gnss_interface_setopt+0x3c>
   28e0a:	2073      	movs	r0, #115	; 0x73
   28e0c:	f7f7 fec6 	bl	20b9c <nrf_modem_os_errno_set>
   28e10:	f04f 35ff 	mov.w	r5, #4294967295
   28e14:	4628      	mov	r0, r5
   28e16:	b007      	add	sp, #28
   28e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28e1c:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   28e20:	d001      	beq.n	28e26 <gnss_interface_setopt+0x46>
   28e22:	202a      	movs	r0, #42	; 0x2a
   28e24:	e7f2      	b.n	28e0c <gnss_interface_setopt+0x2c>
   28e26:	4a66      	ldr	r2, [pc, #408]	; (28fc0 <gnss_interface_setopt+0x1e0>)
   28e28:	4290      	cmp	r0, r2
   28e2a:	d001      	beq.n	28e30 <gnss_interface_setopt+0x50>
   28e2c:	2009      	movs	r0, #9
   28e2e:	e7ed      	b.n	28e0c <gnss_interface_setopt+0x2c>
   28e30:	f1a6 020a 	sub.w	r2, r6, #10
   28e34:	2a01      	cmp	r2, #1
   28e36:	d902      	bls.n	28e3e <gnss_interface_setopt+0x5e>
   28e38:	b90b      	cbnz	r3, 28e3e <gnss_interface_setopt+0x5e>
   28e3a:	2016      	movs	r0, #22
   28e3c:	e7e6      	b.n	28e0c <gnss_interface_setopt+0x2c>
   28e3e:	1e72      	subs	r2, r6, #1
   28e40:	2a0a      	cmp	r2, #10
   28e42:	d8fa      	bhi.n	28e3a <gnss_interface_setopt+0x5a>
   28e44:	e8df f002 	tbb	[pc, r2]
   28e48:	4b45063d 	.word	0x4b45063d
   28e4c:	806a5a53 	.word	0x806a5a53
   28e50:	9362      	.short	0x9362
   28e52:	a5          	.byte	0xa5
   28e53:	00          	.byte	0x00
   28e54:	2d02      	cmp	r5, #2
   28e56:	d1f0      	bne.n	28e3a <gnss_interface_setopt+0x5a>
   28e58:	2210      	movs	r2, #16
   28e5a:	881b      	ldrh	r3, [r3, #0]
   28e5c:	9202      	str	r2, [sp, #8]
   28e5e:	f8ad 3011 	strh.w	r3, [sp, #17]
   28e62:	f241 1003 	movw	r0, #4355	; 0x1103
   28e66:	6823      	ldr	r3, [r4, #0]
   28e68:	2214      	movs	r2, #20
   28e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   28e6e:	a901      	add	r1, sp, #4
   28e70:	6023      	str	r3, [r4, #0]
   28e72:	f7ff fdc9 	bl	28a08 <send_message>
   28e76:	4605      	mov	r5, r0
   28e78:	2800      	cmp	r0, #0
   28e7a:	f040 8091 	bne.w	28fa0 <gnss_interface_setopt+0x1c0>
   28e7e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 28fc4 <gnss_interface_setopt+0x1e4>
   28e82:	f8df 813c 	ldr.w	r8, [pc, #316]	; 28fc0 <gnss_interface_setopt+0x1e0>
   28e86:	4649      	mov	r1, r9
   28e88:	4640      	mov	r0, r8
   28e8a:	f7f7 fdcf 	bl	20a2c <nrf_modem_os_timedwait>
   28e8e:	6827      	ldr	r7, [r4, #0]
   28e90:	f417 0780 	ands.w	r7, r7, #4194304	; 0x400000
   28e94:	d1f7      	bne.n	28e86 <gnss_interface_setopt+0xa6>
   28e96:	f8df 8130 	ldr.w	r8, [pc, #304]	; 28fc8 <gnss_interface_setopt+0x1e8>
   28e9a:	f8d8 0000 	ldr.w	r0, [r8]
   28e9e:	b118      	cbz	r0, 28ea8 <gnss_interface_setopt+0xc8>
   28ea0:	f00d f921 	bl	360e6 <rpc_gnss_client_data_free>
   28ea4:	f8c8 7000 	str.w	r7, [r8]
   28ea8:	6823      	ldr	r3, [r4, #0]
   28eaa:	021b      	lsls	r3, r3, #8
   28eac:	d47d      	bmi.n	28faa <gnss_interface_setopt+0x1ca>
   28eae:	200e      	movs	r0, #14
   28eb0:	f7f7 fe74 	bl	20b9c <nrf_modem_os_errno_set>
   28eb4:	f04f 35ff 	mov.w	r5, #4294967295
   28eb8:	6823      	ldr	r3, [r4, #0]
   28eba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   28ebe:	6023      	str	r3, [r4, #0]
   28ec0:	e7a8      	b.n	28e14 <gnss_interface_setopt+0x34>
   28ec2:	2d02      	cmp	r5, #2
   28ec4:	d1b9      	bne.n	28e3a <gnss_interface_setopt+0x5a>
   28ec6:	2208      	movs	r2, #8
   28ec8:	881b      	ldrh	r3, [r3, #0]
   28eca:	9202      	str	r2, [sp, #8]
   28ecc:	f8ad 300f 	strh.w	r3, [sp, #15]
   28ed0:	e7c7      	b.n	28e62 <gnss_interface_setopt+0x82>
   28ed2:	2d01      	cmp	r5, #1
   28ed4:	d1b1      	bne.n	28e3a <gnss_interface_setopt+0x5a>
   28ed6:	781b      	ldrb	r3, [r3, #0]
   28ed8:	2b01      	cmp	r3, #1
   28eda:	d0c2      	beq.n	28e62 <gnss_interface_setopt+0x82>
   28edc:	e7ad      	b.n	28e3a <gnss_interface_setopt+0x5a>
   28ede:	2d02      	cmp	r5, #2
   28ee0:	d1ab      	bne.n	28e3a <gnss_interface_setopt+0x5a>
   28ee2:	2220      	movs	r2, #32
   28ee4:	881b      	ldrh	r3, [r3, #0]
   28ee6:	9202      	str	r2, [sp, #8]
   28ee8:	f8ad 3013 	strh.w	r3, [sp, #19]
   28eec:	e7b9      	b.n	28e62 <gnss_interface_setopt+0x82>
   28eee:	2d01      	cmp	r5, #1
   28ef0:	d1a3      	bne.n	28e3a <gnss_interface_setopt+0x5a>
   28ef2:	781b      	ldrb	r3, [r3, #0]
   28ef4:	9502      	str	r5, [sp, #8]
   28ef6:	f88d 300c 	strb.w	r3, [sp, #12]
   28efa:	e7b2      	b.n	28e62 <gnss_interface_setopt+0x82>
   28efc:	2d01      	cmp	r5, #1
   28efe:	d19c      	bne.n	28e3a <gnss_interface_setopt+0x5a>
   28f00:	2202      	movs	r2, #2
   28f02:	781b      	ldrb	r3, [r3, #0]
   28f04:	9202      	str	r2, [sp, #8]
   28f06:	f88d 300d 	strb.w	r3, [sp, #13]
   28f0a:	e7aa      	b.n	28e62 <gnss_interface_setopt+0x82>
   28f0c:	2d01      	cmp	r5, #1
   28f0e:	d194      	bne.n	28e3a <gnss_interface_setopt+0x5a>
   28f10:	2240      	movs	r2, #64	; 0x40
   28f12:	781b      	ldrb	r3, [r3, #0]
   28f14:	9202      	str	r2, [sp, #8]
   28f16:	f88d 3015 	strb.w	r3, [sp, #21]
   28f1a:	e7a2      	b.n	28e62 <gnss_interface_setopt+0x82>
   28f1c:	6822      	ldr	r2, [r4, #0]
   28f1e:	b292      	uxth	r2, r2
   28f20:	2a02      	cmp	r2, #2
   28f22:	f47f af6d 	bne.w	28e00 <gnss_interface_setopt+0x20>
   28f26:	2d04      	cmp	r5, #4
   28f28:	d187      	bne.n	28e3a <gnss_interface_setopt+0x5a>
   28f2a:	2201      	movs	r2, #1
   28f2c:	681b      	ldr	r3, [r3, #0]
   28f2e:	f88d 2008 	strb.w	r2, [sp, #8]
   28f32:	f8cd 3009 	str.w	r3, [sp, #9]
   28f36:	6823      	ldr	r3, [r4, #0]
   28f38:	0c1b      	lsrs	r3, r3, #16
   28f3a:	041b      	lsls	r3, r3, #16
   28f3c:	f043 0303 	orr.w	r3, r3, #3
   28f40:	6023      	str	r3, [r4, #0]
   28f42:	f241 0004 	movw	r0, #4100	; 0x1004
   28f46:	e78e      	b.n	28e66 <gnss_interface_setopt+0x86>
   28f48:	6822      	ldr	r2, [r4, #0]
   28f4a:	b292      	uxth	r2, r2
   28f4c:	2a04      	cmp	r2, #4
   28f4e:	d004      	beq.n	28f5a <gnss_interface_setopt+0x17a>
   28f50:	6822      	ldr	r2, [r4, #0]
   28f52:	b292      	uxth	r2, r2
   28f54:	2a02      	cmp	r2, #2
   28f56:	f47f af53 	bne.w	28e00 <gnss_interface_setopt+0x20>
   28f5a:	2200      	movs	r2, #0
   28f5c:	2d04      	cmp	r5, #4
   28f5e:	f88d 2008 	strb.w	r2, [sp, #8]
   28f62:	f47f af6a 	bne.w	28e3a <gnss_interface_setopt+0x5a>
   28f66:	681b      	ldr	r3, [r3, #0]
   28f68:	f8cd 3009 	str.w	r3, [sp, #9]
   28f6c:	e7e9      	b.n	28f42 <gnss_interface_setopt+0x162>
   28f6e:	6823      	ldr	r3, [r4, #0]
   28f70:	b29b      	uxth	r3, r3
   28f72:	2b04      	cmp	r3, #4
   28f74:	f47f af44 	bne.w	28e00 <gnss_interface_setopt+0x20>
   28f78:	2302      	movs	r3, #2
   28f7a:	f88d 3008 	strb.w	r3, [sp, #8]
   28f7e:	2300      	movs	r3, #0
   28f80:	f88d 3009 	strb.w	r3, [sp, #9]
   28f84:	f88d 300a 	strb.w	r3, [sp, #10]
   28f88:	f88d 300b 	strb.w	r3, [sp, #11]
   28f8c:	f88d 300c 	strb.w	r3, [sp, #12]
   28f90:	e7d7      	b.n	28f42 <gnss_interface_setopt+0x162>
   28f92:	6823      	ldr	r3, [r4, #0]
   28f94:	b29b      	uxth	r3, r3
   28f96:	2b04      	cmp	r3, #4
   28f98:	f47f af32 	bne.w	28e00 <gnss_interface_setopt+0x20>
   28f9c:	2303      	movs	r3, #3
   28f9e:	e7ec      	b.n	28f7a <gnss_interface_setopt+0x19a>
   28fa0:	6823      	ldr	r3, [r4, #0]
   28fa2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   28fa6:	6023      	str	r3, [r4, #0]
   28fa8:	e72a      	b.n	28e00 <gnss_interface_setopt+0x20>
   28faa:	2e08      	cmp	r6, #8
   28fac:	d184      	bne.n	28eb8 <gnss_interface_setopt+0xd8>
   28fae:	4b07      	ldr	r3, [pc, #28]	; (28fcc <gnss_interface_setopt+0x1ec>)
   28fb0:	6818      	ldr	r0, [r3, #0]
   28fb2:	6803      	ldr	r3, [r0, #0]
   28fb4:	691b      	ldr	r3, [r3, #16]
   28fb6:	4798      	blx	r3
   28fb8:	e77e      	b.n	28eb8 <gnss_interface_setopt+0xd8>
   28fba:	bf00      	nop
   28fbc:	20016c8c 	.word	0x20016c8c
   28fc0:	49765443 	.word	0x49765443
   28fc4:	20014a14 	.word	0x20014a14
   28fc8:	20016c90 	.word	0x20016c90
   28fcc:	20016c94 	.word	0x20016c94

00028fd0 <gnss_interface_getopt>:
   28fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28fd4:	4d44      	ldr	r5, [pc, #272]	; (290e8 <gnss_interface_getopt+0x118>)
   28fd6:	b087      	sub	sp, #28
   28fd8:	682c      	ldr	r4, [r5, #0]
   28fda:	461e      	mov	r6, r3
   28fdc:	b2a4      	uxth	r4, r4
   28fde:	2c02      	cmp	r4, #2
   28fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28fe2:	d001      	beq.n	28fe8 <gnss_interface_getopt+0x18>
   28fe4:	200e      	movs	r0, #14
   28fe6:	e003      	b.n	28ff0 <gnss_interface_getopt+0x20>
   28fe8:	682c      	ldr	r4, [r5, #0]
   28fea:	03e7      	lsls	r7, r4, #15
   28fec:	d508      	bpl.n	29000 <gnss_interface_getopt+0x30>
   28fee:	2005      	movs	r0, #5
   28ff0:	f7f7 fdd4 	bl	20b9c <nrf_modem_os_errno_set>
   28ff4:	f04f 34ff 	mov.w	r4, #4294967295
   28ff8:	4620      	mov	r0, r4
   28ffa:	b007      	add	sp, #28
   28ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29000:	682c      	ldr	r4, [r5, #0]
   29002:	01e4      	lsls	r4, r4, #7
   29004:	d501      	bpl.n	2900a <gnss_interface_getopt+0x3a>
   29006:	2073      	movs	r0, #115	; 0x73
   29008:	e7f2      	b.n	28ff0 <gnss_interface_getopt+0x20>
   2900a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2900e:	d001      	beq.n	29014 <gnss_interface_getopt+0x44>
   29010:	202a      	movs	r0, #42	; 0x2a
   29012:	e7ed      	b.n	28ff0 <gnss_interface_getopt+0x20>
   29014:	4935      	ldr	r1, [pc, #212]	; (290ec <gnss_interface_getopt+0x11c>)
   29016:	4288      	cmp	r0, r1
   29018:	d001      	beq.n	2901e <gnss_interface_getopt+0x4e>
   2901a:	2009      	movs	r0, #9
   2901c:	e7e8      	b.n	28ff0 <gnss_interface_getopt+0x20>
   2901e:	b106      	cbz	r6, 29022 <gnss_interface_getopt+0x52>
   29020:	b90b      	cbnz	r3, 29026 <gnss_interface_getopt+0x56>
   29022:	2016      	movs	r0, #22
   29024:	e7e4      	b.n	28ff0 <gnss_interface_getopt+0x20>
   29026:	1e57      	subs	r7, r2, #1
   29028:	2f05      	cmp	r7, #5
   2902a:	d8fa      	bhi.n	29022 <gnss_interface_getopt+0x52>
   2902c:	e8df f007 	tbb	[pc, r7]
   29030:	03310303 	.word	0x03310303
   29034:	3131      	.short	0x3131
   29036:	681b      	ldr	r3, [r3, #0]
   29038:	2b02      	cmp	r3, #2
   2903a:	d1f2      	bne.n	29022 <gnss_interface_getopt+0x52>
   2903c:	682b      	ldr	r3, [r5, #0]
   2903e:	2214      	movs	r2, #20
   29040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   29044:	2100      	movs	r1, #0
   29046:	a801      	add	r0, sp, #4
   29048:	602b      	str	r3, [r5, #0]
   2904a:	f00e fbba 	bl	377c2 <memset>
   2904e:	2214      	movs	r2, #20
   29050:	f241 1002 	movw	r0, #4354	; 0x1102
   29054:	a901      	add	r1, sp, #4
   29056:	f7ff fcd7 	bl	28a08 <send_message>
   2905a:	4604      	mov	r4, r0
   2905c:	b9e0      	cbnz	r0, 29098 <gnss_interface_getopt+0xc8>
   2905e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 290f0 <gnss_interface_getopt+0x120>
   29062:	f8df 8088 	ldr.w	r8, [pc, #136]	; 290ec <gnss_interface_getopt+0x11c>
   29066:	4649      	mov	r1, r9
   29068:	4640      	mov	r0, r8
   2906a:	f7f7 fcdf 	bl	20a2c <nrf_modem_os_timedwait>
   2906e:	682b      	ldr	r3, [r5, #0]
   29070:	01d9      	lsls	r1, r3, #7
   29072:	d4f8      	bmi.n	29066 <gnss_interface_getopt+0x96>
   29074:	f8df 807c 	ldr.w	r8, [pc, #124]	; 290f4 <gnss_interface_getopt+0x124>
   29078:	f8d8 3000 	ldr.w	r3, [r8]
   2907c:	b1db      	cbz	r3, 290b6 <gnss_interface_getopt+0xe6>
   2907e:	682a      	ldr	r2, [r5, #0]
   29080:	0192      	lsls	r2, r2, #6
   29082:	d518      	bpl.n	290b6 <gnss_interface_getopt+0xe6>
   29084:	2f05      	cmp	r7, #5
   29086:	d828      	bhi.n	290da <gnss_interface_getopt+0x10a>
   29088:	e8df f007 	tbb	[pc, r7]
   2908c:	201d1a0b 	.word	0x201d1a0b
   29090:	2523      	.short	0x2523
   29092:	681b      	ldr	r3, [r3, #0]
   29094:	2b01      	cmp	r3, #1
   29096:	e7d0      	b.n	2903a <gnss_interface_getopt+0x6a>
   29098:	682b      	ldr	r3, [r5, #0]
   2909a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2909e:	602b      	str	r3, [r5, #0]
   290a0:	e7a0      	b.n	28fe4 <gnss_interface_getopt+0x14>
   290a2:	f8b3 300f 	ldrh.w	r3, [r3, #15]
   290a6:	8033      	strh	r3, [r6, #0]
   290a8:	f8d8 0000 	ldr.w	r0, [r8]
   290ac:	f00d f81b 	bl	360e6 <rpc_gnss_client_data_free>
   290b0:	2300      	movs	r3, #0
   290b2:	f8c8 3000 	str.w	r3, [r8]
   290b6:	682b      	ldr	r3, [r5, #0]
   290b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   290bc:	602b      	str	r3, [r5, #0]
   290be:	e79b      	b.n	28ff8 <gnss_interface_getopt+0x28>
   290c0:	f8b3 3011 	ldrh.w	r3, [r3, #17]
   290c4:	e7ef      	b.n	290a6 <gnss_interface_getopt+0xd6>
   290c6:	7b9b      	ldrb	r3, [r3, #14]
   290c8:	7033      	strb	r3, [r6, #0]
   290ca:	e7ed      	b.n	290a8 <gnss_interface_getopt+0xd8>
   290cc:	f8b3 3013 	ldrh.w	r3, [r3, #19]
   290d0:	e7e9      	b.n	290a6 <gnss_interface_getopt+0xd6>
   290d2:	7b1b      	ldrb	r3, [r3, #12]
   290d4:	e7f8      	b.n	290c8 <gnss_interface_getopt+0xf8>
   290d6:	7b5b      	ldrb	r3, [r3, #13]
   290d8:	e7f6      	b.n	290c8 <gnss_interface_getopt+0xf8>
   290da:	2016      	movs	r0, #22
   290dc:	f7f7 fd5e 	bl	20b9c <nrf_modem_os_errno_set>
   290e0:	f04f 34ff 	mov.w	r4, #4294967295
   290e4:	e7e0      	b.n	290a8 <gnss_interface_getopt+0xd8>
   290e6:	bf00      	nop
   290e8:	20016c8c 	.word	0x20016c8c
   290ec:	49765443 	.word	0x49765443
   290f0:	20014a14 	.word	0x20014a14
   290f4:	20016c90 	.word	0x20016c90

000290f8 <gnss_interface_init>:
   290f8:	b510      	push	{r4, lr}
   290fa:	2400      	movs	r4, #0
   290fc:	4a0a      	ldr	r2, [pc, #40]	; (29128 <gnss_interface_init+0x30>)
   290fe:	480b      	ldr	r0, [pc, #44]	; (2912c <gnss_interface_init+0x34>)
   29100:	6811      	ldr	r1, [r2, #0]
   29102:	4b0b      	ldr	r3, [pc, #44]	; (29130 <gnss_interface_init+0x38>)
   29104:	4001      	ands	r1, r0
   29106:	801c      	strh	r4, [r3, #0]
   29108:	4b0a      	ldr	r3, [pc, #40]	; (29134 <gnss_interface_init+0x3c>)
   2910a:	6011      	str	r1, [r2, #0]
   2910c:	601c      	str	r4, [r3, #0]
   2910e:	6813      	ldr	r3, [r2, #0]
   29110:	4003      	ands	r3, r0
   29112:	f043 0301 	orr.w	r3, r3, #1
   29116:	6013      	str	r3, [r2, #0]
   29118:	2201      	movs	r2, #1
   2911a:	4b07      	ldr	r3, [pc, #28]	; (29138 <gnss_interface_init+0x40>)
   2911c:	4807      	ldr	r0, [pc, #28]	; (2913c <gnss_interface_init+0x44>)
   2911e:	701a      	strb	r2, [r3, #0]
   29120:	f7fd fc00 	bl	26924 <rpc_gnss_client_set_handler>
   29124:	4620      	mov	r0, r4
   29126:	bd10      	pop	{r4, pc}
   29128:	20016c8c 	.word	0x20016c8c
   2912c:	ffff0000 	.word	0xffff0000
   29130:	2001ad68 	.word	0x2001ad68
   29134:	20016c90 	.word	0x20016c90
   29138:	2001dbc2 	.word	0x2001dbc2
   2913c:	00028889 	.word	0x00028889

00029140 <gnss_interface_open>:
   29140:	4b16      	ldr	r3, [pc, #88]	; (2919c <gnss_interface_open+0x5c>)
   29142:	4608      	mov	r0, r1
   29144:	781b      	ldrb	r3, [r3, #0]
   29146:	b510      	push	{r4, lr}
   29148:	b92b      	cbnz	r3, 29156 <gnss_interface_open+0x16>
   2914a:	2070      	movs	r0, #112	; 0x70
   2914c:	f7f7 fd26 	bl	20b9c <nrf_modem_os_errno_set>
   29150:	f04f 30ff 	mov.w	r0, #4294967295
   29154:	e01f      	b.n	29196 <gnss_interface_open+0x56>
   29156:	2902      	cmp	r1, #2
   29158:	d001      	beq.n	2915e <gnss_interface_open+0x1e>
   2915a:	2029      	movs	r0, #41	; 0x29
   2915c:	e7f6      	b.n	2914c <gnss_interface_open+0xc>
   2915e:	4c10      	ldr	r4, [pc, #64]	; (291a0 <gnss_interface_open+0x60>)
   29160:	6823      	ldr	r3, [r4, #0]
   29162:	b29b      	uxth	r3, r3
   29164:	2b01      	cmp	r3, #1
   29166:	d001      	beq.n	2916c <gnss_interface_open+0x2c>
   29168:	2005      	movs	r0, #5
   2916a:	e7ef      	b.n	2914c <gnss_interface_open+0xc>
   2916c:	6823      	ldr	r3, [r4, #0]
   2916e:	2200      	movs	r2, #0
   29170:	0c1b      	lsrs	r3, r3, #16
   29172:	041b      	lsls	r3, r3, #16
   29174:	f043 0302 	orr.w	r3, r3, #2
   29178:	490a      	ldr	r1, [pc, #40]	; (291a4 <gnss_interface_open+0x64>)
   2917a:	6023      	str	r3, [r4, #0]
   2917c:	f000 fd4a 	bl	29c14 <packet_handler_create>
   29180:	4a09      	ldr	r2, [pc, #36]	; (291a8 <gnss_interface_open+0x68>)
   29182:	6010      	str	r0, [r2, #0]
   29184:	b140      	cbz	r0, 29198 <gnss_interface_open+0x58>
   29186:	6822      	ldr	r2, [r4, #0]
   29188:	6803      	ldr	r3, [r0, #0]
   2918a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2918e:	681b      	ldr	r3, [r3, #0]
   29190:	6022      	str	r2, [r4, #0]
   29192:	4798      	blx	r3
   29194:	4805      	ldr	r0, [pc, #20]	; (291ac <gnss_interface_open+0x6c>)
   29196:	bd10      	pop	{r4, pc}
   29198:	200e      	movs	r0, #14
   2919a:	e7d7      	b.n	2914c <gnss_interface_open+0xc>
   2919c:	2001dbc2 	.word	0x2001dbc2
   291a0:	20016c8c 	.word	0x20016c8c
   291a4:	00036ce7 	.word	0x00036ce7
   291a8:	20016c94 	.word	0x20016c94
   291ac:	49765443 	.word	0x49765443

000291b0 <gnss_interface_close>:
   291b0:	b530      	push	{r4, r5, lr}
   291b2:	4b14      	ldr	r3, [pc, #80]	; (29204 <gnss_interface_close+0x54>)
   291b4:	b085      	sub	sp, #20
   291b6:	4298      	cmp	r0, r3
   291b8:	d006      	beq.n	291c8 <gnss_interface_close+0x18>
   291ba:	2009      	movs	r0, #9
   291bc:	f7f7 fcee 	bl	20b9c <nrf_modem_os_errno_set>
   291c0:	f04f 30ff 	mov.w	r0, #4294967295
   291c4:	b005      	add	sp, #20
   291c6:	bd30      	pop	{r4, r5, pc}
   291c8:	4c0f      	ldr	r4, [pc, #60]	; (29208 <gnss_interface_close+0x58>)
   291ca:	6823      	ldr	r3, [r4, #0]
   291cc:	b29b      	uxth	r3, r3
   291ce:	2b04      	cmp	r3, #4
   291d0:	d108      	bne.n	291e4 <gnss_interface_close+0x34>
   291d2:	2200      	movs	r2, #0
   291d4:	9300      	str	r3, [sp, #0]
   291d6:	9203      	str	r2, [sp, #12]
   291d8:	f44f 7101 	mov.w	r1, #516	; 0x204
   291dc:	2208      	movs	r2, #8
   291de:	ab03      	add	r3, sp, #12
   291e0:	f00e f870 	bl	372c4 <nrf_setsockopt>
   291e4:	4d09      	ldr	r5, [pc, #36]	; (2920c <gnss_interface_close+0x5c>)
   291e6:	6828      	ldr	r0, [r5, #0]
   291e8:	b118      	cbz	r0, 291f2 <gnss_interface_close+0x42>
   291ea:	f00d ff23 	bl	37034 <packet_handler_delete>
   291ee:	2300      	movs	r3, #0
   291f0:	602b      	str	r3, [r5, #0]
   291f2:	6823      	ldr	r3, [r4, #0]
   291f4:	2000      	movs	r0, #0
   291f6:	0c1b      	lsrs	r3, r3, #16
   291f8:	041b      	lsls	r3, r3, #16
   291fa:	f043 0301 	orr.w	r3, r3, #1
   291fe:	6023      	str	r3, [r4, #0]
   29200:	e7e0      	b.n	291c4 <gnss_interface_close+0x14>
   29202:	bf00      	nop
   29204:	49765443 	.word	0x49765443
   29208:	20016c8c 	.word	0x20016c8c
   2920c:	20016c94 	.word	0x20016c94

00029210 <handle_verify_and_covert>:
   29210:	4a0b      	ldr	r2, [pc, #44]	; (29240 <handle_verify_and_covert+0x30>)
   29212:	0c03      	lsrs	r3, r0, #16
   29214:	041b      	lsls	r3, r3, #16
   29216:	4293      	cmp	r3, r2
   29218:	d10f      	bne.n	2923a <handle_verify_and_covert+0x2a>
   2921a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   2921e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   29222:	2809      	cmp	r0, #9
   29224:	dc09      	bgt.n	2923a <handle_verify_and_covert+0x2a>
   29226:	4b07      	ldr	r3, [pc, #28]	; (29244 <handle_verify_and_covert+0x34>)
   29228:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2922c:	b12b      	cbz	r3, 2923a <handle_verify_and_covert+0x2a>
   2922e:	689b      	ldr	r3, [r3, #8]
   29230:	2b00      	cmp	r3, #0
   29232:	bf08      	it	eq
   29234:	f06f 0008 	mvneq.w	r0, #8
   29238:	4770      	bx	lr
   2923a:	f06f 0008 	mvn.w	r0, #8
   2923e:	4770      	bx	lr
   29240:	789a0000 	.word	0x789a0000
   29244:	20016c9c 	.word	0x20016c9c

00029248 <command_write>:
   29248:	4b0c      	ldr	r3, [pc, #48]	; (2927c <command_write+0x34>)
   2924a:	b513      	push	{r0, r1, r4, lr}
   2924c:	480c      	ldr	r0, [pc, #48]	; (29280 <command_write+0x38>)
   2924e:	681c      	ldr	r4, [r3, #0]
   29250:	f7e8 f956 	bl	11500 <strlen>
   29254:	2300      	movs	r3, #0
   29256:	4602      	mov	r2, r0
   29258:	e9cd 3300 	strd	r3, r3, [sp]
   2925c:	4908      	ldr	r1, [pc, #32]	; (29280 <command_write+0x38>)
   2925e:	4620      	mov	r0, r4
   29260:	f00d fc35 	bl	36ace <at_interface_write>
   29264:	4604      	mov	r4, r0
   29266:	4806      	ldr	r0, [pc, #24]	; (29280 <command_write+0x38>)
   29268:	f7e8 f94a 	bl	11500 <strlen>
   2926c:	42a0      	cmp	r0, r4
   2926e:	bf14      	ite	ne
   29270:	f06f 0004 	mvnne.w	r0, #4
   29274:	2000      	moveq	r0, #0
   29276:	b002      	add	sp, #8
   29278:	bd10      	pop	{r4, pc}
   2927a:	bf00      	nop
   2927c:	20016c98 	.word	0x20016c98
   29280:	2001dbc4 	.word	0x2001dbc4

00029284 <event_wait>:
   29284:	2300      	movs	r3, #0
   29286:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2928a:	e9cd 3300 	strd	r3, r3, [sp]
   2928e:	4606      	mov	r6, r0
   29290:	4818      	ldr	r0, [pc, #96]	; (292f4 <event_wait+0x70>)
   29292:	460d      	mov	r5, r1
   29294:	f44f 7280 	mov.w	r2, #256	; 0x100
   29298:	4917      	ldr	r1, [pc, #92]	; (292f8 <event_wait+0x74>)
   2929a:	6800      	ldr	r0, [r0, #0]
   2929c:	f00d fc81 	bl	36ba2 <at_interface_read>
   292a0:	4c16      	ldr	r4, [pc, #88]	; (292fc <event_wait+0x78>)
   292a2:	4607      	mov	r7, r0
   292a4:	f854 8035 	ldr.w	r8, [r4, r5, lsl #3]
   292a8:	4640      	mov	r0, r8
   292aa:	f7e8 f929 	bl	11500 <strlen>
   292ae:	4287      	cmp	r7, r0
   292b0:	4602      	mov	r2, r0
   292b2:	db0d      	blt.n	292d0 <event_wait+0x4c>
   292b4:	4640      	mov	r0, r8
   292b6:	4910      	ldr	r1, [pc, #64]	; (292f8 <event_wait+0x74>)
   292b8:	f00e fbb0 	bl	37a1c <strncmp>
   292bc:	b940      	cbnz	r0, 292d0 <event_wait+0x4c>
   292be:	4630      	mov	r0, r6
   292c0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   292c4:	6863      	ldr	r3, [r4, #4]
   292c6:	490c      	ldr	r1, [pc, #48]	; (292f8 <event_wait+0x74>)
   292c8:	b002      	add	sp, #8
   292ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   292ce:	4718      	bx	r3
   292d0:	480b      	ldr	r0, [pc, #44]	; (29300 <event_wait+0x7c>)
   292d2:	f7e8 f915 	bl	11500 <strlen>
   292d6:	4908      	ldr	r1, [pc, #32]	; (292f8 <event_wait+0x74>)
   292d8:	4602      	mov	r2, r0
   292da:	4809      	ldr	r0, [pc, #36]	; (29300 <event_wait+0x7c>)
   292dc:	f00e fb9e 	bl	37a1c <strncmp>
   292e0:	2800      	cmp	r0, #0
   292e2:	bf14      	ite	ne
   292e4:	f06f 0004 	mvnne.w	r0, #4
   292e8:	f06f 0007 	mvneq.w	r0, #7
   292ec:	b002      	add	sp, #8
   292ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   292f2:	bf00      	nop
   292f4:	20016c98 	.word	0x20016c98
   292f8:	2001dbc4 	.word	0x2001dbc4
   292fc:	00039488 	.word	0x00039488
   29300:	0004041c 	.word	0x0004041c

00029304 <pdn_state_get_parser>:
   29304:	2300      	movs	r3, #0
   29306:	b530      	push	{r4, r5, lr}
   29308:	4605      	mov	r5, r0
   2930a:	460c      	mov	r4, r1
   2930c:	b085      	sub	sp, #20
   2930e:	4608      	mov	r0, r1
   29310:	e9cd 3300 	strd	r3, r3, [sp]
   29314:	e9cd 3302 	strd	r3, r3, [sp, #8]
   29318:	f00d fcf3 	bl	36d02 <spaces_remove>
   2931c:	4b08      	ldr	r3, [pc, #32]	; (29340 <pdn_state_get_parser+0x3c>)
   2931e:	4a09      	ldr	r2, [pc, #36]	; (29344 <pdn_state_get_parser+0x40>)
   29320:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   29324:	2110      	movs	r1, #16
   29326:	681b      	ldr	r3, [r3, #0]
   29328:	4668      	mov	r0, sp
   2932a:	f005 fc31 	bl	2eb90 <sniprintf>
   2932e:	4669      	mov	r1, sp
   29330:	4620      	mov	r0, r4
   29332:	f00e fba5 	bl	37a80 <strstr>
   29336:	3800      	subs	r0, #0
   29338:	bf18      	it	ne
   2933a:	2001      	movne	r0, #1
   2933c:	b005      	add	sp, #20
   2933e:	bd30      	pop	{r4, r5, pc}
   29340:	20016c9c 	.word	0x20016c9c
   29344:	00040422 	.word	0x00040422

00029348 <pdn_id_get_parser>:
   29348:	b510      	push	{r4, lr}
   2934a:	4604      	mov	r4, r0
   2934c:	4608      	mov	r0, r1
   2934e:	f00d fcd8 	bl	36d02 <spaces_remove>
   29352:	213a      	movs	r1, #58	; 0x3a
   29354:	f00e fb4d 	bl	379f2 <strchr>
   29358:	b130      	cbz	r0, 29368 <pdn_id_get_parser+0x20>
   2935a:	3001      	adds	r0, #1
   2935c:	f00e f9f1 	bl	37742 <atoi>
   29360:	4b02      	ldr	r3, [pc, #8]	; (2936c <pdn_id_get_parser+0x24>)
   29362:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   29366:	6058      	str	r0, [r3, #4]
   29368:	2000      	movs	r0, #0
   2936a:	bd10      	pop	{r4, pc}
   2936c:	20016c9c 	.word	0x20016c9c

00029370 <context_create_parser>:
   29370:	b510      	push	{r4, lr}
   29372:	4604      	mov	r4, r0
   29374:	4608      	mov	r0, r1
   29376:	f00d fcc4 	bl	36d02 <spaces_remove>
   2937a:	213a      	movs	r1, #58	; 0x3a
   2937c:	f00e fb39 	bl	379f2 <strchr>
   29380:	b130      	cbz	r0, 29390 <context_create_parser+0x20>
   29382:	4b04      	ldr	r3, [pc, #16]	; (29394 <context_create_parser+0x24>)
   29384:	3001      	adds	r0, #1
   29386:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   2938a:	f00e f9da 	bl	37742 <atoi>
   2938e:	6020      	str	r0, [r4, #0]
   29390:	2000      	movs	r0, #0
   29392:	bd10      	pop	{r4, pc}
   29394:	20016c9c 	.word	0x20016c9c

00029398 <connection_free>:
   29398:	b538      	push	{r3, r4, r5, lr}
   2939a:	4d05      	ldr	r5, [pc, #20]	; (293b0 <connection_free+0x18>)
   2939c:	4604      	mov	r4, r0
   2939e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   293a2:	f7f7 fdb5 	bl	20f10 <nrf_modem_os_free>
   293a6:	2300      	movs	r3, #0
   293a8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   293ac:	bd38      	pop	{r3, r4, r5, pc}
   293ae:	bf00      	nop
   293b0:	20016c9c 	.word	0x20016c9c

000293b4 <pdn_id_get>:
   293b4:	b538      	push	{r3, r4, r5, lr}
   293b6:	4d0e      	ldr	r5, [pc, #56]	; (293f0 <pdn_id_get+0x3c>)
   293b8:	4604      	mov	r4, r0
   293ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   293be:	4b0d      	ldr	r3, [pc, #52]	; (293f4 <pdn_id_get+0x40>)
   293c0:	4a0d      	ldr	r2, [pc, #52]	; (293f8 <pdn_id_get+0x44>)
   293c2:	4628      	mov	r0, r5
   293c4:	f005 fbe4 	bl	2eb90 <sniprintf>
   293c8:	4b0c      	ldr	r3, [pc, #48]	; (293fc <pdn_id_get+0x48>)
   293ca:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   293ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   293d2:	4a0b      	ldr	r2, [pc, #44]	; (29400 <pdn_id_get+0x4c>)
   293d4:	681b      	ldr	r3, [r3, #0]
   293d6:	4428      	add	r0, r5
   293d8:	f005 fbda 	bl	2eb90 <sniprintf>
   293dc:	f7ff ff34 	bl	29248 <command_write>
   293e0:	b928      	cbnz	r0, 293ee <pdn_id_get+0x3a>
   293e2:	4620      	mov	r0, r4
   293e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   293e8:	2102      	movs	r1, #2
   293ea:	f7ff bf4b 	b.w	29284 <event_wait>
   293ee:	bd38      	pop	{r3, r4, r5, pc}
   293f0:	2001dbc4 	.word	0x2001dbc4
   293f4:	0004042e 	.word	0x0004042e
   293f8:	0003de32 	.word	0x0003de32
   293fc:	20016c9c 	.word	0x20016c9c
   29400:	00039c57 	.word	0x00039c57

00029404 <pdn_interface_init>:
   29404:	b538      	push	{r3, r4, r5, lr}
   29406:	f04f 34ff 	mov.w	r4, #4294967295
   2940a:	4d0b      	ldr	r5, [pc, #44]	; (29438 <pdn_interface_init+0x34>)
   2940c:	2228      	movs	r2, #40	; 0x28
   2940e:	2100      	movs	r1, #0
   29410:	480a      	ldr	r0, [pc, #40]	; (2943c <pdn_interface_init+0x38>)
   29412:	602c      	str	r4, [r5, #0]
   29414:	f00e f9d5 	bl	377c2 <memset>
   29418:	f240 2201 	movw	r2, #513	; 0x201
   2941c:	2102      	movs	r1, #2
   2941e:	2066      	movs	r0, #102	; 0x66
   29420:	f7ff f850 	bl	284c4 <at_interface_open>
   29424:	2800      	cmp	r0, #0
   29426:	bfa4      	itt	ge
   29428:	2201      	movge	r2, #1
   2942a:	4b05      	ldrge	r3, [pc, #20]	; (29440 <pdn_interface_init+0x3c>)
   2942c:	6028      	str	r0, [r5, #0]
   2942e:	bfa6      	itte	ge
   29430:	701a      	strbge	r2, [r3, #0]
   29432:	2000      	movge	r0, #0
   29434:	4620      	movlt	r0, r4
   29436:	bd38      	pop	{r3, r4, r5, pc}
   29438:	20016c98 	.word	0x20016c98
   2943c:	20016c9c 	.word	0x20016c9c
   29440:	2001dbc3 	.word	0x2001dbc3

00029444 <pdn_interface_open>:
   29444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29446:	4b28      	ldr	r3, [pc, #160]	; (294e8 <pdn_interface_open+0xa4>)
   29448:	781b      	ldrb	r3, [r3, #0]
   2944a:	b92b      	cbnz	r3, 29458 <pdn_interface_open+0x14>
   2944c:	2070      	movs	r0, #112	; 0x70
   2944e:	f7f7 fba5 	bl	20b9c <nrf_modem_os_errno_set>
   29452:	f04f 30ff 	mov.w	r0, #4294967295
   29456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29458:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2945c:	d141      	bne.n	294e2 <pdn_interface_open+0x9e>
   2945e:	4b23      	ldr	r3, [pc, #140]	; (294ec <pdn_interface_open+0xa8>)
   29460:	2500      	movs	r5, #0
   29462:	461e      	mov	r6, r3
   29464:	f853 4b04 	ldr.w	r4, [r3], #4
   29468:	bb24      	cbnz	r4, 294b4 <pdn_interface_open+0x70>
   2946a:	2020      	movs	r0, #32
   2946c:	f7f7 fd48 	bl	20f00 <nrf_modem_os_alloc>
   29470:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
   29474:	b308      	cbz	r0, 294ba <pdn_interface_open+0x76>
   29476:	4621      	mov	r1, r4
   29478:	2220      	movs	r2, #32
   2947a:	f00e f9a2 	bl	377c2 <memset>
   2947e:	2203      	movs	r2, #3
   29480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   29484:	2701      	movs	r7, #1
   29486:	60da      	str	r2, [r3, #12]
   29488:	f04f 32ff 	mov.w	r2, #4294967295
   2948c:	f44f 7180 	mov.w	r1, #256	; 0x100
   29490:	605a      	str	r2, [r3, #4]
   29492:	609f      	str	r7, [r3, #8]
   29494:	4a16      	ldr	r2, [pc, #88]	; (294f0 <pdn_interface_open+0xac>)
   29496:	4b17      	ldr	r3, [pc, #92]	; (294f4 <pdn_interface_open+0xb0>)
   29498:	4817      	ldr	r0, [pc, #92]	; (294f8 <pdn_interface_open+0xb4>)
   2949a:	f005 fb79 	bl	2eb90 <sniprintf>
   2949e:	f7ff fed3 	bl	29248 <command_write>
   294a2:	4604      	mov	r4, r0
   294a4:	b160      	cbz	r0, 294c0 <pdn_interface_open+0x7c>
   294a6:	4628      	mov	r0, r5
   294a8:	f7ff ff76 	bl	29398 <connection_free>
   294ac:	2c00      	cmp	r4, #0
   294ae:	da13      	bge.n	294d8 <pdn_interface_open+0x94>
   294b0:	4260      	negs	r0, r4
   294b2:	e7cc      	b.n	2944e <pdn_interface_open+0xa>
   294b4:	3501      	adds	r5, #1
   294b6:	2d0a      	cmp	r5, #10
   294b8:	d1d4      	bne.n	29464 <pdn_interface_open+0x20>
   294ba:	f06f 040b 	mvn.w	r4, #11
   294be:	e7f7      	b.n	294b0 <pdn_interface_open+0x6c>
   294c0:	4639      	mov	r1, r7
   294c2:	4628      	mov	r0, r5
   294c4:	f7ff fede 	bl	29284 <event_wait>
   294c8:	4604      	mov	r4, r0
   294ca:	2800      	cmp	r0, #0
   294cc:	d1eb      	bne.n	294a6 <pdn_interface_open+0x62>
   294ce:	2202      	movs	r2, #2
   294d0:	462c      	mov	r4, r5
   294d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   294d6:	609a      	str	r2, [r3, #8]
   294d8:	f044 40f1 	orr.w	r0, r4, #2021654528	; 0x78800000
   294dc:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   294e0:	e7b9      	b.n	29456 <pdn_interface_open+0x12>
   294e2:	2029      	movs	r0, #41	; 0x29
   294e4:	e7b3      	b.n	2944e <pdn_interface_open+0xa>
   294e6:	bf00      	nop
   294e8:	2001dbc3 	.word	0x2001dbc3
   294ec:	20016c9c 	.word	0x20016c9c
   294f0:	0003de32 	.word	0x0003de32
   294f4:	0004043c 	.word	0x0004043c
   294f8:	2001dbc4 	.word	0x2001dbc4

000294fc <pdn_interface_connect>:
   294fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29500:	4690      	mov	r8, r2
   29502:	4689      	mov	r9, r1
   29504:	b109      	cbz	r1, 2950a <pdn_interface_connect+0xe>
   29506:	2a64      	cmp	r2, #100	; 0x64
   29508:	d905      	bls.n	29516 <pdn_interface_connect+0x1a>
   2950a:	2016      	movs	r0, #22
   2950c:	f7f7 fb46 	bl	20b9c <nrf_modem_os_errno_set>
   29510:	f04f 30ff 	mov.w	r0, #4294967295
   29514:	e0f1      	b.n	296fa <pdn_interface_connect+0x1fe>
   29516:	f7ff fe7b 	bl	29210 <handle_verify_and_covert>
   2951a:	1e04      	subs	r4, r0, #0
   2951c:	da01      	bge.n	29522 <pdn_interface_connect+0x26>
   2951e:	4260      	negs	r0, r4
   29520:	e7f4      	b.n	2950c <pdn_interface_connect+0x10>
   29522:	4e78      	ldr	r6, [pc, #480]	; (29704 <pdn_interface_connect+0x208>)
   29524:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   29528:	689b      	ldr	r3, [r3, #8]
   2952a:	2b02      	cmp	r3, #2
   2952c:	d001      	beq.n	29532 <pdn_interface_connect+0x36>
   2952e:	2009      	movs	r0, #9
   29530:	e7ec      	b.n	2950c <pdn_interface_connect+0x10>
   29532:	4f75      	ldr	r7, [pc, #468]	; (29708 <pdn_interface_connect+0x20c>)
   29534:	f44f 7180 	mov.w	r1, #256	; 0x100
   29538:	4b74      	ldr	r3, [pc, #464]	; (2970c <pdn_interface_connect+0x210>)
   2953a:	4a75      	ldr	r2, [pc, #468]	; (29710 <pdn_interface_connect+0x214>)
   2953c:	4638      	mov	r0, r7
   2953e:	f005 fb27 	bl	2eb90 <sniprintf>
   29542:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   29546:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2954a:	4605      	mov	r5, r0
   2954c:	681b      	ldr	r3, [r3, #0]
   2954e:	4a71      	ldr	r2, [pc, #452]	; (29714 <pdn_interface_connect+0x218>)
   29550:	1838      	adds	r0, r7, r0
   29552:	f005 fb1d 	bl	2eb90 <sniprintf>
   29556:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   2955a:	4405      	add	r5, r0
   2955c:	68db      	ldr	r3, [r3, #12]
   2955e:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   29562:	f003 0203 	and.w	r2, r3, #3
   29566:	2a03      	cmp	r2, #3
   29568:	eb07 0005 	add.w	r0, r7, r5
   2956c:	d15b      	bne.n	29626 <pdn_interface_connect+0x12a>
   2956e:	4b6a      	ldr	r3, [pc, #424]	; (29718 <pdn_interface_connect+0x21c>)
   29570:	4a6a      	ldr	r2, [pc, #424]	; (2971c <pdn_interface_connect+0x220>)
   29572:	f005 fb0d 	bl	2eb90 <sniprintf>
   29576:	f108 0303 	add.w	r3, r8, #3
   2957a:	4405      	add	r5, r0
   2957c:	442b      	add	r3, r5
   2957e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   29582:	f300 80bc 	bgt.w	296fe <pdn_interface_connect+0x202>
   29586:	f04f 0b22 	mov.w	fp, #34	; 0x22
   2958a:	f105 0a01 	add.w	sl, r5, #1
   2958e:	4642      	mov	r2, r8
   29590:	4649      	mov	r1, r9
   29592:	eb07 000a 	add.w	r0, r7, sl
   29596:	f807 b005 	strb.w	fp, [r7, r5]
   2959a:	f00e fa51 	bl	37a40 <strncpy>
   2959e:	eb08 030a 	add.w	r3, r8, sl
   295a2:	18fa      	adds	r2, r7, r3
   295a4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   295a8:	b902      	cbnz	r2, 295ac <pdn_interface_connect+0xb0>
   295aa:	3b01      	subs	r3, #1
   295ac:	2200      	movs	r2, #0
   295ae:	f807 b003 	strb.w	fp, [r7, r3]
   295b2:	443b      	add	r3, r7
   295b4:	705a      	strb	r2, [r3, #1]
   295b6:	f7ff fe47 	bl	29248 <command_write>
   295ba:	2800      	cmp	r0, #0
   295bc:	d17b      	bne.n	296b6 <pdn_interface_connect+0x1ba>
   295be:	4601      	mov	r1, r0
   295c0:	4620      	mov	r0, r4
   295c2:	f7ff fe5f 	bl	29284 <event_wait>
   295c6:	2800      	cmp	r0, #0
   295c8:	d175      	bne.n	296b6 <pdn_interface_connect+0x1ba>
   295ca:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   295ce:	7c1b      	ldrb	r3, [r3, #16]
   295d0:	2b00      	cmp	r3, #0
   295d2:	d133      	bne.n	2963c <pdn_interface_connect+0x140>
   295d4:	f44f 7180 	mov.w	r1, #256	; 0x100
   295d8:	4b51      	ldr	r3, [pc, #324]	; (29720 <pdn_interface_connect+0x224>)
   295da:	4a4d      	ldr	r2, [pc, #308]	; (29710 <pdn_interface_connect+0x214>)
   295dc:	484a      	ldr	r0, [pc, #296]	; (29708 <pdn_interface_connect+0x20c>)
   295de:	f005 fad7 	bl	2eb90 <sniprintf>
   295e2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   295e6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   295ea:	681b      	ldr	r3, [r3, #0]
   295ec:	4a4d      	ldr	r2, [pc, #308]	; (29724 <pdn_interface_connect+0x228>)
   295ee:	4438      	add	r0, r7
   295f0:	f005 face 	bl	2eb90 <sniprintf>
   295f4:	f7ff fe28 	bl	29248 <command_write>
   295f8:	2800      	cmp	r0, #0
   295fa:	d15c      	bne.n	296b6 <pdn_interface_connect+0x1ba>
   295fc:	4601      	mov	r1, r0
   295fe:	4620      	mov	r0, r4
   29600:	f7ff fe40 	bl	29284 <event_wait>
   29604:	2800      	cmp	r0, #0
   29606:	d156      	bne.n	296b6 <pdn_interface_connect+0x1ba>
   29608:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   2960c:	f108 0320 	add.w	r3, r8, #32
   29610:	6950      	ldr	r0, [r2, #20]
   29612:	4403      	add	r3, r0
   29614:	6990      	ldr	r0, [r2, #24]
   29616:	4418      	add	r0, r3
   29618:	f7f7 fc72 	bl	20f00 <nrf_modem_os_alloc>
   2961c:	4605      	mov	r5, r0
   2961e:	2800      	cmp	r0, #0
   29620:	d14b      	bne.n	296ba <pdn_interface_connect+0x1be>
   29622:	200c      	movs	r0, #12
   29624:	e772      	b.n	2950c <pdn_interface_connect+0x10>
   29626:	f003 0205 	and.w	r2, r3, #5
   2962a:	2a05      	cmp	r2, #5
   2962c:	d101      	bne.n	29632 <pdn_interface_connect+0x136>
   2962e:	4b3e      	ldr	r3, [pc, #248]	; (29728 <pdn_interface_connect+0x22c>)
   29630:	e79e      	b.n	29570 <pdn_interface_connect+0x74>
   29632:	079b      	lsls	r3, r3, #30
   29634:	bf4c      	ite	mi
   29636:	4b3d      	ldrmi	r3, [pc, #244]	; (2972c <pdn_interface_connect+0x230>)
   29638:	4b3d      	ldrpl	r3, [pc, #244]	; (29730 <pdn_interface_connect+0x234>)
   2963a:	e799      	b.n	29570 <pdn_interface_connect+0x74>
   2963c:	f44f 7180 	mov.w	r1, #256	; 0x100
   29640:	4b3c      	ldr	r3, [pc, #240]	; (29734 <pdn_interface_connect+0x238>)
   29642:	4a33      	ldr	r2, [pc, #204]	; (29710 <pdn_interface_connect+0x214>)
   29644:	4830      	ldr	r0, [pc, #192]	; (29708 <pdn_interface_connect+0x20c>)
   29646:	f005 faa3 	bl	2eb90 <sniprintf>
   2964a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   2964e:	4a31      	ldr	r2, [pc, #196]	; (29714 <pdn_interface_connect+0x218>)
   29650:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   29654:	4605      	mov	r5, r0
   29656:	681b      	ldr	r3, [r3, #0]
   29658:	1838      	adds	r0, r7, r0
   2965a:	f005 fa99 	bl	2eb90 <sniprintf>
   2965e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   29662:	4405      	add	r5, r0
   29664:	7c1b      	ldrb	r3, [r3, #16]
   29666:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   2966a:	2b01      	cmp	r3, #1
   2966c:	bf0c      	ite	eq
   2966e:	4a32      	ldreq	r2, [pc, #200]	; (29738 <pdn_interface_connect+0x23c>)
   29670:	4a32      	ldrne	r2, [pc, #200]	; (2973c <pdn_interface_connect+0x240>)
   29672:	1978      	adds	r0, r7, r5
   29674:	f005 fa8c 	bl	2eb90 <sniprintf>
   29678:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   2967c:	4405      	add	r5, r0
   2967e:	4a27      	ldr	r2, [pc, #156]	; (2971c <pdn_interface_connect+0x220>)
   29680:	3320      	adds	r3, #32
   29682:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   29686:	1978      	adds	r0, r7, r5
   29688:	f005 fa82 	bl	2eb90 <sniprintf>
   2968c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   29690:	4428      	add	r0, r5
   29692:	695a      	ldr	r2, [r3, #20]
   29694:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   29698:	3220      	adds	r2, #32
   2969a:	4413      	add	r3, r2
   2969c:	4438      	add	r0, r7
   2969e:	4a28      	ldr	r2, [pc, #160]	; (29740 <pdn_interface_connect+0x244>)
   296a0:	f005 fa76 	bl	2eb90 <sniprintf>
   296a4:	f7ff fdd0 	bl	29248 <command_write>
   296a8:	b928      	cbnz	r0, 296b6 <pdn_interface_connect+0x1ba>
   296aa:	4601      	mov	r1, r0
   296ac:	4620      	mov	r0, r4
   296ae:	f7ff fde9 	bl	29284 <event_wait>
   296b2:	2800      	cmp	r0, #0
   296b4:	d08e      	beq.n	295d4 <pdn_interface_connect+0xd8>
   296b6:	4240      	negs	r0, r0
   296b8:	e728      	b.n	2950c <pdn_interface_connect+0x10>
   296ba:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   296be:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   296c2:	441a      	add	r2, r3
   296c4:	3220      	adds	r2, #32
   296c6:	f00e f85c 	bl	37782 <memcpy>
   296ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   296ce:	f7f7 fc1f 	bl	20f10 <nrf_modem_os_free>
   296d2:	2303      	movs	r3, #3
   296d4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
   296d8:	60ab      	str	r3, [r5, #8]
   296da:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   296de:	4403      	add	r3, r0
   296e0:	3320      	adds	r3, #32
   296e2:	4642      	mov	r2, r8
   296e4:	4649      	mov	r1, r9
   296e6:	f8c5 801c 	str.w	r8, [r5, #28]
   296ea:	18e8      	adds	r0, r5, r3
   296ec:	f00e f849 	bl	37782 <memcpy>
   296f0:	4620      	mov	r0, r4
   296f2:	f7ff fe5f 	bl	293b4 <pdn_id_get>
   296f6:	2800      	cmp	r0, #0
   296f8:	d1dd      	bne.n	296b6 <pdn_interface_connect+0x1ba>
   296fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296fe:	f04f 30ff 	mov.w	r0, #4294967295
   29702:	e7d8      	b.n	296b6 <pdn_interface_connect+0x1ba>
   29704:	20016c9c 	.word	0x20016c9c
   29708:	2001dbc4 	.word	0x2001dbc4
   2970c:	00040448 	.word	0x00040448
   29710:	0003de32 	.word	0x0003de32
   29714:	00040454 	.word	0x00040454
   29718:	00040458 	.word	0x00040458
   2971c:	0004045f 	.word	0x0004045f
   29720:	00040471 	.word	0x00040471
   29724:	00039c57 	.word	0x00039c57
   29728:	00040465 	.word	0x00040465
   2972c:	0004046c 	.word	0x0004046c
   29730:	00040469 	.word	0x00040469
   29734:	0004047d 	.word	0x0004047d
   29738:	0004047a 	.word	0x0004047a
   2973c:	00040488 	.word	0x00040488
   29740:	0003e056 	.word	0x0003e056

00029744 <pdn_interface_close>:
   29744:	b570      	push	{r4, r5, r6, lr}
   29746:	f7ff fd63 	bl	29210 <handle_verify_and_covert>
   2974a:	1e04      	subs	r4, r0, #0
   2974c:	da05      	bge.n	2975a <pdn_interface_close+0x16>
   2974e:	4260      	negs	r0, r4
   29750:	f7f7 fa24 	bl	20b9c <nrf_modem_os_errno_set>
   29754:	f04f 30ff 	mov.w	r0, #4294967295
   29758:	bd70      	pop	{r4, r5, r6, pc}
   2975a:	4d22      	ldr	r5, [pc, #136]	; (297e4 <pdn_interface_close+0xa0>)
   2975c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   29760:	689b      	ldr	r3, [r3, #8]
   29762:	2b03      	cmp	r3, #3
   29764:	d11b      	bne.n	2979e <pdn_interface_close+0x5a>
   29766:	4e20      	ldr	r6, [pc, #128]	; (297e8 <pdn_interface_close+0xa4>)
   29768:	f44f 7180 	mov.w	r1, #256	; 0x100
   2976c:	4b1f      	ldr	r3, [pc, #124]	; (297ec <pdn_interface_close+0xa8>)
   2976e:	4a20      	ldr	r2, [pc, #128]	; (297f0 <pdn_interface_close+0xac>)
   29770:	4630      	mov	r0, r6
   29772:	f005 fa0d 	bl	2eb90 <sniprintf>
   29776:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2977a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2977e:	681b      	ldr	r3, [r3, #0]
   29780:	4a1c      	ldr	r2, [pc, #112]	; (297f4 <pdn_interface_close+0xb0>)
   29782:	4430      	add	r0, r6
   29784:	f005 fa04 	bl	2eb90 <sniprintf>
   29788:	f7ff fd5e 	bl	29248 <command_write>
   2978c:	4601      	mov	r1, r0
   2978e:	b910      	cbnz	r0, 29796 <pdn_interface_close+0x52>
   29790:	4620      	mov	r0, r4
   29792:	f7ff fd77 	bl	29284 <event_wait>
   29796:	2202      	movs	r2, #2
   29798:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2979c:	609a      	str	r2, [r3, #8]
   2979e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   297a2:	689b      	ldr	r3, [r3, #8]
   297a4:	2b02      	cmp	r3, #2
   297a6:	d117      	bne.n	297d8 <pdn_interface_close+0x94>
   297a8:	4e0f      	ldr	r6, [pc, #60]	; (297e8 <pdn_interface_close+0xa4>)
   297aa:	f44f 7180 	mov.w	r1, #256	; 0x100
   297ae:	4b12      	ldr	r3, [pc, #72]	; (297f8 <pdn_interface_close+0xb4>)
   297b0:	4a0f      	ldr	r2, [pc, #60]	; (297f0 <pdn_interface_close+0xac>)
   297b2:	4630      	mov	r0, r6
   297b4:	f005 f9ec 	bl	2eb90 <sniprintf>
   297b8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   297bc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   297c0:	681b      	ldr	r3, [r3, #0]
   297c2:	4a0c      	ldr	r2, [pc, #48]	; (297f4 <pdn_interface_close+0xb0>)
   297c4:	4430      	add	r0, r6
   297c6:	f005 f9e3 	bl	2eb90 <sniprintf>
   297ca:	f7ff fd3d 	bl	29248 <command_write>
   297ce:	4601      	mov	r1, r0
   297d0:	b910      	cbnz	r0, 297d8 <pdn_interface_close+0x94>
   297d2:	4620      	mov	r0, r4
   297d4:	f7ff fd56 	bl	29284 <event_wait>
   297d8:	4620      	mov	r0, r4
   297da:	f7ff fddd 	bl	29398 <connection_free>
   297de:	2000      	movs	r0, #0
   297e0:	e7ba      	b.n	29758 <pdn_interface_close+0x14>
   297e2:	bf00      	nop
   297e4:	20016c9c 	.word	0x20016c9c
   297e8:	2001dbc4 	.word	0x2001dbc4
   297ec:	0004048b 	.word	0x0004048b
   297f0:	0003de32 	.word	0x0003de32
   297f4:	00039c57 	.word	0x00039c57
   297f8:	00040448 	.word	0x00040448

000297fc <pdn_interface_setopt>:
   297fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29800:	461c      	mov	r4, r3
   29802:	f240 2302 	movw	r3, #514	; 0x202
   29806:	4299      	cmp	r1, r3
   29808:	4617      	mov	r7, r2
   2980a:	9d08      	ldr	r5, [sp, #32]
   2980c:	d101      	bne.n	29812 <pdn_interface_setopt+0x16>
   2980e:	b104      	cbz	r4, 29812 <pdn_interface_setopt+0x16>
   29810:	b92d      	cbnz	r5, 2981e <pdn_interface_setopt+0x22>
   29812:	2016      	movs	r0, #22
   29814:	f7f7 f9c2 	bl	20b9c <nrf_modem_os_errno_set>
   29818:	f04f 30ff 	mov.w	r0, #4294967295
   2981c:	e02a      	b.n	29874 <pdn_interface_setopt+0x78>
   2981e:	f7ff fcf7 	bl	29210 <handle_verify_and_covert>
   29822:	1e06      	subs	r6, r0, #0
   29824:	da01      	bge.n	2982a <pdn_interface_setopt+0x2e>
   29826:	4270      	negs	r0, r6
   29828:	e7f4      	b.n	29814 <pdn_interface_setopt+0x18>
   2982a:	2f01      	cmp	r7, #1
   2982c:	d005      	beq.n	2983a <pdn_interface_setopt+0x3e>
   2982e:	2f04      	cmp	r7, #4
   29830:	d033      	beq.n	2989a <pdn_interface_setopt+0x9e>
   29832:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   29836:	4240      	negs	r0, r0
   29838:	e7ec      	b.n	29814 <pdn_interface_setopt+0x18>
   2983a:	4b3f      	ldr	r3, [pc, #252]	; (29938 <pdn_interface_setopt+0x13c>)
   2983c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   29840:	688b      	ldr	r3, [r1, #8]
   29842:	2b00      	cmp	r3, #0
   29844:	d071      	beq.n	2992a <pdn_interface_setopt+0x12e>
   29846:	688b      	ldr	r3, [r1, #8]
   29848:	2b03      	cmp	r3, #3
   2984a:	d06e      	beq.n	2992a <pdn_interface_setopt+0x12e>
   2984c:	688b      	ldr	r3, [r1, #8]
   2984e:	2b04      	cmp	r3, #4
   29850:	d06b      	beq.n	2992a <pdn_interface_setopt+0x12e>
   29852:	08a8      	lsrs	r0, r5, #2
   29854:	1e43      	subs	r3, r0, #1
   29856:	2b01      	cmp	r3, #1
   29858:	f005 0503 	and.w	r5, r5, #3
   2985c:	d902      	bls.n	29864 <pdn_interface_setopt+0x68>
   2985e:	f06f 0015 	mvn.w	r0, #21
   29862:	e7e8      	b.n	29836 <pdn_interface_setopt+0x3a>
   29864:	2d00      	cmp	r5, #0
   29866:	d1fa      	bne.n	2985e <pdn_interface_setopt+0x62>
   29868:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   2986c:	4284      	cmp	r4, r0
   2986e:	d103      	bne.n	29878 <pdn_interface_setopt+0x7c>
   29870:	60cd      	str	r5, [r1, #12]
   29872:	2000      	movs	r0, #0
   29874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29878:	f854 3b04 	ldr.w	r3, [r4], #4
   2987c:	2b02      	cmp	r3, #2
   2987e:	d102      	bne.n	29886 <pdn_interface_setopt+0x8a>
   29880:	f045 0501 	orr.w	r5, r5, #1
   29884:	e7f2      	b.n	2986c <pdn_interface_setopt+0x70>
   29886:	2b0a      	cmp	r3, #10
   29888:	d102      	bne.n	29890 <pdn_interface_setopt+0x94>
   2988a:	f045 0502 	orr.w	r5, r5, #2
   2988e:	e7ed      	b.n	2986c <pdn_interface_setopt+0x70>
   29890:	2b05      	cmp	r3, #5
   29892:	d1e4      	bne.n	2985e <pdn_interface_setopt+0x62>
   29894:	f045 0505 	orr.w	r5, r5, #5
   29898:	e7e8      	b.n	2986c <pdn_interface_setopt+0x70>
   2989a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 29938 <pdn_interface_setopt+0x13c>
   2989e:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
   298a2:	689a      	ldr	r2, [r3, #8]
   298a4:	2a00      	cmp	r2, #0
   298a6:	d040      	beq.n	2992a <pdn_interface_setopt+0x12e>
   298a8:	689a      	ldr	r2, [r3, #8]
   298aa:	2a03      	cmp	r2, #3
   298ac:	d03d      	beq.n	2992a <pdn_interface_setopt+0x12e>
   298ae:	689b      	ldr	r3, [r3, #8]
   298b0:	2b04      	cmp	r3, #4
   298b2:	d03a      	beq.n	2992a <pdn_interface_setopt+0x12e>
   298b4:	4620      	mov	r0, r4
   298b6:	f7e7 fe23 	bl	11500 <strlen>
   298ba:	f104 0a64 	add.w	sl, r4, #100	; 0x64
   298be:	1c47      	adds	r7, r0, #1
   298c0:	4650      	mov	r0, sl
   298c2:	f7e7 fe1d 	bl	11500 <strlen>
   298c6:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   298ca:	f100 0801 	add.w	r8, r0, #1
   298ce:	3b01      	subs	r3, #1
   298d0:	2b01      	cmp	r3, #1
   298d2:	d8c4      	bhi.n	2985e <pdn_interface_setopt+0x62>
   298d4:	2f63      	cmp	r7, #99	; 0x63
   298d6:	d8c2      	bhi.n	2985e <pdn_interface_setopt+0x62>
   298d8:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   298dc:	d8bf      	bhi.n	2985e <pdn_interface_setopt+0x62>
   298de:	eb07 0008 	add.w	r0, r7, r8
   298e2:	3020      	adds	r0, #32
   298e4:	f7f7 fb0c 	bl	20f00 <nrf_modem_os_alloc>
   298e8:	4605      	mov	r5, r0
   298ea:	b308      	cbz	r0, 29930 <pdn_interface_setopt+0x134>
   298ec:	2220      	movs	r2, #32
   298ee:	f859 1026 	ldr.w	r1, [r9, r6, lsl #2]
   298f2:	f00d ff46 	bl	37782 <memcpy>
   298f6:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   298fa:	f7f7 fb09 	bl	20f10 <nrf_modem_os_free>
   298fe:	e9c5 7805 	strd	r7, r8, [r5, #20]
   29902:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   29906:	4639      	mov	r1, r7
   29908:	4a0c      	ldr	r2, [pc, #48]	; (2993c <pdn_interface_setopt+0x140>)
   2990a:	742b      	strb	r3, [r5, #16]
   2990c:	f105 0020 	add.w	r0, r5, #32
   29910:	4623      	mov	r3, r4
   29912:	f005 f93d 	bl	2eb90 <sniprintf>
   29916:	3021      	adds	r0, #33	; 0x21
   29918:	4653      	mov	r3, sl
   2991a:	4a08      	ldr	r2, [pc, #32]	; (2993c <pdn_interface_setopt+0x140>)
   2991c:	69a9      	ldr	r1, [r5, #24]
   2991e:	4428      	add	r0, r5
   29920:	f005 f936 	bl	2eb90 <sniprintf>
   29924:	f849 5026 	str.w	r5, [r9, r6, lsl #2]
   29928:	e7a3      	b.n	29872 <pdn_interface_setopt+0x76>
   2992a:	f06f 000d 	mvn.w	r0, #13
   2992e:	e782      	b.n	29836 <pdn_interface_setopt+0x3a>
   29930:	f06f 000b 	mvn.w	r0, #11
   29934:	e77f      	b.n	29836 <pdn_interface_setopt+0x3a>
   29936:	bf00      	nop
   29938:	20016c9c 	.word	0x20016c9c
   2993c:	0003de32 	.word	0x0003de32

00029940 <pdn_interface_getopt>:
   29940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29944:	461d      	mov	r5, r3
   29946:	f240 2302 	movw	r3, #514	; 0x202
   2994a:	4299      	cmp	r1, r3
   2994c:	4690      	mov	r8, r2
   2994e:	9e06      	ldr	r6, [sp, #24]
   29950:	d101      	bne.n	29956 <pdn_interface_getopt+0x16>
   29952:	b105      	cbz	r5, 29956 <pdn_interface_getopt+0x16>
   29954:	b92e      	cbnz	r6, 29962 <pdn_interface_getopt+0x22>
   29956:	2016      	movs	r0, #22
   29958:	f7f7 f920 	bl	20b9c <nrf_modem_os_errno_set>
   2995c:	f04f 34ff 	mov.w	r4, #4294967295
   29960:	e034      	b.n	299cc <pdn_interface_getopt+0x8c>
   29962:	f7ff fc55 	bl	29210 <handle_verify_and_covert>
   29966:	1e07      	subs	r7, r0, #0
   29968:	da01      	bge.n	2996e <pdn_interface_getopt+0x2e>
   2996a:	4278      	negs	r0, r7
   2996c:	e7f4      	b.n	29958 <pdn_interface_getopt+0x18>
   2996e:	f1b8 0f02 	cmp.w	r8, #2
   29972:	d02e      	beq.n	299d2 <pdn_interface_getopt+0x92>
   29974:	f1b8 0f03 	cmp.w	r8, #3
   29978:	d035      	beq.n	299e6 <pdn_interface_getopt+0xa6>
   2997a:	f1b8 0f01 	cmp.w	r8, #1
   2997e:	d149      	bne.n	29a14 <pdn_interface_getopt+0xd4>
   29980:	4b2b      	ldr	r3, [pc, #172]	; (29a30 <pdn_interface_getopt+0xf0>)
   29982:	6831      	ldr	r1, [r6, #0]
   29984:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   29988:	689a      	ldr	r2, [r3, #8]
   2998a:	2a00      	cmp	r2, #0
   2998c:	d046      	beq.n	29a1c <pdn_interface_getopt+0xdc>
   2998e:	689a      	ldr	r2, [r3, #8]
   29990:	2a04      	cmp	r2, #4
   29992:	d043      	beq.n	29a1c <pdn_interface_getopt+0xdc>
   29994:	2907      	cmp	r1, #7
   29996:	f001 0203 	and.w	r2, r1, #3
   2999a:	d942      	bls.n	29a22 <pdn_interface_getopt+0xe2>
   2999c:	2a00      	cmp	r2, #0
   2999e:	d140      	bne.n	29a22 <pdn_interface_getopt+0xe2>
   299a0:	68db      	ldr	r3, [r3, #12]
   299a2:	0798      	lsls	r0, r3, #30
   299a4:	bf42      	ittt	mi
   299a6:	220a      	movmi	r2, #10
   299a8:	602a      	strmi	r2, [r5, #0]
   299aa:	2201      	movmi	r2, #1
   299ac:	07d9      	lsls	r1, r3, #31
   299ae:	bf42      	ittt	mi
   299b0:	2102      	movmi	r1, #2
   299b2:	f845 1022 	strmi.w	r1, [r5, r2, lsl #2]
   299b6:	3201      	addmi	r2, #1
   299b8:	f013 0f05 	tst.w	r3, #5
   299bc:	bf1e      	ittt	ne
   299be:	2305      	movne	r3, #5
   299c0:	f845 3022 	strne.w	r3, [r5, r2, lsl #2]
   299c4:	3201      	addne	r2, #1
   299c6:	0092      	lsls	r2, r2, #2
   299c8:	6032      	str	r2, [r6, #0]
   299ca:	2400      	movs	r4, #0
   299cc:	4620      	mov	r0, r4
   299ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   299d2:	6833      	ldr	r3, [r6, #0]
   299d4:	b343      	cbz	r3, 29a28 <pdn_interface_getopt+0xe8>
   299d6:	4b16      	ldr	r3, [pc, #88]	; (29a30 <pdn_interface_getopt+0xf0>)
   299d8:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   299dc:	681b      	ldr	r3, [r3, #0]
   299de:	702b      	strb	r3, [r5, #0]
   299e0:	2301      	movs	r3, #1
   299e2:	6033      	str	r3, [r6, #0]
   299e4:	e7f1      	b.n	299ca <pdn_interface_getopt+0x8a>
   299e6:	6833      	ldr	r3, [r6, #0]
   299e8:	b1f3      	cbz	r3, 29a28 <pdn_interface_getopt+0xe8>
   299ea:	f44f 7180 	mov.w	r1, #256	; 0x100
   299ee:	4b11      	ldr	r3, [pc, #68]	; (29a34 <pdn_interface_getopt+0xf4>)
   299f0:	4a11      	ldr	r2, [pc, #68]	; (29a38 <pdn_interface_getopt+0xf8>)
   299f2:	4812      	ldr	r0, [pc, #72]	; (29a3c <pdn_interface_getopt+0xfc>)
   299f4:	f005 f8cc 	bl	2eb90 <sniprintf>
   299f8:	f7ff fc26 	bl	29248 <command_write>
   299fc:	4604      	mov	r4, r0
   299fe:	b958      	cbnz	r0, 29a18 <pdn_interface_getopt+0xd8>
   29a00:	4641      	mov	r1, r8
   29a02:	4638      	mov	r0, r7
   29a04:	f7ff fc3e 	bl	29284 <event_wait>
   29a08:	2800      	cmp	r0, #0
   29a0a:	db0f      	blt.n	29a2c <pdn_interface_getopt+0xec>
   29a0c:	2301      	movs	r3, #1
   29a0e:	7028      	strb	r0, [r5, #0]
   29a10:	6033      	str	r3, [r6, #0]
   29a12:	e7db      	b.n	299cc <pdn_interface_getopt+0x8c>
   29a14:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   29a18:	4260      	negs	r0, r4
   29a1a:	e79d      	b.n	29958 <pdn_interface_getopt+0x18>
   29a1c:	f06f 040d 	mvn.w	r4, #13
   29a20:	e7fa      	b.n	29a18 <pdn_interface_getopt+0xd8>
   29a22:	f06f 0415 	mvn.w	r4, #21
   29a26:	e7f7      	b.n	29a18 <pdn_interface_getopt+0xd8>
   29a28:	2416      	movs	r4, #22
   29a2a:	e7f5      	b.n	29a18 <pdn_interface_getopt+0xd8>
   29a2c:	4604      	mov	r4, r0
   29a2e:	e7f3      	b.n	29a18 <pdn_interface_getopt+0xd8>
   29a30:	20016c9c 	.word	0x20016c9c
   29a34:	00040497 	.word	0x00040497
   29a38:	0003de32 	.word	0x0003de32
   29a3c:	2001dbc4 	.word	0x2001dbc4

00029a40 <pdn_interface_pdn_id_get>:
   29a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29a44:	4606      	mov	r6, r0
   29a46:	4688      	mov	r8, r1
   29a48:	b321      	cbz	r1, 29a94 <pdn_interface_pdn_id_get+0x54>
   29a4a:	4c25      	ldr	r4, [pc, #148]	; (29ae0 <pdn_interface_pdn_id_get+0xa0>)
   29a4c:	2500      	movs	r5, #0
   29a4e:	4627      	mov	r7, r4
   29a50:	f854 3b04 	ldr.w	r3, [r4], #4
   29a54:	b1db      	cbz	r3, 29a8e <pdn_interface_pdn_id_get+0x4e>
   29a56:	689b      	ldr	r3, [r3, #8]
   29a58:	2b03      	cmp	r3, #3
   29a5a:	d118      	bne.n	29a8e <pdn_interface_pdn_id_get+0x4e>
   29a5c:	4640      	mov	r0, r8
   29a5e:	f7e7 fd4f 	bl	11500 <strlen>
   29a62:	f854 1c04 	ldr.w	r1, [r4, #-4]
   29a66:	69ca      	ldr	r2, [r1, #28]
   29a68:	4282      	cmp	r2, r0
   29a6a:	d110      	bne.n	29a8e <pdn_interface_pdn_id_get+0x4e>
   29a6c:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
   29a70:	4403      	add	r3, r0
   29a72:	3320      	adds	r3, #32
   29a74:	4640      	mov	r0, r8
   29a76:	4419      	add	r1, r3
   29a78:	f00d ffd0 	bl	37a1c <strncmp>
   29a7c:	b938      	cbnz	r0, 29a8e <pdn_interface_pdn_id_get+0x4e>
   29a7e:	2e0a      	cmp	r6, #10
   29a80:	d10a      	bne.n	29a98 <pdn_interface_pdn_id_get+0x58>
   29a82:	f854 3c04 	ldr.w	r3, [r4, #-4]
   29a86:	68db      	ldr	r3, [r3, #12]
   29a88:	f3c3 0340 	ubfx	r3, r3, #1, #1
   29a8c:	b95b      	cbnz	r3, 29aa6 <pdn_interface_pdn_id_get+0x66>
   29a8e:	3501      	adds	r5, #1
   29a90:	2d0a      	cmp	r5, #10
   29a92:	d1dd      	bne.n	29a50 <pdn_interface_pdn_id_get+0x10>
   29a94:	2016      	movs	r0, #22
   29a96:	e010      	b.n	29aba <pdn_interface_pdn_id_get+0x7a>
   29a98:	2e02      	cmp	r6, #2
   29a9a:	d113      	bne.n	29ac4 <pdn_interface_pdn_id_get+0x84>
   29a9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   29aa0:	68db      	ldr	r3, [r3, #12]
   29aa2:	07db      	lsls	r3, r3, #31
   29aa4:	d5f3      	bpl.n	29a8e <pdn_interface_pdn_id_get+0x4e>
   29aa6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   29aaa:	685c      	ldr	r4, [r3, #4]
   29aac:	3401      	adds	r4, #1
   29aae:	d112      	bne.n	29ad6 <pdn_interface_pdn_id_get+0x96>
   29ab0:	4628      	mov	r0, r5
   29ab2:	f7ff fc7f 	bl	293b4 <pdn_id_get>
   29ab6:	b170      	cbz	r0, 29ad6 <pdn_interface_pdn_id_get+0x96>
   29ab8:	4240      	negs	r0, r0
   29aba:	f7f7 f86f 	bl	20b9c <nrf_modem_os_errno_set>
   29abe:	f04f 30ff 	mov.w	r0, #4294967295
   29ac2:	e00b      	b.n	29adc <pdn_interface_pdn_id_get+0x9c>
   29ac4:	2e05      	cmp	r6, #5
   29ac6:	d1e2      	bne.n	29a8e <pdn_interface_pdn_id_get+0x4e>
   29ac8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   29acc:	68db      	ldr	r3, [r3, #12]
   29ace:	3b00      	subs	r3, #0
   29ad0:	bf18      	it	ne
   29ad2:	2301      	movne	r3, #1
   29ad4:	e7da      	b.n	29a8c <pdn_interface_pdn_id_get+0x4c>
   29ad6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   29ada:	6858      	ldr	r0, [r3, #4]
   29adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29ae0:	20016c9c 	.word	0x20016c9c

00029ae4 <full_dfu_ipc_irq_handler>:
   29ae4:	2301      	movs	r3, #1
   29ae6:	4a03      	ldr	r2, [pc, #12]	; (29af4 <full_dfu_ipc_irq_handler+0x10>)
   29ae8:	6013      	str	r3, [r2, #0]
   29aea:	07c2      	lsls	r2, r0, #31
   29aec:	bf44      	itt	mi
   29aee:	4a02      	ldrmi	r2, [pc, #8]	; (29af8 <full_dfu_ipc_irq_handler+0x14>)
   29af0:	7013      	strbmi	r3, [r2, #0]
   29af2:	4770      	bx	lr
   29af4:	20016cc4 	.word	0x20016cc4
   29af8:	2001dcc4 	.word	0x2001dcc4

00029afc <modem_ipc_wait_for_event>:
   29afc:	b538      	push	{r3, r4, r5, lr}
   29afe:	2300      	movs	r3, #0
   29b00:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   29b04:	4c0a      	ldr	r4, [pc, #40]	; (29b30 <modem_ipc_wait_for_event+0x34>)
   29b06:	6023      	str	r3, [r4, #0]
   29b08:	6823      	ldr	r3, [r4, #0]
   29b0a:	b92b      	cbnz	r3, 29b18 <modem_ipc_wait_for_event+0x1c>
   29b0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   29b10:	f000 f976 	bl	29e00 <nrf_modem_busy_wait_us>
   29b14:	3d01      	subs	r5, #1
   29b16:	d1f7      	bne.n	29b08 <modem_ipc_wait_for_event+0xc>
   29b18:	6823      	ldr	r3, [r4, #0]
   29b1a:	b90b      	cbnz	r3, 29b20 <modem_ipc_wait_for_event+0x24>
   29b1c:	203c      	movs	r0, #60	; 0x3c
   29b1e:	e005      	b.n	29b2c <modem_ipc_wait_for_event+0x30>
   29b20:	4b04      	ldr	r3, [pc, #16]	; (29b34 <modem_ipc_wait_for_event+0x38>)
   29b22:	781b      	ldrb	r3, [r3, #0]
   29b24:	2b01      	cmp	r3, #1
   29b26:	bf14      	ite	ne
   29b28:	2000      	movne	r0, #0
   29b2a:	2005      	moveq	r0, #5
   29b2c:	bd38      	pop	{r3, r4, r5, pc}
   29b2e:	bf00      	nop
   29b30:	20016cc4 	.word	0x20016cc4
   29b34:	2001dcc4 	.word	0x2001dcc4

00029b38 <nrf_modem_full_dfu_setup>:
   29b38:	2200      	movs	r2, #0
   29b3a:	2300      	movs	r3, #0
   29b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b3e:	4d2d      	ldr	r5, [pc, #180]	; (29bf4 <nrf_modem_full_dfu_setup+0xbc>)
   29b40:	4f2d      	ldr	r7, [pc, #180]	; (29bf8 <nrf_modem_full_dfu_setup+0xc0>)
   29b42:	e9c5 2302 	strd	r2, r3, [r5, #8]
   29b46:	e9c5 2304 	strd	r2, r3, [r5, #16]
   29b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   29b4e:	4b2b      	ldr	r3, [pc, #172]	; (29bfc <nrf_modem_full_dfu_setup+0xc4>)
   29b50:	2400      	movs	r4, #0
   29b52:	601a      	str	r2, [r3, #0]
   29b54:	f100 031c 	add.w	r3, r0, #28
   29b58:	603b      	str	r3, [r7, #0]
   29b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   29b5e:	6043      	str	r3, [r0, #4]
   29b60:	231c      	movs	r3, #28
   29b62:	7203      	strb	r3, [r0, #8]
   29b64:	2320      	movs	r3, #32
   29b66:	2601      	movs	r6, #1
   29b68:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   29b6c:	7243      	strb	r3, [r0, #9]
   29b6e:	4b24      	ldr	r3, [pc, #144]	; (29c00 <nrf_modem_full_dfu_setup+0xc8>)
   29b70:	7086      	strb	r6, [r0, #2]
   29b72:	70c2      	strb	r2, [r0, #3]
   29b74:	7004      	strb	r4, [r0, #0]
   29b76:	7044      	strb	r4, [r0, #1]
   29b78:	7284      	strb	r4, [r0, #10]
   29b7a:	72c4      	strb	r4, [r0, #11]
   29b7c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   29b80:	702c      	strb	r4, [r5, #0]
   29b82:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   29b86:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   29b8a:	4b1e      	ldr	r3, [pc, #120]	; (29c04 <nrf_modem_full_dfu_setup+0xcc>)
   29b8c:	b093      	sub	sp, #76	; 0x4c
   29b8e:	4622      	mov	r2, r4
   29b90:	491d      	ldr	r1, [pc, #116]	; (29c08 <nrf_modem_full_dfu_setup+0xd0>)
   29b92:	4620      	mov	r0, r4
   29b94:	701c      	strb	r4, [r3, #0]
   29b96:	f7fb f981 	bl	24e9c <nrfx_ipc_init>
   29b9a:	2240      	movs	r2, #64	; 0x40
   29b9c:	4621      	mov	r1, r4
   29b9e:	a801      	add	r0, sp, #4
   29ba0:	f00d fe0f 	bl	377c2 <memset>
   29ba4:	2302      	movs	r3, #2
   29ba6:	9302      	str	r3, [sp, #8]
   29ba8:	2304      	movs	r3, #4
   29baa:	9609      	str	r6, [sp, #36]	; 0x24
   29bac:	2605      	movs	r6, #5
   29bae:	eb0d 0003 	add.w	r0, sp, r3
   29bb2:	930b      	str	r3, [sp, #44]	; 0x2c
   29bb4:	9611      	str	r6, [sp, #68]	; 0x44
   29bb6:	f7fb f999 	bl	24eec <nrfx_ipc_config_load>
   29bba:	4b14      	ldr	r3, [pc, #80]	; (29c0c <nrf_modem_full_dfu_setup+0xd4>)
   29bbc:	9400      	str	r4, [sp, #0]
   29bbe:	683f      	ldr	r7, [r7, #0]
   29bc0:	611c      	str	r4, [r3, #16]
   29bc2:	691b      	ldr	r3, [r3, #16]
   29bc4:	9300      	str	r3, [sp, #0]
   29bc6:	9b00      	ldr	r3, [sp, #0]
   29bc8:	f7ff ff98 	bl	29afc <modem_ipc_wait_for_event>
   29bcc:	4603      	mov	r3, r0
   29bce:	b150      	cbz	r0, 29be6 <nrf_modem_full_dfu_setup+0xae>
   29bd0:	2303      	movs	r3, #3
   29bd2:	702b      	strb	r3, [r5, #0]
   29bd4:	f7f6 ffe2 	bl	20b9c <nrf_modem_os_errno_set>
   29bd8:	f7fb f9cc 	bl	24f74 <nrfx_ipc_uninit>
   29bdc:	f04f 33ff 	mov.w	r3, #4294967295
   29be0:	4618      	mov	r0, r3
   29be2:	b013      	add	sp, #76	; 0x4c
   29be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29be6:	6839      	ldr	r1, [r7, #0]
   29be8:	4a09      	ldr	r2, [pc, #36]	; (29c10 <nrf_modem_full_dfu_setup+0xd8>)
   29bea:	4291      	cmp	r1, r2
   29bec:	d0f8      	beq.n	29be0 <nrf_modem_full_dfu_setup+0xa8>
   29bee:	4630      	mov	r0, r6
   29bf0:	e7f0      	b.n	29bd4 <nrf_modem_full_dfu_setup+0x9c>
   29bf2:	bf00      	nop
   29bf4:	20015d50 	.word	0x20015d50
   29bf8:	20016cc8 	.word	0x20016cc8
   29bfc:	20016ccc 	.word	0x20016ccc
   29c00:	4002a000 	.word	0x4002a000
   29c04:	2001dcc4 	.word	0x2001dcc4
   29c08:	00029ae5 	.word	0x00029ae5
   29c0c:	40005600 	.word	0x40005600
   29c10:	a5000001 	.word	0xa5000001

00029c14 <packet_handler_create>:
   29c14:	2801      	cmp	r0, #1
   29c16:	b570      	push	{r4, r5, r6, lr}
   29c18:	4604      	mov	r4, r0
   29c1a:	460e      	mov	r6, r1
   29c1c:	4615      	mov	r5, r2
   29c1e:	d00f      	beq.n	29c40 <packet_handler_create+0x2c>
   29c20:	1e84      	subs	r4, r0, #2
   29c22:	2c01      	cmp	r4, #1
   29c24:	d810      	bhi.n	29c48 <packet_handler_create+0x34>
   29c26:	2010      	movs	r0, #16
   29c28:	f7f7 f96a 	bl	20f00 <nrf_modem_os_alloc>
   29c2c:	2400      	movs	r4, #0
   29c2e:	b130      	cbz	r0, 29c3e <packet_handler_create+0x2a>
   29c30:	2218      	movs	r2, #24
   29c32:	4b08      	ldr	r3, [pc, #32]	; (29c54 <packet_handler_create+0x40>)
   29c34:	6085      	str	r5, [r0, #8]
   29c36:	fb02 3404 	mla	r4, r2, r4, r3
   29c3a:	e9c0 4600 	strd	r4, r6, [r0]
   29c3e:	bd70      	pop	{r4, r5, r6, pc}
   29c40:	2014      	movs	r0, #20
   29c42:	f7f7 f95d 	bl	20f00 <nrf_modem_os_alloc>
   29c46:	e7f2      	b.n	29c2e <packet_handler_create+0x1a>
   29c48:	200c      	movs	r0, #12
   29c4a:	f7f7 f959 	bl	20f00 <nrf_modem_os_alloc>
   29c4e:	2402      	movs	r4, #2
   29c50:	e7ed      	b.n	29c2e <packet_handler_create+0x1a>
   29c52:	bf00      	nop
   29c54:	000394b0 	.word	0x000394b0

00029c58 <modem_off>:
   29c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29c5a:	2501      	movs	r5, #1
   29c5c:	4c07      	ldr	r4, [pc, #28]	; (29c7c <modem_off+0x24>)
   29c5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   29c62:	6165      	str	r5, [r4, #20]
   29c64:	f000 f8cc 	bl	29e00 <nrf_modem_busy_wait_us>
   29c68:	2300      	movs	r3, #0
   29c6a:	6163      	str	r3, [r4, #20]
   29c6c:	9301      	str	r3, [sp, #4]
   29c6e:	6125      	str	r5, [r4, #16]
   29c70:	6923      	ldr	r3, [r4, #16]
   29c72:	9301      	str	r3, [sp, #4]
   29c74:	9b01      	ldr	r3, [sp, #4]
   29c76:	b003      	add	sp, #12
   29c78:	bd30      	pop	{r4, r5, pc}
   29c7a:	bf00      	nop
   29c7c:	40005600 	.word	0x40005600

00029c80 <nrf_modem_init>:
   29c80:	b570      	push	{r4, r5, r6, lr}
   29c82:	460d      	mov	r5, r1
   29c84:	b300      	cbz	r0, 29cc8 <nrf_modem_init+0x48>
   29c86:	4e13      	ldr	r6, [pc, #76]	; (29cd4 <nrf_modem_init+0x54>)
   29c88:	7832      	ldrb	r2, [r6, #0]
   29c8a:	b9ea      	cbnz	r2, 29cc8 <nrf_modem_init+0x48>
   29c8c:	2901      	cmp	r1, #1
   29c8e:	d113      	bne.n	29cb8 <nrf_modem_init+0x38>
   29c90:	68c1      	ldr	r1, [r0, #12]
   29c92:	6842      	ldr	r2, [r0, #4]
   29c94:	440a      	add	r2, r1
   29c96:	6941      	ldr	r1, [r0, #20]
   29c98:	440a      	add	r2, r1
   29c9a:	69c1      	ldr	r1, [r0, #28]
   29c9c:	440a      	add	r2, r1
   29c9e:	f242 011b 	movw	r1, #8219	; 0x201b
   29ca2:	428a      	cmp	r2, r1
   29ca4:	d913      	bls.n	29cce <nrf_modem_init+0x4e>
   29ca6:	6800      	ldr	r0, [r0, #0]
   29ca8:	f7ff ff46 	bl	29b38 <nrf_modem_full_dfu_setup>
   29cac:	4604      	mov	r4, r0
   29cae:	b130      	cbz	r0, 29cbe <nrf_modem_init+0x3e>
   29cb0:	f7ff ffd2 	bl	29c58 <modem_off>
   29cb4:	4620      	mov	r0, r4
   29cb6:	bd70      	pop	{r4, r5, r6, pc}
   29cb8:	f00d f9dc 	bl	37074 <nrf_modem_platform_init>
   29cbc:	e7f6      	b.n	29cac <nrf_modem_init+0x2c>
   29cbe:	4b06      	ldr	r3, [pc, #24]	; (29cd8 <nrf_modem_init+0x58>)
   29cc0:	701d      	strb	r5, [r3, #0]
   29cc2:	2301      	movs	r3, #1
   29cc4:	7033      	strb	r3, [r6, #0]
   29cc6:	e7f5      	b.n	29cb4 <nrf_modem_init+0x34>
   29cc8:	f04f 34ff 	mov.w	r4, #4294967295
   29ccc:	e7f2      	b.n	29cb4 <nrf_modem_init+0x34>
   29cce:	240c      	movs	r4, #12
   29cd0:	e7f0      	b.n	29cb4 <nrf_modem_init+0x34>
   29cd2:	bf00      	nop
   29cd4:	2001dcc5 	.word	0x2001dcc5
   29cd8:	2001dcc6 	.word	0x2001dcc6

00029cdc <nrf_modem_platform_af_method_table_get>:
   29cdc:	280a      	cmp	r0, #10
   29cde:	b508      	push	{r3, lr}
   29ce0:	d80b      	bhi.n	29cfa <nrf_modem_platform_af_method_table_get+0x1e>
   29ce2:	2800      	cmp	r0, #0
   29ce4:	d036      	beq.n	29d54 <nrf_modem_platform_af_method_table_get+0x78>
   29ce6:	3801      	subs	r0, #1
   29ce8:	2809      	cmp	r0, #9
   29cea:	d833      	bhi.n	29d54 <nrf_modem_platform_af_method_table_get+0x78>
   29cec:	e8df f000 	tbb	[pc, r0]
   29cf0:	32321429 	.word	0x32321429
   29cf4:	32323224 	.word	0x32323224
   29cf8:	1432      	.short	0x1432
   29cfa:	2866      	cmp	r0, #102	; 0x66
   29cfc:	d12a      	bne.n	29d54 <nrf_modem_platform_af_method_table_get+0x78>
   29cfe:	f240 2301 	movw	r3, #513	; 0x201
   29d02:	429a      	cmp	r2, r3
   29d04:	d028      	beq.n	29d58 <nrf_modem_platform_af_method_table_get+0x7c>
   29d06:	f240 2302 	movw	r3, #514	; 0x202
   29d0a:	429a      	cmp	r2, r3
   29d0c:	d026      	beq.n	29d5c <nrf_modem_platform_af_method_table_get+0x80>
   29d0e:	202b      	movs	r0, #43	; 0x2b
   29d10:	f7f6 ff44 	bl	20b9c <nrf_modem_os_errno_set>
   29d14:	2000      	movs	r0, #0
   29d16:	e009      	b.n	29d2c <nrf_modem_platform_af_method_table_get+0x50>
   29d18:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   29d1c:	d207      	bcs.n	29d2e <nrf_modem_platform_af_method_table_get+0x52>
   29d1e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   29d22:	d207      	bcs.n	29d34 <nrf_modem_platform_af_method_table_get+0x58>
   29d24:	3a01      	subs	r2, #1
   29d26:	2a01      	cmp	r2, #1
   29d28:	d8f1      	bhi.n	29d0e <nrf_modem_platform_af_method_table_get+0x32>
   29d2a:	480e      	ldr	r0, [pc, #56]	; (29d64 <nrf_modem_platform_af_method_table_get+0x88>)
   29d2c:	bd08      	pop	{r3, pc}
   29d2e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   29d32:	d1ec      	bne.n	29d0e <nrf_modem_platform_af_method_table_get+0x32>
   29d34:	480c      	ldr	r0, [pc, #48]	; (29d68 <nrf_modem_platform_af_method_table_get+0x8c>)
   29d36:	e7f9      	b.n	29d2c <nrf_modem_platform_af_method_table_get+0x50>
   29d38:	2903      	cmp	r1, #3
   29d3a:	480c      	ldr	r0, [pc, #48]	; (29d6c <nrf_modem_platform_af_method_table_get+0x90>)
   29d3c:	bf18      	it	ne
   29d3e:	2000      	movne	r0, #0
   29d40:	e7f4      	b.n	29d2c <nrf_modem_platform_af_method_table_get+0x50>
   29d42:	f240 2303 	movw	r3, #515	; 0x203
   29d46:	429a      	cmp	r2, r3
   29d48:	d00a      	beq.n	29d60 <nrf_modem_platform_af_method_table_get+0x84>
   29d4a:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   29d4e:	d1de      	bne.n	29d0e <nrf_modem_platform_af_method_table_get+0x32>
   29d50:	4807      	ldr	r0, [pc, #28]	; (29d70 <nrf_modem_platform_af_method_table_get+0x94>)
   29d52:	e7eb      	b.n	29d2c <nrf_modem_platform_af_method_table_get+0x50>
   29d54:	2016      	movs	r0, #22
   29d56:	e7db      	b.n	29d10 <nrf_modem_platform_af_method_table_get+0x34>
   29d58:	4806      	ldr	r0, [pc, #24]	; (29d74 <nrf_modem_platform_af_method_table_get+0x98>)
   29d5a:	e7e7      	b.n	29d2c <nrf_modem_platform_af_method_table_get+0x50>
   29d5c:	4806      	ldr	r0, [pc, #24]	; (29d78 <nrf_modem_platform_af_method_table_get+0x9c>)
   29d5e:	e7e5      	b.n	29d2c <nrf_modem_platform_af_method_table_get+0x50>
   29d60:	4806      	ldr	r0, [pc, #24]	; (29d7c <nrf_modem_platform_af_method_table_get+0xa0>)
   29d62:	e7e3      	b.n	29d2c <nrf_modem_platform_af_method_table_get+0x50>
   29d64:	00039520 	.word	0x00039520
   29d68:	00039548 	.word	0x00039548
   29d6c:	000395e8 	.word	0x000395e8
   29d70:	000395c0 	.word	0x000395c0
   29d74:	000394f8 	.word	0x000394f8
   29d78:	00039598 	.word	0x00039598
   29d7c:	00039570 	.word	0x00039570

00029d80 <nrf_modem_platform_fd_method_table_get>:
   29d80:	b538      	push	{r3, r4, r5, lr}
   29d82:	4605      	mov	r5, r0
   29d84:	f7fc fe66 	bl	26a54 <interface_socket_from_handle_get>
   29d88:	4604      	mov	r4, r0
   29d8a:	b130      	cbz	r0, 29d9a <nrf_modem_platform_fd_method_table_get+0x1a>
   29d8c:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   29d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29d94:	68c0      	ldr	r0, [r0, #12]
   29d96:	f7ff bfa1 	b.w	29cdc <nrf_modem_platform_af_method_table_get>
   29d9a:	4b0b      	ldr	r3, [pc, #44]	; (29dc8 <nrf_modem_platform_fd_method_table_get+0x48>)
   29d9c:	429d      	cmp	r5, r3
   29d9e:	d00c      	beq.n	29dba <nrf_modem_platform_fd_method_table_get+0x3a>
   29da0:	4a0a      	ldr	r2, [pc, #40]	; (29dcc <nrf_modem_platform_fd_method_table_get+0x4c>)
   29da2:	0c2b      	lsrs	r3, r5, #16
   29da4:	041b      	lsls	r3, r3, #16
   29da6:	4293      	cmp	r3, r2
   29da8:	d009      	beq.n	29dbe <nrf_modem_platform_fd_method_table_get+0x3e>
   29daa:	4b09      	ldr	r3, [pc, #36]	; (29dd0 <nrf_modem_platform_fd_method_table_get+0x50>)
   29dac:	429d      	cmp	r5, r3
   29dae:	d008      	beq.n	29dc2 <nrf_modem_platform_fd_method_table_get+0x42>
   29db0:	2009      	movs	r0, #9
   29db2:	f7f6 fef3 	bl	20b9c <nrf_modem_os_errno_set>
   29db6:	4620      	mov	r0, r4
   29db8:	bd38      	pop	{r3, r4, r5, pc}
   29dba:	4c06      	ldr	r4, [pc, #24]	; (29dd4 <nrf_modem_platform_fd_method_table_get+0x54>)
   29dbc:	e7fb      	b.n	29db6 <nrf_modem_platform_fd_method_table_get+0x36>
   29dbe:	4c06      	ldr	r4, [pc, #24]	; (29dd8 <nrf_modem_platform_fd_method_table_get+0x58>)
   29dc0:	e7f9      	b.n	29db6 <nrf_modem_platform_fd_method_table_get+0x36>
   29dc2:	4c06      	ldr	r4, [pc, #24]	; (29ddc <nrf_modem_platform_fd_method_table_get+0x5c>)
   29dc4:	e7f7      	b.n	29db6 <nrf_modem_platform_fd_method_table_get+0x36>
   29dc6:	bf00      	nop
   29dc8:	49765432 	.word	0x49765432
   29dcc:	789a0000 	.word	0x789a0000
   29dd0:	49765443 	.word	0x49765443
   29dd4:	00039570 	.word	0x00039570
   29dd8:	00039598 	.word	0x00039598
   29ddc:	000395c0 	.word	0x000395c0

00029de0 <nrf_modem_platform_fcntl>:
   29de0:	b508      	push	{r3, lr}
   29de2:	4b06      	ldr	r3, [pc, #24]	; (29dfc <nrf_modem_platform_fcntl+0x1c>)
   29de4:	4298      	cmp	r0, r3
   29de6:	d003      	beq.n	29df0 <nrf_modem_platform_fcntl+0x10>
   29de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29dec:	f7fc beb6 	b.w	26b5c <interface_socket_fcntl>
   29df0:	202d      	movs	r0, #45	; 0x2d
   29df2:	f7f6 fed3 	bl	20b9c <nrf_modem_os_errno_set>
   29df6:	f04f 30ff 	mov.w	r0, #4294967295
   29dfa:	bd08      	pop	{r3, pc}
   29dfc:	49765432 	.word	0x49765432

00029e00 <nrf_modem_busy_wait_us>:
   29e00:	b508      	push	{r3, lr}
   29e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   29e06:	4358      	muls	r0, r3
   29e08:	f7e6 fb5c 	bl	104c4 <__aeabi_ui2d>
   29e0c:	4b08      	ldr	r3, [pc, #32]	; (29e30 <nrf_modem_busy_wait_us+0x30>)
   29e0e:	2200      	movs	r2, #0
   29e10:	f7e6 fcfc 	bl	1080c <__aeabi_ddiv>
   29e14:	f7e6 fea8 	bl	10b68 <__aeabi_d2f>
   29e18:	4906      	ldr	r1, [pc, #24]	; (29e34 <nrf_modem_busy_wait_us+0x34>)
   29e1a:	f7e7 f8b7 	bl	10f8c <__aeabi_fdiv>
   29e1e:	f7e7 f977 	bl	11110 <__aeabi_f2uiz>
   29e22:	2300      	movs	r3, #0
   29e24:	4283      	cmp	r3, r0
   29e26:	d100      	bne.n	29e2a <nrf_modem_busy_wait_us+0x2a>
   29e28:	bd08      	pop	{r3, pc}
   29e2a:	3301      	adds	r3, #1
   29e2c:	e7fa      	b.n	29e24 <nrf_modem_busy_wait_us+0x24>
   29e2e:	bf00      	nop
   29e30:	402f4000 	.word	0x402f4000
   29e34:	40c00000 	.word	0x40c00000

00029e38 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   29e38:	4b0e      	ldr	r3, [pc, #56]	; (29e74 <z_sys_init_run_level+0x3c>)
{
   29e3a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   29e3c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   29e40:	3001      	adds	r0, #1
   29e42:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   29e46:	42a6      	cmp	r6, r4
   29e48:	d800      	bhi.n	29e4c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   29e4a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   29e4c:	e9d4 3500 	ldrd	r3, r5, [r4]
   29e50:	4628      	mov	r0, r5
   29e52:	4798      	blx	r3
		if (dev != NULL) {
   29e54:	b165      	cbz	r5, 29e70 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   29e56:	68eb      	ldr	r3, [r5, #12]
   29e58:	b130      	cbz	r0, 29e68 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   29e5a:	2800      	cmp	r0, #0
   29e5c:	bfb8      	it	lt
   29e5e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   29e60:	28ff      	cmp	r0, #255	; 0xff
   29e62:	bfa8      	it	ge
   29e64:	20ff      	movge	r0, #255	; 0xff
   29e66:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   29e68:	785a      	ldrb	r2, [r3, #1]
   29e6a:	f042 0201 	orr.w	r2, r2, #1
   29e6e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   29e70:	3408      	adds	r4, #8
   29e72:	e7e8      	b.n	29e46 <z_sys_init_run_level+0xe>
   29e74:	00039610 	.word	0x00039610

00029e78 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   29e78:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   29e7a:	4605      	mov	r5, r0
   29e7c:	b910      	cbnz	r0, 29e84 <z_impl_device_get_binding+0xc>
		return NULL;
   29e7e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   29e80:	4620      	mov	r0, r4
   29e82:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   29e84:	7803      	ldrb	r3, [r0, #0]
   29e86:	2b00      	cmp	r3, #0
   29e88:	d0f9      	beq.n	29e7e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   29e8a:	4a0f      	ldr	r2, [pc, #60]	; (29ec8 <z_impl_device_get_binding+0x50>)
   29e8c:	4c0f      	ldr	r4, [pc, #60]	; (29ecc <z_impl_device_get_binding+0x54>)
   29e8e:	4616      	mov	r6, r2
   29e90:	4294      	cmp	r4, r2
   29e92:	d108      	bne.n	29ea6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   29e94:	4c0d      	ldr	r4, [pc, #52]	; (29ecc <z_impl_device_get_binding+0x54>)
   29e96:	42b4      	cmp	r4, r6
   29e98:	d0f1      	beq.n	29e7e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   29e9a:	4620      	mov	r0, r4
   29e9c:	f00d fa80 	bl	373a0 <z_device_ready>
   29ea0:	b950      	cbnz	r0, 29eb8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   29ea2:	3418      	adds	r4, #24
   29ea4:	e7f7      	b.n	29e96 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   29ea6:	4620      	mov	r0, r4
   29ea8:	f00d fa7a 	bl	373a0 <z_device_ready>
   29eac:	b110      	cbz	r0, 29eb4 <z_impl_device_get_binding+0x3c>
   29eae:	6823      	ldr	r3, [r4, #0]
   29eb0:	42ab      	cmp	r3, r5
   29eb2:	d0e5      	beq.n	29e80 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   29eb4:	3418      	adds	r4, #24
   29eb6:	e7eb      	b.n	29e90 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   29eb8:	4628      	mov	r0, r5
   29eba:	6821      	ldr	r1, [r4, #0]
   29ebc:	f7e7 fb16 	bl	114ec <strcmp>
   29ec0:	2800      	cmp	r0, #0
   29ec2:	d1ee      	bne.n	29ea2 <z_impl_device_get_binding+0x2a>
   29ec4:	e7dc      	b.n	29e80 <z_impl_device_get_binding+0x8>
   29ec6:	bf00      	nop
   29ec8:	20014d78 	.word	0x20014d78
   29ecc:	20014c88 	.word	0x20014c88

00029ed0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   29ed0:	4b01      	ldr	r3, [pc, #4]	; (29ed8 <z_impl_z_errno+0x8>)
   29ed2:	6898      	ldr	r0, [r3, #8]
}
   29ed4:	3064      	adds	r0, #100	; 0x64
   29ed6:	4770      	bx	lr
   29ed8:	20016cd0 	.word	0x20016cd0

00029edc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   29edc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29ee0:	4605      	mov	r5, r0
   29ee2:	460f      	mov	r7, r1
	__asm__ volatile(
   29ee4:	f04f 0320 	mov.w	r3, #32
   29ee8:	f3ef 8811 	mrs	r8, BASEPRI
   29eec:	f383 8811 	msr	BASEPRI, r3
   29ef0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   29ef4:	f003 f87c 	bl	2cff0 <z_impl_k_current_get>
   29ef8:	4c28      	ldr	r4, [pc, #160]	; (29f9c <z_fatal_error+0xc0>)
   29efa:	4b29      	ldr	r3, [pc, #164]	; (29fa0 <z_fatal_error+0xc4>)
   29efc:	2d04      	cmp	r5, #4
   29efe:	eba4 0403 	sub.w	r4, r4, r3
   29f02:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   29f06:	bf98      	it	ls
   29f08:	4a26      	ldrls	r2, [pc, #152]	; (29fa4 <z_fatal_error+0xc8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   29f0a:	ea4f 1484 	mov.w	r4, r4, lsl #6
   29f0e:	f044 0301 	orr.w	r3, r4, #1
   29f12:	4606      	mov	r6, r0
	switch (reason) {
   29f14:	bf94      	ite	ls
   29f16:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   29f1a:	4a23      	ldrhi	r2, [pc, #140]	; (29fa8 <z_fatal_error+0xcc>)
   29f1c:	f8ad 3000 	strh.w	r3, [sp]
   29f20:	4629      	mov	r1, r5
   29f22:	2300      	movs	r3, #0
   29f24:	4821      	ldr	r0, [pc, #132]	; (29fac <z_fatal_error+0xd0>)
   29f26:	f006 fa11 	bl	3034c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   29f2a:	b147      	cbz	r7, 29f3e <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   29f2c:	69fb      	ldr	r3, [r7, #28]
   29f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   29f32:	b123      	cbz	r3, 29f3e <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   29f34:	481e      	ldr	r0, [pc, #120]	; (29fb0 <z_fatal_error+0xd4>)
   29f36:	f044 0101 	orr.w	r1, r4, #1
   29f3a:	f006 f9cd 	bl	302d8 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   29f3e:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   29f42:	b12e      	cbz	r6, 29f50 <z_fatal_error+0x74>
   29f44:	4630      	mov	r0, r6
   29f46:	f00d fa6b 	bl	37420 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   29f4a:	b108      	cbz	r0, 29f50 <z_fatal_error+0x74>
   29f4c:	7803      	ldrb	r3, [r0, #0]
   29f4e:	b903      	cbnz	r3, 29f52 <z_fatal_error+0x76>
		thread_name = "unknown";
   29f50:	4818      	ldr	r0, [pc, #96]	; (29fb4 <z_fatal_error+0xd8>)
   29f52:	f7eb f823 	bl	14f9c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   29f56:	4623      	mov	r3, r4
   29f58:	4602      	mov	r2, r0
   29f5a:	4631      	mov	r1, r6
   29f5c:	4816      	ldr	r0, [pc, #88]	; (29fb8 <z_fatal_error+0xdc>)
   29f5e:	f006 f9dc 	bl	3031a <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   29f62:	4639      	mov	r1, r7
   29f64:	4628      	mov	r0, r5
   29f66:	f7f9 fdeb 	bl	23b40 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   29f6a:	2d04      	cmp	r5, #4
   29f6c:	d10c      	bne.n	29f88 <z_fatal_error+0xac>
   29f6e:	4913      	ldr	r1, [pc, #76]	; (29fbc <z_fatal_error+0xe0>)
   29f70:	238f      	movs	r3, #143	; 0x8f
   29f72:	4a13      	ldr	r2, [pc, #76]	; (29fc0 <z_fatal_error+0xe4>)
   29f74:	4813      	ldr	r0, [pc, #76]	; (29fc4 <z_fatal_error+0xe8>)
   29f76:	f005 fe7b 	bl	2fc70 <printk>
   29f7a:	4813      	ldr	r0, [pc, #76]	; (29fc8 <z_fatal_error+0xec>)
   29f7c:	f005 fe78 	bl	2fc70 <printk>
   29f80:	218f      	movs	r1, #143	; 0x8f
   29f82:	480f      	ldr	r0, [pc, #60]	; (29fc0 <z_fatal_error+0xe4>)
   29f84:	f006 f95a 	bl	3023c <assert_post_action>
	__asm__ volatile(
   29f88:	f388 8811 	msr	BASEPRI, r8
   29f8c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   29f90:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   29f92:	b002      	add	sp, #8
   29f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29f98:	f7ed bf38 	b.w	17e0c <z_impl_k_thread_abort>
   29f9c:	000388d0 	.word	0x000388d0
   29fa0:	000387c0 	.word	0x000387c0
   29fa4:	00039628 	.word	0x00039628
   29fa8:	000404c9 	.word	0x000404c9
   29fac:	000404df 	.word	0x000404df
   29fb0:	00040507 	.word	0x00040507
   29fb4:	000404d7 	.word	0x000404d7
   29fb8:	00040528 	.word	0x00040528
   29fbc:	00040562 	.word	0x00040562
   29fc0:	00040540 	.word	0x00040540
   29fc4:	0003a56b 	.word	0x0003a56b
   29fc8:	0004057f 	.word	0x0004057f

00029fcc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   29fcc:	4802      	ldr	r0, [pc, #8]	; (29fd8 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   29fce:	4a03      	ldr	r2, [pc, #12]	; (29fdc <z_bss_zero+0x10>)
   29fd0:	2100      	movs	r1, #0
   29fd2:	1a12      	subs	r2, r2, r0
   29fd4:	f00d bbf5 	b.w	377c2 <memset>
   29fd8:	20015200 	.word	0x20015200
   29fdc:	2001dcd8 	.word	0x2001dcd8

00029fe0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   29fe0:	2201      	movs	r2, #1
{
   29fe2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   29fe4:	4b09      	ldr	r3, [pc, #36]	; (2a00c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   29fe6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   29fe8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   29fea:	f7ff ff25 	bl	29e38 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   29fee:	f004 f99f 	bl	2e330 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   29ff2:	2003      	movs	r0, #3
   29ff4:	f7ff ff20 	bl	29e38 <z_sys_init_run_level>

	z_init_static_threads();
   29ff8:	f000 fb7c 	bl	2a6f4 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   29ffc:	f7e8 fc10 	bl	12820 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2a000:	4a03      	ldr	r2, [pc, #12]	; (2a010 <bg_thread_main+0x30>)
   2a002:	7b13      	ldrb	r3, [r2, #12]
   2a004:	f023 0301 	bic.w	r3, r3, #1
   2a008:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2a00a:	bd08      	pop	{r3, pc}
   2a00c:	2001dcc7 	.word	0x2001dcc7
   2a010:	20015de8 	.word	0x20015de8

0002a014 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   2a014:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   2a018:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2a01a:	f7ea fed5 	bl	14dc8 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   2a01e:	4b37      	ldr	r3, [pc, #220]	; (2a0fc <z_cstart+0xe8>)
	uint32_t msp =
   2a020:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2a024:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   2a028:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a02c:	2400      	movs	r4, #0
   2a02e:	23e0      	movs	r3, #224	; 0xe0
   2a030:	4d33      	ldr	r5, [pc, #204]	; (2a100 <z_cstart+0xec>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2a032:	f04f 0b01 	mov.w	fp, #1
   2a036:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2a03a:	77ec      	strb	r4, [r5, #31]
   2a03c:	762c      	strb	r4, [r5, #24]
   2a03e:	766c      	strb	r4, [r5, #25]
   2a040:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2a042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   2a044:	4e2f      	ldr	r6, [pc, #188]	; (2a104 <z_cstart+0xf0>)
   2a046:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2a04a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2a04c:	f7ed feb4 	bl	17db8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2a050:	f7ed fbf2 	bl	17838 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2a054:	f04f 33ff 	mov.w	r3, #4294967295
   2a058:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2a05a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2a05c:	f7ee f898 	bl	18190 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2a060:	f7ed fee6 	bl	17e30 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   2a064:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   2a068:	4d27      	ldr	r5, [pc, #156]	; (2a108 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   2a06a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2a06e:	ab06      	add	r3, sp, #24
   2a070:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   2a072:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2a076:	f00d f992 	bl	3739e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2a07a:	4620      	mov	r0, r4
   2a07c:	f7ff fedc 	bl	29e38 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2a080:	2001      	movs	r0, #1
   2a082:	f7ff fed9 	bl	29e38 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2a086:	f8df a098 	ldr.w	sl, [pc, #152]	; 2a120 <z_cstart+0x10c>
	z_sched_init();
   2a08a:	f002 fe1d 	bl	2ccc8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2a08e:	4b1f      	ldr	r3, [pc, #124]	; (2a10c <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   2a090:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2a092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2a096:	491e      	ldr	r1, [pc, #120]	; (2a110 <z_cstart+0xfc>)
   2a098:	9305      	str	r3, [sp, #20]
   2a09a:	4630      	mov	r0, r6
   2a09c:	4653      	mov	r3, sl
   2a09e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   2a0a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2a0a6:	9400      	str	r4, [sp, #0]
   2a0a8:	f000 fa76 	bl	2a598 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a0ac:	7b73      	ldrb	r3, [r6, #13]
   2a0ae:	4680      	mov	r8, r0
   2a0b0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   2a0b4:	4630      	mov	r0, r6
   2a0b6:	7373      	strb	r3, [r6, #13]
   2a0b8:	f002 fbd6 	bl	2c868 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   2a0bc:	230f      	movs	r3, #15
   2a0be:	4f15      	ldr	r7, [pc, #84]	; (2a114 <z_cstart+0x100>)
   2a0c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2a0c4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2a0c8:	4913      	ldr	r1, [pc, #76]	; (2a118 <z_cstart+0x104>)
   2a0ca:	4b14      	ldr	r3, [pc, #80]	; (2a11c <z_cstart+0x108>)
   2a0cc:	4638      	mov	r0, r7
   2a0ce:	e9cd b404 	strd	fp, r4, [sp, #16]
   2a0d2:	e9cd 5400 	strd	r5, r4, [sp]
   2a0d6:	f000 fa5f 	bl	2a598 <z_setup_new_thread>
   2a0da:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2a0dc:	4652      	mov	r2, sl
   2a0de:	f023 0304 	bic.w	r3, r3, #4
   2a0e2:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   2a0e4:	f105 0318 	add.w	r3, r5, #24
   2a0e8:	4641      	mov	r1, r8
   2a0ea:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   2a0ec:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2a0f0:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   2a0f2:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   2a0f4:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2a0f8:	f7ed faf4 	bl	176e4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2a0fc:	20023230 	.word	0x20023230
   2a100:	e000ed00 	.word	0xe000ed00
   2a104:	20015de8 	.word	0x20015de8
   2a108:	20016cd0 	.word	0x20016cd0
   2a10c:	000405fe 	.word	0x000405fe
   2a110:	200210f0 	.word	0x200210f0
   2a114:	20015d68 	.word	0x20015d68
   2a118:	200230f0 	.word	0x200230f0
   2a11c:	0002a85d 	.word	0x0002a85d
   2a120:	00029fe1 	.word	0x00029fe1

0002a124 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   2a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2a126:	4d0f      	ldr	r5, [pc, #60]	; (2a164 <statics_init+0x40>)
   2a128:	4c0f      	ldr	r4, [pc, #60]	; (2a168 <statics_init+0x44>)
   2a12a:	462f      	mov	r7, r5
   2a12c:	4e0f      	ldr	r6, [pc, #60]	; (2a16c <statics_init+0x48>)
   2a12e:	42ac      	cmp	r4, r5
   2a130:	d90c      	bls.n	2a14c <statics_init+0x28>
   2a132:	490f      	ldr	r1, [pc, #60]	; (2a170 <statics_init+0x4c>)
   2a134:	2317      	movs	r3, #23
   2a136:	4632      	mov	r2, r6
   2a138:	480e      	ldr	r0, [pc, #56]	; (2a174 <statics_init+0x50>)
   2a13a:	f005 fd99 	bl	2fc70 <printk>
   2a13e:	480e      	ldr	r0, [pc, #56]	; (2a178 <statics_init+0x54>)
   2a140:	f005 fd96 	bl	2fc70 <printk>
   2a144:	2117      	movs	r1, #23
   2a146:	4630      	mov	r0, r6
   2a148:	f006 f878 	bl	3023c <assert_post_action>
   2a14c:	42bc      	cmp	r4, r7
   2a14e:	d301      	bcc.n	2a154 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   2a150:	2000      	movs	r0, #0
   2a152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2a154:	4620      	mov	r0, r4
   2a156:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2a15a:	f00d f92a 	bl	373b2 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2a15e:	3418      	adds	r4, #24
   2a160:	e7e5      	b.n	2a12e <statics_init+0xa>
   2a162:	bf00      	nop
   2a164:	20014e70 	.word	0x20014e70
   2a168:	20014e40 	.word	0x20014e40
   2a16c:	00040606 	.word	0x00040606
   2a170:	00040628 	.word	0x00040628
   2a174:	0003a56b 	.word	0x0003a56b
   2a178:	0003ac25 	.word	0x0003ac25

0002a17c <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2a17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a180:	b087      	sub	sp, #28
   2a182:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   2a186:	4606      	mov	r6, r0
   2a188:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a18a:	4640      	mov	r0, r8
   2a18c:	4649      	mov	r1, r9
{
   2a18e:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a190:	f00d fa21 	bl	375d6 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2a194:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a198:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   2a19c:	f04f 0320 	mov.w	r3, #32
   2a1a0:	f3ef 8511 	mrs	r5, BASEPRI
   2a1a4:	f383 8811 	msr	BASEPRI, r3
   2a1a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a1ac:	4620      	mov	r0, r4
   2a1ae:	f000 fb31 	bl	2a814 <z_spin_lock_valid>
   2a1b2:	b968      	cbnz	r0, 2a1d0 <k_heap_aligned_alloc+0x54>
   2a1b4:	2381      	movs	r3, #129	; 0x81
   2a1b6:	4a3f      	ldr	r2, [pc, #252]	; (2a2b4 <k_heap_aligned_alloc+0x138>)
   2a1b8:	493f      	ldr	r1, [pc, #252]	; (2a2b8 <k_heap_aligned_alloc+0x13c>)
   2a1ba:	4840      	ldr	r0, [pc, #256]	; (2a2bc <k_heap_aligned_alloc+0x140>)
   2a1bc:	f005 fd58 	bl	2fc70 <printk>
   2a1c0:	4621      	mov	r1, r4
   2a1c2:	483f      	ldr	r0, [pc, #252]	; (2a2c0 <k_heap_aligned_alloc+0x144>)
   2a1c4:	f005 fd54 	bl	2fc70 <printk>
   2a1c8:	2181      	movs	r1, #129	; 0x81
   2a1ca:	483a      	ldr	r0, [pc, #232]	; (2a2b4 <k_heap_aligned_alloc+0x138>)
   2a1cc:	f006 f836 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2a1d0:	4620      	mov	r0, r4
   2a1d2:	f000 fb3b 	bl	2a84c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a1d6:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2a1da:	b17b      	cbz	r3, 2a1fc <k_heap_aligned_alloc+0x80>
   2a1dc:	ea58 0309 	orrs.w	r3, r8, r9
   2a1e0:	d00c      	beq.n	2a1fc <k_heap_aligned_alloc+0x80>
   2a1e2:	4938      	ldr	r1, [pc, #224]	; (2a2c4 <k_heap_aligned_alloc+0x148>)
   2a1e4:	2328      	movs	r3, #40	; 0x28
   2a1e6:	4a38      	ldr	r2, [pc, #224]	; (2a2c8 <k_heap_aligned_alloc+0x14c>)
   2a1e8:	4834      	ldr	r0, [pc, #208]	; (2a2bc <k_heap_aligned_alloc+0x140>)
   2a1ea:	f005 fd41 	bl	2fc70 <printk>
   2a1ee:	4837      	ldr	r0, [pc, #220]	; (2a2cc <k_heap_aligned_alloc+0x150>)
   2a1f0:	f005 fd3e 	bl	2fc70 <printk>
   2a1f4:	2128      	movs	r1, #40	; 0x28
   2a1f6:	4834      	ldr	r0, [pc, #208]	; (2a2c8 <k_heap_aligned_alloc+0x14c>)
   2a1f8:	f006 f820 	bl	3023c <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a1fc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2a2b4 <k_heap_aligned_alloc+0x138>
   2a200:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2a2b8 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2a204:	4652      	mov	r2, sl
   2a206:	4659      	mov	r1, fp
   2a208:	4630      	mov	r0, r6
   2a20a:	f7e9 ff0b 	bl	14024 <sys_heap_aligned_alloc>
   2a20e:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   2a210:	f003 fb10 	bl	2d834 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2a214:	b1cf      	cbz	r7, 2a24a <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a216:	4620      	mov	r0, r4
   2a218:	f000 fb0a 	bl	2a830 <z_spin_unlock_valid>
   2a21c:	b968      	cbnz	r0, 2a23a <k_heap_aligned_alloc+0xbe>
   2a21e:	23ac      	movs	r3, #172	; 0xac
   2a220:	4a24      	ldr	r2, [pc, #144]	; (2a2b4 <k_heap_aligned_alloc+0x138>)
   2a222:	492b      	ldr	r1, [pc, #172]	; (2a2d0 <k_heap_aligned_alloc+0x154>)
   2a224:	4825      	ldr	r0, [pc, #148]	; (2a2bc <k_heap_aligned_alloc+0x140>)
   2a226:	f005 fd23 	bl	2fc70 <printk>
   2a22a:	4621      	mov	r1, r4
   2a22c:	4829      	ldr	r0, [pc, #164]	; (2a2d4 <k_heap_aligned_alloc+0x158>)
   2a22e:	f005 fd1f 	bl	2fc70 <printk>
   2a232:	21ac      	movs	r1, #172	; 0xac
   2a234:	481f      	ldr	r0, [pc, #124]	; (2a2b4 <k_heap_aligned_alloc+0x138>)
   2a236:	f006 f801 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2a23a:	f385 8811 	msr	BASEPRI, r5
   2a23e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2a242:	4638      	mov	r0, r7
   2a244:	b007      	add	sp, #28
   2a246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2a24a:	9b04      	ldr	r3, [sp, #16]
   2a24c:	1a1b      	subs	r3, r3, r0
   2a24e:	9302      	str	r3, [sp, #8]
   2a250:	9b05      	ldr	r3, [sp, #20]
   2a252:	eb63 0301 	sbc.w	r3, r3, r1
   2a256:	9303      	str	r3, [sp, #12]
   2a258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2a25c:	2a01      	cmp	r2, #1
   2a25e:	f173 0300 	sbcs.w	r3, r3, #0
   2a262:	dbd8      	blt.n	2a216 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2a264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2a268:	4629      	mov	r1, r5
   2a26a:	e9cd 2300 	strd	r2, r3, [sp]
   2a26e:	4620      	mov	r0, r4
   2a270:	f106 020c 	add.w	r2, r6, #12
   2a274:	f002 f8be 	bl	2c3f4 <z_pend_curr>
	__asm__ volatile(
   2a278:	f04f 0320 	mov.w	r3, #32
   2a27c:	f3ef 8511 	mrs	r5, BASEPRI
   2a280:	f383 8811 	msr	BASEPRI, r3
   2a284:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a288:	4620      	mov	r0, r4
   2a28a:	f000 fac3 	bl	2a814 <z_spin_lock_valid>
   2a28e:	b968      	cbnz	r0, 2a2ac <k_heap_aligned_alloc+0x130>
   2a290:	2381      	movs	r3, #129	; 0x81
   2a292:	4642      	mov	r2, r8
   2a294:	4649      	mov	r1, r9
   2a296:	4809      	ldr	r0, [pc, #36]	; (2a2bc <k_heap_aligned_alloc+0x140>)
   2a298:	f005 fcea 	bl	2fc70 <printk>
   2a29c:	4621      	mov	r1, r4
   2a29e:	4808      	ldr	r0, [pc, #32]	; (2a2c0 <k_heap_aligned_alloc+0x144>)
   2a2a0:	f005 fce6 	bl	2fc70 <printk>
   2a2a4:	2181      	movs	r1, #129	; 0x81
   2a2a6:	4640      	mov	r0, r8
   2a2a8:	f005 ffc8 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2a2ac:	4620      	mov	r0, r4
   2a2ae:	f000 facd 	bl	2a84c <z_spin_lock_set_owner>
	return k;
   2a2b2:	e7a7      	b.n	2a204 <k_heap_aligned_alloc+0x88>
   2a2b4:	0003a62b 	.word	0x0003a62b
   2a2b8:	0003a67d 	.word	0x0003a67d
   2a2bc:	0003a56b 	.word	0x0003a56b
   2a2c0:	0003a692 	.word	0x0003a692
   2a2c4:	0004063e 	.word	0x0004063e
   2a2c8:	00040606 	.word	0x00040606
   2a2cc:	0003aba7 	.word	0x0003aba7
   2a2d0:	0003a651 	.word	0x0003a651
   2a2d4:	0003a668 	.word	0x0003a668

0002a2d8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a2da:	4605      	mov	r5, r0
   2a2dc:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2a2de:	f100 0414 	add.w	r4, r0, #20
   2a2e2:	f04f 0320 	mov.w	r3, #32
   2a2e6:	f3ef 8711 	mrs	r7, BASEPRI
   2a2ea:	f383 8811 	msr	BASEPRI, r3
   2a2ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a2f2:	4620      	mov	r0, r4
   2a2f4:	f000 fa8e 	bl	2a814 <z_spin_lock_valid>
   2a2f8:	b968      	cbnz	r0, 2a316 <k_heap_free+0x3e>
   2a2fa:	2381      	movs	r3, #129	; 0x81
   2a2fc:	4a1a      	ldr	r2, [pc, #104]	; (2a368 <k_heap_free+0x90>)
   2a2fe:	491b      	ldr	r1, [pc, #108]	; (2a36c <k_heap_free+0x94>)
   2a300:	481b      	ldr	r0, [pc, #108]	; (2a370 <k_heap_free+0x98>)
   2a302:	f005 fcb5 	bl	2fc70 <printk>
   2a306:	4621      	mov	r1, r4
   2a308:	481a      	ldr	r0, [pc, #104]	; (2a374 <k_heap_free+0x9c>)
   2a30a:	f005 fcb1 	bl	2fc70 <printk>
   2a30e:	2181      	movs	r1, #129	; 0x81
   2a310:	4815      	ldr	r0, [pc, #84]	; (2a368 <k_heap_free+0x90>)
   2a312:	f005 ff93 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2a316:	4620      	mov	r0, r4
   2a318:	f000 fa98 	bl	2a84c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2a31c:	4628      	mov	r0, r5
   2a31e:	4631      	mov	r1, r6
   2a320:	f7e9 fe2a 	bl	13f78 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2a324:	f105 000c 	add.w	r0, r5, #12
   2a328:	f00d f93b 	bl	375a2 <z_unpend_all>
   2a32c:	b128      	cbz	r0, 2a33a <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   2a32e:	4639      	mov	r1, r7
   2a330:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2a332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   2a336:	f001 be1f 	b.w	2bf78 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a33a:	4620      	mov	r0, r4
   2a33c:	f000 fa78 	bl	2a830 <z_spin_unlock_valid>
   2a340:	b968      	cbnz	r0, 2a35e <k_heap_free+0x86>
   2a342:	23ac      	movs	r3, #172	; 0xac
   2a344:	4a08      	ldr	r2, [pc, #32]	; (2a368 <k_heap_free+0x90>)
   2a346:	490c      	ldr	r1, [pc, #48]	; (2a378 <k_heap_free+0xa0>)
   2a348:	4809      	ldr	r0, [pc, #36]	; (2a370 <k_heap_free+0x98>)
   2a34a:	f005 fc91 	bl	2fc70 <printk>
   2a34e:	4621      	mov	r1, r4
   2a350:	480a      	ldr	r0, [pc, #40]	; (2a37c <k_heap_free+0xa4>)
   2a352:	f005 fc8d 	bl	2fc70 <printk>
   2a356:	21ac      	movs	r1, #172	; 0xac
   2a358:	4803      	ldr	r0, [pc, #12]	; (2a368 <k_heap_free+0x90>)
   2a35a:	f005 ff6f 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2a35e:	f387 8811 	msr	BASEPRI, r7
   2a362:	f3bf 8f6f 	isb	sy
}
   2a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a368:	0003a62b 	.word	0x0003a62b
   2a36c:	0003a67d 	.word	0x0003a67d
   2a370:	0003a56b 	.word	0x0003a56b
   2a374:	0003a692 	.word	0x0003a692
   2a378:	0003a651 	.word	0x0003a651
   2a37c:	0003a668 	.word	0x0003a668

0002a380 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   2a380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2a384:	4d16      	ldr	r5, [pc, #88]	; (2a3e0 <init_mem_slab_module+0x60>)
   2a386:	4c17      	ldr	r4, [pc, #92]	; (2a3e4 <init_mem_slab_module+0x64>)
   2a388:	46a8      	mov	r8, r5
   2a38a:	4e17      	ldr	r6, [pc, #92]	; (2a3e8 <init_mem_slab_module+0x68>)
   2a38c:	42ac      	cmp	r4, r5
   2a38e:	d90c      	bls.n	2a3aa <init_mem_slab_module+0x2a>
   2a390:	4916      	ldr	r1, [pc, #88]	; (2a3ec <init_mem_slab_module+0x6c>)
   2a392:	233c      	movs	r3, #60	; 0x3c
   2a394:	4632      	mov	r2, r6
   2a396:	4816      	ldr	r0, [pc, #88]	; (2a3f0 <init_mem_slab_module+0x70>)
   2a398:	f005 fc6a 	bl	2fc70 <printk>
   2a39c:	4815      	ldr	r0, [pc, #84]	; (2a3f4 <init_mem_slab_module+0x74>)
   2a39e:	f005 fc67 	bl	2fc70 <printk>
   2a3a2:	213c      	movs	r1, #60	; 0x3c
   2a3a4:	4630      	mov	r0, r6
   2a3a6:	f005 ff49 	bl	3023c <assert_post_action>
   2a3aa:	4544      	cmp	r4, r8
   2a3ac:	d302      	bcc.n	2a3b4 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   2a3ae:	2000      	movs	r0, #0
	return rc;
}
   2a3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a3b4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   2a3b8:	ea41 0302 	orr.w	r3, r1, r2
   2a3bc:	f013 0303 	ands.w	r3, r3, #3
   2a3c0:	d10b      	bne.n	2a3da <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   2a3c2:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   2a3c4:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a3c6:	4283      	cmp	r3, r0
   2a3c8:	d101      	bne.n	2a3ce <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2a3ca:	3420      	adds	r4, #32
   2a3cc:	e7de      	b.n	2a38c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   2a3ce:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a3d0:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2a3d2:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   2a3d4:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   2a3d6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2a3d8:	e7f5      	b.n	2a3c6 <init_mem_slab_module+0x46>
		return -EINVAL;
   2a3da:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2a3de:	e7e7      	b.n	2a3b0 <init_mem_slab_module+0x30>
   2a3e0:	20014e40 	.word	0x20014e40
   2a3e4:	20014de0 	.word	0x20014de0
   2a3e8:	00040683 	.word	0x00040683
   2a3ec:	000406a8 	.word	0x000406a8
   2a3f0:	0003a56b 	.word	0x0003a56b
   2a3f4:	0003ac25 	.word	0x0003ac25

0002a3f8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2a3f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a3fc:	4604      	mov	r4, r0
   2a3fe:	460e      	mov	r6, r1
   2a400:	4690      	mov	r8, r2
   2a402:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   2a404:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2a408:	f04f 0320 	mov.w	r3, #32
   2a40c:	f3ef 8711 	mrs	r7, BASEPRI
   2a410:	f383 8811 	msr	BASEPRI, r3
   2a414:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a418:	4628      	mov	r0, r5
   2a41a:	f000 f9fb 	bl	2a814 <z_spin_lock_valid>
   2a41e:	b968      	cbnz	r0, 2a43c <k_mem_slab_alloc+0x44>
   2a420:	2381      	movs	r3, #129	; 0x81
   2a422:	4a24      	ldr	r2, [pc, #144]	; (2a4b4 <k_mem_slab_alloc+0xbc>)
   2a424:	4924      	ldr	r1, [pc, #144]	; (2a4b8 <k_mem_slab_alloc+0xc0>)
   2a426:	4825      	ldr	r0, [pc, #148]	; (2a4bc <k_mem_slab_alloc+0xc4>)
   2a428:	f005 fc22 	bl	2fc70 <printk>
   2a42c:	4629      	mov	r1, r5
   2a42e:	4824      	ldr	r0, [pc, #144]	; (2a4c0 <k_mem_slab_alloc+0xc8>)
   2a430:	f005 fc1e 	bl	2fc70 <printk>
   2a434:	2181      	movs	r1, #129	; 0x81
   2a436:	481f      	ldr	r0, [pc, #124]	; (2a4b4 <k_mem_slab_alloc+0xbc>)
   2a438:	f005 ff00 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2a43c:	4628      	mov	r0, r5
   2a43e:	f000 fa05 	bl	2a84c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2a442:	69a3      	ldr	r3, [r4, #24]
   2a444:	b1eb      	cbz	r3, 2a482 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   2a446:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   2a448:	681b      	ldr	r3, [r3, #0]
   2a44a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   2a44c:	69e3      	ldr	r3, [r4, #28]
   2a44e:	3301      	adds	r3, #1
   2a450:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2a452:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a454:	4628      	mov	r0, r5
   2a456:	f000 f9eb 	bl	2a830 <z_spin_unlock_valid>
   2a45a:	b968      	cbnz	r0, 2a478 <k_mem_slab_alloc+0x80>
   2a45c:	23ac      	movs	r3, #172	; 0xac
   2a45e:	4a15      	ldr	r2, [pc, #84]	; (2a4b4 <k_mem_slab_alloc+0xbc>)
   2a460:	4918      	ldr	r1, [pc, #96]	; (2a4c4 <k_mem_slab_alloc+0xcc>)
   2a462:	4816      	ldr	r0, [pc, #88]	; (2a4bc <k_mem_slab_alloc+0xc4>)
   2a464:	f005 fc04 	bl	2fc70 <printk>
   2a468:	4629      	mov	r1, r5
   2a46a:	4817      	ldr	r0, [pc, #92]	; (2a4c8 <k_mem_slab_alloc+0xd0>)
   2a46c:	f005 fc00 	bl	2fc70 <printk>
   2a470:	21ac      	movs	r1, #172	; 0xac
   2a472:	4810      	ldr	r0, [pc, #64]	; (2a4b4 <k_mem_slab_alloc+0xbc>)
   2a474:	f005 fee2 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2a478:	f387 8811 	msr	BASEPRI, r7
   2a47c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   2a480:	e013      	b.n	2a4aa <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2a482:	ea58 0209 	orrs.w	r2, r8, r9
   2a486:	d103      	bne.n	2a490 <k_mem_slab_alloc+0x98>
		result = -ENOMEM;
   2a488:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   2a48c:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   2a48e:	e7e1      	b.n	2a454 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2a490:	4622      	mov	r2, r4
   2a492:	4639      	mov	r1, r7
   2a494:	4628      	mov	r0, r5
   2a496:	e9cd 8900 	strd	r8, r9, [sp]
   2a49a:	f001 ffab 	bl	2c3f4 <z_pend_curr>
		if (result == 0) {
   2a49e:	4604      	mov	r4, r0
   2a4a0:	b918      	cbnz	r0, 2a4aa <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   2a4a2:	4b0a      	ldr	r3, [pc, #40]	; (2a4cc <k_mem_slab_alloc+0xd4>)
   2a4a4:	689b      	ldr	r3, [r3, #8]
   2a4a6:	695b      	ldr	r3, [r3, #20]
   2a4a8:	6033      	str	r3, [r6, #0]
}
   2a4aa:	4620      	mov	r0, r4
   2a4ac:	b003      	add	sp, #12
   2a4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a4b2:	bf00      	nop
   2a4b4:	0003a62b 	.word	0x0003a62b
   2a4b8:	0003a67d 	.word	0x0003a67d
   2a4bc:	0003a56b 	.word	0x0003a56b
   2a4c0:	0003a692 	.word	0x0003a692
   2a4c4:	0003a651 	.word	0x0003a651
   2a4c8:	0003a668 	.word	0x0003a668
   2a4cc:	20016cd0 	.word	0x20016cd0

0002a4d0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a4d4:	4604      	mov	r4, r0
   2a4d6:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   2a4d8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2a4dc:	f04f 0320 	mov.w	r3, #32
   2a4e0:	f3ef 8711 	mrs	r7, BASEPRI
   2a4e4:	f383 8811 	msr	BASEPRI, r3
   2a4e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a4ec:	4628      	mov	r0, r5
   2a4ee:	f000 f991 	bl	2a814 <z_spin_lock_valid>
   2a4f2:	b968      	cbnz	r0, 2a510 <k_mem_slab_free+0x40>
   2a4f4:	2381      	movs	r3, #129	; 0x81
   2a4f6:	4a22      	ldr	r2, [pc, #136]	; (2a580 <k_mem_slab_free+0xb0>)
   2a4f8:	4922      	ldr	r1, [pc, #136]	; (2a584 <k_mem_slab_free+0xb4>)
   2a4fa:	4823      	ldr	r0, [pc, #140]	; (2a588 <k_mem_slab_free+0xb8>)
   2a4fc:	f005 fbb8 	bl	2fc70 <printk>
   2a500:	4629      	mov	r1, r5
   2a502:	4822      	ldr	r0, [pc, #136]	; (2a58c <k_mem_slab_free+0xbc>)
   2a504:	f005 fbb4 	bl	2fc70 <printk>
   2a508:	2181      	movs	r1, #129	; 0x81
   2a50a:	481d      	ldr	r0, [pc, #116]	; (2a580 <k_mem_slab_free+0xb0>)
   2a50c:	f005 fe96 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2a510:	4628      	mov	r0, r5
   2a512:	f000 f99b 	bl	2a84c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2a516:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2a51a:	f1b8 0f00 	cmp.w	r8, #0
   2a51e:	d10f      	bne.n	2a540 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2a520:	4620      	mov	r0, r4
   2a522:	f002 fb81 	bl	2cc28 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2a526:	b158      	cbz	r0, 2a540 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2a528:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2a52a:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2a52e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   2a530:	f002 f99a 	bl	2c868 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2a534:	4639      	mov	r1, r7
   2a536:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2a538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   2a53c:	f001 bd1c 	b.w	2bf78 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2a540:	6833      	ldr	r3, [r6, #0]
   2a542:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a544:	4628      	mov	r0, r5
   2a546:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2a548:	6833      	ldr	r3, [r6, #0]
   2a54a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   2a54c:	69e3      	ldr	r3, [r4, #28]
   2a54e:	3b01      	subs	r3, #1
   2a550:	61e3      	str	r3, [r4, #28]
   2a552:	f000 f96d 	bl	2a830 <z_spin_unlock_valid>
   2a556:	b968      	cbnz	r0, 2a574 <k_mem_slab_free+0xa4>
   2a558:	23ac      	movs	r3, #172	; 0xac
   2a55a:	4a09      	ldr	r2, [pc, #36]	; (2a580 <k_mem_slab_free+0xb0>)
   2a55c:	490c      	ldr	r1, [pc, #48]	; (2a590 <k_mem_slab_free+0xc0>)
   2a55e:	480a      	ldr	r0, [pc, #40]	; (2a588 <k_mem_slab_free+0xb8>)
   2a560:	f005 fb86 	bl	2fc70 <printk>
   2a564:	4629      	mov	r1, r5
   2a566:	480b      	ldr	r0, [pc, #44]	; (2a594 <k_mem_slab_free+0xc4>)
   2a568:	f005 fb82 	bl	2fc70 <printk>
   2a56c:	21ac      	movs	r1, #172	; 0xac
   2a56e:	4804      	ldr	r0, [pc, #16]	; (2a580 <k_mem_slab_free+0xb0>)
   2a570:	f005 fe64 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2a574:	f387 8811 	msr	BASEPRI, r7
   2a578:	f3bf 8f6f 	isb	sy
}
   2a57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a580:	0003a62b 	.word	0x0003a62b
   2a584:	0003a67d 	.word	0x0003a67d
   2a588:	0003a56b 	.word	0x0003a56b
   2a58c:	0003a692 	.word	0x0003a692
   2a590:	0003a651 	.word	0x0003a651
   2a594:	0003a668 	.word	0x0003a668

0002a598 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2a598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a59c:	b085      	sub	sp, #20
   2a59e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   2a5a2:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   2a5a4:	f1b9 0f0f 	cmp.w	r9, #15
{
   2a5a8:	460f      	mov	r7, r1
   2a5aa:	4615      	mov	r5, r2
   2a5ac:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   2a5ae:	d12e      	bne.n	2a60e <z_setup_new_thread+0x76>
   2a5b0:	4b23      	ldr	r3, [pc, #140]	; (2a640 <z_setup_new_thread+0xa8>)
   2a5b2:	4598      	cmp	r8, r3
   2a5b4:	d12f      	bne.n	2a616 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2a5b6:	f104 0358 	add.w	r3, r4, #88	; 0x58
   2a5ba:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2a5be:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   2a5c0:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   2a5c2:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2a5c4:	2304      	movs	r3, #4
   2a5c6:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2a5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2a5ca:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2a5cc:	9302      	str	r3, [sp, #8]
   2a5ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2a5d0:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2a5d4:	9301      	str	r3, [sp, #4]
   2a5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   2a5d8:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   2a5da:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2a5de:	9300      	str	r3, [sp, #0]
   2a5e0:	462a      	mov	r2, r5
   2a5e2:	4643      	mov	r3, r8
   2a5e4:	4639      	mov	r1, r7
   2a5e6:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2a5e8:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   2a5ec:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   2a5ee:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   2a5f2:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   2a5f4:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2a5f6:	f7ed f859 	bl	176ac <arch_new_thread>
	if (!_current) {
   2a5fa:	4b12      	ldr	r3, [pc, #72]	; (2a644 <z_setup_new_thread+0xac>)
	new_thread->init_data = NULL;
   2a5fc:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   2a5fe:	689b      	ldr	r3, [r3, #8]
   2a600:	b103      	cbz	r3, 2a604 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   2a602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   2a604:	4628      	mov	r0, r5
   2a606:	6763      	str	r3, [r4, #116]	; 0x74
   2a608:	b005      	add	sp, #20
   2a60a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2a60e:	f109 0310 	add.w	r3, r9, #16
   2a612:	2b1e      	cmp	r3, #30
   2a614:	d9cf      	bls.n	2a5b6 <z_setup_new_thread+0x1e>
   2a616:	f44f 7302 	mov.w	r3, #520	; 0x208
   2a61a:	4a0b      	ldr	r2, [pc, #44]	; (2a648 <z_setup_new_thread+0xb0>)
   2a61c:	490b      	ldr	r1, [pc, #44]	; (2a64c <z_setup_new_thread+0xb4>)
   2a61e:	480c      	ldr	r0, [pc, #48]	; (2a650 <z_setup_new_thread+0xb8>)
   2a620:	f005 fb26 	bl	2fc70 <printk>
   2a624:	4649      	mov	r1, r9
   2a626:	f06f 030f 	mvn.w	r3, #15
   2a62a:	220e      	movs	r2, #14
   2a62c:	4809      	ldr	r0, [pc, #36]	; (2a654 <z_setup_new_thread+0xbc>)
   2a62e:	f005 fb1f 	bl	2fc70 <printk>
   2a632:	f44f 7102 	mov.w	r1, #520	; 0x208
   2a636:	4804      	ldr	r0, [pc, #16]	; (2a648 <z_setup_new_thread+0xb0>)
   2a638:	f005 fe00 	bl	3023c <assert_post_action>
   2a63c:	e7bb      	b.n	2a5b6 <z_setup_new_thread+0x1e>
   2a63e:	bf00      	nop
   2a640:	0002a85d 	.word	0x0002a85d
   2a644:	20016cd0 	.word	0x20016cd0
   2a648:	000406c5 	.word	0x000406c5
   2a64c:	000406e8 	.word	0x000406e8
   2a650:	0003a56b 	.word	0x0003a56b
   2a654:	00040768 	.word	0x00040768

0002a658 <z_impl_k_thread_create>:
{
   2a658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a65c:	b087      	sub	sp, #28
   2a65e:	4604      	mov	r4, r0
   2a660:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   2a664:	460d      	mov	r5, r1
   2a666:	4690      	mov	r8, r2
   2a668:	4699      	mov	r9, r3
   2a66a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2a66e:	b173      	cbz	r3, 2a68e <z_impl_k_thread_create+0x36>
   2a670:	491b      	ldr	r1, [pc, #108]	; (2a6e0 <z_impl_k_thread_create+0x88>)
   2a672:	f240 2371 	movw	r3, #625	; 0x271
   2a676:	4a1b      	ldr	r2, [pc, #108]	; (2a6e4 <z_impl_k_thread_create+0x8c>)
   2a678:	481b      	ldr	r0, [pc, #108]	; (2a6e8 <z_impl_k_thread_create+0x90>)
   2a67a:	f005 faf9 	bl	2fc70 <printk>
   2a67e:	481b      	ldr	r0, [pc, #108]	; (2a6ec <z_impl_k_thread_create+0x94>)
   2a680:	f005 faf6 	bl	2fc70 <printk>
   2a684:	f240 2171 	movw	r1, #625	; 0x271
   2a688:	4816      	ldr	r0, [pc, #88]	; (2a6e4 <z_impl_k_thread_create+0x8c>)
   2a68a:	f005 fdd7 	bl	3023c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2a68e:	2300      	movs	r3, #0
   2a690:	9305      	str	r3, [sp, #20]
   2a692:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a694:	4642      	mov	r2, r8
   2a696:	9304      	str	r3, [sp, #16]
   2a698:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2a69a:	4629      	mov	r1, r5
   2a69c:	9303      	str	r3, [sp, #12]
   2a69e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2a6a0:	4620      	mov	r0, r4
   2a6a2:	9302      	str	r3, [sp, #8]
   2a6a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2a6a6:	9301      	str	r3, [sp, #4]
   2a6a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a6aa:	9300      	str	r3, [sp, #0]
   2a6ac:	464b      	mov	r3, r9
   2a6ae:	f7ff ff73 	bl	2a598 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2a6b2:	1c7b      	adds	r3, r7, #1
   2a6b4:	bf08      	it	eq
   2a6b6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2a6ba:	d005      	beq.n	2a6c8 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a6bc:	ea56 0307 	orrs.w	r3, r6, r7
   2a6c0:	d106      	bne.n	2a6d0 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   2a6c2:	4620      	mov	r0, r4
   2a6c4:	f002 f918 	bl	2c8f8 <z_sched_start>
}
   2a6c8:	4620      	mov	r0, r4
   2a6ca:	b007      	add	sp, #28
   2a6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2a6d0:	4632      	mov	r2, r6
   2a6d2:	463b      	mov	r3, r7
   2a6d4:	4906      	ldr	r1, [pc, #24]	; (2a6f0 <z_impl_k_thread_create+0x98>)
   2a6d6:	f104 0018 	add.w	r0, r4, #24
   2a6da:	f002 fe27 	bl	2d32c <z_add_timeout>
   2a6de:	e7f3      	b.n	2a6c8 <z_impl_k_thread_create+0x70>
   2a6e0:	00040799 	.word	0x00040799
   2a6e4:	000406c5 	.word	0x000406c5
   2a6e8:	0003a56b 	.word	0x0003a56b
   2a6ec:	000407ab 	.word	0x000407ab
   2a6f0:	0002c9a1 	.word	0x0002c9a1

0002a6f4 <z_init_static_threads>:
{
   2a6f4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2a6f8:	4f3f      	ldr	r7, [pc, #252]	; (2a7f8 <z_init_static_threads+0x104>)
   2a6fa:	4d40      	ldr	r5, [pc, #256]	; (2a7fc <z_init_static_threads+0x108>)
   2a6fc:	463e      	mov	r6, r7
   2a6fe:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2a80c <z_init_static_threads+0x118>
{
   2a702:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   2a704:	42bd      	cmp	r5, r7
   2a706:	d90e      	bls.n	2a726 <z_init_static_threads+0x32>
   2a708:	493d      	ldr	r1, [pc, #244]	; (2a800 <z_init_static_threads+0x10c>)
   2a70a:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   2a70e:	4642      	mov	r2, r8
   2a710:	483c      	ldr	r0, [pc, #240]	; (2a804 <z_init_static_threads+0x110>)
   2a712:	f005 faad 	bl	2fc70 <printk>
   2a716:	483c      	ldr	r0, [pc, #240]	; (2a808 <z_init_static_threads+0x114>)
   2a718:	f005 faaa 	bl	2fc70 <printk>
   2a71c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   2a720:	4640      	mov	r0, r8
   2a722:	f005 fd8b 	bl	3023c <assert_post_action>
   2a726:	42b5      	cmp	r5, r6
   2a728:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2a72c:	d31f      	bcc.n	2a76e <z_init_static_threads+0x7a>
	k_sched_lock();
   2a72e:	f001 fc67 	bl	2c000 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2a732:	4c32      	ldr	r4, [pc, #200]	; (2a7fc <z_init_static_threads+0x108>)
   2a734:	4d35      	ldr	r5, [pc, #212]	; (2a80c <z_init_static_threads+0x118>)
   2a736:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 2a800 <z_init_static_threads+0x10c>
   2a73a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2a804 <z_init_static_threads+0x110>
   2a73e:	42b4      	cmp	r4, r6
   2a740:	d90e      	bls.n	2a760 <z_init_static_threads+0x6c>
   2a742:	4641      	mov	r1, r8
   2a744:	f240 23f7 	movw	r3, #759	; 0x2f7
   2a748:	462a      	mov	r2, r5
   2a74a:	4648      	mov	r0, r9
   2a74c:	f005 fa90 	bl	2fc70 <printk>
   2a750:	482d      	ldr	r0, [pc, #180]	; (2a808 <z_init_static_threads+0x114>)
   2a752:	f005 fa8d 	bl	2fc70 <printk>
   2a756:	f240 21f7 	movw	r1, #759	; 0x2f7
   2a75a:	4628      	mov	r0, r5
   2a75c:	f005 fd6e 	bl	3023c <assert_post_action>
   2a760:	42b4      	cmp	r4, r6
   2a762:	d321      	bcc.n	2a7a8 <z_init_static_threads+0xb4>
}
   2a764:	b006      	add	sp, #24
   2a766:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   2a76a:	f001 bedd 	b.w	2c528 <k_sched_unlock>
		z_setup_new_thread(
   2a76e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a772:	9305      	str	r3, [sp, #20]
   2a774:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2a778:	9304      	str	r3, [sp, #16]
   2a77a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2a77e:	9303      	str	r3, [sp, #12]
   2a780:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2a784:	9302      	str	r3, [sp, #8]
   2a786:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2a78a:	9301      	str	r3, [sp, #4]
   2a78c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2a790:	9300      	str	r3, [sp, #0]
   2a792:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2a796:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2a79a:	f7ff fefd 	bl	2a598 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2a79e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2a7a2:	655d      	str	r5, [r3, #84]	; 0x54
   2a7a4:	4625      	mov	r5, r4
   2a7a6:	e7ad      	b.n	2a704 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2a7a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2a7aa:	1c4b      	adds	r3, r1, #1
   2a7ac:	d014      	beq.n	2a7d8 <z_init_static_threads+0xe4>
   2a7ae:	f240 32e7 	movw	r2, #999	; 0x3e7
   2a7b2:	2300      	movs	r3, #0
   2a7b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2a7b8:	4693      	mov	fp, r2
   2a7ba:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   2a7bc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2a7c0:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a7c4:	459c      	cmp	ip, r3
   2a7c6:	bf08      	it	eq
   2a7c8:	4593      	cmpeq	fp, r2
   2a7ca:	4658      	mov	r0, fp
   2a7cc:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   2a7ce:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a7d0:	d104      	bne.n	2a7dc <z_init_static_threads+0xe8>
	z_sched_start(thread);
   2a7d2:	4638      	mov	r0, r7
   2a7d4:	f002 f890 	bl	2c8f8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2a7d8:	3430      	adds	r4, #48	; 0x30
   2a7da:	e7b0      	b.n	2a73e <z_init_static_threads+0x4a>
   2a7dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a7e0:	2300      	movs	r3, #0
   2a7e2:	f7e6 fd05 	bl	111f0 <__aeabi_uldivmod>
   2a7e6:	4602      	mov	r2, r0
   2a7e8:	460b      	mov	r3, r1
   2a7ea:	f107 0018 	add.w	r0, r7, #24
   2a7ee:	4908      	ldr	r1, [pc, #32]	; (2a810 <z_init_static_threads+0x11c>)
   2a7f0:	f002 fd9c 	bl	2d32c <z_add_timeout>
   2a7f4:	e7f0      	b.n	2a7d8 <z_init_static_threads+0xe4>
   2a7f6:	bf00      	nop
   2a7f8:	20014da8 	.word	0x20014da8
   2a7fc:	20014d78 	.word	0x20014d78
   2a800:	000407d0 	.word	0x000407d0
   2a804:	0003a56b 	.word	0x0003a56b
   2a808:	0003ac25 	.word	0x0003ac25
   2a80c:	000406c5 	.word	0x000406c5
   2a810:	0002c9a1 	.word	0x0002c9a1

0002a814 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   2a814:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2a816:	b138      	cbz	r0, 2a828 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2a818:	4b04      	ldr	r3, [pc, #16]	; (2a82c <z_spin_lock_valid+0x18>)
   2a81a:	f000 0003 	and.w	r0, r0, #3
   2a81e:	7d1b      	ldrb	r3, [r3, #20]
   2a820:	1ac0      	subs	r0, r0, r3
   2a822:	bf18      	it	ne
   2a824:	2001      	movne	r0, #1
   2a826:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2a828:	2001      	movs	r0, #1
}
   2a82a:	4770      	bx	lr
   2a82c:	20016cd0 	.word	0x20016cd0

0002a830 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2a830:	4905      	ldr	r1, [pc, #20]	; (2a848 <z_spin_unlock_valid+0x18>)
{
   2a832:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2a834:	688a      	ldr	r2, [r1, #8]
   2a836:	7d08      	ldrb	r0, [r1, #20]
   2a838:	6819      	ldr	r1, [r3, #0]
   2a83a:	4302      	orrs	r2, r0
   2a83c:	2000      	movs	r0, #0
   2a83e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   2a840:	bf04      	itt	eq
   2a842:	6018      	streq	r0, [r3, #0]
	return true;
   2a844:	2001      	moveq	r0, #1
}
   2a846:	4770      	bx	lr
   2a848:	20016cd0 	.word	0x20016cd0

0002a84c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2a84c:	4a02      	ldr	r2, [pc, #8]	; (2a858 <z_spin_lock_set_owner+0xc>)
   2a84e:	7d11      	ldrb	r1, [r2, #20]
   2a850:	6893      	ldr	r3, [r2, #8]
   2a852:	430b      	orrs	r3, r1
   2a854:	6003      	str	r3, [r0, #0]
}
   2a856:	4770      	bx	lr
   2a858:	20016cd0 	.word	0x20016cd0

0002a85c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2a85c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2a85e:	4c09      	ldr	r4, [pc, #36]	; (2a884 <idle+0x28>)
	__asm__ volatile(
   2a860:	f04f 0220 	mov.w	r2, #32
   2a864:	f3ef 8311 	mrs	r3, BASEPRI
   2a868:	f382 8811 	msr	BASEPRI, r2
   2a86c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   2a870:	f002 fe7e 	bl	2d570 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   2a874:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   2a876:	f7eb fb59 	bl	15f2c <pm_system_suspend>
   2a87a:	2800      	cmp	r0, #0
   2a87c:	d1f0      	bne.n	2a860 <idle+0x4>
	arch_cpu_idle();
   2a87e:	f7ec ffe1 	bl	17844 <arch_cpu_idle>
}
   2a882:	e7ed      	b.n	2a860 <idle+0x4>
   2a884:	20016cd0 	.word	0x20016cd0

0002a888 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   2a888:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2a88c:	4604      	mov	r4, r0
   2a88e:	468a      	mov	sl, r1
   2a890:	4690      	mov	r8, r2
   2a892:	4699      	mov	r9, r3
   2a894:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2a898:	b17b      	cbz	r3, 2a8ba <z_impl_k_msgq_put+0x32>
   2a89a:	ea58 0309 	orrs.w	r3, r8, r9
   2a89e:	d00c      	beq.n	2a8ba <z_impl_k_msgq_put+0x32>
   2a8a0:	4943      	ldr	r1, [pc, #268]	; (2a9b0 <z_impl_k_msgq_put+0x128>)
   2a8a2:	2376      	movs	r3, #118	; 0x76
   2a8a4:	4a43      	ldr	r2, [pc, #268]	; (2a9b4 <z_impl_k_msgq_put+0x12c>)
   2a8a6:	4844      	ldr	r0, [pc, #272]	; (2a9b8 <z_impl_k_msgq_put+0x130>)
   2a8a8:	f005 f9e2 	bl	2fc70 <printk>
   2a8ac:	4843      	ldr	r0, [pc, #268]	; (2a9bc <z_impl_k_msgq_put+0x134>)
   2a8ae:	f005 f9df 	bl	2fc70 <printk>
   2a8b2:	2176      	movs	r1, #118	; 0x76
   2a8b4:	483f      	ldr	r0, [pc, #252]	; (2a9b4 <z_impl_k_msgq_put+0x12c>)
   2a8b6:	f005 fcc1 	bl	3023c <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2a8ba:	f104 0508 	add.w	r5, r4, #8
   2a8be:	f04f 0320 	mov.w	r3, #32
   2a8c2:	f3ef 8711 	mrs	r7, BASEPRI
   2a8c6:	f383 8811 	msr	BASEPRI, r3
   2a8ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a8ce:	4628      	mov	r0, r5
   2a8d0:	f7ff ffa0 	bl	2a814 <z_spin_lock_valid>
   2a8d4:	b968      	cbnz	r0, 2a8f2 <z_impl_k_msgq_put+0x6a>
   2a8d6:	2381      	movs	r3, #129	; 0x81
   2a8d8:	4a39      	ldr	r2, [pc, #228]	; (2a9c0 <z_impl_k_msgq_put+0x138>)
   2a8da:	493a      	ldr	r1, [pc, #232]	; (2a9c4 <z_impl_k_msgq_put+0x13c>)
   2a8dc:	4836      	ldr	r0, [pc, #216]	; (2a9b8 <z_impl_k_msgq_put+0x130>)
   2a8de:	f005 f9c7 	bl	2fc70 <printk>
   2a8e2:	4629      	mov	r1, r5
   2a8e4:	4838      	ldr	r0, [pc, #224]	; (2a9c8 <z_impl_k_msgq_put+0x140>)
   2a8e6:	f005 f9c3 	bl	2fc70 <printk>
   2a8ea:	2181      	movs	r1, #129	; 0x81
   2a8ec:	4834      	ldr	r0, [pc, #208]	; (2a9c0 <z_impl_k_msgq_put+0x138>)
   2a8ee:	f005 fca5 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2a8f2:	4628      	mov	r0, r5
   2a8f4:	f7ff ffaa 	bl	2a84c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   2a8f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2a8fa:	6923      	ldr	r3, [r4, #16]
   2a8fc:	429a      	cmp	r2, r3
   2a8fe:	d244      	bcs.n	2a98a <z_impl_k_msgq_put+0x102>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2a900:	4620      	mov	r0, r4
   2a902:	f002 f991 	bl	2cc28 <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a906:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   2a908:	4606      	mov	r6, r0
   2a90a:	68e2      	ldr	r2, [r4, #12]
   2a90c:	b178      	cbz	r0, 2a92e <z_impl_k_msgq_put+0xa6>
   2a90e:	2400      	movs	r4, #0
   2a910:	6940      	ldr	r0, [r0, #20]
   2a912:	f00c ff36 	bl	37782 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2a916:	4630      	mov	r0, r6
   2a918:	67f4      	str	r4, [r6, #124]	; 0x7c
   2a91a:	f001 ffa5 	bl	2c868 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2a91e:	4639      	mov	r1, r7
   2a920:	4628      	mov	r0, r5
   2a922:	f001 fb29 	bl	2bf78 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2a926:	4620      	mov	r0, r4
   2a928:	b002      	add	sp, #8
   2a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a92e:	6a20      	ldr	r0, [r4, #32]
   2a930:	f00c ff27 	bl	37782 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   2a934:	6a23      	ldr	r3, [r4, #32]
   2a936:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   2a938:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->write_ptr += msgq->msg_size;
   2a93c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2a93e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2a940:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   2a942:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2a944:	bf08      	it	eq
   2a946:	6963      	ldreq	r3, [r4, #20]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   2a948:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   2a94c:	bf08      	it	eq
   2a94e:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   2a950:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a952:	3301      	adds	r3, #1
   2a954:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   2a956:	f00c fec5 	bl	376e4 <z_handle_obj_poll_events>
		result = 0;
   2a95a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a95c:	4628      	mov	r0, r5
   2a95e:	f7ff ff67 	bl	2a830 <z_spin_unlock_valid>
   2a962:	b968      	cbnz	r0, 2a980 <z_impl_k_msgq_put+0xf8>
   2a964:	23ac      	movs	r3, #172	; 0xac
   2a966:	4a16      	ldr	r2, [pc, #88]	; (2a9c0 <z_impl_k_msgq_put+0x138>)
   2a968:	4918      	ldr	r1, [pc, #96]	; (2a9cc <z_impl_k_msgq_put+0x144>)
   2a96a:	4813      	ldr	r0, [pc, #76]	; (2a9b8 <z_impl_k_msgq_put+0x130>)
   2a96c:	f005 f980 	bl	2fc70 <printk>
   2a970:	4629      	mov	r1, r5
   2a972:	4817      	ldr	r0, [pc, #92]	; (2a9d0 <z_impl_k_msgq_put+0x148>)
   2a974:	f005 f97c 	bl	2fc70 <printk>
   2a978:	21ac      	movs	r1, #172	; 0xac
   2a97a:	4811      	ldr	r0, [pc, #68]	; (2a9c0 <z_impl_k_msgq_put+0x138>)
   2a97c:	f005 fc5e 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2a980:	f387 8811 	msr	BASEPRI, r7
   2a984:	f3bf 8f6f 	isb	sy
	return result;
   2a988:	e7cd      	b.n	2a926 <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2a98a:	ea58 0309 	orrs.w	r3, r8, r9
   2a98e:	d00c      	beq.n	2a9aa <z_impl_k_msgq_put+0x122>
		_current->base.swap_data = (void *) data;
   2a990:	4b10      	ldr	r3, [pc, #64]	; (2a9d4 <z_impl_k_msgq_put+0x14c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a992:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   2a994:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a996:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   2a998:	f8c3 a014 	str.w	sl, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a99c:	4628      	mov	r0, r5
   2a99e:	e9cd 8900 	strd	r8, r9, [sp]
   2a9a2:	f001 fd27 	bl	2c3f4 <z_pend_curr>
   2a9a6:	4604      	mov	r4, r0
		return result;
   2a9a8:	e7bd      	b.n	2a926 <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   2a9aa:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2a9ae:	e7d5      	b.n	2a95c <z_impl_k_msgq_put+0xd4>
   2a9b0:	0004063e 	.word	0x0004063e
   2a9b4:	000407fd 	.word	0x000407fd
   2a9b8:	0003a56b 	.word	0x0003a56b
   2a9bc:	0003aba7 	.word	0x0003aba7
   2a9c0:	0003a62b 	.word	0x0003a62b
   2a9c4:	0003a67d 	.word	0x0003a67d
   2a9c8:	0003a692 	.word	0x0003a692
   2a9cc:	0003a651 	.word	0x0003a651
   2a9d0:	0003a668 	.word	0x0003a668
   2a9d4:	20016cd0 	.word	0x20016cd0

0002a9d8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   2a9d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a9dc:	4604      	mov	r4, r0
   2a9de:	460d      	mov	r5, r1
   2a9e0:	4690      	mov	r8, r2
   2a9e2:	4699      	mov	r9, r3
   2a9e4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2a9e8:	b17b      	cbz	r3, 2aa0a <z_impl_k_msgq_get+0x32>
   2a9ea:	ea58 0309 	orrs.w	r3, r8, r9
   2a9ee:	d00c      	beq.n	2aa0a <z_impl_k_msgq_get+0x32>
   2a9f0:	4946      	ldr	r1, [pc, #280]	; (2ab0c <z_impl_k_msgq_get+0x134>)
   2a9f2:	23d0      	movs	r3, #208	; 0xd0
   2a9f4:	4a46      	ldr	r2, [pc, #280]	; (2ab10 <z_impl_k_msgq_get+0x138>)
   2a9f6:	4847      	ldr	r0, [pc, #284]	; (2ab14 <z_impl_k_msgq_get+0x13c>)
   2a9f8:	f005 f93a 	bl	2fc70 <printk>
   2a9fc:	4846      	ldr	r0, [pc, #280]	; (2ab18 <z_impl_k_msgq_get+0x140>)
   2a9fe:	f005 f937 	bl	2fc70 <printk>
   2aa02:	21d0      	movs	r1, #208	; 0xd0
   2aa04:	4842      	ldr	r0, [pc, #264]	; (2ab10 <z_impl_k_msgq_get+0x138>)
   2aa06:	f005 fc19 	bl	3023c <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   2aa0a:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   2aa0e:	f04f 0320 	mov.w	r3, #32
   2aa12:	f3ef 8711 	mrs	r7, BASEPRI
   2aa16:	f383 8811 	msr	BASEPRI, r3
   2aa1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2aa1e:	4630      	mov	r0, r6
   2aa20:	f7ff fef8 	bl	2a814 <z_spin_lock_valid>
   2aa24:	b968      	cbnz	r0, 2aa42 <z_impl_k_msgq_get+0x6a>
   2aa26:	2381      	movs	r3, #129	; 0x81
   2aa28:	4a3c      	ldr	r2, [pc, #240]	; (2ab1c <z_impl_k_msgq_get+0x144>)
   2aa2a:	493d      	ldr	r1, [pc, #244]	; (2ab20 <z_impl_k_msgq_get+0x148>)
   2aa2c:	4839      	ldr	r0, [pc, #228]	; (2ab14 <z_impl_k_msgq_get+0x13c>)
   2aa2e:	f005 f91f 	bl	2fc70 <printk>
   2aa32:	4631      	mov	r1, r6
   2aa34:	483b      	ldr	r0, [pc, #236]	; (2ab24 <z_impl_k_msgq_get+0x14c>)
   2aa36:	f005 f91b 	bl	2fc70 <printk>
   2aa3a:	2181      	movs	r1, #129	; 0x81
   2aa3c:	4837      	ldr	r0, [pc, #220]	; (2ab1c <z_impl_k_msgq_get+0x144>)
   2aa3e:	f005 fbfd 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2aa42:	4630      	mov	r0, r6
   2aa44:	f7ff ff02 	bl	2a84c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   2aa48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2aa4a:	2b00      	cmp	r3, #0
   2aa4c:	d035      	beq.n	2aaba <z_impl_k_msgq_get+0xe2>
   2aa4e:	4628      	mov	r0, r5
   2aa50:	68e2      	ldr	r2, [r4, #12]
   2aa52:	69e1      	ldr	r1, [r4, #28]
   2aa54:	f00c fe95 	bl	37782 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   2aa58:	69e3      	ldr	r3, [r4, #28]
   2aa5a:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2aa5c:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   2aa5e:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   2aa60:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   2aa62:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   2aa64:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   2aa66:	bf04      	itt	eq
   2aa68:	6963      	ldreq	r3, [r4, #20]
   2aa6a:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   2aa6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2aa6e:	3b01      	subs	r3, #1
   2aa70:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2aa72:	f002 f8d9 	bl	2cc28 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2aa76:	4605      	mov	r5, r0
   2aa78:	2800      	cmp	r0, #0
   2aa7a:	d02f      	beq.n	2aadc <z_impl_k_msgq_get+0x104>
   2aa7c:	6941      	ldr	r1, [r0, #20]
   2aa7e:	68e2      	ldr	r2, [r4, #12]
   2aa80:	6a20      	ldr	r0, [r4, #32]
   2aa82:	f00c fe7e 	bl	37782 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2aa86:	6a23      	ldr	r3, [r4, #32]
   2aa88:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2aa8a:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   2aa8c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2aa8e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2aa90:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   2aa92:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2aa94:	bf04      	itt	eq
   2aa96:	6963      	ldreq	r3, [r4, #20]
   2aa98:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   2aa9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2aa9c:	3301      	adds	r3, #1
   2aa9e:	6263      	str	r3, [r4, #36]	; 0x24
   2aaa0:	2400      	movs	r4, #0
   2aaa2:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2aaa4:	f001 fee0 	bl	2c868 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2aaa8:	4639      	mov	r1, r7
   2aaaa:	4630      	mov	r0, r6
   2aaac:	f001 fa64 	bl	2bf78 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   2aab0:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2aab2:	4628      	mov	r0, r5
   2aab4:	b003      	add	sp, #12
   2aab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2aaba:	ea58 0309 	orrs.w	r3, r8, r9
   2aabe:	d00b      	beq.n	2aad8 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   2aac0:	4b19      	ldr	r3, [pc, #100]	; (2ab28 <z_impl_k_msgq_get+0x150>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2aac2:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   2aac4:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2aac6:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   2aac8:	615d      	str	r5, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2aaca:	4630      	mov	r0, r6
   2aacc:	e9cd 8900 	strd	r8, r9, [sp]
   2aad0:	f001 fc90 	bl	2c3f4 <z_pend_curr>
   2aad4:	4605      	mov	r5, r0
		return result;
   2aad6:	e7ec      	b.n	2aab2 <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   2aad8:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aadc:	4630      	mov	r0, r6
   2aade:	f7ff fea7 	bl	2a830 <z_spin_unlock_valid>
   2aae2:	b968      	cbnz	r0, 2ab00 <z_impl_k_msgq_get+0x128>
   2aae4:	23ac      	movs	r3, #172	; 0xac
   2aae6:	4a0d      	ldr	r2, [pc, #52]	; (2ab1c <z_impl_k_msgq_get+0x144>)
   2aae8:	4910      	ldr	r1, [pc, #64]	; (2ab2c <z_impl_k_msgq_get+0x154>)
   2aaea:	480a      	ldr	r0, [pc, #40]	; (2ab14 <z_impl_k_msgq_get+0x13c>)
   2aaec:	f005 f8c0 	bl	2fc70 <printk>
   2aaf0:	4631      	mov	r1, r6
   2aaf2:	480f      	ldr	r0, [pc, #60]	; (2ab30 <z_impl_k_msgq_get+0x158>)
   2aaf4:	f005 f8bc 	bl	2fc70 <printk>
   2aaf8:	21ac      	movs	r1, #172	; 0xac
   2aafa:	4808      	ldr	r0, [pc, #32]	; (2ab1c <z_impl_k_msgq_get+0x144>)
   2aafc:	f005 fb9e 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2ab00:	f387 8811 	msr	BASEPRI, r7
   2ab04:	f3bf 8f6f 	isb	sy
	return result;
   2ab08:	e7d3      	b.n	2aab2 <z_impl_k_msgq_get+0xda>
   2ab0a:	bf00      	nop
   2ab0c:	0004063e 	.word	0x0004063e
   2ab10:	000407fd 	.word	0x000407fd
   2ab14:	0003a56b 	.word	0x0003a56b
   2ab18:	0003aba7 	.word	0x0003aba7
   2ab1c:	0003a62b 	.word	0x0003a62b
   2ab20:	0003a67d 	.word	0x0003a67d
   2ab24:	0003a692 	.word	0x0003a692
   2ab28:	20016cd0 	.word	0x20016cd0
   2ab2c:	0003a651 	.word	0x0003a651
   2ab30:	0003a668 	.word	0x0003a668

0002ab34 <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
   2ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ab36:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
   2ab38:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2ab3c:	f04f 0320 	mov.w	r3, #32
   2ab40:	f3ef 8611 	mrs	r6, BASEPRI
   2ab44:	f383 8811 	msr	BASEPRI, r3
   2ab48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ab4c:	4628      	mov	r0, r5
   2ab4e:	f7ff fe61 	bl	2a814 <z_spin_lock_valid>
   2ab52:	b968      	cbnz	r0, 2ab70 <z_impl_k_msgq_purge+0x3c>
   2ab54:	2381      	movs	r3, #129	; 0x81
   2ab56:	4a12      	ldr	r2, [pc, #72]	; (2aba0 <z_impl_k_msgq_purge+0x6c>)
   2ab58:	4912      	ldr	r1, [pc, #72]	; (2aba4 <z_impl_k_msgq_purge+0x70>)
   2ab5a:	4813      	ldr	r0, [pc, #76]	; (2aba8 <z_impl_k_msgq_purge+0x74>)
   2ab5c:	f005 f888 	bl	2fc70 <printk>
   2ab60:	4629      	mov	r1, r5
   2ab62:	4812      	ldr	r0, [pc, #72]	; (2abac <z_impl_k_msgq_purge+0x78>)
   2ab64:	f005 f884 	bl	2fc70 <printk>
   2ab68:	2181      	movs	r1, #129	; 0x81
   2ab6a:	480d      	ldr	r0, [pc, #52]	; (2aba0 <z_impl_k_msgq_purge+0x6c>)
   2ab6c:	f005 fb66 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2ab70:	4628      	mov	r0, r5
   2ab72:	f7ff fe6b 	bl	2a84c <z_spin_lock_set_owner>
   2ab76:	f06f 0722 	mvn.w	r7, #34	; 0x22

	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
   2ab7a:	4620      	mov	r0, r4
   2ab7c:	f002 f854 	bl	2cc28 <z_unpend_first_thread>
   2ab80:	4603      	mov	r3, r0
   2ab82:	b940      	cbnz	r0, 2ab96 <z_impl_k_msgq_purge+0x62>
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
   2ab84:	6a23      	ldr	r3, [r4, #32]
	msgq->used_msgs = 0;
   2ab86:	6260      	str	r0, [r4, #36]	; 0x24

	z_reschedule(&msgq->lock, key);
   2ab88:	4631      	mov	r1, r6
   2ab8a:	4628      	mov	r0, r5
	msgq->read_ptr = msgq->write_ptr;
   2ab8c:	61e3      	str	r3, [r4, #28]
}
   2ab8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
   2ab92:	f001 b9f1 	b.w	2bf78 <z_reschedule>
   2ab96:	67df      	str	r7, [r3, #124]	; 0x7c
		z_ready_thread(pending_thread);
   2ab98:	f001 fe66 	bl	2c868 <z_ready_thread>
   2ab9c:	e7ed      	b.n	2ab7a <z_impl_k_msgq_purge+0x46>
   2ab9e:	bf00      	nop
   2aba0:	0003a62b 	.word	0x0003a62b
   2aba4:	0003a67d 	.word	0x0003a67d
   2aba8:	0003a56b 	.word	0x0003a56b
   2abac:	0003a692 	.word	0x0003a692

0002abb0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2abb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2abb4:	4604      	mov	r4, r0
   2abb6:	4616      	mov	r6, r2
   2abb8:	461f      	mov	r7, r3
   2abba:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2abbe:	b163      	cbz	r3, 2abda <z_impl_k_mutex_lock+0x2a>
   2abc0:	496d      	ldr	r1, [pc, #436]	; (2ad78 <z_impl_k_mutex_lock+0x1c8>)
   2abc2:	2365      	movs	r3, #101	; 0x65
   2abc4:	4a6d      	ldr	r2, [pc, #436]	; (2ad7c <z_impl_k_mutex_lock+0x1cc>)
   2abc6:	486e      	ldr	r0, [pc, #440]	; (2ad80 <z_impl_k_mutex_lock+0x1d0>)
   2abc8:	f005 f852 	bl	2fc70 <printk>
   2abcc:	486d      	ldr	r0, [pc, #436]	; (2ad84 <z_impl_k_mutex_lock+0x1d4>)
   2abce:	f005 f84f 	bl	2fc70 <printk>
   2abd2:	2165      	movs	r1, #101	; 0x65
   2abd4:	4869      	ldr	r0, [pc, #420]	; (2ad7c <z_impl_k_mutex_lock+0x1cc>)
   2abd6:	f005 fb31 	bl	3023c <assert_post_action>
   2abda:	f04f 0320 	mov.w	r3, #32
   2abde:	f3ef 8811 	mrs	r8, BASEPRI
   2abe2:	f383 8811 	msr	BASEPRI, r3
   2abe6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2abea:	4867      	ldr	r0, [pc, #412]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2abec:	f7ff fe12 	bl	2a814 <z_spin_lock_valid>
   2abf0:	b968      	cbnz	r0, 2ac0e <z_impl_k_mutex_lock+0x5e>
   2abf2:	2381      	movs	r3, #129	; 0x81
   2abf4:	4a65      	ldr	r2, [pc, #404]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2abf6:	4966      	ldr	r1, [pc, #408]	; (2ad90 <z_impl_k_mutex_lock+0x1e0>)
   2abf8:	4861      	ldr	r0, [pc, #388]	; (2ad80 <z_impl_k_mutex_lock+0x1d0>)
   2abfa:	f005 f839 	bl	2fc70 <printk>
   2abfe:	4962      	ldr	r1, [pc, #392]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ac00:	4864      	ldr	r0, [pc, #400]	; (2ad94 <z_impl_k_mutex_lock+0x1e4>)
   2ac02:	f005 f835 	bl	2fc70 <printk>
   2ac06:	2181      	movs	r1, #129	; 0x81
   2ac08:	4860      	ldr	r0, [pc, #384]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2ac0a:	f005 fb17 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2ac0e:	485e      	ldr	r0, [pc, #376]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ac10:	f7ff fe1c 	bl	2a84c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2ac14:	68e3      	ldr	r3, [r4, #12]
   2ac16:	4a60      	ldr	r2, [pc, #384]	; (2ad98 <z_impl_k_mutex_lock+0x1e8>)
   2ac18:	b1fb      	cbz	r3, 2ac5a <z_impl_k_mutex_lock+0xaa>
   2ac1a:	68a0      	ldr	r0, [r4, #8]
   2ac1c:	6891      	ldr	r1, [r2, #8]
   2ac1e:	4288      	cmp	r0, r1
   2ac20:	d03d      	beq.n	2ac9e <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2ac22:	ea56 0307 	orrs.w	r3, r6, r7
   2ac26:	d13c      	bne.n	2aca2 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ac28:	4857      	ldr	r0, [pc, #348]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ac2a:	f7ff fe01 	bl	2a830 <z_spin_unlock_valid>
   2ac2e:	b968      	cbnz	r0, 2ac4c <z_impl_k_mutex_lock+0x9c>
   2ac30:	23ac      	movs	r3, #172	; 0xac
   2ac32:	4a56      	ldr	r2, [pc, #344]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2ac34:	4959      	ldr	r1, [pc, #356]	; (2ad9c <z_impl_k_mutex_lock+0x1ec>)
   2ac36:	4852      	ldr	r0, [pc, #328]	; (2ad80 <z_impl_k_mutex_lock+0x1d0>)
   2ac38:	f005 f81a 	bl	2fc70 <printk>
   2ac3c:	4952      	ldr	r1, [pc, #328]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ac3e:	4858      	ldr	r0, [pc, #352]	; (2ada0 <z_impl_k_mutex_lock+0x1f0>)
   2ac40:	f005 f816 	bl	2fc70 <printk>
   2ac44:	21ac      	movs	r1, #172	; 0xac
   2ac46:	4851      	ldr	r0, [pc, #324]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2ac48:	f005 faf8 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2ac4c:	f388 8811 	msr	BASEPRI, r8
   2ac50:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2ac54:	f06f 000f 	mvn.w	r0, #15
   2ac58:	e01e      	b.n	2ac98 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   2ac5a:	6891      	ldr	r1, [r2, #8]
   2ac5c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2ac60:	3301      	adds	r3, #1
   2ac62:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2ac64:	6893      	ldr	r3, [r2, #8]
   2ac66:	4848      	ldr	r0, [pc, #288]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2ac68:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2ac6a:	60a3      	str	r3, [r4, #8]
   2ac6c:	f7ff fde0 	bl	2a830 <z_spin_unlock_valid>
   2ac70:	b968      	cbnz	r0, 2ac8e <z_impl_k_mutex_lock+0xde>
   2ac72:	23ac      	movs	r3, #172	; 0xac
   2ac74:	4a45      	ldr	r2, [pc, #276]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2ac76:	4949      	ldr	r1, [pc, #292]	; (2ad9c <z_impl_k_mutex_lock+0x1ec>)
   2ac78:	4841      	ldr	r0, [pc, #260]	; (2ad80 <z_impl_k_mutex_lock+0x1d0>)
   2ac7a:	f004 fff9 	bl	2fc70 <printk>
   2ac7e:	4942      	ldr	r1, [pc, #264]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ac80:	4847      	ldr	r0, [pc, #284]	; (2ada0 <z_impl_k_mutex_lock+0x1f0>)
   2ac82:	f004 fff5 	bl	2fc70 <printk>
   2ac86:	21ac      	movs	r1, #172	; 0xac
   2ac88:	4840      	ldr	r0, [pc, #256]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2ac8a:	f005 fad7 	bl	3023c <assert_post_action>
   2ac8e:	f388 8811 	msr	BASEPRI, r8
   2ac92:	f3bf 8f6f 	isb	sy
		return 0;
   2ac96:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2ac98:	b002      	add	sp, #8
   2ac9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2ac9e:	6921      	ldr	r1, [r4, #16]
   2aca0:	e7de      	b.n	2ac60 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2aca2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2aca6:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2acaa:	4299      	cmp	r1, r3
   2acac:	bfa8      	it	ge
   2acae:	4619      	movge	r1, r3
   2acb0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2acb4:	428b      	cmp	r3, r1
   2acb6:	dd41      	ble.n	2ad3c <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   2acb8:	f001 fecc 	bl	2ca54 <z_set_prio>
   2acbc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2acbe:	4622      	mov	r2, r4
   2acc0:	4641      	mov	r1, r8
   2acc2:	e9cd 6700 	strd	r6, r7, [sp]
   2acc6:	4830      	ldr	r0, [pc, #192]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2acc8:	f001 fb94 	bl	2c3f4 <z_pend_curr>
	if (got_mutex == 0) {
   2accc:	2800      	cmp	r0, #0
   2acce:	d0e3      	beq.n	2ac98 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   2acd0:	f04f 0320 	mov.w	r3, #32
   2acd4:	f3ef 8611 	mrs	r6, BASEPRI
   2acd8:	f383 8811 	msr	BASEPRI, r3
   2acdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ace0:	4829      	ldr	r0, [pc, #164]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ace2:	f7ff fd97 	bl	2a814 <z_spin_lock_valid>
   2ace6:	b968      	cbnz	r0, 2ad04 <z_impl_k_mutex_lock+0x154>
   2ace8:	2381      	movs	r3, #129	; 0x81
   2acea:	4a28      	ldr	r2, [pc, #160]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2acec:	4928      	ldr	r1, [pc, #160]	; (2ad90 <z_impl_k_mutex_lock+0x1e0>)
   2acee:	4824      	ldr	r0, [pc, #144]	; (2ad80 <z_impl_k_mutex_lock+0x1d0>)
   2acf0:	f004 ffbe 	bl	2fc70 <printk>
   2acf4:	4924      	ldr	r1, [pc, #144]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2acf6:	4827      	ldr	r0, [pc, #156]	; (2ad94 <z_impl_k_mutex_lock+0x1e4>)
   2acf8:	f004 ffba 	bl	2fc70 <printk>
   2acfc:	2181      	movs	r1, #129	; 0x81
   2acfe:	4823      	ldr	r0, [pc, #140]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2ad00:	f005 fa9c 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2ad04:	4820      	ldr	r0, [pc, #128]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ad06:	f7ff fda1 	bl	2a84c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2ad0a:	6823      	ldr	r3, [r4, #0]
   2ad0c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ad0e:	429c      	cmp	r4, r3
   2ad10:	d007      	beq.n	2ad22 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2ad12:	b133      	cbz	r3, 2ad22 <z_impl_k_mutex_lock+0x172>
   2ad14:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2ad18:	4299      	cmp	r1, r3
   2ad1a:	bfa8      	it	ge
   2ad1c:	4619      	movge	r1, r3
   2ad1e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2ad22:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2ad24:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2ad28:	4299      	cmp	r1, r3
   2ad2a:	d109      	bne.n	2ad40 <z_impl_k_mutex_lock+0x190>
	if (resched) {
   2ad2c:	b16d      	cbz	r5, 2ad4a <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   2ad2e:	4631      	mov	r1, r6
   2ad30:	4815      	ldr	r0, [pc, #84]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ad32:	f001 f921 	bl	2bf78 <z_reschedule>
	return -EAGAIN;
   2ad36:	f06f 000a 	mvn.w	r0, #10
   2ad3a:	e7ad      	b.n	2ac98 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   2ad3c:	2500      	movs	r5, #0
   2ad3e:	e7be      	b.n	2acbe <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   2ad40:	f001 fe88 	bl	2ca54 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2ad44:	2800      	cmp	r0, #0
   2ad46:	d1f2      	bne.n	2ad2e <z_impl_k_mutex_lock+0x17e>
   2ad48:	e7f0      	b.n	2ad2c <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ad4a:	480f      	ldr	r0, [pc, #60]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ad4c:	f7ff fd70 	bl	2a830 <z_spin_unlock_valid>
   2ad50:	b968      	cbnz	r0, 2ad6e <z_impl_k_mutex_lock+0x1be>
   2ad52:	23ac      	movs	r3, #172	; 0xac
   2ad54:	4a0d      	ldr	r2, [pc, #52]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2ad56:	4911      	ldr	r1, [pc, #68]	; (2ad9c <z_impl_k_mutex_lock+0x1ec>)
   2ad58:	4809      	ldr	r0, [pc, #36]	; (2ad80 <z_impl_k_mutex_lock+0x1d0>)
   2ad5a:	f004 ff89 	bl	2fc70 <printk>
   2ad5e:	490a      	ldr	r1, [pc, #40]	; (2ad88 <z_impl_k_mutex_lock+0x1d8>)
   2ad60:	480f      	ldr	r0, [pc, #60]	; (2ada0 <z_impl_k_mutex_lock+0x1f0>)
   2ad62:	f004 ff85 	bl	2fc70 <printk>
   2ad66:	21ac      	movs	r1, #172	; 0xac
   2ad68:	4808      	ldr	r0, [pc, #32]	; (2ad8c <z_impl_k_mutex_lock+0x1dc>)
   2ad6a:	f005 fa67 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2ad6e:	f386 8811 	msr	BASEPRI, r6
   2ad72:	f3bf 8f6f 	isb	sy
   2ad76:	e7de      	b.n	2ad36 <z_impl_k_mutex_lock+0x186>
   2ad78:	00040799 	.word	0x00040799
   2ad7c:	0004081f 	.word	0x0004081f
   2ad80:	0003a56b 	.word	0x0003a56b
   2ad84:	00040841 	.word	0x00040841
   2ad88:	20016d00 	.word	0x20016d00
   2ad8c:	0003a62b 	.word	0x0003a62b
   2ad90:	0003a67d 	.word	0x0003a67d
   2ad94:	0003a692 	.word	0x0003a692
   2ad98:	20016cd0 	.word	0x20016cd0
   2ad9c:	0003a651 	.word	0x0003a651
   2ada0:	0003a668 	.word	0x0003a668

0002ada4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2ada4:	b538      	push	{r3, r4, r5, lr}
   2ada6:	4604      	mov	r4, r0
   2ada8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2adac:	b163      	cbz	r3, 2adc8 <z_impl_k_mutex_unlock+0x24>
   2adae:	4952      	ldr	r1, [pc, #328]	; (2aef8 <__kernel_ram_size+0xf8>)
   2adb0:	23c7      	movs	r3, #199	; 0xc7
   2adb2:	4a52      	ldr	r2, [pc, #328]	; (2aefc <__kernel_ram_size+0xfc>)
   2adb4:	4852      	ldr	r0, [pc, #328]	; (2af00 <__kernel_ram_size+0x100>)
   2adb6:	f004 ff5b 	bl	2fc70 <printk>
   2adba:	4852      	ldr	r0, [pc, #328]	; (2af04 <__kernel_ram_size+0x104>)
   2adbc:	f004 ff58 	bl	2fc70 <printk>
   2adc0:	21c7      	movs	r1, #199	; 0xc7
   2adc2:	484e      	ldr	r0, [pc, #312]	; (2aefc <__kernel_ram_size+0xfc>)
   2adc4:	f005 fa3a 	bl	3023c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2adc8:	68a3      	ldr	r3, [r4, #8]
   2adca:	2b00      	cmp	r3, #0
   2adcc:	f000 808d 	beq.w	2aeea <__kernel_ram_size+0xea>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2add0:	4d4d      	ldr	r5, [pc, #308]	; (2af08 <__kernel_ram_size+0x108>)
   2add2:	68aa      	ldr	r2, [r5, #8]
   2add4:	4293      	cmp	r3, r2
   2add6:	f040 808b 	bne.w	2aef0 <__kernel_ram_size+0xf0>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2adda:	68e3      	ldr	r3, [r4, #12]
   2addc:	b94b      	cbnz	r3, 2adf2 <z_impl_k_mutex_unlock+0x4e>
   2adde:	494b      	ldr	r1, [pc, #300]	; (2af0c <__kernel_ram_size+0x10c>)
   2ade0:	4847      	ldr	r0, [pc, #284]	; (2af00 <__kernel_ram_size+0x100>)
   2ade2:	23df      	movs	r3, #223	; 0xdf
   2ade4:	4a45      	ldr	r2, [pc, #276]	; (2aefc <__kernel_ram_size+0xfc>)
   2ade6:	f004 ff43 	bl	2fc70 <printk>
   2adea:	21df      	movs	r1, #223	; 0xdf
   2adec:	4843      	ldr	r0, [pc, #268]	; (2aefc <__kernel_ram_size+0xfc>)
   2adee:	f005 fa25 	bl	3023c <assert_post_action>
   2adf2:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   2adf6:	b163      	cbz	r3, 2ae12 <__kernel_ram_size+0x12>
   2adf8:	493f      	ldr	r1, [pc, #252]	; (2aef8 <__kernel_ram_size+0xf8>)
   2adfa:	23fe      	movs	r3, #254	; 0xfe
   2adfc:	4a44      	ldr	r2, [pc, #272]	; (2af10 <__kernel_ram_size+0x110>)
   2adfe:	4840      	ldr	r0, [pc, #256]	; (2af00 <__kernel_ram_size+0x100>)
   2ae00:	f004 ff36 	bl	2fc70 <printk>
   2ae04:	4843      	ldr	r0, [pc, #268]	; (2af14 <__kernel_ram_size+0x114>)
   2ae06:	f004 ff33 	bl	2fc70 <printk>
   2ae0a:	21fe      	movs	r1, #254	; 0xfe
   2ae0c:	4840      	ldr	r0, [pc, #256]	; (2af10 <__kernel_ram_size+0x110>)
   2ae0e:	f005 fa15 	bl	3023c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2ae12:	68ab      	ldr	r3, [r5, #8]
   2ae14:	7bdb      	ldrb	r3, [r3, #15]
   2ae16:	2b01      	cmp	r3, #1
   2ae18:	d10c      	bne.n	2ae34 <__kernel_ram_size+0x34>
   2ae1a:	493f      	ldr	r1, [pc, #252]	; (2af18 <__kernel_ram_size+0x118>)
   2ae1c:	23ff      	movs	r3, #255	; 0xff
   2ae1e:	4a3c      	ldr	r2, [pc, #240]	; (2af10 <__kernel_ram_size+0x110>)
   2ae20:	4837      	ldr	r0, [pc, #220]	; (2af00 <__kernel_ram_size+0x100>)
   2ae22:	f004 ff25 	bl	2fc70 <printk>
   2ae26:	483b      	ldr	r0, [pc, #236]	; (2af14 <__kernel_ram_size+0x114>)
   2ae28:	f004 ff22 	bl	2fc70 <printk>
   2ae2c:	21ff      	movs	r1, #255	; 0xff
   2ae2e:	4838      	ldr	r0, [pc, #224]	; (2af10 <__kernel_ram_size+0x110>)
   2ae30:	f005 fa04 	bl	3023c <assert_post_action>

	--_current->base.sched_locked;
   2ae34:	68aa      	ldr	r2, [r5, #8]
   2ae36:	7bd3      	ldrb	r3, [r2, #15]
   2ae38:	3b01      	subs	r3, #1
   2ae3a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   2ae3c:	68e3      	ldr	r3, [r4, #12]
   2ae3e:	2b01      	cmp	r3, #1
   2ae40:	d005      	beq.n	2ae4e <__kernel_ram_size+0x4e>
		mutex->lock_count--;
   2ae42:	3b01      	subs	r3, #1
   2ae44:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   2ae46:	f001 fb6f 	bl	2c528 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2ae4a:	2000      	movs	r0, #0
}
   2ae4c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2ae4e:	f04f 0320 	mov.w	r3, #32
   2ae52:	f3ef 8511 	mrs	r5, BASEPRI
   2ae56:	f383 8811 	msr	BASEPRI, r3
   2ae5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ae5e:	482f      	ldr	r0, [pc, #188]	; (2af1c <__kernel_ram_size+0x11c>)
   2ae60:	f7ff fcd8 	bl	2a814 <z_spin_lock_valid>
   2ae64:	b968      	cbnz	r0, 2ae82 <__kernel_ram_size+0x82>
   2ae66:	2381      	movs	r3, #129	; 0x81
   2ae68:	4a2d      	ldr	r2, [pc, #180]	; (2af20 <__kernel_ram_size+0x120>)
   2ae6a:	492e      	ldr	r1, [pc, #184]	; (2af24 <__kernel_ram_size+0x124>)
   2ae6c:	4824      	ldr	r0, [pc, #144]	; (2af00 <__kernel_ram_size+0x100>)
   2ae6e:	f004 feff 	bl	2fc70 <printk>
   2ae72:	492a      	ldr	r1, [pc, #168]	; (2af1c <__kernel_ram_size+0x11c>)
   2ae74:	482c      	ldr	r0, [pc, #176]	; (2af28 <__kernel_ram_size+0x128>)
   2ae76:	f004 fefb 	bl	2fc70 <printk>
   2ae7a:	2181      	movs	r1, #129	; 0x81
   2ae7c:	4828      	ldr	r0, [pc, #160]	; (2af20 <__kernel_ram_size+0x120>)
   2ae7e:	f005 f9dd 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2ae82:	4826      	ldr	r0, [pc, #152]	; (2af1c <__kernel_ram_size+0x11c>)
   2ae84:	f7ff fce2 	bl	2a84c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2ae88:	68a0      	ldr	r0, [r4, #8]
   2ae8a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   2ae8c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2ae90:	4299      	cmp	r1, r3
   2ae92:	d001      	beq.n	2ae98 <__kernel_ram_size+0x98>
		return z_set_prio(mutex->owner, new_prio);
   2ae94:	f001 fdde 	bl	2ca54 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2ae98:	4620      	mov	r0, r4
   2ae9a:	f001 fec5 	bl	2cc28 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2ae9e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2aea0:	b158      	cbz	r0, 2aeba <__kernel_ram_size+0xba>
		mutex->owner_orig_prio = new_owner->base.prio;
   2aea2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2aea6:	6122      	str	r2, [r4, #16]
   2aea8:	2200      	movs	r2, #0
   2aeaa:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2aeac:	f001 fcdc 	bl	2c868 <z_ready_thread>
		z_reschedule(&lock, key);
   2aeb0:	4629      	mov	r1, r5
   2aeb2:	481a      	ldr	r0, [pc, #104]	; (2af1c <__kernel_ram_size+0x11c>)
   2aeb4:	f001 f860 	bl	2bf78 <z_reschedule>
   2aeb8:	e7c5      	b.n	2ae46 <__kernel_ram_size+0x46>
		mutex->lock_count = 0U;
   2aeba:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aebc:	4817      	ldr	r0, [pc, #92]	; (2af1c <__kernel_ram_size+0x11c>)
   2aebe:	f7ff fcb7 	bl	2a830 <z_spin_unlock_valid>
   2aec2:	b968      	cbnz	r0, 2aee0 <__kernel_ram_size+0xe0>
   2aec4:	23ac      	movs	r3, #172	; 0xac
   2aec6:	4a16      	ldr	r2, [pc, #88]	; (2af20 <__kernel_ram_size+0x120>)
   2aec8:	4918      	ldr	r1, [pc, #96]	; (2af2c <__kernel_ram_size+0x12c>)
   2aeca:	480d      	ldr	r0, [pc, #52]	; (2af00 <__kernel_ram_size+0x100>)
   2aecc:	f004 fed0 	bl	2fc70 <printk>
   2aed0:	4912      	ldr	r1, [pc, #72]	; (2af1c <__kernel_ram_size+0x11c>)
   2aed2:	4817      	ldr	r0, [pc, #92]	; (2af30 <__kernel_ram_size+0x130>)
   2aed4:	f004 fecc 	bl	2fc70 <printk>
   2aed8:	21ac      	movs	r1, #172	; 0xac
   2aeda:	4811      	ldr	r0, [pc, #68]	; (2af20 <__kernel_ram_size+0x120>)
   2aedc:	f005 f9ae 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2aee0:	f385 8811 	msr	BASEPRI, r5
   2aee4:	f3bf 8f6f 	isb	sy
   2aee8:	e7ad      	b.n	2ae46 <__kernel_ram_size+0x46>
		return -EINVAL;
   2aeea:	f06f 0015 	mvn.w	r0, #21
   2aeee:	e7ad      	b.n	2ae4c <__kernel_ram_size+0x4c>
		return -EPERM;
   2aef0:	f04f 30ff 	mov.w	r0, #4294967295
   2aef4:	e7aa      	b.n	2ae4c <__kernel_ram_size+0x4c>
   2aef6:	bf00      	nop
   2aef8:	00040799 	.word	0x00040799
   2aefc:	0004081f 	.word	0x0004081f
   2af00:	0003a56b 	.word	0x0003a56b
   2af04:	00040841 	.word	0x00040841
   2af08:	20016cd0 	.word	0x20016cd0
   2af0c:	00040866 	.word	0x00040866
   2af10:	0004087d 	.word	0x0004087d
   2af14:	0003aba7 	.word	0x0003aba7
   2af18:	000408a8 	.word	0x000408a8
   2af1c:	20016d00 	.word	0x20016d00
   2af20:	0003a62b 	.word	0x0003a62b
   2af24:	0003a67d 	.word	0x0003a67d
   2af28:	0003a692 	.word	0x0003a692
   2af2c:	0003a651 	.word	0x0003a651
   2af30:	0003a668 	.word	0x0003a668

0002af34 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   2af34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2af38:	4604      	mov	r4, r0
   2af3a:	460e      	mov	r6, r1
   2af3c:	4690      	mov	r8, r2
   2af3e:	4699      	mov	r9, r3
   2af40:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2af44:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2af48:	f04f 0320 	mov.w	r3, #32
   2af4c:	f3ef 8711 	mrs	r7, BASEPRI
   2af50:	f383 8811 	msr	BASEPRI, r3
   2af54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2af58:	4628      	mov	r0, r5
   2af5a:	f7ff fc5b 	bl	2a814 <z_spin_lock_valid>
   2af5e:	b968      	cbnz	r0, 2af7c <queue_insert+0x48>
   2af60:	2381      	movs	r3, #129	; 0x81
   2af62:	4a3b      	ldr	r2, [pc, #236]	; (2b050 <queue_insert+0x11c>)
   2af64:	493b      	ldr	r1, [pc, #236]	; (2b054 <queue_insert+0x120>)
   2af66:	483c      	ldr	r0, [pc, #240]	; (2b058 <queue_insert+0x124>)
   2af68:	f004 fe82 	bl	2fc70 <printk>
   2af6c:	4629      	mov	r1, r5
   2af6e:	483b      	ldr	r0, [pc, #236]	; (2b05c <queue_insert+0x128>)
   2af70:	f004 fe7e 	bl	2fc70 <printk>
   2af74:	2181      	movs	r1, #129	; 0x81
   2af76:	4836      	ldr	r0, [pc, #216]	; (2b050 <queue_insert+0x11c>)
   2af78:	f005 f960 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2af7c:	4628      	mov	r0, r5
   2af7e:	f7ff fc65 	bl	2a84c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   2af82:	f1ba 0f00 	cmp.w	sl, #0
   2af86:	d000      	beq.n	2af8a <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   2af88:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2af8a:	f104 000c 	add.w	r0, r4, #12
   2af8e:	f001 fe4b 	bl	2cc28 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2af92:	b158      	cbz	r0, 2afac <queue_insert+0x78>
   2af94:	2400      	movs	r4, #0
   2af96:	f8c0 8014 	str.w	r8, [r0, #20]
   2af9a:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2af9c:	f001 fc64 	bl	2c868 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2afa0:	4628      	mov	r0, r5
   2afa2:	4639      	mov	r1, r7
   2afa4:	f000 ffe8 	bl	2bf78 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   2afa8:	2000      	movs	r0, #0
   2afaa:	e01e      	b.n	2afea <queue_insert+0xb6>
	if (alloc) {
   2afac:	f1b9 0f00 	cmp.w	r9, #0
   2afb0:	d02d      	beq.n	2b00e <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   2afb2:	2108      	movs	r1, #8
   2afb4:	f003 f9a4 	bl	2e300 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2afb8:	b9c8      	cbnz	r0, 2afee <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2afba:	4628      	mov	r0, r5
   2afbc:	f7ff fc38 	bl	2a830 <z_spin_unlock_valid>
   2afc0:	b968      	cbnz	r0, 2afde <queue_insert+0xaa>
   2afc2:	23ac      	movs	r3, #172	; 0xac
   2afc4:	4a22      	ldr	r2, [pc, #136]	; (2b050 <queue_insert+0x11c>)
   2afc6:	4926      	ldr	r1, [pc, #152]	; (2b060 <queue_insert+0x12c>)
   2afc8:	4823      	ldr	r0, [pc, #140]	; (2b058 <queue_insert+0x124>)
   2afca:	f004 fe51 	bl	2fc70 <printk>
   2afce:	4629      	mov	r1, r5
   2afd0:	4824      	ldr	r0, [pc, #144]	; (2b064 <queue_insert+0x130>)
   2afd2:	f004 fe4d 	bl	2fc70 <printk>
   2afd6:	21ac      	movs	r1, #172	; 0xac
   2afd8:	481d      	ldr	r0, [pc, #116]	; (2b050 <queue_insert+0x11c>)
   2afda:	f005 f92f 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2afde:	f387 8811 	msr	BASEPRI, r7
   2afe2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2afe6:	f06f 000b 	mvn.w	r0, #11
}
   2afea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2afee:	2301      	movs	r3, #1
		anode->data = data;
   2aff0:	f8c0 8004 	str.w	r8, [r0, #4]
   2aff4:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2aff6:	6803      	ldr	r3, [r0, #0]
   2aff8:	f003 0303 	and.w	r3, r3, #3
   2affc:	b95e      	cbnz	r6, 2b016 <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2affe:	6822      	ldr	r2, [r4, #0]
   2b000:	4313      	orrs	r3, r2
   2b002:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2b004:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2b006:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2b008:	b973      	cbnz	r3, 2b028 <queue_insert+0xf4>
	list->tail = node;
   2b00a:	6060      	str	r0, [r4, #4]
}
   2b00c:	e00c      	b.n	2b028 <queue_insert+0xf4>
}
   2b00e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2b010:	f8c8 9000 	str.w	r9, [r8]
}
   2b014:	e7ef      	b.n	2aff6 <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b016:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2b018:	f032 0203 	bics.w	r2, r2, #3
   2b01c:	d110      	bne.n	2b040 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   2b01e:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b020:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2b022:	b93a      	cbnz	r2, 2b034 <queue_insert+0x100>
	list->head = node;
   2b024:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2b028:	2104      	movs	r1, #4
   2b02a:	f104 0014 	add.w	r0, r4, #20
   2b02e:	f00c fb59 	bl	376e4 <z_handle_obj_poll_events>
   2b032:	e7b5      	b.n	2afa0 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b034:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b036:	f003 0303 	and.w	r3, r3, #3
   2b03a:	4303      	orrs	r3, r0
   2b03c:	6013      	str	r3, [r2, #0]
   2b03e:	e7e4      	b.n	2b00a <queue_insert+0xd6>
   2b040:	4313      	orrs	r3, r2
   2b042:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b044:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b046:	f003 0303 	and.w	r3, r3, #3
   2b04a:	4303      	orrs	r3, r0
   2b04c:	6033      	str	r3, [r6, #0]
}
   2b04e:	e7eb      	b.n	2b028 <queue_insert+0xf4>
   2b050:	0003a62b 	.word	0x0003a62b
   2b054:	0003a67d 	.word	0x0003a67d
   2b058:	0003a56b 	.word	0x0003a56b
   2b05c:	0003a692 	.word	0x0003a692
   2b060:	0003a651 	.word	0x0003a651
   2b064:	0003a668 	.word	0x0003a668

0002b068 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   2b068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b06c:	4605      	mov	r5, r0
   2b06e:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   2b070:	460c      	mov	r4, r1
   2b072:	2900      	cmp	r1, #0
   2b074:	d04a      	beq.n	2b10c <k_queue_append_list+0xa4>
   2b076:	2a00      	cmp	r2, #0
   2b078:	d048      	beq.n	2b10c <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2b07a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2b07e:	f04f 0320 	mov.w	r3, #32
   2b082:	f3ef 8911 	mrs	r9, BASEPRI
   2b086:	f383 8811 	msr	BASEPRI, r3
   2b08a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b08e:	4630      	mov	r0, r6
   2b090:	f7ff fbc0 	bl	2a814 <z_spin_lock_valid>
   2b094:	b968      	cbnz	r0, 2b0b2 <k_queue_append_list+0x4a>
   2b096:	2381      	movs	r3, #129	; 0x81
   2b098:	4a1e      	ldr	r2, [pc, #120]	; (2b114 <k_queue_append_list+0xac>)
   2b09a:	491f      	ldr	r1, [pc, #124]	; (2b118 <k_queue_append_list+0xb0>)
   2b09c:	481f      	ldr	r0, [pc, #124]	; (2b11c <k_queue_append_list+0xb4>)
   2b09e:	f004 fde7 	bl	2fc70 <printk>
   2b0a2:	4631      	mov	r1, r6
   2b0a4:	481e      	ldr	r0, [pc, #120]	; (2b120 <k_queue_append_list+0xb8>)
   2b0a6:	f004 fde3 	bl	2fc70 <printk>
   2b0aa:	2181      	movs	r1, #129	; 0x81
   2b0ac:	4819      	ldr	r0, [pc, #100]	; (2b114 <k_queue_append_list+0xac>)
   2b0ae:	f005 f8c5 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2b0b2:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   2b0b4:	f105 080c 	add.w	r8, r5, #12
   2b0b8:	f7ff fbc8 	bl	2a84c <z_spin_lock_set_owner>
   2b0bc:	4640      	mov	r0, r8
   2b0be:	f001 fdb3 	bl	2cc28 <z_unpend_first_thread>
   2b0c2:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   2b0c6:	b920      	cbnz	r0, 2b0d2 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2b0c8:	686b      	ldr	r3, [r5, #4]
   2b0ca:	b9cb      	cbnz	r3, 2b100 <k_queue_append_list+0x98>
	list->head = node;
   2b0cc:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2b0ce:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2b0d0:	e00a      	b.n	2b0e8 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   2b0d2:	6144      	str	r4, [r0, #20]
   2b0d4:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2b0d8:	f001 fbc6 	bl	2c868 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   2b0dc:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2b0de:	4640      	mov	r0, r8
   2b0e0:	f001 fda2 	bl	2cc28 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2b0e4:	2c00      	cmp	r4, #0
   2b0e6:	d1ee      	bne.n	2b0c6 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2b0e8:	2104      	movs	r1, #4
   2b0ea:	f105 0014 	add.w	r0, r5, #20
   2b0ee:	f00c faf9 	bl	376e4 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2b0f2:	4630      	mov	r0, r6
   2b0f4:	4649      	mov	r1, r9
   2b0f6:	f000 ff3f 	bl	2bf78 <z_reschedule>
	return 0;
   2b0fa:	2000      	movs	r0, #0
}
   2b0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b100:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b102:	f001 0103 	and.w	r1, r1, #3
   2b106:	430c      	orrs	r4, r1
   2b108:	601c      	str	r4, [r3, #0]
}
   2b10a:	e7e0      	b.n	2b0ce <k_queue_append_list+0x66>
		return -EINVAL;
   2b10c:	f06f 0015 	mvn.w	r0, #21
   2b110:	e7f4      	b.n	2b0fc <k_queue_append_list+0x94>
   2b112:	bf00      	nop
   2b114:	0003a62b 	.word	0x0003a62b
   2b118:	0003a67d 	.word	0x0003a67d
   2b11c:	0003a56b 	.word	0x0003a56b
   2b120:	0003a692 	.word	0x0003a692

0002b124 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2b124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b128:	4606      	mov	r6, r0
   2b12a:	4690      	mov	r8, r2
   2b12c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2b12e:	f100 0508 	add.w	r5, r0, #8
   2b132:	f04f 0320 	mov.w	r3, #32
   2b136:	f3ef 8711 	mrs	r7, BASEPRI
   2b13a:	f383 8811 	msr	BASEPRI, r3
   2b13e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b142:	4628      	mov	r0, r5
   2b144:	f7ff fb66 	bl	2a814 <z_spin_lock_valid>
   2b148:	b968      	cbnz	r0, 2b166 <z_impl_k_queue_get+0x42>
   2b14a:	2381      	movs	r3, #129	; 0x81
   2b14c:	4a25      	ldr	r2, [pc, #148]	; (2b1e4 <z_impl_k_queue_get+0xc0>)
   2b14e:	4926      	ldr	r1, [pc, #152]	; (2b1e8 <z_impl_k_queue_get+0xc4>)
   2b150:	4826      	ldr	r0, [pc, #152]	; (2b1ec <z_impl_k_queue_get+0xc8>)
   2b152:	f004 fd8d 	bl	2fc70 <printk>
   2b156:	4629      	mov	r1, r5
   2b158:	4825      	ldr	r0, [pc, #148]	; (2b1f0 <z_impl_k_queue_get+0xcc>)
   2b15a:	f004 fd89 	bl	2fc70 <printk>
   2b15e:	2181      	movs	r1, #129	; 0x81
   2b160:	4820      	ldr	r0, [pc, #128]	; (2b1e4 <z_impl_k_queue_get+0xc0>)
   2b162:	f005 f86b 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2b166:	4628      	mov	r0, r5
   2b168:	f7ff fb70 	bl	2a84c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2b16c:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2b16e:	b33c      	cbz	r4, 2b1c0 <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b170:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2b172:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b174:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2b178:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2b17a:	4620      	mov	r0, r4
   2b17c:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   2b180:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2b182:	bf08      	it	eq
   2b184:	6073      	streq	r3, [r6, #4]
   2b186:	f00c f95d 	bl	37444 <z_queue_node_peek>
   2b18a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b18c:	4628      	mov	r0, r5
   2b18e:	f7ff fb4f 	bl	2a830 <z_spin_unlock_valid>
   2b192:	b968      	cbnz	r0, 2b1b0 <z_impl_k_queue_get+0x8c>
   2b194:	23ac      	movs	r3, #172	; 0xac
   2b196:	4a13      	ldr	r2, [pc, #76]	; (2b1e4 <z_impl_k_queue_get+0xc0>)
   2b198:	4916      	ldr	r1, [pc, #88]	; (2b1f4 <z_impl_k_queue_get+0xd0>)
   2b19a:	4814      	ldr	r0, [pc, #80]	; (2b1ec <z_impl_k_queue_get+0xc8>)
   2b19c:	f004 fd68 	bl	2fc70 <printk>
   2b1a0:	4629      	mov	r1, r5
   2b1a2:	4815      	ldr	r0, [pc, #84]	; (2b1f8 <z_impl_k_queue_get+0xd4>)
   2b1a4:	f004 fd64 	bl	2fc70 <printk>
   2b1a8:	21ac      	movs	r1, #172	; 0xac
   2b1aa:	480e      	ldr	r0, [pc, #56]	; (2b1e4 <z_impl_k_queue_get+0xc0>)
   2b1ac:	f005 f846 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2b1b0:	f387 8811 	msr	BASEPRI, r7
   2b1b4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2b1b8:	4620      	mov	r0, r4
   2b1ba:	b003      	add	sp, #12
   2b1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b1c0:	ea58 0309 	orrs.w	r3, r8, r9
   2b1c4:	d0e2      	beq.n	2b18c <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2b1c6:	4639      	mov	r1, r7
   2b1c8:	4628      	mov	r0, r5
   2b1ca:	e9cd 8900 	strd	r8, r9, [sp]
   2b1ce:	f106 020c 	add.w	r2, r6, #12
   2b1d2:	f001 f90f 	bl	2c3f4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2b1d6:	2800      	cmp	r0, #0
   2b1d8:	d1ee      	bne.n	2b1b8 <z_impl_k_queue_get+0x94>
   2b1da:	4b08      	ldr	r3, [pc, #32]	; (2b1fc <z_impl_k_queue_get+0xd8>)
   2b1dc:	689b      	ldr	r3, [r3, #8]
   2b1de:	695c      	ldr	r4, [r3, #20]
   2b1e0:	e7ea      	b.n	2b1b8 <z_impl_k_queue_get+0x94>
   2b1e2:	bf00      	nop
   2b1e4:	0003a62b 	.word	0x0003a62b
   2b1e8:	0003a67d 	.word	0x0003a67d
   2b1ec:	0003a56b 	.word	0x0003a56b
   2b1f0:	0003a692 	.word	0x0003a692
   2b1f4:	0003a651 	.word	0x0003a651
   2b1f8:	0003a668 	.word	0x0003a668
   2b1fc:	20016cd0 	.word	0x20016cd0

0002b200 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2b200:	b538      	push	{r3, r4, r5, lr}
   2b202:	4604      	mov	r4, r0
	__asm__ volatile(
   2b204:	f04f 0320 	mov.w	r3, #32
   2b208:	f3ef 8511 	mrs	r5, BASEPRI
   2b20c:	f383 8811 	msr	BASEPRI, r3
   2b210:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b214:	4817      	ldr	r0, [pc, #92]	; (2b274 <z_impl_k_sem_give+0x74>)
   2b216:	f7ff fafd 	bl	2a814 <z_spin_lock_valid>
   2b21a:	b968      	cbnz	r0, 2b238 <z_impl_k_sem_give+0x38>
   2b21c:	2381      	movs	r3, #129	; 0x81
   2b21e:	4a16      	ldr	r2, [pc, #88]	; (2b278 <z_impl_k_sem_give+0x78>)
   2b220:	4916      	ldr	r1, [pc, #88]	; (2b27c <z_impl_k_sem_give+0x7c>)
   2b222:	4817      	ldr	r0, [pc, #92]	; (2b280 <z_impl_k_sem_give+0x80>)
   2b224:	f004 fd24 	bl	2fc70 <printk>
   2b228:	4912      	ldr	r1, [pc, #72]	; (2b274 <z_impl_k_sem_give+0x74>)
   2b22a:	4816      	ldr	r0, [pc, #88]	; (2b284 <z_impl_k_sem_give+0x84>)
   2b22c:	f004 fd20 	bl	2fc70 <printk>
   2b230:	2181      	movs	r1, #129	; 0x81
   2b232:	4811      	ldr	r0, [pc, #68]	; (2b278 <z_impl_k_sem_give+0x78>)
   2b234:	f005 f802 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2b238:	480e      	ldr	r0, [pc, #56]	; (2b274 <z_impl_k_sem_give+0x74>)
   2b23a:	f7ff fb07 	bl	2a84c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2b23e:	4620      	mov	r0, r4
   2b240:	f001 fcf2 	bl	2cc28 <z_unpend_first_thread>

	if (thread != NULL) {
   2b244:	b148      	cbz	r0, 2b25a <z_impl_k_sem_give+0x5a>
   2b246:	2200      	movs	r2, #0
   2b248:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2b24a:	f001 fb0d 	bl	2c868 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2b24e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2b250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2b254:	4807      	ldr	r0, [pc, #28]	; (2b274 <z_impl_k_sem_give+0x74>)
   2b256:	f000 be8f 	b.w	2bf78 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2b25a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2b25e:	429a      	cmp	r2, r3
   2b260:	bf18      	it	ne
   2b262:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2b264:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2b266:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2b268:	f104 0010 	add.w	r0, r4, #16
   2b26c:	f00c fa3a 	bl	376e4 <z_handle_obj_poll_events>
}
   2b270:	e7ed      	b.n	2b24e <z_impl_k_sem_give+0x4e>
   2b272:	bf00      	nop
   2b274:	20016d04 	.word	0x20016d04
   2b278:	0003a62b 	.word	0x0003a62b
   2b27c:	0003a67d 	.word	0x0003a67d
   2b280:	0003a56b 	.word	0x0003a56b
   2b284:	0003a692 	.word	0x0003a692

0002b288 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2b288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b28a:	4604      	mov	r4, r0
   2b28c:	4616      	mov	r6, r2
   2b28e:	461f      	mov	r7, r3
   2b290:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2b294:	b17b      	cbz	r3, 2b2b6 <z_impl_k_sem_take+0x2e>
   2b296:	ea56 0307 	orrs.w	r3, r6, r7
   2b29a:	d00c      	beq.n	2b2b6 <z_impl_k_sem_take+0x2e>
   2b29c:	4935      	ldr	r1, [pc, #212]	; (2b374 <z_impl_k_sem_take+0xec>)
   2b29e:	2379      	movs	r3, #121	; 0x79
   2b2a0:	4a35      	ldr	r2, [pc, #212]	; (2b378 <z_impl_k_sem_take+0xf0>)
   2b2a2:	4836      	ldr	r0, [pc, #216]	; (2b37c <z_impl_k_sem_take+0xf4>)
   2b2a4:	f004 fce4 	bl	2fc70 <printk>
   2b2a8:	4835      	ldr	r0, [pc, #212]	; (2b380 <z_impl_k_sem_take+0xf8>)
   2b2aa:	f004 fce1 	bl	2fc70 <printk>
   2b2ae:	2179      	movs	r1, #121	; 0x79
   2b2b0:	4831      	ldr	r0, [pc, #196]	; (2b378 <z_impl_k_sem_take+0xf0>)
   2b2b2:	f004 ffc3 	bl	3023c <assert_post_action>
   2b2b6:	f04f 0320 	mov.w	r3, #32
   2b2ba:	f3ef 8511 	mrs	r5, BASEPRI
   2b2be:	f383 8811 	msr	BASEPRI, r3
   2b2c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b2c6:	482f      	ldr	r0, [pc, #188]	; (2b384 <z_impl_k_sem_take+0xfc>)
   2b2c8:	f7ff faa4 	bl	2a814 <z_spin_lock_valid>
   2b2cc:	b968      	cbnz	r0, 2b2ea <z_impl_k_sem_take+0x62>
   2b2ce:	2381      	movs	r3, #129	; 0x81
   2b2d0:	4a2d      	ldr	r2, [pc, #180]	; (2b388 <z_impl_k_sem_take+0x100>)
   2b2d2:	492e      	ldr	r1, [pc, #184]	; (2b38c <z_impl_k_sem_take+0x104>)
   2b2d4:	4829      	ldr	r0, [pc, #164]	; (2b37c <z_impl_k_sem_take+0xf4>)
   2b2d6:	f004 fccb 	bl	2fc70 <printk>
   2b2da:	492a      	ldr	r1, [pc, #168]	; (2b384 <z_impl_k_sem_take+0xfc>)
   2b2dc:	482c      	ldr	r0, [pc, #176]	; (2b390 <z_impl_k_sem_take+0x108>)
   2b2de:	f004 fcc7 	bl	2fc70 <printk>
   2b2e2:	2181      	movs	r1, #129	; 0x81
   2b2e4:	4828      	ldr	r0, [pc, #160]	; (2b388 <z_impl_k_sem_take+0x100>)
   2b2e6:	f004 ffa9 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2b2ea:	4826      	ldr	r0, [pc, #152]	; (2b384 <z_impl_k_sem_take+0xfc>)
   2b2ec:	f7ff faae 	bl	2a84c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2b2f0:	68a3      	ldr	r3, [r4, #8]
   2b2f2:	b1d3      	cbz	r3, 2b32a <z_impl_k_sem_take+0xa2>
		sem->count--;
   2b2f4:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b2f6:	4823      	ldr	r0, [pc, #140]	; (2b384 <z_impl_k_sem_take+0xfc>)
   2b2f8:	60a3      	str	r3, [r4, #8]
   2b2fa:	f7ff fa99 	bl	2a830 <z_spin_unlock_valid>
   2b2fe:	b968      	cbnz	r0, 2b31c <z_impl_k_sem_take+0x94>
   2b300:	23ac      	movs	r3, #172	; 0xac
   2b302:	4a21      	ldr	r2, [pc, #132]	; (2b388 <z_impl_k_sem_take+0x100>)
   2b304:	4923      	ldr	r1, [pc, #140]	; (2b394 <z_impl_k_sem_take+0x10c>)
   2b306:	481d      	ldr	r0, [pc, #116]	; (2b37c <z_impl_k_sem_take+0xf4>)
   2b308:	f004 fcb2 	bl	2fc70 <printk>
   2b30c:	491d      	ldr	r1, [pc, #116]	; (2b384 <z_impl_k_sem_take+0xfc>)
   2b30e:	4822      	ldr	r0, [pc, #136]	; (2b398 <z_impl_k_sem_take+0x110>)
   2b310:	f004 fcae 	bl	2fc70 <printk>
   2b314:	21ac      	movs	r1, #172	; 0xac
   2b316:	481c      	ldr	r0, [pc, #112]	; (2b388 <z_impl_k_sem_take+0x100>)
   2b318:	f004 ff90 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2b31c:	f385 8811 	msr	BASEPRI, r5
   2b320:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2b324:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2b326:	b003      	add	sp, #12
   2b328:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b32a:	ea56 0307 	orrs.w	r3, r6, r7
   2b32e:	d118      	bne.n	2b362 <z_impl_k_sem_take+0xda>
   2b330:	4814      	ldr	r0, [pc, #80]	; (2b384 <z_impl_k_sem_take+0xfc>)
   2b332:	f7ff fa7d 	bl	2a830 <z_spin_unlock_valid>
   2b336:	b968      	cbnz	r0, 2b354 <z_impl_k_sem_take+0xcc>
   2b338:	23ac      	movs	r3, #172	; 0xac
   2b33a:	4a13      	ldr	r2, [pc, #76]	; (2b388 <z_impl_k_sem_take+0x100>)
   2b33c:	4915      	ldr	r1, [pc, #84]	; (2b394 <z_impl_k_sem_take+0x10c>)
   2b33e:	480f      	ldr	r0, [pc, #60]	; (2b37c <z_impl_k_sem_take+0xf4>)
   2b340:	f004 fc96 	bl	2fc70 <printk>
   2b344:	490f      	ldr	r1, [pc, #60]	; (2b384 <z_impl_k_sem_take+0xfc>)
   2b346:	4814      	ldr	r0, [pc, #80]	; (2b398 <z_impl_k_sem_take+0x110>)
   2b348:	f004 fc92 	bl	2fc70 <printk>
   2b34c:	21ac      	movs	r1, #172	; 0xac
   2b34e:	480e      	ldr	r0, [pc, #56]	; (2b388 <z_impl_k_sem_take+0x100>)
   2b350:	f004 ff74 	bl	3023c <assert_post_action>
   2b354:	f385 8811 	msr	BASEPRI, r5
   2b358:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2b35c:	f06f 000f 	mvn.w	r0, #15
   2b360:	e7e1      	b.n	2b326 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2b362:	4622      	mov	r2, r4
   2b364:	4629      	mov	r1, r5
   2b366:	e9cd 6700 	strd	r6, r7, [sp]
   2b36a:	4806      	ldr	r0, [pc, #24]	; (2b384 <z_impl_k_sem_take+0xfc>)
   2b36c:	f001 f842 	bl	2c3f4 <z_pend_curr>
	return ret;
   2b370:	e7d9      	b.n	2b326 <z_impl_k_sem_take+0x9e>
   2b372:	bf00      	nop
   2b374:	000408f9 	.word	0x000408f9
   2b378:	000408d9 	.word	0x000408d9
   2b37c:	0003a56b 	.word	0x0003a56b
   2b380:	0003aba7 	.word	0x0003aba7
   2b384:	20016d04 	.word	0x20016d04
   2b388:	0003a62b 	.word	0x0003a62b
   2b38c:	0003a67d 	.word	0x0003a67d
   2b390:	0003a692 	.word	0x0003a692
   2b394:	0003a651 	.word	0x0003a651
   2b398:	0003a668 	.word	0x0003a668

0002b39c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2b39c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2b39e:	2400      	movs	r4, #0
   2b3a0:	4b08      	ldr	r3, [pc, #32]	; (2b3c4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2b3a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	struct k_work_queue_config cfg = {
   2b3a6:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   2b3a8:	ab02      	add	r3, sp, #8
   2b3aa:	9300      	str	r3, [sp, #0]
   2b3ac:	4906      	ldr	r1, [pc, #24]	; (2b3c8 <k_sys_work_q_init+0x2c>)
   2b3ae:	f04f 33ff 	mov.w	r3, #4294967295
   2b3b2:	4806      	ldr	r0, [pc, #24]	; (2b3cc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2b3b4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   2b3b8:	f000 fa88 	bl	2b8cc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2b3bc:	4620      	mov	r0, r4
   2b3be:	b004      	add	sp, #16
   2b3c0:	bd10      	pop	{r4, pc}
   2b3c2:	bf00      	nop
   2b3c4:	00040946 	.word	0x00040946
   2b3c8:	20023a30 	.word	0x20023a30
   2b3cc:	20015e68 	.word	0x20015e68

0002b3d0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   2b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3d4:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b3d6:	4e7e      	ldr	r6, [pc, #504]	; (2b5d0 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2b3d8:	4f7e      	ldr	r7, [pc, #504]	; (2b5d4 <work_queue_main+0x204>)
{
   2b3da:	b085      	sub	sp, #20
	__asm__ volatile(
   2b3dc:	f04f 0320 	mov.w	r3, #32
   2b3e0:	f3ef 8811 	mrs	r8, BASEPRI
   2b3e4:	f383 8811 	msr	BASEPRI, r3
   2b3e8:	f3bf 8f6f 	isb	sy
   2b3ec:	4630      	mov	r0, r6
   2b3ee:	f7ff fa11 	bl	2a814 <z_spin_lock_valid>
   2b3f2:	b968      	cbnz	r0, 2b410 <work_queue_main+0x40>
   2b3f4:	2381      	movs	r3, #129	; 0x81
   2b3f6:	4a78      	ldr	r2, [pc, #480]	; (2b5d8 <work_queue_main+0x208>)
   2b3f8:	4978      	ldr	r1, [pc, #480]	; (2b5dc <work_queue_main+0x20c>)
   2b3fa:	4879      	ldr	r0, [pc, #484]	; (2b5e0 <work_queue_main+0x210>)
   2b3fc:	f004 fc38 	bl	2fc70 <printk>
   2b400:	4631      	mov	r1, r6
   2b402:	4878      	ldr	r0, [pc, #480]	; (2b5e4 <work_queue_main+0x214>)
   2b404:	f004 fc34 	bl	2fc70 <printk>
   2b408:	2181      	movs	r1, #129	; 0x81
   2b40a:	4873      	ldr	r0, [pc, #460]	; (2b5d8 <work_queue_main+0x208>)
   2b40c:	f004 ff16 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2b410:	4630      	mov	r0, r6
   2b412:	f7ff fa1b 	bl	2a84c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   2b416:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   2b41a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   2b41e:	b9ad      	cbnz	r5, 2b44c <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   2b420:	f023 0204 	bic.w	r2, r3, #4
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   2b424:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   2b426:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   2b42a:	f100 8092 	bmi.w	2b552 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2b42e:	2300      	movs	r3, #0
   2b430:	f04f 32ff 	mov.w	r2, #4294967295
   2b434:	9302      	str	r3, [sp, #8]
   2b436:	f04f 33ff 	mov.w	r3, #4294967295
   2b43a:	4641      	mov	r1, r8
   2b43c:	e9cd 2300 	strd	r2, r3, [sp]
   2b440:	4630      	mov	r0, r6
   2b442:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2b446:	f001 fef5 	bl	2d234 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   2b44a:	e7c7      	b.n	2b3dc <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b44c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   2b450:	682a      	ldr	r2, [r5, #0]
   2b452:	428d      	cmp	r5, r1
	list->head = node;
   2b454:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b458:	d101      	bne.n	2b45e <work_queue_main+0x8e>
	list->tail = node;
   2b45a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   2b45e:	f043 0302 	orr.w	r3, r3, #2
   2b462:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2b466:	68eb      	ldr	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b468:	4630      	mov	r0, r6
   2b46a:	f023 0304 	bic.w	r3, r3, #4
   2b46e:	f043 0301 	orr.w	r3, r3, #1
   2b472:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2b474:	f8d5 9004 	ldr.w	r9, [r5, #4]
   2b478:	f7ff f9da 	bl	2a830 <z_spin_unlock_valid>
   2b47c:	b968      	cbnz	r0, 2b49a <work_queue_main+0xca>
   2b47e:	23ac      	movs	r3, #172	; 0xac
   2b480:	4a55      	ldr	r2, [pc, #340]	; (2b5d8 <work_queue_main+0x208>)
   2b482:	4959      	ldr	r1, [pc, #356]	; (2b5e8 <work_queue_main+0x218>)
   2b484:	4856      	ldr	r0, [pc, #344]	; (2b5e0 <work_queue_main+0x210>)
   2b486:	f004 fbf3 	bl	2fc70 <printk>
   2b48a:	4631      	mov	r1, r6
   2b48c:	4857      	ldr	r0, [pc, #348]	; (2b5ec <work_queue_main+0x21c>)
   2b48e:	f004 fbef 	bl	2fc70 <printk>
   2b492:	21ac      	movs	r1, #172	; 0xac
   2b494:	4850      	ldr	r0, [pc, #320]	; (2b5d8 <work_queue_main+0x208>)
   2b496:	f004 fed1 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2b49a:	f388 8811 	msr	BASEPRI, r8
   2b49e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   2b4a2:	f1b9 0f00 	cmp.w	r9, #0
   2b4a6:	d10b      	bne.n	2b4c0 <work_queue_main+0xf0>
   2b4a8:	4951      	ldr	r1, [pc, #324]	; (2b5f0 <work_queue_main+0x220>)
   2b4aa:	484d      	ldr	r0, [pc, #308]	; (2b5e0 <work_queue_main+0x210>)
   2b4ac:	f240 237d 	movw	r3, #637	; 0x27d
   2b4b0:	4a50      	ldr	r2, [pc, #320]	; (2b5f4 <work_queue_main+0x224>)
   2b4b2:	f004 fbdd 	bl	2fc70 <printk>
   2b4b6:	f240 217d 	movw	r1, #637	; 0x27d
   2b4ba:	484e      	ldr	r0, [pc, #312]	; (2b5f4 <work_queue_main+0x224>)
   2b4bc:	f004 febe 	bl	3023c <assert_post_action>
			handler(work);
   2b4c0:	4628      	mov	r0, r5
   2b4c2:	47c8      	blx	r9
	__asm__ volatile(
   2b4c4:	f04f 0320 	mov.w	r3, #32
   2b4c8:	f3ef 8a11 	mrs	sl, BASEPRI
   2b4cc:	f383 8811 	msr	BASEPRI, r3
   2b4d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b4d4:	4630      	mov	r0, r6
   2b4d6:	f7ff f99d 	bl	2a814 <z_spin_lock_valid>
   2b4da:	b968      	cbnz	r0, 2b4f8 <work_queue_main+0x128>
   2b4dc:	2381      	movs	r3, #129	; 0x81
   2b4de:	4a3e      	ldr	r2, [pc, #248]	; (2b5d8 <work_queue_main+0x208>)
   2b4e0:	493e      	ldr	r1, [pc, #248]	; (2b5dc <work_queue_main+0x20c>)
   2b4e2:	483f      	ldr	r0, [pc, #252]	; (2b5e0 <work_queue_main+0x210>)
   2b4e4:	f004 fbc4 	bl	2fc70 <printk>
   2b4e8:	4631      	mov	r1, r6
   2b4ea:	483e      	ldr	r0, [pc, #248]	; (2b5e4 <work_queue_main+0x214>)
   2b4ec:	f004 fbc0 	bl	2fc70 <printk>
   2b4f0:	2181      	movs	r1, #129	; 0x81
   2b4f2:	4839      	ldr	r0, [pc, #228]	; (2b5d8 <work_queue_main+0x208>)
   2b4f4:	f004 fea2 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2b4f8:	4630      	mov	r0, r6
   2b4fa:	f7ff f9a7 	bl	2a84c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   2b4fe:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b500:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2b502:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b506:	d42e      	bmi.n	2b566 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   2b508:	60ea      	str	r2, [r5, #12]
   2b50a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b50e:	4630      	mov	r0, r6
   2b510:	f023 0302 	bic.w	r3, r3, #2
   2b514:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   2b518:	f3c3 2500 	ubfx	r5, r3, #8, #1
   2b51c:	f7ff f988 	bl	2a830 <z_spin_unlock_valid>
   2b520:	b968      	cbnz	r0, 2b53e <work_queue_main+0x16e>
   2b522:	23ac      	movs	r3, #172	; 0xac
   2b524:	4a2c      	ldr	r2, [pc, #176]	; (2b5d8 <work_queue_main+0x208>)
   2b526:	4930      	ldr	r1, [pc, #192]	; (2b5e8 <work_queue_main+0x218>)
   2b528:	482d      	ldr	r0, [pc, #180]	; (2b5e0 <work_queue_main+0x210>)
   2b52a:	f004 fba1 	bl	2fc70 <printk>
   2b52e:	4631      	mov	r1, r6
   2b530:	482e      	ldr	r0, [pc, #184]	; (2b5ec <work_queue_main+0x21c>)
   2b532:	f004 fb9d 	bl	2fc70 <printk>
   2b536:	21ac      	movs	r1, #172	; 0xac
   2b538:	4827      	ldr	r0, [pc, #156]	; (2b5d8 <work_queue_main+0x208>)
   2b53a:	f004 fe7f 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2b53e:	f38a 8811 	msr	BASEPRI, sl
   2b542:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   2b546:	2d00      	cmp	r5, #0
   2b548:	f47f af48 	bne.w	2b3dc <work_queue_main+0xc>
	z_impl_k_yield();
   2b54c:	f001 fbc8 	bl	2cce0 <z_impl_k_yield>
}
   2b550:	e744      	b.n	2b3dc <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2b552:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2b556:	2200      	movs	r2, #0
   2b558:	2101      	movs	r1, #1
   2b55a:	4628      	mov	r0, r5
   2b55c:	f001 fe12 	bl	2d184 <z_sched_wake>
   2b560:	2800      	cmp	r0, #0
   2b562:	d1f8      	bne.n	2b556 <work_queue_main+0x186>
   2b564:	e763      	b.n	2b42e <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2b566:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   2b568:	f023 0303 	bic.w	r3, r3, #3
   2b56c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2b56e:	2800      	cmp	r0, #0
   2b570:	d0cb      	beq.n	2b50a <work_queue_main+0x13a>
	return node->next;
   2b572:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b574:	f04f 0900 	mov.w	r9, #0
   2b578:	2b00      	cmp	r3, #0
   2b57a:	bf38      	it	cc
   2b57c:	2300      	movcc	r3, #0
	parent->next = child;
   2b57e:	46cb      	mov	fp, r9
   2b580:	4698      	mov	r8, r3
		if (wc->work == work) {
   2b582:	6843      	ldr	r3, [r0, #4]
   2b584:	4602      	mov	r2, r0
   2b586:	429d      	cmp	r5, r3
   2b588:	d10d      	bne.n	2b5a6 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   2b58a:	6802      	ldr	r2, [r0, #0]
   2b58c:	f1b9 0f00 	cmp.w	r9, #0
   2b590:	d115      	bne.n	2b5be <work_queue_main+0x1ee>
   2b592:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   2b594:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b596:	4283      	cmp	r3, r0
   2b598:	d100      	bne.n	2b59c <work_queue_main+0x1cc>
	list->tail = node;
   2b59a:	607a      	str	r2, [r7, #4]
	parent->next = child;
   2b59c:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   2b5a0:	f7ff fe2e 	bl	2b200 <z_impl_k_sem_give>
}
   2b5a4:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2b5a6:	f1b8 0f00 	cmp.w	r8, #0
   2b5aa:	d0ae      	beq.n	2b50a <work_queue_main+0x13a>
	return node->next;
   2b5ac:	f8d8 3000 	ldr.w	r3, [r8]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b5b0:	4640      	mov	r0, r8
   2b5b2:	2b00      	cmp	r3, #0
   2b5b4:	bf38      	it	cc
   2b5b6:	2300      	movcc	r3, #0
   2b5b8:	4691      	mov	r9, r2
   2b5ba:	4698      	mov	r8, r3
   2b5bc:	e7e1      	b.n	2b582 <work_queue_main+0x1b2>
	parent->next = child;
   2b5be:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   2b5c2:	687b      	ldr	r3, [r7, #4]
   2b5c4:	4283      	cmp	r3, r0
	list->tail = node;
   2b5c6:	bf08      	it	eq
   2b5c8:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   2b5cc:	e7e6      	b.n	2b59c <work_queue_main+0x1cc>
   2b5ce:	bf00      	nop
   2b5d0:	20016d08 	.word	0x20016d08
   2b5d4:	20016d0c 	.word	0x20016d0c
   2b5d8:	0003a62b 	.word	0x0003a62b
   2b5dc:	0003a67d 	.word	0x0003a67d
   2b5e0:	0003a56b 	.word	0x0003a56b
   2b5e4:	0003a692 	.word	0x0003a692
   2b5e8:	0003a651 	.word	0x0003a651
   2b5ec:	0003a668 	.word	0x0003a668
   2b5f0:	00040970 	.word	0x00040970
   2b5f4:	0004094f 	.word	0x0004094f

0002b5f8 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2b5f8:	68c3      	ldr	r3, [r0, #12]
{
   2b5fa:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2b5fc:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2b600:	079b      	lsls	r3, r3, #30
{
   2b602:	4605      	mov	r5, r0
   2b604:	460c      	mov	r4, r1
	if (ret) {
   2b606:	d50d      	bpl.n	2b624 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b608:	2201      	movs	r2, #1
   2b60a:	2100      	movs	r1, #0
   2b60c:	f104 0008 	add.w	r0, r4, #8
   2b610:	f00b ff46 	bl	374a0 <z_impl_k_sem_init>
	parent->next = child;
   2b614:	2300      	movs	r3, #0
   2b616:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   2b618:	4b05      	ldr	r3, [pc, #20]	; (2b630 <cancel_sync_locked+0x38>)
	canceler->work = work;
   2b61a:	6065      	str	r5, [r4, #4]
   2b61c:	685a      	ldr	r2, [r3, #4]
   2b61e:	b91a      	cbnz	r2, 2b628 <cancel_sync_locked+0x30>
	list->head = node;
   2b620:	e9c3 4400 	strd	r4, r4, [r3]
}
   2b624:	4630      	mov	r0, r6
   2b626:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2b628:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2b62a:	605c      	str	r4, [r3, #4]
}
   2b62c:	e7fa      	b.n	2b624 <cancel_sync_locked+0x2c>
   2b62e:	bf00      	nop
   2b630:	20016d0c 	.word	0x20016d0c

0002b634 <submit_to_queue_locked>:
{
   2b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b636:	68c3      	ldr	r3, [r0, #12]
{
   2b638:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b63a:	079a      	lsls	r2, r3, #30
{
   2b63c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b63e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2b642:	d42b      	bmi.n	2b69c <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2b644:	075f      	lsls	r7, r3, #29
   2b646:	d42b      	bmi.n	2b6a0 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   2b648:	680a      	ldr	r2, [r1, #0]
   2b64a:	b90a      	cbnz	r2, 2b650 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2b64c:	6882      	ldr	r2, [r0, #8]
   2b64e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2b650:	07d8      	lsls	r0, r3, #31
   2b652:	d528      	bpl.n	2b6a6 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   2b654:	68a3      	ldr	r3, [r4, #8]
   2b656:	b95b      	cbnz	r3, 2b670 <submit_to_queue_locked+0x3c>
   2b658:	4924      	ldr	r1, [pc, #144]	; (2b6ec <submit_to_queue_locked+0xb8>)
   2b65a:	4825      	ldr	r0, [pc, #148]	; (2b6f0 <submit_to_queue_locked+0xbc>)
   2b65c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   2b660:	4a24      	ldr	r2, [pc, #144]	; (2b6f4 <submit_to_queue_locked+0xc0>)
   2b662:	f004 fb05 	bl	2fc70 <printk>
   2b666:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2b66a:	4822      	ldr	r0, [pc, #136]	; (2b6f4 <submit_to_queue_locked+0xc0>)
   2b66c:	f004 fde6 	bl	3023c <assert_post_action>
			ret = 2;
   2b670:	2502      	movs	r5, #2
			*queuep = work->queue;
   2b672:	68a3      	ldr	r3, [r4, #8]
   2b674:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   2b676:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   2b678:	b38f      	cbz	r7, 2b6de <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2b67a:	4b1f      	ldr	r3, [pc, #124]	; (2b6f8 <submit_to_queue_locked+0xc4>)
   2b67c:	689b      	ldr	r3, [r3, #8]
   2b67e:	42bb      	cmp	r3, r7
   2b680:	d113      	bne.n	2b6aa <submit_to_queue_locked+0x76>
   2b682:	f00b fec4 	bl	3740e <k_is_in_isr>
   2b686:	f080 0001 	eor.w	r0, r0, #1
   2b68a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   2b68c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2b690:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2b692:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2b696:	d525      	bpl.n	2b6e4 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   2b698:	b14a      	cbz	r2, 2b6ae <submit_to_queue_locked+0x7a>
   2b69a:	b950      	cbnz	r0, 2b6b2 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   2b69c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   2b6a0:	2300      	movs	r3, #0
   2b6a2:	6033      	str	r3, [r6, #0]
	return ret;
   2b6a4:	e015      	b.n	2b6d2 <submit_to_queue_locked+0x9e>
		ret = 1;
   2b6a6:	2501      	movs	r5, #1
   2b6a8:	e7e5      	b.n	2b676 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2b6aa:	2000      	movs	r0, #0
   2b6ac:	e7ee      	b.n	2b68c <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   2b6ae:	071b      	lsls	r3, r3, #28
   2b6b0:	d4f4      	bmi.n	2b69c <submit_to_queue_locked+0x68>
	parent->next = child;
   2b6b2:	2300      	movs	r3, #0
   2b6b4:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   2b6b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   2b6ba:	b963      	cbnz	r3, 2b6d6 <submit_to_queue_locked+0xa2>
	list->head = node;
   2b6bc:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2b6c0:	4638      	mov	r0, r7
   2b6c2:	f00b fefd 	bl	374c0 <notify_queue_locked>
	*flagp |= BIT(bit);
   2b6c6:	68e3      	ldr	r3, [r4, #12]
   2b6c8:	f043 0304 	orr.w	r3, r3, #4
   2b6cc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2b6ce:	6833      	ldr	r3, [r6, #0]
   2b6d0:	60a3      	str	r3, [r4, #8]
}
   2b6d2:	4628      	mov	r0, r5
   2b6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2b6d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b6d8:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   2b6dc:	e7f0      	b.n	2b6c0 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   2b6de:	f06f 0515 	mvn.w	r5, #21
   2b6e2:	e7dd      	b.n	2b6a0 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   2b6e4:	f06f 0512 	mvn.w	r5, #18
   2b6e8:	e7da      	b.n	2b6a0 <submit_to_queue_locked+0x6c>
   2b6ea:	bf00      	nop
   2b6ec:	00040987 	.word	0x00040987
   2b6f0:	0003a56b 	.word	0x0003a56b
   2b6f4:	0004094f 	.word	0x0004094f
   2b6f8:	20016cd0 	.word	0x20016cd0

0002b6fc <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   2b6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b6fe:	4604      	mov	r4, r0
	__asm__ volatile(
   2b700:	f04f 0320 	mov.w	r3, #32
   2b704:	f3ef 8511 	mrs	r5, BASEPRI
   2b708:	f383 8811 	msr	BASEPRI, r3
   2b70c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b710:	481e      	ldr	r0, [pc, #120]	; (2b78c <work_timeout+0x90>)
   2b712:	f7ff f87f 	bl	2a814 <z_spin_lock_valid>
   2b716:	b968      	cbnz	r0, 2b734 <work_timeout+0x38>
   2b718:	2381      	movs	r3, #129	; 0x81
   2b71a:	4a1d      	ldr	r2, [pc, #116]	; (2b790 <work_timeout+0x94>)
   2b71c:	491d      	ldr	r1, [pc, #116]	; (2b794 <work_timeout+0x98>)
   2b71e:	481e      	ldr	r0, [pc, #120]	; (2b798 <work_timeout+0x9c>)
   2b720:	f004 faa6 	bl	2fc70 <printk>
   2b724:	4919      	ldr	r1, [pc, #100]	; (2b78c <work_timeout+0x90>)
   2b726:	481d      	ldr	r0, [pc, #116]	; (2b79c <work_timeout+0xa0>)
   2b728:	f004 faa2 	bl	2fc70 <printk>
   2b72c:	2181      	movs	r1, #129	; 0x81
   2b72e:	4818      	ldr	r0, [pc, #96]	; (2b790 <work_timeout+0x94>)
   2b730:	f004 fd84 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2b734:	4815      	ldr	r0, [pc, #84]	; (2b78c <work_timeout+0x90>)
   2b736:	f7ff f889 	bl	2a84c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   2b73a:	2300      	movs	r3, #0
   2b73c:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   2b73e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   2b742:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2b746:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2b748:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2b74c:	d506      	bpl.n	2b75c <work_timeout+0x60>
		queue = dw->queue;
   2b74e:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   2b750:	a901      	add	r1, sp, #4
   2b752:	f1a4 0010 	sub.w	r0, r4, #16
		queue = dw->queue;
   2b756:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2b758:	f7ff ff6c 	bl	2b634 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b75c:	480b      	ldr	r0, [pc, #44]	; (2b78c <work_timeout+0x90>)
   2b75e:	f7ff f867 	bl	2a830 <z_spin_unlock_valid>
   2b762:	b968      	cbnz	r0, 2b780 <work_timeout+0x84>
   2b764:	23ac      	movs	r3, #172	; 0xac
   2b766:	4a0a      	ldr	r2, [pc, #40]	; (2b790 <work_timeout+0x94>)
   2b768:	490d      	ldr	r1, [pc, #52]	; (2b7a0 <work_timeout+0xa4>)
   2b76a:	480b      	ldr	r0, [pc, #44]	; (2b798 <work_timeout+0x9c>)
   2b76c:	f004 fa80 	bl	2fc70 <printk>
   2b770:	4906      	ldr	r1, [pc, #24]	; (2b78c <work_timeout+0x90>)
   2b772:	480c      	ldr	r0, [pc, #48]	; (2b7a4 <work_timeout+0xa8>)
   2b774:	f004 fa7c 	bl	2fc70 <printk>
   2b778:	21ac      	movs	r1, #172	; 0xac
   2b77a:	4805      	ldr	r0, [pc, #20]	; (2b790 <work_timeout+0x94>)
   2b77c:	f004 fd5e 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2b780:	f385 8811 	msr	BASEPRI, r5
   2b784:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   2b788:	b003      	add	sp, #12
   2b78a:	bd30      	pop	{r4, r5, pc}
   2b78c:	20016d08 	.word	0x20016d08
   2b790:	0003a62b 	.word	0x0003a62b
   2b794:	0003a67d 	.word	0x0003a67d
   2b798:	0003a56b 	.word	0x0003a56b
   2b79c:	0003a692 	.word	0x0003a692
   2b7a0:	0003a651 	.word	0x0003a651
   2b7a4:	0003a668 	.word	0x0003a668

0002b7a8 <k_work_init>:
{
   2b7a8:	b538      	push	{r3, r4, r5, lr}
   2b7aa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   2b7ac:	4604      	mov	r4, r0
   2b7ae:	b948      	cbnz	r0, 2b7c4 <k_work_init+0x1c>
   2b7b0:	490d      	ldr	r1, [pc, #52]	; (2b7e8 <k_work_init+0x40>)
   2b7b2:	480e      	ldr	r0, [pc, #56]	; (2b7ec <k_work_init+0x44>)
   2b7b4:	2389      	movs	r3, #137	; 0x89
   2b7b6:	4a0e      	ldr	r2, [pc, #56]	; (2b7f0 <k_work_init+0x48>)
   2b7b8:	f004 fa5a 	bl	2fc70 <printk>
   2b7bc:	2189      	movs	r1, #137	; 0x89
   2b7be:	480c      	ldr	r0, [pc, #48]	; (2b7f0 <k_work_init+0x48>)
   2b7c0:	f004 fd3c 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   2b7c4:	b94d      	cbnz	r5, 2b7da <k_work_init+0x32>
   2b7c6:	490b      	ldr	r1, [pc, #44]	; (2b7f4 <k_work_init+0x4c>)
   2b7c8:	4808      	ldr	r0, [pc, #32]	; (2b7ec <k_work_init+0x44>)
   2b7ca:	238a      	movs	r3, #138	; 0x8a
   2b7cc:	4a08      	ldr	r2, [pc, #32]	; (2b7f0 <k_work_init+0x48>)
   2b7ce:	f004 fa4f 	bl	2fc70 <printk>
   2b7d2:	218a      	movs	r1, #138	; 0x8a
   2b7d4:	4806      	ldr	r0, [pc, #24]	; (2b7f0 <k_work_init+0x48>)
   2b7d6:	f004 fd31 	bl	3023c <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2b7da:	2210      	movs	r2, #16
   2b7dc:	2100      	movs	r1, #0
   2b7de:	4620      	mov	r0, r4
   2b7e0:	f00b ffef 	bl	377c2 <memset>
   2b7e4:	6065      	str	r5, [r4, #4]
}
   2b7e6:	bd38      	pop	{r3, r4, r5, pc}
   2b7e8:	00040a26 	.word	0x00040a26
   2b7ec:	0003a56b 	.word	0x0003a56b
   2b7f0:	0004094f 	.word	0x0004094f
   2b7f4:	00040970 	.word	0x00040970

0002b7f8 <k_work_submit_to_queue>:
{
   2b7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   2b7fa:	460c      	mov	r4, r1
{
   2b7fc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   2b7fe:	b959      	cbnz	r1, 2b818 <k_work_submit_to_queue+0x20>
   2b800:	4926      	ldr	r1, [pc, #152]	; (2b89c <k_work_submit_to_queue+0xa4>)
   2b802:	4827      	ldr	r0, [pc, #156]	; (2b8a0 <k_work_submit_to_queue+0xa8>)
   2b804:	f240 1369 	movw	r3, #361	; 0x169
   2b808:	4a26      	ldr	r2, [pc, #152]	; (2b8a4 <k_work_submit_to_queue+0xac>)
   2b80a:	f004 fa31 	bl	2fc70 <printk>
   2b80e:	f240 1169 	movw	r1, #361	; 0x169
   2b812:	4824      	ldr	r0, [pc, #144]	; (2b8a4 <k_work_submit_to_queue+0xac>)
   2b814:	f004 fd12 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2b818:	f04f 0320 	mov.w	r3, #32
   2b81c:	f3ef 8511 	mrs	r5, BASEPRI
   2b820:	f383 8811 	msr	BASEPRI, r3
   2b824:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b828:	481f      	ldr	r0, [pc, #124]	; (2b8a8 <k_work_submit_to_queue+0xb0>)
   2b82a:	f7fe fff3 	bl	2a814 <z_spin_lock_valid>
   2b82e:	b968      	cbnz	r0, 2b84c <k_work_submit_to_queue+0x54>
   2b830:	2381      	movs	r3, #129	; 0x81
   2b832:	4a1e      	ldr	r2, [pc, #120]	; (2b8ac <k_work_submit_to_queue+0xb4>)
   2b834:	491e      	ldr	r1, [pc, #120]	; (2b8b0 <k_work_submit_to_queue+0xb8>)
   2b836:	481a      	ldr	r0, [pc, #104]	; (2b8a0 <k_work_submit_to_queue+0xa8>)
   2b838:	f004 fa1a 	bl	2fc70 <printk>
   2b83c:	491a      	ldr	r1, [pc, #104]	; (2b8a8 <k_work_submit_to_queue+0xb0>)
   2b83e:	481d      	ldr	r0, [pc, #116]	; (2b8b4 <k_work_submit_to_queue+0xbc>)
   2b840:	f004 fa16 	bl	2fc70 <printk>
   2b844:	2181      	movs	r1, #129	; 0x81
   2b846:	4819      	ldr	r0, [pc, #100]	; (2b8ac <k_work_submit_to_queue+0xb4>)
   2b848:	f004 fcf8 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2b84c:	4816      	ldr	r0, [pc, #88]	; (2b8a8 <k_work_submit_to_queue+0xb0>)
   2b84e:	f7fe fffd 	bl	2a84c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   2b852:	4620      	mov	r0, r4
   2b854:	a901      	add	r1, sp, #4
   2b856:	f7ff feed 	bl	2b634 <submit_to_queue_locked>
   2b85a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b85c:	4812      	ldr	r0, [pc, #72]	; (2b8a8 <k_work_submit_to_queue+0xb0>)
   2b85e:	f7fe ffe7 	bl	2a830 <z_spin_unlock_valid>
   2b862:	b968      	cbnz	r0, 2b880 <k_work_submit_to_queue+0x88>
   2b864:	23ac      	movs	r3, #172	; 0xac
   2b866:	4a11      	ldr	r2, [pc, #68]	; (2b8ac <k_work_submit_to_queue+0xb4>)
   2b868:	4913      	ldr	r1, [pc, #76]	; (2b8b8 <k_work_submit_to_queue+0xc0>)
   2b86a:	480d      	ldr	r0, [pc, #52]	; (2b8a0 <k_work_submit_to_queue+0xa8>)
   2b86c:	f004 fa00 	bl	2fc70 <printk>
   2b870:	490d      	ldr	r1, [pc, #52]	; (2b8a8 <k_work_submit_to_queue+0xb0>)
   2b872:	4812      	ldr	r0, [pc, #72]	; (2b8bc <k_work_submit_to_queue+0xc4>)
   2b874:	f004 f9fc 	bl	2fc70 <printk>
   2b878:	21ac      	movs	r1, #172	; 0xac
   2b87a:	480c      	ldr	r0, [pc, #48]	; (2b8ac <k_work_submit_to_queue+0xb4>)
   2b87c:	f004 fcde 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2b880:	f385 8811 	msr	BASEPRI, r5
   2b884:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2b888:	2c00      	cmp	r4, #0
   2b88a:	dd04      	ble.n	2b896 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   2b88c:	f001 fbb6 	bl	2cffc <z_impl_k_is_preempt_thread>
   2b890:	b108      	cbz	r0, 2b896 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   2b892:	f001 fa25 	bl	2cce0 <z_impl_k_yield>
}
   2b896:	4620      	mov	r0, r4
   2b898:	b003      	add	sp, #12
   2b89a:	bd30      	pop	{r4, r5, pc}
   2b89c:	00040a26 	.word	0x00040a26
   2b8a0:	0003a56b 	.word	0x0003a56b
   2b8a4:	0004094f 	.word	0x0004094f
   2b8a8:	20016d08 	.word	0x20016d08
   2b8ac:	0003a62b 	.word	0x0003a62b
   2b8b0:	0003a67d 	.word	0x0003a67d
   2b8b4:	0003a692 	.word	0x0003a692
   2b8b8:	0003a651 	.word	0x0003a651
   2b8bc:	0003a668 	.word	0x0003a668

0002b8c0 <k_work_submit>:
{
   2b8c0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2b8c2:	4801      	ldr	r0, [pc, #4]	; (2b8c8 <k_work_submit+0x8>)
   2b8c4:	f7ff bf98 	b.w	2b7f8 <k_work_submit_to_queue>
   2b8c8:	20015e68 	.word	0x20015e68

0002b8cc <k_work_queue_start>:
{
   2b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b8d0:	b088      	sub	sp, #32
   2b8d2:	460e      	mov	r6, r1
   2b8d4:	4617      	mov	r7, r2
   2b8d6:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   2b8d8:	4604      	mov	r4, r0
{
   2b8da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   2b8dc:	b958      	cbnz	r0, 2b8f6 <k_work_queue_start+0x2a>
   2b8de:	492e      	ldr	r1, [pc, #184]	; (2b998 <k_work_queue_start+0xcc>)
   2b8e0:	482e      	ldr	r0, [pc, #184]	; (2b99c <k_work_queue_start+0xd0>)
   2b8e2:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   2b8e6:	4a2e      	ldr	r2, [pc, #184]	; (2b9a0 <k_work_queue_start+0xd4>)
   2b8e8:	f004 f9c2 	bl	2fc70 <printk>
   2b8ec:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   2b8f0:	482b      	ldr	r0, [pc, #172]	; (2b9a0 <k_work_queue_start+0xd4>)
   2b8f2:	f004 fca3 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(stack);
   2b8f6:	b95e      	cbnz	r6, 2b910 <k_work_queue_start+0x44>
   2b8f8:	492a      	ldr	r1, [pc, #168]	; (2b9a4 <k_work_queue_start+0xd8>)
   2b8fa:	4828      	ldr	r0, [pc, #160]	; (2b99c <k_work_queue_start+0xd0>)
   2b8fc:	f240 23a1 	movw	r3, #673	; 0x2a1
   2b900:	4a27      	ldr	r2, [pc, #156]	; (2b9a0 <k_work_queue_start+0xd4>)
   2b902:	f004 f9b5 	bl	2fc70 <printk>
   2b906:	f240 21a1 	movw	r1, #673	; 0x2a1
   2b90a:	4825      	ldr	r0, [pc, #148]	; (2b9a0 <k_work_queue_start+0xd4>)
   2b90c:	f004 fc96 	bl	3023c <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   2b910:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   2b914:	07db      	lsls	r3, r3, #31
   2b916:	d50b      	bpl.n	2b930 <k_work_queue_start+0x64>
   2b918:	4923      	ldr	r1, [pc, #140]	; (2b9a8 <k_work_queue_start+0xdc>)
   2b91a:	4820      	ldr	r0, [pc, #128]	; (2b99c <k_work_queue_start+0xd0>)
   2b91c:	f240 23a2 	movw	r3, #674	; 0x2a2
   2b920:	4a1f      	ldr	r2, [pc, #124]	; (2b9a0 <k_work_queue_start+0xd4>)
   2b922:	f004 f9a5 	bl	2fc70 <printk>
   2b926:	f240 21a2 	movw	r1, #674	; 0x2a2
   2b92a:	481d      	ldr	r0, [pc, #116]	; (2b9a0 <k_work_queue_start+0xd4>)
   2b92c:	f004 fc86 	bl	3023c <assert_post_action>
	list->head = NULL;
   2b930:	2300      	movs	r3, #0
	list->tail = NULL;
   2b932:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   2b936:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2b93a:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   2b93e:	f104 0390 	add.w	r3, r4, #144	; 0x90
   2b942:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   2b946:	b32d      	cbz	r5, 2b994 <k_work_queue_start+0xc8>
   2b948:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2b94a:	f240 1101 	movw	r1, #257	; 0x101
   2b94e:	2b00      	cmp	r3, #0
   2b950:	bf08      	it	eq
   2b952:	2101      	moveq	r1, #1
	*flagp = flags;
   2b954:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2b958:	f04f 32ff 	mov.w	r2, #4294967295
   2b95c:	f04f 33ff 	mov.w	r3, #4294967295
   2b960:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b964:	2200      	movs	r2, #0
   2b966:	4631      	mov	r1, r6
   2b968:	e9cd 8203 	strd	r8, r2, [sp, #12]
   2b96c:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2b970:	4620      	mov	r0, r4
   2b972:	463a      	mov	r2, r7
   2b974:	4b0d      	ldr	r3, [pc, #52]	; (2b9ac <k_work_queue_start+0xe0>)
   2b976:	9400      	str	r4, [sp, #0]
   2b978:	f7fe fe6e 	bl	2a658 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2b97c:	b125      	cbz	r5, 2b988 <k_work_queue_start+0xbc>
   2b97e:	6829      	ldr	r1, [r5, #0]
   2b980:	b111      	cbz	r1, 2b988 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   2b982:	4620      	mov	r0, r4
   2b984:	f00b fd49 	bl	3741a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2b988:	4620      	mov	r0, r4
}
   2b98a:	b008      	add	sp, #32
   2b98c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b990:	f00b bd48 	b.w	37424 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2b994:	2101      	movs	r1, #1
   2b996:	e7dd      	b.n	2b954 <k_work_queue_start+0x88>
   2b998:	000409e5 	.word	0x000409e5
   2b99c:	0003a56b 	.word	0x0003a56b
   2b9a0:	0004094f 	.word	0x0004094f
   2b9a4:	000409eb 	.word	0x000409eb
   2b9a8:	000409f1 	.word	0x000409f1
   2b9ac:	0002b3d1 	.word	0x0002b3d1

0002b9b0 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   2b9b0:	b538      	push	{r3, r4, r5, lr}
   2b9b2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2b9b4:	4604      	mov	r4, r0
   2b9b6:	b958      	cbnz	r0, 2b9d0 <k_work_init_delayable+0x20>
   2b9b8:	4911      	ldr	r1, [pc, #68]	; (2ba00 <k_work_init_delayable+0x50>)
   2b9ba:	4812      	ldr	r0, [pc, #72]	; (2ba04 <k_work_init_delayable+0x54>)
   2b9bc:	f44f 7346 	mov.w	r3, #792	; 0x318
   2b9c0:	4a11      	ldr	r2, [pc, #68]	; (2ba08 <k_work_init_delayable+0x58>)
   2b9c2:	f004 f955 	bl	2fc70 <printk>
   2b9c6:	f44f 7146 	mov.w	r1, #792	; 0x318
   2b9ca:	480f      	ldr	r0, [pc, #60]	; (2ba08 <k_work_init_delayable+0x58>)
   2b9cc:	f004 fc36 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   2b9d0:	b95d      	cbnz	r5, 2b9ea <k_work_init_delayable+0x3a>
   2b9d2:	490e      	ldr	r1, [pc, #56]	; (2ba0c <k_work_init_delayable+0x5c>)
   2b9d4:	480b      	ldr	r0, [pc, #44]	; (2ba04 <k_work_init_delayable+0x54>)
   2b9d6:	f240 3319 	movw	r3, #793	; 0x319
   2b9da:	4a0b      	ldr	r2, [pc, #44]	; (2ba08 <k_work_init_delayable+0x58>)
   2b9dc:	f004 f948 	bl	2fc70 <printk>
   2b9e0:	f240 3119 	movw	r1, #793	; 0x319
   2b9e4:	4808      	ldr	r0, [pc, #32]	; (2ba08 <k_work_init_delayable+0x58>)
   2b9e6:	f004 fc29 	bl	3023c <assert_post_action>

	*dwork = (struct k_work_delayable){
   2b9ea:	2230      	movs	r2, #48	; 0x30
   2b9ec:	2100      	movs	r1, #0
   2b9ee:	4620      	mov	r0, r4
   2b9f0:	f00b fee7 	bl	377c2 <memset>
   2b9f4:	f44f 7380 	mov.w	r3, #256	; 0x100
   2b9f8:	6065      	str	r5, [r4, #4]
   2b9fa:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   2b9fc:	bd38      	pop	{r3, r4, r5, pc}
   2b9fe:	bf00      	nop
   2ba00:	00040a25 	.word	0x00040a25
   2ba04:	0003a56b 	.word	0x0003a56b
   2ba08:	0004094f 	.word	0x0004094f
   2ba0c:	00040970 	.word	0x00040970

0002ba10 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2ba10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ba12:	4616      	mov	r6, r2
   2ba14:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2ba16:	460c      	mov	r4, r1
{
   2ba18:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2ba1a:	b959      	cbnz	r1, 2ba34 <k_work_schedule_for_queue+0x24>
   2ba1c:	492e      	ldr	r1, [pc, #184]	; (2bad8 <k_work_schedule_for_queue+0xc8>)
   2ba1e:	482f      	ldr	r0, [pc, #188]	; (2badc <k_work_schedule_for_queue+0xcc>)
   2ba20:	f240 338f 	movw	r3, #911	; 0x38f
   2ba24:	4a2e      	ldr	r2, [pc, #184]	; (2bae0 <k_work_schedule_for_queue+0xd0>)
   2ba26:	f004 f923 	bl	2fc70 <printk>
   2ba2a:	f240 318f 	movw	r1, #911	; 0x38f
   2ba2e:	482c      	ldr	r0, [pc, #176]	; (2bae0 <k_work_schedule_for_queue+0xd0>)
   2ba30:	f004 fc04 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2ba34:	f04f 0320 	mov.w	r3, #32
   2ba38:	f3ef 8511 	mrs	r5, BASEPRI
   2ba3c:	f383 8811 	msr	BASEPRI, r3
   2ba40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ba44:	4827      	ldr	r0, [pc, #156]	; (2bae4 <k_work_schedule_for_queue+0xd4>)
   2ba46:	f7fe fee5 	bl	2a814 <z_spin_lock_valid>
   2ba4a:	b968      	cbnz	r0, 2ba68 <k_work_schedule_for_queue+0x58>
   2ba4c:	2381      	movs	r3, #129	; 0x81
   2ba4e:	4a26      	ldr	r2, [pc, #152]	; (2bae8 <k_work_schedule_for_queue+0xd8>)
   2ba50:	4926      	ldr	r1, [pc, #152]	; (2baec <k_work_schedule_for_queue+0xdc>)
   2ba52:	4822      	ldr	r0, [pc, #136]	; (2badc <k_work_schedule_for_queue+0xcc>)
   2ba54:	f004 f90c 	bl	2fc70 <printk>
   2ba58:	4922      	ldr	r1, [pc, #136]	; (2bae4 <k_work_schedule_for_queue+0xd4>)
   2ba5a:	4825      	ldr	r0, [pc, #148]	; (2baf0 <k_work_schedule_for_queue+0xe0>)
   2ba5c:	f004 f908 	bl	2fc70 <printk>
   2ba60:	2181      	movs	r1, #129	; 0x81
   2ba62:	4821      	ldr	r0, [pc, #132]	; (2bae8 <k_work_schedule_for_queue+0xd8>)
   2ba64:	f004 fbea 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2ba68:	481e      	ldr	r0, [pc, #120]	; (2bae4 <k_work_schedule_for_queue+0xd4>)
   2ba6a:	f7fe feef 	bl	2a84c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2ba6e:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2ba70:	f013 0f0e 	tst.w	r3, #14
   2ba74:	d12e      	bne.n	2bad4 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2ba76:	ea56 0207 	orrs.w	r2, r6, r7
   2ba7a:	d11d      	bne.n	2bab8 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   2ba7c:	4620      	mov	r0, r4
   2ba7e:	a901      	add	r1, sp, #4
   2ba80:	f7ff fdd8 	bl	2b634 <submit_to_queue_locked>
   2ba84:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ba86:	4817      	ldr	r0, [pc, #92]	; (2bae4 <k_work_schedule_for_queue+0xd4>)
   2ba88:	f7fe fed2 	bl	2a830 <z_spin_unlock_valid>
   2ba8c:	b968      	cbnz	r0, 2baaa <k_work_schedule_for_queue+0x9a>
   2ba8e:	23ac      	movs	r3, #172	; 0xac
   2ba90:	4a15      	ldr	r2, [pc, #84]	; (2bae8 <k_work_schedule_for_queue+0xd8>)
   2ba92:	4918      	ldr	r1, [pc, #96]	; (2baf4 <k_work_schedule_for_queue+0xe4>)
   2ba94:	4811      	ldr	r0, [pc, #68]	; (2badc <k_work_schedule_for_queue+0xcc>)
   2ba96:	f004 f8eb 	bl	2fc70 <printk>
   2ba9a:	4912      	ldr	r1, [pc, #72]	; (2bae4 <k_work_schedule_for_queue+0xd4>)
   2ba9c:	4816      	ldr	r0, [pc, #88]	; (2baf8 <k_work_schedule_for_queue+0xe8>)
   2ba9e:	f004 f8e7 	bl	2fc70 <printk>
   2baa2:	21ac      	movs	r1, #172	; 0xac
   2baa4:	4810      	ldr	r0, [pc, #64]	; (2bae8 <k_work_schedule_for_queue+0xd8>)
   2baa6:	f004 fbc9 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2baaa:	f385 8811 	msr	BASEPRI, r5
   2baae:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2bab2:	4620      	mov	r0, r4
   2bab4:	b003      	add	sp, #12
   2bab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2bab8:	f043 0308 	orr.w	r3, r3, #8
   2babc:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2babe:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2bac0:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   2bac4:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2bac6:	4632      	mov	r2, r6
   2bac8:	463b      	mov	r3, r7
   2baca:	490c      	ldr	r1, [pc, #48]	; (2bafc <k_work_schedule_for_queue+0xec>)
   2bacc:	f001 fc2e 	bl	2d32c <z_add_timeout>
	return ret;
   2bad0:	2401      	movs	r4, #1
   2bad2:	e7d8      	b.n	2ba86 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   2bad4:	2400      	movs	r4, #0
   2bad6:	e7d6      	b.n	2ba86 <k_work_schedule_for_queue+0x76>
   2bad8:	00040a25 	.word	0x00040a25
   2badc:	0003a56b 	.word	0x0003a56b
   2bae0:	0004094f 	.word	0x0004094f
   2bae4:	20016d08 	.word	0x20016d08
   2bae8:	0003a62b 	.word	0x0003a62b
   2baec:	0003a67d 	.word	0x0003a67d
   2baf0:	0003a692 	.word	0x0003a692
   2baf4:	0003a651 	.word	0x0003a651
   2baf8:	0003a668 	.word	0x0003a668
   2bafc:	0002b6fd 	.word	0x0002b6fd

0002bb00 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2bb00:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2bb02:	4801      	ldr	r0, [pc, #4]	; (2bb08 <k_work_schedule+0x8>)
   2bb04:	f7ff bf84 	b.w	2ba10 <k_work_schedule_for_queue>
   2bb08:	20015e68 	.word	0x20015e68

0002bb0c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   2bb0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bb0e:	4616      	mov	r6, r2
   2bb10:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2bb12:	460c      	mov	r4, r1
{
   2bb14:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2bb16:	b959      	cbnz	r1, 2bb30 <k_work_reschedule_for_queue+0x24>
   2bb18:	492d      	ldr	r1, [pc, #180]	; (2bbd0 <k_work_reschedule_for_queue+0xc4>)
   2bb1a:	482e      	ldr	r0, [pc, #184]	; (2bbd4 <k_work_reschedule_for_queue+0xc8>)
   2bb1c:	f240 33b3 	movw	r3, #947	; 0x3b3
   2bb20:	4a2d      	ldr	r2, [pc, #180]	; (2bbd8 <k_work_reschedule_for_queue+0xcc>)
   2bb22:	f004 f8a5 	bl	2fc70 <printk>
   2bb26:	f240 31b3 	movw	r1, #947	; 0x3b3
   2bb2a:	482b      	ldr	r0, [pc, #172]	; (2bbd8 <k_work_reschedule_for_queue+0xcc>)
   2bb2c:	f004 fb86 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2bb30:	f04f 0320 	mov.w	r3, #32
   2bb34:	f3ef 8511 	mrs	r5, BASEPRI
   2bb38:	f383 8811 	msr	BASEPRI, r3
   2bb3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bb40:	4826      	ldr	r0, [pc, #152]	; (2bbdc <k_work_reschedule_for_queue+0xd0>)
   2bb42:	f7fe fe67 	bl	2a814 <z_spin_lock_valid>
   2bb46:	b968      	cbnz	r0, 2bb64 <k_work_reschedule_for_queue+0x58>
   2bb48:	2381      	movs	r3, #129	; 0x81
   2bb4a:	4a25      	ldr	r2, [pc, #148]	; (2bbe0 <k_work_reschedule_for_queue+0xd4>)
   2bb4c:	4925      	ldr	r1, [pc, #148]	; (2bbe4 <k_work_reschedule_for_queue+0xd8>)
   2bb4e:	4821      	ldr	r0, [pc, #132]	; (2bbd4 <k_work_reschedule_for_queue+0xc8>)
   2bb50:	f004 f88e 	bl	2fc70 <printk>
   2bb54:	4921      	ldr	r1, [pc, #132]	; (2bbdc <k_work_reschedule_for_queue+0xd0>)
   2bb56:	4824      	ldr	r0, [pc, #144]	; (2bbe8 <k_work_reschedule_for_queue+0xdc>)
   2bb58:	f004 f88a 	bl	2fc70 <printk>
   2bb5c:	2181      	movs	r1, #129	; 0x81
   2bb5e:	4820      	ldr	r0, [pc, #128]	; (2bbe0 <k_work_reschedule_for_queue+0xd4>)
   2bb60:	f004 fb6c 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2bb64:	481d      	ldr	r0, [pc, #116]	; (2bbdc <k_work_reschedule_for_queue+0xd0>)
   2bb66:	f7fe fe71 	bl	2a84c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2bb6a:	4620      	mov	r0, r4
   2bb6c:	f00b fcaf 	bl	374ce <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2bb70:	ea56 0307 	orrs.w	r3, r6, r7
   2bb74:	d11d      	bne.n	2bbb2 <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   2bb76:	4620      	mov	r0, r4
   2bb78:	a901      	add	r1, sp, #4
   2bb7a:	f7ff fd5b 	bl	2b634 <submit_to_queue_locked>
   2bb7e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bb80:	4816      	ldr	r0, [pc, #88]	; (2bbdc <k_work_reschedule_for_queue+0xd0>)
   2bb82:	f7fe fe55 	bl	2a830 <z_spin_unlock_valid>
   2bb86:	b968      	cbnz	r0, 2bba4 <k_work_reschedule_for_queue+0x98>
   2bb88:	23ac      	movs	r3, #172	; 0xac
   2bb8a:	4a15      	ldr	r2, [pc, #84]	; (2bbe0 <k_work_reschedule_for_queue+0xd4>)
   2bb8c:	4917      	ldr	r1, [pc, #92]	; (2bbec <k_work_reschedule_for_queue+0xe0>)
   2bb8e:	4811      	ldr	r0, [pc, #68]	; (2bbd4 <k_work_reschedule_for_queue+0xc8>)
   2bb90:	f004 f86e 	bl	2fc70 <printk>
   2bb94:	4911      	ldr	r1, [pc, #68]	; (2bbdc <k_work_reschedule_for_queue+0xd0>)
   2bb96:	4816      	ldr	r0, [pc, #88]	; (2bbf0 <k_work_reschedule_for_queue+0xe4>)
   2bb98:	f004 f86a 	bl	2fc70 <printk>
   2bb9c:	21ac      	movs	r1, #172	; 0xac
   2bb9e:	4810      	ldr	r0, [pc, #64]	; (2bbe0 <k_work_reschedule_for_queue+0xd4>)
   2bba0:	f004 fb4c 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2bba4:	f385 8811 	msr	BASEPRI, r5
   2bba8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2bbac:	4620      	mov	r0, r4
   2bbae:	b003      	add	sp, #12
   2bbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2bbb2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2bbb4:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   2bbb8:	f043 0308 	orr.w	r3, r3, #8
   2bbbc:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2bbbe:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2bbc0:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   2bbc2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2bbc4:	490b      	ldr	r1, [pc, #44]	; (2bbf4 <k_work_reschedule_for_queue+0xe8>)
   2bbc6:	463b      	mov	r3, r7
   2bbc8:	f001 fbb0 	bl	2d32c <z_add_timeout>
	return ret;
   2bbcc:	2401      	movs	r4, #1
   2bbce:	e7d7      	b.n	2bb80 <k_work_reschedule_for_queue+0x74>
   2bbd0:	00040a25 	.word	0x00040a25
   2bbd4:	0003a56b 	.word	0x0003a56b
   2bbd8:	0004094f 	.word	0x0004094f
   2bbdc:	20016d08 	.word	0x20016d08
   2bbe0:	0003a62b 	.word	0x0003a62b
   2bbe4:	0003a67d 	.word	0x0003a67d
   2bbe8:	0003a692 	.word	0x0003a692
   2bbec:	0003a651 	.word	0x0003a651
   2bbf0:	0003a668 	.word	0x0003a668
   2bbf4:	0002b6fd 	.word	0x0002b6fd

0002bbf8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2bbf8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2bbfa:	4801      	ldr	r0, [pc, #4]	; (2bc00 <k_work_reschedule+0x8>)
   2bbfc:	f7ff bf86 	b.w	2bb0c <k_work_reschedule_for_queue>
   2bc00:	20015e68 	.word	0x20015e68

0002bc04 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2bc04:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2bc06:	4604      	mov	r4, r0
   2bc08:	b958      	cbnz	r0, 2bc22 <k_work_cancel_delayable+0x1e>
   2bc0a:	4924      	ldr	r1, [pc, #144]	; (2bc9c <k_work_cancel_delayable+0x98>)
   2bc0c:	4824      	ldr	r0, [pc, #144]	; (2bca0 <k_work_cancel_delayable+0x9c>)
   2bc0e:	f240 33d5 	movw	r3, #981	; 0x3d5
   2bc12:	4a24      	ldr	r2, [pc, #144]	; (2bca4 <k_work_cancel_delayable+0xa0>)
   2bc14:	f004 f82c 	bl	2fc70 <printk>
   2bc18:	f240 31d5 	movw	r1, #981	; 0x3d5
   2bc1c:	4821      	ldr	r0, [pc, #132]	; (2bca4 <k_work_cancel_delayable+0xa0>)
   2bc1e:	f004 fb0d 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2bc22:	f04f 0320 	mov.w	r3, #32
   2bc26:	f3ef 8511 	mrs	r5, BASEPRI
   2bc2a:	f383 8811 	msr	BASEPRI, r3
   2bc2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bc32:	481d      	ldr	r0, [pc, #116]	; (2bca8 <k_work_cancel_delayable+0xa4>)
   2bc34:	f7fe fdee 	bl	2a814 <z_spin_lock_valid>
   2bc38:	b968      	cbnz	r0, 2bc56 <k_work_cancel_delayable+0x52>
   2bc3a:	2381      	movs	r3, #129	; 0x81
   2bc3c:	4a1b      	ldr	r2, [pc, #108]	; (2bcac <k_work_cancel_delayable+0xa8>)
   2bc3e:	491c      	ldr	r1, [pc, #112]	; (2bcb0 <k_work_cancel_delayable+0xac>)
   2bc40:	4817      	ldr	r0, [pc, #92]	; (2bca0 <k_work_cancel_delayable+0x9c>)
   2bc42:	f004 f815 	bl	2fc70 <printk>
   2bc46:	4918      	ldr	r1, [pc, #96]	; (2bca8 <k_work_cancel_delayable+0xa4>)
   2bc48:	481a      	ldr	r0, [pc, #104]	; (2bcb4 <k_work_cancel_delayable+0xb0>)
   2bc4a:	f004 f811 	bl	2fc70 <printk>
   2bc4e:	2181      	movs	r1, #129	; 0x81
   2bc50:	4816      	ldr	r0, [pc, #88]	; (2bcac <k_work_cancel_delayable+0xa8>)
   2bc52:	f004 faf3 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2bc56:	4814      	ldr	r0, [pc, #80]	; (2bca8 <k_work_cancel_delayable+0xa4>)
   2bc58:	f7fe fdf8 	bl	2a84c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2bc5c:	4620      	mov	r0, r4
   2bc5e:	f00b fc36 	bl	374ce <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2bc62:	4620      	mov	r0, r4
   2bc64:	f00b fc41 	bl	374ea <cancel_async_locked>
   2bc68:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bc6a:	480f      	ldr	r0, [pc, #60]	; (2bca8 <k_work_cancel_delayable+0xa4>)
   2bc6c:	f7fe fde0 	bl	2a830 <z_spin_unlock_valid>
   2bc70:	b968      	cbnz	r0, 2bc8e <k_work_cancel_delayable+0x8a>
   2bc72:	23ac      	movs	r3, #172	; 0xac
   2bc74:	4a0d      	ldr	r2, [pc, #52]	; (2bcac <k_work_cancel_delayable+0xa8>)
   2bc76:	4910      	ldr	r1, [pc, #64]	; (2bcb8 <k_work_cancel_delayable+0xb4>)
   2bc78:	4809      	ldr	r0, [pc, #36]	; (2bca0 <k_work_cancel_delayable+0x9c>)
   2bc7a:	f003 fff9 	bl	2fc70 <printk>
   2bc7e:	490a      	ldr	r1, [pc, #40]	; (2bca8 <k_work_cancel_delayable+0xa4>)
   2bc80:	480e      	ldr	r0, [pc, #56]	; (2bcbc <k_work_cancel_delayable+0xb8>)
   2bc82:	f003 fff5 	bl	2fc70 <printk>
   2bc86:	21ac      	movs	r1, #172	; 0xac
   2bc88:	4808      	ldr	r0, [pc, #32]	; (2bcac <k_work_cancel_delayable+0xa8>)
   2bc8a:	f004 fad7 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2bc8e:	f385 8811 	msr	BASEPRI, r5
   2bc92:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2bc96:	4620      	mov	r0, r4
   2bc98:	bd38      	pop	{r3, r4, r5, pc}
   2bc9a:	bf00      	nop
   2bc9c:	00040a25 	.word	0x00040a25
   2bca0:	0003a56b 	.word	0x0003a56b
   2bca4:	0004094f 	.word	0x0004094f
   2bca8:	20016d08 	.word	0x20016d08
   2bcac:	0003a62b 	.word	0x0003a62b
   2bcb0:	0003a67d 	.word	0x0003a67d
   2bcb4:	0003a692 	.word	0x0003a692
   2bcb8:	0003a651 	.word	0x0003a651
   2bcbc:	0003a668 	.word	0x0003a668

0002bcc0 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2bcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bcc4:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2bcc6:	4605      	mov	r5, r0
   2bcc8:	b958      	cbnz	r0, 2bce2 <k_work_cancel_delayable_sync+0x22>
   2bcca:	493e      	ldr	r1, [pc, #248]	; (2bdc4 <k_work_cancel_delayable_sync+0x104>)
   2bccc:	483e      	ldr	r0, [pc, #248]	; (2bdc8 <k_work_cancel_delayable_sync+0x108>)
   2bcce:	f240 33e6 	movw	r3, #998	; 0x3e6
   2bcd2:	4a3e      	ldr	r2, [pc, #248]	; (2bdcc <k_work_cancel_delayable_sync+0x10c>)
   2bcd4:	f003 ffcc 	bl	2fc70 <printk>
   2bcd8:	f240 31e6 	movw	r1, #998	; 0x3e6
   2bcdc:	483b      	ldr	r0, [pc, #236]	; (2bdcc <k_work_cancel_delayable_sync+0x10c>)
   2bcde:	f004 faad 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   2bce2:	b95e      	cbnz	r6, 2bcfc <k_work_cancel_delayable_sync+0x3c>
   2bce4:	493a      	ldr	r1, [pc, #232]	; (2bdd0 <k_work_cancel_delayable_sync+0x110>)
   2bce6:	4838      	ldr	r0, [pc, #224]	; (2bdc8 <k_work_cancel_delayable_sync+0x108>)
   2bce8:	f240 33e7 	movw	r3, #999	; 0x3e7
   2bcec:	4a37      	ldr	r2, [pc, #220]	; (2bdcc <k_work_cancel_delayable_sync+0x10c>)
   2bcee:	f003 ffbf 	bl	2fc70 <printk>
   2bcf2:	f240 31e7 	movw	r1, #999	; 0x3e7
   2bcf6:	4835      	ldr	r0, [pc, #212]	; (2bdcc <k_work_cancel_delayable_sync+0x10c>)
   2bcf8:	f004 faa0 	bl	3023c <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   2bcfc:	f00b fb87 	bl	3740e <k_is_in_isr>
   2bd00:	b158      	cbz	r0, 2bd1a <k_work_cancel_delayable_sync+0x5a>
   2bd02:	4934      	ldr	r1, [pc, #208]	; (2bdd4 <k_work_cancel_delayable_sync+0x114>)
   2bd04:	4830      	ldr	r0, [pc, #192]	; (2bdc8 <k_work_cancel_delayable_sync+0x108>)
   2bd06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2bd0a:	4a30      	ldr	r2, [pc, #192]	; (2bdcc <k_work_cancel_delayable_sync+0x10c>)
   2bd0c:	f003 ffb0 	bl	2fc70 <printk>
   2bd10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2bd14:	482d      	ldr	r0, [pc, #180]	; (2bdcc <k_work_cancel_delayable_sync+0x10c>)
   2bd16:	f004 fa91 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2bd1a:	f04f 0320 	mov.w	r3, #32
   2bd1e:	f3ef 8811 	mrs	r8, BASEPRI
   2bd22:	f383 8811 	msr	BASEPRI, r3
   2bd26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bd2a:	482b      	ldr	r0, [pc, #172]	; (2bdd8 <k_work_cancel_delayable_sync+0x118>)
   2bd2c:	f7fe fd72 	bl	2a814 <z_spin_lock_valid>
   2bd30:	b968      	cbnz	r0, 2bd4e <k_work_cancel_delayable_sync+0x8e>
   2bd32:	2381      	movs	r3, #129	; 0x81
   2bd34:	4a29      	ldr	r2, [pc, #164]	; (2bddc <k_work_cancel_delayable_sync+0x11c>)
   2bd36:	492a      	ldr	r1, [pc, #168]	; (2bde0 <k_work_cancel_delayable_sync+0x120>)
   2bd38:	4823      	ldr	r0, [pc, #140]	; (2bdc8 <k_work_cancel_delayable_sync+0x108>)
   2bd3a:	f003 ff99 	bl	2fc70 <printk>
   2bd3e:	4926      	ldr	r1, [pc, #152]	; (2bdd8 <k_work_cancel_delayable_sync+0x118>)
   2bd40:	4828      	ldr	r0, [pc, #160]	; (2bde4 <k_work_cancel_delayable_sync+0x124>)
   2bd42:	f003 ff95 	bl	2fc70 <printk>
   2bd46:	2181      	movs	r1, #129	; 0x81
   2bd48:	4824      	ldr	r0, [pc, #144]	; (2bddc <k_work_cancel_delayable_sync+0x11c>)
   2bd4a:	f004 fa77 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2bd4e:	4822      	ldr	r0, [pc, #136]	; (2bdd8 <k_work_cancel_delayable_sync+0x118>)
   2bd50:	f7fe fd7c 	bl	2a84c <z_spin_lock_set_owner>
   2bd54:	f105 030c 	add.w	r3, r5, #12
   2bd58:	e8d3 4faf 	lda	r4, [r3]
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   2bd5c:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2bd60:	2c00      	cmp	r4, #0
   2bd62:	bf14      	ite	ne
   2bd64:	2701      	movne	r7, #1
   2bd66:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2bd68:	d00a      	beq.n	2bd80 <k_work_cancel_delayable_sync+0xc0>
	(void)unschedule_locked(dwork);
   2bd6a:	4628      	mov	r0, r5
   2bd6c:	f00b fbaf 	bl	374ce <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2bd70:	4628      	mov	r0, r5
   2bd72:	f00b fbba 	bl	374ea <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2bd76:	4631      	mov	r1, r6
   2bd78:	4628      	mov	r0, r5
   2bd7a:	f7ff fc3d 	bl	2b5f8 <cancel_sync_locked>
   2bd7e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bd80:	4815      	ldr	r0, [pc, #84]	; (2bdd8 <k_work_cancel_delayable_sync+0x118>)
   2bd82:	f7fe fd55 	bl	2a830 <z_spin_unlock_valid>
   2bd86:	b968      	cbnz	r0, 2bda4 <k_work_cancel_delayable_sync+0xe4>
   2bd88:	23ac      	movs	r3, #172	; 0xac
   2bd8a:	4a14      	ldr	r2, [pc, #80]	; (2bddc <k_work_cancel_delayable_sync+0x11c>)
   2bd8c:	4916      	ldr	r1, [pc, #88]	; (2bde8 <k_work_cancel_delayable_sync+0x128>)
   2bd8e:	480e      	ldr	r0, [pc, #56]	; (2bdc8 <k_work_cancel_delayable_sync+0x108>)
   2bd90:	f003 ff6e 	bl	2fc70 <printk>
   2bd94:	4910      	ldr	r1, [pc, #64]	; (2bdd8 <k_work_cancel_delayable_sync+0x118>)
   2bd96:	4815      	ldr	r0, [pc, #84]	; (2bdec <k_work_cancel_delayable_sync+0x12c>)
   2bd98:	f003 ff6a 	bl	2fc70 <printk>
   2bd9c:	21ac      	movs	r1, #172	; 0xac
   2bd9e:	480f      	ldr	r0, [pc, #60]	; (2bddc <k_work_cancel_delayable_sync+0x11c>)
   2bda0:	f004 fa4c 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2bda4:	f388 8811 	msr	BASEPRI, r8
   2bda8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2bdac:	b13c      	cbz	r4, 2bdbe <k_work_cancel_delayable_sync+0xfe>
	return z_impl_k_sem_take(sem, timeout);
   2bdae:	f04f 32ff 	mov.w	r2, #4294967295
   2bdb2:	f04f 33ff 	mov.w	r3, #4294967295
   2bdb6:	f106 0008 	add.w	r0, r6, #8
   2bdba:	f7ff fa65 	bl	2b288 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2bdbe:	4638      	mov	r0, r7
   2bdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bdc4:	00040a25 	.word	0x00040a25
   2bdc8:	0003a56b 	.word	0x0003a56b
   2bdcc:	0004094f 	.word	0x0004094f
   2bdd0:	000409d1 	.word	0x000409d1
   2bdd4:	0003c467 	.word	0x0003c467
   2bdd8:	20016d08 	.word	0x20016d08
   2bddc:	0003a62b 	.word	0x0003a62b
   2bde0:	0003a67d 	.word	0x0003a67d
   2bde4:	0003a692 	.word	0x0003a692
   2bde8:	0003a651 	.word	0x0003a651
   2bdec:	0003a668 	.word	0x0003a668

0002bdf0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   2bdf0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   2bdf2:	4c08      	ldr	r4, [pc, #32]	; (2be14 <z_reset_time_slice+0x24>)
   2bdf4:	6823      	ldr	r3, [r4, #0]
   2bdf6:	b15b      	cbz	r3, 2be10 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2bdf8:	f7ea fee2 	bl	16bc0 <sys_clock_elapsed>
   2bdfc:	4603      	mov	r3, r0
   2bdfe:	6820      	ldr	r0, [r4, #0]
   2be00:	4a05      	ldr	r2, [pc, #20]	; (2be18 <z_reset_time_slice+0x28>)
   2be02:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   2be04:	2100      	movs	r1, #0
	}
}
   2be06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2be0a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2be0c:	f001 bbf8 	b.w	2d600 <z_set_timeout_expiry>
}
   2be10:	bd10      	pop	{r4, pc}
   2be12:	bf00      	nop
   2be14:	20016d20 	.word	0x20016d20
   2be18:	20016cd0 	.word	0x20016cd0

0002be1c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   2be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2be1e:	4604      	mov	r4, r0
   2be20:	460d      	mov	r5, r1
	__asm__ volatile(
   2be22:	f04f 0320 	mov.w	r3, #32
   2be26:	f3ef 8611 	mrs	r6, BASEPRI
   2be2a:	f383 8811 	msr	BASEPRI, r3
   2be2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2be32:	4823      	ldr	r0, [pc, #140]	; (2bec0 <k_sched_time_slice_set+0xa4>)
   2be34:	f7fe fcee 	bl	2a814 <z_spin_lock_valid>
   2be38:	b968      	cbnz	r0, 2be56 <k_sched_time_slice_set+0x3a>
   2be3a:	2381      	movs	r3, #129	; 0x81
   2be3c:	4a21      	ldr	r2, [pc, #132]	; (2bec4 <k_sched_time_slice_set+0xa8>)
   2be3e:	4922      	ldr	r1, [pc, #136]	; (2bec8 <k_sched_time_slice_set+0xac>)
   2be40:	4822      	ldr	r0, [pc, #136]	; (2becc <k_sched_time_slice_set+0xb0>)
   2be42:	f003 ff15 	bl	2fc70 <printk>
   2be46:	491e      	ldr	r1, [pc, #120]	; (2bec0 <k_sched_time_slice_set+0xa4>)
   2be48:	4821      	ldr	r0, [pc, #132]	; (2bed0 <k_sched_time_slice_set+0xb4>)
   2be4a:	f003 ff11 	bl	2fc70 <printk>
   2be4e:	2181      	movs	r1, #129	; 0x81
   2be50:	481c      	ldr	r0, [pc, #112]	; (2bec4 <k_sched_time_slice_set+0xa8>)
   2be52:	f004 f9f3 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2be56:	481a      	ldr	r0, [pc, #104]	; (2bec0 <k_sched_time_slice_set+0xa4>)
   2be58:	f7fe fcf8 	bl	2a84c <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2be5c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2be60:	2200      	movs	r2, #0
   2be62:	f240 30e7 	movw	r0, #999	; 0x3e7
   2be66:	2100      	movs	r1, #0
   2be68:	4b1a      	ldr	r3, [pc, #104]	; (2bed4 <k_sched_time_slice_set+0xb8>)
   2be6a:	fbe7 0104 	umlal	r0, r1, r7, r4
   2be6e:	611a      	str	r2, [r3, #16]
   2be70:	2300      	movs	r3, #0
   2be72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2be76:	f7e5 f9bb 	bl	111f0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2be7a:	2c00      	cmp	r4, #0
   2be7c:	4b16      	ldr	r3, [pc, #88]	; (2bed8 <k_sched_time_slice_set+0xbc>)
   2be7e:	dc1b      	bgt.n	2beb8 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   2be80:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   2be82:	4b16      	ldr	r3, [pc, #88]	; (2bedc <k_sched_time_slice_set+0xc0>)
   2be84:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2be86:	f7ff ffb3 	bl	2bdf0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2be8a:	480d      	ldr	r0, [pc, #52]	; (2bec0 <k_sched_time_slice_set+0xa4>)
   2be8c:	f7fe fcd0 	bl	2a830 <z_spin_unlock_valid>
   2be90:	b968      	cbnz	r0, 2beae <k_sched_time_slice_set+0x92>
   2be92:	23ac      	movs	r3, #172	; 0xac
   2be94:	4a0b      	ldr	r2, [pc, #44]	; (2bec4 <k_sched_time_slice_set+0xa8>)
   2be96:	4912      	ldr	r1, [pc, #72]	; (2bee0 <k_sched_time_slice_set+0xc4>)
   2be98:	480c      	ldr	r0, [pc, #48]	; (2becc <k_sched_time_slice_set+0xb0>)
   2be9a:	f003 fee9 	bl	2fc70 <printk>
   2be9e:	4908      	ldr	r1, [pc, #32]	; (2bec0 <k_sched_time_slice_set+0xa4>)
   2bea0:	4810      	ldr	r0, [pc, #64]	; (2bee4 <k_sched_time_slice_set+0xc8>)
   2bea2:	f003 fee5 	bl	2fc70 <printk>
   2bea6:	21ac      	movs	r1, #172	; 0xac
   2bea8:	4806      	ldr	r0, [pc, #24]	; (2bec4 <k_sched_time_slice_set+0xa8>)
   2beaa:	f004 f9c7 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2beae:	f386 8811 	msr	BASEPRI, r6
   2beb2:	f3bf 8f6f 	isb	sy
	}
}
   2beb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   2beb8:	2802      	cmp	r0, #2
   2beba:	bfb8      	it	lt
   2bebc:	2002      	movlt	r0, #2
   2bebe:	e7df      	b.n	2be80 <k_sched_time_slice_set+0x64>
   2bec0:	20016d18 	.word	0x20016d18
   2bec4:	0003a62b 	.word	0x0003a62b
   2bec8:	0003a67d 	.word	0x0003a67d
   2becc:	0003a56b 	.word	0x0003a56b
   2bed0:	0003a692 	.word	0x0003a692
   2bed4:	20016cd0 	.word	0x20016cd0
   2bed8:	20016d20 	.word	0x20016d20
   2bedc:	20016d1c 	.word	0x20016d1c
   2bee0:	0003a651 	.word	0x0003a651
   2bee4:	0003a668 	.word	0x0003a668

0002bee8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   2bee8:	b538      	push	{r3, r4, r5, lr}
   2beea:	4604      	mov	r4, r0
	__asm__ volatile(
   2beec:	f04f 0320 	mov.w	r3, #32
   2bef0:	f3ef 8511 	mrs	r5, BASEPRI
   2bef4:	f383 8811 	msr	BASEPRI, r3
   2bef8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2befc:	4817      	ldr	r0, [pc, #92]	; (2bf5c <z_unpend_thread_no_timeout+0x74>)
   2befe:	f7fe fc89 	bl	2a814 <z_spin_lock_valid>
   2bf02:	b968      	cbnz	r0, 2bf20 <z_unpend_thread_no_timeout+0x38>
   2bf04:	2381      	movs	r3, #129	; 0x81
   2bf06:	4a16      	ldr	r2, [pc, #88]	; (2bf60 <z_unpend_thread_no_timeout+0x78>)
   2bf08:	4916      	ldr	r1, [pc, #88]	; (2bf64 <z_unpend_thread_no_timeout+0x7c>)
   2bf0a:	4817      	ldr	r0, [pc, #92]	; (2bf68 <z_unpend_thread_no_timeout+0x80>)
   2bf0c:	f003 feb0 	bl	2fc70 <printk>
   2bf10:	4912      	ldr	r1, [pc, #72]	; (2bf5c <z_unpend_thread_no_timeout+0x74>)
   2bf12:	4816      	ldr	r0, [pc, #88]	; (2bf6c <z_unpend_thread_no_timeout+0x84>)
   2bf14:	f003 feac 	bl	2fc70 <printk>
   2bf18:	2181      	movs	r1, #129	; 0x81
   2bf1a:	4811      	ldr	r0, [pc, #68]	; (2bf60 <z_unpend_thread_no_timeout+0x78>)
   2bf1c:	f004 f98e 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2bf20:	480e      	ldr	r0, [pc, #56]	; (2bf5c <z_unpend_thread_no_timeout+0x74>)
   2bf22:	f7fe fc93 	bl	2a84c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   2bf26:	4620      	mov	r0, r4
   2bf28:	f000 f900 	bl	2c12c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bf2c:	480b      	ldr	r0, [pc, #44]	; (2bf5c <z_unpend_thread_no_timeout+0x74>)
   2bf2e:	f7fe fc7f 	bl	2a830 <z_spin_unlock_valid>
   2bf32:	b968      	cbnz	r0, 2bf50 <z_unpend_thread_no_timeout+0x68>
   2bf34:	23ac      	movs	r3, #172	; 0xac
   2bf36:	4a0a      	ldr	r2, [pc, #40]	; (2bf60 <z_unpend_thread_no_timeout+0x78>)
   2bf38:	490d      	ldr	r1, [pc, #52]	; (2bf70 <z_unpend_thread_no_timeout+0x88>)
   2bf3a:	480b      	ldr	r0, [pc, #44]	; (2bf68 <z_unpend_thread_no_timeout+0x80>)
   2bf3c:	f003 fe98 	bl	2fc70 <printk>
   2bf40:	4906      	ldr	r1, [pc, #24]	; (2bf5c <z_unpend_thread_no_timeout+0x74>)
   2bf42:	480c      	ldr	r0, [pc, #48]	; (2bf74 <z_unpend_thread_no_timeout+0x8c>)
   2bf44:	f003 fe94 	bl	2fc70 <printk>
   2bf48:	21ac      	movs	r1, #172	; 0xac
   2bf4a:	4805      	ldr	r0, [pc, #20]	; (2bf60 <z_unpend_thread_no_timeout+0x78>)
   2bf4c:	f004 f976 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2bf50:	f385 8811 	msr	BASEPRI, r5
   2bf54:	f3bf 8f6f 	isb	sy
	}
}
   2bf58:	bd38      	pop	{r3, r4, r5, pc}
   2bf5a:	bf00      	nop
   2bf5c:	20016d18 	.word	0x20016d18
   2bf60:	0003a62b 	.word	0x0003a62b
   2bf64:	0003a67d 	.word	0x0003a67d
   2bf68:	0003a56b 	.word	0x0003a56b
   2bf6c:	0003a692 	.word	0x0003a692
   2bf70:	0003a651 	.word	0x0003a651
   2bf74:	0003a668 	.word	0x0003a668

0002bf78 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2bf78:	b538      	push	{r3, r4, r5, lr}
   2bf7a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2bf7c:	460d      	mov	r5, r1
   2bf7e:	b9e9      	cbnz	r1, 2bfbc <z_reschedule+0x44>
   2bf80:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   2bf84:	b9d3      	cbnz	r3, 2bfbc <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   2bf86:	4b19      	ldr	r3, [pc, #100]	; (2bfec <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   2bf88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2bf8a:	689b      	ldr	r3, [r3, #8]
   2bf8c:	429a      	cmp	r2, r3
   2bf8e:	d015      	beq.n	2bfbc <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bf90:	f7fe fc4e 	bl	2a830 <z_spin_unlock_valid>
   2bf94:	b968      	cbnz	r0, 2bfb2 <z_reschedule+0x3a>
   2bf96:	23c3      	movs	r3, #195	; 0xc3
   2bf98:	4a15      	ldr	r2, [pc, #84]	; (2bff0 <z_reschedule+0x78>)
   2bf9a:	4916      	ldr	r1, [pc, #88]	; (2bff4 <z_reschedule+0x7c>)
   2bf9c:	4816      	ldr	r0, [pc, #88]	; (2bff8 <z_reschedule+0x80>)
   2bf9e:	f003 fe67 	bl	2fc70 <printk>
   2bfa2:	4621      	mov	r1, r4
   2bfa4:	4815      	ldr	r0, [pc, #84]	; (2bffc <z_reschedule+0x84>)
   2bfa6:	f003 fe63 	bl	2fc70 <printk>
   2bfaa:	21c3      	movs	r1, #195	; 0xc3
   2bfac:	4810      	ldr	r0, [pc, #64]	; (2bff0 <z_reschedule+0x78>)
   2bfae:	f004 f945 	bl	3023c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2bfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   2bfb6:	2000      	movs	r0, #0
   2bfb8:	f7eb baec 	b.w	17594 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bfbc:	4620      	mov	r0, r4
   2bfbe:	f7fe fc37 	bl	2a830 <z_spin_unlock_valid>
   2bfc2:	b968      	cbnz	r0, 2bfe0 <z_reschedule+0x68>
   2bfc4:	23ac      	movs	r3, #172	; 0xac
   2bfc6:	4a0a      	ldr	r2, [pc, #40]	; (2bff0 <z_reschedule+0x78>)
   2bfc8:	490a      	ldr	r1, [pc, #40]	; (2bff4 <z_reschedule+0x7c>)
   2bfca:	480b      	ldr	r0, [pc, #44]	; (2bff8 <z_reschedule+0x80>)
   2bfcc:	f003 fe50 	bl	2fc70 <printk>
   2bfd0:	4621      	mov	r1, r4
   2bfd2:	480a      	ldr	r0, [pc, #40]	; (2bffc <z_reschedule+0x84>)
   2bfd4:	f003 fe4c 	bl	2fc70 <printk>
   2bfd8:	21ac      	movs	r1, #172	; 0xac
   2bfda:	4805      	ldr	r0, [pc, #20]	; (2bff0 <z_reschedule+0x78>)
   2bfdc:	f004 f92e 	bl	3023c <assert_post_action>
   2bfe0:	f385 8811 	msr	BASEPRI, r5
   2bfe4:	f3bf 8f6f 	isb	sy
   2bfe8:	bd38      	pop	{r3, r4, r5, pc}
   2bfea:	bf00      	nop
   2bfec:	20016cd0 	.word	0x20016cd0
   2bff0:	0003a62b 	.word	0x0003a62b
   2bff4:	0003a651 	.word	0x0003a651
   2bff8:	0003a56b 	.word	0x0003a56b
   2bffc:	0003a668 	.word	0x0003a668

0002c000 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   2c000:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2c002:	f04f 0320 	mov.w	r3, #32
   2c006:	f3ef 8511 	mrs	r5, BASEPRI
   2c00a:	f383 8811 	msr	BASEPRI, r3
   2c00e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c012:	4829      	ldr	r0, [pc, #164]	; (2c0b8 <k_sched_lock+0xb8>)
   2c014:	f7fe fbfe 	bl	2a814 <z_spin_lock_valid>
   2c018:	b968      	cbnz	r0, 2c036 <k_sched_lock+0x36>
   2c01a:	2381      	movs	r3, #129	; 0x81
   2c01c:	4a27      	ldr	r2, [pc, #156]	; (2c0bc <k_sched_lock+0xbc>)
   2c01e:	4928      	ldr	r1, [pc, #160]	; (2c0c0 <k_sched_lock+0xc0>)
   2c020:	4828      	ldr	r0, [pc, #160]	; (2c0c4 <k_sched_lock+0xc4>)
   2c022:	f003 fe25 	bl	2fc70 <printk>
   2c026:	4924      	ldr	r1, [pc, #144]	; (2c0b8 <k_sched_lock+0xb8>)
   2c028:	4827      	ldr	r0, [pc, #156]	; (2c0c8 <k_sched_lock+0xc8>)
   2c02a:	f003 fe21 	bl	2fc70 <printk>
   2c02e:	2181      	movs	r1, #129	; 0x81
   2c030:	4822      	ldr	r0, [pc, #136]	; (2c0bc <k_sched_lock+0xbc>)
   2c032:	f004 f903 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2c036:	4820      	ldr	r0, [pc, #128]	; (2c0b8 <k_sched_lock+0xb8>)
   2c038:	f7fe fc08 	bl	2a84c <z_spin_lock_set_owner>
   2c03c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2c040:	b163      	cbz	r3, 2c05c <k_sched_lock+0x5c>
   2c042:	4922      	ldr	r1, [pc, #136]	; (2c0cc <k_sched_lock+0xcc>)
   2c044:	23fe      	movs	r3, #254	; 0xfe
   2c046:	4a22      	ldr	r2, [pc, #136]	; (2c0d0 <k_sched_lock+0xd0>)
   2c048:	481e      	ldr	r0, [pc, #120]	; (2c0c4 <k_sched_lock+0xc4>)
   2c04a:	f003 fe11 	bl	2fc70 <printk>
   2c04e:	4821      	ldr	r0, [pc, #132]	; (2c0d4 <k_sched_lock+0xd4>)
   2c050:	f003 fe0e 	bl	2fc70 <printk>
   2c054:	21fe      	movs	r1, #254	; 0xfe
   2c056:	481e      	ldr	r0, [pc, #120]	; (2c0d0 <k_sched_lock+0xd0>)
   2c058:	f004 f8f0 	bl	3023c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2c05c:	4c1e      	ldr	r4, [pc, #120]	; (2c0d8 <k_sched_lock+0xd8>)
   2c05e:	68a2      	ldr	r2, [r4, #8]
   2c060:	7bd2      	ldrb	r2, [r2, #15]
   2c062:	2a01      	cmp	r2, #1
   2c064:	d10c      	bne.n	2c080 <k_sched_lock+0x80>
   2c066:	491d      	ldr	r1, [pc, #116]	; (2c0dc <k_sched_lock+0xdc>)
   2c068:	23ff      	movs	r3, #255	; 0xff
   2c06a:	4a19      	ldr	r2, [pc, #100]	; (2c0d0 <k_sched_lock+0xd0>)
   2c06c:	4815      	ldr	r0, [pc, #84]	; (2c0c4 <k_sched_lock+0xc4>)
   2c06e:	f003 fdff 	bl	2fc70 <printk>
   2c072:	4818      	ldr	r0, [pc, #96]	; (2c0d4 <k_sched_lock+0xd4>)
   2c074:	f003 fdfc 	bl	2fc70 <printk>
   2c078:	21ff      	movs	r1, #255	; 0xff
   2c07a:	4815      	ldr	r0, [pc, #84]	; (2c0d0 <k_sched_lock+0xd0>)
   2c07c:	f004 f8de 	bl	3023c <assert_post_action>
	--_current->base.sched_locked;
   2c080:	68a2      	ldr	r2, [r4, #8]
   2c082:	7bd3      	ldrb	r3, [r2, #15]
   2c084:	3b01      	subs	r3, #1
   2c086:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c088:	480b      	ldr	r0, [pc, #44]	; (2c0b8 <k_sched_lock+0xb8>)
   2c08a:	f7fe fbd1 	bl	2a830 <z_spin_unlock_valid>
   2c08e:	b968      	cbnz	r0, 2c0ac <k_sched_lock+0xac>
   2c090:	23ac      	movs	r3, #172	; 0xac
   2c092:	4a0a      	ldr	r2, [pc, #40]	; (2c0bc <k_sched_lock+0xbc>)
   2c094:	4912      	ldr	r1, [pc, #72]	; (2c0e0 <k_sched_lock+0xe0>)
   2c096:	480b      	ldr	r0, [pc, #44]	; (2c0c4 <k_sched_lock+0xc4>)
   2c098:	f003 fdea 	bl	2fc70 <printk>
   2c09c:	4906      	ldr	r1, [pc, #24]	; (2c0b8 <k_sched_lock+0xb8>)
   2c09e:	4811      	ldr	r0, [pc, #68]	; (2c0e4 <k_sched_lock+0xe4>)
   2c0a0:	f003 fde6 	bl	2fc70 <printk>
   2c0a4:	21ac      	movs	r1, #172	; 0xac
   2c0a6:	4805      	ldr	r0, [pc, #20]	; (2c0bc <k_sched_lock+0xbc>)
   2c0a8:	f004 f8c8 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2c0ac:	f385 8811 	msr	BASEPRI, r5
   2c0b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2c0b4:	bd38      	pop	{r3, r4, r5, pc}
   2c0b6:	bf00      	nop
   2c0b8:	20016d18 	.word	0x20016d18
   2c0bc:	0003a62b 	.word	0x0003a62b
   2c0c0:	0003a67d 	.word	0x0003a67d
   2c0c4:	0003a56b 	.word	0x0003a56b
   2c0c8:	0003a692 	.word	0x0003a692
   2c0cc:	00040799 	.word	0x00040799
   2c0d0:	0004087d 	.word	0x0004087d
   2c0d4:	0003aba7 	.word	0x0003aba7
   2c0d8:	20016cd0 	.word	0x20016cd0
   2c0dc:	000408a8 	.word	0x000408a8
   2c0e0:	0003a651 	.word	0x0003a651
   2c0e4:	0003a668 	.word	0x0003a668

0002c0e8 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2c0e8:	4b0c      	ldr	r3, [pc, #48]	; (2c11c <z_priq_dumb_remove+0x34>)
{
   2c0ea:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2c0ec:	4299      	cmp	r1, r3
{
   2c0ee:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2c0f0:	d10b      	bne.n	2c10a <z_priq_dumb_remove+0x22>
   2c0f2:	490b      	ldr	r1, [pc, #44]	; (2c120 <z_priq_dumb_remove+0x38>)
   2c0f4:	480b      	ldr	r0, [pc, #44]	; (2c124 <z_priq_dumb_remove+0x3c>)
   2c0f6:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   2c0fa:	4a0b      	ldr	r2, [pc, #44]	; (2c128 <z_priq_dumb_remove+0x40>)
   2c0fc:	f003 fdb8 	bl	2fc70 <printk>
   2c100:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   2c104:	4808      	ldr	r0, [pc, #32]	; (2c128 <z_priq_dumb_remove+0x40>)
   2c106:	f004 f899 	bl	3023c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2c10a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   2c10e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c110:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c112:	2300      	movs	r3, #0
	node->prev = NULL;
   2c114:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2c118:	bd10      	pop	{r4, pc}
   2c11a:	bf00      	nop
   2c11c:	20015d68 	.word	0x20015d68
   2c120:	00040a5c 	.word	0x00040a5c
   2c124:	0003a56b 	.word	0x0003a56b
   2c128:	00040a3a 	.word	0x00040a3a

0002c12c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   2c12c:	6883      	ldr	r3, [r0, #8]
{
   2c12e:	b510      	push	{r4, lr}
   2c130:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2c132:	b95b      	cbnz	r3, 2c14c <unpend_thread_no_timeout+0x20>
   2c134:	490b      	ldr	r1, [pc, #44]	; (2c164 <unpend_thread_no_timeout+0x38>)
   2c136:	480c      	ldr	r0, [pc, #48]	; (2c168 <unpend_thread_no_timeout+0x3c>)
   2c138:	f240 234f 	movw	r3, #591	; 0x24f
   2c13c:	4a0b      	ldr	r2, [pc, #44]	; (2c16c <unpend_thread_no_timeout+0x40>)
   2c13e:	f003 fd97 	bl	2fc70 <printk>
   2c142:	f240 214f 	movw	r1, #591	; 0x24f
   2c146:	4809      	ldr	r0, [pc, #36]	; (2c16c <unpend_thread_no_timeout+0x40>)
   2c148:	f004 f878 	bl	3023c <assert_post_action>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2c14c:	4621      	mov	r1, r4
   2c14e:	68a0      	ldr	r0, [r4, #8]
   2c150:	f7ff ffca 	bl	2c0e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2c154:	7b63      	ldrb	r3, [r4, #13]
   2c156:	f023 0302 	bic.w	r3, r3, #2
   2c15a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2c15c:	2300      	movs	r3, #0
   2c15e:	60a3      	str	r3, [r4, #8]
}
   2c160:	bd10      	pop	{r4, pc}
   2c162:	bf00      	nop
   2c164:	00040a7d 	.word	0x00040a7d
   2c168:	0003a56b 	.word	0x0003a56b
   2c16c:	00040a3a 	.word	0x00040a3a

0002c170 <z_unpend_thread>:
{
   2c170:	b538      	push	{r3, r4, r5, lr}
   2c172:	4604      	mov	r4, r0
	__asm__ volatile(
   2c174:	f04f 0320 	mov.w	r3, #32
   2c178:	f3ef 8511 	mrs	r5, BASEPRI
   2c17c:	f383 8811 	msr	BASEPRI, r3
   2c180:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c184:	4819      	ldr	r0, [pc, #100]	; (2c1ec <z_unpend_thread+0x7c>)
   2c186:	f7fe fb45 	bl	2a814 <z_spin_lock_valid>
   2c18a:	b968      	cbnz	r0, 2c1a8 <z_unpend_thread+0x38>
   2c18c:	2381      	movs	r3, #129	; 0x81
   2c18e:	4a18      	ldr	r2, [pc, #96]	; (2c1f0 <z_unpend_thread+0x80>)
   2c190:	4918      	ldr	r1, [pc, #96]	; (2c1f4 <z_unpend_thread+0x84>)
   2c192:	4819      	ldr	r0, [pc, #100]	; (2c1f8 <z_unpend_thread+0x88>)
   2c194:	f003 fd6c 	bl	2fc70 <printk>
   2c198:	4914      	ldr	r1, [pc, #80]	; (2c1ec <z_unpend_thread+0x7c>)
   2c19a:	4818      	ldr	r0, [pc, #96]	; (2c1fc <z_unpend_thread+0x8c>)
   2c19c:	f003 fd68 	bl	2fc70 <printk>
   2c1a0:	2181      	movs	r1, #129	; 0x81
   2c1a2:	4813      	ldr	r0, [pc, #76]	; (2c1f0 <z_unpend_thread+0x80>)
   2c1a4:	f004 f84a 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2c1a8:	4810      	ldr	r0, [pc, #64]	; (2c1ec <z_unpend_thread+0x7c>)
   2c1aa:	f7fe fb4f 	bl	2a84c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   2c1ae:	4620      	mov	r0, r4
   2c1b0:	f7ff ffbc 	bl	2c12c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c1b4:	480d      	ldr	r0, [pc, #52]	; (2c1ec <z_unpend_thread+0x7c>)
   2c1b6:	f7fe fb3b 	bl	2a830 <z_spin_unlock_valid>
   2c1ba:	b968      	cbnz	r0, 2c1d8 <z_unpend_thread+0x68>
   2c1bc:	23ac      	movs	r3, #172	; 0xac
   2c1be:	4a0c      	ldr	r2, [pc, #48]	; (2c1f0 <z_unpend_thread+0x80>)
   2c1c0:	490f      	ldr	r1, [pc, #60]	; (2c200 <z_unpend_thread+0x90>)
   2c1c2:	480d      	ldr	r0, [pc, #52]	; (2c1f8 <z_unpend_thread+0x88>)
   2c1c4:	f003 fd54 	bl	2fc70 <printk>
   2c1c8:	4908      	ldr	r1, [pc, #32]	; (2c1ec <z_unpend_thread+0x7c>)
   2c1ca:	480e      	ldr	r0, [pc, #56]	; (2c204 <z_unpend_thread+0x94>)
   2c1cc:	f003 fd50 	bl	2fc70 <printk>
   2c1d0:	21ac      	movs	r1, #172	; 0xac
   2c1d2:	4807      	ldr	r0, [pc, #28]	; (2c1f0 <z_unpend_thread+0x80>)
   2c1d4:	f004 f832 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2c1d8:	f385 8811 	msr	BASEPRI, r5
   2c1dc:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2c1e0:	f104 0018 	add.w	r0, r4, #24
}
   2c1e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c1e8:	f001 b974 	b.w	2d4d4 <z_abort_timeout>
   2c1ec:	20016d18 	.word	0x20016d18
   2c1f0:	0003a62b 	.word	0x0003a62b
   2c1f4:	0003a67d 	.word	0x0003a67d
   2c1f8:	0003a56b 	.word	0x0003a56b
   2c1fc:	0003a692 	.word	0x0003a692
   2c200:	0003a651 	.word	0x0003a651
   2c204:	0003a668 	.word	0x0003a668

0002c208 <update_cache>:
{
   2c208:	b538      	push	{r3, r4, r5, lr}
   2c20a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   2c20c:	4814      	ldr	r0, [pc, #80]	; (2c260 <update_cache+0x58>)
   2c20e:	f00b f9be 	bl	3758e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2c212:	4d14      	ldr	r5, [pc, #80]	; (2c264 <update_cache+0x5c>)
   2c214:	4604      	mov	r4, r0
   2c216:	b900      	cbnz	r0, 2c21a <update_cache+0x12>
   2c218:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   2c21a:	b9ca      	cbnz	r2, 2c250 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   2c21c:	68ab      	ldr	r3, [r5, #8]
   2c21e:	b963      	cbnz	r3, 2c23a <update_cache+0x32>
   2c220:	4911      	ldr	r1, [pc, #68]	; (2c268 <update_cache+0x60>)
   2c222:	2385      	movs	r3, #133	; 0x85
   2c224:	4a11      	ldr	r2, [pc, #68]	; (2c26c <update_cache+0x64>)
   2c226:	4812      	ldr	r0, [pc, #72]	; (2c270 <update_cache+0x68>)
   2c228:	f003 fd22 	bl	2fc70 <printk>
   2c22c:	4811      	ldr	r0, [pc, #68]	; (2c274 <update_cache+0x6c>)
   2c22e:	f003 fd1f 	bl	2fc70 <printk>
   2c232:	2185      	movs	r1, #133	; 0x85
   2c234:	480d      	ldr	r0, [pc, #52]	; (2c26c <update_cache+0x64>)
   2c236:	f004 f801 	bl	3023c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2c23a:	68ab      	ldr	r3, [r5, #8]
   2c23c:	7b5a      	ldrb	r2, [r3, #13]
   2c23e:	06d2      	lsls	r2, r2, #27
   2c240:	d106      	bne.n	2c250 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2c242:	69a2      	ldr	r2, [r4, #24]
   2c244:	b922      	cbnz	r2, 2c250 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   2c246:	89da      	ldrh	r2, [r3, #14]
   2c248:	2a7f      	cmp	r2, #127	; 0x7f
   2c24a:	d901      	bls.n	2c250 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   2c24c:	626b      	str	r3, [r5, #36]	; 0x24
}
   2c24e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2c250:	68ab      	ldr	r3, [r5, #8]
   2c252:	42a3      	cmp	r3, r4
   2c254:	d001      	beq.n	2c25a <update_cache+0x52>
			z_reset_time_slice();
   2c256:	f7ff fdcb 	bl	2bdf0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2c25a:	626c      	str	r4, [r5, #36]	; 0x24
}
   2c25c:	e7f7      	b.n	2c24e <update_cache+0x46>
   2c25e:	bf00      	nop
   2c260:	20016cf8 	.word	0x20016cf8
   2c264:	20016cd0 	.word	0x20016cd0
   2c268:	00040a94 	.word	0x00040a94
   2c26c:	00040a3a 	.word	0x00040a3a
   2c270:	0003a56b 	.word	0x0003a56b
   2c274:	0003aba7 	.word	0x0003aba7

0002c278 <unready_thread>:
{
   2c278:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2c27a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2c27e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2c280:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2c282:	7b43      	ldrb	r3, [r0, #13]
   2c284:	da06      	bge.n	2c294 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2c286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   2c28a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2c28c:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   2c28e:	4806      	ldr	r0, [pc, #24]	; (2c2a8 <unready_thread+0x30>)
   2c290:	f7ff ff2a 	bl	2c0e8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   2c294:	4b05      	ldr	r3, [pc, #20]	; (2c2ac <unready_thread+0x34>)
   2c296:	6898      	ldr	r0, [r3, #8]
   2c298:	1b03      	subs	r3, r0, r4
   2c29a:	4258      	negs	r0, r3
   2c29c:	4158      	adcs	r0, r3
}
   2c29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2c2a2:	f7ff bfb1 	b.w	2c208 <update_cache>
   2c2a6:	bf00      	nop
   2c2a8:	20016cf8 	.word	0x20016cf8
   2c2ac:	20016cd0 	.word	0x20016cd0

0002c2b0 <add_to_waitq_locked>:
{
   2c2b0:	b538      	push	{r3, r4, r5, lr}
   2c2b2:	4604      	mov	r4, r0
   2c2b4:	460d      	mov	r5, r1
	unready_thread(thread);
   2c2b6:	f7ff ffdf 	bl	2c278 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2c2ba:	7b63      	ldrb	r3, [r4, #13]
   2c2bc:	f043 0302 	orr.w	r3, r3, #2
   2c2c0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2c2c2:	b32d      	cbz	r5, 2c310 <add_to_waitq_locked+0x60>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2c2c4:	4b18      	ldr	r3, [pc, #96]	; (2c328 <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
   2c2c6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2c2c8:	429c      	cmp	r4, r3
   2c2ca:	d10b      	bne.n	2c2e4 <add_to_waitq_locked+0x34>
   2c2cc:	4917      	ldr	r1, [pc, #92]	; (2c32c <add_to_waitq_locked+0x7c>)
   2c2ce:	4818      	ldr	r0, [pc, #96]	; (2c330 <add_to_waitq_locked+0x80>)
   2c2d0:	f240 33b5 	movw	r3, #949	; 0x3b5
   2c2d4:	4a17      	ldr	r2, [pc, #92]	; (2c334 <add_to_waitq_locked+0x84>)
   2c2d6:	f003 fccb 	bl	2fc70 <printk>
   2c2da:	f240 31b5 	movw	r1, #949	; 0x3b5
   2c2de:	4815      	ldr	r0, [pc, #84]	; (2c334 <add_to_waitq_locked+0x84>)
   2c2e0:	f003 ffac 	bl	3023c <assert_post_action>
	return list->head == list;
   2c2e4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c2e6:	429d      	cmp	r5, r3
   2c2e8:	bf08      	it	eq
   2c2ea:	2300      	moveq	r3, #0
   2c2ec:	2b00      	cmp	r3, #0
   2c2ee:	bf38      	it	cc
   2c2f0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2c2f2:	b19b      	cbz	r3, 2c31c <add_to_waitq_locked+0x6c>
	int32_t b1 = thread_1->base.prio;
   2c2f4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2c2f8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2c2fc:	4291      	cmp	r1, r2
   2c2fe:	d008      	beq.n	2c312 <add_to_waitq_locked+0x62>
		return b2 - b1;
   2c300:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2c302:	2a00      	cmp	r2, #0
   2c304:	dd05      	ble.n	2c312 <add_to_waitq_locked+0x62>
	sys_dnode_t *const prev = successor->prev;
   2c306:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2c308:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2c30c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2c30e:	605c      	str	r4, [r3, #4]
}
   2c310:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2c312:	686a      	ldr	r2, [r5, #4]
   2c314:	4293      	cmp	r3, r2
   2c316:	d001      	beq.n	2c31c <add_to_waitq_locked+0x6c>
   2c318:	681b      	ldr	r3, [r3, #0]
   2c31a:	e7ea      	b.n	2c2f2 <add_to_waitq_locked+0x42>
	sys_dnode_t *const tail = list->tail;
   2c31c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2c31e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2c322:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2c324:	606c      	str	r4, [r5, #4]
   2c326:	e7f3      	b.n	2c310 <add_to_waitq_locked+0x60>
   2c328:	20015d68 	.word	0x20015d68
   2c32c:	00040a5c 	.word	0x00040a5c
   2c330:	0003a56b 	.word	0x0003a56b
   2c334:	00040a3a 	.word	0x00040a3a

0002c338 <pend>:
{
   2c338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c33c:	4604      	mov	r4, r0
   2c33e:	460d      	mov	r5, r1
   2c340:	4616      	mov	r6, r2
   2c342:	461f      	mov	r7, r3
	__asm__ volatile(
   2c344:	f04f 0320 	mov.w	r3, #32
   2c348:	f3ef 8811 	mrs	r8, BASEPRI
   2c34c:	f383 8811 	msr	BASEPRI, r3
   2c350:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c354:	481f      	ldr	r0, [pc, #124]	; (2c3d4 <pend+0x9c>)
   2c356:	f7fe fa5d 	bl	2a814 <z_spin_lock_valid>
   2c35a:	b968      	cbnz	r0, 2c378 <pend+0x40>
   2c35c:	2381      	movs	r3, #129	; 0x81
   2c35e:	4a1e      	ldr	r2, [pc, #120]	; (2c3d8 <pend+0xa0>)
   2c360:	491e      	ldr	r1, [pc, #120]	; (2c3dc <pend+0xa4>)
   2c362:	481f      	ldr	r0, [pc, #124]	; (2c3e0 <pend+0xa8>)
   2c364:	f003 fc84 	bl	2fc70 <printk>
   2c368:	491a      	ldr	r1, [pc, #104]	; (2c3d4 <pend+0x9c>)
   2c36a:	481e      	ldr	r0, [pc, #120]	; (2c3e4 <pend+0xac>)
   2c36c:	f003 fc80 	bl	2fc70 <printk>
   2c370:	2181      	movs	r1, #129	; 0x81
   2c372:	4819      	ldr	r0, [pc, #100]	; (2c3d8 <pend+0xa0>)
   2c374:	f003 ff62 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2c378:	4816      	ldr	r0, [pc, #88]	; (2c3d4 <pend+0x9c>)
   2c37a:	f7fe fa67 	bl	2a84c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   2c37e:	4620      	mov	r0, r4
   2c380:	4629      	mov	r1, r5
   2c382:	f7ff ff95 	bl	2c2b0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c386:	4813      	ldr	r0, [pc, #76]	; (2c3d4 <pend+0x9c>)
   2c388:	f7fe fa52 	bl	2a830 <z_spin_unlock_valid>
   2c38c:	b968      	cbnz	r0, 2c3aa <pend+0x72>
   2c38e:	23ac      	movs	r3, #172	; 0xac
   2c390:	4a11      	ldr	r2, [pc, #68]	; (2c3d8 <pend+0xa0>)
   2c392:	4915      	ldr	r1, [pc, #84]	; (2c3e8 <pend+0xb0>)
   2c394:	4812      	ldr	r0, [pc, #72]	; (2c3e0 <pend+0xa8>)
   2c396:	f003 fc6b 	bl	2fc70 <printk>
   2c39a:	490e      	ldr	r1, [pc, #56]	; (2c3d4 <pend+0x9c>)
   2c39c:	4813      	ldr	r0, [pc, #76]	; (2c3ec <pend+0xb4>)
   2c39e:	f003 fc67 	bl	2fc70 <printk>
   2c3a2:	21ac      	movs	r1, #172	; 0xac
   2c3a4:	480c      	ldr	r0, [pc, #48]	; (2c3d8 <pend+0xa0>)
   2c3a6:	f003 ff49 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2c3aa:	f388 8811 	msr	BASEPRI, r8
   2c3ae:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2c3b2:	1c7b      	adds	r3, r7, #1
   2c3b4:	bf08      	it	eq
   2c3b6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2c3ba:	d008      	beq.n	2c3ce <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2c3bc:	4632      	mov	r2, r6
   2c3be:	463b      	mov	r3, r7
   2c3c0:	f104 0018 	add.w	r0, r4, #24
   2c3c4:	490a      	ldr	r1, [pc, #40]	; (2c3f0 <pend+0xb8>)
}
   2c3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c3ca:	f000 bfaf 	b.w	2d32c <z_add_timeout>
   2c3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c3d2:	bf00      	nop
   2c3d4:	20016d18 	.word	0x20016d18
   2c3d8:	0003a62b 	.word	0x0003a62b
   2c3dc:	0003a67d 	.word	0x0003a67d
   2c3e0:	0003a56b 	.word	0x0003a56b
   2c3e4:	0003a692 	.word	0x0003a692
   2c3e8:	0003a651 	.word	0x0003a651
   2c3ec:	0003a668 	.word	0x0003a668
   2c3f0:	0002c9a1 	.word	0x0002c9a1

0002c3f4 <z_pend_curr>:
{
   2c3f4:	b538      	push	{r3, r4, r5, lr}
   2c3f6:	4604      	mov	r4, r0
	pending_current = _current;
   2c3f8:	4b10      	ldr	r3, [pc, #64]	; (2c43c <z_pend_curr+0x48>)
{
   2c3fa:	460d      	mov	r5, r1
	pending_current = _current;
   2c3fc:	6898      	ldr	r0, [r3, #8]
   2c3fe:	4b10      	ldr	r3, [pc, #64]	; (2c440 <z_pend_curr+0x4c>)
{
   2c400:	4611      	mov	r1, r2
	pending_current = _current;
   2c402:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   2c404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2c408:	f7ff ff96 	bl	2c338 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c40c:	4620      	mov	r0, r4
   2c40e:	f7fe fa0f 	bl	2a830 <z_spin_unlock_valid>
   2c412:	b968      	cbnz	r0, 2c430 <z_pend_curr+0x3c>
   2c414:	23c3      	movs	r3, #195	; 0xc3
   2c416:	4a0b      	ldr	r2, [pc, #44]	; (2c444 <z_pend_curr+0x50>)
   2c418:	490b      	ldr	r1, [pc, #44]	; (2c448 <z_pend_curr+0x54>)
   2c41a:	480c      	ldr	r0, [pc, #48]	; (2c44c <z_pend_curr+0x58>)
   2c41c:	f003 fc28 	bl	2fc70 <printk>
   2c420:	4621      	mov	r1, r4
   2c422:	480b      	ldr	r0, [pc, #44]	; (2c450 <z_pend_curr+0x5c>)
   2c424:	f003 fc24 	bl	2fc70 <printk>
   2c428:	21c3      	movs	r1, #195	; 0xc3
   2c42a:	4806      	ldr	r0, [pc, #24]	; (2c444 <z_pend_curr+0x50>)
   2c42c:	f003 ff06 	bl	3023c <assert_post_action>
   2c430:	4628      	mov	r0, r5
}
   2c432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c436:	f7eb b8ad 	b.w	17594 <arch_swap>
   2c43a:	bf00      	nop
   2c43c:	20016cd0 	.word	0x20016cd0
   2c440:	20016d14 	.word	0x20016d14
   2c444:	0003a62b 	.word	0x0003a62b
   2c448:	0003a651 	.word	0x0003a651
   2c44c:	0003a56b 	.word	0x0003a56b
   2c450:	0003a668 	.word	0x0003a668

0002c454 <z_impl_k_thread_suspend>:
{
   2c454:	b570      	push	{r4, r5, r6, lr}
   2c456:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   2c458:	3018      	adds	r0, #24
   2c45a:	f001 f83b 	bl	2d4d4 <z_abort_timeout>
	__asm__ volatile(
   2c45e:	f04f 0320 	mov.w	r3, #32
   2c462:	f3ef 8611 	mrs	r6, BASEPRI
   2c466:	f383 8811 	msr	BASEPRI, r3
   2c46a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c46e:	4825      	ldr	r0, [pc, #148]	; (2c504 <z_impl_k_thread_suspend+0xb0>)
   2c470:	f7fe f9d0 	bl	2a814 <z_spin_lock_valid>
   2c474:	b968      	cbnz	r0, 2c492 <z_impl_k_thread_suspend+0x3e>
   2c476:	2381      	movs	r3, #129	; 0x81
   2c478:	4a23      	ldr	r2, [pc, #140]	; (2c508 <z_impl_k_thread_suspend+0xb4>)
   2c47a:	4924      	ldr	r1, [pc, #144]	; (2c50c <z_impl_k_thread_suspend+0xb8>)
   2c47c:	4824      	ldr	r0, [pc, #144]	; (2c510 <z_impl_k_thread_suspend+0xbc>)
   2c47e:	f003 fbf7 	bl	2fc70 <printk>
   2c482:	4920      	ldr	r1, [pc, #128]	; (2c504 <z_impl_k_thread_suspend+0xb0>)
   2c484:	4823      	ldr	r0, [pc, #140]	; (2c514 <z_impl_k_thread_suspend+0xc0>)
   2c486:	f003 fbf3 	bl	2fc70 <printk>
   2c48a:	2181      	movs	r1, #129	; 0x81
   2c48c:	481e      	ldr	r0, [pc, #120]	; (2c508 <z_impl_k_thread_suspend+0xb4>)
   2c48e:	f003 fed5 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2c492:	481c      	ldr	r0, [pc, #112]	; (2c504 <z_impl_k_thread_suspend+0xb0>)
   2c494:	f7fe f9da 	bl	2a84c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2c498:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2c49c:	7b63      	ldrb	r3, [r4, #13]
   2c49e:	2a00      	cmp	r2, #0
   2c4a0:	da06      	bge.n	2c4b0 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2c4a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   2c4a6:	4621      	mov	r1, r4
   2c4a8:	481b      	ldr	r0, [pc, #108]	; (2c518 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2c4aa:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   2c4ac:	f7ff fe1c 	bl	2c0e8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2c4b0:	4d1a      	ldr	r5, [pc, #104]	; (2c51c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2c4b2:	7b63      	ldrb	r3, [r4, #13]
   2c4b4:	68a8      	ldr	r0, [r5, #8]
   2c4b6:	f043 0310 	orr.w	r3, r3, #16
   2c4ba:	7363      	strb	r3, [r4, #13]
   2c4bc:	1b03      	subs	r3, r0, r4
   2c4be:	4258      	negs	r0, r3
   2c4c0:	4158      	adcs	r0, r3
   2c4c2:	f7ff fea1 	bl	2c208 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c4c6:	480f      	ldr	r0, [pc, #60]	; (2c504 <z_impl_k_thread_suspend+0xb0>)
   2c4c8:	f7fe f9b2 	bl	2a830 <z_spin_unlock_valid>
   2c4cc:	b968      	cbnz	r0, 2c4ea <z_impl_k_thread_suspend+0x96>
   2c4ce:	23ac      	movs	r3, #172	; 0xac
   2c4d0:	4a0d      	ldr	r2, [pc, #52]	; (2c508 <z_impl_k_thread_suspend+0xb4>)
   2c4d2:	4913      	ldr	r1, [pc, #76]	; (2c520 <z_impl_k_thread_suspend+0xcc>)
   2c4d4:	480e      	ldr	r0, [pc, #56]	; (2c510 <z_impl_k_thread_suspend+0xbc>)
   2c4d6:	f003 fbcb 	bl	2fc70 <printk>
   2c4da:	490a      	ldr	r1, [pc, #40]	; (2c504 <z_impl_k_thread_suspend+0xb0>)
   2c4dc:	4811      	ldr	r0, [pc, #68]	; (2c524 <z_impl_k_thread_suspend+0xd0>)
   2c4de:	f003 fbc7 	bl	2fc70 <printk>
   2c4e2:	21ac      	movs	r1, #172	; 0xac
   2c4e4:	4808      	ldr	r0, [pc, #32]	; (2c508 <z_impl_k_thread_suspend+0xb4>)
   2c4e6:	f003 fea9 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2c4ea:	f386 8811 	msr	BASEPRI, r6
   2c4ee:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2c4f2:	68ab      	ldr	r3, [r5, #8]
   2c4f4:	42a3      	cmp	r3, r4
   2c4f6:	d103      	bne.n	2c500 <z_impl_k_thread_suspend+0xac>
}
   2c4f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2c4fc:	f00b b83d 	b.w	3757a <z_reschedule_unlocked>
}
   2c500:	bd70      	pop	{r4, r5, r6, pc}
   2c502:	bf00      	nop
   2c504:	20016d18 	.word	0x20016d18
   2c508:	0003a62b 	.word	0x0003a62b
   2c50c:	0003a67d 	.word	0x0003a67d
   2c510:	0003a56b 	.word	0x0003a56b
   2c514:	0003a692 	.word	0x0003a692
   2c518:	20016cf8 	.word	0x20016cf8
   2c51c:	20016cd0 	.word	0x20016cd0
   2c520:	0003a651 	.word	0x0003a651
   2c524:	0003a668 	.word	0x0003a668

0002c528 <k_sched_unlock>:
{
   2c528:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2c52a:	f04f 0320 	mov.w	r3, #32
   2c52e:	f3ef 8511 	mrs	r5, BASEPRI
   2c532:	f383 8811 	msr	BASEPRI, r3
   2c536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c53a:	482d      	ldr	r0, [pc, #180]	; (2c5f0 <k_sched_unlock+0xc8>)
   2c53c:	f7fe f96a 	bl	2a814 <z_spin_lock_valid>
   2c540:	b968      	cbnz	r0, 2c55e <k_sched_unlock+0x36>
   2c542:	2381      	movs	r3, #129	; 0x81
   2c544:	4a2b      	ldr	r2, [pc, #172]	; (2c5f4 <k_sched_unlock+0xcc>)
   2c546:	492c      	ldr	r1, [pc, #176]	; (2c5f8 <k_sched_unlock+0xd0>)
   2c548:	482c      	ldr	r0, [pc, #176]	; (2c5fc <k_sched_unlock+0xd4>)
   2c54a:	f003 fb91 	bl	2fc70 <printk>
   2c54e:	4928      	ldr	r1, [pc, #160]	; (2c5f0 <k_sched_unlock+0xc8>)
   2c550:	482b      	ldr	r0, [pc, #172]	; (2c600 <k_sched_unlock+0xd8>)
   2c552:	f003 fb8d 	bl	2fc70 <printk>
   2c556:	2181      	movs	r1, #129	; 0x81
   2c558:	4826      	ldr	r0, [pc, #152]	; (2c5f4 <k_sched_unlock+0xcc>)
   2c55a:	f003 fe6f 	bl	3023c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   2c55e:	4c29      	ldr	r4, [pc, #164]	; (2c604 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   2c560:	4823      	ldr	r0, [pc, #140]	; (2c5f0 <k_sched_unlock+0xc8>)
   2c562:	f7fe f973 	bl	2a84c <z_spin_lock_set_owner>
   2c566:	68a2      	ldr	r2, [r4, #8]
   2c568:	7bd2      	ldrb	r2, [r2, #15]
   2c56a:	b972      	cbnz	r2, 2c58a <k_sched_unlock+0x62>
   2c56c:	4926      	ldr	r1, [pc, #152]	; (2c608 <k_sched_unlock+0xe0>)
   2c56e:	f240 3352 	movw	r3, #850	; 0x352
   2c572:	4a26      	ldr	r2, [pc, #152]	; (2c60c <k_sched_unlock+0xe4>)
   2c574:	4821      	ldr	r0, [pc, #132]	; (2c5fc <k_sched_unlock+0xd4>)
   2c576:	f003 fb7b 	bl	2fc70 <printk>
   2c57a:	4825      	ldr	r0, [pc, #148]	; (2c610 <k_sched_unlock+0xe8>)
   2c57c:	f003 fb78 	bl	2fc70 <printk>
   2c580:	f240 3152 	movw	r1, #850	; 0x352
   2c584:	4821      	ldr	r0, [pc, #132]	; (2c60c <k_sched_unlock+0xe4>)
   2c586:	f003 fe59 	bl	3023c <assert_post_action>
   2c58a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   2c58e:	b173      	cbz	r3, 2c5ae <k_sched_unlock+0x86>
   2c590:	4920      	ldr	r1, [pc, #128]	; (2c614 <k_sched_unlock+0xec>)
   2c592:	f240 3353 	movw	r3, #851	; 0x353
   2c596:	4a1d      	ldr	r2, [pc, #116]	; (2c60c <k_sched_unlock+0xe4>)
   2c598:	4818      	ldr	r0, [pc, #96]	; (2c5fc <k_sched_unlock+0xd4>)
   2c59a:	f003 fb69 	bl	2fc70 <printk>
   2c59e:	481c      	ldr	r0, [pc, #112]	; (2c610 <k_sched_unlock+0xe8>)
   2c5a0:	f003 fb66 	bl	2fc70 <printk>
   2c5a4:	f240 3153 	movw	r1, #851	; 0x353
   2c5a8:	4818      	ldr	r0, [pc, #96]	; (2c60c <k_sched_unlock+0xe4>)
   2c5aa:	f003 fe47 	bl	3023c <assert_post_action>
		++_current->base.sched_locked;
   2c5ae:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   2c5b0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2c5b2:	7bd3      	ldrb	r3, [r2, #15]
   2c5b4:	3301      	adds	r3, #1
   2c5b6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2c5b8:	f7ff fe26 	bl	2c208 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c5bc:	480c      	ldr	r0, [pc, #48]	; (2c5f0 <k_sched_unlock+0xc8>)
   2c5be:	f7fe f937 	bl	2a830 <z_spin_unlock_valid>
   2c5c2:	b968      	cbnz	r0, 2c5e0 <k_sched_unlock+0xb8>
   2c5c4:	23ac      	movs	r3, #172	; 0xac
   2c5c6:	4a0b      	ldr	r2, [pc, #44]	; (2c5f4 <k_sched_unlock+0xcc>)
   2c5c8:	4913      	ldr	r1, [pc, #76]	; (2c618 <k_sched_unlock+0xf0>)
   2c5ca:	480c      	ldr	r0, [pc, #48]	; (2c5fc <k_sched_unlock+0xd4>)
   2c5cc:	f003 fb50 	bl	2fc70 <printk>
   2c5d0:	4907      	ldr	r1, [pc, #28]	; (2c5f0 <k_sched_unlock+0xc8>)
   2c5d2:	4812      	ldr	r0, [pc, #72]	; (2c61c <k_sched_unlock+0xf4>)
   2c5d4:	f003 fb4c 	bl	2fc70 <printk>
   2c5d8:	21ac      	movs	r1, #172	; 0xac
   2c5da:	4806      	ldr	r0, [pc, #24]	; (2c5f4 <k_sched_unlock+0xcc>)
   2c5dc:	f003 fe2e 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2c5e0:	f385 8811 	msr	BASEPRI, r5
   2c5e4:	f3bf 8f6f 	isb	sy
}
   2c5e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2c5ec:	f00a bfc5 	b.w	3757a <z_reschedule_unlocked>
   2c5f0:	20016d18 	.word	0x20016d18
   2c5f4:	0003a62b 	.word	0x0003a62b
   2c5f8:	0003a67d 	.word	0x0003a67d
   2c5fc:	0003a56b 	.word	0x0003a56b
   2c600:	0003a692 	.word	0x0003a692
   2c604:	20016cd0 	.word	0x20016cd0
   2c608:	00040abb 	.word	0x00040abb
   2c60c:	00040a3a 	.word	0x00040a3a
   2c610:	0003aba7 	.word	0x0003aba7
   2c614:	00040799 	.word	0x00040799
   2c618:	0003a651 	.word	0x0003a651
   2c61c:	0003a668 	.word	0x0003a668

0002c620 <move_thread_to_end_of_prio_q>:
{
   2c620:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2c622:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2c626:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2c628:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2c62a:	7b43      	ldrb	r3, [r0, #13]
   2c62c:	da06      	bge.n	2c63c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2c62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   2c632:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2c634:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   2c636:	4820      	ldr	r0, [pc, #128]	; (2c6b8 <move_thread_to_end_of_prio_q+0x98>)
   2c638:	f7ff fd56 	bl	2c0e8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2c63c:	7b63      	ldrb	r3, [r4, #13]
   2c63e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2c642:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2c644:	4b1d      	ldr	r3, [pc, #116]	; (2c6bc <move_thread_to_end_of_prio_q+0x9c>)
   2c646:	429c      	cmp	r4, r3
   2c648:	d10b      	bne.n	2c662 <move_thread_to_end_of_prio_q+0x42>
   2c64a:	491d      	ldr	r1, [pc, #116]	; (2c6c0 <move_thread_to_end_of_prio_q+0xa0>)
   2c64c:	481d      	ldr	r0, [pc, #116]	; (2c6c4 <move_thread_to_end_of_prio_q+0xa4>)
   2c64e:	f240 33b5 	movw	r3, #949	; 0x3b5
   2c652:	4a1d      	ldr	r2, [pc, #116]	; (2c6c8 <move_thread_to_end_of_prio_q+0xa8>)
   2c654:	f003 fb0c 	bl	2fc70 <printk>
   2c658:	f240 31b5 	movw	r1, #949	; 0x3b5
   2c65c:	481a      	ldr	r0, [pc, #104]	; (2c6c8 <move_thread_to_end_of_prio_q+0xa8>)
   2c65e:	f003 fded 	bl	3023c <assert_post_action>
	return list->head == list;
   2c662:	4a1a      	ldr	r2, [pc, #104]	; (2c6cc <move_thread_to_end_of_prio_q+0xac>)
   2c664:	4611      	mov	r1, r2
   2c666:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2c66a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c66c:	428b      	cmp	r3, r1
   2c66e:	bf08      	it	eq
   2c670:	2300      	moveq	r3, #0
   2c672:	2b00      	cmp	r3, #0
   2c674:	bf38      	it	cc
   2c676:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2c678:	b1cb      	cbz	r3, 2c6ae <move_thread_to_end_of_prio_q+0x8e>
	int32_t b1 = thread_1->base.prio;
   2c67a:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2c67e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2c682:	4286      	cmp	r6, r0
   2c684:	d00f      	beq.n	2c6a6 <move_thread_to_end_of_prio_q+0x86>
		return b2 - b1;
   2c686:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2c688:	2800      	cmp	r0, #0
   2c68a:	dd0c      	ble.n	2c6a6 <move_thread_to_end_of_prio_q+0x86>
	sys_dnode_t *const prev = successor->prev;
   2c68c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2c68e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   2c692:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2c694:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   2c696:	6890      	ldr	r0, [r2, #8]
   2c698:	1b03      	subs	r3, r0, r4
   2c69a:	4258      	negs	r0, r3
   2c69c:	4158      	adcs	r0, r3
}
   2c69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2c6a2:	f7ff bdb1 	b.w	2c208 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2c6a6:	42ab      	cmp	r3, r5
   2c6a8:	d001      	beq.n	2c6ae <move_thread_to_end_of_prio_q+0x8e>
   2c6aa:	681b      	ldr	r3, [r3, #0]
   2c6ac:	e7e4      	b.n	2c678 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   2c6ae:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   2c6b2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2c6b4:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2c6b6:	e7ee      	b.n	2c696 <move_thread_to_end_of_prio_q+0x76>
   2c6b8:	20016cf8 	.word	0x20016cf8
   2c6bc:	20015d68 	.word	0x20015d68
   2c6c0:	00040a5c 	.word	0x00040a5c
   2c6c4:	0003a56b 	.word	0x0003a56b
   2c6c8:	00040a3a 	.word	0x00040a3a
   2c6cc:	20016cd0 	.word	0x20016cd0

0002c6d0 <z_time_slice>:
{
   2c6d0:	b570      	push	{r4, r5, r6, lr}
   2c6d2:	4604      	mov	r4, r0
	__asm__ volatile(
   2c6d4:	f04f 0320 	mov.w	r3, #32
   2c6d8:	f3ef 8511 	mrs	r5, BASEPRI
   2c6dc:	f383 8811 	msr	BASEPRI, r3
   2c6e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c6e4:	482a      	ldr	r0, [pc, #168]	; (2c790 <z_time_slice+0xc0>)
   2c6e6:	f7fe f895 	bl	2a814 <z_spin_lock_valid>
   2c6ea:	b968      	cbnz	r0, 2c708 <z_time_slice+0x38>
   2c6ec:	2381      	movs	r3, #129	; 0x81
   2c6ee:	4a29      	ldr	r2, [pc, #164]	; (2c794 <z_time_slice+0xc4>)
   2c6f0:	4929      	ldr	r1, [pc, #164]	; (2c798 <z_time_slice+0xc8>)
   2c6f2:	482a      	ldr	r0, [pc, #168]	; (2c79c <z_time_slice+0xcc>)
   2c6f4:	f003 fabc 	bl	2fc70 <printk>
   2c6f8:	4925      	ldr	r1, [pc, #148]	; (2c790 <z_time_slice+0xc0>)
   2c6fa:	4829      	ldr	r0, [pc, #164]	; (2c7a0 <z_time_slice+0xd0>)
   2c6fc:	f003 fab8 	bl	2fc70 <printk>
   2c700:	2181      	movs	r1, #129	; 0x81
   2c702:	4824      	ldr	r0, [pc, #144]	; (2c794 <z_time_slice+0xc4>)
   2c704:	f003 fd9a 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2c708:	4821      	ldr	r0, [pc, #132]	; (2c790 <z_time_slice+0xc0>)
   2c70a:	f7fe f89f 	bl	2a84c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   2c70e:	4b25      	ldr	r3, [pc, #148]	; (2c7a4 <z_time_slice+0xd4>)
   2c710:	4a25      	ldr	r2, [pc, #148]	; (2c7a8 <z_time_slice+0xd8>)
   2c712:	6898      	ldr	r0, [r3, #8]
   2c714:	6811      	ldr	r1, [r2, #0]
   2c716:	4288      	cmp	r0, r1
   2c718:	4619      	mov	r1, r3
   2c71a:	d118      	bne.n	2c74e <z_time_slice+0x7e>
			z_reset_time_slice();
   2c71c:	f7ff fb68 	bl	2bdf0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c720:	481b      	ldr	r0, [pc, #108]	; (2c790 <z_time_slice+0xc0>)
   2c722:	f7fe f885 	bl	2a830 <z_spin_unlock_valid>
   2c726:	b968      	cbnz	r0, 2c744 <z_time_slice+0x74>
   2c728:	23ac      	movs	r3, #172	; 0xac
   2c72a:	4a1a      	ldr	r2, [pc, #104]	; (2c794 <z_time_slice+0xc4>)
   2c72c:	491f      	ldr	r1, [pc, #124]	; (2c7ac <z_time_slice+0xdc>)
   2c72e:	481b      	ldr	r0, [pc, #108]	; (2c79c <z_time_slice+0xcc>)
   2c730:	f003 fa9e 	bl	2fc70 <printk>
   2c734:	4916      	ldr	r1, [pc, #88]	; (2c790 <z_time_slice+0xc0>)
   2c736:	481e      	ldr	r0, [pc, #120]	; (2c7b0 <z_time_slice+0xe0>)
   2c738:	f003 fa9a 	bl	2fc70 <printk>
   2c73c:	21ac      	movs	r1, #172	; 0xac
   2c73e:	4815      	ldr	r0, [pc, #84]	; (2c794 <z_time_slice+0xc4>)
   2c740:	f003 fd7c 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2c744:	f385 8811 	msr	BASEPRI, r5
   2c748:	f3bf 8f6f 	isb	sy
}
   2c74c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   2c74e:	2600      	movs	r6, #0
   2c750:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2c752:	4a18      	ldr	r2, [pc, #96]	; (2c7b4 <z_time_slice+0xe4>)
   2c754:	6812      	ldr	r2, [r2, #0]
   2c756:	b1ba      	cbz	r2, 2c788 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   2c758:	89c2      	ldrh	r2, [r0, #14]
   2c75a:	2a7f      	cmp	r2, #127	; 0x7f
   2c75c:	d814      	bhi.n	2c788 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   2c75e:	7b42      	ldrb	r2, [r0, #13]
   2c760:	06d2      	lsls	r2, r2, #27
   2c762:	d111      	bne.n	2c788 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2c764:	4a14      	ldr	r2, [pc, #80]	; (2c7b8 <z_time_slice+0xe8>)
   2c766:	f990 600e 	ldrsb.w	r6, [r0, #14]
   2c76a:	6812      	ldr	r2, [r2, #0]
   2c76c:	4296      	cmp	r6, r2
   2c76e:	db0b      	blt.n	2c788 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   2c770:	4a12      	ldr	r2, [pc, #72]	; (2c7bc <z_time_slice+0xec>)
   2c772:	4290      	cmp	r0, r2
   2c774:	d008      	beq.n	2c788 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   2c776:	691a      	ldr	r2, [r3, #16]
   2c778:	42a2      	cmp	r2, r4
   2c77a:	dc02      	bgt.n	2c782 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   2c77c:	f7ff ff50 	bl	2c620 <move_thread_to_end_of_prio_q>
   2c780:	e7cc      	b.n	2c71c <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   2c782:	1b12      	subs	r2, r2, r4
   2c784:	611a      	str	r2, [r3, #16]
   2c786:	e7cb      	b.n	2c720 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   2c788:	2300      	movs	r3, #0
   2c78a:	610b      	str	r3, [r1, #16]
   2c78c:	e7c8      	b.n	2c720 <z_time_slice+0x50>
   2c78e:	bf00      	nop
   2c790:	20016d18 	.word	0x20016d18
   2c794:	0003a62b 	.word	0x0003a62b
   2c798:	0003a67d 	.word	0x0003a67d
   2c79c:	0003a56b 	.word	0x0003a56b
   2c7a0:	0003a692 	.word	0x0003a692
   2c7a4:	20016cd0 	.word	0x20016cd0
   2c7a8:	20016d14 	.word	0x20016d14
   2c7ac:	0003a651 	.word	0x0003a651
   2c7b0:	0003a668 	.word	0x0003a668
   2c7b4:	20016d20 	.word	0x20016d20
   2c7b8:	20016d1c 	.word	0x20016d1c
   2c7bc:	20015d68 	.word	0x20015d68

0002c7c0 <ready_thread>:
{
   2c7c0:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2c7c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2c7c6:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2c7c8:	2a00      	cmp	r2, #0
   2c7ca:	7b43      	ldrb	r3, [r0, #13]
   2c7cc:	db40      	blt.n	2c850 <ready_thread+0x90>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2c7ce:	06da      	lsls	r2, r3, #27
   2c7d0:	d13e      	bne.n	2c850 <ready_thread+0x90>
	return !sys_dnode_is_linked(&to->node);
   2c7d2:	6985      	ldr	r5, [r0, #24]
   2c7d4:	2d00      	cmp	r5, #0
   2c7d6:	d13b      	bne.n	2c850 <ready_thread+0x90>
	thread->base.thread_state |= _THREAD_QUEUED;
   2c7d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2c7dc:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2c7de:	4b1d      	ldr	r3, [pc, #116]	; (2c854 <ready_thread+0x94>)
   2c7e0:	4298      	cmp	r0, r3
   2c7e2:	d10b      	bne.n	2c7fc <ready_thread+0x3c>
   2c7e4:	491c      	ldr	r1, [pc, #112]	; (2c858 <ready_thread+0x98>)
   2c7e6:	481d      	ldr	r0, [pc, #116]	; (2c85c <ready_thread+0x9c>)
   2c7e8:	f240 33b5 	movw	r3, #949	; 0x3b5
   2c7ec:	4a1c      	ldr	r2, [pc, #112]	; (2c860 <ready_thread+0xa0>)
   2c7ee:	f003 fa3f 	bl	2fc70 <printk>
   2c7f2:	f240 31b5 	movw	r1, #949	; 0x3b5
   2c7f6:	481a      	ldr	r0, [pc, #104]	; (2c860 <ready_thread+0xa0>)
   2c7f8:	f003 fd20 	bl	3023c <assert_post_action>
	return list->head == list;
   2c7fc:	4919      	ldr	r1, [pc, #100]	; (2c864 <ready_thread+0xa4>)
   2c7fe:	460b      	mov	r3, r1
   2c800:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c804:	4298      	cmp	r0, r3
   2c806:	bf18      	it	ne
   2c808:	4605      	movne	r5, r0
   2c80a:	2d00      	cmp	r5, #0
   2c80c:	461a      	mov	r2, r3
   2c80e:	462b      	mov	r3, r5
   2c810:	bf38      	it	cc
   2c812:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2c814:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2c816:	b1b3      	cbz	r3, 2c846 <ready_thread+0x86>
	int32_t b1 = thread_1->base.prio;
   2c818:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2c81c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2c820:	4286      	cmp	r6, r0
   2c822:	d00c      	beq.n	2c83e <ready_thread+0x7e>
		return b2 - b1;
   2c824:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2c826:	2800      	cmp	r0, #0
   2c828:	dd09      	ble.n	2c83e <ready_thread+0x7e>
	sys_dnode_t *const prev = successor->prev;
   2c82a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2c82c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2c830:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2c832:	605c      	str	r4, [r3, #4]
		update_cache(0);
   2c834:	2000      	movs	r0, #0
}
   2c836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2c83a:	f7ff bce5 	b.w	2c208 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2c83e:	42ab      	cmp	r3, r5
   2c840:	d001      	beq.n	2c846 <ready_thread+0x86>
   2c842:	681b      	ldr	r3, [r3, #0]
   2c844:	e7e7      	b.n	2c816 <ready_thread+0x56>
	node->prev = tail;
   2c846:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   2c84a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2c84c:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   2c84e:	e7f1      	b.n	2c834 <ready_thread+0x74>
}
   2c850:	bd70      	pop	{r4, r5, r6, pc}
   2c852:	bf00      	nop
   2c854:	20015d68 	.word	0x20015d68
   2c858:	00040a5c 	.word	0x00040a5c
   2c85c:	0003a56b 	.word	0x0003a56b
   2c860:	00040a3a 	.word	0x00040a3a
   2c864:	20016cd0 	.word	0x20016cd0

0002c868 <z_ready_thread>:
{
   2c868:	b538      	push	{r3, r4, r5, lr}
   2c86a:	4604      	mov	r4, r0
	__asm__ volatile(
   2c86c:	f04f 0320 	mov.w	r3, #32
   2c870:	f3ef 8511 	mrs	r5, BASEPRI
   2c874:	f383 8811 	msr	BASEPRI, r3
   2c878:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c87c:	4817      	ldr	r0, [pc, #92]	; (2c8dc <z_ready_thread+0x74>)
   2c87e:	f7fd ffc9 	bl	2a814 <z_spin_lock_valid>
   2c882:	b968      	cbnz	r0, 2c8a0 <z_ready_thread+0x38>
   2c884:	2381      	movs	r3, #129	; 0x81
   2c886:	4a16      	ldr	r2, [pc, #88]	; (2c8e0 <z_ready_thread+0x78>)
   2c888:	4916      	ldr	r1, [pc, #88]	; (2c8e4 <z_ready_thread+0x7c>)
   2c88a:	4817      	ldr	r0, [pc, #92]	; (2c8e8 <z_ready_thread+0x80>)
   2c88c:	f003 f9f0 	bl	2fc70 <printk>
   2c890:	4912      	ldr	r1, [pc, #72]	; (2c8dc <z_ready_thread+0x74>)
   2c892:	4816      	ldr	r0, [pc, #88]	; (2c8ec <z_ready_thread+0x84>)
   2c894:	f003 f9ec 	bl	2fc70 <printk>
   2c898:	2181      	movs	r1, #129	; 0x81
   2c89a:	4811      	ldr	r0, [pc, #68]	; (2c8e0 <z_ready_thread+0x78>)
   2c89c:	f003 fcce 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2c8a0:	480e      	ldr	r0, [pc, #56]	; (2c8dc <z_ready_thread+0x74>)
   2c8a2:	f7fd ffd3 	bl	2a84c <z_spin_lock_set_owner>
			ready_thread(thread);
   2c8a6:	4620      	mov	r0, r4
   2c8a8:	f7ff ff8a 	bl	2c7c0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c8ac:	480b      	ldr	r0, [pc, #44]	; (2c8dc <z_ready_thread+0x74>)
   2c8ae:	f7fd ffbf 	bl	2a830 <z_spin_unlock_valid>
   2c8b2:	b968      	cbnz	r0, 2c8d0 <z_ready_thread+0x68>
   2c8b4:	23ac      	movs	r3, #172	; 0xac
   2c8b6:	4a0a      	ldr	r2, [pc, #40]	; (2c8e0 <z_ready_thread+0x78>)
   2c8b8:	490d      	ldr	r1, [pc, #52]	; (2c8f0 <z_ready_thread+0x88>)
   2c8ba:	480b      	ldr	r0, [pc, #44]	; (2c8e8 <z_ready_thread+0x80>)
   2c8bc:	f003 f9d8 	bl	2fc70 <printk>
   2c8c0:	4906      	ldr	r1, [pc, #24]	; (2c8dc <z_ready_thread+0x74>)
   2c8c2:	480c      	ldr	r0, [pc, #48]	; (2c8f4 <z_ready_thread+0x8c>)
   2c8c4:	f003 f9d4 	bl	2fc70 <printk>
   2c8c8:	21ac      	movs	r1, #172	; 0xac
   2c8ca:	4805      	ldr	r0, [pc, #20]	; (2c8e0 <z_ready_thread+0x78>)
   2c8cc:	f003 fcb6 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2c8d0:	f385 8811 	msr	BASEPRI, r5
   2c8d4:	f3bf 8f6f 	isb	sy
}
   2c8d8:	bd38      	pop	{r3, r4, r5, pc}
   2c8da:	bf00      	nop
   2c8dc:	20016d18 	.word	0x20016d18
   2c8e0:	0003a62b 	.word	0x0003a62b
   2c8e4:	0003a67d 	.word	0x0003a67d
   2c8e8:	0003a56b 	.word	0x0003a56b
   2c8ec:	0003a692 	.word	0x0003a692
   2c8f0:	0003a651 	.word	0x0003a651
   2c8f4:	0003a668 	.word	0x0003a668

0002c8f8 <z_sched_start>:
{
   2c8f8:	b538      	push	{r3, r4, r5, lr}
   2c8fa:	4604      	mov	r4, r0
	__asm__ volatile(
   2c8fc:	f04f 0320 	mov.w	r3, #32
   2c900:	f3ef 8511 	mrs	r5, BASEPRI
   2c904:	f383 8811 	msr	BASEPRI, r3
   2c908:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c90c:	481d      	ldr	r0, [pc, #116]	; (2c984 <z_sched_start+0x8c>)
   2c90e:	f7fd ff81 	bl	2a814 <z_spin_lock_valid>
   2c912:	b968      	cbnz	r0, 2c930 <z_sched_start+0x38>
   2c914:	2381      	movs	r3, #129	; 0x81
   2c916:	4a1c      	ldr	r2, [pc, #112]	; (2c988 <z_sched_start+0x90>)
   2c918:	491c      	ldr	r1, [pc, #112]	; (2c98c <z_sched_start+0x94>)
   2c91a:	481d      	ldr	r0, [pc, #116]	; (2c990 <z_sched_start+0x98>)
   2c91c:	f003 f9a8 	bl	2fc70 <printk>
   2c920:	4918      	ldr	r1, [pc, #96]	; (2c984 <z_sched_start+0x8c>)
   2c922:	481c      	ldr	r0, [pc, #112]	; (2c994 <z_sched_start+0x9c>)
   2c924:	f003 f9a4 	bl	2fc70 <printk>
   2c928:	2181      	movs	r1, #129	; 0x81
   2c92a:	4817      	ldr	r0, [pc, #92]	; (2c988 <z_sched_start+0x90>)
   2c92c:	f003 fc86 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2c930:	4814      	ldr	r0, [pc, #80]	; (2c984 <z_sched_start+0x8c>)
   2c932:	f7fd ff8b 	bl	2a84c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   2c936:	7b63      	ldrb	r3, [r4, #13]
   2c938:	075a      	lsls	r2, r3, #29
   2c93a:	d416      	bmi.n	2c96a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c93c:	4811      	ldr	r0, [pc, #68]	; (2c984 <z_sched_start+0x8c>)
   2c93e:	f7fd ff77 	bl	2a830 <z_spin_unlock_valid>
   2c942:	b968      	cbnz	r0, 2c960 <z_sched_start+0x68>
   2c944:	23ac      	movs	r3, #172	; 0xac
   2c946:	4a10      	ldr	r2, [pc, #64]	; (2c988 <z_sched_start+0x90>)
   2c948:	4913      	ldr	r1, [pc, #76]	; (2c998 <z_sched_start+0xa0>)
   2c94a:	4811      	ldr	r0, [pc, #68]	; (2c990 <z_sched_start+0x98>)
   2c94c:	f003 f990 	bl	2fc70 <printk>
   2c950:	490c      	ldr	r1, [pc, #48]	; (2c984 <z_sched_start+0x8c>)
   2c952:	4812      	ldr	r0, [pc, #72]	; (2c99c <z_sched_start+0xa4>)
   2c954:	f003 f98c 	bl	2fc70 <printk>
   2c958:	21ac      	movs	r1, #172	; 0xac
   2c95a:	480b      	ldr	r0, [pc, #44]	; (2c988 <z_sched_start+0x90>)
   2c95c:	f003 fc6e 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2c960:	f385 8811 	msr	BASEPRI, r5
   2c964:	f3bf 8f6f 	isb	sy
}
   2c968:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2c96a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2c96e:	4620      	mov	r0, r4
   2c970:	7363      	strb	r3, [r4, #13]
   2c972:	f7ff ff25 	bl	2c7c0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2c976:	4629      	mov	r1, r5
}
   2c978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2c97c:	4801      	ldr	r0, [pc, #4]	; (2c984 <z_sched_start+0x8c>)
   2c97e:	f7ff bafb 	b.w	2bf78 <z_reschedule>
   2c982:	bf00      	nop
   2c984:	20016d18 	.word	0x20016d18
   2c988:	0003a62b 	.word	0x0003a62b
   2c98c:	0003a67d 	.word	0x0003a67d
   2c990:	0003a56b 	.word	0x0003a56b
   2c994:	0003a692 	.word	0x0003a692
   2c998:	0003a651 	.word	0x0003a651
   2c99c:	0003a668 	.word	0x0003a668

0002c9a0 <z_thread_timeout>:
{
   2c9a0:	b570      	push	{r4, r5, r6, lr}
   2c9a2:	4604      	mov	r4, r0
	__asm__ volatile(
   2c9a4:	f04f 0320 	mov.w	r3, #32
   2c9a8:	f3ef 8611 	mrs	r6, BASEPRI
   2c9ac:	f383 8811 	msr	BASEPRI, r3
   2c9b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c9b4:	4820      	ldr	r0, [pc, #128]	; (2ca38 <z_thread_timeout+0x98>)
   2c9b6:	f7fd ff2d 	bl	2a814 <z_spin_lock_valid>
   2c9ba:	b968      	cbnz	r0, 2c9d8 <z_thread_timeout+0x38>
   2c9bc:	2381      	movs	r3, #129	; 0x81
   2c9be:	4a1f      	ldr	r2, [pc, #124]	; (2ca3c <z_thread_timeout+0x9c>)
   2c9c0:	491f      	ldr	r1, [pc, #124]	; (2ca40 <z_thread_timeout+0xa0>)
   2c9c2:	4820      	ldr	r0, [pc, #128]	; (2ca44 <z_thread_timeout+0xa4>)
   2c9c4:	f003 f954 	bl	2fc70 <printk>
   2c9c8:	491b      	ldr	r1, [pc, #108]	; (2ca38 <z_thread_timeout+0x98>)
   2c9ca:	481f      	ldr	r0, [pc, #124]	; (2ca48 <z_thread_timeout+0xa8>)
   2c9cc:	f003 f950 	bl	2fc70 <printk>
   2c9d0:	2181      	movs	r1, #129	; 0x81
   2c9d2:	481a      	ldr	r0, [pc, #104]	; (2ca3c <z_thread_timeout+0x9c>)
   2c9d4:	f003 fc32 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2c9d8:	4817      	ldr	r0, [pc, #92]	; (2ca38 <z_thread_timeout+0x98>)
   2c9da:	f7fd ff37 	bl	2a84c <z_spin_lock_set_owner>
		if (!killed) {
   2c9de:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2c9e2:	f013 0f28 	tst.w	r3, #40	; 0x28
   2c9e6:	d110      	bne.n	2ca0a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   2c9e8:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2c9ec:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   2c9f0:	b113      	cbz	r3, 2c9f8 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   2c9f2:	4628      	mov	r0, r5
   2c9f4:	f7ff fb9a 	bl	2c12c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2c9f8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   2c9fc:	4628      	mov	r0, r5
   2c9fe:	f023 0314 	bic.w	r3, r3, #20
   2ca02:	f804 3c0b 	strb.w	r3, [r4, #-11]
   2ca06:	f7ff fedb 	bl	2c7c0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ca0a:	480b      	ldr	r0, [pc, #44]	; (2ca38 <z_thread_timeout+0x98>)
   2ca0c:	f7fd ff10 	bl	2a830 <z_spin_unlock_valid>
   2ca10:	b968      	cbnz	r0, 2ca2e <z_thread_timeout+0x8e>
   2ca12:	23ac      	movs	r3, #172	; 0xac
   2ca14:	4a09      	ldr	r2, [pc, #36]	; (2ca3c <z_thread_timeout+0x9c>)
   2ca16:	490d      	ldr	r1, [pc, #52]	; (2ca4c <z_thread_timeout+0xac>)
   2ca18:	480a      	ldr	r0, [pc, #40]	; (2ca44 <z_thread_timeout+0xa4>)
   2ca1a:	f003 f929 	bl	2fc70 <printk>
   2ca1e:	4906      	ldr	r1, [pc, #24]	; (2ca38 <z_thread_timeout+0x98>)
   2ca20:	480b      	ldr	r0, [pc, #44]	; (2ca50 <z_thread_timeout+0xb0>)
   2ca22:	f003 f925 	bl	2fc70 <printk>
   2ca26:	21ac      	movs	r1, #172	; 0xac
   2ca28:	4804      	ldr	r0, [pc, #16]	; (2ca3c <z_thread_timeout+0x9c>)
   2ca2a:	f003 fc07 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2ca2e:	f386 8811 	msr	BASEPRI, r6
   2ca32:	f3bf 8f6f 	isb	sy
}
   2ca36:	bd70      	pop	{r4, r5, r6, pc}
   2ca38:	20016d18 	.word	0x20016d18
   2ca3c:	0003a62b 	.word	0x0003a62b
   2ca40:	0003a67d 	.word	0x0003a67d
   2ca44:	0003a56b 	.word	0x0003a56b
   2ca48:	0003a692 	.word	0x0003a692
   2ca4c:	0003a651 	.word	0x0003a651
   2ca50:	0003a668 	.word	0x0003a668

0002ca54 <z_set_prio>:
{
   2ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ca56:	4604      	mov	r4, r0
   2ca58:	460e      	mov	r6, r1
	__asm__ volatile(
   2ca5a:	f04f 0320 	mov.w	r3, #32
   2ca5e:	f3ef 8711 	mrs	r7, BASEPRI
   2ca62:	f383 8811 	msr	BASEPRI, r3
   2ca66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ca6a:	483d      	ldr	r0, [pc, #244]	; (2cb60 <z_set_prio+0x10c>)
   2ca6c:	f7fd fed2 	bl	2a814 <z_spin_lock_valid>
   2ca70:	b968      	cbnz	r0, 2ca8e <z_set_prio+0x3a>
   2ca72:	2381      	movs	r3, #129	; 0x81
   2ca74:	4a3b      	ldr	r2, [pc, #236]	; (2cb64 <z_set_prio+0x110>)
   2ca76:	493c      	ldr	r1, [pc, #240]	; (2cb68 <z_set_prio+0x114>)
   2ca78:	483c      	ldr	r0, [pc, #240]	; (2cb6c <z_set_prio+0x118>)
   2ca7a:	f003 f8f9 	bl	2fc70 <printk>
   2ca7e:	4938      	ldr	r1, [pc, #224]	; (2cb60 <z_set_prio+0x10c>)
   2ca80:	483b      	ldr	r0, [pc, #236]	; (2cb70 <z_set_prio+0x11c>)
   2ca82:	f003 f8f5 	bl	2fc70 <printk>
   2ca86:	2181      	movs	r1, #129	; 0x81
   2ca88:	4836      	ldr	r0, [pc, #216]	; (2cb64 <z_set_prio+0x110>)
   2ca8a:	f003 fbd7 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2ca8e:	4834      	ldr	r0, [pc, #208]	; (2cb60 <z_set_prio+0x10c>)
   2ca90:	f7fd fedc 	bl	2a84c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2ca94:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   2ca96:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2ca98:	06da      	lsls	r2, r3, #27
   2ca9a:	d15e      	bne.n	2cb5a <z_set_prio+0x106>
   2ca9c:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   2ca9e:	2d00      	cmp	r5, #0
   2caa0:	d15b      	bne.n	2cb5a <z_set_prio+0x106>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2caa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2caa6:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   2caa8:	4621      	mov	r1, r4
   2caaa:	4832      	ldr	r0, [pc, #200]	; (2cb74 <z_set_prio+0x120>)
   2caac:	f7ff fb1c 	bl	2c0e8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2cab0:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2cab2:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2cab4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2cab8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2caba:	4b2f      	ldr	r3, [pc, #188]	; (2cb78 <z_set_prio+0x124>)
   2cabc:	429c      	cmp	r4, r3
   2cabe:	d10b      	bne.n	2cad8 <z_set_prio+0x84>
   2cac0:	492e      	ldr	r1, [pc, #184]	; (2cb7c <z_set_prio+0x128>)
   2cac2:	482a      	ldr	r0, [pc, #168]	; (2cb6c <z_set_prio+0x118>)
   2cac4:	f240 33b5 	movw	r3, #949	; 0x3b5
   2cac8:	4a2d      	ldr	r2, [pc, #180]	; (2cb80 <z_set_prio+0x12c>)
   2caca:	f003 f8d1 	bl	2fc70 <printk>
   2cace:	f240 31b5 	movw	r1, #949	; 0x3b5
   2cad2:	482b      	ldr	r0, [pc, #172]	; (2cb80 <z_set_prio+0x12c>)
   2cad4:	f003 fbb2 	bl	3023c <assert_post_action>
	return list->head == list;
   2cad8:	492a      	ldr	r1, [pc, #168]	; (2cb84 <z_set_prio+0x130>)
   2cada:	460b      	mov	r3, r1
   2cadc:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cae0:	4298      	cmp	r0, r3
   2cae2:	bf18      	it	ne
   2cae4:	4605      	movne	r5, r0
   2cae6:	2d00      	cmp	r5, #0
   2cae8:	461a      	mov	r2, r3
   2caea:	462b      	mov	r3, r5
   2caec:	bf38      	it	cc
   2caee:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2caf0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2caf2:	b36b      	cbz	r3, 2cb50 <z_set_prio+0xfc>
	int32_t b1 = thread_1->base.prio;
   2caf4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2caf8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2cafc:	4286      	cmp	r6, r0
   2cafe:	d023      	beq.n	2cb48 <z_set_prio+0xf4>
		return b2 - b1;
   2cb00:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2cb02:	2800      	cmp	r0, #0
   2cb04:	dd20      	ble.n	2cb48 <z_set_prio+0xf4>
	sys_dnode_t *const prev = successor->prev;
   2cb06:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2cb08:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2cb0c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2cb0e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2cb10:	2001      	movs	r0, #1
   2cb12:	f7ff fb79 	bl	2c208 <update_cache>
   2cb16:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cb18:	4811      	ldr	r0, [pc, #68]	; (2cb60 <z_set_prio+0x10c>)
   2cb1a:	f7fd fe89 	bl	2a830 <z_spin_unlock_valid>
   2cb1e:	b968      	cbnz	r0, 2cb3c <z_set_prio+0xe8>
   2cb20:	23ac      	movs	r3, #172	; 0xac
   2cb22:	4a10      	ldr	r2, [pc, #64]	; (2cb64 <z_set_prio+0x110>)
   2cb24:	4918      	ldr	r1, [pc, #96]	; (2cb88 <z_set_prio+0x134>)
   2cb26:	4811      	ldr	r0, [pc, #68]	; (2cb6c <z_set_prio+0x118>)
   2cb28:	f003 f8a2 	bl	2fc70 <printk>
   2cb2c:	490c      	ldr	r1, [pc, #48]	; (2cb60 <z_set_prio+0x10c>)
   2cb2e:	4817      	ldr	r0, [pc, #92]	; (2cb8c <z_set_prio+0x138>)
   2cb30:	f003 f89e 	bl	2fc70 <printk>
   2cb34:	21ac      	movs	r1, #172	; 0xac
   2cb36:	480b      	ldr	r0, [pc, #44]	; (2cb64 <z_set_prio+0x110>)
   2cb38:	f003 fb80 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2cb3c:	f387 8811 	msr	BASEPRI, r7
   2cb40:	f3bf 8f6f 	isb	sy
}
   2cb44:	4620      	mov	r0, r4
   2cb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2cb48:	42ab      	cmp	r3, r5
   2cb4a:	d001      	beq.n	2cb50 <z_set_prio+0xfc>
   2cb4c:	681b      	ldr	r3, [r3, #0]
   2cb4e:	e7d0      	b.n	2caf2 <z_set_prio+0x9e>
	node->prev = tail;
   2cb50:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   2cb54:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2cb56:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   2cb58:	e7da      	b.n	2cb10 <z_set_prio+0xbc>
			thread->base.prio = prio;
   2cb5a:	73a6      	strb	r6, [r4, #14]
   2cb5c:	2400      	movs	r4, #0
   2cb5e:	e7db      	b.n	2cb18 <z_set_prio+0xc4>
   2cb60:	20016d18 	.word	0x20016d18
   2cb64:	0003a62b 	.word	0x0003a62b
   2cb68:	0003a67d 	.word	0x0003a67d
   2cb6c:	0003a56b 	.word	0x0003a56b
   2cb70:	0003a692 	.word	0x0003a692
   2cb74:	20016cf8 	.word	0x20016cf8
   2cb78:	20015d68 	.word	0x20015d68
   2cb7c:	00040a5c 	.word	0x00040a5c
   2cb80:	00040a3a 	.word	0x00040a3a
   2cb84:	20016cd0 	.word	0x20016cd0
   2cb88:	0003a651 	.word	0x0003a651
   2cb8c:	0003a668 	.word	0x0003a668

0002cb90 <z_unpend1_no_timeout>:
{
   2cb90:	b538      	push	{r3, r4, r5, lr}
   2cb92:	4604      	mov	r4, r0
	__asm__ volatile(
   2cb94:	f04f 0320 	mov.w	r3, #32
   2cb98:	f3ef 8511 	mrs	r5, BASEPRI
   2cb9c:	f383 8811 	msr	BASEPRI, r3
   2cba0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cba4:	4819      	ldr	r0, [pc, #100]	; (2cc0c <z_unpend1_no_timeout+0x7c>)
   2cba6:	f7fd fe35 	bl	2a814 <z_spin_lock_valid>
   2cbaa:	b968      	cbnz	r0, 2cbc8 <z_unpend1_no_timeout+0x38>
   2cbac:	2381      	movs	r3, #129	; 0x81
   2cbae:	4a18      	ldr	r2, [pc, #96]	; (2cc10 <z_unpend1_no_timeout+0x80>)
   2cbb0:	4918      	ldr	r1, [pc, #96]	; (2cc14 <z_unpend1_no_timeout+0x84>)
   2cbb2:	4819      	ldr	r0, [pc, #100]	; (2cc18 <z_unpend1_no_timeout+0x88>)
   2cbb4:	f003 f85c 	bl	2fc70 <printk>
   2cbb8:	4914      	ldr	r1, [pc, #80]	; (2cc0c <z_unpend1_no_timeout+0x7c>)
   2cbba:	4818      	ldr	r0, [pc, #96]	; (2cc1c <z_unpend1_no_timeout+0x8c>)
   2cbbc:	f003 f858 	bl	2fc70 <printk>
   2cbc0:	2181      	movs	r1, #129	; 0x81
   2cbc2:	4813      	ldr	r0, [pc, #76]	; (2cc10 <z_unpend1_no_timeout+0x80>)
   2cbc4:	f003 fb3a 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2cbc8:	4810      	ldr	r0, [pc, #64]	; (2cc0c <z_unpend1_no_timeout+0x7c>)
   2cbca:	f7fd fe3f 	bl	2a84c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   2cbce:	4620      	mov	r0, r4
   2cbd0:	f00a fcdd 	bl	3758e <z_priq_dumb_best>
		if (thread != NULL) {
   2cbd4:	4604      	mov	r4, r0
   2cbd6:	b108      	cbz	r0, 2cbdc <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   2cbd8:	f7ff faa8 	bl	2c12c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cbdc:	480b      	ldr	r0, [pc, #44]	; (2cc0c <z_unpend1_no_timeout+0x7c>)
   2cbde:	f7fd fe27 	bl	2a830 <z_spin_unlock_valid>
   2cbe2:	b968      	cbnz	r0, 2cc00 <z_unpend1_no_timeout+0x70>
   2cbe4:	23ac      	movs	r3, #172	; 0xac
   2cbe6:	4a0a      	ldr	r2, [pc, #40]	; (2cc10 <z_unpend1_no_timeout+0x80>)
   2cbe8:	490d      	ldr	r1, [pc, #52]	; (2cc20 <z_unpend1_no_timeout+0x90>)
   2cbea:	480b      	ldr	r0, [pc, #44]	; (2cc18 <z_unpend1_no_timeout+0x88>)
   2cbec:	f003 f840 	bl	2fc70 <printk>
   2cbf0:	4906      	ldr	r1, [pc, #24]	; (2cc0c <z_unpend1_no_timeout+0x7c>)
   2cbf2:	480c      	ldr	r0, [pc, #48]	; (2cc24 <z_unpend1_no_timeout+0x94>)
   2cbf4:	f003 f83c 	bl	2fc70 <printk>
   2cbf8:	21ac      	movs	r1, #172	; 0xac
   2cbfa:	4805      	ldr	r0, [pc, #20]	; (2cc10 <z_unpend1_no_timeout+0x80>)
   2cbfc:	f003 fb1e 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2cc00:	f385 8811 	msr	BASEPRI, r5
   2cc04:	f3bf 8f6f 	isb	sy
}
   2cc08:	4620      	mov	r0, r4
   2cc0a:	bd38      	pop	{r3, r4, r5, pc}
   2cc0c:	20016d18 	.word	0x20016d18
   2cc10:	0003a62b 	.word	0x0003a62b
   2cc14:	0003a67d 	.word	0x0003a67d
   2cc18:	0003a56b 	.word	0x0003a56b
   2cc1c:	0003a692 	.word	0x0003a692
   2cc20:	0003a651 	.word	0x0003a651
   2cc24:	0003a668 	.word	0x0003a668

0002cc28 <z_unpend_first_thread>:
{
   2cc28:	b538      	push	{r3, r4, r5, lr}
   2cc2a:	4604      	mov	r4, r0
	__asm__ volatile(
   2cc2c:	f04f 0320 	mov.w	r3, #32
   2cc30:	f3ef 8511 	mrs	r5, BASEPRI
   2cc34:	f383 8811 	msr	BASEPRI, r3
   2cc38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cc3c:	481b      	ldr	r0, [pc, #108]	; (2ccac <z_unpend_first_thread+0x84>)
   2cc3e:	f7fd fde9 	bl	2a814 <z_spin_lock_valid>
   2cc42:	b968      	cbnz	r0, 2cc60 <z_unpend_first_thread+0x38>
   2cc44:	2381      	movs	r3, #129	; 0x81
   2cc46:	4a1a      	ldr	r2, [pc, #104]	; (2ccb0 <z_unpend_first_thread+0x88>)
   2cc48:	491a      	ldr	r1, [pc, #104]	; (2ccb4 <z_unpend_first_thread+0x8c>)
   2cc4a:	481b      	ldr	r0, [pc, #108]	; (2ccb8 <z_unpend_first_thread+0x90>)
   2cc4c:	f003 f810 	bl	2fc70 <printk>
   2cc50:	4916      	ldr	r1, [pc, #88]	; (2ccac <z_unpend_first_thread+0x84>)
   2cc52:	481a      	ldr	r0, [pc, #104]	; (2ccbc <z_unpend_first_thread+0x94>)
   2cc54:	f003 f80c 	bl	2fc70 <printk>
   2cc58:	2181      	movs	r1, #129	; 0x81
   2cc5a:	4815      	ldr	r0, [pc, #84]	; (2ccb0 <z_unpend_first_thread+0x88>)
   2cc5c:	f003 faee 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2cc60:	4812      	ldr	r0, [pc, #72]	; (2ccac <z_unpend_first_thread+0x84>)
   2cc62:	f7fd fdf3 	bl	2a84c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   2cc66:	4620      	mov	r0, r4
   2cc68:	f00a fc91 	bl	3758e <z_priq_dumb_best>
		if (thread != NULL) {
   2cc6c:	4604      	mov	r4, r0
   2cc6e:	b128      	cbz	r0, 2cc7c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   2cc70:	f7ff fa5c 	bl	2c12c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2cc74:	f104 0018 	add.w	r0, r4, #24
   2cc78:	f000 fc2c 	bl	2d4d4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cc7c:	480b      	ldr	r0, [pc, #44]	; (2ccac <z_unpend_first_thread+0x84>)
   2cc7e:	f7fd fdd7 	bl	2a830 <z_spin_unlock_valid>
   2cc82:	b968      	cbnz	r0, 2cca0 <z_unpend_first_thread+0x78>
   2cc84:	23ac      	movs	r3, #172	; 0xac
   2cc86:	4a0a      	ldr	r2, [pc, #40]	; (2ccb0 <z_unpend_first_thread+0x88>)
   2cc88:	490d      	ldr	r1, [pc, #52]	; (2ccc0 <z_unpend_first_thread+0x98>)
   2cc8a:	480b      	ldr	r0, [pc, #44]	; (2ccb8 <z_unpend_first_thread+0x90>)
   2cc8c:	f002 fff0 	bl	2fc70 <printk>
   2cc90:	4906      	ldr	r1, [pc, #24]	; (2ccac <z_unpend_first_thread+0x84>)
   2cc92:	480c      	ldr	r0, [pc, #48]	; (2ccc4 <z_unpend_first_thread+0x9c>)
   2cc94:	f002 ffec 	bl	2fc70 <printk>
   2cc98:	21ac      	movs	r1, #172	; 0xac
   2cc9a:	4805      	ldr	r0, [pc, #20]	; (2ccb0 <z_unpend_first_thread+0x88>)
   2cc9c:	f003 face 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2cca0:	f385 8811 	msr	BASEPRI, r5
   2cca4:	f3bf 8f6f 	isb	sy
}
   2cca8:	4620      	mov	r0, r4
   2ccaa:	bd38      	pop	{r3, r4, r5, pc}
   2ccac:	20016d18 	.word	0x20016d18
   2ccb0:	0003a62b 	.word	0x0003a62b
   2ccb4:	0003a67d 	.word	0x0003a67d
   2ccb8:	0003a56b 	.word	0x0003a56b
   2ccbc:	0003a692 	.word	0x0003a692
   2ccc0:	0003a651 	.word	0x0003a651
   2ccc4:	0003a668 	.word	0x0003a668

0002ccc8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2ccc8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2ccca:	4b04      	ldr	r3, [pc, #16]	; (2ccdc <z_sched_init+0x14>)
   2cccc:	4608      	mov	r0, r1
   2ccce:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2ccd2:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2ccd6:	f7ff b8a1 	b.w	2be1c <k_sched_time_slice_set>
   2ccda:	bf00      	nop
   2ccdc:	20016cd0 	.word	0x20016cd0

0002cce0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cce2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2cce6:	b173      	cbz	r3, 2cd06 <z_impl_k_yield+0x26>
   2cce8:	4947      	ldr	r1, [pc, #284]	; (2ce08 <z_impl_k_yield+0x128>)
   2ccea:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   2ccee:	4a47      	ldr	r2, [pc, #284]	; (2ce0c <z_impl_k_yield+0x12c>)
   2ccf0:	4847      	ldr	r0, [pc, #284]	; (2ce10 <z_impl_k_yield+0x130>)
   2ccf2:	f002 ffbd 	bl	2fc70 <printk>
   2ccf6:	4847      	ldr	r0, [pc, #284]	; (2ce14 <z_impl_k_yield+0x134>)
   2ccf8:	f002 ffba 	bl	2fc70 <printk>
   2ccfc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
   2cd00:	4842      	ldr	r0, [pc, #264]	; (2ce0c <z_impl_k_yield+0x12c>)
   2cd02:	f003 fa9b 	bl	3023c <assert_post_action>

	SYS_PORT_TRACING_FUNC(k_thread, yield);

	if (!z_is_idle_thread_object(_current)) {
   2cd06:	4d44      	ldr	r5, [pc, #272]	; (2ce18 <z_impl_k_yield+0x138>)
   2cd08:	4e44      	ldr	r6, [pc, #272]	; (2ce1c <z_impl_k_yield+0x13c>)
   2cd0a:	68ab      	ldr	r3, [r5, #8]
   2cd0c:	42b3      	cmp	r3, r6
   2cd0e:	d072      	beq.n	2cdf6 <z_impl_k_yield+0x116>
	__asm__ volatile(
   2cd10:	f04f 0320 	mov.w	r3, #32
   2cd14:	f3ef 8711 	mrs	r7, BASEPRI
   2cd18:	f383 8811 	msr	BASEPRI, r3
   2cd1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cd20:	483f      	ldr	r0, [pc, #252]	; (2ce20 <z_impl_k_yield+0x140>)
   2cd22:	f7fd fd77 	bl	2a814 <z_spin_lock_valid>
   2cd26:	b968      	cbnz	r0, 2cd44 <z_impl_k_yield+0x64>
   2cd28:	2381      	movs	r3, #129	; 0x81
   2cd2a:	4a3e      	ldr	r2, [pc, #248]	; (2ce24 <z_impl_k_yield+0x144>)
   2cd2c:	493e      	ldr	r1, [pc, #248]	; (2ce28 <z_impl_k_yield+0x148>)
   2cd2e:	4838      	ldr	r0, [pc, #224]	; (2ce10 <z_impl_k_yield+0x130>)
   2cd30:	f002 ff9e 	bl	2fc70 <printk>
   2cd34:	493a      	ldr	r1, [pc, #232]	; (2ce20 <z_impl_k_yield+0x140>)
   2cd36:	483d      	ldr	r0, [pc, #244]	; (2ce2c <z_impl_k_yield+0x14c>)
   2cd38:	f002 ff9a 	bl	2fc70 <printk>
   2cd3c:	2181      	movs	r1, #129	; 0x81
   2cd3e:	4839      	ldr	r0, [pc, #228]	; (2ce24 <z_impl_k_yield+0x144>)
   2cd40:	f003 fa7c 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2cd44:	4836      	ldr	r0, [pc, #216]	; (2ce20 <z_impl_k_yield+0x140>)
   2cd46:	f7fd fd81 	bl	2a84c <z_spin_lock_set_owner>
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
   2cd4a:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
   2cd4c:	4838      	ldr	r0, [pc, #224]	; (2ce30 <z_impl_k_yield+0x150>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2cd4e:	7b4b      	ldrb	r3, [r1, #13]
   2cd50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2cd54:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   2cd56:	f7ff f9c7 	bl	2c0e8 <z_priq_dumb_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
   2cd5a:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2cd5c:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2cd5e:	42b4      	cmp	r4, r6
	thread->base.thread_state |= _THREAD_QUEUED;
   2cd60:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2cd64:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2cd66:	d10b      	bne.n	2cd80 <z_impl_k_yield+0xa0>
   2cd68:	4932      	ldr	r1, [pc, #200]	; (2ce34 <z_impl_k_yield+0x154>)
   2cd6a:	4829      	ldr	r0, [pc, #164]	; (2ce10 <z_impl_k_yield+0x130>)
   2cd6c:	f240 33b5 	movw	r3, #949	; 0x3b5
   2cd70:	4a26      	ldr	r2, [pc, #152]	; (2ce0c <z_impl_k_yield+0x12c>)
   2cd72:	f002 ff7d 	bl	2fc70 <printk>
   2cd76:	f240 31b5 	movw	r1, #949	; 0x3b5
   2cd7a:	4824      	ldr	r0, [pc, #144]	; (2ce0c <z_impl_k_yield+0x12c>)
   2cd7c:	f003 fa5e 	bl	3023c <assert_post_action>
	return list->head == list;
   2cd80:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cd82:	482b      	ldr	r0, [pc, #172]	; (2ce30 <z_impl_k_yield+0x150>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2cd84:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cd86:	4283      	cmp	r3, r0
   2cd88:	bf08      	it	eq
   2cd8a:	2300      	moveq	r3, #0
   2cd8c:	2b00      	cmp	r3, #0
   2cd8e:	bf38      	it	cc
   2cd90:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2cd92:	b35b      	cbz	r3, 2cdec <z_impl_k_yield+0x10c>
	int32_t b1 = thread_1->base.prio;
   2cd94:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2cd98:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2cd9c:	4296      	cmp	r6, r2
   2cd9e:	d021      	beq.n	2cde4 <z_impl_k_yield+0x104>
		return b2 - b1;
   2cda0:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2cda2:	2a00      	cmp	r2, #0
   2cda4:	dd1e      	ble.n	2cde4 <z_impl_k_yield+0x104>
	sys_dnode_t *const prev = successor->prev;
   2cda6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2cda8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2cdac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2cdae:	605c      	str	r4, [r3, #4]
		update_cache(1);
   2cdb0:	2001      	movs	r0, #1
   2cdb2:	f7ff fa29 	bl	2c208 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cdb6:	481a      	ldr	r0, [pc, #104]	; (2ce20 <z_impl_k_yield+0x140>)
   2cdb8:	f7fd fd3a 	bl	2a830 <z_spin_unlock_valid>
   2cdbc:	b968      	cbnz	r0, 2cdda <z_impl_k_yield+0xfa>
   2cdbe:	23c3      	movs	r3, #195	; 0xc3
   2cdc0:	4a18      	ldr	r2, [pc, #96]	; (2ce24 <z_impl_k_yield+0x144>)
   2cdc2:	491d      	ldr	r1, [pc, #116]	; (2ce38 <z_impl_k_yield+0x158>)
   2cdc4:	4812      	ldr	r0, [pc, #72]	; (2ce10 <z_impl_k_yield+0x130>)
   2cdc6:	f002 ff53 	bl	2fc70 <printk>
   2cdca:	4915      	ldr	r1, [pc, #84]	; (2ce20 <z_impl_k_yield+0x140>)
   2cdcc:	481b      	ldr	r0, [pc, #108]	; (2ce3c <z_impl_k_yield+0x15c>)
   2cdce:	f002 ff4f 	bl	2fc70 <printk>
   2cdd2:	21c3      	movs	r1, #195	; 0xc3
   2cdd4:	4813      	ldr	r0, [pc, #76]	; (2ce24 <z_impl_k_yield+0x144>)
   2cdd6:	f003 fa31 	bl	3023c <assert_post_action>
   2cdda:	4638      	mov	r0, r7
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
   2cddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2cde0:	f7ea bbd8 	b.w	17594 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2cde4:	428b      	cmp	r3, r1
   2cde6:	d001      	beq.n	2cdec <z_impl_k_yield+0x10c>
   2cde8:	681b      	ldr	r3, [r3, #0]
   2cdea:	e7d2      	b.n	2cd92 <z_impl_k_yield+0xb2>
	node->prev = tail;
   2cdec:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   2cdf0:	600c      	str	r4, [r1, #0]
	list->tail = node;
   2cdf2:	62ec      	str	r4, [r5, #44]	; 0x2c
}
   2cdf4:	e7dc      	b.n	2cdb0 <z_impl_k_yield+0xd0>
   2cdf6:	f04f 0320 	mov.w	r3, #32
   2cdfa:	f3ef 8011 	mrs	r0, BASEPRI
   2cdfe:	f383 8811 	msr	BASEPRI, r3
   2ce02:	f3bf 8f6f 	isb	sy
   2ce06:	e7e9      	b.n	2cddc <z_impl_k_yield+0xfc>
   2ce08:	00040799 	.word	0x00040799
   2ce0c:	00040a3a 	.word	0x00040a3a
   2ce10:	0003a56b 	.word	0x0003a56b
   2ce14:	0003aba7 	.word	0x0003aba7
   2ce18:	20016cd0 	.word	0x20016cd0
   2ce1c:	20015d68 	.word	0x20015d68
   2ce20:	20016d18 	.word	0x20016d18
   2ce24:	0003a62b 	.word	0x0003a62b
   2ce28:	0003a67d 	.word	0x0003a67d
   2ce2c:	0003a692 	.word	0x0003a692
   2ce30:	20016cf8 	.word	0x20016cf8
   2ce34:	00040a5c 	.word	0x00040a5c
   2ce38:	0003a651 	.word	0x0003a651
   2ce3c:	0003a668 	.word	0x0003a668

0002ce40 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   2ce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ce44:	4606      	mov	r6, r0
   2ce46:	460f      	mov	r7, r1
   2ce48:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2ce4c:	b173      	cbz	r3, 2ce6c <z_tick_sleep+0x2c>
   2ce4e:	493e      	ldr	r1, [pc, #248]	; (2cf48 <z_tick_sleep+0x108>)
   2ce50:	f240 43d1 	movw	r3, #1233	; 0x4d1
   2ce54:	4a3d      	ldr	r2, [pc, #244]	; (2cf4c <z_tick_sleep+0x10c>)
   2ce56:	483e      	ldr	r0, [pc, #248]	; (2cf50 <z_tick_sleep+0x110>)
   2ce58:	f002 ff0a 	bl	2fc70 <printk>
   2ce5c:	483d      	ldr	r0, [pc, #244]	; (2cf54 <z_tick_sleep+0x114>)
   2ce5e:	f002 ff07 	bl	2fc70 <printk>
   2ce62:	f240 41d1 	movw	r1, #1233	; 0x4d1
   2ce66:	4839      	ldr	r0, [pc, #228]	; (2cf4c <z_tick_sleep+0x10c>)
   2ce68:	f003 f9e8 	bl	3023c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2ce6c:	ea56 0307 	orrs.w	r3, r6, r7
   2ce70:	d104      	bne.n	2ce7c <z_tick_sleep+0x3c>
	z_impl_k_yield();
   2ce72:	f7ff ff35 	bl	2cce0 <z_impl_k_yield>
		k_yield();
		return 0;
   2ce76:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   2ce78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2ce7c:	f00a fba1 	bl	375c2 <sys_clock_tick_get_32>
   2ce80:	1984      	adds	r4, r0, r6
   2ce82:	f04f 0320 	mov.w	r3, #32
   2ce86:	f3ef 8811 	mrs	r8, BASEPRI
   2ce8a:	f383 8811 	msr	BASEPRI, r3
   2ce8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ce92:	4831      	ldr	r0, [pc, #196]	; (2cf58 <z_tick_sleep+0x118>)
   2ce94:	f7fd fcbe 	bl	2a814 <z_spin_lock_valid>
   2ce98:	b968      	cbnz	r0, 2ceb6 <z_tick_sleep+0x76>
   2ce9a:	2381      	movs	r3, #129	; 0x81
   2ce9c:	4a2f      	ldr	r2, [pc, #188]	; (2cf5c <z_tick_sleep+0x11c>)
   2ce9e:	4930      	ldr	r1, [pc, #192]	; (2cf60 <z_tick_sleep+0x120>)
   2cea0:	482b      	ldr	r0, [pc, #172]	; (2cf50 <z_tick_sleep+0x110>)
   2cea2:	f002 fee5 	bl	2fc70 <printk>
   2cea6:	492c      	ldr	r1, [pc, #176]	; (2cf58 <z_tick_sleep+0x118>)
   2cea8:	482e      	ldr	r0, [pc, #184]	; (2cf64 <z_tick_sleep+0x124>)
   2ceaa:	f002 fee1 	bl	2fc70 <printk>
   2ceae:	2181      	movs	r1, #129	; 0x81
   2ceb0:	482a      	ldr	r0, [pc, #168]	; (2cf5c <z_tick_sleep+0x11c>)
   2ceb2:	f003 f9c3 	bl	3023c <assert_post_action>
	pending_current = _current;
   2ceb6:	4d2c      	ldr	r5, [pc, #176]	; (2cf68 <z_tick_sleep+0x128>)
	z_spin_lock_set_owner(l);
   2ceb8:	4827      	ldr	r0, [pc, #156]	; (2cf58 <z_tick_sleep+0x118>)
   2ceba:	f7fd fcc7 	bl	2a84c <z_spin_lock_set_owner>
   2cebe:	68a8      	ldr	r0, [r5, #8]
   2cec0:	4b2a      	ldr	r3, [pc, #168]	; (2cf6c <z_tick_sleep+0x12c>)
   2cec2:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2cec4:	f7ff f9d8 	bl	2c278 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2cec8:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2ceca:	4632      	mov	r2, r6
   2cecc:	463b      	mov	r3, r7
   2cece:	3018      	adds	r0, #24
   2ced0:	4927      	ldr	r1, [pc, #156]	; (2cf70 <z_tick_sleep+0x130>)
   2ced2:	f000 fa2b 	bl	2d32c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2ced6:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ced8:	481f      	ldr	r0, [pc, #124]	; (2cf58 <z_tick_sleep+0x118>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2ceda:	7b53      	ldrb	r3, [r2, #13]
   2cedc:	f043 0310 	orr.w	r3, r3, #16
   2cee0:	7353      	strb	r3, [r2, #13]
   2cee2:	f7fd fca5 	bl	2a830 <z_spin_unlock_valid>
   2cee6:	b968      	cbnz	r0, 2cf04 <z_tick_sleep+0xc4>
   2cee8:	23c3      	movs	r3, #195	; 0xc3
   2ceea:	4a1c      	ldr	r2, [pc, #112]	; (2cf5c <z_tick_sleep+0x11c>)
   2ceec:	4921      	ldr	r1, [pc, #132]	; (2cf74 <z_tick_sleep+0x134>)
   2ceee:	4818      	ldr	r0, [pc, #96]	; (2cf50 <z_tick_sleep+0x110>)
   2cef0:	f002 febe 	bl	2fc70 <printk>
   2cef4:	4918      	ldr	r1, [pc, #96]	; (2cf58 <z_tick_sleep+0x118>)
   2cef6:	4820      	ldr	r0, [pc, #128]	; (2cf78 <z_tick_sleep+0x138>)
   2cef8:	f002 feba 	bl	2fc70 <printk>
   2cefc:	21c3      	movs	r1, #195	; 0xc3
   2cefe:	4817      	ldr	r0, [pc, #92]	; (2cf5c <z_tick_sleep+0x11c>)
   2cf00:	f003 f99c 	bl	3023c <assert_post_action>
   2cf04:	4640      	mov	r0, r8
   2cf06:	f7ea fb45 	bl	17594 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2cf0a:	68ab      	ldr	r3, [r5, #8]
   2cf0c:	7b5b      	ldrb	r3, [r3, #13]
   2cf0e:	06db      	lsls	r3, r3, #27
   2cf10:	d50e      	bpl.n	2cf30 <z_tick_sleep+0xf0>
   2cf12:	491a      	ldr	r1, [pc, #104]	; (2cf7c <z_tick_sleep+0x13c>)
   2cf14:	f240 43ef 	movw	r3, #1263	; 0x4ef
   2cf18:	4a0c      	ldr	r2, [pc, #48]	; (2cf4c <z_tick_sleep+0x10c>)
   2cf1a:	480d      	ldr	r0, [pc, #52]	; (2cf50 <z_tick_sleep+0x110>)
   2cf1c:	f002 fea8 	bl	2fc70 <printk>
   2cf20:	480c      	ldr	r0, [pc, #48]	; (2cf54 <z_tick_sleep+0x114>)
   2cf22:	f002 fea5 	bl	2fc70 <printk>
   2cf26:	f240 41ef 	movw	r1, #1263	; 0x4ef
   2cf2a:	4808      	ldr	r0, [pc, #32]	; (2cf4c <z_tick_sleep+0x10c>)
   2cf2c:	f003 f986 	bl	3023c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2cf30:	f00a fb47 	bl	375c2 <sys_clock_tick_get_32>
   2cf34:	1a20      	subs	r0, r4, r0
   2cf36:	eb64 0104 	sbc.w	r1, r4, r4
   2cf3a:	2800      	cmp	r0, #0
   2cf3c:	f171 0300 	sbcs.w	r3, r1, #0
   2cf40:	bfb8      	it	lt
   2cf42:	2000      	movlt	r0, #0
   2cf44:	e798      	b.n	2ce78 <z_tick_sleep+0x38>
   2cf46:	bf00      	nop
   2cf48:	00040799 	.word	0x00040799
   2cf4c:	00040a3a 	.word	0x00040a3a
   2cf50:	0003a56b 	.word	0x0003a56b
   2cf54:	0003aba7 	.word	0x0003aba7
   2cf58:	20016d18 	.word	0x20016d18
   2cf5c:	0003a62b 	.word	0x0003a62b
   2cf60:	0003a67d 	.word	0x0003a67d
   2cf64:	0003a692 	.word	0x0003a692
   2cf68:	20016cd0 	.word	0x20016cd0
   2cf6c:	20016d14 	.word	0x20016d14
   2cf70:	0002c9a1 	.word	0x0002c9a1
   2cf74:	0003a651 	.word	0x0003a651
   2cf78:	0003a668 	.word	0x0003a668
   2cf7c:	00040aec 	.word	0x00040aec

0002cf80 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   2cf80:	b538      	push	{r3, r4, r5, lr}
   2cf82:	4604      	mov	r4, r0
   2cf84:	460d      	mov	r5, r1
   2cf86:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2cf8a:	b173      	cbz	r3, 2cfaa <z_impl_k_sleep+0x2a>
   2cf8c:	4913      	ldr	r1, [pc, #76]	; (2cfdc <z_impl_k_sleep+0x5c>)
   2cf8e:	f240 43fe 	movw	r3, #1278	; 0x4fe
   2cf92:	4a13      	ldr	r2, [pc, #76]	; (2cfe0 <z_impl_k_sleep+0x60>)
   2cf94:	4813      	ldr	r0, [pc, #76]	; (2cfe4 <z_impl_k_sleep+0x64>)
   2cf96:	f002 fe6b 	bl	2fc70 <printk>
   2cf9a:	4813      	ldr	r0, [pc, #76]	; (2cfe8 <z_impl_k_sleep+0x68>)
   2cf9c:	f002 fe68 	bl	2fc70 <printk>
   2cfa0:	f240 41fe 	movw	r1, #1278	; 0x4fe
   2cfa4:	480e      	ldr	r0, [pc, #56]	; (2cfe0 <z_impl_k_sleep+0x60>)
   2cfa6:	f003 f949 	bl	3023c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2cfaa:	1c6b      	adds	r3, r5, #1
   2cfac:	bf08      	it	eq
   2cfae:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2cfb2:	d106      	bne.n	2cfc2 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   2cfb4:	4b0d      	ldr	r3, [pc, #52]	; (2cfec <z_impl_k_sleep+0x6c>)
   2cfb6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2cfb8:	f7ff fa4c 	bl	2c454 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2cfbc:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2cfc0:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   2cfc2:	4620      	mov	r0, r4
   2cfc4:	4629      	mov	r1, r5
   2cfc6:	f7ff ff3b 	bl	2ce40 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   2cfca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2cfce:	fb80 3403 	smull	r3, r4, r0, r3
   2cfd2:	0bd8      	lsrs	r0, r3, #15
   2cfd4:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   2cfd8:	e7f2      	b.n	2cfc0 <z_impl_k_sleep+0x40>
   2cfda:	bf00      	nop
   2cfdc:	00040799 	.word	0x00040799
   2cfe0:	00040a3a 	.word	0x00040a3a
   2cfe4:	0003a56b 	.word	0x0003a56b
   2cfe8:	0003aba7 	.word	0x0003aba7
   2cfec:	20016cd0 	.word	0x20016cd0

0002cff0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2cff0:	4b01      	ldr	r3, [pc, #4]	; (2cff8 <z_impl_k_current_get+0x8>)
   2cff2:	6898      	ldr	r0, [r3, #8]
   2cff4:	4770      	bx	lr
   2cff6:	bf00      	nop
   2cff8:	20016cd0 	.word	0x20016cd0

0002cffc <z_impl_k_is_preempt_thread>:
   2cffc:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   2d000:	b93b      	cbnz	r3, 2d012 <z_impl_k_is_preempt_thread+0x16>
   2d002:	4b05      	ldr	r3, [pc, #20]	; (2d018 <z_impl_k_is_preempt_thread+0x1c>)
   2d004:	689b      	ldr	r3, [r3, #8]
   2d006:	89d8      	ldrh	r0, [r3, #14]
   2d008:	287f      	cmp	r0, #127	; 0x7f
   2d00a:	bf8c      	ite	hi
   2d00c:	2000      	movhi	r0, #0
   2d00e:	2001      	movls	r0, #1
   2d010:	4770      	bx	lr
   2d012:	2000      	movs	r0, #0
}
   2d014:	4770      	bx	lr
   2d016:	bf00      	nop
   2d018:	20016cd0 	.word	0x20016cd0

0002d01c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d020:	4604      	mov	r4, r0
   2d022:	f04f 0320 	mov.w	r3, #32
   2d026:	f3ef 8611 	mrs	r6, BASEPRI
   2d02a:	f383 8811 	msr	BASEPRI, r3
   2d02e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d032:	4848      	ldr	r0, [pc, #288]	; (2d154 <z_thread_abort+0x138>)
   2d034:	f7fd fbee 	bl	2a814 <z_spin_lock_valid>
   2d038:	b968      	cbnz	r0, 2d056 <z_thread_abort+0x3a>
   2d03a:	2381      	movs	r3, #129	; 0x81
   2d03c:	4a46      	ldr	r2, [pc, #280]	; (2d158 <z_thread_abort+0x13c>)
   2d03e:	4947      	ldr	r1, [pc, #284]	; (2d15c <z_thread_abort+0x140>)
   2d040:	4847      	ldr	r0, [pc, #284]	; (2d160 <z_thread_abort+0x144>)
   2d042:	f002 fe15 	bl	2fc70 <printk>
   2d046:	4943      	ldr	r1, [pc, #268]	; (2d154 <z_thread_abort+0x138>)
   2d048:	4846      	ldr	r0, [pc, #280]	; (2d164 <z_thread_abort+0x148>)
   2d04a:	f002 fe11 	bl	2fc70 <printk>
   2d04e:	2181      	movs	r1, #129	; 0x81
   2d050:	4841      	ldr	r0, [pc, #260]	; (2d158 <z_thread_abort+0x13c>)
   2d052:	f003 f8f3 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2d056:	483f      	ldr	r0, [pc, #252]	; (2d154 <z_thread_abort+0x138>)
   2d058:	f7fd fbf8 	bl	2a84c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2d05c:	7b63      	ldrb	r3, [r4, #13]
   2d05e:	071a      	lsls	r2, r3, #28
   2d060:	d517      	bpl.n	2d092 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d062:	483c      	ldr	r0, [pc, #240]	; (2d154 <z_thread_abort+0x138>)
   2d064:	f7fd fbe4 	bl	2a830 <z_spin_unlock_valid>
   2d068:	b968      	cbnz	r0, 2d086 <z_thread_abort+0x6a>
   2d06a:	23ac      	movs	r3, #172	; 0xac
   2d06c:	4a3a      	ldr	r2, [pc, #232]	; (2d158 <z_thread_abort+0x13c>)
   2d06e:	493e      	ldr	r1, [pc, #248]	; (2d168 <z_thread_abort+0x14c>)
   2d070:	483b      	ldr	r0, [pc, #236]	; (2d160 <z_thread_abort+0x144>)
   2d072:	f002 fdfd 	bl	2fc70 <printk>
   2d076:	4937      	ldr	r1, [pc, #220]	; (2d154 <z_thread_abort+0x138>)
   2d078:	483c      	ldr	r0, [pc, #240]	; (2d16c <z_thread_abort+0x150>)
   2d07a:	f002 fdf9 	bl	2fc70 <printk>
   2d07e:	21ac      	movs	r1, #172	; 0xac
   2d080:	4835      	ldr	r0, [pc, #212]	; (2d158 <z_thread_abort+0x13c>)
   2d082:	f003 f8db 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2d086:	f386 8811 	msr	BASEPRI, r6
   2d08a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2d08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2d092:	f023 0220 	bic.w	r2, r3, #32
   2d096:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2d09a:	09d2      	lsrs	r2, r2, #7
   2d09c:	d142      	bne.n	2d124 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2d09e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   2d0a0:	68a3      	ldr	r3, [r4, #8]
   2d0a2:	b113      	cbz	r3, 2d0aa <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   2d0a4:	4620      	mov	r0, r4
   2d0a6:	f7ff f841 	bl	2c12c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2d0aa:	f104 0018 	add.w	r0, r4, #24
   2d0ae:	f000 fa11 	bl	2d4d4 <z_abort_timeout>
   2d0b2:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2d0b6:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   2d0ba:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d0bc:	42bd      	cmp	r5, r7
   2d0be:	d001      	beq.n	2d0c4 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2d0c0:	2d00      	cmp	r5, #0
   2d0c2:	d139      	bne.n	2d138 <z_thread_abort+0x11c>
		update_cache(1);
   2d0c4:	2001      	movs	r0, #1
   2d0c6:	f7ff f89f 	bl	2c208 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2d0ca:	4b29      	ldr	r3, [pc, #164]	; (2d170 <z_thread_abort+0x154>)
   2d0cc:	689b      	ldr	r3, [r3, #8]
   2d0ce:	42a3      	cmp	r3, r4
   2d0d0:	d1c7      	bne.n	2d062 <z_thread_abort+0x46>
   2d0d2:	f3ef 8305 	mrs	r3, IPSR
   2d0d6:	2b00      	cmp	r3, #0
   2d0d8:	d1c3      	bne.n	2d062 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d0da:	481e      	ldr	r0, [pc, #120]	; (2d154 <z_thread_abort+0x138>)
   2d0dc:	f7fd fba8 	bl	2a830 <z_spin_unlock_valid>
   2d0e0:	b968      	cbnz	r0, 2d0fe <z_thread_abort+0xe2>
   2d0e2:	23c3      	movs	r3, #195	; 0xc3
   2d0e4:	4a1c      	ldr	r2, [pc, #112]	; (2d158 <z_thread_abort+0x13c>)
   2d0e6:	4920      	ldr	r1, [pc, #128]	; (2d168 <z_thread_abort+0x14c>)
   2d0e8:	481d      	ldr	r0, [pc, #116]	; (2d160 <z_thread_abort+0x144>)
   2d0ea:	f002 fdc1 	bl	2fc70 <printk>
   2d0ee:	4919      	ldr	r1, [pc, #100]	; (2d154 <z_thread_abort+0x138>)
   2d0f0:	481e      	ldr	r0, [pc, #120]	; (2d16c <z_thread_abort+0x150>)
   2d0f2:	f002 fdbd 	bl	2fc70 <printk>
   2d0f6:	21c3      	movs	r1, #195	; 0xc3
   2d0f8:	4817      	ldr	r0, [pc, #92]	; (2d158 <z_thread_abort+0x13c>)
   2d0fa:	f003 f89f 	bl	3023c <assert_post_action>
   2d0fe:	4630      	mov	r0, r6
   2d100:	f7ea fa48 	bl	17594 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   2d104:	f240 6311 	movw	r3, #1553	; 0x611
   2d108:	4a1a      	ldr	r2, [pc, #104]	; (2d174 <z_thread_abort+0x158>)
   2d10a:	491b      	ldr	r1, [pc, #108]	; (2d178 <z_thread_abort+0x15c>)
   2d10c:	4814      	ldr	r0, [pc, #80]	; (2d160 <z_thread_abort+0x144>)
   2d10e:	f002 fdaf 	bl	2fc70 <printk>
   2d112:	481a      	ldr	r0, [pc, #104]	; (2d17c <z_thread_abort+0x160>)
   2d114:	f002 fdac 	bl	2fc70 <printk>
   2d118:	f240 6111 	movw	r1, #1553	; 0x611
   2d11c:	4815      	ldr	r0, [pc, #84]	; (2d174 <z_thread_abort+0x158>)
   2d11e:	f003 f88d 	bl	3023c <assert_post_action>
   2d122:	e79e      	b.n	2d062 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2d124:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2d128:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   2d12c:	4621      	mov	r1, r4
   2d12e:	4814      	ldr	r0, [pc, #80]	; (2d180 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2d130:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   2d132:	f7fe ffd9 	bl	2c0e8 <z_priq_dumb_remove>
}
   2d136:	e7b3      	b.n	2d0a0 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   2d138:	4628      	mov	r0, r5
   2d13a:	f7fe fff7 	bl	2c12c <unpend_thread_no_timeout>
   2d13e:	f105 0018 	add.w	r0, r5, #24
   2d142:	f000 f9c7 	bl	2d4d4 <z_abort_timeout>
		ready_thread(thread);
   2d146:	4628      	mov	r0, r5
   2d148:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   2d14c:	f7ff fb38 	bl	2c7c0 <ready_thread>
   2d150:	e7b3      	b.n	2d0ba <z_thread_abort+0x9e>
   2d152:	bf00      	nop
   2d154:	20016d18 	.word	0x20016d18
   2d158:	0003a62b 	.word	0x0003a62b
   2d15c:	0003a67d 	.word	0x0003a67d
   2d160:	0003a56b 	.word	0x0003a56b
   2d164:	0003a692 	.word	0x0003a692
   2d168:	0003a651 	.word	0x0003a651
   2d16c:	0003a668 	.word	0x0003a668
   2d170:	20016cd0 	.word	0x20016cd0
   2d174:	00040a3a 	.word	0x00040a3a
   2d178:	00040e81 	.word	0x00040e81
   2d17c:	00040b2c 	.word	0x00040b2c
   2d180:	20016cf8 	.word	0x20016cf8

0002d184 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   2d184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d186:	4604      	mov	r4, r0
   2d188:	460e      	mov	r6, r1
   2d18a:	4615      	mov	r5, r2
	__asm__ volatile(
   2d18c:	f04f 0320 	mov.w	r3, #32
   2d190:	f3ef 8711 	mrs	r7, BASEPRI
   2d194:	f383 8811 	msr	BASEPRI, r3
   2d198:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d19c:	481e      	ldr	r0, [pc, #120]	; (2d218 <z_sched_wake+0x94>)
   2d19e:	f7fd fb39 	bl	2a814 <z_spin_lock_valid>
   2d1a2:	b968      	cbnz	r0, 2d1c0 <z_sched_wake+0x3c>
   2d1a4:	2381      	movs	r3, #129	; 0x81
   2d1a6:	4a1d      	ldr	r2, [pc, #116]	; (2d21c <z_sched_wake+0x98>)
   2d1a8:	491d      	ldr	r1, [pc, #116]	; (2d220 <z_sched_wake+0x9c>)
   2d1aa:	481e      	ldr	r0, [pc, #120]	; (2d224 <z_sched_wake+0xa0>)
   2d1ac:	f002 fd60 	bl	2fc70 <printk>
   2d1b0:	4919      	ldr	r1, [pc, #100]	; (2d218 <z_sched_wake+0x94>)
   2d1b2:	481d      	ldr	r0, [pc, #116]	; (2d228 <z_sched_wake+0xa4>)
   2d1b4:	f002 fd5c 	bl	2fc70 <printk>
   2d1b8:	2181      	movs	r1, #129	; 0x81
   2d1ba:	4818      	ldr	r0, [pc, #96]	; (2d21c <z_sched_wake+0x98>)
   2d1bc:	f003 f83e 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2d1c0:	4815      	ldr	r0, [pc, #84]	; (2d218 <z_sched_wake+0x94>)
   2d1c2:	f7fd fb43 	bl	2a84c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   2d1c6:	4620      	mov	r0, r4
   2d1c8:	f00a f9e1 	bl	3758e <z_priq_dumb_best>

		if (thread != NULL) {
   2d1cc:	4604      	mov	r4, r0
   2d1ce:	b158      	cbz	r0, 2d1e8 <z_sched_wake+0x64>
   2d1d0:	67c6      	str	r6, [r0, #124]	; 0x7c
   2d1d2:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   2d1d4:	f7fe ffaa 	bl	2c12c <unpend_thread_no_timeout>
   2d1d8:	f104 0018 	add.w	r0, r4, #24
   2d1dc:	f000 f97a 	bl	2d4d4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   2d1e0:	4620      	mov	r0, r4
   2d1e2:	f7ff faed 	bl	2c7c0 <ready_thread>
			ret = true;
   2d1e6:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d1e8:	480b      	ldr	r0, [pc, #44]	; (2d218 <z_sched_wake+0x94>)
   2d1ea:	f7fd fb21 	bl	2a830 <z_spin_unlock_valid>
   2d1ee:	b968      	cbnz	r0, 2d20c <z_sched_wake+0x88>
   2d1f0:	23ac      	movs	r3, #172	; 0xac
   2d1f2:	4a0a      	ldr	r2, [pc, #40]	; (2d21c <z_sched_wake+0x98>)
   2d1f4:	490d      	ldr	r1, [pc, #52]	; (2d22c <z_sched_wake+0xa8>)
   2d1f6:	480b      	ldr	r0, [pc, #44]	; (2d224 <z_sched_wake+0xa0>)
   2d1f8:	f002 fd3a 	bl	2fc70 <printk>
   2d1fc:	4906      	ldr	r1, [pc, #24]	; (2d218 <z_sched_wake+0x94>)
   2d1fe:	480c      	ldr	r0, [pc, #48]	; (2d230 <z_sched_wake+0xac>)
   2d200:	f002 fd36 	bl	2fc70 <printk>
   2d204:	21ac      	movs	r1, #172	; 0xac
   2d206:	4805      	ldr	r0, [pc, #20]	; (2d21c <z_sched_wake+0x98>)
   2d208:	f003 f818 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2d20c:	f387 8811 	msr	BASEPRI, r7
   2d210:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2d214:	4620      	mov	r0, r4
   2d216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d218:	20016d18 	.word	0x20016d18
   2d21c:	0003a62b 	.word	0x0003a62b
   2d220:	0003a67d 	.word	0x0003a67d
   2d224:	0003a56b 	.word	0x0003a56b
   2d228:	0003a692 	.word	0x0003a692
   2d22c:	0003a651 	.word	0x0003a651
   2d230:	0003a668 	.word	0x0003a668

0002d234 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2d234:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2d236:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2d23a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2d23c:	e9cd 6700 	strd	r6, r7, [sp]
   2d240:	f7ff f8d8 	bl	2c3f4 <z_pend_curr>

	if (data != NULL) {
   2d244:	b11c      	cbz	r4, 2d24e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2d246:	4b03      	ldr	r3, [pc, #12]	; (2d254 <z_sched_wait+0x20>)
   2d248:	689b      	ldr	r3, [r3, #8]
   2d24a:	695b      	ldr	r3, [r3, #20]
   2d24c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2d24e:	b002      	add	sp, #8
   2d250:	bdd0      	pop	{r4, r6, r7, pc}
   2d252:	bf00      	nop
   2d254:	20016cd0 	.word	0x20016cd0

0002d258 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   2d258:	b508      	push	{r3, lr}
   2d25a:	4806      	ldr	r0, [pc, #24]	; (2d274 <z_data_copy+0x1c>)
   2d25c:	4a06      	ldr	r2, [pc, #24]	; (2d278 <z_data_copy+0x20>)
   2d25e:	4907      	ldr	r1, [pc, #28]	; (2d27c <z_data_copy+0x24>)
   2d260:	1a12      	subs	r2, r2, r0
   2d262:	f00a fa8e 	bl	37782 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2d266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2d26a:	4a05      	ldr	r2, [pc, #20]	; (2d280 <z_data_copy+0x28>)
   2d26c:	4905      	ldr	r1, [pc, #20]	; (2d284 <z_data_copy+0x2c>)
   2d26e:	4806      	ldr	r0, [pc, #24]	; (2d288 <z_data_copy+0x30>)
   2d270:	f00a ba87 	b.w	37782 <memcpy>
   2d274:	20014500 	.word	0x20014500
   2d278:	20015200 	.word	0x20015200
   2d27c:	0004171c 	.word	0x0004171c
   2d280:	00000000 	.word	0x00000000
   2d284:	00041704 	.word	0x00041704
   2d288:	20014500 	.word	0x20014500

0002d28c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2d28c:	4b03      	ldr	r3, [pc, #12]	; (2d29c <elapsed+0x10>)
   2d28e:	681b      	ldr	r3, [r3, #0]
   2d290:	b90b      	cbnz	r3, 2d296 <elapsed+0xa>
   2d292:	f7e9 bc95 	b.w	16bc0 <sys_clock_elapsed>
}
   2d296:	2000      	movs	r0, #0
   2d298:	4770      	bx	lr
   2d29a:	bf00      	nop
   2d29c:	20016d24 	.word	0x20016d24

0002d2a0 <next_timeout>:

static int32_t next_timeout(void)
{
   2d2a0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2d2a2:	4b13      	ldr	r3, [pc, #76]	; (2d2f0 <next_timeout+0x50>)
   2d2a4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d2a6:	429c      	cmp	r4, r3
   2d2a8:	bf08      	it	eq
   2d2aa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2d2ac:	f7ff ffee 	bl	2d28c <elapsed>
   2d2b0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   2d2b2:	b1bc      	cbz	r4, 2d2e4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2d2b4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   2d2b8:	1b40      	subs	r0, r0, r5
   2d2ba:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   2d2be:	2801      	cmp	r0, #1
   2d2c0:	f171 0300 	sbcs.w	r3, r1, #0
   2d2c4:	db11      	blt.n	2d2ea <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2d2c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2d2ca:	2300      	movs	r3, #0
   2d2cc:	4282      	cmp	r2, r0
   2d2ce:	eb73 0401 	sbcs.w	r4, r3, r1
   2d2d2:	da00      	bge.n	2d2d6 <next_timeout+0x36>
   2d2d4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2d2d6:	4b07      	ldr	r3, [pc, #28]	; (2d2f4 <next_timeout+0x54>)
   2d2d8:	691b      	ldr	r3, [r3, #16]
   2d2da:	b113      	cbz	r3, 2d2e2 <next_timeout+0x42>
   2d2dc:	4298      	cmp	r0, r3
   2d2de:	bfa8      	it	ge
   2d2e0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2d2e2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   2d2e4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2d2e8:	e7f5      	b.n	2d2d6 <next_timeout+0x36>
   2d2ea:	2000      	movs	r0, #0
   2d2ec:	e7f3      	b.n	2d2d6 <next_timeout+0x36>
   2d2ee:	bf00      	nop
   2d2f0:	20014a18 	.word	0x20014a18
   2d2f4:	20016cd0 	.word	0x20016cd0

0002d2f8 <remove_timeout>:
{
   2d2f8:	b530      	push	{r4, r5, lr}
   2d2fa:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2d2fc:	b168      	cbz	r0, 2d31a <remove_timeout+0x22>
   2d2fe:	4a0a      	ldr	r2, [pc, #40]	; (2d328 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   2d300:	6852      	ldr	r2, [r2, #4]
   2d302:	4290      	cmp	r0, r2
   2d304:	d009      	beq.n	2d31a <remove_timeout+0x22>
	if (next(t) != NULL) {
   2d306:	b143      	cbz	r3, 2d31a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2d308:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2d30c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2d310:	1912      	adds	r2, r2, r4
   2d312:	eb45 0101 	adc.w	r1, r5, r1
   2d316:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   2d31a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   2d31c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2d31e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d320:	2300      	movs	r3, #0
	node->prev = NULL;
   2d322:	e9c0 3300 	strd	r3, r3, [r0]
}
   2d326:	bd30      	pop	{r4, r5, pc}
   2d328:	20014a18 	.word	0x20014a18

0002d32c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   2d32c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d330:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d332:	1c6b      	adds	r3, r5, #1
   2d334:	bf08      	it	eq
   2d336:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2d33a:	4682      	mov	sl, r0
   2d33c:	468b      	mov	fp, r1
   2d33e:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d340:	f000 80aa 	beq.w	2d498 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2d344:	6803      	ldr	r3, [r0, #0]
   2d346:	b163      	cbz	r3, 2d362 <z_add_timeout+0x36>
   2d348:	4955      	ldr	r1, [pc, #340]	; (2d4a0 <z_add_timeout+0x174>)
   2d34a:	235d      	movs	r3, #93	; 0x5d
   2d34c:	4a55      	ldr	r2, [pc, #340]	; (2d4a4 <z_add_timeout+0x178>)
   2d34e:	4856      	ldr	r0, [pc, #344]	; (2d4a8 <z_add_timeout+0x17c>)
   2d350:	f002 fc8e 	bl	2fc70 <printk>
   2d354:	4855      	ldr	r0, [pc, #340]	; (2d4ac <z_add_timeout+0x180>)
   2d356:	f002 fc8b 	bl	2fc70 <printk>
   2d35a:	215d      	movs	r1, #93	; 0x5d
   2d35c:	4851      	ldr	r0, [pc, #324]	; (2d4a4 <z_add_timeout+0x178>)
   2d35e:	f002 ff6d 	bl	3023c <assert_post_action>
	to->fn = fn;
   2d362:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   2d366:	f04f 0320 	mov.w	r3, #32
   2d36a:	f3ef 8b11 	mrs	fp, BASEPRI
   2d36e:	f383 8811 	msr	BASEPRI, r3
   2d372:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d376:	484e      	ldr	r0, [pc, #312]	; (2d4b0 <z_add_timeout+0x184>)
   2d378:	f7fd fa4c 	bl	2a814 <z_spin_lock_valid>
   2d37c:	b968      	cbnz	r0, 2d39a <z_add_timeout+0x6e>
   2d37e:	2381      	movs	r3, #129	; 0x81
   2d380:	4a4c      	ldr	r2, [pc, #304]	; (2d4b4 <z_add_timeout+0x188>)
   2d382:	494d      	ldr	r1, [pc, #308]	; (2d4b8 <z_add_timeout+0x18c>)
   2d384:	4848      	ldr	r0, [pc, #288]	; (2d4a8 <z_add_timeout+0x17c>)
   2d386:	f002 fc73 	bl	2fc70 <printk>
   2d38a:	4949      	ldr	r1, [pc, #292]	; (2d4b0 <z_add_timeout+0x184>)
   2d38c:	484b      	ldr	r0, [pc, #300]	; (2d4bc <z_add_timeout+0x190>)
   2d38e:	f002 fc6f 	bl	2fc70 <printk>
   2d392:	2181      	movs	r1, #129	; 0x81
   2d394:	4847      	ldr	r0, [pc, #284]	; (2d4b4 <z_add_timeout+0x188>)
   2d396:	f002 ff51 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2d39a:	4845      	ldr	r0, [pc, #276]	; (2d4b0 <z_add_timeout+0x184>)
   2d39c:	f7fd fa56 	bl	2a84c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2d3a0:	f06f 0301 	mvn.w	r3, #1
   2d3a4:	f04f 32ff 	mov.w	r2, #4294967295
   2d3a8:	ebb3 0804 	subs.w	r8, r3, r4
   2d3ac:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2d3b0:	f1b8 0f00 	cmp.w	r8, #0
   2d3b4:	f179 0100 	sbcs.w	r1, r9, #0
   2d3b8:	db1c      	blt.n	2d3f4 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2d3ba:	4841      	ldr	r0, [pc, #260]	; (2d4c0 <z_add_timeout+0x194>)
   2d3bc:	e9d0 1000 	ldrd	r1, r0, [r0]
   2d3c0:	1a5b      	subs	r3, r3, r1
   2d3c2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   2d3c6:	1b1e      	subs	r6, r3, r4
   2d3c8:	eb62 0705 	sbc.w	r7, r2, r5
   2d3cc:	2e01      	cmp	r6, #1
   2d3ce:	f177 0300 	sbcs.w	r3, r7, #0
   2d3d2:	bfbc      	itt	lt
   2d3d4:	2601      	movlt	r6, #1
   2d3d6:	2700      	movlt	r7, #0
   2d3d8:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   2d3dc:	4a39      	ldr	r2, [pc, #228]	; (2d4c4 <z_add_timeout+0x198>)
   2d3de:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d3e2:	4293      	cmp	r3, r2
   2d3e4:	d11d      	bne.n	2d422 <z_add_timeout+0xf6>
	node->prev = tail;
   2d3e6:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   2d3ea:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   2d3ee:	f8c2 a004 	str.w	sl, [r2, #4]
}
   2d3f2:	e02c      	b.n	2d44e <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   2d3f4:	f7ff ff4a 	bl	2d28c <elapsed>
   2d3f8:	1c63      	adds	r3, r4, #1
   2d3fa:	9300      	str	r3, [sp, #0]
   2d3fc:	f145 0300 	adc.w	r3, r5, #0
   2d400:	9301      	str	r3, [sp, #4]
   2d402:	e9dd 2300 	ldrd	r2, r3, [sp]
   2d406:	1812      	adds	r2, r2, r0
   2d408:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   2d40c:	e9ca 2304 	strd	r2, r3, [sl, #16]
   2d410:	e7e4      	b.n	2d3dc <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   2d412:	1be0      	subs	r0, r4, r7
   2d414:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   2d418:	42b3      	cmp	r3, r6
   2d41a:	e9ca 0104 	strd	r0, r1, [sl, #16]
   2d41e:	d0e2      	beq.n	2d3e6 <z_add_timeout+0xba>
   2d420:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   2d422:	2b00      	cmp	r3, #0
   2d424:	d0df      	beq.n	2d3e6 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   2d426:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   2d42a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   2d42e:	42bc      	cmp	r4, r7
   2d430:	eb75 0108 	sbcs.w	r1, r5, r8
   2d434:	daed      	bge.n	2d412 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   2d436:	1b38      	subs	r0, r7, r4
   2d438:	eb68 0105 	sbc.w	r1, r8, r5
   2d43c:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   2d440:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2d442:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   2d446:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   2d44a:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   2d44e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d450:	4293      	cmp	r3, r2
   2d452:	d00b      	beq.n	2d46c <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2d454:	459a      	cmp	sl, r3
   2d456:	d109      	bne.n	2d46c <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2d458:	f7ff ff22 	bl	2d2a0 <next_timeout>

			if (next_time == 0 ||
   2d45c:	b118      	cbz	r0, 2d466 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   2d45e:	4b1a      	ldr	r3, [pc, #104]	; (2d4c8 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   2d460:	691b      	ldr	r3, [r3, #16]
   2d462:	4283      	cmp	r3, r0
   2d464:	d002      	beq.n	2d46c <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   2d466:	2100      	movs	r1, #0
   2d468:	f7e9 fb78 	bl	16b5c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d46c:	4810      	ldr	r0, [pc, #64]	; (2d4b0 <z_add_timeout+0x184>)
   2d46e:	f7fd f9df 	bl	2a830 <z_spin_unlock_valid>
   2d472:	b968      	cbnz	r0, 2d490 <z_add_timeout+0x164>
   2d474:	23ac      	movs	r3, #172	; 0xac
   2d476:	4a0f      	ldr	r2, [pc, #60]	; (2d4b4 <z_add_timeout+0x188>)
   2d478:	4914      	ldr	r1, [pc, #80]	; (2d4cc <z_add_timeout+0x1a0>)
   2d47a:	480b      	ldr	r0, [pc, #44]	; (2d4a8 <z_add_timeout+0x17c>)
   2d47c:	f002 fbf8 	bl	2fc70 <printk>
   2d480:	490b      	ldr	r1, [pc, #44]	; (2d4b0 <z_add_timeout+0x184>)
   2d482:	4813      	ldr	r0, [pc, #76]	; (2d4d0 <z_add_timeout+0x1a4>)
   2d484:	f002 fbf4 	bl	2fc70 <printk>
   2d488:	21ac      	movs	r1, #172	; 0xac
   2d48a:	480a      	ldr	r0, [pc, #40]	; (2d4b4 <z_add_timeout+0x188>)
   2d48c:	f002 fed6 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2d490:	f38b 8811 	msr	BASEPRI, fp
   2d494:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2d498:	b003      	add	sp, #12
   2d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d49e:	bf00      	nop
   2d4a0:	00040b72 	.word	0x00040b72
   2d4a4:	00040b4e 	.word	0x00040b4e
   2d4a8:	0003a56b 	.word	0x0003a56b
   2d4ac:	0003aba7 	.word	0x0003aba7
   2d4b0:	20016d28 	.word	0x20016d28
   2d4b4:	0003a62b 	.word	0x0003a62b
   2d4b8:	0003a67d 	.word	0x0003a67d
   2d4bc:	0003a692 	.word	0x0003a692
   2d4c0:	20015f08 	.word	0x20015f08
   2d4c4:	20014a18 	.word	0x20014a18
   2d4c8:	20016cd0 	.word	0x20016cd0
   2d4cc:	0003a651 	.word	0x0003a651
   2d4d0:	0003a668 	.word	0x0003a668

0002d4d4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   2d4d4:	b538      	push	{r3, r4, r5, lr}
   2d4d6:	4604      	mov	r4, r0
	__asm__ volatile(
   2d4d8:	f04f 0320 	mov.w	r3, #32
   2d4dc:	f3ef 8511 	mrs	r5, BASEPRI
   2d4e0:	f383 8811 	msr	BASEPRI, r3
   2d4e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d4e8:	481a      	ldr	r0, [pc, #104]	; (2d554 <z_abort_timeout+0x80>)
   2d4ea:	f7fd f993 	bl	2a814 <z_spin_lock_valid>
   2d4ee:	b968      	cbnz	r0, 2d50c <z_abort_timeout+0x38>
   2d4f0:	2381      	movs	r3, #129	; 0x81
   2d4f2:	4a19      	ldr	r2, [pc, #100]	; (2d558 <z_abort_timeout+0x84>)
   2d4f4:	4919      	ldr	r1, [pc, #100]	; (2d55c <z_abort_timeout+0x88>)
   2d4f6:	481a      	ldr	r0, [pc, #104]	; (2d560 <z_abort_timeout+0x8c>)
   2d4f8:	f002 fbba 	bl	2fc70 <printk>
   2d4fc:	4915      	ldr	r1, [pc, #84]	; (2d554 <z_abort_timeout+0x80>)
   2d4fe:	4819      	ldr	r0, [pc, #100]	; (2d564 <z_abort_timeout+0x90>)
   2d500:	f002 fbb6 	bl	2fc70 <printk>
   2d504:	2181      	movs	r1, #129	; 0x81
   2d506:	4814      	ldr	r0, [pc, #80]	; (2d558 <z_abort_timeout+0x84>)
   2d508:	f002 fe98 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2d50c:	4811      	ldr	r0, [pc, #68]	; (2d554 <z_abort_timeout+0x80>)
   2d50e:	f7fd f99d 	bl	2a84c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2d512:	6823      	ldr	r3, [r4, #0]
   2d514:	b1db      	cbz	r3, 2d54e <z_abort_timeout+0x7a>
			remove_timeout(to);
   2d516:	4620      	mov	r0, r4
   2d518:	f7ff feee 	bl	2d2f8 <remove_timeout>
			ret = 0;
   2d51c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d51e:	480d      	ldr	r0, [pc, #52]	; (2d554 <z_abort_timeout+0x80>)
   2d520:	f7fd f986 	bl	2a830 <z_spin_unlock_valid>
   2d524:	b968      	cbnz	r0, 2d542 <z_abort_timeout+0x6e>
   2d526:	23ac      	movs	r3, #172	; 0xac
   2d528:	4a0b      	ldr	r2, [pc, #44]	; (2d558 <z_abort_timeout+0x84>)
   2d52a:	490f      	ldr	r1, [pc, #60]	; (2d568 <z_abort_timeout+0x94>)
   2d52c:	480c      	ldr	r0, [pc, #48]	; (2d560 <z_abort_timeout+0x8c>)
   2d52e:	f002 fb9f 	bl	2fc70 <printk>
   2d532:	4908      	ldr	r1, [pc, #32]	; (2d554 <z_abort_timeout+0x80>)
   2d534:	480d      	ldr	r0, [pc, #52]	; (2d56c <z_abort_timeout+0x98>)
   2d536:	f002 fb9b 	bl	2fc70 <printk>
   2d53a:	21ac      	movs	r1, #172	; 0xac
   2d53c:	4806      	ldr	r0, [pc, #24]	; (2d558 <z_abort_timeout+0x84>)
   2d53e:	f002 fe7d 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2d542:	f385 8811 	msr	BASEPRI, r5
   2d546:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2d54a:	4620      	mov	r0, r4
   2d54c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2d54e:	f06f 0415 	mvn.w	r4, #21
   2d552:	e7e4      	b.n	2d51e <z_abort_timeout+0x4a>
   2d554:	20016d28 	.word	0x20016d28
   2d558:	0003a62b 	.word	0x0003a62b
   2d55c:	0003a67d 	.word	0x0003a67d
   2d560:	0003a56b 	.word	0x0003a56b
   2d564:	0003a692 	.word	0x0003a692
   2d568:	0003a651 	.word	0x0003a651
   2d56c:	0003a668 	.word	0x0003a668

0002d570 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   2d570:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2d572:	f04f 0320 	mov.w	r3, #32
   2d576:	f3ef 8511 	mrs	r5, BASEPRI
   2d57a:	f383 8811 	msr	BASEPRI, r3
   2d57e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d582:	4818      	ldr	r0, [pc, #96]	; (2d5e4 <z_get_next_timeout_expiry+0x74>)
   2d584:	f7fd f946 	bl	2a814 <z_spin_lock_valid>
   2d588:	b968      	cbnz	r0, 2d5a6 <z_get_next_timeout_expiry+0x36>
   2d58a:	2381      	movs	r3, #129	; 0x81
   2d58c:	4a16      	ldr	r2, [pc, #88]	; (2d5e8 <z_get_next_timeout_expiry+0x78>)
   2d58e:	4917      	ldr	r1, [pc, #92]	; (2d5ec <z_get_next_timeout_expiry+0x7c>)
   2d590:	4817      	ldr	r0, [pc, #92]	; (2d5f0 <z_get_next_timeout_expiry+0x80>)
   2d592:	f002 fb6d 	bl	2fc70 <printk>
   2d596:	4913      	ldr	r1, [pc, #76]	; (2d5e4 <z_get_next_timeout_expiry+0x74>)
   2d598:	4816      	ldr	r0, [pc, #88]	; (2d5f4 <z_get_next_timeout_expiry+0x84>)
   2d59a:	f002 fb69 	bl	2fc70 <printk>
   2d59e:	2181      	movs	r1, #129	; 0x81
   2d5a0:	4811      	ldr	r0, [pc, #68]	; (2d5e8 <z_get_next_timeout_expiry+0x78>)
   2d5a2:	f002 fe4b 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2d5a6:	480f      	ldr	r0, [pc, #60]	; (2d5e4 <z_get_next_timeout_expiry+0x74>)
   2d5a8:	f7fd f950 	bl	2a84c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2d5ac:	f7ff fe78 	bl	2d2a0 <next_timeout>
   2d5b0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d5b2:	480c      	ldr	r0, [pc, #48]	; (2d5e4 <z_get_next_timeout_expiry+0x74>)
   2d5b4:	f7fd f93c 	bl	2a830 <z_spin_unlock_valid>
   2d5b8:	b968      	cbnz	r0, 2d5d6 <z_get_next_timeout_expiry+0x66>
   2d5ba:	23ac      	movs	r3, #172	; 0xac
   2d5bc:	4a0a      	ldr	r2, [pc, #40]	; (2d5e8 <z_get_next_timeout_expiry+0x78>)
   2d5be:	490e      	ldr	r1, [pc, #56]	; (2d5f8 <z_get_next_timeout_expiry+0x88>)
   2d5c0:	480b      	ldr	r0, [pc, #44]	; (2d5f0 <z_get_next_timeout_expiry+0x80>)
   2d5c2:	f002 fb55 	bl	2fc70 <printk>
   2d5c6:	4907      	ldr	r1, [pc, #28]	; (2d5e4 <z_get_next_timeout_expiry+0x74>)
   2d5c8:	480c      	ldr	r0, [pc, #48]	; (2d5fc <z_get_next_timeout_expiry+0x8c>)
   2d5ca:	f002 fb51 	bl	2fc70 <printk>
   2d5ce:	21ac      	movs	r1, #172	; 0xac
   2d5d0:	4805      	ldr	r0, [pc, #20]	; (2d5e8 <z_get_next_timeout_expiry+0x78>)
   2d5d2:	f002 fe33 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2d5d6:	f385 8811 	msr	BASEPRI, r5
   2d5da:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2d5de:	4620      	mov	r0, r4
   2d5e0:	bd38      	pop	{r3, r4, r5, pc}
   2d5e2:	bf00      	nop
   2d5e4:	20016d28 	.word	0x20016d28
   2d5e8:	0003a62b 	.word	0x0003a62b
   2d5ec:	0003a67d 	.word	0x0003a67d
   2d5f0:	0003a56b 	.word	0x0003a56b
   2d5f4:	0003a692 	.word	0x0003a692
   2d5f8:	0003a651 	.word	0x0003a651
   2d5fc:	0003a668 	.word	0x0003a668

0002d600 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   2d600:	b570      	push	{r4, r5, r6, lr}
   2d602:	4604      	mov	r4, r0
   2d604:	460d      	mov	r5, r1
	__asm__ volatile(
   2d606:	f04f 0320 	mov.w	r3, #32
   2d60a:	f3ef 8611 	mrs	r6, BASEPRI
   2d60e:	f383 8811 	msr	BASEPRI, r3
   2d612:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d616:	481b      	ldr	r0, [pc, #108]	; (2d684 <z_set_timeout_expiry+0x84>)
   2d618:	f7fd f8fc 	bl	2a814 <z_spin_lock_valid>
   2d61c:	b968      	cbnz	r0, 2d63a <z_set_timeout_expiry+0x3a>
   2d61e:	2381      	movs	r3, #129	; 0x81
   2d620:	4a19      	ldr	r2, [pc, #100]	; (2d688 <z_set_timeout_expiry+0x88>)
   2d622:	491a      	ldr	r1, [pc, #104]	; (2d68c <z_set_timeout_expiry+0x8c>)
   2d624:	481a      	ldr	r0, [pc, #104]	; (2d690 <z_set_timeout_expiry+0x90>)
   2d626:	f002 fb23 	bl	2fc70 <printk>
   2d62a:	4916      	ldr	r1, [pc, #88]	; (2d684 <z_set_timeout_expiry+0x84>)
   2d62c:	4819      	ldr	r0, [pc, #100]	; (2d694 <z_set_timeout_expiry+0x94>)
   2d62e:	f002 fb1f 	bl	2fc70 <printk>
   2d632:	2181      	movs	r1, #129	; 0x81
   2d634:	4814      	ldr	r0, [pc, #80]	; (2d688 <z_set_timeout_expiry+0x88>)
   2d636:	f002 fe01 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2d63a:	4812      	ldr	r0, [pc, #72]	; (2d684 <z_set_timeout_expiry+0x84>)
   2d63c:	f7fd f906 	bl	2a84c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   2d640:	f7ff fe2e 	bl	2d2a0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2d644:	2801      	cmp	r0, #1
   2d646:	dd05      	ble.n	2d654 <z_set_timeout_expiry+0x54>
   2d648:	42a0      	cmp	r0, r4
   2d64a:	db03      	blt.n	2d654 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2d64c:	4629      	mov	r1, r5
   2d64e:	4620      	mov	r0, r4
   2d650:	f7e9 fa84 	bl	16b5c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d654:	480b      	ldr	r0, [pc, #44]	; (2d684 <z_set_timeout_expiry+0x84>)
   2d656:	f7fd f8eb 	bl	2a830 <z_spin_unlock_valid>
   2d65a:	b968      	cbnz	r0, 2d678 <z_set_timeout_expiry+0x78>
   2d65c:	23ac      	movs	r3, #172	; 0xac
   2d65e:	4a0a      	ldr	r2, [pc, #40]	; (2d688 <z_set_timeout_expiry+0x88>)
   2d660:	490d      	ldr	r1, [pc, #52]	; (2d698 <z_set_timeout_expiry+0x98>)
   2d662:	480b      	ldr	r0, [pc, #44]	; (2d690 <z_set_timeout_expiry+0x90>)
   2d664:	f002 fb04 	bl	2fc70 <printk>
   2d668:	4906      	ldr	r1, [pc, #24]	; (2d684 <z_set_timeout_expiry+0x84>)
   2d66a:	480c      	ldr	r0, [pc, #48]	; (2d69c <z_set_timeout_expiry+0x9c>)
   2d66c:	f002 fb00 	bl	2fc70 <printk>
   2d670:	21ac      	movs	r1, #172	; 0xac
   2d672:	4805      	ldr	r0, [pc, #20]	; (2d688 <z_set_timeout_expiry+0x88>)
   2d674:	f002 fde2 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2d678:	f386 8811 	msr	BASEPRI, r6
   2d67c:	f3bf 8f6f 	isb	sy
		}
	}
}
   2d680:	bd70      	pop	{r4, r5, r6, pc}
   2d682:	bf00      	nop
   2d684:	20016d28 	.word	0x20016d28
   2d688:	0003a62b 	.word	0x0003a62b
   2d68c:	0003a67d 	.word	0x0003a67d
   2d690:	0003a56b 	.word	0x0003a56b
   2d694:	0003a692 	.word	0x0003a692
   2d698:	0003a651 	.word	0x0003a651
   2d69c:	0003a668 	.word	0x0003a668

0002d6a0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2d6a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6a4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2d6a6:	f7ff f813 	bl	2c6d0 <z_time_slice>
	__asm__ volatile(
   2d6aa:	f04f 0320 	mov.w	r3, #32
   2d6ae:	f3ef 8711 	mrs	r7, BASEPRI
   2d6b2:	f383 8811 	msr	BASEPRI, r3
   2d6b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d6ba:	4854      	ldr	r0, [pc, #336]	; (2d80c <sys_clock_announce+0x16c>)
   2d6bc:	f7fd f8aa 	bl	2a814 <z_spin_lock_valid>
   2d6c0:	b968      	cbnz	r0, 2d6de <sys_clock_announce+0x3e>
   2d6c2:	2381      	movs	r3, #129	; 0x81
   2d6c4:	4a52      	ldr	r2, [pc, #328]	; (2d810 <sys_clock_announce+0x170>)
   2d6c6:	4953      	ldr	r1, [pc, #332]	; (2d814 <sys_clock_announce+0x174>)
   2d6c8:	4853      	ldr	r0, [pc, #332]	; (2d818 <sys_clock_announce+0x178>)
   2d6ca:	f002 fad1 	bl	2fc70 <printk>
   2d6ce:	494f      	ldr	r1, [pc, #316]	; (2d80c <sys_clock_announce+0x16c>)
   2d6d0:	4852      	ldr	r0, [pc, #328]	; (2d81c <sys_clock_announce+0x17c>)
   2d6d2:	f002 facd 	bl	2fc70 <printk>
   2d6d6:	2181      	movs	r1, #129	; 0x81
   2d6d8:	484d      	ldr	r0, [pc, #308]	; (2d810 <sys_clock_announce+0x170>)
   2d6da:	f002 fdaf 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2d6de:	4e50      	ldr	r6, [pc, #320]	; (2d820 <sys_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2d6e0:	4d50      	ldr	r5, [pc, #320]	; (2d824 <sys_clock_announce+0x184>)
   2d6e2:	46b3      	mov	fp, r6
   2d6e4:	4849      	ldr	r0, [pc, #292]	; (2d80c <sys_clock_announce+0x16c>)
	return list->head == list;
   2d6e6:	f8df a148 	ldr.w	sl, [pc, #328]	; 2d830 <sys_clock_announce+0x190>
   2d6ea:	f7fd f8af 	bl	2a84c <z_spin_lock_set_owner>
   2d6ee:	602c      	str	r4, [r5, #0]
   2d6f0:	f8d5 c000 	ldr.w	ip, [r5]
   2d6f4:	e9d6 2300 	ldrd	r2, r3, [r6]
   2d6f8:	e9cd 2300 	strd	r2, r3, [sp]
   2d6fc:	4662      	mov	r2, ip
   2d6fe:	f8da 4000 	ldr.w	r4, [sl]
   2d702:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d704:	4554      	cmp	r4, sl
   2d706:	46e0      	mov	r8, ip
   2d708:	4699      	mov	r9, r3
   2d70a:	d00c      	beq.n	2d726 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2d70c:	b15c      	cbz	r4, 2d726 <sys_clock_announce+0x86>
   2d70e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2d712:	458c      	cmp	ip, r1
   2d714:	eb79 0302 	sbcs.w	r3, r9, r2
   2d718:	da2e      	bge.n	2d778 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2d71a:	ebb1 000c 	subs.w	r0, r1, ip
   2d71e:	eb62 0109 	sbc.w	r1, r2, r9
   2d722:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   2d726:	464b      	mov	r3, r9
	announce_remaining = 0;
   2d728:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2d72a:	9a00      	ldr	r2, [sp, #0]
   2d72c:	9901      	ldr	r1, [sp, #4]
   2d72e:	eb18 0202 	adds.w	r2, r8, r2
   2d732:	eb43 0101 	adc.w	r1, r3, r1
   2d736:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   2d73a:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2d73c:	f7ff fdb0 	bl	2d2a0 <next_timeout>
   2d740:	4621      	mov	r1, r4
   2d742:	f7e9 fa0b 	bl	16b5c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d746:	4831      	ldr	r0, [pc, #196]	; (2d80c <sys_clock_announce+0x16c>)
   2d748:	f7fd f872 	bl	2a830 <z_spin_unlock_valid>
   2d74c:	b968      	cbnz	r0, 2d76a <sys_clock_announce+0xca>
   2d74e:	23ac      	movs	r3, #172	; 0xac
   2d750:	4a2f      	ldr	r2, [pc, #188]	; (2d810 <sys_clock_announce+0x170>)
   2d752:	4935      	ldr	r1, [pc, #212]	; (2d828 <sys_clock_announce+0x188>)
   2d754:	4830      	ldr	r0, [pc, #192]	; (2d818 <sys_clock_announce+0x178>)
   2d756:	f002 fa8b 	bl	2fc70 <printk>
   2d75a:	492c      	ldr	r1, [pc, #176]	; (2d80c <sys_clock_announce+0x16c>)
   2d75c:	4833      	ldr	r0, [pc, #204]	; (2d82c <sys_clock_announce+0x18c>)
   2d75e:	f002 fa87 	bl	2fc70 <printk>
   2d762:	21ac      	movs	r1, #172	; 0xac
   2d764:	482a      	ldr	r0, [pc, #168]	; (2d810 <sys_clock_announce+0x170>)
   2d766:	f002 fd69 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2d76a:	f387 8811 	msr	BASEPRI, r7
   2d76e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2d772:	b003      	add	sp, #12
   2d774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   2d778:	2200      	movs	r2, #0
		curr_tick += dt;
   2d77a:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   2d77e:	2300      	movs	r3, #0
		curr_tick += dt;
   2d780:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   2d784:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   2d788:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   2d78c:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   2d78e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   2d792:	4620      	mov	r0, r4
		curr_tick += dt;
   2d794:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   2d798:	f7ff fdae 	bl	2d2f8 <remove_timeout>
   2d79c:	481b      	ldr	r0, [pc, #108]	; (2d80c <sys_clock_announce+0x16c>)
   2d79e:	f7fd f847 	bl	2a830 <z_spin_unlock_valid>
   2d7a2:	b968      	cbnz	r0, 2d7c0 <sys_clock_announce+0x120>
   2d7a4:	23ac      	movs	r3, #172	; 0xac
   2d7a6:	4a1a      	ldr	r2, [pc, #104]	; (2d810 <sys_clock_announce+0x170>)
   2d7a8:	491f      	ldr	r1, [pc, #124]	; (2d828 <sys_clock_announce+0x188>)
   2d7aa:	481b      	ldr	r0, [pc, #108]	; (2d818 <sys_clock_announce+0x178>)
   2d7ac:	f002 fa60 	bl	2fc70 <printk>
   2d7b0:	4916      	ldr	r1, [pc, #88]	; (2d80c <sys_clock_announce+0x16c>)
   2d7b2:	481e      	ldr	r0, [pc, #120]	; (2d82c <sys_clock_announce+0x18c>)
   2d7b4:	f002 fa5c 	bl	2fc70 <printk>
   2d7b8:	21ac      	movs	r1, #172	; 0xac
   2d7ba:	4815      	ldr	r0, [pc, #84]	; (2d810 <sys_clock_announce+0x170>)
   2d7bc:	f002 fd3e 	bl	3023c <assert_post_action>
   2d7c0:	f387 8811 	msr	BASEPRI, r7
   2d7c4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2d7c8:	4620      	mov	r0, r4
   2d7ca:	68a3      	ldr	r3, [r4, #8]
   2d7cc:	4798      	blx	r3
	__asm__ volatile(
   2d7ce:	f04f 0320 	mov.w	r3, #32
   2d7d2:	f3ef 8711 	mrs	r7, BASEPRI
   2d7d6:	f383 8811 	msr	BASEPRI, r3
   2d7da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d7de:	480b      	ldr	r0, [pc, #44]	; (2d80c <sys_clock_announce+0x16c>)
   2d7e0:	f7fd f818 	bl	2a814 <z_spin_lock_valid>
   2d7e4:	b968      	cbnz	r0, 2d802 <sys_clock_announce+0x162>
   2d7e6:	2381      	movs	r3, #129	; 0x81
   2d7e8:	4a09      	ldr	r2, [pc, #36]	; (2d810 <sys_clock_announce+0x170>)
   2d7ea:	490a      	ldr	r1, [pc, #40]	; (2d814 <sys_clock_announce+0x174>)
   2d7ec:	480a      	ldr	r0, [pc, #40]	; (2d818 <sys_clock_announce+0x178>)
   2d7ee:	f002 fa3f 	bl	2fc70 <printk>
   2d7f2:	4906      	ldr	r1, [pc, #24]	; (2d80c <sys_clock_announce+0x16c>)
   2d7f4:	4809      	ldr	r0, [pc, #36]	; (2d81c <sys_clock_announce+0x17c>)
   2d7f6:	f002 fa3b 	bl	2fc70 <printk>
   2d7fa:	2181      	movs	r1, #129	; 0x81
   2d7fc:	4804      	ldr	r0, [pc, #16]	; (2d810 <sys_clock_announce+0x170>)
   2d7fe:	f002 fd1d 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2d802:	4802      	ldr	r0, [pc, #8]	; (2d80c <sys_clock_announce+0x16c>)
   2d804:	f7fd f822 	bl	2a84c <z_spin_lock_set_owner>
	return k;
   2d808:	e772      	b.n	2d6f0 <sys_clock_announce+0x50>
   2d80a:	bf00      	nop
   2d80c:	20016d28 	.word	0x20016d28
   2d810:	0003a62b 	.word	0x0003a62b
   2d814:	0003a67d 	.word	0x0003a67d
   2d818:	0003a56b 	.word	0x0003a56b
   2d81c:	0003a692 	.word	0x0003a692
   2d820:	20015f08 	.word	0x20015f08
   2d824:	20016d24 	.word	0x20016d24
   2d828:	0003a651 	.word	0x0003a651
   2d82c:	0003a668 	.word	0x0003a668
   2d830:	20014a18 	.word	0x20014a18

0002d834 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2d834:	b570      	push	{r4, r5, r6, lr}
   2d836:	f04f 0320 	mov.w	r3, #32
   2d83a:	f3ef 8611 	mrs	r6, BASEPRI
   2d83e:	f383 8811 	msr	BASEPRI, r3
   2d842:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d846:	481b      	ldr	r0, [pc, #108]	; (2d8b4 <sys_clock_tick_get+0x80>)
   2d848:	f7fc ffe4 	bl	2a814 <z_spin_lock_valid>
   2d84c:	b968      	cbnz	r0, 2d86a <sys_clock_tick_get+0x36>
   2d84e:	2381      	movs	r3, #129	; 0x81
   2d850:	4a19      	ldr	r2, [pc, #100]	; (2d8b8 <sys_clock_tick_get+0x84>)
   2d852:	491a      	ldr	r1, [pc, #104]	; (2d8bc <sys_clock_tick_get+0x88>)
   2d854:	481a      	ldr	r0, [pc, #104]	; (2d8c0 <sys_clock_tick_get+0x8c>)
   2d856:	f002 fa0b 	bl	2fc70 <printk>
   2d85a:	4916      	ldr	r1, [pc, #88]	; (2d8b4 <sys_clock_tick_get+0x80>)
   2d85c:	4819      	ldr	r0, [pc, #100]	; (2d8c4 <sys_clock_tick_get+0x90>)
   2d85e:	f002 fa07 	bl	2fc70 <printk>
   2d862:	2181      	movs	r1, #129	; 0x81
   2d864:	4814      	ldr	r0, [pc, #80]	; (2d8b8 <sys_clock_tick_get+0x84>)
   2d866:	f002 fce9 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2d86a:	4812      	ldr	r0, [pc, #72]	; (2d8b4 <sys_clock_tick_get+0x80>)
   2d86c:	f7fc ffee 	bl	2a84c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2d870:	f7e9 f9a6 	bl	16bc0 <sys_clock_elapsed>
   2d874:	4b14      	ldr	r3, [pc, #80]	; (2d8c8 <sys_clock_tick_get+0x94>)
   2d876:	e9d3 4500 	ldrd	r4, r5, [r3]
   2d87a:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d87c:	480d      	ldr	r0, [pc, #52]	; (2d8b4 <sys_clock_tick_get+0x80>)
   2d87e:	f145 0500 	adc.w	r5, r5, #0
   2d882:	f7fc ffd5 	bl	2a830 <z_spin_unlock_valid>
   2d886:	b968      	cbnz	r0, 2d8a4 <sys_clock_tick_get+0x70>
   2d888:	23ac      	movs	r3, #172	; 0xac
   2d88a:	4a0b      	ldr	r2, [pc, #44]	; (2d8b8 <sys_clock_tick_get+0x84>)
   2d88c:	490f      	ldr	r1, [pc, #60]	; (2d8cc <sys_clock_tick_get+0x98>)
   2d88e:	480c      	ldr	r0, [pc, #48]	; (2d8c0 <sys_clock_tick_get+0x8c>)
   2d890:	f002 f9ee 	bl	2fc70 <printk>
   2d894:	4907      	ldr	r1, [pc, #28]	; (2d8b4 <sys_clock_tick_get+0x80>)
   2d896:	480e      	ldr	r0, [pc, #56]	; (2d8d0 <sys_clock_tick_get+0x9c>)
   2d898:	f002 f9ea 	bl	2fc70 <printk>
   2d89c:	21ac      	movs	r1, #172	; 0xac
   2d89e:	4806      	ldr	r0, [pc, #24]	; (2d8b8 <sys_clock_tick_get+0x84>)
   2d8a0:	f002 fccc 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2d8a4:	f386 8811 	msr	BASEPRI, r6
   2d8a8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2d8ac:	4620      	mov	r0, r4
   2d8ae:	4629      	mov	r1, r5
   2d8b0:	bd70      	pop	{r4, r5, r6, pc}
   2d8b2:	bf00      	nop
   2d8b4:	20016d28 	.word	0x20016d28
   2d8b8:	0003a62b 	.word	0x0003a62b
   2d8bc:	0003a67d 	.word	0x0003a67d
   2d8c0:	0003a56b 	.word	0x0003a56b
   2d8c4:	0003a692 	.word	0x0003a692
   2d8c8:	20015f08 	.word	0x20015f08
   2d8cc:	0003a651 	.word	0x0003a651
   2d8d0:	0003a668 	.word	0x0003a668

0002d8d4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2d8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2d8d6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2d8da:	1c56      	adds	r6, r2, #1
   2d8dc:	f143 0700 	adc.w	r7, r3, #0
   2d8e0:	2f00      	cmp	r7, #0
   2d8e2:	bf08      	it	eq
   2d8e4:	2e02      	cmpeq	r6, #2
{
   2d8e6:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2d8e8:	d302      	bcc.n	2d8f0 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2d8ea:	490d      	ldr	r1, [pc, #52]	; (2d920 <z_timer_expiration_handler+0x4c>)
   2d8ec:	f7ff fd1e 	bl	2d32c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2d8f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2d8f2:	3301      	adds	r3, #1
   2d8f4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2d8f6:	6a23      	ldr	r3, [r4, #32]
   2d8f8:	b10b      	cbz	r3, 2d8fe <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2d8fa:	4620      	mov	r0, r4
   2d8fc:	4798      	blx	r3
	return list->head == list;
   2d8fe:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d902:	42a5      	cmp	r5, r4
   2d904:	d00a      	beq.n	2d91c <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2d906:	b14d      	cbz	r5, 2d91c <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2d908:	4628      	mov	r0, r5
   2d90a:	f7fe faed 	bl	2bee8 <z_unpend_thread_no_timeout>
   2d90e:	2300      	movs	r3, #0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   2d910:	4628      	mov	r0, r5
   2d912:	67eb      	str	r3, [r5, #124]	; 0x7c
}
   2d914:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   2d918:	f7fe bfa6 	b.w	2c868 <z_ready_thread>
}
   2d91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d91e:	bf00      	nop
   2d920:	0002d8d5 	.word	0x0002d8d5

0002d924 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2d924:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   2d928:	4619      	mov	r1, r3
   2d92a:	4606      	mov	r6, r0
   2d92c:	4610      	mov	r0, r2
   2d92e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2d932:	1c4c      	adds	r4, r1, #1
   2d934:	bf08      	it	eq
   2d936:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2d93a:	4680      	mov	r8, r0
   2d93c:	4689      	mov	r9, r1
   2d93e:	d04c      	beq.n	2d9da <z_impl_k_timer_start+0xb6>
   2d940:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2d942:	1c6b      	adds	r3, r5, #1
   2d944:	bf08      	it	eq
   2d946:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2d94a:	4614      	mov	r4, r2
   2d94c:	d019      	beq.n	2d982 <z_impl_k_timer_start+0x5e>
   2d94e:	ea54 0305 	orrs.w	r3, r4, r5
   2d952:	d016      	beq.n	2d982 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   2d954:	f06f 0301 	mvn.w	r3, #1
   2d958:	ebb3 0a02 	subs.w	sl, r3, r2
   2d95c:	f04f 33ff 	mov.w	r3, #4294967295
   2d960:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2d964:	f1ba 0f00 	cmp.w	sl, #0
   2d968:	f17b 0300 	sbcs.w	r3, fp, #0
   2d96c:	da09      	bge.n	2d982 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   2d96e:	f112 34ff 	adds.w	r4, r2, #4294967295
   2d972:	f145 35ff 	adc.w	r5, r5, #4294967295
   2d976:	2c01      	cmp	r4, #1
   2d978:	f175 0300 	sbcs.w	r3, r5, #0
   2d97c:	bfbc      	itt	lt
   2d97e:	2401      	movlt	r4, #1
   2d980:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2d982:	f06f 0301 	mvn.w	r3, #1
   2d986:	1a1b      	subs	r3, r3, r0
   2d988:	9300      	str	r3, [sp, #0]
   2d98a:	f04f 33ff 	mov.w	r3, #4294967295
   2d98e:	eb63 0301 	sbc.w	r3, r3, r1
   2d992:	9301      	str	r3, [sp, #4]
   2d994:	e9dd 2300 	ldrd	r2, r3, [sp]
   2d998:	2a00      	cmp	r2, #0
   2d99a:	f173 0300 	sbcs.w	r3, r3, #0
   2d99e:	da0c      	bge.n	2d9ba <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2d9a0:	f110 38ff 	adds.w	r8, r0, #4294967295
   2d9a4:	f141 39ff 	adc.w	r9, r1, #4294967295
   2d9a8:	f1b8 0f00 	cmp.w	r8, #0
   2d9ac:	f179 0300 	sbcs.w	r3, r9, #0
   2d9b0:	bfbc      	itt	lt
   2d9b2:	f04f 0800 	movlt.w	r8, #0
   2d9b6:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   2d9ba:	4630      	mov	r0, r6
   2d9bc:	f7ff fd8a 	bl	2d4d4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2d9c0:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2d9c2:	4642      	mov	r2, r8
	timer->status = 0U;
   2d9c4:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2d9c6:	4630      	mov	r0, r6
   2d9c8:	464b      	mov	r3, r9
   2d9ca:	4905      	ldr	r1, [pc, #20]	; (2d9e0 <z_impl_k_timer_start+0xbc>)
	timer->period = period;
   2d9cc:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   2d9d0:	b002      	add	sp, #8
   2d9d2:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2d9d6:	f7ff bca9 	b.w	2d32c <z_add_timeout>
}
   2d9da:	b002      	add	sp, #8
   2d9dc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   2d9e0:	0002d8d5 	.word	0x0002d8d5

0002d9e4 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   2d9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d9e8:	2414      	movs	r4, #20
   2d9ea:	4680      	mov	r8, r0
   2d9ec:	4617      	mov	r7, r2
	while (num_events--) {
   2d9ee:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2d9f2:	4d51      	ldr	r5, [pc, #324]	; (2db38 <clear_event_registrations+0x154>)
   2d9f4:	f8df 9184 	ldr.w	r9, [pc, #388]	; 2db7c <clear_event_registrations+0x198>
   2d9f8:	4e50      	ldr	r6, [pc, #320]	; (2db3c <clear_event_registrations+0x158>)
	while (num_events--) {
   2d9fa:	45a0      	cmp	r8, r4
   2d9fc:	d101      	bne.n	2da02 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   2d9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2da02:	2300      	movs	r3, #0
   2da04:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   2da08:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2da0c:	f003 031f 	and.w	r3, r3, #31
   2da10:	2b08      	cmp	r3, #8
   2da12:	d84f      	bhi.n	2dab4 <clear_event_registrations+0xd0>
   2da14:	e8df f003 	tbb	[pc, r3]
   2da18:	4e05305b 	.word	0x4e05305b
   2da1c:	4e4e4e21 	.word	0x4e4e4e21
   2da20:	3f          	.byte	0x3f
   2da21:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2da22:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2da26:	b963      	cbnz	r3, 2da42 <clear_event_registrations+0x5e>
   2da28:	4945      	ldr	r1, [pc, #276]	; (2db40 <clear_event_registrations+0x15c>)
   2da2a:	23a9      	movs	r3, #169	; 0xa9
   2da2c:	462a      	mov	r2, r5
   2da2e:	4630      	mov	r0, r6
   2da30:	f002 f91e 	bl	2fc70 <printk>
   2da34:	4843      	ldr	r0, [pc, #268]	; (2db44 <clear_event_registrations+0x160>)
   2da36:	f002 f91b 	bl	2fc70 <printk>
   2da3a:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2da3c:	4628      	mov	r0, r5
   2da3e:	f002 fbfd 	bl	3023c <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2da42:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2da46:	2b00      	cmp	r3, #0
   2da48:	d041      	beq.n	2dace <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   2da4a:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   2da4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2da50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2da52:	2300      	movs	r3, #0
	node->prev = NULL;
   2da54:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   2da58:	e039      	b.n	2dace <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2da5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2da5e:	2b00      	cmp	r3, #0
   2da60:	d1ef      	bne.n	2da42 <clear_event_registrations+0x5e>
   2da62:	4939      	ldr	r1, [pc, #228]	; (2db48 <clear_event_registrations+0x164>)
   2da64:	23ad      	movs	r3, #173	; 0xad
   2da66:	462a      	mov	r2, r5
   2da68:	4630      	mov	r0, r6
   2da6a:	f002 f901 	bl	2fc70 <printk>
   2da6e:	4837      	ldr	r0, [pc, #220]	; (2db4c <clear_event_registrations+0x168>)
   2da70:	f002 f8fe 	bl	2fc70 <printk>
   2da74:	21ad      	movs	r1, #173	; 0xad
   2da76:	e7e1      	b.n	2da3c <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2da78:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2da7c:	2b00      	cmp	r3, #0
   2da7e:	d1e0      	bne.n	2da42 <clear_event_registrations+0x5e>
   2da80:	4933      	ldr	r1, [pc, #204]	; (2db50 <clear_event_registrations+0x16c>)
   2da82:	23b1      	movs	r3, #177	; 0xb1
   2da84:	462a      	mov	r2, r5
   2da86:	4630      	mov	r0, r6
   2da88:	f002 f8f2 	bl	2fc70 <printk>
   2da8c:	4831      	ldr	r0, [pc, #196]	; (2db54 <clear_event_registrations+0x170>)
   2da8e:	f002 f8ef 	bl	2fc70 <printk>
   2da92:	21b1      	movs	r1, #177	; 0xb1
   2da94:	e7d2      	b.n	2da3c <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2da96:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2da9a:	2b00      	cmp	r3, #0
   2da9c:	d1d1      	bne.n	2da42 <clear_event_registrations+0x5e>
   2da9e:	492e      	ldr	r1, [pc, #184]	; (2db58 <clear_event_registrations+0x174>)
   2daa0:	23b5      	movs	r3, #181	; 0xb5
   2daa2:	462a      	mov	r2, r5
   2daa4:	4630      	mov	r0, r6
   2daa6:	f002 f8e3 	bl	2fc70 <printk>
   2daaa:	482c      	ldr	r0, [pc, #176]	; (2db5c <clear_event_registrations+0x178>)
   2daac:	f002 f8e0 	bl	2fc70 <printk>
   2dab0:	21b5      	movs	r1, #181	; 0xb5
   2dab2:	e7c3      	b.n	2da3c <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   2dab4:	4649      	mov	r1, r9
   2dab6:	23bc      	movs	r3, #188	; 0xbc
   2dab8:	462a      	mov	r2, r5
   2daba:	4630      	mov	r0, r6
   2dabc:	f002 f8d8 	bl	2fc70 <printk>
   2dac0:	4827      	ldr	r0, [pc, #156]	; (2db60 <clear_event_registrations+0x17c>)
   2dac2:	f002 f8d5 	bl	2fc70 <printk>
   2dac6:	21bc      	movs	r1, #188	; 0xbc
   2dac8:	4628      	mov	r0, r5
   2daca:	f002 fbb7 	bl	3023c <assert_post_action>
   2dace:	4825      	ldr	r0, [pc, #148]	; (2db64 <clear_event_registrations+0x180>)
   2dad0:	f7fc feae 	bl	2a830 <z_spin_unlock_valid>
   2dad4:	b968      	cbnz	r0, 2daf2 <clear_event_registrations+0x10e>
   2dad6:	23ac      	movs	r3, #172	; 0xac
   2dad8:	4630      	mov	r0, r6
   2dada:	4a23      	ldr	r2, [pc, #140]	; (2db68 <clear_event_registrations+0x184>)
   2dadc:	4923      	ldr	r1, [pc, #140]	; (2db6c <clear_event_registrations+0x188>)
   2dade:	f002 f8c7 	bl	2fc70 <printk>
   2dae2:	4920      	ldr	r1, [pc, #128]	; (2db64 <clear_event_registrations+0x180>)
   2dae4:	4822      	ldr	r0, [pc, #136]	; (2db70 <clear_event_registrations+0x18c>)
   2dae6:	f002 f8c3 	bl	2fc70 <printk>
   2daea:	21ac      	movs	r1, #172	; 0xac
   2daec:	481e      	ldr	r0, [pc, #120]	; (2db68 <clear_event_registrations+0x184>)
   2daee:	f002 fba5 	bl	3023c <assert_post_action>
   2daf2:	f387 8811 	msr	BASEPRI, r7
   2daf6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2dafa:	f04f 0320 	mov.w	r3, #32
   2dafe:	f3ef 8711 	mrs	r7, BASEPRI
   2db02:	f383 8811 	msr	BASEPRI, r3
   2db06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2db0a:	4816      	ldr	r0, [pc, #88]	; (2db64 <clear_event_registrations+0x180>)
   2db0c:	f7fc fe82 	bl	2a814 <z_spin_lock_valid>
   2db10:	b968      	cbnz	r0, 2db2e <clear_event_registrations+0x14a>
   2db12:	2381      	movs	r3, #129	; 0x81
   2db14:	4630      	mov	r0, r6
   2db16:	4a14      	ldr	r2, [pc, #80]	; (2db68 <clear_event_registrations+0x184>)
   2db18:	4916      	ldr	r1, [pc, #88]	; (2db74 <clear_event_registrations+0x190>)
   2db1a:	f002 f8a9 	bl	2fc70 <printk>
   2db1e:	4911      	ldr	r1, [pc, #68]	; (2db64 <clear_event_registrations+0x180>)
   2db20:	4815      	ldr	r0, [pc, #84]	; (2db78 <clear_event_registrations+0x194>)
   2db22:	f002 f8a5 	bl	2fc70 <printk>
   2db26:	2181      	movs	r1, #129	; 0x81
   2db28:	480f      	ldr	r0, [pc, #60]	; (2db68 <clear_event_registrations+0x184>)
   2db2a:	f002 fb87 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2db2e:	480d      	ldr	r0, [pc, #52]	; (2db64 <clear_event_registrations+0x180>)
   2db30:	f7fc fe8c 	bl	2a84c <z_spin_lock_set_owner>
	return k;
   2db34:	3c14      	subs	r4, #20
   2db36:	e760      	b.n	2d9fa <clear_event_registrations+0x16>
   2db38:	00040b92 	.word	0x00040b92
   2db3c:	0003a56b 	.word	0x0003a56b
   2db40:	00040bb3 	.word	0x00040bb3
   2db44:	00040bcd 	.word	0x00040bcd
   2db48:	00040be2 	.word	0x00040be2
   2db4c:	00040bfe 	.word	0x00040bfe
   2db50:	00040c0f 	.word	0x00040c0f
   2db54:	00040c2c 	.word	0x00040c2c
   2db58:	00040c43 	.word	0x00040c43
   2db5c:	00040c5e 	.word	0x00040c5e
   2db60:	00040c77 	.word	0x00040c77
   2db64:	20016d2c 	.word	0x20016d2c
   2db68:	0003a62b 	.word	0x0003a62b
   2db6c:	0003a651 	.word	0x0003a651
   2db70:	0003a668 	.word	0x0003a668
   2db74:	0003a67d 	.word	0x0003a67d
   2db78:	0003a692 	.word	0x0003a692
   2db7c:	00040e81 	.word	0x00040e81

0002db80 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2db80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   2db84:	2700      	movs	r7, #0
{
   2db86:	4615      	mov	r5, r2
   2db88:	4604      	mov	r4, r0
	int events_registered = 0;
   2db8a:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2db8c:	4e7a      	ldr	r6, [pc, #488]	; (2dd78 <register_events+0x1f8>)
   2db8e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 2ddbc <register_events+0x23c>
   2db92:	f8df a22c 	ldr.w	sl, [pc, #556]	; 2ddc0 <register_events+0x240>
{
   2db96:	9100      	str	r1, [sp, #0]
   2db98:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2db9a:	9b00      	ldr	r3, [sp, #0]
   2db9c:	429f      	cmp	r7, r3
   2db9e:	db03      	blt.n	2dba8 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2dba0:	4648      	mov	r0, r9
   2dba2:	b003      	add	sp, #12
   2dba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dba8:	f04f 0320 	mov.w	r3, #32
   2dbac:	f3ef 8b11 	mrs	fp, BASEPRI
   2dbb0:	f383 8811 	msr	BASEPRI, r3
   2dbb4:	f3bf 8f6f 	isb	sy
   2dbb8:	4630      	mov	r0, r6
   2dbba:	f7fc fe2b 	bl	2a814 <z_spin_lock_valid>
   2dbbe:	b968      	cbnz	r0, 2dbdc <register_events+0x5c>
   2dbc0:	2381      	movs	r3, #129	; 0x81
   2dbc2:	4642      	mov	r2, r8
   2dbc4:	4651      	mov	r1, sl
   2dbc6:	486d      	ldr	r0, [pc, #436]	; (2dd7c <register_events+0x1fc>)
   2dbc8:	f002 f852 	bl	2fc70 <printk>
   2dbcc:	4631      	mov	r1, r6
   2dbce:	486c      	ldr	r0, [pc, #432]	; (2dd80 <register_events+0x200>)
   2dbd0:	f002 f84e 	bl	2fc70 <printk>
   2dbd4:	2181      	movs	r1, #129	; 0x81
   2dbd6:	4640      	mov	r0, r8
   2dbd8:	f002 fb30 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2dbdc:	4630      	mov	r0, r6
   2dbde:	f7fc fe35 	bl	2a84c <z_spin_lock_set_owner>
	switch (event->type) {
   2dbe2:	7b63      	ldrb	r3, [r4, #13]
   2dbe4:	f003 031f 	and.w	r3, r3, #31
   2dbe8:	2b08      	cmp	r3, #8
   2dbea:	d84f      	bhi.n	2dc8c <register_events+0x10c>
   2dbec:	e8df f003 	tbb	[pc, r3]
   2dbf0:	4e054230 	.word	0x4e054230
   2dbf4:	4e4e4e2c 	.word	0x4e4e4e2c
   2dbf8:	48          	.byte	0x48
   2dbf9:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   2dbfa:	6923      	ldr	r3, [r4, #16]
   2dbfc:	689b      	ldr	r3, [r3, #8]
   2dbfe:	b33b      	cbz	r3, 2dc50 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2dc00:	2302      	movs	r3, #2
	event->poller = NULL;
   2dc02:	2100      	movs	r1, #0
	event->state |= state;
   2dc04:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   2dc06:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2dc08:	f3c2 3045 	ubfx	r0, r2, #13, #6
   2dc0c:	4303      	orrs	r3, r0
   2dc0e:	f363 3252 	bfi	r2, r3, #13, #6
   2dc12:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   2dc14:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2dc16:	4630      	mov	r0, r6
   2dc18:	f7fc fe0a 	bl	2a830 <z_spin_unlock_valid>
   2dc1c:	b968      	cbnz	r0, 2dc3a <register_events+0xba>
   2dc1e:	23ac      	movs	r3, #172	; 0xac
   2dc20:	4642      	mov	r2, r8
   2dc22:	4958      	ldr	r1, [pc, #352]	; (2dd84 <register_events+0x204>)
   2dc24:	4855      	ldr	r0, [pc, #340]	; (2dd7c <register_events+0x1fc>)
   2dc26:	f002 f823 	bl	2fc70 <printk>
   2dc2a:	4631      	mov	r1, r6
   2dc2c:	4856      	ldr	r0, [pc, #344]	; (2dd88 <register_events+0x208>)
   2dc2e:	f002 f81f 	bl	2fc70 <printk>
   2dc32:	21ac      	movs	r1, #172	; 0xac
   2dc34:	4640      	mov	r0, r8
   2dc36:	f002 fb01 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2dc3a:	f38b 8811 	msr	BASEPRI, fp
   2dc3e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2dc42:	3701      	adds	r7, #1
   2dc44:	3414      	adds	r4, #20
   2dc46:	e7a8      	b.n	2db9a <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   2dc48:	6923      	ldr	r3, [r4, #16]
   2dc4a:	681b      	ldr	r3, [r3, #0]
   2dc4c:	2b00      	cmp	r3, #0
   2dc4e:	d12e      	bne.n	2dcae <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   2dc50:	9b01      	ldr	r3, [sp, #4]
   2dc52:	2b00      	cmp	r3, #0
   2dc54:	d1df      	bne.n	2dc16 <register_events+0x96>
   2dc56:	782b      	ldrb	r3, [r5, #0]
   2dc58:	2b00      	cmp	r3, #0
   2dc5a:	d0dc      	beq.n	2dc16 <register_events+0x96>
	switch (event->type) {
   2dc5c:	7b63      	ldrb	r3, [r4, #13]
   2dc5e:	f003 031f 	and.w	r3, r3, #31
   2dc62:	2b08      	cmp	r3, #8
   2dc64:	d879      	bhi.n	2dd5a <register_events+0x1da>
   2dc66:	e8df f003 	tbb	[pc, r3]
   2dc6a:	5139      	.short	0x5139
   2dc6c:	783d7824 	.word	0x783d7824
   2dc70:	7878      	.short	0x7878
   2dc72:	64          	.byte	0x64
   2dc73:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2dc74:	6923      	ldr	r3, [r4, #16]
   2dc76:	689b      	ldr	r3, [r3, #8]
   2dc78:	2b00      	cmp	r3, #0
   2dc7a:	d0e9      	beq.n	2dc50 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   2dc7c:	2301      	movs	r3, #1
   2dc7e:	e7c0      	b.n	2dc02 <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   2dc80:	6923      	ldr	r3, [r4, #16]
   2dc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2dc84:	2b00      	cmp	r3, #0
   2dc86:	d0e3      	beq.n	2dc50 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2dc88:	2310      	movs	r3, #16
   2dc8a:	e7ba      	b.n	2dc02 <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2dc8c:	235c      	movs	r3, #92	; 0x5c
   2dc8e:	4a3f      	ldr	r2, [pc, #252]	; (2dd8c <register_events+0x20c>)
   2dc90:	493f      	ldr	r1, [pc, #252]	; (2dd90 <register_events+0x210>)
   2dc92:	483a      	ldr	r0, [pc, #232]	; (2dd7c <register_events+0x1fc>)
   2dc94:	f001 ffec 	bl	2fc70 <printk>
   2dc98:	7b61      	ldrb	r1, [r4, #13]
   2dc9a:	483e      	ldr	r0, [pc, #248]	; (2dd94 <register_events+0x214>)
   2dc9c:	f001 011f 	and.w	r1, r1, #31
   2dca0:	f001 ffe6 	bl	2fc70 <printk>
   2dca4:	215c      	movs	r1, #92	; 0x5c
   2dca6:	4839      	ldr	r0, [pc, #228]	; (2dd8c <register_events+0x20c>)
   2dca8:	f002 fac8 	bl	3023c <assert_post_action>
		break;
   2dcac:	e7d0      	b.n	2dc50 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2dcae:	2304      	movs	r3, #4
   2dcb0:	e7a7      	b.n	2dc02 <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2dcb2:	6923      	ldr	r3, [r4, #16]
   2dcb4:	b963      	cbnz	r3, 2dcd0 <register_events+0x150>
   2dcb6:	4938      	ldr	r1, [pc, #224]	; (2dd98 <register_events+0x218>)
   2dcb8:	2386      	movs	r3, #134	; 0x86
   2dcba:	4a34      	ldr	r2, [pc, #208]	; (2dd8c <register_events+0x20c>)
   2dcbc:	482f      	ldr	r0, [pc, #188]	; (2dd7c <register_events+0x1fc>)
   2dcbe:	f001 ffd7 	bl	2fc70 <printk>
   2dcc2:	4836      	ldr	r0, [pc, #216]	; (2dd9c <register_events+0x21c>)
   2dcc4:	f001 ffd4 	bl	2fc70 <printk>
   2dcc8:	2186      	movs	r1, #134	; 0x86
   2dcca:	4830      	ldr	r0, [pc, #192]	; (2dd8c <register_events+0x20c>)
   2dccc:	f002 fab6 	bl	3023c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2dcd0:	462a      	mov	r2, r5
   2dcd2:	4621      	mov	r1, r4
   2dcd4:	6920      	ldr	r0, [r4, #16]
   2dcd6:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2dcd8:	f009 fccf 	bl	3767a <add_event>
	event->poller = poller;
   2dcdc:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   2dcde:	f109 0901 	add.w	r9, r9, #1
   2dce2:	e798      	b.n	2dc16 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2dce4:	6923      	ldr	r3, [r4, #16]
   2dce6:	b963      	cbnz	r3, 2dd02 <register_events+0x182>
   2dce8:	492d      	ldr	r1, [pc, #180]	; (2dda0 <register_events+0x220>)
   2dcea:	238a      	movs	r3, #138	; 0x8a
   2dcec:	4a27      	ldr	r2, [pc, #156]	; (2dd8c <register_events+0x20c>)
   2dcee:	4823      	ldr	r0, [pc, #140]	; (2dd7c <register_events+0x1fc>)
   2dcf0:	f001 ffbe 	bl	2fc70 <printk>
   2dcf4:	482b      	ldr	r0, [pc, #172]	; (2dda4 <register_events+0x224>)
   2dcf6:	f001 ffbb 	bl	2fc70 <printk>
   2dcfa:	218a      	movs	r1, #138	; 0x8a
   2dcfc:	4823      	ldr	r0, [pc, #140]	; (2dd8c <register_events+0x20c>)
   2dcfe:	f002 fa9d 	bl	3023c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   2dd02:	6920      	ldr	r0, [r4, #16]
   2dd04:	462a      	mov	r2, r5
   2dd06:	4621      	mov	r1, r4
   2dd08:	3014      	adds	r0, #20
   2dd0a:	e7e5      	b.n	2dcd8 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2dd0c:	6923      	ldr	r3, [r4, #16]
   2dd0e:	b963      	cbnz	r3, 2dd2a <register_events+0x1aa>
   2dd10:	4925      	ldr	r1, [pc, #148]	; (2dda8 <register_events+0x228>)
   2dd12:	238e      	movs	r3, #142	; 0x8e
   2dd14:	4a1d      	ldr	r2, [pc, #116]	; (2dd8c <register_events+0x20c>)
   2dd16:	4819      	ldr	r0, [pc, #100]	; (2dd7c <register_events+0x1fc>)
   2dd18:	f001 ffaa 	bl	2fc70 <printk>
   2dd1c:	4823      	ldr	r0, [pc, #140]	; (2ddac <register_events+0x22c>)
   2dd1e:	f001 ffa7 	bl	2fc70 <printk>
   2dd22:	218e      	movs	r1, #142	; 0x8e
   2dd24:	4819      	ldr	r0, [pc, #100]	; (2dd8c <register_events+0x20c>)
   2dd26:	f002 fa89 	bl	3023c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2dd2a:	462a      	mov	r2, r5
   2dd2c:	4621      	mov	r1, r4
   2dd2e:	6920      	ldr	r0, [r4, #16]
   2dd30:	e7d2      	b.n	2dcd8 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2dd32:	6923      	ldr	r3, [r4, #16]
   2dd34:	b963      	cbnz	r3, 2dd50 <register_events+0x1d0>
   2dd36:	491e      	ldr	r1, [pc, #120]	; (2ddb0 <register_events+0x230>)
   2dd38:	2392      	movs	r3, #146	; 0x92
   2dd3a:	4a14      	ldr	r2, [pc, #80]	; (2dd8c <register_events+0x20c>)
   2dd3c:	480f      	ldr	r0, [pc, #60]	; (2dd7c <register_events+0x1fc>)
   2dd3e:	f001 ff97 	bl	2fc70 <printk>
   2dd42:	481c      	ldr	r0, [pc, #112]	; (2ddb4 <register_events+0x234>)
   2dd44:	f001 ff94 	bl	2fc70 <printk>
   2dd48:	2192      	movs	r1, #146	; 0x92
   2dd4a:	4810      	ldr	r0, [pc, #64]	; (2dd8c <register_events+0x20c>)
   2dd4c:	f002 fa76 	bl	3023c <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   2dd50:	6920      	ldr	r0, [r4, #16]
   2dd52:	462a      	mov	r2, r5
   2dd54:	4621      	mov	r1, r4
   2dd56:	3028      	adds	r0, #40	; 0x28
   2dd58:	e7be      	b.n	2dcd8 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   2dd5a:	2399      	movs	r3, #153	; 0x99
   2dd5c:	4a0b      	ldr	r2, [pc, #44]	; (2dd8c <register_events+0x20c>)
   2dd5e:	490c      	ldr	r1, [pc, #48]	; (2dd90 <register_events+0x210>)
   2dd60:	4806      	ldr	r0, [pc, #24]	; (2dd7c <register_events+0x1fc>)
   2dd62:	f001 ff85 	bl	2fc70 <printk>
   2dd66:	4814      	ldr	r0, [pc, #80]	; (2ddb8 <register_events+0x238>)
   2dd68:	f001 ff82 	bl	2fc70 <printk>
   2dd6c:	2199      	movs	r1, #153	; 0x99
   2dd6e:	4807      	ldr	r0, [pc, #28]	; (2dd8c <register_events+0x20c>)
   2dd70:	f002 fa64 	bl	3023c <assert_post_action>
		break;
   2dd74:	e7b2      	b.n	2dcdc <register_events+0x15c>
   2dd76:	bf00      	nop
   2dd78:	20016d2c 	.word	0x20016d2c
   2dd7c:	0003a56b 	.word	0x0003a56b
   2dd80:	0003a692 	.word	0x0003a692
   2dd84:	0003a651 	.word	0x0003a651
   2dd88:	0003a668 	.word	0x0003a668
   2dd8c:	00040b92 	.word	0x00040b92
   2dd90:	00040e81 	.word	0x00040e81
   2dd94:	00040c8d 	.word	0x00040c8d
   2dd98:	00040bb3 	.word	0x00040bb3
   2dd9c:	00040bcd 	.word	0x00040bcd
   2dda0:	00040be2 	.word	0x00040be2
   2dda4:	00040bfe 	.word	0x00040bfe
   2dda8:	00040c0f 	.word	0x00040c0f
   2ddac:	00040c2c 	.word	0x00040c2c
   2ddb0:	00040c43 	.word	0x00040c43
   2ddb4:	00040c5e 	.word	0x00040c5e
   2ddb8:	00040c77 	.word	0x00040c77
   2ddbc:	0003a62b 	.word	0x0003a62b
   2ddc0:	0003a67d 	.word	0x0003a67d

0002ddc4 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   2ddc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2ddc8:	6884      	ldr	r4, [r0, #8]
{
   2ddca:	4605      	mov	r5, r0
   2ddcc:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   2ddce:	b1d4      	cbz	r4, 2de06 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   2ddd0:	7863      	ldrb	r3, [r4, #1]
   2ddd2:	2b01      	cmp	r3, #1
   2ddd4:	d14b      	bne.n	2de6e <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   2ddd6:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   2ddda:	d10e      	bne.n	2ddfa <signal_poll_event+0x36>
   2dddc:	23f5      	movs	r3, #245	; 0xf5
   2ddde:	4a30      	ldr	r2, [pc, #192]	; (2dea0 <signal_poll_event+0xdc>)
   2dde0:	4930      	ldr	r1, [pc, #192]	; (2dea4 <signal_poll_event+0xe0>)
   2dde2:	4831      	ldr	r0, [pc, #196]	; (2dea8 <signal_poll_event+0xe4>)
   2dde4:	f001 ff44 	bl	2fc70 <printk>
   2dde8:	4830      	ldr	r0, [pc, #192]	; (2deac <signal_poll_event+0xe8>)
   2ddea:	f001 ff41 	bl	2fc70 <printk>
   2ddee:	21f5      	movs	r1, #245	; 0xf5
   2ddf0:	482b      	ldr	r0, [pc, #172]	; (2dea0 <signal_poll_event+0xdc>)
   2ddf2:	f002 fa23 	bl	3023c <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   2ddf6:	7b7b      	ldrb	r3, [r7, #13]
   2ddf8:	deff      	udf	#255	; 0xff
   2ddfa:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2ddfe:	f013 0302 	ands.w	r3, r3, #2
   2de02:	d10a      	bne.n	2de1a <signal_poll_event+0x56>
			retcode = signal_triggered_work(event, state);
		} else {
			;
		}

		poller->is_polling = false;
   2de04:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2de06:	2000      	movs	r0, #0
	event->state |= state;
   2de08:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2de0a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2de0c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2de10:	430e      	orrs	r6, r1
   2de12:	f366 3352 	bfi	r3, r6, #13, #6
   2de16:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   2de18:	e00d      	b.n	2de36 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   2de1a:	f04f 31ff 	mov.w	r1, #4294967295
   2de1e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2de22:	f06f 0001 	mvn.w	r0, #1
   2de26:	428b      	cmp	r3, r1
   2de28:	bf08      	it	eq
   2de2a:	4282      	cmpeq	r2, r0
   2de2c:	d105      	bne.n	2de3a <signal_poll_event+0x76>
		poller->is_polling = false;
   2de2e:	2300      	movs	r3, #0
		return -EAGAIN;
   2de30:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2de34:	7023      	strb	r3, [r4, #0]
}
   2de36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   2de3a:	4638      	mov	r0, r7
   2de3c:	f7fe f998 	bl	2c170 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2de40:	2e08      	cmp	r6, #8
   2de42:	bf0c      	ite	eq
   2de44:	f06f 0303 	mvneq.w	r3, #3
   2de48:	2300      	movne	r3, #0
   2de4a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2de4c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2de50:	06db      	lsls	r3, r3, #27
   2de52:	d104      	bne.n	2de5e <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   2de54:	f854 8c48 	ldr.w	r8, [r4, #-72]
   2de58:	f1b8 0f00 	cmp.w	r8, #0
   2de5c:	d001      	beq.n	2de62 <signal_poll_event+0x9e>
		poller->is_polling = false;
   2de5e:	2300      	movs	r3, #0
   2de60:	e7d0      	b.n	2de04 <signal_poll_event+0x40>
	z_ready_thread(thread);
   2de62:	4638      	mov	r0, r7
   2de64:	f7fe fd00 	bl	2c868 <z_ready_thread>
		poller->is_polling = false;
   2de68:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2de6c:	e7cb      	b.n	2de06 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   2de6e:	2b02      	cmp	r3, #2
   2de70:	d1f5      	bne.n	2de5e <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2de72:	7823      	ldrb	r3, [r4, #0]
   2de74:	2b00      	cmp	r3, #0
   2de76:	d0c6      	beq.n	2de06 <signal_poll_event+0x42>
   2de78:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2de7c:	b177      	cbz	r7, 2de9c <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2de7e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2de82:	f1a4 0914 	sub.w	r9, r4, #20
   2de86:	f104 0014 	add.w	r0, r4, #20
   2de8a:	f7ff fb23 	bl	2d4d4 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   2de8e:	4649      	mov	r1, r9
   2de90:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2de92:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2de96:	f7fd fcaf 	bl	2b7f8 <k_work_submit_to_queue>
   2de9a:	e7e5      	b.n	2de68 <signal_poll_event+0xa4>
		poller->is_polling = false;
   2de9c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2de9e:	e7b2      	b.n	2de06 <signal_poll_event+0x42>
   2dea0:	00040b92 	.word	0x00040b92
   2dea4:	00040caa 	.word	0x00040caa
   2dea8:	0003a56b 	.word	0x0003a56b
   2deac:	00040cc0 	.word	0x00040cc0

0002deb0 <k_poll_event_init>:
{
   2deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2deb2:	4605      	mov	r5, r0
   2deb4:	460f      	mov	r7, r1
   2deb6:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2deb8:	4614      	mov	r4, r2
   2deba:	b162      	cbz	r2, 2ded6 <k_poll_event_init+0x26>
   2debc:	491b      	ldr	r1, [pc, #108]	; (2df2c <k_poll_event_init+0x7c>)
   2debe:	232d      	movs	r3, #45	; 0x2d
   2dec0:	4a1b      	ldr	r2, [pc, #108]	; (2df30 <k_poll_event_init+0x80>)
   2dec2:	481c      	ldr	r0, [pc, #112]	; (2df34 <k_poll_event_init+0x84>)
   2dec4:	f001 fed4 	bl	2fc70 <printk>
   2dec8:	481b      	ldr	r0, [pc, #108]	; (2df38 <k_poll_event_init+0x88>)
   2deca:	f001 fed1 	bl	2fc70 <printk>
   2dece:	212d      	movs	r1, #45	; 0x2d
   2ded0:	4817      	ldr	r0, [pc, #92]	; (2df30 <k_poll_event_init+0x80>)
   2ded2:	f002 f9b3 	bl	3023c <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2ded6:	2f1f      	cmp	r7, #31
   2ded8:	d90c      	bls.n	2def4 <k_poll_event_init+0x44>
   2deda:	4918      	ldr	r1, [pc, #96]	; (2df3c <k_poll_event_init+0x8c>)
   2dedc:	232f      	movs	r3, #47	; 0x2f
   2dede:	4a14      	ldr	r2, [pc, #80]	; (2df30 <k_poll_event_init+0x80>)
   2dee0:	4814      	ldr	r0, [pc, #80]	; (2df34 <k_poll_event_init+0x84>)
   2dee2:	f001 fec5 	bl	2fc70 <printk>
   2dee6:	4816      	ldr	r0, [pc, #88]	; (2df40 <k_poll_event_init+0x90>)
   2dee8:	f001 fec2 	bl	2fc70 <printk>
   2deec:	212f      	movs	r1, #47	; 0x2f
   2deee:	4810      	ldr	r0, [pc, #64]	; (2df30 <k_poll_event_init+0x80>)
   2def0:	f002 f9a4 	bl	3023c <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   2def4:	b966      	cbnz	r6, 2df10 <k_poll_event_init+0x60>
   2def6:	4913      	ldr	r1, [pc, #76]	; (2df44 <k_poll_event_init+0x94>)
   2def8:	2330      	movs	r3, #48	; 0x30
   2defa:	4a0d      	ldr	r2, [pc, #52]	; (2df30 <k_poll_event_init+0x80>)
   2defc:	480d      	ldr	r0, [pc, #52]	; (2df34 <k_poll_event_init+0x84>)
   2defe:	f001 feb7 	bl	2fc70 <printk>
   2df02:	4811      	ldr	r0, [pc, #68]	; (2df48 <k_poll_event_init+0x98>)
   2df04:	f001 feb4 	bl	2fc70 <printk>
   2df08:	2130      	movs	r1, #48	; 0x30
   2df0a:	4809      	ldr	r0, [pc, #36]	; (2df30 <k_poll_event_init+0x80>)
   2df0c:	f002 f996 	bl	3023c <assert_post_action>
	event->poller = NULL;
   2df10:	2300      	movs	r3, #0
	event->type = type;
   2df12:	04e4      	lsls	r4, r4, #19
   2df14:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   2df16:	60ab      	str	r3, [r5, #8]
	event->type = type;
   2df18:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   2df1c:	7b2b      	ldrb	r3, [r5, #12]
   2df1e:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   2df22:	433c      	orrs	r4, r7
   2df24:	431c      	orrs	r4, r3
	event->obj = obj;
   2df26:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   2df2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2df2c:	00040cdf 	.word	0x00040cdf
   2df30:	00040b92 	.word	0x00040b92
   2df34:	0003a56b 	.word	0x0003a56b
   2df38:	00040cff 	.word	0x00040cff
   2df3c:	00040d25 	.word	0x00040d25
   2df40:	00040d49 	.word	0x00040d49
   2df44:	00040d59 	.word	0x00040d59
   2df48:	00040d6c 	.word	0x00040d6c

0002df4c <z_impl_k_poll>:
{
   2df4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2df50:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   2df52:	4b75      	ldr	r3, [pc, #468]	; (2e128 <z_impl_k_poll+0x1dc>)
{
   2df54:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   2df56:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   2df58:	2301      	movs	r3, #1
{
   2df5a:	4688      	mov	r8, r1
   2df5c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   2df5e:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   2df62:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   2df66:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   2df6a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2df6e:	b173      	cbz	r3, 2df8e <z_impl_k_poll+0x42>
   2df70:	496e      	ldr	r1, [pc, #440]	; (2e12c <z_impl_k_poll+0x1e0>)
   2df72:	f44f 738b 	mov.w	r3, #278	; 0x116
   2df76:	4a6e      	ldr	r2, [pc, #440]	; (2e130 <z_impl_k_poll+0x1e4>)
   2df78:	486e      	ldr	r0, [pc, #440]	; (2e134 <z_impl_k_poll+0x1e8>)
   2df7a:	f001 fe79 	bl	2fc70 <printk>
   2df7e:	486e      	ldr	r0, [pc, #440]	; (2e138 <z_impl_k_poll+0x1ec>)
   2df80:	f001 fe76 	bl	2fc70 <printk>
   2df84:	f44f 718b 	mov.w	r1, #278	; 0x116
   2df88:	4869      	ldr	r0, [pc, #420]	; (2e130 <z_impl_k_poll+0x1e4>)
   2df8a:	f002 f957 	bl	3023c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2df8e:	b974      	cbnz	r4, 2dfae <z_impl_k_poll+0x62>
   2df90:	496a      	ldr	r1, [pc, #424]	; (2e13c <z_impl_k_poll+0x1f0>)
   2df92:	f240 1317 	movw	r3, #279	; 0x117
   2df96:	4a66      	ldr	r2, [pc, #408]	; (2e130 <z_impl_k_poll+0x1e4>)
   2df98:	4866      	ldr	r0, [pc, #408]	; (2e134 <z_impl_k_poll+0x1e8>)
   2df9a:	f001 fe69 	bl	2fc70 <printk>
   2df9e:	4868      	ldr	r0, [pc, #416]	; (2e140 <z_impl_k_poll+0x1f4>)
   2dfa0:	f001 fe66 	bl	2fc70 <printk>
   2dfa4:	f240 1117 	movw	r1, #279	; 0x117
   2dfa8:	4861      	ldr	r0, [pc, #388]	; (2e130 <z_impl_k_poll+0x1e4>)
   2dfaa:	f002 f947 	bl	3023c <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2dfae:	f1b8 0f00 	cmp.w	r8, #0
   2dfb2:	da0e      	bge.n	2dfd2 <z_impl_k_poll+0x86>
   2dfb4:	4963      	ldr	r1, [pc, #396]	; (2e144 <z_impl_k_poll+0x1f8>)
   2dfb6:	f44f 738c 	mov.w	r3, #280	; 0x118
   2dfba:	4a5d      	ldr	r2, [pc, #372]	; (2e130 <z_impl_k_poll+0x1e4>)
   2dfbc:	485d      	ldr	r0, [pc, #372]	; (2e134 <z_impl_k_poll+0x1e8>)
   2dfbe:	f001 fe57 	bl	2fc70 <printk>
   2dfc2:	4861      	ldr	r0, [pc, #388]	; (2e148 <z_impl_k_poll+0x1fc>)
   2dfc4:	f001 fe54 	bl	2fc70 <printk>
   2dfc8:	f44f 718c 	mov.w	r1, #280	; 0x118
   2dfcc:	4858      	ldr	r0, [pc, #352]	; (2e130 <z_impl_k_poll+0x1e4>)
   2dfce:	f002 f935 	bl	3023c <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   2dfd2:	ea56 0307 	orrs.w	r3, r6, r7
   2dfd6:	bf0c      	ite	eq
   2dfd8:	2301      	moveq	r3, #1
   2dfda:	2300      	movne	r3, #0
   2dfdc:	4641      	mov	r1, r8
   2dfde:	464a      	mov	r2, r9
   2dfe0:	4620      	mov	r0, r4
   2dfe2:	f7ff fdcd 	bl	2db80 <register_events>
   2dfe6:	4680      	mov	r8, r0
	__asm__ volatile(
   2dfe8:	f04f 0320 	mov.w	r3, #32
   2dfec:	f3ef 8911 	mrs	r9, BASEPRI
   2dff0:	f383 8811 	msr	BASEPRI, r3
   2dff4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2dff8:	4854      	ldr	r0, [pc, #336]	; (2e14c <z_impl_k_poll+0x200>)
   2dffa:	f7fc fc0b 	bl	2a814 <z_spin_lock_valid>
   2dffe:	b968      	cbnz	r0, 2e01c <z_impl_k_poll+0xd0>
   2e000:	2381      	movs	r3, #129	; 0x81
   2e002:	4a53      	ldr	r2, [pc, #332]	; (2e150 <z_impl_k_poll+0x204>)
   2e004:	4953      	ldr	r1, [pc, #332]	; (2e154 <z_impl_k_poll+0x208>)
   2e006:	484b      	ldr	r0, [pc, #300]	; (2e134 <z_impl_k_poll+0x1e8>)
   2e008:	f001 fe32 	bl	2fc70 <printk>
   2e00c:	494f      	ldr	r1, [pc, #316]	; (2e14c <z_impl_k_poll+0x200>)
   2e00e:	4852      	ldr	r0, [pc, #328]	; (2e158 <z_impl_k_poll+0x20c>)
   2e010:	f001 fe2e 	bl	2fc70 <printk>
   2e014:	2181      	movs	r1, #129	; 0x81
   2e016:	484e      	ldr	r0, [pc, #312]	; (2e150 <z_impl_k_poll+0x204>)
   2e018:	f002 f910 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2e01c:	484b      	ldr	r0, [pc, #300]	; (2e14c <z_impl_k_poll+0x200>)
   2e01e:	f7fc fc15 	bl	2a84c <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   2e022:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   2e026:	b9fb      	cbnz	r3, 2e068 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   2e028:	4620      	mov	r0, r4
   2e02a:	464a      	mov	r2, r9
   2e02c:	4641      	mov	r1, r8
   2e02e:	f7ff fcd9 	bl	2d9e4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e032:	4846      	ldr	r0, [pc, #280]	; (2e14c <z_impl_k_poll+0x200>)
   2e034:	f7fc fbfc 	bl	2a830 <z_spin_unlock_valid>
   2e038:	b968      	cbnz	r0, 2e056 <z_impl_k_poll+0x10a>
   2e03a:	23ac      	movs	r3, #172	; 0xac
   2e03c:	4a44      	ldr	r2, [pc, #272]	; (2e150 <z_impl_k_poll+0x204>)
   2e03e:	4947      	ldr	r1, [pc, #284]	; (2e15c <z_impl_k_poll+0x210>)
   2e040:	483c      	ldr	r0, [pc, #240]	; (2e134 <z_impl_k_poll+0x1e8>)
   2e042:	f001 fe15 	bl	2fc70 <printk>
   2e046:	4941      	ldr	r1, [pc, #260]	; (2e14c <z_impl_k_poll+0x200>)
   2e048:	4845      	ldr	r0, [pc, #276]	; (2e160 <z_impl_k_poll+0x214>)
   2e04a:	f001 fe11 	bl	2fc70 <printk>
   2e04e:	21ac      	movs	r1, #172	; 0xac
   2e050:	483f      	ldr	r0, [pc, #252]	; (2e150 <z_impl_k_poll+0x204>)
   2e052:	f002 f8f3 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2e056:	f389 8811 	msr	BASEPRI, r9
   2e05a:	f3bf 8f6f 	isb	sy
		return 0;
   2e05e:	2500      	movs	r5, #0
}
   2e060:	4628      	mov	r0, r5
   2e062:	b003      	add	sp, #12
   2e064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   2e068:	2300      	movs	r3, #0
   2e06a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2e06e:	ea56 0307 	orrs.w	r3, r6, r7
   2e072:	d118      	bne.n	2e0a6 <z_impl_k_poll+0x15a>
   2e074:	4835      	ldr	r0, [pc, #212]	; (2e14c <z_impl_k_poll+0x200>)
   2e076:	f7fc fbdb 	bl	2a830 <z_spin_unlock_valid>
   2e07a:	b968      	cbnz	r0, 2e098 <z_impl_k_poll+0x14c>
   2e07c:	23ac      	movs	r3, #172	; 0xac
   2e07e:	4a34      	ldr	r2, [pc, #208]	; (2e150 <z_impl_k_poll+0x204>)
   2e080:	4936      	ldr	r1, [pc, #216]	; (2e15c <z_impl_k_poll+0x210>)
   2e082:	482c      	ldr	r0, [pc, #176]	; (2e134 <z_impl_k_poll+0x1e8>)
   2e084:	f001 fdf4 	bl	2fc70 <printk>
   2e088:	4930      	ldr	r1, [pc, #192]	; (2e14c <z_impl_k_poll+0x200>)
   2e08a:	4835      	ldr	r0, [pc, #212]	; (2e160 <z_impl_k_poll+0x214>)
   2e08c:	f001 fdf0 	bl	2fc70 <printk>
   2e090:	21ac      	movs	r1, #172	; 0xac
   2e092:	482f      	ldr	r0, [pc, #188]	; (2e150 <z_impl_k_poll+0x204>)
   2e094:	f002 f8d2 	bl	3023c <assert_post_action>
   2e098:	f389 8811 	msr	BASEPRI, r9
   2e09c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2e0a0:	f06f 050a 	mvn.w	r5, #10
   2e0a4:	e7dc      	b.n	2e060 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2e0a6:	4649      	mov	r1, r9
   2e0a8:	e9cd 6700 	strd	r6, r7, [sp]
   2e0ac:	4a2d      	ldr	r2, [pc, #180]	; (2e164 <z_impl_k_poll+0x218>)
   2e0ae:	4827      	ldr	r0, [pc, #156]	; (2e14c <z_impl_k_poll+0x200>)
   2e0b0:	f7fe f9a0 	bl	2c3f4 <z_pend_curr>
   2e0b4:	4605      	mov	r5, r0
	__asm__ volatile(
   2e0b6:	f04f 0320 	mov.w	r3, #32
   2e0ba:	f3ef 8611 	mrs	r6, BASEPRI
   2e0be:	f383 8811 	msr	BASEPRI, r3
   2e0c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e0c6:	4821      	ldr	r0, [pc, #132]	; (2e14c <z_impl_k_poll+0x200>)
   2e0c8:	f7fc fba4 	bl	2a814 <z_spin_lock_valid>
   2e0cc:	b968      	cbnz	r0, 2e0ea <z_impl_k_poll+0x19e>
   2e0ce:	2381      	movs	r3, #129	; 0x81
   2e0d0:	4a1f      	ldr	r2, [pc, #124]	; (2e150 <z_impl_k_poll+0x204>)
   2e0d2:	4920      	ldr	r1, [pc, #128]	; (2e154 <z_impl_k_poll+0x208>)
   2e0d4:	4817      	ldr	r0, [pc, #92]	; (2e134 <z_impl_k_poll+0x1e8>)
   2e0d6:	f001 fdcb 	bl	2fc70 <printk>
   2e0da:	491c      	ldr	r1, [pc, #112]	; (2e14c <z_impl_k_poll+0x200>)
   2e0dc:	481e      	ldr	r0, [pc, #120]	; (2e158 <z_impl_k_poll+0x20c>)
   2e0de:	f001 fdc7 	bl	2fc70 <printk>
   2e0e2:	2181      	movs	r1, #129	; 0x81
   2e0e4:	481a      	ldr	r0, [pc, #104]	; (2e150 <z_impl_k_poll+0x204>)
   2e0e6:	f002 f8a9 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2e0ea:	4818      	ldr	r0, [pc, #96]	; (2e14c <z_impl_k_poll+0x200>)
   2e0ec:	f7fc fbae 	bl	2a84c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2e0f0:	4620      	mov	r0, r4
   2e0f2:	4632      	mov	r2, r6
   2e0f4:	4641      	mov	r1, r8
   2e0f6:	f7ff fc75 	bl	2d9e4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e0fa:	4814      	ldr	r0, [pc, #80]	; (2e14c <z_impl_k_poll+0x200>)
   2e0fc:	f7fc fb98 	bl	2a830 <z_spin_unlock_valid>
   2e100:	b968      	cbnz	r0, 2e11e <z_impl_k_poll+0x1d2>
   2e102:	23ac      	movs	r3, #172	; 0xac
   2e104:	4a12      	ldr	r2, [pc, #72]	; (2e150 <z_impl_k_poll+0x204>)
   2e106:	4915      	ldr	r1, [pc, #84]	; (2e15c <z_impl_k_poll+0x210>)
   2e108:	480a      	ldr	r0, [pc, #40]	; (2e134 <z_impl_k_poll+0x1e8>)
   2e10a:	f001 fdb1 	bl	2fc70 <printk>
   2e10e:	490f      	ldr	r1, [pc, #60]	; (2e14c <z_impl_k_poll+0x200>)
   2e110:	4813      	ldr	r0, [pc, #76]	; (2e160 <z_impl_k_poll+0x214>)
   2e112:	f001 fdad 	bl	2fc70 <printk>
   2e116:	21ac      	movs	r1, #172	; 0xac
   2e118:	480d      	ldr	r0, [pc, #52]	; (2e150 <z_impl_k_poll+0x204>)
   2e11a:	f002 f88f 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2e11e:	f386 8811 	msr	BASEPRI, r6
   2e122:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2e126:	e79b      	b.n	2e060 <z_impl_k_poll+0x114>
   2e128:	20016cd0 	.word	0x20016cd0
   2e12c:	00040799 	.word	0x00040799
   2e130:	00040b92 	.word	0x00040b92
   2e134:	0003a56b 	.word	0x0003a56b
   2e138:	0003aba7 	.word	0x0003aba7
   2e13c:	00040d86 	.word	0x00040d86
   2e140:	00040d9c 	.word	0x00040d9c
   2e144:	00040dab 	.word	0x00040dab
   2e148:	00040dbb 	.word	0x00040dbb
   2e14c:	20016d2c 	.word	0x20016d2c
   2e150:	0003a62b 	.word	0x0003a62b
   2e154:	0003a67d 	.word	0x0003a67d
   2e158:	0003a692 	.word	0x0003a692
   2e15c:	0003a651 	.word	0x0003a651
   2e160:	0003a668 	.word	0x0003a668
   2e164:	20014a20 	.word	0x20014a20

0002e168 <z_impl_k_poll_signal_raise>:
{
   2e168:	b570      	push	{r4, r5, r6, lr}
   2e16a:	4604      	mov	r4, r0
   2e16c:	460d      	mov	r5, r1
	__asm__ volatile(
   2e16e:	f04f 0320 	mov.w	r3, #32
   2e172:	f3ef 8611 	mrs	r6, BASEPRI
   2e176:	f383 8811 	msr	BASEPRI, r3
   2e17a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e17e:	4821      	ldr	r0, [pc, #132]	; (2e204 <z_impl_k_poll_signal_raise+0x9c>)
   2e180:	f7fc fb48 	bl	2a814 <z_spin_lock_valid>
   2e184:	b968      	cbnz	r0, 2e1a2 <z_impl_k_poll_signal_raise+0x3a>
   2e186:	2381      	movs	r3, #129	; 0x81
   2e188:	4a1f      	ldr	r2, [pc, #124]	; (2e208 <z_impl_k_poll_signal_raise+0xa0>)
   2e18a:	4920      	ldr	r1, [pc, #128]	; (2e20c <z_impl_k_poll_signal_raise+0xa4>)
   2e18c:	4820      	ldr	r0, [pc, #128]	; (2e210 <z_impl_k_poll_signal_raise+0xa8>)
   2e18e:	f001 fd6f 	bl	2fc70 <printk>
   2e192:	491c      	ldr	r1, [pc, #112]	; (2e204 <z_impl_k_poll_signal_raise+0x9c>)
   2e194:	481f      	ldr	r0, [pc, #124]	; (2e214 <z_impl_k_poll_signal_raise+0xac>)
   2e196:	f001 fd6b 	bl	2fc70 <printk>
   2e19a:	2181      	movs	r1, #129	; 0x81
   2e19c:	481a      	ldr	r0, [pc, #104]	; (2e208 <z_impl_k_poll_signal_raise+0xa0>)
   2e19e:	f002 f84d 	bl	3023c <assert_post_action>
	z_spin_lock_set_owner(l);
   2e1a2:	4818      	ldr	r0, [pc, #96]	; (2e204 <z_impl_k_poll_signal_raise+0x9c>)
   2e1a4:	f7fc fb52 	bl	2a84c <z_spin_lock_set_owner>
	sig->signaled = 1U;
   2e1a8:	2101      	movs	r1, #1
	return list->head == list;
   2e1aa:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   2e1ac:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2e1ae:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   2e1b0:	60a1      	str	r1, [r4, #8]
   2e1b2:	d117      	bne.n	2e1e4 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e1b4:	4813      	ldr	r0, [pc, #76]	; (2e204 <z_impl_k_poll_signal_raise+0x9c>)
   2e1b6:	f7fc fb3b 	bl	2a830 <z_spin_unlock_valid>
   2e1ba:	b968      	cbnz	r0, 2e1d8 <z_impl_k_poll_signal_raise+0x70>
   2e1bc:	23ac      	movs	r3, #172	; 0xac
   2e1be:	4a12      	ldr	r2, [pc, #72]	; (2e208 <z_impl_k_poll_signal_raise+0xa0>)
   2e1c0:	4915      	ldr	r1, [pc, #84]	; (2e218 <z_impl_k_poll_signal_raise+0xb0>)
   2e1c2:	4813      	ldr	r0, [pc, #76]	; (2e210 <z_impl_k_poll_signal_raise+0xa8>)
   2e1c4:	f001 fd54 	bl	2fc70 <printk>
   2e1c8:	490e      	ldr	r1, [pc, #56]	; (2e204 <z_impl_k_poll_signal_raise+0x9c>)
   2e1ca:	4814      	ldr	r0, [pc, #80]	; (2e21c <z_impl_k_poll_signal_raise+0xb4>)
   2e1cc:	f001 fd50 	bl	2fc70 <printk>
   2e1d0:	21ac      	movs	r1, #172	; 0xac
   2e1d2:	480d      	ldr	r0, [pc, #52]	; (2e208 <z_impl_k_poll_signal_raise+0xa0>)
   2e1d4:	f002 f832 	bl	3023c <assert_post_action>
	__asm__ volatile(
   2e1d8:	f386 8811 	msr	BASEPRI, r6
   2e1dc:	f3bf 8f6f 	isb	sy
		return 0;
   2e1e0:	2400      	movs	r4, #0
   2e1e2:	e00d      	b.n	2e200 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   2e1e4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2e1e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2e1ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2e1ec:	2300      	movs	r3, #0
	node->prev = NULL;
   2e1ee:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2e1f2:	f7ff fde7 	bl	2ddc4 <signal_poll_event>
	z_reschedule(&lock, key);
   2e1f6:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2e1f8:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2e1fa:	4802      	ldr	r0, [pc, #8]	; (2e204 <z_impl_k_poll_signal_raise+0x9c>)
   2e1fc:	f7fd febc 	bl	2bf78 <z_reschedule>
}
   2e200:	4620      	mov	r0, r4
   2e202:	bd70      	pop	{r4, r5, r6, pc}
   2e204:	20016d2c 	.word	0x20016d2c
   2e208:	0003a62b 	.word	0x0003a62b
   2e20c:	0003a67d 	.word	0x0003a67d
   2e210:	0003a56b 	.word	0x0003a56b
   2e214:	0003a692 	.word	0x0003a692
   2e218:	0003a651 	.word	0x0003a651
   2e21c:	0003a668 	.word	0x0003a668

0002e220 <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2e220:	2304      	movs	r3, #4
   2e222:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2e224:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   2e228:	4606      	mov	r6, r0
   2e22a:	460d      	mov	r5, r1
   2e22c:	d20a      	bcs.n	2e244 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2e22e:	f04f 0800 	mov.w	r8, #0
   2e232:	f04f 0900 	mov.w	r9, #0
   2e236:	4319      	orrs	r1, r3
   2e238:	e9cd 8900 	strd	r8, r9, [sp]
   2e23c:	f7fb ff9e 	bl	2a17c <k_heap_aligned_alloc>
	if (mem == NULL) {
   2e240:	4604      	mov	r4, r0
   2e242:	b920      	cbnz	r0, 2e24e <z_heap_aligned_alloc+0x2e>
		return NULL;
   2e244:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   2e246:	4620      	mov	r0, r4
   2e248:	b002      	add	sp, #8
   2e24a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   2e24e:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   2e252:	2d00      	cmp	r5, #0
   2e254:	d0f7      	beq.n	2e246 <z_heap_aligned_alloc+0x26>
   2e256:	1e6b      	subs	r3, r5, #1
   2e258:	421c      	tst	r4, r3
   2e25a:	d0f4      	beq.n	2e246 <z_heap_aligned_alloc+0x26>
   2e25c:	2325      	movs	r3, #37	; 0x25
   2e25e:	4a07      	ldr	r2, [pc, #28]	; (2e27c <z_heap_aligned_alloc+0x5c>)
   2e260:	4907      	ldr	r1, [pc, #28]	; (2e280 <z_heap_aligned_alloc+0x60>)
   2e262:	4808      	ldr	r0, [pc, #32]	; (2e284 <z_heap_aligned_alloc+0x64>)
   2e264:	f001 fd04 	bl	2fc70 <printk>
   2e268:	4621      	mov	r1, r4
   2e26a:	462a      	mov	r2, r5
   2e26c:	4806      	ldr	r0, [pc, #24]	; (2e288 <z_heap_aligned_alloc+0x68>)
   2e26e:	f001 fcff 	bl	2fc70 <printk>
   2e272:	2125      	movs	r1, #37	; 0x25
   2e274:	4801      	ldr	r0, [pc, #4]	; (2e27c <z_heap_aligned_alloc+0x5c>)
   2e276:	f001 ffe1 	bl	3023c <assert_post_action>
   2e27a:	e7e4      	b.n	2e246 <z_heap_aligned_alloc+0x26>
   2e27c:	00040dc8 	.word	0x00040dc8
   2e280:	00040dec 	.word	0x00040dec
   2e284:	0003a56b 	.word	0x0003a56b
   2e288:	00040e1e 	.word	0x00040e1e

0002e28c <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   2e28c:	2803      	cmp	r0, #3
{
   2e28e:	b538      	push	{r3, r4, r5, lr}
   2e290:	4604      	mov	r4, r0
   2e292:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   2e294:	d901      	bls.n	2e29a <k_aligned_alloc+0xe>
   2e296:	0783      	lsls	r3, r0, #30
   2e298:	d00c      	beq.n	2e2b4 <k_aligned_alloc+0x28>
   2e29a:	4912      	ldr	r1, [pc, #72]	; (2e2e4 <k_aligned_alloc+0x58>)
   2e29c:	2342      	movs	r3, #66	; 0x42
   2e29e:	4a12      	ldr	r2, [pc, #72]	; (2e2e8 <k_aligned_alloc+0x5c>)
   2e2a0:	4812      	ldr	r0, [pc, #72]	; (2e2ec <k_aligned_alloc+0x60>)
   2e2a2:	f001 fce5 	bl	2fc70 <printk>
   2e2a6:	4812      	ldr	r0, [pc, #72]	; (2e2f0 <k_aligned_alloc+0x64>)
   2e2a8:	f001 fce2 	bl	2fc70 <printk>
   2e2ac:	2142      	movs	r1, #66	; 0x42
   2e2ae:	480e      	ldr	r0, [pc, #56]	; (2e2e8 <k_aligned_alloc+0x5c>)
   2e2b0:	f001 ffc4 	bl	3023c <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   2e2b4:	1e63      	subs	r3, r4, #1
   2e2b6:	4223      	tst	r3, r4
   2e2b8:	d00c      	beq.n	2e2d4 <k_aligned_alloc+0x48>
   2e2ba:	490e      	ldr	r1, [pc, #56]	; (2e2f4 <k_aligned_alloc+0x68>)
   2e2bc:	2346      	movs	r3, #70	; 0x46
   2e2be:	4a0a      	ldr	r2, [pc, #40]	; (2e2e8 <k_aligned_alloc+0x5c>)
   2e2c0:	480a      	ldr	r0, [pc, #40]	; (2e2ec <k_aligned_alloc+0x60>)
   2e2c2:	f001 fcd5 	bl	2fc70 <printk>
   2e2c6:	480c      	ldr	r0, [pc, #48]	; (2e2f8 <k_aligned_alloc+0x6c>)
   2e2c8:	f001 fcd2 	bl	2fc70 <printk>
   2e2cc:	2146      	movs	r1, #70	; 0x46
   2e2ce:	4806      	ldr	r0, [pc, #24]	; (2e2e8 <k_aligned_alloc+0x5c>)
   2e2d0:	f001 ffb4 	bl	3023c <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2e2d4:	462a      	mov	r2, r5
   2e2d6:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   2e2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2e2dc:	4807      	ldr	r0, [pc, #28]	; (2e2fc <k_aligned_alloc+0x70>)
   2e2de:	f7ff bf9f 	b.w	2e220 <z_heap_aligned_alloc>
   2e2e2:	bf00      	nop
   2e2e4:	00040e46 	.word	0x00040e46
   2e2e8:	00040dc8 	.word	0x00040dc8
   2e2ec:	0003a56b 	.word	0x0003a56b
   2e2f0:	00040e83 	.word	0x00040e83
   2e2f4:	0003a7fb 	.word	0x0003a7fb
   2e2f8:	0003a816 	.word	0x0003a816
   2e2fc:	20014e40 	.word	0x20014e40

0002e300 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2e300:	b538      	push	{r3, r4, r5, lr}
   2e302:	4604      	mov	r4, r0
   2e304:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2e306:	f009 f882 	bl	3740e <k_is_in_isr>
   2e30a:	b950      	cbnz	r0, 2e322 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2e30c:	4b06      	ldr	r3, [pc, #24]	; (2e328 <z_thread_aligned_alloc+0x28>)
   2e30e:	689b      	ldr	r3, [r3, #8]
   2e310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2e312:	b143      	cbz	r3, 2e326 <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   2e314:	462a      	mov	r2, r5
   2e316:	4621      	mov	r1, r4
   2e318:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   2e31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2e31e:	f7ff bf7f 	b.w	2e220 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   2e322:	4b02      	ldr	r3, [pc, #8]	; (2e32c <z_thread_aligned_alloc+0x2c>)
   2e324:	e7f6      	b.n	2e314 <z_thread_aligned_alloc+0x14>
}
   2e326:	bd38      	pop	{r3, r4, r5, pc}
   2e328:	20016cd0 	.word	0x20016cd0
   2e32c:	20014e40 	.word	0x20014e40

0002e330 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2e330:	4a02      	ldr	r2, [pc, #8]	; (2e33c <boot_banner+0xc>)
   2e332:	4903      	ldr	r1, [pc, #12]	; (2e340 <boot_banner+0x10>)
   2e334:	4803      	ldr	r0, [pc, #12]	; (2e344 <boot_banner+0x14>)
   2e336:	f001 bc9b 	b.w	2fc70 <printk>
   2e33a:	bf00      	nop
   2e33c:	0003aba9 	.word	0x0003aba9
   2e340:	00040eb0 	.word	0x00040eb0
   2e344:	00040ed5 	.word	0x00040ed5

0002e348 <fabs>:
   2e348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2e34c:	4770      	bx	lr
   2e34e:	bf00      	nop

0002e350 <malloc>:
   2e350:	4b02      	ldr	r3, [pc, #8]	; (2e35c <malloc+0xc>)
   2e352:	4601      	mov	r1, r0
   2e354:	6818      	ldr	r0, [r3, #0]
   2e356:	f000 b859 	b.w	2e40c <_malloc_r>
   2e35a:	bf00      	nop
   2e35c:	20014a28 	.word	0x20014a28

0002e360 <free>:
   2e360:	4b02      	ldr	r3, [pc, #8]	; (2e36c <free+0xc>)
   2e362:	4601      	mov	r1, r0
   2e364:	6818      	ldr	r0, [r3, #0]
   2e366:	f000 b803 	b.w	2e370 <_free_r>
   2e36a:	bf00      	nop
   2e36c:	20014a28 	.word	0x20014a28

0002e370 <_free_r>:
   2e370:	b538      	push	{r3, r4, r5, lr}
   2e372:	4605      	mov	r5, r0
   2e374:	2900      	cmp	r1, #0
   2e376:	d045      	beq.n	2e404 <_free_r+0x94>
   2e378:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2e37c:	1f0c      	subs	r4, r1, #4
   2e37e:	2b00      	cmp	r3, #0
   2e380:	bfb8      	it	lt
   2e382:	18e4      	addlt	r4, r4, r3
   2e384:	f000 fffc 	bl	2f380 <__malloc_lock>
   2e388:	4a1f      	ldr	r2, [pc, #124]	; (2e408 <_free_r+0x98>)
   2e38a:	6813      	ldr	r3, [r2, #0]
   2e38c:	4610      	mov	r0, r2
   2e38e:	b933      	cbnz	r3, 2e39e <_free_r+0x2e>
   2e390:	6063      	str	r3, [r4, #4]
   2e392:	6014      	str	r4, [r2, #0]
   2e394:	4628      	mov	r0, r5
   2e396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e39a:	f000 bff7 	b.w	2f38c <__malloc_unlock>
   2e39e:	42a3      	cmp	r3, r4
   2e3a0:	d90b      	bls.n	2e3ba <_free_r+0x4a>
   2e3a2:	6821      	ldr	r1, [r4, #0]
   2e3a4:	1862      	adds	r2, r4, r1
   2e3a6:	4293      	cmp	r3, r2
   2e3a8:	bf02      	ittt	eq
   2e3aa:	681a      	ldreq	r2, [r3, #0]
   2e3ac:	685b      	ldreq	r3, [r3, #4]
   2e3ae:	1852      	addeq	r2, r2, r1
   2e3b0:	6063      	str	r3, [r4, #4]
   2e3b2:	bf08      	it	eq
   2e3b4:	6022      	streq	r2, [r4, #0]
   2e3b6:	6004      	str	r4, [r0, #0]
   2e3b8:	e7ec      	b.n	2e394 <_free_r+0x24>
   2e3ba:	461a      	mov	r2, r3
   2e3bc:	685b      	ldr	r3, [r3, #4]
   2e3be:	b10b      	cbz	r3, 2e3c4 <_free_r+0x54>
   2e3c0:	42a3      	cmp	r3, r4
   2e3c2:	d9fa      	bls.n	2e3ba <_free_r+0x4a>
   2e3c4:	6811      	ldr	r1, [r2, #0]
   2e3c6:	1850      	adds	r0, r2, r1
   2e3c8:	42a0      	cmp	r0, r4
   2e3ca:	d10b      	bne.n	2e3e4 <_free_r+0x74>
   2e3cc:	6820      	ldr	r0, [r4, #0]
   2e3ce:	4401      	add	r1, r0
   2e3d0:	1850      	adds	r0, r2, r1
   2e3d2:	6011      	str	r1, [r2, #0]
   2e3d4:	4283      	cmp	r3, r0
   2e3d6:	d1dd      	bne.n	2e394 <_free_r+0x24>
   2e3d8:	6818      	ldr	r0, [r3, #0]
   2e3da:	685b      	ldr	r3, [r3, #4]
   2e3dc:	4401      	add	r1, r0
   2e3de:	6053      	str	r3, [r2, #4]
   2e3e0:	6011      	str	r1, [r2, #0]
   2e3e2:	e7d7      	b.n	2e394 <_free_r+0x24>
   2e3e4:	d902      	bls.n	2e3ec <_free_r+0x7c>
   2e3e6:	230c      	movs	r3, #12
   2e3e8:	602b      	str	r3, [r5, #0]
   2e3ea:	e7d3      	b.n	2e394 <_free_r+0x24>
   2e3ec:	6820      	ldr	r0, [r4, #0]
   2e3ee:	1821      	adds	r1, r4, r0
   2e3f0:	428b      	cmp	r3, r1
   2e3f2:	bf02      	ittt	eq
   2e3f4:	6819      	ldreq	r1, [r3, #0]
   2e3f6:	685b      	ldreq	r3, [r3, #4]
   2e3f8:	1809      	addeq	r1, r1, r0
   2e3fa:	6063      	str	r3, [r4, #4]
   2e3fc:	bf08      	it	eq
   2e3fe:	6021      	streq	r1, [r4, #0]
   2e400:	6054      	str	r4, [r2, #4]
   2e402:	e7c7      	b.n	2e394 <_free_r+0x24>
   2e404:	bd38      	pop	{r3, r4, r5, pc}
   2e406:	bf00      	nop
   2e408:	2001ad30 	.word	0x2001ad30

0002e40c <_malloc_r>:
   2e40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e40e:	1ccd      	adds	r5, r1, #3
   2e410:	4606      	mov	r6, r0
   2e412:	f025 0503 	bic.w	r5, r5, #3
   2e416:	3508      	adds	r5, #8
   2e418:	2d0c      	cmp	r5, #12
   2e41a:	bf38      	it	cc
   2e41c:	250c      	movcc	r5, #12
   2e41e:	2d00      	cmp	r5, #0
   2e420:	db01      	blt.n	2e426 <_malloc_r+0x1a>
   2e422:	42a9      	cmp	r1, r5
   2e424:	d903      	bls.n	2e42e <_malloc_r+0x22>
   2e426:	230c      	movs	r3, #12
   2e428:	6033      	str	r3, [r6, #0]
   2e42a:	2000      	movs	r0, #0
   2e42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e42e:	f000 ffa7 	bl	2f380 <__malloc_lock>
   2e432:	4921      	ldr	r1, [pc, #132]	; (2e4b8 <_malloc_r+0xac>)
   2e434:	680a      	ldr	r2, [r1, #0]
   2e436:	4614      	mov	r4, r2
   2e438:	b99c      	cbnz	r4, 2e462 <_malloc_r+0x56>
   2e43a:	4f20      	ldr	r7, [pc, #128]	; (2e4bc <_malloc_r+0xb0>)
   2e43c:	683b      	ldr	r3, [r7, #0]
   2e43e:	b923      	cbnz	r3, 2e44a <_malloc_r+0x3e>
   2e440:	4621      	mov	r1, r4
   2e442:	4630      	mov	r0, r6
   2e444:	f000 fb94 	bl	2eb70 <_sbrk_r>
   2e448:	6038      	str	r0, [r7, #0]
   2e44a:	4629      	mov	r1, r5
   2e44c:	4630      	mov	r0, r6
   2e44e:	f000 fb8f 	bl	2eb70 <_sbrk_r>
   2e452:	1c43      	adds	r3, r0, #1
   2e454:	d123      	bne.n	2e49e <_malloc_r+0x92>
   2e456:	230c      	movs	r3, #12
   2e458:	4630      	mov	r0, r6
   2e45a:	6033      	str	r3, [r6, #0]
   2e45c:	f000 ff96 	bl	2f38c <__malloc_unlock>
   2e460:	e7e3      	b.n	2e42a <_malloc_r+0x1e>
   2e462:	6823      	ldr	r3, [r4, #0]
   2e464:	1b5b      	subs	r3, r3, r5
   2e466:	d417      	bmi.n	2e498 <_malloc_r+0x8c>
   2e468:	2b0b      	cmp	r3, #11
   2e46a:	d903      	bls.n	2e474 <_malloc_r+0x68>
   2e46c:	6023      	str	r3, [r4, #0]
   2e46e:	441c      	add	r4, r3
   2e470:	6025      	str	r5, [r4, #0]
   2e472:	e004      	b.n	2e47e <_malloc_r+0x72>
   2e474:	6863      	ldr	r3, [r4, #4]
   2e476:	42a2      	cmp	r2, r4
   2e478:	bf0c      	ite	eq
   2e47a:	600b      	streq	r3, [r1, #0]
   2e47c:	6053      	strne	r3, [r2, #4]
   2e47e:	4630      	mov	r0, r6
   2e480:	f000 ff84 	bl	2f38c <__malloc_unlock>
   2e484:	f104 000b 	add.w	r0, r4, #11
   2e488:	1d23      	adds	r3, r4, #4
   2e48a:	f020 0007 	bic.w	r0, r0, #7
   2e48e:	1ac2      	subs	r2, r0, r3
   2e490:	d0cc      	beq.n	2e42c <_malloc_r+0x20>
   2e492:	1a1b      	subs	r3, r3, r0
   2e494:	50a3      	str	r3, [r4, r2]
   2e496:	e7c9      	b.n	2e42c <_malloc_r+0x20>
   2e498:	4622      	mov	r2, r4
   2e49a:	6864      	ldr	r4, [r4, #4]
   2e49c:	e7cc      	b.n	2e438 <_malloc_r+0x2c>
   2e49e:	1cc4      	adds	r4, r0, #3
   2e4a0:	f024 0403 	bic.w	r4, r4, #3
   2e4a4:	42a0      	cmp	r0, r4
   2e4a6:	d0e3      	beq.n	2e470 <_malloc_r+0x64>
   2e4a8:	1a21      	subs	r1, r4, r0
   2e4aa:	4630      	mov	r0, r6
   2e4ac:	f000 fb60 	bl	2eb70 <_sbrk_r>
   2e4b0:	3001      	adds	r0, #1
   2e4b2:	d1dd      	bne.n	2e470 <_malloc_r+0x64>
   2e4b4:	e7cf      	b.n	2e456 <_malloc_r+0x4a>
   2e4b6:	bf00      	nop
   2e4b8:	2001ad30 	.word	0x2001ad30
   2e4bc:	2001ad34 	.word	0x2001ad34

0002e4c0 <_printf_float>:
   2e4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e4c4:	b091      	sub	sp, #68	; 0x44
   2e4c6:	460c      	mov	r4, r1
   2e4c8:	4616      	mov	r6, r2
   2e4ca:	461f      	mov	r7, r3
   2e4cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   2e4d0:	4605      	mov	r5, r0
   2e4d2:	f000 ff51 	bl	2f378 <_localeconv_r>
   2e4d6:	6803      	ldr	r3, [r0, #0]
   2e4d8:	4618      	mov	r0, r3
   2e4da:	9309      	str	r3, [sp, #36]	; 0x24
   2e4dc:	f7e3 f810 	bl	11500 <strlen>
   2e4e0:	2300      	movs	r3, #0
   2e4e2:	900a      	str	r0, [sp, #40]	; 0x28
   2e4e4:	930e      	str	r3, [sp, #56]	; 0x38
   2e4e6:	f8d8 3000 	ldr.w	r3, [r8]
   2e4ea:	f894 9018 	ldrb.w	r9, [r4, #24]
   2e4ee:	3307      	adds	r3, #7
   2e4f0:	f8d4 b000 	ldr.w	fp, [r4]
   2e4f4:	f023 0307 	bic.w	r3, r3, #7
   2e4f8:	f103 0208 	add.w	r2, r3, #8
   2e4fc:	f8c8 2000 	str.w	r2, [r8]
   2e500:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e504:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2e508:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   2e50c:	f04f 32ff 	mov.w	r2, #4294967295
   2e510:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   2e514:	4640      	mov	r0, r8
   2e516:	930b      	str	r3, [sp, #44]	; 0x2c
   2e518:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2e51a:	4b9b      	ldr	r3, [pc, #620]	; (2e788 <_printf_float+0x2c8>)
   2e51c:	f7e2 fae6 	bl	10aec <__aeabi_dcmpun>
   2e520:	bb70      	cbnz	r0, 2e580 <_printf_float+0xc0>
   2e522:	f04f 32ff 	mov.w	r2, #4294967295
   2e526:	4b98      	ldr	r3, [pc, #608]	; (2e788 <_printf_float+0x2c8>)
   2e528:	4640      	mov	r0, r8
   2e52a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2e52c:	f7e2 fac0 	bl	10ab0 <__aeabi_dcmple>
   2e530:	bb30      	cbnz	r0, 2e580 <_printf_float+0xc0>
   2e532:	2200      	movs	r2, #0
   2e534:	2300      	movs	r3, #0
   2e536:	4640      	mov	r0, r8
   2e538:	4651      	mov	r1, sl
   2e53a:	f7e2 faaf 	bl	10a9c <__aeabi_dcmplt>
   2e53e:	b110      	cbz	r0, 2e546 <_printf_float+0x86>
   2e540:	232d      	movs	r3, #45	; 0x2d
   2e542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2e546:	4b91      	ldr	r3, [pc, #580]	; (2e78c <_printf_float+0x2cc>)
   2e548:	4891      	ldr	r0, [pc, #580]	; (2e790 <_printf_float+0x2d0>)
   2e54a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2e54e:	bf94      	ite	ls
   2e550:	4698      	movls	r8, r3
   2e552:	4680      	movhi	r8, r0
   2e554:	2303      	movs	r3, #3
   2e556:	f04f 0a00 	mov.w	sl, #0
   2e55a:	6123      	str	r3, [r4, #16]
   2e55c:	f02b 0304 	bic.w	r3, fp, #4
   2e560:	6023      	str	r3, [r4, #0]
   2e562:	4633      	mov	r3, r6
   2e564:	aa0f      	add	r2, sp, #60	; 0x3c
   2e566:	4621      	mov	r1, r4
   2e568:	4628      	mov	r0, r5
   2e56a:	9700      	str	r7, [sp, #0]
   2e56c:	f009 f9cf 	bl	3790e <_printf_common>
   2e570:	3001      	adds	r0, #1
   2e572:	f040 808f 	bne.w	2e694 <_printf_float+0x1d4>
   2e576:	f04f 30ff 	mov.w	r0, #4294967295
   2e57a:	b011      	add	sp, #68	; 0x44
   2e57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e580:	4642      	mov	r2, r8
   2e582:	4653      	mov	r3, sl
   2e584:	4640      	mov	r0, r8
   2e586:	4651      	mov	r1, sl
   2e588:	f7e2 fab0 	bl	10aec <__aeabi_dcmpun>
   2e58c:	b140      	cbz	r0, 2e5a0 <_printf_float+0xe0>
   2e58e:	f1ba 0f00 	cmp.w	sl, #0
   2e592:	4880      	ldr	r0, [pc, #512]	; (2e794 <_printf_float+0x2d4>)
   2e594:	bfbc      	itt	lt
   2e596:	232d      	movlt	r3, #45	; 0x2d
   2e598:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2e59c:	4b7e      	ldr	r3, [pc, #504]	; (2e798 <_printf_float+0x2d8>)
   2e59e:	e7d4      	b.n	2e54a <_printf_float+0x8a>
   2e5a0:	6863      	ldr	r3, [r4, #4]
   2e5a2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   2e5a6:	1c5a      	adds	r2, r3, #1
   2e5a8:	d142      	bne.n	2e630 <_printf_float+0x170>
   2e5aa:	2306      	movs	r3, #6
   2e5ac:	6063      	str	r3, [r4, #4]
   2e5ae:	2200      	movs	r2, #0
   2e5b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2e5b4:	4628      	mov	r0, r5
   2e5b6:	910b      	str	r1, [sp, #44]	; 0x2c
   2e5b8:	9206      	str	r2, [sp, #24]
   2e5ba:	aa0e      	add	r2, sp, #56	; 0x38
   2e5bc:	6023      	str	r3, [r4, #0]
   2e5be:	e9cd 9204 	strd	r9, r2, [sp, #16]
   2e5c2:	aa0d      	add	r2, sp, #52	; 0x34
   2e5c4:	9203      	str	r2, [sp, #12]
   2e5c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2e5ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2e5ce:	6863      	ldr	r3, [r4, #4]
   2e5d0:	4642      	mov	r2, r8
   2e5d2:	9300      	str	r3, [sp, #0]
   2e5d4:	4653      	mov	r3, sl
   2e5d6:	f009 f8fc 	bl	377d2 <__cvt>
   2e5da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2e5dc:	4680      	mov	r8, r0
   2e5de:	2947      	cmp	r1, #71	; 0x47
   2e5e0:	990d      	ldr	r1, [sp, #52]	; 0x34
   2e5e2:	d108      	bne.n	2e5f6 <_printf_float+0x136>
   2e5e4:	1cc8      	adds	r0, r1, #3
   2e5e6:	db02      	blt.n	2e5ee <_printf_float+0x12e>
   2e5e8:	6863      	ldr	r3, [r4, #4]
   2e5ea:	4299      	cmp	r1, r3
   2e5ec:	dd40      	ble.n	2e670 <_printf_float+0x1b0>
   2e5ee:	f1a9 0902 	sub.w	r9, r9, #2
   2e5f2:	fa5f f989 	uxtb.w	r9, r9
   2e5f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2e5fa:	d81f      	bhi.n	2e63c <_printf_float+0x17c>
   2e5fc:	3901      	subs	r1, #1
   2e5fe:	464a      	mov	r2, r9
   2e600:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2e604:	910d      	str	r1, [sp, #52]	; 0x34
   2e606:	f009 f944 	bl	37892 <__exponent>
   2e60a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2e60c:	4682      	mov	sl, r0
   2e60e:	1813      	adds	r3, r2, r0
   2e610:	2a01      	cmp	r2, #1
   2e612:	6123      	str	r3, [r4, #16]
   2e614:	dc02      	bgt.n	2e61c <_printf_float+0x15c>
   2e616:	6822      	ldr	r2, [r4, #0]
   2e618:	07d2      	lsls	r2, r2, #31
   2e61a:	d501      	bpl.n	2e620 <_printf_float+0x160>
   2e61c:	3301      	adds	r3, #1
   2e61e:	6123      	str	r3, [r4, #16]
   2e620:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2e624:	2b00      	cmp	r3, #0
   2e626:	d09c      	beq.n	2e562 <_printf_float+0xa2>
   2e628:	232d      	movs	r3, #45	; 0x2d
   2e62a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2e62e:	e798      	b.n	2e562 <_printf_float+0xa2>
   2e630:	2947      	cmp	r1, #71	; 0x47
   2e632:	d1bc      	bne.n	2e5ae <_printf_float+0xee>
   2e634:	2b00      	cmp	r3, #0
   2e636:	d1ba      	bne.n	2e5ae <_printf_float+0xee>
   2e638:	2301      	movs	r3, #1
   2e63a:	e7b7      	b.n	2e5ac <_printf_float+0xec>
   2e63c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   2e640:	d118      	bne.n	2e674 <_printf_float+0x1b4>
   2e642:	2900      	cmp	r1, #0
   2e644:	6863      	ldr	r3, [r4, #4]
   2e646:	dd0b      	ble.n	2e660 <_printf_float+0x1a0>
   2e648:	6121      	str	r1, [r4, #16]
   2e64a:	b913      	cbnz	r3, 2e652 <_printf_float+0x192>
   2e64c:	6822      	ldr	r2, [r4, #0]
   2e64e:	07d0      	lsls	r0, r2, #31
   2e650:	d502      	bpl.n	2e658 <_printf_float+0x198>
   2e652:	3301      	adds	r3, #1
   2e654:	440b      	add	r3, r1
   2e656:	6123      	str	r3, [r4, #16]
   2e658:	f04f 0a00 	mov.w	sl, #0
   2e65c:	65a1      	str	r1, [r4, #88]	; 0x58
   2e65e:	e7df      	b.n	2e620 <_printf_float+0x160>
   2e660:	b913      	cbnz	r3, 2e668 <_printf_float+0x1a8>
   2e662:	6822      	ldr	r2, [r4, #0]
   2e664:	07d2      	lsls	r2, r2, #31
   2e666:	d501      	bpl.n	2e66c <_printf_float+0x1ac>
   2e668:	3302      	adds	r3, #2
   2e66a:	e7f4      	b.n	2e656 <_printf_float+0x196>
   2e66c:	2301      	movs	r3, #1
   2e66e:	e7f2      	b.n	2e656 <_printf_float+0x196>
   2e670:	f04f 0967 	mov.w	r9, #103	; 0x67
   2e674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e676:	4299      	cmp	r1, r3
   2e678:	db05      	blt.n	2e686 <_printf_float+0x1c6>
   2e67a:	6823      	ldr	r3, [r4, #0]
   2e67c:	6121      	str	r1, [r4, #16]
   2e67e:	07d8      	lsls	r0, r3, #31
   2e680:	d5ea      	bpl.n	2e658 <_printf_float+0x198>
   2e682:	1c4b      	adds	r3, r1, #1
   2e684:	e7e7      	b.n	2e656 <_printf_float+0x196>
   2e686:	2900      	cmp	r1, #0
   2e688:	bfd4      	ite	le
   2e68a:	f1c1 0202 	rsble	r2, r1, #2
   2e68e:	2201      	movgt	r2, #1
   2e690:	4413      	add	r3, r2
   2e692:	e7e0      	b.n	2e656 <_printf_float+0x196>
   2e694:	6823      	ldr	r3, [r4, #0]
   2e696:	055a      	lsls	r2, r3, #21
   2e698:	d407      	bmi.n	2e6aa <_printf_float+0x1ea>
   2e69a:	6923      	ldr	r3, [r4, #16]
   2e69c:	4642      	mov	r2, r8
   2e69e:	4631      	mov	r1, r6
   2e6a0:	4628      	mov	r0, r5
   2e6a2:	47b8      	blx	r7
   2e6a4:	3001      	adds	r0, #1
   2e6a6:	d12b      	bne.n	2e700 <_printf_float+0x240>
   2e6a8:	e765      	b.n	2e576 <_printf_float+0xb6>
   2e6aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2e6ae:	f240 80dc 	bls.w	2e86a <_printf_float+0x3aa>
   2e6b2:	2200      	movs	r2, #0
   2e6b4:	2300      	movs	r3, #0
   2e6b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2e6ba:	f7e2 f9e5 	bl	10a88 <__aeabi_dcmpeq>
   2e6be:	2800      	cmp	r0, #0
   2e6c0:	d033      	beq.n	2e72a <_printf_float+0x26a>
   2e6c2:	2301      	movs	r3, #1
   2e6c4:	4a35      	ldr	r2, [pc, #212]	; (2e79c <_printf_float+0x2dc>)
   2e6c6:	4631      	mov	r1, r6
   2e6c8:	4628      	mov	r0, r5
   2e6ca:	47b8      	blx	r7
   2e6cc:	3001      	adds	r0, #1
   2e6ce:	f43f af52 	beq.w	2e576 <_printf_float+0xb6>
   2e6d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2e6d6:	429a      	cmp	r2, r3
   2e6d8:	db02      	blt.n	2e6e0 <_printf_float+0x220>
   2e6da:	6823      	ldr	r3, [r4, #0]
   2e6dc:	07d8      	lsls	r0, r3, #31
   2e6de:	d50f      	bpl.n	2e700 <_printf_float+0x240>
   2e6e0:	4631      	mov	r1, r6
   2e6e2:	4628      	mov	r0, r5
   2e6e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2e6e8:	47b8      	blx	r7
   2e6ea:	3001      	adds	r0, #1
   2e6ec:	f43f af43 	beq.w	2e576 <_printf_float+0xb6>
   2e6f0:	f04f 0800 	mov.w	r8, #0
   2e6f4:	f104 091a 	add.w	r9, r4, #26
   2e6f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e6fa:	3b01      	subs	r3, #1
   2e6fc:	4543      	cmp	r3, r8
   2e6fe:	dc09      	bgt.n	2e714 <_printf_float+0x254>
   2e700:	6823      	ldr	r3, [r4, #0]
   2e702:	079b      	lsls	r3, r3, #30
   2e704:	f100 8101 	bmi.w	2e90a <_printf_float+0x44a>
   2e708:	68e0      	ldr	r0, [r4, #12]
   2e70a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2e70c:	4298      	cmp	r0, r3
   2e70e:	bfb8      	it	lt
   2e710:	4618      	movlt	r0, r3
   2e712:	e732      	b.n	2e57a <_printf_float+0xba>
   2e714:	2301      	movs	r3, #1
   2e716:	464a      	mov	r2, r9
   2e718:	4631      	mov	r1, r6
   2e71a:	4628      	mov	r0, r5
   2e71c:	47b8      	blx	r7
   2e71e:	3001      	adds	r0, #1
   2e720:	f43f af29 	beq.w	2e576 <_printf_float+0xb6>
   2e724:	f108 0801 	add.w	r8, r8, #1
   2e728:	e7e6      	b.n	2e6f8 <_printf_float+0x238>
   2e72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2e72c:	2b00      	cmp	r3, #0
   2e72e:	dc37      	bgt.n	2e7a0 <_printf_float+0x2e0>
   2e730:	2301      	movs	r3, #1
   2e732:	4a1a      	ldr	r2, [pc, #104]	; (2e79c <_printf_float+0x2dc>)
   2e734:	4631      	mov	r1, r6
   2e736:	4628      	mov	r0, r5
   2e738:	47b8      	blx	r7
   2e73a:	3001      	adds	r0, #1
   2e73c:	f43f af1b 	beq.w	2e576 <_printf_float+0xb6>
   2e740:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2e744:	4313      	orrs	r3, r2
   2e746:	d102      	bne.n	2e74e <_printf_float+0x28e>
   2e748:	6823      	ldr	r3, [r4, #0]
   2e74a:	07d9      	lsls	r1, r3, #31
   2e74c:	d5d8      	bpl.n	2e700 <_printf_float+0x240>
   2e74e:	4631      	mov	r1, r6
   2e750:	4628      	mov	r0, r5
   2e752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2e756:	47b8      	blx	r7
   2e758:	3001      	adds	r0, #1
   2e75a:	f43f af0c 	beq.w	2e576 <_printf_float+0xb6>
   2e75e:	f04f 0900 	mov.w	r9, #0
   2e762:	f104 0a1a 	add.w	sl, r4, #26
   2e766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2e768:	425b      	negs	r3, r3
   2e76a:	454b      	cmp	r3, r9
   2e76c:	dc01      	bgt.n	2e772 <_printf_float+0x2b2>
   2e76e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e770:	e794      	b.n	2e69c <_printf_float+0x1dc>
   2e772:	2301      	movs	r3, #1
   2e774:	4652      	mov	r2, sl
   2e776:	4631      	mov	r1, r6
   2e778:	4628      	mov	r0, r5
   2e77a:	47b8      	blx	r7
   2e77c:	3001      	adds	r0, #1
   2e77e:	f43f aefa 	beq.w	2e576 <_printf_float+0xb6>
   2e782:	f109 0901 	add.w	r9, r9, #1
   2e786:	e7ee      	b.n	2e766 <_printf_float+0x2a6>
   2e788:	7fefffff 	.word	0x7fefffff
   2e78c:	00040ffd 	.word	0x00040ffd
   2e790:	0003ab3a 	.word	0x0003ab3a
   2e794:	00041005 	.word	0x00041005
   2e798:	00041001 	.word	0x00041001
   2e79c:	00040e81 	.word	0x00040e81
   2e7a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2e7a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2e7a4:	429a      	cmp	r2, r3
   2e7a6:	bfa8      	it	ge
   2e7a8:	461a      	movge	r2, r3
   2e7aa:	2a00      	cmp	r2, #0
   2e7ac:	4691      	mov	r9, r2
   2e7ae:	dc37      	bgt.n	2e820 <_printf_float+0x360>
   2e7b0:	f04f 0b00 	mov.w	fp, #0
   2e7b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2e7b8:	f104 021a 	add.w	r2, r4, #26
   2e7bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   2e7c0:	ebaa 0309 	sub.w	r3, sl, r9
   2e7c4:	455b      	cmp	r3, fp
   2e7c6:	dc33      	bgt.n	2e830 <_printf_float+0x370>
   2e7c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2e7cc:	429a      	cmp	r2, r3
   2e7ce:	db3b      	blt.n	2e848 <_printf_float+0x388>
   2e7d0:	6823      	ldr	r3, [r4, #0]
   2e7d2:	07da      	lsls	r2, r3, #31
   2e7d4:	d438      	bmi.n	2e848 <_printf_float+0x388>
   2e7d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2e7d8:	990d      	ldr	r1, [sp, #52]	; 0x34
   2e7da:	eba2 030a 	sub.w	r3, r2, sl
   2e7de:	eba2 0901 	sub.w	r9, r2, r1
   2e7e2:	4599      	cmp	r9, r3
   2e7e4:	bfa8      	it	ge
   2e7e6:	4699      	movge	r9, r3
   2e7e8:	f1b9 0f00 	cmp.w	r9, #0
   2e7ec:	dc34      	bgt.n	2e858 <_printf_float+0x398>
   2e7ee:	f04f 0800 	mov.w	r8, #0
   2e7f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2e7f6:	f104 0a1a 	add.w	sl, r4, #26
   2e7fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2e7fe:	1a9b      	subs	r3, r3, r2
   2e800:	eba3 0309 	sub.w	r3, r3, r9
   2e804:	4543      	cmp	r3, r8
   2e806:	f77f af7b 	ble.w	2e700 <_printf_float+0x240>
   2e80a:	2301      	movs	r3, #1
   2e80c:	4652      	mov	r2, sl
   2e80e:	4631      	mov	r1, r6
   2e810:	4628      	mov	r0, r5
   2e812:	47b8      	blx	r7
   2e814:	3001      	adds	r0, #1
   2e816:	f43f aeae 	beq.w	2e576 <_printf_float+0xb6>
   2e81a:	f108 0801 	add.w	r8, r8, #1
   2e81e:	e7ec      	b.n	2e7fa <_printf_float+0x33a>
   2e820:	4613      	mov	r3, r2
   2e822:	4631      	mov	r1, r6
   2e824:	4642      	mov	r2, r8
   2e826:	4628      	mov	r0, r5
   2e828:	47b8      	blx	r7
   2e82a:	3001      	adds	r0, #1
   2e82c:	d1c0      	bne.n	2e7b0 <_printf_float+0x2f0>
   2e82e:	e6a2      	b.n	2e576 <_printf_float+0xb6>
   2e830:	2301      	movs	r3, #1
   2e832:	4631      	mov	r1, r6
   2e834:	4628      	mov	r0, r5
   2e836:	920b      	str	r2, [sp, #44]	; 0x2c
   2e838:	47b8      	blx	r7
   2e83a:	3001      	adds	r0, #1
   2e83c:	f43f ae9b 	beq.w	2e576 <_printf_float+0xb6>
   2e840:	f10b 0b01 	add.w	fp, fp, #1
   2e844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2e846:	e7b9      	b.n	2e7bc <_printf_float+0x2fc>
   2e848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2e84c:	4631      	mov	r1, r6
   2e84e:	4628      	mov	r0, r5
   2e850:	47b8      	blx	r7
   2e852:	3001      	adds	r0, #1
   2e854:	d1bf      	bne.n	2e7d6 <_printf_float+0x316>
   2e856:	e68e      	b.n	2e576 <_printf_float+0xb6>
   2e858:	464b      	mov	r3, r9
   2e85a:	eb08 020a 	add.w	r2, r8, sl
   2e85e:	4631      	mov	r1, r6
   2e860:	4628      	mov	r0, r5
   2e862:	47b8      	blx	r7
   2e864:	3001      	adds	r0, #1
   2e866:	d1c2      	bne.n	2e7ee <_printf_float+0x32e>
   2e868:	e685      	b.n	2e576 <_printf_float+0xb6>
   2e86a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2e86c:	2a01      	cmp	r2, #1
   2e86e:	dc01      	bgt.n	2e874 <_printf_float+0x3b4>
   2e870:	07db      	lsls	r3, r3, #31
   2e872:	d537      	bpl.n	2e8e4 <_printf_float+0x424>
   2e874:	2301      	movs	r3, #1
   2e876:	4642      	mov	r2, r8
   2e878:	4631      	mov	r1, r6
   2e87a:	4628      	mov	r0, r5
   2e87c:	47b8      	blx	r7
   2e87e:	3001      	adds	r0, #1
   2e880:	f43f ae79 	beq.w	2e576 <_printf_float+0xb6>
   2e884:	4631      	mov	r1, r6
   2e886:	4628      	mov	r0, r5
   2e888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2e88c:	47b8      	blx	r7
   2e88e:	3001      	adds	r0, #1
   2e890:	f43f ae71 	beq.w	2e576 <_printf_float+0xb6>
   2e894:	2200      	movs	r2, #0
   2e896:	2300      	movs	r3, #0
   2e898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2e89c:	f7e2 f8f4 	bl	10a88 <__aeabi_dcmpeq>
   2e8a0:	b9d8      	cbnz	r0, 2e8da <_printf_float+0x41a>
   2e8a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e8a4:	f108 0201 	add.w	r2, r8, #1
   2e8a8:	3b01      	subs	r3, #1
   2e8aa:	4631      	mov	r1, r6
   2e8ac:	4628      	mov	r0, r5
   2e8ae:	47b8      	blx	r7
   2e8b0:	3001      	adds	r0, #1
   2e8b2:	d10e      	bne.n	2e8d2 <_printf_float+0x412>
   2e8b4:	e65f      	b.n	2e576 <_printf_float+0xb6>
   2e8b6:	2301      	movs	r3, #1
   2e8b8:	464a      	mov	r2, r9
   2e8ba:	4631      	mov	r1, r6
   2e8bc:	4628      	mov	r0, r5
   2e8be:	47b8      	blx	r7
   2e8c0:	3001      	adds	r0, #1
   2e8c2:	f43f ae58 	beq.w	2e576 <_printf_float+0xb6>
   2e8c6:	f108 0801 	add.w	r8, r8, #1
   2e8ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e8cc:	3b01      	subs	r3, #1
   2e8ce:	4543      	cmp	r3, r8
   2e8d0:	dcf1      	bgt.n	2e8b6 <_printf_float+0x3f6>
   2e8d2:	4653      	mov	r3, sl
   2e8d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2e8d8:	e6e1      	b.n	2e69e <_printf_float+0x1de>
   2e8da:	f04f 0800 	mov.w	r8, #0
   2e8de:	f104 091a 	add.w	r9, r4, #26
   2e8e2:	e7f2      	b.n	2e8ca <_printf_float+0x40a>
   2e8e4:	2301      	movs	r3, #1
   2e8e6:	4642      	mov	r2, r8
   2e8e8:	e7df      	b.n	2e8aa <_printf_float+0x3ea>
   2e8ea:	2301      	movs	r3, #1
   2e8ec:	464a      	mov	r2, r9
   2e8ee:	4631      	mov	r1, r6
   2e8f0:	4628      	mov	r0, r5
   2e8f2:	47b8      	blx	r7
   2e8f4:	3001      	adds	r0, #1
   2e8f6:	f43f ae3e 	beq.w	2e576 <_printf_float+0xb6>
   2e8fa:	f108 0801 	add.w	r8, r8, #1
   2e8fe:	68e3      	ldr	r3, [r4, #12]
   2e900:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2e902:	1a5b      	subs	r3, r3, r1
   2e904:	4543      	cmp	r3, r8
   2e906:	dcf0      	bgt.n	2e8ea <_printf_float+0x42a>
   2e908:	e6fe      	b.n	2e708 <_printf_float+0x248>
   2e90a:	f04f 0800 	mov.w	r8, #0
   2e90e:	f104 0919 	add.w	r9, r4, #25
   2e912:	e7f4      	b.n	2e8fe <_printf_float+0x43e>

0002e914 <_printf_i>:
   2e914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2e918:	460c      	mov	r4, r1
   2e91a:	4691      	mov	r9, r2
   2e91c:	4680      	mov	r8, r0
   2e91e:	469a      	mov	sl, r3
   2e920:	7e27      	ldrb	r7, [r4, #24]
   2e922:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2e926:	990c      	ldr	r1, [sp, #48]	; 0x30
   2e928:	2f78      	cmp	r7, #120	; 0x78
   2e92a:	d807      	bhi.n	2e93c <_printf_i+0x28>
   2e92c:	2f62      	cmp	r7, #98	; 0x62
   2e92e:	d80a      	bhi.n	2e946 <_printf_i+0x32>
   2e930:	2f00      	cmp	r7, #0
   2e932:	f000 80d8 	beq.w	2eae6 <_printf_i+0x1d2>
   2e936:	2f58      	cmp	r7, #88	; 0x58
   2e938:	f000 80a3 	beq.w	2ea82 <_printf_i+0x16e>
   2e93c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2e940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2e944:	e03a      	b.n	2e9bc <_printf_i+0xa8>
   2e946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2e94a:	2b15      	cmp	r3, #21
   2e94c:	d8f6      	bhi.n	2e93c <_printf_i+0x28>
   2e94e:	a001      	add	r0, pc, #4	; (adr r0, 2e954 <_printf_i+0x40>)
   2e950:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   2e954:	0002e9ad 	.word	0x0002e9ad
   2e958:	0002e9c1 	.word	0x0002e9c1
   2e95c:	0002e93d 	.word	0x0002e93d
   2e960:	0002e93d 	.word	0x0002e93d
   2e964:	0002e93d 	.word	0x0002e93d
   2e968:	0002e93d 	.word	0x0002e93d
   2e96c:	0002e9c1 	.word	0x0002e9c1
   2e970:	0002e93d 	.word	0x0002e93d
   2e974:	0002e93d 	.word	0x0002e93d
   2e978:	0002e93d 	.word	0x0002e93d
   2e97c:	0002e93d 	.word	0x0002e93d
   2e980:	0002eacd 	.word	0x0002eacd
   2e984:	0002e9f1 	.word	0x0002e9f1
   2e988:	0002eaaf 	.word	0x0002eaaf
   2e98c:	0002e93d 	.word	0x0002e93d
   2e990:	0002e93d 	.word	0x0002e93d
   2e994:	0002eaef 	.word	0x0002eaef
   2e998:	0002e93d 	.word	0x0002e93d
   2e99c:	0002e9f1 	.word	0x0002e9f1
   2e9a0:	0002e93d 	.word	0x0002e93d
   2e9a4:	0002e93d 	.word	0x0002e93d
   2e9a8:	0002eab7 	.word	0x0002eab7
   2e9ac:	680b      	ldr	r3, [r1, #0]
   2e9ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2e9b2:	1d1a      	adds	r2, r3, #4
   2e9b4:	681b      	ldr	r3, [r3, #0]
   2e9b6:	600a      	str	r2, [r1, #0]
   2e9b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2e9bc:	2301      	movs	r3, #1
   2e9be:	e0a3      	b.n	2eb08 <_printf_i+0x1f4>
   2e9c0:	6825      	ldr	r5, [r4, #0]
   2e9c2:	6808      	ldr	r0, [r1, #0]
   2e9c4:	062e      	lsls	r6, r5, #24
   2e9c6:	f100 0304 	add.w	r3, r0, #4
   2e9ca:	d50a      	bpl.n	2e9e2 <_printf_i+0xce>
   2e9cc:	6805      	ldr	r5, [r0, #0]
   2e9ce:	600b      	str	r3, [r1, #0]
   2e9d0:	2d00      	cmp	r5, #0
   2e9d2:	da03      	bge.n	2e9dc <_printf_i+0xc8>
   2e9d4:	232d      	movs	r3, #45	; 0x2d
   2e9d6:	426d      	negs	r5, r5
   2e9d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2e9dc:	485e      	ldr	r0, [pc, #376]	; (2eb58 <_printf_i+0x244>)
   2e9de:	230a      	movs	r3, #10
   2e9e0:	e019      	b.n	2ea16 <_printf_i+0x102>
   2e9e2:	f015 0f40 	tst.w	r5, #64	; 0x40
   2e9e6:	6805      	ldr	r5, [r0, #0]
   2e9e8:	600b      	str	r3, [r1, #0]
   2e9ea:	bf18      	it	ne
   2e9ec:	b22d      	sxthne	r5, r5
   2e9ee:	e7ef      	b.n	2e9d0 <_printf_i+0xbc>
   2e9f0:	680b      	ldr	r3, [r1, #0]
   2e9f2:	6825      	ldr	r5, [r4, #0]
   2e9f4:	1d18      	adds	r0, r3, #4
   2e9f6:	6008      	str	r0, [r1, #0]
   2e9f8:	0628      	lsls	r0, r5, #24
   2e9fa:	d501      	bpl.n	2ea00 <_printf_i+0xec>
   2e9fc:	681d      	ldr	r5, [r3, #0]
   2e9fe:	e002      	b.n	2ea06 <_printf_i+0xf2>
   2ea00:	0669      	lsls	r1, r5, #25
   2ea02:	d5fb      	bpl.n	2e9fc <_printf_i+0xe8>
   2ea04:	881d      	ldrh	r5, [r3, #0]
   2ea06:	2f6f      	cmp	r7, #111	; 0x6f
   2ea08:	4853      	ldr	r0, [pc, #332]	; (2eb58 <_printf_i+0x244>)
   2ea0a:	bf0c      	ite	eq
   2ea0c:	2308      	moveq	r3, #8
   2ea0e:	230a      	movne	r3, #10
   2ea10:	2100      	movs	r1, #0
   2ea12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2ea16:	6866      	ldr	r6, [r4, #4]
   2ea18:	2e00      	cmp	r6, #0
   2ea1a:	60a6      	str	r6, [r4, #8]
   2ea1c:	bfa2      	ittt	ge
   2ea1e:	6821      	ldrge	r1, [r4, #0]
   2ea20:	f021 0104 	bicge.w	r1, r1, #4
   2ea24:	6021      	strge	r1, [r4, #0]
   2ea26:	b90d      	cbnz	r5, 2ea2c <_printf_i+0x118>
   2ea28:	2e00      	cmp	r6, #0
   2ea2a:	d04d      	beq.n	2eac8 <_printf_i+0x1b4>
   2ea2c:	4616      	mov	r6, r2
   2ea2e:	fbb5 f1f3 	udiv	r1, r5, r3
   2ea32:	fb03 5711 	mls	r7, r3, r1, r5
   2ea36:	5dc7      	ldrb	r7, [r0, r7]
   2ea38:	f806 7d01 	strb.w	r7, [r6, #-1]!
   2ea3c:	462f      	mov	r7, r5
   2ea3e:	460d      	mov	r5, r1
   2ea40:	42bb      	cmp	r3, r7
   2ea42:	d9f4      	bls.n	2ea2e <_printf_i+0x11a>
   2ea44:	2b08      	cmp	r3, #8
   2ea46:	d10b      	bne.n	2ea60 <_printf_i+0x14c>
   2ea48:	6823      	ldr	r3, [r4, #0]
   2ea4a:	07df      	lsls	r7, r3, #31
   2ea4c:	d508      	bpl.n	2ea60 <_printf_i+0x14c>
   2ea4e:	6923      	ldr	r3, [r4, #16]
   2ea50:	6861      	ldr	r1, [r4, #4]
   2ea52:	4299      	cmp	r1, r3
   2ea54:	bfde      	ittt	le
   2ea56:	2330      	movle	r3, #48	; 0x30
   2ea58:	f806 3c01 	strble.w	r3, [r6, #-1]
   2ea5c:	f106 36ff 	addle.w	r6, r6, #4294967295
   2ea60:	1b92      	subs	r2, r2, r6
   2ea62:	6122      	str	r2, [r4, #16]
   2ea64:	464b      	mov	r3, r9
   2ea66:	aa03      	add	r2, sp, #12
   2ea68:	4621      	mov	r1, r4
   2ea6a:	4640      	mov	r0, r8
   2ea6c:	f8cd a000 	str.w	sl, [sp]
   2ea70:	f008 ff4d 	bl	3790e <_printf_common>
   2ea74:	3001      	adds	r0, #1
   2ea76:	d14c      	bne.n	2eb12 <_printf_i+0x1fe>
   2ea78:	f04f 30ff 	mov.w	r0, #4294967295
   2ea7c:	b004      	add	sp, #16
   2ea7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ea82:	4835      	ldr	r0, [pc, #212]	; (2eb58 <_printf_i+0x244>)
   2ea84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2ea88:	6823      	ldr	r3, [r4, #0]
   2ea8a:	680e      	ldr	r6, [r1, #0]
   2ea8c:	061f      	lsls	r7, r3, #24
   2ea8e:	f856 5b04 	ldr.w	r5, [r6], #4
   2ea92:	600e      	str	r6, [r1, #0]
   2ea94:	d514      	bpl.n	2eac0 <_printf_i+0x1ac>
   2ea96:	07d9      	lsls	r1, r3, #31
   2ea98:	bf44      	itt	mi
   2ea9a:	f043 0320 	orrmi.w	r3, r3, #32
   2ea9e:	6023      	strmi	r3, [r4, #0]
   2eaa0:	b91d      	cbnz	r5, 2eaaa <_printf_i+0x196>
   2eaa2:	6823      	ldr	r3, [r4, #0]
   2eaa4:	f023 0320 	bic.w	r3, r3, #32
   2eaa8:	6023      	str	r3, [r4, #0]
   2eaaa:	2310      	movs	r3, #16
   2eaac:	e7b0      	b.n	2ea10 <_printf_i+0xfc>
   2eaae:	6823      	ldr	r3, [r4, #0]
   2eab0:	f043 0320 	orr.w	r3, r3, #32
   2eab4:	6023      	str	r3, [r4, #0]
   2eab6:	2378      	movs	r3, #120	; 0x78
   2eab8:	4828      	ldr	r0, [pc, #160]	; (2eb5c <_printf_i+0x248>)
   2eaba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2eabe:	e7e3      	b.n	2ea88 <_printf_i+0x174>
   2eac0:	065e      	lsls	r6, r3, #25
   2eac2:	bf48      	it	mi
   2eac4:	b2ad      	uxthmi	r5, r5
   2eac6:	e7e6      	b.n	2ea96 <_printf_i+0x182>
   2eac8:	4616      	mov	r6, r2
   2eaca:	e7bb      	b.n	2ea44 <_printf_i+0x130>
   2eacc:	680b      	ldr	r3, [r1, #0]
   2eace:	6826      	ldr	r6, [r4, #0]
   2ead0:	1d1d      	adds	r5, r3, #4
   2ead2:	6960      	ldr	r0, [r4, #20]
   2ead4:	600d      	str	r5, [r1, #0]
   2ead6:	0635      	lsls	r5, r6, #24
   2ead8:	681b      	ldr	r3, [r3, #0]
   2eada:	d501      	bpl.n	2eae0 <_printf_i+0x1cc>
   2eadc:	6018      	str	r0, [r3, #0]
   2eade:	e002      	b.n	2eae6 <_printf_i+0x1d2>
   2eae0:	0671      	lsls	r1, r6, #25
   2eae2:	d5fb      	bpl.n	2eadc <_printf_i+0x1c8>
   2eae4:	8018      	strh	r0, [r3, #0]
   2eae6:	2300      	movs	r3, #0
   2eae8:	4616      	mov	r6, r2
   2eaea:	6123      	str	r3, [r4, #16]
   2eaec:	e7ba      	b.n	2ea64 <_printf_i+0x150>
   2eaee:	680b      	ldr	r3, [r1, #0]
   2eaf0:	1d1a      	adds	r2, r3, #4
   2eaf2:	600a      	str	r2, [r1, #0]
   2eaf4:	2100      	movs	r1, #0
   2eaf6:	681e      	ldr	r6, [r3, #0]
   2eaf8:	6862      	ldr	r2, [r4, #4]
   2eafa:	4630      	mov	r0, r6
   2eafc:	f008 fe25 	bl	3774a <memchr>
   2eb00:	b108      	cbz	r0, 2eb06 <_printf_i+0x1f2>
   2eb02:	1b80      	subs	r0, r0, r6
   2eb04:	6060      	str	r0, [r4, #4]
   2eb06:	6863      	ldr	r3, [r4, #4]
   2eb08:	6123      	str	r3, [r4, #16]
   2eb0a:	2300      	movs	r3, #0
   2eb0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2eb10:	e7a8      	b.n	2ea64 <_printf_i+0x150>
   2eb12:	6923      	ldr	r3, [r4, #16]
   2eb14:	4632      	mov	r2, r6
   2eb16:	4649      	mov	r1, r9
   2eb18:	4640      	mov	r0, r8
   2eb1a:	47d0      	blx	sl
   2eb1c:	3001      	adds	r0, #1
   2eb1e:	d0ab      	beq.n	2ea78 <_printf_i+0x164>
   2eb20:	6823      	ldr	r3, [r4, #0]
   2eb22:	079b      	lsls	r3, r3, #30
   2eb24:	d413      	bmi.n	2eb4e <_printf_i+0x23a>
   2eb26:	68e0      	ldr	r0, [r4, #12]
   2eb28:	9b03      	ldr	r3, [sp, #12]
   2eb2a:	4298      	cmp	r0, r3
   2eb2c:	bfb8      	it	lt
   2eb2e:	4618      	movlt	r0, r3
   2eb30:	e7a4      	b.n	2ea7c <_printf_i+0x168>
   2eb32:	2301      	movs	r3, #1
   2eb34:	4632      	mov	r2, r6
   2eb36:	4649      	mov	r1, r9
   2eb38:	4640      	mov	r0, r8
   2eb3a:	47d0      	blx	sl
   2eb3c:	3001      	adds	r0, #1
   2eb3e:	d09b      	beq.n	2ea78 <_printf_i+0x164>
   2eb40:	3501      	adds	r5, #1
   2eb42:	68e3      	ldr	r3, [r4, #12]
   2eb44:	9903      	ldr	r1, [sp, #12]
   2eb46:	1a5b      	subs	r3, r3, r1
   2eb48:	42ab      	cmp	r3, r5
   2eb4a:	dcf2      	bgt.n	2eb32 <_printf_i+0x21e>
   2eb4c:	e7eb      	b.n	2eb26 <_printf_i+0x212>
   2eb4e:	2500      	movs	r5, #0
   2eb50:	f104 0619 	add.w	r6, r4, #25
   2eb54:	e7f5      	b.n	2eb42 <_printf_i+0x22e>
   2eb56:	bf00      	nop
   2eb58:	00041009 	.word	0x00041009
   2eb5c:	0004101a 	.word	0x0004101a

0002eb60 <realloc>:
   2eb60:	4b02      	ldr	r3, [pc, #8]	; (2eb6c <realloc+0xc>)
   2eb62:	460a      	mov	r2, r1
   2eb64:	4601      	mov	r1, r0
   2eb66:	6818      	ldr	r0, [r3, #0]
   2eb68:	f009 bb18 	b.w	3819c <_realloc_r>
   2eb6c:	20014a28 	.word	0x20014a28

0002eb70 <_sbrk_r>:
   2eb70:	b538      	push	{r3, r4, r5, lr}
   2eb72:	2300      	movs	r3, #0
   2eb74:	4d05      	ldr	r5, [pc, #20]	; (2eb8c <_sbrk_r+0x1c>)
   2eb76:	4604      	mov	r4, r0
   2eb78:	4608      	mov	r0, r1
   2eb7a:	602b      	str	r3, [r5, #0]
   2eb7c:	f7e9 fb7c 	bl	18278 <_sbrk>
   2eb80:	1c43      	adds	r3, r0, #1
   2eb82:	d102      	bne.n	2eb8a <_sbrk_r+0x1a>
   2eb84:	682b      	ldr	r3, [r5, #0]
   2eb86:	b103      	cbz	r3, 2eb8a <_sbrk_r+0x1a>
   2eb88:	6023      	str	r3, [r4, #0]
   2eb8a:	bd38      	pop	{r3, r4, r5, pc}
   2eb8c:	2001dcc8 	.word	0x2001dcc8

0002eb90 <sniprintf>:
   2eb90:	b40c      	push	{r2, r3}
   2eb92:	4b18      	ldr	r3, [pc, #96]	; (2ebf4 <sniprintf+0x64>)
   2eb94:	b530      	push	{r4, r5, lr}
   2eb96:	1e0c      	subs	r4, r1, #0
   2eb98:	b09d      	sub	sp, #116	; 0x74
   2eb9a:	681d      	ldr	r5, [r3, #0]
   2eb9c:	da08      	bge.n	2ebb0 <sniprintf+0x20>
   2eb9e:	238b      	movs	r3, #139	; 0x8b
   2eba0:	f04f 30ff 	mov.w	r0, #4294967295
   2eba4:	602b      	str	r3, [r5, #0]
   2eba6:	b01d      	add	sp, #116	; 0x74
   2eba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2ebac:	b002      	add	sp, #8
   2ebae:	4770      	bx	lr
   2ebb0:	f44f 7302 	mov.w	r3, #520	; 0x208
   2ebb4:	9002      	str	r0, [sp, #8]
   2ebb6:	9006      	str	r0, [sp, #24]
   2ebb8:	a902      	add	r1, sp, #8
   2ebba:	f8ad 3014 	strh.w	r3, [sp, #20]
   2ebbe:	bf14      	ite	ne
   2ebc0:	f104 33ff 	addne.w	r3, r4, #4294967295
   2ebc4:	4623      	moveq	r3, r4
   2ebc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2ebc8:	4628      	mov	r0, r5
   2ebca:	9304      	str	r3, [sp, #16]
   2ebcc:	9307      	str	r3, [sp, #28]
   2ebce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ebd2:	f8ad 3016 	strh.w	r3, [sp, #22]
   2ebd6:	ab21      	add	r3, sp, #132	; 0x84
   2ebd8:	9301      	str	r3, [sp, #4]
   2ebda:	f000 fc2b 	bl	2f434 <_svfiprintf_r>
   2ebde:	1c43      	adds	r3, r0, #1
   2ebe0:	bfbc      	itt	lt
   2ebe2:	238b      	movlt	r3, #139	; 0x8b
   2ebe4:	602b      	strlt	r3, [r5, #0]
   2ebe6:	2c00      	cmp	r4, #0
   2ebe8:	d0dd      	beq.n	2eba6 <sniprintf+0x16>
   2ebea:	9b02      	ldr	r3, [sp, #8]
   2ebec:	2200      	movs	r2, #0
   2ebee:	701a      	strb	r2, [r3, #0]
   2ebf0:	e7d9      	b.n	2eba6 <sniprintf+0x16>
   2ebf2:	bf00      	nop
   2ebf4:	20014a28 	.word	0x20014a28

0002ebf8 <siscanf>:
   2ebf8:	b40e      	push	{r1, r2, r3}
   2ebfa:	b530      	push	{r4, r5, lr}
   2ebfc:	b09c      	sub	sp, #112	; 0x70
   2ebfe:	f44f 7201 	mov.w	r2, #516	; 0x204
   2ec02:	ac1f      	add	r4, sp, #124	; 0x7c
   2ec04:	f8ad 2014 	strh.w	r2, [sp, #20]
   2ec08:	9002      	str	r0, [sp, #8]
   2ec0a:	f854 5b04 	ldr.w	r5, [r4], #4
   2ec0e:	9006      	str	r0, [sp, #24]
   2ec10:	f7e2 fc76 	bl	11500 <strlen>
   2ec14:	4b0b      	ldr	r3, [pc, #44]	; (2ec44 <siscanf+0x4c>)
   2ec16:	462a      	mov	r2, r5
   2ec18:	9003      	str	r0, [sp, #12]
   2ec1a:	a902      	add	r1, sp, #8
   2ec1c:	930b      	str	r3, [sp, #44]	; 0x2c
   2ec1e:	2300      	movs	r3, #0
   2ec20:	9007      	str	r0, [sp, #28]
   2ec22:	930f      	str	r3, [sp, #60]	; 0x3c
   2ec24:	9314      	str	r3, [sp, #80]	; 0x50
   2ec26:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ec2a:	4807      	ldr	r0, [pc, #28]	; (2ec48 <siscanf+0x50>)
   2ec2c:	f8ad 3016 	strh.w	r3, [sp, #22]
   2ec30:	4623      	mov	r3, r4
   2ec32:	6800      	ldr	r0, [r0, #0]
   2ec34:	9401      	str	r4, [sp, #4]
   2ec36:	f000 fcfd 	bl	2f634 <__ssvfiscanf_r>
   2ec3a:	b01c      	add	sp, #112	; 0x70
   2ec3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2ec40:	b003      	add	sp, #12
   2ec42:	4770      	bx	lr
   2ec44:	000379ef 	.word	0x000379ef
   2ec48:	20014a28 	.word	0x20014a28

0002ec4c <_strerror_r>:
   2ec4c:	b510      	push	{r4, lr}
   2ec4e:	4604      	mov	r4, r0
   2ec50:	4608      	mov	r0, r1
   2ec52:	4611      	mov	r1, r2
   2ec54:	288e      	cmp	r0, #142	; 0x8e
   2ec56:	f200 812f 	bhi.w	2eeb8 <_strerror_r+0x26c>
   2ec5a:	e8df f010 	tbh	[pc, r0, lsl #1]
   2ec5e:	0138      	.short	0x0138
   2ec60:	0091008f 	.word	0x0091008f
   2ec64:	00950093 	.word	0x00950093
   2ec68:	00990097 	.word	0x00990097
   2ec6c:	009d009b 	.word	0x009d009b
   2ec70:	00a300a1 	.word	0x00a300a1
   2ec74:	00a900a7 	.word	0x00a900a7
   2ec78:	00ad00ab 	.word	0x00ad00ab
   2ec7c:	00af012d 	.word	0x00af012d
   2ec80:	00b300b1 	.word	0x00b300b1
   2ec84:	00b700b5 	.word	0x00b700b5
   2ec88:	00bf00bd 	.word	0x00bf00bd
   2ec8c:	00c700c5 	.word	0x00c700c5
   2ec90:	00cb00c9 	.word	0x00cb00c9
   2ec94:	00d100cd 	.word	0x00d100cd
   2ec98:	00d700d5 	.word	0x00d700d5
   2ec9c:	00db00d9 	.word	0x00db00d9
   2eca0:	00df00dd 	.word	0x00df00dd
   2eca4:	00e300e1 	.word	0x00e300e1
   2eca8:	012d012d 	.word	0x012d012d
   2ecac:	012d012d 	.word	0x012d012d
   2ecb0:	012d012d 	.word	0x012d012d
   2ecb4:	012d012d 	.word	0x012d012d
   2ecb8:	00eb00e7 	.word	0x00eb00e7
   2ecbc:	012d012d 	.word	0x012d012d
   2ecc0:	012d012d 	.word	0x012d012d
   2ecc4:	012d012d 	.word	0x012d012d
   2ecc8:	012d012d 	.word	0x012d012d
   2eccc:	012d012d 	.word	0x012d012d
   2ecd0:	012d012d 	.word	0x012d012d
   2ecd4:	00ed012d 	.word	0x00ed012d
   2ecd8:	00ef0107 	.word	0x00ef0107
   2ecdc:	012d00f1 	.word	0x012d00f1
   2ece0:	012d012d 	.word	0x012d012d
   2ece4:	012d00f3 	.word	0x012d00f3
   2ece8:	012d012d 	.word	0x012d012d
   2ecec:	012d00f5 	.word	0x012d00f5
   2ecf0:	00f9012d 	.word	0x00f9012d
   2ecf4:	012d012d 	.word	0x012d012d
   2ecf8:	012d00fb 	.word	0x012d00fb
   2ecfc:	012d012d 	.word	0x012d012d
   2ed00:	012d012d 	.word	0x012d012d
   2ed04:	012d012d 	.word	0x012d012d
   2ed08:	012d012d 	.word	0x012d012d
   2ed0c:	00fd012d 	.word	0x00fd012d
   2ed10:	00ff012d 	.word	0x00ff012d
   2ed14:	01030101 	.word	0x01030101
   2ed18:	012d012d 	.word	0x012d012d
   2ed1c:	012d0125 	.word	0x012d0125
   2ed20:	012d012d 	.word	0x012d012d
   2ed24:	012d012d 	.word	0x012d012d
   2ed28:	012d012d 	.word	0x012d012d
   2ed2c:	0113012d 	.word	0x0113012d
   2ed30:	01090105 	.word	0x01090105
   2ed34:	010d010b 	.word	0x010d010b
   2ed38:	012d010f 	.word	0x012d010f
   2ed3c:	01150111 	.word	0x01150111
   2ed40:	00e90119 	.word	0x00e90119
   2ed44:	012b00c1 	.word	0x012b00c1
   2ed48:	00cf00b9 	.word	0x00cf00b9
   2ed4c:	009f00bb 	.word	0x009f00bb
   2ed50:	012900a5 	.word	0x012900a5
   2ed54:	012d00f7 	.word	0x012d00f7
   2ed58:	00c30117 	.word	0x00c30117
   2ed5c:	011b011d 	.word	0x011b011d
   2ed60:	012d012d 	.word	0x012d012d
   2ed64:	012d012d 	.word	0x012d012d
   2ed68:	00d3012d 	.word	0x00d3012d
   2ed6c:	012d012d 	.word	0x012d012d
   2ed70:	00e5012d 	.word	0x00e5012d
   2ed74:	011f0127 	.word	0x011f0127
   2ed78:	01230121 	.word	0x01230121
   2ed7c:	4855      	ldr	r0, [pc, #340]	; (2eed4 <_strerror_r+0x288>)
   2ed7e:	bd10      	pop	{r4, pc}
   2ed80:	4855      	ldr	r0, [pc, #340]	; (2eed8 <_strerror_r+0x28c>)
   2ed82:	e7fc      	b.n	2ed7e <_strerror_r+0x132>
   2ed84:	4855      	ldr	r0, [pc, #340]	; (2eedc <_strerror_r+0x290>)
   2ed86:	e7fa      	b.n	2ed7e <_strerror_r+0x132>
   2ed88:	4855      	ldr	r0, [pc, #340]	; (2eee0 <_strerror_r+0x294>)
   2ed8a:	e7f8      	b.n	2ed7e <_strerror_r+0x132>
   2ed8c:	4855      	ldr	r0, [pc, #340]	; (2eee4 <_strerror_r+0x298>)
   2ed8e:	e7f6      	b.n	2ed7e <_strerror_r+0x132>
   2ed90:	4855      	ldr	r0, [pc, #340]	; (2eee8 <_strerror_r+0x29c>)
   2ed92:	e7f4      	b.n	2ed7e <_strerror_r+0x132>
   2ed94:	4855      	ldr	r0, [pc, #340]	; (2eeec <_strerror_r+0x2a0>)
   2ed96:	e7f2      	b.n	2ed7e <_strerror_r+0x132>
   2ed98:	4855      	ldr	r0, [pc, #340]	; (2eef0 <_strerror_r+0x2a4>)
   2ed9a:	e7f0      	b.n	2ed7e <_strerror_r+0x132>
   2ed9c:	4855      	ldr	r0, [pc, #340]	; (2eef4 <_strerror_r+0x2a8>)
   2ed9e:	e7ee      	b.n	2ed7e <_strerror_r+0x132>
   2eda0:	4855      	ldr	r0, [pc, #340]	; (2eef8 <_strerror_r+0x2ac>)
   2eda2:	e7ec      	b.n	2ed7e <_strerror_r+0x132>
   2eda4:	4855      	ldr	r0, [pc, #340]	; (2eefc <_strerror_r+0x2b0>)
   2eda6:	e7ea      	b.n	2ed7e <_strerror_r+0x132>
   2eda8:	4855      	ldr	r0, [pc, #340]	; (2ef00 <_strerror_r+0x2b4>)
   2edaa:	e7e8      	b.n	2ed7e <_strerror_r+0x132>
   2edac:	4855      	ldr	r0, [pc, #340]	; (2ef04 <_strerror_r+0x2b8>)
   2edae:	e7e6      	b.n	2ed7e <_strerror_r+0x132>
   2edb0:	4855      	ldr	r0, [pc, #340]	; (2ef08 <_strerror_r+0x2bc>)
   2edb2:	e7e4      	b.n	2ed7e <_strerror_r+0x132>
   2edb4:	4855      	ldr	r0, [pc, #340]	; (2ef0c <_strerror_r+0x2c0>)
   2edb6:	e7e2      	b.n	2ed7e <_strerror_r+0x132>
   2edb8:	4855      	ldr	r0, [pc, #340]	; (2ef10 <_strerror_r+0x2c4>)
   2edba:	e7e0      	b.n	2ed7e <_strerror_r+0x132>
   2edbc:	4855      	ldr	r0, [pc, #340]	; (2ef14 <_strerror_r+0x2c8>)
   2edbe:	e7de      	b.n	2ed7e <_strerror_r+0x132>
   2edc0:	4855      	ldr	r0, [pc, #340]	; (2ef18 <_strerror_r+0x2cc>)
   2edc2:	e7dc      	b.n	2ed7e <_strerror_r+0x132>
   2edc4:	4855      	ldr	r0, [pc, #340]	; (2ef1c <_strerror_r+0x2d0>)
   2edc6:	e7da      	b.n	2ed7e <_strerror_r+0x132>
   2edc8:	4855      	ldr	r0, [pc, #340]	; (2ef20 <_strerror_r+0x2d4>)
   2edca:	e7d8      	b.n	2ed7e <_strerror_r+0x132>
   2edcc:	4855      	ldr	r0, [pc, #340]	; (2ef24 <_strerror_r+0x2d8>)
   2edce:	e7d6      	b.n	2ed7e <_strerror_r+0x132>
   2edd0:	4855      	ldr	r0, [pc, #340]	; (2ef28 <_strerror_r+0x2dc>)
   2edd2:	e7d4      	b.n	2ed7e <_strerror_r+0x132>
   2edd4:	4855      	ldr	r0, [pc, #340]	; (2ef2c <_strerror_r+0x2e0>)
   2edd6:	e7d2      	b.n	2ed7e <_strerror_r+0x132>
   2edd8:	4855      	ldr	r0, [pc, #340]	; (2ef30 <_strerror_r+0x2e4>)
   2edda:	e7d0      	b.n	2ed7e <_strerror_r+0x132>
   2eddc:	4855      	ldr	r0, [pc, #340]	; (2ef34 <_strerror_r+0x2e8>)
   2edde:	e7ce      	b.n	2ed7e <_strerror_r+0x132>
   2ede0:	4855      	ldr	r0, [pc, #340]	; (2ef38 <_strerror_r+0x2ec>)
   2ede2:	e7cc      	b.n	2ed7e <_strerror_r+0x132>
   2ede4:	4855      	ldr	r0, [pc, #340]	; (2ef3c <_strerror_r+0x2f0>)
   2ede6:	e7ca      	b.n	2ed7e <_strerror_r+0x132>
   2ede8:	4855      	ldr	r0, [pc, #340]	; (2ef40 <_strerror_r+0x2f4>)
   2edea:	e7c8      	b.n	2ed7e <_strerror_r+0x132>
   2edec:	4855      	ldr	r0, [pc, #340]	; (2ef44 <_strerror_r+0x2f8>)
   2edee:	e7c6      	b.n	2ed7e <_strerror_r+0x132>
   2edf0:	4855      	ldr	r0, [pc, #340]	; (2ef48 <_strerror_r+0x2fc>)
   2edf2:	e7c4      	b.n	2ed7e <_strerror_r+0x132>
   2edf4:	4855      	ldr	r0, [pc, #340]	; (2ef4c <_strerror_r+0x300>)
   2edf6:	e7c2      	b.n	2ed7e <_strerror_r+0x132>
   2edf8:	4855      	ldr	r0, [pc, #340]	; (2ef50 <_strerror_r+0x304>)
   2edfa:	e7c0      	b.n	2ed7e <_strerror_r+0x132>
   2edfc:	4855      	ldr	r0, [pc, #340]	; (2ef54 <_strerror_r+0x308>)
   2edfe:	e7be      	b.n	2ed7e <_strerror_r+0x132>
   2ee00:	4855      	ldr	r0, [pc, #340]	; (2ef58 <_strerror_r+0x30c>)
   2ee02:	e7bc      	b.n	2ed7e <_strerror_r+0x132>
   2ee04:	4855      	ldr	r0, [pc, #340]	; (2ef5c <_strerror_r+0x310>)
   2ee06:	e7ba      	b.n	2ed7e <_strerror_r+0x132>
   2ee08:	4855      	ldr	r0, [pc, #340]	; (2ef60 <_strerror_r+0x314>)
   2ee0a:	e7b8      	b.n	2ed7e <_strerror_r+0x132>
   2ee0c:	4855      	ldr	r0, [pc, #340]	; (2ef64 <_strerror_r+0x318>)
   2ee0e:	e7b6      	b.n	2ed7e <_strerror_r+0x132>
   2ee10:	4855      	ldr	r0, [pc, #340]	; (2ef68 <_strerror_r+0x31c>)
   2ee12:	e7b4      	b.n	2ed7e <_strerror_r+0x132>
   2ee14:	4855      	ldr	r0, [pc, #340]	; (2ef6c <_strerror_r+0x320>)
   2ee16:	e7b2      	b.n	2ed7e <_strerror_r+0x132>
   2ee18:	4855      	ldr	r0, [pc, #340]	; (2ef70 <_strerror_r+0x324>)
   2ee1a:	e7b0      	b.n	2ed7e <_strerror_r+0x132>
   2ee1c:	4855      	ldr	r0, [pc, #340]	; (2ef74 <_strerror_r+0x328>)
   2ee1e:	e7ae      	b.n	2ed7e <_strerror_r+0x132>
   2ee20:	4855      	ldr	r0, [pc, #340]	; (2ef78 <_strerror_r+0x32c>)
   2ee22:	e7ac      	b.n	2ed7e <_strerror_r+0x132>
   2ee24:	4855      	ldr	r0, [pc, #340]	; (2ef7c <_strerror_r+0x330>)
   2ee26:	e7aa      	b.n	2ed7e <_strerror_r+0x132>
   2ee28:	4855      	ldr	r0, [pc, #340]	; (2ef80 <_strerror_r+0x334>)
   2ee2a:	e7a8      	b.n	2ed7e <_strerror_r+0x132>
   2ee2c:	4855      	ldr	r0, [pc, #340]	; (2ef84 <_strerror_r+0x338>)
   2ee2e:	e7a6      	b.n	2ed7e <_strerror_r+0x132>
   2ee30:	4855      	ldr	r0, [pc, #340]	; (2ef88 <_strerror_r+0x33c>)
   2ee32:	e7a4      	b.n	2ed7e <_strerror_r+0x132>
   2ee34:	4855      	ldr	r0, [pc, #340]	; (2ef8c <_strerror_r+0x340>)
   2ee36:	e7a2      	b.n	2ed7e <_strerror_r+0x132>
   2ee38:	4855      	ldr	r0, [pc, #340]	; (2ef90 <_strerror_r+0x344>)
   2ee3a:	e7a0      	b.n	2ed7e <_strerror_r+0x132>
   2ee3c:	4855      	ldr	r0, [pc, #340]	; (2ef94 <_strerror_r+0x348>)
   2ee3e:	e79e      	b.n	2ed7e <_strerror_r+0x132>
   2ee40:	4855      	ldr	r0, [pc, #340]	; (2ef98 <_strerror_r+0x34c>)
   2ee42:	e79c      	b.n	2ed7e <_strerror_r+0x132>
   2ee44:	4855      	ldr	r0, [pc, #340]	; (2ef9c <_strerror_r+0x350>)
   2ee46:	e79a      	b.n	2ed7e <_strerror_r+0x132>
   2ee48:	4855      	ldr	r0, [pc, #340]	; (2efa0 <_strerror_r+0x354>)
   2ee4a:	e798      	b.n	2ed7e <_strerror_r+0x132>
   2ee4c:	4855      	ldr	r0, [pc, #340]	; (2efa4 <_strerror_r+0x358>)
   2ee4e:	e796      	b.n	2ed7e <_strerror_r+0x132>
   2ee50:	4855      	ldr	r0, [pc, #340]	; (2efa8 <_strerror_r+0x35c>)
   2ee52:	e794      	b.n	2ed7e <_strerror_r+0x132>
   2ee54:	4855      	ldr	r0, [pc, #340]	; (2efac <_strerror_r+0x360>)
   2ee56:	e792      	b.n	2ed7e <_strerror_r+0x132>
   2ee58:	4855      	ldr	r0, [pc, #340]	; (2efb0 <_strerror_r+0x364>)
   2ee5a:	e790      	b.n	2ed7e <_strerror_r+0x132>
   2ee5c:	4855      	ldr	r0, [pc, #340]	; (2efb4 <_strerror_r+0x368>)
   2ee5e:	e78e      	b.n	2ed7e <_strerror_r+0x132>
   2ee60:	4855      	ldr	r0, [pc, #340]	; (2efb8 <_strerror_r+0x36c>)
   2ee62:	e78c      	b.n	2ed7e <_strerror_r+0x132>
   2ee64:	4855      	ldr	r0, [pc, #340]	; (2efbc <_strerror_r+0x370>)
   2ee66:	e78a      	b.n	2ed7e <_strerror_r+0x132>
   2ee68:	4855      	ldr	r0, [pc, #340]	; (2efc0 <_strerror_r+0x374>)
   2ee6a:	e788      	b.n	2ed7e <_strerror_r+0x132>
   2ee6c:	4855      	ldr	r0, [pc, #340]	; (2efc4 <_strerror_r+0x378>)
   2ee6e:	e786      	b.n	2ed7e <_strerror_r+0x132>
   2ee70:	4855      	ldr	r0, [pc, #340]	; (2efc8 <_strerror_r+0x37c>)
   2ee72:	e784      	b.n	2ed7e <_strerror_r+0x132>
   2ee74:	4855      	ldr	r0, [pc, #340]	; (2efcc <_strerror_r+0x380>)
   2ee76:	e782      	b.n	2ed7e <_strerror_r+0x132>
   2ee78:	4855      	ldr	r0, [pc, #340]	; (2efd0 <_strerror_r+0x384>)
   2ee7a:	e780      	b.n	2ed7e <_strerror_r+0x132>
   2ee7c:	4855      	ldr	r0, [pc, #340]	; (2efd4 <_strerror_r+0x388>)
   2ee7e:	e77e      	b.n	2ed7e <_strerror_r+0x132>
   2ee80:	4855      	ldr	r0, [pc, #340]	; (2efd8 <_strerror_r+0x38c>)
   2ee82:	e77c      	b.n	2ed7e <_strerror_r+0x132>
   2ee84:	4855      	ldr	r0, [pc, #340]	; (2efdc <_strerror_r+0x390>)
   2ee86:	e77a      	b.n	2ed7e <_strerror_r+0x132>
   2ee88:	4855      	ldr	r0, [pc, #340]	; (2efe0 <_strerror_r+0x394>)
   2ee8a:	e778      	b.n	2ed7e <_strerror_r+0x132>
   2ee8c:	4855      	ldr	r0, [pc, #340]	; (2efe4 <_strerror_r+0x398>)
   2ee8e:	e776      	b.n	2ed7e <_strerror_r+0x132>
   2ee90:	4855      	ldr	r0, [pc, #340]	; (2efe8 <_strerror_r+0x39c>)
   2ee92:	e774      	b.n	2ed7e <_strerror_r+0x132>
   2ee94:	4855      	ldr	r0, [pc, #340]	; (2efec <_strerror_r+0x3a0>)
   2ee96:	e772      	b.n	2ed7e <_strerror_r+0x132>
   2ee98:	4855      	ldr	r0, [pc, #340]	; (2eff0 <_strerror_r+0x3a4>)
   2ee9a:	e770      	b.n	2ed7e <_strerror_r+0x132>
   2ee9c:	4855      	ldr	r0, [pc, #340]	; (2eff4 <_strerror_r+0x3a8>)
   2ee9e:	e76e      	b.n	2ed7e <_strerror_r+0x132>
   2eea0:	4855      	ldr	r0, [pc, #340]	; (2eff8 <_strerror_r+0x3ac>)
   2eea2:	e76c      	b.n	2ed7e <_strerror_r+0x132>
   2eea4:	4855      	ldr	r0, [pc, #340]	; (2effc <_strerror_r+0x3b0>)
   2eea6:	e76a      	b.n	2ed7e <_strerror_r+0x132>
   2eea8:	4855      	ldr	r0, [pc, #340]	; (2f000 <_strerror_r+0x3b4>)
   2eeaa:	e768      	b.n	2ed7e <_strerror_r+0x132>
   2eeac:	4855      	ldr	r0, [pc, #340]	; (2f004 <_strerror_r+0x3b8>)
   2eeae:	e766      	b.n	2ed7e <_strerror_r+0x132>
   2eeb0:	4855      	ldr	r0, [pc, #340]	; (2f008 <_strerror_r+0x3bc>)
   2eeb2:	e764      	b.n	2ed7e <_strerror_r+0x132>
   2eeb4:	4855      	ldr	r0, [pc, #340]	; (2f00c <_strerror_r+0x3c0>)
   2eeb6:	e762      	b.n	2ed7e <_strerror_r+0x132>
   2eeb8:	2b00      	cmp	r3, #0
   2eeba:	bf14      	ite	ne
   2eebc:	461a      	movne	r2, r3
   2eebe:	4622      	moveq	r2, r4
   2eec0:	f008 fdf9 	bl	37ab6 <_user_strerror>
   2eec4:	4b52      	ldr	r3, [pc, #328]	; (2f010 <_strerror_r+0x3c4>)
   2eec6:	2800      	cmp	r0, #0
   2eec8:	bf08      	it	eq
   2eeca:	4618      	moveq	r0, r3
   2eecc:	e757      	b.n	2ed7e <_strerror_r+0x132>
   2eece:	4851      	ldr	r0, [pc, #324]	; (2f014 <_strerror_r+0x3c8>)
   2eed0:	e755      	b.n	2ed7e <_strerror_r+0x132>
   2eed2:	bf00      	nop
   2eed4:	0004102b 	.word	0x0004102b
   2eed8:	00041035 	.word	0x00041035
   2eedc:	0004104f 	.word	0x0004104f
   2eee0:	0004105f 	.word	0x0004105f
   2eee4:	00041077 	.word	0x00041077
   2eee8:	00041081 	.word	0x00041081
   2eeec:	0004109b 	.word	0x0004109b
   2eef0:	000410ad 	.word	0x000410ad
   2eef4:	000410bf 	.word	0x000410bf
   2eef8:	000410d8 	.word	0x000410d8
   2eefc:	000410e8 	.word	0x000410e8
   2ef00:	000410f4 	.word	0x000410f4
   2ef04:	00041111 	.word	0x00041111
   2ef08:	00041123 	.word	0x00041123
   2ef0c:	00041134 	.word	0x00041134
   2ef10:	00041146 	.word	0x00041146
   2ef14:	00041152 	.word	0x00041152
   2ef18:	0004116a 	.word	0x0004116a
   2ef1c:	00041176 	.word	0x00041176
   2ef20:	00041188 	.word	0x00041188
   2ef24:	00041197 	.word	0x00041197
   2ef28:	000411a7 	.word	0x000411a7
   2ef2c:	000411b4 	.word	0x000411b4
   2ef30:	000411d3 	.word	0x000411d3
   2ef34:	000411e2 	.word	0x000411e2
   2ef38:	000411f3 	.word	0x000411f3
   2ef3c:	00041217 	.word	0x00041217
   2ef40:	00041235 	.word	0x00041235
   2ef44:	00041253 	.word	0x00041253
   2ef48:	00041273 	.word	0x00041273
   2ef4c:	0004128a 	.word	0x0004128a
   2ef50:	00041299 	.word	0x00041299
   2ef54:	000412a8 	.word	0x000412a8
   2ef58:	000412bc 	.word	0x000412bc
   2ef5c:	000412d4 	.word	0x000412d4
   2ef60:	000412e2 	.word	0x000412e2
   2ef64:	000412ef 	.word	0x000412ef
   2ef68:	00041305 	.word	0x00041305
   2ef6c:	00041314 	.word	0x00041314
   2ef70:	00041320 	.word	0x00041320
   2ef74:	0004134f 	.word	0x0004134f
   2ef78:	00041360 	.word	0x00041360
   2ef7c:	0004137b 	.word	0x0004137b
   2ef80:	0004138e 	.word	0x0004138e
   2ef84:	000413a4 	.word	0x000413a4
   2ef88:	000413ad 	.word	0x000413ad
   2ef8c:	000413c4 	.word	0x000413c4
   2ef90:	000413cc 	.word	0x000413cc
   2ef94:	000413d9 	.word	0x000413d9
   2ef98:	000413ee 	.word	0x000413ee
   2ef9c:	00041402 	.word	0x00041402
   2efa0:	0004141a 	.word	0x0004141a
   2efa4:	00041429 	.word	0x00041429
   2efa8:	0004143a 	.word	0x0004143a
   2efac:	0004144d 	.word	0x0004144d
   2efb0:	00041459 	.word	0x00041459
   2efb4:	00041472 	.word	0x00041472
   2efb8:	00041486 	.word	0x00041486
   2efbc:	000414a1 	.word	0x000414a1
   2efc0:	000414b9 	.word	0x000414b9
   2efc4:	000414d3 	.word	0x000414d3
   2efc8:	000414db 	.word	0x000414db
   2efcc:	0004150b 	.word	0x0004150b
   2efd0:	0004152a 	.word	0x0004152a
   2efd4:	00041549 	.word	0x00041549
   2efd8:	00041560 	.word	0x00041560
   2efdc:	00041573 	.word	0x00041573
   2efe0:	0004158c 	.word	0x0004158c
   2efe4:	000415a3 	.word	0x000415a3
   2efe8:	000415b9 	.word	0x000415b9
   2efec:	000415da 	.word	0x000415da
   2eff0:	000415f2 	.word	0x000415f2
   2eff4:	0004160e 	.word	0x0004160e
   2eff8:	00041621 	.word	0x00041621
   2effc:	00041637 	.word	0x00041637
   2f000:	0004164b 	.word	0x0004164b
   2f004:	0004166d 	.word	0x0004166d
   2f008:	00041693 	.word	0x00041693
   2f00c:	000416a4 	.word	0x000416a4
   2f010:	0003aba9 	.word	0x0003aba9
   2f014:	000416b9 	.word	0x000416b9

0002f018 <strerror>:
   2f018:	4601      	mov	r1, r0
   2f01a:	2300      	movs	r3, #0
   2f01c:	4802      	ldr	r0, [pc, #8]	; (2f028 <strerror+0x10>)
   2f01e:	461a      	mov	r2, r3
   2f020:	6800      	ldr	r0, [r0, #0]
   2f022:	f7ff be13 	b.w	2ec4c <_strerror_r>
   2f026:	bf00      	nop
   2f028:	20014a28 	.word	0x20014a28

0002f02c <_strtol_l.isra.0>:
   2f02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f030:	468c      	mov	ip, r1
   2f032:	4686      	mov	lr, r0
   2f034:	4e38      	ldr	r6, [pc, #224]	; (2f118 <_strtol_l.isra.0+0xec>)
   2f036:	4660      	mov	r0, ip
   2f038:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2f03c:	5da5      	ldrb	r5, [r4, r6]
   2f03e:	f015 0508 	ands.w	r5, r5, #8
   2f042:	d1f8      	bne.n	2f036 <_strtol_l.isra.0+0xa>
   2f044:	2c2d      	cmp	r4, #45	; 0x2d
   2f046:	d133      	bne.n	2f0b0 <_strtol_l.isra.0+0x84>
   2f048:	f89c 4000 	ldrb.w	r4, [ip]
   2f04c:	f04f 0801 	mov.w	r8, #1
   2f050:	f100 0c02 	add.w	ip, r0, #2
   2f054:	2b00      	cmp	r3, #0
   2f056:	d05b      	beq.n	2f110 <_strtol_l.isra.0+0xe4>
   2f058:	2b10      	cmp	r3, #16
   2f05a:	d10c      	bne.n	2f076 <_strtol_l.isra.0+0x4a>
   2f05c:	2c30      	cmp	r4, #48	; 0x30
   2f05e:	d10a      	bne.n	2f076 <_strtol_l.isra.0+0x4a>
   2f060:	f89c 0000 	ldrb.w	r0, [ip]
   2f064:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2f068:	2858      	cmp	r0, #88	; 0x58
   2f06a:	d14c      	bne.n	2f106 <_strtol_l.isra.0+0xda>
   2f06c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   2f070:	2310      	movs	r3, #16
   2f072:	f10c 0c02 	add.w	ip, ip, #2
   2f076:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   2f07a:	2600      	movs	r6, #0
   2f07c:	3f01      	subs	r7, #1
   2f07e:	4630      	mov	r0, r6
   2f080:	fbb7 f9f3 	udiv	r9, r7, r3
   2f084:	fb03 7a19 	mls	sl, r3, r9, r7
   2f088:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   2f08c:	2d09      	cmp	r5, #9
   2f08e:	d817      	bhi.n	2f0c0 <_strtol_l.isra.0+0x94>
   2f090:	462c      	mov	r4, r5
   2f092:	42a3      	cmp	r3, r4
   2f094:	dd23      	ble.n	2f0de <_strtol_l.isra.0+0xb2>
   2f096:	1c75      	adds	r5, r6, #1
   2f098:	d007      	beq.n	2f0aa <_strtol_l.isra.0+0x7e>
   2f09a:	4581      	cmp	r9, r0
   2f09c:	d31c      	bcc.n	2f0d8 <_strtol_l.isra.0+0xac>
   2f09e:	d101      	bne.n	2f0a4 <_strtol_l.isra.0+0x78>
   2f0a0:	45a2      	cmp	sl, r4
   2f0a2:	db19      	blt.n	2f0d8 <_strtol_l.isra.0+0xac>
   2f0a4:	fb00 4003 	mla	r0, r0, r3, r4
   2f0a8:	2601      	movs	r6, #1
   2f0aa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2f0ae:	e7eb      	b.n	2f088 <_strtol_l.isra.0+0x5c>
   2f0b0:	2c2b      	cmp	r4, #43	; 0x2b
   2f0b2:	46a8      	mov	r8, r5
   2f0b4:	bf04      	itt	eq
   2f0b6:	f89c 4000 	ldrbeq.w	r4, [ip]
   2f0ba:	f100 0c02 	addeq.w	ip, r0, #2
   2f0be:	e7c9      	b.n	2f054 <_strtol_l.isra.0+0x28>
   2f0c0:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   2f0c4:	2d19      	cmp	r5, #25
   2f0c6:	d801      	bhi.n	2f0cc <_strtol_l.isra.0+0xa0>
   2f0c8:	3c37      	subs	r4, #55	; 0x37
   2f0ca:	e7e2      	b.n	2f092 <_strtol_l.isra.0+0x66>
   2f0cc:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   2f0d0:	2d19      	cmp	r5, #25
   2f0d2:	d804      	bhi.n	2f0de <_strtol_l.isra.0+0xb2>
   2f0d4:	3c57      	subs	r4, #87	; 0x57
   2f0d6:	e7dc      	b.n	2f092 <_strtol_l.isra.0+0x66>
   2f0d8:	f04f 36ff 	mov.w	r6, #4294967295
   2f0dc:	e7e5      	b.n	2f0aa <_strtol_l.isra.0+0x7e>
   2f0de:	1c73      	adds	r3, r6, #1
   2f0e0:	d106      	bne.n	2f0f0 <_strtol_l.isra.0+0xc4>
   2f0e2:	2322      	movs	r3, #34	; 0x22
   2f0e4:	4638      	mov	r0, r7
   2f0e6:	f8ce 3000 	str.w	r3, [lr]
   2f0ea:	b942      	cbnz	r2, 2f0fe <_strtol_l.isra.0+0xd2>
   2f0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f0f0:	f1b8 0f00 	cmp.w	r8, #0
   2f0f4:	d000      	beq.n	2f0f8 <_strtol_l.isra.0+0xcc>
   2f0f6:	4240      	negs	r0, r0
   2f0f8:	2a00      	cmp	r2, #0
   2f0fa:	d0f7      	beq.n	2f0ec <_strtol_l.isra.0+0xc0>
   2f0fc:	b10e      	cbz	r6, 2f102 <_strtol_l.isra.0+0xd6>
   2f0fe:	f10c 31ff 	add.w	r1, ip, #4294967295
   2f102:	6011      	str	r1, [r2, #0]
   2f104:	e7f2      	b.n	2f0ec <_strtol_l.isra.0+0xc0>
   2f106:	2430      	movs	r4, #48	; 0x30
   2f108:	2b00      	cmp	r3, #0
   2f10a:	d1b4      	bne.n	2f076 <_strtol_l.isra.0+0x4a>
   2f10c:	2308      	movs	r3, #8
   2f10e:	e7b2      	b.n	2f076 <_strtol_l.isra.0+0x4a>
   2f110:	2c30      	cmp	r4, #48	; 0x30
   2f112:	d0a5      	beq.n	2f060 <_strtol_l.isra.0+0x34>
   2f114:	230a      	movs	r3, #10
   2f116:	e7ae      	b.n	2f076 <_strtol_l.isra.0+0x4a>
   2f118:	00040efd 	.word	0x00040efd

0002f11c <strtol>:
   2f11c:	4613      	mov	r3, r2
   2f11e:	460a      	mov	r2, r1
   2f120:	4601      	mov	r1, r0
   2f122:	4802      	ldr	r0, [pc, #8]	; (2f12c <strtol+0x10>)
   2f124:	6800      	ldr	r0, [r0, #0]
   2f126:	f7ff bf81 	b.w	2f02c <_strtol_l.isra.0>
   2f12a:	bf00      	nop
   2f12c:	20014a28 	.word	0x20014a28

0002f130 <_strtoll_l.isra.0>:
   2f130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f134:	4691      	mov	r9, r2
   2f136:	b087      	sub	sp, #28
   2f138:	4688      	mov	r8, r1
   2f13a:	461f      	mov	r7, r3
   2f13c:	460d      	mov	r5, r1
   2f13e:	4a46      	ldr	r2, [pc, #280]	; (2f258 <_strtoll_l.isra.0+0x128>)
   2f140:	9005      	str	r0, [sp, #20]
   2f142:	462b      	mov	r3, r5
   2f144:	f815 4b01 	ldrb.w	r4, [r5], #1
   2f148:	5ca6      	ldrb	r6, [r4, r2]
   2f14a:	f016 0608 	ands.w	r6, r6, #8
   2f14e:	d1f8      	bne.n	2f142 <_strtoll_l.isra.0+0x12>
   2f150:	2c2d      	cmp	r4, #45	; 0x2d
   2f152:	d148      	bne.n	2f1e6 <_strtoll_l.isra.0+0xb6>
   2f154:	782c      	ldrb	r4, [r5, #0]
   2f156:	2601      	movs	r6, #1
   2f158:	1c9d      	adds	r5, r3, #2
   2f15a:	2f00      	cmp	r7, #0
   2f15c:	d078      	beq.n	2f250 <_strtoll_l.isra.0+0x120>
   2f15e:	2f10      	cmp	r7, #16
   2f160:	d109      	bne.n	2f176 <_strtoll_l.isra.0+0x46>
   2f162:	2c30      	cmp	r4, #48	; 0x30
   2f164:	d107      	bne.n	2f176 <_strtoll_l.isra.0+0x46>
   2f166:	782b      	ldrb	r3, [r5, #0]
   2f168:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2f16c:	2b58      	cmp	r3, #88	; 0x58
   2f16e:	d16a      	bne.n	2f246 <_strtoll_l.isra.0+0x116>
   2f170:	786c      	ldrb	r4, [r5, #1]
   2f172:	2710      	movs	r7, #16
   2f174:	3502      	adds	r5, #2
   2f176:	f04f 32ff 	mov.w	r2, #4294967295
   2f17a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2f17e:	ea4f 7be7 	mov.w	fp, r7, asr #31
   2f182:	46ba      	mov	sl, r7
   2f184:	1990      	adds	r0, r2, r6
   2f186:	463a      	mov	r2, r7
   2f188:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
   2f18c:	465b      	mov	r3, fp
   2f18e:	e9cd 0100 	strd	r0, r1, [sp]
   2f192:	f7e2 f82d 	bl	111f0 <__aeabi_uldivmod>
   2f196:	2300      	movs	r3, #0
   2f198:	4696      	mov	lr, r2
   2f19a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2f19e:	2000      	movs	r0, #0
   2f1a0:	2100      	movs	r1, #0
   2f1a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2f1a6:	f1bc 0f09 	cmp.w	ip, #9
   2f1aa:	d821      	bhi.n	2f1f0 <_strtoll_l.isra.0+0xc0>
   2f1ac:	4664      	mov	r4, ip
   2f1ae:	42a7      	cmp	r7, r4
   2f1b0:	dd2f      	ble.n	2f212 <_strtoll_l.isra.0+0xe2>
   2f1b2:	1c5a      	adds	r2, r3, #1
   2f1b4:	d014      	beq.n	2f1e0 <_strtoll_l.isra.0+0xb0>
   2f1b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2f1ba:	428b      	cmp	r3, r1
   2f1bc:	bf08      	it	eq
   2f1be:	4282      	cmpeq	r2, r0
   2f1c0:	d324      	bcc.n	2f20c <_strtoll_l.isra.0+0xdc>
   2f1c2:	d101      	bne.n	2f1c8 <_strtoll_l.isra.0+0x98>
   2f1c4:	45a6      	cmp	lr, r4
   2f1c6:	db21      	blt.n	2f20c <_strtoll_l.isra.0+0xdc>
   2f1c8:	fb0a f301 	mul.w	r3, sl, r1
   2f1cc:	fb00 330b 	mla	r3, r0, fp, r3
   2f1d0:	fbaa 0100 	umull	r0, r1, sl, r0
   2f1d4:	4419      	add	r1, r3
   2f1d6:	1900      	adds	r0, r0, r4
   2f1d8:	f04f 0301 	mov.w	r3, #1
   2f1dc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2f1e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   2f1e4:	e7dd      	b.n	2f1a2 <_strtoll_l.isra.0+0x72>
   2f1e6:	2c2b      	cmp	r4, #43	; 0x2b
   2f1e8:	bf04      	itt	eq
   2f1ea:	782c      	ldrbeq	r4, [r5, #0]
   2f1ec:	1c9d      	addeq	r5, r3, #2
   2f1ee:	e7b4      	b.n	2f15a <_strtoll_l.isra.0+0x2a>
   2f1f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2f1f4:	f1bc 0f19 	cmp.w	ip, #25
   2f1f8:	d801      	bhi.n	2f1fe <_strtoll_l.isra.0+0xce>
   2f1fa:	3c37      	subs	r4, #55	; 0x37
   2f1fc:	e7d7      	b.n	2f1ae <_strtoll_l.isra.0+0x7e>
   2f1fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2f202:	f1bc 0f19 	cmp.w	ip, #25
   2f206:	d804      	bhi.n	2f212 <_strtoll_l.isra.0+0xe2>
   2f208:	3c57      	subs	r4, #87	; 0x57
   2f20a:	e7d0      	b.n	2f1ae <_strtoll_l.isra.0+0x7e>
   2f20c:	f04f 33ff 	mov.w	r3, #4294967295
   2f210:	e7e6      	b.n	2f1e0 <_strtoll_l.isra.0+0xb0>
   2f212:	1c5a      	adds	r2, r3, #1
   2f214:	d10a      	bne.n	2f22c <_strtoll_l.isra.0+0xfc>
   2f216:	2322      	movs	r3, #34	; 0x22
   2f218:	9a05      	ldr	r2, [sp, #20]
   2f21a:	e9dd 0100 	ldrd	r0, r1, [sp]
   2f21e:	6013      	str	r3, [r2, #0]
   2f220:	f1b9 0f00 	cmp.w	r9, #0
   2f224:	d10a      	bne.n	2f23c <_strtoll_l.isra.0+0x10c>
   2f226:	b007      	add	sp, #28
   2f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f22c:	b116      	cbz	r6, 2f234 <_strtoll_l.isra.0+0x104>
   2f22e:	4240      	negs	r0, r0
   2f230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2f234:	f1b9 0f00 	cmp.w	r9, #0
   2f238:	d0f5      	beq.n	2f226 <_strtoll_l.isra.0+0xf6>
   2f23a:	b10b      	cbz	r3, 2f240 <_strtoll_l.isra.0+0x110>
   2f23c:	f105 38ff 	add.w	r8, r5, #4294967295
   2f240:	f8c9 8000 	str.w	r8, [r9]
   2f244:	e7ef      	b.n	2f226 <_strtoll_l.isra.0+0xf6>
   2f246:	2430      	movs	r4, #48	; 0x30
   2f248:	2f00      	cmp	r7, #0
   2f24a:	d194      	bne.n	2f176 <_strtoll_l.isra.0+0x46>
   2f24c:	2708      	movs	r7, #8
   2f24e:	e792      	b.n	2f176 <_strtoll_l.isra.0+0x46>
   2f250:	2c30      	cmp	r4, #48	; 0x30
   2f252:	d088      	beq.n	2f166 <_strtoll_l.isra.0+0x36>
   2f254:	270a      	movs	r7, #10
   2f256:	e78e      	b.n	2f176 <_strtoll_l.isra.0+0x46>
   2f258:	00040efd 	.word	0x00040efd

0002f25c <strtoll>:
   2f25c:	4613      	mov	r3, r2
   2f25e:	460a      	mov	r2, r1
   2f260:	4601      	mov	r1, r0
   2f262:	4802      	ldr	r0, [pc, #8]	; (2f26c <strtoll+0x10>)
   2f264:	6800      	ldr	r0, [r0, #0]
   2f266:	f7ff bf63 	b.w	2f130 <_strtoll_l.isra.0>
   2f26a:	bf00      	nop
   2f26c:	20014a28 	.word	0x20014a28

0002f270 <_strtoul_l.isra.0>:
   2f270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f274:	468c      	mov	ip, r1
   2f276:	4686      	mov	lr, r0
   2f278:	4e39      	ldr	r6, [pc, #228]	; (2f360 <_strtoul_l.isra.0+0xf0>)
   2f27a:	4660      	mov	r0, ip
   2f27c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2f280:	5da5      	ldrb	r5, [r4, r6]
   2f282:	f015 0508 	ands.w	r5, r5, #8
   2f286:	d1f8      	bne.n	2f27a <_strtoul_l.isra.0+0xa>
   2f288:	2c2d      	cmp	r4, #45	; 0x2d
   2f28a:	d134      	bne.n	2f2f6 <_strtoul_l.isra.0+0x86>
   2f28c:	f89c 4000 	ldrb.w	r4, [ip]
   2f290:	f04f 0801 	mov.w	r8, #1
   2f294:	f100 0c02 	add.w	ip, r0, #2
   2f298:	2b00      	cmp	r3, #0
   2f29a:	d05d      	beq.n	2f358 <_strtoul_l.isra.0+0xe8>
   2f29c:	2b10      	cmp	r3, #16
   2f29e:	d10c      	bne.n	2f2ba <_strtoul_l.isra.0+0x4a>
   2f2a0:	2c30      	cmp	r4, #48	; 0x30
   2f2a2:	d10a      	bne.n	2f2ba <_strtoul_l.isra.0+0x4a>
   2f2a4:	f89c 0000 	ldrb.w	r0, [ip]
   2f2a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2f2ac:	2858      	cmp	r0, #88	; 0x58
   2f2ae:	d14e      	bne.n	2f34e <_strtoul_l.isra.0+0xde>
   2f2b0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   2f2b4:	2310      	movs	r3, #16
   2f2b6:	f10c 0c02 	add.w	ip, ip, #2
   2f2ba:	f04f 37ff 	mov.w	r7, #4294967295
   2f2be:	2500      	movs	r5, #0
   2f2c0:	fbb7 f7f3 	udiv	r7, r7, r3
   2f2c4:	fb03 f907 	mul.w	r9, r3, r7
   2f2c8:	4628      	mov	r0, r5
   2f2ca:	ea6f 0909 	mvn.w	r9, r9
   2f2ce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2f2d2:	2e09      	cmp	r6, #9
   2f2d4:	d817      	bhi.n	2f306 <_strtoul_l.isra.0+0x96>
   2f2d6:	4634      	mov	r4, r6
   2f2d8:	42a3      	cmp	r3, r4
   2f2da:	dd23      	ble.n	2f324 <_strtoul_l.isra.0+0xb4>
   2f2dc:	2d00      	cmp	r5, #0
   2f2de:	db1e      	blt.n	2f31e <_strtoul_l.isra.0+0xae>
   2f2e0:	4287      	cmp	r7, r0
   2f2e2:	d31c      	bcc.n	2f31e <_strtoul_l.isra.0+0xae>
   2f2e4:	d101      	bne.n	2f2ea <_strtoul_l.isra.0+0x7a>
   2f2e6:	45a1      	cmp	r9, r4
   2f2e8:	db19      	blt.n	2f31e <_strtoul_l.isra.0+0xae>
   2f2ea:	fb00 4003 	mla	r0, r0, r3, r4
   2f2ee:	2501      	movs	r5, #1
   2f2f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2f2f4:	e7eb      	b.n	2f2ce <_strtoul_l.isra.0+0x5e>
   2f2f6:	2c2b      	cmp	r4, #43	; 0x2b
   2f2f8:	46a8      	mov	r8, r5
   2f2fa:	bf04      	itt	eq
   2f2fc:	f89c 4000 	ldrbeq.w	r4, [ip]
   2f300:	f100 0c02 	addeq.w	ip, r0, #2
   2f304:	e7c8      	b.n	2f298 <_strtoul_l.isra.0+0x28>
   2f306:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2f30a:	2e19      	cmp	r6, #25
   2f30c:	d801      	bhi.n	2f312 <_strtoul_l.isra.0+0xa2>
   2f30e:	3c37      	subs	r4, #55	; 0x37
   2f310:	e7e2      	b.n	2f2d8 <_strtoul_l.isra.0+0x68>
   2f312:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2f316:	2e19      	cmp	r6, #25
   2f318:	d804      	bhi.n	2f324 <_strtoul_l.isra.0+0xb4>
   2f31a:	3c57      	subs	r4, #87	; 0x57
   2f31c:	e7dc      	b.n	2f2d8 <_strtoul_l.isra.0+0x68>
   2f31e:	f04f 35ff 	mov.w	r5, #4294967295
   2f322:	e7e5      	b.n	2f2f0 <_strtoul_l.isra.0+0x80>
   2f324:	2d00      	cmp	r5, #0
   2f326:	da07      	bge.n	2f338 <_strtoul_l.isra.0+0xc8>
   2f328:	2322      	movs	r3, #34	; 0x22
   2f32a:	f04f 30ff 	mov.w	r0, #4294967295
   2f32e:	f8ce 3000 	str.w	r3, [lr]
   2f332:	b942      	cbnz	r2, 2f346 <_strtoul_l.isra.0+0xd6>
   2f334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f338:	f1b8 0f00 	cmp.w	r8, #0
   2f33c:	d000      	beq.n	2f340 <_strtoul_l.isra.0+0xd0>
   2f33e:	4240      	negs	r0, r0
   2f340:	2a00      	cmp	r2, #0
   2f342:	d0f7      	beq.n	2f334 <_strtoul_l.isra.0+0xc4>
   2f344:	b10d      	cbz	r5, 2f34a <_strtoul_l.isra.0+0xda>
   2f346:	f10c 31ff 	add.w	r1, ip, #4294967295
   2f34a:	6011      	str	r1, [r2, #0]
   2f34c:	e7f2      	b.n	2f334 <_strtoul_l.isra.0+0xc4>
   2f34e:	2430      	movs	r4, #48	; 0x30
   2f350:	2b00      	cmp	r3, #0
   2f352:	d1b2      	bne.n	2f2ba <_strtoul_l.isra.0+0x4a>
   2f354:	2308      	movs	r3, #8
   2f356:	e7b0      	b.n	2f2ba <_strtoul_l.isra.0+0x4a>
   2f358:	2c30      	cmp	r4, #48	; 0x30
   2f35a:	d0a3      	beq.n	2f2a4 <_strtoul_l.isra.0+0x34>
   2f35c:	230a      	movs	r3, #10
   2f35e:	e7ac      	b.n	2f2ba <_strtoul_l.isra.0+0x4a>
   2f360:	00040efd 	.word	0x00040efd

0002f364 <strtoul>:
   2f364:	4613      	mov	r3, r2
   2f366:	460a      	mov	r2, r1
   2f368:	4601      	mov	r1, r0
   2f36a:	4802      	ldr	r0, [pc, #8]	; (2f374 <strtoul+0x10>)
   2f36c:	6800      	ldr	r0, [r0, #0]
   2f36e:	f7ff bf7f 	b.w	2f270 <_strtoul_l.isra.0>
   2f372:	bf00      	nop
   2f374:	20014a28 	.word	0x20014a28

0002f378 <_localeconv_r>:
   2f378:	4800      	ldr	r0, [pc, #0]	; (2f37c <_localeconv_r+0x4>)
   2f37a:	4770      	bx	lr
   2f37c:	20014b7c 	.word	0x20014b7c

0002f380 <__malloc_lock>:
   2f380:	4801      	ldr	r0, [pc, #4]	; (2f388 <__malloc_lock+0x8>)
   2f382:	f009 b863 	b.w	3844c <__retarget_lock_acquire_recursive>
   2f386:	bf00      	nop
   2f388:	2001dcd0 	.word	0x2001dcd0

0002f38c <__malloc_unlock>:
   2f38c:	4801      	ldr	r0, [pc, #4]	; (2f394 <__malloc_unlock+0x8>)
   2f38e:	f009 b85e 	b.w	3844e <__retarget_lock_release_recursive>
   2f392:	bf00      	nop
   2f394:	2001dcd0 	.word	0x2001dcd0

0002f398 <__pow5mult>:
   2f398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f39c:	4615      	mov	r5, r2
   2f39e:	f012 0203 	ands.w	r2, r2, #3
   2f3a2:	4606      	mov	r6, r0
   2f3a4:	460f      	mov	r7, r1
   2f3a6:	d007      	beq.n	2f3b8 <__pow5mult+0x20>
   2f3a8:	3a01      	subs	r2, #1
   2f3aa:	4c21      	ldr	r4, [pc, #132]	; (2f430 <__pow5mult+0x98>)
   2f3ac:	2300      	movs	r3, #0
   2f3ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2f3b2:	f008 fc6e 	bl	37c92 <__multadd>
   2f3b6:	4607      	mov	r7, r0
   2f3b8:	10ad      	asrs	r5, r5, #2
   2f3ba:	d035      	beq.n	2f428 <__pow5mult+0x90>
   2f3bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2f3be:	b93c      	cbnz	r4, 2f3d0 <__pow5mult+0x38>
   2f3c0:	2010      	movs	r0, #16
   2f3c2:	f7fe ffc5 	bl	2e350 <malloc>
   2f3c6:	6270      	str	r0, [r6, #36]	; 0x24
   2f3c8:	6004      	str	r4, [r0, #0]
   2f3ca:	60c4      	str	r4, [r0, #12]
   2f3cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2f3d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2f3d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2f3d8:	b94c      	cbnz	r4, 2f3ee <__pow5mult+0x56>
   2f3da:	f240 2171 	movw	r1, #625	; 0x271
   2f3de:	4630      	mov	r0, r6
   2f3e0:	f008 fce4 	bl	37dac <__i2b>
   2f3e4:	2300      	movs	r3, #0
   2f3e6:	4604      	mov	r4, r0
   2f3e8:	f8c8 0008 	str.w	r0, [r8, #8]
   2f3ec:	6003      	str	r3, [r0, #0]
   2f3ee:	f04f 0900 	mov.w	r9, #0
   2f3f2:	07eb      	lsls	r3, r5, #31
   2f3f4:	d50a      	bpl.n	2f40c <__pow5mult+0x74>
   2f3f6:	4639      	mov	r1, r7
   2f3f8:	4622      	mov	r2, r4
   2f3fa:	4630      	mov	r0, r6
   2f3fc:	f008 fcdf 	bl	37dbe <__multiply>
   2f400:	4680      	mov	r8, r0
   2f402:	4639      	mov	r1, r7
   2f404:	4630      	mov	r0, r6
   2f406:	4647      	mov	r7, r8
   2f408:	f008 fc2c 	bl	37c64 <_Bfree>
   2f40c:	106d      	asrs	r5, r5, #1
   2f40e:	d00b      	beq.n	2f428 <__pow5mult+0x90>
   2f410:	6820      	ldr	r0, [r4, #0]
   2f412:	b938      	cbnz	r0, 2f424 <__pow5mult+0x8c>
   2f414:	4622      	mov	r2, r4
   2f416:	4621      	mov	r1, r4
   2f418:	4630      	mov	r0, r6
   2f41a:	f008 fcd0 	bl	37dbe <__multiply>
   2f41e:	6020      	str	r0, [r4, #0]
   2f420:	f8c0 9000 	str.w	r9, [r0]
   2f424:	4604      	mov	r4, r0
   2f426:	e7e4      	b.n	2f3f2 <__pow5mult+0x5a>
   2f428:	4638      	mov	r0, r7
   2f42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2f42e:	bf00      	nop
   2f430:	0003963c 	.word	0x0003963c

0002f434 <_svfiprintf_r>:
   2f434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f438:	4698      	mov	r8, r3
   2f43a:	898b      	ldrh	r3, [r1, #12]
   2f43c:	b09d      	sub	sp, #116	; 0x74
   2f43e:	4607      	mov	r7, r0
   2f440:	061b      	lsls	r3, r3, #24
   2f442:	460d      	mov	r5, r1
   2f444:	4614      	mov	r4, r2
   2f446:	d50e      	bpl.n	2f466 <_svfiprintf_r+0x32>
   2f448:	690b      	ldr	r3, [r1, #16]
   2f44a:	b963      	cbnz	r3, 2f466 <_svfiprintf_r+0x32>
   2f44c:	2140      	movs	r1, #64	; 0x40
   2f44e:	f7fe ffdd 	bl	2e40c <_malloc_r>
   2f452:	6028      	str	r0, [r5, #0]
   2f454:	6128      	str	r0, [r5, #16]
   2f456:	b920      	cbnz	r0, 2f462 <_svfiprintf_r+0x2e>
   2f458:	230c      	movs	r3, #12
   2f45a:	603b      	str	r3, [r7, #0]
   2f45c:	f04f 30ff 	mov.w	r0, #4294967295
   2f460:	e0d1      	b.n	2f606 <_svfiprintf_r+0x1d2>
   2f462:	2340      	movs	r3, #64	; 0x40
   2f464:	616b      	str	r3, [r5, #20]
   2f466:	2300      	movs	r3, #0
   2f468:	f8cd 800c 	str.w	r8, [sp, #12]
   2f46c:	f04f 0901 	mov.w	r9, #1
   2f470:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 2f620 <_svfiprintf_r+0x1ec>
   2f474:	9309      	str	r3, [sp, #36]	; 0x24
   2f476:	2320      	movs	r3, #32
   2f478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2f47c:	2330      	movs	r3, #48	; 0x30
   2f47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2f482:	4623      	mov	r3, r4
   2f484:	469a      	mov	sl, r3
   2f486:	f813 2b01 	ldrb.w	r2, [r3], #1
   2f48a:	b10a      	cbz	r2, 2f490 <_svfiprintf_r+0x5c>
   2f48c:	2a25      	cmp	r2, #37	; 0x25
   2f48e:	d1f9      	bne.n	2f484 <_svfiprintf_r+0x50>
   2f490:	ebba 0b04 	subs.w	fp, sl, r4
   2f494:	d00b      	beq.n	2f4ae <_svfiprintf_r+0x7a>
   2f496:	465b      	mov	r3, fp
   2f498:	4622      	mov	r2, r4
   2f49a:	4629      	mov	r1, r5
   2f49c:	4638      	mov	r0, r7
   2f49e:	f008 fea3 	bl	381e8 <__ssputs_r>
   2f4a2:	3001      	adds	r0, #1
   2f4a4:	f000 80aa 	beq.w	2f5fc <_svfiprintf_r+0x1c8>
   2f4a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2f4aa:	445a      	add	r2, fp
   2f4ac:	9209      	str	r2, [sp, #36]	; 0x24
   2f4ae:	f89a 3000 	ldrb.w	r3, [sl]
   2f4b2:	2b00      	cmp	r3, #0
   2f4b4:	f000 80a2 	beq.w	2f5fc <_svfiprintf_r+0x1c8>
   2f4b8:	2300      	movs	r3, #0
   2f4ba:	f04f 32ff 	mov.w	r2, #4294967295
   2f4be:	f10a 0a01 	add.w	sl, sl, #1
   2f4c2:	9304      	str	r3, [sp, #16]
   2f4c4:	9307      	str	r3, [sp, #28]
   2f4c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2f4ca:	931a      	str	r3, [sp, #104]	; 0x68
   2f4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2f4d0:	4654      	mov	r4, sl
   2f4d2:	2205      	movs	r2, #5
   2f4d4:	4852      	ldr	r0, [pc, #328]	; (2f620 <_svfiprintf_r+0x1ec>)
   2f4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   2f4da:	f008 f936 	bl	3774a <memchr>
   2f4de:	9a04      	ldr	r2, [sp, #16]
   2f4e0:	b9d8      	cbnz	r0, 2f51a <_svfiprintf_r+0xe6>
   2f4e2:	06d0      	lsls	r0, r2, #27
   2f4e4:	bf44      	itt	mi
   2f4e6:	2320      	movmi	r3, #32
   2f4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2f4ec:	0711      	lsls	r1, r2, #28
   2f4ee:	bf44      	itt	mi
   2f4f0:	232b      	movmi	r3, #43	; 0x2b
   2f4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2f4f6:	f89a 3000 	ldrb.w	r3, [sl]
   2f4fa:	2b2a      	cmp	r3, #42	; 0x2a
   2f4fc:	d015      	beq.n	2f52a <_svfiprintf_r+0xf6>
   2f4fe:	9a07      	ldr	r2, [sp, #28]
   2f500:	4654      	mov	r4, sl
   2f502:	2000      	movs	r0, #0
   2f504:	f04f 0c0a 	mov.w	ip, #10
   2f508:	4621      	mov	r1, r4
   2f50a:	f811 3b01 	ldrb.w	r3, [r1], #1
   2f50e:	3b30      	subs	r3, #48	; 0x30
   2f510:	2b09      	cmp	r3, #9
   2f512:	d94e      	bls.n	2f5b2 <_svfiprintf_r+0x17e>
   2f514:	b1b0      	cbz	r0, 2f544 <_svfiprintf_r+0x110>
   2f516:	9207      	str	r2, [sp, #28]
   2f518:	e014      	b.n	2f544 <_svfiprintf_r+0x110>
   2f51a:	eba0 0308 	sub.w	r3, r0, r8
   2f51e:	46a2      	mov	sl, r4
   2f520:	fa09 f303 	lsl.w	r3, r9, r3
   2f524:	4313      	orrs	r3, r2
   2f526:	9304      	str	r3, [sp, #16]
   2f528:	e7d2      	b.n	2f4d0 <_svfiprintf_r+0x9c>
   2f52a:	9b03      	ldr	r3, [sp, #12]
   2f52c:	1d19      	adds	r1, r3, #4
   2f52e:	681b      	ldr	r3, [r3, #0]
   2f530:	2b00      	cmp	r3, #0
   2f532:	9103      	str	r1, [sp, #12]
   2f534:	bfbb      	ittet	lt
   2f536:	425b      	neglt	r3, r3
   2f538:	f042 0202 	orrlt.w	r2, r2, #2
   2f53c:	9307      	strge	r3, [sp, #28]
   2f53e:	9307      	strlt	r3, [sp, #28]
   2f540:	bfb8      	it	lt
   2f542:	9204      	strlt	r2, [sp, #16]
   2f544:	7823      	ldrb	r3, [r4, #0]
   2f546:	2b2e      	cmp	r3, #46	; 0x2e
   2f548:	d10c      	bne.n	2f564 <_svfiprintf_r+0x130>
   2f54a:	7863      	ldrb	r3, [r4, #1]
   2f54c:	2b2a      	cmp	r3, #42	; 0x2a
   2f54e:	d135      	bne.n	2f5bc <_svfiprintf_r+0x188>
   2f550:	9b03      	ldr	r3, [sp, #12]
   2f552:	3402      	adds	r4, #2
   2f554:	1d1a      	adds	r2, r3, #4
   2f556:	681b      	ldr	r3, [r3, #0]
   2f558:	2b00      	cmp	r3, #0
   2f55a:	9203      	str	r2, [sp, #12]
   2f55c:	bfb8      	it	lt
   2f55e:	f04f 33ff 	movlt.w	r3, #4294967295
   2f562:	9305      	str	r3, [sp, #20]
   2f564:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2f630 <_svfiprintf_r+0x1fc>
   2f568:	2203      	movs	r2, #3
   2f56a:	7821      	ldrb	r1, [r4, #0]
   2f56c:	4650      	mov	r0, sl
   2f56e:	f008 f8ec 	bl	3774a <memchr>
   2f572:	b140      	cbz	r0, 2f586 <_svfiprintf_r+0x152>
   2f574:	2340      	movs	r3, #64	; 0x40
   2f576:	eba0 000a 	sub.w	r0, r0, sl
   2f57a:	3401      	adds	r4, #1
   2f57c:	fa03 f000 	lsl.w	r0, r3, r0
   2f580:	9b04      	ldr	r3, [sp, #16]
   2f582:	4303      	orrs	r3, r0
   2f584:	9304      	str	r3, [sp, #16]
   2f586:	f814 1b01 	ldrb.w	r1, [r4], #1
   2f58a:	2206      	movs	r2, #6
   2f58c:	4825      	ldr	r0, [pc, #148]	; (2f624 <_svfiprintf_r+0x1f0>)
   2f58e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2f592:	f008 f8da 	bl	3774a <memchr>
   2f596:	2800      	cmp	r0, #0
   2f598:	d038      	beq.n	2f60c <_svfiprintf_r+0x1d8>
   2f59a:	4b23      	ldr	r3, [pc, #140]	; (2f628 <_svfiprintf_r+0x1f4>)
   2f59c:	bb1b      	cbnz	r3, 2f5e6 <_svfiprintf_r+0x1b2>
   2f59e:	9b03      	ldr	r3, [sp, #12]
   2f5a0:	3307      	adds	r3, #7
   2f5a2:	f023 0307 	bic.w	r3, r3, #7
   2f5a6:	3308      	adds	r3, #8
   2f5a8:	9303      	str	r3, [sp, #12]
   2f5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2f5ac:	4433      	add	r3, r6
   2f5ae:	9309      	str	r3, [sp, #36]	; 0x24
   2f5b0:	e767      	b.n	2f482 <_svfiprintf_r+0x4e>
   2f5b2:	fb0c 3202 	mla	r2, ip, r2, r3
   2f5b6:	460c      	mov	r4, r1
   2f5b8:	2001      	movs	r0, #1
   2f5ba:	e7a5      	b.n	2f508 <_svfiprintf_r+0xd4>
   2f5bc:	2300      	movs	r3, #0
   2f5be:	3401      	adds	r4, #1
   2f5c0:	f04f 0c0a 	mov.w	ip, #10
   2f5c4:	4619      	mov	r1, r3
   2f5c6:	9305      	str	r3, [sp, #20]
   2f5c8:	4620      	mov	r0, r4
   2f5ca:	f810 2b01 	ldrb.w	r2, [r0], #1
   2f5ce:	3a30      	subs	r2, #48	; 0x30
   2f5d0:	2a09      	cmp	r2, #9
   2f5d2:	d903      	bls.n	2f5dc <_svfiprintf_r+0x1a8>
   2f5d4:	2b00      	cmp	r3, #0
   2f5d6:	d0c5      	beq.n	2f564 <_svfiprintf_r+0x130>
   2f5d8:	9105      	str	r1, [sp, #20]
   2f5da:	e7c3      	b.n	2f564 <_svfiprintf_r+0x130>
   2f5dc:	fb0c 2101 	mla	r1, ip, r1, r2
   2f5e0:	4604      	mov	r4, r0
   2f5e2:	2301      	movs	r3, #1
   2f5e4:	e7f0      	b.n	2f5c8 <_svfiprintf_r+0x194>
   2f5e6:	ab03      	add	r3, sp, #12
   2f5e8:	462a      	mov	r2, r5
   2f5ea:	a904      	add	r1, sp, #16
   2f5ec:	4638      	mov	r0, r7
   2f5ee:	9300      	str	r3, [sp, #0]
   2f5f0:	4b0e      	ldr	r3, [pc, #56]	; (2f62c <_svfiprintf_r+0x1f8>)
   2f5f2:	f7fe ff65 	bl	2e4c0 <_printf_float>
   2f5f6:	1c42      	adds	r2, r0, #1
   2f5f8:	4606      	mov	r6, r0
   2f5fa:	d1d6      	bne.n	2f5aa <_svfiprintf_r+0x176>
   2f5fc:	89ab      	ldrh	r3, [r5, #12]
   2f5fe:	065b      	lsls	r3, r3, #25
   2f600:	f53f af2c 	bmi.w	2f45c <_svfiprintf_r+0x28>
   2f604:	9809      	ldr	r0, [sp, #36]	; 0x24
   2f606:	b01d      	add	sp, #116	; 0x74
   2f608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f60c:	ab03      	add	r3, sp, #12
   2f60e:	462a      	mov	r2, r5
   2f610:	a904      	add	r1, sp, #16
   2f612:	4638      	mov	r0, r7
   2f614:	9300      	str	r3, [sp, #0]
   2f616:	4b05      	ldr	r3, [pc, #20]	; (2f62c <_svfiprintf_r+0x1f8>)
   2f618:	f7ff f97c 	bl	2e914 <_printf_i>
   2f61c:	e7eb      	b.n	2f5f6 <_svfiprintf_r+0x1c2>
   2f61e:	bf00      	nop
   2f620:	000416d4 	.word	0x000416d4
   2f624:	000416de 	.word	0x000416de
   2f628:	0002e4c1 	.word	0x0002e4c1
   2f62c:	000381e9 	.word	0x000381e9
   2f630:	000416da 	.word	0x000416da

0002f634 <__ssvfiscanf_r>:
   2f634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f638:	460c      	mov	r4, r1
   2f63a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   2f63e:	2100      	movs	r1, #0
   2f640:	4606      	mov	r6, r0
   2f642:	f10d 0804 	add.w	r8, sp, #4
   2f646:	4fb4      	ldr	r7, [pc, #720]	; (2f918 <__ssvfiscanf_r+0x2e4>)
   2f648:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 2f924 <__ssvfiscanf_r+0x2f0>
   2f64c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2f650:	9300      	str	r3, [sp, #0]
   2f652:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2f656:	49b1      	ldr	r1, [pc, #708]	; (2f91c <__ssvfiscanf_r+0x2e8>)
   2f658:	91a0      	str	r1, [sp, #640]	; 0x280
   2f65a:	49b1      	ldr	r1, [pc, #708]	; (2f920 <__ssvfiscanf_r+0x2ec>)
   2f65c:	91a1      	str	r1, [sp, #644]	; 0x284
   2f65e:	f892 a000 	ldrb.w	sl, [r2]
   2f662:	f1ba 0f00 	cmp.w	sl, #0
   2f666:	f000 8154 	beq.w	2f912 <__ssvfiscanf_r+0x2de>
   2f66a:	f81a 3007 	ldrb.w	r3, [sl, r7]
   2f66e:	1c55      	adds	r5, r2, #1
   2f670:	f013 0308 	ands.w	r3, r3, #8
   2f674:	d019      	beq.n	2f6aa <__ssvfiscanf_r+0x76>
   2f676:	6863      	ldr	r3, [r4, #4]
   2f678:	2b00      	cmp	r3, #0
   2f67a:	dd0f      	ble.n	2f69c <__ssvfiscanf_r+0x68>
   2f67c:	6823      	ldr	r3, [r4, #0]
   2f67e:	781a      	ldrb	r2, [r3, #0]
   2f680:	5cba      	ldrb	r2, [r7, r2]
   2f682:	0712      	lsls	r2, r2, #28
   2f684:	d401      	bmi.n	2f68a <__ssvfiscanf_r+0x56>
   2f686:	462a      	mov	r2, r5
   2f688:	e7e9      	b.n	2f65e <__ssvfiscanf_r+0x2a>
   2f68a:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2f68c:	3301      	adds	r3, #1
   2f68e:	3201      	adds	r2, #1
   2f690:	6023      	str	r3, [r4, #0]
   2f692:	9245      	str	r2, [sp, #276]	; 0x114
   2f694:	6862      	ldr	r2, [r4, #4]
   2f696:	3a01      	subs	r2, #1
   2f698:	6062      	str	r2, [r4, #4]
   2f69a:	e7ec      	b.n	2f676 <__ssvfiscanf_r+0x42>
   2f69c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2f69e:	4621      	mov	r1, r4
   2f6a0:	4630      	mov	r0, r6
   2f6a2:	4798      	blx	r3
   2f6a4:	2800      	cmp	r0, #0
   2f6a6:	d0e9      	beq.n	2f67c <__ssvfiscanf_r+0x48>
   2f6a8:	e7ed      	b.n	2f686 <__ssvfiscanf_r+0x52>
   2f6aa:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   2f6ae:	f040 8086 	bne.w	2f7be <__ssvfiscanf_r+0x18a>
   2f6b2:	9341      	str	r3, [sp, #260]	; 0x104
   2f6b4:	9343      	str	r3, [sp, #268]	; 0x10c
   2f6b6:	7853      	ldrb	r3, [r2, #1]
   2f6b8:	2b2a      	cmp	r3, #42	; 0x2a
   2f6ba:	bf04      	itt	eq
   2f6bc:	2310      	moveq	r3, #16
   2f6be:	1c95      	addeq	r5, r2, #2
   2f6c0:	f04f 020a 	mov.w	r2, #10
   2f6c4:	bf08      	it	eq
   2f6c6:	9341      	streq	r3, [sp, #260]	; 0x104
   2f6c8:	46ab      	mov	fp, r5
   2f6ca:	f81b 1b01 	ldrb.w	r1, [fp], #1
   2f6ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2f6d2:	2b09      	cmp	r3, #9
   2f6d4:	d91d      	bls.n	2f712 <__ssvfiscanf_r+0xde>
   2f6d6:	2203      	movs	r2, #3
   2f6d8:	4892      	ldr	r0, [pc, #584]	; (2f924 <__ssvfiscanf_r+0x2f0>)
   2f6da:	f008 f836 	bl	3774a <memchr>
   2f6de:	b140      	cbz	r0, 2f6f2 <__ssvfiscanf_r+0xbe>
   2f6e0:	2301      	movs	r3, #1
   2f6e2:	eba0 0009 	sub.w	r0, r0, r9
   2f6e6:	465d      	mov	r5, fp
   2f6e8:	fa03 f000 	lsl.w	r0, r3, r0
   2f6ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2f6ee:	4318      	orrs	r0, r3
   2f6f0:	9041      	str	r0, [sp, #260]	; 0x104
   2f6f2:	f815 3b01 	ldrb.w	r3, [r5], #1
   2f6f6:	2b78      	cmp	r3, #120	; 0x78
   2f6f8:	d806      	bhi.n	2f708 <__ssvfiscanf_r+0xd4>
   2f6fa:	2b57      	cmp	r3, #87	; 0x57
   2f6fc:	d810      	bhi.n	2f720 <__ssvfiscanf_r+0xec>
   2f6fe:	2b25      	cmp	r3, #37	; 0x25
   2f700:	d05d      	beq.n	2f7be <__ssvfiscanf_r+0x18a>
   2f702:	d857      	bhi.n	2f7b4 <__ssvfiscanf_r+0x180>
   2f704:	2b00      	cmp	r3, #0
   2f706:	d075      	beq.n	2f7f4 <__ssvfiscanf_r+0x1c0>
   2f708:	2303      	movs	r3, #3
   2f70a:	9347      	str	r3, [sp, #284]	; 0x11c
   2f70c:	230a      	movs	r3, #10
   2f70e:	9342      	str	r3, [sp, #264]	; 0x108
   2f710:	e082      	b.n	2f818 <__ssvfiscanf_r+0x1e4>
   2f712:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2f714:	465d      	mov	r5, fp
   2f716:	fb02 1303 	mla	r3, r2, r3, r1
   2f71a:	3b30      	subs	r3, #48	; 0x30
   2f71c:	9343      	str	r3, [sp, #268]	; 0x10c
   2f71e:	e7d3      	b.n	2f6c8 <__ssvfiscanf_r+0x94>
   2f720:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   2f724:	2a20      	cmp	r2, #32
   2f726:	d8ef      	bhi.n	2f708 <__ssvfiscanf_r+0xd4>
   2f728:	a101      	add	r1, pc, #4	; (adr r1, 2f730 <__ssvfiscanf_r+0xfc>)
   2f72a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2f72e:	bf00      	nop
   2f730:	0002f803 	.word	0x0002f803
   2f734:	0002f709 	.word	0x0002f709
   2f738:	0002f709 	.word	0x0002f709
   2f73c:	0002f861 	.word	0x0002f861
   2f740:	0002f709 	.word	0x0002f709
   2f744:	0002f709 	.word	0x0002f709
   2f748:	0002f709 	.word	0x0002f709
   2f74c:	0002f709 	.word	0x0002f709
   2f750:	0002f709 	.word	0x0002f709
   2f754:	0002f709 	.word	0x0002f709
   2f758:	0002f709 	.word	0x0002f709
   2f75c:	0002f877 	.word	0x0002f877
   2f760:	0002f84d 	.word	0x0002f84d
   2f764:	0002f7bb 	.word	0x0002f7bb
   2f768:	0002f7bb 	.word	0x0002f7bb
   2f76c:	0002f7bb 	.word	0x0002f7bb
   2f770:	0002f709 	.word	0x0002f709
   2f774:	0002f851 	.word	0x0002f851
   2f778:	0002f709 	.word	0x0002f709
   2f77c:	0002f709 	.word	0x0002f709
   2f780:	0002f709 	.word	0x0002f709
   2f784:	0002f709 	.word	0x0002f709
   2f788:	0002f887 	.word	0x0002f887
   2f78c:	0002f859 	.word	0x0002f859
   2f790:	0002f7fb 	.word	0x0002f7fb
   2f794:	0002f709 	.word	0x0002f709
   2f798:	0002f709 	.word	0x0002f709
   2f79c:	0002f883 	.word	0x0002f883
   2f7a0:	0002f709 	.word	0x0002f709
   2f7a4:	0002f84d 	.word	0x0002f84d
   2f7a8:	0002f709 	.word	0x0002f709
   2f7ac:	0002f709 	.word	0x0002f709
   2f7b0:	0002f803 	.word	0x0002f803
   2f7b4:	3b45      	subs	r3, #69	; 0x45
   2f7b6:	2b02      	cmp	r3, #2
   2f7b8:	d8a6      	bhi.n	2f708 <__ssvfiscanf_r+0xd4>
   2f7ba:	2305      	movs	r3, #5
   2f7bc:	e02b      	b.n	2f816 <__ssvfiscanf_r+0x1e2>
   2f7be:	6863      	ldr	r3, [r4, #4]
   2f7c0:	2b00      	cmp	r3, #0
   2f7c2:	dd0d      	ble.n	2f7e0 <__ssvfiscanf_r+0x1ac>
   2f7c4:	6823      	ldr	r3, [r4, #0]
   2f7c6:	781a      	ldrb	r2, [r3, #0]
   2f7c8:	4552      	cmp	r2, sl
   2f7ca:	f040 80a2 	bne.w	2f912 <__ssvfiscanf_r+0x2de>
   2f7ce:	3301      	adds	r3, #1
   2f7d0:	6862      	ldr	r2, [r4, #4]
   2f7d2:	6023      	str	r3, [r4, #0]
   2f7d4:	3a01      	subs	r2, #1
   2f7d6:	9b45      	ldr	r3, [sp, #276]	; 0x114
   2f7d8:	6062      	str	r2, [r4, #4]
   2f7da:	3301      	adds	r3, #1
   2f7dc:	9345      	str	r3, [sp, #276]	; 0x114
   2f7de:	e752      	b.n	2f686 <__ssvfiscanf_r+0x52>
   2f7e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2f7e2:	4621      	mov	r1, r4
   2f7e4:	4630      	mov	r0, r6
   2f7e6:	4798      	blx	r3
   2f7e8:	2800      	cmp	r0, #0
   2f7ea:	d0eb      	beq.n	2f7c4 <__ssvfiscanf_r+0x190>
   2f7ec:	9844      	ldr	r0, [sp, #272]	; 0x110
   2f7ee:	2800      	cmp	r0, #0
   2f7f0:	f040 8085 	bne.w	2f8fe <__ssvfiscanf_r+0x2ca>
   2f7f4:	f04f 30ff 	mov.w	r0, #4294967295
   2f7f8:	e087      	b.n	2f90a <__ssvfiscanf_r+0x2d6>
   2f7fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2f7fc:	f042 0220 	orr.w	r2, r2, #32
   2f800:	9241      	str	r2, [sp, #260]	; 0x104
   2f802:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2f804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2f808:	9241      	str	r2, [sp, #260]	; 0x104
   2f80a:	2210      	movs	r2, #16
   2f80c:	2b6f      	cmp	r3, #111	; 0x6f
   2f80e:	9242      	str	r2, [sp, #264]	; 0x108
   2f810:	bf34      	ite	cc
   2f812:	2303      	movcc	r3, #3
   2f814:	2304      	movcs	r3, #4
   2f816:	9347      	str	r3, [sp, #284]	; 0x11c
   2f818:	6863      	ldr	r3, [r4, #4]
   2f81a:	2b00      	cmp	r3, #0
   2f81c:	dd42      	ble.n	2f8a4 <__ssvfiscanf_r+0x270>
   2f81e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2f820:	0659      	lsls	r1, r3, #25
   2f822:	d404      	bmi.n	2f82e <__ssvfiscanf_r+0x1fa>
   2f824:	6823      	ldr	r3, [r4, #0]
   2f826:	781a      	ldrb	r2, [r3, #0]
   2f828:	5cba      	ldrb	r2, [r7, r2]
   2f82a:	0712      	lsls	r2, r2, #28
   2f82c:	d441      	bmi.n	2f8b2 <__ssvfiscanf_r+0x27e>
   2f82e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   2f830:	2b02      	cmp	r3, #2
   2f832:	dc50      	bgt.n	2f8d6 <__ssvfiscanf_r+0x2a2>
   2f834:	466b      	mov	r3, sp
   2f836:	4622      	mov	r2, r4
   2f838:	a941      	add	r1, sp, #260	; 0x104
   2f83a:	4630      	mov	r0, r6
   2f83c:	f000 f876 	bl	2f92c <_scanf_chars>
   2f840:	2801      	cmp	r0, #1
   2f842:	d066      	beq.n	2f912 <__ssvfiscanf_r+0x2de>
   2f844:	2802      	cmp	r0, #2
   2f846:	f47f af1e 	bne.w	2f686 <__ssvfiscanf_r+0x52>
   2f84a:	e7cf      	b.n	2f7ec <__ssvfiscanf_r+0x1b8>
   2f84c:	220a      	movs	r2, #10
   2f84e:	e7dd      	b.n	2f80c <__ssvfiscanf_r+0x1d8>
   2f850:	2300      	movs	r3, #0
   2f852:	9342      	str	r3, [sp, #264]	; 0x108
   2f854:	2303      	movs	r3, #3
   2f856:	e7de      	b.n	2f816 <__ssvfiscanf_r+0x1e2>
   2f858:	2308      	movs	r3, #8
   2f85a:	9342      	str	r3, [sp, #264]	; 0x108
   2f85c:	2304      	movs	r3, #4
   2f85e:	e7da      	b.n	2f816 <__ssvfiscanf_r+0x1e2>
   2f860:	4629      	mov	r1, r5
   2f862:	4640      	mov	r0, r8
   2f864:	f008 fd75 	bl	38352 <__sccl>
   2f868:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2f86a:	4605      	mov	r5, r0
   2f86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2f870:	9341      	str	r3, [sp, #260]	; 0x104
   2f872:	2301      	movs	r3, #1
   2f874:	e7cf      	b.n	2f816 <__ssvfiscanf_r+0x1e2>
   2f876:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2f878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2f87c:	9341      	str	r3, [sp, #260]	; 0x104
   2f87e:	2300      	movs	r3, #0
   2f880:	e7c9      	b.n	2f816 <__ssvfiscanf_r+0x1e2>
   2f882:	2302      	movs	r3, #2
   2f884:	e7c7      	b.n	2f816 <__ssvfiscanf_r+0x1e2>
   2f886:	9841      	ldr	r0, [sp, #260]	; 0x104
   2f888:	06c3      	lsls	r3, r0, #27
   2f88a:	f53f aefc 	bmi.w	2f686 <__ssvfiscanf_r+0x52>
   2f88e:	9b00      	ldr	r3, [sp, #0]
   2f890:	07c0      	lsls	r0, r0, #31
   2f892:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2f894:	f103 0104 	add.w	r1, r3, #4
   2f898:	9100      	str	r1, [sp, #0]
   2f89a:	681b      	ldr	r3, [r3, #0]
   2f89c:	bf4c      	ite	mi
   2f89e:	801a      	strhmi	r2, [r3, #0]
   2f8a0:	601a      	strpl	r2, [r3, #0]
   2f8a2:	e6f0      	b.n	2f686 <__ssvfiscanf_r+0x52>
   2f8a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2f8a6:	4621      	mov	r1, r4
   2f8a8:	4630      	mov	r0, r6
   2f8aa:	4798      	blx	r3
   2f8ac:	2800      	cmp	r0, #0
   2f8ae:	d0b6      	beq.n	2f81e <__ssvfiscanf_r+0x1ea>
   2f8b0:	e79c      	b.n	2f7ec <__ssvfiscanf_r+0x1b8>
   2f8b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2f8b4:	3201      	adds	r2, #1
   2f8b6:	9245      	str	r2, [sp, #276]	; 0x114
   2f8b8:	6862      	ldr	r2, [r4, #4]
   2f8ba:	3a01      	subs	r2, #1
   2f8bc:	2a00      	cmp	r2, #0
   2f8be:	6062      	str	r2, [r4, #4]
   2f8c0:	dd02      	ble.n	2f8c8 <__ssvfiscanf_r+0x294>
   2f8c2:	3301      	adds	r3, #1
   2f8c4:	6023      	str	r3, [r4, #0]
   2f8c6:	e7ad      	b.n	2f824 <__ssvfiscanf_r+0x1f0>
   2f8c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2f8ca:	4621      	mov	r1, r4
   2f8cc:	4630      	mov	r0, r6
   2f8ce:	4798      	blx	r3
   2f8d0:	2800      	cmp	r0, #0
   2f8d2:	d0a7      	beq.n	2f824 <__ssvfiscanf_r+0x1f0>
   2f8d4:	e78a      	b.n	2f7ec <__ssvfiscanf_r+0x1b8>
   2f8d6:	2b04      	cmp	r3, #4
   2f8d8:	dc06      	bgt.n	2f8e8 <__ssvfiscanf_r+0x2b4>
   2f8da:	466b      	mov	r3, sp
   2f8dc:	4622      	mov	r2, r4
   2f8de:	a941      	add	r1, sp, #260	; 0x104
   2f8e0:	4630      	mov	r0, r6
   2f8e2:	f000 f87b 	bl	2f9dc <_scanf_i>
   2f8e6:	e7ab      	b.n	2f840 <__ssvfiscanf_r+0x20c>
   2f8e8:	4b0f      	ldr	r3, [pc, #60]	; (2f928 <__ssvfiscanf_r+0x2f4>)
   2f8ea:	2b00      	cmp	r3, #0
   2f8ec:	f43f aecb 	beq.w	2f686 <__ssvfiscanf_r+0x52>
   2f8f0:	466b      	mov	r3, sp
   2f8f2:	4622      	mov	r2, r4
   2f8f4:	a941      	add	r1, sp, #260	; 0x104
   2f8f6:	4630      	mov	r0, r6
   2f8f8:	e000      	b.n	2f8fc <__ssvfiscanf_r+0x2c8>
   2f8fa:	bf00      	nop
   2f8fc:	e7a0      	b.n	2f840 <__ssvfiscanf_r+0x20c>
   2f8fe:	89a3      	ldrh	r3, [r4, #12]
   2f900:	f013 0f40 	tst.w	r3, #64	; 0x40
   2f904:	bf18      	it	ne
   2f906:	f04f 30ff 	movne.w	r0, #4294967295
   2f90a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   2f90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f912:	9844      	ldr	r0, [sp, #272]	; 0x110
   2f914:	e7f9      	b.n	2f90a <__ssvfiscanf_r+0x2d6>
   2f916:	bf00      	nop
   2f918:	00040efd 	.word	0x00040efd
   2f91c:	0003829f 	.word	0x0003829f
   2f920:	00038319 	.word	0x00038319
   2f924:	000416da 	.word	0x000416da
   2f928:	00000000 	.word	0x00000000

0002f92c <_scanf_chars>:
   2f92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f930:	4615      	mov	r5, r2
   2f932:	688a      	ldr	r2, [r1, #8]
   2f934:	4680      	mov	r8, r0
   2f936:	460c      	mov	r4, r1
   2f938:	b932      	cbnz	r2, 2f948 <_scanf_chars+0x1c>
   2f93a:	698a      	ldr	r2, [r1, #24]
   2f93c:	2a00      	cmp	r2, #0
   2f93e:	bf0c      	ite	eq
   2f940:	2201      	moveq	r2, #1
   2f942:	f04f 32ff 	movne.w	r2, #4294967295
   2f946:	608a      	str	r2, [r1, #8]
   2f948:	6822      	ldr	r2, [r4, #0]
   2f94a:	2700      	movs	r7, #0
   2f94c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2f9d8 <_scanf_chars+0xac>
   2f950:	06d1      	lsls	r1, r2, #27
   2f952:	bf5f      	itttt	pl
   2f954:	681a      	ldrpl	r2, [r3, #0]
   2f956:	1d11      	addpl	r1, r2, #4
   2f958:	6019      	strpl	r1, [r3, #0]
   2f95a:	6816      	ldrpl	r6, [r2, #0]
   2f95c:	69a0      	ldr	r0, [r4, #24]
   2f95e:	b188      	cbz	r0, 2f984 <_scanf_chars+0x58>
   2f960:	2801      	cmp	r0, #1
   2f962:	d107      	bne.n	2f974 <_scanf_chars+0x48>
   2f964:	682b      	ldr	r3, [r5, #0]
   2f966:	781a      	ldrb	r2, [r3, #0]
   2f968:	6963      	ldr	r3, [r4, #20]
   2f96a:	5c9b      	ldrb	r3, [r3, r2]
   2f96c:	b953      	cbnz	r3, 2f984 <_scanf_chars+0x58>
   2f96e:	bb27      	cbnz	r7, 2f9ba <_scanf_chars+0x8e>
   2f970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2f974:	2802      	cmp	r0, #2
   2f976:	d120      	bne.n	2f9ba <_scanf_chars+0x8e>
   2f978:	682b      	ldr	r3, [r5, #0]
   2f97a:	781b      	ldrb	r3, [r3, #0]
   2f97c:	f813 3009 	ldrb.w	r3, [r3, r9]
   2f980:	071b      	lsls	r3, r3, #28
   2f982:	d41a      	bmi.n	2f9ba <_scanf_chars+0x8e>
   2f984:	6823      	ldr	r3, [r4, #0]
   2f986:	3701      	adds	r7, #1
   2f988:	06da      	lsls	r2, r3, #27
   2f98a:	bf5e      	ittt	pl
   2f98c:	682b      	ldrpl	r3, [r5, #0]
   2f98e:	781b      	ldrbpl	r3, [r3, #0]
   2f990:	f806 3b01 	strbpl.w	r3, [r6], #1
   2f994:	682a      	ldr	r2, [r5, #0]
   2f996:	686b      	ldr	r3, [r5, #4]
   2f998:	3201      	adds	r2, #1
   2f99a:	3b01      	subs	r3, #1
   2f99c:	602a      	str	r2, [r5, #0]
   2f99e:	68a2      	ldr	r2, [r4, #8]
   2f9a0:	606b      	str	r3, [r5, #4]
   2f9a2:	3a01      	subs	r2, #1
   2f9a4:	60a2      	str	r2, [r4, #8]
   2f9a6:	b142      	cbz	r2, 2f9ba <_scanf_chars+0x8e>
   2f9a8:	2b00      	cmp	r3, #0
   2f9aa:	dcd7      	bgt.n	2f95c <_scanf_chars+0x30>
   2f9ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2f9b0:	4629      	mov	r1, r5
   2f9b2:	4640      	mov	r0, r8
   2f9b4:	4798      	blx	r3
   2f9b6:	2800      	cmp	r0, #0
   2f9b8:	d0d0      	beq.n	2f95c <_scanf_chars+0x30>
   2f9ba:	6823      	ldr	r3, [r4, #0]
   2f9bc:	f013 0310 	ands.w	r3, r3, #16
   2f9c0:	d105      	bne.n	2f9ce <_scanf_chars+0xa2>
   2f9c2:	68e2      	ldr	r2, [r4, #12]
   2f9c4:	3201      	adds	r2, #1
   2f9c6:	60e2      	str	r2, [r4, #12]
   2f9c8:	69a2      	ldr	r2, [r4, #24]
   2f9ca:	b102      	cbz	r2, 2f9ce <_scanf_chars+0xa2>
   2f9cc:	7033      	strb	r3, [r6, #0]
   2f9ce:	6923      	ldr	r3, [r4, #16]
   2f9d0:	2000      	movs	r0, #0
   2f9d2:	441f      	add	r7, r3
   2f9d4:	6127      	str	r7, [r4, #16]
   2f9d6:	e7cb      	b.n	2f970 <_scanf_chars+0x44>
   2f9d8:	00040efd 	.word	0x00040efd

0002f9dc <_scanf_i>:
   2f9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f9e0:	4698      	mov	r8, r3
   2f9e2:	b087      	sub	sp, #28
   2f9e4:	4b72      	ldr	r3, [pc, #456]	; (2fbb0 <_scanf_i+0x1d4>)
   2f9e6:	460c      	mov	r4, r1
   2f9e8:	4682      	mov	sl, r0
   2f9ea:	4616      	mov	r6, r2
   2f9ec:	4627      	mov	r7, r4
   2f9ee:	f04f 0b00 	mov.w	fp, #0
   2f9f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2f9f6:	ab03      	add	r3, sp, #12
   2f9f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2f9fc:	4b6d      	ldr	r3, [pc, #436]	; (2fbb4 <_scanf_i+0x1d8>)
   2f9fe:	69a1      	ldr	r1, [r4, #24]
   2fa00:	4a6d      	ldr	r2, [pc, #436]	; (2fbb8 <_scanf_i+0x1dc>)
   2fa02:	2903      	cmp	r1, #3
   2fa04:	bf18      	it	ne
   2fa06:	461a      	movne	r2, r3
   2fa08:	68a3      	ldr	r3, [r4, #8]
   2fa0a:	9201      	str	r2, [sp, #4]
   2fa0c:	1e5a      	subs	r2, r3, #1
   2fa0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   2fa12:	bf89      	itett	hi
   2fa14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   2fa18:	f04f 0900 	movls.w	r9, #0
   2fa1c:	eb03 0905 	addhi.w	r9, r3, r5
   2fa20:	f240 135d 	movwhi	r3, #349	; 0x15d
   2fa24:	bf88      	it	hi
   2fa26:	60a3      	strhi	r3, [r4, #8]
   2fa28:	f857 3b1c 	ldr.w	r3, [r7], #28
   2fa2c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   2fa30:	463d      	mov	r5, r7
   2fa32:	6023      	str	r3, [r4, #0]
   2fa34:	6831      	ldr	r1, [r6, #0]
   2fa36:	ab03      	add	r3, sp, #12
   2fa38:	2202      	movs	r2, #2
   2fa3a:	7809      	ldrb	r1, [r1, #0]
   2fa3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   2fa40:	f007 fe83 	bl	3774a <memchr>
   2fa44:	b328      	cbz	r0, 2fa92 <_scanf_i+0xb6>
   2fa46:	f1bb 0f01 	cmp.w	fp, #1
   2fa4a:	d159      	bne.n	2fb00 <_scanf_i+0x124>
   2fa4c:	6862      	ldr	r2, [r4, #4]
   2fa4e:	b92a      	cbnz	r2, 2fa5c <_scanf_i+0x80>
   2fa50:	6822      	ldr	r2, [r4, #0]
   2fa52:	2308      	movs	r3, #8
   2fa54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2fa58:	6063      	str	r3, [r4, #4]
   2fa5a:	6022      	str	r2, [r4, #0]
   2fa5c:	6822      	ldr	r2, [r4, #0]
   2fa5e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   2fa62:	6022      	str	r2, [r4, #0]
   2fa64:	68a2      	ldr	r2, [r4, #8]
   2fa66:	1e51      	subs	r1, r2, #1
   2fa68:	60a1      	str	r1, [r4, #8]
   2fa6a:	b192      	cbz	r2, 2fa92 <_scanf_i+0xb6>
   2fa6c:	6832      	ldr	r2, [r6, #0]
   2fa6e:	1c51      	adds	r1, r2, #1
   2fa70:	6031      	str	r1, [r6, #0]
   2fa72:	7812      	ldrb	r2, [r2, #0]
   2fa74:	f805 2b01 	strb.w	r2, [r5], #1
   2fa78:	6872      	ldr	r2, [r6, #4]
   2fa7a:	3a01      	subs	r2, #1
   2fa7c:	2a00      	cmp	r2, #0
   2fa7e:	6072      	str	r2, [r6, #4]
   2fa80:	dc07      	bgt.n	2fa92 <_scanf_i+0xb6>
   2fa82:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   2fa86:	4631      	mov	r1, r6
   2fa88:	4650      	mov	r0, sl
   2fa8a:	4790      	blx	r2
   2fa8c:	2800      	cmp	r0, #0
   2fa8e:	f040 8085 	bne.w	2fb9c <_scanf_i+0x1c0>
   2fa92:	f10b 0b01 	add.w	fp, fp, #1
   2fa96:	f1bb 0f03 	cmp.w	fp, #3
   2fa9a:	d1cb      	bne.n	2fa34 <_scanf_i+0x58>
   2fa9c:	6863      	ldr	r3, [r4, #4]
   2fa9e:	b90b      	cbnz	r3, 2faa4 <_scanf_i+0xc8>
   2faa0:	230a      	movs	r3, #10
   2faa2:	6063      	str	r3, [r4, #4]
   2faa4:	6863      	ldr	r3, [r4, #4]
   2faa6:	f04f 0b00 	mov.w	fp, #0
   2faaa:	4944      	ldr	r1, [pc, #272]	; (2fbbc <_scanf_i+0x1e0>)
   2faac:	6960      	ldr	r0, [r4, #20]
   2faae:	1ac9      	subs	r1, r1, r3
   2fab0:	f008 fc4f 	bl	38352 <__sccl>
   2fab4:	68a3      	ldr	r3, [r4, #8]
   2fab6:	6822      	ldr	r2, [r4, #0]
   2fab8:	2b00      	cmp	r3, #0
   2faba:	d03d      	beq.n	2fb38 <_scanf_i+0x15c>
   2fabc:	6831      	ldr	r1, [r6, #0]
   2fabe:	6960      	ldr	r0, [r4, #20]
   2fac0:	f891 c000 	ldrb.w	ip, [r1]
   2fac4:	f810 000c 	ldrb.w	r0, [r0, ip]
   2fac8:	2800      	cmp	r0, #0
   2faca:	d035      	beq.n	2fb38 <_scanf_i+0x15c>
   2facc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   2fad0:	d124      	bne.n	2fb1c <_scanf_i+0x140>
   2fad2:	0510      	lsls	r0, r2, #20
   2fad4:	d522      	bpl.n	2fb1c <_scanf_i+0x140>
   2fad6:	f10b 0b01 	add.w	fp, fp, #1
   2fada:	f1b9 0f00 	cmp.w	r9, #0
   2fade:	d003      	beq.n	2fae8 <_scanf_i+0x10c>
   2fae0:	3301      	adds	r3, #1
   2fae2:	f109 39ff 	add.w	r9, r9, #4294967295
   2fae6:	60a3      	str	r3, [r4, #8]
   2fae8:	6873      	ldr	r3, [r6, #4]
   2faea:	3b01      	subs	r3, #1
   2faec:	2b00      	cmp	r3, #0
   2faee:	6073      	str	r3, [r6, #4]
   2faf0:	dd1b      	ble.n	2fb2a <_scanf_i+0x14e>
   2faf2:	6833      	ldr	r3, [r6, #0]
   2faf4:	3301      	adds	r3, #1
   2faf6:	6033      	str	r3, [r6, #0]
   2faf8:	68a3      	ldr	r3, [r4, #8]
   2fafa:	3b01      	subs	r3, #1
   2fafc:	60a3      	str	r3, [r4, #8]
   2fafe:	e7d9      	b.n	2fab4 <_scanf_i+0xd8>
   2fb00:	f1bb 0f02 	cmp.w	fp, #2
   2fb04:	d1ae      	bne.n	2fa64 <_scanf_i+0x88>
   2fb06:	6822      	ldr	r2, [r4, #0]
   2fb08:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2fb0c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2fb10:	d1bf      	bne.n	2fa92 <_scanf_i+0xb6>
   2fb12:	2310      	movs	r3, #16
   2fb14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2fb18:	6063      	str	r3, [r4, #4]
   2fb1a:	e7a2      	b.n	2fa62 <_scanf_i+0x86>
   2fb1c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   2fb20:	6022      	str	r2, [r4, #0]
   2fb22:	780b      	ldrb	r3, [r1, #0]
   2fb24:	f805 3b01 	strb.w	r3, [r5], #1
   2fb28:	e7de      	b.n	2fae8 <_scanf_i+0x10c>
   2fb2a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2fb2e:	4631      	mov	r1, r6
   2fb30:	4650      	mov	r0, sl
   2fb32:	4798      	blx	r3
   2fb34:	2800      	cmp	r0, #0
   2fb36:	d0df      	beq.n	2faf8 <_scanf_i+0x11c>
   2fb38:	6823      	ldr	r3, [r4, #0]
   2fb3a:	05d9      	lsls	r1, r3, #23
   2fb3c:	d50d      	bpl.n	2fb5a <_scanf_i+0x17e>
   2fb3e:	42bd      	cmp	r5, r7
   2fb40:	d909      	bls.n	2fb56 <_scanf_i+0x17a>
   2fb42:	f105 39ff 	add.w	r9, r5, #4294967295
   2fb46:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2fb4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2fb4e:	4632      	mov	r2, r6
   2fb50:	464d      	mov	r5, r9
   2fb52:	4650      	mov	r0, sl
   2fb54:	4798      	blx	r3
   2fb56:	42bd      	cmp	r5, r7
   2fb58:	d028      	beq.n	2fbac <_scanf_i+0x1d0>
   2fb5a:	6822      	ldr	r2, [r4, #0]
   2fb5c:	f012 0210 	ands.w	r2, r2, #16
   2fb60:	d113      	bne.n	2fb8a <_scanf_i+0x1ae>
   2fb62:	702a      	strb	r2, [r5, #0]
   2fb64:	4639      	mov	r1, r7
   2fb66:	6863      	ldr	r3, [r4, #4]
   2fb68:	4650      	mov	r0, sl
   2fb6a:	9e01      	ldr	r6, [sp, #4]
   2fb6c:	47b0      	blx	r6
   2fb6e:	f8d8 3000 	ldr.w	r3, [r8]
   2fb72:	6821      	ldr	r1, [r4, #0]
   2fb74:	1d1a      	adds	r2, r3, #4
   2fb76:	f011 0f20 	tst.w	r1, #32
   2fb7a:	f8c8 2000 	str.w	r2, [r8]
   2fb7e:	681b      	ldr	r3, [r3, #0]
   2fb80:	d00f      	beq.n	2fba2 <_scanf_i+0x1c6>
   2fb82:	6018      	str	r0, [r3, #0]
   2fb84:	68e3      	ldr	r3, [r4, #12]
   2fb86:	3301      	adds	r3, #1
   2fb88:	60e3      	str	r3, [r4, #12]
   2fb8a:	1bed      	subs	r5, r5, r7
   2fb8c:	2000      	movs	r0, #0
   2fb8e:	44ab      	add	fp, r5
   2fb90:	6925      	ldr	r5, [r4, #16]
   2fb92:	445d      	add	r5, fp
   2fb94:	6125      	str	r5, [r4, #16]
   2fb96:	b007      	add	sp, #28
   2fb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb9c:	f04f 0b00 	mov.w	fp, #0
   2fba0:	e7ca      	b.n	2fb38 <_scanf_i+0x15c>
   2fba2:	07ca      	lsls	r2, r1, #31
   2fba4:	bf4c      	ite	mi
   2fba6:	8018      	strhmi	r0, [r3, #0]
   2fba8:	6018      	strpl	r0, [r3, #0]
   2fbaa:	e7eb      	b.n	2fb84 <_scanf_i+0x1a8>
   2fbac:	2001      	movs	r0, #1
   2fbae:	e7f2      	b.n	2fb96 <_scanf_i+0x1ba>
   2fbb0:	000389f8 	.word	0x000389f8
   2fbb4:	00037ab3 	.word	0x00037ab3
   2fbb8:	00037aaf 	.word	0x00037aaf
   2fbbc:	000416fe 	.word	0x000416fe

0002fbc0 <k_msgq_get_atomic>:
int k_msgq_get_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   2fbc0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2fbc2:	f04f 0520 	mov.w	r5, #32
   2fbc6:	f3ef 8411 	mrs	r4, BASEPRI
   2fbca:	f385 8811 	msr	BASEPRI, r5
   2fbce:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_get(msgq, data, timeout);
   2fbd2:	f7fa ff01 	bl	2a9d8 <z_impl_k_msgq_get>
	__asm__ volatile(
   2fbd6:	f384 8811 	msr	BASEPRI, r4
   2fbda:	f3bf 8f6f 	isb	sy
}
   2fbde:	bd38      	pop	{r3, r4, r5, pc}

0002fbe0 <k_msgq_put_atomic>:
int k_msgq_put_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   2fbe0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2fbe2:	f04f 0520 	mov.w	r5, #32
   2fbe6:	f3ef 8411 	mrs	r4, BASEPRI
   2fbea:	f385 8811 	msr	BASEPRI, r5
   2fbee:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_put(msgq, data, timeout);
   2fbf2:	f7fa fe49 	bl	2a888 <z_impl_k_msgq_put>
	__asm__ volatile(
   2fbf6:	f384 8811 	msr	BASEPRI, r4
   2fbfa:	f3bf 8f6f 	isb	sy
}
   2fbfe:	bd38      	pop	{r3, r4, r5, pc}

0002fc00 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2fc00:	b40c      	push	{r2, r3}
   2fc02:	4603      	mov	r3, r0
   2fc04:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2fc06:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2fc08:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2fc0a:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   2fc0c:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   2fc10:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2fc12:	4798      	blx	r3
	va_end(args);

	return res;
}
   2fc14:	b003      	add	sp, #12
   2fc16:	f85d eb04 	ldr.w	lr, [sp], #4
   2fc1a:	b002      	add	sp, #8
   2fc1c:	4770      	bx	lr

0002fc1e <sys_notify_validate>:
	if (notify == NULL) {
   2fc1e:	4603      	mov	r3, r0
   2fc20:	b140      	cbz	r0, 2fc34 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2fc22:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2fc24:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2fc28:	2a02      	cmp	r2, #2
   2fc2a:	d006      	beq.n	2fc3a <sys_notify_validate+0x1c>
   2fc2c:	2a03      	cmp	r2, #3
   2fc2e:	d004      	beq.n	2fc3a <sys_notify_validate+0x1c>
   2fc30:	2a01      	cmp	r2, #1
   2fc32:	d005      	beq.n	2fc40 <sys_notify_validate+0x22>
		return -EINVAL;
   2fc34:	f06f 0015 	mvn.w	r0, #21
}
   2fc38:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2fc3a:	681a      	ldr	r2, [r3, #0]
   2fc3c:	2a00      	cmp	r2, #0
   2fc3e:	d0f9      	beq.n	2fc34 <sys_notify_validate+0x16>
		notify->result = 0;
   2fc40:	2000      	movs	r0, #0
   2fc42:	6098      	str	r0, [r3, #8]
   2fc44:	4770      	bx	lr

0002fc46 <arch_printk_char_out>:
}
   2fc46:	2000      	movs	r0, #0
   2fc48:	4770      	bx	lr

0002fc4a <str_out>:
{
   2fc4a:	b530      	push	{r4, r5, lr}
   2fc4c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2fc4e:	680c      	ldr	r4, [r1, #0]
   2fc50:	1c55      	adds	r5, r2, #1
   2fc52:	b114      	cbz	r4, 2fc5a <str_out+0x10>
   2fc54:	684b      	ldr	r3, [r1, #4]
   2fc56:	4293      	cmp	r3, r2
   2fc58:	dc01      	bgt.n	2fc5e <str_out+0x14>
		ctx->count++;
   2fc5a:	608d      	str	r5, [r1, #8]
}
   2fc5c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2fc5e:	3b01      	subs	r3, #1
   2fc60:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2fc62:	bf08      	it	eq
   2fc64:	2200      	moveq	r2, #0
   2fc66:	608d      	str	r5, [r1, #8]
   2fc68:	bf0c      	ite	eq
   2fc6a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2fc6c:	54a0      	strbne	r0, [r4, r2]
   2fc6e:	e7f5      	b.n	2fc5c <str_out+0x12>

0002fc70 <printk>:
{
   2fc70:	b40f      	push	{r0, r1, r2, r3}
   2fc72:	b507      	push	{r0, r1, r2, lr}
   2fc74:	a904      	add	r1, sp, #16
   2fc76:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2fc7a:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   2fc7c:	f000 fb8d 	bl	3039a <z_log_printk>
}
   2fc80:	b003      	add	sp, #12
   2fc82:	f85d eb04 	ldr.w	lr, [sp], #4
   2fc86:	b004      	add	sp, #16
   2fc88:	4770      	bx	lr

0002fc8a <snprintk>:
{
   2fc8a:	b40c      	push	{r2, r3}
   2fc8c:	b507      	push	{r0, r1, r2, lr}
   2fc8e:	ab04      	add	r3, sp, #16
   2fc90:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2fc94:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2fc96:	f7e3 fd37 	bl	13708 <vsnprintk>
}
   2fc9a:	b003      	add	sp, #12
   2fc9c:	f85d eb04 	ldr.w	lr, [sp], #4
   2fca0:	b002      	add	sp, #8
   2fca2:	4770      	bx	lr

0002fca4 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2fca4:	2200      	movs	r2, #0
   2fca6:	4603      	mov	r3, r0
   2fca8:	6800      	ldr	r0, [r0, #0]
   2fcaa:	b900      	cbnz	r0, 2fcae <sys_slist_find_and_remove+0xa>
   2fcac:	4770      	bx	lr
   2fcae:	4288      	cmp	r0, r1
   2fcb0:	d110      	bne.n	2fcd4 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2fcb2:	6808      	ldr	r0, [r1, #0]
   2fcb4:	b942      	cbnz	r2, 2fcc8 <sys_slist_find_and_remove+0x24>
   2fcb6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2fcb8:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2fcba:	4291      	cmp	r1, r2
   2fcbc:	d100      	bne.n	2fcc0 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2fcbe:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2fcc0:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2fcc2:	2001      	movs	r0, #1
	parent->next = child;
   2fcc4:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2fcc6:	4770      	bx	lr
	parent->next = child;
   2fcc8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2fcca:	6858      	ldr	r0, [r3, #4]
   2fccc:	4281      	cmp	r1, r0
	list->tail = node;
   2fcce:	bf08      	it	eq
   2fcd0:	605a      	streq	r2, [r3, #4]
}
   2fcd2:	e7f5      	b.n	2fcc0 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2fcd4:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2fcd6:	6800      	ldr	r0, [r0, #0]
   2fcd8:	e7e7      	b.n	2fcaa <sys_slist_find_and_remove+0x6>

0002fcda <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2fcda:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2fcdc:	f013 0307 	ands.w	r3, r3, #7
   2fce0:	d105      	bne.n	2fcee <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2fce2:	6803      	ldr	r3, [r0, #0]
   2fce4:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2fce6:	bf0c      	ite	eq
   2fce8:	2000      	moveq	r0, #0
   2fcea:	2003      	movne	r0, #3
   2fcec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2fcee:	2b02      	cmp	r3, #2
   2fcf0:	d105      	bne.n	2fcfe <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2fcf2:	8bc3      	ldrh	r3, [r0, #30]
   2fcf4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2fcf6:	bf14      	ite	ne
   2fcf8:	2000      	movne	r0, #0
   2fcfa:	2004      	moveq	r0, #4
   2fcfc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2fcfe:	2b01      	cmp	r3, #1
   2fd00:	d105      	bne.n	2fd0e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2fd02:	6803      	ldr	r3, [r0, #0]
   2fd04:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2fd06:	bf0c      	ite	eq
   2fd08:	2000      	moveq	r0, #0
   2fd0a:	2005      	movne	r0, #5
   2fd0c:	4770      	bx	lr
	int evt = EVT_NOP;
   2fd0e:	2000      	movs	r0, #0
}
   2fd10:	4770      	bx	lr

0002fd12 <notify_one>:
{
   2fd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fd16:	460d      	mov	r5, r1
   2fd18:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2fd1a:	4619      	mov	r1, r3
   2fd1c:	1d28      	adds	r0, r5, #4
{
   2fd1e:	4690      	mov	r8, r2
   2fd20:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2fd22:	f7e3 fcbb 	bl	1369c <sys_notify_finalize>
	if (cb) {
   2fd26:	4604      	mov	r4, r0
   2fd28:	b138      	cbz	r0, 2fd3a <notify_one+0x28>
		cb(mgr, cli, state, res);
   2fd2a:	4633      	mov	r3, r6
   2fd2c:	4642      	mov	r2, r8
   2fd2e:	4629      	mov	r1, r5
   2fd30:	4638      	mov	r0, r7
   2fd32:	46a4      	mov	ip, r4
}
   2fd34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2fd38:	4760      	bx	ip
}
   2fd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002fd3e <validate_args>:
{
   2fd3e:	b510      	push	{r4, lr}
   2fd40:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2fd42:	b140      	cbz	r0, 2fd56 <validate_args+0x18>
   2fd44:	b139      	cbz	r1, 2fd56 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2fd46:	1d08      	adds	r0, r1, #4
   2fd48:	f7ff ff69 	bl	2fc1e <sys_notify_validate>
	if ((rv == 0)
   2fd4c:	b928      	cbnz	r0, 2fd5a <validate_args+0x1c>
	    && ((cli->notify.flags
   2fd4e:	68a3      	ldr	r3, [r4, #8]
   2fd50:	f033 0303 	bics.w	r3, r3, #3
   2fd54:	d001      	beq.n	2fd5a <validate_args+0x1c>
		rv = -EINVAL;
   2fd56:	f06f 0015 	mvn.w	r0, #21
}
   2fd5a:	bd10      	pop	{r4, pc}

0002fd5c <onoff_manager_init>:
{
   2fd5c:	b538      	push	{r3, r4, r5, lr}
   2fd5e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2fd60:	4605      	mov	r5, r0
   2fd62:	b158      	cbz	r0, 2fd7c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2fd64:	b151      	cbz	r1, 2fd7c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2fd66:	680b      	ldr	r3, [r1, #0]
   2fd68:	b143      	cbz	r3, 2fd7c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2fd6a:	684b      	ldr	r3, [r1, #4]
   2fd6c:	b133      	cbz	r3, 2fd7c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2fd6e:	2220      	movs	r2, #32
   2fd70:	2100      	movs	r1, #0
   2fd72:	f007 fd26 	bl	377c2 <memset>
	return 0;
   2fd76:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2fd78:	612c      	str	r4, [r5, #16]
}
   2fd7a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2fd7c:	f06f 0015 	mvn.w	r0, #21
   2fd80:	e7fb      	b.n	2fd7a <onoff_manager_init+0x1e>

0002fd82 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2fd82:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2fd84:	f7fb fa3c 	bl	2b200 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2fd88:	2000      	movs	r0, #0
   2fd8a:	bd08      	pop	{r3, pc}

0002fd8c <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2fd8c:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2fd8e:	f7fb fa7b 	bl	2b288 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2fd92:	f110 0f0b 	cmn.w	r0, #11
   2fd96:	d005      	beq.n	2fda4 <sys_sem_take+0x18>
   2fd98:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2fd9c:	bf08      	it	eq
   2fd9e:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2fda2:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2fda4:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2fda8:	e7fb      	b.n	2fda2 <sys_sem_take+0x16>

0002fdaa <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2fdaa:	4604      	mov	r4, r0
   2fdac:	b508      	push	{r3, lr}
   2fdae:	4608      	mov	r0, r1
   2fdb0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2fdb2:	461a      	mov	r2, r3
   2fdb4:	47a0      	blx	r4
	return z_impl_k_current_get();
   2fdb6:	f7fd f91b 	bl	2cff0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2fdba:	f7e8 f827 	bl	17e0c <z_impl_k_thread_abort>

0002fdbe <chunk_field>:
	if (big_heap(h)) {
   2fdbe:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2fdc0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2fdc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2fdc8:	bf2c      	ite	cs
   2fdca:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   2fdce:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   2fdd2:	4770      	bx	lr

0002fdd4 <chunk_set>:
	void *cmem = &buf[c];
   2fdd4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2fdd8:	6880      	ldr	r0, [r0, #8]
   2fdda:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   2fdde:	bf2c      	ite	cs
   2fde0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2fde4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   2fde8:	4770      	bx	lr

0002fdea <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2fdea:	2201      	movs	r2, #1
{
   2fdec:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2fdee:	f7ff ffe6 	bl	2fdbe <chunk_field>
}
   2fdf2:	0840      	lsrs	r0, r0, #1
   2fdf4:	bd08      	pop	{r3, pc}

0002fdf6 <set_chunk_used>:
	if (big_heap(h)) {
   2fdf6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2fdf8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2fdfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2fe00:	d308      	bcc.n	2fe14 <set_chunk_used+0x1e>
		if (used) {
   2fe02:	684b      	ldr	r3, [r1, #4]
   2fe04:	b11a      	cbz	r2, 2fe0e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2fe06:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2fe0a:	604b      	str	r3, [r1, #4]
   2fe0c:	4770      	bx	lr
   2fe0e:	f023 0301 	bic.w	r3, r3, #1
   2fe12:	e7fa      	b.n	2fe0a <set_chunk_used+0x14>
		if (used) {
   2fe14:	884b      	ldrh	r3, [r1, #2]
   2fe16:	b11a      	cbz	r2, 2fe20 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2fe18:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2fe1c:	804b      	strh	r3, [r1, #2]
}
   2fe1e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2fe20:	f023 0301 	bic.w	r3, r3, #1
   2fe24:	e7fa      	b.n	2fe1c <set_chunk_used+0x26>

0002fe26 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2fe26:	0053      	lsls	r3, r2, #1
   2fe28:	2201      	movs	r2, #1
   2fe2a:	f7ff bfd3 	b.w	2fdd4 <chunk_set>

0002fe2e <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   2fe2e:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2fe30:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   2fe32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2fe36:	bf2c      	ite	cs
   2fe38:	2008      	movcs	r0, #8
   2fe3a:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2fe3c:	4408      	add	r0, r1
}
   2fe3e:	08c0      	lsrs	r0, r0, #3
   2fe40:	4770      	bx	lr

0002fe42 <bucket_idx>:
{
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   2fe42:	460a      	mov	r2, r1
   2fe44:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   2fe46:	2101      	movs	r1, #1
   2fe48:	f7ff fff1 	bl	2fe2e <bytes_to_chunksz>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   2fe4c:	3201      	adds	r2, #1
   2fe4e:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   2fe50:	fab2 f082 	clz	r0, r2
}
   2fe54:	f1c0 001f 	rsb	r0, r0, #31
   2fe58:	bd08      	pop	{r3, pc}

0002fe5a <merge_chunks>:
{
   2fe5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fe5e:	4616      	mov	r6, r2
   2fe60:	4604      	mov	r4, r0
   2fe62:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2fe64:	f7ff ffc1 	bl	2fdea <chunk_size>
   2fe68:	4631      	mov	r1, r6
   2fe6a:	4605      	mov	r5, r0
   2fe6c:	4620      	mov	r0, r4
   2fe6e:	f7ff ffbc 	bl	2fdea <chunk_size>
   2fe72:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   2fe74:	462a      	mov	r2, r5
   2fe76:	4639      	mov	r1, r7
   2fe78:	4620      	mov	r0, r4
   2fe7a:	f7ff ffd4 	bl	2fe26 <set_chunk_size>
	return c + chunk_size(h, c);
   2fe7e:	4631      	mov	r1, r6
   2fe80:	4620      	mov	r0, r4
   2fe82:	f7ff ffb2 	bl	2fdea <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2fe86:	462b      	mov	r3, r5
   2fe88:	1831      	adds	r1, r6, r0
   2fe8a:	2200      	movs	r2, #0
   2fe8c:	4620      	mov	r0, r4
}
   2fe8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2fe92:	f7ff bf9f 	b.w	2fdd4 <chunk_set>

0002fe96 <split_chunks>:
{
   2fe96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fe9a:	4614      	mov	r4, r2
   2fe9c:	460e      	mov	r6, r1
   2fe9e:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2fea0:	f7ff ffa3 	bl	2fdea <chunk_size>
	chunksz_t lsz = rc - lc;
   2fea4:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   2fea8:	1b37      	subs	r7, r6, r4
   2feaa:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   2feac:	4642      	mov	r2, r8
   2feae:	4631      	mov	r1, r6
   2feb0:	4628      	mov	r0, r5
   2feb2:	f7ff ffb8 	bl	2fe26 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2feb6:	463a      	mov	r2, r7
   2feb8:	4621      	mov	r1, r4
   2feba:	4628      	mov	r0, r5
   2febc:	f7ff ffb3 	bl	2fe26 <set_chunk_size>
   2fec0:	4643      	mov	r3, r8
   2fec2:	2200      	movs	r2, #0
   2fec4:	4621      	mov	r1, r4
   2fec6:	4628      	mov	r0, r5
   2fec8:	f7ff ff84 	bl	2fdd4 <chunk_set>
	return c + chunk_size(h, c);
   2fecc:	4621      	mov	r1, r4
   2fece:	4628      	mov	r0, r5
   2fed0:	f7ff ff8b 	bl	2fdea <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2fed4:	463b      	mov	r3, r7
   2fed6:	1821      	adds	r1, r4, r0
   2fed8:	2200      	movs	r2, #0
   2feda:	4628      	mov	r0, r5
}
   2fedc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2fee0:	f7ff bf78 	b.w	2fdd4 <chunk_set>

0002fee4 <free_list_remove_bidx>:
{
   2fee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fee8:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   2feea:	2203      	movs	r2, #3
   2feec:	460e      	mov	r6, r1
   2feee:	4604      	mov	r4, r0
   2fef0:	f7ff ff65 	bl	2fdbe <chunk_field>
	if (next_free_chunk(h, c) == c) {
   2fef4:	4286      	cmp	r6, r0
   2fef6:	4605      	mov	r5, r0
   2fef8:	f107 0804 	add.w	r8, r7, #4
   2fefc:	d10b      	bne.n	2ff16 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2fefe:	2301      	movs	r3, #1
   2ff00:	fa03 f707 	lsl.w	r7, r3, r7
   2ff04:	68e3      	ldr	r3, [r4, #12]
   2ff06:	ea23 0307 	bic.w	r3, r3, r7
   2ff0a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   2ff0c:	2300      	movs	r3, #0
   2ff0e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   2ff12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2ff16:	4631      	mov	r1, r6
   2ff18:	2202      	movs	r2, #2
   2ff1a:	4620      	mov	r0, r4
   2ff1c:	f7ff ff4f 	bl	2fdbe <chunk_field>
   2ff20:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   2ff22:	462b      	mov	r3, r5
   2ff24:	4601      	mov	r1, r0
   2ff26:	2203      	movs	r2, #3
   2ff28:	4620      	mov	r0, r4
		b->next = second;
   2ff2a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2ff2e:	f7ff ff51 	bl	2fdd4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2ff32:	4633      	mov	r3, r6
   2ff34:	4629      	mov	r1, r5
   2ff36:	4620      	mov	r0, r4
}
   2ff38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2ff3c:	2202      	movs	r2, #2
   2ff3e:	f7ff bf49 	b.w	2fdd4 <chunk_set>

0002ff42 <alloc_chunk>:
{
   2ff42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ff46:	4605      	mov	r5, r0
   2ff48:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   2ff4a:	f7ff ff7a 	bl	2fe42 <bucket_idx>
   2ff4e:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	if (b->next) {
   2ff52:	f8da 9010 	ldr.w	r9, [sl, #16]
	int bi = bucket_idx(h, sz);
   2ff56:	4606      	mov	r6, r0
	if (b->next) {
   2ff58:	f1b9 0f00 	cmp.w	r9, #0
   2ff5c:	d01b      	beq.n	2ff96 <alloc_chunk+0x54>
   2ff5e:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2ff60:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   2ff64:	4628      	mov	r0, r5
   2ff66:	4621      	mov	r1, r4
   2ff68:	f7ff ff3f 	bl	2fdea <chunk_size>
   2ff6c:	4540      	cmp	r0, r8
   2ff6e:	d307      	bcc.n	2ff80 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   2ff70:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   2ff72:	4621      	mov	r1, r4
   2ff74:	4628      	mov	r0, r5
   2ff76:	f7ff ffb5 	bl	2fee4 <free_list_remove_bidx>
}
   2ff7a:	4620      	mov	r0, r4
   2ff7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   2ff80:	2203      	movs	r2, #3
   2ff82:	4621      	mov	r1, r4
   2ff84:	4628      	mov	r0, r5
   2ff86:	f7ff ff1a 	bl	2fdbe <chunk_field>
		} while (--i && b->next != first);
   2ff8a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2ff8c:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   2ff90:	d001      	beq.n	2ff96 <alloc_chunk+0x54>
   2ff92:	4581      	cmp	r9, r0
   2ff94:	d1e4      	bne.n	2ff60 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2ff96:	f04f 34ff 	mov.w	r4, #4294967295
   2ff9a:	68e9      	ldr	r1, [r5, #12]
   2ff9c:	3601      	adds	r6, #1
   2ff9e:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   2ffa0:	400c      	ands	r4, r1
   2ffa2:	d0ea      	beq.n	2ff7a <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   2ffa4:	fa94 f2a4 	rbit	r2, r4
   2ffa8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2ffac:	1d13      	adds	r3, r2, #4
   2ffae:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   2ffb2:	e7de      	b.n	2ff72 <alloc_chunk+0x30>

0002ffb4 <free_list_add>:
{
   2ffb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ffb8:	4604      	mov	r4, r0
   2ffba:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   2ffbc:	f7ff ff15 	bl	2fdea <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   2ffc0:	68a3      	ldr	r3, [r4, #8]
   2ffc2:	4601      	mov	r1, r0
   2ffc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2ffc8:	d301      	bcc.n	2ffce <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   2ffca:	2801      	cmp	r0, #1
   2ffcc:	d035      	beq.n	3003a <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2ffce:	4620      	mov	r0, r4
   2ffd0:	f7ff ff37 	bl	2fe42 <bucket_idx>
	if (b->next == 0U) {
   2ffd4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2ffd8:	6916      	ldr	r6, [r2, #16]
   2ffda:	b99e      	cbnz	r6, 30004 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2ffdc:	2301      	movs	r3, #1
   2ffde:	fa03 f000 	lsl.w	r0, r3, r0
   2ffe2:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   2ffe4:	4629      	mov	r1, r5
   2ffe6:	4303      	orrs	r3, r0
   2ffe8:	60e3      	str	r3, [r4, #12]
   2ffea:	4620      	mov	r0, r4
		b->next = c;
   2ffec:	6115      	str	r5, [r2, #16]
   2ffee:	462b      	mov	r3, r5
   2fff0:	2202      	movs	r2, #2
   2fff2:	f7ff feef 	bl	2fdd4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2fff6:	2203      	movs	r2, #3
   2fff8:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2fffa:	4620      	mov	r0, r4
}
   2fffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   30000:	f7ff bee8 	b.w	2fdd4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   30004:	2202      	movs	r2, #2
   30006:	4631      	mov	r1, r6
   30008:	4620      	mov	r0, r4
   3000a:	f7ff fed8 	bl	2fdbe <chunk_field>
   3000e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   30010:	4603      	mov	r3, r0
   30012:	2202      	movs	r2, #2
   30014:	4629      	mov	r1, r5
   30016:	4620      	mov	r0, r4
   30018:	f7ff fedc 	bl	2fdd4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   3001c:	4633      	mov	r3, r6
   3001e:	2203      	movs	r2, #3
   30020:	4629      	mov	r1, r5
   30022:	4620      	mov	r0, r4
   30024:	f7ff fed6 	bl	2fdd4 <chunk_set>
   30028:	2203      	movs	r2, #3
   3002a:	4639      	mov	r1, r7
   3002c:	462b      	mov	r3, r5
   3002e:	4620      	mov	r0, r4
   30030:	f7ff fed0 	bl	2fdd4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   30034:	2202      	movs	r2, #2
   30036:	4631      	mov	r1, r6
   30038:	e7df      	b.n	2fffa <free_list_add+0x46>
   3003a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003003e <free_list_remove>:
{
   3003e:	b538      	push	{r3, r4, r5, lr}
   30040:	4604      	mov	r4, r0
   30042:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   30044:	f7ff fed1 	bl	2fdea <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   30048:	68a3      	ldr	r3, [r4, #8]
   3004a:	4601      	mov	r1, r0
   3004c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   30050:	d301      	bcc.n	30056 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   30052:	2801      	cmp	r0, #1
   30054:	d009      	beq.n	3006a <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   30056:	4620      	mov	r0, r4
   30058:	f7ff fef3 	bl	2fe42 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   3005c:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   3005e:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   30060:	4620      	mov	r0, r4
}
   30062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   30066:	f7ff bf3d 	b.w	2fee4 <free_list_remove_bidx>
}
   3006a:	bd38      	pop	{r3, r4, r5, pc}

0003006c <free_chunk>:
{
   3006c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3006e:	460c      	mov	r4, r1
   30070:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   30072:	f7ff feba 	bl	2fdea <chunk_size>
   30076:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   30078:	2201      	movs	r2, #1
   3007a:	4631      	mov	r1, r6
   3007c:	4628      	mov	r0, r5
   3007e:	f7ff fe9e 	bl	2fdbe <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   30082:	07c3      	lsls	r3, r0, #31
   30084:	d40c      	bmi.n	300a0 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   30086:	4631      	mov	r1, r6
   30088:	4628      	mov	r0, r5
   3008a:	f7ff ffd8 	bl	3003e <free_list_remove>
	return c + chunk_size(h, c);
   3008e:	4621      	mov	r1, r4
   30090:	4628      	mov	r0, r5
   30092:	f7ff feaa 	bl	2fdea <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   30096:	4621      	mov	r1, r4
   30098:	1822      	adds	r2, r4, r0
   3009a:	4628      	mov	r0, r5
   3009c:	f7ff fedd 	bl	2fe5a <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   300a0:	2200      	movs	r2, #0
   300a2:	4621      	mov	r1, r4
   300a4:	4628      	mov	r0, r5
   300a6:	f7ff fe8a 	bl	2fdbe <chunk_field>
   300aa:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   300ac:	2201      	movs	r2, #1
   300ae:	4639      	mov	r1, r7
   300b0:	4628      	mov	r0, r5
   300b2:	f7ff fe84 	bl	2fdbe <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   300b6:	f010 0601 	ands.w	r6, r0, #1
   300ba:	d113      	bne.n	300e4 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   300bc:	4639      	mov	r1, r7
   300be:	4628      	mov	r0, r5
   300c0:	f7ff ffbd 	bl	3003e <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   300c4:	4621      	mov	r1, r4
   300c6:	4632      	mov	r2, r6
   300c8:	4628      	mov	r0, r5
   300ca:	f7ff fe78 	bl	2fdbe <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   300ce:	4622      	mov	r2, r4
   300d0:	1a21      	subs	r1, r4, r0
   300d2:	4628      	mov	r0, r5
   300d4:	f7ff fec1 	bl	2fe5a <merge_chunks>
   300d8:	4621      	mov	r1, r4
   300da:	4632      	mov	r2, r6
   300dc:	4628      	mov	r0, r5
   300de:	f7ff fe6e 	bl	2fdbe <chunk_field>
   300e2:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   300e4:	4621      	mov	r1, r4
   300e6:	4628      	mov	r0, r5
}
   300e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   300ec:	f7ff bf62 	b.w	2ffb4 <free_list_add>

000300f0 <sys_heap_alloc>:
{
   300f0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   300f2:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   300f4:	b909      	cbnz	r1, 300fa <sys_heap_alloc+0xa>
		return NULL;
   300f6:	2000      	movs	r0, #0
}
   300f8:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   300fa:	68a2      	ldr	r2, [r4, #8]
   300fc:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   30100:	d9f9      	bls.n	300f6 <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   30102:	4620      	mov	r0, r4
   30104:	f7ff fe93 	bl	2fe2e <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   30108:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   3010a:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3010c:	4620      	mov	r0, r4
   3010e:	f7ff ff18 	bl	2ff42 <alloc_chunk>
	if (c == 0U) {
   30112:	4605      	mov	r5, r0
   30114:	2800      	cmp	r0, #0
   30116:	d0ee      	beq.n	300f6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   30118:	4601      	mov	r1, r0
   3011a:	4620      	mov	r0, r4
   3011c:	f7ff fe65 	bl	2fdea <chunk_size>
   30120:	42b0      	cmp	r0, r6
   30122:	d909      	bls.n	30138 <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   30124:	442e      	add	r6, r5
   30126:	4629      	mov	r1, r5
   30128:	4620      	mov	r0, r4
   3012a:	4632      	mov	r2, r6
   3012c:	f7ff feb3 	bl	2fe96 <split_chunks>
		free_list_add(h, c + chunk_sz);
   30130:	4631      	mov	r1, r6
   30132:	4620      	mov	r0, r4
   30134:	f7ff ff3e 	bl	2ffb4 <free_list_add>
	set_chunk_used(h, c, true);
   30138:	4620      	mov	r0, r4
   3013a:	2201      	movs	r2, #1
   3013c:	4629      	mov	r1, r5
   3013e:	f7ff fe5a 	bl	2fdf6 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   30142:	68a3      	ldr	r3, [r4, #8]
   30144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   30148:	bf2c      	ite	cs
   3014a:	2008      	movcs	r0, #8
   3014c:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3014e:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   30152:	4420      	add	r0, r4
	return chunk_mem(h, c);
   30154:	e7d0      	b.n	300f8 <sys_heap_alloc+0x8>

00030156 <outs>:
{
   30156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3015a:	4607      	mov	r7, r0
   3015c:	4688      	mov	r8, r1
   3015e:	4615      	mov	r5, r2
   30160:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   30162:	4614      	mov	r4, r2
   30164:	42b4      	cmp	r4, r6
   30166:	eba4 0005 	sub.w	r0, r4, r5
   3016a:	d302      	bcc.n	30172 <outs+0x1c>
   3016c:	b93e      	cbnz	r6, 3017e <outs+0x28>
   3016e:	7823      	ldrb	r3, [r4, #0]
   30170:	b12b      	cbz	r3, 3017e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   30172:	4641      	mov	r1, r8
   30174:	f814 0b01 	ldrb.w	r0, [r4], #1
   30178:	47b8      	blx	r7
		if (rc < 0) {
   3017a:	2800      	cmp	r0, #0
   3017c:	daf2      	bge.n	30164 <outs+0xe>
}
   3017e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030182 <get_elem_size>:
{
   30182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30186:	4605      	mov	r5, r0
   30188:	2701      	movs	r7, #1
	switch (descr->type) {
   3018a:	796b      	ldrb	r3, [r5, #5]
   3018c:	085b      	lsrs	r3, r3, #1
   3018e:	2b66      	cmp	r3, #102	; 0x66
   30190:	d031      	beq.n	301f6 <get_elem_size+0x74>
   30192:	d80d      	bhi.n	301b0 <get_elem_size+0x2e>
   30194:	2b5b      	cmp	r3, #91	; 0x5b
   30196:	d028      	beq.n	301ea <get_elem_size+0x68>
   30198:	d82f      	bhi.n	301fa <get_elem_size+0x78>
   3019a:	2b22      	cmp	r3, #34	; 0x22
   3019c:	d029      	beq.n	301f2 <get_elem_size+0x70>
		return sizeof(int32_t);
   3019e:	2b30      	cmp	r3, #48	; 0x30
   301a0:	bf14      	ite	ne
   301a2:	f06f 0415 	mvnne.w	r4, #21
   301a6:	2404      	moveq	r4, #4
}
   301a8:	fb07 f004 	mul.w	r0, r7, r4
   301ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (descr->type) {
   301b0:	2b74      	cmp	r3, #116	; 0x74
   301b2:	d020      	beq.n	301f6 <get_elem_size+0x74>
   301b4:	2b7b      	cmp	r3, #123	; 0x7b
   301b6:	d120      	bne.n	301fa <get_elem_size+0x78>
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   301b8:	2600      	movs	r6, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   301ba:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   301be:	4634      	mov	r4, r6
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   301c0:	f8d5 800c 	ldr.w	r8, [r5, #12]
   301c4:	45b0      	cmp	r8, r6
   301c6:	d0ef      	beq.n	301a8 <get_elem_size+0x26>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   301c8:	68a8      	ldr	r0, [r5, #8]
   301ca:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   301ce:	f7ff ffd8 	bl	30182 <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   301d2:	792b      	ldrb	r3, [r5, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   301d4:	3601      	adds	r6, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   301d6:	f003 0303 	and.w	r3, r3, #3
   301da:	fa09 f303 	lsl.w	r3, r9, r3
   301de:	1e5a      	subs	r2, r3, #1
   301e0:	4402      	add	r2, r0
   301e2:	425b      	negs	r3, r3
   301e4:	4013      	ands	r3, r2
   301e6:	441c      	add	r4, r3
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   301e8:	e7ec      	b.n	301c4 <get_elem_size+0x42>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   301ea:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
   301ee:	435f      	muls	r7, r3
   301f0:	e7cb      	b.n	3018a <get_elem_size+0x8>
		return sizeof(int32_t);
   301f2:	2404      	movs	r4, #4
   301f4:	e7d8      	b.n	301a8 <get_elem_size+0x26>
		return sizeof(bool);
   301f6:	2401      	movs	r4, #1
   301f8:	e7d6      	b.n	301a8 <get_elem_size+0x26>
		return -EINVAL;
   301fa:	f06f 0415 	mvn.w	r4, #21
   301fe:	e7d3      	b.n	301a8 <get_elem_size+0x26>

00030200 <escape_as>:
	switch (chr) {
   30200:	280d      	cmp	r0, #13
   30202:	d80b      	bhi.n	3021c <escape_as+0x1c>
   30204:	2807      	cmp	r0, #7
   30206:	d915      	bls.n	30234 <escape_as+0x34>
   30208:	3808      	subs	r0, #8
   3020a:	2805      	cmp	r0, #5
   3020c:	d812      	bhi.n	30234 <escape_as+0x34>
   3020e:	e8df f000 	tbb	[pc, r0]
   30212:	0f03      	.short	0x0f03
   30214:	0d13110b 	.word	0x0d13110b
		return 'b';
   30218:	2062      	movs	r0, #98	; 0x62
   3021a:	4770      	bx	lr
	switch (chr) {
   3021c:	2822      	cmp	r0, #34	; 0x22
   3021e:	d00c      	beq.n	3023a <escape_as+0x3a>
	return 0;
   30220:	285c      	cmp	r0, #92	; 0x5c
   30222:	bf18      	it	ne
   30224:	2000      	movne	r0, #0
   30226:	4770      	bx	lr
		return 'n';
   30228:	206e      	movs	r0, #110	; 0x6e
   3022a:	4770      	bx	lr
		return 'r';
   3022c:	2072      	movs	r0, #114	; 0x72
   3022e:	4770      	bx	lr
		return 't';
   30230:	2074      	movs	r0, #116	; 0x74
   30232:	4770      	bx	lr
	return 0;
   30234:	2000      	movs	r0, #0
   30236:	4770      	bx	lr
		return 'f';
   30238:	2066      	movs	r0, #102	; 0x66
}
   3023a:	4770      	bx	lr

0003023c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3023c:	4040      	eors	r0, r0
   3023e:	f380 8811 	msr	BASEPRI, r0
   30242:	f04f 0004 	mov.w	r0, #4
   30246:	df02      	svc	2
}
   30248:	4770      	bx	lr

0003024a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   3024a:	4770      	bx	lr

0003024c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   3024c:	f7f4 bc18 	b.w	24a80 <SystemInit>

00030250 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   30250:	b084      	sub	sp, #16
   30252:	ab04      	add	r3, sp, #16
   30254:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   30258:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3025c:	2b06      	cmp	r3, #6
   3025e:	d108      	bne.n	30272 <pm_power_state_set+0x22>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   30260:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   30264:	2201      	movs	r2, #1
   30266:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   3026a:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   3026e:	bf20      	wfe
    while (true)
   30270:	e7fd      	b.n	3026e <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   30272:	b004      	add	sp, #16
   30274:	4770      	bx	lr

00030276 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   30276:	b084      	sub	sp, #16
   30278:	ab04      	add	r3, sp, #16
   3027a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   3027e:	2300      	movs	r3, #0
   30280:	f383 8811 	msr	BASEPRI, r3
   30284:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   30288:	b004      	add	sp, #16
   3028a:	4770      	bx	lr

0003028c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   3028c:	2300      	movs	r3, #0
	list->head = NULL;
   3028e:	e9c0 3300 	strd	r3, r3, [r0]
}
   30292:	4770      	bx	lr

00030294 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   30294:	6803      	ldr	r3, [r0, #0]
   30296:	b923      	cbnz	r3, 302a2 <log_list_add_tail+0xe>
		list->head = msg;
   30298:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   3029a:	2300      	movs	r3, #0
	list->tail = msg;
   3029c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   3029e:	600b      	str	r3, [r1, #0]
}
   302a0:	4770      	bx	lr
		list->tail->next = msg;
   302a2:	6843      	ldr	r3, [r0, #4]
   302a4:	6019      	str	r1, [r3, #0]
   302a6:	e7f8      	b.n	3029a <log_list_add_tail+0x6>

000302a8 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   302a8:	6800      	ldr	r0, [r0, #0]
   302aa:	4770      	bx	lr

000302ac <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   302ac:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   302ae:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   302b0:	b108      	cbz	r0, 302b6 <log_list_head_get+0xa>
		list->head = list->head->next;
   302b2:	6802      	ldr	r2, [r0, #0]
   302b4:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   302b6:	4770      	bx	lr

000302b8 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   302b8:	6843      	ldr	r3, [r0, #4]
}
   302ba:	7958      	ldrb	r0, [r3, #5]
   302bc:	4770      	bx	lr

000302be <z_log_msg_std_alloc>:
{
   302be:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   302c0:	f7e5 f858 	bl	15374 <log_msg_chunk_alloc>
	if (msg != NULL) {
   302c4:	b118      	cbz	r0, 302ce <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   302c6:	2301      	movs	r3, #1
   302c8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   302ca:	2300      	movs	r3, #0
   302cc:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   302ce:	bd08      	pop	{r3, pc}

000302d0 <default_get_timestamp>:
   302d0:	f7e6 bc84 	b.w	16bdc <sys_clock_cycle_get_32>

000302d4 <dummy_timestamp>:
   302d4:	2000      	movs	r0, #0
   302d6:	4770      	bx	lr

000302d8 <log_0>:
{
   302d8:	b538      	push	{r3, r4, r5, lr}
   302da:	4605      	mov	r5, r0
   302dc:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   302de:	f7ff ffee 	bl	302be <z_log_msg_std_alloc>

	if (msg != NULL) {
   302e2:	b128      	cbz	r0, 302f0 <log_0+0x18>
		msg_finalize(msg, src_level);
   302e4:	4621      	mov	r1, r4
		msg->str = str;
   302e6:	6105      	str	r5, [r0, #16]
}
   302e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   302ec:	f7e4 bf48 	b.w	15180 <msg_finalize>
}
   302f0:	bd38      	pop	{r3, r4, r5, pc}

000302f2 <log_1>:
{
   302f2:	b570      	push	{r4, r5, r6, lr}
   302f4:	4606      	mov	r6, r0
   302f6:	460d      	mov	r5, r1
   302f8:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   302fa:	f7ff ffe0 	bl	302be <z_log_msg_std_alloc>

	if (msg != NULL) {
   302fe:	b158      	cbz	r0, 30318 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   30300:	2101      	movs	r1, #1
   30302:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   30304:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   30306:	f361 1207 	bfi	r2, r1, #4, #4
   3030a:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   3030c:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   3030e:	6145      	str	r5, [r0, #20]
}
   30310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   30314:	f7e4 bf34 	b.w	15180 <msg_finalize>
}
   30318:	bd70      	pop	{r4, r5, r6, pc}

0003031a <log_2>:
{
   3031a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3031e:	4680      	mov	r8, r0
   30320:	460f      	mov	r7, r1
   30322:	4616      	mov	r6, r2
   30324:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   30326:	f7ff ffca 	bl	302be <z_log_msg_std_alloc>

	if (msg != NULL) {
   3032a:	b168      	cbz	r0, 30348 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   3032c:	2202      	movs	r2, #2
   3032e:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   30330:	4629      	mov	r1, r5
   30332:	f362 1307 	bfi	r3, r2, #4, #4
   30336:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   30338:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   3033c:	f8c0 8010 	str.w	r8, [r0, #16]
}
   30340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   30344:	f7e4 bf1c 	b.w	15180 <msg_finalize>
}
   30348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003034c <log_3>:
{
   3034c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30350:	4680      	mov	r8, r0
   30352:	460f      	mov	r7, r1
   30354:	4616      	mov	r6, r2
   30356:	461d      	mov	r5, r3
   30358:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   3035c:	f7ff ffaf 	bl	302be <z_log_msg_std_alloc>

	if (msg != NULL) {
   30360:	b170      	cbz	r0, 30380 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   30362:	2203      	movs	r2, #3
   30364:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   30366:	4649      	mov	r1, r9
   30368:	f362 1307 	bfi	r3, r2, #4, #4
   3036c:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   3036e:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   30372:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   30376:	61c5      	str	r5, [r0, #28]
}
   30378:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   3037c:	f7e4 bf00 	b.w	15180 <msg_finalize>
}
   30380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00030384 <log_n>:
{
   30384:	b510      	push	{r4, lr}
   30386:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   30388:	f7e5 f846 	bl	15418 <log_msg_create_n>
		if (msg == NULL) {
   3038c:	b120      	cbz	r0, 30398 <log_n+0x14>
		msg_finalize(msg, src_level);
   3038e:	4621      	mov	r1, r4
}
   30390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   30394:	f7e4 bef4 	b.w	15180 <msg_finalize>
}
   30398:	bd10      	pop	{r4, pc}

0003039a <z_log_printk>:
{
   3039a:	b500      	push	{lr}
   3039c:	b0a3      	sub	sp, #140	; 0x8c
   3039e:	4602      	mov	r2, r0
   303a0:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   303a2:	a801      	add	r0, sp, #4
   303a4:	2181      	movs	r1, #129	; 0x81
   303a6:	f7e3 f9af 	bl	13708 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   303aa:	2881      	cmp	r0, #129	; 0x81
   303ac:	4602      	mov	r2, r0
   303ae:	a901      	add	r1, sp, #4
   303b0:	bf28      	it	cs
   303b2:	2281      	movcs	r2, #129	; 0x81
   303b4:	2000      	movs	r0, #0
   303b6:	f000 f89a 	bl	304ee <log_msg_hexdump_create>
			if (msg == NULL) {
   303ba:	b118      	cbz	r0, 303c4 <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   303bc:	f04f 0100 	mov.w	r1, #0
   303c0:	f7e4 fede 	bl	15180 <msg_finalize>
}
   303c4:	b023      	add	sp, #140	; 0x8c
   303c6:	f85d fb04 	ldr.w	pc, [sp], #4

000303ca <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   303ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   303ce:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   303d0:	8903      	ldrh	r3, [r0, #8]
{
   303d2:	460e      	mov	r6, r1
   303d4:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   303d6:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   303da:	42a2      	cmp	r2, r4
{
   303dc:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   303e0:	d803      	bhi.n	303ea <log_msg_hexdump_data_op+0x20>
		*length = 0;
   303e2:	2300      	movs	r3, #0
   303e4:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   303e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   303ea:	680b      	ldr	r3, [r1, #0]
   303ec:	4423      	add	r3, r4
   303ee:	4293      	cmp	r3, r2
		*length = available_len - offset;
   303f0:	bf84      	itt	hi
   303f2:	1b13      	subhi	r3, r2, r4
   303f4:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   303f6:	2a0c      	cmp	r2, #12
	req_len = *length;
   303f8:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   303fc:	d92a      	bls.n	30454 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   303fe:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   30400:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   30404:	d82d      	bhi.n	30462 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   30406:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   30408:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   3040a:	454a      	cmp	r2, r9
   3040c:	bf28      	it	cs
   3040e:	464a      	movcs	r2, r9
   30410:	4420      	add	r0, r4
   30412:	4615      	mov	r5, r2
		if (put_op) {
   30414:	b317      	cbz	r7, 3045c <log_msg_hexdump_data_op+0x92>
   30416:	4631      	mov	r1, r6
   30418:	f007 f9b3 	bl	37782 <memcpy>
		req_len -= cpy_len;
   3041c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   30420:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   30422:	f1b9 0f00 	cmp.w	r9, #0
   30426:	d0de      	beq.n	303e6 <log_msg_hexdump_data_op+0x1c>
   30428:	f1b8 0f00 	cmp.w	r8, #0
   3042c:	d0db      	beq.n	303e6 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   3042e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   30432:	454d      	cmp	r5, r9
   30434:	bf28      	it	cs
   30436:	464d      	movcs	r5, r9
		if (put_op) {
   30438:	1d20      	adds	r0, r4, #4
   3043a:	462a      	mov	r2, r5
   3043c:	4440      	add	r0, r8
   3043e:	b1bf      	cbz	r7, 30470 <log_msg_hexdump_data_op+0xa6>
   30440:	4631      	mov	r1, r6
   30442:	f007 f99e 	bl	37782 <memcpy>
		offset = 0;
   30446:	2400      	movs	r4, #0
		cont = cont->next;
   30448:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   3044c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   30450:	442e      	add	r6, r5
   30452:	e7e6      	b.n	30422 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   30454:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   30458:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   3045a:	e7d6      	b.n	3040a <log_msg_hexdump_data_op+0x40>
   3045c:	4601      	mov	r1, r0
   3045e:	4630      	mov	r0, r6
   30460:	e7da      	b.n	30418 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   30462:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   30464:	2c1b      	cmp	r4, #27
   30466:	d9dc      	bls.n	30422 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   30468:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   3046c:	3c1c      	subs	r4, #28
   3046e:	e7f9      	b.n	30464 <log_msg_hexdump_data_op+0x9a>
   30470:	4601      	mov	r1, r0
   30472:	4630      	mov	r0, r6
   30474:	e7e5      	b.n	30442 <log_msg_hexdump_data_op+0x78>

00030476 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   30476:	3004      	adds	r0, #4
   30478:	e8d0 3fef 	ldaex	r3, [r0]
   3047c:	3301      	adds	r3, #1
   3047e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   30482:	2a00      	cmp	r2, #0
   30484:	d1f8      	bne.n	30478 <log_msg_get+0x2>
}
   30486:	4770      	bx	lr

00030488 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   30488:	7a40      	ldrb	r0, [r0, #9]
}
   3048a:	0900      	lsrs	r0, r0, #4
   3048c:	4770      	bx	lr

0003048e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   3048e:	7a43      	ldrb	r3, [r0, #9]
   30490:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   30494:	ea4f 1213 	mov.w	r2, r3, lsr #4
   30498:	d216      	bcs.n	304c8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   3049a:	2a03      	cmp	r2, #3
   3049c:	d803      	bhi.n	304a6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   3049e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   304a2:	6948      	ldr	r0, [r1, #20]
   304a4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   304a6:	2901      	cmp	r1, #1
   304a8:	d803      	bhi.n	304b2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   304aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   304ae:	6988      	ldr	r0, [r1, #24]
   304b0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   304b2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   304b4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   304b6:	2906      	cmp	r1, #6
   304b8:	d803      	bhi.n	304c2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   304ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   304be:	6848      	ldr	r0, [r1, #4]
   304c0:	4770      	bx	lr
		cont = cont->next;
   304c2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   304c4:	3907      	subs	r1, #7
		cont = cont->next;
   304c6:	e7f6      	b.n	304b6 <log_msg_arg_get+0x28>
		return 0;
   304c8:	2000      	movs	r0, #0
}
   304ca:	4770      	bx	lr

000304cc <log_msg_put>:
{
   304cc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   304ce:	1d02      	adds	r2, r0, #4
   304d0:	e8d2 1fef 	ldaex	r1, [r2]
   304d4:	3901      	subs	r1, #1
   304d6:	e8c2 1fec 	stlex	ip, r1, [r2]
   304da:	f1bc 0f00 	cmp.w	ip, #0
   304de:	d1f7      	bne.n	304d0 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   304e0:	685b      	ldr	r3, [r3, #4]
   304e2:	b90b      	cbnz	r3, 304e8 <log_msg_put+0x1c>
		msg_free(msg);
   304e4:	f7e4 bf5a 	b.w	1539c <msg_free>
}
   304e8:	4770      	bx	lr

000304ea <log_msg_str_get>:
}
   304ea:	6900      	ldr	r0, [r0, #16]
   304ec:	4770      	bx	lr

000304ee <log_msg_hexdump_create>:
{
   304ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   304f2:	f643 75ff 	movw	r5, #16383	; 0x3fff
   304f6:	4295      	cmp	r5, r2
{
   304f8:	4680      	mov	r8, r0
   304fa:	460e      	mov	r6, r1
   304fc:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   304fe:	bf28      	it	cs
   30500:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   30502:	f7e4 ff37 	bl	15374 <log_msg_chunk_alloc>
	if (msg == NULL) {
   30506:	4604      	mov	r4, r0
   30508:	b378      	cbz	r0, 3056a <log_msg_hexdump_create+0x7c>
	msg->hdr.ref_cnt = 1;
   3050a:	2301      	movs	r3, #1
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   3050c:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.ref_cnt = 1;
   3050e:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   30510:	00ab      	lsls	r3, r5, #2
   30512:	f043 0301 	orr.w	r3, r3, #1
   30516:	f002 0202 	and.w	r2, r2, #2
   3051a:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   3051c:	2f0c      	cmp	r7, #12
	msg->str = str;
   3051e:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   30522:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   30524:	f100 0814 	add.w	r8, r0, #20
   30528:	d916      	bls.n	30558 <log_msg_hexdump_create+0x6a>
   3052a:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   3052c:	7a02      	ldrb	r2, [r0, #8]
   3052e:	6183      	str	r3, [r0, #24]
   30530:	6873      	ldr	r3, [r6, #4]
   30532:	f042 0202 	orr.w	r2, r2, #2
   30536:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   30538:	2300      	movs	r3, #0
   3053a:	4699      	mov	r9, r3
   3053c:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   3053e:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   30540:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   30542:	3d08      	subs	r5, #8
	while (length > 0) {
   30544:	b18d      	cbz	r5, 3056a <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   30546:	f7e4 ff15 	bl	15374 <log_msg_chunk_alloc>
		if (cont == NULL) {
   3054a:	4607      	mov	r7, r0
   3054c:	b980      	cbnz	r0, 30570 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   3054e:	4620      	mov	r0, r4
   30550:	f7e4 ff24 	bl	1539c <msg_free>
			return NULL;
   30554:	463c      	mov	r4, r7
   30556:	e008      	b.n	3056a <log_msg_hexdump_create+0x7c>
   30558:	462a      	mov	r2, r5
   3055a:	4631      	mov	r1, r6
   3055c:	4640      	mov	r0, r8
   3055e:	f007 f910 	bl	37782 <memcpy>
		msg->hdr.params.generic.ext = 0;
   30562:	7a23      	ldrb	r3, [r4, #8]
   30564:	f36f 0341 	bfc	r3, #1, #1
   30568:	7223      	strb	r3, [r4, #8]
}
   3056a:	4620      	mov	r0, r4
   3056c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   30570:	2d1c      	cmp	r5, #28
   30572:	462f      	mov	r7, r5
   30574:	bf28      	it	cs
   30576:	271c      	movcs	r7, #28
		*prev_cont = cont;
   30578:	f8c8 0000 	str.w	r0, [r8]
   3057c:	4631      	mov	r1, r6
		cont->next = NULL;
   3057e:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   30582:	4680      	mov	r8, r0
   30584:	463a      	mov	r2, r7
   30586:	3004      	adds	r0, #4
   30588:	f007 f8fb 	bl	37782 <memcpy>
		data += chunk_length;
   3058c:	443e      	add	r6, r7
		length -= chunk_length;
   3058e:	1bed      	subs	r5, r5, r7
   30590:	e7d8      	b.n	30544 <log_msg_hexdump_create+0x56>

00030592 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   30592:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   30594:	2400      	movs	r4, #0
   30596:	9400      	str	r4, [sp, #0]
   30598:	f7ff ff17 	bl	303ca <log_msg_hexdump_data_op>
}
   3059c:	b002      	add	sp, #8
   3059e:	bd10      	pop	{r4, pc}

000305a0 <buffer_write>:
{
   305a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   305a2:	4606      	mov	r6, r0
   305a4:	460d      	mov	r5, r1
   305a6:	4614      	mov	r4, r2
   305a8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   305aa:	4621      	mov	r1, r4
   305ac:	4628      	mov	r0, r5
   305ae:	463a      	mov	r2, r7
   305b0:	47b0      	blx	r6
	} while (len != 0);
   305b2:	1a24      	subs	r4, r4, r0
		buf += processed;
   305b4:	4405      	add	r5, r0
	} while (len != 0);
   305b6:	d1f8      	bne.n	305aa <buffer_write+0xa>
}
   305b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000305ba <std_print>:
{
   305ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   305be:	b08e      	sub	sp, #56	; 0x38
   305c0:	af0e      	add	r7, sp, #56	; 0x38
   305c2:	4680      	mov	r8, r0
   305c4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   305c6:	f7ff ff90 	bl	304ea <log_msg_str_get>
   305ca:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   305cc:	4640      	mov	r0, r8
   305ce:	f7ff ff5b 	bl	30488 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   305d2:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   305d6:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   305d8:	0083      	lsls	r3, r0, #2
   305da:	3307      	adds	r3, #7
   305dc:	f023 0307 	bic.w	r3, r3, #7
   305e0:	ebad 0d03 	sub.w	sp, sp, r3
   305e4:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   305e6:	45d1      	cmp	r9, sl
   305e8:	d116      	bne.n	30618 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   305ea:	4640      	mov	r0, r8
   305ec:	f7ff ff4c 	bl	30488 <log_msg_nargs_get>
   305f0:	280f      	cmp	r0, #15
   305f2:	d81e      	bhi.n	30632 <std_print+0x78>
   305f4:	e8df f010 	tbh	[pc, r0, lsl #1]
   305f8:	00200019 	.word	0x00200019
   305fc:	002d0026 	.word	0x002d0026
   30600:	00410036 	.word	0x00410036
   30604:	005d004e 	.word	0x005d004e
   30608:	0081006e 	.word	0x0081006e
   3060c:	00ad0096 	.word	0x00ad0096
   30610:	00e100c6 	.word	0x00e100c6
   30614:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   30618:	4649      	mov	r1, r9
   3061a:	4640      	mov	r0, r8
   3061c:	f7ff ff37 	bl	3048e <log_msg_arg_get>
   30620:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   30624:	f109 0901 	add.w	r9, r9, #1
   30628:	e7dd      	b.n	305e6 <std_print+0x2c>
		print_formatted(output, str);
   3062a:	4631      	mov	r1, r6
   3062c:	4628      	mov	r0, r5
   3062e:	f7e4 ff5b 	bl	154e8 <print_formatted>
}
   30632:	46bd      	mov	sp, r7
   30634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   30638:	4631      	mov	r1, r6
   3063a:	4628      	mov	r0, r5
   3063c:	6822      	ldr	r2, [r4, #0]
   3063e:	f7e4 ff53 	bl	154e8 <print_formatted>
		break;
   30642:	e7f6      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   30644:	4631      	mov	r1, r6
   30646:	e9d4 2300 	ldrd	r2, r3, [r4]
   3064a:	4628      	mov	r0, r5
   3064c:	f7e4 ff4c 	bl	154e8 <print_formatted>
		break;
   30650:	e7ef      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   30652:	68a3      	ldr	r3, [r4, #8]
   30654:	4631      	mov	r1, r6
   30656:	9300      	str	r3, [sp, #0]
   30658:	4628      	mov	r0, r5
   3065a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3065e:	f7e4 ff43 	bl	154e8 <print_formatted>
		break;
   30662:	e7e6      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   30664:	68e3      	ldr	r3, [r4, #12]
   30666:	4631      	mov	r1, r6
   30668:	9301      	str	r3, [sp, #4]
   3066a:	68a3      	ldr	r3, [r4, #8]
   3066c:	4628      	mov	r0, r5
   3066e:	9300      	str	r3, [sp, #0]
   30670:	e9d4 2300 	ldrd	r2, r3, [r4]
   30674:	f7e4 ff38 	bl	154e8 <print_formatted>
		break;
   30678:	e7db      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   3067a:	6923      	ldr	r3, [r4, #16]
   3067c:	4631      	mov	r1, r6
   3067e:	9302      	str	r3, [sp, #8]
   30680:	68e3      	ldr	r3, [r4, #12]
   30682:	4628      	mov	r0, r5
   30684:	9301      	str	r3, [sp, #4]
   30686:	68a3      	ldr	r3, [r4, #8]
   30688:	9300      	str	r3, [sp, #0]
   3068a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3068e:	f7e4 ff2b 	bl	154e8 <print_formatted>
		break;
   30692:	e7ce      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   30694:	6963      	ldr	r3, [r4, #20]
   30696:	4631      	mov	r1, r6
   30698:	9303      	str	r3, [sp, #12]
   3069a:	6923      	ldr	r3, [r4, #16]
   3069c:	4628      	mov	r0, r5
   3069e:	9302      	str	r3, [sp, #8]
   306a0:	68e3      	ldr	r3, [r4, #12]
   306a2:	9301      	str	r3, [sp, #4]
   306a4:	68a3      	ldr	r3, [r4, #8]
   306a6:	9300      	str	r3, [sp, #0]
   306a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   306ac:	f7e4 ff1c 	bl	154e8 <print_formatted>
		break;
   306b0:	e7bf      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   306b2:	69a3      	ldr	r3, [r4, #24]
   306b4:	4631      	mov	r1, r6
   306b6:	9304      	str	r3, [sp, #16]
   306b8:	6963      	ldr	r3, [r4, #20]
   306ba:	4628      	mov	r0, r5
   306bc:	9303      	str	r3, [sp, #12]
   306be:	6923      	ldr	r3, [r4, #16]
   306c0:	9302      	str	r3, [sp, #8]
   306c2:	68e3      	ldr	r3, [r4, #12]
   306c4:	9301      	str	r3, [sp, #4]
   306c6:	68a3      	ldr	r3, [r4, #8]
   306c8:	9300      	str	r3, [sp, #0]
   306ca:	e9d4 2300 	ldrd	r2, r3, [r4]
   306ce:	f7e4 ff0b 	bl	154e8 <print_formatted>
		break;
   306d2:	e7ae      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   306d4:	69e3      	ldr	r3, [r4, #28]
   306d6:	4631      	mov	r1, r6
   306d8:	9305      	str	r3, [sp, #20]
   306da:	69a3      	ldr	r3, [r4, #24]
   306dc:	4628      	mov	r0, r5
   306de:	9304      	str	r3, [sp, #16]
   306e0:	6963      	ldr	r3, [r4, #20]
   306e2:	9303      	str	r3, [sp, #12]
   306e4:	6923      	ldr	r3, [r4, #16]
   306e6:	9302      	str	r3, [sp, #8]
   306e8:	68e3      	ldr	r3, [r4, #12]
   306ea:	9301      	str	r3, [sp, #4]
   306ec:	68a3      	ldr	r3, [r4, #8]
   306ee:	9300      	str	r3, [sp, #0]
   306f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   306f4:	f7e4 fef8 	bl	154e8 <print_formatted>
		break;
   306f8:	e79b      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   306fa:	6a23      	ldr	r3, [r4, #32]
   306fc:	4631      	mov	r1, r6
   306fe:	9306      	str	r3, [sp, #24]
   30700:	69e3      	ldr	r3, [r4, #28]
   30702:	4628      	mov	r0, r5
   30704:	9305      	str	r3, [sp, #20]
   30706:	69a3      	ldr	r3, [r4, #24]
   30708:	9304      	str	r3, [sp, #16]
   3070a:	6963      	ldr	r3, [r4, #20]
   3070c:	9303      	str	r3, [sp, #12]
   3070e:	6923      	ldr	r3, [r4, #16]
   30710:	9302      	str	r3, [sp, #8]
   30712:	68e3      	ldr	r3, [r4, #12]
   30714:	9301      	str	r3, [sp, #4]
   30716:	68a3      	ldr	r3, [r4, #8]
   30718:	9300      	str	r3, [sp, #0]
   3071a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3071e:	f7e4 fee3 	bl	154e8 <print_formatted>
		break;
   30722:	e786      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   30724:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30726:	4631      	mov	r1, r6
   30728:	9307      	str	r3, [sp, #28]
   3072a:	6a23      	ldr	r3, [r4, #32]
   3072c:	4628      	mov	r0, r5
   3072e:	9306      	str	r3, [sp, #24]
   30730:	69e3      	ldr	r3, [r4, #28]
   30732:	9305      	str	r3, [sp, #20]
   30734:	69a3      	ldr	r3, [r4, #24]
   30736:	9304      	str	r3, [sp, #16]
   30738:	6963      	ldr	r3, [r4, #20]
   3073a:	9303      	str	r3, [sp, #12]
   3073c:	6923      	ldr	r3, [r4, #16]
   3073e:	9302      	str	r3, [sp, #8]
   30740:	68e3      	ldr	r3, [r4, #12]
   30742:	9301      	str	r3, [sp, #4]
   30744:	68a3      	ldr	r3, [r4, #8]
   30746:	9300      	str	r3, [sp, #0]
   30748:	e9d4 2300 	ldrd	r2, r3, [r4]
   3074c:	f7e4 fecc 	bl	154e8 <print_formatted>
		break;
   30750:	e76f      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   30752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   30754:	4631      	mov	r1, r6
   30756:	9308      	str	r3, [sp, #32]
   30758:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3075a:	4628      	mov	r0, r5
   3075c:	9307      	str	r3, [sp, #28]
   3075e:	6a23      	ldr	r3, [r4, #32]
   30760:	9306      	str	r3, [sp, #24]
   30762:	69e3      	ldr	r3, [r4, #28]
   30764:	9305      	str	r3, [sp, #20]
   30766:	69a3      	ldr	r3, [r4, #24]
   30768:	9304      	str	r3, [sp, #16]
   3076a:	6963      	ldr	r3, [r4, #20]
   3076c:	9303      	str	r3, [sp, #12]
   3076e:	6923      	ldr	r3, [r4, #16]
   30770:	9302      	str	r3, [sp, #8]
   30772:	68e3      	ldr	r3, [r4, #12]
   30774:	9301      	str	r3, [sp, #4]
   30776:	68a3      	ldr	r3, [r4, #8]
   30778:	9300      	str	r3, [sp, #0]
   3077a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3077e:	f7e4 feb3 	bl	154e8 <print_formatted>
		break;
   30782:	e756      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   30784:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   30786:	4631      	mov	r1, r6
   30788:	9309      	str	r3, [sp, #36]	; 0x24
   3078a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   3078c:	4628      	mov	r0, r5
   3078e:	9308      	str	r3, [sp, #32]
   30790:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30792:	9307      	str	r3, [sp, #28]
   30794:	6a23      	ldr	r3, [r4, #32]
   30796:	9306      	str	r3, [sp, #24]
   30798:	69e3      	ldr	r3, [r4, #28]
   3079a:	9305      	str	r3, [sp, #20]
   3079c:	69a3      	ldr	r3, [r4, #24]
   3079e:	9304      	str	r3, [sp, #16]
   307a0:	6963      	ldr	r3, [r4, #20]
   307a2:	9303      	str	r3, [sp, #12]
   307a4:	6923      	ldr	r3, [r4, #16]
   307a6:	9302      	str	r3, [sp, #8]
   307a8:	68e3      	ldr	r3, [r4, #12]
   307aa:	9301      	str	r3, [sp, #4]
   307ac:	68a3      	ldr	r3, [r4, #8]
   307ae:	9300      	str	r3, [sp, #0]
   307b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   307b4:	f7e4 fe98 	bl	154e8 <print_formatted>
		break;
   307b8:	e73b      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   307ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   307bc:	4631      	mov	r1, r6
   307be:	930a      	str	r3, [sp, #40]	; 0x28
   307c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   307c2:	4628      	mov	r0, r5
   307c4:	9309      	str	r3, [sp, #36]	; 0x24
   307c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   307c8:	9308      	str	r3, [sp, #32]
   307ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   307cc:	9307      	str	r3, [sp, #28]
   307ce:	6a23      	ldr	r3, [r4, #32]
   307d0:	9306      	str	r3, [sp, #24]
   307d2:	69e3      	ldr	r3, [r4, #28]
   307d4:	9305      	str	r3, [sp, #20]
   307d6:	69a3      	ldr	r3, [r4, #24]
   307d8:	9304      	str	r3, [sp, #16]
   307da:	6963      	ldr	r3, [r4, #20]
   307dc:	9303      	str	r3, [sp, #12]
   307de:	6923      	ldr	r3, [r4, #16]
   307e0:	9302      	str	r3, [sp, #8]
   307e2:	68e3      	ldr	r3, [r4, #12]
   307e4:	9301      	str	r3, [sp, #4]
   307e6:	68a3      	ldr	r3, [r4, #8]
   307e8:	9300      	str	r3, [sp, #0]
   307ea:	e9d4 2300 	ldrd	r2, r3, [r4]
   307ee:	f7e4 fe7b 	bl	154e8 <print_formatted>
		break;
   307f2:	e71e      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   307f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   307f6:	4631      	mov	r1, r6
   307f8:	930b      	str	r3, [sp, #44]	; 0x2c
   307fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   307fc:	4628      	mov	r0, r5
   307fe:	930a      	str	r3, [sp, #40]	; 0x28
   30800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   30802:	9309      	str	r3, [sp, #36]	; 0x24
   30804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   30806:	9308      	str	r3, [sp, #32]
   30808:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3080a:	9307      	str	r3, [sp, #28]
   3080c:	6a23      	ldr	r3, [r4, #32]
   3080e:	9306      	str	r3, [sp, #24]
   30810:	69e3      	ldr	r3, [r4, #28]
   30812:	9305      	str	r3, [sp, #20]
   30814:	69a3      	ldr	r3, [r4, #24]
   30816:	9304      	str	r3, [sp, #16]
   30818:	6963      	ldr	r3, [r4, #20]
   3081a:	9303      	str	r3, [sp, #12]
   3081c:	6923      	ldr	r3, [r4, #16]
   3081e:	9302      	str	r3, [sp, #8]
   30820:	68e3      	ldr	r3, [r4, #12]
   30822:	9301      	str	r3, [sp, #4]
   30824:	68a3      	ldr	r3, [r4, #8]
   30826:	9300      	str	r3, [sp, #0]
   30828:	e9d4 2300 	ldrd	r2, r3, [r4]
   3082c:	f7e4 fe5c 	bl	154e8 <print_formatted>
		break;
   30830:	e6ff      	b.n	30632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   30832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   30834:	4631      	mov	r1, r6
   30836:	930c      	str	r3, [sp, #48]	; 0x30
   30838:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3083a:	4628      	mov	r0, r5
   3083c:	930b      	str	r3, [sp, #44]	; 0x2c
   3083e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   30840:	930a      	str	r3, [sp, #40]	; 0x28
   30842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   30844:	9309      	str	r3, [sp, #36]	; 0x24
   30846:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   30848:	9308      	str	r3, [sp, #32]
   3084a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3084c:	9307      	str	r3, [sp, #28]
   3084e:	6a23      	ldr	r3, [r4, #32]
   30850:	9306      	str	r3, [sp, #24]
   30852:	69e3      	ldr	r3, [r4, #28]
   30854:	9305      	str	r3, [sp, #20]
   30856:	69a3      	ldr	r3, [r4, #24]
   30858:	9304      	str	r3, [sp, #16]
   3085a:	6963      	ldr	r3, [r4, #20]
   3085c:	9303      	str	r3, [sp, #12]
   3085e:	6923      	ldr	r3, [r4, #16]
   30860:	9302      	str	r3, [sp, #8]
   30862:	68e3      	ldr	r3, [r4, #12]
   30864:	9301      	str	r3, [sp, #4]
   30866:	68a3      	ldr	r3, [r4, #8]
   30868:	9300      	str	r3, [sp, #0]
   3086a:	e9d4 2300 	ldrd	r2, r3, [r4]
   3086e:	f7e4 fe3b 	bl	154e8 <print_formatted>
}
   30872:	e6de      	b.n	30632 <std_print+0x78>

00030874 <log_output_flush>:
		     output->control_block->offset,
   30874:	6842      	ldr	r2, [r0, #4]
{
   30876:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   30878:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   3087c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   3087e:	6881      	ldr	r1, [r0, #8]
   30880:	6800      	ldr	r0, [r0, #0]
   30882:	f7ff fe8d 	bl	305a0 <buffer_write>
	output->control_block->offset = 0;
   30886:	2200      	movs	r2, #0
   30888:	6863      	ldr	r3, [r4, #4]
   3088a:	601a      	str	r2, [r3, #0]
}
   3088c:	bd10      	pop	{r4, pc}

0003088e <sntp_init>:
{
   3088e:	b570      	push	{r4, r5, r6, lr}
   30890:	460d      	mov	r5, r1
   30892:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   30894:	4604      	mov	r4, r0
   30896:	b330      	cbz	r0, 308e6 <sntp_init+0x58>
   30898:	b329      	cbz	r1, 308e6 <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   3089a:	2214      	movs	r2, #20
   3089c:	2100      	movs	r1, #0
   3089e:	f006 ff90 	bl	377c2 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   308a2:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   308a4:	2211      	movs	r2, #17
   308a6:	2102      	movs	r1, #2
   308a8:	f7e5 f8da 	bl	15a60 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   308ac:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   308ae:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   308b0:	da04      	bge.n	308bc <sntp_init+0x2e>
		return -errno;
   308b2:	f001 fddf 	bl	32474 <__errno>
   308b6:	6800      	ldr	r0, [r0, #0]
   308b8:	4240      	negs	r0, r0
}
   308ba:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   308bc:	4632      	mov	r2, r6
   308be:	4629      	mov	r1, r5
   308c0:	f000 f854 	bl	3096c <z_impl_zsock_connect>
	if (ret < 0) {
   308c4:	2800      	cmp	r0, #0
   308c6:	68e0      	ldr	r0, [r4, #12]
   308c8:	da02      	bge.n	308d0 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   308ca:	f000 f82b 	bl	30924 <z_impl_zsock_close>
   308ce:	e7f0      	b.n	308b2 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   308d0:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   308d2:	68a3      	ldr	r3, [r4, #8]
   308d4:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   308d8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   308dc:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   308de:	8091      	strh	r1, [r2, #4]
	return 0;
   308e0:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   308e2:	60a3      	str	r3, [r4, #8]
	return 0;
   308e4:	e7e9      	b.n	308ba <sntp_init+0x2c>
		return -EFAULT;
   308e6:	f06f 000d 	mvn.w	r0, #13
   308ea:	e7e6      	b.n	308ba <sntp_init+0x2c>

000308ec <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   308ec:	b110      	cbz	r0, 308f4 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   308ee:	68c0      	ldr	r0, [r0, #12]
   308f0:	f000 b818 	b.w	30924 <z_impl_zsock_close>
	}
}
   308f4:	4770      	bx	lr

000308f6 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   308f6:	f7e5 ba49 	b.w	15d8c <socket_offload_getaddrinfo>

000308fa <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   308fa:	f7e5 ba7b 	b.w	15df4 <socket_offload_freeaddrinfo>

000308fe <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   308fe:	f7fa ba51 	b.w	2ada4 <z_impl_k_mutex_unlock>

00030902 <z_fdtable_call_ioctl>:
{
   30902:	b40c      	push	{r2, r3}
   30904:	4603      	mov	r3, r0
   30906:	b507      	push	{r0, r1, r2, lr}
   30908:	aa04      	add	r2, sp, #16
   3090a:	4608      	mov	r0, r1
   3090c:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   30910:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   30912:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   30914:	4798      	blx	r3
}
   30916:	b003      	add	sp, #12
   30918:	f85d eb04 	ldr.w	lr, [sp], #4
   3091c:	b002      	add	sp, #8
   3091e:	4770      	bx	lr

00030920 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   30920:	f7fa b946 	b.w	2abb0 <z_impl_k_mutex_lock>

00030924 <z_impl_zsock_close>:
{
   30924:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   30926:	4669      	mov	r1, sp
   30928:	aa01      	add	r2, sp, #4
{
   3092a:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   3092c:	f7e2 fe30 	bl	13590 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   30930:	4604      	mov	r4, r0
   30932:	b940      	cbnz	r0, 30946 <z_impl_zsock_close+0x22>
		errno = EBADF;
   30934:	f001 fd9e 	bl	32474 <__errno>
   30938:	2309      	movs	r3, #9
		return -1;
   3093a:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   3093e:	6003      	str	r3, [r0, #0]
}
   30940:	4620      	mov	r0, r4
   30942:	b003      	add	sp, #12
   30944:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   30946:	f04f 32ff 	mov.w	r2, #4294967295
   3094a:	f04f 33ff 	mov.w	r3, #4294967295
   3094e:	9801      	ldr	r0, [sp, #4]
   30950:	f7ff ffe6 	bl	30920 <k_mutex_lock.constprop.0>
	z_free_fd(sock);
   30954:	4628      	mov	r0, r5
   30956:	f7e2 fe83 	bl	13660 <z_free_fd>
	ret = vtable->fd_vtable.close(ctx);
   3095a:	9b00      	ldr	r3, [sp, #0]
   3095c:	4620      	mov	r0, r4
   3095e:	689b      	ldr	r3, [r3, #8]
   30960:	4798      	blx	r3
   30962:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   30964:	9801      	ldr	r0, [sp, #4]
   30966:	f7ff ffca 	bl	308fe <k_mutex_unlock>
	return ret;
   3096a:	e7e9      	b.n	30940 <z_impl_zsock_close+0x1c>

0003096c <z_impl_zsock_connect>:
{
   3096c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3096e:	460d      	mov	r5, r1
   30970:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   30972:	4669      	mov	r1, sp
   30974:	aa01      	add	r2, sp, #4
   30976:	f7e2 fe0b 	bl	13590 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   3097a:	4604      	mov	r4, r0
   3097c:	b110      	cbz	r0, 30984 <z_impl_zsock_connect+0x18>
   3097e:	9b00      	ldr	r3, [sp, #0]
   30980:	695b      	ldr	r3, [r3, #20]
   30982:	b943      	cbnz	r3, 30996 <z_impl_zsock_connect+0x2a>
   30984:	f001 fd76 	bl	32474 <__errno>
   30988:	2309      	movs	r3, #9
   3098a:	f04f 34ff 	mov.w	r4, #4294967295
   3098e:	6003      	str	r3, [r0, #0]
}
   30990:	4620      	mov	r0, r4
   30992:	b002      	add	sp, #8
   30994:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   30996:	f04f 32ff 	mov.w	r2, #4294967295
   3099a:	f04f 33ff 	mov.w	r3, #4294967295
   3099e:	9801      	ldr	r0, [sp, #4]
   309a0:	f7ff ffbe 	bl	30920 <k_mutex_lock.constprop.0>
   309a4:	9b00      	ldr	r3, [sp, #0]
   309a6:	4632      	mov	r2, r6
   309a8:	4629      	mov	r1, r5
   309aa:	4620      	mov	r0, r4
   309ac:	695b      	ldr	r3, [r3, #20]
   309ae:	4798      	blx	r3
   309b0:	4604      	mov	r4, r0
   309b2:	9801      	ldr	r0, [sp, #4]
   309b4:	f7ff ffa3 	bl	308fe <k_mutex_unlock>
   309b8:	e7ea      	b.n	30990 <z_impl_zsock_connect+0x24>

000309ba <z_impl_zsock_sendto>:
{
   309ba:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   309be:	460d      	mov	r5, r1
   309c0:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   309c2:	a902      	add	r1, sp, #8
   309c4:	aa03      	add	r2, sp, #12
{
   309c6:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   309c8:	f7e2 fde2 	bl	13590 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   309cc:	4604      	mov	r4, r0
   309ce:	b110      	cbz	r0, 309d6 <z_impl_zsock_sendto+0x1c>
   309d0:	9b02      	ldr	r3, [sp, #8]
   309d2:	6a1b      	ldr	r3, [r3, #32]
   309d4:	b94b      	cbnz	r3, 309ea <z_impl_zsock_sendto+0x30>
   309d6:	f001 fd4d 	bl	32474 <__errno>
   309da:	2309      	movs	r3, #9
   309dc:	f04f 34ff 	mov.w	r4, #4294967295
   309e0:	6003      	str	r3, [r0, #0]
}
   309e2:	4620      	mov	r0, r4
   309e4:	b004      	add	sp, #16
   309e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   309ea:	f04f 32ff 	mov.w	r2, #4294967295
   309ee:	f04f 33ff 	mov.w	r3, #4294967295
   309f2:	9803      	ldr	r0, [sp, #12]
   309f4:	f7ff ff94 	bl	30920 <k_mutex_lock.constprop.0>
   309f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   309fa:	4632      	mov	r2, r6
   309fc:	9301      	str	r3, [sp, #4]
   309fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30a00:	4629      	mov	r1, r5
   30a02:	9300      	str	r3, [sp, #0]
   30a04:	9b02      	ldr	r3, [sp, #8]
   30a06:	4620      	mov	r0, r4
   30a08:	f8d3 8020 	ldr.w	r8, [r3, #32]
   30a0c:	463b      	mov	r3, r7
   30a0e:	47c0      	blx	r8
   30a10:	4604      	mov	r4, r0
   30a12:	9803      	ldr	r0, [sp, #12]
   30a14:	f7ff ff73 	bl	308fe <k_mutex_unlock>
   30a18:	e7e3      	b.n	309e2 <z_impl_zsock_sendto+0x28>

00030a1a <z_impl_zsock_sendmsg>:
{
   30a1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30a1c:	460d      	mov	r5, r1
   30a1e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   30a20:	4669      	mov	r1, sp
   30a22:	aa01      	add	r2, sp, #4
   30a24:	f7e2 fdb4 	bl	13590 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   30a28:	4604      	mov	r4, r0
   30a2a:	b110      	cbz	r0, 30a32 <z_impl_zsock_sendmsg+0x18>
   30a2c:	9b00      	ldr	r3, [sp, #0]
   30a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   30a30:	b943      	cbnz	r3, 30a44 <z_impl_zsock_sendmsg+0x2a>
   30a32:	f001 fd1f 	bl	32474 <__errno>
   30a36:	2309      	movs	r3, #9
   30a38:	f04f 34ff 	mov.w	r4, #4294967295
   30a3c:	6003      	str	r3, [r0, #0]
}
   30a3e:	4620      	mov	r0, r4
   30a40:	b002      	add	sp, #8
   30a42:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   30a44:	f04f 32ff 	mov.w	r2, #4294967295
   30a48:	f04f 33ff 	mov.w	r3, #4294967295
   30a4c:	9801      	ldr	r0, [sp, #4]
   30a4e:	f7ff ff67 	bl	30920 <k_mutex_lock.constprop.0>
   30a52:	9b00      	ldr	r3, [sp, #0]
   30a54:	4632      	mov	r2, r6
   30a56:	4629      	mov	r1, r5
   30a58:	4620      	mov	r0, r4
   30a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   30a5c:	4798      	blx	r3
   30a5e:	4604      	mov	r4, r0
   30a60:	9801      	ldr	r0, [sp, #4]
   30a62:	f7ff ff4c 	bl	308fe <k_mutex_unlock>
   30a66:	e7ea      	b.n	30a3e <z_impl_zsock_sendmsg+0x24>

00030a68 <z_impl_zsock_recvfrom>:
{
   30a68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30a6c:	460d      	mov	r5, r1
   30a6e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   30a70:	a902      	add	r1, sp, #8
   30a72:	aa03      	add	r2, sp, #12
{
   30a74:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   30a76:	f7e2 fd8b 	bl	13590 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   30a7a:	4604      	mov	r4, r0
   30a7c:	b110      	cbz	r0, 30a84 <z_impl_zsock_recvfrom+0x1c>
   30a7e:	9b02      	ldr	r3, [sp, #8]
   30a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   30a82:	b94b      	cbnz	r3, 30a98 <z_impl_zsock_recvfrom+0x30>
   30a84:	f001 fcf6 	bl	32474 <__errno>
   30a88:	2309      	movs	r3, #9
   30a8a:	f04f 34ff 	mov.w	r4, #4294967295
   30a8e:	6003      	str	r3, [r0, #0]
}
   30a90:	4620      	mov	r0, r4
   30a92:	b004      	add	sp, #16
   30a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   30a98:	f04f 32ff 	mov.w	r2, #4294967295
   30a9c:	f04f 33ff 	mov.w	r3, #4294967295
   30aa0:	9803      	ldr	r0, [sp, #12]
   30aa2:	f7ff ff3d 	bl	30920 <k_mutex_lock.constprop.0>
   30aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   30aa8:	4632      	mov	r2, r6
   30aaa:	9301      	str	r3, [sp, #4]
   30aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30aae:	4629      	mov	r1, r5
   30ab0:	9300      	str	r3, [sp, #0]
   30ab2:	9b02      	ldr	r3, [sp, #8]
   30ab4:	4620      	mov	r0, r4
   30ab6:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   30aba:	463b      	mov	r3, r7
   30abc:	47c0      	blx	r8
   30abe:	4604      	mov	r4, r0
   30ac0:	9803      	ldr	r0, [sp, #12]
   30ac2:	f7ff ff1c 	bl	308fe <k_mutex_unlock>
   30ac6:	e7e3      	b.n	30a90 <z_impl_zsock_recvfrom+0x28>

00030ac8 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   30ac8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30acc:	460d      	mov	r5, r1
   30ace:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   30ad0:	a902      	add	r1, sp, #8
   30ad2:	aa03      	add	r2, sp, #12
{
   30ad4:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   30ad6:	f7e2 fd5b 	bl	13590 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   30ada:	4604      	mov	r4, r0
   30adc:	b110      	cbz	r0, 30ae4 <z_impl_zsock_setsockopt+0x1c>
   30ade:	9b02      	ldr	r3, [sp, #8]
   30ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30ae2:	b94b      	cbnz	r3, 30af8 <z_impl_zsock_setsockopt+0x30>
   30ae4:	f001 fcc6 	bl	32474 <__errno>
   30ae8:	2309      	movs	r3, #9
   30aea:	f04f 34ff 	mov.w	r4, #4294967295
   30aee:	6003      	str	r3, [r0, #0]
}
   30af0:	4620      	mov	r0, r4
   30af2:	b004      	add	sp, #16
   30af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   30af8:	f04f 32ff 	mov.w	r2, #4294967295
   30afc:	f04f 33ff 	mov.w	r3, #4294967295
   30b00:	9803      	ldr	r0, [sp, #12]
   30b02:	f7ff ff0d 	bl	30920 <k_mutex_lock.constprop.0>
   30b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30b08:	4632      	mov	r2, r6
   30b0a:	9300      	str	r3, [sp, #0]
   30b0c:	9b02      	ldr	r3, [sp, #8]
   30b0e:	4629      	mov	r1, r5
   30b10:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
   30b14:	4620      	mov	r0, r4
   30b16:	463b      	mov	r3, r7
   30b18:	47c0      	blx	r8
   30b1a:	4604      	mov	r4, r0
   30b1c:	9803      	ldr	r0, [sp, #12]
   30b1e:	f7ff feee 	bl	308fe <k_mutex_unlock>
   30b22:	e7e5      	b.n	30af0 <z_impl_zsock_setsockopt+0x28>

00030b24 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   30b24:	2200      	movs	r2, #0
   30b26:	e9c0 2200 	strd	r2, r2, [r0]
   30b2a:	6082      	str	r2, [r0, #8]
}
   30b2c:	4770      	bx	lr

00030b2e <set_starting_state>:
{
   30b2e:	b510      	push	{r4, lr}
	__asm__ volatile(
   30b30:	f04f 0320 	mov.w	r3, #32
   30b34:	f3ef 8211 	mrs	r2, BASEPRI
   30b38:	f383 8811 	msr	BASEPRI, r3
   30b3c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   30b40:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   30b42:	f003 0407 	and.w	r4, r3, #7
   30b46:	2c01      	cmp	r4, #1
   30b48:	d106      	bne.n	30b58 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   30b4a:	6001      	str	r1, [r0, #0]
	int err = 0;
   30b4c:	2000      	movs	r0, #0
	__asm__ volatile(
   30b4e:	f382 8811 	msr	BASEPRI, r2
   30b52:	f3bf 8f6f 	isb	sy
}
   30b56:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   30b58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   30b5c:	428b      	cmp	r3, r1
		err = -EALREADY;
   30b5e:	bf14      	ite	ne
   30b60:	f04f 30ff 	movne.w	r0, #4294967295
   30b64:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   30b68:	e7f1      	b.n	30b4e <set_starting_state+0x20>

00030b6a <set_on_state>:
	__asm__ volatile(
   30b6a:	f04f 0320 	mov.w	r3, #32
   30b6e:	f3ef 8211 	mrs	r2, BASEPRI
   30b72:	f383 8811 	msr	BASEPRI, r3
   30b76:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   30b7a:	6803      	ldr	r3, [r0, #0]
   30b7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   30b80:	f043 0302 	orr.w	r3, r3, #2
   30b84:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   30b86:	f382 8811 	msr	BASEPRI, r2
   30b8a:	f3bf 8f6f 	isb	sy
}
   30b8e:	4770      	bx	lr

00030b90 <onoff_started_callback>:
	return &data->mgr[type];
   30b90:	6900      	ldr	r0, [r0, #16]
   30b92:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   30b94:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   30b98:	2100      	movs	r1, #0
   30b9a:	4710      	bx	r2

00030b9c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   30b9c:	2000      	movs	r0, #0
   30b9e:	f7f3 bfeb 	b.w	24b78 <nrfx_clock_start>

00030ba2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   30ba2:	2000      	movs	r0, #0
   30ba4:	f7f4 b83e 	b.w	24c24 <nrfx_clock_stop>

00030ba8 <api_stop>:
	return stop(dev, subsys, CTX_API);
   30ba8:	2280      	movs	r2, #128	; 0x80
   30baa:	f7e5 ba97 	b.w	160dc <stop>

00030bae <blocking_start_callback>:
{
   30bae:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   30bb0:	f7fa bb26 	b.w	2b200 <z_impl_k_sem_give>

00030bb4 <api_start>:
{
   30bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   30bb8:	240c      	movs	r4, #12
   30bba:	b2c9      	uxtb	r1, r1
   30bbc:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   30bbe:	6905      	ldr	r5, [r0, #16]
{
   30bc0:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   30bc2:	f104 0048 	add.w	r0, r4, #72	; 0x48
   30bc6:	2180      	movs	r1, #128	; 0x80
   30bc8:	4428      	add	r0, r5
{
   30bca:	4690      	mov	r8, r2
   30bcc:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   30bce:	f7ff ffae 	bl	30b2e <set_starting_state>
	if (err < 0) {
   30bd2:	2800      	cmp	r0, #0
   30bd4:	db06      	blt.n	30be4 <api_start+0x30>
	subdata->cb = cb;
   30bd6:	4425      	add	r5, r4
	subdata->user_data = user_data;
   30bd8:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   30bdc:	6873      	ldr	r3, [r6, #4]
   30bde:	591b      	ldr	r3, [r3, r4]
   30be0:	4798      	blx	r3
	return 0;
   30be2:	2000      	movs	r0, #0
}
   30be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030be8 <uart_fifo_read>:
	if (api->fifo_read != NULL) {
   30be8:	6883      	ldr	r3, [r0, #8]
   30bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   30bec:	b103      	cbz	r3, 30bf0 <uart_fifo_read+0x8>
		return api->fifo_read(dev, rx_data, size);
   30bee:	4718      	bx	r3
}
   30bf0:	4618      	mov	r0, r3
   30bf2:	4770      	bx	lr

00030bf4 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   30bf4:	6883      	ldr	r3, [r0, #8]
   30bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30bf8:	b103      	cbz	r3, 30bfc <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   30bfa:	4718      	bx	r3
}
   30bfc:	4770      	bx	lr

00030bfe <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable != NULL) {
   30bfe:	6883      	ldr	r3, [r0, #8]
   30c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30c02:	b103      	cbz	r3, 30c06 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   30c04:	4718      	bx	r3
}
   30c06:	4770      	bx	lr

00030c08 <z_impl_uart_irq_rx_disable>:
	if (api->irq_rx_disable != NULL) {
   30c08:	6883      	ldr	r3, [r0, #8]
   30c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30c0c:	b103      	cbz	r3, 30c10 <z_impl_uart_irq_rx_disable+0x8>
		api->irq_rx_disable(dev);
   30c0e:	4718      	bx	r3
}
   30c10:	4770      	bx	lr

00030c12 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   30c12:	4770      	bx	lr

00030c14 <sys_clock_disable>:
   30c14:	4770      	bx	lr

00030c16 <bt_scan_stop>:
	return bt_le_scan_stop();
   30c16:	f7e9 be65 	b.w	1a8e4 <bt_le_scan_stop>

00030c1a <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   30c1a:	b510      	push	{r4, lr}
   30c1c:	b40f      	push	{r0, r1, r2, r3}
   30c1e:	f7e6 f9f9 	bl	17014 <before_nse>
   30c22:	bc0f      	pop	{r0, r1, r2, r3}
   30c24:	f7df f9e0 	bl	ffe8 <spm_request_random_number_nse>
   30c28:	b40f      	push	{r0, r1, r2, r3}
   30c2a:	f7e6 f9fd 	bl	17028 <after_nse>
   30c2e:	bc0f      	pop	{r0, r1, r2, r3}
   30c30:	bd10      	pop	{r4, pc}

00030c32 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   30c32:	b538      	push	{r3, r4, r5, lr}
   30c34:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   30c36:	42ab      	cmp	r3, r5
{
   30c38:	4611      	mov	r1, r2
   30c3a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   30c3c:	d804      	bhi.n	30c48 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30c3e:	461a      	mov	r2, r3
   30c40:	f006 fd9f 	bl	37782 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   30c44:	4620      	mov	r0, r4
   30c46:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   30c48:	2400      	movs	r4, #0
   30c4a:	e7fb      	b.n	30c44 <_copy+0x12>

00030c4c <_set>:
__ssp_bos_icheck3(memset, void *, int)
   30c4c:	f006 bdb9 	b.w	377c2 <memset>

00030c50 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   30c50:	09c3      	lsrs	r3, r0, #7
   30c52:	005a      	lsls	r2, r3, #1
   30c54:	4413      	add	r3, r2
   30c56:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   30c5a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   30c5e:	b2c0      	uxtb	r0, r0
   30c60:	4770      	bx	lr

00030c62 <bits2int>:
static uECC_RNG_Function g_rng_function = 0;
#endif

static void bits2int(uECC_word_t *native, const uint8_t *bits,
		     unsigned bits_size, uECC_Curve curve)
{
   30c62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30c66:	4698      	mov	r8, r3
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   30c68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   30c6c:	4689      	mov	r9, r1
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   30c6e:	f113 011f 	adds.w	r1, r3, #31
   30c72:	bf48      	it	mi
   30c74:	f103 013e 	addmi.w	r1, r3, #62	; 0x3e
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   30c78:	1ddd      	adds	r5, r3, #7
   30c7a:	bf48      	it	mi
   30c7c:	f103 050e 	addmi.w	r5, r3, #14
   30c80:	10ec      	asrs	r4, r5, #3
   30c82:	4294      	cmp	r4, r2
   30c84:	bf28      	it	cs
   30c86:	4614      	movcs	r4, r2
{
   30c88:	4607      	mov	r7, r0
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   30c8a:	114e      	asrs	r6, r1, #5

	if (bits_size > num_n_bytes) {
		bits_size = num_n_bytes;
	}

	uECC_vli_clear(native, num_n_words);
   30c8c:	b275      	sxtb	r5, r6
   30c8e:	4629      	mov	r1, r5
   30c90:	f000 f9c8 	bl	31024 <uECC_vli_clear>
	uECC_vli_bytesToNative(native, bits, bits_size);
   30c94:	4622      	mov	r2, r4
   30c96:	4649      	mov	r1, r9
   30c98:	4638      	mov	r0, r7
   30c9a:	f000 fec2 	bl	31a22 <uECC_vli_bytesToNative>
	if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
   30c9e:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
   30ca2:	00e2      	lsls	r2, r4, #3
   30ca4:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
   30ca8:	d221      	bcs.n	30cee <bits2int+0x8c>
		return;
	}
	shift = bits_size * 8 - curve->num_n_bits;
	carry = 0;
   30caa:	2000      	movs	r0, #0
	shift = bits_size * 8 - curve->num_n_bits;
   30cac:	1ad2      	subs	r2, r2, r3
	ptr = native + num_n_words;
   30cae:	eb07 0186 	add.w	r1, r7, r6, lsl #2
	while (ptr-- > native) {
		uECC_word_t temp = *ptr;
		*ptr = (temp >> shift) | carry;
		carry = temp << (uECC_WORD_BITS - shift);
   30cb2:	f1c2 0620 	rsb	r6, r2, #32
	while (ptr-- > native) {
   30cb6:	428f      	cmp	r7, r1
   30cb8:	d310      	bcc.n	30cdc <bits2int+0x7a>
	}

	/* Reduce mod curve_n */
	if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
   30cba:	f108 0824 	add.w	r8, r8, #36	; 0x24
   30cbe:	462a      	mov	r2, r5
   30cc0:	4639      	mov	r1, r7
   30cc2:	4640      	mov	r0, r8
   30cc4:	f000 f9ff 	bl	310c6 <uECC_vli_cmp_unsafe>
   30cc8:	2801      	cmp	r0, #1
   30cca:	d010      	beq.n	30cee <bits2int+0x8c>
		uECC_vli_sub(native, native, curve->n, num_n_words);
   30ccc:	462b      	mov	r3, r5
   30cce:	4642      	mov	r2, r8
   30cd0:	4639      	mov	r1, r7
   30cd2:	4638      	mov	r0, r7
	}
}
   30cd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		uECC_vli_sub(native, native, curve->n, num_n_words);
   30cd8:	f000 ba0c 	b.w	310f4 <uECC_vli_sub>
		uECC_word_t temp = *ptr;
   30cdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
		*ptr = (temp >> shift) | carry;
   30ce0:	fa24 f302 	lsr.w	r3, r4, r2
   30ce4:	4303      	orrs	r3, r0
   30ce6:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - shift);
   30ce8:	fa04 f006 	lsl.w	r0, r4, r6
   30cec:	e7e3      	b.n	30cb6 <bits2int+0x54>
}
   30cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00030cf2 <uECC_sign_with_k>:

int uECC_sign_with_k(const uint8_t *private_key, const uint8_t *message_hash,
		     unsigned hash_size, uECC_word_t *k, uint8_t *signature,
		     uECC_Curve curve)
{
   30cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30cf6:	461d      	mov	r5, r3
   30cf8:	b0a9      	sub	sp, #164	; 0xa4
   30cfa:	9e33      	ldr	r6, [sp, #204]	; 0xcc
   30cfc:	e9cd 0103 	strd	r0, r1, [sp, #12]
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t s[NUM_ECC_WORDS];
	uECC_word_t *k2[2] = {tmp, s};
	uECC_word_t p[NUM_ECC_WORDS * 2];
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   30d00:	f996 b000 	ldrsb.w	fp, [r6]
	uECC_word_t *k2[2] = {tmp, s};
   30d04:	f10d 0920 	add.w	r9, sp, #32
   30d08:	ab10      	add	r3, sp, #64	; 0x40
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
	bitcount_t num_n_bits = curve->num_n_bits;

	/* Make sure 0 < k < curve_n */
  	if (uECC_vli_isZero(k, num_words) ||
   30d0a:	4659      	mov	r1, fp
   30d0c:	4628      	mov	r0, r5
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   30d0e:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
{
   30d12:	9205      	str	r2, [sp, #20]
	uECC_word_t *k2[2] = {tmp, s};
   30d14:	f8cd 9018 	str.w	r9, [sp, #24]
   30d18:	9307      	str	r3, [sp, #28]
  	if (uECC_vli_isZero(k, num_words) ||
   30d1a:	f000 f98e 	bl	3103a <uECC_vli_isZero>
   30d1e:	b118      	cbz	r0, 30d28 <uECC_sign_with_k+0x36>
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
		return 0;
   30d20:	2000      	movs	r0, #0
		return 0;
	}

	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
	return 1;
}
   30d22:	b029      	add	sp, #164	; 0xa4
   30d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   30d28:	f117 041f 	adds.w	r4, r7, #31
   30d2c:	bf48      	it	mi
   30d2e:	f107 043e 	addmi.w	r4, r7, #62	; 0x3e
   30d32:	f344 1447 	sbfx	r4, r4, #5, #8
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   30d36:	f106 0824 	add.w	r8, r6, #36	; 0x24
   30d3a:	4622      	mov	r2, r4
   30d3c:	4629      	mov	r1, r5
   30d3e:	4640      	mov	r0, r8
   30d40:	f000 f9f1 	bl	31126 <uECC_vli_cmp>
  	if (uECC_vli_isZero(k, num_words) ||
   30d44:	2801      	cmp	r0, #1
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   30d46:	4682      	mov	sl, r0
  	if (uECC_vli_isZero(k, num_words) ||
   30d48:	d1ea      	bne.n	30d20 <uECC_sign_with_k+0x2e>
	carry = regularize_k(k, tmp, s, curve);
   30d4a:	4633      	mov	r3, r6
   30d4c:	4649      	mov	r1, r9
   30d4e:	aa10      	add	r2, sp, #64	; 0x40
   30d50:	4628      	mov	r0, r5
   30d52:	f000 fe26 	bl	319a2 <regularize_k>
	EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);
   30d56:	fab0 f080 	clz	r0, r0
   30d5a:	3701      	adds	r7, #1
   30d5c:	ab28      	add	r3, sp, #160	; 0xa0
   30d5e:	0940      	lsrs	r0, r0, #5
   30d60:	b23f      	sxth	r7, r7
   30d62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   30d66:	9601      	str	r6, [sp, #4]
   30d68:	9700      	str	r7, [sp, #0]
   30d6a:	f850 2c88 	ldr.w	r2, [r0, #-136]
   30d6e:	f106 0144 	add.w	r1, r6, #68	; 0x44
   30d72:	a818      	add	r0, sp, #96	; 0x60
   30d74:	2300      	movs	r3, #0
   30d76:	f000 fd45 	bl	31804 <EccPoint_mult>
	if (uECC_vli_isZero(p, num_words)) {
   30d7a:	4659      	mov	r1, fp
   30d7c:	a818      	add	r0, sp, #96	; 0x60
   30d7e:	f000 f95c 	bl	3103a <uECC_vli_isZero>
   30d82:	2800      	cmp	r0, #0
   30d84:	d1cc      	bne.n	30d20 <uECC_sign_with_k+0x2e>
		uECC_vli_clear(tmp, num_n_words);
   30d86:	4621      	mov	r1, r4
   30d88:	4648      	mov	r0, r9
   30d8a:	f000 f94b 	bl	31024 <uECC_vli_clear>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   30d8e:	4643      	mov	r3, r8
   30d90:	464a      	mov	r2, r9
   30d92:	4629      	mov	r1, r5
   30d94:	4628      	mov	r0, r5
   30d96:	9400      	str	r4, [sp, #0]
		tmp[0] = 1;
   30d98:	f8cd a020 	str.w	sl, [sp, #32]
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   30d9c:	f000 fa9f 	bl	312de <uECC_vli_modMult>
	uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
   30da0:	4623      	mov	r3, r4
   30da2:	4642      	mov	r2, r8
   30da4:	4629      	mov	r1, r5
   30da6:	4628      	mov	r0, r5
   30da8:	f000 fc23 	bl	315f2 <uECC_vli_modInv>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
   30dac:	4643      	mov	r3, r8
   30dae:	464a      	mov	r2, r9
   30db0:	4629      	mov	r1, r5
   30db2:	4628      	mov	r0, r5
   30db4:	9400      	str	r4, [sp, #0]
   30db6:	f000 fa92 	bl	312de <uECC_vli_modMult>
	uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
   30dba:	f996 1001 	ldrsb.w	r1, [r6, #1]
   30dbe:	9832      	ldr	r0, [sp, #200]	; 0xc8
   30dc0:	aa18      	add	r2, sp, #96	; 0x60
   30dc2:	f000 fe1a 	bl	319fa <uECC_vli_nativeToBytes>
	uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
   30dc6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   30dca:	9903      	ldr	r1, [sp, #12]
   30dcc:	1dda      	adds	r2, r3, #7
   30dce:	bf48      	it	mi
   30dd0:	f103 020e 	addmi.w	r2, r3, #14
   30dd4:	10d2      	asrs	r2, r2, #3
   30dd6:	a808      	add	r0, sp, #32
   30dd8:	f000 fe23 	bl	31a22 <uECC_vli_bytesToNative>
	s[num_n_words - 1] = 0;
   30ddc:	aa28      	add	r2, sp, #160	; 0xa0
   30dde:	1e63      	subs	r3, r4, #1
   30de0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   30de4:	2200      	movs	r2, #0
	uECC_vli_set(s, p, num_words);
   30de6:	a918      	add	r1, sp, #96	; 0x60
	s[num_n_words - 1] = 0;
   30de8:	f843 2c60 	str.w	r2, [r3, #-96]
	uECC_vli_set(s, p, num_words);
   30dec:	a810      	add	r0, sp, #64	; 0x40
   30dee:	465a      	mov	r2, fp
   30df0:	f000 f95d 	bl	310ae <uECC_vli_set>
	uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
   30df4:	aa10      	add	r2, sp, #64	; 0x40
   30df6:	4610      	mov	r0, r2
   30df8:	4643      	mov	r3, r8
   30dfa:	a908      	add	r1, sp, #32
   30dfc:	9400      	str	r4, [sp, #0]
   30dfe:	f000 fa6e 	bl	312de <uECC_vli_modMult>
	bits2int(tmp, message_hash, hash_size, curve);
   30e02:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   30e06:	4633      	mov	r3, r6
   30e08:	a808      	add	r0, sp, #32
   30e0a:	f7ff ff2a 	bl	30c62 <bits2int>
	uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
   30e0e:	aa10      	add	r2, sp, #64	; 0x40
   30e10:	4610      	mov	r0, r2
   30e12:	4643      	mov	r3, r8
   30e14:	a908      	add	r1, sp, #32
   30e16:	9400      	str	r4, [sp, #0]
   30e18:	f000 f99e 	bl	31158 <uECC_vli_modAdd>
	uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
   30e1c:	a910      	add	r1, sp, #64	; 0x40
   30e1e:	4608      	mov	r0, r1
   30e20:	4643      	mov	r3, r8
   30e22:	462a      	mov	r2, r5
   30e24:	9400      	str	r4, [sp, #0]
   30e26:	f000 fa5a 	bl	312de <uECC_vli_modMult>
	if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
   30e2a:	4621      	mov	r1, r4
   30e2c:	a810      	add	r0, sp, #64	; 0x40
   30e2e:	f000 f91d 	bl	3106c <uECC_vli_numBits>
   30e32:	f996 1001 	ldrsb.w	r1, [r6, #1]
   30e36:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
   30e3a:	f73f af71 	bgt.w	30d20 <uECC_sign_with_k+0x2e>
	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
   30e3e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   30e40:	aa10      	add	r2, sp, #64	; 0x40
   30e42:	1858      	adds	r0, r3, r1
   30e44:	f000 fdd9 	bl	319fa <uECC_vli_nativeToBytes>
	return 1;
   30e48:	2001      	movs	r0, #1
   30e4a:	e76a      	b.n	30d22 <uECC_sign_with_k+0x30>

00030e4c <uECC_sign>:

int uECC_sign(const uint8_t *private_key, const uint8_t *message_hash,
	      unsigned hash_size, uint8_t *signature, uECC_Curve curve)
{
   30e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30e50:	4606      	mov	r6, r0
   30e52:	460f      	mov	r7, r1
   30e54:	4690      	mov	r8, r2
   30e56:	4699      	mov	r9, r3
   30e58:	2540      	movs	r5, #64	; 0x40
   30e5a:	b09b      	sub	sp, #108	; 0x6c
   30e5c:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
			return 0;
		}

		// computing k as modular reduction of _random (see FIPS 186.4 B.5.1):
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   30e60:	f10a 0b24 	add.w	fp, sl, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   30e64:	f7e6 f8f0 	bl	17048 <uECC_get_rng>
		if (!rng_function ||
   30e68:	4604      	mov	r4, r0
   30e6a:	b1e0      	cbz	r0, 30ea6 <uECC_sign+0x5a>
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   30e6c:	2140      	movs	r1, #64	; 0x40
   30e6e:	a80a      	add	r0, sp, #40	; 0x28
   30e70:	47a0      	blx	r4
		if (!rng_function ||
   30e72:	b1c0      	cbz	r0, 30ea6 <uECC_sign+0x5a>
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   30e74:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
   30e78:	a90a      	add	r1, sp, #40	; 0x28
   30e7a:	f112 031f 	adds.w	r3, r2, #31
   30e7e:	bf48      	it	mi
   30e80:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   30e84:	f343 1347 	sbfx	r3, r3, #5, #8
   30e88:	465a      	mov	r2, fp
   30e8a:	a802      	add	r0, sp, #8
   30e8c:	f000 f98f 	bl	311ae <uECC_vli_mmod>

		if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, 
   30e90:	4642      	mov	r2, r8
   30e92:	4639      	mov	r1, r7
   30e94:	4630      	mov	r0, r6
   30e96:	e9cd 9a00 	strd	r9, sl, [sp]
   30e9a:	ab02      	add	r3, sp, #8
   30e9c:	f7ff ff29 	bl	30cf2 <uECC_sign_with_k>
   30ea0:	b928      	cbnz	r0, 30eae <uECC_sign+0x62>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   30ea2:	3d01      	subs	r5, #1
   30ea4:	d1de      	bne.n	30e64 <uECC_sign+0x18>
			return 0;
   30ea6:	2000      	movs	r0, #0
		    curve)) {
			return 1;
		}
	}
	return 0;
}
   30ea8:	b01b      	add	sp, #108	; 0x6c
   30eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 1;
   30eae:	2001      	movs	r0, #1
   30eb0:	e7fa      	b.n	30ea8 <uECC_sign+0x5c>

00030eb2 <uECC_vli_add>:
{
   30eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   30eb4:	2400      	movs	r4, #0
{
   30eb6:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   30eb8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   30eba:	b265      	sxtb	r5, r4
   30ebc:	42ab      	cmp	r3, r5
   30ebe:	dc00      	bgt.n	30ec2 <uECC_vli_add+0x10>
}
   30ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   30ec2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   30ec6:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   30eca:	443d      	add	r5, r7
   30ecc:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   30ece:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   30ed0:	bf8c      	ite	hi
   30ed2:	2701      	movhi	r7, #1
   30ed4:	2700      	movls	r7, #0
		result[i] = sum;
   30ed6:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   30eda:	bf18      	it	ne
   30edc:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   30ede:	3401      	adds	r4, #1
   30ee0:	e7eb      	b.n	30eba <uECC_vli_add+0x8>

00030ee2 <uECC_vli_rshift1>:
	uECC_word_t carry = 0;
   30ee2:	2300      	movs	r3, #0
	vli += num_words;
   30ee4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	while (vli-- > end) {
   30ee8:	4288      	cmp	r0, r1
   30eea:	d300      	bcc.n	30eee <uECC_vli_rshift1+0xc>
}
   30eec:	4770      	bx	lr
		uECC_word_t temp = *vli;
   30eee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   30ef2:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   30ef6:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   30ef8:	07d3      	lsls	r3, r2, #31
   30efa:	e7f5      	b.n	30ee8 <uECC_vli_rshift1+0x6>

00030efc <vli_modInv_update>:
	if (!EVEN(uv)) {
   30efc:	6803      	ldr	r3, [r0, #0]
{
   30efe:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   30f00:	f013 0601 	ands.w	r6, r3, #1
{
   30f04:	4605      	mov	r5, r0
   30f06:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   30f08:	d005      	beq.n	30f16 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   30f0a:	4613      	mov	r3, r2
   30f0c:	460a      	mov	r2, r1
   30f0e:	4601      	mov	r1, r0
   30f10:	f7ff ffcf 	bl	30eb2 <uECC_vli_add>
   30f14:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   30f16:	4621      	mov	r1, r4
   30f18:	4628      	mov	r0, r5
   30f1a:	f7ff ffe2 	bl	30ee2 <uECC_vli_rshift1>
	if (carry) {
   30f1e:	b146      	cbz	r6, 30f32 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   30f20:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   30f24:	3a01      	subs	r2, #1
   30f26:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   30f2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   30f2e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   30f32:	bd70      	pop	{r4, r5, r6, pc}

00030f34 <uECC_vli_mult>:
{
   30f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   30f38:	2500      	movs	r5, #0
{
   30f3a:	b087      	sub	sp, #28
   30f3c:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   30f40:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   30f42:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   30f44:	fa4f f885 	sxtb.w	r8, r5
   30f48:	4543      	cmp	r3, r8
   30f4a:	dc16      	bgt.n	30f7a <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   30f4c:	f04f 35ff 	mov.w	r5, #4294967295
   30f50:	f04f 0a00 	mov.w	sl, #0
   30f54:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   30f58:	9502      	str	r5, [sp, #8]
   30f5a:	9e02      	ldr	r6, [sp, #8]
   30f5c:	fa53 fe8a 	uxtab	lr, r3, sl
   30f60:	fa4f fe8e 	sxtb.w	lr, lr
   30f64:	45b6      	cmp	lr, r6
   30f66:	fa5f f58a 	uxtb.w	r5, sl
   30f6a:	db2d      	blt.n	30fc8 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   30f6c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   30f70:	f840 2c04 	str.w	r2, [r0, #-4]
}
   30f74:	b007      	add	sp, #28
   30f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   30f7a:	f04f 0c00 	mov.w	ip, #0
   30f7e:	46e6      	mov	lr, ip
   30f80:	9e01      	ldr	r6, [sp, #4]
   30f82:	eb06 0985 	add.w	r9, r6, r5, lsl #2
	uECC_dword_t p = (uECC_dword_t)a * b;
   30f86:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   30f88:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   30f8c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   30f90:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   30f94:	fba7 ab06 	umull	sl, fp, r7, r6
   30f98:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   30f9c:	eb1a 0601 	adds.w	r6, sl, r1
   30fa0:	eb5b 0702 	adcs.w	r7, fp, r2
   30fa4:	bf2c      	ite	cs
   30fa6:	2201      	movcs	r2, #1
   30fa8:	2200      	movcc	r2, #0
	*r2 += (r01 < p);
   30faa:	f10c 0c01 	add.w	ip, ip, #1
		for (i = 0; i <= k; ++i) {
   30fae:	fa4f fa8c 	sxtb.w	sl, ip
   30fb2:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   30fb4:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   30fb6:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   30fb8:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   30fba:	dde4      	ble.n	30f86 <uECC_vli_mult+0x52>
		result[k] = r0;
   30fbc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   30fc0:	463a      	mov	r2, r7
	*r2 += (r01 < p);
   30fc2:	4674      	mov	r4, lr
   30fc4:	3501      	adds	r5, #1
   30fc6:	e7bd      	b.n	30f44 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   30fc8:	9900      	ldr	r1, [sp, #0]
   30fca:	3501      	adds	r5, #1
   30fcc:	fa4f fc85 	sxtb.w	ip, r5
   30fd0:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   30fd4:	4621      	mov	r1, r4
   30fd6:	2400      	movs	r4, #0
   30fd8:	9e01      	ldr	r6, [sp, #4]
   30fda:	ebae 0b0c 	sub.w	fp, lr, ip
   30fde:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   30fe2:	459c      	cmp	ip, r3
   30fe4:	db05      	blt.n	30ff2 <uECC_vli_mult+0xbe>
		result[k] = r0;
   30fe6:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   30fea:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   30fee:	460a      	mov	r2, r1
   30ff0:	e7b3      	b.n	30f5a <uECC_vli_mult+0x26>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   30ff2:	f855 7b04 	ldr.w	r7, [r5], #4
   30ff6:	f85b 6904 	ldr.w	r6, [fp], #-4
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   30ffa:	e9cd 2104 	strd	r2, r1, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   30ffe:	fba7 6706 	umull	r6, r7, r7, r6
   31002:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   31006:	eb16 0801 	adds.w	r8, r6, r1
   3100a:	eb57 0902 	adcs.w	r9, r7, r2
   3100e:	bf2c      	ite	cs
   31010:	2201      	movcs	r2, #1
   31012:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   31014:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   31018:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   3101a:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   3101c:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   3101e:	fa4f fc8c 	sxtb.w	ip, ip
   31022:	e7de      	b.n	30fe2 <uECC_vli_mult+0xae>

00031024 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   31024:	2300      	movs	r3, #0
{
   31026:	b510      	push	{r4, lr}
		 vli[i] = 0;
   31028:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   3102a:	b25a      	sxtb	r2, r3
   3102c:	4291      	cmp	r1, r2
   3102e:	dc00      	bgt.n	31032 <uECC_vli_clear+0xe>
}
   31030:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   31032:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   31036:	3301      	adds	r3, #1
   31038:	e7f7      	b.n	3102a <uECC_vli_clear+0x6>

0003103a <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   3103a:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   3103c:	461a      	mov	r2, r3
{
   3103e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   31040:	b25c      	sxtb	r4, r3
   31042:	42a1      	cmp	r1, r4
   31044:	dc03      	bgt.n	3104e <uECC_vli_isZero+0x14>
}
   31046:	fab2 f082 	clz	r0, r2
   3104a:	0940      	lsrs	r0, r0, #5
   3104c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   3104e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   31052:	3301      	adds	r3, #1
   31054:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   31056:	e7f3      	b.n	31040 <uECC_vli_isZero+0x6>

00031058 <uECC_vli_testBit>:
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   31058:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   3105a:	114a      	asrs	r2, r1, #5
   3105c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   31060:	f001 011f 	and.w	r1, r1, #31
   31064:	fa03 f101 	lsl.w	r1, r3, r1
}
   31068:	4008      	ands	r0, r1
   3106a:	4770      	bx	lr

0003106c <uECC_vli_numBits>:
{
   3106c:	4602      	mov	r2, r0
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   3106e:	3901      	subs	r1, #1
   31070:	b24b      	sxtb	r3, r1
   31072:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   31076:	2b00      	cmp	r3, #0
   31078:	da03      	bge.n	31082 <uECC_vli_numBits+0x16>
	return (i + 1);
   3107a:	3301      	adds	r3, #1
   3107c:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   3107e:	b938      	cbnz	r0, 31090 <uECC_vli_numBits+0x24>
   31080:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   31082:	f851 0904 	ldr.w	r0, [r1], #-4
   31086:	2800      	cmp	r0, #0
   31088:	d1f7      	bne.n	3107a <uECC_vli_numBits+0xe>
   3108a:	3b01      	subs	r3, #1
   3108c:	b25b      	sxtb	r3, r3
   3108e:	e7f2      	b.n	31076 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   31090:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   31094:	3b01      	subs	r3, #1
   31096:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   3109a:	2300      	movs	r3, #0
   3109c:	b922      	cbnz	r2, 310a8 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   3109e:	3801      	subs	r0, #1
   310a0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   310a4:	b200      	sxth	r0, r0
}
   310a6:	4770      	bx	lr
		digit >>= 1;
   310a8:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   310aa:	3301      	adds	r3, #1
   310ac:	e7f6      	b.n	3109c <uECC_vli_numBits+0x30>

000310ae <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   310ae:	2300      	movs	r3, #0
{
   310b0:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   310b2:	b25c      	sxtb	r4, r3
   310b4:	42a2      	cmp	r2, r4
   310b6:	dc00      	bgt.n	310ba <uECC_vli_set+0xc>
}
   310b8:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   310ba:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   310be:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   310c2:	3301      	adds	r3, #1
   310c4:	e7f5      	b.n	310b2 <uECC_vli_set+0x4>

000310c6 <uECC_vli_cmp_unsafe>:
{
   310c6:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   310c8:	3a01      	subs	r2, #1
   310ca:	b253      	sxtb	r3, r2
   310cc:	009a      	lsls	r2, r3, #2
   310ce:	2b00      	cmp	r3, #0
   310d0:	da01      	bge.n	310d6 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   310d2:	2000      	movs	r0, #0
}
   310d4:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   310d6:	5885      	ldr	r5, [r0, r2]
   310d8:	588c      	ldr	r4, [r1, r2]
   310da:	42a5      	cmp	r5, r4
   310dc:	d805      	bhi.n	310ea <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   310de:	f1a2 0204 	sub.w	r2, r2, #4
   310e2:	d304      	bcc.n	310ee <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   310e4:	3b01      	subs	r3, #1
   310e6:	b25b      	sxtb	r3, r3
   310e8:	e7f1      	b.n	310ce <uECC_vli_cmp_unsafe+0x8>
			return 1;
   310ea:	2001      	movs	r0, #1
   310ec:	e7f2      	b.n	310d4 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   310ee:	f04f 30ff 	mov.w	r0, #4294967295
   310f2:	e7ef      	b.n	310d4 <uECC_vli_cmp_unsafe+0xe>

000310f4 <uECC_vli_sub>:
{
   310f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   310f6:	2400      	movs	r4, #0
{
   310f8:	4606      	mov	r6, r0
   310fa:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   310fc:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   310fe:	b265      	sxtb	r5, r4
   31100:	45ac      	cmp	ip, r5
   31102:	dc00      	bgt.n	31106 <uECC_vli_sub+0x12>
}
   31104:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   31106:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   3110a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   3110e:	1a3d      	subs	r5, r7, r0
   31110:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   31112:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   31114:	bf34      	ite	cc
   31116:	2701      	movcc	r7, #1
   31118:	2700      	movcs	r7, #0
		result[i] = diff;
   3111a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   3111e:	bf18      	it	ne
   31120:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   31122:	3401      	adds	r4, #1
   31124:	e7eb      	b.n	310fe <uECC_vli_sub+0xa>

00031126 <uECC_vli_cmp>:
{
   31126:	b530      	push	{r4, r5, lr}
   31128:	b089      	sub	sp, #36	; 0x24
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   3112a:	4613      	mov	r3, r2
{
   3112c:	4615      	mov	r5, r2
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   3112e:	460a      	mov	r2, r1
   31130:	4601      	mov	r1, r0
   31132:	4668      	mov	r0, sp
   31134:	f7ff ffde 	bl	310f4 <uECC_vli_sub>
   31138:	4604      	mov	r4, r0
	uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
   3113a:	4629      	mov	r1, r5
   3113c:	4668      	mov	r0, sp
   3113e:	f7ff ff7c 	bl	3103a <uECC_vli_isZero>
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   31142:	3c00      	subs	r4, #0
   31144:	bf18      	it	ne
   31146:	2401      	movne	r4, #1
	return (!equal - 2 * neg);
   31148:	0064      	lsls	r4, r4, #1
}
   3114a:	2800      	cmp	r0, #0
   3114c:	bf14      	ite	ne
   3114e:	4260      	negne	r0, r4
   31150:	f1c4 0001 	rsbeq	r0, r4, #1
   31154:	b009      	add	sp, #36	; 0x24
   31156:	bd30      	pop	{r4, r5, pc}

00031158 <uECC_vli_modAdd>:
{
   31158:	b570      	push	{r4, r5, r6, lr}
   3115a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   3115e:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   31160:	4633      	mov	r3, r6
{
   31162:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   31164:	f7ff fea5 	bl	30eb2 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   31168:	b930      	cbnz	r0, 31178 <uECC_vli_modAdd+0x20>
   3116a:	4632      	mov	r2, r6
   3116c:	4621      	mov	r1, r4
   3116e:	4628      	mov	r0, r5
   31170:	f7ff ffa9 	bl	310c6 <uECC_vli_cmp_unsafe>
   31174:	2801      	cmp	r0, #1
   31176:	d007      	beq.n	31188 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   31178:	4633      	mov	r3, r6
   3117a:	462a      	mov	r2, r5
   3117c:	4621      	mov	r1, r4
   3117e:	4620      	mov	r0, r4
}
   31180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   31184:	f7ff bfb6 	b.w	310f4 <uECC_vli_sub>
}
   31188:	bd70      	pop	{r4, r5, r6, pc}

0003118a <uECC_vli_modSub>:
{
   3118a:	b570      	push	{r4, r5, r6, lr}
   3118c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   31190:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   31192:	4633      	mov	r3, r6
{
   31194:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   31196:	f7ff ffad 	bl	310f4 <uECC_vli_sub>
	if (l_borrow) {
   3119a:	b138      	cbz	r0, 311ac <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   3119c:	4633      	mov	r3, r6
   3119e:	462a      	mov	r2, r5
   311a0:	4621      	mov	r1, r4
   311a2:	4620      	mov	r0, r4
}
   311a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   311a8:	f7ff be83 	b.w	30eb2 <uECC_vli_add>
}
   311ac:	bd70      	pop	{r4, r5, r6, pc}

000311ae <uECC_vli_mmod>:
{
   311ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   311b2:	461d      	mov	r5, r3
   311b4:	b0a5      	sub	sp, #148	; 0x94
	uECC_word_t *v[2] = {tmp, product};
   311b6:	ab14      	add	r3, sp, #80	; 0x50
   311b8:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   311bc:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   311be:	4629      	mov	r1, r5
   311c0:	4610      	mov	r0, r2
{
   311c2:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   311c4:	f7ff ff52 	bl	3106c <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   311c8:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   311cc:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   311ce:	4621      	mov	r1, r4
   311d0:	2c00      	cmp	r4, #0
   311d2:	bfb8      	it	lt
   311d4:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   311d8:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   311da:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   311de:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   311e2:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   311e4:	f004 071f 	and.w	r7, r4, #31
   311e8:	bf58      	it	pl
   311ea:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   311ec:	f7ff ff1a 	bl	31024 <uECC_vli_clear>
	if (bit_shift > 0) {
   311f0:	2f00      	cmp	r7, #0
   311f2:	b208      	sxth	r0, r1
   311f4:	dd2b      	ble.n	3124e <uECC_vli_mmod+0xa0>
	uECC_word_t carry = 0;
   311f6:	2200      	movs	r2, #0
   311f8:	ab04      	add	r3, sp, #16
   311fa:	eb03 0180 	add.w	r1, r3, r0, lsl #2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   311fe:	4613      	mov	r3, r2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   31200:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   31204:	429d      	cmp	r5, r3
   31206:	d817      	bhi.n	31238 <uECC_vli_mmod+0x8a>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   31208:	2601      	movs	r6, #1
		for (i = 0; i < num_words * 2; ++i) {
   3120a:	006b      	lsls	r3, r5, #1
   3120c:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   3120e:	ab04      	add	r3, sp, #16
   31210:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   31214:	1e6f      	subs	r7, r5, #1
   31216:	ab24      	add	r3, sp, #144	; 0x90
   31218:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   3121c:	2c00      	cmp	r4, #0
   3121e:	da54      	bge.n	312ca <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   31220:	ab24      	add	r3, sp, #144	; 0x90
   31222:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   31226:	462a      	mov	r2, r5
   31228:	4640      	mov	r0, r8
   3122a:	f856 1c88 	ldr.w	r1, [r6, #-136]
   3122e:	f7ff ff3e 	bl	310ae <uECC_vli_set>
}
   31232:	b025      	add	sp, #148	; 0x94
   31234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   31238:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   3123c:	3301      	adds	r3, #1
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   3123e:	fa0c f007 	lsl.w	r0, ip, r7
   31242:	4302      	orrs	r2, r0
   31244:	f841 2b04 	str.w	r2, [r1], #4
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   31248:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   3124c:	e7da      	b.n	31204 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   3124e:	ab04      	add	r3, sp, #16
   31250:	462a      	mov	r2, r5
   31252:	4631      	mov	r1, r6
   31254:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   31258:	f7ff ff29 	bl	310ae <uECC_vli_set>
   3125c:	e7d4      	b.n	31208 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   3125e:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   31262:	fa0f fe82 	sxth.w	lr, r2
   31266:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   3126a:	ab24      	add	r3, sp, #144	; 0x90
   3126c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   31270:	f852 3c80 	ldr.w	r3, [r2, #-128]
   31274:	3001      	adds	r0, #1
   31276:	440b      	add	r3, r1
   31278:	ebbb 0303 	subs.w	r3, fp, r3
   3127c:	bf34      	ite	cc
   3127e:	2201      	movcc	r2, #1
   31280:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   31282:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   31284:	bf18      	it	ne
   31286:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   31288:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   3128c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   31290:	9b01      	ldr	r3, [sp, #4]
   31292:	b242      	sxtb	r2, r0
   31294:	429a      	cmp	r2, r3
   31296:	dbe2      	blt.n	3125e <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   31298:	1a73      	subs	r3, r6, r1
   3129a:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   3129c:	4629      	mov	r1, r5
   3129e:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   312a0:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   312a2:	f7ff fe1e 	bl	30ee2 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   312a6:	ab24      	add	r3, sp, #144	; 0x90
   312a8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   312ac:	f853 2c80 	ldr.w	r2, [r3, #-128]
   312b0:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   312b4:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   312b6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   312ba:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   312bc:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   312be:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   312c2:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   312c4:	f7ff fe0d 	bl	30ee2 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   312c8:	e7a8      	b.n	3121c <uECC_vli_mmod+0x6e>
   312ca:	2000      	movs	r0, #0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   312cc:	ab24      	add	r3, sp, #144	; 0x90
			v[1 - index][i] = diff;
   312ce:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   312d2:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   312d4:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   312d8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   312dc:	e7d8      	b.n	31290 <uECC_vli_mmod+0xe2>

000312de <uECC_vli_modMult>:
{
   312de:	b530      	push	{r4, r5, lr}
   312e0:	4604      	mov	r4, r0
   312e2:	461d      	mov	r5, r3
   312e4:	b091      	sub	sp, #68	; 0x44
	uECC_vli_mult(product, left, right, num_words);
   312e6:	4668      	mov	r0, sp
{
   312e8:	f99d 3050 	ldrsb.w	r3, [sp, #80]	; 0x50
	uECC_vli_mult(product, left, right, num_words);
   312ec:	f7ff fe22 	bl	30f34 <uECC_vli_mult>
	uECC_vli_mmod(result, product, mod, num_words);
   312f0:	462a      	mov	r2, r5
   312f2:	4669      	mov	r1, sp
   312f4:	4620      	mov	r0, r4
   312f6:	f7ff ff5a 	bl	311ae <uECC_vli_mmod>
}
   312fa:	b011      	add	sp, #68	; 0x44
   312fc:	bd30      	pop	{r4, r5, pc}

000312fe <uECC_vli_modMult_fast>:
{
   312fe:	b530      	push	{r4, r5, lr}
   31300:	4605      	mov	r5, r0
   31302:	461c      	mov	r4, r3
   31304:	b091      	sub	sp, #68	; 0x44
	uECC_vli_mult(product, left, right, curve->num_words);
   31306:	4668      	mov	r0, sp
   31308:	f993 3000 	ldrsb.w	r3, [r3]
   3130c:	f7ff fe12 	bl	30f34 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   31310:	4669      	mov	r1, sp
   31312:	4628      	mov	r0, r5
   31314:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   31318:	4798      	blx	r3
}
   3131a:	b011      	add	sp, #68	; 0x44
   3131c:	bd30      	pop	{r4, r5, pc}

0003131e <uECC_vli_modSquare_fast>:
{
   3131e:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   31320:	460a      	mov	r2, r1
   31322:	f7ff bfec 	b.w	312fe <uECC_vli_modMult_fast>

00031326 <double_jacobian_default>:
{
   31326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   3132a:	f993 6000 	ldrsb.w	r6, [r3]
{
   3132e:	4604      	mov	r4, r0
   31330:	4689      	mov	r9, r1
   31332:	b092      	sub	sp, #72	; 0x48
	if (uECC_vli_isZero(Z1, num_words)) {
   31334:	4631      	mov	r1, r6
   31336:	4610      	mov	r0, r2
{
   31338:	4615      	mov	r5, r2
   3133a:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   3133c:	f7ff fe7d 	bl	3103a <uECC_vli_isZero>
   31340:	2800      	cmp	r0, #0
   31342:	f040 8091 	bne.w	31468 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   31346:	463a      	mov	r2, r7
   31348:	4649      	mov	r1, r9
   3134a:	a802      	add	r0, sp, #8
   3134c:	f7ff ffe7 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   31350:	463b      	mov	r3, r7
   31352:	4621      	mov	r1, r4
   31354:	aa02      	add	r2, sp, #8
   31356:	a80a      	add	r0, sp, #40	; 0x28
   31358:	f7ff ffd1 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   3135c:	a902      	add	r1, sp, #8
   3135e:	4608      	mov	r0, r1
   31360:	463a      	mov	r2, r7
   31362:	f7ff ffdc 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   31366:	463b      	mov	r3, r7
   31368:	462a      	mov	r2, r5
   3136a:	4649      	mov	r1, r9
   3136c:	4648      	mov	r0, r9
   3136e:	f7ff ffc6 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   31372:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   31376:	463a      	mov	r2, r7
   31378:	4629      	mov	r1, r5
   3137a:	4628      	mov	r0, r5
   3137c:	f7ff ffcf 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   31380:	4643      	mov	r3, r8
   31382:	462a      	mov	r2, r5
   31384:	4621      	mov	r1, r4
   31386:	4620      	mov	r0, r4
   31388:	9600      	str	r6, [sp, #0]
   3138a:	f7ff fee5 	bl	31158 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   3138e:	4643      	mov	r3, r8
   31390:	462a      	mov	r2, r5
   31392:	4629      	mov	r1, r5
   31394:	4628      	mov	r0, r5
   31396:	9600      	str	r6, [sp, #0]
   31398:	f7ff fede 	bl	31158 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   3139c:	4643      	mov	r3, r8
   3139e:	462a      	mov	r2, r5
   313a0:	4621      	mov	r1, r4
   313a2:	4628      	mov	r0, r5
   313a4:	9600      	str	r6, [sp, #0]
   313a6:	f7ff fef0 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   313aa:	463b      	mov	r3, r7
   313ac:	462a      	mov	r2, r5
   313ae:	4621      	mov	r1, r4
   313b0:	4620      	mov	r0, r4
   313b2:	f7ff ffa4 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   313b6:	4643      	mov	r3, r8
   313b8:	4622      	mov	r2, r4
   313ba:	4621      	mov	r1, r4
   313bc:	4628      	mov	r0, r5
   313be:	9600      	str	r6, [sp, #0]
   313c0:	f7ff feca 	bl	31158 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   313c4:	4643      	mov	r3, r8
   313c6:	462a      	mov	r2, r5
   313c8:	4621      	mov	r1, r4
   313ca:	4620      	mov	r0, r4
   313cc:	9600      	str	r6, [sp, #0]
   313ce:	f7ff fec3 	bl	31158 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   313d2:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   313d4:	07db      	lsls	r3, r3, #31
   313d6:	d54a      	bpl.n	3146e <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   313d8:	4633      	mov	r3, r6
   313da:	4642      	mov	r2, r8
   313dc:	4621      	mov	r1, r4
   313de:	4620      	mov	r0, r4
   313e0:	f7ff fd67 	bl	30eb2 <uECC_vli_add>
   313e4:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   313e6:	4631      	mov	r1, r6
   313e8:	4620      	mov	r0, r4
   313ea:	f7ff fd7a 	bl	30ee2 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   313ee:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   313f2:	3b01      	subs	r3, #1
   313f4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   313f8:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   313fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   31400:	463a      	mov	r2, r7
   31402:	4621      	mov	r1, r4
   31404:	4628      	mov	r0, r5
   31406:	f7ff ff8a 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   3140a:	4643      	mov	r3, r8
   3140c:	4629      	mov	r1, r5
   3140e:	4628      	mov	r0, r5
   31410:	aa0a      	add	r2, sp, #40	; 0x28
   31412:	9600      	str	r6, [sp, #0]
   31414:	f7ff feb9 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   31418:	4643      	mov	r3, r8
   3141a:	4629      	mov	r1, r5
   3141c:	4628      	mov	r0, r5
   3141e:	aa0a      	add	r2, sp, #40	; 0x28
   31420:	9600      	str	r6, [sp, #0]
   31422:	f7ff feb2 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   31426:	a90a      	add	r1, sp, #40	; 0x28
   31428:	4608      	mov	r0, r1
   3142a:	4643      	mov	r3, r8
   3142c:	462a      	mov	r2, r5
   3142e:	9600      	str	r6, [sp, #0]
   31430:	f7ff feab 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   31434:	463b      	mov	r3, r7
   31436:	4621      	mov	r1, r4
   31438:	4620      	mov	r0, r4
   3143a:	aa0a      	add	r2, sp, #40	; 0x28
   3143c:	f7ff ff5f 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   31440:	aa02      	add	r2, sp, #8
   31442:	4643      	mov	r3, r8
   31444:	4610      	mov	r0, r2
   31446:	4621      	mov	r1, r4
   31448:	9600      	str	r6, [sp, #0]
   3144a:	f7ff fe9e 	bl	3118a <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   3144e:	4632      	mov	r2, r6
   31450:	4629      	mov	r1, r5
   31452:	4620      	mov	r0, r4
   31454:	f7ff fe2b 	bl	310ae <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   31458:	4649      	mov	r1, r9
   3145a:	4628      	mov	r0, r5
   3145c:	f7ff fe27 	bl	310ae <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   31460:	4648      	mov	r0, r9
   31462:	a902      	add	r1, sp, #8
   31464:	f7ff fe23 	bl	310ae <uECC_vli_set>
}
   31468:	b012      	add	sp, #72	; 0x48
   3146a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   3146e:	4631      	mov	r1, r6
   31470:	4620      	mov	r0, r4
   31472:	f7ff fd36 	bl	30ee2 <uECC_vli_rshift1>
   31476:	e7c3      	b.n	31400 <double_jacobian_default+0xda>

00031478 <x_side_default>:
{
   31478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3147c:	4615      	mov	r5, r2
   3147e:	b08a      	sub	sp, #40	; 0x28
   31480:	4604      	mov	r4, r0
   31482:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   31484:	221c      	movs	r2, #28
   31486:	2100      	movs	r1, #0
   31488:	a803      	add	r0, sp, #12
   3148a:	f006 f99a 	bl	377c2 <memset>
   3148e:	2303      	movs	r3, #3
	wordcount_t num_words = curve->num_words;
   31490:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   31494:	462a      	mov	r2, r5
   31496:	4631      	mov	r1, r6
   31498:	4620      	mov	r0, r4
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   3149a:	1d2f      	adds	r7, r5, #4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   3149c:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   3149e:	f7ff ff3e 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   314a2:	463b      	mov	r3, r7
   314a4:	4621      	mov	r1, r4
   314a6:	4620      	mov	r0, r4
   314a8:	aa02      	add	r2, sp, #8
   314aa:	f8cd 8000 	str.w	r8, [sp]
   314ae:	f7ff fe6c 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   314b2:	462b      	mov	r3, r5
   314b4:	4632      	mov	r2, r6
   314b6:	4621      	mov	r1, r4
   314b8:	4620      	mov	r0, r4
   314ba:	f7ff ff20 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   314be:	463b      	mov	r3, r7
   314c0:	4621      	mov	r1, r4
   314c2:	4620      	mov	r0, r4
   314c4:	f8cd 8000 	str.w	r8, [sp]
   314c8:	f105 0284 	add.w	r2, r5, #132	; 0x84
   314cc:	f7ff fe44 	bl	31158 <uECC_vli_modAdd>
}
   314d0:	b00a      	add	sp, #40	; 0x28
   314d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000314d6 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   314d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   314da:	b09a      	sub	sp, #104	; 0x68
   314dc:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
   314e0:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   314e2:	4644      	mov	r4, r8
{
   314e4:	4607      	mov	r7, r0
   314e6:	4699      	mov	r9, r3
   314e8:	468a      	mov	sl, r1
	wordcount_t num_words = curve->num_words;
   314ea:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   314ee:	4602      	mov	r2, r0
   314f0:	4623      	mov	r3, r4
   314f2:	4631      	mov	r1, r6
   314f4:	a802      	add	r0, sp, #8
   314f6:	9500      	str	r5, [sp, #0]
   314f8:	f7ff fe47 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   314fc:	a902      	add	r1, sp, #8
   314fe:	4642      	mov	r2, r8
   31500:	4608      	mov	r0, r1
   31502:	f7ff ff0c 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   31506:	4643      	mov	r3, r8
   31508:	4639      	mov	r1, r7
   3150a:	4638      	mov	r0, r7
   3150c:	aa02      	add	r2, sp, #8
   3150e:	f7ff fef6 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   31512:	4643      	mov	r3, r8
   31514:	4631      	mov	r1, r6
   31516:	4630      	mov	r0, r6
   31518:	aa02      	add	r2, sp, #8
   3151a:	f7ff fef0 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   3151e:	4623      	mov	r3, r4
   31520:	4652      	mov	r2, sl
   31522:	4649      	mov	r1, r9
   31524:	a802      	add	r0, sp, #8
   31526:	9500      	str	r5, [sp, #0]
   31528:	f7ff fe16 	bl	31158 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   3152c:	4623      	mov	r3, r4
   3152e:	4652      	mov	r2, sl
   31530:	4649      	mov	r1, r9
   31532:	4648      	mov	r0, r9
   31534:	9500      	str	r5, [sp, #0]
   31536:	f7ff fe28 	bl	3118a <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   3153a:	4623      	mov	r3, r4
   3153c:	463a      	mov	r2, r7
   3153e:	4631      	mov	r1, r6
   31540:	a80a      	add	r0, sp, #40	; 0x28
   31542:	9500      	str	r5, [sp, #0]
   31544:	f7ff fe21 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   31548:	4643      	mov	r3, r8
   3154a:	4651      	mov	r1, sl
   3154c:	4650      	mov	r0, sl
   3154e:	aa0a      	add	r2, sp, #40	; 0x28
   31550:	f7ff fed5 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   31554:	4623      	mov	r3, r4
   31556:	4632      	mov	r2, r6
   31558:	4639      	mov	r1, r7
   3155a:	a80a      	add	r0, sp, #40	; 0x28
   3155c:	9500      	str	r5, [sp, #0]
   3155e:	f7ff fdfb 	bl	31158 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   31562:	4642      	mov	r2, r8
   31564:	4649      	mov	r1, r9
   31566:	4630      	mov	r0, r6
   31568:	f7ff fed9 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   3156c:	4623      	mov	r3, r4
   3156e:	4631      	mov	r1, r6
   31570:	4630      	mov	r0, r6
   31572:	aa0a      	add	r2, sp, #40	; 0x28
   31574:	9500      	str	r5, [sp, #0]
   31576:	f7ff fe08 	bl	3118a <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   3157a:	4623      	mov	r3, r4
   3157c:	4632      	mov	r2, r6
   3157e:	4639      	mov	r1, r7
   31580:	a812      	add	r0, sp, #72	; 0x48
   31582:	9500      	str	r5, [sp, #0]
   31584:	f7ff fe01 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   31588:	4643      	mov	r3, r8
   3158a:	4649      	mov	r1, r9
   3158c:	4648      	mov	r0, r9
   3158e:	aa12      	add	r2, sp, #72	; 0x48
   31590:	f7ff feb5 	bl	312fe <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   31594:	4623      	mov	r3, r4
   31596:	4652      	mov	r2, sl
   31598:	4649      	mov	r1, r9
   3159a:	4648      	mov	r0, r9
   3159c:	9500      	str	r5, [sp, #0]
   3159e:	f7ff fdf4 	bl	3118a <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   315a2:	4642      	mov	r2, r8
   315a4:	a902      	add	r1, sp, #8
   315a6:	a812      	add	r0, sp, #72	; 0x48
   315a8:	f7ff feb9 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   315ac:	a912      	add	r1, sp, #72	; 0x48
   315ae:	4623      	mov	r3, r4
   315b0:	4608      	mov	r0, r1
   315b2:	aa0a      	add	r2, sp, #40	; 0x28
   315b4:	9500      	str	r5, [sp, #0]
   315b6:	f7ff fde8 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   315ba:	4623      	mov	r3, r4
   315bc:	463a      	mov	r2, r7
   315be:	a912      	add	r1, sp, #72	; 0x48
   315c0:	a80a      	add	r0, sp, #40	; 0x28
   315c2:	9500      	str	r5, [sp, #0]
   315c4:	f7ff fde1 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   315c8:	a90a      	add	r1, sp, #40	; 0x28
   315ca:	4643      	mov	r3, r8
   315cc:	4608      	mov	r0, r1
   315ce:	aa02      	add	r2, sp, #8
   315d0:	f7ff fe95 	bl	312fe <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   315d4:	4623      	mov	r3, r4
   315d6:	4652      	mov	r2, sl
   315d8:	4650      	mov	r0, sl
   315da:	a90a      	add	r1, sp, #40	; 0x28
   315dc:	9500      	str	r5, [sp, #0]
   315de:	f7ff fdd4 	bl	3118a <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   315e2:	462a      	mov	r2, r5
   315e4:	4638      	mov	r0, r7
   315e6:	a912      	add	r1, sp, #72	; 0x48
   315e8:	f7ff fd61 	bl	310ae <uECC_vli_set>
}
   315ec:	b01a      	add	sp, #104	; 0x68
   315ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000315f2 <uECC_vli_modInv>:
{
   315f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   315f4:	460f      	mov	r7, r1
   315f6:	4606      	mov	r6, r0
   315f8:	b0a1      	sub	sp, #132	; 0x84
	if (uECC_vli_isZero(input, num_words)) {
   315fa:	4619      	mov	r1, r3
   315fc:	4638      	mov	r0, r7
{
   315fe:	4615      	mov	r5, r2
   31600:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   31602:	f7ff fd1a 	bl	3103a <uECC_vli_isZero>
   31606:	b120      	cbz	r0, 31612 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   31608:	4630      	mov	r0, r6
   3160a:	f7ff fd0b 	bl	31024 <uECC_vli_clear>
}
   3160e:	b021      	add	sp, #132	; 0x84
   31610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   31612:	4622      	mov	r2, r4
   31614:	4639      	mov	r1, r7
   31616:	4668      	mov	r0, sp
   31618:	f7ff fd49 	bl	310ae <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   3161c:	4629      	mov	r1, r5
   3161e:	a808      	add	r0, sp, #32
   31620:	f7ff fd45 	bl	310ae <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   31624:	a810      	add	r0, sp, #64	; 0x40
   31626:	4621      	mov	r1, r4
   31628:	f7ff fcfc 	bl	31024 <uECC_vli_clear>
	u[0] = 1;
   3162c:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   3162e:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   31630:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   31632:	f7ff fcf7 	bl	31024 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   31636:	4622      	mov	r2, r4
   31638:	4668      	mov	r0, sp
   3163a:	a908      	add	r1, sp, #32
   3163c:	f7ff fd43 	bl	310c6 <uECC_vli_cmp_unsafe>
   31640:	b928      	cbnz	r0, 3164e <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   31642:	4622      	mov	r2, r4
   31644:	4630      	mov	r0, r6
   31646:	a910      	add	r1, sp, #64	; 0x40
   31648:	f7ff fd31 	bl	310ae <uECC_vli_set>
   3164c:	e7df      	b.n	3160e <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   3164e:	9b00      	ldr	r3, [sp, #0]
   31650:	07da      	lsls	r2, r3, #31
   31652:	d409      	bmi.n	31668 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   31654:	4621      	mov	r1, r4
   31656:	4668      	mov	r0, sp
   31658:	f7ff fc43 	bl	30ee2 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   3165c:	4622      	mov	r2, r4
   3165e:	4629      	mov	r1, r5
   31660:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   31662:	f7ff fc4b 	bl	30efc <vli_modInv_update>
   31666:	e7e6      	b.n	31636 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   31668:	9b08      	ldr	r3, [sp, #32]
   3166a:	07db      	lsls	r3, r3, #31
   3166c:	d407      	bmi.n	3167e <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   3166e:	4621      	mov	r1, r4
   31670:	a808      	add	r0, sp, #32
   31672:	f7ff fc36 	bl	30ee2 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   31676:	4622      	mov	r2, r4
   31678:	4629      	mov	r1, r5
   3167a:	a818      	add	r0, sp, #96	; 0x60
   3167c:	e7f1      	b.n	31662 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   3167e:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   31680:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   31682:	dd1c      	ble.n	316be <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   31684:	aa08      	add	r2, sp, #32
   31686:	4669      	mov	r1, sp
   31688:	4668      	mov	r0, sp
   3168a:	f7ff fd33 	bl	310f4 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   3168e:	4621      	mov	r1, r4
   31690:	4668      	mov	r0, sp
   31692:	f7ff fc26 	bl	30ee2 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   31696:	4622      	mov	r2, r4
   31698:	a918      	add	r1, sp, #96	; 0x60
   3169a:	a810      	add	r0, sp, #64	; 0x40
   3169c:	f7ff fd13 	bl	310c6 <uECC_vli_cmp_unsafe>
   316a0:	2800      	cmp	r0, #0
   316a2:	da05      	bge.n	316b0 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   316a4:	a910      	add	r1, sp, #64	; 0x40
   316a6:	4623      	mov	r3, r4
   316a8:	462a      	mov	r2, r5
   316aa:	4608      	mov	r0, r1
   316ac:	f7ff fc01 	bl	30eb2 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   316b0:	a910      	add	r1, sp, #64	; 0x40
   316b2:	4623      	mov	r3, r4
   316b4:	4608      	mov	r0, r1
   316b6:	aa18      	add	r2, sp, #96	; 0x60
   316b8:	f7ff fd1c 	bl	310f4 <uECC_vli_sub>
   316bc:	e7ce      	b.n	3165c <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   316be:	a908      	add	r1, sp, #32
   316c0:	466a      	mov	r2, sp
   316c2:	4608      	mov	r0, r1
   316c4:	f7ff fd16 	bl	310f4 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   316c8:	4621      	mov	r1, r4
   316ca:	a808      	add	r0, sp, #32
   316cc:	f7ff fc09 	bl	30ee2 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   316d0:	4622      	mov	r2, r4
   316d2:	a910      	add	r1, sp, #64	; 0x40
   316d4:	a818      	add	r0, sp, #96	; 0x60
   316d6:	f7ff fcf6 	bl	310c6 <uECC_vli_cmp_unsafe>
   316da:	2800      	cmp	r0, #0
   316dc:	da05      	bge.n	316ea <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   316de:	a918      	add	r1, sp, #96	; 0x60
   316e0:	4623      	mov	r3, r4
   316e2:	462a      	mov	r2, r5
   316e4:	4608      	mov	r0, r1
   316e6:	f7ff fbe4 	bl	30eb2 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   316ea:	a918      	add	r1, sp, #96	; 0x60
   316ec:	4623      	mov	r3, r4
   316ee:	4608      	mov	r0, r1
   316f0:	aa10      	add	r2, sp, #64	; 0x40
   316f2:	f7ff fcff 	bl	310f4 <uECC_vli_sub>
   316f6:	e7be      	b.n	31676 <uECC_vli_modInv+0x84>

000316f8 <apply_z>:
{
   316f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   316fa:	4615      	mov	r5, r2
   316fc:	461c      	mov	r4, r3
   316fe:	4607      	mov	r7, r0
   31700:	460e      	mov	r6, r1
   31702:	b089      	sub	sp, #36	; 0x24
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   31704:	461a      	mov	r2, r3
   31706:	4629      	mov	r1, r5
   31708:	4668      	mov	r0, sp
   3170a:	f7ff fe08 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   3170e:	4623      	mov	r3, r4
   31710:	466a      	mov	r2, sp
   31712:	4639      	mov	r1, r7
   31714:	4638      	mov	r0, r7
   31716:	f7ff fdf2 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   3171a:	4623      	mov	r3, r4
   3171c:	462a      	mov	r2, r5
   3171e:	4669      	mov	r1, sp
   31720:	4668      	mov	r0, sp
   31722:	f7ff fdec 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   31726:	4623      	mov	r3, r4
   31728:	466a      	mov	r2, sp
   3172a:	4631      	mov	r1, r6
   3172c:	4630      	mov	r0, r6
   3172e:	f7ff fde6 	bl	312fe <uECC_vli_modMult_fast>
}
   31732:	b009      	add	sp, #36	; 0x24
   31734:	bdf0      	pop	{r4, r5, r6, r7, pc}

00031736 <XYcZ_add>:
{
   31736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3173a:	b08a      	sub	sp, #40	; 0x28
   3173c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   31740:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   31742:	4655      	mov	r5, sl
{
   31744:	4680      	mov	r8, r0
   31746:	461f      	mov	r7, r3
   31748:	4689      	mov	r9, r1
	wordcount_t num_words = curve->num_words;
   3174a:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   3174e:	4602      	mov	r2, r0
   31750:	462b      	mov	r3, r5
   31752:	4621      	mov	r1, r4
   31754:	a802      	add	r0, sp, #8
   31756:	9600      	str	r6, [sp, #0]
   31758:	f7ff fd17 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   3175c:	a902      	add	r1, sp, #8
   3175e:	4652      	mov	r2, sl
   31760:	4608      	mov	r0, r1
   31762:	f7ff fddc 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   31766:	4653      	mov	r3, sl
   31768:	4641      	mov	r1, r8
   3176a:	4640      	mov	r0, r8
   3176c:	aa02      	add	r2, sp, #8
   3176e:	f7ff fdc6 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   31772:	4653      	mov	r3, sl
   31774:	4621      	mov	r1, r4
   31776:	4620      	mov	r0, r4
   31778:	aa02      	add	r2, sp, #8
   3177a:	f7ff fdc0 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   3177e:	462b      	mov	r3, r5
   31780:	464a      	mov	r2, r9
   31782:	4639      	mov	r1, r7
   31784:	4638      	mov	r0, r7
   31786:	9600      	str	r6, [sp, #0]
   31788:	f7ff fcff 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   3178c:	4652      	mov	r2, sl
   3178e:	4639      	mov	r1, r7
   31790:	a802      	add	r0, sp, #8
   31792:	f7ff fdc4 	bl	3131e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   31796:	a902      	add	r1, sp, #8
   31798:	462b      	mov	r3, r5
   3179a:	4642      	mov	r2, r8
   3179c:	4608      	mov	r0, r1
   3179e:	9600      	str	r6, [sp, #0]
   317a0:	f7ff fcf3 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   317a4:	a902      	add	r1, sp, #8
   317a6:	462b      	mov	r3, r5
   317a8:	4622      	mov	r2, r4
   317aa:	4608      	mov	r0, r1
   317ac:	9600      	str	r6, [sp, #0]
   317ae:	f7ff fcec 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   317b2:	462b      	mov	r3, r5
   317b4:	4642      	mov	r2, r8
   317b6:	4621      	mov	r1, r4
   317b8:	4620      	mov	r0, r4
   317ba:	9600      	str	r6, [sp, #0]
   317bc:	f7ff fce5 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   317c0:	4653      	mov	r3, sl
   317c2:	4622      	mov	r2, r4
   317c4:	4649      	mov	r1, r9
   317c6:	4648      	mov	r0, r9
   317c8:	f7ff fd99 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   317cc:	462b      	mov	r3, r5
   317ce:	4641      	mov	r1, r8
   317d0:	4620      	mov	r0, r4
   317d2:	aa02      	add	r2, sp, #8
   317d4:	9600      	str	r6, [sp, #0]
   317d6:	f7ff fcd8 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   317da:	4653      	mov	r3, sl
   317dc:	4622      	mov	r2, r4
   317de:	4639      	mov	r1, r7
   317e0:	4638      	mov	r0, r7
   317e2:	f7ff fd8c 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   317e6:	462b      	mov	r3, r5
   317e8:	464a      	mov	r2, r9
   317ea:	4639      	mov	r1, r7
   317ec:	4638      	mov	r0, r7
   317ee:	9600      	str	r6, [sp, #0]
   317f0:	f7ff fccb 	bl	3118a <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   317f4:	4632      	mov	r2, r6
   317f6:	4620      	mov	r0, r4
   317f8:	a902      	add	r1, sp, #8
   317fa:	f7ff fc58 	bl	310ae <uECC_vli_set>
}
   317fe:	b00a      	add	sp, #40	; 0x28
   31800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00031804 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   31804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31808:	461e      	mov	r6, r3
   3180a:	b0b1      	sub	sp, #196	; 0xc4
   3180c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   3180e:	e9cd 0103 	strd	r0, r1, [sp, #12]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   31812:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   31816:	a818      	add	r0, sp, #96	; 0x60
{
   31818:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   3181a:	463a      	mov	r2, r7
   3181c:	f7ff fc47 	bl	310ae <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   31820:	00bb      	lsls	r3, r7, #2
   31822:	9305      	str	r3, [sp, #20]
   31824:	9b04      	ldr	r3, [sp, #16]
   31826:	a828      	add	r0, sp, #160	; 0xa0
   31828:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   3182c:	4619      	mov	r1, r3
   3182e:	9302      	str	r3, [sp, #8]
   31830:	f7ff fc3d 	bl	310ae <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   31834:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   31838:	2e00      	cmp	r6, #0
   3183a:	f000 8088 	beq.w	3194e <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   3183e:	462a      	mov	r2, r5
   31840:	4631      	mov	r1, r6
   31842:	a808      	add	r0, sp, #32
   31844:	f7ff fc33 	bl	310ae <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   31848:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   3184c:	462a      	mov	r2, r5
   3184e:	4640      	mov	r0, r8
   31850:	a918      	add	r1, sp, #96	; 0x60
	uECC_vli_set(Y2, Y1, num_words);
   31852:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   31856:	f7ff fc2a 	bl	310ae <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   3185a:	4648      	mov	r0, r9
   3185c:	a928      	add	r1, sp, #160	; 0xa0
   3185e:	f7ff fc26 	bl	310ae <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   31862:	4623      	mov	r3, r4
   31864:	aa08      	add	r2, sp, #32
   31866:	a928      	add	r1, sp, #160	; 0xa0
   31868:	a818      	add	r0, sp, #96	; 0x60
   3186a:	f7ff ff45 	bl	316f8 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   3186e:	4623      	mov	r3, r4
   31870:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   31874:	aa08      	add	r2, sp, #32
   31876:	a928      	add	r1, sp, #160	; 0xa0
   31878:	a818      	add	r0, sp, #96	; 0x60
   3187a:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   3187c:	4623      	mov	r3, r4
   3187e:	4649      	mov	r1, r9
   31880:	4640      	mov	r0, r8
   31882:	aa08      	add	r2, sp, #32
   31884:	f7ff ff38 	bl	316f8 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   31888:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   3188c:	3d02      	subs	r5, #2
   3188e:	b22d      	sxth	r5, r5
   31890:	2d00      	cmp	r5, #0
   31892:	dc63      	bgt.n	3195c <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   31894:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   31898:	ab10      	add	r3, sp, #64	; 0x40
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   3189a:	f005 0601 	and.w	r6, r5, #1
   3189e:	43ed      	mvns	r5, r5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   318a0:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   318a4:	ab20      	add	r3, sp, #128	; 0x80
   318a6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   318aa:	f005 0501 	and.w	r5, r5, #1
   318ae:	ab10      	add	r3, sp, #64	; 0x40
   318b0:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   318b4:	ab20      	add	r3, sp, #128	; 0x80
   318b6:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   318ba:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   318be:	462b      	mov	r3, r5
   318c0:	464a      	mov	r2, r9
   318c2:	4631      	mov	r1, r6
   318c4:	4640      	mov	r0, r8
   318c6:	9400      	str	r4, [sp, #0]
   318c8:	f7ff fe05 	bl	314d6 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   318cc:	4653      	mov	r3, sl
   318ce:	aa10      	add	r2, sp, #64	; 0x40
   318d0:	a918      	add	r1, sp, #96	; 0x60
   318d2:	a808      	add	r0, sp, #32
   318d4:	9700      	str	r7, [sp, #0]
   318d6:	f7ff fc58 	bl	3118a <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   318da:	a908      	add	r1, sp, #32
   318dc:	4623      	mov	r3, r4
   318de:	4632      	mov	r2, r6
   318e0:	4608      	mov	r0, r1
   318e2:	f7ff fd0c 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   318e6:	a908      	add	r1, sp, #32
   318e8:	4623      	mov	r3, r4
   318ea:	4608      	mov	r0, r1
   318ec:	9a04      	ldr	r2, [sp, #16]
   318ee:	f7ff fd06 	bl	312fe <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   318f2:	a908      	add	r1, sp, #32
   318f4:	463b      	mov	r3, r7
   318f6:	4652      	mov	r2, sl
   318f8:	4608      	mov	r0, r1
   318fa:	f7ff fe7a 	bl	315f2 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   318fe:	a908      	add	r1, sp, #32
   31900:	4623      	mov	r3, r4
   31902:	4608      	mov	r0, r1
   31904:	9a02      	ldr	r2, [sp, #8]
   31906:	f7ff fcfa 	bl	312fe <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   3190a:	a908      	add	r1, sp, #32
   3190c:	4623      	mov	r3, r4
   3190e:	4642      	mov	r2, r8
   31910:	4608      	mov	r0, r1
   31912:	f7ff fcf4 	bl	312fe <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   31916:	4633      	mov	r3, r6
   31918:	4642      	mov	r2, r8
   3191a:	4629      	mov	r1, r5
   3191c:	4648      	mov	r0, r9
   3191e:	9400      	str	r4, [sp, #0]
   31920:	f7ff ff09 	bl	31736 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   31924:	4623      	mov	r3, r4
   31926:	aa08      	add	r2, sp, #32
   31928:	a920      	add	r1, sp, #128	; 0x80
   3192a:	a810      	add	r0, sp, #64	; 0x40
   3192c:	f7ff fee4 	bl	316f8 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   31930:	463a      	mov	r2, r7
   31932:	9803      	ldr	r0, [sp, #12]
   31934:	a910      	add	r1, sp, #64	; 0x40
   31936:	f7ff fbba 	bl	310ae <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   3193a:	9b03      	ldr	r3, [sp, #12]
   3193c:	9c05      	ldr	r4, [sp, #20]
   3193e:	a920      	add	r1, sp, #128	; 0x80
   31940:	4423      	add	r3, r4
   31942:	4618      	mov	r0, r3
   31944:	f7ff fbb3 	bl	310ae <uECC_vli_set>
}
   31948:	b031      	add	sp, #196	; 0xc4
   3194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   3194e:	4629      	mov	r1, r5
   31950:	a808      	add	r0, sp, #32
   31952:	f7ff fb67 	bl	31024 <uECC_vli_clear>
		z[0] = 1;
   31956:	2301      	movs	r3, #1
   31958:	9308      	str	r3, [sp, #32]
   3195a:	e775      	b.n	31848 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   3195c:	4629      	mov	r1, r5
   3195e:	4650      	mov	r0, sl
   31960:	f7ff fb7a 	bl	31058 <uECC_vli_testBit>
   31964:	fab0 f680 	clz	r6, r0
   31968:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   3196a:	f1c6 0101 	rsb	r1, r6, #1
   3196e:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   31972:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   31976:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   3197a:	4633      	mov	r3, r6
   3197c:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   31980:	465a      	mov	r2, fp
   31982:	9400      	str	r4, [sp, #0]
   31984:	e9cd 0106 	strd	r0, r1, [sp, #24]
   31988:	f7ff fda5 	bl	314d6 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   3198c:	9907      	ldr	r1, [sp, #28]
   3198e:	9806      	ldr	r0, [sp, #24]
   31990:	460b      	mov	r3, r1
   31992:	4602      	mov	r2, r0
   31994:	4631      	mov	r1, r6
   31996:	4658      	mov	r0, fp
   31998:	9400      	str	r4, [sp, #0]
   3199a:	f7ff fecc 	bl	31736 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   3199e:	3d01      	subs	r5, #1
   319a0:	e775      	b.n	3188e <EccPoint_mult+0x8a>

000319a2 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   319a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   319a6:	461d      	mov	r5, r3
   319a8:	460e      	mov	r6, r1

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   319aa:	f9b3 9002 	ldrsh.w	r9, [r3, #2]

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   319ae:	3524      	adds	r5, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   319b0:	f119 081f 	adds.w	r8, r9, #31
   319b4:	bf48      	it	mi
   319b6:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
   319ba:	f348 1847 	sbfx	r8, r8, #5, #8
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   319be:	4601      	mov	r1, r0
{
   319c0:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   319c2:	4643      	mov	r3, r8
   319c4:	462a      	mov	r2, r5
   319c6:	4630      	mov	r0, r6
   319c8:	f7ff fa73 	bl	30eb2 <uECC_vli_add>
   319cc:	4604      	mov	r4, r0
   319ce:	b990      	cbnz	r0, 319f6 <regularize_k+0x54>
   319d0:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   319d4:	da06      	bge.n	319e4 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   319d6:	4649      	mov	r1, r9
   319d8:	4630      	mov	r0, r6
   319da:	f7ff fb3d 	bl	31058 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   319de:	1e04      	subs	r4, r0, #0
   319e0:	bf18      	it	ne
   319e2:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   319e4:	4643      	mov	r3, r8
   319e6:	462a      	mov	r2, r5
   319e8:	4631      	mov	r1, r6
   319ea:	4638      	mov	r0, r7
   319ec:	f7ff fa61 	bl	30eb2 <uECC_vli_add>

	return carry;
}
   319f0:	4620      	mov	r0, r4
   319f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   319f6:	2401      	movs	r4, #1
   319f8:	e7f4      	b.n	319e4 <regularize_k+0x42>

000319fa <uECC_vli_nativeToBytes>:
}

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   319fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   319fc:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   319fe:	1e4f      	subs	r7, r1, #1
   31a00:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   31a02:	428c      	cmp	r4, r1
   31a04:	f105 0501 	add.w	r5, r5, #1
   31a08:	db00      	blt.n	31a0c <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   31a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   31a0c:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   31a0e:	f023 0603 	bic.w	r6, r3, #3
   31a12:	5996      	ldr	r6, [r2, r6]
   31a14:	f003 0303 	and.w	r3, r3, #3
   31a18:	00db      	lsls	r3, r3, #3
   31a1a:	fa26 f303 	lsr.w	r3, r6, r3
   31a1e:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   31a20:	e7ee      	b.n	31a00 <uECC_vli_nativeToBytes+0x6>

00031a22 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   31a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31a24:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   31a26:	1cd1      	adds	r1, r2, #3
   31a28:	bf48      	it	mi
   31a2a:	1d91      	addmi	r1, r2, #6
{
   31a2c:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   31a2e:	f341 0187 	sbfx	r1, r1, #2, #8
   31a32:	f7ff faf7 	bl	31024 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   31a36:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   31a38:	1e67      	subs	r7, r4, #1
   31a3a:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   31a3c:	42a2      	cmp	r2, r4
   31a3e:	f105 0501 	add.w	r5, r5, #1
   31a42:	db00      	blt.n	31a46 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   31a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   31a46:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   31a48:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   31a4c:	5cb2      	ldrb	r2, [r6, r2]
   31a4e:	f003 0303 	and.w	r3, r3, #3
   31a52:	00db      	lsls	r3, r3, #3
   31a54:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   31a58:	5842      	ldr	r2, [r0, r1]
   31a5a:	431a      	orrs	r2, r3
   31a5c:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   31a5e:	e7ec      	b.n	31a3a <uECC_vli_bytesToNative+0x18>

00031a60 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   31a60:	78cb      	ldrb	r3, [r1, #3]
   31a62:	7802      	ldrb	r2, [r0, #0]
   31a64:	4053      	eors	r3, r2
   31a66:	7003      	strb	r3, [r0, #0]
   31a68:	884b      	ldrh	r3, [r1, #2]
   31a6a:	7842      	ldrb	r2, [r0, #1]
   31a6c:	4053      	eors	r3, r2
   31a6e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   31a70:	680a      	ldr	r2, [r1, #0]
   31a72:	7883      	ldrb	r3, [r0, #2]
   31a74:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   31a78:	7083      	strb	r3, [r0, #2]
   31a7a:	680a      	ldr	r2, [r1, #0]
   31a7c:	78c3      	ldrb	r3, [r0, #3]
   31a7e:	4053      	eors	r3, r2
   31a80:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   31a82:	79cb      	ldrb	r3, [r1, #7]
   31a84:	7902      	ldrb	r2, [r0, #4]
   31a86:	4053      	eors	r3, r2
   31a88:	7103      	strb	r3, [r0, #4]
   31a8a:	88cb      	ldrh	r3, [r1, #6]
   31a8c:	7942      	ldrb	r2, [r0, #5]
   31a8e:	4053      	eors	r3, r2
   31a90:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   31a92:	684a      	ldr	r2, [r1, #4]
   31a94:	7983      	ldrb	r3, [r0, #6]
   31a96:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   31a9a:	7183      	strb	r3, [r0, #6]
   31a9c:	684a      	ldr	r2, [r1, #4]
   31a9e:	79c3      	ldrb	r3, [r0, #7]
   31aa0:	4053      	eors	r3, r2
   31aa2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   31aa4:	7acb      	ldrb	r3, [r1, #11]
   31aa6:	7a02      	ldrb	r2, [r0, #8]
   31aa8:	4053      	eors	r3, r2
   31aaa:	7203      	strb	r3, [r0, #8]
   31aac:	7a42      	ldrb	r2, [r0, #9]
   31aae:	894b      	ldrh	r3, [r1, #10]
   31ab0:	4053      	eors	r3, r2
   31ab2:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   31ab4:	688a      	ldr	r2, [r1, #8]
   31ab6:	7a83      	ldrb	r3, [r0, #10]
   31ab8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   31abc:	7283      	strb	r3, [r0, #10]
   31abe:	688a      	ldr	r2, [r1, #8]
   31ac0:	7ac3      	ldrb	r3, [r0, #11]
   31ac2:	4053      	eors	r3, r2
   31ac4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   31ac6:	7bcb      	ldrb	r3, [r1, #15]
   31ac8:	7b02      	ldrb	r2, [r0, #12]
   31aca:	4053      	eors	r3, r2
   31acc:	7303      	strb	r3, [r0, #12]
   31ace:	89cb      	ldrh	r3, [r1, #14]
   31ad0:	7b42      	ldrb	r2, [r0, #13]
   31ad2:	4053      	eors	r3, r2
   31ad4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   31ad6:	68ca      	ldr	r2, [r1, #12]
   31ad8:	7b83      	ldrb	r3, [r0, #14]
   31ada:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   31ade:	7383      	strb	r3, [r0, #14]
   31ae0:	68ca      	ldr	r2, [r1, #12]
   31ae2:	7bc3      	ldrb	r3, [r0, #15]
   31ae4:	4053      	eors	r3, r2
   31ae6:	73c3      	strb	r3, [r0, #15]
}
   31ae8:	4770      	bx	lr

00031aea <shift_rows>:
{
   31aea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   31aec:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   31aee:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   31af0:	f88d 2000 	strb.w	r2, [sp]
   31af4:	7942      	ldrb	r2, [r0, #5]
   31af6:	f88d 2001 	strb.w	r2, [sp, #1]
   31afa:	7a82      	ldrb	r2, [r0, #10]
   31afc:	f88d 2002 	strb.w	r2, [sp, #2]
   31b00:	7bc2      	ldrb	r2, [r0, #15]
   31b02:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   31b06:	7902      	ldrb	r2, [r0, #4]
   31b08:	f88d 2004 	strb.w	r2, [sp, #4]
   31b0c:	7a42      	ldrb	r2, [r0, #9]
   31b0e:	f88d 2005 	strb.w	r2, [sp, #5]
   31b12:	7b82      	ldrb	r2, [r0, #14]
   31b14:	f88d 2006 	strb.w	r2, [sp, #6]
   31b18:	78c2      	ldrb	r2, [r0, #3]
   31b1a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   31b1e:	7a02      	ldrb	r2, [r0, #8]
   31b20:	f88d 2008 	strb.w	r2, [sp, #8]
   31b24:	7b42      	ldrb	r2, [r0, #13]
   31b26:	f88d 2009 	strb.w	r2, [sp, #9]
   31b2a:	7882      	ldrb	r2, [r0, #2]
   31b2c:	f88d 200a 	strb.w	r2, [sp, #10]
   31b30:	79c2      	ldrb	r2, [r0, #7]
   31b32:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   31b36:	7b02      	ldrb	r2, [r0, #12]
   31b38:	f88d 200c 	strb.w	r2, [sp, #12]
   31b3c:	7842      	ldrb	r2, [r0, #1]
   31b3e:	f88d 200d 	strb.w	r2, [sp, #13]
   31b42:	7982      	ldrb	r2, [r0, #6]
   31b44:	f88d 200e 	strb.w	r2, [sp, #14]
   31b48:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   31b4c:	2310      	movs	r3, #16
   31b4e:	466a      	mov	r2, sp
   31b50:	4619      	mov	r1, r3
   31b52:	f7ff f86e 	bl	30c32 <_copy>
}
   31b56:	b005      	add	sp, #20
   31b58:	f85d fb04 	ldr.w	pc, [sp], #4

00031b5c <mult_row_column>:
{
   31b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31b5e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   31b60:	7808      	ldrb	r0, [r1, #0]
{
   31b62:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   31b64:	f7ff f874 	bl	30c50 <_double_byte>
   31b68:	4605      	mov	r5, r0
   31b6a:	7860      	ldrb	r0, [r4, #1]
   31b6c:	f7ff f870 	bl	30c50 <_double_byte>
   31b70:	78a2      	ldrb	r2, [r4, #2]
   31b72:	7863      	ldrb	r3, [r4, #1]
   31b74:	4053      	eors	r3, r2
   31b76:	78e2      	ldrb	r2, [r4, #3]
   31b78:	4053      	eors	r3, r2
   31b7a:	405d      	eors	r5, r3
   31b7c:	4045      	eors	r5, r0
   31b7e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   31b80:	7860      	ldrb	r0, [r4, #1]
   31b82:	7827      	ldrb	r7, [r4, #0]
   31b84:	f7ff f864 	bl	30c50 <_double_byte>
   31b88:	4605      	mov	r5, r0
   31b8a:	78a0      	ldrb	r0, [r4, #2]
   31b8c:	f7ff f860 	bl	30c50 <_double_byte>
   31b90:	78a3      	ldrb	r3, [r4, #2]
   31b92:	405f      	eors	r7, r3
   31b94:	78e3      	ldrb	r3, [r4, #3]
   31b96:	405f      	eors	r7, r3
   31b98:	407d      	eors	r5, r7
   31b9a:	4045      	eors	r5, r0
   31b9c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   31b9e:	78a0      	ldrb	r0, [r4, #2]
   31ba0:	7865      	ldrb	r5, [r4, #1]
   31ba2:	7827      	ldrb	r7, [r4, #0]
   31ba4:	f7ff f854 	bl	30c50 <_double_byte>
   31ba8:	406f      	eors	r7, r5
   31baa:	4605      	mov	r5, r0
   31bac:	78e0      	ldrb	r0, [r4, #3]
   31bae:	f7ff f84f 	bl	30c50 <_double_byte>
   31bb2:	78e3      	ldrb	r3, [r4, #3]
   31bb4:	405f      	eors	r7, r3
   31bb6:	407d      	eors	r5, r7
   31bb8:	4045      	eors	r5, r0
   31bba:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   31bbc:	7820      	ldrb	r0, [r4, #0]
   31bbe:	f7ff f847 	bl	30c50 <_double_byte>
   31bc2:	7863      	ldrb	r3, [r4, #1]
   31bc4:	7825      	ldrb	r5, [r4, #0]
   31bc6:	405d      	eors	r5, r3
   31bc8:	78a3      	ldrb	r3, [r4, #2]
   31bca:	405d      	eors	r5, r3
   31bcc:	4045      	eors	r5, r0
   31bce:	78e0      	ldrb	r0, [r4, #3]
   31bd0:	f7ff f83e 	bl	30c50 <_double_byte>
   31bd4:	b2ed      	uxtb	r5, r5
   31bd6:	4045      	eors	r5, r0
   31bd8:	70f5      	strb	r5, [r6, #3]
}
   31bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00031bdc <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   31bdc:	460a      	mov	r2, r1
{
   31bde:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   31be0:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   31be4:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   31be6:	2b00      	cmp	r3, #0
   31be8:	bfb4      	ite	lt
   31bea:	2387      	movlt	r3, #135	; 0x87
   31bec:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   31bee:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   31bf2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   31bf6:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   31bf8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   31bfc:	d002      	beq.n	31c04 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   31bfe:	7813      	ldrb	r3, [r2, #0]
   31c00:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   31c02:	e7f4      	b.n	31bee <gf_double+0x12>
	}
}
   31c04:	bd10      	pop	{r4, pc}

00031c06 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   31c06:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   31c08:	b120      	cbz	r0, 31c14 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   31c0a:	2258      	movs	r2, #88	; 0x58
   31c0c:	2100      	movs	r1, #0
   31c0e:	f7ff f81d 	bl	30c4c <_set>
   31c12:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   31c14:	bd08      	pop	{r3, pc}

00031c16 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   31c16:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   31c18:	4604      	mov	r4, r0
   31c1a:	b188      	cbz	r0, 31c40 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   31c1c:	2210      	movs	r2, #16
   31c1e:	2100      	movs	r1, #0
   31c20:	f7ff f814 	bl	30c4c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   31c24:	2210      	movs	r2, #16
   31c26:	f104 0030 	add.w	r0, r4, #48	; 0x30
   31c2a:	2100      	movs	r1, #0
   31c2c:	f7ff f80e 	bl	30c4c <_set>
	s->leftover_offset = 0;
   31c30:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   31c32:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   31c34:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   31c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   31c3a:	2001      	movs	r0, #1
   31c3c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   31c40:	bd10      	pop	{r4, pc}

00031c42 <tc_cmac_setup>:
{
   31c42:	b570      	push	{r4, r5, r6, lr}
   31c44:	460d      	mov	r5, r1
   31c46:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   31c48:	4604      	mov	r4, r0
   31c4a:	b310      	cbz	r0, 31c92 <tc_cmac_setup+0x50>
   31c4c:	b311      	cbz	r1, 31c94 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   31c4e:	2258      	movs	r2, #88	; 0x58
   31c50:	2100      	movs	r1, #0
   31c52:	f7fe fffb 	bl	30c4c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   31c56:	4629      	mov	r1, r5
   31c58:	4630      	mov	r0, r6
	s->sched = sched;
   31c5a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   31c5c:	f7e5 faca 	bl	171f4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   31c60:	2210      	movs	r2, #16
   31c62:	2100      	movs	r1, #0
   31c64:	4620      	mov	r0, r4
   31c66:	f7fe fff1 	bl	30c4c <_set>
	gf_double (s->K1, s->iv);
   31c6a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   31c6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   31c70:	4621      	mov	r1, r4
   31c72:	4620      	mov	r0, r4
   31c74:	f7e5 fb12 	bl	1729c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   31c78:	4621      	mov	r1, r4
   31c7a:	4628      	mov	r0, r5
   31c7c:	f7ff ffae 	bl	31bdc <gf_double>
	gf_double (s->K2, s->K1);
   31c80:	4629      	mov	r1, r5
   31c82:	f104 0020 	add.w	r0, r4, #32
   31c86:	f7ff ffa9 	bl	31bdc <gf_double>
	tc_cmac_init(s);
   31c8a:	4620      	mov	r0, r4
   31c8c:	f7ff ffc3 	bl	31c16 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   31c90:	2001      	movs	r0, #1
}
   31c92:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   31c94:	4608      	mov	r0, r1
   31c96:	e7fc      	b.n	31c92 <tc_cmac_setup+0x50>

00031c98 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   31c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31c9c:	460d      	mov	r5, r1
   31c9e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   31ca0:	4604      	mov	r4, r0
   31ca2:	2800      	cmp	r0, #0
   31ca4:	d062      	beq.n	31d6c <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   31ca6:	b912      	cbnz	r2, 31cae <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   31ca8:	2001      	movs	r0, #1
}
   31caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   31cae:	2900      	cmp	r1, #0
   31cb0:	d05c      	beq.n	31d6c <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   31cb2:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   31cb6:	ea50 0301 	orrs.w	r3, r0, r1
   31cba:	d057      	beq.n	31d6c <tc_cmac_update+0xd4>
	s->countdown--;
   31cbc:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   31cc0:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   31cc4:	f141 33ff 	adc.w	r3, r1, #4294967295
   31cc8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   31ccc:	f1b8 0f00 	cmp.w	r8, #0
   31cd0:	d02a      	beq.n	31d28 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   31cd2:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   31cd6:	f108 0030 	add.w	r0, r8, #48	; 0x30
   31cda:	42be      	cmp	r6, r7
   31cdc:	4420      	add	r0, r4
   31cde:	d208      	bcs.n	31cf2 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   31ce0:	462a      	mov	r2, r5
   31ce2:	4633      	mov	r3, r6
   31ce4:	4631      	mov	r1, r6
   31ce6:	f7fe ffa4 	bl	30c32 <_copy>
			s->leftover_offset += data_length;
   31cea:	6c62      	ldr	r2, [r4, #68]	; 0x44
   31cec:	4432      	add	r2, r6
   31cee:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   31cf0:	e7da      	b.n	31ca8 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   31cf2:	463b      	mov	r3, r7
   31cf4:	462a      	mov	r2, r5
   31cf6:	4639      	mov	r1, r7
   31cf8:	f7fe ff9b 	bl	30c32 <_copy>
		s->leftover_offset = 0;
   31cfc:	2300      	movs	r3, #0
   31cfe:	3e10      	subs	r6, #16
   31d00:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   31d02:	4446      	add	r6, r8
		data += remaining_space;
   31d04:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   31d06:	1e63      	subs	r3, r4, #1
   31d08:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   31d0c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   31d10:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   31d14:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   31d16:	ea82 0200 	eor.w	r2, r2, r0
   31d1a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   31d1c:	d1f6      	bne.n	31d0c <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   31d1e:	4621      	mov	r1, r4
   31d20:	4620      	mov	r0, r4
   31d22:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   31d24:	f7e5 faba 	bl	1729c <tc_aes_encrypt>
   31d28:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   31d2c:	2e10      	cmp	r6, #16
   31d2e:	d80a      	bhi.n	31d46 <tc_cmac_update+0xae>
	if (data_length > 0) {
   31d30:	2e00      	cmp	r6, #0
   31d32:	d0b9      	beq.n	31ca8 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   31d34:	4633      	mov	r3, r6
   31d36:	462a      	mov	r2, r5
   31d38:	4631      	mov	r1, r6
   31d3a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   31d3e:	f7fe ff78 	bl	30c32 <_copy>
		s->leftover_offset = data_length;
   31d42:	6466      	str	r6, [r4, #68]	; 0x44
   31d44:	e7b0      	b.n	31ca8 <tc_cmac_update+0x10>
   31d46:	1e63      	subs	r3, r4, #1
   31d48:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   31d4a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   31d4e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   31d52:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   31d54:	ea82 0200 	eor.w	r2, r2, r0
   31d58:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   31d5a:	d1f6      	bne.n	31d4a <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   31d5c:	4621      	mov	r1, r4
   31d5e:	4620      	mov	r0, r4
   31d60:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   31d62:	f7e5 fa9b 	bl	1729c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   31d66:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   31d68:	3e10      	subs	r6, #16
   31d6a:	e7df      	b.n	31d2c <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   31d6c:	2000      	movs	r0, #0
   31d6e:	e79c      	b.n	31caa <tc_cmac_update+0x12>

00031d70 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   31d70:	b570      	push	{r4, r5, r6, lr}
   31d72:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   31d74:	4605      	mov	r5, r0
   31d76:	b1f0      	cbz	r0, 31db6 <tc_cmac_final+0x46>
   31d78:	b371      	cbz	r1, 31dd8 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   31d7a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   31d7c:	2a10      	cmp	r2, #16
   31d7e:	d11b      	bne.n	31db8 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   31d80:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   31d82:	1e63      	subs	r3, r4, #1
   31d84:	3901      	subs	r1, #1
   31d86:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   31d8a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   31d8e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   31d92:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   31d94:	ea82 0206 	eor.w	r2, r2, r6
   31d98:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   31d9c:	ea82 0206 	eor.w	r2, r2, r6
   31da0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   31da2:	d1f2      	bne.n	31d8a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   31da4:	4621      	mov	r1, r4
   31da6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   31da8:	4628      	mov	r0, r5
   31daa:	f7e5 fa77 	bl	1729c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   31dae:	4620      	mov	r0, r4
   31db0:	f7ff ff29 	bl	31c06 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   31db4:	2001      	movs	r0, #1
}
   31db6:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   31db8:	f102 0030 	add.w	r0, r2, #48	; 0x30
   31dbc:	2100      	movs	r1, #0
   31dbe:	f1c2 0210 	rsb	r2, r2, #16
   31dc2:	4420      	add	r0, r4
   31dc4:	f7fe ff42 	bl	30c4c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   31dc8:	2280      	movs	r2, #128	; 0x80
   31dca:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   31dcc:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   31dd0:	4423      	add	r3, r4
   31dd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   31dd6:	e7d4      	b.n	31d82 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   31dd8:	4608      	mov	r0, r1
   31dda:	e7ec      	b.n	31db6 <tc_cmac_final+0x46>

00031ddc <tc_sha256_update>:
{
   31ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31dde:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   31de0:	b110      	cbz	r0, 31de8 <tc_sha256_update+0xc>
   31de2:	b1f9      	cbz	r1, 31e24 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   31de4:	b90a      	cbnz	r2, 31dea <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   31de6:	2001      	movs	r0, #1
}
   31de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   31dea:	2600      	movs	r6, #0
   31dec:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   31dee:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   31df2:	42a5      	cmp	r5, r4
   31df4:	d0f7      	beq.n	31de6 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   31df6:	6e83      	ldr	r3, [r0, #104]	; 0x68
   31df8:	1c5a      	adds	r2, r3, #1
   31dfa:	6682      	str	r2, [r0, #104]	; 0x68
   31dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
   31e00:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   31e02:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   31e04:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   31e08:	d9f3      	bls.n	31df2 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   31e0a:	4639      	mov	r1, r7
   31e0c:	f7e5 fab0 	bl	17370 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   31e10:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   31e14:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   31e18:	f142 0200 	adc.w	r2, r2, #0
   31e1c:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   31e20:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   31e22:	e7e6      	b.n	31df2 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   31e24:	4608      	mov	r0, r1
   31e26:	e7df      	b.n	31de8 <tc_sha256_update+0xc>

00031e28 <tc_sha256_final>:
{
   31e28:	b570      	push	{r4, r5, r6, lr}
   31e2a:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   31e2c:	4605      	mov	r5, r0
   31e2e:	2800      	cmp	r0, #0
   31e30:	d054      	beq.n	31edc <tc_sha256_final+0xb4>
   31e32:	2900      	cmp	r1, #0
   31e34:	d053      	beq.n	31ede <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   31e36:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   31e3a:	6e89      	ldr	r1, [r1, #104]	; 0x68
   31e3c:	f104 0628 	add.w	r6, r4, #40	; 0x28
   31e40:	00c8      	lsls	r0, r1, #3
   31e42:	1812      	adds	r2, r2, r0
   31e44:	f143 0300 	adc.w	r3, r3, #0
   31e48:	e9c4 2308 	strd	r2, r3, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   31e4c:	2380      	movs	r3, #128	; 0x80
   31e4e:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   31e50:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   31e52:	4421      	add	r1, r4
   31e54:	66a0      	str	r0, [r4, #104]	; 0x68
   31e56:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   31e5a:	d90b      	bls.n	31e74 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   31e5c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   31e60:	2100      	movs	r1, #0
   31e62:	4430      	add	r0, r6
   31e64:	f7fe fef2 	bl	30c4c <_set>
		compress(s->iv, s->leftover);
   31e68:	4631      	mov	r1, r6
   31e6a:	4620      	mov	r0, r4
   31e6c:	f7e5 fa80 	bl	17370 <compress>
		s->leftover_offset = 0;
   31e70:	2300      	movs	r3, #0
   31e72:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   31e74:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   31e76:	2100      	movs	r1, #0
   31e78:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   31e7c:	4430      	add	r0, r6
   31e7e:	f7fe fee5 	bl	30c4c <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   31e82:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   31e84:	4631      	mov	r1, r6
   31e86:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   31e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   31e8a:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   31e8c:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   31e8e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   31e92:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   31e96:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   31e98:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   31e9a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   31e9c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   31ea0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   31ea4:	f7e5 fa64 	bl	17370 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   31ea8:	1f26      	subs	r6, r4, #4
   31eaa:	1d2b      	adds	r3, r5, #4
   31eac:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   31eb0:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t >> 24);
   31eb4:	3304      	adds	r3, #4
   31eb6:	0e11      	lsrs	r1, r2, #24
   31eb8:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   31ebc:	0c11      	lsrs	r1, r2, #16
   31ebe:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   31ec2:	0a11      	lsrs	r1, r2, #8
   31ec4:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   31ec8:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   31ecc:	4283      	cmp	r3, r0
   31ece:	d1ef      	bne.n	31eb0 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   31ed0:	4620      	mov	r0, r4
   31ed2:	2270      	movs	r2, #112	; 0x70
   31ed4:	2100      	movs	r1, #0
   31ed6:	f7fe feb9 	bl	30c4c <_set>
	return TC_CRYPTO_SUCCESS;
   31eda:	2001      	movs	r0, #1
}
   31edc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   31ede:	4608      	mov	r0, r1
   31ee0:	e7fc      	b.n	31edc <tc_sha256_final+0xb4>

00031ee2 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   31ee2:	b530      	push	{r4, r5, lr}
   31ee4:	1e43      	subs	r3, r0, #1
   31ee6:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   31ee8:	42a9      	cmp	r1, r5
   31eea:	d106      	bne.n	31efa <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   31eec:	2136      	movs	r1, #54	; 0x36
   31eee:	245c      	movs	r4, #92	; 0x5c
   31ef0:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   31ef2:	1a13      	subs	r3, r2, r0
   31ef4:	2b3f      	cmp	r3, #63	; 0x3f
   31ef6:	d90c      	bls.n	31f12 <rekey+0x30>
	}
}
   31ef8:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   31efa:	780c      	ldrb	r4, [r1, #0]
   31efc:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   31f00:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   31f04:	f811 4b01 	ldrb.w	r4, [r1], #1
   31f08:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   31f0c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   31f10:	e7ea      	b.n	31ee8 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   31f12:	f802 1b01 	strb.w	r1, [r2], #1
   31f16:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   31f1a:	e7ea      	b.n	31ef2 <rekey+0x10>

00031f1c <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   31f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   31f1e:	460e      	mov	r6, r1
   31f20:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   31f22:	4605      	mov	r5, r0
{
   31f24:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   31f26:	b1b8      	cbz	r0, 31f58 <tc_hmac_set_key+0x3c>
   31f28:	b341      	cbz	r1, 31f7c <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   31f2a:	b34a      	cbz	r2, 31f80 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   31f2c:	2a40      	cmp	r2, #64	; 0x40
   31f2e:	f100 0770 	add.w	r7, r0, #112	; 0x70
   31f32:	d813      	bhi.n	31f5c <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   31f34:	a810      	add	r0, sp, #64	; 0x40
   31f36:	f7e5 fb01 	bl	1753c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   31f3a:	4622      	mov	r2, r4
   31f3c:	4669      	mov	r1, sp
   31f3e:	a810      	add	r0, sp, #64	; 0x40
   31f40:	f7ff ff4c 	bl	31ddc <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   31f44:	a910      	add	r1, sp, #64	; 0x40
   31f46:	a834      	add	r0, sp, #208	; 0xd0
   31f48:	f7ff ff6e 	bl	31e28 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   31f4c:	4622      	mov	r2, r4
   31f4e:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   31f50:	4638      	mov	r0, r7
   31f52:	f7ff ffc6 	bl	31ee2 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   31f56:	2001      	movs	r0, #1
}
   31f58:	b04d      	add	sp, #308	; 0x134
   31f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   31f5c:	f7e5 faee 	bl	1753c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   31f60:	4622      	mov	r2, r4
   31f62:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   31f64:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   31f68:	4628      	mov	r0, r5
   31f6a:	f7ff ff37 	bl	31ddc <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   31f6e:	4629      	mov	r1, r5
   31f70:	4620      	mov	r0, r4
   31f72:	f7ff ff59 	bl	31e28 <tc_sha256_final>
		rekey(ctx->key,
   31f76:	2220      	movs	r2, #32
   31f78:	4621      	mov	r1, r4
   31f7a:	e7e9      	b.n	31f50 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   31f7c:	4608      	mov	r0, r1
   31f7e:	e7eb      	b.n	31f58 <tc_hmac_set_key+0x3c>
   31f80:	4610      	mov	r0, r2
   31f82:	e7e9      	b.n	31f58 <tc_hmac_set_key+0x3c>

00031f84 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   31f84:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   31f86:	4604      	mov	r4, r0
   31f88:	b140      	cbz	r0, 31f9c <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   31f8a:	f7e5 fad7 	bl	1753c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   31f8e:	2240      	movs	r2, #64	; 0x40
   31f90:	4620      	mov	r0, r4
   31f92:	f104 0170 	add.w	r1, r4, #112	; 0x70
   31f96:	f7ff ff21 	bl	31ddc <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   31f9a:	2001      	movs	r0, #1
}
   31f9c:	bd10      	pop	{r4, pc}

00031f9e <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   31f9e:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   31fa0:	b110      	cbz	r0, 31fa8 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   31fa2:	f7ff ff1b 	bl	31ddc <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   31fa6:	2001      	movs	r0, #1
}
   31fa8:	bd08      	pop	{r3, pc}

00031faa <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   31faa:	b570      	push	{r4, r5, r6, lr}
   31fac:	460e      	mov	r6, r1
   31fae:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   31fb0:	4605      	mov	r5, r0
   31fb2:	b1f0      	cbz	r0, 31ff2 <tc_hmac_final+0x48>
   31fb4:	2920      	cmp	r1, #32
   31fb6:	d11c      	bne.n	31ff2 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   31fb8:	b1ea      	cbz	r2, 31ff6 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   31fba:	4611      	mov	r1, r2
   31fbc:	f7ff ff34 	bl	31e28 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   31fc0:	4620      	mov	r0, r4
   31fc2:	f7e5 fabb 	bl	1753c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   31fc6:	2240      	movs	r2, #64	; 0x40
   31fc8:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   31fcc:	4620      	mov	r0, r4
   31fce:	f7ff ff05 	bl	31ddc <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   31fd2:	4632      	mov	r2, r6
   31fd4:	4629      	mov	r1, r5
   31fd6:	4620      	mov	r0, r4
   31fd8:	f7ff ff00 	bl	31ddc <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   31fdc:	4621      	mov	r1, r4
   31fde:	4628      	mov	r0, r5
   31fe0:	f7ff ff22 	bl	31e28 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   31fe4:	4620      	mov	r0, r4
   31fe6:	22f0      	movs	r2, #240	; 0xf0
   31fe8:	2100      	movs	r1, #0
   31fea:	f7fe fe2f 	bl	30c4c <_set>

	return TC_CRYPTO_SUCCESS;
   31fee:	2001      	movs	r0, #1
}
   31ff0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   31ff2:	2000      	movs	r0, #0
   31ff4:	e7fc      	b.n	31ff0 <tc_hmac_final+0x46>
   31ff6:	4610      	mov	r0, r2
   31ff8:	e7fa      	b.n	31ff0 <tc_hmac_final+0x46>

00031ffa <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   31ffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31ffe:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   32000:	f04f 0b01 	mov.w	fp, #1
{
   32004:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   32006:	2300      	movs	r3, #0
{
   32008:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   3200a:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   3200e:	4631      	mov	r1, r6
{
   32010:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   32012:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   32014:	f88d 3006 	strb.w	r3, [sp, #6]
{
   32018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   3201c:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   32020:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   32024:	f7ff ff7a 	bl	31f1c <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   32028:	4620      	mov	r0, r4
   3202a:	f7ff ffab 	bl	31f84 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   3202e:	2220      	movs	r2, #32
   32030:	4629      	mov	r1, r5
   32032:	4620      	mov	r0, r4
   32034:	f7ff ffb3 	bl	31f9e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   32038:	465a      	mov	r2, fp
   3203a:	4620      	mov	r0, r4
   3203c:	f10d 0106 	add.w	r1, sp, #6
   32040:	f7ff ffad 	bl	31f9e <tc_hmac_update>

	if (data && datalen)
   32044:	f1b8 0f00 	cmp.w	r8, #0
   32048:	d007      	beq.n	3205a <update+0x60>
   3204a:	f1b9 0f00 	cmp.w	r9, #0
   3204e:	d004      	beq.n	3205a <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   32050:	464a      	mov	r2, r9
   32052:	4641      	mov	r1, r8
   32054:	4620      	mov	r0, r4
   32056:	f7ff ffa2 	bl	31f9e <tc_hmac_update>
	if (additional_data && additional_datalen)
   3205a:	b13f      	cbz	r7, 3206c <update+0x72>
   3205c:	f1ba 0f00 	cmp.w	sl, #0
   32060:	d004      	beq.n	3206c <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   32062:	4652      	mov	r2, sl
   32064:	4639      	mov	r1, r7
   32066:	4620      	mov	r0, r4
   32068:	f7ff ff99 	bl	31f9e <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   3206c:	4622      	mov	r2, r4
   3206e:	2120      	movs	r1, #32
   32070:	4630      	mov	r0, r6
   32072:	f7ff ff9a 	bl	31faa <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   32076:	2220      	movs	r2, #32
   32078:	4631      	mov	r1, r6
   3207a:	4620      	mov	r0, r4
   3207c:	f7ff ff4e 	bl	31f1c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   32080:	4620      	mov	r0, r4
   32082:	f7ff ff7f 	bl	31f84 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   32086:	2220      	movs	r2, #32
   32088:	4629      	mov	r1, r5
   3208a:	4620      	mov	r0, r4
   3208c:	f7ff ff87 	bl	31f9e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   32090:	4622      	mov	r2, r4
   32092:	2120      	movs	r1, #32
   32094:	4628      	mov	r0, r5
   32096:	f7ff ff88 	bl	31faa <tc_hmac_final>

	if (data == 0 || datalen == 0)
   3209a:	f1b8 0f00 	cmp.w	r8, #0
   3209e:	d03a      	beq.n	32116 <update+0x11c>
   320a0:	f1b9 0f00 	cmp.w	r9, #0
   320a4:	d037      	beq.n	32116 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   320a6:	2220      	movs	r2, #32
   320a8:	4631      	mov	r1, r6
   320aa:	4620      	mov	r0, r4
   320ac:	f7ff ff36 	bl	31f1c <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   320b0:	4620      	mov	r0, r4
   320b2:	f7ff ff67 	bl	31f84 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   320b6:	2220      	movs	r2, #32
   320b8:	4629      	mov	r1, r5
   320ba:	4620      	mov	r0, r4
   320bc:	f7ff ff6f 	bl	31f9e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   320c0:	2201      	movs	r2, #1
   320c2:	f10d 0107 	add.w	r1, sp, #7
   320c6:	4620      	mov	r0, r4
   320c8:	f7ff ff69 	bl	31f9e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   320cc:	464a      	mov	r2, r9
   320ce:	4641      	mov	r1, r8
   320d0:	4620      	mov	r0, r4
   320d2:	f7ff ff64 	bl	31f9e <tc_hmac_update>
	if (additional_data && additional_datalen)
   320d6:	b13f      	cbz	r7, 320e8 <update+0xee>
   320d8:	f1ba 0f00 	cmp.w	sl, #0
   320dc:	d004      	beq.n	320e8 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   320de:	4652      	mov	r2, sl
   320e0:	4639      	mov	r1, r7
   320e2:	4620      	mov	r0, r4
   320e4:	f7ff ff5b 	bl	31f9e <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   320e8:	4622      	mov	r2, r4
   320ea:	2120      	movs	r1, #32
   320ec:	4630      	mov	r0, r6
   320ee:	f7ff ff5c 	bl	31faa <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   320f2:	2220      	movs	r2, #32
   320f4:	4631      	mov	r1, r6
   320f6:	4620      	mov	r0, r4
   320f8:	f7ff ff10 	bl	31f1c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   320fc:	4620      	mov	r0, r4
   320fe:	f7ff ff41 	bl	31f84 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   32102:	2220      	movs	r2, #32
   32104:	4629      	mov	r1, r5
   32106:	4620      	mov	r0, r4
   32108:	f7ff ff49 	bl	31f9e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   3210c:	4622      	mov	r2, r4
   3210e:	2120      	movs	r1, #32
   32110:	4628      	mov	r0, r5
   32112:	f7ff ff4a 	bl	31faa <tc_hmac_final>
}
   32116:	b003      	add	sp, #12
   32118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003211c <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   3211c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3211e:	460c      	mov	r4, r1
   32120:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   32122:	4605      	mov	r5, r0
   32124:	b1b0      	cbz	r0, 32154 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   32126:	b1b9      	cbz	r1, 32158 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   32128:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   3212a:	2220      	movs	r2, #32
   3212c:	2100      	movs	r1, #0
   3212e:	30f0      	adds	r0, #240	; 0xf0
   32130:	f7fe fd8c 	bl	30c4c <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   32134:	2220      	movs	r2, #32
   32136:	2101      	movs	r1, #1
   32138:	f505 7088 	add.w	r0, r5, #272	; 0x110
   3213c:	f7fe fd86 	bl	30c4c <_set>
	update(prng, personalization, plen, 0, 0);
   32140:	4628      	mov	r0, r5
   32142:	4633      	mov	r3, r6
   32144:	463a      	mov	r2, r7
   32146:	4621      	mov	r1, r4
   32148:	9600      	str	r6, [sp, #0]
   3214a:	f7ff ff56 	bl	31ffa <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   3214e:	2001      	movs	r0, #1
	prng->countdown = 0;
   32150:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   32154:	b003      	add	sp, #12
   32156:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   32158:	4608      	mov	r0, r1
   3215a:	e7fb      	b.n	32154 <tc_hmac_prng_init+0x38>

0003215c <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   3215c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3215e:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   32160:	4605      	mov	r5, r0
   32162:	b180      	cbz	r0, 32186 <tc_hmac_prng_reseed+0x2a>
   32164:	b179      	cbz	r1, 32186 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   32166:	2a1f      	cmp	r2, #31
   32168:	d90d      	bls.n	32186 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   3216a:	b153      	cbz	r3, 32182 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   3216c:	b16c      	cbz	r4, 3218a <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   3216e:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   32170:	f7ff ff43 	bl	31ffa <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   32174:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   32178:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   3217a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   3217e:	b003      	add	sp, #12
   32180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   32182:	9300      	str	r3, [sp, #0]
   32184:	e7f4      	b.n	32170 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   32186:	2000      	movs	r0, #0
   32188:	e7f9      	b.n	3217e <tc_hmac_prng_reseed+0x22>
   3218a:	4620      	mov	r0, r4
   3218c:	e7f7      	b.n	3217e <tc_hmac_prng_reseed+0x22>

0003218e <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   3218e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   32192:	460d      	mov	r5, r1
   32194:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   32196:	4680      	mov	r8, r0
   32198:	b3d8      	cbz	r0, 32212 <tc_hmac_prng_generate+0x84>
   3219a:	b3d2      	cbz	r2, 32212 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   3219c:	1e4b      	subs	r3, r1, #1
   3219e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   321a2:	d236      	bcs.n	32212 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   321a4:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   321a8:	b3ab      	cbz	r3, 32216 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   321aa:	3b01      	subs	r3, #1
   321ac:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   321b0:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   321b4:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   321b8:	2220      	movs	r2, #32
   321ba:	4649      	mov	r1, r9
   321bc:	4620      	mov	r0, r4
   321be:	f7ff fead 	bl	31f1c <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   321c2:	4620      	mov	r0, r4
   321c4:	f7ff fede 	bl	31f84 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   321c8:	2220      	movs	r2, #32
   321ca:	4639      	mov	r1, r7
   321cc:	4620      	mov	r0, r4
   321ce:	f7ff fee6 	bl	31f9e <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   321d2:	4622      	mov	r2, r4
   321d4:	2120      	movs	r1, #32
   321d6:	4638      	mov	r0, r7
   321d8:	f7ff fee7 	bl	31faa <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   321dc:	2d20      	cmp	r5, #32
   321de:	462e      	mov	r6, r5
   321e0:	bf28      	it	cs
   321e2:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   321e4:	4640      	mov	r0, r8
   321e6:	4633      	mov	r3, r6
   321e8:	463a      	mov	r2, r7
   321ea:	4631      	mov	r1, r6
   321ec:	f7fe fd21 	bl	30c32 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   321f0:	2d20      	cmp	r5, #32
   321f2:	bf38      	it	cc
   321f4:	2520      	movcc	r5, #32
	while (outlen != 0) {
   321f6:	3d20      	subs	r5, #32
		out += bufferlen;
   321f8:	44b0      	add	r8, r6
	while (outlen != 0) {
   321fa:	d1dd      	bne.n	321b8 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   321fc:	4620      	mov	r0, r4
   321fe:	462b      	mov	r3, r5
   32200:	462a      	mov	r2, r5
   32202:	4629      	mov	r1, r5
   32204:	9500      	str	r5, [sp, #0]
   32206:	f7ff fef8 	bl	31ffa <update>

	return TC_CRYPTO_SUCCESS;
   3220a:	2001      	movs	r0, #1
}
   3220c:	b003      	add	sp, #12
   3220e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   32212:	2000      	movs	r0, #0
   32214:	e7fa      	b.n	3220c <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   32216:	f04f 30ff 	mov.w	r0, #4294967295
   3221a:	e7f7      	b.n	3220c <tc_hmac_prng_generate+0x7e>

0003221c <tc_ctr_prng_update.part.0>:
 *  @return none
 *  @note Assumes: providedData is (TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE) bytes long
 *  @param ctx IN/OUT -- CTR PRNG state
 *  @param providedData IN -- data used when updating the internal state
 */
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   3221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32220:	4604      	mov	r4, r0
   32222:	460d      	mov	r5, r1
{
	if (0 != ctx) {
		/* 10.2.1.2 step 1 */
		uint8_t temp[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
		unsigned int len = 0U;
   32224:	2600      	movs	r6, #0
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   32226:	b08c      	sub	sp, #48	; 0x30
   32228:	f100 0810 	add.w	r8, r0, #16

		/* 10.2.1.2 step 2 */
		while (len < sizeof temp) {
			unsigned int blocklen = sizeof(temp) - len;
   3222c:	f1c6 0720 	rsb	r7, r6, #32
	if (0 != arr) {
   32230:	b144      	cbz	r4, 32244 <tc_ctr_prng_update.part.0+0x28>
   32232:	4642      	mov	r2, r8
			if (++arr[i-1] != 0U) {
   32234:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   32238:	3301      	adds	r3, #1
   3223a:	b2db      	uxtb	r3, r3
   3223c:	7013      	strb	r3, [r2, #0]
   3223e:	b90b      	cbnz	r3, 32244 <tc_ctr_prng_update.part.0+0x28>
		for (i = len; i > 0U; i--) {
   32240:	42a2      	cmp	r2, r4
   32242:	d1f7      	bne.n	32234 <tc_ctr_prng_update.part.0+0x18>

			/* 10.2.1.2 step 2.1 */
			arrInc(ctx->V, sizeof ctx->V);

			/* 10.2.1.2 step 2.2 */
			if (blocklen > TC_AES_BLOCK_SIZE) {
   32244:	2f10      	cmp	r7, #16
   32246:	bf28      	it	cs
   32248:	2710      	movcs	r7, #16
				blocklen = TC_AES_BLOCK_SIZE;
			}
			(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   3224a:	4642      	mov	r2, r8
   3224c:	4621      	mov	r1, r4
   3224e:	4668      	mov	r0, sp
   32250:	f7e5 f824 	bl	1729c <tc_aes_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32254:	ab04      	add	r3, sp, #16
   32256:	1998      	adds	r0, r3, r6
   32258:	463a      	mov	r2, r7
   3225a:	4669      	mov	r1, sp

			/* 10.2.1.2 step 2.3/step 3 */
			memcpy(&(temp[len]), output_block, blocklen);

			len += blocklen;
   3225c:	443e      	add	r6, r7
   3225e:	f005 fa90 	bl	37782 <memcpy>
		while (len < sizeof temp) {
   32262:	2e1f      	cmp	r6, #31
   32264:	d9e2      	bls.n	3222c <tc_ctr_prng_update.part.0+0x10>
   32266:	1e6b      	subs	r3, r5, #1
   32268:	aa04      	add	r2, sp, #16
   3226a:	351f      	adds	r5, #31

		/* 10.2.1.2 step 4 */
		if (0 != providedData) {
			unsigned int i;
			for (i = 0U; i < sizeof temp; i++) {
				temp[i] ^= providedData[i];
   3226c:	7811      	ldrb	r1, [r2, #0]
   3226e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   32272:	4041      	eors	r1, r0
			for (i = 0U; i < sizeof temp; i++) {
   32274:	42ab      	cmp	r3, r5
				temp[i] ^= providedData[i];
   32276:	f802 1b01 	strb.w	r1, [r2], #1
			for (i = 0U; i < sizeof temp; i++) {
   3227a:	d1f7      	bne.n	3226c <tc_ctr_prng_update.part.0+0x50>
			}
		}

		/* 10.2.1.2 step 5 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, temp);
   3227c:	4640      	mov	r0, r8
   3227e:	a904      	add	r1, sp, #16
   32280:	f7e4 ffb8 	bl	171f4 <tc_aes128_set_encrypt_key>
   32284:	ad0c      	add	r5, sp, #48	; 0x30
   32286:	aa08      	add	r2, sp, #32
   32288:	4613      	mov	r3, r2
   3228a:	cb03      	ldmia	r3!, {r0, r1}
   3228c:	42ab      	cmp	r3, r5
   3228e:	6020      	str	r0, [r4, #0]
   32290:	6061      	str	r1, [r4, #4]
   32292:	461a      	mov	r2, r3
   32294:	f104 0408 	add.w	r4, r4, #8
   32298:	d1f6      	bne.n	32288 <tc_ctr_prng_update.part.0+0x6c>
    
		/* 10.2.1.2 step 6 */
		memcpy(ctx->V, &(temp[TC_AES_KEY_SIZE]), TC_AES_BLOCK_SIZE);
	}
}
   3229a:	b00c      	add	sp, #48	; 0x30
   3229c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000322a0 <tc_ctr_prng_init>:
int tc_ctr_prng_init(TCCtrPrng_t * const ctx, 
		     uint8_t const * const entropy,
		     unsigned int entropyLen, 
		     uint8_t const * const personalization,
		     unsigned int pLen)
{
   322a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int result = TC_CRYPTO_FAIL;	
	unsigned int i;
	uint8_t personalization_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   322a4:	2600      	movs	r6, #0
{
   322a6:	461f      	mov	r7, r3
   322a8:	b094      	sub	sp, #80	; 0x50
   322aa:	4605      	mov	r5, r0
   322ac:	460c      	mov	r4, r1
   322ae:	4690      	mov	r8, r2
	uint8_t personalization_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   322b0:	4631      	mov	r1, r6
   322b2:	221c      	movs	r2, #28
   322b4:	a805      	add	r0, sp, #20
   322b6:	9604      	str	r6, [sp, #16]
   322b8:	f005 fa83 	bl	377c2 <memset>
	uint8_t seed_material[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
	uint8_t zeroArr[TC_AES_BLOCK_SIZE] = {0U};
   322bc:	e9cd 6600 	strd	r6, r6, [sp]
   322c0:	e9cd 6602 	strd	r6, r6, [sp, #8]
  
	if (0 != personalization) {
   322c4:	b147      	cbz	r7, 322d8 <tc_ctr_prng_init+0x38>
		if (len > sizeof personalization_buf) {
			len = sizeof personalization_buf;
		}

		/* 10.2.1.3.1 step 2 */
		memcpy(personalization_buf, personalization, len);
   322c6:	2320      	movs	r3, #32
   322c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   322ca:	4639      	mov	r1, r7
   322cc:	429a      	cmp	r2, r3
   322ce:	bf28      	it	cs
   322d0:	461a      	movcs	r2, r3
   322d2:	a804      	add	r0, sp, #16
   322d4:	f005 fa62 	bl	3779c <__memcpy_chk>
	}

	if ((0 != ctx) && (0 != entropy) && (entropyLen >= sizeof seed_material)) {
   322d8:	b395      	cbz	r5, 32340 <tc_ctr_prng_init+0xa0>
   322da:	b38c      	cbz	r4, 32340 <tc_ctr_prng_init+0xa0>
   322dc:	f1b8 0f1f 	cmp.w	r8, #31
   322e0:	d92e      	bls.n	32340 <tc_ctr_prng_init+0xa0>
		/* 10.2.1.3.1 step 3 */
		memcpy(seed_material, entropy, sizeof seed_material);
   322e2:	aa0c      	add	r2, sp, #48	; 0x30
   322e4:	4623      	mov	r3, r4
   322e6:	4616      	mov	r6, r2
   322e8:	f104 0720 	add.w	r7, r4, #32
   322ec:	4614      	mov	r4, r2
   322ee:	6818      	ldr	r0, [r3, #0]
   322f0:	6859      	ldr	r1, [r3, #4]
   322f2:	3308      	adds	r3, #8
   322f4:	c403      	stmia	r4!, {r0, r1}
   322f6:	42bb      	cmp	r3, r7
   322f8:	4622      	mov	r2, r4
   322fa:	d1f7      	bne.n	322ec <tc_ctr_prng_init+0x4c>
		for (i = 0U; i < sizeof seed_material; i++) {
   322fc:	4633      	mov	r3, r6
	if ((0 != ctx) && (0 != entropy) && (entropyLen >= sizeof seed_material)) {
   322fe:	2420      	movs	r4, #32
   32300:	a904      	add	r1, sp, #16
			seed_material[i] ^= personalization_buf[i];
   32302:	781a      	ldrb	r2, [r3, #0]
   32304:	f811 0b01 	ldrb.w	r0, [r1], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   32308:	3c01      	subs	r4, #1
			seed_material[i] ^= personalization_buf[i];
   3230a:	ea82 0200 	eor.w	r2, r2, r0
   3230e:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   32312:	d1f6      	bne.n	32302 <tc_ctr_prng_init+0x62>
		}

		/* 10.2.1.3.1 step 4 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, zeroArr);
   32314:	4669      	mov	r1, sp
   32316:	f105 0010 	add.w	r0, r5, #16
   3231a:	f7e4 ff6b 	bl	171f4 <tc_aes128_set_encrypt_key>
__ssp_bos_icheck3(memset, void *, int)
   3231e:	2210      	movs	r2, #16
   32320:	4621      	mov	r1, r4
   32322:	4628      	mov	r0, r5
   32324:	f005 fa4d 	bl	377c2 <memset>
	if (0 != ctx) {
   32328:	4628      	mov	r0, r5
   3232a:	4631      	mov	r1, r6
   3232c:	f7ff ff76 	bl	3221c <tc_ctr_prng_update.part.0>
    
		/* 10.2.1.3.1 step 6 */    
		tc_ctr_prng_update(ctx, seed_material);

		/* 10.2.1.3.1 step 7 */
		ctx->reseedCount = 1U;
   32330:	2201      	movs	r2, #1
   32332:	2300      	movs	r3, #0

		result = TC_CRYPTO_SUCCESS;
   32334:	2001      	movs	r0, #1
		ctx->reseedCount = 1U;
   32336:	e9c5 2330 	strd	r2, r3, [r5, #192]	; 0xc0
	}
	return result;
}
   3233a:	b014      	add	sp, #80	; 0x50
   3233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int result = TC_CRYPTO_FAIL;	
   32340:	2000      	movs	r0, #0
	return result;
   32342:	e7fa      	b.n	3233a <tc_ctr_prng_init+0x9a>

00032344 <tc_ctr_prng_generate>:
int tc_ctr_prng_generate(TCCtrPrng_t * const ctx,
			uint8_t const * const additional_input,
			unsigned int additionallen,
			uint8_t * const out,
			unsigned int outlen)
{
   32344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32348:	b08c      	sub	sp, #48	; 0x30
   3234a:	460e      	mov	r6, r1
   3234c:	4690      	mov	r8, r2
   3234e:	461d      	mov	r5, r3
	/* 2^19 bits - see section 10.2.1 */ 
	static const unsigned int MAX_BYTES_PER_REQ = 65536U; 

	unsigned int result = TC_CRYPTO_FAIL;

	if ((0 != ctx) && (0 != out) && (outlen < MAX_BYTES_PER_REQ)) {
   32350:	4604      	mov	r4, r0
{
   32352:	9f12      	ldr	r7, [sp, #72]	; 0x48
	if ((0 != ctx) && (0 != out) && (outlen < MAX_BYTES_PER_REQ)) {
   32354:	2800      	cmp	r0, #0
   32356:	d04e      	beq.n	323f6 <tc_ctr_prng_generate+0xb2>
   32358:	2b00      	cmp	r3, #0
   3235a:	d04c      	beq.n	323f6 <tc_ctr_prng_generate+0xb2>
   3235c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   32360:	d249      	bcs.n	323f6 <tc_ctr_prng_generate+0xb2>
		/* 10.2.1.5.1 step 1 */
		if (ctx->reseedCount > MAX_REQS_BEFORE_RESEED) {
   32362:	e9d0 2330 	ldrd	r2, r3, [r0, #192]	; 0xc0
   32366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3236a:	bf08      	it	eq
   3236c:	2a01      	cmpeq	r2, #1
   3236e:	d244      	bcs.n	323fa <tc_ctr_prng_generate+0xb6>
			result = TC_CTR_PRNG_RESEED_REQ;
		} else {
			uint8_t additional_input_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   32370:	2100      	movs	r1, #0
   32372:	221c      	movs	r2, #28
   32374:	a805      	add	r0, sp, #20
   32376:	9104      	str	r1, [sp, #16]
   32378:	f005 fa23 	bl	377c2 <memset>
			if (0 != additional_input) {
   3237c:	b166      	cbz	r6, 32398 <tc_ctr_prng_generate+0x54>
				/* 10.2.1.5.1 step 2  */
				unsigned int len = additionallen;
				if (len > sizeof additional_input_buf) {
					len = sizeof additional_input_buf;
				}
				memcpy(additional_input_buf, additional_input, len);
   3237e:	2320      	movs	r3, #32
   32380:	4598      	cmp	r8, r3
   32382:	4642      	mov	r2, r8
   32384:	4631      	mov	r1, r6
   32386:	bf28      	it	cs
   32388:	461a      	movcs	r2, r3
   3238a:	a804      	add	r0, sp, #16
   3238c:	f005 fa06 	bl	3779c <__memcpy_chk>
	if (0 != ctx) {
   32390:	4620      	mov	r0, r4
   32392:	a904      	add	r1, sp, #16
   32394:	f7ff ff42 	bl	3221c <tc_ctr_prng_update.part.0>
{
   32398:	2600      	movs	r6, #0
      
			/* 10.2.1.5.1 step 3 - implicit */

			/* 10.2.1.5.1 step 4 */
			unsigned int len = 0U;      
			while (len < outlen) {
   3239a:	42be      	cmp	r6, r7
   3239c:	d30e      	bcc.n	323bc <tc_ctr_prng_generate+0x78>
	if (0 != ctx) {
   3239e:	4620      	mov	r0, r4
   323a0:	a904      	add	r1, sp, #16
   323a2:	f7ff ff3b 	bl	3221c <tc_ctr_prng_update.part.0>
      
			/* 10.2.1.5.1 step 6 */
			tc_ctr_prng_update(ctx, additional_input_buf);

			/* 10.2.1.5.1 step 7 */
			ctx->reseedCount++;
   323a6:	e9d4 3230 	ldrd	r3, r2, [r4, #192]	; 0xc0

			/* 10.2.1.5.1 step 8 */
			result = TC_CRYPTO_SUCCESS;
   323aa:	2001      	movs	r0, #1
			ctx->reseedCount++;
   323ac:	3301      	adds	r3, #1
   323ae:	f142 0200 	adc.w	r2, r2, #0
   323b2:	e9c4 3230 	strd	r3, r2, [r4, #192]	; 0xc0
		}
	}

	return result;
}
   323b6:	b00c      	add	sp, #48	; 0x30
   323b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				unsigned int blocklen = outlen - len;
   323bc:	f104 0110 	add.w	r1, r4, #16
   323c0:	460a      	mov	r2, r1
   323c2:	eba7 0806 	sub.w	r8, r7, r6
			if (++arr[i-1] != 0U) {
   323c6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   323ca:	3301      	adds	r3, #1
   323cc:	b2db      	uxtb	r3, r3
   323ce:	700b      	strb	r3, [r1, #0]
   323d0:	b90b      	cbnz	r3, 323d6 <tc_ctr_prng_generate+0x92>
		for (i = len; i > 0U; i--) {
   323d2:	428c      	cmp	r4, r1
   323d4:	d1f7      	bne.n	323c6 <tc_ctr_prng_generate+0x82>
				(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   323d6:	4621      	mov	r1, r4
   323d8:	4668      	mov	r0, sp
   323da:	f7e4 ff5f 	bl	1729c <tc_aes_encrypt>
				if (blocklen > TC_AES_BLOCK_SIZE) {
   323de:	f1b8 0f10 	cmp.w	r8, #16
   323e2:	bf28      	it	cs
   323e4:	f04f 0810 	movcs.w	r8, #16
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   323e8:	19a8      	adds	r0, r5, r6
   323ea:	4642      	mov	r2, r8
   323ec:	4669      	mov	r1, sp
   323ee:	f005 f9c8 	bl	37782 <memcpy>
				len += blocklen;
   323f2:	4446      	add	r6, r8
   323f4:	e7d1      	b.n	3239a <tc_ctr_prng_generate+0x56>
	unsigned int result = TC_CRYPTO_FAIL;
   323f6:	2000      	movs	r0, #0
   323f8:	e7dd      	b.n	323b6 <tc_ctr_prng_generate+0x72>
			result = TC_CTR_PRNG_RESEED_REQ;
   323fa:	f04f 30ff 	mov.w	r0, #4294967295
   323fe:	e7da      	b.n	323b6 <tc_ctr_prng_generate+0x72>

00032400 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   32400:	2100      	movs	r1, #0
   32402:	2001      	movs	r0, #1
   32404:	f7e5 b982 	b.w	1770c <z_arm_fatal_error>

00032408 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   32408:	6e83      	ldr	r3, [r0, #104]	; 0x68
   3240a:	f383 880b 	msr	PSPLIM, r3
}
   3240e:	4770      	bx	lr

00032410 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   32410:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   32412:	6800      	ldr	r0, [r0, #0]
   32414:	f7e5 b97a 	b.w	1770c <z_arm_fatal_error>

00032418 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   32418:	b508      	push	{r3, lr}
	handler();
   3241a:	f7e5 fa2b 	bl	17874 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3241e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   32422:	f7e5 ba6d 	b.w	17900 <z_arm_exc_exit>

00032426 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   32426:	4770      	bx	lr

00032428 <z_arm_restore_fp_context>:
   32428:	4770      	bx	lr

0003242a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3242a:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3242e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   32432:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   32434:	bf08      	it	eq
   32436:	f06f 0015 	mvneq.w	r0, #21
   3243a:	4770      	bx	lr

0003243c <mpu_configure_region>:
{
   3243c:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   3243e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   32440:	680c      	ldr	r4, [r1, #0]
{
   32442:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   32444:	890a      	ldrh	r2, [r1, #8]
   32446:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   32448:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3244a:	3b01      	subs	r3, #1
   3244c:	f024 041f 	bic.w	r4, r4, #31
   32450:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   32452:	f002 021f 	and.w	r2, r2, #31
   32456:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3245a:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   3245e:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   32460:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   32464:	9303      	str	r3, [sp, #12]
   32466:	f7e5 fd17 	bl	17e98 <region_allocate_and_init>
}
   3246a:	b005      	add	sp, #20
   3246c:	bd30      	pop	{r4, r5, pc}

0003246e <_stdout_hook_default>:
}
   3246e:	f04f 30ff 	mov.w	r0, #4294967295
   32472:	4770      	bx	lr

00032474 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   32474:	f7f7 bd2c 	b.w	29ed0 <z_impl_z_errno>

00032478 <close>:
   32478:	f7fe ba54 	b.w	30924 <z_impl_zsock_close>

0003247c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   3247c:	b510      	push	{r4, lr}
   3247e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   32480:	7801      	ldrb	r1, [r0, #0]
   32482:	7822      	ldrb	r2, [r4, #0]
{
   32484:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   32486:	428a      	cmp	r2, r1
   32488:	d00e      	beq.n	324a8 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   3248a:	4669      	mov	r1, sp
   3248c:	f7e6 f8f2 	bl	18674 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   32490:	4620      	mov	r0, r4
   32492:	a905      	add	r1, sp, #20
   32494:	f7e6 f8ee 	bl	18674 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   32498:	2210      	movs	r2, #16
   3249a:	f10d 0115 	add.w	r1, sp, #21
   3249e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   324a2:	f005 f960 	bl	37766 <memcmp>
   324a6:	e007      	b.n	324b8 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   324a8:	2a01      	cmp	r2, #1
   324aa:	d007      	beq.n	324bc <bt_uuid_cmp+0x40>
   324ac:	2a02      	cmp	r2, #2
   324ae:	d008      	beq.n	324c2 <bt_uuid_cmp+0x46>
   324b0:	b95a      	cbnz	r2, 324ca <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   324b2:	8840      	ldrh	r0, [r0, #2]
   324b4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   324b6:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   324b8:	b00a      	add	sp, #40	; 0x28
   324ba:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   324bc:	6840      	ldr	r0, [r0, #4]
   324be:	6863      	ldr	r3, [r4, #4]
   324c0:	e7f9      	b.n	324b6 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   324c2:	2210      	movs	r2, #16
   324c4:	1c61      	adds	r1, r4, #1
   324c6:	3001      	adds	r0, #1
   324c8:	e7eb      	b.n	324a2 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   324ca:	f06f 0015 	mvn.w	r0, #21
   324ce:	e7f3      	b.n	324b8 <bt_uuid_cmp+0x3c>

000324d0 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   324d0:	2a04      	cmp	r2, #4
{
   324d2:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   324d4:	d00d      	beq.n	324f2 <bt_uuid_create+0x22>
   324d6:	2a10      	cmp	r2, #16
   324d8:	d019      	beq.n	3250e <bt_uuid_create+0x3e>
   324da:	2a02      	cmp	r2, #2
   324dc:	f04f 0300 	mov.w	r3, #0
   324e0:	d121      	bne.n	32526 <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   324e2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   324e4:	784a      	ldrb	r2, [r1, #1]
   324e6:	780b      	ldrb	r3, [r1, #0]
   324e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   324ec:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   324ee:	2001      	movs	r0, #1
}
   324f0:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   324f2:	2301      	movs	r3, #1
   324f4:	7003      	strb	r3, [r0, #0]
   324f6:	788a      	ldrb	r2, [r1, #2]
   324f8:	78cc      	ldrb	r4, [r1, #3]
   324fa:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   324fc:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   32500:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   32502:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   32506:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   3250a:	6042      	str	r2, [r0, #4]
		break;
   3250c:	e7ef      	b.n	324ee <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   3250e:	2302      	movs	r3, #2
   32510:	f800 3b01 	strb.w	r3, [r0], #1
   32514:	f101 0310 	add.w	r3, r1, #16
   32518:	f851 2b04 	ldr.w	r2, [r1], #4
   3251c:	4299      	cmp	r1, r3
   3251e:	f840 2b04 	str.w	r2, [r0], #4
   32522:	d1f9      	bne.n	32518 <bt_uuid_create+0x48>
   32524:	e7e3      	b.n	324ee <bt_uuid_create+0x1e>
	switch (data_len) {
   32526:	4618      	mov	r0, r3
   32528:	e7e2      	b.n	324f0 <bt_uuid_create+0x20>

0003252a <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   3252a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   3252c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   3252e:	2106      	movs	r1, #6
{
   32530:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   32532:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   32536:	f7e8 fa81 	bl	1aa3c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   3253a:	b918      	cbnz	r0, 32544 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   3253c:	79a3      	ldrb	r3, [r4, #6]
   3253e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   32542:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   32544:	bd10      	pop	{r4, pc}

00032546 <bt_hci_evt_get_flags>:
   32546:	280f      	cmp	r0, #15
   32548:	d806      	bhi.n	32558 <bt_hci_evt_get_flags+0x12>
   3254a:	280d      	cmp	r0, #13
   3254c:	d80b      	bhi.n	32566 <bt_hci_evt_get_flags+0x20>
   3254e:	2805      	cmp	r0, #5
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   32550:	bf14      	ite	ne
   32552:	2002      	movne	r0, #2
   32554:	2003      	moveq	r0, #3
   32556:	4770      	bx	lr
	switch (evt) {
   32558:	2813      	cmp	r0, #19
   3255a:	d004      	beq.n	32566 <bt_hci_evt_get_flags+0x20>
   3255c:	281a      	cmp	r0, #26
   3255e:	bf14      	ite	ne
   32560:	2002      	movne	r0, #2
   32562:	2001      	moveq	r0, #1
   32564:	4770      	bx	lr
   32566:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   32568:	4770      	bx	lr

0003256a <bt_addr_le_copy>:
   3256a:	680b      	ldr	r3, [r1, #0]
   3256c:	6003      	str	r3, [r0, #0]
   3256e:	888b      	ldrh	r3, [r1, #4]
   32570:	8083      	strh	r3, [r0, #4]
   32572:	798b      	ldrb	r3, [r1, #6]
   32574:	7183      	strb	r3, [r0, #6]
}
   32576:	4770      	bx	lr

00032578 <bt_addr_copy>:
   32578:	680b      	ldr	r3, [r1, #0]
   3257a:	6003      	str	r3, [r0, #0]
   3257c:	888b      	ldrh	r3, [r1, #4]
   3257e:	8083      	strh	r3, [r0, #4]
}
   32580:	4770      	bx	lr

00032582 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   32582:	f7e6 bf17 	b.w	193b4 <bt_le_create_conn_legacy>

00032586 <bt_hci_disconnect>:
{
   32586:	b570      	push	{r4, r5, r6, lr}
   32588:	4606      	mov	r6, r0
   3258a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   3258c:	f240 4006 	movw	r0, #1030	; 0x406
   32590:	2103      	movs	r1, #3
   32592:	f7e6 fbe5 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   32596:	4604      	mov	r4, r0
   32598:	b168      	cbz	r0, 325b6 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   3259a:	2103      	movs	r1, #3
   3259c:	3008      	adds	r0, #8
   3259e:	f7eb feb3 	bl	1e308 <net_buf_simple_add>
	disconn->reason = reason;
   325a2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   325a4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   325a6:	4621      	mov	r1, r4
}
   325a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   325ac:	2200      	movs	r2, #0
   325ae:	f240 4006 	movw	r0, #1030	; 0x406
   325b2:	f7e6 bc1d 	b.w	18df0 <bt_hci_cmd_send_sync>
}
   325b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   325ba:	bd70      	pop	{r4, r5, r6, pc}

000325bc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   325bc:	8802      	ldrh	r2, [r0, #0]
   325be:	8843      	ldrh	r3, [r0, #2]
{
   325c0:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   325c2:	429a      	cmp	r2, r3
   325c4:	d818      	bhi.n	325f8 <bt_le_conn_params_valid+0x3c>
   325c6:	2a05      	cmp	r2, #5
   325c8:	d916      	bls.n	325f8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   325ca:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   325ce:	d813      	bhi.n	325f8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   325d0:	8884      	ldrh	r4, [r0, #4]
   325d2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   325d6:	d20f      	bcs.n	325f8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   325d8:	88c1      	ldrh	r1, [r0, #6]
   325da:	f640 4076 	movw	r0, #3190	; 0xc76
   325de:	f1a1 020a 	sub.w	r2, r1, #10
   325e2:	b292      	uxth	r2, r2
   325e4:	4282      	cmp	r2, r0
   325e6:	d807      	bhi.n	325f8 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   325e8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   325ec:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   325f0:	bf34      	ite	cc
   325f2:	2001      	movcc	r0, #1
   325f4:	2000      	movcs	r0, #0
}
   325f6:	bd10      	pop	{r4, pc}
		return false;
   325f8:	2000      	movs	r0, #0
   325fa:	e7fc      	b.n	325f6 <bt_le_conn_params_valid+0x3a>

000325fc <bt_le_set_data_len>:
{
   325fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   325fe:	4607      	mov	r7, r0
   32600:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   32602:	f242 0022 	movw	r0, #8226	; 0x2022
   32606:	2106      	movs	r1, #6
{
   32608:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   3260a:	f7e6 fba9 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   3260e:	4604      	mov	r4, r0
   32610:	b170      	cbz	r0, 32630 <bt_le_set_data_len+0x34>
   32612:	2106      	movs	r1, #6
   32614:	3008      	adds	r0, #8
   32616:	f7eb fe77 	bl	1e308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   3261a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   3261c:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   3261e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   32620:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   32622:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   32624:	f242 0022 	movw	r0, #8226	; 0x2022
}
   32628:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   3262c:	f7e6 bf4a 	b.w	194c4 <bt_hci_cmd_send>
}
   32630:	f06f 0068 	mvn.w	r0, #104	; 0x68
   32634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00032636 <bt_le_set_phy>:
{
   32636:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3263a:	4680      	mov	r8, r0
   3263c:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   3263e:	f242 0032 	movw	r0, #8242	; 0x2032
   32642:	2107      	movs	r1, #7
{
   32644:	4616      	mov	r6, r2
   32646:	461d      	mov	r5, r3
   32648:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   3264c:	f7e6 fb88 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   32650:	4604      	mov	r4, r0
   32652:	b190      	cbz	r0, 3267a <bt_le_set_phy+0x44>
   32654:	2107      	movs	r1, #7
   32656:	3008      	adds	r0, #8
   32658:	f7eb fe56 	bl	1e308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   3265c:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   32660:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   32662:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   32664:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   32666:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   32668:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   3266c:	4621      	mov	r1, r4
}
   3266e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   32672:	f242 0032 	movw	r0, #8242	; 0x2032
   32676:	f7e6 bf25 	b.w	194c4 <bt_hci_cmd_send>
}
   3267a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3267e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00032682 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   32682:	6880      	ldr	r0, [r0, #8]
   32684:	f7e7 b83c 	b.w	19700 <bt_hci_le_enh_conn_complete>

00032688 <le_legacy_conn_complete>:
{
   32688:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   3268a:	6881      	ldr	r1, [r0, #8]
{
   3268c:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   3268e:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   32690:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   32692:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   32696:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   3269a:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   3269c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   326a0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   326a4:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   326a8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   326ac:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   326b0:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   326b4:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   326b8:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   326bc:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   326c0:	7b4b      	ldrb	r3, [r1, #13]
   326c2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   326c6:	f7ff ff50 	bl	3256a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   326ca:	2200      	movs	r2, #0
   326cc:	4669      	mov	r1, sp
   326ce:	f10d 0013 	add.w	r0, sp, #19
   326d2:	9200      	str	r2, [sp, #0]
   326d4:	f8ad 2004 	strh.w	r2, [sp, #4]
   326d8:	f7ff ff4e 	bl	32578 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   326dc:	4669      	mov	r1, sp
   326de:	f10d 0019 	add.w	r0, sp, #25
   326e2:	9200      	str	r2, [sp, #0]
   326e4:	f8ad 2004 	strh.w	r2, [sp, #4]
   326e8:	f7ff ff46 	bl	32578 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   326ec:	a802      	add	r0, sp, #8
   326ee:	f7e7 f807 	bl	19700 <bt_hci_le_enh_conn_complete>
}
   326f2:	b00b      	add	sp, #44	; 0x2c
   326f4:	f85d fb04 	ldr.w	pc, [sp], #4

000326f8 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   326f8:	2000      	movs	r0, #0
   326fa:	4770      	bx	lr

000326fc <bt_addr_copy>:
   326fc:	680b      	ldr	r3, [r1, #0]
   326fe:	6003      	str	r3, [r0, #0]
   32700:	888b      	ldrh	r3, [r1, #4]
   32702:	8083      	strh	r3, [r0, #4]
   32704:	4770      	bx	lr

00032706 <bt_addr_le_copy>:
   32706:	680b      	ldr	r3, [r1, #0]
   32708:	6003      	str	r3, [r0, #0]
   3270a:	888b      	ldrh	r3, [r1, #4]
   3270c:	8083      	strh	r3, [r0, #4]
   3270e:	798b      	ldrb	r3, [r1, #6]
   32710:	7183      	strb	r3, [r0, #6]
}
   32712:	4770      	bx	lr

00032714 <bt_lookup_id_addr>:
}
   32714:	4608      	mov	r0, r1
   32716:	4770      	bx	lr

00032718 <bt_id_set_private_addr>:
{
   32718:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   3271a:	2106      	movs	r1, #6
   3271c:	4668      	mov	r0, sp
   3271e:	f7e8 f98d 	bl	1aa3c <bt_rand>
	if (err) {
   32722:	b940      	cbnz	r0, 32736 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   32724:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   32728:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   3272a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3272e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   32732:	f7e7 fc87 	bl	1a044 <set_random_address>
}
   32736:	b003      	add	sp, #12
   32738:	f85d fb04 	ldr.w	pc, [sp], #4

0003273c <bt_id_scan_random_addr_check>:
}
   3273c:	2001      	movs	r0, #1
   3273e:	4770      	bx	lr

00032740 <atomic_and>:
{
   32740:	4603      	mov	r3, r0
}
   32742:	e8d3 0fef 	ldaex	r0, [r3]
   32746:	ea00 0201 	and.w	r2, r0, r1
   3274a:	e8c3 2fec 	stlex	ip, r2, [r3]
   3274e:	f1bc 0f00 	cmp.w	ip, #0
   32752:	d1f6      	bne.n	32742 <atomic_and+0x2>
   32754:	4770      	bx	lr

00032756 <bt_addr_le_copy>:
   32756:	680b      	ldr	r3, [r1, #0]
   32758:	6003      	str	r3, [r0, #0]
   3275a:	888b      	ldrh	r3, [r1, #4]
   3275c:	8083      	strh	r3, [r0, #4]
   3275e:	798b      	ldrb	r3, [r1, #6]
   32760:	7183      	strb	r3, [r0, #6]
   32762:	4770      	bx	lr

00032764 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   32764:	e8d0 0faf 	lda	r0, [r0]
}
   32768:	4770      	bx	lr

0003276a <bt_addr_le_copy>:
   3276a:	680b      	ldr	r3, [r1, #0]
   3276c:	6003      	str	r3, [r0, #0]
   3276e:	888b      	ldrh	r3, [r1, #4]
   32770:	8083      	strh	r3, [r0, #4]
   32772:	798b      	ldrb	r3, [r1, #6]
   32774:	7183      	strb	r3, [r0, #6]
   32776:	4770      	bx	lr

00032778 <tx_notify>:
{
   32778:	b570      	push	{r4, r5, r6, lr}
   3277a:	4604      	mov	r4, r0
	__asm__ volatile(
   3277c:	f04f 0220 	mov.w	r2, #32
   32780:	f3ef 8311 	mrs	r3, BASEPRI
   32784:	f382 8811 	msr	BASEPRI, r2
   32788:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   3278c:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   3278e:	b920      	cbnz	r0, 3279a <tx_notify+0x22>
	__asm__ volatile(
   32790:	f383 8811 	msr	BASEPRI, r3
   32794:	f3bf 8f6f 	isb	sy
}
   32798:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3279a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3279c:	6802      	ldr	r2, [r0, #0]
   3279e:	4288      	cmp	r0, r1
	list->tail = node;
   327a0:	bf08      	it	eq
   327a2:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   327a4:	6222      	str	r2, [r4, #32]
   327a6:	f383 8811 	msr	BASEPRI, r3
   327aa:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   327ae:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   327b2:	f7e8 f95b 	bl	1aa6c <tx_free>
		cb(conn, user_data);
   327b6:	4631      	mov	r1, r6
   327b8:	4620      	mov	r0, r4
   327ba:	47a8      	blx	r5
	while (1) {
   327bc:	e7de      	b.n	3277c <tx_notify+0x4>

000327be <tx_complete_work>:
	tx_notify(conn);
   327be:	3828      	subs	r0, #40	; 0x28
   327c0:	f7ff bfda 	b.w	32778 <tx_notify>

000327c4 <bt_conn_new>:
{
   327c4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   327c6:	2200      	movs	r2, #0
   327c8:	4603      	mov	r3, r0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   327ca:	2401      	movs	r4, #1
   327cc:	428a      	cmp	r2, r1
   327ce:	d102      	bne.n	327d6 <bt_conn_new+0x12>
		return NULL;
   327d0:	2300      	movs	r3, #0
}
   327d2:	4618      	mov	r0, r3
   327d4:	bd38      	pop	{r3, r4, r5, pc}
   327d6:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   327da:	e8d0 5fef 	ldaex	r5, [r0]
   327de:	2d00      	cmp	r5, #0
   327e0:	d104      	bne.n	327ec <bt_conn_new+0x28>
   327e2:	e8c0 4fec 	stlex	ip, r4, [r0]
   327e6:	f1bc 0f00 	cmp.w	ip, #0
   327ea:	d1f6      	bne.n	327da <bt_conn_new+0x16>
   327ec:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   327f0:	d002      	beq.n	327f8 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   327f2:	4603      	mov	r3, r0
   327f4:	3201      	adds	r2, #1
   327f6:	e7e9      	b.n	327cc <bt_conn_new+0x8>
	if (!conn) {
   327f8:	2b00      	cmp	r3, #0
   327fa:	d0ea      	beq.n	327d2 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   327fc:	4618      	mov	r0, r3
   327fe:	22c0      	movs	r2, #192	; 0xc0
   32800:	2100      	movs	r1, #0
   32802:	f004 ffde 	bl	377c2 <memset>
   32806:	4603      	mov	r3, r0
   32808:	e7e3      	b.n	327d2 <bt_conn_new+0xe>

0003280a <bt_conn_get_security>:
}
   3280a:	2001      	movs	r0, #1
   3280c:	4770      	bx	lr

0003280e <bt_conn_reset_rx_state>:
{
   3280e:	b510      	push	{r4, lr}
   32810:	4604      	mov	r4, r0
	if (!conn->rx) {
   32812:	6900      	ldr	r0, [r0, #16]
   32814:	b118      	cbz	r0, 3281e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   32816:	f7eb fc47 	bl	1e0a8 <net_buf_unref>
	conn->rx = NULL;
   3281a:	2300      	movs	r3, #0
   3281c:	6123      	str	r3, [r4, #16]
}
   3281e:	bd10      	pop	{r4, pc}

00032820 <bt_conn_connected>:
{
   32820:	b510      	push	{r4, lr}
   32822:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   32824:	f7e9 f822 	bl	1b86c <bt_l2cap_connected>
	notify_connected(conn);
   32828:	4620      	mov	r0, r4
}
   3282a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   3282e:	f7e8 b927 	b.w	1aa80 <notify_connected>

00032832 <bt_conn_is_peer_addr_le>:
{
   32832:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   32834:	7a03      	ldrb	r3, [r0, #8]
{
   32836:	4604      	mov	r4, r0
	if (id != conn->id) {
   32838:	428b      	cmp	r3, r1
{
   3283a:	4615      	mov	r5, r2
	if (id != conn->id) {
   3283c:	d115      	bne.n	3286a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   3283e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   32842:	2207      	movs	r2, #7
   32844:	4628      	mov	r0, r5
   32846:	f004 ff8e 	bl	37766 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   3284a:	b180      	cbz	r0, 3286e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   3284c:	78e3      	ldrb	r3, [r4, #3]
   3284e:	2207      	movs	r2, #7
   32850:	b943      	cbnz	r3, 32864 <bt_conn_is_peer_addr_le+0x32>
   32852:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   32856:	4628      	mov	r0, r5
   32858:	f004 ff85 	bl	37766 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   3285c:	fab0 f080 	clz	r0, r0
   32860:	0940      	lsrs	r0, r0, #5
}
   32862:	bd38      	pop	{r3, r4, r5, pc}
   32864:	f104 0197 	add.w	r1, r4, #151	; 0x97
   32868:	e7f5      	b.n	32856 <bt_conn_is_peer_addr_le+0x24>
		return false;
   3286a:	2000      	movs	r0, #0
   3286c:	e7f9      	b.n	32862 <bt_conn_is_peer_addr_le+0x30>
		return true;
   3286e:	2001      	movs	r0, #1
   32870:	e7f7      	b.n	32862 <bt_conn_is_peer_addr_le+0x30>

00032872 <bt_conn_ref>:
{
   32872:	4603      	mov	r3, r0
   32874:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   32876:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   3287a:	4610      	mov	r0, r2
   3287c:	f7ff ff72 	bl	32764 <atomic_get>
		if (!old) {
   32880:	b160      	cbz	r0, 3289c <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   32882:	1c41      	adds	r1, r0, #1
   32884:	e8d2 4fef 	ldaex	r4, [r2]
   32888:	4284      	cmp	r4, r0
   3288a:	d104      	bne.n	32896 <bt_conn_ref+0x24>
   3288c:	e8c2 1fec 	stlex	ip, r1, [r2]
   32890:	f1bc 0f00 	cmp.w	ip, #0
   32894:	d1f6      	bne.n	32884 <bt_conn_ref+0x12>
   32896:	d1f0      	bne.n	3287a <bt_conn_ref+0x8>
}
   32898:	4618      	mov	r0, r3
   3289a:	bd10      	pop	{r4, pc}
			return NULL;
   3289c:	4603      	mov	r3, r0
   3289e:	e7fb      	b.n	32898 <bt_conn_ref+0x26>

000328a0 <conn_lookup_handle>:
{
   328a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   328a4:	4607      	mov	r7, r0
   328a6:	460e      	mov	r6, r1
   328a8:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   328aa:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   328ac:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   328b0:	42b4      	cmp	r4, r6
   328b2:	d103      	bne.n	328bc <conn_lookup_handle+0x1c>
	return NULL;
   328b4:	2300      	movs	r3, #0
}
   328b6:	4618      	mov	r0, r3
   328b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   328bc:	fb09 7004 	mla	r0, r9, r4, r7
   328c0:	f7ff ffd7 	bl	32872 <bt_conn_ref>
   328c4:	4603      	mov	r3, r0
		if (!conn) {
   328c6:	b158      	cbz	r0, 328e0 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   328c8:	7a85      	ldrb	r5, [r0, #10]
   328ca:	2d01      	cmp	r5, #1
   328cc:	d002      	beq.n	328d4 <conn_lookup_handle+0x34>
   328ce:	3d07      	subs	r5, #7
   328d0:	2d01      	cmp	r5, #1
   328d2:	d803      	bhi.n	328dc <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   328d4:	881a      	ldrh	r2, [r3, #0]
   328d6:	4542      	cmp	r2, r8
   328d8:	d0ed      	beq.n	328b6 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   328da:	4618      	mov	r0, r3
   328dc:	f7e8 fb82 	bl	1afe4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   328e0:	3401      	adds	r4, #1
   328e2:	e7e5      	b.n	328b0 <conn_lookup_handle+0x10>

000328e4 <bt_conn_le_conn_update>:
{
   328e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   328e6:	4607      	mov	r7, r0
   328e8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   328ea:	f242 0013 	movw	r0, #8211	; 0x2013
   328ee:	210e      	movs	r1, #14
   328f0:	f7e6 fa36 	bl	18d60 <bt_hci_cmd_create>
	if (!buf) {
   328f4:	4606      	mov	r6, r0
   328f6:	b1d0      	cbz	r0, 3292e <bt_conn_le_conn_update+0x4a>
   328f8:	210e      	movs	r1, #14
   328fa:	3008      	adds	r0, #8
   328fc:	f7eb fd04 	bl	1e308 <net_buf_simple_add>
   32900:	4604      	mov	r4, r0
   32902:	220e      	movs	r2, #14
   32904:	2100      	movs	r1, #0
   32906:	f004 ff5c 	bl	377c2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   3290a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   3290c:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   3290e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   32910:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   32912:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   32914:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   32916:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   32918:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   3291c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   3291e:	88ab      	ldrh	r3, [r5, #4]
   32920:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   32922:	88eb      	ldrh	r3, [r5, #6]
   32924:	8123      	strh	r3, [r4, #8]
}
   32926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   3292a:	f7e6 ba61 	b.w	18df0 <bt_hci_cmd_send_sync>
}
   3292e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   32932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00032934 <l2cap_connected>:
}
   32934:	4770      	bx	lr

00032936 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   32936:	3010      	adds	r0, #16
   32938:	f7f9 b964 	b.w	2bc04 <k_work_cancel_delayable>

0003293c <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   3293c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   3293e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   32940:	b17b      	cbz	r3, 32962 <bt_l2cap_chan_remove+0x26>
   32942:	2200      	movs	r2, #0
   32944:	3b08      	subs	r3, #8
   32946:	b163      	cbz	r3, 32962 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   32948:	428b      	cmp	r3, r1
   3294a:	f103 0408 	add.w	r4, r3, #8
   3294e:	d10f      	bne.n	32970 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   32950:	688b      	ldr	r3, [r1, #8]
   32952:	b93a      	cbnz	r2, 32964 <bt_l2cap_chan_remove+0x28>
   32954:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   32956:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   32958:	4294      	cmp	r4, r2
   3295a:	d100      	bne.n	3295e <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   3295c:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   3295e:	2300      	movs	r3, #0
   32960:	608b      	str	r3, [r1, #8]
}
   32962:	bd10      	pop	{r4, pc}
   32964:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   32966:	6d83      	ldr	r3, [r0, #88]	; 0x58
   32968:	429c      	cmp	r4, r3
	list->tail = node;
   3296a:	bf08      	it	eq
   3296c:	6582      	streq	r2, [r0, #88]	; 0x58
}
   3296e:	e7f6      	b.n	3295e <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   32970:	2c00      	cmp	r4, #0
   32972:	d0f6      	beq.n	32962 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   32974:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   32976:	2b00      	cmp	r3, #0
   32978:	d0f3      	beq.n	32962 <bt_l2cap_chan_remove+0x26>
   3297a:	4622      	mov	r2, r4
   3297c:	3b08      	subs	r3, #8
   3297e:	e7e2      	b.n	32946 <bt_l2cap_chan_remove+0xa>

00032980 <bt_l2cap_chan_del>:
{
   32980:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   32982:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   32986:	4604      	mov	r4, r0
	if (!chan->conn) {
   32988:	b123      	cbz	r3, 32994 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   3298a:	686b      	ldr	r3, [r5, #4]
   3298c:	b103      	cbz	r3, 32990 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   3298e:	4798      	blx	r3
	chan->conn = NULL;
   32990:	2300      	movs	r3, #0
   32992:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   32994:	68e3      	ldr	r3, [r4, #12]
   32996:	b10b      	cbz	r3, 3299c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   32998:	4620      	mov	r0, r4
   3299a:	4798      	blx	r3
	if (ops->released) {
   3299c:	69eb      	ldr	r3, [r5, #28]
   3299e:	b11b      	cbz	r3, 329a8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   329a0:	4620      	mov	r0, r4
}
   329a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   329a6:	4718      	bx	r3
}
   329a8:	bd70      	pop	{r4, r5, r6, pc}

000329aa <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   329aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   329ac:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   329ae:	b18b      	cbz	r3, 329d4 <bt_l2cap_disconnected+0x2a>
   329b0:	f1b3 0008 	subs.w	r0, r3, #8
   329b4:	d00e      	beq.n	329d4 <bt_l2cap_disconnected+0x2a>
   329b6:	681c      	ldr	r4, [r3, #0]
   329b8:	b104      	cbz	r4, 329bc <bt_l2cap_disconnected+0x12>
   329ba:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   329bc:	f7ff ffe0 	bl	32980 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   329c0:	b144      	cbz	r4, 329d4 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   329c2:	f114 0308 	adds.w	r3, r4, #8
   329c6:	d002      	beq.n	329ce <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   329c8:	68a3      	ldr	r3, [r4, #8]
   329ca:	b103      	cbz	r3, 329ce <bt_l2cap_disconnected+0x24>
   329cc:	3b08      	subs	r3, #8
{
   329ce:	4620      	mov	r0, r4
   329d0:	461c      	mov	r4, r3
   329d2:	e7f3      	b.n	329bc <bt_l2cap_disconnected+0x12>
}
   329d4:	bd10      	pop	{r4, pc}

000329d6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   329d6:	3104      	adds	r1, #4
   329d8:	f7e8 bda0 	b.w	1b51c <bt_conn_create_pdu_timeout>

000329dc <bt_l2cap_send_cb>:
{
   329dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   329e0:	4614      	mov	r4, r2
   329e2:	4605      	mov	r5, r0
   329e4:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   329e6:	f102 0008 	add.w	r0, r2, #8
   329ea:	2104      	movs	r1, #4
   329ec:	461e      	mov	r6, r3
   329ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   329f2:	f7eb fc25 	bl	1e240 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   329f6:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   329f8:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   329fa:	3a04      	subs	r2, #4
   329fc:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   329fe:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   32a00:	4632      	mov	r2, r6
   32a02:	4621      	mov	r1, r4
   32a04:	4628      	mov	r0, r5
}
   32a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   32a0a:	f7e8 ba25 	b.w	1ae58 <bt_conn_send_cb>

00032a0e <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   32a0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32a10:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   32a12:	2202      	movs	r2, #2
   32a14:	2001      	movs	r0, #1
   32a16:	f7e8 fee3 	bl	1b7e0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   32a1a:	4604      	mov	r4, r0
   32a1c:	b198      	cbz	r0, 32a46 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   32a1e:	2102      	movs	r1, #2
   32a20:	3008      	adds	r0, #8
   32a22:	f7eb fc71 	bl	1e308 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   32a26:	2300      	movs	r3, #0
   32a28:	4622      	mov	r2, r4
   32a2a:	7003      	strb	r3, [r0, #0]
   32a2c:	7043      	strb	r3, [r0, #1]
   32a2e:	2105      	movs	r1, #5
   32a30:	4628      	mov	r0, r5
   32a32:	9300      	str	r3, [sp, #0]
   32a34:	f7ff ffd2 	bl	329dc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   32a38:	b128      	cbz	r0, 32a46 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   32a3a:	4620      	mov	r0, r4
}
   32a3c:	b003      	add	sp, #12
   32a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   32a42:	f7eb bb31 	b.w	1e0a8 <net_buf_unref>
}
   32a46:	b003      	add	sp, #12
   32a48:	bd30      	pop	{r4, r5, pc}

00032a4a <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   32a4a:	6d40      	ldr	r0, [r0, #84]	; 0x54
   32a4c:	b160      	cbz	r0, 32a68 <bt_l2cap_le_lookup_tx_cid+0x1e>
   32a4e:	3808      	subs	r0, #8
   32a50:	b900      	cbnz	r0, 32a54 <bt_l2cap_le_lookup_tx_cid+0xa>
   32a52:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   32a54:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   32a58:	428b      	cmp	r3, r1
   32a5a:	d005      	beq.n	32a68 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   32a5c:	f110 0308 	adds.w	r3, r0, #8
   32a60:	d001      	beq.n	32a66 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   32a62:	6880      	ldr	r0, [r0, #8]
   32a64:	e7f2      	b.n	32a4c <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   32a66:	4618      	mov	r0, r3
}
   32a68:	4770      	bx	lr

00032a6a <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   32a6a:	6d40      	ldr	r0, [r0, #84]	; 0x54
   32a6c:	b160      	cbz	r0, 32a88 <bt_l2cap_le_lookup_rx_cid+0x1e>
   32a6e:	3808      	subs	r0, #8
   32a70:	b900      	cbnz	r0, 32a74 <bt_l2cap_le_lookup_rx_cid+0xa>
   32a72:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   32a74:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   32a78:	428b      	cmp	r3, r1
   32a7a:	d005      	beq.n	32a88 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   32a7c:	f110 0308 	adds.w	r3, r0, #8
   32a80:	d001      	beq.n	32a86 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   32a82:	6880      	ldr	r0, [r0, #8]
   32a84:	e7f2      	b.n	32a6c <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   32a86:	4618      	mov	r0, r3
}
   32a88:	4770      	bx	lr

00032a8a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   32a8a:	4770      	bx	lr

00032a8c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   32a8c:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   32a8e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   32a90:	b128      	cbz	r0, 32a9e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   32a92:	6859      	ldr	r1, [r3, #4]
   32a94:	6802      	ldr	r2, [r0, #0]
   32a96:	4288      	cmp	r0, r1
	list->head = node;
   32a98:	601a      	str	r2, [r3, #0]
	list->tail = node;
   32a9a:	bf08      	it	eq
   32a9c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   32a9e:	4770      	bx	lr

00032aa0 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   32aa0:	2200      	movs	r2, #0
   32aa2:	4603      	mov	r3, r0
   32aa4:	6800      	ldr	r0, [r0, #0]
   32aa6:	b900      	cbnz	r0, 32aaa <sys_slist_find_and_remove+0xa>
   32aa8:	4770      	bx	lr
   32aaa:	4288      	cmp	r0, r1
   32aac:	d110      	bne.n	32ad0 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   32aae:	6808      	ldr	r0, [r1, #0]
   32ab0:	b942      	cbnz	r2, 32ac4 <sys_slist_find_and_remove+0x24>
   32ab2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   32ab4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   32ab6:	4291      	cmp	r1, r2
   32ab8:	d100      	bne.n	32abc <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   32aba:	6058      	str	r0, [r3, #4]
	parent->next = child;
   32abc:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   32abe:	2001      	movs	r0, #1
	parent->next = child;
   32ac0:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   32ac2:	4770      	bx	lr
	parent->next = child;
   32ac4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   32ac6:	6858      	ldr	r0, [r3, #4]
   32ac8:	4281      	cmp	r1, r0
	list->tail = node;
   32aca:	bf08      	it	eq
   32acc:	605a      	streq	r2, [r3, #4]
}
   32ace:	e7f5      	b.n	32abc <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   32ad0:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   32ad2:	6800      	ldr	r0, [r0, #0]
   32ad4:	e7e7      	b.n	32aa6 <sys_slist_find_and_remove+0x6>

00032ad6 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   32ad6:	4603      	mov	r3, r0
	size_t bytes = 0;
   32ad8:	2000      	movs	r0, #0

	while (buf) {
   32ada:	b903      	cbnz	r3, 32ade <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   32adc:	4770      	bx	lr
		bytes += buf->len;
   32ade:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   32ae0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   32ae2:	4410      	add	r0, r2
		buf = buf->frags;
   32ae4:	e7f9      	b.n	32ada <net_buf_frags_len+0x4>

00032ae6 <att_sent>:
	if (chan->ops->sent) {
   32ae6:	684b      	ldr	r3, [r1, #4]
{
   32ae8:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   32aea:	695b      	ldr	r3, [r3, #20]
   32aec:	b103      	cbz	r3, 32af0 <att_sent+0xa>
		chan->ops->sent(chan);
   32aee:	4718      	bx	r3
}
   32af0:	4770      	bx	lr

00032af2 <attr_read_type_cb>:
{
   32af2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   32af4:	68d4      	ldr	r4, [r2, #12]
   32af6:	3102      	adds	r1, #2
   32af8:	7823      	ldrb	r3, [r4, #0]
   32afa:	b913      	cbnz	r3, 32b02 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   32afc:	7021      	strb	r1, [r4, #0]
	return true;
   32afe:	2001      	movs	r0, #1
   32b00:	e006      	b.n	32b10 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   32b02:	428b      	cmp	r3, r1
   32b04:	d0fb      	beq.n	32afe <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   32b06:	8983      	ldrh	r3, [r0, #12]
   32b08:	3b02      	subs	r3, #2
   32b0a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   32b0c:	2000      	movs	r0, #0
   32b0e:	6110      	str	r0, [r2, #16]
}
   32b10:	bd10      	pop	{r4, pc}

00032b12 <att_prepare_write_req>:
}
   32b12:	2006      	movs	r0, #6
   32b14:	4770      	bx	lr

00032b16 <att_op_get_type>:
	switch (op) {
   32b16:	281e      	cmp	r0, #30
   32b18:	d816      	bhi.n	32b48 <att_op_get_type+0x32>
   32b1a:	b308      	cbz	r0, 32b60 <att_op_get_type+0x4a>
   32b1c:	1e43      	subs	r3, r0, #1
   32b1e:	2b1d      	cmp	r3, #29
   32b20:	d81e      	bhi.n	32b60 <att_op_get_type+0x4a>
   32b22:	e8df f003 	tbb	[pc, r3]
   32b26:	2317      	.short	0x2317
   32b28:	23172317 	.word	0x23172317
   32b2c:	23172317 	.word	0x23172317
   32b30:	23172317 	.word	0x23172317
   32b34:	23172317 	.word	0x23172317
   32b38:	231d1d17 	.word	0x231d1d17
   32b3c:	1d172317 	.word	0x1d172317
   32b40:	0f1b1d19 	.word	0x0f1b1d19
   32b44:	2004      	movs	r0, #4
   32b46:	4770      	bx	lr
   32b48:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   32b4c:	2b52      	cmp	r3, #82	; 0x52
   32b4e:	d107      	bne.n	32b60 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   32b50:	2000      	movs	r0, #0
}
   32b52:	4770      	bx	lr
		return ATT_RESPONSE;
   32b54:	2002      	movs	r0, #2
   32b56:	4770      	bx	lr
		return ATT_NOTIFICATION;
   32b58:	2003      	movs	r0, #3
   32b5a:	4770      	bx	lr
		return ATT_INDICATION;
   32b5c:	2005      	movs	r0, #5
   32b5e:	4770      	bx	lr
		return ATT_COMMAND;
   32b60:	f010 0f40 	tst.w	r0, #64	; 0x40
   32b64:	bf0c      	ite	eq
   32b66:	2006      	moveq	r0, #6
   32b68:	2000      	movne	r0, #0
   32b6a:	4770      	bx	lr
		return ATT_REQUEST;
   32b6c:	2001      	movs	r0, #1
   32b6e:	4770      	bx	lr

00032b70 <att_notify_mult>:
{
   32b70:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   32b72:	6803      	ldr	r3, [r0, #0]
   32b74:	898a      	ldrh	r2, [r1, #12]
   32b76:	6818      	ldr	r0, [r3, #0]
   32b78:	6889      	ldr	r1, [r1, #8]
   32b7a:	f7ea ffb5 	bl	1dae8 <bt_gatt_mult_notification>
}
   32b7e:	2000      	movs	r0, #0
   32b80:	bd08      	pop	{r3, pc}

00032b82 <att_notify>:
{
   32b82:	b538      	push	{r3, r4, r5, lr}
   32b84:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   32b86:	f101 0008 	add.w	r0, r1, #8
   32b8a:	460c      	mov	r4, r1
   32b8c:	f000 fdae 	bl	336ec <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   32b90:	682d      	ldr	r5, [r5, #0]
   32b92:	4601      	mov	r1, r0
   32b94:	89a3      	ldrh	r3, [r4, #12]
   32b96:	6828      	ldr	r0, [r5, #0]
   32b98:	68a2      	ldr	r2, [r4, #8]
   32b9a:	f000 fd17 	bl	335cc <bt_gatt_notification>
}
   32b9e:	2000      	movs	r0, #0
   32ba0:	bd38      	pop	{r3, r4, r5, pc}

00032ba2 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   32ba2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   32ba4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   32ba8:	2300      	movs	r3, #0
   32baa:	461a      	mov	r2, r3
   32bac:	9300      	str	r3, [sp, #0]
   32bae:	f7ea fb9b 	bl	1d2e8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   32bb2:	b005      	add	sp, #20
   32bb4:	f85d fb04 	ldr.w	pc, [sp], #4

00032bb8 <att_chan_read>:
{
   32bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32bbc:	4680      	mov	r8, r0
   32bbe:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   32bc0:	4610      	mov	r0, r2
{
   32bc2:	4699      	mov	r9, r3
   32bc4:	468b      	mov	fp, r1
   32bc6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   32bc8:	f7ff ff85 	bl	32ad6 <net_buf_frags_len>
   32bcc:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   32bd0:	4283      	cmp	r3, r0
   32bd2:	d97a      	bls.n	32cca <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   32bd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   32bd8:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   32bda:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   32bdc:	f7eb fac4 	bl	1e168 <net_buf_frag_last>
	size_t len, total = 0;
   32be0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   32be4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   32be6:	4630      	mov	r0, r6
   32be8:	f7ff ff75 	bl	32ad6 <net_buf_frags_len>
   32bec:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   32bf0:	f105 0708 	add.w	r7, r5, #8
   32bf4:	1a24      	subs	r4, r4, r0
   32bf6:	4638      	mov	r0, r7
   32bf8:	f000 fd84 	bl	33704 <net_buf_simple_tailroom>
   32bfc:	4284      	cmp	r4, r0
   32bfe:	d211      	bcs.n	32c24 <att_chan_read+0x6c>
   32c00:	4630      	mov	r0, r6
   32c02:	f7ff ff68 	bl	32ad6 <net_buf_frags_len>
   32c06:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   32c0a:	1a24      	subs	r4, r4, r0
		if (!len) {
   32c0c:	bb34      	cbnz	r4, 32c5c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   32c0e:	79b0      	ldrb	r0, [r6, #6]
   32c10:	f7eb f8aa 	bl	1dd68 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   32c14:	2200      	movs	r2, #0
   32c16:	2300      	movs	r3, #0
   32c18:	f000 fd55 	bl	336c6 <net_buf_alloc_fixed>
			if (!frag) {
   32c1c:	4605      	mov	r5, r0
   32c1e:	b930      	cbnz	r0, 32c2e <att_chan_read+0x76>
	return total;
   32c20:	4657      	mov	r7, sl
   32c22:	e02c      	b.n	32c7e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   32c24:	4638      	mov	r0, r7
   32c26:	f000 fd6d 	bl	33704 <net_buf_simple_tailroom>
   32c2a:	4604      	mov	r4, r0
   32c2c:	e7ee      	b.n	32c0c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   32c2e:	4601      	mov	r1, r0
   32c30:	4630      	mov	r0, r6
   32c32:	f7eb fae1 	bl	1e1f8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   32c36:	4630      	mov	r0, r6
   32c38:	f7ff ff4d 	bl	32ad6 <net_buf_frags_len>
   32c3c:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   32c40:	f105 0708 	add.w	r7, r5, #8
   32c44:	1a24      	subs	r4, r4, r0
   32c46:	4638      	mov	r0, r7
   32c48:	f000 fd5c 	bl	33704 <net_buf_simple_tailroom>
   32c4c:	4284      	cmp	r4, r0
   32c4e:	d21a      	bcs.n	32c86 <att_chan_read+0xce>
   32c50:	4630      	mov	r0, r6
   32c52:	f7ff ff40 	bl	32ad6 <net_buf_frags_len>
   32c56:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   32c5a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   32c5c:	68a9      	ldr	r1, [r5, #8]
   32c5e:	89aa      	ldrh	r2, [r5, #12]
   32c60:	f8db 7004 	ldr.w	r7, [fp, #4]
   32c64:	440a      	add	r2, r1
   32c66:	9803      	ldr	r0, [sp, #12]
   32c68:	4659      	mov	r1, fp
   32c6a:	f8cd 9000 	str.w	r9, [sp]
   32c6e:	b2a3      	uxth	r3, r4
   32c70:	47b8      	blx	r7
		if (read < 0) {
   32c72:	1e07      	subs	r7, r0, #0
   32c74:	da0c      	bge.n	32c90 <att_chan_read+0xd8>
				return total;
   32c76:	f1ba 0f00 	cmp.w	sl, #0
   32c7a:	bf18      	it	ne
   32c7c:	4657      	movne	r7, sl
}
   32c7e:	4638      	mov	r0, r7
   32c80:	b005      	add	sp, #20
   32c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32c86:	4638      	mov	r0, r7
   32c88:	f000 fd3c 	bl	33704 <net_buf_simple_tailroom>
   32c8c:	4604      	mov	r4, r0
   32c8e:	e7e5      	b.n	32c5c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   32c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   32c92:	b993      	cbnz	r3, 32cba <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   32c94:	4639      	mov	r1, r7
   32c96:	f105 0008 	add.w	r0, r5, #8
   32c9a:	f7eb fb35 	bl	1e308 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   32c9e:	4630      	mov	r0, r6
   32ca0:	f7ff ff19 	bl	32ad6 <net_buf_frags_len>
   32ca4:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   32ca8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   32caa:	4283      	cmp	r3, r0
		total += read;
   32cac:	44ba      	add	sl, r7
		offset += read;
   32cae:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   32cb2:	d9b5      	bls.n	32c20 <att_chan_read+0x68>
   32cb4:	42a7      	cmp	r7, r4
   32cb6:	d096      	beq.n	32be6 <att_chan_read+0x2e>
   32cb8:	e7b2      	b.n	32c20 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   32cba:	4639      	mov	r1, r7
   32cbc:	4628      	mov	r0, r5
   32cbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   32cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   32cc2:	4798      	blx	r3
   32cc4:	2800      	cmp	r0, #0
   32cc6:	d1e5      	bne.n	32c94 <att_chan_read+0xdc>
   32cc8:	e7aa      	b.n	32c20 <att_chan_read+0x68>
		return 0;
   32cca:	2700      	movs	r7, #0
   32ccc:	e7d7      	b.n	32c7e <att_chan_read+0xc6>

00032cce <attr_read_group_cb>:
	if (!data->rsp->len) {
   32cce:	68d0      	ldr	r0, [r2, #12]
   32cd0:	3104      	adds	r1, #4
   32cd2:	7803      	ldrb	r3, [r0, #0]
   32cd4:	b913      	cbnz	r3, 32cdc <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   32cd6:	7001      	strb	r1, [r0, #0]
	return true;
   32cd8:	2001      	movs	r0, #1
}
   32cda:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   32cdc:	428b      	cmp	r3, r1
   32cde:	d0fb      	beq.n	32cd8 <attr_read_group_cb+0xa>
		data->group = NULL;
   32ce0:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   32ce2:	6891      	ldr	r1, [r2, #8]
   32ce4:	898b      	ldrh	r3, [r1, #12]
   32ce6:	3b04      	subs	r3, #4
   32ce8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   32cea:	6110      	str	r0, [r2, #16]
		return false;
   32cec:	4770      	bx	lr

00032cee <chan_req_send>:
{
   32cee:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   32cf0:	688e      	ldr	r6, [r1, #8]
{
   32cf2:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   32cf4:	4630      	mov	r0, r6
{
   32cf6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   32cf8:	f7ff feed 	bl	32ad6 <net_buf_frags_len>
   32cfc:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   32d00:	4283      	cmp	r3, r0
   32d02:	d30a      	bcc.n	32d1a <chan_req_send+0x2c>
	req->buf = NULL;
   32d04:	2200      	movs	r2, #0
	chan->req = req;
   32d06:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   32d0a:	4628      	mov	r0, r5
	req->buf = NULL;
   32d0c:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   32d0e:	4631      	mov	r1, r6
   32d10:	f7e9 f8ba 	bl	1be88 <chan_send>
	if (err) {
   32d14:	b100      	cbz	r0, 32d18 <chan_req_send+0x2a>
		req->buf = buf;
   32d16:	60a6      	str	r6, [r4, #8]
}
   32d18:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   32d1a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   32d1e:	e7fb      	b.n	32d18 <chan_req_send+0x2a>

00032d20 <process_queue>:
{
   32d20:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   32d22:	2200      	movs	r2, #0
{
   32d24:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   32d26:	2300      	movs	r3, #0
   32d28:	4608      	mov	r0, r1
{
   32d2a:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   32d2c:	f7eb f92a 	bl	1df84 <net_buf_get>
	if (buf) {
   32d30:	4605      	mov	r5, r0
   32d32:	b160      	cbz	r0, 32d4e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   32d34:	4601      	mov	r1, r0
   32d36:	2200      	movs	r2, #0
   32d38:	4620      	mov	r0, r4
   32d3a:	f7e9 f8a5 	bl	1be88 <chan_send>
		if (err) {
   32d3e:	4604      	mov	r4, r0
   32d40:	b118      	cbz	r0, 32d4a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   32d42:	4629      	mov	r1, r5
   32d44:	4630      	mov	r0, r6
   32d46:	f004 fba1 	bl	3748c <k_queue_prepend>
}
   32d4a:	4620      	mov	r0, r4
   32d4c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   32d4e:	f06f 0401 	mvn.w	r4, #1
   32d52:	e7fa      	b.n	32d4a <process_queue+0x2a>

00032d54 <bt_att_chan_send_rsp>:
{
   32d54:	b538      	push	{r3, r4, r5, lr}
   32d56:	4604      	mov	r4, r0
   32d58:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   32d5a:	f7e9 f895 	bl	1be88 <chan_send>
	if (err) {
   32d5e:	b130      	cbz	r0, 32d6e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   32d60:	4629      	mov	r1, r5
   32d62:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   32d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   32d6a:	f7eb b969 	b.w	1e040 <net_buf_put>
}
   32d6e:	bd38      	pop	{r3, r4, r5, pc}

00032d70 <chan_req_sent>:
	if (chan->req) {
   32d70:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   32d74:	b133      	cbz	r3, 32d84 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   32d76:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   32d7a:	2300      	movs	r3, #0
   32d7c:	f500 7090 	add.w	r0, r0, #288	; 0x120
   32d80:	f7f8 bf3a 	b.w	2bbf8 <k_work_reschedule>
}
   32d84:	4770      	bx	lr

00032d86 <find_info_cb>:
{
   32d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   32d88:	6893      	ldr	r3, [r2, #8]
{
   32d8a:	4605      	mov	r5, r0
   32d8c:	460f      	mov	r7, r1
   32d8e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   32d90:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   32d92:	b963      	cbnz	r3, 32dae <find_info_cb+0x28>
   32d94:	6850      	ldr	r0, [r2, #4]
   32d96:	2101      	movs	r1, #1
   32d98:	3008      	adds	r0, #8
   32d9a:	f7eb fab5 	bl	1e308 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   32d9e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   32da0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   32da2:	781b      	ldrb	r3, [r3, #0]
   32da4:	2b00      	cmp	r3, #0
   32da6:	bf0c      	ite	eq
   32da8:	2301      	moveq	r3, #1
   32daa:	2302      	movne	r3, #2
   32dac:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   32dae:	68a3      	ldr	r3, [r4, #8]
   32db0:	781b      	ldrb	r3, [r3, #0]
   32db2:	2b01      	cmp	r3, #1
   32db4:	d003      	beq.n	32dbe <find_info_cb+0x38>
   32db6:	2b02      	cmp	r3, #2
   32db8:	d019      	beq.n	32dee <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   32dba:	2000      	movs	r0, #0
   32dbc:	e016      	b.n	32dec <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   32dbe:	682b      	ldr	r3, [r5, #0]
   32dc0:	781b      	ldrb	r3, [r3, #0]
   32dc2:	2b00      	cmp	r3, #0
   32dc4:	d1f9      	bne.n	32dba <find_info_cb+0x34>
   32dc6:	6860      	ldr	r0, [r4, #4]
   32dc8:	2104      	movs	r1, #4
   32dca:	3008      	adds	r0, #8
   32dcc:	f7eb fa9c 	bl	1e308 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   32dd0:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   32dd2:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   32dd4:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   32dd6:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   32dd8:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   32dda:	6863      	ldr	r3, [r4, #4]
   32ddc:	f8b6 0086 	ldrh.w	r0, [r6, #134]	; 0x86
   32de0:	899b      	ldrh	r3, [r3, #12]
   32de2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   32de4:	2804      	cmp	r0, #4
   32de6:	bf94      	ite	ls
   32de8:	2000      	movls	r0, #0
   32dea:	2001      	movhi	r0, #1
}
   32dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   32dee:	682b      	ldr	r3, [r5, #0]
   32df0:	781b      	ldrb	r3, [r3, #0]
   32df2:	2b02      	cmp	r3, #2
   32df4:	d1e1      	bne.n	32dba <find_info_cb+0x34>
   32df6:	6860      	ldr	r0, [r4, #4]
   32df8:	2112      	movs	r1, #18
   32dfa:	3008      	adds	r0, #8
   32dfc:	f7eb fa84 	bl	1e308 <net_buf_simple_add>
   32e00:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32e02:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   32e04:	60e0      	str	r0, [r4, #12]
   32e06:	1c51      	adds	r1, r2, #1
		data->info128->handle = sys_cpu_to_le16(handle);
   32e08:	f823 7b02 	strh.w	r7, [r3], #2
   32e0c:	3211      	adds	r2, #17
   32e0e:	f851 0b04 	ldr.w	r0, [r1], #4
   32e12:	4291      	cmp	r1, r2
   32e14:	f843 0b04 	str.w	r0, [r3], #4
   32e18:	d1f9      	bne.n	32e0e <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   32e1a:	6863      	ldr	r3, [r4, #4]
   32e1c:	f8b6 0086 	ldrh.w	r0, [r6, #134]	; 0x86
   32e20:	899b      	ldrh	r3, [r3, #12]
   32e22:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   32e24:	2812      	cmp	r0, #18
   32e26:	e7de      	b.n	32de6 <find_info_cb+0x60>

00032e28 <att_exec_write_req>:
   32e28:	2006      	movs	r0, #6
   32e2a:	4770      	bx	lr

00032e2c <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   32e2c:	30f8      	adds	r0, #248	; 0xf8
   32e2e:	e8d0 3fef 	ldaex	r3, [r0]
   32e32:	f023 0301 	bic.w	r3, r3, #1
   32e36:	e8c0 3fe2 	stlex	r2, r3, [r0]
   32e3a:	2a00      	cmp	r2, #0
   32e3c:	d1f7      	bne.n	32e2e <chan_rsp_sent+0x2>
}
   32e3e:	4770      	bx	lr

00032e40 <chan_cfm_sent>:
   32e40:	30f8      	adds	r0, #248	; 0xf8
   32e42:	e8d0 3fef 	ldaex	r3, [r0]
   32e46:	f023 0302 	bic.w	r3, r3, #2
   32e4a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   32e4e:	2a00      	cmp	r2, #0
   32e50:	d1f7      	bne.n	32e42 <chan_cfm_sent+0x2>
}
   32e52:	4770      	bx	lr

00032e54 <bt_att_status>:
{
   32e54:	b538      	push	{r3, r4, r5, lr}
   32e56:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   32e58:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   32e5c:	07db      	lsls	r3, r3, #31
   32e5e:	d519      	bpl.n	32e94 <bt_att_status+0x40>
	if (!chan->att) {
   32e60:	f850 0c08 	ldr.w	r0, [r0, #-8]
   32e64:	b1b0      	cbz	r0, 32e94 <bt_att_status+0x40>
	if (chan->req) {
   32e66:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   32e6a:	b99b      	cbnz	r3, 32e94 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   32e6c:	3004      	adds	r0, #4
   32e6e:	f7ff fe0d 	bl	32a8c <sys_slist_get>
	if (!node) {
   32e72:	4604      	mov	r4, r0
   32e74:	b170      	cbz	r0, 32e94 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   32e76:	4601      	mov	r1, r0
   32e78:	f1a5 0008 	sub.w	r0, r5, #8
   32e7c:	f7e9 f872 	bl	1bf64 <bt_att_chan_req_send>
   32e80:	2800      	cmp	r0, #0
   32e82:	da07      	bge.n	32e94 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   32e84:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   32e88:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   32e8a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   32e8c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   32e8e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   32e90:	b902      	cbnz	r2, 32e94 <bt_att_status+0x40>
	list->tail = node;
   32e92:	609c      	str	r4, [r3, #8]
}
   32e94:	bd38      	pop	{r3, r4, r5, pc}

00032e96 <att_req_send_process>:
{
   32e96:	b570      	push	{r4, r5, r6, lr}
   32e98:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   32e9a:	3004      	adds	r0, #4
   32e9c:	f7ff fdf6 	bl	32a8c <sys_slist_get>
	if (!node) {
   32ea0:	4606      	mov	r6, r0
   32ea2:	b1c0      	cbz	r0, 32ed6 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   32ea4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   32ea6:	b153      	cbz	r3, 32ebe <att_req_send_process+0x28>
   32ea8:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   32eac:	d007      	beq.n	32ebe <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   32eae:	681c      	ldr	r4, [r3, #0]
   32eb0:	b10c      	cbz	r4, 32eb6 <att_req_send_process+0x20>
   32eb2:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   32eb6:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   32eba:	b13b      	cbz	r3, 32ecc <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   32ebc:	b964      	cbnz	r4, 32ed8 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   32ebe:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   32ec0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   32ec2:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   32ec4:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   32ec6:	b933      	cbnz	r3, 32ed6 <att_req_send_process+0x40>
	list->tail = node;
   32ec8:	60ae      	str	r6, [r5, #8]
}
   32eca:	e004      	b.n	32ed6 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   32ecc:	4631      	mov	r1, r6
   32ece:	f7e9 f849 	bl	1bf64 <bt_att_chan_req_send>
   32ed2:	2800      	cmp	r0, #0
   32ed4:	dbf2      	blt.n	32ebc <att_req_send_process+0x26>
}
   32ed6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   32ed8:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   32edc:	d004      	beq.n	32ee8 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   32ede:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   32ee2:	b10b      	cbz	r3, 32ee8 <att_req_send_process+0x52>
   32ee4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   32ee8:	4620      	mov	r0, r4
   32eea:	461c      	mov	r4, r3
   32eec:	e7e3      	b.n	32eb6 <att_req_send_process+0x20>

00032eee <write_cb>:
{
   32eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32ef0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   32ef2:	4601      	mov	r1, r0
{
   32ef4:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   32ef6:	222a      	movs	r2, #42	; 0x2a
   32ef8:	6820      	ldr	r0, [r4, #0]
   32efa:	f000 fb44 	bl	33586 <bt_gatt_check_perm>
   32efe:	4605      	mov	r5, r0
   32f00:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   32f02:	bb00      	cbnz	r0, 32f46 <write_cb+0x58>
	if (!data->req) {
   32f04:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   32f06:	4631      	mov	r1, r6
	if (!data->req) {
   32f08:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   32f0a:	bf14      	ite	ne
   32f0c:	2300      	movne	r3, #0
   32f0e:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   32f10:	9301      	str	r3, [sp, #4]
   32f12:	8a63      	ldrh	r3, [r4, #18]
   32f14:	68b7      	ldr	r7, [r6, #8]
   32f16:	9300      	str	r3, [sp, #0]
   32f18:	68e2      	ldr	r2, [r4, #12]
   32f1a:	8a23      	ldrh	r3, [r4, #16]
   32f1c:	6820      	ldr	r0, [r4, #0]
   32f1e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   32f20:	1e03      	subs	r3, r0, #0
   32f22:	db05      	blt.n	32f30 <write_cb+0x42>
   32f24:	8a22      	ldrh	r2, [r4, #16]
   32f26:	4293      	cmp	r3, r2
   32f28:	d10b      	bne.n	32f42 <write_cb+0x54>
	data->err = 0U;
   32f2a:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   32f2c:	2501      	movs	r5, #1
   32f2e:	e005      	b.n	32f3c <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   32f30:	f113 0fff 	cmn.w	r3, #255	; 0xff
   32f34:	d305      	bcc.n	32f42 <write_cb+0x54>
		return -err;
   32f36:	425b      	negs	r3, r3
   32f38:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   32f3a:	7523      	strb	r3, [r4, #20]
}
   32f3c:	4628      	mov	r0, r5
   32f3e:	b003      	add	sp, #12
   32f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   32f42:	230e      	movs	r3, #14
   32f44:	e7f9      	b.n	32f3a <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   32f46:	2500      	movs	r5, #0
   32f48:	e7f8      	b.n	32f3c <write_cb+0x4e>

00032f4a <bt_att_sent>:
{
   32f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   32f4c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
   32f50:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   32f52:	f850 4c08 	ldr.w	r4, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   32f56:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   32f5a:	b10b      	cbz	r3, 32f60 <bt_att_sent+0x16>
		chan->sent(chan);
   32f5c:	4638      	mov	r0, r7
   32f5e:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   32f60:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   32f64:	e8d3 2fef 	ldaex	r2, [r3]
   32f68:	f022 0210 	bic.w	r2, r2, #16
   32f6c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   32f70:	2900      	cmp	r1, #0
   32f72:	d1f7      	bne.n	32f64 <bt_att_sent+0x1a>
	if (!att) {
   32f74:	b30c      	cbz	r4, 32fba <bt_att_sent+0x70>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   32f76:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   32f7a:	b98b      	cbnz	r3, 32fa0 <bt_att_sent+0x56>
   32f7c:	6863      	ldr	r3, [r4, #4]
   32f7e:	b17b      	cbz	r3, 32fa0 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   32f80:	1d20      	adds	r0, r4, #4
   32f82:	f7ff fd83 	bl	32a8c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   32f86:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   32f88:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   32f8a:	4638      	mov	r0, r7
   32f8c:	f7ff feaf 	bl	32cee <chan_req_send>
   32f90:	2800      	cmp	r0, #0
   32f92:	da12      	bge.n	32fba <bt_att_sent+0x70>
Z_GENLIST_PREPEND(slist, snode)
   32f94:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   32f96:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   32f98:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   32f9a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   32f9c:	b903      	cbnz	r3, 32fa0 <bt_att_sent+0x56>
	list->tail = node;
   32f9e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   32fa0:	4638      	mov	r0, r7
   32fa2:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   32fa6:	f7ff febb 	bl	32d20 <process_queue>
	if (!err) {
   32faa:	b130      	cbz	r0, 32fba <bt_att_sent+0x70>
	(void)process_queue(chan, &att->tx_queue);
   32fac:	4638      	mov	r0, r7
   32fae:	f104 010c 	add.w	r1, r4, #12
}
   32fb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   32fb6:	f7ff beb3 	b.w	32d20 <process_queue>
}
   32fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00032fbc <read_cb>:
{
   32fbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   32fc0:	4606      	mov	r6, r0
	data->err = 0x00;
   32fc2:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   32fc4:	f8d2 8000 	ldr.w	r8, [r2]
{
   32fc8:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   32fca:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   32fce:	4631      	mov	r1, r6
	data->err = 0x00;
   32fd0:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   32fd2:	2215      	movs	r2, #21
   32fd4:	f000 fad7 	bl	33586 <bt_gatt_check_perm>
   32fd8:	4604      	mov	r4, r0
   32fda:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   32fdc:	b9a0      	cbnz	r0, 33008 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   32fde:	e9cd 0000 	strd	r0, r0, [sp]
   32fe2:	88ab      	ldrh	r3, [r5, #4]
   32fe4:	4631      	mov	r1, r6
   32fe6:	4640      	mov	r0, r8
   32fe8:	68aa      	ldr	r2, [r5, #8]
   32fea:	f7ff fde5 	bl	32bb8 <att_chan_read>
	if (ret < 0) {
   32fee:	1e03      	subs	r3, r0, #0
   32ff0:	da0c      	bge.n	3300c <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   32ff2:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   32ff6:	bf32      	itee	cc
   32ff8:	230e      	movcc	r3, #14
		return -err;
   32ffa:	425b      	negcs	r3, r3
   32ffc:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   32ffe:	732b      	strb	r3, [r5, #12]
}
   33000:	4620      	mov	r0, r4
   33002:	b002      	add	sp, #8
   33004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   33008:	463c      	mov	r4, r7
   3300a:	e7f9      	b.n	33000 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   3300c:	2401      	movs	r4, #1
   3300e:	e7f7      	b.n	33000 <read_cb+0x44>

00033010 <att_read_blob_req>:
{
   33010:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   33012:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   33014:	210c      	movs	r1, #12
   33016:	8813      	ldrh	r3, [r2, #0]
   33018:	8852      	ldrh	r2, [r2, #2]
   3301a:	9200      	str	r2, [sp, #0]
   3301c:	220d      	movs	r2, #13
   3301e:	f7e9 fb9d 	bl	1c75c <att_read_rsp>
}
   33022:	b003      	add	sp, #12
   33024:	f85d fb04 	ldr.w	pc, [sp], #4

00033028 <att_read_req>:
{
   33028:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   3302a:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   3302c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   3302e:	210a      	movs	r1, #10
   33030:	881b      	ldrh	r3, [r3, #0]
   33032:	9200      	str	r2, [sp, #0]
   33034:	220b      	movs	r2, #11
   33036:	f7e9 fb91 	bl	1c75c <att_read_rsp>
}
   3303a:	b003      	add	sp, #12
   3303c:	f85d fb04 	ldr.w	pc, [sp], #4

00033040 <bt_att_init>:
	bt_gatt_init();
   33040:	f7ea b8a6 	b.w	1d190 <bt_gatt_init>

00033044 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   33044:	898a      	ldrh	r2, [r1, #12]
   33046:	2300      	movs	r3, #0
   33048:	6889      	ldr	r1, [r1, #8]
   3304a:	f7e9 bd37 	b.w	1cabc <att_handle_rsp>

0003304e <att_handle_find_type_rsp>:
   3304e:	f7ff bff9 	b.w	33044 <att_handle_find_info_rsp>

00033052 <att_handle_read_type_rsp>:
   33052:	f7ff bff7 	b.w	33044 <att_handle_find_info_rsp>

00033056 <att_handle_read_rsp>:
   33056:	f7ff bff5 	b.w	33044 <att_handle_find_info_rsp>

0003305a <att_handle_read_blob_rsp>:
   3305a:	f7ff bff3 	b.w	33044 <att_handle_find_info_rsp>

0003305e <att_handle_read_mult_rsp>:
   3305e:	f7ff bff1 	b.w	33044 <att_handle_find_info_rsp>

00033062 <att_handle_read_group_rsp>:
   33062:	f7ff bfef 	b.w	33044 <att_handle_find_info_rsp>

00033066 <att_handle_write_rsp>:
   33066:	f7ff bfed 	b.w	33044 <att_handle_find_info_rsp>

0003306a <att_handle_prepare_write_rsp>:
   3306a:	f7ff bfeb 	b.w	33044 <att_handle_find_info_rsp>

0003306e <att_handle_exec_write_rsp>:
   3306e:	f7ff bfe9 	b.w	33044 <att_handle_find_info_rsp>

00033072 <att_confirm>:
   33072:	f7ff bfe7 	b.w	33044 <att_handle_find_info_rsp>

00033076 <att_mtu_rsp>:
{
   33076:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   33078:	6889      	ldr	r1, [r1, #8]
{
   3307a:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   3307c:	880c      	ldrh	r4, [r1, #0]
{
   3307e:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   33080:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   33082:	bf89      	itett	hi
   33084:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   33086:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   33088:	f8a3 407a 	strhhi.w	r4, [r3, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   3308c:	f8a3 4086 	strhhi.w	r4, [r3, #134]	; 0x86
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   33090:	bf99      	ittee	ls
   33092:	2304      	movls	r3, #4
   33094:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   33096:	2300      	movhi	r3, #0
   33098:	8992      	ldrhhi	r2, [r2, #12]
}
   3309a:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   3309c:	f7e9 bd0e 	b.w	1cabc <att_handle_rsp>

000330a0 <gatt_ccc_changed>:
{
   330a0:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   330a2:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   330a4:	895a      	ldrh	r2, [r3, #10]
   330a6:	428a      	cmp	r2, r1
   330a8:	d003      	beq.n	330b2 <gatt_ccc_changed+0x12>
		ccc->value = value;
   330aa:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   330ac:	68db      	ldr	r3, [r3, #12]
   330ae:	b103      	cbz	r3, 330b2 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   330b0:	4718      	bx	r3
}
   330b2:	4770      	bx	lr

000330b4 <gatt_indicate_rsp>:
{
   330b4:	b510      	push	{r4, lr}
   330b6:	9c02      	ldr	r4, [sp, #8]
   330b8:	460a      	mov	r2, r1
	if (params->func) {
   330ba:	68a3      	ldr	r3, [r4, #8]
   330bc:	b10b      	cbz	r3, 330c2 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   330be:	4621      	mov	r1, r4
   330c0:	4798      	blx	r3
	params->_ref--;
   330c2:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   330c4:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   330c6:	3b01      	subs	r3, #1
   330c8:	b2db      	uxtb	r3, r3
   330ca:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   330cc:	b122      	cbz	r2, 330d8 <gatt_indicate_rsp+0x24>
   330ce:	b91b      	cbnz	r3, 330d8 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   330d0:	4620      	mov	r0, r4
}
   330d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   330d6:	4710      	bx	r2
}
   330d8:	bd10      	pop	{r4, pc}

000330da <match_uuid>:
	data->attr = attr;
   330da:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   330dc:	8091      	strh	r1, [r2, #4]
}
   330de:	2000      	movs	r0, #0
   330e0:	4770      	bx	lr

000330e2 <ccc_set_cb>:
}
   330e2:	2000      	movs	r0, #0
   330e4:	4770      	bx	lr

000330e6 <gen_hash_m>:
{
   330e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   330e8:	6807      	ldr	r7, [r0, #0]
{
   330ea:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   330ec:	783d      	ldrb	r5, [r7, #0]
{
   330ee:	4614      	mov	r4, r2
   330f0:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   330f2:	b10d      	cbz	r5, 330f8 <gen_hash_m+0x12>
	switch (u16->val) {
   330f4:	2501      	movs	r5, #1
   330f6:	e014      	b.n	33122 <gen_hash_m+0x3c>
   330f8:	887b      	ldrh	r3, [r7, #2]
   330fa:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   330fe:	d004      	beq.n	3310a <gen_hash_m+0x24>
   33100:	d812      	bhi.n	33128 <gen_hash_m+0x42>
   33102:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   33106:	2b03      	cmp	r3, #3
   33108:	d8f4      	bhi.n	330f4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   3310a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3310e:	2202      	movs	r2, #2
   33110:	4620      	mov	r0, r4
   33112:	f10d 010e 	add.w	r1, sp, #14
   33116:	f7fe fdbf 	bl	31c98 <tc_cmac_update>
   3311a:	b9e0      	cbnz	r0, 33156 <gen_hash_m+0x70>
			state->err = -EINVAL;
   3311c:	f06f 0315 	mvn.w	r3, #21
   33120:	65a3      	str	r3, [r4, #88]	; 0x58
}
   33122:	4628      	mov	r0, r5
   33124:	b009      	add	sp, #36	; 0x24
   33126:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   33128:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   3312c:	33ff      	adds	r3, #255	; 0xff
   3312e:	b29b      	uxth	r3, r3
   33130:	2b04      	cmp	r3, #4
   33132:	d8df      	bhi.n	330f4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   33134:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   33138:	2202      	movs	r2, #2
   3313a:	4620      	mov	r0, r4
   3313c:	f10d 010e 	add.w	r1, sp, #14
   33140:	f7fe fdaa 	bl	31c98 <tc_cmac_update>
   33144:	2800      	cmp	r0, #0
   33146:	d0e9      	beq.n	3311c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   33148:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3314a:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   3314c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   33150:	f10d 010e 	add.w	r1, sp, #14
   33154:	e017      	b.n	33186 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   33156:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   33158:	2202      	movs	r2, #2
   3315a:	4620      	mov	r0, r4
   3315c:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   33160:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   33164:	f7fe fd98 	bl	31c98 <tc_cmac_update>
   33168:	2800      	cmp	r0, #0
   3316a:	d0d7      	beq.n	3311c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   3316c:	2000      	movs	r0, #0
   3316e:	2310      	movs	r3, #16
   33170:	4631      	mov	r1, r6
   33172:	eb0d 0203 	add.w	r2, sp, r3
   33176:	6877      	ldr	r7, [r6, #4]
   33178:	9000      	str	r0, [sp, #0]
   3317a:	47b8      	blx	r7
		if (len < 0) {
   3317c:	1e02      	subs	r2, r0, #0
   3317e:	da01      	bge.n	33184 <gen_hash_m+0x9e>
			state->err = len;
   33180:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   33182:	e7ce      	b.n	33122 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   33184:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   33186:	4620      	mov	r0, r4
   33188:	f7fe fd86 	bl	31c98 <tc_cmac_update>
   3318c:	2800      	cmp	r0, #0
   3318e:	d1b1      	bne.n	330f4 <gen_hash_m+0xe>
   33190:	e7c4      	b.n	3311c <gen_hash_m+0x36>

00033192 <bt_addr_le_cmp>:
   33192:	2207      	movs	r2, #7
   33194:	f004 bae7 	b.w	37766 <memcmp>

00033198 <find_ccc_cfg>:
{
   33198:	b513      	push	{r0, r1, r4, lr}
   3319a:	1c4a      	adds	r2, r1, #1
   3319c:	460c      	mov	r4, r1
		if (conn) {
   3319e:	b140      	cbz	r0, 331b2 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   331a0:	7809      	ldrb	r1, [r1, #0]
   331a2:	f7ff fb46 	bl	32832 <bt_conn_is_peer_addr_le>
   331a6:	2800      	cmp	r0, #0
	return NULL;
   331a8:	bf08      	it	eq
   331aa:	2400      	moveq	r4, #0
}
   331ac:	4620      	mov	r0, r4
   331ae:	b002      	add	sp, #8
   331b0:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   331b2:	9000      	str	r0, [sp, #0]
   331b4:	4669      	mov	r1, sp
   331b6:	f8cd 0003 	str.w	r0, [sp, #3]
   331ba:	4610      	mov	r0, r2
   331bc:	f7ff ffe9 	bl	33192 <bt_addr_le_cmp>
   331c0:	2800      	cmp	r0, #0
	return NULL;
   331c2:	bf18      	it	ne
   331c4:	2400      	movne	r4, #0
   331c6:	e7f1      	b.n	331ac <find_ccc_cfg+0x14>

000331c8 <bt_addr_le_copy>:
   331c8:	680b      	ldr	r3, [r1, #0]
   331ca:	6003      	str	r3, [r0, #0]
   331cc:	888b      	ldrh	r3, [r1, #4]
   331ce:	8083      	strh	r3, [r0, #4]
   331d0:	798b      	ldrb	r3, [r1, #6]
   331d2:	7183      	strb	r3, [r0, #6]
}
   331d4:	4770      	bx	lr

000331d6 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   331d6:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   331d8:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   331da:	3001      	adds	r0, #1
   331dc:	4669      	mov	r1, sp
   331de:	9300      	str	r3, [sp, #0]
   331e0:	f8cd 3003 	str.w	r3, [sp, #3]
   331e4:	f7ff fff0 	bl	331c8 <bt_addr_le_copy>
}
   331e8:	b003      	add	sp, #12
   331ea:	f85d fb04 	ldr.w	pc, [sp], #4

000331ee <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   331ee:	2300      	movs	r3, #0
   331f0:	6003      	str	r3, [r0, #0]
   331f2:	6043      	str	r3, [r0, #4]
   331f4:	6083      	str	r3, [r0, #8]
}
   331f6:	4770      	bx	lr

000331f8 <sc_clear>:
{
   331f8:	b538      	push	{r3, r4, r5, lr}
   331fa:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   331fc:	f100 0590 	add.w	r5, r0, #144	; 0x90
   33200:	4629      	mov	r1, r5
   33202:	7a00      	ldrb	r0, [r0, #8]
   33204:	f7ff fa78 	bl	326f8 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   33208:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   3320a:	7a20      	ldrb	r0, [r4, #8]
   3320c:	f7e9 fe16 	bl	1ce3c <find_sc_cfg>
		if (cfg) {
   33210:	b118      	cbz	r0, 3321a <sc_clear+0x22>
}
   33212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   33216:	f7ff bfea 	b.w	331ee <clear_sc_cfg>
}
   3321a:	bd38      	pop	{r3, r4, r5, pc}

0003321c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   3321c:	2a02      	cmp	r2, #2
{
   3321e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   33220:	d108      	bne.n	33234 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   33222:	2300      	movs	r3, #0
   33224:	f100 0190 	add.w	r1, r0, #144	; 0x90
   33228:	461a      	mov	r2, r3
   3322a:	7a00      	ldrb	r0, [r0, #8]
   3322c:	f7e9 fe9e 	bl	1cf6c <sc_save>
}
   33230:	2002      	movs	r0, #2
   33232:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   33234:	f7ff ffe0 	bl	331f8 <sc_clear>
   33238:	e7fa      	b.n	33230 <sc_ccc_cfg_write+0x14>

0003323a <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   3323a:	b538      	push	{r3, r4, r5, lr}
   3323c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
   33240:	460c      	mov	r4, r1
	if (offset > value_len) {
   33242:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   33244:	4611      	mov	r1, r2
	if (offset > value_len) {
   33246:	d30a      	bcc.n	3325e <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   33248:	1aad      	subs	r5, r5, r2
   3324a:	42a5      	cmp	r5, r4
   3324c:	bfa8      	it	ge
   3324e:	4625      	movge	r5, r4
   33250:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33252:	462a      	mov	r2, r5
   33254:	4419      	add	r1, r3
   33256:	f004 fa94 	bl	37782 <memcpy>
}
   3325a:	4628      	mov	r0, r5
   3325c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3325e:	f06f 0506 	mvn.w	r5, #6
   33262:	e7fa      	b.n	3325a <bt_gatt_attr_read.constprop.0+0x20>

00033264 <bt_gatt_attr_read_ccc>:
{
   33264:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   33266:	68c9      	ldr	r1, [r1, #12]
{
   33268:	b085      	sub	sp, #20
   3326a:	4614      	mov	r4, r2
   3326c:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   3326e:	f7ff ff93 	bl	33198 <find_ccc_cfg>
	if (cfg) {
   33272:	b100      	cbz	r0, 33276 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   33274:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   33276:	2302      	movs	r3, #2
   33278:	f8ad 000e 	strh.w	r0, [sp, #14]
   3327c:	9300      	str	r3, [sp, #0]
   3327e:	4629      	mov	r1, r5
   33280:	4620      	mov	r0, r4
   33282:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   33286:	f10d 030e 	add.w	r3, sp, #14
   3328a:	f7ff ffd6 	bl	3323a <bt_gatt_attr_read.constprop.0>
}
   3328e:	b005      	add	sp, #20
   33290:	bd30      	pop	{r4, r5, pc}

00033292 <bt_gatt_attr_read_service>:
{
   33292:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   33294:	460c      	mov	r4, r1
   33296:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   33298:	68e3      	ldr	r3, [r4, #12]
{
   3329a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   3329c:	781c      	ldrb	r4, [r3, #0]
{
   3329e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   332a2:	b954      	cbnz	r4, 332ba <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   332a4:	885b      	ldrh	r3, [r3, #2]
   332a6:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   332aa:	2302      	movs	r3, #2
   332ac:	9300      	str	r3, [sp, #0]
   332ae:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   332b2:	f7ff ffc2 	bl	3323a <bt_gatt_attr_read.constprop.0>
}
   332b6:	b004      	add	sp, #16
   332b8:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   332ba:	2410      	movs	r4, #16
   332bc:	3301      	adds	r3, #1
   332be:	9400      	str	r4, [sp, #0]
   332c0:	e7f7      	b.n	332b2 <bt_gatt_attr_read_service+0x20>

000332c2 <cf_read>:
{
   332c2:	b530      	push	{r4, r5, lr}
   332c4:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   332c6:	2300      	movs	r3, #0
{
   332c8:	b085      	sub	sp, #20
   332ca:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   332cc:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   332d0:	f7e9 fd96 	bl	1ce00 <find_cf_cfg>
	if (cfg) {
   332d4:	b110      	cbz	r0, 332dc <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   332d6:	7a03      	ldrb	r3, [r0, #8]
   332d8:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   332dc:	2301      	movs	r3, #1
   332de:	4629      	mov	r1, r5
   332e0:	9300      	str	r3, [sp, #0]
   332e2:	4620      	mov	r0, r4
   332e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   332e8:	ab03      	add	r3, sp, #12
   332ea:	f7ff ffa6 	bl	3323a <bt_gatt_attr_read.constprop.0>
}
   332ee:	b005      	add	sp, #20
   332f0:	bd30      	pop	{r4, r5, pc}

000332f2 <read_name>:
{
   332f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   332f6:	4614      	mov	r4, r2
   332f8:	461d      	mov	r5, r3
   332fa:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   332fe:	f7e6 fe7d 	bl	19ffc <bt_get_name>
   33302:	4606      	mov	r6, r0
				 strlen(name));
   33304:	f7de f8fc 	bl	11500 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   33308:	b280      	uxth	r0, r0
   3330a:	9006      	str	r0, [sp, #24]
   3330c:	4633      	mov	r3, r6
   3330e:	463a      	mov	r2, r7
   33310:	4629      	mov	r1, r5
   33312:	4620      	mov	r0, r4
}
   33314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   33318:	f7ff bf8f 	b.w	3323a <bt_gatt_attr_read.constprop.0>

0003331c <read_appearance>:
{
   3331c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3331e:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   33320:	2300      	movs	r3, #0
   33322:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   33326:	2302      	movs	r3, #2
{
   33328:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   3332a:	9300      	str	r3, [sp, #0]
   3332c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   33330:	f10d 030e 	add.w	r3, sp, #14
   33334:	f7ff ff81 	bl	3323a <bt_gatt_attr_read.constprop.0>
}
   33338:	b005      	add	sp, #20
   3333a:	f85d fb04 	ldr.w	pc, [sp], #4

0003333e <clear_cf_cfg>:
{
   3333e:	b513      	push	{r0, r1, r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   33340:	2400      	movs	r4, #0
{
   33342:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   33344:	4669      	mov	r1, sp
   33346:	3001      	adds	r0, #1
   33348:	9400      	str	r4, [sp, #0]
   3334a:	f8cd 4003 	str.w	r4, [sp, #3]
   3334e:	f7ff ff3b 	bl	331c8 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   33352:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   33354:	320c      	adds	r2, #12
   33356:	e8d2 3fef 	ldaex	r3, [r2]
   3335a:	e8c2 4fe1 	stlex	r1, r4, [r2]
   3335e:	2900      	cmp	r1, #0
   33360:	d1f9      	bne.n	33356 <clear_cf_cfg+0x18>
}
   33362:	b002      	add	sp, #8
   33364:	bd10      	pop	{r4, pc}

00033366 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   33366:	2301      	movs	r3, #1
   33368:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3336a:	e8d0 2fef 	ldaex	r2, [r0]
   3336e:	431a      	orrs	r2, r3
   33370:	e8c0 2fe1 	stlex	r1, r2, [r0]
   33374:	2900      	cmp	r1, #0
   33376:	d1f8      	bne.n	3336a <atomic_set_bit+0x4>
}
   33378:	4770      	bx	lr

0003337a <sc_restore_rsp>:
{
   3337a:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   3337c:	f7e9 fd40 	bl	1ce00 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   33380:	b140      	cbz	r0, 33394 <sc_restore_rsp+0x1a>
   33382:	7a03      	ldrb	r3, [r0, #8]
   33384:	07db      	lsls	r3, r3, #31
   33386:	d505      	bpl.n	33394 <sc_restore_rsp+0x1a>
}
   33388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   3338c:	2100      	movs	r1, #0
   3338e:	300c      	adds	r0, #12
   33390:	f7ff bfe9 	b.w	33366 <atomic_set_bit>
}
   33394:	bd08      	pop	{r3, pc}

00033396 <gatt_write_ccc_buf>:
{
   33396:	b538      	push	{r3, r4, r5, lr}
   33398:	4614      	mov	r4, r2
   3339a:	f100 0508 	add.w	r5, r0, #8
   3339e:	2102      	movs	r1, #2
   333a0:	4628      	mov	r0, r5
   333a2:	f7ea ffb1 	bl	1e308 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   333a6:	8963      	ldrh	r3, [r4, #10]
	net_buf_simple_add_le16(&buf->b, val);
   333a8:	89a1      	ldrh	r1, [r4, #12]
   333aa:	8003      	strh	r3, [r0, #0]
   333ac:	4628      	mov	r0, r5
   333ae:	f000 f9c4 	bl	3373a <net_buf_simple_add_le16>
   333b2:	3410      	adds	r4, #16
   333b4:	e8d4 3fef 	ldaex	r3, [r4]
   333b8:	f043 0304 	orr.w	r3, r3, #4
   333bc:	e8c4 3fe2 	stlex	r2, r3, [r4]
   333c0:	2a00      	cmp	r2, #0
   333c2:	d1f7      	bne.n	333b4 <gatt_write_ccc_buf+0x1e>
}
   333c4:	2000      	movs	r0, #0
   333c6:	bd38      	pop	{r3, r4, r5, pc}

000333c8 <gatt_sub_remove>:
{
   333c8:	b538      	push	{r3, r4, r5, lr}
   333ca:	460c      	mov	r4, r1
	if (params) {
   333cc:	4619      	mov	r1, r3
   333ce:	b16b      	cbz	r3, 333ec <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   333d0:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   333d4:	695b      	ldr	r3, [r3, #20]
   333d6:	b982      	cbnz	r2, 333fa <gatt_sub_remove+0x32>
   333d8:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   333da:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   333dc:	4295      	cmp	r5, r2
   333de:	d100      	bne.n	333e2 <gatt_sub_remove+0x1a>
	list->tail = node;
   333e0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   333e2:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   333e4:	680d      	ldr	r5, [r1, #0]
   333e6:	461a      	mov	r2, r3
   333e8:	614b      	str	r3, [r1, #20]
   333ea:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   333ec:	68a3      	ldr	r3, [r4, #8]
   333ee:	b953      	cbnz	r3, 33406 <gatt_sub_remove+0x3e>
   333f0:	4620      	mov	r0, r4
}
   333f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   333f6:	f7ff beee 	b.w	331d6 <gatt_sub_remove.part.0>
   333fa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   333fc:	68e3      	ldr	r3, [r4, #12]
   333fe:	429d      	cmp	r5, r3
	list->tail = node;
   33400:	bf08      	it	eq
   33402:	60e2      	streq	r2, [r4, #12]
}
   33404:	e7ed      	b.n	333e2 <gatt_sub_remove+0x1a>
   33406:	bd38      	pop	{r3, r4, r5, pc}

00033408 <gatt_write_ccc_rsp>:
{
   33408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3340c:	4606      	mov	r6, r0
   3340e:	460d      	mov	r5, r1
   33410:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   33412:	f104 0310 	add.w	r3, r4, #16
   33416:	e8d3 2fef 	ldaex	r2, [r3]
   3341a:	f022 0204 	bic.w	r2, r2, #4
   3341e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   33422:	2900      	cmp	r1, #0
   33424:	d1f7      	bne.n	33416 <gatt_write_ccc_rsp+0xe>
	if (err) {
   33426:	b1dd      	cbz	r5, 33460 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   33428:	f7e9 fd18 	bl	1ce5c <gatt_sub_find>
		if (!sub) {
   3342c:	4601      	mov	r1, r0
   3342e:	b300      	cbz	r0, 33472 <gatt_write_ccc_rsp+0x6a>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   33430:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   33432:	b143      	cbz	r3, 33446 <gatt_write_ccc_rsp+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   33434:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   33436:	f104 0014 	add.w	r0, r4, #20
   3343a:	4283      	cmp	r3, r0
   3343c:	d10b      	bne.n	33456 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   3343e:	4623      	mov	r3, r4
   33440:	4630      	mov	r0, r6
   33442:	f7ff ffc1 	bl	333c8 <gatt_sub_remove>
	if (params->write) {
   33446:	6863      	ldr	r3, [r4, #4]
   33448:	b19b      	cbz	r3, 33472 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   3344a:	4629      	mov	r1, r5
   3344c:	4630      	mov	r0, r6
}
   3344e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   33452:	2200      	movs	r2, #0
   33454:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   33456:	2a00      	cmp	r2, #0
   33458:	d0f5      	beq.n	33446 <gatt_write_ccc_rsp+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   3345a:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   3345c:	6812      	ldr	r2, [r2, #0]
   3345e:	e7ec      	b.n	3343a <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   33460:	89a3      	ldrh	r3, [r4, #12]
   33462:	2b00      	cmp	r3, #0
   33464:	d1ef      	bne.n	33446 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   33466:	462b      	mov	r3, r5
   33468:	462a      	mov	r2, r5
   3346a:	4621      	mov	r1, r4
   3346c:	6827      	ldr	r7, [r4, #0]
   3346e:	47b8      	blx	r7
   33470:	e7e9      	b.n	33446 <gatt_write_ccc_rsp+0x3e>
}
   33472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00033476 <gatt_req_send>:
{
   33476:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3347a:	4606      	mov	r6, r0
   3347c:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   3347e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   33482:	2100      	movs	r1, #0
{
   33484:	4614      	mov	r4, r2
   33486:	461f      	mov	r7, r3
   33488:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   3348c:	f7e9 faee 	bl	1ca6c <bt_att_req_alloc>
	if (!req) {
   33490:	4605      	mov	r5, r0
   33492:	b920      	cbnz	r0, 3349e <gatt_req_send+0x28>
		return -ENOMEM;
   33494:	f06f 040b 	mvn.w	r4, #11
}
   33498:	4620      	mov	r0, r4
   3349a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   3349e:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   334a2:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   334a4:	464a      	mov	r2, r9
   334a6:	4630      	mov	r0, r6
   334a8:	f89d 1020 	ldrb.w	r1, [sp, #32]
   334ac:	f7e9 f854 	bl	1c558 <bt_att_create_pdu>
	if (!buf) {
   334b0:	b918      	cbnz	r0, 334ba <gatt_req_send+0x44>
		bt_att_req_free(req);
   334b2:	4628      	mov	r0, r5
   334b4:	f7e9 faf0 	bl	1ca98 <bt_att_req_free>
   334b8:	e7ec      	b.n	33494 <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   334ba:	4622      	mov	r2, r4
   334bc:	4649      	mov	r1, r9
	req->buf = buf;
   334be:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   334c0:	47b8      	blx	r7
	if (err) {
   334c2:	4604      	mov	r4, r0
   334c4:	b118      	cbz	r0, 334ce <gatt_req_send+0x58>
		bt_att_req_free(req);
   334c6:	4628      	mov	r0, r5
   334c8:	f7e9 fae6 	bl	1ca98 <bt_att_req_free>
   334cc:	e7e4      	b.n	33498 <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   334ce:	4629      	mov	r1, r5
   334d0:	4630      	mov	r0, r6
   334d2:	f7e9 fc2b 	bl	1cd2c <bt_att_req_send>
	if (err) {
   334d6:	4604      	mov	r4, r0
   334d8:	2800      	cmp	r0, #0
   334da:	d0dd      	beq.n	33498 <gatt_req_send+0x22>
   334dc:	e7f3      	b.n	334c6 <gatt_req_send+0x50>

000334de <bt_gatt_attr_value_handle>:
{
   334de:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   334e0:	4604      	mov	r4, r0
   334e2:	b910      	cbnz	r0, 334ea <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   334e4:	2000      	movs	r0, #0
}
   334e6:	b002      	add	sp, #8
   334e8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   334ea:	2300      	movs	r3, #0
   334ec:	f88d 3004 	strb.w	r3, [sp, #4]
   334f0:	f642 0303 	movw	r3, #10243	; 0x2803
   334f4:	6800      	ldr	r0, [r0, #0]
   334f6:	a901      	add	r1, sp, #4
   334f8:	f8ad 3006 	strh.w	r3, [sp, #6]
   334fc:	f7fe ffbe 	bl	3247c <bt_uuid_cmp>
   33500:	2800      	cmp	r0, #0
   33502:	d1ef      	bne.n	334e4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   33504:	68e3      	ldr	r3, [r4, #12]
   33506:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   33508:	2800      	cmp	r0, #0
   3350a:	d1ec      	bne.n	334e6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   3350c:	4620      	mov	r0, r4
   3350e:	f7e9 fe9f 	bl	1d250 <bt_gatt_attr_get_handle>
   33512:	3001      	adds	r0, #1
   33514:	b280      	uxth	r0, r0
	return handle;
   33516:	e7e6      	b.n	334e6 <bt_gatt_attr_value_handle+0x8>

00033518 <bt_gatt_attr_read_chrc>:
{
   33518:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   3351a:	68ce      	ldr	r6, [r1, #12]
{
   3351c:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   3351e:	79b3      	ldrb	r3, [r6, #6]
{
   33520:	b088      	sub	sp, #32
   33522:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   33524:	f88d 300c 	strb.w	r3, [sp, #12]
{
   33528:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   3352a:	f7ff ffd8 	bl	334de <bt_gatt_attr_value_handle>
   3352e:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   33532:	6830      	ldr	r0, [r6, #0]
   33534:	7803      	ldrb	r3, [r0, #0]
   33536:	b96b      	cbnz	r3, 33554 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   33538:	8843      	ldrh	r3, [r0, #2]
   3353a:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   3353e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   33540:	9300      	str	r3, [sp, #0]
   33542:	4629      	mov	r1, r5
   33544:	4620      	mov	r0, r4
   33546:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   3354a:	ab03      	add	r3, sp, #12
   3354c:	f7ff fe75 	bl	3323a <bt_gatt_attr_read.constprop.0>
}
   33550:	b008      	add	sp, #32
   33552:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   33554:	1c43      	adds	r3, r0, #1
   33556:	f10d 020f 	add.w	r2, sp, #15
   3355a:	3011      	adds	r0, #17
   3355c:	f853 1b04 	ldr.w	r1, [r3], #4
   33560:	4283      	cmp	r3, r0
   33562:	f842 1b04 	str.w	r1, [r2], #4
   33566:	d1f9      	bne.n	3355c <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   33568:	2313      	movs	r3, #19
   3356a:	e7e9      	b.n	33540 <bt_gatt_attr_read_chrc+0x28>

0003356c <bt_gatt_foreach_attr>:
{
   3356c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   3356e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   33572:	2300      	movs	r3, #0
   33574:	461a      	mov	r2, r3
   33576:	9300      	str	r3, [sp, #0]
   33578:	f7e9 feb6 	bl	1d2e8 <bt_gatt_foreach_attr_type>
}
   3357c:	b005      	add	sp, #20
   3357e:	f85d fb04 	ldr.w	pc, [sp], #4

00033582 <db_hash_process>:
	db_hash_gen(true);
   33582:	f7e9 bf27 	b.w	1d3d4 <db_hash_gen.isra.0>

00033586 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   33586:	07d3      	lsls	r3, r2, #31
{
   33588:	b510      	push	{r4, lr}
   3358a:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   3358c:	d504      	bpl.n	33598 <bt_gatt_check_perm+0x12>
   3358e:	f014 0f15 	tst.w	r4, #21
   33592:	d017      	beq.n	335c4 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   33594:	684b      	ldr	r3, [r1, #4]
   33596:	b1ab      	cbz	r3, 335c4 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   33598:	0793      	lsls	r3, r2, #30
   3359a:	d504      	bpl.n	335a6 <bt_gatt_check_perm+0x20>
   3359c:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   335a0:	d012      	beq.n	335c8 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   335a2:	688b      	ldr	r3, [r1, #8]
   335a4:	b183      	cbz	r3, 335c8 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   335a6:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   335a8:	f014 0f30 	tst.w	r4, #48	; 0x30
   335ac:	d104      	bne.n	335b8 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   335ae:	f014 000c 	ands.w	r0, r4, #12
   335b2:	bf18      	it	ne
   335b4:	200f      	movne	r0, #15
}
   335b6:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   335b8:	f7ff f927 	bl	3280a <bt_conn_get_security>
   335bc:	2802      	cmp	r0, #2
   335be:	d8f6      	bhi.n	335ae <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   335c0:	2005      	movs	r0, #5
   335c2:	e7f8      	b.n	335b6 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   335c4:	2002      	movs	r0, #2
   335c6:	e7f6      	b.n	335b6 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   335c8:	2003      	movs	r0, #3
   335ca:	e7f4      	b.n	335b6 <bt_gatt_check_perm+0x30>

000335cc <bt_gatt_notification>:
{
   335cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   335d0:	4607      	mov	r7, r0
   335d2:	4688      	mov	r8, r1
   335d4:	4691      	mov	r9, r2
   335d6:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   335d8:	f7e9 fc40 	bl	1ce5c <gatt_sub_find>
	if (!sub) {
   335dc:	b1f8      	cbz	r0, 3361e <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   335de:	6883      	ldr	r3, [r0, #8]
   335e0:	b1eb      	cbz	r3, 3361e <bt_gatt_notification+0x52>
   335e2:	f1b3 0614 	subs.w	r6, r3, #20
   335e6:	d01a      	beq.n	3361e <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   335e8:	681c      	ldr	r4, [r3, #0]
   335ea:	b104      	cbz	r4, 335ee <bt_gatt_notification+0x22>
   335ec:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   335ee:	8933      	ldrh	r3, [r6, #8]
   335f0:	4543      	cmp	r3, r8
   335f2:	d10a      	bne.n	3360a <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   335f4:	4653      	mov	r3, sl
   335f6:	464a      	mov	r2, r9
   335f8:	4631      	mov	r1, r6
   335fa:	4638      	mov	r0, r7
   335fc:	6835      	ldr	r5, [r6, #0]
   335fe:	47a8      	blx	r5
   33600:	b918      	cbnz	r0, 3360a <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   33602:	4631      	mov	r1, r6
   33604:	4638      	mov	r0, r7
   33606:	f7ea f9cb 	bl	1d9a0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3360a:	b144      	cbz	r4, 3361e <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3360c:	f114 0514 	adds.w	r5, r4, #20
   33610:	d002      	beq.n	33618 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   33612:	6965      	ldr	r5, [r4, #20]
   33614:	b105      	cbz	r5, 33618 <bt_gatt_notification+0x4c>
   33616:	3d14      	subs	r5, #20
{
   33618:	4626      	mov	r6, r4
   3361a:	462c      	mov	r4, r5
   3361c:	e7e7      	b.n	335ee <bt_gatt_notification+0x22>
}
   3361e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00033622 <bt_gatt_change_aware>:
{
   33622:	b510      	push	{r4, lr}
   33624:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   33626:	f7e9 fbeb 	bl	1ce00 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   3362a:	b910      	cbnz	r0, 33632 <bt_gatt_change_aware+0x10>
		return true;
   3362c:	2401      	movs	r4, #1
}
   3362e:	4620      	mov	r0, r4
   33630:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   33632:	7a03      	ldrb	r3, [r0, #8]
   33634:	07da      	lsls	r2, r3, #31
   33636:	d5f9      	bpl.n	3362c <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   33638:	300c      	adds	r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3363a:	e8d0 1faf 	lda	r1, [r0]
   3363e:	f011 0101 	ands.w	r1, r1, #1
   33642:	d1f3      	bne.n	3362c <bt_gatt_change_aware+0xa>
	if (!req) {
   33644:	2c00      	cmp	r4, #0
   33646:	d0f2      	beq.n	3362e <bt_gatt_change_aware+0xc>
   33648:	e8d0 3faf 	lda	r3, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3364c:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   33650:	079b      	lsls	r3, r3, #30
   33652:	d50a      	bpl.n	3366a <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   33654:	e8d0 3fef 	ldaex	r3, [r0]
   33658:	f023 0302 	bic.w	r3, r3, #2
   3365c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   33660:	2a00      	cmp	r2, #0
   33662:	d1f7      	bne.n	33654 <bt_gatt_change_aware+0x32>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   33664:	f7ff fe7f 	bl	33366 <atomic_set_bit>
	return false;
   33668:	e7e1      	b.n	3362e <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   3366a:	2101      	movs	r1, #1
   3366c:	e7fa      	b.n	33664 <bt_gatt_change_aware+0x42>

0003366e <bt_smp_recv>:
{
   3366e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   33670:	2100      	movs	r1, #0
   33672:	f04f 32ff 	mov.w	r2, #4294967295
   33676:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   3367a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   3367c:	4608      	mov	r0, r1
   3367e:	f7ff f9aa 	bl	329d6 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   33682:	f100 0608 	add.w	r6, r0, #8
   33686:	4604      	mov	r4, r0
   33688:	2101      	movs	r1, #1
   3368a:	4630      	mov	r0, r6
   3368c:	f7ea fe3c 	bl	1e308 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   33690:	2505      	movs	r5, #5
   33692:	2101      	movs	r1, #1
   33694:	7005      	strb	r5, [r0, #0]
   33696:	4630      	mov	r0, r6
   33698:	f7ea fe36 	bl	1e308 <net_buf_simple_add>
   3369c:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   3369e:	7005      	strb	r5, [r0, #0]
   336a0:	4622      	mov	r2, r4
   336a2:	2106      	movs	r1, #6
   336a4:	4638      	mov	r0, r7
   336a6:	9300      	str	r3, [sp, #0]
   336a8:	f7ff f998 	bl	329dc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   336ac:	b110      	cbz	r0, 336b4 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   336ae:	4620      	mov	r0, r4
   336b0:	f7ea fcfa 	bl	1e0a8 <net_buf_unref>
}
   336b4:	2000      	movs	r0, #0
   336b6:	b003      	add	sp, #12
   336b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000336ba <bt_smp_sign>:
   336ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   336be:	4770      	bx	lr

000336c0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   336c0:	2000      	movs	r0, #0
   336c2:	4770      	bx	lr

000336c4 <fixed_data_unref>:
}
   336c4:	4770      	bx	lr

000336c6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   336c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   336c8:	6849      	ldr	r1, [r1, #4]
   336ca:	6809      	ldr	r1, [r1, #0]
   336cc:	f7ea bba4 	b.w	1de18 <net_buf_alloc_len>

000336d0 <net_buf_simple_init_with_data>:
	buf->size  = size;
   336d0:	b292      	uxth	r2, r2
	buf->__buf = data;
   336d2:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   336d4:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   336d6:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   336d8:	8082      	strh	r2, [r0, #4]
}
   336da:	4770      	bx	lr

000336dc <net_buf_simple_pull_u8>:
{
   336dc:	b510      	push	{r4, lr}
	val = buf->data[0];
   336de:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   336e0:	2101      	movs	r1, #1
	val = buf->data[0];
   336e2:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   336e4:	f7ea fdce 	bl	1e284 <net_buf_simple_pull>
}
   336e8:	4620      	mov	r0, r4
   336ea:	bd10      	pop	{r4, pc}

000336ec <net_buf_simple_pull_le16>:
{
   336ec:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   336ee:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   336f0:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   336f2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   336f4:	f7ea fdc6 	bl	1e284 <net_buf_simple_pull>
}
   336f8:	4620      	mov	r0, r4
   336fa:	bd10      	pop	{r4, pc}

000336fc <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   336fc:	6802      	ldr	r2, [r0, #0]
   336fe:	6880      	ldr	r0, [r0, #8]
}
   33700:	1a10      	subs	r0, r2, r0
   33702:	4770      	bx	lr

00033704 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   33704:	8883      	ldrh	r3, [r0, #4]
   33706:	88c2      	ldrh	r2, [r0, #6]
   33708:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   3370a:	6803      	ldr	r3, [r0, #0]
   3370c:	6880      	ldr	r0, [r0, #8]
   3370e:	1a18      	subs	r0, r3, r0
}
   33710:	1a10      	subs	r0, r2, r0
   33712:	4770      	bx	lr

00033714 <net_buf_simple_add_mem>:
{
   33714:	b538      	push	{r3, r4, r5, lr}
   33716:	460d      	mov	r5, r1
   33718:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   3371a:	4611      	mov	r1, r2
   3371c:	f7ea fdf4 	bl	1e308 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33720:	4622      	mov	r2, r4
   33722:	4629      	mov	r1, r5
}
   33724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33728:	f004 b82b 	b.w	37782 <memcpy>

0003372c <net_buf_simple_add_u8>:
{
   3372c:	b510      	push	{r4, lr}
   3372e:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   33730:	2101      	movs	r1, #1
   33732:	f7ea fde9 	bl	1e308 <net_buf_simple_add>
	*u8 = val;
   33736:	7004      	strb	r4, [r0, #0]
}
   33738:	bd10      	pop	{r4, pc}

0003373a <net_buf_simple_add_le16>:
{
   3373a:	b510      	push	{r4, lr}
   3373c:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   3373e:	2102      	movs	r1, #2
   33740:	f7ea fde2 	bl	1e308 <net_buf_simple_add>
	dst[0] = val;
   33744:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   33746:	0a24      	lsrs	r4, r4, #8
   33748:	7044      	strb	r4, [r0, #1]
}
   3374a:	bd10      	pop	{r4, pc}

0003374c <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3374c:	b508      	push	{r3, lr}
	net_if_init();
   3374e:	f7ea fe79 	bl	1e444 <net_if_init>
	net_if_post_init();
   33752:	f7ea feb3 	bl	1e4bc <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   33756:	2000      	movs	r0, #0
   33758:	bd08      	pop	{r3, pc}

0003375a <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3375a:	b110      	cbz	r0, 33762 <net_if_l2+0x8>
   3375c:	6800      	ldr	r0, [r0, #0]
   3375e:	b100      	cbz	r0, 33762 <net_if_l2+0x8>
	return iface->if_dev->l2;
   33760:	6840      	ldr	r0, [r0, #4]
}
   33762:	4770      	bx	lr

00033764 <l2_flags_get>:
{
   33764:	b510      	push	{r4, lr}
   33766:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   33768:	f7ff fff7 	bl	3375a <net_if_l2>
   3376c:	b128      	cbz	r0, 3377a <l2_flags_get+0x16>
   3376e:	68c2      	ldr	r2, [r0, #12]
   33770:	b11a      	cbz	r2, 3377a <l2_flags_get+0x16>
}
   33772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   33776:	4618      	mov	r0, r3
   33778:	4710      	bx	r2
}
   3377a:	2000      	movs	r0, #0
   3377c:	bd10      	pop	{r4, pc}

0003377e <net_if_flag_is_set>:
	if (iface == NULL) {
   3377e:	b130      	cbz	r0, 3378e <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   33780:	6803      	ldr	r3, [r0, #0]
   33782:	330c      	adds	r3, #12
   33784:	e8d3 0faf 	lda	r0, [r3]
   33788:	4108      	asrs	r0, r1
   3378a:	f000 0001 	and.w	r0, r0, #1
}
   3378e:	4770      	bx	lr

00033790 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   33790:	e9d0 2300 	ldrd	r2, r3, [r0]
   33794:	1a9b      	subs	r3, r3, r2
   33796:	2b01      	cmp	r3, #1
{
   33798:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3379a:	d90c      	bls.n	337b6 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3379c:	4614      	mov	r4, r2
   3379e:	1c53      	adds	r3, r2, #1
   337a0:	6003      	str	r3, [r0, #0]
   337a2:	f814 3b02 	ldrb.w	r3, [r4], #2
   337a6:	021b      	lsls	r3, r3, #8
   337a8:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   337aa:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   337ac:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   337ae:	7852      	ldrb	r2, [r2, #1]
   337b0:	4313      	orrs	r3, r2
   337b2:	800b      	strh	r3, [r1, #0]
}
   337b4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   337b6:	f06f 0015 	mvn.w	r0, #21
   337ba:	e7fb      	b.n	337b4 <unpack_uint16+0x24>

000337bc <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   337bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   337be:	e9d0 3400 	ldrd	r3, r4, [r0]
   337c2:	429c      	cmp	r4, r3
   337c4:	d01f      	beq.n	33806 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   337c6:	1c5c      	adds	r4, r3, #1
   337c8:	6004      	str	r4, [r0, #0]
   337ca:	781b      	ldrb	r3, [r3, #0]
   337cc:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   337ce:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   337d0:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   337d2:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   337d4:	6804      	ldr	r4, [r0, #0]
   337d6:	42bc      	cmp	r4, r7
   337d8:	d218      	bcs.n	3380c <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   337da:	4625      	mov	r5, r4
   337dc:	f815 3b01 	ldrb.w	r3, [r5], #1
   337e0:	6816      	ldr	r6, [r2, #0]
   337e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   337e6:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   337e8:	4433      	add	r3, r6
   337ea:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   337ec:	6005      	str	r5, [r0, #0]
   337ee:	f994 4000 	ldrsb.w	r4, [r4]
   337f2:	2c00      	cmp	r4, #0
   337f4:	db04      	blt.n	33800 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   337f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   337fa:	d204      	bcs.n	33806 <fixed_header_decode+0x4a>
	return 0;
   337fc:	2000      	movs	r0, #0
   337fe:	e004      	b.n	3380a <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   33800:	3107      	adds	r1, #7
   33802:	291c      	cmp	r1, #28
   33804:	d1e6      	bne.n	337d4 <fixed_header_decode+0x18>
		return -EINVAL;
   33806:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3380a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   3380c:	f06f 000a 	mvn.w	r0, #10
   33810:	e7fb      	b.n	3380a <fixed_header_decode+0x4e>

00033812 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   33812:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   33814:	e9d1 3500 	ldrd	r3, r5, [r1]
   33818:	429d      	cmp	r5, r3
   3381a:	d102      	bne.n	33822 <connect_ack_decode+0x10>
		return -EINVAL;
   3381c:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   33820:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   33822:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   33824:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   33826:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   33828:	d0f8      	beq.n	3381c <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3382a:	461d      	mov	r5, r3
   3382c:	f815 4b02 	ldrb.w	r4, [r5], #2
   33830:	600d      	str	r5, [r1, #0]
   33832:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   33834:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
	return 0;
   33838:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3383a:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3383c:	bf04      	itt	eq
   3383e:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   33842:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   33844:	7051      	strb	r1, [r2, #1]
	return 0;
   33846:	e7eb      	b.n	33820 <connect_ack_decode+0xe>

00033848 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   33848:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3384c:	461c      	mov	r4, r3
   3384e:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   33850:	7da2      	ldrb	r2, [r4, #22]
   33852:	0043      	lsls	r3, r0, #1
   33854:	f022 0203 	bic.w	r2, r2, #3
   33858:	f003 0302 	and.w	r3, r3, #2
   3385c:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3385e:	f3c0 0041 	ubfx	r0, r0, #1, #2
   33862:	7220      	strb	r0, [r4, #8]
{
   33864:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   33866:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   33868:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3386a:	f10d 0106 	add.w	r1, sp, #6
   3386e:	f7ff ff8f 	bl	33790 <unpack_uint16>
	if (err_code != 0) {
   33872:	4606      	mov	r6, r0
   33874:	b9c0      	cbnz	r0, 338a8 <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   33876:	683b      	ldr	r3, [r7, #0]
   33878:	687a      	ldr	r2, [r7, #4]
   3387a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3387e:	1ad2      	subs	r2, r2, r3
   33880:	42aa      	cmp	r2, r5
   33882:	da02      	bge.n	3388a <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   33884:	f06f 0615 	mvn.w	r6, #21
   33888:	e00e      	b.n	338a8 <publish_decode+0x60>
	str->size = utf8_strlen;
   3388a:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3388c:	b185      	cbz	r5, 338b0 <publish_decode+0x68>
		str->utf8 = buf->cur;
   3388e:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   33890:	442b      	add	r3, r5
   33892:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   33894:	7a23      	ldrb	r3, [r4, #8]
   33896:	b96b      	cbnz	r3, 338b4 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   33898:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   3389a:	45a8      	cmp	r8, r5
   3389c:	d3f2      	bcc.n	33884 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   3389e:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   338a0:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   338a4:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   338a6:	6125      	str	r5, [r4, #16]

	return 0;
}
   338a8:	4630      	mov	r0, r6
   338aa:	b002      	add	sp, #8
   338ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   338b0:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   338b2:	e7ef      	b.n	33894 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   338b4:	4638      	mov	r0, r7
   338b6:	f104 0114 	add.w	r1, r4, #20
   338ba:	f7ff ff69 	bl	33790 <unpack_uint16>
		if (err_code != 0) {
   338be:	b908      	cbnz	r0, 338c4 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   338c0:	3504      	adds	r5, #4
   338c2:	e7ea      	b.n	3389a <publish_decode+0x52>
   338c4:	4606      	mov	r6, r0
   338c6:	e7ef      	b.n	338a8 <publish_decode+0x60>

000338c8 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   338c8:	f7ff bf62 	b.w	33790 <unpack_uint16>

000338cc <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   338cc:	f7ff bf60 	b.w	33790 <unpack_uint16>

000338d0 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   338d0:	f7ff bf5e 	b.w	33790 <unpack_uint16>

000338d4 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   338d4:	f7ff bf5c 	b.w	33790 <unpack_uint16>

000338d8 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   338d8:	b538      	push	{r3, r4, r5, lr}
   338da:	4605      	mov	r5, r0
   338dc:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   338de:	f7ff ff57 	bl	33790 <unpack_uint16>
	if (err_code != 0) {
   338e2:	b930      	cbnz	r0, 338f2 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   338e4:	e9d5 2300 	ldrd	r2, r3, [r5]
   338e8:	1a99      	subs	r1, r3, r2
	str->len = length;
   338ea:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   338ec:	b111      	cbz	r1, 338f4 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   338ee:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   338f0:	602b      	str	r3, [r5, #0]
}
   338f2:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   338f4:	6060      	str	r0, [r4, #4]
   338f6:	e7fc      	b.n	338f2 <subscribe_ack_decode+0x1a>

000338f8 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   338f8:	f7ff bf4a 	b.w	33790 <unpack_uint16>

000338fc <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   338fc:	e9d1 3200 	ldrd	r3, r2, [r1]
   33900:	1ad2      	subs	r2, r2, r3
   33902:	2a01      	cmp	r2, #1
   33904:	d909      	bls.n	3391a <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   33906:	1c5a      	adds	r2, r3, #1
   33908:	600a      	str	r2, [r1, #0]
   3390a:	0a02      	lsrs	r2, r0, #8
   3390c:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3390e:	680b      	ldr	r3, [r1, #0]
   33910:	1c5a      	adds	r2, r3, #1
   33912:	600a      	str	r2, [r1, #0]
   33914:	7018      	strb	r0, [r3, #0]
	return 0;
   33916:	2000      	movs	r0, #0
   33918:	4770      	bx	lr
		return -ENOMEM;
   3391a:	f06f 000b 	mvn.w	r0, #11
}
   3391e:	4770      	bx	lr

00033920 <pack_utf8_str>:
{
   33920:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   33922:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   33926:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   33928:	6840      	ldr	r0, [r0, #4]
   3392a:	1a9b      	subs	r3, r3, r2
   3392c:	1c82      	adds	r2, r0, #2
   3392e:	4293      	cmp	r3, r2
{
   33930:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   33932:	d30d      	bcc.n	33950 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   33934:	b280      	uxth	r0, r0
   33936:	f7ff ffe1 	bl	338fc <pack_uint16>
   3393a:	e9d5 1200 	ldrd	r1, r2, [r5]
   3393e:	6820      	ldr	r0, [r4, #0]
   33940:	f003 ff1f 	bl	37782 <memcpy>
	return 0;
   33944:	2000      	movs	r0, #0
	buf->cur += str->size;
   33946:	6823      	ldr	r3, [r4, #0]
   33948:	686a      	ldr	r2, [r5, #4]
   3394a:	4413      	add	r3, r2
   3394c:	6023      	str	r3, [r4, #0]
}
   3394e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   33950:	f06f 000b 	mvn.w	r0, #11
   33954:	e7fb      	b.n	3394e <pack_utf8_str+0x2e>

00033956 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   33956:	6813      	ldr	r3, [r2, #0]
{
   33958:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   3395a:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3395c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   33960:	d227      	bcs.n	339b2 <mqtt_encode_fixed_header+0x5c>
   33962:	4625      	mov	r5, r4
   33964:	2600      	movs	r6, #0
	} while (length > 0);
   33966:	09ed      	lsrs	r5, r5, #7
   33968:	b2f3      	uxtb	r3, r6
   3396a:	f106 0601 	add.w	r6, r6, #1
   3396e:	d1fa      	bne.n	33966 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   33970:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   33972:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   33974:	b2db      	uxtb	r3, r3
   33976:	425d      	negs	r5, r3
   33978:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3397a:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   3397c:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   3397e:	bf1e      	ittt	ne
   33980:	3301      	addne	r3, #1
   33982:	6013      	strne	r3, [r2, #0]
   33984:	5548      	strbne	r0, [r1, r5]
	return 0;
   33986:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   33988:	6813      	ldr	r3, [r2, #0]
   3398a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   3398e:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   33990:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   33992:	bf1f      	itttt	ne
   33994:	6811      	ldrne	r1, [r2, #0]
   33996:	780b      	ldrbne	r3, [r1, #0]
   33998:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   3399c:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   3399e:	6813      	ldr	r3, [r2, #0]
   339a0:	3301      	adds	r3, #1
   339a2:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   339a4:	2800      	cmp	r0, #0
   339a6:	d1ef      	bne.n	33988 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   339a8:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   339aa:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   339ac:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   339ae:	6053      	str	r3, [r2, #4]
}
   339b0:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   339b2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   339b6:	e7fb      	b.n	339b0 <mqtt_encode_fixed_header+0x5a>

000339b8 <mqtt_message_id_only_enc>:
{
   339b8:	b570      	push	{r4, r5, r6, lr}
   339ba:	4606      	mov	r6, r0
   339bc:	4614      	mov	r4, r2
	if (message_id == 0U) {
   339be:	4608      	mov	r0, r1
   339c0:	b169      	cbz	r1, 339de <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   339c2:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   339c4:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   339c6:	3505      	adds	r5, #5
   339c8:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   339ca:	f7ff ff97 	bl	338fc <pack_uint16>
	if (err_code != 0) {
   339ce:	b940      	cbnz	r0, 339e2 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   339d0:	4622      	mov	r2, r4
   339d2:	4629      	mov	r1, r5
   339d4:	4630      	mov	r0, r6
}
   339d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   339da:	f7ff bfbc 	b.w	33956 <mqtt_encode_fixed_header>
		return -EINVAL;
   339de:	f06f 0015 	mvn.w	r0, #21
}
   339e2:	bd70      	pop	{r4, r5, r6, pc}

000339e4 <publish_encode>:
{
   339e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   339e8:	7d87      	ldrb	r7, [r0, #22]
   339ea:	7a04      	ldrb	r4, [r0, #8]
   339ec:	f007 0801 	and.w	r8, r7, #1
{
   339f0:	4605      	mov	r5, r0
   339f2:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   339f4:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   339f8:	b10c      	cbz	r4, 339fe <publish_encode+0x1a>
   339fa:	8a83      	ldrh	r3, [r0, #20]
   339fc:	b383      	cbz	r3, 33a60 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   339fe:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   33a02:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   33a04:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   33a06:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   33a08:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   33a0c:	f7ff ff88 	bl	33920 <pack_utf8_str>
	if (err_code != 0) {
   33a10:	b9b0      	cbnz	r0, 33a40 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   33a12:	7a2b      	ldrb	r3, [r5, #8]
   33a14:	b9b3      	cbnz	r3, 33a44 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   33a16:	0060      	lsls	r0, r4, #1
   33a18:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   33a1c:	692a      	ldr	r2, [r5, #16]
   33a1e:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   33a22:	4338      	orrs	r0, r7
   33a24:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   33a28:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   33a2a:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   33a2e:	464a      	mov	r2, r9
   33a30:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   33a32:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   33a36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   33a3a:	f7ff ff8c 	bl	33956 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   33a3e:	b140      	cbz	r0, 33a52 <publish_encode+0x6e>
}
   33a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   33a44:	4649      	mov	r1, r9
   33a46:	8aa8      	ldrh	r0, [r5, #20]
   33a48:	f7ff ff58 	bl	338fc <pack_uint16>
		if (err_code != 0) {
   33a4c:	2800      	cmp	r0, #0
   33a4e:	d0e2      	beq.n	33a16 <publish_encode+0x32>
   33a50:	e7f6      	b.n	33a40 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   33a52:	f8d9 3004 	ldr.w	r3, [r9, #4]
   33a56:	692a      	ldr	r2, [r5, #16]
   33a58:	1a9b      	subs	r3, r3, r2
   33a5a:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   33a5e:	e7ef      	b.n	33a40 <publish_encode+0x5c>
		return -EINVAL;
   33a60:	f06f 0015 	mvn.w	r0, #21
   33a64:	e7ec      	b.n	33a40 <publish_encode+0x5c>

00033a66 <publish_ack_encode>:
{
   33a66:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   33a68:	8801      	ldrh	r1, [r0, #0]
   33a6a:	2040      	movs	r0, #64	; 0x40
   33a6c:	f7ff bfa4 	b.w	339b8 <mqtt_message_id_only_enc>

00033a70 <publish_release_encode>:
{
   33a70:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   33a72:	8801      	ldrh	r1, [r0, #0]
   33a74:	2062      	movs	r0, #98	; 0x62
   33a76:	f7ff bf9f 	b.w	339b8 <mqtt_message_id_only_enc>

00033a7a <subscribe_encode>:
{
   33a7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   33a7e:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   33a80:	88c0      	ldrh	r0, [r0, #6]
{
   33a82:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   33a84:	b330      	cbz	r0, 33ad4 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   33a86:	680f      	ldr	r7, [r1, #0]
   33a88:	3705      	adds	r7, #5
   33a8a:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   33a8c:	f7ff ff36 	bl	338fc <pack_uint16>
	if (err_code != 0) {
   33a90:	4604      	mov	r4, r0
   33a92:	bb08      	cbnz	r0, 33ad8 <subscribe_encode+0x5e>
   33a94:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   33a98:	88b3      	ldrh	r3, [r6, #4]
   33a9a:	42a3      	cmp	r3, r4
   33a9c:	dc06      	bgt.n	33aac <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   33a9e:	462a      	mov	r2, r5
   33aa0:	4639      	mov	r1, r7
}
   33aa2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   33aa6:	2082      	movs	r0, #130	; 0x82
   33aa8:	f7ff bf55 	b.w	33956 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   33aac:	fb08 f904 	mul.w	r9, r8, r4
   33ab0:	6830      	ldr	r0, [r6, #0]
   33ab2:	4629      	mov	r1, r5
   33ab4:	4448      	add	r0, r9
   33ab6:	f7ff ff33 	bl	33920 <pack_utf8_str>
		if (err_code != 0) {
   33aba:	b980      	cbnz	r0, 33ade <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   33abc:	6833      	ldr	r3, [r6, #0]
   33abe:	444b      	add	r3, r9
   33ac0:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   33ac2:	e9d5 3100 	ldrd	r3, r1, [r5]
   33ac6:	4299      	cmp	r1, r3
   33ac8:	d00b      	beq.n	33ae2 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   33aca:	1c59      	adds	r1, r3, #1
   33acc:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   33ace:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   33ad0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   33ad2:	e7e1      	b.n	33a98 <subscribe_encode+0x1e>
		return -EINVAL;
   33ad4:	f06f 0415 	mvn.w	r4, #21
}
   33ad8:	4620      	mov	r0, r4
   33ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   33ade:	4604      	mov	r4, r0
   33ae0:	e7fa      	b.n	33ad8 <subscribe_encode+0x5e>
		return -ENOMEM;
   33ae2:	f06f 040b 	mvn.w	r4, #11
   33ae6:	e7f7      	b.n	33ad8 <subscribe_encode+0x5e>

00033ae8 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   33ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33aea:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   33aec:	e9d1 3100 	ldrd	r3, r1, [r1]
   33af0:	1acb      	subs	r3, r1, r3
   33af2:	4293      	cmp	r3, r2
{
   33af4:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   33af6:	d301      	bcc.n	33afc <mqtt_read_message_chunk+0x14>
		return 0;
   33af8:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   33afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   33afc:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   33afe:	190f      	adds	r7, r1, r4
   33b00:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   33b04:	4413      	add	r3, r2
   33b06:	429f      	cmp	r7, r3
   33b08:	d813      	bhi.n	33b32 <mqtt_read_message_chunk+0x4a>
   33b0a:	4297      	cmp	r7, r2
   33b0c:	d311      	bcc.n	33b32 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   33b0e:	2300      	movs	r3, #0
   33b10:	4622      	mov	r2, r4
   33b12:	f7ea fdc9 	bl	1e6a8 <mqtt_transport_read>
	if (len < 0) {
   33b16:	2800      	cmp	r0, #0
   33b18:	dbef      	blt.n	33afa <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   33b1a:	d00d      	beq.n	33b38 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   33b1c:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   33b1e:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   33b20:	4403      	add	r3, r0
   33b22:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   33b24:	686b      	ldr	r3, [r5, #4]
   33b26:	4403      	add	r3, r0
   33b28:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   33b2a:	d2e5      	bcs.n	33af8 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   33b2c:	f06f 000a 	mvn.w	r0, #10
   33b30:	e7e3      	b.n	33afa <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   33b32:	f06f 000b 	mvn.w	r0, #11
   33b36:	e7e0      	b.n	33afa <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   33b38:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   33b3c:	e7dd      	b.n	33afa <mqtt_read_message_chunk+0x12>

00033b3e <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   33b3e:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   33b40:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   33b42:	69c2      	ldr	r2, [r0, #28]
{
   33b44:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   33b46:	9302      	str	r3, [sp, #8]
{
   33b48:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   33b4a:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   33b4c:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   33b4e:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   33b50:	4628      	mov	r0, r5
   33b52:	a902      	add	r1, sp, #8
   33b54:	f7ff ffc8 	bl	33ae8 <mqtt_read_message_chunk>
		if (err_code < 0) {
   33b58:	1e04      	subs	r4, r0, #0
   33b5a:	db2d      	blt.n	33bb8 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   33b5c:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   33b5e:	aa01      	add	r2, sp, #4
   33b60:	f10d 0103 	add.w	r1, sp, #3
   33b64:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   33b66:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   33b68:	f7ff fe28 	bl	337bc <fixed_header_decode>
	} while (err_code == -EAGAIN);
   33b6c:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   33b70:	4604      	mov	r4, r0
		chunk_size = 1U;
   33b72:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   33b76:	d0eb      	beq.n	33b50 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   33b78:	2800      	cmp	r0, #0
   33b7a:	db21      	blt.n	33bc0 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   33b7c:	f89d 6003 	ldrb.w	r6, [sp, #3]
   33b80:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   33b84:	2b30      	cmp	r3, #48	; 0x30
   33b86:	d11e      	bne.n	33bc6 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   33b88:	2202      	movs	r2, #2
   33b8a:	4628      	mov	r0, r5
   33b8c:	a902      	add	r1, sp, #8
   33b8e:	f7ff ffab 	bl	33ae8 <mqtt_read_message_chunk>
	if (err_code < 0) {
   33b92:	1e04      	subs	r4, r0, #0
   33b94:	db10      	blt.n	33bb8 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   33b96:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   33b98:	f016 0f06 	tst.w	r6, #6
   33b9c:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   33b9e:	4628      	mov	r0, r5
   33ba0:	ba52      	rev16	r2, r2
   33ba2:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   33ba4:	bf0c      	ite	eq
   33ba6:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   33ba8:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   33baa:	a902      	add	r1, sp, #8
   33bac:	f7ff ff9c 	bl	33ae8 <mqtt_read_message_chunk>
	if (err_code < 0) {
   33bb0:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   33bb4:	2c00      	cmp	r4, #0
   33bb6:	da0d      	bge.n	33bd4 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   33bb8:	f114 0f0b 	cmn.w	r4, #11
   33bbc:	d100      	bne.n	33bc0 <mqtt_handle_rx+0x82>
   33bbe:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   33bc0:	4620      	mov	r0, r4
   33bc2:	b00c      	add	sp, #48	; 0x30
   33bc4:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   33bc6:	4628      	mov	r0, r5
   33bc8:	9a01      	ldr	r2, [sp, #4]
   33bca:	a902      	add	r1, sp, #8
   33bcc:	f7ff ff8c 	bl	33ae8 <mqtt_read_message_chunk>
   33bd0:	4604      	mov	r4, r0
   33bd2:	e7ef      	b.n	33bb4 <mqtt_handle_rx+0x76>
	evt.result = 0;
   33bd4:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   33bd6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   33bda:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   33bdc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   33be0:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   33be2:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   33be4:	d066      	beq.n	33cb4 <mqtt_handle_rx+0x176>
   33be6:	d813      	bhi.n	33c10 <mqtt_handle_rx+0xd2>
   33be8:	2b40      	cmp	r3, #64	; 0x40
   33bea:	d059      	beq.n	33ca0 <mqtt_handle_rx+0x162>
   33bec:	d806      	bhi.n	33bfc <mqtt_handle_rx+0xbe>
   33bee:	2b20      	cmp	r3, #32
   33bf0:	d02f      	beq.n	33c52 <mqtt_handle_rx+0x114>
   33bf2:	2b30      	cmp	r3, #48	; 0x30
   33bf4:	d048      	beq.n	33c88 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   33bf6:	2400      	movs	r4, #0
   33bf8:	61ec      	str	r4, [r5, #28]
	return 0;
   33bfa:	e7e1      	b.n	33bc0 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   33bfc:	2b50      	cmp	r3, #80	; 0x50
   33bfe:	d1fa      	bne.n	33bf6 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   33c00:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   33c02:	a905      	add	r1, sp, #20
   33c04:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   33c06:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   33c0a:	f7ff fe5f 	bl	338cc <publish_receive_decode>
   33c0e:	e04e      	b.n	33cae <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   33c10:	2bb0      	cmp	r3, #176	; 0xb0
   33c12:	d05f      	beq.n	33cd4 <mqtt_handle_rx+0x196>
   33c14:	d80b      	bhi.n	33c2e <mqtt_handle_rx+0xf0>
   33c16:	2b70      	cmp	r3, #112	; 0x70
   33c18:	d054      	beq.n	33cc4 <mqtt_handle_rx+0x186>
   33c1a:	2b90      	cmp	r3, #144	; 0x90
   33c1c:	d1eb      	bne.n	33bf6 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   33c1e:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   33c20:	a905      	add	r1, sp, #20
   33c22:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   33c24:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   33c28:	f7ff fe56 	bl	338d8 <subscribe_ack_decode>
   33c2c:	e03f      	b.n	33cae <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   33c2e:	2bd0      	cmp	r3, #208	; 0xd0
   33c30:	d1e1      	bne.n	33bf6 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   33c32:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   33c36:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   33c38:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   33c3a:	bfc8      	it	gt
   33c3c:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   33c40:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   33c44:	bfc8      	it	gt
   33c46:	b252      	sxtbgt	r2, r2
   33c48:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   33c4c:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   33c50:	e010      	b.n	33c74 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   33c52:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   33c56:	4628      	mov	r0, r5
   33c58:	aa05      	add	r2, sp, #20
   33c5a:	a902      	add	r1, sp, #8
   33c5c:	f7ff fdd9 	bl	33812 <connect_ack_decode>
		if (err_code == 0) {
   33c60:	4604      	mov	r4, r0
   33c62:	bb28      	cbnz	r0, 33cb0 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   33c64:	f89d 2015 	ldrb.w	r2, [sp, #21]
   33c68:	b95a      	cbnz	r2, 33c82 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   33c6a:	69ab      	ldr	r3, [r5, #24]
   33c6c:	f043 0304 	orr.w	r3, r3, #4
   33c70:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   33c72:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   33c74:	4628      	mov	r0, r5
   33c76:	a904      	add	r1, sp, #16
   33c78:	f000 f8bd 	bl	33df6 <event_notify>
	if (err_code < 0) {
   33c7c:	2c00      	cmp	r4, #0
   33c7e:	daba      	bge.n	33bf6 <mqtt_handle_rx+0xb8>
   33c80:	e79e      	b.n	33bc0 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   33c82:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   33c86:	e7f4      	b.n	33c72 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   33c88:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   33c8a:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   33c8c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   33c90:	ab05      	add	r3, sp, #20
   33c92:	f7ff fdd9 	bl	33848 <publish_decode>
		client->internal.remaining_payload =
   33c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   33c98:	4604      	mov	r4, r0
		evt.result = err_code;
   33c9a:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   33c9c:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   33c9e:	e7e9      	b.n	33c74 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   33ca0:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   33ca2:	a905      	add	r1, sp, #20
   33ca4:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   33ca6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   33caa:	f7ff fe0d 	bl	338c8 <publish_ack_decode>
   33cae:	4604      	mov	r4, r0
		evt.result = err_code;
   33cb0:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   33cb2:	e7df      	b.n	33c74 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   33cb4:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   33cb6:	a905      	add	r1, sp, #20
   33cb8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   33cba:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   33cbe:	f7ff fe07 	bl	338d0 <publish_release_decode>
   33cc2:	e7f4      	b.n	33cae <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   33cc4:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   33cc6:	a905      	add	r1, sp, #20
   33cc8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   33cca:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   33cce:	f7ff fe01 	bl	338d4 <publish_complete_decode>
   33cd2:	e7ec      	b.n	33cae <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   33cd4:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   33cd6:	a905      	add	r1, sp, #20
   33cd8:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   33cdc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   33ce0:	f7ff fe0a 	bl	338f8 <unsubscribe_ack_decode>
   33ce4:	e7e3      	b.n	33cae <mqtt_handle_rx+0x170>

00033ce6 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   33ce6:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   33ce8:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   33cea:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   33cec:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   33cee:	2206      	movs	r2, #6
   33cf0:	2101      	movs	r1, #1
   33cf2:	f7e1 feb5 	bl	15a60 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   33cf6:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   33cf8:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   33cfa:	da04      	bge.n	33d06 <mqtt_client_tcp_connect+0x20>

	ret = zsock_connect(client->transport.tcp.sock, client->broker,
			    peer_addr_size);
	if (ret < 0) {
		(void) zsock_close(client->transport.tcp.sock);
		return -errno;
   33cfc:	f7fe fbba 	bl	32474 <__errno>
   33d00:	6800      	ldr	r0, [r0, #0]
   33d02:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   33d04:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   33d06:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   33d08:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   33d0a:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   33d0c:	bf14      	ite	ne
   33d0e:	2218      	movne	r2, #24
   33d10:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   33d12:	f7fc fe2b 	bl	3096c <z_impl_zsock_connect>
	if (ret < 0) {
   33d16:	2800      	cmp	r0, #0
   33d18:	da03      	bge.n	33d22 <mqtt_client_tcp_connect+0x3c>
		(void) zsock_close(client->transport.tcp.sock);
   33d1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   33d1c:	f7fc fe02 	bl	30924 <z_impl_zsock_close>
   33d20:	e7ec      	b.n	33cfc <mqtt_client_tcp_connect+0x16>
	return 0;
   33d22:	2000      	movs	r0, #0
   33d24:	e7ee      	b.n	33d04 <mqtt_client_tcp_connect+0x1e>

00033d26 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   33d26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   33d2a:	2400      	movs	r4, #0
{
   33d2c:	4606      	mov	r6, r0
   33d2e:	460f      	mov	r7, r1
   33d30:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   33d32:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   33d34:	42ac      	cmp	r4, r5
   33d36:	d301      	bcc.n	33d3c <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   33d38:	2000      	movs	r0, #0
   33d3a:	e00d      	b.n	33d58 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   33d3c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   33d3e:	2300      	movs	r3, #0
   33d40:	e9cd 8800 	strd	r8, r8, [sp]
   33d44:	1b2a      	subs	r2, r5, r4
   33d46:	1939      	adds	r1, r7, r4
   33d48:	f7fc fe37 	bl	309ba <z_impl_zsock_sendto>
		if (ret < 0) {
   33d4c:	1e03      	subs	r3, r0, #0
   33d4e:	da06      	bge.n	33d5e <mqtt_client_tcp_write+0x38>
			return -errno;
   33d50:	f7fe fb90 	bl	32474 <__errno>
   33d54:	6800      	ldr	r0, [r0, #0]
   33d56:	4240      	negs	r0, r0
}
   33d58:	b002      	add	sp, #8
   33d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   33d5e:	441c      	add	r4, r3
   33d60:	e7e8      	b.n	33d34 <mqtt_client_tcp_write+0xe>

00033d62 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   33d62:	b508      	push	{r3, lr}
	int ret;

	ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   33d64:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   33d66:	2200      	movs	r2, #0
   33d68:	f7fc fe57 	bl	30a1a <z_impl_zsock_sendmsg>
	if (ret < 0) {
   33d6c:	2800      	cmp	r0, #0
   33d6e:	da04      	bge.n	33d7a <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   33d70:	f7fe fb80 	bl	32474 <__errno>
   33d74:	6800      	ldr	r0, [r0, #0]
   33d76:	4240      	negs	r0, r0
	}

	return 0;
}
   33d78:	bd08      	pop	{r3, pc}
	return 0;
   33d7a:	2000      	movs	r0, #0
   33d7c:	e7fc      	b.n	33d78 <mqtt_client_tcp_write_msg+0x16>

00033d7e <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   33d7e:	b513      	push	{r0, r1, r4, lr}
   33d80:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   33d82:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   33d84:	bf14      	ite	ne
   33d86:	4623      	movne	r3, r4
   33d88:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   33d8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   33d8c:	e9cd 4400 	strd	r4, r4, [sp]
   33d90:	f7fc fe6a 	bl	30a68 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   33d94:	2800      	cmp	r0, #0
   33d96:	da03      	bge.n	33da0 <mqtt_client_tcp_read+0x22>
		return -errno;
   33d98:	f7fe fb6c 	bl	32474 <__errno>
   33d9c:	6800      	ldr	r0, [r0, #0]
   33d9e:	4240      	negs	r0, r0
	}

	return ret;
}
   33da0:	b002      	add	sp, #8
   33da2:	bd10      	pop	{r4, pc}

00033da4 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   33da4:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   33da6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   33da8:	f7fc fdbc 	bl	30924 <z_impl_zsock_close>
	if (ret < 0) {
   33dac:	2800      	cmp	r0, #0
   33dae:	da04      	bge.n	33dba <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   33db0:	f7fe fb60 	bl	32474 <__errno>
   33db4:	6800      	ldr	r0, [r0, #0]
   33db6:	4240      	negs	r0, r0
	}

	return 0;
}
   33db8:	bd08      	pop	{r3, pc}
	return 0;
   33dba:	2000      	movs	r0, #0
   33dbc:	e7fc      	b.n	33db8 <mqtt_client_tcp_disconnect+0x14>

00033dbe <k_uptime_get>:
{
   33dbe:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   33dc0:	f003 fc03 	bl	375ca <z_impl_k_uptime_ticks>
   33dc4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   33dc8:	fba0 2304 	umull	r2, r3, r0, r4
   33dcc:	fb04 3301 	mla	r3, r4, r1, r3
   33dd0:	0bd0      	lsrs	r0, r2, #15
}
   33dd2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   33dd6:	0bd9      	lsrs	r1, r3, #15
   33dd8:	bd10      	pop	{r4, pc}

00033dda <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   33dda:	b538      	push	{r3, r4, r5, lr}
   33ddc:	4604      	mov	r4, r0
   33dde:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   33de0:	6f42      	ldr	r2, [r0, #116]	; 0x74
   33de2:	2100      	movs	r1, #0
   33de4:	6f00      	ldr	r0, [r0, #112]	; 0x70
   33de6:	f003 fcec 	bl	377c2 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   33dea:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   33dec:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   33dee:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   33df0:	4413      	add	r3, r2
   33df2:	606b      	str	r3, [r5, #4]
}
   33df4:	bd38      	pop	{r3, r4, r5, pc}

00033df6 <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   33df6:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   33df8:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   33dfa:	4604      	mov	r4, r0
   33dfc:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   33dfe:	b153      	cbz	r3, 33e16 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   33e00:	f7ea fc6a 	bl	1e6d8 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   33e04:	4620      	mov	r0, r4
   33e06:	4629      	mov	r1, r5
   33e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
   33e0a:	4798      	blx	r3

		mqtt_mutex_lock(client);
   33e0c:	4620      	mov	r0, r4
	}
}
   33e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   33e12:	f7ea bc7f 	b.w	1e714 <mqtt_mutex_lock>
}
   33e16:	bd38      	pop	{r3, r4, r5, pc}

00033e18 <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   33e18:	b530      	push	{r4, r5, lr}
   33e1a:	b089      	sub	sp, #36	; 0x24
   33e1c:	4604      	mov	r4, r0
   33e1e:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   33e20:	f7ea fc50 	bl	1e6c4 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   33e24:	2100      	movs	r1, #0

	/* Reset internal state. */
	client_reset(client);

	if (notify) {
		struct mqtt_evt evt = {
   33e26:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   33e28:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   33e2c:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   33e30:	4668      	mov	r0, sp
   33e32:	f003 fcc6 	bl	377c2 <memset>
   33e36:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   33e38:	4669      	mov	r1, sp
   33e3a:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   33e3c:	f88d 3000 	strb.w	r3, [sp]
   33e40:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   33e42:	f7ff ffd8 	bl	33df6 <event_notify>
	}
}
   33e46:	b009      	add	sp, #36	; 0x24
   33e48:	bd30      	pop	{r4, r5, pc}

00033e4a <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   33e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33e4e:	460f      	mov	r7, r1
   33e50:	4690      	mov	r8, r2
   33e52:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   33e54:	4605      	mov	r5, r0
   33e56:	b320      	cbz	r0, 33ea2 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   33e58:	f7ea fc5c 	bl	1e714 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   33e5c:	6a2c      	ldr	r4, [r5, #32]
   33e5e:	b1b4      	cbz	r4, 33e8e <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   33e60:	4544      	cmp	r4, r8
   33e62:	4622      	mov	r2, r4
   33e64:	4633      	mov	r3, r6
   33e66:	bf28      	it	cs
   33e68:	4642      	movcs	r2, r8
   33e6a:	4639      	mov	r1, r7
   33e6c:	4628      	mov	r0, r5
   33e6e:	f7ea fc1b 	bl	1e6a8 <mqtt_transport_read>
   33e72:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   33e74:	b916      	cbnz	r6, 33e7c <read_publish_payload+0x32>
   33e76:	f110 0f0b 	cmn.w	r0, #11
   33e7a:	d008      	beq.n	33e8e <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   33e7c:	2c00      	cmp	r4, #0
   33e7e:	dc0c      	bgt.n	33e9a <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   33e80:	bf08      	it	eq
   33e82:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   33e86:	4628      	mov	r0, r5
   33e88:	4621      	mov	r1, r4
   33e8a:	f7ff ffc5 	bl	33e18 <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   33e8e:	4628      	mov	r0, r5
   33e90:	f7ea fc22 	bl	1e6d8 <mqtt_mutex_unlock>

	return ret;
}
   33e94:	4620      	mov	r0, r4
   33e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   33e9a:	6a2b      	ldr	r3, [r5, #32]
   33e9c:	1b1b      	subs	r3, r3, r4
   33e9e:	622b      	str	r3, [r5, #32]
   33ea0:	e7f5      	b.n	33e8e <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   33ea2:	f06f 0415 	mvn.w	r4, #21
   33ea6:	e7f5      	b.n	33e94 <read_publish_payload+0x4a>

00033ea8 <client_write>:
{
   33ea8:	b538      	push	{r3, r4, r5, lr}
   33eaa:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   33eac:	f7ea fbe4 	bl	1e678 <mqtt_transport_write>
	if (err_code < 0) {
   33eb0:	1e04      	subs	r4, r0, #0
   33eb2:	da05      	bge.n	33ec0 <client_write+0x18>
		client_disconnect(client, err_code, true);
   33eb4:	4621      	mov	r1, r4
   33eb6:	4628      	mov	r0, r5
   33eb8:	f7ff ffae 	bl	33e18 <client_disconnect.constprop.0>
}
   33ebc:	4620      	mov	r0, r4
   33ebe:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   33ec0:	f7ff ff7d 	bl	33dbe <k_uptime_get>
	return 0;
   33ec4:	2400      	movs	r4, #0
   33ec6:	6168      	str	r0, [r5, #20]
   33ec8:	e7f8      	b.n	33ebc <client_write+0x14>

00033eca <mqtt_client_init>:
{
   33eca:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   33ecc:	4604      	mov	r4, r0
   33ece:	b1a0      	cbz	r0, 33efa <mqtt_client_init+0x30>
   33ed0:	2280      	movs	r2, #128	; 0x80
   33ed2:	2100      	movs	r1, #0
   33ed4:	f003 fc75 	bl	377c2 <memset>
	MQTT_STATE_INIT(client);
   33ed8:	2300      	movs	r3, #0
   33eda:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   33edc:	4620      	mov	r0, r4
   33ede:	f003 faaa 	bl	37436 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   33ee2:	2304      	movs	r3, #4
   33ee4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = MQTT_CLEAN_SESSION;
   33ee8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   33eec:	f043 0302 	orr.w	r3, r3, #2
   33ef0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   33ef4:	233c      	movs	r3, #60	; 0x3c
   33ef6:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   33efa:	bd10      	pop	{r4, pc}

00033efc <mqtt_connect>:
{
   33efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   33efe:	4605      	mov	r5, r0
   33f00:	2800      	cmp	r0, #0
   33f02:	d03b      	beq.n	33f7c <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   33f04:	6c83      	ldr	r3, [r0, #72]	; 0x48
   33f06:	2b00      	cmp	r3, #0
   33f08:	d038      	beq.n	33f7c <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   33f0a:	f7ea fc03 	bl	1e714 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   33f0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   33f10:	b38b      	cbz	r3, 33f76 <mqtt_connect+0x7a>
   33f12:	6eab      	ldr	r3, [r5, #104]	; 0x68
   33f14:	b37b      	cbz	r3, 33f76 <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   33f16:	4628      	mov	r0, r5
   33f18:	f7ea fba4 	bl	1e664 <mqtt_transport_connect>
	if (err_code < 0) {
   33f1c:	1e04      	subs	r4, r0, #0
   33f1e:	db24      	blt.n	33f6a <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   33f20:	4669      	mov	r1, sp
   33f22:	4628      	mov	r0, r5
   33f24:	f7ff ff59 	bl	33dda <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   33f28:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   33f2a:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   33f2c:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   33f30:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   33f32:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   33f34:	f7ea faf2 	bl	1e51c <connect_request_encode>
	if (err_code < 0) {
   33f38:	1e04      	subs	r4, r0, #0
   33f3a:	db13      	blt.n	33f64 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   33f3c:	e9dd 1200 	ldrd	r1, r2, [sp]
   33f40:	4628      	mov	r0, r5
   33f42:	1a52      	subs	r2, r2, r1
   33f44:	f7ea fb98 	bl	1e678 <mqtt_transport_write>
	if (err_code < 0) {
   33f48:	1e04      	subs	r4, r0, #0
   33f4a:	db0b      	blt.n	33f64 <mqtt_connect+0x68>
   33f4c:	f7ff ff37 	bl	33dbe <k_uptime_get>
	client->unacked_ping = 0;
   33f50:	2400      	movs	r4, #0
   33f52:	6168      	str	r0, [r5, #20]
   33f54:	f885 407b 	strb.w	r4, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   33f58:	4628      	mov	r0, r5
   33f5a:	f7ea fbbd 	bl	1e6d8 <mqtt_mutex_unlock>
}
   33f5e:	4620      	mov	r0, r4
   33f60:	b003      	add	sp, #12
   33f62:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   33f64:	4628      	mov	r0, r5
   33f66:	f7ea fbad 	bl	1e6c4 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   33f6a:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   33f6c:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   33f70:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   33f74:	e7f0      	b.n	33f58 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   33f76:	f06f 040b 	mvn.w	r4, #11
   33f7a:	e7f6      	b.n	33f6a <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   33f7c:	f06f 0415 	mvn.w	r4, #21
   33f80:	e7ed      	b.n	33f5e <mqtt_connect+0x62>

00033f82 <mqtt_publish>:
{
   33f82:	b570      	push	{r4, r5, r6, lr}
   33f84:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   33f86:	4605      	mov	r5, r0
{
   33f88:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   33f8a:	2800      	cmp	r0, #0
   33f8c:	d03b      	beq.n	34006 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   33f8e:	2900      	cmp	r1, #0
   33f90:	d039      	beq.n	34006 <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   33f92:	f7ea fbbf 	bl	1e714 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   33f96:	4628      	mov	r0, r5
   33f98:	a901      	add	r1, sp, #4
   33f9a:	f7ff ff1e 	bl	33dda <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   33f9e:	69ab      	ldr	r3, [r5, #24]
   33fa0:	075b      	lsls	r3, r3, #29
   33fa2:	d52d      	bpl.n	34000 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   33fa4:	4630      	mov	r0, r6
   33fa6:	a901      	add	r1, sp, #4
   33fa8:	f7ff fd1c 	bl	339e4 <publish_encode>
	if (err_code < 0) {
   33fac:	1e04      	subs	r4, r0, #0
   33fae:	db1c      	blt.n	33fea <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   33fb0:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   33fb2:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   33fb4:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   33fb6:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   33fb8:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   33fba:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   33fbc:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   33fbe:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   33fc0:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   33fc2:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   33fc4:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   33fc8:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   33fca:	f003 fbfa 	bl	377c2 <memset>
	msg.msg_iov = io_vector;
   33fce:	ab03      	add	r3, sp, #12
   33fd0:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   33fd2:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   33fd4:	4628      	mov	r0, r5
   33fd6:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   33fd8:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   33fda:	f7ea fb59 	bl	1e690 <mqtt_transport_write_msg>
	if (err_code < 0) {
   33fde:	1e04      	subs	r4, r0, #0
   33fe0:	da09      	bge.n	33ff6 <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   33fe2:	4621      	mov	r1, r4
   33fe4:	4628      	mov	r0, r5
   33fe6:	f7ff ff17 	bl	33e18 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   33fea:	4628      	mov	r0, r5
   33fec:	f7ea fb74 	bl	1e6d8 <mqtt_mutex_unlock>
}
   33ff0:	4620      	mov	r0, r4
   33ff2:	b00e      	add	sp, #56	; 0x38
   33ff4:	bd70      	pop	{r4, r5, r6, pc}
   33ff6:	f7ff fee2 	bl	33dbe <k_uptime_get>
	return 0;
   33ffa:	2400      	movs	r4, #0
   33ffc:	6168      	str	r0, [r5, #20]
   33ffe:	e7f4      	b.n	33fea <mqtt_publish+0x68>
		return -ENOTCONN;
   34000:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   34004:	e7f1      	b.n	33fea <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   34006:	f06f 0415 	mvn.w	r4, #21
   3400a:	e7f1      	b.n	33ff0 <mqtt_publish+0x6e>

0003400c <mqtt_publish_qos1_ack>:
{
   3400c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3400e:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   34010:	4605      	mov	r5, r0
   34012:	b1f8      	cbz	r0, 34054 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   34014:	b1f1      	cbz	r1, 34054 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   34016:	f7ea fb7d 	bl	1e714 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3401a:	4669      	mov	r1, sp
   3401c:	4628      	mov	r0, r5
   3401e:	f7ff fedc 	bl	33dda <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   34022:	69ab      	ldr	r3, [r5, #24]
   34024:	075b      	lsls	r3, r3, #29
   34026:	d512      	bpl.n	3404e <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   34028:	4620      	mov	r0, r4
   3402a:	4669      	mov	r1, sp
   3402c:	f7ff fd1b 	bl	33a66 <publish_ack_encode>
	if (err_code < 0) {
   34030:	1e04      	subs	r4, r0, #0
   34032:	db06      	blt.n	34042 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   34034:	e9dd 1200 	ldrd	r1, r2, [sp]
   34038:	4628      	mov	r0, r5
   3403a:	1a52      	subs	r2, r2, r1
   3403c:	f7ff ff34 	bl	33ea8 <client_write>
   34040:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   34042:	4628      	mov	r0, r5
   34044:	f7ea fb48 	bl	1e6d8 <mqtt_mutex_unlock>
}
   34048:	4620      	mov	r0, r4
   3404a:	b003      	add	sp, #12
   3404c:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3404e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   34052:	e7f6      	b.n	34042 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   34054:	f06f 0415 	mvn.w	r4, #21
   34058:	e7f6      	b.n	34048 <mqtt_publish_qos1_ack+0x3c>

0003405a <mqtt_publish_qos2_release>:
{
   3405a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3405c:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3405e:	4605      	mov	r5, r0
   34060:	b1f8      	cbz	r0, 340a2 <mqtt_publish_qos2_release+0x48>
	NULL_PARAM_CHECK(param);
   34062:	b1f1      	cbz	r1, 340a2 <mqtt_publish_qos2_release+0x48>
	mqtt_mutex_lock(client);
   34064:	f7ea fb56 	bl	1e714 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   34068:	4669      	mov	r1, sp
   3406a:	4628      	mov	r0, r5
   3406c:	f7ff feb5 	bl	33dda <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   34070:	69ab      	ldr	r3, [r5, #24]
   34072:	075b      	lsls	r3, r3, #29
   34074:	d512      	bpl.n	3409c <mqtt_publish_qos2_release+0x42>
	err_code = publish_release_encode(param, &packet);
   34076:	4620      	mov	r0, r4
   34078:	4669      	mov	r1, sp
   3407a:	f7ff fcf9 	bl	33a70 <publish_release_encode>
	if (err_code < 0) {
   3407e:	1e04      	subs	r4, r0, #0
   34080:	db06      	blt.n	34090 <mqtt_publish_qos2_release+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   34082:	e9dd 1200 	ldrd	r1, r2, [sp]
   34086:	4628      	mov	r0, r5
   34088:	1a52      	subs	r2, r2, r1
   3408a:	f7ff ff0d 	bl	33ea8 <client_write>
   3408e:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   34090:	4628      	mov	r0, r5
   34092:	f7ea fb21 	bl	1e6d8 <mqtt_mutex_unlock>
}
   34096:	4620      	mov	r0, r4
   34098:	b003      	add	sp, #12
   3409a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3409c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   340a0:	e7f6      	b.n	34090 <mqtt_publish_qos2_release+0x36>
	NULL_PARAM_CHECK(client);
   340a2:	f06f 0415 	mvn.w	r4, #21
   340a6:	e7f6      	b.n	34096 <mqtt_publish_qos2_release+0x3c>

000340a8 <mqtt_disconnect>:
{
   340a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   340aa:	4605      	mov	r5, r0
   340ac:	b310      	cbz	r0, 340f4 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   340ae:	f7ea fb31 	bl	1e714 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   340b2:	4669      	mov	r1, sp
   340b4:	4628      	mov	r0, r5
   340b6:	f7ff fe90 	bl	33dda <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   340ba:	69ab      	ldr	r3, [r5, #24]
   340bc:	075b      	lsls	r3, r3, #29
   340be:	d516      	bpl.n	340ee <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   340c0:	4668      	mov	r0, sp
   340c2:	f7ea faab 	bl	1e61c <disconnect_encode>
	if (err_code < 0) {
   340c6:	1e04      	subs	r4, r0, #0
   340c8:	db0b      	blt.n	340e2 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   340ca:	e9dd 1200 	ldrd	r1, r2, [sp]
   340ce:	4628      	mov	r0, r5
   340d0:	1a52      	subs	r2, r2, r1
   340d2:	f7ff fee9 	bl	33ea8 <client_write>
	if (err_code < 0) {
   340d6:	1e04      	subs	r4, r0, #0
   340d8:	db03      	blt.n	340e2 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   340da:	2100      	movs	r1, #0
   340dc:	4628      	mov	r0, r5
   340de:	f7ff fe9b 	bl	33e18 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   340e2:	4628      	mov	r0, r5
   340e4:	f7ea faf8 	bl	1e6d8 <mqtt_mutex_unlock>
}
   340e8:	4620      	mov	r0, r4
   340ea:	b003      	add	sp, #12
   340ec:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   340ee:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   340f2:	e7f6      	b.n	340e2 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   340f4:	f06f 0415 	mvn.w	r4, #21
   340f8:	e7f6      	b.n	340e8 <mqtt_disconnect+0x40>

000340fa <mqtt_subscribe>:
{
   340fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   340fc:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   340fe:	4605      	mov	r5, r0
   34100:	b1f8      	cbz	r0, 34142 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   34102:	b1f1      	cbz	r1, 34142 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   34104:	f7ea fb06 	bl	1e714 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   34108:	4669      	mov	r1, sp
   3410a:	4628      	mov	r0, r5
   3410c:	f7ff fe65 	bl	33dda <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   34110:	69ab      	ldr	r3, [r5, #24]
   34112:	075b      	lsls	r3, r3, #29
   34114:	d512      	bpl.n	3413c <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   34116:	4620      	mov	r0, r4
   34118:	4669      	mov	r1, sp
   3411a:	f7ff fcae 	bl	33a7a <subscribe_encode>
	if (err_code < 0) {
   3411e:	1e04      	subs	r4, r0, #0
   34120:	db06      	blt.n	34130 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   34122:	e9dd 1200 	ldrd	r1, r2, [sp]
   34126:	4628      	mov	r0, r5
   34128:	1a52      	subs	r2, r2, r1
   3412a:	f7ff febd 	bl	33ea8 <client_write>
   3412e:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   34130:	4628      	mov	r0, r5
   34132:	f7ea fad1 	bl	1e6d8 <mqtt_mutex_unlock>
}
   34136:	4620      	mov	r0, r4
   34138:	b003      	add	sp, #12
   3413a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3413c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   34140:	e7f6      	b.n	34130 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   34142:	f06f 0415 	mvn.w	r4, #21
   34146:	e7f6      	b.n	34136 <mqtt_subscribe+0x3c>

00034148 <mqtt_ping>:
{
   34148:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3414a:	4605      	mov	r5, r0
   3414c:	b320      	cbz	r0, 34198 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   3414e:	f7ea fae1 	bl	1e714 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   34152:	4669      	mov	r1, sp
   34154:	4628      	mov	r0, r5
   34156:	f7ff fe40 	bl	33dda <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3415a:	69ab      	ldr	r3, [r5, #24]
   3415c:	075b      	lsls	r3, r3, #29
   3415e:	d518      	bpl.n	34192 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   34160:	4668      	mov	r0, sp
   34162:	f7ea fa6d 	bl	1e640 <ping_request_encode>
	if (err_code < 0) {
   34166:	1e04      	subs	r4, r0, #0
   34168:	db0d      	blt.n	34186 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3416a:	e9dd 1200 	ldrd	r1, r2, [sp]
   3416e:	4628      	mov	r0, r5
   34170:	1a52      	subs	r2, r2, r1
   34172:	f7ff fe99 	bl	33ea8 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   34176:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3417a:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   3417c:	2b7f      	cmp	r3, #127	; 0x7f
   3417e:	d002      	beq.n	34186 <mqtt_ping+0x3e>
		client->unacked_ping++;
   34180:	3301      	adds	r3, #1
   34182:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   34186:	4628      	mov	r0, r5
   34188:	f7ea faa6 	bl	1e6d8 <mqtt_mutex_unlock>
}
   3418c:	4620      	mov	r0, r4
   3418e:	b003      	add	sp, #12
   34190:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   34192:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   34196:	e7f6      	b.n	34186 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   34198:	f06f 0415 	mvn.w	r4, #21
   3419c:	e7f6      	b.n	3418c <mqtt_ping+0x44>

0003419e <mqtt_live>:
{
   3419e:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   341a0:	4606      	mov	r6, r0
   341a2:	b300      	cbz	r0, 341e6 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   341a4:	f7ea fab6 	bl	1e714 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   341a8:	6974      	ldr	r4, [r6, #20]
   341aa:	f7ff fe08 	bl	33dbe <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   341ae:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   341b0:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   341b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   341b8:	b19c      	cbz	r4, 341e2 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   341ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   341be:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   341c0:	4284      	cmp	r4, r0
   341c2:	d80d      	bhi.n	341e0 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   341c4:	4630      	mov	r0, r6
   341c6:	f7ff ffbf 	bl	34148 <mqtt_ping>
		ping_sent = true;
   341ca:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   341cc:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   341ce:	4630      	mov	r0, r6
   341d0:	f7ea fa82 	bl	1e6d8 <mqtt_mutex_unlock>
		return -EAGAIN;
   341d4:	2c00      	cmp	r4, #0
   341d6:	bf08      	it	eq
   341d8:	f06f 050a 	mvneq.w	r5, #10
}
   341dc:	4628      	mov	r0, r5
   341de:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   341e0:	2400      	movs	r4, #0
	int err_code = 0;
   341e2:	4625      	mov	r5, r4
   341e4:	e7f3      	b.n	341ce <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   341e6:	f06f 0515 	mvn.w	r5, #21
   341ea:	e7f7      	b.n	341dc <mqtt_live+0x3e>

000341ec <mqtt_keepalive_time_left>:
{
   341ec:	b538      	push	{r3, r4, r5, lr}
   341ee:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   341f0:	6945      	ldr	r5, [r0, #20]
   341f2:	f7ff fde4 	bl	33dbe <k_uptime_get>
	int32_t diff = k_uptime_get_32() - last_activity;
   341f6:	1b43      	subs	r3, r0, r5
	uint32_t keepalive_ms = 1000U * client->keepalive;
   341f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   341fc:	f8b4 2078 	ldrh.w	r2, [r4, #120]	; 0x78
		return 0;
   34200:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   34204:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   34206:	b11a      	cbz	r2, 34210 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   34208:	4298      	cmp	r0, r3
   3420a:	d904      	bls.n	34216 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   3420c:	1ac0      	subs	r0, r0, r3
}
   3420e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   34210:	f04f 30ff 	mov.w	r0, #4294967295
   34214:	e7fb      	b.n	3420e <mqtt_keepalive_time_left+0x22>
		return 0;
   34216:	2000      	movs	r0, #0
   34218:	e7f9      	b.n	3420e <mqtt_keepalive_time_left+0x22>

0003421a <mqtt_input>:
{
   3421a:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3421c:	4605      	mov	r5, r0
   3421e:	b1d0      	cbz	r0, 34256 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   34220:	f7ea fa78 	bl	1e714 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   34224:	69ab      	ldr	r3, [r5, #24]
   34226:	079b      	lsls	r3, r3, #30
   34228:	d50f      	bpl.n	3424a <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   3422a:	6a2b      	ldr	r3, [r5, #32]
   3422c:	b983      	cbnz	r3, 34250 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3422e:	4628      	mov	r0, r5
   34230:	f7ff fc85 	bl	33b3e <mqtt_handle_rx>
	if (err_code < 0) {
   34234:	1e04      	subs	r4, r0, #0
   34236:	da03      	bge.n	34240 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   34238:	4621      	mov	r1, r4
   3423a:	4628      	mov	r0, r5
   3423c:	f7ff fdec 	bl	33e18 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   34240:	4628      	mov	r0, r5
   34242:	f7ea fa49 	bl	1e6d8 <mqtt_mutex_unlock>
}
   34246:	4620      	mov	r0, r4
   34248:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   3424a:	f06f 040c 	mvn.w	r4, #12
   3424e:	e7f7      	b.n	34240 <mqtt_input+0x26>
		return -EBUSY;
   34250:	f06f 040f 	mvn.w	r4, #15
   34254:	e7f4      	b.n	34240 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   34256:	f06f 0415 	mvn.w	r4, #21
   3425a:	e7f4      	b.n	34246 <mqtt_input+0x2c>

0003425c <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3425c:	2301      	movs	r3, #1
   3425e:	f7ff bdf4 	b.w	33e4a <read_publish_payload>

00034262 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   34262:	b570      	push	{r4, r5, r6, lr}
   34264:	4606      	mov	r6, r0
   34266:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   34268:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3426a:	42ac      	cmp	r4, r5
   3426c:	d301      	bcc.n	34272 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3426e:	2000      	movs	r0, #0
}
   34270:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   34272:	4621      	mov	r1, r4
   34274:	4630      	mov	r0, r6
   34276:	1b2a      	subs	r2, r5, r4
   34278:	f7ff fff0 	bl	3425c <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3427c:	2800      	cmp	r0, #0
   3427e:	dbf7      	blt.n	34270 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   34280:	d001      	beq.n	34286 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   34282:	4404      	add	r4, r0
   34284:	e7f1      	b.n	3426a <mqtt_readall_publish_payload+0x8>
			return -EIO;
   34286:	f06f 0004 	mvn.w	r0, #4
   3428a:	e7f1      	b.n	34270 <mqtt_readall_publish_payload+0xe>

0003428c <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   3428c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sockaddr *broker = client->broker;
   3428e:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   34290:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   34292:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   34294:	f44f 7281 	mov.w	r2, #258	; 0x102
   34298:	2101      	movs	r1, #1
   3429a:	f7e1 fbe1 	bl	15a60 <z_impl_zsock_socket>
						  SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   3429e:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   342a0:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   342a2:	da05      	bge.n	342b0 <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   342a4:	f7fe f8e6 	bl	32474 <__errno>
   342a8:	6800      	ldr	r0, [r0, #0]
   342aa:	4240      	negs	r0, r0
}
   342ac:	b003      	add	sp, #12
   342ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   342b0:	2304      	movs	r3, #4
   342b2:	2205      	movs	r2, #5
   342b4:	9300      	str	r3, [sp, #0]
   342b6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   342ba:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   342be:	f7fc fc03 	bl	30ac8 <z_impl_zsock_setsockopt>
	if (ret < 0) {
   342c2:	2800      	cmp	r0, #0
   342c4:	da03      	bge.n	342ce <mqtt_client_tls_connect+0x42>
	(void) zsock_close(client->transport.tls.sock);
   342c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   342c8:	f7fc fb2c 	bl	30924 <z_impl_zsock_close>
   342cc:	e7ea      	b.n	342a4 <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   342ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   342d0:	bb03      	cbnz	r3, 34314 <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   342d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   342d4:	bb63      	cbnz	r3, 34330 <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   342d6:	6c26      	ldr	r6, [r4, #64]	; 0x40
   342d8:	2e00      	cmp	r6, #0
   342da:	d137      	bne.n	3434c <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   342dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   342de:	2b01      	cmp	r3, #1
   342e0:	d10b      	bne.n	342fa <mqtt_client_tls_connect+0x6e>
   342e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   342e4:	2304      	movs	r3, #4
   342e6:	220a      	movs	r2, #10
   342e8:	9300      	str	r3, [sp, #0]
   342ea:	f44f 718d 	mov.w	r1, #282	; 0x11a
   342ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
   342f2:	f7fc fbe9 	bl	30ac8 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   342f6:	2800      	cmp	r0, #0
   342f8:	dbe5      	blt.n	342c6 <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   342fa:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   342fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   342fe:	2b01      	cmp	r3, #1
   34300:	bf0c      	ite	eq
   34302:	2208      	moveq	r2, #8
   34304:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   34306:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   34308:	f7fc fb30 	bl	3096c <z_impl_zsock_connect>
	if (ret < 0) {
   3430c:	2800      	cmp	r0, #0
   3430e:	dbda      	blt.n	342c6 <mqtt_client_tls_connect+0x3a>
	return 0;
   34310:	2000      	movs	r0, #0
   34312:	e7cb      	b.n	342ac <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   34314:	6b22      	ldr	r2, [r4, #48]	; 0x30
   34316:	2a00      	cmp	r2, #0
   34318:	d0db      	beq.n	342d2 <mqtt_client_tls_connect+0x46>
   3431a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   3431c:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3431e:	9200      	str	r2, [sp, #0]
   34320:	f44f 718d 	mov.w	r1, #282	; 0x11a
   34324:	2203      	movs	r2, #3
   34326:	f7fc fbcf 	bl	30ac8 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3432a:	2800      	cmp	r0, #0
   3432c:	dad1      	bge.n	342d2 <mqtt_client_tls_connect+0x46>
   3432e:	e7ca      	b.n	342c6 <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   34330:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   34332:	2a00      	cmp	r2, #0
   34334:	d0cf      	beq.n	342d6 <mqtt_client_tls_connect+0x4a>
   34336:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   34338:	0092      	lsls	r2, r2, #2
   3433a:	9200      	str	r2, [sp, #0]
   3433c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   34340:	2201      	movs	r2, #1
   34342:	f7fc fbc1 	bl	30ac8 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   34346:	2800      	cmp	r0, #0
   34348:	dac5      	bge.n	342d6 <mqtt_client_tls_connect+0x4a>
   3434a:	e7bc      	b.n	342c6 <mqtt_client_tls_connect+0x3a>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   3434c:	4630      	mov	r0, r6
   3434e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   34350:	f7dd f8d6 	bl	11500 <strlen>
   34354:	2202      	movs	r2, #2
   34356:	9000      	str	r0, [sp, #0]
   34358:	4633      	mov	r3, r6
   3435a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3435e:	4638      	mov	r0, r7
   34360:	f7fc fbb2 	bl	30ac8 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   34364:	2800      	cmp	r0, #0
   34366:	dab9      	bge.n	342dc <mqtt_client_tls_connect+0x50>
   34368:	e7ad      	b.n	342c6 <mqtt_client_tls_connect+0x3a>

0003436a <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3436a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3436e:	2400      	movs	r4, #0
{
   34370:	4606      	mov	r6, r0
   34372:	460f      	mov	r7, r1
   34374:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   34376:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   34378:	42ac      	cmp	r4, r5
   3437a:	d301      	bcc.n	34380 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3437c:	2000      	movs	r0, #0
   3437e:	e00d      	b.n	3439c <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   34380:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   34382:	2300      	movs	r3, #0
   34384:	e9cd 8800 	strd	r8, r8, [sp]
   34388:	1b2a      	subs	r2, r5, r4
   3438a:	1939      	adds	r1, r7, r4
   3438c:	f7fc fb15 	bl	309ba <z_impl_zsock_sendto>
		if (ret < 0) {
   34390:	1e03      	subs	r3, r0, #0
   34392:	da06      	bge.n	343a2 <mqtt_client_tls_write+0x38>
			return -errno;
   34394:	f7fe f86e 	bl	32474 <__errno>
   34398:	6800      	ldr	r0, [r0, #0]
   3439a:	4240      	negs	r0, r0
}
   3439c:	b002      	add	sp, #8
   3439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   343a2:	441c      	add	r4, r3
   343a4:	e7e8      	b.n	34378 <mqtt_client_tls_write+0xe>

000343a6 <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   343a6:	b508      	push	{r3, lr}
	int ret;

	ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   343a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   343aa:	2200      	movs	r2, #0
   343ac:	f7fc fb35 	bl	30a1a <z_impl_zsock_sendmsg>
	if (ret < 0) {
   343b0:	2800      	cmp	r0, #0
   343b2:	da04      	bge.n	343be <mqtt_client_tls_write_msg+0x18>
		return -errno;
   343b4:	f7fe f85e 	bl	32474 <__errno>
   343b8:	6800      	ldr	r0, [r0, #0]
   343ba:	4240      	negs	r0, r0
	}

	return 0;
}
   343bc:	bd08      	pop	{r3, pc}
	return 0;
   343be:	2000      	movs	r0, #0
   343c0:	e7fc      	b.n	343bc <mqtt_client_tls_write_msg+0x16>

000343c2 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   343c2:	b513      	push	{r0, r1, r4, lr}
   343c4:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   343c6:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   343c8:	bf14      	ite	ne
   343ca:	4623      	movne	r3, r4
   343cc:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   343ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   343d0:	e9cd 4400 	strd	r4, r4, [sp]
   343d4:	f7fc fb48 	bl	30a68 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   343d8:	2800      	cmp	r0, #0
   343da:	da03      	bge.n	343e4 <mqtt_client_tls_read+0x22>
		return -errno;
   343dc:	f7fe f84a 	bl	32474 <__errno>
   343e0:	6800      	ldr	r0, [r0, #0]
   343e2:	4240      	negs	r0, r0
	}

	return ret;
}
   343e4:	b002      	add	sp, #8
   343e6:	bd10      	pop	{r4, pc}

000343e8 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   343e8:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   343ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   343ec:	f7fc fa9a 	bl	30924 <z_impl_zsock_close>
	if (ret < 0) {
   343f0:	2800      	cmp	r0, #0
   343f2:	da04      	bge.n	343fe <mqtt_client_tls_disconnect+0x16>
		return -errno;
   343f4:	f7fe f83e 	bl	32474 <__errno>
   343f8:	6800      	ldr	r0, [r0, #0]
   343fa:	4240      	negs	r0, r0
	}

	return 0;
}
   343fc:	bd08      	pop	{r3, pc}
	return 0;
   343fe:	2000      	movs	r0, #0
   34400:	e7fc      	b.n	343fc <mqtt_client_tls_disconnect+0x14>

00034402 <base64_char>:
	if (value < 26) {
   34402:	2819      	cmp	r0, #25
   34404:	dc01      	bgt.n	3440a <base64_char+0x8>
		return value + 'A';
   34406:	3041      	adds	r0, #65	; 0x41
   34408:	4770      	bx	lr
	} else if (value < 52) {
   3440a:	2833      	cmp	r0, #51	; 0x33
   3440c:	dc01      	bgt.n	34412 <base64_char+0x10>
		return value + 'a' - 26;
   3440e:	3047      	adds	r0, #71	; 0x47
   34410:	4770      	bx	lr
	} else if (value < 62) {
   34412:	283d      	cmp	r0, #61	; 0x3d
   34414:	dc01      	bgt.n	3441a <base64_char+0x18>
		return value + '0' - 52;
   34416:	3804      	subs	r0, #4
   34418:	4770      	bx	lr
	} else if (value == 62) {
   3441a:	283e      	cmp	r0, #62	; 0x3e
		return '_';
   3441c:	bf0c      	ite	eq
   3441e:	202d      	moveq	r0, #45	; 0x2d
   34420:	205f      	movne	r0, #95	; 0x5f
}
   34422:	4770      	bx	lr

00034424 <base64_outch>:
	if (st->overflowed) {
   34424:	7b02      	ldrb	r2, [r0, #12]
{
   34426:	b510      	push	{r4, lr}
	if (st->overflowed) {
   34428:	b922      	cbnz	r2, 34434 <base64_outch+0x10>
	if (st->len < 2) {
   3442a:	6883      	ldr	r3, [r0, #8]
   3442c:	2b01      	cmp	r3, #1
   3442e:	d802      	bhi.n	34436 <base64_outch+0x12>
		st->overflowed = true;
   34430:	2301      	movs	r3, #1
   34432:	7303      	strb	r3, [r0, #12]
}
   34434:	bd10      	pop	{r4, pc}
	*st->buf++ = ch;
   34436:	6843      	ldr	r3, [r0, #4]
   34438:	1c5c      	adds	r4, r3, #1
   3443a:	6044      	str	r4, [r0, #4]
   3443c:	7019      	strb	r1, [r3, #0]
	st->len--;
   3443e:	6883      	ldr	r3, [r0, #8]
   34440:	3b01      	subs	r3, #1
   34442:	6083      	str	r3, [r0, #8]
	*st->buf = 0;
   34444:	6843      	ldr	r3, [r0, #4]
   34446:	701a      	strb	r2, [r3, #0]
   34448:	e7f4      	b.n	34434 <base64_outch+0x10>

0003444a <base64_flush>:
	if (st->pending < 1) {
   3444a:	6903      	ldr	r3, [r0, #16]
{
   3444c:	b510      	push	{r4, lr}
	if (st->pending < 1) {
   3444e:	2b00      	cmp	r3, #0
{
   34450:	4604      	mov	r4, r0
	if (st->pending < 1) {
   34452:	dd35      	ble.n	344c0 <base64_flush+0x76>
	base64_outch(st, base64_char(st->wip[0] >> 2));
   34454:	7b40      	ldrb	r0, [r0, #13]
   34456:	0880      	lsrs	r0, r0, #2
   34458:	f7ff ffd3 	bl	34402 <base64_char>
   3445c:	b2c1      	uxtb	r1, r0
   3445e:	4620      	mov	r0, r4
   34460:	f7ff ffe0 	bl	34424 <base64_outch>
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   34464:	7b63      	ldrb	r3, [r4, #13]
				(st->wip[1] >> 4)));
   34466:	7ba0      	ldrb	r0, [r4, #14]
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   34468:	011b      	lsls	r3, r3, #4
   3446a:	f003 0330 	and.w	r3, r3, #48	; 0x30
   3446e:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
   34472:	f7ff ffc6 	bl	34402 <base64_char>
   34476:	b2c1      	uxtb	r1, r0
   34478:	4620      	mov	r0, r4
   3447a:	f7ff ffd3 	bl	34424 <base64_outch>
	if (st->pending >= 2) {
   3447e:	6923      	ldr	r3, [r4, #16]
   34480:	2b01      	cmp	r3, #1
   34482:	dd0c      	ble.n	3449e <base64_flush+0x54>
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   34484:	7ba3      	ldrb	r3, [r4, #14]
				(st->wip[2] >> 6)));
   34486:	7be0      	ldrb	r0, [r4, #15]
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   34488:	009b      	lsls	r3, r3, #2
   3448a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   3448e:	ea43 1090 	orr.w	r0, r3, r0, lsr #6
   34492:	f7ff ffb6 	bl	34402 <base64_char>
   34496:	b2c1      	uxtb	r1, r0
   34498:	4620      	mov	r0, r4
   3449a:	f7ff ffc3 	bl	34424 <base64_outch>
	if (st->pending >= 3) {
   3449e:	6923      	ldr	r3, [r4, #16]
   344a0:	2b02      	cmp	r3, #2
   344a2:	dd08      	ble.n	344b6 <base64_flush+0x6c>
		base64_outch(st, base64_char(st->wip[2] & 0x3f));
   344a4:	7be0      	ldrb	r0, [r4, #15]
   344a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   344aa:	f7ff ffaa 	bl	34402 <base64_char>
   344ae:	b2c1      	uxtb	r1, r0
   344b0:	4620      	mov	r0, r4
   344b2:	f7ff ffb7 	bl	34424 <base64_outch>
	st->pending = 0;
   344b6:	2300      	movs	r3, #0
   344b8:	6123      	str	r3, [r4, #16]
   344ba:	f8a4 300d 	strh.w	r3, [r4, #13]
   344be:	73e3      	strb	r3, [r4, #15]
}
   344c0:	bd10      	pop	{r4, pc}

000344c2 <base64_append_bytes>:
{
   344c2:	b570      	push	{r4, r5, r6, lr}
   344c4:	4604      	mov	r4, r0
   344c6:	4615      	mov	r5, r2
	while (len-- > 0) {
   344c8:	1846      	adds	r6, r0, r1
   344ca:	42b4      	cmp	r4, r6
   344cc:	d101      	bne.n	344d2 <base64_append_bytes+0x10>
}
   344ce:	2000      	movs	r0, #0
   344d0:	bd70      	pop	{r4, r5, r6, pc}
	st->wip[st->pending++] = byte;
   344d2:	692b      	ldr	r3, [r5, #16]
		base64_addbyte(st, *bytes++);
   344d4:	f814 1b01 	ldrb.w	r1, [r4], #1
	st->wip[st->pending++] = byte;
   344d8:	1c5a      	adds	r2, r3, #1
	if (st->pending == 3) {
   344da:	2a03      	cmp	r2, #3
	st->wip[st->pending++] = byte;
   344dc:	442b      	add	r3, r5
   344de:	612a      	str	r2, [r5, #16]
   344e0:	7359      	strb	r1, [r3, #13]
	if (st->pending == 3) {
   344e2:	d1f2      	bne.n	344ca <base64_append_bytes+0x8>
		base64_flush(st);
   344e4:	4628      	mov	r0, r5
   344e6:	f7ff ffb0 	bl	3444a <base64_flush>
   344ea:	e7ee      	b.n	344ca <base64_append_bytes+0x8>

000344ec <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   344ec:	6843      	ldr	r3, [r0, #4]
}
   344ee:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   344f0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   344f2:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   344f4:	600b      	str	r3, [r1, #0]
}
   344f6:	4770      	bx	lr

000344f8 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   344f8:	6843      	ldr	r3, [r0, #4]
   344fa:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   344fc:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   344fe:	4042      	eors	r2, r0
   34500:	400a      	ands	r2, r1
   34502:	4042      	eors	r2, r0
    p_reg->OUT = value;
   34504:	605a      	str	r2, [r3, #4]
}
   34506:	2000      	movs	r0, #0
   34508:	4770      	bx	lr

0003450a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3450a:	6843      	ldr	r3, [r0, #4]
}
   3450c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3450e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   34510:	6099      	str	r1, [r3, #8]
}
   34512:	4770      	bx	lr

00034514 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   34514:	6843      	ldr	r3, [r0, #4]
}
   34516:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   34518:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3451a:	60d9      	str	r1, [r3, #12]
}
   3451c:	4770      	bx	lr

0003451e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3451e:	6843      	ldr	r3, [r0, #4]
}
   34520:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   34522:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   34524:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   34526:	404b      	eors	r3, r1
    p_reg->OUT = value;
   34528:	6053      	str	r3, [r2, #4]
}
   3452a:	4770      	bx	lr

0003452c <nrf_gpio_cfg_sense_set>:
{
   3452c:	b513      	push	{r0, r1, r4, lr}
   3452e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   34530:	a801      	add	r0, sp, #4
{
   34532:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   34534:	f7ea fa6a 	bl	1ea0c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   34538:	9b01      	ldr	r3, [sp, #4]
   3453a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   3453e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   34542:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   34546:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   3454a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   3454e:	b002      	add	sp, #8
   34550:	bd10      	pop	{r4, pc}

00034552 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   34552:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   34554:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   34556:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   34558:	b1fd      	cbz	r5, 3459a <_spi_context_cs_control.isra.0+0x48>
   3455a:	68ab      	ldr	r3, [r5, #8]
   3455c:	b1eb      	cbz	r3, 3459a <_spi_context_cs_control.isra.0+0x48>
   3455e:	6818      	ldr	r0, [r3, #0]
   34560:	b1d8      	cbz	r0, 3459a <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   34562:	b151      	cbz	r1, 3457a <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   34564:	7a19      	ldrb	r1, [r3, #8]
   34566:	2201      	movs	r2, #1
   34568:	f7ea fdfa 	bl	1f160 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   3456c:	6823      	ldr	r3, [r4, #0]
   3456e:	689b      	ldr	r3, [r3, #8]
   34570:	6858      	ldr	r0, [r3, #4]
}
   34572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   34576:	f003 b82a 	b.w	375ce <z_impl_k_busy_wait>
			if (!force_off &&
   3457a:	b912      	cbnz	r2, 34582 <_spi_context_cs_control.isra.0+0x30>
   3457c:	88aa      	ldrh	r2, [r5, #4]
   3457e:	0492      	lsls	r2, r2, #18
   34580:	d40b      	bmi.n	3459a <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   34582:	6858      	ldr	r0, [r3, #4]
   34584:	f003 f823 	bl	375ce <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   34588:	6823      	ldr	r3, [r4, #0]
   3458a:	2200      	movs	r2, #0
   3458c:	689b      	ldr	r3, [r3, #8]
   3458e:	7a19      	ldrb	r1, [r3, #8]
   34590:	6818      	ldr	r0, [r3, #0]
}
   34592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   34596:	f7ea bde3 	b.w	1f160 <gpio_pin_set>
}
   3459a:	bd38      	pop	{r3, r4, r5, pc}

0003459c <spi_context_unlock_unconditionally>:
{
   3459c:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   3459e:	2201      	movs	r2, #1
   345a0:	2100      	movs	r1, #0
{
   345a2:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   345a4:	f7ff ffd5 	bl	34552 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   345a8:	6923      	ldr	r3, [r4, #16]
   345aa:	b933      	cbnz	r3, 345ba <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   345ac:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   345ae:	f104 0008 	add.w	r0, r4, #8
}
   345b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   345b6:	f7f6 be23 	b.w	2b200 <z_impl_k_sem_give>
   345ba:	bd10      	pop	{r4, pc}

000345bc <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   345bc:	6900      	ldr	r0, [r0, #16]
{
   345be:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   345c0:	6803      	ldr	r3, [r0, #0]
   345c2:	428b      	cmp	r3, r1
   345c4:	d106      	bne.n	345d4 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   345c6:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   345ca:	b934      	cbnz	r4, 345da <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   345cc:	f7ff ffe6 	bl	3459c <spi_context_unlock_unconditionally>
	return 0;
   345d0:	4620      	mov	r0, r4
}
   345d2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   345d4:	f06f 0015 	mvn.w	r0, #21
   345d8:	e7fb      	b.n	345d2 <spi_nrfx_release+0x16>
		return -EBUSY;
   345da:	f06f 000f 	mvn.w	r0, #15
   345de:	e7f8      	b.n	345d2 <spi_nrfx_release+0x16>

000345e0 <endtx_isr>:
	return config->uarte_regs;
   345e0:	6843      	ldr	r3, [r0, #4]
   345e2:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   345e4:	f04f 0120 	mov.w	r1, #32
   345e8:	f3ef 8211 	mrs	r2, BASEPRI
   345ec:	f381 8811 	msr	BASEPRI, r1
   345f0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   345f4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   345f8:	b131      	cbz	r1, 34608 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   345fa:	2100      	movs	r1, #0
   345fc:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   34600:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34604:	2101      	movs	r1, #1
   34606:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   34608:	f382 8811 	msr	BASEPRI, r2
   3460c:	f3bf 8f6f 	isb	sy
}
   34610:	4770      	bx	lr

00034612 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   34612:	6843      	ldr	r3, [r0, #4]
{
   34614:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   34616:	681c      	ldr	r4, [r3, #0]
{
   34618:	4605      	mov	r5, r0
    return p_reg->INTENSET & mask;
   3461a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3461e:	05da      	lsls	r2, r3, #23
   34620:	d504      	bpl.n	3462c <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34622:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   34626:	b10b      	cbz	r3, 3462c <uarte_nrfx_isr_int+0x1a>
		endtx_isr(dev);
   34628:	f7ff ffda 	bl	345e0 <endtx_isr>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3462c:	686b      	ldr	r3, [r5, #4]
   3462e:	685b      	ldr	r3, [r3, #4]
   34630:	06db      	lsls	r3, r3, #27
   34632:	d51a      	bpl.n	3466a <uarte_nrfx_isr_int+0x58>
	__asm__ volatile(
   34634:	f04f 0320 	mov.w	r3, #32
   34638:	f3ef 8211 	mrs	r2, BASEPRI
   3463c:	f383 8811 	msr	BASEPRI, r3
   34640:	f3bf 8f6f 	isb	sy
   34644:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   34648:	b113      	cbz	r3, 34650 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3464a:	2300      	movs	r3, #0
   3464c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   34650:	692b      	ldr	r3, [r5, #16]
   34652:	68db      	ldr	r3, [r3, #12]
   34654:	b10b      	cbz	r3, 3465a <uarte_nrfx_isr_int+0x48>
   34656:	691b      	ldr	r3, [r3, #16]
   34658:	b91b      	cbnz	r3, 34662 <uarte_nrfx_isr_int+0x50>
    p_reg->INTENCLR = mask;
   3465a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3465e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	__asm__ volatile(
   34662:	f382 8811 	msr	BASEPRI, r2
   34666:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   3466a:	692b      	ldr	r3, [r5, #16]
   3466c:	68db      	ldr	r3, [r3, #12]
   3466e:	b15b      	cbz	r3, 34688 <uarte_nrfx_isr_int+0x76>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34670:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   34674:	b14a      	cbz	r2, 3468a <uarte_nrfx_isr_int+0x78>
		data->int_driven->fifo_fill_lock = 0;
   34676:	2200      	movs	r2, #0
		if (data->int_driven->disable_tx_irq) {
   34678:	7b99      	ldrb	r1, [r3, #14]
		data->int_driven->fifo_fill_lock = 0;
   3467a:	611a      	str	r2, [r3, #16]
		if (data->int_driven->disable_tx_irq) {
   3467c:	b129      	cbz	r1, 3468a <uarte_nrfx_isr_int+0x78>
    p_reg->INTENCLR = mask;
   3467e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   34682:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   34686:	739a      	strb	r2, [r3, #14]
}
   34688:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3468a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3468e:	b122      	cbz	r2, 3469a <uarte_nrfx_isr_int+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34690:	2200      	movs	r2, #0
   34692:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   34696:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (data->int_driven->cb) {
   3469a:	681a      	ldr	r2, [r3, #0]
   3469c:	2a00      	cmp	r2, #0
   3469e:	d0f3      	beq.n	34688 <uarte_nrfx_isr_int+0x76>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   346a0:	4628      	mov	r0, r5
}
   346a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   346a6:	6859      	ldr	r1, [r3, #4]
   346a8:	4710      	bx	r2

000346aa <uarte_nrfx_config_get>:
{
   346aa:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   346ac:	6902      	ldr	r2, [r0, #16]
   346ae:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   346b2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   346b6:	2000      	movs	r0, #0
   346b8:	4770      	bx	lr

000346ba <uarte_nrfx_err_check>:
	return config->uarte_regs;
   346ba:	6843      	ldr	r3, [r0, #4]
   346bc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   346be:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   346c2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   346c6:	4770      	bx	lr

000346c8 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   346c8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   346ca:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   346cc:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   346d0:	b940      	cbnz	r0, 346e4 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   346d2:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   346d4:	0712      	lsls	r2, r2, #28
   346d6:	d406      	bmi.n	346e6 <is_tx_ready+0x1e>
   346d8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   346dc:	3800      	subs	r0, #0
   346de:	bf18      	it	ne
   346e0:	2001      	movne	r0, #1
   346e2:	4770      	bx	lr
   346e4:	2001      	movs	r0, #1
}
   346e6:	4770      	bx	lr

000346e8 <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   346e8:	4770      	bx	lr

000346ea <user_callback>:
	if (data->async->user_callback) {
   346ea:	6903      	ldr	r3, [r0, #16]
   346ec:	691a      	ldr	r2, [r3, #16]
   346ee:	6813      	ldr	r3, [r2, #0]
   346f0:	b10b      	cbz	r3, 346f6 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   346f2:	6852      	ldr	r2, [r2, #4]
   346f4:	4718      	bx	r3
}
   346f6:	4770      	bx	lr

000346f8 <notify_uart_rx_rdy>:
{
   346f8:	b570      	push	{r4, r5, r6, lr}
   346fa:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   346fc:	6906      	ldr	r6, [r0, #16]
{
   346fe:	4604      	mov	r4, r0
   34700:	460d      	mov	r5, r1
	struct uart_event evt = {
   34702:	2214      	movs	r2, #20
   34704:	2100      	movs	r1, #0
   34706:	a801      	add	r0, sp, #4
   34708:	f003 f85b 	bl	377c2 <memset>
   3470c:	2302      	movs	r3, #2
   3470e:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   34712:	6933      	ldr	r3, [r6, #16]
	user_callback(dev, &evt);
   34714:	4620      	mov	r0, r4
	struct uart_event evt = {
   34716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   34718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	user_callback(dev, &evt);
   3471a:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   3471c:	e9cd 3503 	strd	r3, r5, [sp, #12]
   34720:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   34722:	f7ff ffe2 	bl	346ea <user_callback>
}
   34726:	b006      	add	sp, #24
   34728:	bd70      	pop	{r4, r5, r6, pc}

0003472a <notify_rx_buf_release>:
{
   3472a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   3472c:	680f      	ldr	r7, [r1, #0]
{
   3472e:	4606      	mov	r6, r0
   34730:	460c      	mov	r4, r1
   34732:	4615      	mov	r5, r2
   34734:	b087      	sub	sp, #28
	if (*buf) {
   34736:	b187      	cbz	r7, 3475a <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   34738:	2100      	movs	r1, #0
   3473a:	2214      	movs	r2, #20
   3473c:	a801      	add	r0, sp, #4
   3473e:	f003 f840 	bl	377c2 <memset>
   34742:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   34744:	4630      	mov	r0, r6
   34746:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   3474a:	f88d 3004 	strb.w	r3, [sp, #4]
   3474e:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   34750:	f7ff ffcb 	bl	346ea <user_callback>
		if (clear) {
   34754:	b10d      	cbz	r5, 3475a <notify_rx_buf_release+0x30>
			*buf = NULL;
   34756:	2300      	movs	r3, #0
   34758:	6023      	str	r3, [r4, #0]
}
   3475a:	b007      	add	sp, #28
   3475c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003475e <notify_rx_disable>:
{
   3475e:	b510      	push	{r4, lr}
   34760:	b086      	sub	sp, #24
   34762:	4604      	mov	r4, r0
	struct uart_event evt = {
   34764:	2214      	movs	r2, #20
   34766:	2100      	movs	r1, #0
   34768:	a801      	add	r0, sp, #4
   3476a:	f003 f82a 	bl	377c2 <memset>
   3476e:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   34770:	4620      	mov	r0, r4
   34772:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   34774:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   34778:	f7ff ffb7 	bl	346ea <user_callback>
}
   3477c:	b006      	add	sp, #24
   3477e:	bd10      	pop	{r4, pc}

00034780 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   34780:	6843      	ldr	r3, [r0, #4]
{
   34782:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   34784:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34786:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   34788:	f04f 0020 	mov.w	r0, #32
   3478c:	f3ef 8511 	mrs	r5, BASEPRI
   34790:	f380 8811 	msr	BASEPRI, r0
   34794:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   34798:	6924      	ldr	r4, [r4, #16]
   3479a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   3479c:	b190      	cbz	r0, 347c4 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   3479e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   347a0:	b998      	cbnz	r0, 347ca <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   347a2:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   347a6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   347aa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   347ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   347b2:	f042 0220 	orr.w	r2, r2, #32
   347b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   347ba:	f385 8811 	msr	BASEPRI, r5
   347be:	f3bf 8f6f 	isb	sy
}
   347c2:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   347c4:	f06f 000c 	mvn.w	r0, #12
   347c8:	e7f7      	b.n	347ba <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   347ca:	f06f 000f 	mvn.w	r0, #15
   347ce:	e7f4      	b.n	347ba <uarte_nrfx_rx_buf_rsp+0x3a>

000347d0 <uarte_nrfx_callback_set>:
	if (!data->async) {
   347d0:	6903      	ldr	r3, [r0, #16]
   347d2:	691b      	ldr	r3, [r3, #16]
   347d4:	b11b      	cbz	r3, 347de <uarte_nrfx_callback_set+0xe>
	return 0;
   347d6:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   347d8:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   347dc:	4770      	bx	lr
		return -ENOTSUP;
   347de:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   347e2:	4770      	bx	lr

000347e4 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   347e4:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   347e6:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   347e8:	6910      	ldr	r0, [r2, #16]
{
   347ea:	b510      	push	{r4, lr}
	return config->uarte_regs;
   347ec:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   347ee:	b958      	cbnz	r0, 34808 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   347f0:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   347f4:	b15c      	cbz	r4, 3480e <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   347f6:	7e52      	ldrb	r2, [r2, #25]
   347f8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   347fa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   347fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34802:	2201      	movs	r2, #1
   34804:	601a      	str	r2, [r3, #0]
}
   34806:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   34808:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3480c:	e7fb      	b.n	34806 <uarte_nrfx_poll_in+0x22>
		return -1;
   3480e:	f04f 30ff 	mov.w	r0, #4294967295
   34812:	e7f8      	b.n	34806 <uarte_nrfx_poll_in+0x22>

00034814 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   34814:	2a00      	cmp	r2, #0
{
   34816:	b510      	push	{r4, lr}
   34818:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3481a:	dd0f      	ble.n	3483c <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   3481c:	6843      	ldr	r3, [r0, #4]
   3481e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34820:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   34824:	b148      	cbz	r0, 3483a <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34826:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   34828:	6922      	ldr	r2, [r4, #16]
   3482a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3482e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34832:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   34834:	7e52      	ldrb	r2, [r2, #25]
   34836:	700a      	strb	r2, [r1, #0]
   34838:	6018      	str	r0, [r3, #0]
}
   3483a:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   3483c:	2000      	movs	r0, #0
   3483e:	e7fc      	b.n	3483a <uarte_nrfx_fifo_read+0x26>

00034840 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   34840:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34842:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   34844:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   34846:	f04f 0020 	mov.w	r0, #32
   3484a:	f3ef 8311 	mrs	r3, BASEPRI
   3484e:	f380 8811 	msr	BASEPRI, r0
   34852:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   34856:	2000      	movs	r0, #0
   34858:	68c9      	ldr	r1, [r1, #12]
   3485a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   3485c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   34860:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   34864:	f383 8811 	msr	BASEPRI, r3
   34868:	f3bf 8f6f 	isb	sy
}
   3486c:	4770      	bx	lr

0003486e <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3486e:	2201      	movs	r2, #1
   34870:	6903      	ldr	r3, [r0, #16]
   34872:	68db      	ldr	r3, [r3, #12]
   34874:	739a      	strb	r2, [r3, #14]
}
   34876:	4770      	bx	lr

00034878 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   34878:	6903      	ldr	r3, [r0, #16]
   3487a:	68db      	ldr	r3, [r3, #12]
   3487c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3487e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   34882:	b962      	cbnz	r2, 3489e <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   34884:	6842      	ldr	r2, [r0, #4]
   34886:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34888:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   3488c:	b140      	cbz	r0, 348a0 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   3488e:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   34892:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   34896:	d003      	beq.n	348a0 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   34898:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   3489a:	6119      	str	r1, [r3, #16]
   3489c:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3489e:	2000      	movs	r0, #0
}
   348a0:	4770      	bx	lr

000348a2 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   348a2:	6843      	ldr	r3, [r0, #4]
   348a4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   348a6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   348aa:	3800      	subs	r0, #0
   348ac:	bf18      	it	ne
   348ae:	2001      	movne	r0, #1
   348b0:	4770      	bx	lr

000348b2 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   348b2:	2210      	movs	r2, #16
	return config->uarte_regs;
   348b4:	6843      	ldr	r3, [r0, #4]
   348b6:	681b      	ldr	r3, [r3, #0]
   348b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   348bc:	4770      	bx	lr

000348be <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   348be:	2210      	movs	r2, #16
	return config->uarte_regs;
   348c0:	6843      	ldr	r3, [r0, #4]
   348c2:	681b      	ldr	r3, [r3, #0]
   348c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   348c8:	4770      	bx	lr

000348ca <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   348ca:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   348ce:	6843      	ldr	r3, [r0, #4]
   348d0:	681b      	ldr	r3, [r3, #0]
   348d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   348d6:	4770      	bx	lr

000348d8 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   348d8:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   348dc:	6843      	ldr	r3, [r0, #4]
   348de:	681b      	ldr	r3, [r3, #0]
   348e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   348e4:	4770      	bx	lr

000348e6 <uarte_nrfx_irq_update>:
}
   348e6:	2001      	movs	r0, #1
   348e8:	4770      	bx	lr

000348ea <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   348ea:	6903      	ldr	r3, [r0, #16]
   348ec:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   348ee:	e9c3 1200 	strd	r1, r2, [r3]
}
   348f2:	4770      	bx	lr

000348f4 <uarte_enable>:
{
   348f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   348f6:	6907      	ldr	r7, [r0, #16]
{
   348f8:	4604      	mov	r4, r0
	if (data->async) {
   348fa:	693b      	ldr	r3, [r7, #16]
   348fc:	b92b      	cbnz	r3, 3490a <uarte_enable+0x16>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   348fe:	2208      	movs	r2, #8
	return config->uarte_regs;
   34900:	6863      	ldr	r3, [r4, #4]
   34902:	681b      	ldr	r3, [r3, #0]
   34904:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   34908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bool disabled = data->async->low_power_mask == 0;
   3490a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
   3490e:	6846      	ldr	r6, [r0, #4]
		data->async->low_power_mask |= mask;
   34910:	4329      	orrs	r1, r5
   34912:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
		if (hw_rx_counting_enabled(data) && disabled) {
   34916:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   3491a:	2b00      	cmp	r3, #0
   3491c:	d0ef      	beq.n	348fe <uarte_enable+0xa>
   3491e:	2d00      	cmp	r5, #0
   34920:	d1ed      	bne.n	348fe <uarte_enable+0xa>
			const nrfx_timer_t *timer = &get_dev_config(dev)->timer;
   34922:	3608      	adds	r6, #8
			nrfx_timer_enable(timer);
   34924:	4630      	mov	r0, r6
   34926:	f7f0 fe69 	bl	255fc <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   3492a:	693b      	ldr	r3, [r7, #16]
   3492c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   34930:	42ab      	cmp	r3, r5
   34932:	dde4      	ble.n	348fe <uarte_enable+0xa>
				nrfx_timer_increment(timer);
   34934:	4630      	mov	r0, r6
   34936:	f7f0 fee9 	bl	2570c <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   3493a:	3501      	adds	r5, #1
   3493c:	e7f5      	b.n	3492a <uarte_enable+0x36>

0003493e <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   3493e:	6843      	ldr	r3, [r0, #4]
{
   34940:	b510      	push	{r4, lr}
	return config->uarte_regs;
   34942:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   34944:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   34948:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3494c:	2200      	movs	r2, #0
   3494e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   34952:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   34956:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3495a:	685b      	ldr	r3, [r3, #4]
   3495c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
   34960:	06db      	lsls	r3, r3, #27
   34962:	d506      	bpl.n	34972 <tx_start+0x34>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   34964:	2101      	movs	r1, #1
   34966:	f7ff ffc5 	bl	348f4 <uarte_enable>
    p_reg->INTENSET = mask;
   3496a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3496e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34972:	2301      	movs	r3, #1
   34974:	60a3      	str	r3, [r4, #8]
}
   34976:	bd10      	pop	{r4, pc}

00034978 <uarte_nrfx_fifo_fill>:
{
   34978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3497a:	6906      	ldr	r6, [r0, #16]
{
   3497c:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   3497e:	68f3      	ldr	r3, [r6, #12]
   34980:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   34982:	3310      	adds	r3, #16
   34984:	4294      	cmp	r4, r2
   34986:	bfa8      	it	ge
   34988:	4614      	movge	r4, r2
   3498a:	2201      	movs	r2, #1
   3498c:	e8d3 0fef 	ldaex	r0, [r3]
   34990:	2800      	cmp	r0, #0
   34992:	d103      	bne.n	3499c <uarte_nrfx_fifo_fill+0x24>
   34994:	e8c3 2fe7 	stlex	r7, r2, [r3]
   34998:	2f00      	cmp	r7, #0
   3499a:	d1f7      	bne.n	3498c <uarte_nrfx_fifo_fill+0x14>
   3499c:	bf0c      	ite	eq
   3499e:	4613      	moveq	r3, r2
   349a0:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   349a2:	d01d      	beq.n	349e0 <uarte_nrfx_fifo_fill+0x68>
		return 0;
   349a4:	461c      	mov	r4, r3
}
   349a6:	4620      	mov	r0, r4
   349a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   349aa:	68f2      	ldr	r2, [r6, #12]
   349ac:	5cc8      	ldrb	r0, [r1, r3]
   349ae:	6892      	ldr	r2, [r2, #8]
   349b0:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   349b2:	3301      	adds	r3, #1
   349b4:	42a3      	cmp	r3, r4
   349b6:	dbf8      	blt.n	349aa <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   349b8:	f04f 0320 	mov.w	r3, #32
   349bc:	f3ef 8711 	mrs	r7, BASEPRI
   349c0:	f383 8811 	msr	BASEPRI, r3
   349c4:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   349c8:	4628      	mov	r0, r5
   349ca:	f7ff fe7d 	bl	346c8 <is_tx_ready>
   349ce:	68f3      	ldr	r3, [r6, #12]
   349d0:	b940      	cbnz	r0, 349e4 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   349d2:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   349d4:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   349d6:	f387 8811 	msr	BASEPRI, r7
   349da:	f3bf 8f6f 	isb	sy
	return len;
   349de:	e7e2      	b.n	349a6 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   349e0:	2300      	movs	r3, #0
   349e2:	e7e7      	b.n	349b4 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   349e4:	4622      	mov	r2, r4
   349e6:	4628      	mov	r0, r5
   349e8:	6899      	ldr	r1, [r3, #8]
   349ea:	f7ff ffa8 	bl	3493e <tx_start>
   349ee:	e7f2      	b.n	349d6 <uarte_nrfx_fifo_fill+0x5e>

000349f0 <uarte_nrfx_tx>:
{
   349f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   349f4:	461c      	mov	r4, r3
	return config->uarte_regs;
   349f6:	6843      	ldr	r3, [r0, #4]
{
   349f8:	4617      	mov	r7, r2
	return config->uarte_regs;
   349fa:	681a      	ldr	r2, [r3, #0]
   349fc:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (!nrfx_is_in_ram(buf)) {
   34a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   34a04:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34a06:	6906      	ldr	r6, [r0, #16]
	if (!nrfx_is_in_ram(buf)) {
   34a08:	d14e      	bne.n	34aa8 <uarte_nrfx_tx+0xb8>
	__asm__ volatile(
   34a0a:	f04f 0320 	mov.w	r3, #32
   34a0e:	f3ef 8811 	mrs	r8, BASEPRI
   34a12:	f383 8811 	msr	BASEPRI, r3
   34a16:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   34a1a:	6933      	ldr	r3, [r6, #16]
   34a1c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   34a20:	f1bc 0f00 	cmp.w	ip, #0
   34a24:	d008      	beq.n	34a38 <uarte_nrfx_tx+0x48>
	__asm__ volatile(
   34a26:	f388 8811 	msr	BASEPRI, r8
   34a2a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   34a2e:	f06f 000f 	mvn.w	r0, #15
}
   34a32:	b002      	add	sp, #8
   34a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->async->tx_size = len;
   34a38:	60df      	str	r7, [r3, #12]
    p_reg->INTENSET = mask;
   34a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   34a3e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	if (!is_tx_ready(dev)) {
   34a42:	f7ff fe41 	bl	346c8 <is_tx_ready>
   34a46:	6933      	ldr	r3, [r6, #16]
   34a48:	bb20      	cbnz	r0, 34a94 <uarte_nrfx_tx+0xa4>
		data->async->pend_tx_buf = (uint8_t *)buf;
   34a4a:	6119      	str	r1, [r3, #16]
   34a4c:	f388 8811 	msr	BASEPRI, r8
   34a50:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   34a54:	7af3      	ldrb	r3, [r6, #11]
   34a56:	2b01      	cmp	r3, #1
   34a58:	d11a      	bne.n	34a90 <uarte_nrfx_tx+0xa0>
	    && timeout != SYS_FOREVER_MS) {
   34a5a:	1c63      	adds	r3, r4, #1
   34a5c:	d018      	beq.n	34a90 <uarte_nrfx_tx+0xa0>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   34a5e:	6935      	ldr	r5, [r6, #16]
   34a60:	f240 30e7 	movw	r0, #999	; 0x3e7
   34a64:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   34a68:	2100      	movs	r1, #0
   34a6a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   34a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   34a72:	2300      	movs	r3, #0
   34a74:	fbc6 0104 	smlal	r0, r1, r6, r4
   34a78:	f7dc fbba 	bl	111f0 <__aeabi_uldivmod>
   34a7c:	3518      	adds	r5, #24
   34a7e:	4602      	mov	r2, r0
   34a80:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   34a82:	2000      	movs	r0, #0
   34a84:	2100      	movs	r1, #0
   34a86:	e9cd 0100 	strd	r0, r1, [sp]
   34a8a:	4628      	mov	r0, r5
   34a8c:	f7f8 ff4a 	bl	2d924 <z_impl_k_timer_start>
	return 0;
   34a90:	2000      	movs	r0, #0
   34a92:	e7ce      	b.n	34a32 <uarte_nrfx_tx+0x42>
		data->async->tx_amount = -1;
   34a94:	f04f 32ff 	mov.w	r2, #4294967295
		tx_start(dev, buf, len);
   34a98:	4628      	mov	r0, r5
		data->async->tx_amount = -1;
   34a9a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		data->async->tx_buf = buf;
   34a9e:	6099      	str	r1, [r3, #8]
		tx_start(dev, buf, len);
   34aa0:	463a      	mov	r2, r7
   34aa2:	f7ff ff4c 	bl	3493e <tx_start>
   34aa6:	e7d1      	b.n	34a4c <uarte_nrfx_tx+0x5c>
		return -ENOTSUP;
   34aa8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   34aac:	e7c1      	b.n	34a32 <uarte_nrfx_tx+0x42>

00034aae <rx_timeout>:
{
   34aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   34ab0:	6b45      	ldr	r5, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   34ab2:	692b      	ldr	r3, [r5, #16]
   34ab4:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   34ab8:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   34abc:	2a00      	cmp	r2, #0
   34abe:	d132      	bne.n	34b26 <rx_timeout+0x78>
    p_reg->INTENCLR = mask;
   34ac0:	2110      	movs	r1, #16
	const struct device *dev = data->dev;
   34ac2:	682e      	ldr	r6, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   34ac4:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
   34ac6:	6802      	ldr	r2, [r0, #0]
   34ac8:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
   34acc:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
   34ad0:	b1fa      	cbz	r2, 34b12 <rx_timeout+0x64>
		read = nrfx_timer_capture(&cfg->timer, 0);
   34ad2:	4639      	mov	r1, r7
   34ad4:	3008      	adds	r0, #8
   34ad6:	f7f0 fe4b 	bl	25770 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   34ada:	692b      	ldr	r3, [r5, #16]
   34adc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   34ade:	4282      	cmp	r2, r0
		data->async->rx_timeout_left = data->async->rx_timeout;
   34ae0:	bf1e      	ittt	ne
   34ae2:	6eda      	ldrne	r2, [r3, #108]	; 0x6c
		data->async->rx_total_byte_cnt = read;
   34ae4:	6658      	strne	r0, [r3, #100]	; 0x64
		data->async->rx_timeout_left = data->async->rx_timeout;
   34ae6:	675a      	strne	r2, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
   34ae8:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
		    - data->async->rx_total_user_byte_cnt;
   34aec:	e9d3 4019 	ldrd	r4, r0, [r3, #100]	; 0x64
   34af0:	1a24      	subs	r4, r4, r0
	if (!hw_rx_counting_enabled(data) &&
   34af2:	b922      	cbnz	r2, 34afe <rx_timeout+0x50>
   34af4:	2c00      	cmp	r4, #0
		len = 0;
   34af6:	bfbc      	itt	lt
   34af8:	4614      	movlt	r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   34afa:	f8c3 00b0 	strlt.w	r0, [r3, #176]	; 0xb0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   34afe:	e9d3 1215 	ldrd	r1, r2, [r3, #84]	; 0x54
   34b02:	18a0      	adds	r0, r4, r2
   34b04:	4288      	cmp	r0, r1
   34b06:	d90f      	bls.n	34b28 <rx_timeout+0x7a>
		len = data->async->rx_buf_len - data->async->rx_offset;
   34b08:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   34b0a:	2c00      	cmp	r4, #0
   34b0c:	dd06      	ble.n	34b1c <rx_timeout+0x6e>
		clipped = true;
   34b0e:	2701      	movs	r7, #1
   34b10:	e010      	b.n	34b34 <rx_timeout+0x86>
		read = data->async->rx_cnt.cnt;
   34b12:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   34b16:	e7e0      	b.n	34ada <rx_timeout+0x2c>
			data->async->rx_timeout_left -=
   34b18:	1a52      	subs	r2, r2, r1
   34b1a:	675a      	str	r2, [r3, #116]	; 0x74
    p_reg->INTENSET = mask;
   34b1c:	2210      	movs	r2, #16
	return config->uarte_regs;
   34b1e:	6873      	ldr	r3, [r6, #4]
   34b20:	681b      	ldr	r3, [r3, #0]
   34b22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   34b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   34b28:	2c00      	cmp	r4, #0
   34b2a:	ddf7      	ble.n	34b1c <rx_timeout+0x6e>
				< data->async->rx_timeout_slab)) {
   34b2c:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
		if (clipped ||
   34b30:	428a      	cmp	r2, r1
   34b32:	daf1      	bge.n	34b18 <rx_timeout+0x6a>
			notify_uart_rx_rdy(dev, len);
   34b34:	4621      	mov	r1, r4
   34b36:	4630      	mov	r0, r6
   34b38:	f7ff fdde 	bl	346f8 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   34b3c:	6928      	ldr	r0, [r5, #16]
   34b3e:	6d83      	ldr	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   34b40:	6e81      	ldr	r1, [r0, #104]	; 0x68
			data->async->rx_offset += len;
   34b42:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   34b44:	4421      	add	r1, r4
			data->async->rx_offset += len;
   34b46:	6583      	str	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   34b48:	6681      	str	r1, [r0, #104]	; 0x68
		if (clipped) {
   34b4a:	2f00      	cmp	r7, #0
   34b4c:	d0e6      	beq.n	34b1c <rx_timeout+0x6e>
	z_impl_k_timer_stop(timer);
   34b4e:	3078      	adds	r0, #120	; 0x78
   34b50:	f002 fd76 	bl	37640 <z_impl_k_timer_stop>
}
   34b54:	e7e2      	b.n	34b1c <rx_timeout+0x6e>

00034b56 <uarte_nrfx_irq_is_pending>:
{
   34b56:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   34b58:	6843      	ldr	r3, [r0, #4]
{
   34b5a:	4604      	mov	r4, r0
	return config->uarte_regs;
   34b5c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   34b5e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   34b62:	025b      	lsls	r3, r3, #9
   34b64:	d405      	bmi.n	34b72 <uarte_nrfx_irq_is_pending+0x1c>
   34b66:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   34b6a:	f010 0010 	ands.w	r0, r0, #16
   34b6e:	d106      	bne.n	34b7e <uarte_nrfx_irq_is_pending+0x28>
}
   34b70:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   34b72:	f7ff fe81 	bl	34878 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   34b76:	2800      	cmp	r0, #0
   34b78:	d0f5      	beq.n	34b66 <uarte_nrfx_irq_is_pending+0x10>
		||
   34b7a:	2001      	movs	r0, #1
   34b7c:	e7f8      	b.n	34b70 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   34b7e:	4620      	mov	r0, r4
   34b80:	f7ff fe8f 	bl	348a2 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   34b84:	3800      	subs	r0, #0
   34b86:	bf18      	it	ne
   34b88:	2001      	movne	r0, #1
   34b8a:	e7f1      	b.n	34b70 <uarte_nrfx_irq_is_pending+0x1a>

00034b8c <rx_flush>:
	return config->uarte_regs;
   34b8c:	6843      	ldr	r3, [r0, #4]
{
   34b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   34b90:	681c      	ldr	r4, [r3, #0]
{
   34b92:	4615      	mov	r5, r2
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   34b94:	460b      	mov	r3, r1
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   34b96:	f8d4 653c 	ldr.w	r6, [r4, #1340]	; 0x53c
   34b9a:	bb31      	cbnz	r1, 34bea <rx_flush+0x5e>
   34b9c:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   34b9e:	466a      	mov	r2, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   34ba0:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34ba4:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   34ba6:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34baa:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   34bae:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34bb2:	2101      	movs	r1, #1
   34bb4:	62e1      	str	r1, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34bb6:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   34bba:	2900      	cmp	r1, #0
   34bbc:	d0fb      	beq.n	34bb6 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34bbe:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   34bc2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   34bc6:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (!buf) {
   34bca:	b913      	cbnz	r3, 34bd2 <rx_flush+0x46>
			return rx_amount;
   34bcc:	b2c0      	uxtb	r0, r0
}
   34bce:	b002      	add	sp, #8
   34bd0:	bd70      	pop	{r4, r5, r6, pc}
	if (rx_amount != prev_rx_amount) {
   34bd2:	4286      	cmp	r6, r0
   34bd4:	d1fa      	bne.n	34bcc <rx_flush+0x40>
   34bd6:	441d      	add	r5, r3
	for (int i = 0; i < flush_len; i++) {
   34bd8:	429d      	cmp	r5, r3
   34bda:	d101      	bne.n	34be0 <rx_flush+0x54>
	return 0;
   34bdc:	2000      	movs	r0, #0
   34bde:	e7f6      	b.n	34bce <rx_flush+0x42>
		if (buf[i] != dirty) {
   34be0:	f813 2b01 	ldrb.w	r2, [r3], #1
   34be4:	2a00      	cmp	r2, #0
   34be6:	d0f7      	beq.n	34bd8 <rx_flush+0x4c>
   34be8:	e7f0      	b.n	34bcc <rx_flush+0x40>
   34bea:	4618      	mov	r0, r3
   34bec:	2100      	movs	r1, #0
   34bee:	f002 fde8 	bl	377c2 <memset>
   34bf2:	4603      	mov	r3, r0
   34bf4:	4602      	mov	r2, r0
   34bf6:	e7d3      	b.n	34ba0 <rx_flush+0x14>

00034bf8 <async_uart_release>:
{
   34bf8:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34bfa:	6903      	ldr	r3, [r0, #16]
{
   34bfc:	4604      	mov	r4, r0
	__asm__ volatile(
   34bfe:	f04f 0220 	mov.w	r2, #32
   34c02:	f3ef 8611 	mrs	r6, BASEPRI
   34c06:	f382 8811 	msr	BASEPRI, r2
   34c0a:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   34c0e:	691d      	ldr	r5, [r3, #16]
   34c10:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   34c14:	ea23 0301 	bic.w	r3, r3, r1
   34c18:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	if (!data->async->low_power_mask) {
   34c1c:	b9db      	cbnz	r3, 34c56 <async_uart_release+0x5e>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   34c1e:	2902      	cmp	r1, #2
   34c20:	d106      	bne.n	34c30 <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   34c22:	2205      	movs	r2, #5
   34c24:	f105 01bc 	add.w	r1, r5, #188	; 0xbc
   34c28:	f7ff ffb0 	bl	34b8c <rx_flush>
			data->async->rx_flush_cnt =
   34c2c:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34c30:	6925      	ldr	r5, [r4, #16]
	if (data->async && hw_rx_counting_enabled(data)) {
   34c32:	692b      	ldr	r3, [r5, #16]
   34c34:	b153      	cbz	r3, 34c4c <async_uart_release+0x54>
   34c36:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   34c3a:	b13b      	cbz	r3, 34c4c <async_uart_release+0x54>
		nrfx_timer_disable(&get_dev_config(dev)->timer);
   34c3c:	6860      	ldr	r0, [r4, #4]
   34c3e:	3008      	adds	r0, #8
   34c40:	f7f0 fd02 	bl	25648 <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   34c44:	2200      	movs	r2, #0
   34c46:	692b      	ldr	r3, [r5, #16]
		data->async->rx_total_user_byte_cnt = 0;
   34c48:	e9c3 2219 	strd	r2, r2, [r3, #100]	; 0x64
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   34c4c:	2200      	movs	r2, #0
	return config->uarte_regs;
   34c4e:	6863      	ldr	r3, [r4, #4]
   34c50:	681b      	ldr	r3, [r3, #0]
   34c52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   34c56:	f386 8811 	msr	BASEPRI, r6
   34c5a:	f3bf 8f6f 	isb	sy
}
   34c5e:	bd70      	pop	{r4, r5, r6, pc}

00034c60 <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   34c60:	6843      	ldr	r3, [r0, #4]
{
   34c62:	b510      	push	{r4, lr}
	return config->uarte_regs;
   34c64:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   34c66:	6903      	ldr	r3, [r0, #16]
   34c68:	6918      	ldr	r0, [r3, #16]
   34c6a:	6883      	ldr	r3, [r0, #8]
   34c6c:	b133      	cbz	r3, 34c7c <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   34c6e:	3018      	adds	r0, #24
   34c70:	f002 fce6 	bl	37640 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34c74:	2301      	movs	r3, #1
	return 0;
   34c76:	2000      	movs	r0, #0
   34c78:	60e3      	str	r3, [r4, #12]
}
   34c7a:	bd10      	pop	{r4, pc}
		return -EFAULT;
   34c7c:	f06f 000d 	mvn.w	r0, #13
   34c80:	e7fb      	b.n	34c7a <uarte_nrfx_tx_abort+0x1a>

00034c82 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   34c82:	6b43      	ldr	r3, [r0, #52]	; 0x34
   34c84:	6818      	ldr	r0, [r3, #0]
   34c86:	f7ff bfeb 	b.w	34c60 <uarte_nrfx_tx_abort>

00034c8a <uarte_nrfx_rx_disable>:
{
   34c8a:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34c8c:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   34c8e:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   34c90:	6928      	ldr	r0, [r5, #16]
	return config->uarte_regs;
   34c92:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   34c94:	6d03      	ldr	r3, [r0, #80]	; 0x50
   34c96:	b1b3      	cbz	r3, 34cc6 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   34c98:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   34c9a:	b153      	cbz	r3, 34cb2 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   34c9c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   34ca0:	f023 0320 	bic.w	r3, r3, #32
   34ca4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34ca8:	2300      	movs	r3, #0
   34caa:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   34cae:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   34cb2:	3078      	adds	r0, #120	; 0x78
   34cb4:	f002 fcc4 	bl	37640 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   34cb8:	2000      	movs	r0, #0
   34cba:	692b      	ldr	r3, [r5, #16]
   34cbc:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34cc0:	2301      	movs	r3, #1
   34cc2:	6063      	str	r3, [r4, #4]
}
   34cc4:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   34cc6:	f06f 000d 	mvn.w	r0, #13
   34cca:	e7fb      	b.n	34cc4 <uarte_nrfx_rx_disable+0x3a>

00034ccc <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   34ccc:	6843      	ldr	r3, [r0, #4]
{
   34cce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   34cd2:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
   34cd4:	6903      	ldr	r3, [r0, #16]
{
   34cd6:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
   34cd8:	691b      	ldr	r3, [r3, #16]
{
   34cda:	b089      	sub	sp, #36	; 0x24
	if (!hw_rx_counting_enabled(data)
   34cdc:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
   34ce0:	b972      	cbnz	r2, 34d00 <uarte_nrfx_isr_async+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34ce2:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   34ce6:	b159      	cbz	r1, 34d00 <uarte_nrfx_isr_async+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34ce8:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   34cec:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   34cf0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   34cf4:	3201      	adds	r2, #1
   34cf6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
   34cfa:	b009      	add	sp, #36	; 0x24
   34cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34d00:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   34d04:	b31b      	cbz	r3, 34d4e <uarte_nrfx_isr_async+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34d06:	2100      	movs	r1, #0
   34d08:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   34d0c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   34d10:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   34d14:	2214      	movs	r2, #20
    p_reg->ERRORSRC = errsrc_mask;
   34d16:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
   34d1a:	a803      	add	r0, sp, #12
   34d1c:	f002 fd51 	bl	377c2 <memset>
   34d20:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   34d22:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   34d24:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   34d28:	f100 80dd 	bmi.w	34ee6 <uarte_nrfx_isr_async+0x21a>
   34d2c:	07b1      	lsls	r1, r6, #30
   34d2e:	f100 80dc 	bmi.w	34eea <uarte_nrfx_isr_async+0x21e>
   34d32:	0772      	lsls	r2, r6, #29
   34d34:	f100 80db 	bmi.w	34eee <uarte_nrfx_isr_async+0x222>
   34d38:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   34d3c:	4620      	mov	r0, r4
   34d3e:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   34d40:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   34d44:	f7ff fcd1 	bl	346ea <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   34d48:	4620      	mov	r0, r4
   34d4a:	f7ff ff9e 	bl	34c8a <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34d4e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   34d52:	b37b      	cbz	r3, 34db4 <uarte_nrfx_isr_async+0xe8>
    return p_reg->INTENSET & mask;
   34d54:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   34d58:	06db      	lsls	r3, r3, #27
   34d5a:	d52b      	bpl.n	34db4 <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34d5c:	f04f 0800 	mov.w	r8, #0
   34d60:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   34d64:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   34d68:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34d6a:	6927      	ldr	r7, [r4, #16]
	return config->uarte_regs;
   34d6c:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   34d6e:	2301      	movs	r3, #1
   34d70:	6938      	ldr	r0, [r7, #16]
   34d72:	f880 30c4 	strb.w	r3, [r0, #196]	; 0xc4
   34d76:	3078      	adds	r0, #120	; 0x78
   34d78:	f002 fc62 	bl	37640 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   34d7c:	693a      	ldr	r2, [r7, #16]
    return p_reg->RXD.AMOUNT;
   34d7e:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   34d82:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   34d86:	6d90      	ldr	r0, [r2, #88]	; 0x58
	data->async->rx_flush_cnt = 0;
   34d88:	f882 80c1 	strb.w	r8, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   34d8c:	1a1b      	subs	r3, r3, r0
   34d8e:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   34d90:	6e90      	ldr	r0, [r2, #104]	; 0x68
   34d92:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   34d96:	4408      	add	r0, r1
	if (rx_len > 0) {
   34d98:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   34d9a:	6690      	str	r0, [r2, #104]	; 0x68
	if (rx_len > 0) {
   34d9c:	dd02      	ble.n	34da4 <uarte_nrfx_isr_async+0xd8>
		notify_uart_rx_rdy(dev, rx_len);
   34d9e:	4620      	mov	r0, r4
   34da0:	f7ff fcaa 	bl	346f8 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   34da4:	6939      	ldr	r1, [r7, #16]
   34da6:	f891 30c2 	ldrb.w	r3, [r1, #194]	; 0xc2
   34daa:	2b00      	cmp	r3, #0
   34dac:	f040 80a1 	bne.w	34ef2 <uarte_nrfx_isr_async+0x226>
		data->async->is_in_irq = false;
   34db0:	f881 30c4 	strb.w	r3, [r1, #196]	; 0xc4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34db4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   34db8:	b37b      	cbz	r3, 34e1a <uarte_nrfx_isr_async+0x14e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34dba:	2100      	movs	r1, #0
	struct uart_event evt = {
   34dbc:	2214      	movs	r2, #20
   34dbe:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
   34dc2:	a803      	add	r0, sp, #12
   34dc4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34dc8:	6926      	ldr	r6, [r4, #16]
	struct uart_event evt = {
   34dca:	f002 fcfa 	bl	377c2 <memset>
   34dce:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   34dd0:	4620      	mov	r0, r4
   34dd2:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   34dd4:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   34dd8:	f7ff fc87 	bl	346ea <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   34ddc:	6936      	ldr	r6, [r6, #16]
   34dde:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   34de0:	1c5f      	adds	r7, r3, #1
   34de2:	d01a      	beq.n	34e1a <uarte_nrfx_isr_async+0x14e>
   34de4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   34de8:	f240 38e7 	movw	r8, #999	; 0x3e7
   34dec:	f04f 0900 	mov.w	r9, #0
		data->async->rx_timeout_left = data->async->rx_timeout;
   34df0:	6773      	str	r3, [r6, #116]	; 0x74
			      K_MSEC(data->async->rx_timeout_slab),
   34df2:	6f33      	ldr	r3, [r6, #112]	; 0x70
   34df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   34df8:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   34dfc:	fbc0 8901 	smlal	r8, r9, r0, r1
   34e00:	2300      	movs	r3, #0
   34e02:	4640      	mov	r0, r8
   34e04:	4649      	mov	r1, r9
   34e06:	f7dc f9f3 	bl	111f0 <__aeabi_uldivmod>
   34e0a:	4602      	mov	r2, r0
   34e0c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   34e0e:	e9cd 0100 	strd	r0, r1, [sp]
   34e12:	f106 0078 	add.w	r0, r6, #120	; 0x78
   34e16:	f7f8 fd85 	bl	2d924 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34e1a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   34e1e:	b323      	cbz	r3, 34e6a <uarte_nrfx_isr_async+0x19e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34e20:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34e22:	6926      	ldr	r6, [r4, #16]
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   34e24:	2201      	movs	r2, #1
   34e26:	6931      	ldr	r1, [r6, #16]
   34e28:	4620      	mov	r0, r4
   34e2a:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   34e2e:	3150      	adds	r1, #80	; 0x50
   34e30:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   34e34:	f7ff fc79 	bl	3472a <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   34e38:	6931      	ldr	r1, [r6, #16]
   34e3a:	2201      	movs	r2, #1
   34e3c:	4620      	mov	r0, r4
   34e3e:	315c      	adds	r1, #92	; 0x5c
   34e40:	f7ff fc73 	bl	3472a <notify_rx_buf_release>
	if (!data->async->rx_enabled) {
   34e44:	6933      	ldr	r3, [r6, #16]
   34e46:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   34e4a:	b91a      	cbnz	r2, 34e54 <uarte_nrfx_isr_async+0x188>
		(void)rx_flush(dev, NULL, 0);
   34e4c:	4611      	mov	r1, r2
   34e4e:	4620      	mov	r0, r4
   34e50:	f7ff fe9c 	bl	34b8c <rx_flush>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   34e54:	6863      	ldr	r3, [r4, #4]
   34e56:	685b      	ldr	r3, [r3, #4]
   34e58:	06d8      	lsls	r0, r3, #27
   34e5a:	d503      	bpl.n	34e64 <uarte_nrfx_isr_async+0x198>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   34e5c:	2102      	movs	r1, #2
   34e5e:	4620      	mov	r0, r4
   34e60:	f7ff feca 	bl	34bf8 <async_uart_release>
	notify_rx_disable(dev);
   34e64:	4620      	mov	r0, r4
   34e66:	f7ff fc7a 	bl	3475e <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34e6a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   34e6e:	b133      	cbz	r3, 34e7e <uarte_nrfx_isr_async+0x1b2>
    return p_reg->INTENSET & mask;
   34e70:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   34e74:	05d9      	lsls	r1, r3, #23
   34e76:	d502      	bpl.n	34e7e <uarte_nrfx_isr_async+0x1b2>
		endtx_isr(dev);
   34e78:	4620      	mov	r0, r4
   34e7a:	f7ff fbb1 	bl	345e0 <endtx_isr>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34e7e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   34e82:	2b00      	cmp	r3, #0
   34e84:	f43f af39 	beq.w	34cfa <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
   34e88:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   34e8c:	025a      	lsls	r2, r3, #9
   34e8e:	f57f af34 	bpl.w	34cfa <uarte_nrfx_isr_async+0x2e>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   34e92:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34e94:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   34e96:	e9d3 7300 	ldrd	r7, r3, [r3]
   34e9a:	06db      	lsls	r3, r3, #27
   34e9c:	d457      	bmi.n	34f4e <uarte_nrfx_isr_async+0x282>
	if (!data->async->tx_buf) {
   34e9e:	6930      	ldr	r0, [r6, #16]
   34ea0:	6882      	ldr	r2, [r0, #8]
   34ea2:	2a00      	cmp	r2, #0
   34ea4:	d160      	bne.n	34f68 <uarte_nrfx_isr_async+0x29c>
		if (data->async->pend_tx_buf) {
   34ea6:	6903      	ldr	r3, [r0, #16]
   34ea8:	2b00      	cmp	r3, #0
   34eaa:	f43f af26 	beq.w	34cfa <uarte_nrfx_isr_async+0x2e>
	__asm__ volatile(
   34eae:	f04f 0320 	mov.w	r3, #32
   34eb2:	f3ef 8511 	mrs	r5, BASEPRI
   34eb6:	f383 8811 	msr	BASEPRI, r3
   34eba:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34ebe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
			if (nrf_uarte_event_check(uarte,
   34ec2:	b15b      	cbz	r3, 34edc <uarte_nrfx_isr_async+0x210>
				data->async->tx_buf = data->async->pend_tx_buf;
   34ec4:	6933      	ldr	r3, [r6, #16]
				tx_start(dev, data->async->tx_buf,
   34ec6:	4620      	mov	r0, r4
				data->async->tx_buf = data->async->pend_tx_buf;
   34ec8:	6919      	ldr	r1, [r3, #16]
				data->async->pend_tx_buf = NULL;
   34eca:	611a      	str	r2, [r3, #16]
				data->async->tx_amount = -1;
   34ecc:	f04f 32ff 	mov.w	r2, #4294967295
   34ed0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				tx_start(dev, data->async->tx_buf,
   34ed4:	68da      	ldr	r2, [r3, #12]
				data->async->tx_buf = data->async->pend_tx_buf;
   34ed6:	6099      	str	r1, [r3, #8]
				tx_start(dev, data->async->tx_buf,
   34ed8:	f7ff fd31 	bl	3493e <tx_start>
	__asm__ volatile(
   34edc:	f385 8811 	msr	BASEPRI, r5
   34ee0:	f3bf 8f6f 	isb	sy
}
   34ee4:	e709      	b.n	34cfa <uarte_nrfx_isr_async+0x2e>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   34ee6:	2601      	movs	r6, #1
   34ee8:	e728      	b.n	34d3c <uarte_nrfx_isr_async+0x70>
   34eea:	2602      	movs	r6, #2
   34eec:	e726      	b.n	34d3c <uarte_nrfx_isr_async+0x70>
   34eee:	2604      	movs	r6, #4
   34ef0:	e724      	b.n	34d3c <uarte_nrfx_isr_async+0x70>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   34ef2:	2200      	movs	r2, #0
   34ef4:	4620      	mov	r0, r4
   34ef6:	3150      	adds	r1, #80	; 0x50
   34ef8:	f7ff fc17 	bl	3472a <notify_rx_buf_release>
	__asm__ volatile(
   34efc:	f04f 0320 	mov.w	r3, #32
   34f00:	f3ef 8111 	mrs	r1, BASEPRI
   34f04:	f383 8811 	msr	BASEPRI, r3
   34f08:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   34f0c:	693b      	ldr	r3, [r7, #16]
   34f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   34f10:	b1d2      	cbz	r2, 34f48 <uarte_nrfx_isr_async+0x27c>
		data->async->rx_buf = data->async->rx_next_buf;
   34f12:	651a      	str	r2, [r3, #80]	; 0x50
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   34f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   34f16:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   34f18:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   34f1a:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
		data->async->rx_offset = 0;
   34f1e:	659a      	str	r2, [r3, #88]	; 0x58
   34f20:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   34f24:	b90b      	cbnz	r3, 34f2a <uarte_nrfx_isr_async+0x25e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34f26:	2301      	movs	r3, #1
   34f28:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   34f2a:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   34f2e:	f023 0320 	bic.w	r3, r3, #32
   34f32:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   34f36:	f381 8811 	msr	BASEPRI, r1
   34f3a:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   34f3e:	2200      	movs	r2, #0
   34f40:	693b      	ldr	r3, [r7, #16]
   34f42:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
   34f46:	e735      	b.n	34db4 <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34f48:	2301      	movs	r3, #1
   34f4a:	6073      	str	r3, [r6, #4]
}
   34f4c:	e7f3      	b.n	34f36 <uarte_nrfx_isr_async+0x26a>
    p_reg->INTENCLR = mask;
   34f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   34f52:	2101      	movs	r1, #1
   34f54:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   34f58:	4620      	mov	r0, r4
   34f5a:	f7ff fe4d 	bl	34bf8 <async_uart_release>
		if (!data->async->tx_size) {
   34f5e:	6933      	ldr	r3, [r6, #16]
   34f60:	68db      	ldr	r3, [r3, #12]
   34f62:	2b00      	cmp	r3, #0
   34f64:	d19b      	bne.n	34e9e <uarte_nrfx_isr_async+0x1d2>
   34f66:	e6c8      	b.n	34cfa <uarte_nrfx_isr_async+0x2e>
	z_impl_k_timer_stop(timer);
   34f68:	3018      	adds	r0, #24
   34f6a:	f002 fb69 	bl	37640 <z_impl_k_timer_stop>
	__asm__ volatile(
   34f6e:	f04f 0320 	mov.w	r3, #32
   34f72:	f3ef 8211 	mrs	r2, BASEPRI
   34f76:	f383 8811 	msr	BASEPRI, r3
   34f7a:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   34f7e:	6933      	ldr	r3, [r6, #16]
   34f80:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   34f84:	2900      	cmp	r1, #0
   34f86:	bfac      	ite	ge
   34f88:	f8d3 50b4 	ldrge.w	r5, [r3, #180]	; 0xb4
    return p_reg->TXD.AMOUNT;
   34f8c:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   34f90:	f382 8811 	msr	BASEPRI, r2
   34f94:	f3bf 8f6f 	isb	sy
	struct uart_event evt = {
   34f98:	2214      	movs	r2, #20
   34f9a:	2100      	movs	r1, #0
   34f9c:	a803      	add	r0, sp, #12
   34f9e:	f002 fc10 	bl	377c2 <memset>
		.data.tx.buf = data->async->tx_buf,
   34fa2:	6933      	ldr	r3, [r6, #16]
	user_callback(dev, &evt);
   34fa4:	4620      	mov	r0, r4
	struct uart_event evt = {
   34fa6:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   34fa8:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   34faa:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   34fae:	68da      	ldr	r2, [r3, #12]
   34fb0:	1aad      	subs	r5, r5, r2
   34fb2:	bf18      	it	ne
   34fb4:	2501      	movne	r5, #1
    p_reg->INTENCLR = mask;
   34fb6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   34fba:	f88d 500c 	strb.w	r5, [sp, #12]
   34fbe:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   34fc2:	2200      	movs	r2, #0
   34fc4:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   34fc6:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   34fc8:	f7ff fb8f 	bl	346ea <user_callback>
   34fcc:	e695      	b.n	34cfa <uarte_nrfx_isr_async+0x2e>

00034fce <api_callback_set>:
	struct lpuart_data *data = get_dev_data(dev);
   34fce:	6903      	ldr	r3, [r0, #16]
}
   34fd0:	2000      	movs	r0, #0
	data->user_data = user_data;
   34fd2:	e9c3 1221 	strd	r1, r2, [r3, #132]	; 0x84
}
   34fd6:	4770      	bx	lr

00034fd8 <user_callback>:
	const struct lpuart_data *data = get_dev_data(dev);
   34fd8:	6902      	ldr	r2, [r0, #16]
	if (data->user_callback) {
   34fda:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   34fde:	b113      	cbz	r3, 34fe6 <user_callback+0xe>
		data->user_callback(dev, evt, data->user_data);
   34fe0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
   34fe4:	4718      	bx	r3
}
   34fe6:	4770      	bx	lr

00034fe8 <api_irq_tx_enable>:
	data->int_driven.tx_enabled = true;
   34fe8:	2201      	movs	r2, #1
	struct lpuart_data *data = get_dev_data(dev);
   34fea:	6903      	ldr	r3, [r0, #16]
	data->int_driven.tx_enabled = true;
   34fec:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	if (data->tx_buf == NULL) {
   34ff0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   34ff2:	b912      	cbnz	r2, 34ffa <api_irq_tx_enable+0x12>
		data->int_driven.callback(dev, data->int_driven.user_data);
   34ff4:	e9d3 2128 	ldrd	r2, r1, [r3, #160]	; 0xa0
   34ff8:	4710      	bx	r2
}
   34ffa:	4770      	bx	lr

00034ffc <api_irq_tx_disable>:
	data->int_driven.tx_enabled = false;
   34ffc:	2200      	movs	r2, #0
   34ffe:	6903      	ldr	r3, [r0, #16]
   35000:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
}
   35004:	4770      	bx	lr

00035006 <api_irq_tx_ready>:
	struct lpuart_data *data = get_dev_data(dev);
   35006:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.tx_enabled && (data->tx_buf == NULL);
   35008:	f893 01b4 	ldrb.w	r0, [r3, #436]	; 0x1b4
   3500c:	b118      	cbz	r0, 35016 <api_irq_tx_ready+0x10>
   3500e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   35010:	fab0 f080 	clz	r0, r0
   35014:	0940      	lsrs	r0, r0, #5
}
   35016:	4770      	bx	lr

00035018 <api_irq_callback_set>:
	struct lpuart_data *data = get_dev_data(dev);
   35018:	6903      	ldr	r3, [r0, #16]
	data->int_driven.user_data = user_data;
   3501a:	e9c3 1228 	strd	r1, r2, [r3, #160]	; 0xa0
}
   3501e:	4770      	bx	lr

00035020 <api_irq_rx_disable>:
	data->int_driven.rx_enabled = false;
   35020:	2200      	movs	r2, #0
   35022:	6903      	ldr	r3, [r0, #16]
   35024:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
}
   35028:	4770      	bx	lr

0003502a <api_irq_rx_ready>:
	struct lpuart_data *data = get_dev_data(dev);
   3502a:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.rx_enabled &&
   3502c:	f893 01b5 	ldrb.w	r0, [r3, #437]	; 0x1b5
   35030:	b120      	cbz	r0, 3503c <api_irq_rx_ready+0x12>
   35032:	e9d3 306b 	ldrd	r3, r0, [r3, #428]	; 0x1ac
   35036:	1ac0      	subs	r0, r0, r3
   35038:	bf18      	it	ne
   3503a:	2001      	movne	r0, #1
}
   3503c:	4770      	bx	lr

0003503e <api_irq_tx_complete>:
	return api_irq_tx_ready(dev);
   3503e:	f7ff bfe2 	b.w	35006 <api_irq_tx_ready>

00035042 <api_irq_err_enable>:
	data->int_driven.err_enabled = true;
   35042:	2201      	movs	r2, #1
   35044:	6903      	ldr	r3, [r0, #16]
   35046:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
}
   3504a:	4770      	bx	lr

0003504c <api_irq_err_disable>:
	data->int_driven.err_enabled = false;
   3504c:	2200      	movs	r2, #0
   3504e:	6903      	ldr	r3, [r0, #16]
   35050:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
}
   35054:	4770      	bx	lr

00035056 <api_irq_update>:
}
   35056:	2001      	movs	r0, #1
   35058:	4770      	bx	lr

0003505a <api_configure>:

static int api_configure(const struct device *dev, const struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   3505a:	79ca      	ldrb	r2, [r1, #7]
	const struct lpuart_data *data = get_dev_data(dev);
   3505c:	6903      	ldr	r3, [r0, #16]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   3505e:	b922      	cbnz	r2, 3506a <api_configure+0x10>
		return -ENOTSUP;
	}

	return uart_configure(data->uart, cfg);
   35060:	6818      	ldr	r0, [r3, #0]
	if (api->configure == NULL) {
   35062:	6883      	ldr	r3, [r0, #8]
   35064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   35066:	b11b      	cbz	r3, 35070 <api_configure+0x16>
	return api->configure(dev, cfg);
   35068:	4718      	bx	r3
		return -ENOTSUP;
   3506a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3506e:	4770      	bx	lr
		return -ENOSYS;
   35070:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   35074:	4770      	bx	lr

00035076 <api_config_get>:

static int api_config_get(const struct device *dev, struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	return uart_config_get(data->uart, cfg);
   35076:	6903      	ldr	r3, [r0, #16]
   35078:	6818      	ldr	r0, [r3, #0]
	if (api->config_get == NULL) {
   3507a:	6883      	ldr	r3, [r0, #8]
   3507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3507e:	b103      	cbz	r3, 35082 <api_config_get+0xc>
	return api->config_get(dev, cfg);
   35080:	4718      	bx	r3
}
   35082:	f06f 0057 	mvn.w	r0, #87	; 0x57
   35086:	4770      	bx	lr

00035088 <api_irq_is_pending>:
{
   35088:	b508      	push	{r3, lr}
   3508a:	4602      	mov	r2, r0
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   3508c:	f7ff ffcd 	bl	3502a <api_irq_rx_ready>
   35090:	b930      	cbnz	r0, 350a0 <api_irq_is_pending+0x18>
   35092:	4610      	mov	r0, r2
   35094:	f7ff ffb7 	bl	35006 <api_irq_tx_ready>
   35098:	3800      	subs	r0, #0
   3509a:	bf18      	it	ne
   3509c:	2001      	movne	r0, #1
}
   3509e:	bd08      	pop	{r3, pc}
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   350a0:	2001      	movs	r0, #1
   350a2:	e7fc      	b.n	3509e <api_irq_is_pending+0x16>

000350a4 <api_fifo_read>:
{
   350a4:	b538      	push	{r3, r4, r5, lr}
   350a6:	4603      	mov	r3, r0
	struct lpuart_data *data = get_dev_data(dev);
   350a8:	691d      	ldr	r5, [r3, #16]
{
   350aa:	4608      	mov	r0, r1
	return data->int_driven.rxlen - data->int_driven.rxrd;
   350ac:	e9d5 436b 	ldrd	r4, r3, [r5, #428]	; 0x1ac
	if (available) {
   350b0:	1ae4      	subs	r4, r4, r3
   350b2:	d00d      	beq.n	350d0 <api_fifo_read+0x2c>
		cpylen = MIN(available, size);
   350b4:	4294      	cmp	r4, r2
   350b6:	bf28      	it	cs
   350b8:	4614      	movcs	r4, r2
		memcpy(rx_data,
   350ba:	f503 7396 	add.w	r3, r3, #300	; 0x12c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   350be:	18e9      	adds	r1, r5, r3
   350c0:	4622      	mov	r2, r4
   350c2:	f002 fb5e 	bl	37782 <memcpy>
		data->int_driven.rxrd += cpylen;
   350c6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   350ca:	4423      	add	r3, r4
   350cc:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
}
   350d0:	4620      	mov	r0, r4
   350d2:	bd38      	pop	{r3, r4, r5, pc}

000350d4 <api_poll_in>:
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   350d4:	2201      	movs	r2, #1
{
   350d6:	b508      	push	{r3, lr}
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   350d8:	f7ff ffe4 	bl	350a4 <api_fifo_read>
   350dc:	fab0 f080 	clz	r0, r0
   350e0:	0940      	lsrs	r0, r0, #5
}
   350e2:	4240      	negs	r0, r0
   350e4:	bd08      	pop	{r3, pc}

000350e6 <ctrl_pin_set.constprop.0>:
static void ctrl_pin_set(const struct lpuart_bidir_gpio *io, bool force)
   350e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   350e8:	4605      	mov	r5, r0
	__asm__ volatile(
   350ea:	f04f 0320 	mov.w	r3, #32
   350ee:	f3ef 8411 	mrs	r4, BASEPRI
   350f2:	f383 8811 	msr	BASEPRI, r3
   350f6:	f3bf 8f6f 	isb	sy
    p_reg->CONFIG[idx] = 0;
   350fa:	2200      	movs	r2, #0
   350fc:	7c83      	ldrb	r3, [r0, #18]
   350fe:	009b      	lsls	r3, r3, #2
   35100:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   35104:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   35108:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3510c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_event_configure(NRF_GPIOTE, io->ch, io->nrf_pin,
   35110:	7c41      	ldrb	r1, [r0, #17]
   35112:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   35116:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   3511a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3511e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   35122:	020a      	lsls	r2, r1, #8
   35124:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
   35128:	4302      	orrs	r2, r0
   3512a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   3512e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   35132:	a801      	add	r0, sp, #4
   35134:	9101      	str	r1, [sp, #4]
   35136:	f7ea fe9f 	bl	1fe78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3513a:	220c      	movs	r2, #12
   3513c:	9b01      	ldr	r3, [sp, #4]
   3513e:	3380      	adds	r3, #128	; 0x80
   35140:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   35144:	7cab      	ldrb	r3, [r5, #18]
   35146:	009b      	lsls	r3, r3, #2
   35148:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3514c:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   35150:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   35154:	f042 0201 	orr.w	r2, r2, #1
   35158:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	__asm__ volatile(
   3515c:	f384 8811 	msr	BASEPRI, r4
   35160:	f3bf 8f6f 	isb	sy
}
   35164:	b003      	add	sp, #12
   35166:	bd30      	pop	{r4, r5, pc}

00035168 <api_tx>:
{
   35168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lpuart_data *data = get_dev_data(dev);
   3516a:	6904      	ldr	r4, [r0, #16]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3516c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   35170:	e8d0 5fef 	ldaex	r5, [r0]
   35174:	2d00      	cmp	r5, #0
   35176:	d103      	bne.n	35180 <api_tx+0x18>
   35178:	e8c0 1fe6 	stlex	r6, r1, [r0]
   3517c:	2e00      	cmp	r6, #0
   3517e:	d1f7      	bne.n	35170 <api_tx+0x8>
	if (!atomic_ptr_cas((atomic_ptr_t *)&data->tx_buf, NULL, (void *)buf)) {
   35180:	d127      	bne.n	351d2 <api_tx+0x6a>
	data->tx_len = len;
   35182:	6722      	str	r2, [r4, #112]	; 0x70
	k_timer_start(&data->tx_timer, SYS_TIMEOUT_MS(timeout), K_NO_WAIT);
   35184:	1c5a      	adds	r2, r3, #1
   35186:	f104 0530 	add.w	r5, r4, #48	; 0x30
   3518a:	d01e      	beq.n	351ca <api_tx+0x62>
   3518c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   35190:	f240 36e7 	movw	r6, #999	; 0x3e7
   35194:	2700      	movs	r7, #0
   35196:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   3519a:	fbc0 6701 	smlal	r6, r7, r0, r1
   3519e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   351a2:	2300      	movs	r3, #0
   351a4:	4630      	mov	r0, r6
   351a6:	4639      	mov	r1, r7
   351a8:	f7dc f822 	bl	111f0 <__aeabi_uldivmod>
   351ac:	4602      	mov	r2, r0
   351ae:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   351b0:	2100      	movs	r1, #0
   351b2:	2000      	movs	r0, #0
   351b4:	e9cd 0100 	strd	r0, r1, [sp]
   351b8:	4628      	mov	r0, r5
   351ba:	f7f8 fbb3 	bl	2d924 <z_impl_k_timer_start>
	ctrl_pin_set(&data->req_pin, false);
   351be:	1d20      	adds	r0, r4, #4
   351c0:	f7ff ff91 	bl	350e6 <ctrl_pin_set.constprop.0>
	return 0;
   351c4:	2000      	movs	r0, #0
}
   351c6:	b003      	add	sp, #12
   351c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_timer_start(&data->tx_timer, SYS_TIMEOUT_MS(timeout), K_NO_WAIT);
   351ca:	f04f 32ff 	mov.w	r2, #4294967295
   351ce:	4613      	mov	r3, r2
   351d0:	e7ee      	b.n	351b0 <api_tx+0x48>
		return -EBUSY;
   351d2:	f06f 000f 	mvn.w	r0, #15
   351d6:	e7f6      	b.n	351c6 <api_tx+0x5e>

000351d8 <api_fifo_fill>:
	size = MIN(size, sizeof(data->int_driven.txbuf));
   351d8:	2a80      	cmp	r2, #128	; 0x80
   351da:	bf28      	it	cs
   351dc:	2280      	movcs	r2, #128	; 0x80
{
   351de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   351e0:	4607      	mov	r7, r0
	size = MIN(size, sizeof(data->int_driven.txbuf));
   351e2:	4614      	mov	r4, r2
	struct lpuart_data *data = get_dev_data(dev);
   351e4:	6905      	ldr	r5, [r0, #16]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   351e6:	f505 7394 	add.w	r3, r5, #296	; 0x128
   351ea:	e8d3 2fef 	ldaex	r2, [r3]
   351ee:	2a00      	cmp	r2, #0
   351f0:	d103      	bne.n	351fa <api_fifo_fill+0x22>
   351f2:	e8c3 4fe0 	stlex	r0, r4, [r3]
   351f6:	2800      	cmp	r0, #0
   351f8:	d1f7      	bne.n	351ea <api_fifo_fill+0x12>
   351fa:	bf0c      	ite	eq
   351fc:	2001      	moveq	r0, #1
   351fe:	2000      	movne	r0, #0
	if (!atomic_cas((atomic_t *)&data->int_driven.txlen, 0, size)) {
   35200:	d113      	bne.n	3522a <api_fifo_fill+0x52>
	memcpy(data->int_driven.txbuf, tx_data, size);
   35202:	f105 06a8 	add.w	r6, r5, #168	; 0xa8
   35206:	4622      	mov	r2, r4
   35208:	4630      	mov	r0, r6
   3520a:	f002 faba 	bl	37782 <memcpy>
	err = api_tx(dev, data->int_driven.txbuf,
   3520e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   35212:	4631      	mov	r1, r6
   35214:	4638      	mov	r0, r7
   35216:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
   3521a:	f7ff ffa5 	bl	35168 <api_tx>
	if (err < 0) {
   3521e:	2800      	cmp	r0, #0
		data->int_driven.txlen = 0;
   35220:	bfb6      	itet	lt
   35222:	2000      	movlt	r0, #0
	size = MIN(size, sizeof(data->int_driven.txbuf));
   35224:	4620      	movge	r0, r4
		data->int_driven.txlen = 0;
   35226:	f8c5 0128 	strlt.w	r0, [r5, #296]	; 0x128
}
   3522a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003522c <api_rx_disable>:
	data->rx_state = RX_TO_OFF;
   3522c:	2206      	movs	r2, #6
	struct lpuart_data *data = get_dev_data(dev);
   3522e:	6903      	ldr	r3, [r0, #16]
	return uart_rx_disable(data->uart);
   35230:	6818      	ldr	r0, [r3, #0]
	data->rx_state = RX_TO_OFF;
   35232:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	return api->rx_disable(dev);
   35236:	6883      	ldr	r3, [r0, #8]
   35238:	695b      	ldr	r3, [r3, #20]
   3523a:	4718      	bx	r3

0003523c <ctrl_pin_idle>:
{
   3523c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (io->req) {
   3523e:	7cc5      	ldrb	r5, [r0, #19]
{
   35240:	4604      	mov	r4, r0
	if (io->req) {
   35242:	b11d      	cbz	r5, 3524c <ctrl_pin_idle+0x10>
		ctrl_pin_clear(io);
   35244:	f7ea fe50 	bl	1fee8 <ctrl_pin_clear>
}
   35248:	b003      	add	sp, #12
   3524a:	bd30      	pop	{r4, r5, pc}
    p_reg->CONFIG[idx] = 0;
   3524c:	7c83      	ldrb	r3, [r0, #18]
   3524e:	009b      	lsls	r3, r3, #2
   35250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   35254:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   35258:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3525c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_event_configure(NRF_GPIOTE, io->ch, io->nrf_pin,
   35260:	7c41      	ldrb	r1, [r0, #17]
   35262:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   35266:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   3526a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3526e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   35272:	020a      	lsls	r2, r1, #8
   35274:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
   35278:	4302      	orrs	r2, r0
   3527a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   3527e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   35282:	a801      	add	r0, sp, #4
   35284:	9101      	str	r1, [sp, #4]
   35286:	f7ea fdf7 	bl	1fe78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3528a:	9b01      	ldr	r3, [sp, #4]
   3528c:	3380      	adds	r3, #128	; 0x80
   3528e:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   35292:	7ca3      	ldrb	r3, [r4, #18]
   35294:	009b      	lsls	r3, r3, #2
   35296:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3529a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   3529e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   352a2:	f042 0201 	orr.w	r2, r2, #1
   352a6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   352aa:	e7cd      	b.n	35248 <ctrl_pin_idle+0xc>

000352ac <api_tx_abort>:
{
   352ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lpuart_data *data = get_dev_data(dev);
   352b0:	6904      	ldr	r4, [r0, #16]
{
   352b2:	4605      	mov	r5, r0
	const uint8_t *buf = data->tx_buf;
   352b4:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
{
   352b6:	b086      	sub	sp, #24
	if (data->tx_buf == NULL) {
   352b8:	b37f      	cbz	r7, 3531a <api_tx_abort+0x6e>
	z_impl_k_timer_stop(timer);
   352ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
   352be:	f002 f9bf 	bl	37640 <z_impl_k_timer_stop>
	__asm__ volatile(
   352c2:	f04f 0320 	mov.w	r3, #32
   352c6:	f3ef 8811 	mrs	r8, BASEPRI
   352ca:	f383 8811 	msr	BASEPRI, r3
   352ce:	f3bf 8f6f 	isb	sy
	data->tx_buf = NULL;
   352d2:	2600      	movs	r6, #0
	ctrl_pin_idle(&data->req_pin);
   352d4:	1d20      	adds	r0, r4, #4
   352d6:	f7ff ffb1 	bl	3523c <ctrl_pin_idle>
	data->tx_buf = NULL;
   352da:	66e6      	str	r6, [r4, #108]	; 0x6c
	data->tx_active = false;
   352dc:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
	__asm__ volatile(
   352e0:	f388 8811 	msr	BASEPRI, r8
   352e4:	f3bf 8f6f 	isb	sy
	err = uart_tx_abort(data->uart);
   352e8:	6820      	ldr	r0, [r4, #0]
	return api->tx_abort(dev);
   352ea:	6883      	ldr	r3, [r0, #8]
   352ec:	689b      	ldr	r3, [r3, #8]
   352ee:	4798      	blx	r3
	if (err != -EFAULT) {
   352f0:	f110 0f0e 	cmn.w	r0, #14
   352f4:	4604      	mov	r4, r0
   352f6:	d10c      	bne.n	35312 <api_tx_abort+0x66>
	struct uart_event event = {
   352f8:	4631      	mov	r1, r6
   352fa:	2214      	movs	r2, #20
   352fc:	a801      	add	r0, sp, #4
   352fe:	f002 fa60 	bl	377c2 <memset>
   35302:	2301      	movs	r3, #1
	user_callback(dev, &event);
   35304:	4628      	mov	r0, r5
   35306:	a901      	add	r1, sp, #4
	struct uart_event event = {
   35308:	f88d 3004 	strb.w	r3, [sp, #4]
   3530c:	9702      	str	r7, [sp, #8]
	user_callback(dev, &event);
   3530e:	f7ff fe63 	bl	34fd8 <user_callback>
}
   35312:	4620      	mov	r0, r4
   35314:	b006      	add	sp, #24
   35316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EFAULT;
   3531a:	f06f 040d 	mvn.w	r4, #13
   3531e:	e7f8      	b.n	35312 <api_tx_abort+0x66>

00035320 <api_irq_rx_enable>:
{
   35320:	b538      	push	{r3, r4, r5, lr}
	data->int_driven.rx_enabled = true;
   35322:	2301      	movs	r3, #1
	struct lpuart_data *data = get_dev_data(dev);
   35324:	6904      	ldr	r4, [r0, #16]
{
   35326:	4605      	mov	r5, r0
	data->int_driven.rx_enabled = true;
   35328:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
	if (int_driven_rd_available(data)) {
   3532c:	e9d4 326b 	ldrd	r3, r2, [r4, #428]	; 0x1ac
   35330:	429a      	cmp	r2, r3
   35332:	d109      	bne.n	35348 <api_irq_rx_enable+0x28>
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   35334:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   35338:	2b05      	cmp	r3, #5
   3533a:	d10c      	bne.n	35356 <api_irq_rx_enable+0x36>
		int_driven_rx_feed(dev, data);
   3533c:	4621      	mov	r1, r4
   3533e:	4628      	mov	r0, r5
}
   35340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		int_driven_rx_feed(dev, data);
   35344:	f7eb b8e2 	b.w	2050c <int_driven_rx_feed>
		data->int_driven.callback(dev, data->int_driven.user_data);
   35348:	e9d4 3128 	ldrd	r3, r1, [r4, #160]	; 0xa0
   3534c:	4798      	blx	r3
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   3534e:	e9d4 236b 	ldrd	r2, r3, [r4, #428]	; 0x1ac
   35352:	429a      	cmp	r2, r3
   35354:	d0ee      	beq.n	35334 <api_irq_rx_enable+0x14>
}
   35356:	bd38      	pop	{r3, r4, r5, pc}

00035358 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   35358:	2000      	movs	r0, #0
   3535a:	4770      	bx	lr

0003535c <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3535c:	4668      	mov	r0, sp
   3535e:	f020 0107 	bic.w	r1, r0, #7
   35362:	468d      	mov	sp, r1
   35364:	b501      	push	{r0, lr}
	nrf_modem_os_trace_irq_handler();
   35366:	f7f0 ff9b 	bl	262a0 <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3536a:	f7e2 f991 	bl	17690 <_arch_isr_direct_pm>
   3536e:	f7e2 fac7 	bl	17900 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   35372:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   35376:	4685      	mov	sp, r0
   35378:	4770      	bx	lr

0003537a <trace_task_create>:
{
   3537a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   3537c:	201d      	movs	r0, #29
   3537e:	2200      	movs	r2, #0
   35380:	2106      	movs	r1, #6
   35382:	f7e2 f953 	bl	1762c <z_arm_irq_priority_set>
}
   35386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   3538a:	201d      	movs	r0, #29
   3538c:	f7e2 b91c 	b.w	175c8 <arch_irq_enable>

00035390 <read_task_create>:
{
   35390:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   35392:	201c      	movs	r0, #28
   35394:	2200      	movs	r2, #0
   35396:	2106      	movs	r1, #6
   35398:	f7e2 f948 	bl	1762c <z_arm_irq_priority_set>
}
   3539c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   353a0:	201c      	movs	r0, #28
   353a2:	f7e2 b911 	b.w	175c8 <arch_irq_enable>

000353a6 <nrf_modem_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   353a6:	2000      	movs	r0, #0
   353a8:	4770      	bx	lr

000353aa <z_to_nrf_flags>:
{
   353aa:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   353ac:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   353b0:	bf18      	it	ne
   353b2:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   353b4:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   353b6:	bf48      	it	mi
   353b8:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   353bc:	069a      	lsls	r2, r3, #26
		nrf_flags |= NRF_MSG_TRUNC;
   353be:	bf48      	it	mi
   353c0:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   353c4:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   353c6:	bf48      	it	mi
   353c8:	f040 0010 	orrmi.w	r0, r0, #16
}
   353cc:	4770      	bx	lr

000353ce <z_to_nrf_family>:
	switch (z_family) {
   353ce:	2806      	cmp	r0, #6
   353d0:	d809      	bhi.n	353e6 <z_to_nrf_family+0x18>
   353d2:	2806      	cmp	r0, #6
   353d4:	d813      	bhi.n	353fe <z_to_nrf_family+0x30>
   353d6:	e8df f000 	tbb	[pc, r0]
   353da:	1510      	.short	0x1510
   353dc:	12120e04 	.word	0x12120e04
   353e0:	0c          	.byte	0x0c
   353e1:	00          	.byte	0x00
   353e2:	200a      	movs	r0, #10
   353e4:	4770      	bx	lr
   353e6:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   353e8:	bf14      	ite	ne
   353ea:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   353ee:	2066      	moveq	r0, #102	; 0x66
   353f0:	4770      	bx	lr
		return NRF_AF_LOCAL;
   353f2:	2001      	movs	r0, #1
   353f4:	4770      	bx	lr
		return NRF_AF_PACKET;
   353f6:	2005      	movs	r0, #5
   353f8:	4770      	bx	lr
		return NRF_AF_UNSPEC;
   353fa:	2000      	movs	r0, #0
   353fc:	4770      	bx	lr
		return -EAFNOSUPPORT;
   353fe:	f06f 0069 	mvn.w	r0, #105	; 0x69
   35402:	4770      	bx	lr
		return NRF_AF_INET;
   35404:	2002      	movs	r0, #2
}
   35406:	4770      	bx	lr

00035408 <z_to_nrf_protocol>:
	switch (proto) {
   35408:	f240 1311 	movw	r3, #273	; 0x111
   3540c:	4298      	cmp	r0, r3
   3540e:	d023      	beq.n	35458 <z_to_nrf_protocol+0x50>
   35410:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   35414:	da11      	bge.n	3543a <z_to_nrf_protocol+0x32>
   35416:	2811      	cmp	r0, #17
   35418:	d021      	beq.n	3545e <z_to_nrf_protocol+0x56>
   3541a:	dc06      	bgt.n	3542a <z_to_nrf_protocol+0x22>
   3541c:	b300      	cbz	r0, 35460 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   3541e:	2806      	cmp	r0, #6
   35420:	bf14      	ite	ne
   35422:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   35426:	2001      	moveq	r0, #1
   35428:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   3542a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3542e:	bf14      	ite	ne
   35430:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   35434:	f44f 7082 	moveq.w	r0, #260	; 0x104
   35438:	4770      	bx	lr
	switch (proto) {
   3543a:	f240 2302 	movw	r3, #514	; 0x202
   3543e:	4298      	cmp	r0, r3
   35440:	d00e      	beq.n	35460 <z_to_nrf_protocol+0x58>
   35442:	f240 2303 	movw	r3, #515	; 0x203
   35446:	4298      	cmp	r0, r3
   35448:	d00a      	beq.n	35460 <z_to_nrf_protocol+0x58>
   3544a:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   3544e:	4298      	cmp	r0, r3
   35450:	bf18      	it	ne
   35452:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   35456:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   35458:	f44f 7087 	mov.w	r0, #270	; 0x10e
   3545c:	4770      	bx	lr
	switch (proto) {
   3545e:	2002      	movs	r0, #2
}
   35460:	4770      	bx	lr

00035462 <nrf91_socket_is_supported>:
}
   35462:	2001      	movs	r0, #1
   35464:	4770      	bx	lr

00035466 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   35466:	f7f5 bc9d 	b.w	2ada4 <z_impl_k_mutex_unlock>

0003546a <nrf91_socket_offload_getsockopt>:
{
   3546a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3546e:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   35470:	2300      	movs	r3, #0
{
   35472:	b086      	sub	sp, #24
   35474:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   35478:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3547c:	f8d8 3000 	ldr.w	r3, [r8]
{
   35480:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   35482:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   35484:	f240 2302 	movw	r3, #514	; 0x202
   35488:	4299      	cmp	r1, r3
{
   3548a:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   3548c:	6807      	ldr	r7, [r0, #0]
	switch (z_in_level) {
   3548e:	d005      	beq.n	3549c <nrf91_socket_offload_getsockopt+0x32>
   35490:	dc31      	bgt.n	354f6 <nrf91_socket_offload_getsockopt+0x8c>
   35492:	2901      	cmp	r1, #1
   35494:	d002      	beq.n	3549c <nrf91_socket_offload_getsockopt+0x32>
   35496:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3549a:	d13d      	bne.n	35518 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3549c:	4631      	mov	r1, r6
   3549e:	4620      	mov	r0, r4
   354a0:	aa02      	add	r2, sp, #8
   354a2:	f7eb fd71 	bl	20f88 <z_to_nrf_optname>
   354a6:	2800      	cmp	r0, #0
   354a8:	db36      	blt.n	35518 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   354aa:	2c01      	cmp	r4, #1
   354ac:	d127      	bne.n	354fe <nrf91_socket_offload_getsockopt+0x94>
   354ae:	f1a6 0314 	sub.w	r3, r6, #20
   354b2:	2b01      	cmp	r3, #1
   354b4:	d823      	bhi.n	354fe <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   354b6:	2308      	movs	r3, #8
   354b8:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   354ba:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   354bc:	aa03      	add	r2, sp, #12
   354be:	4638      	mov	r0, r7
   354c0:	9200      	str	r2, [sp, #0]
   354c2:	4621      	mov	r1, r4
   354c4:	9a02      	ldr	r2, [sp, #8]
   354c6:	f001 ff18 	bl	372fa <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   354ca:	4607      	mov	r7, r0
   354cc:	b978      	cbnz	r0, 354ee <nrf91_socket_offload_getsockopt+0x84>
   354ce:	b175      	cbz	r5, 354ee <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   354d0:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   354d2:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   354d4:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   354d8:	d109      	bne.n	354ee <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   354da:	2e04      	cmp	r6, #4
   354dc:	d111      	bne.n	35502 <nrf91_socket_offload_getsockopt+0x98>
				if (*(int *)optval != 0) {
   354de:	6828      	ldr	r0, [r5, #0]
   354e0:	b128      	cbz	r0, 354ee <nrf91_socket_offload_getsockopt+0x84>
					nrf_modem_os_errno_set(*(int *)optval);
   354e2:	f7eb fb5b 	bl	20b9c <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   354e6:	f7fc ffc5 	bl	32474 <__errno>
   354ea:	6803      	ldr	r3, [r0, #0]
   354ec:	602b      	str	r3, [r5, #0]
}
   354ee:	4638      	mov	r0, r7
   354f0:	b006      	add	sp, #24
   354f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   354f6:	f240 2303 	movw	r3, #515	; 0x203
   354fa:	4299      	cmp	r1, r3
   354fc:	e7cd      	b.n	3549a <nrf91_socket_offload_getsockopt+0x30>
   354fe:	462b      	mov	r3, r5
   35500:	e7dc      	b.n	354bc <nrf91_socket_offload_getsockopt+0x52>
			} else if ((optname == SO_RCVTIMEO) ||
   35502:	3e14      	subs	r6, #20
   35504:	2e01      	cmp	r6, #1
   35506:	d8f2      	bhi.n	354ee <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   35508:	9b04      	ldr	r3, [sp, #16]
   3550a:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   3550c:	9b05      	ldr	r3, [sp, #20]
   3550e:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   35510:	2308      	movs	r3, #8
   35512:	f8c8 3000 	str.w	r3, [r8]
   35516:	e7ea      	b.n	354ee <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   35518:	f7fc ffac 	bl	32474 <__errno>
   3551c:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3551e:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   35522:	6003      	str	r3, [r0, #0]
	return retval;
   35524:	e7e3      	b.n	354ee <nrf91_socket_offload_getsockopt+0x84>

00035526 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   35526:	6800      	ldr	r0, [r0, #0]
   35528:	f001 be97 	b.w	3725a <nrf_listen>

0003552c <nrf91_socket_offload_freeaddrinfo>:
{
   3552c:	b538      	push	{r3, r4, r5, lr}
   3552e:	4604      	mov	r4, r0
	while (next != NULL) {
   35530:	b904      	cbnz	r4, 35534 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   35532:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   35534:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   35536:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   35538:	f002 f8e2 	bl	37700 <k_free>
		k_free(this);
   3553c:	4620      	mov	r0, r4
   3553e:	f002 f8df 	bl	37700 <k_free>
		next = next->ai_next;
   35542:	462c      	mov	r4, r5
   35544:	e7f4      	b.n	35530 <nrf91_socket_offload_freeaddrinfo+0x4>

00035546 <z_to_nrf_addrinfo_hints>:
{
   35546:	b538      	push	{r3, r4, r5, lr}
   35548:	460c      	mov	r4, r1
   3554a:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   3554c:	2220      	movs	r2, #32
   3554e:	2100      	movs	r1, #0
   35550:	4620      	mov	r0, r4
   35552:	f002 f936 	bl	377c2 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   35556:	686a      	ldr	r2, [r5, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   35558:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   3555c:	04d2      	lsls	r2, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   3555e:	bf48      	it	mi
   35560:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   35564:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   35566:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   35568:	2b03      	cmp	r3, #3
   3556a:	d003      	beq.n	35574 <z_to_nrf_addrinfo_hints+0x2e>
   3556c:	2b04      	cmp	r3, #4
   3556e:	bf08      	it	eq
   35570:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   35574:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   35576:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   35578:	f7ff ff29 	bl	353ce <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3557c:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   35580:	d00b      	beq.n	3559a <z_to_nrf_addrinfo_hints+0x54>
	nrf_out->ai_family = family;
   35582:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   35584:	6928      	ldr	r0, [r5, #16]
   35586:	f7ff ff3f 	bl	35408 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3558a:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3558e:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   35590:	d003      	beq.n	3559a <z_to_nrf_addrinfo_hints+0x54>
	if (z_in->ai_canonname != NULL) {
   35592:	69e8      	ldr	r0, [r5, #28]
   35594:	b108      	cbz	r0, 3559a <z_to_nrf_addrinfo_hints+0x54>
		nrf_out->ai_canonname = z_in->ai_canonname;
   35596:	61a0      	str	r0, [r4, #24]
	return 0;
   35598:	2000      	movs	r0, #0
}
   3559a:	bd38      	pop	{r3, r4, r5, pc}

0003559c <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3559c:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3559e:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   355a0:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   355a2:	4603      	mov	r3, r0
{
   355a4:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   355a6:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   355aa:	f101 0420 	add.w	r4, r1, #32
   355ae:	f101 0210 	add.w	r2, r1, #16
   355b2:	f852 5b04 	ldr.w	r5, [r2], #4
   355b6:	42a2      	cmp	r2, r4
   355b8:	f843 5b04 	str.w	r5, [r3], #4
   355bc:	d1f9      	bne.n	355b2 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   355be:	6a0b      	ldr	r3, [r1, #32]
   355c0:	7503      	strb	r3, [r0, #20]
}
   355c2:	bd30      	pop	{r4, r5, pc}

000355c4 <z_to_nrf_ipv6>:
{
   355c4:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   355c6:	2124      	movs	r1, #36	; 0x24
   355c8:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   355ca:	8841      	ldrh	r1, [r0, #2]
{
   355cc:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   355ce:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   355d0:	210a      	movs	r1, #10
{
   355d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   355d4:	6059      	str	r1, [r3, #4]
   355d6:	1d04      	adds	r4, r0, #4
   355d8:	f103 0610 	add.w	r6, r3, #16
   355dc:	f100 0714 	add.w	r7, r0, #20
   355e0:	4635      	mov	r5, r6
   355e2:	6820      	ldr	r0, [r4, #0]
   355e4:	6861      	ldr	r1, [r4, #4]
   355e6:	3408      	adds	r4, #8
   355e8:	c503      	stmia	r5!, {r0, r1}
   355ea:	42bc      	cmp	r4, r7
   355ec:	462e      	mov	r6, r5
   355ee:	d1f7      	bne.n	355e0 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   355f0:	7d12      	ldrb	r2, [r2, #20]
   355f2:	621a      	str	r2, [r3, #32]
}
   355f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000355f6 <nrf91_socket_offload_sendto>:
{
   355f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   355fa:	b08d      	sub	sp, #52	; 0x34
   355fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
   355fe:	460d      	mov	r5, r1
   35600:	4616      	mov	r6, r2
   35602:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   35604:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   35608:	b96c      	cbnz	r4, 35626 <nrf91_socket_offload_sendto+0x30>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3560a:	4618      	mov	r0, r3
   3560c:	f7ff fecd 	bl	353aa <z_to_nrf_flags>
   35610:	4603      	mov	r3, r0
   35612:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   35616:	4632      	mov	r2, r6
   35618:	4629      	mov	r1, r5
   3561a:	4640      	mov	r0, r8
   3561c:	f001 fdd6 	bl	371cc <nrf_sendto>
}
   35620:	b00d      	add	sp, #52	; 0x34
   35622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   35626:	8823      	ldrh	r3, [r4, #0]
   35628:	2b01      	cmp	r3, #1
   3562a:	d113      	bne.n	35654 <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   3562c:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3562e:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   35632:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   35636:	2302      	movs	r3, #2
   35638:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3563a:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3563c:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3563e:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   35640:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   35644:	f7ff feb1 	bl	353aa <z_to_nrf_flags>
   35648:	aa03      	add	r2, sp, #12
   3564a:	4603      	mov	r3, r0
   3564c:	f8cd 9004 	str.w	r9, [sp, #4]
   35650:	9200      	str	r2, [sp, #0]
   35652:	e7e0      	b.n	35616 <nrf91_socket_offload_sendto+0x20>
	} else if (to->sa_family == AF_INET6) {
   35654:	2b02      	cmp	r3, #2
   35656:	d10d      	bne.n	35674 <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   35658:	f10d 090c 	add.w	r9, sp, #12
   3565c:	4649      	mov	r1, r9
   3565e:	4620      	mov	r0, r4
   35660:	f7ff ffb0 	bl	355c4 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   35664:	4638      	mov	r0, r7
   35666:	f7ff fea0 	bl	353aa <z_to_nrf_flags>
   3566a:	2224      	movs	r2, #36	; 0x24
   3566c:	4603      	mov	r3, r0
   3566e:	e9cd 9200 	strd	r9, r2, [sp]
   35672:	e7d0      	b.n	35616 <nrf91_socket_offload_sendto+0x20>
	errno = ENOTSUP;
   35674:	f7fc fefe 	bl	32474 <__errno>
   35678:	2386      	movs	r3, #134	; 0x86
   3567a:	6003      	str	r3, [r0, #0]
	return retval;
   3567c:	f04f 30ff 	mov.w	r0, #4294967295
   35680:	e7ce      	b.n	35620 <nrf91_socket_offload_sendto+0x2a>

00035682 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   35682:	2300      	movs	r3, #0
{
   35684:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   35686:	e9cd 3300 	strd	r3, r3, [sp]
   3568a:	f7ff ffb4 	bl	355f6 <nrf91_socket_offload_sendto>
}
   3568e:	b003      	add	sp, #12
   35690:	f85d fb04 	ldr.w	pc, [sp], #4

00035694 <nrf91_socket_offload_connect>:
{
   35694:	4603      	mov	r3, r0
   35696:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   35698:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   3569a:	880b      	ldrh	r3, [r1, #0]
{
   3569c:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   3569e:	2b01      	cmp	r3, #1
{
   356a0:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   356a2:	d10f      	bne.n	356c4 <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   356a4:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   356a6:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   356a8:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   356ac:	2302      	movs	r3, #2
   356ae:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   356b0:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   356b2:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   356b6:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   356b8:	4620      	mov	r0, r4
   356ba:	a901      	add	r1, sp, #4
   356bc:	f001 fdbc 	bl	37238 <nrf_connect>
}
   356c0:	b00a      	add	sp, #40	; 0x28
   356c2:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   356c4:	2b02      	cmp	r3, #2
   356c6:	d104      	bne.n	356d2 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   356c8:	a901      	add	r1, sp, #4
   356ca:	f7ff ff7b 	bl	355c4 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   356ce:	2224      	movs	r2, #36	; 0x24
   356d0:	e7f2      	b.n	356b8 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   356d2:	4620      	mov	r0, r4
   356d4:	f001 fdb0 	bl	37238 <nrf_connect>
		if (retval < 0) {
   356d8:	2800      	cmp	r0, #0
   356da:	daf1      	bge.n	356c0 <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   356dc:	f7fc feca 	bl	32474 <__errno>
   356e0:	2386      	movs	r3, #134	; 0x86
   356e2:	6003      	str	r3, [r0, #0]
   356e4:	f04f 30ff 	mov.w	r0, #4294967295
   356e8:	e7ea      	b.n	356c0 <nrf91_socket_offload_connect+0x2c>

000356ea <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   356ea:	f7f5 ba61 	b.w	2abb0 <z_impl_k_mutex_lock>

000356ee <nrf91_socket_offload_recvfrom>:
{
   356ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   356f2:	4699      	mov	r9, r3
   356f4:	b08d      	sub	sp, #52	; 0x34
   356f6:	4606      	mov	r6, r0
   356f8:	e9dd 4814 	ldrd	r4, r8, [sp, #80]	; 0x50
	k_mutex_unlock(ctx->lock);
   356fc:	6840      	ldr	r0, [r0, #4]
{
   356fe:	460d      	mov	r5, r1
   35700:	4617      	mov	r7, r2
	k_mutex_unlock(ctx->lock);
   35702:	f7ff feb0 	bl	35466 <k_mutex_unlock>
	if (from == NULL) {
   35706:	4648      	mov	r0, r9
   35708:	f7ff fe4f 	bl	353aa <z_to_nrf_flags>
   3570c:	4603      	mov	r3, r0
   3570e:	b994      	cbnz	r4, 35736 <nrf91_socket_offload_recvfrom+0x48>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   35710:	4629      	mov	r1, r5
   35712:	463a      	mov	r2, r7
   35714:	e9cd 4400 	strd	r4, r4, [sp]
   35718:	6830      	ldr	r0, [r6, #0]
   3571a:	f001 fd72 	bl	37202 <nrf_recvfrom>
   3571e:	4605      	mov	r5, r0
	k_mutex_lock(ctx->lock, K_FOREVER);
   35720:	f04f 32ff 	mov.w	r2, #4294967295
   35724:	f04f 33ff 	mov.w	r3, #4294967295
   35728:	6870      	ldr	r0, [r6, #4]
   3572a:	f7ff ffde 	bl	356ea <k_mutex_lock.constprop.0>
}
   3572e:	4628      	mov	r0, r5
   35730:	b00d      	add	sp, #52	; 0x34
   35732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   35736:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   35738:	f10d 090c 	add.w	r9, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3573c:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3573e:	aa02      	add	r2, sp, #8
   35740:	4629      	mov	r1, r5
   35742:	9201      	str	r2, [sp, #4]
   35744:	6830      	ldr	r0, [r6, #0]
   35746:	463a      	mov	r2, r7
   35748:	f8cd 9000 	str.w	r9, [sp]
   3574c:	f001 fd59 	bl	37202 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   35750:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   35752:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   35754:	2b02      	cmp	r3, #2
   35756:	d10a      	bne.n	3576e <nrf91_socket_offload_recvfrom+0x80>
	ptr->sin_port = nrf_in->sin_port;
   35758:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   3575c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   3575e:	2301      	movs	r3, #1
   35760:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   35762:	9b06      	ldr	r3, [sp, #24]
   35764:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   35766:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   35768:	f8c8 3000 	str.w	r3, [r8]
   3576c:	e7d8      	b.n	35720 <nrf91_socket_offload_recvfrom+0x32>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3576e:	2b0a      	cmp	r3, #10
   35770:	d1d6      	bne.n	35720 <nrf91_socket_offload_recvfrom+0x32>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   35772:	4649      	mov	r1, r9
   35774:	4620      	mov	r0, r4
   35776:	f7ff ff11 	bl	3559c <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3577a:	2318      	movs	r3, #24
   3577c:	e7f4      	b.n	35768 <nrf91_socket_offload_recvfrom+0x7a>

0003577e <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3577e:	2300      	movs	r3, #0
{
   35780:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   35782:	e9cd 3300 	strd	r3, r3, [sp]
   35786:	f7ff ffb2 	bl	356ee <nrf91_socket_offload_recvfrom>
}
   3578a:	b003      	add	sp, #12
   3578c:	f85d fb04 	ldr.w	pc, [sp], #4

00035790 <nrf91_socket_offload_close>:
{
   35790:	b538      	push	{r3, r4, r5, lr}
   35792:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   35794:	6800      	ldr	r0, [r0, #0]
   35796:	f001 fd0c 	bl	371b2 <nrf_close>
	if (retval == 0) {
   3579a:	4604      	mov	r4, r0
   3579c:	b910      	cbnz	r0, 357a4 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   3579e:	4628      	mov	r0, r5
   357a0:	f7eb ff40 	bl	21624 <release_ctx>
}
   357a4:	4620      	mov	r0, r4
   357a6:	bd38      	pop	{r3, r4, r5, pc}

000357a8 <nrf91_socket_offload_setsockopt>:
{
   357a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   357ac:	461e      	mov	r6, r3
	switch (z_in_level) {
   357ae:	f240 2302 	movw	r3, #514	; 0x202
{
   357b2:	b086      	sub	sp, #24
	switch (z_in_level) {
   357b4:	4299      	cmp	r1, r3
{
   357b6:	460c      	mov	r4, r1
   357b8:	4615      	mov	r5, r2
   357ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   357bc:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   357c0:	d005      	beq.n	357ce <nrf91_socket_offload_setsockopt+0x26>
   357c2:	dc20      	bgt.n	35806 <nrf91_socket_offload_setsockopt+0x5e>
   357c4:	2901      	cmp	r1, #1
   357c6:	d002      	beq.n	357ce <nrf91_socket_offload_setsockopt+0x26>
   357c8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   357cc:	d126      	bne.n	3581c <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   357ce:	4629      	mov	r1, r5
   357d0:	4620      	mov	r0, r4
   357d2:	aa03      	add	r2, sp, #12
   357d4:	f7eb fbd8 	bl	20f88 <z_to_nrf_optname>
   357d8:	2800      	cmp	r0, #0
   357da:	db1f      	blt.n	3581c <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   357dc:	2c01      	cmp	r4, #1
   357de:	d116      	bne.n	3580e <nrf91_socket_offload_setsockopt+0x66>
   357e0:	3d14      	subs	r5, #20
   357e2:	2d01      	cmp	r5, #1
   357e4:	d805      	bhi.n	357f2 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   357e6:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   357e8:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   357ea:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   357ec:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   357ee:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   357f0:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   357f2:	4633      	mov	r3, r6
   357f4:	4621      	mov	r1, r4
   357f6:	4640      	mov	r0, r8
   357f8:	9a03      	ldr	r2, [sp, #12]
   357fa:	9700      	str	r7, [sp, #0]
   357fc:	f001 fd62 	bl	372c4 <nrf_setsockopt>
}
   35800:	b006      	add	sp, #24
   35802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   35806:	f240 2303 	movw	r3, #515	; 0x203
   3580a:	4299      	cmp	r1, r3
   3580c:	e7de      	b.n	357cc <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3580e:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   35812:	d1ee      	bne.n	357f2 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   35814:	2d0a      	cmp	r5, #10
   35816:	bf08      	it	eq
   35818:	2701      	moveq	r7, #1
   3581a:	e7ea      	b.n	357f2 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   3581c:	f7fc fe2a 	bl	32474 <__errno>
   35820:	236d      	movs	r3, #109	; 0x6d
   35822:	6003      	str	r3, [r0, #0]
   35824:	f04f 30ff 	mov.w	r0, #4294967295
   35828:	e7ea      	b.n	35800 <nrf91_socket_offload_setsockopt+0x58>

0003582a <nrf91_socket_offload_bind>:
{
   3582a:	4603      	mov	r3, r0
   3582c:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3582e:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   35830:	880b      	ldrh	r3, [r1, #0]
{
   35832:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   35834:	2b01      	cmp	r3, #1
{
   35836:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   35838:	d10f      	bne.n	3585a <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   3583a:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3583c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3583e:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   35842:	2302      	movs	r3, #2
   35844:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   35846:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   35848:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3584c:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3584e:	4620      	mov	r0, r4
   35850:	a901      	add	r1, sp, #4
   35852:	f001 fd26 	bl	372a2 <nrf_bind>
}
   35856:	b00a      	add	sp, #40	; 0x28
   35858:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3585a:	2b02      	cmp	r3, #2
   3585c:	d104      	bne.n	35868 <nrf91_socket_offload_bind+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   3585e:	a901      	add	r1, sp, #4
   35860:	f7ff feb0 	bl	355c4 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   35864:	2224      	movs	r2, #36	; 0x24
   35866:	e7f2      	b.n	3584e <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   35868:	f7fc fe04 	bl	32474 <__errno>
   3586c:	2386      	movs	r3, #134	; 0x86
   3586e:	6003      	str	r3, [r0, #0]
   35870:	f04f 30ff 	mov.w	r0, #4294967295
   35874:	e7ef      	b.n	35856 <nrf91_socket_offload_bind+0x2c>

00035876 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   35876:	f7f5 ba95 	b.w	2ada4 <z_impl_k_mutex_unlock>

0003587a <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3587a:	280d      	cmp	r0, #13
   3587c:	d004      	beq.n	35888 <is_lfcr+0xe>
   3587e:	f1a0 030a 	sub.w	r3, r0, #10
   35882:	4258      	negs	r0, r3
   35884:	4158      	adcs	r0, r3
   35886:	4770      	bx	lr
		return true;
   35888:	2001      	movs	r0, #1
}
   3588a:	4770      	bx	lr

0003588c <skip_command_prefix>:
{
   3588c:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3588e:	6801      	ldr	r1, [r0, #0]
{
   35890:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   35892:	1c8b      	adds	r3, r1, #2
   35894:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   35896:	788c      	ldrb	r4, [r1, #2]
   35898:	4620      	mov	r0, r4
   3589a:	f7ff ffee 	bl	3587a <is_lfcr>
   3589e:	b910      	cbnz	r0, 358a6 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   358a0:	b10c      	cbz	r4, 358a6 <skip_command_prefix+0x1a>
	(*cmd)++;
   358a2:	3103      	adds	r1, #3
   358a4:	6011      	str	r1, [r2, #0]
}
   358a6:	bd10      	pop	{r4, pc}

000358a8 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   358a8:	6813      	ldr	r3, [r2, #0]
   358aa:	f7ec bd17 	b.w	222dc <at_parser_max_params_from_str>

000358ae <at_params_list_init>:
{
   358ae:	b538      	push	{r3, r4, r5, lr}
   358b0:	460d      	mov	r5, r1
	if (list == NULL) {
   358b2:	4604      	mov	r4, r0
   358b4:	b140      	cbz	r0, 358c8 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   358b6:	2110      	movs	r1, #16
   358b8:	4628      	mov	r0, r5
   358ba:	f001 ff2c 	bl	37716 <k_calloc>
   358be:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   358c0:	b128      	cbz	r0, 358ce <at_params_list_init+0x20>
	return 0;
   358c2:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   358c4:	6025      	str	r5, [r4, #0]
}
   358c6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   358c8:	f06f 0015 	mvn.w	r0, #21
   358cc:	e7fb      	b.n	358c6 <at_params_list_init+0x18>
		return -ENOMEM;
   358ce:	f06f 000b 	mvn.w	r0, #11
   358d2:	e7f8      	b.n	358c6 <at_params_list_init+0x18>

000358d4 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   358d4:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   358d6:	4604      	mov	r4, r0
   358d8:	b148      	cbz	r0, 358ee <at_params_list_free+0x1a>
   358da:	6843      	ldr	r3, [r0, #4]
   358dc:	b13b      	cbz	r3, 358ee <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   358de:	2500      	movs	r5, #0
	at_params_list_clear(list);
   358e0:	f7ec fe06 	bl	224f0 <at_params_list_clear>
	k_free(list->params);
   358e4:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   358e6:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   358e8:	f001 ff0a 	bl	37700 <k_free>
	list->params = NULL;
   358ec:	6065      	str	r5, [r4, #4]
}
   358ee:	bd38      	pop	{r3, r4, r5, pc}

000358f0 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   358f0:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   358f2:	b910      	cbnz	r0, 358fa <at_params_empty_put+0xa>
		return -EINVAL;
   358f4:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   358f8:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   358fa:	6843      	ldr	r3, [r0, #4]
   358fc:	2b00      	cmp	r3, #0
   358fe:	d0f9      	beq.n	358f4 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   35900:	f7ec fd8c 	bl	2241c <at_params_get>
	if (param == NULL) {
   35904:	4604      	mov	r4, r0
   35906:	2800      	cmp	r0, #0
   35908:	d0f4      	beq.n	358f4 <at_params_empty_put+0x4>
	at_param_clear(param);
   3590a:	f7ec fdcd 	bl	224a8 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3590e:	2304      	movs	r3, #4
	param->value.int_val = 0;
   35910:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   35912:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   35914:	2300      	movs	r3, #0
	return 0;
   35916:	2000      	movs	r0, #0
	param->value.int_val = 0;
   35918:	e9c4 2302 	strd	r2, r3, [r4, #8]
	return 0;
   3591c:	e7ec      	b.n	358f8 <at_params_empty_put+0x8>

0003591e <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   3591e:	b570      	push	{r4, r5, r6, lr}
   35920:	4616      	mov	r6, r2
   35922:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   35924:	b910      	cbnz	r0, 3592c <at_params_int_put+0xe>
		return -EINVAL;
   35926:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   3592a:	bd70      	pop	{r4, r5, r6, pc}
	if (list == NULL || list->params == NULL) {
   3592c:	6843      	ldr	r3, [r0, #4]
   3592e:	2b00      	cmp	r3, #0
   35930:	d0f9      	beq.n	35926 <at_params_int_put+0x8>
	struct at_param *param = at_params_get(list, index);
   35932:	f7ec fd73 	bl	2241c <at_params_get>
	if (param == NULL) {
   35936:	4604      	mov	r4, r0
   35938:	2800      	cmp	r0, #0
   3593a:	d0f4      	beq.n	35926 <at_params_int_put+0x8>
	at_param_clear(param);
   3593c:	f7ec fdb4 	bl	224a8 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   35940:	2301      	movs	r3, #1
	return 0;
   35942:	2000      	movs	r0, #0
	param->value.int_val = value;
   35944:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   35948:	7023      	strb	r3, [r4, #0]
	return 0;
   3594a:	e7ee      	b.n	3592a <at_params_int_put+0xc>

0003594c <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3594e:	4617      	mov	r7, r2
   35950:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   35952:	b910      	cbnz	r0, 3595a <at_params_string_put+0xe>
		return -EINVAL;
   35954:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   35958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   3595a:	6843      	ldr	r3, [r0, #4]
   3595c:	2b00      	cmp	r3, #0
   3595e:	d0f9      	beq.n	35954 <at_params_string_put+0x8>
   35960:	2a00      	cmp	r2, #0
   35962:	d0f7      	beq.n	35954 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   35964:	f7ec fd5a 	bl	2241c <at_params_get>
	if (param == NULL) {
   35968:	4604      	mov	r4, r0
   3596a:	2800      	cmp	r0, #0
   3596c:	d0f2      	beq.n	35954 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   3596e:	1c68      	adds	r0, r5, #1
   35970:	f001 fecd 	bl	3770e <k_malloc>
	if (param_value == NULL) {
   35974:	4606      	mov	r6, r0
   35976:	b160      	cbz	r0, 35992 <at_params_string_put+0x46>
   35978:	462a      	mov	r2, r5
   3597a:	4639      	mov	r1, r7
   3597c:	f001 ff01 	bl	37782 <memcpy>
	at_param_clear(param);
   35980:	4620      	mov	r0, r4
   35982:	f7ec fd91 	bl	224a8 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   35986:	2302      	movs	r3, #2
	return 0;
   35988:	2000      	movs	r0, #0
	param->size = str_len;
   3598a:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3598c:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3598e:	60a6      	str	r6, [r4, #8]
	return 0;
   35990:	e7e2      	b.n	35958 <at_params_string_put+0xc>
		return -ENOMEM;
   35992:	f06f 000b 	mvn.w	r0, #11
   35996:	e7df      	b.n	35958 <at_params_string_put+0xc>

00035998 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   35998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3599a:	4617      	mov	r7, r2
   3599c:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3599e:	b910      	cbnz	r0, 359a6 <at_params_array_put+0xe>
		return -EINVAL;
   359a0:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   359a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   359a6:	6843      	ldr	r3, [r0, #4]
   359a8:	2b00      	cmp	r3, #0
   359aa:	d0f9      	beq.n	359a0 <at_params_array_put+0x8>
   359ac:	2a00      	cmp	r2, #0
   359ae:	d0f7      	beq.n	359a0 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   359b0:	f7ec fd34 	bl	2241c <at_params_get>
	if (param == NULL) {
   359b4:	4604      	mov	r4, r0
   359b6:	2800      	cmp	r0, #0
   359b8:	d0f2      	beq.n	359a0 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   359ba:	4628      	mov	r0, r5
   359bc:	f001 fea7 	bl	3770e <k_malloc>
	if (param_value == NULL) {
   359c0:	4606      	mov	r6, r0
   359c2:	b160      	cbz	r0, 359de <at_params_array_put+0x46>
   359c4:	462a      	mov	r2, r5
   359c6:	4639      	mov	r1, r7
   359c8:	f001 fedb 	bl	37782 <memcpy>
	at_param_clear(param);
   359cc:	4620      	mov	r0, r4
   359ce:	f7ec fd6b 	bl	224a8 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   359d2:	2303      	movs	r3, #3
	return 0;
   359d4:	2000      	movs	r0, #0
	param->size = array_len;
   359d6:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   359d8:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   359da:	60a6      	str	r6, [r4, #8]
	return 0;
   359dc:	e7e2      	b.n	359a4 <at_params_array_put+0xc>
		return -ENOMEM;
   359de:	f06f 000b 	mvn.w	r0, #11
   359e2:	e7df      	b.n	359a4 <at_params_array_put+0xc>

000359e4 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   359e4:	b5d0      	push	{r4, r6, r7, lr}
   359e6:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   359e8:	b910      	cbnz	r0, 359f0 <at_params_short_get+0xc>
		return -EINVAL;
   359ea:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
}
   359ee:	bdd0      	pop	{r4, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   359f0:	6843      	ldr	r3, [r0, #4]
   359f2:	2b00      	cmp	r3, #0
   359f4:	d0f9      	beq.n	359ea <at_params_short_get+0x6>
   359f6:	2a00      	cmp	r2, #0
   359f8:	d0f7      	beq.n	359ea <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   359fa:	f7ec fd0f 	bl	2241c <at_params_get>
	if (param == NULL) {
   359fe:	2800      	cmp	r0, #0
   35a00:	d0f3      	beq.n	359ea <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   35a02:	7803      	ldrb	r3, [r0, #0]
   35a04:	2b01      	cmp	r3, #1
   35a06:	d1f0      	bne.n	359ea <at_params_short_get+0x6>
	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   35a08:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   35a0c:	f513 4600 	adds.w	r6, r3, #32768	; 0x8000
   35a10:	f142 0700 	adc.w	r7, r2, #0
   35a14:	2f00      	cmp	r7, #0
   35a16:	bf08      	it	eq
   35a18:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
   35a1c:	d2e5      	bcs.n	359ea <at_params_short_get+0x6>
	return 0;
   35a1e:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   35a20:	8023      	strh	r3, [r4, #0]
	return 0;
   35a22:	e7e4      	b.n	359ee <at_params_short_get+0xa>

00035a24 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   35a24:	b510      	push	{r4, lr}
   35a26:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   35a28:	b910      	cbnz	r0, 35a30 <at_params_unsigned_short_get+0xc>
		return -EINVAL;
   35a2a:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   35a2e:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   35a30:	6843      	ldr	r3, [r0, #4]
   35a32:	2b00      	cmp	r3, #0
   35a34:	d0f9      	beq.n	35a2a <at_params_unsigned_short_get+0x6>
   35a36:	2a00      	cmp	r2, #0
   35a38:	d0f7      	beq.n	35a2a <at_params_unsigned_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   35a3a:	f7ec fcef 	bl	2241c <at_params_get>
	if (param == NULL) {
   35a3e:	2800      	cmp	r0, #0
   35a40:	d0f3      	beq.n	35a2a <at_params_unsigned_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   35a42:	7803      	ldrb	r3, [r0, #0]
   35a44:	2b01      	cmp	r3, #1
   35a46:	d1f0      	bne.n	35a2a <at_params_unsigned_short_get+0x6>
	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   35a48:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   35a4c:	2b00      	cmp	r3, #0
   35a4e:	bf08      	it	eq
   35a50:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   35a54:	d2e9      	bcs.n	35a2a <at_params_unsigned_short_get+0x6>
	return 0;
   35a56:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   35a58:	8022      	strh	r2, [r4, #0]
	return 0;
   35a5a:	e7e8      	b.n	35a2e <at_params_unsigned_short_get+0xa>

00035a5c <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   35a5c:	b5d0      	push	{r4, r6, r7, lr}
   35a5e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   35a60:	b910      	cbnz	r0, 35a68 <at_params_int_get+0xc>
		return -EINVAL;
   35a62:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
}
   35a66:	bdd0      	pop	{r4, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   35a68:	6843      	ldr	r3, [r0, #4]
   35a6a:	2b00      	cmp	r3, #0
   35a6c:	d0f9      	beq.n	35a62 <at_params_int_get+0x6>
   35a6e:	2a00      	cmp	r2, #0
   35a70:	d0f7      	beq.n	35a62 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   35a72:	f7ec fcd3 	bl	2241c <at_params_get>
	if (param == NULL) {
   35a76:	2800      	cmp	r0, #0
   35a78:	d0f3      	beq.n	35a62 <at_params_int_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   35a7a:	7803      	ldrb	r3, [r0, #0]
   35a7c:	2b01      	cmp	r3, #1
   35a7e:	d1f0      	bne.n	35a62 <at_params_int_get+0x6>
	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   35a80:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   35a84:	f113 4600 	adds.w	r6, r3, #2147483648	; 0x80000000
   35a88:	f142 0700 	adc.w	r7, r2, #0
   35a8c:	2f01      	cmp	r7, #1
   35a8e:	bf08      	it	eq
   35a90:	2e00      	cmpeq	r6, #0
   35a92:	d2e6      	bcs.n	35a62 <at_params_int_get+0x6>
	return 0;
   35a94:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   35a96:	6023      	str	r3, [r4, #0]
	return 0;
   35a98:	e7e5      	b.n	35a66 <at_params_int_get+0xa>

00035a9a <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   35a9a:	b510      	push	{r4, lr}
   35a9c:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   35a9e:	b910      	cbnz	r0, 35aa6 <at_params_int64_get+0xc>
		return -EINVAL;
   35aa0:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   35aa4:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   35aa6:	6843      	ldr	r3, [r0, #4]
   35aa8:	2b00      	cmp	r3, #0
   35aaa:	d0f9      	beq.n	35aa0 <at_params_int64_get+0x6>
   35aac:	2a00      	cmp	r2, #0
   35aae:	d0f7      	beq.n	35aa0 <at_params_int64_get+0x6>
	struct at_param *param = at_params_get(list, index);
   35ab0:	f7ec fcb4 	bl	2241c <at_params_get>
	if (param == NULL) {
   35ab4:	2800      	cmp	r0, #0
   35ab6:	d0f3      	beq.n	35aa0 <at_params_int64_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   35ab8:	7803      	ldrb	r3, [r0, #0]
   35aba:	2b01      	cmp	r3, #1
   35abc:	d1f0      	bne.n	35aa0 <at_params_int64_get+0x6>
	*value = param->value.int_val;
   35abe:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   35ac2:	2000      	movs	r0, #0
	*value = param->value.int_val;
   35ac4:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   35ac8:	e7ec      	b.n	35aa4 <at_params_int64_get+0xa>

00035aca <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   35aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35acc:	4617      	mov	r7, r2
   35ace:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   35ad0:	b910      	cbnz	r0, 35ad8 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   35ad2:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   35ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   35ad8:	6843      	ldr	r3, [r0, #4]
   35ada:	2b00      	cmp	r3, #0
   35adc:	d0f9      	beq.n	35ad2 <at_params_string_get+0x8>
   35ade:	2a00      	cmp	r2, #0
   35ae0:	d0f7      	beq.n	35ad2 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   35ae2:	2c00      	cmp	r4, #0
   35ae4:	d0f5      	beq.n	35ad2 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   35ae6:	f7ec fc99 	bl	2241c <at_params_get>
	if (param == NULL) {
   35aea:	4606      	mov	r6, r0
   35aec:	2800      	cmp	r0, #0
   35aee:	d0f0      	beq.n	35ad2 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   35af0:	7803      	ldrb	r3, [r0, #0]
   35af2:	2b02      	cmp	r3, #2
   35af4:	d1ed      	bne.n	35ad2 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   35af6:	f7ec fcb3 	bl	22460 <at_param_size>
	if (*len < param_len) {
   35afa:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   35afc:	4605      	mov	r5, r0
	if (*len < param_len) {
   35afe:	4283      	cmp	r3, r0
   35b00:	d307      	bcc.n	35b12 <at_params_string_get+0x48>
   35b02:	4602      	mov	r2, r0
   35b04:	68b1      	ldr	r1, [r6, #8]
   35b06:	4638      	mov	r0, r7
   35b08:	f001 fe3b 	bl	37782 <memcpy>
	return 0;
   35b0c:	2000      	movs	r0, #0
	*len = param_len;
   35b0e:	6025      	str	r5, [r4, #0]
	return 0;
   35b10:	e7e1      	b.n	35ad6 <at_params_string_get+0xc>
		return -ENOMEM;
   35b12:	f06f 000b 	mvn.w	r0, #11
   35b16:	e7de      	b.n	35ad6 <at_params_string_get+0xc>

00035b18 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   35b18:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   35b1a:	4605      	mov	r5, r0
   35b1c:	b180      	cbz	r0, 35b40 <at_params_valid_count_get+0x28>
   35b1e:	6843      	ldr	r3, [r0, #4]
   35b20:	b173      	cbz	r3, 35b40 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   35b22:	2100      	movs	r1, #0
   35b24:	f7ec fc7a 	bl	2241c <at_params_get>
	size_t valid_i = 0;
   35b28:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   35b2a:	b108      	cbz	r0, 35b30 <at_params_valid_count_get+0x18>
   35b2c:	7803      	ldrb	r3, [r0, #0]
   35b2e:	b90b      	cbnz	r3, 35b34 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   35b30:	4620      	mov	r0, r4
   35b32:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   35b34:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   35b36:	4621      	mov	r1, r4
   35b38:	4628      	mov	r0, r5
   35b3a:	f7ec fc6f 	bl	2241c <at_params_get>
   35b3e:	e7f4      	b.n	35b2a <at_params_valid_count_get+0x12>
		return -EINVAL;
   35b40:	f06f 0415 	mvn.w	r4, #21
   35b44:	e7f4      	b.n	35b30 <at_params_valid_count_get+0x18>

00035b46 <lte_lc_init_and_connect>:
{
   35b46:	b508      	push	{r3, lr}
	ret = init_and_config();
   35b48:	f7ed f9c6 	bl	22ed8 <init_and_config>
	if (ret) {
   35b4c:	b920      	cbnz	r0, 35b58 <lte_lc_init_and_connect+0x12>
}
   35b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(true);
   35b52:	2001      	movs	r0, #1
   35b54:	f7ed bab6 	b.w	230c4 <connect_lte>
}
   35b58:	bd08      	pop	{r3, pc}

00035b5a <string_to_int>:
{
   35b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   35b5c:	460c      	mov	r4, r1
   35b5e:	4605      	mov	r5, r0
   35b60:	4616      	mov	r6, r2
	errno = 0;
   35b62:	f7fc fc87 	bl	32474 <__errno>
   35b66:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   35b68:	4622      	mov	r2, r4
	errno = 0;
   35b6a:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   35b6c:	a901      	add	r1, sp, #4
   35b6e:	4628      	mov	r0, r5
   35b70:	f7f9 fad4 	bl	2f11c <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   35b74:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   35b76:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   35b78:	42ab      	cmp	r3, r5
   35b7a:	d103      	bne.n	35b84 <string_to_int+0x2a>
		return -ENODATA;
   35b7c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   35b80:	b002      	add	sp, #8
   35b82:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   35b84:	781b      	ldrb	r3, [r3, #0]
   35b86:	2b00      	cmp	r3, #0
   35b88:	d1f8      	bne.n	35b7c <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   35b8a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   35b8e:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   35b90:	3303      	adds	r3, #3
   35b92:	d802      	bhi.n	35b9a <string_to_int+0x40>
	return 0;
   35b94:	2000      	movs	r0, #0
	*output = temp;
   35b96:	6034      	str	r4, [r6, #0]
	return 0;
   35b98:	e7f2      	b.n	35b80 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   35b9a:	f7fc fc6b 	bl	32474 <__errno>
   35b9e:	6803      	ldr	r3, [r0, #0]
   35ba0:	2b22      	cmp	r3, #34	; 0x22
   35ba2:	d1f7      	bne.n	35b94 <string_to_int+0x3a>
   35ba4:	e7ea      	b.n	35b7c <string_to_int+0x22>

00035ba6 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   35ba6:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   35ba8:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   35baa:	b087      	sub	sp, #28
   35bac:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   35bae:	ab01      	add	r3, sp, #4
   35bb0:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   35bb2:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   35bb4:	f7ff ff89 	bl	35aca <at_params_string_get>
	if (err) {
   35bb8:	b968      	cbnz	r0, 35bd6 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   35bba:	9b01      	ldr	r3, [sp, #4]
   35bbc:	aa06      	add	r2, sp, #24
   35bbe:	4413      	add	r3, r2
   35bc0:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   35bc4:	4622      	mov	r2, r4
   35bc6:	4629      	mov	r1, r5
   35bc8:	a802      	add	r0, sp, #8
   35bca:	f7ff ffc6 	bl	35b5a <string_to_int>
   35bce:	2800      	cmp	r0, #0
		return -ENODATA;
   35bd0:	bf18      	it	ne
   35bd2:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   35bd6:	b007      	add	sp, #28
   35bd8:	bd30      	pop	{r4, r5, pc}

00035bda <date_time_handler>:
}
   35bda:	4770      	bx	lr

00035bdc <k_uptime_get>:
{
   35bdc:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   35bde:	f001 fcf4 	bl	375ca <z_impl_k_uptime_ticks>
   35be2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   35be6:	fba0 2304 	umull	r2, r3, r0, r4
   35bea:	fb04 3301 	mla	r3, r4, r1, r3
   35bee:	0bd0      	lsrs	r0, r2, #15
}
   35bf0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   35bf4:	0bd9      	lsrs	r1, r3, #15
   35bf6:	bd10      	pop	{r4, pc}

00035bf8 <update_offset>:
{
   35bf8:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   35bfa:	4604      	mov	r4, r0
   35bfc:	b140      	cbz	r0, 35c10 <update_offset+0x18>
   35bfe:	6803      	ldr	r3, [r0, #0]
   35c00:	b133      	cbz	r3, 35c10 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   35c02:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   35c04:	4418      	add	r0, r3
   35c06:	f7db fc7b 	bl	11500 <strlen>
   35c0a:	68a3      	ldr	r3, [r4, #8]
   35c0c:	4403      	add	r3, r0
   35c0e:	60a3      	str	r3, [r4, #8]
}
   35c10:	bd10      	pop	{r4, pc}

00035c12 <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   35c12:	b181      	cbz	r1, 35c36 <add_item_to_array+0x24>
   35c14:	b138      	cbz	r0, 35c26 <add_item_to_array+0x14>
   35c16:	4281      	cmp	r1, r0
   35c18:	d00d      	beq.n	35c36 <add_item_to_array+0x24>
    child = array->child;
   35c1a:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   35c1c:	b923      	cbnz	r3, 35c28 <add_item_to_array+0x16>
        array->child = item;
   35c1e:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   35c20:	e9c1 3100 	strd	r3, r1, [r1]
   35c24:	2001      	movs	r0, #1
}
   35c26:	4770      	bx	lr
        if (child->prev)
   35c28:	685a      	ldr	r2, [r3, #4]
   35c2a:	2a00      	cmp	r2, #0
   35c2c:	d0fa      	beq.n	35c24 <add_item_to_array+0x12>
    prev->next = item;
   35c2e:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   35c30:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
   35c32:	6059      	str	r1, [r3, #4]
   35c34:	e7f6      	b.n	35c24 <add_item_to_array+0x12>
        return false;
   35c36:	2000      	movs	r0, #0
   35c38:	4770      	bx	lr

00035c3a <ensure>:
{
   35c3a:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   35c3c:	4604      	mov	r4, r0
   35c3e:	b1b8      	cbz	r0, 35c70 <ensure+0x36>
   35c40:	6805      	ldr	r5, [r0, #0]
   35c42:	b165      	cbz	r5, 35c5e <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   35c44:	6842      	ldr	r2, [r0, #4]
   35c46:	b112      	cbz	r2, 35c4e <ensure+0x14>
   35c48:	6883      	ldr	r3, [r0, #8]
   35c4a:	429a      	cmp	r2, r3
   35c4c:	d910      	bls.n	35c70 <ensure+0x36>
    if (needed > INT_MAX)
   35c4e:	2900      	cmp	r1, #0
   35c50:	db0e      	blt.n	35c70 <ensure+0x36>
    needed += p->offset + 1;
   35c52:	68a0      	ldr	r0, [r4, #8]
   35c54:	4401      	add	r1, r0
   35c56:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   35c58:	429a      	cmp	r2, r3
   35c5a:	d302      	bcc.n	35c62 <ensure+0x28>
        return p->buffer + p->offset;
   35c5c:	4405      	add	r5, r0
}
   35c5e:	4628      	mov	r0, r5
   35c60:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   35c62:	6922      	ldr	r2, [r4, #16]
   35c64:	b922      	cbnz	r2, 35c70 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   35c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   35c6a:	d303      	bcc.n	35c74 <ensure+0x3a>
        if (needed <= INT_MAX)
   35c6c:	2b00      	cmp	r3, #0
   35c6e:	da0f      	bge.n	35c90 <ensure+0x56>
        return NULL;
   35c70:	2500      	movs	r5, #0
   35c72:	e7f4      	b.n	35c5e <ensure+0x24>
        newsize = needed + 1;
   35c74:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   35c76:	6a23      	ldr	r3, [r4, #32]
   35c78:	b16b      	cbz	r3, 35c96 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   35c7a:	4628      	mov	r0, r5
   35c7c:	4631      	mov	r1, r6
   35c7e:	4798      	blx	r3
        if (newbuffer == NULL)
   35c80:	4605      	mov	r5, r0
   35c82:	b9b0      	cbnz	r0, 35cb2 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   35c84:	69e3      	ldr	r3, [r4, #28]
   35c86:	6820      	ldr	r0, [r4, #0]
   35c88:	4798      	blx	r3
            p->buffer = NULL;
   35c8a:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   35c8e:	e7e6      	b.n	35c5e <ensure+0x24>
            newsize = INT_MAX;
   35c90:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   35c94:	e7ef      	b.n	35c76 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   35c96:	4630      	mov	r0, r6
   35c98:	69a3      	ldr	r3, [r4, #24]
   35c9a:	4798      	blx	r3
        if (!newbuffer)
   35c9c:	4605      	mov	r5, r0
   35c9e:	2800      	cmp	r0, #0
   35ca0:	d0f0      	beq.n	35c84 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   35ca2:	68a2      	ldr	r2, [r4, #8]
   35ca4:	6821      	ldr	r1, [r4, #0]
   35ca6:	3201      	adds	r2, #1
   35ca8:	f001 fd6b 	bl	37782 <memcpy>
        p->hooks.deallocate(p->buffer);
   35cac:	69e3      	ldr	r3, [r4, #28]
   35cae:	6820      	ldr	r0, [r4, #0]
   35cb0:	4798      	blx	r3
    return newbuffer + p->offset;
   35cb2:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   35cb4:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   35cb8:	441d      	add	r5, r3
   35cba:	e7d0      	b.n	35c5e <ensure+0x24>

00035cbc <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   35cbc:	4603      	mov	r3, r0
   35cbe:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   35cc0:	2028      	movs	r0, #40	; 0x28
   35cc2:	4798      	blx	r3
    if (node)
   35cc4:	4604      	mov	r4, r0
   35cc6:	b118      	cbz	r0, 35cd0 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   35cc8:	2228      	movs	r2, #40	; 0x28
   35cca:	2100      	movs	r1, #0
   35ccc:	f001 fd79 	bl	377c2 <memset>
}
   35cd0:	4620      	mov	r0, r4
   35cd2:	bd10      	pop	{r4, pc}

00035cd4 <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
   35cd4:	2101      	movs	r1, #1
   35cd6:	f7ee bdff 	b.w	248d8 <print.constprop.0>

00035cda <cJSON_AddStringToObject>:
{
   35cda:	b570      	push	{r4, r5, r6, lr}
   35cdc:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   35cde:	4610      	mov	r0, r2
{
   35ce0:	460e      	mov	r6, r1
    cJSON *string_item = cJSON_CreateString(string);
   35ce2:	f7ee fea9 	bl	24a38 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   35ce6:	2300      	movs	r3, #0
   35ce8:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   35cea:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   35cec:	4631      	mov	r1, r6
   35cee:	4628      	mov	r0, r5
   35cf0:	f7ee fe54 	bl	2499c <add_item_to_object.constprop.0>
   35cf4:	4605      	mov	r5, r0
   35cf6:	b918      	cbnz	r0, 35d00 <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   35cf8:	4620      	mov	r0, r4
   35cfa:	f7ee fe79 	bl	249f0 <cJSON_Delete>
    return NULL;
   35cfe:	462c      	mov	r4, r5
}
   35d00:	4620      	mov	r0, r4
   35d02:	bd70      	pop	{r4, r5, r6, pc}

00035d04 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   35d04:	4700      	bx	r0

00035d06 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   35d06:	f001 bc62 	b.w	375ce <z_impl_k_busy_wait>

00035d0a <nrf_gpio_pin_clear>:
{
   35d0a:	b507      	push	{r0, r1, r2, lr}
   35d0c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   35d0e:	a801      	add	r0, sp, #4
   35d10:	f7ef f9ae 	bl	25070 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   35d14:	2301      	movs	r3, #1
   35d16:	9a01      	ldr	r2, [sp, #4]
   35d18:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   35d1a:	60c3      	str	r3, [r0, #12]
}
   35d1c:	b003      	add	sp, #12
   35d1e:	f85d fb04 	ldr.w	pc, [sp], #4

00035d22 <nrf_gpio_pin_set>:
{
   35d22:	b507      	push	{r0, r1, r2, lr}
   35d24:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   35d26:	a801      	add	r0, sp, #4
   35d28:	f7ef f9a2 	bl	25070 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   35d2c:	2301      	movs	r3, #1
   35d2e:	9a01      	ldr	r2, [sp, #4]
   35d30:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   35d32:	6083      	str	r3, [r0, #8]
}
   35d34:	b003      	add	sp, #12
   35d36:	f85d fb04 	ldr.w	pc, [sp], #4

00035d3a <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   35d3a:	7b0a      	ldrb	r2, [r1, #12]
{
   35d3c:	4603      	mov	r3, r0
   35d3e:	2a03      	cmp	r2, #3
   35d40:	d829      	bhi.n	35d96 <xfer_completeness_check+0x5c>
   35d42:	e8df f002 	tbb	[pc, r2]
   35d46:	2521      	.short	0x2521
   35d48:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   35d4a:	688a      	ldr	r2, [r1, #8]
   35d4c:	0350      	lsls	r0, r2, #13
   35d4e:	d504      	bpl.n	35d5a <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   35d50:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   35d54:	6908      	ldr	r0, [r1, #16]
   35d56:	4290      	cmp	r0, r2
   35d58:	d107      	bne.n	35d6a <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   35d5a:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   35d5c:	0352      	lsls	r2, r2, #13
   35d5e:	d41a      	bmi.n	35d96 <xfer_completeness_check+0x5c>
   35d60:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   35d64:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   35d66:	4291      	cmp	r1, r2
   35d68:	d015      	beq.n	35d96 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   35d6a:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   35d6c:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   35d6e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   35d72:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   35d76:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   35d78:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   35d7c:	6908      	ldr	r0, [r1, #16]
   35d7e:	4290      	cmp	r0, r2
   35d80:	d1f3      	bne.n	35d6a <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   35d82:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   35d86:	e7ed      	b.n	35d64 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   35d88:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   35d8c:	6909      	ldr	r1, [r1, #16]
   35d8e:	e7ea      	b.n	35d66 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   35d90:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   35d94:	e7fa      	b.n	35d8c <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   35d96:	2001      	movs	r0, #1
}
   35d98:	4770      	bx	lr

00035d9a <nrf_gpio_pin_set>:
{
   35d9a:	b507      	push	{r0, r1, r2, lr}
   35d9c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   35d9e:	a801      	add	r0, sp, #4
   35da0:	f7f0 f904 	bl	25fac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   35da4:	2301      	movs	r3, #1
   35da6:	9a01      	ldr	r2, [sp, #4]
   35da8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   35daa:	6083      	str	r3, [r0, #8]
}
   35dac:	b003      	add	sp, #12
   35dae:	f85d fb04 	ldr.w	pc, [sp], #4

00035db2 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   35db2:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   35db4:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   35db6:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   35db8:	bf97      	itett	ls
   35dba:	6882      	ldrls	r2, [r0, #8]
    r = RdOff - WrOff - 1u;
   35dbc:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   35dc0:	18d2      	addls	r2, r2, r3
   35dc2:	f102 32ff 	addls.w	r2, r2, #4294967295
   35dc6:	bf94      	ite	ls
   35dc8:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   35dca:	1a58      	subhi	r0, r3, r1
}
   35dcc:	4770      	bx	lr

00035dce <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   35dce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35dd2:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   35dd4:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
   35dd8:	6867      	ldr	r7, [r4, #4]
   35dda:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   35dde:	4296      	cmp	r6, r2
   35de0:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   35de4:	4689      	mov	r9, r1
  if (Rem > NumBytes) {
   35de6:	4438      	add	r0, r7
   35de8:	d904      	bls.n	35df4 <_WriteNoCheck+0x26>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   35dea:	f001 fcca 	bl	37782 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   35dee:	60e5      	str	r5, [r4, #12]
}
   35df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   35df4:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   35df6:	eba5 0508 	sub.w	r5, r5, r8
   35dfa:	f001 fcc2 	bl	37782 <memcpy>
   35dfe:	462a      	mov	r2, r5
   35e00:	6860      	ldr	r0, [r4, #4]
   35e02:	eb09 0106 	add.w	r1, r9, r6
   35e06:	e7f0      	b.n	35dea <_WriteNoCheck+0x1c>

00035e08 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   35e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35e0c:	4606      	mov	r6, r0
   35e0e:	4689      	mov	r9, r1
   35e10:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   35e12:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   35e16:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   35e18:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   35e1a:	68b3      	ldr	r3, [r6, #8]
   35e1c:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   35e1e:	bf28      	it	cs
   35e20:	18e4      	addcs	r4, r4, r3
   35e22:	3c01      	subs	r4, #1
   35e24:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   35e26:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   35e28:	42bc      	cmp	r4, r7
   35e2a:	bf28      	it	cs
   35e2c:	463c      	movcs	r4, r7
   35e2e:	4294      	cmp	r4, r2
   35e30:	bf28      	it	cs
   35e32:	4614      	movcs	r4, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   35e34:	6870      	ldr	r0, [r6, #4]
   35e36:	4649      	mov	r1, r9
   35e38:	4428      	add	r0, r5
   35e3a:	4622      	mov	r2, r4
   35e3c:	f001 fca1 	bl	37782 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   35e40:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   35e42:	4425      	add	r5, r4
      WrOff = 0u;
   35e44:	42ab      	cmp	r3, r5
   35e46:	bf08      	it	eq
   35e48:	2500      	moveq	r5, #0
  } while (NumBytes);
   35e4a:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   35e4c:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   35e4e:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   35e50:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   35e52:	d1e1      	bne.n	35e18 <_WriteBlocking+0x10>
}
   35e54:	4640      	mov	r0, r8
   35e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00035e5a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   35e5a:	f7f0 b93d 	b.w	260d8 <_DoInit>

00035e5e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   35e5e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   35e60:	f7ff fffb 	bl	35e5a <SEGGER_RTT_Init>

	return 0;
}
   35e64:	2000      	movs	r0, #0
   35e66:	bd08      	pop	{r3, pc}

00035e68 <rpc_handle_ctrl_message>:
   35e68:	2902      	cmp	r1, #2
   35e6a:	b510      	push	{r4, lr}
   35e6c:	4604      	mov	r4, r0
   35e6e:	d005      	beq.n	35e7c <rpc_handle_ctrl_message+0x14>
   35e70:	2904      	cmp	r1, #4
   35e72:	d001      	beq.n	35e78 <rpc_handle_ctrl_message+0x10>
   35e74:	2901      	cmp	r1, #1
   35e76:	d107      	bne.n	35e88 <rpc_handle_ctrl_message+0x20>
   35e78:	2000      	movs	r0, #0
   35e7a:	bd10      	pop	{r4, pc}
   35e7c:	6880      	ldr	r0, [r0, #8]
   35e7e:	2800      	cmp	r0, #0
   35e80:	d0fa      	beq.n	35e78 <rpc_handle_ctrl_message+0x10>
   35e82:	f000 f83b 	bl	35efc <rpc_transport_data_free>
   35e86:	e7f7      	b.n	35e78 <rpc_handle_ctrl_message+0x10>
   35e88:	6880      	ldr	r0, [r0, #8]
   35e8a:	b108      	cbz	r0, 35e90 <rpc_handle_ctrl_message+0x28>
   35e8c:	f000 f836 	bl	35efc <rpc_transport_data_free>
   35e90:	4620      	mov	r0, r4
   35e92:	f000 f82f 	bl	35ef4 <rpc_transport_msg_free>
   35e96:	e7ef      	b.n	35e78 <rpc_handle_ctrl_message+0x10>

00035e98 <rpc_message_send>:
   35e98:	684b      	ldr	r3, [r1, #4]
   35e9a:	8008      	strh	r0, [r1, #0]
   35e9c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   35ea0:	f043 0302 	orr.w	r3, r3, #2
   35ea4:	4608      	mov	r0, r1
   35ea6:	604b      	str	r3, [r1, #4]
   35ea8:	f000 b82a 	b.w	35f00 <rpc_transport_data_msg_send>

00035eac <rpc_message_alloc>:
   35eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35eae:	2300      	movs	r3, #0
   35eb0:	4607      	mov	r7, r0
   35eb2:	4616      	mov	r6, r2
   35eb4:	460d      	mov	r5, r1
   35eb6:	6013      	str	r3, [r2, #0]
   35eb8:	b131      	cbz	r1, 35ec8 <rpc_message_alloc+0x1c>
   35eba:	4608      	mov	r0, r1
   35ebc:	f000 f81c 	bl	35ef8 <rpc_transport_data_alloc>
   35ec0:	4604      	mov	r4, r0
   35ec2:	b910      	cbnz	r0, 35eca <rpc_message_alloc+0x1e>
   35ec4:	200c      	movs	r0, #12
   35ec6:	e008      	b.n	35eda <rpc_message_alloc+0x2e>
   35ec8:	460c      	mov	r4, r1
   35eca:	f000 f811 	bl	35ef0 <rpc_transport_data_msg_alloc>
   35ece:	b128      	cbz	r0, 35edc <rpc_message_alloc+0x30>
   35ed0:	60c5      	str	r5, [r0, #12]
   35ed2:	6084      	str	r4, [r0, #8]
   35ed4:	8007      	strh	r7, [r0, #0]
   35ed6:	6030      	str	r0, [r6, #0]
   35ed8:	2000      	movs	r0, #0
   35eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35edc:	2c00      	cmp	r4, #0
   35ede:	d0f1      	beq.n	35ec4 <rpc_message_alloc+0x18>
   35ee0:	4620      	mov	r0, r4
   35ee2:	f000 f80b 	bl	35efc <rpc_transport_data_free>
   35ee6:	e7ed      	b.n	35ec4 <rpc_message_alloc+0x18>

00035ee8 <rpc_message_free>:
   35ee8:	f000 b804 	b.w	35ef4 <rpc_transport_msg_free>

00035eec <rpc_message_data_free>:
   35eec:	f000 b806 	b.w	35efc <rpc_transport_data_free>

00035ef0 <rpc_transport_data_msg_alloc>:
   35ef0:	f7f0 bb32 	b.w	26558 <rpc_transport_ipc_data_msg_alloc>

00035ef4 <rpc_transport_msg_free>:
   35ef4:	f7f0 bb68 	b.w	265c8 <rpc_transport_ipc_msg_free>

00035ef8 <rpc_transport_data_alloc>:
   35ef8:	f7f0 bb4c 	b.w	26594 <rpc_transport_ipc_data_alloc>

00035efc <rpc_transport_data_free>:
   35efc:	f7f0 bb8a 	b.w	26614 <rpc_transport_ipc_data_free>

00035f00 <rpc_transport_data_msg_send>:
   35f00:	f7f0 bad6 	b.w	264b0 <rpc_transport_ipc_data_msg_send>

00035f04 <trace_write>:
   35f04:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   35f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   35f0a:	f8ad 3000 	strh.w	r3, [sp]
   35f0e:	7803      	ldrb	r3, [r0, #0]
   35f10:	4604      	mov	r4, r0
   35f12:	f88d 3004 	strb.w	r3, [sp, #4]
   35f16:	6843      	ldr	r3, [r0, #4]
   35f18:	6882      	ldr	r2, [r0, #8]
   35f1a:	2105      	movs	r1, #5
   35f1c:	4293      	cmp	r3, r2
   35f1e:	bf96      	itet	ls
   35f20:	6906      	ldrls	r6, [r0, #16]
   35f22:	1a9e      	subhi	r6, r3, r2
   35f24:	1ab6      	subls	r6, r6, r2
   35f26:	4293      	cmp	r3, r2
   35f28:	bf2c      	ite	cs
   35f2a:	2500      	movcs	r5, #0
   35f2c:	68c5      	ldrcc	r5, [r0, #12]
   35f2e:	b2b6      	uxth	r6, r6
   35f30:	bf38      	it	cc
   35f32:	1b5b      	subcc	r3, r3, r5
   35f34:	4668      	mov	r0, sp
   35f36:	bf38      	it	cc
   35f38:	b29d      	uxthcc	r5, r3
   35f3a:	f8ad 6002 	strh.w	r6, [sp, #2]
   35f3e:	f7ff fa32 	bl	353a6 <nrf_modem_os_trace_put>
   35f42:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35f46:	68a0      	ldr	r0, [r4, #8]
   35f48:	b289      	uxth	r1, r1
   35f4a:	f7ff fa2c 	bl	353a6 <nrf_modem_os_trace_put>
   35f4e:	68a3      	ldr	r3, [r4, #8]
   35f50:	441e      	add	r6, r3
   35f52:	6923      	ldr	r3, [r4, #16]
   35f54:	60a6      	str	r6, [r4, #8]
   35f56:	429e      	cmp	r6, r3
   35f58:	bf04      	itt	eq
   35f5a:	68e3      	ldreq	r3, [r4, #12]
   35f5c:	60a3      	streq	r3, [r4, #8]
   35f5e:	b18d      	cbz	r5, 35f84 <trace_write+0x80>
   35f60:	2105      	movs	r1, #5
   35f62:	4668      	mov	r0, sp
   35f64:	f8ad 5002 	strh.w	r5, [sp, #2]
   35f68:	f7ff fa1d 	bl	353a6 <nrf_modem_os_trace_put>
   35f6c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35f70:	68e0      	ldr	r0, [r4, #12]
   35f72:	b289      	uxth	r1, r1
   35f74:	f7ff fa17 	bl	353a6 <nrf_modem_os_trace_put>
   35f78:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   35f7c:	68e2      	ldr	r2, [r4, #12]
   35f7e:	fa12 f383 	uxtah	r3, r2, r3
   35f82:	60a3      	str	r3, [r4, #8]
   35f84:	b002      	add	sp, #8
   35f86:	bd70      	pop	{r4, r5, r6, pc}

00035f88 <rpc_transport_ipc_msg_alloc>:
   35f88:	2300      	movs	r3, #0
   35f8a:	b570      	push	{r4, r5, r6, lr}
   35f8c:	6806      	ldr	r6, [r0, #0]
   35f8e:	429e      	cmp	r6, r3
   35f90:	d101      	bne.n	35f96 <rpc_transport_ipc_msg_alloc+0xe>
   35f92:	2000      	movs	r0, #0
   35f94:	e00d      	b.n	35fb2 <rpc_transport_ipc_msg_alloc+0x2a>
   35f96:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
   35f9a:	6865      	ldr	r5, [r4, #4]
   35f9c:	b2ed      	uxtb	r5, r5
   35f9e:	2d03      	cmp	r5, #3
   35fa0:	d108      	bne.n	35fb4 <rpc_transport_ipc_msg_alloc+0x2c>
   35fa2:	eb01 1083 	add.w	r0, r1, r3, lsl #6
   35fa6:	60a0      	str	r0, [r4, #8]
   35fa8:	6863      	ldr	r3, [r4, #4]
   35faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   35fae:	6063      	str	r3, [r4, #4]
   35fb0:	7102      	strb	r2, [r0, #4]
   35fb2:	bd70      	pop	{r4, r5, r6, pc}
   35fb4:	b915      	cbnz	r5, 35fbc <rpc_transport_ipc_msg_alloc+0x34>
   35fb6:	68a5      	ldr	r5, [r4, #8]
   35fb8:	2d00      	cmp	r5, #0
   35fba:	d0f2      	beq.n	35fa2 <rpc_transport_ipc_msg_alloc+0x1a>
   35fbc:	3301      	adds	r3, #1
   35fbe:	e7e6      	b.n	35f8e <rpc_transport_ipc_msg_alloc+0x6>

00035fc0 <at_client_evt_handler>:
   35fc0:	b120      	cbz	r0, 35fcc <at_client_evt_handler+0xc>
   35fc2:	f850 1b08 	ldr.w	r1, [r0], #8
   35fc6:	0c09      	lsrs	r1, r1, #16
   35fc8:	f000 be43 	b.w	36c52 <rpc_at_event_handler>
   35fcc:	4770      	bx	lr

00035fce <rpc_at_client_request_alloc>:
   35fce:	2300      	movs	r3, #0
   35fd0:	b513      	push	{r0, r1, r4, lr}
   35fd2:	4604      	mov	r4, r0
   35fd4:	aa01      	add	r2, sp, #4
   35fd6:	2003      	movs	r0, #3
   35fd8:	9301      	str	r3, [sp, #4]
   35fda:	f7ff ff67 	bl	35eac <rpc_message_alloc>
   35fde:	b918      	cbnz	r0, 35fe8 <rpc_at_client_request_alloc+0x1a>
   35fe0:	9b01      	ldr	r3, [sp, #4]
   35fe2:	b10b      	cbz	r3, 35fe8 <rpc_at_client_request_alloc+0x1a>
   35fe4:	3308      	adds	r3, #8
   35fe6:	6023      	str	r3, [r4, #0]
   35fe8:	b002      	add	sp, #8
   35fea:	bd10      	pop	{r4, pc}

00035fec <rpc_at_client_request_send>:
   35fec:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   35ff0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   35ff4:	4601      	mov	r1, r0
   35ff6:	2003      	movs	r0, #3
   35ff8:	f841 3d08 	str.w	r3, [r1, #-8]!
   35ffc:	f7ff bf4c 	b.w	35e98 <rpc_message_send>

00036000 <rpc_at_client_message_free>:
   36000:	3808      	subs	r0, #8
   36002:	f7ff bf71 	b.w	35ee8 <rpc_message_free>

00036006 <rpc_at_client_data_free>:
   36006:	f7ff bf71 	b.w	35eec <rpc_message_data_free>

0003600a <ip_client_event_handler>:
   3600a:	f850 1b08 	ldr.w	r1, [r0], #8
   3600e:	0c09      	lsrs	r1, r1, #16
   36010:	f7f1 bbfc 	b.w	2780c <rpc_ip_event_handler>

00036014 <rpc_ip_client_request_alloc>:
   36014:	2300      	movs	r3, #0
   36016:	b513      	push	{r0, r1, r4, lr}
   36018:	4604      	mov	r4, r0
   3601a:	aa01      	add	r2, sp, #4
   3601c:	2004      	movs	r0, #4
   3601e:	9301      	str	r3, [sp, #4]
   36020:	f7ff ff44 	bl	35eac <rpc_message_alloc>
   36024:	b918      	cbnz	r0, 3602e <rpc_ip_client_request_alloc+0x1a>
   36026:	9b01      	ldr	r3, [sp, #4]
   36028:	b10b      	cbz	r3, 3602e <rpc_ip_client_request_alloc+0x1a>
   3602a:	3308      	adds	r3, #8
   3602c:	6023      	str	r3, [r4, #0]
   3602e:	b002      	add	sp, #8
   36030:	bd10      	pop	{r4, pc}

00036032 <rpc_ip_client_request_send>:
   36032:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   36036:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   3603a:	d109      	bne.n	36050 <rpc_ip_client_request_send+0x1e>
   3603c:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   36040:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   36044:	4601      	mov	r1, r0
   36046:	2004      	movs	r0, #4
   36048:	f841 3d08 	str.w	r3, [r1, #-8]!
   3604c:	f7ff bf24 	b.w	35e98 <rpc_message_send>
   36050:	2001      	movs	r0, #1
   36052:	4770      	bx	lr

00036054 <rpc_ip_client_message_free>:
   36054:	3808      	subs	r0, #8
   36056:	f7ff bf47 	b.w	35ee8 <rpc_message_free>

0003605a <rpc_ip_client_data_free>:
   3605a:	f7ff bf47 	b.w	35eec <rpc_message_data_free>

0003605e <dfu_client_event_handler>:
   3605e:	f850 1b08 	ldr.w	r1, [r0], #8
   36062:	0c09      	lsrs	r1, r1, #16
   36064:	f7f2 bac4 	b.w	285f0 <rpc_dfu_event_handler>

00036068 <rpc_dfu_client_request_alloc>:
   36068:	2300      	movs	r3, #0
   3606a:	b513      	push	{r0, r1, r4, lr}
   3606c:	4604      	mov	r4, r0
   3606e:	aa01      	add	r2, sp, #4
   36070:	2006      	movs	r0, #6
   36072:	9301      	str	r3, [sp, #4]
   36074:	f7ff ff1a 	bl	35eac <rpc_message_alloc>
   36078:	b918      	cbnz	r0, 36082 <rpc_dfu_client_request_alloc+0x1a>
   3607a:	9b01      	ldr	r3, [sp, #4]
   3607c:	b10b      	cbz	r3, 36082 <rpc_dfu_client_request_alloc+0x1a>
   3607e:	3308      	adds	r3, #8
   36080:	6023      	str	r3, [r4, #0]
   36082:	b002      	add	sp, #8
   36084:	bd10      	pop	{r4, pc}

00036086 <rpc_dfu_client_request_send>:
   36086:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   3608a:	d109      	bne.n	360a0 <rpc_dfu_client_request_send+0x1a>
   3608c:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   36090:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   36094:	4601      	mov	r1, r0
   36096:	2006      	movs	r0, #6
   36098:	f841 3d08 	str.w	r3, [r1, #-8]!
   3609c:	f7ff befc 	b.w	35e98 <rpc_message_send>
   360a0:	2001      	movs	r0, #1
   360a2:	4770      	bx	lr

000360a4 <rpc_dfu_client_message_free>:
   360a4:	3808      	subs	r0, #8
   360a6:	f7ff bf1f 	b.w	35ee8 <rpc_message_free>

000360aa <rpc_dfu_client_data_free>:
   360aa:	f7ff bf1f 	b.w	35eec <rpc_message_data_free>

000360ae <rpc_gnss_client_request_alloc>:
   360ae:	2300      	movs	r3, #0
   360b0:	b513      	push	{r0, r1, r4, lr}
   360b2:	4604      	mov	r4, r0
   360b4:	aa01      	add	r2, sp, #4
   360b6:	2007      	movs	r0, #7
   360b8:	9301      	str	r3, [sp, #4]
   360ba:	f7ff fef7 	bl	35eac <rpc_message_alloc>
   360be:	b918      	cbnz	r0, 360c8 <rpc_gnss_client_request_alloc+0x1a>
   360c0:	9b01      	ldr	r3, [sp, #4]
   360c2:	b10b      	cbz	r3, 360c8 <rpc_gnss_client_request_alloc+0x1a>
   360c4:	3308      	adds	r3, #8
   360c6:	6023      	str	r3, [r4, #0]
   360c8:	b002      	add	sp, #8
   360ca:	bd10      	pop	{r4, pc}

000360cc <rpc_gnss_client_request_send>:
   360cc:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   360d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   360d4:	4601      	mov	r1, r0
   360d6:	2007      	movs	r0, #7
   360d8:	f841 3d08 	str.w	r3, [r1, #-8]!
   360dc:	f7ff bedc 	b.w	35e98 <rpc_message_send>

000360e0 <rpc_gnss_client_message_free>:
   360e0:	3808      	subs	r0, #8
   360e2:	f7ff bf01 	b.w	35ee8 <rpc_message_free>

000360e6 <rpc_gnss_client_data_free>:
   360e6:	f7ff bf01 	b.w	35eec <rpc_message_data_free>

000360ea <rpc_gnss_serialize_utc>:
   360ea:	b1c0      	cbz	r0, 3611e <rpc_gnss_serialize_utc+0x34>
   360ec:	b1b9      	cbz	r1, 3611e <rpc_gnss_serialize_utc+0x34>
   360ee:	2301      	movs	r3, #1
   360f0:	700b      	strb	r3, [r1, #0]
   360f2:	2300      	movs	r3, #0
   360f4:	704b      	strb	r3, [r1, #1]
   360f6:	6843      	ldr	r3, [r0, #4]
   360f8:	f8c1 3006 	str.w	r3, [r1, #6]
   360fc:	6803      	ldr	r3, [r0, #0]
   360fe:	f8c1 3002 	str.w	r3, [r1, #2]
   36102:	7a83      	ldrb	r3, [r0, #10]
   36104:	730b      	strb	r3, [r1, #12]
   36106:	7b43      	ldrb	r3, [r0, #13]
   36108:	73cb      	strb	r3, [r1, #15]
   3610a:	7b03      	ldrb	r3, [r0, #12]
   3610c:	738b      	strb	r3, [r1, #14]
   3610e:	7a03      	ldrb	r3, [r0, #8]
   36110:	728b      	strb	r3, [r1, #10]
   36112:	7ac3      	ldrb	r3, [r0, #11]
   36114:	734b      	strb	r3, [r1, #13]
   36116:	7a43      	ldrb	r3, [r0, #9]
   36118:	2010      	movs	r0, #16
   3611a:	72cb      	strb	r3, [r1, #11]
   3611c:	4770      	bx	lr
   3611e:	f04f 30ff 	mov.w	r0, #4294967295
   36122:	4770      	bx	lr

00036124 <rpc_gnss_serialize_ephe>:
   36124:	2800      	cmp	r0, #0
   36126:	d044      	beq.n	361b2 <rpc_gnss_serialize_ephe+0x8e>
   36128:	2900      	cmp	r1, #0
   3612a:	d042      	beq.n	361b2 <rpc_gnss_serialize_ephe+0x8e>
   3612c:	2302      	movs	r3, #2
   3612e:	700b      	strb	r3, [r1, #0]
   36130:	2300      	movs	r3, #0
   36132:	704b      	strb	r3, [r1, #1]
   36134:	68c3      	ldr	r3, [r0, #12]
   36136:	f8c1 300b 	str.w	r3, [r1, #11]
   3613a:	8903      	ldrh	r3, [r0, #8]
   3613c:	f8a1 3009 	strh.w	r3, [r1, #9]
   36140:	7983      	ldrb	r3, [r0, #6]
   36142:	720b      	strb	r3, [r1, #8]
   36144:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   36148:	878b      	strh	r3, [r1, #60]	; 0x3c
   3614a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   3614c:	86cb      	strh	r3, [r1, #54]	; 0x36
   3614e:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   36152:	874b      	strh	r3, [r1, #58]	; 0x3a
   36154:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   36156:	868b      	strh	r3, [r1, #52]	; 0x34
   36158:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   3615c:	87cb      	strh	r3, [r1, #62]	; 0x3e
   3615e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   36162:	870b      	strh	r3, [r1, #56]	; 0x38
   36164:	8b83      	ldrh	r3, [r0, #28]
   36166:	830b      	strh	r3, [r1, #24]
   36168:	6a83      	ldr	r3, [r0, #40]	; 0x28
   3616a:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   3616e:	7c83      	ldrb	r3, [r0, #18]
   36170:	744b      	strb	r3, [r1, #17]
   36172:	7843      	ldrb	r3, [r0, #1]
   36174:	70cb      	strb	r3, [r1, #3]
   36176:	6b43      	ldr	r3, [r0, #52]	; 0x34
   36178:	62cb      	str	r3, [r1, #44]	; 0x2c
   3617a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   3617c:	84cb      	strh	r3, [r1, #38]	; 0x26
   3617e:	8843      	ldrh	r3, [r0, #2]
   36180:	808b      	strh	r3, [r1, #4]
   36182:	6a03      	ldr	r3, [r0, #32]
   36184:	f8c1 301a 	str.w	r3, [r1, #26]
   36188:	6b83      	ldr	r3, [r0, #56]	; 0x38
   3618a:	630b      	str	r3, [r1, #48]	; 0x30
   3618c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   3618e:	f8c1 301e 	str.w	r3, [r1, #30]
   36192:	6b03      	ldr	r3, [r0, #48]	; 0x30
   36194:	628b      	str	r3, [r1, #40]	; 0x28
   36196:	7803      	ldrb	r3, [r0, #0]
   36198:	708b      	strb	r3, [r1, #2]
   3619a:	7c03      	ldrb	r3, [r0, #16]
   3619c:	73cb      	strb	r3, [r1, #15]
   3619e:	8883      	ldrh	r3, [r0, #4]
   361a0:	80cb      	strh	r3, [r1, #6]
   361a2:	8a83      	ldrh	r3, [r0, #20]
   361a4:	824b      	strh	r3, [r1, #18]
   361a6:	7c43      	ldrb	r3, [r0, #17]
   361a8:	740b      	strb	r3, [r1, #16]
   361aa:	6983      	ldr	r3, [r0, #24]
   361ac:	2040      	movs	r0, #64	; 0x40
   361ae:	614b      	str	r3, [r1, #20]
   361b0:	4770      	bx	lr
   361b2:	f04f 30ff 	mov.w	r0, #4294967295
   361b6:	4770      	bx	lr

000361b8 <rpc_gnss_serialize_alm>:
   361b8:	b340      	cbz	r0, 3620c <rpc_gnss_serialize_alm+0x54>
   361ba:	b339      	cbz	r1, 3620c <rpc_gnss_serialize_alm+0x54>
   361bc:	2303      	movs	r3, #3
   361be:	700b      	strb	r3, [r1, #0]
   361c0:	2300      	movs	r3, #0
   361c2:	704b      	strb	r3, [r1, #1]
   361c4:	8b83      	ldrh	r3, [r0, #28]
   361c6:	f8a1 301d 	strh.w	r3, [r1, #29]
   361ca:	8bc3      	ldrh	r3, [r0, #30]
   361cc:	f8a1 301f 	strh.w	r3, [r1, #31]
   361d0:	88c3      	ldrh	r3, [r0, #6]
   361d2:	810b      	strh	r3, [r1, #8]
   361d4:	8883      	ldrh	r3, [r0, #4]
   361d6:	80cb      	strh	r3, [r1, #6]
   361d8:	78c3      	ldrb	r3, [r0, #3]
   361da:	714b      	strb	r3, [r1, #5]
   361dc:	6983      	ldr	r3, [r0, #24]
   361de:	f8c1 3019 	str.w	r3, [r1, #25]
   361e2:	6903      	ldr	r3, [r0, #16]
   361e4:	f8c1 3011 	str.w	r3, [r1, #17]
   361e8:	8903      	ldrh	r3, [r0, #8]
   361ea:	814b      	strh	r3, [r1, #10]
   361ec:	68c3      	ldr	r3, [r0, #12]
   361ee:	f8c1 300d 	str.w	r3, [r1, #13]
   361f2:	7a83      	ldrb	r3, [r0, #10]
   361f4:	730b      	strb	r3, [r1, #12]
   361f6:	7803      	ldrb	r3, [r0, #0]
   361f8:	708b      	strb	r3, [r1, #2]
   361fa:	7883      	ldrb	r3, [r0, #2]
   361fc:	710b      	strb	r3, [r1, #4]
   361fe:	6943      	ldr	r3, [r0, #20]
   36200:	f8c1 3015 	str.w	r3, [r1, #21]
   36204:	7843      	ldrb	r3, [r0, #1]
   36206:	2021      	movs	r0, #33	; 0x21
   36208:	70cb      	strb	r3, [r1, #3]
   3620a:	4770      	bx	lr
   3620c:	f04f 30ff 	mov.w	r0, #4294967295
   36210:	4770      	bx	lr

00036212 <rpc_gnss_serialize_klob>:
   36212:	b1b0      	cbz	r0, 36242 <rpc_gnss_serialize_klob+0x30>
   36214:	b1a9      	cbz	r1, 36242 <rpc_gnss_serialize_klob+0x30>
   36216:	2304      	movs	r3, #4
   36218:	700b      	strb	r3, [r1, #0]
   3621a:	2300      	movs	r3, #0
   3621c:	704b      	strb	r3, [r1, #1]
   3621e:	7803      	ldrb	r3, [r0, #0]
   36220:	708b      	strb	r3, [r1, #2]
   36222:	7843      	ldrb	r3, [r0, #1]
   36224:	70cb      	strb	r3, [r1, #3]
   36226:	7883      	ldrb	r3, [r0, #2]
   36228:	710b      	strb	r3, [r1, #4]
   3622a:	78c3      	ldrb	r3, [r0, #3]
   3622c:	714b      	strb	r3, [r1, #5]
   3622e:	7903      	ldrb	r3, [r0, #4]
   36230:	718b      	strb	r3, [r1, #6]
   36232:	7943      	ldrb	r3, [r0, #5]
   36234:	71cb      	strb	r3, [r1, #7]
   36236:	7983      	ldrb	r3, [r0, #6]
   36238:	720b      	strb	r3, [r1, #8]
   3623a:	79c3      	ldrb	r3, [r0, #7]
   3623c:	200a      	movs	r0, #10
   3623e:	724b      	strb	r3, [r1, #9]
   36240:	4770      	bx	lr
   36242:	f04f 30ff 	mov.w	r0, #4294967295
   36246:	4770      	bx	lr

00036248 <rpc_gnss_serialize_nequick>:
   36248:	b180      	cbz	r0, 3626c <rpc_gnss_serialize_nequick+0x24>
   3624a:	b179      	cbz	r1, 3626c <rpc_gnss_serialize_nequick+0x24>
   3624c:	2305      	movs	r3, #5
   3624e:	700b      	strb	r3, [r1, #0]
   36250:	2300      	movs	r3, #0
   36252:	704b      	strb	r3, [r1, #1]
   36254:	8803      	ldrh	r3, [r0, #0]
   36256:	804b      	strh	r3, [r1, #2]
   36258:	8843      	ldrh	r3, [r0, #2]
   3625a:	808b      	strh	r3, [r1, #4]
   3625c:	8883      	ldrh	r3, [r0, #4]
   3625e:	80cb      	strh	r3, [r1, #6]
   36260:	7983      	ldrb	r3, [r0, #6]
   36262:	720b      	strb	r3, [r1, #8]
   36264:	79c3      	ldrb	r3, [r0, #7]
   36266:	200a      	movs	r0, #10
   36268:	724b      	strb	r3, [r1, #9]
   3626a:	4770      	bx	lr
   3626c:	f04f 30ff 	mov.w	r0, #4294967295
   36270:	4770      	bx	lr

00036272 <rpc_gnss_serialize_time_and_sv_tow>:
   36272:	b570      	push	{r4, r5, r6, lr}
   36274:	b1e8      	cbz	r0, 362b2 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   36276:	b1e1      	cbz	r1, 362b2 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   36278:	2206      	movs	r2, #6
   3627a:	2300      	movs	r3, #0
   3627c:	700a      	strb	r2, [r1, #0]
   3627e:	8802      	ldrh	r2, [r0, #0]
   36280:	704b      	strb	r3, [r1, #1]
   36282:	804a      	strh	r2, [r1, #2]
   36284:	68c2      	ldr	r2, [r0, #12]
   36286:	f101 0410 	add.w	r4, r1, #16
   3628a:	f8c1 200a 	str.w	r2, [r1, #10]
   3628e:	8902      	ldrh	r2, [r0, #8]
   36290:	810a      	strh	r2, [r1, #8]
   36292:	6842      	ldr	r2, [r0, #4]
   36294:	604a      	str	r2, [r1, #4]
   36296:	8a06      	ldrh	r6, [r0, #16]
   36298:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   3629c:	188d      	adds	r5, r1, r2
   3629e:	81ee      	strh	r6, [r5, #14]
   362a0:	7c85      	ldrb	r5, [r0, #18]
   362a2:	3301      	adds	r3, #1
   362a4:	2b20      	cmp	r3, #32
   362a6:	54a5      	strb	r5, [r4, r2]
   362a8:	f100 0004 	add.w	r0, r0, #4
   362ac:	d1f3      	bne.n	36296 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   362ae:	206e      	movs	r0, #110	; 0x6e
   362b0:	bd70      	pop	{r4, r5, r6, pc}
   362b2:	f04f 30ff 	mov.w	r0, #4294967295
   362b6:	e7fb      	b.n	362b0 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

000362b8 <rpc_gnss_serialize_location>:
   362b8:	b1c0      	cbz	r0, 362ec <rpc_gnss_serialize_location+0x34>
   362ba:	b1b9      	cbz	r1, 362ec <rpc_gnss_serialize_location+0x34>
   362bc:	2307      	movs	r3, #7
   362be:	700b      	strb	r3, [r1, #0]
   362c0:	2300      	movs	r3, #0
   362c2:	704b      	strb	r3, [r1, #1]
   362c4:	8903      	ldrh	r3, [r0, #8]
   362c6:	814b      	strh	r3, [r1, #10]
   362c8:	7b83      	ldrb	r3, [r0, #14]
   362ca:	740b      	strb	r3, [r1, #16]
   362cc:	6803      	ldr	r3, [r0, #0]
   362ce:	f8c1 3002 	str.w	r3, [r1, #2]
   362d2:	6843      	ldr	r3, [r0, #4]
   362d4:	f8c1 3006 	str.w	r3, [r1, #6]
   362d8:	7b03      	ldrb	r3, [r0, #12]
   362da:	738b      	strb	r3, [r1, #14]
   362dc:	7b43      	ldrb	r3, [r0, #13]
   362de:	73cb      	strb	r3, [r1, #15]
   362e0:	7a83      	ldrb	r3, [r0, #10]
   362e2:	730b      	strb	r3, [r1, #12]
   362e4:	7ac3      	ldrb	r3, [r0, #11]
   362e6:	2011      	movs	r0, #17
   362e8:	734b      	strb	r3, [r1, #13]
   362ea:	4770      	bx	lr
   362ec:	f04f 30ff 	mov.w	r0, #4294967295
   362f0:	4770      	bx	lr

000362f2 <rpc_gnss_serialize_integrity>:
   362f2:	b148      	cbz	r0, 36308 <rpc_gnss_serialize_integrity+0x16>
   362f4:	b141      	cbz	r1, 36308 <rpc_gnss_serialize_integrity+0x16>
   362f6:	2308      	movs	r3, #8
   362f8:	700b      	strb	r3, [r1, #0]
   362fa:	2300      	movs	r3, #0
   362fc:	704b      	strb	r3, [r1, #1]
   362fe:	6803      	ldr	r3, [r0, #0]
   36300:	2006      	movs	r0, #6
   36302:	f8c1 3002 	str.w	r3, [r1, #2]
   36306:	4770      	bx	lr
   36308:	f04f 30ff 	mov.w	r0, #4294967295
   3630c:	4770      	bx	lr

0003630e <packet_handler_alloc_and_init>:
   3630e:	b538      	push	{r3, r4, r5, lr}
   36310:	4604      	mov	r4, r0
   36312:	4608      	mov	r0, r1
   36314:	4611      	mov	r1, r2
   36316:	4622      	mov	r2, r4
   36318:	f7f3 fc7c 	bl	29c14 <packet_handler_create>
   3631c:	61e0      	str	r0, [r4, #28]
   3631e:	b158      	cbz	r0, 36338 <packet_handler_alloc_and_init+0x2a>
   36320:	6803      	ldr	r3, [r0, #0]
   36322:	681b      	ldr	r3, [r3, #0]
   36324:	4798      	blx	r3
   36326:	4605      	mov	r5, r0
   36328:	b120      	cbz	r0, 36334 <packet_handler_alloc_and_init+0x26>
   3632a:	69e0      	ldr	r0, [r4, #28]
   3632c:	f000 fe82 	bl	37034 <packet_handler_delete>
   36330:	2300      	movs	r3, #0
   36332:	61e3      	str	r3, [r4, #28]
   36334:	4628      	mov	r0, r5
   36336:	bd38      	pop	{r3, r4, r5, pc}
   36338:	250c      	movs	r5, #12
   3633a:	e7fb      	b.n	36334 <packet_handler_alloc_and_init+0x26>

0003633c <socket_free>:
   3633c:	b510      	push	{r4, lr}
   3633e:	4604      	mov	r4, r0
   36340:	69c0      	ldr	r0, [r0, #28]
   36342:	b108      	cbz	r0, 36348 <socket_free+0xc>
   36344:	f000 fe76 	bl	37034 <packet_handler_delete>
   36348:	4620      	mov	r0, r4
   3634a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3634e:	222c      	movs	r2, #44	; 0x2c
   36350:	2100      	movs	r1, #0
   36352:	f001 ba36 	b.w	377c2 <memset>

00036356 <interface_socket_event_get>:
   36356:	b510      	push	{r4, lr}
   36358:	4604      	mov	r4, r0
   3635a:	b189      	cbz	r1, 36380 <interface_socket_event_get+0x2a>
   3635c:	f7f0 fb7a 	bl	26a54 <interface_socket_from_handle_get>
   36360:	b158      	cbz	r0, 3637a <interface_socket_event_get+0x24>
   36362:	6803      	ldr	r3, [r0, #0]
   36364:	0c1b      	lsrs	r3, r3, #16
   36366:	f003 020a 	and.w	r2, r3, #10
   3636a:	2a0a      	cmp	r2, #10
   3636c:	bf14      	ite	ne
   3636e:	f003 030f 	andne.w	r3, r3, #15
   36372:	f003 030d 	andeq.w	r3, r3, #13
   36376:	600b      	str	r3, [r1, #0]
   36378:	e002      	b.n	36380 <interface_socket_event_get+0x2a>
   3637a:	2c00      	cmp	r4, #0
   3637c:	da01      	bge.n	36382 <interface_socket_event_get+0x2c>
   3637e:	6008      	str	r0, [r1, #0]
   36380:	bd10      	pop	{r4, pc}
   36382:	2310      	movs	r3, #16
   36384:	e7f7      	b.n	36376 <interface_socket_event_get+0x20>

00036386 <address_family_verify>:
   36386:	3802      	subs	r0, #2
   36388:	2808      	cmp	r0, #8
   3638a:	b508      	push	{r3, lr}
   3638c:	d806      	bhi.n	3639c <address_family_verify+0x16>
   3638e:	2301      	movs	r3, #1
   36390:	fa03 f000 	lsl.w	r0, r3, r0
   36394:	f240 1309 	movw	r3, #265	; 0x109
   36398:	4218      	tst	r0, r3
   3639a:	d105      	bne.n	363a8 <address_family_verify+0x22>
   3639c:	202f      	movs	r0, #47	; 0x2f
   3639e:	f7ea fbfd 	bl	20b9c <nrf_modem_os_errno_set>
   363a2:	f04f 30ff 	mov.w	r0, #4294967295
   363a6:	bd08      	pop	{r3, pc}
   363a8:	2000      	movs	r0, #0
   363aa:	e7fc      	b.n	363a6 <address_family_verify+0x20>

000363ac <ip_recvd_packet_free_cb>:
   363ac:	b510      	push	{r4, lr}
   363ae:	4604      	mov	r4, r0
   363b0:	6800      	ldr	r0, [r0, #0]
   363b2:	f7ff fe52 	bl	3605a <rpc_ip_client_data_free>
   363b6:	68a0      	ldr	r0, [r4, #8]
   363b8:	b118      	cbz	r0, 363c2 <ip_recvd_packet_free_cb+0x16>
   363ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   363be:	f7ea bda7 	b.w	20f10 <nrf_modem_os_free>
   363c2:	bd10      	pop	{r4, pc}

000363c4 <ip_addr_parse>:
   363c4:	b570      	push	{r4, r5, r6, lr}
   363c6:	4604      	mov	r4, r0
   363c8:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
   363cc:	684d      	ldr	r5, [r1, #4]
   363ce:	42a5      	cmp	r5, r4
   363d0:	d119      	bne.n	36406 <ip_addr_parse+0x42>
   363d2:	780c      	ldrb	r4, [r1, #0]
   363d4:	4294      	cmp	r4, r2
   363d6:	d118      	bne.n	3640a <ip_addr_parse+0x46>
   363d8:	2d02      	cmp	r5, #2
   363da:	d10a      	bne.n	363f2 <ip_addr_parse+0x2e>
   363dc:	2c10      	cmp	r4, #16
   363de:	d114      	bne.n	3640a <ip_addr_parse+0x46>
   363e0:	890a      	ldrh	r2, [r1, #8]
   363e2:	310c      	adds	r1, #12
   363e4:	8032      	strh	r2, [r6, #0]
   363e6:	2204      	movs	r2, #4
   363e8:	801a      	strh	r2, [r3, #0]
   363ea:	f001 f9ca 	bl	37782 <memcpy>
   363ee:	2000      	movs	r0, #0
   363f0:	bd70      	pop	{r4, r5, r6, pc}
   363f2:	2d0a      	cmp	r5, #10
   363f4:	d109      	bne.n	3640a <ip_addr_parse+0x46>
   363f6:	2c24      	cmp	r4, #36	; 0x24
   363f8:	d107      	bne.n	3640a <ip_addr_parse+0x46>
   363fa:	890a      	ldrh	r2, [r1, #8]
   363fc:	8032      	strh	r2, [r6, #0]
   363fe:	2210      	movs	r2, #16
   36400:	801a      	strh	r2, [r3, #0]
   36402:	4411      	add	r1, r2
   36404:	e7f1      	b.n	363ea <ip_addr_parse+0x26>
   36406:	202f      	movs	r0, #47	; 0x2f
   36408:	e7f2      	b.n	363f0 <ip_addr_parse+0x2c>
   3640a:	2016      	movs	r0, #22
   3640c:	e7f0      	b.n	363f0 <ip_addr_parse+0x2c>

0003640e <protocol_verify>:
   3640e:	b508      	push	{r3, lr}
   36410:	4603      	mov	r3, r0
   36412:	4608      	mov	r0, r1
   36414:	b169      	cbz	r1, 36432 <protocol_verify+0x24>
   36416:	2b01      	cmp	r3, #1
   36418:	d107      	bne.n	3642a <protocol_verify+0x1c>
   3641a:	2901      	cmp	r1, #1
   3641c:	d013      	beq.n	36446 <protocol_verify+0x38>
   3641e:	2029      	movs	r0, #41	; 0x29
   36420:	f7ea fbbc 	bl	20b9c <nrf_modem_os_errno_set>
   36424:	f04f 30ff 	mov.w	r0, #4294967295
   36428:	bd08      	pop	{r3, pc}
   3642a:	2b02      	cmp	r3, #2
   3642c:	d10b      	bne.n	36446 <protocol_verify+0x38>
   3642e:	2902      	cmp	r1, #2
   36430:	e7f4      	b.n	3641c <protocol_verify+0xe>
   36432:	2b01      	cmp	r3, #1
   36434:	d101      	bne.n	3643a <protocol_verify+0x2c>
   36436:	6013      	str	r3, [r2, #0]
   36438:	e7f6      	b.n	36428 <protocol_verify+0x1a>
   3643a:	2b03      	cmp	r3, #3
   3643c:	d101      	bne.n	36442 <protocol_verify+0x34>
   3643e:	6011      	str	r1, [r2, #0]
   36440:	e7f2      	b.n	36428 <protocol_verify+0x1a>
   36442:	2302      	movs	r3, #2
   36444:	e7f7      	b.n	36436 <protocol_verify+0x28>
   36446:	2000      	movs	r0, #0
   36448:	e7ee      	b.n	36428 <protocol_verify+0x1a>

0003644a <ip_interface_request_create>:
   3644a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3644c:	4614      	mov	r4, r2
   3644e:	2200      	movs	r2, #0
   36450:	4606      	mov	r6, r0
   36452:	460d      	mov	r5, r1
   36454:	a801      	add	r0, sp, #4
   36456:	4619      	mov	r1, r3
   36458:	9201      	str	r2, [sp, #4]
   3645a:	f7ff fddb 	bl	36014 <rpc_ip_client_request_alloc>
   3645e:	4603      	mov	r3, r0
   36460:	9801      	ldr	r0, [sp, #4]
   36462:	b943      	cbnz	r3, 36476 <ip_interface_request_create+0x2c>
   36464:	2208      	movs	r2, #8
   36466:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   3646a:	60c4      	str	r4, [r0, #12]
   3646c:	6105      	str	r5, [r0, #16]
   3646e:	7202      	strb	r2, [r0, #8]
   36470:	7243      	strb	r3, [r0, #9]
   36472:	7283      	strb	r3, [r0, #10]
   36474:	72c3      	strb	r3, [r0, #11]
   36476:	b002      	add	sp, #8
   36478:	bd70      	pop	{r4, r5, r6, pc}

0003647a <ip_interface_request_send>:
   3647a:	b570      	push	{r4, r5, r6, lr}
   3647c:	460c      	mov	r4, r1
   3647e:	4605      	mov	r5, r0
   36480:	4611      	mov	r1, r2
   36482:	4620      	mov	r0, r4
   36484:	461e      	mov	r6, r3
   36486:	f7ff fdd4 	bl	36032 <rpc_ip_client_request_send>
   3648a:	b140      	cbz	r0, 3649e <ip_interface_request_send+0x24>
   3648c:	6820      	ldr	r0, [r4, #0]
   3648e:	b108      	cbz	r0, 36494 <ip_interface_request_send+0x1a>
   36490:	f7ff fde3 	bl	3605a <rpc_ip_client_data_free>
   36494:	4620      	mov	r0, r4
   36496:	f7ff fddd 	bl	36054 <rpc_ip_client_message_free>
   3649a:	2023      	movs	r0, #35	; 0x23
   3649c:	602e      	str	r6, [r5, #0]
   3649e:	bd70      	pop	{r4, r5, r6, pc}

000364a0 <ip_interface_wait>:
   364a0:	b538      	push	{r3, r4, r5, lr}
   364a2:	4605      	mov	r5, r0
   364a4:	f7f0 fa9c 	bl	269e0 <interface_socket_wait>
   364a8:	4604      	mov	r4, r0
   364aa:	b938      	cbnz	r0, 364bc <ip_interface_wait+0x1c>
   364ac:	4628      	mov	r0, r5
   364ae:	f7f0 fad1 	bl	26a54 <interface_socket_from_handle_get>
   364b2:	b118      	cbz	r0, 364bc <ip_interface_wait+0x1c>
   364b4:	6844      	ldr	r4, [r0, #4]
   364b6:	b10c      	cbz	r4, 364bc <ip_interface_wait+0x1c>
   364b8:	2300      	movs	r3, #0
   364ba:	6043      	str	r3, [r0, #4]
   364bc:	4620      	mov	r0, r4
   364be:	bd38      	pop	{r3, r4, r5, pc}

000364c0 <ip_interface_recvfrom>:
   364c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   364c4:	b087      	sub	sp, #28
   364c6:	4681      	mov	r9, r0
   364c8:	461e      	mov	r6, r3
   364ca:	4690      	mov	r8, r2
   364cc:	9f11      	ldr	r7, [sp, #68]	; 0x44
   364ce:	9101      	str	r1, [sp, #4]
   364d0:	2a00      	cmp	r2, #0
   364d2:	f000 80e3 	beq.w	3669c <ip_interface_recvfrom+0x1dc>
   364d6:	b11b      	cbz	r3, 364e0 <ip_interface_recvfrom+0x20>
   364d8:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   364dc:	f000 80e0 	beq.w	366a0 <ip_interface_recvfrom+0x1e0>
   364e0:	4648      	mov	r0, r9
   364e2:	f7f0 fab7 	bl	26a54 <interface_socket_from_handle_get>
   364e6:	4604      	mov	r4, r0
   364e8:	2800      	cmp	r0, #0
   364ea:	f000 80db 	beq.w	366a4 <ip_interface_recvfrom+0x1e4>
   364ee:	6803      	ldr	r3, [r0, #0]
   364f0:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   364f4:	d10f      	bne.n	36516 <ip_interface_recvfrom+0x56>
   364f6:	6802      	ldr	r2, [r0, #0]
   364f8:	b292      	uxth	r2, r2
   364fa:	2a06      	cmp	r2, #6
   364fc:	f000 8094 	beq.w	36628 <ip_interface_recvfrom+0x168>
   36500:	6802      	ldr	r2, [r0, #0]
   36502:	461e      	mov	r6, r3
   36504:	b292      	uxth	r2, r2
   36506:	2a07      	cmp	r2, #7
   36508:	469a      	mov	sl, r3
   3650a:	f000 808f 	beq.w	3662c <ip_interface_recvfrom+0x16c>
   3650e:	2239      	movs	r2, #57	; 0x39
   36510:	f04f 35ff 	mov.w	r5, #4294967295
   36514:	e07a      	b.n	3660c <ip_interface_recvfrom+0x14c>
   36516:	07b1      	lsls	r1, r6, #30
   36518:	d422      	bmi.n	36560 <ip_interface_recvfrom+0xa0>
   3651a:	6803      	ldr	r3, [r0, #0]
   3651c:	00da      	lsls	r2, r3, #3
   3651e:	d522      	bpl.n	36566 <ip_interface_recvfrom+0xa6>
   36520:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   36524:	f04f 35ff 	mov.w	r5, #4294967295
   36528:	f006 0b10 	and.w	fp, r6, #16
   3652c:	6822      	ldr	r2, [r4, #0]
   3652e:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   36532:	d01b      	beq.n	3656c <ip_interface_recvfrom+0xac>
   36534:	6822      	ldr	r2, [r4, #0]
   36536:	69e0      	ldr	r0, [r4, #28]
   36538:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   3653c:	6022      	str	r2, [r4, #0]
   3653e:	6802      	ldr	r2, [r0, #0]
   36540:	68d2      	ldr	r2, [r2, #12]
   36542:	4790      	blx	r2
   36544:	1c43      	adds	r3, r0, #1
   36546:	4605      	mov	r5, r0
   36548:	d029      	beq.n	3659e <ip_interface_recvfrom+0xde>
   3654a:	4580      	cmp	r8, r0
   3654c:	dd05      	ble.n	3655a <ip_interface_recvfrom+0x9a>
   3654e:	6923      	ldr	r3, [r4, #16]
   36550:	2b01      	cmp	r3, #1
   36552:	d102      	bne.n	3655a <ip_interface_recvfrom+0x9a>
   36554:	f1bb 0f00 	cmp.w	fp, #0
   36558:	d125      	bne.n	365a6 <ip_interface_recvfrom+0xe6>
   3655a:	f04f 0a00 	mov.w	sl, #0
   3655e:	e040      	b.n	365e2 <ip_interface_recvfrom+0x122>
   36560:	f04f 0a00 	mov.w	sl, #0
   36564:	e7de      	b.n	36524 <ip_interface_recvfrom+0x64>
   36566:	f04f 0a01 	mov.w	sl, #1
   3656a:	e7db      	b.n	36524 <ip_interface_recvfrom+0x64>
   3656c:	6821      	ldr	r1, [r4, #0]
   3656e:	0308      	lsls	r0, r1, #12
   36570:	d515      	bpl.n	3659e <ip_interface_recvfrom+0xde>
   36572:	6821      	ldr	r1, [r4, #0]
   36574:	b289      	uxth	r1, r1
   36576:	290d      	cmp	r1, #13
   36578:	d011      	beq.n	3659e <ip_interface_recvfrom+0xde>
   3657a:	6923      	ldr	r3, [r4, #16]
   3657c:	2b01      	cmp	r3, #1
   3657e:	f000 8099 	beq.w	366b4 <ip_interface_recvfrom+0x1f4>
   36582:	4692      	mov	sl, r2
   36584:	2239      	movs	r2, #57	; 0x39
   36586:	6823      	ldr	r3, [r4, #0]
   36588:	0c1b      	lsrs	r3, r3, #16
   3658a:	041b      	lsls	r3, r3, #16
   3658c:	f043 030d 	orr.w	r3, r3, #13
   36590:	6023      	str	r3, [r4, #0]
   36592:	6823      	ldr	r3, [r4, #0]
   36594:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   36598:	6023      	str	r3, [r4, #0]
   3659a:	2600      	movs	r6, #0
   3659c:	e036      	b.n	3660c <ip_interface_recvfrom+0x14c>
   3659e:	f1ba 0f00 	cmp.w	sl, #0
   365a2:	f000 8088 	beq.w	366b6 <ip_interface_recvfrom+0x1f6>
   365a6:	6a23      	ldr	r3, [r4, #32]
   365a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   365ac:	2b00      	cmp	r3, #0
   365ae:	bf08      	it	eq
   365b0:	f04f 33ff 	moveq.w	r3, #4294967295
   365b4:	4611      	mov	r1, r2
   365b6:	9302      	str	r3, [sp, #8]
   365b8:	4648      	mov	r0, r9
   365ba:	ab02      	add	r3, sp, #8
   365bc:	f7ff ff70 	bl	364a0 <ip_interface_wait>
   365c0:	4602      	mov	r2, r0
   365c2:	2800      	cmp	r0, #0
   365c4:	d070      	beq.n	366a8 <ip_interface_recvfrom+0x1e8>
   365c6:	6823      	ldr	r3, [r4, #0]
   365c8:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   365cc:	d06f      	beq.n	366ae <ip_interface_recvfrom+0x1ee>
   365ce:	6823      	ldr	r3, [r4, #0]
   365d0:	b29b      	uxth	r3, r3
   365d2:	2b0d      	cmp	r3, #13
   365d4:	d06b      	beq.n	366ae <ip_interface_recvfrom+0x1ee>
   365d6:	6923      	ldr	r3, [r4, #16]
   365d8:	1e59      	subs	r1, r3, #1
   365da:	f1d1 0a00 	rsbs	sl, r1, #0
   365de:	eb4a 0a01 	adc.w	sl, sl, r1
   365e2:	b107      	cbz	r7, 365e6 <ip_interface_recvfrom+0x126>
   365e4:	683f      	ldr	r7, [r7, #0]
   365e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   365e8:	69e0      	ldr	r0, [r4, #28]
   365ea:	e9cd 2704 	strd	r2, r7, [sp, #16]
   365ee:	9b01      	ldr	r3, [sp, #4]
   365f0:	6802      	ldr	r2, [r0, #0]
   365f2:	e9cd 3802 	strd	r3, r8, [sp, #8]
   365f6:	6895      	ldr	r5, [r2, #8]
   365f8:	a902      	add	r1, sp, #8
   365fa:	4632      	mov	r2, r6
   365fc:	47a8      	blx	r5
   365fe:	1c42      	adds	r2, r0, #1
   36600:	4605      	mov	r5, r0
   36602:	bf0b      	itete	eq
   36604:	2600      	moveq	r6, #0
   36606:	2601      	movne	r6, #1
   36608:	2223      	moveq	r2, #35	; 0x23
   3660a:	2200      	movne	r2, #0
   3660c:	69e0      	ldr	r0, [r4, #28]
   3660e:	9201      	str	r2, [sp, #4]
   36610:	6801      	ldr	r1, [r0, #0]
   36612:	68c9      	ldr	r1, [r1, #12]
   36614:	4788      	blx	r1
   36616:	3001      	adds	r0, #1
   36618:	9a01      	ldr	r2, [sp, #4]
   3661a:	d009      	beq.n	36630 <ip_interface_recvfrom+0x170>
   3661c:	6823      	ldr	r3, [r4, #0]
   3661e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   36622:	6023      	str	r3, [r4, #0]
   36624:	b1a2      	cbz	r2, 36650 <ip_interface_recvfrom+0x190>
   36626:	e028      	b.n	3667a <ip_interface_recvfrom+0x1ba>
   36628:	461e      	mov	r6, r3
   3662a:	469a      	mov	sl, r3
   3662c:	2209      	movs	r2, #9
   3662e:	e76f      	b.n	36510 <ip_interface_recvfrom+0x50>
   36630:	f1ba 0f00 	cmp.w	sl, #0
   36634:	d010      	beq.n	36658 <ip_interface_recvfrom+0x198>
   36636:	2e00      	cmp	r6, #0
   36638:	d1f4      	bne.n	36624 <ip_interface_recvfrom+0x164>
   3663a:	4635      	mov	r5, r6
   3663c:	6823      	ldr	r3, [r4, #0]
   3663e:	0c1b      	lsrs	r3, r3, #16
   36640:	041b      	lsls	r3, r3, #16
   36642:	f043 030d 	orr.w	r3, r3, #13
   36646:	6023      	str	r3, [r4, #0]
   36648:	6823      	ldr	r3, [r4, #0]
   3664a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3664e:	6023      	str	r3, [r4, #0]
   36650:	4628      	mov	r0, r5
   36652:	b007      	add	sp, #28
   36654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36658:	2e00      	cmp	r6, #0
   3665a:	d1e3      	bne.n	36624 <ip_interface_recvfrom+0x164>
   3665c:	6823      	ldr	r3, [r4, #0]
   3665e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   36662:	6823      	ldr	r3, [r4, #0]
   36664:	d00f      	beq.n	36686 <ip_interface_recvfrom+0x1c6>
   36666:	2269      	movs	r2, #105	; 0x69
   36668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   3666c:	6023      	str	r3, [r4, #0]
   3666e:	6823      	ldr	r3, [r4, #0]
   36670:	0c1b      	lsrs	r3, r3, #16
   36672:	041b      	lsls	r3, r3, #16
   36674:	f043 030d 	orr.w	r3, r3, #13
   36678:	6023      	str	r3, [r4, #0]
   3667a:	4610      	mov	r0, r2
   3667c:	f7ea fa8e 	bl	20b9c <nrf_modem_os_errno_set>
   36680:	f04f 35ff 	mov.w	r5, #4294967295
   36684:	e7e4      	b.n	36650 <ip_interface_recvfrom+0x190>
   36686:	031b      	lsls	r3, r3, #12
   36688:	d5cc      	bpl.n	36624 <ip_interface_recvfrom+0x164>
   3668a:	6823      	ldr	r3, [r4, #0]
   3668c:	b29b      	uxth	r3, r3
   3668e:	2b0d      	cmp	r3, #13
   36690:	d1c8      	bne.n	36624 <ip_interface_recvfrom+0x164>
   36692:	68a3      	ldr	r3, [r4, #8]
   36694:	2b00      	cmp	r3, #0
   36696:	d0c5      	beq.n	36624 <ip_interface_recvfrom+0x164>
   36698:	68a2      	ldr	r2, [r4, #8]
   3669a:	e7c3      	b.n	36624 <ip_interface_recvfrom+0x164>
   3669c:	2216      	movs	r2, #22
   3669e:	e7ec      	b.n	3667a <ip_interface_recvfrom+0x1ba>
   366a0:	222d      	movs	r2, #45	; 0x2d
   366a2:	e7ea      	b.n	3667a <ip_interface_recvfrom+0x1ba>
   366a4:	2209      	movs	r2, #9
   366a6:	e7e8      	b.n	3667a <ip_interface_recvfrom+0x1ba>
   366a8:	f04f 0a01 	mov.w	sl, #1
   366ac:	e73e      	b.n	3652c <ip_interface_recvfrom+0x6c>
   366ae:	2600      	movs	r6, #0
   366b0:	46b2      	mov	sl, r6
   366b2:	e7ab      	b.n	3660c <ip_interface_recvfrom+0x14c>
   366b4:	469a      	mov	sl, r3
   366b6:	2223      	movs	r2, #35	; 0x23
   366b8:	e76f      	b.n	3659a <ip_interface_recvfrom+0xda>

000366ba <ip_interface_connect>:
   366ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   366be:	4606      	mov	r6, r0
   366c0:	4691      	mov	r9, r2
   366c2:	460f      	mov	r7, r1
   366c4:	b085      	sub	sp, #20
   366c6:	2900      	cmp	r1, #0
   366c8:	d065      	beq.n	36796 <ip_interface_connect+0xdc>
   366ca:	2a00      	cmp	r2, #0
   366cc:	d063      	beq.n	36796 <ip_interface_connect+0xdc>
   366ce:	f7f0 f9c1 	bl	26a54 <interface_socket_from_handle_get>
   366d2:	4604      	mov	r4, r0
   366d4:	2800      	cmp	r0, #0
   366d6:	d060      	beq.n	3679a <ip_interface_connect+0xe0>
   366d8:	6803      	ldr	r3, [r0, #0]
   366da:	b29b      	uxth	r3, r3
   366dc:	2b02      	cmp	r3, #2
   366de:	d003      	beq.n	366e8 <ip_interface_connect+0x2e>
   366e0:	6803      	ldr	r3, [r0, #0]
   366e2:	b29b      	uxth	r3, r3
   366e4:	2b04      	cmp	r3, #4
   366e6:	d14f      	bne.n	36788 <ip_interface_connect+0xce>
   366e8:	6823      	ldr	r3, [r4, #0]
   366ea:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   366ee:	d156      	bne.n	3679e <ip_interface_connect+0xe4>
   366f0:	f247 0202 	movw	r2, #28674	; 0x7002
   366f4:	4630      	mov	r0, r6
   366f6:	69a1      	ldr	r1, [r4, #24]
   366f8:	f7ff fea7 	bl	3644a <ip_interface_request_create>
   366fc:	4605      	mov	r5, r0
   366fe:	2800      	cmp	r0, #0
   36700:	d04f      	beq.n	367a2 <ip_interface_connect+0xe8>
   36702:	f247 0802 	movw	r8, #28674	; 0x7002
   36706:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   3670a:	60c3      	str	r3, [r0, #12]
   3670c:	69a3      	ldr	r3, [r4, #24]
   3670e:	464a      	mov	r2, r9
   36710:	6103      	str	r3, [r0, #16]
   36712:	6883      	ldr	r3, [r0, #8]
   36714:	4639      	mov	r1, r7
   36716:	3304      	adds	r3, #4
   36718:	6083      	str	r3, [r0, #8]
   3671a:	f100 0318 	add.w	r3, r0, #24
   3671e:	9301      	str	r3, [sp, #4]
   36720:	f100 0314 	add.w	r3, r0, #20
   36724:	9300      	str	r3, [sp, #0]
   36726:	f100 0316 	add.w	r3, r0, #22
   3672a:	68e0      	ldr	r0, [r4, #12]
   3672c:	f7ff fe4a 	bl	363c4 <ip_addr_parse>
   36730:	bb18      	cbnz	r0, 3677a <ip_interface_connect+0xc0>
   36732:	68ab      	ldr	r3, [r5, #8]
   36734:	8aea      	ldrh	r2, [r5, #22]
   36736:	6827      	ldr	r7, [r4, #0]
   36738:	4413      	add	r3, r2
   3673a:	60ab      	str	r3, [r5, #8]
   3673c:	6823      	ldr	r3, [r4, #0]
   3673e:	4642      	mov	r2, r8
   36740:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   36744:	6023      	str	r3, [r4, #0]
   36746:	4629      	mov	r1, r5
   36748:	463b      	mov	r3, r7
   3674a:	4620      	mov	r0, r4
   3674c:	f7ff fe95 	bl	3647a <ip_interface_request_send>
   36750:	b998      	cbnz	r0, 3677a <ip_interface_connect+0xc0>
   36752:	6823      	ldr	r3, [r4, #0]
   36754:	00db      	lsls	r3, r3, #3
   36756:	d426      	bmi.n	367a6 <ip_interface_connect+0xec>
   36758:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3675a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3675e:	2b00      	cmp	r3, #0
   36760:	bf08      	it	eq
   36762:	f04f 33ff 	moveq.w	r3, #4294967295
   36766:	2105      	movs	r1, #5
   36768:	9303      	str	r3, [sp, #12]
   3676a:	4630      	mov	r0, r6
   3676c:	ab03      	add	r3, sp, #12
   3676e:	f7ff fe97 	bl	364a0 <ip_interface_wait>
   36772:	b130      	cbz	r0, 36782 <ip_interface_connect+0xc8>
   36774:	2873      	cmp	r0, #115	; 0x73
   36776:	d000      	beq.n	3677a <ip_interface_connect+0xc0>
   36778:	6027      	str	r7, [r4, #0]
   3677a:	f7ea fa0f 	bl	20b9c <nrf_modem_os_errno_set>
   3677e:	f04f 30ff 	mov.w	r0, #4294967295
   36782:	b005      	add	sp, #20
   36784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36788:	6803      	ldr	r3, [r0, #0]
   3678a:	b29b      	uxth	r3, r3
   3678c:	2b05      	cmp	r3, #5
   3678e:	bf14      	ite	ne
   36790:	2009      	movne	r0, #9
   36792:	2038      	moveq	r0, #56	; 0x38
   36794:	e7f1      	b.n	3677a <ip_interface_connect+0xc0>
   36796:	2016      	movs	r0, #22
   36798:	e7ef      	b.n	3677a <ip_interface_connect+0xc0>
   3679a:	2009      	movs	r0, #9
   3679c:	e7ed      	b.n	3677a <ip_interface_connect+0xc0>
   3679e:	2072      	movs	r0, #114	; 0x72
   367a0:	e7eb      	b.n	3677a <ip_interface_connect+0xc0>
   367a2:	200c      	movs	r0, #12
   367a4:	e7e9      	b.n	3677a <ip_interface_connect+0xc0>
   367a6:	2073      	movs	r0, #115	; 0x73
   367a8:	e7e7      	b.n	3677a <ip_interface_connect+0xc0>

000367aa <getopt_check_and_send_int>:
   367aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   367ac:	4604      	mov	r4, r0
   367ae:	460d      	mov	r5, r1
   367b0:	4618      	mov	r0, r3
   367b2:	4611      	mov	r1, r2
   367b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   367b8:	b193      	cbz	r3, 367e0 <getopt_check_and_send_int+0x36>
   367ba:	681e      	ldr	r6, [r3, #0]
   367bc:	2e04      	cmp	r6, #4
   367be:	d10f      	bne.n	367e0 <getopt_check_and_send_int+0x36>
   367c0:	b172      	cbz	r2, 367e0 <getopt_check_and_send_int+0x36>
   367c2:	e9cd 2300 	strd	r2, r3, [sp]
   367c6:	462b      	mov	r3, r5
   367c8:	4622      	mov	r2, r4
   367ca:	f7f0 fc1d 	bl	27008 <ip_interface_socketoption_get>
   367ce:	4603      	mov	r3, r0
   367d0:	b118      	cbz	r0, 367da <getopt_check_and_send_int+0x30>
   367d2:	f7ea f9e3 	bl	20b9c <nrf_modem_os_errno_set>
   367d6:	f04f 33ff 	mov.w	r3, #4294967295
   367da:	4618      	mov	r0, r3
   367dc:	b002      	add	sp, #8
   367de:	bd70      	pop	{r4, r5, r6, pc}
   367e0:	2016      	movs	r0, #22
   367e2:	e7f6      	b.n	367d2 <getopt_check_and_send_int+0x28>

000367e4 <ip_interface_socketoption_send>:
   367e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   367e8:	4699      	mov	r9, r3
   367ea:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   367ee:	f04f 33ff 	mov.w	r3, #4294967295
   367f2:	9301      	str	r3, [sp, #4]
   367f4:	680b      	ldr	r3, [r1, #0]
   367f6:	4606      	mov	r6, r0
   367f8:	025d      	lsls	r5, r3, #9
   367fa:	460c      	mov	r4, r1
   367fc:	4692      	mov	sl, r2
   367fe:	d43c      	bmi.n	3687a <ip_interface_socketoption_send+0x96>
   36800:	680b      	ldr	r3, [r1, #0]
   36802:	0219      	lsls	r1, r3, #8
   36804:	d439      	bmi.n	3687a <ip_interface_socketoption_send+0x96>
   36806:	6823      	ldr	r3, [r4, #0]
   36808:	01da      	lsls	r2, r3, #7
   3680a:	d436      	bmi.n	3687a <ip_interface_socketoption_send+0x96>
   3680c:	6823      	ldr	r3, [r4, #0]
   3680e:	019b      	lsls	r3, r3, #6
   36810:	d433      	bmi.n	3687a <ip_interface_socketoption_send+0x96>
   36812:	f8d4 8000 	ldr.w	r8, [r4]
   36816:	6823      	ldr	r3, [r4, #0]
   36818:	f247 0203 	movw	r2, #28675	; 0x7003
   3681c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   36820:	6023      	str	r3, [r4, #0]
   36822:	69a1      	ldr	r1, [r4, #24]
   36824:	463b      	mov	r3, r7
   36826:	f7ff fe10 	bl	3644a <ip_interface_request_create>
   3682a:	4605      	mov	r5, r0
   3682c:	b318      	cbz	r0, 36876 <ip_interface_socketoption_send+0x92>
   3682e:	6883      	ldr	r3, [r0, #8]
   36830:	f8c0 a014 	str.w	sl, [r0, #20]
   36834:	3308      	adds	r3, #8
   36836:	6083      	str	r3, [r0, #8]
   36838:	f8c0 9018 	str.w	r9, [r0, #24]
   3683c:	b13f      	cbz	r7, 3684e <ip_interface_socketoption_send+0x6a>
   3683e:	f1bb 0f00 	cmp.w	fp, #0
   36842:	d004      	beq.n	3684e <ip_interface_socketoption_send+0x6a>
   36844:	463a      	mov	r2, r7
   36846:	4659      	mov	r1, fp
   36848:	6800      	ldr	r0, [r0, #0]
   3684a:	f000 ff9a 	bl	37782 <memcpy>
   3684e:	4643      	mov	r3, r8
   36850:	f247 0203 	movw	r2, #28675	; 0x7003
   36854:	4629      	mov	r1, r5
   36856:	4620      	mov	r0, r4
   36858:	f7ff fe0f 	bl	3647a <ip_interface_request_send>
   3685c:	b930      	cbnz	r0, 3686c <ip_interface_socketoption_send+0x88>
   3685e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   36862:	4630      	mov	r0, r6
   36864:	4611      	mov	r1, r2
   36866:	ab01      	add	r3, sp, #4
   36868:	f7ff fe1a 	bl	364a0 <ip_interface_wait>
   3686c:	f8c4 8000 	str.w	r8, [r4]
   36870:	b003      	add	sp, #12
   36872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36876:	200c      	movs	r0, #12
   36878:	e7f8      	b.n	3686c <ip_interface_socketoption_send+0x88>
   3687a:	2023      	movs	r0, #35	; 0x23
   3687c:	e7f8      	b.n	36870 <ip_interface_socketoption_send+0x8c>

0003687e <setopt_check_and_send_int>:
   3687e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   36880:	4604      	mov	r4, r0
   36882:	460d      	mov	r5, r1
   36884:	4618      	mov	r0, r3
   36886:	4611      	mov	r1, r2
   36888:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   3688c:	2a04      	cmp	r2, #4
   3688e:	d10f      	bne.n	368b0 <setopt_check_and_send_int+0x32>
   36890:	b173      	cbz	r3, 368b0 <setopt_check_and_send_int+0x32>
   36892:	e9cd 3200 	strd	r3, r2, [sp]
   36896:	462b      	mov	r3, r5
   36898:	4622      	mov	r2, r4
   3689a:	f7ff ffa3 	bl	367e4 <ip_interface_socketoption_send>
   3689e:	4603      	mov	r3, r0
   368a0:	b118      	cbz	r0, 368aa <setopt_check_and_send_int+0x2c>
   368a2:	f7ea f97b 	bl	20b9c <nrf_modem_os_errno_set>
   368a6:	f04f 33ff 	mov.w	r3, #4294967295
   368aa:	4618      	mov	r0, r3
   368ac:	b003      	add	sp, #12
   368ae:	bd30      	pop	{r4, r5, pc}
   368b0:	2016      	movs	r0, #22
   368b2:	e7f6      	b.n	368a2 <setopt_check_and_send_int+0x24>

000368b4 <ip_interface_getopt>:
   368b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   368b8:	2901      	cmp	r1, #1
   368ba:	4604      	mov	r4, r0
   368bc:	460f      	mov	r7, r1
   368be:	4616      	mov	r6, r2
   368c0:	461d      	mov	r5, r3
   368c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   368c6:	d007      	beq.n	368d8 <ip_interface_getopt+0x24>
   368c8:	202a      	movs	r0, #42	; 0x2a
   368ca:	f7ea f967 	bl	20b9c <nrf_modem_os_errno_set>
   368ce:	f04f 30ff 	mov.w	r0, #4294967295
   368d2:	b002      	add	sp, #8
   368d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   368d8:	f7f0 f8bc 	bl	26a54 <interface_socket_from_handle_get>
   368dc:	4602      	mov	r2, r0
   368de:	b908      	cbnz	r0, 368e4 <ip_interface_getopt+0x30>
   368e0:	2009      	movs	r0, #9
   368e2:	e7f2      	b.n	368ca <ip_interface_getopt+0x16>
   368e4:	2e28      	cmp	r6, #40	; 0x28
   368e6:	dc0d      	bgt.n	36904 <ip_interface_getopt+0x50>
   368e8:	2e1d      	cmp	r6, #29
   368ea:	dd0d      	ble.n	36908 <ip_interface_getopt+0x54>
   368ec:	f1a6 031e 	sub.w	r3, r6, #30
   368f0:	2b0a      	cmp	r3, #10
   368f2:	d809      	bhi.n	36908 <ip_interface_getopt+0x54>
   368f4:	e8df f003 	tbb	[pc, r3]
   368f8:	08241d13 	.word	0x08241d13
   368fc:	08080808 	.word	0x08080808
   36900:	0808      	.short	0x0808
   36902:	2b          	.byte	0x2b
   36903:	00          	.byte	0x00
   36904:	2e37      	cmp	r6, #55	; 0x37
   36906:	d029      	beq.n	3695c <ip_interface_getopt+0xa8>
   36908:	462b      	mov	r3, r5
   3690a:	4632      	mov	r2, r6
   3690c:	2101      	movs	r1, #1
   3690e:	4620      	mov	r0, r4
   36910:	f8cd 8020 	str.w	r8, [sp, #32]
   36914:	b002      	add	sp, #8
   36916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3691a:	f7f0 b8e3 	b.w	26ae4 <interface_socket_getopt>
   3691e:	4623      	mov	r3, r4
   36920:	f248 0101 	movw	r1, #32769	; 0x8001
   36924:	f44f 7000 	mov.w	r0, #512	; 0x200
   36928:	e9cd 5800 	strd	r5, r8, [sp]
   3692c:	f7ff ff3d 	bl	367aa <getopt_check_and_send_int>
   36930:	e7cf      	b.n	368d2 <ip_interface_getopt+0x1e>
   36932:	4623      	mov	r3, r4
   36934:	f244 0110 	movw	r1, #16400	; 0x4010
   36938:	2004      	movs	r0, #4
   3693a:	e9cd 5800 	strd	r5, r8, [sp]
   3693e:	e7f5      	b.n	3692c <ip_interface_getopt+0x78>
   36940:	4623      	mov	r3, r4
   36942:	f246 0110 	movw	r1, #24592	; 0x6010
   36946:	2006      	movs	r0, #6
   36948:	e9cd 5800 	strd	r5, r8, [sp]
   3694c:	e7ee      	b.n	3692c <ip_interface_getopt+0x78>
   3694e:	4623      	mov	r3, r4
   36950:	f241 0104 	movw	r1, #4100	; 0x1004
   36954:	2008      	movs	r0, #8
   36956:	e9cd 5800 	strd	r5, r8, [sp]
   3695a:	e7e7      	b.n	3692c <ip_interface_getopt+0x78>
   3695c:	4623      	mov	r3, r4
   3695e:	f245 0106 	movw	r1, #20486	; 0x5006
   36962:	4638      	mov	r0, r7
   36964:	e9cd 5800 	strd	r5, r8, [sp]
   36968:	e7e0      	b.n	3692c <ip_interface_getopt+0x78>

0003696a <attach_trigger_condition_verify>:
   3696a:	6903      	ldr	r3, [r0, #16]
   3696c:	2b01      	cmp	r3, #1
   3696e:	d105      	bne.n	3697c <attach_trigger_condition_verify+0x12>
   36970:	6800      	ldr	r0, [r0, #0]
   36972:	b280      	uxth	r0, r0
   36974:	1f43      	subs	r3, r0, #5
   36976:	4258      	negs	r0, r3
   36978:	4158      	adcs	r0, r3
   3697a:	4770      	bx	lr
   3697c:	2b02      	cmp	r3, #2
   3697e:	d109      	bne.n	36994 <attach_trigger_condition_verify+0x2a>
   36980:	6803      	ldr	r3, [r0, #0]
   36982:	b29b      	uxth	r3, r3
   36984:	2b02      	cmp	r3, #2
   36986:	d003      	beq.n	36990 <attach_trigger_condition_verify+0x26>
   36988:	6803      	ldr	r3, [r0, #0]
   3698a:	b29b      	uxth	r3, r3
   3698c:	2b04      	cmp	r3, #4
   3698e:	d1ef      	bne.n	36970 <attach_trigger_condition_verify+0x6>
   36990:	2001      	movs	r0, #1
   36992:	4770      	bx	lr
   36994:	2000      	movs	r0, #0
   36996:	4770      	bx	lr

00036998 <secure_client_socket>:
   36998:	f04f 33ff 	mov.w	r3, #4294967295
   3699c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3699e:	9301      	str	r3, [sp, #4]
   369a0:	680b      	ldr	r3, [r1, #0]
   369a2:	4606      	mov	r6, r0
   369a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   369a8:	600b      	str	r3, [r1, #0]
   369aa:	680b      	ldr	r3, [r1, #0]
   369ac:	460c      	mov	r4, r1
   369ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   369b2:	600b      	str	r3, [r1, #0]
   369b4:	680f      	ldr	r7, [r1, #0]
   369b6:	463a      	mov	r2, r7
   369b8:	f7f1 f990 	bl	27cdc <secure_socket_attach_initiate>
   369bc:	4605      	mov	r5, r0
   369be:	b950      	cbnz	r0, 369d6 <secure_client_socket+0x3e>
   369c0:	220c      	movs	r2, #12
   369c2:	4630      	mov	r0, r6
   369c4:	4611      	mov	r1, r2
   369c6:	ab01      	add	r3, sp, #4
   369c8:	f7ff fd6a 	bl	364a0 <ip_interface_wait>
   369cc:	4605      	mov	r5, r0
   369ce:	b128      	cbz	r0, 369dc <secure_client_socket+0x44>
   369d0:	2873      	cmp	r0, #115	; 0x73
   369d2:	d000      	beq.n	369d6 <secure_client_socket+0x3e>
   369d4:	6027      	str	r7, [r4, #0]
   369d6:	4628      	mov	r0, r5
   369d8:	b003      	add	sp, #12
   369da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   369dc:	4630      	mov	r0, r6
   369de:	f7f1 f96b 	bl	27cb8 <hostname_free>
   369e2:	6823      	ldr	r3, [r4, #0]
   369e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   369e8:	6023      	str	r3, [r4, #0]
   369ea:	6823      	ldr	r3, [r4, #0]
   369ec:	0c1b      	lsrs	r3, r3, #16
   369ee:	041b      	lsls	r3, r3, #16
   369f0:	f043 030c 	orr.w	r3, r3, #12
   369f4:	6023      	str	r3, [r4, #0]
   369f6:	6823      	ldr	r3, [r4, #0]
   369f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   369fc:	6023      	str	r3, [r4, #0]
   369fe:	6823      	ldr	r3, [r4, #0]
   36a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   36a04:	6023      	str	r3, [r4, #0]
   36a06:	e7e6      	b.n	369d6 <secure_client_socket+0x3e>

00036a08 <tls_interface_close>:
   36a08:	b510      	push	{r4, lr}
   36a0a:	4604      	mov	r4, r0
   36a0c:	f7f0 f822 	bl	26a54 <interface_socket_from_handle_get>
   36a10:	b138      	cbz	r0, 36a22 <tls_interface_close+0x1a>
   36a12:	4620      	mov	r0, r4
   36a14:	f7f1 f950 	bl	27cb8 <hostname_free>
   36a18:	4620      	mov	r0, r4
   36a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36a1e:	f7f0 b989 	b.w	26d34 <ip_interface_close>
   36a22:	2009      	movs	r0, #9
   36a24:	f7ea f8ba 	bl	20b9c <nrf_modem_os_errno_set>
   36a28:	f04f 30ff 	mov.w	r0, #4294967295
   36a2c:	bd10      	pop	{r4, pc}

00036a2e <packet_free_cb>:
   36a2e:	6800      	ldr	r0, [r0, #0]
   36a30:	f7ff bae9 	b.w	36006 <rpc_at_client_data_free>

00036a34 <at_interface_wait>:
   36a34:	b538      	push	{r3, r4, r5, lr}
   36a36:	4605      	mov	r5, r0
   36a38:	f7ef ffd2 	bl	269e0 <interface_socket_wait>
   36a3c:	4604      	mov	r4, r0
   36a3e:	b938      	cbnz	r0, 36a50 <at_interface_wait+0x1c>
   36a40:	4628      	mov	r0, r5
   36a42:	f7f0 f807 	bl	26a54 <interface_socket_from_handle_get>
   36a46:	b118      	cbz	r0, 36a50 <at_interface_wait+0x1c>
   36a48:	6844      	ldr	r4, [r0, #4]
   36a4a:	b10c      	cbz	r4, 36a50 <at_interface_wait+0x1c>
   36a4c:	2300      	movs	r3, #0
   36a4e:	6043      	str	r3, [r0, #4]
   36a50:	4620      	mov	r0, r4
   36a52:	bd38      	pop	{r3, r4, r5, pc}

00036a54 <send_message>:
   36a54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   36a58:	4606      	mov	r6, r0
   36a5a:	4668      	mov	r0, sp
   36a5c:	460f      	mov	r7, r1
   36a5e:	4692      	mov	sl, r2
   36a60:	4699      	mov	r9, r3
   36a62:	f7ff fab4 	bl	35fce <rpc_at_client_request_alloc>
   36a66:	4605      	mov	r5, r0
   36a68:	4630      	mov	r0, r6
   36a6a:	f7ef fff3 	bl	26a54 <interface_socket_from_handle_get>
   36a6e:	4680      	mov	r8, r0
   36a70:	bb5d      	cbnz	r5, 36aca <send_message+0x76>
   36a72:	2304      	movs	r3, #4
   36a74:	9c00      	ldr	r4, [sp, #0]
   36a76:	7223      	strb	r3, [r4, #8]
   36a78:	7265      	strb	r5, [r4, #9]
   36a7a:	72a5      	strb	r5, [r4, #10]
   36a7c:	72e5      	strb	r5, [r4, #11]
   36a7e:	60e6      	str	r6, [r4, #12]
   36a80:	b127      	cbz	r7, 36a8c <send_message+0x38>
   36a82:	463a      	mov	r2, r7
   36a84:	4651      	mov	r1, sl
   36a86:	6820      	ldr	r0, [r4, #0]
   36a88:	f000 fe7b 	bl	37782 <memcpy>
   36a8c:	4649      	mov	r1, r9
   36a8e:	9800      	ldr	r0, [sp, #0]
   36a90:	f7ff faac 	bl	35fec <rpc_at_client_request_send>
   36a94:	b158      	cbz	r0, 36aae <send_message+0x5a>
   36a96:	b11f      	cbz	r7, 36aa0 <send_message+0x4c>
   36a98:	9b00      	ldr	r3, [sp, #0]
   36a9a:	6818      	ldr	r0, [r3, #0]
   36a9c:	f7ff fab3 	bl	36006 <rpc_at_client_data_free>
   36aa0:	9800      	ldr	r0, [sp, #0]
   36aa2:	f7ff faad 	bl	36000 <rpc_at_client_message_free>
   36aa6:	2023      	movs	r0, #35	; 0x23
   36aa8:	b002      	add	sp, #8
   36aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36aae:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   36ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   36ab4:	2b00      	cmp	r3, #0
   36ab6:	bf08      	it	eq
   36ab8:	f04f 33ff 	moveq.w	r3, #4294967295
   36abc:	4611      	mov	r1, r2
   36abe:	9301      	str	r3, [sp, #4]
   36ac0:	4630      	mov	r0, r6
   36ac2:	ab01      	add	r3, sp, #4
   36ac4:	f7ff ffb6 	bl	36a34 <at_interface_wait>
   36ac8:	e7ee      	b.n	36aa8 <send_message+0x54>
   36aca:	200c      	movs	r0, #12
   36acc:	e7ec      	b.n	36aa8 <send_message+0x54>

00036ace <at_interface_write>:
   36ace:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   36ad2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   36ad4:	4607      	mov	r7, r0
   36ad6:	4688      	mov	r8, r1
   36ad8:	4615      	mov	r5, r2
   36ada:	4699      	mov	r9, r3
   36adc:	b146      	cbz	r6, 36af0 <at_interface_write+0x22>
   36ade:	2038      	movs	r0, #56	; 0x38
   36ae0:	f7ea f85c 	bl	20b9c <nrf_modem_os_errno_set>
   36ae4:	f04f 35ff 	mov.w	r5, #4294967295
   36ae8:	4628      	mov	r0, r5
   36aea:	b003      	add	sp, #12
   36aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36af0:	f7ef ffb0 	bl	26a54 <interface_socket_from_handle_get>
   36af4:	4604      	mov	r4, r0
   36af6:	f1b9 0f00 	cmp.w	r9, #0
   36afa:	d124      	bne.n	36b46 <at_interface_write+0x78>
   36afc:	b908      	cbnz	r0, 36b02 <at_interface_write+0x34>
   36afe:	2016      	movs	r0, #22
   36b00:	e7ee      	b.n	36ae0 <at_interface_write+0x12>
   36b02:	2601      	movs	r6, #1
   36b04:	6822      	ldr	r2, [r4, #0]
   36b06:	0393      	lsls	r3, r2, #14
   36b08:	d518      	bpl.n	36b3c <at_interface_write+0x6e>
   36b0a:	b1f6      	cbz	r6, 36b4a <at_interface_write+0x7c>
   36b0c:	6823      	ldr	r3, [r4, #0]
   36b0e:	4642      	mov	r2, r8
   36b10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   36b14:	6023      	str	r3, [r4, #0]
   36b16:	6823      	ldr	r3, [r4, #0]
   36b18:	4629      	mov	r1, r5
   36b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   36b1e:	6023      	str	r3, [r4, #0]
   36b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   36b24:	4638      	mov	r0, r7
   36b26:	9300      	str	r3, [sp, #0]
   36b28:	2301      	movs	r3, #1
   36b2a:	f7ff ff93 	bl	36a54 <send_message>
   36b2e:	2800      	cmp	r0, #0
   36b30:	d0da      	beq.n	36ae8 <at_interface_write+0x1a>
   36b32:	6823      	ldr	r3, [r4, #0]
   36b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36b38:	6023      	str	r3, [r4, #0]
   36b3a:	e7d1      	b.n	36ae0 <at_interface_write+0x12>
   36b3c:	2e00      	cmp	r6, #0
   36b3e:	bf14      	ite	ne
   36b40:	2016      	movne	r0, #22
   36b42:	202d      	moveq	r0, #45	; 0x2d
   36b44:	e7cc      	b.n	36ae0 <at_interface_write+0x12>
   36b46:	2800      	cmp	r0, #0
   36b48:	d1dc      	bne.n	36b04 <at_interface_write+0x36>
   36b4a:	202d      	movs	r0, #45	; 0x2d
   36b4c:	e7c8      	b.n	36ae0 <at_interface_write+0x12>

00036b4e <at_interface_close>:
   36b4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36b50:	4606      	mov	r6, r0
   36b52:	f7ef ff7f 	bl	26a54 <interface_socket_from_handle_get>
   36b56:	4604      	mov	r4, r0
   36b58:	b308      	cbz	r0, 36b9e <at_interface_close+0x50>
   36b5a:	230d      	movs	r3, #13
   36b5c:	6807      	ldr	r7, [r0, #0]
   36b5e:	6003      	str	r3, [r0, #0]
   36b60:	6803      	ldr	r3, [r0, #0]
   36b62:	2200      	movs	r2, #0
   36b64:	039b      	lsls	r3, r3, #14
   36b66:	bf48      	it	mi
   36b68:	6803      	ldrmi	r3, [r0, #0]
   36b6a:	4611      	mov	r1, r2
   36b6c:	bf44      	itt	mi
   36b6e:	f423 3300 	bicmi.w	r3, r3, #131072	; 0x20000
   36b72:	6003      	strmi	r3, [r0, #0]
   36b74:	230e      	movs	r3, #14
   36b76:	4630      	mov	r0, r6
   36b78:	9300      	str	r3, [sp, #0]
   36b7a:	2306      	movs	r3, #6
   36b7c:	f7ff ff6a 	bl	36a54 <send_message>
   36b80:	4605      	mov	r5, r0
   36b82:	b130      	cbz	r0, 36b92 <at_interface_close+0x44>
   36b84:	6027      	str	r7, [r4, #0]
   36b86:	4628      	mov	r0, r5
   36b88:	f7ea f808 	bl	20b9c <nrf_modem_os_errno_set>
   36b8c:	f04f 35ff 	mov.w	r5, #4294967295
   36b90:	e002      	b.n	36b98 <at_interface_close+0x4a>
   36b92:	4630      	mov	r0, r6
   36b94:	f7ef fefe 	bl	26994 <interface_socket_free>
   36b98:	4628      	mov	r0, r5
   36b9a:	b003      	add	sp, #12
   36b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36b9e:	2516      	movs	r5, #22
   36ba0:	e7f1      	b.n	36b86 <at_interface_close+0x38>

00036ba2 <at_interface_read>:
   36ba2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36ba6:	b087      	sub	sp, #28
   36ba8:	4680      	mov	r8, r0
   36baa:	460e      	mov	r6, r1
   36bac:	4614      	mov	r4, r2
   36bae:	461f      	mov	r7, r3
   36bb0:	f7ef ff50 	bl	26a54 <interface_socket_from_handle_get>
   36bb4:	4605      	mov	r5, r0
   36bb6:	2800      	cmp	r0, #0
   36bb8:	d045      	beq.n	36c46 <at_interface_read+0xa4>
   36bba:	2300      	movs	r3, #0
   36bbc:	e9cd 6402 	strd	r6, r4, [sp, #8]
   36bc0:	9304      	str	r3, [sp, #16]
   36bc2:	b117      	cbz	r7, 36bca <at_interface_read+0x28>
   36bc4:	f017 0f2a 	tst.w	r7, #42	; 0x2a
   36bc8:	d022      	beq.n	36c10 <at_interface_read+0x6e>
   36bca:	2400      	movs	r4, #0
   36bcc:	9305      	str	r3, [sp, #20]
   36bce:	f007 0902 	and.w	r9, r7, #2
   36bd2:	682b      	ldr	r3, [r5, #0]
   36bd4:	69e8      	ldr	r0, [r5, #28]
   36bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   36bda:	602b      	str	r3, [r5, #0]
   36bdc:	6803      	ldr	r3, [r0, #0]
   36bde:	463a      	mov	r2, r7
   36be0:	689b      	ldr	r3, [r3, #8]
   36be2:	a902      	add	r1, sp, #8
   36be4:	4798      	blx	r3
   36be6:	1e06      	subs	r6, r0, #0
   36be8:	da1b      	bge.n	36c22 <at_interface_read+0x80>
   36bea:	f1b9 0f00 	cmp.w	r9, #0
   36bee:	d113      	bne.n	36c18 <at_interface_read+0x76>
   36bf0:	b9bc      	cbnz	r4, 36c22 <at_interface_read+0x80>
   36bf2:	6a2b      	ldr	r3, [r5, #32]
   36bf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   36bf8:	2b00      	cmp	r3, #0
   36bfa:	bf08      	it	eq
   36bfc:	f04f 33ff 	moveq.w	r3, #4294967295
   36c00:	4611      	mov	r1, r2
   36c02:	9301      	str	r3, [sp, #4]
   36c04:	4640      	mov	r0, r8
   36c06:	ab01      	add	r3, sp, #4
   36c08:	f7ff ff14 	bl	36a34 <at_interface_wait>
   36c0c:	4604      	mov	r4, r0
   36c0e:	e7e0      	b.n	36bd2 <at_interface_read+0x30>
   36c10:	242d      	movs	r4, #45	; 0x2d
   36c12:	f04f 36ff 	mov.w	r6, #4294967295
   36c16:	e00f      	b.n	36c38 <at_interface_read+0x96>
   36c18:	1c73      	adds	r3, r6, #1
   36c1a:	d102      	bne.n	36c22 <at_interface_read+0x80>
   36c1c:	2c00      	cmp	r4, #0
   36c1e:	bf08      	it	eq
   36c20:	2423      	moveq	r4, #35	; 0x23
   36c22:	69e8      	ldr	r0, [r5, #28]
   36c24:	6803      	ldr	r3, [r0, #0]
   36c26:	68db      	ldr	r3, [r3, #12]
   36c28:	4798      	blx	r3
   36c2a:	3001      	adds	r0, #1
   36c2c:	bf1e      	ittt	ne
   36c2e:	682b      	ldrne	r3, [r5, #0]
   36c30:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
   36c34:	602b      	strne	r3, [r5, #0]
   36c36:	b114      	cbz	r4, 36c3e <at_interface_read+0x9c>
   36c38:	4620      	mov	r0, r4
   36c3a:	f7e9 ffaf 	bl	20b9c <nrf_modem_os_errno_set>
   36c3e:	4630      	mov	r0, r6
   36c40:	b007      	add	sp, #28
   36c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36c46:	2416      	movs	r4, #22
   36c48:	e7e3      	b.n	36c12 <at_interface_read+0x70>

00036c4a <at_interface_getopt>:
   36c4a:	f7ef bf4b 	b.w	26ae4 <interface_socket_getopt>

00036c4e <at_interface_setopt>:
   36c4e:	f7ef bf11 	b.w	26a74 <interface_socket_setopt>

00036c52 <rpc_at_event_handler>:
   36c52:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   36c54:	4606      	mov	r6, r0
   36c56:	68c0      	ldr	r0, [r0, #12]
   36c58:	460d      	mov	r5, r1
   36c5a:	f7ef fefb 	bl	26a54 <interface_socket_from_handle_get>
   36c5e:	4604      	mov	r4, r0
   36c60:	2800      	cmp	r0, #0
   36c62:	d03a      	beq.n	36cda <rpc_at_event_handler+0x88>
   36c64:	6803      	ldr	r3, [r0, #0]
   36c66:	b29b      	uxth	r3, r3
   36c68:	2b01      	cmp	r3, #1
   36c6a:	d104      	bne.n	36c76 <rpc_at_event_handler+0x24>
   36c6c:	2d02      	cmp	r5, #2
   36c6e:	d11c      	bne.n	36caa <rpc_at_event_handler+0x58>
   36c70:	6005      	str	r5, [r0, #0]
   36c72:	2000      	movs	r0, #0
   36c74:	e02b      	b.n	36cce <rpc_at_event_handler+0x7c>
   36c76:	6803      	ldr	r3, [r0, #0]
   36c78:	b29b      	uxth	r3, r3
   36c7a:	2b0d      	cmp	r3, #13
   36c7c:	d104      	bne.n	36c88 <rpc_at_event_handler+0x36>
   36c7e:	2d02      	cmp	r5, #2
   36c80:	d113      	bne.n	36caa <rpc_at_event_handler+0x58>
   36c82:	230e      	movs	r3, #14
   36c84:	6023      	str	r3, [r4, #0]
   36c86:	e7f4      	b.n	36c72 <rpc_at_event_handler+0x20>
   36c88:	6803      	ldr	r3, [r0, #0]
   36c8a:	b29b      	uxth	r3, r3
   36c8c:	2b02      	cmp	r3, #2
   36c8e:	d10c      	bne.n	36caa <rpc_at_event_handler+0x58>
   36c90:	6803      	ldr	r3, [r0, #0]
   36c92:	029b      	lsls	r3, r3, #10
   36c94:	d509      	bpl.n	36caa <rpc_at_event_handler+0x58>
   36c96:	2d02      	cmp	r5, #2
   36c98:	d107      	bne.n	36caa <rpc_at_event_handler+0x58>
   36c9a:	6803      	ldr	r3, [r0, #0]
   36c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   36ca0:	6003      	str	r3, [r0, #0]
   36ca2:	6803      	ldr	r3, [r0, #0]
   36ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36ca8:	e7ec      	b.n	36c84 <rpc_at_event_handler+0x32>
   36caa:	3d03      	subs	r5, #3
   36cac:	2d01      	cmp	r5, #1
   36cae:	d8e0      	bhi.n	36c72 <rpc_at_event_handler+0x20>
   36cb0:	2500      	movs	r5, #0
   36cb2:	6833      	ldr	r3, [r6, #0]
   36cb4:	69e0      	ldr	r0, [r4, #28]
   36cb6:	9300      	str	r3, [sp, #0]
   36cb8:	6873      	ldr	r3, [r6, #4]
   36cba:	4669      	mov	r1, sp
   36cbc:	9301      	str	r3, [sp, #4]
   36cbe:	6803      	ldr	r3, [r0, #0]
   36cc0:	e9cd 5502 	strd	r5, r5, [sp, #8]
   36cc4:	685b      	ldr	r3, [r3, #4]
   36cc6:	4798      	blx	r3
   36cc8:	3001      	adds	r0, #1
   36cca:	d102      	bne.n	36cd2 <rpc_at_event_handler+0x80>
   36ccc:	2002      	movs	r0, #2
   36cce:	b004      	add	sp, #16
   36cd0:	bd70      	pop	{r4, r5, r6, pc}
   36cd2:	6823      	ldr	r3, [r4, #0]
   36cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   36cd8:	e7d4      	b.n	36c84 <rpc_at_event_handler+0x32>
   36cda:	6830      	ldr	r0, [r6, #0]
   36cdc:	2800      	cmp	r0, #0
   36cde:	d0c8      	beq.n	36c72 <rpc_at_event_handler+0x20>
   36ce0:	f7ff f991 	bl	36006 <rpc_at_client_data_free>
   36ce4:	e7c5      	b.n	36c72 <rpc_at_event_handler+0x20>

00036ce6 <packet_free_cb>:
   36ce6:	b510      	push	{r4, lr}
   36ce8:	4604      	mov	r4, r0
   36cea:	b118      	cbz	r0, 36cf4 <packet_free_cb+0xe>
   36cec:	6800      	ldr	r0, [r0, #0]
   36cee:	b108      	cbz	r0, 36cf4 <packet_free_cb+0xe>
   36cf0:	f7ff f9f9 	bl	360e6 <rpc_gnss_client_data_free>
   36cf4:	68a0      	ldr	r0, [r4, #8]
   36cf6:	b118      	cbz	r0, 36d00 <packet_free_cb+0x1a>
   36cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36cfc:	f7ea b908 	b.w	20f10 <nrf_modem_os_free>
   36d00:	bd10      	pop	{r4, pc}

00036d02 <spaces_remove>:
   36d02:	2200      	movs	r2, #0
   36d04:	b510      	push	{r4, lr}
   36d06:	1e44      	subs	r4, r0, #1
   36d08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   36d0c:	1881      	adds	r1, r0, r2
   36d0e:	b90b      	cbnz	r3, 36d14 <spaces_remove+0x12>
   36d10:	700b      	strb	r3, [r1, #0]
   36d12:	bd10      	pop	{r4, pc}
   36d14:	2b20      	cmp	r3, #32
   36d16:	bf1c      	itt	ne
   36d18:	700b      	strbne	r3, [r1, #0]
   36d1a:	3201      	addne	r2, #1
   36d1c:	e7f4      	b.n	36d08 <spaces_remove+0x6>

00036d1e <ok_rsp_parser>:
   36d1e:	2000      	movs	r0, #0
   36d20:	4770      	bx	lr

00036d22 <context_query_parser>:
   36d22:	f06f 0004 	mvn.w	r0, #4
   36d26:	4770      	bx	lr

00036d28 <null_handler_init>:
   36d28:	2000      	movs	r0, #0
   36d2a:	4770      	bx	lr

00036d2c <null_handler_put>:
   36d2c:	b510      	push	{r4, lr}
   36d2e:	460c      	mov	r4, r1
   36d30:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   36d34:	4620      	mov	r0, r4
   36d36:	4798      	blx	r3
   36d38:	6860      	ldr	r0, [r4, #4]
   36d3a:	bd10      	pop	{r4, pc}

00036d3c <null_handler_get>:
   36d3c:	f04f 30ff 	mov.w	r0, #4294967295
   36d40:	4770      	bx	lr

00036d42 <null_handler_available>:
   36d42:	f04f 30ff 	mov.w	r0, #4294967295
   36d46:	4770      	bx	lr

00036d48 <null_handler_flush>:
   36d48:	2000      	movs	r0, #0
   36d4a:	4770      	bx	lr

00036d4c <null_handler_free>:
   36d4c:	4770      	bx	lr

00036d4e <stream_handler_free_packet>:
   36d4e:	b530      	push	{r4, r5, lr}
   36d50:	4605      	mov	r5, r0
   36d52:	b085      	sub	sp, #20
   36d54:	68c0      	ldr	r0, [r0, #12]
   36d56:	f000 fb0f 	bl	37378 <linked_list_pop>
   36d5a:	4604      	mov	r4, r0
   36d5c:	b170      	cbz	r0, 36d7c <stream_handler_free_packet+0x2e>
   36d5e:	6843      	ldr	r3, [r0, #4]
   36d60:	9300      	str	r3, [sp, #0]
   36d62:	6883      	ldr	r3, [r0, #8]
   36d64:	9301      	str	r3, [sp, #4]
   36d66:	6903      	ldr	r3, [r0, #16]
   36d68:	9302      	str	r3, [sp, #8]
   36d6a:	68c3      	ldr	r3, [r0, #12]
   36d6c:	4668      	mov	r0, sp
   36d6e:	9303      	str	r3, [sp, #12]
   36d70:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   36d74:	4798      	blx	r3
   36d76:	4620      	mov	r0, r4
   36d78:	f7ea f8ca 	bl	20f10 <nrf_modem_os_free>
   36d7c:	b005      	add	sp, #20
   36d7e:	bd30      	pop	{r4, r5, pc}

00036d80 <stream_handler_init>:
   36d80:	b510      	push	{r4, lr}
   36d82:	4604      	mov	r4, r0
   36d84:	200c      	movs	r0, #12
   36d86:	f7ea f8bb 	bl	20f00 <nrf_modem_os_alloc>
   36d8a:	60e0      	str	r0, [r4, #12]
   36d8c:	b128      	cbz	r0, 36d9a <stream_handler_init+0x1a>
   36d8e:	2300      	movs	r3, #0
   36d90:	6123      	str	r3, [r4, #16]
   36d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36d96:	f000 bad3 	b.w	37340 <linked_list_init>
   36d9a:	200c      	movs	r0, #12
   36d9c:	bd10      	pop	{r4, pc}

00036d9e <stream_handler_put>:
   36d9e:	b570      	push	{r4, r5, r6, lr}
   36da0:	4606      	mov	r6, r0
   36da2:	2014      	movs	r0, #20
   36da4:	460d      	mov	r5, r1
   36da6:	f7ea f8ab 	bl	20f00 <nrf_modem_os_alloc>
   36daa:	4604      	mov	r4, r0
   36dac:	b178      	cbz	r0, 36dce <stream_handler_put+0x30>
   36dae:	682b      	ldr	r3, [r5, #0]
   36db0:	4601      	mov	r1, r0
   36db2:	6043      	str	r3, [r0, #4]
   36db4:	686b      	ldr	r3, [r5, #4]
   36db6:	6083      	str	r3, [r0, #8]
   36db8:	68eb      	ldr	r3, [r5, #12]
   36dba:	60c3      	str	r3, [r0, #12]
   36dbc:	68ab      	ldr	r3, [r5, #8]
   36dbe:	6103      	str	r3, [r0, #16]
   36dc0:	68f0      	ldr	r0, [r6, #12]
   36dc2:	f000 fac6 	bl	37352 <linked_list_push>
   36dc6:	b128      	cbz	r0, 36dd4 <stream_handler_put+0x36>
   36dc8:	4620      	mov	r0, r4
   36dca:	f7ea f8a1 	bl	20f10 <nrf_modem_os_free>
   36dce:	f04f 30ff 	mov.w	r0, #4294967295
   36dd2:	e000      	b.n	36dd6 <stream_handler_put+0x38>
   36dd4:	6868      	ldr	r0, [r5, #4]
   36dd6:	bd70      	pop	{r4, r5, r6, pc}

00036dd8 <stream_handler_get>:
   36dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36ddc:	4606      	mov	r6, r0
   36dde:	b085      	sub	sp, #20
   36de0:	68c0      	ldr	r0, [r0, #12]
   36de2:	468a      	mov	sl, r1
   36de4:	4617      	mov	r7, r2
   36de6:	f000 fad1 	bl	3738c <linked_list_peek>
   36dea:	4604      	mov	r4, r0
   36dec:	2800      	cmp	r0, #0
   36dee:	d055      	beq.n	36e9c <stream_handler_get+0xc4>
   36df0:	f8da 0008 	ldr.w	r0, [sl, #8]
   36df4:	2800      	cmp	r0, #0
   36df6:	d049      	beq.n	36e8c <stream_handler_get+0xb4>
   36df8:	6921      	ldr	r1, [r4, #16]
   36dfa:	2900      	cmp	r1, #0
   36dfc:	d046      	beq.n	36e8c <stream_handler_get+0xb4>
   36dfe:	68e2      	ldr	r2, [r4, #12]
   36e00:	2a00      	cmp	r2, #0
   36e02:	d043      	beq.n	36e8c <stream_handler_get+0xb4>
   36e04:	f8da 500c 	ldr.w	r5, [sl, #12]
   36e08:	42aa      	cmp	r2, r5
   36e0a:	bf28      	it	cs
   36e0c:	462a      	movcs	r2, r5
   36e0e:	f8ca 200c 	str.w	r2, [sl, #12]
   36e12:	f000 fcb6 	bl	37782 <memcpy>
   36e16:	2500      	movs	r5, #0
   36e18:	f8da 3004 	ldr.w	r3, [sl, #4]
   36e1c:	6931      	ldr	r1, [r6, #16]
   36e1e:	9301      	str	r3, [sp, #4]
   36e20:	f8da 3000 	ldr.w	r3, [sl]
   36e24:	9302      	str	r3, [sp, #8]
   36e26:	f007 0320 	and.w	r3, r7, #32
   36e2a:	9303      	str	r3, [sp, #12]
   36e2c:	f007 0708 	and.w	r7, r7, #8
   36e30:	9b01      	ldr	r3, [sp, #4]
   36e32:	42ab      	cmp	r3, r5
   36e34:	d924      	bls.n	36e80 <stream_handler_get+0xa8>
   36e36:	68a2      	ldr	r2, [r4, #8]
   36e38:	9b01      	ldr	r3, [sp, #4]
   36e3a:	eba2 0801 	sub.w	r8, r2, r1
   36e3e:	eba3 0b05 	sub.w	fp, r3, r5
   36e42:	f8da 2000 	ldr.w	r2, [sl]
   36e46:	45d8      	cmp	r8, fp
   36e48:	46c1      	mov	r9, r8
   36e4a:	bf28      	it	cs
   36e4c:	46d9      	movcs	r9, fp
   36e4e:	b142      	cbz	r2, 36e62 <stream_handler_get+0x8a>
   36e50:	9b03      	ldr	r3, [sp, #12]
   36e52:	b933      	cbnz	r3, 36e62 <stream_handler_get+0x8a>
   36e54:	6860      	ldr	r0, [r4, #4]
   36e56:	9b02      	ldr	r3, [sp, #8]
   36e58:	4401      	add	r1, r0
   36e5a:	464a      	mov	r2, r9
   36e5c:	1958      	adds	r0, r3, r5
   36e5e:	f000 fc90 	bl	37782 <memcpy>
   36e62:	4620      	mov	r0, r4
   36e64:	f000 fa99 	bl	3739a <linked_list_get_next>
   36e68:	4604      	mov	r4, r0
   36e6a:	b92f      	cbnz	r7, 36e78 <stream_handler_get+0xa0>
   36e6c:	45d8      	cmp	r8, fp
   36e6e:	d811      	bhi.n	36e94 <stream_handler_get+0xbc>
   36e70:	4630      	mov	r0, r6
   36e72:	f7ff ff6c 	bl	36d4e <stream_handler_free_packet>
   36e76:	6137      	str	r7, [r6, #16]
   36e78:	2100      	movs	r1, #0
   36e7a:	444d      	add	r5, r9
   36e7c:	2c00      	cmp	r4, #0
   36e7e:	d1d7      	bne.n	36e30 <stream_handler_get+0x58>
   36e80:	4628      	mov	r0, r5
   36e82:	f8ca 5004 	str.w	r5, [sl, #4]
   36e86:	b005      	add	sp, #20
   36e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36e8c:	2200      	movs	r2, #0
   36e8e:	f8ca 200c 	str.w	r2, [sl, #12]
   36e92:	e7c0      	b.n	36e16 <stream_handler_get+0x3e>
   36e94:	6932      	ldr	r2, [r6, #16]
   36e96:	444a      	add	r2, r9
   36e98:	6132      	str	r2, [r6, #16]
   36e9a:	e7ed      	b.n	36e78 <stream_handler_get+0xa0>
   36e9c:	f04f 30ff 	mov.w	r0, #4294967295
   36ea0:	e7f1      	b.n	36e86 <stream_handler_get+0xae>

00036ea2 <stream_handler_available>:
   36ea2:	b510      	push	{r4, lr}
   36ea4:	4604      	mov	r4, r0
   36ea6:	68c0      	ldr	r0, [r0, #12]
   36ea8:	f000 fa70 	bl	3738c <linked_list_peek>
   36eac:	b150      	cbz	r0, 36ec4 <stream_handler_available+0x22>
   36eae:	6924      	ldr	r4, [r4, #16]
   36eb0:	4264      	negs	r4, r4
   36eb2:	6883      	ldr	r3, [r0, #8]
   36eb4:	441c      	add	r4, r3
   36eb6:	f000 fa70 	bl	3739a <linked_list_get_next>
   36eba:	2800      	cmp	r0, #0
   36ebc:	d1f9      	bne.n	36eb2 <stream_handler_available+0x10>
   36ebe:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   36ec2:	bd10      	pop	{r4, pc}
   36ec4:	f04f 30ff 	mov.w	r0, #4294967295
   36ec8:	e7fb      	b.n	36ec2 <stream_handler_available+0x20>

00036eca <stream_handler_flush>:
   36eca:	68c3      	ldr	r3, [r0, #12]
   36ecc:	b510      	push	{r4, lr}
   36ece:	4604      	mov	r4, r0
   36ed0:	b923      	cbnz	r3, 36edc <stream_handler_flush+0x12>
   36ed2:	2016      	movs	r0, #22
   36ed4:	e007      	b.n	36ee6 <stream_handler_flush+0x1c>
   36ed6:	4620      	mov	r0, r4
   36ed8:	f7ff ff39 	bl	36d4e <stream_handler_free_packet>
   36edc:	68e0      	ldr	r0, [r4, #12]
   36ede:	f000 fa5a 	bl	37396 <linked_list_size_get>
   36ee2:	2800      	cmp	r0, #0
   36ee4:	d1f7      	bne.n	36ed6 <stream_handler_flush+0xc>
   36ee6:	bd10      	pop	{r4, pc}

00036ee8 <stream_handler_free>:
   36ee8:	68c3      	ldr	r3, [r0, #12]
   36eea:	b510      	push	{r4, lr}
   36eec:	4604      	mov	r4, r0
   36eee:	b133      	cbz	r3, 36efe <stream_handler_free+0x16>
   36ef0:	f7ff ffeb 	bl	36eca <stream_handler_flush>
   36ef4:	68e0      	ldr	r0, [r4, #12]
   36ef6:	f7ea f80b 	bl	20f10 <nrf_modem_os_free>
   36efa:	2300      	movs	r3, #0
   36efc:	60e3      	str	r3, [r4, #12]
   36efe:	bd10      	pop	{r4, pc}

00036f00 <datagram_handler_free_packet>:
   36f00:	b530      	push	{r4, r5, lr}
   36f02:	4605      	mov	r5, r0
   36f04:	b085      	sub	sp, #20
   36f06:	68c0      	ldr	r0, [r0, #12]
   36f08:	f000 fa36 	bl	37378 <linked_list_pop>
   36f0c:	4604      	mov	r4, r0
   36f0e:	b170      	cbz	r0, 36f2e <datagram_handler_free_packet+0x2e>
   36f10:	6843      	ldr	r3, [r0, #4]
   36f12:	9300      	str	r3, [sp, #0]
   36f14:	6883      	ldr	r3, [r0, #8]
   36f16:	9301      	str	r3, [sp, #4]
   36f18:	6903      	ldr	r3, [r0, #16]
   36f1a:	9302      	str	r3, [sp, #8]
   36f1c:	68c3      	ldr	r3, [r0, #12]
   36f1e:	4668      	mov	r0, sp
   36f20:	9303      	str	r3, [sp, #12]
   36f22:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   36f26:	4798      	blx	r3
   36f28:	4620      	mov	r0, r4
   36f2a:	f7e9 fff1 	bl	20f10 <nrf_modem_os_free>
   36f2e:	b005      	add	sp, #20
   36f30:	bd30      	pop	{r4, r5, pc}

00036f32 <datagram_handler_init>:
   36f32:	b510      	push	{r4, lr}
   36f34:	4604      	mov	r4, r0
   36f36:	200c      	movs	r0, #12
   36f38:	f7e9 ffe2 	bl	20f00 <nrf_modem_os_alloc>
   36f3c:	60e0      	str	r0, [r4, #12]
   36f3e:	b118      	cbz	r0, 36f48 <datagram_handler_init+0x16>
   36f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36f44:	f000 b9fc 	b.w	37340 <linked_list_init>
   36f48:	200c      	movs	r0, #12
   36f4a:	bd10      	pop	{r4, pc}

00036f4c <datagram_handler_put>:
   36f4c:	b570      	push	{r4, r5, r6, lr}
   36f4e:	4606      	mov	r6, r0
   36f50:	2014      	movs	r0, #20
   36f52:	460d      	mov	r5, r1
   36f54:	f7e9 ffd4 	bl	20f00 <nrf_modem_os_alloc>
   36f58:	4604      	mov	r4, r0
   36f5a:	b178      	cbz	r0, 36f7c <datagram_handler_put+0x30>
   36f5c:	682b      	ldr	r3, [r5, #0]
   36f5e:	4601      	mov	r1, r0
   36f60:	6043      	str	r3, [r0, #4]
   36f62:	686b      	ldr	r3, [r5, #4]
   36f64:	6083      	str	r3, [r0, #8]
   36f66:	68eb      	ldr	r3, [r5, #12]
   36f68:	60c3      	str	r3, [r0, #12]
   36f6a:	68ab      	ldr	r3, [r5, #8]
   36f6c:	6103      	str	r3, [r0, #16]
   36f6e:	68f0      	ldr	r0, [r6, #12]
   36f70:	f000 f9ef 	bl	37352 <linked_list_push>
   36f74:	b128      	cbz	r0, 36f82 <datagram_handler_put+0x36>
   36f76:	4620      	mov	r0, r4
   36f78:	f7e9 ffca 	bl	20f10 <nrf_modem_os_free>
   36f7c:	f04f 30ff 	mov.w	r0, #4294967295
   36f80:	e000      	b.n	36f84 <datagram_handler_put+0x38>
   36f82:	6868      	ldr	r0, [r5, #4]
   36f84:	bd70      	pop	{r4, r5, r6, pc}

00036f86 <datagram_handler_get>:
   36f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36f88:	4607      	mov	r7, r0
   36f8a:	68c0      	ldr	r0, [r0, #12]
   36f8c:	460c      	mov	r4, r1
   36f8e:	4616      	mov	r6, r2
   36f90:	f000 f9fc 	bl	3738c <linked_list_peek>
   36f94:	4605      	mov	r5, r0
   36f96:	b328      	cbz	r0, 36fe4 <datagram_handler_get+0x5e>
   36f98:	6882      	ldr	r2, [r0, #8]
   36f9a:	6863      	ldr	r3, [r4, #4]
   36f9c:	6820      	ldr	r0, [r4, #0]
   36f9e:	429a      	cmp	r2, r3
   36fa0:	bf28      	it	cs
   36fa2:	461a      	movcs	r2, r3
   36fa4:	6062      	str	r2, [r4, #4]
   36fa6:	b110      	cbz	r0, 36fae <datagram_handler_get+0x28>
   36fa8:	6869      	ldr	r1, [r5, #4]
   36faa:	f000 fbea 	bl	37782 <memcpy>
   36fae:	68a0      	ldr	r0, [r4, #8]
   36fb0:	b1a8      	cbz	r0, 36fde <datagram_handler_get+0x58>
   36fb2:	6929      	ldr	r1, [r5, #16]
   36fb4:	b199      	cbz	r1, 36fde <datagram_handler_get+0x58>
   36fb6:	68ea      	ldr	r2, [r5, #12]
   36fb8:	b18a      	cbz	r2, 36fde <datagram_handler_get+0x58>
   36fba:	68e3      	ldr	r3, [r4, #12]
   36fbc:	429a      	cmp	r2, r3
   36fbe:	bf28      	it	cs
   36fc0:	461a      	movcs	r2, r3
   36fc2:	60e2      	str	r2, [r4, #12]
   36fc4:	f000 fbdd 	bl	37782 <memcpy>
   36fc8:	0732      	lsls	r2, r6, #28
   36fca:	68ad      	ldr	r5, [r5, #8]
   36fcc:	d402      	bmi.n	36fd4 <datagram_handler_get+0x4e>
   36fce:	4638      	mov	r0, r7
   36fd0:	f7ff ff96 	bl	36f00 <datagram_handler_free_packet>
   36fd4:	06b3      	lsls	r3, r6, #26
   36fd6:	bf4c      	ite	mi
   36fd8:	4628      	movmi	r0, r5
   36fda:	6860      	ldrpl	r0, [r4, #4]
   36fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36fde:	2300      	movs	r3, #0
   36fe0:	60e3      	str	r3, [r4, #12]
   36fe2:	e7f1      	b.n	36fc8 <datagram_handler_get+0x42>
   36fe4:	f04f 30ff 	mov.w	r0, #4294967295
   36fe8:	e7f8      	b.n	36fdc <datagram_handler_get+0x56>

00036fea <datagram_handler_available>:
   36fea:	b508      	push	{r3, lr}
   36fec:	68c0      	ldr	r0, [r0, #12]
   36fee:	f000 f9cd 	bl	3738c <linked_list_peek>
   36ff2:	b108      	cbz	r0, 36ff8 <datagram_handler_available+0xe>
   36ff4:	6880      	ldr	r0, [r0, #8]
   36ff6:	bd08      	pop	{r3, pc}
   36ff8:	f04f 30ff 	mov.w	r0, #4294967295
   36ffc:	e7fb      	b.n	36ff6 <datagram_handler_available+0xc>

00036ffe <datagram_handler_flush>:
   36ffe:	68c3      	ldr	r3, [r0, #12]
   37000:	b510      	push	{r4, lr}
   37002:	4604      	mov	r4, r0
   37004:	b923      	cbnz	r3, 37010 <datagram_handler_flush+0x12>
   37006:	2016      	movs	r0, #22
   37008:	e007      	b.n	3701a <datagram_handler_flush+0x1c>
   3700a:	4620      	mov	r0, r4
   3700c:	f7ff ff78 	bl	36f00 <datagram_handler_free_packet>
   37010:	68e0      	ldr	r0, [r4, #12]
   37012:	f000 f9c0 	bl	37396 <linked_list_size_get>
   37016:	2800      	cmp	r0, #0
   37018:	d1f7      	bne.n	3700a <datagram_handler_flush+0xc>
   3701a:	bd10      	pop	{r4, pc}

0003701c <datagram_handler_free>:
   3701c:	68c3      	ldr	r3, [r0, #12]
   3701e:	b510      	push	{r4, lr}
   37020:	4604      	mov	r4, r0
   37022:	b133      	cbz	r3, 37032 <datagram_handler_free+0x16>
   37024:	f7ff ffeb 	bl	36ffe <datagram_handler_flush>
   37028:	68e0      	ldr	r0, [r4, #12]
   3702a:	f7e9 ff71 	bl	20f10 <nrf_modem_os_free>
   3702e:	2300      	movs	r3, #0
   37030:	60e3      	str	r3, [r4, #12]
   37032:	bd10      	pop	{r4, pc}

00037034 <packet_handler_delete>:
   37034:	b510      	push	{r4, lr}
   37036:	4604      	mov	r4, r0
   37038:	6803      	ldr	r3, [r0, #0]
   3703a:	691b      	ldr	r3, [r3, #16]
   3703c:	4798      	blx	r3
   3703e:	6823      	ldr	r3, [r4, #0]
   37040:	4620      	mov	r0, r4
   37042:	695b      	ldr	r3, [r3, #20]
   37044:	4798      	blx	r3
   37046:	4620      	mov	r0, r4
   37048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3704c:	f7e9 bf60 	b.w	20f10 <nrf_modem_os_free>

00037050 <nrf_modem_recoverable_error_handler>:
   37050:	4770      	bx	lr

00037052 <nrf_modem_platform_error_handler>:
   37052:	b508      	push	{r3, lr}
   37054:	f7ff fffc 	bl	37050 <nrf_modem_recoverable_error_handler>
   37058:	bd08      	pop	{r3, pc}

0003705a <unimplemented_method>:
   3705a:	b40f      	push	{r0, r1, r2, r3}
   3705c:	b508      	push	{r3, lr}
   3705e:	202d      	movs	r0, #45	; 0x2d
   37060:	f7e9 fd9c 	bl	20b9c <nrf_modem_os_errno_set>
   37064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37068:	f04f 30ff 	mov.w	r0, #4294967295
   3706c:	b004      	add	sp, #16
   3706e:	4770      	bx	lr

00037070 <rpc_transport_ipc_fault_handler>:
   37070:	f7ff bfef 	b.w	37052 <nrf_modem_platform_error_handler>

00037074 <nrf_modem_platform_init>:
   37074:	b513      	push	{r0, r1, r4, lr}
   37076:	4604      	mov	r4, r0
   37078:	f7e9 ff5e 	bl	20f38 <nrf_modem_os_init>
   3707c:	6a23      	ldr	r3, [r4, #32]
   3707e:	4668      	mov	r0, sp
   37080:	9400      	str	r4, [sp, #0]
   37082:	f88d 3004 	strb.w	r3, [sp, #4]
   37086:	f7ef fae7 	bl	26658 <rpc_transport_ipc_init>
   3708a:	b920      	cbnz	r0, 37096 <nrf_modem_platform_init+0x22>
   3708c:	f7ef fc50 	bl	26930 <interface_init>
   37090:	b118      	cbz	r0, 3709a <nrf_modem_platform_init+0x26>
   37092:	f04f 30ff 	mov.w	r0, #4294967295
   37096:	b002      	add	sp, #8
   37098:	bd10      	pop	{r4, pc}
   3709a:	f7f1 fa0b 	bl	284b4 <at_interface_init>
   3709e:	2800      	cmp	r0, #0
   370a0:	d1f7      	bne.n	37092 <nrf_modem_platform_init+0x1e>
   370a2:	f7ef fdb3 	bl	26c0c <ip_interface_init>
   370a6:	2800      	cmp	r0, #0
   370a8:	d1f3      	bne.n	37092 <nrf_modem_platform_init+0x1e>
   370aa:	f7f0 fe65 	bl	27d78 <tls_interface_init>
   370ae:	2800      	cmp	r0, #0
   370b0:	d1ef      	bne.n	37092 <nrf_modem_platform_init+0x1e>
   370b2:	f7f1 fab3 	bl	2861c <mfu_interface_init>
   370b6:	2800      	cmp	r0, #0
   370b8:	d1eb      	bne.n	37092 <nrf_modem_platform_init+0x1e>
   370ba:	f7f2 f9a3 	bl	29404 <pdn_interface_init>
   370be:	2800      	cmp	r0, #0
   370c0:	d1e7      	bne.n	37092 <nrf_modem_platform_init+0x1e>
   370c2:	f7f2 f819 	bl	290f8 <gnss_interface_init>
   370c6:	3800      	subs	r0, #0
   370c8:	bf18      	it	ne
   370ca:	2001      	movne	r0, #1
   370cc:	4240      	negs	r0, r0
   370ce:	e7e2      	b.n	37096 <nrf_modem_platform_init+0x22>

000370d0 <internal_poll>:
   370d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   370d4:	2600      	movs	r6, #0
   370d6:	4688      	mov	r8, r1
   370d8:	4604      	mov	r4, r0
   370da:	4637      	mov	r7, r6
   370dc:	4546      	cmp	r6, r8
   370de:	d103      	bne.n	370e8 <internal_poll+0x18>
   370e0:	4638      	mov	r0, r7
   370e2:	b002      	add	sp, #8
   370e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   370e8:	88a5      	ldrh	r5, [r4, #4]
   370ea:	6820      	ldr	r0, [r4, #0]
   370ec:	a901      	add	r1, sp, #4
   370ee:	f7ff f932 	bl	36356 <interface_socket_event_get>
   370f2:	f005 0503 	and.w	r5, r5, #3
   370f6:	9b01      	ldr	r3, [sp, #4]
   370f8:	f045 051c 	orr.w	r5, r5, #28
   370fc:	401d      	ands	r5, r3
   370fe:	6820      	ldr	r0, [r4, #0]
   37100:	80e5      	strh	r5, [r4, #6]
   37102:	f7ef fca7 	bl	26a54 <interface_socket_from_handle_get>
   37106:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   3710a:	b168      	cbz	r0, 37128 <internal_poll+0x58>
   3710c:	071a      	lsls	r2, r3, #28
   3710e:	d50b      	bpl.n	37128 <internal_poll+0x58>
   37110:	6942      	ldr	r2, [r0, #20]
   37112:	2a01      	cmp	r2, #1
   37114:	d003      	beq.n	3711e <internal_poll+0x4e>
   37116:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   3711a:	2a01      	cmp	r2, #1
   3711c:	d802      	bhi.n	37124 <internal_poll+0x54>
   3711e:	f043 0301 	orr.w	r3, r3, #1
   37122:	80e3      	strh	r3, [r4, #6]
   37124:	3701      	adds	r7, #1
   37126:	e001      	b.n	3712c <internal_poll+0x5c>
   37128:	2b00      	cmp	r3, #0
   3712a:	d1fb      	bne.n	37124 <internal_poll+0x54>
   3712c:	3601      	adds	r6, #1
   3712e:	3408      	adds	r4, #8
   37130:	e7d4      	b.n	370dc <internal_poll+0xc>

00037132 <nrf_modem_platform_getaddrinfo>:
   37132:	f7f0 ba41 	b.w	275b8 <ip_interface_getaddrinfo>

00037136 <nrf_modem_platform_freeaddrinfo>:
   37136:	f7f0 bb4f 	b.w	277d8 <ip_interface_freeaddrinfo>

0003713a <nrf_modem_platform_poll>:
   3713a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3713c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   37140:	2909      	cmp	r1, #9
   37142:	4605      	mov	r5, r0
   37144:	460e      	mov	r6, r1
   37146:	9201      	str	r2, [sp, #4]
   37148:	d906      	bls.n	37158 <nrf_modem_platform_poll+0x1e>
   3714a:	2016      	movs	r0, #22
   3714c:	f7e9 fd26 	bl	20b9c <nrf_modem_os_errno_set>
   37150:	f04f 30ff 	mov.w	r0, #4294967295
   37154:	b002      	add	sp, #8
   37156:	bd70      	pop	{r4, r5, r6, pc}
   37158:	b910      	cbnz	r0, 37160 <nrf_modem_platform_poll+0x26>
   3715a:	b109      	cbz	r1, 37160 <nrf_modem_platform_poll+0x26>
   3715c:	200e      	movs	r0, #14
   3715e:	e7f5      	b.n	3714c <nrf_modem_platform_poll+0x12>
   37160:	4631      	mov	r1, r6
   37162:	4628      	mov	r0, r5
   37164:	f7ff ffb4 	bl	370d0 <internal_poll>
   37168:	2400      	movs	r4, #0
   3716a:	2800      	cmp	r0, #0
   3716c:	d1f2      	bne.n	37154 <nrf_modem_platform_poll+0x1a>
   3716e:	2c00      	cmp	r4, #0
   37170:	d1f0      	bne.n	37154 <nrf_modem_platform_poll+0x1a>
   37172:	4628      	mov	r0, r5
   37174:	a901      	add	r1, sp, #4
   37176:	f7e9 fc59 	bl	20a2c <nrf_modem_os_timedwait>
   3717a:	4604      	mov	r4, r0
   3717c:	b118      	cbz	r0, 37186 <nrf_modem_platform_poll+0x4c>
   3717e:	283c      	cmp	r0, #60	; 0x3c
   37180:	d001      	beq.n	37186 <nrf_modem_platform_poll+0x4c>
   37182:	2023      	movs	r0, #35	; 0x23
   37184:	e7e2      	b.n	3714c <nrf_modem_platform_poll+0x12>
   37186:	4631      	mov	r1, r6
   37188:	4628      	mov	r0, r5
   3718a:	f7ff ffa1 	bl	370d0 <internal_poll>
   3718e:	e7ec      	b.n	3716a <nrf_modem_platform_poll+0x30>

00037190 <nrf_socket>:
   37190:	b570      	push	{r4, r5, r6, lr}
   37192:	4604      	mov	r4, r0
   37194:	460d      	mov	r5, r1
   37196:	4616      	mov	r6, r2
   37198:	f7f2 fda0 	bl	29cdc <nrf_modem_platform_af_method_table_get>
   3719c:	b130      	cbz	r0, 371ac <nrf_socket+0x1c>
   3719e:	4632      	mov	r2, r6
   371a0:	4629      	mov	r1, r5
   371a2:	6803      	ldr	r3, [r0, #0]
   371a4:	4620      	mov	r0, r4
   371a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   371aa:	4718      	bx	r3
   371ac:	f04f 30ff 	mov.w	r0, #4294967295
   371b0:	bd70      	pop	{r4, r5, r6, pc}

000371b2 <nrf_close>:
   371b2:	b510      	push	{r4, lr}
   371b4:	4604      	mov	r4, r0
   371b6:	f7f2 fde3 	bl	29d80 <nrf_modem_platform_fd_method_table_get>
   371ba:	b120      	cbz	r0, 371c6 <nrf_close+0x14>
   371bc:	6843      	ldr	r3, [r0, #4]
   371be:	4620      	mov	r0, r4
   371c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   371c4:	4718      	bx	r3
   371c6:	f04f 30ff 	mov.w	r0, #4294967295
   371ca:	bd10      	pop	{r4, pc}

000371cc <nrf_sendto>:
   371cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   371d0:	4604      	mov	r4, r0
   371d2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   371d6:	460d      	mov	r5, r1
   371d8:	4616      	mov	r6, r2
   371da:	461f      	mov	r7, r3
   371dc:	f7f2 fdd0 	bl	29d80 <nrf_modem_platform_fd_method_table_get>
   371e0:	b158      	cbz	r0, 371fa <nrf_sendto+0x2e>
   371e2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   371e6:	f8d0 e008 	ldr.w	lr, [r0, #8]
   371ea:	463b      	mov	r3, r7
   371ec:	4632      	mov	r2, r6
   371ee:	4629      	mov	r1, r5
   371f0:	4620      	mov	r0, r4
   371f2:	46f4      	mov	ip, lr
   371f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   371f8:	4760      	bx	ip
   371fa:	f04f 30ff 	mov.w	r0, #4294967295
   371fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00037202 <nrf_recvfrom>:
   37202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37206:	4604      	mov	r4, r0
   37208:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3720c:	460d      	mov	r5, r1
   3720e:	4616      	mov	r6, r2
   37210:	461f      	mov	r7, r3
   37212:	f7f2 fdb5 	bl	29d80 <nrf_modem_platform_fd_method_table_get>
   37216:	b158      	cbz	r0, 37230 <nrf_recvfrom+0x2e>
   37218:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3721c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   37220:	463b      	mov	r3, r7
   37222:	4632      	mov	r2, r6
   37224:	4629      	mov	r1, r5
   37226:	4620      	mov	r0, r4
   37228:	46f4      	mov	ip, lr
   3722a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3722e:	4760      	bx	ip
   37230:	f04f 30ff 	mov.w	r0, #4294967295
   37234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00037238 <nrf_connect>:
   37238:	b570      	push	{r4, r5, r6, lr}
   3723a:	4604      	mov	r4, r0
   3723c:	460d      	mov	r5, r1
   3723e:	4616      	mov	r6, r2
   37240:	f7f2 fd9e 	bl	29d80 <nrf_modem_platform_fd_method_table_get>
   37244:	b130      	cbz	r0, 37254 <nrf_connect+0x1c>
   37246:	4632      	mov	r2, r6
   37248:	4629      	mov	r1, r5
   3724a:	6943      	ldr	r3, [r0, #20]
   3724c:	4620      	mov	r0, r4
   3724e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   37252:	4718      	bx	r3
   37254:	f04f 30ff 	mov.w	r0, #4294967295
   37258:	bd70      	pop	{r4, r5, r6, pc}

0003725a <nrf_listen>:
   3725a:	b570      	push	{r4, r5, r6, lr}
   3725c:	4604      	mov	r4, r0
   3725e:	460d      	mov	r5, r1
   37260:	f7f2 fd8e 	bl	29d80 <nrf_modem_platform_fd_method_table_get>
   37264:	b128      	cbz	r0, 37272 <nrf_listen+0x18>
   37266:	4629      	mov	r1, r5
   37268:	6983      	ldr	r3, [r0, #24]
   3726a:	4620      	mov	r0, r4
   3726c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   37270:	4718      	bx	r3
   37272:	f04f 30ff 	mov.w	r0, #4294967295
   37276:	bd70      	pop	{r4, r5, r6, pc}

00037278 <nrf_accept>:
   37278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3727c:	4604      	mov	r4, r0
   3727e:	460d      	mov	r5, r1
   37280:	4616      	mov	r6, r2
   37282:	f7f2 fd7d 	bl	29d80 <nrf_modem_platform_fd_method_table_get>
   37286:	b140      	cbz	r0, 3729a <nrf_accept+0x22>
   37288:	69c7      	ldr	r7, [r0, #28]
   3728a:	4632      	mov	r2, r6
   3728c:	4629      	mov	r1, r5
   3728e:	4620      	mov	r0, r4
   37290:	46bc      	mov	ip, r7
   37292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   37296:	2300      	movs	r3, #0
   37298:	4760      	bx	ip
   3729a:	f04f 30ff 	mov.w	r0, #4294967295
   3729e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000372a2 <nrf_bind>:
   372a2:	b570      	push	{r4, r5, r6, lr}
   372a4:	4604      	mov	r4, r0
   372a6:	460d      	mov	r5, r1
   372a8:	4616      	mov	r6, r2
   372aa:	f7f2 fd69 	bl	29d80 <nrf_modem_platform_fd_method_table_get>
   372ae:	b130      	cbz	r0, 372be <nrf_bind+0x1c>
   372b0:	4632      	mov	r2, r6
   372b2:	4629      	mov	r1, r5
   372b4:	6903      	ldr	r3, [r0, #16]
   372b6:	4620      	mov	r0, r4
   372b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   372bc:	4718      	bx	r3
   372be:	f04f 30ff 	mov.w	r0, #4294967295
   372c2:	bd70      	pop	{r4, r5, r6, pc}

000372c4 <nrf_setsockopt>:
   372c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   372c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   372cc:	4604      	mov	r4, r0
   372ce:	460d      	mov	r5, r1
   372d0:	4616      	mov	r6, r2
   372d2:	461f      	mov	r7, r3
   372d4:	f7f2 fd54 	bl	29d80 <nrf_modem_platform_fd_method_table_get>
   372d8:	b158      	cbz	r0, 372f2 <nrf_setsockopt+0x2e>
   372da:	f8cd 8018 	str.w	r8, [sp, #24]
   372de:	f8d0 e020 	ldr.w	lr, [r0, #32]
   372e2:	463b      	mov	r3, r7
   372e4:	4632      	mov	r2, r6
   372e6:	4629      	mov	r1, r5
   372e8:	4620      	mov	r0, r4
   372ea:	46f4      	mov	ip, lr
   372ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   372f0:	4760      	bx	ip
   372f2:	f04f 30ff 	mov.w	r0, #4294967295
   372f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000372fa <nrf_getsockopt>:
   372fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   372fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   37302:	4604      	mov	r4, r0
   37304:	460d      	mov	r5, r1
   37306:	4616      	mov	r6, r2
   37308:	461f      	mov	r7, r3
   3730a:	f7f2 fd39 	bl	29d80 <nrf_modem_platform_fd_method_table_get>
   3730e:	b158      	cbz	r0, 37328 <nrf_getsockopt+0x2e>
   37310:	f8cd 8018 	str.w	r8, [sp, #24]
   37314:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   37318:	463b      	mov	r3, r7
   3731a:	4632      	mov	r2, r6
   3731c:	4629      	mov	r1, r5
   3731e:	4620      	mov	r0, r4
   37320:	46f4      	mov	ip, lr
   37322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   37326:	4760      	bx	ip
   37328:	f04f 30ff 	mov.w	r0, #4294967295
   3732c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00037330 <nrf_getaddrinfo>:
   37330:	f7ff beff 	b.w	37132 <nrf_modem_platform_getaddrinfo>

00037334 <nrf_freeaddrinfo>:
   37334:	f7ff beff 	b.w	37136 <nrf_modem_platform_freeaddrinfo>

00037338 <nrf_poll>:
   37338:	f7ff beff 	b.w	3713a <nrf_modem_platform_poll>

0003733c <nrf_fcntl>:
   3733c:	f7f2 bd50 	b.w	29de0 <nrf_modem_platform_fcntl>

00037340 <linked_list_init>:
   37340:	4603      	mov	r3, r0
   37342:	b120      	cbz	r0, 3734e <linked_list_init+0xe>
   37344:	2000      	movs	r0, #0
   37346:	e9c3 0001 	strd	r0, r0, [r3, #4]
   3734a:	6018      	str	r0, [r3, #0]
   3734c:	4770      	bx	lr
   3734e:	2016      	movs	r0, #22
   37350:	4770      	bx	lr

00037352 <linked_list_push>:
   37352:	6803      	ldr	r3, [r0, #0]
   37354:	3301      	adds	r3, #1
   37356:	d00d      	beq.n	37374 <linked_list_push+0x22>
   37358:	2300      	movs	r3, #0
   3735a:	600b      	str	r3, [r1, #0]
   3735c:	6803      	ldr	r3, [r0, #0]
   3735e:	b933      	cbnz	r3, 3736e <linked_list_push+0x1c>
   37360:	6041      	str	r1, [r0, #4]
   37362:	6803      	ldr	r3, [r0, #0]
   37364:	6081      	str	r1, [r0, #8]
   37366:	3301      	adds	r3, #1
   37368:	6003      	str	r3, [r0, #0]
   3736a:	2000      	movs	r0, #0
   3736c:	4770      	bx	lr
   3736e:	6883      	ldr	r3, [r0, #8]
   37370:	6019      	str	r1, [r3, #0]
   37372:	e7f6      	b.n	37362 <linked_list_push+0x10>
   37374:	200c      	movs	r0, #12
   37376:	4770      	bx	lr

00037378 <linked_list_pop>:
   37378:	4603      	mov	r3, r0
   3737a:	6800      	ldr	r0, [r0, #0]
   3737c:	b128      	cbz	r0, 3738a <linked_list_pop+0x12>
   3737e:	6858      	ldr	r0, [r3, #4]
   37380:	6802      	ldr	r2, [r0, #0]
   37382:	605a      	str	r2, [r3, #4]
   37384:	681a      	ldr	r2, [r3, #0]
   37386:	3a01      	subs	r2, #1
   37388:	601a      	str	r2, [r3, #0]
   3738a:	4770      	bx	lr

0003738c <linked_list_peek>:
   3738c:	4603      	mov	r3, r0
   3738e:	6800      	ldr	r0, [r0, #0]
   37390:	b100      	cbz	r0, 37394 <linked_list_peek+0x8>
   37392:	6858      	ldr	r0, [r3, #4]
   37394:	4770      	bx	lr

00037396 <linked_list_size_get>:
   37396:	6800      	ldr	r0, [r0, #0]
   37398:	4770      	bx	lr

0003739a <linked_list_get_next>:
   3739a:	6800      	ldr	r0, [r0, #0]
   3739c:	4770      	bx	lr

0003739e <z_device_state_init>:
}
   3739e:	4770      	bx	lr

000373a0 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   373a0:	68c3      	ldr	r3, [r0, #12]
   373a2:	8818      	ldrh	r0, [r3, #0]
   373a4:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   373a8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   373ac:	4258      	negs	r0, r3
   373ae:	4158      	adcs	r0, r3
   373b0:	4770      	bx	lr

000373b2 <k_heap_init>:
{
   373b2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   373b4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   373b8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   373bc:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   373be:	f7dc bebf 	b.w	14140 <sys_heap_init>

000373c2 <k_heap_alloc>:
{
   373c2:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   373c4:	e9cd 2300 	strd	r2, r3, [sp]
   373c8:	460a      	mov	r2, r1
   373ca:	2104      	movs	r1, #4
   373cc:	f7f2 fed6 	bl	2a17c <k_heap_aligned_alloc>
}
   373d0:	b003      	add	sp, #12
   373d2:	f85d fb04 	ldr.w	pc, [sp], #4

000373d6 <k_mem_slab_init>:
{
   373d6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   373d8:	2400      	movs	r4, #0
   373da:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   373dc:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   373de:	ea41 0402 	orr.w	r4, r1, r2
   373e2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   373e6:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   373ea:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   373ec:	d10c      	bne.n	37408 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   373ee:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   373f0:	42a3      	cmp	r3, r4
   373f2:	d103      	bne.n	373fc <k_mem_slab_init+0x26>
   373f4:	e9c0 0000 	strd	r0, r0, [r0]
}
   373f8:	2000      	movs	r0, #0
}
   373fa:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   373fc:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   373fe:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   37400:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   37402:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   37404:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   37406:	e7f3      	b.n	373f0 <k_mem_slab_init+0x1a>
		return -EINVAL;
   37408:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3740c:	e7f5      	b.n	373fa <k_mem_slab_init+0x24>

0003740e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3740e:	f3ef 8005 	mrs	r0, IPSR
}
   37412:	3800      	subs	r0, #0
   37414:	bf18      	it	ne
   37416:	2001      	movne	r0, #1
   37418:	4770      	bx	lr

0003741a <z_impl_k_thread_name_set>:
}
   3741a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3741e:	4770      	bx	lr

00037420 <k_thread_name_get>:
}
   37420:	2000      	movs	r0, #0
   37422:	4770      	bx	lr

00037424 <z_impl_k_thread_start>:
	z_sched_start(thread);
   37424:	f7f5 ba68 	b.w	2c8f8 <z_sched_start>

00037428 <z_pm_save_idle_exit>:
{
   37428:	b508      	push	{r3, lr}
	pm_system_resume();
   3742a:	f7de fd69 	bl	15f00 <pm_system_resume>
}
   3742e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   37432:	f7f9 bbee 	b.w	30c12 <sys_clock_idle_exit>

00037436 <z_impl_k_mutex_init>:
{
   37436:	4603      	mov	r3, r0
	mutex->owner = NULL;
   37438:	2000      	movs	r0, #0
   3743a:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   3743e:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   37442:	4770      	bx	lr

00037444 <z_queue_node_peek>:
{
   37444:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   37446:	4604      	mov	r4, r0
   37448:	b130      	cbz	r0, 37458 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3744a:	6802      	ldr	r2, [r0, #0]
   3744c:	0793      	lsls	r3, r2, #30
   3744e:	d003      	beq.n	37458 <z_queue_node_peek+0x14>
		ret = anode->data;
   37450:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   37452:	b109      	cbz	r1, 37458 <z_queue_node_peek+0x14>
			k_free(anode);
   37454:	f000 f954 	bl	37700 <k_free>
}
   37458:	4620      	mov	r0, r4
   3745a:	bd10      	pop	{r4, pc}

0003745c <z_impl_k_queue_init>:
	list->head = NULL;
   3745c:	2300      	movs	r3, #0
	list->tail = NULL;
   3745e:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   37462:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   37464:	f100 030c 	add.w	r3, r0, #12
   37468:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   3746c:	f100 0314 	add.w	r3, r0, #20
   37470:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   37474:	4770      	bx	lr

00037476 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   37476:	2301      	movs	r3, #1
{
   37478:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3747a:	9300      	str	r3, [sp, #0]
   3747c:	2300      	movs	r3, #0
{
   3747e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   37480:	4619      	mov	r1, r3
   37482:	f7f3 fd57 	bl	2af34 <queue_insert>
}
   37486:	b003      	add	sp, #12
   37488:	f85d fb04 	ldr.w	pc, [sp], #4

0003748c <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   3748c:	2300      	movs	r3, #0
{
   3748e:	b507      	push	{r0, r1, r2, lr}
   37490:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   37492:	9300      	str	r3, [sp, #0]
   37494:	4619      	mov	r1, r3
   37496:	f7f3 fd4d 	bl	2af34 <queue_insert>
}
   3749a:	b003      	add	sp, #12
   3749c:	f85d fb04 	ldr.w	pc, [sp], #4

000374a0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   374a0:	b15a      	cbz	r2, 374ba <z_impl_k_sem_init+0x1a>
   374a2:	428a      	cmp	r2, r1
   374a4:	d309      	bcc.n	374ba <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   374a6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   374aa:	e9c0 1202 	strd	r1, r2, [r0, #8]
   374ae:	e9c0 0000 	strd	r0, r0, [r0]
   374b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   374b6:	2000      	movs	r0, #0
   374b8:	4770      	bx	lr
		return -EINVAL;
   374ba:	f06f 0015 	mvn.w	r0, #21
}
   374be:	4770      	bx	lr

000374c0 <notify_queue_locked>:
	if (queue != NULL) {
   374c0:	b120      	cbz	r0, 374cc <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   374c2:	2200      	movs	r2, #0
   374c4:	3088      	adds	r0, #136	; 0x88
   374c6:	4611      	mov	r1, r2
   374c8:	f7f5 be5c 	b.w	2d184 <z_sched_wake>
}
   374cc:	4770      	bx	lr

000374ce <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   374ce:	68c3      	ldr	r3, [r0, #12]
{
   374d0:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   374d2:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   374d6:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   374da:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   374dc:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   374de:	d502      	bpl.n	374e6 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   374e0:	3010      	adds	r0, #16
   374e2:	f7f5 fff7 	bl	2d4d4 <z_abort_timeout>
}
   374e6:	4620      	mov	r0, r4
   374e8:	bd10      	pop	{r4, pc}

000374ea <cancel_async_locked>:
{
   374ea:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   374ec:	68c0      	ldr	r0, [r0, #12]
{
   374ee:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   374f0:	0784      	lsls	r4, r0, #30
   374f2:	f3c0 0140 	ubfx	r1, r0, #1, #1
   374f6:	d416      	bmi.n	37526 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   374f8:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   374fc:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   374fe:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   37500:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   37502:	d510      	bpl.n	37526 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   37504:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   37508:	b168      	cbz	r0, 37526 <cancel_async_locked+0x3c>
   3750a:	4283      	cmp	r3, r0
   3750c:	d11d      	bne.n	3754a <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   3750e:	6818      	ldr	r0, [r3, #0]
   37510:	b999      	cbnz	r1, 3753a <cancel_async_locked+0x50>
   37512:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   37516:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   3751a:	428b      	cmp	r3, r1
   3751c:	d101      	bne.n	37522 <cancel_async_locked+0x38>
	list->tail = node;
   3751e:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   37522:	2200      	movs	r2, #0
   37524:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   37526:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   37528:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   3752c:	bf1e      	ittt	ne
   3752e:	f042 0202 	orrne.w	r2, r2, #2
   37532:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   37534:	f002 000f 	andne.w	r0, r2, #15
}
   37538:	bd10      	pop	{r4, pc}
   3753a:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   3753c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   37540:	4283      	cmp	r3, r0
	list->tail = node;
   37542:	bf08      	it	eq
   37544:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   37548:	e7eb      	b.n	37522 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   3754a:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3754c:	6800      	ldr	r0, [r0, #0]
   3754e:	e7db      	b.n	37508 <cancel_async_locked+0x1e>

00037550 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   37550:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   37554:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   37558:	4283      	cmp	r3, r0
		return b2 - b1;
   3755a:	bf14      	ite	ne
   3755c:	1ac0      	subne	r0, r0, r3
	return 0;
   3755e:	2000      	moveq	r0, #0
}
   37560:	4770      	bx	lr

00037562 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   37562:	4603      	mov	r3, r0
   37564:	b920      	cbnz	r0, 37570 <z_reschedule_irqlock+0xe>
   37566:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   3756a:	b90a      	cbnz	r2, 37570 <z_reschedule_irqlock+0xe>
   3756c:	f7e0 b812 	b.w	17594 <arch_swap>
   37570:	f383 8811 	msr	BASEPRI, r3
   37574:	f3bf 8f6f 	isb	sy
}
   37578:	4770      	bx	lr

0003757a <z_reschedule_unlocked>:
	__asm__ volatile(
   3757a:	f04f 0320 	mov.w	r3, #32
   3757e:	f3ef 8011 	mrs	r0, BASEPRI
   37582:	f383 8811 	msr	BASEPRI, r3
   37586:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3758a:	f7ff bfea 	b.w	37562 <z_reschedule_irqlock>

0003758e <z_priq_dumb_best>:
{
   3758e:	4603      	mov	r3, r0
	return list->head == list;
   37590:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37592:	4283      	cmp	r3, r0
   37594:	d003      	beq.n	3759e <z_priq_dumb_best+0x10>
	if (n != NULL) {
   37596:	2800      	cmp	r0, #0
   37598:	bf38      	it	cc
   3759a:	2000      	movcc	r0, #0
   3759c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   3759e:	2000      	movs	r0, #0
}
   375a0:	4770      	bx	lr

000375a2 <z_unpend_all>:
{
   375a2:	b538      	push	{r3, r4, r5, lr}
   375a4:	4605      	mov	r5, r0
	int need_sched = 0;
   375a6:	2000      	movs	r0, #0
	return list->head == list;
   375a8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   375aa:	42a5      	cmp	r5, r4
   375ac:	d000      	beq.n	375b0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   375ae:	b904      	cbnz	r4, 375b2 <z_unpend_all+0x10>
}
   375b0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   375b2:	4620      	mov	r0, r4
   375b4:	f7f4 fddc 	bl	2c170 <z_unpend_thread>
		z_ready_thread(thread);
   375b8:	4620      	mov	r0, r4
   375ba:	f7f5 f955 	bl	2c868 <z_ready_thread>
		need_sched = 1;
   375be:	2001      	movs	r0, #1
   375c0:	e7f2      	b.n	375a8 <z_unpend_all+0x6>

000375c2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   375c2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   375c4:	f7f6 f936 	bl	2d834 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   375c8:	bd08      	pop	{r3, pc}

000375ca <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   375ca:	f7f6 b933 	b.w	2d834 <sys_clock_tick_get>

000375ce <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   375ce:	b108      	cbz	r0, 375d4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   375d0:	f7dd bb86 	b.w	14ce0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   375d4:	4770      	bx	lr

000375d6 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   375d6:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   375d8:	1c4b      	adds	r3, r1, #1
   375da:	bf08      	it	eq
   375dc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   375e0:	4604      	mov	r4, r0
   375e2:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   375e4:	d013      	beq.n	3760e <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   375e6:	ea54 0105 	orrs.w	r1, r4, r5
   375ea:	d103      	bne.n	375f4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   375ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   375f0:	f7f6 b920 	b.w	2d834 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   375f4:	f06f 0101 	mvn.w	r1, #1
   375f8:	1a0a      	subs	r2, r1, r0
   375fa:	f04f 31ff 	mov.w	r1, #4294967295
   375fe:	eb61 0305 	sbc.w	r3, r1, r5
   37602:	2a00      	cmp	r2, #0
   37604:	f173 0100 	sbcs.w	r1, r3, #0
   37608:	db02      	blt.n	37610 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   3760a:	4610      	mov	r0, r2
   3760c:	4619      	mov	r1, r3
}
   3760e:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   37610:	f7f6 f910 	bl	2d834 <sys_clock_tick_get>
   37614:	2c01      	cmp	r4, #1
   37616:	f175 0300 	sbcs.w	r3, r5, #0
   3761a:	bfbc      	itt	lt
   3761c:	2401      	movlt	r4, #1
   3761e:	2500      	movlt	r5, #0
   37620:	1820      	adds	r0, r4, r0
   37622:	eb45 0101 	adc.w	r1, r5, r1
   37626:	e7f2      	b.n	3760e <sys_clock_timeout_end_calc+0x38>

00037628 <k_timer_init>:
	timer->status = 0U;
   37628:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   3762a:	e9c0 1208 	strd	r1, r2, [r0, #32]
   3762e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   37632:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   37636:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   3763a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   3763c:	6343      	str	r3, [r0, #52]	; 0x34
}
   3763e:	4770      	bx	lr

00037640 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   37640:	b510      	push	{r4, lr}
   37642:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   37644:	f7f5 ff46 	bl	2d4d4 <z_abort_timeout>

	if (inactive) {
   37648:	b9b0      	cbnz	r0, 37678 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   3764a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3764c:	b10b      	cbz	r3, 37652 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3764e:	4620      	mov	r0, r4
   37650:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   37652:	f104 0018 	add.w	r0, r4, #24
   37656:	f7f5 fa9b 	bl	2cb90 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3765a:	b168      	cbz	r0, 37678 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   3765c:	f7f5 f904 	bl	2c868 <z_ready_thread>
   37660:	f04f 0320 	mov.w	r3, #32
   37664:	f3ef 8011 	mrs	r0, BASEPRI
   37668:	f383 8811 	msr	BASEPRI, r3
   3766c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   37670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37674:	f7ff bf75 	b.w	37562 <z_reschedule_irqlock>
   37678:	bd10      	pop	{r4, pc}

0003767a <add_event>:
{
   3767a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3767c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3767e:	e9d0 2300 	ldrd	r2, r3, [r0]
   37682:	4290      	cmp	r0, r2
   37684:	4604      	mov	r4, r0
   37686:	460d      	mov	r5, r1
   37688:	d105      	bne.n	37696 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   3768a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3768c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   37690:	601d      	str	r5, [r3, #0]
	list->tail = node;
   37692:	6065      	str	r5, [r4, #4]
}
   37694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   37696:	2b00      	cmp	r3, #0
   37698:	d0f7      	beq.n	3768a <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3769a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3769c:	b100      	cbz	r0, 376a0 <add_event+0x26>
   3769e:	3860      	subs	r0, #96	; 0x60
   376a0:	b107      	cbz	r7, 376a4 <add_event+0x2a>
   376a2:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   376a4:	4639      	mov	r1, r7
   376a6:	f7ff ff53 	bl	37550 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   376aa:	2800      	cmp	r0, #0
   376ac:	dced      	bgt.n	3768a <add_event+0x10>
	return list->head == list;
   376ae:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   376b0:	42b4      	cmp	r4, r6
   376b2:	d0ea      	beq.n	3768a <add_event+0x10>
   376b4:	2e00      	cmp	r6, #0
   376b6:	bf38      	it	cc
   376b8:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   376ba:	2e00      	cmp	r6, #0
   376bc:	d0e5      	beq.n	3768a <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   376be:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   376c0:	b101      	cbz	r1, 376c4 <add_event+0x4a>
   376c2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   376c4:	4638      	mov	r0, r7
   376c6:	f7ff ff43 	bl	37550 <z_sched_prio_cmp>
   376ca:	2800      	cmp	r0, #0
   376cc:	dd05      	ble.n	376da <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   376ce:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   376d0:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   376d4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   376d6:	6075      	str	r5, [r6, #4]
			return;
   376d8:	e7dc      	b.n	37694 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   376da:	6863      	ldr	r3, [r4, #4]
   376dc:	42b3      	cmp	r3, r6
   376de:	d0d4      	beq.n	3768a <add_event+0x10>
   376e0:	6836      	ldr	r6, [r6, #0]
   376e2:	e7ea      	b.n	376ba <add_event+0x40>

000376e4 <z_handle_obj_poll_events>:
{
   376e4:	4603      	mov	r3, r0
	return list->head == list;
   376e6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   376e8:	4283      	cmp	r3, r0
   376ea:	d008      	beq.n	376fe <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   376ec:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   376f0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   376f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   376f4:	2300      	movs	r3, #0
	node->prev = NULL;
   376f6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   376fa:	f7f6 bb63 	b.w	2ddc4 <signal_poll_event>
}
   376fe:	4770      	bx	lr

00037700 <k_free>:
	if (ptr != NULL) {
   37700:	b120      	cbz	r0, 3770c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   37702:	1f01      	subs	r1, r0, #4
   37704:	f850 0c04 	ldr.w	r0, [r0, #-4]
   37708:	f7f2 bde6 	b.w	2a2d8 <k_heap_free>
}
   3770c:	4770      	bx	lr

0003770e <k_malloc>:
{
   3770e:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   37710:	2004      	movs	r0, #4
   37712:	f7f6 bdbb 	b.w	2e28c <k_aligned_alloc>

00037716 <k_calloc>:
{
   37716:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   37718:	fb01 f500 	mul.w	r5, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   3771c:	b118      	cbz	r0, 37726 <k_calloc+0x10>
   3771e:	fbb5 f0f0 	udiv	r0, r5, r0
   37722:	4281      	cmp	r1, r0
   37724:	d10a      	bne.n	3773c <k_calloc+0x26>
	ret = k_malloc(bounds);
   37726:	4628      	mov	r0, r5
   37728:	f7ff fff1 	bl	3770e <k_malloc>
	if (ret != NULL) {
   3772c:	4604      	mov	r4, r0
   3772e:	b118      	cbz	r0, 37738 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   37730:	462a      	mov	r2, r5
   37732:	2100      	movs	r1, #0
   37734:	f000 f845 	bl	377c2 <memset>
}
   37738:	4620      	mov	r0, r4
   3773a:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3773c:	2400      	movs	r4, #0
   3773e:	e7fb      	b.n	37738 <k_calloc+0x22>

00037740 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   37740:	4770      	bx	lr

00037742 <atoi>:
   37742:	220a      	movs	r2, #10
   37744:	2100      	movs	r1, #0
   37746:	f7f7 bce9 	b.w	2f11c <strtol>

0003774a <memchr>:
   3774a:	b2c9      	uxtb	r1, r1
   3774c:	4603      	mov	r3, r0
   3774e:	4402      	add	r2, r0
   37750:	b510      	push	{r4, lr}
   37752:	4293      	cmp	r3, r2
   37754:	4618      	mov	r0, r3
   37756:	d101      	bne.n	3775c <memchr+0x12>
   37758:	2000      	movs	r0, #0
   3775a:	e003      	b.n	37764 <memchr+0x1a>
   3775c:	7804      	ldrb	r4, [r0, #0]
   3775e:	3301      	adds	r3, #1
   37760:	428c      	cmp	r4, r1
   37762:	d1f6      	bne.n	37752 <memchr+0x8>
   37764:	bd10      	pop	{r4, pc}

00037766 <memcmp>:
   37766:	b530      	push	{r4, r5, lr}
   37768:	3901      	subs	r1, #1
   3776a:	2400      	movs	r4, #0
   3776c:	42a2      	cmp	r2, r4
   3776e:	d101      	bne.n	37774 <memcmp+0xe>
   37770:	2000      	movs	r0, #0
   37772:	e005      	b.n	37780 <memcmp+0x1a>
   37774:	5d03      	ldrb	r3, [r0, r4]
   37776:	3401      	adds	r4, #1
   37778:	5d0d      	ldrb	r5, [r1, r4]
   3777a:	42ab      	cmp	r3, r5
   3777c:	d0f6      	beq.n	3776c <memcmp+0x6>
   3777e:	1b58      	subs	r0, r3, r5
   37780:	bd30      	pop	{r4, r5, pc}

00037782 <memcpy>:
   37782:	440a      	add	r2, r1
   37784:	1e43      	subs	r3, r0, #1
   37786:	4291      	cmp	r1, r2
   37788:	d100      	bne.n	3778c <memcpy+0xa>
   3778a:	4770      	bx	lr
   3778c:	b510      	push	{r4, lr}
   3778e:	f811 4b01 	ldrb.w	r4, [r1], #1
   37792:	4291      	cmp	r1, r2
   37794:	f803 4f01 	strb.w	r4, [r3, #1]!
   37798:	d1f9      	bne.n	3778e <memcpy+0xc>
   3779a:	bd10      	pop	{r4, pc}

0003779c <__memcpy_chk>:
   3779c:	429a      	cmp	r2, r3
   3779e:	b508      	push	{r3, lr}
   377a0:	d901      	bls.n	377a6 <__memcpy_chk+0xa>
   377a2:	f7e0 fd8b 	bl	182bc <__chk_fail>
   377a6:	4281      	cmp	r1, r0
   377a8:	d804      	bhi.n	377b4 <__memcpy_chk+0x18>
   377aa:	188b      	adds	r3, r1, r2
   377ac:	4298      	cmp	r0, r3
   377ae:	d3f8      	bcc.n	377a2 <__memcpy_chk+0x6>
   377b0:	4281      	cmp	r1, r0
   377b2:	d102      	bne.n	377ba <__memcpy_chk+0x1e>
   377b4:	1883      	adds	r3, r0, r2
   377b6:	4299      	cmp	r1, r3
   377b8:	d3f3      	bcc.n	377a2 <__memcpy_chk+0x6>
   377ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   377be:	f7ff bfe0 	b.w	37782 <memcpy>

000377c2 <memset>:
   377c2:	4402      	add	r2, r0
   377c4:	4603      	mov	r3, r0
   377c6:	4293      	cmp	r3, r2
   377c8:	d100      	bne.n	377cc <memset+0xa>
   377ca:	4770      	bx	lr
   377cc:	f803 1b01 	strb.w	r1, [r3], #1
   377d0:	e7f9      	b.n	377c6 <memset+0x4>

000377d2 <__cvt>:
   377d2:	2b00      	cmp	r3, #0
   377d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   377d8:	461f      	mov	r7, r3
   377da:	b088      	sub	sp, #32
   377dc:	bfb4      	ite	lt
   377de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   377e2:	2300      	movge	r3, #0
   377e4:	4614      	mov	r4, r2
   377e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   377e8:	bfbc      	itt	lt
   377ea:	461f      	movlt	r7, r3
   377ec:	232d      	movlt	r3, #45	; 0x2d
   377ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
   377f0:	7013      	strb	r3, [r2, #0]
   377f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   377f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   377f8:	f023 0820 	bic.w	r8, r3, #32
   377fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   37800:	d005      	beq.n	3780e <__cvt+0x3c>
   37802:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   37806:	d100      	bne.n	3780a <__cvt+0x38>
   37808:	3501      	adds	r5, #1
   3780a:	2302      	movs	r3, #2
   3780c:	e000      	b.n	37810 <__cvt+0x3e>
   3780e:	2303      	movs	r3, #3
   37810:	aa07      	add	r2, sp, #28
   37812:	9204      	str	r2, [sp, #16]
   37814:	aa06      	add	r2, sp, #24
   37816:	e9cd 3500 	strd	r3, r5, [sp]
   3781a:	e9cd a202 	strd	sl, r2, [sp, #8]
   3781e:	463b      	mov	r3, r7
   37820:	4622      	mov	r2, r4
   37822:	f7da f83d 	bl	118a0 <_dtoa_r>
   37826:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   3782a:	4606      	mov	r6, r0
   3782c:	d102      	bne.n	37834 <__cvt+0x62>
   3782e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   37830:	07db      	lsls	r3, r3, #31
   37832:	d522      	bpl.n	3787a <__cvt+0xa8>
   37834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   37838:	eb06 0905 	add.w	r9, r6, r5
   3783c:	d110      	bne.n	37860 <__cvt+0x8e>
   3783e:	7833      	ldrb	r3, [r6, #0]
   37840:	2b30      	cmp	r3, #48	; 0x30
   37842:	d10a      	bne.n	3785a <__cvt+0x88>
   37844:	2200      	movs	r2, #0
   37846:	2300      	movs	r3, #0
   37848:	4620      	mov	r0, r4
   3784a:	4639      	mov	r1, r7
   3784c:	f7d9 f91c 	bl	10a88 <__aeabi_dcmpeq>
   37850:	b918      	cbnz	r0, 3785a <__cvt+0x88>
   37852:	f1c5 0501 	rsb	r5, r5, #1
   37856:	f8ca 5000 	str.w	r5, [sl]
   3785a:	f8da 3000 	ldr.w	r3, [sl]
   3785e:	4499      	add	r9, r3
   37860:	2200      	movs	r2, #0
   37862:	2300      	movs	r3, #0
   37864:	4620      	mov	r0, r4
   37866:	4639      	mov	r1, r7
   37868:	f7d9 f90e 	bl	10a88 <__aeabi_dcmpeq>
   3786c:	b108      	cbz	r0, 37872 <__cvt+0xa0>
   3786e:	f8cd 901c 	str.w	r9, [sp, #28]
   37872:	2230      	movs	r2, #48	; 0x30
   37874:	9b07      	ldr	r3, [sp, #28]
   37876:	454b      	cmp	r3, r9
   37878:	d307      	bcc.n	3788a <__cvt+0xb8>
   3787a:	9b07      	ldr	r3, [sp, #28]
   3787c:	4630      	mov	r0, r6
   3787e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   37880:	1b9b      	subs	r3, r3, r6
   37882:	6013      	str	r3, [r2, #0]
   37884:	b008      	add	sp, #32
   37886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3788a:	1c59      	adds	r1, r3, #1
   3788c:	9107      	str	r1, [sp, #28]
   3788e:	701a      	strb	r2, [r3, #0]
   37890:	e7f0      	b.n	37874 <__cvt+0xa2>

00037892 <__exponent>:
   37892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37894:	2900      	cmp	r1, #0
   37896:	4603      	mov	r3, r0
   37898:	bfb8      	it	lt
   3789a:	4249      	neglt	r1, r1
   3789c:	f803 2b02 	strb.w	r2, [r3], #2
   378a0:	bfb4      	ite	lt
   378a2:	222d      	movlt	r2, #45	; 0x2d
   378a4:	222b      	movge	r2, #43	; 0x2b
   378a6:	2909      	cmp	r1, #9
   378a8:	7042      	strb	r2, [r0, #1]
   378aa:	dd2a      	ble.n	37902 <__exponent+0x70>
   378ac:	f10d 0407 	add.w	r4, sp, #7
   378b0:	270a      	movs	r7, #10
   378b2:	46a4      	mov	ip, r4
   378b4:	460a      	mov	r2, r1
   378b6:	46a6      	mov	lr, r4
   378b8:	3c01      	subs	r4, #1
   378ba:	2a63      	cmp	r2, #99	; 0x63
   378bc:	fb91 f6f7 	sdiv	r6, r1, r7
   378c0:	fb07 1516 	mls	r5, r7, r6, r1
   378c4:	4631      	mov	r1, r6
   378c6:	f105 0530 	add.w	r5, r5, #48	; 0x30
   378ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
   378ce:	dcf1      	bgt.n	378b4 <__exponent+0x22>
   378d0:	3130      	adds	r1, #48	; 0x30
   378d2:	f1ae 0502 	sub.w	r5, lr, #2
   378d6:	f804 1c01 	strb.w	r1, [r4, #-1]
   378da:	1c44      	adds	r4, r0, #1
   378dc:	4629      	mov	r1, r5
   378de:	4561      	cmp	r1, ip
   378e0:	d30a      	bcc.n	378f8 <__exponent+0x66>
   378e2:	f10d 0209 	add.w	r2, sp, #9
   378e6:	eba2 020e 	sub.w	r2, r2, lr
   378ea:	4565      	cmp	r5, ip
   378ec:	bf88      	it	hi
   378ee:	2200      	movhi	r2, #0
   378f0:	4413      	add	r3, r2
   378f2:	1a18      	subs	r0, r3, r0
   378f4:	b003      	add	sp, #12
   378f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   378f8:	f811 2b01 	ldrb.w	r2, [r1], #1
   378fc:	f804 2f01 	strb.w	r2, [r4, #1]!
   37900:	e7ed      	b.n	378de <__exponent+0x4c>
   37902:	2330      	movs	r3, #48	; 0x30
   37904:	3130      	adds	r1, #48	; 0x30
   37906:	7083      	strb	r3, [r0, #2]
   37908:	1d03      	adds	r3, r0, #4
   3790a:	70c1      	strb	r1, [r0, #3]
   3790c:	e7f1      	b.n	378f2 <__exponent+0x60>

0003790e <_printf_common>:
   3790e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37912:	4616      	mov	r6, r2
   37914:	4699      	mov	r9, r3
   37916:	688a      	ldr	r2, [r1, #8]
   37918:	4607      	mov	r7, r0
   3791a:	690b      	ldr	r3, [r1, #16]
   3791c:	460c      	mov	r4, r1
   3791e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   37922:	4293      	cmp	r3, r2
   37924:	bfb8      	it	lt
   37926:	4613      	movlt	r3, r2
   37928:	6033      	str	r3, [r6, #0]
   3792a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3792e:	b10a      	cbz	r2, 37934 <_printf_common+0x26>
   37930:	3301      	adds	r3, #1
   37932:	6033      	str	r3, [r6, #0]
   37934:	6823      	ldr	r3, [r4, #0]
   37936:	0699      	lsls	r1, r3, #26
   37938:	bf42      	ittt	mi
   3793a:	6833      	ldrmi	r3, [r6, #0]
   3793c:	3302      	addmi	r3, #2
   3793e:	6033      	strmi	r3, [r6, #0]
   37940:	6825      	ldr	r5, [r4, #0]
   37942:	f015 0506 	ands.w	r5, r5, #6
   37946:	d106      	bne.n	37956 <_printf_common+0x48>
   37948:	f104 0a19 	add.w	sl, r4, #25
   3794c:	68e3      	ldr	r3, [r4, #12]
   3794e:	6832      	ldr	r2, [r6, #0]
   37950:	1a9b      	subs	r3, r3, r2
   37952:	42ab      	cmp	r3, r5
   37954:	dc29      	bgt.n	379aa <_printf_common+0x9c>
   37956:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   3795a:	1e13      	subs	r3, r2, #0
   3795c:	6822      	ldr	r2, [r4, #0]
   3795e:	bf18      	it	ne
   37960:	2301      	movne	r3, #1
   37962:	0692      	lsls	r2, r2, #26
   37964:	d42e      	bmi.n	379c4 <_printf_common+0xb6>
   37966:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3796a:	4649      	mov	r1, r9
   3796c:	4638      	mov	r0, r7
   3796e:	47c0      	blx	r8
   37970:	3001      	adds	r0, #1
   37972:	d021      	beq.n	379b8 <_printf_common+0xaa>
   37974:	6823      	ldr	r3, [r4, #0]
   37976:	341a      	adds	r4, #26
   37978:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   3797c:	f003 0306 	and.w	r3, r3, #6
   37980:	6832      	ldr	r2, [r6, #0]
   37982:	2600      	movs	r6, #0
   37984:	2b04      	cmp	r3, #4
   37986:	f854 3c12 	ldr.w	r3, [r4, #-18]
   3798a:	bf08      	it	eq
   3798c:	1aad      	subeq	r5, r5, r2
   3798e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   37992:	bf14      	ite	ne
   37994:	2500      	movne	r5, #0
   37996:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3799a:	4293      	cmp	r3, r2
   3799c:	bfc4      	itt	gt
   3799e:	1a9b      	subgt	r3, r3, r2
   379a0:	18ed      	addgt	r5, r5, r3
   379a2:	42b5      	cmp	r5, r6
   379a4:	d11a      	bne.n	379dc <_printf_common+0xce>
   379a6:	2000      	movs	r0, #0
   379a8:	e008      	b.n	379bc <_printf_common+0xae>
   379aa:	2301      	movs	r3, #1
   379ac:	4652      	mov	r2, sl
   379ae:	4649      	mov	r1, r9
   379b0:	4638      	mov	r0, r7
   379b2:	47c0      	blx	r8
   379b4:	3001      	adds	r0, #1
   379b6:	d103      	bne.n	379c0 <_printf_common+0xb2>
   379b8:	f04f 30ff 	mov.w	r0, #4294967295
   379bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   379c0:	3501      	adds	r5, #1
   379c2:	e7c3      	b.n	3794c <_printf_common+0x3e>
   379c4:	18e1      	adds	r1, r4, r3
   379c6:	1c5a      	adds	r2, r3, #1
   379c8:	2030      	movs	r0, #48	; 0x30
   379ca:	3302      	adds	r3, #2
   379cc:	4422      	add	r2, r4
   379ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   379d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   379d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   379da:	e7c4      	b.n	37966 <_printf_common+0x58>
   379dc:	2301      	movs	r3, #1
   379de:	4622      	mov	r2, r4
   379e0:	4649      	mov	r1, r9
   379e2:	4638      	mov	r0, r7
   379e4:	47c0      	blx	r8
   379e6:	3001      	adds	r0, #1
   379e8:	d0e6      	beq.n	379b8 <_printf_common+0xaa>
   379ea:	3601      	adds	r6, #1
   379ec:	e7d9      	b.n	379a2 <_printf_common+0x94>

000379ee <__seofread>:
   379ee:	2000      	movs	r0, #0
   379f0:	4770      	bx	lr

000379f2 <strchr>:
   379f2:	b2c9      	uxtb	r1, r1
   379f4:	4603      	mov	r3, r0
   379f6:	4618      	mov	r0, r3
   379f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   379fc:	b112      	cbz	r2, 37a04 <strchr+0x12>
   379fe:	428a      	cmp	r2, r1
   37a00:	d1f9      	bne.n	379f6 <strchr+0x4>
   37a02:	4770      	bx	lr
   37a04:	2900      	cmp	r1, #0
   37a06:	bf18      	it	ne
   37a08:	2000      	movne	r0, #0
   37a0a:	4770      	bx	lr

00037a0c <strcpy>:
   37a0c:	4603      	mov	r3, r0
   37a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
   37a12:	f803 2b01 	strb.w	r2, [r3], #1
   37a16:	2a00      	cmp	r2, #0
   37a18:	d1f9      	bne.n	37a0e <strcpy+0x2>
   37a1a:	4770      	bx	lr

00037a1c <strncmp>:
   37a1c:	b510      	push	{r4, lr}
   37a1e:	b16a      	cbz	r2, 37a3c <strncmp+0x20>
   37a20:	3901      	subs	r1, #1
   37a22:	1884      	adds	r4, r0, r2
   37a24:	f810 3b01 	ldrb.w	r3, [r0], #1
   37a28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   37a2c:	4293      	cmp	r3, r2
   37a2e:	d103      	bne.n	37a38 <strncmp+0x1c>
   37a30:	42a0      	cmp	r0, r4
   37a32:	d001      	beq.n	37a38 <strncmp+0x1c>
   37a34:	2b00      	cmp	r3, #0
   37a36:	d1f5      	bne.n	37a24 <strncmp+0x8>
   37a38:	1a98      	subs	r0, r3, r2
   37a3a:	bd10      	pop	{r4, pc}
   37a3c:	4610      	mov	r0, r2
   37a3e:	e7fc      	b.n	37a3a <strncmp+0x1e>

00037a40 <strncpy>:
   37a40:	3901      	subs	r1, #1
   37a42:	4603      	mov	r3, r0
   37a44:	b510      	push	{r4, lr}
   37a46:	b132      	cbz	r2, 37a56 <strncpy+0x16>
   37a48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   37a4c:	3a01      	subs	r2, #1
   37a4e:	f803 4b01 	strb.w	r4, [r3], #1
   37a52:	2c00      	cmp	r4, #0
   37a54:	d1f7      	bne.n	37a46 <strncpy+0x6>
   37a56:	441a      	add	r2, r3
   37a58:	2100      	movs	r1, #0
   37a5a:	4293      	cmp	r3, r2
   37a5c:	d100      	bne.n	37a60 <strncpy+0x20>
   37a5e:	bd10      	pop	{r4, pc}
   37a60:	f803 1b01 	strb.w	r1, [r3], #1
   37a64:	e7f9      	b.n	37a5a <strncpy+0x1a>

00037a66 <strnlen>:
   37a66:	4602      	mov	r2, r0
   37a68:	4401      	add	r1, r0
   37a6a:	b510      	push	{r4, lr}
   37a6c:	428a      	cmp	r2, r1
   37a6e:	4613      	mov	r3, r2
   37a70:	d101      	bne.n	37a76 <strnlen+0x10>
   37a72:	1a18      	subs	r0, r3, r0
   37a74:	bd10      	pop	{r4, pc}
   37a76:	781c      	ldrb	r4, [r3, #0]
   37a78:	3201      	adds	r2, #1
   37a7a:	2c00      	cmp	r4, #0
   37a7c:	d1f6      	bne.n	37a6c <strnlen+0x6>
   37a7e:	e7f8      	b.n	37a72 <strnlen+0xc>

00037a80 <strstr>:
   37a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   37a82:	780c      	ldrb	r4, [r1, #0]
   37a84:	b164      	cbz	r4, 37aa0 <strstr+0x20>
   37a86:	4603      	mov	r3, r0
   37a88:	781a      	ldrb	r2, [r3, #0]
   37a8a:	4618      	mov	r0, r3
   37a8c:	1c5e      	adds	r6, r3, #1
   37a8e:	b90a      	cbnz	r2, 37a94 <strstr+0x14>
   37a90:	4610      	mov	r0, r2
   37a92:	e005      	b.n	37aa0 <strstr+0x20>
   37a94:	4294      	cmp	r4, r2
   37a96:	d108      	bne.n	37aaa <strstr+0x2a>
   37a98:	460d      	mov	r5, r1
   37a9a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   37a9e:	b902      	cbnz	r2, 37aa2 <strstr+0x22>
   37aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37aa2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   37aa6:	4297      	cmp	r7, r2
   37aa8:	d0f7      	beq.n	37a9a <strstr+0x1a>
   37aaa:	4633      	mov	r3, r6
   37aac:	e7ec      	b.n	37a88 <strstr+0x8>

00037aae <_strtol_r>:
   37aae:	f7f7 babd 	b.w	2f02c <_strtol_l.isra.0>

00037ab2 <_strtoul_r>:
   37ab2:	f7f7 bbdd 	b.w	2f270 <_strtoul_l.isra.0>

00037ab6 <_user_strerror>:
   37ab6:	2000      	movs	r0, #0
   37ab8:	4770      	bx	lr

00037aba <quorem>:
   37aba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37abe:	6903      	ldr	r3, [r0, #16]
   37ac0:	4607      	mov	r7, r0
   37ac2:	690c      	ldr	r4, [r1, #16]
   37ac4:	42a3      	cmp	r3, r4
   37ac6:	f2c0 8085 	blt.w	37bd4 <quorem+0x11a>
   37aca:	3c01      	subs	r4, #1
   37acc:	f100 0514 	add.w	r5, r0, #20
   37ad0:	f101 0814 	add.w	r8, r1, #20
   37ad4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   37ad8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   37adc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   37ae0:	9301      	str	r3, [sp, #4]
   37ae2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   37ae6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   37aea:	3301      	adds	r3, #1
   37aec:	429a      	cmp	r2, r3
   37aee:	fbb2 f6f3 	udiv	r6, r2, r3
   37af2:	d333      	bcc.n	37b5c <quorem+0xa2>
   37af4:	f04f 0e00 	mov.w	lr, #0
   37af8:	4640      	mov	r0, r8
   37afa:	46ac      	mov	ip, r5
   37afc:	46f2      	mov	sl, lr
   37afe:	f850 2b04 	ldr.w	r2, [r0], #4
   37b02:	b293      	uxth	r3, r2
   37b04:	4581      	cmp	r9, r0
   37b06:	ea4f 4212 	mov.w	r2, r2, lsr #16
   37b0a:	fb06 e303 	mla	r3, r6, r3, lr
   37b0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   37b12:	b29b      	uxth	r3, r3
   37b14:	fb06 e202 	mla	r2, r6, r2, lr
   37b18:	ebaa 0303 	sub.w	r3, sl, r3
   37b1c:	f8dc a000 	ldr.w	sl, [ip]
   37b20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   37b24:	fa1f fa8a 	uxth.w	sl, sl
   37b28:	4453      	add	r3, sl
   37b2a:	fa1f fa82 	uxth.w	sl, r2
   37b2e:	f8dc 2000 	ldr.w	r2, [ip]
   37b32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   37b36:	eb02 4223 	add.w	r2, r2, r3, asr #16
   37b3a:	b29b      	uxth	r3, r3
   37b3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   37b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   37b44:	f84c 3b04 	str.w	r3, [ip], #4
   37b48:	d2d9      	bcs.n	37afe <quorem+0x44>
   37b4a:	f855 300b 	ldr.w	r3, [r5, fp]
   37b4e:	b92b      	cbnz	r3, 37b5c <quorem+0xa2>
   37b50:	9b01      	ldr	r3, [sp, #4]
   37b52:	3b04      	subs	r3, #4
   37b54:	429d      	cmp	r5, r3
   37b56:	461a      	mov	r2, r3
   37b58:	d330      	bcc.n	37bbc <quorem+0x102>
   37b5a:	613c      	str	r4, [r7, #16]
   37b5c:	4638      	mov	r0, r7
   37b5e:	f000 fa28 	bl	37fb2 <__mcmp>
   37b62:	2800      	cmp	r0, #0
   37b64:	db26      	blt.n	37bb4 <quorem+0xfa>
   37b66:	3601      	adds	r6, #1
   37b68:	4628      	mov	r0, r5
   37b6a:	f04f 0c00 	mov.w	ip, #0
   37b6e:	f858 1b04 	ldr.w	r1, [r8], #4
   37b72:	f8d0 e000 	ldr.w	lr, [r0]
   37b76:	b28b      	uxth	r3, r1
   37b78:	45c1      	cmp	r9, r8
   37b7a:	fa1f f28e 	uxth.w	r2, lr
   37b7e:	ebac 0303 	sub.w	r3, ip, r3
   37b82:	4413      	add	r3, r2
   37b84:	ea4f 4211 	mov.w	r2, r1, lsr #16
   37b88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   37b8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   37b90:	b29b      	uxth	r3, r3
   37b92:	ea4f 4c22 	mov.w	ip, r2, asr #16
   37b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   37b9a:	f840 3b04 	str.w	r3, [r0], #4
   37b9e:	d2e6      	bcs.n	37b6e <quorem+0xb4>
   37ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   37ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   37ba8:	b922      	cbnz	r2, 37bb4 <quorem+0xfa>
   37baa:	3b04      	subs	r3, #4
   37bac:	429d      	cmp	r5, r3
   37bae:	461a      	mov	r2, r3
   37bb0:	d30a      	bcc.n	37bc8 <quorem+0x10e>
   37bb2:	613c      	str	r4, [r7, #16]
   37bb4:	4630      	mov	r0, r6
   37bb6:	b003      	add	sp, #12
   37bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37bbc:	6812      	ldr	r2, [r2, #0]
   37bbe:	3b04      	subs	r3, #4
   37bc0:	2a00      	cmp	r2, #0
   37bc2:	d1ca      	bne.n	37b5a <quorem+0xa0>
   37bc4:	3c01      	subs	r4, #1
   37bc6:	e7c5      	b.n	37b54 <quorem+0x9a>
   37bc8:	6812      	ldr	r2, [r2, #0]
   37bca:	3b04      	subs	r3, #4
   37bcc:	2a00      	cmp	r2, #0
   37bce:	d1f0      	bne.n	37bb2 <quorem+0xf8>
   37bd0:	3c01      	subs	r4, #1
   37bd2:	e7eb      	b.n	37bac <quorem+0xf2>
   37bd4:	2000      	movs	r0, #0
   37bd6:	e7ee      	b.n	37bb6 <quorem+0xfc>

00037bd8 <__ascii_mbtowc>:
   37bd8:	b082      	sub	sp, #8
   37bda:	b901      	cbnz	r1, 37bde <__ascii_mbtowc+0x6>
   37bdc:	a901      	add	r1, sp, #4
   37bde:	b142      	cbz	r2, 37bf2 <__ascii_mbtowc+0x1a>
   37be0:	b14b      	cbz	r3, 37bf6 <__ascii_mbtowc+0x1e>
   37be2:	7813      	ldrb	r3, [r2, #0]
   37be4:	600b      	str	r3, [r1, #0]
   37be6:	7812      	ldrb	r2, [r2, #0]
   37be8:	1e10      	subs	r0, r2, #0
   37bea:	bf18      	it	ne
   37bec:	2001      	movne	r0, #1
   37bee:	b002      	add	sp, #8
   37bf0:	4770      	bx	lr
   37bf2:	4610      	mov	r0, r2
   37bf4:	e7fb      	b.n	37bee <__ascii_mbtowc+0x16>
   37bf6:	f06f 0001 	mvn.w	r0, #1
   37bfa:	e7f8      	b.n	37bee <__ascii_mbtowc+0x16>

00037bfc <_Balloc>:
   37bfc:	b570      	push	{r4, r5, r6, lr}
   37bfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   37c00:	4604      	mov	r4, r0
   37c02:	460d      	mov	r5, r1
   37c04:	b93e      	cbnz	r6, 37c16 <_Balloc+0x1a>
   37c06:	2010      	movs	r0, #16
   37c08:	f7f6 fba2 	bl	2e350 <malloc>
   37c0c:	6260      	str	r0, [r4, #36]	; 0x24
   37c0e:	6006      	str	r6, [r0, #0]
   37c10:	60c6      	str	r6, [r0, #12]
   37c12:	e9c0 6601 	strd	r6, r6, [r0, #4]
   37c16:	6a66      	ldr	r6, [r4, #36]	; 0x24
   37c18:	68f3      	ldr	r3, [r6, #12]
   37c1a:	b183      	cbz	r3, 37c3e <_Balloc+0x42>
   37c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   37c1e:	68db      	ldr	r3, [r3, #12]
   37c20:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   37c24:	b9b8      	cbnz	r0, 37c56 <_Balloc+0x5a>
   37c26:	2101      	movs	r1, #1
   37c28:	4620      	mov	r0, r4
   37c2a:	fa01 f605 	lsl.w	r6, r1, r5
   37c2e:	1d72      	adds	r2, r6, #5
   37c30:	0092      	lsls	r2, r2, #2
   37c32:	f000 faa5 	bl	38180 <_calloc_r>
   37c36:	b160      	cbz	r0, 37c52 <_Balloc+0x56>
   37c38:	e9c0 5601 	strd	r5, r6, [r0, #4]
   37c3c:	e00e      	b.n	37c5c <_Balloc+0x60>
   37c3e:	2221      	movs	r2, #33	; 0x21
   37c40:	2104      	movs	r1, #4
   37c42:	4620      	mov	r0, r4
   37c44:	f000 fa9c 	bl	38180 <_calloc_r>
   37c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   37c4a:	60f0      	str	r0, [r6, #12]
   37c4c:	68db      	ldr	r3, [r3, #12]
   37c4e:	2b00      	cmp	r3, #0
   37c50:	d1e4      	bne.n	37c1c <_Balloc+0x20>
   37c52:	2000      	movs	r0, #0
   37c54:	bd70      	pop	{r4, r5, r6, pc}
   37c56:	6802      	ldr	r2, [r0, #0]
   37c58:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   37c5c:	2300      	movs	r3, #0
   37c5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   37c62:	e7f7      	b.n	37c54 <_Balloc+0x58>

00037c64 <_Bfree>:
   37c64:	b570      	push	{r4, r5, r6, lr}
   37c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
   37c68:	4605      	mov	r5, r0
   37c6a:	460c      	mov	r4, r1
   37c6c:	b93e      	cbnz	r6, 37c7e <_Bfree+0x1a>
   37c6e:	2010      	movs	r0, #16
   37c70:	f7f6 fb6e 	bl	2e350 <malloc>
   37c74:	6268      	str	r0, [r5, #36]	; 0x24
   37c76:	6006      	str	r6, [r0, #0]
   37c78:	60c6      	str	r6, [r0, #12]
   37c7a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   37c7e:	b13c      	cbz	r4, 37c90 <_Bfree+0x2c>
   37c80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   37c82:	6862      	ldr	r2, [r4, #4]
   37c84:	68db      	ldr	r3, [r3, #12]
   37c86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   37c8a:	6021      	str	r1, [r4, #0]
   37c8c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   37c90:	bd70      	pop	{r4, r5, r6, pc}

00037c92 <__multadd>:
   37c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37c96:	4607      	mov	r7, r0
   37c98:	4698      	mov	r8, r3
   37c9a:	460c      	mov	r4, r1
   37c9c:	690e      	ldr	r6, [r1, #16]
   37c9e:	f101 0014 	add.w	r0, r1, #20
   37ca2:	2300      	movs	r3, #0
   37ca4:	6805      	ldr	r5, [r0, #0]
   37ca6:	3301      	adds	r3, #1
   37ca8:	b2a9      	uxth	r1, r5
   37caa:	429e      	cmp	r6, r3
   37cac:	ea4f 4515 	mov.w	r5, r5, lsr #16
   37cb0:	fb02 8101 	mla	r1, r2, r1, r8
   37cb4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   37cb8:	b289      	uxth	r1, r1
   37cba:	fb02 c505 	mla	r5, r2, r5, ip
   37cbe:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   37cc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
   37cc6:	f840 1b04 	str.w	r1, [r0], #4
   37cca:	dceb      	bgt.n	37ca4 <__multadd+0x12>
   37ccc:	f1b8 0f00 	cmp.w	r8, #0
   37cd0:	d01b      	beq.n	37d0a <__multadd+0x78>
   37cd2:	68a3      	ldr	r3, [r4, #8]
   37cd4:	42b3      	cmp	r3, r6
   37cd6:	dc12      	bgt.n	37cfe <__multadd+0x6c>
   37cd8:	6861      	ldr	r1, [r4, #4]
   37cda:	4638      	mov	r0, r7
   37cdc:	3101      	adds	r1, #1
   37cde:	f7ff ff8d 	bl	37bfc <_Balloc>
   37ce2:	6922      	ldr	r2, [r4, #16]
   37ce4:	4605      	mov	r5, r0
   37ce6:	f104 010c 	add.w	r1, r4, #12
   37cea:	3202      	adds	r2, #2
   37cec:	300c      	adds	r0, #12
   37cee:	0092      	lsls	r2, r2, #2
   37cf0:	f7ff fd47 	bl	37782 <memcpy>
   37cf4:	4621      	mov	r1, r4
   37cf6:	462c      	mov	r4, r5
   37cf8:	4638      	mov	r0, r7
   37cfa:	f7ff ffb3 	bl	37c64 <_Bfree>
   37cfe:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   37d02:	3601      	adds	r6, #1
   37d04:	f8c3 8014 	str.w	r8, [r3, #20]
   37d08:	6126      	str	r6, [r4, #16]
   37d0a:	4620      	mov	r0, r4
   37d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00037d10 <__hi0bits>:
   37d10:	0c02      	lsrs	r2, r0, #16
   37d12:	4603      	mov	r3, r0
   37d14:	0412      	lsls	r2, r2, #16
   37d16:	b9ca      	cbnz	r2, 37d4c <__hi0bits+0x3c>
   37d18:	0403      	lsls	r3, r0, #16
   37d1a:	2010      	movs	r0, #16
   37d1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   37d20:	bf04      	itt	eq
   37d22:	021b      	lsleq	r3, r3, #8
   37d24:	3008      	addeq	r0, #8
   37d26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   37d2a:	bf04      	itt	eq
   37d2c:	011b      	lsleq	r3, r3, #4
   37d2e:	3004      	addeq	r0, #4
   37d30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   37d34:	bf04      	itt	eq
   37d36:	009b      	lsleq	r3, r3, #2
   37d38:	3002      	addeq	r0, #2
   37d3a:	2b00      	cmp	r3, #0
   37d3c:	db05      	blt.n	37d4a <__hi0bits+0x3a>
   37d3e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   37d42:	f100 0001 	add.w	r0, r0, #1
   37d46:	bf08      	it	eq
   37d48:	2020      	moveq	r0, #32
   37d4a:	4770      	bx	lr
   37d4c:	2000      	movs	r0, #0
   37d4e:	e7e5      	b.n	37d1c <__hi0bits+0xc>

00037d50 <__lo0bits>:
   37d50:	6803      	ldr	r3, [r0, #0]
   37d52:	4602      	mov	r2, r0
   37d54:	f013 0007 	ands.w	r0, r3, #7
   37d58:	d00b      	beq.n	37d72 <__lo0bits+0x22>
   37d5a:	07d9      	lsls	r1, r3, #31
   37d5c:	d422      	bmi.n	37da4 <__lo0bits+0x54>
   37d5e:	0798      	lsls	r0, r3, #30
   37d60:	bf47      	ittee	mi
   37d62:	085b      	lsrmi	r3, r3, #1
   37d64:	2001      	movmi	r0, #1
   37d66:	089b      	lsrpl	r3, r3, #2
   37d68:	2002      	movpl	r0, #2
   37d6a:	bf4c      	ite	mi
   37d6c:	6013      	strmi	r3, [r2, #0]
   37d6e:	6013      	strpl	r3, [r2, #0]
   37d70:	4770      	bx	lr
   37d72:	b299      	uxth	r1, r3
   37d74:	b909      	cbnz	r1, 37d7a <__lo0bits+0x2a>
   37d76:	0c1b      	lsrs	r3, r3, #16
   37d78:	2010      	movs	r0, #16
   37d7a:	f013 0fff 	tst.w	r3, #255	; 0xff
   37d7e:	bf04      	itt	eq
   37d80:	0a1b      	lsreq	r3, r3, #8
   37d82:	3008      	addeq	r0, #8
   37d84:	0719      	lsls	r1, r3, #28
   37d86:	bf04      	itt	eq
   37d88:	091b      	lsreq	r3, r3, #4
   37d8a:	3004      	addeq	r0, #4
   37d8c:	0799      	lsls	r1, r3, #30
   37d8e:	bf04      	itt	eq
   37d90:	089b      	lsreq	r3, r3, #2
   37d92:	3002      	addeq	r0, #2
   37d94:	07d9      	lsls	r1, r3, #31
   37d96:	d403      	bmi.n	37da0 <__lo0bits+0x50>
   37d98:	085b      	lsrs	r3, r3, #1
   37d9a:	f100 0001 	add.w	r0, r0, #1
   37d9e:	d003      	beq.n	37da8 <__lo0bits+0x58>
   37da0:	6013      	str	r3, [r2, #0]
   37da2:	4770      	bx	lr
   37da4:	2000      	movs	r0, #0
   37da6:	4770      	bx	lr
   37da8:	2020      	movs	r0, #32
   37daa:	4770      	bx	lr

00037dac <__i2b>:
   37dac:	b510      	push	{r4, lr}
   37dae:	460c      	mov	r4, r1
   37db0:	2101      	movs	r1, #1
   37db2:	f7ff ff23 	bl	37bfc <_Balloc>
   37db6:	2201      	movs	r2, #1
   37db8:	6144      	str	r4, [r0, #20]
   37dba:	6102      	str	r2, [r0, #16]
   37dbc:	bd10      	pop	{r4, pc}

00037dbe <__multiply>:
   37dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37dc2:	4615      	mov	r5, r2
   37dc4:	690a      	ldr	r2, [r1, #16]
   37dc6:	460c      	mov	r4, r1
   37dc8:	b085      	sub	sp, #20
   37dca:	692b      	ldr	r3, [r5, #16]
   37dcc:	429a      	cmp	r2, r3
   37dce:	bfbe      	ittt	lt
   37dd0:	460b      	movlt	r3, r1
   37dd2:	462c      	movlt	r4, r5
   37dd4:	461d      	movlt	r5, r3
   37dd6:	6927      	ldr	r7, [r4, #16]
   37dd8:	68a3      	ldr	r3, [r4, #8]
   37dda:	f8d5 9010 	ldr.w	r9, [r5, #16]
   37dde:	6861      	ldr	r1, [r4, #4]
   37de0:	eb07 0609 	add.w	r6, r7, r9
   37de4:	42b3      	cmp	r3, r6
   37de6:	bfb8      	it	lt
   37de8:	3101      	addlt	r1, #1
   37dea:	f7ff ff07 	bl	37bfc <_Balloc>
   37dee:	f100 0114 	add.w	r1, r0, #20
   37df2:	2200      	movs	r2, #0
   37df4:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   37df8:	460b      	mov	r3, r1
   37dfa:	4543      	cmp	r3, r8
   37dfc:	d31d      	bcc.n	37e3a <__multiply+0x7c>
   37dfe:	f104 0314 	add.w	r3, r4, #20
   37e02:	f105 0214 	add.w	r2, r5, #20
   37e06:	f104 0515 	add.w	r5, r4, #21
   37e0a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   37e0e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   37e12:	9302      	str	r3, [sp, #8]
   37e14:	1b3b      	subs	r3, r7, r4
   37e16:	3b15      	subs	r3, #21
   37e18:	f023 0303 	bic.w	r3, r3, #3
   37e1c:	3304      	adds	r3, #4
   37e1e:	42af      	cmp	r7, r5
   37e20:	bf38      	it	cc
   37e22:	2304      	movcc	r3, #4
   37e24:	9301      	str	r3, [sp, #4]
   37e26:	9b02      	ldr	r3, [sp, #8]
   37e28:	9203      	str	r2, [sp, #12]
   37e2a:	4293      	cmp	r3, r2
   37e2c:	d808      	bhi.n	37e40 <__multiply+0x82>
   37e2e:	2e00      	cmp	r6, #0
   37e30:	dc5a      	bgt.n	37ee8 <__multiply+0x12a>
   37e32:	6106      	str	r6, [r0, #16]
   37e34:	b005      	add	sp, #20
   37e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e3a:	f843 2b04 	str.w	r2, [r3], #4
   37e3e:	e7dc      	b.n	37dfa <__multiply+0x3c>
   37e40:	f8b2 a000 	ldrh.w	sl, [r2]
   37e44:	f1ba 0f00 	cmp.w	sl, #0
   37e48:	d024      	beq.n	37e94 <__multiply+0xd6>
   37e4a:	f104 0e14 	add.w	lr, r4, #20
   37e4e:	4689      	mov	r9, r1
   37e50:	f04f 0c00 	mov.w	ip, #0
   37e54:	f85e 5b04 	ldr.w	r5, [lr], #4
   37e58:	f8d9 b000 	ldr.w	fp, [r9]
   37e5c:	b2ab      	uxth	r3, r5
   37e5e:	4577      	cmp	r7, lr
   37e60:	fa1f fb8b 	uxth.w	fp, fp
   37e64:	fb0a b303 	mla	r3, sl, r3, fp
   37e68:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   37e6c:	f8d9 5000 	ldr.w	r5, [r9]
   37e70:	4463      	add	r3, ip
   37e72:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   37e76:	fb0a c50b 	mla	r5, sl, fp, ip
   37e7a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   37e7e:	b29b      	uxth	r3, r3
   37e80:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   37e84:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   37e88:	f849 3b04 	str.w	r3, [r9], #4
   37e8c:	d8e2      	bhi.n	37e54 <__multiply+0x96>
   37e8e:	9b01      	ldr	r3, [sp, #4]
   37e90:	f841 c003 	str.w	ip, [r1, r3]
   37e94:	9b03      	ldr	r3, [sp, #12]
   37e96:	3204      	adds	r2, #4
   37e98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   37e9c:	f1b9 0f00 	cmp.w	r9, #0
   37ea0:	d020      	beq.n	37ee4 <__multiply+0x126>
   37ea2:	680b      	ldr	r3, [r1, #0]
   37ea4:	f104 0c14 	add.w	ip, r4, #20
   37ea8:	468e      	mov	lr, r1
   37eaa:	f04f 0a00 	mov.w	sl, #0
   37eae:	f8bc 5000 	ldrh.w	r5, [ip]
   37eb2:	b29b      	uxth	r3, r3
   37eb4:	f8be b002 	ldrh.w	fp, [lr, #2]
   37eb8:	fb09 b505 	mla	r5, r9, r5, fp
   37ebc:	44aa      	add	sl, r5
   37ebe:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   37ec2:	f84e 3b04 	str.w	r3, [lr], #4
   37ec6:	f85c 3b04 	ldr.w	r3, [ip], #4
   37eca:	f8be 5000 	ldrh.w	r5, [lr]
   37ece:	0c1b      	lsrs	r3, r3, #16
   37ed0:	4567      	cmp	r7, ip
   37ed2:	fb09 5303 	mla	r3, r9, r3, r5
   37ed6:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   37eda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   37ede:	d8e6      	bhi.n	37eae <__multiply+0xf0>
   37ee0:	9d01      	ldr	r5, [sp, #4]
   37ee2:	514b      	str	r3, [r1, r5]
   37ee4:	3104      	adds	r1, #4
   37ee6:	e79e      	b.n	37e26 <__multiply+0x68>
   37ee8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   37eec:	2b00      	cmp	r3, #0
   37eee:	d1a0      	bne.n	37e32 <__multiply+0x74>
   37ef0:	3e01      	subs	r6, #1
   37ef2:	e79c      	b.n	37e2e <__multiply+0x70>

00037ef4 <__lshift>:
   37ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37ef8:	460c      	mov	r4, r1
   37efa:	4607      	mov	r7, r0
   37efc:	4691      	mov	r9, r2
   37efe:	ea4f 1a62 	mov.w	sl, r2, asr #5
   37f02:	6923      	ldr	r3, [r4, #16]
   37f04:	6849      	ldr	r1, [r1, #4]
   37f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
   37f0a:	68a3      	ldr	r3, [r4, #8]
   37f0c:	f108 0601 	add.w	r6, r8, #1
   37f10:	42b3      	cmp	r3, r6
   37f12:	db3f      	blt.n	37f94 <__lshift+0xa0>
   37f14:	4638      	mov	r0, r7
   37f16:	f7ff fe71 	bl	37bfc <_Balloc>
   37f1a:	2300      	movs	r3, #0
   37f1c:	4605      	mov	r5, r0
   37f1e:	f100 0114 	add.w	r1, r0, #20
   37f22:	f100 0210 	add.w	r2, r0, #16
   37f26:	4618      	mov	r0, r3
   37f28:	4553      	cmp	r3, sl
   37f2a:	db36      	blt.n	37f9a <__lshift+0xa6>
   37f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   37f30:	f104 0314 	add.w	r3, r4, #20
   37f34:	6920      	ldr	r0, [r4, #16]
   37f36:	f019 091f 	ands.w	r9, r9, #31
   37f3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   37f3e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   37f42:	d02e      	beq.n	37fa2 <__lshift+0xae>
   37f44:	f1c9 0e20 	rsb	lr, r9, #32
   37f48:	468a      	mov	sl, r1
   37f4a:	2200      	movs	r2, #0
   37f4c:	6818      	ldr	r0, [r3, #0]
   37f4e:	fa00 f009 	lsl.w	r0, r0, r9
   37f52:	4302      	orrs	r2, r0
   37f54:	f84a 2b04 	str.w	r2, [sl], #4
   37f58:	f853 2b04 	ldr.w	r2, [r3], #4
   37f5c:	459c      	cmp	ip, r3
   37f5e:	fa22 f20e 	lsr.w	r2, r2, lr
   37f62:	d8f3      	bhi.n	37f4c <__lshift+0x58>
   37f64:	ebac 0304 	sub.w	r3, ip, r4
   37f68:	f104 0015 	add.w	r0, r4, #21
   37f6c:	3b15      	subs	r3, #21
   37f6e:	f023 0303 	bic.w	r3, r3, #3
   37f72:	3304      	adds	r3, #4
   37f74:	4560      	cmp	r0, ip
   37f76:	bf88      	it	hi
   37f78:	2304      	movhi	r3, #4
   37f7a:	50ca      	str	r2, [r1, r3]
   37f7c:	b10a      	cbz	r2, 37f82 <__lshift+0x8e>
   37f7e:	f108 0602 	add.w	r6, r8, #2
   37f82:	3e01      	subs	r6, #1
   37f84:	4638      	mov	r0, r7
   37f86:	4621      	mov	r1, r4
   37f88:	612e      	str	r6, [r5, #16]
   37f8a:	f7ff fe6b 	bl	37c64 <_Bfree>
   37f8e:	4628      	mov	r0, r5
   37f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37f94:	3101      	adds	r1, #1
   37f96:	005b      	lsls	r3, r3, #1
   37f98:	e7ba      	b.n	37f10 <__lshift+0x1c>
   37f9a:	3301      	adds	r3, #1
   37f9c:	f842 0f04 	str.w	r0, [r2, #4]!
   37fa0:	e7c2      	b.n	37f28 <__lshift+0x34>
   37fa2:	3904      	subs	r1, #4
   37fa4:	f853 2b04 	ldr.w	r2, [r3], #4
   37fa8:	459c      	cmp	ip, r3
   37faa:	f841 2f04 	str.w	r2, [r1, #4]!
   37fae:	d8f9      	bhi.n	37fa4 <__lshift+0xb0>
   37fb0:	e7e7      	b.n	37f82 <__lshift+0x8e>

00037fb2 <__mcmp>:
   37fb2:	4603      	mov	r3, r0
   37fb4:	690a      	ldr	r2, [r1, #16]
   37fb6:	6900      	ldr	r0, [r0, #16]
   37fb8:	1a80      	subs	r0, r0, r2
   37fba:	b530      	push	{r4, r5, lr}
   37fbc:	d10d      	bne.n	37fda <__mcmp+0x28>
   37fbe:	3314      	adds	r3, #20
   37fc0:	3114      	adds	r1, #20
   37fc2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   37fc6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   37fca:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   37fce:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   37fd2:	4295      	cmp	r5, r2
   37fd4:	d002      	beq.n	37fdc <__mcmp+0x2a>
   37fd6:	d304      	bcc.n	37fe2 <__mcmp+0x30>
   37fd8:	2001      	movs	r0, #1
   37fda:	bd30      	pop	{r4, r5, pc}
   37fdc:	42a3      	cmp	r3, r4
   37fde:	d3f4      	bcc.n	37fca <__mcmp+0x18>
   37fe0:	e7fb      	b.n	37fda <__mcmp+0x28>
   37fe2:	f04f 30ff 	mov.w	r0, #4294967295
   37fe6:	e7f8      	b.n	37fda <__mcmp+0x28>

00037fe8 <__mdiff>:
   37fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37fec:	460c      	mov	r4, r1
   37fee:	4606      	mov	r6, r0
   37ff0:	4611      	mov	r1, r2
   37ff2:	4692      	mov	sl, r2
   37ff4:	4620      	mov	r0, r4
   37ff6:	f7ff ffdc 	bl	37fb2 <__mcmp>
   37ffa:	1e05      	subs	r5, r0, #0
   37ffc:	d108      	bne.n	38010 <__mdiff+0x28>
   37ffe:	4629      	mov	r1, r5
   38000:	4630      	mov	r0, r6
   38002:	f7ff fdfb 	bl	37bfc <_Balloc>
   38006:	2301      	movs	r3, #1
   38008:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3800c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38010:	bfa3      	ittte	ge
   38012:	4653      	movge	r3, sl
   38014:	46a2      	movge	sl, r4
   38016:	2500      	movge	r5, #0
   38018:	2501      	movlt	r5, #1
   3801a:	bfa8      	it	ge
   3801c:	461c      	movge	r4, r3
   3801e:	f8da 1004 	ldr.w	r1, [sl, #4]
   38022:	4630      	mov	r0, r6
   38024:	f7ff fdea 	bl	37bfc <_Balloc>
   38028:	f104 0914 	add.w	r9, r4, #20
   3802c:	f8da 7010 	ldr.w	r7, [sl, #16]
   38030:	f100 0814 	add.w	r8, r0, #20
   38034:	6926      	ldr	r6, [r4, #16]
   38036:	f10a 0210 	add.w	r2, sl, #16
   3803a:	60c5      	str	r5, [r0, #12]
   3803c:	f10a 0514 	add.w	r5, sl, #20
   38040:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   38044:	46c2      	mov	sl, r8
   38046:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   3804a:	f04f 0c00 	mov.w	ip, #0
   3804e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   38052:	f859 3b04 	ldr.w	r3, [r9], #4
   38056:	fa1f f18b 	uxth.w	r1, fp
   3805a:	454e      	cmp	r6, r9
   3805c:	4461      	add	r1, ip
   3805e:	fa1f fc83 	uxth.w	ip, r3
   38062:	ea4f 4313 	mov.w	r3, r3, lsr #16
   38066:	eba1 010c 	sub.w	r1, r1, ip
   3806a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   3806e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   38072:	b289      	uxth	r1, r1
   38074:	ea4f 4c23 	mov.w	ip, r3, asr #16
   38078:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   3807c:	f84a 3b04 	str.w	r3, [sl], #4
   38080:	d8e5      	bhi.n	3804e <__mdiff+0x66>
   38082:	1b33      	subs	r3, r6, r4
   38084:	3415      	adds	r4, #21
   38086:	3b15      	subs	r3, #21
   38088:	f023 0303 	bic.w	r3, r3, #3
   3808c:	3304      	adds	r3, #4
   3808e:	42a6      	cmp	r6, r4
   38090:	bf38      	it	cc
   38092:	2304      	movcc	r3, #4
   38094:	441d      	add	r5, r3
   38096:	4443      	add	r3, r8
   38098:	462c      	mov	r4, r5
   3809a:	461e      	mov	r6, r3
   3809c:	4574      	cmp	r4, lr
   3809e:	d30e      	bcc.n	380be <__mdiff+0xd6>
   380a0:	f10e 0203 	add.w	r2, lr, #3
   380a4:	1b52      	subs	r2, r2, r5
   380a6:	3d03      	subs	r5, #3
   380a8:	f022 0203 	bic.w	r2, r2, #3
   380ac:	45ae      	cmp	lr, r5
   380ae:	bf38      	it	cc
   380b0:	2200      	movcc	r2, #0
   380b2:	441a      	add	r2, r3
   380b4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   380b8:	b18b      	cbz	r3, 380de <__mdiff+0xf6>
   380ba:	6107      	str	r7, [r0, #16]
   380bc:	e7a6      	b.n	3800c <__mdiff+0x24>
   380be:	f854 8b04 	ldr.w	r8, [r4], #4
   380c2:	fa1f f288 	uxth.w	r2, r8
   380c6:	4462      	add	r2, ip
   380c8:	1411      	asrs	r1, r2, #16
   380ca:	b292      	uxth	r2, r2
   380cc:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   380d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   380d4:	ea4f 4c21 	mov.w	ip, r1, asr #16
   380d8:	f846 2b04 	str.w	r2, [r6], #4
   380dc:	e7de      	b.n	3809c <__mdiff+0xb4>
   380de:	3f01      	subs	r7, #1
   380e0:	e7e8      	b.n	380b4 <__mdiff+0xcc>

000380e2 <__d2b>:
   380e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   380e6:	461c      	mov	r4, r3
   380e8:	2101      	movs	r1, #1
   380ea:	4690      	mov	r8, r2
   380ec:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   380f0:	f7ff fd84 	bl	37bfc <_Balloc>
   380f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
   380f8:	f3c4 540a 	ubfx	r4, r4, #20, #11
   380fc:	4607      	mov	r7, r0
   380fe:	bb2c      	cbnz	r4, 3814c <__d2b+0x6a>
   38100:	9301      	str	r3, [sp, #4]
   38102:	f1b8 0300 	subs.w	r3, r8, #0
   38106:	d026      	beq.n	38156 <__d2b+0x74>
   38108:	4668      	mov	r0, sp
   3810a:	9300      	str	r3, [sp, #0]
   3810c:	f7ff fe20 	bl	37d50 <__lo0bits>
   38110:	9900      	ldr	r1, [sp, #0]
   38112:	b1f0      	cbz	r0, 38152 <__d2b+0x70>
   38114:	9a01      	ldr	r2, [sp, #4]
   38116:	f1c0 0320 	rsb	r3, r0, #32
   3811a:	fa02 f303 	lsl.w	r3, r2, r3
   3811e:	40c2      	lsrs	r2, r0
   38120:	430b      	orrs	r3, r1
   38122:	9201      	str	r2, [sp, #4]
   38124:	617b      	str	r3, [r7, #20]
   38126:	9b01      	ldr	r3, [sp, #4]
   38128:	2b00      	cmp	r3, #0
   3812a:	61bb      	str	r3, [r7, #24]
   3812c:	bf14      	ite	ne
   3812e:	2102      	movne	r1, #2
   38130:	2101      	moveq	r1, #1
   38132:	6139      	str	r1, [r7, #16]
   38134:	b1c4      	cbz	r4, 38168 <__d2b+0x86>
   38136:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   3813a:	4404      	add	r4, r0
   3813c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   38140:	6034      	str	r4, [r6, #0]
   38142:	6028      	str	r0, [r5, #0]
   38144:	4638      	mov	r0, r7
   38146:	b002      	add	sp, #8
   38148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3814c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   38150:	e7d6      	b.n	38100 <__d2b+0x1e>
   38152:	6179      	str	r1, [r7, #20]
   38154:	e7e7      	b.n	38126 <__d2b+0x44>
   38156:	a801      	add	r0, sp, #4
   38158:	f7ff fdfa 	bl	37d50 <__lo0bits>
   3815c:	9b01      	ldr	r3, [sp, #4]
   3815e:	2101      	movs	r1, #1
   38160:	3020      	adds	r0, #32
   38162:	617b      	str	r3, [r7, #20]
   38164:	6139      	str	r1, [r7, #16]
   38166:	e7e5      	b.n	38134 <__d2b+0x52>
   38168:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   3816c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   38170:	6030      	str	r0, [r6, #0]
   38172:	6918      	ldr	r0, [r3, #16]
   38174:	f7ff fdcc 	bl	37d10 <__hi0bits>
   38178:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   3817c:	6029      	str	r1, [r5, #0]
   3817e:	e7e1      	b.n	38144 <__d2b+0x62>

00038180 <_calloc_r>:
   38180:	b538      	push	{r3, r4, r5, lr}
   38182:	fb02 f501 	mul.w	r5, r2, r1
   38186:	4629      	mov	r1, r5
   38188:	f7f6 f940 	bl	2e40c <_malloc_r>
   3818c:	4604      	mov	r4, r0
   3818e:	b118      	cbz	r0, 38198 <_calloc_r+0x18>
   38190:	462a      	mov	r2, r5
   38192:	2100      	movs	r1, #0
   38194:	f7ff fb15 	bl	377c2 <memset>
   38198:	4620      	mov	r0, r4
   3819a:	bd38      	pop	{r3, r4, r5, pc}

0003819c <_realloc_r>:
   3819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3819e:	4607      	mov	r7, r0
   381a0:	4614      	mov	r4, r2
   381a2:	460e      	mov	r6, r1
   381a4:	b921      	cbnz	r1, 381b0 <_realloc_r+0x14>
   381a6:	4611      	mov	r1, r2
   381a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   381ac:	f7f6 b92e 	b.w	2e40c <_malloc_r>
   381b0:	b922      	cbnz	r2, 381bc <_realloc_r+0x20>
   381b2:	4625      	mov	r5, r4
   381b4:	f7f6 f8dc 	bl	2e370 <_free_r>
   381b8:	4628      	mov	r0, r5
   381ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   381bc:	f000 f962 	bl	38484 <_malloc_usable_size_r>
   381c0:	42a0      	cmp	r0, r4
   381c2:	d20f      	bcs.n	381e4 <_realloc_r+0x48>
   381c4:	4621      	mov	r1, r4
   381c6:	4638      	mov	r0, r7
   381c8:	f7f6 f920 	bl	2e40c <_malloc_r>
   381cc:	4605      	mov	r5, r0
   381ce:	2800      	cmp	r0, #0
   381d0:	d0f2      	beq.n	381b8 <_realloc_r+0x1c>
   381d2:	4631      	mov	r1, r6
   381d4:	4622      	mov	r2, r4
   381d6:	f7ff fad4 	bl	37782 <memcpy>
   381da:	4631      	mov	r1, r6
   381dc:	4638      	mov	r0, r7
   381de:	f7f6 f8c7 	bl	2e370 <_free_r>
   381e2:	e7e9      	b.n	381b8 <_realloc_r+0x1c>
   381e4:	4635      	mov	r5, r6
   381e6:	e7e7      	b.n	381b8 <_realloc_r+0x1c>

000381e8 <__ssputs_r>:
   381e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   381ec:	688e      	ldr	r6, [r1, #8]
   381ee:	4682      	mov	sl, r0
   381f0:	460c      	mov	r4, r1
   381f2:	4690      	mov	r8, r2
   381f4:	429e      	cmp	r6, r3
   381f6:	461f      	mov	r7, r3
   381f8:	d838      	bhi.n	3826c <__ssputs_r+0x84>
   381fa:	898a      	ldrh	r2, [r1, #12]
   381fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
   38200:	d032      	beq.n	38268 <__ssputs_r+0x80>
   38202:	6825      	ldr	r5, [r4, #0]
   38204:	3301      	adds	r3, #1
   38206:	6909      	ldr	r1, [r1, #16]
   38208:	eba5 0901 	sub.w	r9, r5, r1
   3820c:	6965      	ldr	r5, [r4, #20]
   3820e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   38212:	444b      	add	r3, r9
   38214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   38218:	106d      	asrs	r5, r5, #1
   3821a:	429d      	cmp	r5, r3
   3821c:	bf38      	it	cc
   3821e:	461d      	movcc	r5, r3
   38220:	0553      	lsls	r3, r2, #21
   38222:	d531      	bpl.n	38288 <__ssputs_r+0xa0>
   38224:	4629      	mov	r1, r5
   38226:	f7f6 f8f1 	bl	2e40c <_malloc_r>
   3822a:	4606      	mov	r6, r0
   3822c:	b950      	cbnz	r0, 38244 <__ssputs_r+0x5c>
   3822e:	230c      	movs	r3, #12
   38230:	f04f 30ff 	mov.w	r0, #4294967295
   38234:	f8ca 3000 	str.w	r3, [sl]
   38238:	89a3      	ldrh	r3, [r4, #12]
   3823a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3823e:	81a3      	strh	r3, [r4, #12]
   38240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   38244:	464a      	mov	r2, r9
   38246:	6921      	ldr	r1, [r4, #16]
   38248:	f7ff fa9b 	bl	37782 <memcpy>
   3824c:	89a3      	ldrh	r3, [r4, #12]
   3824e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   38252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   38256:	81a3      	strh	r3, [r4, #12]
   38258:	6126      	str	r6, [r4, #16]
   3825a:	444e      	add	r6, r9
   3825c:	6165      	str	r5, [r4, #20]
   3825e:	eba5 0509 	sub.w	r5, r5, r9
   38262:	6026      	str	r6, [r4, #0]
   38264:	463e      	mov	r6, r7
   38266:	60a5      	str	r5, [r4, #8]
   38268:	42be      	cmp	r6, r7
   3826a:	d900      	bls.n	3826e <__ssputs_r+0x86>
   3826c:	463e      	mov	r6, r7
   3826e:	4632      	mov	r2, r6
   38270:	4641      	mov	r1, r8
   38272:	6820      	ldr	r0, [r4, #0]
   38274:	f000 f8ec 	bl	38450 <memmove>
   38278:	68a3      	ldr	r3, [r4, #8]
   3827a:	6822      	ldr	r2, [r4, #0]
   3827c:	2000      	movs	r0, #0
   3827e:	1b9b      	subs	r3, r3, r6
   38280:	4432      	add	r2, r6
   38282:	60a3      	str	r3, [r4, #8]
   38284:	6022      	str	r2, [r4, #0]
   38286:	e7db      	b.n	38240 <__ssputs_r+0x58>
   38288:	462a      	mov	r2, r5
   3828a:	f7ff ff87 	bl	3819c <_realloc_r>
   3828e:	4606      	mov	r6, r0
   38290:	2800      	cmp	r0, #0
   38292:	d1e1      	bne.n	38258 <__ssputs_r+0x70>
   38294:	6921      	ldr	r1, [r4, #16]
   38296:	4650      	mov	r0, sl
   38298:	f7f6 f86a 	bl	2e370 <_free_r>
   3829c:	e7c7      	b.n	3822e <__ssputs_r+0x46>

0003829e <_sungetc_r>:
   3829e:	b538      	push	{r3, r4, r5, lr}
   382a0:	1c4b      	adds	r3, r1, #1
   382a2:	4614      	mov	r4, r2
   382a4:	d103      	bne.n	382ae <_sungetc_r+0x10>
   382a6:	f04f 35ff 	mov.w	r5, #4294967295
   382aa:	4628      	mov	r0, r5
   382ac:	bd38      	pop	{r3, r4, r5, pc}
   382ae:	8993      	ldrh	r3, [r2, #12]
   382b0:	b2cd      	uxtb	r5, r1
   382b2:	f023 0320 	bic.w	r3, r3, #32
   382b6:	8193      	strh	r3, [r2, #12]
   382b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   382ba:	6852      	ldr	r2, [r2, #4]
   382bc:	b18b      	cbz	r3, 382e2 <_sungetc_r+0x44>
   382be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   382c0:	4293      	cmp	r3, r2
   382c2:	dd08      	ble.n	382d6 <_sungetc_r+0x38>
   382c4:	6823      	ldr	r3, [r4, #0]
   382c6:	1e5a      	subs	r2, r3, #1
   382c8:	6022      	str	r2, [r4, #0]
   382ca:	f803 5c01 	strb.w	r5, [r3, #-1]
   382ce:	6863      	ldr	r3, [r4, #4]
   382d0:	3301      	adds	r3, #1
   382d2:	6063      	str	r3, [r4, #4]
   382d4:	e7e9      	b.n	382aa <_sungetc_r+0xc>
   382d6:	4621      	mov	r1, r4
   382d8:	f000 f874 	bl	383c4 <__submore>
   382dc:	2800      	cmp	r0, #0
   382de:	d0f1      	beq.n	382c4 <_sungetc_r+0x26>
   382e0:	e7e1      	b.n	382a6 <_sungetc_r+0x8>
   382e2:	6921      	ldr	r1, [r4, #16]
   382e4:	6823      	ldr	r3, [r4, #0]
   382e6:	b151      	cbz	r1, 382fe <_sungetc_r+0x60>
   382e8:	4299      	cmp	r1, r3
   382ea:	d208      	bcs.n	382fe <_sungetc_r+0x60>
   382ec:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   382f0:	42a9      	cmp	r1, r5
   382f2:	d104      	bne.n	382fe <_sungetc_r+0x60>
   382f4:	3b01      	subs	r3, #1
   382f6:	3201      	adds	r2, #1
   382f8:	6023      	str	r3, [r4, #0]
   382fa:	6062      	str	r2, [r4, #4]
   382fc:	e7d5      	b.n	382aa <_sungetc_r+0xc>
   382fe:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   38302:	f104 0344 	add.w	r3, r4, #68	; 0x44
   38306:	6363      	str	r3, [r4, #52]	; 0x34
   38308:	2303      	movs	r3, #3
   3830a:	63a3      	str	r3, [r4, #56]	; 0x38
   3830c:	4623      	mov	r3, r4
   3830e:	f803 5f46 	strb.w	r5, [r3, #70]!
   38312:	6023      	str	r3, [r4, #0]
   38314:	2301      	movs	r3, #1
   38316:	e7dc      	b.n	382d2 <_sungetc_r+0x34>

00038318 <__ssrefill_r>:
   38318:	b510      	push	{r4, lr}
   3831a:	460c      	mov	r4, r1
   3831c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   3831e:	b169      	cbz	r1, 3833c <__ssrefill_r+0x24>
   38320:	f104 0344 	add.w	r3, r4, #68	; 0x44
   38324:	4299      	cmp	r1, r3
   38326:	d001      	beq.n	3832c <__ssrefill_r+0x14>
   38328:	f7f6 f822 	bl	2e370 <_free_r>
   3832c:	2000      	movs	r0, #0
   3832e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   38330:	6360      	str	r0, [r4, #52]	; 0x34
   38332:	6063      	str	r3, [r4, #4]
   38334:	b113      	cbz	r3, 3833c <__ssrefill_r+0x24>
   38336:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   38338:	6023      	str	r3, [r4, #0]
   3833a:	bd10      	pop	{r4, pc}
   3833c:	6923      	ldr	r3, [r4, #16]
   3833e:	f04f 30ff 	mov.w	r0, #4294967295
   38342:	6023      	str	r3, [r4, #0]
   38344:	2300      	movs	r3, #0
   38346:	6063      	str	r3, [r4, #4]
   38348:	89a3      	ldrh	r3, [r4, #12]
   3834a:	f043 0320 	orr.w	r3, r3, #32
   3834e:	81a3      	strh	r3, [r4, #12]
   38350:	e7f3      	b.n	3833a <__ssrefill_r+0x22>

00038352 <__sccl>:
   38352:	b570      	push	{r4, r5, r6, lr}
   38354:	780b      	ldrb	r3, [r1, #0]
   38356:	4604      	mov	r4, r0
   38358:	2b5e      	cmp	r3, #94	; 0x5e
   3835a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   3835e:	bf13      	iteet	ne
   38360:	1c48      	addne	r0, r1, #1
   38362:	1c88      	addeq	r0, r1, #2
   38364:	784b      	ldrbeq	r3, [r1, #1]
   38366:	2200      	movne	r2, #0
   38368:	bf08      	it	eq
   3836a:	2201      	moveq	r2, #1
   3836c:	1e61      	subs	r1, r4, #1
   3836e:	f801 2f01 	strb.w	r2, [r1, #1]!
   38372:	42a9      	cmp	r1, r5
   38374:	d1fb      	bne.n	3836e <__sccl+0x1c>
   38376:	b90b      	cbnz	r3, 3837c <__sccl+0x2a>
   38378:	3801      	subs	r0, #1
   3837a:	bd70      	pop	{r4, r5, r6, pc}
   3837c:	f082 0101 	eor.w	r1, r2, #1
   38380:	1c42      	adds	r2, r0, #1
   38382:	54e1      	strb	r1, [r4, r3]
   38384:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   38388:	1e56      	subs	r6, r2, #1
   3838a:	4610      	mov	r0, r2
   3838c:	2d2d      	cmp	r5, #45	; 0x2d
   3838e:	d006      	beq.n	3839e <__sccl+0x4c>
   38390:	2d5d      	cmp	r5, #93	; 0x5d
   38392:	d0f2      	beq.n	3837a <__sccl+0x28>
   38394:	b90d      	cbnz	r5, 3839a <__sccl+0x48>
   38396:	4630      	mov	r0, r6
   38398:	e7ef      	b.n	3837a <__sccl+0x28>
   3839a:	462b      	mov	r3, r5
   3839c:	e7f0      	b.n	38380 <__sccl+0x2e>
   3839e:	7816      	ldrb	r6, [r2, #0]
   383a0:	2e5d      	cmp	r6, #93	; 0x5d
   383a2:	d0fa      	beq.n	3839a <__sccl+0x48>
   383a4:	42b3      	cmp	r3, r6
   383a6:	dcf8      	bgt.n	3839a <__sccl+0x48>
   383a8:	4618      	mov	r0, r3
   383aa:	3001      	adds	r0, #1
   383ac:	4286      	cmp	r6, r0
   383ae:	5421      	strb	r1, [r4, r0]
   383b0:	dcfb      	bgt.n	383aa <__sccl+0x58>
   383b2:	43d8      	mvns	r0, r3
   383b4:	1c5d      	adds	r5, r3, #1
   383b6:	3202      	adds	r2, #2
   383b8:	4430      	add	r0, r6
   383ba:	42b3      	cmp	r3, r6
   383bc:	bfa8      	it	ge
   383be:	2000      	movge	r0, #0
   383c0:	182b      	adds	r3, r5, r0
   383c2:	e7df      	b.n	38384 <__sccl+0x32>

000383c4 <__submore>:
   383c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   383c8:	460c      	mov	r4, r1
   383ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
   383cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   383d0:	4299      	cmp	r1, r3
   383d2:	d11a      	bne.n	3840a <__submore+0x46>
   383d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   383d8:	f7f6 f818 	bl	2e40c <_malloc_r>
   383dc:	b918      	cbnz	r0, 383e6 <__submore+0x22>
   383de:	f04f 30ff 	mov.w	r0, #4294967295
   383e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   383e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   383ea:	6360      	str	r0, [r4, #52]	; 0x34
   383ec:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   383f0:	63a3      	str	r3, [r4, #56]	; 0x38
   383f2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   383f6:	7083      	strb	r3, [r0, #2]
   383f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   383fc:	7043      	strb	r3, [r0, #1]
   383fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   38402:	7003      	strb	r3, [r0, #0]
   38404:	6020      	str	r0, [r4, #0]
   38406:	2000      	movs	r0, #0
   38408:	e7eb      	b.n	383e2 <__submore+0x1e>
   3840a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   3840c:	0077      	lsls	r7, r6, #1
   3840e:	463a      	mov	r2, r7
   38410:	f7ff fec4 	bl	3819c <_realloc_r>
   38414:	4605      	mov	r5, r0
   38416:	2800      	cmp	r0, #0
   38418:	d0e1      	beq.n	383de <__submore+0x1a>
   3841a:	eb00 0806 	add.w	r8, r0, r6
   3841e:	4601      	mov	r1, r0
   38420:	4632      	mov	r2, r6
   38422:	4640      	mov	r0, r8
   38424:	f7ff f9ad 	bl	37782 <memcpy>
   38428:	f8c4 8000 	str.w	r8, [r4]
   3842c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   38430:	e7e9      	b.n	38406 <__submore+0x42>

00038432 <__ascii_wctomb>:
   38432:	4603      	mov	r3, r0
   38434:	4608      	mov	r0, r1
   38436:	b141      	cbz	r1, 3844a <__ascii_wctomb+0x18>
   38438:	2aff      	cmp	r2, #255	; 0xff
   3843a:	d904      	bls.n	38446 <__ascii_wctomb+0x14>
   3843c:	228a      	movs	r2, #138	; 0x8a
   3843e:	f04f 30ff 	mov.w	r0, #4294967295
   38442:	601a      	str	r2, [r3, #0]
   38444:	4770      	bx	lr
   38446:	2001      	movs	r0, #1
   38448:	700a      	strb	r2, [r1, #0]
   3844a:	4770      	bx	lr

0003844c <__retarget_lock_acquire_recursive>:
   3844c:	4770      	bx	lr

0003844e <__retarget_lock_release_recursive>:
   3844e:	4770      	bx	lr

00038450 <memmove>:
   38450:	4288      	cmp	r0, r1
   38452:	b510      	push	{r4, lr}
   38454:	eb01 0402 	add.w	r4, r1, r2
   38458:	d902      	bls.n	38460 <memmove+0x10>
   3845a:	4284      	cmp	r4, r0
   3845c:	4623      	mov	r3, r4
   3845e:	d807      	bhi.n	38470 <memmove+0x20>
   38460:	1e43      	subs	r3, r0, #1
   38462:	42a1      	cmp	r1, r4
   38464:	d008      	beq.n	38478 <memmove+0x28>
   38466:	f811 2b01 	ldrb.w	r2, [r1], #1
   3846a:	f803 2f01 	strb.w	r2, [r3, #1]!
   3846e:	e7f8      	b.n	38462 <memmove+0x12>
   38470:	4402      	add	r2, r0
   38472:	4601      	mov	r1, r0
   38474:	428a      	cmp	r2, r1
   38476:	d100      	bne.n	3847a <memmove+0x2a>
   38478:	bd10      	pop	{r4, pc}
   3847a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3847e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   38482:	e7f7      	b.n	38474 <memmove+0x24>

00038484 <_malloc_usable_size_r>:
   38484:	f851 3c04 	ldr.w	r3, [r1, #-4]
   38488:	1f18      	subs	r0, r3, #4
   3848a:	2b00      	cmp	r3, #0
   3848c:	bfbc      	itt	lt
   3848e:	580b      	ldrlt	r3, [r1, r0]
   38490:	18c0      	addlt	r0, r0, r3
   38492:	4770      	bx	lr
