/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_CUSTOM_BME280_DRIVER_SPI_H
#define Z_INCLUDE_SYSCALLS_CUSTOM_BME280_DRIVER_SPI_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_custom_bme280_print(const struct device * dev);

__pinned_func
static inline void custom_bme280_print(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_CUSTOM_BME280_PRINT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_custom_bme280_print(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define custom_bme280_print(dev) do { 	sys_port_trace_syscall_enter(K_SYSCALL_CUSTOM_BME280_PRINT, custom_bme280_print, dev); 	custom_bme280_print(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_CUSTOM_BME280_PRINT, custom_bme280_print, dev); } while(false)
#endif
#endif


extern int z_impl_custom_bme280_open(const struct device * dev);

__pinned_func
static inline int custom_bme280_open(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_CUSTOM_BME280_OPEN);
	}
#endif
	compiler_barrier();
	return z_impl_custom_bme280_open(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define custom_bme280_open(dev) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_CUSTOM_BME280_OPEN, custom_bme280_open, dev); 	syscall__retval = custom_bme280_open(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_CUSTOM_BME280_OPEN, custom_bme280_open, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_custom_bme280_read_reg(const struct device * dev, uint8_t reg, uint8_t * data, int size);

__pinned_func
static inline int custom_bme280_read_reg(const struct device * dev, uint8_t reg, uint8_t * data, int size)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint8_t val; } parm1 = { .val = reg };
		union { uintptr_t x; uint8_t * val; } parm2 = { .val = data };
		union { uintptr_t x; int val; } parm3 = { .val = size };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_CUSTOM_BME280_READ_REG);
	}
#endif
	compiler_barrier();
	return z_impl_custom_bme280_read_reg(dev, reg, data, size);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define custom_bme280_read_reg(dev, reg, data, size) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_CUSTOM_BME280_READ_REG, custom_bme280_read_reg, dev, reg, data, size); 	syscall__retval = custom_bme280_read_reg(dev, reg, data, size); 	sys_port_trace_syscall_exit(K_SYSCALL_CUSTOM_BME280_READ_REG, custom_bme280_read_reg, dev, reg, data, size, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_custom_bme280_write_reg(const struct device * dev, uint8_t reg, uint8_t value);

__pinned_func
static inline int custom_bme280_write_reg(const struct device * dev, uint8_t reg, uint8_t value)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint8_t val; } parm1 = { .val = reg };
		union { uintptr_t x; uint8_t val; } parm2 = { .val = value };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_CUSTOM_BME280_WRITE_REG);
	}
#endif
	compiler_barrier();
	return z_impl_custom_bme280_write_reg(dev, reg, value);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define custom_bme280_write_reg(dev, reg, value) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_CUSTOM_BME280_WRITE_REG, custom_bme280_write_reg, dev, reg, value); 	syscall__retval = custom_bme280_write_reg(dev, reg, value); 	sys_port_trace_syscall_exit(K_SYSCALL_CUSTOM_BME280_WRITE_REG, custom_bme280_write_reg, dev, reg, value, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_custom_bme280_close(const struct device * dev);

__pinned_func
static inline int custom_bme280_close(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_CUSTOM_BME280_CLOSE);
	}
#endif
	compiler_barrier();
	return z_impl_custom_bme280_close(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define custom_bme280_close(dev) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_CUSTOM_BME280_CLOSE, custom_bme280_close, dev); 	syscall__retval = custom_bme280_close(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_CUSTOM_BME280_CLOSE, custom_bme280_close, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
